cscope 15 $HOME/mytest/openvswitch-1.9.0 -q 0000017783 0003953543
	@/home/lsch/mytest/openvswitch-1.9.0/config.h

15 
	#HAVE_BACKTRACE
 1

	)

18 
	#HAVE_EXECINFO_H
 1

	)

21 
	#HAVE_GETLOADAVG
 1

	)

27 
	#HAVE_IF_PACKET
 1

	)

30 
	#HAVE_INTTYPES_H
 1

	)

36 
	#HAVE_LINUX_TYPES_H
 1

	)

40 
	#HAVE_MALLOC_HOOKS
 1

	)

43 
	#HAVE_MEMORY_H
 1

	)

46 
	#HAVE_MLOCKALL
 1

	)

49 
	#HAVE_MNTENT_H
 1

	)

52 
	#HAVE_NETLINK
 1

	)

55 
	#HAVE_OPENSSL
 1

	)

58 
	#HAVE_SETMNTENT
 1

	)

61 
	#HAVE_STATVFS
 1

	)

64 
	#HAVE_STDINT_H
 1

	)

67 
	#HAVE_STDLIB_H
 1

	)

70 
	#HAVE_STRINGS_H
 1

	)

73 
	#HAVE_STRING_H
 1

	)

76 
	#HAVE_STRNLEN
 1

	)

79 
	#HAVE_STRSIGNAL
 1

	)

88 
	#HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC
 1

	)

91 
	#HAVE_SYS_STATVFS_H
 1

	)

94 
	#HAVE_SYS_STAT_H
 1

	)

97 
	#HAVE_SYS_TYPES_H
 1

	)

100 
	#HAVE_UNISTD_H
 1

	)

103 
	#HAVE_VALGRIND_VALGRIND_H
 1

	)

106 
	#LINUX_DATAPATH
 1

	)

112 
	#PACKAGE
 "›ívswôch"

	)

115 
	#PACKAGE_BUGREPORT
 "ovs-bugs@›ívswôch.‹g"

	)

118 
	#PACKAGE_NAME
 "›ívswôch"

	)

121 
	#PACKAGE_STRING
 "›ívswôch 1.9.0"

	)

124 
	#PACKAGE_TARNAME
 "›ívswôch"

	)

127 
	#PACKAGE_URL
 ""

	)

130 
	#PACKAGE_VERSION
 "1.9.0"

	)

133 
	#STDC_HEADERS
 1

	)

138 
	#USE_LINKER_SECTIONS
 1

	)

141 #i‚de‡
_ALL_SOURCE


142 
	#_ALL_SOURCE
 1

	)

145 #i‚de‡
_GNU_SOURCE


146 
	#_GNU_SOURCE
 1

	)

149 #i‚de‡
_POSIX_PTHREAD_SEMANTICS


150 
	#_POSIX_PTHREAD_SEMANTICS
 1

	)

153 #i‚de‡
_TANDEM_SOURCE


154 
	#_TANDEM_SOURCE
 1

	)

157 #i‚de‡
__EXTENSIONS__


158 
	#__EXTENSIONS__
 1

	)

163 
	#VERSION
 "1.9.0"

	)

167 #i‡
deföed
 
AC_APPLE_UNIVERSAL_BUILD


168 #i‡
deföed
 
__BIG_ENDIAN__


169 
	#WORDS_BIGENDIAN
 1

	)

172 #i‚de‡
WORDS_BIGENDIAN


	@/home/lsch/mytest/openvswitch-1.9.0/datapath/actions.c

19 
	#¥_fmt
(
fmt
Ë
KBUILD_MODNAME
 ": " 
	)
fmt

21 
	~<löux/skbuff.h
>

22 
	~<löux/ö.h
>

23 
	~<löux/ù.h
>

24 
	~<löux/›ívswôch.h
>

25 
	~<löux/t˝.h
>

26 
	~<löux/udp.h
>

27 
	~<löux/ö6.h
>

28 
	~<löux/if_¨p.h
>

29 
	~<löux/if_vœn.h
>

30 
	~<√t/ù.h
>

31 
	~<√t/ùv6.h
>

32 
	~<√t/checksum.h
>

33 
	~<√t/dsfõld.h
>

35 
	~"checksum.h
"

36 
	~"d©≠©h.h
"

37 
	~"vœn.h
"

38 
	~"vp‹t.h
"

40 
	~"liu_buf„r.h
"

43 
do_execuã_a˘i⁄s
(
d©≠©h
 *
dp
, 
sk_buff
 *
skb
,

44 c⁄° 
∆©å
 *
©å
, 
Àn
,

45 
ovs_key_ùv4_tu¬ñ
 *
tun_key
, 
boﬁ
 
kìp_skb
);

47 
	$make_wrôabÀ
(
sk_buff
 *
skb
, 
wrôe_Àn
)

49 i‡(!
	`skb_˛⁄ed
(
skb
Ë|| 
	`skb_˛⁄e_wrôabÀ
(skb, 
wrôe_Àn
))

52  
	`pskb_ex∑nd_hód
(
skb
, 0, 0, 
GFP_ATOMIC
);

53 
	}
}

56 
	$__p›_vœn_tci
(
sk_buff
 *
skb
, 
__be16
 *
cuºít_tci
)

58 
vœn_hdr
 *
vhdr
;

59 
îr
;

61 
îr
 = 
	`make_wrôabÀ
(
skb
, 
VLAN_ETH_HLEN
);

62 i‡(
	`u∆ikñy
(
îr
))

63  
îr
;

65 i‡(
	`gë_ù_summed
(
skb
Ë=
OVS_CSUM_COMPLETE
)

66 
skb
->
csum
 = 
	`csum_sub
(skb->csum, 
	`csum_∑πül
(skb->
d©a


67 + (2 * 
ETH_ALEN
), 
VLAN_HLEN
, 0));

69 
vhdr
 = (
vœn_hdr
 *)(
skb
->
d©a
 + 
ETH_HLEN
);

70 *
cuºít_tci
 = 
vhdr
->
h_vœn_TCI
;

72 
	`memmove
(
skb
->
d©a
 + 
VLAN_HLEN
, skb->d©a, 2 * 
ETH_ALEN
);

73 
	`__skb_puŒ
(
skb
, 
VLAN_HLEN
);

75 
	`vœn_£t_íˇp_¥Ÿo
(
skb
, 
vhdr
);

76 
skb
->
mac_hódî
 +
VLAN_HLEN
;

77 
	`skb_ª£t_mac_Àn
(
skb
);

80 
	}
}

82 
	$p›_vœn
(
sk_buff
 *
skb
)

84 
__be16
 
tci
;

85 
îr
;

87 i‡(
	`likñy
(
	`vœn_tx_èg_¥e£¡
(
skb
))) {

88 
	`vœn_£t_tci
(
skb
, 0);

90 i‡(
	`u∆ikñy
(
skb
->
¥Ÿocﬁ
 !
	`ht⁄s
(
ETH_P_8021Q
) ||

91 
skb
->
Àn
 < 
VLAN_ETH_HLEN
))

94 
îr
 = 
	`__p›_vœn_tci
(
skb
, &
tci
);

95 i‡(
îr
)

96  
îr
;

99 i‡(
	`likñy
(
skb
->
¥Ÿocﬁ
 !
	`ht⁄s
(
ETH_P_8021Q
) ||

100 
skb
->
Àn
 < 
VLAN_ETH_HLEN
))

103 
îr
 = 
	`__p›_vœn_tci
(
skb
, &
tci
);

104 i‡(
	`u∆ikñy
(
îr
))

105  
îr
;

107 
	`__vœn_hwac˚l_put_èg
(
skb
, 
	`¡ohs
(
tci
));

109 
	}
}

111 
	$push_vœn
(
sk_buff
 *
skb
, c⁄° 
ovs_a˘i⁄_push_vœn
 *
vœn
)

113 i‡(
	`u∆ikñy
(
	`vœn_tx_èg_¥e£¡
(
skb
))) {

114 
u16
 
cuºít_èg
;

117 
cuºít_èg
 = 
	`vœn_tx_èg_gë
(
skb
);

119 i‡(!
	`__vœn_put_èg
(
skb
, 
cuºít_èg
))

120  -
ENOMEM
;

122 i‡(
	`gë_ù_summed
(
skb
Ë=
OVS_CSUM_COMPLETE
)

123 
skb
->
csum
 = 
	`csum_add
(skb->csum, 
	`csum_∑πül
(skb->
d©a


124 + (2 * 
ETH_ALEN
), 
VLAN_HLEN
, 0));

127 
	`__vœn_hwac˚l_put_èg
(
skb
, 
	`¡ohs
(
vœn
->
vœn_tci
Ë& ~
VLAN_TAG_PRESENT
);

129 
	}
}

131 
	$£t_ëh_addr
(
sk_buff
 *
skb
,

132 c⁄° 
ovs_key_ëhî√t
 *
ëh_key
)

134 
îr
;

135 
îr
 = 
	`make_wrôabÀ
(
skb
, 
ETH_HLEN
);

136 i‡(
	`u∆ikñy
(
îr
))

137  
îr
;

139 
	`mem˝y
(
	`ëh_hdr
(
skb
)->
h_sour˚
, 
ëh_key
->
ëh_§c
, 
ETH_ALEN
);

140 
	`mem˝y
(
	`ëh_hdr
(
skb
)->
h_de°
, 
ëh_key
->
ëh_d°
, 
ETH_ALEN
);

143 
	}
}

145 
	$£t_ù_addr
(
sk_buff
 *
skb
, 
ùhdr
 *
nh
,

146 
__be32
 *
addr
, __be32 
√w_addr
)

148 
å™•‹t_Àn
 = 
skb
->
Àn
 - 
	`skb_å™•‹t_off£t
(skb);

150 i‡(
nh
->
¥Ÿocﬁ
 =
IPPROTO_TCP
) {

151 i‡(
	`likñy
(
å™•‹t_Àn
 >(
t˝hdr
)))

152 
	`öë_¥Ÿo_csum_ª∂a˚4
(&
	`t˝_hdr
(
skb
)->
check
, skb,

153 *
addr
, 
√w_addr
, 1);

154 } i‡(
nh
->
¥Ÿocﬁ
 =
IPPROTO_UDP
) {

155 i‡(
	`likñy
(
å™•‹t_Àn
 >(
udphdr
))) {

156 
udphdr
 *
uh
 = 
	`udp_hdr
(
skb
);

158 i‡(
uh
->
check
 ||

159 
	`gë_ù_summed
(
skb
Ë=
OVS_CSUM_PARTIAL
) {

160 
	`öë_¥Ÿo_csum_ª∂a˚4
(&
uh
->
check
, 
skb
,

161 *
addr
, 
√w_addr
, 1);

162 i‡(!
uh
->
check
)

163 
uh
->
check
 = 
CSUM_MANGLED_0
;

168 
	`csum_ª∂a˚4
(&
nh
->
check
, *
addr
, 
√w_addr
);

169 
	`skb_˛ór_rxhash
(
skb
);

170 *
addr
 = 
√w_addr
;

171 
	}
}

173 
	$upd©e_ùv6_checksum
(
sk_buff
 *
skb
, 
u8
 
l4_¥Ÿo
,

174 
__be32
 
addr
[4], c⁄° __be32 
√w_addr
[4])

176 
å™•‹t_Àn
 = 
skb
->
Àn
 - 
	`skb_å™•‹t_off£t
(skb);

178 i‡(
l4_¥Ÿo
 =
IPPROTO_TCP
) {

179 i‡(
	`likñy
(
å™•‹t_Àn
 >(
t˝hdr
)))

180 
	`öë_¥Ÿo_csum_ª∂a˚16
(&
	`t˝_hdr
(
skb
)->
check
, skb,

181 
addr
, 
√w_addr
, 1);

182 } i‡(
l4_¥Ÿo
 =
IPPROTO_UDP
) {

183 i‡(
	`likñy
(
å™•‹t_Àn
 >(
udphdr
))) {

184 
udphdr
 *
uh
 = 
	`udp_hdr
(
skb
);

186 i‡(
uh
->
check
 ||

187 
	`gë_ù_summed
(
skb
Ë=
OVS_CSUM_PARTIAL
) {

188 
	`öë_¥Ÿo_csum_ª∂a˚16
(&
uh
->
check
, 
skb
,

189 
addr
, 
√w_addr
, 1);

190 i‡(!
uh
->
check
)

191 
uh
->
check
 = 
CSUM_MANGLED_0
;

195 
	}
}

197 
	$£t_ùv6_addr
(
sk_buff
 *
skb
, 
u8
 
l4_¥Ÿo
,

198 
__be32
 
addr
[4], c⁄° __be32 
√w_addr
[4],

199 
boﬁ
 
ªˇlcuœã_csum
)

201 i‡(
ªˇlcuœã_csum
)

202 
	`upd©e_ùv6_checksum
(
skb
, 
l4_¥Ÿo
, 
addr
, 
√w_addr
);

204 
	`skb_˛ór_rxhash
(
skb
);

205 
	`mem˝y
(
addr
, 
√w_addr
, (
__be32
[4]));

206 
	}
}

208 
	$£t_ùv6_tc
(
ùv6hdr
 *
nh
, 
u8
 
tc
)

210 
nh
->
¥i‹ôy
 = 
tc
 >> 4;

211 
nh
->
Êow_lbl
[0] = (nh->Êow_lbl[0] & 0x0FË| ((
tc
 & 0x0F) << 4);

212 
	}
}

214 
	$£t_ùv6_Ê
(
ùv6hdr
 *
nh
, 
u32
 
Ê
)

216 
nh
->
Êow_lbl
[0] = (nh->Êow_lbl[0] & 0xF0Ë| (
Ê
 & 0x000F0000) >> 16;

217 
nh
->
Êow_lbl
[1] = (
Ê
 & 0x0000FF00) >> 8;

218 
nh
->
Êow_lbl
[2] = 
Ê
 & 0x000000FF;

219 
	}
}

221 
	$£t_ù_âl
(
sk_buff
 *
skb
, 
ùhdr
 *
nh
, 
u8
 
√w_âl
)

223 
	`csum_ª∂a˚2
(&
nh
->
check
, 
	`ht⁄s
“h->
âl
 << 8), ht⁄s(
√w_âl
 << 8));

224 
nh
->
âl
 = 
√w_âl
;

225 
	}
}

227 
	$£t_ùv4
(
sk_buff
 *
skb
, c⁄° 
ovs_key_ùv4
 *
ùv4_key
)

229 
ùhdr
 *
nh
;

230 
îr
;

232 
îr
 = 
	`make_wrôabÀ
(
skb
, 
	`skb_√tw‹k_off£t
(skb) +

233 (
ùhdr
));

234 i‡(
	`u∆ikñy
(
îr
))

235  
îr
;

237 
nh
 = 
	`ù_hdr
(
skb
);

239 i‡(
ùv4_key
->
ùv4_§c
 !
nh
->
ßddr
)

240 
	`£t_ù_addr
(
skb
, 
nh
, &nh->
ßddr
, 
ùv4_key
->
ùv4_§c
);

242 i‡(
ùv4_key
->
ùv4_d°
 !
nh
->
daddr
)

243 
	`£t_ù_addr
(
skb
, 
nh
, &nh->
daddr
, 
ùv4_key
->
ùv4_d°
);

245 i‡(
ùv4_key
->
ùv4_tos
 !
nh
->
tos
)

246 
	`ùv4_ch™ge_dsfõld
(
nh
, 0, 
ùv4_key
->
ùv4_tos
);

248 i‡(
ùv4_key
->
ùv4_âl
 !
nh
->
âl
)

249 
	`£t_ù_âl
(
skb
, 
nh
, 
ùv4_key
->
ùv4_âl
);

252 
	}
}

254 
	$£t_ùv6
(
sk_buff
 *
skb
, c⁄° 
ovs_key_ùv6
 *
ùv6_key
)

256 
ùv6hdr
 *
nh
;

257 
îr
;

258 
__be32
 *
ßddr
;

259 
__be32
 *
daddr
;

261 
îr
 = 
	`make_wrôabÀ
(
skb
, 
	`skb_√tw‹k_off£t
(skb) +

262 (
ùv6hdr
));

263 i‡(
	`u∆ikñy
(
îr
))

264  
îr
;

266 
nh
 = 
	`ùv6_hdr
(
skb
);

267 
ßddr
 = (
__be32
 *)&
nh
->saddr;

268 
daddr
 = (
__be32
 *)&
nh
->daddr;

270 i‡(
	`memcmp
(
ùv6_key
->
ùv6_§c
, 
ßddr
, (ipv6_key->ipv6_src)))

271 
	`£t_ùv6_addr
(
skb
, 
ùv6_key
->
ùv6_¥Ÿo
, 
ßddr
,

272 
ùv6_key
->
ùv6_§c
, 
åue
);

274 i‡(
	`memcmp
(
ùv6_key
->
ùv6_d°
, 
daddr
, (ipv6_key->ipv6_dst))) {

275 
off£t
 = 0;

276 
Êags
 = 
OVS_IP6T_FH_F_SKIP_RH
;

277 
boﬁ
 
ªˇlc_csum
 = 
åue
;

279 i‡(
	`ùv6_ext_hdr
(
nh
->
√xthdr
))

280 
ªˇlc_csum
 = 
	`ùv6_föd_hdr
(
skb
, &
off£t
,

281 
NEXTHDR_ROUTING
, 
NULL
,

282 &
Êags
Ë!
NEXTHDR_ROUTING
;

284 
	`£t_ùv6_addr
(
skb
, 
ùv6_key
->
ùv6_¥Ÿo
, 
daddr
,

285 
ùv6_key
->
ùv6_d°
, 
ªˇlc_csum
);

288 
	`£t_ùv6_tc
(
nh
, 
ùv6_key
->
ùv6_t˛ass
);

289 
	`£t_ùv6_Ê
(
nh
, 
	`¡ohl
(
ùv6_key
->
ùv6_œbñ
));

290 
nh
->
h›_limô
 = 
ùv6_key
->
ùv6_hlimô
;

293 
	}
}

296 
	$£t_ç_p‹t
(
sk_buff
 *
skb
, 
__be16
 *
p‹t
,

297 
__be16
 
√w_p‹t
, 
__sum16
 *
check
)

299 
	`öë_¥Ÿo_csum_ª∂a˚2
(
check
, 
skb
, *
p‹t
, 
√w_p‹t
, 0);

300 *
p‹t
 = 
√w_p‹t
;

301 
	`skb_˛ór_rxhash
(
skb
);

302 
	}
}

304 
	$£t_udp_p‹t
(
sk_buff
 *
skb
, 
__be16
 *
p‹t
, __be16 
√w_p‹t
)

306 
udphdr
 *
uh
 = 
	`udp_hdr
(
skb
);

308 i‡(
uh
->
check
 && 
	`gë_ù_summed
(
skb
Ë!
OVS_CSUM_PARTIAL
) {

309 
	`£t_ç_p‹t
(
skb
, 
p‹t
, 
√w_p‹t
, &
uh
->
check
);

311 i‡(!
uh
->
check
)

312 
uh
->
check
 = 
CSUM_MANGLED_0
;

314 *
p‹t
 = 
√w_p‹t
;

315 
	`skb_˛ór_rxhash
(
skb
);

317 
	}
}

319 
	$£t_udp
(
sk_buff
 *
skb
, c⁄° 
ovs_key_udp
 *
udp_p‹t_key
)

321 
udphdr
 *
uh
;

322 
îr
;

324 
îr
 = 
	`make_wrôabÀ
(
skb
, 
	`skb_å™•‹t_off£t
(skb) +

325 (
udphdr
));

326 i‡(
	`u∆ikñy
(
îr
))

327  
îr
;

329 
uh
 = 
	`udp_hdr
(
skb
);

330 i‡(
udp_p‹t_key
->
udp_§c
 !
uh
->
sour˚
)

331 
	`£t_udp_p‹t
(
skb
, &
uh
->
sour˚
, 
udp_p‹t_key
->
udp_§c
);

333 i‡(
udp_p‹t_key
->
udp_d°
 !
uh
->
de°
)

334 
	`£t_udp_p‹t
(
skb
, &
uh
->
de°
, 
udp_p‹t_key
->
udp_d°
);

337 
	}
}

339 
	$£t_t˝
(
sk_buff
 *
skb
, c⁄° 
ovs_key_t˝
 *
t˝_p‹t_key
)

341 
t˝hdr
 *
th
;

342 
îr
;

344 
îr
 = 
	`make_wrôabÀ
(
skb
, 
	`skb_å™•‹t_off£t
(skb) +

345 (
t˝hdr
));

346 i‡(
	`u∆ikñy
(
îr
))

347  
îr
;

349 
th
 = 
	`t˝_hdr
(
skb
);

350 i‡(
t˝_p‹t_key
->
t˝_§c
 !
th
->
sour˚
)

351 
	`£t_ç_p‹t
(
skb
, &
th
->
sour˚
, 
t˝_p‹t_key
->
t˝_§c
, &th->
check
);

353 i‡(
t˝_p‹t_key
->
t˝_d°
 !
th
->
de°
)

354 
	`£t_ç_p‹t
(
skb
, &
th
->
de°
, 
t˝_p‹t_key
->
t˝_d°
, &th->
check
);

357 
	}
}

359 
	$do_ouçut
(
d©≠©h
 *
dp
, 
sk_buff
 *
skb
, 
out_p‹t
)

361 
vp‹t
 *vport;

363 i‡(
	`u∆ikñy
(!
skb
))

364  -
ENOMEM
;

366 
vp‹t
 = 
	`ovs_vp‹t_rcu
(
dp
, 
out_p‹t
);

367 i‡(
	`u∆ikñy
(!
vp‹t
)) {

368 
	`k‰ì_skb
(
skb
);

369  -
ENODEV
;

372 
	`ovs_vp‹t_£nd
(
vp‹t
, 
skb
);

374 
	}
}

376 
	$ouçut_u£r•a˚
(
d©≠©h
 *
dp
, 
sk_buff
 *
skb
,

377 c⁄° 
∆©å
 *
©å
)

379 
dp_upˇŒ_öfo
 
upˇŒ
;

380 c⁄° 
∆©å
 *
a
;

381 
ªm
;

383 
upˇŒ
.
cmd
 = 
OVS_PACKET_CMD_ACTION
;

384 
upˇŒ
.
key
 = &
	`OVS_CB
(
skb
)->
Êow
->key;

385 
upˇŒ
.
u£rd©a
 = 
NULL
;

386 
upˇŒ
.
p‹tid
 = 0;

388 
a
 = 
	`∆a_d©a
(
©å
), 
ªm
 = 
	`∆a_Àn
(attr);Ñem > 0;

389 
a
 = 
	`∆a_√xt
◊, &
ªm
)) {

390 
	`∆a_ty≥
(
a
)) {

391 
OVS_USERSPACE_ATTR_USERDATA
:

392 
upˇŒ
.
u£rd©a
 = 
a
;

395 
OVS_USERSPACE_ATTR_PID
:

396 
upˇŒ
.
p‹tid
 = 
	`∆a_gë_u32
(
a
);

401  
	`ovs_dp_upˇŒ
(
dp
, 
skb
, &
upˇŒ
);

402 
	}
}

404 
	$ßm∂e
(
d©≠©h
 *
dp
, 
sk_buff
 *
skb
,

405 c⁄° 
∆©å
 *
©å
,

406 
ovs_key_ùv4_tu¬ñ
 *
tun_key
)

408 c⁄° 
∆©å
 *
a˘s_li°
 = 
NULL
;

409 c⁄° 
∆©å
 *
a
;

410 
ªm
;

412 
a
 = 
	`∆a_d©a
(
©å
), 
ªm
 = 
	`∆a_Àn
(attr);Ñem > 0;

413 
a
 = 
	`∆a_√xt
◊, &
ªm
)) {

414 
	`∆a_ty≥
(
a
)) {

415 
OVS_SAMPLE_ATTR_PROBABILITY
:

416 i‡(
	`√t_øndom
(Ë>
	`∆a_gë_u32
(
a
))

420 
OVS_SAMPLE_ATTR_ACTIONS
:

421 
a˘s_li°
 = 
a
;

426  
	`do_execuã_a˘i⁄s
(
dp
, 
skb
, 
	`∆a_d©a
(
a˘s_li°
),

427 
	`∆a_Àn
(
a˘s_li°
), 
tun_key
, 
åue
);

428 
	}
}

430 
	$execuã_£t_a˘i⁄
(
sk_buff
 *
skb
,

431 c⁄° 
∆©å
 *
√°ed_©å
,

432 
ovs_key_ùv4_tu¬ñ
 *
tun_key
)

434 
îr
 = 0;

436 
	`∆a_ty≥
(
√°ed_©å
)) {

437 
OVS_KEY_ATTR_PRIORITY
:

438 
skb
->
¥i‹ôy
 = 
	`∆a_gë_u32
(
√°ed_©å
);

441 
OVS_KEY_ATTR_SKB_MARK
:

442 
	`skb_£t_m¨k
(
skb
, 
	`∆a_gë_u32
(
√°ed_©å
));

445 
OVS_KEY_ATTR_TUN_ID
:

452 i‡(!
	`OVS_CB
(
skb
)->
tun_key
)

453 
	`mem£t
(
tun_key
, 0, (*tun_key));

454 i‡(
	`OVS_CB
(
skb
)->
tun_key
 !=Åun_key)

455 
	`mem˝y
(
tun_key
, 
	`OVS_CB
(
skb
)->tun_key, (*tun_key));

456 
	`OVS_CB
(
skb
)->
tun_key
 =Åun_key;

458 
	`OVS_CB
(
skb
)->
tun_key
->
tun_id
 = 
	`∆a_gë_be64
(
√°ed_©å
);

461 
OVS_KEY_ATTR_IPV4_TUNNEL
:

462 
	`OVS_CB
(
skb
)->
tun_key
 = 
	`∆a_d©a
(
√°ed_©å
);

465 
OVS_KEY_ATTR_ETHERNET
:

466 
îr
 = 
	`£t_ëh_addr
(
skb
, 
	`∆a_d©a
(
√°ed_©å
));

469 
OVS_KEY_ATTR_IPV4
:

470 
îr
 = 
	`£t_ùv4
(
skb
, 
	`∆a_d©a
(
√°ed_©å
));

473 
OVS_KEY_ATTR_IPV6
:

474 
îr
 = 
	`£t_ùv6
(
skb
, 
	`∆a_d©a
(
√°ed_©å
));

477 
OVS_KEY_ATTR_TCP
:

478 
îr
 = 
	`£t_t˝
(
skb
, 
	`∆a_d©a
(
√°ed_©å
));

481 
OVS_KEY_ATTR_UDP
:

482 
îr
 = 
	`£t_udp
(
skb
, 
	`∆a_d©a
(
√°ed_©å
));

486  
îr
;

487 
	}
}

489 
	$nc_¥öt_ve˘‹
(*
ss
, *
d©a
, 
Àn
, 
size
)

491 *
t1
 = 
d©a
;

492 
s
[64];

493 
i
;

494 
i
 = 0; i < 
Àn
; i++){

495 if(
size
 == 1) {

496 
	`•rötf
(
s
, "%8u", *(
uöt8_t
 *)
t1
);

497 
	`°rˇt
(
ss
, 
s
);

498 } if(
size
 == 2) {

499 
	`•rötf
(
s
, "%8u", 
	`¡ohs
(*(
uöt16_t
 *)
t1
));

500 
	`°rˇt
(
ss
, 
s
);

502 
t1
 +
size
;

504 if((
size
 != 1) && (size != 2)) {

505 
	`•rötf
(
s
, "wrong vector size");

506 
	`°rˇt
(
ss
, 
s
);

508 
	`°rˇt
(
ss
, "\n");

509 
	}
}

510 
	#NC_ALIGN
(
SIZE
Ë(((SIZEË+ 15)/16*16)

	)

511 
uöt32_t
 
	$skb_gë_gíî©i⁄_id
(
sk_buff
 *
pk
)

513 
nchdr
 *
nc
 = (nchd∏*)(((*)
	`ù_hdr
(
pk
)Ë+ 
	`ù_hdæí
(pk));

514 #ifde‡
NC_DEBUG_GATHER


515 
	`¥ötk
(
KERN_INFO
 "n¯%p, ud∞%p,Çc_ve˘‹ %p, ip_hdÀ¿%d\n", 
nc
, (*Í¯+Çc->
Àn
,Çc->
code_ve˘‹
, 
	`ù_hdæí
(
pk
));

517  
	`¡ohl
(
nc
->
gíî©i⁄_id
);

518 
	}
}

520 * 
	$skb_gë_udp
(
sk_buff
 *
pk
)

522 
nchdr
 *
nc
 = (nchd∏*)(((*)
	`ù_hdr
(
pk
)Ë+ 
	`ù_hdæí
(pk));

523  ((*)
nc
Ë+Çc->
Àn
;

524 
	}
}

526 * 
	$skb_gë_ve˘‹
(
sk_buff
 *
pk
)

528 
nchdr
 *
nc
 = (nchd∏*)(((*)
	`ù_hdr
(
pk
)Ë+ 
	`ù_hdæí
(pk));

529  
nc
->
code_ve˘‹
;

530 
	}
}

532 
ölöe
 
	$add_round
(
a
, 
l
)

534 if(
a
 < 
l
 - 1)

535  
a
 + 1;

538 
	}
}

540 
ölöe
 
	$buff_Àn
(
h
, 
t
, 
l
)

542 if(
h
 >
t
)

543  
h
 - 
t
;

545  
l
 + 
h
 - 
t
;

546 
	}
}

553 
	$nc_g©hî
(
__liu_buf„r
 *
buff
, 
sk_buff
 *
pk
, 
uöt16_t
 
p‹t_id
, uöt16_à
buf„r_size
, 
uöt8_t
 
∑ckë_num
)

555 
Êag
;

556 
g_id
 = 
	`skb_gë_gíî©i⁄_id
(
pk
);

557 
hód
 = 
buff
->hód[
p‹t_id
];

558 if(
p‹t_id
 >
buff
->
ö_p‹t_num
)

560 
	`¥ötk
(
KERN_DEBUG
 "false id!\n");

564 
Êag
 = ((
uöt32_t
)(
g_id
 + (1<<16)Ë< (uöt32_t)(
buff
->
gíî©i⁄_id
[
hód
] + (1<<16)));

565 if(
buff
->
gíî©i⁄_id
[
hód
] == 0)

567 
buff
->
gíî©i⁄_id
[
hód
] = 
g_id
;

568 } i‡((
g_id
 < 
buff
->
gíî©i⁄_id
[
hód
]) \

569 && 
Êag
)

572 } i‡(
g_id
 =
buff
->
gíî©i⁄_id
[
hód
])

575 } i‡(–
g_id
 > 
buff
->
gíî©i⁄_id
[
hód
]) \

576 || 
Êag
)

578 (
g_id
 !
buff
->
gíî©i⁄_id
[
hód
]) && (buff->generation_id[head] == 0))

580 
hód
 = 
	`add_round
(hód, 
buf„r_size
);

582 i‡(
buff
->
gíî©i⁄_id
[
hód
] == 0){

583 
buff
->
gíî©i⁄_id
[
hód
] = 
g_id
;

585 
buff
->
hód
[
p‹t_id
] = head;

587 
	`¥ötk
(
KERN_ALERT
 "someÅhing bad happened inÇc_gather!\n");

590 
buff
->
buf„r
[
p‹t_id
][
hód
] = 
pk
;

591 
buff
->
Êag
[
hód
]++ ;

592 
buff
->
hód
[
p‹t_id
] = 
	`add_round
(buff->hód[p‹t_id], 
buf„r_size
);

593 
buff
->
d©a
[
p‹t_id
][
hód
] = 
	`skb_gë_udp
(
pk
);

594 
buff
->
mM©rix
[
p‹t_id
][
hód
] = 
	`skb_gë_ve˘‹
(
pk
);

596 if(
buff
->
hód
[
p‹t_id
] =buff->
èû
)

598 if(
buff
->
Êag
[
hód
] =
∑ckë_num
)

602 if(
buff
->
Êag
[
hód
] =
∑ckë_num
)

605 
	}
}

606 
	#DEBUG_INIT_CODING


	)

610 
	$nc_öô_codög
(
d©≠©h
 *
dp
, 
sk_buff
 *
pk
,

611 
ovs_a˘i⁄_öô_codög
 *
nc
, 
boﬁ
 *
kìp_skb
)

614 
liu_buf„r
 * 
buf„r
 = &
dp
->buffer;

615 
uöt8_t
 
buf„r_id
 = (
nc
->buffer_id) & 0x7f;

616 
__liu_buf„r
 * 
buff
 = &
buf„r
->buff[
buf„r_id
];

617 
uöt8_t
 
id
 = 
nc
->
ve˘‹_off
;

618 
hód
 = 
buff
->hód[
id
];

619 
uöt16_t
 
hód_add_Àn
;

620 
ùhdr
 * 
ù
;

621 
uöt8_t
 
nc_°¨t
;

622 
nchdr
 * 
nch
;

623 
i
;

624 
uöt16_t
 * 
ouç‹t_id
;

625 
FIELD
 * 
ve˘‹
;

626 *
kìp_skb
 = 
åue
;

628 if(
buff
->
gíî©i⁄_id
[
id
] == 0)

629 
buff
->
gíî©i⁄_id
[
id
] = 1;

630 #ifde‡
DEBUG_INIT_CODING


631 
	`¥ötk
(
KERN_INFO
 "öô_codög:%d,%d,%d,%d,%d\n", 
nc
->
ve˘‹_off
,Çc->
buf„r_id
,Çc->
∑ckë_num
,Çc->
p‹t_num
,Çc->
∑ckë_Àn
);

632 
	`¥ötk
(
KERN_INFO
 " hód %d, gíî©i⁄_id %d\n", 
buff
->
hód
[
id
], buff->
gíî©i⁄_id
[id]);

635 
hód_add_Àn
 = 
	`NC_ALIGN
(8 + (
FIELD
)*
nc
->
∑ckë_num
);

636 
ù
 = 
	`ù_hdr
(
pk
);

637 #ifde‡
DEBUG_INIT_CODING


641 
ù
->
tŸ_Àn
 = 
	`ht⁄s
(
	`¡ohs
(ù->tŸ_ÀnË+ 
hód_add_Àn
);

642 i‡(
	`skb_cow_hód
(
pk
, 
hód_add_Àn
) < 0) {

643 
	`¥ötk
(
KERN_WARNING
 "reserveÖacket false!\n");

648 
nc_°¨t
 = (
ëhhdr
Ë+ 
ù
->
ihl
 * 4;

649 
	`skb_push
(
pk
, 
hód_add_Àn
);

650 
	`memmove
(
pk
->
d©a
,Ök->d©®+ 
hód_add_Àn
, 
nc_°¨t
);

651 
pk
->
mac_hódî
 -
hód_add_Àn
;

652 
pk
->
√tw‹k_hódî
 -
hód_add_Àn
;

653 #ifde‡
DEBUG_INIT_CODING


657 
nch
 = (
nchdr
 *)((*)
pk
->
d©a
 + 
nc_°¨t
);

658 
nch
->
Àn
 = 
hód_add_Àn
;

661 
buff
->
buf„r
[
id
][
hód
] = 
pk
;

662 #ifde‡
DEBUG_INIT_CODING


666 
buff
->
hód
[
id
] = 
	`add_round
(buff->hód[id], buff->
max_buf„r
);

668 if(
	`buff_Àn
(
buff
->
hód
[
id
], buff->
èû
, buff->
max_buf„r
Ë>
nc
->
∑ckë_num
)

673 #ifde‡
DEBUG_INIT_CODING


676 
ouç‹t_id
 = (
uöt16_t
 *)
nc
->
d©Øsdf
;

677 
i
 = 0; i < 
nc
->
p‹t_num
; i++)

679 
ù
 = 
	`ù_hdr
(
buff
->
buf„r
[
id
][buff->
èû
]);

680 
ù
->
¥Ÿocﬁ
 = 
PROTOCOL_SHIFT
 + (
nc
->
buf„r_id
 >> 7);

681 
ù
->
check
 = 0;

682 
ù
->
check
 = 
	`ù_Á°_csum
(ù, ip->
ihl
);

683 
nch
 = (
nchdr
 *)(((*)((
sk_buff
 *)
buff
->
buf„r
[
id
][buff->
èû
])->
d©a
Ë+ 
nc_°¨t
);

684 
nch
->
code_Àn
 = (
FIELD
);

685 
nch
->
∑ckë_num
 = 
	`ht⁄s
(
nc
->packet_num);

688 
ve˘‹
 = (
FIELD
 *)
nch
->
code_ve˘‹
;

689 
	`mem£t
(
ve˘‹
, 0, (
FIELD
)*
nc
->
∑ckë_num
);

690 
ve˘‹
[
i
] = 1;

691 
nch
->
gíî©i⁄_id
 = 
	`ht⁄l
(
buff
->gíî©i⁄_id[
id
]);

692 
	`do_ouçut
(
dp
, (
sk_buff
*)
buff
->
buf„r
[
id
][buff->
èû
], 
	`¡ohs
(
ouç‹t_id
[
i
]));

693 #ifde‡
DEBUG_INIT_CODING


694 
	`¥ötk
(
KERN_INFO
 " inô sídÅÿ%d ,po†%p\n", 
	`¡ohs
(
ouç‹t_id
[
i
]), 
buff
->
buf„r
[
id
][buff->
èû
]);

696 
buff
->
buf„r
[
id
][buff->
èû
] = 
NULL
;

697 
buff
->
èû
 = 
	`add_round
(buff->èû, buff->
max_buf„r
);

699 
buff
->
gíî©i⁄_id
[
id
]++;

702 
	}
}

703 
	#DEBUG_ERROR_RECOVER


	)

704 
	#DEBUG_ENCODE


	)

705 
	$nc_ícode
(
d©≠©h
 *
dp
, 
sk_buff
 *
pk
,

706 
ovs_a˘i⁄_ícode
 *
nc
, 
boﬁ
 *
kìp_skb
)

709 
i
, 
j
;

710 
__liu_buf„r
 *
buf„r
 = &
dp
->buf„r.
buff
[
nc
->
buf„r_id
];

711 
èû
 ;

713 #ifde‡
DEBUG_ENCODE


714 
	`¥ötk
(
KERN_INFO
 "ícodêÜí %d,ÖackëÇum %d,Ö‹t_num %d,Çc->d©Øsd‡%d,%d\n", 
nc
->
∑ckë_Àn
,Çc->
∑ckë_num
,Çc->
p‹t_num
,Çc->
d©Øsdf
[0],Çc->dataasdf[1]);

716 *
kìp_skb
 = 
åue
;

718 
j
 = 
	`nc_g©hî
(
buf„r
, 
pk
, 
nc
->
p‹t_id
,Çc->
buf„r_size
,Çc->
∑ckë_num
);

720 if(
j
 == 12)

722 
èû
 = 
buf„r
->
hód
[
nc
->
p‹t_id
];

723 
	`buff_Àn
(
èû
, 
buf„r
->èû, 
nc
->
buf„r_size
) > 1) {

727 #ifde‡
DEBUG_ERROR_RECOVER


728 
	`¥ötk
(
KERN_INFO
 " someÖacket getÜostátÉncode!\n");

730  
i
 = 0; i < 
buf„r
->
ö_p‹t_num
; i++)

732 if(
buf„r
->buf„r[
i
][buf„r->
èû
] !
NULL
)

734 
	`do_ouçut
(
dp
, 
buf„r
->buf„r[
i
][buf„r->
èû
], 
nc
->
ouçut_p‹t
);

735 
buf„r
->buf„r[
i
][buf„r->
èû
] = 
NULL
;

737 
buf„r
->
gíî©i⁄_id
[buf„r->
èû
] = 0;

738 
buf„r
->
èû
 = 
	`add_round
(buf„r->èû, 
nc
->
buf„r_size
);

740 
èû
 = 
buf„r
->tail;

741 
	`ícode
(
buf„r
->
d©a
[0][
èû
], buf„r->d©a[1][èû], 
nc
->
∑ckë_Àn
,

742 
buf„r
->
mM©rix
[0][
èû
], buf„r->mM©rix[1][èû], 
nc
->
∑ckë_num
,

743 
nc
->
d©Øsdf
[0],Çc->dataasdf[1]);

744 
i
 = 2; i < 
nc
->
p‹t_num
; i++)

746 
	`cMulvAdd
(
buf„r
->
d©a
[0][
èû
], buf„r->d©a[
i
][èû], 
nc
->
∑ckë_Àn
,Çc->
d©Øsdf
[i]);

747 
	`cMulvAdd
(
buf„r
->
mM©rix
[0][
èû
], buf„r->mM©rix[
i
][èû], 
nc
->
∑ckë_num
,Çc->
d©Øsdf
[i]);

750 #ifde‡
DEBUG_ENCODE


751 
	`¥ötk
(
KERN_INFO
 " sídÖackë out!èû %d\n", 
èû
);

755 
	`do_ouçut
(
dp
, 
buf„r
->buf„r[0][
èû
], 
nc
->
ouçut_p‹t
);

756 
buf„r
->buf„r[0][
èû
] = 
NULL
;

757 
i
 = 1; i < 
nc
->
p‹t_num
; i++) {

758 
	`k‰ì_skb
(
buf„r
->buf„r[
i
][
èû
]);

759 
buf„r
->buf„r[
i
][
èû
] = 
NULL
;

761 
buf„r
->
gíî©i⁄_id
[
èû
] = 0;

762 
	`èû_add
(
buf„r
, 
nc
->
buf„r_size
);

764 } if(
j
 == 10) {

765 
	`do_ouçut
(
dp
, 
pk
, 
nc
->
ouçut_p‹t
);

767 #ifde‡
DEBUG_ERROR_RECOVER


768 
	`¥ötk
(
KERN_INFO
 "this generation hasálready be send!\n");

770 } if(
j
 == 11) {

772  
i
 = 0; i < 
buf„r
->
ö_p‹t_num
; i++)

774 if(
buf„r
->buf„r[
i
][buf„r->
èû
])

776 
	`do_ouçut
(
dp
, 
buf„r
->buf„r[
i
][buf„r->
èû
], 
nc
->
ouçut_p‹t
);

777 
buf„r
->buf„r[
i
][buf„r->
èû
] = 
NULL
;

779 
buf„r
->
gíî©i⁄_id
[buf„r->
èû
] = 0;

780 
buf„r
->
èû
 = 
	`add_round
(buf„r->èû, 
nc
->
buf„r_size
);

781 #ifde‡
DEBUG_ERROR_RECOVER


782 
	`¥ötk
(
KERN_INFO
 "buf„∏toÿmuchÖackë %d!\n", 
buf„r
->
èû
);

786 
	}
}

787 
	#DEBUG_DECODE


	)

788 
	$nc_decode
(
d©≠©h
 *
dp
, 
sk_buff
 *
pk
,

789 
ovs_a˘i⁄_decode
 *
nc
, 
boﬁ
 *
kìp_skb
)

792 
i
,
j
;

793 
uöt16_t
 * 
p‹t
;

794 
__liu_buf„r
 *
buff
 = &
dp
->
buf„r
.buff[
nc
->
buf„r_id
];

795 
èû
;

796 
Êag
 ;

797 
hód
 = 
buff
->hód[
nc
->
p‹t_id
];

798 
uöt8_t
 
hód_add_Àn
;

799 
g_id
 = 
	`skb_gë_gíî©i⁄_id
(
pk
);

800 
ùhdr
 * 
ù
;

801 
sk_buff
 * 
skb
;

802 #ifde‡
DEBUG_DECODE


803 
	`¥ötk
(
KERN_INFO
 "decode: buf„r_id %d,Ö‹t_id %d,Öackë_num %d, ouçut_p‹à%d,Öackë_À¿%d, fœg %d\n", 
nc
->
buf„r_id
,Çc->
p‹t_id
,Çc->
∑ckë_num
,Çc->
ouçut_num
,Çc->
∑ckë_Àn
, 
buff
->
Êag
[
hód
]);

806 
hód_add_Àn
 = 
	`NC_ALIGN
(8 + (
FIELD
)*
nc
->
∑ckë_num
);

808 
Êag
 = ((
uöt32_t
)(
g_id
 + (1<<16)Ë< (uöt32_t)(
buff
->
gíî©i⁄_id
[
hód
] + (1<<16)));

809 if(
buff
->
gíî©i⁄_id
[
hód
] == 0)

811 
buff
->
gíî©i⁄_id
[
hód
] = 
g_id
;

812 } i‡((
g_id
 < 
buff
->
gíî©i⁄_id
[
hód
]) \

813 && 
Êag
)

815 #ifde‡
DEBUG_ERROR_RECOVER


816 
	`¥ötk
(
KERN_INFO
 "this generation hasálready sent out!\n");

819 } i‡(
g_id
 =
buff
->
gíî©i⁄_id
[
hód
])

822 } i‡(–
g_id
 > 
buff
->
gíî©i⁄_id
[
hód
]) \

823 || 
Êag
)

825 #ifde‡
DEBUG_ERROR_RECOVER


826 
	`¥ötk
(
KERN_INFO
 " someÖacket hasÜost onÅhe way!g_id %d, head %d, head g_id %d\n",

827 
g_id
, 
hód
, 
buff
->
gíî©i⁄_id
[head]);

829 (
g_id
 !
buff
->
gíî©i⁄_id
[
hód
]) && (buff->generation_id[head] == 0))

831 
hód
 = 
	`add_round
(hód, 
nc
->
buf„r_size
);

833 i‡(
buff
->
gíî©i⁄_id
[
hód
] == 0){

834 
buff
->
gíî©i⁄_id
[
hód
] = 
g_id
;

836 
buff
->
hód
[
nc
->
p‹t_id
] = head;

838 
	`¥ötk
(
KERN_ALERT
 "someÅhing bad happened inÇc_gather!\n");

842 
Êag
 = 
	`≠≥ndM
(
buff
, 
	`skb_gë_ve˘‹
(
pk
), 
nc
->
∑ckë_num
, 
hód
);

843 #ifde‡ 
DEBUG_DECODE


844 
	`¥ötk
(
KERN_INFO
 "Êag %d, hód %d, buff->Êag[hód] %d, g_id %d\n",
Êag
, 
hód
, 
buff
->Êag[hód], 
g_id
);

848 if(
Êag
 >= 0){

849 *
kìp_skb
 = 
åue
;

850 
buff
->
buf„r
[
Êag
][
hód
] = 
pk
;

851 
buff
->
hód
[
nc
->
p‹t_id
] = 
	`add_round
(buff->hód[nc->p‹t_id],Çc->
buf„r_size
);

852 
buff
->
d©a
[
Êag
][
hód
] = 
	`skb_gë_udp
(
pk
);

853 if(
buff
->
Êag
[
hód
] =
nc
->
∑ckë_num
){

855 
èû
 = 
hód
;

856 #ifde‡
DEBUG_ERROR_RECOVER


857 if(
	`buff_Àn
(
èû
, 
buff
->èû, 
nc
->
buf„r_size
) > 1){

858 
	`¥ötk
(
KERN_INFO
 "packets inÅhe buffer is olderÅhan current g_id!\n");

861 
	`buff_Àn
(
èû
, 
buff
->èû, 
nc
->
buf„r_size
) > 1) {

864 
i
 = 0; i < 
buff
->
ö_p‹t_num
; i++)

866 if(
buff
->
buf„r
[
i
][buff->
èû
])

867 
	`k‰ì_skb
(
buff
->
buf„r
[
i
][buff->
èû
]);

868 
buff
->
buf„r
[
i
][buff->
èû
] = 
NULL
;

869 
buff
->
mM©rix
[
i
][buff->
èû
] = 
NULL
;

870 
buff
->
Êag
[buff->
èû
] = 0;

872 
buff
->
gíî©i⁄_id
[buff->
èû
] = 0;

873 
buff
->
èû
 = 
	`add_round
(buff->èû, 
nc
->
buf„r_size
);

875 
èû
 = 
buff
->tail;

877 
	`decode
(
buff
, 
nc
->
∑ckë_num
,Çc->
∑ckë_Àn
, 
èû
);

879 
i
 = 0; i < 
nc
->
∑ckë_num
; i++)

881 
skb
 = (
sk_buff
 *)(
buff
->
buf„r
[
i
][
èû
]);

882 
ù
 = 
	`ù_hdr
(
skb
);

883 
ù
->
tŸ_Àn
 = 
	`ht⁄s
(
	`¡ohs
(ù->tŸ_ÀnË- 
hód_add_Àn
);

884 
ù
->
¥Ÿocﬁ
 = 17;

885 #ifde‡ 
DEBUG_DECODE


888 
ù
->
check
 = 0;

889 
ù
->
check
 = 
	`ù_Á°_csum
((*)ù, ip->
ihl
);

890 
	`mem˝y
(((*)
ù
)+ù->
ihl
 * 4, 
buff
->
out
[
i
], 
nc
->
∑ckë_Àn
);

892 
skb
->
Àn
 -
hód_add_Àn
;

893 
skb
->
èû
 -
hód_add_Àn
;

896 
i
 = 0; i < 
nc
->
∑ckë_num
; i++) {

897 
p‹t
 = 
nc
->
d©Øsdf
;

898 
j
=0; j < 
nc
->
ouçut_num
 - 1; j++){

899 
skb
 = 
	`skb_c›y
((
sk_buff
 *)
buff
->
buf„r
[
i
][
èû
], 
GFP_ATOMIC
);

900 
	`do_ouçut
(
dp
, 
skb
, 
	`¡ohs
(
p‹t
[
j
]));

902 
	`do_ouçut
(
dp
, (
sk_buff
 *)
buff
->
buf„r
[
i
][
èû
], 
	`¡ohs
(
p‹t
[
nc
->
ouçut_num
 - 1]));

903 #ifde‡ 
DEBUG_DECODE


904 
	`¥ötk
(
KERN_INFO
 " decodeánd output!\n");

906 
buff
->
buf„r
[
i
][
èû
] = 
NULL
;

907 
buff
->
mM©rix
[
èû
][
i
] = 
NULL
;

908 
buff
->
Êag
[
èû
] = 0;

910 
	`èû_add
(
buff
, 
nc
->
buf„r_size
);

913 } if(
Êag
 == -2)

915 #ifde‡
DEBUG_ERROR_RECOVER


916 
	`¥ötk
(
KERN_INFO
 "decode insert failed,ÅhisÖacket doÇot haveány information!\n");

921 
	}
}

922 
	#OUTPUT_COPY


	)

926 
	$do_execuã_a˘i⁄s
(
d©≠©h
 *
dp
, 
sk_buff
 *
skb
,

927 c⁄° 
∆©å
 *
©å
, 
Àn
,

928 
ovs_key_ùv4_tu¬ñ
 *
tun_key
, 
boﬁ
 
kìp_skb
)

934 
¥ev_p‹t
 = -1;

935 c⁄° 
∆©å
 *
a
;

936 
ªm
;

938 
a
 = 
©å
, 
ªm
 = 
Àn
;Ñem > 0;

939 
a
 = 
	`∆a_√xt
◊, &
ªm
)) {

940 
îr
 = 0;

942 i‡(
¥ev_p‹t
 != -1) {

944 #ifde‡
OUTPUT_COPY


945 
	`do_ouçut
(
dp
, 
	`skb_c›y
(
skb
, 
GFP_ATOMIC
), 
¥ev_p‹t
);

947 
	`do_ouçut
(
dp
, 
	`skb_˛⁄e
(
skb
, 
GFP_ATOMIC
), 
¥ev_p‹t
);

951 
	`do_ouçut
(
dp
, 
	`skb_˛⁄e
(
skb
, 
GFP_ATOMIC
), 
¥ev_p‹t
);

953 
¥ev_p‹t
 = -1;

956 
	`∆a_ty≥
(
a
)) {

957 
OVS_ACTION_ATTR_OUTPUT
:

958 
¥ev_p‹t
 = 
	`∆a_gë_u32
(
a
);

961 
OVS_ACTION_ATTR_USERSPACE
:

962 
	`ouçut_u£r•a˚
(
dp
, 
skb
, 
a
);

965 
OVS_ACTION_ATTR_PUSH_VLAN
:

966 
îr
 = 
	`push_vœn
(
skb
, 
	`∆a_d©a
(
a
));

967 i‡(
	`u∆ikñy
(
îr
))

968  
îr
;

971 
OVS_ACTION_ATTR_POP_VLAN
:

972 
îr
 = 
	`p›_vœn
(
skb
);

975 
OVS_ACTION_ATTR_SET
:

976 
îr
 = 
	`execuã_£t_a˘i⁄
(
skb
, 
	`∆a_d©a
(
a
), 
tun_key
);

979 
OVS_ACTION_ATTR_SAMPLE
:

980 
îr
 = 
	`ßm∂e
(
dp
, 
skb
, 
a
, 
tun_key
);

983 
OVS_ACTION_ATTR_INIT_CODING
:

984 
îr
 = 
	`nc_öô_codög
(
dp
, 
skb
, 
	`∆a_d©a
(
a
), &
kìp_skb
);

986 
OVS_ACTION_ATTR_ENCODE
:

987 
îr
 = 
	`nc_ícode
(
dp
, 
skb
, 
	`∆a_d©a
(
a
), &
kìp_skb
);

989 
OVS_ACTION_ATTR_DECODE
:

990 
îr
 = 
	`nc_decode
(
dp
, 
skb
, 
	`∆a_d©a
(
a
), &
kìp_skb
);

995 i‡(
	`u∆ikñy
(
îr
)) {

996 
	`k‰ì_skb
(
skb
);

997  
îr
;

1001 i‡(
¥ev_p‹t
 != -1) {

1002 i‡(
kìp_skb
)

1004 #ifde‡
OUTPUT_COPY


1005 
skb
 = 
	`skb_c›y
(skb, 
GFP_ATOMIC
);

1007 
skb
 = 
	`skb_˛⁄e
(skb, 
GFP_ATOMIC
);

1011 
skb
 = 
	`skb_˛⁄e
(skb, 
GFP_ATOMIC
);

1014 
	`do_ouçut
(
dp
, 
skb
, 
¥ev_p‹t
);

1015 } i‡(!
kìp_skb
)

1016 
	`c⁄sume_skb
(
skb
);

1019 
	}
}

1023 
	#MAX_LOOPS
 5

	)

1025 
	slo›_cou¡î
 {

1026 
u8
 
	mcou¡
;

1027 
boﬁ
 
	mlo›ög
;

1030 
DEFINE_PER_CPU
(
lo›_cou¡î
, 
lo›_cou¡îs
);

1032 
	$lo›_suµªss
(
d©≠©h
 *
dp
, 
sw_Êow_a˘i⁄s
 *
a˘i⁄s
)

1034 i‡(
	`√t_øãlimô
())

1035 
	`¥_w¨n
("%s: flowÜooped %dÅimes, dropping\n",

1036 
	`ovs_dp_«me
(
dp
), 
MAX_LOOPS
);

1037 
a˘i⁄s
->
a˘i⁄s_Àn
 = 0;

1038  -
ELOOP
;

1039 
	}
}

1042 
	$ovs_execuã_a˘i⁄s
(
d©≠©h
 *
dp
, 
sk_buff
 *
skb
)

1044 
sw_Êow_a˘i⁄s
 *
a˘s
 = 
	`rcu_dîe„ªn˚
(
	`OVS_CB
(
skb
)->
Êow
->
sf_a˘s
);

1045 
lo›_cou¡î
 *
lo›
;

1046 
îr‹
;

1047 
ovs_key_ùv4_tu¬ñ
 
tun_key
;

1050 
lo›
 = &
	`__gë_˝u_v¨
(
lo›_cou¡îs
);

1051 i‡(
	`u∆ikñy
(++
lo›
->
cou¡
 > 
MAX_LOOPS
))

1052 
lo›
->
lo›ög
 = 
åue
;

1053 i‡(
	`u∆ikñy
(
lo›
->
lo›ög
)) {

1054 
îr‹
 = 
	`lo›_suµªss
(
dp
, 
a˘s
);

1055 
	`k‰ì_skb
(
skb
);

1056 
out_lo›
;

1059 
	`OVS_CB
(
skb
)->
tun_key
 = 
NULL
;

1060 
îr‹
 = 
	`do_execuã_a˘i⁄s
(
dp
, 
skb
, 
a˘s
->
a˘i⁄s
,

1061 
a˘s
->
a˘i⁄s_Àn
, &
tun_key
, 
Ál£
);

1064 i‡(
	`u∆ikñy
(
lo›
->
lo›ög
))

1065 
îr‹
 = 
	`lo›_suµªss
(
dp
, 
a˘s
);

1067 
out_lo›
:

1069 i‡(!--
lo›
->
cou¡
)

1070 
lo›
->
lo›ög
 = 
Ál£
;

1072  
îr‹
;

1073 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/brcompat_main.c

19 
	#¥_fmt
(
fmt
Ë
KBUILD_MODNAME
 ": " 
	)
fmt

21 
	~<löux/moduÀ.h
>

22 
	~<löux/kî√l.h
>

23 
	~<löux/uac˚ss.h
>

24 
	~<löux/com∂ëi⁄.h
>

25 
	~<löux/ëhîdevi˚.h
>

26 
	~<löux/if_bridge.h
>

27 
	~<löux/√tdevi˚.h
>

28 
	~<löux/π√éök.h
>

29 
	~<√t/gíëlök.h
>

31 
	~"›ívswôch/brcom∑t-√éök.h
"

32 
	~"d©≠©h.h
"

34 
gíl_Ámûy
 
	gbrc_gíl_Ámûy
;

35 
gíl_mu…iˇ°_group
 
	gbrc_mc_group
;

39 
	#BRC_TIMEOUT
 (
HZ
 * 5)

	)

45 
DEFINE_MUTEX
(
brc_£rül
);

48 
DEFINE_SPINLOCK
(
brc_lock
);

49 
DECLARE_COMPLETION
(
brc_d⁄e
);

50 
sk_buff
 *
	gbrc_ª∂y
;

51 
u32
 
	gbrc_£q
;

53 
sk_buff
 *
brc_£nd_comm™d
(
√t
 *,

54 
sk_buff
 *,

55 
∆©å
 **
©ås
);

56 
brc_£nd_sim∂e_comm™d
(
√t
 *, 
sk_buff
 *);

58 
sk_buff
 *
	$brc_make_ªque°
(
›
, c⁄° *
bridge
,

59 c⁄° *
p‹t
)

61 
sk_buff
 *
skb
 = 
	`gílmsg_√w
(
NLMSG_GOODSIZE
, 
GFP_KERNEL
);

62 i‡(!
skb
)

63 
îr‹
;

65 
	`gílmsg_put
(
skb
, 0, 0, &
brc_gíl_Ámûy
, 0, 
›
);

67 i‡(
bridge
 && 
	`∆a_put_°rög
(
skb
, 
BRC_GENL_A_DP_NAME
, bridge))

68 
∆a_put_Áûuª
;

69 i‡(
p‹t
 && 
	`∆a_put_°rög
(
skb
, 
BRC_GENL_A_PORT_NAME
,Öort))

70 
∆a_put_Áûuª
;

72  
skb
;

74 
∆a_put_Áûuª
:

75 
	`k‰ì_skb
(
skb
);

76 
îr‹
:

77  
NULL
;

78 
	}
}

80 
	$brc_£nd_sim∂e_comm™d
(
√t
 *√t, 
sk_buff
 *
ªque°
)

82 
∆©å
 *
©ås
[
BRC_GENL_A_MAX
 + 1];

83 
sk_buff
 *
ª∂y
;

84 
îr‹
;

86 
ª∂y
 = 
	`brc_£nd_comm™d
(
√t
, 
ªque°
, 
©ås
);

87 i‡(
	`IS_ERR
(
ª∂y
))

88  
	`PTR_ERR
(
ª∂y
);

90 
îr‹
 = 
	`∆a_gë_u32
(
©ås
[
BRC_GENL_A_ERR_CODE
]);

91 
	`k‰ì_skb
(
ª∂y
);

92  -
îr‹
;

93 
	}
}

95 
	$brc_add_dñ_bridge
(
√t
 *√t, 
__u£r
 *
u«me
, 
add
)

97 
sk_buff
 *
ªque°
;

98 
«me
[
IFNAMSIZ
];

100 i‡(!
	`ˇ∑bÀ
(
CAP_NET_ADMIN
))

101  -
EPERM
;

103 i‡(
	`c›y_‰om_u£r
(
«me
, 
u«me
, 
IFNAMSIZ
))

104  -
EFAULT
;

106 
«me
[
IFNAMSIZ
 - 1] = 0;

107 
ªque°
 = 
	`brc_make_ªque°
(
add
 ? 
BRC_GENL_C_DP_ADD
 : 
BRC_GENL_C_DP_DEL
,

108 
«me
, 
NULL
);

109 i‡(!
ªque°
)

110  -
ENOMEM
;

112  
	`brc_£nd_sim∂e_comm™d
(
√t
, 
ªque°
);

113 
	}
}

115 
	$brc_gë_ödi˚s
(
√t
 *net,

116 
›
, c⁄° *
br_«me
,

117 
__u£r
 *
uödi˚s
, 
n
)

119 
∆©å
 *
©ås
[
BRC_GENL_A_MAX
 + 1];

120 
sk_buff
 *
ªque°
, *
ª∂y
;

121 *
ödi˚s
;

122 
ªt
;

123 
Àn
;

125 i‡(
n
 < 0)

126  -
EINVAL
;

127 i‡(
n
 >= 2048)

128  -
ENOMEM
;

130 
ªque°
 = 
	`brc_make_ªque°
(
›
, 
br_«me
, 
NULL
);

131 i‡(!
ªque°
)

132  -
ENOMEM
;

134 
ª∂y
 = 
	`brc_£nd_comm™d
(
√t
, 
ªque°
, 
©ås
);

135 
ªt
 = 
	`PTR_ERR
(
ª∂y
);

136 i‡(
	`IS_ERR
(
ª∂y
))

137 
exô
;

139 
ªt
 = -
	`∆a_gë_u32
(
©ås
[
BRC_GENL_A_ERR_CODE
]);

140 i‡(
ªt
 < 0)

141 
exô_‰ì_skb
;

143 
ªt
 = -
EINVAL
;

144 i‡(!
©ås
[
BRC_GENL_A_IFINDEXES
])

145 
exô_‰ì_skb
;

147 
Àn
 = 
	`∆a_Àn
(
©ås
[
BRC_GENL_A_IFINDEXES
]);

148 
ödi˚s
 = 
	`∆a_d©a
(
©ås
[
BRC_GENL_A_IFINDEXES
]);

149 i‡(
Àn
 % ())

150 
exô_‰ì_skb
;

152 
n
 = 
	`mö_t
(,Ç, 
Àn
 / ());

153 
ªt
 = 
	`c›y_to_u£r
(
uödi˚s
, 
ödi˚s
, 
n
 * ()Ë? -
EFAULT
 :Ç;

155 
exô_‰ì_skb
:

156 
	`k‰ì_skb
(
ª∂y
);

157 
exô
:

158  
ªt
;

159 
	}
}

162 
	$brc_gë_bridges
(
√t
 *√t, 
__u£r
 *
uödi˚s
, 
n
)

164  
	`brc_gë_ödi˚s
(
√t
, 
BRC_GENL_C_GET_BRIDGES
, 
NULL
, 
uödi˚s
, 
n
);

165 
	}
}

168 
	$ﬁd_devi˚Àss
(
√t
 *√t, 
__u£r
 *
u¨g
)

170 
¨gs
[3];

172 i‡(
	`c›y_‰om_u£r
(
¨gs
, 
u¨g
, (args)))

173  -
EFAULT
;

175 
¨gs
[0]) {

176 
BRCTL_GET_BRIDGES
:

177  
	`brc_gë_bridges
(
√t
, (
__u£r
 *)
¨gs
[1],árgs[2]);

179 
BRCTL_ADD_BRIDGE
:

180  
	`brc_add_dñ_bridge
(
√t
, (
__u£r
 *)
¨gs
[1], 1);

181 
BRCTL_DEL_BRIDGE
:

182  
	`brc_add_dñ_bridge
(
√t
, (
__u£r
 *)
¨gs
[1], 0);

185  -
EOPNOTSUPP
;

186 
	}
}

190 #i‡
LINUX_VERSION_CODE
 <
KERNEL_VERSION
(2,6,23)

191 
	$brc_io˘l_devi˚Àss_°ub
(
cmd
, 
__u£r
 *
u¨g
)

193 
√t
 *√à
NULL
;

195 
	$brc_io˘l_devi˚Àss_°ub
(
√t
 *√t, 
cmd
, 
__u£r
 *
u¨g
)

198 
cmd
) {

199 
SIOCGIFBR
:

200 
SIOCSIFBR
:

201  
	`ﬁd_devi˚Àss
(
√t
, 
u¨g
);

203 
SIOCBRADDBR
:

204  
	`brc_add_dñ_bridge
(
√t
, 
u¨g
, 1);

205 
SIOCBRDELBR
:

206  
	`brc_add_dñ_bridge
(
√t
, 
u¨g
, 0);

209  -
EOPNOTSUPP
;

210 
	}
}

212 
	$brc_add_dñ_p‹t
(
√t_devi˚
 *
dev
, 
p‹t_ifödex
, 
add
)

214 
sk_buff
 *
ªque°
;

215 
√t_devi˚
 *
p‹t
;

216 
îr
;

218 i‡(!
	`ˇ∑bÀ
(
CAP_NET_ADMIN
))

219  -
EPERM
;

221 
p‹t
 = 
	`__dev_gë_by_ödex
(
	`dev_√t
(
dev
), 
p‹t_ifödex
);

222 i‡(!
p‹t
)

223  -
EINVAL
;

227 
ªque°
 = 
	`brc_make_ªque°
(
add
 ? 
BRC_GENL_C_PORT_ADD
 : 
BRC_GENL_C_PORT_DEL
,

228 
dev
->
«me
, 
p‹t
->name);

229 i‡(!
ªque°
)

230  -
ENOMEM
;

232 
	`π∆_u∆ock
();

233 
îr
 = 
	`brc_£nd_sim∂e_comm™d
(
	`dev_√t
(
dev
), 
ªque°
);

234 
	`π∆_lock
();

236  
îr
;

237 
	}
}

239 
	$brc_gë_bridge_öfo
(
√t_devi˚
 *
dev
,

240 
__bridge_öfo
 
__u£r
 *
ub
)

242 
__bridge_öfo
 
b
;

244 
	`mem£t
(&
b
, 0, (
__bridge_öfo
));

249 
	`mem˝y
((
u8
 *)&
b
.
bridge_id
 + 2, 
dev
->
dev_addr
, 
ETH_ALEN
);

250 
b
.
°p_íabÀd
 = 0;

252 i‡(
	`c›y_to_u£r
(
ub
, &
b
, (
__bridge_öfo
)))

253  -
EFAULT
;

256 
	}
}

258 
	$brc_gë_p‹t_li°
(
√t_devi˚
 *
dev
, 
__u£r
 *
uödi˚s
,

259 
num
)

261 
ªtvÆ
;

263 
	`π∆_u∆ock
();

264 
ªtvÆ
 = 
	`brc_gë_ödi˚s
(
	`dev_√t
(
dev
), 
BRC_GENL_C_GET_PORTS
, dev->
«me
,

265 
uödi˚s
, 
num
);

266 
	`π∆_lock
();

268  
ªtvÆ
;

269 
	}
}

278 
	$brc_gë_fdb_íåõs
(
√t_devi˚
 *
dev
, 
__u£r
 *
u£rbuf
,

279 
maxnum
, 
off£t
)

281 
∆©å
 *
©ås
[
BRC_GENL_A_MAX
 + 1];

282 
sk_buff
 *
ªque°
, *
ª∂y
;

283 
ªtvÆ
;

284 
Àn
;

287 i‡(
maxnum
 > 
PAGE_SIZE
/(
__fdb_íåy
))

288 
maxnum
 = 
PAGE_SIZE
/(
__fdb_íåy
);

290 
ªque°
 = 
	`brc_make_ªque°
(
BRC_GENL_C_FDB_QUERY
, 
dev
->
«me
, 
NULL
);

291 i‡(!
ªque°
)

292  -
ENOMEM
;

293 i‡(
	`∆a_put_u64
(
ªque°
, 
BRC_GENL_A_FDB_COUNT
, 
maxnum
) ||

294 
	`∆a_put_u64
(
ªque°
, 
BRC_GENL_A_FDB_SKIP
, 
off£t
))

295 
∆a_put_Áûuª
;

297 
	`π∆_u∆ock
();

298 
ª∂y
 = 
	`brc_£nd_comm™d
(
	`dev_√t
(
dev
), 
ªque°
, 
©ås
);

299 
ªtvÆ
 = 
	`PTR_ERR
(
ª∂y
);

300 i‡(
	`IS_ERR
(
ª∂y
))

301 
exô
;

303 
ªtvÆ
 = -
	`∆a_gë_u32
(
©ås
[
BRC_GENL_A_ERR_CODE
]);

304 i‡(
ªtvÆ
 < 0)

305 
exô_‰ì_skb
;

307 
ªtvÆ
 = -
EINVAL
;

308 i‡(!
©ås
[
BRC_GENL_A_FDB_DATA
])

309 
exô_‰ì_skb
;

310 
Àn
 = 
	`∆a_Àn
(
©ås
[
BRC_GENL_A_FDB_DATA
]);

311 i‡(
Àn
 % (
__fdb_íåy
) ||

312 
Àn
 / (
__fdb_íåy
Ë> 
maxnum
)

313 
exô_‰ì_skb
;

315 
ªtvÆ
 = 
Àn
 / (
__fdb_íåy
);

316 i‡(
	`c›y_to_u£r
(
u£rbuf
, 
	`∆a_d©a
(
©ås
[
BRC_GENL_A_FDB_DATA
]), 
Àn
))

317 
ªtvÆ
 = -
EFAULT
;

319 
exô_‰ì_skb
:

320 
	`k‰ì_skb
(
ª∂y
);

321 
exô
:

322 
	`π∆_lock
();

323  
ªtvÆ
;

325 
∆a_put_Áûuª
:

326 
	`k‰ì_skb
(
ªque°
);

327  -
ENOMEM
;

328 
	}
}

331 
	$ﬁd_dev_io˘l
(
√t_devi˚
 *
dev
, 
i‰eq
 *
rq
, 
cmd
)

333 
¨gs
[4];

335 i‡(
	`c›y_‰om_u£r
(
¨gs
, 
rq
->
i‰_d©a
, (args)))

336  -
EFAULT
;

338 
¨gs
[0]) {

339 
BRCTL_ADD_IF
:

340  
	`brc_add_dñ_p‹t
(
dev
, 
¨gs
[1], 1);

341 
BRCTL_DEL_IF
:

342  
	`brc_add_dñ_p‹t
(
dev
, 
¨gs
[1], 0);

344 
BRCTL_GET_BRIDGE_INFO
:

345  
	`brc_gë_bridge_öfo
(
dev
, (
__bridge_öfo
 
__u£r
 *)
¨gs
[1]);

347 
BRCTL_GET_PORT_LIST
:

348  
	`brc_gë_p‹t_li°
(
dev
, (
__u£r
 *)
¨gs
[1],árgs[2]);

350 
BRCTL_GET_FDB_ENTRIES
:

351  
	`brc_gë_fdb_íåõs
(
dev
, (
__u£r
 *)
¨gs
[1],

352 
¨gs
[2],árgs[3]);

355  -
EOPNOTSUPP
;

356 
	}
}

359 
	$brc_dev_io˘l
(
√t_devi˚
 *
dev
, 
i‰eq
 *
rq
, 
cmd
)

361 
îr
;

363 
cmd
) {

364 
SIOCDEVPRIVATE
:

365 
îr
 = 
	`ﬁd_dev_io˘l
(
dev
, 
rq
, 
cmd
);

368 
SIOCBRADDIF
:

369  
	`brc_add_dñ_p‹t
(
dev
, 
rq
->
i‰_ifödex
, 1);

370 
SIOCBRDELIF
:

371  
	`brc_add_dñ_p‹t
(
dev
, 
rq
->
i‰_ifödex
, 0);

374 
îr
 = -
EOPNOTSUPP
;

378  
îr
;

379 
	}
}

382 
gíl_Ámûy
 
	gbrc_gíl_Ámûy
 = {

383 .
id
 = 
GENL_ID_GENERATE
,

384 .
	ghdrsize
 = 0,

385 .
	g«me
 = 
BRC_GENL_FAMILY_NAME
,

386 .
	gvîsi⁄
 = 1,

387 .
	gmax©å
 = 
BRC_GENL_A_MAX
,

388 
	gSET_NETNSOK


391 
	$brc_gíl_quîy
(
sk_buff
 *
skb
, 
gíl_öfo
 *
öfo
)

393 
îr
 = -
EINVAL
;

394 
sk_buff
 *
™s_skb
;

395 *
d©a
;

397 
™s_skb
 = 
	`∆msg_√w
(
NLMSG_DEFAULT_SIZE
, 
GFP_KERNEL
);

398 i‡(!
™s_skb
)

399  -
ENOMEM
;

401 
d©a
 = 
	`gílmsg_put_ª∂y
(
™s_skb
, 
öfo
, &
brc_gíl_Ámûy
,

402 0, 
BRC_GENL_C_QUERY_MC
);

403 i‡(
d©a
 =
NULL
) {

404 
îr
 = -
ENOMEM
;

405 
îr
;

407 i‡(
	`∆a_put_u32
(
™s_skb
, 
BRC_GENL_A_MC_GROUP
, 
brc_mc_group
.
id
))

408 
∆a_put_Áûuª
;

410 
	`gílmsg_íd
(
™s_skb
, 
d©a
);

411  
	`gílmsg_ª∂y
(
™s_skb
, 
öfo
);

413 
îr
:

414 
∆a_put_Áûuª
:

415 
	`k‰ì_skb
(
™s_skb
);

416  
îr
;

417 
	}
}

420 
∆a_pﬁicy
 
	gbrc_gíl_pﬁicy
[
BRC_GENL_A_MAX
 + 1] = {

421 [
BRC_GENL_A_ERR_CODE
] = { .
ty≥
 = 
NLA_U32
 },

422 [
BRC_GENL_A_FDB_DATA
] = { .
ty≥
 = 
NLA_UNSPEC
 },

425 
	$brc_gíl_dp_ªsu…
(
sk_buff
 *
skb
, 
gíl_öfo
 *
öfo
)

427 
Êags
;

428 
îr
;

430 i‡(!
öfo
->
©ås
[
BRC_GENL_A_ERR_CODE
])

431  -
EINVAL
;

433 
skb
 = 
	`skb_˛⁄e
(skb, 
GFP_KERNEL
);

434 i‡(!
skb
)

435  -
ENOMEM
;

437 
	`•ö_lock_úqßve
(&
brc_lock
, 
Êags
);

438 i‡(
brc_£q
 =
öfo
->
¢d_£q
) {

439 
brc_£q
++;

441 
	`k‰ì_skb
(
brc_ª∂y
);

442 
brc_ª∂y
 = 
skb
;

444 
	`com∂ëe
(&
brc_d⁄e
);

445 
îr
 = 0;

447 
	`k‰ì_skb
(
skb
);

448 
îr
 = -
ESTALE
;

450 
	`•ö_u∆ock_úqª°‹e
(&
brc_lock
, 
Êags
);

452  
îr
;

453 
	}
}

455 
gíl_›s
 
	gbrc_gíl_›s
[] = {

456 { .
cmd
 = 
BRC_GENL_C_QUERY_MC
,

457 .
	gÊags
 = 
GENL_ADMIN_PERM
,

458 .
	gpﬁicy
 = 
NULL
,

459 .
	gdoô
 = 
brc_gíl_quîy
,

461 { .
	gcmd
 = 
BRC_GENL_C_DP_RESULT
,

462 .
	gÊags
 = 
GENL_ADMIN_PERM
,

463 .
	gpﬁicy
 = 
brc_gíl_pﬁicy
,

464 .
	gdoô
 = 
brc_gíl_dp_ªsu…
,

468 
sk_buff
 *
	$brc_£nd_comm™d
(
√t
 *net,

469 
sk_buff
 *
ªque°
,

470 
∆©å
 **
©ås
)

472 
Êags
;

473 
sk_buff
 *
ª∂y
;

474 
îr‹
;

476 
	`muãx_lock
(&
brc_£rül
);

480 
	`•ö_lock_úqßve
(&
brc_lock
, 
Êags
);

481 
	`∆msg_hdr
(
ªque°
)->
∆msg_£q
 = ++
brc_£q
;

482 
	`INIT_COMPLETION
(
brc_d⁄e
);

483 
	`•ö_u∆ock_úqª°‹e
(&
brc_lock
, 
Êags
);

485 
	`∆msg_íd
(
ªque°
, 
	`∆msg_hdr
(request));

488 
îr‹
 = 
	`gílmsg_mu…iˇ°_√äs
(
√t
, 
ªque°
, 0,

489 
brc_mc_group
.
id
, 
GFP_KERNEL
);

490 i‡(
îr‹
 < 0)

491 
îr‹
;

494 
îr‹
 = -
ETIMEDOUT
;

495 i‡(!
	`waô_f‹_com∂ëi⁄_timeout
(&
brc_d⁄e
, 
BRC_TIMEOUT
)) {

496 
	`¥_w¨n
("timed out waiting for userspace\n");

497 
îr‹
;

501 
	`•ö_lock_úqßve
(&
brc_lock
, 
Êags
);

502 
ª∂y
 = 
brc_ª∂y
;

503 
brc_ª∂y
 = 
NULL
;

504 
	`•ö_u∆ock_úqª°‹e
(&
brc_lock
, 
Êags
);

506 
	`muãx_u∆ock
(&
brc_£rül
);

510 
îr‹
 = 
	`∆msg_∑r£
(
	`∆msg_hdr
(
ª∂y
), 
GENL_HDRLEN
,

511 
©ås
, 
BRC_GENL_A_MAX
, 
brc_gíl_pﬁicy
);

512 
	`WARN_ON
(
îr‹
);

514  
ª∂y
;

516 
îr‹
:

517 
	`muãx_u∆ock
(&
brc_£rül
);

518  
	`ERR_PTR
(
îr‹
);

519 
	}
}

521 
__öô
 
	$brc_öô
()

523 
îr
;

525 
	`¥_öfo
("O≥¿vSwôch BridgêCom∑tibûôy, buûà"
__DATE__
" "
__TIME__
"\n");

528 
	`brio˘l_£t
(
brc_io˘l_devi˚Àss_°ub
);

531 
ovs_dp_io˘l_hook
 = 
brc_dev_io˘l
;

536 
brc_£q
 = 
	`√t_øndom
();

540 
îr
 = 
	`gíl_ªgi°î_Ámûy_wôh_›s
(&
brc_gíl_Ámûy
,

541 
brc_gíl_›s
, 
	`ARRAY_SIZE
(brc_genl_ops));

542 i‡(
îr
)

543 
îr‹
;

545 
	`°r˝y
(
brc_mc_group
.
«me
, "brcompat");

546 
îr
 = 
	`gíl_ªgi°î_mc_group
(&
brc_gíl_Ámûy
, &
brc_mc_group
);

547 i‡(
îr
 < 0)

548 
îr_uƒegi°î
;

552 
îr_uƒegi°î
:

553 
	`gíl_uƒegi°î_Ámûy
(&
brc_gíl_Ámûy
);

554 
îr‹
:

555 
	`¥_emîg
("failedÅo install!\n");

556  
îr
;

557 
	}
}

559 
	$brc_˛ónup
()

562 
ovs_dp_io˘l_hook
 = 
NULL
;

563 
	`brio˘l_£t
(
NULL
);

565 
	`gíl_uƒegi°î_Ámûy
(&
brc_gíl_Ámûy
);

566 
	}
}

568 
moduÀ_öô
(
brc_öô
);

569 
moduÀ_exô
(
brc_˛ónup
);

571 
MODULE_DESCRIPTION
("Open vSwitch bridge compatibility");

572 
MODULE_AUTHOR
("Nicira, Inc.");

573 
MODULE_LICENSE
("GPL");

575 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,36)

581 
	gBRIDGE_MUTUAL_EXCLUSION
;

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/checksum.c

19 
	#¥_fmt
(
fmt
Ë
KBUILD_MODNAME
 ": " 
	)
fmt

21 
	~<löux/ö.h
>

22 
	~<löux/ù.h
>

23 
	~<löux/t˝.h
>

24 
	~<löux/udp.h
>

26 
	~"checksum.h
"

27 
	~"d©≠©h.h
"

29 #ifde‡
NEED_CSUM_NORMALIZE


31 #i‡
deföed
(
CONFIG_XEN
Ë&& deföed(
HAVE_PROTO_DATA_VALID
)

35 
	$vswôch_skb_checksum_£tup
(
sk_buff
 *
skb
)

37 
ùhdr
 *
ùh
;

38 *
th
;

39 
îr
 = -
EPROTO
;

40 
__u16
 
csum_°¨t
, 
csum_off£t
;

42 i‡(!
skb
->
¥Ÿo_csum_bœnk
)

45 i‡(
skb
->
¥Ÿocﬁ
 !
	`ht⁄s
(
ETH_P_IP
))

46 
out
;

48 i‡(!
	`pskb_may_puŒ
(
skb
, 
	`skb_√tw‹k_hódî
(skbË+ (
ùhdr
Ë- skb->
d©a
))

49 
out
;

51 
ùh
 = 
	`ù_hdr
(
skb
);

52 
th
 = 
	`skb_√tw‹k_hódî
(
skb
Ë+ 4 * 
ùh
->
ihl
;

54 
csum_°¨t
 = 
th
 - 
skb
->
hód
;

55 
ùh
->
¥Ÿocﬁ
) {

56 
IPPROTO_TCP
:

57 
csum_off£t
 = 
	`off£tof
(
t˝hdr
, 
check
);

59 
IPPROTO_UDP
:

60 
csum_off£t
 = 
	`off£tof
(
udphdr
, 
check
);

63 i‡(
	`√t_øãlimô
())

64 
	`¥_îr
("AttemptingÅo checksumáÇon-TCP/UDPÖacket, "

66 
ùh
->
¥Ÿocﬁ
);

67 
out
;

70 i‡(!
	`pskb_may_puŒ
(
skb
, 
th
 + 
csum_off£t
 + 2 - skb->
d©a
))

71 
out
;

73 
skb
->
¥Ÿo_csum_bœnk
 = 0;

74 
	`£t_ù_summed
(
skb
, 
OVS_CSUM_PARTIAL
);

75 
	`£t_skb_csum_poöãrs
(
skb
, 
csum_°¨t
, 
csum_off£t
);

77 
îr
 = 0;

79 
out
:

80  
îr
;

81 
	}
}

83 
	$vswôch_skb_checksum_£tup
(
sk_buff
 *
skb
)

86 
	}
}

146 
	$compuã_ù_summed
(
sk_buff
 *
skb
, 
boﬁ
 
xmô
)

151 
skb
->
ù_summed
) {

152 
CHECKSUM_NONE
:

153 
	`£t_ù_summed
(
skb
, 
OVS_CSUM_NONE
);

155 
CHECKSUM_UNNECESSARY
:

156 
	`£t_ù_summed
(
skb
, 
OVS_CSUM_UNNECESSARY
);

158 #ifde‡
CHECKSUM_HW


169 
CHECKSUM_HW
:

170 i‡(!
xmô
)

171 
	`£t_ù_summed
(
skb
, 
OVS_CSUM_COMPLETE
);

173 
	`£t_ù_summed
(
skb
, 
OVS_CSUM_PARTIAL
);

176 
CHECKSUM_COMPLETE
:

177 
	`£t_ù_summed
(
skb
, 
OVS_CSUM_COMPLETE
);

179 
CHECKSUM_PARTIAL
:

180 
	`£t_ù_summed
(
skb
, 
OVS_CSUM_PARTIAL
);

185 
	`OVS_CB
(
skb
)->
csum_°¨t
 = 
	`skb_hódroom
(skbË+ 
	`skb_å™•‹t_off£t
(skb);

187  
	`vswôch_skb_checksum_£tup
(
skb
);

188 
	}
}

204 
	$f‹w¨d_ù_summed
(
sk_buff
 *
skb
, 
boﬁ
 
xmô
)

206 
	`gë_ù_summed
(
skb
)) {

207 
OVS_CSUM_NONE
:

208 
skb
->
ù_summed
 = 
CHECKSUM_NONE
;

210 
OVS_CSUM_UNNECESSARY
:

211 
skb
->
ù_summed
 = 
CHECKSUM_UNNECESSARY
;

212 #i‡
	`deföed
(
CONFIG_XEN
Ë&& deföed(
HAVE_PROTO_DATA_VALID
)

213 
skb
->
¥Ÿo_d©a_vÆid
 = 1;

216 #ifde‡
CHECKSUM_HW


217 
OVS_CSUM_COMPLETE
:

218 i‡(!
xmô
)

219 
skb
->
ù_summed
 = 
CHECKSUM_HW
;

221 
skb
->
ù_summed
 = 
CHECKSUM_NONE
;

223 
OVS_CSUM_PARTIAL
:

224 i‡(!
xmô
) {

225 
skb
->
ù_summed
 = 
CHECKSUM_UNNECESSARY
;

226 #i‡
	`deföed
(
CONFIG_XEN
Ë&& deföed(
HAVE_PROTO_DATA_VALID
)

227 
skb
->
¥Ÿo_csum_bœnk
 = 1;

230 
skb
->
ù_summed
 = 
CHECKSUM_HW
;

234 
OVS_CSUM_COMPLETE
:

235 
skb
->
ù_summed
 = 
CHECKSUM_COMPLETE
;

237 
OVS_CSUM_PARTIAL
:

238 
skb
->
ù_summed
 = 
CHECKSUM_PARTIAL
;

243 i‡(
	`gë_ù_summed
(
skb
Ë=
OVS_CSUM_PARTIAL
)

244 
	`skb_£t_å™•‹t_hódî
(
skb
, 
	`OVS_CB
(skb)->
csum_°¨t
 -

245 
	`skb_hódroom
(
skb
));

246 
	}
}

248 
u8
 
	$gë_ù_summed
(
sk_buff
 *
skb
)

250  
	`OVS_CB
(
skb
)->
ù_summed
;

251 
	}
}

253 
	$£t_ù_summed
(
sk_buff
 *
skb
, 
u8
 
ù_summed
)

255 
	`OVS_CB
(
skb
)->
ù_summed
 = ip_summed;

256 
	}
}

258 
	$gë_skb_csum_poöãrs
(c⁄° 
sk_buff
 *
skb
, 
u16
 *
csum_°¨t
,

259 
u16
 *
csum_off£t
)

261 *
csum_°¨t
 = 
	`OVS_CB
(
skb
)->csum_start;

262 *
csum_off£t
 = 
skb
->
csum
;

263 
	}
}

265 
	$£t_skb_csum_poöãrs
(
sk_buff
 *
skb
, 
u16
 
csum_°¨t
,

266 
u16
 
csum_off£t
)

268 
	`OVS_CB
(
skb
)->
csum_°¨t
 = csum_start;

269 
skb
->
csum
 = 
csum_off£t
;

270 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/checksum.h

19 #i‚de‡
CHECKSUM_H


20 
	#CHECKSUM_H
 1

	)

22 
	~<löux/skbuff.h
>

23 
	~<löux/vîsi⁄.h
>

25 
	~<√t/checksum.h
>

27 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,22) || \

28 (
deföed
(
CONFIG_XEN
Ë&& 
	$deföed
(
HAVE_PROTO_DATA_VALID
))

29 
	#NEED_CSUM_NORMALIZE


	)

33 
	ecsum_ty≥
 {

34 
OVS_CSUM_NONE
 = 0,

35 
OVS_CSUM_UNNECESSARY
 = 1,

36 
OVS_CSUM_COMPLETE
 = 2,

37 
OVS_CSUM_PARTIAL
 = 3,

40 #ifde‡
NEED_CSUM_NORMALIZE


41 
	`compuã_ù_summed
(
sk_buff
 *
skb
, 
boﬁ
 
xmô
);

42 
	`f‹w¨d_ù_summed
(
sk_buff
 *
skb
, 
boﬁ
 
xmô
);

43 
u8
 
	`gë_ù_summed
(
sk_buff
 *
skb
);

44 
	`£t_ù_summed
(
sk_buff
 *
skb
, 
u8
 
ù_summed
);

45 
	`gë_skb_csum_poöãrs
(c⁄° 
sk_buff
 *
skb
, 
u16
 *
csum_°¨t
,

46 
u16
 *
csum_off£t
);

47 
	`£t_skb_csum_poöãrs
(
sk_buff
 *
skb
, 
u16
 
csum_°¨t
,

48 
u16
 
csum_off£t
);

50 
ölöe
 
	$compuã_ù_summed
(
sk_buff
 *
skb
, 
boﬁ
 
xmô
)

53 
	}
}

55 
ölöe
 
	$f‹w¨d_ù_summed
(
sk_buff
 *
skb
, 
boﬁ
 
xmô
Ë{ 
	}
}

57 
ölöe
 
u8
 
	$gë_ù_summed
(
sk_buff
 *
skb
)

59  
skb
->
ù_summed
;

60 
	}
}

62 
ölöe
 
	$£t_ù_summed
(
sk_buff
 *
skb
, 
u8
 
ù_summed
)

64 
skb
->
ù_summed
 = ip_summed;

65 
	}
}

67 
ölöe
 
	$gë_skb_csum_poöãrs
(c⁄° 
sk_buff
 *
skb
,

68 
u16
 *
csum_°¨t
, u16 *
csum_off£t
)

70 *
csum_°¨t
 = 
skb
->csum_start;

71 *
csum_off£t
 = 
skb
->csum_offset;

72 
	}
}

74 
ölöe
 
	$£t_skb_csum_poöãrs
(
sk_buff
 *
skb
, 
u16
 
csum_°¨t
,

75 
u16
 
csum_off£t
)

77 
skb
->
csum_°¨t
 = csum_start;

78 
skb
->
csum_off£t
 = csum_offset;

79 
	}
}

85 #i‡
deföed
(
NEED_CSUM_NORMALIZE
Ë|| 
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,25)

86 
	#öë_¥Ÿo_csum_ª∂a˚4
 
Ωl_öë_¥Ÿo_csum_ª∂a˚4


	)

87 
ölöe
 
	$öë_¥Ÿo_csum_ª∂a˚4
(
__sum16
 *
sum
, 
sk_buff
 *
skb
,

88 
__be32
 
‰om
, __be32 
to
,

89 
p£udohdr
)

91 
__be32
 
diff
[] = { ~
‰om
, 
to
 };

93 i‡(
	`gë_ù_summed
(
skb
Ë!
OVS_CSUM_PARTIAL
) {

94 *
sum
 = 
	`csum_fﬁd
(
	`csum_∑πül
((*)
diff
, (diff),

95 ~
	`csum_unfﬁd
(*
sum
)));

96 i‡(
	`gë_ù_summed
(
skb
Ë=
OVS_CSUM_COMPLETE
 && 
p£udohdr
)

97 
skb
->
csum
 = ~
	`csum_∑πül
((*)
diff
, (diff),

98 ~
skb
->
csum
);

99 } i‡(
p£udohdr
)

100 *
sum
 = ~
	`csum_fﬁd
(
	`csum_∑πül
((*)
diff
, (diff),

101 
	`csum_unfﬁd
(*
sum
)));

102 
	}
}

105 #i‡
deföed
(
NEED_CSUM_NORMALIZE
Ë|| 
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(3,7,0)

106 
	#öë_¥Ÿo_csum_ª∂a˚16
 
Ωl_öë_¥Ÿo_csum_ª∂a˚16


	)

107 
ölöe
 
	$öë_¥Ÿo_csum_ª∂a˚16
(
__sum16
 *
sum
,

108 
sk_buff
 *
skb
,

109 c⁄° 
__be32
 *
‰om
,

110 c⁄° 
__be32
 *
to
,

111 
p£udohdr
)

113 
__be32
 
diff
[] = {

114 ~
‰om
[0], ~from[1], ~from[2], ~from[3],

115 
to
[0],Åo[1],Åo[2],Åo[3],

117 i‡(
	`gë_ù_summed
(
skb
Ë!
OVS_CSUM_PARTIAL
) {

118 *
sum
 = 
	`csum_fﬁd
(
	`csum_∑πül
(
diff
, (diff),

119 ~
	`csum_unfﬁd
(*
sum
)));

120 i‡(
	`gë_ù_summed
(
skb
Ë=
OVS_CSUM_COMPLETE
 && 
p£udohdr
)

121 
skb
->
csum
 = ~
	`csum_∑πül
(
diff
, (diff),

122 ~
skb
->
csum
);

123 } i‡(
p£udohdr
)

124 *
sum
 = ~
	`csum_fﬁd
(
	`csum_∑πül
(
diff
, (diff),

125 
	`csum_unfﬁd
(*
sum
)));

126 
	}
}

129 #ifde‡
NEED_CSUM_NORMALIZE


130 
ölöe
 
	$upd©e_csum_°¨t
(
sk_buff
 *
skb
, 
dñè
)

132 i‡(
	`gë_ù_summed
(
skb
Ë=
OVS_CSUM_PARTIAL
) {

133 
u16
 
csum_°¨t
, 
csum_off£t
;

135 
	`gë_skb_csum_poöãrs
(
skb
, &
csum_°¨t
, &
csum_off£t
);

136 
	`£t_skb_csum_poöãrs
(
skb
, 
csum_°¨t
 + 
dñè
, 
csum_off£t
);

138 
	}
}

140 
ölöe
 
	$Ωl_pskb_ex∑nd_hód
(
sk_buff
 *
skb
, 
nhód
,

141 
¡aû
, 
gÂ_t
 
gÂ_mask
)

143 
îr
;

144 
ﬁd_hódroom
 = 
	`skb_hódroom
(
skb
);

146 
îr
 = 
	`pskb_ex∑nd_hód
(
skb
, 
nhód
, 
¡aû
, 
gÂ_mask
);

147 i‡(
	`u∆ikñy
(
îr
))

148  
îr
;

150 
	`upd©e_csum_°¨t
(
skb
, 
	`skb_hódroom
(skbË- 
ﬁd_hódroom
);

153 
	}
}

154 
	#pskb_ex∑nd_hód
 
Ωl_pskb_ex∑nd_hód


	)

156 
ölöe
 *
	$Ωl__pskb_puŒ_èû
(
sk_buff
 *
skb
,

157 
dñè
)

159 *
ªt
;

160 
ﬁd_hódroom
 = 
	`skb_hódroom
(
skb
);

162 
ªt
 = 
	`__pskb_puŒ_èû
(
skb
, 
dñè
);

163 i‡(
	`u∆ikñy
(!
ªt
))

164  
ªt
;

166 
	`upd©e_csum_°¨t
(
skb
, 
	`skb_hódroom
(skbË- 
ﬁd_hódroom
);

168  
ªt
;

169 
	}
}

170 
	#__pskb_puŒ_èû
 
Ωl__pskb_puŒ_èû


	)

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/compat.h

19 #i‚de‡
COMPAT_H


20 
	#COMPAT_H
 1

	)

22 
	~<löux/√éök.h
>

24 #i‚de‡
HAVE_NLA_NUL_STRING


25 
ölöe
 
	$CHECK_NUL_STRING
(
∆©å
 *
©å
, 
maxÀn
)

27 *
s
;

28 
Àn
;

29 i‡(!
©å
)

32 
Àn
 = 
	`∆a_Àn
(
©å
);

33 i‡(
Àn
 >
maxÀn
)

34  -
EINVAL
;

36 
s
 = 
	`∆a_d©a
(
©å
);

37 i‡(
s
[
Àn
 - 1] != '\0')

38  -
EINVAL
;

41 
	}
}

43 
ölöe
 
	$CHECK_NUL_STRING
(
∆©å
 *
©å
, 
maxÀn
)

46 
	}
}

49 
ölöe
 
	$skb_˛ór_rxhash
(
sk_buff
 *
skb
)

51 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,35)

52 
skb
->
rxhash
 = 0;

54 
	}
}

72 
	#BRIDGE_MUTUAL_EXCLUSION
 \

73 
	`ty≥of
(
br_should_rouã_hook
) br_should_route_hook; \

74 
	`EXPORT_SYMBOL
(
br_should_rouã_hook
)

	)

76 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,32)

77 
	#GENL_SOCK
(
√t
Ë(
gíl_sock
)

	)

78 
	#SET_NETNSOK


	)

80 
	#GENL_SOCK
(
√t
Ë(“ë)->
gíl_sock
)

	)

81 
	#SET_NETNSOK
 .
√äsok
 = 
åue
,

	)

84 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,20)

85 #ifde‡
CONFIG_NETFILTER


86 
ölöe
 
u32
 
	$skb_gë_m¨k
(
sk_buff
 *
skb
)

88  
skb
->
nfm¨k
;

89 
	}
}

91 
ölöe
 
	$skb_£t_m¨k
(
sk_buff
 *
skb
, 
u32
 
m¨k
)

93 
skb
->
nfm¨k
 = 
m¨k
;

94 
	}
}

96 
ölöe
 
u32
 
	$skb_gë_m¨k
(
sk_buff
 *
skb
)

99 
	}
}

101 
ölöe
 
	$skb_£t_m¨k
(
sk_buff
 *
skb
, 
u32
 
m¨k
)

103 
	}
}

106 
ölöe
 
u32
 
	$skb_gë_m¨k
(
sk_buff
 *
skb
)

108  
skb
->
m¨k
;

109 
	}
}

111 
ölöe
 
	$skb_£t_m¨k
(
sk_buff
 *
skb
, 
u32
 
m¨k
)

113 
skb
->
m¨k
 = mark;

114 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/datapath.c

19 
	#¥_fmt
(
fmt
Ë
KBUILD_MODNAME
 ": " 
	)
fmt

21 
	~<löux/öô.h
>

22 
	~<löux/moduÀ.h
>

23 
	~<löux/if_¨p.h
>

24 
	~<löux/if_vœn.h
>

25 
	~<löux/ö.h
>

26 
	~<löux/ù.h
>

27 
	~<löux/jhash.h
>

28 
	~<löux/dñay.h
>

29 
	~<löux/time.h
>

30 
	~<löux/ëhîdevi˚.h
>

31 
	~<löux/gíëlök.h
>

32 
	~<löux/kî√l.h
>

33 
	~<löux/kthªad.h
>

34 
	~<löux/muãx.h
>

35 
	~<löux/≥r˝u.h
>

36 
	~<löux/rcupd©e.h
>

37 
	~<löux/t˝.h
>

38 
	~<löux/udp.h
>

39 
	~<löux/vîsi⁄.h
>

40 
	~<löux/ëhtoﬁ.h
>

41 
	~<löux/waô.h
>

42 
	~<asm/div64.h
>

43 
	~<löux/highmem.h
>

44 
	~<löux/√tfûãr_bridge.h
>

45 
	~<löux/√tfûãr_ùv4.h
>

46 
	~<löux/öëdevi˚.h
>

47 
	~<löux/li°.h
>

48 
	~<löux/›ívswôch.h
>

49 
	~<löux/rculi°.h
>

50 
	~<löux/dmi.h
>

51 
	~<√t/gíëlök.h
>

52 
	~<√t/√t_«me•a˚.h
>

53 
	~<√t/√äs/gíîic.h
>

55 
	~"checksum.h
"

56 
	~"d©≠©h.h
"

57 
	~"Êow.h
"

58 
	~"gíl_exec.h
"

59 
	~"vœn.h
"

60 
	~"tu¬ñ.h
"

61 
	~"vp‹t-öã∫Æ_dev.h
"

63 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,18) || \

64 
	gLINUX_VERSION_CODE
 >
	$KERNEL_VERSION
(3,9,0)

65 #îr‹ 
Kî√ls
 
bef‹e
 2.6.18 
‹
 
a·î
 3.8 
¨e
 
nŸ
 
suµ‹ãd
 
by
 
this
 
vîsi⁄
 
of
 
O≥n
 
vSwôch
.

68 
	#REHASH_FLOW_INTERVAL
 (10 * 60 * 
HZ
)

	)

69 
	`ªhash_Êow_èbÀ
(
w‹k_°ru˘
 *
w‹k
);

70 
	`DECLARE_DELAYED_WORK
(
ªhash_Êow_wq
, 
ªhash_Êow_èbÀ
);

72 
ovs_√t_id
 
__ªad_mo°ly
;

74 (*
ovs_dp_io˘l_hook
)(
√t_devi˚
 *
dev
, 
i‰eq
 *
rq
, 
cmd
);

75 
	`EXPORT_SYMBOL
(
ovs_dp_io˘l_hook
);

94 
vp‹t
 *
	`√w_vp‹t
(c⁄° 
vp‹t_∑rms
 *);

95 
	`queue_gso_∑ckës
(
√t
 *, 
dp_ifödex
, 
sk_buff
 *,

96 c⁄° 
dp_upˇŒ_öfo
 *);

97 
	`queue_u£r•a˚_∑ckë
(
√t
 *, 
dp_ifödex
,

98 
sk_buff
 *,

99 c⁄° 
dp_upˇŒ_öfo
 *);

102 
d©≠©h
 *
	$gë_dp
(
√t
 *√t, 
dp_ifödex
)

104 
d©≠©h
 *
dp
 = 
NULL
;

105 
√t_devi˚
 *
dev
;

107 
	`rcu_ªad_lock
();

108 
dev
 = 
	`dev_gë_by_ödex_rcu
(
√t
, 
dp_ifödex
);

109 i‡(
dev
) {

110 
vp‹t
 *vp‹à
	`ovs_öã∫Æ_dev_gë_vp‹t
(
dev
);

111 i‡(
vp‹t
)

112 
dp
 = 
vp‹t
->dp;

114 
	`rcu_ªad_u∆ock
();

116  
dp
;

117 
	}
}

120 c⁄° *
	$ovs_dp_«me
(c⁄° 
d©≠©h
 *
dp
)

122 
vp‹t
 *vp‹à
	`ovs_vp‹t_π∆_rcu
(
dp
, 
OVSP_LOCAL
);

123  
vp‹t
->
›s
->
	`gë_«me
(vport);

124 
	}
}

126 
	$gë_dpifödex
(
d©≠©h
 *
dp
)

128 
vp‹t
 *
loˇl
;

129 
ifödex
;

131 
	`rcu_ªad_lock
();

133 
loˇl
 = 
	`ovs_vp‹t_rcu
(
dp
, 
OVSP_LOCAL
);

134 i‡(
loˇl
)

135 
ifödex
 = 
loˇl
->
›s
->
	`gë_ifödex
(local);

137 
ifödex
 = 0;

139 
	`rcu_ªad_u∆ock
();

141  
ifödex
;

142 
	}
}

144 
size_t
 
	$br_∆msg_size
()

146  
	`NLMSG_ALIGN
((
iföfomsg
))

147 + 
	`∆a_tŸÆ_size
(
IFNAMSIZ
)

148 + 
	`∆a_tŸÆ_size
(
MAX_ADDR_LEN
)

149 + 
	`∆a_tŸÆ_size
(4)

150 + 
	`∆a_tŸÆ_size
(4)

151 + 
	`∆a_tŸÆ_size
(1);

152 
	}
}

155 
	$dp_fûl_iföfo
(
sk_buff
 *
skb
,

156 c⁄° 
vp‹t
 *
p‹t
,

157 
evít
, 
Êags
)

159 
d©≠©h
 *
dp
 = 
p‹t
->dp;

160 
iföfomsg
 *
hdr
;

161 
∆msghdr
 *
∆h
;

163 i‡(!
p‹t
->
›s
->
gë_ifödex
)

164  -
ENODEV
;

166 
∆h
 = 
	`∆msg_put
(
skb
, 0, 0, 
evít
, (*
hdr
), 
Êags
);

167 i‡(
∆h
 =
NULL
)

168  -
EMSGSIZE
;

170 
hdr
 = 
	`∆msg_d©a
(
∆h
);

171 
hdr
->
ifi_Ámûy
 = 
AF_BRIDGE
;

172 
hdr
->
__ifi_∑d
 = 0;

173 
hdr
->
ifi_ty≥
 = 
ARPHRD_ETHER
;

174 
hdr
->
ifi_ödex
 = 
p‹t
->
›s
->
	`gë_ifödex
(port);

175 
hdr
->
ifi_Êags
 = 
p‹t
->
›s
->
	`gë_dev_Êags
(port);

176 
hdr
->
ifi_ch™ge
 = 0;

178 i‡(
	`∆a_put_°rög
(
skb
, 
IFLA_IFNAME
, 
p‹t
->
›s
->
	`gë_«me
(port)) ||

179 
	`∆a_put_u32
(
skb
, 
IFLA_MASTER
, 
	`gë_dpifödex
(
dp
)) ||

180 
	`∆a_put_u32
(
skb
, 
IFLA_MTU
, 
p‹t
->
›s
->
	`gë_mtu
(port)) ||

181 #ifde‡
IFLA_OPERSTATE


182 
	`∆a_put_u8
(
skb
, 
IFLA_OPERSTATE
,

183 
p‹t
->
›s
->
	`is_ru¬ög
(port) ?

184 
p‹t
->
›s
->
	`gë_›î°©e
(port) :

185 
IF_OPER_DOWN
) ||

187 
	`∆a_put
(
skb
, 
IFLA_ADDRESS
, 
ETH_ALEN
, 
p‹t
->
›s
->
	`gë_addr
(port)))

188 
∆a_put_Áûuª
;

190  
	`∆msg_íd
(
skb
, 
∆h
);

192 
∆a_put_Áûuª
:

193 
	`∆msg_ˇn˚l
(
skb
, 
∆h
);

194  -
EMSGSIZE
;

195 
	}
}

198 
	$dp_iföfo_nŸify
(
evít
, 
vp‹t
 *
p‹t
)

200 
sk_buff
 *
skb
;

201 
îr
;

203 
skb
 = 
	`∆msg_√w
(
	`br_∆msg_size
(), 
GFP_KERNEL
);

204 i‡(!
skb
) {

205 
îr
 = -
ENOBUFS
;

206 
îr
;

209 
îr
 = 
	`dp_fûl_iföfo
(
skb
, 
p‹t
, 
evít
, 0);

210 i‡(
îr
 < 0) {

211 i‡(
îr
 =-
ENODEV
) {

212 
out
;

215 
	`WARN_ON
(
îr
 =-
EMSGSIZE
);

216 
îr
;

220 
	`π∆_nŸify
(
skb
, 
	`ovs_dp_gë_√t
(
p‹t
->
dp
), 0, 
RTNLGRP_LINK
, 
NULL
, 
GFP_KERNEL
);

223 
îr
:

224 
	`π∆_£t_sk_îr
(
	`ovs_dp_gë_√t
(
p‹t
->
dp
), 
RTNLGRP_LINK
, 
îr
);

225 
out
:

226 
	`k‰ì_skb
(
skb
);

227 
	}
}

229 
	$ªÀa£_dp
(
kobje˘
 *
kobj
)

231 
d©≠©h
 *
dp
 = 
	`c⁄èöî_of
(
kobj
, d©≠©h, 
ifobj
);

232 
	`k‰ì
(
dp
);

233 
	}
}

235 
kobj_ty≥
 
	gdp_kty≥
 = {

236 .
ªÀa£
 = 
ªÀa£_dp


239 
	$de°roy_dp_rcu
(
rcu_hód
 *
rcu
)

241 
d©≠©h
 *
dp
 = 
	`c⁄èöî_of
(
rcu
, datapath,Ñcu);

243 
	`ovs_Êow_tbl_de°roy
((
__f‹˚
 
Êow_èbÀ
 *)
dp
->
èbÀ
);

244 
	`‰ì_≥r˝u
(
dp
->
°©s_≥r˝u
);

245 
	`ªÀa£_√t
(
	`ovs_dp_gë_√t
(
dp
));

246 
	`k‰ì
(
dp
->
p‹ts
);

247 
	`kobje˘_put
(&
dp
->
ifobj
);

248 
	}
}

250 
hli°_hód
 *
	$vp‹t_hash_buckë
(c⁄° 
d©≠©h
 *
dp
,

251 
u16
 
p‹t_no
)

253  &
dp
->
p‹ts
[
p‹t_no
 & (
DP_VPORT_HASH_BUCKETS
 - 1)];

254 
	}
}

256 
vp‹t
 *
	$ovs_lookup_vp‹t
(c⁄° 
d©≠©h
 *
dp
, 
u16
 
p‹t_no
)

258 
vp‹t
 *vport;

259 
hli°_node
 *
n
;

260 
hli°_hód
 *
hód
;

262 
hód
 = 
	`vp‹t_hash_buckë
(
dp
, 
p‹t_no
);

263 
	`hli°_f‹_óch_íåy_rcu
(
vp‹t
, 
n
, 
hód
, 
dp_hash_node
) {

264 i‡(
vp‹t
->
p‹t_no
 ==Öort_no)

265  
vp‹t
;

267  
NULL
;

268 
	}
}

271 
vp‹t
 *
	$√w_vp‹t
(c⁄° 
vp‹t_∑rms
 *
∑rms
)

273 
vp‹t
 *vport;

275 
vp‹t
 = 
	`ovs_vp‹t_add
(
∑rms
);

276 i‡(!
	`IS_ERR
(
vp‹t
)) {

277 
d©≠©h
 *
dp
 = 
∑rms
->dp;

278 
hli°_hód
 *
hód
 = 
	`vp‹t_hash_buckë
(
dp
, 
vp‹t
->
p‹t_no
);

280 
	`hli°_add_hód_rcu
(&
vp‹t
->
dp_hash_node
, 
hód
);

281 
	`dp_iföfo_nŸify
(
RTM_NEWLINK
, 
vp‹t
);

283  
vp‹t
;

284 
	}
}

287 
	$ovs_dp_dëach_p‹t
(
vp‹t
 *
p
)

289 
	`ASSERT_RTNL
();

291 i‡(
p
->
p‹t_no
 !
OVSP_LOCAL
)

292 
	`ovs_dp_sysfs_dñ_if
(
p
);

294 
	`dp_iföfo_nŸify
(
RTM_DELLINK
, 
p
);

297 
	`hli°_dñ_rcu
(&
p
->
dp_hash_node
);

300 
	`ovs_vp‹t_dñ
(
p
);

301 
	}
}

304 
	$ovs_dp_¥o˚ss_ª˚ived_∑ckë
(
vp‹t
 *
p
, 
sk_buff
 *
skb
)

306 
d©≠©h
 *
dp
 = 
p
->dp;

307 
sw_Êow
 *
Êow
;

308 
dp_°©s_≥r˝u
 *
°©s
;

309 
u64
 *
°©s_cou¡î
;

310 
îr‹
;

312 
°©s
 = 
	`≥r_˝u_±r
(
dp
->
°©s_≥r˝u
, 
	`smp_¥o˚ss‹_id
());

314 i‡(!
	`OVS_CB
(
skb
)->
Êow
) {

315 
sw_Êow_key
 
key
;

316 
key_Àn
;

319 
îr‹
 = 
	`ovs_Êow_exåa˘
(
skb
, 
p
->
p‹t_no
, &
key
, &
key_Àn
);

320 i‡(
	`u∆ikñy
(
îr‹
)) {

321 
	`k‰ì_skb
(
skb
);

326 
Êow
 = 
	`ovs_Êow_tbl_lookup
(
	`rcu_dîe„ªn˚
(
dp
->
èbÀ
),

327 &
key
, 
key_Àn
);

328 i‡(
	`u∆ikñy
(!
Êow
)) {

329 
dp_upˇŒ_öfo
 
upˇŒ
;

331 
upˇŒ
.
cmd
 = 
OVS_PACKET_CMD_MISS
;

332 
upˇŒ
.
key
 = &key;

333 
upˇŒ
.
u£rd©a
 = 
NULL
;

334 
upˇŒ
.
p‹tid
 = 
p
->
upˇŒ_p‹tid
;

335 
	`ovs_dp_upˇŒ
(
dp
, 
skb
, &
upˇŒ
);

336 
	`c⁄sume_skb
(
skb
);

337 
°©s_cou¡î
 = &
°©s
->
n_mis£d
;

338 
out
;

341 
	`OVS_CB
(
skb
)->
Êow
 = flow;

344 
°©s_cou¡î
 = &
°©s
->
n_hô
;

345 
	`ovs_Êow_u£d
(
	`OVS_CB
(
skb
)->
Êow
, skb);

346 
	`ovs_execuã_a˘i⁄s
(
dp
, 
skb
);

348 
out
:

350 
	`u64_°©s_upd©e_begö
(&
°©s
->
sync
);

351 (*
°©s_cou¡î
)++;

352 
	`u64_°©s_upd©e_íd
(&
°©s
->
sync
);

353 
	}
}

355 
gíl_Ámûy
 
	gdp_∑ckë_gíl_Ámûy
 = {

356 .
id
 = 
GENL_ID_GENERATE
,

357 .
	ghdrsize
 = (
ovs_hódî
),

358 .
	g«me
 = 
OVS_PACKET_FAMILY
,

359 .
	gvîsi⁄
 = 
OVS_PACKET_VERSION
,

360 .
	gmax©å
 = 
OVS_PACKET_ATTR_MAX
,

361 
	gSET_NETNSOK


364 
	$ovs_dp_upˇŒ
(
d©≠©h
 *
dp
, 
sk_buff
 *
skb
,

365 c⁄° 
dp_upˇŒ_öfo
 *
upˇŒ_öfo
)

367 
dp_°©s_≥r˝u
 *
°©s
;

368 
dp_ifödex
;

369 
îr
;

371 i‡(
upˇŒ_öfo
->
p‹tid
 == 0) {

372 
îr
 = -
ENOTCONN
;

373 
îr
;

376 
dp_ifödex
 = 
	`gë_dpifödex
(
dp
);

377 i‡(!
dp_ifödex
) {

378 
îr
 = -
ENODEV
;

379 
îr
;

382 
	`f‹w¨d_ù_summed
(
skb
, 
åue
);

384 i‡(!
	`skb_is_gso
(
skb
))

385 
îr
 = 
	`queue_u£r•a˚_∑ckë
(
	`ovs_dp_gë_√t
(
dp
), 
dp_ifödex
, 
skb
, 
upˇŒ_öfo
);

387 
îr
 = 
	`queue_gso_∑ckës
(
	`ovs_dp_gë_√t
(
dp
), 
dp_ifödex
, 
skb
, 
upˇŒ_öfo
);

388 i‡(
îr
)

389 
îr
;

393 
îr
:

394 
°©s
 = 
	`≥r_˝u_±r
(
dp
->
°©s_≥r˝u
, 
	`smp_¥o˚ss‹_id
());

396 
	`u64_°©s_upd©e_begö
(&
°©s
->
sync
);

397 
°©s
->
n_lo°
++;

398 
	`u64_°©s_upd©e_íd
(&
°©s
->
sync
);

400  
îr
;

401 
	}
}

403 
	$queue_gso_∑ckës
(
√t
 *√t, 
dp_ifödex
,

404 
sk_buff
 *
skb
,

405 c⁄° 
dp_upˇŒ_öfo
 *
upˇŒ_öfo
)

407 
gso_ty≥
 = 
	`skb_shöfo
(
skb
)->gso_type;

408 
dp_upˇŒ_öfo
 
œãr_öfo
;

409 
sw_Êow_key
 
œãr_key
;

410 
sk_buff
 *
£gs
, *
nskb
;

411 
îr
;

413 
£gs
 = 
	`skb_gso_£gmít
(
skb
, 
NETIF_F_SG
 | 
NETIF_F_HW_CSUM
);

414 i‡(
	`IS_ERR
(
£gs
))

415  
	`PTR_ERR
(
£gs
);

418 
skb
 = 
£gs
;

420 
îr
 = 
	`queue_u£r•a˚_∑ckë
(
√t
, 
dp_ifödex
, 
skb
, 
upˇŒ_öfo
);

421 i‡(
îr
)

424 i‡(
skb
 =
£gs
 && 
gso_ty≥
 & 
SKB_GSO_UDP
) {

429 
œãr_key
 = *
upˇŒ_öfo
->
key
;

430 
œãr_key
.
ù
.
‰ag
 = 
OVS_FRAG_TYPE_LATER
;

432 
œãr_öfo
 = *
upˇŒ_öfo
;

433 
œãr_öfo
.
key
 = &
œãr_key
;

434 
upˇŒ_öfo
 = &
œãr_öfo
;

436 } (
skb
 = skb->
√xt
));

439 
skb
 = 
£gs
;

441 
nskb
 = 
skb
->
√xt
;

442 i‡(
îr
)

443 
	`k‰ì_skb
(
skb
);

445 
	`c⁄sume_skb
(
skb
);

446 } (
skb
 = 
nskb
));

447  
îr
;

448 
	}
}

450 
	$queue_u£r•a˚_∑ckë
(
√t
 *√t, 
dp_ifödex
,

451 
sk_buff
 *
skb
,

452 c⁄° 
dp_upˇŒ_öfo
 *
upˇŒ_öfo
)

454 
ovs_hódî
 *
upˇŒ
;

455 
sk_buff
 *
nskb
 = 
NULL
;

456 
sk_buff
 *
u£r_skb
;

457 
∆©å
 *
∆a
;

458 
Àn
;

459 
îr
;

461 i‡(
	`vœn_tx_èg_¥e£¡
(
skb
)) {

462 
nskb
 = 
	`skb_˛⁄e
(
skb
, 
GFP_ATOMIC
);

463 i‡(!
nskb
)

464  -
ENOMEM
;

466 
îr
 = 
	`vœn_dóc˚l_èg
(
nskb
);

467 i‡(
îr
)

468  
îr
;

470 
skb
 = 
nskb
;

473 i‡(
	`∆a_©å_size
(
skb
->
Àn
Ë> 
USHRT_MAX
) {

474 
îr
 = -
EFBIG
;

475 
out
;

478 
Àn
 = (
ovs_hódî
);

479 
Àn
 +
	`∆a_tŸÆ_size
(
skb
->len);

480 
Àn
 +
	`∆a_tŸÆ_size
(
FLOW_BUFSIZE
);

481 i‡(
upˇŒ_öfo
->
cmd
 =
OVS_PACKET_CMD_ACTION
)

482 
Àn
 +
	`∆a_tŸÆ_size
(8);

484 
u£r_skb
 = 
	`gílmsg_√w
(
Àn
, 
GFP_ATOMIC
);

485 i‡(!
u£r_skb
) {

486 
îr
 = -
ENOMEM
;

487 
out
;

490 
upˇŒ
 = 
	`gílmsg_put
(
u£r_skb
, 0, 0, &
dp_∑ckë_gíl_Ámûy
,

491 0, 
upˇŒ_öfo
->
cmd
);

492 
upˇŒ
->
dp_ifödex
 = dp_ifindex;

494 
∆a
 = 
	`∆a_√°_°¨t
(
u£r_skb
, 
OVS_PACKET_ATTR_KEY
);

495 
	`ovs_Êow_to_∆©ås
(
upˇŒ_öfo
->
key
, 
u£r_skb
);

496 
	`∆a_√°_íd
(
u£r_skb
, 
∆a
);

498 i‡(
upˇŒ_öfo
->
u£rd©a
)

499 
	`∆a_put_u64
(
u£r_skb
, 
OVS_PACKET_ATTR_USERDATA
,

500 
	`∆a_gë_u64
(
upˇŒ_öfo
->
u£rd©a
));

502 
∆a
 = 
	`__∆a_ª£rve
(
u£r_skb
, 
OVS_PACKET_ATTR_PACKET
, 
skb
->
Àn
);

504 
	`skb_c›y_™d_csum_dev
(
skb
, 
	`∆a_d©a
(
∆a
));

506 
îr
 = 
	`gílmsg_uniˇ°
(
√t
, 
u£r_skb
, 
upˇŒ_öfo
->
p‹tid
);

508 
out
:

509 
	`k‰ì_skb
(
nskb
);

510  
îr
;

511 
	}
}

514 
	$Êush_Êows
(
d©≠©h
 *
dp
)

516 
Êow_èbÀ
 *
ﬁd_èbÀ
;

517 
Êow_èbÀ
 *
√w_èbÀ
;

519 
ﬁd_èbÀ
 = 
	`gíl_dîe„ªn˚
(
dp
->
èbÀ
);

520 
√w_èbÀ
 = 
	`ovs_Êow_tbl_Æloc
(
TBL_MIN_BUCKETS
);

521 i‡(!
√w_èbÀ
)

522  -
ENOMEM
;

524 
	`rcu_assign_poöãr
(
dp
->
èbÀ
, 
√w_èbÀ
);

526 
	`ovs_Êow_tbl_de„ºed_de°roy
(
ﬁd_èbÀ
);

528 
	}
}

530 
∆©å
 *
	$ª£rve_sÁ_size
(
sw_Êow_a˘i⁄s
 **
sÁ
, 
©å_Àn
)

533 
sw_Êow_a˘i⁄s
 *
a˘s
;

534 
√w_a˘s_size
;

535 
ªq_size
 = 
	`NLA_ALIGN
(
©å_Àn
);

536 
√xt_off£t
 = 
	`off£tof
(
sw_Êow_a˘i⁄s
, 
a˘i⁄s
) +

537 (*
sÁ
)->
a˘i⁄s_Àn
;

539 i‡(
ªq_size
 <(
	`ksize
(*
sÁ
Ë- 
√xt_off£t
))

540 
out
;

542 
√w_a˘s_size
 = 
	`ksize
(*
sÁ
) * 2;

544 i‡(
√w_a˘s_size
 > 
MAX_ACTIONS_BUFSIZE
) {

545 i‡((
MAX_ACTIONS_BUFSIZE
 - 
√xt_off£t
Ë< 
ªq_size
)

546  
	`ERR_PTR
(-
EMSGSIZE
);

547 
√w_a˘s_size
 = 
MAX_ACTIONS_BUFSIZE
;

550 
a˘s
 = 
	`ovs_Êow_a˘i⁄s_Æloc
(
√w_a˘s_size
);

551 i‡(
	`IS_ERR
(
a˘s
))

552  (*)
a˘s
;

554 
	`mem˝y
(
a˘s
->
a˘i⁄s
, (*
sÁ
)->a˘i⁄s, (*sÁ)->
a˘i⁄s_Àn
);

555 
a˘s
->
a˘i⁄s_Àn
 = (*
sÁ
)->actions_len;

556 
	`k‰ì
(*
sÁ
);

557 *
sÁ
 = 
a˘s
;

559 
out
:

560 (*
sÁ
)->
a˘i⁄s_Àn
 +
ªq_size
;

561  (
∆©å
 *Ë((*)(*
sÁ
Ë+ 
√xt_off£t
);

562 
	}
}

564 
	$add_a˘i⁄
(
sw_Êow_a˘i⁄s
 **
sÁ
, 
©åty≥
, *
d©a
, 
Àn
)

566 
∆©å
 *
a
;

568 
a
 = 
	`ª£rve_sÁ_size
(
sÁ
, 
	`∆a_©å_size
(
Àn
));

569 i‡(
	`IS_ERR
(
a
))

570  
	`PTR_ERR
(
a
);

572 
a
->
∆a_ty≥
 = 
©åty≥
;

573 
a
->
∆a_Àn
 = 
	`∆a_©å_size
(
Àn
);

575 i‡(
d©a
)

576 
	`mem˝y
(
	`∆a_d©a
(
a
), 
d©a
, 
Àn
);

577 
	`mem£t
((*Ë
a
 +á->
∆a_Àn
, 0, 
	`∆a_∑dÀn
(
Àn
));

580 
	}
}

582 
ölöe
 
	$add_√°ed_a˘i⁄_°¨t
(
sw_Êow_a˘i⁄s
 **
sÁ
, 
©åty≥
)

584 
u£d
 = (*
sÁ
)->
a˘i⁄s_Àn
;

585 
îr
;

587 
îr
 = 
	`add_a˘i⁄
(
sÁ
, 
©åty≥
, 
NULL
, 0);

588 i‡(
îr
)

589  
îr
;

591  
u£d
;

592 
	}
}

594 
ölöe
 
	$add_√°ed_a˘i⁄_íd
(
sw_Êow_a˘i⁄s
 *
sÁ
, 
°_off£t
)

596 
∆©å
 *
a
 = (∆©å *Ë((*)
sÁ
->
a˘i⁄s
 + 
°_off£t
);

598 
a
->
∆a_Àn
 = 
sÁ
->
a˘i⁄s_Àn
 - 
°_off£t
;

599 
	}
}

601 
vÆid©e_™d_c›y_a˘i⁄s
(c⁄° 
∆©å
 *
©å
,

602 c⁄° 
sw_Êow_key
 *
key
, 
dïth
,

603 
sw_Êow_a˘i⁄s
 **
sÁ
);

605 
	$vÆid©e_™d_c›y_ßm∂e
(c⁄° 
∆©å
 *
©å
,

606 c⁄° 
sw_Êow_key
 *
key
, 
dïth
,

607 
sw_Êow_a˘i⁄s
 **
sÁ
)

609 c⁄° 
∆©å
 *
©ås
[
OVS_SAMPLE_ATTR_MAX
 + 1];

610 c⁄° 
∆©å
 *
¥obabûôy
, *
a˘i⁄s
;

611 c⁄° 
∆©å
 *
a
;

612 
ªm
, 
°¨t
, 
îr
, 
°_a˘s
;

614 
	`mem£t
(
©ås
, 0, (attrs));

615 
	`∆a_f‹_óch_√°ed
(
a
, 
©å
, 
ªm
) {

616 
ty≥
 = 
	`∆a_ty≥
(
a
);

617 i‡(!
ty≥
 ||Åy≥ > 
OVS_SAMPLE_ATTR_MAX
 || 
©ås
[type])

618  -
EINVAL
;

619 
©ås
[
ty≥
] = 
a
;

621 i‡(
ªm
)

622  -
EINVAL
;

624 
¥obabûôy
 = 
©ås
[
OVS_SAMPLE_ATTR_PROBABILITY
];

625 i‡(!
¥obabûôy
 || 
	`∆a_Àn
’robabûôyË!(
u32
))

626  -
EINVAL
;

628 
a˘i⁄s
 = 
©ås
[
OVS_SAMPLE_ATTR_ACTIONS
];

629 i‡(!
a˘i⁄s
 || (
	`∆a_Àn
◊˘i⁄sË&&Çœ_Àn◊˘i⁄sË< 
NLA_HDRLEN
))

630  -
EINVAL
;

633 
°¨t
 = 
	`add_√°ed_a˘i⁄_°¨t
(
sÁ
, 
OVS_ACTION_ATTR_SAMPLE
);

634 i‡(
°¨t
 < 0)

635  
°¨t
;

636 
îr
 = 
	`add_a˘i⁄
(
sÁ
, 
OVS_SAMPLE_ATTR_PROBABILITY
, 
	`∆a_d©a
(
¥obabûôy
), (
u32
));

637 i‡(
îr
)

638  
îr
;

639 
°_a˘s
 = 
	`add_√°ed_a˘i⁄_°¨t
(
sÁ
, 
OVS_SAMPLE_ATTR_ACTIONS
);

640 i‡(
°_a˘s
 < 0)

641  
°_a˘s
;

643 
îr
 = 
	`vÆid©e_™d_c›y_a˘i⁄s
(
a˘i⁄s
, 
key
, 
dïth
 + 1, 
sÁ
);

644 i‡(
îr
)

645  
îr
;

647 
	`add_√°ed_a˘i⁄_íd
(*
sÁ
, 
°_a˘s
);

648 
	`add_√°ed_a˘i⁄_íd
(*
sÁ
, 
°¨t
);

651 
	}
}

653 
	$vÆid©e_ç_p‹t
(c⁄° 
sw_Êow_key
 *
Êow_key
)

655 i‡(
Êow_key
->
ëh
.
ty≥
 =
	`ht⁄s
(
ETH_P_IP
)) {

656 i‡(
Êow_key
->
ùv4
.
ç
.
§c
 || flow_key->ùv4.ç.
d°
)

658 } i‡(
Êow_key
->
ëh
.
ty≥
 =
	`ht⁄s
(
ETH_P_IPV6
)) {

659 i‡(
Êow_key
->
ùv6
.
ç
.
§c
 || flow_key->ùv6.ç.
d°
)

663  -
EINVAL
;

664 
	}
}

666 
	$vÆid©e_™d_c›y_£t_tun
(c⁄° 
∆©å
 *
©å
,

667 
sw_Êow_a˘i⁄s
 **
sÁ
)

669 
ovs_key_ùv4_tu¬ñ
 
tun_key
;

670 
îr
, 
°¨t
;

672 
îr
 = 
	`ùv4_tun_‰om_∆©å
(
	`∆a_d©a
(
©å
), &
tun_key
);

673 i‡(
îr
)

674  
îr
;

676 
°¨t
 = 
	`add_√°ed_a˘i⁄_°¨t
(
sÁ
, 
OVS_ACTION_ATTR_SET
);

677 i‡(
°¨t
 < 0)

678  
°¨t
;

680 
îr
 = 
	`add_a˘i⁄
(
sÁ
, 
OVS_KEY_ATTR_IPV4_TUNNEL
, &
tun_key
, (tun_key));

681 
	`add_√°ed_a˘i⁄_íd
(*
sÁ
, 
°¨t
);

683  
îr
;

684 
	}
}

686 
	$vÆid©e_£t
(c⁄° 
∆©å
 *
a
,

687 c⁄° 
sw_Êow_key
 *
Êow_key
,

688 
sw_Êow_a˘i⁄s
 **
sÁ
,

689 
boﬁ
 *
£t_tun
)

691 c⁄° 
∆©å
 *
ovs_key
 = 
	`∆a_d©a
(
a
);

692 
key_ty≥
 = 
	`∆a_ty≥
(
ovs_key
);

695 i‡(
	`∆a_tŸÆ_size
(
	`∆a_Àn
(
ovs_key
)Ë!∆a_Àn(
a
))

696  -
EINVAL
;

698 i‡(
key_ty≥
 > 
OVS_KEY_ATTR_MAX
 ||

699 (
ovs_key_Àns
[
key_ty≥
] !
	`∆a_Àn
(
ovs_key
) &&

700 
ovs_key_Àns
[
key_ty≥
] != -1))

701  -
EINVAL
;

703 
key_ty≥
) {

704 c⁄° 
ovs_key_ùv4
 *
ùv4_key
;

705 c⁄° 
ovs_key_ùv6
 *
ùv6_key
;

706 
îr
;

708 
OVS_KEY_ATTR_PRIORITY
:

709 
OVS_KEY_ATTR_TUN_ID
:

710 
OVS_KEY_ATTR_ETHERNET
:

713 
OVS_KEY_ATTR_SKB_MARK
:

714 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,20Ë&& !
	`deföed
(
CONFIG_NETFILTER
)

715 i‡(
	`∆a_gë_u32
(
ovs_key
) != 0)

716  -
EINVAL
;

720 
OVS_KEY_ATTR_TUNNEL
:

721 *
£t_tun
 = 
åue
;

722 
îr
 = 
	`vÆid©e_™d_c›y_£t_tun
(
a
, 
sÁ
);

723 i‡(
îr
)

724  
îr
;

727 
OVS_KEY_ATTR_IPV4
:

728 i‡(
Êow_key
->
ëh
.
ty≥
 !
	`ht⁄s
(
ETH_P_IP
))

729  -
EINVAL
;

731 i‡(!
Êow_key
->
ù
.
¥Ÿo
)

732  -
EINVAL
;

734 
ùv4_key
 = 
	`∆a_d©a
(
ovs_key
);

735 i‡(
ùv4_key
->
ùv4_¥Ÿo
 !
Êow_key
->
ù
.
¥Ÿo
)

736  -
EINVAL
;

738 i‡(
ùv4_key
->
ùv4_‰ag
 !
Êow_key
->
ù
.
‰ag
)

739  -
EINVAL
;

743 
OVS_KEY_ATTR_IPV6
:

744 i‡(
Êow_key
->
ëh
.
ty≥
 !
	`ht⁄s
(
ETH_P_IPV6
))

745  -
EINVAL
;

747 i‡(!
Êow_key
->
ù
.
¥Ÿo
)

748  -
EINVAL
;

750 
ùv6_key
 = 
	`∆a_d©a
(
ovs_key
);

751 i‡(
ùv6_key
->
ùv6_¥Ÿo
 !
Êow_key
->
ù
.
¥Ÿo
)

752  -
EINVAL
;

754 i‡(
ùv6_key
->
ùv6_‰ag
 !
Êow_key
->
ù
.
‰ag
)

755  -
EINVAL
;

757 i‡(
	`¡ohl
(
ùv6_key
->
ùv6_œbñ
) & 0xFFF00000)

758  -
EINVAL
;

762 
OVS_KEY_ATTR_TCP
:

763 i‡(
Êow_key
->
ù
.
¥Ÿo
 !
IPPROTO_TCP
)

764  -
EINVAL
;

766  
	`vÆid©e_ç_p‹t
(
Êow_key
);

768 
OVS_KEY_ATTR_UDP
:

769 i‡(
Êow_key
->
ù
.
¥Ÿo
 !
IPPROTO_UDP
)

770  -
EINVAL
;

772  
	`vÆid©e_ç_p‹t
(
Êow_key
);

775  -
EINVAL
;

779 
	}
}

781 
	$vÆid©e_u£r•a˚
(c⁄° 
∆©å
 *
©å
)

783 c⁄° 
∆a_pﬁicy
 
u£r•a˚_pﬁicy
[
OVS_USERSPACE_ATTR_MAX
 + 1] = {

784 [
OVS_USERSPACE_ATTR_PID
] = {.
ty≥
 = 
NLA_U32
 },

785 [
OVS_USERSPACE_ATTR_USERDATA
] = {.
ty≥
 = 
NLA_U64
 },

787 
∆©å
 *
a
[
OVS_USERSPACE_ATTR_MAX
 + 1];

788 
îr‹
;

790 
îr‹
 = 
	`∆a_∑r£_√°ed
(
a
, 
OVS_USERSPACE_ATTR_MAX
,

791 
©å
, 
u£r•a˚_pﬁicy
);

792 i‡(
îr‹
)

793  
îr‹
;

795 i‡(!
a
[
OVS_USERSPACE_ATTR_PID
] ||

796 !
	`∆a_gë_u32
(
a
[
OVS_USERSPACE_ATTR_PID
]))

797  -
EINVAL
;

800 
	}
}

802 
	$c›y_a˘i⁄
(c⁄° 
∆©å
 *
‰om
,

803 
sw_Êow_a˘i⁄s
 **
sÁ
)

805 
tŸÀn
 = 
	`NLA_ALIGN
(
‰om
->
∆a_Àn
);

806 
∆©å
 *
to
;

808 
to
 = 
	`ª£rve_sÁ_size
(
sÁ
, 
‰om
->
∆a_Àn
);

809 i‡(
	`IS_ERR
(
to
))

810  
	`PTR_ERR
(
to
);

812 
	`mem˝y
(
to
, 
‰om
, 
tŸÀn
);

814 
	}
}

816 
	$vÆid©e_™d_c›y_a˘i⁄s
(c⁄° 
∆©å
 *
©å
,

817 c⁄° 
sw_Êow_key
 *
key
,

818 
dïth
,

819 
sw_Êow_a˘i⁄s
 **
sÁ
)

821 c⁄° 
∆©å
 *
a
;

822 
ªm
, 
îr
;

824 i‡(
dïth
 >
SAMPLE_ACTION_DEPTH
)

825  -
EOVERFLOW
;

827 
	`∆a_f‹_óch_√°ed
(
a
, 
©å
, 
ªm
) {

829 c⁄° 
u32
 
a˘i⁄_Àns
[
OVS_ACTION_ATTR_MAX
 + 1] = {

830 [
OVS_ACTION_ATTR_OUTPUT
] = (
u32
),

831 [
OVS_ACTION_ATTR_USERSPACE
] = (
u32
)-1,

832 [
OVS_ACTION_ATTR_PUSH_VLAN
] = (
ovs_a˘i⁄_push_vœn
),

833 [
OVS_ACTION_ATTR_POP_VLAN
] = 0,

834 [
OVS_ACTION_ATTR_SET
] = (
u32
)-1,

835 [
OVS_ACTION_ATTR_SAMPLE
] = (
u32
)-1,

836 [
OVS_ACTION_ATTR_INIT_CODING
] = (
u32
) - 1,

837 [
OVS_ACTION_ATTR_ENCODE
] = (
u32
) - 1,

838 [
OVS_ACTION_ATTR_DECODE
] = (
u32
) - 1

843 
	`∆a_f‹_óch_√°ed
(
a
, 
©å
, 
ªm
) {

845 c⁄° 
u32
 
a˘i⁄_Àns
[
OVS_ACTION_ATTR_MAX
 + 1] = {

846 [
OVS_ACTION_ATTR_OUTPUT
] = (
u32
),

847 [
OVS_ACTION_ATTR_USERSPACE
] = (
u32
)-1,

848 [
OVS_ACTION_ATTR_PUSH_VLAN
] = (
ovs_a˘i⁄_push_vœn
),

849 [
OVS_ACTION_ATTR_POP_VLAN
] = 0,

850 [
OVS_ACTION_ATTR_SET
] = (
u32
)-1,

851 [
OVS_ACTION_ATTR_SAMPLE
] = (
u32
)-1

854 c⁄° 
ovs_a˘i⁄_push_vœn
 *
vœn
;

855 
ty≥
 = 
	`∆a_ty≥
(
a
);

856 
boﬁ
 
skù_c›y
;

858 i‡(
ty≥
 > 
OVS_ACTION_ATTR_MAX
 ||

859 (
a˘i⁄_Àns
[
ty≥
] !
	`∆a_Àn
(
a
) &&

860 
a˘i⁄_Àns
[
ty≥
] !(
u32
)-1))

861  -
EINVAL
;

863 
skù_c›y
 = 
Ál£
;

864 
ty≥
) {

865 
OVS_ACTION_ATTR_UNSPEC
:

866  -
EINVAL
;

868 
OVS_ACTION_ATTR_USERSPACE
:

869 
îr
 = 
	`vÆid©e_u£r•a˚
(
a
);

870 i‡(
îr
)

871  
îr
;

874 
OVS_ACTION_ATTR_OUTPUT
:

875 i‡(
	`∆a_gë_u32
(
a
Ë>
DP_MAX_PORTS
)

876  -
EINVAL
;

880 
OVS_ACTION_ATTR_POP_VLAN
:

883 
OVS_ACTION_ATTR_PUSH_VLAN
:

884 
vœn
 = 
	`∆a_d©a
(
a
);

885 i‡(
vœn
->
vœn_çid
 !
	`ht⁄s
(
ETH_P_8021Q
))

886  -
EINVAL
;

887 i‡(!(
vœn
->
vœn_tci
 & 
	`ht⁄s
(
VLAN_TAG_PRESENT
)))

888  -
EINVAL
;

891 
OVS_ACTION_ATTR_SET
:

892 
îr
 = 
	`vÆid©e_£t
(
a
, 
key
, 
sÁ
, &
skù_c›y
);

893 i‡(
îr
)

894  
îr
;

897 
OVS_ACTION_ATTR_SAMPLE
:

898 
îr
 = 
	`vÆid©e_™d_c›y_ßm∂e
(
a
, 
key
, 
dïth
, 
sÁ
);

899 i‡(
îr
)

900  
îr
;

901 
skù_c›y
 = 
åue
;

904 
OVS_ACTION_ATTR_INIT_CODING
:

905 
OVS_ACTION_ATTR_ENCODE
:

906 
OVS_ACTION_ATTR_DECODE
:

911  -
EINVAL
;

913 i‡(!
skù_c›y
) {

914 
îr
 = 
	`c›y_a˘i⁄
(
a
, 
sÁ
);

915 i‡(
îr
)

916  
îr
;

920 i‡(
ªm
 > 0)

921  -
EINVAL
;

926 
	`˛ór_°©s
(
sw_Êow
 *
Êow
)

928 
Êow
->
u£d
 = 0;

929 
Êow
->
t˝_Êags
 = 0;

930 
Êow
->
∑ckë_cou¡
 = 0;

931 
Êow
->
byã_cou¡
 = 0;

934 
	`ovs_∑ckë_cmd_execuã
(
sk_buff
 *
skb
, 
gíl_öfo
 *
öfo
)

936 
ovs_hódî
 *ovs_hódî = 
öfo
->
u£rhdr
;

937 
∆©å
 **
a
 = 
öfo
->
©ås
;

938 
sw_Êow_a˘i⁄s
 *
a˘s
;

939 
sk_buff
 *
∑ckë
;

940 
sw_Êow
 *
Êow
;

941 
d©≠©h
 *
dp
;

942 
ëhhdr
 *
ëh
;

943 
Àn
;

944 
îr
;

945 
key_Àn
;

947 
îr
 = -
EINVAL
;

948 i‡(!
a
[
OVS_PACKET_ATTR_PACKET
] || !a[
OVS_PACKET_ATTR_KEY
] ||

949 !
a
[
OVS_PACKET_ATTR_ACTIONS
] ||

950 
	`∆a_Àn
(
a
[
OVS_PACKET_ATTR_PACKET
]Ë< 
ETH_HLEN
)

951 
îr
;

953 
Àn
 = 
	`∆a_Àn
(
a
[
OVS_PACKET_ATTR_PACKET
]);

954 
∑ckë
 = 
	`__dev_Æloc_skb
(
NET_IP_ALIGN
 + 
Àn
, 
GFP_KERNEL
);

955 
îr
 = -
ENOMEM
;

956 i‡(!
∑ckë
)

957 
îr
;

958 
	`skb_ª£rve
(
∑ckë
, 
NET_IP_ALIGN
);

960 
	`mem˝y
(
	`__skb_put
(
∑ckë
, 
Àn
), 
	`∆a_d©a
(
a
[
OVS_PACKET_ATTR_PACKET
]),Üen);

962 
	`skb_ª£t_mac_hódî
(
∑ckë
);

963 
ëh
 = 
	`ëh_hdr
(
∑ckë
);

968 i‡(
	`¡ohs
(
ëh
->
h_¥Ÿo
) >= 1536)

969 
∑ckë
->
¥Ÿocﬁ
 = 
ëh
->
h_¥Ÿo
;

971 
∑ckë
->
¥Ÿocﬁ
 = 
	`ht⁄s
(
ETH_P_802_2
);

974 
Êow
 = 
	`ovs_Êow_Æloc
();

975 
îr
 = 
	`PTR_ERR
(
Êow
);

976 i‡(
	`IS_ERR
(
Êow
))

977 
îr_k‰ì_skb
;

979 
îr
 = 
	`ovs_Êow_exåa˘
(
∑ckë
, -1, &
Êow
->
key
, &
key_Àn
);

980 i‡(
îr
)

981 
îr_Êow_‰ì
;

983 
îr
 = 
	`ovs_Êow_mëad©a_‰om_∆©ås
(
Êow
, 
key_Àn
, 
a
[
OVS_PACKET_ATTR_KEY
]);

984 i‡(
îr
)

985 
îr_Êow_‰ì
;

986 
a˘s
 = 
	`ovs_Êow_a˘i⁄s_Æloc
(
	`∆a_Àn
(
a
[
OVS_PACKET_ATTR_ACTIONS
]));

987 
îr
 = 
	`PTR_ERR
(
a˘s
);

988 i‡(
	`IS_ERR
(
a˘s
))

989 
îr_Êow_‰ì
;

991 
îr
 = 
	`vÆid©e_™d_c›y_a˘i⁄s
(
a
[
OVS_PACKET_ATTR_ACTIONS
], &
Êow
->
key
, 0, &
a˘s
);

992 
	`rcu_assign_poöãr
(
Êow
->
sf_a˘s
, 
a˘s
);

993 i‡(
îr
)

994 
îr_Êow_‰ì
;

996 
	`OVS_CB
(
∑ckë
)->
Êow
 = flow;

997 
∑ckë
->
¥i‹ôy
 = 
Êow
->
key
.
phy
.priority;

998 
	`skb_£t_m¨k
(
∑ckë
, 
Êow
->
key
.
phy
.
skb_m¨k
);

1000 
	`rcu_ªad_lock
();

1001 
dp
 = 
	`gë_dp
(
	`sock_√t
(
skb
->
sk
), 
ovs_hódî
->
dp_ifödex
);

1002 
îr
 = -
ENODEV
;

1003 i‡(!
dp
)

1004 
îr_u∆ock
;

1006 
	`loˇl_bh_dißbÀ
();

1007 
îr
 = 
	`ovs_execuã_a˘i⁄s
(
dp
, 
∑ckë
);

1008 
	`loˇl_bh_íabÀ
();

1009 
	`rcu_ªad_u∆ock
();

1011 
	`ovs_Êow_‰ì
(
Êow
);

1012  
îr
;

1014 
îr_u∆ock
:

1015 
	`rcu_ªad_u∆ock
();

1016 
îr_Êow_‰ì
:

1017 
	`ovs_Êow_‰ì
(
Êow
);

1018 
îr_k‰ì_skb
:

1019 
	`k‰ì_skb
(
∑ckë
);

1020 
îr
:

1021  
îr
;

1024 c⁄° 
∆a_pﬁicy
 
∑ckë_pﬁicy
[
OVS_PACKET_ATTR_MAX
 + 1] = {

1025 [
OVS_PACKET_ATTR_PACKET
] = { .
ty≥
 = 
NLA_UNSPEC
 },

1026 [
OVS_PACKET_ATTR_KEY
] = { .
ty≥
 = 
NLA_NESTED
 },

1027 [
OVS_PACKET_ATTR_ACTIONS
] = { .
ty≥
 = 
NLA_NESTED
 },

1030 
gíl_›s
 
dp_∑ckë_gíl_›s
[] = {

1031 { .
cmd
 = 
OVS_PACKET_CMD_EXECUTE
,

1032 .
Êags
 = 
GENL_ADMIN_PERM
,

1033 .
pﬁicy
 = 
∑ckë_pﬁicy
,

1034 .
doô
 = 
ovs_∑ckë_cmd_execuã


1038 
	`gë_dp_°©s
(
d©≠©h
 *
dp
, 
ovs_dp_°©s
 *
°©s
)

1040 
i
;

1041 
Êow_èbÀ
 *
èbÀ
 = 
	`gíl_dîe„ªn˚
(
dp
->table);

1043 
°©s
->
n_Êows
 = 
	`ovs_Êow_tbl_cou¡
(
èbÀ
);

1045 
°©s
->
n_hô
 = sèts->
n_mis£d
 = sèts->
n_lo°
 = 0;

1046 
	`f‹_óch_possibÀ_˝u
(
i
) {

1047 c⁄° 
dp_°©s_≥r˝u
 *
≥r˝u_°©s
;

1048 
dp_°©s_≥r˝u
 
loˇl_°©s
;

1049 
°¨t
;

1051 
≥r˝u_°©s
 = 
	`≥r_˝u_±r
(
dp
->
°©s_≥r˝u
, 
i
);

1054 
°¨t
 = 
	`u64_°©s_„tch_begö_bh
(&
≥r˝u_°©s
->
sync
);

1055 
loˇl_°©s
 = *
≥r˝u_°©s
;

1056 } 
	`u64_°©s_„tch_ªåy_bh
(&
≥r˝u_°©s
->
sync
, 
°¨t
));

1058 
°©s
->
n_hô
 +
loˇl_°©s
.n_hit;

1059 
°©s
->
n_mis£d
 +
loˇl_°©s
.n_missed;

1060 
°©s
->
n_lo°
 +
loˇl_°©s
.n_lost;

1064 c⁄° 
∆a_pﬁicy
 
Êow_pﬁicy
[
OVS_FLOW_ATTR_MAX
 + 1] = {

1065 [
OVS_FLOW_ATTR_KEY
] = { .
ty≥
 = 
NLA_NESTED
 },

1066 [
OVS_FLOW_ATTR_ACTIONS
] = { .
ty≥
 = 
NLA_NESTED
 },

1067 [
OVS_FLOW_ATTR_CLEAR
] = { .
ty≥
 = 
NLA_FLAG
 },

1070 
gíl_Ámûy
 
dp_Êow_gíl_Ámûy
 = {

1071 .
id
 = 
GENL_ID_GENERATE
,

1072 .
hdrsize
 = (
ovs_hódî
),

1073 .
«me
 = 
OVS_FLOW_FAMILY
,

1074 .
vîsi⁄
 = 
OVS_FLOW_VERSION
,

1075 .
max©å
 = 
OVS_FLOW_ATTR_MAX
,

1076 
SET_NETNSOK


1079 
gíl_mu…iˇ°_group
 
ovs_dp_Êow_mu…iˇ°_group
 = {

1080 .
«me
 = 
OVS_FLOW_MCGROUP


1083 
	`a˘i⁄s_to_©å
(c⁄° 
∆©å
 *
©å
, 
Àn
, 
sk_buff
 *
skb
);

1084 
	`ßm∂e_a˘i⁄_to_©å
(c⁄° 
∆©å
 *
©å
, 
sk_buff
 *
skb
)

1086 c⁄° 
∆©å
 *
a
;

1087 
∆©å
 *
°¨t
;

1088 
îr
 = 0, 
ªm
;

1090 
°¨t
 = 
	`∆a_√°_°¨t
(
skb
, 
OVS_ACTION_ATTR_SAMPLE
);

1091 i‡(!
°¨t
)

1092  -
EMSGSIZE
;

1094 
	`∆a_f‹_óch_√°ed
(
a
, 
©å
, 
ªm
) {

1095 
ty≥
 = 
	`∆a_ty≥
(
a
);

1096 
∆©å
 *
°_ßm∂e
;

1098 
ty≥
) {

1099 
OVS_SAMPLE_ATTR_PROBABILITY
:

1100 i‡(
	`∆a_put
(
skb
, 
OVS_SAMPLE_ATTR_PROBABILITY
, (
u32
), 
	`∆a_d©a
(
a
)))

1101  -
EMSGSIZE
;

1103 
OVS_SAMPLE_ATTR_ACTIONS
:

1104 
°_ßm∂e
 = 
	`∆a_√°_°¨t
(
skb
, 
OVS_SAMPLE_ATTR_ACTIONS
);

1105 i‡(!
°_ßm∂e
)

1106  -
EMSGSIZE
;

1107 
îr
 = 
	`a˘i⁄s_to_©å
(
	`∆a_d©a
(
a
), 
	`∆a_Àn
◊), 
skb
);

1108 i‡(
îr
)

1109  
îr
;

1110 
	`∆a_√°_íd
(
skb
, 
°_ßm∂e
);

1115 
	`∆a_√°_íd
(
skb
, 
°¨t
);

1116  
îr
;

1119 
	`£t_a˘i⁄_to_©å
(c⁄° 
∆©å
 *
a
, 
sk_buff
 *
skb
)

1121 c⁄° 
∆©å
 *
ovs_key
 = 
	`∆a_d©a
(
a
);

1122 
key_ty≥
 = 
	`∆a_ty≥
(
ovs_key
);

1123 
∆©å
 *
°¨t
;

1124 
îr
;

1126 
key_ty≥
) {

1127 
OVS_KEY_ATTR_IPV4_TUNNEL
:

1128 
°¨t
 = 
	`∆a_√°_°¨t
(
skb
, 
OVS_ACTION_ATTR_SET
);

1129 i‡(!
°¨t
)

1130  -
EMSGSIZE
;

1132 
îr
 = 
	`ùv4_tun_to_∆©å
(
skb
, 
	`∆a_d©a
(
ovs_key
));

1133 i‡(
îr
)

1134  
îr
;

1135 
	`∆a_√°_íd
(
skb
, 
°¨t
);

1138 i‡(
	`∆a_put
(
skb
, 
OVS_ACTION_ATTR_SET
, 
	`∆a_Àn
(
a
), 
ovs_key
))

1139  -
EMSGSIZE
;

1146 
	`a˘i⁄s_to_©å
(c⁄° 
∆©å
 *
©å
, 
Àn
, 
sk_buff
 *
skb
)

1148 c⁄° 
∆©å
 *
a
;

1149 
ªm
, 
îr
;

1151 
	`∆a_f‹_óch_©å
(
a
, 
©å
, 
Àn
, 
ªm
) {

1152 
ty≥
 = 
	`∆a_ty≥
(
a
);

1154 
ty≥
) {

1155 
OVS_ACTION_ATTR_SET
:

1156 
îr
 = 
	`£t_a˘i⁄_to_©å
(
a
, 
skb
);

1157 i‡(
îr
)

1158  
îr
;

1161 
OVS_ACTION_ATTR_SAMPLE
:

1162 
îr
 = 
	`ßm∂e_a˘i⁄_to_©å
(
a
, 
skb
);

1163 i‡(
îr
)

1164  
îr
;

1167 i‡(
	`∆a_put
(
skb
, 
ty≥
, 
	`∆a_Àn
(
a
), 
	`∆a_d©a
(a)))

1168  -
EMSGSIZE
;

1177 
	`ovs_Êow_cmd_fûl_öfo
(
sw_Êow
 *
Êow
, 
d©≠©h
 *
dp
,

1178 
sk_buff
 *
skb
, 
u32
 
p‹tid
,

1179 
u32
 
£q
, u32 
Êags
, 
u8
 
cmd
)

1181 c⁄° 
skb_‹ig_Àn
 = 
skb
->
Àn
;

1182 c⁄° 
sw_Êow_a˘i⁄s
 *
sf_a˘s
;

1183 
∆©å
 *
°¨t
;

1184 
ovs_Êow_°©s
 
°©s
;

1185 
ovs_hódî
 *ovs_header;

1186 
∆©å
 *
∆a
;

1187 
u£d
;

1188 
u8
 
t˝_Êags
;

1189 
îr
;

1191 
sf_a˘s
 = 
	`rcu_dîe„ªn˚_¥Ÿe˘ed
(
Êow
->sf_acts,

1192 
	`lockdï_gíl_is_hñd
());

1194 
ovs_hódî
 = 
	`gílmsg_put
(
skb
, 
p‹tid
, 
£q
, &
dp_Êow_gíl_Ámûy
, 
Êags
, 
cmd
);

1195 i‡(!
ovs_hódî
)

1196  -
EMSGSIZE
;

1198 
ovs_hódî
->
dp_ifödex
 = 
	`gë_dpifödex
(
dp
);

1200 
∆a
 = 
	`∆a_√°_°¨t
(
skb
, 
OVS_FLOW_ATTR_KEY
);

1201 i‡(!
∆a
)

1202 
∆a_put_Áûuª
;

1203 
îr
 = 
	`ovs_Êow_to_∆©ås
(&
Êow
->
key
, 
skb
);

1204 i‡(
îr
)

1205 
îr‹
;

1206 
	`∆a_√°_íd
(
skb
, 
∆a
);

1208 
	`•ö_lock_bh
(&
Êow
->
lock
);

1209 
u£d
 = 
Êow
->used;

1210 
°©s
.
n_∑ckës
 = 
Êow
->
∑ckë_cou¡
;

1211 
°©s
.
n_byãs
 = 
Êow
->
byã_cou¡
;

1212 
t˝_Êags
 = 
Êow
->tcp_flags;

1213 
	`•ö_u∆ock_bh
(&
Êow
->
lock
);

1215 i‡(
u£d
 &&

1216 
	`∆a_put_u64
(
skb
, 
OVS_FLOW_ATTR_USED
, 
	`ovs_Êow_u£d_time
(
u£d
)))

1217 
∆a_put_Áûuª
;

1219 i‡(
°©s
.
n_∑ckës
 &&

1220 
	`∆a_put
(
skb
, 
OVS_FLOW_ATTR_STATS
,

1221 (
ovs_Êow_°©s
), &
°©s
))

1222 
∆a_put_Áûuª
;

1224 i‡(
t˝_Êags
 &&

1225 
	`∆a_put_u8
(
skb
, 
OVS_FLOW_ATTR_TCP_FLAGS
, 
t˝_Êags
))

1226 
∆a_put_Áûuª
;

1238 
°¨t
 = 
	`∆a_√°_°¨t
(
skb
, 
OVS_FLOW_ATTR_ACTIONS
);

1239 i‡(
°¨t
) {

1240 
îr
 = 
	`a˘i⁄s_to_©å
(
sf_a˘s
->
a˘i⁄s
, sf_a˘s->
a˘i⁄s_Àn
, 
skb
);

1241 i‡(!
îr
)

1242 
	`∆a_√°_íd
(
skb
, 
°¨t
);

1244 i‡(
skb_‹ig_Àn
)

1245 
îr‹
;

1247 
	`∆a_√°_ˇn˚l
(
skb
, 
°¨t
);

1249 } i‡(
skb_‹ig_Àn
)

1250 
∆a_put_Áûuª
;

1252  
	`gílmsg_íd
(
skb
, 
ovs_hódî
);

1254 
∆a_put_Áûuª
:

1255 
îr
 = -
EMSGSIZE
;

1256 
îr‹
:

1257 
	`gílmsg_ˇn˚l
(
skb
, 
ovs_hódî
);

1258  
îr
;

1261 
sk_buff
 *
	`ovs_Êow_cmd_Æloc_öfo
(
sw_Êow
 *
Êow
)

1263 c⁄° 
sw_Êow_a˘i⁄s
 *
sf_a˘s
;

1264 
Àn
;

1266 
sf_a˘s
 = 
	`rcu_dîe„ªn˚_¥Ÿe˘ed
(
Êow
->sf_acts,

1267 
	`lockdï_gíl_is_hñd
());

1270 
Àn
 = 
	`∆a_tŸÆ_size
(
FLOW_BUFSIZE
);

1272 
Àn
 +
	`∆a_tŸÆ_size
(
sf_a˘s
->
a˘i⁄s_Àn
);

1274 
Àn
 +
	`∆a_tŸÆ_size
((
ovs_Êow_°©s
));

1276 
Àn
 +
	`∆a_tŸÆ_size
(1);

1278 
Àn
 +
	`∆a_tŸÆ_size
(8);

1280 
Àn
 +
	`NLMSG_ALIGN
((
ovs_hódî
));

1282  
	`gílmsg_√w
(
Àn
, 
GFP_KERNEL
);

1285 
sk_buff
 *
	`ovs_Êow_cmd_buûd_öfo
(
sw_Êow
 *
Êow
,

1286 
d©≠©h
 *
dp
,

1287 
u32
 
p‹tid
, u32 
£q
, 
u8
 
cmd
)

1289 
sk_buff
 *
skb
;

1290 
ªtvÆ
;

1292 
skb
 = 
	`ovs_Êow_cmd_Æloc_öfo
(
Êow
);

1293 i‡(!
skb
)

1294  
	`ERR_PTR
(-
ENOMEM
);

1296 
ªtvÆ
 = 
	`ovs_Êow_cmd_fûl_öfo
(
Êow
, 
dp
, 
skb
, 
p‹tid
, 
£q
, 0, 
cmd
);

1297 
	`BUG_ON
(
ªtvÆ
 < 0);

1298  
skb
;

1301 
	`ovs_Êow_cmd_√w_‹_£t
(
sk_buff
 *
skb
, 
gíl_öfo
 *
öfo
)

1303 
∆©å
 **
a
 = 
öfo
->
©ås
;

1304 
ovs_hódî
 *ovs_hódî = 
öfo
->
u£rhdr
;

1305 
sw_Êow_key
 
key
;

1306 
sw_Êow
 *
Êow
;

1307 
sk_buff
 *
ª∂y
;

1308 
d©≠©h
 *
dp
;

1309 
Êow_èbÀ
 *
èbÀ
;

1310 
sw_Êow_a˘i⁄s
 *
a˘s
 = 
NULL
;

1311 
îr‹
;

1312 
key_Àn
;

1315 
îr‹
 = -
EINVAL
;

1316 i‡(!
a
[
OVS_FLOW_ATTR_KEY
])

1317 
îr‹
;

1318 
îr‹
 = 
	`ovs_Êow_‰om_∆©ås
(&
key
, &
key_Àn
, 
a
[
OVS_FLOW_ATTR_KEY
]);

1319 i‡(
îr‹
)

1320 
îr‹
;

1323 i‡(
a
[
OVS_FLOW_ATTR_ACTIONS
]) {

1324 
a˘s
 = 
	`ovs_Êow_a˘i⁄s_Æloc
(
	`∆a_Àn
(
a
[
OVS_FLOW_ATTR_ACTIONS
]));

1325 
îr‹
 = 
	`PTR_ERR
(
a˘s
);

1326 i‡(
	`IS_ERR
(
a˘s
))

1327 
îr‹
;

1329 
îr‹
 = 
	`vÆid©e_™d_c›y_a˘i⁄s
(
a
[
OVS_FLOW_ATTR_ACTIONS
], &
key
, 0, &
a˘s
);

1330 i‡(
îr‹
)

1331 
îr_k‰ì
;

1332 } i‡(
öfo
->
gílhdr
->
cmd
 =
OVS_FLOW_CMD_NEW
) {

1333 
îr‹
 = -
EINVAL
;

1334 
îr‹
;

1337 
dp
 = 
	`gë_dp
(
	`sock_√t
(
skb
->
sk
), 
ovs_hódî
->
dp_ifödex
);

1338 
îr‹
 = -
ENODEV
;

1339 i‡(!
dp
)

1340 
îr_k‰ì
;

1342 
èbÀ
 = 
	`gíl_dîe„ªn˚
(
dp
->table);

1343 
Êow
 = 
	`ovs_Êow_tbl_lookup
(
èbÀ
, &
key
, 
key_Àn
);

1344 i‡(!
Êow
) {

1346 
îr‹
 = -
ENOENT
;

1347 i‡(
öfo
->
gílhdr
->
cmd
 =
OVS_FLOW_CMD_SET
)

1348 
îr_k‰ì
;

1351 i‡(
	`ovs_Êow_tbl_√ed_to_ex∑nd
(
èbÀ
)) {

1352 
Êow_èbÀ
 *
√w_èbÀ
;

1354 
√w_èbÀ
 = 
	`ovs_Êow_tbl_ex∑nd
(
èbÀ
);

1355 i‡(!
	`IS_ERR
(
√w_èbÀ
)) {

1356 
	`rcu_assign_poöãr
(
dp
->
èbÀ
, 
√w_èbÀ
);

1357 
	`ovs_Êow_tbl_de„ºed_de°roy
(
èbÀ
);

1358 
èbÀ
 = 
	`gíl_dîe„ªn˚
(
dp
->table);

1363 
Êow
 = 
	`ovs_Êow_Æloc
();

1364 i‡(
	`IS_ERR
(
Êow
)) {

1365 
îr‹
 = 
	`PTR_ERR
(
Êow
);

1366 
îr_k‰ì
;

1368 
	`˛ór_°©s
(
Êow
);

1370 
	`rcu_assign_poöãr
(
Êow
->
sf_a˘s
, 
a˘s
);

1373 
	`ovs_Êow_tbl_ö£π
(
èbÀ
, 
Êow
, &
key
, 
key_Àn
);

1375 
ª∂y
 = 
	`ovs_Êow_cmd_buûd_öfo
(
Êow
, 
dp
, 
öfo
->
¢d_p‹tid
,

1376 
öfo
->
¢d_£q
,

1377 
OVS_FLOW_CMD_NEW
);

1380 
sw_Êow_a˘i⁄s
 *
ﬁd_a˘s
;

1388 
îr‹
 = -
EEXIST
;

1389 i‡(
öfo
->
gílhdr
->
cmd
 =
OVS_FLOW_CMD_NEW
 &&

1390 
öfo
->
∆hdr
->
∆msg_Êags
 & (
NLM_F_CREATE
 | 
NLM_F_EXCL
))

1391 
îr_k‰ì
;

1394 
ﬁd_a˘s
 = 
	`rcu_dîe„ªn˚_¥Ÿe˘ed
(
Êow
->
sf_a˘s
,

1395 
	`lockdï_gíl_is_hñd
());

1396 
	`rcu_assign_poöãr
(
Êow
->
sf_a˘s
, 
a˘s
);

1397 
	`ovs_Êow_de„ºed_‰ì_a˘s
(
ﬁd_a˘s
);

1399 
ª∂y
 = 
	`ovs_Êow_cmd_buûd_öfo
(
Êow
, 
dp
, 
öfo
->
¢d_p‹tid
,

1400 
öfo
->
¢d_£q
, 
OVS_FLOW_CMD_NEW
);

1403 i‡(
a
[
OVS_FLOW_ATTR_CLEAR
]) {

1404 
	`•ö_lock_bh
(&
Êow
->
lock
);

1405 
	`˛ór_°©s
(
Êow
);

1406 
	`•ö_u∆ock_bh
(&
Êow
->
lock
);

1410 i‡(!
	`IS_ERR
(
ª∂y
))

1411 
	`gíl_nŸify
(
ª∂y
, 
	`gíl_öfo_√t
(
öfo
), info->
¢d_p‹tid
,

1412 
ovs_dp_Êow_mu…iˇ°_group
.
id
, 
öfo
->
∆hdr
,

1413 
GFP_KERNEL
);

1415 
	`√éök_£t_îr
(
	`GENL_SOCK
(
	`sock_√t
(
skb
->
sk
)), 0,

1416 
ovs_dp_Êow_mu…iˇ°_group
.
id
, 
	`PTR_ERR
(
ª∂y
));

1419 
îr_k‰ì
:

1420 
	`k‰ì
(
a˘s
);

1421 
îr‹
:

1422  
îr‹
;

1425 
	`ovs_Êow_cmd_gë
(
sk_buff
 *
skb
, 
gíl_öfo
 *
öfo
)

1427 
∆©å
 **
a
 = 
öfo
->
©ås
;

1428 
ovs_hódî
 *ovs_hódî = 
öfo
->
u£rhdr
;

1429 
sw_Êow_key
 
key
;

1430 
sk_buff
 *
ª∂y
;

1431 
sw_Êow
 *
Êow
;

1432 
d©≠©h
 *
dp
;

1433 
Êow_èbÀ
 *
èbÀ
;

1434 
îr
;

1435 
key_Àn
;

1437 i‡(!
a
[
OVS_FLOW_ATTR_KEY
])

1438  -
EINVAL
;

1439 
îr
 = 
	`ovs_Êow_‰om_∆©ås
(&
key
, &
key_Àn
, 
a
[
OVS_FLOW_ATTR_KEY
]);

1440 i‡(
îr
)

1441  
îr
;

1443 
dp
 = 
	`gë_dp
(
	`sock_√t
(
skb
->
sk
), 
ovs_hódî
->
dp_ifödex
);

1444 i‡(!
dp
)

1445  -
ENODEV
;

1447 
èbÀ
 = 
	`gíl_dîe„ªn˚
(
dp
->table);

1448 
Êow
 = 
	`ovs_Êow_tbl_lookup
(
èbÀ
, &
key
, 
key_Àn
);

1449 i‡(!
Êow
)

1450  -
ENOENT
;

1452 
ª∂y
 = 
	`ovs_Êow_cmd_buûd_öfo
(
Êow
, 
dp
, 
öfo
->
¢d_p‹tid
,

1453 
öfo
->
¢d_£q
, 
OVS_FLOW_CMD_NEW
);

1454 i‡(
	`IS_ERR
(
ª∂y
))

1455  
	`PTR_ERR
(
ª∂y
);

1457  
	`gílmsg_ª∂y
(
ª∂y
, 
öfo
);

1460 
	`ovs_Êow_cmd_dñ
(
sk_buff
 *
skb
, 
gíl_öfo
 *
öfo
)

1462 
∆©å
 **
a
 = 
öfo
->
©ås
;

1463 
ovs_hódî
 *ovs_hódî = 
öfo
->
u£rhdr
;

1464 
sw_Êow_key
 
key
;

1465 
sk_buff
 *
ª∂y
;

1466 
sw_Êow
 *
Êow
;

1467 
d©≠©h
 *
dp
;

1468 
Êow_èbÀ
 *
èbÀ
;

1469 
îr
;

1470 
key_Àn
;

1472 
dp
 = 
	`gë_dp
(
	`sock_√t
(
skb
->
sk
), 
ovs_hódî
->
dp_ifödex
);

1473 i‡(!
dp
)

1474  -
ENODEV
;

1476 i‡(!
a
[
OVS_FLOW_ATTR_KEY
])

1477  
	`Êush_Êows
(
dp
);

1479 
îr
 = 
	`ovs_Êow_‰om_∆©ås
(&
key
, &
key_Àn
, 
a
[
OVS_FLOW_ATTR_KEY
]);

1480 i‡(
îr
)

1481  
îr
;

1483 
èbÀ
 = 
	`gíl_dîe„ªn˚
(
dp
->table);

1484 
Êow
 = 
	`ovs_Êow_tbl_lookup
(
èbÀ
, &
key
, 
key_Àn
);

1485 i‡(!
Êow
)

1486  -
ENOENT
;

1488 
ª∂y
 = 
	`ovs_Êow_cmd_Æloc_öfo
(
Êow
);

1489 i‡(!
ª∂y
)

1490  -
ENOMEM
;

1492 
	`ovs_Êow_tbl_ªmove
(
èbÀ
, 
Êow
);

1494 
îr
 = 
	`ovs_Êow_cmd_fûl_öfo
(
Êow
, 
dp
, 
ª∂y
, 
öfo
->
¢d_p‹tid
,

1495 
öfo
->
¢d_£q
, 0, 
OVS_FLOW_CMD_DEL
);

1496 
	`BUG_ON
(
îr
 < 0);

1498 
	`ovs_Êow_de„ºed_‰ì
(
Êow
);

1500 
	`gíl_nŸify
(
ª∂y
, 
	`gíl_öfo_√t
(
öfo
), info->
¢d_p‹tid
,

1501 
ovs_dp_Êow_mu…iˇ°_group
.
id
, 
öfo
->
∆hdr
, 
GFP_KERNEL
);

1505 
	`ovs_Êow_cmd_dump
(
sk_buff
 *
skb
, 
√éök_ˇŒback
 *
cb
)

1507 
ovs_hódî
 *ovs_hódî = 
	`gílmsg_d©a
(
	`∆msg_d©a
(
cb
->
∆h
));

1508 
d©≠©h
 *
dp
;

1509 
Êow_èbÀ
 *
èbÀ
;

1511 
dp
 = 
	`gë_dp
(
	`sock_√t
(
skb
->
sk
), 
ovs_hódî
->
dp_ifödex
);

1512 i‡(!
dp
)

1513  -
ENODEV
;

1515 
èbÀ
 = 
	`gíl_dîe„ªn˚
(
dp
->table);

1518 
sw_Êow
 *
Êow
;

1519 
u32
 
buckë
, 
obj
;

1521 
buckë
 = 
cb
->
¨gs
[0];

1522 
obj
 = 
cb
->
¨gs
[1];

1523 
Êow
 = 
	`ovs_Êow_tbl_√xt
(
èbÀ
, &
buckë
, &
obj
);

1524 i‡(!
Êow
)

1527 i‡(
	`ovs_Êow_cmd_fûl_öfo
(
Êow
, 
dp
, 
skb
,

1528 
	`NETLINK_CB
(
cb
->
skb
).
p‹tid
,

1529 
cb
->
∆h
->
∆msg_£q
, 
NLM_F_MULTI
,

1530 
OVS_FLOW_CMD_NEW
) < 0)

1533 
cb
->
¨gs
[0] = 
buckë
;

1534 
cb
->
¨gs
[1] = 
obj
;

1536  
skb
->
Àn
;

1539 
gíl_›s
 
dp_Êow_gíl_›s
[] = {

1540 { .
cmd
 = 
OVS_FLOW_CMD_NEW
,

1541 .
Êags
 = 
GENL_ADMIN_PERM
,

1542 .
pﬁicy
 = 
Êow_pﬁicy
,

1543 .
doô
 = 
ovs_Êow_cmd_√w_‹_£t


1545 { .
cmd
 = 
OVS_FLOW_CMD_DEL
,

1546 .
Êags
 = 
GENL_ADMIN_PERM
,

1547 .
pﬁicy
 = 
Êow_pﬁicy
,

1548 .
doô
 = 
ovs_Êow_cmd_dñ


1550 { .
cmd
 = 
OVS_FLOW_CMD_GET
,

1551 .
Êags
 = 0,

1552 .
pﬁicy
 = 
Êow_pﬁicy
,

1553 .
doô
 = 
ovs_Êow_cmd_gë
,

1554 .
dumpô
 = 
ovs_Êow_cmd_dump


1556 { .
cmd
 = 
OVS_FLOW_CMD_SET
,

1557 .
Êags
 = 
GENL_ADMIN_PERM
,

1558 .
pﬁicy
 = 
Êow_pﬁicy
,

1559 .
doô
 = 
ovs_Êow_cmd_√w_‹_£t
,

1563 c⁄° 
∆a_pﬁicy
 
d©≠©h_pﬁicy
[
OVS_DP_ATTR_MAX
 + 1] = {

1564 #ifde‡
HAVE_NLA_NUL_STRING


1565 [
OVS_DP_ATTR_NAME
] = { .
ty≥
 = 
NLA_NUL_STRING
, .
Àn
 = 
IFNAMSIZ
 - 1 },

1567 [
OVS_DP_ATTR_UPCALL_PID
] = { .
ty≥
 = 
NLA_U32
 },

1570 
gíl_Ámûy
 
dp_d©≠©h_gíl_Ámûy
 = {

1571 .
id
 = 
GENL_ID_GENERATE
,

1572 .
hdrsize
 = (
ovs_hódî
),

1573 .
«me
 = 
OVS_DATAPATH_FAMILY
,

1574 .
vîsi⁄
 = 
OVS_DATAPATH_VERSION
,

1575 .
max©å
 = 
OVS_DP_ATTR_MAX
,

1576 
SET_NETNSOK


1579 
gíl_mu…iˇ°_group
 
ovs_dp_d©≠©h_mu…iˇ°_group
 = {

1580 .
«me
 = 
OVS_DATAPATH_MCGROUP


1583 
	`ovs_dp_cmd_fûl_öfo
(
d©≠©h
 *
dp
, 
sk_buff
 *
skb
,

1584 
u32
 
p‹tid
, u32 
£q
, u32 
Êags
, 
u8
 
cmd
)

1586 
ovs_hódî
 *ovs_header;

1587 
ovs_dp_°©s
 
dp_°©s
;

1588 
îr
;

1590 
ovs_hódî
 = 
	`gílmsg_put
(
skb
, 
p‹tid
, 
£q
, &
dp_d©≠©h_gíl_Ámûy
,

1591 
Êags
, 
cmd
);

1592 i‡(!
ovs_hódî
)

1593 
îr‹
;

1595 
ovs_hódî
->
dp_ifödex
 = 
	`gë_dpifödex
(
dp
);

1597 
	`rcu_ªad_lock
();

1598 
îr
 = 
	`∆a_put_°rög
(
skb
, 
OVS_DP_ATTR_NAME
, 
	`ovs_dp_«me
(
dp
));

1599 
	`rcu_ªad_u∆ock
();

1600 i‡(
îr
)

1601 
∆a_put_Áûuª
;

1603 
	`gë_dp_°©s
(
dp
, &
dp_°©s
);

1604 i‡(
	`∆a_put
(
skb
, 
OVS_DP_ATTR_STATS
, (
ovs_dp_°©s
), &
dp_°©s
))

1605 
∆a_put_Áûuª
;

1607  
	`gílmsg_íd
(
skb
, 
ovs_hódî
);

1609 
∆a_put_Áûuª
:

1610 
	`gílmsg_ˇn˚l
(
skb
, 
ovs_hódî
);

1611 
îr‹
:

1612  -
EMSGSIZE
;

1615 
sk_buff
 *
	`ovs_dp_cmd_buûd_öfo
(
d©≠©h
 *
dp
, 
u32
 
p‹tid
,

1616 
u32
 
£q
, 
u8
 
cmd
)

1618 
sk_buff
 *
skb
;

1619 
ªtvÆ
;

1621 
skb
 = 
	`∆msg_√w
(
NLMSG_DEFAULT_SIZE
, 
GFP_KERNEL
);

1622 i‡(!
skb
)

1623  
	`ERR_PTR
(-
ENOMEM
);

1625 
ªtvÆ
 = 
	`ovs_dp_cmd_fûl_öfo
(
dp
, 
skb
, 
p‹tid
, 
£q
, 0, 
cmd
);

1626 i‡(
ªtvÆ
 < 0) {

1627 
	`k‰ì_skb
(
skb
);

1628  
	`ERR_PTR
(
ªtvÆ
);

1630  
skb
;

1633 
	`ovs_dp_cmd_vÆid©e
(
∆©å
 *
a
[
OVS_DP_ATTR_MAX
 + 1])

1635  
	`CHECK_NUL_STRING
(
a
[
OVS_DP_ATTR_NAME
], 
IFNAMSIZ
 - 1);

1639 
d©≠©h
 *
	`lookup_d©≠©h
(
√t
 *net,

1640 
ovs_hódî
 *ovs_header,

1641 
∆©å
 *
a
[
OVS_DP_ATTR_MAX
 + 1])

1643 
d©≠©h
 *
dp
;

1645 i‡(!
a
[
OVS_DP_ATTR_NAME
])

1646 
dp
 = 
	`gë_dp
(
√t
, 
ovs_hódî
->
dp_ifödex
);

1648 
vp‹t
 *vport;

1650 
	`rcu_ªad_lock
();

1651 
vp‹t
 = 
	`ovs_vp‹t_loˇã
(
√t
, 
	`∆a_d©a
(
a
[
OVS_DP_ATTR_NAME
]));

1652 
dp
 = 
vp‹t
 && vp‹t->
p‹t_no
 =
OVSP_LOCAL
 ? vp‹t->d∞: 
NULL
;

1653 
	`rcu_ªad_u∆ock
();

1655  
dp
 ? d∞: 
	`ERR_PTR
(-
ENODEV
);

1658 
	`ovs_dp_cmd_√w
(
sk_buff
 *
skb
, 
gíl_öfo
 *
öfo
)

1660 
∆©å
 **
a
 = 
öfo
->
©ås
;

1661 
vp‹t_∑rms
 
∑rms
;

1662 
sk_buff
 *
ª∂y
;

1663 
d©≠©h
 *
dp
;

1664 
vp‹t
 *vport;

1665 
ovs_√t
 *ovs_net;

1666 
îr
, 
i
;

1668 
îr
 = -
EINVAL
;

1669 i‡(!
a
[
OVS_DP_ATTR_NAME
] || !a[
OVS_DP_ATTR_UPCALL_PID
])

1670 
îr
;

1672 
îr
 = 
	`ovs_dp_cmd_vÆid©e
(
a
);

1673 i‡(
îr
)

1674 
îr
;

1676 
	`π∆_lock
();

1678 
îr
 = -
ENOMEM
;

1679 
dp
 = 
	`kzÆloc
((*dp), 
GFP_KERNEL
);

1680 i‡(
dp
 =
NULL
)

1681 
îr_u∆ock_π∆
;

1685 
dp
->
ifobj
.
k£t
 = 
NULL
;

1686 
	`kobje˘_öô
(&
dp
->
ifobj
, &
dp_kty≥
);

1688 
	`ovs_dp_£t_√t
(
dp
, 
	`hﬁd_√t
(
	`sock_√t
(
skb
->
sk
)));

1691 
îr
 = -
ENOMEM
;

1692 
	`rcu_assign_poöãr
(
dp
->
èbÀ
, 
	`ovs_Êow_tbl_Æloc
(
TBL_MIN_BUCKETS
));

1693 i‡(!
dp
->
èbÀ
)

1694 
îr_‰ì_dp
;

1696 
dp
->
°©s_≥r˝u
 = 
	`Æloc_≥r˝u
(
dp_°©s_≥r˝u
);

1697 i‡(!
dp
->
°©s_≥r˝u
) {

1698 
îr
 = -
ENOMEM
;

1699 
îr_de°roy_èbÀ
;

1702 
dp
->
p‹ts
 = 
	`kmÆloc
(
DP_VPORT_HASH_BUCKETS
 * (
hli°_hód
),

1703 
GFP_KERNEL
);

1704 i‡(!
dp
->
p‹ts
) {

1705 
îr
 = -
ENOMEM
;

1706 
îr_de°roy_≥r˝u
;

1709 
i
 = 0; i < 
DP_VPORT_HASH_BUCKETS
; i++)

1710 
	`INIT_HLIST_HEAD
(&
dp
->
p‹ts
[
i
]);

1713 
∑rms
.
«me
 = 
	`∆a_d©a
(
a
[
OVS_DP_ATTR_NAME
]);

1714 
∑rms
.
ty≥
 = 
OVS_VPORT_TYPE_INTERNAL
;

1715 
∑rms
.
›ti⁄s
 = 
NULL
;

1716 
∑rms
.
dp
 = dp;

1717 
∑rms
.
p‹t_no
 = 
OVSP_LOCAL
;

1718 
∑rms
.
upˇŒ_p‹tid
 = 
	`∆a_gë_u32
(
a
[
OVS_DP_ATTR_UPCALL_PID
]);

1720 
vp‹t
 = 
	`√w_vp‹t
(&
∑rms
);

1721 i‡(
	`IS_ERR
(
vp‹t
)) {

1722 
îr
 = 
	`PTR_ERR
(
vp‹t
);

1723 i‡(
îr
 =-
EBUSY
)

1724 
îr
 = -
EEXIST
;

1726 
îr_de°roy_p‹ts_¨øy
;

1729 
ª∂y
 = 
	`ovs_dp_cmd_buûd_öfo
(
dp
, 
öfo
->
¢d_p‹tid
,

1730 
öfo
->
¢d_£q
, 
OVS_DP_CMD_NEW
);

1731 
îr
 = 
	`PTR_ERR
(
ª∂y
);

1732 i‡(
	`IS_ERR
(
ª∂y
))

1733 
îr_de°roy_loˇl_p‹t
;

1735 
ovs_√t
 = 
	`√t_gíîic
(
	`ovs_dp_gë_√t
(
dp
), 
ovs_√t_id
);

1736 
	`li°_add_èû
(&
dp
->
li°_node
, &
ovs_√t
->
dps
);

1737 
	`ovs_dp_sysfs_add_dp
(
dp
);

1740 
	`¥ötk
(
KERN_INFO
 "öô f‹ NC, sizê%d\n", 
MAX_CB_SIZE
);

1741 
	`ovs_liu_buf„r_öô
(&(
dp
->
buf„r
));

1743 
	`öôMulDivTab
("/home/lsch/mytest/openvswitch-1.9.0/datapath/muldiv.tab");

1744 
i
 = 0; i < 
MAX_LIU_BUFFER
; i++)

1745 
	`ovs__liu_buf„r_öô
(&(
dp
->
buf„r
.
buff
[
i
]), 
MAX_INPORT_NUM
, 
MAX_PACKET_NUM
);

1747 
	`π∆_u∆ock
();

1749 
	`gíl_nŸify
(
ª∂y
, 
	`gíl_öfo_√t
(
öfo
), info->
¢d_p‹tid
,

1750 
ovs_dp_d©≠©h_mu…iˇ°_group
.
id
, 
öfo
->
∆hdr
,

1751 
GFP_KERNEL
);

1754 
îr_de°roy_loˇl_p‹t
:

1755 
	`ovs_dp_dëach_p‹t
(
	`ovs_vp‹t_π∆
(
dp
, 
OVSP_LOCAL
));

1756 
îr_de°roy_p‹ts_¨øy
:

1757 
	`k‰ì
(
dp
->
p‹ts
);

1758 
îr_de°roy_≥r˝u
:

1759 
	`‰ì_≥r˝u
(
dp
->
°©s_≥r˝u
);

1760 
îr_de°roy_èbÀ
:

1761 
	`ovs_Êow_tbl_de°roy
(
	`gíl_dîe„ªn˚
(
dp
->
èbÀ
));

1762 
îr_‰ì_dp
:

1763 
	`ªÀa£_√t
(
	`ovs_dp_gë_√t
(
dp
));

1764 
	`k‰ì
(
dp
);

1765 
îr_u∆ock_π∆
:

1766 
	`π∆_u∆ock
();

1767 
îr
:

1768  
îr
;

1772 
	`__dp_de°roy
(
d©≠©h
 *
dp
)

1774 
i
;

1776 
	`π∆_lock
();

1778 
i
 = 0; i < 
DP_VPORT_HASH_BUCKETS
; i++) {

1779 
vp‹t
 *vport;

1780 
hli°_node
 *
node
, *
n
;

1782 
	`hli°_f‹_óch_íåy_ß„
(
vp‹t
, 
node
, 
n
, &
dp
->
p‹ts
[
i
], 
dp_hash_node
)

1783 i‡(
vp‹t
->
p‹t_no
 !
OVSP_LOCAL
)

1784 
	`ovs_dp_dëach_p‹t
(
vp‹t
);

1789 
i
 = 0; i < 
MAX_LIU_BUFFER
; i++) {

1790 
	`ovs__liu_buf„r_‰ì
(&(
dp
->
buf„r
.
buff
[
i
]));

1793 
	`ovs_dp_sysfs_dñ_dp
(
dp
);

1794 
	`li°_dñ
(&
dp
->
li°_node
);

1795 
	`ovs_dp_dëach_p‹t
(
	`ovs_vp‹t_π∆
(
dp
, 
OVSP_LOCAL
));

1802 
	`π∆_u∆ock
();

1804 
	`ˇŒ_rcu
(&
dp
->
rcu
, 
de°roy_dp_rcu
);

1807 
	`ovs_dp_cmd_dñ
(
sk_buff
 *
skb
, 
gíl_öfo
 *
öfo
)

1809 
sk_buff
 *
ª∂y
;

1810 
d©≠©h
 *
dp
;

1811 
îr
;

1813 
îr
 = 
	`ovs_dp_cmd_vÆid©e
(
öfo
->
©ås
);

1814 i‡(
îr
)

1815  
îr
;

1817 
dp
 = 
	`lookup_d©≠©h
(
	`sock_√t
(
skb
->
sk
), 
öfo
->
u£rhdr
, info->
©ås
);

1818 
îr
 = 
	`PTR_ERR
(
dp
);

1819 i‡(
	`IS_ERR
(
dp
))

1820  
îr
;

1822 
ª∂y
 = 
	`ovs_dp_cmd_buûd_öfo
(
dp
, 
öfo
->
¢d_p‹tid
,

1823 
öfo
->
¢d_£q
, 
OVS_DP_CMD_DEL
);

1824 
îr
 = 
	`PTR_ERR
(
ª∂y
);

1825 i‡(
	`IS_ERR
(
ª∂y
))

1826  
îr
;

1828 
	`__dp_de°roy
(
dp
);

1830 
	`gíl_nŸify
(
ª∂y
, 
	`gíl_öfo_√t
(
öfo
), info->
¢d_p‹tid
,

1831 
ovs_dp_d©≠©h_mu…iˇ°_group
.
id
, 
öfo
->
∆hdr
,

1832 
GFP_KERNEL
);

1837 
	`ovs_dp_cmd_£t
(
sk_buff
 *
skb
, 
gíl_öfo
 *
öfo
)

1839 
sk_buff
 *
ª∂y
;

1840 
d©≠©h
 *
dp
;

1841 
îr
;

1843 
îr
 = 
	`ovs_dp_cmd_vÆid©e
(
öfo
->
©ås
);

1844 i‡(
îr
)

1845  
îr
;

1847 
dp
 = 
	`lookup_d©≠©h
(
	`sock_√t
(
skb
->
sk
), 
öfo
->
u£rhdr
, info->
©ås
);

1848 i‡(
	`IS_ERR
(
dp
))

1849  
	`PTR_ERR
(
dp
);

1851 
ª∂y
 = 
	`ovs_dp_cmd_buûd_öfo
(
dp
, 
öfo
->
¢d_p‹tid
,

1852 
öfo
->
¢d_£q
, 
OVS_DP_CMD_NEW
);

1853 i‡(
	`IS_ERR
(
ª∂y
)) {

1854 
îr
 = 
	`PTR_ERR
(
ª∂y
);

1855 
	`√éök_£t_îr
(
	`GENL_SOCK
(
	`sock_√t
(
skb
->
sk
)), 0,

1856 
ovs_dp_d©≠©h_mu…iˇ°_group
.
id
, 
îr
);

1860 
	`gíl_nŸify
(
ª∂y
, 
	`gíl_öfo_√t
(
öfo
), info->
¢d_p‹tid
,

1861 
ovs_dp_d©≠©h_mu…iˇ°_group
.
id
, 
öfo
->
∆hdr
,

1862 
GFP_KERNEL
);

1867 
	`ovs_dp_cmd_gë
(
sk_buff
 *
skb
, 
gíl_öfo
 *
öfo
)

1869 
sk_buff
 *
ª∂y
;

1870 
d©≠©h
 *
dp
;

1871 
îr
;

1873 
îr
 = 
	`ovs_dp_cmd_vÆid©e
(
öfo
->
©ås
);

1874 i‡(
îr
)

1875  
îr
;

1877 
dp
 = 
	`lookup_d©≠©h
(
	`sock_√t
(
skb
->
sk
), 
öfo
->
u£rhdr
, info->
©ås
);

1878 i‡(
	`IS_ERR
(
dp
))

1879  
	`PTR_ERR
(
dp
);

1881 
ª∂y
 = 
	`ovs_dp_cmd_buûd_öfo
(
dp
, 
öfo
->
¢d_p‹tid
,

1882 
öfo
->
¢d_£q
, 
OVS_DP_CMD_NEW
);

1883 i‡(
	`IS_ERR
(
ª∂y
))

1884  
	`PTR_ERR
(
ª∂y
);

1886  
	`gílmsg_ª∂y
(
ª∂y
, 
öfo
);

1889 
	`ovs_dp_cmd_dump
(
sk_buff
 *
skb
, 
√éök_ˇŒback
 *
cb
)

1891 
ovs_√t
 *ovs_√à
	`√t_gíîic
(
	`sock_√t
(
skb
->
sk
), 
ovs_√t_id
);

1892 
d©≠©h
 *
dp
;

1893 
skù
 = 
cb
->
¨gs
[0];

1894 
i
 = 0;

1896 
	`li°_f‹_óch_íåy
(
dp
, &
ovs_√t
->
dps
, 
li°_node
) {

1897 i‡(
i
 >
skù
 &&

1898 
	`ovs_dp_cmd_fûl_öfo
(
dp
, 
skb
, 
	`NETLINK_CB
(
cb
->skb).
p‹tid
,

1899 
cb
->
∆h
->
∆msg_£q
, 
NLM_F_MULTI
,

1900 
OVS_DP_CMD_NEW
) < 0)

1902 
i
++;

1905 
cb
->
¨gs
[0] = 
i
;

1907  
skb
->
Àn
;

1910 
gíl_›s
 
dp_d©≠©h_gíl_›s
[] = {

1911 { .
cmd
 = 
OVS_DP_CMD_NEW
,

1912 .
Êags
 = 
GENL_ADMIN_PERM
,

1913 .
pﬁicy
 = 
d©≠©h_pﬁicy
,

1914 .
doô
 = 
ovs_dp_cmd_√w


1916 { .
cmd
 = 
OVS_DP_CMD_DEL
,

1917 .
Êags
 = 
GENL_ADMIN_PERM
,

1918 .
pﬁicy
 = 
d©≠©h_pﬁicy
,

1919 .
doô
 = 
ovs_dp_cmd_dñ


1921 { .
cmd
 = 
OVS_DP_CMD_GET
,

1922 .
Êags
 = 0,

1923 .
pﬁicy
 = 
d©≠©h_pﬁicy
,

1924 .
doô
 = 
ovs_dp_cmd_gë
,

1925 .
dumpô
 = 
ovs_dp_cmd_dump


1927 { .
cmd
 = 
OVS_DP_CMD_SET
,

1928 .
Êags
 = 
GENL_ADMIN_PERM
,

1929 .
pﬁicy
 = 
d©≠©h_pﬁicy
,

1930 .
doô
 = 
ovs_dp_cmd_£t
,

1934 c⁄° 
∆a_pﬁicy
 
vp‹t_pﬁicy
[
OVS_VPORT_ATTR_MAX
 + 1] = {

1935 #ifde‡
HAVE_NLA_NUL_STRING


1936 [
OVS_VPORT_ATTR_NAME
] = { .
ty≥
 = 
NLA_NUL_STRING
, .
Àn
 = 
IFNAMSIZ
 - 1 },

1937 [
OVS_VPORT_ATTR_STATS
] = { .
Àn
 = (
ovs_vp‹t_°©s
) },

1938 [
OVS_VPORT_ATTR_ADDRESS
] = { .
Àn
 = 
ETH_ALEN
 },

1940 [
OVS_VPORT_ATTR_STATS
] = { .
möÀn
 = (
ovs_vp‹t_°©s
) },

1941 [
OVS_VPORT_ATTR_ADDRESS
] = { .
möÀn
 = 
ETH_ALEN
 },

1943 [
OVS_VPORT_ATTR_PORT_NO
] = { .
ty≥
 = 
NLA_U32
 },

1944 [
OVS_VPORT_ATTR_TYPE
] = { .
ty≥
 = 
NLA_U32
 },

1945 [
OVS_VPORT_ATTR_UPCALL_PID
] = { .
ty≥
 = 
NLA_U32
 },

1946 [
OVS_VPORT_ATTR_OPTIONS
] = { .
ty≥
 = 
NLA_NESTED
 },

1949 
gíl_Ámûy
 
dp_vp‹t_gíl_Ámûy
 = {

1950 .
id
 = 
GENL_ID_GENERATE
,

1951 .
hdrsize
 = (
ovs_hódî
),

1952 .
«me
 = 
OVS_VPORT_FAMILY
,

1953 .
vîsi⁄
 = 
OVS_VPORT_VERSION
,

1954 .
max©å
 = 
OVS_VPORT_ATTR_MAX
,

1955 
SET_NETNSOK


1958 
gíl_mu…iˇ°_group
 
ovs_dp_vp‹t_mu…iˇ°_group
 = {

1959 .
«me
 = 
OVS_VPORT_MCGROUP


1963 
	`ovs_vp‹t_cmd_fûl_öfo
(
vp‹t
 *vp‹t, 
sk_buff
 *
skb
,

1964 
u32
 
p‹tid
, u32 
£q
, u32 
Êags
, 
u8
 
cmd
)

1966 
ovs_hódî
 *ovs_header;

1967 
ovs_vp‹t_°©s
 
vp‹t_°©s
;

1968 
îr
;

1970 
ovs_hódî
 = 
	`gílmsg_put
(
skb
, 
p‹tid
, 
£q
, &
dp_vp‹t_gíl_Ámûy
,

1971 
Êags
, 
cmd
);

1972 i‡(!
ovs_hódî
)

1973  -
EMSGSIZE
;

1975 
ovs_hódî
->
dp_ifödex
 = 
	`gë_dpifödex
(
vp‹t
->
dp
);

1977 i‡(
	`∆a_put_u32
(
skb
, 
OVS_VPORT_ATTR_PORT_NO
, 
vp‹t
->
p‹t_no
) ||

1978 
	`∆a_put_u32
(
skb
, 
OVS_VPORT_ATTR_TYPE
, 
vp‹t
->
›s
->
ty≥
) ||

1979 
	`∆a_put_°rög
(
skb
, 
OVS_VPORT_ATTR_NAME
, 
vp‹t
->
›s
->
	`gë_«me
(vport)) ||

1980 
	`∆a_put_u32
(
skb
, 
OVS_VPORT_ATTR_UPCALL_PID
, 
vp‹t
->
upˇŒ_p‹tid
))

1981 
∆a_put_Áûuª
;

1983 
	`ovs_vp‹t_gë_°©s
(
vp‹t
, &
vp‹t_°©s
);

1984 i‡(
	`∆a_put
(
skb
, 
OVS_VPORT_ATTR_STATS
, (
ovs_vp‹t_°©s
),

1985 &
vp‹t_°©s
))

1986 
∆a_put_Áûuª
;

1988 i‡(
	`∆a_put
(
skb
, 
OVS_VPORT_ATTR_ADDRESS
, 
ETH_ALEN
,

1989 
vp‹t
->
›s
->
	`gë_addr
(vport)))

1990 
∆a_put_Áûuª
;

1992 
îr
 = 
	`ovs_vp‹t_gë_›ti⁄s
(
vp‹t
, 
skb
);

1993 i‡(
îr
 =-
EMSGSIZE
)

1994 
îr‹
;

1996  
	`gílmsg_íd
(
skb
, 
ovs_hódî
);

1998 
∆a_put_Áûuª
:

1999 
îr
 = -
EMSGSIZE
;

2000 
îr‹
:

2001 
	`gílmsg_ˇn˚l
(
skb
, 
ovs_hódî
);

2002  
îr
;

2006 
sk_buff
 *
	`ovs_vp‹t_cmd_buûd_öfo
(
vp‹t
 *vp‹t, 
u32
 
p‹tid
,

2007 
u32
 
£q
, 
u8
 
cmd
)

2009 
sk_buff
 *
skb
;

2010 
ªtvÆ
;

2012 
skb
 = 
	`∆msg_√w
(
NLMSG_DEFAULT_SIZE
, 
GFP_ATOMIC
);

2013 i‡(!
skb
)

2014  
	`ERR_PTR
(-
ENOMEM
);

2016 
ªtvÆ
 = 
	`ovs_vp‹t_cmd_fûl_öfo
(
vp‹t
, 
skb
, 
p‹tid
, 
£q
, 0, 
cmd
);

2017 i‡(
ªtvÆ
 < 0) {

2018 
	`k‰ì_skb
(
skb
);

2019  
	`ERR_PTR
(
ªtvÆ
);

2021  
skb
;

2024 
	`ovs_vp‹t_cmd_vÆid©e
(
∆©å
 *
a
[
OVS_VPORT_ATTR_MAX
 + 1])

2026  
	`CHECK_NUL_STRING
(
a
[
OVS_VPORT_ATTR_NAME
], 
IFNAMSIZ
 - 1);

2030 
vp‹t
 *
	`lookup_vp‹t
(
√t
 *net,

2031 
ovs_hódî
 *ovs_header,

2032 
∆©å
 *
a
[
OVS_VPORT_ATTR_MAX
 + 1])

2034 
d©≠©h
 *
dp
;

2035 
vp‹t
 *vport;

2037 i‡(
a
[
OVS_VPORT_ATTR_NAME
]) {

2038 
vp‹t
 = 
	`ovs_vp‹t_loˇã
(
√t
, 
	`∆a_d©a
(
a
[
OVS_VPORT_ATTR_NAME
]));

2039 i‡(!
vp‹t
)

2040  
	`ERR_PTR
(-
ENODEV
);

2041 i‡(
ovs_hódî
->
dp_ifödex
 &&

2042 
ovs_hódî
->
dp_ifödex
 !
	`gë_dpifödex
(
vp‹t
->
dp
))

2043  
	`ERR_PTR
(-
ENODEV
);

2044  
vp‹t
;

2045 } i‡(
a
[
OVS_VPORT_ATTR_PORT_NO
]) {

2046 
u32
 
p‹t_no
 = 
	`∆a_gë_u32
(
a
[
OVS_VPORT_ATTR_PORT_NO
]);

2048 i‡(
p‹t_no
 >
DP_MAX_PORTS
)

2049  
	`ERR_PTR
(-
EFBIG
);

2051 
dp
 = 
	`gë_dp
(
√t
, 
ovs_hódî
->
dp_ifödex
);

2052 i‡(!
dp
)

2053  
	`ERR_PTR
(-
ENODEV
);

2055 
vp‹t
 = 
	`ovs_vp‹t_π∆_rcu
(
dp
, 
p‹t_no
);

2056 i‡(!
vp‹t
)

2057  
	`ERR_PTR
(-
ENOENT
);

2058  
vp‹t
;

2060  
	`ERR_PTR
(-
EINVAL
);

2064 
	`ch™ge_vp‹t
(
vp‹t
 *vport,

2065 
∆©å
 *
a
[
OVS_VPORT_ATTR_MAX
 + 1])

2067 
îr
 = 0;

2069 i‡(
a
[
OVS_VPORT_ATTR_STATS
])

2070 
	`ovs_vp‹t_£t_°©s
(
vp‹t
, 
	`∆a_d©a
(
a
[
OVS_VPORT_ATTR_STATS
]));

2072 i‡(
a
[
OVS_VPORT_ATTR_ADDRESS
])

2073 
îr
 = 
	`ovs_vp‹t_£t_addr
(
vp‹t
, 
	`∆a_d©a
(
a
[
OVS_VPORT_ATTR_ADDRESS
]));

2075  
îr
;

2078 
	`ovs_vp‹t_cmd_√w
(
sk_buff
 *
skb
, 
gíl_öfo
 *
öfo
)

2080 
∆©å
 **
a
 = 
öfo
->
©ås
;

2081 
ovs_hódî
 *ovs_hódî = 
öfo
->
u£rhdr
;

2082 
vp‹t_∑rms
 
∑rms
;

2083 
sk_buff
 *
ª∂y
;

2084 
vp‹t
 *vport;

2085 
d©≠©h
 *
dp
;

2086 
u32
 
p‹t_no
;

2087 
îr
;

2089 
îr
 = -
EINVAL
;

2090 i‡(!
a
[
OVS_VPORT_ATTR_NAME
] || !a[
OVS_VPORT_ATTR_TYPE
] ||

2091 !
a
[
OVS_VPORT_ATTR_UPCALL_PID
])

2092 
exô
;

2094 
îr
 = 
	`ovs_vp‹t_cmd_vÆid©e
(
a
);

2095 i‡(
îr
)

2096 
exô
;

2098 
	`π∆_lock
();

2099 
dp
 = 
	`gë_dp
(
	`sock_√t
(
skb
->
sk
), 
ovs_hódî
->
dp_ifödex
);

2100 
îr
 = -
ENODEV
;

2101 i‡(!
dp
)

2102 
exô_u∆ock
;

2104 i‡(
a
[
OVS_VPORT_ATTR_PORT_NO
]) {

2105 
p‹t_no
 = 
	`∆a_gë_u32
(
a
[
OVS_VPORT_ATTR_PORT_NO
]);

2107 
îr
 = -
EFBIG
;

2108 i‡(
p‹t_no
 >
DP_MAX_PORTS
)

2109 
exô_u∆ock
;

2111 
vp‹t
 = 
	`ovs_vp‹t_π∆
(
dp
, 
p‹t_no
);

2112 
îr
 = -
EBUSY
;

2113 i‡(
vp‹t
)

2114 
exô_u∆ock
;

2116 
p‹t_no
 = 1; ;Öort_no++) {

2117 i‡(
p‹t_no
 >
DP_MAX_PORTS
) {

2118 
îr
 = -
EFBIG
;

2119 
exô_u∆ock
;

2121 
vp‹t
 = 
	`ovs_vp‹t_π∆
(
dp
, 
p‹t_no
);

2122 i‡(!
vp‹t
)

2127 
∑rms
.
«me
 = 
	`∆a_d©a
(
a
[
OVS_VPORT_ATTR_NAME
]);

2128 
∑rms
.
ty≥
 = 
	`∆a_gë_u32
(
a
[
OVS_VPORT_ATTR_TYPE
]);

2129 
∑rms
.
›ti⁄s
 = 
a
[
OVS_VPORT_ATTR_OPTIONS
];

2130 
∑rms
.
dp
 = dp;

2131 
∑rms
.
p‹t_no
 =Öort_no;

2132 
∑rms
.
upˇŒ_p‹tid
 = 
	`∆a_gë_u32
(
a
[
OVS_VPORT_ATTR_UPCALL_PID
]);

2134 
vp‹t
 = 
	`√w_vp‹t
(&
∑rms
);

2135 
îr
 = 
	`PTR_ERR
(
vp‹t
);

2136 i‡(
	`IS_ERR
(
vp‹t
))

2137 
exô_u∆ock
;

2139 
	`ovs_dp_sysfs_add_if
(
vp‹t
);

2141 
îr
 = 
	`ch™ge_vp‹t
(
vp‹t
, 
a
);

2142 i‡(!
îr
) {

2143 
ª∂y
 = 
	`ovs_vp‹t_cmd_buûd_öfo
(
vp‹t
, 
öfo
->
¢d_p‹tid
,

2144 
öfo
->
¢d_£q
,

2145 
OVS_VPORT_CMD_NEW
);

2146 i‡(
	`IS_ERR
(
ª∂y
))

2147 
îr
 = 
	`PTR_ERR
(
ª∂y
);

2149 i‡(
îr
) {

2150 
	`ovs_dp_dëach_p‹t
(
vp‹t
);

2151 
exô_u∆ock
;

2153 
	`gíl_nŸify
(
ª∂y
, 
	`gíl_öfo_√t
(
öfo
), info->
¢d_p‹tid
,

2154 
ovs_dp_vp‹t_mu…iˇ°_group
.
id
, 
öfo
->
∆hdr
, 
GFP_KERNEL
);

2156 
exô_u∆ock
:

2157 
	`π∆_u∆ock
();

2158 
exô
:

2159  
îr
;

2162 
	`ovs_vp‹t_cmd_£t
(
sk_buff
 *
skb
, 
gíl_öfo
 *
öfo
)

2164 
∆©å
 **
a
 = 
öfo
->
©ås
;

2165 
sk_buff
 *
ª∂y
;

2166 
vp‹t
 *vport;

2167 
îr
;

2169 
îr
 = 
	`ovs_vp‹t_cmd_vÆid©e
(
a
);

2170 i‡(
îr
)

2171 
exô
;

2173 
	`π∆_lock
();

2174 
vp‹t
 = 
	`lookup_vp‹t
(
	`sock_√t
(
skb
->
sk
), 
öfo
->
u£rhdr
, 
a
);

2175 
îr
 = 
	`PTR_ERR
(
vp‹t
);

2176 i‡(
	`IS_ERR
(
vp‹t
))

2177 
exô_u∆ock
;

2179 
îr
 = 0;

2180 i‡(
a
[
OVS_VPORT_ATTR_TYPE
] &&

2181 
	`∆a_gë_u32
(
a
[
OVS_VPORT_ATTR_TYPE
]Ë!
vp‹t
->
›s
->
ty≥
)

2182 
îr
 = -
EINVAL
;

2184 i‡(!
îr
 && 
a
[
OVS_VPORT_ATTR_OPTIONS
])

2185 
îr
 = 
	`ovs_vp‹t_£t_›ti⁄s
(
vp‹t
, 
a
[
OVS_VPORT_ATTR_OPTIONS
]);

2186 i‡(!
îr
)

2187 
îr
 = 
	`ch™ge_vp‹t
(
vp‹t
, 
a
);

2189 
exô_u∆ock
;

2190 i‡(!
îr
 && 
a
[
OVS_VPORT_ATTR_UPCALL_PID
])

2191 
vp‹t
->
upˇŒ_p‹tid
 = 
	`∆a_gë_u32
(
a
[
OVS_VPORT_ATTR_UPCALL_PID
]);

2193 
ª∂y
 = 
	`ovs_vp‹t_cmd_buûd_öfo
(
vp‹t
, 
öfo
->
¢d_p‹tid
,

2194 
öfo
->
¢d_£q
, 
OVS_VPORT_CMD_NEW
);

2195 i‡(
	`IS_ERR
(
ª∂y
)) {

2196 
	`√éök_£t_îr
(
	`GENL_SOCK
(
	`sock_√t
(
skb
->
sk
)), 0,

2197 
ovs_dp_vp‹t_mu…iˇ°_group
.
id
, 
	`PTR_ERR
(
ª∂y
));

2198 
exô_u∆ock
;

2201 
	`gíl_nŸify
(
ª∂y
, 
	`gíl_öfo_√t
(
öfo
), info->
¢d_p‹tid
,

2202 
ovs_dp_vp‹t_mu…iˇ°_group
.
id
, 
öfo
->
∆hdr
, 
GFP_KERNEL
);

2204 
exô_u∆ock
:

2205 
	`π∆_u∆ock
();

2206 
exô
:

2207  
îr
;

2210 
	`ovs_vp‹t_cmd_dñ
(
sk_buff
 *
skb
, 
gíl_öfo
 *
öfo
)

2212 
∆©å
 **
a
 = 
öfo
->
©ås
;

2213 
sk_buff
 *
ª∂y
;

2214 
vp‹t
 *vport;

2215 
îr
;

2217 
îr
 = 
	`ovs_vp‹t_cmd_vÆid©e
(
a
);

2218 i‡(
îr
)

2219 
exô
;

2221 
	`π∆_lock
();

2222 
vp‹t
 = 
	`lookup_vp‹t
(
	`sock_√t
(
skb
->
sk
), 
öfo
->
u£rhdr
, 
a
);

2223 
îr
 = 
	`PTR_ERR
(
vp‹t
);

2224 i‡(
	`IS_ERR
(
vp‹t
))

2225 
exô_u∆ock
;

2227 i‡(
vp‹t
->
p‹t_no
 =
OVSP_LOCAL
) {

2228 
îr
 = -
EINVAL
;

2229 
exô_u∆ock
;

2232 
ª∂y
 = 
	`ovs_vp‹t_cmd_buûd_öfo
(
vp‹t
, 
öfo
->
¢d_p‹tid
,

2233 
öfo
->
¢d_£q
, 
OVS_VPORT_CMD_DEL
);

2234 
îr
 = 
	`PTR_ERR
(
ª∂y
);

2235 i‡(
	`IS_ERR
(
ª∂y
))

2236 
exô_u∆ock
;

2238 
îr
 = 0;

2239 
	`ovs_dp_dëach_p‹t
(
vp‹t
);

2241 
	`gíl_nŸify
(
ª∂y
, 
	`gíl_öfo_√t
(
öfo
), info->
¢d_p‹tid
,

2242 
ovs_dp_vp‹t_mu…iˇ°_group
.
id
, 
öfo
->
∆hdr
, 
GFP_KERNEL
);

2244 
exô_u∆ock
:

2245 
	`π∆_u∆ock
();

2246 
exô
:

2247  
îr
;

2250 
	`ovs_vp‹t_cmd_gë
(
sk_buff
 *
skb
, 
gíl_öfo
 *
öfo
)

2252 
∆©å
 **
a
 = 
öfo
->
©ås
;

2253 
ovs_hódî
 *ovs_hódî = 
öfo
->
u£rhdr
;

2254 
sk_buff
 *
ª∂y
;

2255 
vp‹t
 *vport;

2256 
îr
;

2258 
îr
 = 
	`ovs_vp‹t_cmd_vÆid©e
(
a
);

2259 i‡(
îr
)

2260 
exô
;

2262 
	`rcu_ªad_lock
();

2263 
vp‹t
 = 
	`lookup_vp‹t
(
	`sock_√t
(
skb
->
sk
), 
ovs_hódî
, 
a
);

2264 
îr
 = 
	`PTR_ERR
(
vp‹t
);

2265 i‡(
	`IS_ERR
(
vp‹t
))

2266 
exô_u∆ock
;

2268 
ª∂y
 = 
	`ovs_vp‹t_cmd_buûd_öfo
(
vp‹t
, 
öfo
->
¢d_p‹tid
,

2269 
öfo
->
¢d_£q
, 
OVS_VPORT_CMD_NEW
);

2270 
îr
 = 
	`PTR_ERR
(
ª∂y
);

2271 i‡(
	`IS_ERR
(
ª∂y
))

2272 
exô_u∆ock
;

2274 
	`rcu_ªad_u∆ock
();

2276  
	`gílmsg_ª∂y
(
ª∂y
, 
öfo
);

2278 
exô_u∆ock
:

2279 
	`rcu_ªad_u∆ock
();

2280 
exô
:

2281  
îr
;

2284 
	`ovs_vp‹t_cmd_dump
(
sk_buff
 *
skb
, 
√éök_ˇŒback
 *
cb
)

2286 
ovs_hódî
 *ovs_hódî = 
	`gílmsg_d©a
(
	`∆msg_d©a
(
cb
->
∆h
));

2287 
d©≠©h
 *
dp
;

2288 
buckë
 = 
cb
->
¨gs
[0], 
skù
 = cb->args[1];

2289 
i
, 
j
 = 0;

2291 
dp
 = 
	`gë_dp
(
	`sock_√t
(
skb
->
sk
), 
ovs_hódî
->
dp_ifödex
);

2292 i‡(!
dp
)

2293  -
ENODEV
;

2295 
	`rcu_ªad_lock
();

2296 
i
 = 
buckë
; i < 
DP_VPORT_HASH_BUCKETS
; i++) {

2297 
vp‹t
 *vport;

2298 
hli°_node
 *
n
;

2300 
j
 = 0;

2301 
	`hli°_f‹_óch_íåy_rcu
(
vp‹t
, 
n
, &
dp
->
p‹ts
[
i
], 
dp_hash_node
) {

2302 i‡(
j
 >
skù
 &&

2303 
	`ovs_vp‹t_cmd_fûl_öfo
(
vp‹t
, 
skb
,

2304 
	`NETLINK_CB
(
cb
->
skb
).
p‹tid
,

2305 
cb
->
∆h
->
∆msg_£q
,

2306 
NLM_F_MULTI
,

2307 
OVS_VPORT_CMD_NEW
) < 0)

2308 
out
;

2310 
j
++;

2312 
skù
 = 0;

2314 
out
:

2315 
	`rcu_ªad_u∆ock
();

2317 
cb
->
¨gs
[0] = 
i
;

2318 
cb
->
¨gs
[1] = 
j
;

2320  
skb
->
Àn
;

2323 
gíl_›s
 
dp_vp‹t_gíl_›s
[] = {

2324 { .
cmd
 = 
OVS_VPORT_CMD_NEW
,

2325 .
Êags
 = 
GENL_ADMIN_PERM
,

2326 .
pﬁicy
 = 
vp‹t_pﬁicy
,

2327 .
doô
 = 
ovs_vp‹t_cmd_√w


2329 { .
cmd
 = 
OVS_VPORT_CMD_DEL
,

2330 .
Êags
 = 
GENL_ADMIN_PERM
,

2331 .
pﬁicy
 = 
vp‹t_pﬁicy
,

2332 .
doô
 = 
ovs_vp‹t_cmd_dñ


2334 { .
cmd
 = 
OVS_VPORT_CMD_GET
,

2335 .
Êags
 = 0,

2336 .
pﬁicy
 = 
vp‹t_pﬁicy
,

2337 .
doô
 = 
ovs_vp‹t_cmd_gë
,

2338 .
dumpô
 = 
ovs_vp‹t_cmd_dump


2340 { .
cmd
 = 
OVS_VPORT_CMD_SET
,

2341 .
Êags
 = 
GENL_ADMIN_PERM
,

2342 .
pﬁicy
 = 
vp‹t_pﬁicy
,

2343 .
doô
 = 
ovs_vp‹t_cmd_£t
,

2347 
	sgíl_Ámûy_™d_›s
 {

2348 
gíl_Ámûy
 *
Ámûy
;

2349 
gíl_›s
 *
›s
;

2350 
n_›s
;

2351 
gíl_mu…iˇ°_group
 *
group
;

2354 c⁄° 
gíl_Ámûy_™d_›s
 
dp_gíl_Ámûõs
[] = {

2355 { &
dp_d©≠©h_gíl_Ámûy
,

2356 
dp_d©≠©h_gíl_›s
, 
	`ARRAY_SIZE
(dp_datapath_genl_ops),

2357 &
ovs_dp_d©≠©h_mu…iˇ°_group
 },

2358 { &
dp_vp‹t_gíl_Ámûy
,

2359 
dp_vp‹t_gíl_›s
, 
	`ARRAY_SIZE
(dp_vport_genl_ops),

2360 &
ovs_dp_vp‹t_mu…iˇ°_group
 },

2361 { &
dp_Êow_gíl_Ámûy
,

2362 
dp_Êow_gíl_›s
, 
	`ARRAY_SIZE
(dp_flow_genl_ops),

2363 &
ovs_dp_Êow_mu…iˇ°_group
 },

2364 { &
dp_∑ckë_gíl_Ámûy
,

2365 
dp_∑ckë_gíl_›s
, 
	`ARRAY_SIZE
(dp_packet_genl_ops),

2366 
NULL
 },

2369 
	`dp_uƒegi°î_gíl
(
n_Ámûõs
)

2371 
i
;

2373 
i
 = 0; i < 
n_Ámûõs
; i++)

2374 
	`gíl_uƒegi°î_Ámûy
(
dp_gíl_Ámûõs
[
i
].
Ámûy
);

2377 
	`dp_ªgi°î_gíl
()

2379 
n_ªgi°îed
;

2380 
îr
;

2381 
i
;

2383 
n_ªgi°îed
 = 0;

2384 
i
 = 0; i < 
	`ARRAY_SIZE
(
dp_gíl_Ámûõs
); i++) {

2385 c⁄° 
gíl_Ámûy_™d_›s
 *
f
 = &
dp_gíl_Ámûõs
[
i
];

2387 
îr
 = 
	`gíl_ªgi°î_Ámûy_wôh_›s
(
f
->
Ámûy
, f->
›s
,

2388 
f
->
n_›s
);

2389 i‡(
îr
)

2390 
îr‹
;

2391 
n_ªgi°îed
++;

2393 i‡(
f
->
group
) {

2394 
îr
 = 
	`gíl_ªgi°î_mc_group
(
f
->
Ámûy
, f->
group
);

2395 i‡(
îr
)

2396 
îr‹
;

2402 
îr‹
:

2403 
	`dp_uƒegi°î_gíl
(
n_ªgi°îed
);

2404  
îr
;

2407 
	`__ªhash_Êow_èbÀ
(*
dummy
)

2409 
d©≠©h
 *
dp
;

2410 
√t
 *net;

2412 
	`π∆_lock
();

2413 
	`f‹_óch_√t
(
√t
) {

2414 
ovs_√t
 *ovs_√à
	`√t_gíîic
(
√t
, 
ovs_√t_id
);

2416 
	`li°_f‹_óch_íåy
(
dp
, &
ovs_√t
->
dps
, 
li°_node
) {

2417 
Êow_èbÀ
 *
ﬁd_èbÀ
 = 
	`gíl_dîe„ªn˚
(
dp
->
èbÀ
);

2418 
Êow_èbÀ
 *
√w_èbÀ
;

2420 
√w_èbÀ
 = 
	`ovs_Êow_tbl_ªhash
(
ﬁd_èbÀ
);

2421 i‡(!
	`IS_ERR
(
√w_èbÀ
)) {

2422 
	`rcu_assign_poöãr
(
dp
->
èbÀ
, 
√w_èbÀ
);

2423 
	`ovs_Êow_tbl_de„ºed_de°roy
(
ﬁd_èbÀ
);

2427 
	`π∆_u∆ock
();

2431 
	`ªhash_Êow_èbÀ
(
w‹k_°ru˘
 *
w‹k
)

2433 
	`gíl_exec
(
__ªhash_Êow_èbÀ
, 
NULL
);

2434 
	`scheduÀ_dñayed_w‹k
(&
ªhash_Êow_wq
, 
REHASH_FLOW_INTERVAL
);

2437 
	`dp_de°roy_Æl
(*
d©a
)

2439 
d©≠©h
 *
dp
, *
dp_√xt
;

2440 
ovs_√t
 *ovs_√à
d©a
;

2442 
	`li°_f‹_óch_íåy_ß„
(
dp
, 
dp_√xt
, &
ovs_√t
->
dps
, 
li°_node
)

2443 
	`__dp_de°roy
(
dp
);

2448 
__√t_öô
 
	`ovs_öô_√t
(
√t
 *net)

2450 
ovs_√t
 *ovs_√à
	`√t_gíîic
(
√t
, 
ovs_√t_id
);

2452 
	`INIT_LIST_HEAD
(&
ovs_√t
->
dps
);

2456 
__√t_exô
 
	`ovs_exô_√t
(
√t
 *net)

2458 
ovs_√t
 *ovs_√à
	`√t_gíîic
(
√t
, 
ovs_√t_id
);

2460 
	`gíl_exec
(
dp_de°roy_Æl
, 
ovs_√t
);

2463 
≥∫ë_›î©i⁄s
 
ovs_√t_›s
 = {

2464 .
öô
 = 
ovs_öô_√t
,

2465 .
exô
 = 
ovs_exô_√t
,

2466 .
id
 = &
ovs_√t_id
,

2467 .
size
 = (
ovs_√t
),

2470 
__öô
 
	`dp_öô
()

2472 
sk_buff
 *
dummy_skb
;

2473 
îr
;

2475 
	`BUILD_BUG_ON
((
ovs_skb_cb
Ë> (
dummy_skb
->
cb
));

2477 
	`¥_öfo
("O≥¿vSwôch swôchög d©≠©h %s, buûà"
__DATE__
" "
__TIME__
"\n",

2478 
VERSION
);

2480 
îr
 = 
	`gíl_exec_öô
();

2481 i‡(
îr
)

2482 
îr‹
;

2484 
îr
 = 
	`ovs_w‹kqueues_öô
();

2485 i‡(
îr
)

2486 
îr‹_gíl_exec
;

2488 
îr
 = 
	`ovs_äl_öô
();

2489 i‡(
îr
)

2490 
îr‹_wq
;

2492 
îr
 = 
	`ovs_Êow_öô
();

2493 i‡(
îr
)

2494 
îr‹_äl_exô
;

2496 
îr
 = 
	`ovs_vp‹t_öô
();

2497 i‡(
îr
)

2498 
îr‹_Êow_exô
;

2500 
îr
 = 
	`ªgi°î_≥∫ë_devi˚
(&
ovs_√t_›s
);

2501 i‡(
îr
)

2502 
îr‹_vp‹t_exô
;

2504 
îr
 = 
	`ªgi°î_√tdevi˚_nŸifõr
(&
ovs_dp_devi˚_nŸifõr
);

2505 i‡(
îr
)

2506 
îr‹_√äs_exô
;

2508 
îr
 = 
	`dp_ªgi°î_gíl
();

2509 i‡(
îr
 < 0)

2510 
îr‹_uƒeg_nŸifõr
;

2512 
	`scheduÀ_dñayed_w‹k
(&
ªhash_Êow_wq
, 
REHASH_FLOW_INTERVAL
);

2516 
îr‹_uƒeg_nŸifõr
:

2517 
	`uƒegi°î_√tdevi˚_nŸifõr
(&
ovs_dp_devi˚_nŸifõr
);

2518 
îr‹_√äs_exô
:

2519 
	`uƒegi°î_≥∫ë_devi˚
(&
ovs_√t_›s
);

2520 
îr‹_vp‹t_exô
:

2521 
	`ovs_vp‹t_exô
();

2522 
îr‹_Êow_exô
:

2523 
	`ovs_Êow_exô
();

2524 
îr‹_äl_exô
:

2525 
	`ovs_äl_exô
();

2526 
îr‹_wq
:

2527 
	`ovs_w‹kqueues_exô
();

2528 
îr‹_gíl_exec
:

2529 
	`gíl_exec_exô
();

2530 
îr‹
:

2531  
îr
;

2534 
	`dp_˛ónup
()

2536 
	`ˇn˚l_dñayed_w‹k_sync
(&
ªhash_Êow_wq
);

2537 
	`dp_uƒegi°î_gíl
(
	`ARRAY_SIZE
(
dp_gíl_Ámûõs
));

2538 
	`uƒegi°î_√tdevi˚_nŸifõr
(&
ovs_dp_devi˚_nŸifõr
);

2539 
	`uƒegi°î_≥∫ë_devi˚
(&
ovs_√t_›s
);

2540 
	`rcu_b¨rõr
();

2541 
	`ovs_vp‹t_exô
();

2542 
	`ovs_Êow_exô
();

2543 
	`ovs_äl_exô
();

2544 
	`ovs_w‹kqueues_exô
();

2545 
	`gíl_exec_exô
();

2548 
	`moduÀ_öô
(
dp_öô
);

2549 
	`moduÀ_exô
(
dp_˛ónup
);

2551 
	`MODULE_DESCRIPTION
("Open vSwitch switching datapath");

2552 
	`MODULE_LICENSE
("GPL");

2553 
	`MODULE_VERSION
(
VERSION
);

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/datapath.h

19 #i‚de‡
DATAPATH_H


20 
	#DATAPATH_H
 1

	)

22 
	~<asm/∑ge.h
>

23 
	~<löux/kî√l.h
>

24 
	~<löux/muãx.h
>

25 
	~<löux/√tdevi˚.h
>

26 
	~<löux/skbuff.h
>

27 
	~<löux/u64_°©s_sync.h
>

30 
	~"liu_buf„r.h
"

31 
FIELD
* 
mèb
;

32 
FIELD
* 
dèb
;

33 
	#PROTOCOL_SHIFT
 200

	)

35 
	~"checksum.h
"

36 
	~"com∑t.h
"

37 
	~"dp_sysfs.h
"

38 
	~"Êow.h
"

39 
	~"tu¬ñ.h
"

40 
	~"vœn.h
"

41 
	~"vp‹t.h
"

43 
	#DP_MAX_PORTS
 
USHRT_MAX


	)

44 
	#DP_VPORT_HASH_BUCKETS
 1024

	)

46 
	#SAMPLE_ACTION_DEPTH
 3

	)

60 
	sdp_°©s_≥r˝u
 {

61 
u64
 
	mn_hô
;

62 
u64
 
	mn_mis£d
;

63 
u64
 
	mn_lo°
;

64 
u64_°©s_sync
 
	msync
;

82 
	sd©≠©h
 {

83 
rcu_hód
 
	mrcu
;

84 
li°_hód
 
	mli°_node
;

85 
kobje˘
 
	mifobj
;

88 
Êow_èbÀ
 
__rcu
 *
	mèbÀ
;

91 
hli°_hód
 *
	mp‹ts
;

94 
dp_°©s_≥r˝u
 
__≥r˝u
 *
	m°©s_≥r˝u
;

97 
liu_buf„r
 
	mbuf„r
;

99 #ifde‡
CONFIG_NET_NS


101 
√t
 *
	m√t
;

118 
	sovs_skb_cb
 {

119 
sw_Êow
 *
	mÊow
;

120 
ovs_key_ùv4_tu¬ñ
 *
	mtun_key
;

121 #ifde‡
NEED_CSUM_NORMALIZE


122 
csum_ty≥
 
	mù_summed
;

123 
u16
 
	mcsum_°¨t
;

125 #ifde‡
NEED_VLAN_FIELD


126 
u16
 
	mvœn_tci
;

129 
	#OVS_CB
(
skb
Ë((
ovs_skb_cb
 *)(skb)->
cb
)

	)

141 
	sdp_upˇŒ_öfo
 {

142 
u8
 
	mcmd
;

143 c⁄° 
sw_Êow_key
 *
	mkey
;

144 c⁄° 
∆©å
 *
	mu£rd©a
;

145 
u32
 
	mp‹tid
;

154 
	sovs_√t
 {

155 
li°_hód
 
	mdps
;

156 
vp‹t_√t
 
	mvp‹t_√t
;

159 
ovs_√t_id
;

161 
ölöe
 
√t
 *
	$ovs_dp_gë_√t
(
d©≠©h
 *
dp
)

163  
	`ªad_≤ë
(&
dp
->
√t
);

164 
	}
}

166 
ölöe
 
	$ovs_dp_£t_√t
(
d©≠©h
 *
dp
, 
√t
 *net)

168 
	`wrôe_≤ë
(&
dp
->
√t
,Çet);

169 
	}
}

171 
vp‹t
 *
ovs_lookup_vp‹t
(c⁄° 
d©≠©h
 *
dp
, 
u16
 
p‹t_no
);

173 
ölöe
 
vp‹t
 *
	$ovs_vp‹t_rcu
(c⁄° 
d©≠©h
 *
dp
, 
p‹t_no
)

175 
	`WARN_ON_ONCE
(!
	`rcu_ªad_lock_hñd
());

176  
	`ovs_lookup_vp‹t
(
dp
, 
p‹t_no
);

177 
	}
}

179 
ölöe
 
vp‹t
 *
	$ovs_vp‹t_π∆_rcu
(c⁄° 
d©≠©h
 *
dp
, 
p‹t_no
)

181 
	`WARN_ON_ONCE
(!
	`rcu_ªad_lock_hñd
(Ë&& !
	`π∆_is_locked
());

182  
	`ovs_lookup_vp‹t
(
dp
, 
p‹t_no
);

183 
	}
}

185 
ölöe
 
vp‹t
 *
	$ovs_vp‹t_π∆
(c⁄° 
d©≠©h
 *
dp
, 
p‹t_no
)

187 
	`ASSERT_RTNL
();

188  
	`ovs_lookup_vp‹t
(
dp
, 
p‹t_no
);

189 
	}
}

191 
nŸifõr_block
 
ovs_dp_devi˚_nŸifõr
;

192 
gíl_mu…iˇ°_group
 
ovs_dp_vp‹t_mu…iˇ°_group
;

193 (*
ovs_dp_io˘l_hook
)(
√t_devi˚
 *
dev
, 
i‰eq
 *
rq
, 
cmd
);

195 
	`ovs_dp_¥o˚ss_ª˚ived_∑ckë
(
vp‹t
 *, 
sk_buff
 *);

196 
	`ovs_dp_dëach_p‹t
(
vp‹t
 *);

197 
	`ovs_dp_upˇŒ
(
d©≠©h
 *, 
sk_buff
 *,

198 c⁄° 
dp_upˇŒ_öfo
 *);

200 c⁄° *
	`ovs_dp_«me
(c⁄° 
d©≠©h
 *
dp
);

201 
sk_buff
 *
	`ovs_vp‹t_cmd_buûd_öfo
(
vp‹t
 *, 
u32
 
p‹tid
, u32 
£q
,

202 
u8
 
cmd
);

204 
	`ovs_execuã_a˘i⁄s
(
d©≠©h
 *
dp
, 
sk_buff
 *
skb
);

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/dp_notify.c

19 
	~<löux/√tdevi˚.h
>

20 
	~<√t/gíëlök.h
>

22 
	~"d©≠©h.h
"

23 
	~"vp‹t-öã∫Æ_dev.h
"

24 
	~"vp‹t-√tdev.h
"

26 
	$dp_devi˚_evít
(
nŸifõr_block
 *
unu£d
, 
evít
,

27 *
±r
)

29 
√t_devi˚
 *
dev
 = 
±r
;

30 
vp‹t
 *vport;

32 i‡(
	`ovs_is_öã∫Æ_dev
(
dev
))

33 
vp‹t
 = 
	`ovs_öã∫Æ_dev_gë_vp‹t
(
dev
);

35 
vp‹t
 = 
	`ovs_√tdev_gë_vp‹t
(
dev
);

37 i‡(!
vp‹t
)

38  
NOTIFY_DONE
;

40 
evít
) {

41 
NETDEV_UNREGISTER
:

42 i‡(!
	`ovs_is_öã∫Æ_dev
(
dev
)) {

43 
sk_buff
 *
nŸify
;

44 
d©≠©h
 *
dp
 = 
vp‹t
->dp;

46 
nŸify
 = 
	`ovs_vp‹t_cmd_buûd_öfo
(
vp‹t
, 0, 0,

47 
OVS_VPORT_CMD_DEL
);

48 
	`ovs_dp_dëach_p‹t
(
vp‹t
);

49 i‡(
	`IS_ERR
(
nŸify
)) {

50 
	`√éök_£t_îr
(
	`GENL_SOCK
(
	`ovs_dp_gë_√t
(
dp
)), 0,

51 
ovs_dp_vp‹t_mu…iˇ°_group
.
id
,

52 
	`PTR_ERR
(
nŸify
));

56 
	`gílmsg_mu…iˇ°_√äs
(
	`ovs_dp_gë_√t
(
dp
), 
nŸify
, 0,

57 
ovs_dp_vp‹t_mu…iˇ°_group
.
id
,

58 
GFP_KERNEL
);

62 
NETDEV_CHANGENAME
:

63 i‡(
vp‹t
->
p‹t_no
 !
OVSP_LOCAL
) {

64 
	`ovs_dp_sysfs_dñ_if
(
vp‹t
);

65 
	`ovs_dp_sysfs_add_if
(
vp‹t
);

70  
NOTIFY_DONE
;

71 
	}
}

73 
nŸifõr_block
 
	govs_dp_devi˚_nŸifõr
 = {

74 .
nŸifõr_ˇŒ
 = 
dp_devi˚_evít


	@/home/lsch/mytest/openvswitch-1.9.0/datapath/dp_sysfs.h

19 #i‚de‡
DP_SYSFS_H


20 
	#DP_SYSFS_H
 1

	)

22 
	gd©≠©h
;

23 
	gvp‹t
;

26 
ovs_dp_sysfs_add_dp
(
d©≠©h
 *
dp
);

27 
ovs_dp_sysfs_dñ_dp
(
d©≠©h
 *
dp
);

30 
ovs_dp_sysfs_add_if
(
vp‹t
 *
p
);

31 
ovs_dp_sysfs_dñ_if
(
vp‹t
 *
p
);

33 #ifde‡
CONFIG_SYSFS


34 
sysfs_›s
 
ovs_bΩ‹t_sysfs_›s
;

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/dp_sysfs_dp.c

19 
	#¥_fmt
(
fmt
Ë
KBUILD_MODNAME
 ": " 
	)
fmt

21 
	~<löux/vîsi⁄.h
>

29 
	~<löux/ˇ∑bûôy.h
>

30 
	~<löux/devi˚.h
>

31 
	~<löux/kî√l.h
>

32 
	~<löux/√tdevi˚.h
>

33 
	~<löux/if_bridge.h
>

34 
	~<löux/π√éök.h
>

35 
	~<löux/vîsi⁄.h
>

37 
	~"dp_sysfs.h
"

38 
	~"d©≠©h.h
"

39 
	~"vp‹t-öã∫Æ_dev.h
"

41 #ifde‡
CONFIG_SYSFS


44 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,21)

45 
	#INTERNAL_DEVICE_ATTR
 
CLASS_DEVICE_ATTR


	)

46 
	#DEVICE_PARAMS
 
˛ass_devi˚
 *
d


	)

47 
	#DEVICE_ARGS
 
d


	)

48 
	#DEV_ATTR
(
NAME
Ë
˛ass_devi˚_©å_
##
	)
NAME

50 
	#INTERNAL_DEVICE_ATTR
 
DEVICE_ATTR


	)

51 
	#DEVICE_PARAMS
 
devi˚
 *
d
, 
devi˚_©åibuã
 *
©å


	)

52 
	#DEVICE_ARGS
 
d
, 
©å


	)

53 
	#DEV_ATTR
(
NAME
Ë
dev_©å_
##
	)
NAME

56 
d©≠©h
 *
	$sysfs_gë_dp
(
√t_devi˚
 *
√tdev
)

58 
vp‹t
 *vp‹à
	`ovs_öã∫Æ_dev_gë_vp‹t
(
√tdev
);

59  
vp‹t
 ? vp‹t->
dp
 : 
NULL
;

60 
	}
}

64 
ssize_t
 
°‹e_bridge_∑rm
(
DEVICE_PARAMS
,

65 c⁄° *
buf
, 
size_t
 
Àn
,

66 (*
£t
)(
d©≠©h
 *, ))

68 *
ídp
;

69 
vÆ
;

70 
ssize_t
 
ªsu…
 = 
Àn
;

72 i‡(!
	`ˇ∑bÀ
(
CAP_NET_ADMIN
))

73  -
EPERM
;

75 
vÆ
 = 
	`sim∂e_°πoul
(
buf
, &
ídp
, 0);

76 i‡(
ídp
 =
buf
)

77  -
EINVAL
;

83 i‡(
vÆ
 != 0) {

84 
d©≠©h
 *
dp
;

86 
	`rcu_ªad_lock
();

88 
dp
 = 
	`sysfs_gë_dp
(
	`to_√t_dev
(
d
));

89 i‡(
dp
)

90 
	`¥_w¨nög
("%s: xxx writing dpÖarmsÇot supported yet!\n",

91 
	`ovs_dp_«me
(
dp
));

93 
ªsu…
 = -
ENODEV
;

95 
	`rcu_ªad_u∆ock
();

98  
ªsu…
;

99 
	}
}

102 
ssize_t
 
	$show_f‹w¨d_dñay
(
DEVICE_PARAMS
, *
buf
)

104  
	`•rötf
(
buf
, "%d\n", 0);

105 
	}
}

107 
	$£t_f‹w¨d_dñay
(
d©≠©h
 *
dp
, 
vÆ
)

109 
	`¥_öfo
("%s: xxxáâem±Åÿ£t_f‹w¨d_dñay()\n", 
	`ovs_dp_«me
(
dp
));

110 
	}
}

112 
ssize_t
 
	$°‹e_f‹w¨d_dñay
(
DEVICE_PARAMS
,

113 c⁄° *
buf
, 
size_t
 
Àn
)

115  
	`°‹e_bridge_∑rm
(
DEVICE_ARGS
, 
buf
, 
Àn
, 
£t_f‹w¨d_dñay
);

116 
	}
}

117 
INTERNAL_DEVICE_ATTR
(
f‹w¨d_dñay
, 
S_IRUGO
 | 
S_IWUSR
,

118 
show_f‹w¨d_dñay
, 
°‹e_f‹w¨d_dñay
);

120 
ssize_t
 
	$show_hñlo_time
(
DEVICE_PARAMS
, *
buf
)

122  
	`•rötf
(
buf
, "%d\n", 0);

123 
	}
}

125 
	$£t_hñlo_time
(
d©≠©h
 *
dp
, 
vÆ
)

127 
	`¥_öfo
("%s: xxxáâem±Åÿ£t_hñlo_time()\n", 
	`ovs_dp_«me
(
dp
));

128 
	}
}

130 
ssize_t
 
	$°‹e_hñlo_time
(
DEVICE_PARAMS
,

131 c⁄° *
buf
,

132 
size_t
 
Àn
)

134  
	`°‹e_bridge_∑rm
(
DEVICE_ARGS
, 
buf
, 
Àn
, 
£t_hñlo_time
);

135 
	}
}

136 
INTERNAL_DEVICE_ATTR
(
hñlo_time
, 
S_IRUGO
 | 
S_IWUSR
, 
show_hñlo_time
,

137 
°‹e_hñlo_time
);

139 
ssize_t
 
	$show_max_age
(
DEVICE_PARAMS
, *
buf
)

141  
	`•rötf
(
buf
, "%d\n", 0);

142 
	}
}

144 
	$£t_max_age
(
d©≠©h
 *
dp
, 
vÆ
)

146 
	`¥_öfo
("%s: xxxáâem±Åÿ£t_max_age()\n", 
	`ovs_dp_«me
(
dp
));

147 
	}
}

149 
ssize_t
 
	$°‹e_max_age
(
DEVICE_PARAMS
,

150 c⁄° *
buf
, 
size_t
 
Àn
)

152  
	`°‹e_bridge_∑rm
(
DEVICE_ARGS
, 
buf
, 
Àn
, 
£t_max_age
);

153 
	}
}

154 
INTERNAL_DEVICE_ATTR
(
max_age
, 
S_IRUGO
 | 
S_IWUSR
, 
show_max_age
, 
°‹e_max_age
);

156 
ssize_t
 
	$show_ageög_time
(
DEVICE_PARAMS
, *
buf
)

158  
	`•rötf
(
buf
, "%d\n", 0);

159 
	}
}

161 
	$£t_ageög_time
(
d©≠©h
 *
dp
, 
vÆ
)

163 
	`¥_öfo
("%s: xxxáâem±Åÿ£t_ageög_time()\n", 
	`ovs_dp_«me
(
dp
));

164 
	}
}

166 
ssize_t
 
	$°‹e_ageög_time
(
DEVICE_PARAMS
,

167 c⁄° *
buf
, 
size_t
 
Àn
)

169  
	`°‹e_bridge_∑rm
(
DEVICE_ARGS
, 
buf
, 
Àn
, 
£t_ageög_time
);

170 
	}
}

171 
INTERNAL_DEVICE_ATTR
(
ageög_time
, 
S_IRUGO
 | 
S_IWUSR
, 
show_ageög_time
,

172 
°‹e_ageög_time
);

174 
ssize_t
 
	$show_°p_°©e
(
DEVICE_PARAMS
, *
buf
)

176  
	`•rötf
(
buf
, "%d\n", 0);

177 
	}
}

180 
ssize_t
 
	$°‹e_°p_°©e
(
DEVICE_PARAMS
,

181 c⁄° *
buf
,

182 
size_t
 
Àn
)

184 
d©≠©h
 *
dp
;

185 
ssize_t
 
ªsu…
 = 
Àn
;

187 
	`rcu_ªad_lock
();

189 
dp
 = 
	`sysfs_gë_dp
(
	`to_√t_dev
(
d
));

190 i‡(
dp
)

191 
	`¥_öfo
("%s: xxxáâem±Åÿ£t_°p_°©e()\n", 
	`ovs_dp_«me
(
dp
));

193 
ªsu…
 = -
ENODEV
;

195 
	`rcu_ªad_u∆ock
();

197  
ªsu…
;

198 
	}
}

199 
INTERNAL_DEVICE_ATTR
(
°p_°©e
, 
S_IRUGO
 | 
S_IWUSR
, 
show_°p_°©e
,

200 
°‹e_°p_°©e
);

202 
ssize_t
 
	$show_¥i‹ôy
(
DEVICE_PARAMS
, *
buf
)

204  
	`•rötf
(
buf
, "%d\n", 0);

205 
	}
}

207 
	$£t_¥i‹ôy
(
d©≠©h
 *
dp
, 
vÆ
)

209 
	`¥_öfo
("%s: xxxáâem±Åÿ£t_¥i‹ôy()\n", 
	`ovs_dp_«me
(
dp
));

210 
	}
}

212 
ssize_t
 
	$°‹e_¥i‹ôy
(
DEVICE_PARAMS
,

213 c⁄° *
buf
, 
size_t
 
Àn
)

215  
	`°‹e_bridge_∑rm
(
DEVICE_ARGS
, 
buf
, 
Àn
, 
£t_¥i‹ôy
);

216 
	}
}

217 
INTERNAL_DEVICE_ATTR
(
¥i‹ôy
, 
S_IRUGO
 | 
S_IWUSR
, 
show_¥i‹ôy
, 
°‹e_¥i‹ôy
);

219 
ssize_t
 
	$show_roŸ_id
(
DEVICE_PARAMS
, *
buf
)

221  
	`•rötf
(
buf
, "0000.010203040506\n");

222 
	}
}

223 
INTERNAL_DEVICE_ATTR
(
roŸ_id
, 
S_IRUGO
, 
show_roŸ_id
, 
NULL
);

225 
ssize_t
 
	$show_bridge_id
(
DEVICE_PARAMS
, *
buf
)

227 
vp‹t
 *vport;

228 
ssize_t
 
ªsu…
;

230 
	`rcu_ªad_lock
();

232 
vp‹t
 = 
	`ovs_öã∫Æ_dev_gë_vp‹t
(
	`to_√t_dev
(
d
));

233 i‡(
vp‹t
) {

234 c⁄° *
addr
;

236 
addr
 = 
vp‹t
->
›s
->
	`gë_addr
(vport);

237 
ªsu…
 = 
	`•rötf
(
buf
, "%.2x%.2x.%.2x%.2x%.2x%.2x%.2x%.2x\n",

238 0, 0, 
addr
[0],áddr[1],áddr[2],áddr[3],

239 
addr
[4],áddr[5]);

241 
ªsu…
 = -
ENODEV
;

243 
	`rcu_ªad_u∆ock
();

245  
ªsu…
;

246 
	}
}

247 
INTERNAL_DEVICE_ATTR
(
bridge_id
, 
S_IRUGO
, 
show_bridge_id
, 
NULL
);

249 
ssize_t
 
	$show_roŸ_p‹t
(
DEVICE_PARAMS
, *
buf
)

251  
	`•rötf
(
buf
, "%d\n", 0);

252 
	}
}

253 
INTERNAL_DEVICE_ATTR
(
roŸ_p‹t
, 
S_IRUGO
, 
show_roŸ_p‹t
, 
NULL
);

255 
ssize_t
 
	$show_roŸ_∑th_co°
(
DEVICE_PARAMS
, *
buf
)

257  
	`•rötf
(
buf
, "%d\n", 0);

258 
	}
}

259 
INTERNAL_DEVICE_ATTR
(
roŸ_∑th_co°
, 
S_IRUGO
, 
show_roŸ_∑th_co°
, 
NULL
);

261 
ssize_t
 
	$show_t›ﬁogy_ch™ge
(
DEVICE_PARAMS
, *
buf
)

263  
	`•rötf
(
buf
, "%d\n", 0);

264 
	}
}

265 
INTERNAL_DEVICE_ATTR
(
t›ﬁogy_ch™ge
, 
S_IRUGO
, 
show_t›ﬁogy_ch™ge
, 
NULL
);

267 
ssize_t
 
	$show_t›ﬁogy_ch™ge_dëe˘ed
(
DEVICE_PARAMS
, *
buf
)

269  
	`•rötf
(
buf
, "%d\n", 0);

270 
	}
}

271 
INTERNAL_DEVICE_ATTR
(
t›ﬁogy_ch™ge_dëe˘ed
, 
S_IRUGO
,

272 
show_t›ﬁogy_ch™ge_dëe˘ed
, 
NULL
);

274 
ssize_t
 
	$show_hñlo_timî
(
DEVICE_PARAMS
, *
buf
)

276  
	`•rötf
(
buf
, "%d\n", 0);

277 
	}
}

278 
INTERNAL_DEVICE_ATTR
(
hñlo_timî
, 
S_IRUGO
, 
show_hñlo_timî
, 
NULL
);

280 
ssize_t
 
	$show_t˙_timî
(
DEVICE_PARAMS
, *
buf
)

282  
	`•rötf
(
buf
, "%d\n", 0);

283 
	}
}

284 
INTERNAL_DEVICE_ATTR
(
t˙_timî
, 
S_IRUGO
, 
show_t˙_timî
, 
NULL
);

286 
ssize_t
 
	$show_t›ﬁogy_ch™ge_timî
(
DEVICE_PARAMS
, *
buf
)

288  
	`•rötf
(
buf
, "%d\n", 0);

289 
	}
}

290 
INTERNAL_DEVICE_ATTR
(
t›ﬁogy_ch™ge_timî
, 
S_IRUGO
, 
show_t›ﬁogy_ch™ge_timî
,

291 
NULL
);

293 
ssize_t
 
	$show_gc_timî
(
DEVICE_PARAMS
, *
buf
)

295  
	`•rötf
(
buf
, "%d\n", 0);

296 
	}
}

297 
INTERNAL_DEVICE_ATTR
(
gc_timî
, 
S_IRUGO
, 
show_gc_timî
, 
NULL
);

299 
ssize_t
 
	$show_group_addr
(
DEVICE_PARAMS
, *
buf
)

301  
	`•rötf
(
buf
, "00:01:02:03:04:05\n");

302 
	}
}

304 
ssize_t
 
	$°‹e_group_addr
(
DEVICE_PARAMS
,

305 c⁄° *
buf
, 
size_t
 
Àn
)

307 
d©≠©h
 *
dp
;

308 
ssize_t
 
ªsu…
 = 
Àn
;

310 
	`rcu_ªad_lock
();

312 
dp
 = 
	`sysfs_gë_dp
(
	`to_√t_dev
(
d
));

313 i‡(
dp
)

314 
	`¥_öfo
("%s: xxxáttemptÅo store_group_addr()\n",

315 
	`ovs_dp_«me
(
dp
));

317 
ªsu…
 = -
ENODEV
;

319 
	`rcu_ªad_u∆ock
();

321  
ªsu…
;

322 
	}
}

324 
INTERNAL_DEVICE_ATTR
(
group_addr
, 
S_IRUGO
 | 
S_IWUSR
,

325 
show_group_addr
, 
°‹e_group_addr
);

327 
©åibuã
 *
	gbridge_©ås
[] = {

328 &
DEV_ATTR
(
f‹w¨d_dñay
).
©å
,

329 &
DEV_ATTR
(
hñlo_time
).
©å
,

330 &
DEV_ATTR
(
max_age
).
©å
,

331 &
DEV_ATTR
(
ageög_time
).
©å
,

332 &
DEV_ATTR
(
°p_°©e
).
©å
,

333 &
DEV_ATTR
(
¥i‹ôy
).
©å
,

334 &
DEV_ATTR
(
bridge_id
).
©å
,

335 &
DEV_ATTR
(
roŸ_id
).
©å
,

336 &
DEV_ATTR
(
roŸ_∑th_co°
).
©å
,

337 &
DEV_ATTR
(
roŸ_p‹t
).
©å
,

338 &
DEV_ATTR
(
t›ﬁogy_ch™ge
).
©å
,

339 &
DEV_ATTR
(
t›ﬁogy_ch™ge_dëe˘ed
).
©å
,

340 &
DEV_ATTR
(
hñlo_timî
).
©å
,

341 &
DEV_ATTR
(
t˙_timî
).
©å
,

342 &
DEV_ATTR
(
t›ﬁogy_ch™ge_timî
).
©å
,

343 &
DEV_ATTR
(
gc_timî
).
©å
,

344 &
DEV_ATTR
(
group_addr
).
©å
,

345 
NULL


348 
©åibuã_group
 
	gbridge_group
 = {

349 .
«me
 = 
SYSFS_BRIDGE_ATTR
,

350 .
	g©ås
 = 
bridge_©ås
,

363 
	$ovs_dp_sysfs_add_dp
(
d©≠©h
 *
dp
)

365 
vp‹t
 *vp‹à
	`ovs_vp‹t_π∆
(
dp
, 
OVSP_LOCAL
);

366 
kobje˘
 *
kobj
 = 
vp‹t
->
›s
->
	`gë_kobj
(vport);

367 
îr
;

369 #ifde‡
CONFIG_NET_NS


372 i‡(!
kobj
->
sd
)

373  -
ENOENT
;

376 
îr
 = 
	`sysfs_¸óã_group
(
kobj
, &
bridge_group
);

377 i‡(
îr
) {

378 
	`¥_öfo
("%s: can't create group %s/%s\n",

379 
__func__
, 
	`ovs_dp_«me
(
dp
), 
bridge_group
.
«me
);

380 
out1
;

384 
îr
 = 
	`kobje˘_add
(&
dp
->
ifobj
, 
kobj
, 
SYSFS_BRIDGE_PORT_SUBDIR
);

385 i‡(
îr
) {

386 
	`¥_öfo
("%s: can'tádd kobject (directory) %s/%s\n",

387 
__func__
, 
	`ovs_dp_«me
(
dp
), 
	`kobje˘_«me
(&dp->
ifobj
));

388 
out2
;

390 
	`kobje˘_uevít
(&
dp
->
ifobj
, 
KOBJ_ADD
);

393 
out2
:

394 
	`sysfs_ªmove_group
(
kobj
, &
bridge_group
);

395 
out1
:

396  
îr
;

397 
	}
}

399 
	$ovs_dp_sysfs_dñ_dp
(
d©≠©h
 *
dp
)

401 
vp‹t
 *vp‹à
	`ovs_vp‹t_π∆
(
dp
, 
OVSP_LOCAL
);

402 
kobje˘
 *
kobj
 = 
vp‹t
->
›s
->
	`gë_kobj
(vport);

404 #ifde‡
CONFIG_NET_NS


405 i‡(!
kobj
->
sd
)

409 
	`kobje˘_dñ
(&
dp
->
ifobj
);

410 
	`sysfs_ªmove_group
(
kobj
, &
bridge_group
);

413 
	}
}

415 
	$ovs_dp_sysfs_add_dp
(
d©≠©h
 *
dp
Ë{  0; 
	}
}

416 
	$ovs_dp_sysfs_dñ_dp
(
d©≠©h
 *
dp
Ë{  0; 
	}
}

417 
	$dp_sysfs_add_if
(
vp‹t
 *
p
Ë{  0; 
	}
}

418 
	$dp_sysfs_dñ_if
(
vp‹t
 *
p
Ë{  0; 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/dp_sysfs_if.c

19 
	#¥_fmt
(
fmt
Ë
KBUILD_MODNAME
 ": " 
	)
fmt

21 
	~<löux/ˇ∑bûôy.h
>

22 
	~<löux/kî√l.h
>

23 
	~<löux/√tdevi˚.h
>

24 
	~<löux/if_bridge.h
>

25 
	~<löux/π√éök.h
>

27 
	~"d©≠©h.h
"

28 
	~"dp_sysfs.h
"

29 
	~"vp‹t.h
"

31 #ifde‡
CONFIG_SYSFS


33 
	sbΩ‹t_©åibuã
 {

34 
©åibuã
 
	m©å
;

35 
ssize_t
 (*
show
)(
	mvp‹t
 *, *);

36 
ssize_t
 (*
°‹e
)(
	mvp‹t
 *, );

39 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,36)

40 
	#BRPORT_ATTR
(
_«me
, 
_mode
, 
_show
, 
_°‹e
) \

41 
bΩ‹t_©åibuã
 
bΩ‹t_©å_
##
_«me
 = { \

42 .
©å
 = {.
«me
 = 
	`__°rögify
(
_«me
), \

43 .
mode
 = 
_mode
 }, \

44 .
show
 = 
_show
, \

45 .
°‹e
 = 
_°‹e
, \

46 };

	)

48 
	#BRPORT_ATTR
(
_«me
, 
_mode
, 
_show
, 
_°‹e
) \

49 
bΩ‹t_©åibuã
 
bΩ‹t_©å_
##
_«me
 = { \

50 .
©å
 = {.
«me
 = 
	`__°rögify
(
_«me
), \

51 .
mode
 = 
_mode
, \

52 .
ow√r
 = 
THIS_MODULE
, }, \

53 .
show
 = 
_show
, \

54 .
°‹e
 = 
_°‹e
, \

55 };

	)

58 
ssize_t
 
	$show_∑th_co°
(
vp‹t
 *
p
, *
buf
)

60  
	`•rötf
(
buf
, "%d\n", 0);

61 
	}
}

62 
ssize_t
 
	$°‹e_∑th_co°
(
vp‹t
 *
p
, 
v
)

65 
	}
}

66 
BRPORT_ATTR
(
∑th_co°
, 
S_IRUGO
 | 
S_IWUSR
,

67 
show_∑th_co°
, 
°‹e_∑th_co°
);

69 
ssize_t
 
	$show_¥i‹ôy
(
vp‹t
 *
p
, *
buf
)

71  
	`•rötf
(
buf
, "%d\n", 0);

72 
	}
}

73 
ssize_t
 
	$°‹e_¥i‹ôy
(
vp‹t
 *
p
, 
v
)

76 
	}
}

77 
BRPORT_ATTR
(
¥i‹ôy
, 
S_IRUGO
 | 
S_IWUSR
,

78 
show_¥i‹ôy
, 
°‹e_¥i‹ôy
);

80 
ssize_t
 
	$show_desig«ãd_roŸ
(
vp‹t
 *
p
, *
buf
)

82  
	`•rötf
(
buf
, "0000.010203040506\n");

83 
	}
}

84 
BRPORT_ATTR
(
desig«ãd_roŸ
, 
S_IRUGO
, 
show_desig«ãd_roŸ
, 
NULL
);

86 
ssize_t
 
	$show_desig«ãd_bridge
(
vp‹t
 *
p
, *
buf
)

88  
	`•rötf
(
buf
, "0000.060504030201\n");

89 
	}
}

90 
BRPORT_ATTR
(
desig«ãd_bridge
, 
S_IRUGO
, 
show_desig«ãd_bridge
, 
NULL
);

92 
ssize_t
 
	$show_desig«ãd_p‹t
(
vp‹t
 *
p
, *
buf
)

94  
	`•rötf
(
buf
, "%d\n", 0);

95 
	}
}

96 
BRPORT_ATTR
(
desig«ãd_p‹t
, 
S_IRUGO
, 
show_desig«ãd_p‹t
, 
NULL
);

98 
ssize_t
 
	$show_desig«ãd_co°
(
vp‹t
 *
p
, *
buf
)

100  
	`•rötf
(
buf
, "%d\n", 0);

101 
	}
}

102 
BRPORT_ATTR
(
desig«ãd_co°
, 
S_IRUGO
, 
show_desig«ãd_co°
, 
NULL
);

104 
ssize_t
 
	$show_p‹t_id
(
vp‹t
 *
p
, *
buf
)

106  
	`•rötf
(
buf
, "0x%x\n", 0);

107 
	}
}

108 
BRPORT_ATTR
(
p‹t_id
, 
S_IRUGO
, 
show_p‹t_id
, 
NULL
);

110 
ssize_t
 
	$show_p‹t_no
(
vp‹t
 *
p
, *
buf
)

112  
	`•rötf
(
buf
, "0x%x\n", 
p
->
p‹t_no
);

113 
	}
}

115 
BRPORT_ATTR
(
p‹t_no
, 
S_IRUGO
, 
show_p‹t_no
, 
NULL
);

117 
ssize_t
 
	$show_ch™ge_ack
(
vp‹t
 *
p
, *
buf
)

119  
	`•rötf
(
buf
, "%d\n", 0);

120 
	}
}

121 
BRPORT_ATTR
(
ch™ge_ack
, 
S_IRUGO
, 
show_ch™ge_ack
, 
NULL
);

123 
ssize_t
 
	$show_c⁄fig_≥ndög
(
vp‹t
 *
p
, *
buf
)

125  
	`•rötf
(
buf
, "%d\n", 0);

126 
	}
}

127 
BRPORT_ATTR
(
c⁄fig_≥ndög
, 
S_IRUGO
, 
show_c⁄fig_≥ndög
, 
NULL
);

129 
ssize_t
 
	$show_p‹t_°©e
(
vp‹t
 *
p
, *
buf
)

131  
	`•rötf
(
buf
, "%d\n", 0);

132 
	}
}

133 
BRPORT_ATTR
(
°©e
, 
S_IRUGO
, 
show_p‹t_°©e
, 
NULL
);

135 
ssize_t
 
	$show_mesßge_age_timî
(
vp‹t
 *
p
, *
buf
)

137  
	`•rötf
(
buf
, "%d\n", 0);

138 
	}
}

139 
BRPORT_ATTR
(
mesßge_age_timî
, 
S_IRUGO
, 
show_mesßge_age_timî
, 
NULL
);

141 
ssize_t
 
	$show_f‹w¨d_dñay_timî
(
vp‹t
 *
p
, *
buf
)

143  
	`•rötf
(
buf
, "%d\n", 0);

144 
	}
}

145 
BRPORT_ATTR
(
f‹w¨d_dñay_timî
, 
S_IRUGO
, 
show_f‹w¨d_dñay_timî
, 
NULL
);

147 
ssize_t
 
	$show_hﬁd_timî
(
vp‹t
 *
p
, *
buf
)

149  
	`•rötf
(
buf
, "%d\n", 0);

150 
	}
}

151 
BRPORT_ATTR
(
hﬁd_timî
, 
S_IRUGO
, 
show_hﬁd_timî
, 
NULL
);

153 
bΩ‹t_©åibuã
 *
	gbΩ‹t_©ås
[] = {

154 &
bΩ‹t_©å_∑th_co°
,

155 &
bΩ‹t_©å_¥i‹ôy
,

156 &
bΩ‹t_©å_p‹t_id
,

157 &
bΩ‹t_©å_p‹t_no
,

158 &
bΩ‹t_©å_desig«ãd_roŸ
,

159 &
bΩ‹t_©å_desig«ãd_bridge
,

160 &
bΩ‹t_©å_desig«ãd_p‹t
,

161 &
bΩ‹t_©å_desig«ãd_co°
,

162 &
bΩ‹t_©å_°©e
,

163 &
bΩ‹t_©å_ch™ge_ack
,

164 &
bΩ‹t_©å_c⁄fig_≥ndög
,

165 &
bΩ‹t_©å_mesßge_age_timî
,

166 &
bΩ‹t_©å_f‹w¨d_dñay_timî
,

167 &
bΩ‹t_©å_hﬁd_timî
,

168 
NULL


171 
	#to_vp‹t_©å
(
_©
Ë
	`c⁄èöî_of
(_©, 
bΩ‹t_©åibuã
, 
©å
)

	)

172 
	#to_vp‹t
(
obj
Ë
	`c⁄èöî_of
(obj, 
vp‹t
, 
kobj
)

	)

174 
ssize_t
 
	$bΩ‹t_show
(
kobje˘
 *
kobj
,

175 
©åibuã
 *
©å
, *
buf
)

177 
bΩ‹t_©åibuã
 *
bΩ‹t_©å
 = 
	`to_vp‹t_©å
(
©å
);

178 
vp‹t
 *
p
 = 
	`to_vp‹t
(
kobj
);

180  
bΩ‹t_©å
->
	`show
(
p
, 
buf
);

181 
	}
}

183 
ssize_t
 
	$bΩ‹t_°‹e
(
kobje˘
 *
kobj
,

184 
©åibuã
 *
©å
,

185 c⁄° *
buf
, 
size_t
 
cou¡
)

187 
vp‹t
 *
p
 = 
	`to_vp‹t
(
kobj
);

188 
ssize_t
 
ªt
 = -
EINVAL
;

190 i‡(!
	`ˇ∑bÀ
(
CAP_NET_ADMIN
))

191  -
EPERM
;

193 
	`¥_w¨nög
("%s: xxx writingÖortÖarmsÇot supported yet!\n",

194 
	`ovs_dp_«me
(
p
->
dp
));

196  
ªt
;

197 
	}
}

199 
sysfs_›s
 
	govs_bΩ‹t_sysfs_›s
 = {

200 .
show
 = 
bΩ‹t_show
,

201 .
	g°‹e
 = 
bΩ‹t_°‹e
,

209 
	$ovs_dp_sysfs_add_if
(
vp‹t
 *
p
)

211 
d©≠©h
 *
dp
 = 
p
->dp;

212 
vp‹t
 *
loˇl_p‹t
 = 
	`ovs_vp‹t_π∆
(
dp
, 
OVSP_LOCAL
);

213 
bΩ‹t_©åibuã
 **
a
;

214 
îr
;

217 i‡(!
p
->
›s
->
gë_kobj
)

218  -
ENOENT
;

220 #ifde‡
CONFIG_NET_NS


224 i‡(!
p
->
kobj
.
sd
)

225  -
ENOENT
;

228 
îr
 = 
	`kobje˘_add
(&
p
->
kobj
,Ö->
›s
->
	`gë_kobj
(p),

229 
SYSFS_BRIDGE_PORT_ATTR
);

230 i‡(
îr
)

231 
îr
;

235 
îr
 = 
	`sysfs_¸óã_lök
(&
p
->
kobj
, 
loˇl_p‹t
->
›s
->
	`gë_kobj
(local_port),

236 
SYSFS_BRIDGE_PORT_LINK
);

237 i‡(
îr
)

238 
îr_dñ
;

241 
a
 = 
bΩ‹t_©ås
; *a; ++a) {

242 
îr
 = 
	`sysfs_¸óã_fûe
(&
p
->
kobj
, &((*
a
)->
©å
));

243 i‡(
îr
)

244 
îr_dñ
;

249 
îr
 = 
	`sysfs_¸óã_lök
(&
dp
->
ifobj
, &
p
->
kobj
,Ö->
›s
->
	`gë_«me
(p));

250 i‡(
îr
)

251 
îr_dñ
;

252 
	`°r˝y
(
p
->
lök«me
,Ö->
›s
->
	`gë_«me
(p));

254 
	`kobje˘_uevít
(&
p
->
kobj
, 
KOBJ_ADD
);

258 
îr_dñ
:

259 
	`kobje˘_dñ
(&
p
->
kobj
);

260 
îr
:

261 
p
->
lök«me
[0] = 0;

262  
îr
;

263 
	}
}

265 
	$ovs_dp_sysfs_dñ_if
(
vp‹t
 *
p
)

267 i‡(
p
->
lök«me
[0]) {

268 
	`sysfs_ªmove_lök
(&
p
->
dp
->
ifobj
,Ö->
lök«me
);

269 
	`kobje˘_uevít
(&
p
->
kobj
, 
KOBJ_REMOVE
);

270 
	`kobje˘_dñ
(&
p
->
kobj
);

271 
p
->
lök«me
[0] = '\0';

274 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/flow.c

19 
	~"Êow.h
"

20 
	~"d©≠©h.h
"

21 
	~<löux/uac˚ss.h
>

22 
	~<löux/√tdevi˚.h
>

23 
	~<löux/ëhîdevi˚.h
>

24 
	~<löux/if_ëhî.h
>

25 
	~<löux/if_vœn.h
>

26 
	~<√t/Œc_pdu.h
>

27 
	~<löux/kî√l.h
>

28 
	~<löux/jhash.h
>

29 
	~<löux/jiffõs.h
>

30 
	~<löux/Œc.h
>

31 
	~<löux/moduÀ.h
>

32 
	~<löux/ö.h
>

33 
	~<löux/rcupd©e.h
>

34 
	~<löux/if_¨p.h
>

35 
	~<löux/ù.h
>

36 
	~<löux/ùv6.h
>

37 
	~<löux/t˝.h
>

38 
	~<löux/udp.h
>

39 
	~<löux/icmp.h
>

40 
	~<löux/icmpv6.h
>

41 
	~<löux/rculi°.h
>

42 
	~<√t/ù.h
>

43 
	~<√t/ùv6.h
>

44 
	~<√t/ndisc.h
>

46 
	~"vœn.h
"

48 
kmem_ˇche
 *
	gÊow_ˇche
;

50 
	$check_hódî
(
sk_buff
 *
skb
, 
Àn
)

52 i‡(
	`u∆ikñy
(
skb
->
Àn
 <Üen))

53  -
EINVAL
;

54 i‡(
	`u∆ikñy
(!
	`pskb_may_puŒ
(
skb
, 
Àn
)))

55  -
ENOMEM
;

57 
	}
}

59 
boﬁ
 
	$¨phdr_ok
(
sk_buff
 *
skb
)

61  
	`pskb_may_puŒ
(
skb
, 
	`skb_√tw‹k_off£t
(skb) +

62 (
¨p_ëh_hódî
));

63 
	}
}

65 
	$check_ùhdr
(
sk_buff
 *
skb
)

67 
nh_ofs
 = 
	`skb_√tw‹k_off£t
(
skb
);

68 
ù_Àn
;

69 
îr
;

71 
îr
 = 
	`check_hódî
(
skb
, 
nh_ofs
 + (
ùhdr
));

72 i‡(
	`u∆ikñy
(
îr
))

73  
îr
;

75 
ù_Àn
 = 
	`ù_hdæí
(
skb
);

76 i‡(
	`u∆ikñy
(
ù_Àn
 < (
ùhdr
) ||

77 
skb
->
Àn
 < 
nh_ofs
 + 
ù_Àn
))

78  -
EINVAL
;

80 
	`skb_£t_å™•‹t_hódî
(
skb
, 
nh_ofs
 + 
ù_Àn
);

82 
	}
}

84 
boﬁ
 
	$t˝hdr_ok
(
sk_buff
 *
skb
)

86 
th_ofs
 = 
	`skb_å™•‹t_off£t
(
skb
);

87 
t˝_Àn
;

89 i‡(
	`u∆ikñy
(!
	`pskb_may_puŒ
(
skb
, 
th_ofs
 + (
t˝hdr
))))

90  
Ál£
;

92 
t˝_Àn
 = 
	`t˝_hdæí
(
skb
);

93 i‡(
	`u∆ikñy
(
t˝_Àn
 < (
t˝hdr
) ||

94 
skb
->
Àn
 < 
th_ofs
 + 
t˝_Àn
))

95  
Ál£
;

97  
åue
;

98 
	}
}

100 
boﬁ
 
	$udphdr_ok
(
sk_buff
 *
skb
)

102  
	`pskb_may_puŒ
(
skb
, 
	`skb_å™•‹t_off£t
(skb) +

103 (
udphdr
));

104 
	}
}

106 
boﬁ
 
	$icmphdr_ok
(
sk_buff
 *
skb
)

108  
	`pskb_may_puŒ
(
skb
, 
	`skb_å™•‹t_off£t
(skb) +

109 (
icmphdr
));

110 
	}
}

112 
u64
 
	$ovs_Êow_u£d_time
(
Êow_jiffõs
)

114 
time•ec
 
cur_ts
;

115 
u64
 
cur_ms
, 
idÀ_ms
;

117 
	`ktime_gë_ts
(&
cur_ts
);

118 
idÀ_ms
 = 
	`jiffõs_to_m£cs
(
jiffõs
 - 
Êow_jiffõs
);

119 
cur_ms
 = (
u64
)
cur_ts
.
tv_£c
 * 
MSEC_PER_SEC
 +

120 
cur_ts
.
tv_n£c
 / 
NSEC_PER_MSEC
;

122  
cur_ms
 - 
idÀ_ms
;

123 
	}
}

125 
	#SW_FLOW_KEY_OFFSET
(
fõld
) \

126 (
	`off£tof
(
sw_Êow_key
, 
fõld
) + \

127 
	`FIELD_SIZEOF
(
sw_Êow_key
, 
fõld
))

	)

129 
	$∑r£_ùv6hdr
(
sk_buff
 *
skb
, 
sw_Êow_key
 *
key
,

130 *
key_À≈
)

132 
nh_ofs
 = 
	`skb_√tw‹k_off£t
(
skb
);

133 
nh_Àn
;

134 
∑ylﬂd_ofs
;

135 
ùv6hdr
 *
nh
;

136 
uöt8_t
 
√xthdr
;

137 
__be16
 
‰ag_off
;

138 
îr
;

140 *
key_À≈
 = 
	`SW_FLOW_KEY_OFFSET
(
ùv6
.
œbñ
);

142 
îr
 = 
	`check_hódî
(
skb
, 
nh_ofs
 + (*
nh
));

143 i‡(
	`u∆ikñy
(
îr
))

144  
îr
;

146 
nh
 = 
	`ùv6_hdr
(
skb
);

147 
√xthdr
 = 
nh
->nexthdr;

148 
∑ylﬂd_ofs
 = (
u8
 *)(
nh
 + 1Ë- 
skb
->
d©a
;

150 
key
->
ù
.
¥Ÿo
 = 
NEXTHDR_NONE
;

151 
key
->
ù
.
tos
 = 
	`ùv6_gë_dsfõld
(
nh
);

152 
key
->
ù
.
âl
 = 
nh
->
h›_limô
;

153 
key
->
ùv6
.
œbñ
 = *(
__be32
 *)
nh
 & 
	`ht⁄l
(
IPV6_FLOWINFO_FLOWLABEL
);

154 
key
->
ùv6
.
addr
.
§c
 = 
nh
->
ßddr
;

155 
key
->
ùv6
.
addr
.
d°
 = 
nh
->
daddr
;

157 
∑ylﬂd_ofs
 = 
	`ùv6_skù_exthdr
(
skb
,Öaylﬂd_ofs, &
√xthdr
, &
‰ag_off
);

158 i‡(
	`u∆ikñy
(
∑ylﬂd_ofs
 < 0))

159  -
EINVAL
;

161 i‡(
‰ag_off
) {

162 i‡(
‰ag_off
 & 
	`ht⁄s
(~0x7))

163 
key
->
ù
.
‰ag
 = 
OVS_FRAG_TYPE_LATER
;

165 
key
->
ù
.
‰ag
 = 
OVS_FRAG_TYPE_FIRST
;

168 
nh_Àn
 = 
∑ylﬂd_ofs
 - 
nh_ofs
;

169 
	`skb_£t_å™•‹t_hódî
(
skb
, 
nh_ofs
 + 
nh_Àn
);

170 
key
->
ù
.
¥Ÿo
 = 
√xthdr
;

171  
nh_Àn
;

172 
	}
}

174 
boﬁ
 
	$icmp6hdr_ok
(
sk_buff
 *
skb
)

176  
	`pskb_may_puŒ
(
skb
, 
	`skb_å™•‹t_off£t
(skb) +

177 (
icmp6hdr
));

178 
	}
}

180 
	#TCP_FLAGS_OFFSET
 13

	)

181 
	#TCP_FLAG_MASK
 0x3f

	)

183 
	$ovs_Êow_u£d
(
sw_Êow
 *
Êow
, 
sk_buff
 *
skb
)

185 
u8
 
t˝_Êags
 = 0;

187 i‡((
Êow
->
key
.
ëh
.
ty≥
 =
	`ht⁄s
(
ETH_P_IP
) ||

188 
Êow
->
key
.
ëh
.
ty≥
 =
	`ht⁄s
(
ETH_P_IPV6
)) &&

189 
Êow
->
key
.
ù
.
¥Ÿo
 =
IPPROTO_TCP
 &&

190 
	`likñy
(
skb
->
Àn
 >
	`skb_å™•‹t_off£t
(skbË+ (
t˝hdr
))) {

191 
u8
 *
t˝
 = (u8 *)
	`t˝_hdr
(
skb
);

192 
t˝_Êags
 = *(
t˝
 + 
TCP_FLAGS_OFFSET
Ë& 
TCP_FLAG_MASK
;

195 
	`•ö_lock
(&
Êow
->
lock
);

196 
Êow
->
u£d
 = 
jiffõs
;

197 
Êow
->
∑ckë_cou¡
++;

198 
Êow
->
byã_cou¡
 +
skb
->
Àn
;

199 
Êow
->
t˝_Êags
 |=Åcp_flags;

200 
	`•ö_u∆ock
(&
Êow
->
lock
);

201 
	}
}

203 
sw_Êow_a˘i⁄s
 *
	$ovs_Êow_a˘i⁄s_Æloc
(
size
)

205 
sw_Êow_a˘i⁄s
 *
sÁ
;

207 i‡(
size
 > 
MAX_ACTIONS_BUFSIZE
)

208  
	`ERR_PTR
(-
EINVAL
);

210 
sÁ
 = 
	`kmÆloc
((*sÁË+ 
size
, 
GFP_KERNEL
);

211 i‡(!
sÁ
)

212  
	`ERR_PTR
(-
ENOMEM
);

214 
sÁ
->
a˘i⁄s_Àn
 = 0;

215  
sÁ
;

216 
	}
}

218 
sw_Êow
 *
	$ovs_Êow_Æloc
()

220 
sw_Êow
 *
Êow
;

222 
Êow
 = 
	`kmem_ˇche_Æloc
(
Êow_ˇche
, 
GFP_KERNEL
);

223 i‡(!
Êow
)

224  
	`ERR_PTR
(-
ENOMEM
);

226 
	`•ö_lock_öô
(&
Êow
->
lock
);

227 
Êow
->
sf_a˘s
 = 
NULL
;

229  
Êow
;

230 
	}
}

232 
hli°_hód
 *
	$föd_buckë
(
Êow_èbÀ
 *
èbÀ
, 
u32
 
hash
)

234 
hash
 = 
	`jhash_1w‹d
(hash, 
èbÀ
->
hash_£ed
);

235  
	`Êex_¨øy_gë
(
èbÀ
->
buckës
,

236 (
hash
 & (
èbÀ
->
n_buckës
 - 1)));

237 
	}
}

239 
Êex_¨øy
 *
	$Æloc_buckës
(
n_buckës
)

241 
Êex_¨øy
 *
buckës
;

242 
i
, 
îr
;

244 
buckës
 = 
	`Êex_¨øy_Æloc
((
hli°_hód
 *),

245 
n_buckës
, 
GFP_KERNEL
);

246 i‡(!
buckës
)

247  
NULL
;

249 
îr
 = 
	`Êex_¨øy_¥óŒoc
(
buckës
, 0, 
n_buckës
, 
GFP_KERNEL
);

250 i‡(
îr
) {

251 
	`Êex_¨øy_‰ì
(
buckës
);

252  
NULL
;

255 
i
 = 0; i < 
n_buckës
; i++)

256 
	`INIT_HLIST_HEAD
((
hli°_hód
 *)

257 
	`Êex_¨øy_gë
(
buckës
, 
i
));

259  
buckës
;

260 
	}
}

262 
	$‰ì_buckës
(
Êex_¨øy
 *
buckës
)

264 
	`Êex_¨øy_‰ì
(
buckës
);

265 
	}
}

267 
Êow_èbÀ
 *
	$ovs_Êow_tbl_Æloc
(
√w_size
)

269 
Êow_èbÀ
 *
èbÀ
 = 
	`kmÆloc
((*èbÀ), 
GFP_KERNEL
);

271 i‡(!
èbÀ
)

272  
NULL
;

274 
èbÀ
->
buckës
 = 
	`Æloc_buckës
(
√w_size
);

276 i‡(!
èbÀ
->
buckës
) {

277 
	`k‰ì
(
èbÀ
);

278  
NULL
;

280 
èbÀ
->
n_buckës
 = 
√w_size
;

281 
èbÀ
->
cou¡
 = 0;

282 
èbÀ
->
node_vî
 = 0;

283 
èbÀ
->
kìp_Êows
 = 
Ál£
;

284 
	`gë_øndom_byãs
(&
èbÀ
->
hash_£ed
, (
u32
));

286  
èbÀ
;

287 
	}
}

289 
	$ovs_Êow_tbl_de°roy
(
Êow_èbÀ
 *
èbÀ
)

291 
i
;

293 i‡(!
èbÀ
)

296 i‡(
èbÀ
->
kìp_Êows
)

297 
skù_Êows
;

299 
i
 = 0; i < 
èbÀ
->
n_buckës
; i++) {

300 
sw_Êow
 *
Êow
;

301 
hli°_hód
 *
hód
 = 
	`Êex_¨øy_gë
(
èbÀ
->
buckës
, 
i
);

302 
hli°_node
 *
node
, *
n
;

303 
vî
 = 
èbÀ
->
node_vî
;

305 
	`hli°_f‹_óch_íåy_ß„
(
Êow
, 
node
, 
n
, 
hód
, 
hash_node
[
vî
]) {

306 
	`hli°_dñ_rcu
(&
Êow
->
hash_node
[
vî
]);

307 
	`ovs_Êow_‰ì
(
Êow
);

311 
skù_Êows
:

312 
	`‰ì_buckës
(
èbÀ
->
buckës
);

313 
	`k‰ì
(
èbÀ
);

314 
	}
}

316 
	$Êow_tbl_de°roy_rcu_cb
(
rcu_hód
 *
rcu
)

318 
Êow_èbÀ
 *
èbÀ
 = 
	`c⁄èöî_of
(
rcu
, flow_table,Ñcu);

320 
	`ovs_Êow_tbl_de°roy
(
èbÀ
);

321 
	}
}

323 
	$ovs_Êow_tbl_de„ºed_de°roy
(
Êow_èbÀ
 *
èbÀ
)

325 i‡(!
èbÀ
)

328 
	`ˇŒ_rcu
(&
èbÀ
->
rcu
, 
Êow_tbl_de°roy_rcu_cb
);

329 
	}
}

331 
sw_Êow
 *
	$ovs_Êow_tbl_√xt
(
Êow_èbÀ
 *
èbÀ
, 
u32
 *
buckë
, u32 *
œ°
)

333 
sw_Êow
 *
Êow
;

334 
hli°_hód
 *
hód
;

335 
hli°_node
 *
n
;

336 
vî
;

337 
i
;

339 
vî
 = 
èbÀ
->
node_vî
;

340 *
buckë
 < 
èbÀ
->
n_buckës
) {

341 
i
 = 0;

342 
hód
 = 
	`Êex_¨øy_gë
(
èbÀ
->
buckës
, *
buckë
);

343 
	`hli°_f‹_óch_íåy_rcu
(
Êow
, 
n
, 
hód
, 
hash_node
[
vî
]) {

344 i‡(
i
 < *
œ°
) {

345 
i
++;

348 *
œ°
 = 
i
 + 1;

349  
Êow
;

351 (*
buckë
)++;

352 *
œ°
 = 0;

355  
NULL
;

356 
	}
}

358 
	$__Êow_tbl_ö£π
(
Êow_èbÀ
 *
èbÀ
, 
sw_Êow
 *
Êow
)

360 
hli°_hód
 *
hód
;

361 
hód
 = 
	`föd_buckë
(
èbÀ
, 
Êow
->
hash
);

362 
	`hli°_add_hód_rcu
(&
Êow
->
hash_node
[
èbÀ
->
node_vî
], 
hód
);

363 
èbÀ
->
cou¡
++;

364 
	}
}

366 
	$Êow_èbÀ_c›y_Êows
(
Êow_èbÀ
 *
ﬁd
, Êow_èbÀ *
√w
)

368 
ﬁd_vî
;

369 
i
;

371 
ﬁd_vî
 = 
ﬁd
->
node_vî
;

372 
√w
->
node_vî
 = !
ﬁd_vî
;

375 
i
 = 0; i < 
ﬁd
->
n_buckës
; i++) {

376 
sw_Êow
 *
Êow
;

377 
hli°_hód
 *
hód
;

378 
hli°_node
 *
n
;

380 
hód
 = 
	`Êex_¨øy_gë
(
ﬁd
->
buckës
, 
i
);

382 
	`hli°_f‹_óch_íåy
(
Êow
, 
n
, 
hód
, 
hash_node
[
ﬁd_vî
])

383 
	`__Êow_tbl_ö£π
(
√w
, 
Êow
);

385 
ﬁd
->
kìp_Êows
 = 
åue
;

386 
	}
}

388 
Êow_èbÀ
 *
	$__Êow_tbl_ªhash
(
Êow_èbÀ
 *
èbÀ
, 
n_buckës
)

390 
Êow_èbÀ
 *
√w_èbÀ
;

392 
√w_èbÀ
 = 
	`ovs_Êow_tbl_Æloc
(
n_buckës
);

393 i‡(!
√w_èbÀ
)

394  
	`ERR_PTR
(-
ENOMEM
);

396 
	`Êow_èbÀ_c›y_Êows
(
èbÀ
, 
√w_èbÀ
);

398  
√w_èbÀ
;

399 
	}
}

401 
Êow_èbÀ
 *
	$ovs_Êow_tbl_ªhash
(
Êow_èbÀ
 *
èbÀ
)

403  
	`__Êow_tbl_ªhash
(
èbÀ
,ÅabÀ->
n_buckës
);

404 
	}
}

406 
Êow_èbÀ
 *
	$ovs_Êow_tbl_ex∑nd
(
Êow_èbÀ
 *
èbÀ
)

408  
	`__Êow_tbl_ªhash
(
èbÀ
,ÅabÀ->
n_buckës
 * 2);

409 
	}
}

411 
	$ovs_Êow_‰ì
(
sw_Êow
 *
Êow
)

413 i‡(
	`u∆ikñy
(!
Êow
))

416 
	`k‰ì
((
sf_Êow_a˘s
 
__f‹˚
 *)
Êow
->
sf_a˘s
);

417 
	`kmem_ˇche_‰ì
(
Êow_ˇche
, 
Êow
);

418 
	}
}

421 
	$rcu_‰ì_Êow_ˇŒback
(
rcu_hód
 *
rcu
)

423 
sw_Êow
 *
Êow
 = 
	`c⁄èöî_of
(
rcu
, sw_flow,Ñcu);

425 
	`ovs_Êow_‰ì
(
Êow
);

426 
	}
}

430 
	$ovs_Êow_de„ºed_‰ì
(
sw_Êow
 *
Êow
)

432 
	`ˇŒ_rcu
(&
Êow
->
rcu
, 
rcu_‰ì_Êow_ˇŒback
);

433 
	}
}

436 
	$rcu_‰ì_a˘s_ˇŒback
(
rcu_hód
 *
rcu
)

438 
sw_Êow_a˘i⁄s
 *
sf_a˘s
 = 
	`c⁄èöî_of
(
rcu
,

439 
sw_Êow_a˘i⁄s
, 
rcu
);

440 
	`k‰ì
(
sf_a˘s
);

441 
	}
}

445 
	$ovs_Êow_de„ºed_‰ì_a˘s
(
sw_Êow_a˘i⁄s
 *
sf_a˘s
)

447 
	`ˇŒ_rcu
(&
sf_a˘s
->
rcu
, 
rcu_‰ì_a˘s_ˇŒback
);

448 
	}
}

450 
	$∑r£_vœn
(
sk_buff
 *
skb
, 
sw_Êow_key
 *
key
)

452 
	sqèg_¥efix
 {

453 
__be16
 
ëh_ty≥
;

454 
__be16
 
tci
;

456 
qèg_¥efix
 *
qp
;

458 i‡(
	`u∆ikñy
(
skb
->
Àn
 < (
qèg_¥efix
Ë+ (
__be16
)))

461 i‡(
	`u∆ikñy
(!
	`pskb_may_puŒ
(
skb
, (
qèg_¥efix
) +

462 (
__be16
))))

463  -
ENOMEM
;

465 
qp
 = (
qèg_¥efix
 *Ë
skb
->
d©a
;

466 
key
->
ëh
.
tci
 = 
qp
->tcò| 
	`ht⁄s
(
VLAN_TAG_PRESENT
);

467 
	`__skb_puŒ
(
skb
, (
qèg_¥efix
));

470 
	}
}

472 
__be16
 
	$∑r£_ëhîty≥
(
sk_buff
 *
skb
)

474 
	sŒc_¢≠_hdr
 {

475 
u8
 
dßp
;

476 
u8
 
sßp
;

477 
u8
 
˘æ
;

478 
u8
 
oui
[3];

479 
__be16
 
ëhîty≥
;

481 
Œc_¢≠_hdr
 *
Œc
;

482 
__be16
 
¥Ÿo
;

484 
¥Ÿo
 = *(
__be16
 *Ë
skb
->
d©a
;

485 
	`__skb_puŒ
(
skb
, (
__be16
));

487 i‡(
	`¡ohs
(
¥Ÿo
) >= 1536)

488  
¥Ÿo
;

490 i‡(
skb
->
Àn
 < (
Œc_¢≠_hdr
))

491  
	`ht⁄s
(
ETH_P_802_2
);

493 i‡(
	`u∆ikñy
(!
	`pskb_may_puŒ
(
skb
, (
Œc_¢≠_hdr
))))

494  
	`ht⁄s
(0);

496 
Œc
 = (
Œc_¢≠_hdr
 *Ë
skb
->
d©a
;

497 i‡(
Œc
->
dßp
 !
LLC_SAP_SNAP
 ||

498 
Œc
->
sßp
 !
LLC_SAP_SNAP
 ||

499 (
Œc
->
oui
[0] |Ülc->oui[1] |Ülc->oui[2]) != 0)

500  
	`ht⁄s
(
ETH_P_802_2
);

502 
	`__skb_puŒ
(
skb
, (
Œc_¢≠_hdr
));

503  
Œc
->
ëhîty≥
;

504 
	}
}

506 
	$∑r£_icmpv6
(
sk_buff
 *
skb
, 
sw_Êow_key
 *
key
,

507 *
key_À≈
, 
nh_Àn
)

509 
icmp6hdr
 *
icmp
 = 
	`icmp6_hdr
(
skb
);

510 
îr‹
 = 0;

511 
key_Àn
;

516 
key
->
ùv6
.
ç
.
§c
 = 
	`ht⁄s
(
icmp
->
icmp6_ty≥
);

517 
key
->
ùv6
.
ç
.
d°
 = 
	`ht⁄s
(
icmp
->
icmp6_code
);

518 
key_Àn
 = 
	`SW_FLOW_KEY_OFFSET
(
ùv6
.
ç
);

520 i‡(
icmp
->
icmp6_code
 == 0 &&

521 (
icmp
->
icmp6_ty≥
 =
NDISC_NEIGHBOUR_SOLICITATION
 ||

522 
icmp
->
icmp6_ty≥
 =
NDISC_NEIGHBOUR_ADVERTISEMENT
)) {

523 
icmp_Àn
 = 
skb
->
Àn
 - 
	`skb_å™•‹t_off£t
(skb);

524 
nd_msg
 *
nd
;

525 
off£t
;

527 
key_Àn
 = 
	`SW_FLOW_KEY_OFFSET
(
ùv6
.
nd
);

532 i‡(
	`u∆ikñy
(
icmp_Àn
 < (*
nd
)))

533 
out
;

534 i‡(
	`u∆ikñy
(
	`skb_löórize
(
skb
))) {

535 
îr‹
 = -
ENOMEM
;

536 
out
;

539 
nd
 = (
nd_msg
 *)
	`skb_å™•‹t_hódî
(
skb
);

540 
key
->
ùv6
.
nd
.
èrgë
 =Çd->target;

541 
key_Àn
 = 
	`SW_FLOW_KEY_OFFSET
(
ùv6
.
nd
);

543 
icmp_Àn
 -(*
nd
);

544 
off£t
 = 0;

545 
icmp_Àn
 >= 8) {

546 
nd_›t_hdr
 *
nd_›t
 =

547 (
nd_›t_hdr
 *)(
nd
->
›t
 + 
off£t
);

548 
›t_Àn
 = 
nd_›t
->
nd_›t_Àn
 * 8;

550 i‡(
	`u∆ikñy
(!
›t_Àn
 || o±_À¿> 
icmp_Àn
))

551 
övÆid
;

557 i‡(
nd_›t
->
nd_›t_ty≥
 =
ND_OPT_SOURCE_LL_ADDR


558 && 
›t_Àn
 == 8) {

559 i‡(
	`u∆ikñy
(!
	`is_zîo_ëhî_addr
(
key
->
ùv6
.
nd
.
¶l
)))

560 
övÆid
;

561 
	`mem˝y
(
key
->
ùv6
.
nd
.
¶l
,

562 &
nd
->
›t
[
off£t
+(*
nd_›t
)], 
ETH_ALEN
);

563 } i‡(
nd_›t
->
nd_›t_ty≥
 =
ND_OPT_TARGET_LL_ADDR


564 && 
›t_Àn
 == 8) {

565 i‡(
	`u∆ikñy
(!
	`is_zîo_ëhî_addr
(
key
->
ùv6
.
nd
.
él
)))

566 
övÆid
;

567 
	`mem˝y
(
key
->
ùv6
.
nd
.
él
,

568 &
nd
->
›t
[
off£t
+(*
nd_›t
)], 
ETH_ALEN
);

571 
icmp_Àn
 -
›t_Àn
;

572 
off£t
 +
›t_Àn
;

576 
out
;

578 
övÆid
:

579 
	`mem£t
(&
key
->
ùv6
.
nd
.
èrgë
, 0, (key->ipv6.nd.target));

580 
	`mem£t
(
key
->
ùv6
.
nd
.
¶l
, 0, (key->ipv6.nd.sll));

581 
	`mem£t
(
key
->
ùv6
.
nd
.
él
, 0, (key->ipv6.nd.tll));

583 
out
:

584 *
key_À≈
 = 
key_Àn
;

585  
îr‹
;

586 
	}
}

612 
	$ovs_Êow_exåa˘
(
sk_buff
 *
skb
, 
u16
 
ö_p‹t
, 
sw_Êow_key
 *
key
,

613 *
key_À≈
)

615 
îr‹
 = 0;

616 
key_Àn
 = 
	`SW_FLOW_KEY_OFFSET
(
ëh
);

617 
ëhhdr
 *
ëh
;

619 
	`mem£t
(
key
, 0, (*key));

621 
key
->
phy
.
¥i‹ôy
 = 
skb
->priority;

622 i‡(
	`OVS_CB
(
skb
)->
tun_key
)

623 
	`mem˝y
(&
key
->
phy
.
tun
.
tun_key
, 
	`OVS_CB
(
skb
)->tun_key, (key->phy.tun.tun_key));

624 
key
->
phy
.
ö_p‹t
 = in_port;

625 
key
->
phy
.
skb_m¨k
 = 
	`skb_gë_m¨k
(
skb
);

627 
	`skb_ª£t_mac_hódî
(
skb
);

632 
ëh
 = 
	`ëh_hdr
(
skb
);

633 
	`mem˝y
(
key
->
ëh
.
§c
,Éth->
h_sour˚
, 
ETH_ALEN
);

634 
	`mem˝y
(
key
->
ëh
.
d°
,Éth->
h_de°
, 
ETH_ALEN
);

636 
	`__skb_puŒ
(
skb
, 2 * 
ETH_ALEN
);

638 i‡(
	`vœn_tx_èg_¥e£¡
(
skb
))

639 
key
->
ëh
.
tci
 = 
	`ht⁄s
(
	`vœn_gë_tci
(
skb
));

640 i‡(
ëh
->
h_¥Ÿo
 =
	`ht⁄s
(
ETH_P_8021Q
))

641 i‡(
	`u∆ikñy
(
	`∑r£_vœn
(
skb
, 
key
)))

642  -
ENOMEM
;

644 
key
->
ëh
.
ty≥
 = 
	`∑r£_ëhîty≥
(
skb
);

645 i‡(
	`u∆ikñy
(
key
->
ëh
.
ty≥
 =
	`ht⁄s
(0)))

646  -
ENOMEM
;

648 
	`skb_ª£t_√tw‹k_hódî
(
skb
);

649 
	`__skb_push
(
skb
, skb->
d©a
 - 
	`skb_mac_hódî
(skb));

652 i‡(
key
->
ëh
.
ty≥
 =
	`ht⁄s
(
ETH_P_IP
)) {

653 
ùhdr
 *
nh
;

654 
__be16
 
off£t
;

656 
key_Àn
 = 
	`SW_FLOW_KEY_OFFSET
(
ùv4
.
addr
);

658 
îr‹
 = 
	`check_ùhdr
(
skb
);

659 i‡(
	`u∆ikñy
(
îr‹
)) {

660 i‡(
îr‹
 =-
EINVAL
) {

661 
skb
->
å™•‹t_hódî
 = skb->
√tw‹k_hódî
;

662 
îr‹
 = 0;

664 
out
;

667 
nh
 = 
	`ù_hdr
(
skb
);

668 
key
->
ùv4
.
addr
.
§c
 = 
nh
->
ßddr
;

669 
key
->
ùv4
.
addr
.
d°
 = 
nh
->
daddr
;

671 
key
->
ù
.
¥Ÿo
 = 
nh
->
¥Ÿocﬁ
;

672 
key
->
ù
.
tos
 = 
nh
->tos;

673 
key
->
ù
.
âl
 = 
nh
->ttl;

675 
off£t
 = 
nh
->
‰ag_off
 & 
	`ht⁄s
(
IP_OFFSET
);

676 i‡(
off£t
) {

677 
key
->
ù
.
‰ag
 = 
OVS_FRAG_TYPE_LATER
;

678 
out
;

680 i‡(
nh
->
‰ag_off
 & 
	`ht⁄s
(
IP_MF
) ||

681 
	`skb_shöfo
(
skb
)->
gso_ty≥
 & 
SKB_GSO_UDP
)

682 
key
->
ù
.
‰ag
 = 
OVS_FRAG_TYPE_FIRST
;

685 i‡(
key
->
ù
.
¥Ÿo
 =
IPPROTO_TCP
) {

686 
key_Àn
 = 
	`SW_FLOW_KEY_OFFSET
(
ùv4
.
ç
);

687 i‡(
	`t˝hdr_ok
(
skb
)) {

688 
t˝hdr
 *
t˝
 = 
	`t˝_hdr
(
skb
);

689 
key
->
ùv4
.
ç
.
§c
 = 
t˝
->
sour˚
;

690 
key
->
ùv4
.
ç
.
d°
 = 
t˝
->
de°
;

692 } i‡(
key
->
ù
.
¥Ÿo
 =
IPPROTO_UDP
) {

693 
key_Àn
 = 
	`SW_FLOW_KEY_OFFSET
(
ùv4
.
ç
);

694 i‡(
	`udphdr_ok
(
skb
)) {

695 
udphdr
 *
udp
 = 
	`udp_hdr
(
skb
);

696 
key
->
ùv4
.
ç
.
§c
 = 
udp
->
sour˚
;

697 
key
->
ùv4
.
ç
.
d°
 = 
udp
->
de°
;

699 } i‡(
key
->
ù
.
¥Ÿo
 =
IPPROTO_ICMP
) {

700 
key_Àn
 = 
	`SW_FLOW_KEY_OFFSET
(
ùv4
.
ç
);

701 i‡(
	`icmphdr_ok
(
skb
)) {

702 
icmphdr
 *
icmp
 = 
	`icmp_hdr
(
skb
);

706 
key
->
ùv4
.
ç
.
§c
 = 
	`ht⁄s
(
icmp
->
ty≥
);

707 
key
->
ùv4
.
ç
.
d°
 = 
	`ht⁄s
(
icmp
->
code
);

711 } i‡((
key
->
ëh
.
ty≥
 =
	`ht⁄s
(
ETH_P_ARP
) ||

712 
key
->
ëh
.
ty≥
 =
	`ht⁄s
(
ETH_P_RARP
)Ë&& 
	`¨phdr_ok
(
skb
)) {

713 
¨p_ëh_hódî
 *
¨p
;

715 
¨p
 = (
¨p_ëh_hódî
 *)
	`skb_√tw‹k_hódî
(
skb
);

717 i‡(
¨p
->
¨_hrd
 =
	`ht⁄s
(
ARPHRD_ETHER
)

718 && 
¨p
->
¨_¥o
 =
	`ht⁄s
(
ETH_P_IP
)

719 && 
¨p
->
¨_h 
 =
ETH_ALEN


720 && 
¨p
->
¨_∂n
 == 4) {

723 i‡(
	`¡ohs
(
¨p
->
¨_›
) <= 0xff)

724 
key
->
ù
.
¥Ÿo
 = 
	`¡ohs
(
¨p
->
¨_›
);

725 
	`mem˝y
(&
key
->
ùv4
.
addr
.
§c
, 
¨p
->
¨_sù
, (key->ipv4.addr.src));

726 
	`mem˝y
(&
key
->
ùv4
.
addr
.
d°
, 
¨p
->
¨_tù
, (key->ipv4.addr.dst));

727 
	`mem˝y
(
key
->
ùv4
.
¨p
.
sha
,áΩ->
¨_sha
, 
ETH_ALEN
);

728 
	`mem˝y
(
key
->
ùv4
.
¨p
.
tha
,áΩ->
¨_tha
, 
ETH_ALEN
);

729 
key_Àn
 = 
	`SW_FLOW_KEY_OFFSET
(
ùv4
.
¨p
);

731 } i‡(
key
->
ëh
.
ty≥
 =
	`ht⁄s
(
ETH_P_IPV6
)) {

732 
nh_Àn
;

734 
nh_Àn
 = 
	`∑r£_ùv6hdr
(
skb
, 
key
, &
key_Àn
);

735 i‡(
	`u∆ikñy
(
nh_Àn
 < 0)) {

736 i‡(
nh_Àn
 =-
EINVAL
)

737 
skb
->
å™•‹t_hódî
 = skb->
√tw‹k_hódî
;

739 
îr‹
 = 
nh_Àn
;

740 
out
;

743 i‡(
key
->
ù
.
‰ag
 =
OVS_FRAG_TYPE_LATER
)

744 
out
;

745 i‡(
	`skb_shöfo
(
skb
)->
gso_ty≥
 & 
SKB_GSO_UDP
)

746 
key
->
ù
.
‰ag
 = 
OVS_FRAG_TYPE_FIRST
;

749 i‡(
key
->
ù
.
¥Ÿo
 =
NEXTHDR_TCP
) {

750 
key_Àn
 = 
	`SW_FLOW_KEY_OFFSET
(
ùv6
.
ç
);

751 i‡(
	`t˝hdr_ok
(
skb
)) {

752 
t˝hdr
 *
t˝
 = 
	`t˝_hdr
(
skb
);

753 
key
->
ùv6
.
ç
.
§c
 = 
t˝
->
sour˚
;

754 
key
->
ùv6
.
ç
.
d°
 = 
t˝
->
de°
;

756 } i‡(
key
->
ù
.
¥Ÿo
 =
NEXTHDR_UDP
) {

757 
key_Àn
 = 
	`SW_FLOW_KEY_OFFSET
(
ùv6
.
ç
);

758 i‡(
	`udphdr_ok
(
skb
)) {

759 
udphdr
 *
udp
 = 
	`udp_hdr
(
skb
);

760 
key
->
ùv6
.
ç
.
§c
 = 
udp
->
sour˚
;

761 
key
->
ùv6
.
ç
.
d°
 = 
udp
->
de°
;

763 } i‡(
key
->
ù
.
¥Ÿo
 =
NEXTHDR_ICMP
) {

764 
key_Àn
 = 
	`SW_FLOW_KEY_OFFSET
(
ùv6
.
ç
);

765 i‡(
	`icmp6hdr_ok
(
skb
)) {

766 
îr‹
 = 
	`∑r£_icmpv6
(
skb
, 
key
, &
key_Àn
, 
nh_Àn
);

767 i‡(
îr‹
 < 0)

768 
out
;

773 
out
:

774 *
key_À≈
 = 
key_Àn
;

775  
îr‹
;

776 
	}
}

778 
u32
 
	$ovs_Êow_hash
(c⁄° 
sw_Êow_key
 *
key
, 
key_°¨t
, 
key_Àn
)

780  
	`jhash2
((
u32
 *)((
u8
 *)
key
 + 
key_°¨t
),

781 
	`DIV_ROUND_UP
(
key_Àn
 - 
key_°¨t
, (
u32
)), 0);

782 
	}
}

784 
	$Êow_key_°¨t
(
sw_Êow_key
 *
key
)

786 i‡(
key
->
phy
.
tun
.
tun_key
.
ùv4_d°
)

789  
	`off£tof
(
sw_Êow_key
, 
phy
.
¥i‹ôy
);

790 
	}
}

792 
sw_Êow
 *
	$ovs_Êow_tbl_lookup
(
Êow_èbÀ
 *
èbÀ
,

793 
sw_Êow_key
 *
key
, 
key_Àn
)

795 
sw_Êow
 *
Êow
;

796 
hli°_node
 *
n
;

797 
hli°_hód
 *
hód
;

798 
u8
 *
_key
;

799 
key_°¨t
;

800 
u32
 
hash
;

802 
key_°¨t
 = 
	`Êow_key_°¨t
(
key
);

803 
hash
 = 
	`ovs_Êow_hash
(
key
, 
key_°¨t
, 
key_Àn
);

805 
_key
 = (
u8
 *Ë
key
 + 
key_°¨t
;

806 
hód
 = 
	`föd_buckë
(
èbÀ
, 
hash
);

807 
	`hli°_f‹_óch_íåy_rcu
(
Êow
, 
n
, 
hód
, 
hash_node
[
èbÀ
->
node_vî
]) {

809 i‡(
Êow
->
hash
 == hash &&

810 !
	`memcmp
((
u8
 *)&
Êow
->
key
 + 
key_°¨t
, 
_key
, 
key_Àn
 - key_start)) {

811  
Êow
;

814  
NULL
;

815 
	}
}

817 
	$ovs_Êow_tbl_ö£π
(
Êow_èbÀ
 *
èbÀ
, 
sw_Êow
 *
Êow
,

818 
sw_Êow_key
 *
key
, 
key_Àn
)

820 
Êow
->
hash
 = 
	`ovs_Êow_hash
(
key
, 
	`Êow_key_°¨t
(key), 
key_Àn
);

821 
	`mem˝y
(&
Êow
->
key
, key, (flow->key));

822 
	`__Êow_tbl_ö£π
(
èbÀ
, 
Êow
);

823 
	}
}

825 
	$ovs_Êow_tbl_ªmove
(
Êow_èbÀ
 *
èbÀ
, 
sw_Êow
 *
Êow
)

827 
	`hli°_dñ_rcu
(&
Êow
->
hash_node
[
èbÀ
->
node_vî
]);

828 
èbÀ
->
cou¡
--;

829 
	`BUG_ON
(
èbÀ
->
cou¡
 < 0);

830 
	}
}

833 c⁄° 
	govs_key_Àns
[
OVS_KEY_ATTR_MAX
 + 1] = {

834 [
OVS_KEY_ATTR_ENCAP
] = -1,

835 [
OVS_KEY_ATTR_PRIORITY
] = (
u32
),

836 [
OVS_KEY_ATTR_IN_PORT
] = (
u32
),

837 [
OVS_KEY_ATTR_SKB_MARK
] = (
u32
),

838 [
OVS_KEY_ATTR_ETHERNET
] = (
ovs_key_ëhî√t
),

839 [
OVS_KEY_ATTR_VLAN
] = (
__be16
),

840 [
OVS_KEY_ATTR_ETHERTYPE
] = (
__be16
),

841 [
OVS_KEY_ATTR_IPV4
] = (
ovs_key_ùv4
),

842 [
OVS_KEY_ATTR_IPV6
] = (
ovs_key_ùv6
),

843 [
OVS_KEY_ATTR_TCP
] = (
ovs_key_t˝
),

844 [
OVS_KEY_ATTR_UDP
] = (
ovs_key_udp
),

845 [
OVS_KEY_ATTR_ICMP
] = (
ovs_key_icmp
),

846 [
OVS_KEY_ATTR_ICMPV6
] = (
ovs_key_icmpv6
),

847 [
OVS_KEY_ATTR_ARP
] = (
ovs_key_¨p
),

848 [
OVS_KEY_ATTR_ND
] = (
ovs_key_nd
),

849 [
OVS_KEY_ATTR_TUNNEL
] = -1,

852 [
OVS_KEY_ATTR_TUN_ID
] = (
__be64
),

855 
	$ùv4_Êow_‰om_∆©ås
(
sw_Êow_key
 *
swkey
, *
key_Àn
,

856 c⁄° 
∆©å
 *
a
[], 
u64
 *
©ås
)

858 c⁄° 
ovs_key_icmp
 *
icmp_key
;

859 c⁄° 
ovs_key_t˝
 *
t˝_key
;

860 c⁄° 
ovs_key_udp
 *
udp_key
;

862 
swkey
->
ù
.
¥Ÿo
) {

863 
IPPROTO_TCP
:

864 i‡(!(*
©ås
 & (1 << 
OVS_KEY_ATTR_TCP
)))

865  -
EINVAL
;

866 *
©ås
 &~(1 << 
OVS_KEY_ATTR_TCP
);

868 *
key_Àn
 = 
	`SW_FLOW_KEY_OFFSET
(
ùv4
.
ç
);

869 
t˝_key
 = 
	`∆a_d©a
(
a
[
OVS_KEY_ATTR_TCP
]);

870 
swkey
->
ùv4
.
ç
.
§c
 = 
t˝_key
->
t˝_§c
;

871 
swkey
->
ùv4
.
ç
.
d°
 = 
t˝_key
->
t˝_d°
;

874 
IPPROTO_UDP
:

875 i‡(!(*
©ås
 & (1 << 
OVS_KEY_ATTR_UDP
)))

876  -
EINVAL
;

877 *
©ås
 &~(1 << 
OVS_KEY_ATTR_UDP
);

879 *
key_Àn
 = 
	`SW_FLOW_KEY_OFFSET
(
ùv4
.
ç
);

880 
udp_key
 = 
	`∆a_d©a
(
a
[
OVS_KEY_ATTR_UDP
]);

881 
swkey
->
ùv4
.
ç
.
§c
 = 
udp_key
->
udp_§c
;

882 
swkey
->
ùv4
.
ç
.
d°
 = 
udp_key
->
udp_d°
;

885 
IPPROTO_ICMP
:

886 i‡(!(*
©ås
 & (1 << 
OVS_KEY_ATTR_ICMP
)))

887  -
EINVAL
;

888 *
©ås
 &~(1 << 
OVS_KEY_ATTR_ICMP
);

890 *
key_Àn
 = 
	`SW_FLOW_KEY_OFFSET
(
ùv4
.
ç
);

891 
icmp_key
 = 
	`∆a_d©a
(
a
[
OVS_KEY_ATTR_ICMP
]);

892 
swkey
->
ùv4
.
ç
.
§c
 = 
	`ht⁄s
(
icmp_key
->
icmp_ty≥
);

893 
swkey
->
ùv4
.
ç
.
d°
 = 
	`ht⁄s
(
icmp_key
->
icmp_code
);

898 
	}
}

900 
	$ùv6_Êow_‰om_∆©ås
(
sw_Êow_key
 *
swkey
, *
key_Àn
,

901 c⁄° 
∆©å
 *
a
[], 
u64
 *
©ås
)

903 c⁄° 
ovs_key_icmpv6
 *
icmpv6_key
;

904 c⁄° 
ovs_key_t˝
 *
t˝_key
;

905 c⁄° 
ovs_key_udp
 *
udp_key
;

907 
swkey
->
ù
.
¥Ÿo
) {

908 
IPPROTO_TCP
:

909 i‡(!(*
©ås
 & (1 << 
OVS_KEY_ATTR_TCP
)))

910  -
EINVAL
;

911 *
©ås
 &~(1 << 
OVS_KEY_ATTR_TCP
);

913 *
key_Àn
 = 
	`SW_FLOW_KEY_OFFSET
(
ùv6
.
ç
);

914 
t˝_key
 = 
	`∆a_d©a
(
a
[
OVS_KEY_ATTR_TCP
]);

915 
swkey
->
ùv6
.
ç
.
§c
 = 
t˝_key
->
t˝_§c
;

916 
swkey
->
ùv6
.
ç
.
d°
 = 
t˝_key
->
t˝_d°
;

919 
IPPROTO_UDP
:

920 i‡(!(*
©ås
 & (1 << 
OVS_KEY_ATTR_UDP
)))

921  -
EINVAL
;

922 *
©ås
 &~(1 << 
OVS_KEY_ATTR_UDP
);

924 *
key_Àn
 = 
	`SW_FLOW_KEY_OFFSET
(
ùv6
.
ç
);

925 
udp_key
 = 
	`∆a_d©a
(
a
[
OVS_KEY_ATTR_UDP
]);

926 
swkey
->
ùv6
.
ç
.
§c
 = 
udp_key
->
udp_§c
;

927 
swkey
->
ùv6
.
ç
.
d°
 = 
udp_key
->
udp_d°
;

930 
IPPROTO_ICMPV6
:

931 i‡(!(*
©ås
 & (1 << 
OVS_KEY_ATTR_ICMPV6
)))

932  -
EINVAL
;

933 *
©ås
 &~(1 << 
OVS_KEY_ATTR_ICMPV6
);

935 *
key_Àn
 = 
	`SW_FLOW_KEY_OFFSET
(
ùv6
.
ç
);

936 
icmpv6_key
 = 
	`∆a_d©a
(
a
[
OVS_KEY_ATTR_ICMPV6
]);

937 
swkey
->
ùv6
.
ç
.
§c
 = 
	`ht⁄s
(
icmpv6_key
->
icmpv6_ty≥
);

938 
swkey
->
ùv6
.
ç
.
d°
 = 
	`ht⁄s
(
icmpv6_key
->
icmpv6_code
);

940 i‡(
swkey
->
ùv6
.
ç
.
§c
 =
	`ht⁄s
(
NDISC_NEIGHBOUR_SOLICITATION
) ||

941 
swkey
->
ùv6
.
ç
.
§c
 =
	`ht⁄s
(
NDISC_NEIGHBOUR_ADVERTISEMENT
)) {

942 c⁄° 
ovs_key_nd
 *
nd_key
;

944 i‡(!(*
©ås
 & (1 << 
OVS_KEY_ATTR_ND
)))

945  -
EINVAL
;

946 *
©ås
 &~(1 << 
OVS_KEY_ATTR_ND
);

948 *
key_Àn
 = 
	`SW_FLOW_KEY_OFFSET
(
ùv6
.
nd
);

949 
nd_key
 = 
	`∆a_d©a
(
a
[
OVS_KEY_ATTR_ND
]);

950 
	`mem˝y
(&
swkey
->
ùv6
.
nd
.
èrgë
, 
nd_key
->
nd_èrgë
,

951 (
swkey
->
ùv6
.
nd
.
èrgë
));

952 
	`mem˝y
(
swkey
->
ùv6
.
nd
.
¶l
, 
nd_key
->
nd_¶l
, 
ETH_ALEN
);

953 
	`mem˝y
(
swkey
->
ùv6
.
nd
.
él
, 
nd_key
->
nd_él
, 
ETH_ALEN
);

959 
	}
}

961 
	$∑r£_Êow_∆©ås
(c⁄° 
∆©å
 *
©å
,

962 c⁄° 
∆©å
 *
a
[], 
u64
 *
©å•
)

964 c⁄° 
∆©å
 *
∆a
;

965 
u64
 
©ås
;

966 
ªm
;

968 
©ås
 = 0;

969 
	`∆a_f‹_óch_√°ed
(
∆a
, 
©å
, 
ªm
) {

970 
u16
 
ty≥
 = 
	`∆a_ty≥
(
∆a
);

971 
ex≥˘ed_Àn
;

973 i‡(
ty≥
 > 
OVS_KEY_ATTR_MAX
 || 
©ås
 & (1ULL <<Åype))

974  -
EINVAL
;

976 
ex≥˘ed_Àn
 = 
ovs_key_Àns
[
ty≥
];

977 i‡(
	`∆a_Àn
(
∆a
Ë!
ex≥˘ed_Àn
 &&Éxpected_len != -1)

978  -
EINVAL
;

980 
©ås
 |1ULL << 
ty≥
;

981 
a
[
ty≥
] = 
∆a
;

983 i‡(
ªm
)

984  -
EINVAL
;

986 *
©å•
 = 
©ås
;

988 
	}
}

990 
	$ùv4_tun_‰om_∆©å
(c⁄° 
∆©å
 *
©å
,

991 
ovs_key_ùv4_tu¬ñ
 *
tun_key
)

993 
∆©å
 *
a
;

994 
ªm
;

995 
boﬁ
 
âl
 = 
Ál£
;

997 
	`mem£t
(
tun_key
, 0, (*tun_key));

999 
	`∆a_f‹_óch_√°ed
(
a
, 
©å
, 
ªm
) {

1000 
ty≥
 = 
	`∆a_ty≥
(
a
);

1001 c⁄° 
u32
 
ovs_tu¬ñ_key_Àns
[
OVS_TUNNEL_KEY_ATTR_MAX
 + 1] = {

1002 [
OVS_TUNNEL_KEY_ATTR_ID
] = (
u64
),

1003 [
OVS_TUNNEL_KEY_ATTR_IPV4_SRC
] = (
u32
),

1004 [
OVS_TUNNEL_KEY_ATTR_IPV4_DST
] = (
u32
),

1005 [
OVS_TUNNEL_KEY_ATTR_TOS
] = 1,

1006 [
OVS_TUNNEL_KEY_ATTR_TTL
] = 1,

1007 [
OVS_TUNNEL_KEY_ATTR_DONT_FRAGMENT
] = 0,

1008 [
OVS_TUNNEL_KEY_ATTR_CSUM
] = 0,

1011 i‡(
ty≥
 > 
OVS_TUNNEL_KEY_ATTR_MAX
 ||

1012 
ovs_tu¬ñ_key_Àns
[
ty≥
] !
	`∆a_Àn
(
a
))

1013  -
EINVAL
;

1015 
ty≥
) {

1016 
OVS_TUNNEL_KEY_ATTR_ID
:

1017 
tun_key
->
tun_id
 = 
	`∆a_gë_be64
(
a
);

1018 
tun_key
->
tun_Êags
 |
OVS_TNL_F_KEY
;

1020 
OVS_TUNNEL_KEY_ATTR_IPV4_SRC
:

1021 
tun_key
->
ùv4_§c
 = 
	`∆a_gë_be32
(
a
);

1023 
OVS_TUNNEL_KEY_ATTR_IPV4_DST
:

1024 
tun_key
->
ùv4_d°
 = 
	`∆a_gë_be32
(
a
);

1026 
OVS_TUNNEL_KEY_ATTR_TOS
:

1027 
tun_key
->
ùv4_tos
 = 
	`∆a_gë_u8
(
a
);

1029 
OVS_TUNNEL_KEY_ATTR_TTL
:

1030 
tun_key
->
ùv4_âl
 = 
	`∆a_gë_u8
(
a
);

1031 
âl
 = 
åue
;

1033 
OVS_TUNNEL_KEY_ATTR_DONT_FRAGMENT
:

1034 
tun_key
->
tun_Êags
 |
OVS_TNL_F_DONT_FRAGMENT
;

1036 
OVS_TUNNEL_KEY_ATTR_CSUM
:

1037 
tun_key
->
tun_Êags
 |
OVS_TNL_F_CSUM
;

1040  -
EINVAL
;

1044 i‡(
ªm
 > 0)

1045  -
EINVAL
;

1047 i‡(!
tun_key
->
ùv4_d°
)

1048  -
EINVAL
;

1050 i‡(!
âl
)

1051  -
EINVAL
;

1054 
	}
}

1056 
	$ùv4_tun_to_∆©å
(
sk_buff
 *
skb
,

1057 c⁄° 
ovs_key_ùv4_tu¬ñ
 *
tun_key
)

1059 
∆©å
 *
∆a
;

1061 
∆a
 = 
	`∆a_√°_°¨t
(
skb
, 
OVS_KEY_ATTR_TUNNEL
);

1062 i‡(!
∆a
)

1063  -
EMSGSIZE
;

1065 i‡(
tun_key
->
tun_Êags
 & 
OVS_TNL_F_KEY
 &&

1066 
	`∆a_put_be64
(
skb
, 
OVS_TUNNEL_KEY_ATTR_ID
, 
tun_key
->
tun_id
))

1067  -
EMSGSIZE
;

1068 i‡(
tun_key
->
ùv4_§c
 &&

1069 
	`∆a_put_be32
(
skb
, 
OVS_TUNNEL_KEY_ATTR_IPV4_SRC
, 
tun_key
->
ùv4_§c
))

1070  -
EMSGSIZE
;

1071 i‡(
	`∆a_put_be32
(
skb
, 
OVS_TUNNEL_KEY_ATTR_IPV4_DST
, 
tun_key
->
ùv4_d°
))

1072  -
EMSGSIZE
;

1073 i‡(
tun_key
->
ùv4_tos
 &&

1074 
	`∆a_put_u8
(
skb
, 
OVS_TUNNEL_KEY_ATTR_TOS
, 
tun_key
->
ùv4_tos
))

1075  -
EMSGSIZE
;

1076 i‡(
	`∆a_put_u8
(
skb
, 
OVS_TUNNEL_KEY_ATTR_TTL
, 
tun_key
->
ùv4_âl
))

1077  -
EMSGSIZE
;

1078 i‡((
tun_key
->
tun_Êags
 & 
OVS_TNL_F_DONT_FRAGMENT
) &&

1079 
	`∆a_put_Êag
(
skb
, 
OVS_TUNNEL_KEY_ATTR_DONT_FRAGMENT
))

1080  -
EMSGSIZE
;

1081 i‡((
tun_key
->
tun_Êags
 & 
OVS_TNL_F_CSUM
) &&

1082 
	`∆a_put_Êag
(
skb
, 
OVS_TUNNEL_KEY_ATTR_CSUM
))

1083  -
EMSGSIZE
;

1085 
	`∆a_√°_íd
(
skb
, 
∆a
);

1087 
	}
}

1096 
	$ovs_Êow_‰om_∆©ås
(
sw_Êow_key
 *
swkey
, *
key_À≈
,

1097 c⁄° 
∆©å
 *
©å
)

1099 c⁄° 
∆©å
 *
a
[
OVS_KEY_ATTR_MAX
 + 1];

1100 c⁄° 
ovs_key_ëhî√t
 *
ëh_key
;

1101 
key_Àn
;

1102 
u64
 
©ås
;

1103 
îr
;

1105 
	`mem£t
(
swkey
, 0, (
sw_Êow_key
));

1106 
key_Àn
 = 
	`SW_FLOW_KEY_OFFSET
(
ëh
);

1108 
îr
 = 
	`∑r£_Êow_∆©ås
(
©å
, 
a
, &
©ås
);

1109 i‡(
îr
)

1110  
îr
;

1113 i‡(
©ås
 & (1 << 
OVS_KEY_ATTR_PRIORITY
)) {

1114 
swkey
->
phy
.
¥i‹ôy
 = 
	`∆a_gë_u32
(
a
[
OVS_KEY_ATTR_PRIORITY
]);

1115 
©ås
 &~(1 << 
OVS_KEY_ATTR_PRIORITY
);

1117 i‡(
©ås
 & (1 << 
OVS_KEY_ATTR_IN_PORT
)) {

1118 
u32
 
ö_p‹t
 = 
	`∆a_gë_u32
(
a
[
OVS_KEY_ATTR_IN_PORT
]);

1119 i‡(
ö_p‹t
 >
DP_MAX_PORTS
)

1120  -
EINVAL
;

1121 
swkey
->
phy
.
ö_p‹t
 = in_port;

1122 
©ås
 &~(1 << 
OVS_KEY_ATTR_IN_PORT
);

1124 
swkey
->
phy
.
ö_p‹t
 = 
DP_MAX_PORTS
;

1126 i‡(
©ås
 & (1 << 
OVS_KEY_ATTR_SKB_MARK
)) {

1127 
uöt32_t
 
m¨k
 = 
	`∆a_gë_u32
(
a
[
OVS_KEY_ATTR_SKB_MARK
]);

1128 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,20Ë&& !
	`deföed
(
CONFIG_NETFILTER
)

1129 i‡(
m¨k
 != 0)

1130  -
EINVAL
;

1132 
swkey
->
phy
.
skb_m¨k
 = 
m¨k
;

1133 
©ås
 &~(1 << 
OVS_KEY_ATTR_SKB_MARK
);

1136 i‡(
©ås
 & (1ULL << 
OVS_KEY_ATTR_TUN_ID
) &&

1137 
©ås
 & (1ULL << 
OVS_KEY_ATTR_TUNNEL
)) {

1138 
__be64
 
tun_id
;

1140 
îr
 = 
	`ùv4_tun_‰om_∆©å
(
a
[
OVS_KEY_ATTR_TUNNEL
], &
swkey
->
phy
.
tun
.
tun_key
);

1141 i‡(
îr
)

1142  
îr
;

1144 i‡(!(
swkey
->
phy
.
tun
.
tun_key
.
tun_Êags
 & 
OVS_TNL_F_KEY
))

1145  -
EINVAL
;

1147 
tun_id
 = 
	`∆a_gë_be64
(
a
[
OVS_KEY_ATTR_TUN_ID
]);

1148 i‡(
tun_id
 !
swkey
->
phy
.
tun
.
tun_key
.tun_id)

1149  -
EINVAL
;

1151 
©ås
 &~(1ULL << 
OVS_KEY_ATTR_TUN_ID
);

1152 
©ås
 &~(1ULL << 
OVS_KEY_ATTR_TUNNEL
);

1153 } i‡(
©ås
 & (1ULL << 
OVS_KEY_ATTR_TUNNEL
)) {

1155 
îr
 = 
	`ùv4_tun_‰om_∆©å
(
a
[
OVS_KEY_ATTR_TUNNEL
], &
swkey
->
phy
.
tun
.
tun_key
);

1156 i‡(
îr
)

1157  
îr
;

1159 
©ås
 &~(1ULL << 
OVS_KEY_ATTR_TUNNEL
);

1163 i‡(!(
©ås
 & (1 << 
OVS_KEY_ATTR_ETHERNET
)))

1164  -
EINVAL
;

1165 
©ås
 &~(1 << 
OVS_KEY_ATTR_ETHERNET
);

1167 
ëh_key
 = 
	`∆a_d©a
(
a
[
OVS_KEY_ATTR_ETHERNET
]);

1168 
	`mem˝y
(
swkey
->
ëh
.
§c
, 
ëh_key
->
ëh_§c
, 
ETH_ALEN
);

1169 
	`mem˝y
(
swkey
->
ëh
.
d°
, 
ëh_key
->
ëh_d°
, 
ETH_ALEN
);

1171 i‡(
©ås
 & (1u << 
OVS_KEY_ATTR_ETHERTYPE
) &&

1172 
	`∆a_gë_be16
(
a
[
OVS_KEY_ATTR_ETHERTYPE
]Ë=
	`ht⁄s
(
ETH_P_8021Q
)) {

1173 c⁄° 
∆©å
 *
íˇp
;

1174 
__be16
 
tci
;

1176 i‡(
©ås
 !((1 << 
OVS_KEY_ATTR_VLAN
) |

1177 (1 << 
OVS_KEY_ATTR_ETHERTYPE
) |

1178 (1 << 
OVS_KEY_ATTR_ENCAP
)))

1179  -
EINVAL
;

1181 
íˇp
 = 
a
[
OVS_KEY_ATTR_ENCAP
];

1182 
tci
 = 
	`∆a_gë_be16
(
a
[
OVS_KEY_ATTR_VLAN
]);

1183 i‡(
tci
 & 
	`ht⁄s
(
VLAN_TAG_PRESENT
)) {

1184 
swkey
->
ëh
.
tci
 =Åci;

1186 
îr
 = 
	`∑r£_Êow_∆©ås
(
íˇp
, 
a
, &
©ås
);

1187 i‡(
îr
)

1188  
îr
;

1189 } i‡(!
tci
) {

1191 i‡(
	`∆a_Àn
(
íˇp
))

1192  -
EINVAL
;

1194 
swkey
->
ëh
.
ty≥
 = 
	`ht⁄s
(
ETH_P_8021Q
);

1195 *
key_À≈
 = 
key_Àn
;

1198  -
EINVAL
;

1202 i‡(
©ås
 & (1 << 
OVS_KEY_ATTR_ETHERTYPE
)) {

1203 
swkey
->
ëh
.
ty≥
 = 
	`∆a_gë_be16
(
a
[
OVS_KEY_ATTR_ETHERTYPE
]);

1204 i‡(
	`¡ohs
(
swkey
->
ëh
.
ty≥
) < 1536)

1205  -
EINVAL
;

1206 
©ås
 &~(1 << 
OVS_KEY_ATTR_ETHERTYPE
);

1208 
swkey
->
ëh
.
ty≥
 = 
	`ht⁄s
(
ETH_P_802_2
);

1211 i‡(
swkey
->
ëh
.
ty≥
 =
	`ht⁄s
(
ETH_P_IP
)) {

1212 c⁄° 
ovs_key_ùv4
 *
ùv4_key
;

1214 i‡(!(
©ås
 & (1 << 
OVS_KEY_ATTR_IPV4
)))

1215  -
EINVAL
;

1216 
©ås
 &~(1 << 
OVS_KEY_ATTR_IPV4
);

1218 
key_Àn
 = 
	`SW_FLOW_KEY_OFFSET
(
ùv4
.
addr
);

1219 
ùv4_key
 = 
	`∆a_d©a
(
a
[
OVS_KEY_ATTR_IPV4
]);

1220 i‡(
ùv4_key
->
ùv4_‰ag
 > 
OVS_FRAG_TYPE_MAX
)

1221  -
EINVAL
;

1222 
swkey
->
ù
.
¥Ÿo
 = 
ùv4_key
->
ùv4_¥Ÿo
;

1223 
swkey
->
ù
.
tos
 = 
ùv4_key
->
ùv4_tos
;

1224 
swkey
->
ù
.
âl
 = 
ùv4_key
->
ùv4_âl
;

1225 
swkey
->
ù
.
‰ag
 = 
ùv4_key
->
ùv4_‰ag
;

1226 
swkey
->
ùv4
.
addr
.
§c
 = 
ùv4_key
->
ùv4_§c
;

1227 
swkey
->
ùv4
.
addr
.
d°
 = 
ùv4_key
->
ùv4_d°
;

1229 i‡(
swkey
->
ù
.
‰ag
 !
OVS_FRAG_TYPE_LATER
) {

1230 
îr
 = 
	`ùv4_Êow_‰om_∆©ås
(
swkey
, &
key_Àn
, 
a
, &
©ås
);

1231 i‡(
îr
)

1232  
îr
;

1234 } i‡(
swkey
->
ëh
.
ty≥
 =
	`ht⁄s
(
ETH_P_IPV6
)) {

1235 c⁄° 
ovs_key_ùv6
 *
ùv6_key
;

1237 i‡(!(
©ås
 & (1 << 
OVS_KEY_ATTR_IPV6
)))

1238  -
EINVAL
;

1239 
©ås
 &~(1 << 
OVS_KEY_ATTR_IPV6
);

1241 
key_Àn
 = 
	`SW_FLOW_KEY_OFFSET
(
ùv6
.
œbñ
);

1242 
ùv6_key
 = 
	`∆a_d©a
(
a
[
OVS_KEY_ATTR_IPV6
]);

1243 i‡(
ùv6_key
->
ùv6_‰ag
 > 
OVS_FRAG_TYPE_MAX
)

1244  -
EINVAL
;

1245 
swkey
->
ùv6
.
œbñ
 = 
ùv6_key
->
ùv6_œbñ
;

1246 
swkey
->
ù
.
¥Ÿo
 = 
ùv6_key
->
ùv6_¥Ÿo
;

1247 
swkey
->
ù
.
tos
 = 
ùv6_key
->
ùv6_t˛ass
;

1248 
swkey
->
ù
.
âl
 = 
ùv6_key
->
ùv6_hlimô
;

1249 
swkey
->
ù
.
‰ag
 = 
ùv6_key
->
ùv6_‰ag
;

1250 
	`mem˝y
(&
swkey
->
ùv6
.
addr
.
§c
, 
ùv6_key
->
ùv6_§c
,

1251 (
swkey
->
ùv6
.
addr
.
§c
));

1252 
	`mem˝y
(&
swkey
->
ùv6
.
addr
.
d°
, 
ùv6_key
->
ùv6_d°
,

1253 (
swkey
->
ùv6
.
addr
.
d°
));

1255 i‡(
swkey
->
ù
.
‰ag
 !
OVS_FRAG_TYPE_LATER
) {

1256 
îr
 = 
	`ùv6_Êow_‰om_∆©ås
(
swkey
, &
key_Àn
, 
a
, &
©ås
);

1257 i‡(
îr
)

1258  
îr
;

1260 } i‡(
swkey
->
ëh
.
ty≥
 =
	`ht⁄s
(
ETH_P_ARP
) ||

1261 
swkey
->
ëh
.
ty≥
 =
	`ht⁄s
(
ETH_P_RARP
)) {

1262 c⁄° 
ovs_key_¨p
 *
¨p_key
;

1264 i‡(!(
©ås
 & (1 << 
OVS_KEY_ATTR_ARP
)))

1265  -
EINVAL
;

1266 
©ås
 &~(1 << 
OVS_KEY_ATTR_ARP
);

1268 
key_Àn
 = 
	`SW_FLOW_KEY_OFFSET
(
ùv4
.
¨p
);

1269 
¨p_key
 = 
	`∆a_d©a
(
a
[
OVS_KEY_ATTR_ARP
]);

1270 
swkey
->
ùv4
.
addr
.
§c
 = 
¨p_key
->
¨p_sù
;

1271 
swkey
->
ùv4
.
addr
.
d°
 = 
¨p_key
->
¨p_tù
;

1272 i‡(
¨p_key
->
¨p_›
 & 
	`ht⁄s
(0xff00))

1273  -
EINVAL
;

1274 
swkey
->
ù
.
¥Ÿo
 = 
	`¡ohs
(
¨p_key
->
¨p_›
);

1275 
	`mem˝y
(
swkey
->
ùv4
.
¨p
.
sha
, 
¨p_key
->
¨p_sha
, 
ETH_ALEN
);

1276 
	`mem˝y
(
swkey
->
ùv4
.
¨p
.
tha
, 
¨p_key
->
¨p_tha
, 
ETH_ALEN
);

1279 i‡(
©ås
)

1280  -
EINVAL
;

1281 *
key_À≈
 = 
key_Àn
;

1284 
	}
}

1299 
	$ovs_Êow_mëad©a_‰om_∆©ås
(
sw_Êow
 *
Êow
, 
key_Àn
, c⁄° 
∆©å
 *
©å
)

1301 
ovs_key_ùv4_tu¬ñ
 *
tun_key
 = &
Êow
->
key
.
phy
.
tun
.tun_key;

1302 c⁄° 
∆©å
 *
∆a
;

1303 
ªm
;

1304 
__be64
 
tun_id
 = 0;

1306 
Êow
->
key
.
phy
.
ö_p‹t
 = 
DP_MAX_PORTS
;

1307 
Êow
->
key
.
phy
.
¥i‹ôy
 = 0;

1308 
Êow
->
key
.
phy
.
skb_m¨k
 = 0;

1309 
	`mem£t
(
tun_key
, 0, (
Êow
->
key
.
phy
.
tun
.tun_key));

1311 
	`∆a_f‹_óch_√°ed
(
∆a
, 
©å
, 
ªm
) {

1312 
ty≥
 = 
	`∆a_ty≥
(
∆a
);

1314 i‡(
ty≥
 <
OVS_KEY_ATTR_MAX
 && 
ovs_key_Àns
[type] > 0) {

1315 
îr
;

1317 i‡(
	`∆a_Àn
(
∆a
Ë!
ovs_key_Àns
[
ty≥
])

1318  -
EINVAL
;

1320 
ty≥
) {

1321 
OVS_KEY_ATTR_PRIORITY
:

1322 
Êow
->
key
.
phy
.
¥i‹ôy
 = 
	`∆a_gë_u32
(
∆a
);

1325 
OVS_KEY_ATTR_TUN_ID
:

1326 
tun_id
 = 
	`∆a_gë_be64
(
∆a
);

1328 i‡(
tun_key
->
ùv4_d°
) {

1329 i‡(!(
tun_key
->
tun_Êags
 & 
OVS_TNL_F_KEY
))

1330  -
EINVAL
;

1331 i‡(
tun_key
->
tun_id
 !=Åun_id)

1332  -
EINVAL
;

1335 
tun_key
->
tun_id
 =Åun_id;

1336 
tun_key
->
tun_Êags
 |
OVS_TNL_F_KEY
;

1340 
OVS_KEY_ATTR_TUNNEL
:

1341 i‡(
tun_key
->
tun_Êags
 & 
OVS_TNL_F_KEY
) {

1342 
tun_id
 = 
tun_key
->tun_id;

1343 
îr
 = 
	`ùv4_tun_‰om_∆©å
(
∆a
, 
tun_key
);

1344 i‡(
îr
)

1345  
îr
;

1347 i‡(!(
tun_key
->
tun_Êags
 & 
OVS_TNL_F_KEY
))

1348  -
EINVAL
;

1350 i‡(
tun_key
->
tun_id
 !=Åun_id)

1351  -
EINVAL
;

1353 
îr
 = 
	`ùv4_tun_‰om_∆©å
(
∆a
, 
tun_key
);

1354 i‡(
îr
)

1355  
îr
;

1359 
OVS_KEY_ATTR_IN_PORT
:

1360 i‡(
	`∆a_gë_u32
(
∆a
Ë>
DP_MAX_PORTS
)

1361  -
EINVAL
;

1362 
Êow
->
key
.
phy
.
ö_p‹t
 = 
	`∆a_gë_u32
(
∆a
);

1365 
OVS_KEY_ATTR_SKB_MARK
:

1366 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,20Ë&& !
	`deföed
(
CONFIG_NETFILTER
)

1367 i‡(
	`∆a_gë_u32
(
∆a
) != 0)

1368  -
EINVAL
;

1370 
Êow
->
key
.
phy
.
skb_m¨k
 = 
	`∆a_gë_u32
(
∆a
);

1375 i‡(
ªm
)

1376  -
EINVAL
;

1378 
Êow
->
hash
 = 
	`ovs_Êow_hash
(&Êow->
key
,

1379 
	`Êow_key_°¨t
(&
Êow
->
key
), 
key_Àn
);

1382 
	}
}

1384 
	$ovs_Êow_to_∆©ås
(c⁄° 
sw_Êow_key
 *
swkey
, 
sk_buff
 *
skb
)

1386 
ovs_key_ëhî√t
 *
ëh_key
;

1387 
∆©å
 *
∆a
, *
íˇp
;

1389 i‡(
swkey
->
phy
.
¥i‹ôy
 &&

1390 
	`∆a_put_u32
(
skb
, 
OVS_KEY_ATTR_PRIORITY
, 
swkey
->
phy
.
¥i‹ôy
))

1391 
∆a_put_Áûuª
;

1393 i‡(
swkey
->
phy
.
tun
.
tun_key
.
ùv4_d°
 &&

1394 
	`ùv4_tun_to_∆©å
(
skb
, &
swkey
->
phy
.
tun
.
tun_key
))

1395 
∆a_put_Áûuª
;

1397 i‡((
swkey
->
phy
.
tun
.
tun_key
.
tun_Êags
 & 
OVS_TNL_F_KEY
) &&

1398 
	`∆a_put_be64
(
skb
, 
OVS_KEY_ATTR_TUN_ID
, 
swkey
->
phy
.
tun
.
tun_key
.
tun_id
))

1399 
∆a_put_Áûuª
;

1401 i‡(
swkey
->
phy
.
ö_p‹t
 !
DP_MAX_PORTS
 &&

1402 
	`∆a_put_u32
(
skb
, 
OVS_KEY_ATTR_IN_PORT
, 
swkey
->
phy
.
ö_p‹t
))

1403 
∆a_put_Áûuª
;

1405 i‡(
swkey
->
phy
.
skb_m¨k
 &&

1406 
	`∆a_put_u32
(
skb
, 
OVS_KEY_ATTR_SKB_MARK
, 
swkey
->
phy
.
skb_m¨k
))

1407 
∆a_put_Áûuª
;

1409 
∆a
 = 
	`∆a_ª£rve
(
skb
, 
OVS_KEY_ATTR_ETHERNET
, (*
ëh_key
));

1410 i‡(!
∆a
)

1411 
∆a_put_Áûuª
;

1412 
ëh_key
 = 
	`∆a_d©a
(
∆a
);

1413 
	`mem˝y
(
ëh_key
->
ëh_§c
, 
swkey
->
ëh
.
§c
, 
ETH_ALEN
);

1414 
	`mem˝y
(
ëh_key
->
ëh_d°
, 
swkey
->
ëh
.
d°
, 
ETH_ALEN
);

1416 i‡(
swkey
->
ëh
.
tci
 || swkey->ëh.
ty≥
 =
	`ht⁄s
(
ETH_P_8021Q
)) {

1417 i‡(
	`∆a_put_be16
(
skb
, 
OVS_KEY_ATTR_ETHERTYPE
, 
	`ht⁄s
(
ETH_P_8021Q
)) ||

1418 
	`∆a_put_be16
(
skb
, 
OVS_KEY_ATTR_VLAN
, 
swkey
->
ëh
.
tci
))

1419 
∆a_put_Áûuª
;

1420 
íˇp
 = 
	`∆a_√°_°¨t
(
skb
, 
OVS_KEY_ATTR_ENCAP
);

1421 i‡(!
swkey
->
ëh
.
tci
)

1422 
u√nˇp
;

1424 
íˇp
 = 
NULL
;

1427 i‡(
swkey
->
ëh
.
ty≥
 =
	`ht⁄s
(
ETH_P_802_2
))

1428 
u√nˇp
;

1430 i‡(
	`∆a_put_be16
(
skb
, 
OVS_KEY_ATTR_ETHERTYPE
, 
swkey
->
ëh
.
ty≥
))

1431 
∆a_put_Áûuª
;

1433 i‡(
swkey
->
ëh
.
ty≥
 =
	`ht⁄s
(
ETH_P_IP
)) {

1434 
ovs_key_ùv4
 *
ùv4_key
;

1436 
∆a
 = 
	`∆a_ª£rve
(
skb
, 
OVS_KEY_ATTR_IPV4
, (*
ùv4_key
));

1437 i‡(!
∆a
)

1438 
∆a_put_Áûuª
;

1439 
ùv4_key
 = 
	`∆a_d©a
(
∆a
);

1440 
ùv4_key
->
ùv4_§c
 = 
swkey
->
ùv4
.
addr
.
§c
;

1441 
ùv4_key
->
ùv4_d°
 = 
swkey
->
ùv4
.
addr
.
d°
;

1442 
ùv4_key
->
ùv4_¥Ÿo
 = 
swkey
->
ù
.
¥Ÿo
;

1443 
ùv4_key
->
ùv4_tos
 = 
swkey
->
ù
.
tos
;

1444 
ùv4_key
->
ùv4_âl
 = 
swkey
->
ù
.
âl
;

1445 
ùv4_key
->
ùv4_‰ag
 = 
swkey
->
ù
.
‰ag
;

1446 } i‡(
swkey
->
ëh
.
ty≥
 =
	`ht⁄s
(
ETH_P_IPV6
)) {

1447 
ovs_key_ùv6
 *
ùv6_key
;

1449 
∆a
 = 
	`∆a_ª£rve
(
skb
, 
OVS_KEY_ATTR_IPV6
, (*
ùv6_key
));

1450 i‡(!
∆a
)

1451 
∆a_put_Áûuª
;

1452 
ùv6_key
 = 
	`∆a_d©a
(
∆a
);

1453 
	`mem˝y
(
ùv6_key
->
ùv6_§c
, &
swkey
->
ùv6
.
addr
.
§c
,

1454 (
ùv6_key
->
ùv6_§c
));

1455 
	`mem˝y
(
ùv6_key
->
ùv6_d°
, &
swkey
->
ùv6
.
addr
.
d°
,

1456 (
ùv6_key
->
ùv6_d°
));

1457 
ùv6_key
->
ùv6_œbñ
 = 
swkey
->
ùv6
.
œbñ
;

1458 
ùv6_key
->
ùv6_¥Ÿo
 = 
swkey
->
ù
.
¥Ÿo
;

1459 
ùv6_key
->
ùv6_t˛ass
 = 
swkey
->
ù
.
tos
;

1460 
ùv6_key
->
ùv6_hlimô
 = 
swkey
->
ù
.
âl
;

1461 
ùv6_key
->
ùv6_‰ag
 = 
swkey
->
ù
.
‰ag
;

1462 } i‡(
swkey
->
ëh
.
ty≥
 =
	`ht⁄s
(
ETH_P_ARP
) ||

1463 
swkey
->
ëh
.
ty≥
 =
	`ht⁄s
(
ETH_P_RARP
)) {

1464 
ovs_key_¨p
 *
¨p_key
;

1466 
∆a
 = 
	`∆a_ª£rve
(
skb
, 
OVS_KEY_ATTR_ARP
, (*
¨p_key
));

1467 i‡(!
∆a
)

1468 
∆a_put_Áûuª
;

1469 
¨p_key
 = 
	`∆a_d©a
(
∆a
);

1470 
	`mem£t
(
¨p_key
, 0, (
ovs_key_¨p
));

1471 
¨p_key
->
¨p_sù
 = 
swkey
->
ùv4
.
addr
.
§c
;

1472 
¨p_key
->
¨p_tù
 = 
swkey
->
ùv4
.
addr
.
d°
;

1473 
¨p_key
->
¨p_›
 = 
	`ht⁄s
(
swkey
->
ù
.
¥Ÿo
);

1474 
	`mem˝y
(
¨p_key
->
¨p_sha
, 
swkey
->
ùv4
.
¨p
.
sha
, 
ETH_ALEN
);

1475 
	`mem˝y
(
¨p_key
->
¨p_tha
, 
swkey
->
ùv4
.
¨p
.
tha
, 
ETH_ALEN
);

1478 i‡((
swkey
->
ëh
.
ty≥
 =
	`ht⁄s
(
ETH_P_IP
) ||

1479 
swkey
->
ëh
.
ty≥
 =
	`ht⁄s
(
ETH_P_IPV6
)) &&

1480 
swkey
->
ù
.
‰ag
 !
OVS_FRAG_TYPE_LATER
) {

1482 i‡(
swkey
->
ù
.
¥Ÿo
 =
IPPROTO_TCP
) {

1483 
ovs_key_t˝
 *
t˝_key
;

1485 
∆a
 = 
	`∆a_ª£rve
(
skb
, 
OVS_KEY_ATTR_TCP
, (*
t˝_key
));

1486 i‡(!
∆a
)

1487 
∆a_put_Áûuª
;

1488 
t˝_key
 = 
	`∆a_d©a
(
∆a
);

1489 i‡(
swkey
->
ëh
.
ty≥
 =
	`ht⁄s
(
ETH_P_IP
)) {

1490 
t˝_key
->
t˝_§c
 = 
swkey
->
ùv4
.
ç
.
§c
;

1491 
t˝_key
->
t˝_d°
 = 
swkey
->
ùv4
.
ç
.
d°
;

1492 } i‡(
swkey
->
ëh
.
ty≥
 =
	`ht⁄s
(
ETH_P_IPV6
)) {

1493 
t˝_key
->
t˝_§c
 = 
swkey
->
ùv6
.
ç
.
§c
;

1494 
t˝_key
->
t˝_d°
 = 
swkey
->
ùv6
.
ç
.
d°
;

1496 } i‡(
swkey
->
ù
.
¥Ÿo
 =
IPPROTO_UDP
) {

1497 
ovs_key_udp
 *
udp_key
;

1499 
∆a
 = 
	`∆a_ª£rve
(
skb
, 
OVS_KEY_ATTR_UDP
, (*
udp_key
));

1500 i‡(!
∆a
)

1501 
∆a_put_Áûuª
;

1502 
udp_key
 = 
	`∆a_d©a
(
∆a
);

1503 i‡(
swkey
->
ëh
.
ty≥
 =
	`ht⁄s
(
ETH_P_IP
)) {

1504 
udp_key
->
udp_§c
 = 
swkey
->
ùv4
.
ç
.
§c
;

1505 
udp_key
->
udp_d°
 = 
swkey
->
ùv4
.
ç
.
d°
;

1506 } i‡(
swkey
->
ëh
.
ty≥
 =
	`ht⁄s
(
ETH_P_IPV6
)) {

1507 
udp_key
->
udp_§c
 = 
swkey
->
ùv6
.
ç
.
§c
;

1508 
udp_key
->
udp_d°
 = 
swkey
->
ùv6
.
ç
.
d°
;

1510 } i‡(
swkey
->
ëh
.
ty≥
 =
	`ht⁄s
(
ETH_P_IP
) &&

1511 
swkey
->
ù
.
¥Ÿo
 =
IPPROTO_ICMP
) {

1512 
ovs_key_icmp
 *
icmp_key
;

1514 
∆a
 = 
	`∆a_ª£rve
(
skb
, 
OVS_KEY_ATTR_ICMP
, (*
icmp_key
));

1515 i‡(!
∆a
)

1516 
∆a_put_Áûuª
;

1517 
icmp_key
 = 
	`∆a_d©a
(
∆a
);

1518 
icmp_key
->
icmp_ty≥
 = 
	`¡ohs
(
swkey
->
ùv4
.
ç
.
§c
);

1519 
icmp_key
->
icmp_code
 = 
	`¡ohs
(
swkey
->
ùv4
.
ç
.
d°
);

1520 } i‡(
swkey
->
ëh
.
ty≥
 =
	`ht⁄s
(
ETH_P_IPV6
) &&

1521 
swkey
->
ù
.
¥Ÿo
 =
IPPROTO_ICMPV6
) {

1522 
ovs_key_icmpv6
 *
icmpv6_key
;

1524 
∆a
 = 
	`∆a_ª£rve
(
skb
, 
OVS_KEY_ATTR_ICMPV6
,

1525 (*
icmpv6_key
));

1526 i‡(!
∆a
)

1527 
∆a_put_Áûuª
;

1528 
icmpv6_key
 = 
	`∆a_d©a
(
∆a
);

1529 
icmpv6_key
->
icmpv6_ty≥
 = 
	`¡ohs
(
swkey
->
ùv6
.
ç
.
§c
);

1530 
icmpv6_key
->
icmpv6_code
 = 
	`¡ohs
(
swkey
->
ùv6
.
ç
.
d°
);

1532 i‡(
icmpv6_key
->
icmpv6_ty≥
 =
NDISC_NEIGHBOUR_SOLICITATION
 ||

1533 
icmpv6_key
->
icmpv6_ty≥
 =
NDISC_NEIGHBOUR_ADVERTISEMENT
) {

1534 
ovs_key_nd
 *
nd_key
;

1536 
∆a
 = 
	`∆a_ª£rve
(
skb
, 
OVS_KEY_ATTR_ND
, (*
nd_key
));

1537 i‡(!
∆a
)

1538 
∆a_put_Áûuª
;

1539 
nd_key
 = 
	`∆a_d©a
(
∆a
);

1540 
	`mem˝y
(
nd_key
->
nd_èrgë
, &
swkey
->
ùv6
.
nd
.
èrgë
,

1541 (
nd_key
->
nd_èrgë
));

1542 
	`mem˝y
(
nd_key
->
nd_¶l
, 
swkey
->
ùv6
.
nd
.
¶l
, 
ETH_ALEN
);

1543 
	`mem˝y
(
nd_key
->
nd_él
, 
swkey
->
ùv6
.
nd
.
él
, 
ETH_ALEN
);

1548 
u√nˇp
:

1549 i‡(
íˇp
)

1550 
	`∆a_√°_íd
(
skb
, 
íˇp
);

1554 
∆a_put_Áûuª
:

1555  -
EMSGSIZE
;

1556 
	}
}

1560 
	$ovs_Êow_öô
()

1562 
Êow_ˇche
 = 
	`kmem_ˇche_¸óã
("sw_Êow", (
sw_Êow
), 0,

1563 0, 
NULL
);

1564 i‡(
Êow_ˇche
 =
NULL
)

1565  -
ENOMEM
;

1568 
	}
}

1571 
	$ovs_Êow_exô
()

1573 
	`kmem_ˇche_de°roy
(
Êow_ˇche
);

1574 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/flow.h

19 #i‚de‡
FLOW_H


20 
	#FLOW_H
 1

	)

22 
	~<löux/kî√l.h
>

23 
	~<löux/√éök.h
>

24 
	~<löux/›ívswôch.h
>

25 
	~<löux/•ölock.h
>

26 
	~<löux/ty≥s.h
>

27 
	~<löux/rcupd©e.h
>

28 
	~<löux/if_ëhî.h
>

29 
	~<löux/ö6.h
>

30 
	~<löux/jiffõs.h
>

31 
	~<löux/time.h
>

32 
	~<löux/Êex_¨øy.h
>

33 
	~<√t/öë_e˙.h
>

35 
	gsk_buff
;

37 
	ssw_Êow_a˘i⁄s
 {

38 
rcu_hód
 
	mrcu
;

39 
u32
 
	ma˘i⁄s_Àn
;

40 
∆©å
 
	ma˘i⁄s
[];

44 
	#OVS_TNL_F_DONT_FRAGMENT
 (1 << 0)

	)

45 
	#OVS_TNL_F_CSUM
 (1 << 1)

	)

46 
	#OVS_TNL_F_KEY
 (1 << 2)

	)

49 
	#OVS_TUNNEL_KEY_SIZE
 \

50 (
	`off£tof
(
ovs_key_ùv4_tu¬ñ
, 
ùv4_âl
) + \

51 
	`FIELD_SIZEOF
(
ovs_key_ùv4_tu¬ñ
, 
ùv4_âl
))

	)

53 
	sovs_key_ùv4_tu¬ñ
 {

54 
__be64
 
	mtun_id
;

55 
__be32
 
	mùv4_§c
;

56 
__be32
 
	mùv4_d°
;

57 
u16
 
	mtun_Êags
;

58 
u8
 
	mùv4_tos
;

59 
u8
 
	mùv4_âl
;

62 
	ssw_Êow_key
 {

65 
ovs_key_ùv4_tu¬ñ
 
	mtun_key
;

66 } 
	mtun
;

67 
u32
 
	m¥i‹ôy
;

68 
u32
 
	mskb_m¨k
;

69 
u16
 
	mö_p‹t
;

70 } 
	mphy
;

72 
u8
 
	m§c
[
ETH_ALEN
];

73 
u8
 
	md°
[
ETH_ALEN
];

74 
__be16
 
	mtci
;

75 
__be16
 
	mty≥
;

76 } 
	mëh
;

78 
u8
 
	m¥Ÿo
;

79 
u8
 
	mtos
;

80 
u8
 
	mâl
;

81 
u8
 
	m‰ag
;

82 } 
	mù
;

86 
__be32
 
	m§c
;

87 
__be32
 
	md°
;

88 } 
	maddr
;

91 
__be16
 
	m§c
;

92 
__be16
 
	md°
;

93 } 
	mç
;

95 
u8
 
	msha
[
ETH_ALEN
];

96 
u8
 
	mtha
[
ETH_ALEN
];

97 } 
	m¨p
;

99 } 
	mùv4
;

102 
ö6_addr
 
	m§c
;

103 
ö6_addr
 
	md°
;

104 } 
	maddr
;

105 
__be32
 
	mœbñ
;

107 
__be16
 
	m§c
;

108 
__be16
 
	md°
;

109 } 
	mç
;

111 
ö6_addr
 
	mèrgë
;

112 
u8
 
	m¶l
[
ETH_ALEN
];

113 
u8
 
	mél
[
ETH_ALEN
];

114 } 
	mnd
;

115 } 
	mùv6
;

119 
	ssw_Êow
 {

120 
rcu_hód
 
	mrcu
;

121 
hli°_node
 
	mhash_node
[2];

122 
u32
 
	mhash
;

124 
sw_Êow_key
 
	mkey
;

125 
sw_Êow_a˘i⁄s
 
__rcu
 *
	msf_a˘s
;

127 
•ölock_t
 
	mlock
;

128 
	mu£d
;

129 
u64
 
	m∑ckë_cou¡
;

130 
u64
 
	mbyã_cou¡
;

131 
u8
 
	mt˝_Êags
;

134 
	s¨p_ëh_hódî
 {

135 
__be16
 
	m¨_hrd
;

136 
__be16
 
	m¨_¥o
;

137 
	m¨_h 
;

138 
	m¨_∂n
;

139 
__be16
 
	m¨_›
;

142 
	m¨_sha
[
ETH_ALEN
];

143 
	m¨_sù
[4];

144 
	m¨_tha
[
ETH_ALEN
];

145 
	m¨_tù
[4];

146 } 
	g__∑cked
;

148 
ovs_Êow_öô
();

149 
ovs_Êow_exô
();

151 
sw_Êow
 *
ovs_Êow_Æloc
();

152 
ovs_Êow_de„ºed_‰ì
(
sw_Êow
 *);

153 
ovs_Êow_‰ì
(
sw_Êow
 *);

155 
sw_Êow_a˘i⁄s
 *
ovs_Êow_a˘i⁄s_Æloc
(
a˘i⁄s_Àn
);

156 
ovs_Êow_de„ºed_‰ì_a˘s
(
sw_Êow_a˘i⁄s
 *);

158 
ovs_Êow_exåa˘
(
sk_buff
 *, 
u16
 
ö_p‹t
, 
sw_Êow_key
 *,

159 *
key_À≈
);

160 
ovs_Êow_u£d
(
sw_Êow
 *, 
sk_buff
 *);

161 
u64
 
ovs_Êow_u£d_time
(
Êow_jiffõs
);

191 
	#FLOW_BUFSIZE
 220

	)

193 
ovs_Êow_to_∆©ås
(c⁄° 
sw_Êow_key
 *, 
sk_buff
 *);

194 
ovs_Êow_‰om_∆©ås
(
sw_Êow_key
 *
swkey
, *
key_À≈
,

195 c⁄° 
∆©å
 *);

196 
ovs_Êow_mëad©a_‰om_∆©ås
(
sw_Êow
 *
Êow
, 
key_Àn
,

197 c⁄° 
∆©å
 *
©å
);

199 
	#MAX_ACTIONS_BUFSIZE
 (16 * 1024)

	)

200 
	#TBL_MIN_BUCKETS
 1024

	)

202 
	sÊow_èbÀ
 {

203 
Êex_¨øy
 *
	mbuckës
;

204 
	mcou¡
, 
	mn_buckës
;

205 
rcu_hód
 
	mrcu
;

206 
	mnode_vî
;

207 
u32
 
	mhash_£ed
;

208 
boﬁ
 
	mkìp_Êows
;

211 
ölöe
 
	$ovs_Êow_tbl_cou¡
(
Êow_èbÀ
 *
èbÀ
)

213  
èbÀ
->
cou¡
;

214 
	}
}

216 
ölöe
 
	$ovs_Êow_tbl_√ed_to_ex∑nd
(
Êow_èbÀ
 *
èbÀ
)

218  (
èbÀ
->
cou¡
 >ÅabÀ->
n_buckës
);

219 
	}
}

221 
sw_Êow
 *
ovs_Êow_tbl_lookup
(
Êow_èbÀ
 *
èbÀ
,

222 
sw_Êow_key
 *
key
, 
Àn
);

223 
ovs_Êow_tbl_de°roy
(
Êow_èbÀ
 *
èbÀ
);

224 
ovs_Êow_tbl_de„ºed_de°roy
(
Êow_èbÀ
 *
èbÀ
);

225 
Êow_èbÀ
 *
ovs_Êow_tbl_Æloc
(
√w_size
);

226 
Êow_èbÀ
 *
ovs_Êow_tbl_ex∑nd
(Êow_èbÀ *
èbÀ
);

227 
Êow_èbÀ
 *
ovs_Êow_tbl_ªhash
(Êow_èbÀ *
èbÀ
);

228 
ovs_Êow_tbl_ö£π
(
Êow_èbÀ
 *
èbÀ
, 
sw_Êow
 *
Êow
,

229 
sw_Êow_key
 *
key
, 
key_Àn
);

230 
ovs_Êow_tbl_ªmove
(
Êow_èbÀ
 *
èbÀ
, 
sw_Êow
 *
Êow
);

232 
sw_Êow
 *
ovs_Êow_tbl_√xt
(
Êow_èbÀ
 *
èbÀ
, 
u32
 *
buckë
, u32 *
idx
);

233 c⁄° 
ovs_key_Àns
[
OVS_KEY_ATTR_MAX
 + 1];

234 
ùv4_tun_‰om_∆©å
(c⁄° 
∆©å
 *
©å
,

235 
ovs_key_ùv4_tu¬ñ
 *
tun_key
);

236 
ùv4_tun_to_∆©å
(
sk_buff
 *
skb
,

237 c⁄° 
ovs_key_ùv4_tu¬ñ
 *
tun_key
);

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/genl_exec.c

19 
	#¥_fmt
(
fmt
Ë
KBUILD_MODNAME
 ": " 
	)
fmt

21 
	~<löux/vîsi⁄.h
>

22 
	~<löux/com∂ëi⁄.h
>

23 
	~<√t/gíëlök.h
>

24 
	~"gíl_exec.h
"

26 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,35)

28 
DEFINE_MUTEX
(
gíl_exec_lock
);

30 
gíl_exec_func_t
 
	ggíl_exec_fun˘i⁄
;

31 
	ggíl_exec_fun˘i⁄_ªt
;

32 *
	ggíl_exec_d©a
;

33 
com∂ëi⁄
 
	gd⁄e
;

35 
sk_buff
 *
	ggílmsg_skb
;

37 
	$gíl_exec_cmd
(
sk_buff
 *
dummy
, 
gíl_öfo
 *
dummy2
)

39 
gíl_exec_fun˘i⁄_ªt
 = 
	`gíl_exec_fun˘i⁄
(
gíl_exec_d©a
);

40 
	`com∂ëe
(&
d⁄e
);

42 
	}
}

44 
	eexec_cmd
 {

45 
	mGENL_EXEC_UNSPEC
,

46 
	mGENL_EXEC_RUN
,

49 
gíl_Ámûy
 
	ggíl_exec_Ámûy
 = {

50 .
id
 = 
GENL_ID_GENERATE
,

51 .
	g«me
 = "ovs_genl_exec",

52 .
	gvîsi⁄
 = 1,

55 
gíl_›s
 
	ggíl_exec_›s
[] = {

57 .
cmd
 = 
GENL_EXEC_RUN
,

58 .
	gdoô
 = 
gíl_exec_cmd
,

59 .
	gÊags
 = 
CAP_NET_ADMIN
,

63 
	$gíl_exec_öô
()

65 
îr
;

67 
îr
 = 
	`gíl_ªgi°î_Ámûy_wôh_›s
(&
gíl_exec_Ámûy
,

68 
gíl_exec_›s
, 
	`ARRAY_SIZE
(genl_exec_ops));

70 i‡(
îr
)

71  
îr
;

73 
gílmsg_skb
 = 
	`gílmsg_√w
(0, 
GFP_KERNEL
);

74 i‡(!
gílmsg_skb
) {

75 
	`gíl_uƒegi°î_Ámûy
(&
gíl_exec_Ámûy
);

76  -
ENOMEM
;

79 
	}
}

81 
	$gíl_exec_exô
()

83 
	`k‰ì_skb
(
gílmsg_skb
);

84 
	`gíl_uƒegi°î_Ámûy
(&
gíl_exec_Ámûy
);

85 
	}
}

91 
	$gíl_exec
(
gíl_exec_func_t
 
func
, *
d©a
)

93 
ªt
;

95 
	`muãx_lock
(&
gíl_exec_lock
);

97 
	`öô_com∂ëi⁄
(&
d⁄e
);

98 
	`skb_gë
(
gílmsg_skb
);

99 
	`gílmsg_put
(
gílmsg_skb
, 0, 0, &
gíl_exec_Ámûy
,

100 
NLM_F_REQUEST
, 
GENL_EXEC_RUN
);

102 
gíl_exec_fun˘i⁄
 = 
func
;

103 
gíl_exec_d©a
 = 
d©a
;

106 
ªt
 = 
	`gílmsg_uniˇ°
(&
öô_√t
, 
gílmsg_skb
, 0);

108 i‡(!
ªt
) {

109 
	`waô_f‹_com∂ëi⁄
(&
d⁄e
);

110 
ªt
 = 
gíl_exec_fun˘i⁄_ªt
;

112 
	`¥_îr
("gíl_exe¯£ndÉº‹ %d\n", 
ªt
);

116 
	`skb_sh¨ed
(
gílmsg_skb
))

117 
	`˝u_ªœx
();

119 
gílmsg_skb
->
d©a
 = gílmsg_skb->
hód
;

120 
	`skb_ª£t_èû_poöãr
(
gílmsg_skb
);

122 
	`muãx_u∆ock
(&
gíl_exec_lock
);

124  
ªt
;

125 
	}
}

129 
	$gíl_exec
(
gíl_exec_func_t
 
func
, *
d©a
)

131 
ªt
;

133 
	`gíl_lock
();

134 
ªt
 = 
	`func
(
d©a
);

135 
	`gíl_u∆ock
();

136  
ªt
;

137 
	}
}

139 
	$gíl_exec_öô
()

142 
	}
}

144 
	$gíl_exec_exô
()

146 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/genl_exec.h

19 #i‚de‡
GENL_EXEC_H


20 
	#GENL_EXEC_H
 1

	)

22 (*
	tgíl_exec_func_t
)(*
	td©a
);

23 
	`gíl_exec
(
gíl_exec_func_t
 
func
, *
d©a
);

24 
	`gíl_exec_öô
();

25 
	`gíl_exec_exô
();

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/gf256.c

2 
	~"gf256.h
"

4 
FIELD
* 
	gmèb
=
NULL
;

5 
FIELD
* 
	gdèb
=
NULL
;

7 
	$öôMulDivTab
(* 
fûeName
)

9 if(!
mèb
) {

10 
fûe
 * 
f
;

11 
mm_£gmít_t
 
fs
;

12 if((
f
=
	`fûp_›í
(
fûeName
,
O_RDONLY
, 0))==
NULL
)

13  
FALSE
;

14 
mèb
=(
FIELD
*)
	`kmÆloc
((FIELD)*65536, 
GFP_KERNEL
);

15 
dèb
=(
FIELD
*)
	`kmÆloc
((FIELD)*65536, 
GFP_KERNEL
);

16 
fs
 = 
	`gë_fs
();

17 
	`£t_fs
(
KERNEL_DS
);

18 
f
->
f_›
->
	`ªad
(f, 
mèb
, 65536L,&(f->
f_pos
));

19 
f
->
f_›
->
	`ªad
(f, 
dèb
, 65536L,&(f->
f_pos
));

20 
	`£t_fs
(
fs
);

21 
	`fûp_˛o£
(
f
, 
NULL
);

23  
TRUE
;

24 
	}
}

26 
	$‰ìDivTab
()

28 
	`k‰ì
(
mèb
);

29 
	`k‰ì
(
dèb
);

30 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/gf256.h

12 #i‚de‡
GF256_H


13 
	#GF256_H


	)

15 
	~<löux/¶ab.h
>

16 
	~<löux/fs.h
>

17 
	~<löux/mm.h
>

18 
	~<asm/uac˚ss.h
>

20 
	#TRUE
 1

	)

21 
	#FALSE
 0

	)

23 
	#uöt16_t
 

	)

25 #i‚de‡
NULL


26 
	#NULL
 0

	)

29 
	#åue
 1

	)

30 
	#Ál£
 0

	)

31 
	#boﬁ
 

	)

33 
	#I_GF
 ((
FIELD
)1)

	)

36 
	tFIELD
;

38 
	tul⁄g
;

40 
FIELD
* 
mèb
;

41 
FIELD
* 
dèb
;

44 
öôMulDivTab
(* 
fûeName
);

46 
‰ìDivTab
();

48 
	#gÁdd
(
x
,
y
Ë(
FIELD
)((x)^(y))

	)

49 
	#gfsub
(
x
,
y
Ë(
FIELD
)((x)^(y))

	)

50 
	#gfmul
(
x
,
y
Ë(
FIELD
)(
mèb
[(x)*256+(y)])

	)

51 
	#gfdiv
(
x
,
y
Ë(
FIELD
)(
dèb
[(x)*256+(y)])

	)

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/brcompat.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

17 c⁄° 
modvîsi⁄_öfo
 
	g____vîsi⁄s
[]

18 
__u£d


19 
__©åibuã__
((
£˘i⁄
("__versions"))) = {

56 c⁄° 
	g__moduÀ_dïíds
[]

57 
__u£d


58 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

62 
MODULE_INFO
(
§cvîsi⁄
, "B0C93D48E0A4606D68CFC7F");

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/addrconf_core-openvswitch.c

1 
	~<löux/vîsi⁄.h
>

2 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,21)

9 
	~<√t/ùv6.h
>

11 
	#IPV6_ADDR_SCOPE_TYPE
(
sc›e
Ë((sc›eË<< 16)

	)

13 
ölöe
 
	$ùv6_addr_sc›e2ty≥
(
sc›e
)

15 
sc›e
) {

16 
IPV6_ADDR_SCOPE_NODELOCAL
:

17  (
	`IPV6_ADDR_SCOPE_TYPE
(
IPV6_ADDR_SCOPE_NODELOCAL
) |

18 
IPV6_ADDR_LOOPBACK
);

19 
IPV6_ADDR_SCOPE_LINKLOCAL
:

20  (
	`IPV6_ADDR_SCOPE_TYPE
(
IPV6_ADDR_SCOPE_LINKLOCAL
) |

21 
IPV6_ADDR_LINKLOCAL
);

22 
IPV6_ADDR_SCOPE_SITELOCAL
:

23  (
	`IPV6_ADDR_SCOPE_TYPE
(
IPV6_ADDR_SCOPE_SITELOCAL
) |

24 
IPV6_ADDR_SITELOCAL
);

26  
	`IPV6_ADDR_SCOPE_TYPE
(
sc›e
);

27 
	}
}

29 
	$__ùv6_addr_ty≥
(c⁄° 
ö6_addr
 *
addr
)

31 
__be32
 
°
;

33 
°
 = 
addr
->
s6_addr32
[0];

38 i‡((
°
 & 
	`ht⁄l
(0xE0000000)) != htonl(0x00000000) &&

39 (
°
 & 
	`ht⁄l
(0xE0000000)) != htonl(0xE0000000))

40  (
IPV6_ADDR_UNICAST
 |

41 
	`IPV6_ADDR_SCOPE_TYPE
(
IPV6_ADDR_SCOPE_GLOBAL
));

43 i‡((
°
 & 
	`ht⁄l
(0xFF000000)) == htonl(0xFF000000)) {

46  (
IPV6_ADDR_MULTICAST
 |

47 
	`ùv6_addr_sc›e2ty≥
(
	`IPV6_ADDR_MC_SCOPE
(
addr
)));

50 i‡((
°
 & 
	`ht⁄l
(0xFFC00000)) == htonl(0xFE800000))

51  (
IPV6_ADDR_LINKLOCAL
 | 
IPV6_ADDR_UNICAST
 |

52 
	`IPV6_ADDR_SCOPE_TYPE
(
IPV6_ADDR_SCOPE_LINKLOCAL
));

53 i‡((
°
 & 
	`ht⁄l
(0xFFC00000)) == htonl(0xFEC00000))

54  (
IPV6_ADDR_SITELOCAL
 | 
IPV6_ADDR_UNICAST
 |

55 
	`IPV6_ADDR_SCOPE_TYPE
(
IPV6_ADDR_SCOPE_SITELOCAL
));

56 i‡((
°
 & 
	`ht⁄l
(0xFE000000)) == htonl(0xFC000000))

57  (
IPV6_ADDR_UNICAST
 |

58 
	`IPV6_ADDR_SCOPE_TYPE
(
IPV6_ADDR_SCOPE_GLOBAL
));

60 i‡((
addr
->
s6_addr32
[0] |áddr->s6_addr32[1]) == 0) {

61 i‡(
addr
->
s6_addr32
[2] == 0) {

62 i‡(
addr
->
s6_addr32
[3] == 0)

63  
IPV6_ADDR_ANY
;

65 i‡(
addr
->
s6_addr32
[3] =
	`ht⁄l
(0x00000001))

66  (
IPV6_ADDR_LOOPBACK
 | 
IPV6_ADDR_UNICAST
 |

67 
	`IPV6_ADDR_SCOPE_TYPE
(
IPV6_ADDR_SCOPE_LINKLOCAL
));

69  (
IPV6_ADDR_COMPATv4
 | 
IPV6_ADDR_UNICAST
 |

70 
	`IPV6_ADDR_SCOPE_TYPE
(
IPV6_ADDR_SCOPE_GLOBAL
));

73 i‡(
addr
->
s6_addr32
[2] =
	`ht⁄l
(0x0000ffff))

74  (
IPV6_ADDR_MAPPED
 |

75 
	`IPV6_ADDR_SCOPE_TYPE
(
IPV6_ADDR_SCOPE_GLOBAL
));

78  (
IPV6_ADDR_RESERVED
 |

79 
	`IPV6_ADDR_SCOPE_TYPE
(
IPV6_ADDR_SCOPE_GLOBAL
));

80 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/dev-openvswitch.c

1 #i‚de‡
HAVE_DEV_DISABLE_LRO


3 
	~<löux/√tdevi˚.h
>

5 #ifde‡
NETIF_F_LRO


6 
	~<löux/ëhtoﬁ.h
>

16 
	$dev_dißbÀ_Ão
(
√t_devi˚
 *
dev
)

18 i‡(
dev
->
ëhtoﬁ_›s
 && dev->ëhtoﬁ_›s->
gë_Êags
 &&

19 
dev
->
ëhtoﬁ_›s
->
£t_Êags
) {

20 
u32
 
Êags
 = 
dev
->
ëhtoﬁ_›s
->
	`gë_Êags
(dev);

21 i‡(
Êags
 & 
ETH_FLAG_LRO
) {

22 
Êags
 &~
ETH_FLAG_LRO
;

23 
dev
->
ëhtoﬁ_›s
->
	`£t_Êags
(dev, 
Êags
);

26 
	`WARN_ON
(
dev
->
„©uªs
 & 
NETIF_F_LRO
);

27 
	}
}

29 
	$dev_dißbÀ_Ão
(
√t_devi˚
 *
dev
Ë{ 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/exthdrs_core.c

1 
	~<löux/ùv6.h
>

2 
	~<√t/ùv6.h
>

7 
	$Ωl_ùv6_skù_exthdr
(c⁄° 
sk_buff
 *
skb
, 
°¨t
,

8 
u8
 *
√xthdΩ
, 
__be16
 *
‰ag_ofÂ
)

10 
u8
 
√xthdr
 = *
√xthdΩ
;

12 *
‰ag_ofÂ
 = 0;

14 
	`ùv6_ext_hdr
(
√xthdr
)) {

15 
ùv6_›t_hdr
 
_hdr
, *
hp
;

16 
hdæí
;

18 i‡(
√xthdr
 =
NEXTHDR_NONE
)

20 
hp
 = 
	`skb_hódî_poöãr
(
skb
, 
°¨t
, (
_hdr
), &_hdr);

21 i‡(
hp
 =
NULL
)

23 i‡(
√xthdr
 =
NEXTHDR_FRAGMENT
) {

24 
__be16
 
_‰ag_off
, *
Â
;

25 
Â
 = 
	`skb_hódî_poöãr
(
skb
,

26 
°¨t
+
	`off£tof
(
‰ag_hdr
,

27 
‰ag_off
),

28 (
_‰ag_off
),

29 &
_‰ag_off
);

30 i‡(
Â
 =
NULL
)

33 *
‰ag_ofÂ
 = *
Â
;

34 i‡(
	`¡ohs
(*
‰ag_ofÂ
) & ~0x7)

36 
hdæí
 = 8;

37 } i‡(
√xthdr
 =
NEXTHDR_AUTH
)

38 
hdæí
 = (
hp
->hdrlen+2)<<2;

40 
hdæí
 = 
	`ùv6_›éí
(
hp
);

42 
√xthdr
 = 
hp
->nexthdr;

43 
°¨t
 +
hdæí
;

46 *
√xthdΩ
 = 
√xthdr
;

47  
°¨t
;

48 
	}
}

76 
	$Ωl_ùv6_föd_hdr
(c⁄° 
sk_buff
 *
skb
, *
off£t
,

77 
èrgë
, *
‰agoff
, *
Êags
)

79 
°¨t
 = 
	`skb_√tw‹k_off£t
(
skb
Ë+ (
ùv6hdr
);

80 
u8
 
√xthdr
 = 
	`ùv6_hdr
(
skb
)->nexthdr;

81 
Àn
;

82 
boﬁ
 
found
;

84 i‡(
‰agoff
)

85 *
‰agoff
 = 0;

87 i‡(*
off£t
) {

88 
ùv6hdr
 
_ù6
, *
ù6
;

90 
ù6
 = 
	`skb_hódî_poöãr
(
skb
, *
off£t
, (
_ù6
), &_ip6);

91 i‡(!
ù6
 || (ù6->
vîsi⁄
 != 6)) {

92 
	`¥ötk
(
KERN_ERR
 "IPv6 headerÇot found\n");

93  -
EBADMSG
;

95 
°¨t
 = *
off£t
 + (
ùv6hdr
);

96 
√xthdr
 = 
ù6
->nexthdr;

98 
Àn
 = 
skb
->À¿- 
°¨t
;

101 
ùv6_›t_hdr
 
_hdr
, *
hp
;

102 
hdæí
;

103 
found
 = (
√xthdr
 =
èrgë
);

105 i‡((!
	`ùv6_ext_hdr
(
√xthdr
)Ë||Çexthd∏=
NEXTHDR_NONE
) {

106 i‡(
èrgë
 < 0)

108  -
ENOENT
;

111 
hp
 = 
	`skb_hódî_poöãr
(
skb
, 
°¨t
, (
_hdr
), &_hdr);

112 i‡(
hp
 =
NULL
)

113  -
EBADMSG
;

115 i‡(
√xthdr
 =
NEXTHDR_ROUTING
) {

116 
ùv6_π_hdr
 
_rh
, *
rh
;

118 
rh
 = 
	`skb_hódî_poöãr
(
skb
, 
°¨t
, (
_rh
),

119 &
_rh
);

120 i‡(
rh
 =
NULL
)

121  -
EBADMSG
;

123 i‡(
Êags
 && (*Êag†& 
OVS_IP6T_FH_F_SKIP_RH
) &&

124 
rh
->
£gmíts_À·
 == 0)

125 
found
 = 
Ál£
;

128 i‡(
√xthdr
 =
NEXTHDR_FRAGMENT
) {

129 
_‰ag_off
;

130 
__be16
 *
Â
;

132 i‡(
Êags
)

133 *
Êags
 |
OVS_IP6T_FH_F_FRAG
;

134 
Â
 = 
	`skb_hódî_poöãr
(
skb
,

135 
°¨t
+
	`off£tof
(
‰ag_hdr
,

136 
‰ag_off
),

137 (
_‰ag_off
),

138 &
_‰ag_off
);

139 i‡(
Â
 =
NULL
)

140  -
EBADMSG
;

142 
_‰ag_off
 = 
	`¡ohs
(*
Â
) & ~0x7;

143 i‡(
_‰ag_off
) {

144 i‡(
èrgë
 < 0 &&

145 ((!
	`ùv6_ext_hdr
(
hp
->
√xthdr
)) ||

146 
hp
->
√xthdr
 =
NEXTHDR_NONE
)) {

147 i‡(
‰agoff
)

148 *
‰agoff
 = 
_‰ag_off
;

149  
hp
->
√xthdr
;

151  -
ENOENT
;

153 
hdæí
 = 8;

154 } i‡(
√xthdr
 =
NEXTHDR_AUTH
) {

155 i‡(
Êags
 && (*Êag†& 
OVS_IP6T_FH_F_AUTH
) &&

156 (
èrgë
 < 0))

158 
hdæí
 = (
hp
->hdrlen + 2) << 2;

160 
hdæí
 = 
	`ùv6_›éí
(
hp
);

162 i‡(!
found
) {

163 
√xthdr
 = 
hp
->nexthdr;

164 
Àn
 -
hdæí
;

165 
°¨t
 +
hdæí
;

167 } !
found
);

169 *
off£t
 = 
°¨t
;

170  
√xthdr
;

171 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/flex_array.c

1 
	~<löux/vîsi⁄.h
>

3 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(3,0,0)

27 
	~<löux/Êex_¨øy.h
>

28 
	~<löux/¶ab.h
>

29 
	~<löux/°ddef.h
>

30 
	~<löux/moduÀ.h
>

31 
	~<löux/ªcùroˇl_div.h
>

33 
	sÊex_¨øy_∑π
 {

34 
	mñemíts
[
FLEX_ARRAY_PART_SIZE
];

43 
ölöe
 
	$ñemíts_fô_ö_ba£
(
Êex_¨øy
 *
Á
)

45 
d©a_size
 = 
Á
->
ñemít_size
 * fa->
tŸÆ_ƒ_ñemíts
;

46 i‡(
d©a_size
 <
FLEX_ARRAY_BASE_BYTES_LEFT
)

49 
	}
}

92 
Êex_¨øy
 *
	$Êex_¨øy_Æloc
(
ñemít_size
, 
tŸÆ
,

93 
gÂ_t
 
Êags
)

95 
Êex_¨øy
 *
ªt
;

96 
ñems_≥r_∑π
 = 0;

97 
ªcùroˇl_ñems
 = 0;

98 
max_size
 = 0;

100 i‡(
ñemít_size
) {

101 
ñems_≥r_∑π
 = 
	`FLEX_ARRAY_ELEMENTS_PER_PART
(
ñemít_size
);

102 
ªcùroˇl_ñems
 = 
	`ªcùroˇl_vÆue
(
ñems_≥r_∑π
);

103 
max_size
 = 
FLEX_ARRAY_NR_BASE_PTRS
 * 
ñems_≥r_∑π
;

107 i‡(
tŸÆ
 > 
max_size
)

108  
NULL
;

109 
ªt
 = 
	`kzÆloc
((
Êex_¨øy
), 
Êags
);

110 i‡(!
ªt
)

111  
NULL
;

112 
ªt
->
ñemít_size
 =Élement_size;

113 
ªt
->
tŸÆ_ƒ_ñemíts
 = 
tŸÆ
;

114 
ªt
->
ñems_≥r_∑π
 =Élems_per_part;

115 
ªt
->
ªcùroˇl_ñems
 =Ñeciprocal_elems;

116 i‡(
	`ñemíts_fô_ö_ba£
(
ªt
Ë&& !(
Êags
 & 
__GFP_ZERO
))

117 
	`mem£t
(&
ªt
->
∑πs
[0], 
FLEX_ARRAY_FREE
,

118 
FLEX_ARRAY_BASE_BYTES_LEFT
);

119  
ªt
;

120 
	}
}

122 
	$Á_ñemít_to_∑π_ƒ
(
Êex_¨øy
 *
Á
,

123 
ñemít_ƒ
)

125  
	`ªcùroˇl_divide
(
ñemít_ƒ
, 
Á
->
ªcùroˇl_ñems
);

126 
	}
}

135 
	$Êex_¨øy_‰ì_∑πs
(
Êex_¨øy
 *
Á
)

137 
∑π_ƒ
;

139 i‡(
	`ñemíts_fô_ö_ba£
(
Á
))

141 
∑π_ƒ
 = 0;Ö¨t_ƒ < 
FLEX_ARRAY_NR_BASE_PTRS
;Öart_nr++)

142 
	`k‰ì
(
Á
->
∑πs
[
∑π_ƒ
]);

143 
	}
}

145 
	$Êex_¨øy_‰ì
(
Êex_¨øy
 *
Á
)

147 
	`Êex_¨øy_‰ì_∑πs
(
Á
);

148 
	`k‰ì
(
Á
);

149 
	}
}

151 
	$ödex_öside_∑π
(
Êex_¨øy
 *
Á
,

152 
ñemít_ƒ
,

153 
∑π_ƒ
)

155 
∑π_off£t
;

157 
∑π_off£t
 = 
ñemít_ƒ
 - 
∑π_ƒ
 * 
Á
->
ñems_≥r_∑π
;

158  
∑π_off£t
 * 
Á
->
ñemít_size
;

159 
	}
}

161 
Êex_¨øy_∑π
 *

162 
	$__Á_gë_∑π
(
Êex_¨øy
 *
Á
, 
∑π_ƒ
, 
gÂ_t
 
Êags
)

164 
Êex_¨øy_∑π
 *
∑π
 = 
Á
->
∑πs
[
∑π_ƒ
];

165 i‡(!
∑π
) {

166 
∑π
 = 
	`kmÆloc
((
Êex_¨øy_∑π
), 
Êags
);

167 i‡(!
∑π
)

168  
NULL
;

169 i‡(!(
Êags
 & 
__GFP_ZERO
))

170 
	`mem£t
(
∑π
, 
FLEX_ARRAY_FREE
,

171 (
Êex_¨øy_∑π
));

172 
Á
->
∑πs
[
∑π_ƒ
] = 
∑π
;

174  
∑π
;

175 
	}
}

194 
	$Êex_¨øy_put
(
Êex_¨øy
 *
Á
, 
ñemít_ƒ
, *
§c
,

195 
gÂ_t
 
Êags
)

197 
∑π_ƒ
 = 0;

198 
Êex_¨øy_∑π
 *
∑π
;

199 *
d°
;

201 i‡(
ñemít_ƒ
 >
Á
->
tŸÆ_ƒ_ñemíts
)

202  -
ENOSPC
;

203 i‡(!
Á
->
ñemít_size
)

205 i‡(
	`ñemíts_fô_ö_ba£
(
Á
))

206 
∑π
 = (
Êex_¨øy_∑π
 *)&
Á
->
∑πs
[0];

208 
∑π_ƒ
 = 
	`Á_ñemít_to_∑π_ƒ
(
Á
, 
ñemít_ƒ
);

209 
∑π
 = 
	`__Á_gë_∑π
(
Á
, 
∑π_ƒ
, 
Êags
);

210 i‡(!
∑π
)

211  -
ENOMEM
;

213 
d°
 = &
∑π
->
ñemíts
[
	`ödex_öside_∑π
(
Á
, 
ñemít_ƒ
, 
∑π_ƒ
)];

214 
	`mem˝y
(
d°
, 
§c
, 
Á
->
ñemít_size
);

216 
	}
}

225 
	$Êex_¨øy_˛ór
(
Êex_¨øy
 *
Á
, 
ñemít_ƒ
)

227 
∑π_ƒ
 = 0;

228 
Êex_¨øy_∑π
 *
∑π
;

229 *
d°
;

231 i‡(
ñemít_ƒ
 >
Á
->
tŸÆ_ƒ_ñemíts
)

232  -
ENOSPC
;

233 i‡(!
Á
->
ñemít_size
)

235 i‡(
	`ñemíts_fô_ö_ba£
(
Á
))

236 
∑π
 = (
Êex_¨øy_∑π
 *)&
Á
->
∑πs
[0];

238 
∑π_ƒ
 = 
	`Á_ñemít_to_∑π_ƒ
(
Á
, 
ñemít_ƒ
);

239 
∑π
 = 
Á
->
∑πs
[
∑π_ƒ
];

240 i‡(!
∑π
)

241  -
EINVAL
;

243 
d°
 = &
∑π
->
ñemíts
[
	`ödex_öside_∑π
(
Á
, 
ñemít_ƒ
, 
∑π_ƒ
)];

244 
	`mem£t
(
d°
, 
FLEX_ARRAY_FREE
, 
Á
->
ñemít_size
);

246 
	}
}

263 
	$Êex_¨øy_¥óŒoc
(
Êex_¨øy
 *
Á
, 
°¨t
,

264 
ƒ_ñemíts
, 
gÂ_t
 
Êags
)

266 
°¨t_∑π
;

267 
íd_∑π
;

268 
∑π_ƒ
;

269 
íd
;

270 
Êex_¨øy_∑π
 *
∑π
;

272 i‡(!
°¨t
 && !
ƒ_ñemíts
)

274 i‡(
°¨t
 >
Á
->
tŸÆ_ƒ_ñemíts
)

275  -
ENOSPC
;

276 i‡(!
ƒ_ñemíts
)

279 
íd
 = 
°¨t
 + 
ƒ_ñemíts
 - 1;

281 i‡(
íd
 >
Á
->
tŸÆ_ƒ_ñemíts
)

282  -
ENOSPC
;

283 i‡(!
Á
->
ñemít_size
)

285 i‡(
	`ñemíts_fô_ö_ba£
(
Á
))

287 
°¨t_∑π
 = 
	`Á_ñemít_to_∑π_ƒ
(
Á
, 
°¨t
);

288 
íd_∑π
 = 
	`Á_ñemít_to_∑π_ƒ
(
Á
, 
íd
);

289 
∑π_ƒ
 = 
°¨t_∑π
;Ö¨t_ƒ <
íd_∑π
;Öart_nr++) {

290 
∑π
 = 
	`__Á_gë_∑π
(
Á
, 
∑π_ƒ
, 
Êags
);

291 i‡(!
∑π
)

292  -
ENOMEM
;

295 
	}
}

309 *
	$Êex_¨øy_gë
(
Êex_¨øy
 *
Á
, 
ñemít_ƒ
)

311 
∑π_ƒ
 = 0;

312 
Êex_¨øy_∑π
 *
∑π
;

314 i‡(!
Á
->
ñemít_size
)

315  
NULL
;

316 i‡(
ñemít_ƒ
 >
Á
->
tŸÆ_ƒ_ñemíts
)

317  
NULL
;

318 i‡(
	`ñemíts_fô_ö_ba£
(
Á
))

319 
∑π
 = (
Êex_¨øy_∑π
 *)&
Á
->
∑πs
[0];

321 
∑π_ƒ
 = 
	`Á_ñemít_to_∑π_ƒ
(
Á
, 
ñemít_ƒ
);

322 
∑π
 = 
Á
->
∑πs
[
∑π_ƒ
];

323 i‡(!
∑π
)

324  
NULL
;

326  &
∑π
->
ñemíts
[
	`ödex_öside_∑π
(
Á
, 
ñemít_ƒ
, 
∑π_ƒ
)];

327 
	}
}

338 *
	$Êex_¨øy_gë_±r
(
Êex_¨øy
 *
Á
, 
ñemít_ƒ
)

340 **
tmp
;

342 
tmp
 = 
	`Êex_¨øy_gë
(
Á
, 
ñemít_ƒ
);

343 i‡(!
tmp
)

344  
NULL
;

346  *
tmp
;

347 
	}
}

349 
	$∑π_is_‰ì
(
Êex_¨øy_∑π
 *
∑π
)

351 
i
;

353 
i
 = 0; i < (
Êex_¨øy_∑π
); i++)

354 i‡(
∑π
->
ñemíts
[
i
] !
FLEX_ARRAY_FREE
)

357 
	}
}

368 
	$Êex_¨øy_shrök
(
Êex_¨øy
 *
Á
)

370 
Êex_¨øy_∑π
 *
∑π
;

371 
∑π_ƒ
;

372 
ªt
 = 0;

374 i‡(!
Á
->
tŸÆ_ƒ_ñemíts
 || !Á->
ñemít_size
)

376 i‡(
	`ñemíts_fô_ö_ba£
(
Á
))

377  
ªt
;

378 
∑π_ƒ
 = 0;Ö¨t_ƒ < 
FLEX_ARRAY_NR_BASE_PTRS
;Öart_nr++) {

379 
∑π
 = 
Á
->
∑πs
[
∑π_ƒ
];

380 i‡(!
∑π
)

382 i‡(
	`∑π_is_‰ì
(
∑π
)) {

383 
Á
->
∑πs
[
∑π_ƒ
] = 
NULL
;

384 
	`k‰ì
(
∑π
);

385 
ªt
++;

388  
ªt
;

389 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/genetlink-brcompat.c

7 
	#GENL_FIRST_MCGROUP
 32

	)

8 
	#GENL_LAST_MCGROUP
 32

	)

10 
	~"gíëlök.öc
"

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/genetlink-openvswitch.c

1 
	#GENL_FIRST_MCGROUP
 16

	)

2 
	#GENL_LAST_MCGROUP
 31

	)

4 
	~"gíëlök.öc
"

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/bug.h

1 #i‚de‡
__BUG_H_WRAPPER


2 
	#__BUG_H_WRAPPER
 1

	)

4 #ö˛ude_√xà<
löux
/
bug
.
h
>

6 #i‚de‡
BUILD_BUG_ON_NOT_POWER_OF_2


8 
	#BUILD_BUG_ON_NOT_POWER_OF_2
(
n
) \

9 
	`BUILD_BUG_ON
((
n
Ë=0 || ((“Ë& (“Ë- 1)Ë!0))

	)

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/compiler-gcc.h

1 #i‚de‡
__LINUX_COMPILER_H


5 #ö˛ude_√xà<
löux
/
compûî
-
gcc
.
h
>

7 #i‚de‡
__∑cked


8 
	#__∑cked
 
	`__©åibuã__
((
∑cked
))

	)

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/compiler.h

1 #i‚de‡
__LINUX_COMPILER_WRAPPER_H


2 
	#__LINUX_COMPILER_WRAPPER_H
 1

	)

4 #ö˛ude_√xà<
löux
/
compûî
.
h
>

6 #i‚de‡
__≥r˝u


7 
	#__≥r˝u


	)

10 #i‚de‡
__rcu


11 
	#__rcu


	)

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/cpumask.h

1 #i‚de‡
__LINUX_CPUMASK_WRAPPER_H


2 
	#__LINUX_CPUMASK_WRAPPER_H


	)

4 #ö˛ude_√xà<
löux
/
˝umask
.
h
>

7 #i‚de‡
f‹_óch_possibÀ_˝u


8 
	#f‹_óch_possibÀ_˝u
 
f‹_óch_˝u


	)

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/dmi.h

1 #i‚de‡
__LINUX_DMI_WRAPPER_H


2 
	#__LINUX_DMI_WRAPPER_H
 1

	)

4 
	~<löux/vîsi⁄.h
>

5 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,23)

7 #ö˛ude_√xà<
löux
/
dmi
.
h
>

11 #i‚de‡
__DMI_H__


12 
	#__DMI_H__


	)

14 
	~<löux/li°.h
>

16 
	edmi_fõld
 {

17 
	mDMI_NONE
,

18 
	mDMI_BIOS_VENDOR
,

19 
	mDMI_BIOS_VERSION
,

20 
	mDMI_BIOS_DATE
,

21 
	mDMI_SYS_VENDOR
,

22 
	mDMI_PRODUCT_NAME
,

23 
	mDMI_PRODUCT_VERSION
,

24 
	mDMI_PRODUCT_SERIAL
,

25 
	mDMI_PRODUCT_UUID
,

26 
	mDMI_BOARD_VENDOR
,

27 
	mDMI_BOARD_NAME
,

28 
	mDMI_BOARD_VERSION
,

29 
	mDMI_BOARD_SERIAL
,

30 
	mDMI_BOARD_ASSET_TAG
,

31 
	mDMI_CHASSIS_VENDOR
,

32 
	mDMI_CHASSIS_TYPE
,

33 
	mDMI_CHASSIS_VERSION
,

34 
	mDMI_CHASSIS_SERIAL
,

35 
	mDMI_CHASSIS_ASSET_TAG
,

36 
	mDMI_STRING_MAX
,

39 
	edmi_devi˚_ty≥
 {

40 
	mDMI_DEV_TYPE_ANY
 = 0,

41 
	mDMI_DEV_TYPE_OTHER
,

42 
	mDMI_DEV_TYPE_UNKNOWN
,

43 
	mDMI_DEV_TYPE_VIDEO
,

44 
	mDMI_DEV_TYPE_SCSI
,

45 
	mDMI_DEV_TYPE_ETHERNET
,

46 
	mDMI_DEV_TYPE_TOKENRING
,

47 
	mDMI_DEV_TYPE_SOUND
,

48 
	mDMI_DEV_TYPE_IPMI
 = -1,

49 
	mDMI_DEV_TYPE_OEM_STRING
 = -2

52 
	sdmi_hódî
 {

53 
u8
 
	mty≥
;

54 
u8
 
	mÀngth
;

55 
u16
 
	mh™dÀ
;

61 
	sdmi_°rm©ch
 {

62 
u8
 
	m¶Ÿ
;

63 *
	msub°r
;

66 
	sdmi_sy°em_id
 {

67 (*
	mˇŒback
)(
	mdmi_sy°em_id
 *);

68 c⁄° *
	midít
;

69 
dmi_°rm©ch
 
	mm©ches
[4];

70 *
	mdrivî_d©a
;

73 
	#DMI_MATCH
(
a
, 
b
Ë{á, b }

	)

75 
	sdmi_devi˚
 {

76 
li°_hód
 
	mli°
;

77 
	mty≥
;

78 c⁄° *
	m«me
;

79 *
	mdevi˚_d©a
;

83 #i‡
deföed
(
CONFIG_DMI
Ë|| deföed(
CONFIG_X86_32
)

85 
dmi_check_sy°em
(
dmi_sy°em_id
 *
li°
);

86 *
dmi_gë_sy°em_öfo
(
fõld
);

87 
dmi_devi˚
 *
dmi_föd_devi˚
(
ty≥
, c⁄° *
«me
,

88 
dmi_devi˚
 *
‰om
);

89 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,16)

90 
dmi_sˇn_machöe
();

92 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,17)

93 
dmi_gë_yór
(
fõld
);

95 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,19)

96 
dmi_«me_ö_víd‹s
(*
°r
);

101 
ölöe
 
	$dmi_check_sy°em
(
dmi_sy°em_id
 *
li°
Ë{  0; 
	}
}

102 
ölöe
 *
	$dmi_gë_sy°em_öfo
(
fõld
Ë{  
NULL
; 
	}
}

103 
ölöe
 
dmi_devi˚
 *
	$dmi_föd_devi˚
(
ty≥
, c⁄° *
«me
,

104 
dmi_devi˚
 *
‰om
Ë{  
NULL
; 
	}
}

105 
ölöe
 
	$dmi_gë_yór
(
yór
Ë{  0; 
	}
}

106 
ölöe
 
	$dmi_«me_ö_víd‹s
(*
s
Ë{  0; 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/err.h

1 #i‚de‡
__LINUX_ERR_WRAPPER_H


2 
	#__LINUX_ERR_WRAPPER_H
 1

	)

4 #ö˛ude_√xà<
löux
/
îr
.
h
>

6 #i‚de‡
HAVE_ERR_CAST


14 
ölöe
 *
	$ERR_CAST
(c⁄° *
±r
)

17  (*Ë
±r
;

18 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/etherdevice.h

1 #i‚de‡
__LINUX_ETHERDEVICE_WRAPPER_H


2 
	#__LINUX_ETHERDEVICE_WRAPPER_H
 1

	)

4 
	~<löux/vîsi⁄.h
>

5 #ö˛ude_√xà<
löux
/
ëhîdevi˚
.
h
>

7 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,36)

8 
ölöe
 
	$ëh_hw_addr_øndom
(
√t_devi˚
 *
dev
)

10 
	`øndom_ëhî_addr
(
dev
->
dev_addr
);

11 
	}
}

12 #ñi‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(3,4,0)

13 
ölöe
 
	$ëh_hw_addr_øndom
(
√t_devi˚
 *
dev
)

15 
	`dev_hw_addr_øndom
(
dev
, dev->
dev_addr
);

16 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/flex_array.h

1 #i‚de‡
__LINUX_FLEX_ARRAY_WRAPPER_H


2 
	#__LINUX_FLEX_ARRAY_WRAPPER_H


	)

4 
	~<löux/vîsi⁄.h
>

5 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(3,0,0)

6 #ö˛ude_√xà<
löux
/
Êex_¨øy
.
h
>

9 
	~<löux/ty≥s.h
>

10 
	~<asm/∑ge.h
>

12 
	#FLEX_ARRAY_PART_SIZE
 
PAGE_SIZE


	)

13 
	#FLEX_ARRAY_BASE_SIZE
 
PAGE_SIZE


	)

15 
	gÊex_¨øy_∑π
;

24 
	sÊex_¨øy
 {

27 
	mñemít_size
;

28 
	mtŸÆ_ƒ_ñemíts
;

29 
	mñems_≥r_∑π
;

30 
u32
 
	mªcùroˇl_ñems
;

31 
Êex_¨øy_∑π
 *
	m∑πs
[];

37 
	m∑ddög
[
FLEX_ARRAY_BASE_SIZE
];

42 
	#FLEX_ARRAY_BASE_BYTES_LEFT
 \

43 (
FLEX_ARRAY_BASE_SIZE
 - 
	`off£tof
(
Êex_¨øy
, 
∑πs
))

	)

46 
	#FLEX_ARRAY_NR_BASE_PTRS
 \

47 (
FLEX_ARRAY_BASE_BYTES_LEFT
 / (
Êex_¨øy_∑π
 *))

	)

50 
	#FLEX_ARRAY_ELEMENTS_PER_PART
(
size
) \

51 (
FLEX_ARRAY_PART_SIZE
 / 
size
)

	)

57 
	#DEFINE_FLEX_ARRAY
(
__¨øy«me
, 
__ñemít_size
, 
__tŸÆ
) \

58 
Êex_¨øy
 
__¨øy«me
 = { { { \

59 .
ñemít_size
 = (
__ñemít_size
), \

60 .
tŸÆ_ƒ_ñemíts
 = (
__tŸÆ
), \

62 
ölöe
 
__¨øy«me
##
	`_övÆid_∑ømëî
() \

64 
	`BUILD_BUG_ON
((
__tŸÆ
Ë> 
FLEX_ARRAY_NR_BASE_PTRS
 * \

65 
	`FLEX_ARRAY_ELEMENTS_PER_PART
(
__ñemít_size
)); \

66 }

	)

68 
Êex_¨øy
 *
Êex_¨øy_Æloc
(
ñemít_size
, 
tŸÆ
,

69 
gÂ_t
 
Êags
);

70 
Êex_¨øy_¥óŒoc
(
Êex_¨øy
 *
Á
, 
°¨t
,

71 
ƒ_ñemíts
, 
gÂ_t
 
Êags
);

72 
Êex_¨øy_‰ì
(
Êex_¨øy
 *
Á
);

73 
Êex_¨øy_‰ì_∑πs
(
Êex_¨øy
 *
Á
);

74 
Êex_¨øy_put
(
Êex_¨øy
 *
Á
, 
ñemít_ƒ
, *
§c
,

75 
gÂ_t
 
Êags
);

76 
Êex_¨øy_˛ór
(
Êex_¨øy
 *
Á
, 
ñemít_ƒ
);

77 *
Êex_¨øy_gë
(
Êex_¨øy
 *
Á
, 
ñemít_ƒ
);

78 
Êex_¨øy_shrök
(
Êex_¨øy
 *
Á
);

80 
	#Êex_¨øy_put_±r
(
Á
, 
ƒ
, 
§c
, 
gÂ
) \

81 
	`Êex_¨øy_put
(
Á
, 
ƒ
, (*)&(
§c
), 
gÂ
)

	)

83 *
Êex_¨øy_gë_±r
(
Êex_¨øy
 *
Á
, 
ñemít_ƒ
);

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/genetlink.h

1 #i‚de‡
__GENETLINK_WRAPPER_H


2 
	#__GENETLINK_WRAPPER_H
 1

	)

4 
	~<löux/vîsi⁄.h
>

5 #ö˛ude_√xà<
löux
/
gíëlök
.
h
>

7 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(3,3,0)

8 #ifde‡
CONFIG_PROVE_LOCKING


9 
ölöe
 
	$lockdï_gíl_is_hñd
()

12 
	}
}

16 #i‚de‡
gíl_dîe„ªn˚


17 
	~<löux/rcupd©e.h
>

19 
	#gíl_dîe„ªn˚
(
p
) \

20 
	`rcu_dîe„ªn˚_¥Ÿe˘ed
(
p
, 
	`lockdï_gíl_is_hñd
())

	)

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/icmp.h

1 #i‚de‡
__LINUX_ICMP_WRAPPER_H


2 
	#__LINUX_ICMP_WRAPPER_H
 1

	)

4 #ö˛ude_√xà<
löux
/
icmp
.
h
>

6 #i‚de‡
HAVE_SKBUFF_HEADER_HELPERS


7 
ölöe
 
icmphdr
 *
	$icmp_hdr
(c⁄° 
sk_buff
 *
skb
)

9  (
icmphdr
 *)
	`skb_å™•‹t_hódî
(
skb
);

10 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/icmpv6.h

1 #i‚de‡
__LINUX_ICMPV6_WRAPPER_H


2 
	#__LINUX_ICMPV6_WRAPPER_H
 1

	)

4 #ö˛ude_√xà<
löux
/
icmpv6
.
h
>

6 #i‚de‡
HAVE_ICMP6_HDR


7 
ölöe
 
icmp6hdr
 *
	$icmp6_hdr
(c⁄° 
sk_buff
 *
skb
)

9  (
icmp6hdr
 *)
	`skb_å™•‹t_hódî
(
skb
);

10 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/if.h

1 #i‚de‡
__LINUX_IF_WRAPPER_H


2 
	#__LINUX_IF_WRAPPER_H
 1

	)

4 #ö˛ude_√xà<
löux
/.
h
>

6 
	~<löux/vîsi⁄.h
>

7 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,31)

9 
	#IFF_XMIT_DST_RELEASE
 0

	)

13 #i‚de‡
IFF_TX_SKB_SHARING


14 
	#IFF_TX_SKB_SHARING
 0

	)

17 #i‚de‡
IFF_OVS_DATAPATH


18 
	#IFF_OVS_DATAPATH
 0

	)

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/if_arp.h

1 #i‚de‡
__LINUX_IF_ARP_WRAPPER_H


2 
	#__LINUX_IF_ARP_WRAPPER_H
 1

	)

4 #ö˛ude_√xà<
löux
/
if_¨p
.
h
>

6 #i‚de‡
HAVE_SKBUFF_HEADER_HELPERS


7 
	~<löux/skbuff.h
>

9 
ölöe
 
¨phdr
 *
	$¨p_hdr
(c⁄° 
sk_buff
 *
skb
)

11  (
¨phdr
 *)
	`skb_√tw‹k_hódî
(
skb
);

12 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/if_ether.h

1 #i‚de‡
__LINUX_IF_ETHER_WRAPPER_H


2 
	#__LINUX_IF_ETHER_WRAPPER_H
 1

	)

4 #ö˛ude_√xà<
löux
/
if_ëhî
.
h
>

6 
	~<löux/vîsi⁄.h
>

7 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,28)

9 
	#ETH_P_TEB
 0x6558

	)

13 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,30)

15 
	#ETH_P_FCOE
 0x8906

	)

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/if_vlan.h

1 #i‚de‡
__LINUX_IF_VLAN_WRAPPER_H


2 
	#__LINUX_IF_VLAN_WRAPPER_H
 1

	)

4 
	~<löux/skbuff.h
>

5 
	~<löux/vîsi⁄.h
>

6 #ö˛ude_√xà<
löux
/
if_vœn
.
h
>

22 
	#__vœn_put_èg
 
Ωl_vœn_put_èg


	)

23 
ölöe
 
sk_buff
 *
	$__vœn_put_èg
(
sk_buff
 *
skb
, 
u16
 
vœn_tci
)

25 
vœn_ëhhdr
 *
vëh
;

27 i‡(
	`skb_cow_hód
(
skb
, 
VLAN_HLEN
) < 0) {

28 
	`k‰ì_skb
(
skb
);

29  
NULL
;

31 
vëh
 = (
vœn_ëhhdr
 *)
	`skb_push
(
skb
, 
VLAN_HLEN
);

34 
	`memmove
(
skb
->
d©a
, skb->d©®+ 
VLAN_HLEN
, 2 * 
ETH_ALEN
);

35 
skb
->
mac_hódî
 -
VLAN_HLEN
;

38 
vëh
->
h_vœn_¥Ÿo
 = 
	`ht⁄s
(
ETH_P_8021Q
);

41 
vëh
->
h_vœn_TCI
 = 
	`ht⁄s
(
vœn_tci
);

43 
skb
->
¥Ÿocﬁ
 = 
	`ht⁄s
(
ETH_P_8021Q
);

45  
skb
;

46 
	}
}

51 #i‚de‡
VLAN_PRIO_MASK


52 
	#VLAN_PRIO_MASK
 0xe000

	)

53 
	#VLAN_PRIO_SHIFT
 13

	)

54 
	#VLAN_CFI_MASK
 0x1000

	)

55 
	#VLAN_TAG_PRESENT
 
VLAN_CFI_MASK


	)

58 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(3,3,0)

59 
ölöe
 
	$vœn_£t_íˇp_¥Ÿo
(
sk_buff
 *
skb
, 
vœn_hdr
 *
vhdr
)

61 
__be16
 
¥Ÿo
;

62 *
øwp
;

69 
¥Ÿo
 = 
vhdr
->
h_vœn_íˇpsuœãd_¥Ÿo
;

70 i‡(
	`¡ohs
(
¥Ÿo
) >= 1536) {

71 
skb
->
¥Ÿocﬁ
 = 
¥Ÿo
;

75 
øwp
 = 
skb
->
d©a
;

76 i‡(*(*Ë
øwp
 == 0xFFFF)

84 
skb
->
¥Ÿocﬁ
 = 
	`ht⁄s
(
ETH_P_802_3
);

89 
skb
->
¥Ÿocﬁ
 = 
	`ht⁄s
(
ETH_P_802_2
);

90 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/in.h

1 #i‚de‡
__LINUX_IN_WRAPPER_H


2 
	#__LINUX_IN_WRAPPER_H
 1

	)

4 #ö˛ude_√xà<
löux
/
ö
.
h
>

6 #i‚de‡
HAVE_IPV4_IS_MULTICAST


8 
ölöe
 
boﬁ
 
	$ùv4_is_lo›back
(
__be32
 
addr
)

10  (
addr
 & 
	`ht⁄l
(0xff000000)) == htonl(0x7f000000);

11 
	}
}

13 
ölöe
 
boﬁ
 
	$ùv4_is_mu…iˇ°
(
__be32
 
addr
)

15  (
addr
 & 
	`ht⁄l
(0xf0000000)) == htonl(0xe0000000);

16 
	}
}

18 
ölöe
 
boﬁ
 
	$ùv4_is_loˇl_mu…iˇ°
(
__be32
 
addr
)

20  (
addr
 & 
	`ht⁄l
(0xffffff00)) == htonl(0xe0000000);

21 
	}
}

23 
ölöe
 
boﬁ
 
	$ùv4_is_lbˇ°
(
__be32
 
addr
)

26  
addr
 =
	`ht⁄l
(
INADDR_BROADCAST
);

27 
	}
}

29 
ölöe
 
boﬁ
 
	$ùv4_is_zî⁄ë
(
__be32
 
addr
)

31  (
addr
 & 
	`ht⁄l
(0xff000000)) == htonl(0x00000000);

32 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/inetdevice.h

1 #i‚de‡
__LINUX_INETDEVICE_WRAPPER_H


2 
	#__LINUX_INETDEVICE_WRAPPER_H
 1

	)

4 #ö˛ude_√xà<
löux
/
öëdevi˚
.
h
>

6 
	~<löux/vîsi⁄.h
>

7 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,25)

9 
	#öëdev_by_ödex
(
√t
, 
ifödex
) \

10 
	`öëdev_by_ödex
((
ifödex
))

	)

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/ip.h

1 #i‚de‡
__LINUX_IP_WRAPPER_H


2 
	#__LINUX_IP_WRAPPER_H
 1

	)

4 #ö˛ude_√xà<
löux
/
ù
.
h
>

6 #i‚de‡
HAVE_SKBUFF_HEADER_HELPERS


7 
	~<löux/skbuff.h
>

8 
ölöe
 
ùhdr
 *
	$ù_hdr
(c⁄° 
sk_buff
 *
skb
)

10  (
ùhdr
 *)
	`skb_√tw‹k_hódî
(
skb
);

11 
	}
}

13 
ölöe
 
	$ù_hdæí
(c⁄° 
sk_buff
 *
skb
)

15  
	`ù_hdr
(
skb
)->
ihl
 * 4;

16 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/ipv6.h

1 #i‚de‡
__LINUX_IPV6_WRAPPER_H


2 
	#__LINUX_IPV6_WRAPPER_H
 1

	)

4 #ö˛ude_√xà<
löux
/
ùv6
.
h
>

6 #i‚de‡
HAVE_SKBUFF_HEADER_HELPERS


7 
ölöe
 
ùv6hdr
 *
	$ùv6_hdr
(c⁄° 
sk_buff
 *
skb
)

9  (
ùv6hdr
 *)
	`skb_√tw‹k_hódî
(
skb
);

10 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/jiffies.h

1 #i‚de‡
__LINUX_JIFFIES_WRAPPER_H


2 
	#__LINUX_JIFFIES_WRAPPER_H
 1

	)

4 #ö˛ude_√xà<
löux
/
jiffõs
.
h
>

6 
	~<löux/vîsi⁄.h
>

12 #i‚de‡
time_a·î64


13 
	#time_a·î64
(
a
, 
b
) \

14 (
	`ty≥check
(
__u64
, 
a
) && \

15 
	`ty≥check
(
__u64
, 
b
) && \

16 ((
__s64
)(
b
Ë- (__s64)(
a
Ë< 0))

	)

19 #i‚de‡
time_bef‹e64


20 
	#time_bef‹e64
(
a
, 
b
Ë
	`time_a·î64
(b,á)

	)

23 #i‚de‡
time_a·î_eq64


24 
	#time_a·î_eq64
(
a
, 
b
) \

25 (
	`ty≥check
(
__u64
, 
a
) && \

26 
	`ty≥check
(
__u64
, 
b
) && \

27 ((
__s64
)(
a
Ë- (__s64)(
b
Ë>0))

	)

30 #i‚de‡
time_bef‹e_eq64


31 
	#time_bef‹e_eq64
(
a
, 
b
Ë
	`time_a·î_eq64
(b,á)

	)

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/kernel.h

1 #i‚de‡
__KERNEL_H_WRAPPER


2 
	#__KERNEL_H_WRAPPER
 1

	)

4 #ö˛ude_√xà<
löux
/
kî√l
.
h
>

5 #i‚de‡
HAVE_LOG2_H


6 
	~<löux/log2.h
>

9 
	~<löux/vîsi⁄.h
>

10 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(3,4,0)

12 
	~<löux/bug.h
>

15 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,28)

16 #unde‡
¥_emîg


17 
	#¥_emîg
(
fmt
, ...) \

18 
	`¥ötk
(
KERN_EMERG
 
	`¥_fmt
(
fmt
), ##
__VA_ARGS__
)

	)

19 #unde‡
¥_Æît


20 
	#¥_Æît
(
fmt
, ...) \

21 
	`¥ötk
(
KERN_ALERT
 
	`¥_fmt
(
fmt
), ##
__VA_ARGS__
)

	)

22 #unde‡
¥_¸ô


23 
	#¥_¸ô
(
fmt
, ...) \

24 
	`¥ötk
(
KERN_CRIT
 
	`¥_fmt
(
fmt
), ##
__VA_ARGS__
)

	)

25 #unde‡
¥_îr


26 
	#¥_îr
(
fmt
, ...) \

27 
	`¥ötk
(
KERN_ERR
 
	`¥_fmt
(
fmt
), ##
__VA_ARGS__
)

	)

28 #unde‡
¥_w¨nög


29 
	#¥_w¨nög
(
fmt
, ...) \

30 
	`¥ötk
(
KERN_WARNING
 
	`¥_fmt
(
fmt
), ##
__VA_ARGS__
)

	)

31 #unde‡
¥_nŸi˚


32 
	#¥_nŸi˚
(
fmt
, ...) \

33 
	`¥ötk
(
KERN_NOTICE
 
	`¥_fmt
(
fmt
), ##
__VA_ARGS__
)

	)

34 #unde‡
¥_öfo


35 
	#¥_öfo
(
fmt
, ...) \

36 
	`¥ötk
(
KERN_INFO
 
	`¥_fmt
(
fmt
), ##
__VA_ARGS__
)

	)

37 #unde‡
¥_c⁄t


38 
	#¥_c⁄t
(
fmt
, ...) \

39 
	`¥ötk
(
KERN_CONT
 
fmt
, ##
__VA_ARGS__
)

	)

42 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,35)

43 
	#¥_w¨n
 
¥_w¨nög


	)

46 #i‡
deföed
(
CONFIG_PREEMPT
Ë&& 
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,21)

50 #i‚de‡
USHRT_MAX


51 
	#USHRT_MAX
 ((
u16
)(~0U))

	)

52 
	#SHRT_MAX
 ((
s16
)(
USHRT_MAX
>>1))

	)

53 
	#SHRT_MIN
 ((
s16
)(-
SHRT_MAX
 - 1))

	)

56 #i‚de‡
DIV_ROUND_UP


57 
	#DIV_ROUND_UP
(
n
, 
d
Ë((“Ë+ (dË- 1Ë/ (d))

	)

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/kobject.h

1 #i‚de‡
__LINUX_KOBJECT_WRAPPER_H


2 
	#__LINUX_KOBJECT_WRAPPER_H
 1

	)

4 #ö˛ude_√xà<
löux
/
kobje˘
.
h
>

6 
	~<löux/vîsi⁄.h
>

8 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,25)

9 
	#kobje˘_öô
(
kobj
, 
kty≥
Ë
	`Ωl_kobje˘_öô
(kobj, kty≥)

	)

10 
ölöe
 
	$Ωl_kobje˘_öô
(
kobje˘
 *
kobj
, 
kobj_ty≥
 *
kty≥
)

12 
kobj
->
kty≥
 = ktype;

13 (
kobje˘_öô
)(
kobj
);

14 
	}
}

16 
	#kobje˘_add
(
kobj
, 
∑ª¡
, 
«me
Ë
	`Ωl_kobje˘_add
(kobj,Ö¨ít,Çame)

	)

17 
ölöe
 
	$Ωl_kobje˘_add
(
kobje˘
 *
kobj
,

18 
kobje˘
 *
∑ª¡
,

19 c⁄° *
«me
)

21 
îr
 = 
	`kobje˘_£t_«me
(
kobj
, "%s", 
«me
);

22 i‡(
îr
)

23  
îr
;

24 
kobj
->
∑ª¡
 =Öarent;

25  (
kobje˘_add
)(
kobj
);

26 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/lockdep.h

9 #i‚de‡
__LINUX_LOCKDEP_WRAPPER_H


10 
	#__LINUX_LOCKDEP_WRAPPER_H


	)

12 #ö˛ude_√xà<
löux
/
lockdï
.
h
>

14 
	~<löux/vîsi⁄.h
>

15 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,18)

17 
	gèsk_°ru˘
;

18 
	glockdï_m≠
;

20 #ifde‡
CONFIG_LOCKDEP


22 
	~<löux/lökage.h
>

23 
	~<löux/li°.h
>

24 
	~<löux/debug_locks.h
>

25 
	~<löux/°ackåa˚.h
>

30 
	elock_ußge_bô
 {

31 
	mLOCK_USED
 = 0,

32 
	mLOCK_USED_IN_HARDIRQ
,

33 
	mLOCK_USED_IN_SOFTIRQ
,

34 
	mLOCK_ENABLED_SOFTIRQS
,

35 
	mLOCK_ENABLED_HARDIRQS
,

36 
	mLOCK_USED_IN_HARDIRQ_READ
,

37 
	mLOCK_USED_IN_SOFTIRQ_READ
,

38 
	mLOCK_ENABLED_SOFTIRQS_READ
,

39 
	mLOCK_ENABLED_HARDIRQS_READ
,

40 
	mLOCK_USAGE_STATES


46 
	#LOCKF_USED
 (1 << 
LOCK_USED
)

	)

47 
	#LOCKF_USED_IN_HARDIRQ
 (1 << 
LOCK_USED_IN_HARDIRQ
)

	)

48 
	#LOCKF_USED_IN_SOFTIRQ
 (1 << 
LOCK_USED_IN_SOFTIRQ
)

	)

49 
	#LOCKF_ENABLED_HARDIRQS
 (1 << 
LOCK_ENABLED_HARDIRQS
)

	)

50 
	#LOCKF_ENABLED_SOFTIRQS
 (1 << 
LOCK_ENABLED_SOFTIRQS
)

	)

52 
	#LOCKF_ENABLED_IRQS
 (
LOCKF_ENABLED_HARDIRQS
 | 
LOCKF_ENABLED_SOFTIRQS
)

	)

53 
	#LOCKF_USED_IN_IRQ
 (
LOCKF_USED_IN_HARDIRQ
 | 
LOCKF_USED_IN_SOFTIRQ
)

	)

55 
	#LOCKF_USED_IN_HARDIRQ_READ
 (1 << 
LOCK_USED_IN_HARDIRQ_READ
)

	)

56 
	#LOCKF_USED_IN_SOFTIRQ_READ
 (1 << 
LOCK_USED_IN_SOFTIRQ_READ
)

	)

57 
	#LOCKF_ENABLED_HARDIRQS_READ
 (1 << 
LOCK_ENABLED_HARDIRQS_READ
)

	)

58 
	#LOCKF_ENABLED_SOFTIRQS_READ
 (1 << 
LOCK_ENABLED_SOFTIRQS_READ
)

	)

60 
	#LOCKF_ENABLED_IRQS_READ
 \

61 (
LOCKF_ENABLED_HARDIRQS_READ
 | 
LOCKF_ENABLED_SOFTIRQS_READ
)

	)

62 
	#LOCKF_USED_IN_IRQ_READ
 \

63 (
LOCKF_USED_IN_HARDIRQ_READ
 | 
LOCKF_USED_IN_SOFTIRQ_READ
)

	)

65 
	#MAX_LOCKDEP_SUBCLASSES
 8UL

	)

72 
	slockdï_sub˛ass_key
 {

73 
	m__⁄e_byã
;

74 } 
__©åibuã__
 ((
__∑cked__
));

76 
	slock_˛ass_key
 {

77 
lockdï_sub˛ass_key
 
	msubkeys
[
MAX_LOCKDEP_SUBCLASSES
];

83 
	slock_˛ass
 {

87 
li°_hód
 
	mhash_íåy
;

92 
li°_hód
 
	mlock_íåy
;

94 
lockdï_sub˛ass_key
 *
	mkey
;

95 
	msub˛ass
;

100 
	mußge_mask
;

101 
°ack_åa˚
 
	mußge_åa˚s
[
LOCK_USAGE_STATES
];

108 
li°_hód
 
	mlocks_a·î
, 
	mlocks_bef‹e
;

114 
	mvîsi⁄
;

119 
	m›s
;

121 c⁄° *
	m«me
;

122 
	m«me_vîsi⁄
;

124 #ifde‡
CONFIG_LOCK_STAT


125 
	mc⁄ã¡i⁄_poöt
[4];

129 #ifde‡
CONFIG_LOCK_STAT


130 
	slock_time
 {

131 
s64
 
	mmö
;

132 
s64
 
	mmax
;

133 
s64
 
	mtŸÆ
;

134 
	mƒ
;

137 
	eboun˚_ty≥
 {

138 
	mboun˚_acquúed_wrôe
,

139 
	mboun˚_acquúed_ªad
,

140 
	mboun˚_c⁄ãnded_wrôe
,

141 
	mboun˚_c⁄ãnded_ªad
,

142 
	mƒ_boun˚_ty≥s
,

144 
	mboun˚_acquúed
 = 
boun˚_acquúed_wrôe
,

145 
	mboun˚_c⁄ãnded
 = 
boun˚_c⁄ãnded_wrôe
,

148 
	slock_˛ass_°©s
 {

149 
	mc⁄ã¡i⁄_poöt
[4];

150 
lock_time
 
	mªad_waôtime
;

151 
lock_time
 
	mwrôe_waôtime
;

152 
lock_time
 
	mªad_hﬁdtime
;

153 
lock_time
 
	mwrôe_hﬁdtime
;

154 
	mboun˚s
[
ƒ_boun˚_ty≥s
];

157 
lock_˛ass_°©s
 
lock_°©s
(
lock_˛ass
 *
˛ass
);

158 
˛ór_lock_°©s
(
lock_˛ass
 *
˛ass
);

165 
	slockdï_m≠
 {

166 
lock_˛ass_key
 *
	mkey
;

167 
lock_˛ass
 *
	m˛ass_ˇche
;

168 c⁄° *
	m«me
;

169 #ifde‡
CONFIG_LOCK_STAT


170 
	m˝u
;

178 
	slock_li°
 {

179 
li°_hód
 
	míåy
;

180 
lock_˛ass
 *
	m˛ass
;

181 
°ack_åa˚
 
	måa˚
;

182 
	mdi°™˚
;

188 
	slock_chaö
 {

189 
li°_hód
 
	míåy
;

190 
u64
 
	mchaö_key
;

193 
	shñd_lock
 {

208 
u64
 
	m¥ev_chaö_key
;

209 
lock_˛ass
 *
	m˛ass
;

210 
	macquúe_ù
;

211 
lockdï_m≠
 *
	mö°™˚
;

213 #ifde‡
CONFIG_LOCK_STAT


214 
u64
 
	mwaôtime_°amp
;

215 
u64
 
	mhﬁdtime_°amp
;

230 
	múq_c⁄ãxt
;

231 
	måylock
;

232 
	mªad
;

233 
	mcheck
;

234 
	mh¨dúqs_off
;

240 
lockdï_öô
();

241 
lockdï_öfo
();

242 
lockdï_ª£t
();

243 
lockdï_ª£t_lock
(
lockdï_m≠
 *
lock
);

244 
lockdï_‰ì_key_ønge
(*
°¨t
, 
size
);

246 
lockdï_off
();

247 
lockdï_⁄
();

255 
lockdï_öô_m≠
(
lockdï_m≠
 *
lock
, c⁄° *
«me
,

256 
lock_˛ass_key
 *
key
, 
sub˛ass
);

264 
	#lockdï_£t_˛ass
(
lock
, 
key
) \

265 
	`lockdï_öô_m≠
(&(
lock
)->
dï_m≠
, #key, 
key
, 0)

	)

266 
	#lockdï_£t_˛ass_™d_«me
(
lock
, 
key
, 
«me
) \

267 
	`lockdï_öô_m≠
(&(
lock
)->
dï_m≠
, 
«me
, 
key
, 0)

	)

268 
	#lockdï_£t_˛ass_™d_sub˛ass
(
lock
, 
key
, 
sub
) \

269 
	`lockdï_öô_m≠
(&(
lock
)->
dï_m≠
, #key, 
key
, 
sub
)

	)

270 
	#lockdï_£t_sub˛ass
(
lock
, 
sub
) \

271 
	`lockdï_öô_m≠
(&(
lock
)->
dï_m≠
, #lock, \

272 (
lock
)->
dï_m≠
.
key
, 
sub
)

	)

289 
lock_acquúe
(
lockdï_m≠
 *
lock
, 
sub˛ass
,

290 
åylock
, 
ªad
, 
check
, 
ù
);

292 
lock_ªÀa£
(
lockdï_m≠
 *
lock
, 
√°ed
,

293 
ù
);

295 
	#INIT_LOCKDEP
 .
lockdï_ªcursi⁄
 = 0,

	)

297 
	#lockdï_dïth
(
tsk
Ë(
debug_locks
 ? (tsk)->
lockdï_dïth
 : 0)

	)

301 
ölöe
 
	$lockdï_off
()

303 
	}
}

305 
ölöe
 
	$lockdï_⁄
()

307 
	}
}

309 
	#lock_acquúe
(
l
, 
s
, 
t
, 
r
, 
c
, 
i
Ëdÿ{ } 0)

	)

310 
	#lock_ªÀa£
(
l
, 
n
, 
i
Ëdÿ{ } 0)

	)

311 
	#lockdï_öô
(Ëdÿ{ } 0)

	)

312 
	#lockdï_öfo
(Ëdÿ{ } 0)

	)

313 
	#lockdï_öô_m≠
(
lock
, 
«me
, 
key
, 
sub
Ëdÿ{ ()(key); } 0)

	)

314 
	#lockdï_£t_˛ass
(
lock
, 
key
Ëdÿ{ ()(key); } 0)

	)

315 
	#lockdï_£t_˛ass_™d_«me
(
lock
, 
key
, 
«me
) \

316 dÿ{ ()(
key
); } 0)

	)

317 
	#lockdï_£t_˛ass_™d_sub˛ass
(
lock
, 
key
, 
sub
) \

318 dÿ{ ()(
key
); } 0)

	)

319 
	#lockdï_£t_sub˛ass
(
lock
, 
sub
Ëdÿ{ } 0)

	)

321 
	#INIT_LOCKDEP


	)

322 
	#lockdï_ª£t
(Ëdÿ{ 
debug_locks
 = 1; } 0)

	)

323 
	#lockdï_‰ì_key_ønge
(
°¨t
, 
size
Ëdÿ{ } 0)

	)

327 
	slock_˛ass_key
 { };

329 
	#lockdï_dïth
(
tsk
Ë(0)

	)

333 #ifde‡
CONFIG_LOCK_STAT


335 
lock_c⁄ãnded
(
lockdï_m≠
 *
lock
, 
ù
);

336 
lock_acquúed
(
lockdï_m≠
 *
lock
);

338 
	#LOCK_CONTENDED
(
_lock
, 
åy
, 
lock
) \

340 i‡(!
	`åy
(
_lock
)) { \

341 
	`lock_c⁄ãnded
(&(
_lock
)->
dï_m≠
, 
_RET_IP_
); \

342 
	`lock
(
_lock
); \

344 
	`lock_acquúed
(&(
_lock
)->
dï_m≠
); \

345 } 0)

	)

349 
	#lock_c⁄ãnded
(
lockdï_m≠
, 
ù
Ëdÿ{} 0)

	)

350 
	#lock_acquúed
(
lockdï_m≠
Ëdÿ{} 0)

	)

352 
	#LOCK_CONTENDED
(
_lock
, 
åy
, 
lock
) \

353 
	`lock
(
_lock
)

	)

357 #i‡
deföed
(
CONFIG_TRACE_IRQFLAGS
Ë&& deföed(
CONFIG_GENERIC_HARDIRQS
)

358 
óæy_öô_úq_lock_˛ass
();

360 
ölöe
 
	$óæy_öô_úq_lock_˛ass
()

362 
	}
}

365 #ifde‡
CONFIG_TRACE_IRQFLAGS


366 
óæy_boŸ_úqs_off
();

367 
óæy_boŸ_úqs_⁄
();

368 
¥öt_úqåa˚_evíts
(
èsk_°ru˘
 *
cuº
);

370 
ölöe
 
	$óæy_boŸ_úqs_off
()

372 
	}
}

373 
ölöe
 
	$óæy_boŸ_úqs_⁄
()

375 
	}
}

376 
ölöe
 
	$¥öt_úqåa˚_evíts
(
èsk_°ru˘
 *
cuº
)

378 
	}
}

386 
	#SINGLE_DEPTH_NESTING
 1

	)

393 #ifde‡
CONFIG_DEBUG_LOCK_ALLOC


394 #ifde‡
CONFIG_PROVE_LOCKING


395 
	#•ö_acquúe
(
l
, 
s
, 
t
, 
i
Ë
	`lock_acquúe
÷, s,Å, 0, 2, i)

	)

397 
	#•ö_acquúe
(
l
, 
s
, 
t
, 
i
Ë
	`lock_acquúe
÷, s,Å, 0, 1, i)

	)

399 
	#•ö_ªÀa£
(
l
, 
n
, 
i
Ë
	`lock_ªÀa£
÷,Ç, i)

	)

401 
	#•ö_acquúe
(
l
, 
s
, 
t
, 
i
Ëdÿ{ } 0)

	)

402 
	#•ö_ªÀa£
(
l
, 
n
, 
i
Ëdÿ{ } 0)

	)

405 #ifde‡
CONFIG_DEBUG_LOCK_ALLOC


406 #ifde‡
CONFIG_PROVE_LOCKING


407 
	#rwlock_acquúe
(
l
, 
s
, 
t
, 
i
Ë
	`lock_acquúe
÷, s,Å, 0, 2, i)

	)

408 
	#rwlock_acquúe_ªad
(
l
, 
s
, 
t
, 
i
Ë
	`lock_acquúe
÷, s,Å, 2, 2, i)

	)

410 
	#rwlock_acquúe
(
l
, 
s
, 
t
, 
i
Ë
	`lock_acquúe
÷, s,Å, 0, 1, i)

	)

411 
	#rwlock_acquúe_ªad
(
l
, 
s
, 
t
, 
i
Ë
	`lock_acquúe
÷, s,Å, 2, 1, i)

	)

413 
	#rwlock_ªÀa£
(
l
, 
n
, 
i
Ë
	`lock_ªÀa£
÷,Ç, i)

	)

415 
	#rwlock_acquúe
(
l
, 
s
, 
t
, 
i
Ëdÿ{ } 0)

	)

416 
	#rwlock_acquúe_ªad
(
l
, 
s
, 
t
, 
i
Ëdÿ{ } 0)

	)

417 
	#rwlock_ªÀa£
(
l
, 
n
, 
i
Ëdÿ{ } 0)

	)

420 #ifde‡
CONFIG_DEBUG_LOCK_ALLOC


421 #ifde‡
CONFIG_PROVE_LOCKING


422 
	#muãx_acquúe
(
l
, 
s
, 
t
, 
i
Ë
	`lock_acquúe
÷, s,Å, 0, 2, i)

	)

424 
	#muãx_acquúe
(
l
, 
s
, 
t
, 
i
Ë
	`lock_acquúe
÷, s,Å, 0, 1, i)

	)

426 
	#muãx_ªÀa£
(
l
, 
n
, 
i
Ë
	`lock_ªÀa£
÷,Ç, i)

	)

428 
	#muãx_acquúe
(
l
, 
s
, 
t
, 
i
Ëdÿ{ } 0)

	)

429 
	#muãx_ªÀa£
(
l
, 
n
, 
i
Ëdÿ{ } 0)

	)

432 #ifde‡
CONFIG_DEBUG_LOCK_ALLOC


433 #ifde‡
CONFIG_PROVE_LOCKING


434 
	#rw£m_acquúe
(
l
, 
s
, 
t
, 
i
Ë
	`lock_acquúe
÷, s,Å, 0, 2, i)

	)

435 
	#rw£m_acquúe_ªad
(
l
, 
s
, 
t
, 
i
Ë
	`lock_acquúe
÷, s,Å, 1, 2, i)

	)

437 
	#rw£m_acquúe
(
l
, 
s
, 
t
, 
i
Ë
	`lock_acquúe
÷, s,Å, 0, 1, i)

	)

438 
	#rw£m_acquúe_ªad
(
l
, 
s
, 
t
, 
i
Ë
	`lock_acquúe
÷, s,Å, 1, 1, i)

	)

440 
	#rw£m_ªÀa£
(
l
, 
n
, 
i
Ë
	`lock_ªÀa£
÷,Ç, i)

	)

442 
	#rw£m_acquúe
(
l
, 
s
, 
t
, 
i
Ëdÿ{ } 0)

	)

443 
	#rw£m_acquúe_ªad
(
l
, 
s
, 
t
, 
i
Ëdÿ{ } 0)

	)

444 
	#rw£m_ªÀa£
(
l
, 
n
, 
i
Ëdÿ{ } 0)

	)

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/log2.h

1 #i‚de‡
__LINUX_LOG2_WRAPPER


2 
	#__LINUX_LOG2_WRAPPER


	)

4 #ifde‡
HAVE_LOG2_H


5 #ö˛ude_√xà<
löux
/
log2
.
h
>

9 
__©åibuã__
((c⁄°, 
n‹ëu∫
))

10 
____ûog2_NaN
();

12 
	#ûog2
(
n
) ((n) == 4 ? 2 : \

13 (
n
) == 8 ? 3 : \

14 
	`____ûog2_NaN
())

	)

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/mutex.h

1 #i‚de‡
__LINUX_MUTEX_WRAPPER_H


2 
	#__LINUX_MUTEX_WRAPPER_H


	)

5 
	~<löux/vîsi⁄.h
>

6 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,16)

8 
	~<löux/£m≠h‹e.h
>

10 
	smuãx
 {

11 
£m≠h‹e
 
	m£ma
;

14 
	#muãx_öô
(
muãx
Ë
	`öô_MUTEX
(&(muãx)->
£ma
)

	)

15 
	#muãx_de°roy
(
muãx
Ëdÿ{ } 0)

	)

17 
	#__MUTEX_INITIALIZER
(
«me
) \

18 
	`__SEMAPHORE_INITIALIZER
(
«me
, 1)

	)

20 
	#DEFINE_MUTEX
(
muãx«me
) \

21 
muãx
 
muãx«me
 = { 
	`__MUTEX_INITIALIZER
(muãx«me.
£ma
Ë}

	)

27 
ölöe
 
	$muãx_lock
(
muãx
 *
lock
)

29 
	`down
(&
lock
->
£ma
);

30 
	}
}

32 
ölöe
 
	$muãx_lock_öãºu±ibÀ
(
muãx
 *
lock
)

34  
	`down_öãºu±ibÀ
(&
lock
->
£ma
);

35 
	}
}

37 
	#muãx_lock_√°ed
(
lock
, 
sub˛ass
Ë
	`muãx_lock
÷ock)

	)

38 
	#muãx_lock_öãºu±ibÀ_√°ed
(
lock
, 
sub˛ass
Ë
	`muãx_lock_öãºu±ibÀ
÷ock)

	)

44 
ölöe
 
	$muãx_åylock
(
muãx
 *
lock
)

46  !
	`down_åylock
(&
lock
->
£ma
);

47 
	}
}

49 
ölöe
 
	$muãx_u∆ock
(
muãx
 *
lock
)

51 
	`up
(&
lock
->
£ma
);

52 
	}
}

55 #ö˛ude_√xà<
löux
/
muãx
.
h
>

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/net.h

1 #i‚de‡
__LINUX_NET_WRAPPER_H


2 
	#__LINUX_NET_WRAPPER_H
 1

	)

4 #ö˛ude_√xà<
löux
/
√t
.
h
>

6 #i‚de‡
√t_øãlimôed_fun˘i⁄


7 
	#√t_øãlimôed_fun˘i⁄
(
fun˘i⁄
, ...) \

9 i‡(
	`√t_øãlimô
()) \

10 
	`fun˘i⁄
(
__VA_ARGS__
); \

11 } 0)

	)

13 
	#√t_emîg_øãlimôed
(
fmt
, ...) \

14 
	`√t_øãlimôed_fun˘i⁄
(
¥_emîg
, 
fmt
, ##
__VA_ARGS__
)

	)

15 
	#√t_Æît_øãlimôed
(
fmt
, ...) \

16 
	`√t_øãlimôed_fun˘i⁄
(
¥_Æît
, 
fmt
, ##
__VA_ARGS__
)

	)

17 
	#√t_¸ô_øãlimôed
(
fmt
, ...) \

18 
	`√t_øãlimôed_fun˘i⁄
(
¥_¸ô
, 
fmt
, ##
__VA_ARGS__
)

	)

19 
	#√t_îr_øãlimôed
(
fmt
, ...) \

20 
	`√t_øãlimôed_fun˘i⁄
(
¥_îr
, 
fmt
, ##
__VA_ARGS__
)

	)

21 
	#√t_nŸi˚_øãlimôed
(
fmt
, ...) \

22 
	`√t_øãlimôed_fun˘i⁄
(
¥_nŸi˚
, 
fmt
, ##
__VA_ARGS__
)

	)

23 
	#√t_w¨n_øãlimôed
(
fmt
, ...) \

24 
	`√t_øãlimôed_fun˘i⁄
(
¥_w¨n
, 
fmt
, ##
__VA_ARGS__
)

	)

25 
	#√t_öfo_øãlimôed
(
fmt
, ...) \

26 
	`√t_øãlimôed_fun˘i⁄
(
¥_öfo
, 
fmt
, ##
__VA_ARGS__
)

	)

27 
	#√t_dbg_øãlimôed
(
fmt
, ...) \

28 
	`√t_øãlimôed_fun˘i⁄
(
¥_debug
, 
fmt
, ##
__VA_ARGS__
)

	)

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/netdevice.h

1 #i‚de‡
__LINUX_NETDEVICE_WRAPPER_H


2 
	#__LINUX_NETDEVICE_WRAPPER_H
 1

	)

4 #ö˛ude_√xà<
löux
/
√tdevi˚
.
h
>

6 
	g√t
;

8 
	~<löux/vîsi⁄.h
>

13 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,21)

14 
	#NETDEV_DEV_MEMBER
 
˛ass_dev


	)

16 
	#NETDEV_DEV_MEMBER
 
dev


	)

19 #i‚de‡
to_√t_dev


20 
	#to_√t_dev
(
˛ass
Ë
	`c⁄èöî_of
(˛ass, 
√t_devi˚
, 
NETDEV_DEV_MEMBER
)

	)

23 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,26)

24 
ölöe


25 
√t
 *
	$dev_√t
(c⁄° 
√t_devi˚
 *
dev
)

27 #ifde‡
CONFIG_NET_NS


28  
dev
->
nd_√t
;

29 #ñi‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,25)

30  &
öô_√t
;

32  
NULL
;

34 
	}
}

36 
ölöe


37 
	$dev_√t_£t
(
√t_devi˚
 *
dev
, c⁄° 
√t
 *net)

39 #ifde‡
CONFIG_NET_NS


40 
dev
->
nd_dev
 = 
√t
;

42 
	}
}

45 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,24)

46 
	#NETIF_F_NETNS_LOCAL
 0

	)

49 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,24)

50 
	#¥oc_√t
 
öô_√t
.
¥oc_√t


	)

53 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,32)

54 
	t√tdev_tx_t
;

57 #i‚de‡
f‹_óch_√tdev


59 
	#f‹_óch_√tdev
(
√t
, 
d
Ëd = 
dev_ba£
; d; d = d->
√xt
)

	)

60 #ñi‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,24)

62 #unde‡
f‹_óch_√tdev


63 
	#f‹_óch_√tdev
(
√t
, 
d
Ë
	`li°_f‹_óch_íåy
(d, &
dev_ba£_hód
, 
dev_li°
)

	)

66 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,20)

67 
	#√t_xmô_evÆ
(
e
Ë(”Ë=
NET_XMIT_CN
 ? 0 : (e))

	)

70 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,33)

71 
uƒegi°î_√tdevi˚_queue
(
√t_devi˚
 *
dev
,

72 
li°_hód
 *
hód
);

73 
uƒegi°î_√tdevi˚_m™y
(
li°_hód
 *
hód
);

76 #i‚de‡
HAVE_DEV_DISABLE_LRO


77 
dev_dißbÀ_Ão
(
√t_devi˚
 *
dev
);

80 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,19)

81 
	#skb_checksum_hñp
(
skb
Ë
	`skb_checksum_hñp
((skb), 0)

	)

84 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,36)

85 
ölöe
 
	$√tdev_rx_h™dÀr_ªgi°î
(
√t_devi˚
 *
dev
,

86 *
rx_h™dÀr
,

87 *
rx_h™dÀr_d©a
)

89 i‡(
dev
->
br_p‹t
)

90  -
EBUSY
;

91 
	`rcu_assign_poöãr
(
dev
->
br_p‹t
, 
rx_h™dÀr_d©a
);

93 
	}
}

94 
ölöe
 
	$√tdev_rx_h™dÀr_uƒegi°î
(
√t_devi˚
 *
dev
)

96 
	`rcu_assign_poöãr
(
dev
->
br_p‹t
, 
NULL
);

97 
	}
}

100 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,19)

101 #unde‡
SET_ETHTOOL_OPS


102 
	#SET_ETHTOOL_OPS
(
√tdev
, 
›s
) \

103 ((
√tdev
)->
ëhtoﬁ_›s
 = (ëhtoﬁ_›†*)(
›s
))

	)

106 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,24)

107 
	#dev_gë_by_«me
(
√t
, 
«me
Ë
	`dev_gë_by_«me
“ame)

	)

108 
	#dev_gë_by_ödex
(
√t
, 
ifödex
Ë
	`dev_gë_by_ödex
(ifödex)

	)

109 
	#__dev_gë_by_«me
(
√t
, 
«me
Ë
	`__dev_gë_by_«me
“ame)

	)

110 
	#__dev_gë_by_ödex
(
√t
, 
ifödex
Ë
	`__dev_gë_by_ödex
(ifödex)

	)

111 
	#dev_gë_by_ödex_rcu
(
√t
, 
ifödex
Ë
	`dev_gë_by_ödex_rcu
(ifödex)

	)

114 #i‚de‡
HAVE_DEV_GET_BY_INDEX_RCU


115 
ölöe
 
√t_devi˚
 *
	$dev_gë_by_ödex_rcu
(
√t
 *√t, 
ifödex
)

117 
√t_devi˚
 *
dev
;

119 
	`ªad_lock
(&
dev_ba£_lock
);

120 
dev
 = 
	`__dev_gë_by_ödex
(
√t
, 
ifödex
);

121 
	`ªad_u∆ock
(&
dev_ba£_lock
);

123  
dev
;

124 
	}
}

127 #i‚de‡
NETIF_F_FSO


128 
	#NETIF_F_FSO
 0

	)

131 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,30)

132 
	#NETIF_F_FCOE_CRC
 (1 << 24Ë

	)

135 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,23)

136 
	#NETIF_F_IPV6_CSUM
 16

	)

138 
	#NETIF_F_V4_CSUM
 (
NETIF_F_GEN_CSUM
 | 
NETIF_F_IP_CSUM
)

	)

139 
	#NETIF_F_V6_CSUM
 (
NETIF_F_GEN_CSUM
 | 
NETIF_F_IPV6_CSUM
)

	)

142 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,38)

143 
	#skb_gso_£gmít
 
Ωl_skb_gso_£gmít


	)

144 
sk_buff
 *
Ωl_skb_gso_£gmít
(sk_buf‡*
skb
, 
u32
 
„©uªs
);

146 
	#√tif_skb_„©uªs
 
Ωl_√tif_skb_„©uªs


	)

147 
u32
 
Ωl_√tif_skb_„©uªs
(
sk_buff
 *
skb
);

149 
	#√tif_√eds_gso
 
Ωl_√tif_√eds_gso


	)

150 
ölöe
 
	$Ωl_√tif_√eds_gso
(
sk_buff
 *
skb
, 
„©uªs
)

152  
	`skb_is_gso
(
skb
Ë&& (!
	`skb_gso_ok
(skb, 
„©uªs
) ||

153 
	`u∆ikñy
(
skb
->
ù_summed
 !
CHECKSUM_PARTIAL
));

154 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/netfilter_bridge.h

1 #i‚de‡
__LINUX_NETFILTER_BRIDGE_WRAPPER_H


2 
	#__LINUX_NETFILTER_BRIDGE_WRAPPER_H


	)

4 #ö˛ude_√xà<
löux
/
√tfûãr_bridge
.
h
>

6 
	~<löux/vîsi⁄.h
>

7 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,22)

9 
	~<löux/if_vœn.h
>

10 
	~<löux/if_µpox.h
>

12 
ölöe
 
	$nf_bridge_íˇp_hódî_Àn
(c⁄° 
sk_buff
 *
skb
)

14 
skb
->
¥Ÿocﬁ
) {

15 
	`__c⁄°™t_ht⁄s
(
ETH_P_8021Q
):

16  
VLAN_HLEN
;

20 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/netfilter_ipv4.h

1 #i‚de‡
__LINUX_NETFILTER_IPV4_WRAPPER_H


2 
	#__LINUX_NETFILTER_IPV4_WRAPPER_H
 1

	)

4 #ö˛ude_√xà<
löux
/
√tfûãr_ùv4
.
h
>

6 
	~<löux/vîsi⁄.h
>

7 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,25)

9 #ifde‡
__KERNEL__


11 
	#NF_INET_PRE_ROUTING
 
NF_IP_PRE_ROUTING


	)

12 
	#NF_INET_POST_ROUTING
 
NF_IP_POST_ROUTING


	)

13 
	#NF_INET_FORWARD
 
NF_IP_FORWARD


	)

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/netlink.h

1 #i‚de‡
__LINUX_NETLINK_WRAPPER_H


2 
	#__LINUX_NETLINK_WRAPPER_H
 1

	)

4 
	~<löux/skbuff.h
>

5 #ö˛ude_√xà<
löux
/
√éök
.
h
>

7 #i‚de‡
NLA_TYPE_MASK


8 
	#NLA_F_NESTED
 (1 << 15)

	)

9 
	#NLA_F_NET_BYTEORDER
 (1 << 14)

	)

10 
	#NLA_TYPE_MASK
 (~(
NLA_F_NESTED
 | 
NLA_F_NET_BYTEORDER
))

	)

13 
	~<√t/√éök.h
>

14 
	~<löux/vîsi⁄.h
>

16 #i‚de‡
NLMSG_DEFAULT_SIZE


17 
	#NLMSG_DEFAULT_SIZE
 (
NLMSG_GOODSIZE
 - 
NLMSG_HDRLEN
)

	)

20 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,19)

21 
	#∆msg_√w
(
s
, 
f
Ë
	`∆msg_√w_¥›î
((s), (f))

	)

22 
ölöe
 
sk_buff
 *
	$∆msg_√w_¥›î
(
size
, 
gÂ_t
 
Êags
)

24  
	`Æloc_skb
(
size
, 
Êags
);

25 
	}
}

28 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,22)

29 
ölöe
 
∆msghdr
 *
	$∆msg_hdr
(c⁄° 
sk_buff
 *
skb
)

31  (
∆msghdr
 *)
skb
->
d©a
;

32 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/poison.h

1 #i‚de‡
__LINUX_POISON_WRAPPER_H


2 
	#__LINUX_POISON_WRAPPER_H
 1

	)

4 #ö˛ude_√xà<
löux
/
pois⁄
.
h
>

6 #i‚de‡
FLEX_ARRAY_FREE


8 
	#FLEX_ARRAY_FREE
 0x6¯

	)

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/rculist.h

1 #i‚de‡
__LINUX_RCULIST_WRAPPER_H


2 
	#__LINUX_RCULIST_WRAPPER_H


	)

4 
	~<löux/vîsi⁄.h
>

5 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,26)

6 #ö˛ude_√xà<
löux
/
rculi°
.
h
>

9 
	~<löux/li°.h
>

12 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,27)

13 
	#hli°_dñ_öô_rcu
 
Ωl_hli°_dñ_öô_rcu


	)

14 
ölöe
 
	$hli°_dñ_öô_rcu
(
hli°_node
 *
n
)

16 i‡(!
	`hli°_unhashed
(
n
)) {

17 
	`__hli°_dñ
(
n
);

18 
n
->
µªv
 = 
NULL
;

20 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/rcupdate.h

1 #i‚de‡
__RCUPDATE_WRAPPER_H


2 
	#__RCUPDATE_WRAPPER_H
 1

	)

4 #ö˛ude_√xà<
löux
/
rcupd©e
.
h
>

6 #i‚de‡
rcu_dîe„ªn˚_check


7 
	#rcu_dîe„ªn˚_check
(
p
, 
c
Ë
	`rcu_dîe„ªn˚
’)

	)

10 #i‚de‡
rcu_dîe„ªn˚_¥Ÿe˘ed


11 
	#rcu_dîe„ªn˚_¥Ÿe˘ed
(
p
, 
c
Ë’)

	)

14 #i‚de‡
HAVE_RCU_READ_LOCK_HELD


15 
ölöe
 
	$rcu_ªad_lock_hñd
()

18 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/reciprocal_div.h

1 #i‚de‡
__LINUX_RECIPROCAL_DIV_WRAPPER_H


2 
	#__LINUX_RECIPROCAL_DIV_WRAPPER_H


	)

4 
	~<löux/vîsi⁄.h
>

6 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,20)

7 #ö˛ude_√xà<
löux
/
ªcùroˇl_div
.
h
>

10 
	~<löux/ty≥s.h
>

31 
u32
 
ªcùroˇl_vÆue
(u32 
B
);

34 
ölöe
 
u32
 
	$ªcùroˇl_divide
(
u32
 
A
, u32 
R
)

36  (
u32
)(((
u64
)
A
 * 
R
) >> 32);

37 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/rtnetlink.h

1 #i‚de‡
__RTNETLINK_WRAPPER_H


2 
	#__RTNETLINK_WRAPPER_H
 1

	)

4 #ö˛ude_√xà<
löux
/
π√éök
.
h
>

6 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,25)

8 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,19)

9 
ölöe
 
	$π∆_nŸify
(
sk_buff
 *
skb
, 
u32
 
p‹tid
, u32 
group
,

10 
∆msghdr
 *
∆h
, 
gÂ_t
 
Êags
)

12 
	`BUG_ON
(
∆h
 !
NULL
);

13 i‡(
group
) {

15 
	`∆msg_mu…iˇ°
(
π∆
, 
skb
, 0, 
group
, 
Êags
);

17 
	}
}

19 
ölöe
 
	$π∆_£t_sk_îr
(
u32
 
group
, 
îr‹
)

21 
	`√éök_£t_îr
(
π∆
, 0, 
group
, 
îr‹
);

22 
	}
}

26 
	#π∆_nŸify
(
skb
, 
√t
, 
p‹tid
, 
group
, 
∆h
, 
Êags
) \

27 ((Ë
	`π∆_nŸify
(
skb
, 
p‹tid
, 
group
, 
∆h
, 
Êags
))

	)

28 
	#π∆_£t_sk_îr
(
√t
, 
group
, 
îr‹
) \

29 (
	`π∆_£t_sk_îr
(
group
, 
îr‹
))

	)

30 #ñi‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,30)

32 
	#π∆_nŸify
(
skb
, 
√t
, 
p‹tid
, 
group
, 
∆h
, 
Êags
) \

33 ((Ë
	`π∆_nŸify
(
skb
, 
√t
, 
p‹tid
, 
group
, 
∆h
, 
Êags
))

	)

36 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,26)

37 
ölöe
 
	$π∆_is_locked
()

39 i‡(
	`u∆ikñy
(
	`π∆_åylock
())) {

40 
	`π∆_u∆ock
();

45 
	}
}

49 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,34)

50 #ifde‡
CONFIG_PROVE_LOCKING


51 
ölöe
 
	$lockdï_π∆_is_hñd
()

54 
	}
}

58 #i‚de‡
rcu_dîe„ªn˚_π∆


66 
	#rcu_dîe„ªn˚_π∆
(
p
) \

67 
	`rcu_dîe„ªn˚_check
(
p
, 
	`rcu_ªad_lock_hñd
() || \

68 
	`lockdï_π∆_is_hñd
())

	)

71 #i‚de‡
π∆_dîe„ªn˚


80 
	#π∆_dîe„ªn˚
(
p
) \

81 
	`rcu_dîe„ªn˚_¥Ÿe˘ed
(
p
, 
	`lockdï_π∆_is_hñd
())

	)

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/skbuff.h

1 #i‚de‡
__LINUX_SKBUFF_WRAPPER_H


2 
	#__LINUX_SKBUFF_WRAPPER_H
 1

	)

4 #ö˛ude_√xà<
löux
/
skbuff
.
h
>

6 
	~<löux/vîsi⁄.h
>

8 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,24)

12 
	#skb_hódroom
 
Ωl_skb_hódroom


	)

13 
ölöe
 
	$Ωl_skb_hódroom
(c⁄° 
sk_buff
 *
skb
)

15  
skb
->
d©a
 - skb->
hód
;

16 
	}
}

19 #i‚de‡
HAVE_SKB_COPY_FROM_LINEAR_DATA_OFFSET


20 
ölöe
 
	$skb_c›y_‰om_löór_d©a_off£t
(c⁄° 
sk_buff
 *
skb
,

21 c⁄° 
off£t
, *
to
,

22 c⁄° 
Àn
)

24 
	`mem˝y
(
to
, 
skb
->
d©a
 + 
off£t
, 
Àn
);

25 
	}
}

27 
ölöe
 
	$skb_c›y_to_löór_d©a_off£t
(
sk_buff
 *
skb
,

28 c⁄° 
off£t
,

29 c⁄° *
‰om
,

30 c⁄° 
Àn
)

32 
	`mem˝y
(
skb
->
d©a
 + 
off£t
, 
‰om
, 
Àn
);

33 
	}
}

37 #i‚de‡
HAVE_SKB_RESET_TAIL_POINTER


38 
ölöe
 
	$skb_ª£t_èû_poöãr
(
sk_buff
 *
skb
)

40 
skb
->
èû
 = skb->
d©a
;

41 
	}
}

58 #i‚de‡
NET_SKB_PAD


59 
	#NET_SKB_PAD
 16

	)

62 #i‚de‡
HAVE_SKB_COW_HEAD


63 
ölöe
 
	$__skb_cow
(
sk_buff
 *
skb
, 
hódroom
,

64 
˛⁄ed
)

66 
dñè
 = 0;

68 i‡(
hódroom
 < 
NET_SKB_PAD
)

69 
hódroom
 = 
NET_SKB_PAD
;

70 i‡(
hódroom
 > 
	`skb_hódroom
(
skb
))

71 
dñè
 = 
hódroom
 - 
	`skb_hódroom
(
skb
);

73 i‡(
dñè
 || 
˛⁄ed
)

74  
	`pskb_ex∑nd_hód
(
skb
, 
	`ALIGN
(
dñè
, 
NET_SKB_PAD
), 0,

75 
GFP_ATOMIC
);

77 
	}
}

79 
ölöe
 
	$skb_cow_hód
(
sk_buff
 *
skb
, 
hódroom
)

81  
	`__skb_cow
(
skb
, 
hódroom
, 
	`skb_hódî_˛⁄ed
(skb));

82 
	}
}

85 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,23)

86 
ölöe
 
	$skb_˛⁄e_wrôabÀ
(
sk_buff
 *
skb
, 
Àn
)

88  
Ál£
;

89 
	}
}

92 #i‚de‡
HAVE_SKB_DST_ACCESSOR_FUNCS


93 
ölöe
 
d°_íåy
 *
	$skb_d°
(c⁄° 
sk_buff
 *
skb
)

95  (
d°_íåy
 *)
skb
->
d°
;

96 
	}
}

98 
ölöe
 
	$skb_d°_£t
(
sk_buff
 *
skb
, 
d°_íåy
 *
d°
)

100 
skb
->
d°
 = dst;

101 
	}
}

103 
ölöe
 
πabÀ
 *
	$skb_πabÀ
(c⁄° 
sk_buff
 *
skb
)

105  (
πabÀ
 *)
skb
->
d°
;

106 
	}
}

109 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,17)

112 
	#k‰ì_skb
(
skb
Ë
	`k‰ì_skb_maybe_nuŒ
(skb)

	)

113 
ölöe
 
	$k‰ì_skb_maybe_nuŒ
(
sk_buff
 *
skb
)

115 i‡(
	`likñy
(
skb
 !
NULL
))

116 (
k‰ì_skb
)(
skb
);

117 
	}
}

121 #i‚de‡
CHECKSUM_PARTIAL


122 
	#CHECKSUM_PARTIAL
 
CHECKSUM_HW


	)

124 #i‚de‡
CHECKSUM_COMPLETE


125 
	#CHECKSUM_COMPLETE
 
CHECKSUM_HW


	)

128 #ifde‡
HAVE_MAC_RAW


129 
	#mac_hódî
 
mac
.
øw


	)

130 
	#√tw‹k_hódî
 
nh
.
øw


	)

131 
	#å™•‹t_hódî
 
h
.
øw


	)

134 #i‚de‡
HAVE_SKBUFF_HEADER_HELPERS


135 
ölöe
 *
	$skb_å™•‹t_hódî
(c⁄° 
sk_buff
 *
skb
)

137  
skb
->
h
.
øw
;

138 
	}
}

140 
ölöe
 
	$skb_ª£t_å™•‹t_hódî
(
sk_buff
 *
skb
)

142 
skb
->
h
.
øw
 = skb->
d©a
;

143 
	}
}

145 
ölöe
 
	$skb_£t_å™•‹t_hódî
(
sk_buff
 *
skb
,

146 c⁄° 
off£t
)

148 
skb
->
h
.
øw
 = skb->
d©a
 + 
off£t
;

149 
	}
}

151 
ölöe
 *
	$skb_√tw‹k_hódî
(c⁄° 
sk_buff
 *
skb
)

153  
skb
->
nh
.
øw
;

154 
	}
}

156 
ölöe
 
	$skb_ª£t_√tw‹k_hódî
(
sk_buff
 *
skb
)

158 
skb
->
nh
.
øw
 = skb->
d©a
;

159 
	}
}

161 
ölöe
 
	$skb_£t_√tw‹k_hódî
(
sk_buff
 *
skb
, c⁄° 
off£t
)

163 
skb
->
nh
.
øw
 = skb->
d©a
 + 
off£t
;

164 
	}
}

166 
ölöe
 *
	$skb_mac_hódî
(c⁄° 
sk_buff
 *
skb
)

168  
skb
->
mac
.
øw
;

169 
	}
}

171 
ölöe
 
	$skb_ª£t_mac_hódî
(
sk_buff
 *
skb
)

173 
skb
->
mac_hódî
 = skb->
d©a
;

174 
	}
}

176 
ölöe
 
	$skb_£t_mac_hódî
(
sk_buff
 *
skb
, c⁄° 
off£t
)

178 
skb
->
mac
.
øw
 = skb->
d©a
 + 
off£t
;

179 
	}
}

181 
ölöe
 
	$skb_å™•‹t_off£t
(c⁄° 
sk_buff
 *
skb
)

183  
	`skb_å™•‹t_hódî
(
skb
Ë- skb->
d©a
;

184 
	}
}

186 
ölöe
 
	$skb_√tw‹k_off£t
(c⁄° 
sk_buff
 *
skb
)

188  
	`skb_√tw‹k_hódî
(
skb
Ë- skb->
d©a
;

189 
	}
}

191 
ölöe
 
	$skb_c›y_to_löór_d©a
(
sk_buff
 *
skb
,

192 c⁄° *
‰om
,

193 c⁄° 
Àn
)

195 
	`mem˝y
(
skb
->
d©a
, 
‰om
, 
Àn
);

196 
	}
}

199 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,18)

202 
ölöe
 
	$skb_is_gso
(c⁄° 
sk_buff
 *
skb
)

205 
	}
}

207 
ölöe
 
sk_buff
 *
	$skb_gso_£gmít
(
sk_buff
 *
skb
,

208 
„©uªs
)

210  
NULL
;

211 
	}
}

214 #i‚de‡
HAVE_SKB_WARN_LRO


215 #i‚de‡
NETIF_F_LRO


216 
ölöe
 
boﬁ
 
	$skb_w¨n_if_Ão
(c⁄° 
sk_buff
 *
skb
)

218  
Ál£
;

219 
	}
}

221 
__skb_w¨n_Ão_f‹w¨dög
(c⁄° 
sk_buff
 *
skb
);

223 
ölöe
 
boﬁ
 
	$skb_w¨n_if_Ão
(c⁄° 
sk_buff
 *
skb
)

227 
skb_sh¨ed_öfo
 *
shöfo
 = 
	`skb_shöfo
(
skb
);

228 i‡(
shöfo
->
gso_size
 !0 && 
	`u∆ikñy
(shöfo->
gso_ty≥
 == 0)) {

229 
	`__skb_w¨n_Ão_f‹w¨dög
(
skb
);

230  
åue
;

232  
Ál£
;

233 
	}
}

237 #i‚de‡
HAVE_CONSUME_SKB


238 
	#c⁄sume_skb
 
k‰ì_skb


	)

241 #i‚de‡
HAVE_SKB_FRAG_PAGE


242 
ölöe
 
∑ge
 *
	$skb_‰ag_∑ge
(c⁄° 
skb_‰ag_t
 *
‰ag
)

244  
‰ag
->
∑ge
;

245 
	}
}

248 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,40)

249 
ölöe
 
	$skb_ª£t_mac_Àn
(
sk_buff
 *
skb
)

251 
skb
->
mac_Àn
 = skb->
√tw‹k_hódî
 - skb->
mac_hódî
;

252 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/slab.h

1 #i‚de‡
__LINUX_SLAB_WRAPPER_H


2 
	#__LINUX_SLAB_WRAPPER_H
 1

	)

4 #ö˛ude_√xà<
löux
/
¶ab
.
h
>

6 #i‚de‡
HAVE_KMEMDUP


7 *
kmemdup
(c⁄° *
§c
, 
size_t
 
Àn
, 
gÂ_t
 
gÂ
);

10 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,23)

11 
	#kmem_ˇche_¸óã
(
n
, 
s
, 
a
, 
f
, 
c
Ë
	`kmem_ˇche_¸óã
“, s,á, f, c, 
NULL
)

	)

14 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,23)

15 
ölöe
 *
	$Ωl_kzÆloc
(
size_t
 
size
, 
gÂ_t
 
Êags
)

17  
	`kzÆloc
(
size
, 
Êags
 & ~
__GFP_ZERO
);

18 
	}
}

19 
	#kzÆloc
 
Ωl_kzÆloc


	)

21 
ölöe
 *
	$Ωl_kmÆloc
(
size_t
 
size
, 
gÂ_t
 
Êags
)

23 i‡(
Êags
 & 
__GFP_ZERO
)

24  
	`kzÆloc
(
size
, 
Êags
);

26  
	`kmÆloc
(
size
, 
Êags
);

27 
	}
}

28 
	#kmÆloc
 
Ωl_kmÆloc


	)

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/stddef.h

1 #i‚de‡
__LINUX_STDDEF_WRAPPER_H


2 
	#__LINUX_STDDEF_WRAPPER_H
 1

	)

4 #ö˛ude_√xà<
löux
/
°ddef
.
h
>

6 #ifde‡
__KERNEL__


8 #i‚de‡
HAVE_BOOL_TYPE


10 
	mÁl£
 = 0,

11 
	måue
 = 1

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/tcp.h

1 #i‚de‡
__LINUX_TCP_WRAPPER_H


2 
	#__LINUX_TCP_WRAPPER_H
 1

	)

4 #ö˛ude_√xà<
löux
/
t˝
.
h
>

6 #i‚de‡
HAVE_SKBUFF_HEADER_HELPERS


7 
ölöe
 
t˝hdr
 *
	$t˝_hdr
(c⁄° 
sk_buff
 *
skb
)

9  (
t˝hdr
 *)
	`skb_å™•‹t_hódî
(
skb
);

10 
	}
}

12 
ölöe
 
	$t˝_hdæí
(c⁄° 
sk_buff
 *
skb
)

14  
	`t˝_hdr
(
skb
)->
doff
 * 4;

15 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/timer.h

1 #i‚de‡
__LINUX_TIMER_WRAPPER_H


2 
	#__LINUX_TIMER_WRAPPER_H
 1

	)

4 #ö˛ude_√xà<
löux
/
timî
.
h
>

6 
	~<löux/vîsi⁄.h
>

8 #i‚de‡
RHEL_RELEASE_VERSION


9 
	#RHEL_RELEASE_VERSION
(
X
, 
Y
Ë(0)

	)

11 #i‡((
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,20)) && \

12 (!
deföed
(
RHEL_RELEASE_CODE
) || \

13 (
	gRHEL_RELEASE_CODE
 < 
	$RHEL_RELEASE_VERSION
(5, 1))))

15 vﬁ©ûê
jiffõs
;

37 
ölöe
 
	$__round_jiffõs
(
j
, 
˝u
)

39 
ªm
;

40 
‹igöÆ
 = 
j
;

50 
j
 +
˝u
 * 3;

52 
ªm
 = 
j
 % 
HZ
;

60 i‡(
ªm
 < 
HZ
/4)

61 
j
 = j - 
ªm
;

63 
j
 = j - 
ªm
 + 
HZ
;

66 
j
 -
˝u
 * 3;

68 i‡(
j
 <
jiffõs
)

69  
‹igöÆ
;

70  
j
;

71 
	}
}

89 
ölöe
 
	$round_jiffõs
(
j
)

91  
	`__round_jiffõs
(
j
, 0);

92 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/types.h

1 #i‚de‡
__LINUX_TYPES_WRAPPER_H


2 
	#__LINUX_TYPES_WRAPPER_H
 1

	)

4 #ö˛ude_√xà<
löux
/
ty≥s
.
h
>

6 #i‚de‡
HAVE_CSUM_TYPES


7 
__u16
 
	t__bôwi£
 
	t__sum16
;

8 
__u32
 
	t__bôwi£
 
	t__wsum
;

11 #i‚de‡
HAVE_BOOL_TYPE


12 
_Boﬁ
 
	tboﬁ
;

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/u64_stats_sync.h

1 #i‚de‡
_LINUX_U64_STATS_SYNC_WRAPPER_H


2 
	#_LINUX_U64_STATS_SYNC_WRAPPER_H


	)

4 
	~<löux/vîsi⁄.h
>

6 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,36)

7 #ö˛ude_√xà<
löux
/
u64_°©s_sync
.
h
>

68 
	~<löux/£qlock.h
>

70 
	su64_°©s_sync
 {

71 #i‡
BITS_PER_LONG
==32 && 
deföed
(
CONFIG_SMP
)

72 
£qcou¡_t
 
	m£q
;

76 
ölöe
 
	$u64_°©s_upd©e_begö
(
u64_°©s_sync
 *
syn˝
)

78 #i‡
BITS_PER_LONG
==32 && 
	`deföed
(
CONFIG_SMP
)

79 
	`wrôe_£qcou¡_begö
(&
syn˝
->
£q
);

81 
	}
}

83 
ölöe
 
	$u64_°©s_upd©e_íd
(
u64_°©s_sync
 *
syn˝
)

85 #i‡
BITS_PER_LONG
==32 && 
	`deföed
(
CONFIG_SMP
)

86 
	`wrôe_£qcou¡_íd
(&
syn˝
->
£q
);

88 
	}
}

90 
ölöe
 
	$u64_°©s_„tch_begö
(c⁄° 
u64_°©s_sync
 *
syn˝
)

92 #i‡
BITS_PER_LONG
==32 && 
	`deföed
(
CONFIG_SMP
)

93  
	`ªad_£qcou¡_begö
(&
syn˝
->
£q
);

95 #i‡
BITS_PER_LONG
==32

96 
	`¥ìm±_dißbÀ
();

100 
	}
}

102 
ölöe
 
boﬁ
 
	$u64_°©s_„tch_ªåy
(c⁄° 
u64_°©s_sync
 *
syn˝
,

103 
°¨t
)

105 #i‡
BITS_PER_LONG
==32 && 
	`deföed
(
CONFIG_SMP
)

106  
	`ªad_£qcou¡_ªåy
(&
syn˝
->
£q
, 
°¨t
);

108 #i‡
BITS_PER_LONG
==32

109 
	`¥ìm±_íabÀ
();

111  
Ál£
;

113 
	}
}

121 
ölöe
 
	$u64_°©s_„tch_begö_bh
(c⁄° 
u64_°©s_sync
 *
syn˝
)

123 #i‡
BITS_PER_LONG
==32 && 
	`deföed
(
CONFIG_SMP
)

124  
	`ªad_£qcou¡_begö
(&
syn˝
->
£q
);

126 #i‡
BITS_PER_LONG
==32

127 
	`loˇl_bh_dißbÀ
();

131 
	}
}

133 
ölöe
 
boﬁ
 
	$u64_°©s_„tch_ªåy_bh
(c⁄° 
u64_°©s_sync
 *
syn˝
,

134 
°¨t
)

136 #i‡
BITS_PER_LONG
==32 && 
	`deföed
(
CONFIG_SMP
)

137  
	`ªad_£qcou¡_ªåy
(&
syn˝
->
£q
, 
°¨t
);

139 #i‡
BITS_PER_LONG
==32

140 
	`loˇl_bh_íabÀ
();

142  
Ál£
;

144 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/udp.h

1 #i‚de‡
__LINUX_UDP_WRAPPER_H


2 
	#__LINUX_UDP_WRAPPER_H
 1

	)

4 #ö˛ude_√xà<
löux
/
udp
.
h
>

6 #i‚de‡
HAVE_SKBUFF_HEADER_HELPERS


7 
ölöe
 
udphdr
 *
	$udp_hdr
(c⁄° 
sk_buff
 *
skb
)

9  (
udphdr
 *)
	`skb_å™•‹t_hódî
(
skb
);

10 
	}
}

13 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(3,5,0)

14 
ölöe
 
	$udp_íˇp_íabÀ
()

16 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/workqueue.h

1 #i‚de‡
__LINUX_WORKQUEUE_WRAPPER_H


2 
	#__LINUX_WORKQUEUE_WRAPPER_H
 1

	)

4 
	~<löux/timî.h
>

6 
__öô
 
ovs_w‹kqueues_öô
();

7 
ovs_w‹kqueues_exô
();

17 
	gw‹k_°ru˘
;

19 (*
	tw‹k_func_t
)(
	tw‹k_°ru˘
 *
	tw‹k
);

21 
	#w‹k_d©a_bôs
(
w‹k
Ë((*)(&(w‹k)->
d©a
))

	)

23 
	sw‹k_°ru˘
 {

24 
	#WORK_STRUCT_PENDING
 0

	)

25 
©omic_l⁄g_t
 
d©a
;

26 
li°_hód
 
íåy
;

27 
w‹k_func_t
 
func
;

28 #ifde‡
CONFIG_LOCKDEP


29 
lockdï_m≠
Üockdep_map;

33 
	#WORK_DATA_INIT
(Ë
	`ATOMIC_LONG_INIT
(0)

	)

35 
	#w‹k_˛ór_≥ndög
(
w‹k
) \

36 
	`˛ór_bô
(
WORK_STRUCT_PENDING
, 
	`w‹k_d©a_bôs
(
w‹k
))

	)

38 
	sdñayed_w‹k
 {

39 
w‹k_°ru˘
 
w‹k
;

40 
timî_li°
 
timî
;

43 
	#__WORK_INITIALIZER
(
n
, 
f
) { \

44 .
d©a
 = 
	`WORK_DATA_INIT
(), \

45 .
íåy
 = { &(
n
).entry, &(n).entry }, \

46 .
func
 = (
f
), \

47 
	}

	)
}

49 
	#__DELAYED_WORK_INITIALIZER
(
n
, 
f
) { \

50 .
w‹k
 = 
	`__WORK_INITIALIZER
((
n
).w‹k, (
f
)), \

51 .
timî
 = 
	`TIMER_INITIALIZER
(
NULL
, 0, 0), \

52 }

	)

54 
	#DECLARE_DELAYED_WORK
(
n
, 
f
) \

55 
dñayed_w‹k
 
n
 = 
	`__DELAYED_WORK_INITIALIZER
“, 
f
)

	)

57 
	#scheduÀ_dñayed_w‹k
 
Ωl_scheduÀ_dñayed_w‹k


	)

58 
scheduÀ_dñayed_w‹k
(
dñayed_w‹k
 *
dw‹k
, 
dñay
);

60 
	#ˇn˚l_dñayed_w‹k_sync
 
Ωl_ˇn˚l_dñayed_w‹k_sync


	)

61 
ˇn˚l_dñayed_w‹k_sync
(
dñayed_w‹k
 *
dw‹k
);

63 
	#INIT_WORK
(
_w‹k
, 
_func
) \

65 (
_w‹k
)->
d©a
 = (
©omic_l⁄g_t
Ë
	`WORK_DATA_INIT
(); \

66 
	`INIT_LIST_HEAD
(&(
_w‹k
)->
íåy
); \

67 (
_w‹k
)->
func
 = (
_func
); \

68 } 0)

	)

70 
Êush_scheduÀd_w‹k
();

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/net/checksum.h

1 #i‚de‡
__NET_CHECKSUM_WRAPPER_H


2 
	#__NET_CHECKSUM_WRAPPER_H
 1

	)

4 #ö˛ude_√xà<
√t
/
checksum
.
h
>

6 #i‚de‡
HAVE_CSUM_UNFOLD


7 
ölöe
 
__wsum
 
	$csum_unfﬁd
(
__sum16
 
n
)

9  (
__f‹˚
 
__wsum
)
n
;

10 
	}
}

16 #i‡
deföed
(
HAVE_CSUM_COPY_DBG
Ë&& deföed(
CONFIG_X86_32
)

17 
	#csum_™d_c›y_to_u£r
(
§c
, 
d°
, 
Àn
, 
sum
, 
îr_±r
) \

18 
	`csum_™d_c›y_to_u£r
(
§c
, 
d°
, 
Àn
, 
sum
, 
NULL
, 
îr_±r
)

	)

21 #i‚de‡
HAVE_CSUM_REPLACE4


22 
ölöe
 
	$csum_ª∂a˚4
(
__sum16
 *
sum
, 
__be32
 
‰om
, __be32 
to
)

24 
__be32
 
diff
[] = { ~
‰om
, 
to
 };

26 *
sum
 = 
	`csum_fﬁd
(
	`csum_∑πül
((*)
diff
, (diff), ~
	`csum_unfﬁd
(*sum)));

27 
	}
}

29 
ölöe
 
	$csum_ª∂a˚2
(
__sum16
 *
sum
, 
__be16
 
‰om
, __be16 
to
)

31 
	`csum_ª∂a˚4
(
sum
, (
__f‹˚
 
__be32
)
‰om
, (__f‹˚ __be32)
to
);

32 
	}
}

35 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,25)

36 
	#öë_¥Ÿo_csum_ª∂a˚2
(
sum
, 
skb
, 
‰om
, 
to
, 
p£udohdr
) \

37 
	`öë_¥Ÿo_csum_ª∂a˚4
(
sum
, 
skb
, (
__f‹˚
 
__be32
)(
‰om
), \

38 (
__f‹˚
 
__be32
)(
to
), 
p£udohdr
)

	)

41 #i‚de‡
CSUM_MANGLED_0


42 
	#CSUM_MANGLED_0
 ((
__f‹˚
 
__sum16
)0xffff)

	)

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/net/dst.h

1 #i‚de‡
__NET_DST_WRAPPER_H


2 
	#__NET_DST_WRAPPER_H
 1

	)

4 
	~<löux/vîsi⁄.h
>

5 #ö˛ude_√xà<
√t
/
d°
.
h
>

7 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(3,3,0) && \

8 
	gLINUX_VERSION_CODE
 > 
	$KERNEL_VERSION
(3,0,20)

10 
	#d°_gë_√ighbour_n‹ef
 
d°_gë_√ighbour


	)

14 #i‚de‡
HAVE_SKB_DST_ACCESSOR_FUNCS


16 
ölöe
 
	$skb_d°_dr›
(
sk_buff
 *
skb
)

18 i‡(
skb
->
d°
)

19 
	`d°_ªÀa£
(
	`skb_d°
(
skb
));

20 
skb
->
d°
 = 
NULL
;

21 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/net/genetlink.h

1 #i‚de‡
__NET_GENERIC_NETLINK_WRAPPER_H


2 
	#__NET_GENERIC_NETLINK_WRAPPER_H
 1

	)

4 
	~<löux/vîsi⁄.h
>

5 
	~<löux/√éök.h
>

6 
	~<√t/√t_«me•a˚.h
>

14 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(3,7,0)

15 
	#¢d_p‹tid
 
¢d_pid


	)

16 
	#p‹tid
 
pid


	)

35 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,19)

36 #unde‡
∆msg_mu…iˇ°


37 
	#∆msg_mu…iˇ°
 
bu°ed_∆msg_mu…iˇ°


	)

38 
	#gílmsg_mu…iˇ°
 
bu°ed_gílmsg_mu…iˇ°


	)

39 
bu°ed_∆msg_mu…iˇ°
(
sock
 *
sk
, 
sk_buff
 *
skb
,

40 
u32
 
p‹tid
, 
group
);

43 #ö˛ude_√xà<
√t
/
gíëlök
.
h
>

46 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,19)

47 #unde‡
∆msg_mu…iˇ°


48 #unde‡
gílmsg_mu…iˇ°


49 
	#∆msg_mu…iˇ°
 
Ωl_∆msg_mu…iˇ°


	)

52 
	~<√t/√t_«me•a˚.h
>

54 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,23)

56 
	~<löux/gíëlök.h
>

66 
	sgíl_mu…iˇ°_group
 {

67 
gíl_Ámûy
 *
	mÁmûy
;

68 
li°_hód
 
	mli°
;

69 
	m«me
[
GENL_NAMSIZ
];

70 
u32
 
	mid
;

73 
gíl_ªgi°î_mc_group
(
gíl_Ámûy
 *
Ámûy
,

74 
gíl_mu…iˇ°_group
 *
gΩ
);

78 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,19)

83 
ölöe
 
	$gílmsg_msg_size
(
∑ylﬂd
)

85  
GENL_HDRLEN
 + 
∑ylﬂd
;

86 
	}
}

92 
ölöe
 
	$gílmsg_tŸÆ_size
(
∑ylﬂd
)

94  
	`NLMSG_ALIGN
(
	`gílmsg_msg_size
(
∑ylﬂd
));

95 
	}
}

97 
	#gílmsg_mu…iˇ°
(
s
, 
p
, 
g
, 
f
) \

98 
	`gílmsg_mu…iˇ°_Êags
((
s
), (
p
), (
g
), (
f
))

	)

100 
ölöe
 
	$gílmsg_mu…iˇ°_Êags
(
sk_buff
 *
skb
, 
u32
 
p‹tid
,

101 
group
, 
gÂ_t
 
Êags
)

103 
îr
;

105 
	`NETLINK_CB
(
skb
).
d°_group
 = 
group
;

107 
îr
 = 
	`√éök_brﬂdˇ°
(
gíl_sock
, 
skb
, 
p‹tid
, 
group
, 
Êags
);

108 i‡(
îr
 > 0)

109 
îr
 = 0;

111  
îr
;

112 
	}
}

115 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,32)

116 
	#gílmsg_mu…iˇ°_√äs
(
√t
, 
skb
, 
p‹tid
, 
gΩ
, 
Êags
) \

117 
	`gílmsg_mu…iˇ°
(
skb
, 
p‹tid
, 
gΩ
, 
Êags
)

	)

120 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,20)

122 
	#gílmsg_put
(
skb
, 
p
, 
£q
, 
Ám
, 
Êg
, 
c
) \

123 
	`gílmsg_put
((
skb
), (
p
), (
£q
), (
Ám
)->
id
, (Ám)->
hdrsize
, \

124 (
Êg
), (
c
), (
Ám
)->
vîsi⁄
)

	)

136 
ölöe
 *
	$gílmsg_put_ª∂y
(
sk_buff
 *
skb
,

137 
gíl_öfo
 *
öfo
, 
gíl_Ámûy
 *
Ámûy
,

138 
Êags
, 
u8
 
cmd
)

140  
	`gílmsg_put
(
skb
, 
öfo
->
¢d_p‹tid
, info->
¢d_£q
, 
Ámûy
,

141 
Êags
, 
cmd
);

142 
	}
}

149 
ölöe
 
	$gílmsg_ª∂y
(
sk_buff
 *
skb
, 
gíl_öfo
 *
öfo
)

151  
	`gílmsg_uniˇ°
(
skb
, 
öfo
->
¢d_p‹tid
);

152 
	}
}

159 
ölöe
 
sk_buff
 *
	$gílmsg_√w
(
size_t
 
∑ylﬂd
, 
gÂ_t
 
Êags
)

161  
	`∆msg_√w
(
	`gílmsg_tŸÆ_size
(
∑ylﬂd
), 
Êags
);

162 
	}
}

165 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,31)

166 
gíl_ªgi°î_Ámûy_wôh_›s
(
gíl_Ámûy
 *
Ámûy
,

167 
gíl_›s
 *
›s
, 
size_t
 
n_›s
);

170 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,24)

171 
	#gíl_nŸify
(
skb
, 
√t
, 
p‹tid
, 
group
, 
∆h
, 
Êags
) \

172 
	`gíl_nŸify
(
skb
, 
p‹tid
, 
group
, 
∆h
, 
Êags
)

	)

174 
gíl_nŸify
(
sk_buff
 *
skb
, 
√t
 *√t, 
u32
 
p‹tid
,

175 
u32
 
group
, 
∆msghdr
 *
∆h
, 
gÂ_t
 
Êags
);

177 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,24) && \

178 
	gLINUX_VERSION_CODE
 < 
	$KERNEL_VERSION
(2,6,32)

179 
ölöe
 
√t
 *
	$gíl_öfo_√t
(
gíl_öfo
 *
öfo
)

181  &
öô_√t
;

182 
	}
}

185 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,32)

186 
	#gílmsg_uniˇ°
(
ign‹e_√t
, 
skb
, 
p‹tid
Ë
	`gílmsg_uniˇ°
(skb,Ö‹tid)

	)

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/net/inet_frag.h

1 #i‚de‡
__NET_INET_FRAG_WRAPPER_H


2 
	#__NET_INET_FRAG_WRAPPER_H
 1

	)

4 
	~<löux/vîsi⁄.h
>

5 #ö˛ude_√xà<
√t
/
öë_‰ag
.
h
>

7 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(3,7,0)

8 
	#öë_‰ag_evi˘‹
(
nf
, 
f
, 
f‹˚
) \

10 i‡(
f‹˚
 || 
	`©omic_ªad
(&
nf
->
mem
Ë>Çf->
high_thªsh
) { \

11 
	`öë_‰ag_evi˘‹
(
nf
, 
f
); \

13 } 0)

	)

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/net/ip.h

1 #i‚de‡
__NET_IP_WRAPPER_H


2 
	#__NET_IP_WRAPPER_H
 1

	)

4 #ö˛ude_√xà<
√t
/
ù
.
h
>

6 
	~<löux/vîsi⁄.h
>

7 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,25)

9 
__ù_loˇl_out
(
sk_buff
 *
skb
);

10 
ù_loˇl_out
(
sk_buff
 *
skb
);

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/net/ipv6.h

1 #i‚de‡
__NET_IPV6_WRAPPER_H


2 
	#__NET_IPV6_WRAPPER_H
 1

	)

4 #ö˛ude_√xà<
√t
/
ùv6
.
h
>

7 
	mOVS_IP6T_FH_F_FRAG
 = (1 << 0),

8 
	mOVS_IP6T_FH_F_AUTH
 = (1 << 1),

9 
	mOVS_IP6T_FH_F_SKIP_RH
 = (1 << 2),

15 
	#ùv6_skù_exthdr
 
Ωl_ùv6_skù_exthdr


	)

16 
ùv6_skù_exthdr
(c⁄° 
sk_buff
 *
skb
, 
°¨t
,

17 
u8
 *
√xthdΩ
, 
__be16
 *
‰ag_ofÂ
);

21 
	#ùv6_föd_hdr
 
Ωl_ùv6_föd_hdr


	)

22 
ùv6_föd_hdr
(c⁄° 
sk_buff
 *
skb
, *
off£t
,

23 
èrgë
, *
‰agoff
, *
‰agÊg
);

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/net/net_namespace.h

1 #i‚de‡
__NET_NET_NAMESPACE_WRAPPER_H


2 
	#__NET_NET_NAMESPACE_WRAPPER_H
 1

	)

4 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,24)

6 #ö˛ude_√xà<
√t
/
√t_«me•a˚
.
h
>

9 
	g√t
;

11 
ölöe
 
√t
 *
	$hﬁd_√t
(
√t
 *net)

13  
√t
;

14 
	}
}

16 
ölöe
 
	$ªÀa£_√t
(
√t
 *net)

18 
	}
}

20 
	#__√t_öô
 
__öô


	)

21 
	#__√t_exô
 
__exô


	)

24 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,26)

25 #ifde‡
CONFIG_NET_NS


26 
ölöe


27 
	$√t_eq
(c⁄° 
√t
 *
√t1
, c⁄° √à*
√t2
)

29  
√t1
 =
√t2
;

30 
	}
}

32 
ölöe


33 
	$√t_eq
(c⁄° 
√t
 *
√t1
, c⁄° √à*
√t2
)

36 
	}
}

40 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,29)

41 #ifde‡
CONFIG_NET_NS


43 
ölöe
 
	$wrôe_≤ë
(
√t
 **
≤ë
, net *net)

45 *
≤ë
 = 
√t
;

46 
	}
}

48 
ölöe
 
√t
 *
	$ªad_≤ë
(
√t
 * c⁄° *
≤ë
)

50  *
≤ë
;

51 
	}
}

55 
	#wrôe_≤ë
(
≤ë
, 
√t
Ëdÿ{ ()“ë); } 0)

	)

57 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,24)

58 
	#ªad_≤ë
(
≤ë
Ë(&
öô_√t
)

	)

60 
	#ªad_≤ë
(
≤ë
Ë(
NULL
)

	)

66 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,33)

67 
	#≥∫ë_›î©i⁄s
 
Ωl_≥∫ë_›î©i⁄s


	)

68 
	s≥∫ë_›î©i⁄s
 {

69 (*
	möô
)(
√t
 *
	m√t
);

70 (*
	mexô
)(
√t
 *
	m√t
);

71 *
	mid
;

72 
size_t
 
	msize
;

75 
Ωl_ªgi°î_≥∫ë_gí_devi˚
(
Ωl_≥∫ë_›î©i⁄s
 *
›s
);

76 
Ωl_uƒegi°î_≥∫ë_gí_devi˚
(
Ωl_≥∫ë_›î©i⁄s
 *
›s
);

78 
	#ªgi°î_≥∫ë_devi˚
 
Ωl_ªgi°î_≥∫ë_gí_devi˚


	)

79 
	#uƒegi°î_≥∫ë_devi˚
 
Ωl_uƒegi°î_≥∫ë_gí_devi˚


	)

83 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,32)

84 #unde‡
f‹_óch_√t


85 
	#f‹_óch_√t
(
√t
Ë{Çë = 
NULL
; }

	)

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/net/netlink.h

1 #i‚de‡
__NET_NETLINK_WRAPPER_H


2 
	#__NET_NETLINK_WRAPPER_H
 1

	)

4 
	~<löux/vîsi⁄.h
>

5 #ö˛ude_√xà<
√t
/
√éök
.
h
>

7 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,29)

28 #unde‡
NLA_NESTED


29 
	#NLA_NESTED
 
NLA_UNSPEC


	)

32 #i‚de‡
HAVE_NLA_GET_BE16


37 
ölöe
 
__be16
 
	$∆a_gë_be16
(c⁄° 
∆©å
 *
∆a
)

39  *(
__be16
 *Ë
	`∆a_d©a
(
∆a
);

40 
	}
}

43 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,19)

48 
ölöe
 
__be32
 
	$∆a_gë_be32
(c⁄° 
∆©å
 *
∆a
)

50  *(
__be32
 *Ë
	`∆a_d©a
(
∆a
);

51 
	}
}

54 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,29)

59 
	#∆a_gë_u64
(
∆a
Ë(
∆a_gë_u64
Ë((
∆©å
 *Ë“œ))

	)

60 
	#∆a_gë_u32
(
∆a
Ë(
∆a_gë_u32
Ë((
∆©å
 *Ë“œ))

	)

61 
	#∆a_gë_u16
(
∆a
Ë(
∆a_gë_u16
Ë((
∆©å
 *Ë“œ))

	)

62 
	#∆a_gë_u8
(
∆a
Ë(
∆a_gë_u8
Ë((
∆©å
 *Ë“œ))

	)

64 
	#∆a_gë_be32
(
∆a
Ë(
∆a_gë_be32
Ë((
∆©å
 *Ë“œ))

	)

65 
	#∆a_gë_be16
(
∆a
Ë(
∆a_gë_be16
Ë((
∆©å
 *Ë“œ))

	)

66 
	#∆a_gë_be8
(
∆a
Ë(
∆a_gë_be8
Ë((
∆©å
 *Ë“œ))

	)

67 
	#∆a_gë_Êag
(
∆a
Ë(
∆a_gë_Êag
Ë((
∆©å
 *Ë“œ))

	)

68 
	#∆a_gë_m£cs
(
∆a
Ë(
∆a_gë_m£cs
)((
∆©å
 *Ë“œ))

	)

69 
	#∆a_mem˝y
(
d°
, 
§c
, 
cou¡
) \

70 (
∆a_mem˝y
)(
d°
, (
∆©å
 *)(
§c
), 
cou¡
)

	)

73 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,34)

76 
	#∆a_gë_be64
 
Ωl_∆a_gë_be64


	)

77 
ölöe
 
__be64
 
	$∆a_gë_be64
(c⁄° 
∆©å
 *
∆a
)

79 
__be64
 
tmp
;

82 
	`∆a_mem˝y
(&
tmp
, (
∆©å
 *Ë
∆a
, (tmp));

84  
tmp
;

85 
	}
}

88 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(3,5,0)

89 
ölöe
 
	$∆a_put_be16
(
sk_buff
 *
skb
, 
©åty≥
, 
__be16
 
vÆue
)

91  
	`∆a_put
(
skb
, 
©åty≥
, (
__be16
), &
vÆue
);

92 
	}
}

93 
ölöe
 
	$∆a_put_be32
(
sk_buff
 *
skb
, 
©åty≥
, 
__be32
 
vÆue
)

95  
	`∆a_put
(
skb
, 
©åty≥
, (
__be32
), &
vÆue
);

96 
	}
}

97 
ölöe
 
	$∆a_put_be64
(
sk_buff
 *
skb
, 
©åty≥
, 
__be64
 
vÆue
)

99  
	`∆a_put
(
skb
, 
©åty≥
, (
__be64
), &
vÆue
);

100 
	}
}

103 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,24)

108 
ölöe
 
	$∆a_ty≥
(c⁄° 
∆©å
 *
∆a
)

110  
∆a
->
∆a_ty≥
 & 
NLA_TYPE_MASK
;

111 
	}
}

114 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,22)

115 
	#∆a_∑r£_√°ed
(
tb
, 
maxty≥
, 
∆a
, 
pﬁicy
) \

116 
	`∆a_∑r£_√°ed
(
tb
, 
maxty≥
, (
∆©å
 *)(
∆a
), \

117 (
∆a_pﬁicy
 *)(
pﬁicy
))

	)

118 #ñi‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,29)

119 
	#∆a_∑r£_√°ed
(
tb
, 
maxty≥
, 
∆a
, 
pﬁicy
) \

120 
	`∆a_∑r£_√°ed
(
tb
, 
maxty≥
, (
∆©å
 *)(
∆a
), 
pﬁicy
)

	)

123 #i‚de‡
∆a_f‹_óch_√°ed


124 
	#∆a_f‹_óch_√°ed
(
pos
, 
∆a
, 
ªm
) \

125 
	`∆a_f‹_óch_©å
(
pos
, 
	`∆a_d©a
(
∆a
), 
	`∆a_Àn
“œ), 
ªm
)

	)

128 #i‚de‡
HAVE_NLA_FIND_NESTED


129 
ölöe
 
∆©å
 *
	$∆a_föd_√°ed
(
∆©å
 *
∆a
, 
©åty≥
)

131  
	`∆a_föd
(
	`∆a_d©a
(
∆a
), 
	`∆a_Àn
“œ), 
©åty≥
);

132 
	}
}

135 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,19)

142 
ölöe
 
	$∆msg_ªp‹t
(c⁄° 
∆msghdr
 *
∆h
)

144  !!(
∆h
->
∆msg_Êags
 & 
NLM_F_ECHO
);

145 
	}
}

147 
∆msg_nŸify
(
sock
 *
sk
, 
sk_buff
 *
skb
,

148 
u32
 
p‹tid
, 
group
, 
ªp‹t
,

149 
gÂ_t
 
Êags
);

152 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,19)

157 
	#∆msg_mu…iˇ°
 
Ωl_∆msg_mu…iˇ°


	)

158 
ölöe
 
	$∆msg_mu…iˇ°
(
sock
 *
sk
, 
sk_buff
 *
skb
,

159 
u32
 
p‹tid
, 
group
, 
gÂ_t
 
Êags
)

161 
îr
;

163 
	`NETLINK_CB
(
skb
).
d°_group
 = 
group
;

165 
îr
 = 
	`√éök_brﬂdˇ°
(
sk
, 
skb
, 
p‹tid
, 
group
, 
Êags
);

166 i‡(
îr
 > 0)

167 
îr
 = 0;

169  
îr
;

170 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/net/netns/generic.h

1 #i‚de‡
__NET_NET_NETNS_GENERIC_WRAPPER_H


2 
	#__NET_NET_NETNS_GENERIC_WRAPPER_H
 1

	)

4 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,32)

6 #ö˛ude_√xà<
√t
/
√äs
/
gíîic
.
h
>

8 
	#√t_gíîic
 
Ωl_√t_gíîic


	)

9 *
√t_gíîic
(c⁄° 
√t
 *√t, 
id
);

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/net/protocol.h

1 #i‚de‡
__NET_PROTOCOL_WRAPPER_H


2 
	#__NET_PROTOCOL_WRAPPER_H
 1

	)

4 #ö˛ude_√xà<
√t
/
¥Ÿocﬁ
.
h
>

6 
	~<löux/vîsi⁄.h
>

7 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,32)

8 
	#öë_add_¥Ÿocﬁ
(
¥Ÿ
, 
num
Ë
	`öë_add_¥Ÿocﬁ
((
√t_¥Ÿocﬁ
 *)’rŸ),Çum)

	)

9 
	#öë_dñ_¥Ÿocﬁ
(
¥Ÿ
, 
num
Ë
	`öë_dñ_¥Ÿocﬁ
((
√t_¥Ÿocﬁ
 *)’rŸ),Çum)

	)

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/net/route.h

1 #i‚de‡
__NET_ROUTE_WRAPPER_H


2 
	#__NET_ROUTE_WRAPPER_H
 1

	)

4 #ö˛ude_√xà<
√t
/
rouã
.
h
>

6 
	~<löux/vîsi⁄.h
>

7 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,25)

9 
	#ù_rouã_ouçut_key
(
√t
, 
Ω
, 
Êp
) \

10 
	`ù_rouã_ouçut_key
((
Ω
), (
Êp
))

	)

14 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,38)

15 
ölöe
 
	$ù4_d°_h›limô
(c⁄° 
d°_íåy
 *
d°
)

17  
	`d°_mëric
(
d°
, 
RTAX_HOPLIMIT
);

18 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/net/sock.h

1 #i‚de‡
__NET_SOCK_WRAPPER_H


2 
	#__NET_SOCK_WRAPPER_H
 1

	)

4 #ö˛ude_√xà<
√t
/
sock
.
h
>

5 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,24)

6 
	g√t
;

8 
ölöe
 
√t
 *
	$sock_√t
(c⁄° 
sock
 *
sk
)

10  
NULL
;

11 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/ip_output-openvswitch.c

1 
	~<löux/vîsi⁄.h
>

2 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,25)

4 
	~<löux/√tfûãr_ùv4.h
>

5 
	~<√t/ù.h
>

7 
	$__ù_loˇl_out
(
sk_buff
 *
skb
)

9 
ùhdr
 *
ùh
 = 
	`ù_hdr
(
skb
);

11 
ùh
->
tŸ_Àn
 = 
	`ht⁄s
(
skb
->
Àn
);

12 
	`ù_£nd_check
(
ùh
);

13 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,24)

14  
	`nf_hook
(
PF_INET
, 
NF_IP_LOCAL_OUT
, &
skb
, 
NULL
, skb->
d°
->
dev
,

15 
d°_ouçut
);

17  
	`nf_hook
(
PF_INET
, 
NF_IP_LOCAL_OUT
, 
skb
, 
NULL
, skb->
d°
->
dev
,

18 
d°_ouçut
);

20 
	}
}

22 
	$ù_loˇl_out
(
sk_buff
 *
skb
)

24 
îr
;

26 
îr
 = 
	`__ù_loˇl_out
(
skb
);

27 i‡(
	`likñy
(
îr
 == 1))

28 
îr
 = 
	`d°_ouçut
(
skb
);

30  
îr
;

31 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/kmemdup.c

1 #i‚de‡
HAVE_KMEMDUP


3 
	~<löux/¶ab.h
>

4 
	~<löux/°rög.h
>

13 *
	$kmemdup
(c⁄° *
§c
, 
size_t
 
Àn
, 
gÂ_t
 
gÂ
)

15 *
p
;

17 
p
 = 
	`kmÆloc
(
Àn
, 
gÂ
);

18 i‡(
p
)

19 
	`mem˝y
(
p
, 
§c
, 
Àn
);

20  
p
;

21 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/net_namespace.c

1 
	~<löux/if_vœn.h
>

2 
	~<löux/√tdevi˚.h
>

3 
	~<√t/√t_«me•a˚.h
>

4 
	~<√t/√äs/gíîic.h
>

6 #unde‡
≥∫ë_›î©i⁄s


8 #i‡
LINUX_VERSION_CODE
 <
KERNEL_VERSION
(2,6,32)

9 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,32)

10 
√t_assign_gíîic
(
√t
 *√t, 
id
, *
d©a
);

13 
__√t_öô
 
	$com∑t_öô_√t
(
√t
 *√t, 
Ωl_≥∫ë_›î©i⁄s
 *
≤ë
)

15 
îr
;

16 *
ovs_√t
 = 
	`kzÆloc
(
≤ë
->
size
, 
GFP_KERNEL
);

18 i‡(!
ovs_√t
)

19  -
ENOMEM
;

21 
îr
 = 
	`√t_assign_gíîic
(
√t
, *
≤ë
->
id
, 
ovs_√t
);

22 i‡(
îr
)

23 
îr
;

25 i‡(
≤ë
->
öô
) {

26 
îr
 = 
≤ë
->
	`öô
(
√t
);

27 i‡(
îr
)

28 
îr
;

32 
îr
:

33 
	`k‰ì
(
ovs_√t
);

34  
îr
;

35 
	}
}

37 
__√t_exô
 
	$com∑t_exô_√t
(
√t
 *√t, 
Ωl_≥∫ë_›î©i⁄s
 *
≤ë
)

39 *
ovs_√t
 = 
	`√t_gíîic
(
√t
, *
≤ë
->
id
);

41 i‡(
≤ë
->
exô
)

42 
≤ë
->
	`exô
(
√t
);

43 
	`k‰ì
(
ovs_√t
);

44 
	}
}

47 #i‡
LINUX_VERSION_CODE
 =
KERNEL_VERSION
(2,6,32)

48 
	#DEFINE_PNET_REG_FUNC
(
PNET_TYPE
) \

49 
Ωl_≥∫ë_›î©i⁄s
 *
≤ë_
##
PNET_TYPE
; \

50 
__√t_öô
 
com∑t_öô_√t_
##
	`PNET_TYPE
(
√t
 *net) \

52  
	`com∑t_öô_√t
(
√t
, 
≤ë_
##
PNET_TYPE
); \

55 
__√t_exô
 
com∑t_exô_√t_
##
	`PNET_TYPE
(
√t
 *net) \

57 
	`com∑t_exô_√t
(
√t
, 
≤ë_
##
PNET_TYPE
); \

60 
≥∫ë_›î©i⁄s
 
≤ë_com∑t_
##
PNET_TYPE
 = { \

61 .
öô
 = 
com∑t_öô_√t_
##
PNET_TYPE
, \

62 .
exô
 = 
com∑t_exô_√t_
##
PNET_TYPE
, \

65 
Ωl_ªgi°î_≥∫ë_
##
	`PNET_TYPE
(
Ωl_≥∫ë_›î©i⁄s
 *
Ωl_≤ë
) \

67 
≤ë_
##
PNET_TYPE
 = 
Ωl_≤ë
; \

68  
ªgi°î_≥∫ë_
##
	`PNET_TYPE
(
≤ë_
##
PNET_TYPE
->
id
, &
≤ë_com∑t_
##PNET_TYPE); \

71 
Ωl_uƒegi°î_≥∫ë_
##
	`PNET_TYPE
(
Ωl_≥∫ë_›î©i⁄s
 *
≤ë
) \

73 
uƒegi°î_≥∫ë_
##
	`PNET_TYPE
(*
≤ë
->
id
, &
≤ë_com∑t_
##
PNET_TYPE
); \

74 }

	)

76 
DEFINE_PNET_REG_FUNC
(
gí_devi˚
);

78 #ñi‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,32)

79 
	#MAX_DATA_COUNT
 1

	)

80 
√t
 *
	g√t
;

82 *
	g__ovs_√t_d©a
[
MAX_DATA_COUNT
];

83 
	gcou¡
;

85 
	$√t_assign_gíîic
(
√t
 *√t, 
id
, *
d©a
)

87 
	`BUG_ON
(
id
 >
MAX_DATA_COUNT
);

88 
__ovs_√t_d©a
[
id
] = 
d©a
;

90 
	}
}

92 *
	$√t_gíîic
(c⁄° 
√t
 *√t, 
id
)

94  
__ovs_√t_d©a
[
id
];

95 
	}
}

97 
	$Ωl_ªgi°î_≥∫ë_gí_devi˚
(
Ωl_≥∫ë_›î©i⁄s
 *
Ωl_≤ë
)

99 *
Ωl_≤ë
->
id
 = 
cou¡
++;

100  
	`com∑t_öô_√t
(
√t
, 
Ωl_≤ë
);

101 
	}
}

103 
	$Ωl_uƒegi°î_≥∫ë_gí_devi˚
(
Ωl_≥∫ë_›î©i⁄s
 *
Ωl_≤ë
)

105 
	`com∑t_exô_√t
(
√t
, 
Ωl_≤ë
);

106 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/netdevice.c

1 
	~<löux/√tdevi˚.h
>

2 
	~<löux/if_vœn.h
>

4 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,38)

5 
boﬁ
 
	$ˇn_checksum_¥Ÿocﬁ
(
„©uªs
, 
__be16
 
¥Ÿocﬁ
)

7  ((
„©uªs
 & 
NETIF_F_GEN_CSUM
) ||

8 ((
„©uªs
 & 
NETIF_F_V4_CSUM
) &&

9 
¥Ÿocﬁ
 =
	`ht⁄s
(
ETH_P_IP
)) ||

10 ((
„©uªs
 & 
NETIF_F_V6_CSUM
) &&

11 
¥Ÿocﬁ
 =
	`ht⁄s
(
ETH_P_IPV6
)) ||

12 ((
„©uªs
 & 
NETIF_F_FCOE_CRC
) &&

13 
¥Ÿocﬁ
 =
	`ht⁄s
(
ETH_P_FCOE
)));

14 
	}
}

16 
ölöe
 
	$ûÀgÆ_highdma
(
√t_devi˚
 *
dev
, 
sk_buff
 *
skb
)

18 #ifde‡
CONFIG_HIGHMEM


19 
i
;

21 i‡(
dev
->
„©uªs
 & 
NETIF_F_HIGHDMA
)

24 
i
 = 0; i < 
	`skb_shöfo
(
skb
)->
ƒ_‰ags
; i++)

25 i‡(
	`PageHighMem
(
	`skb_shöfo
(
skb
)->
‰ags
[
i
].
∑ge
))

30 
	}
}

32 
u32
 
	$h¨m⁄ize_„©uªs
(
sk_buff
 *
skb
, 
__be16
 
¥Ÿocﬁ
, 
u32
 
„©uªs
)

34 i‡(!
	`ˇn_checksum_¥Ÿocﬁ
(
„©uªs
, 
¥Ÿocﬁ
)) {

35 
„©uªs
 &~
NETIF_F_ALL_CSUM
;

36 
„©uªs
 &~
NETIF_F_SG
;

37 } i‡(
	`ûÀgÆ_highdma
(
skb
->
dev
, skb)) {

38 
„©uªs
 &~
NETIF_F_SG
;

41  
„©uªs
;

42 
	}
}

44 
u32
 
	$Ωl_√tif_skb_„©uªs
(
sk_buff
 *
skb
)

46 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,26)

47 
vœn_„©uªs
 = 0;

49 
vœn_„©uªs
 = 
skb
->
dev
->vlan_features;

52 
__be16
 
¥Ÿocﬁ
 = 
skb
->protocol;

53 
u32
 
„©uªs
 = 
skb
->
dev
->features;

55 i‡(
¥Ÿocﬁ
 =
	`ht⁄s
(
ETH_P_8021Q
)) {

56 
vœn_ëhhdr
 *
veh
 = (vœn_ëhhd∏*)
skb
->
d©a
;

57 
¥Ÿocﬁ
 = 
veh
->
h_vœn_íˇpsuœãd_¥Ÿo
;

58 } i‡(!
	`vœn_tx_èg_¥e£¡
(
skb
)) {

59  
	`h¨m⁄ize_„©uªs
(
skb
, 
¥Ÿocﬁ
, 
„©uªs
);

62 
„©uªs
 &(
vœn_„©uªs
 | 
NETIF_F_HW_VLAN_TX
);

64 i‡(
¥Ÿocﬁ
 !
	`ht⁄s
(
ETH_P_8021Q
)) {

65  
	`h¨m⁄ize_„©uªs
(
skb
, 
¥Ÿocﬁ
, 
„©uªs
);

67 
„©uªs
 &
NETIF_F_SG
 | 
NETIF_F_HIGHDMA
 | 
NETIF_F_FRAGLIST
 |

68 
NETIF_F_GEN_CSUM
 | 
NETIF_F_HW_VLAN_TX
;

69  
	`h¨m⁄ize_„©uªs
(
skb
, 
¥Ÿocﬁ
, 
„©uªs
);

71 
	}
}

73 
sk_buff
 *
	$Ωl_skb_gso_£gmít
(
sk_buff
 *
skb
, 
u32
 
„©uªs
)

75 
vœn_dïth
 = 
ETH_HLEN
;

76 
__be16
 
ty≥
 = 
skb
->
¥Ÿocﬁ
;

77 
__be16
 
skb_¥Ÿo
;

78 
sk_buff
 *
skb_gso
;

80 
ty≥
 =
	`ht⁄s
(
ETH_P_8021Q
)) {

81 
vœn_hdr
 *
vh
;

83 i‡(
	`u∆ikñy
(!
	`pskb_may_puŒ
(
skb
, 
vœn_dïth
 + 
VLAN_HLEN
)))

84  
	`ERR_PTR
(-
EINVAL
);

86 
vh
 = (
vœn_hdr
 *)(
skb
->
d©a
 + 
vœn_dïth
);

87 
ty≥
 = 
vh
->
h_vœn_íˇpsuœãd_¥Ÿo
;

88 
vœn_dïth
 +
VLAN_HLEN
;

92 #unde‡
skb_gso_£gmít


93 
skb_¥Ÿo
 = 
skb
->
¥Ÿocﬁ
;

94 
skb
->
¥Ÿocﬁ
 = 
ty≥
;

96 
skb_gso
 = 
	`skb_gso_£gmít
(
skb
, 
„©uªs
);

97 
skb
->
¥Ÿocﬁ
 = 
skb_¥Ÿo
;

98  
skb_gso
;

99 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/reciprocal_div.c

1 
	~<asm/div64.h
>

2 
	~<löux/ªcùroˇl_div.h
>

4 
u32
 
	$ªcùroˇl_vÆue
(
u32
 
k
)

6 
u64
 
vÆ
 = (1LL << 32Ë+ (
k
 - 1);

7 
	`do_div
(
vÆ
, 
k
);

8  (
u32
)
vÆ
;

9 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/skbuff-openvswitch.c

1 #i‡!
deföed
(
HAVE_SKB_WARN_LRO
Ë&& deföed(
NETIF_F_LRO
)

3 
	#¥_fmt
(
fmt
Ë
KBUILD_MODNAME
 ": " 
	)
fmt

5 
	~<löux/√tdevi˚.h
>

7 
	$__skb_w¨n_Ão_f‹w¨dög
(c⁄° 
sk_buff
 *
skb
)

9 i‡(
	`√t_øãlimô
())

10 
	`¥_w¨n
("%s:ÑeceivedÖackets cannot be forwarded while LRO isÉnabled\n",

11 
skb
->
dev
->
«me
);

12 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/time.c

1 
	~<löux/time.h
>

3 
	~<löux/vîsi⁄.h
>

5 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,26)

24 
	$£t_n‹mÆized_time•ec
(
time•ec
 *
ts
,

25 
time_t
 
£c
, 
n£c
)

27 
n£c
 >
NSEC_PER_SEC
) {

28 
n£c
 -
NSEC_PER_SEC
;

29 ++
£c
;

31 
n£c
 < 0) {

32 
n£c
 +
NSEC_PER_SEC
;

33 --
£c
;

35 
ts
->
tv_£c
 = 
£c
;

36 
ts
->
tv_n£c
 = 
n£c
;

37 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/workqueue.c

9 
	~<löux/kî√l.h
>

10 
	~<löux/sched.h
>

11 
	~<löux/öô.h
>

12 
	~<löux/sig«l.h
>

13 
	~<löux/com∂ëi⁄.h
>

14 
	~<löux/w‹kqueue.h
>

15 
	~<löux/¶ab.h
>

16 
	~<löux/˝u.h
>

17 
	~<löux/nŸifõr.h
>

18 
	~<löux/kthªad.h
>

19 
	~<löux/h¨dúq.h
>

20 
	~<löux/mempﬁicy.h
>

21 
	~<löux/kÆlsyms.h
>

22 
	~<löux/debug_locks.h
>

23 
	~<löux/lockdï.h
>

24 
	~<löux/idr.h
>

26 
•ölock_t
 
	gwq_lock
;

27 
li°_hód
 
	gw‹kq
;

28 
waô_queue_hód_t
 
	gm‹e_w‹k
;

29 
èsk_°ru˘
 *
	gw‹kq_thªad
;

30 
w‹k_°ru˘
 *
	gcuºít_w‹k
;

32 
	$queue_w‹k
(
w‹k_°ru˘
 *
w‹k
)

34 
Êags
;

36 
	`•ö_lock_úqßve
(&
wq_lock
, 
Êags
);

37 
	`li°_add_èû
(&
w‹k
->
íåy
, &
w‹kq
);

38 
	`wake_up
(&
m‹e_w‹k
);

39 
	`•ö_u∆ock_úqª°‹e
(&
wq_lock
, 
Êags
);

40 
	}
}

42 
	$_dñayed_w‹k_timî_‚
(
__d©a
)

44 
dñayed_w‹k
 *
dw‹k
 = (dñayed_w‹k *)
__d©a
;

45 
	`queue_w‹k
(&
dw‹k
->
w‹k
);

46 
	}
}

48 
	$__queue_dñayed_w‹k
(
dñayed_w‹k
 *
dw‹k
,

49 
dñay
)

51 
timî_li°
 *
timî
 = &
dw‹k
->timer;

52 
w‹k_°ru˘
 *
w‹k
 = &
dw‹k
->work;

54 
	`BUG_ON
(
	`timî_≥ndög
(
timî
));

55 
	`BUG_ON
(!
	`li°_em±y
(&
w‹k
->
íåy
));

57 
timî
->
expúes
 = 
jiffõs
 + 
dñay
;

58 
timî
->
d©a
 = ()
dw‹k
;

59 
timî
->
fun˘i⁄
 = 
_dñayed_w‹k_timî_‚
;

61 
	`add_timî
(
timî
);

62 
	}
}

64 
	$scheduÀ_dñayed_w‹k
(
dñayed_w‹k
 *
dw‹k
, 
dñay
)

66 i‡(
	`ã°_™d_£t_bô
(
WORK_STRUCT_PENDING
, 
	`w‹k_d©a_bôs
(&
dw‹k
->
w‹k
)))

69 i‡(
dñay
 == 0)

70 
	`queue_w‹k
(&
dw‹k
->
w‹k
);

72 
	`__queue_dñayed_w‹k
(
dw‹k
, 
dñay
);

75 
	}
}

77 
	swq_b¨rõr
 {

78 
w‹k_°ru˘
 
	mw‹k
;

79 
com∂ëi⁄
 
	md⁄e
;

82 
	$wq_b¨rõr_func
(
w‹k_°ru˘
 *
w‹k
)

84 
wq_b¨rõr
 *
b¨r
 = 
	`c⁄èöî_of
(
w‹k
, wq_barrier, work);

85 
	`com∂ëe
(&
b¨r
->
d⁄e
);

86 
	}
}

88 
	$w‹kqueue_b¨rõr
(
w‹k_°ru˘
 *
w‹k
)

90 
boﬁ
 
√ed_b¨rõr
;

91 
wq_b¨rõr
 
b¨r
;

93 
	`•ö_lock_úq
(&
wq_lock
);

94 i‡(
cuºít_w‹k
 !
w‹k
)

95 
√ed_b¨rõr
 = 
Ál£
;

97 
	`INIT_WORK
(&
b¨r
.
w‹k
, 
wq_b¨rõr_func
);

98 
	`öô_com∂ëi⁄
(&
b¨r
.
d⁄e
);

99 
	`li°_add
(&
b¨r
.
w‹k
.
íåy
, &
w‹kq
);

100 
	`wake_up
(&
m‹e_w‹k
);

101 
√ed_b¨rõr
 = 
åue
;

103 
	`•ö_u∆ock_úq
(&
wq_lock
);

105 i‡(
√ed_b¨rõr
)

106 
	`waô_f‹_com∂ëi⁄
(&
b¨r
.
d⁄e
);

107 
	}
}

109 
	$åy_to_gøb_≥ndög
(
w‹k_°ru˘
 *
w‹k
)

111 
ªt
;

113 
	`BUG_ON
(
	`ö_öãºu±
());

115 i‡(!
	`ã°_™d_£t_bô
(
WORK_STRUCT_PENDING
, 
	`w‹k_d©a_bôs
(
w‹k
)))

118 
	`•ö_lock_úq
(&
wq_lock
);

119 i‡(!
	`li°_em±y
(&
w‹k
->
íåy
)) {

120 
	`li°_dñ_öô
(&
w‹k
->
íåy
);

121 
ªt
 = 0;

124 
ªt
 = -1;

125 
	`•ö_u∆ock_úq
(&
wq_lock
);

127  
ªt
;

128 
	}
}

130 
	$__ˇn˚l_w‹k_timî
(
w‹k_°ru˘
 *
w‹k
,

131 
timî_li°
 *
timî
)

133 
ªt
;

136 
ªt
 = (
timî
 && 
	`likñy
(
	`dñ_timî
(timer)));

137 i‡(
ªt
)

141 
ªt
 = 
	`åy_to_gøb_≥ndög
(
w‹k
);

142 i‡(!
ªt
)

145 
	`w‹kqueue_b¨rõr
(
w‹k
);

146 
	`w‹k_˛ór_≥ndög
(
w‹k
);

147  
ªt
;

148 
	}
}

150 
	$ˇn˚l_dñayed_w‹k_sync
(
dñayed_w‹k
 *
dw‹k
)

152  
	`__ˇn˚l_w‹k_timî
(&
dw‹k
->
w‹k
, &dw‹k->
timî
);

153 
	}
}

155 
	$run_w‹kqueue
()

157 
	`•ö_lock_úq
(&
wq_lock
);

158 !
	`li°_em±y
(&
w‹kq
)) {

159 
w‹k_°ru˘
 *
w‹k
 = 
	`li°_íåy
(
w‹kq
.
√xt
,

160 
w‹k_°ru˘
, 
íåy
);

162 
w‹k_func_t
 
f
 = 
w‹k
->
func
;

163 
	`li°_dñ_öô
(
w‹kq
.
√xt
);

164 
cuºít_w‹k
 = 
w‹k
;

165 
	`•ö_u∆ock_úq
(&
wq_lock
);

167 
	`w‹k_˛ór_≥ndög
(
w‹k
);

168 
	`f
(
w‹k
);

170 
	`BUG_ON
(
	`ö_öãºu±
());

171 
	`•ö_lock_úq
(&
wq_lock
);

172 
cuºít_w‹k
 = 
NULL
;

174 
	`•ö_u∆ock_úq
(&
wq_lock
);

175 
	}
}

177 
	$w‹kî_thªad
(*
dummy
)

180 
	`waô_evít_öãºu±ibÀ
(
m‹e_w‹k
,

181 (
	`kthªad_should_°›
(Ë|| !
	`li°_em±y
(&
w‹kq
)));

183 i‡(
	`kthªad_should_°›
())

186 
	`run_w‹kqueue
();

190 
	}
}

192 
__öô
 
	$ovs_w‹kqueues_öô
()

194 
	`•ö_lock_öô
(&
wq_lock
);

195 
	`INIT_LIST_HEAD
(&
w‹kq
);

196 
	`öô_waôqueue_hód
(&
m‹e_w‹k
);

198 
w‹kq_thªad
 = 
	`kthªad_¸óã
(
w‹kî_thªad
, 
NULL
, "ovs_workq");

199 i‡(
	`IS_ERR
(
w‹kq_thªad
))

200  
	`PTR_ERR
(
w‹kq_thªad
);

202 
	`wake_up_¥o˚ss
(
w‹kq_thªad
);

204 
	}
}

206 
	$ovs_w‹kqueues_exô
()

208 
	`BUG_ON
(!
	`li°_em±y
(&
w‹kq
));

209 
	`kthªad_°›
(
w‹kq_thªad
);

210 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/kcompat.h

1 
	#HAVE_ERR_CAST
 1

	)

2 
	#HAVE_IPV4_IS_MULTICAST
 1

	)

3 
	#HAVE_DEV_DISABLE_LRO
 1

	)

4 
	#HAVE_DEV_GET_STATS
 1

	)

5 
	#HAVE_DEV_GET_BY_INDEX_RCU
 1

	)

6 
	#HAVE_RCU_READ_LOCK_HELD
 1

	)

7 
	#HAVE_SKB_DST_ACCESSOR_FUNCS
 1

	)

8 
	#HAVE_SKB_COPY_FROM_LINEAR_DATA_OFFSET
 1

	)

9 
	#HAVE_SKB_RESET_TAIL_POINTER
 1

	)

10 
	#HAVE_SKB_COW_HEAD
 1

	)

11 
	#HAVE_SKBUFF_HEADER_HELPERS
 1

	)

12 
	#HAVE_ICMP6_HDR
 1

	)

13 
	#HAVE_SKB_WARN_LRO
 1

	)

14 
	#HAVE_CONSUME_SKB
 1

	)

15 
	#HAVE_SKB_FRAG_PAGE
 1

	)

16 
	#HAVE_KMEMDUP
 1

	)

17 
	#HAVE_BOOL_TYPE
 1

	)

18 
	#HAVE_CSUM_TYPES
 1

	)

19 
	#HAVE_CSUM_REPLACE4
 1

	)

20 
	#HAVE_CSUM_UNFOLD
 1

	)

21 
	#HAVE_NLA_NUL_STRING
 1

	)

22 
	#HAVE_NLA_GET_BE16
 1

	)

23 
	#HAVE_NLA_FIND_NESTED
 1

	)

24 
	#HAVE_LOG2_H
 1

	)

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/openvswitch.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

17 c⁄° 
modvîsi⁄_öfo
 
	g____vîsi⁄s
[]

18 
__u£d


19 
__©åibuã__
((
£˘i⁄
("__versions"))) = {

203 c⁄° 
	g__moduÀ_dïíds
[]

204 
__u£d


205 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

209 
MODULE_INFO
(
§cvîsi⁄
, "E66311E274FBD9AACA42AA6");

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/liu_buffer.c

1 
	~"liu_buf„r.h
"

3 
	$ovs_liu_buf„r_öô
(
liu_buf„r
* 
buff
)

5 
i
;

6 
i
 = 0 ; i < 
MAX_LIU_BUFFER
; i++ )

7 
buff
->buff[
i
].
ö_p‹t_num
 = 0;

9 
	}
}

11 
	$ovs__liu_buf„r_öô
(
__liu_buf„r
 *
buff
, 
ö_p‹t_num
, 
max_buf„r
)

13 
i
, 
j
;

14 if(
buff
->
ö_p‹t_num
)

15 
	`ovs__liu_buf„r_‰ì
(
buff
);

16 
buff
->
ö_p‹t_num
 = in_port_num;

17 
buff
->
u£d_num
 = 0;

18 
buff
->
max_buf„r
 = max_buffer;

19 
buff
->
gíî©i⁄_id
 = (*)
	`kmÆloc
(()* 
max_buf„r
, 
GFP_KERNEL
);

20 
buff
->
Êag
 = (*)
	`kmÆloc
(()* 
max_buf„r
, 
GFP_KERNEL
);

21 
buff
->
èû
 = 0;

22 
buff
->
hód
 = (*)
	`kmÆloc
(()* 
ö_p‹t_num
, 
GFP_KERNEL
);

23 
	`mem£t
(
buff
->
Êag
, 0, ()*
max_buf„r
 );

24 
	`mem£t
(
buff
->
gíî©i⁄_id
, 0, ()*
max_buf„r
 );

25 
	`mem£t
(
buff
->
hód
, 0, ()*
ö_p‹t_num
 );

27 
buff
->
buf„r
 = (***)
	`kmÆloc
((**)*
ö_p‹t_num
, 
GFP_KERNEL
);

28 
buff
->
d©a
 = (***)
	`kmÆloc
((**)*
ö_p‹t_num
, 
GFP_KERNEL
);

29 
i
 = 0; i < 
ö_p‹t_num
 ;i++)

31 
buff
->
buf„r
[
i
] = (**)
	`kmÆloc
((*Ë* 
max_buf„r
, 
GFP_KERNEL
);

32 
j
 = 0; j < 
max_buf„r
; j++)

33 
buff
->
buf„r
[
i
][
j
] = 
NULL
;

34 
buff
->
d©a
[
i
] = (**)
	`kmÆloc
((*Ë* 
max_buf„r
, 
GFP_KERNEL
);

35 
j
 = 0; j < 
max_buf„r
; j++)

36 
buff
->
d©a
[
i
][
j
] = 
NULL
;

37 
j
 = 0; j < 
max_buf„r
; j++)

38 
buff
->
mM©rix
[
i
][
j
] = 
NULL
;

42 
	}
}

44 
	$ovs__liu_buf„r_‰ì
(
__liu_buf„r
 *
buff
)

46 
i
,
j
;

47 
i
 = 0; i < 
buff
->
ö_p‹t_num
 ;i++)

49 
j
 = 0; j < 
buff
->
max_buf„r
; j++)

51 if(
buff
->
buf„r
[
i
][
j
])

52 
	`k‰ì_skb
(
buff
->
buf„r
[
i
][
j
]);

54 
	`k‰ì
(
buff
->
buf„r
[
i
]);

55 
	`k‰ì
(
buff
->
d©a
[
i
]);

58 
	`k‰ì
(
buff
->
Êag
);

59 
	`k‰ì
(
buff
->
hód
);

60 
	`k‰ì
(
buff
->
gíî©i⁄_id
);

61 
	`k‰ì
(
buff
->
d©a
);

62 
	`k‰ì
(
buff
->
buf„r
);

63 
buff
->
ö_p‹t_num
 = 0;

64 
buff
->
max_buf„r
 = 0;

66 
	}
}

68 
uöt32_t
 
	$skb_gë_gíî©i⁄_id
(
sk_buff
 *
pk
)

70 
ùhdr
 *
ù
 = (ùhd∏*)(((*)
pk
->
d©a
Ë+Ök->
mac_Àn
);

71 
nchdr
 *
nc
 = (nchd∏*)(((*)
pk
->
d©a
Ë+Ök->
mac_Àn
 + 
ù
->
ihl
);

72  
nc
->
gíî©i⁄_id
;

73 
	}
}

75 * 
	$skb_gë_udp
(
sk_buff
 *
pk
)

77 
ùhdr
 *
ù
 = (ùhd∏*)(((*)
pk
->
d©a
Ë+Ök->
mac_Àn
);

78 
nchdr
 *
nc
 = (nchd∏*)(((*)
pk
->
d©a
Ë+Ök->
mac_Àn
 + 
ù
->
ihl
);

79  ((*)
nc
Ë+Çc->
Àn
;

80 
	}
}

82 * 
	$skb_gë_ve˘‹
(
sk_buff
 *
pk
)

84 
ùhdr
 *
ù
 = (ùhd∏*)(((*)
pk
->
d©a
Ë+Ök->
mac_Àn
);

85 
nchdr
 *
nc
 = (nchd∏*)(((*)
pk
->
d©a
Ë+Ök->
mac_Àn
 + 
ù
->
ihl
);

86  
nc
->
code_ve˘‹
;

87 
	}
}

89 
liu_buf„r_ö£π
(
liu_buf„r
 *
liubuff
,\

90 
sk_buff
 *
pk
, 
uöt8_t
 
buf„r_id
, 
id
)

92 
	gi
;

93 
__liu_buf„r
 * 
	gbuff
 = &
liubuff
->
buff
[
buf„r_id
];

94 
	ghód
 = 
buff
->
hód
[
id
];

95 
	gg_id
 = 
skb_gë_gíî©i⁄_id
(
pk
);

96 if(
	gid
 >
buff
->
ö_p‹t_num
)

98 
¥ötk
(
KERN_DEBUG
 "false id!\n");

102 if(
	gg_id
 > 
	gbuff
->
	ggíî©i⁄_id
[
hód
])

104 
	gbuff
->
	ggíî©i⁄_id
[
hód
] = 
g_id
;

106  
	gi
 = 0; i < 
	gbuff
->
	gö_p‹t_num
; i++)

108 if(
	gbuff
->
	gbuf„r
[
id
][
i
])

109 
k‰ì_skb
(
buff
->
buf„r
[
id
][
i
]);

110 
	gbuff
->
	gbuf„r
[
id
][
i
] = 
NULL
;

112 
	gbuff
->
	gÊag
[
hód
] = 0;

113 } if(
	gg_id
 < 
	gbuff
->
	ggíî©i⁄_id
[
hód
])

115 
¥ötk
(
KERN_DEBUG
 "generation id is smallÅhanÑecord!\n");

119 
	gbuff
->
	gbuf„r
[
id
][
hód
] = 
pk
;

120 
	gbuff
->
	gd©a
[
id
][
hód
] = 
skb_gë_udp
(
pk
);

121 
	gbuff
->
	gmM©rix
[
id
][
hód
] = 
skb_gë_ve˘‹
(
pk
);

122 
	gbuff
->
	gÊag
[
hód
] |(1<< 
id
);

123 
	gbuff
->
	ghód
[
id
] ++;

124 
	gbuff
->
	ghód
[
id
] = (
buff
->
hód
[id] =buff->
max_buf„r
)?buff->head[id]:0;

125 if(
	gbuff
->
	ghód
[
id
] =
buff
->
èû
)

127 
buff
->
èû
 ++;

128 
	gbuff
->
	gèû
 = (
buff
->
èû
 =buff->
max_buf„r
)?buff->tail:0;

130 if(
	gbuff
->
	gÊag
[
hód
] + 1 =1<<
buff
->
ö_p‹t_num
)

138 
ölöe
 
	$ícode
(
FIELD
* 
buff1
, FIELD* 
buff2
, 
ul⁄g
 
size
,

139 
FIELD
* 
buff1_v
, FIELD* 
buff2_v
, 
ul⁄g
 
num
,

140 
FIELD
 
ve˘‹1
, FIELD 
ve˘‹2
)

142 
	`cMulvAdd2
(
buff1
, 
buff2
, 
size
, 
ve˘‹1
, 
ve˘‹2
);

143 
	`cMulvAdd2
(
buff1_v
, 
buff2_v
, 
num
, 
ve˘‹1
, 
ve˘‹2
);

144 
	}
}

149 
	$≠≥ndM
(
__liu_buf„r
 *
buff
, 
FIELD
 *
ve˘‹
, 
num
, 
k
)

151 
ul⁄g
 
i
 = 0;

152 
Êag
 = -2;

153 
FIELD
 
tmp
 = 0;

154 
FIELD
 * 
tmpve˘‹
;

155 #ifde‡
DEBUG_NC_CODING


156 
	`¥ötk
(
KERN_INFO
 "num %d, k %d\n", 
num
, 
k
);

158 
tmpve˘‹
 = 
buff
->
tmpv
;

159 
	`mem£t
(
tmpve˘‹
,0,(
FIELD
)*
num
);

160 
i
 = 0; i < 
num
; i++)

162 
tmp
 = 
ve˘‹
[
i
];

163 if(
tmp
 == 0)

165 if(!
buff
->
mM©rix
[
k
][
i
])

167 
tmpve˘‹
[
i
] = 
	`gÁdd
—mpve˘‹[i], 
I_GF
);

168 
	`cDiv
(
ve˘‹
,
num
,
tmp
);

169 
	`cDiv
(
tmpve˘‹
,
num
,
tmp
);

170 
	`mem˝y
(
buff
->
iM©rix
[
k
][
i
], 
tmpve˘‹
, (
FIELD
Ë* 
num
);

171 
buff
->
mM©rix
[
k
][
i
] = 
ve˘‹
;

172 
buff
->
Êag
[
k
]++;

173 #ifde‡
DEBUG_NC_CODING


174 
	`¥ötk
(
KERN_INFO
 "ò%d, fœg %d, ve˘‹ = %d,%d, iM©rix = %d, %d\n",
i
 , 
buff
->
Êag
[
k
], 
ve˘‹
[0], ve˘‹[1], buff->
iM©rix
[k][i][0], buff->iMatrix[k][i][1]);

176 
Êag
 = 
i
;

179 
	`cMulvAdd
(
ve˘‹
,
buff
->
mM©rix
[
k
][
i
],
num
,
tmp
);

180 
	`cMulvAdd
(
tmpve˘‹
,
buff
->
iM©rix
[
k
][
i
],
num
,
tmp
);

184 if(
Êag
 == -2) {

185 
	`¥ötk
(
KERN_INFO
 "There isá invalid insert!\n");

188  
Êag
;

189 
	}
}

191 
	$decode
(
__liu_buf„r
 * 
buff
, 
num
, 
size
, 
k
)

193 
ul⁄g
 
i
,
j
;

194 
FIELD
 
tmp
;

196 
i
 = 
num
 -1; i > 0; i--)

198 
j
 = 
i
;

201 
j
 --;

202 
tmp
 = 
buff
->
mM©rix
[
k
][
j
][
i
];

203 
	`cMulvAdd
(
buff
->
mM©rix
[
k
][
j
], buff->mM©rix[k][
i
], 
num
, 
tmp
);

204 
	`cMulvAdd
(
buff
->
iM©rix
[
k
][
j
], buff->iM©rix[k][
i
], 
num
, 
tmp
);

205 } 
j
 != 0);

208 
i
 = 0; i < 
num
; i++)

210 
	`mem£t
(
buff
->
out
[
i
], 0 , (
FIELD
)*
size
);

211 
j
 = 0; j < 
num
; j++)

213 
	`cMulvAdd
(
buff
->
out
[
i
], buff->
d©a
[
j
][
k
], 
size
, buff->
iM©rix
[k][i][j]);

218 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/liu_buffer.h

6 #i‚de‡
LIU_BUFFER


7 
	#LIU_BUFFER


	)

9 
	~<löux/kî√l.h
>

10 
	~<löux/ty≥s.h
>

11 
	~<löux/√éök.h
>

12 
	~<löux/skbuff.h
>

13 
	~<löux/ù.h
>

14 
	~"gf256.h
"

15 
	~"m©rix.h
"

18 
	snchdr
{

19 
uöt8_t
 
	mÀn
;

20 
uöt8_t
 
	mcode_Àn
;

21 
uöt16_t
 
	m∑ckë_num
;

22 
uöt32_t
 
	mgíî©i⁄_id
;

23 
	mcode_ve˘‹
[0];

25 
	#MAX_LIU_BUFFER
 8

	)

26 
	#MAX_INPORT_NUM
 8

	)

27 
	#MAX_PACKET_NUM
 1024

	)

28 
	#MAX_CB_SIZE
 2048

	)

30 
	#uöt16_t
 

	)

31 
	tul⁄g
;

33 
FIELD
* 
mèb
;

34 
FIELD
* 
dèb
;

36 
öôMulDivTab
(* 
fûeName
);

38 #i‚de‡
gÁdd


39 
	#gÁdd
(
x
,
y
Ë((
FIELD
)(x)^(y))

	)

40 
	#gfsub
(
x
,
y
Ë((
FIELD
)(x)^(y))

	)

41 
	#gfmul
(
x
,
y
Ë((
FIELD
)(
mèb
[(x)*256+(y)]))

	)

42 
	#gfdiv
(
x
,
y
Ë((
FIELD
)(
dèb
[(x)*256+(y)]))

	)

49 
	s__liu_buf„r
 {

50 
	mö_p‹t_num
;

51 
	mu£d_num
;

52 
	mmax_buf„r
;

53 
	mèû
;

54 *
	mgíî©i⁄_id
;

55 *
	mÊag
;

56 *
	mhód
;

57 *** 
	mbuf„r
;

58 *** 
	md©a
;

59 
FIELD
 
	miM©rix
[
MAX_PACKET_NUM
][
MAX_INPORT_NUM
][MAX_INPORT_NUM];

60 
FIELD
 *
	mmM©rix
[
MAX_PACKET_NUM
][
MAX_INPORT_NUM
];

61 
FIELD
 
	mtmpv
[
MAX_INPORT_NUM
];

62 
	mout
[
MAX_INPORT_NUM
][
MAX_CB_SIZE
];

65 
	sliu_buf„r
{

66 
__liu_buf„r
 
	mbuff
[
MAX_LIU_BUFFER
];

69 
ölöe
 
	$èû_add
(
__liu_buf„r
 *
b
, 
buf„r_num
)

71 if(
b
->
èû
 =
buf„r_num
 - 1)

73 
b
->
èû
 = 0;

75 
b
->
èû
 ++;

76 
	}
}

78 
ovs_liu_buf„r_öô
(
liu_buf„r
 *);

79 
ovs__liu_buf„r_öô
(
__liu_buf„r
 *, 
ö_p‹t_num
, 
max_buf„r
);

80 
ovs__liu_buf„r_‰ì
(
__liu_buf„r
 *
buff
);

81 
liu_buf„r_ö£π
(
liu_buf„r
 *
buff
, 
sk_buff
 *
pk
, 
uöt8_t
 
buf„r_id
, 
id
);

84 
ölöe
 
ícode
(
FIELD
* 
buff1
, FIELD* 
buff2
, 
ul⁄g
 
size
,

85 
FIELD
* 
buff1_v
, FIELD* 
buff2_v
, 
ul⁄g
 
num
, FIELD 
ve˘‹1
, FIELD 
ve˘‹2
);

90 
≠≥ndM
(
__liu_buf„r
 *
buff
, 
FIELD
 *
ve˘‹
, 
num
, 
k
);

92 
decode
(
__liu_buf„r
* 
buff
, 
num
, 
size
, 
k
);

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/matrix.c

1 
	~"m©rix.h
"

3 
	$cMulvAdd2
(
FIELD
* 
vec1
,FIELD* 
vec2
,
ul⁄g
 
size
,FIELD 
ve˘‹1
, FIELD 
ve˘‹2
)

6 
ul⁄g
 
i
;

7 
i
=0;i<
size
;i++)

8 
vec1
[
i
]=
	`gÁdd
(
	`gfmul
(
ve˘‹1
,vec1[i]),gfmul(
ve˘‹2
,
vec2
[i]));

10 
	}
}

12 
	$cMulvAdd
(
FIELD
* 
vec1
,FIELD* 
vec2
,
ul⁄g
 
size
,FIELD 
c€ff
)

15 
ul⁄g
 
i
;

16 
i
=0;i<
size
;i++)

17 
vec1
[
i
]=
	`gÁdd
(vec1[i],
	`gfmul
(
c€ff
,
vec2
[i]));

19 
	}
}

21 
	$cAdd
(
FIELD
* 
vec
,
ul⁄g
 
size
,FIELD 
c€ff
)

23 
ul⁄g
 
i
;

24 
i
=0;i<
size
;i++)

25 
vec
[
i
]=
	`gÁdd
(
c€ff
,vec[i]);

27 
	}
}

29 
	$cSub
(
FIELD
* 
vec
,
ul⁄g
 
size
,FIELD 
c€ff
)

31 
ul⁄g
 
i
;

32 
i
=0;i<
size
;i++)

33 
vec
[
i
]=
	`gfsub
(
c€ff
,vec[i]);

35 
	}
}

36 
	$cMul
(
FIELD
* 
vec
,
ul⁄g
 
size
,FIELD 
c€ff
)

38 
ul⁄g
 
i
;

39 
i
=0;i<
size
;i++)

40 
vec
[
i
]=
	`gfmul
(
c€ff
,vec[i]);

42 
	}
}

43 
	$cDiv
(
FIELD
* 
vec
,
ul⁄g
 
size
,FIELD 
c€ff
)

45 
ul⁄g
 
i
;

46 
i
=0;i<
size
;i++)

47 
vec
[
i
]=
	`gfdiv
(vec[i],
c€ff
);

49 
	}
}

52 
	$vAdd
(
FIELD
* 
vec1
,FIELD* 
vec2
,
ul⁄g
 
size
)

54 
ul⁄g
 
i
;

55 
i
=0;i<
size
;i++)

56 
vec1
[
i
]=
	`gÁdd
(vec1[i],
vec2
[i]);

58 
	}
}

60 
	$idítiˇl
(
FIELD
** 
rm
,
ul⁄g
 
n1
,ul⁄g 
n2
)

62 
ul⁄g
 
i
,
j
;

63 
j
=0;j<
n1
;j++)

65 
i
=
j
;i<
n1
&&
rm
[i][j]==0;i++)

67 if(
i
==
n1
)

68  
FALSE
;

69 if(
i
!=
j
)

71 
FIELD
* 
ãmp
=
rm
[
i
];

72 
rm
[
i
]Ùm[
j
];

73 
rm
[
j
]=
ãmp
;

75 
	`cDiv
(
rm
[
j
],
n2
,rm[j][j]);

76 
i
=0;i<
n1
;i++)

78 if(
rm
[
i
][
j
]==0||i==j)

80 
	`cMulvAdd
(
rm
[
i
],rm[
j
],
n2
,
	`gfsub
(0,rm[i][j]));

83  
TRUE
;

84 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/matrix.h

8 #i‚de‡
MATRIX_H


9 
	#MATRIX_H


	)

11 
	~"gf256.h
"

14 
cAdd
(
FIELD
* 
vec
,
ul⁄g
 
size
,FIELD 
c€ff
);

15 
cSub
(
FIELD
* 
vec
,
ul⁄g
 
size
,FIELD 
c€ff
);

16 
cMul
(
FIELD
* 
vec
,
ul⁄g
 
size
,FIELD 
c€ff
);

17 
cDiv
(
FIELD
* 
vec
,
ul⁄g
 
size
,FIELD 
c€ff
);

20 
vAdd
(
FIELD
* 
vec1
,FIELD* 
vec2
,
ul⁄g
 
size
);

23 
cMulvAdd
(
FIELD
* 
vec1
,FIELD* 
vec2
,
ul⁄g
 
size
,FIELD 
c€ff
);

24 
cMulvAdd2
(
FIELD
* 
vec1
,FIELD* 
vec2
,
ul⁄g
 
size
,FIELD 
ve˘‹1
, FIELD 
ve˘‹2
);

27 
idítiˇl
(
FIELD
** 
rm
,
ul⁄g
 
n1
,ul⁄g 
n2
);

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/tunnel.c

19 
	#¥_fmt
(
fmt
Ë
KBUILD_MODNAME
 ": " 
	)
fmt

21 
	~<löux/if_¨p.h
>

22 
	~<löux/if_ëhî.h
>

23 
	~<löux/ù.h
>

24 
	~<löux/if_vœn.h
>

25 
	~<löux/igmp.h
>

26 
	~<löux/ö.h
>

27 
	~<löux/ö_rouã.h
>

28 
	~<löux/öëdevi˚.h
>

29 
	~<löux/jhash.h
>

30 
	~<löux/li°.h
>

31 
	~<löux/kî√l.h
>

32 
	~<löux/vîsi⁄.h
>

33 
	~<löux/w‹kqueue.h
>

34 
	~<löux/rculi°.h
>

36 
	~<√t/dsfõld.h
>

37 
	~<√t/d°.h
>

38 
	~<√t/icmp.h
>

39 
	~<√t/öë_e˙.h
>

40 
	~<√t/ù.h
>

41 #i‡
deföed
(
CONFIG_IPV6
Ë|| deföed(
CONFIG_IPV6_MODULE
)

42 
	~<√t/ùv6.h
>

44 
	~<√t/rouã.h
>

45 
	~<√t/x‰m.h
>

47 
	~"checksum.h
"

48 
	~"d©≠©h.h
"

49 
	~"tu¬ñ.h
"

50 
	~"vœn.h
"

51 
	~"vp‹t.h
"

52 
	~"vp‹t-gíîic.h
"

53 
	~"vp‹t-öã∫Æ_dev.h
"

55 
	#PORT_TABLE_SIZE
 1024

	)

57 
hli°_hód
 *
p‹t_èbÀ
 
	g__ªad_mo°ly
;

64 
key_loˇl_ªmŸe_p‹ts
 
	g__ªad_mo°ly
;

65 
key_ªmŸe_p‹ts
 
	g__ªad_mo°ly
;

66 
key_mu…iˇ°_p‹ts
 
	g__ªad_mo°ly
;

67 
loˇl_ªmŸe_p‹ts
 
	g__ªad_mo°ly
;

68 
ªmŸe_p‹ts
 
	g__ªad_mo°ly
;

69 
nuŒ_p‹ts
 
	g__ªad_mo°ly
;

70 
mu…iˇ°_p‹ts
 
	g__ªad_mo°ly
;

72 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,36)

73 
	#π_d°
(
π
Ë‘t->
d°
)

	)

75 
	#π_d°
(
π
Ë‘t->
u
.
d°
)

	)

78 
vp‹t
 *
	$äl_vp‹t_to_vp‹t
(c⁄° 
äl_vp‹t
 *tnl_vport)

80  
	`vp‹t_‰om_¥iv
(
äl_vp‹t
);

81 
	}
}

83 
	$‰ì_c⁄fig_rcu
(
rcu_hód
 *
rcu
)

85 
äl_muèbÀ_c⁄fig
 *
c
 = 
	`c⁄èöî_of
(
rcu
, tnl_mutable_config,Ñcu);

86 
	`k‰ì
(
c
);

87 
	}
}

93 
	$‰ì_muèbÀ_π∆
(
äl_muèbÀ_c⁄fig
 *
muèbÀ
)

95 
	`ASSERT_RTNL
();

96 i‡(
	`ùv4_is_mu…iˇ°
(
muèbÀ
->
key
.
daddr
Ë&& muèbÀ->
mlök
) {

97 
ö_devi˚
 *
ö_dev
;

98 
ö_dev
 = 
	`öëdev_by_ödex
(
	`p‹t_key_gë_√t
(&
muèbÀ
->
key
), muèbÀ->
mlök
);

99 i‡(
ö_dev
)

100 
	`ù_mc_dec_group
(
ö_dev
, 
muèbÀ
->
key
.
daddr
);

102 
	}
}

104 
	$assign_c⁄fig_rcu
(
vp‹t
 *vport,

105 
äl_muèbÀ_c⁄fig
 *
√w_c⁄fig
)

107 
äl_vp‹t
 *äl_vp‹à
	`äl_vp‹t_¥iv
(
vp‹t
);

108 
äl_muèbÀ_c⁄fig
 *
ﬁd_c⁄fig
;

110 
ﬁd_c⁄fig
 = 
	`π∆_dîe„ªn˚
(
äl_vp‹t
->
muèbÀ
);

111 
	`rcu_assign_poöãr
(
äl_vp‹t
->
muèbÀ
, 
√w_c⁄fig
);

113 
	`‰ì_muèbÀ_π∆
(
ﬁd_c⁄fig
);

114 
	`ˇŒ_rcu
(&
ﬁd_c⁄fig
->
rcu
, 
‰ì_c⁄fig_rcu
);

115 
	}
}

117 *
	$föd_p‹t_poﬁ
(c⁄° 
äl_muèbÀ_c⁄fig
 *
muèbÀ
)

119 
boﬁ
 
is_mu…iˇ°
 = 
	`ùv4_is_mu…iˇ°
(
muèbÀ
->
key
.
daddr
);

121 i‡(
muèbÀ
->
Êags
 & 
TNL_F_IN_KEY_MATCH
) {

122 i‡(
muèbÀ
->
key
.
ßddr
)

123  &
loˇl_ªmŸe_p‹ts
;

124 i‡(
is_mu…iˇ°
)

125  &
mu…iˇ°_p‹ts
;

127  &
ªmŸe_p‹ts
;

129 i‡(
muèbÀ
->
key
.
ßddr
)

130  &
key_loˇl_ªmŸe_p‹ts
;

131 i‡(
is_mu…iˇ°
)

132  &
key_mu…iˇ°_p‹ts
;

133 i‡(
muèbÀ
->
key
.
daddr
)

134  &
key_ªmŸe_p‹ts
;

136  &
nuŒ_p‹ts
;

138 
	}
}

140 
u32
 
	$p‹t_hash
(c⁄° 
p‹t_lookup_key
 *
key
)

142  
	`jhash2
((
u32
 *)
key
, (
PORT_KEY_LEN
 / (u32)), 0);

143 
	}
}

145 
hli°_hód
 *
	$föd_buckë
(
u32
 
hash
)

147  &
p‹t_èbÀ
[(
hash
 & (
PORT_TABLE_SIZE
 - 1))];

148 
	}
}

150 
	$p‹t_èbÀ_add_p‹t
(
vp‹t
 *vport)

152 
äl_vp‹t
 *äl_vp‹à
	`äl_vp‹t_¥iv
(
vp‹t
);

153 c⁄° 
äl_muèbÀ_c⁄fig
 *
muèbÀ
;

154 
u32
 
hash
;

156 
muèbÀ
 = 
	`π∆_dîe„ªn˚
(
äl_vp‹t
->mutable);

157 
hash
 = 
	`p‹t_hash
(&
muèbÀ
->
key
);

158 
	`hli°_add_hód_rcu
(&
äl_vp‹t
->
hash_node
, 
	`föd_buckë
(
hash
));

160 (*
	`föd_p‹t_poﬁ
(
	`π∆_dîe„ªn˚
(
äl_vp‹t
->
muèbÀ
)))++;

161 
	}
}

163 
	$p‹t_èbÀ_move_p‹t
(
vp‹t
 *vport,

164 
äl_muèbÀ_c⁄fig
 *
√w_muèbÀ
)

166 
äl_vp‹t
 *äl_vp‹à
	`äl_vp‹t_¥iv
(
vp‹t
);

167 
u32
 
hash
;

169 
hash
 = 
	`p‹t_hash
(&
√w_muèbÀ
->
key
);

170 
	`hli°_dñ_öô_rcu
(&
äl_vp‹t
->
hash_node
);

171 
	`hli°_add_hód_rcu
(&
äl_vp‹t
->
hash_node
, 
	`föd_buckë
(
hash
));

173 (*
	`föd_p‹t_poﬁ
(
	`π∆_dîe„ªn˚
(
äl_vp‹t
->
muèbÀ
)))--;

174 
	`assign_c⁄fig_rcu
(
vp‹t
, 
√w_muèbÀ
);

175 (*
	`föd_p‹t_poﬁ
(
	`π∆_dîe„ªn˚
(
äl_vp‹t
->
muèbÀ
)))++;

176 
	}
}

178 
	$p‹t_èbÀ_ªmove_p‹t
(
vp‹t
 *vport)

180 
äl_vp‹t
 *äl_vp‹à
	`äl_vp‹t_¥iv
(
vp‹t
);

182 
	`hli°_dñ_öô_rcu
(&
äl_vp‹t
->
hash_node
);

184 (*
	`föd_p‹t_poﬁ
(
	`π∆_dîe„ªn˚
(
äl_vp‹t
->
muèbÀ
)))--;

185 
	}
}

187 
vp‹t
 *
	$p‹t_èbÀ_lookup
(
p‹t_lookup_key
 *
key
,

188 c⁄° 
äl_muèbÀ_c⁄fig
 **
pmuèbÀ
)

190 
hli°_node
 *
n
;

191 
hli°_hód
 *
buckë
;

192 
u32
 
hash
 = 
	`p‹t_hash
(
key
);

193 
äl_vp‹t
 *tnl_vport;

195 
buckë
 = 
	`föd_buckë
(
hash
);

197 
	`hli°_f‹_óch_íåy_rcu
(
äl_vp‹t
, 
n
, 
buckë
, 
hash_node
) {

198 
äl_muèbÀ_c⁄fig
 *
muèbÀ
;

200 
muèbÀ
 = 
	`rcu_dîe„ªn˚_π∆
(
äl_vp‹t
->mutable);

201 i‡(!
	`memcmp
(&
muèbÀ
->
key
, key, 
PORT_KEY_LEN
)) {

202 *
pmuèbÀ
 = 
muèbÀ
;

203  
	`äl_vp‹t_to_vp‹t
(
äl_vp‹t
);

207  
NULL
;

208 
	}
}

210 
vp‹t
 *
	$ovs_äl_föd_p‹t
(
√t
 *√t, 
__be32
 
ßddr
, __be32 
daddr
,

211 
__be64
 
key
, 
tu¬ñ_ty≥
,

212 c⁄° 
äl_muèbÀ_c⁄fig
 **
muèbÀ
)

214 
p‹t_lookup_key
 
lookup
;

215 
vp‹t
 *vport;

216 
boﬁ
 
is_mu…iˇ°
 = 
	`ùv4_is_mu…iˇ°
(
ßddr
);

218 
	`p‹t_key_£t_√t
(&
lookup
, 
√t
);

219 
lookup
.
ßddr
 = saddr;

220 
lookup
.
daddr
 = daddr;

223 
lookup
.
ö_key
 = 
key
;

224 
lookup
.
tu¬ñ_ty≥
 =Åu¬ñ_ty≥ | 
TNL_T_KEY_EXACT
;

225 i‡(!
is_mu…iˇ°
 && 
key_loˇl_ªmŸe_p‹ts
) {

226 
vp‹t
 = 
	`p‹t_èbÀ_lookup
(&
lookup
, 
muèbÀ
);

227 i‡(
vp‹t
)

228  
vp‹t
;

230 i‡(
key_ªmŸe_p‹ts
) {

231 
lookup
.
ßddr
 = 0;

232 
vp‹t
 = 
	`p‹t_èbÀ_lookup
(&
lookup
, 
muèbÀ
);

233 i‡(
vp‹t
)

234  
vp‹t
;

236 
lookup
.
ßddr
 = saddr;

240 
lookup
.
ö_key
 = 0;

241 
lookup
.
tu¬ñ_ty≥
 =Åu¬ñ_ty≥ | 
TNL_T_KEY_MATCH
;

242 i‡(!
is_mu…iˇ°
 && 
loˇl_ªmŸe_p‹ts
) {

243 
vp‹t
 = 
	`p‹t_èbÀ_lookup
(&
lookup
, 
muèbÀ
);

244 i‡(
vp‹t
)

245  
vp‹t
;

247 i‡(
ªmŸe_p‹ts
) {

248 
lookup
.
ßddr
 = 0;

249 
vp‹t
 = 
	`p‹t_èbÀ_lookup
(&
lookup
, 
muèbÀ
);

250 i‡(
vp‹t
)

251  
vp‹t
;

254 i‡(
is_mu…iˇ°
) {

255 
lookup
.
ßddr
 = 0;

256 
lookup
.
daddr
 = 
ßddr
;

257 i‡(
key_mu…iˇ°_p‹ts
) {

258 
lookup
.
tu¬ñ_ty≥
 =Åu¬ñ_ty≥ | 
TNL_T_KEY_EXACT
;

259 
lookup
.
ö_key
 = 
key
;

260 
vp‹t
 = 
	`p‹t_èbÀ_lookup
(&
lookup
, 
muèbÀ
);

261 i‡(
vp‹t
)

262  
vp‹t
;

264 i‡(
mu…iˇ°_p‹ts
) {

265 
lookup
.
tu¬ñ_ty≥
 =Åu¬ñ_ty≥ | 
TNL_T_KEY_MATCH
;

266 
lookup
.
ö_key
 = 0;

267 
vp‹t
 = 
	`p‹t_èbÀ_lookup
(&
lookup
, 
muèbÀ
);

268 i‡(
vp‹t
)

269  
vp‹t
;

273 i‡(
nuŒ_p‹ts
) {

274 
lookup
.
daddr
 = 0;

275 
lookup
.
ßddr
 = 0;

276 
lookup
.
ö_key
 = 0;

277 
lookup
.
tu¬ñ_ty≥
 =Åunnel_type;

278 
vp‹t
 = 
	`p‹t_èbÀ_lookup
(&
lookup
, 
muèbÀ
);

279 i‡(
vp‹t
)

280  
vp‹t
;

282  
NULL
;

283 
	}
}

285 
	$e˙_deˇpsuœã
(
sk_buff
 *
skb
)

287 i‡(
	`u∆ikñy
(
	`INET_ECN_is_˚
(
	`OVS_CB
(
skb
)->
tun_key
->
ùv4_tos
))) {

288 
__be16
 
¥Ÿocﬁ
 = 
skb
->protocol;

290 
	`skb_£t_√tw‹k_hódî
(
skb
, 
ETH_HLEN
);

292 i‡(
¥Ÿocﬁ
 =
	`ht⁄s
(
ETH_P_8021Q
)) {

293 i‡(
	`u∆ikñy
(!
	`pskb_may_puŒ
(
skb
, 
VLAN_ETH_HLEN
)))

296 
¥Ÿocﬁ
 = 
	`vœn_ëh_hdr
(
skb
)->
h_vœn_íˇpsuœãd_¥Ÿo
;

297 
	`skb_£t_√tw‹k_hódî
(
skb
, 
VLAN_ETH_HLEN
);

300 i‡(
¥Ÿocﬁ
 =
	`ht⁄s
(
ETH_P_IP
)) {

301 i‡(
	`u∆ikñy
(!
	`pskb_may_puŒ
(
skb
, 
	`skb_√tw‹k_off£t
(skb)

302 + (
ùhdr
))))

305 
	`IP_ECN_£t_˚
(
	`ù_hdr
(
skb
));

307 #i‡
	`deföed
(
CONFIG_IPV6
Ë|| deföed(
CONFIG_IPV6_MODULE
)

308 i‡(
¥Ÿocﬁ
 =
	`ht⁄s
(
ETH_P_IPV6
)) {

309 i‡(
	`u∆ikñy
(!
	`pskb_may_puŒ
(
skb
, 
	`skb_√tw‹k_off£t
(skb)

310 + (
ùv6hdr
))))

313 
	`IP6_ECN_£t_˚
(
	`ùv6_hdr
(
skb
));

317 
	}
}

334 
	$ovs_äl_rcv
(
vp‹t
 *vp‹t, 
sk_buff
 *
skb
)

336 
ëhhdr
 *
eh
;

338 
	`skb_ª£t_mac_hódî
(
skb
);

339 
eh
 = 
	`ëh_hdr
(
skb
);

341 i‡(
	`likñy
(
	`¡ohs
(
eh
->
h_¥Ÿo
) >= 1536))

342 
skb
->
¥Ÿocﬁ
 = 
eh
->
h_¥Ÿo
;

344 
skb
->
¥Ÿocﬁ
 = 
	`ht⁄s
(
ETH_P_802_2
);

346 
	`skb_d°_dr›
(
skb
);

347 
	`nf_ª£t
(
skb
);

348 
	`skb_˛ór_rxhash
(
skb
);

349 
	`£˝©h_ª£t
(
skb
);

351 
	`e˙_deˇpsuœã
(
skb
);

352 
	`vœn_£t_tci
(
skb
, 0);

354 i‡(
	`u∆ikñy
(
	`compuã_ù_summed
(
skb
, 
Ál£
))) {

355 
	`k‰ì_skb
(
skb
);

359 
	`ovs_vp‹t_ª˚ive
(
vp‹t
, 
skb
);

360 
	}
}

362 
boﬁ
 
	$check_ùv4_addªss
(
__be32
 
addr
)

364 i‡(
	`ùv4_is_mu…iˇ°
(
addr
Ë|| 
	`ùv4_is_lbˇ°
(addr)

365 || 
	`ùv4_is_lo›back
(
addr
Ë|| 
	`ùv4_is_zî⁄ë
(addr))

366  
Ál£
;

368  
åue
;

369 
	}
}

371 
boﬁ
 
	$ùv4_should_icmp
(
sk_buff
 *
skb
)

373 
ùhdr
 *
ﬁd_ùh
 = 
	`ù_hdr
(
skb
);

376 i‡(
	`is_mu…iˇ°_ëhî_addr
(
	`ëh_hdr
(
skb
)->
h_de°
))

377  
Ál£
;

380 i‡(!
	`check_ùv4_addªss
(
ﬁd_ùh
->
daddr
) ||

381 !
	`check_ùv4_addªss
(
ﬁd_ùh
->
ßddr
))

382  
Ál£
;

385 i‡(
ﬁd_ùh
->
‰ag_off
 & 
	`ht⁄s
(
IP_OFFSET
))

386  
Ál£
;

389 i‡(
ﬁd_ùh
->
¥Ÿocﬁ
 =
IPPROTO_ICMP
) {

390 
u8
 
icmp_ty≥
, *
icmp_ty≥p
;

392 
icmp_ty≥p
 = 
	`skb_hódî_poöãr
(
skb
, (
u8
 *)
ﬁd_ùh
 +

393 (
ﬁd_ùh
->
ihl
 << 2) +

394 
	`off£tof
(
icmphdr
, 
ty≥
) -

395 
skb
->
d©a
, (
icmp_ty≥
),

396 &
icmp_ty≥
);

398 i‡(!
icmp_ty≥p
)

399  
Ál£
;

401 i‡(*
icmp_ty≥p
 > 
NR_ICMP_TYPES


402 || (*
icmp_ty≥p
 <
ICMP_PARAMETERPROB


403 && *
icmp_ty≥p
 !
ICMP_ECHOREPLY


404 && *
icmp_ty≥p
 !
ICMP_ECHO
))

405  
Ál£
;

408  
åue
;

409 
	}
}

411 
	$ùv4_buûd_icmp
(
sk_buff
 *
skb
, sk_buf‡*
nskb
,

412 
mtu
, 
∑ylﬂd_Àngth
)

414 
ùhdr
 *
ùh
, *
ﬁd_ùh
 = 
	`ù_hdr
(
skb
);

415 
icmphdr
 *
icmph
;

416 
u8
 *
∑ylﬂd
;

418 
ùh
 = (
ùhdr
 *)
	`skb_put
(
nskb
, (iphdr));

419 
icmph
 = (
icmphdr
 *)
	`skb_put
(
nskb
, (icmphdr));

420 
∑ylﬂd
 = 
	`skb_put
(
nskb
, 
∑ylﬂd_Àngth
);

423 
ùh
->
vîsi⁄
 = 4;

424 
ùh
->
ihl
 = (
ùhdr
) >> 2;

425 
ùh
->
tos
 = (
ﬁd_ùh
->to†& 
IPTOS_TOS_MASK
) |

426 
IPTOS_PREC_INTERNETCONTROL
;

427 
ùh
->
tŸ_Àn
 = 
	`ht⁄s
((
ùhdr
)

428 + (
icmphdr
)

429 + 
∑ylﬂd_Àngth
);

430 
	`gë_øndom_byãs
(&
ùh
->
id
, (iph->id));

431 
ùh
->
‰ag_off
 = 0;

432 
ùh
->
âl
 = 
IPDEFTTL
;

433 
ùh
->
¥Ÿocﬁ
 = 
IPPROTO_ICMP
;

434 
ùh
->
daddr
 = 
ﬁd_ùh
->
ßddr
;

435 
ùh
->
ßddr
 = 
ﬁd_ùh
->
daddr
;

437 
	`ù_£nd_check
(
ùh
);

440 
icmph
->
ty≥
 = 
ICMP_DEST_UNREACH
;

441 
icmph
->
code
 = 
ICMP_FRAG_NEEDED
;

442 
icmph
->
un
.
g©eway
 = 
	`ht⁄l
(
mtu
);

443 
icmph
->
checksum
 = 0;

445 
nskb
->
csum
 = 
	`csum_∑πül
((
u8
 *)
icmph
, (
icmphdr
), 0);

446 
nskb
->
csum
 = 
	`skb_c›y_™d_csum_bôs
(
skb
, (
u8
 *)
ﬁd_ùh
 - skb->
d©a
,

447 
∑ylﬂd
, 
∑ylﬂd_Àngth
,

448 
nskb
->
csum
);

449 
icmph
->
checksum
 = 
	`csum_fﬁd
(
nskb
->
csum
);

450 
	}
}

452 #i‡
deföed
(
CONFIG_IPV6
Ë|| deföed(
CONFIG_IPV6_MODULE
)

453 
boﬁ
 
	$ùv6_should_icmp
(
sk_buff
 *
skb
)

455 
ùv6hdr
 *
ﬁd_ùv6h
 = 
	`ùv6_hdr
(
skb
);

456 
addr_ty≥
;

457 
∑ylﬂd_off
 = (
u8
 *)(
ﬁd_ùv6h
 + 1Ë- 
skb
->
d©a
;

458 
u8
 
√xthdr
 = 
	`ùv6_hdr
(
skb
)->nexthdr;

459 
__be16
 
‰ag_off
;

462 
addr_ty≥
 = 
	`ùv6_addr_ty≥
(&
ﬁd_ùv6h
->
ßddr
);

463 i‡(
addr_ty≥
 & 
IPV6_ADDR_MULTICAST
 ||áddr_ty≥ =
IPV6_ADDR_ANY
)

464  
Ál£
;

467 i‡(
	`ùv6_addr_ty≥
(&
ﬁd_ùv6h
->
daddr
Ë=
IPV6_ADDR_ANY
)

468  
Ál£
;

471 
∑ylﬂd_off
 = 
	`ùv6_skù_exthdr
(
skb
,Öaylﬂd_off, &
√xthdr
, &
‰ag_off
);

472 i‡(
∑ylﬂd_off
 < 0)

473  
Ál£
;

475 i‡(
√xthdr
 =
NEXTHDR_ICMP
) {

476 
u8
 
icmp_ty≥
, *
icmp_ty≥p
;

478 
icmp_ty≥p
 = 
	`skb_hódî_poöãr
(
skb
, 
∑ylﬂd_off
 +

479 
	`off£tof
(
icmp6hdr
,

480 
icmp6_ty≥
),

481 (
icmp_ty≥
), &icmp_type);

483 i‡(!
icmp_ty≥p
 || !(*icmp_ty≥∞& 
ICMPV6_INFOMSG_MASK
))

484  
Ál£
;

487  
åue
;

488 
	}
}

490 
	$ùv6_buûd_icmp
(
sk_buff
 *
skb
, sk_buf‡*
nskb
,

491 
mtu
, 
∑ylﬂd_Àngth
)

493 
ùv6hdr
 *
ùv6h
, *
ﬁd_ùv6h
 = 
	`ùv6_hdr
(
skb
);

494 
icmp6hdr
 *
icmp6h
;

495 
u8
 *
∑ylﬂd
;

497 
ùv6h
 = (
ùv6hdr
 *)
	`skb_put
(
nskb
, (ipv6hdr));

498 
icmp6h
 = (
icmp6hdr
 *)
	`skb_put
(
nskb
, (icmp6hdr));

499 
∑ylﬂd
 = 
	`skb_put
(
nskb
, 
∑ylﬂd_Àngth
);

502 
ùv6h
->
vîsi⁄
 = 6;

503 
ùv6h
->
¥i‹ôy
 = 0;

504 
	`mem£t
(&
ùv6h
->
Êow_lbl
, 0, (ipv6h->flow_lbl));

505 
ùv6h
->
∑ylﬂd_Àn
 = 
	`ht⁄s
((
icmp6hdr
)

506 + 
∑ylﬂd_Àngth
);

507 
ùv6h
->
√xthdr
 = 
NEXTHDR_ICMP
;

508 
ùv6h
->
h›_limô
 = 
IPV6_DEFAULT_HOPLIMIT
;

509 
ùv6h
->
daddr
 = 
ﬁd_ùv6h
->
ßddr
;

510 
ùv6h
->
ßddr
 = 
ﬁd_ùv6h
->
daddr
;

513 
icmp6h
->
icmp6_ty≥
 = 
ICMPV6_PKT_TOOBIG
;

514 
icmp6h
->
icmp6_code
 = 0;

515 
icmp6h
->
icmp6_cksum
 = 0;

516 
icmp6h
->
icmp6_mtu
 = 
	`ht⁄l
(
mtu
);

518 
nskb
->
csum
 = 
	`csum_∑πül
((
u8
 *)
icmp6h
, (
icmp6hdr
), 0);

519 
nskb
->
csum
 = 
	`skb_c›y_™d_csum_bôs
(
skb
, (
u8
 *)
ﬁd_ùv6h
 - skb->
d©a
,

520 
∑ylﬂd
, 
∑ylﬂd_Àngth
,

521 
nskb
->
csum
);

522 
icmp6h
->
icmp6_cksum
 = 
	`csum_ùv6_magic
(&
ùv6h
->
ßddr
, &ùv6h->
daddr
,

523 (
icmp6hdr
)

524 + 
∑ylﬂd_Àngth
,

525 
ùv6h
->
√xthdr
, 
nskb
->
csum
);

526 
	}
}

529 
boﬁ
 
	$ovs_äl_‰ag_√eded
(
vp‹t
 *vport,

530 c⁄° 
äl_muèbÀ_c⁄fig
 *
muèbÀ
,

531 
sk_buff
 *
skb
, 
mtu
)

533 
ëh_hdr_Àn
 = 
ETH_HLEN
;

534 
tŸÆ_Àngth
 = 0, 
hódî_Àngth
 = 0, 
∑ylﬂd_Àngth
;

535 
ëhhdr
 *
eh
, *
ﬁd_eh
 = 
	`ëh_hdr
(
skb
);

536 
sk_buff
 *
nskb
;

539 i‡(
skb
->
¥Ÿocﬁ
 =
	`ht⁄s
(
ETH_P_IP
)) {

540 i‡(
mtu
 < 
IP_MIN_MTU
)

541  
Ál£
;

543 i‡(!
	`ùv4_should_icmp
(
skb
))

544  
åue
;

546 #i‡
	`deföed
(
CONFIG_IPV6
Ë|| deföed(
CONFIG_IPV6_MODULE
)

547 i‡(
skb
->
¥Ÿocﬁ
 =
	`ht⁄s
(
ETH_P_IPV6
)) {

548 i‡(
mtu
 < 
IPV6_MIN_MTU
)

549  
Ál£
;

555 i‡(
	`ùv6_addr_ty≥
(&
	`ùv6_hdr
(
skb
)->
daddr
Ë& 
IPV6_ADDR_MULTICAST
)

556  
Ál£
;

558 i‡(!
	`ùv6_should_icmp
(
skb
))

559  
åue
;

563  
Ál£
;

566 i‡(
ﬁd_eh
->
h_¥Ÿo
 =
	`ht⁄s
(
ETH_P_8021Q
))

567 
ëh_hdr_Àn
 = 
VLAN_ETH_HLEN
;

569 
∑ylﬂd_Àngth
 = 
skb
->
Àn
 - 
ëh_hdr_Àn
;

570 i‡(
skb
->
¥Ÿocﬁ
 =
	`ht⁄s
(
ETH_P_IP
)) {

571 
hódî_Àngth
 = (
ùhdr
Ë+ (
icmphdr
);

572 
tŸÆ_Àngth
 = 
	`mö_t
(, 
hódî_Àngth
 +

573 
∑ylﬂd_Àngth
, 576);

575 #i‡
	`deföed
(
CONFIG_IPV6
Ë|| deföed(
CONFIG_IPV6_MODULE
)

577 
hódî_Àngth
 = (
ùv6hdr
) +

578 (
icmp6hdr
);

579 
tŸÆ_Àngth
 = 
	`mö_t
(, 
hódî_Àngth
 +

580 
∑ylﬂd_Àngth
, 
IPV6_MIN_MTU
);

584 
∑ylﬂd_Àngth
 = 
tŸÆ_Àngth
 - 
hódî_Àngth
;

586 
nskb
 = 
	`dev_Æloc_skb
(
NET_IP_ALIGN
 + 
ëh_hdr_Àn
 + 
hódî_Àngth
 +

587 
∑ylﬂd_Àngth
);

588 i‡(!
nskb
)

589  
Ál£
;

591 
	`skb_ª£rve
(
nskb
, 
NET_IP_ALIGN
);

594 
eh
 = (
ëhhdr
 *)
	`skb_put
(
nskb
, 
ëh_hdr_Àn
);

595 
	`mem˝y
(
eh
->
h_de°
, 
ﬁd_eh
->
h_sour˚
, 
ETH_ALEN
);

596 
	`mem˝y
(
eh
->
h_sour˚
, 
muèbÀ
->
ëh_addr
, 
ETH_ALEN
);

597 
nskb
->
¥Ÿocﬁ
 = 
eh
->
h_¥Ÿo
 = 
ﬁd_eh
->h_proto;

598 i‡(
ﬁd_eh
->
h_¥Ÿo
 =
	`ht⁄s
(
ETH_P_8021Q
)) {

599 
vœn_ëhhdr
 *
vh
 = (vœn_ëhhd∏*)
eh
;

601 
vh
->
h_vœn_TCI
 = 
	`vœn_ëh_hdr
(
skb
)->h_vlan_TCI;

602 
vh
->
h_vœn_íˇpsuœãd_¥Ÿo
 = 
skb
->
¥Ÿocﬁ
;

604 
	`vœn_£t_tci
(
nskb
, 
	`vœn_gë_tci
(
skb
));

605 
	`skb_ª£t_mac_hódî
(
nskb
);

608 i‡(
skb
->
¥Ÿocﬁ
 =
	`ht⁄s
(
ETH_P_IP
))

609 
	`ùv4_buûd_icmp
(
skb
, 
nskb
, 
mtu
, 
∑ylﬂd_Àngth
);

610 #i‡
	`deföed
(
CONFIG_IPV6
Ë|| deföed(
CONFIG_IPV6_MODULE
)

612 
	`ùv6_buûd_icmp
(
skb
, 
nskb
, 
mtu
, 
∑ylﬂd_Àngth
);

615 i‡(
	`u∆ikñy
(
	`compuã_ù_summed
(
nskb
, 
Ál£
))) {

616 
	`k‰ì_skb
(
nskb
);

617  
Ál£
;

620 
	`ovs_vp‹t_ª˚ive
(
vp‹t
, 
nskb
);

622  
åue
;

623 
	}
}

625 
boﬁ
 
	$check_mtu
(
sk_buff
 *
skb
,

626 
vp‹t
 *vport,

627 c⁄° 
äl_muèbÀ_c⁄fig
 *
muèbÀ
,

628 c⁄° 
πabÀ
 *
π
, 
__be16
 *
‰ag_ofÂ
,

629 
tu¬ñ_hÀn
)

631 
boﬁ
 
df_öhîô
;

632 
boﬁ
 
pmtud
;

633 
__be16
 
‰ag_off
;

634 
mtu
 = 0;

635 
∑ckë_Àngth
 = 
skb
->
Àn
 - 
ETH_HLEN
;

637 i‡(
	`OVS_CB
(
skb
)->
tun_key
->
ùv4_d°
) {

638 
df_öhîô
 = 
Ál£
;

639 
pmtud
 = 
Ál£
;

640 
‰ag_off
 = 
	`OVS_CB
(
skb
)->
tun_key
->
tun_Êags
 & 
OVS_TNL_F_DONT_FRAGMENT
 ?

641 
	`ht⁄s
(
IP_DF
) : 0;

643 
df_öhîô
 = 
muèbÀ
->
Êags
 & 
TNL_F_DF_INHERIT
;

644 
pmtud
 = 
muèbÀ
->
Êags
 & 
TNL_F_PMTUD
;

645 
‰ag_off
 = 
muèbÀ
->
Êags
 & 
TNL_F_DF_DEFAULT
 ? 
	`ht⁄s
(
IP_DF
) : 0;

649 i‡(!
	`vœn_tx_èg_¥e£¡
(
skb
) &&

650 
	`ëh_hdr
(
skb
)->
h_¥Ÿo
 =
	`ht⁄s
(
ETH_P_8021Q
))

651 
∑ckë_Àngth
 -
VLAN_HLEN
;

653 i‡(
pmtud
) {

654 
vœn_hódî
 = 0;

659 i‡(
	`vœn_tx_èg_¥e£¡
(
skb
) ||

660 
	`ëh_hdr
(
skb
)->
h_¥Ÿo
 =
	`ht⁄s
(
ETH_P_8021Q
))

661 
vœn_hódî
 = 
VLAN_HLEN
;

663 
mtu
 = 
	`d°_mtu
(&
	`π_d°
(
π
))

664 - 
ETH_HLEN


665 - 
tu¬ñ_hÀn


666 - 
vœn_hódî
;

669 i‡(
skb
->
¥Ÿocﬁ
 =
	`ht⁄s
(
ETH_P_IP
)) {

670 
ùhdr
 *
ùh
 = 
	`ù_hdr
(
skb
);

672 i‡(
df_öhîô
)

673 
‰ag_off
 = 
ùh
->‰ag_of‡& 
	`ht⁄s
(
IP_DF
);

675 i‡(
pmtud
 && 
ùh
->
‰ag_off
 & 
	`ht⁄s
(
IP_DF
)) {

676 
mtu
 = 
	`max
(mtu, 
IP_MIN_MTU
);

678 i‡(
∑ckë_Àngth
 > 
mtu
 &&

679 
	`ovs_äl_‰ag_√eded
(
vp‹t
, 
muèbÀ
, 
skb
, 
mtu
))

680  
Ál£
;

683 #i‡
	`deföed
(
CONFIG_IPV6
Ë|| deföed(
CONFIG_IPV6_MODULE
)

684 i‡(
skb
->
¥Ÿocﬁ
 =
	`ht⁄s
(
ETH_P_IPV6
)) {

688 i‡(
df_öhîô
 && 
∑ckë_Àngth
 > 
IPV6_MIN_MTU
)

689 
‰ag_off
 = 
	`ht⁄s
(
IP_DF
);

691 i‡(
pmtud
) {

692 
mtu
 = 
	`max
(mtu, 
IPV6_MIN_MTU
);

694 i‡(
∑ckë_Àngth
 > 
mtu
 &&

695 
	`ovs_äl_‰ag_√eded
(
vp‹t
, 
muèbÀ
, 
skb
, 
mtu
))

696  
Ál£
;

701 *
‰ag_ofÂ
 = 
‰ag_off
;

702  
åue
;

703 
	}
}

705 
πabÀ
 *
	$föd_rouã
(
√t
 *net,

706 
__be32
 *
ßddr
, __be32 
daddr
, 
u8
 
ù¥Ÿo
,

707 
u8
 
tos
)

709 
πabÀ
 *
π
;

713 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,39)

714 
Êowi
 
Ê
 = { .
∆_u
 = { .
ù4_u
 = {

715 .
daddr
 = daddr,

716 .
ßddr
 = *saddr,

717 .
tos
 = 
	`RT_TOS
(tos) } },

718 .
¥Ÿo
 = 
ù¥Ÿo
 };

720 i‡(
	`u∆ikñy
(
	`ù_rouã_ouçut_key
(
√t
, &
π
, &
Ê
)))

721  
	`ERR_PTR
(-
EADDRNOTAVAIL
);

722 *
ßddr
 = 
Ê
.
∆_u
.
ù4_u
.saddr;

723  
π
;

725 
Êowi4
 
Ê
 = { .
daddr
 = daddr,

726 .
ßddr
 = *saddr,

727 .
Êowi4_tos
 = 
	`RT_TOS
(
tos
),

728 .
Êowi4_¥Ÿo
 = 
ù¥Ÿo
 };

730 
π
 = 
	`ù_rouã_ouçut_key
(
√t
, &
Ê
);

731 *
ßddr
 = 
Ê
.saddr;

732  
π
;

734 
	}
}

736 
boﬁ
 
	$√ed_löórize
(c⁄° 
sk_buff
 *
skb
)

738 
i
;

740 i‡(
	`u∆ikñy
(
	`skb_shöfo
(
skb
)->
‰ag_li°
))

741  
åue
;

748 
i
 = 0; i < 
	`skb_shöfo
(
skb
)->
ƒ_‰ags
; i++)

749 i‡(
	`u∆ikñy
(
	`∑ge_cou¡
(
	`skb_‰ag_∑ge
(&
	`skb_shöfo
(
skb
)->
‰ags
[
i
])) > 1))

750  
åue
;

752  
Ál£
;

753 
	}
}

755 
sk_buff
 *
	$h™dÀ_ofÊﬂds
(
sk_buff
 *
skb
,

756 c⁄° 
äl_muèbÀ_c⁄fig
 *
muèbÀ
,

757 c⁄° 
πabÀ
 *
π
,

758 
tu¬ñ_hÀn
)

760 
mö_hódroom
;

761 
îr
;

763 
mö_hódroom
 = 
	`LL_RESERVED_SPACE
(
	`π_d°
(
π
).
dev
Ë+Ñt_d°‘t).
hódî_Àn


764 + 
tu¬ñ_hÀn


765 + (
	`vœn_tx_èg_¥e£¡
(
skb
Ë? 
VLAN_HLEN
 : 0);

767 i‡(
	`skb_hódroom
(
skb
Ë< 
mö_hódroom
 || 
	`skb_hódî_˛⁄ed
(skb)) {

768 
hód_dñè
 = 
	`SKB_DATA_ALIGN
(
mö_hódroom
 -

769 
	`skb_hódroom
(
skb
) +

771 
îr
 = 
	`pskb_ex∑nd_hód
(
skb
, 
	`max_t
(, 
hód_dñè
, 0),

772 0, 
GFP_ATOMIC
);

773 i‡(
	`u∆ikñy
(
îr
))

774 
îr‹_‰ì
;

777 
	`f‹w¨d_ù_summed
(
skb
, 
åue
);

779 i‡(
	`skb_is_gso
(
skb
)) {

780 
sk_buff
 *
nskb
;

782 
nskb
 = 
	`skb_gso_£gmít
(
skb
, 0);

783 i‡(
	`IS_ERR
(
nskb
)) {

784 
	`k‰ì_skb
(
skb
);

785 
îr
 = 
	`PTR_ERR
(
nskb
);

786 
îr‹
;

789 
	`c⁄sume_skb
(
skb
);

790 
skb
 = 
nskb
;

791 } i‡(
	`gë_ù_summed
(
skb
Ë=
OVS_CSUM_PARTIAL
) {

797 i‡(
	`u∆ikñy
(
	`√ed_löórize
(
skb
))) {

798 
îr
 = 
	`__skb_löórize
(
skb
);

799 i‡(
	`u∆ikñy
(
îr
))

800 
îr‹_‰ì
;

803 
îr
 = 
	`skb_checksum_hñp
(
skb
);

804 i‡(
	`u∆ikñy
(
îr
))

805 
îr‹_‰ì
;

808 
	`£t_ù_summed
(
skb
, 
OVS_CSUM_NONE
);

810  
skb
;

812 
îr‹_‰ì
:

813 
	`k‰ì_skb
(
skb
);

814 
îr‹
:

815  
	`ERR_PTR
(
îr
);

816 
	}
}

818 
	$£nd_‰ags
(
sk_buff
 *
skb
,

819 
tu¬ñ_hÀn
)

821 
£¡_Àn
;

823 
£¡_Àn
 = 0;

824 
skb
) {

825 
sk_buff
 *
√xt
 = 
skb
->next;

826 
‰ag_Àn
 = 
skb
->
Àn
 - 
tu¬ñ_hÀn
;

827 
îr
;

829 
skb
->
√xt
 = 
NULL
;

830 
	`mem£t
(
	`IPCB
(
skb
), 0, (*IPCB(skb)));

832 
îr
 = 
	`ù_loˇl_out
(
skb
);

833 
skb
 = 
√xt
;

834 i‡(
	`u∆ikñy
(
	`√t_xmô_evÆ
(
îr
)))

835 
‰ì_‰ags
;

836 
£¡_Àn
 +
‰ag_Àn
;

839  
£¡_Àn
;

841 
‰ì_‰ags
:

847 
	`ovs_äl_‰ì_löked_skbs
(
skb
);

848  
£¡_Àn
;

849 
	}
}

851 
	$ovs_äl_£nd
(
vp‹t
 *vp‹t, 
sk_buff
 *
skb
)

853 
äl_vp‹t
 *äl_vp‹à
	`äl_vp‹t_¥iv
(
vp‹t
);

854 c⁄° 
äl_muèbÀ_c⁄fig
 *
muèbÀ
 = 
	`rcu_dîe„ªn˚
(
äl_vp‹t
->mutable);

855 
vp‹t_îr_ty≥
 
îr
 = 
VPORT_E_TX_ERROR
;

856 
πabÀ
 *
π
;

857 
ovs_key_ùv4_tu¬ñ
 
tun_key
;

858 
£¡_Àn
 = 0;

859 
tu¬ñ_hÀn
;

860 
__be16
 
‰ag_off
 = 0;

861 
__be32
 
daddr
;

862 
__be32
 
ßddr
;

863 
u8
 
âl
;

864 
u8
 
tos
;

867 i‡(
skb
->
¥Ÿocﬁ
 =
	`ht⁄s
(
ETH_P_8021Q
) &&

868 !
	`vœn_tx_èg_¥e£¡
(
skb
)) {

869 i‡(
	`u∆ikñy
(!
	`pskb_may_puŒ
(
skb
, 
VLAN_ETH_HLEN
)))

870 
îr‹_‰ì
;

872 
skb
->
¥Ÿocﬁ
 = 
	`vœn_ëh_hdr
(skb)->
h_vœn_íˇpsuœãd_¥Ÿo
;

873 
	`skb_£t_√tw‹k_hódî
(
skb
, 
VLAN_ETH_HLEN
);

876 i‡(
skb
->
¥Ÿocﬁ
 =
	`ht⁄s
(
ETH_P_IP
)) {

877 i‡(
	`u∆ikñy
(!
	`pskb_may_puŒ
(
skb
, 
	`skb_√tw‹k_off£t
(skb)

878 + (
ùhdr
))))

879 
skb
->
¥Ÿocﬁ
 = 0;

881 #i‡
	`deföed
(
CONFIG_IPV6
Ë|| deföed(
CONFIG_IPV6_MODULE
)

882 i‡(
skb
->
¥Ÿocﬁ
 =
	`ht⁄s
(
ETH_P_IPV6
)) {

883 i‡(
	`u∆ikñy
(!
	`pskb_may_puŒ
(
skb
, 
	`skb_√tw‹k_off£t
(skb)

884 + (
ùv6hdr
))))

885 
skb
->
¥Ÿocﬁ
 = 0;

892 i‡(!
	`OVS_CB
(
skb
)->
tun_key
) {

893 
	`mem£t
(&
tun_key
, 0, (tun_key));

894 
	`OVS_CB
(
skb
)->
tun_key
 = &tun_key;

897 
tu¬ñ_hÀn
 = 
äl_vp‹t
->
äl_›s
->
	`hdr_Àn
(
muèbÀ
, 
	`OVS_CB
(
skb
)->
tun_key
);

898 i‡(
	`u∆ikñy
(
tu¬ñ_hÀn
 < 0)) {

899 
îr
 = 
VPORT_E_TX_DROPPED
;

900 
îr‹_‰ì
;

902 
tu¬ñ_hÀn
 +(
ùhdr
);

904 i‡(
	`OVS_CB
(
skb
)->
tun_key
->
ùv4_d°
) {

905 
daddr
 = 
	`OVS_CB
(
skb
)->
tun_key
->
ùv4_d°
;

906 
ßddr
 = 
	`OVS_CB
(
skb
)->
tun_key
->
ùv4_§c
;

907 
tos
 = 
	`OVS_CB
(
skb
)->
tun_key
->
ùv4_tos
;

908 
âl
 = 
	`OVS_CB
(
skb
)->
tun_key
->
ùv4_âl
;

910 
u8
 
ö√r_tos
;

911 
daddr
 = 
muèbÀ
->
key
.daddr;

912 
ßddr
 = 
muèbÀ
->
key
.saddr;

914 i‡(
	`u∆ikñy
(!
daddr
)) {

917 
îr
 = 
VPORT_E_TX_DROPPED
;

918 
îr‹_‰ì
;

922 i‡(
skb
->
¥Ÿocﬁ
 =
	`ht⁄s
(
ETH_P_IP
))

923 
ö√r_tos
 = 
	`ù_hdr
(
skb
)->
tos
;

924 #i‡
	`deföed
(
CONFIG_IPV6
Ë|| deföed(
CONFIG_IPV6_MODULE
)

925 i‡(
skb
->
¥Ÿocﬁ
 =
	`ht⁄s
(
ETH_P_IPV6
))

926 
ö√r_tos
 = 
	`ùv6_gë_dsfõld
(
	`ùv6_hdr
(
skb
));

929 
ö√r_tos
 = 0;

931 i‡(
muèbÀ
->
Êags
 & 
TNL_F_TOS_INHERIT
)

932 
tos
 = 
ö√r_tos
;

934 
tos
 = 
muèbÀ
->tos;

936 
tos
 = 
	`INET_ECN_íˇpsuœã
—os, 
ö√r_tos
);

939 
âl
 = 
muèbÀ
->ttl;

940 i‡(
muèbÀ
->
Êags
 & 
TNL_F_TTL_INHERIT
) {

941 i‡(
skb
->
¥Ÿocﬁ
 =
	`ht⁄s
(
ETH_P_IP
))

942 
âl
 = 
	`ù_hdr
(
skb
)->ttl;

943 #i‡
	`deföed
(
CONFIG_IPV6
Ë|| deföed(
CONFIG_IPV6_MODULE
)

944 i‡(
skb
->
¥Ÿocﬁ
 =
	`ht⁄s
(
ETH_P_IPV6
))

945 
âl
 = 
	`ùv6_hdr
(
skb
)->
h›_limô
;

952 
π
 = 
	`föd_rouã
(
	`p‹t_key_gë_√t
(&
muèbÀ
->
key
), &
ßddr
, 
daddr
,

953 
äl_vp‹t
->
äl_›s
->
ù¥Ÿo
, 
tos
);

954 i‡(
	`IS_ERR
(
π
))

955 
îr‹_‰ì
;

958 
	`nf_ª£t
(
skb
);

959 
	`£˝©h_ª£t
(
skb
);

960 
	`skb_d°_dr›
(
skb
);

961 
	`skb_˛ór_rxhash
(
skb
);

964 
skb
 = 
	`h™dÀ_ofÊﬂds
(skb, 
muèbÀ
, 
π
, 
tu¬ñ_hÀn
);

965 i‡(
	`IS_ERR
(
skb
)) {

966 
skb
 = 
NULL
;

967 
îr_‰ì_π
;

971 i‡(
	`u∆ikñy
(!
	`check_mtu
(
skb
, 
vp‹t
, 
muèbÀ
, 
π
, &
‰ag_off
, 
tu¬ñ_hÀn
))) {

972 
îr
 = 
VPORT_E_TX_DROPPED
;

973 
îr_‰ì_π
;

977 i‡(!
	`OVS_CB
(
skb
)->
tun_key
->
ùv4_d°
) {

978 i‡(!(
muèbÀ
->
Êags
 & 
TNL_F_TTL_INHERIT
)) {

979 i‡(!
âl
)

980 
âl
 = 
	`ù4_d°_h›limô
(&
	`π_d°
(
π
));

984 
skb
) {

985 
ùhdr
 *
ùh
;

986 
sk_buff
 *
√xt_skb
 = 
skb
->
√xt
;

987 
skb
->
√xt
 = 
NULL
;

989 i‡(
	`u∆ikñy
(
	`vœn_dóc˚l_èg
(
skb
)))

990 
√xt
;

992 
	`skb_push
(
skb
, 
tu¬ñ_hÀn
);

993 
	`skb_ª£t_√tw‹k_hódî
(
skb
);

994 
	`skb_£t_å™•‹t_hódî
(
skb
, (
ùhdr
));

996 i‡(
√xt_skb
)

997 
	`skb_d°_£t
(
skb
, 
	`d°_˛⁄e
(&
	`π_d°
(
π
)));

999 
	`skb_d°_£t
(
skb
, &
	`π_d°
(
π
));

1002 
ùh
 = 
	`ù_hdr
(
skb
);

1003 
ùh
->
vîsi⁄
 = 4;

1004 
ùh
->
ihl
 = (
ùhdr
) >> 2;

1005 
ùh
->
¥Ÿocﬁ
 = 
äl_vp‹t
->
äl_›s
->
ù¥Ÿo
;

1006 
ùh
->
daddr
 = daddr;

1007 
ùh
->
ßddr
 = saddr;

1008 
ùh
->
tos
 =Åos;

1009 
ùh
->
âl
 =Åtl;

1010 
ùh
->
‰ag_off
 = frag_off;

1011 
	`ù_£À˘_idít
(
ùh
, &
	`π_d°
(
π
), 
NULL
);

1014 
skb
 = 
äl_vp‹t
->
äl_›s
->
	`buûd_hódî
(
vp‹t
, 
muèbÀ
,

1015 &
	`π_d°
(
π
), 
skb
, 
tu¬ñ_hÀn
);

1016 i‡(
	`u∆ikñy
(!
skb
))

1017 
√xt
;

1019 
£¡_Àn
 +
	`£nd_‰ags
(
skb
, 
tu¬ñ_hÀn
);

1021 
√xt
:

1022 
skb
 = 
√xt_skb
;

1025 i‡(
	`u∆ikñy
(
£¡_Àn
 == 0))

1026 
	`ovs_vp‹t_ªc‹d_îr‹
(
vp‹t
, 
VPORT_E_TX_DROPPED
);

1028  
£¡_Àn
;

1030 
îr_‰ì_π
:

1031 
	`ù_π_put
(
π
);

1032 
îr‹_‰ì
:

1033 
	`ovs_äl_‰ì_löked_skbs
(
skb
);

1034 
	`ovs_vp‹t_ªc‹d_îr‹
(
vp‹t
, 
îr
);

1035  
£¡_Àn
;

1036 
	}
}

1038 c⁄° 
∆a_pﬁicy
 
	gäl_pﬁicy
[
OVS_TUNNEL_ATTR_MAX
 + 1] = {

1039 [
OVS_TUNNEL_ATTR_FLAGS
] = { .
ty≥
 = 
NLA_U32
 },

1040 [
OVS_TUNNEL_ATTR_DST_IPV4
] = { .
ty≥
 = 
NLA_U32
 },

1041 [
OVS_TUNNEL_ATTR_SRC_IPV4
] = { .
ty≥
 = 
NLA_U32
 },

1042 [
OVS_TUNNEL_ATTR_OUT_KEY
] = { .
ty≥
 = 
NLA_U64
 },

1043 [
OVS_TUNNEL_ATTR_IN_KEY
] = { .
ty≥
 = 
NLA_U64
 },

1044 [
OVS_TUNNEL_ATTR_TOS
] = { .
ty≥
 = 
NLA_U8
 },

1045 [
OVS_TUNNEL_ATTR_TTL
] = { .
ty≥
 = 
NLA_U8
 },

1050 
	$äl_£t_c⁄fig
(
√t
 *√t, 
∆©å
 *
›ti⁄s
,

1051 c⁄° 
äl_›s
 *tnl_ops,

1052 c⁄° 
vp‹t
 *
cur_vp‹t
,

1053 
äl_muèbÀ_c⁄fig
 *
muèbÀ
)

1055 c⁄° 
vp‹t
 *
ﬁd_vp‹t
;

1056 c⁄° 
äl_muèbÀ_c⁄fig
 *
ﬁd_muèbÀ
;

1057 
∆©å
 *
a
[
OVS_TUNNEL_ATTR_MAX
 + 1];

1058 
îr
;

1060 
	`p‹t_key_£t_√t
(&
muèbÀ
->
key
, 
√t
);

1061 
muèbÀ
->
key
.
tu¬ñ_ty≥
 = 
äl_›s
->tunnel_type;

1062 i‡(!
›ti⁄s
)

1063 
out
;

1065 
îr
 = 
	`∆a_∑r£_√°ed
(
a
, 
OVS_TUNNEL_ATTR_MAX
, 
›ti⁄s
, 
äl_pﬁicy
);

1066 i‡(
îr
)

1067  
îr
;

1069 i‡(
a
[
OVS_TUNNEL_ATTR_DST_IPV4
])

1070 
muèbÀ
->
key
.
daddr
 = 
	`∆a_gë_be32
(
a
[
OVS_TUNNEL_ATTR_DST_IPV4
]);

1073 i‡(!
muèbÀ
->
key
.
daddr
)

1074 
out
;

1076 i‡(
a
[
OVS_TUNNEL_ATTR_FLAGS
])

1077 
muèbÀ
->
Êags
 = 
	`∆a_gë_u32
(
a
[
OVS_TUNNEL_ATTR_FLAGS
])

1078 & 
TNL_F_PUBLIC
;

1080 i‡(
a
[
OVS_TUNNEL_ATTR_SRC_IPV4
]) {

1081 i‡(
	`ùv4_is_mu…iˇ°
(
muèbÀ
->
key
.
daddr
))

1082  -
EINVAL
;

1083 
muèbÀ
->
key
.
ßddr
 = 
	`∆a_gë_be32
(
a
[
OVS_TUNNEL_ATTR_SRC_IPV4
]);

1086 i‡(
a
[
OVS_TUNNEL_ATTR_TOS
]) {

1087 
muèbÀ
->
tos
 = 
	`∆a_gë_u8
(
a
[
OVS_TUNNEL_ATTR_TOS
]);

1089 i‡(
muèbÀ
->
tos
 & 
INET_ECN_MASK
)

1090  -
EINVAL
;

1093 i‡(
a
[
OVS_TUNNEL_ATTR_TTL
])

1094 
muèbÀ
->
âl
 = 
	`∆a_gë_u8
(
a
[
OVS_TUNNEL_ATTR_TTL
]);

1096 i‡(!
a
[
OVS_TUNNEL_ATTR_IN_KEY
]) {

1097 
muèbÀ
->
key
.
tu¬ñ_ty≥
 |
TNL_T_KEY_MATCH
;

1098 
muèbÀ
->
Êags
 |
TNL_F_IN_KEY_MATCH
;

1100 
muèbÀ
->
key
.
tu¬ñ_ty≥
 |
TNL_T_KEY_EXACT
;

1101 
muèbÀ
->
key
.
ö_key
 = 
	`∆a_gë_be64
(
a
[
OVS_TUNNEL_ATTR_IN_KEY
]);

1104 i‡(!
a
[
OVS_TUNNEL_ATTR_OUT_KEY
])

1105 
muèbÀ
->
Êags
 |
TNL_F_OUT_KEY_ACTION
;

1107 
muèbÀ
->
out_key
 = 
	`∆a_gë_be64
(
a
[
OVS_TUNNEL_ATTR_OUT_KEY
]);

1109 
muèbÀ
->
mlök
 = 0;

1110 i‡(
	`ùv4_is_mu…iˇ°
(
muèbÀ
->
key
.
daddr
)) {

1111 
√t_devi˚
 *
dev
;

1112 
πabÀ
 *
π
;

1113 
__be32
 
ßddr
 = 
muèbÀ
->
key
.saddr;

1115 
π
 = 
	`föd_rouã
(
	`p‹t_key_gë_√t
(&
muèbÀ
->
key
),

1116 &
ßddr
, 
muèbÀ
->
key
.
daddr
,

1117 
äl_›s
->
ù¥Ÿo
, 
muèbÀ
->
tos
);

1118 i‡(
	`IS_ERR
(
π
))

1119  -
EADDRNOTAVAIL
;

1120 
dev
 = 
	`π_d°
(
π
).dev;

1121 
	`ù_π_put
(
π
);

1122 i‡(
	`__ö_dev_gë_π∆
(
dev
Ë=
NULL
)

1123  -
EADDRNOTAVAIL
;

1124 
muèbÀ
->
mlök
 = 
dev
->
ifödex
;

1125 
	`ù_mc_öc_group
(
	`__ö_dev_gë_π∆
(
dev
), 
muèbÀ
->
key
.
daddr
);

1128 
out
:

1129 
ﬁd_vp‹t
 = 
	`p‹t_èbÀ_lookup
(&
muèbÀ
->
key
, &
ﬁd_muèbÀ
);

1130 i‡(
ﬁd_vp‹t
 && old_vp‹à!
cur_vp‹t
)

1131  -
EEXIST
;

1134 
	}
}

1136 
vp‹t
 *
	$ovs_äl_¸óã
(c⁄° 
vp‹t_∑rms
 *
∑rms
,

1137 c⁄° 
vp‹t_›s
 *vport_ops,

1138 c⁄° 
äl_›s
 *tnl_ops)

1140 
vp‹t
 *vport;

1141 
äl_vp‹t
 *tnl_vport;

1142 
äl_muèbÀ_c⁄fig
 *
muèbÀ
;

1143 
öôül_‰ag_id
;

1144 
îr
;

1146 
vp‹t
 = 
	`ovs_vp‹t_Æloc
((
äl_vp‹t
), 
vp‹t_›s
, 
∑rms
);

1147 i‡(
	`IS_ERR
(
vp‹t
)) {

1148 
îr
 = 
	`PTR_ERR
(
vp‹t
);

1149 
îr‹
;

1152 
äl_vp‹t
 = 
	`äl_vp‹t_¥iv
(
vp‹t
);

1154 
	`°r˝y
(
äl_vp‹t
->
«me
, 
∑rms
->name);

1155 
äl_vp‹t
->
äl_›s
 =Ånl_ops;

1157 
muèbÀ
 = 
	`kzÆloc
((
äl_muèbÀ_c⁄fig
), 
GFP_KERNEL
);

1158 i‡(!
muèbÀ
) {

1159 
îr
 = -
ENOMEM
;

1160 
îr‹_‰ì_vp‹t
;

1163 
	`øndom_ëhî_addr
(
muèbÀ
->
ëh_addr
);

1165 
	`gë_øndom_byãs
(&
öôül_‰ag_id
, ());

1166 
	`©omic_£t
(&
äl_vp‹t
->
‰ag_id
, 
öôül_‰ag_id
);

1168 
îr
 = 
	`äl_£t_c⁄fig
(
	`ovs_dp_gë_√t
(
∑rms
->
dp
),Ö¨ms->
›ti⁄s
, 
äl_›s
,

1169 
NULL
, 
muèbÀ
);

1170 i‡(
îr
)

1171 
îr‹_‰ì_muèbÀ
;

1173 
	`rcu_assign_poöãr
(
äl_vp‹t
->
muèbÀ
, mutable);

1175 
	`p‹t_èbÀ_add_p‹t
(
vp‹t
);

1176  
vp‹t
;

1178 
îr‹_‰ì_muèbÀ
:

1179 
	`‰ì_muèbÀ_π∆
(
muèbÀ
);

1180 
	`k‰ì
(
muèbÀ
);

1181 
îr‹_‰ì_vp‹t
:

1182 
	`ovs_vp‹t_‰ì
(
vp‹t
);

1183 
îr‹
:

1184  
	`ERR_PTR
(
îr
);

1185 
	}
}

1187 
	$ovs_äl_£t_›ti⁄s
(
vp‹t
 *vp‹t, 
∆©å
 *
›ti⁄s
)

1189 
äl_vp‹t
 *äl_vp‹à
	`äl_vp‹t_¥iv
(
vp‹t
);

1190 c⁄° 
äl_muèbÀ_c⁄fig
 *
ﬁd_muèbÀ
;

1191 
äl_muèbÀ_c⁄fig
 *
muèbÀ
;

1192 
îr
;

1194 
ﬁd_muèbÀ
 = 
	`π∆_dîe„ªn˚
(
äl_vp‹t
->
muèbÀ
);

1195 i‡(!
ﬁd_muèbÀ
->
key
.
daddr
)

1196  -
EINVAL
;

1198 
muèbÀ
 = 
	`kzÆloc
((
äl_muèbÀ_c⁄fig
), 
GFP_KERNEL
);

1199 i‡(!
muèbÀ
) {

1200 
îr
 = -
ENOMEM
;

1201 
îr‹
;

1205 
muèbÀ
->
£q
 = 
ﬁd_muèbÀ
->seq + 1;

1206 
	`mem˝y
(
muèbÀ
->
ëh_addr
, 
ﬁd_muèbÀ
->ëh_addr, 
ETH_ALEN
);

1209 
îr
 = 
	`äl_£t_c⁄fig
(
	`ovs_dp_gë_√t
(
vp‹t
->
dp
), 
›ti⁄s
, 
äl_vp‹t
->
äl_›s
,

1210 
vp‹t
, 
muèbÀ
);

1211 i‡(
îr
)

1212 
îr‹_‰ì
;

1214 i‡(
	`p‹t_hash
(&
muèbÀ
->
key
Ë!p‹t_hash(&
ﬁd_muèbÀ
->key))

1215 
	`p‹t_èbÀ_move_p‹t
(
vp‹t
, 
muèbÀ
);

1217 
	`assign_c⁄fig_rcu
(
vp‹t
, 
muèbÀ
);

1221 
îr‹_‰ì
:

1222 
	`‰ì_muèbÀ_π∆
(
muèbÀ
);

1223 
	`k‰ì
(
muèbÀ
);

1224 
îr‹
:

1225  
îr
;

1226 
	}
}

1228 
	$ovs_äl_gë_›ti⁄s
(c⁄° 
vp‹t
 *vp‹t, 
sk_buff
 *
skb
)

1230 c⁄° 
äl_vp‹t
 *äl_vp‹à
	`äl_vp‹t_¥iv
(
vp‹t
);

1231 c⁄° 
äl_muèbÀ_c⁄fig
 *
muèbÀ
 = 
	`rcu_dîe„ªn˚_π∆
(
äl_vp‹t
->mutable);

1234 i‡(!
muèbÀ
->
key
.
daddr
)

1237 i‡(
	`∆a_put_be32
(
skb
, 
OVS_TUNNEL_ATTR_DST_IPV4
, 
muèbÀ
->
key
.
daddr
))

1238 
∆a_put_Áûuª
;

1239 i‡(
	`∆a_put_u32
(
skb
, 
OVS_TUNNEL_ATTR_FLAGS
,

1240 
muèbÀ
->
Êags
 & 
TNL_F_PUBLIC
))

1241 
∆a_put_Áûuª
;

1242 i‡(!(
muèbÀ
->
Êags
 & 
TNL_F_IN_KEY_MATCH
) &&

1243 
	`∆a_put_be64
(
skb
, 
OVS_TUNNEL_ATTR_IN_KEY
, 
muèbÀ
->
key
.
ö_key
))

1244 
∆a_put_Áûuª
;

1245 i‡(!(
muèbÀ
->
Êags
 & 
TNL_F_OUT_KEY_ACTION
) &&

1246 
	`∆a_put_be64
(
skb
, 
OVS_TUNNEL_ATTR_OUT_KEY
, 
muèbÀ
->
out_key
))

1247 
∆a_put_Áûuª
;

1248 i‡(
muèbÀ
->
key
.
ßddr
 &&

1249 
	`∆a_put_be32
(
skb
, 
OVS_TUNNEL_ATTR_SRC_IPV4
, 
muèbÀ
->
key
.
ßddr
))

1250 
∆a_put_Áûuª
;

1251 i‡(
muèbÀ
->
tos
 && 
	`∆a_put_u8
(
skb
, 
OVS_TUNNEL_ATTR_TOS
, mutable->tos))

1252 
∆a_put_Áûuª
;

1253 i‡(
muèbÀ
->
âl
 && 
	`∆a_put_u8
(
skb
, 
OVS_TUNNEL_ATTR_TTL
, mutable->ttl))

1254 
∆a_put_Áûuª
;

1258 
∆a_put_Áûuª
:

1259  -
EMSGSIZE
;

1260 
	}
}

1262 
	$‰ì_p‹t_rcu
(
rcu_hód
 *
rcu
)

1264 
äl_vp‹t
 *äl_vp‹à
	`c⁄èöî_of
(
rcu
,

1265 
äl_vp‹t
, 
rcu
);

1267 
	`k‰ì
((
äl_muèbÀ
 
__f‹˚
 *)
äl_vp‹t
->
muèbÀ
);

1268 
	`ovs_vp‹t_‰ì
(
	`äl_vp‹t_to_vp‹t
(
äl_vp‹t
));

1269 
	}
}

1271 
	$ovs_äl_de°roy
(
vp‹t
 *vport)

1273 
äl_vp‹t
 *äl_vp‹à
	`äl_vp‹t_¥iv
(
vp‹t
);

1274 
äl_muèbÀ_c⁄fig
 *
muèbÀ
;

1276 
muèbÀ
 = 
	`π∆_dîe„ªn˚
(
äl_vp‹t
->mutable);

1277 
	`p‹t_èbÀ_ªmove_p‹t
(
vp‹t
);

1278 
	`‰ì_muèbÀ_π∆
(
muèbÀ
);

1279 
	`ˇŒ_rcu
(&
äl_vp‹t
->
rcu
, 
‰ì_p‹t_rcu
);

1280 
	}
}

1282 
	$ovs_äl_£t_addr
(
vp‹t
 *vp‹t, c⁄° *
addr
)

1284 
äl_vp‹t
 *äl_vp‹à
	`äl_vp‹t_¥iv
(
vp‹t
);

1285 
äl_muèbÀ_c⁄fig
 *
ﬁd_muèbÀ
, *
muèbÀ
;

1287 
ﬁd_muèbÀ
 = 
	`π∆_dîe„ªn˚
(
äl_vp‹t
->
muèbÀ
);

1288 
muèbÀ
 = 
	`kmemdup
(
ﬁd_muèbÀ
, (
äl_muèbÀ_c⁄fig
), 
GFP_KERNEL
);

1289 i‡(!
muèbÀ
)

1290  -
ENOMEM
;

1292 
ﬁd_muèbÀ
->
mlök
 = 0;

1294 
	`mem˝y
(
muèbÀ
->
ëh_addr
, 
addr
, 
ETH_ALEN
);

1295 
	`assign_c⁄fig_rcu
(
vp‹t
, 
muèbÀ
);

1298 
	}
}

1300 c⁄° *
	$ovs_äl_gë_«me
(c⁄° 
vp‹t
 *vport)

1302 c⁄° 
äl_vp‹t
 *äl_vp‹à
	`äl_vp‹t_¥iv
(
vp‹t
);

1303  
äl_vp‹t
->
«me
;

1304 
	}
}

1306 c⁄° *
	$ovs_äl_gë_addr
(c⁄° 
vp‹t
 *vport)

1308 c⁄° 
äl_vp‹t
 *äl_vp‹à
	`äl_vp‹t_¥iv
(
vp‹t
);

1309  
	`rcu_dîe„ªn˚_π∆
(
äl_vp‹t
->
muèbÀ
)->
ëh_addr
;

1310 
	}
}

1312 
	$ovs_äl_‰ì_löked_skbs
(
sk_buff
 *
skb
)

1314 
skb
) {

1315 
sk_buff
 *
√xt
 = 
skb
->next;

1316 
	`k‰ì_skb
(
skb
);

1317 
skb
 = 
√xt
;

1319 
	}
}

1321 
	$ovs_äl_öô
()

1323 
i
;

1325 
p‹t_èbÀ
 = 
	`kmÆloc
(
PORT_TABLE_SIZE
 * (
hli°_hód
 *),

1326 
GFP_KERNEL
);

1327 i‡(!
p‹t_èbÀ
)

1328  -
ENOMEM
;

1330 
i
 = 0; i < 
PORT_TABLE_SIZE
; i++)

1331 
	`INIT_HLIST_HEAD
(&
p‹t_èbÀ
[
i
]);

1334 
	}
}

1336 
	$ovs_äl_exô
()

1338 
	`k‰ì
(
p‹t_èbÀ
);

1339 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/tunnel.h

19 #i‚de‡
TUNNEL_H


20 
	#TUNNEL_H
 1

	)

22 
	~<löux/vîsi⁄.h
>

23 
	~<√t/√t_«me•a˚.h
>

24 
	~<√t/√äs/gíîic.h
>

26 
	~"Êow.h
"

27 
	~"›ívswôch/tu¬ñ.h
"

28 
	~"vp‹t.h
"

34 
	#IP_MIN_MTU
 68

	)

42 
	#TNL_T_PROTO_GRE
 0

	)

43 
	#TNL_T_PROTO_GRE64
 1

	)

44 
	#TNL_T_PROTO_CAPWAP
 2

	)

47 
	#TNL_T_KEY_EXACT
 (1 << 10)

	)

48 
	#TNL_T_KEY_MATCH
 (1 << 11)

	)

51 
	#TNL_F_IN_KEY_MATCH
 (1 << 16Ë

	)

53 
	#TNL_F_OUT_KEY_ACTION
 (1 << 17Ë

	)

57 
	#TNL_F_PUBLIC
 (
TNL_F_CSUM
 | 
TNL_F_TOS_INHERIT
 | 
TNL_F_TTL_INHERIT
 | \

58 
TNL_F_DF_INHERIT
 | 
TNL_F_DF_DEFAULT
 | 
TNL_F_PMTUD
 | \

59 
TNL_F_IPSEC
)

	)

69 
	sp‹t_lookup_key
 {

70 
__be64
 
	mö_key
;

71 #ifde‡
CONFIG_NET_NS


72 
√t
 *
	m√t
;

74 
__be32
 
	mßddr
;

75 
__be32
 
	mdaddr
;

76 
u32
 
	mtu¬ñ_ty≥
;

79 
	#PORT_KEY_LEN
 (
	`off£tof
(
p‹t_lookup_key
, 
tu¬ñ_ty≥
) + \

80 
	`FIELD_SIZEOF
(
p‹t_lookup_key
, 
tu¬ñ_ty≥
))

	)

82 
ölöe
 
√t
 *
	$p‹t_key_gë_√t
(c⁄° 
p‹t_lookup_key
 *
key
)

84  
	`ªad_≤ë
(&
key
->
√t
);

85 
	}
}

87 
ölöe
 
	$p‹t_key_£t_√t
(
p‹t_lookup_key
 *
key
, 
√t
 *net)

89 
	`wrôe_≤ë
(&
key
->
√t
,Çet);

90 
	}
}

106 
	säl_muèbÀ_c⁄fig
 {

107 
p‹t_lookup_key
 
	mkey
;

108 
rcu_hód
 
	mrcu
;

110 
	m£q
;

112 
	mëh_addr
[
ETH_ALEN
];

115 
__be64
 
	mout_key
;

116 
u32
 
	mÊags
;

117 
u8
 
	mtos
;

118 
u8
 
	mâl
;

121 
	mmlök
;

124 
	säl_›s
 {

125 
u32
 
	mtu¬ñ_ty≥
;

126 
u8
 
	mù¥Ÿo
;

133 (*
	mhdr_Àn
)(c⁄° 
	mäl_muèbÀ_c⁄fig
 *,

134 c⁄° 
	movs_key_ùv4_tu¬ñ
 *);

142 
	msk_buff
 *(*
	mbuûd_hódî
)(c⁄° 
	mvp‹t
 *,

143 c⁄° 
	mäl_muèbÀ_c⁄fig
 *,

144 
	md°_íåy
 *, 
	msk_buff
 *,

145 
	mtu¬ñ_hÀn
);

148 
	säl_vp‹t
 {

149 
rcu_hód
 
	mrcu
;

150 
hli°_node
 
	mhash_node
;

152 
	m«me
[
IFNAMSIZ
];

153 c⁄° 
äl_›s
 *
	mäl_›s
;

155 
äl_muèbÀ_c⁄fig
 
__rcu
 *
	mmuèbÀ
;

162 
©omic_t
 
	m‰ag_id
;

165 
vp‹t
 *
ovs_äl_¸óã
(c⁄° 
vp‹t_∑rms
 *, c⁄° 
vp‹t_›s
 *,

166 c⁄° 
äl_›s
 *);

167 
ovs_äl_de°roy
(
vp‹t
 *);

169 
ovs_äl_£t_›ti⁄s
(
vp‹t
 *, 
∆©å
 *);

170 
ovs_äl_gë_›ti⁄s
(c⁄° 
vp‹t
 *, 
sk_buff
 *);

172 
ovs_äl_£t_addr
(
vp‹t
 *vp‹t, c⁄° *
addr
);

173 c⁄° *
ovs_äl_gë_«me
(c⁄° 
vp‹t
 *vport);

174 c⁄° *
ovs_äl_gë_addr
(c⁄° 
vp‹t
 *vport);

175 
ovs_äl_£nd
(
vp‹t
 *vp‹t, 
sk_buff
 *
skb
);

176 
ovs_äl_rcv
(
vp‹t
 *vp‹t, 
sk_buff
 *
skb
);

178 
vp‹t
 *
ovs_äl_föd_p‹t
(
√t
 *√t, 
__be32
 
ßddr
, __be32 
daddr
,

179 
__be64
 
key
, 
tu¬ñ_ty≥
,

180 c⁄° 
äl_muèbÀ_c⁄fig
 **
muèbÀ
);

181 
boﬁ
 
ovs_äl_‰ag_√eded
(
vp‹t
 *vport,

182 c⁄° 
äl_muèbÀ_c⁄fig
 *
muèbÀ
,

183 
sk_buff
 *
skb
, 
mtu
);

184 
ovs_äl_‰ì_löked_skbs
(
sk_buff
 *
skb
);

186 
ovs_äl_öô
();

187 
ovs_äl_exô
();

188 
ölöe
 
äl_vp‹t
 *
	$äl_vp‹t_¥iv
(c⁄° 
vp‹t
 *vport)

190  
	`vp‹t_¥iv
(
vp‹t
);

191 
	}
}

193 
ölöe
 
	$äl_tun_key_öô
(
ovs_key_ùv4_tu¬ñ
 *
tun_key
,

194 c⁄° 
ùhdr
 *
ùh
, 
__be64
 
tun_id
, 
u32
 
tun_Êags
)

196 
tun_key
->
tun_id
 =Åun_id;

197 
tun_key
->
ùv4_§c
 = 
ùh
->
ßddr
;

198 
tun_key
->
ùv4_d°
 = 
ùh
->
daddr
;

199 
tun_key
->
ùv4_tos
 = 
ùh
->
tos
;

200 
tun_key
->
ùv4_âl
 = 
ùh
->
âl
;

201 
tun_key
->
tun_Êags
 =Åun_flags;

204 
	`mem£t
((*Ë
tun_key
 + 
OVS_TUNNEL_KEY_SIZE
, 0,

205 (*
tun_key
Ë- 
OVS_TUNNEL_KEY_SIZE
);

206 
	}
}

208 
ölöe
 
	$äl_gë_∑øm
(c⁄° 
äl_muèbÀ_c⁄fig
 *
muèbÀ
,

209 c⁄° 
ovs_key_ùv4_tu¬ñ
 *
tun_key
,

210 
u32
 *
Êags
, 
__be64
 *
out_key
)

212 i‡(
tun_key
->
ùv4_d°
) {

213 *
Êags
 = 0;

215 i‡(
tun_key
->
tun_Êags
 & 
OVS_TNL_F_KEY
)

216 *
Êags
 = 
TNL_F_OUT_KEY_ACTION
;

217 i‡(
tun_key
->
tun_Êags
 & 
OVS_TNL_F_CSUM
)

218 *
Êags
 |
TNL_F_CSUM
;

219 *
out_key
 = 
tun_key
->
tun_id
;

221 *
Êags
 = 
muèbÀ
->flags;

222 i‡(
muèbÀ
->
Êags
 & 
TNL_F_OUT_KEY_ACTION
)

223 *
out_key
 = 
tun_key
->
tun_id
;

225 *
out_key
 = 
muèbÀ
->out_key;

227 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/vlan.c

19 
	#¥_fmt
(
fmt
Ë
KBUILD_MODNAME
 ": " 
	)
fmt

21 
	~<löux/if_vœn.h
>

22 
	~<löux/skbuff.h
>

24 
	~"d©≠©h.h
"

25 
	~"vœn.h
"

27 #ifde‡
NEED_VLAN_FIELD


28 
	$vœn_c›y_skb_tci
(
sk_buff
 *
skb
)

30 
	`OVS_CB
(
skb
)->
vœn_tci
 = 0;

31 
	}
}

33 
u16
 
	$vœn_gë_tci
(
sk_buff
 *
skb
)

35  
	`OVS_CB
(
skb
)->
vœn_tci
;

36 
	}
}

38 
	$vœn_£t_tci
(
sk_buff
 *
skb
, 
u16
 
vœn_tci
)

40 
	`OVS_CB
(
skb
)->
vœn_tci
 = vlan_tci;

41 
	}
}

43 
boﬁ
 
	$vœn_tx_èg_¥e£¡
(
sk_buff
 *
skb
)

45  
	`OVS_CB
(
skb
)->
vœn_tci
 & 
VLAN_TAG_PRESENT
;

46 
	}
}

48 
u16
 
	$vœn_tx_èg_gë
(
sk_buff
 *
skb
)

50  
	`OVS_CB
(
skb
)->
vœn_tci
 & ~
VLAN_TAG_PRESENT
;

51 
	}
}

53 
sk_buff
 *
	$__vœn_hwac˚l_put_èg
(
sk_buff
 *
skb
, 
u16
 
vœn_tci
)

55 
	`OVS_CB
(
skb
)->
vœn_tci
 = vœn_tcò| 
VLAN_TAG_PRESENT
;

56  
skb
;

57 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/vlan.h

19 #i‚de‡
VLAN_H


20 
	#VLAN_H
 1

	)

22 
	~<löux/if_vœn.h
>

23 
	~<löux/skbuff.h
>

24 
	~<löux/vîsi⁄.h
>

49 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,27)

50 
	#NEED_VLAN_FIELD


	)

53 #i‚de‡
NEED_VLAN_FIELD


54 
ölöe
 
	$vœn_c›y_skb_tci
(
sk_buff
 *
skb
Ë{ 
	}
}

56 
ölöe
 
u16
 
	$vœn_gë_tci
(
sk_buff
 *
skb
)

58 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,33)

59 i‡(
skb
->
vœn_tci
)

60  
skb
->
vœn_tci
 | 
VLAN_TAG_PRESENT
;

62  
skb
->
vœn_tci
;

63 
	}
}

65 
ölöe
 
	$vœn_£t_tci
(
sk_buff
 *
skb
, 
u16
 
vœn_tci
)

67 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,33)

68 
vœn_tci
 &~
VLAN_TAG_PRESENT
;

70 
skb
->
vœn_tci
 = vlan_tci;

71 
	}
}

73 
vœn_c›y_skb_tci
(
sk_buff
 *
skb
);

74 
u16
 
vœn_gë_tci
(
sk_buff
 *
skb
);

75 
vœn_£t_tci
(
sk_buff
 *
skb
, 
u16
 
vœn_tci
);

77 #unde‡
vœn_tx_èg_¥e£¡


78 
boﬁ
 
vœn_tx_èg_¥e£¡
(
sk_buff
 *
skb
);

80 #unde‡
vœn_tx_èg_gë


81 
u16
 
vœn_tx_èg_gë
(
sk_buff
 *
skb
);

83 
	#__vœn_hwac˚l_put_èg
 
Ωl__vœn_hwac˚l_put_èg


	)

84 
sk_buff
 *
__vœn_hwac˚l_put_èg
(sk_buf‡*
skb
, 
u16
 
vœn_tci
);

87 
ölöe
 
	$vœn_dóc˚l_èg
(
sk_buff
 *
skb
)

89 i‡(!
	`vœn_tx_èg_¥e£¡
(
skb
))

92 
skb
 = 
	`__vœn_put_èg
(skb, 
	`vœn_tx_èg_gë
(skb));

93 i‡(
	`u∆ikñy
(!
skb
))

94  -
ENOMEM
;

96 
	`vœn_£t_tci
(
skb
, 0);

98 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/vport-capwap.c

9 
	#¥_fmt
(
fmt
Ë
KBUILD_MODNAME
 ": " 
	)
fmt

11 
	~<löux/vîsi⁄.h
>

12 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,26)

14 
	~<löux/if.h
>

15 
	~<löux/ö.h
>

16 
	~<löux/ù.h
>

17 
	~<löux/li°.h
>

18 
	~<löux/√t.h
>

19 
	~<√t/√t_«me•a˚.h
>

21 
	~<√t/icmp.h
>

22 
	~<√t/öë_‰ag.h
>

23 
	~<√t/ù.h
>

24 
	~<√t/¥Ÿocﬁ.h
>

25 
	~<√t/udp.h
>

27 
	~"d©≠©h.h
"

28 
	~"tu¬ñ.h
"

29 
	~"vp‹t.h
"

30 
	~"vp‹t-gíîic.h
"

32 
	#CAPWAP_SRC_PORT
 58881

	)

33 
	#CAPWAP_DST_PORT
 58882

	)

35 
	#CAPWAP_FRAG_TIMEOUT
 (30 * 
HZ
)

	)

36 
	#CAPWAP_FRAG_MAX_MEM
 (256 * 1024)

	)

37 
	#CAPWAP_FRAG_PRUNE_MEM
 (192 * 1024)

	)

38 
	#CAPWAP_FRAG_SECRET_INTERVAL
 (10 * 60 * 
HZ
)

	)

47 
	#CAPWAP_PREAMBLE_MASK
 
	`__˝u_to_be32
(0xFF000000)

	)

48 
	#CAPWAP_HLEN_SHIFT
 17

	)

49 
	#CAPWAP_HLEN_MASK
 
	`__˝u_to_be32
(0x00F80000)

	)

50 
	#CAPWAP_RID_MASK
 
	`__˝u_to_be32
(0x0007C000)

	)

51 
	#CAPWAP_WBID_MASK
 
	`__˝u_to_be32
(0x00003E00)

	)

52 
	#CAPWAP_F_MASK
 
	`__˝u_to_be32
(0x000001FF)

	)

54 
	#CAPWAP_F_FRAG
 
	`__˝u_to_be32
(0x00000080)

	)

55 
	#CAPWAP_F_LASTFRAG
 
	`__˝u_to_be32
(0x00000040)

	)

56 
	#CAPWAP_F_WSI
 
	`__˝u_to_be32
(0x00000020)

	)

57 
	#CAPWAP_F_RMAC
 
	`__˝u_to_be32
(0x00000010)

	)

59 
	#CAPWAP_RMAC_LEN
 4

	)

66 
	#CAPWAP_WBID_30
 
	`__˝u_to_be32
(0x00003C00)

	)

67 
	#CAPWAP_WBID_2
 
	`__˝u_to_be32
(0x00000200)

	)

69 
	#FRAG_HDR
 (
CAPWAP_F_FRAG
)

	)

70 
	#FRAG_LAST_HDR
 (
FRAG_HDR
 | 
CAPWAP_F_LASTFRAG
)

	)

73 
	#CAPWAP_KEYED
 (
CAPWAP_WBID_30
 | 
CAPWAP_F_WSI
 | 
	`ht⁄l
(20 << 
CAPWAP_HLEN_SHIFT
))

	)

75 
	#CAPWAP_NO_WSI
 (
CAPWAP_WBID_2
 | 
	`ht⁄l
(8 << 
CAPWAP_HLEN_SHIFT
))

	)

78 
	#CAPWAP_ZERO_MASK
 (
CAPWAP_PREAMBLE_MASK
 | \

79 (
CAPWAP_F_MASK
 ^ (
CAPWAP_F_WSI
 | 
CAPWAP_F_FRAG
 | 
CAPWAP_F_LASTFRAG
 | 
CAPWAP_F_RMAC
)))

	)

81 
	sˇpw≠hdr
 {

82 
__be32
 
	mbegö
;

83 
__be16
 
	m‰ag_id
;

85 
__be16
 
	m‰ag_off
;

92 
	sˇpw≠hdr_wsi
 {

93 
u8
 
	mwsi_Àn
;

94 
u8
 
	mÊags
;

95 
__be16
 
	mª£rved_∑ddög
;

98 
	sˇpw≠hdr_wsi_key
 {

99 
__be64
 
	mkey
;

103 
	#CAPWAP_WSI_F_KEY64
 0x80

	)

105 
ˇpw≠hdr
 *
	$ˇpw≠_hdr
(c⁄° 
sk_buff
 *
skb
)

107  (
ˇpw≠hdr
 *)(
	`udp_hdr
(
skb
) + 1);

108 
	}
}

116 
	#FRAG_OFF_MASK
 (~0x7U)

	)

122 
	#CAPWAP_MIN_HLEN
 ((
udphdr
Ë+ (
ˇpw≠hdr
))

	)

124 
	s‰ag_m©ch
 {

125 
__be32
 
	mßddr
;

126 
__be32
 
	mdaddr
;

127 
__be16
 
	mid
;

130 
	s‰ag_queue
 {

131 
öë_‰ag_queue
 
	mifq
;

132 
‰ag_m©ch
 
	mm©ch
;

135 
	s‰ag_skb_cb
 {

136 
u16
 
	moff£t
;

138 
	#FRAG_CB
(
skb
Ë((
‰ag_skb_cb
 *)(skb)->
cb
)

	)

140 
sk_buff
 *
‰agmít
(sk_buf‡*, c⁄° 
vp‹t
 *,

141 
d°_íåy
 *
d°
, 
hÀn
);

142 
sk_buff
 *
de‰ag
(sk_buf‡*, 
boﬁ
 
‰ag_œ°
);

144 
ˇpw≠_‰ag_öô
(
öë_‰ag_queue
 *, *
m©ch
);

145 
ˇpw≠_‰ag_hash
(
öë_‰ag_queue
 *);

146 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(3,7,0)

147 
ˇpw≠_‰ag_m©ch
(
öë_‰ag_queue
 *, *
m©ch
);

149 
boﬁ
 
ˇpw≠_‰ag_m©ch
(
öë_‰ag_queue
 *, *
m©ch
);

151 
ˇpw≠_‰ag_expúe
(
ifq
);

153 
öë_‰ags
 
	g‰ag_°©e
 = {

154 .
c⁄°ru˘‹
 = 
ˇpw≠_‰ag_öô
,

155 .
	gqsize
 = (
‰ag_queue
),

156 .
	ghash‚
 = 
ˇpw≠_‰ag_hash
,

157 .
	gm©ch
 = 
ˇpw≠_‰ag_m©ch
,

158 .
	g‰ag_expúe
 = 
ˇpw≠_‰ag_expúe
,

159 .
	g£¸ë_öãrvÆ
 = 
CAPWAP_FRAG_SECRET_INTERVAL
,

162 
	$ˇpw≠_hdr_Àn
(c⁄° 
äl_muèbÀ_c⁄fig
 *
muèbÀ
,

163 c⁄° 
ovs_key_ùv4_tu¬ñ
 *
tun_key
)

165 
size
 = 
CAPWAP_MIN_HLEN
;

166 
u32
 
Êags
;

167 
__be64
 
out_key
;

169 
	`äl_gë_∑øm
(
muèbÀ
, 
tun_key
, &
Êags
, &
out_key
);

172 i‡(
Êags
 & 
TNL_F_CSUM
)

173  -
EINVAL
;

176 i‡(
out_key
 || (
Êags
 & 
TNL_F_OUT_KEY_ACTION
)) {

177 
size
 +(
ˇpw≠hdr_wsi
) +

178 (
ˇpw≠hdr_wsi_key
);

181  
size
;

182 
	}
}

184 
sk_buff
 *
	$ˇpw≠_buûd_hódî
(c⁄° 
vp‹t
 *vport,

185 c⁄° 
äl_muèbÀ_c⁄fig
 *
muèbÀ
,

186 
d°_íåy
 *
d°
,

187 
sk_buff
 *
skb
,

188 
tu¬ñ_hÀn
)

190 
ovs_key_ùv4_tu¬ñ
 *
tun_key
 = 
	`OVS_CB
(
skb
)->tun_key;

191 
udphdr
 *
udph
 = 
	`udp_hdr
(
skb
);

192 
ˇpw≠hdr
 *
cwh
 = (ˇpw≠hd∏*)(
udph
 + 1);

193 
u32
 
Êags
;

194 
__be64
 
out_key
;

196 
	`äl_gë_∑øm
(
muèbÀ
, 
tun_key
, &
Êags
, &
out_key
);

198 
udph
->
sour˚
 = 
	`ht⁄s
(
CAPWAP_SRC_PORT
);

199 
udph
->
de°
 = 
	`ht⁄s
(
CAPWAP_DST_PORT
);

200 
udph
->
check
 = 0;

202 
cwh
->
‰ag_id
 = 0;

203 
cwh
->
‰ag_off
 = 0;

205 i‡(
out_key
 || 
Êags
 & 
TNL_F_OUT_KEY_ACTION
) {

207 
ˇpw≠hdr_wsi
 *
wsi
 = (ˇpw≠hdr_wsò*)(
cwh
 + 1);

209 
cwh
->
begö
 = 
CAPWAP_KEYED
;

212 
wsi
->
wsi_Àn
 = (
ˇpw≠hdr_wsi
) - 1

213 + (
ˇpw≠hdr_wsi_key
);

214 
wsi
->
Êags
 = 
CAPWAP_WSI_F_KEY64
;

215 
wsi
->
ª£rved_∑ddög
 = 0;

217 i‡(
out_key
) {

218 
ˇpw≠hdr_wsi_key
 *
›t
 = (ˇpw≠hdr_wsi_key *)(
wsi
 + 1);

219 
›t
->
key
 = 
out_key
;

223 
cwh
->
begö
 = 
CAPWAP_NO_WSI
;

225 
udph
->
Àn
 = 
	`ht⁄s
(
skb
->À¿- 
	`skb_å™•‹t_off£t
(skb));

227 i‡(
	`u∆ikñy
(
skb
->
Àn
 - 
	`skb_√tw‹k_off£t
(skbË> 
	`d°_mtu
(
d°
))) {

228 
hÀn
 = 
	`skb_å™•‹t_off£t
(
skb
Ë+ 
	`ˇpw≠_hdr_Àn
(
muèbÀ
, 
tun_key
);

229 
skb
 = 
	`‰agmít
(skb, 
vp‹t
, 
d°
, 
hÀn
);

232  
skb
;

233 
	}
}

235 
	$¥o˚ss_ˇpw≠_wsi
(
sk_buff
 *
skb
, 
__be64
 *
key
, 
boﬁ
 *
key_¥e£¡
)

237 
ˇpw≠hdr
 *
cwh
 = 
	`ˇpw≠_hdr
(
skb
);

238 
ˇpw≠hdr_wsi
 *
wsi
;

239 
hdr_Àn
;

240 
rmac_Àn
 = 0;

241 
wsi_Àn
;

243 i‡(((
cwh
->
begö
 & 
CAPWAP_WBID_MASK
Ë!
CAPWAP_WBID_30
))

246 i‡(
cwh
->
begö
 & 
CAPWAP_F_RMAC
)

247 
rmac_Àn
 = 
CAPWAP_RMAC_LEN
;

249 
hdr_Àn
 = 
	`¡ohl
(
cwh
->
begö
 & 
CAPWAP_HLEN_MASK
Ë>> 
CAPWAP_HLEN_SHIFT
;

251 i‡(
	`u∆ikñy
((
ˇpw≠hdr
Ë+ 
rmac_Àn
 + (
ˇpw≠hdr_wsi
Ë> 
hdr_Àn
))

252  -
EINVAL
;

255 
wsi
 = (
ˇpw≠hdr_wsi
 *)((
u8
 *)(
cwh
 + 1Ë+ 
rmac_Àn
);

257 
wsi_Àn
 = 1 + 
wsi
->wsi_len;

259 i‡(
	`u∆ikñy
((
ˇpw≠hdr
Ë+ 
rmac_Àn
 + 
wsi_Àn
 !
hdr_Àn
))

260  -
EINVAL
;

262 
wsi_Àn
 -(
ˇpw≠hdr_wsi
);

264 i‡(
wsi
->
Êags
 & 
CAPWAP_WSI_F_KEY64
) {

265 
ˇpw≠hdr_wsi_key
 *
›t
;

267 i‡(
	`u∆ikñy
(
wsi_Àn
 < (
ˇpw≠hdr_wsi_key
)))

268  -
EINVAL
;

270 
›t
 = (
ˇpw≠hdr_wsi_key
 *)(
wsi
 + 1);

271 *
key
 = 
›t
->key;

272 *
key_¥e£¡
 = 
åue
;

274 *
key_¥e£¡
 = 
Ál£
;

278 
	}
}

280 
sk_buff
 *
	$¥o˚ss_ˇpw≠_¥Ÿo
(
sk_buff
 *
skb
, 
__be64
 *
key
, 
boﬁ
 *
key_¥e£¡
)

282 
ˇpw≠hdr
 *
cwh
 = 
	`ˇpw≠_hdr
(
skb
);

283 
hdr_Àn
 = (
udphdr
);

285 i‡(
	`u∆ikñy
((
cwh
->
begö
 & 
CAPWAP_ZERO_MASK
) != 0))

286 
îr‹
;

288 
hdr_Àn
 +
	`¡ohl
(
cwh
->
begö
 & 
CAPWAP_HLEN_MASK
Ë>> 
CAPWAP_HLEN_SHIFT
;

289 i‡(
	`u∆ikñy
(
hdr_Àn
 < 
CAPWAP_MIN_HLEN
))

290 
îr‹
;

292 i‡(
	`u∆ikñy
(!
	`pskb_may_puŒ
(
skb
, 
hdr_Àn
 + 
ETH_HLEN
)))

293 
îr‹
;

295 
cwh
 = 
	`ˇpw≠_hdr
(
skb
);

296 
	`__skb_puŒ
(
skb
, 
hdr_Àn
);

297 
	`skb_po°puŒ_rcsum
(
skb
, 
	`skb_å™•‹t_hódî
(skb), 
hdr_Àn
 + 
ETH_HLEN
);

299 i‡(
cwh
->
begö
 & 
CAPWAP_F_FRAG
) {

300 
skb
 = 
	`de‰ag
(skb, (
__f‹˚
 
boﬁ
)(
cwh
->
begö
 & 
CAPWAP_F_LASTFRAG
));

301 i‡(!
skb
)

302  
NULL
;

303 
cwh
 = 
	`ˇpw≠_hdr
(
skb
);

306 i‡((
cwh
->
begö
 & 
CAPWAP_F_WSI
Ë&& 
	`¥o˚ss_ˇpw≠_wsi
(
skb
, 
key
, 
key_¥e£¡
))

307 
îr‹
;

309  
skb
;

310 
îr‹
:

311 
	`k‰ì_skb
(
skb
);

312  
NULL
;

313 
	}
}

316 
	$ˇpw≠_rcv
(
sock
 *
sk
, 
sk_buff
 *
skb
)

318 
vp‹t
 *vport;

319 c⁄° 
äl_muèbÀ_c⁄fig
 *
muèbÀ
;

320 
ùhdr
 *
ùh
;

321 
ovs_key_ùv4_tu¬ñ
 
tun_key
;

322 
__be64
 
key
 = 0;

323 
boﬁ
 
key_¥e£¡
 = 
Ál£
;

325 i‡(
	`u∆ikñy
(!
	`pskb_may_puŒ
(
skb
, 
CAPWAP_MIN_HLEN
 + 
ETH_HLEN
)))

326 
îr‹
;

328 
skb
 = 
	`¥o˚ss_ˇpw≠_¥Ÿo
(skb, &
key
, &
key_¥e£¡
);

329 i‡(
	`u∆ikñy
(!
skb
))

330 
out
;

332 
ùh
 = 
	`ù_hdr
(
skb
);

333 
vp‹t
 = 
	`ovs_äl_föd_p‹t
(
	`sock_√t
(
sk
), 
ùh
->
daddr
, iph->
ßddr
, 
key
,

334 
TNL_T_PROTO_CAPWAP
, &
muèbÀ
);

335 i‡(
	`u∆ikñy
(!
vp‹t
))

336 
îr‹
;

338 i‡(
key_¥e£¡
 && 
muèbÀ
->
key
.
daddr
 &&

339 !(
muèbÀ
->
Êags
 & 
TNL_F_IN_KEY_MATCH
)) {

340 
key_¥e£¡
 = 
Ál£
;

341 
key
 = 0;

344 
	`äl_tun_key_öô
(&
tun_key
, 
ùh
, 
key
, 
key_¥e£¡
 ? 
OVS_TNL_F_KEY
 : 0);

345 
	`OVS_CB
(
skb
)->
tun_key
 = &tun_key;

347 
	`ovs_äl_rcv
(
vp‹t
, 
skb
);

348 
out
;

350 
îr‹
:

351 
	`k‰ì_skb
(
skb
);

352 
out
:

354 
	}
}

356 c⁄° 
äl_›s
 
	gˇpw≠_äl_›s
 = {

357 .
tu¬ñ_ty≥
 = 
TNL_T_PROTO_CAPWAP
,

358 .
	gù¥Ÿo
 = 
IPPROTO_UDP
,

359 .
	ghdr_Àn
 = 
ˇpw≠_hdr_Àn
,

360 .
	gbuûd_hódî
 = 
ˇpw≠_buûd_hódî
,

363 
ölöe
 
ˇpw≠_√t
 *
	$ovs_gë_ˇpw≠_√t
(
√t
 *net)

365 
ovs_√t
 *ovs_√à
	`√t_gíîic
(
√t
, 
ovs_√t_id
);

366  &
ovs_√t
->
vp‹t_√t
.
ˇpw≠
;

367 
	}
}

370 
	#UDP_ENCAP_CAPWAP
 10

	)

371 
	$öô_sockë
(
√t
 *net)

373 
îr
;

374 
ˇpw≠_√t
 *ˇpw≠_√à
	`ovs_gë_ˇpw≠_√t
(
√t
);

375 
sockaddr_ö
 
sö
;

377 i‡(
ˇpw≠_√t
->
n_tu¬ñs
) {

378 
ˇpw≠_√t
->
n_tu¬ñs
++;

382 
îr
 = 
	`sock_¸óã_kîn
(
AF_INET
, 
SOCK_DGRAM
, 0,

383 &
ˇpw≠_√t
->
ˇpw≠_rcv_sockë
);

384 i‡(
îr
)

385 
îr‹
;

388 
	`sk_ch™ge_√t
(
ˇpw≠_√t
->
ˇpw≠_rcv_sockë
->
sk
, 
√t
);

390 
sö
.
sö_Ámûy
 = 
AF_INET
;

391 
sö
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

392 
sö
.
sö_p‹t
 = 
	`ht⁄s
(
CAPWAP_DST_PORT
);

394 
îr
 = 
	`kî√l_böd
(
ˇpw≠_√t
->
ˇpw≠_rcv_sockë
,

395 (
sockaddr
 *)&
sö
,

396 (
sockaddr_ö
));

397 i‡(
îr
)

398 
îr‹_sock
;

400 
	`udp_sk
(
ˇpw≠_√t
->
ˇpw≠_rcv_sockë
->
sk
)->
íˇp_ty≥
 = 
UDP_ENCAP_CAPWAP
;

401 
	`udp_sk
(
ˇpw≠_√t
->
ˇpw≠_rcv_sockë
->
sk
)->
íˇp_rcv
 = 
ˇpw≠_rcv
;

403 
ˇpw≠_√t
->
‰ag_°©e
.
timeout
 = 
CAPWAP_FRAG_TIMEOUT
;

404 
ˇpw≠_√t
->
‰ag_°©e
.
high_thªsh
 = 
CAPWAP_FRAG_MAX_MEM
;

405 
ˇpw≠_√t
->
‰ag_°©e
.
low_thªsh
 = 
CAPWAP_FRAG_PRUNE_MEM
;

407 
	`öë_‰ags_öô_√t
(&
ˇpw≠_√t
->
‰ag_°©e
);

408 
	`udp_íˇp_íabÀ
();

409 
ˇpw≠_√t
->
n_tu¬ñs
++;

412 
îr‹_sock
:

413 
	`sk_ªÀa£_kî√l
(
ˇpw≠_√t
->
ˇpw≠_rcv_sockë
->
sk
);

414 
îr‹
:

415 
	`¥_w¨n
("ˇ¬ŸÑegi°î c≠w≠ÖrŸocﬁ h™dÀ∏: %d\n", 
îr
);

416  
îr
;

417 
	}
}

419 
	$ªÀa£_sockë
(
√t
 *net)

421 
ˇpw≠_√t
 *ˇpw≠_√à
	`ovs_gë_ˇpw≠_√t
(
√t
);

423 
ˇpw≠_√t
->
n_tu¬ñs
--;

424 i‡(
ˇpw≠_√t
->
n_tu¬ñs
)

427 
	`öë_‰ags_exô_√t
(&
ˇpw≠_√t
->
‰ag_°©e
, &frag_state);

428 
	`sk_ªÀa£_kî√l
(
ˇpw≠_√t
->
ˇpw≠_rcv_sockë
->
sk
);

429 
	}
}

431 
vp‹t
 *
	$ˇpw≠_¸óã
(c⁄° 
vp‹t_∑rms
 *
∑rms
)

433 
vp‹t
 *vport;

434 
îr
;

436 
îr
 = 
	`öô_sockë
(
	`ovs_dp_gë_√t
(
∑rms
->
dp
));

437 i‡(
îr
)

438  
	`ERR_PTR
(
îr
);

440 
vp‹t
 = 
	`ovs_äl_¸óã
(
∑rms
, &
ovs_ˇpw≠_vp‹t_›s
, &
ˇpw≠_äl_›s
);

441 i‡(
	`IS_ERR
(
vp‹t
))

442 
	`ªÀa£_sockë
(
	`ovs_dp_gë_√t
(
∑rms
->
dp
));

444  
vp‹t
;

445 
	}
}

447 
	$ˇpw≠_de°roy
(
vp‹t
 *vport)

449 
	`ovs_äl_de°roy
(
vp‹t
);

450 
	`ªÀa£_sockë
(
	`ovs_dp_gë_√t
(
vp‹t
->
dp
));

451 
	}
}

453 
	$ˇpw≠_öô
()

455 
	`öë_‰ags_öô
(&
‰ag_°©e
);

457 
	}
}

459 
	$ˇpw≠_exô
()

461 
	`öë_‰ags_föi
(&
‰ag_°©e
);

462 
	}
}

464 
	$c›y_skb_mëad©a
(
sk_buff
 *
‰om
, sk_buf‡*
to
)

466 
to
->
pkt_ty≥
 = 
‰om
->pkt_type;

467 
to
->
¥i‹ôy
 = 
‰om
->priority;

468 
to
->
¥Ÿocﬁ
 = 
‰om
->protocol;

469 
	`skb_d°_£t
(
to
, 
	`d°_˛⁄e
(
	`skb_d°
(
‰om
)));

470 
to
->
dev
 = 
‰om
->dev;

471 
to
->
m¨k
 = 
‰om
->mark;

473 i‡(
‰om
->
sk
)

474 
	`skb_£t_ow√r_w
(
to
, 
‰om
->
sk
);

476 #ifde‡
CONFIG_NET_SCHED


477 
to
->
tc_ödex
 = 
‰om
->tc_index;

479 #i‡
	`deföed
(
CONFIG_IP_VS
Ë|| deföed(
CONFIG_IP_VS_MODULE
)

480 
to
->
ùvs_¥›îty
 = 
‰om
->ipvs_property;

482 
	`skb_c›y_£cm¨k
(
to
, 
‰om
);

483 
	}
}

485 
sk_buff
 *
	$‰agmít
(
sk_buff
 *
skb
, c⁄° 
vp‹t
 *vport,

486 
d°_íåy
 *
d°
, 
hÀn
)

488 
äl_vp‹t
 *äl_vp‹à
	`äl_vp‹t_¥iv
(
vp‹t
);

489 
hódroom
;

490 
max_‰ame_Àn
 = 
	`d°_mtu
(
d°
Ë+ 
	`skb_√tw‹k_off£t
(
skb
);

491 
sk_buff
 *
ªsu…
 = 
NULL
, *
li°_cur
 = NULL;

492 
ªmaöög
;

493 
off£t
;

494 
__be16
 
‰ag_id
;

496 i‡(
hÀn
 + ~
FRAG_OFF_MASK
 + 1 > 
max_‰ame_Àn
) {

497 i‡(
	`√t_øãlimô
())

498 
	`¥_w¨n
("capwapÜink mtu (%d) isÜessÅhan minimumÖacket (%d)\n",

499 
	`d°_mtu
(
d°
),

500 
hÀn
 - 
	`skb_√tw‹k_off£t
(
skb
Ë+ ~
FRAG_OFF_MASK
 + 1);

501 
îr‹
;

504 
ªmaöög
 = 
skb
->
Àn
 - 
hÀn
;

505 
off£t
 = 0;

506 
‰ag_id
 = 
	`ht⁄s
(
	`©omic_öc_ªtu∫
(&
äl_vp‹t
->frag_id));

508 
hódroom
 = 
d°
->
hódî_Àn
 + 16;

509 i‡(!
	`skb_√tw‹k_off£t
(
skb
))

510 
hódroom
 +
	`LL_RESERVED_SPACE
(
d°
->
dev
);

512 
ªmaöög
) {

513 
sk_buff
 *
skb2
;

514 
‰ag_size
;

515 
udphdr
 *
udph
;

516 
ˇpw≠hdr
 *
cwh
;

518 
‰ag_size
 = 
	`mö
(
ªmaöög
, 
max_‰ame_Àn
 - 
hÀn
);

519 i‡(
ªmaöög
 > 
‰ag_size
)

520 
‰ag_size
 &
FRAG_OFF_MASK
;

522 
skb2
 = 
	`Æloc_skb
(
hódroom
 + 
hÀn
 + 
‰ag_size
, 
GFP_ATOMIC
);

523 i‡(!
skb2
)

524 
îr‹
;

526 
	`skb_ª£rve
(
skb2
, 
hódroom
);

527 
	`__skb_put
(
skb2
, 
hÀn
 + 
‰ag_size
);

529 i‡(
	`skb_√tw‹k_off£t
(
skb
))

530 
	`skb_ª£t_mac_hódî
(
skb2
);

531 
	`skb_£t_√tw‹k_hódî
(
skb2
, 
	`skb_√tw‹k_off£t
(
skb
));

532 
	`skb_£t_å™•‹t_hódî
(
skb2
, 
	`skb_å™•‹t_off£t
(
skb
));

535 
	`c›y_skb_mëad©a
(
skb
, 
skb2
);

536 
	`skb_c›y_‰om_löór_d©a
(
skb
, 
skb2
->
d©a
, 
hÀn
);

539 i‡(
	`skb_c›y_bôs
(
skb
, 
hÀn
 + 
off£t
, 
skb2
->
d©a
 + hÀn, 
‰ag_size
))

540 
	`BUG
();

542 
udph
 = 
	`udp_hdr
(
skb2
);

543 
udph
->
Àn
 = 
	`ht⁄s
(
skb2
->À¿- 
	`skb_å™•‹t_off£t
(skb2));

545 
cwh
 = 
	`ˇpw≠_hdr
(
skb2
);

546 i‡(
ªmaöög
 > 
‰ag_size
)

547 
cwh
->
begö
 |
FRAG_HDR
;

549 
cwh
->
begö
 |
FRAG_LAST_HDR
;

550 
cwh
->
‰ag_id
 = frag_id;

551 
cwh
->
‰ag_off
 = 
	`ht⁄s
(
off£t
);

553 i‡(
ªsu…
) {

554 
li°_cur
->
√xt
 = 
skb2
;

555 
li°_cur
 = 
skb2
;

557 
ªsu…
 = 
li°_cur
 = 
skb2
;

559 
off£t
 +
‰ag_size
;

560 
ªmaöög
 -
‰ag_size
;

563 
	`c⁄sume_skb
(
skb
);

564  
ªsu…
;

566 
îr‹
:

567 
	`ovs_äl_‰ì_löked_skbs
(
ªsu…
);

568 
	`k‰ì_skb
(
skb
);

569  
NULL
;

570 
	}
}

574 
‰ag_queue
 *
	$ifq_ˇ°
(
öë_‰ag_queue
 *
ifq
)

576  
	`c⁄èöî_of
(
ifq
, 
‰ag_queue
, ifq);

577 
	}
}

579 
u32
 
	$‰ag_hash
(
‰ag_m©ch
 *
m©ch
)

581  
	`jhash_3w‹ds
((
__f‹˚
 
u16
)
m©ch
->
id
, (__f‹˚ 
u32
)m©ch->
ßddr
,

582 (
__f‹˚
 
u32
)
m©ch
->
daddr
,

583 
‰ag_°©e
.
∫d
Ë& (
INETFRAGS_HASHSZ
 - 1);

584 
	}
}

586 
‰ag_queue
 *
	$queue_föd
(
√äs_‰ags
 *
ns_‰ag_°©e
,

587 
‰ag_m©ch
 *
m©ch
)

589 
öë_‰ag_queue
 *
ifq
;

591 
	`ªad_lock
(&
‰ag_°©e
.
lock
);

593 
ifq
 = 
	`öë_‰ag_föd
(
ns_‰ag_°©e
, &
‰ag_°©e
, 
m©ch
, 
	`‰ag_hash
(match));

594 i‡(!
ifq
)

595  
NULL
;

599  
	`ifq_ˇ°
(
ifq
);

600 
	}
}

602 
sk_buff
 *
	$‰ag_ªasm
(
‰ag_queue
 *
fq
, 
√t_devi˚
 *
dev
)

604 
sk_buff
 *
hód
 = 
fq
->
ifq
.
‰agmíts
;

605 
sk_buff
 *
‰ag
;

608 
	`öë_‰ag_kûl
(&
fq
->
ifq
, &
‰ag_°©e
);

610 i‡(
fq
->
ifq
.
Àn
 > 65535)

611  
NULL
;

614 i‡(
	`skb_˛⁄ed
(
hód
Ë&& 
	`pskb_ex∑nd_hód
(hód, 0, 0, 
GFP_ATOMIC
))

615  
NULL
;

621 i‡(
	`skb_shöfo
(
hód
)->
‰ag_li°
) {

622 
i
;

623 
∑ged_Àn
 = 0;

625 
‰ag
 = 
	`Æloc_skb
(0, 
GFP_ATOMIC
);

626 i‡(!
‰ag
)

627  
NULL
;

629 
‰ag
->
√xt
 = 
hód
->next;

630 
hód
->
√xt
 = 
‰ag
;

631 
	`skb_shöfo
(
‰ag
)->
‰ag_li°
 = skb_shöfo(
hód
)->frag_list;

632 
	`skb_shöfo
(
hód
)->
‰ag_li°
 = 
NULL
;

634 
i
 = 0; i < 
	`skb_shöfo
(
hód
)->
ƒ_‰ags
; i++)

635 
∑ged_Àn
 +
	`skb_shöfo
(
hód
)->
‰ags
[
i
].
size
;

636 
‰ag
->
Àn
 = føg->
d©a_Àn
 = 
hód
->d©a_À¿- 
∑ged_Àn
;

637 
hód
->
d©a_Àn
 -
‰ag
->
Àn
;

638 
hód
->
Àn
 -
‰ag
->len;

640 
‰ag
->
ù_summed
 = 
hód
->ip_summed;

641 
	`©omic_add
(
‰ag
->
åuesize
, &
fq
->
ifq
.
√t
->
mem
);

644 
	`skb_shöfo
(
hód
)->
‰ag_li°
 = hód->
√xt
;

645 
	`©omic_sub
(
hód
->
åuesize
, &
fq
->
ifq
.
√t
->
mem
);

648 
‰ag
 = 
hód
->
√xt
; frag; frag = frag->next) {

649 
hód
->
d©a_Àn
 +
‰ag
->
Àn
;

650 
hód
->
Àn
 +
‰ag
->len;

652 i‡(
hód
->
ù_summed
 !
‰ag
->ip_summed)

653 
hód
->
ù_summed
 = 
CHECKSUM_NONE
;

654 i‡(
hód
->
ù_summed
 =
CHECKSUM_COMPLETE
)

655 
hód
->
csum
 = 
	`csum_add
(hód->csum, 
‰ag
->csum);

657 
hód
->
åuesize
 +
‰ag
->truesize;

658 
	`©omic_sub
(
‰ag
->
åuesize
, &
fq
->
ifq
.
√t
->
mem
);

661 
hód
->
√xt
 = 
NULL
;

662 
hód
->
dev
 = dev;

663 
hód
->
t°amp
 = 
fq
->
ifq
.
°amp
;

664 
fq
->
ifq
.
‰agmíts
 = 
NULL
;

666  
hód
;

667 
	}
}

669 
sk_buff
 *
	$‰ag_queue
(
‰ag_queue
 *
fq
, 
sk_buff
 *
skb
,

670 
u16
 
off£t
, 
boﬁ
 
‰ag_œ°
)

672 
sk_buff
 *
¥ev
, *
√xt
;

673 
√t_devi˚
 *
dev
;

674 
íd
;

676 i‡(
fq
->
ifq
.
œ°_ö
 & 
INET_FRAG_COMPLETE
)

677 
îr‹
;

679 i‡(!
skb
->
Àn
)

680 
îr‹
;

682 
íd
 = 
off£t
 + 
skb
->
Àn
;

684 i‡(
‰ag_œ°
) {

689 i‡(
íd
 < 
fq
->
ifq
.
Àn
 || fq->ifq.
œ°_ö
 & 
INET_FRAG_LAST_IN
)

690 
îr‹
;

692 
fq
->
ifq
.
œ°_ö
 |
INET_FRAG_LAST_IN
;

693 
fq
->
ifq
.
Àn
 = 
íd
;

696 i‡(
íd
 & ~
FRAG_OFF_MASK
)

697 
îr‹
;

699 i‡(
íd
 > 
fq
->
ifq
.
Àn
) {

704 i‡(
fq
->
ifq
.
œ°_ö
 & 
INET_FRAG_LAST_IN
)

705 
îr‹
;

707 
fq
->
ifq
.
Àn
 = 
íd
;

712 
¥ev
 = 
NULL
;

713 
√xt
 = 
fq
->
ifq
.
‰agmíts
;Çexà!
NULL
;Çext =Çext->next) {

714 i‡(
	`FRAG_CB
(
√xt
)->
off£t
 >= offset)

716 
¥ev
 = 
√xt
;

723 i‡(
¥ev
 && 
	`FRAG_CB
’ªv)->
off£t
 +Öªv->
Àn
 > offset)

724 
îr‹
;

727 i‡(
√xt
 && 
íd
 > 
	`FRAG_CB
“ext)->
off£t
)

728 
îr‹
;

730 
	`FRAG_CB
(
skb
)->
off£t
 = offset;

733 
skb
->
√xt
 =Çext;

734 i‡(
¥ev
)

735 
¥ev
->
√xt
 = 
skb
;

737 
fq
->
ifq
.
‰agmíts
 = 
skb
;

739 
dev
 = 
skb
->dev;

740 
skb
->
dev
 = 
NULL
;

742 
fq
->
ifq
.
°amp
 = 
skb
->
t°amp
;

743 
fq
->
ifq
.
mót
 +
skb
->
Àn
;

744 
	`©omic_add
(
skb
->
åuesize
, &
fq
->
ifq
.
√t
->
mem
);

745 i‡(
off£t
 == 0)

746 
fq
->
ifq
.
œ°_ö
 |
INET_FRAG_FIRST_IN
;

749 i‡(
fq
->
ifq
.
œ°_ö
 =(
INET_FRAG_FIRST_IN
 | 
INET_FRAG_LAST_IN
) &&

750 
fq
->
ifq
.
mót
 =fq->ifq.
Àn
)

751  
	`‰ag_ªasm
(
fq
, 
dev
);

753 
	`wrôe_lock
(&
‰ag_°©e
.
lock
);

754 
	`li°_move_èû
(&
fq
->
ifq
.
Ãu_li°
, &fq->ifq.
√t
->lru_list);

755 
	`wrôe_u∆ock
(&
‰ag_°©e
.
lock
);

757  
NULL
;

759 
îr‹
:

760 
	`k‰ì_skb
(
skb
);

761  
NULL
;

762 
	}
}

764 
sk_buff
 *
	$de‰ag
(
sk_buff
 *
skb
, 
boﬁ
 
‰ag_œ°
)

766 
ùhdr
 *
ùh
 = 
	`ù_hdr
(
skb
);

767 
ˇpw≠hdr
 *
cwh
 = 
	`ˇpw≠_hdr
(
skb
);

768 
ˇpw≠_√t
 *ˇpw≠_√à
	`ovs_gë_ˇpw≠_√t
(
	`dev_√t
(
skb
->
dev
));

769 
√äs_‰ags
 *
ns_‰ag_°©e
 = &
ˇpw≠_√t
->
‰ag_°©e
;

770 
‰ag_m©ch
 
m©ch
;

771 
u16
 
‰ag_off
;

772 
‰ag_queue
 *
fq
;

774 
	`öë_‰ag_evi˘‹
(
ns_‰ag_°©e
, &
‰ag_°©e
, 
Ál£
);

776 
m©ch
.
daddr
 = 
ùh
->daddr;

777 
m©ch
.
ßddr
 = 
ùh
->saddr;

778 
m©ch
.
id
 = 
cwh
->
‰ag_id
;

779 
‰ag_off
 = 
	`¡ohs
(
cwh
->‰ag_offË& 
FRAG_OFF_MASK
;

781 
fq
 = 
	`queue_föd
(
ns_‰ag_°©e
, &
m©ch
);

782 i‡(
fq
) {

783 
	`•ö_lock
(&
fq
->
ifq
.
lock
);

784 
skb
 = 
	`‰ag_queue
(
fq
, skb, 
‰ag_off
, 
‰ag_œ°
);

785 
	`•ö_u∆ock
(&
fq
->
ifq
.
lock
);

787 
	`öë_‰ag_put
(&
fq
->
ifq
, &
‰ag_°©e
);

789  
skb
;

792 
	`k‰ì_skb
(
skb
);

793  
NULL
;

794 
	}
}

796 
	$ˇpw≠_‰ag_öô
(
öë_‰ag_queue
 *
ifq
, *
m©ch_
)

798 
‰ag_m©ch
 *
m©ch
 = 
m©ch_
;

800 
	`ifq_ˇ°
(
ifq
)->
m©ch
 = *match;

801 
	}
}

803 
	$ˇpw≠_‰ag_hash
(
öë_‰ag_queue
 *
ifq
)

805  
	`‰ag_hash
(&
	`ifq_ˇ°
(
ifq
)->
m©ch
);

806 
	}
}

808 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(3,7,0)

809 
	$ˇpw≠_‰ag_m©ch
(
öë_‰ag_queue
 *
ifq
, *
a_
)

811 
boﬁ
 
	$ˇpw≠_‰ag_m©ch
(
öë_‰ag_queue
 *
ifq
, *
a_
)

814 
‰ag_m©ch
 *
a
 = 
a_
;

815 
‰ag_m©ch
 *
b
 = &
	`ifq_ˇ°
(
ifq
)->
m©ch
;

817  
a
->
id
 =
b
->id &&á->
ßddr
 =b->ßdd∏&&á->
daddr
 == b->daddr;

818 
	}
}

821 
	$ˇpw≠_‰ag_expúe
(
ifq
)

823 
‰ag_queue
 *
fq
;

825 
fq
 = 
	`ifq_ˇ°
((
öë_‰ag_queue
 *)
ifq
);

827 
	`•ö_lock
(&
fq
->
ifq
.
lock
);

829 i‡(!(
fq
->
ifq
.
œ°_ö
 & 
INET_FRAG_COMPLETE
))

830 
	`öë_‰ag_kûl
(&
fq
->
ifq
, &
‰ag_°©e
);

832 
	`•ö_u∆ock
(&
fq
->
ifq
.
lock
);

833 
	`öë_‰ag_put
(&
fq
->
ifq
, &
‰ag_°©e
);

834 
	}
}

836 c⁄° 
vp‹t_›s
 
	govs_ˇpw≠_vp‹t_›s
 = {

837 .
ty≥
 = 
OVS_VPORT_TYPE_CAPWAP
,

838 .
	gÊags
 = 
VPORT_F_TUN_ID
,

839 .
	göô
 = 
ˇpw≠_öô
,

840 .
	gexô
 = 
ˇpw≠_exô
,

841 .
	g¸óã
 = 
ˇpw≠_¸óã
,

842 .
	gde°roy
 = 
ˇpw≠_de°roy
,

843 .
	g£t_addr
 = 
ovs_äl_£t_addr
,

844 .
	ggë_«me
 = 
ovs_äl_gë_«me
,

845 .
	ggë_addr
 = 
ovs_äl_gë_addr
,

846 .
	ggë_›ti⁄s
 = 
ovs_äl_gë_›ti⁄s
,

847 .
	g£t_›ti⁄s
 = 
ovs_äl_£t_›ti⁄s
,

848 .
	ggë_dev_Êags
 = 
ovs_vp‹t_gí_gë_dev_Êags
,

849 .
	gis_ru¬ög
 = 
ovs_vp‹t_gí_is_ru¬ög
,

850 .
	ggë_›î°©e
 = 
ovs_vp‹t_gí_gë_›î°©e
,

851 .
	g£nd
 = 
ovs_äl_£nd
,

854 #w¨nög 
CAPWAP
 
tu¬ñög
 
wûl
 
nŸ
 
be
 
avaûabÀ
 
⁄
 
kî√ls
 
bef‹e
 2.6.26

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/vport-capwap.h

19 #i‚de‡
VPORT_CAPWAP_H


20 
	#VPORT_CAPWAP_H
 1

	)

22 
	~<löux/√t.h
>

24 
	sˇpw≠_√t
 {

25 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,26)

26 
sockë
 *
	mˇpw≠_rcv_sockë
;

27 
√äs_‰ags
 
	m‰ag_°©e
;

28 
	mn_tu¬ñs
;

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/vport-generic.c

19 
	~<löux/ëhîdevi˚.h
>

21 
	~"vp‹t-gíîic.h
"

23 
	$ovs_vp‹t_gí_gë_dev_Êags
(c⁄° 
vp‹t
 *vport)

25  
IFF_UP
 | 
IFF_RUNNING
 | 
IFF_LOWER_UP
;

26 
	}
}

28 
	$ovs_vp‹t_gí_is_ru¬ög
(c⁄° 
vp‹t
 *vport)

31 
	}
}

33 
	$ovs_vp‹t_gí_gë_›î°©e
(c⁄° 
vp‹t
 *vport)

35  
IF_OPER_UP
;

36 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/vport-generic.h

19 #i‚de‡
VPORT_GENERIC_H


20 
	#VPORT_GENERIC_H
 1

	)

22 
	~"vp‹t.h
"

24 
ovs_vp‹t_gí_gë_dev_Êags
(c⁄° 
vp‹t
 *);

25 
ovs_vp‹t_gí_is_ru¬ög
(c⁄° 
vp‹t
 *);

26 
ovs_vp‹t_gí_gë_›î°©e
(c⁄° 
vp‹t
 *);

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/vport-gre.c

19 
	#¥_fmt
(
fmt
Ë
KBUILD_MODNAME
 ": " 
	)
fmt

21 
	~<löux/if.h
>

22 
	~<löux/skbuff.h
>

23 
	~<löux/ù.h
>

24 
	~<löux/if_tu¬ñ.h
>

25 
	~<löux/if_vœn.h
>

26 
	~<löux/ö.h
>

28 
	~<√t/icmp.h
>

29 
	~<√t/ù.h
>

30 
	~<√t/¥Ÿocﬁ.h
>

32 
	~"d©≠©h.h
"

33 
	~"tu¬ñ.h
"

34 
	~"vp‹t.h
"

35 
	~"vp‹t-gíîic.h
"

41 
	#GRE_HEADER_SECTION
 4

	)

43 
	sgª_ba£_hdr
 {

44 
__be16
 
	mÊags
;

45 
__be16
 
	m¥Ÿocﬁ
;

48 
	$gª_hdr_Àn
(c⁄° 
äl_muèbÀ_c⁄fig
 *
muèbÀ
,

49 c⁄° 
ovs_key_ùv4_tu¬ñ
 *
tun_key
)

51 
Àn
;

52 
u32
 
Êags
;

53 
__be64
 
out_key
;

55 
	`äl_gë_∑øm
(
muèbÀ
, 
tun_key
, &
Êags
, &
out_key
);

56 
Àn
 = 
GRE_HEADER_SECTION
;

58 i‡(
Êags
 & 
TNL_F_CSUM
)

59 
Àn
 +
GRE_HEADER_SECTION
;

62 i‡(
out_key
 ||

63 
muèbÀ
->
key
.
tu¬ñ_ty≥
 & 
TNL_T_PROTO_GRE64
 ||

64 
Êags
 & 
TNL_F_OUT_KEY_ACTION
) {

66 
Àn
 +
GRE_HEADER_SECTION
;

67 i‡(
muèbÀ
->
key
.
tu¬ñ_ty≥
 & 
TNL_T_PROTO_GRE64
)

68 
Àn
 +
GRE_HEADER_SECTION
;

70  
Àn
;

71 
	}
}

75 
__be32
 
	$be64_gë_low32
(
__be64
 
x
)

77 #ifde‡
__BIG_ENDIAN


78  (
__f‹˚
 
__be32
)
x
;

80  (
__f‹˚
 
__be32
)((__f‹˚ 
u64
)
x
 >> 32);

82 
	}
}

84 
__be32
 
	$be64_gë_high32
(
__be64
 
x
)

86 #ifde‡
__BIG_ENDIAN


87  (
__f‹˚
 
__be32
)((__f‹˚ 
u64
)
x
 >> 32);

89  (
__f‹˚
 
__be32
)
x
;

91 
	}
}

93 
sk_buff
 *
	$gª_buûd_hódî
(c⁄° 
vp‹t
 *vport,

94 c⁄° 
äl_muèbÀ_c⁄fig
 *
muèbÀ
,

95 
d°_íåy
 *
d°
,

96 
sk_buff
 *
skb
,

97 
tu¬ñ_hÀn
)

99 
u32
 
Êags
;

100 
__be64
 
out_key
;

101 c⁄° 
ovs_key_ùv4_tu¬ñ
 *
tun_key
 = 
	`OVS_CB
(
skb
)->tun_key;

102 
__be32
 *
›ti⁄s
 = (__be32 *)(
	`skb_√tw‹k_hódî
(
skb
Ë+ 
tu¬ñ_hÀn


103 - 
GRE_HEADER_SECTION
);

104 
gª_ba£_hdr
 *
gªh
 = (gª_ba£_hd∏*Ë
	`skb_å™•‹t_hódî
(
skb
);

106 
	`äl_gë_∑øm
(
muèbÀ
, 
tun_key
, &
Êags
, &
out_key
);

108 
gªh
->
¥Ÿocﬁ
 = 
	`ht⁄s
(
ETH_P_TEB
);

109 
gªh
->
Êags
 = 0;

112 i‡(
out_key
 || 
Êags
 & 
TNL_F_OUT_KEY_ACTION
 ||

113 
muèbÀ
->
key
.
tu¬ñ_ty≥
 & 
TNL_T_PROTO_GRE64
) {

114 
gªh
->
Êags
 |
GRE_KEY
;

115 i‡(
muèbÀ
->
key
.
tu¬ñ_ty≥
 & 
TNL_T_PROTO_GRE64
) {

117 *
›ti⁄s
 = 
	`be64_gë_high32
(
out_key
);

118 
›ti⁄s
--;

119 
gªh
->
Êags
 |
GRE_SEQ
;

121 *
›ti⁄s
 = 
	`be64_gë_low32
(
out_key
);

122 
›ti⁄s
--;

125 i‡(
Êags
 & 
TNL_F_CSUM
) {

126 
gªh
->
Êags
 |
GRE_CSUM
;

127 *
›ti⁄s
 = 0;

128 *(
__sum16
 *)
›ti⁄s
 = 
	`csum_fﬁd
(
	`skb_checksum
(
skb
,

129 
	`skb_å™•‹t_off£t
(
skb
),

130 
skb
->
Àn
 - 
	`skb_å™•‹t_off£t
(skb),

139 
skb
->
loˇl_df
 = 1;

140 
	`__ù_£À˘_idít
(
	`ù_hdr
(
skb
), 
d°
, 0);

142  
skb
;

143 
	}
}

145 
__be64
 
	$key_to_tu¬ñ_id
(
__be32
 
key
, __be32 
£q
)

147 #ifde‡
__BIG_ENDIAN


148  (
__f‹˚
 
__be64
)((__f‹˚ 
u64
)
£q
 << 32 | (__f‹˚ 
u32
)
key
);

150  (
__f‹˚
 
__be64
)((__f‹˚ 
u64
)
key
 << 32 | (__f‹˚ 
u32
)
£q
);

152 
	}
}

154 
	$∑r£_hódî
(
ùhdr
 *
ùh
, 
__be16
 *
Êags
, 
__be64
 *
tun_id
,

155 
u32
 *
tu¬ñ_ty≥
)

158 
gª_ba£_hdr
 *
gªh
 = (gª_ba£_hd∏*)((
u8
 *)
ùh
 + (ùh->
ihl
 << 2));

159 
__be32
 *
›ti⁄s
 = (__be32 *)(
gªh
 + 1);

160 
hdr_Àn
;

162 *
Êags
 = 
gªh
->flags;

164 i‡(
	`u∆ikñy
(
gªh
->
Êags
 & (
GRE_VERSION
 | 
GRE_ROUTING
)))

165  -
EINVAL
;

167 i‡(
	`u∆ikñy
(
gªh
->
¥Ÿocﬁ
 !
	`ht⁄s
(
ETH_P_TEB
)))

168  -
EINVAL
;

170 
hdr_Àn
 = 
GRE_HEADER_SECTION
;

172 i‡(
gªh
->
Êags
 & 
GRE_CSUM
) {

173 
hdr_Àn
 +
GRE_HEADER_SECTION
;

174 
›ti⁄s
++;

177 i‡(
gªh
->
Êags
 & 
GRE_KEY
) {

178 
__be32
 
£q
;

179 
__be32
 
gª_key
;

181 
gª_key
 = *
›ti⁄s
;

182 
hdr_Àn
 +
GRE_HEADER_SECTION
;

183 
›ti⁄s
++;

185 i‡(
gªh
->
Êags
 & 
GRE_SEQ
) {

186 
£q
 = *
›ti⁄s
;

187 *
tu¬ñ_ty≥
 = 
TNL_T_PROTO_GRE64
;

189 
£q
 = 0;

190 *
tu¬ñ_ty≥
 = 
TNL_T_PROTO_GRE
;

192 *
tun_id
 = 
	`key_to_tu¬ñ_id
(
gª_key
, 
£q
);

194 *
tun_id
 = 0;

196 *
tu¬ñ_ty≥
 = 
TNL_T_PROTO_GRE
;

199 i‡(
gªh
->
Êags
 & 
GRE_SEQ
)

200 
hdr_Àn
 +
GRE_HEADER_SECTION
;

202  
hdr_Àn
;

203 
	}
}

206 
	$gª_îr
(
sk_buff
 *
skb
, 
u32
 
öfo
)

208 
vp‹t
 *vport;

209 c⁄° 
äl_muèbÀ_c⁄fig
 *
muèbÀ
;

210 c⁄° 
ty≥
 = 
	`icmp_hdr
(
skb
)->type;

211 c⁄° 
code
 = 
	`icmp_hdr
(
skb
)->code;

212 
mtu
 = 
	`¡ohs
(
	`icmp_hdr
(
skb
)->
un
.
‰ag
.mtu);

213 
u32
 
tu¬ñ_ty≥
;

215 
ùhdr
 *
ùh
;

216 
__be16
 
Êags
;

217 
__be64
 
key
;

218 
tu¬ñ_hdr_Àn
, 
tŸ_hdr_Àn
;

219 
‹ig_mac_hódî
;

220 
‹ig_nw_hódî
;

222 i‡(
ty≥
 !
ICMP_DEST_UNREACH
 || 
code
 !
ICMP_FRAG_NEEDED
)

230 i‡(!
	`pskb_may_puŒ
(
skb
, (
ùhdr
Ë+ 
GRE_HEADER_SECTION
 +

231 
ETH_HLEN
 + (
ùhdr
)))

234 
ùh
 = (
ùhdr
 *)
skb
->
d©a
;

235 i‡(
	`ùv4_is_mu…iˇ°
(
ùh
->
daddr
))

238 
tu¬ñ_hdr_Àn
 = 
	`∑r£_hódî
(
ùh
, &
Êags
, &
key
, &
tu¬ñ_ty≥
);

239 i‡(
tu¬ñ_hdr_Àn
 < 0)

242 
vp‹t
 = 
	`ovs_äl_föd_p‹t
(
	`dev_√t
(
skb
->
dev
), 
ùh
->
ßddr
, iph->
daddr
, 
key
,

243 
tu¬ñ_ty≥
, &
muèbÀ
);

244 i‡(!
vp‹t
)

256 i‡(
muèbÀ
->
key
.
ö_key
 !muèbÀ->
out_key
)

259 i‡(!!(
muèbÀ
->
Êags
 & 
TNL_F_IN_KEY_MATCH
) !=

260 !!(
muèbÀ
->
Êags
 & 
TNL_F_OUT_KEY_ACTION
))

263 i‡((
muèbÀ
->
Êags
 & 
TNL_F_CSUM
Ë&& !(Êag†& 
GRE_CSUM
))

266 
tu¬ñ_hdr_Àn
 +
ùh
->
ihl
 << 2;

268 
‹ig_mac_hódî
 = 
	`skb_mac_hódî
(
skb
Ë- skb->
d©a
;

269 
‹ig_nw_hódî
 = 
	`skb_√tw‹k_hódî
(
skb
Ë- skb->
d©a
;

270 
	`skb_£t_mac_hódî
(
skb
, 
tu¬ñ_hdr_Àn
);

272 
tŸ_hdr_Àn
 = 
tu¬ñ_hdr_Àn
 + 
ETH_HLEN
;

274 
skb
->
¥Ÿocﬁ
 = 
	`ëh_hdr
(skb)->
h_¥Ÿo
;

275 i‡(
skb
->
¥Ÿocﬁ
 =
	`ht⁄s
(
ETH_P_8021Q
)) {

276 
tŸ_hdr_Àn
 +
VLAN_HLEN
;

277 
skb
->
¥Ÿocﬁ
 = 
	`vœn_ëh_hdr
(skb)->
h_vœn_íˇpsuœãd_¥Ÿo
;

280 
	`skb_£t_√tw‹k_hódî
(
skb
, 
tŸ_hdr_Àn
);

281 
mtu
 -
tŸ_hdr_Àn
;

283 i‡(
skb
->
¥Ÿocﬁ
 =
	`ht⁄s
(
ETH_P_IP
))

284 
tŸ_hdr_Àn
 +(
ùhdr
);

285 #i‡
	`deföed
(
CONFIG_IPV6
Ë|| deföed(
CONFIG_IPV6_MODULE
)

286 i‡(
skb
->
¥Ÿocﬁ
 =
	`ht⁄s
(
ETH_P_IPV6
))

287 
tŸ_hdr_Àn
 +(
ùv6hdr
);

290 
out
;

292 i‡(!
	`pskb_may_puŒ
(
skb
, 
tŸ_hdr_Àn
))

293 
out
;

295 i‡(
skb
->
¥Ÿocﬁ
 =
	`ht⁄s
(
ETH_P_IP
)) {

296 i‡(
mtu
 < 
IP_MIN_MTU
) {

297 i‡(
	`¡ohs
(
	`ù_hdr
(
skb
)->
tŸ_Àn
Ë>
IP_MIN_MTU
)

298 
mtu
 = 
IP_MIN_MTU
;

300 
out
;

304 #i‡
	`deföed
(
CONFIG_IPV6
Ë|| deföed(
CONFIG_IPV6_MODULE
)

305 i‡(
skb
->
¥Ÿocﬁ
 =
	`ht⁄s
(
ETH_P_IPV6
)) {

306 i‡(
mtu
 < 
IPV6_MIN_MTU
) {

307 
∑ckë_Àngth
 = (
ùv6hdr
) +

308 
	`¡ohs
(
	`ùv6_hdr
(
skb
)->
∑ylﬂd_Àn
);

310 i‡(
∑ckë_Àngth
 >
IPV6_MIN_MTU


311 || 
	`¡ohs
(
	`ùv6_hdr
(
skb
)->
∑ylﬂd_Àn
) == 0)

312 
mtu
 = 
IPV6_MIN_MTU
;

314 
out
;

319 
	`__skb_puŒ
(
skb
, 
tu¬ñ_hdr_Àn
);

320 
	`ovs_äl_‰ag_√eded
(
vp‹t
, 
muèbÀ
, 
skb
, 
mtu
);

321 
	`__skb_push
(
skb
, 
tu¬ñ_hdr_Àn
);

323 
out
:

324 
	`skb_£t_mac_hódî
(
skb
, 
‹ig_mac_hódî
);

325 
	`skb_£t_√tw‹k_hódî
(
skb
, 
‹ig_nw_hódî
);

326 
skb
->
¥Ÿocﬁ
 = 
	`ht⁄s
(
ETH_P_IP
);

327 
	}
}

329 
boﬁ
 
	$check_checksum
(
sk_buff
 *
skb
)

331 
ùhdr
 *
ùh
 = 
	`ù_hdr
(
skb
);

332 
gª_ba£_hdr
 *
gªh
 = (gª_ba£_hd∏*)(
ùh
 + 1);

333 
__sum16
 
csum
 = 0;

335 i‡(
gªh
->
Êags
 & 
GRE_CSUM
) {

336 
skb
->
ù_summed
) {

337 
CHECKSUM_COMPLETE
:

338 
csum
 = 
	`csum_fﬁd
(
skb
->csum);

340 i‡(!
csum
)

344 
CHECKSUM_NONE
:

345 
skb
->
csum
 = 0;

346 
csum
 = 
	`__skb_checksum_com∂ëe
(
skb
);

347 
skb
->
ù_summed
 = 
CHECKSUM_COMPLETE
;

352  (
csum
 == 0);

353 
	}
}

355 
u32
 
	$gª_Êags_to_tu¬ñ_Êags
(c⁄° 
äl_muèbÀ_c⁄fig
 *
muèbÀ
,

356 
__be16
 
gª_Êags
, 
__be64
 *
key
)

358 
u32
 
tu¬ñ_Êags
 = 0;

360 i‡(
gª_Êags
 & 
GRE_KEY
) {

361 i‡(
muèbÀ
->
Êags
 & 
TNL_F_IN_KEY_MATCH
 ||

362 !
muèbÀ
->
key
.
daddr
)

363 
tu¬ñ_Êags
 = 
OVS_TNL_F_KEY
;

365 *
key
 = 0;

368 i‡(
gª_Êags
 & 
GRE_CSUM
)

369 
tu¬ñ_Êags
 |
OVS_TNL_F_CSUM
;

371  
tu¬ñ_Êags
;

372 
	}
}

375 
	$gª_rcv
(
sk_buff
 *
skb
)

377 
vp‹t
 *vport;

378 c⁄° 
äl_muèbÀ_c⁄fig
 *
muèbÀ
;

379 
hdr_Àn
;

380 
ùhdr
 *
ùh
;

381 
ovs_key_ùv4_tu¬ñ
 
tun_key
;

382 
__be16
 
gª_Êags
;

383 
u32
 
äl_Êags
;

384 
__be64
 
key
;

385 
u32
 
tu¬ñ_ty≥
;

387 i‡(
	`u∆ikñy
(!
	`pskb_may_puŒ
(
skb
, (
gª_ba£_hdr
Ë+ 
ETH_HLEN
)))

388 
îr‹
;

389 i‡(
	`u∆ikñy
(!
	`check_checksum
(
skb
)))

390 
îr‹
;

392 
hdr_Àn
 = 
	`∑r£_hódî
(
	`ù_hdr
(
skb
), &
gª_Êags
, &
key
, &
tu¬ñ_ty≥
);

393 i‡(
	`u∆ikñy
(
hdr_Àn
 < 0))

394 
îr‹
;

396 i‡(
	`u∆ikñy
(!
	`pskb_may_puŒ
(
skb
, 
hdr_Àn
 + 
ETH_HLEN
)))

397 
îr‹
;

399 
ùh
 = 
	`ù_hdr
(
skb
);

400 
vp‹t
 = 
	`ovs_äl_föd_p‹t
(
	`dev_√t
(
skb
->
dev
), 
ùh
->
daddr
, iph->
ßddr
, 
key
,

401 
tu¬ñ_ty≥
, &
muèbÀ
);

402 i‡(
	`u∆ikñy
(!
vp‹t
))

403 
îr‹
;

405 
äl_Êags
 = 
	`gª_Êags_to_tu¬ñ_Êags
(
muèbÀ
, 
gª_Êags
, &
key
);

406 
	`äl_tun_key_öô
(&
tun_key
, 
ùh
, 
key
, 
äl_Êags
);

407 
	`OVS_CB
(
skb
)->
tun_key
 = &tun_key;

409 
	`__skb_puŒ
(
skb
, 
hdr_Àn
);

410 
	`skb_po°puŒ_rcsum
(
skb
, 
	`skb_å™•‹t_hódî
(skb), 
hdr_Àn
 + 
ETH_HLEN
);

412 
	`ovs_äl_rcv
(
vp‹t
, 
skb
);

415 
îr‹
:

416 
	`k‰ì_skb
(
skb
);

418 
	}
}

420 c⁄° 
äl_›s
 
	ggª_äl_›s
 = {

421 .
tu¬ñ_ty≥
 = 
TNL_T_PROTO_GRE
,

422 .
	gù¥Ÿo
 = 
IPPROTO_GRE
,

423 .
	ghdr_Àn
 = 
gª_hdr_Àn
,

424 .
	gbuûd_hódî
 = 
gª_buûd_hódî
,

427 
vp‹t
 *
	$gª_¸óã
(c⁄° 
vp‹t_∑rms
 *
∑rms
)

429  
	`ovs_äl_¸óã
(
∑rms
, &
ovs_gª_vp‹t_›s
, &
gª_äl_›s
);

430 
	}
}

432 
vp‹t
 *
	$gª_¸óã_·
(c⁄° 
vp‹t_∑rms
 *
∑rms
)

434  
	`ovs_äl_¸óã
(
∑rms
, &
ovs_gª_·_vp‹t_›s
, &
gª_äl_›s
);

435 
	}
}

437 c⁄° 
äl_›s
 
	ggª64_äl_›s
 = {

438 .
tu¬ñ_ty≥
 = 
TNL_T_PROTO_GRE64
,

439 .
	gù¥Ÿo
 = 
IPPROTO_GRE
,

440 .
	ghdr_Àn
 = 
gª_hdr_Àn
,

441 .
	gbuûd_hódî
 = 
gª_buûd_hódî
,

444 
vp‹t
 *
	$gª_¸óã64
(c⁄° 
vp‹t_∑rms
 *
∑rms
)

446  
	`ovs_äl_¸óã
(
∑rms
, &
ovs_gª64_vp‹t_›s
, &
gª64_äl_›s
);

447 
	}
}

449 c⁄° 
√t_¥Ÿocﬁ
 
	ggª_¥Ÿocﬁ_h™dÀrs
 = {

450 .
h™dÀr
 = 
gª_rcv
,

451 .
	gîr_h™dÀr
 = 
gª_îr
,

452 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,32)

453 .
	g√äs_ok
 = 1,

457 
boﬁ
 
	göôed
;

459 
	$gª_öô
()

461 
îr
;

463 i‡(
öôed
)

466 
öôed
 = 
åue
;

467 
îr
 = 
	`öë_add_¥Ÿocﬁ
(&
gª_¥Ÿocﬁ_h™dÀrs
, 
IPPROTO_GRE
);

468 i‡(
îr
)

469 
	`¥_w¨n
("cannotÑegister greÖrotocol handler\n");

471  
îr
;

472 
	}
}

474 
	$gª_exô
()

476 i‡(!
öôed
)

479 
öôed
 = 
Ál£
;

481 
	`öë_dñ_¥Ÿocﬁ
(&
gª_¥Ÿocﬁ_h™dÀrs
, 
IPPROTO_GRE
);

482 
	}
}

484 c⁄° 
vp‹t_›s
 
	govs_gª_·_vp‹t_›s
 = {

485 .
ty≥
 = 
OVS_VPORT_TYPE_FT_GRE
,

486 .
	gÊags
 = 
VPORT_F_TUN_ID
,

487 .
	göô
 = 
gª_öô
,

488 .
	gexô
 = 
gª_exô
,

489 .
	g¸óã
 = 
gª_¸óã_·
,

490 .
	gde°roy
 = 
ovs_äl_de°roy
,

491 .
	g£t_addr
 = 
ovs_äl_£t_addr
,

492 .
	ggë_«me
 = 
ovs_äl_gë_«me
,

493 .
	ggë_addr
 = 
ovs_äl_gë_addr
,

494 .
	ggë_›ti⁄s
 = 
ovs_äl_gë_›ti⁄s
,

495 .
	g£t_›ti⁄s
 = 
ovs_äl_£t_›ti⁄s
,

496 .
	ggë_dev_Êags
 = 
ovs_vp‹t_gí_gë_dev_Êags
,

497 .
	gis_ru¬ög
 = 
ovs_vp‹t_gí_is_ru¬ög
,

498 .
	ggë_›î°©e
 = 
ovs_vp‹t_gí_gë_›î°©e
,

499 .
	g£nd
 = 
ovs_äl_£nd
,

502 c⁄° 
vp‹t_›s
 
	govs_gª_vp‹t_›s
 = {

503 .
ty≥
 = 
OVS_VPORT_TYPE_GRE
,

504 .
	gÊags
 = 
VPORT_F_TUN_ID
,

505 .
	göô
 = 
gª_öô
,

506 .
	gexô
 = 
gª_exô
,

507 .
	g¸óã
 = 
gª_¸óã
,

508 .
	gde°roy
 = 
ovs_äl_de°roy
,

509 .
	g£t_addr
 = 
ovs_äl_£t_addr
,

510 .
	ggë_«me
 = 
ovs_äl_gë_«me
,

511 .
	ggë_addr
 = 
ovs_äl_gë_addr
,

512 .
	ggë_›ti⁄s
 = 
ovs_äl_gë_›ti⁄s
,

513 .
	g£t_›ti⁄s
 = 
ovs_äl_£t_›ti⁄s
,

514 .
	ggë_dev_Êags
 = 
ovs_vp‹t_gí_gë_dev_Êags
,

515 .
	gis_ru¬ög
 = 
ovs_vp‹t_gí_is_ru¬ög
,

516 .
	ggë_›î°©e
 = 
ovs_vp‹t_gí_gë_›î°©e
,

517 .
	g£nd
 = 
ovs_äl_£nd
,

520 c⁄° 
vp‹t_›s
 
	govs_gª64_vp‹t_›s
 = {

521 .
ty≥
 = 
OVS_VPORT_TYPE_GRE64
,

522 .
	gÊags
 = 
VPORT_F_TUN_ID
,

523 .
	göô
 = 
gª_öô
,

524 .
	gexô
 = 
gª_exô
,

525 .
	g¸óã
 = 
gª_¸óã64
,

526 .
	gde°roy
 = 
ovs_äl_de°roy
,

527 .
	g£t_addr
 = 
ovs_äl_£t_addr
,

528 .
	ggë_«me
 = 
ovs_äl_gë_«me
,

529 .
	ggë_addr
 = 
ovs_äl_gë_addr
,

530 .
	ggë_›ti⁄s
 = 
ovs_äl_gë_›ti⁄s
,

531 .
	g£t_›ti⁄s
 = 
ovs_äl_£t_›ti⁄s
,

532 .
	ggë_dev_Êags
 = 
ovs_vp‹t_gí_gë_dev_Êags
,

533 .
	gis_ru¬ög
 = 
ovs_vp‹t_gí_is_ru¬ög
,

534 .
	ggë_›î°©e
 = 
ovs_vp‹t_gí_gë_›î°©e
,

535 .
	g£nd
 = 
ovs_äl_£nd
,

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/vport-internal_dev.c

19 
	~<löux/h¨dúq.h
>

20 
	~<löux/if_vœn.h
>

21 
	~<löux/kî√l.h
>

22 
	~<löux/√tdevi˚.h
>

23 
	~<löux/ëhîdevi˚.h
>

24 
	~<löux/ëhtoﬁ.h
>

25 
	~<löux/skbuff.h
>

26 
	~<löux/vîsi⁄.h
>

28 
	~<√t/d°.h
>

29 
	~<√t/x‰m.h
>

31 
	~"checksum.h
"

32 
	~"d©≠©h.h
"

33 
	~"vœn.h
"

34 
	~"vp‹t-gíîic.h
"

35 
	~"vp‹t-öã∫Æ_dev.h
"

36 
	~"vp‹t-√tdev.h
"

38 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(3,1,0)

39 
	#HAVE_NET_DEVICE_OPS


	)

42 
	söã∫Æ_dev
 {

43 
vp‹t
 *
	mvp‹t
;

44 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,22)

45 
√t_devi˚_°©s
 
	m°©s
;

49 
öã∫Æ_dev
 *
	$öã∫Æ_dev_¥iv
(
√t_devi˚
 *
√tdev
)

51  
	`√tdev_¥iv
(
√tdev
);

52 
	}
}

55 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,36)

56 
π∆_lök_°©s64
 *
	$öã∫Æ_dev_gë_°©s
(
√t_devi˚
 *
√tdev
,

57 
π∆_lök_°©s64
 *
°©s
)

60 
√t_devi˚_°©s
 *
	$öã∫Æ_dev_sys_°©s
(
√t_devi˚
 *
√tdev
)

62 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,22)

63 
√t_devi˚_°©s
 *
°©s
 = &
	`öã∫Æ_dev_¥iv
(
√tdev
)->stats;

65 
√t_devi˚_°©s
 *
°©s
 = &
√tdev
->stats;

68 
vp‹t
 *vp‹à
	`ovs_öã∫Æ_dev_gë_vp‹t
(
√tdev
);

69 
ovs_vp‹t_°©s
 
vp‹t_°©s
;

71 
	`ovs_vp‹t_gë_°©s
(
vp‹t
, &
vp‹t_°©s
);

75 
°©s
->
rx_∑ckës
 = 
vp‹t_°©s
.
tx_∑ckës
;

76 
°©s
->
tx_∑ckës
 = 
vp‹t_°©s
.
rx_∑ckës
;

77 
°©s
->
rx_byãs
 = 
vp‹t_°©s
.
tx_byãs
;

78 
°©s
->
tx_byãs
 = 
vp‹t_°©s
.
rx_byãs
;

79 
°©s
->
rx_îr‹s
 = 
vp‹t_°©s
.
tx_îr‹s
;

80 
°©s
->
tx_îr‹s
 = 
vp‹t_°©s
.
rx_îr‹s
;

81 
°©s
->
rx_dr›≥d
 = 
vp‹t_°©s
.
tx_dr›≥d
;

82 
°©s
->
tx_dr›≥d
 = 
vp‹t_°©s
.
rx_dr›≥d
;

84  
°©s
;

85 
	}
}

87 
	$öã∫Æ_dev_mac_addr
(
√t_devi˚
 *
dev
, *
p
)

89 
sockaddr
 *
addr
 = 
p
;

91 i‡(!
	`is_vÆid_ëhî_addr
(
addr
->
ß_d©a
))

92  -
EADDRNOTAVAIL
;

93 #ifde‡
NET_ADDR_RANDOM


94 
dev
->
addr_assign_ty≥
 &~
NET_ADDR_RANDOM
;

96 
	`mem˝y
(
dev
->
dev_addr
, 
addr
->
ß_d©a
, dev->
addr_Àn
);

98 
	}
}

101 
	$öã∫Æ_dev_xmô
(
sk_buff
 *
skb
, 
√t_devi˚
 *
√tdev
)

103 i‡(
	`u∆ikñy
(
	`compuã_ù_summed
(
skb
, 
åue
))) {

104 
	`k‰ì_skb
(
skb
);

108 
	`vœn_c›y_skb_tci
(
skb
);

109 
	`OVS_CB
(
skb
)->
Êow
 = 
NULL
;

111 
	`rcu_ªad_lock
();

112 
	`ovs_vp‹t_ª˚ive
(
	`öã∫Æ_dev_¥iv
(
√tdev
)->
vp‹t
, 
skb
);

113 
	`rcu_ªad_u∆ock
();

115 
	}
}

117 
	$öã∫Æ_dev_›í
(
√t_devi˚
 *
√tdev
)

119 
	`√tif_°¨t_queue
(
√tdev
);

121 
	}
}

123 
	$öã∫Æ_dev_°›
(
√t_devi˚
 *
√tdev
)

125 
	`√tif_°›_queue
(
√tdev
);

127 
	}
}

129 
	$öã∫Æ_dev_gëöfo
(
√t_devi˚
 *
√tdev
,

130 
ëhtoﬁ_drvöfo
 *
öfo
)

132 
	`°r˝y
(
öfo
->
drivî
, "openvswitch");

133 
	}
}

135 c⁄° 
ëhtoﬁ_›s
 
	göã∫Æ_dev_ëhtoﬁ_›s
 = {

136 .
gë_drvöfo
 = 
öã∫Æ_dev_gëöfo
,

137 .
	ggë_lök
 = 
ëhtoﬁ_›_gë_lök
,

138 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,39)

139 .
	ggë_sg
 = 
ëhtoﬁ_›_gë_sg
,

140 .
	g£t_sg
 = 
ëhtoﬁ_›_£t_sg
,

141 .
	ggë_tx_csum
 = 
ëhtoﬁ_›_gë_tx_csum
,

142 .
	g£t_tx_csum
 = 
ëhtoﬁ_›_£t_tx_hw_csum
,

143 .
	ggë_tso
 = 
ëhtoﬁ_›_gë_tso
,

144 .
	g£t_tso
 = 
ëhtoﬁ_›_£t_tso
,

148 
	$öã∫Æ_dev_ch™ge_mtu
(
√t_devi˚
 *
√tdev
, 
√w_mtu
)

150 i‡(
√w_mtu
 < 68)

151  -
EINVAL
;

153 
√tdev
->
mtu
 = 
√w_mtu
;

155 
	}
}

157 
	$öã∫Æ_dev_do_io˘l
(
√t_devi˚
 *
dev
,

158 
i‰eq
 *
i‰
, 
cmd
)

160 i‡(
ovs_dp_io˘l_hook
)

161  
	`ovs_dp_io˘l_hook
(
dev
, 
i‰
, 
cmd
);

163  -
EOPNOTSUPP
;

164 
	}
}

166 
	$öã∫Æ_dev_de°ru˘‹
(
√t_devi˚
 *
dev
)

168 
vp‹t
 *vp‹à
	`ovs_öã∫Æ_dev_gë_vp‹t
(
dev
);

170 
	`ovs_vp‹t_‰ì
(
vp‹t
);

171 
	`‰ì_√tdev
(
dev
);

172 
	}
}

174 #ifde‡
HAVE_NET_DEVICE_OPS


175 c⁄° 
√t_devi˚_›s
 
	göã∫Æ_dev_√tdev_›s
 = {

176 .
ndo_›í
 = 
öã∫Æ_dev_›í
,

177 .
	gndo_°›
 = 
öã∫Æ_dev_°›
,

178 .
	gndo_°¨t_xmô
 = 
öã∫Æ_dev_xmô
,

179 .
	gndo_£t_mac_addªss
 = 
öã∫Æ_dev_mac_addr
,

180 .
	gndo_do_io˘l
 = 
öã∫Æ_dev_do_io˘l
,

181 .
	gndo_ch™ge_mtu
 = 
öã∫Æ_dev_ch™ge_mtu
,

182 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,36)

183 .
	gndo_gë_°©s64
 = 
öã∫Æ_dev_gë_°©s
,

185 .
	gndo_gë_°©s
 = 
öã∫Æ_dev_sys_°©s
,

190 
	$do_£tup
(
√t_devi˚
 *
√tdev
)

192 
	`ëhî_£tup
(
√tdev
);

194 #ifde‡
HAVE_NET_DEVICE_OPS


195 
√tdev
->
√tdev_›s
 = &
öã∫Æ_dev_√tdev_›s
;

197 
√tdev
->
do_io˘l
 = 
öã∫Æ_dev_do_io˘l
;

198 
√tdev
->
gë_°©s
 = 
öã∫Æ_dev_sys_°©s
;

199 
√tdev
->
h¨d_°¨t_xmô
 = 
öã∫Æ_dev_xmô
;

200 
√tdev
->
›í
 = 
öã∫Æ_dev_›í
;

201 
√tdev
->
°›
 = 
öã∫Æ_dev_°›
;

202 
√tdev
->
£t_mac_addªss
 = 
öã∫Æ_dev_mac_addr
;

203 
√tdev
->
ch™ge_mtu
 = 
öã∫Æ_dev_ch™ge_mtu
;

206 
√tdev
->
¥iv_Êags
 &~
IFF_TX_SKB_SHARING
;

207 
√tdev
->
de°ru˘‹
 = 
öã∫Æ_dev_de°ru˘‹
;

208 
	`SET_ETHTOOL_OPS
(
√tdev
, &
öã∫Æ_dev_ëhtoﬁ_›s
);

209 
√tdev
->
tx_queue_Àn
 = 0;

211 
√tdev
->
„©uªs
 = 
NETIF_F_LLTX
 | 
NETIF_F_SG
 | 
NETIF_F_FRAGLIST
 |

212 
NETIF_F_HIGHDMA
 | 
NETIF_F_HW_CSUM
 | 
NETIF_F_TSO
;

214 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,27)

215 
√tdev
->
vœn_„©uªs
 =Çëdev->
„©uªs
;

216 
√tdev
->
„©uªs
 |
NETIF_F_HW_VLAN_TX
;

219 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,39)

220 
√tdev
->
hw_„©uªs
 =Çëdev->
„©uªs
 & ~
NETIF_F_LLTX
;

222 
	`ëh_hw_addr_øndom
(
√tdev
);

223 
	}
}

225 
vp‹t
 *
	$öã∫Æ_dev_¸óã
(c⁄° 
vp‹t_∑rms
 *
∑rms
)

227 
vp‹t
 *vport;

228 
√tdev_vp‹t
 *netdev_vport;

229 
öã∫Æ_dev
 *internal_dev;

230 
îr
;

232 
vp‹t
 = 
	`ovs_vp‹t_Æloc
((
√tdev_vp‹t
),

233 &
ovs_öã∫Æ_vp‹t_›s
, 
∑rms
);

234 i‡(
	`IS_ERR
(
vp‹t
)) {

235 
îr
 = 
	`PTR_ERR
(
vp‹t
);

236 
îr‹
;

239 
√tdev_vp‹t
 = 
	`√tdev_vp‹t_¥iv
(
vp‹t
);

241 
√tdev_vp‹t
->
dev
 = 
	`Æloc_√tdev
((
öã∫Æ_dev
),

242 
∑rms
->
«me
, 
do_£tup
);

243 i‡(!
√tdev_vp‹t
->
dev
) {

244 
îr
 = -
ENOMEM
;

245 
îr‹_‰ì_vp‹t
;

248 
	`dev_√t_£t
(
√tdev_vp‹t
->
dev
, 
	`ovs_dp_gë_√t
(
vp‹t
->
dp
));

249 
öã∫Æ_dev
 = 
	`öã∫Æ_dev_¥iv
(
√tdev_vp‹t
->
dev
);

250 
öã∫Æ_dev
->
vp‹t
 = vport;

253 i‡(
vp‹t
->
p‹t_no
 =
OVSP_LOCAL
)

254 
√tdev_vp‹t
->
dev
->
„©uªs
 |
NETIF_F_NETNS_LOCAL
;

256 
îr
 = 
	`ªgi°î_√tdevi˚
(
√tdev_vp‹t
->
dev
);

257 i‡(
îr
)

258 
îr‹_‰ì_√tdev
;

260 
	`dev_£t_¥omiscuôy
(
√tdev_vp‹t
->
dev
, 1);

261 
	`√tif_°¨t_queue
(
√tdev_vp‹t
->
dev
);

263  
vp‹t
;

265 
îr‹_‰ì_√tdev
:

266 
	`‰ì_√tdev
(
√tdev_vp‹t
->
dev
);

267 
îr‹_‰ì_vp‹t
:

268 
	`ovs_vp‹t_‰ì
(
vp‹t
);

269 
îr‹
:

270  
	`ERR_PTR
(
îr
);

271 
	}
}

273 
	$öã∫Æ_dev_de°roy
(
vp‹t
 *vport)

275 
√tdev_vp‹t
 *√tdev_vp‹à
	`√tdev_vp‹t_¥iv
(
vp‹t
);

277 
	`√tif_°›_queue
(
√tdev_vp‹t
->
dev
);

278 
	`dev_£t_¥omiscuôy
(
√tdev_vp‹t
->
dev
, -1);

281 
	`uƒegi°î_√tdevi˚
(
√tdev_vp‹t
->
dev
);

282 
	}
}

284 
	$öã∫Æ_dev_ªcv
(
vp‹t
 *vp‹t, 
sk_buff
 *
skb
)

286 
√t_devi˚
 *
√tdev
 = 
	`√tdev_vp‹t_¥iv
(
vp‹t
)->
dev
;

287 
Àn
;

289 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,37)

290 i‡(
	`u∆ikñy
(
	`vœn_dóc˚l_èg
(
skb
)))

294 
Àn
 = 
skb
->len;

296 
	`skb_d°_dr›
(
skb
);

297 
	`nf_ª£t
(
skb
);

298 
	`£˝©h_ª£t
(
skb
);

300 
skb
->
dev
 = 
√tdev
;

301 
skb
->
pkt_ty≥
 = 
PACKET_HOST
;

302 
skb
->
¥Ÿocﬁ
 = 
	`ëh_ty≥_å™s
(skb, 
√tdev
);

303 
	`f‹w¨d_ù_summed
(
skb
, 
Ál£
);

305 
	`√tif_rx
(
skb
);

307 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,29)

308 
√tdev
->
œ°_rx
 = 
jiffõs
;

311  
Àn
;

312 
	}
}

314 c⁄° 
vp‹t_›s
 
	govs_öã∫Æ_vp‹t_›s
 = {

315 .
ty≥
 = 
OVS_VPORT_TYPE_INTERNAL
,

316 .
	gÊags
 = 
VPORT_F_REQUIRED
 | 
VPORT_F_FLOW
,

317 .
	g¸óã
 = 
öã∫Æ_dev_¸óã
,

318 .
	gde°roy
 = 
öã∫Æ_dev_de°roy
,

319 .
	g£t_addr
 = 
ovs_√tdev_£t_addr
,

320 .
	ggë_«me
 = 
ovs_√tdev_gë_«me
,

321 .
	ggë_addr
 = 
ovs_√tdev_gë_addr
,

322 .
	ggë_kobj
 = 
ovs_√tdev_gë_kobj
,

323 .
	ggë_dev_Êags
 = 
ovs_√tdev_gë_dev_Êags
,

324 .
	gis_ru¬ög
 = 
ovs_√tdev_is_ru¬ög
,

325 .
	ggë_›î°©e
 = 
ovs_√tdev_gë_›î°©e
,

326 .
	ggë_ifödex
 = 
ovs_√tdev_gë_ifödex
,

327 .
	ggë_mtu
 = 
ovs_√tdev_gë_mtu
,

328 .
	g£nd
 = 
öã∫Æ_dev_ªcv
,

331 
	$ovs_is_öã∫Æ_dev
(c⁄° 
√t_devi˚
 *
√tdev
)

333 #ifde‡
HAVE_NET_DEVICE_OPS


334  
√tdev
->
√tdev_›s
 =&
öã∫Æ_dev_√tdev_›s
;

336  
√tdev
->
›í
 =
öã∫Æ_dev_›í
;

338 
	}
}

340 
vp‹t
 *
	$ovs_öã∫Æ_dev_gë_vp‹t
(
√t_devi˚
 *
√tdev
)

342 i‡(!
	`ovs_is_öã∫Æ_dev
(
√tdev
))

343  
NULL
;

345  
	`öã∫Æ_dev_¥iv
(
√tdev
)->
vp‹t
;

346 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/vport-internal_dev.h

19 #i‚de‡
VPORT_INTERNAL_DEV_H


20 
	#VPORT_INTERNAL_DEV_H
 1

	)

22 
	~"d©≠©h.h
"

23 
	~"vp‹t.h
"

25 
ovs_is_öã∫Æ_dev
(c⁄° 
√t_devi˚
 *);

26 
vp‹t
 *
ovs_öã∫Æ_dev_gë_vp‹t
(
√t_devi˚
 *);

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/vport-netdev.c

19 
	#¥_fmt
(
fmt
Ë
KBUILD_MODNAME
 ": " 
	)
fmt

21 
	~<löux/if_¨p.h
>

22 
	~<löux/if_bridge.h
>

23 
	~<löux/if_vœn.h
>

24 
	~<löux/kî√l.h
>

25 
	~<löux/Œc.h
>

26 
	~<löux/π√éök.h
>

27 
	~<löux/skbuff.h
>

29 
	~<√t/Œc.h
>

31 
	~"checksum.h
"

32 
	~"d©≠©h.h
"

33 
	~"vœn.h
"

34 
	~"vp‹t-öã∫Æ_dev.h
"

35 
	~"vp‹t-√tdev.h
"

37 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,37) && \

38 !
	$deföed
(
HAVE_VLAN_BUG_WORKAROUND
)

39 
	~<löux/moduÀ.h
>

41 
vœn_tso
 
__ªad_mo°ly
;

42 
	`moduÀ_∑øm
(
vœn_tso
, , 0644);

43 
	`MODULE_PARM_DESC
(
vœn_tso
, "Enable TSO for VLANÖackets");

45 
	#vœn_tso
 
åue


	)

48 
	`√tdev_p‹t_ª˚ive
(
vp‹t
 *vp‹t, 
sk_buff
 *
skb
);

50 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,39)

52 
rx_h™dÀr_ªsu…_t
 
	$√tdev_‰ame_hook
(
sk_buff
 **
pskb
)

54 
sk_buff
 *
skb
 = *
pskb
;

55 
vp‹t
 *vport;

57 i‡(
	`u∆ikñy
(
skb
->
pkt_ty≥
 =
PACKET_LOOPBACK
))

58  
RX_HANDLER_PASS
;

60 
vp‹t
 = 
	`ovs_√tdev_gë_vp‹t
(
skb
->
dev
);

62 
	`√tdev_p‹t_ª˚ive
(
vp‹t
, 
skb
);

64  
RX_HANDLER_CONSUMED
;

65 
	}
}

66 #ñi‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,36)

68 
sk_buff
 *
	$√tdev_‰ame_hook
(
sk_buff
 *
skb
)

70 
vp‹t
 *vport;

72 i‡(
	`u∆ikñy
(
skb
->
pkt_ty≥
 =
PACKET_LOOPBACK
))

73  
skb
;

75 
vp‹t
 = 
	`ovs_√tdev_gë_vp‹t
(
skb
->
dev
);

77 
	`√tdev_p‹t_ª˚ive
(
vp‹t
, 
skb
);

79  
NULL
;

80 
	}
}

81 #ñi‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,22)

87 
sk_buff
 *
	$√tdev_‰ame_hook
(
√t_bridge_p‹t
 *
p
,

88 
sk_buff
 *
skb
)

90 
	`√tdev_p‹t_ª˚ive
((
vp‹t
 *)
p
, 
skb
);

91  
NULL
;

92 
	}
}

93 #ñi‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,0)

99 
	$√tdev_‰ame_hook
(
√t_bridge_p‹t
 *
p
, 
sk_buff
 **
pskb
)

101 
	`√tdev_p‹t_ª˚ive
((
vp‹t
 *)
p
, *
pskb
);

103 
	}
}

108 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,36)

109 
	$√tdev_öô
(Ë{  0; 
	}
}

110 
	$√tdev_exô
(Ë{ 
	}
}

112 
	$√tdev_öô
()

116 
br_h™dÀ_‰ame_hook
 = 
√tdev_‰ame_hook
;

119 
	}
}

121 
	$√tdev_exô
()

123 
br_h™dÀ_‰ame_hook
 = 
NULL
;

124 
	}
}

127 
vp‹t
 *
	$√tdev_¸óã
(c⁄° 
vp‹t_∑rms
 *
∑rms
)

129 
vp‹t
 *vport;

130 
√tdev_vp‹t
 *netdev_vport;

131 
îr
;

133 
vp‹t
 = 
	`ovs_vp‹t_Æloc
((
√tdev_vp‹t
),

134 &
ovs_√tdev_vp‹t_›s
, 
∑rms
);

135 i‡(
	`IS_ERR
(
vp‹t
)) {

136 
îr
 = 
	`PTR_ERR
(
vp‹t
);

137 
îr‹
;

140 
√tdev_vp‹t
 = 
	`√tdev_vp‹t_¥iv
(
vp‹t
);

142 
√tdev_vp‹t
->
dev
 = 
	`dev_gë_by_«me
(
	`ovs_dp_gë_√t
(
vp‹t
->
dp
), 
∑rms
->
«me
);

143 i‡(!
√tdev_vp‹t
->
dev
) {

144 
îr
 = -
ENODEV
;

145 
îr‹_‰ì_vp‹t
;

148 i‡(
√tdev_vp‹t
->
dev
->
Êags
 & 
IFF_LOOPBACK
 ||

149 
√tdev_vp‹t
->
dev
->
ty≥
 !
ARPHRD_ETHER
 ||

150 
	`ovs_is_öã∫Æ_dev
(
√tdev_vp‹t
->
dev
)) {

151 
îr
 = -
EINVAL
;

152 
îr‹_put
;

155 
îr
 = 
	`√tdev_rx_h™dÀr_ªgi°î
(
√tdev_vp‹t
->
dev
, 
√tdev_‰ame_hook
,

156 
vp‹t
);

157 i‡(
îr
)

158 
îr‹_put
;

160 
	`dev_£t_¥omiscuôy
(
√tdev_vp‹t
->
dev
, 1);

161 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,24)

162 
	`dev_dißbÀ_Ão
(
√tdev_vp‹t
->
dev
);

164 
√tdev_vp‹t
->
dev
->
¥iv_Êags
 |
IFF_OVS_DATAPATH
;

166  
vp‹t
;

168 
îr‹_put
:

169 
	`dev_put
(
√tdev_vp‹t
->
dev
);

170 
îr‹_‰ì_vp‹t
:

171 
	`ovs_vp‹t_‰ì
(
vp‹t
);

172 
îr‹
:

173  
	`ERR_PTR
(
îr
);

174 
	}
}

176 
	$‰ì_p‹t_rcu
(
rcu_hód
 *
rcu
)

178 
√tdev_vp‹t
 *√tdev_vp‹à
	`c⁄èöî_of
(
rcu
,

179 
√tdev_vp‹t
, 
rcu
);

181 
	`dev_put
(
√tdev_vp‹t
->
dev
);

182 
	`ovs_vp‹t_‰ì
(
	`vp‹t_‰om_¥iv
(
√tdev_vp‹t
));

183 
	}
}

185 
	$√tdev_de°roy
(
vp‹t
 *vport)

187 
√tdev_vp‹t
 *√tdev_vp‹à
	`√tdev_vp‹t_¥iv
(
vp‹t
);

189 
√tdev_vp‹t
->
dev
->
¥iv_Êags
 &~
IFF_OVS_DATAPATH
;

190 
	`√tdev_rx_h™dÀr_uƒegi°î
(
√tdev_vp‹t
->
dev
);

191 
	`dev_£t_¥omiscuôy
(
√tdev_vp‹t
->
dev
, -1);

193 
	`ˇŒ_rcu
(&
√tdev_vp‹t
->
rcu
, 
‰ì_p‹t_rcu
);

194 
	}
}

196 
	$ovs_√tdev_£t_addr
(
vp‹t
 *vp‹t, c⁄° *
addr
)

198 
√tdev_vp‹t
 *√tdev_vp‹à
	`√tdev_vp‹t_¥iv
(
vp‹t
);

199 
sockaddr
 
ß
;

201 
ß
.
ß_Ámûy
 = 
ARPHRD_ETHER
;

202 
	`mem˝y
(
ß
.
ß_d©a
, 
addr
, 
ETH_ALEN
);

204  
	`dev_£t_mac_addªss
(
√tdev_vp‹t
->
dev
, &
ß
);

205 
	}
}

207 c⁄° *
	$ovs_√tdev_gë_«me
(c⁄° 
vp‹t
 *vport)

209 c⁄° 
√tdev_vp‹t
 *√tdev_vp‹à
	`√tdev_vp‹t_¥iv
(
vp‹t
);

210  
√tdev_vp‹t
->
dev
->
«me
;

211 
	}
}

213 c⁄° *
	$ovs_√tdev_gë_addr
(c⁄° 
vp‹t
 *vport)

215 c⁄° 
√tdev_vp‹t
 *√tdev_vp‹à
	`√tdev_vp‹t_¥iv
(
vp‹t
);

216  
√tdev_vp‹t
->
dev
->
dev_addr
;

217 
	}
}

219 
kobje˘
 *
	$ovs_√tdev_gë_kobj
(c⁄° 
vp‹t
 *vport)

221 c⁄° 
√tdev_vp‹t
 *√tdev_vp‹à
	`√tdev_vp‹t_¥iv
(
vp‹t
);

222  &
√tdev_vp‹t
->
dev
->
NETDEV_DEV_MEMBER
.
kobj
;

223 
	}
}

225 
	$ovs_√tdev_gë_dev_Êags
(c⁄° 
vp‹t
 *vport)

227 c⁄° 
√tdev_vp‹t
 *√tdev_vp‹à
	`√tdev_vp‹t_¥iv
(
vp‹t
);

228  
	`dev_gë_Êags
(
√tdev_vp‹t
->
dev
);

229 
	}
}

231 
	$ovs_√tdev_is_ru¬ög
(c⁄° 
vp‹t
 *vport)

233 c⁄° 
√tdev_vp‹t
 *√tdev_vp‹à
	`√tdev_vp‹t_¥iv
(
vp‹t
);

234  
	`√tif_ru¬ög
(
√tdev_vp‹t
->
dev
);

235 
	}
}

237 
	$ovs_√tdev_gë_›î°©e
(c⁄° 
vp‹t
 *vport)

239 c⁄° 
√tdev_vp‹t
 *√tdev_vp‹à
	`√tdev_vp‹t_¥iv
(
vp‹t
);

240  
√tdev_vp‹t
->
dev
->
›î°©e
;

241 
	}
}

243 
	$ovs_√tdev_gë_ifödex
(c⁄° 
vp‹t
 *vport)

245 c⁄° 
√tdev_vp‹t
 *√tdev_vp‹à
	`√tdev_vp‹t_¥iv
(
vp‹t
);

246  
√tdev_vp‹t
->
dev
->
ifödex
;

247 
	}
}

249 
	$ovs_√tdev_gë_mtu
(c⁄° 
vp‹t
 *vport)

251 c⁄° 
√tdev_vp‹t
 *√tdev_vp‹à
	`√tdev_vp‹t_¥iv
(
vp‹t
);

252  
√tdev_vp‹t
->
dev
->
mtu
;

253 
	}
}

256 
	$√tdev_p‹t_ª˚ive
(
vp‹t
 *vp‹t, 
sk_buff
 *
skb
)

258 i‡(
	`u∆ikñy
(!
vp‹t
))

259 
îr‹
;

261 i‡(
	`u∆ikñy
(
	`skb_w¨n_if_Ão
(
skb
)))

262 
îr‹
;

268 
skb
 = 
	`skb_sh¨e_check
(skb, 
GFP_ATOMIC
);

269 i‡(
	`u∆ikñy
(!
skb
))

272 
	`skb_push
(
skb
, 
ETH_HLEN
);

274 i‡(
	`u∆ikñy
(
	`compuã_ù_summed
(
skb
, 
Ál£
)))

275 
îr‹
;

277 
	`vœn_c›y_skb_tci
(
skb
);

279 
	`ovs_vp‹t_ª˚ive
(
vp‹t
, 
skb
);

282 
îr‹
:

283 
	`k‰ì_skb
(
skb
);

284 
	}
}

286 
	$∑ckë_Àngth
(c⁄° 
sk_buff
 *
skb
)

288 
Àngth
 = 
skb
->
Àn
 - 
ETH_HLEN
;

290 i‡(
skb
->
¥Ÿocﬁ
 =
	`ht⁄s
(
ETH_P_8021Q
))

291 
Àngth
 -
VLAN_HLEN
;

293  
Àngth
;

294 
	}
}

296 
boﬁ
 
	$dev_suµ‹ts_vœn_tx
(
√t_devi˚
 *
dev
)

298 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,37)

300  
åue
;

301 #ñi‡
	`deföed
(
HAVE_VLAN_BUG_WORKAROUND
)

302  
dev
->
„©uªs
 & 
NETIF_F_HW_VLAN_TX
;

305  
Ál£
;

307 
	}
}

309 
	$√tdev_£nd
(
vp‹t
 *vp‹t, 
sk_buff
 *
skb
)

311 
√tdev_vp‹t
 *√tdev_vp‹à
	`√tdev_vp‹t_¥iv
(
vp‹t
);

312 
mtu
 = 
√tdev_vp‹t
->
dev
->mtu;

313 
Àn
;

315 i‡(
	`u∆ikñy
(
	`∑ckë_Àngth
(
skb
Ë> 
mtu
 && !
	`skb_is_gso
(skb))) {

316 
	`√t_w¨n_øãlimôed
("%s: dropped over-mtuÖacket: %d > %d\n",

317 
√tdev_vp‹t
->
dev
->
«me
,

318 
	`∑ckë_Àngth
(
skb
), 
mtu
);

319 
îr‹
;

322 
skb
->
dev
 = 
√tdev_vp‹t
->dev;

323 
	`f‹w¨d_ù_summed
(
skb
, 
åue
);

325 i‡(
	`vœn_tx_èg_¥e£¡
(
skb
Ë&& !
	`dev_suµ‹ts_vœn_tx
(skb->
dev
)) {

326 
„©uªs
;

328 
„©uªs
 = 
	`√tif_skb_„©uªs
(
skb
);

330 i‡(!
vœn_tso
)

331 
„©uªs
 &~(
NETIF_F_TSO
 | 
NETIF_F_TSO6
 |

332 
NETIF_F_UFO
 | 
NETIF_F_FSO
);

334 i‡(
	`√tif_√eds_gso
(
skb
, 
„©uªs
)) {

335 
sk_buff
 *
nskb
;

337 
nskb
 = 
	`skb_gso_£gmít
(
skb
, 
„©uªs
);

338 i‡(!
nskb
) {

339 i‡(
	`u∆ikñy
(
	`skb_˛⁄ed
(
skb
) &&

340 
	`pskb_ex∑nd_hód
(
skb
, 0, 0, 
GFP_ATOMIC
))) {

341 
	`k‰ì_skb
(
skb
);

345 
	`skb_shöfo
(
skb
)->
gso_ty≥
 &~
SKB_GSO_DODGY
;

346 
èg
;

349 i‡(
	`IS_ERR
(
nskb
)) {

350 
	`k‰ì_skb
(
skb
);

353 
	`c⁄sume_skb
(
skb
);

354 
skb
 = 
nskb
;

356 
Àn
 = 0;

358 
nskb
 = 
skb
->
√xt
;

359 
skb
->
√xt
 = 
NULL
;

361 
skb
 = 
	`__vœn_put_èg
(skb, 
	`vœn_tx_èg_gë
(skb));

362 i‡(
	`likñy
(
skb
)) {

363 
Àn
 +
skb
->len;

364 
	`vœn_£t_tci
(
skb
, 0);

365 
	`dev_queue_xmô
(
skb
);

368 
skb
 = 
nskb
;

369 } 
skb
);

371  
Àn
;

374 
èg
:

375 
skb
 = 
	`__vœn_put_èg
(skb, 
	`vœn_tx_èg_gë
(skb));

376 i‡(
	`u∆ikñy
(!
skb
))

378 
	`vœn_£t_tci
(
skb
, 0);

381 
Àn
 = 
skb
->len;

382 
	`dev_queue_xmô
(
skb
);

384  
Àn
;

386 
îr‹
:

387 
	`k‰ì_skb
(
skb
);

388 
	`ovs_vp‹t_ªc‹d_îr‹
(
vp‹t
, 
VPORT_E_TX_DROPPED
);

390 
	}
}

393 
vp‹t
 *
	$ovs_√tdev_gë_vp‹t
(
√t_devi˚
 *
dev
)

395 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,36)

396 #i‡
IFF_OVS_DATAPATH
 != 0

397 i‡(
	`likñy
(
dev
->
¥iv_Êags
 & 
IFF_OVS_DATAPATH
))

399 i‡(
	`likñy
(
	`rcu_ac˚ss_poöãr
(
dev
->
rx_h™dÀr
Ë=
√tdev_‰ame_hook
))

401  (
vp‹t
 *)
	`rcu_dîe„ªn˚_π∆
(
dev
->
rx_h™dÀr_d©a
);

403  
NULL
;

405  (
vp‹t
 *)
	`rcu_dîe„ªn˚_π∆
(
dev
->
br_p‹t
);

407 
	}
}

409 c⁄° 
vp‹t_›s
 
	govs_√tdev_vp‹t_›s
 = {

410 .
ty≥
 = 
OVS_VPORT_TYPE_NETDEV
,

411 .
	gÊags
 = 
VPORT_F_REQUIRED
,

412 .
	göô
 = 
√tdev_öô
,

413 .
	gexô
 = 
√tdev_exô
,

414 .
	g¸óã
 = 
√tdev_¸óã
,

415 .
	gde°roy
 = 
√tdev_de°roy
,

416 .
	g£t_addr
 = 
ovs_√tdev_£t_addr
,

417 .
	ggë_«me
 = 
ovs_√tdev_gë_«me
,

418 .
	ggë_addr
 = 
ovs_√tdev_gë_addr
,

419 .
	ggë_kobj
 = 
ovs_√tdev_gë_kobj
,

420 .
	ggë_dev_Êags
 = 
ovs_√tdev_gë_dev_Êags
,

421 .
	gis_ru¬ög
 = 
ovs_√tdev_is_ru¬ög
,

422 .
	ggë_›î°©e
 = 
ovs_√tdev_gë_›î°©e
,

423 .
	ggë_ifödex
 = 
ovs_√tdev_gë_ifödex
,

424 .
	ggë_mtu
 = 
ovs_√tdev_gë_mtu
,

425 .
	g£nd
 = 
√tdev_£nd
,

428 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,36)

435 
	gBRIDGE_MUTUAL_EXCLUSION
;

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/vport-netdev.h

19 #i‚de‡
VPORT_NETDEV_H


20 
	#VPORT_NETDEV_H
 1

	)

22 
	~<löux/√tdevi˚.h
>

23 
	~<löux/rcupd©e.h
>

25 
	~"vp‹t.h
"

27 
vp‹t
 *
ovs_√tdev_gë_vp‹t
(
√t_devi˚
 *
dev
);

29 
	s√tdev_vp‹t
 {

30 
rcu_hód
 
	mrcu
;

32 
√t_devi˚
 *
	mdev
;

35 
ölöe
 
√tdev_vp‹t
 *

36 
	$√tdev_vp‹t_¥iv
(c⁄° 
vp‹t
 *vport)

38  
	`vp‹t_¥iv
(
vp‹t
);

39 
	}
}

41 
ovs_√tdev_£t_addr
(
vp‹t
 *, c⁄° *
addr
);

42 c⁄° *
ovs_√tdev_gë_«me
(c⁄° 
vp‹t
 *);

43 c⁄° *
ovs_√tdev_gë_addr
(c⁄° 
vp‹t
 *);

44 c⁄° *
ovs_√tdev_gë_c⁄fig
(c⁄° 
vp‹t
 *);

45 
kobje˘
 *
ovs_√tdev_gë_kobj
(c⁄° 
vp‹t
 *);

46 
ovs_√tdev_gë_dev_Êags
(c⁄° 
vp‹t
 *);

47 
ovs_√tdev_is_ru¬ög
(c⁄° 
vp‹t
 *);

48 
ovs_√tdev_gë_›î°©e
(c⁄° 
vp‹t
 *);

49 
ovs_√tdev_gë_ifödex
(c⁄° 
vp‹t
 *);

50 
ovs_√tdev_gë_mtu
(c⁄° 
vp‹t
 *);

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/vport-patch.c

19 
	~<löux/kî√l.h
>

20 
	~<löux/jhash.h
>

21 
	~<löux/li°.h
>

22 
	~<löux/π√éök.h
>

23 
	~<√t/√t_«me•a˚.h
>

25 
	~"com∑t.h
"

26 
	~"d©≠©h.h
"

27 
	~"vp‹t.h
"

28 
	~"vp‹t-gíîic.h
"

30 
	s∑tch_c⁄fig
 {

31 
rcu_hód
 
	mrcu
;

33 
	m≥î_«me
[
IFNAMSIZ
];

34 
	mëh_addr
[
ETH_ALEN
];

37 
	s∑tch_vp‹t
 {

38 
rcu_hód
 
	mrcu
;

40 
	m«me
[
IFNAMSIZ
];

43 
hli°_node
 
	mhash_node
;

45 
vp‹t
 
__rcu
 *
	m≥î
;

46 
∑tch_c⁄fig
 
__rcu
 *
	m∑tchc⁄f
;

50 
hli°_hód
 *
	g≥î_èbÀ
;

51 
	#PEER_HASH_BUCKETS
 256

	)

53 
upd©e_≥îs
(
√t
 *, c⁄° *
«me
, 
vp‹t
 *);

55 
∑tch_vp‹t
 *
	$∑tch_vp‹t_¥iv
(c⁄° 
vp‹t
 *vport)

57  
	`vp‹t_¥iv
(
vp‹t
);

58 
	}
}

61 
	$‰ì_c⁄fig
(
rcu_hód
 *
rcu
)

63 
∑tch_c⁄fig
 *
c
 = 
	`c⁄èöî_of
(
rcu
, patch_config,Ñcu);

64 
	`k‰ì
(
c
);

65 
	}
}

67 
	$assign_c⁄fig_rcu
(
vp‹t
 *vport,

68 
∑tch_c⁄fig
 *
√w_c⁄fig
)

70 
∑tch_vp‹t
 *∑tch_vp‹à
	`∑tch_vp‹t_¥iv
(
vp‹t
);

71 
∑tch_c⁄fig
 *
ﬁd_c⁄fig
;

73 
ﬁd_c⁄fig
 = 
	`π∆_dîe„ªn˚
(
∑tch_vp‹t
->
∑tchc⁄f
);

74 
	`rcu_assign_poöãr
(
∑tch_vp‹t
->
∑tchc⁄f
, 
√w_c⁄fig
);

75 
	`ˇŒ_rcu
(&
ﬁd_c⁄fig
->
rcu
, 
‰ì_c⁄fig
);

76 
	}
}

78 
hli°_hód
 *
	$hash_buckë
(
√t
 *√t, c⁄° *
«me
)

80 
hash
 = 
	`jhash
(
«me
, 
	`°æí
“ame), (Ë
√t
);

81  &
≥î_èbÀ
[
hash
 & (
PEER_HASH_BUCKETS
 - 1)];

82 
	}
}

84 
	$∑tch_öô
()

86 
≥î_èbÀ
 = 
	`kzÆloc
(
PEER_HASH_BUCKETS
 * (
hli°_hód
),

87 
GFP_KERNEL
);

88 i‡(!
≥î_èbÀ
)

89  -
ENOMEM
;

92 
	}
}

94 
	$∑tch_exô
()

96 
	`k‰ì
(
≥î_èbÀ
);

97 
	}
}

99 c⁄° 
∆a_pﬁicy
 
	g∑tch_pﬁicy
[
OVS_PATCH_ATTR_MAX
 + 1] = {

100 #ifde‡
HAVE_NLA_NUL_STRING


101 [
OVS_PATCH_ATTR_PEER
] = { .
ty≥
 = 
NLA_NUL_STRING
, .
	gÀn
 = 
IFNAMSIZ
 - 1 },

105 
	$∑tch_£t_c⁄fig
(
vp‹t
 *vp‹t, c⁄° 
∆©å
 *
›ti⁄s
,

106 
∑tch_c⁄fig
 *
∑tchc⁄f
)

108 
∑tch_vp‹t
 *∑tch_vp‹à
	`∑tch_vp‹t_¥iv
(
vp‹t
);

109 
∆©å
 *
a
[
OVS_PATCH_ATTR_MAX
 + 1];

110 c⁄° *
≥î_«me
;

111 
îr
;

113 i‡(!
›ti⁄s
)

114  -
EINVAL
;

116 
îr
 = 
	`∆a_∑r£_√°ed
(
a
, 
OVS_PATCH_ATTR_MAX
, 
›ti⁄s
, 
∑tch_pﬁicy
);

117 i‡(
îr
)

118  
îr
;

120 i‡(!
a
[
OVS_PATCH_ATTR_PEER
] ||

121 
	`CHECK_NUL_STRING
(
a
[
OVS_PATCH_ATTR_PEER
], 
IFNAMSIZ
 - 1))

122  -
EINVAL
;

124 
≥î_«me
 = 
	`∆a_d©a
(
a
[
OVS_PATCH_ATTR_PEER
]);

125 i‡(!
	`°rcmp
(
∑tch_vp‹t
->
«me
, 
≥î_«me
))

126  -
EINVAL
;

128 
	`°r˝y
(
∑tchc⁄f
->
≥î_«me
,Öeer_name);

131 
	}
}

133 
vp‹t
 *
	$∑tch_¸óã
(c⁄° 
vp‹t_∑rms
 *
∑rms
)

135 
vp‹t
 *vport;

136 
∑tch_vp‹t
 *patch_vport;

137 c⁄° *
≥î_«me
;

138 
∑tch_c⁄fig
 *
∑tchc⁄f
;

139 
√t
 *√à
	`ovs_dp_gë_√t
(
∑rms
->
dp
);

140 
îr
;

142 
vp‹t
 = 
	`ovs_vp‹t_Æloc
((
∑tch_vp‹t
),

143 &
ovs_∑tch_vp‹t_›s
, 
∑rms
);

144 i‡(
	`IS_ERR
(
vp‹t
)) {

145 
îr
 = 
	`PTR_ERR
(
vp‹t
);

146 
îr‹
;

149 
∑tch_vp‹t
 = 
	`∑tch_vp‹t_¥iv
(
vp‹t
);

151 
	`°r˝y
(
∑tch_vp‹t
->
«me
, 
∑rms
->name);

153 
∑tchc⁄f
 = 
	`kmÆloc
((
∑tch_c⁄fig
), 
GFP_KERNEL
);

154 i‡(!
∑tchc⁄f
) {

155 
îr
 = -
ENOMEM
;

156 
îr‹_‰ì_vp‹t
;

159 
îr
 = 
	`∑tch_£t_c⁄fig
(
vp‹t
, 
∑rms
->
›ti⁄s
, 
∑tchc⁄f
);

160 i‡(
îr
)

161 
îr‹_‰ì_∑tchc⁄f
;

163 
	`øndom_ëhî_addr
(
∑tchc⁄f
->
ëh_addr
);

165 
	`rcu_assign_poöãr
(
∑tch_vp‹t
->
∑tchc⁄f
,Öatchconf);

167 
≥î_«me
 = 
∑tchc⁄f
->peer_name;

168 
	`hli°_add_hód
(&
∑tch_vp‹t
->
hash_node
, 
	`hash_buckë
(
√t
, 
≥î_«me
));

169 
	`rcu_assign_poöãr
(
∑tch_vp‹t
->
≥î
, 
	`ovs_vp‹t_loˇã
(
√t
, 
≥î_«me
));

170 
	`upd©e_≥îs
(
√t
, 
∑tch_vp‹t
->
«me
, 
vp‹t
);

172  
vp‹t
;

174 
îr‹_‰ì_∑tchc⁄f
:

175 
	`k‰ì
(
∑tchc⁄f
);

176 
îr‹_‰ì_vp‹t
:

177 
	`ovs_vp‹t_‰ì
(
vp‹t
);

178 
îr‹
:

179  
	`ERR_PTR
(
îr
);

180 
	}
}

182 
	$‰ì_p‹t_rcu
(
rcu_hód
 *
rcu
)

184 
∑tch_vp‹t
 *∑tch_vp‹à
	`c⁄èöî_of
(
rcu
,

185 
∑tch_vp‹t
, 
rcu
);

187 
	`k‰ì
((
∑tch_c⁄fig
 
__f‹˚
 *)
∑tch_vp‹t
->
∑tchc⁄f
);

188 
	`ovs_vp‹t_‰ì
(
	`vp‹t_‰om_¥iv
(
∑tch_vp‹t
));

189 
	}
}

191 
	$∑tch_de°roy
(
vp‹t
 *vport)

193 
∑tch_vp‹t
 *∑tch_vp‹à
	`∑tch_vp‹t_¥iv
(
vp‹t
);

195 
	`upd©e_≥îs
(
	`ovs_dp_gë_√t
(
vp‹t
->
dp
), 
∑tch_vp‹t
->
«me
, 
NULL
);

196 
	`hli°_dñ
(&
∑tch_vp‹t
->
hash_node
);

197 
	`ˇŒ_rcu
(&
∑tch_vp‹t
->
rcu
, 
‰ì_p‹t_rcu
);

198 
	}
}

200 
	$∑tch_£t_›ti⁄s
(
vp‹t
 *vp‹t, 
∆©å
 *
›ti⁄s
)

202 
∑tch_vp‹t
 *∑tch_vp‹à
	`∑tch_vp‹t_¥iv
(
vp‹t
);

203 
∑tch_c⁄fig
 *
∑tchc⁄f
;

204 
îr
;

206 
∑tchc⁄f
 = 
	`kmemdup
(
	`π∆_dîe„ªn˚
(
∑tch_vp‹t
->patchconf),

207 (
∑tch_c⁄fig
), 
GFP_KERNEL
);

208 i‡(!
∑tchc⁄f
) {

209 
îr
 = -
ENOMEM
;

210 
îr‹
;

213 
îr
 = 
	`∑tch_£t_c⁄fig
(
vp‹t
, 
›ti⁄s
, 
∑tchc⁄f
);

214 i‡(
îr
)

215 
îr‹_‰ì
;

217 
	`assign_c⁄fig_rcu
(
vp‹t
, 
∑tchc⁄f
);

219 
	`hli°_dñ
(&
∑tch_vp‹t
->
hash_node
);

221 
	`rcu_assign_poöãr
(
∑tch_vp‹t
->
≥î
,

222 
	`ovs_vp‹t_loˇã
(
	`ovs_dp_gë_√t
(
vp‹t
->
dp
), 
∑tchc⁄f
->
≥î_«me
));

224 
	`hli°_add_hód
(&
∑tch_vp‹t
->
hash_node
,

225 
	`hash_buckë
(
	`ovs_dp_gë_√t
(
vp‹t
->
dp
), 
∑tchc⁄f
->
≥î_«me
));

228 
îr‹_‰ì
:

229 
	`k‰ì
(
∑tchc⁄f
);

230 
îr‹
:

231  
îr
;

232 
	}
}

234 
	$upd©e_≥îs
(
√t
 *√t, c⁄° *
«me
, 
vp‹t
 *vport)

236 
hli°_hód
 *
buckë
 = 
	`hash_buckë
(
√t
, 
«me
);

237 
∑tch_vp‹t
 *
≥î_vp‹t
;

238 
hli°_node
 *
node
;

240 
	`hli°_f‹_óch_íåy
(
≥î_vp‹t
, 
node
, 
buckë
, 
hash_node
) {

241 
vp‹t
 *
cuº_vp‹t
 = 
	`vp‹t_‰om_¥iv
(
≥î_vp‹t
);

242 c⁄° *
≥î_«me
;

244 
≥î_«me
 = 
	`π∆_dîe„ªn˚
(
≥î_vp‹t
->
∑tchc⁄f
)->peer_name;

245 i‡(!
	`°rcmp
(
≥î_«me
, 
«me
Ë&& 
	`√t_eq
(
	`ovs_dp_gë_√t
(
cuº_vp‹t
->
dp
), 
√t
))

246 
	`rcu_assign_poöãr
(
≥î_vp‹t
->
≥î
, 
vp‹t
);

248 
	}
}

250 
	$∑tch_£t_addr
(
vp‹t
 *vp‹t, c⁄° *
addr
)

252 
∑tch_vp‹t
 *∑tch_vp‹à
	`∑tch_vp‹t_¥iv
(
vp‹t
);

253 
∑tch_c⁄fig
 *
∑tchc⁄f
;

255 
∑tchc⁄f
 = 
	`kmemdup
(
	`π∆_dîe„ªn˚
(
∑tch_vp‹t
->patchconf),

256 (
∑tch_c⁄fig
), 
GFP_KERNEL
);

257 i‡(!
∑tchc⁄f
)

258  -
ENOMEM
;

260 
	`mem˝y
(
∑tchc⁄f
->
ëh_addr
, 
addr
, 
ETH_ALEN
);

261 
	`assign_c⁄fig_rcu
(
vp‹t
, 
∑tchc⁄f
);

264 
	}
}

267 c⁄° *
	$∑tch_gë_«me
(c⁄° 
vp‹t
 *vport)

269 c⁄° 
∑tch_vp‹t
 *∑tch_vp‹à
	`∑tch_vp‹t_¥iv
(
vp‹t
);

270  
∑tch_vp‹t
->
«me
;

271 
	}
}

273 c⁄° *
	$∑tch_gë_addr
(c⁄° 
vp‹t
 *vport)

275 c⁄° 
∑tch_vp‹t
 *∑tch_vp‹à
	`∑tch_vp‹t_¥iv
(
vp‹t
);

276  
	`rcu_dîe„ªn˚_π∆
(
∑tch_vp‹t
->
∑tchc⁄f
)->
ëh_addr
;

277 
	}
}

279 
	$∑tch_gë_›ti⁄s
(c⁄° 
vp‹t
 *vp‹t, 
sk_buff
 *
skb
)

281 
∑tch_vp‹t
 *∑tch_vp‹à
	`∑tch_vp‹t_¥iv
(
vp‹t
);

282 
∑tch_c⁄fig
 *
∑tchc⁄f
 = 
	`rcu_dîe„ªn˚_π∆
(
∑tch_vp‹t
->patchconf);

284  
	`∆a_put_°rög
(
skb
, 
OVS_PATCH_ATTR_PEER
, 
∑tchc⁄f
->
≥î_«me
);

285 
	}
}

287 
	$∑tch_£nd
(
vp‹t
 *vp‹t, 
sk_buff
 *
skb
)

289 
∑tch_vp‹t
 *∑tch_vp‹à
	`∑tch_vp‹t_¥iv
(
vp‹t
);

290 
vp‹t
 *
≥î
 = 
	`rcu_dîe„ªn˚
(
∑tch_vp‹t
->peer);

291 
skb_Àn
 = 
skb
->
Àn
;

293 i‡(!
≥î
) {

294 
	`k‰ì_skb
(
skb
);

295 
	`ovs_vp‹t_ªc‹d_îr‹
(
vp‹t
, 
VPORT_E_TX_DROPPED
);

300 
	`ovs_vp‹t_ª˚ive
(
≥î
, 
skb
);

301  
skb_Àn
;

302 
	}
}

304 c⁄° 
vp‹t_›s
 
	govs_∑tch_vp‹t_›s
 = {

305 .
ty≥
 = 
OVS_VPORT_TYPE_PATCH
,

306 .
	göô
 = 
∑tch_öô
,

307 .
	gexô
 = 
∑tch_exô
,

308 .
	g¸óã
 = 
∑tch_¸óã
,

309 .
	gde°roy
 = 
∑tch_de°roy
,

310 .
	g£t_addr
 = 
∑tch_£t_addr
,

311 .
	ggë_«me
 = 
∑tch_gë_«me
,

312 .
	ggë_addr
 = 
∑tch_gë_addr
,

313 .
	ggë_›ti⁄s
 = 
∑tch_gë_›ti⁄s
,

314 .
	g£t_›ti⁄s
 = 
∑tch_£t_›ti⁄s
,

315 .
	ggë_dev_Êags
 = 
ovs_vp‹t_gí_gë_dev_Êags
,

316 .
	gis_ru¬ög
 = 
ovs_vp‹t_gí_is_ru¬ög
,

317 .
	ggë_›î°©e
 = 
ovs_vp‹t_gí_gë_›î°©e
,

318 .
	g£nd
 = 
∑tch_£nd
,

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/vport.c

19 
	~<löux/ëhîdevi˚.h
>

20 
	~<löux/if.h
>

21 
	~<löux/if_vœn.h
>

22 
	~<löux/jhash.h
>

23 
	~<löux/kî√l.h
>

24 
	~<löux/li°.h
>

25 
	~<löux/muãx.h
>

26 
	~<löux/≥r˝u.h
>

27 
	~<löux/rcupd©e.h
>

28 
	~<löux/π√éök.h
>

29 
	~<löux/com∑t.h
>

30 
	~<löux/vîsi⁄.h
>

31 
	~<√t/√t_«me•a˚.h
>

33 
	~"d©≠©h.h
"

34 
	~"vp‹t.h
"

35 
	~"vp‹t-öã∫Æ_dev.h
"

39 c⁄° 
vp‹t_›s
 *
	gba£_vp‹t_›s_li°
[] = {

40 &
ovs_√tdev_vp‹t_›s
,

41 &
ovs_öã∫Æ_vp‹t_›s
,

42 &
ovs_∑tch_vp‹t_›s
,

43 &
ovs_gª_vp‹t_›s
,

44 &
ovs_gª_·_vp‹t_›s
,

45 &
ovs_gª64_vp‹t_›s
,

46 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,26)

47 &
ovs_ˇpw≠_vp‹t_›s
,

51 c⁄° 
vp‹t_›s
 **
	gvp‹t_›s_li°
;

52 
	gn_vp‹t_ty≥s
;

55 
hli°_hód
 *
	gdev_èbÀ
;

56 
	#VPORT_HASH_BUCKETS
 1024

	)

64 
	$ovs_vp‹t_öô
()

66 
îr
;

67 
i
;

69 
dev_èbÀ
 = 
	`kzÆloc
(
VPORT_HASH_BUCKETS
 * (
hli°_hód
),

70 
GFP_KERNEL
);

71 i‡(!
dev_èbÀ
) {

72 
îr
 = -
ENOMEM
;

73 
îr‹
;

76 
vp‹t_›s_li°
 = 
	`kmÆloc
(
	`ARRAY_SIZE
(
ba£_vp‹t_›s_li°
) *

77 (
vp‹t_›s
 *), 
GFP_KERNEL
);

78 i‡(!
vp‹t_›s_li°
) {

79 
îr
 = -
ENOMEM
;

80 
îr‹_dev_èbÀ
;

83 
i
 = 0; i < 
	`ARRAY_SIZE
(
ba£_vp‹t_›s_li°
); i++) {

84 c⁄° 
vp‹t_›s
 *
√w_›s
 = 
ba£_vp‹t_›s_li°
[
i
];

86 i‡(
√w_›s
->
öô
)

87 
îr
 = 
√w_›s
->
	`öô
();

89 
îr
 = 0;

91 i‡(!
îr
)

92 
vp‹t_›s_li°
[
n_vp‹t_ty≥s
++] = 
√w_›s
;

93 i‡(
√w_›s
->
Êags
 & 
VPORT_F_REQUIRED
) {

94 
	`ovs_vp‹t_exô
();

95 
îr‹
;

101 
îr‹_dev_èbÀ
:

102 
	`k‰ì
(
dev_èbÀ
);

103 
îr‹
:

104  
îr
;

105 
	}
}

113 
	$ovs_vp‹t_exô
()

115 
i
;

117 
i
 = 0; i < 
n_vp‹t_ty≥s
; i++) {

118 i‡(
vp‹t_›s_li°
[
i
]->
exô
)

119 
vp‹t_›s_li°
[
i
]->
	`exô
();

122 
	`k‰ì
(
vp‹t_›s_li°
);

123 
	`k‰ì
(
dev_èbÀ
);

124 
	}
}

126 
hli°_hód
 *
	$hash_buckë
(
√t
 *√t, c⁄° *
«me
)

128 
hash
 = 
	`jhash
(
«me
, 
	`°æí
“ame), (Ë
√t
);

129  &
dev_èbÀ
[
hash
 & (
VPORT_HASH_BUCKETS
 - 1)];

130 
	}
}

139 
vp‹t
 *
	$ovs_vp‹t_loˇã
(
√t
 *√t, c⁄° *
«me
)

141 
hli°_hód
 *
buckë
 = 
	`hash_buckë
(
√t
, 
«me
);

142 
vp‹t
 *vport;

143 
hli°_node
 *
node
;

145 
	`hli°_f‹_óch_íåy_rcu
(
vp‹t
, 
node
, 
buckë
, 
hash_node
)

146 i‡(!
	`°rcmp
(
«me
, 
vp‹t
->
›s
->
	`gë_«me
(vport)) &&

147 
	`√t_eq
(
	`ovs_dp_gë_√t
(
vp‹t
->
dp
), 
√t
))

148  
vp‹t
;

150  
NULL
;

151 
	}
}

153 
	$ªÀa£_vp‹t
(
kobje˘
 *
kobj
)

155 
vp‹t
 *
p
 = 
	`c⁄èöî_of
(
kobj
, vport, kobj);

156 
	`k‰ì
(
p
);

157 
	}
}

159 
kobj_ty≥
 
	gbΩ‹t_kty≥
 = {

160 #ifde‡
CONFIG_SYSFS


161 .
sysfs_›s
 = &
ovs_bΩ‹t_sysfs_›s
,

163 .
	gªÀa£
 = 
ªÀa£_vp‹t


177 
vp‹t
 *
	$ovs_vp‹t_Æloc
(
¥iv_size
, c⁄° 
vp‹t_›s
 *
›s
,

178 c⁄° 
vp‹t_∑rms
 *
∑rms
)

180 
vp‹t
 *vport;

181 
size_t
 
Æloc_size
;

183 
Æloc_size
 = (
vp‹t
);

184 i‡(
¥iv_size
) {

185 
Æloc_size
 = 
	`ALIGN
◊Œoc_size, 
VPORT_ALIGN
);

186 
Æloc_size
 +
¥iv_size
;

189 
vp‹t
 = 
	`kzÆloc
(
Æloc_size
, 
GFP_KERNEL
);

190 i‡(!
vp‹t
)

191  
	`ERR_PTR
(-
ENOMEM
);

193 
vp‹t
->
dp
 = 
∑rms
->dp;

194 
vp‹t
->
p‹t_no
 = 
∑rms
->port_no;

195 
vp‹t
->
upˇŒ_p‹tid
 = 
∑rms
->upcall_portid;

196 
vp‹t
->
›s
 = ops;

197 
	`INIT_HLIST_NODE
(&
vp‹t
->
dp_hash_node
);

201 
vp‹t
->
kobj
.
k£t
 = 
NULL
;

202 
	`kobje˘_öô
(&
vp‹t
->
kobj
, &
bΩ‹t_kty≥
);

204 
vp‹t
->
≥r˝u_°©s
 = 
	`Æloc_≥r˝u
(
vp‹t_≥r˝u_°©s
);

205 i‡(!
vp‹t
->
≥r˝u_°©s
) {

206 
	`k‰ì
(
vp‹t
);

207  
	`ERR_PTR
(-
ENOMEM
);

210 
	`•ö_lock_öô
(&
vp‹t
->
°©s_lock
);

212  
vp‹t
;

213 
	}
}

225 
	$ovs_vp‹t_‰ì
(
vp‹t
 *vport)

227 
	`‰ì_≥r˝u
(
vp‹t
->
≥r˝u_°©s
);

229 
	`kobje˘_put
(&
vp‹t
->
kobj
);

230 
	}
}

240 
vp‹t
 *
	$ovs_vp‹t_add
(c⁄° 
vp‹t_∑rms
 *
∑rms
)

242 
vp‹t
 *vport;

243 
îr
 = 0;

244 
i
;

246 
	`ASSERT_RTNL
();

248 
i
 = 0; i < 
n_vp‹t_ty≥s
; i++) {

249 i‡(
vp‹t_›s_li°
[
i
]->
ty≥
 =
∑rms
->type) {

250 
hli°_hód
 *
buckë
;

252 
vp‹t
 = 
vp‹t_›s_li°
[
i
]->
	`¸óã
(
∑rms
);

253 i‡(
	`IS_ERR
(
vp‹t
)) {

254 
îr
 = 
	`PTR_ERR
(
vp‹t
);

255 
out
;

258 
buckë
 = 
	`hash_buckë
(
	`ovs_dp_gë_√t
(
vp‹t
->
dp
),

259 
vp‹t
->
›s
->
	`gë_«me
(vport));

260 
	`hli°_add_hód_rcu
(&
vp‹t
->
hash_node
, 
buckë
);

261  
vp‹t
;

265 
îr
 = -
EAFNOSUPPORT
;

267 
out
:

268  
	`ERR_PTR
(
îr
);

269 
	}
}

280 
	$ovs_vp‹t_£t_›ti⁄s
(
vp‹t
 *vp‹t, 
∆©å
 *
›ti⁄s
)

282 
	`ASSERT_RTNL
();

284 i‡(!
vp‹t
->
›s
->
£t_›ti⁄s
)

285  -
EOPNOTSUPP
;

286  
vp‹t
->
›s
->
	`£t_›ti⁄s
(vp‹t, 
›ti⁄s
);

287 
	}
}

297 
	$ovs_vp‹t_dñ
(
vp‹t
 *vport)

299 
	`ASSERT_RTNL
();

301 
	`hli°_dñ_rcu
(&
vp‹t
->
hash_node
);

303 
vp‹t
->
›s
->
	`de°roy
(vport);

304 
	}
}

316 
	$ovs_vp‹t_£t_addr
(
vp‹t
 *vp‹t, c⁄° *
addr
)

318 
	`ASSERT_RTNL
();

320 i‡(!
	`is_vÆid_ëhî_addr
(
addr
))

321  -
EADDRNOTAVAIL
;

323 i‡(
vp‹t
->
›s
->
£t_addr
)

324  
vp‹t
->
›s
->
	`£t_addr
(vp‹t, 
addr
);

326  -
EOPNOTSUPP
;

327 
	}
}

342 
	$ovs_vp‹t_£t_°©s
(
vp‹t
 *vp‹t, 
ovs_vp‹t_°©s
 *
°©s
)

344 
	`ASSERT_RTNL
();

346 
	`•ö_lock_bh
(&
vp‹t
->
°©s_lock
);

347 
vp‹t
->
off£t_°©s
 = *
°©s
;

348 
	`•ö_u∆ock_bh
(&
vp‹t
->
°©s_lock
);

349 
	}
}

361 
	$ovs_vp‹t_gë_°©s
(
vp‹t
 *vp‹t, 
ovs_vp‹t_°©s
 *
°©s
)

363 
i
;

376 
	`•ö_lock_bh
(&
vp‹t
->
°©s_lock
);

378 *
°©s
 = 
vp‹t
->
off£t_°©s
;

380 
°©s
->
rx_îr‹s
 +
vp‹t
->
îr_°©s
.rx_errors;

381 
°©s
->
tx_îr‹s
 +
vp‹t
->
îr_°©s
.tx_errors;

382 
°©s
->
tx_dr›≥d
 +
vp‹t
->
îr_°©s
.tx_dropped;

383 
°©s
->
rx_dr›≥d
 +
vp‹t
->
îr_°©s
.rx_dropped;

385 
	`•ö_u∆ock_bh
(&
vp‹t
->
°©s_lock
);

387 
	`f‹_óch_possibÀ_˝u
(
i
) {

388 c⁄° 
vp‹t_≥r˝u_°©s
 *
≥r˝u_°©s
;

389 
vp‹t_≥r˝u_°©s
 
loˇl_°©s
;

390 
°¨t
;

392 
≥r˝u_°©s
 = 
	`≥r_˝u_±r
(
vp‹t
->≥r˝u_°©s, 
i
);

395 
°¨t
 = 
	`u64_°©s_„tch_begö_bh
(&
≥r˝u_°©s
->
sync
);

396 
loˇl_°©s
 = *
≥r˝u_°©s
;

397 } 
	`u64_°©s_„tch_ªåy_bh
(&
≥r˝u_°©s
->
sync
, 
°¨t
));

399 
°©s
->
rx_byãs
 +
loˇl_°©s
.rx_bytes;

400 
°©s
->
rx_∑ckës
 +
loˇl_°©s
.rx_packets;

401 
°©s
->
tx_byãs
 +
loˇl_°©s
.tx_bytes;

402 
°©s
->
tx_∑ckës
 +
loˇl_°©s
.tx_packets;

404 
	}
}

422 
	$ovs_vp‹t_gë_›ti⁄s
(c⁄° 
vp‹t
 *vp‹t, 
sk_buff
 *
skb
)

424 
∆©å
 *
∆a
;

426 
∆a
 = 
	`∆a_√°_°¨t
(
skb
, 
OVS_VPORT_ATTR_OPTIONS
);

427 i‡(!
∆a
)

428  -
EMSGSIZE
;

430 i‡(
vp‹t
->
›s
->
gë_›ti⁄s
) {

431 
îr
 = 
vp‹t
->
›s
->
	`gë_›ti⁄s
(vp‹t, 
skb
);

432 i‡(
îr
) {

433 
	`∆a_√°_ˇn˚l
(
skb
, 
∆a
);

434  
îr
;

438 
	`∆a_√°_íd
(
skb
, 
∆a
);

440 
	}
}

452 
	$ovs_vp‹t_ª˚ive
(
vp‹t
 *vp‹t, 
sk_buff
 *
skb
)

454 
vp‹t_≥r˝u_°©s
 *
°©s
;

456 
°©s
 = 
	`≥r_˝u_±r
(
vp‹t
->
≥r˝u_°©s
, 
	`smp_¥o˚ss‹_id
());

458 
	`u64_°©s_upd©e_begö
(&
°©s
->
sync
);

459 
°©s
->
rx_∑ckës
++;

460 
°©s
->
rx_byãs
 +
skb
->
Àn
;

461 
	`u64_°©s_upd©e_íd
(&
°©s
->
sync
);

463 i‡(!(
vp‹t
->
›s
->
Êags
 & 
VPORT_F_FLOW
))

464 
	`OVS_CB
(
skb
)->
Êow
 = 
NULL
;

466 i‡(!(
vp‹t
->
›s
->
Êags
 & 
VPORT_F_TUN_ID
))

467 
	`OVS_CB
(
skb
)->
tun_key
 = 
NULL
;

469 
	`ovs_dp_¥o˚ss_ª˚ived_∑ckë
(
vp‹t
, 
skb
);

470 
	}
}

481 
	$ovs_vp‹t_£nd
(
vp‹t
 *vp‹t, 
sk_buff
 *
skb
)

483 
£¡
 = 
vp‹t
->
›s
->
	`£nd
(vp‹t, 
skb
);

485 i‡(
	`likñy
(
£¡
)) {

486 
vp‹t_≥r˝u_°©s
 *
°©s
;

488 
°©s
 = 
	`≥r_˝u_±r
(
vp‹t
->
≥r˝u_°©s
, 
	`smp_¥o˚ss‹_id
());

490 
	`u64_°©s_upd©e_begö
(&
°©s
->
sync
);

491 
°©s
->
tx_∑ckës
++;

492 
°©s
->
tx_byãs
 +
£¡
;

493 
	`u64_°©s_upd©e_íd
(&
°©s
->
sync
);

495  
£¡
;

496 
	}
}

507 
	$ovs_vp‹t_ªc‹d_îr‹
(
vp‹t
 *vp‹t, 
vp‹t_îr_ty≥
 
îr_ty≥
)

509 
	`•ö_lock
(&
vp‹t
->
°©s_lock
);

511 
îr_ty≥
) {

512 
VPORT_E_RX_DROPPED
:

513 
vp‹t
->
îr_°©s
.
rx_dr›≥d
++;

516 
VPORT_E_RX_ERROR
:

517 
vp‹t
->
îr_°©s
.
rx_îr‹s
++;

520 
VPORT_E_TX_DROPPED
:

521 
vp‹t
->
îr_°©s
.
tx_dr›≥d
++;

524 
VPORT_E_TX_ERROR
:

525 
vp‹t
->
îr_°©s
.
tx_îr‹s
++;

529 
	`•ö_u∆ock
(&
vp‹t
->
°©s_lock
);

530 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/datapath/vport.h

19 #i‚de‡
VPORT_H


20 
	#VPORT_H
 1

	)

22 
	~<löux/li°.h
>

23 
	~<löux/√éök.h
>

24 
	~<löux/›ívswôch.h
>

25 
	~<löux/skbuff.h
>

26 
	~<löux/•ölock.h
>

27 
	~<löux/u64_°©s_sync.h
>

29 
	~"vp‹t-ˇpw≠.h
"

31 
	gvp‹t
;

32 
	gvp‹t_∑rms
;

34 
	svp‹t_√t
 {

35 
ˇpw≠_√t
 
	mˇpw≠
;

40 
ovs_vp‹t_öô
();

41 
ovs_vp‹t_exô
();

43 
vp‹t
 *
ovs_vp‹t_add
(c⁄° 
vp‹t_∑rms
 *);

44 
ovs_vp‹t_dñ
(
vp‹t
 *);

46 
vp‹t
 *
ovs_vp‹t_loˇã
(
√t
 *√t, c⁄° *
«me
);

48 
ovs_vp‹t_£t_addr
(
vp‹t
 *, const *);

49 
ovs_vp‹t_£t_°©s
(
vp‹t
 *, 
ovs_vp‹t_°©s
 *);

50 
ovs_vp‹t_gë_°©s
(
vp‹t
 *, 
ovs_vp‹t_°©s
 *);

52 
ovs_vp‹t_£t_›ti⁄s
(
vp‹t
 *, 
∆©å
 *
›ti⁄s
);

53 
ovs_vp‹t_gë_›ti⁄s
(c⁄° 
vp‹t
 *, 
sk_buff
 *);

55 
ovs_vp‹t_£nd
(
vp‹t
 *, 
sk_buff
 *);

59 
	svp‹t_≥r˝u_°©s
 {

60 
u64
 
	mrx_byãs
;

61 
u64
 
	mrx_∑ckës
;

62 
u64
 
	mtx_byãs
;

63 
u64
 
	mtx_∑ckës
;

64 
u64_°©s_sync
 
	msync
;

67 
	svp‹t_îr_°©s
 {

68 
u64
 
	mrx_dr›≥d
;

69 
u64
 
	mrx_îr‹s
;

70 
u64
 
	mtx_dr›≥d
;

71 
u64
 
	mtx_îr‹s
;

94 
	svp‹t
 {

95 
rcu_hód
 
	mrcu
;

96 
u16
 
	mp‹t_no
;

97 
d©≠©h
 *
	mdp
;

98 
kobje˘
 
	mkobj
;

99 
	mlök«me
[
IFNAMSIZ
];

100 
u32
 
	mupˇŒ_p‹tid
;

102 
hli°_node
 
	mhash_node
;

103 
hli°_node
 
	mdp_hash_node
;

104 c⁄° 
vp‹t_›s
 *
	m›s
;

106 
vp‹t_≥r˝u_°©s
 
__≥r˝u
 *
	m≥r˝u_°©s
;

108 
•ölock_t
 
	m°©s_lock
;

109 
vp‹t_îr_°©s
 
	mîr_°©s
;

110 
ovs_vp‹t_°©s
 
	moff£t_°©s
;

113 
	#VPORT_F_REQUIRED
 (1 << 0Ë

	)

114 
	#VPORT_F_FLOW
 (1 << 1Ë

	)

115 
	#VPORT_F_TUN_ID
 (1 << 2Ë

	)

127 
	svp‹t_∑rms
 {

128 c⁄° *
	m«me
;

129 
ovs_vp‹t_ty≥
 
	mty≥
;

130 
∆©å
 *
	m›ti⁄s
;

133 
d©≠©h
 *
	mdp
;

134 
u16
 
	mp‹t_no
;

135 
u32
 
	mupˇŒ_p‹tid
;

172 
	svp‹t_›s
 {

173 
ovs_vp‹t_ty≥
 
	mty≥
;

174 
u32
 
	mÊags
;

177 (*
	möô
)();

178 (*
	mexô
)();

181 
	mvp‹t
 *(*
	m¸óã
)(c⁄° 
	mvp‹t_∑rms
 *);

182 (*
	mde°roy
)(
	mvp‹t
 *);

184 (*
	m£t_›ti⁄s
)(
	mvp‹t
 *, 
	m∆©å
 *);

185 (*
	mgë_›ti⁄s
)(c⁄° 
	mvp‹t
 *, 
	msk_buff
 *);

187 (*
	m£t_addr
)(
	mvp‹t
 *, const *);

190 c⁄° *(*
	mgë_«me
)(c⁄° 
	mvp‹t
 *);

191 c⁄° *(*
	mgë_addr
)(c⁄° 
	mvp‹t
 *);

192 (*
	mgë_c⁄fig
)(c⁄° 
	mvp‹t
 *, *);

193 
	mkobje˘
 *(*
	mgë_kobj
)(c⁄° 
	mvp‹t
 *);

195 (*
	mgë_dev_Êags
)(c⁄° 
	mvp‹t
 *);

196 (*
	mis_ru¬ög
)(c⁄° 
	mvp‹t
 *);

197 (*
	mgë_›î°©e
)(c⁄° 
	mvp‹t
 *);

199 (*
	mgë_ifödex
)(c⁄° 
	mvp‹t
 *);

201 (*
	mgë_mtu
)(c⁄° 
	mvp‹t
 *);

203 (*
	m£nd
)(
	mvp‹t
 *, 
	msk_buff
 *);

206 
	evp‹t_îr_ty≥
 {

207 
	mVPORT_E_RX_DROPPED
,

208 
	mVPORT_E_RX_ERROR
,

209 
	mVPORT_E_TX_DROPPED
,

210 
	mVPORT_E_TX_ERROR
,

213 
vp‹t
 *
ovs_vp‹t_Æloc
(
¥iv_size
, c⁄° 
vp‹t_›s
 *,

214 c⁄° 
vp‹t_∑rms
 *);

215 
ovs_vp‹t_‰ì
(
vp‹t
 *);

217 
	#VPORT_ALIGN
 8

	)

228 
ölöe
 *
	$vp‹t_¥iv
(c⁄° 
vp‹t
 *vport)

230  (
u8
 *)
vp‹t
 + 
	`ALIGN
((vp‹t), 
VPORT_ALIGN
);

231 
	}
}

243 
ölöe
 
vp‹t
 *
	$vp‹t_‰om_¥iv
(c⁄° *
¥iv
)

245  (
vp‹t
 *)(
¥iv
 - 
	`ALIGN
((vp‹t), 
VPORT_ALIGN
));

246 
	}
}

248 
ovs_vp‹t_ª˚ive
(
vp‹t
 *, 
sk_buff
 *);

249 
ovs_vp‹t_ªc‹d_îr‹
(
vp‹t
 *, 
vp‹t_îr_ty≥
 
îr_ty≥
);

253 c⁄° 
vp‹t_›s
 
ovs_√tdev_vp‹t_›s
;

254 c⁄° 
vp‹t_›s
 
ovs_öã∫Æ_vp‹t_›s
;

255 c⁄° 
vp‹t_›s
 
ovs_∑tch_vp‹t_›s
;

256 c⁄° 
vp‹t_›s
 
ovs_gª_vp‹t_›s
;

257 c⁄° 
vp‹t_›s
 
ovs_gª_·_vp‹t_›s
;

258 c⁄° 
vp‹t_›s
 
ovs_gª64_vp‹t_›s
;

259 c⁄° 
vp‹t_›s
 
ovs_ˇpw≠_vp‹t_›s
;

	@/home/lsch/mytest/openvswitch-1.9.0/include/linux/openvswitch.h

40 #i‚de‡
_LINUX_OPENVSWITCH_H


41 
	#_LINUX_OPENVSWITCH_H
 1

	)

43 
	~<löux/ty≥s.h
>

54 
	sovs_hódî
 {

55 
	mdp_ifödex
;

60 
	#OVS_DATAPATH_FAMILY
 "ovs_d©≠©h"

	)

61 
	#OVS_DATAPATH_MCGROUP
 "ovs_d©≠©h"

	)

62 
	#OVS_DATAPATH_VERSION
 0x1

	)

64 
	eovs_d©≠©h_cmd
 {

65 
	mOVS_DP_CMD_UNSPEC
,

66 
	mOVS_DP_CMD_NEW
,

67 
	mOVS_DP_CMD_DEL
,

68 
	mOVS_DP_CMD_GET
,

69 
	mOVS_DP_CMD_SET


89 
	eovs_d©≠©h_©å
 {

90 
	mOVS_DP_ATTR_UNSPEC
,

91 
	mOVS_DP_ATTR_NAME
,

92 
	mOVS_DP_ATTR_UPCALL_PID
,

93 
	mOVS_DP_ATTR_STATS
,

94 
	m__OVS_DP_ATTR_MAX


97 
	#OVS_DP_ATTR_MAX
 (
__OVS_DP_ATTR_MAX
 - 1)

	)

99 
	sovs_dp_°©s
 {

100 
__u64
 
	mn_hô
;

101 
__u64
 
	mn_mis£d
;

102 
__u64
 
	mn_lo°
;

103 
__u64
 
	mn_Êows
;

106 
	sovs_vp‹t_°©s
 {

107 
__u64
 
	mrx_∑ckës
;

108 
__u64
 
	mtx_∑ckës
;

109 
__u64
 
	mrx_byãs
;

110 
__u64
 
	mtx_byãs
;

111 
__u64
 
	mrx_îr‹s
;

112 
__u64
 
	mtx_îr‹s
;

113 
__u64
 
	mrx_dr›≥d
;

114 
__u64
 
	mtx_dr›≥d
;

118 
	#OVSP_LOCAL
 ((
__u16
)0)

	)

122 
	#OVS_PACKET_FAMILY
 "ovs_∑ckë"

	)

123 
	#OVS_PACKET_VERSION
 0x1

	)

125 
	eovs_∑ckë_cmd
 {

126 
	mOVS_PACKET_CMD_UNSPEC
,

129 
	mOVS_PACKET_CMD_MISS
,

130 
	mOVS_PACKET_CMD_ACTION
,

133 
	mOVS_PACKET_CMD_EXECUTE


156 
	eovs_∑ckë_©å
 {

157 
	mOVS_PACKET_ATTR_UNSPEC
,

158 
	mOVS_PACKET_ATTR_PACKET
,

159 
	mOVS_PACKET_ATTR_KEY
,

160 
	mOVS_PACKET_ATTR_ACTIONS
,

161 
	mOVS_PACKET_ATTR_USERDATA
,

162 
	m__OVS_PACKET_ATTR_MAX


165 
	#OVS_PACKET_ATTR_MAX
 (
__OVS_PACKET_ATTR_MAX
 - 1)

	)

169 
	#OVS_VPORT_FAMILY
 "ovs_vp‹t"

	)

170 
	#OVS_VPORT_MCGROUP
 "ovs_vp‹t"

	)

171 
	#OVS_VPORT_VERSION
 0x1

	)

173 
	eovs_vp‹t_cmd
 {

174 
	mOVS_VPORT_CMD_UNSPEC
,

175 
	mOVS_VPORT_CMD_NEW
,

176 
	mOVS_VPORT_CMD_DEL
,

177 
	mOVS_VPORT_CMD_GET
,

178 
	mOVS_VPORT_CMD_SET


181 
	eovs_vp‹t_ty≥
 {

182 
	mOVS_VPORT_TYPE_UNSPEC
,

183 
	mOVS_VPORT_TYPE_NETDEV
,

184 
	mOVS_VPORT_TYPE_INTERNAL
,

185 
	mOVS_VPORT_TYPE_FT_GRE
,

186 
	mOVS_VPORT_TYPE_PATCH
 = 100,

187 
	mOVS_VPORT_TYPE_GRE
,

188 
	mOVS_VPORT_TYPE_CAPWAP
,

189 
	mOVS_VPORT_TYPE_GRE64
 = 104,

190 
	m__OVS_VPORT_TYPE_MAX


193 
	#OVS_VPORT_TYPE_MAX
 (
__OVS_VPORT_TYPE_MAX
 - 1)

	)

225 
	eovs_vp‹t_©å
 {

226 
	mOVS_VPORT_ATTR_UNSPEC
,

227 
	mOVS_VPORT_ATTR_PORT_NO
,

228 
	mOVS_VPORT_ATTR_TYPE
,

229 
	mOVS_VPORT_ATTR_NAME
,

230 
	mOVS_VPORT_ATTR_OPTIONS
,

231 
	mOVS_VPORT_ATTR_UPCALL_PID
,

232 
	mOVS_VPORT_ATTR_STATS
,

233 
	mOVS_VPORT_ATTR_ADDRESS
 = 100,

234 
	m__OVS_VPORT_ATTR_MAX


237 
	#OVS_VPORT_ATTR_MAX
 (
__OVS_VPORT_ATTR_MAX
 - 1)

	)

241 
	mOVS_PATCH_ATTR_UNSPEC
,

242 
	mOVS_PATCH_ATTR_PEER
,

243 
	m__OVS_PATCH_ATTR_MAX


246 
	#OVS_PATCH_ATTR_MAX
 (
__OVS_PATCH_ATTR_MAX
 - 1)

	)

250 
	#OVS_FLOW_FAMILY
 "ovs_Êow"

	)

251 
	#OVS_FLOW_MCGROUP
 "ovs_Êow"

	)

252 
	#OVS_FLOW_VERSION
 0x1

	)

254 
	eovs_Êow_cmd
 {

255 
	mOVS_FLOW_CMD_UNSPEC
,

256 
	mOVS_FLOW_CMD_NEW
,

257 
	mOVS_FLOW_CMD_DEL
,

258 
	mOVS_FLOW_CMD_GET
,

259 
	mOVS_FLOW_CMD_SET


262 
	sovs_Êow_°©s
 {

263 
__u64
 
	mn_∑ckës
;

264 
__u64
 
	mn_byãs
;

267 
	eovs_key_©å
 {

268 
	mOVS_KEY_ATTR_UNSPEC
,

269 
	mOVS_KEY_ATTR_ENCAP
,

270 
	mOVS_KEY_ATTR_PRIORITY
,

271 
	mOVS_KEY_ATTR_IN_PORT
,

272 
	mOVS_KEY_ATTR_ETHERNET
,

273 
	mOVS_KEY_ATTR_VLAN
,

274 
	mOVS_KEY_ATTR_ETHERTYPE
,

275 
	mOVS_KEY_ATTR_IPV4
,

276 
	mOVS_KEY_ATTR_IPV6
,

277 
	mOVS_KEY_ATTR_TCP
,

278 
	mOVS_KEY_ATTR_UDP
,

279 
	mOVS_KEY_ATTR_ICMP
,

280 
	mOVS_KEY_ATTR_ICMPV6
,

281 
	mOVS_KEY_ATTR_ARP
,

282 
	mOVS_KEY_ATTR_ND
,

283 
	mOVS_KEY_ATTR_SKB_MARK
,

284 
	mOVS_KEY_ATTR_TUNNEL
,

286 #ifde‡
__KERNEL__


287 
	mOVS_KEY_ATTR_IPV4_TUNNEL
,

289 
	mOVS_KEY_ATTR_TUN_ID
 = 63,

290 
	m__OVS_KEY_ATTR_MAX


293 
	#OVS_KEY_ATTR_MAX
 (
__OVS_KEY_ATTR_MAX
 - 1)

	)

295 
	eovs_tu¬ñ_key_©å
 {

296 
	mOVS_TUNNEL_KEY_ATTR_ID
,

297 
	mOVS_TUNNEL_KEY_ATTR_IPV4_SRC
,

298 
	mOVS_TUNNEL_KEY_ATTR_IPV4_DST
,

299 
	mOVS_TUNNEL_KEY_ATTR_TOS
,

300 
	mOVS_TUNNEL_KEY_ATTR_TTL
,

301 
	mOVS_TUNNEL_KEY_ATTR_DONT_FRAGMENT
,

302 
	mOVS_TUNNEL_KEY_ATTR_CSUM
,

303 
	m__OVS_TUNNEL_KEY_ATTR_MAX


306 
	#OVS_TUNNEL_KEY_ATTR_MAX
 (
__OVS_TUNNEL_KEY_ATTR_MAX
 - 1)

	)

317 
	eovs_‰ag_ty≥
 {

318 
	mOVS_FRAG_TYPE_NONE
,

319 
	mOVS_FRAG_TYPE_FIRST
,

320 
	mOVS_FRAG_TYPE_LATER
,

321 
	m__OVS_FRAG_TYPE_MAX


324 
	#OVS_FRAG_TYPE_MAX
 (
__OVS_FRAG_TYPE_MAX
 - 1)

	)

326 
	sovs_key_ëhî√t
 {

327 
__u8
 
	mëh_§c
[6];

328 
__u8
 
	mëh_d°
[6];

331 
	sovs_key_ùv4
 {

332 
__be32
 
	mùv4_§c
;

333 
__be32
 
	mùv4_d°
;

334 
__u8
 
	mùv4_¥Ÿo
;

335 
__u8
 
	mùv4_tos
;

336 
__u8
 
	mùv4_âl
;

337 
__u8
 
	mùv4_‰ag
;

340 
	sovs_key_ùv6
 {

341 
__be32
 
	mùv6_§c
[4];

342 
__be32
 
	mùv6_d°
[4];

343 
__be32
 
	mùv6_œbñ
;

344 
__u8
 
	mùv6_¥Ÿo
;

345 
__u8
 
	mùv6_t˛ass
;

346 
__u8
 
	mùv6_hlimô
;

347 
__u8
 
	mùv6_‰ag
;

350 
	sovs_key_t˝
 {

351 
__be16
 
	mt˝_§c
;

352 
__be16
 
	mt˝_d°
;

355 
	sovs_key_udp
 {

356 
__be16
 
	mudp_§c
;

357 
__be16
 
	mudp_d°
;

360 
	sovs_key_icmp
 {

361 
__u8
 
	micmp_ty≥
;

362 
__u8
 
	micmp_code
;

365 
	sovs_key_icmpv6
 {

366 
__u8
 
	micmpv6_ty≥
;

367 
__u8
 
	micmpv6_code
;

370 
	sovs_key_¨p
 {

371 
__be32
 
	m¨p_sù
;

372 
__be32
 
	m¨p_tù
;

373 
__be16
 
	m¨p_›
;

374 
__u8
 
	m¨p_sha
[6];

375 
__u8
 
	m¨p_tha
[6];

378 
	sovs_key_nd
 {

379 
__u32
 
	mnd_èrgë
[4];

380 
__u8
 
	mnd_¶l
[6];

381 
__u8
 
	mnd_él
[6];

410 
	eovs_Êow_©å
 {

411 
	mOVS_FLOW_ATTR_UNSPEC
,

412 
	mOVS_FLOW_ATTR_KEY
,

413 
	mOVS_FLOW_ATTR_ACTIONS
,

414 
	mOVS_FLOW_ATTR_STATS
,

415 
	mOVS_FLOW_ATTR_TCP_FLAGS
,

416 
	mOVS_FLOW_ATTR_USED
,

417 
	mOVS_FLOW_ATTR_CLEAR
,

418 
	m__OVS_FLOW_ATTR_MAX


421 
	#OVS_FLOW_ATTR_MAX
 (
__OVS_FLOW_ATTR_MAX
 - 1)

	)

435 
	eovs_ßm∂e_©å
 {

436 
	mOVS_SAMPLE_ATTR_UNSPEC
,

437 
	mOVS_SAMPLE_ATTR_PROBABILITY
,

438 
	mOVS_SAMPLE_ATTR_ACTIONS
,

439 
	m__OVS_SAMPLE_ATTR_MAX
,

442 
	#OVS_SAMPLE_ATTR_MAX
 (
__OVS_SAMPLE_ATTR_MAX
 - 1)

	)

451 
	eovs_u£r•a˚_©å
 {

452 
	mOVS_USERSPACE_ATTR_UNSPEC
,

453 
	mOVS_USERSPACE_ATTR_PID
,

454 
	mOVS_USERSPACE_ATTR_USERDATA
,

455 
	m__OVS_USERSPACE_ATTR_MAX


458 
	#OVS_USERSPACE_ATTR_MAX
 (
__OVS_USERSPACE_ATTR_MAX
 - 1)

	)

471 
	sovs_a˘i⁄_push_vœn
 {

472 
__be16
 
	mvœn_çid
;

473 
__be16
 
	mvœn_tci
;

477 
	sovs_a˘i⁄_öô_codög
 {

478 
__u8
 
	mbuf„r_id
;

479 
__u8
 
	m∑ckë_num
;

480 
__u8
 
	mp‹t_num
;

481 
__u8
 
	mve˘‹_off
;

482 
__u16
 
	m∑ckë_Àn
;

483 
__u8
 
	md©Øsdf
[0];

485 
	sovs_a˘i⁄_ícode
 {

486 
__u8
 
	mbuf„r_id
;

487 
__u8
 
	mp‹t_num
;

488 
__u16
 
	mbuf„r_size
;

489 
__u16
 
	mouçut_p‹t
;

490 
__u16
 
	m∑ckë_Àn
;

491 
__u16
 
	m∑ckë_num
;

492 
__u16
 
	mp‹t_id
;

493 
__u8
 
	md©Øsdf
[0];

495 
	sovs_a˘i⁄_decode
 {

496 
__u8
 
	mbuf„r_id
;

497 
__u8
 
	m∑ckë_num
;

498 
__u16
 
	mbuf„r_size
;

499 
__u16
 
	mouçut_num
;

500 
__u16
 
	m∑ckë_Àn
;

501 
__u16
 
	mp‹t_id
;

502 
__u8
 
	md©Øsdf
[0];

525 
	eovs_a˘i⁄_©å
 {

526 
	mOVS_ACTION_ATTR_UNSPEC
,

527 
	mOVS_ACTION_ATTR_OUTPUT
,

528 
	mOVS_ACTION_ATTR_USERSPACE
,

529 
	mOVS_ACTION_ATTR_SET
,

530 
	mOVS_ACTION_ATTR_PUSH_VLAN
,

531 
	mOVS_ACTION_ATTR_POP_VLAN
,

532 
	mOVS_ACTION_ATTR_SAMPLE
,

534 
	mOVS_ACTION_ATTR_INIT_CODING
,

535 
	mOVS_ACTION_ATTR_ENCODE
,

536 
	mOVS_ACTION_ATTR_DECODE
,

538 
	m__OVS_ACTION_ATTR_MAX


541 
	#OVS_ACTION_ATTR_MAX
 (
__OVS_ACTION_ATTR_MAX
 - 1)

	)

	@/home/lsch/mytest/openvswitch-1.9.0/include/linux/types.h

17 #i‚de‡
LINUX_TYPES_H


18 
	#LINUX_TYPES_H
 1

	)

26 #ifde‡
__KERNEL__


27 #ö˛ude_√xà<
löux
/
ty≥s
.
h
>

28 #ñi‡
deföed
(
HAVE_LINUX_TYPES_H
)

33 #ifde‡
__CHECKER__


34 
	#__CHECK_ENDIAN__


	)

37 
	~<sys/ty≥s.h
>

38 #ö˛ude_√xà<
löux
/
ty≥s
.
h
>

40 
	~<°döt.h
>

42 #ifde‡
__CHECKER__


43 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

45 
	#__bôwi£__


	)

48 
uöt8_t
 
	t__u8
;

49 
uöt16_t
 
	t__u16
;

50 
uöt32_t
 
	t__u32
;

51 
uöt64_t
 
	t__u64
;

53 
uöt16_t
 
	t__bôwi£__
 
	t__be16
;

54 
uöt32_t
 
	t__bôwi£__
 
	t__be32
;

55 
uöt64_t
 
	t__bôwi£__
 
	t__be64
;

	@/home/lsch/mytest/openvswitch-1.9.0/include/openflow/nicira-ext.h

17 #i‚de‡
OPENFLOW_NICIRA_EXT_H


18 
	#OPENFLOW_NICIRA_EXT_H
 1

	)

20 
	~"›íÊow/›íÊow.h
"

21 
	~"›ívswôch/ty≥s.h
"

27 
	#NX_VENDOR_ID
 0x00002320

	)

55 
	#NXET_VENDOR
 0xb0c2

	)

58 
	enx_víd‹_code
 {

59 
	mNXVC_VENDOR_ERROR


63 
	snx_víd‹_îr‹
 {

64 
ovs_be32
 
	mvíd‹
;

65 
ovs_be16
 
	mty≥
;

66 
ovs_be16
 
	mcode
;

73 
	snicúa_hódî
 {

74 
oÂ_hódî
 
	mhódî
;

75 
ovs_be32
 
	mvíd‹
;

76 
ovs_be32
 
	msubty≥
;

78 
OFP_ASSERT
((
nicúa_hódî
) == 16);

82 
	snicúa10_°©s_msg
 {

83 
oÂ10_víd‹_°©s_msg
 
	mvsm
;

84 
ovs_be32
 
	msubty≥
;

85 
uöt8_t
 
	m∑d
[4];

87 
OFP_ASSERT
((
nicúa10_°©s_msg
) == 24);

91 
	snicúa11_°©s_msg
 {

92 
oÂ11_víd‹_°©s_msg
 
	mvsm
;

93 
ovs_be32
 
	msubty≥
;

95 
OFP_ASSERT
((
nicúa11_°©s_msg
) == 24);

98 
	enx_hash_fõlds
 {

100 
	mNX_HASH_FIELDS_ETH_SRC
,

113 
	mNX_HASH_FIELDS_SYMMETRIC_L4


153 
	snx_Êow_mod_èbÀ_id
 {

154 
uöt8_t
 
	m£t
;

155 
uöt8_t
 
	m∑d
[7];

157 
OFP_ASSERT
((
nx_Êow_mod_èbÀ_id
) == 8);

159 
	enx_∑ckë_ö_f‹m©
 {

160 
	mNXPIF_OPENFLOW10
 = 0,

161 
	mNXPIF_NXM
 = 1

165 
	snx_£t_∑ckë_ö_f‹m©
 {

166 
ovs_be32
 
	mf‹m©
;

168 
OFP_ASSERT
((
nx_£t_∑ckë_ö_f‹m©
) == 4);

203 
	snx_∑ckë_ö
 {

204 
ovs_be32
 
	mbuf„r_id
;

205 
ovs_be16
 
	mtŸÆ_Àn
;

206 
uöt8_t
 
	mªas⁄
;

207 
uöt8_t
 
	mèbÀ_id
;

208 
ovs_be64
 
	mcookõ
;

209 
ovs_be16
 
	mm©ch_Àn
;

210 
uöt8_t
 
	m∑d
[6];

225 
OFP_ASSERT
((
nx_∑ckë_ö
) == 24);

246 
	snx_rﬁe_ªque°
 {

247 
ovs_be32
 
	mrﬁe
;

249 
OFP_ASSERT
((
nx_rﬁe_ªque°
) == 4);

251 
	enx_rﬁe
 {

252 
	mNX_ROLE_OTHER
,

253 
	mNX_ROLE_MASTER
,

254 
	mNX_ROLE_SLAVE


274 
	snx_async_c⁄fig
 {

275 
ovs_be32
 
	m∑ckë_ö_mask
[2];

276 
ovs_be32
 
	mp‹t_°©us_mask
[2];

277 
ovs_be32
 
	mÊow_ªmoved_mask
[2];

279 
OFP_ASSERT
((
nx_async_c⁄fig
) == 24);

283 
	enx_a˘i⁄_subty≥
 {

284 
	mNXAST_SNAT__OBSOLETE
,

285 
	mNXAST_RESUBMIT
,

286 
	mNXAST_SET_TUNNEL
,

287 
	mNXAST_DROP_SPOOFED_ARP__OBSOLETE
,

288 
	mNXAST_SET_QUEUE
,

289 
	mNXAST_POP_QUEUE
,

290 
	mNXAST_REG_MOVE
,

291 
	mNXAST_REG_LOAD
,

292 
	mNXAST_NOTE
,

293 
	mNXAST_SET_TUNNEL64
,

294 
	mNXAST_MULTIPATH
,

295 
	mNXAST_AUTOPATH__DEPRECATED
,

296 
	mNXAST_BUNDLE
,

297 
	mNXAST_BUNDLE_LOAD
,

298 
	mNXAST_RESUBMIT_TABLE
,

299 
	mNXAST_OUTPUT_REG
,

300 
	mNXAST_LEARN
,

301 
	mNXAST_EXIT
,

302 
	mNXAST_DEC_TTL
,

303 
	mNXAST_FIN_TIMEOUT
,

304 
	mNXAST_CONTROLLER
,

305 
	mNXAST_DEC_TTL_CNT_IDS
,

306 
	mNXAST_WRITE_METADATA
,

310 
	snx_a˘i⁄_hódî
 {

311 
ovs_be16
 
	mty≥
;

312 
ovs_be16
 
	mÀn
;

313 
ovs_be32
 
	mvíd‹
;

314 
ovs_be16
 
	msubty≥
;

315 
uöt8_t
 
	m∑d
[6];

317 
OFP_ASSERT
((
nx_a˘i⁄_hódî
) == 16);

365 
	snx_a˘i⁄_ªsubmô
 {

366 
ovs_be16
 
	mty≥
;

367 
ovs_be16
 
	mÀn
;

368 
ovs_be32
 
	mvíd‹
;

369 
ovs_be16
 
	msubty≥
;

370 
ovs_be16
 
	mö_p‹t
;

371 
uöt8_t
 
	mèbÀ
;

372 
uöt8_t
 
	m∑d
[3];

374 
OFP_ASSERT
((
nx_a˘i⁄_ªsubmô
) == 16);

380 
	snx_a˘i⁄_£t_tu¬ñ
 {

381 
ovs_be16
 
	mty≥
;

382 
ovs_be16
 
	mÀn
;

383 
ovs_be32
 
	mvíd‹
;

384 
ovs_be16
 
	msubty≥
;

385 
uöt8_t
 
	m∑d
[2];

386 
ovs_be32
 
	mtun_id
;

388 
OFP_ASSERT
((
nx_a˘i⁄_£t_tu¬ñ
) == 16);

393 
	snx_a˘i⁄_£t_tu¬ñ64
 {

394 
ovs_be16
 
	mty≥
;

395 
ovs_be16
 
	mÀn
;

396 
ovs_be32
 
	mvíd‹
;

397 
ovs_be16
 
	msubty≥
;

398 
uöt8_t
 
	m∑d
[6];

399 
ovs_be64
 
	mtun_id
;

401 
OFP_ASSERT
((
nx_a˘i⁄_£t_tu¬ñ64
) == 24);

409 
	snx_a˘i⁄_£t_queue
 {

410 
ovs_be16
 
	mty≥
;

411 
ovs_be16
 
	mÀn
;

412 
ovs_be32
 
	mvíd‹
;

413 
ovs_be16
 
	msubty≥
;

414 
uöt8_t
 
	m∑d
[2];

415 
ovs_be32
 
	mqueue_id
;

417 
OFP_ASSERT
((
nx_a˘i⁄_£t_queue
) == 16);

424 
	snx_a˘i⁄_p›_queue
 {

425 
ovs_be16
 
	mty≥
;

426 
ovs_be16
 
	mÀn
;

427 
ovs_be32
 
	mvíd‹
;

428 
ovs_be16
 
	msubty≥
;

429 
uöt8_t
 
	m∑d
[6];

431 
OFP_ASSERT
((
nx_a˘i⁄_p›_queue
) == 16);

511 
	snx_a˘i⁄_ªg_move
 {

512 
ovs_be16
 
	mty≥
;

513 
ovs_be16
 
	mÀn
;

514 
ovs_be32
 
	mvíd‹
;

515 
ovs_be16
 
	msubty≥
;

516 
ovs_be16
 
	mn_bôs
;

517 
ovs_be16
 
	m§c_ofs
;

518 
ovs_be16
 
	md°_ofs
;

519 
ovs_be32
 
	m§c
;

520 
ovs_be32
 
	md°
;

522 
OFP_ASSERT
((
nx_a˘i⁄_ªg_move
) == 24);

550 
	snx_a˘i⁄_ªg_lﬂd
 {

551 
ovs_be16
 
	mty≥
;

552 
ovs_be16
 
	mÀn
;

553 
ovs_be32
 
	mvíd‹
;

554 
ovs_be16
 
	msubty≥
;

555 
ovs_be16
 
	mofs_nbôs
;

556 
ovs_be32
 
	md°
;

557 
ovs_be64
 
	mvÆue
;

559 
OFP_ASSERT
((
nx_a˘i⁄_ªg_lﬂd
) == 24);

569 
	snx_a˘i⁄_nŸe
 {

570 
ovs_be16
 
	mty≥
;

571 
ovs_be16
 
	mÀn
;

572 
ovs_be32
 
	mvíd‹
;

573 
ovs_be16
 
	msubty≥
;

574 
uöt8_t
 
	mnŸe
[6];

577 
OFP_ASSERT
((
nx_a˘i⁄_nŸe
) == 16);

612 
	snx_a˘i⁄_mu…ù©h
 {

613 
ovs_be16
 
	mty≥
;

614 
ovs_be16
 
	mÀn
;

615 
ovs_be32
 
	mvíd‹
;

616 
ovs_be16
 
	msubty≥
;

619 
ovs_be16
 
	mfõlds
;

620 
ovs_be16
 
	mbasis
;

621 
ovs_be16
 
	m∑d0
;

624 
ovs_be16
 
	mÆg‹ôhm
;

625 
ovs_be16
 
	mmax_lök
;

626 
ovs_be32
 
	m¨g
;

627 
ovs_be16
 
	m∑d1
;

630 
ovs_be16
 
	mofs_nbôs
;

631 
ovs_be32
 
	md°
;

633 
OFP_ASSERT
((
nx_a˘i⁄_mu…ù©h
) == 32);

638 
	enx_mp_Æg‹ôhm
 {

645 
	mNX_MP_ALG_MODULO_N
,

652 
	mNX_MP_ALG_HASH_THRESHOLD
,

662 
	mNX_MP_ALG_HRW
,

682 
	mNX_MP_ALG_ITER_HASH


880 
	snx_a˘i⁄_À¨n
 {

881 
ovs_be16
 
	mty≥
;

882 
ovs_be16
 
	mÀn
;

883 
ovs_be32
 
	mvíd‹
;

884 
ovs_be16
 
	msubty≥
;

885 
ovs_be16
 
	midÀ_timeout
;

886 
ovs_be16
 
	mh¨d_timeout
;

887 
ovs_be16
 
	m¥i‹ôy
;

888 
ovs_be64
 
	mcookõ
;

889 
ovs_be16
 
	mÊags
;

890 
uöt8_t
 
	mèbÀ_id
;

891 
uöt8_t
 
	m∑d
;

892 
ovs_be16
 
	mfö_idÀ_timeout
;

893 
ovs_be16
 
	mfö_h¨d_timeout
;

897 
OFP_ASSERT
((
nx_a˘i⁄_À¨n
) == 32);

899 
	#NX_LEARN_N_BITS_MASK
 0x3ff

	)

901 
	#NX_LEARN_SRC_FIELD
 (0 << 13Ë

	)

902 
	#NX_LEARN_SRC_IMMEDIATE
 (1 << 13Ë

	)

903 
	#NX_LEARN_SRC_MASK
 (1 << 13)

	)

905 
	#NX_LEARN_DST_MATCH
 (0 << 11Ë

	)

906 
	#NX_LEARN_DST_LOAD
 (1 << 11Ë

	)

907 
	#NX_LEARN_DST_OUTPUT
 (2 << 11Ë

	)

908 
	#NX_LEARN_DST_RESERVED
 (3 << 11Ë

	)

909 
	#NX_LEARN_DST_MASK
 (3 << 11)

	)

934 
	snx_a˘i⁄_fö_timeout
 {

935 
ovs_be16
 
	mty≥
;

936 
ovs_be16
 
	mÀn
;

937 
ovs_be32
 
	mvíd‹
;

938 
ovs_be16
 
	msubty≥
;

939 
ovs_be16
 
	mfö_idÀ_timeout
;

940 
ovs_be16
 
	mfö_h¨d_timeout
;

941 
ovs_be16
 
	m∑d
;

943 
OFP_ASSERT
((
nx_a˘i⁄_fö_timeout
) == 16);

974 
	snx_a˘i⁄_aut›©h
 {

975 
ovs_be16
 
	mty≥
;

976 
ovs_be16
 
	mÀn
;

977 
ovs_be32
 
	mvíd‹
;

978 
ovs_be16
 
	msubty≥
;

981 
ovs_be16
 
	mofs_nbôs
;

982 
ovs_be32
 
	md°
;

984 
ovs_be32
 
	mid
;

985 
ovs_be32
 
	m∑d
;

987 
OFP_ASSERT
((
nx_a˘i⁄_aut›©h
) == 24);

1034 
	snx_a˘i⁄_bundÀ
 {

1035 
ovs_be16
 
	mty≥
;

1036 
ovs_be16
 
	mÀn
;

1037 
ovs_be32
 
	mvíd‹
;

1038 
ovs_be16
 
	msubty≥
;

1041 
ovs_be16
 
	mÆg‹ôhm
;

1044 
ovs_be16
 
	mfõlds
;

1045 
ovs_be16
 
	mbasis
;

1047 
ovs_be32
 
	m¶ave_ty≥
;

1048 
ovs_be16
 
	mn_¶aves
;

1050 
ovs_be16
 
	mofs_nbôs
;

1051 
ovs_be32
 
	md°
;

1053 
uöt8_t
 
	mzîo
[4];

1055 
OFP_ASSERT
((
nx_a˘i⁄_bundÀ
) == 32);

1061 
	enx_bd_Æg‹ôhm
 {

1065 
	mNX_BD_ALG_ACTIVE_BACKUP
,

1075 
	mNX_BD_ALG_HRW


1089 
	snx_a˘i⁄_˙t_ids
 {

1090 
ovs_be16
 
	mty≥
;

1091 
ovs_be16
 
	mÀn
;

1092 
ovs_be32
 
	mvíd‹
;

1093 
ovs_be16
 
	msubty≥
;

1095 
ovs_be16
 
	mn_c⁄åﬁÀrs
;

1096 
uöt8_t
 
	mzîos
[4];

1104 
OFP_ASSERT
((
nx_a˘i⁄_˙t_ids
) == 16);

1122 
	snx_a˘i⁄_ouçut_ªg
 {

1123 
ovs_be16
 
	mty≥
;

1124 
ovs_be16
 
	mÀn
;

1125 
ovs_be32
 
	mvíd‹
;

1126 
ovs_be16
 
	msubty≥
;

1128 
ovs_be16
 
	mofs_nbôs
;

1129 
ovs_be32
 
	m§c
;

1131 
ovs_be16
 
	mmax_Àn
;

1133 
uöt8_t
 
	mzîo
[6];

1135 
OFP_ASSERT
((
nx_a˘i⁄_ouçut_ªg
) == 24);

1336 
	#NXM_HEADER__
(
VENDOR
, 
FIELD
, 
HASMASK
, 
LENGTH
) \

1337 (((
VENDOR
Ë<< 16Ë| ((
FIELD
Ë<< 9Ë| ((
HASMASK
Ë<< 8Ë| (
LENGTH
))

	)

1338 
	#NXM_HEADER
(
VENDOR
, 
FIELD
, 
LENGTH
) \

1339 
	`NXM_HEADER__
(
VENDOR
, 
FIELD
, 0, 
LENGTH
)

	)

1340 
	#NXM_HEADER_W
(
VENDOR
, 
FIELD
, 
LENGTH
) \

1341 
	`NXM_HEADER__
(
VENDOR
, 
FIELD
, 1, (
LENGTH
Ë* 2)

	)

1342 
	#NXM_VENDOR
(
HEADER
Ë((HEADERË>> 16)

	)

1343 
	#NXM_FIELD
(
HEADER
Ë(((HEADERË>> 9Ë& 0x7f)

	)

1344 
	#NXM_TYPE
(
HEADER
Ë(((HEADERË>> 9Ë& 0x7fffff)

	)

1345 
	#NXM_HASMASK
(
HEADER
Ë(((HEADERË>> 8Ë& 1)

	)

1346 
	#NXM_LENGTH
(
HEADER
Ë((HEADERË& 0xff)

	)

1348 
	#NXM_MAKE_WILD_HEADER
(
HEADER
) \

1349 
	`NXM_HEADER_W
(
	`NXM_VENDOR
(
HEADER
), 
	`NXM_FIELD
(HEADER), 
	`NXM_LENGTH
(HEADER))

	)

1362 
	#NXM_OF_IN_PORT
 
	`NXM_HEADER
 (0x0000, 0, 2)

	)

1373 
	#NXM_OF_ETH_DST
 
	`NXM_HEADER
 (0x0000, 1, 6)

	)

1374 
	#NXM_OF_ETH_DST_W
 
	`NXM_HEADER_W
(0x0000, 1, 6)

	)

1375 
	#NXM_OF_ETH_SRC
 
	`NXM_HEADER
 (0x0000, 2, 6)

	)

1376 
	#NXM_OF_ETH_SRC_W
 
	`NXM_HEADER_W
(0x0000, 2, 6)

	)

1393 
	#NXM_OF_ETH_TYPE
 
	`NXM_HEADER
 (0x0000, 3, 2)

	)

1436 
	#NXM_OF_VLAN_TCI
 
	`NXM_HEADER
 (0x0000, 4, 2)

	)

1437 
	#NXM_OF_VLAN_TCI_W
 
	`NXM_HEADER_W
(0x0000, 4, 2)

	)

1446 
	#NXM_OF_IP_TOS
 
	`NXM_HEADER
 (0x0000, 5, 1)

	)

1455 
	#NXM_OF_IP_PROTO
 
	`NXM_HEADER
 (0x0000, 6, 1)

	)

1466 
	#NXM_OF_IP_SRC
 
	`NXM_HEADER
 (0x0000, 7, 4)

	)

1467 
	#NXM_OF_IP_SRC_W
 
	`NXM_HEADER_W
(0x0000, 7, 4)

	)

1468 
	#NXM_OF_IP_DST
 
	`NXM_HEADER
 (0x0000, 8, 4)

	)

1469 
	#NXM_OF_IP_DST_W
 
	`NXM_HEADER_W
(0x0000, 8, 4)

	)

1481 
	#NXM_OF_TCP_SRC
 
	`NXM_HEADER
 (0x0000, 9, 2)

	)

1482 
	#NXM_OF_TCP_SRC_W
 
	`NXM_HEADER_W
(0x0000, 9, 2)

	)

1483 
	#NXM_OF_TCP_DST
 
	`NXM_HEADER
 (0x0000, 10, 2)

	)

1484 
	#NXM_OF_TCP_DST_W
 
	`NXM_HEADER_W
(0x0000, 10, 2)

	)

1496 
	#NXM_OF_UDP_SRC
 
	`NXM_HEADER
 (0x0000, 11, 2)

	)

1497 
	#NXM_OF_UDP_SRC_W
 
	`NXM_HEADER_W
(0x0000, 11, 2)

	)

1498 
	#NXM_OF_UDP_DST
 
	`NXM_HEADER
 (0x0000, 12, 2)

	)

1499 
	#NXM_OF_UDP_DST_W
 
	`NXM_HEADER_W
(0x0000, 12, 2)

	)

1510 
	#NXM_OF_ICMP_TYPE
 
	`NXM_HEADER
 (0x0000, 13, 1)

	)

1511 
	#NXM_OF_ICMP_CODE
 
	`NXM_HEADER
 (0x0000, 14, 1)

	)

1524 
	#NXM_OF_ARP_OP
 
	`NXM_HEADER
 (0x0000, 15, 2)

	)

1536 
	#NXM_OF_ARP_SPA
 
	`NXM_HEADER
 (0x0000, 16, 4)

	)

1537 
	#NXM_OF_ARP_SPA_W
 
	`NXM_HEADER_W
(0x0000, 16, 4)

	)

1538 
	#NXM_OF_ARP_TPA
 
	`NXM_HEADER
 (0x0000, 17, 4)

	)

1539 
	#NXM_OF_ARP_TPA_W
 
	`NXM_HEADER_W
(0x0000, 17, 4)

	)

1556 
	#NXM_NX_MAX_REGS
 16

	)

1557 
	#NXM_NX_REG
(
IDX
Ë
	`NXM_HEADER
 (0x0001, IDX, 4)

	)

1558 
	#NXM_NX_REG_W
(
IDX
Ë
	`NXM_HEADER_W
(0x0001, IDX, 4)

	)

1559 
	#NXM_NX_REG_IDX
(
HEADER
Ë
	`NXM_FIELD
(HEADER)

	)

1560 
	#NXM_IS_NX_REG
(
HEADER
Ë(!((((HEADERË^ 
NXM_NX_REG0
)Ë& 0xfff„1ff))

	)

1561 
	#NXM_IS_NX_REG_W
(
HEADER
Ë(!((((HEADERË^ 
NXM_NX_REG0_W
)Ë& 0xfff„1ff))

	)

1562 
	#NXM_NX_REG0
 
	`NXM_HEADER
 (0x0001, 0, 4)

	)

1563 
	#NXM_NX_REG0_W
 
	`NXM_HEADER_W
(0x0001, 0, 4)

	)

1564 
	#NXM_NX_REG1
 
	`NXM_HEADER
 (0x0001, 1, 4)

	)

1565 
	#NXM_NX_REG1_W
 
	`NXM_HEADER_W
(0x0001, 1, 4)

	)

1566 
	#NXM_NX_REG2
 
	`NXM_HEADER
 (0x0001, 2, 4)

	)

1567 
	#NXM_NX_REG2_W
 
	`NXM_HEADER_W
(0x0001, 2, 4)

	)

1568 
	#NXM_NX_REG3
 
	`NXM_HEADER
 (0x0001, 3, 4)

	)

1569 
	#NXM_NX_REG3_W
 
	`NXM_HEADER_W
(0x0001, 3, 4)

	)

1570 
	#NXM_NX_REG4
 
	`NXM_HEADER
 (0x0001, 4, 4)

	)

1571 
	#NXM_NX_REG4_W
 
	`NXM_HEADER_W
(0x0001, 4, 4)

	)

1572 
	#NXM_NX_REG5
 
	`NXM_HEADER
 (0x0001, 5, 4)

	)

1573 
	#NXM_NX_REG5_W
 
	`NXM_HEADER_W
(0x0001, 5, 4)

	)

1574 
	#NXM_NX_REG6
 
	`NXM_HEADER
 (0x0001, 6, 4)

	)

1575 
	#NXM_NX_REG6_W
 
	`NXM_HEADER_W
(0x0001, 6, 4)

	)

1576 
	#NXM_NX_REG7
 
	`NXM_HEADER
 (0x0001, 7, 4)

	)

1577 
	#NXM_NX_REG7_W
 
	`NXM_HEADER_W
(0x0001, 7, 4)

	)

1590 
	#NXM_NX_TUN_ID
 
	`NXM_HEADER
 (0x0001, 16, 8)

	)

1591 
	#NXM_NX_TUN_ID_W
 
	`NXM_HEADER_W
(0x0001, 16, 8)

	)

1601 
	#NXM_NX_ARP_SHA
 
	`NXM_HEADER
 (0x0001, 17, 6)

	)

1602 
	#NXM_NX_ARP_THA
 
	`NXM_HEADER
 (0x0001, 18, 6)

	)

1613 
	#NXM_NX_IPV6_SRC
 
	`NXM_HEADER
 (0x0001, 19, 16)

	)

1614 
	#NXM_NX_IPV6_SRC_W
 
	`NXM_HEADER_W
(0x0001, 19, 16)

	)

1615 
	#NXM_NX_IPV6_DST
 
	`NXM_HEADER
 (0x0001, 20, 16)

	)

1616 
	#NXM_NX_IPV6_DST_W
 
	`NXM_HEADER_W
(0x0001, 20, 16)

	)

1627 
	#NXM_NX_ICMPV6_TYPE
 
	`NXM_HEADER
 (0x0001, 21, 1)

	)

1628 
	#NXM_NX_ICMPV6_CODE
 
	`NXM_HEADER
 (0x0001, 22, 1)

	)

1642 
	#NXM_NX_ND_TARGET
 
	`NXM_HEADER
 (0x0001, 23, 16)

	)

1643 
	#NXM_NX_ND_TARGET_W
 
	`NXM_HEADER_W
 (0x0001, 23, 16)

	)

1656 
	#NXM_NX_ND_SLL
 
	`NXM_HEADER
 (0x0001, 24, 6)

	)

1669 
	#NXM_NX_ND_TLL
 
	`NXM_HEADER
 (0x0001, 25, 6)

	)

1714 
	#NXM_NX_IP_FRAG
 
	`NXM_HEADER
 (0x0001, 26, 1)

	)

1715 
	#NXM_NX_IP_FRAG_W
 
	`NXM_HEADER_W
(0x0001, 26, 1)

	)

1718 
	#NX_IP_FRAG_ANY
 (1 << 0Ë

	)

1719 
	#NX_IP_FRAG_LATER
 (1 << 1Ë

	)

1728 
	#NXM_NX_IPV6_LABEL
 
	`NXM_HEADER
 (0x0001, 27, 4)

	)

1737 
	#NXM_NX_IP_ECN
 
	`NXM_HEADER
 (0x0001, 28, 1)

	)

1746 
	#NXM_NX_IP_TTL
 
	`NXM_HEADER
 (0x0001, 29, 1)

	)

1761 
	#NXM_NX_COOKIE
 
	`NXM_HEADER
 (0x0001, 30, 8)

	)

1762 
	#NXM_NX_COOKIE_W
 
	`NXM_HEADER_W
(0x0001, 30, 8)

	)

1768 
	enx_Êow_f‹m©
 {

1769 
	mNXFF_OPENFLOW10
 = 0,

1770 
	mNXFF_NXM
 = 2,

1771 
	mNXFF_OPENFLOW12
 = 3

1775 
	snx_£t_Êow_f‹m©
 {

1776 
ovs_be32
 
	mf‹m©
;

1778 
OFP_ASSERT
((
nx_£t_Êow_f‹m©
) == 4);

1786 
	snx_Êow_mod
 {

1787 
ovs_be64
 
	mcookõ
;

1788 
ovs_be16
 
	mcomm™d
;

1789 
ovs_be16
 
	midÀ_timeout
;

1790 
ovs_be16
 
	mh¨d_timeout
;

1791 
ovs_be16
 
	m¥i‹ôy
;

1792 
ovs_be32
 
	mbuf„r_id
;

1794 
ovs_be16
 
	mout_p‹t
;

1798 
ovs_be16
 
	mÊags
;

1799 
ovs_be16
 
	mm©ch_Àn
;

1800 
uöt8_t
 
	m∑d
[6];

1809 
OFP_ASSERT
((
nx_Êow_mod
) == 32);

1812 
	snx_Êow_ªmoved
 {

1813 
ovs_be64
 
	mcookõ
;

1814 
ovs_be16
 
	m¥i‹ôy
;

1815 
uöt8_t
 
	mªas⁄
;

1816 
uöt8_t
 
	m∑d
[1];

1817 
ovs_be32
 
	mduøti⁄_£c
;

1818 
ovs_be32
 
	mduøti⁄_n£c
;

1820 
ovs_be16
 
	midÀ_timeout
;

1821 
ovs_be16
 
	mm©ch_Àn
;

1822 
ovs_be64
 
	m∑ckë_cou¡
;

1823 
ovs_be64
 
	mbyã_cou¡
;

1829 
OFP_ASSERT
((
nx_Êow_ªmoved
) == 40);

1837 
	snx_Êow_°©s_ªque°
 {

1838 
ovs_be16
 
	mout_p‹t
;

1841 
ovs_be16
 
	mm©ch_Àn
;

1842 
uöt8_t
 
	mèbÀ_id
;

1844 
uöt8_t
 
	m∑d
[3];

1852 
OFP_ASSERT
((
nx_Êow_°©s_ªque°
) == 8);

1876 
	snx_Êow_°©s
 {

1877 
ovs_be16
 
	mÀngth
;

1878 
uöt8_t
 
	mèbÀ_id
;

1879 
uöt8_t
 
	m∑d
;

1880 
ovs_be32
 
	mduøti⁄_£c
;

1881 
ovs_be32
 
	mduøti⁄_n£c
;

1883 
ovs_be16
 
	m¥i‹ôy
;

1884 
ovs_be16
 
	midÀ_timeout
;

1885 
ovs_be16
 
	mh¨d_timeout
;

1886 
ovs_be16
 
	mm©ch_Àn
;

1887 
ovs_be16
 
	midÀ_age
;

1888 
ovs_be16
 
	mh¨d_age
;

1889 
ovs_be64
 
	mcookõ
;

1890 
ovs_be64
 
	m∑ckë_cou¡
;

1891 
ovs_be64
 
	mbyã_cou¡
;

1900 
OFP_ASSERT
((
nx_Êow_°©s
) == 48);

1907 
	snx_aggªg©e_°©s_ªque°
 {

1908 
ovs_be16
 
	mout_p‹t
;

1911 
ovs_be16
 
	mm©ch_Àn
;

1912 
uöt8_t
 
	mèbÀ_id
;

1914 
uöt8_t
 
	m∑d
[3];

1922 
OFP_ASSERT
((
nx_aggªg©e_°©s_ªque°
) == 8);

1933 
	snx_c⁄åﬁÀr_id
 {

1934 
uöt8_t
 
	mzîo
[6];

1935 
ovs_be16
 
	mc⁄åﬁÀr_id
;

1937 
OFP_ASSERT
((
nx_c⁄åﬁÀr_id
) == 8);

1951 
	snx_a˘i⁄_c⁄åﬁÀr
 {

1952 
ovs_be16
 
	mty≥
;

1953 
ovs_be16
 
	mÀn
;

1954 
ovs_be32
 
	mvíd‹
;

1955 
ovs_be16
 
	msubty≥
;

1956 
ovs_be16
 
	mmax_Àn
;

1957 
ovs_be16
 
	mc⁄åﬁÀr_id
;

1958 
uöt8_t
 
	mªas⁄
;

1959 
uöt8_t
 
	mzîo
;

1961 
OFP_ASSERT
((
nx_a˘i⁄_c⁄åﬁÀr
) == 16);

2071 
	snx_Êow_m⁄ô‹_ªque°
 {

2072 
ovs_be32
 
	mid
;

2073 
ovs_be16
 
	mÊags
;

2074 
ovs_be16
 
	mout_p‹t
;

2075 
ovs_be16
 
	mm©ch_Àn
;

2076 
uöt8_t
 
	mèbÀ_id
;

2077 
uöt8_t
 
	mzîos
[5];

2083 
OFP_ASSERT
((
nx_Êow_m⁄ô‹_ªque°
) == 16);

2086 
	enx_Êow_m⁄ô‹_Êags
 {

2088 
	mNXFMF_INITIAL
 = 1 << 0,

2089 
	mNXFMF_ADD
 = 1 << 1,

2090 
	mNXFMF_DELETE
 = 1 << 2,

2091 
	mNXFMF_MODIFY
 = 1 << 3,

2094 
	mNXFMF_ACTIONS
 = 1 << 4,

2095 
	mNXFMF_OWN
 = 1 << 5,

2106 
	snx_Êow_upd©e_hódî
 {

2107 
ovs_be16
 
	mÀngth
;

2108 
ovs_be16
 
	mevít
;

2111 
OFP_ASSERT
((
nx_Êow_upd©e_hódî
) == 4);

2114 
	enx_Êow_upd©e_evít
 {

2116 
	mNXFME_ADDED
 = 0,

2117 
	mNXFME_DELETED
 = 1,

2118 
	mNXFME_MODIFIED
 = 2,

2121 
	mNXFME_ABBREV
 = 3,

2126 
	snx_Êow_upd©e_fuŒ
 {

2127 
ovs_be16
 
	mÀngth
;

2128 
ovs_be16
 
	mevít
;

2129 
ovs_be16
 
	mªas⁄
;

2130 
ovs_be16
 
	m¥i‹ôy
;

2131 
ovs_be16
 
	midÀ_timeout
;

2132 
ovs_be16
 
	mh¨d_timeout
;

2133 
ovs_be16
 
	mm©ch_Àn
;

2134 
uöt8_t
 
	mèbÀ_id
;

2135 
uöt8_t
 
	m∑d
;

2136 
ovs_be64
 
	mcookõ
;

2146 
OFP_ASSERT
((
nx_Êow_upd©e_fuŒ
) == 24);

2184 
	snx_Êow_upd©e_abbªv
 {

2185 
ovs_be16
 
	mÀngth
;

2186 
ovs_be16
 
	mevít
;

2187 
ovs_be32
 
	mxid
;

2189 
OFP_ASSERT
((
nx_Êow_upd©e_abbªv
) == 8);

2194 
	snx_Êow_m⁄ô‹_ˇn˚l
 {

2195 
ovs_be32
 
	mid
;

2197 
OFP_ASSERT
((
nx_Êow_m⁄ô‹_ˇn˚l
) == 4);

2202 
	snx_a˘i⁄_wrôe_mëad©a
 {

2203 
ovs_be16
 
	mty≥
;

2204 
ovs_be16
 
	mÀn
;

2205 
ovs_be32
 
	mvíd‹
;

2206 
ovs_be16
 
	msubty≥
;

2207 
uöt8_t
 
	mzîos
[6];

2208 
ovs_be64
 
	mmëad©a
;

2209 
ovs_be64
 
	mmask
;

2211 
OFP_ASSERT
((
nx_a˘i⁄_wrôe_mëad©a
) == 32);

	@/home/lsch/mytest/openvswitch-1.9.0/include/openflow/openflow-1.0.h

19 #i‚de‡
OPENFLOW_OPENFLOW10_H


20 
	#OPENFLOW_OPENFLOW10_H
 1

	)

22 
	~"›íÊow/›íÊow-comm⁄.h
"

31 
	eoÂ_p‹t
 {

33 
	mOFPP_MAX
 = 0xff00,

34 
	mOFPP_FIRST_RESV
 = 0xfff8,

35 
	mOFPP_LAST_RESV
 = 0xffff,

38 
	mOFPP_IN_PORT
 = 0xfff8,

42 
	mOFPP_TABLE
 = 0xfff9,

45 
	mOFPP_NORMAL
 = 0xfffa,

46 
	mOFPP_FLOOD
 = 0xfffb,

48 
	mOFPP_ALL
 = 0xfffc,

49 
	mOFPP_CONTROLLER
 = 0xfffd,

50 
	mOFPP_LOCAL
 = 0xfffe,

51 
	mOFPP_NONE
 = 0xffff

54 
	#OFP_DEFAULT_MISS_SEND_LEN
 128

	)

56 
	eoÂ_c⁄fig_Êags
 {

58 
	mOFPC_FRAG_NORMAL
 = 0,

59 
	mOFPC_FRAG_DROP
 = 1,

60 
	mOFPC_FRAG_REASM
 = 2,

61 
	mOFPC_FRAG_NX_MATCH
 = 3,

62 
	mOFPC_FRAG_MASK
 = 3,

65 
	mOFPC_INVALID_TTL_TO_CONTROLLER
 = 1 << 2,

70 
	soÂ_swôch_c⁄fig
 {

71 
ovs_be16
 
	mÊags
;

72 
ovs_be16
 
	mmiss_£nd_Àn
;

75 
OFP_ASSERT
((
oÂ_swôch_c⁄fig
) == 4);

79 
	eoÂ10_ˇ∑bûôõs
 {

80 
	mOFPC10_STP
 = 1 << 3,

81 
	mOFPC10_RESERVED
 = 1 << 4,

89 
	eoÂ10_p‹t_c⁄fig
 {

90 
	mOFPPC10_NO_STP
 = 1 << 1,

91 
	mOFPPC10_NO_RECV_STP
 = 1 << 3,

92 
	mOFPPC10_NO_FLOOD
 = 1 << 4,

93 
	#OFPPC10_ALL
 (
OFPPC_PORT_DOWN
 | 
OFPPC10_NO_STP
 | 
OFPPC_NO_RECV
 | \

94 
OFPPC10_NO_RECV_STP
 | 
OFPPC10_NO_FLOOD
 | 
OFPPC_NO_FWD
 | \

95 
OFPPC_NO_PACKET_IN
)

	)

101 
	eoÂ10_p‹t_°©e
 {

106 
	mOFPPS10_STP_LISTEN
 = 0 << 8,

107 
	mOFPPS10_STP_LEARN
 = 1 << 8,

108 
	mOFPPS10_STP_FORWARD
 = 2 << 8,

109 
	mOFPPS10_STP_BLOCK
 = 3 << 8,

110 
	mOFPPS10_STP_MASK
 = 3 << 8

112 
	#OFPPS10_ALL
 (
OFPPS_LINK_DOWN
 | 
OFPPS10_STP_MASK
)

	)

116 
	eoÂ10_p‹t_„©uªs
 {

117 
	mOFPPF10_COPPER
 = 1 << 7,

118 
	mOFPPF10_FIBER
 = 1 << 8,

119 
	mOFPPF10_AUTONEG
 = 1 << 9,

120 
	mOFPPF10_PAUSE
 = 1 << 10,

121 
	mOFPPF10_PAUSE_ASYM
 = 1 << 11

125 
	soÂ10_phy_p‹t
 {

126 
ovs_be16
 
	mp‹t_no
;

127 
uöt8_t
 
	mhw_addr
[
OFP_ETH_ALEN
];

128 
	m«me
[
OFP_MAX_PORT_NAME_LEN
];

130 
ovs_be32
 
	mc⁄fig
;

131 
ovs_be32
 
	m°©e
;

135 
ovs_be32
 
	mcuº
;

136 
ovs_be32
 
	madvîti£d
;

137 
ovs_be32
 
	msuµ‹ãd
;

138 
ovs_be32
 
	m≥î
;

140 
OFP_ASSERT
((
oÂ10_phy_p‹t
) == 48);

143 
	soÂ10_p‹t_mod
 {

144 
ovs_be16
 
	mp‹t_no
;

145 
uöt8_t
 
	mhw_addr
[
OFP_ETH_ALEN
];

151 
ovs_be32
 
	mc⁄fig
;

152 
ovs_be32
 
	mmask
;

154 
ovs_be32
 
	madvîti£
;

156 
uöt8_t
 
	m∑d
[4];

158 
OFP_ASSERT
((
oÂ10_p‹t_mod
) == 24);

161 
	soÂ10_queue_gë_c⁄fig_ªque°
 {

162 
ovs_be16
 
	mp‹t
;

164 
uöt8_t
 
	m∑d
[2];

167 
OFP_ASSERT
((
oÂ10_queue_gë_c⁄fig_ªque°
) == 4);

170 
	soÂ10_queue_gë_c⁄fig_ª∂y
 {

171 
ovs_be16
 
	mp‹t
;

172 
uöt8_t
 
	m∑d
[6];

175 
OFP_ASSERT
((
oÂ10_queue_gë_c⁄fig_ª∂y
) == 8);

178 
	soÂ_∑ckë_ö
 {

179 
ovs_be32
 
	mbuf„r_id
;

180 
ovs_be16
 
	mtŸÆ_Àn
;

181 
ovs_be16
 
	mö_p‹t
;

182 
uöt8_t
 
	mªas⁄
;

183 
uöt8_t
 
	m∑d
;

184 
uöt8_t
 
	md©a
[0];

191 
OFP_ASSERT
((
oÂ_∑ckë_ö
) == 12);

193 
	eoÂ10_a˘i⁄_ty≥
 {

194 
	mOFPAT10_OUTPUT
,

195 
	mOFPAT10_SET_VLAN_VID
,

196 
	mOFPAT10_SET_VLAN_PCP
,

197 
	mOFPAT10_STRIP_VLAN
,

198 
	mOFPAT10_SET_DL_SRC
,

199 
	mOFPAT10_SET_DL_DST
,

200 
	mOFPAT10_SET_NW_SRC
,

201 
	mOFPAT10_SET_NW_DST
,

202 
	mOFPAT10_SET_NW_TOS
,

203 
	mOFPAT10_SET_TP_SRC
,

204 
	mOFPAT10_SET_TP_DST
,

205 
	mOFPAT10_ENQUEUE
,

206 
	mOFPAT10_VENDOR
 = 0xffff

213 
	soÂ10_a˘i⁄_ouçut
 {

214 
ovs_be16
 
	mty≥
;

215 
ovs_be16
 
	mÀn
;

216 
ovs_be16
 
	mp‹t
;

217 
ovs_be16
 
	mmax_Àn
;

219 
OFP_ASSERT
((
oÂ10_a˘i⁄_ouçut
) == 8);

222 
	soÂ_a˘i⁄_víd‹_hódî
 {

223 
ovs_be16
 
	mty≥
;

224 
ovs_be16
 
	mÀn
;

225 
ovs_be32
 
	mvíd‹
;

228 
OFP_ASSERT
((
oÂ_a˘i⁄_víd‹_hódî
) == 8);

233 
	soÂ_a˘i⁄_hódî
 {

234 
ovs_be16
 
	mty≥
;

235 
ovs_be16
 
	mÀn
;

239 
uöt8_t
 
	m∑d
[4];

241 
OFP_ASSERT
((
oÂ_a˘i⁄_hódî
) == 8);

244 
	soÂ_a˘i⁄_íqueue
 {

245 
ovs_be16
 
	mty≥
;

246 
ovs_be16
 
	mÀn
;

247 
ovs_be16
 
	mp‹t
;

250 
uöt8_t
 
	m∑d
[6];

251 
ovs_be32
 
	mqueue_id
;

253 
OFP_ASSERT
((
oÂ_a˘i⁄_íqueue
) == 16);

255 
	uoÂ_a˘i⁄
 {

256 
ovs_be16
 
	mty≥
;

257 
oÂ_a˘i⁄_hódî
 
	mhódî
;

258 
oÂ_a˘i⁄_víd‹_hódî
 
	mvíd‹
;

259 
oÂ10_a˘i⁄_ouçut
 
	mouçut10
;

260 
oÂ_a˘i⁄_vœn_vid
 
	mvœn_vid
;

261 
oÂ_a˘i⁄_vœn_p˝
 
	mvœn_p˝
;

262 
oÂ_a˘i⁄_nw_addr
 
	mnw_addr
;

263 
oÂ_a˘i⁄_nw_tos
 
	mnw_tos
;

264 
oÂ_a˘i⁄_ç_p‹t
 
	mç_p‹t
;

266 
OFP_ASSERT
((
oÂ_a˘i⁄
) == 8);

269 
	soÂ_∑ckë_out
 {

270 
ovs_be32
 
	mbuf„r_id
;

271 
ovs_be16
 
	mö_p‹t
;

272 
ovs_be16
 
	ma˘i⁄s_Àn
;

280 
OFP_ASSERT
((
oÂ_∑ckë_out
) == 8);

283 
	eoÂ_Êow_wûdˇrds
 {

284 
	mOFPFW10_IN_PORT
 = 1 << 0,

285 
	mOFPFW10_DL_VLAN
 = 1 << 1,

286 
	mOFPFW10_DL_SRC
 = 1 << 2,

287 
	mOFPFW10_DL_DST
 = 1 << 3,

288 
	mOFPFW10_DL_TYPE
 = 1 << 4,

289 
	mOFPFW10_NW_PROTO
 = 1 << 5,

290 
	mOFPFW10_TP_SRC
 = 1 << 6,

291 
	mOFPFW10_TP_DST
 = 1 << 7,

297 
	mOFPFW10_NW_SRC_SHIFT
 = 8,

298 
	mOFPFW10_NW_SRC_BITS
 = 6,

299 
	mOFPFW10_NW_SRC_MASK
 = (((1 << 
OFPFW10_NW_SRC_BITS
) - 1)

300 << 
OFPFW10_NW_SRC_SHIFT
),

301 
	mOFPFW10_NW_SRC_ALL
 = 32 << 
OFPFW10_NW_SRC_SHIFT
,

304 
	mOFPFW10_NW_DST_SHIFT
 = 14,

305 
	mOFPFW10_NW_DST_BITS
 = 6,

306 
	mOFPFW10_NW_DST_MASK
 = (((1 << 
OFPFW10_NW_DST_BITS
) - 1)

307 << 
OFPFW10_NW_DST_SHIFT
),

308 
	mOFPFW10_NW_DST_ALL
 = 32 << 
OFPFW10_NW_DST_SHIFT
,

310 
	mOFPFW10_DL_VLAN_PCP
 = 1 << 20,

311 
	mOFPFW10_NW_TOS
 = 1 << 21,

314 
	mOFPFW10_ALL
 = ((1 << 22) - 1)

319 
	#OFPFW10_ICMP_TYPE
 
OFPFW10_TP_SRC


	)

320 
	#OFPFW10_ICMP_CODE
 
OFPFW10_TP_DST


	)

326 
	#OFP_DL_TYPE_ETH2_CUTOFF
 0x0600

	)

331 
	#OFP_DL_TYPE_NOT_ETH_TYPE
 0x05ff

	)

336 
	#OFP10_VLAN_NONE
 0xffff

	)

339 
	soÂ10_m©ch
 {

340 
ovs_be32
 
	mwûdˇrds
;

341 
ovs_be16
 
	mö_p‹t
;

342 
uöt8_t
 
	mdl_§c
[
OFP_ETH_ALEN
];

343 
uöt8_t
 
	mdl_d°
[
OFP_ETH_ALEN
];

344 
ovs_be16
 
	mdl_vœn
;

345 
uöt8_t
 
	mdl_vœn_p˝
;

346 
uöt8_t
 
	m∑d1
[1];

347 
ovs_be16
 
	mdl_ty≥
;

348 
uöt8_t
 
	mnw_tos
;

349 
uöt8_t
 
	mnw_¥Ÿo
;

351 
uöt8_t
 
	m∑d2
[2];

352 
ovs_be32
 
	mnw_§c
;

353 
ovs_be32
 
	mnw_d°
;

354 
ovs_be16
 
	mç_§c
;

355 
ovs_be16
 
	mç_d°
;

357 
OFP_ASSERT
((
oÂ10_m©ch
) == 40);

361 
	#OFP_FLOW_PERMANENT
 0

	)

364 
	#OFP_DEFAULT_PRIORITY
 0x8000

	)

366 
	eoÂ10_Êow_mod_Êags
 {

367 
	mOFPFF10_EMERG
 = 1 << 2

371 
	soÂ10_Êow_mod
 {

372 
oÂ10_m©ch
 
	mm©ch
;

373 
ovs_be64
 
	mcookõ
;

376 
ovs_be16
 
	mcomm™d
;

377 
ovs_be16
 
	midÀ_timeout
;

378 
ovs_be16
 
	mh¨d_timeout
;

379 
ovs_be16
 
	m¥i‹ôy
;

380 
ovs_be32
 
	mbuf„r_id
;

382 
ovs_be16
 
	mout_p‹t
;

386 
ovs_be16
 
	mÊags
;

387 
oÂ_a˘i⁄_hódî
 
	ma˘i⁄s
[0];

391 
OFP_ASSERT
((
oÂ10_Êow_mod
) == 64);

394 
	soÂ_Êow_ªmoved
 {

395 
oÂ10_m©ch
 
	mm©ch
;

396 
ovs_be64
 
	mcookõ
;

398 
ovs_be16
 
	m¥i‹ôy
;

399 
uöt8_t
 
	mªas⁄
;

400 
uöt8_t
 
	m∑d
[1];

402 
ovs_be32
 
	mduøti⁄_£c
;

403 
ovs_be32
 
	mduøti⁄_n£c
;

405 
ovs_be16
 
	midÀ_timeout
;

406 
uöt8_t
 
	m∑d2
[2];

407 
ovs_be64
 
	m∑ckë_cou¡
;

408 
ovs_be64
 
	mbyã_cou¡
;

410 
OFP_ASSERT
((
oÂ_Êow_ªmoved
) == 80);

413 
	soÂ_îr‹_msg
 {

414 
ovs_be16
 
	mty≥
;

415 
ovs_be16
 
	mcode
;

416 
uöt8_t
 
	md©a
[0];

419 
OFP_ASSERT
((
oÂ_îr‹_msg
) == 4);

422 
	soÂ10_°©s_msg
 {

423 
oÂ_hódî
 
	mhódî
;

424 
ovs_be16
 
	mty≥
;

425 
ovs_be16
 
	mÊags
;

428 
OFP_ASSERT
((
oÂ10_°©s_msg
) == 12);

430 
	eoÂ_°©s_ª∂y_Êags
 {

431 
	mOFPSF_REPLY_MORE
 = 1 << 0

435 
	soÂ10_Êow_°©s_ªque°
 {

436 
oÂ10_m©ch
 
	mm©ch
;

437 
uöt8_t
 
	mèbÀ_id
;

439 
uöt8_t
 
	m∑d
;

440 
ovs_be16
 
	mout_p‹t
;

444 
OFP_ASSERT
((
oÂ10_Êow_°©s_ªque°
) == 44);

447 
	soÂ10_Êow_°©s
 {

448 
ovs_be16
 
	mÀngth
;

449 
uöt8_t
 
	mèbÀ_id
;

450 
uöt8_t
 
	m∑d
;

451 
oÂ10_m©ch
 
	mm©ch
;

452 
ovs_be32
 
	mduøti⁄_£c
;

453 
ovs_be32
 
	mduøti⁄_n£c
;

455 
ovs_be16
 
	m¥i‹ôy
;

457 
ovs_be16
 
	midÀ_timeout
;

458 
ovs_be16
 
	mh¨d_timeout
;

459 
uöt8_t
 
	m∑d2
[6];

460 
ovs_32Æig√d_be64
 
	mcookõ
;

461 
ovs_32Æig√d_be64
 
	m∑ckë_cou¡
;

462 
ovs_32Æig√d_be64
 
	mbyã_cou¡
;

463 
oÂ_a˘i⁄_hódî
 
	ma˘i⁄s
[0];

465 
OFP_ASSERT
((
oÂ10_Êow_°©s
) == 88);

468 
	soÂ10_èbÀ_°©s
 {

469 
uöt8_t
 
	mèbÀ_id
;

471 
uöt8_t
 
	m∑d
[3];

472 
	m«me
[
OFP_MAX_TABLE_NAME_LEN
];

473 
ovs_be32
 
	mwûdˇrds
;

475 
ovs_be32
 
	mmax_íåõs
;

476 
ovs_be32
 
	ma˘ive_cou¡
;

477 
ovs_32Æig√d_be64
 
	mlookup_cou¡
;

478 
ovs_32Æig√d_be64
 
	mm©ched_cou¡
;

480 
OFP_ASSERT
((
oÂ10_èbÀ_°©s
) == 64);

483 
	soÂ10_p‹t_°©s_ªque°
 {

484 
ovs_be16
 
	mp‹t_no
;

487 
uöt8_t
 
	m∑d
[6];

489 
OFP_ASSERT
((
oÂ10_p‹t_°©s_ªque°
) == 8);

493 
	soÂ10_p‹t_°©s
 {

494 
ovs_be16
 
	mp‹t_no
;

495 
uöt8_t
 
	m∑d
[6];

496 
ovs_32Æig√d_be64
 
	mrx_∑ckës
;

497 
ovs_32Æig√d_be64
 
	mtx_∑ckës
;

498 
ovs_32Æig√d_be64
 
	mrx_byãs
;

499 
ovs_32Æig√d_be64
 
	mtx_byãs
;

500 
ovs_32Æig√d_be64
 
	mrx_dr›≥d
;

501 
ovs_32Æig√d_be64
 
	mtx_dr›≥d
;

502 
ovs_32Æig√d_be64
 
	mrx_îr‹s
;

506 
ovs_32Æig√d_be64
 
	mtx_îr‹s
;

508 
ovs_32Æig√d_be64
 
	mrx_‰ame_îr
;

509 
ovs_32Æig√d_be64
 
	mrx_ovî_îr
;

510 
ovs_32Æig√d_be64
 
	mrx_¸c_îr
;

511 
ovs_32Æig√d_be64
 
	mcﬁlisi⁄s
;

513 
OFP_ASSERT
((
oÂ10_p‹t_°©s
) == 104);

516 
	#OFPQ_ALL
 0xffffffff

	)

519 
	soÂ10_queue_°©s_ªque°
 {

520 
ovs_be16
 
	mp‹t_no
;

521 
uöt8_t
 
	m∑d
[2];

522 
ovs_be32
 
	mqueue_id
;

524 
OFP_ASSERT
((
oÂ10_queue_°©s_ªque°
) == 8);

528 
	soÂ10_queue_°©s
 {

529 
ovs_be16
 
	mp‹t_no
;

530 
uöt8_t
 
	m∑d
[2];

531 
ovs_be32
 
	mqueue_id
;

532 
ovs_32Æig√d_be64
 
	mtx_byãs
;

533 
ovs_32Æig√d_be64
 
	mtx_∑ckës
;

534 
ovs_32Æig√d_be64
 
	mtx_îr‹s
;

536 
OFP_ASSERT
((
oÂ10_queue_°©s
) == 32);

539 
	soÂ10_víd‹_°©s_msg
 {

540 
oÂ10_°©s_msg
 
	mosm
;

541 
ovs_be32
 
	mvíd‹
;

547 
OFP_ASSERT
((
oÂ10_víd‹_°©s_msg
) == 16);

550 
	soÂ_víd‹_hódî
 {

551 
oÂ_hódî
 
	mhódî
;

552 
ovs_be32
 
	mvíd‹
;

558 
OFP_ASSERT
((
oÂ_víd‹_hódî
) == 12);

	@/home/lsch/mytest/openvswitch-1.9.0/include/openflow/openflow-1.1.h

52 #i‚de‡
OPENFLOW_11_H


53 
	#OPENFLOW_11_H
 1

	)

55 
	~"›íÊow/›íÊow-comm⁄.h
"

70 
	#OFPP11_MAX
 0xffffff00

	)

71 
	#OFPP11_OFFSET
 (
OFPP11_MAX
 - 
OFPP_MAX
)

	)

74 
	#OFPPC11_ALL
 \

75 (
OFPPC_PORT_DOWN
 | 
OFPPC_NO_RECV
 | 
OFPPC_NO_FWD
 | 
OFPPC_NO_PACKET_IN
)

	)

80 
	eoÂ11_p‹t_°©e
 {

81 
	mOFPPS11_BLOCKED
 = 1 << 1,

82 
	mOFPPS11_LIVE
 = 1 << 2,

83 
	#OFPPS11_ALL
 (
OFPPS_LINK_DOWN
 | 
OFPPS11_BLOCKED
 | 
OFPPS11_LIVE
)

	)

87 
	eoÂ11_p‹t_„©uªs
 {

88 
	mOFPPF11_40GB_FD
 = 1 << 7,

89 
	mOFPPF11_100GB_FD
 = 1 << 8,

90 
	mOFPPF11_1TB_FD
 = 1 << 9,

91 
	mOFPPF11_OTHER
 = 1 << 10,

93 
	mOFPPF11_COPPER
 = 1 << 11,

94 
	mOFPPF11_FIBER
 = 1 << 12,

95 
	mOFPPF11_AUTONEG
 = 1 << 13,

96 
	mOFPPF11_PAUSE
 = 1 << 14,

97 
	mOFPPF11_PAUSE_ASYM
 = 1 << 15

98 
	#OFPPF11_ALL
 ((1 << 16Ë- 1)

	)

102 
	soÂ11_p‹t
 {

103 
ovs_be32
 
	mp‹t_no
;

104 
uöt8_t
 
	m∑d
[4];

105 
uöt8_t
 
	mhw_addr
[
OFP_ETH_ALEN
];

106 
uöt8_t
 
	m∑d2
[2];

107 
	m«me
[
OFP_MAX_PORT_NAME_LEN
];

109 
ovs_be32
 
	mc⁄fig
;

110 
ovs_be32
 
	m°©e
;

114 
ovs_be32
 
	mcuº
;

115 
ovs_be32
 
	madvîti£d
;

116 
ovs_be32
 
	msuµ‹ãd
;

117 
ovs_be32
 
	m≥î
;

119 
ovs_be32
 
	mcuº_•ìd
;

120 
ovs_be32
 
	mmax_•ìd
;

124 
	soÂ11_p‹t_mod
 {

125 
ovs_be32
 
	mp‹t_no
;

126 
uöt8_t
 
	m∑d
[4];

127 
uöt8_t
 
	mhw_addr
[
OFP_ETH_ALEN
];

132 
uöt8_t
 
	m∑d2
[2];

133 
ovs_be32
 
	mc⁄fig
;

134 
ovs_be32
 
	mmask
;

136 
ovs_be32
 
	madvîti£
;

138 
uöt8_t
 
	m∑d3
[4];

140 
OFP_ASSERT
((
oÂ11_p‹t_mod
) == 32);

143 
	soÂ11_group_mod
 {

144 
ovs_be16
 
	mcomm™d
;

145 
uöt8_t
 
	mty≥
;

146 
uöt8_t
 
	m∑d
;

147 
ovs_be32
 
	mgroup_id
;

151 
OFP_ASSERT
((
oÂ11_group_mod
) == 8);

154 
	soÂ11_queue_gë_c⁄fig_ªque°
 {

155 
ovs_be32
 
	mp‹t
;

158 
uöt8_t
 
	m∑d
[4];

160 
OFP_ASSERT
((
oÂ11_queue_gë_c⁄fig_ªque°
) == 8);

163 
	eoÂ11_group_mod_comm™d
 {

164 
	mOFPGC11_ADD
,

165 
	mOFPGC11_MODIFY
,

166 
	mOFPGC11_DELETE
,

171 
	eoÂ11_ˇ∑bûôõs
 {

172 
	mOFPC11_GROUP_STATS
 = 1 << 3,

175 
	eoÂ11_a˘i⁄_ty≥
 {

176 
	mOFPAT11_OUTPUT
,

177 
	mOFPAT11_SET_VLAN_VID
,

178 
	mOFPAT11_SET_VLAN_PCP
,

179 
	mOFPAT11_SET_DL_SRC
,

180 
	mOFPAT11_SET_DL_DST
,

181 
	mOFPAT11_SET_NW_SRC
,

182 
	mOFPAT11_SET_NW_DST
,

183 
	mOFPAT11_SET_NW_TOS
,

184 
	mOFPAT11_SET_NW_ECN
,

185 
	mOFPAT11_SET_TP_SRC
,

186 
	mOFPAT11_SET_TP_DST
,

187 
	mOFPAT11_COPY_TTL_OUT
,

189 
	mOFPAT11_COPY_TTL_IN
,

191 
	mOFPAT11_SET_MPLS_LABEL
,

192 
	mOFPAT11_SET_MPLS_TC
,

193 
	mOFPAT11_SET_MPLS_TTL
,

194 
	mOFPAT11_DEC_MPLS_TTL
,

196 
	mOFPAT11_PUSH_VLAN
,

197 
	mOFPAT11_POP_VLAN
,

198 
	mOFPAT11_PUSH_MPLS
,

199 
	mOFPAT11_POP_MPLS
,

200 
	mOFPAT11_SET_QUEUE
,

201 
	mOFPAT11_GROUP
,

202 
	mOFPAT11_SET_NW_TTL
,

203 
	mOFPAT11_DEC_NW_TTL
,

204 
	mOFPAT11_EXPERIMENTER
 = 0xffff

207 
	#OFPMT11_STANDARD_LENGTH
 88

	)

209 
	soÂ11_m©ch_hódî
 {

210 
ovs_be16
 
	mty≥
;

211 
ovs_be16
 
	mÀngth
;

213 
OFP_ASSERT
((
oÂ11_m©ch_hódî
) == 4);

216 
	soÂ11_m©ch
 {

217 
oÂ11_m©ch_hódî
 
	momh
;

218 
ovs_be32
 
	mö_p‹t
;

219 
ovs_be32
 
	mwûdˇrds
;

220 
uöt8_t
 
	mdl_§c
[
OFP_ETH_ALEN
];

221 
uöt8_t
 
	mdl_§c_mask
[
OFP_ETH_ALEN
];

222 
uöt8_t
 
	mdl_d°
[
OFP_ETH_ALEN
];

223 
uöt8_t
 
	mdl_d°_mask
[
OFP_ETH_ALEN
];

224 
ovs_be16
 
	mdl_vœn
;

225 
uöt8_t
 
	mdl_vœn_p˝
;

226 
uöt8_t
 
	m∑d1
[1];

227 
ovs_be16
 
	mdl_ty≥
;

228 
uöt8_t
 
	mnw_tos
;

229 
uöt8_t
 
	mnw_¥Ÿo
;

230 
ovs_be32
 
	mnw_§c
;

231 
ovs_be32
 
	mnw_§c_mask
;

232 
ovs_be32
 
	mnw_d°
;

233 
ovs_be32
 
	mnw_d°_mask
;

234 
ovs_be16
 
	mç_§c
;

235 
ovs_be16
 
	mç_d°
;

236 
ovs_be32
 
	mm∂s_œbñ
;

237 
uöt8_t
 
	mm∂s_tc
;

238 
uöt8_t
 
	m∑d2
[3];

239 
ovs_be64
 
	mmëad©a
;

240 
ovs_be64
 
	mmëad©a_mask
;

242 
OFP_ASSERT
((
oÂ11_m©ch
Ë=
OFPMT11_STANDARD_LENGTH
);

245 
	eoÂ11_Êow_wûdˇrds
 {

246 
	mOFPFW11_IN_PORT
 = 1 << 0,

247 
	mOFPFW11_DL_VLAN
 = 1 << 1,

248 
	mOFPFW11_DL_VLAN_PCP
 = 1 << 2,

249 
	mOFPFW11_DL_TYPE
 = 1 << 3,

250 
	mOFPFW11_NW_TOS
 = 1 << 4,

251 
	mOFPFW11_NW_PROTO
 = 1 << 5,

252 
	mOFPFW11_TP_SRC
 = 1 << 6,

253 
	mOFPFW11_TP_DST
 = 1 << 7,

254 
	mOFPFW11_MPLS_LABEL
 = 1 << 8,

255 
	mOFPFW11_MPLS_TC
 = 1 << 9,

258 
	mOFPFW11_ALL
 = ((1 << 10) - 1)

264 
	eoÂ11_vœn_id
 {

265 
	mOFPVID11_ANY
 = 0xfffe,

268 
	mOFPVID11_NONE
 = 0xffff,

271 
	eoÂ11_ö°ru˘i⁄_ty≥
 {

272 
	mOFPIT11_GOTO_TABLE
 = 1,

274 
	mOFPIT11_WRITE_METADATA
 = 2,

276 
	mOFPIT11_WRITE_ACTIONS
 = 3,

278 
	mOFPIT11_APPLY_ACTIONS
 = 4,

279 
	mOFPIT11_CLEAR_ACTIONS
 = 5,

281 
	mOFPIT11_EXPERIMENTER
 = 0xFFFF

284 
	#OFPIT11_ALL
 (
OFPIT11_GOTO_TABLE
 | 
OFPIT11_WRITE_METADATA
 | \

285 
OFPIT11_WRITE_ACTIONS
 | 
OFPIT11_APPLY_ACTIONS
 | \

286 
OFPIT11_CLEAR_ACTIONS
)

	)

288 
	#OFP11_INSTRUCTION_ALIGN
 8

	)

291 
	soÂ11_ö°ru˘i⁄
 {

292 
ovs_be16
 
	mty≥
;

293 
ovs_be16
 
	mÀn
;

294 
uöt8_t
 
	m∑d
[4];

296 
OFP_ASSERT
((
oÂ11_ö°ru˘i⁄
) == 8);

299 
	soÂ11_ö°ru˘i⁄_gŸo_èbÀ
 {

300 
ovs_be16
 
	mty≥
;

301 
ovs_be16
 
	mÀn
;

302 
uöt8_t
 
	mèbÀ_id
;

303 
uöt8_t
 
	m∑d
[3];

305 
OFP_ASSERT
((
oÂ11_ö°ru˘i⁄_gŸo_èbÀ
) == 8);

308 
	soÂ11_ö°ru˘i⁄_wrôe_mëad©a
 {

309 
ovs_be16
 
	mty≥
;

310 
ovs_be16
 
	mÀn
;

311 
uöt8_t
 
	m∑d
[4];

312 
ovs_be64
 
	mmëad©a
;

313 
ovs_be64
 
	mmëad©a_mask
;

315 
OFP_ASSERT
((
oÂ11_ö°ru˘i⁄_wrôe_mëad©a
) == 24);

318 
	soÂ11_ö°ru˘i⁄_a˘i⁄s
 {

319 
ovs_be16
 
	mty≥
;

320 
ovs_be16
 
	mÀn
;

321 
uöt8_t
 
	m∑d
[4];

326 
OFP_ASSERT
((
oÂ11_ö°ru˘i⁄_a˘i⁄s
) == 8);

329 
	soÂ11_ö°ru˘i⁄_ex≥rimíãr
 {

330 
ovs_be16
 
	mty≥
;

331 
ovs_be16
 
	mÀn
;

332 
ovs_be32
 
	mex≥rimíãr
;

336 
OFP_ASSERT
((
oÂ11_ö°ru˘i⁄_ex≥rimíãr
) == 8);

342 
	soÂ11_a˘i⁄_ouçut
 {

343 
ovs_be16
 
	mty≥
;

344 
ovs_be16
 
	mÀn
;

345 
ovs_be32
 
	mp‹t
;

346 
ovs_be16
 
	mmax_Àn
;

347 
uöt8_t
 
	m∑d
[6];

349 
OFP_ASSERT
((
oÂ11_a˘i⁄_ouçut
) == 16);

352 
	soÂ11_a˘i⁄_group
 {

353 
ovs_be16
 
	mty≥
;

354 
ovs_be16
 
	mÀn
;

355 
ovs_be32
 
	mgroup_id
;

357 
OFP_ASSERT
((
oÂ11_a˘i⁄_group
) == 8);

360 
	soÂ11_a˘i⁄_£t_queue
 {

361 
ovs_be16
 
	mty≥
;

362 
ovs_be16
 
	mÀn
;

363 
ovs_be32
 
	mqueue_id
;

365 
OFP_ASSERT
((
oÂ11_a˘i⁄_£t_queue
) == 8);

368 
	soÂ11_a˘i⁄_m∂s_œbñ
 {

369 
ovs_be16
 
	mty≥
;

370 
ovs_be16
 
	mÀn
;

371 
ovs_be32
 
	mm∂s_œbñ
;

373 
OFP_ASSERT
((
oÂ11_a˘i⁄_m∂s_œbñ
) == 8);

376 
	soÂ11_a˘i⁄_m∂s_tc
 {

377 
ovs_be16
 
	mty≥
;

378 
ovs_be16
 
	mÀn
;

379 
uöt8_t
 
	mm∂s_tc
;

380 
uöt8_t
 
	m∑d
[3];

382 
OFP_ASSERT
((
oÂ11_a˘i⁄_m∂s_tc
) == 8);

385 
	soÂ11_a˘i⁄_m∂s_âl
 {

386 
ovs_be16
 
	mty≥
;

387 
ovs_be16
 
	mÀn
;

388 
uöt8_t
 
	mm∂s_âl
;

389 
uöt8_t
 
	m∑d
[3];

391 
OFP_ASSERT
((
oÂ11_a˘i⁄_m∂s_âl
) == 8);

394 
	soÂ11_a˘i⁄_nw_e˙
 {

395 
ovs_be16
 
	mty≥
;

396 
ovs_be16
 
	mÀn
;

397 
uöt8_t
 
	mnw_e˙
;

398 
uöt8_t
 
	m∑d
[3];

400 
OFP_ASSERT
((
oÂ11_a˘i⁄_nw_e˙
) == 8);

403 
	soÂ11_a˘i⁄_nw_âl
 {

404 
ovs_be16
 
	mty≥
;

405 
ovs_be16
 
	mÀn
;

406 
uöt8_t
 
	mnw_âl
;

407 
uöt8_t
 
	m∑d
[3];

409 
OFP_ASSERT
((
oÂ11_a˘i⁄_nw_âl
) == 8);

412 
	soÂ11_a˘i⁄_push
 {

413 
ovs_be16
 
	mty≥
;

414 
ovs_be16
 
	mÀn
;

415 
ovs_be16
 
	mëhîty≥
;

416 
uöt8_t
 
	m∑d
[2];

418 
OFP_ASSERT
((
oÂ11_a˘i⁄_push
) == 8);

421 
	soÂ11_a˘i⁄_p›_m∂s
 {

422 
ovs_be16
 
	mty≥
;

423 
ovs_be16
 
	mÀn
;

424 
ovs_be16
 
	mëhîty≥
;

425 
uöt8_t
 
	m∑d
[2];

427 
OFP_ASSERT
((
oÂ11_a˘i⁄_p›_m∂s
) == 8);

430 
	soÂ11_èbÀ_mod
 {

431 
uöt8_t
 
	mèbÀ_id
;

432 
uöt8_t
 
	m∑d
[3];

433 
ovs_be32
 
	mc⁄fig
;

435 
OFP_ASSERT
((
oÂ11_èbÀ_mod
) == 8);

440 
	eoÂ11_èbÀ_c⁄fig
 {

441 
	mOFPTC11_TABLE_MISS_CONTROLLER
 = 0,

442 
	mOFPTC11_TABLE_MISS_CONTINUE
 = 1 << 0,

445 
	mOFPTC11_TABLE_MISS_DROP
 = 1 << 1,

446 
	mOFPTC11_TABLE_MISS_MASK
 = 3

450 
	soÂ11_Êow_mod
 {

451 
ovs_be64
 
	mcookõ
;

452 
ovs_be64
 
	mcookõ_mask
;

457 
uöt8_t
 
	mèbÀ_id
;

458 
uöt8_t
 
	mcomm™d
;

459 
ovs_be16
 
	midÀ_timeout
;

460 
ovs_be16
 
	mh¨d_timeout
;

461 
ovs_be16
 
	m¥i‹ôy
;

462 
ovs_be32
 
	mbuf„r_id
;

464 
ovs_be32
 
	mout_p‹t
;

468 
ovs_be32
 
	mout_group
;

472 
ovs_be16
 
	mÊags
;

473 
uöt8_t
 
	m∑d
[2];

477 
OFP_ASSERT
((
oÂ11_Êow_mod
) == 40);

481 
	eoÂ11_group_ty≥
 {

482 
	mOFPGT11_ALL
,

483 
	mOFPGT11_SELECT
,

484 
	mOFPGT11_INDIRECT
,

485 
	mOFPGT11_FF


489 
	eoÂ11_group
 {

491 
	mOFPG11_MAX
 = 0xffffff00,

494 
	mOFPG11_ALL
 = 0xfffffffc,

496 
	mOFPG11_ANY
 = 0xffffffff

503 
	soÂ11_buckë
 {

504 
ovs_be16
 
	mÀn
;

507 
ovs_be16
 
	mweight
;

509 
ovs_be32
 
	mw©ch_p‹t
;

512 
ovs_be32
 
	mw©ch_group
;

515 
uöt8_t
 
	m∑d
[4];

520 
OFP_ASSERT
((
oÂ11_buckë
) == 16);

523 
	soÂ11_queue_gë_c⁄fig_ª∂y
 {

524 
ovs_be32
 
	mp‹t
;

525 
uöt8_t
 
	m∑d
[4];

528 
OFP_ASSERT
((
oÂ11_queue_gë_c⁄fig_ª∂y
) == 8);

530 
	soÂ11_°©s_msg
 {

531 
oÂ_hódî
 
	mhódî
;

532 
ovs_be16
 
	mty≥
;

533 
ovs_be16
 
	mÊags
;

534 
uöt8_t
 
	m∑d
[4];

537 
OFP_ASSERT
((
oÂ11_°©s_msg
) == 16);

540 
	soÂ11_víd‹_°©s_msg
 {

541 
oÂ11_°©s_msg
 
	mosm
;

542 
ovs_be32
 
	mvíd‹
;

548 
OFP_ASSERT
((
oÂ11_víd‹_°©s_msg
) == 20);

551 
	soÂ11_Êow_°©s_ªque°
 {

552 
uöt8_t
 
	mèbÀ_id
;

554 
uöt8_t
 
	m∑d
[3];

555 
ovs_be32
 
	mout_p‹t
;

558 
ovs_be32
 
	mout_group
;

561 
uöt8_t
 
	m∑d2
[4];

562 
ovs_be64
 
	mcookõ
;

564 
ovs_be64
 
	mcookõ_mask
;

569 
OFP_ASSERT
((
oÂ11_Êow_°©s_ªque°
) == 32);

572 
	soÂ11_Êow_°©s
 {

573 
ovs_be16
 
	mÀngth
;

574 
uöt8_t
 
	mèbÀ_id
;

575 
uöt8_t
 
	m∑d
;

576 
ovs_be32
 
	mduøti⁄_£c
;

577 
ovs_be32
 
	mduøti⁄_n£c
;

579 
ovs_be16
 
	m¥i‹ôy
;

581 
ovs_be16
 
	midÀ_timeout
;

582 
ovs_be16
 
	mh¨d_timeout
;

583 
uöt8_t
 
	m∑d2
[6];

584 
ovs_be64
 
	mcookõ
;

585 
ovs_be64
 
	m∑ckë_cou¡
;

586 
ovs_be64
 
	mbyã_cou¡
;

590 
OFP_ASSERT
((
oÂ11_Êow_°©s
) == 48);

596 
	eoÂ11_Êow_m©ch_fõlds
 {

597 
	mOFPFMF11_IN_PORT
 = 1 << 0,

598 
	mOFPFMF11_DL_VLAN
 = 1 << 1,

599 
	mOFPFMF11_DL_VLAN_PCP
 = 1 << 2,

600 
	mOFPFMF11_DL_TYPE
 = 1 << 3,

601 
	mOFPFMF11_NW_TOS
 = 1 << 4,

602 
	mOFPFMF11_NW_PROTO
 = 1 << 5,

603 
	mOFPFMF11_TP_SRC
 = 1 << 6,

604 
	mOFPFMF11_TP_DST
 = 1 << 7,

605 
	mOFPFMF11_MPLS_LABEL
 = 1 << 8,

606 
	mOFPFMF11_MPLS_TC
 = 1 << 9,

607 
	mOFPFMF11_TYPE
 = 1 << 10,

608 
	mOFPFMF11_DL_SRC
 = 1 << 11,

609 
	mOFPFMF11_DL_DST
 = 1 << 12,

610 
	mOFPFMF11_NW_SRC
 = 1 << 13,

611 
	mOFPFMF11_NW_DST
 = 1 << 14,

612 
	mOFPFMF11_METADATA
 = 1 << 15,

616 
	soÂ11_èbÀ_°©s
 {

617 
uöt8_t
 
	mèbÀ_id
;

619 
uöt8_t
 
	m∑d
[7];

620 
	m«me
[
OFP_MAX_TABLE_NAME_LEN
];

621 
ovs_be32
 
	mwûdˇrds
;

623 
ovs_be32
 
	mm©ch
;

625 
ovs_be32
 
	mö°ru˘i⁄s
;

626 
ovs_be32
 
	mwrôe_a˘i⁄s
;

628 
ovs_be32
 
	m≠∂y_a˘i⁄s
;

630 
ovs_be32
 
	mc⁄fig
;

631 
ovs_be32
 
	mmax_íåõs
;

632 
ovs_be32
 
	ma˘ive_cou¡
;

633 
ovs_be64
 
	mlookup_cou¡
;

634 
ovs_be64
 
	mm©ched_cou¡
;

636 
OFP_ASSERT
((
oÂ11_èbÀ_°©s
) == 88);

639 
	soÂ11_p‹t_°©s_ªque°
 {

640 
ovs_be32
 
	mp‹t_no
;

644 
uöt8_t
 
	m∑d
[4];

646 
OFP_ASSERT
((
oÂ11_p‹t_°©s_ªque°
) == 8);

650 
	soÂ11_p‹t_°©s
 {

651 
ovs_be32
 
	mp‹t_no
;

652 
uöt8_t
 
	m∑d
[4];

653 
ovs_be64
 
	mrx_∑ckës
;

654 
ovs_be64
 
	mtx_∑ckës
;

655 
ovs_be64
 
	mrx_byãs
;

656 
ovs_be64
 
	mtx_byãs
;

657 
ovs_be64
 
	mrx_dr›≥d
;

658 
ovs_be64
 
	mtx_dr›≥d
;

659 
ovs_be64
 
	mrx_îr‹s
;

663 
ovs_be64
 
	mtx_îr‹s
;

665 
ovs_be64
 
	mrx_‰ame_îr
;

666 
ovs_be64
 
	mrx_ovî_îr
;

667 
ovs_be64
 
	mrx_¸c_îr
;

668 
ovs_be64
 
	mcﬁlisi⁄s
;

670 
OFP_ASSERT
((
oÂ11_p‹t_°©s
) == 104);

672 
	soÂ11_queue_°©s_ªque°
 {

673 
ovs_be32
 
	mp‹t_no
;

674 
ovs_be32
 
	mqueue_id
;

676 
OFP_ASSERT
((
oÂ11_queue_°©s_ªque°
) == 8);

678 
	soÂ11_queue_°©s
 {

679 
ovs_be32
 
	mp‹t_no
;

680 
ovs_be32
 
	mqueue_id
;

681 
ovs_be64
 
	mtx_byãs
;

682 
ovs_be64
 
	mtx_∑ckës
;

683 
ovs_be64
 
	mtx_îr‹s
;

685 
OFP_ASSERT
((
oÂ11_queue_°©s
) == 32);

687 
	soÂ11_group_°©s_ªque°
 {

688 
ovs_be32
 
	mgroup_id
;

689 
uöt8_t
 
	m∑d
[4];

691 
OFP_ASSERT
((
oÂ11_group_°©s_ªque°
) == 8);

694 
	soÂ11_group_°©s
 {

695 
ovs_be16
 
	mÀngth
;

696 
uöt8_t
 
	m∑d
[2];

697 
ovs_be32
 
	mgroup_id
;

698 
ovs_be32
 
	mªf_cou¡
;

700 
uöt8_t
 
	m∑d2
[4];

701 
ovs_be64
 
	m∑ckë_cou¡
;

702 
ovs_be64
 
	mbyã_cou¡
;

706 
OFP_ASSERT
((
oÂ11_group_°©s
) == 32);

709 
	soÂ11_buckë_cou¡î
 {

710 
ovs_be64
 
	m∑ckë_cou¡
;

711 
ovs_be64
 
	mbyã_cou¡
;

713 
OFP_ASSERT
((
oÂ11_buckë_cou¡î
) == 16);

716 
	soÂ11_group_desc_°©s
 {

717 
ovs_be16
 
	mÀngth
;

718 
uöt8_t
 
	mty≥
;

719 
uöt8_t
 
	m∑d
;

720 
ovs_be32
 
	mgroup_id
;

723 
OFP_ASSERT
((
oÂ11_group_desc_°©s
) == 8);

726 
	soÂ11_∑ckë_out
 {

727 
ovs_be32
 
	mbuf„r_id
;

728 
ovs_be32
 
	mö_p‹t
;

729 
ovs_be16
 
	ma˘i⁄s_Àn
;

730 
uöt8_t
 
	m∑d
[6];

736 
OFP_ASSERT
((
oÂ11_∑ckë_out
) == 16);

739 
	soÂ11_∑ckë_ö
 {

740 
ovs_be32
 
	mbuf„r_id
;

741 
ovs_be32
 
	mö_p‹t
;

742 
ovs_be32
 
	mö_phy_p‹t
;

743 
ovs_be16
 
	mtŸÆ_Àn
;

744 
uöt8_t
 
	mªas⁄
;

745 
uöt8_t
 
	mèbÀ_id
;

746 
uöt8_t
 
	md©a
[0];

753 
OFP_ASSERT
((
oÂ11_∑ckë_ö
) == 16);

756 
	soÂ11_Êow_ªmoved
 {

757 
ovs_be64
 
	mcookõ
;

759 
ovs_be16
 
	m¥i‹ôy
;

760 
uöt8_t
 
	mªas⁄
;

761 
uöt8_t
 
	mèbÀ_id
;

763 
ovs_be32
 
	mduøti⁄_£c
;

764 
ovs_be32
 
	mduøti⁄_n£c
;

766 
ovs_be16
 
	midÀ_timeout
;

767 
uöt8_t
 
	m∑d2
[2];

768 
ovs_be64
 
	m∑ckë_cou¡
;

769 
ovs_be64
 
	mbyã_cou¡
;

772 
OFP_ASSERT
((
oÂ11_Êow_ªmoved
) == 40);

	@/home/lsch/mytest/openvswitch-1.9.0/include/openflow/openflow-1.2.h

53 #i‚de‡
OPENFLOW_12_H


54 
	#OPENFLOW_12_H
 1

	)

56 
	~"›íÊow/›íÊow-1.1.h
"

64 
	eoÂ12_oxm_˛ass
 {

65 
	mOFPXMC12_NXM_0
 = 0x0000,

66 
	mOFPXMC12_NXM_1
 = 0x0001,

67 
	mOFPXMC12_OPENFLOW_BASIC
 = 0x8000,

68 
	mOFPXMC12_EXPERIMENTER
 = 0xffff,

72 
	eoxm12_ofb_m©ch_fõlds
 {

73 
	mOFPXMT12_OFB_IN_PORT
,

74 
	mOFPXMT12_OFB_IN_PHY_PORT
,

75 
	mOFPXMT12_OFB_METADATA
,

76 
	mOFPXMT12_OFB_ETH_DST
,

77 
	mOFPXMT12_OFB_ETH_SRC
,

78 
	mOFPXMT12_OFB_ETH_TYPE
,

79 
	mOFPXMT12_OFB_VLAN_VID
,

80 
	mOFPXMT12_OFB_VLAN_PCP
,

81 
	mOFPXMT12_OFB_IP_DSCP
,

82 
	mOFPXMT12_OFB_IP_ECN
,

83 
	mOFPXMT12_OFB_IP_PROTO
,

84 
	mOFPXMT12_OFB_IPV4_SRC
,

85 
	mOFPXMT12_OFB_IPV4_DST
,

86 
	mOFPXMT12_OFB_TCP_SRC
,

87 
	mOFPXMT12_OFB_TCP_DST
,

88 
	mOFPXMT12_OFB_UDP_SRC
,

89 
	mOFPXMT12_OFB_UDP_DST
,

90 
	mOFPXMT12_OFB_SCTP_SRC
,

91 
	mOFPXMT12_OFB_SCTP_DST
,

92 
	mOFPXMT12_OFB_ICMPV4_TYPE
,

93 
	mOFPXMT12_OFB_ICMPV4_CODE
,

94 
	mOFPXMT12_OFB_ARP_OP
,

95 
	mOFPXMT12_OFB_ARP_SPA
,

96 
	mOFPXMT12_OFB_ARP_TPA
,

97 
	mOFPXMT12_OFB_ARP_SHA
,

98 
	mOFPXMT12_OFB_ARP_THA
,

99 
	mOFPXMT12_OFB_IPV6_SRC
,

100 
	mOFPXMT12_OFB_IPV6_DST
,

101 
	mOFPXMT12_OFB_IPV6_FLABEL
,

102 
	mOFPXMT12_OFB_ICMPV6_TYPE
,

103 
	mOFPXMT12_OFB_ICMPV6_CODE
,

104 
	mOFPXMT12_OFB_IPV6_ND_TARGET
,

105 
	mOFPXMT12_OFB_IPV6_ND_SLL
,

106 
	mOFPXMT12_OFB_IPV6_ND_TLL
,

107 
	mOFPXMT12_OFB_MPLS_LABEL
,

108 
	mOFPXMT12_OFB_MPLS_TC
,

111 
	mOFPXMT12_OFB_MAX
,

114 
	#OFPXMT12_MASK
 ((1ULL << 
OFPXMT12_OFB_MAX
Ë- 1)

	)

120 
	#OXM_HEADER
(
FIELD
, 
LENGTH
) \

121 
	`NXM_HEADER
(
OFPXMC12_OPENFLOW_BASIC
, 
FIELD
, 
LENGTH
)

	)

122 
	#OXM_HEADER_W
(
FIELD
, 
LENGTH
) \

123 
	`NXM_HEADER_W
(
OFPXMC12_OPENFLOW_BASIC
, 
FIELD
, 
LENGTH
)

	)

125 
	#IS_OXM_HEADER
(
hódî
Ë(
	`NXM_VENDOR
(hódîË=
OFPXMC12_OPENFLOW_BASIC
)

	)

127 
	#OXM_OF_IN_PORT
 
	`OXM_HEADER
 (
OFPXMT12_OFB_IN_PORT
, 4)

	)

128 
	#OXM_OF_IN_PHY_PORT
 
	`OXM_HEADER
 (
OFPXMT12_OFB_IN_PHY_PORT
, 4)

	)

129 
	#OXM_OF_METADATA
 
	`OXM_HEADER
 (
OFPXMT12_OFB_METADATA
, 8)

	)

130 
	#OXM_OF_ETH_DST
 
	`OXM_HEADER
 (
OFPXMT12_OFB_ETH_DST
, 6)

	)

131 
	#OXM_OF_ETH_DST_W
 
	`OXM_HEADER_W
 (
OFPXMT12_OFB_ETH_DST
, 6)

	)

132 
	#OXM_OF_ETH_SRC
 
	`OXM_HEADER
 (
OFPXMT12_OFB_ETH_SRC
, 6)

	)

133 
	#OXM_OF_ETH_SRC_W
 
	`OXM_HEADER_W
 (
OFPXMT12_OFB_ETH_SRC
, 6)

	)

134 
	#OXM_OF_ETH_TYPE
 
	`OXM_HEADER
 (
OFPXMT12_OFB_ETH_TYPE
, 2)

	)

135 
	#OXM_OF_VLAN_VID
 
	`OXM_HEADER
 (
OFPXMT12_OFB_VLAN_VID
, 2)

	)

136 
	#OXM_OF_VLAN_VID_W
 
	`OXM_HEADER_W
 (
OFPXMT12_OFB_VLAN_VID
, 2)

	)

137 
	#OXM_OF_VLAN_PCP
 
	`OXM_HEADER
 (
OFPXMT12_OFB_VLAN_PCP
, 1)

	)

138 
	#OXM_OF_IP_DSCP
 
	`OXM_HEADER
 (
OFPXMT12_OFB_IP_DSCP
, 1)

	)

139 
	#OXM_OF_IP_ECN
 
	`OXM_HEADER
 (
OFPXMT12_OFB_IP_ECN
, 1)

	)

140 
	#OXM_OF_IP_PROTO
 
	`OXM_HEADER
 (
OFPXMT12_OFB_IP_PROTO
, 1)

	)

141 
	#OXM_OF_IPV4_SRC
 
	`OXM_HEADER
 (
OFPXMT12_OFB_IPV4_SRC
, 4)

	)

142 
	#OXM_OF_IPV4_SRC_W
 
	`OXM_HEADER_W
 (
OFPXMT12_OFB_IPV4_SRC
, 4)

	)

143 
	#OXM_OF_IPV4_DST
 
	`OXM_HEADER
 (
OFPXMT12_OFB_IPV4_DST
, 4)

	)

144 
	#OXM_OF_IPV4_DST_W
 
	`OXM_HEADER_W
 (
OFPXMT12_OFB_IPV4_DST
, 4)

	)

145 
	#OXM_OF_TCP_SRC
 
	`OXM_HEADER
 (
OFPXMT12_OFB_TCP_SRC
, 2)

	)

146 
	#OXM_OF_TCP_DST
 
	`OXM_HEADER
 (
OFPXMT12_OFB_TCP_DST
, 2)

	)

147 
	#OXM_OF_UDP_SRC
 
	`OXM_HEADER
 (
OFPXMT12_OFB_UDP_SRC
, 2)

	)

148 
	#OXM_OF_UDP_DST
 
	`OXM_HEADER
 (
OFPXMT12_OFB_UDP_DST
, 2)

	)

149 
	#OXM_OF_SCTP_SRC
 
	`OXM_HEADER
 (
OFPXMT12_OFB_SCTP_SRC
, 2)

	)

150 
	#OXM_OF_SCTP_DST
 
	`OXM_HEADER
 (
OFPXMT12_OFB_SCTP_DST
, 2)

	)

151 
	#OXM_OF_ICMPV4_TYPE
 
	`OXM_HEADER
 (
OFPXMT12_OFB_ICMPV4_TYPE
, 1)

	)

152 
	#OXM_OF_ICMPV4_CODE
 
	`OXM_HEADER
 (
OFPXMT12_OFB_ICMPV4_CODE
, 1)

	)

153 
	#OXM_OF_ARP_OP
 
	`OXM_HEADER
 (
OFPXMT12_OFB_ARP_OP
, 2)

	)

154 
	#OXM_OF_ARP_SPA
 
	`OXM_HEADER
 (
OFPXMT12_OFB_ARP_SPA
, 4)

	)

155 
	#OXM_OF_ARP_SPA_W
 
	`OXM_HEADER_W
 (
OFPXMT12_OFB_ARP_SPA
, 4)

	)

156 
	#OXM_OF_ARP_TPA
 
	`OXM_HEADER
 (
OFPXMT12_OFB_ARP_TPA
, 4)

	)

157 
	#OXM_OF_ARP_TPA_W
 
	`OXM_HEADER_W
 (
OFPXMT12_OFB_ARP_TPA
, 4)

	)

158 
	#OXM_OF_ARP_SHA
 
	`OXM_HEADER
 (
OFPXMT12_OFB_ARP_SHA
, 6)

	)

159 
	#OXM_OF_ARP_SHA_W
 
	`OXM_HEADER_W
 (
OFPXMT12_OFB_ARP_SHA
, 6)

	)

160 
	#OXM_OF_ARP_THA
 
	`OXM_HEADER
 (
OFPXMT12_OFB_ARP_THA
, 6)

	)

161 
	#OXM_OF_ARP_THA_W
 
	`OXM_HEADER_W
 (
OFPXMT12_OFB_ARP_THA
, 6)

	)

162 
	#OXM_OF_IPV6_SRC
 
	`OXM_HEADER
 (
OFPXMT12_OFB_IPV6_SRC
, 16)

	)

163 
	#OXM_OF_IPV6_SRC_W
 
	`OXM_HEADER_W
 (
OFPXMT12_OFB_IPV6_SRC
, 16)

	)

164 
	#OXM_OF_IPV6_DST
 
	`OXM_HEADER
 (
OFPXMT12_OFB_IPV6_DST
, 16)

	)

165 
	#OXM_OF_IPV6_DST_W
 
	`OXM_HEADER_W
 (
OFPXMT12_OFB_IPV6_DST
, 16)

	)

166 
	#OXM_OF_IPV6_FLABEL
 
	`OXM_HEADER
 (
OFPXMT12_OFB_IPV6_FLABEL
, 4)

	)

167 
	#OXM_OF_IPV6_FLABEL_W
 
	`OXM_HEADER_W
 (
OFPXMT12_OFB_IPV6_FLABEL
, 4)

	)

168 
	#OXM_OF_ICMPV6_TYPE
 
	`OXM_HEADER
 (
OFPXMT12_OFB_ICMPV6_TYPE
, 1)

	)

169 
	#OXM_OF_ICMPV6_CODE
 
	`OXM_HEADER
 (
OFPXMT12_OFB_ICMPV6_CODE
, 1)

	)

170 
	#OXM_OF_IPV6_ND_TARGET
 
	`OXM_HEADER
 (
OFPXMT12_OFB_IPV6_ND_TARGET
, 16)

	)

171 
	#OXM_OF_IPV6_ND_SLL
 
	`OXM_HEADER
 (
OFPXMT12_OFB_IPV6_ND_SLL
, 6)

	)

172 
	#OXM_OF_IPV6_ND_TLL
 
	`OXM_HEADER
 (
OFPXMT12_OFB_IPV6_ND_TLL
, 6)

	)

173 
	#OXM_OF_MPLS_LABEL
 
	`OXM_HEADER
 (
OFPXMT12_OFB_MPLS_LABEL
, 4)

	)

174 
	#OXM_OF_MPLS_TC
 
	`OXM_HEADER
 (
OFPXMT12_OFB_MPLS_TC
, 1)

	)

179 
	eoÂ12_vœn_id
 {

180 
	mOFPVID12_PRESENT
 = 0x1000,

181 
	mOFPVID12_NONE
 = 0x0000,

185 
	soÂ12_oxm_ex≥rimíãr_hódî
 {

186 
ovs_be32
 
	moxm_hódî
;

187 
ovs_be32
 
	mex≥rimíãr
;

190 
OFP_ASSERT
((
oÂ12_oxm_ex≥rimíãr_hódî
) == 8);

192 
	eoÂ12_a˘i⁄_ty≥
 {

193 
	mOFPAT12_SET_FIELD
 = 25,

196 
	eoÂ12_c⁄åﬁÀr_max_Àn
 {

197 
	mOFPCML12_MAX
 = 0xffe5,

199 
	mOFPCML12_NO_BUFFER
 = 0xffff

205 
	soÂ12_a˘i⁄_£t_fõld
 {

206 
ovs_be16
 
	mty≥
;

207 
ovs_be16
 
	mÀn
;

208 
ovs_be32
 
	md°
;

214 
OFP_ASSERT
((
oÂ12_a˘i⁄_£t_fõld
) == 8);

218 
	eoÂ12_Êow_mod_Êags
 {

219 
	mOFPFF12_RESET_COUNTS
 = 1 << 2

224 
	eoÂ12_ˇ∑bûôõs
 {

225 
	mOFPC12_PORT_BLOCKED
 = 1 << 8

230 
	eoÂ12_°©s_ty≥s
 {

234 
	mOFPST12_GROUP_FEATURES
 = 8

239 
	eoÂ12_queue_¥›îtõs
 {

240 
	mOFPQT12_MIN_RATE
 = 1,

241 
	mOFPQT12_MAX_RATE
 = 2,

242 
	mOFPQT12_EXPERIMENTER
 = 0xffff

246 
	soÂ12_èbÀ_°©s
 {

247 
uöt8_t
 
	mèbÀ_id
;

249 
uöt8_t
 
	m∑d
[7];

250 
	m«me
[
OFP_MAX_TABLE_NAME_LEN
];

251 
ovs_be64
 
	mm©ch
;

253 
ovs_be64
 
	mwûdˇrds
;

255 
ovs_be32
 
	mwrôe_a˘i⁄s
;

257 
ovs_be32
 
	m≠∂y_a˘i⁄s
;

259 
ovs_be64
 
	mwrôe_£tfõlds
;

261 
ovs_be64
 
	m≠∂y_£tfõlds
;

263 
ovs_be64
 
	mmëad©a_m©ch
;

264 
ovs_be64
 
	mmëad©a_wrôe
;

265 
ovs_be32
 
	mö°ru˘i⁄s
;

266 
ovs_be32
 
	mc⁄fig
;

267 
ovs_be32
 
	mmax_íåõs
;

268 
ovs_be32
 
	ma˘ive_cou¡
;

269 
ovs_be64
 
	mlookup_cou¡
;

270 
ovs_be64
 
	mm©ched_cou¡
;

272 
OFP_ASSERT
((
oÂ12_èbÀ_°©s
) == 128);

275 
	soÂ12_group_„©uªs_°©s
 {

276 
ovs_be32
 
	mty≥s
;

277 
ovs_be32
 
	mˇ∑bûôõs
;

278 
ovs_be32
 
	mmax_groups
[4];

279 
ovs_be32
 
	ma˘i⁄s
[4];

281 
OFP_ASSERT
((
oÂ12_group_„©uªs_°©s
) == 40);

284 
	eoÂ12_group_ˇ∑bûôõs
 {

285 
	mOFPGFC12_SELECT_WEIGHT
 = 1 << 0,

286 
	mOFPGFC12_SELECT_LIVENESS
 = 1 << 1,

287 
	mOFPGFC12_CHAINING
 = 1 << 2,

288 
	mOFPGFC12_CHAINING_CHECKS
 = 1 << 3,

292 
	soÂ12_ex≥rimíãr_°©s_hódî
 {

293 
ovs_be32
 
	mex≥rimíãr
;

295 
ovs_be32
 
	mexp_ty≥
;

298 
OFP_ASSERT
((
oÂ12_ex≥rimíãr_°©s_hódî
) == 8);

301 
	soÂ12_rﬁe_ªque°
 {

302 
ovs_be32
 
	mrﬁe
;

303 
uöt8_t
 
	m∑d
[4];

304 
ovs_be64
 
	mgíî©i⁄_id
;

306 
OFP_ASSERT
((
oÂ12_rﬁe_ªque°
) == 16);

309 
	eoÂ12_c⁄åﬁÀr_rﬁe
 {

310 
	mOFPCR12_ROLE_NOCHANGE
,

311 
	mOFPCR12_ROLE_EQUAL
,

312 
	mOFPCR12_ROLE_MASTER
,

313 
	mOFPCR12_ROLE_SLAVE
,

317 
	soÂ12_∑ckë_ö
 {

318 
ovs_be32
 
	mbuf„r_id
;

319 
ovs_be16
 
	mtŸÆ_Àn
;

320 
uöt8_t
 
	mªas⁄
;

321 
uöt8_t
 
	mèbÀ_id
;

333 
OFP_ASSERT
((
oÂ12_∑ckë_ö
) == 8);

336 
	soÂ12_Êow_ªmoved
 {

337 
ovs_be64
 
	mcookõ
;

339 
ovs_be16
 
	m¥i‹ôy
;

340 
uöt8_t
 
	mªas⁄
;

341 
uöt8_t
 
	mèbÀ_id
;

343 
ovs_be32
 
	mduøti⁄_£c
;

344 
ovs_be32
 
	mduøti⁄_n£c
;

346 
ovs_be16
 
	midÀ_timeout
;

347 
ovs_be16
 
	mh¨d_timeout
;

348 
ovs_be64
 
	m∑ckë_cou¡
;

349 
ovs_be64
 
	mbyã_cou¡
;

352 
OFP_ASSERT
((
oÂ12_Êow_ªmoved
) == 40);

	@/home/lsch/mytest/openvswitch-1.9.0/include/openflow/openflow-common.h

50 #i‚de‡
OPENFLOW_COMMON_H


51 
	#OPENFLOW_COMMON_H
 1

	)

53 
	~"›ívswôch/ty≥s.h
"

55 #ifde‡
SWIG


56 
	#OFP_ASSERT
(
EXPR
Ë

	)

57 #ñi‡!
deföed
(
__˝lu•lus
)

59 
	#OFP_ASSERT
(
EXPR
) \

60 (*
	`buûd_as£π
())[ (struct { \

61 
buûd_as£π_Áûed
 : (
EXPR
Ë? 1 : -1; })]

	)

63 
	~<boo°/°©ic_as£π.hµ
>

64 
	#OFP_ASSERT
 
BOOST_STATIC_ASSERT


	)

74 
	eoÂ_vîsi⁄
 {

75 
OFP10_VERSION
 = 0x01,

76 
OFP11_VERSION
 = 0x02,

77 
OFP12_VERSION
 = 0x03,

80 
	#OFP_MAX_TABLE_NAME_LEN
 32

	)

81 
	#OFP_MAX_PORT_NAME_LEN
 16

	)

83 
	#OFP_TCP_PORT
 6633

	)

84 
	#OFP_SSL_PORT
 6633

	)

86 
	#OFP_ETH_ALEN
 6

	)

89 
	soÂ_hódî
 {

90 
uöt8_t
 
	mvîsi⁄
;

91 
uöt8_t
 
	mty≥
;

92 
ovs_be16
 
	mÀngth
;

93 
ovs_be32
 
	mxid
;

97 
OFP_ASSERT
((
oÂ_hódî
) == 8);

103 
	eoÂ_p‹t_c⁄fig
 {

104 
	mOFPPC_PORT_DOWN
 = 1 << 0,

106 
	mOFPPC_NO_RECV
 = 1 << 2,

107 
	mOFPPC_NO_FWD
 = 1 << 5,

108 
	mOFPPC_NO_PACKET_IN
 = 1 << 6

114 
	eoÂ_p‹t_°©e
 {

115 
	mOFPPS_LINK_DOWN
 = 1 << 0,

119 
	eoÂ_p‹t_„©uªs
 {

120 
	mOFPPF_10MB_HD
 = 1 << 0,

121 
	mOFPPF_10MB_FD
 = 1 << 1,

122 
	mOFPPF_100MB_HD
 = 1 << 2,

123 
	mOFPPF_100MB_FD
 = 1 << 3,

124 
	mOFPPF_1GB_HD
 = 1 << 4,

125 
	mOFPPF_1GB_FD
 = 1 << 5,

126 
	mOFPPF_10GB_FD
 = 1 << 6,

129 
	soÂ_∑ckë_queue
 {

130 
ovs_be32
 
	mqueue_id
;

131 
ovs_be16
 
	mÀn
;

132 
uöt8_t
 
	m∑d
[2];

135 
OFP_ASSERT
((
oÂ_∑ckë_queue
) == 8);

137 
	eoÂ_queue_¥›îtõs
 {

138 
	mOFPQT_NONE
 = 0,

139 
	mOFPQT_MIN_RATE
,

145 
	soÂ_queue_¥›_hódî
 {

146 
ovs_be16
 
	m¥›îty
;

147 
ovs_be16
 
	mÀn
;

148 
uöt8_t
 
	m∑d
[4];

150 
OFP_ASSERT
((
oÂ_queue_¥›_hódî
) == 8);

153 
	soÂ_queue_¥›_mö_øã
 {

154 
oÂ_queue_¥›_hódî
 
	m¥›_hódî
;

155 
ovs_be16
 
	møã
;

156 
uöt8_t
 
	m∑d
[6];

158 
OFP_ASSERT
((
oÂ_queue_¥›_mö_øã
) == 16);

161 
	soÂ_swôch_„©uªs
 {

162 
ovs_be64
 
	md©≠©h_id
;

166 
ovs_be32
 
	mn_buf„rs
;

168 
uöt8_t
 
	mn_èbÀs
;

169 
uöt8_t
 
	m∑d
[3];

172 
ovs_be32
 
	mˇ∑bûôõs
;

173 
ovs_be32
 
	ma˘i⁄s
;

178 
OFP_ASSERT
((
oÂ_swôch_„©uªs
) == 24);

182 
	eoÂ_ˇ∑bûôõs
 {

183 
	mOFPC_FLOW_STATS
 = 1 << 0,

184 
	mOFPC_TABLE_STATS
 = 1 << 1,

185 
	mOFPC_PORT_STATS
 = 1 << 2,

186 
	mOFPC_IP_REASM
 = 1 << 5,

187 
	mOFPC_QUEUE_STATS
 = 1 << 6,

188 
	mOFPC_ARP_MATCH_IP
 = 1 << 7

193 
	eoÂ_∑ckë_ö_ªas⁄
 {

194 
	mOFPR_NO_MATCH
,

195 
	mOFPR_ACTION
,

196 
	mOFPR_INVALID_TTL
 ,

197 
	mOFPR_N_REASONS


200 
	eoÂ_Êow_mod_comm™d
 {

201 
	mOFPFC_ADD
,

202 
	mOFPFC_MODIFY
,

203 
	mOFPFC_MODIFY_STRICT
,

204 
	mOFPFC_DELETE
,

205 
	mOFPFC_DELETE_STRICT


208 
	eoÂ_Êow_mod_Êags
 {

209 
	mOFPFF_SEND_FLOW_REM
 = 1 << 0,

211 
	mOFPFF_CHECK_OVERLAP
 = 1 << 1,

215 
	soÂ_a˘i⁄_vœn_vid
 {

216 
ovs_be16
 
	mty≥
;

217 
ovs_be16
 
	mÀn
;

218 
ovs_be16
 
	mvœn_vid
;

219 
uöt8_t
 
	m∑d
[2];

221 
OFP_ASSERT
((
oÂ_a˘i⁄_vœn_vid
) == 8);

224 
	soÂ_a˘i⁄_vœn_p˝
 {

225 
ovs_be16
 
	mty≥
;

226 
ovs_be16
 
	mÀn
;

227 
uöt8_t
 
	mvœn_p˝
;

228 
uöt8_t
 
	m∑d
[3];

230 
OFP_ASSERT
((
oÂ_a˘i⁄_vœn_p˝
) == 8);

233 
	soÂ_a˘i⁄_dl_addr
 {

234 
ovs_be16
 
	mty≥
;

235 
ovs_be16
 
	mÀn
;

236 
uöt8_t
 
	mdl_addr
[
OFP_ETH_ALEN
];

237 
uöt8_t
 
	m∑d
[6];

239 
OFP_ASSERT
((
oÂ_a˘i⁄_dl_addr
) == 16);

242 
	soÂ_a˘i⁄_nw_addr
 {

243 
ovs_be16
 
	mty≥
;

244 
ovs_be16
 
	mÀn
;

245 
ovs_be32
 
	mnw_addr
;

247 
OFP_ASSERT
((
oÂ_a˘i⁄_nw_addr
) == 8);

250 
	soÂ_a˘i⁄_nw_tos
 {

251 
ovs_be16
 
	mty≥
;

252 
ovs_be16
 
	mÀn
;

253 
uöt8_t
 
	mnw_tos
;

254 
uöt8_t
 
	m∑d
[3];

256 
OFP_ASSERT
((
oÂ_a˘i⁄_nw_tos
) == 8);

259 
	soÂ_a˘i⁄_ç_p‹t
 {

260 
ovs_be16
 
	mty≥
;

261 
ovs_be16
 
	mÀn
;

262 
ovs_be16
 
	mç_p‹t
;

263 
uöt8_t
 
	m∑d
[2];

265 
OFP_ASSERT
((
oÂ_a˘i⁄_ç_p‹t
) == 8);

268 
	eoÂ_Êow_ªmoved_ªas⁄
 {

269 
	mOFPRR_IDLE_TIMEOUT
,

270 
	mOFPRR_HARD_TIMEOUT
,

271 
	mOFPRR_DELETE
,

272 
	mOFPRR_GROUP_DELETE
,

273 
	mOFPRR_EVICTION
,

277 
	eoÂ_p‹t_ªas⁄
 {

278 
	mOFPPR_ADD
,

279 
	mOFPPR_DELETE
,

280 
	mOFPPR_MODIFY


284 
	soÂ_p‹t_°©us
 {

285 
uöt8_t
 
	mªas⁄
;

286 
uöt8_t
 
	m∑d
[7];

289 
OFP_ASSERT
((
oÂ_p‹t_°©us
) == 8);

291 
	#DESC_STR_LEN
 256

	)

292 
	#SERIAL_NUM_LEN
 32

	)

295 
	soÂ_desc_°©s
 {

296 
	mm‰_desc
[
DESC_STR_LEN
];

297 
	mhw_desc
[
DESC_STR_LEN
];

298 
	msw_desc
[
DESC_STR_LEN
];

299 
	m£rül_num
[
SERIAL_NUM_LEN
];

300 
	mdp_desc
[
DESC_STR_LEN
];

303 
OFP_ASSERT
((
oÂ_desc_°©s
) == 1056);

306 
	soÂ_aggªg©e_°©s_ª∂y
 {

307 
ovs_32Æig√d_be64
 
	m∑ckë_cou¡
;

308 
ovs_32Æig√d_be64
 
	mbyã_cou¡
;

309 
ovs_be32
 
	mÊow_cou¡
;

310 
uöt8_t
 
	m∑d
[4];

312 
OFP_ASSERT
((
oÂ_aggªg©e_°©s_ª∂y
) == 24);

321 
	eoÂ_m©ch_ty≥
 {

322 
	mOFPMT_STANDARD
 = 0,

324 
	mOFPMT_OXM
 = 1,

328 
	eoÂ_group
 {

330 
	mOFPG_MAX
 = 0xffffff00,

333 
	mOFPG_ALL
 = 0xfffffffc,

334 
	mOFPG_ANY
 = 0xffffffff

	@/home/lsch/mytest/openvswitch-1.9.0/include/openflow/openflow-nc.h

5 #i‚de‡
OPENFLOW_LIU_NC


6 
	#OPENFLOW_LIU_NC
 1

	)

8 
	~"›íÊow/›íÊow-1.0.h
"

9 
	~"›ívswôch/ty≥s.h
"

11 
	#NC_VENDOR_ID
 0x00003333

	)

13 
	snc_hódî
 {

14 
oÂ_hódî
 
	mhódî
;

15 
ovs_be32
 
	mvíd‹
;

16 
ovs_be32
 
	msubty≥
;

18 
OFP_ASSERT
((
nc_hódî
) == 16);

20 
	enc_a˘i⁄_subty≥
 {

21 
	mNC_NULL
,

22 
	mNC_INIT_CODING
,

23 
	mNC_ENCODE
,

24 
	mNC_DECODE
,

27 
	snc_a˘i⁄_hódî
 {

28 
ovs_be16
 
	mty≥
;

29 
ovs_be16
 
	mÀn
;

30 
ovs_be32
 
	mvíd‹
;

31 
ovs_be16
 
	msubty≥
;

32 
uöt8_t
 
	m∑d
[6];

34 
OFP_ASSERT
((
nc_a˘i⁄_hódî
) == 16);

38 
	snc_a˘i⁄_öô_codög
 {

39 
ovs_be16
 
	mty≥
;

40 
ovs_be16
 
	mÀn
;

41 
ovs_be32
 
	mvíd‹
;

42 
ovs_be16
 
	msubty≥
;

43 
uöt8_t
 
	mbuf„r_id
;

44 
uöt8_t
 
	m∑ckë_num
;

45 
uöt8_t
 
	mp‹t_num
;

46 
uöt8_t
 
	mve˘‹_off
;

47 
ovs_be16
 
	m∑ckë_Àn
;

48 
uöt8_t
 
	md©Øsdf
[0];

50 
	snc_a˘i⁄_ícode
 {

51 
ovs_be16
 
	mty≥
;

52 
ovs_be16
 
	mÀn
;

53 
ovs_be32
 
	mvíd‹
;

54 
ovs_be16
 
	msubty≥
;

55 
uöt8_t
 
	mbuf„r_id
;

56 
uöt8_t
 
	mp‹t_num
;

57 
ovs_be16
 
	mbuf„r_size
;

58 
ovs_be16
 
	mouçut_p‹t
;

59 
ovs_be16
 
	m∑ckë_Àn
;

60 
ovs_be16
 
	m∑ckë_num
;

61 
ovs_be16
 
	mp‹t_id
;

62 
uöt8_t
 
	md©Øsdf
[2];

64 
	snc_a˘i⁄_decode
 {

65 
ovs_be16
 
	mty≥
;

66 
ovs_be16
 
	mÀn
;

67 
ovs_be32
 
	mvíd‹
;

68 
ovs_be16
 
	msubty≥
;

69 
uöt8_t
 
	mbuf„r_id
;

70 
uöt8_t
 
	m∑ckë_num
;

71 
ovs_be16
 
	mbuf„r_size
;

72 
ovs_be16
 
	mouçut_num
;

73 
ovs_be16
 
	m∑ckë_Àn
;

74 
ovs_be16
 
	mp‹t_id
;

75 
uöt8_t
 
	md©Øsdf
[4];

	@/home/lsch/mytest/openvswitch-1.9.0/include/openflow/openflow.h

17 #i‚de‡
OPENFLOW_OPENFLOW_H


18 
	#OPENFLOW_OPENFLOW_H
 1

	)

20 
	~"›íÊow/›íÊow-1.0.h
"

21 
	~"›íÊow/›íÊow-1.1.h
"

22 
	~"›íÊow/›íÊow-1.2.h
"

24 
	~"›íÊow/›íÊow-nc.h
"

	@/home/lsch/mytest/openvswitch-1.9.0/include/openvswitch/brcompat-netlink.h

40 #i‚de‡
OPENVSWITCH_BRCOMPAT_NETLINK_H


41 
	#OPENVSWITCH_BRCOMPAT_NETLINK_H
 1

	)

43 
	#BRC_GENL_FAMILY_NAME
 "brcom∑t"

	)

47 
	mBRC_GENL_A_UNSPEC
,

55 
	mBRC_GENL_A_DP_NAME
,

59 
	mBRC_GENL_A_PORT_NAME
,

62 
	mBRC_GENL_A_ERR_CODE
,

65 
	mBRC_GENL_A_MC_GROUP
,

68 
	mBRC_GENL_A_FDB_COUNT
,

69 
	mBRC_GENL_A_FDB_SKIP
,

72 
	mBRC_GENL_A_FDB_DATA
,

73 
	mBRC_GENL_A_IFINDEXES
,

75 
	m__BRC_GENL_A_MAX
,

76 
	mBRC_GENL_A_MAX
 = 
__BRC_GENL_A_MAX
 - 1

80 
	ebrc_gíl_comm™d
 {

81 
	mBRC_GENL_C_UNSPEC
,

87 
	mBRC_GENL_C_DP_ADD
,

88 
	mBRC_GENL_C_DP_DEL
,

89 
	mBRC_GENL_C_DP_RESULT
,

90 
	mBRC_GENL_C_PORT_ADD
,

91 
	mBRC_GENL_C_PORT_DEL
,

92 
	mBRC_GENL_C_QUERY_MC
,

93 
	mBRC_GENL_C_FDB_QUERY
,

94 
	mBRC_GENL_C_GET_BRIDGES
,

95 
	mBRC_GENL_C_GET_PORTS
,

97 
	m__BRC_GENL_C_MAX
,

98 
	mBRC_GENL_C_MAX
 = 
__BRC_GENL_C_MAX
 - 1

	@/home/lsch/mytest/openvswitch-1.9.0/include/openvswitch/datapath-compat.h

40 #i‚de‡
OPENVSWITCH_DATAPATH_COMPAT_H


41 
	#OPENVSWITCH_DATAPATH_COMPAT_H
 1

	)

43 
	#OVS_VPORT_MCGROUP_FALLBACK_ID
 33

	)

	@/home/lsch/mytest/openvswitch-1.9.0/include/openvswitch/tunnel.h

40 #i‚de‡
OPENVSWITCH_TUNNEL_H


41 
	#OPENVSWITCH_TUNNEL_H
 1

	)

43 
	~<löux/ty≥s.h
>

44 
	~<löux/›ívswôch.h
>

53 
	mOVS_TUNNEL_ATTR_UNSPEC
,

54 
	mOVS_TUNNEL_ATTR_FLAGS
,

55 
	mOVS_TUNNEL_ATTR_DST_IPV4
,

56 
	mOVS_TUNNEL_ATTR_SRC_IPV4
,

57 
	mOVS_TUNNEL_ATTR_OUT_KEY
,

58 
	mOVS_TUNNEL_ATTR_IN_KEY
,

59 
	mOVS_TUNNEL_ATTR_TOS
,

60 
	mOVS_TUNNEL_ATTR_TTL
,

61 
	m__OVS_TUNNEL_ATTR_MAX


64 
	#OVS_TUNNEL_ATTR_MAX
 (
__OVS_TUNNEL_ATTR_MAX
 - 1)

	)

66 
	#TNL_F_CSUM
 (1 << 0Ë

	)

67 
	#TNL_F_TOS_INHERIT
 (1 << 1Ë

	)

68 
	#TNL_F_TTL_INHERIT
 (1 << 2Ë

	)

69 
	#TNL_F_DF_INHERIT
 (1 << 3Ë

	)

70 
	#TNL_F_DF_DEFAULT
 (1 << 4Ë

	)

73 
	#TNL_F_PMTUD
 (1 << 5Ë

	)

74 
	#TNL_F_IPSEC
 (1 << 7Ë

	)

	@/home/lsch/mytest/openvswitch-1.9.0/include/openvswitch/types.h

17 #i‚de‡
OPENVSWITCH_TYPES_H


18 
	#OPENVSWITCH_TYPES_H
 1

	)

20 
	~<löux/ty≥s.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<°döt.h
>

24 #ifde‡
__CHECKER__


25 
	#OVS_BITWISE
 
	`__©åibuã__
((
bôwi£
))

	)

26 
	#OVS_FORCE
 
	`__©åibuã__
((
f‹˚
))

	)

28 
	#OVS_BITWISE


	)

29 
	#OVS_FORCE


	)

38 
__be16
 
	tovs_be16
;

39 
__be32
 
	tovs_be32
;

40 
__be64
 
	tovs_be64
;

50 #ifde‡
WORDS_BIGENDIAN


51 
uöt32_t
 
	mhi
, 
	mlo
;

53 
uöt32_t
 
	mlo
, 
	mhi
;

55 } 
	tovs_32Æig√d_u64
;

60 
ovs_be32
 
	mhi
, 
	mlo
;

61 } 
	tovs_32Æig√d_be64
;

	@/home/lsch/mytest/openvswitch-1.9.0/include/sparse/arpa/inet.h

17 #i‚de‡
__CHECKER__


21 
	~<√töë/ö.h
>

	@/home/lsch/mytest/openvswitch-1.9.0/include/sparse/assert.h

17 #i‚de‡
__CHECKER__


21 
__ovs_as£π
(
_Boﬁ
);

22 
	#as£π
(
EXPRESSION
Ë
	`__ovs_as£π
(EXPRESSION)

	)

	@/home/lsch/mytest/openvswitch-1.9.0/include/sparse/math.h

17 #i‚de‡
__CHECKER__


21 #i‚de‡
__SYS_MATH_SPARSE


22 
	#__SYS_MATH_SPARSE
 1

	)

24 
acos
();

25 
acosf
();

26 
acosh
();

27 
acoshf
();

28 
acoshl
();

29 
aco¶
();

30 
asö
();

31 
asöf
();

32 
asöh
();

33 
asöhf
();

34 
asöhl
();

35 
asöl
();

36 
©™
();

37 
©™2
(, );

38 
©™2f
(, );

39 
©™2l
(, );

40 
©™f
();

41 
©™h
();

42 
©™hf
();

43 
©™hl
();

44 
©™l
();

45 
cbπ
();

46 
cbπf
();

47 
cbπl
();

48 
˚û
();

49 
˚ûf
();

50 
˚ûl
();

51 
c›ysign
(, );

52 
c›ysignf
(, );

53 
c›ysig∆
(, );

54 
cos
();

55 
cosf
();

56 
cosh
();

57 
coshf
();

58 
coshl
();

59 
co¶
();

60 
îf
();

61 
îfc
();

62 
îfcf
();

63 
îf˛
();

64 
îff
();

65 
îÊ
();

66 
exp
();

67 
exp2
();

68 
exp2f
();

69 
exp2l
();

70 
expf
();

71 
ex∂
();

72 
expm1
();

73 
expm1f
();

74 
expm1l
();

75 
Ábs
();

76 
Ábsf
();

77 
Áb¶
();

78 
fdim
(, );

79 
fdimf
(, );

80 
fdiml
(, );

81 
Êo‹
();

82 
Êo‹f
();

83 
Êo‹l
();

84 
fma
(, , );

85 
fmaf
(, , );

86 
fmÆ
(, , );

87 
fmax
(, );

88 
fmaxf
(, );

89 
fmaxl
(, );

90 
fmö
(, );

91 
fmöf
(, );

92 
fmöl
(, );

93 
fmod
(, );

94 
fmodf
(, );

95 
fmodl
(, );

96 
‰exp
(, *);

97 
‰expf
(
vÆue
, *);

98 
‰ex∂
(
vÆue
, *);

99 
hypŸ
(, );

100 
hypŸf
(, );

101 
hypŸl
(, );

102 
ûogb
();

103 
ûogbf
();

104 
ûogbl
();

105 
j0
();

106 
j1
();

107 
jn
(, );

108 
ldexp
(, );

109 
ldexpf
(, );

110 
ldex∂
(, );

111 
lgamma
();

112 
lgammaf
();

113 
lgammÆ
();

114 
Œröt
();

115 
Œrötf
();

116 
Œröé
();

117 
Œround
();

118 
Œroundf
();

119 
Œroundl
();

120 
log
();

121 
log10
();

122 
log10f
();

123 
log10l
();

124 
log1p
();

125 
log1pf
();

126 
log1∂
();

127 
log2
();

128 
log2f
();

129 
log2l
();

130 
logb
();

131 
logbf
();

132 
logbl
();

133 
logf
();

134 
logl
();

135 
Ãöt
();

136 
Ãötf
();

137 
Ãöé
();

138 
Ãound
();

139 
Ãoundf
();

140 
Ãoundl
();

141 
modf
(, *);

142 
modff
(, *);

143 
modÊ
(, *);

144 
«n
(const *);

145 
«nf
(const *);

146 
«∆
(const *);

147 
√¨byöt
();

148 
√¨byötf
();

149 
√¨byöé
();

150 
√xè·î
(, );

151 
√xè·îf
(, );

152 
√xè·îl
(, );

153 
√xâow¨d
(, );

154 
√xâow¨df
(, );

155 
√xâow¨dl
(, );

156 
pow
(, );

157 
powf
(, );

158 
powl
(, );

159 
ªmaödî
(, );

160 
ªmaödîf
(, );

161 
ªmaödîl
(, );

162 
ªmquo
(, , *);

163 
ªmquof
(, , *);

164 
ªmquﬁ
(, , *);

165 
röt
();

166 
rötf
();

167 
röé
();

168 
round
();

169 
roundf
();

170 
roundl
();

171 
sˇlb
(, );

172 
sˇlb 
(, );

173 
sˇlb f
(, );

174 
sˇlb l
(, );

175 
sˇlbn
(, );

176 
sˇlbnf
(, );

177 
sˇlb∆
(, );

178 
sö
();

179 
söf
();

180 
söh
();

181 
söhf
();

182 
söhl
();

183 
söl
();

184 
sqπ
();

185 
sqπf
();

186 
sqπl
();

187 
èn
();

188 
ènf
();

189 
ènh
();

190 
ènhf
();

191 
ènhl
();

192 
è∆
();

193 
tgamma
();

194 
tgammaf
();

195 
tgammÆ
();

196 
åunc
();

197 
åuncf
();

198 
åun˛
();

199 
y0
();

200 
y1
();

201 
yn
(, );

	@/home/lsch/mytest/openvswitch-1.9.0/include/sparse/netinet/in.h

17 #i‚de‡
__CHECKER__


21 #i‚de‡
__NETINET_IN_SPARSE


22 
	#__NETINET_IN_SPARSE
 1

	)

24 
	~"›ívswôch/ty≥s.h
"

25 
	~<öây≥s.h
>

26 
	~<sys/sockë.h
>

28 
ovs_be16
 
	tö_p‹t_t
;

29 
ovs_be32
 
	tö_addr_t
;

31 
	sö_addr
 {

32 
ö_addr_t
 
	ms_addr
;

35 
	ssockaddr_ö
 {

36 
ß_Ámûy_t
 
	msö_Ámûy
;

37 
ö_p‹t_t
 
	msö_p‹t
;

38 
ö_addr
 
	msö_addr
;

41 
	sö6_addr
 {

43 
uöt8_t
 
	mu_s6_addr
[16];

44 } 
	mu
;

47 
	#s6_addr
 
u
.
u_s6_addr


	)

49 c⁄° 
ö6_addr
 
ö6addr_™y
;

51 
	#IPPROTO_IP
 0

	)

52 
	#IPPROTO_HOPOPTS
 0

	)

53 
	#IPPROTO_ICMP
 1

	)

54 
	#IPPROTO_TCP
 6

	)

55 
	#IPPROTO_UDP
 17

	)

56 
	#IPPROTO_ROUTING
 43

	)

57 
	#IPPROTO_FRAGMENT
 44

	)

58 
	#IPPROTO_AH
 51

	)

59 
	#IPPROTO_ICMPV6
 58

	)

60 
	#IPPROTO_NONE
 59

	)

61 
	#IPPROTO_DSTOPTS
 60

	)

64 
	#IP_ADD_MEMBERSHIP
 0

	)

65 
	#IP_DROP_MEMBERSHIP
 1

	)

66 
	#IP_HDRINCL
 2

	)

67 
	#IP_MTU
 3

	)

68 
	#IP_MTU_DISCOVER
 4

	)

69 
	#IP_MULTICAST_IF
 5

	)

70 
	#IP_MULTICAST_LOOP
 6

	)

71 
	#IP_MULTICAST_TTL
 7

	)

72 
	#IP_NODEFRAG
 8

	)

73 
	#IP_OPTIONS
 9

	)

74 
	#IP_PKTINFO
 10

	)

75 
	#IP_RECVERR
 11

	)

76 
	#IP_RECVOPTS
 12

	)

77 
	#IP_RECVTOS
 13

	)

78 
	#IP_RECVTTL
 14

	)

79 
	#IP_RETOPTS
 15

	)

80 
	#IP_ROUTER_ALERT
 16

	)

81 
	#IP_TOS
 17

	)

82 
	#IP_TTL
 18

	)

84 
	#INADDR_ANY
 0x00000000

	)

85 
	#INADDR_BROADCAST
 0xffffffff

	)

86 
	#INADDR_NONE
 0xffffffff

	)

88 
	#INET6_ADDRSTRLEN
 46

	)

90 
ölöe
 
ovs_be32
 
	$ht⁄l
(
uöt32_t
 
x
)

92  (
OVS_FORCE
 
ovs_be32
Ë
x
;

93 
	}
}

95 
ölöe
 
ovs_be16
 
	$ht⁄s
(
uöt16_t
 
x
)

97  (
OVS_FORCE
 
ovs_be16
Ë
x
;

98 
	}
}

100 
ölöe
 
uöt32_t
 
	$¡ohl
(
ovs_be32
 
x
)

102  (
OVS_FORCE
 
uöt32_t
Ë
x
;

103 
	}
}

105 
ölöe
 
uöt16_t
 
	$¡ohs
(
ovs_be16
 
x
)

107  (
OVS_FORCE
 
uöt16_t
Ë
x
;

108 
	}
}

110 
ö_addr_t
 
öë_addr
(const *);

111 
öë_©⁄
 (c⁄° *, 
ö_addr
 *);

112 *
öë_¡ﬂ
(
ö_addr
);

113 c⁄° *
öë_¡›
(, c⁄° *, *, 
sockÀn_t
);

114 
öë_±⁄
(, const *, *);

	@/home/lsch/mytest/openvswitch-1.9.0/include/sparse/netinet/ip6.h

17 #i‚de‡
__CHECKER__


21 #i‚de‡
__NETINET_IP6_SPARSE


22 
	#__NETINET_IP6_SPARSE
 1

	)

24 
	~<√töë/ö.h
>

26 
	sù6_hdr
 {

28 
	sù6_hdr˘l
 {

29 
ovs_be32
 
	mù6_un1_Êow
;

30 
ovs_be16
 
	mù6_un1_∂í
;

31 
uöt8_t
 
	mù6_un1_nxt
;

32 
uöt8_t
 
	mù6_un1_hlim
;

33 } 
	mù6_un1
;

34 
uöt8_t
 
	mù6_un2_vfc
;

35 } 
	mù6_˘lun
;

36 
ö6_addr
 
	mù6_§c
;

37 
ö6_addr
 
	mù6_d°
;

40 
	#ù6_vfc
 
ù6_˘lun
.
ù6_un2_vfc


	)

41 
	#ù6_Êow
 
ù6_˘lun
.
ù6_un1
.
ù6_un1_Êow


	)

42 
	#ù6_∂í
 
ù6_˘lun
.
ù6_un1
.
ù6_un1_∂í


	)

43 
	#ù6_nxt
 
ù6_˘lun
.
ù6_un1
.
ù6_un1_nxt


	)

44 
	#ù6_hlim
 
ù6_˘lun
.
ù6_un1
.
ù6_un1_hlim


	)

45 
	#ù6_h›s
 
ù6_˘lun
.
ù6_un1
.
ù6_un1_hlim


	)

47 
	sù6_πhdr
 {

48 
uöt8_t
 
	mù6r_nxt
;

49 
uöt8_t
 
	mù6r_Àn
;

50 
uöt8_t
 
	mù6r_ty≥
;

51 
uöt8_t
 
	mù6r_£gÀ·
;

54 
	sù6_ext
 {

55 
uöt8_t
 
	mù6e_nxt
;

56 
uöt8_t
 
	mù6e_Àn
;

59 
	sù6_‰ag
 {

60 
uöt8_t
 
	mù6f_nxt
;

61 
uöt8_t
 
	mù6f_ª£rved
;

62 
ovs_be16
 
	mù6f_ofÊg
;

63 
ovs_be32
 
	mù6f_idít
;

66 
	#IP6F_OFF_MASK
 ((
OVS_FORCE
 
ovs_be16
Ë0xfff8)

	)

	@/home/lsch/mytest/openvswitch-1.9.0/include/sparse/sys/socket.h

17 #i‚de‡
__CHECKER__


21 #i‚de‡
__SYS_SOCKET_SPARSE


22 
	#__SYS_SOCKET_SPARSE
 1

	)

24 
	~"›ívswôch/ty≥s.h
"

25 
	~<sys/uio.h
>

27 
	tß_Ámûy_t
;

28 
__sockÀn_t
 
	tsockÀn_t
;

30 
	ssockaddr
 {

31 
ß_Ámûy_t
 
	mß_Ámûy
;

32 
	mß_d©a
[64];

35 
	ssockaddr_°‹age
 {

36 
ß_Ámûy_t
 
	mss_Ámûy
;

37 
	mß_d©a
[64];

40 
	smsghdr
 {

41 *
	mmsg_«me
;

42 
sockÀn_t
 
	mmsg_«mñí
;

43 
iovec
 *
	mmsg_iov
;

44 
	mmsg_iovÀn
;

45 *
	mmsg_c⁄åﬁ
;

46 
sockÀn_t
 
	mmsg_c⁄åﬁÀn
;

47 
	mmsg_Êags
;

50 
	scmsghdr
 {

51 
size_t
 
	mcmsg_Àn
;

52 
	mcmsg_Àvñ
;

53 
	mcmsg_ty≥
;

54 
	mcmsg_d©a
[];

57 
	#__CMSG_ALIGNTO
 (
size_t
)

	)

58 
	#CMSG_ALIGN
(
LEN
) \

59 (((
LEN
Ë+ 
__CMSG_ALIGNTO
 - 1Ë/ __CMSG_ALIGNTO * __CMSG_ALIGNTO)

	)

60 
	#CMSG_DATA
(
CMSG
Ë((CMSG)->
cmsg_d©a
)

	)

61 
	#CMSG_LEN
(
LEN
Ë((
cmsghdr
Ë+ (LEN))

	)

62 
	#CMSG_SPACE
(
LEN
Ë
	`CMSG_ALIGN
(
	`CMSG_LEN
(LEN))

	)

63 
	#CMSG_FIRSTHDR
(
MSG
) \

64 ((
MSG
)->
msg_c⁄åﬁÀn
 ? (
cmsghdr
 *Ë(MSG)->
msg_c⁄åﬁ
 : 
NULL
)

	)

65 
	#CMSG_NXTHDR
(
MSG
, 
CMSG
Ë
	`__cmsg_nxthdr
(MSG, CMSG)

	)

67 
ölöe
 
cmsghdr
 *

68 
	$__cmsg_nxthdr
(
msghdr
 *
msg
, 
cmsghdr
 *
cmsg
)

70 
size_t
 
ofs
 = (*Ë
cmsg
 - (*Ë
msg
->
msg_c⁄åﬁ
;

71 
size_t
 
√xt_ofs
 = 
ofs
 + 
	`CMSG_ALIGN
(
cmsg
->
cmsg_Àn
);

72  (
√xt_ofs
 < 
msg
->
msg_c⁄åﬁÀn


73 ? (*Ë((*Ë
msg
->
msg_c⁄åﬁ
 + 
√xt_ofs
)

74 : 
NULL
);

75 
	}
}

78 
	mSCM_RIGHTS
 = 1

82 
	mSOCK_DGRAM
,

83 
	mSOCK_RAW
,

84 
	mSOCK_SEQPACKET
,

85 
	mSOCK_STREAM


89 
	mSOL_SOCKET


93 
	mSO_ACCEPTCONN
,

94 
	mSO_BROADCAST
,

95 
	mSO_DEBUG
,

96 
	mSO_DONTROUTE
,

97 
	mSO_ERROR
,

98 
	mSO_KEEPALIVE
,

99 
	mSO_LINGER
,

100 
	mSO_OOBINLINE
,

101 
	mSO_RCVBUF
,

102 
	mSO_RCVLOWAT
,

103 
	mSO_RCVTIMEO
,

104 
	mSO_REUSEADDR
,

105 
	mSO_SNDBUF
,

106 
	mSO_SNDLOWAT
,

107 
	mSO_SNDTIMEO
,

108 
	mSO_TYPE
,

109 
	mSO_RCVBUFFORCE


113 
	mMSG_CTRUNC
,

114 
	mMSG_DONTROUTE
,

115 
	mMSG_EOR
,

116 
	mMSG_OOB
,

117 
	mMSG_NOSIGNAL
,

118 
	mMSG_PEEK
,

119 
	mMSG_TRUNC
,

120 
	mMSG_WAITALL
,

121 
	mMSG_DONTWAIT


125 
	mAF_UNSPEC
,

126 
	mPF_UNSPEC
 = 
AF_UNSPEC
,

127 
	mAF_INET
,

128 
	mPF_INET
 = 
AF_INET
,

129 
	mAF_INET6
,

130 
	mPF_INET6
 = 
AF_INET6
,

131 
	mAF_UNIX
,

132 
	mPF_UNIX
 = 
AF_UNIX
,

133 
	mAF_NETLINK
,

134 
	mPF_NETLINK
 = 
AF_NETLINK
,

135 
	mAF_PACKET
,

136 
	mPF_PACKET
 = 
AF_PACKET


140 
	mSHUT_RD
,

141 
	mSHUT_RDWR
,

142 
	mSHUT_WR


145 
ac˚±
(, 
sockaddr
 *, 
sockÀn_t
 *);

146 
böd
(, c⁄° 
sockaddr
 *, 
sockÀn_t
);

147 
c⁄√˘
(, c⁄° 
sockaddr
 *, 
sockÀn_t
);

148 
gë≥î«me
(, 
sockaddr
 *, 
sockÀn_t
 *);

149 
gësock«me
(, 
sockaddr
 *, 
sockÀn_t
 *);

150 
gësock›t
(, , , *, 
sockÀn_t
 *);

151 
li°í
(, );

152 
ssize_t
 
ªcv
(, *, 
size_t
, );

153 
ssize_t
 
ªcv‰om
(, *, 
size_t
, , 
sockaddr
 *, 
sockÀn_t
 *);

154 
ssize_t
 
ªcvmsg
(, 
msghdr
 *, );

155 
ssize_t
 
£nd
(, c⁄° *, 
size_t
, );

156 
ssize_t
 
£ndmsg
(, c⁄° 
msghdr
 *, );

157 
ssize_t
 
£ndto
(, c⁄° *, 
size_t
, , c⁄° 
sockaddr
 *,

158 
sockÀn_t
);

159 
£tsock›t
(, , , c⁄° *, 
sockÀn_t
);

160 
shutdown
(, );

161 
sock©m¨k
();

162 
sockë
(, , );

163 
sockë∑ú
(, , , [2]);

	@/home/lsch/mytest/openvswitch-1.9.0/include/sparse/sys/wait.h

17 #i‚de‡
__CHECKER__


21 #i‚de‡
__SYS_WAIT_SPARSE


22 
	#__SYS_WAIT_SPARSE
 1

	)

24 #ö˛ude_√xà<
sys
/
waô
.
h
>

26 #unde‡
waô


27 
	#waô
(
a
Ë
	`Ωl_waô
◊)

	)

28 
pid_t
 
Ωl_waô
(*);

30 #unde‡
waôpid


31 
	#waôpid
(
a
, 
b
, 
c
Ë
	`Ωl_waôpid
◊, b, c)

	)

32 
pid_t
 
Ωl_waôpid
(pid_t, *, );

	@/home/lsch/mytest/openvswitch-1.9.0/lib/aes128.c

25 
	~<c⁄fig.h
>

27 
	~"´s128.h
"

29 
	~<as£π.h
>

31 
	~"utû.h
"

33 c⁄° 
uöt32_t
 
	gTe0
[256] = {

100 c⁄° 
uöt32_t
 
	gTe1
[256] = {

167 c⁄° 
uöt32_t
 
	gTe2
[256] = {

234 c⁄° 
uöt32_t
 
	gTe3
[256] = {

301 c⁄° 
uöt32_t
 
	gTe4
[256] = {

368 c⁄° 
uöt32_t
 
	gTd0
[256] = {

435 c⁄° 
uöt32_t
 
	gTd1
[256] = {

502 c⁄° 
uöt32_t
 
	gTd2
[256] = {

569 c⁄° 
uöt32_t
 
	gTd3
[256] = {

636 c⁄° 
uöt32_t
 
	gTd4
[256] = {

703 c⁄° 
uöt32_t
 
	grc⁄
[] = {

709 
uöt32_t


710 
	$gë_u32
(c⁄° 
uöt8_t
 *
p
)

712 
uöt32_t
 
p0
 = 
p
[0];

713 
uöt32_t
 
p1
 = 
p
[1];

714 
uöt32_t
 
p2
 = 
p
[2];

715 
uöt32_t
 
p3
 = 
p
[3];

716  (
p0
 << 24Ë| (
p1
 << 16Ë| (
p2
 << 8Ë| 
p3
;

717 
	}
}

720 
	$put_u32
(
uöt8_t
 *
p
, 
uöt32_t
 
x
)

722 
p
[0] = 
x
 >> 24;

723 
p
[1] = 
x
 >> 16;

724 
p
[2] = 
x
 >> 8;

725 
p
[3] = 
x
;

726 
	}
}

730 
	$´s128_scheduÀ
(
´s128
 *
´s
, c⁄° 
uöt8_t
 
key
[16])

732 
uöt32_t
 *
rk
 = 
´s
->rk;

733 
i
;

735 
rk
[0] = 
	`gë_u32
(
key
);

736 
rk
[1] = 
	`gë_u32
(
key
 + 4);

737 
rk
[2] = 
	`gë_u32
(
key
 + 8);

738 
rk
[3] = 
	`gë_u32
(
key
 + 12);

739 
i
 = 0; i < 10; i++, 
rk
 += 4) {

740 
uöt32_t
 
ãmp
 = 
rk
[3];

741 
rk
[4] = (rk[0]

742 ^ (
Te4
[(
ãmp
 >> 16) & 0xff] & 0xff000000)

743 ^ (
Te4
[(
ãmp
 >> 8) & 0xff] & 0x00ff0000)

744 ^ (
Te4
[(
ãmp
 ) & 0xff] & 0x0000ff00)

745 ^ (
Te4
[(
ãmp
 >> 24) ] & 0x000000ff)

746 ^ 
rc⁄
[
i
]);

747 
rk
[5] =Ñk[1] ^Ñk[4];

748 
rk
[6] =Ñk[2] ^Ñk[5];

749 
rk
[7] =Ñk[3] ^Ñk[6];

751 
	`as£π
(
rk
 =&
´s
->rk[40]);

752 
	}
}

755 
	$´s128_í¸y±
(c⁄° 
´s128
 *
´s
, c⁄° *
öput_
, *
ouçut_
)

757 c⁄° 
uöt8_t
 *
öput
 = 
öput_
;

758 
uöt8_t
 *
ouçut
 = 
ouçut_
;

759 c⁄° 
uöt32_t
 *
rk
 = 
´s
->rk;

760 
uöt32_t
 
s0
, 
s1
, 
s2
, 
s3
;

761 
uöt32_t
 
t0
, 
t1
, 
t2
, 
t3
;

762 
r
;

765 
s0
 = 
	`gë_u32
(
öput
 ) ^ 
rk
[0];

766 
s1
 = 
	`gë_u32
(
öput
 + 4Ë^ 
rk
[1];

767 
s2
 = 
	`gë_u32
(
öput
 + 8Ë^ 
rk
[2];

768 
s3
 = 
	`gë_u32
(
öput
 + 12Ë^ 
rk
[3];

771 
r
 = 10 / 2;

773 
t0
 = (
Te0
[(
s0
 >> 24) ]

774 ^ 
Te1
[(
s1
 >> 16) & 0xff]

775 ^ 
Te2
[(
s2
 >> 8) & 0xff]

776 ^ 
Te3
[(
s3
 ) & 0xff]

777 ^ 
rk
[4]);

778 
t1
 = (
Te0
[(
s1
 >> 24) ]

779 ^ 
Te1
[(
s2
 >> 16) & 0xff]

780 ^ 
Te2
[(
s3
 >> 8) & 0xff]

781 ^ 
Te3
[(
s0
 ) & 0xff]

782 ^ 
rk
[5]);

783 
t2
 = (
Te0
[(
s2
 >> 24) ]

784 ^ 
Te1
[(
s3
 >> 16) & 0xff]

785 ^ 
Te2
[(
s0
 >> 8) & 0xff]

786 ^ 
Te3
[(
s1
 ) & 0xff]

787 ^ 
rk
[6]);

788 
t3
 = (
Te0
[(
s3
 >> 24) ]

789 ^ 
Te1
[(
s0
 >> 16) & 0xff]

790 ^ 
Te2
[(
s1
 >> 8) & 0xff]

791 ^ 
Te3
[(
s2
 ) & 0xff]

792 ^ 
rk
[7]);

794 
rk
 += 8;

795 i‡(--
r
 == 0) {

799 
s0
 = (
Te0
[(
t0
 >> 24) ]

800 ^ 
Te1
[(
t1
 >> 16) & 0xff]

801 ^ 
Te2
[(
t2
 >> 8) & 0xff]

802 ^ 
Te3
[(
t3
 ) & 0xff]

803 ^ 
rk
[0]);

804 
s1
 = (
Te0
[(
t1
 >> 24) ]

805 ^ 
Te1
[(
t2
 >> 16) & 0xff]

806 ^ 
Te2
[(
t3
 >> 8) & 0xff]

807 ^ 
Te3
[(
t0
 ) & 0xff]

808 ^ 
rk
[1]);

809 
s2
 = (
Te0
[(
t2
 >> 24) ]

810 ^ 
Te1
[(
t3
 >> 16) & 0xff]

811 ^ 
Te2
[(
t0
 >> 8) & 0xff]

812 ^ 
Te3
[(
t1
 ) & 0xff]

813 ^ 
rk
[2]);

814 
s3
 = (
Te0
[(
t3
 >> 24) ]

815 ^ 
Te1
[(
t0
 >> 16) & 0xff]

816 ^ 
Te2
[(
t1
 >> 8) & 0xff]

817 ^ 
Te3
[(
t2
 ) & 0xff]

818 ^ 
rk
[3]);

822 
s0
 = ((
Te4
[(
t0
 >> 24) ] & 0xff000000)

823 ^ (
Te4
[(
t1
 >> 16) & 0xff] & 0x00ff0000)

824 ^ (
Te4
[(
t2
 >> 8) & 0xff] & 0x0000ff00)

825 ^ (
Te4
[(
t3
 ) & 0xff] & 0x000000ff)

826 ^ 
rk
[0]);

827 
	`put_u32
(
ouçut
 , 
s0
);

828 
s1
 = ((
Te4
[(
t1
 >> 24) ] & 0xff000000)

829 ^ (
Te4
[(
t2
 >> 16) & 0xff] & 0x00ff0000)

830 ^ (
Te4
[(
t3
 >> 8) & 0xff] & 0x0000ff00)

831 ^ (
Te4
[(
t0
 ) & 0xff] & 0x000000ff)

832 ^ 
rk
[1]);

833 
	`put_u32
(
ouçut
 + 4, 
s1
);

834 
s2
 = ((
Te4
[(
t2
 >> 24) ] & 0xff000000)

835 ^ (
Te4
[(
t3
 >> 16) & 0xff] & 0x00ff0000)

836 ^ (
Te4
[(
t0
 >> 8) & 0xff] & 0x0000ff00)

837 ^ (
Te4
[(
t1
 ) & 0xff] & 0x000000ff)

838 ^ 
rk
[2]);

839 
	`put_u32
(
ouçut
 + 8, 
s2
);

840 
s3
 = ((
Te4
[(
t3
 >> 24) ] & 0xff000000)

841 ^ (
Te4
[(
t0
 >> 16) & 0xff] & 0x00ff0000)

842 ^ (
Te4
[(
t1
 >> 8) & 0xff] & 0x0000ff00)

843 ^ (
Te4
[(
t2
 ) & 0xff] & 0x000000ff)

844 ^ 
rk
[3]);

845 
	`put_u32
(
ouçut
 + 12, 
s3
);

846 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/aes128.h

25 #i‚de‡
AES128_H


26 
	#AES128_H


	)

28 
	~<°döt.h
>

30 
	s´s128
 {

31 
uöt32_t
 
	mrk
[128/8 + 28];

34 
´s128_scheduÀ
(
´s128
 *, c⁄° 
uöt8_t
 
key
[16]);

35 
´s128_í¸y±
(c⁄° 
´s128
 *, const *, *);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/autopath.c

17 
	~<c⁄fig.h
>

19 
	~"aut›©h.h
"

21 
	~<öây≥s.h
>

22 
	~<°dlib.h
>

24 
	~"Êow.h
"

25 
	~"mëa-Êow.h
"

26 
	~"nx-m©ch.h
"

27 
	~"oÂ-a˘i⁄s.h
"

28 
	~"oÂ-îr‹s.h
"

29 
	~"oÂ-utû.h
"

30 
	~"›íÊow/nicúa-ext.h
"

31 
	~"vlog.h
"

33 
VLOG_DEFINE_THIS_MODULE
(
aut›©h
);

36 
	$aut›©h_∑r£
(
oÂa˘_aut›©h
 *
≠
, c⁄° *
s_
)

38 *
s
;

39 *
id_°r
, *
d°
, *
ßve_±r
;

40 
uöt16_t
 
p‹t
;

42 
	`oÂa˘_öô_AUTOPATH
(
≠
);

44 
s
 = 
	`x°rdup
(
s_
);

45 
ßve_±r
 = 
NULL
;

46 
id_°r
 = 
	`°πok_r
(
s
, ", ", &
ßve_±r
);

47 
d°
 = 
	`°πok_r
(
NULL
, ", ", &
ßve_±r
);

49 i‡(!
d°
) {

50 
	`ovs_Áèl
(0, "%s:ÇŸÉnoughárgumít†tÿaut›©há˘i⁄", 
s_
);

53 i‡(!
	`oÂutû_p‹t_‰om_°rög
(
id_°r
, &
p‹t
)) {

54 
	`ovs_Áèl
(0, "%s: badÖ‹ànumbî", 
s_
);

56 
≠
->
p‹t
 =Öort;

58 
	`mf_∑r£_subfõld
(&
≠
->
d°
, dst);

59 i‡(
≠
->
d°
.
n_bôs
 < 16) {

60 
	`ovs_Áèl
(0, "%s: %d-bit destination field has %uÖossible values, "

62 
s_
, 
≠
->
d°
.
n_bôs
, 1u <<áp->dst.n_bits);

65 
	`‰ì
(
s
);

66 
	}
}

68 
oÂîr


69 
	$aut›©h_‰om_›íÊow
(c⁄° 
nx_a˘i⁄_aut›©h
 *
«p
,

70 
oÂa˘_aut›©h
 *
aut›©h
)

72 
	`oÂa˘_öô_AUTOPATH
(
aut›©h
);

73 
aut›©h
->
d°
.
fõld
 = 
	`mf_‰om_nxm_hódî
(
	`¡ohl
(
«p
->dst));

74 
aut›©h
->
d°
.
ofs
 = 
	`nxm_decode_ofs
(
«p
->
ofs_nbôs
);

75 
aut›©h
->
d°
.
n_bôs
 = 
	`nxm_decode_n_bôs
(
«p
->
ofs_nbôs
);

76 
aut›©h
->
p‹t
 = 
	`¡ohl
(
«p
->
id
);

78 i‡(
aut›©h
->
d°
.
n_bôs
 < 16) {

79 
	`VLOG_WARN
("atÜeast 16 bit destination isÑequired foráutopath "

81  
OFPERR_OFPBAC_BAD_ARGUMENT
;

84  
	`aut›©h_check
(
aut›©h
, 
NULL
);

85 
	}
}

87 
oÂîr


88 
	$aut›©h_check
(c⁄° 
oÂa˘_aut›©h
 *
aut›©h
, c⁄° 
Êow
 *flow)

90 
	`VLOG_WARN_ONCE
("Theáutopatháction is deprecatedánd may beÑemoved in"

93  
	`mf_check_d°
(&
aut›©h
->
d°
, 
Êow
);

94 
	}
}

97 
	$aut›©h_to_nxa°
(c⁄° 
oÂa˘_aut›©h
 *
aut›©h
,

98 
oÂbuf
 *
›íÊow
)

100 
nx_a˘i⁄_aut›©h
 *
≠
;

102 
≠
 = 
	`oÂutû_put_NXAST_AUTOPATH__DEPRECATED
(
›íÊow
);

103 
≠
->
ofs_nbôs
 = 
	`nxm_ícode_ofs_nbôs
(
aut›©h
->
d°
.
ofs
,

104 
aut›©h
->
d°
.
n_bôs
);

105 
≠
->
d°
 = 
	`ht⁄l
(
aut›©h
->d°.
fõld
->
nxm_hódî
);

106 
≠
->
id
 = 
	`ht⁄l
(
aut›©h
->
p‹t
);

107 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/autopath.h

17 #i‚de‡
AUTOPATH_H


18 
	#AUTOPATH_H
 1

	)

20 
	~<°döt.h
>

21 
	~"oÂ-îr‹s.h
"

23 
	gÊow
;

24 
	gnx_a˘i⁄_aut›©h
;

25 
	goÂa˘_aut›©h
;

26 
	goÂbuf
;

32 
aut›©h_∑r£
(
oÂa˘_aut›©h
 *, const *);

34 
oÂîr
 
aut›©h_‰om_›íÊow
(c⁄° 
nx_a˘i⁄_aut›©h
 *,

35 
oÂa˘_aut›©h
 *);

36 
oÂîr
 
aut›©h_check
(c⁄° 
oÂa˘_aut›©h
 *,

37 c⁄° 
Êow
 *);

38 
aut›©h_to_nxa°
(c⁄° 
oÂa˘_aut›©h
 *,

39 
oÂbuf
 *
›íÊow
);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/backtrace.c

17 
	~<c⁄fig.h
>

19 
	~"backåa˚.h
"

21 
	~<î∫o.h
>

22 
	~<öây≥s.h
>

23 
	~<°dboﬁ.h
>

24 
	~<°dio.h
>

26 
	~"compûî.h
"

27 
	~"vlog.h
"

29 
VLOG_DEFINE_THIS_MODULE
(
backåa˚
);

31 #ifde‡
HAVE_BACKTRACE


32 
	~<execöfo.h
>

34 
	$backåa˚_ˇ±uª
(
backåa˚
 *
b
)

36 *
‰ames
[
BACKTRACE_MAX_FRAMES
];

37 
i
;

39 
b
->
n_‰ames
 = 
	`backåa˚
(
‰ames
, 
BACKTRACE_MAX_FRAMES
);

40 
i
 = 0; i < 
b
->
n_‰ames
; i++) {

41 
b
->
‰ames
[
i
] = (
uöçå_t
) frames[i];

43 
	}
}

44 #ñi‡
__GNUC__


45 
uöçå_t


46 
	$gë_max_°ack
()

48 c⁄° 
fûe_«me
[] = "/proc/self/maps";

49 
löe
[1024];

50 
löe_numbî
;

51 
FILE
 *
f
;

53 
f
 = 
	`f›í
(
fûe_«me
, "r");

54 i‡(
f
 =
NULL
) {

55 
	`VLOG_WARN
("›íög %†Áûed: %s", 
fûe_«me
, 
	`°ªº‹
(
î∫o
));

59 
löe_numbî
 = 1; 
	`fgës
(
löe
, Üöe, 
f
);Üine_number++) {

60 i‡(
	`°r°r
(
löe
, "[stack]")) {

61 
uöçå_t
 
íd
;

62 i‡(
	`ssˇnf
(
löe
, "%*x-%"
SCNxPTR
, &
íd
) != 1) {

63 
	`VLOG_WARN
("%s:%d:Ö¨£Éº‹", 
fûe_«me
, 
löe_numbî
);

66 
	`f˛o£
(
f
);

67  
íd
;

70 
	`f˛o£
(
f
);

72 
	`VLOG_WARN
("%s:Çÿ°ack found", 
fûe_«me
);

74 
	}
}

76 
uöçå_t


77 
	$°ack_high
()

79 
uöçå_t
 
high
;

80 i‡(!
high
) {

81 
high
 = 
	`gë_max_°ack
();

83  
high
;

84 
	}
}

86 
uöçå_t


87 
	$°ack_low
()

89 
uöçå_t
 
low
 = (uintptr_t) &low;

90  
low
;

91 
	}
}

93 
boﬁ


94 
	$ö_°ack
(*
p
)

96 
uöçå_t
 
addªss
 = (uöçå_tË
p
;

97  
addªss
 >
	`°ack_low
(Ë&&áddªs†< 
	`°ack_high
();

98 
	}
}

101 
	$backåa˚_ˇ±uª
(
backåa˚
 *backtrace)

103 **
‰ame
;

104 
size_t
 
n
;

106 
n
 = 0;

107 
‰ame
 = 
	`__buûtö_‰ame_addªss
(1);

108 
‰ame
 !
NULL
 && 
	`ö_°ack
(frame) && frame[0] != NULL

109 && 
n
 < 
BACKTRACE_MAX_FRAMES
;

110 
‰ame
 = frame[0])

112 
backåa˚
->
‰ames
[
n
++] = (
uöçå_t
Ë
‰ame
[1];

114 
backåa˚
->
n_‰ames
 = 
n
;

115 
	}
}

118 
	$backåa˚_ˇ±uª
(
backåa˚
 *backtrace)

120 
backåa˚
->
n_‰ames
 = 0;

121 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/backtrace.h

17 #i‚de‡
BACKTRACE_H


18 
	#BACKTRACE_H
 1

	)

20 
	~<°döt.h
>

22 
	#BACKTRACE_MAX_FRAMES
 31

	)

24 
	sbackåa˚
 {

25 
	mn_‰ames
;

26 
uöçå_t
 
	m‰ames
[
BACKTRACE_MAX_FRAMES
];

29 
backåa˚_ˇ±uª
(
backåa˚
 *);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/bitmap.c

17 
	~<c⁄fig.h
>

18 
	~"bôm≠.h
"

19 
	~<°rög.h
>

23 
	$bôm≠_Æloˇã1
(
size_t
 
n_bôs
)

25 
size_t
 
n_byãs
 = 
	`bôm≠_n_byãs
(
n_bôs
);

26 
size_t
 
n_l⁄gs
 = 
	`bôm≠_n_l⁄gs
(
n_bôs
);

27 *
bôm≠
;

30 
bôm≠
 = 
	`xmÆloc
(
n_byãs
);

31 
	`mem£t
(
bôm≠
, 0xff, 
n_byãs
);

35 
bôm≠
[
n_l⁄gs
 - 1] = (1UL << (
n_bôs
 % 
BITMAP_ULONG_BITS
)) - 1;

37  
bôm≠
;

38 
	}
}

43 
	$bôm≠_£t_mu…ùÀ
(*
bôm≠
, 
size_t
 
°¨t
, size_à
cou¡
,

44 
boﬁ
 
vÆue
)

46 ; 
cou¡
 && 
°¨t
 % 
BITMAP_ULONG_BITS
; count--) {

47 
	`bôm≠_£t
(
bôm≠
, 
°¨t
++, 
vÆue
);

49 ; 
cou¡
 >
BITMAP_ULONG_BITS
; count -= BITMAP_ULONG_BITS) {

50 *
	`bôm≠_unô__
(
bôm≠
, 
°¨t
Ë-(Ë
vÆue
;

51 
°¨t
 +
BITMAP_ULONG_BITS
;

53 ; 
cou¡
; count--) {

54 
	`bôm≠_£t
(
bôm≠
, 
°¨t
++, 
vÆue
);

56 
	}
}

60 
boﬁ


61 
	$bôm≠_equÆ
(c⁄° *
a
, c⁄° *
b
, 
size_t
 
n
)

63 
size_t
 
i
;

65 i‡(
	`memcmp
(
a
, 
b
, 
n
 / 
BITMAP_ULONG_BITS
 * ())) {

66  
Ál£
;

68 
i
 = 
	`ROUND_DOWN
(
n
, 
BITMAP_ULONG_BITS
); i <Ç; i++) {

69 i‡(
	`bôm≠_is_£t
(
a
, 
i
Ë!bôm≠_is_£t(
b
, i)) {

70  
Ál£
;

73  
åue
;

74 
	}
}

79 
size_t


80 
	$bôm≠_sˇn
(c⁄° *
bôm≠
, 
size_t
 
°¨t
, size_à
íd
)

83 
size_t
 
i
;

85 
i
 = 
°¨t
; i < 
íd
; i++) {

86 i‡(
	`bôm≠_is_£t
(
bôm≠
, 
i
)) {

90  
i
;

91 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/bitmap.h

17 #i‚de‡
BITMAP_H


18 
	#BITMAP_H
 1

	)

20 
	~<limôs.h
>

21 
	~<°dlib.h
>

22 
	~"utû.h
"

24 
	#BITMAP_ULONG_BITS
 ((Ë* 
CHAR_BIT
)

	)

26 
ölöe
 *

27 
	$bôm≠_unô__
(c⁄° *
bôm≠
, 
size_t
 
off£t
)

29  
	`CONST_CAST
(*, &
bôm≠
[
off£t
 / 
BITMAP_ULONG_BITS
]);

30 
	}
}

32 
ölöe
 

33 
	$bôm≠_bô__
(
size_t
 
off£t
)

35  1UL << (
off£t
 % 
BITMAP_ULONG_BITS
);

36 
	}
}

38 
ölöe
 
size_t


39 
	$bôm≠_n_l⁄gs
(
size_t
 
n_bôs
)

41  
	`DIV_ROUND_UP
(
n_bôs
, 
BITMAP_ULONG_BITS
);

42 
	}
}

44 
ölöe
 
size_t


45 
	$bôm≠_n_byãs
(
size_t
 
n_bôs
)

47  
	`bôm≠_n_l⁄gs
(
n_bôs
) * ();

48 
	}
}

50 
ölöe
 *

51 
	$bôm≠_Æloˇã
(
size_t
 
n_bôs
)

53  
	`xzÆloc
(
	`bôm≠_n_byãs
(
n_bôs
));

54 
	}
}

56 *
bôm≠_Æloˇã1
(
size_t
 
n_bôs
);

58 
ölöe
 *

59 
	$bôm≠_˛⁄e
(c⁄° *
bôm≠
, 
size_t
 
n_bôs
)

61  
	`xmemdup
(
bôm≠
, 
	`bôm≠_n_byãs
(
n_bôs
));

62 
	}
}

64 
ölöe
 

65 
	$bôm≠_‰ì
(*
bôm≠
)

67 
	`‰ì
(
bôm≠
);

68 
	}
}

70 
ölöe
 
boﬁ


71 
	$bôm≠_is_£t
(c⁄° *
bôm≠
, 
size_t
 
off£t
)

73  (*
	`bôm≠_unô__
(
bôm≠
, 
off£t
Ë& 
	`bôm≠_bô__
(offset)) != 0;

74 
	}
}

76 
ölöe
 

77 
	$bôm≠_£t1
(*
bôm≠
, 
size_t
 
off£t
)

79 *
	`bôm≠_unô__
(
bôm≠
, 
off£t
Ë|
	`bôm≠_bô__
(offset);

80 
	}
}

82 
ölöe
 

83 
	$bôm≠_£t0
(*
bôm≠
, 
size_t
 
off£t
)

85 *
	`bôm≠_unô__
(
bôm≠
, 
off£t
Ë&~
	`bôm≠_bô__
(offset);

86 
	}
}

88 
ölöe
 

89 
	$bôm≠_£t
(*
bôm≠
, 
size_t
 
off£t
, 
boﬁ
 
vÆue
)

91 i‡(
vÆue
) {

92 
	`bôm≠_£t1
(
bôm≠
, 
off£t
);

94 
	`bôm≠_£t0
(
bôm≠
, 
off£t
);

96 
	}
}

98 
bôm≠_£t_mu…ùÀ
(*, 
size_t
 
°¨t
, size_à
cou¡
,

99 
boﬁ
 
vÆue
);

100 
boﬁ
 
bôm≠_equÆ
(c⁄° *, c⁄° *, 
size_t
 
n
);

101 
size_t
 
bôm≠_sˇn
(c⁄° *, size_à
°¨t
, size_à
íd
);

103 
	#BITMAP_FOR_EACH_1
(
IDX
, 
SIZE
, 
BITMAP
) \

104 (
IDX
Ë
	`bôm≠_sˇn
(
BITMAP
, 0, 
SIZE
); (IDX) < (SIZE); \

105 (
IDX
Ë
	`bôm≠_sˇn
(
BITMAP
, (IDXË+ 1, 
SIZE
))

	)

	@/home/lsch/mytest/openvswitch-1.9.0/lib/bond.c

17 
	~<c⁄fig.h
>

19 
	~"b⁄d.h
"

21 
	~<limôs.h
>

22 
	~<°döt.h
>

23 
	~<°dlib.h
>

25 
	~"covîage.h
"

26 
	~"dy«mic-°rög.h
"

27 
	~"Êow.h
"

28 
	~"hm≠.h
"

29 
	~"œ˝.h
"

30 
	~"li°.h
"

31 
	~"√tdev.h
"

32 
	~"odp-utû.h
"

33 
	~"oÂbuf.h
"

34 
	~"∑ckës.h
"

35 
	~"pﬁl-lo›.h
"

36 
	~"shash.h
"

37 
	~"èg.h
"

38 
	~"timevÆ.h
"

39 
	~"unix˘l.h
"

40 
	~"vlog.h
"

42 
VLOG_DEFINE_THIS_MODULE
(
b⁄d
);

46 
	#BOND_MASK
 0xff

	)

50 
	sb⁄d_íåy
 {

51 
b⁄d_¶ave
 *
	m¶ave
;

52 
uöt64_t
 
	mtx_byãs
;

53 
èg_ty≥
 
	mèg
;

54 
li°
 
	mli°_node
;

58 
	sb⁄d_¶ave
 {

59 
hm≠_node
 
	mhm≠_node
;

60 
b⁄d
 *
	mb⁄d
;

61 *
	maux
;

63 
√tdev
 *
	m√tdev
;

64 
	mch™ge_£q
;

65 *
	m«me
;

68 
	mdñay_expúes
;

69 
boﬁ
 
	míabÀd
;

70 
boﬁ
 
	mmay_íabÀ
;

71 
èg_ty≥
 
	mèg
;

74 
li°
 
	mbÆ_node
;

75 
li°
 
	míåõs
;

76 
uöt64_t
 
	mtx_byãs
;

79 
uöt32_t
 
	m°b_id
;

84 
	sb⁄d
 {

85 
hm≠_node
 
	mhm≠_node
;

86 *
	m«me
;

89 
hm≠
 
	m¶aves
;

92 
b⁄d_mode
 
	mbÆ™˚
;

93 
b⁄d_¶ave
 *
	ma˘ive_¶ave
;

94 
èg_ty≥
 
	mno_¶aves_èg
;

95 
	mupdñay
, 
	mdowndñay
;

96 
œ˝_°©us
 
	mœ˝_°©us
;

97 
boﬁ
 
	mb⁄d_ªvÆid©e
;

98 
uöt32_t
 
	mbasis
;

101 
b⁄d_íåy
 *
	mhash
;

102 
	mªbÆ™˚_öãrvÆ
;

103 
	m√xt_ªbÆ™˚
;

104 
boﬁ
 
	m£nd_À¨nög_∑ckës
;

107 
èg_ty≥
 
	m°b_èg
;

110 
	m√xt_Áke_iÁ˚_upd©e
;

115 
èg_£t
 
	munix˘l_ègs
;

118 
hm≠
 
	gÆl_b⁄ds
 = 
HMAP_INITIALIZER
(&
Æl_b⁄ds
);

120 
b⁄d_íåy_ª£t
(
b⁄d
 *);

121 
b⁄d_¶ave
 *
b⁄d_¶ave_lookup
(
b⁄d
 *, c⁄° *
¶ave_
);

122 
b⁄d_íabÀ_¶ave
(
b⁄d_¶ave
 *, 
boﬁ
 
íabÀ
,

123 
èg_£t
 *);

124 
b⁄d_lök_°©us_upd©e
(
b⁄d_¶ave
 *, 
èg_£t
 *);

125 
b⁄d_choo£_a˘ive_¶ave
(
b⁄d
 *, 
èg_£t
 *);

126 
b⁄d_hash_§c
(c⁄° 
uöt8_t
 
mac
[
ETH_ADDR_LEN
],

127 
uöt16_t
 
vœn
, 
uöt32_t
 
basis
);

128 
b⁄d_hash_t˝
(c⁄° 
Êow
 *, 
uöt16_t
 
vœn
,

129 
uöt32_t
 
basis
);

130 
b⁄d_íåy
 *
lookup_b⁄d_íåy
(c⁄° 
b⁄d
 *,

131 c⁄° 
Êow
 *,

132 
uöt16_t
 
vœn
);

133 
èg_ty≥
 
b⁄d_gë_a˘ive_¶ave_èg
(c⁄° 
b⁄d
 *);

134 
b⁄d_¶ave
 *
choo£_ouçut_¶ave
(c⁄° 
b⁄d
 *,

135 c⁄° 
Êow
 *,

136 
uöt16_t
 
vœn
, 
èg_ty≥
 *
ègs
);

137 
b⁄d_upd©e_Áke_¶ave_°©s
(
b⁄d
 *);

142 
boﬁ


143 
	$b⁄d_mode_‰om_°rög
(
b⁄d_mode
 *
bÆ™˚
, c⁄° *
s
)

145 i‡(!
	`°rcmp
(
s
, 
	`b⁄d_mode_to_°rög
(
BM_TCP
))) {

146 *
bÆ™˚
 = 
BM_TCP
;

147 } i‡(!
	`°rcmp
(
s
, 
	`b⁄d_mode_to_°rög
(
BM_SLB
))) {

148 *
bÆ™˚
 = 
BM_SLB
;

149 } i‡(!
	`°rcmp
(
s
, 
	`b⁄d_mode_to_°rög
(
BM_STABLE
))) {

150 *
bÆ™˚
 = 
BM_STABLE
;

151 } i‡(!
	`°rcmp
(
s
, 
	`b⁄d_mode_to_°rög
(
BM_AB
))) {

152 *
bÆ™˚
 = 
BM_AB
;

154  
Ál£
;

156  
åue
;

157 
	}
}

161 
	$b⁄d_mode_to_°rög
(
b⁄d_mode
 
bÆ™˚
) {

162 
bÆ™˚
) {

163 
BM_TCP
:

165 
BM_SLB
:

167 
BM_STABLE
:

169 
BM_AB
:

172 
	`NOT_REACHED
();

173 
	}
}

181 
b⁄d
 *

182 
	$b⁄d_¸óã
(c⁄° 
b⁄d_£âögs
 *
s
)

184 
b⁄d
 *bond;

186 
b⁄d
 = 
	`xzÆloc
( *bond);

187 
	`hm≠_öô
(&
b⁄d
->
¶aves
);

188 
b⁄d
->
no_¶aves_èg
 = 
	`èg_¸óã_øndom
();

189 
b⁄d
->
°b_èg
 = 
	`èg_¸óã_øndom
();

190 
b⁄d
->
√xt_Áke_iÁ˚_upd©e
 = 
LLONG_MAX
;

192 
	`b⁄d_ªc⁄figuª
(
b⁄d
, 
s
);

194 
	`èg_£t_öô
(&
b⁄d
->
unix˘l_ègs
);

196  
b⁄d
;

197 
	}
}

201 
	$b⁄d_de°roy
(
b⁄d
 *bond)

203 
b⁄d_¶ave
 *
¶ave
, *
√xt_¶ave
;

205 i‡(!
b⁄d
) {

209 
	`hm≠_ªmove
(&
Æl_b⁄ds
, &
b⁄d
->
hm≠_node
);

211 
	`HMAP_FOR_EACH_SAFE
 (
¶ave
, 
√xt_¶ave
, 
hm≠_node
, &
b⁄d
->
¶aves
) {

212 
	`hm≠_ªmove
(&
b⁄d
->
¶aves
, &
¶ave
->
hm≠_node
);

214 
	`‰ì
(
¶ave
->
«me
);

215 
	`‰ì
(
¶ave
);

217 
	`hm≠_de°roy
(&
b⁄d
->
¶aves
);

219 
	`‰ì
(
b⁄d
->
hash
);

220 
	`‰ì
(
b⁄d
->
«me
);

221 
	`‰ì
(
b⁄d
);

222 
	}
}

233 
boﬁ


234 
	$b⁄d_ªc⁄figuª
(
b⁄d
 *b⁄d, c⁄° 
b⁄d_£âögs
 *
s
)

236 
boﬁ
 
ªvÆid©e
 = 
Ál£
;

238 i‡(!
b⁄d
->
«me
 || 
	`°rcmp
(b⁄d->«me, 
s
->name)) {

239 i‡(
b⁄d
->
«me
) {

240 
	`hm≠_ªmove
(&
Æl_b⁄ds
, &
b⁄d
->
hm≠_node
);

241 
	`‰ì
(
b⁄d
->
«me
);

243 
b⁄d
->
«me
 = 
	`x°rdup
(
s
->name);

244 
	`hm≠_ö£π
(&
Æl_b⁄ds
, &
b⁄d
->
hm≠_node
, 
	`hash_°rög
(b⁄d->
«me
, 0));

247 
b⁄d
->
updñay
 = 
s
->
up_dñay
;

248 
b⁄d
->
downdñay
 = 
s
->
down_dñay
;

250 i‡(
b⁄d
->
ªbÆ™˚_öãrvÆ
 !
s
->rebalance_interval) {

251 
b⁄d
->
ªbÆ™˚_öãrvÆ
 = 
s
->rebalance_interval;

252 
ªvÆid©e
 = 
åue
;

255 i‡(
b⁄d
->
bÆ™˚
 !
s
->balance) {

256 
b⁄d
->
bÆ™˚
 = 
s
->balance;

257 
ªvÆid©e
 = 
åue
;

259 i‡(
b⁄d
->
bÆ™˚
 =
BM_STABLE
) {

260 
	`VLOG_WARN_ONCE
("Stable bond mode is deprecatedánd may beÑemoved"

266 i‡(
b⁄d
->
basis
 !
s
->basis) {

267 
b⁄d
->
basis
 = 
s
->basis;

268 
ªvÆid©e
 = 
åue
;

271 i‡(
s
->
Áke_iÁ˚
) {

272 i‡(
b⁄d
->
√xt_Áke_iÁ˚_upd©e
 =
LLONG_MAX
) {

273 
b⁄d
->
√xt_Áke_iÁ˚_upd©e
 = 
	`time_m£c
();

276 
b⁄d
->
√xt_Áke_iÁ˚_upd©e
 = 
LLONG_MAX
;

279 i‡(
b⁄d
->
b⁄d_ªvÆid©e
) {

280 
ªvÆid©e
 = 
åue
;

281 
b⁄d
->
b⁄d_ªvÆid©e
 = 
Ál£
;

284 i‡(
b⁄d
->
bÆ™˚
 =
BM_AB
 || !b⁄d->
hash
 || 
ªvÆid©e
) {

285 
	`b⁄d_íåy_ª£t
(
b⁄d
);

288  
ªvÆid©e
;

289 
	}
}

292 
	$b⁄d_¶ave_£t_√tdev__
(
b⁄d_¶ave
 *
¶ave
, 
√tdev
 *netdev)

294 i‡(
¶ave
->
√tdev
 !=Çetdev) {

295 
¶ave
->
√tdev
 =Çetdev;

296 
¶ave
->
ch™ge_£q
 = 0;

298 
	}
}

314 
	$b⁄d_¶ave_ªgi°î
(
b⁄d
 *b⁄d, *
¶ave_
, 
uöt32_t
 
°b_id
,

315 
√tdev
 *netdev)

317 
b⁄d_¶ave
 *
¶ave
 = 
	`b⁄d_¶ave_lookup
(
b⁄d
, 
¶ave_
);

319 i‡(!
¶ave
) {

320 
¶ave
 = 
	`xzÆloc
( *slave);

322 
	`hm≠_ö£π
(&
b⁄d
->
¶aves
, &
¶ave
->
hm≠_node
, 
	`hash_poöãr
(
¶ave_
, 0));

323 
¶ave
->
b⁄d
 = bond;

324 
¶ave
->
aux
 = 
¶ave_
;

325 
¶ave
->
dñay_expúes
 = 
LLONG_MAX
;

326 
¶ave
->
«me
 = 
	`x°rdup
(
	`√tdev_gë_«me
(
√tdev
));

327 
b⁄d
->
b⁄d_ªvÆid©e
 = 
åue
;

329 
¶ave
->
íabÀd
 = 
Ál£
;

330 
	`b⁄d_íabÀ_¶ave
(
¶ave
, 
	`√tdev_gë_ˇºõr
(
√tdev
), 
NULL
);

333 i‡(
¶ave
->
°b_id
 != stb_id) {

334 
¶ave
->
°b_id
 = stb_id;

335 
b⁄d
->
b⁄d_ªvÆid©e
 = 
åue
;

338 
	`b⁄d_¶ave_£t_√tdev__
(
¶ave
, 
√tdev
);

340 
	`‰ì
(
¶ave
->
«me
);

341 
¶ave
->
«me
 = 
	`x°rdup
(
	`√tdev_gë_«me
(
√tdev
));

342 
	}
}

350 
	$b⁄d_¶ave_£t_√tdev
(
b⁄d
 *b⁄d, *
¶ave_
, 
√tdev
 *netdev)

352 
b⁄d_¶ave
 *
¶ave
 = 
	`b⁄d_¶ave_lookup
(
b⁄d
, 
¶ave_
);

353 i‡(
¶ave
) {

354 
	`b⁄d_¶ave_£t_√tdev__
(
¶ave
, 
√tdev
);

356 
	}
}

363 
	$b⁄d_¶ave_uƒegi°î
(
b⁄d
 *b⁄d, c⁄° *
¶ave_
)

365 
b⁄d_¶ave
 *
¶ave
 = 
	`b⁄d_¶ave_lookup
(
b⁄d
, 
¶ave_
);

366 
boﬁ
 
dñ_a˘ive
;

368 i‡(!
¶ave
) {

372 
	`b⁄d_íabÀ_¶ave
(
¶ave
, 
Ál£
, 
NULL
);

374 
dñ_a˘ive
 = 
b⁄d
->
a˘ive_¶ave
 =
¶ave
;

375 i‡(
b⁄d
->
hash
) {

376 
b⁄d_íåy
 *
e
;

377 
e
 = 
b⁄d
->
hash
;É <&b⁄d->hash[
BOND_MASK
];É++) {

378 i‡(
e
->
¶ave
 == slave) {

379 
e
->
¶ave
 = 
NULL
;

384 
	`‰ì
(
¶ave
->
«me
);

386 
	`hm≠_ªmove
(&
b⁄d
->
¶aves
, &
¶ave
->
hm≠_node
);

388 
	`‰ì
(
¶ave
);

390 i‡(
dñ_a˘ive
) {

391 
èg_£t
 
ègs
;

393 
	`èg_£t_öô
(&
ègs
);

394 
	`b⁄d_choo£_a˘ive_¶ave
(
b⁄d
, &
ègs
);

395 
b⁄d
->
£nd_À¨nög_∑ckës
 = 
åue
;

397 
	}
}

405 
	$b⁄d_¶ave_£t_may_íabÀ
(
b⁄d
 *b⁄d, *
¶ave_
, 
boﬁ
 
may_íabÀ
)

407 
	`b⁄d_¶ave_lookup
(
b⁄d
, 
¶ave_
)->
may_íabÀ
 = may_enable;

408 
	}
}

415 
	$b⁄d_run
(
b⁄d
 *b⁄d, 
èg_£t
 *
ègs
, 
œ˝_°©us
Üacp_status)

417 
b⁄d_¶ave
 *
¶ave
;

419 i‡(
b⁄d
->
œ˝_°©us
 !=Üacp_status) {

420 
b⁄d
->
œ˝_°©us
 =Üacp_status;

421 
b⁄d
->
b⁄d_ªvÆid©e
 = 
åue
;

425 
	`HMAP_FOR_EACH
 (
¶ave
, 
hm≠_node
, &
b⁄d
->
¶aves
) {

426 
	`b⁄d_lök_°©us_upd©e
(
¶ave
, 
ègs
);

427 
¶ave
->
ch™ge_£q
 = 
	`√tdev_ch™ge_£q
(¶ave->
√tdev
);

429 i‡(!
b⁄d
->
a˘ive_¶ave
 || !b⁄d->a˘ive_¶ave->
íabÀd
) {

430 
	`b⁄d_choo£_a˘ive_¶ave
(
b⁄d
, 
ègs
);

434 i‡(
	`time_m£c
(Ë>
b⁄d
->
√xt_Áke_iÁ˚_upd©e
) {

435 
	`b⁄d_upd©e_Áke_¶ave_°©s
(
b⁄d
);

436 
b⁄d
->
√xt_Áke_iÁ˚_upd©e
 = 
	`time_m£c
() + 1000;

439 i‡(
b⁄d
->
b⁄d_ªvÆid©e
) {

440 
b⁄d
->
b⁄d_ªvÆid©e
 = 
Ál£
;

442 
	`b⁄d_íåy_ª£t
(
b⁄d
);

443 i‡(
b⁄d
->
bÆ™˚
 !
BM_STABLE
) {

444 
b⁄d_¶ave
 *
¶ave
;

446 
	`HMAP_FOR_EACH
 (
¶ave
, 
hm≠_node
, &
b⁄d
->
¶aves
) {

447 
	`èg_£t_add
(
ègs
, 
¶ave
->
èg
);

450 
	`èg_£t_add
(
ègs
, 
b⁄d
->
°b_èg
);

452 
	`èg_£t_add
(
ègs
, 
b⁄d
->
no_¶aves_èg
);

456 
	`èg_£t_uni⁄
(
ègs
, &
b⁄d
->
unix˘l_ègs
);

457 
	`èg_£t_öô
(&
b⁄d
->
unix˘l_ègs
);

458 
	}
}

462 
	$b⁄d_waô
(
b⁄d
 *bond)

464 
b⁄d_¶ave
 *
¶ave
;

466 
	`HMAP_FOR_EACH
 (
¶ave
, 
hm≠_node
, &
b⁄d
->
¶aves
) {

467 i‡(
¶ave
->
dñay_expúes
 !
LLONG_MAX
) {

468 
	`pﬁl_timî_waô_u¡û
(
¶ave
->
dñay_expúes
);

471 i‡(
¶ave
->
ch™ge_£q
 !
	`√tdev_ch™ge_£q
(¶ave->
√tdev
)) {

472 
	`pﬁl_immedüã_wake
();

476 i‡(
b⁄d
->
√xt_Áke_iÁ˚_upd©e
 !
LLONG_MAX
) {

477 
	`pﬁl_timî_waô_u¡û
(
b⁄d
->
√xt_Áke_iÁ˚_upd©e
);

481 i‡(!
	`èg_£t_is_em±y
(&
b⁄d
->
unix˘l_ègs
)) {

482 
	`pﬁl_immedüã_wake
();

489 
	}
}

493 
boﬁ


494 
	$may_£nd_À¨nög_∑ckës
(c⁄° 
b⁄d
 *bond)

496  
b⁄d
->
œ˝_°©us
 =
LACP_DISABLED


497 && (
b⁄d
->
bÆ™˚
 =
BM_SLB
 || b⁄d->bÆ™˚ =
BM_AB
)

498 && 
b⁄d
->
a˘ive_¶ave
;

499 
	}
}

512 
boﬁ


513 
	$b⁄d_should_£nd_À¨nög_∑ckës
(
b⁄d
 *bond)

515 
boﬁ
 
£nd
 = 
b⁄d
->
£nd_À¨nög_∑ckës
 && 
	`may_£nd_À¨nög_∑ckës
(bond);

516 
b⁄d
->
£nd_À¨nög_∑ckës
 = 
Ál£
;

517  
£nd
;

518 
	}
}

525 
oÂbuf
 *

526 
	$b⁄d_compo£_À¨nög_∑ckë
(
b⁄d
 *bond,

527 c⁄° 
uöt8_t
 
ëh_§c
[
ETH_ADDR_LEN
],

528 
uöt16_t
 
vœn
, **
p‹t_aux
)

530 
b⁄d_¶ave
 *
¶ave
;

531 
oÂbuf
 *
∑ckë
;

532 
èg_ty≥
 
ègs
 = 0;

533 
Êow
 flow;

535 
	`as£π
(
	`may_£nd_À¨nög_∑ckës
(
b⁄d
));

537 
	`mem£t
(&
Êow
, 0,  flow);

538 
	`mem˝y
(
Êow
.
dl_§c
, 
ëh_§c
, 
ETH_ADDR_LEN
);

539 
¶ave
 = 
	`choo£_ouçut_¶ave
(
b⁄d
, &
Êow
, 
vœn
, &
ègs
);

541 
∑ckë
 = 
	`oÂbuf_√w
(0);

542 
	`compo£_øΩ
(
∑ckë
, 
ëh_§c
);

543 i‡(
vœn
) {

544 
	`ëh_push_vœn
(
∑ckë
, 
	`ht⁄s
(
vœn
));

547 *
p‹t_aux
 = 
¶ave
->
aux
;

548  
∑ckë
;

549 
	}
}

566 
b⁄d_vîdi˘


567 
	$b⁄d_check_admissibûôy
(
b⁄d
 *b⁄d, c⁄° *
¶ave_
,

568 c⁄° 
uöt8_t
 
ëh_d°
[
ETH_ADDR_LEN
], 
èg_ty≥
 *
ègs
)

570 
b⁄d_¶ave
 *
¶ave
 = 
	`b⁄d_¶ave_lookup
(
b⁄d
, 
¶ave_
);

580 
b⁄d
->
œ˝_°©us
) {

581 
LACP_NEGOTIATED
:  
¶ave
->
íabÀd
 ? 
BV_ACCEPT
 : 
BV_DROP
;

582 
LACP_CONFIGURED
:  
BV_DROP
;

583 
LACP_DISABLED
: ;

587 i‡(
	`ëh_addr_is_mu…iˇ°
(
ëh_d°
)) {

588 *
ègs
 |
	`b⁄d_gë_a˘ive_¶ave_èg
(
b⁄d
);

589 i‡(
b⁄d
->
a˘ive_¶ave
 !
	`b⁄d_¶ave_lookup
(b⁄d, 
¶ave_
)) {

590  
BV_DROP
;

594 
b⁄d
->
bÆ™˚
) {

595 
BM_AB
:

598 *
ègs
 |
	`b⁄d_gë_a˘ive_¶ave_èg
(
b⁄d
);

599 i‡(
b⁄d
->
a˘ive_¶ave
 !
¶ave
) {

600 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 5);

602 
	`VLOG_DBG_RL
(&
æ
, "active-backup bondÑeceivedÖacket on backup"

603 " sœvê(%sËde°öed f‹ " 
ETH_ADDR_FMT
,

604 
¶ave
->
«me
, 
	`ETH_ADDR_ARGS
(
ëh_d°
));

605  
BV_DROP
;

607  
BV_ACCEPT
;

609 
BM_TCP
:

613  
BV_DROP
;

615 
BM_SLB
:

622  
BV_DROP_IF_MOVED
;

624 
BM_STABLE
:

625  
BV_ACCEPT
;

628 
	`NOT_REACHED
();

629 
	}
}

644 
	$b⁄d_choo£_ouçut_¶ave
(
b⁄d
 *b⁄d, c⁄° 
Êow
 *flow,

645 
uöt16_t
 
vœn
, 
èg_ty≥
 *
ègs
)

647 
b⁄d_¶ave
 *
¶ave
 = 
	`choo£_ouçut_¶ave
(
b⁄d
, 
Êow
, 
vœn
, 
ègs
);

648 i‡(
¶ave
) {

649 *
ègs
 |
b⁄d
->
bÆ™˚
 =
BM_STABLE
 ? b⁄d->
°b_èg
 : 
¶ave
->
èg
;

650  
¶ave
->
aux
;

652 *
ègs
 |
b⁄d
->
no_¶aves_èg
;

653  
NULL
;

655 
	}
}

659 
boﬁ


660 
	$b⁄d_is_bÆ™˚d
(c⁄° 
b⁄d
 *bond)

662  
b⁄d
->
ªbÆ™˚_öãrvÆ


663 && (
b⁄d
->
bÆ™˚
 =
BM_SLB
 || b⁄d->bÆ™˚ =
BM_TCP
);

664 
	}
}

668 
	$b⁄d_accou¡
(
b⁄d
 *b⁄d, c⁄° 
Êow
 *Êow, 
uöt16_t
 
vœn
,

669 
uöt64_t
 
n_byãs
)

671 i‡(
	`b⁄d_is_bÆ™˚d
(
b⁄d
)) {

672 
	`lookup_b⁄d_íåy
(
b⁄d
, 
Êow
, 
vœn
)->
tx_byãs
 +
n_byãs
;

674 
	}
}

676 
b⁄d_¶ave
 *

677 
	$b⁄d_¶ave_‰om_bÆ_node
(
li°
 *
bÆ
)

679  
	`CONTAINER_OF
(
bÆ
, 
b⁄d_¶ave
, 
bÆ_node
);

680 
	}
}

683 
	$log_bÆs
(
b⁄d
 *b⁄d, c⁄° 
li°
 *
bÆs
)

685 i‡(
	`VLOG_IS_DBG_ENABLED
()) {

686 
ds
 d†
DS_EMPTY_INITIALIZER
;

687 c⁄° 
b⁄d_¶ave
 *
¶ave
;

689 
	`LIST_FOR_EACH
 (
¶ave
, 
bÆ_node
, 
bÆs
) {

690 i‡(
ds
.
Àngth
) {

691 
	`ds_put_ch¨
(&
ds
, ',');

693 
	`ds_put_f‹m©
(&
ds
, " %†%"
PRIu64
"kB",

694 
¶ave
->
«me
, sœve->
tx_byãs
 / 1024);

696 i‡(!
¶ave
->
íabÀd
) {

697 
	`ds_put_c°r
(&
ds
, " (disabled)");

699 i‡(!
	`li°_is_em±y
(&
¶ave
->
íåõs
)) {

700 
b⁄d_íåy
 *
e
;

702 
	`ds_put_c°r
(&
ds
, " (");

703 
	`LIST_FOR_EACH
 (
e
, 
li°_node
, &
¶ave
->
íåõs
) {

704 i‡(&
e
->
li°_node
 !
	`li°_‰⁄t
(&
¶ave
->
íåõs
)) {

705 
	`ds_put_c°r
(&
ds
, " + ");

707 
	`ds_put_f‹m©
(&
ds
, "h%td: %"
PRIu64
"kB",

708 
e
 - 
b⁄d
->
hash
,É->
tx_byãs
 / 1024);

710 
	`ds_put_c°r
(&
ds
, ")");

713 
	`VLOG_DBG
("b⁄d %s:%s", 
b⁄d
->
«me
, 
	`ds_c°r
(&
ds
));

714 
	`ds_de°roy
(&
ds
);

716 
	}
}

720 
	$b⁄d_shi·_lﬂd
(
b⁄d_íåy
 *
hash
, 
b⁄d_¶ave
 *
to
,

721 
èg_£t
 *
£t
)

723 
b⁄d_¶ave
 *
‰om
 = 
hash
->
¶ave
;

724 
b⁄d
 *b⁄d = 
‰om
->bond;

725 
uöt64_t
 
dñè
 = 
hash
->
tx_byãs
;

727 
	`VLOG_INFO
("b⁄d %s: shi· %"
PRIu64
"kB ofÜoad (with hash %td) "

728 "‰om %†tÿ%†“ow c¨ryög %"
PRIu64
"kBánd "

729 "%"
PRIu64
"kBÜoad,Ñespectively)",

730 
b⁄d
->
«me
, 
dñè
 / 1024, 
hash
 - bond->hash,

731 
‰om
->
«me
, 
to
->name,

732 (
‰om
->
tx_byãs
 - 
dñè
) / 1024,

733 (
to
->
tx_byãs
 + 
dñè
) / 1024);

736 
‰om
->
tx_byãs
 -
dñè
;

737 
to
->
tx_byãs
 +
dñè
;

740 
	`èg_£t_add
(
£t
, 
hash
->
èg
);

741 
hash
->
¶ave
 = 
to
;

742 
hash
->
èg
 = 
	`èg_¸óã_øndom
();

743 
	}
}

751 
b⁄d_íåy
 *

752 
	$choo£_íåy_to_migøã
(c⁄° 
b⁄d_¶ave
 *
‰om
, 
uöt64_t
 
to_tx_byãs
)

754 
b⁄d_íåy
 *
e
;

756 i‡(
	`li°_is_sh‹t
(&
‰om
->
íåõs
)) {

759  
NULL
;

762 
	`LIST_FOR_EACH
 (
e
, 
li°_node
, &
‰om
->
íåõs
) {

763 
ﬁd_øtio
, 
√w_øtio
;

764 
uöt64_t
 
dñè
;

766 i‡(
to_tx_byãs
 == 0) {

768  
e
;

771 
dñè
 = 
e
->
tx_byãs
;

772 
ﬁd_øtio
 = ()
‰om
->
tx_byãs
 / 
to_tx_byãs
;

773 
√w_øtio
 = ()(
‰om
->
tx_byãs
 - 
dñè
Ë/ (
to_tx_byãs
 + delta);

774 i‡(
ﬁd_øtio
 - 
√w_øtio
 > 0.1) {

776  
e
;

780  
NULL
;

781 
	}
}

786 
	$ö£π_bÆ
(
li°
 *
bÆs
, 
b⁄d_¶ave
 *
¶ave
)

788 
b⁄d_¶ave
 *
pos
;

790 
	`LIST_FOR_EACH
 (
pos
, 
bÆ_node
, 
bÆs
) {

791 i‡(
¶ave
->
tx_byãs
 > 
pos
->tx_bytes) {

795 
	`li°_ö£π
(&
pos
->
bÆ_node
, &
¶ave
->bal_node);

796 
	}
}

801 
	$ªö£π_bÆ
(
li°
 *
bÆs
, 
b⁄d_¶ave
 *
¶ave
)

803 
	`li°_ªmove
(&
¶ave
->
bÆ_node
);

804 
	`ö£π_bÆ
(
bÆs
, 
¶ave
);

805 
	}
}

812 
	$b⁄d_ªbÆ™˚
(
b⁄d
 *b⁄d, 
èg_£t
 *
ègs
)

814 
b⁄d_¶ave
 *
¶ave
;

815 
b⁄d_íåy
 *
e
;

816 
li°
 
bÆs
;

818 i‡(!
	`b⁄d_is_bÆ™˚d
(
b⁄d
Ë|| 
	`time_m£c
(Ë< b⁄d->
√xt_ªbÆ™˚
) {

821 
b⁄d
->
√xt_ªbÆ™˚
 = 
	`time_m£c
(Ë+ b⁄d->
ªbÆ™˚_öãrvÆ
;

825 
	`HMAP_FOR_EACH
 (
¶ave
, 
hm≠_node
, &
b⁄d
->
¶aves
) {

826 
¶ave
->
tx_byãs
 = 0;

827 
	`li°_öô
(&
¶ave
->
íåõs
);

829 
e
 = &
b⁄d
->
hash
[0];É <&b⁄d->hash[
BOND_MASK
];É++) {

830 i‡(
e
->
¶ave
 &&É->
tx_byãs
) {

831 
e
->
¶ave
->
tx_byãs
 +=É->tx_bytes;

832 
	`li°_push_back
(&
e
->
¶ave
->
íåõs
, &e->
li°_node
);

840 
	`li°_öô
(&
bÆs
);

841 
	`HMAP_FOR_EACH
 (
¶ave
, 
hm≠_node
, &
b⁄d
->
¶aves
) {

842 i‡(
¶ave
->
íabÀd
) {

843 
	`ö£π_bÆ
(&
bÆs
, 
¶ave
);

846 
	`log_bÆs
(
b⁄d
, &
bÆs
);

849 !
	`li°_is_sh‹t
(&
bÆs
)) {

850 
b⁄d_¶ave
 *
‰om
 = 
	`b⁄d_¶ave_‰om_bÆ_node
(
	`li°_‰⁄t
(&
bÆs
));

851 
b⁄d_¶ave
 *
to
 = 
	`b⁄d_¶ave_‰om_bÆ_node
(
	`li°_back
(&
bÆs
));

852 
uöt64_t
 
ovîlﬂd
;

854 
ovîlﬂd
 = 
‰om
->
tx_byãs
 - 
to
->tx_bytes;

855 i‡(
ovîlﬂd
 < 
to
->
tx_byãs
 >> 5 || overload < 100000) {

864 
e
 = 
	`choo£_íåy_to_migøã
(
‰om
, 
to
->
tx_byãs
);

865 i‡(
e
) {

866 
	`b⁄d_shi·_lﬂd
(
e
, 
to
, 
ègs
);

873 
	`li°_ªmove
(&
e
->
li°_node
);

876 
	`ªö£π_bÆ
(&
bÆs
, 
‰om
);

877 
	`ªö£π_bÆ
(&
bÆs
, 
to
);

881 
	`li°_ªmove
(&
‰om
->
bÆ_node
);

888 
e
 = &
b⁄d
->
hash
[0];É <&b⁄d->hash[
BOND_MASK
];É++) {

889 
e
->
tx_byãs
 /= 2;

890 i‡(!
e
->
tx_byãs
) {

891 
e
->
¶ave
 = 
NULL
;

894 
	}
}

898 
b⁄d
 *

899 
	$b⁄d_föd
(c⁄° *
«me
)

901 
b⁄d
 *bond;

903 
	`HMAP_FOR_EACH_WITH_HASH
 (
b⁄d
, 
hm≠_node
, 
	`hash_°rög
(
«me
, 0),

904 &
Æl_b⁄ds
) {

905 i‡(!
	`°rcmp
(
b⁄d
->
«me
,Çame)) {

906  
b⁄d
;

909  
NULL
;

910 
	}
}

912 
b⁄d_¶ave
 *

913 
	$b⁄d_lookup_¶ave
(
b⁄d
 *b⁄d, c⁄° *
¶ave_«me
)

915 
b⁄d_¶ave
 *
¶ave
;

917 
	`HMAP_FOR_EACH
 (
¶ave
, 
hm≠_node
, &
b⁄d
->
¶aves
) {

918 i‡(!
	`°rcmp
(
¶ave
->
«me
, 
¶ave_«me
)) {

919  
¶ave
;

922  
NULL
;

923 
	}
}

926 
	$b⁄d_unix˘l_li°
(
unix˘l_c⁄n
 *
c⁄n
,

927 
¨gc
 
OVS_UNUSED
, c⁄° *
¨gv
[] OVS_UNUSED,

928 *
aux
 
OVS_UNUSED
)

930 
ds
 d†
DS_EMPTY_INITIALIZER
;

931 c⁄° 
b⁄d
 *bond;

933 
	`ds_put_c°r
(&
ds
, "bond\ttype\tslaves\n");

935 
	`HMAP_FOR_EACH
 (
b⁄d
, 
hm≠_node
, &
Æl_b⁄ds
) {

936 c⁄° 
b⁄d_¶ave
 *
¶ave
;

937 
size_t
 
i
;

939 
	`ds_put_f‹m©
(&
ds
, "%s\t%s\t",

940 
b⁄d
->
«me
, 
	`b⁄d_mode_to_°rög
(b⁄d->
bÆ™˚
));

942 
i
 = 0;

943 
	`HMAP_FOR_EACH
 (
¶ave
, 
hm≠_node
, &
b⁄d
->
¶aves
) {

944 i‡(
i
++ > 0) {

945 
	`ds_put_c°r
(&
ds
, ", ");

947 
	`ds_put_c°r
(&
ds
, 
¶ave
->
«me
);

949 
	`ds_put_ch¨
(&
ds
, '\n');

951 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, 
	`ds_c°r
(&
ds
));

952 
	`ds_de°roy
(&
ds
);

953 
	}
}

956 
	$b⁄d_¥öt_dëaûs
(
ds
 *ds, c⁄° 
b⁄d
 *bond)

958 
shash
 
¶ave_shash
 = 
	`SHASH_INITIALIZER
(&slave_shash);

959 c⁄° 
shash_node
 **
s‹ãd_¶aves
 = 
NULL
;

960 c⁄° 
b⁄d_¶ave
 *
¶ave
;

961 
i
;

963 
	`ds_put_f‹m©
(
ds
, "---- %†----\n", 
b⁄d
->
«me
);

964 
	`ds_put_f‹m©
(
ds
, "bond_mode: %s\n",

965 
	`b⁄d_mode_to_°rög
(
b⁄d
->
bÆ™˚
));

967 
	`ds_put_f‹m©
(
ds
, "b⁄d-hash-basis: %"
PRIu32
"\n", 
b⁄d
->
basis
);

969 
	`ds_put_f‹m©
(
ds
, "updñay: %d ms\n", 
b⁄d
->
updñay
);

970 
	`ds_put_f‹m©
(
ds
, "downdñay: %d ms\n", 
b⁄d
->
downdñay
);

972 i‡(
	`b⁄d_is_bÆ™˚d
(
b⁄d
)) {

973 
	`ds_put_f‹m©
(
ds
, "nextÑebalance: %lld ms\n",

974 
b⁄d
->
√xt_ªbÆ™˚
 - 
	`time_m£c
());

977 
	`ds_put_c°r
(
ds
, "lacp_status: ");

978 
b⁄d
->
œ˝_°©us
) {

979 
LACP_NEGOTIATED
:

980 
	`ds_put_c°r
(
ds
, "negotiated\n");

982 
LACP_CONFIGURED
:

983 
	`ds_put_c°r
(
ds
, "configured\n");

985 
LACP_DISABLED
:

986 
	`ds_put_c°r
(
ds
, "off\n");

989 
	`ds_put_c°r
(
ds
, "<unknown>\n");

993 
	`HMAP_FOR_EACH
 (
¶ave
, 
hm≠_node
, &
b⁄d
->
¶aves
) {

994 
	`shash_add
(&
¶ave_shash
, 
¶ave
->
«me
, slave);

996 
s‹ãd_¶aves
 = 
	`shash_s‹t
(&
¶ave_shash
);

998 
i
 = 0; i < 
	`shash_cou¡
(&
¶ave_shash
); i++) {

999 
b⁄d_íåy
 *
be
;

1001 
¶ave
 = 
s‹ãd_¶aves
[
i
]->
d©a
;

1004 
	`ds_put_f‹m©
(
ds
, "\nslave %s: %s\n",

1005 
¶ave
->
«me
, sœve->
íabÀd
 ? "enabled" : "disabled");

1006 i‡(
¶ave
 =
b⁄d
->
a˘ive_¶ave
) {

1007 
	`ds_put_c°r
(
ds
, "\tactive slave\n");

1009 i‡(
¶ave
->
dñay_expúes
 !
LLONG_MAX
) {

1010 
	`ds_put_f‹m©
(
ds
, "\t%sÉxpires in %lld ms\n",

1011 
¶ave
->
íabÀd
 ? "downdelay" : "updelay",

1012 
¶ave
->
dñay_expúes
 - 
	`time_m£c
());

1015 
	`ds_put_f‹m©
(
ds
, "\tmay_enable: %s\n",

1016 
¶ave
->
may_íabÀ
 ? "true" : "false");

1018 i‡(!
	`b⁄d_is_bÆ™˚d
(
b⁄d
)) {

1023 
be
 = 
b⁄d
->
hash
; bê<&b⁄d->hash[
BOND_MASK
]; be++) {

1024 
hash
 = 
be
 - 
b⁄d
->hash;

1026 i‡(
be
->
¶ave
 != slave) {

1030 
	`ds_put_f‹m©
(
ds
, "\thash %d: %"
PRIu64
" kBÜoad\n",

1031 
hash
, 
be
->
tx_byãs
 / 1024);

1036 
	`shash_de°roy
(&
¶ave_shash
);

1037 
	`‰ì
(
s‹ãd_¶aves
);

1038 
	`ds_put_c°r
(
ds
, "\n");

1039 
	}
}

1042 
	$b⁄d_unix˘l_show
(
unix˘l_c⁄n
 *
c⁄n
,

1043 
¨gc
, c⁄° *
¨gv
[],

1044 *
aux
 
OVS_UNUSED
)

1046 
ds
 d†
DS_EMPTY_INITIALIZER
;

1048 i‡(
¨gc
 > 1) {

1049 c⁄° 
b⁄d
 *b⁄d = 
	`b⁄d_föd
(
¨gv
[1]);

1051 i‡(!
b⁄d
) {

1052 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, "no such bond");

1055 
	`b⁄d_¥öt_dëaûs
(&
ds
, 
b⁄d
);

1057 c⁄° 
b⁄d
 *bond;

1059 
	`HMAP_FOR_EACH
 (
b⁄d
, 
hm≠_node
, &
Æl_b⁄ds
) {

1060 
	`b⁄d_¥öt_dëaûs
(&
ds
, 
b⁄d
);

1064 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, 
	`ds_c°r
(&
ds
));

1065 
	`ds_de°roy
(&
ds
);

1066 
	}
}

1069 
	$b⁄d_unix˘l_migøã
(
unix˘l_c⁄n
 *
c⁄n
,

1070 
¨gc
 
OVS_UNUSED
, c⁄° *
¨gv
[],

1071 *
aux
 
OVS_UNUSED
)

1073 c⁄° *
b⁄d_s
 = 
¨gv
[1];

1074 c⁄° *
hash_s
 = 
¨gv
[2];

1075 c⁄° *
¶ave_s
 = 
¨gv
[3];

1076 
b⁄d
 *bond;

1077 
b⁄d_¶ave
 *
¶ave
;

1078 
b⁄d_íåy
 *
íåy
;

1079 
hash
;

1081 
b⁄d
 = 
	`b⁄d_föd
(
b⁄d_s
);

1082 i‡(!
b⁄d
) {

1083 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, "no such bond");

1087 i‡(
b⁄d
->
bÆ™˚
 !
BM_SLB
) {

1088 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, "notán SLB bond");

1092 i‡(
	`°r•n
(
hash_s
, "0123456789"Ë=
	`°æí
(hash_s)) {

1093 
hash
 = 
	`©oi
(
hash_s
Ë& 
BOND_MASK
;

1095 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, "bad hash");

1099 
¶ave
 = 
	`b⁄d_lookup_¶ave
(
b⁄d
, 
¶ave_s
);

1100 i‡(!
¶ave
) {

1101 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, "no such slave");

1105 i‡(!
¶ave
->
íabÀd
) {

1106 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, "cannot migrateÅo disabled slave");

1110 
íåy
 = &
b⁄d
->
hash
[hash];

1111 
	`èg_£t_add
(&
b⁄d
->
unix˘l_ègs
, 
íåy
->
èg
);

1112 
íåy
->
¶ave
 = slave;

1113 
íåy
->
èg
 = 
	`èg_¸óã_øndom
();

1114 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, "migrated");

1115 
	}
}

1118 
	$b⁄d_unix˘l_£t_a˘ive_¶ave
(
unix˘l_c⁄n
 *
c⁄n
,

1119 
¨gc
 
OVS_UNUSED
, c⁄° *
¨gv
[],

1120 *
aux
 
OVS_UNUSED
)

1122 c⁄° *
b⁄d_s
 = 
¨gv
[1];

1123 c⁄° *
¶ave_s
 = 
¨gv
[2];

1124 
b⁄d
 *bond;

1125 
b⁄d_¶ave
 *
¶ave
;

1127 
b⁄d
 = 
	`b⁄d_föd
(
b⁄d_s
);

1128 i‡(!
b⁄d
) {

1129 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, "no such bond");

1133 
¶ave
 = 
	`b⁄d_lookup_¶ave
(
b⁄d
, 
¶ave_s
);

1134 i‡(!
¶ave
) {

1135 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, "no such slave");

1139 i‡(!
¶ave
->
íabÀd
) {

1140 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, "cannot make disabled slaveáctive");

1144 i‡(
b⁄d
->
a˘ive_¶ave
 !
¶ave
) {

1145 
	`èg_£t_add
(&
b⁄d
->
unix˘l_ègs
, 
	`b⁄d_gë_a˘ive_¶ave_èg
(bond));

1146 
b⁄d
->
a˘ive_¶ave
 = 
¶ave
;

1147 
b⁄d
->
a˘ive_¶ave
->
èg
 = 
	`èg_¸óã_øndom
();

1148 
	`VLOG_INFO
("bond %s:áctive interface isÇow %s",

1149 
b⁄d
->
«me
, 
¶ave
->name);

1150 
b⁄d
->
£nd_À¨nög_∑ckës
 = 
åue
;

1151 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, "done");

1153 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, "no change");

1155 
	}
}

1158 
	$íabÀ_¶ave
(
unix˘l_c⁄n
 *
c⁄n
, c⁄° *
¨gv
[], 
boﬁ
 
íabÀ
)

1160 c⁄° *
b⁄d_s
 = 
¨gv
[1];

1161 c⁄° *
¶ave_s
 = 
¨gv
[2];

1162 
b⁄d
 *bond;

1163 
b⁄d_¶ave
 *
¶ave
;

1165 
b⁄d
 = 
	`b⁄d_föd
(
b⁄d_s
);

1166 i‡(!
b⁄d
) {

1167 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, "no such bond");

1171 
¶ave
 = 
	`b⁄d_lookup_¶ave
(
b⁄d
, 
¶ave_s
);

1172 i‡(!
¶ave
) {

1173 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, "no such slave");

1177 
	`b⁄d_íabÀ_¶ave
(
¶ave
, 
íabÀ
, &
b⁄d
->
unix˘l_ègs
);

1178 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, 
íabÀ
 ? "enabled" : "disabled");

1179 
	}
}

1182 
	$b⁄d_unix˘l_íabÀ_¶ave
(
unix˘l_c⁄n
 *
c⁄n
,

1183 
¨gc
 
OVS_UNUSED
, c⁄° *
¨gv
[],

1184 *
aux
 
OVS_UNUSED
)

1186 
	`íabÀ_¶ave
(
c⁄n
, 
¨gv
, 
åue
);

1187 
	}
}

1190 
	$b⁄d_unix˘l_dißbÀ_¶ave
(
unix˘l_c⁄n
 *
c⁄n
,

1191 
¨gc
 
OVS_UNUSED
, c⁄° *
¨gv
[],

1192 *
aux
 
OVS_UNUSED
)

1194 
	`íabÀ_¶ave
(
c⁄n
, 
¨gv
, 
Ál£
);

1195 
	}
}

1198 
	$b⁄d_unix˘l_hash
(
unix˘l_c⁄n
 *
c⁄n
, 
¨gc
, c⁄° *
¨gv
[],

1199 *
aux
 
OVS_UNUSED
)

1201 c⁄° *
mac_s
 = 
¨gv
[1];

1202 c⁄° *
vœn_s
 = 
¨gc
 > 2 ? 
¨gv
[2] : 
NULL
;

1203 c⁄° *
basis_s
 = 
¨gc
 > 3 ? 
¨gv
[3] : 
NULL
;

1204 
uöt8_t
 
mac
[
ETH_ADDR_LEN
];

1205 
uöt8_t
 
hash
;

1206 *
hash_c°r
;

1207 
vœn
;

1208 
uöt32_t
 
basis
;

1210 i‡(
vœn_s
) {

1211 i‡(
	`ssˇnf
(
vœn_s
, "%u", &
vœn
) != 1) {

1212 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, "invalid vlan");

1216 
vœn
 = 0;

1219 i‡(
basis_s
) {

1220 i‡(
	`ssˇnf
(
basis_s
, "%"
PRIu32
, &
basis
) != 1) {

1221 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, "invalid basis");

1225 
basis
 = 0;

1228 i‡(
	`ssˇnf
(
mac_s
, 
ETH_ADDR_SCAN_FMT
, 
	`ETH_ADDR_SCAN_ARGS
(
mac
))

1229 =
ETH_ADDR_SCAN_COUNT
) {

1230 
hash
 = 
	`b⁄d_hash_§c
(
mac
, 
vœn
, 
basis
Ë& 
BOND_MASK
;

1232 
hash_c°r
 = 
	`xa•rötf
("%u", 
hash
);

1233 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, 
hash_c°r
);

1234 
	`‰ì
(
hash_c°r
);

1236 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, "invalid mac");

1238 
	}
}

1241 
	$b⁄d_öô
()

1243 
	`unix˘l_comm™d_ªgi°î
("b⁄d/li°", "", 0, 0, 
b⁄d_unix˘l_li°
, 
NULL
);

1244 
	`unix˘l_comm™d_ªgi°î
("b⁄d/show", "[p‹t]", 0, 1, 
b⁄d_unix˘l_show
,

1245 
NULL
);

1246 
	`unix˘l_comm™d_ªgi°î
("bond/migrate", "port hash slave", 3, 3,

1247 
b⁄d_unix˘l_migøã
, 
NULL
);

1248 
	`unix˘l_comm™d_ªgi°î
("bond/set-active-slave", "port slave", 2, 2,

1249 
b⁄d_unix˘l_£t_a˘ive_¶ave
, 
NULL
);

1250 
	`unix˘l_comm™d_ªgi°î
("bond/enable-slave", "port slave", 2, 2,

1251 
b⁄d_unix˘l_íabÀ_¶ave
, 
NULL
);

1252 
	`unix˘l_comm™d_ªgi°î
("bond/disable-slave", "port slave", 2, 2,

1253 
b⁄d_unix˘l_dißbÀ_¶ave
, 
NULL
);

1254 
	`unix˘l_comm™d_ªgi°î
("bond/hash", "mac [vlan] [basis]", 1, 3,

1255 
b⁄d_unix˘l_hash
, 
NULL
);

1256 
	}
}

1259 
	$b⁄d_íåy_ª£t
(
b⁄d
 *bond)

1261 i‡(
b⁄d
->
bÆ™˚
 !
BM_AB
) {

1262 
size_t
 
hash_Àn
 = (
BOND_MASK
 + 1Ë*  *
b⁄d
->
hash
;

1264 i‡(!
b⁄d
->
hash
) {

1265 
b⁄d
->
hash
 = 
	`xmÆloc
(
hash_Àn
);

1267 
	`mem£t
(
b⁄d
->
hash
, 0, 
hash_Àn
);

1269 
b⁄d
->
√xt_ªbÆ™˚
 = 
	`time_m£c
(Ë+ b⁄d->
ªbÆ™˚_öãrvÆ
;

1271 
	`‰ì
(
b⁄d
->
hash
);

1272 
b⁄d
->
hash
 = 
NULL
;

1274 
	}
}

1276 
b⁄d_¶ave
 *

1277 
	$b⁄d_¶ave_lookup
(
b⁄d
 *b⁄d, c⁄° *
¶ave_
)

1279 
b⁄d_¶ave
 *
¶ave
;

1281 
	`HMAP_FOR_EACH_IN_BUCKET
 (
¶ave
, 
hm≠_node
, 
	`hash_poöãr
(
¶ave_
, 0),

1282 &
b⁄d
->
¶aves
) {

1283 i‡(
¶ave
->
aux
 =
¶ave_
) {

1284  
¶ave
;

1288  
NULL
;

1289 
	}
}

1292 
	$b⁄d_íabÀ_¶ave
(
b⁄d_¶ave
 *
¶ave
, 
boﬁ
 
íabÀ
, 
èg_£t
 *
ègs
)

1294 
b⁄d
 *b⁄d = 
¶ave
->bond;

1295 
¶ave
->
dñay_expúes
 = 
LLONG_MAX
;

1296 i‡(
íabÀ
 !
¶ave
->
íabÀd
) {

1297 
¶ave
->
íabÀd
 = 
íabÀ
;

1298 i‡(!
¶ave
->
íabÀd
) {

1299 
	`VLOG_WARN
("öãrÁ˚ %s: dißbÀd", 
¶ave
->
«me
);

1300 i‡(
ègs
) {

1301 
	`èg_£t_add
(
ègs
, 
¶ave
->
èg
);

1304 
	`VLOG_WARN
("öãrÁ˚ %s:É«bÀd", 
¶ave
->
«me
);

1305 
¶ave
->
èg
 = 
	`èg_¸óã_øndom
();

1308 i‡(
b⁄d
->
bÆ™˚
 =
BM_STABLE
) {

1309 
b⁄d
->
b⁄d_ªvÆid©e
 = 
åue
;

1312 
	}
}

1315 
	$b⁄d_lök_°©us_upd©e
(
b⁄d_¶ave
 *
¶ave
, 
èg_£t
 *
ègs
)

1317 
b⁄d
 *b⁄d = 
¶ave
->bond;

1318 
boﬁ
 
up
;

1320 
up
 = 
	`√tdev_gë_ˇºõr
(
¶ave
->
√tdev
Ë&& sœve->
may_íabÀ
;

1321 i‡((
up
 =
¶ave
->
íabÀd
Ë!(¶ave->
dñay_expúes
 =
LLONG_MAX
)) {

1322 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(5, 20);

1323 
	`VLOG_INFO_RL
(&
æ
, "interface %s:Üink state %s",

1324 
¶ave
->
«me
, 
up
 ? "up" : "down");

1325 i‡(
up
 =
¶ave
->
íabÀd
) {

1326 
¶ave
->
dñay_expúes
 = 
LLONG_MAX
;

1327 
	`VLOG_INFO_RL
(&
æ
, "interface %s: willÇot be %s",

1328 
¶ave
->
«me
, 
up
 ? "disabled" : "enabled");

1330 
dñay
 = (
b⁄d
->
œ˝_°©us
 !
LACP_DISABLED
 ? 0

1331 : 
up
 ? 
b⁄d
->
updñay
 : b⁄d->
downdñay
);

1332 
¶ave
->
dñay_expúes
 = 
	`time_m£c
(Ë+ 
dñay
;

1333 i‡(
dñay
) {

1334 
	`VLOG_INFO_RL
(&
æ
, "interface %s: will be %s if it stays %s "

1336 
¶ave
->
«me
,

1337 
up
 ? "enabled" : "disabled",

1338 
up
 ? "up" : "down",

1339 
dñay
);

1344 i‡(
	`time_m£c
(Ë>
¶ave
->
dñay_expúes
) {

1345 
	`b⁄d_íabÀ_¶ave
(
¶ave
, 
up
, 
ègs
);

1347 
	}
}

1350 
	$b⁄d_hash_§c
(c⁄° 
uöt8_t
 
mac
[
ETH_ADDR_LEN
], 
uöt16_t
 
vœn
, 
uöt32_t
 
basis
)

1352  
	`hash_3w‹ds
(
	`hash_byãs
(
mac
, 
ETH_ADDR_LEN
, 0), 
vœn
, 
basis
);

1353 
	}
}

1356 
	$b⁄d_hash_t˝
(c⁄° 
Êow
 *Êow, 
uöt16_t
 
vœn
, 
uöt32_t
 
basis
)

1358 
Êow
 
hash_Êow
 = *flow;

1359 
hash_Êow
.
vœn_tci
 = 
	`ht⁄s
(
vœn
);

1364  
	`Êow_hash_symmëric_l4
(&
hash_Êow
, 
basis
);

1365 
	}
}

1368 
	$b⁄d_hash
(c⁄° 
b⁄d
 *b⁄d, c⁄° 
Êow
 *Êow, 
uöt16_t
 
vœn
)

1370 
	`as£π
(
b⁄d
->
bÆ™˚
 =
BM_TCP
 || b⁄d->bÆ™˚ =
BM_SLB
);

1372  (
b⁄d
->
bÆ™˚
 =
BM_TCP


1373 ? 
	`b⁄d_hash_t˝
(
Êow
, 
vœn
, 
b⁄d
->
basis
)

1374 : 
	`b⁄d_hash_§c
(
Êow
->
dl_§c
, 
vœn
, 
b⁄d
->
basis
));

1375 
	}
}

1377 
b⁄d_íåy
 *

1378 
	$lookup_b⁄d_íåy
(c⁄° 
b⁄d
 *b⁄d, c⁄° 
Êow
 *flow,

1379 
uöt16_t
 
vœn
)

1381  &
b⁄d
->
hash
[
	`b⁄d_hash
(b⁄d, 
Êow
, 
vœn
Ë& 
BOND_MASK
];

1382 
	}
}

1390 
b⁄d_¶ave
 *

1391 
	$choo£_°b_¶ave
(c⁄° 
b⁄d
 *b⁄d, 
uöt32_t
 
Êow_hash
)

1393 
b⁄d_¶ave
 *
be°
, *
¶ave
;

1394 
uöt32_t
 
be°_hash
;

1396 
be°
 = 
NULL
;

1397 
be°_hash
 = 0;

1398 
	`HMAP_FOR_EACH
 (
¶ave
, 
hm≠_node
, &
b⁄d
->
¶aves
) {

1399 i‡(
¶ave
->
íabÀd
) {

1400 
uöt32_t
 
hash
;

1402 
hash
 = 
	`hash_2w‹ds
(
Êow_hash
, 
¶ave
->
°b_id
);

1403 i‡(!
be°
 || 
hash
 > 
be°_hash
) {

1404 
be°
 = 
¶ave
;

1405 
be°_hash
 = 
hash
;

1410  
be°
;

1411 
	}
}

1413 
b⁄d_¶ave
 *

1414 
	$choo£_ouçut_¶ave
(c⁄° 
b⁄d
 *b⁄d, c⁄° 
Êow
 *flow,

1415 
uöt16_t
 
vœn
, 
èg_ty≥
 *
ègs
)

1417 
b⁄d_íåy
 *
e
;

1419 i‡(
b⁄d
->
œ˝_°©us
 =
LACP_CONFIGURED
) {

1422  
NULL
;

1425 
b⁄d
->
bÆ™˚
) {

1426 
BM_AB
:

1427  
b⁄d
->
a˘ive_¶ave
;

1429 
BM_STABLE
:

1430  
	`choo£_°b_¶ave
(
b⁄d
, 
	`b⁄d_hash_t˝
(
Êow
, 
vœn
, b⁄d->
basis
));

1432 
BM_TCP
:

1433 i‡(
b⁄d
->
œ˝_°©us
 !
LACP_NEGOTIATED
) {

1435  
NULL
;

1438 
BM_SLB
:

1439 i‡(!
	`b⁄d_is_bÆ™˚d
(
b⁄d
)) {

1440  
	`choo£_°b_¶ave
(
b⁄d
, 
	`b⁄d_hash
(b⁄d, 
Êow
, 
vœn
));

1442 
e
 = 
	`lookup_b⁄d_íåy
(
b⁄d
, 
Êow
, 
vœn
);

1443 i‡(!
e
->
¶ave
 || !e->¶ave->
íabÀd
) {

1444 
e
->
¶ave
 = 
	`CONTAINER_OF
(
	`hm≠_øndom_node
(&
b⁄d
->
¶aves
),

1445 
b⁄d_¶ave
, 
hm≠_node
);

1446 i‡(!
e
->
¶ave
->
íabÀd
) {

1447 
e
->
¶ave
 = 
b⁄d
->
a˘ive_¶ave
;

1449 
e
->
èg
 = 
	`èg_¸óã_øndom
();

1451 *
ègs
 |
e
->
èg
;

1452  
e
->
¶ave
;

1455 
	`NOT_REACHED
();

1457 
	}
}

1459 
b⁄d_¶ave
 *

1460 
	$b⁄d_choo£_¶ave
(c⁄° 
b⁄d
 *bond)

1462 
b⁄d_¶ave
 *
¶ave
, *
be°
;

1465 
	`HMAP_FOR_EACH
 (
¶ave
, 
hm≠_node
, &
b⁄d
->
¶aves
) {

1466 i‡(
¶ave
->
íabÀd
) {

1467  
¶ave
;

1473 
be°
 = 
NULL
;

1474 
	`HMAP_FOR_EACH
 (
¶ave
, 
hm≠_node
, &
b⁄d
->
¶aves
) {

1475 i‡(
¶ave
->
dñay_expúes
 !
LLONG_MAX


1476 && 
¶ave
->
may_íabÀ


1477 && (!
be°
 || 
¶ave
->
dñay_expúes
 < best->delay_expires)) {

1478 
be°
 = 
¶ave
;

1481  
be°
;

1482 
	}
}

1485 
	$b⁄d_choo£_a˘ive_¶ave
(
b⁄d
 *b⁄d, 
èg_£t
 *
ègs
)

1487 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(5, 20);

1488 
b⁄d_¶ave
 *
ﬁd_a˘ive_¶ave
 = 
b⁄d
->
a˘ive_¶ave
;

1490 
b⁄d
->
a˘ive_¶ave
 = 
	`b⁄d_choo£_¶ave
(bond);

1491 i‡(
b⁄d
->
a˘ive_¶ave
) {

1492 i‡(
b⁄d
->
a˘ive_¶ave
->
íabÀd
) {

1493 
	`VLOG_INFO_RL
(&
æ
, "bond %s:áctive interface isÇow %s",

1494 
b⁄d
->
«me
, b⁄d->
a˘ive_¶ave
->name);

1496 
	`VLOG_INFO_RL
(&
æ
, "bond %s:áctive interface isÇow %s, skipping "

1498 "íabÀd)", 
b⁄d
->
«me
, b⁄d->
a˘ive_¶ave
->name,

1499 
b⁄d
->
a˘ive_¶ave
->
dñay_expúes
 - 
	`time_m£c
());

1500 
	`b⁄d_íabÀ_¶ave
(
b⁄d
->
a˘ive_¶ave
, 
åue
, 
ègs
);

1503 i‡(!
ﬁd_a˘ive_¶ave
) {

1504 
	`èg_£t_add
(
ègs
, 
b⁄d
->
no_¶aves_èg
);

1507 
b⁄d
->
£nd_À¨nög_∑ckës
 = 
åue
;

1508 } i‡(
ﬁd_a˘ive_¶ave
) {

1509 
	`VLOG_WARN_RL
(&
æ
, "b⁄d %s:áŒ i¡îÁ˚†dißbÀd", 
b⁄d
->
«me
);

1511 
	}
}

1515 
èg_ty≥


1516 
	$b⁄d_gë_a˘ive_¶ave_èg
(c⁄° 
b⁄d
 *bond)

1518  (
b⁄d
->
a˘ive_¶ave


1519 ? 
b⁄d
->
a˘ive_¶ave
->
èg


1520 : 
b⁄d
->
no_¶aves_èg
);

1521 
	}
}

1526 
	$b⁄d_upd©e_Áke_¶ave_°©s
(
b⁄d
 *bond)

1528 
√tdev_°©s
 
b⁄d_°©s
;

1529 
b⁄d_¶ave
 *
¶ave
;

1530 
√tdev
 *
b⁄d_dev
;

1532 
	`mem£t
(&
b⁄d_°©s
, 0,  bond_stats);

1534 
	`HMAP_FOR_EACH
 (
¶ave
, 
hm≠_node
, &
b⁄d
->
¶aves
) {

1535 
√tdev_°©s
 
¶ave_°©s
;

1537 i‡(!
	`√tdev_gë_°©s
(
¶ave
->
√tdev
, &
¶ave_°©s
)) {

1547 
b⁄d_°©s
.
tx_∑ckës
 +
¶ave_°©s
.
rx_∑ckës
;

1548 
b⁄d_°©s
.
tx_byãs
 +
¶ave_°©s
.
rx_byãs
;

1549 
b⁄d_°©s
.
rx_∑ckës
 +
¶ave_°©s
.
tx_∑ckës
;

1550 
b⁄d_°©s
.
rx_byãs
 +
¶ave_°©s
.
tx_byãs
;

1554 i‡(!
	`√tdev_›í
(
b⁄d
->
«me
, "sy°em", &
b⁄d_dev
)) {

1555 
	`√tdev_£t_°©s
(
b⁄d_dev
, &
b⁄d_°©s
);

1556 
	`√tdev_˛o£
(
b⁄d_dev
);

1558 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/bond.h

17 #i‚de‡
BOND_H


18 
	#BOND_H
 1

	)

20 
	~<°dboﬁ.h
>

21 
	~<°döt.h
>

23 
	~"∑ckës.h
"

24 
	~"èg.h
"

26 
	gÊow
;

27 
	g√tdev
;

28 
	goÂbuf
;

29 
	gœ˝_°©us
;

32 
	eb⁄d_mode
 {

33 
	mBM_TCP
,

34 
	mBM_SLB
,

35 
	mBM_STABLE
,

36 
	mBM_AB


39 
boﬁ
 
b⁄d_mode_‰om_°rög
(
b⁄d_mode
 *, const *);

40 c⁄° *
b⁄d_mode_to_°rög
(
b⁄d_mode
);

43 
	sb⁄d_£âögs
 {

44 *
	m«me
;

45 
uöt32_t
 
	mbasis
;

48 
b⁄d_mode
 
	mbÆ™˚
;

49 
	mªbÆ™˚_öãrvÆ
;

53 
	mup_dñay
;

54 
	mdown_dñay
;

57 
boﬁ
 
	mÁke_iÁ˚
;

61 
b⁄d_öô
();

64 
b⁄d
 *
b⁄d_¸óã
(c⁄° 
b⁄d_£âögs
 *);

65 
b⁄d_de°roy
(
b⁄d
 *);

67 
boﬁ
 
b⁄d_ªc⁄figuª
(
b⁄d
 *, c⁄° 
b⁄d_£âögs
 *);

68 
b⁄d_¶ave_ªgi°î
(
b⁄d
 *, *
¶ave_
,

69 
uöt32_t
 
°abÀ_id
, 
√tdev
 *);

70 
b⁄d_¶ave_£t_√tdev
(
b⁄d
 *, *
¶ave_
, 
√tdev
 *);

71 
b⁄d_¶ave_uƒegi°î
(
b⁄d
 *, c⁄° *
¶ave
);

73 
b⁄d_run
(
b⁄d
 *, 
èg_£t
 *, 
œ˝_°©us
);

74 
b⁄d_waô
(
b⁄d
 *);

76 
b⁄d_¶ave_£t_may_íabÀ
(
b⁄d
 *, *
¶ave_
, 
boﬁ
 
may_íabÀ
);

79 
boﬁ
 
b⁄d_should_£nd_À¨nög_∑ckës
(
b⁄d
 *);

80 
oÂbuf
 *
b⁄d_compo£_À¨nög_∑ckë
(
b⁄d
 *,

81 c⁄° 
uöt8_t
 
ëh_§c
[
ETH_ADDR_LEN
],

82 
uöt16_t
 
vœn
, **
p‹t_aux
);

85 
	eb⁄d_vîdi˘
 {

86 
	mBV_ACCEPT
,

87 
	mBV_DROP
,

88 
	mBV_DROP_IF_MOVED


90 
b⁄d_vîdi˘
 
b⁄d_check_admissibûôy
(
b⁄d
 *, c⁄° *
¶ave_
,

91 c⁄° 
uöt8_t
 
ëh_d°
[
ETH_ADDR_LEN
],

92 
èg_ty≥
 *);

93 *
b⁄d_choo£_ouçut_¶ave
(
b⁄d
 *,

94 c⁄° 
Êow
 *, 
uöt16_t
 
vœn
, 
èg_ty≥
 *);

97 
b⁄d_accou¡
(
b⁄d
 *, c⁄° 
Êow
 *, 
uöt16_t
 
vœn
,

98 
uöt64_t
 
n_byãs
);

99 
b⁄d_ªbÆ™˚
(
b⁄d
 *, 
èg_£t
 *);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/bundle.c

16 
	~<c⁄fig.h
>

18 
	~"bundÀ.h
"

20 
	~<¨∑/öë.h
>

21 
	~<öây≥s.h
>

23 
	~"dy«mic-°rög.h
"

24 
	~"mu…ù©h.h
"

25 
	~"mëa-Êow.h
"

26 
	~"nx-m©ch.h
"

27 
	~"oÂbuf.h
"

28 
	~"oÂ-a˘i⁄s.h
"

29 
	~"oÂ-îr‹s.h
"

30 
	~"oÂ-utû.h
"

31 
	~"›íÊow/nicúa-ext.h
"

32 
	~"vlog.h
"

34 
	#BUNDLE_MAX_SLAVES
 2048

	)

36 
VLOG_DEFINE_THIS_MODULE
(
bundÀ
);

38 
uöt16_t


39 
execuã_ab
(c⁄° 
oÂa˘_bundÀ
 *
bundÀ
,

40 
	$boﬁ
 (*
¶ave_íabÀd
)(
uöt16_t
 
oÂ_p‹t
, *
aux
), *aux)

42 
size_t
 
i
;

44 
i
 = 0; i < 
bundÀ
->
n_¶aves
; i++) {

45 
uöt16_t
 
¶ave
 = 
bundÀ
->
¶aves
[
i
];

46 i‡(
	`¶ave_íabÀd
(
¶ave
, 
aux
)) {

47  
¶ave
;

51  
OFPP_NONE
;

52 
	}
}

54 
uöt16_t


55 
execuã_hrw
(c⁄° 
oÂa˘_bundÀ
 *
bundÀ
, c⁄° 
Êow
 *flow,

56 
	$boﬁ
 (*
¶ave_íabÀd
)(
uöt16_t
 
oÂ_p‹t
, *
aux
), *aux)

58 
uöt32_t
 
Êow_hash
, 
be°_hash
;

59 
be°
, 
i
;

61 
Êow_hash
 = 
	`Êow_hash_fõlds
(
Êow
, 
bundÀ
->
fõlds
, bundÀ->
basis
);

62 
be°
 = -1;

63 
be°_hash
 = 0;

65 
i
 = 0; i < 
bundÀ
->
n_¶aves
; i++) {

66 i‡(
	`¶ave_íabÀd
(
bundÀ
->
¶aves
[
i
], 
aux
)) {

67 
uöt32_t
 
hash
 = 
	`hash_2w‹ds
(
i
, 
Êow_hash
);

69 i‡(
be°
 < 0 || 
hash
 > 
be°_hash
) {

70 
be°_hash
 = 
hash
;

71 
be°
 = 
i
;

76  
be°
 >0 ? 
bundÀ
->
¶aves
[be°] : 
OFPP_NONE
;

77 
	}
}

82 
uöt16_t


83 
bundÀ_execuã
(c⁄° 
oÂa˘_bundÀ
 *
bundÀ
, c⁄° 
Êow
 *flow,

84 
	$boﬁ
 (*
¶ave_íabÀd
)(
uöt16_t
 
oÂ_p‹t
, *
aux
), *aux)

86 
bundÀ
->
Æg‹ôhm
) {

87 
NX_BD_ALG_HRW
:

88  
	`execuã_hrw
(
bundÀ
, 
Êow
, 
¶ave_íabÀd
, 
aux
);

90 
NX_BD_ALG_ACTIVE_BACKUP
:

91  
	`execuã_ab
(
bundÀ
, 
¶ave_íabÀd
, 
aux
);

94 
	`NOT_REACHED
();

96 
	}
}

102 
oÂîr


103 
	$bundÀ_‰om_›íÊow
(c⁄° 
nx_a˘i⁄_bundÀ
 *
«b
,

104 
oÂbuf
 *
oÂa˘s
)

106 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 5);

107 
oÂa˘_bundÀ
 *
bundÀ
;

108 
uöt16_t
 
subty≥
;

109 
uöt32_t
 
¶ave_ty≥
;

110 
size_t
 
¶aves_size
, 
i
;

111 
oÂîr
 
îr‹
;

113 
bundÀ
 = 
	`oÂa˘_put_BUNDLE
(
oÂa˘s
);

115 
subty≥
 = 
	`¡ohs
(
«b
->subtype);

116 
bundÀ
->
n_¶aves
 = 
	`¡ohs
(
«b
->n_slaves);

117 
bundÀ
->
basis
 = 
	`¡ohs
(
«b
->basis);

118 
bundÀ
->
fõlds
 = 
	`¡ohs
(
«b
->fields);

119 
bundÀ
->
Æg‹ôhm
 = 
	`¡ohs
(
«b
->algorithm);

120 
¶ave_ty≥
 = 
	`¡ohl
(
«b
->slave_type);

121 
¶aves_size
 = 
	`¡ohs
(
«b
->
Àn
) -  *nab;

123 
îr‹
 = 
OFPERR_OFPBAC_BAD_ARGUMENT
;

124 i‡(!
	`Êow_hash_fõlds_vÆid
(
bundÀ
->
fõlds
)) {

125 
	`VLOG_WARN_RL
(&
æ
, "unsuµ‹ãd fõld†%d", (Ë
bundÀ
->
fõlds
);

126 } i‡(
bundÀ
->
n_¶aves
 > 
BUNDLE_MAX_SLAVES
) {

127 
	`VLOG_WARN_RL
(&
æ
, "too may slaves");

128 } i‡(
bundÀ
->
Æg‹ôhm
 !
NX_BD_ALG_HRW


129 && 
bundÀ
->
Æg‹ôhm
 !
NX_BD_ALG_ACTIVE_BACKUP
) {

130 
	`VLOG_WARN_RL
(&
æ
, "unsuµ‹ãdálg‹ôhm %d", (Ë
bundÀ
->
Æg‹ôhm
);

131 } i‡(
¶ave_ty≥
 !
NXM_OF_IN_PORT
) {

132 
	`VLOG_WARN_RL
(&
æ
, "unsuµ‹ãd sœvêty≥ %"
PRIu16
, 
¶ave_ty≥
);

134 
îr‹
 = 0;

137 i‡(!
	`is_Æl_zîos
(
«b
->
zîo
, Çab->zero)) {

138 
	`VLOG_WARN_RL
(&
æ
, "reserved field isÇonzero");

139 
îr‹
 = 
OFPERR_OFPBAC_BAD_ARGUMENT
;

142 i‡(
subty≥
 =
NXAST_BUNDLE
 && (
«b
->
ofs_nbôs
 ||Çab->
d°
)) {

143 
	`VLOG_WARN_RL
(&
æ
, "bundleáction hasÇonzeroÑeserved fields");

144 
îr‹
 = 
OFPERR_OFPBAC_BAD_ARGUMENT
;

147 i‡(
subty≥
 =
NXAST_BUNDLE_LOAD
) {

148 
bundÀ
->
d°
.
fõld
 = 
	`mf_‰om_nxm_hódî
(
	`¡ohl
(
«b
->dst));

149 
bundÀ
->
d°
.
ofs
 = 
	`nxm_decode_ofs
(
«b
->
ofs_nbôs
);

150 
bundÀ
->
d°
.
n_bôs
 = 
	`nxm_decode_n_bôs
(
«b
->
ofs_nbôs
);

152 i‡(
bundÀ
->
d°
.
n_bôs
 < 16) {

153 
	`VLOG_WARN_RL
(&
æ
, "bundle_loadáctionÑequiresátÜeast 16 bit "

155 
îr‹
 = 
OFPERR_OFPBAC_BAD_ARGUMENT
;

159 i‡(
¶aves_size
 < 
bundÀ
->
n_¶aves
 * (
ovs_be16
)) {

160 
	`VLOG_WARN_RL
(&
æ
, "Nicú®a˘i⁄ %"
PRIu16
" only has %zu bytes "

162 "%"
PRIu16
" sœves.", 
subty≥
, 
¶aves_size
,

163 
bundÀ
->
n_¶aves
 * (
ovs_be16
), bundle->n_slaves);

164 
îr‹
 = 
OFPERR_OFPBAC_BAD_LEN
;

167 
i
 = 0; i < 
bundÀ
->
n_¶aves
; i++) {

168 
uöt16_t
 
oÂ_p‹t
 = 
	`¡ohs
(((
ovs_be16
 *)(
«b
 + 1))[
i
]);

169 
	`oÂbuf_put
(
oÂa˘s
, &
oÂ_p‹t
,  ofp_port);

172 
bundÀ
 = 
oÂa˘s
->
l2
;

173 
	`oÂa˘_upd©e_Àn
(
oÂa˘s
, &
bundÀ
->
oÂa˘
);

175 i‡(!
îr‹
) {

176 
îr‹
 = 
	`bundÀ_check
(
bundÀ
, 
OFPP_MAX
, 
NULL
);

178  
îr‹
;

179 
	}
}

181 
oÂîr


182 
	$bundÀ_check
(c⁄° 
oÂa˘_bundÀ
 *
bundÀ
, 
max_p‹ts
,

183 c⁄° 
Êow
 *flow)

185 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 5);

186 
size_t
 
i
;

188 i‡(
bundÀ
->
d°
.
fõld
) {

189 
oÂîr
 
îr‹
 = 
	`mf_check_d°
(&
bundÀ
->
d°
, 
Êow
);

190 i‡(
îr‹
) {

191  
îr‹
;

195 
i
 = 0; i < 
bundÀ
->
n_¶aves
; i++) {

196 
uöt16_t
 
oÂ_p‹t
 = 
bundÀ
->
¶aves
[
i
];

197 
oÂîr
 
îr‹
;

199 
îr‹
 = 
	`oÂutû_check_ouçut_p‹t
(
oÂ_p‹t
, 
max_p‹ts
);

200 i‡(
îr‹
) {

201 
	`VLOG_WARN_RL
(&
æ
, "övÆid sœvê%"
PRIu16
, 
oÂ_p‹t
);

202  
îr‹
;

208 i‡(
oÂ_p‹t
 =
OFPP_CONTROLLER
) {

209 
	`VLOG_WARN_RL
(&
æ
, "unsupported controller slave");

210  
OFPERR_OFPBAC_BAD_OUT_PORT
;

215 
	}
}

218 
	$bundÀ_to_nxa°
(c⁄° 
oÂa˘_bundÀ
 *
bundÀ
, 
oÂbuf
 *
›íÊow
)

220 
¶aves_Àn
 = 
	`ROUND_UP
(2 * 
bundÀ
->
n_¶aves
, 
OFP_ACTION_ALIGN
);

221 
nx_a˘i⁄_bundÀ
 *
«b
;

222 
ovs_be16
 *
¶aves
;

223 
size_t
 
i
;

225 
«b
 = (
bundÀ
->
d°
.
fõld


226 ? 
	`oÂutû_put_NXAST_BUNDLE_LOAD
(
›íÊow
)

227 : 
	`oÂutû_put_NXAST_BUNDLE
(
›íÊow
));

228 
«b
->
Àn
 = 
	`ht⁄s
(
	`¡ohs
“ab->ÀnË+ 
¶aves_Àn
);

229 
«b
->
Æg‹ôhm
 = 
	`ht⁄s
(
bundÀ
->algorithm);

230 
«b
->
fõlds
 = 
	`ht⁄s
(
bundÀ
->fields);

231 
«b
->
basis
 = 
	`ht⁄s
(
bundÀ
->basis);

232 
«b
->
¶ave_ty≥
 = 
	`ht⁄l
(
NXM_OF_IN_PORT
);

233 
«b
->
n_¶aves
 = 
	`ht⁄s
(
bundÀ
->n_slaves);

234 i‡(
bundÀ
->
d°
.
fõld
) {

235 
«b
->
ofs_nbôs
 = 
	`nxm_ícode_ofs_nbôs
(
bundÀ
->
d°
.
ofs
,

236 
bundÀ
->
d°
.
n_bôs
);

237 
«b
->
d°
 = 
	`ht⁄l
(
bundÀ
->d°.
fõld
->
nxm_hódî
);

240 
¶aves
 = 
	`oÂbuf_put_zîos
(
›íÊow
, 
¶aves_Àn
);

241 
i
 = 0; i < 
bundÀ
->
n_¶aves
; i++) {

242 
¶aves
[
i
] = 
	`ht⁄s
(
bundÀ
->slaves[i]);

244 
	}
}

248 
	$bundÀ_∑r£__
(c⁄° *
s
, **
ßve_±r
,

249 c⁄° *
fõlds
, c⁄° *
basis
, c⁄° *
Æg‹ôhm
,

250 c⁄° *
¶ave_ty≥
, c⁄° *
d°
,

251 c⁄° *
¶ave_dñim
, 
oÂbuf
 *
oÂa˘s
)

253 
oÂa˘_bundÀ
 *
bundÀ
;

255 i‡(!
¶ave_dñim
) {

256 
	`ovs_Áèl
(0, "%s:ÇŸÉnoughárgumít†tÿbundÀá˘i⁄", 
s
);

259 i‡(
	`°rˇ£cmp
(
¶ave_dñim
, "slaves")) {

260 
	`ovs_Áèl
(0, "%s: missing slave delimiter,Éxpected `slaves' got `%s'",

261 
s
, 
¶ave_dñim
);

264 
bundÀ
 = 
	`oÂa˘_put_BUNDLE
(
oÂa˘s
);

267 
uöt16_t
 
¶ave_p‹t
;

268 *
¶ave
;

270 
¶ave
 = 
	`°πok_r
(
NULL
, ", []", 
ßve_±r
);

271 i‡(!
¶ave
 || 
bundÀ
->
n_¶aves
 >
BUNDLE_MAX_SLAVES
) {

275 i‡(!
	`oÂutû_p‹t_‰om_°rög
(
¶ave
, &
¶ave_p‹t
)) {

276 
	`ovs_Áèl
(0, "%s: badÖ‹ànumbî", 
¶ave
);

278 
	`oÂbuf_put
(
oÂa˘s
, &
¶ave_p‹t
,  slave_port);

280 
bundÀ
 = 
oÂa˘s
->
l2
;

281 
bundÀ
->
n_¶aves
++;

283 
	`oÂa˘_upd©e_Àn
(
oÂa˘s
, &
bundÀ
->
oÂa˘
);

285 
bundÀ
->
basis
 = 
	`©oi
(basis);

287 i‡(!
	`°rˇ£cmp
(
fõlds
, "eth_src")) {

288 
bundÀ
->
fõlds
 = 
NX_HASH_FIELDS_ETH_SRC
;

289 } i‡(!
	`°rˇ£cmp
(
fõlds
, "symmetric_l4")) {

290 
bundÀ
->
fõlds
 = 
NX_HASH_FIELDS_SYMMETRIC_L4
;

292 
	`ovs_Áèl
(0, "%s: unknow¿fõld†`%s'", 
s
, 
fõlds
);

295 i‡(!
	`°rˇ£cmp
(
Æg‹ôhm
, "active_backup")) {

296 
bundÀ
->
Æg‹ôhm
 = 
NX_BD_ALG_ACTIVE_BACKUP
;

297 } i‡(!
	`°rˇ£cmp
(
Æg‹ôhm
, "hrw")) {

298 
bundÀ
->
Æg‹ôhm
 = 
NX_BD_ALG_HRW
;

300 
	`ovs_Áèl
(0, "%s: unknow¿Æg‹ôhm `%s'", 
s
, 
Æg‹ôhm
);

303 i‡(
	`°rˇ£cmp
(
¶ave_ty≥
, "ofport")) {

304 
	`ovs_Áèl
(0, "%s: unknow¿¶ave_ty≥ `%s'", 
s
, 
¶ave_ty≥
);

307 i‡(
d°
) {

308 
	`mf_∑r£_subfõld
(&
bundÀ
->
d°
, dst);

310 
	}
}

315 
	$bundÀ_∑r£
(c⁄° *
s
, 
oÂbuf
 *
oÂa˘s
)

317 *
fõlds
, *
basis
, *
Æg‹ôhm
, *
¶ave_ty≥
, *
¶ave_dñim
;

318 *
tok°r
, *
ßve_±r
;

320 
ßve_±r
 = 
NULL
;

321 
tok°r
 = 
	`x°rdup
(
s
);

322 
fõlds
 = 
	`°πok_r
(
tok°r
, ", ", &
ßve_±r
);

323 
basis
 = 
	`°πok_r
(
NULL
, ", ", &
ßve_±r
);

324 
Æg‹ôhm
 = 
	`°πok_r
(
NULL
, ", ", &
ßve_±r
);

325 
¶ave_ty≥
 = 
	`°πok_r
(
NULL
, ", ", &
ßve_±r
);

326 
¶ave_dñim
 = 
	`°πok_r
(
NULL
, ": ", &
ßve_±r
);

328 
	`bundÀ_∑r£__
(
s
, &
ßve_±r
, 
fõlds
, 
basis
, 
Æg‹ôhm
, 
¶ave_ty≥
, 
NULL
,

329 
¶ave_dñim
, 
oÂa˘s
);

330 
	`‰ì
(
tok°r
);

331 
	}
}

336 
	$bundÀ_∑r£_lﬂd
(c⁄° *
s
, 
oÂbuf
 *
oÂa˘s
)

338 *
fõlds
, *
basis
, *
Æg‹ôhm
, *
¶ave_ty≥
, *
d°
, *
¶ave_dñim
;

339 *
tok°r
, *
ßve_±r
;

341 
ßve_±r
 = 
NULL
;

342 
tok°r
 = 
	`x°rdup
(
s
);

343 
fõlds
 = 
	`°πok_r
(
tok°r
, ", ", &
ßve_±r
);

344 
basis
 = 
	`°πok_r
(
NULL
, ", ", &
ßve_±r
);

345 
Æg‹ôhm
 = 
	`°πok_r
(
NULL
, ", ", &
ßve_±r
);

346 
¶ave_ty≥
 = 
	`°πok_r
(
NULL
, ", ", &
ßve_±r
);

347 
d°
 = 
	`°πok_r
(
NULL
, ", ", &
ßve_±r
);

348 
¶ave_dñim
 = 
	`°πok_r
(
NULL
, ": ", &
ßve_±r
);

350 
	`bundÀ_∑r£__
(
s
, &
ßve_±r
, 
fõlds
, 
basis
, 
Æg‹ôhm
, 
¶ave_ty≥
, 
d°
,

351 
¶ave_dñim
, 
oÂa˘s
);

353 
	`‰ì
(
tok°r
);

354 
	}
}

358 
	$bundÀ_f‹m©
(c⁄° 
oÂa˘_bundÀ
 *
bundÀ
, 
ds
 *
s
)

360 c⁄° *
a˘i⁄
, *
fõlds
, *
Æg‹ôhm
;

361 
size_t
 
i
;

363 
fõlds
 = 
	`Êow_hash_fõlds_to_°r
(
bundÀ
->fields);

365 
bundÀ
->
Æg‹ôhm
) {

366 
NX_BD_ALG_HRW
:

367 
Æg‹ôhm
 = "hrw";

369 
NX_BD_ALG_ACTIVE_BACKUP
:

370 
Æg‹ôhm
 = "active_backup";

373 
Æg‹ôhm
 = "<unknown>";

376 
a˘i⁄
 = 
bundÀ
->
d°
.
fõld
 ? "bundle_load" : "bundle";

378 
	`ds_put_f‹m©
(
s
, "%s(%s,%"
PRIu16
",%s,%s,", 
a˘i⁄
, 
fõlds
,

379 
bundÀ
->
basis
, 
Æg‹ôhm
, "ofport");

381 i‡(
bundÀ
->
d°
.
fõld
) {

382 
	`mf_f‹m©_subfõld
(&
bundÀ
->
d°
, 
s
);

383 
	`ds_put_c°r
(
s
, ",");

386 
	`ds_put_c°r
(
s
, "slaves:");

387 
i
 = 0; i < 
bundÀ
->
n_¶aves
; i++) {

388 i‡(
i
) {

389 
	`ds_put_c°r
(
s
, ",");

392 
	`oÂutû_f‹m©_p‹t
(
bundÀ
->
¶aves
[
i
], 
s
);

395 
	`ds_put_c°r
(
s
, ")");

396 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/bundle.h

16 #i‚de‡
BUNDLE_H


17 
	#BUNDLE_H
 1

	)

19 
	~<¨∑/öë.h
>

20 
	~<°dboﬁ.h
>

21 
	~<°ddef.h
>

22 
	~<°döt.h
>

24 
	~"oÂ-îr‹s.h
"

25 
	~"›íÊow/nicúa-ext.h
"

26 
	~"›ívswôch/ty≥s.h
"

28 
	gds
;

29 
	gÊow
;

30 
	goÂa˘_bundÀ
;

31 
	goÂbuf
;

37 
uöt16_t
 
bundÀ_execuã
(c⁄° 
oÂa˘_bundÀ
 *, c⁄° 
Êow
 *,

38 
	$boﬁ
 (*
¶ave_íabÀd
)(
uöt16_t
 
oÂ_p‹t
, *
aux
),

39 *
aux
);

40 
oÂîr
 
	`bundÀ_‰om_›íÊow
(c⁄° 
nx_a˘i⁄_bundÀ
 *,

41 
oÂbuf
 *
oÂa˘
);

42 
oÂîr
 
	`bundÀ_check
(c⁄° 
oÂa˘_bundÀ
 *, 
max_p‹ts
,

43 c⁄° 
Êow
 *);

44 
	`bundÀ_to_nxa°
(c⁄° 
oÂa˘_bundÀ
 *, 
oÂbuf
 *
of10
);

45 
	`bundÀ_∑r£
(c⁄° *, 
oÂbuf
 *
oÂa˘s
);

46 
	`bundÀ_∑r£_lﬂd
(c⁄° *, 
oÂbuf
 *
oÂa˘s
);

47 
	`bundÀ_f‹m©
(c⁄° 
oÂa˘_bundÀ
 *, 
ds
 *);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/byte-order.h

16 #i‚de‡
BYTE_ORDER_H


17 
	#BYTE_ORDER_H
 1

	)

19 
	~<¨∑/öë.h
>

20 
	~<sys/ty≥s.h
>

21 
	~<öây≥s.h
>

22 
	~"›ívswôch/ty≥s.h
"

24 #i‚de‡
__CHECKER__


25 
ölöe
 
ovs_be64


26 
	$ht⁄Œ
(
uöt64_t
 
n
)

28  
	`ht⁄l
(1Ë=1 ? 
n
 : ((
uöt64_t
) htonl(n) << 32) | htonl(n >> 32);

29 
	}
}

31 
ölöe
 
uöt64_t


32 
	$¡ohŒ
(
ovs_be64
 
n
)

34  
	`ht⁄l
(1Ë=1 ? 
n
 : ((
uöt64_t
Ë
	`¡ohl
(n) << 32) |Çtohl(n >> 32);

35 
	}
}

39 
ovs_be64
 
ht⁄Œ
(
uöt64_t
);

40 
uöt64_t
 
¡ohŒ
(
ovs_be64
);

46 #i‡
deföed
(
WORDS_BIGENDIAN
Ë|| 
__CHECKER__


47 
	#CONSTANT_HTONS
(
VALUE
Ë((
OVS_FORCE
 
ovs_be16
Ë((VALUEË& 0xffff))

	)

48 
	#CONSTANT_HTONL
(
VALUE
Ë((
OVS_FORCE
 
ovs_be32
Ë((VALUEË& 0xffffffff))

	)

49 
	#CONSTANT_HTONLL
(
VALUE
) \

50 ((
OVS_FORCE
 
ovs_be64
Ë((
VALUE
Ë& 
	`UINT64_C
(0xffffffffffffffff)))

	)

52 
	#CONSTANT_HTONS
(
VALUE
) \

53 (((((
ovs_be16
Ë(
VALUE
)) & 0xff00) >> 8) | \

54 ((((
ovs_be16
Ë(
VALUE
)Ë& 0x00ffË<< 8))

	)

55 
	#CONSTANT_HTONL
(
VALUE
) \

56 (((((
ovs_be32
Ë(
VALUE
)) & 0x000000ff) << 24) | \

57 ((((
ovs_be32
Ë(
VALUE
)) & 0x0000ff00) << 8) | \

58 ((((
ovs_be32
Ë(
VALUE
)) & 0x00ff0000) >> 8) | \

59 ((((
ovs_be32
Ë(
VALUE
)Ë& 0xff000000Ë>> 24))

	)

60 
	#CONSTANT_HTONLL
(
VALUE
) \

61 (((((
ovs_be64
Ë(
VALUE
)Ë& 
	`UINT64_C
(0x00000000000000ff)) << 56) | \

62 ((((
ovs_be64
Ë(
VALUE
)Ë& 
	`UINT64_C
(0x000000000000ff00)) << 40) | \

63 ((((
ovs_be64
Ë(
VALUE
)Ë& 
	`UINT64_C
(0x0000000000ff0000)) << 24) | \

64 ((((
ovs_be64
Ë(
VALUE
)Ë& 
	`UINT64_C
(0x00000000ff000000)) << 8) | \

65 ((((
ovs_be64
Ë(
VALUE
)Ë& 
	`UINT64_C
(0x000000ff00000000)) >> 8) | \

66 ((((
ovs_be64
Ë(
VALUE
)Ë& 
	`UINT64_C
(0x0000ff0000000000)) >> 24) | \

67 ((((
ovs_be64
Ë(
VALUE
)Ë& 
	`UINT64_C
(0x00ff000000000000)) >> 40) | \

68 ((((
ovs_be64
Ë(
VALUE
)Ë& 
	`UINT64_C
(0xff00000000000000)Ë>> 56))

	)

	@/home/lsch/mytest/openvswitch-1.9.0/lib/byteq.c

16 
	~<c⁄fig.h
>

17 
	~"byãq.h
"

18 
	~<as£π.h
>

19 
	~<î∫o.h
>

20 
	~<°rög.h
>

21 
	~<uni°d.h
>

22 
	~"utû.h
"

25 
BUILD_ASSERT_DECL
(!(
BYTEQ_SIZE
 & (BYTEQ_SIZE - 1)));

29 
	$byãq_öô
(
byãq
 *
q
)

31 
q
->
hód
 = q->
èû
 = 0;

32 
	}
}

36 
	$byãq_u£d
(c⁄° 
byãq
 *
q
)

38  
q
->
hód
 - q->
èû
;

39 
	}
}

43 
	$byãq_avaû
(c⁄° 
byãq
 *
q
)

45  
BYTEQ_SIZE
 - 
	`byãq_u£d
(
q
);

46 
	}
}

50 
boﬁ


51 
	$byãq_is_em±y
(c⁄° 
byãq
 *
q
)

53  !
	`byãq_u£d
(
q
);

54 
	}
}

58 
boﬁ


59 
	$byãq_is_fuŒ
(c⁄° 
byãq
 *
q
)

61  !
	`byãq_avaû
(
q
);

62 
	}
}

66 
	$byãq_put
(
byãq
 *
q
, 
uöt8_t
 
c
)

68 
	`as£π
(!
	`byãq_is_fuŒ
(
q
));

69 *
	`byãq_hód
(
q
Ë
c
;

70 
q
->
hód
++;

71 
	}
}

76 
	$byãq_puä
(
byãq
 *
q
, c⁄° *
p_
, 
size_t
 
n
)

78 c⁄° 
uöt8_t
 *
p
 = 
p_
;

79 
	`as£π
(
	`byãq_avaû
(
q
Ë>
n
);

80 
n
 > 0) {

81 
size_t
 
chunk
 = 
	`MIN
(
n
, 
	`byãq_hódroom
(
q
));

82 
	`mem˝y
(
	`byãq_hód
(
q
), 
p
, 
chunk
);

83 
	`byãq_adv™˚_hód
(
q
, 
chunk
);

84 
p
 +
chunk
;

85 
n
 -
chunk
;

87 
	}
}

92 
	$byãq_put_°rög
(
byãq
 *
q
, c⁄° *
s
)

94 
	`byãq_puä
(
q
, 
s
, 
	`°æí
(s));

95 
	}
}

99 
uöt8_t


100 
	$byãq_gë
(
byãq
 *
q
)

102 
uöt8_t
 
c
;

103 
	`as£π
(!
	`byãq_is_em±y
(
q
));

104 
c
 = *
	`byãq_èû
(
q
);

105 
q
->
èû
++;

106  
c
;

107 
	}
}

113 
	$byãq_wrôe
(
byãq
 *
q
, 
fd
)

115 !
	`byãq_is_em±y
(
q
)) {

116 
ssize_t
 
n
 = 
	`wrôe
(
fd
, 
	`byãq_èû
(
q
), 
	`byãq_èûroom
(q));

117 i‡(
n
 > 0) {

118 
	`byãq_adv™˚_èû
(
q
, 
n
);

120 
	`as£π
(
n
 < 0);

121  
î∫o
;

125 
	}
}

132 
	$byãq_ªad
(
byãq
 *
q
, 
fd
)

134 !
	`byãq_is_fuŒ
(
q
)) {

135 
ssize_t
 
n
 = 
	`ªad
(
fd
, 
	`byãq_hód
(
q
), 
	`byãq_hódroom
(q));

136 i‡(
n
 > 0) {

137 
	`byãq_adv™˚_hód
(
q
, 
n
);

139  !
n
 ? 
EOF
 : 
î∫o
;

143 
	}
}

148 
	$byãq_èûroom
(c⁄° 
byãq
 *
q
)

150 
u£d
 = 
	`byãq_u£d
(
q
);

151 
èû_to_íd
 = 
BYTEQ_SIZE
 - (
q
->
èû
 & (BYTEQ_SIZE - 1));

152  
	`MIN
(
u£d
, 
èû_to_íd
);

153 
	}
}

157 c⁄° 
uöt8_t
 *

158 
	$byãq_èû
(c⁄° 
byãq
 *
q
)

160  &
q
->
buf„r
[q->
èû
 & (
BYTEQ_SIZE
 - 1)];

161 
	}
}

166 
	$byãq_adv™˚_èû
(
byãq
 *
q
, 
n
)

168 
	`as£π
(
	`byãq_èûroom
(
q
Ë>
n
);

169 
q
->
èû
 +
n
;

170 
	}
}

174 
uöt8_t
 *

175 
	$byãq_hód
(
byãq
 *
q
)

177  &
q
->
buf„r
[q->
hód
 & (
BYTEQ_SIZE
 - 1)];

178 
	}
}

183 
	$byãq_hódroom
(c⁄° 
byãq
 *
q
)

185 
avaû
 = 
	`byãq_avaû
(
q
);

186 
hód_to_íd
 = 
BYTEQ_SIZE
 - (
q
->
hód
 & (BYTEQ_SIZE - 1));

187  
	`MIN
(
avaû
, 
hód_to_íd
);

188 
	}
}

193 
	$byãq_adv™˚_hód
(
byãq
 *
q
, 
n
)

195 
	`as£π
(
	`byãq_hódroom
(
q
Ë>
n
);

196 
q
->
hód
 +
n
;

197 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/byteq.h

16 #i‚de‡
BYTEQ_H


17 
	#BYTEQ_H
 1

	)

19 
	~<°dboﬁ.h
>

20 
	~<°ddef.h
>

21 
	~<°döt.h
>

24 
	#BYTEQ_SIZE
 512

	)

27 
	sbyãq
 {

28 
uöt8_t
 
	mbuf„r
[
BYTEQ_SIZE
];

29 
	mhód
;

30 
	mèû
;

33 
byãq_öô
(
byãq
 *);

34 
byãq_u£d
(c⁄° 
byãq
 *);

35 
byãq_avaû
(c⁄° 
byãq
 *);

36 
boﬁ
 
byãq_is_em±y
(c⁄° 
byãq
 *);

37 
boﬁ
 
byãq_is_fuŒ
(c⁄° 
byãq
 *);

38 
byãq_put
(
byãq
 *, 
uöt8_t
 
c
);

39 
byãq_puä
(
byãq
 *, c⁄° *, 
size_t
 
n
);

40 
byãq_put_°rög
(
byãq
 *, const *);

41 
uöt8_t
 
byãq_gë
(
byãq
 *);

42 
byãq_wrôe
(
byãq
 *, 
fd
);

43 
byãq_ªad
(
byãq
 *, 
fd
);

45 
uöt8_t
 *
byãq_hód
(
byãq
 *);

46 
byãq_hódroom
(c⁄° 
byãq
 *);

47 
byãq_adv™˚_hód
(
byãq
 *, 
n
);

48 
byãq_èûroom
(c⁄° 
byãq
 *);

49 c⁄° 
uöt8_t
 *
byãq_èû
(c⁄° 
byãq
 *);

50 
byãq_adv™˚_èû
(
byãq
 *, 
n
);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/cfm.c

17 
	~<c⁄fig.h
>

18 
	~"cfm.h
"

20 
	~<as£π.h
>

21 
	~<°döt.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

25 
	~"byã-‹dî.h
"

26 
	~"dy«mic-°rög.h
"

27 
	~"Êow.h
"

28 
	~"hash.h
"

29 
	~"hm≠.h
"

30 
	~"oÂbuf.h
"

31 
	~"∑ckës.h
"

32 
	~"pﬁl-lo›.h
"

33 
	~"øndom.h
"

34 
	~"timî.h
"

35 
	~"timevÆ.h
"

36 
	~"unix˘l.h
"

37 
	~"vlog.h
"

39 
VLOG_DEFINE_THIS_MODULE
(
cfm
);

41 
	#CFM_MAX_RMPS
 256

	)

44 c⁄° 
uöt8_t
 
	gëh_addr_ccm
[6] = { 0x01, 0x80, 0xC2, 0x00, 0x00, 0x30 };

45 c⁄° 
uöt8_t
 
	gëh_addr_ccm_x
[6] = {

49 
	#ETH_TYPE_CFM
 0x8902

	)

58 
	#CCM_LEN
 75

	)

59 
	#CCM_ACCEPT_LEN
 74

	)

60 
	#CCM_MAID_LEN
 48

	)

61 
	#CCM_OPCODE
 1

	)

62 
	#CCM_RDI_MASK
 0x80

	)

63 
	#CFM_HEALTH_INTERVAL
 6

	)

64 
	sccm
 {

65 
uöt8_t
 
	mmdÀvñ_vîsi⁄
;

66 
uöt8_t
 
	m›code
;

67 
uöt8_t
 
	mÊags
;

68 
uöt8_t
 
	mév_off£t
;

69 
ovs_be32
 
	m£q
;

70 
ovs_be16
 
	mmpid
;

71 
uöt8_t
 
	mmaid
[
CCM_MAID_LEN
];

74 
ovs_be16
 
	möãrvÆ_ms_x
;

75 
ovs_be64
 
	mmpid64
;

76 
uöt8_t
 
	m›down
;

77 
uöt8_t
 
	mzîo
[5];

80 
uöt8_t
 
	míd_év
;

81 } 
__©åibuã__
((
∑cked
));

82 
BUILD_ASSERT_DECL
(
CCM_LEN
 =(
ccm
));

84 
	scfm
 {

85 *
	m«me
;

86 
hm≠_node
 
	mhm≠_node
;

88 
uöt64_t
 
	mmpid
;

89 
boﬁ
 
	mcheck_äl_key
;

90 
boﬁ
 
	mexãnded
;

91 
boﬁ
 
	mboŸed
;

92 
cfm_Áu…_ªas⁄
 
	mÁu…
;

93 
cfm_Áu…_ªas⁄
 
	mªcv_Áu…
;

95 
boﬁ
 
	m›up
;

96 
boﬁ
 
	mªmŸe_›up
;

98 
	mÁu…_ovîride
;

101 
uöt32_t
 
	m£q
;

102 
uöt8_t
 
	mccm_öãrvÆ
;

103 
	mccm_öãrvÆ_ms
;

104 
uöt16_t
 
	mccm_vœn
;

106 
uöt8_t
 
	mccm_p˝
;

107 
uöt8_t
 
	mmaid
[
CCM_MAID_LEN
];

109 
timî
 
	mtx_timî
;

110 
timî
 
	mÁu…_timî
;

112 
hm≠
 
	mªmŸe_mps
;

116 
uöt64_t
 *
	mrmps_¨øy
;

117 
size_t
 
	mrmps_¨øy_Àn
;

119 
	mhó…h
;

121 
	mhó…h_öãrvÆ
;

123 
	mœ°_tx
;

128 
	sªmŸe_mp
 {

129 
uöt64_t
 
	mmpid
;

130 
hm≠_node
 
	mnode
;

132 
boﬁ
 
	mªcv
;

133 
boﬁ
 
	m›up
;

134 
uöt32_t
 
	m£q
;

135 
uöt8_t
 
	mnum_hó…h_ccm
;

137 
	mœ°_rx
;

141 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(20, 30);

142 
hm≠
 
	gÆl_cfms
 = 
HMAP_INITIALIZER
(&
Æl_cfms
);

144 
unix˘l_cb_func
 
	gcfm_unix˘l_show
;

145 
unix˘l_cb_func
 
	gcfm_unix˘l_£t_Áu…
;

147 c⁄° 
uöt8_t
 *

148 
	$cfm_ccm_addr
(c⁄° 
cfm
 *cfm)

150  
cfm
->
exãnded
 ? 
ëh_addr_ccm_x
 : 
ëh_addr_ccm
;

151 
	}
}

155 
	$cfm_Áu…_ªas⁄_to_°r
(
ªas⁄
) {

156 
ªas⁄
) {

157 
	#CFM_FAULT_REASON
(
NAME
, 
STR
Ë
CFM_FAULT_
##NAME:  #STR;

	)

158 
CFM_FAULT_REASONS


159 #unde‡
CFM_FAULT_REASON


162 
	}
}

165 
	$ds_put_cfm_Áu…
(
ds
 *ds, 
Áu…
)

167 
i
;

169 
i
 = 0; i < 
CFM_FAULT_N_REASONS
; i++) {

170 
ªas⁄
 = 1 << 
i
;

172 i‡(
Áu…
 & 
ªas⁄
) {

173 
	`ds_put_f‹m©
(
ds
, "%†", 
	`cfm_Áu…_ªas⁄_to_°r
(
ªas⁄
));

177 
	`ds_chomp
(
ds
, ' ');

178 
	}
}

181 
	$cfm_gíî©e_maid
(
cfm
 *cfm)

183 c⁄° *
ovs_md_«me
 = "ovs";

184 c⁄° *
ovs_ma_«me
 = "ovs";

185 
uöt8_t
 *
ma_p
;

186 
size_t
 
md_Àn
, 
ma_Àn
;

188 
	`mem£t
(
cfm
->
maid
, 0, 
CCM_MAID_LEN
);

190 
md_Àn
 = 
	`°æí
(
ovs_md_«me
);

191 
ma_Àn
 = 
	`°æí
(
ovs_ma_«me
);

193 
	`as£π
(
md_Àn
 && 
ma_Àn
 && md_À¿+ ma_À¿+ 4 <
CCM_MAID_LEN
);

195 
cfm
->
maid
[0] = 4;

196 
cfm
->
maid
[1] = 
md_Àn
;

197 
	`mem˝y
(&
cfm
->
maid
[2], 
ovs_md_«me
, 
md_Àn
);

199 
ma_p
 = 
cfm
->
maid
 + 2 + 
md_Àn
;

200 
ma_p
[0] = 2;

201 
ma_p
[1] = 
ma_Àn
;

202 
	`mem˝y
(&
ma_p
[2], 
ovs_ma_«me
, 
ma_Àn
);

203 
	}
}

206 
	$ccm_öãrvÆ_to_ms
(
uöt8_t
 
öãrvÆ
)

208 
öãrvÆ
) {

209 0: 
	`NOT_REACHED
();

217 : 
	`NOT_REACHED
();

220 
	`NOT_REACHED
();

221 
	}
}

224 
	$cfm_Áu…_öãrvÆ
(
cfm
 *cfm)

234  (
cfm
->
ccm_öãrvÆ_ms
 * 7) / 2;

235 
	}
}

237 
uöt8_t


238 
	$ms_to_ccm_öãrvÆ
(
öãrvÆ_ms
)

240 
uöt8_t
 
i
;

242 
i
 = 7; i > 0; i--) {

243 i‡(
	`ccm_öãrvÆ_to_ms
(
i
Ë<
öãrvÆ_ms
) {

244  
i
;

249 
	}
}

251 
uöt32_t


252 
	$hash_mpid
(
uöt64_t
 
mpid
)

254  
	`hash_byãs
(&
mpid
,  mpid, 0);

255 
	}
}

257 
boﬁ


258 
	$cfm_is_vÆid_mpid
(
boﬁ
 
exãnded
, 
uöt64_t
 
mpid
)

262  
mpid
 >1 && (
exãnded
 || mpid <= 8191);

263 
	}
}

265 
ªmŸe_mp
 *

266 
	$lookup_ªmŸe_mp
(c⁄° 
cfm
 *cfm, 
uöt64_t
 
mpid
)

268 
ªmŸe_mp
 *
rmp
;

270 
	`HMAP_FOR_EACH_IN_BUCKET
 (
rmp
, 
node
, 
	`hash_mpid
(
mpid
), &
cfm
->
ªmŸe_mps
) {

271 i‡(
rmp
->
mpid
 == mpid) {

272  
rmp
;

276  
NULL
;

277 
	}
}

280 
	$cfm_öô
()

282 
	`unix˘l_comm™d_ªgi°î
("cfm/show", "[öãrÁ˚]", 0, 1, 
cfm_unix˘l_show
,

283 
NULL
);

284 
	`unix˘l_comm™d_ªgi°î
("cfm/set-fault", "[interface]Çormal|false|true",

285 1, 2, 
cfm_unix˘l_£t_Áu…
, 
NULL
);

286 
	}
}

290 
cfm
 *

291 
	$cfm_¸óã
(c⁄° *
«me
)

293 
cfm
 *cfm;

295 
cfm
 = 
	`xzÆloc
( *cfm);

296 
cfm
->
«me
 = 
	`x°rdup
(name);

297 
	`hm≠_öô
(&
cfm
->
ªmŸe_mps
);

298 
	`cfm_gíî©e_maid
(
cfm
);

299 
	`hm≠_ö£π
(&
Æl_cfms
, &
cfm
->
hm≠_node
, 
	`hash_°rög
(cfm->
«me
, 0));

300 
cfm
->
ªmŸe_›up
 = 
åue
;

301 
cfm
->
Áu…_ovîride
 = -1;

302 
cfm
->
hó…h
 = -1;

303 
cfm
->
œ°_tx
 = 0;

304  
cfm
;

305 
	}
}

308 
	$cfm_de°roy
(
cfm
 *cfm)

310 
ªmŸe_mp
 *
rmp
, *
rmp_√xt
;

312 i‡(!
cfm
) {

316 
	`HMAP_FOR_EACH_SAFE
 (
rmp
, 
rmp_√xt
, 
node
, &
cfm
->
ªmŸe_mps
) {

317 
	`hm≠_ªmove
(&
cfm
->
ªmŸe_mps
, &
rmp
->
node
);

318 
	`‰ì
(
rmp
);

321 
	`hm≠_de°roy
(&
cfm
->
ªmŸe_mps
);

322 
	`hm≠_ªmove
(&
Æl_cfms
, &
cfm
->
hm≠_node
);

323 
	`‰ì
(
cfm
->
rmps_¨øy
);

324 
	`‰ì
(
cfm
->
«me
);

325 
	`‰ì
(
cfm
);

326 
	}
}

330 
	$cfm_run
(
cfm
 *cfm)

332 i‡(
	`timî_expúed
(&
cfm
->
Áu…_timî
)) {

333 
öãrvÆ
 = 
	`cfm_Áu…_öãrvÆ
(
cfm
);

334 
ªmŸe_mp
 *
rmp
, *
rmp_√xt
;

335 
boﬁ
 
ﬁd_cfm_Áu…
 = 
cfm
->
Áu…
;

337 
cfm
->
Áu…
 = cfm->
ªcv_Áu…
;

338 
cfm
->
ªcv_Áu…
 = 0;

340 
cfm
->
rmps_¨øy_Àn
 = 0;

341 
	`‰ì
(
cfm
->
rmps_¨øy
);

342 
cfm
->
rmps_¨øy
 = 
	`xmÆloc
(
	`hm≠_cou¡
(&cfm->
ªmŸe_mps
) *

343  *
cfm
->
rmps_¨øy
);

345 
cfm
->
ªmŸe_›up
 = 
åue
;

346 i‡(
cfm
->
hó…h_öãrvÆ
 =
CFM_HEALTH_INTERVAL
) {

352 i‡(
	`hm≠_cou¡
(&
cfm
->
ªmŸe_mps
) > 1) {

353 
cfm
->
hó…h
 = -1;

354 } i‡(
	`hm≠_is_em±y
(&
cfm
->
ªmŸe_mps
)) {

355 
cfm
->
hó…h
 = 0;

357 
exp_ccm_ªcvd
;

359 
rmp
 = 
	`CONTAINER_OF
(
	`hm≠_fú°
(&
cfm
->
ªmŸe_mps
),

360 
ªmŸe_mp
, 
node
);

361 
exp_ccm_ªcvd
 = (
CFM_HEALTH_INTERVAL
 * 7) / 2;

368 
cfm
->
hó…h
 = (
rmp
->
num_hó…h_ccm
 * 100Ë/ 
exp_ccm_ªcvd
;

369 
cfm
->
hó…h
 = 
	`MIN
(cfm->health, 100);

370 
rmp
->
num_hó…h_ccm
 = 0;

371 
	`as£π
(
cfm
->
hó…h
 >= 0 && cfm->health <= 100);

373 
cfm
->
hó…h_öãrvÆ
 = 0;

375 
cfm
->
hó…h_öãrvÆ
++;

377 
	`HMAP_FOR_EACH_SAFE
 (
rmp
, 
rmp_√xt
, 
node
, &
cfm
->
ªmŸe_mps
) {

379 i‡(!
rmp
->
ªcv
) {

380 
	`VLOG_INFO
("%s: Re˚ivedÇÿCCM from RMP %"
PRIu64
" inÅheÜast"

381 " %Œdms", 
cfm
->
«me
, 
rmp
->
mpid
,

382 
	`time_m£c
(Ë- 
rmp
->
œ°_rx
);

383 
	`hm≠_ªmove
(&
cfm
->
ªmŸe_mps
, &
rmp
->
node
);

384 
	`‰ì
(
rmp
);

386 
rmp
->
ªcv
 = 
Ál£
;

388 i‡(!
rmp
->
›up
) {

389 
cfm
->
ªmŸe_›up
 = 
rmp
->
›up
;

392 
cfm
->
rmps_¨øy
[cfm->
rmps_¨øy_Àn
++] = 
rmp
->
mpid
;

396 i‡(
	`hm≠_is_em±y
(&
cfm
->
ªmŸe_mps
)) {

397 
cfm
->
Áu…
 |
CFM_FAULT_RECV
;

400 i‡(
ﬁd_cfm_Áu…
 !
cfm
->
Áu…
 && !
	`VLOG_DROP_INFO
(&
æ
)) {

401 
ds
 d†
DS_EMPTY_INITIALIZER
;

403 
	`ds_put_c°r
(&
ds
, "from [");

404 
	`ds_put_cfm_Áu…
(&
ds
, 
ﬁd_cfm_Áu…
);

405 
	`ds_put_c°r
(&
ds
, "]Åo [");

406 
	`ds_put_cfm_Áu…
(&
ds
, 
cfm
->
Áu…
);

407 
	`ds_put_ch¨
(&
ds
, ']');

408 
	`VLOG_INFO
("%s: CFM fau…†ch™ged %s.", 
cfm
->
«me
, 
	`ds_c°r
(&
ds
));

409 
	`ds_de°roy
(&
ds
);

412 
cfm
->
boŸed
 = 
åue
;

413 
	`timî_£t_duøti⁄
(&
cfm
->
Áu…_timî
, 
öãrvÆ
);

414 
	`VLOG_DBG
("%s:Çew fau… i¡îvÆ", 
cfm
->
«me
);

416 
	}
}

420 
boﬁ


421 
	$cfm_should_£nd_ccm
(
cfm
 *cfm)

423  
	`timî_expúed
(&
cfm
->
tx_timî
);

424 
	}
}

429 
	$cfm_compo£_ccm
(
cfm
 *cfm, 
oÂbuf
 *
∑ckë
,

430 
uöt8_t
 
ëh_§c
[
ETH_ADDR_LEN
])

432 
uöt16_t
 
ccm_vœn
;

433 
ccm
 *ccm;

435 
	`timî_£t_duøti⁄
(&
cfm
->
tx_timî
, cfm->
ccm_öãrvÆ_ms
);

436 
	`ëh_compo£
(
∑ckë
, 
	`cfm_ccm_addr
(
cfm
), 
ëh_§c
, 
ETH_TYPE_CFM
,  *
ccm
);

438 
ccm_vœn
 = (
cfm
->ccm_vœ¿!
CFM_RANDOM_VLAN


439 ? 
cfm
->
ccm_vœn


440 : 
	`øndom_uöt16
());

441 
ccm_vœn
 = ccm_vœ¿& 
VLAN_VID_MASK
;

443 i‡(
ccm_vœn
 || 
cfm
->
ccm_p˝
) {

444 
uöt16_t
 
tci
 = 
ccm_vœn
 | (
cfm
->
ccm_p˝
 << 
VLAN_PCP_SHIFT
);

445 
	`ëh_push_vœn
(
∑ckë
, 
	`ht⁄s
(
tci
));

448 
ccm
 = 
∑ckë
->
l3
;

449 
ccm
->
mdÀvñ_vîsi⁄
 = 0;

450 
ccm
->
›code
 = 
CCM_OPCODE
;

451 
ccm
->
év_off£t
 = 70;

452 
ccm
->
£q
 = 
	`ht⁄l
(++
cfm
->seq);

453 
ccm
->
Êags
 = 
cfm
->
ccm_öãrvÆ
;

454 
	`mem˝y
(
ccm
->
maid
, 
cfm
->maid,  ccm->maid);

455 
	`mem£t
(
ccm
->
zîo
, 0,  ccm->zero);

456 
ccm
->
íd_év
 = 0;

458 i‡(
cfm
->
exãnded
) {

459 
ccm
->
mpid
 = 
	`ht⁄s
(
	`hash_mpid
(
cfm
->mpid));

460 
ccm
->
mpid64
 = 
	`ht⁄Œ
(
cfm
->
mpid
);

461 
ccm
->
›down
 = !
cfm
->
›up
;

463 
ccm
->
mpid
 = 
	`ht⁄s
(
cfm
->mpid);

464 
ccm
->
mpid64
 = 
	`ht⁄Œ
(0);

465 
ccm
->
›down
 = 0;

468 i‡(
cfm
->
ccm_öãrvÆ
 == 0) {

469 
	`as£π
(
cfm
->
exãnded
);

470 
ccm
->
öãrvÆ_ms_x
 = 
	`ht⁄s
(
cfm
->
ccm_öãrvÆ_ms
);

472 
ccm
->
öãrvÆ_ms_x
 = 
	`ht⁄s
(0);

475 i‡(
cfm
->
boŸed
 && 
	`hm≠_is_em±y
(&cfm->
ªmŸe_mps
)) {

476 
ccm
->
Êags
 |
CCM_RDI_MASK
;

479 i‡(
cfm
->
œ°_tx
) {

480 
dñay
 = 
	`time_m£c
(Ë- 
cfm
->
œ°_tx
;

481 i‡(
dñay
 > (
cfm
->
ccm_öãrvÆ_ms
 * 3 / 2)) {

482 
	`VLOG_WARN
("%s:Üong delay of %lldms (expected %dms) sending CCM"

483 " seq %"
PRIu32
, 
cfm
->
«me
, 
dñay
, cfm->
ccm_öãrvÆ_ms
,

484 
cfm
->
£q
);

487 
cfm
->
œ°_tx
 = 
	`time_m£c
();

488 
	}
}

491 
	$cfm_waô
(
cfm
 *cfm)

493 
	`timî_waô
(&
cfm
->
tx_timî
);

494 
	`timî_waô
(&
cfm
->
Áu…_timî
);

495 
	}
}

498 
boﬁ


499 
	$cfm_c⁄figuª
(
cfm
 *cfm, c⁄° 
cfm_£âögs
 *
s
)

501 
uöt8_t
 
öãrvÆ
;

502 
öãrvÆ_ms
;

504 i‡(!
	`cfm_is_vÆid_mpid
(
s
->
exãnded
, s->
mpid
Ë|| s->
öãrvÆ
 <= 0) {

505  
Ál£
;

508 
cfm
->
mpid
 = 
s
->mpid;

509 
cfm
->
check_äl_key
 = 
s
->check_tnl_key;

510 
cfm
->
exãnded
 = 
s
->extended;

511 
cfm
->
›up
 = 
s
->opup;

512 
öãrvÆ
 = 
	`ms_to_ccm_öãrvÆ
(
s
->interval);

513 
öãrvÆ_ms
 = 
	`ccm_öãrvÆ_to_ms
(
öãrvÆ
);

515 
cfm
->
ccm_vœn
 = 
s
->ccm_vlan;

516 
cfm
->
ccm_p˝
 = 
s
->ccm_p˝ & (
VLAN_PCP_MASK
 >> 
VLAN_PCP_SHIFT
);

517 i‡(
cfm
->
exãnded
 && 
öãrvÆ_ms
 !
s
->
öãrvÆ
) {

518 
öãrvÆ
 = 0;

519 
öãrvÆ_ms
 = 
	`MIN
(
s
->
öãrvÆ
, 
UINT16_MAX
);

522 i‡(
öãrvÆ
 !
cfm
->
ccm_öãrvÆ
 || 
öãrvÆ_ms
 !cfm->
ccm_öãrvÆ_ms
) {

523 
cfm
->
ccm_öãrvÆ
 = 
öãrvÆ
;

524 
cfm
->
ccm_öãrvÆ_ms
 = 
öãrvÆ_ms
;

526 
	`timî_£t_expúed
(&
cfm
->
tx_timî
);

527 
	`timî_£t_duøti⁄
(&
cfm
->
Áu…_timî
, 
	`cfm_Áu…_öãrvÆ
(cfm));

530  
åue
;

531 
	}
}

534 
boﬁ


535 
	$cfm_should_¥o˚ss_Êow
(c⁄° 
cfm
 *cfm, c⁄° 
Êow
 *flow)

537  (
	`¡ohs
(
Êow
->
dl_ty≥
Ë=
ETH_TYPE_CFM


538 && 
	`ëh_addr_equÆs
(
Êow
->
dl_d°
, 
	`cfm_ccm_addr
(
cfm
))

539 && (!
cfm
->
check_äl_key
 || 
Êow
->
tu¬ñ
.
tun_id
 =
	`ht⁄Œ
(0)));

540 
	}
}

546 
	$cfm_¥o˚ss_hóπbót
(
cfm
 *cfm, c⁄° 
oÂbuf
 *
p
)

548 
ccm
 *ccm;

549 
ëh_hódî
 *
ëh
;

551 
ëh
 = 
p
->
l2
;

552 
ccm
 = 
	`oÂbuf_©
(
p
, (
uöt8_t
 *Ì->
l3
 - (uöt8_à*Ì->
d©a
, 
CCM_ACCEPT_LEN
);

554 i‡(!
ccm
) {

555 
	`VLOG_INFO_RL
(&
æ
, "%s: Receivedán unparseable 802.1ag CCM heartbeat.",

556 
cfm
->
«me
);

560 i‡(
ccm
->
›code
 !
CCM_OPCODE
) {

561 
	`VLOG_INFO_RL
(&
æ
, "%s: Receivedán unsupported 802.1ag message. "

562 "(›codê%u)", 
cfm
->
«me
, 
ccm
->
›code
);

575 i‡(
	`memcmp
(
ccm
->
maid
, 
cfm
->maid,  ccm->maid)) {

576 
cfm
->
ªcv_Áu…
 |
CFM_FAULT_MAID
;

577 
	`VLOG_WARN_RL
(&
æ
, "%s: Received unexpectedÑemote MAID from MAC "

578 
ETH_ADDR_FMT
, 
cfm
->
«me
, 
	`ETH_ADDR_ARGS
(
ëh
->
ëh_§c
));

580 
uöt8_t
 
ccm_öãrvÆ
 = 
ccm
->
Êags
 & 0x7;

581 
boﬁ
 
ccm_rdi
 = 
ccm
->
Êags
 & 
CCM_RDI_MASK
;

582 
uöt16_t
 
ccm_öãrvÆ_ms_x
 = 
	`¡ohs
(
ccm
->
öãrvÆ_ms_x
);

584 
ªmŸe_mp
 *
rmp
;

585 
uöt64_t
 
ccm_mpid
;

586 
uöt32_t
 
ccm_£q
;

587 
boﬁ
 
ccm_›down
;

588 
cfm_Áu…_ªas⁄
 
cfm_Áu…
 = 0;

590 i‡(
cfm
->
exãnded
) {

591 
ccm_mpid
 = 
	`¡ohŒ
(
ccm
->
mpid64
);

592 
ccm_›down
 = 
ccm
->
›down
;

594 
ccm_mpid
 = 
	`¡ohs
(
ccm
->
mpid
);

595 
ccm_›down
 = 
Ál£
;

597 
ccm_£q
 = 
	`¡ohl
(
ccm
->
£q
);

599 i‡(
ccm_öãrvÆ
 !
cfm
->ccm_interval) {

600 
cfm_Áu…
 |
CFM_FAULT_INTERVAL
;

601 
	`VLOG_WARN_RL
(&
æ
, "%s:Ñeceivedá CCM withán unexpected interval"

602 " (%"
PRIu8
"Ë‰om RMP %"
PRIu64
, 
cfm
->
«me
,

603 
ccm_öãrvÆ
, 
ccm_mpid
);

606 i‡(
cfm
->
exãnded
 && 
ccm_öãrvÆ
 == 0

607 && 
ccm_öãrvÆ_ms_x
 !
cfm
->
ccm_öãrvÆ_ms
) {

608 
cfm_Áu…
 |
CFM_FAULT_INTERVAL
;

609 
	`VLOG_WARN_RL
(&
æ
, "%s:Ñeceivedá CCM withán unexpectedÉxtended"

610 " i¡îvÆ (%"
PRIu16
"msË‰om RMP %"
PRIu64
, 
cfm
->
«me
,

611 
ccm_öãrvÆ_ms_x
, 
ccm_mpid
);

614 
rmp
 = 
	`lookup_ªmŸe_mp
(
cfm
, 
ccm_mpid
);

615 i‡(!
rmp
) {

616 i‡(
	`hm≠_cou¡
(&
cfm
->
ªmŸe_mps
Ë< 
CFM_MAX_RMPS
) {

617 
rmp
 = 
	`xzÆloc
( *rmp);

618 
	`hm≠_ö£π
(&
cfm
->
ªmŸe_mps
, &
rmp
->
node
, 
	`hash_mpid
(
ccm_mpid
));

620 
cfm_Áu…
 |
CFM_FAULT_OVERFLOW
;

621 
	`VLOG_WARN_RL
(&
æ
,

622 "%s: dr›≥d CCM wôh MPID %"
PRIu64
" from MAC "

623 
ETH_ADDR_FMT
, 
cfm
->
«me
, 
ccm_mpid
,

624 
	`ETH_ADDR_ARGS
(
ëh
->
ëh_§c
));

628 i‡(
ccm_rdi
) {

629 
cfm_Áu…
 |
CFM_FAULT_RDI
;

630 
	`VLOG_DBG
("%s: RDI bô fœgged from RMP %"
PRIu64
, 
cfm
->
«me
,

631 
ccm_mpid
);

634 
	`VLOG_DBG
("%s:Ñe˚ived CCM (£q %"
PRIu32
"Ë(mpid %"
PRIu64
")"

635 " (öãrvÆ %"
PRIu8
"Ë(RDI %s)", 
cfm
->
«me
, 
ccm_£q
,

636 
ccm_mpid
, 
ccm_öãrvÆ
, 
ccm_rdi
 ? "true" : "false");

638 i‡(
rmp
) {

639 i‡(
rmp
->
mpid
 =
cfm
->mpid) {

640 
cfm_Áu…
 |
CFM_FAULT_LOOPBACK
;

641 
	`VLOG_WARN_RL
(&
æ
,"%s:Ñeceived CCM withÜocal MPID"

642 " %"
PRIu64
, 
cfm
->
«me
, 
rmp
->
mpid
);

645 i‡(
rmp
->
£q
 && 
ccm_£q
 != (rmp->seq + 1)) {

646 
	`VLOG_WARN_RL
(&
æ
, "%s: (mpid %"
PRIu64
") detected sequence"

648 "ÖrobÀm†’ªviou†%"
PRIu32
") (current %"PRIu32

649 ")", 
cfm
->
«me
, 
ccm_mpid
, 
rmp
->
£q
, 
ccm_£q
);

652 
rmp
->
mpid
 = 
ccm_mpid
;

653 i‡(!
cfm_Áu…
) {

654 
rmp
->
num_hó…h_ccm
++;

656 
rmp
->
ªcv
 = 
åue
;

657 
cfm
->
ªcv_Áu…
 |
cfm_Áu…
;

658 
rmp
->
£q
 = 
ccm_£q
;

659 
rmp
->
›up
 = !
ccm_›down
;

660 
rmp
->
œ°_rx
 = 
	`time_m£c
();

663 
	}
}

669 
	$cfm_gë_Áu…
(c⁄° 
cfm
 *cfm)

671 i‡(
cfm
->
Áu…_ovîride
 >= 0) {

672  
cfm
->
Áu…_ovîride
 ? 
CFM_FAULT_OVERRIDE
 : 0;

674  
cfm
->
Áu…
;

675 
	}
}

683 
	$cfm_gë_hó…h
(c⁄° 
cfm
 *cfm)

685  
cfm
->
hó…h
;

686 
	}
}

694 
	$cfm_gë_›up
(c⁄° 
cfm
 *cfm)

696 i‡(
cfm
->
exãnded
) {

697  
cfm
->
ªmŸe_›up
;

701 
	}
}

707 
	$cfm_gë_ªmŸe_mpids
(c⁄° 
cfm
 *cfm, c⁄° 
uöt64_t
 **
rmps
,

708 
size_t
 *
n_rmps
)

710 *
rmps
 = 
cfm
->
rmps_¨øy
;

711 *
n_rmps
 = 
cfm
->
rmps_¨øy_Àn
;

712 
	}
}

714 
cfm
 *

715 
	$cfm_föd
(c⁄° *
«me
)

717 
cfm
 *cfm;

719 
	`HMAP_FOR_EACH_WITH_HASH
 (
cfm
, 
hm≠_node
, 
	`hash_°rög
(
«me
, 0), &
Æl_cfms
) {

720 i‡(!
	`°rcmp
(
cfm
->
«me
,Çame)) {

721  
cfm
;

724  
NULL
;

725 
	}
}

728 
	$cfm_¥öt_dëaûs
(
ds
 *ds, c⁄° 
cfm
 *cfm)

730 
ªmŸe_mp
 *
rmp
;

731 
Áu…
;

733 
	`ds_put_f‹m©
(
ds
, "---- %†----\n", 
cfm
->
«me
);

734 
	`ds_put_f‹m©
(
ds
, "MPID %"
PRIu64
":%s%s\n", 
cfm
->
mpid
,

735 
cfm
->
exãnded
 ? "Éxtended" : "",

736 
cfm
->
Áu…_ovîride
 >= 0 ? " fault_override" : "");

738 
Áu…
 = 
	`cfm_gë_Áu…
(
cfm
);

739 i‡(
Áu…
) {

740 
	`ds_put_c°r
(
ds
, "\tfault: ");

741 
	`ds_put_cfm_Áu…
(
ds
, 
Áu…
);

742 
	`ds_put_c°r
(
ds
, "\n");

745 i‡(
cfm
->
hó…h
 == -1) {

746 
	`ds_put_f‹m©
(
ds
, "\taverage health: undefined\n");

748 
	`ds_put_f‹m©
(
ds
, "\èvîagêhó…h: %d\n", 
cfm
->
hó…h
);

750 
	`ds_put_f‹m©
(
ds
, "\t›°©e: %s\n", 
cfm
->
›up
 ? "up" : "down");

751 
	`ds_put_f‹m©
(
ds
, "\tremote_opstate: %s\n",

752 
cfm
->
ªmŸe_›up
 ? "up" : "down");

753 
	`ds_put_f‹m©
(
ds
, "\töãrvÆ: %dms\n", 
cfm
->
ccm_öãrvÆ_ms
);

754 
	`ds_put_f‹m©
(
ds
, "\tnext CCMÅx: %lldms\n",

755 
	`timî_m£cs_u¡û_expúed
(&
cfm
->
tx_timî
));

756 
	`ds_put_f‹m©
(
ds
, "\tnext fault check: %lldms\n",

757 
	`timî_m£cs_u¡û_expúed
(&
cfm
->
Áu…_timî
));

759 
	`HMAP_FOR_EACH
 (
rmp
, 
node
, &
cfm
->
ªmŸe_mps
) {

760 
	`ds_put_f‹m©
(
ds
, "RemŸêMPID %"
PRIu64
"\n", 
rmp
->
mpid
);

761 
	`ds_put_f‹m©
(
ds
, "\trecv since check: %s\n",

762 
rmp
->
ªcv
 ? "true" : "false");

763 
	`ds_put_f‹m©
(
ds
, "\t›°©e: %s\n", 
rmp
->
›up
? "up" : "down");

765 
	}
}

768 
	$cfm_unix˘l_show
(
unix˘l_c⁄n
 *
c⁄n
, 
¨gc
, c⁄° *
¨gv
[],

769 *
aux
 
OVS_UNUSED
)

771 
ds
 d†
DS_EMPTY_INITIALIZER
;

772 c⁄° 
cfm
 *cfm;

774 i‡(
¨gc
 > 1) {

775 
cfm
 = 
	`cfm_föd
(
¨gv
[1]);

776 i‡(!
cfm
) {

777 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, "no such CFM object");

780 
	`cfm_¥öt_dëaûs
(&
ds
, 
cfm
);

782 
	`HMAP_FOR_EACH
 (
cfm
, 
hm≠_node
, &
Æl_cfms
) {

783 
	`cfm_¥öt_dëaûs
(&
ds
, 
cfm
);

787 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, 
	`ds_c°r
(&
ds
));

788 
	`ds_de°roy
(&
ds
);

789 
	}
}

792 
	$cfm_unix˘l_£t_Áu…
(
unix˘l_c⁄n
 *
c⁄n
, 
¨gc
, c⁄° *
¨gv
[],

793 *
aux
 
OVS_UNUSED
)

795 c⁄° *
Áu…_°r
 = 
¨gv
[
¨gc
 - 1];

796 
Áu…_ovîride
;

797 
cfm
 *cfm;

799 i‡(!
	`°rˇ£cmp
("åue", 
Áu…_°r
)) {

800 
Áu…_ovîride
 = 1;

801 } i‡(!
	`°rˇ£cmp
("Ál£", 
Áu…_°r
)) {

802 
Áu…_ovîride
 = 0;

803 } i‡(!
	`°rˇ£cmp
("n‹mÆ", 
Áu…_°r
)) {

804 
Áu…_ovîride
 = -1;

806 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, "unknown fault string");

810 i‡(
¨gc
 > 2) {

811 
cfm
 = 
	`cfm_föd
(
¨gv
[1]);

812 i‡(!
cfm
) {

813 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, "no such CFM object");

816 
cfm
->
Áu…_ovîride
 = fault_override;

818 
	`HMAP_FOR_EACH
 (
cfm
, 
hm≠_node
, &
Æl_cfms
) {

819 
cfm
->
Áu…_ovîride
 = fault_override;

823 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, "OK");

824 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/cfm.h

16 #i‚de‡
CFM_H


17 
	#CFM_H
 1

	)

19 
	~<°döt.h
>

21 
	~"hm≠.h
"

22 
	~"›ívswôch/ty≥s.h
"

24 
	gÊow
;

25 
	goÂbuf
;

27 
	#CFM_RANDOM_VLAN
 
UINT16_MAX


	)

29 
	#CFM_FAULT_REASONS
 \

30 
	`CFM_FAULT_REASON
(
RECV
, 
ªcv
) \

31 
	`CFM_FAULT_REASON
(
RDI
, 
rdi
) \

32 
	`CFM_FAULT_REASON
(
MAID
, 
maid
) \

33 
	`CFM_FAULT_REASON
(
LOOPBACK
, 
lo›back
) \

34 
	`CFM_FAULT_REASON
(
OVERFLOW
, 
ovîÊow
) \

35 
	`CFM_FAULT_REASON
(
OVERRIDE
, 
ovîride
) \

36 
	`CFM_FAULT_REASON
(
INTERVAL
, 
öãrvÆ
)

	)

38 
	ecfm_Áu…_bô_ödex
 {

39 
	#CFM_FAULT_REASON
(
NAME
, 
STR
Ë
CFM_FAULT_INDEX_
##NAME,

	)

40 
	mCFM_FAULT_REASONS


41 #unde‡
CFM_FAULT_REASON


42 
	mCFM_FAULT_N_REASONS


45 
	ecfm_Áu…_ªas⁄
 {

46 
	#CFM_FAULT_REASON
(
NAME
, 
STR
) \

47 
CFM_FAULT_
##
NAME
 = 1 << 
CFM_FAULT_INDEX_
##NAME,

	)

48 
	mCFM_FAULT_REASONS


49 #unde‡
CFM_FAULT_REASON


52 
	scfm_£âögs
 {

53 
uöt64_t
 
	mmpid
;

54 
	möãrvÆ
;

55 
boﬁ
 
	mexãnded
;

56 
boﬁ
 
	m›up
;

57 
uöt16_t
 
	mccm_vœn
;

59 
uöt8_t
 
	mccm_p˝
;

61 
boﬁ
 
	mcheck_äl_key
;

64 
cfm_öô
();

65 
cfm
 *
cfm_¸óã
(c⁄° *
«me
);

66 
cfm_de°roy
(
cfm
 *);

67 
cfm_run
(
cfm
 *);

68 
boﬁ
 
cfm_should_£nd_ccm
(
cfm
 *);

69 
cfm_compo£_ccm
(
cfm
 *, 
oÂbuf
 *
∑ckë
, 
uöt8_t
 
ëh_§c
[6]);

70 
cfm_waô
(
cfm
 *);

71 
boﬁ
 
cfm_c⁄figuª
(
cfm
 *, c⁄° 
cfm_£âögs
 *);

72 
boﬁ
 
cfm_should_¥o˚ss_Êow
(c⁄° 
cfm
 *cfm, c⁄° 
Êow
 *);

73 
cfm_¥o˚ss_hóπbót
(
cfm
 *, c⁄° 
oÂbuf
 *
∑ckë
);

74 
cfm_gë_Áu…
(c⁄° 
cfm
 *);

75 
cfm_gë_hó…h
(c⁄° 
cfm
 *);

76 
cfm_gë_›up
(c⁄° 
cfm
 *);

77 
cfm_gë_ªmŸe_mpids
(c⁄° 
cfm
 *, c⁄° 
uöt64_t
 **
rmps
,

78 
size_t
 *
n_rmps
);

79 c⁄° *
cfm_Áu…_ªas⁄_to_°r
(
Áu…
);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/classifier.c

17 
	~<c⁄fig.h
>

18 
	~"˛assifõr.h
"

19 
	~<as£π.h
>

20 
	~<î∫o.h
>

21 
	~<√töë/ö.h
>

22 
	~"byã-‹dî.h
"

23 
	~"dy«mic-°rög.h
"

24 
	~"Êow.h
"

25 
	~"hash.h
"

26 
	~"odp-utû.h
"

27 
	~"oÂ-utû.h
"

28 
	~"∑ckës.h
"

30 
˛s_èbÀ
 *
föd_èbÀ
(c⁄° 
˛assifõr
 *,

31 c⁄° 
möimask
 *);

32 
˛s_èbÀ
 *
ö£π_èbÀ
(
˛assifõr
 *,

33 c⁄° 
möimask
 *);

35 
de°roy_èbÀ
(
˛assifõr
 *, 
˛s_èbÀ
 *);

37 
˛s_ruÀ
 *
föd_m©ch
(c⁄° 
˛s_èbÀ
 *,

38 c⁄° 
Êow
 *);

39 
˛s_ruÀ
 *
föd_equÆ
(
˛s_èbÀ
 *,

40 c⁄° 
möiÊow
 *, 
uöt32_t
 
hash
);

41 
˛s_ruÀ
 *
ö£π_ruÀ
(
˛s_èbÀ
 *, cls_rule *);

44 
	#FOR_EACH_RULE_IN_LIST
(
RULE
, 
HEAD
) \

45 (
RULE
Ë(
HEAD
); (RULEË!
NULL
; (RULEË
	`√xt_ruÀ_ö_li°
(RULE))

	)

46 
	#FOR_EACH_RULE_IN_LIST_SAFE
(
RULE
, 
NEXT
, 
HEAD
) \

47 (
RULE
Ë(
HEAD
); \

48 (
RULE
Ë!
NULL
 && ((
NEXT
Ë
	`√xt_ruÀ_ö_li°
(RULE), 
åue
); \

49 (
RULE
Ë(
NEXT
))

	)

51 
˛s_ruÀ
 *
√xt_ruÀ_ö_li°__
(cls_rule *);

52 
˛s_ruÀ
 *
√xt_ruÀ_ö_li°
(cls_rule *);

65 
	$˛s_ruÀ_öô
(
˛s_ruÀ
 *
ruÀ
,

66 c⁄° 
m©ch
 *m©ch, 
¥i‹ôy
)

68 
	`möim©ch_öô
(&
ruÀ
->
m©ch
, match);

69 
ruÀ
->
¥i‹ôy
 =Öriority;

70 
	}
}

74 
	$˛s_ruÀ_öô_‰om_möim©ch
(
˛s_ruÀ
 *
ruÀ
,

75 c⁄° 
möim©ch
 *
m©ch
,

76 
¥i‹ôy
)

78 
	`möim©ch_˛⁄e
(&
ruÀ
->
m©ch
, match);

79 
ruÀ
->
¥i‹ôy
 =Öriority;

80 
	}
}

86 
	$˛s_ruÀ_˛⁄e
(
˛s_ruÀ
 *
d°
, c⁄° ˛s_ruÀ *
§c
)

88 
	`möim©ch_˛⁄e
(&
d°
->
m©ch
, &
§c
->match);

89 
d°
->
¥i‹ôy
 = 
§c
->priority;

90 
	}
}

97 
	$˛s_ruÀ_de°roy
(
˛s_ruÀ
 *
ruÀ
)

99 
	`möim©ch_de°roy
(&
ruÀ
->
m©ch
);

100 
	}
}

104 
boﬁ


105 
	$˛s_ruÀ_equÆ
(c⁄° 
˛s_ruÀ
 *
a
, c⁄° ˛s_ruÀ *
b
)

107  
a
->
¥i‹ôy
 =
b
->¥i‹ôy && 
	`möim©ch_equÆ
(&a->
m©ch
, &b->match);

108 
	}
}

111 
uöt32_t


112 
	$˛s_ruÀ_hash
(c⁄° 
˛s_ruÀ
 *
ruÀ
, 
uöt32_t
 
basis
)

114  
	`möim©ch_hash
(&
ruÀ
->
m©ch
, 
	`hash_öt
‘uÀ->
¥i‹ôy
, 
basis
));

115 
	}
}

119 
	$˛s_ruÀ_f‹m©
(c⁄° 
˛s_ruÀ
 *
ruÀ
, 
ds
 *
s
)

121 
	`möim©ch_f‹m©
(&
ruÀ
->
m©ch
, 
s
,ÑuÀ->
¥i‹ôy
);

122 
	}
}

125 
boﬁ


126 
	$˛s_ruÀ_is_ˇtchÆl
(c⁄° 
˛s_ruÀ
 *
ruÀ
)

128  
	`möimask_is_ˇtchÆl
(&
ruÀ
->
m©ch
.
mask
);

129 
	}
}

134 
	$˛assifõr_öô
(
˛assifõr
 *
˛s
)

136 
˛s
->
n_ruÀs
 = 0;

137 
	`hm≠_öô
(&
˛s
->
èbÀs
);

138 
	}
}

143 
	$˛assifõr_de°roy
(
˛assifõr
 *
˛s
)

145 i‡(
˛s
) {

146 
˛s_èbÀ
 *
èbÀ
, *
√xt_èbÀ
;

148 
	`HMAP_FOR_EACH_SAFE
 (
èbÀ
, 
√xt_èbÀ
, 
hm≠_node
, &
˛s
->
èbÀs
) {

149 
	`hm≠_de°roy
(&
èbÀ
->
ruÀs
);

150 
	`hm≠_ªmove
(&
˛s
->
èbÀs
, &
èbÀ
->
hm≠_node
);

151 
	`‰ì
(
èbÀ
);

153 
	`hm≠_de°roy
(&
˛s
->
èbÀs
);

155 
	}
}

158 
boﬁ


159 
	$˛assifõr_is_em±y
(c⁄° 
˛assifõr
 *
˛s
)

161  
˛s
->
n_ruÀs
 == 0;

162 
	}
}

166 
	$˛assifõr_cou¡
(c⁄° 
˛assifõr
 *
˛s
)

168  
˛s
->
n_ruÀs
;

169 
	}
}

184 
˛s_ruÀ
 *

185 
	$˛assifõr_ª∂a˚
(
˛assifõr
 *
˛s
, 
˛s_ruÀ
 *
ruÀ
)

187 
˛s_ruÀ
 *
ﬁd_ruÀ
;

188 
˛s_èbÀ
 *
èbÀ
;

190 
èbÀ
 = 
	`föd_èbÀ
(
˛s
, &
ruÀ
->
m©ch
.
mask
);

191 i‡(!
èbÀ
) {

192 
èbÀ
 = 
	`ö£π_èbÀ
(
˛s
, &
ruÀ
->
m©ch
.
mask
);

195 
ﬁd_ruÀ
 = 
	`ö£π_ruÀ
(
èbÀ
, 
ruÀ
);

196 i‡(!
ﬁd_ruÀ
) {

197 
èbÀ
->
n_èbÀ_ruÀs
++;

198 
˛s
->
n_ruÀs
++;

200  
ﬁd_ruÀ
;

201 
	}
}

210 
	$˛assifõr_ö£π
(
˛assifõr
 *
˛s
, 
˛s_ruÀ
 *
ruÀ
)

212 
˛s_ruÀ
 *
di•œ˚d_ruÀ
 = 
	`˛assifõr_ª∂a˚
(
˛s
, 
ruÀ
);

213 
	`as£π
(!
di•œ˚d_ruÀ
);

214 
	}
}

220 
	$˛assifõr_ªmove
(
˛assifõr
 *
˛s
, 
˛s_ruÀ
 *
ruÀ
)

222 
˛s_ruÀ
 *
hód
;

223 
˛s_èbÀ
 *
èbÀ
;

225 
èbÀ
 = 
	`föd_èbÀ
(
˛s
, &
ruÀ
->
m©ch
.
mask
);

226 
hód
 = 
	`föd_equÆ
(
èbÀ
, &
ruÀ
->
m©ch
.
Êow
,ÑuÀ->
hm≠_node
.
hash
);

227 i‡(
hód
 !
ruÀ
) {

228 
	`li°_ªmove
(&
ruÀ
->
li°
);

229 } i‡(
	`li°_is_em±y
(&
ruÀ
->
li°
)) {

230 
	`hm≠_ªmove
(&
èbÀ
->
ruÀs
, &
ruÀ
->
hm≠_node
);

232 
˛s_ruÀ
 *
√xt
 = 
	`CONTAINER_OF
(
ruÀ
->
li°
.next,

233 
˛s_ruÀ
, 
li°
);

235 
	`li°_ªmove
(&
ruÀ
->
li°
);

236 
	`hm≠_ª∂a˚
(&
èbÀ
->
ruÀs
, &
ruÀ
->
hm≠_node
, &
√xt
->hmap_node);

239 i‡(--
èbÀ
->
n_èbÀ_ruÀs
 == 0) {

240 
	`de°roy_èbÀ
(
˛s
, 
èbÀ
);

243 
˛s
->
n_ruÀs
--;

244 
	}
}

249 
˛s_ruÀ
 *

250 
	$˛assifõr_lookup
(c⁄° 
˛assifõr
 *
˛s
, c⁄° 
Êow
 *flow)

252 
˛s_èbÀ
 *
èbÀ
;

253 
˛s_ruÀ
 *
be°
;

255 
be°
 = 
NULL
;

256 
	`HMAP_FOR_EACH
 (
èbÀ
, 
hm≠_node
, &
˛s
->
èbÀs
) {

257 
˛s_ruÀ
 *
ruÀ
 = 
	`föd_m©ch
(
èbÀ
, 
Êow
);

258 i‡(
ruÀ
 && (!
be°
 ||ÑuÀ->
¥i‹ôy
 > best->priority)) {

259 
be°
 = 
ruÀ
;

262  
be°
;

263 
	}
}

268 
˛s_ruÀ
 *

269 
	$˛assifõr_föd_ruÀ_exa˘ly
(c⁄° 
˛assifõr
 *
˛s
,

270 c⁄° 
˛s_ruÀ
 *
èrgë
)

272 
˛s_ruÀ
 *
hód
, *
ruÀ
;

273 
˛s_èbÀ
 *
èbÀ
;

275 
èbÀ
 = 
	`föd_èbÀ
(
˛s
, &
èrgë
->
m©ch
.
mask
);

276 i‡(!
èbÀ
) {

277  
NULL
;

280 
hód
 = 
	`föd_equÆ
(
èbÀ
, &
èrgë
->
m©ch
.
Êow
,

281 
	`möiÊow_hash_ö_möimask
(&
èrgë
->
m©ch
.
Êow
,

282 &
èrgë
->
m©ch
.
mask
, 0));

283 
	`FOR_EACH_RULE_IN_LIST
 (
ruÀ
, 
hód
) {

284 i‡(
èrgë
->
¥i‹ôy
 >
ruÀ
->priority) {

285  
èrgë
->
¥i‹ôy
 =
ruÀ
->¥i‹ôy ?ÑuÀ : 
NULL
;

288  
NULL
;

289 
	}
}

294 
˛s_ruÀ
 *

295 
	$˛assifõr_föd_m©ch_exa˘ly
(c⁄° 
˛assifõr
 *
˛s
,

296 c⁄° 
m©ch
 *
èrgë
,

297 
¥i‹ôy
)

299 
˛s_ruÀ
 *
ªtvÆ
;

300 
˛s_ruÀ
 
¸
;

302 
	`˛s_ruÀ_öô
(&
¸
, 
èrgë
, 
¥i‹ôy
);

303 
ªtvÆ
 = 
	`˛assifõr_föd_ruÀ_exa˘ly
(
˛s
, &
¸
);

304 
	`˛s_ruÀ_de°roy
(&
¸
);

306  
ªtvÆ
;

307 
	}
}

312 
boﬁ


313 
	$˛assifõr_ruÀ_ovîœps
(c⁄° 
˛assifõr
 *
˛s
,

314 c⁄° 
˛s_ruÀ
 *
èrgë
)

316 
˛s_èbÀ
 *
èbÀ
;

318 
	`HMAP_FOR_EACH
 (
èbÀ
, 
hm≠_node
, &
˛s
->
èbÀs
) {

319 
uöt32_t
 
°‹age
[
FLOW_U32S
];

320 
möimask
 
mask
;

321 
˛s_ruÀ
 *
hód
;

323 
	`möimask_comböe
(&
mask
, &
èrgë
->
m©ch
.mask, &
èbÀ
->mask, 
°‹age
);

324 
	`HMAP_FOR_EACH
 (
hód
, 
hm≠_node
, &
èbÀ
->
ruÀs
) {

325 
˛s_ruÀ
 *
ruÀ
;

327 
	`FOR_EACH_RULE_IN_LIST
 (
ruÀ
, 
hód
) {

328 i‡(
ruÀ
->
¥i‹ôy
 =
èrgë
->priority

329 && 
	`möiÊow_equÆ_ö_möimask
(&
èrgë
->
m©ch
.
Êow
,

330 &
ruÀ
->
m©ch
.
Êow
, &
mask
)) {

331  
åue
;

337  
Ál£
;

338 
	}
}

373 
boﬁ


374 
	$˛s_ruÀ_is_loo£_m©ch
(c⁄° 
˛s_ruÀ
 *
ruÀ
,

375 c⁄° 
möim©ch
 *
¸ôîü
)

377  (!
	`möimask_has_exåa
(&
ruÀ
->
m©ch
.
mask
, &
¸ôîü
->mask)

378 && 
	`möiÊow_equÆ_ö_möimask
(&
ruÀ
->
m©ch
.
Êow
, &
¸ôîü
->flow,

379 &
¸ôîü
->
mask
));

380 
	}
}

384 
boﬁ


385 
	$ruÀ_m©ches
(c⁄° 
˛s_ruÀ
 *
ruÀ
, c⁄° ˛s_ruÀ *
èrgë
)

387  (!
èrgë


388 || 
	`möiÊow_equÆ_ö_möimask
(&
ruÀ
->
m©ch
.
Êow
,

389 &
èrgë
->
m©ch
.
Êow
,

390 &
èrgë
->
m©ch
.
mask
));

391 
	}
}

393 
˛s_ruÀ
 *

394 
	$£¨ch_èbÀ
(c⁄° 
˛s_èbÀ
 *
èbÀ
, c⁄° 
˛s_ruÀ
 *
èrgë
)

396 i‡(!
èrgë
 || !
	`möimask_has_exåa
(&
èbÀ
->
mask
, &èrgë->
m©ch
.mask)) {

397 
˛s_ruÀ
 *
ruÀ
;

399 
	`HMAP_FOR_EACH
 (
ruÀ
, 
hm≠_node
, &
èbÀ
->
ruÀs
) {

400 i‡(
	`ruÀ_m©ches
(
ruÀ
, 
èrgë
)) {

401  
ruÀ
;

405  
NULL
;

406 
	}
}

417 
	$˛s_curs‹_öô
(
˛s_curs‹
 *
curs‹
, c⁄° 
˛assifõr
 *
˛s
,

418 c⁄° 
˛s_ruÀ
 *
èrgë
)

420 
curs‹
->
˛s
 = cls;

421 
curs‹
->
èrgë
 =Å¨gë && !
	`˛s_ruÀ_is_ˇtchÆl
—¨gëË?Å¨gë : 
NULL
;

422 
	}
}

426 
˛s_ruÀ
 *

427 
	$˛s_curs‹_fú°
(
˛s_curs‹
 *
curs‹
)

429 
˛s_èbÀ
 *
èbÀ
;

431 
	`HMAP_FOR_EACH
 (
èbÀ
, 
hm≠_node
, &
curs‹
->
˛s
->
èbÀs
) {

432 
˛s_ruÀ
 *
ruÀ
 = 
	`£¨ch_èbÀ
(
èbÀ
, 
curs‹
->
èrgë
);

433 i‡(
ruÀ
) {

434 
curs‹
->
èbÀ
 =Åable;

435  
ruÀ
;

439  
NULL
;

440 
	}
}

444 
˛s_ruÀ
 *

445 
	$˛s_curs‹_√xt
(
˛s_curs‹
 *
curs‹
, 
˛s_ruÀ
 *
ruÀ
)

447 c⁄° 
˛s_èbÀ
 *
èbÀ
;

448 
˛s_ruÀ
 *
√xt
;

450 
√xt
 = 
	`√xt_ruÀ_ö_li°__
(
ruÀ
);

451 i‡(
√xt
->
¥i‹ôy
 < 
ruÀ
->priority) {

452  
√xt
;

458 
ruÀ
 = 
√xt
;

459 
	`HMAP_FOR_EACH_CONTINUE
 (
ruÀ
, 
hm≠_node
, &
curs‹
->
èbÀ
->
ruÀs
) {

460 i‡(
	`ruÀ_m©ches
(
ruÀ
, 
curs‹
->
èrgë
)) {

461  
ruÀ
;

465 
èbÀ
 = 
curs‹
->table;

466 
	`HMAP_FOR_EACH_CONTINUE
 (
èbÀ
, 
hm≠_node
, &
curs‹
->
˛s
->
èbÀs
) {

467 
ruÀ
 = 
	`£¨ch_èbÀ
(
èbÀ
, 
curs‹
->
èrgë
);

468 i‡(
ruÀ
) {

469 
curs‹
->
èbÀ
 =Åable;

470  
ruÀ
;

474  
NULL
;

475 
	}
}

477 
˛s_èbÀ
 *

478 
	$föd_èbÀ
(c⁄° 
˛assifõr
 *
˛s
, c⁄° 
möimask
 *
mask
)

480 
˛s_èbÀ
 *
èbÀ
;

482 
	`HMAP_FOR_EACH_IN_BUCKET
 (
èbÀ
, 
hm≠_node
, 
	`möimask_hash
(
mask
, 0),

483 &
˛s
->
èbÀs
) {

484 i‡(
	`möimask_equÆ
(
mask
, &
èbÀ
->mask)) {

485  
èbÀ
;

488  
NULL
;

489 
	}
}

491 
˛s_èbÀ
 *

492 
	$ö£π_èbÀ
(
˛assifõr
 *
˛s
, c⁄° 
möimask
 *
mask
)

494 
˛s_èbÀ
 *
èbÀ
;

496 
èbÀ
 = 
	`xzÆloc
( *table);

497 
	`hm≠_öô
(&
èbÀ
->
ruÀs
);

498 
	`möimask_˛⁄e
(&
èbÀ
->
mask
, mask);

499 
	`hm≠_ö£π
(&
˛s
->
èbÀs
, &
èbÀ
->
hm≠_node
, 
	`möimask_hash
(
mask
, 0));

501  
èbÀ
;

502 
	}
}

505 
	$de°roy_èbÀ
(
˛assifõr
 *
˛s
, 
˛s_èbÀ
 *
èbÀ
)

507 
	`möimask_de°roy
(&
èbÀ
->
mask
);

508 
	`hm≠_ªmove
(&
˛s
->
èbÀs
, &
èbÀ
->
hm≠_node
);

509 
	`hm≠_de°roy
(&
èbÀ
->
ruÀs
);

510 
	`‰ì
(
èbÀ
);

511 
	}
}

513 
˛s_ruÀ
 *

514 
	$föd_m©ch
(c⁄° 
˛s_èbÀ
 *
èbÀ
, c⁄° 
Êow
 *flow)

516 
uöt32_t
 
hash
 = 
	`Êow_hash_ö_möimask
(
Êow
, &
èbÀ
->
mask
, 0);

517 
˛s_ruÀ
 *
ruÀ
;

519 
	`HMAP_FOR_EACH_WITH_HASH
 (
ruÀ
, 
hm≠_node
, 
hash
, &
èbÀ
->
ruÀs
) {

520 i‡(
	`möiÊow_equÆ_Êow_ö_möimask
(&
ruÀ
->
m©ch
.
Êow
, flow,

521 &
èbÀ
->
mask
)) {

522  
ruÀ
;

526  
NULL
;

527 
	}
}

529 
˛s_ruÀ
 *

530 
	$föd_equÆ
(
˛s_èbÀ
 *
èbÀ
, c⁄° 
möiÊow
 *
Êow
, 
uöt32_t
 
hash
)

532 
˛s_ruÀ
 *
hód
;

534 
	`HMAP_FOR_EACH_WITH_HASH
 (
hód
, 
hm≠_node
, 
hash
, &
èbÀ
->
ruÀs
) {

535 i‡(
	`möiÊow_equÆ
(&
hód
->
m©ch
.
Êow
, flow)) {

536  
hód
;

539  
NULL
;

540 
	}
}

542 
˛s_ruÀ
 *

543 
	$ö£π_ruÀ
(
˛s_èbÀ
 *
èbÀ
, 
˛s_ruÀ
 *
√w
)

545 
˛s_ruÀ
 *
hód
;

547 
√w
->
hm≠_node
.
hash
 = 
	`möiÊow_hash_ö_möimask
(&√w->
m©ch
.
Êow
,

548 &
√w
->
m©ch
.
mask
, 0);

550 
hód
 = 
	`föd_equÆ
(
èbÀ
, &
√w
->
m©ch
.
Êow
,Çew->
hm≠_node
.
hash
);

551 i‡(!
hód
) {

552 
	`hm≠_ö£π
(&
èbÀ
->
ruÀs
, &
√w
->
hm≠_node
,Çew->hm≠_node.
hash
);

553 
	`li°_öô
(&
√w
->
li°
);

554  
NULL
;

558 
˛s_ruÀ
 *
ruÀ
;

559 
	`FOR_EACH_RULE_IN_LIST
 (
ruÀ
, 
hód
) {

560 i‡(
√w
->
¥i‹ôy
 >
ruÀ
->priority) {

561 i‡(
ruÀ
 =
hód
) {

563 
	`hm≠_ª∂a˚
(&
èbÀ
->
ruÀs
,

564 &
ruÀ
->
hm≠_node
, &
√w
->hmap_node);

567 i‡(
√w
->
¥i‹ôy
 =
ruÀ
->priority) {

568 
	`li°_ª∂a˚
(&
√w
->
li°
, &
ruÀ
->list);

569  
ruÀ
;

571 
	`li°_ö£π
(&
ruÀ
->
li°
, &
√w
->list);

572  
NULL
;

578 
	`li°_push_back
(&
hód
->
li°
, &
√w
->list);

579  
NULL
;

581 
	}
}

583 
˛s_ruÀ
 *

584 
	$√xt_ruÀ_ö_li°__
(
˛s_ruÀ
 *
ruÀ
)

586 
˛s_ruÀ
 *
√xt
 = 
	`OBJECT_CONTAINING
(
ruÀ
->
li°
.next,Çext,Üist);

587  
√xt
;

588 
	}
}

590 
˛s_ruÀ
 *

591 
	$√xt_ruÀ_ö_li°
(
˛s_ruÀ
 *
ruÀ
)

593 
˛s_ruÀ
 *
√xt
 = 
	`√xt_ruÀ_ö_li°__
(
ruÀ
);

594  
√xt
->
¥i‹ôy
 < 
ruÀ
->¥i‹ôy ?Çexà: 
NULL
;

595 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/classifier.h

17 #i‚de‡
CLASSIFIER_H


18 
	#CLASSIFIER_H
 1

	)

29 
	~"Êow.h
"

30 
	~"hm≠.h
"

31 
	~"li°.h
"

32 
	~"m©ch.h
"

33 
	~"›íÊow/nicúa-ext.h
"

34 
	~"›íÊow/›íÊow.h
"

36 #ifde‡
__˝lu•lus


41 
	s˛assifõr
 {

42 
n_ruÀs
;

43 
hm≠
 
èbÀs
;

47 
	s˛s_èbÀ
 {

48 
hm≠_node
 hmap_node;

49 
hm≠
 
ruÀs
;

50 
möimask
 
mask
;

51 
n_èbÀ_ruÀs
;

56 
ölöe
 
boﬁ


57 
˛s_èbÀ_is_ˇtchÆl
(c⁄° 
˛s_èbÀ
 *
èbÀ
)

59  
möimask_is_ˇtchÆl
(&
èbÀ
->
mask
);

63 
	s˛s_ruÀ
 {

64 
hm≠_node
 hmap_node;

65 
li°
Üist;

66 
möim©ch
 
m©ch
;

67 
¥i‹ôy
;

70 
˛s_ruÀ_öô
(
˛s_ruÀ
 *, c⁄° 
m©ch
 *,

71 
¥i‹ôy
);

72 
˛s_ruÀ_öô_‰om_möim©ch
(
˛s_ruÀ
 *, c⁄° 
möim©ch
 *,

73 
¥i‹ôy
);

74 
˛s_ruÀ_˛⁄e
(
˛s_ruÀ
 *, const cls_rule *);

75 
˛s_ruÀ_de°roy
(
˛s_ruÀ
 *);

77 
boﬁ
 
˛s_ruÀ_equÆ
(c⁄° 
˛s_ruÀ
 *, const cls_rule *);

78 
uöt32_t
 
˛s_ruÀ_hash
(c⁄° 
˛s_ruÀ
 *, uöt32_à
basis
);

80 
˛s_ruÀ_f‹m©
(c⁄° 
˛s_ruÀ
 *, 
ds
 *);

82 
boﬁ
 
˛s_ruÀ_is_ˇtchÆl
(c⁄° 
˛s_ruÀ
 *);

84 
boﬁ
 
˛s_ruÀ_is_loo£_m©ch
(c⁄° 
˛s_ruÀ
 *
ruÀ
,

85 c⁄° 
möim©ch
 *
¸ôîü
);

87 
˛assifõr_öô
(
˛assifõr
 *);

88 
˛assifõr_de°roy
(
˛assifõr
 *);

89 
boﬁ
 
˛assifõr_is_em±y
(c⁄° 
˛assifõr
 *);

90 
˛assifõr_cou¡
(c⁄° 
˛assifõr
 *);

91 
˛assifõr_ö£π
(
˛assifõr
 *, 
˛s_ruÀ
 *);

92 
˛s_ruÀ
 *
˛assifõr_ª∂a˚
(
˛assifõr
 *, cls_rule *);

93 
˛assifõr_ªmove
(
˛assifõr
 *, 
˛s_ruÀ
 *);

94 
˛s_ruÀ
 *
˛assifõr_lookup
(c⁄° 
˛assifõr
 *,

95 c⁄° 
Êow
 *);

96 
boﬁ
 
˛assifõr_ruÀ_ovîœps
(c⁄° 
˛assifõr
 *,

97 c⁄° 
˛s_ruÀ
 *);

99 
	t˛s_cb_func
(
	t˛s_ruÀ
 *, *
	taux
);

101 
˛s_ruÀ
 *
˛assifõr_föd_ruÀ_exa˘ly
(c⁄° 
˛assifõr
 *,

102 c⁄° 
˛s_ruÀ
 *);

103 
˛s_ruÀ
 *
˛assifõr_föd_m©ch_exa˘ly
(c⁄° 
˛assifõr
 *,

104 c⁄° 
m©ch
 *,

105 
¥i‹ôy
);

109 
	s˛s_curs‹
 {

110 c⁄° 
˛assifõr
 *
˛s
;

111 c⁄° 
˛s_èbÀ
 *
èbÀ
;

112 c⁄° 
˛s_ruÀ
 *
èrgë
;

115 
˛s_curs‹_öô
(
˛s_curs‹
 *, c⁄° 
˛assifõr
 *,

116 c⁄° 
˛s_ruÀ
 *
m©ch
);

117 
˛s_ruÀ
 *
˛s_curs‹_fú°
(
˛s_curs‹
 *);

118 
˛s_ruÀ
 *
˛s_curs‹_√xt
(
˛s_curs‹
 *, cls_rule *);

120 
	#CLS_CURSOR_FOR_EACH
(
RULE
, 
MEMBER
, 
CURSOR
) \

121 
	`ASSIGN_CONTAINER
(
RULE
, 
	`˛s_curs‹_fú°
(
CURSOR
), 
MEMBER
); \

122 &(
RULE
)->
MEMBER
 !
NULL
; \

123 
	`ASSIGN_CONTAINER
(
RULE
, 
	`˛s_curs‹_√xt
(
CURSOR
, &(RULE)->
MEMBER
), \

124 
MEMBER
))

	)

126 
	#CLS_CURSOR_FOR_EACH_SAFE
(
RULE
, 
NEXT
, 
MEMBER
, 
CURSOR
) \

127 
	`ASSIGN_CONTAINER
(
RULE
, 
	`˛s_curs‹_fú°
(
CURSOR
), 
MEMBER
); \

128 (&(
RULE
)->
MEMBER
 !
NULL
 \

129 ? 
	`ASSIGN_CONTAINER
(
NEXT
, 
	`˛s_curs‹_√xt
(
CURSOR
, &(
RULE
)->
MEMBER
), \

130 
MEMBER
) \

132 (
RULE
Ë(
NEXT
))

	)

134 #ifde‡
__˝lu•lus


	@/home/lsch/mytest/openvswitch-1.9.0/lib/command-line.c

17 
	~<c⁄fig.h
>

18 
	~"comm™d-löe.h
"

19 
	~<gë›t.h
>

20 
	~<limôs.h
>

21 
	~<°dlib.h
>

22 
	~"utû.h
"

23 
	~"vlog.h
"

25 
VLOG_DEFINE_THIS_MODULE
(
comm™d_löe
);

31 
	$l⁄g_›ti⁄s_to_sh‹t_›ti⁄s
(c⁄° 
›ti⁄
 
›ti⁄s
[])

33 
sh‹t_›ti⁄s
[
UCHAR_MAX
 * 3 + 1];

34 *
p
 = 
sh‹t_›ti⁄s
;

36 ; 
›ti⁄s
->
«me
; options++) {

37 c⁄° 
›ti⁄
 *
o
 = 
›ti⁄s
;

38 i‡(
o
->
Êag
 =
NULL
 && o->
vÆ
 > 0 && o->vÆ <
UCHAR_MAX
) {

39 *
p
++ = 
o
->
vÆ
;

40 i‡(
o
->
has_¨g
 =
ªquúed_¨gumít
) {

41 *
p
++ = ':';

42 } i‡(
o
->
has_¨g
 =
›ti⁄Æ_¨gumít
) {

43 *
p
++ = ':';

44 *
p
++ = ':';

48 *
p
 = '\0';

50  
	`x°rdup
(
sh‹t_›ti⁄s
);

51 
	}
}

60 
	$run_comm™d
(
¨gc
, *
¨gv
[], c⁄° 
comm™d
 
comm™ds
[])

62 c⁄° 
comm™d
 *
p
;

64 i‡(
¨gc
 < 1) {

65 
	`ovs_Áèl
(0, "missing commandÇame; use --help for help");

68 
p
 = 
comm™ds
;Ö->
«me
 !
NULL
;Ö++) {

69 i‡(!
	`°rcmp
(
p
->
«me
, 
¨gv
[0])) {

70 
n_¨g
 = 
¨gc
 - 1;

71 i‡(
n_¨g
 < 
p
->
mö_¨gs
) {

72 
	`VLOG_FATAL
( "'%s' commandÑequiresátÜeast %dárguments",

73 
p
->
«me
,Ö->
mö_¨gs
);

74 } i‡(
n_¨g
 > 
p
->
max_¨gs
) {

75 
	`VLOG_FATAL
("'%s' commandÅakesát most %dárguments",

76 
p
->
«me
,Ö->
max_¨gs
);

78 
p
->
	`h™dÀr
(
¨gc
, 
¨gv
);

79 i‡(
	`„º‹
(
°dout
)) {

80 
	`VLOG_FATAL
("writeÅo stdout failed");

82 i‡(
	`„º‹
(
°dîr
)) {

83 
	`VLOG_FATAL
("writeÅo stderr failed");

90 
	`VLOG_FATAL
("unknow¿comm™d '%s'; u£ --hñ∞f‹ hñp", 
¨gv
[0]);

91 
	}
}

95 #ifde‡
LINUX_DATAPATH


96 *
	g¨gv_°¨t
;

97 
size_t
 
	g¨gv_size
;

98 *
	gßved_¥o˘ôÀ
;

109 
	$¥o˘ôÀ_öô
(
¨gc
, **
¨gv
)

111 
i
;

113 i‡(!
¨gc
 || !
¨gv
[0]) {

119 
¨gv_°¨t
 = 
¨gv
[0];

120 
¨gv_size
 = 
	`°æí
(
¨gv
[0]) + 1;

121 
¨gv
[0] = 
	`x°rdup
(argv[0]);

123 
i
 = 1; i < 
¨gc
; i++) {

124 
size_t
 
size
 = 
	`°æí
(
¨gv
[
i
]) + 1;

127 i‡(
¨gv
[
i
] + 
size
 =
¨gv_°¨t
) {

129 
¨gv_°¨t
 -
size
;

130 
¨gv_size
 +
size
;

131 } i‡(
¨gv
[
i
] =
¨gv_°¨t
 + 
¨gv_size
) {

133 
¨gv_size
 +
size
;

139 
¨gv
[
i
] = 
	`x°rdup
(argv[i]);

141 
	}
}

146 
	$¥o˘ôÀ_£t
(c⁄° *
f‹m©
, ...)

148 
va_li°
 
¨gs
;

149 
n
;

151 i‡(!
¨gv_°¨t
 || 
¨gv_size
 < 8) {

155 i‡(!
ßved_¥o˘ôÀ
) {

156 
ßved_¥o˘ôÀ
 = 
	`xmemdup
(
¨gv_°¨t
, 
¨gv_size
);

159 
	`va_°¨t
(
¨gs
, 
f‹m©
);

160 
n
 = 
	`¢¥ötf
(
¨gv_°¨t
, 
¨gv_size
, "%s: ", 
¥ogøm_«me
);

161 i‡(
n
 < 
¨gv_size
) {

162 
n
 +
	`v¢¥ötf
(
¨gv_°¨t
 +Ç, 
¨gv_size
 -Ç, 
f‹m©
, 
¨gs
);

164 i‡(
n
 >
¨gv_size
) {

166 
	`°r˝y
(&
¨gv_°¨t
[
¨gv_size
 - 4], "...");

170 
	`mem£t
(&
¨gv_°¨t
[
n
], '\0', 
¨gv_size
 -Ç);

172 
	`va_íd
(
¨gs
);

173 
	}
}

177 
	$¥o˘ôÀ_ª°‹e
()

179 i‡(
ßved_¥o˘ôÀ
) {

180 
	`mem˝y
(
¨gv_°¨t
, 
ßved_¥o˘ôÀ
, 
¨gv_size
);

181 
	`‰ì
(
ßved_¥o˘ôÀ
);

182 
ßved_¥o˘ôÀ
 = 
NULL
;

184 
	}
}

189 
	$¥o˘ôÀ_öô
(
¨gc
 
OVS_UNUSED
, **
¨gv
 OVS_UNUSED)

191 
	}
}

193 #i‚de‡
__FªeBSD__


196 
	$¥o˘ôÀ_£t
(c⁄° *
f‹m©
 
OVS_UNUSED
, ...)

198 
	}
}

202 
	$¥o˘ôÀ_ª°‹e
()

204 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/command-line.h

17 #i‚de‡
COMMAND_LINE_H


18 
	#COMMAND_LINE_H
 1

	)

22 
	~"compûî.h
"

24 
	g›ti⁄
;

26 
	scomm™d
 {

27 c⁄° *
	m«me
;

28 
	mmö_¨gs
;

29 
	mmax_¨gs
;

30 (*
	mh™dÀr
)(
	m¨gc
, *
	m¨gv
[]);

33 *
l⁄g_›ti⁄s_to_sh‹t_›ti⁄s
(c⁄° 
›ti⁄
 *
›ti⁄s
);

34 
run_comm™d
(
¨gc
, *
¨gv
[], c⁄° 
comm™d
[]);

36 
¥o˘ôÀ_öô
(
¨gc
, **
¨gv
);

37 #ifde‡
__FªeBSD__


38 
	#¥o˘ôÀ_£t
 
£çro˘ôÀ


	)

40 
	$¥o˘ôÀ_£t
(const *, ...)

41 
	`PRINTF_FORMAT
(1, 2);

43 
	`¥o˘ôÀ_ª°‹e
();

	@/home/lsch/mytest/openvswitch-1.9.0/lib/compiler.h

17 #i‚de‡
COMPILER_H


18 
	#COMPILER_H
 1

	)

20 #i‡
__GNUC__
 && !
__CHECKER__


21 
	#NO_RETURN
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

22 
	#OVS_UNUSED
 
	`__©åibuã__
((
__unu£d__
))

	)

23 
	#PRINTF_FORMAT
(
FMT
, 
ARG1
Ë
	`__©åibuã__
((
	`__f‹m©__
(
¥ötf
, FMT, ARG1)))

	)

24 
	#STRFTIME_FORMAT
(
FMT
Ë
	`__©åibuã__
((
	`__f‹m©__
(
__°r·ime__
, FMT, 0)))

	)

25 
	#MALLOC_LIKE
 
	`__©åibuã__
((
__mÆloc__
))

	)

26 
	#ALWAYS_INLINE
 
	`__©åibuã__
((
Æways_ölöe
))

	)

27 
	#WARN_UNUSED_RESULT
 
	`__©åibuã__
((
__w¨n_unu£d_ªsu…__
))

	)

28 
	#SENTINEL
(
N
Ë
	`__©åibuã__
((
	`£¡öñ
(N)))

	)

30 
	#NO_RETURN


	)

31 
	#OVS_UNUSED


	)

32 
	#PRINTF_FORMAT
(
FMT
, 
ARG1
)

	)

33 
	#STRFTIME_FORMAT
(
FMT
)

	)

34 
	#MALLOC_LIKE


	)

35 
	#ALWAYS_INLINE


	)

36 
	#WARN_UNUSED_RESULT


	)

37 
	#SENTINEL
(
N
)

	)

52 #i‡
__GNUC__
 && !
__CHECKER__


53 
	#OVS_PACKED_ENUM
 
	`__©åibuã__
((
__∑cked__
))

	)

55 
	#OVS_PACKED_ENUM


	)

	@/home/lsch/mytest/openvswitch-1.9.0/lib/coverage.c

17 
	~<c⁄fig.h
>

18 
	~"covîage.h
"

19 
	~<öây≥s.h
>

20 
	~<°dlib.h
>

21 
	~"dy«mic-°rög.h
"

22 
	~"hash.h
"

23 
	~"svec.h
"

24 
	~"timevÆ.h
"

25 
	~"unix˘l.h
"

26 
	~"utû.h
"

27 
	~"vlog.h
"

29 
VLOG_DEFINE_THIS_MODULE
(
covîage
);

32 #i‡
USE_LINKER_SECTIONS


33 
covîage_cou¡î
 *
__°¨t_covîage
[];

34 
covîage_cou¡î
 *
__°›_covîage
[];

35 
	#covîage_cou¡îs
 
__°¨t_covîage


	)

36 
	#n_covîage_cou¡îs
 (
__°›_covîage
 - 
__°¨t_covîage
)

	)

38 
	#COVERAGE_COUNTER
(
NAME
Ë
	`COVERAGE_DEFINE__
(NAME);

	)

39 
	~"covîage.def
"

40 #unde‡
COVERAGE_COUNTER


42 
covîage_cou¡î
 *
	gcovîage_cou¡îs
[] = {

43 
	#COVERAGE_COUNTER
(
NAME
Ë&
cou¡î_
##NAME,

	)

44 
	~"covîage.def
"

45 #unde‡
COVERAGE_COUNTER


47 
	#n_covîage_cou¡îs
 
	`ARRAY_SIZE
(
covîage_cou¡îs
)

	)

50 
	gïoch
;

52 
covîage_ªad
(
svec
 *);

55 
	$covîage_unix˘l_show
(
unix˘l_c⁄n
 *
c⁄n
, 
¨gc
 
OVS_UNUSED
,

56 c⁄° *
¨gv
[] 
OVS_UNUSED
, *
aux
 OVS_UNUSED)

58 
svec
 
löes
;

59 *
ª∂y
;

61 
	`svec_öô
(&
löes
);

62 
	`covîage_ªad
(&
löes
);

63 
ª∂y
 = 
	`svec_joö
(&
löes
, "\n", "\n");

64 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, 
ª∂y
);

65 
	`‰ì
(
ª∂y
);

66 
	`svec_de°roy
(&
löes
);

67 
	}
}

70 
	$covîage_öô
()

72 
	`unix˘l_comm™d_ªgi°î
("coverage/show", "", 0, 0,

73 
covîage_unix˘l_show
, 
NULL
);

74 
	}
}

79 
	$com∑ª_covîage_cou¡îs
(c⁄° *
a_
, c⁄° *
b_
)

81 c⁄° 
covîage_cou¡î
 *c⁄° *
≠
 = 
a_
;

82 c⁄° 
covîage_cou¡î
 *c⁄° *
bp
 = 
b_
;

83 c⁄° 
covîage_cou¡î
 *
a
 = *
≠
;

84 c⁄° 
covîage_cou¡î
 *
b
 = *
bp
;

85 i‡(
a
->
cou¡
 !
b
->count) {

86  
a
->
cou¡
 < 
b
->count ? 1 : -1;

88  
	`°rcmp
(
a
->
«me
, 
b
->name);

90 
	}
}

92 
uöt32_t


93 
	$covîage_hash
()

95 
covîage_cou¡î
 **
c
;

96 
uöt32_t
 
hash
 = 0;

97 
n_groups
, 
i
;

100 
c
 = 
	`xmÆloc
(
n_covîage_cou¡îs
 *  *c);

101 
i
 = 0; i < 
n_covîage_cou¡îs
; i++) {

102 
c
[
i
] = 
covîage_cou¡îs
[i];

104 
	`qs‹t
(
c
, 
n_covîage_cou¡îs
,  *c, 
com∑ª_covîage_cou¡îs
);

107 
n_groups
 = 0;

108 
i
 = 0; i < 
n_covîage_cou¡îs
; ) {

109 
j
;

111 i‡(!
c
[
i
]->
cou¡
) {

114 
n_groups
++;

115 
hash
 = 
	`hash_öt
(
i
, hash);

116 
j
 = 
i
; j < 
n_covîage_cou¡îs
; j++) {

117 i‡(
c
[
j
]->
cou¡
 !c[
i
]->count) {

120 
hash
 = 
	`hash_°rög
(
c
[
j
]->
«me
, hash);

122 
i
 = 
j
;

125 
	`‰ì
(
c
);

127  
	`hash_öt
(
n_groups
, 
hash
);

128 
	}
}

130 
boﬁ


131 
	$covîage_hô
(
uöt32_t
 
hash
)

133 íum { 
HIT_BITS
 = 1024, 
BITS_PER_WORD
 = 32 };

134 
uöt32_t
 
hô
[
HIT_BITS
 / 
BITS_PER_WORD
];

135 
	`BUILD_ASSERT_DECL
(
	`IS_POW2
(
HIT_BITS
));

137 
√xt_˛ór
 = 
LLONG_MIN
;

139 
bô_ödex
 = 
hash
 & (
HIT_BITS
 - 1);

140 
w‹d_ödex
 = 
bô_ödex
 / 
BITS_PER_WORD
;

141 
w‹d_mask
 = 1u << (
bô_ödex
 % 
BITS_PER_WORD
);

144 i‡(
	`time_m£c
(Ë>
√xt_˛ór
) {

145 
	`mem£t
(
hô
, 0,  hit);

146 
√xt_˛ór
 = 
	`time_m£c
() + 60 * 60 * 24 * 1000LL;

149 i‡(
hô
[
w‹d_ödex
] & 
w‹d_mask
) {

150  
åue
;

152 
hô
[
w‹d_ödex
] |
w‹d_mask
;

153  
Ál£
;

155 
	}
}

165 
	$covîage_log
()

167 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 3);

169 i‡(!
	`VLOG_DROP_INFO
(&
æ
)) {

170 
uöt32_t
 
hash
 = 
	`covîage_hash
();

171 i‡(
	`covîage_hô
(
hash
)) {

172 
	`VLOG_INFO
("Skipping details of duplicateÉvent coverage for "

173 "hash=%08"
PRIx32
" i¿ïoch %u", 
hash
, 
ïoch
);

175 
svec
 
löes
;

176 c⁄° *
löe
;

177 
size_t
 
i
;

179 
	`svec_öô
(&
löes
);

180 
	`covîage_ªad
(&
löes
);

181 
	`SVEC_FOR_EACH
 (
i
, 
löe
, &
löes
) {

182 
	`VLOG_INFO
("%s", 
löe
);

184 
	`svec_de°roy
(&
löes
);

187 
	}
}

190 
	$covîage_ªad_cou¡î
(
svec
 *
löes
, c⁄° 
covîage_cou¡î
 *
c
)

192 
	`svec_add_noc›y
(
löes
, 
	`xa•rötf
("%-24s %5u / %9llu",

193 
c
->
«me
, c->
cou¡
, c->cou¡ + c->
tŸÆ
));

194 
	}
}

198 
	$covîage_ªad
(
svec
 *
löes
)

200 
size_t
 
n_√vî_hô
;

201 
uöt32_t
 
hash
;

202 
size_t
 
i
;

204 
hash
 = 
	`covîage_hash
();

206 
n_√vî_hô
 = 0;

207 
	`svec_add_noc›y
(
löes
, 
	`xa•rötf
("Event coverage (epoch %u/entireÑun), "

208 "hash=%08"
PRIx32
":", 
ïoch
, 
hash
));

209 
i
 = 0; i < 
n_covîage_cou¡îs
; i++) {

210 
covîage_cou¡î
 *
c
 = 
covîage_cou¡îs
[
i
];

211 i‡(
c
->
cou¡
) {

212 
	`covîage_ªad_cou¡î
(
löes
, 
c
);

215 
i
 = 0; i < 
n_covîage_cou¡îs
; i++) {

216 
covîage_cou¡î
 *
c
 = 
covîage_cou¡îs
[
i
];

217 i‡(!
c
->
cou¡
) {

218 i‡(
c
->
tŸÆ
) {

219 
	`covîage_ªad_cou¡î
(
löes
, 
c
);

221 
n_√vî_hô
++;

225 
	`svec_add_noc›y
(
löes
, 
	`xa•rötf
("%zuÉvít†√vî hô", 
n_√vî_hô
));

226 
	}
}

230 
	$covîage_˛ór
()

232 
size_t
 
i
;

234 
ïoch
++;

235 
i
 = 0; i < 
n_covîage_cou¡îs
; i++) {

236 
covîage_cou¡î
 *
c
 = 
covîage_cou¡îs
[
i
];

237 
c
->
tŸÆ
 +c->
cou¡
;

238 
c
->
cou¡
 = 0;

240 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/coverage.h

17 #i‚de‡
COVERAGE_H


18 
	#COVERAGE_H
 1

	)

30 
	~"vlog.h
"

33 
	scovîage_cou¡î
 {

34 c⁄° *
	m«me
;

35 
	mcou¡
;

36 
	mtŸÆ
;

41 #i‡
USE_LINKER_SECTIONS


42 
	#COVERAGE_DEFINE
(
COUNTER
) \

43 
	`COVERAGE_DEFINE__
(
COUNTER
); \

44 
covîage_cou¡î
 *
cou¡î_±r_
##
COUNTER
; \

45 
covîage_cou¡î
 *
cou¡î_±r_
##
COUNTER
 \

46 
	`__©åibuã__
((
	`£˘i⁄
("covîage"))Ë&
cou¡î_
##
COUNTER


	)

48 
	#COVERAGE_DEFINE
(
MODULE
) \

49 
covîage_cou¡î
 
cou¡î_
##
MODULE


	)

53 
	#COVERAGE_INC
(
COUNTER
Ë
cou¡î_
##COUNTER.
cou¡
++;

	)

56 
	#COVERAGE_ADD
(
COUNTER
, 
AMOUNT
Ë
cou¡î_
##COUNTER.
cou¡
 +(AMOUNT);

	)

58 
covîage_öô
();

59 
covîage_log
();

60 
covîage_˛ór
();

63 
	#COVERAGE_DEFINE__
(
COUNTER
) \

64 
covîage_cou¡î
 
cou¡î_
##
COUNTER
; \

65 
covîage_cou¡î
 
cou¡î_
##
COUNTER
 = { #COUNTER, 0, 0 }

	)

	@/home/lsch/mytest/openvswitch-1.9.0/lib/csum.c

17 
	~<c⁄fig.h
>

18 
	~"csum.h
"

19 
	~"u«lig√d.h
"

21 #i‚de‡
__CHECKER__


29 
ovs_be16


30 
	$csum
(c⁄° *
d©a
, 
size_t
 
n
)

32  
	`csum_föish
(
	`csum_c⁄töue
(0, 
d©a
, 
n
));

33 
	}
}

38 
uöt32_t


39 
	$csum_add16
(
uöt32_t
 
∑πül
, 
ovs_be16
 
√w
)

41  
∑πül
 + 
√w
;

42 
	}
}

47 
uöt32_t


48 
	$csum_add32
(
uöt32_t
 
∑πül
, 
ovs_be32
 
√w
)

50  
∑πül
 + (
√w
 >> 16) + (new & 0xffff);

51 
	}
}

58 
uöt32_t


59 
	$csum_c⁄töue
(
uöt32_t
 
∑πül
, c⁄° *
d©a_
, 
size_t
 
n
)

61 c⁄° 
ovs_be16
 *
d©a
 = 
d©a_
;

63 ; 
n
 > 1;Ç -2, 
d©a
++) {

64 
∑πül
 = 
	`csum_add16
’¨tül, 
	`gë_u«lig√d_be16
(
d©a
));

66 i‡(
n
) {

67 
∑πül
 +*(
uöt8_t
 *Ë
d©a
;

69  
∑πül
;

70 
	}
}

79 
ovs_be16


80 
	$csum_föish
(
uöt32_t
 
∑πül
)

82 
∑πül
 >> 16) {

83 
∑πül
 = (partial & 0xffff) + (partial >> 16);

85  ~
∑πül
;

86 
	}
}

91 
ovs_be16


92 
	$ªˇlc_csum16
(
ovs_be16
 
ﬁd_csum
, ovs_be16 
ﬁd_u16
, ovs_be16 
√w_u16
)

98 
uöt16_t
 
hc_com∂emít
 = ~
ﬁd_csum
;

99 
uöt16_t
 
m_com∂emít
 = ~
ﬁd_u16
;

100 
uöt16_t
 
m_¥ime
 = 
√w_u16
;

101 
uöt32_t
 
sum
 = 
hc_com∂emít
 + 
m_com∂emít
 + 
m_¥ime
;

102  
	`csum_föish
(
sum
);

103 
	}
}

108 
ovs_be16


109 
	$ªˇlc_csum32
(
ovs_be16
 
ﬁd_csum
, 
ovs_be32
 
ﬁd_u32
, ovs_be32 
√w_u32
)

111  
	`ªˇlc_csum16
‘eˇlc_csum16(
ﬁd_csum
, 
ﬁd_u32
, 
√w_u32
),

112 
ﬁd_u32
 >> 16, 
√w_u32
 >> 16);

113 
	}
}

118 
ovs_be16


119 
	$ªˇlc_csum128
(
ovs_be16
 
ﬁd_csum
, 
ovs_be32
 
ﬁd_u32
[4],

120 c⁄° 
ovs_be32
 
√w_u32
[4])

122 
ovs_be16
 
√w_csum
 = 
ﬁd_csum
;

123 
i
;

125 
i
 = 0; i < 4; ++i) {

126 
√w_csum
 = 
	`ªˇlc_csum32
“ew_csum, 
ﬁd_u32
[
i
], 
√w_u32
[i]);

128  
√w_csum
;

129 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/csum.h

17 #i‚de‡
CSUM_H


18 
	#CSUM_H
 1

	)

20 
	~<°ddef.h
>

21 
	~<°döt.h
>

22 
	~"›ívswôch/ty≥s.h
"

24 
ovs_be16
 
csum
(c⁄° *, 
size_t
);

25 
uöt32_t
 
csum_add16
(uöt32_à
∑πül
, 
ovs_be16
);

26 
uöt32_t
 
csum_add32
(uöt32_à
∑πül
, 
ovs_be32
);

27 
uöt32_t
 
csum_c⁄töue
(uöt32_à
∑πül
, c⁄° *, 
size_t
);

28 
ovs_be16
 
csum_föish
(
uöt32_t
 
∑πül
);

29 
ovs_be16
 
ªˇlc_csum16
(ovs_be16 
ﬁd_csum
, ovs_be16 
ﬁd_u16
, ovs_be16 
√w_u16
);

30 
ovs_be16
 
ªˇlc_csum32
(ovs_be16 
ﬁd_csum
, 
ovs_be32
 
ﬁd_u32
, ovs_be32 
√w_u32
);

31 
ovs_be16
 
ªˇlc_csum128
(ovs_be16 
ﬁd_csum
, 
ovs_be32
 
ﬁd_u32
[4],

32 c⁄° 
ovs_be32
 
√w_u32
[4]);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/daemon.c

17 
	~<c⁄fig.h
>

18 
	~"d´m⁄.h
"

19 
	~<as£π.h
>

20 
	~<î∫o.h
>

21 
	~<f˙é.h
>

22 
	~<sig«l.h
>

23 
	~<°dlib.h
>

24 
	~<°rög.h
>

25 
	~<sys/ªsour˚.h
>

26 
	~<sys/waô.h
>

27 
	~<sys/°©.h
>

28 
	~<uni°d.h
>

29 
	~"comm™d-löe.h
"

30 
	~"Áèl-sig«l.h
"

31 
	~"dús.h
"

32 
	~"lockfûe.h
"

33 
	~"¥o˚ss.h
"

34 
	~"sockë-utû.h
"

35 
	~"timevÆ.h
"

36 
	~"utû.h
"

37 
	~"vlog.h
"

39 
VLOG_DEFINE_THIS_MODULE
(
d´m⁄
);

42 
boﬁ
 
	gdëach
;

43 
boﬁ
 
	gdëached
;

46 *
	gpidfûe
;

49 
dev_t
 
	gpidfûe_dev
;

50 
öo_t
 
	gpidfûe_öo
;

54 
boﬁ
 
	govîwrôe_pidfûe
;

57 
boﬁ
 
	gchdú_
 = 
åue
;

60 
	gd´m⁄ize_fd
 = -1;

64 
boﬁ
 
	gm⁄ô‹
;

68 
boﬁ
 
	gßve_fds
[3];

70 
check_Æªady_ru¬ög
();

71 
lock_pidfûe
(
FILE
 *, 
comm™d
);

76 
	$make_pidfûe_«me
(c⁄° *
«me
)

78  (!
«me


79 ? 
	`xa•rötf
("%s/%s.pid", 
	`ovs_rundú
(), 
¥ogøm_«me
)

80 : 
	`abs_fûe_«me
(
	`ovs_rundú
(), 
«me
));

81 
	}
}

90 
	$£t_pidfûe
(c⁄° *
«me
)

92 
	`‰ì
(
pidfûe
);

93 
pidfûe
 = 
	`make_pidfûe_«me
(
«me
);

94 
	}
}

100 
	$gë_pidfûe
()

102  
pidfûe
;

103 
	}
}

107 
	$£t_no_chdú
()

109 
chdú_
 = 
Ál£
;

110 
	}
}

113 
boﬁ


114 
	$is_chdú_íabÀd
()

116  
chdú_
;

117 
	}
}

123 
	$ign‹e_exi°ög_pidfûe
()

125 
ovîwrôe_pidfûe
 = 
åue
;

126 
	}
}

131 
	$£t_dëach
()

133 
dëach
 = 
åue
;

134 
	}
}

137 
boﬁ


138 
	$gë_dëach
()

140  
dëach
;

141 
	}
}

146 
	$d´m⁄_£t_m⁄ô‹
()

148 
m⁄ô‹
 = 
åue
;

149 
	}
}

159 
	$d´m⁄_ßve_fd
(
fd
)

161 
	`as£π
(
fd
 =
STDIN_FILENO
 || fd =
STDOUT_FILENO
 || fd =
STDERR_FILENO
);

162 
ßve_fds
[
fd
] = 
åue
;

163 
	}
}

169 
	$make_pidfûe
()

171 
pid
 = 
	`gëpid
();

172 
°©
 
s
;

173 *
tmpfûe
;

174 
FILE
 *
fûe
;

175 
îr‹
;

178 
tmpfûe
 = 
	`xa•rötf
("%s.tmp%ld", 
pidfûe
, 
pid
);

179 
	`Áèl_sig«l_add_fûe_to_u∆ök
(
tmpfûe
);

180 
fûe
 = 
	`f›í
(
tmpfûe
, "w+");

181 i‡(!
fûe
) {

182 
	`VLOG_FATAL
("%s: cª©êÁûed (%s)", 
tmpfûe
, 
	`°ªº‹
(
î∫o
));

185 i‡(
	`f°©
(
	`fûío
(
fûe
), &
s
) == -1) {

186 
	`VLOG_FATAL
("%s: f°© faûed (%s)", 
tmpfûe
, 
	`°ªº‹
(
î∫o
));

189 
	`Ârötf
(
fûe
, "%ld\n", 
pid
);

190 i‡(
	`fÊush
(
fûe
Ë=
EOF
) {

191 
	`VLOG_FATAL
("%s: wrôêÁûed (%s)", 
tmpfûe
, 
	`°ªº‹
(
î∫o
));

194 
îr‹
 = 
	`lock_pidfûe
(
fûe
, 
F_SETLK
);

195 i‡(
îr‹
) {

196 
	`VLOG_FATAL
("%s: f˙é(F_SETLKËÁûed (%s)", 
tmpfûe
, 
	`°ªº‹
(
îr‹
));

200 i‡(
ovîwrôe_pidfûe
) {

201 i‡(
	`ª«me
(
tmpfûe
, 
pidfûe
) < 0) {

202 
	`VLOG_FATAL
("failedÅoÑename \"%s\"Åo \"%s\" (%s)",

203 
tmpfûe
, 
pidfûe
, 
	`°ªº‹
(
î∫o
));

207 
îr‹
 = 
	`lök
(
tmpfûe
, 
pidfûe
Ë=-1 ? 
î∫o
 : 0;

208 i‡(
îr‹
 =
EEXIST
) {

209 
	`check_Æªady_ru¬ög
();

211 } 
îr‹
 =
EINTR
 ||Éº‹ =
EEXIST
);

212 i‡(
îr‹
) {

213 
	`VLOG_FATAL
("failedÅoÜink \"%s\"ás \"%s\" (%s)",

214 
tmpfûe
, 
pidfûe
, 
	`°ªº‹
(
îr‹
));

219 
	`Áèl_sig«l_add_fûe_to_u∆ök
(
pidfûe
);

222 i‡(!
ovîwrôe_pidfûe
) {

223 
îr‹
 = 
	`Áèl_sig«l_u∆ök_fûe_now
(
tmpfûe
);

224 i‡(
îr‹
) {

225 
	`VLOG_FATAL
("%s: u∆ök faûed (%s)", 
tmpfûe
, 
	`°ªº‹
(
îr‹
));

233 
pidfûe_dev
 = 
s
.
°_dev
;

234 
pidfûe_öo
 = 
s
.
°_öo
;

235 
	`‰ì
(
tmpfûe
);

236 
	`‰ì
(
pidfûe
);

237 
pidfûe
 = 
NULL
;

238 
	}
}

243 
	$d´m⁄ize
()

245 
	`d´m⁄ize_°¨t
();

246 
	`d´m⁄ize_com∂ëe
();

247 
	}
}

255 
pid_t


256 
	$f‹k_™d_˛ón_up
()

258 
pid_t
 
pid
;

260 
pid
 = 
	`f‹k
();

261 i‡(
pid
 > 0) {

263 
	`Áèl_sig«l_f‹k
();

264 } i‡(!
pid
) {

266 
	`time_po°f‹k
();

267 
	`lockfûe_po°f‹k
();

269 
	`VLOG_FATAL
("f‹k faûed (%s)", 
	`°ªº‹
(
î∫o
));

272  
pid
;

273 
	}
}

286 
pid_t


287 
	$f‹k_™d_waô_f‹_°¨tup
(*
fdp
)

289 
fds
[2];

290 
pid_t
 
pid
;

292 
	`xpùe
(
fds
);

294 
pid
 = 
	`f‹k_™d_˛ón_up
();

295 i‡(
pid
 > 0) {

297 
size_t
 
byãs_ªad
;

298 
c
;

300 
	`˛o£
(
fds
[1]);

301 i‡(
	`ªad_fuŒy
(
fds
[0], &
c
, 1, &
byãs_ªad
) != 0) {

302 
ªtvÆ
;

303 
°©us
;

306 
ªtvÆ
 = 
	`waôpid
(
pid
, &
°©us
, 0);

307 } 
ªtvÆ
 =-1 && 
î∫o
 =
EINTR
);

309 i‡(
ªtvÆ
 =
pid
) {

310 i‡(
	`WIFEXITED
(
°©us
Ë&& 
	`WEXITSTATUS
(status)) {

313 
	`exô
(
	`WEXITSTATUS
(
°©us
));

315 *
°©us_msg
 = 
	`¥o˚ss_°©us_msg
(
°©us
);

316 
	`VLOG_FATAL
("fork child died before signaling startup (%s)",

317 
°©us_msg
);

319 } i‡(
ªtvÆ
 < 0) {

320 
	`VLOG_FATAL
("waôpid faûed (%s)", 
	`°ªº‹
(
î∫o
));

322 
	`NOT_REACHED
();

325 
	`˛o£
(
fds
[0]);

326 *
fdp
 = -1;

327 } i‡(!
pid
) {

329 
	`˛o£
(
fds
[0]);

330 *
fdp
 = 
fds
[1];

333  
pid
;

334 
	}
}

337 
	$f‹k_nŸify_°¨tup
(
fd
)

339 i‡(
fd
 != -1) {

340 
size_t
 
byãs_wrôãn
;

341 
îr‹
;

343 
îr‹
 = 
	`wrôe_fuŒy
(
fd
, "", 1, &
byãs_wrôãn
);

344 i‡(
îr‹
) {

345 
	`VLOG_FATAL
("pùêwrôêÁûed (%s)", 
	`°ªº‹
(
îr‹
));

348 
	`˛o£
(
fd
);

350 
	}
}

352 
boﬁ


353 
	$should_ª°¨t
(
°©us
)

355 i‡(
	`WIFSIGNALED
(
°©us
)) {

356 c⁄° 
îr‹_sig«ls
[] = {

357 
SIGABRT
, 
SIGALRM
, 
SIGBUS
, 
SIGFPE
, 
SIGILL
, 
SIGPIPE
, 
SIGSEGV
,

358 
SIGXCPU
, 
SIGXFSZ


361 
size_t
 
i
;

363 
i
 = 0; i < 
	`ARRAY_SIZE
(
îr‹_sig«ls
); i++) {

364 i‡(
îr‹_sig«ls
[
i
] =
	`WTERMSIG
(
°©us
)) {

365  
åue
;

369  
Ál£
;

370 
	}
}

373 
	$m⁄ô‹_d´m⁄
(
pid_t
 
d´m⁄_pid
)

376 
time_t
 
œ°_ª°¨t
;

377 *
°©us_msg
;

378 
¸ashes
;

380 
sub¥ogøm_«me
 = "monitor";

381 
°©us_msg
 = 
	`x°rdup
("healthy");

382 
œ°_ª°¨t
 = 
TIME_MIN
;

383 
¸ashes
 = 0;

385 
ªtvÆ
;

386 
°©us
;

388 
	`¥o˘ôÀ_£t
("monitoringÖid %lu (%s)",

389 (Ë
d´m⁄_pid
, 
°©us_msg
);

392 
ªtvÆ
 = 
	`waôpid
(
d´m⁄_pid
, &
°©us
, 0);

393 } 
ªtvÆ
 =-1 && 
î∫o
 =
EINTR
);

395 i‡(
ªtvÆ
 == -1) {

396 
	`VLOG_FATAL
("waôpid faûed (%s)", 
	`°ªº‹
(
î∫o
));

397 } i‡(
ªtvÆ
 =
d´m⁄_pid
) {

398 *
s
 = 
	`¥o˚ss_°©us_msg
(
°©us
);

399 i‡(
	`should_ª°¨t
(
°©us
)) {

400 
	`‰ì
(
°©us_msg
);

401 
°©us_msg
 = 
	`xa•rötf
("%d crashes:Öid %lu died, %s",

402 ++
¸ashes
,

403 (Ë
d´m⁄_pid
, 
s
);

404 
	`‰ì
(
s
);

406 i‡(
	`WCOREDUMP
(
°©us
)) {

408 
æimô
 
r
;

410 
r
.
æim_cur
 = 0;

411 
r
.
æim_max
 = 0;

412 i‡(
	`£ålimô
(
RLIMIT_CORE
, &
r
) == -1) {

413 
	`VLOG_WARN
("failedÅo disable core dumps: %s",

414 
	`°ªº‹
(
î∫o
));

419 i‡(
	`time
(
NULL
Ë< 
œ°_ª°¨t
 + 10) {

420 
	`VLOG_WARN
("%s, waiting until 10 seconds sinceÜast "

421 "ª°¨t", 
°©us_msg
);

423 
time_t
 
now
 = 
	`time
(
NULL
);

424 
time_t
 
wakeup
 = 
œ°_ª°¨t
 + 10;

425 i‡(
now
 >
wakeup
) {

428 
	`¶ìp
(
wakeup
 - 
now
);

431 
œ°_ª°¨t
 = 
	`time
(
NULL
);

433 
	`VLOG_ERR
("%s,Ñe°¨tög", 
°©us_msg
);

434 
d´m⁄_pid
 = 
	`f‹k_™d_waô_f‹_°¨tup
(&
d´m⁄ize_fd
);

435 i‡(!
d´m⁄_pid
) {

439 
	`VLOG_INFO
("pid %lu died, %s,Éxiting",

440 (Ë
d´m⁄_pid
, 
s
);

441 
	`‰ì
(
s
);

442 
	`exô
(0);

446 
	`‰ì
(
°©us_msg
);

449 
	`¥o˘ôÀ_ª°‹e
();

450 
sub¥ogøm_«me
 = "";

451 
	}
}

457 
	$˛o£_°™d¨d_fds
()

459 
nuŒ_fd
 = 
	`gë_nuŒ_fd
();

460 i‡(
nuŒ_fd
 >= 0) {

461 
fd
;

463 
fd
 = 0; fd < 3; fd++) {

464 i‡(!
ßve_fds
[
fd
]) {

465 
	`dup2
(
nuŒ_fd
, 
fd
);

471 
	`vlog_£t_Àvñs
(
NULL
, 
VLF_CONSOLE
, 
VLL_OFF
);

472 
	}
}

480 
	$d´m⁄ize_°¨t
()

482 
d´m⁄ize_fd
 = -1;

484 i‡(
dëach
) {

485 i‡(
	`f‹k_™d_waô_f‹_°¨tup
(&
d´m⁄ize_fd
) > 0) {

487 
	`exô
(0);

491 
	`£tsid
();

494 i‡(
m⁄ô‹
) {

495 
ßved_d´m⁄ize_fd
 = 
d´m⁄ize_fd
;

496 
pid_t
 
d´m⁄_pid
;

498 
d´m⁄_pid
 = 
	`f‹k_™d_waô_f‹_°¨tup
(&
d´m⁄ize_fd
);

499 i‡(
d´m⁄_pid
 > 0) {

501 
	`f‹k_nŸify_°¨tup
(
ßved_d´m⁄ize_fd
);

502 
	`˛o£_°™d¨d_fds
();

503 
	`m⁄ô‹_d´m⁄
(
d´m⁄_pid
);

508 i‡(
pidfûe
) {

509 
	`make_pidfûe
();

514 
	`vlog_öô
();

515 
	}
}

523 
	$d´m⁄ize_com∂ëe
()

525 i‡(!
dëached
) {

526 
dëached
 = 
åue
;

528 
	`f‹k_nŸify_°¨tup
(
d´m⁄ize_fd
);

529 
d´m⁄ize_fd
 = -1;

530 
	`d´m⁄ize_po°_dëach
();

532 
	}
}

542 
	$d´m⁄ize_po°_dëach
()

544 i‡(
dëach
) {

545 i‡(
chdú_
) {

546 
	`ign‹e
(
	`chdú
("/"));

548 
	`˛o£_°™d¨d_fds
();

550 
	}
}

553 
	$d´m⁄_ußge
()

555 
	`¥ötf
(

562 
	`ovs_rundú
(), 
¥ogøm_«me
);

563 
	}
}

566 
	$lock_pidfûe__
(
FILE
 *
fûe
, 
comm™d
, 
Êock
 *
lck
)

568 
îr‹
;

570 
lck
->
l_ty≥
 = 
F_WRLCK
;

571 
lck
->
l_whí˚
 = 
SEEK_SET
;

572 
lck
->
l_°¨t
 = 0;

573 
lck
->
l_Àn
 = 0;

574 
lck
->
l_pid
 = 0;

577 
îr‹
 = 
	`f˙é
(
	`fûío
(
fûe
), 
comm™d
, 
lck
Ë=-1 ? 
î∫o
 : 0;

578 } 
îr‹
 =
EINTR
);

579  
îr‹
;

580 
	}
}

583 
	$lock_pidfûe
(
FILE
 *
fûe
, 
comm™d
)

585 
Êock
 
lck
;

587  
	`lock_pidfûe__
(
fûe
, 
comm™d
, &
lck
);

588 
	}
}

590 
pid_t


591 
	$ªad_pidfûe__
(c⁄° *
pidfûe
, 
boﬁ
 
dñëe_if_°Æe
)

593 
°©
 
s
, 
s2
;

594 
Êock
 
lck
;

595 
löe
[128];

596 
FILE
 *
fûe
;

597 
îr‹
;

599 i‡((
pidfûe_öo
 || 
pidfûe_dev
)

600 && !
	`°©
(
pidfûe
, &
s
)

601 && 
s
.
°_öo
 =
pidfûe_öo
 && s.
°_dev
 =
pidfûe_dev
) {

607  
	`gëpid
();

610 
fûe
 = 
	`f›í
(
pidfûe
, "r+");

611 i‡(!
fûe
) {

612 i‡(
î∫o
 =
ENOENT
 && 
dñëe_if_°Æe
) {

615 
îr‹
 = 
î∫o
;

616 
	`VLOG_WARN
("%s: o≥n: %s", 
pidfûe
, 
	`°ªº‹
(
îr‹
));

617 
îr‹
;

620 
îr‹
 = 
	`lock_pidfûe__
(
fûe
, 
F_GETLK
, &
lck
);

621 i‡(
îr‹
) {

622 
	`VLOG_WARN
("%s: f˙é: %s", 
pidfûe
, 
	`°ªº‹
(
îr‹
));

623 
îr‹
;

625 i‡(
lck
.
l_ty≥
 =
F_UNLCK
) {

633 i‡(!
dñëe_if_°Æe
) {

634 
îr‹
 = 
ESRCH
;

635 
	`VLOG_DBG
("%s:Öid fûêi†°Æe", 
pidfûe
);

636 
îr‹
;

640 
îr‹
 = 
	`lock_pidfûe
(
fûe
, 
F_SETLK
);

641 i‡(
îr‹
) {

643 
	`VLOG_WARN
("%s:Üo°Ña˚ÅÿlockÖidfûe", 
pidfûe
);

644 
îr‹
;

648 i‡(
	`°©
(
pidfûe
, &
s
Ë|| 
	`f°©
(
	`fûío
(
fûe
), &
s2
)

649 || 
s
.
°_öo
 !
s2
.°_öÿ|| s.
°_dev
 != s2.st_dev) {

652 
îr‹
 = 
EALREADY
;

653 
	`VLOG_WARN
("%s:Üo°Ña˚Åÿdñëêpidfûe", 
pidfûe
);

654 
îr‹
;

658 i‡(
	`u∆ök
(
pidfûe
)) {

659 
îr‹
 = 
î∫o
;

660 
	`VLOG_WARN
("%s: failedÅo delete staleÖidfile (%s)",

661 
pidfûe
, 
	`°ªº‹
(
îr‹
));

662 
îr‹
;

664 
	`VLOG_DBG
("%s: dñëed sèÀÖidfûe", 
pidfûe
);

665 
	`f˛o£
(
fûe
);

669 i‡(!
	`fgës
(
löe
, Üöe, 
fûe
)) {

670 i‡(
	`„º‹
(
fûe
)) {

671 
îr‹
 = 
î∫o
;

672 
	`VLOG_WARN
("%s:Ñód: %s", 
pidfûe
, 
	`°ªº‹
(
îr‹
));

674 
îr‹
 = 
ESRCH
;

675 
	`VLOG_WARN
("%s:Ñód: u√x≥˘edÉnd o‡fûe", 
pidfûe
);

677 
îr‹
;

680 i‡(
lck
.
l_pid
 !
	`°πoul
(
löe
, 
NULL
, 10)) {

684 
îr‹
 = 
ESRCH
;

685 
	`VLOG_WARN
("%s: staleÖidfile forÖid %s being deleted byÖid %ld",

686 
pidfûe
, 
löe
, (Ë
lck
.
l_pid
);

687 
îr‹
;

690 
	`f˛o£
(
fûe
);

691  
lck
.
l_pid
;

693 
îr‹
:

694 i‡(
fûe
) {

695 
	`f˛o£
(
fûe
);

697  -
îr‹
;

698 
	}
}

702 
pid_t


703 
	$ªad_pidfûe
(c⁄° *
pidfûe
)

705  
	`ªad_pidfûe__
(
pidfûe
, 
Ál£
);

706 
	}
}

711 
	$check_Æªady_ru¬ög
()

713 
pid
 = 
	`ªad_pidfûe__
(
pidfûe
, 
åue
);

714 i‡(
pid
 > 0) {

715 
	`VLOG_FATAL
("%s:áÃódyÑu¬ögá†pid %ld,áb‹tög", 
pidfûe
, 
pid
);

716 } i‡(
pid
 < 0) {

717 
	`VLOG_FATAL
("%s:Öidfile check failed (%s),áborting",

718 
pidfûe
, 
	`°ªº‹
(-
pid
));

720 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/daemon.h

17 #i‚de‡
DAEMON_H


18 
	#DAEMON_H
 1

	)

20 
	~<limôs.h
>

21 
	~<°dboﬁ.h
>

22 
	~<sys/ty≥s.h
>

24 
	#DAEMON_OPTION_ENUMS
 \

25 
OPT_DETACH
, \

26 
OPT_NO_CHDIR
, \

27 
OPT_OVERWRITE_PIDFILE
, \

28 
OPT_PIDFILE
, \

29 
OPT_MONITOR


	)

31 
	#DAEMON_LONG_OPTIONS
 \

32 {"dëach", 
no_¨gumít
, 
NULL
, 
OPT_DETACH
}, \

33 {"no-chdú", 
no_¨gumít
, 
NULL
, 
OPT_NO_CHDIR
}, \

34 {"pidfûe", 
›ti⁄Æ_¨gumít
, 
NULL
, 
OPT_PIDFILE
}, \

35 {"ovîwrôe-pidfûe", 
no_¨gumít
, 
NULL
, 
OPT_OVERWRITE_PIDFILE
}, \

36 {"m⁄ô‹", 
no_¨gumít
, 
NULL
, 
OPT_MONITOR
}

	)

38 
	#DAEMON_OPTION_HANDLERS
 \

39 
OPT_DETACH
: \

40 
	`£t_dëach
(); \

43 
OPT_NO_CHDIR
: \

44 
	`£t_no_chdú
(); \

47 
OPT_PIDFILE
: \

48 
	`£t_pidfûe
(
›èrg
); \

51 
OPT_OVERWRITE_PIDFILE
: \

52 
	`ign‹e_exi°ög_pidfûe
(); \

55 
OPT_MONITOR
: \

56 
	`d´m⁄_£t_m⁄ô‹
(); \

57 ;

	)

59 *
make_pidfûe_«me
(c⁄° *
«me
);

60 
£t_pidfûe
(c⁄° *
«me
);

61 c⁄° *
gë_pidfûe
();

62 
£t_no_chdú
();

63 
boﬁ
 
is_chdú_íabÀd
();

64 
£t_dëach
();

65 
boﬁ
 
gë_dëach
();

66 
d´m⁄_£t_m⁄ô‹
();

67 
d´m⁄_ßve_fd
(
fd
);

68 
d´m⁄ize
();

69 
d´m⁄ize_°¨t
();

70 
d´m⁄ize_com∂ëe
();

71 
ign‹e_exi°ög_pidfûe
();

72 
d´m⁄_ußge
();

73 
pid_t
 
ªad_pidfûe
(c⁄° *
«me
);

74 
pid_t
 
ªad_pidfûe_if_exi°s
(c⁄° *
«me
);

76 
pid_t
 
f‹k_™d_˛ón_up
();

77 
d´m⁄ize_po°_dëach
();

	@/home/lsch/mytest/openvswitch-1.9.0/lib/dhcp.h

17 #i‚de‡
DHCP_H


18 
	#DHCP_H
 1

	)

20 
	~<°döt.h
>

21 
	~"∑ckës.h
"

22 
	~"utû.h
"

25 
	#DHCP_SERVER_PORT
 67

	)

26 
	#DHCP_CLIENT_PORT
 68

	)

28 
	#DHCP_HEADER_LEN
 236

	)

29 
	sdh˝_hódî
 {

30 
uöt8_t
 
	m›
;

31 
uöt8_t
 
	mhty≥
;

32 
uöt8_t
 
	mhÀn
;

33 
uöt8_t
 
	mh›s
;

34 
ovs_be32
 
	mxid
;

35 
ovs_be16
 
	m£cs
;

36 
ovs_be16
 
	mÊags
;

37 
ovs_be32
 
	mcüddr
;

38 
ovs_be32
 
	myüddr
;

39 
ovs_be32
 
	msüddr
;

40 
ovs_be32
 
	mgüddr
;

41 
uöt8_t
 
	mchaddr
[16];

42 
	m¢ame
[64];

43 
	mfûe
[128];

46 
BUILD_ASSERT_DECL
(
DHCP_HEADER_LEN
 =(
dh˝_hódî
));

	@/home/lsch/mytest/openvswitch-1.9.0/lib/dhparams.c

1 
	~"lib/dh∑øms.h
"

2 #i‚de‡
HEADER_DH_H


3 
	~<›ís¶/dh.h
>

5 
DH
 *
	$gë_dh1024
()

7 
dh1024_p
[]={

20 
dh1024_g
[]={

23 
DH
 *
dh
;

25 i‡((
dh
=
	`DH_√w
()Ë=
NULL
) (NULL);

26 
dh
->
p
=
	`BN_bö2bn
(
dh1024_p
,(dh1024_p),
NULL
);

27 
dh
->
g
=
	`BN_bö2bn
(
dh1024_g
,(dh1024_g),
NULL
);

28 i‡((
dh
->
p
 =
NULL
Ë|| (dh->
g
 == NULL))

29 { 
	`DH_‰ì
(
dh
); (
NULL
); }

30 (
dh
);

31 
	}
}

32 #i‚de‡
HEADER_DH_H


33 
	~<›ís¶/dh.h
>

35 
DH
 *
	$gë_dh2048
()

37 
dh2048_p
[]={

61 
dh2048_g
[]={

64 
DH
 *
dh
;

66 i‡((
dh
=
	`DH_√w
()Ë=
NULL
) (NULL);

67 
dh
->
p
=
	`BN_bö2bn
(
dh2048_p
,(dh2048_p),
NULL
);

68 
dh
->
g
=
	`BN_bö2bn
(
dh2048_g
,(dh2048_g),
NULL
);

69 i‡((
dh
->
p
 =
NULL
Ë|| (dh->
g
 == NULL))

70 { 
	`DH_‰ì
(
dh
); (
NULL
); }

71 (
dh
);

72 
	}
}

73 #i‚de‡
HEADER_DH_H


74 
	~<›ís¶/dh.h
>

76 
DH
 *
	$gë_dh4096
()

78 
dh4096_p
[]={

123 
dh4096_g
[]={

126 
DH
 *
dh
;

128 i‡((
dh
=
	`DH_√w
()Ë=
NULL
) (NULL);

129 
dh
->
p
=
	`BN_bö2bn
(
dh4096_p
,(dh4096_p),
NULL
);

130 
dh
->
g
=
	`BN_bö2bn
(
dh4096_g
,(dh4096_g),
NULL
);

131 i‡((
dh
->
p
 =
NULL
Ë|| (dh->
g
 == NULL))

132 { 
	`DH_‰ì
(
dh
); (
NULL
); }

133 (
dh
);

134 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/dhparams.h

17 #i‚de‡
DHPARAMS_H


18 
	#DHPARAMS_H
 1

	)

20 
	~<›ís¶/dh.h
>

22 
DH
 *
gë_dh1024
();

23 
DH
 *
gë_dh2048
();

24 
DH
 *
gë_dh4096
();

	@/home/lsch/mytest/openvswitch-1.9.0/lib/dirs.c

19 
	~<c⁄fig.h
>

20 
	~"dús.h
"

21 
	~<°dlib.h
>

22 
	~"utû.h
"

24 
	sdúe˘‹y
 {

25 c⁄° *
	mvÆue
;

26 c⁄° *
	mdeÁu…_vÆue
;

27 c⁄° *
	mv¨_«me
;

31 
	$gë_dú
(
dúe˘‹y
 *
d
)

33 i‡(!
d
->
vÆue
) {

34 
d
->
vÆue
 = 
	`gëív
(d->
v¨_«me
);

35 i‡(!
d
->
vÆue
 || !d->value[0]) {

36 
d
->
vÆue
 = d->
deÁu…_vÆue
;

39  
d
->
vÆue
;

40 
	}
}

43 
	$ovs_sysc⁄fdú
()

45 
dúe˘‹y
 
d
 = { 
NULL
, "/usr/local/etc", "OVS_SYSCONFDIR" };

46  
	`gë_dú
(&
d
);

47 
	}
}

50 
	$ovs_pkgd©adú
()

52 
dúe˘‹y
 
d
 = { 
NULL
, "/usr/local/share/openvswitch", "OVS_PKGDATADIR" };

53  
	`gë_dú
(&
d
);

54 
	}
}

57 
	$ovs_rundú
()

59 
dúe˘‹y
 
d
 = { 
NULL
, "/usr/local/var/run/openvswitch", "OVS_RUNDIR" };

60  
	`gë_dú
(&
d
);

61 
	}
}

64 
	$ovs_logdú
()

66 
dúe˘‹y
 
d
 = { 
NULL
, "/usr/local/var/log/openvswitch", "OVS_LOGDIR" };

67  
	`gë_dú
(&
d
);

68 
	}
}

71 
	$ovs_dbdú
()

73 c⁄° *
dbdú
;

74 i‡(!
dbdú
) {

75 
dbdú
 = 
	`gëív
("OVS_DBDIR");

76 i‡(!
dbdú
 || !dbdir[0]) {

77 *
sysc⁄fdú
 = 
	`gëív
("OVS_SYSCONFDIR");

79 
dbdú
 = (
sysc⁄fdú


80 ? 
	`xa•rötf
("%s/›ívswôch", 
sysc⁄fdú
)

84  
dbdú
;

85 
	}
}

88 
	$ovs_bödú
()

90 
dúe˘‹y
 
d
 = { 
NULL
, "/usr/local/bin", "OVS_BINDIR" };

91  
	`gë_dú
(&
d
);

92 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/dirs.h

17 #i‚de‡
DIRS_H


18 
	#DIRS_H
 1

	)

20 c⁄° *
ovs_sysc⁄fdú
();

21 c⁄° *
ovs_pkgd©adú
();

22 c⁄° *
ovs_rundú
();

23 c⁄° *
ovs_logdú
();

24 c⁄° *
ovs_dbdú
();

25 c⁄° *
ovs_bödú
();

	@/home/lsch/mytest/openvswitch-1.9.0/lib/dpif-linux.c

17 
	~<c⁄fig.h
>

19 
	~"dpif-löux.h
"

21 
	~<as£π.h
>

22 
	~<˘y≥.h
>

23 
	~<î∫o.h
>

24 
	~<f˙é.h
>

25 
	~<öây≥s.h
>

26 
	~<√t/if.h
>

27 
	~<löux/ty≥s.h
>

28 
	~<löux/pkt_sched.h
>

29 
	~<löux/π√éök.h
>

30 
	~<löux/sockios.h
>

31 
	~<pﬁl.h
>

32 
	~<°dlib.h
>

33 
	~<°rögs.h
>

34 
	~<sys/ïﬁl.h
>

35 
	~<sys/°©.h
>

36 
	~<uni°d.h
>

38 
	~"bôm≠.h
"

39 
	~"dpif-¥ovidî.h
"

40 
	~"dy«mic-°rög.h
"

41 
	~"Êow.h
"

42 
	~"√tdev.h
"

43 
	~"√tdev-löux.h
"

44 
	~"√tdev-vp‹t.h
"

45 
	~"√éök-nŸifõr.h
"

46 
	~"√éök-sockë.h
"

47 
	~"√éök.h
"

48 
	~"odp-utû.h
"

49 
	~"oÂbuf.h
"

50 
	~"›ívswôch/d©≠©h-com∑t.h
"

51 
	~"›ívswôch/tu¬ñ.h
"

52 
	~"∑ckës.h
"

53 
	~"pﬁl-lo›.h
"

54 
	~"øndom.h
"

55 
	~"shash.h
"

56 
	~"s£t.h
"

57 
	~"timevÆ.h
"

58 
	~"u«lig√d.h
"

59 
	~"utû.h
"

60 
	~"vlog.h
"

62 
VLOG_DEFINE_THIS_MODULE
(
dpif_löux
);

63 íum { 
	mMAX_PORTS
 = 
USHRT_MAX
 };

65 íum { 
	mN_CHANNELS
 = 17 };

66 
BUILD_ASSERT_DECL
(
IS_POW2
(
N_CHANNELS
 - 1));

67 
BUILD_ASSERT_DECL
(
N_CHANNELS
 > 1);

68 
BUILD_ASSERT_DECL
(
N_CHANNELS
 <= 32);

72 
	#ETH_FLAG_LRO
 (1 << 15Ë

	)

74 
	sdpif_löux_dp
 {

76 
uöt8_t
 
	mcmd
;

79 
	mdp_ifödex
;

82 c⁄° *
	m«me
;

83 c⁄° 
uöt32_t
 *
	mupˇŒ_pid
;

84 
ovs_dp_°©s
 
	m°©s
;

87 
dpif_löux_dp_öô
(
dpif_löux_dp
 *);

88 
dpif_löux_dp_‰om_oÂbuf
(
dpif_löux_dp
 *,

89 c⁄° 
oÂbuf
 *);

90 
dpif_löux_dp_dump_°¨t
(
∆_dump
 *);

91 
dpif_löux_dp_å™ß˘
(c⁄° 
dpif_löux_dp
 *
ªque°
,

92 
dpif_löux_dp
 *
ª∂y
,

93 
oÂbuf
 **
buÂ
);

94 
dpif_löux_dp_gë
(c⁄° 
dpif
 *, 
dpif_löux_dp
 *
ª∂y
,

95 
oÂbuf
 **
buÂ
);

97 
	sdpif_löux_Êow
 {

99 
uöt8_t
 
	mcmd
;

102 
	m∆msg_Êags
;

103 
	mdp_ifödex
;

113 c⁄° 
∆©å
 *
	mkey
;

114 
size_t
 
	mkey_Àn
;

115 c⁄° 
∆©å
 *
	ma˘i⁄s
;

116 
size_t
 
	ma˘i⁄s_Àn
;

117 c⁄° 
ovs_Êow_°©s
 *
	m°©s
;

118 c⁄° 
uöt8_t
 *
	mt˝_Êags
;

119 c⁄° 
ovs_32Æig√d_u64
 *
	mu£d
;

120 
boﬁ
 
	m˛ór
;

123 
dpif_löux_Êow_öô
(
dpif_löux_Êow
 *);

124 
dpif_löux_Êow_‰om_oÂbuf
(
dpif_löux_Êow
 *,

125 c⁄° 
oÂbuf
 *);

126 
dpif_löux_Êow_to_oÂbuf
(c⁄° 
dpif_löux_Êow
 *,

127 
oÂbuf
 *);

128 
dpif_löux_Êow_å™ß˘
(
dpif_löux_Êow
 *
ªque°
,

129 
dpif_löux_Êow
 *
ª∂y
,

130 
oÂbuf
 **
buÂ
);

131 
dpif_löux_Êow_gë_°©s
(c⁄° 
dpif_löux_Êow
 *,

132 
dpif_Êow_°©s
 *);

162 íum { 
	mN_SKETCHES
 = 8 };

163 
	sdpif_skëch
 {

164 
uöt32_t
 
	mp‹t_no
;

165 
	mhôs
;

166 
	mîr‹
;

170 
	sdpif_ch™√l
 {

171 
∆_sock
 *
	msock
;

172 
dpif_skëch
 
	mskëches
[
N_SKETCHES
];

173 
	mœ°_pﬁl
;

176 
upd©e_skëch
(
dpif_ch™√l
 *, 
uöt32_t
 
p‹t_no
);

177 
sˇÀ_skëches
(
dpif
 *);

178 
ªp‹t_loss
(
dpif
 *, 
dpif_ch™√l
 *);

184 
	#SCALE_INTERVAL
 (60 * 1000)

	)

187 
	sdpif_löux
 {

188 
dpif
 
	mdpif
;

189 
	mdp_ifödex
;

192 
dpif_ch™√l
 
	mch™√ls
[
N_CHANNELS
];

193 
uöt32_t
 
	mªady_mask
;

194 
	mïﬁl_fd
;

195 
	m√xt_sˇÀ
;

198 
s£t
 
	mch™ged_p‹ts
;

199 
∆n_nŸifõr
 *
	mp‹t_nŸifõr
;

200 
boﬁ
 
	mch™ge_îr‹
;

203 
uöt16_t
 
	mÆloc_p‹t_no
;

206 
vlog_øã_limô
 
	gîr‹_æ
 = 
VLOG_RATE_LIMIT_INIT
(9999, 5);

209 
	govs_d©≠©h_Ámûy
;

210 
	govs_vp‹t_Ámûy
;

211 
	govs_Êow_Ámûy
;

212 
	govs_∑ckë_Ámûy
;

215 
∆_sock
 *
	ggíl_sock
;

216 
∆n
 *
	g∆n
 = 
NULL
;

218 
dpif_löux_öô
();

219 
›í_dpif
(c⁄° 
dpif_löux_dp
 *, 
dpif
 **);

220 
boﬁ
 
dpif_löux_∆n_∑r£
(
oÂbuf
 *, *);

221 
dpif_löux_p‹t_ch™ged
(c⁄° *
vp‹t
, *
dpif
);

222 
uöt32_t
 
dpif_löux_p‹t_gë_pid
(c⁄° 
dpif
 *, 
uöt16_t
 
p‹t_no
);

224 
dpif_löux_vp‹t_to_oÂbuf
(c⁄° 
dpif_löux_vp‹t
 *,

225 
oÂbuf
 *);

226 
dpif_löux_vp‹t_‰om_oÂbuf
(
dpif_löux_vp‹t
 *,

227 c⁄° 
oÂbuf
 *);

229 
dpif_löux
 *

230 
	$dpif_löux_ˇ°
(c⁄° 
dpif
 *dpif)

232 
	`dpif_as£π_˛ass
(
dpif
, &
dpif_löux_˛ass
);

233  
	`CONTAINER_OF
(
dpif
, 
dpif_löux
, dpif);

234 
	}
}

237 
	$dpif_löux_íumî©e
(
s£t
 *
Æl_dps
)

239 
∆_dump
 
dump
;

240 
oÂbuf
 
msg
;

241 
îr‹
;

243 
îr‹
 = 
	`dpif_löux_öô
();

244 i‡(
îr‹
) {

245  
îr‹
;

248 
	`dpif_löux_dp_dump_°¨t
(&
dump
);

249 
	`∆_dump_√xt
(&
dump
, &
msg
)) {

250 
dpif_löux_dp
 
dp
;

252 i‡(!
	`dpif_löux_dp_‰om_oÂbuf
(&
dp
, &
msg
)) {

253 
	`s£t_add
(
Æl_dps
, 
dp
.
«me
);

256  
	`∆_dump_d⁄e
(&
dump
);

257 
	}
}

260 
	$dpif_löux_›í
(c⁄° 
dpif_˛ass
 *
˛ass
 
OVS_UNUSED
, c⁄° *
«me
,

261 
boﬁ
 
¸óã
, 
dpif
 **
dpiÂ
)

263 
dpif_löux_dp
 
dp_ªque°
, 
dp
;

264 
oÂbuf
 *
buf
;

265 
uöt32_t
 
upˇŒ_pid
;

266 
îr‹
;

268 
îr‹
 = 
	`dpif_löux_öô
();

269 i‡(
îr‹
) {

270  
îr‹
;

274 
	`dpif_löux_dp_öô
(&
dp_ªque°
);

275 i‡(
¸óã
) {

276 
dp_ªque°
.
cmd
 = 
OVS_DP_CMD_NEW
;

277 
upˇŒ_pid
 = 0;

278 
dp_ªque°
.
upˇŒ_pid
 = &upcall_pid;

280 
dp_ªque°
.
cmd
 = 
OVS_DP_CMD_GET
;

282 
dp_ªque°
.
«me
 =Çame;

283 
îr‹
 = 
	`dpif_löux_dp_å™ß˘
(&
dp_ªque°
, &
dp
, &
buf
);

284 i‡(
îr‹
) {

285  
îr‹
;

288 
	`›í_dpif
(&
dp
, 
dpiÂ
);

289 
	`oÂbuf_dñëe
(
buf
);

291 
	}
}

294 
	$›í_dpif
(c⁄° 
dpif_löux_dp
 *
dp
, 
dpif
 **
dpiÂ
)

296 
dpif_löux
 *
dpif
;

298 
dpif
 = 
	`xzÆloc
( *dpif);

299 
dpif
->
p‹t_nŸifõr
 = 
	`∆n_nŸifõr_¸óã
(
∆n
, 
dpif_löux_p‹t_ch™ged
,

300 
dpif
);

301 
dpif
->
ïﬁl_fd
 = -1;

303 
	`dpif_öô
(&
dpif
->dpif, &
dpif_löux_˛ass
, 
dp
->
«me
,

304 
dp
->
dp_ifödex
, dp->dp_ifindex);

306 
dpif
->
√xt_sˇÀ
 = 
LLONG_MAX
;

308 
dpif
->
dp_ifödex
 = 
dp
->dp_ifindex;

309 
	`s£t_öô
(&
dpif
->
ch™ged_p‹ts
);

310 *
dpiÂ
 = &
dpif
->dpif;

311 
	}
}

314 
	$de°roy_ch™√ls
(
dpif_löux
 *
dpif
)

316 
dpif_ch™√l
 *
ch
;

318 i‡(
dpif
->
ïﬁl_fd
 >= 0) {

319 
	`˛o£
(
dpif
->
ïﬁl_fd
);

320 
dpif
->
ïﬁl_fd
 = -1;

322 
ch
 = 
dpif
->
ch™√ls
; ch < &dpif->ch™√ls[
N_CHANNELS
]; ch++) {

323 
	`∆_sock_de°roy
(
ch
->
sock
);

324 
ch
->
sock
 = 
NULL
;

326 
dpif
->
√xt_sˇÀ
 = 
LLONG_MAX
;

327 
	}
}

330 
	$dpif_löux_˛o£
(
dpif
 *
dpif_
)

332 
dpif_löux
 *
dpif
 = 
	`dpif_löux_ˇ°
(
dpif_
);

334 
	`∆n_nŸifõr_de°roy
(
dpif
->
p‹t_nŸifõr
);

335 
	`de°roy_ch™√ls
(
dpif
);

336 
	`s£t_de°roy
(&
dpif
->
ch™ged_p‹ts
);

337 
	`‰ì
(
dpif
);

338 
	}
}

341 
	$dpif_löux_de°roy
(
dpif
 *
dpif_
)

343 
dpif_löux
 *
dpif
 = 
	`dpif_löux_ˇ°
(
dpif_
);

344 
dpif_löux_dp
 
dp
;

346 
	`dpif_löux_dp_öô
(&
dp
);

347 
dp
.
cmd
 = 
OVS_DP_CMD_DEL
;

348 
dp
.
dp_ifödex
 = 
dpif
->dp_ifindex;

349  
	`dpif_löux_dp_å™ß˘
(&
dp
, 
NULL
, NULL);

350 
	}
}

353 
	$dpif_löux_run
(
dpif
 *
dpif_
)

355 
dpif_löux
 *
dpif
 = 
	`dpif_löux_ˇ°
(
dpif_
);

357 i‡(
	`time_m£c
(Ë>
dpif
->
√xt_sˇÀ
) {

358 
dpif
->
√xt_sˇÀ
 = 
	`time_m£c
(Ë+ 
SCALE_INTERVAL
;

359 
	`sˇÀ_skëches
(
dpif_
);

362 i‡(
∆n
) {

363 
	`∆n_run
(
∆n
);

365 
	}
}

368 
	$dpif_löux_waô
(
dpif
 *dpi‡
OVS_UNUSED
)

370 i‡(
∆n
) {

371 
	`∆n_waô
(
∆n
);

373 
	}
}

376 
	$dpif_löux_gë_°©s
(c⁄° 
dpif
 *
dpif_
, 
dpif_dp_°©s
 *
°©s
)

378 
dpif_löux_dp
 
dp
;

379 
oÂbuf
 *
buf
;

380 
îr‹
;

382 
îr‹
 = 
	`dpif_löux_dp_gë
(
dpif_
, &
dp
, &
buf
);

383 i‡(!
îr‹
) {

384 
°©s
->
n_hô
 = 
dp
.stats.n_hit;

385 
°©s
->
n_mis£d
 = 
dp
.stats.n_missed;

386 
°©s
->
n_lo°
 = 
dp
.stats.n_lost;

387 
°©s
->
n_Êows
 = 
dp
.stats.n_flows;

388 
	`oÂbuf_dñëe
(
buf
);

390  
îr‹
;

391 
	}
}

394 
	$dpif_löux_p‹t_add
(
dpif
 *
dpif_
, 
√tdev
 *netdev,

395 
uöt16_t
 *
p‹t_n›
)

397 
dpif_löux
 *
dpif
 = 
	`dpif_löux_ˇ°
(
dpif_
);

398 c⁄° *
«me
 = 
	`√tdev_gë_«me
(
√tdev
);

399 c⁄° *
ty≥
 = 
	`√tdev_gë_ty≥
(
√tdev
);

400 
dpif_löux_vp‹t
 
ªque°
, 
ª∂y
;

401 c⁄° 
oÂbuf
 *
›ti⁄s
;

402 
oÂbuf
 *
buf
;

403 
îr‹
, 
i
 = 0, 
max_p‹ts
 = 
MAX_PORTS
;

405 
	`dpif_löux_vp‹t_öô
(&
ªque°
);

406 
ªque°
.
cmd
 = 
OVS_VPORT_CMD_NEW
;

407 
ªque°
.
dp_ifödex
 = 
dpif
->dp_ifindex;

408 
ªque°
.
ty≥
 = 
	`√tdev_vp‹t_gë_vp‹t_ty≥
(
√tdev
);

409 i‡(
ªque°
.
ty≥
 =
OVS_VPORT_TYPE_UNSPEC
) {

410 
	`VLOG_WARN_RL
(&
îr‹_æ
, "%s: cannot createÖort `%s' because it has "

412 
	`dpif_«me
(
dpif_
), 
«me
, 
ty≥
);

413  
EINVAL
;

415 
ªque°
.
«me
 =Çame;

417 
›ti⁄s
 = 
	`√tdev_vp‹t_gë_›ti⁄s
(
√tdev
);

418 i‡(
›ti⁄s
 && o±i⁄s->
size
) {

419 
ªque°
.
›ti⁄s
 = o±i⁄s->
d©a
;

420 
ªque°
.
›ti⁄s_Àn
 = 
›ti⁄s
->
size
;

423 i‡(
ªque°
.
ty≥
 =
OVS_VPORT_TYPE_NETDEV
) {

424 
	`√tdev_löux_ëhtoﬁ_£t_Êag
(
√tdev
, 
ETH_FLAG_LRO
, "LRO", 
Ál£
);

430 
uöt32_t
 
upˇŒ_pid
;

432 
ªque°
.
p‹t_no
 = *
p‹t_n›
 !
UINT16_MAX
 ? *port_nop

433 : ++
dpif
->
Æloc_p‹t_no
;

434 
upˇŒ_pid
 = 
	`dpif_löux_p‹t_gë_pid
(
dpif_
, 
ªque°
.
p‹t_no
);

435 
ªque°
.
upˇŒ_pid
 = &upcall_pid;

436 
îr‹
 = 
	`dpif_löux_vp‹t_å™ß˘
(&
ªque°
, &
ª∂y
, &
buf
);

438 i‡(!
îr‹
) {

439 *
p‹t_n›
 = 
ª∂y
.
p‹t_no
;

440 
	`VLOG_DBG
("%s:ássignögÖ‹à%"
PRIu32
"ÅoÇetlinkÖid %"PRIu32,

441 
	`dpif_«me
(
dpif_
), 
ªque°
.
p‹t_no
, 
upˇŒ_pid
);

442 } i‡(
îr‹
 =
EFBIG
) {

444 
max_p‹ts
 = 
dpif
->
Æloc_p‹t_no
;

445 
dpif
->
Æloc_p‹t_no
 = 0;

446 } i‡(
îr‹
 =
EBUSY
 && *
p‹t_n›
 !
UINT16_MAX
) {

447 
	`VLOG_INFO
("%s:Ñeque°edÖ‹à%"
PRIu16
" is in use",

448 
	`dpif_«me
(
dpif_
), *
p‹t_n›
);

451 
	`oÂbuf_dñëe
(
buf
);

452 } (*
p‹t_n›
 =
UINT16_MAX
Ë&& (
i
++ < 
max_p‹ts
)

453 && (
îr‹
 =
EBUSY
 ||Éº‹ =
EFBIG
));

455  
îr‹
;

456 
	}
}

459 
	$dpif_löux_p‹t_dñ
(
dpif
 *
dpif_
, 
uöt16_t
 
p‹t_no
)

461 
dpif_löux
 *
dpif
 = 
	`dpif_löux_ˇ°
(
dpif_
);

462 
dpif_löux_vp‹t
 
vp‹t
;

463 
îr‹
;

465 
	`dpif_löux_vp‹t_öô
(&
vp‹t
);

466 
vp‹t
.
cmd
 = 
OVS_VPORT_CMD_DEL
;

467 
vp‹t
.
dp_ifödex
 = 
dpif
->dp_ifindex;

468 
vp‹t
.
p‹t_no
 =Öort_no;

469 
îr‹
 = 
	`dpif_löux_vp‹t_å™ß˘
(&
vp‹t
, 
NULL
, NULL);

471  
îr‹
;

472 
	}
}

475 
	$dpif_löux_p‹t_quîy__
(c⁄° 
dpif
 *dpif, 
uöt32_t
 
p‹t_no
,

476 c⁄° *
p‹t_«me
, 
dpif_p‹t
 *dpif_port)

478 
dpif_löux_vp‹t
 
ªque°
;

479 
dpif_löux_vp‹t
 
ª∂y
;

480 
oÂbuf
 *
buf
;

481 
îr‹
;

483 
	`dpif_löux_vp‹t_öô
(&
ªque°
);

484 
ªque°
.
cmd
 = 
OVS_VPORT_CMD_GET
;

485 
ªque°
.
dp_ifödex
 = 
	`dpif_löux_ˇ°
(
dpif
)->dp_ifindex;

486 
ªque°
.
p‹t_no
 =Öort_no;

487 
ªque°
.
«me
 = 
p‹t_«me
;

489 
îr‹
 = 
	`dpif_löux_vp‹t_å™ß˘
(&
ªque°
, &
ª∂y
, &
buf
);

490 i‡(!
îr‹
) {

491 i‡(
ª∂y
.
dp_ifödex
 !
ªque°
.dp_ifindex) {

494 
îr‹
 = 
ENODEV
;

496 
dpif_p‹t
->
«me
 = 
	`x°rdup
(
ª∂y
.name);

497 
dpif_p‹t
->
ty≥
 = 
	`x°rdup
(
	`√tdev_vp‹t_gë_√tdev_ty≥
(&
ª∂y
));

498 
dpif_p‹t
->
p‹t_no
 = 
ª∂y
.port_no;

500 
	`oÂbuf_dñëe
(
buf
);

502  
îr‹
;

503 
	}
}

506 
	$dpif_löux_p‹t_quîy_by_numbî
(c⁄° 
dpif
 *dpif, 
uöt16_t
 
p‹t_no
,

507 
dpif_p‹t
 *dpif_port)

509  
	`dpif_löux_p‹t_quîy__
(
dpif
, 
p‹t_no
, 
NULL
, 
dpif_p‹t
);

510 
	}
}

513 
	$dpif_löux_p‹t_quîy_by_«me
(c⁄° 
dpif
 *dpif, c⁄° *
dev«me
,

514 
dpif_p‹t
 *dpif_port)

516  
	`dpif_löux_p‹t_quîy__
(
dpif
, 0, 
dev«me
, 
dpif_p‹t
);

517 
	}
}

520 
	$dpif_löux_gë_max_p‹ts
(c⁄° 
dpif
 *dpi‡
OVS_UNUSED
)

522  
MAX_PORTS
;

523 
	}
}

525 
uöt32_t


526 
	$dpif_löux_p‹t_gë_pid
(c⁄° 
dpif
 *
dpif_
, 
uöt16_t
 
p‹t_no
)

528 
dpif_löux
 *
dpif
 = 
	`dpif_löux_ˇ°
(
dpif_
);

530 i‡(
dpif
->
ïﬁl_fd
 < 0) {

533 
idx
;

535 
idx
 = (
p‹t_no
 !
UINT16_MAX


536 ? 1 + (
p‹t_no
 & (
N_CHANNELS
 - 2))

538  
	`∆_sock_pid
(
dpif
->
ch™√ls
[
idx
].
sock
);

540 
	}
}

543 
	$dpif_löux_Êow_Êush
(
dpif
 *
dpif_
)

545 
dpif_löux
 *
dpif
 = 
	`dpif_löux_ˇ°
(
dpif_
);

546 
dpif_löux_Êow
 
Êow
;

548 
	`dpif_löux_Êow_öô
(&
Êow
);

549 
Êow
.
cmd
 = 
OVS_FLOW_CMD_DEL
;

550 
Êow
.
dp_ifödex
 = 
dpif
->dp_ifindex;

551  
	`dpif_löux_Êow_å™ß˘
(&
Êow
, 
NULL
, NULL);

552 
	}
}

554 
	sdpif_löux_p‹t_°©e
 {

555 
∆_dump
 
	mdump
;

559 
	$dpif_löux_p‹t_dump_°¨t
(c⁄° 
dpif
 *
dpif_
, **
°©ï
)

561 
dpif_löux
 *
dpif
 = 
	`dpif_löux_ˇ°
(
dpif_
);

562 
dpif_löux_p‹t_°©e
 *
°©e
;

563 
dpif_löux_vp‹t
 
ªque°
;

564 
oÂbuf
 *
buf
;

566 *
°©ï
 = 
°©e
 = 
	`xmÆloc
( *state);

568 
	`dpif_löux_vp‹t_öô
(&
ªque°
);

569 
ªque°
.
cmd
 = 
OVS_DP_CMD_GET
;

570 
ªque°
.
dp_ifödex
 = 
dpif
->dp_ifindex;

572 
buf
 = 
	`oÂbuf_√w
(1024);

573 
	`dpif_löux_vp‹t_to_oÂbuf
(&
ªque°
, 
buf
);

574 
	`∆_dump_°¨t
(&
°©e
->
dump
, 
gíl_sock
, 
buf
);

575 
	`oÂbuf_dñëe
(
buf
);

578 
	}
}

581 
	$dpif_löux_p‹t_dump_√xt
(c⁄° 
dpif
 *dpi‡
OVS_UNUSED
, *
°©e_
,

582 
dpif_p‹t
 *dpif_port)

584 
dpif_löux_p‹t_°©e
 *
°©e
 = 
°©e_
;

585 
dpif_löux_vp‹t
 
vp‹t
;

586 
oÂbuf
 
buf
;

587 
îr‹
;

589 i‡(!
	`∆_dump_√xt
(&
°©e
->
dump
, &
buf
)) {

590  
EOF
;

593 
îr‹
 = 
	`dpif_löux_vp‹t_‰om_oÂbuf
(&
vp‹t
, &
buf
);

594 i‡(
îr‹
) {

595  
îr‹
;

598 
dpif_p‹t
->
«me
 = 
	`CONST_CAST
(*, 
vp‹t
.name);

599 
dpif_p‹t
->
ty≥
 = 
	`CONST_CAST
(*, 
	`√tdev_vp‹t_gë_√tdev_ty≥
(&
vp‹t
));

600 
dpif_p‹t
->
p‹t_no
 = 
vp‹t
.port_no;

602 
	}
}

605 
	$dpif_löux_p‹t_dump_d⁄e
(c⁄° 
dpif
 *
dpif_
 
OVS_UNUSED
, *
°©e_
)

607 
dpif_löux_p‹t_°©e
 *
°©e
 = 
°©e_
;

608 
îr‹
 = 
	`∆_dump_d⁄e
(&
°©e
->
dump
);

610 
	`‰ì
(
°©e
);

611  
îr‹
;

612 
	}
}

615 
	$dpif_löux_p‹t_pﬁl
(c⁄° 
dpif
 *
dpif_
, **
dev«mï
)

617 
dpif_löux
 *
dpif
 = 
	`dpif_löux_ˇ°
(
dpif_
);

619 i‡(
dpif
->
ch™ge_îr‹
) {

620 
dpif
->
ch™ge_îr‹
 = 
Ál£
;

621 
	`s£t_˛ór
(&
dpif
->
ch™ged_p‹ts
);

622  
ENOBUFS
;

623 } i‡(!
	`s£t_is_em±y
(&
dpif
->
ch™ged_p‹ts
)) {

624 *
dev«mï
 = 
	`s£t_p›
(&
dpif
->
ch™ged_p‹ts
);

627  
EAGAIN
;

629 
	}
}

632 
	$dpif_löux_p‹t_pﬁl_waô
(c⁄° 
dpif
 *
dpif_
)

634 
dpif_löux
 *
dpif
 = 
	`dpif_löux_ˇ°
(
dpif_
);

635 i‡(!
	`s£t_is_em±y
(&
dpif
->
ch™ged_p‹ts
Ë|| dpif->
ch™ge_îr‹
) {

636 
	`pﬁl_immedüã_wake
();

638 
	}
}

641 
	$dpif_löux_Êow_gë__
(c⁄° 
dpif
 *
dpif_
,

642 c⁄° 
∆©å
 *
key
, 
size_t
 
key_Àn
,

643 
dpif_löux_Êow
 *
ª∂y
, 
oÂbuf
 **
buÂ
)

645 
dpif_löux
 *
dpif
 = 
	`dpif_löux_ˇ°
(
dpif_
);

646 
dpif_löux_Êow
 
ªque°
;

648 
	`dpif_löux_Êow_öô
(&
ªque°
);

649 
ªque°
.
cmd
 = 
OVS_FLOW_CMD_GET
;

650 
ªque°
.
dp_ifödex
 = 
dpif
->dp_ifindex;

651 
ªque°
.
key
 = key;

652 
ªque°
.
key_Àn
 = key_len;

653  
	`dpif_löux_Êow_å™ß˘
(&
ªque°
, 
ª∂y
, 
buÂ
);

654 
	}
}

657 
	$dpif_löux_Êow_gë
(c⁄° 
dpif
 *
dpif_
,

658 c⁄° 
∆©å
 *
key
, 
size_t
 
key_Àn
,

659 
oÂbuf
 **
a˘i⁄•
, 
dpif_Êow_°©s
 *
°©s
)

661 
dpif_löux_Êow
 
ª∂y
;

662 
oÂbuf
 *
buf
;

663 
îr‹
;

665 
îr‹
 = 
	`dpif_löux_Êow_gë__
(
dpif_
, 
key
, 
key_Àn
, &
ª∂y
, &
buf
);

666 i‡(!
îr‹
) {

667 i‡(
°©s
) {

668 
	`dpif_löux_Êow_gë_°©s
(&
ª∂y
, 
°©s
);

670 i‡(
a˘i⁄•
) {

671 
buf
->
d©a
 = 
	`CONST_CAST
(
∆©å
 *, 
ª∂y
.
a˘i⁄s
);

672 
buf
->
size
 = 
ª∂y
.
a˘i⁄s_Àn
;

673 *
a˘i⁄•
 = 
buf
;

675 
	`oÂbuf_dñëe
(
buf
);

678  
îr‹
;

679 
	}
}

682 
	$dpif_löux_öô_Êow_put
(
dpif
 *
dpif_
, c⁄° 
dpif_Êow_put
 *
put
,

683 
dpif_löux_Êow
 *
ªque°
)

685 
∆©å
 
dummy_a˘i⁄
;

687 
dpif_löux
 *
dpif
 = 
	`dpif_löux_ˇ°
(
dpif_
);

689 
	`dpif_löux_Êow_öô
(
ªque°
);

690 
ªque°
->
cmd
 = (
put
->
Êags
 & 
DPIF_FP_CREATE


691 ? 
OVS_FLOW_CMD_NEW
 : 
OVS_FLOW_CMD_SET
);

692 
ªque°
->
dp_ifödex
 = 
dpif
->dp_ifindex;

693 
ªque°
->
key
 = 
put
->key;

694 
ªque°
->
key_Àn
 = 
put
->key_len;

696 
ªque°
->
a˘i⁄s
 = 
put
->a˘i⁄†?Öut->a˘i⁄†: &
dummy_a˘i⁄
;

697 
ªque°
->
a˘i⁄s_Àn
 = 
put
->actions_len;

698 i‡(
put
->
Êags
 & 
DPIF_FP_ZERO_STATS
) {

699 
ªque°
->
˛ór
 = 
åue
;

701 
ªque°
->
∆msg_Êags
 = 
put
->
Êags
 & 
DPIF_FP_MODIFY
 ? 0 : 
NLM_F_CREATE
;

702 
	}
}

705 
	$dpif_löux_Êow_put
(
dpif
 *
dpif_
, c⁄° 
dpif_Êow_put
 *
put
)

707 
dpif_löux_Êow
 
ªque°
, 
ª∂y
;

708 
oÂbuf
 *
buf
;

709 
îr‹
;

711 
	`dpif_löux_öô_Êow_put
(
dpif_
, 
put
, &
ªque°
);

712 
îr‹
 = 
	`dpif_löux_Êow_å™ß˘
(&
ªque°
,

713 
put
->
°©s
 ? &
ª∂y
 : 
NULL
,

714 
put
->
°©s
 ? &
buf
 : 
NULL
);

715 i‡(!
îr‹
 && 
put
->
°©s
) {

716 
	`dpif_löux_Êow_gë_°©s
(&
ª∂y
, 
put
->
°©s
);

717 
	`oÂbuf_dñëe
(
buf
);

719  
îr‹
;

720 
	}
}

723 
	$dpif_löux_öô_Êow_dñ
(
dpif
 *
dpif_
, c⁄° 
dpif_Êow_dñ
 *
dñ
,

724 
dpif_löux_Êow
 *
ªque°
)

726 
dpif_löux
 *
dpif
 = 
	`dpif_löux_ˇ°
(
dpif_
);

728 
	`dpif_löux_Êow_öô
(
ªque°
);

729 
ªque°
->
cmd
 = 
OVS_FLOW_CMD_DEL
;

730 
ªque°
->
dp_ifödex
 = 
dpif
->dp_ifindex;

731 
ªque°
->
key
 = 
dñ
->key;

732 
ªque°
->
key_Àn
 = 
dñ
->key_len;

733 
	}
}

736 
	$dpif_löux_Êow_dñ
(
dpif
 *
dpif_
, c⁄° 
dpif_Êow_dñ
 *
dñ
)

738 
dpif_löux_Êow
 
ªque°
, 
ª∂y
;

739 
oÂbuf
 *
buf
;

740 
îr‹
;

742 
	`dpif_löux_öô_Êow_dñ
(
dpif_
, 
dñ
, &
ªque°
);

743 
îr‹
 = 
	`dpif_löux_Êow_å™ß˘
(&
ªque°
,

744 
dñ
->
°©s
 ? &
ª∂y
 : 
NULL
,

745 
dñ
->
°©s
 ? &
buf
 : 
NULL
);

746 i‡(!
îr‹
 && 
dñ
->
°©s
) {

747 
	`dpif_löux_Êow_gë_°©s
(&
ª∂y
, 
dñ
->
°©s
);

748 
	`oÂbuf_dñëe
(
buf
);

750  
îr‹
;

751 
	}
}

753 
	sdpif_löux_Êow_°©e
 {

754 
∆_dump
 
	mdump
;

755 
dpif_löux_Êow
 
	mÊow
;

756 
dpif_Êow_°©s
 
	m°©s
;

757 
oÂbuf
 *
	mbuf
;

761 
	$dpif_löux_Êow_dump_°¨t
(c⁄° 
dpif
 *
dpif_
, **
°©ï
)

763 
dpif_löux
 *
dpif
 = 
	`dpif_löux_ˇ°
(
dpif_
);

764 
dpif_löux_Êow_°©e
 *
°©e
;

765 
dpif_löux_Êow
 
ªque°
;

766 
oÂbuf
 *
buf
;

768 *
°©ï
 = 
°©e
 = 
	`xmÆloc
( *state);

770 
	`dpif_löux_Êow_öô
(&
ªque°
);

771 
ªque°
.
cmd
 = 
OVS_DP_CMD_GET
;

772 
ªque°
.
dp_ifödex
 = 
dpif
->dp_ifindex;

774 
buf
 = 
	`oÂbuf_√w
(1024);

775 
	`dpif_löux_Êow_to_oÂbuf
(&
ªque°
, 
buf
);

776 
	`∆_dump_°¨t
(&
°©e
->
dump
, 
gíl_sock
, 
buf
);

777 
	`oÂbuf_dñëe
(
buf
);

779 
°©e
->
buf
 = 
NULL
;

782 
	}
}

785 
	$dpif_löux_Êow_dump_√xt
(c⁄° 
dpif
 *
dpif_
 
OVS_UNUSED
, *
°©e_
,

786 c⁄° 
∆©å
 **
key
, 
size_t
 *
key_Àn
,

787 c⁄° 
∆©å
 **
a˘i⁄s
, 
size_t
 *
a˘i⁄s_Àn
,

788 c⁄° 
dpif_Êow_°©s
 **
°©s
)

790 
dpif_löux_Êow_°©e
 *
°©e
 = 
°©e_
;

791 
oÂbuf
 
buf
;

792 
îr‹
;

795 
	`oÂbuf_dñëe
(
°©e
->
buf
);

796 
°©e
->
buf
 = 
NULL
;

798 i‡(!
	`∆_dump_√xt
(&
°©e
->
dump
, &
buf
)) {

799  
EOF
;

802 
îr‹
 = 
	`dpif_löux_Êow_‰om_oÂbuf
(&
°©e
->
Êow
, &
buf
);

803 i‡(
îr‹
) {

804  
îr‹
;

807 i‡(
a˘i⁄s
 && !
°©e
->
Êow
.actions) {

808 
îr‹
 = 
	`dpif_löux_Êow_gë__
(
dpif_
, 
°©e
->
Êow
.
key
,

809 
°©e
->
Êow
.
key_Àn
,

810 &
°©e
->
Êow
, &°©e->
buf
);

811 i‡(
îr‹
 =
ENOENT
) {

812 
	`VLOG_DBG
("dumped flow disappeared on get");

813 } i‡(
îr‹
) {

814 
	`VLOG_WARN
("îr‹ fëchög dum≥d flow: %s", 
	`°ªº‹
(
îr‹
));

817 } 
îr‹
);

819 i‡(
a˘i⁄s
) {

820 *
a˘i⁄s
 = 
°©e
->
Êow
.actions;

821 *
a˘i⁄s_Àn
 = 
°©e
->
Êow
.actions_len;

823 i‡(
key
) {

824 *
key
 = 
°©e
->
Êow
.key;

825 *
key_Àn
 = 
°©e
->
Êow
.key_len;

827 i‡(
°©s
) {

828 
	`dpif_löux_Êow_gë_°©s
(&
°©e
->
Êow
, &°©e->
°©s
);

829 *
°©s
 = &
°©e
->stats;

831  
îr‹
;

832 
	}
}

835 
	$dpif_löux_Êow_dump_d⁄e
(c⁄° 
dpif
 *dpi‡
OVS_UNUSED
, *
°©e_
)

837 
dpif_löux_Êow_°©e
 *
°©e
 = 
°©e_
;

838 
îr‹
 = 
	`∆_dump_d⁄e
(&
°©e
->
dump
);

839 
	`oÂbuf_dñëe
(
°©e
->
buf
);

840 
	`‰ì
(
°©e
);

841  
îr‹
;

842 
	}
}

845 
	$dpif_löux_ícode_execuã
(
dp_ifödex
, c⁄° 
dpif_execuã
 *
d_exec
,

846 
oÂbuf
 *
buf
)

848 
ovs_hódî
 *
k_exec
;

850 
	`oÂbuf_¥óŒoc_èûroom
(
buf
, (64

851 + 
d_exec
->
∑ckë
->
size


852 + 
d_exec
->
key_Àn


853 + 
d_exec
->
a˘i⁄s_Àn
));

855 
	`∆_msg_put_gílmsghdr
(
buf
, 0, 
ovs_∑ckë_Ámûy
, 
NLM_F_REQUEST
,

856 
OVS_PACKET_CMD_EXECUTE
, 
OVS_PACKET_VERSION
);

858 
k_exec
 = 
	`oÂbuf_put_unöô
(
buf
,  *k_exec);

859 
k_exec
->
dp_ifödex
 = dp_ifindex;

861 
	`∆_msg_put_un•ec
(
buf
, 
OVS_PACKET_ATTR_PACKET
,

862 
d_exec
->
∑ckë
->
d©a
, d_exec->∑ckë->
size
);

863 
	`∆_msg_put_un•ec
(
buf
, 
OVS_PACKET_ATTR_KEY
, 
d_exec
->
key
, d_exec->
key_Àn
);

864 
	`∆_msg_put_un•ec
(
buf
, 
OVS_PACKET_ATTR_ACTIONS
,

865 
d_exec
->
a˘i⁄s
, d_exec->
a˘i⁄s_Àn
);

866 
	}
}

869 
	$dpif_löux_execuã__
(
dp_ifödex
, c⁄° 
dpif_execuã
 *
execuã
)

871 
uöt64_t
 
ªque°_°ub
[1024 / 8];

872 
oÂbuf
 
ªque°
;

873 
îr‹
;

875 
	`oÂbuf_u£_°ub
(&
ªque°
, 
ªque°_°ub
, Ñequest_stub);

876 
	`dpif_löux_ícode_execuã
(
dp_ifödex
, 
execuã
, &
ªque°
);

877 
îr‹
 = 
	`∆_sock_å™ß˘
(
gíl_sock
, &
ªque°
, 
NULL
);

878 
	`oÂbuf_unöô
(&
ªque°
);

880  
îr‹
;

881 
	}
}

884 
	$dpif_löux_execuã
(
dpif
 *
dpif_
, c⁄° 
dpif_execuã
 *
execuã
)

886 
dpif_löux
 *
dpif
 = 
	`dpif_löux_ˇ°
(
dpif_
);

888  
	`dpif_löux_execuã__
(
dpif
->
dp_ifödex
, 
execuã
);

889 
	}
}

891 
	#MAX_OPS
 50

	)

894 
	$dpif_löux_›î©e__
(
dpif
 *
dpif_
, 
dpif_›
 **
›s
, 
size_t
 
n_›s
)

896 
dpif_löux
 *
dpif
 = 
	`dpif_löux_ˇ°
(
dpif_
);

898 
	s›_auxd©a
 {

899 
∆_å™ß˘i⁄
 
txn
;

901 
oÂbuf
 
ªque°
;

902 
uöt64_t
 
ªque°_°ub
[1024 / 8];

904 
oÂbuf
 
ª∂y
;

905 
uöt64_t
 
ª∂y_°ub
[1024 / 8];

906 } 
auxes
[
MAX_OPS
];

908 
∆_å™ß˘i⁄
 *
txn•
[
MAX_OPS
];

909 
size_t
 
i
;

911 
	`as£π
(
n_›s
 <
MAX_OPS
);

912 
i
 = 0; i < 
n_›s
; i++) {

913 
›_auxd©a
 *
aux
 = &
auxes
[
i
];

914 
dpif_›
 *
›
 = 
›s
[
i
];

915 
dpif_Êow_put
 *
put
;

916 
dpif_Êow_dñ
 *
dñ
;

917 
dpif_execuã
 *
execuã
;

918 
dpif_löux_Êow
 
Êow
;

920 
	`oÂbuf_u£_°ub
(&
aux
->
ªque°
,

921 
aux
->
ªque°_°ub
, áux->request_stub);

922 
aux
->
txn
.
ªque°
 = &aux->request;

924 
	`oÂbuf_u£_°ub
(&
aux
->
ª∂y
,áux->
ª∂y_°ub
, áux->reply_stub);

925 
aux
->
txn
.
ª∂y
 = 
NULL
;

927 
›
->
ty≥
) {

928 
DPIF_OP_FLOW_PUT
:

929 
put
 = &
›
->
u
.
Êow_put
;

930 
	`dpif_löux_öô_Êow_put
(
dpif_
, 
put
, &
Êow
);

931 i‡(
put
->
°©s
) {

932 
Êow
.
∆msg_Êags
 |
NLM_F_ECHO
;

933 
aux
->
txn
.
ª∂y
 = &aux->reply;

935 
	`dpif_löux_Êow_to_oÂbuf
(&
Êow
, &
aux
->
ªque°
);

938 
DPIF_OP_FLOW_DEL
:

939 
dñ
 = &
›
->
u
.
Êow_dñ
;

940 
	`dpif_löux_öô_Êow_dñ
(
dpif_
, 
dñ
, &
Êow
);

941 i‡(
dñ
->
°©s
) {

942 
Êow
.
∆msg_Êags
 |
NLM_F_ECHO
;

943 
aux
->
txn
.
ª∂y
 = &aux->reply;

945 
	`dpif_löux_Êow_to_oÂbuf
(&
Êow
, &
aux
->
ªque°
);

948 
DPIF_OP_EXECUTE
:

949 
execuã
 = &
›
->
u
.execute;

950 
	`dpif_löux_ícode_execuã
(
dpif
->
dp_ifödex
, 
execuã
,

951 &
aux
->
ªque°
);

955 
	`NOT_REACHED
();

959 
i
 = 0; i < 
n_›s
; i++) {

960 
txn•
[
i
] = &
auxes
[i].
txn
;

962 
	`∆_sock_å™ß˘_mu…ùÀ
(
gíl_sock
, 
txn•
, 
n_›s
);

964 
i
 = 0; i < 
n_›s
; i++) {

965 
›_auxd©a
 *
aux
 = &
auxes
[
i
];

966 
∆_å™ß˘i⁄
 *
txn
 = &
auxes
[
i
].txn;

967 
dpif_›
 *
›
 = 
›s
[
i
];

968 
dpif_Êow_put
 *
put
;

969 
dpif_Êow_dñ
 *
dñ
;

971 
›
->
îr‹
 = 
txn
->error;

973 
›
->
ty≥
) {

974 
DPIF_OP_FLOW_PUT
:

975 
put
 = &
›
->
u
.
Êow_put
;

976 i‡(
put
->
°©s
) {

977 i‡(!
›
->
îr‹
) {

978 
dpif_löux_Êow
 
ª∂y
;

980 
›
->
îr‹
 = 
	`dpif_löux_Êow_‰om_oÂbuf
(&
ª∂y
,

981 
txn
->
ª∂y
);

982 i‡(!
›
->
îr‹
) {

983 
	`dpif_löux_Êow_gë_°©s
(&
ª∂y
, 
put
->
°©s
);

987 i‡(
›
->
îr‹
) {

988 
	`mem£t
(
put
->
°©s
, 0,  *put->stats);

993 
DPIF_OP_FLOW_DEL
:

994 
dñ
 = &
›
->
u
.
Êow_dñ
;

995 i‡(
dñ
->
°©s
) {

996 i‡(!
›
->
îr‹
) {

997 
dpif_löux_Êow
 
ª∂y
;

999 
›
->
îr‹
 = 
	`dpif_löux_Êow_‰om_oÂbuf
(&
ª∂y
,

1000 
txn
->
ª∂y
);

1001 i‡(!
›
->
îr‹
) {

1002 
	`dpif_löux_Êow_gë_°©s
(&
ª∂y
, 
dñ
->
°©s
);

1006 i‡(
›
->
îr‹
) {

1007 
	`mem£t
(
dñ
->
°©s
, 0,  *del->stats);

1012 
DPIF_OP_EXECUTE
:

1016 
	`NOT_REACHED
();

1019 
	`oÂbuf_unöô
(&
aux
->
ªque°
);

1020 
	`oÂbuf_unöô
(&
aux
->
ª∂y
);

1022 
	}
}

1025 
	$dpif_löux_›î©e
(
dpif
 *dpif, 
dpif_›
 **
›s
, 
size_t
 
n_›s
)

1027 
n_›s
 > 0) {

1028 
size_t
 
chunk
 = 
	`MIN
(
n_›s
, 
MAX_OPS
);

1029 
	`dpif_löux_›î©e__
(
dpif
, 
›s
, 
chunk
);

1030 
›s
 +
chunk
;

1031 
n_›s
 -
chunk
;

1033 
	}
}

1036 
	$£t_upˇŒ_pids
(
dpif
 *
dpif_
)

1038 
dpif_löux
 *
dpif
 = 
	`dpif_löux_ˇ°
(
dpif_
);

1039 
dpif_p‹t_dump
 
p‹t_dump
;

1040 
dpif_p‹t
 
p‹t
;

1041 
îr‹
;

1043 
	`DPIF_PORT_FOR_EACH
 (&
p‹t
, &
p‹t_dump
, &
dpif
->dpif) {

1044 
uöt32_t
 
upˇŒ_pid
 = 
	`dpif_löux_p‹t_gë_pid
(
dpif_
, 
p‹t
.
p‹t_no
);

1045 
dpif_löux_vp‹t
 
vp‹t_ªque°
;

1047 
	`dpif_löux_vp‹t_öô
(&
vp‹t_ªque°
);

1048 
vp‹t_ªque°
.
cmd
 = 
OVS_VPORT_CMD_SET
;

1049 
vp‹t_ªque°
.
dp_ifödex
 = 
dpif
->dp_ifindex;

1050 
vp‹t_ªque°
.
p‹t_no
 = 
p‹t
.port_no;

1051 
vp‹t_ªque°
.
upˇŒ_pid
 = &upcall_pid;

1052 
îr‹
 = 
	`dpif_löux_vp‹t_å™ß˘
(&
vp‹t_ªque°
, 
NULL
, NULL);

1053 i‡(!
îr‹
) {

1054 
	`VLOG_DBG
("%s:ássignögÖ‹à%"
PRIu32
"ÅoÇetlinkÖid %"PRIu32,

1055 
	`dpif_«me
(&
dpif
->dpif), 
vp‹t_ªque°
.
p‹t_no
,

1056 
upˇŒ_pid
);

1058 
	`VLOG_WARN_RL
(&
îr‹_æ
, "%s: failedÅo set upcallÖid onÖort: %s",

1059 
	`dpif_«me
(&
dpif
->dpif), 
	`°ªº‹
(
îr‹
));

1062 
	}
}

1065 
	$dpif_löux_ªcv_£t
(
dpif
 *
dpif_
, 
boﬁ
 
íabÀ
)

1067 
dpif_löux
 *
dpif
 = 
	`dpif_löux_ˇ°
(
dpif_
);

1069 i‡((
dpif
->
ïﬁl_fd
 >0Ë=
íabÀ
) {

1073 i‡(!
íabÀ
) {

1074 
	`de°roy_ch™√ls
(
dpif
);

1076 
dpif_ch™√l
 *
ch
;

1077 
îr‹
;

1079 
dpif
->
ïﬁl_fd
 = 
	`ïﬁl_¸óã
(
N_CHANNELS
);

1080 i‡(
dpif
->
ïﬁl_fd
 < 0) {

1081  
î∫o
;

1084 
ch
 = 
dpif
->
ch™√ls
; ch < &dpif->ch™√ls[
N_CHANNELS
]; ch++) {

1085 
ödx
 = 
ch
 - 
dpif
->
ch™√ls
;

1086 
ïﬁl_evít
 
evít
;

1088 
îr‹
 = 
	`∆_sock_¸óã
(
NETLINK_GENERIC
, &
ch
->
sock
);

1089 i‡(
îr‹
) {

1090 
	`de°roy_ch™√ls
(
dpif
);

1091  
îr‹
;

1094 
	`mem£t
(&
evít
, 0, Évent);

1095 
evít
.
evíts
 = 
EPOLLIN
;

1096 
evít
.
d©a
.
u32
 = 
ödx
;

1097 i‡(
	`ïﬁl_˘l
(
dpif
->
ïﬁl_fd
, 
EPOLL_CTL_ADD
, 
	`∆_sock_fd
(
ch
->
sock
),

1098 &
evít
) < 0) {

1099 
îr‹
 = 
î∫o
;

1100 
	`de°roy_ch™√ls
(
dpif
);

1101  
îr‹
;

1104 
	`mem£t
(
ch
->
skëches
, 0,  ch->sketches);

1105 
ch
->
œ°_pﬁl
 = 
LLONG_MIN
;

1108 
dpif
->
ªady_mask
 = 0;

1109 
dpif
->
√xt_sˇÀ
 = 
	`time_m£c
(Ë+ 
SCALE_INTERVAL
;

1112 
	`£t_upˇŒ_pids
(
dpif_
);

1115 
	}
}

1118 
	$dpif_löux_queue_to_¥i‹ôy
(c⁄° 
dpif
 *dpi‡
OVS_UNUSED
,

1119 
uöt32_t
 
queue_id
, uöt32_à*
¥i‹ôy
)

1121 i‡(
queue_id
 < 0xf000) {

1122 *
¥i‹ôy
 = 
	`TC_H_MAKE
(1 << 16, 
queue_id
 + 1);

1125  
EINVAL
;

1127 
	}
}

1130 
	$∑r£_odp_∑ckë
(
oÂbuf
 *
buf
, 
dpif_upˇŒ
 *
upˇŒ
,

1131 *
dp_ifödex
)

1133 c⁄° 
∆_pﬁicy
 
ovs_∑ckë_pﬁicy
[] = {

1135 [
OVS_PACKET_ATTR_PACKET
] = { .
ty≥
 = 
NL_A_UNSPEC
,

1136 .
mö_Àn
 = 
ETH_HEADER_LEN
 },

1137 [
OVS_PACKET_ATTR_KEY
] = { .
ty≥
 = 
NL_A_NESTED
 },

1140 [
OVS_PACKET_ATTR_USERDATA
] = { .
ty≥
 = 
NL_A_U64
, .
›ti⁄Æ
 = 
åue
 },

1143 
ovs_hódî
 *ovs_header;

1144 
∆©å
 *
a
[
	`ARRAY_SIZE
(
ovs_∑ckë_pﬁicy
)];

1145 
∆msghdr
 *
∆msg
;

1146 
gílmsghdr
 *
gíl
;

1147 
oÂbuf
 
b
;

1148 
ty≥
;

1150 
	`oÂbuf_u£_c⁄°
(&
b
, 
buf
->
d©a
, buf->
size
);

1152 
∆msg
 = 
	`oÂbuf_åy_puŒ
(&
b
,  *nlmsg);

1153 
gíl
 = 
	`oÂbuf_åy_puŒ
(&
b
,  *genl);

1154 
ovs_hódî
 = 
	`oÂbuf_åy_puŒ
(&
b
,  *ovs_header);

1155 i‡(!
∆msg
 || !
gíl
 || !
ovs_hódî


1156 || 
∆msg
->
∆msg_ty≥
 !
ovs_∑ckë_Ámûy


1157 || !
	`∆_pﬁicy_∑r£
(&
b
, 0, 
ovs_∑ckë_pﬁicy
, 
a
,

1158 
	`ARRAY_SIZE
(
ovs_∑ckë_pﬁicy
))) {

1159  
EINVAL
;

1162 
ty≥
 = (
gíl
->
cmd
 =
OVS_PACKET_CMD_MISS
 ? 
DPIF_UC_MISS


1163 : 
gíl
->
cmd
 =
OVS_PACKET_CMD_ACTION
 ? 
DPIF_UC_ACTION


1165 i‡(
ty≥
 < 0) {

1166  
EINVAL
;

1169 
	`mem£t
(
upˇŒ
, 0,  *upcall);

1170 
upˇŒ
->
ty≥
 =Åype;

1171 
upˇŒ
->
∑ckë
 = 
buf
;

1172 
upˇŒ
->
∑ckë
->
d©a
 = 
	`CONST_CAST
(
∆©å
 *,

1173 
	`∆_©å_gë
(
a
[
OVS_PACKET_ATTR_PACKET
]));

1174 
upˇŒ
->
∑ckë
->
size
 = 
	`∆_©å_gë_size
(
a
[
OVS_PACKET_ATTR_PACKET
]);

1175 
upˇŒ
->
key
 = 
	`CONST_CAST
(
∆©å
 *,

1176 
	`∆_©å_gë
(
a
[
OVS_PACKET_ATTR_KEY
]));

1177 
upˇŒ
->
key_Àn
 = 
	`∆_©å_gë_size
(
a
[
OVS_PACKET_ATTR_KEY
]);

1178 
upˇŒ
->
u£rd©a
 = (
a
[
OVS_PACKET_ATTR_USERDATA
]

1179 ? 
	`∆_©å_gë_u64
(
a
[
OVS_PACKET_ATTR_USERDATA
])

1181 *
dp_ifödex
 = 
ovs_hódî
->dp_ifindex;

1184 
	}
}

1187 
	$dpif_löux_ªcv
(
dpif
 *
dpif_
, 
dpif_upˇŒ
 *
upˇŒ
,

1188 
oÂbuf
 *
buf
)

1190 
dpif_löux
 *
dpif
 = 
	`dpif_löux_ˇ°
(
dpif_
);

1191 
ªad_åõs
 = 0;

1193 i‡(
dpif
->
ïﬁl_fd
 < 0) {

1194  
EAGAIN
;

1197 i‡(!
dpif
->
ªady_mask
) {

1198 
ïﬁl_evít
 
evíts
[
N_CHANNELS
];

1199 
ªtvÆ
;

1200 
i
;

1203 
ªtvÆ
 = 
	`ïﬁl_waô
(
dpif
->
ïﬁl_fd
, 
evíts
, 
N_CHANNELS
, 0);

1204 } 
ªtvÆ
 < 0 && 
î∫o
 =
EINTR
);

1205 i‡(
ªtvÆ
 < 0) {

1206 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 1);

1207 
	`VLOG_WARN_RL
(&
æ
, "ïﬁl_waô faûed (%s)", 
	`°ªº‹
(
î∫o
));

1210 
i
 = 0; i < 
ªtvÆ
; i++) {

1211 
dpif
->
ªady_mask
 |1u << 
evíts
[
i
].
d©a
.
u32
;

1215 
dpif
->
ªady_mask
) {

1216 
ödx
 = 
	`ffs
(
dpif
->
ªady_mask
) - 1;

1217 
dpif_ch™√l
 *
ch
 = &
dpif
->
ch™√ls
[
ödx
];

1219 
dpif
->
ªady_mask
 &~(1u << 
ödx
);

1222 
dp_ifödex
;

1223 
îr‹
;

1225 i‡(++
ªad_åõs
 > 50) {

1226  
EAGAIN
;

1229 
îr‹
 = 
	`∆_sock_ªcv
(
ch
->
sock
, 
buf
, 
Ál£
);

1230 i‡(
îr‹
 =
ENOBUFS
) {

1235 
	`ªp‹t_loss
(
dpif_
, 
ch
);

1239 
ch
->
œ°_pﬁl
 = 
	`time_m£c
();

1240 i‡(
îr‹
) {

1241 i‡(
îr‹
 =
EAGAIN
) {

1244  
îr‹
;

1247 
îr‹
 = 
	`∑r£_odp_∑ckë
(
buf
, 
upˇŒ
, &
dp_ifödex
);

1248 i‡(!
îr‹
 && 
dp_ifödex
 =
dpif
->dp_ifindex) {

1249 c⁄° 
∆©å
 *
ö_p‹t
;

1251 
ö_p‹t
 = 
	`∆_©å_föd__
(
upˇŒ
->
key
, upˇŒ->
key_Àn
,

1252 
OVS_KEY_ATTR_IN_PORT
);

1253 i‡(
ö_p‹t
) {

1254 
	`upd©e_skëch
(
ch
, 
	`∆_©å_gë_u32
(
ö_p‹t
));

1258 i‡(
îr‹
) {

1259  
îr‹
;

1264  
EAGAIN
;

1265 
	}
}

1268 
	$dpif_löux_ªcv_waô
(
dpif
 *
dpif_
)

1270 
dpif_löux
 *
dpif
 = 
	`dpif_löux_ˇ°
(
dpif_
);

1272 i‡(
dpif
->
ïﬁl_fd
 < 0) {

1276 
	`pﬁl_fd_waô
(
dpif
->
ïﬁl_fd
, 
POLLIN
);

1277 
	}
}

1280 
	$dpif_löux_ªcv_purge
(
dpif
 *
dpif_
)

1282 
dpif_löux
 *
dpif
 = 
	`dpif_löux_ˇ°
(
dpif_
);

1283 
dpif_ch™√l
 *
ch
;

1285 i‡(
dpif
->
ïﬁl_fd
 < 0) {

1289 
ch
 = 
dpif
->
ch™√ls
; ch < &dpif->ch™√ls[
N_CHANNELS
]; ch++) {

1290 
	`∆_sock_døö
(
ch
->
sock
);

1292 
	}
}

1294 c⁄° 
dpif_˛ass
 
	gdpif_löux_˛ass
 = {

1296 
dpif_löux_íumî©e
,

1297 
dpif_löux_›í
,

1298 
dpif_löux_˛o£
,

1299 
dpif_löux_de°roy
,

1300 
dpif_löux_run
,

1301 
dpif_löux_waô
,

1302 
dpif_löux_gë_°©s
,

1303 
dpif_löux_p‹t_add
,

1304 
dpif_löux_p‹t_dñ
,

1305 
dpif_löux_p‹t_quîy_by_numbî
,

1306 
dpif_löux_p‹t_quîy_by_«me
,

1307 
dpif_löux_gë_max_p‹ts
,

1308 
dpif_löux_p‹t_gë_pid
,

1309 
dpif_löux_p‹t_dump_°¨t
,

1310 
dpif_löux_p‹t_dump_√xt
,

1311 
dpif_löux_p‹t_dump_d⁄e
,

1312 
dpif_löux_p‹t_pﬁl
,

1313 
dpif_löux_p‹t_pﬁl_waô
,

1314 
dpif_löux_Êow_gë
,

1315 
dpif_löux_Êow_put
,

1316 
dpif_löux_Êow_dñ
,

1317 
dpif_löux_Êow_Êush
,

1318 
dpif_löux_Êow_dump_°¨t
,

1319 
dpif_löux_Êow_dump_√xt
,

1320 
dpif_löux_Êow_dump_d⁄e
,

1321 
dpif_löux_execuã
,

1322 
dpif_löux_›î©e
,

1323 
dpif_löux_ªcv_£t
,

1324 
dpif_löux_queue_to_¥i‹ôy
,

1325 
dpif_löux_ªcv
,

1326 
dpif_löux_ªcv_waô
,

1327 
dpif_löux_ªcv_purge
,

1331 
	$dpif_löux_öô
()

1333 
îr‹
 = -1;

1335 i‡(
îr‹
 < 0) {

1336 
ovs_vp‹t_mcgroup
;

1338 
îr‹
 = 
	`∆_lookup_gíl_Ámûy
(
OVS_DATAPATH_FAMILY
,

1339 &
ovs_d©≠©h_Ámûy
);

1340 i‡(
îr‹
) {

1341 
	`VLOG_ERR
("Generic Netlink family '%s' doesÇotÉxist. "

1343 
OVS_DATAPATH_FAMILY
);

1345 i‡(!
îr‹
) {

1346 
îr‹
 = 
	`∆_lookup_gíl_Ámûy
(
OVS_VPORT_FAMILY
, &
ovs_vp‹t_Ámûy
);

1348 i‡(!
îr‹
) {

1349 
îr‹
 = 
	`∆_lookup_gíl_Ámûy
(
OVS_FLOW_FAMILY
, &
ovs_Êow_Ámûy
);

1351 i‡(!
îr‹
) {

1352 
îr‹
 = 
	`∆_lookup_gíl_Ámûy
(
OVS_PACKET_FAMILY
,

1353 &
ovs_∑ckë_Ámûy
);

1355 i‡(!
îr‹
) {

1356 
îr‹
 = 
	`∆_sock_¸óã
(
NETLINK_GENERIC
, &
gíl_sock
);

1358 i‡(!
îr‹
) {

1359 
îr‹
 = 
	`∆_lookup_gíl_mcgroup
(
OVS_VPORT_FAMILY
, 
OVS_VPORT_MCGROUP
,

1360 &
ovs_vp‹t_mcgroup
,

1361 
OVS_VPORT_MCGROUP_FALLBACK_ID
);

1363 i‡(!
îr‹
) {

1364 
dpif_löux_vp‹t
 
vp‹t
;

1365 
∆n
 = 
	`∆n_¸óã
(
NETLINK_GENERIC
, 
ovs_vp‹t_mcgroup
,

1366 
dpif_löux_∆n_∑r£
, &
vp‹t
);

1370  
îr‹
;

1371 
	}
}

1373 
boﬁ


1374 
	$dpif_löux_is_öã∫Æ_devi˚
(c⁄° *
«me
)

1376 
dpif_löux_vp‹t
 
ª∂y
;

1377 
oÂbuf
 *
buf
;

1378 
îr‹
;

1380 
îr‹
 = 
	`dpif_löux_vp‹t_gë
(
«me
, &
ª∂y
, &
buf
);

1381 i‡(!
îr‹
) {

1382 
	`oÂbuf_dñëe
(
buf
);

1383 } i‡(
îr‹
 !
ENODEV
 &&Éº‹ !
ENOENT
) {

1384 
	`VLOG_WARN_RL
(&
îr‹_æ
, "%s: vport query failed (%s)",

1385 
«me
, 
	`°ªº‹
(
îr‹
));

1388  
ª∂y
.
ty≥
 =
OVS_VPORT_TYPE_INTERNAL
;

1389 
	}
}

1392 
	$dpif_löux_vp‹t_£nd
(
dp_ifödex
, 
uöt32_t
 
p‹t_no
,

1393 c⁄° *
d©a
, 
size_t
 
size
)

1395 
oÂbuf
 
a˘i⁄s
, 
key
, 
∑ckë
;

1396 
odputû_keybuf
 
keybuf
;

1397 
dpif_execuã
 
execuã
;

1398 
Êow
 flow;

1399 
uöt64_t
 
a˘i⁄
;

1401 
	`oÂbuf_u£_c⁄°
(&
∑ckë
, 
d©a
, 
size
);

1402 
	`Êow_exåa˘
(&
∑ckë
, 0, 0, 
NULL
, 0, &
Êow
);

1404 
	`oÂbuf_u£_°ack
(&
key
, &
keybuf
,  keybuf);

1405 
	`odp_Êow_key_‰om_Êow
(&
key
, &
Êow
);

1407 
	`oÂbuf_u£_°ack
(&
a˘i⁄s
, &
a˘i⁄
, áction);

1408 
	`∆_msg_put_u32
(&
a˘i⁄s
, 
OVS_ACTION_ATTR_OUTPUT
, 
p‹t_no
);

1410 
execuã
.
key
 = key.
d©a
;

1411 
execuã
.
key_Àn
 = 
key
.
size
;

1412 
execuã
.
a˘i⁄s
 =á˘i⁄s.
d©a
;

1413 
execuã
.
a˘i⁄s_Àn
 = 
a˘i⁄s
.
size
;

1414 
execuã
.
∑ckë
 = &packet;

1415  
	`dpif_löux_execuã__
(
dp_ifödex
, &
execuã
);

1416 
	}
}

1418 
boﬁ


1419 
	$dpif_löux_∆n_∑r£
(
oÂbuf
 *
buf
, *
vp‹t_
)

1421 
dpif_löux_vp‹t
 *
vp‹t
 = 
vp‹t_
;

1422  
	`dpif_löux_vp‹t_‰om_oÂbuf
(
vp‹t
, 
buf
) == 0;

1423 
	}
}

1426 
	$dpif_löux_p‹t_ch™ged
(c⁄° *
vp‹t_
, *
dpif_
)

1428 c⁄° 
dpif_löux_vp‹t
 *
vp‹t
 = 
vp‹t_
;

1429 
dpif_löux
 *
dpif
 = 
dpif_
;

1431 i‡(
vp‹t
) {

1432 i‡(
vp‹t
->
dp_ifödex
 =
dpif
->dp_ifindex

1433 && (
vp‹t
->
cmd
 =
OVS_VPORT_CMD_NEW


1434 || 
vp‹t
->
cmd
 =
OVS_VPORT_CMD_DEL


1435 || 
vp‹t
->
cmd
 =
OVS_VPORT_CMD_SET
)) {

1436 
	`VLOG_DBG
("p‹t_ch™ged: dpif:%†vp‹t:%†cmd:%"
PRIu8
,

1437 
dpif
->dpif.
fuŒ_«me
, 
vp‹t
->
«me
, vp‹t->
cmd
);

1438 
	`s£t_add
(&
dpif
->
ch™ged_p‹ts
, 
vp‹t
->
«me
);

1441 
dpif
->
ch™ge_îr‹
 = 
åue
;

1443 
	}
}

1452 
	$dpif_löux_vp‹t_‰om_oÂbuf
(
dpif_löux_vp‹t
 *
vp‹t
,

1453 c⁄° 
oÂbuf
 *
buf
)

1455 c⁄° 
∆_pﬁicy
 
ovs_vp‹t_pﬁicy
[] = {

1456 [
OVS_VPORT_ATTR_PORT_NO
] = { .
ty≥
 = 
NL_A_U32
 },

1457 [
OVS_VPORT_ATTR_TYPE
] = { .
ty≥
 = 
NL_A_U32
 },

1458 [
OVS_VPORT_ATTR_NAME
] = { .
ty≥
 = 
NL_A_STRING
, .
max_Àn
 = 
IFNAMSIZ
 },

1459 [
OVS_VPORT_ATTR_UPCALL_PID
] = { .
ty≥
 = 
NL_A_U32
 },

1460 [
OVS_VPORT_ATTR_STATS
] = { 
	`NL_POLICY_FOR
(
ovs_vp‹t_°©s
),

1461 .
›ti⁄Æ
 = 
åue
 },

1462 [
OVS_VPORT_ATTR_ADDRESS
] = { .
ty≥
 = 
NL_A_UNSPEC
,

1463 .
mö_Àn
 = 
ETH_ADDR_LEN
,

1464 .
max_Àn
 = 
ETH_ADDR_LEN
,

1465 .
›ti⁄Æ
 = 
åue
 },

1466 [
OVS_VPORT_ATTR_OPTIONS
] = { .
ty≥
 = 
NL_A_NESTED
, .
›ti⁄Æ
 = 
åue
 },

1469 
∆©å
 *
a
[
	`ARRAY_SIZE
(
ovs_vp‹t_pﬁicy
)];

1470 
ovs_hódî
 *ovs_header;

1471 
∆msghdr
 *
∆msg
;

1472 
gílmsghdr
 *
gíl
;

1473 
oÂbuf
 
b
;

1475 
	`dpif_löux_vp‹t_öô
(
vp‹t
);

1477 
	`oÂbuf_u£_c⁄°
(&
b
, 
buf
->
d©a
, buf->
size
);

1478 
∆msg
 = 
	`oÂbuf_åy_puŒ
(&
b
,  *nlmsg);

1479 
gíl
 = 
	`oÂbuf_åy_puŒ
(&
b
,  *genl);

1480 
ovs_hódî
 = 
	`oÂbuf_åy_puŒ
(&
b
,  *ovs_header);

1481 i‡(!
∆msg
 || !
gíl
 || !
ovs_hódî


1482 || 
∆msg
->
∆msg_ty≥
 !
ovs_vp‹t_Ámûy


1483 || !
	`∆_pﬁicy_∑r£
(&
b
, 0, 
ovs_vp‹t_pﬁicy
, 
a
,

1484 
	`ARRAY_SIZE
(
ovs_vp‹t_pﬁicy
))) {

1485  
EINVAL
;

1488 
vp‹t
->
cmd
 = 
gíl
->cmd;

1489 
vp‹t
->
dp_ifödex
 = 
ovs_hódî
->dp_ifindex;

1490 
vp‹t
->
p‹t_no
 = 
	`∆_©å_gë_u32
(
a
[
OVS_VPORT_ATTR_PORT_NO
]);

1491 
vp‹t
->
ty≥
 = 
	`∆_©å_gë_u32
(
a
[
OVS_VPORT_ATTR_TYPE
]);

1492 
vp‹t
->
«me
 = 
	`∆_©å_gë_°rög
(
a
[
OVS_VPORT_ATTR_NAME
]);

1493 i‡(
a
[
OVS_VPORT_ATTR_UPCALL_PID
]) {

1494 
vp‹t
->
upˇŒ_pid
 = 
	`∆_©å_gë
(
a
[
OVS_VPORT_ATTR_UPCALL_PID
]);

1496 i‡(
a
[
OVS_VPORT_ATTR_STATS
]) {

1497 
vp‹t
->
°©s
 = 
	`∆_©å_gë
(
a
[
OVS_VPORT_ATTR_STATS
]);

1499 i‡(
a
[
OVS_VPORT_ATTR_ADDRESS
]) {

1500 
vp‹t
->
addªss
 = 
	`∆_©å_gë
(
a
[
OVS_VPORT_ATTR_ADDRESS
]);

1502 i‡(
a
[
OVS_VPORT_ATTR_OPTIONS
]) {

1503 
vp‹t
->
›ti⁄s
 = 
	`∆_©å_gë
(
a
[
OVS_VPORT_ATTR_OPTIONS
]);

1504 
vp‹t
->
›ti⁄s_Àn
 = 
	`∆_©å_gë_size
(
a
[
OVS_VPORT_ATTR_OPTIONS
]);

1507 
	}
}

1512 
	$dpif_löux_vp‹t_to_oÂbuf
(c⁄° 
dpif_löux_vp‹t
 *
vp‹t
,

1513 
oÂbuf
 *
buf
)

1515 
ovs_hódî
 *ovs_header;

1517 
	`∆_msg_put_gílmsghdr
(
buf
, 0, 
ovs_vp‹t_Ámûy
, 
NLM_F_REQUEST
 | 
NLM_F_ECHO
,

1518 
vp‹t
->
cmd
, 
OVS_VPORT_VERSION
);

1520 
ovs_hódî
 = 
	`oÂbuf_put_unöô
(
buf
,  *ovs_header);

1521 
ovs_hódî
->
dp_ifödex
 = 
vp‹t
->dp_ifindex;

1523 i‡(
vp‹t
->
p‹t_no
 !
UINT32_MAX
) {

1524 
	`∆_msg_put_u32
(
buf
, 
OVS_VPORT_ATTR_PORT_NO
, 
vp‹t
->
p‹t_no
);

1527 i‡(
vp‹t
->
ty≥
 !
OVS_VPORT_TYPE_UNSPEC
) {

1528 
	`∆_msg_put_u32
(
buf
, 
OVS_VPORT_ATTR_TYPE
, 
vp‹t
->
ty≥
);

1531 i‡(
vp‹t
->
«me
) {

1532 
	`∆_msg_put_°rög
(
buf
, 
OVS_VPORT_ATTR_NAME
, 
vp‹t
->
«me
);

1535 i‡(
vp‹t
->
upˇŒ_pid
) {

1536 
	`∆_msg_put_u32
(
buf
, 
OVS_VPORT_ATTR_UPCALL_PID
, *
vp‹t
->
upˇŒ_pid
);

1539 i‡(
vp‹t
->
°©s
) {

1540 
	`∆_msg_put_un•ec
(
buf
, 
OVS_VPORT_ATTR_STATS
,

1541 
vp‹t
->
°©s
,  *vport->stats);

1544 i‡(
vp‹t
->
addªss
) {

1545 
	`∆_msg_put_un•ec
(
buf
, 
OVS_VPORT_ATTR_ADDRESS
,

1546 
vp‹t
->
addªss
, 
ETH_ADDR_LEN
);

1549 i‡(
vp‹t
->
›ti⁄s
) {

1550 
	`∆_msg_put_√°ed
(
buf
, 
OVS_VPORT_ATTR_OPTIONS
,

1551 
vp‹t
->
›ti⁄s
, vp‹t->
›ti⁄s_Àn
);

1553 
	}
}

1557 
	$dpif_löux_vp‹t_öô
(
dpif_löux_vp‹t
 *
vp‹t
)

1559 
	`mem£t
(
vp‹t
, 0,  *vport);

1560 
vp‹t
->
p‹t_no
 = 
UINT32_MAX
;

1561 
	}
}

1570 
	$dpif_löux_vp‹t_å™ß˘
(c⁄° 
dpif_löux_vp‹t
 *
ªque°
,

1571 
dpif_löux_vp‹t
 *
ª∂y
,

1572 
oÂbuf
 **
buÂ
)

1574 
oÂbuf
 *
ªque°_buf
;

1575 
îr‹
;

1577 
	`as£π
((
ª∂y
 !
NULL
Ë=(
buÂ
 != NULL));

1579 
îr‹
 = 
	`dpif_löux_öô
();

1580 i‡(
îr‹
) {

1581 i‡(
ª∂y
) {

1582 *
buÂ
 = 
NULL
;

1583 
	`dpif_löux_vp‹t_öô
(
ª∂y
);

1585  
îr‹
;

1588 
ªque°_buf
 = 
	`oÂbuf_√w
(1024);

1589 
	`dpif_löux_vp‹t_to_oÂbuf
(
ªque°
, 
ªque°_buf
);

1590 
îr‹
 = 
	`∆_sock_å™ß˘
(
gíl_sock
, 
ªque°_buf
, 
buÂ
);

1591 
	`oÂbuf_dñëe
(
ªque°_buf
);

1593 i‡(
ª∂y
) {

1594 i‡(!
îr‹
) {

1595 
îr‹
 = 
	`dpif_löux_vp‹t_‰om_oÂbuf
(
ª∂y
, *
buÂ
);

1597 i‡(
îr‹
) {

1598 
	`dpif_löux_vp‹t_öô
(
ª∂y
);

1599 
	`oÂbuf_dñëe
(*
buÂ
);

1600 *
buÂ
 = 
NULL
;

1603  
îr‹
;

1604 
	}
}

1610 
	$dpif_löux_vp‹t_gë
(c⁄° *
«me
, 
dpif_löux_vp‹t
 *
ª∂y
,

1611 
oÂbuf
 **
buÂ
)

1613 
dpif_löux_vp‹t
 
ªque°
;

1615 
	`dpif_löux_vp‹t_öô
(&
ªque°
);

1616 
ªque°
.
cmd
 = 
OVS_VPORT_CMD_GET
;

1617 
ªque°
.
«me
 =Çame;

1619  
	`dpif_löux_vp‹t_å™ß˘
(&
ªque°
, 
ª∂y
, 
buÂ
);

1620 
	}
}

1629 
	$dpif_löux_dp_‰om_oÂbuf
(
dpif_löux_dp
 *
dp
, c⁄° 
oÂbuf
 *
buf
)

1631 c⁄° 
∆_pﬁicy
 
ovs_d©≠©h_pﬁicy
[] = {

1632 [
OVS_DP_ATTR_NAME
] = { .
ty≥
 = 
NL_A_STRING
, .
max_Àn
 = 
IFNAMSIZ
 },

1633 [
OVS_DP_ATTR_STATS
] = { 
	`NL_POLICY_FOR
(
ovs_dp_°©s
),

1634 .
›ti⁄Æ
 = 
åue
 },

1637 
∆©å
 *
a
[
	`ARRAY_SIZE
(
ovs_d©≠©h_pﬁicy
)];

1638 
ovs_hódî
 *ovs_header;

1639 
∆msghdr
 *
∆msg
;

1640 
gílmsghdr
 *
gíl
;

1641 
oÂbuf
 
b
;

1643 
	`dpif_löux_dp_öô
(
dp
);

1645 
	`oÂbuf_u£_c⁄°
(&
b
, 
buf
->
d©a
, buf->
size
);

1646 
∆msg
 = 
	`oÂbuf_åy_puŒ
(&
b
,  *nlmsg);

1647 
gíl
 = 
	`oÂbuf_åy_puŒ
(&
b
,  *genl);

1648 
ovs_hódî
 = 
	`oÂbuf_åy_puŒ
(&
b
,  *ovs_header);

1649 i‡(!
∆msg
 || !
gíl
 || !
ovs_hódî


1650 || 
∆msg
->
∆msg_ty≥
 !
ovs_d©≠©h_Ámûy


1651 || !
	`∆_pﬁicy_∑r£
(&
b
, 0, 
ovs_d©≠©h_pﬁicy
, 
a
,

1652 
	`ARRAY_SIZE
(
ovs_d©≠©h_pﬁicy
))) {

1653  
EINVAL
;

1656 
dp
->
cmd
 = 
gíl
->cmd;

1657 
dp
->
dp_ifödex
 = 
ovs_hódî
->dp_ifindex;

1658 
dp
->
«me
 = 
	`∆_©å_gë_°rög
(
a
[
OVS_DP_ATTR_NAME
]);

1659 i‡(
a
[
OVS_DP_ATTR_STATS
]) {

1662 
	`mem˝y
(&
dp
->
°©s
, 
	`∆_©å_gë
(
a
[
OVS_DP_ATTR_STATS
]),

1663  
dp
->
°©s
);

1667 
	}
}

1671 
	$dpif_löux_dp_to_oÂbuf
(c⁄° 
dpif_löux_dp
 *
dp
, 
oÂbuf
 *
buf
)

1673 
ovs_hódî
 *ovs_header;

1675 
	`∆_msg_put_gílmsghdr
(
buf
, 0, 
ovs_d©≠©h_Ámûy
,

1676 
NLM_F_REQUEST
 | 
NLM_F_ECHO
, 
dp
->
cmd
,

1677 
OVS_DATAPATH_VERSION
);

1679 
ovs_hódî
 = 
	`oÂbuf_put_unöô
(
buf
,  *ovs_header);

1680 
ovs_hódî
->
dp_ifödex
 = 
dp
->dp_ifindex;

1682 i‡(
dp
->
«me
) {

1683 
	`∆_msg_put_°rög
(
buf
, 
OVS_DP_ATTR_NAME
, 
dp
->
«me
);

1686 i‡(
dp
->
upˇŒ_pid
) {

1687 
	`∆_msg_put_u32
(
buf
, 
OVS_DP_ATTR_UPCALL_PID
, *
dp
->
upˇŒ_pid
);

1691 
	}
}

1695 
	$dpif_löux_dp_öô
(
dpif_löux_dp
 *
dp
)

1697 
	`mem£t
(
dp
, 0,  *dp);

1698 
	}
}

1701 
	$dpif_löux_dp_dump_°¨t
(
∆_dump
 *
dump
)

1703 
dpif_löux_dp
 
ªque°
;

1704 
oÂbuf
 *
buf
;

1706 
	`dpif_löux_dp_öô
(&
ªque°
);

1707 
ªque°
.
cmd
 = 
OVS_DP_CMD_GET
;

1709 
buf
 = 
	`oÂbuf_√w
(1024);

1710 
	`dpif_löux_dp_to_oÂbuf
(&
ªque°
, 
buf
);

1711 
	`∆_dump_°¨t
(
dump
, 
gíl_sock
, 
buf
);

1712 
	`oÂbuf_dñëe
(
buf
);

1713 
	}
}

1722 
	$dpif_löux_dp_å™ß˘
(c⁄° 
dpif_löux_dp
 *
ªque°
,

1723 
dpif_löux_dp
 *
ª∂y
, 
oÂbuf
 **
buÂ
)

1725 
oÂbuf
 *
ªque°_buf
;

1726 
îr‹
;

1728 
	`as£π
((
ª∂y
 !
NULL
Ë=(
buÂ
 != NULL));

1730 
ªque°_buf
 = 
	`oÂbuf_√w
(1024);

1731 
	`dpif_löux_dp_to_oÂbuf
(
ªque°
, 
ªque°_buf
);

1732 
îr‹
 = 
	`∆_sock_å™ß˘
(
gíl_sock
, 
ªque°_buf
, 
buÂ
);

1733 
	`oÂbuf_dñëe
(
ªque°_buf
);

1735 i‡(
ª∂y
) {

1736 i‡(!
îr‹
) {

1737 
îr‹
 = 
	`dpif_löux_dp_‰om_oÂbuf
(
ª∂y
, *
buÂ
);

1739 i‡(
îr‹
) {

1740 
	`dpif_löux_dp_öô
(
ª∂y
);

1741 
	`oÂbuf_dñëe
(*
buÂ
);

1742 *
buÂ
 = 
NULL
;

1745  
îr‹
;

1746 
	}
}

1752 
	$dpif_löux_dp_gë
(c⁄° 
dpif
 *
dpif_
, 
dpif_löux_dp
 *
ª∂y
,

1753 
oÂbuf
 **
buÂ
)

1755 
dpif_löux
 *
dpif
 = 
	`dpif_löux_ˇ°
(
dpif_
);

1756 
dpif_löux_dp
 
ªque°
;

1758 
	`dpif_löux_dp_öô
(&
ªque°
);

1759 
ªque°
.
cmd
 = 
OVS_DP_CMD_GET
;

1760 
ªque°
.
dp_ifödex
 = 
dpif
->dp_ifindex;

1762  
	`dpif_löux_dp_å™ß˘
(&
ªque°
, 
ª∂y
, 
buÂ
);

1763 
	}
}

1772 
	$dpif_löux_Êow_‰om_oÂbuf
(
dpif_löux_Êow
 *
Êow
,

1773 c⁄° 
oÂbuf
 *
buf
)

1775 c⁄° 
∆_pﬁicy
 
ovs_Êow_pﬁicy
[] = {

1776 [
OVS_FLOW_ATTR_KEY
] = { .
ty≥
 = 
NL_A_NESTED
 },

1777 [
OVS_FLOW_ATTR_ACTIONS
] = { .
ty≥
 = 
NL_A_NESTED
, .
›ti⁄Æ
 = 
åue
 },

1778 [
OVS_FLOW_ATTR_STATS
] = { 
	`NL_POLICY_FOR
(
ovs_Êow_°©s
),

1779 .
›ti⁄Æ
 = 
åue
 },

1780 [
OVS_FLOW_ATTR_TCP_FLAGS
] = { .
ty≥
 = 
NL_A_U8
, .
›ti⁄Æ
 = 
åue
 },

1781 [
OVS_FLOW_ATTR_USED
] = { .
ty≥
 = 
NL_A_U64
, .
›ti⁄Æ
 = 
åue
 },

1785 
∆©å
 *
a
[
	`ARRAY_SIZE
(
ovs_Êow_pﬁicy
)];

1786 
ovs_hódî
 *ovs_header;

1787 
∆msghdr
 *
∆msg
;

1788 
gílmsghdr
 *
gíl
;

1789 
oÂbuf
 
b
;

1791 
	`dpif_löux_Êow_öô
(
Êow
);

1793 
	`oÂbuf_u£_c⁄°
(&
b
, 
buf
->
d©a
, buf->
size
);

1794 
∆msg
 = 
	`oÂbuf_åy_puŒ
(&
b
,  *nlmsg);

1795 
gíl
 = 
	`oÂbuf_åy_puŒ
(&
b
,  *genl);

1796 
ovs_hódî
 = 
	`oÂbuf_åy_puŒ
(&
b
,  *ovs_header);

1797 i‡(!
∆msg
 || !
gíl
 || !
ovs_hódî


1798 || 
∆msg
->
∆msg_ty≥
 !
ovs_Êow_Ámûy


1799 || !
	`∆_pﬁicy_∑r£
(&
b
, 0, 
ovs_Êow_pﬁicy
, 
a
,

1800 
	`ARRAY_SIZE
(
ovs_Êow_pﬁicy
))) {

1801  
EINVAL
;

1804 
Êow
->
∆msg_Êags
 = 
∆msg
->nlmsg_flags;

1805 
Êow
->
dp_ifödex
 = 
ovs_hódî
->dp_ifindex;

1806 
Êow
->
key
 = 
	`∆_©å_gë
(
a
[
OVS_FLOW_ATTR_KEY
]);

1807 
Êow
->
key_Àn
 = 
	`∆_©å_gë_size
(
a
[
OVS_FLOW_ATTR_KEY
]);

1808 i‡(
a
[
OVS_FLOW_ATTR_ACTIONS
]) {

1809 
Êow
->
a˘i⁄s
 = 
	`∆_©å_gë
(
a
[
OVS_FLOW_ATTR_ACTIONS
]);

1810 
Êow
->
a˘i⁄s_Àn
 = 
	`∆_©å_gë_size
(
a
[
OVS_FLOW_ATTR_ACTIONS
]);

1812 i‡(
a
[
OVS_FLOW_ATTR_STATS
]) {

1813 
Êow
->
°©s
 = 
	`∆_©å_gë
(
a
[
OVS_FLOW_ATTR_STATS
]);

1815 i‡(
a
[
OVS_FLOW_ATTR_TCP_FLAGS
]) {

1816 
Êow
->
t˝_Êags
 = 
	`∆_©å_gë
(
a
[
OVS_FLOW_ATTR_TCP_FLAGS
]);

1818 i‡(
a
[
OVS_FLOW_ATTR_USED
]) {

1819 
Êow
->
u£d
 = 
	`∆_©å_gë
(
a
[
OVS_FLOW_ATTR_USED
]);

1822 
	}
}

1827 
	$dpif_löux_Êow_to_oÂbuf
(c⁄° 
dpif_löux_Êow
 *
Êow
,

1828 
oÂbuf
 *
buf
)

1830 
ovs_hódî
 *ovs_header;

1832 
	`∆_msg_put_gílmsghdr
(
buf
, 0, 
ovs_Êow_Ámûy
,

1833 
NLM_F_REQUEST
 | 
Êow
->
∆msg_Êags
,

1834 
Êow
->
cmd
, 
OVS_FLOW_VERSION
);

1836 
ovs_hódî
 = 
	`oÂbuf_put_unöô
(
buf
,  *ovs_header);

1837 
ovs_hódî
->
dp_ifödex
 = 
Êow
->dp_ifindex;

1839 i‡(
Êow
->
key_Àn
) {

1840 
	`∆_msg_put_un•ec
(
buf
, 
OVS_FLOW_ATTR_KEY
, 
Êow
->
key
, flow->
key_Àn
);

1843 i‡(
Êow
->
a˘i⁄s
 || flow->
a˘i⁄s_Àn
) {

1844 
	`∆_msg_put_un•ec
(
buf
, 
OVS_FLOW_ATTR_ACTIONS
,

1845 
Êow
->
a˘i⁄s
, flow->
a˘i⁄s_Àn
);

1849 
	`as£π
(!
Êow
->
°©s
);

1850 
	`as£π
(!
Êow
->
t˝_Êags
);

1851 
	`as£π
(!
Êow
->
u£d
);

1853 i‡(
Êow
->
˛ór
) {

1854 
	`∆_msg_put_Êag
(
buf
, 
OVS_FLOW_ATTR_CLEAR
);

1856 
	}
}

1860 
	$dpif_löux_Êow_öô
(
dpif_löux_Êow
 *
Êow
)

1862 
	`mem£t
(
Êow
, 0,  *flow);

1863 
	}
}

1872 
	$dpif_löux_Êow_å™ß˘
(
dpif_löux_Êow
 *
ªque°
,

1873 
dpif_löux_Êow
 *
ª∂y
, 
oÂbuf
 **
buÂ
)

1875 
oÂbuf
 *
ªque°_buf
;

1876 
îr‹
;

1878 
	`as£π
((
ª∂y
 !
NULL
Ë=(
buÂ
 != NULL));

1880 i‡(
ª∂y
) {

1881 
ªque°
->
∆msg_Êags
 |
NLM_F_ECHO
;

1884 
ªque°_buf
 = 
	`oÂbuf_√w
(1024);

1885 
	`dpif_löux_Êow_to_oÂbuf
(
ªque°
, 
ªque°_buf
);

1886 
îr‹
 = 
	`∆_sock_å™ß˘
(
gíl_sock
, 
ªque°_buf
, 
buÂ
);

1887 
	`oÂbuf_dñëe
(
ªque°_buf
);

1889 i‡(
ª∂y
) {

1890 i‡(!
îr‹
) {

1891 
îr‹
 = 
	`dpif_löux_Êow_‰om_oÂbuf
(
ª∂y
, *
buÂ
);

1893 i‡(
îr‹
) {

1894 
	`dpif_löux_Êow_öô
(
ª∂y
);

1895 
	`oÂbuf_dñëe
(*
buÂ
);

1896 *
buÂ
 = 
NULL
;

1899  
îr‹
;

1900 
	}
}

1903 
	$dpif_löux_Êow_gë_°©s
(c⁄° 
dpif_löux_Êow
 *
Êow
,

1904 
dpif_Êow_°©s
 *
°©s
)

1906 i‡(
Êow
->
°©s
) {

1907 
°©s
->
n_∑ckës
 = 
	`gë_u«lig√d_u64
(&
Êow
->stats->n_packets);

1908 
°©s
->
n_byãs
 = 
	`gë_u«lig√d_u64
(&
Êow
->stats->n_bytes);

1910 
°©s
->
n_∑ckës
 = 0;

1911 
°©s
->
n_byãs
 = 0;

1913 
°©s
->
u£d
 = 
Êow
->u£d ? 
	`gë_32Æig√d_u64
(flow->used) : 0;

1914 
°©s
->
t˝_Êags
 = 
Êow
->tcp_flags ? *flow->tcp_flags : 0;

1915 
	}
}

1921 
	$upd©e_skëch
(
dpif_ch™√l
 *
ch
, 
uöt32_t
 
p‹t_no
)

1923 
dpif_skëch
 *
sk
;

1927 
sk
 = 
ch
->
skëches
; ; sk++) {

1928 i‡(
p‹t_no
 =
sk
->port_no) {

1930 } i‡(
sk
 =&
ch
->
skëches
[
N_SKETCHES
 - 1]) {

1931 
sk
->
p‹t_no
 =Öort_no;

1932 
sk
->
îr‹
 = sk->
hôs
;

1939 
sk
->
hôs
++;

1940 
sk
 > 
ch
->
skëches
 && sk[-1].
hôs
 > sk->hits) {

1941 
dpif_skëch
 
tmp
 = 
sk
[-1];

1942 
sk
[-1] = *sk;

1943 *
sk
 = 
tmp
;

1944 
sk
--;

1946 
	}
}

1951 
	$sˇÀ_skëches
(
dpif
 *
dpif_
)

1953 
dpif_löux
 *
dpif
 = 
	`dpif_löux_ˇ°
(
dpif_
);

1954 
dpif_ch™√l
 *
ch
;

1956 
ch
 = 
dpif
->
ch™√ls
; ch < &dpif->ch™√ls[
N_CHANNELS
]; ch++) {

1957 
dpif_skëch
 *
sk
;

1959 
sk
 = 
ch
->
skëches
; sk < &ch->skëches[
N_SKETCHES
]; sk++) {

1960 
sk
->
hôs
 /= 2;

1961 
sk
->
îr‹
 /= 2;

1964 
	}
}

1969 
	$ªp‹t_loss
(
dpif
 *
dpif_
, 
dpif_ch™√l
 *
ch
)

1971 
dpif_löux
 *
dpif
 = 
	`dpif_löux_ˇ°
(
dpif_
);

1972 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(5, 5);

1973 
dpif_skëch
 *
sk
;

1974 
ds
 
s
;

1976 i‡(
	`VLOG_DROP_WARN
(&
æ
)) {

1980 
	`ds_öô
(&
s
);

1981 i‡(
ch
->
œ°_pﬁl
 !
LLONG_MIN
) {

1982 
	`ds_put_f‹m©
(&
s
, " (lastÖolled %lld mságo)",

1983 
	`time_m£c
(Ë- 
ch
->
œ°_pﬁl
);

1985 
	`ds_put_c°r
(&
s
, ", most frequent sourcesáre");

1986 
sk
 = 
ch
->
skëches
; sk < &ch->skëches[
N_SKETCHES
]; sk++) {

1987 i‡(
sk
->
hôs
) {

1988 
dpif_p‹t
 
p‹t
;

1990 
	`ds_put_f‹m©
(&
s
, " %"
PRIu32
, 
sk
->
p‹t_no
);

1991 i‡(!
	`dpif_p‹t_quîy_by_numbî
(
dpif_
, 
sk
->
p‹t_no
, &
p‹t
)) {

1992 
	`ds_put_f‹m©
(&
s
, "(%s)", 
p‹t
.
«me
);

1993 
	`dpif_p‹t_de°roy
(&
p‹t
);

1995 i‡(
sk
->
îr‹
) {

1996 
	`ds_put_f‹m©
(&
s
, ": %uÅo %u,",

1997 
sk
->
hôs
 - sk->
îr‹
, sk->hits);

1999 
	`ds_put_f‹m©
(&
s
, ": %u,", 
sk
->
hôs
);

2003 
	`ds_chomp
(&
s
, ',');

2005 
	`VLOG_WARN
("%s:ÜostÖacket on channel %td%s",

2006 
	`dpif_«me
(
dpif_
), 
ch
 - 
dpif
->
ch™√ls
, 
	`ds_c°r
(&
s
));

2007 
	`ds_de°roy
(&
s
);

2008 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/dpif-linux.h

17 #i‚de‡
DPIF_LINUX_H


18 
	#DPIF_LINUX_H
 1

	)

20 
	~<°dboﬁ.h
>

21 
	~<°ddef.h
>

22 
	~<°döt.h
>

23 
	~<löux/›ívswôch.h
>

25 
	goÂbuf
;

27 
	sdpif_löux_vp‹t
 {

29 
uöt8_t
 
	mcmd
;

32 
	mdp_ifödex
;

33 
uöt32_t
 
	mp‹t_no
;

34 
ovs_vp‹t_ty≥
 
	mty≥
;

41 c⁄° *
	m«me
;

42 c⁄° 
uöt32_t
 *
	mupˇŒ_pid
;

43 c⁄° 
ovs_vp‹t_°©s
 *
	m°©s
;

44 c⁄° 
uöt8_t
 *
	maddªss
;

45 c⁄° 
∆©å
 *
	m›ti⁄s
;

46 
size_t
 
	m›ti⁄s_Àn
;

49 
dpif_löux_vp‹t_öô
(
dpif_löux_vp‹t
 *);

51 
dpif_löux_vp‹t_å™ß˘
(c⁄° 
dpif_löux_vp‹t
 *
ªque°
,

52 
dpif_löux_vp‹t
 *
ª∂y
,

53 
oÂbuf
 **
buÂ
);

54 
dpif_löux_vp‹t_gë
(c⁄° *
«me
, 
dpif_löux_vp‹t
 *
ª∂y
,

55 
oÂbuf
 **
buÂ
);

57 
boﬁ
 
dpif_löux_is_öã∫Æ_devi˚
(c⁄° *
«me
);

59 
dpif_löux_vp‹t_£nd
(
dp_ifödex
, 
uöt32_t
 
p‹t_no
,

60 c⁄° *
d©a
, 
size_t
 
size
);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/dpif-netdev.c

17 
	~<c⁄fig.h
>

18 
	~"dpif.h
"

20 
	~<as£π.h
>

21 
	~<˘y≥.h
>

22 
	~<î∫o.h
>

23 
	~<f˙é.h
>

24 
	~<öây≥s.h
>

25 
	~<√töë/ö.h
>

26 
	~<sys/sockë.h
>

27 
	~<√t/if.h
>

28 
	~<°döt.h
>

29 
	~<°dlib.h
>

30 
	~<°rög.h
>

31 
	~<sys/io˘l.h
>

32 
	~<sys/°©.h
>

33 
	~<uni°d.h
>

35 
	~"csum.h
"

36 
	~"dpif.h
"

37 
	~"dpif-¥ovidî.h
"

38 
	~"dummy.h
"

39 
	~"dy«mic-°rög.h
"

40 
	~"Êow.h
"

41 
	~"hm≠.h
"

42 
	~"li°.h
"

43 
	~"√tdev.h
"

44 
	~"√éök.h
"

45 
	~"odp-utû.h
"

46 
	~"oÂ-¥öt.h
"

47 
	~"oÂbuf.h
"

48 
	~"∑ckës.h
"

49 
	~"pﬁl-lo›.h
"

50 
	~"øndom.h
"

51 
	~"shash.h
"

52 
	~"s£t.h
"

53 
	~"timevÆ.h
"

54 
	~"utû.h
"

55 
	~"vlog.h
"

57 
VLOG_DEFINE_THIS_MODULE
(
dpif_√tdev
);

60 íum { 
	mMAX_PORTS
 = 256 };

61 íum { 
	mMAX_FLOWS
 = 65536 };

65 íum { 
	mDP_NETDEV_HEADROOM
 = 2 + 
VLAN_HEADER_LEN
 };

68 íum { 
	mN_QUEUES
 = 2 };

69 íum { 
	mMAX_QUEUE_LEN
 = 128 };

70 íum { 
	mQUEUE_MASK
 = 
MAX_QUEUE_LEN
 - 1 };

71 
BUILD_ASSERT_DECL
(
IS_POW2
(
MAX_QUEUE_LEN
));

73 
	sdp_√tdev_upˇŒ
 {

74 
dpif_upˇŒ
 
	mupˇŒ
;

75 
oÂbuf
 
	mbuf
;

78 
	sdp_√tdev_queue
 {

79 
dp_√tdev_upˇŒ
 
	mupˇŒs
[
MAX_QUEUE_LEN
];

80 
	mhód
, 
	mèû
;

84 
	sdp_√tdev
 {

85 c⁄° 
dpif_˛ass
 *
	m˛ass
;

86 *
	m«me
;

87 
	m›í_˙t
;

88 
boﬁ
 
	mde°royed
;

90 
dp_√tdev_queue
 
	mqueues
[
N_QUEUES
];

91 
hm≠
 
	mÊow_èbÀ
;

94 
	mn_hô
;

95 
	mn_mis£d
;

96 
	mn_lo°
;

99 
dp_√tdev_p‹t
 *
	mp‹ts
[
MAX_PORTS
];

100 
li°
 
	mp‹t_li°
;

101 
	m£rül
;

105 
	sdp_√tdev_p‹t
 {

106 
	mp‹t_no
;

107 
li°
 
	mnode
;

108 
√tdev
 *
	m√tdev
;

109 *
	mty≥
;

113 
	sdp_√tdev_Êow
 {

114 
hm≠_node
 
	mnode
;

115 
Êow
 
	mkey
;

118 
	mu£d
;

119 
	m∑ckë_cou¡
;

120 
	mbyã_cou¡
;

121 
uöt8_t
 
	mt˝_Êags
;

124 
∆©å
 *
	ma˘i⁄s
;

125 
size_t
 
	ma˘i⁄s_Àn
;

129 
	sdpif_√tdev
 {

130 
dpif
 
	mdpif
;

131 
dp_√tdev
 *
	mdp
;

132 
	mdp_£rül
;

136 
shash
 
	gdp_√tdevs
 = 
SHASH_INITIALIZER
(&
dp_√tdevs
);

139 
	gmax_mtu
 = 
ETH_PAYLOAD_MAX
;

141 
gë_p‹t_by_numbî
(
dp_√tdev
 *, 
uöt16_t
 
p‹t_no
,

142 
dp_√tdev_p‹t
 **
p‹ç
);

143 
gë_p‹t_by_«me
(
dp_√tdev
 *, c⁄° *
dev«me
,

144 
dp_√tdev_p‹t
 **
p‹ç
);

145 
dp_√tdev_‰ì
(
dp_√tdev
 *);

146 
dp_√tdev_Êow_Êush
(
dp_√tdev
 *);

147 
do_add_p‹t
(
dp_√tdev
 *, c⁄° *
dev«me
,

148 c⁄° *
ty≥
, 
uöt16_t
 
p‹t_no
);

149 
do_dñ_p‹t
(
dp_√tdev
 *, 
uöt16_t
 
p‹t_no
);

150 
dpif_√tdev_›í
(c⁄° 
dpif_˛ass
 *, c⁄° *
«me
,

151 
boﬁ
 
¸óã
, 
dpif
 **);

152 
dp_√tdev_ouçut_u£r•a˚
(
dp_√tdev
 *, c⁄° 
oÂbuf
 *,

153 
queue_no
, c⁄° 
Êow
 *,

154 
uöt64_t
 
¨g
);

155 
dp_√tdev_execuã_a˘i⁄s
(
dp_√tdev
 *,

156 
oÂbuf
 *, 
Êow
 *,

157 c⁄° 
∆©å
 *
a˘i⁄s
,

158 
size_t
 
a˘i⁄s_Àn
);

160 
dpif_√tdev
 *

161 
	$dpif_√tdev_ˇ°
(c⁄° 
dpif
 *dpif)

163 
	`as£π
(
dpif
->
dpif_˛ass
->
›í
 =
dpif_√tdev_›í
);

164  
	`CONTAINER_OF
(
dpif
, 
dpif_√tdev
, dpif);

165 
	}
}

167 
dp_√tdev
 *

168 
	$gë_dp_√tdev
(c⁄° 
dpif
 *dpif)

170  
	`dpif_√tdev_ˇ°
(
dpif
)->
dp
;

171 
	}
}

174 
	$dpif_√tdev_íumî©e
(
s£t
 *
Æl_dps
)

176 
shash_node
 *
node
;

178 
	`SHASH_FOR_EACH
(
node
, &
dp_√tdevs
) {

179 
	`s£t_add
(
Æl_dps
, 
node
->
«me
);

182 
	}
}

184 
dpif
 *

185 
	$¸óã_dpif_√tdev
(
dp_√tdev
 *
dp
)

187 
uöt16_t
 
√tÊow_id
 = 
	`hash_°rög
(
dp
->
«me
, 0);

188 
dpif_√tdev
 *
dpif
;

190 
dp
->
›í_˙t
++;

192 
dpif
 = 
	`xmÆloc
( *dpif);

193 
	`dpif_öô
(&
dpif
->dpif, 
dp
->
˛ass
, dp->
«me
, 
√tÊow_id
 >> 8,Çetflow_id);

194 
dpif
->
dp
 = dp;

195 
dpif
->
dp_£rül
 = 
dp
->
£rül
;

197  &
dpif
->dpif;

198 
	}
}

201 
	$¸óã_dp_√tdev
(c⁄° *
«me
, c⁄° 
dpif_˛ass
 *
˛ass
,

202 
dp_√tdev
 **
dµ
)

204 
dp_√tdev
 *
dp
;

205 
îr‹
;

206 
i
;

208 
dp
 = 
	`xzÆloc
( *dp);

209 
dp
->
˛ass
 = class;

210 
dp
->
«me
 = 
	`x°rdup
(name);

211 
dp
->
›í_˙t
 = 0;

212 
i
 = 0; i < 
N_QUEUES
; i++) {

213 
dp
->
queues
[
i
].
hód
 = dp->queues[i].
èû
 = 0;

215 
	`hm≠_öô
(&
dp
->
Êow_èbÀ
);

216 
	`li°_öô
(&
dp
->
p‹t_li°
);

217 
îr‹
 = 
	`do_add_p‹t
(
dp
, 
«me
, "öã∫Æ", 
OVSP_LOCAL
);

218 i‡(
îr‹
) {

219 
	`dp_√tdev_‰ì
(
dp
);

220  
îr‹
;

223 
	`shash_add
(&
dp_√tdevs
, 
«me
, 
dp
);

225 *
dµ
 = 
dp
;

227 
	}
}

230 
	$dpif_√tdev_›í
(c⁄° 
dpif_˛ass
 *
˛ass
, c⁄° *
«me
,

231 
boﬁ
 
¸óã
, 
dpif
 **
dpiÂ
)

233 
dp_√tdev
 *
dp
;

235 
dp
 = 
	`shash_föd_d©a
(&
dp_√tdevs
, 
«me
);

236 i‡(!
dp
) {

237 i‡(!
¸óã
) {

238  
ENODEV
;

240 
îr‹
 = 
	`¸óã_dp_√tdev
(
«me
, 
˛ass
, &
dp
);

241 i‡(
îr‹
) {

242  
îr‹
;

244 
	`as£π
(
dp
 !
NULL
);

247 i‡(
dp
->
˛ass
 != class) {

248  
EINVAL
;

249 } i‡(
¸óã
) {

250  
EEXIST
;

254 *
dpiÂ
 = 
	`¸óã_dpif_√tdev
(
dp
);

256 
	}
}

259 
	$dp_√tdev_purge_queues
(
dp_√tdev
 *
dp
)

261 
i
;

263 
i
 = 0; i < 
N_QUEUES
; i++) {

264 
dp_√tdev_queue
 *
q
 = &
dp
->
queues
[
i
];

266 
q
->
èû
 !q->
hód
) {

267 
dp_√tdev_upˇŒ
 *
u
 = &
q
->
upˇŒs
[q->
èû
++ & 
QUEUE_MASK
];

268 
	`oÂbuf_unöô
(&
u
->
buf
);

271 
	}
}

274 
	$dp_√tdev_‰ì
(
dp_√tdev
 *
dp
)

276 
dp_√tdev_p‹t
 *
p‹t
, *
√xt
;

278 
	`dp_√tdev_Êow_Êush
(
dp
);

279 
	`LIST_FOR_EACH_SAFE
 (
p‹t
, 
√xt
, 
node
, &
dp
->
p‹t_li°
) {

280 
	`do_dñ_p‹t
(
dp
, 
p‹t
->
p‹t_no
);

282 
	`dp_√tdev_purge_queues
(
dp
);

283 
	`hm≠_de°roy
(&
dp
->
Êow_èbÀ
);

284 
	`‰ì
(
dp
->
«me
);

285 
	`‰ì
(
dp
);

286 
	}
}

289 
	$dpif_√tdev_˛o£
(
dpif
 *dpif)

291 
dp_√tdev
 *
dp
 = 
	`gë_dp_√tdev
(
dpif
);

292 
	`as£π
(
dp
->
›í_˙t
 > 0);

293 i‡(--
dp
->
›í_˙t
 =0 && dp->
de°royed
) {

294 
	`shash_föd_™d_dñëe
(&
dp_√tdevs
, 
dp
->
«me
);

295 
	`dp_√tdev_‰ì
(
dp
);

297 
	`‰ì
(
dpif
);

298 
	}
}

301 
	$dpif_√tdev_de°roy
(
dpif
 *dpif)

303 
dp_√tdev
 *
dp
 = 
	`gë_dp_√tdev
(
dpif
);

304 
dp
->
de°royed
 = 
åue
;

306 
	}
}

309 
	$dpif_√tdev_gë_°©s
(c⁄° 
dpif
 *dpif, 
dpif_dp_°©s
 *
°©s
)

311 
dp_√tdev
 *
dp
 = 
	`gë_dp_√tdev
(
dpif
);

312 
°©s
->
n_Êows
 = 
	`hm≠_cou¡
(&
dp
->
Êow_èbÀ
);

313 
°©s
->
n_hô
 = 
dp
->n_hit;

314 
°©s
->
n_mis£d
 = 
dp
->n_missed;

315 
°©s
->
n_lo°
 = 
dp
->n_lost;

317 
	}
}

320 
	$do_add_p‹t
(
dp_√tdev
 *
dp
, c⁄° *
dev«me
, c⁄° *
ty≥
,

321 
uöt16_t
 
p‹t_no
)

323 
dp_√tdev_p‹t
 *
p‹t
;

324 
√tdev
 *netdev;

325 c⁄° *
›í_ty≥
;

326 
mtu
;

327 
îr‹
;

332 
›í_ty≥
 = (
	`°rcmp
(
ty≥
, "internal") ?Åype

333 : 
dp
->
˛ass
 !&
dpif_√tdev_˛ass
 ? "dummy"

335 
îr‹
 = 
	`√tdev_›í
(
dev«me
, 
›í_ty≥
, &
√tdev
);

336 i‡(
îr‹
) {

337  
îr‹
;

342 
îr‹
 = 
	`√tdev_li°í
(
√tdev
);

343 i‡(
îr‹
) {

344 
	`VLOG_ERR
("%s: cannotÑeceiveÖackets onÅhisÇetwork device (%s)",

345 
dev«me
, 
	`°ªº‹
(
î∫o
));

346 
	`√tdev_˛o£
(
√tdev
);

347  
îr‹
;

350 
îr‹
 = 
	`√tdev_tu∫_Êags_⁄
(
√tdev
, 
NETDEV_PROMISC
, 
Ál£
);

351 i‡(
îr‹
) {

352 
	`√tdev_˛o£
(
√tdev
);

353  
îr‹
;

356 
p‹t
 = 
	`xmÆloc
( *port);

357 
p‹t
->
p‹t_no
 =Öort_no;

358 
p‹t
->
√tdev
 =Çetdev;

359 
p‹t
->
ty≥
 = 
	`x°rdup
(type);

361 
îr‹
 = 
	`√tdev_gë_mtu
(
√tdev
, &
mtu
);

362 i‡(!
îr‹
) {

363 
max_mtu
 = 
mtu
;

366 
	`li°_push_back
(&
dp
->
p‹t_li°
, &
p‹t
->
node
);

367 
dp
->
p‹ts
[
p‹t_no
] = 
p‹t
;

368 
dp
->
£rül
++;

371 
	}
}

374 
	$choo£_p‹t
(
dpif
 *dpif, 
√tdev
 *netdev)

376 
dp_√tdev
 *
dp
 = 
	`gë_dp_√tdev
(
dpif
);

377 
p‹t_no
;

379 i‡(
dpif
->
dpif_˛ass
 !&
dpif_√tdev_˛ass
) {

383 c⁄° *
p
;

385 
p
 = 
	`√tdev_gë_«me
(
√tdev
); *p != '\0';Ö++) {

386 i‡(
	`isdigô
((Ë*
p
)) {

387 
p‹t_no
 = 
	`°πﬁ
(
p
, 
NULL
, 10);

388 i‡(
p‹t_no
 > 0 &&Ö‹t_nÿ< 
MAX_PORTS


389 && !
dp
->
p‹ts
[
p‹t_no
]) {

390  
p‹t_no
;

397 
p‹t_no
 = 0;Ö‹t_nÿ< 
MAX_PORTS
;Öort_no++) {

398 i‡(!
dp
->
p‹ts
[
p‹t_no
]) {

399  
p‹t_no
;

404 
	}
}

407 
	$dpif_√tdev_p‹t_add
(
dpif
 *dpif, 
√tdev
 *netdev,

408 
uöt16_t
 *
p‹t_n›
)

410 
dp_√tdev
 *
dp
 = 
	`gë_dp_√tdev
(
dpif
);

411 
p‹t_no
;

413 i‡(*
p‹t_n›
 !
UINT16_MAX
) {

414 i‡(*
p‹t_n›
 >
MAX_PORTS
) {

415  
EFBIG
;

416 } i‡(
dp
->
p‹ts
[*
p‹t_n›
]) {

417  
EBUSY
;

419 
p‹t_no
 = *
p‹t_n›
;

421 
p‹t_no
 = 
	`choo£_p‹t
(
dpif
, 
√tdev
);

423 i‡(
p‹t_no
 >= 0) {

424 *
p‹t_n›
 = 
p‹t_no
;

425  
	`do_add_p‹t
(
dp
, 
	`√tdev_gë_«me
(
√tdev
),

426 
	`√tdev_gë_ty≥
(
√tdev
), 
p‹t_no
);

428  
EFBIG
;

429 
	}
}

432 
	$dpif_√tdev_p‹t_dñ
(
dpif
 *dpif, 
uöt16_t
 
p‹t_no
)

434 
dp_√tdev
 *
dp
 = 
	`gë_dp_√tdev
(
dpif
);

435  
p‹t_no
 =
OVSP_LOCAL
 ? 
EINVAL
 : 
	`do_dñ_p‹t
(
dp
,Öort_no);

436 
	}
}

438 
boﬁ


439 
	$is_vÆid_p‹t_numbî
(
uöt16_t
 
p‹t_no
)

441  
p‹t_no
 < 
MAX_PORTS
;

442 
	}
}

445 
	$gë_p‹t_by_numbî
(
dp_√tdev
 *
dp
,

446 
uöt16_t
 
p‹t_no
, 
dp_√tdev_p‹t
 **
p‹ç
)

448 i‡(!
	`is_vÆid_p‹t_numbî
(
p‹t_no
)) {

449 *
p‹ç
 = 
NULL
;

450  
EINVAL
;

452 *
p‹ç
 = 
dp
->
p‹ts
[
p‹t_no
];

453  *
p‹ç
 ? 0 : 
ENOENT
;

455 
	}
}

458 
	$gë_p‹t_by_«me
(
dp_√tdev
 *
dp
,

459 c⁄° *
dev«me
, 
dp_√tdev_p‹t
 **
p‹ç
)

461 
dp_√tdev_p‹t
 *
p‹t
;

463 
	`LIST_FOR_EACH
 (
p‹t
, 
node
, &
dp
->
p‹t_li°
) {

464 i‡(!
	`°rcmp
(
	`√tdev_gë_«me
(
p‹t
->
√tdev
), 
dev«me
)) {

465 *
p‹ç
 = 
p‹t
;

469  
ENOENT
;

470 
	}
}

473 
	$do_dñ_p‹t
(
dp_√tdev
 *
dp
, 
uöt16_t
 
p‹t_no
)

475 
dp_√tdev_p‹t
 *
p‹t
;

476 *
«me
;

477 
îr‹
;

479 
îr‹
 = 
	`gë_p‹t_by_numbî
(
dp
, 
p‹t_no
, &
p‹t
);

480 i‡(
îr‹
) {

481  
îr‹
;

484 
	`li°_ªmove
(&
p‹t
->
node
);

485 
dp
->
p‹ts
[
p‹t
->
p‹t_no
] = 
NULL
;

486 
dp
->
£rül
++;

488 
«me
 = 
	`x°rdup
(
	`√tdev_gë_«me
(
p‹t
->
√tdev
));

489 
	`√tdev_˛o£
(
p‹t
->
√tdev
);

490 
	`‰ì
(
p‹t
->
ty≥
);

492 
	`‰ì
(
«me
);

493 
	`‰ì
(
p‹t
);

496 
	}
}

499 
	$™swî_p‹t_quîy
(c⁄° 
dp_√tdev_p‹t
 *
p‹t
,

500 
dpif_p‹t
 *dpif_port)

502 
dpif_p‹t
->
«me
 = 
	`x°rdup
(
	`√tdev_gë_«me
(
p‹t
->
√tdev
));

503 
dpif_p‹t
->
ty≥
 = 
	`x°rdup
(
p‹t
->type);

504 
dpif_p‹t
->
p‹t_no
 = 
p‹t
->port_no;

505 
	}
}

508 
	$dpif_√tdev_p‹t_quîy_by_numbî
(c⁄° 
dpif
 *dpif, 
uöt16_t
 
p‹t_no
,

509 
dpif_p‹t
 *dpif_port)

511 
dp_√tdev
 *
dp
 = 
	`gë_dp_√tdev
(
dpif
);

512 
dp_√tdev_p‹t
 *
p‹t
;

513 
îr‹
;

515 
îr‹
 = 
	`gë_p‹t_by_numbî
(
dp
, 
p‹t_no
, &
p‹t
);

516 i‡(!
îr‹
) {

517 
	`™swî_p‹t_quîy
(
p‹t
, 
dpif_p‹t
);

519  
îr‹
;

520 
	}
}

523 
	$dpif_√tdev_p‹t_quîy_by_«me
(c⁄° 
dpif
 *dpif, c⁄° *
dev«me
,

524 
dpif_p‹t
 *dpif_port)

526 
dp_√tdev
 *
dp
 = 
	`gë_dp_√tdev
(
dpif
);

527 
dp_√tdev_p‹t
 *
p‹t
;

528 
îr‹
;

530 
îr‹
 = 
	`gë_p‹t_by_«me
(
dp
, 
dev«me
, &
p‹t
);

531 i‡(!
îr‹
) {

532 
	`™swî_p‹t_quîy
(
p‹t
, 
dpif_p‹t
);

534  
îr‹
;

535 
	}
}

538 
	$dpif_√tdev_gë_max_p‹ts
(c⁄° 
dpif
 *dpi‡
OVS_UNUSED
)

540  
MAX_PORTS
;

541 
	}
}

544 
	$dp_√tdev_‰ì_Êow
(
dp_√tdev
 *
dp
, 
dp_√tdev_Êow
 *
Êow
)

546 
	`hm≠_ªmove
(&
dp
->
Êow_èbÀ
, &
Êow
->
node
);

547 
	`‰ì
(
Êow
->
a˘i⁄s
);

548 
	`‰ì
(
Êow
);

549 
	}
}

552 
	$dp_√tdev_Êow_Êush
(
dp_√tdev
 *
dp
)

554 
dp_√tdev_Êow
 *
Êow
, *
√xt
;

556 
	`HMAP_FOR_EACH_SAFE
 (
Êow
, 
√xt
, 
node
, &
dp
->
Êow_èbÀ
) {

557 
	`dp_√tdev_‰ì_Êow
(
dp
, 
Êow
);

559 
	}
}

562 
	$dpif_√tdev_Êow_Êush
(
dpif
 *dpif)

564 
dp_√tdev
 *
dp
 = 
	`gë_dp_√tdev
(
dpif
);

565 
	`dp_√tdev_Êow_Êush
(
dp
);

567 
	}
}

569 
	sdp_√tdev_p‹t_°©e
 {

570 
uöt32_t
 
	mp‹t_no
;

571 *
	m«me
;

575 
	$dpif_√tdev_p‹t_dump_°¨t
(c⁄° 
dpif
 *dpi‡
OVS_UNUSED
, **
°©ï
)

577 *
°©ï
 = 
	`xzÆloc
((
dp_√tdev_p‹t_°©e
));

579 
	}
}

582 
	$dpif_√tdev_p‹t_dump_√xt
(c⁄° 
dpif
 *dpif, *
°©e_
,

583 
dpif_p‹t
 *dpif_port)

585 
dp_√tdev_p‹t_°©e
 *
°©e
 = 
°©e_
;

586 
dp_√tdev
 *
dp
 = 
	`gë_dp_√tdev
(
dpif
);

587 
uöt32_t
 
p‹t_no
;

589 
p‹t_no
 = 
°©e
->p‹t_no;Ö‹t_nÿ< 
MAX_PORTS
;Öort_no++) {

590 
dp_√tdev_p‹t
 *
p‹t
 = 
dp
->
p‹ts
[
p‹t_no
];

591 i‡(
p‹t
) {

592 
	`‰ì
(
°©e
->
«me
);

593 
°©e
->
«me
 = 
	`x°rdup
(
	`√tdev_gë_«me
(
p‹t
->
√tdev
));

594 
dpif_p‹t
->
«me
 = 
°©e
->name;

595 
dpif_p‹t
->
ty≥
 = 
p‹t
->type;

596 
dpif_p‹t
->
p‹t_no
 = 
p‹t
->port_no;

597 
°©e
->
p‹t_no
 =Öort_no + 1;

601  
EOF
;

602 
	}
}

605 
	$dpif_√tdev_p‹t_dump_d⁄e
(c⁄° 
dpif
 *dpi‡
OVS_UNUSED
, *
°©e_
)

607 
dp_√tdev_p‹t_°©e
 *
°©e
 = 
°©e_
;

608 
	`‰ì
(
°©e
->
«me
);

609 
	`‰ì
(
°©e
);

611 
	}
}

614 
	$dpif_√tdev_p‹t_pﬁl
(c⁄° 
dpif
 *
dpif_
, **
dev«mï
 
OVS_UNUSED
)

616 
dpif_√tdev
 *
dpif
 = 
	`dpif_√tdev_ˇ°
(
dpif_
);

617 i‡(
dpif
->
dp_£rül
 !dpif->
dp
->
£rül
) {

618 
dpif
->
dp_£rül
 = dpif->
dp
->
£rül
;

619  
ENOBUFS
;

621  
EAGAIN
;

623 
	}
}

626 
	$dpif_√tdev_p‹t_pﬁl_waô
(c⁄° 
dpif
 *
dpif_
)

628 
dpif_√tdev
 *
dpif
 = 
	`dpif_√tdev_ˇ°
(
dpif_
);

629 i‡(
dpif
->
dp_£rül
 !dpif->
dp
->
£rül
) {

630 
	`pﬁl_immedüã_wake
();

632 
	}
}

634 
dp_√tdev_Êow
 *

635 
	$dp_√tdev_lookup_Êow
(c⁄° 
dp_√tdev
 *
dp
, c⁄° 
Êow
 *
key
)

637 
dp_√tdev_Êow
 *
Êow
;

639 
	`HMAP_FOR_EACH_WITH_HASH
 (
Êow
, 
node
, 
	`Êow_hash
(
key
, 0), &
dp
->
Êow_èbÀ
) {

640 i‡(
	`Êow_equÆ
(&
Êow
->
key
, key)) {

641  
Êow
;

644  
NULL
;

645 
	}
}

648 
	$gë_dpif_Êow_°©s
(
dp_√tdev_Êow
 *
Êow
, 
dpif_Êow_°©s
 *
°©s
)

650 
°©s
->
n_∑ckës
 = 
Êow
->
∑ckë_cou¡
;

651 
°©s
->
n_byãs
 = 
Êow
->
byã_cou¡
;

652 
°©s
->
u£d
 = 
Êow
->used;

653 
°©s
->
t˝_Êags
 = 
Êow
->tcp_flags;

654 
	}
}

657 
	$dpif_√tdev_Êow_‰om_∆©ås
(c⁄° 
∆©å
 *
key
, 
uöt32_t
 
key_Àn
,

658 
Êow
 *flow)

660 i‡(
	`odp_Êow_key_to_Êow
(
key
, 
key_Àn
, 
Êow
)) {

665 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 5);

667 i‡(!
	`VLOG_DROP_ERR
(&
æ
)) {

668 
ds
 
s
;

670 
	`ds_öô
(&
s
);

671 
	`odp_Êow_key_f‹m©
(
key
, 
key_Àn
, &
s
);

672 
	`VLOG_ERR
("öã∫ÆÉº‹Ö¨sög flow key %s", 
	`ds_c°r
(&
s
));

673 
	`ds_de°roy
(&
s
);

676  
EINVAL
;

679 i‡(
Êow
->
ö_p‹t
 < 
OFPP_MAX


680 ? 
Êow
->
ö_p‹t
 >
MAX_PORTS


681 : 
Êow
->
ö_p‹t
 !
OFPP_LOCAL
 && flow->ö_p‹à!
OFPP_NONE
) {

682  
EINVAL
;

686 
	}
}

689 
	$dpif_√tdev_Êow_gë
(c⁄° 
dpif
 *dpif,

690 c⁄° 
∆©å
 *
∆_key
, 
size_t
 
∆_key_Àn
,

691 
oÂbuf
 **
a˘i⁄•
, 
dpif_Êow_°©s
 *
°©s
)

693 
dp_√tdev
 *
dp
 = 
	`gë_dp_√tdev
(
dpif
);

694 
dp_√tdev_Êow
 *
Êow
;

695 
Êow
 
key
;

696 
îr‹
;

698 
îr‹
 = 
	`dpif_√tdev_Êow_‰om_∆©ås
(
∆_key
, 
∆_key_Àn
, &
key
);

699 i‡(
îr‹
) {

700  
îr‹
;

703 
Êow
 = 
	`dp_√tdev_lookup_Êow
(
dp
, &
key
);

704 i‡(!
Êow
) {

705  
ENOENT
;

708 i‡(
°©s
) {

709 
	`gë_dpif_Êow_°©s
(
Êow
, 
°©s
);

711 i‡(
a˘i⁄•
) {

712 *
a˘i⁄•
 = 
	`oÂbuf_˛⁄e_d©a
(
Êow
->
a˘i⁄s
, flow->
a˘i⁄s_Àn
);

715 
	}
}

718 
	$£t_Êow_a˘i⁄s
(
dp_√tdev_Êow
 *
Êow
,

719 c⁄° 
∆©å
 *
a˘i⁄s
, 
size_t
 
a˘i⁄s_Àn
)

721 
Êow
->
a˘i⁄s
 = 
	`xªÆloc
(Êow->a˘i⁄s, 
a˘i⁄s_Àn
);

722 
Êow
->
a˘i⁄s_Àn
 =áctions_len;

723 
	`mem˝y
(
Êow
->
a˘i⁄s
,á˘i⁄s, 
a˘i⁄s_Àn
);

725 
	}
}

728 
	$dp_√tdev_Êow_add
(
dp_√tdev
 *
dp
, c⁄° 
Êow
 *
key
,

729 c⁄° 
∆©å
 *
a˘i⁄s
, 
size_t
 
a˘i⁄s_Àn
)

731 
dp_√tdev_Êow
 *
Êow
;

732 
îr‹
;

734 
Êow
 = 
	`xzÆloc
( *flow);

735 
Êow
->
key
 = *key;

737 
îr‹
 = 
	`£t_Êow_a˘i⁄s
(
Êow
, 
a˘i⁄s
, 
a˘i⁄s_Àn
);

738 i‡(
îr‹
) {

739 
	`‰ì
(
Êow
);

740  
îr‹
;

743 
	`hm≠_ö£π
(&
dp
->
Êow_èbÀ
, &
Êow
->
node
, 
	`Êow_hash
(&Êow->
key
, 0));

745 
	}
}

748 
	$˛ór_°©s
(
dp_√tdev_Êow
 *
Êow
)

750 
Êow
->
u£d
 = 0;

751 
Êow
->
∑ckë_cou¡
 = 0;

752 
Êow
->
byã_cou¡
 = 0;

753 
Êow
->
t˝_Êags
 = 0;

754 
	}
}

757 
	$dpif_√tdev_Êow_put
(
dpif
 *dpif, c⁄° 
dpif_Êow_put
 *
put
)

759 
dp_√tdev
 *
dp
 = 
	`gë_dp_√tdev
(
dpif
);

760 
dp_√tdev_Êow
 *
Êow
;

761 
Êow
 
key
;

762 
îr‹
;

764 
îr‹
 = 
	`dpif_√tdev_Êow_‰om_∆©ås
(
put
->
key
,Öut->
key_Àn
, &key);

765 i‡(
îr‹
) {

766  
îr‹
;

769 
Êow
 = 
	`dp_√tdev_lookup_Êow
(
dp
, &
key
);

770 i‡(!
Êow
) {

771 i‡(
put
->
Êags
 & 
DPIF_FP_CREATE
) {

772 i‡(
	`hm≠_cou¡
(&
dp
->
Êow_èbÀ
Ë< 
MAX_FLOWS
) {

773 i‡(
put
->
°©s
) {

774 
	`mem£t
(
put
->
°©s
, 0,  *put->stats);

776  
	`dp_√tdev_Êow_add
(
dp
, &
key
, 
put
->
a˘i⁄s
,

777 
put
->
a˘i⁄s_Àn
);

779  
EFBIG
;

782  
ENOENT
;

785 i‡(
put
->
Êags
 & 
DPIF_FP_MODIFY
) {

786 
îr‹
 = 
	`£t_Êow_a˘i⁄s
(
Êow
, 
put
->
a˘i⁄s
,Öut->
a˘i⁄s_Àn
);

787 i‡(!
îr‹
) {

788 i‡(
put
->
°©s
) {

789 
	`gë_dpif_Êow_°©s
(
Êow
, 
put
->
°©s
);

791 i‡(
put
->
Êags
 & 
DPIF_FP_ZERO_STATS
) {

792 
	`˛ór_°©s
(
Êow
);

795  
îr‹
;

797  
EEXIST
;

800 
	}
}

803 
	$dpif_√tdev_Êow_dñ
(
dpif
 *dpif, c⁄° 
dpif_Êow_dñ
 *
dñ
)

805 
dp_√tdev
 *
dp
 = 
	`gë_dp_√tdev
(
dpif
);

806 
dp_√tdev_Êow
 *
Êow
;

807 
Êow
 
key
;

808 
îr‹
;

810 
îr‹
 = 
	`dpif_√tdev_Êow_‰om_∆©ås
(
dñ
->
key
, dñ->
key_Àn
, &key);

811 i‡(
îr‹
) {

812  
îr‹
;

815 
Êow
 = 
	`dp_√tdev_lookup_Êow
(
dp
, &
key
);

816 i‡(
Êow
) {

817 i‡(
dñ
->
°©s
) {

818 
	`gë_dpif_Êow_°©s
(
Êow
, 
dñ
->
°©s
);

820 
	`dp_√tdev_‰ì_Êow
(
dp
, 
Êow
);

823  
ENOENT
;

825 
	}
}

827 
	sdp_√tdev_Êow_°©e
 {

828 
uöt32_t
 
	mbuckë
;

829 
uöt32_t
 
	moff£t
;

830 
∆©å
 *
	ma˘i⁄s
;

831 
odputû_keybuf
 
	mkeybuf
;

832 
dpif_Êow_°©s
 
	m°©s
;

836 
	$dpif_√tdev_Êow_dump_°¨t
(c⁄° 
dpif
 *dpi‡
OVS_UNUSED
, **
°©ï
)

838 
dp_√tdev_Êow_°©e
 *
°©e
;

840 *
°©ï
 = 
°©e
 = 
	`xmÆloc
( *state);

841 
°©e
->
buckë
 = 0;

842 
°©e
->
off£t
 = 0;

843 
°©e
->
a˘i⁄s
 = 
NULL
;

845 
	}
}

848 
	$dpif_√tdev_Êow_dump_√xt
(c⁄° 
dpif
 *dpif, *
°©e_
,

849 c⁄° 
∆©å
 **
key
, 
size_t
 *
key_Àn
,

850 c⁄° 
∆©å
 **
a˘i⁄s
, 
size_t
 *
a˘i⁄s_Àn
,

851 c⁄° 
dpif_Êow_°©s
 **
°©s
)

853 
dp_√tdev_Êow_°©e
 *
°©e
 = 
°©e_
;

854 
dp_√tdev
 *
dp
 = 
	`gë_dp_√tdev
(
dpif
);

855 
dp_√tdev_Êow
 *
Êow
;

856 
hm≠_node
 *
node
;

858 
node
 = 
	`hm≠_©_posôi⁄
(&
dp
->
Êow_èbÀ
, &
°©e
->
buckë
, &°©e->
off£t
);

859 i‡(!
node
) {

860  
EOF
;

863 
Êow
 = 
	`CONTAINER_OF
(
node
, 
dp_√tdev_Êow
,Çode);

865 i‡(
key
) {

866 
oÂbuf
 
buf
;

868 
	`oÂbuf_u£_°ack
(&
buf
, &
°©e
->
keybuf
,  state->keybuf);

869 
	`odp_Êow_key_‰om_Êow
(&
buf
, &
Êow
->
key
);

871 *
key
 = 
buf
.
d©a
;

872 *
key_Àn
 = 
buf
.
size
;

875 i‡(
a˘i⁄s
) {

876 
	`‰ì
(
°©e
->
a˘i⁄s
);

877 
°©e
->
a˘i⁄s
 = 
	`xmemdup
(
Êow
->a˘i⁄s, flow->
a˘i⁄s_Àn
);

879 *
a˘i⁄s
 = 
°©e
->actions;

880 *
a˘i⁄s_Àn
 = 
Êow
->actions_len;

883 i‡(
°©s
) {

884 
	`gë_dpif_Êow_°©s
(
Êow
, &
°©e
->
°©s
);

885 *
°©s
 = &
°©e
->stats;

889 
	}
}

892 
	$dpif_√tdev_Êow_dump_d⁄e
(c⁄° 
dpif
 *dpi‡
OVS_UNUSED
, *
°©e_
)

894 
dp_√tdev_Êow_°©e
 *
°©e
 = 
°©e_
;

896 
	`‰ì
(
°©e
->
a˘i⁄s
);

897 
	`‰ì
(
°©e
);

899 
	}
}

902 
	$dpif_√tdev_execuã
(
dpif
 *dpif, c⁄° 
dpif_execuã
 *
execuã
)

904 
dp_√tdev
 *
dp
 = 
	`gë_dp_√tdev
(
dpif
);

905 
oÂbuf
 
c›y
;

906 
Êow
 
key
;

907 
îr‹
;

909 i‡(
execuã
->
∑ckë
->
size
 < 
ETH_HEADER_LEN
 ||

910 
execuã
->
∑ckë
->
size
 > 
UINT16_MAX
) {

911  
EINVAL
;

915 
	`oÂbuf_öô
(&
c›y
, 
DP_NETDEV_HEADROOM
 + 
execuã
->
∑ckë
->
size
);

916 
	`oÂbuf_ª£rve
(&
c›y
, 
DP_NETDEV_HEADROOM
);

917 
	`oÂbuf_put
(&
c›y
, 
execuã
->
∑ckë
->
d©a
,Éxecuã->∑ckë->
size
);

919 
	`Êow_exåa˘
(&
c›y
, 0, 0, 
NULL
, -1, &
key
);

920 
îr‹
 = 
	`dpif_√tdev_Êow_‰om_∆©ås
(
execuã
->
key
,Éxecuã->
key_Àn
,

921 &
key
);

922 i‡(!
îr‹
) {

923 
	`dp_√tdev_execuã_a˘i⁄s
(
dp
, &
c›y
, &
key
,

924 
execuã
->
a˘i⁄s
,Éxecuã->
a˘i⁄s_Àn
);

927 
	`oÂbuf_unöô
(&
c›y
);

928  
îr‹
;

929 
	}
}

932 
	$dpif_√tdev_ªcv_£t
(
dpif
 *dpi‡
OVS_UNUSED
, 
boﬁ
 
íabÀ
 OVS_UNUSED)

935 
	}
}

938 
	$dpif_√tdev_queue_to_¥i‹ôy
(c⁄° 
dpif
 *dpi‡
OVS_UNUSED
,

939 
uöt32_t
 
queue_id
, uöt32_à*
¥i‹ôy
)

941 *
¥i‹ôy
 = 
queue_id
;

943 
	}
}

945 
dp_√tdev_queue
 *

946 
	$föd_n⁄em±y_queue
(
dpif
 *dpif)

948 
dp_√tdev
 *
dp
 = 
	`gë_dp_√tdev
(
dpif
);

949 
i
;

951 
i
 = 0; i < 
N_QUEUES
; i++) {

952 
dp_√tdev_queue
 *
q
 = &
dp
->
queues
[
i
];

953 i‡(
q
->
hód
 !q->
èû
) {

954  
q
;

957  
NULL
;

958 
	}
}

961 
	$dpif_√tdev_ªcv
(
dpif
 *dpif, 
dpif_upˇŒ
 *
upˇŒ
,

962 
oÂbuf
 *
buf
)

964 
dp_√tdev_queue
 *
q
 = 
	`föd_n⁄em±y_queue
(
dpif
);

965 i‡(
q
) {

966 
dp_√tdev_upˇŒ
 *
u
 = &
q
->
upˇŒs
[q->
èû
++ & 
QUEUE_MASK
];

968 *
upˇŒ
 = 
u
->upcall;

969 
upˇŒ
->
∑ckë
 = 
buf
;

971 
	`oÂbuf_unöô
(
buf
);

972 *
buf
 = 
u
->buf;

976  
EAGAIN
;

978 
	}
}

981 
	$dpif_√tdev_ªcv_waô
(
dpif
 *dpif)

983 i‡(
	`föd_n⁄em±y_queue
(
dpif
)) {

984 
	`pﬁl_immedüã_wake
();

989 
	}
}

992 
	$dpif_√tdev_ªcv_purge
(
dpif
 *dpif)

994 
dpif_√tdev
 *dpif_√tdev = 
	`dpif_√tdev_ˇ°
(
dpif
);

995 
	`dp_√tdev_purge_queues
(
dpif_√tdev
->
dp
);

996 
	}
}

999 
	$dp_√tdev_Êow_u£d
(
dp_√tdev_Êow
 *
Êow
, c⁄° 
oÂbuf
 *
∑ckë
)

1001 
Êow
->
u£d
 = 
	`time_m£c
();

1002 
Êow
->
∑ckë_cou¡
++;

1003 
Êow
->
byã_cou¡
 +
∑ckë
->
size
;

1004 
Êow
->
t˝_Êags
 |
	`∑ckë_gë_t˝_Êags
(
∑ckë
, &Êow->
key
);

1005 
	}
}

1008 
	$dp_√tdev_p‹t_öput
(
dp_√tdev
 *
dp
, 
dp_√tdev_p‹t
 *
p‹t
,

1009 
oÂbuf
 *
∑ckë
)

1011 
dp_√tdev_Êow
 *
Êow
;

1012 
Êow
 
key
;

1014 i‡(
∑ckë
->
size
 < 
ETH_HEADER_LEN
) {

1017 
	`Êow_exåa˘
(
∑ckë
, 0, 0, 
NULL
, 
	`odp_p‹t_to_oÂ_p‹t
(
p‹t
->
p‹t_no
), &
key
);

1018 
Êow
 = 
	`dp_√tdev_lookup_Êow
(
dp
, &
key
);

1019 i‡(
Êow
) {

1020 
	`dp_√tdev_Êow_u£d
(
Êow
, 
∑ckë
);

1021 
	`dp_√tdev_execuã_a˘i⁄s
(
dp
, 
∑ckë
, &
key
,

1022 
Êow
->
a˘i⁄s
, flow->
a˘i⁄s_Àn
);

1023 
dp
->
n_hô
++;

1025 
dp
->
n_mis£d
++;

1026 
	`dp_√tdev_ouçut_u£r•a˚
(
dp
, 
∑ckë
, 
DPIF_UC_MISS
, &
key
, 0);

1028 
	}
}

1031 
	$dpif_√tdev_run
(
dpif
 *dpif)

1033 
dp_√tdev
 *
dp
 = 
	`gë_dp_√tdev
(
dpif
);

1034 
dp_√tdev_p‹t
 *
p‹t
;

1035 
oÂbuf
 
∑ckë
;

1037 
	`oÂbuf_öô
(&
∑ckë
, 
DP_NETDEV_HEADROOM
 + 
VLAN_ETH_HEADER_LEN
 + 
max_mtu
);

1039 
	`LIST_FOR_EACH
 (
p‹t
, 
node
, &
dp
->
p‹t_li°
) {

1040 
îr‹
;

1043 
	`oÂbuf_˛ór
(&
∑ckë
);

1044 
	`oÂbuf_ª£rve
(&
∑ckë
, 
DP_NETDEV_HEADROOM
);

1046 
îr‹
 = 
	`√tdev_ªcv
(
p‹t
->
√tdev
, &
∑ckë
);

1047 i‡(!
îr‹
) {

1048 
	`dp_√tdev_p‹t_öput
(
dp
, 
p‹t
, &
∑ckë
);

1049 } i‡(
îr‹
 !
EAGAIN
 &&Éº‹ !
EOPNOTSUPP
) {

1050 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 5);

1051 
	`VLOG_ERR_RL
(&
æ
, "errorÑeceiving data from %s: %s",

1052 
	`√tdev_gë_«me
(
p‹t
->
√tdev
), 
	`°ªº‹
(
îr‹
));

1055 
	`oÂbuf_unöô
(&
∑ckë
);

1056 
	}
}

1059 
	$dpif_√tdev_waô
(
dpif
 *dpif)

1061 
dp_√tdev
 *
dp
 = 
	`gë_dp_√tdev
(
dpif
);

1062 
dp_√tdev_p‹t
 *
p‹t
;

1064 
	`LIST_FOR_EACH
 (
p‹t
, 
node
, &
dp
->
p‹t_li°
) {

1065 
	`√tdev_ªcv_waô
(
p‹t
->
√tdev
);

1067 
	}
}

1070 
	$dp_√tdev_£t_dl
(
oÂbuf
 *
∑ckë
, c⁄° 
ovs_key_ëhî√t
 *
ëh_key
)

1072 
ëh_hódî
 *
eh
 = 
∑ckë
->
l2
;

1074 
	`mem˝y
(
eh
->
ëh_§c
, 
ëh_key
->eth_src, Éh->eth_src);

1075 
	`mem˝y
(
eh
->
ëh_d°
, 
ëh_key
->eth_dst, Éh->eth_dst);

1076 
	}
}

1079 
	$dp_√tdev_ouçut_p‹t
(
dp_√tdev
 *
dp
, 
oÂbuf
 *
∑ckë
,

1080 
uöt16_t
 
out_p‹t
)

1082 
dp_√tdev_p‹t
 *
p
 = 
dp
->
p‹ts
[
out_p‹t
];

1083 i‡(
p
) {

1084 
	`√tdev_£nd
(
p
->
√tdev
, 
∑ckë
);

1086 
	}
}

1089 
	$dp_√tdev_ouçut_u£r•a˚
(
dp_√tdev
 *
dp
, c⁄° 
oÂbuf
 *
∑ckë
,

1090 
queue_no
, c⁄° 
Êow
 *Êow, 
uöt64_t
 
¨g
)

1092 
dp_√tdev_queue
 *
q
 = &
dp
->
queues
[
queue_no
];

1093 
dp_√tdev_upˇŒ
 *
u
;

1094 
dpif_upˇŒ
 *
upˇŒ
;

1095 
oÂbuf
 *
buf
;

1096 
size_t
 
key_Àn
;

1098 i‡(
q
->
hód
 - q->
èû
 >
MAX_QUEUE_LEN
) {

1099 
dp
->
n_lo°
++;

1100  
ENOBUFS
;

1103 
u
 = &
q
->
upˇŒs
[q->
hód
++ & 
QUEUE_MASK
];

1105 
buf
 = &
u
->buf;

1106 
	`oÂbuf_öô
(
buf
, 
ODPUTIL_FLOW_KEY_BYTES
 + 2 + 
∑ckë
->
size
);

1107 
	`odp_Êow_key_‰om_Êow
(
buf
, 
Êow
);

1108 
key_Àn
 = 
buf
->
size
;

1109 
	`oÂbuf_puŒ
(
buf
, 
key_Àn
);

1110 
	`oÂbuf_ª£rve
(
buf
, 2);

1111 
	`oÂbuf_put
(
buf
, 
∑ckë
->
d©a
,Öackë->
size
);

1113 
upˇŒ
 = &
u
->upcall;

1114 
upˇŒ
->
ty≥
 = 
queue_no
;

1115 
upˇŒ
->
∑ckë
 = 
buf
;

1116 
upˇŒ
->
key
 = 
buf
->
ba£
;

1117 
upˇŒ
->
key_Àn
 = key_len;

1118 
upˇŒ
->
u£rd©a
 = 
¨g
;

1121 
	}
}

1124 
	$dp_√tdev_ßm∂e
(
dp_√tdev
 *
dp
,

1125 
oÂbuf
 *
∑ckë
, 
Êow
 *
key
,

1126 c⁄° 
∆©å
 *
a˘i⁄
)

1128 c⁄° 
∆©å
 *
suba˘i⁄s
 = 
NULL
;

1129 c⁄° 
∆©å
 *
a
;

1130 
size_t
 
À·
;

1132 
	`NL_NESTED_FOR_EACH_UNSAFE
 (
a
, 
À·
, 
a˘i⁄
) {

1133 
ty≥
 = 
	`∆_©å_ty≥
(
a
);

1135 (
ovs_ßm∂e_©å
Ë
ty≥
) {

1136 
OVS_SAMPLE_ATTR_PROBABILITY
:

1137 i‡(
	`øndom_uöt32
(Ë>
	`∆_©å_gë_u32
(
a
)) {

1142 
OVS_SAMPLE_ATTR_ACTIONS
:

1143 
suba˘i⁄s
 = 
a
;

1146 
OVS_SAMPLE_ATTR_UNSPEC
:

1147 
__OVS_SAMPLE_ATTR_MAX
:

1149 
	`NOT_REACHED
();

1153 
	`dp_√tdev_execuã_a˘i⁄s
(
dp
, 
∑ckë
, 
key
, 
	`∆_©å_gë
(
suba˘i⁄s
),

1154 
	`∆_©å_gë_size
(
suba˘i⁄s
));

1155 
	}
}

1158 
	$dp_√tdev_a˘i⁄_u£r•a˚
(
dp_√tdev
 *
dp
,

1159 
oÂbuf
 *
∑ckë
, 
Êow
 *
key
,

1160 c⁄° 
∆©å
 *
a
)

1162 c⁄° 
∆©å
 *
u£rd©a_©å
;

1163 
uöt64_t
 
u£rd©a
;

1165 
u£rd©a_©å
 = 
	`∆_©å_föd_√°ed
(
a
, 
OVS_USERSPACE_ATTR_USERDATA
);

1166 
u£rd©a
 = 
u£rd©a_©å
 ? 
	`∆_©å_gë_u64
(userdata_attr) : 0;

1167 
	`dp_√tdev_ouçut_u£r•a˚
(
dp
, 
∑ckë
, 
DPIF_UC_ACTION
, 
key
, 
u£rd©a
);

1168 
	}
}

1171 
	$execuã_£t_a˘i⁄
(
oÂbuf
 *
∑ckë
, c⁄° 
∆©å
 *
a
)

1173 
ovs_key_©å
 
ty≥
 = 
	`∆_©å_ty≥
(
a
);

1174 c⁄° 
ovs_key_ùv4
 *
ùv4_key
;

1175 c⁄° 
ovs_key_ùv6
 *
ùv6_key
;

1176 c⁄° 
ovs_key_t˝
 *
t˝_key
;

1177 c⁄° 
ovs_key_udp
 *
udp_key
;

1179 
ty≥
) {

1180 
OVS_KEY_ATTR_TUN_ID
:

1181 
OVS_KEY_ATTR_PRIORITY
:

1182 
OVS_KEY_ATTR_SKB_MARK
:

1183 
OVS_KEY_ATTR_TUNNEL
:

1187 
OVS_KEY_ATTR_ETHERNET
:

1188 
	`dp_√tdev_£t_dl
(
∑ckë
,

1189 
	`∆_©å_gë_un•ec
(
a
, (
ovs_key_ëhî√t
)));

1192 
OVS_KEY_ATTR_IPV4
:

1193 
ùv4_key
 = 
	`∆_©å_gë_un•ec
(
a
, (
ovs_key_ùv4
));

1194 
	`∑ckë_£t_ùv4
(
∑ckë
, 
ùv4_key
->
ùv4_§c
, ipv4_key->
ùv4_d°
,

1195 
ùv4_key
->
ùv4_tos
, ipv4_key->
ùv4_âl
);

1198 
OVS_KEY_ATTR_IPV6
:

1199 
ùv6_key
 = 
	`∆_©å_gë_un•ec
(
a
, (
ovs_key_ùv6
));

1200 
	`∑ckë_£t_ùv6
(
∑ckë
, 
ùv6_key
->
ùv6_¥Ÿo
, ipv6_key->
ùv6_§c
,

1201 
ùv6_key
->
ùv6_d°
, ipv6_key->
ùv6_t˛ass
,

1202 
ùv6_key
->
ùv6_œbñ
, ipv6_key->
ùv6_hlimô
);

1205 
OVS_KEY_ATTR_TCP
:

1206 
t˝_key
 = 
	`∆_©å_gë_un•ec
(
a
, (
ovs_key_t˝
));

1207 
	`∑ckë_£t_t˝_p‹t
(
∑ckë
, 
t˝_key
->
t˝_§c
,Å˝_key->
t˝_d°
);

1210 
OVS_KEY_ATTR_UDP
:

1211 
udp_key
 = 
	`∆_©å_gë_un•ec
(
a
, (
ovs_key_udp
));

1212 
	`∑ckë_£t_udp_p‹t
(
∑ckë
, 
udp_key
->
udp_§c
, udp_key->
udp_d°
);

1215 
OVS_KEY_ATTR_UNSPEC
:

1216 
OVS_KEY_ATTR_ENCAP
:

1217 
OVS_KEY_ATTR_ETHERTYPE
:

1218 
OVS_KEY_ATTR_IN_PORT
:

1219 
OVS_KEY_ATTR_VLAN
:

1220 
OVS_KEY_ATTR_ICMP
:

1221 
OVS_KEY_ATTR_ICMPV6
:

1222 
OVS_KEY_ATTR_ARP
:

1223 
OVS_KEY_ATTR_ND
:

1224 
__OVS_KEY_ATTR_MAX
:

1226 
	`NOT_REACHED
();

1228 
	}
}

1231 
	$dp_√tdev_execuã_a˘i⁄s
(
dp_√tdev
 *
dp
,

1232 
oÂbuf
 *
∑ckë
, 
Êow
 *
key
,

1233 c⁄° 
∆©å
 *
a˘i⁄s
,

1234 
size_t
 
a˘i⁄s_Àn
)

1236 c⁄° 
∆©å
 *
a
;

1237 
À·
;

1239 
	`NL_ATTR_FOR_EACH_UNSAFE
 (
a
, 
À·
, 
a˘i⁄s
, 
a˘i⁄s_Àn
) {

1240 c⁄° 
ovs_a˘i⁄_push_vœn
 *
vœn
;

1241 
ty≥
 = 
	`∆_©å_ty≥
(
a
);

1243 (
ovs_a˘i⁄_©å
Ë
ty≥
) {

1244 
OVS_ACTION_ATTR_OUTPUT
:

1245 
	`dp_√tdev_ouçut_p‹t
(
dp
, 
∑ckë
, 
	`∆_©å_gë_u32
(
a
));

1248 
OVS_ACTION_ATTR_USERSPACE
:

1249 
	`dp_√tdev_a˘i⁄_u£r•a˚
(
dp
, 
∑ckë
, 
key
, 
a
);

1252 
OVS_ACTION_ATTR_PUSH_VLAN
:

1253 
vœn
 = 
	`∆_©å_gë
(
a
);

1254 
	`ëh_push_vœn
(
∑ckë
, 
vœn
->
vœn_tci
);

1257 
OVS_ACTION_ATTR_POP_VLAN
:

1258 
	`ëh_p›_vœn
(
∑ckë
);

1261 
OVS_ACTION_ATTR_SET
:

1262 
	`execuã_£t_a˘i⁄
(
∑ckë
, 
	`∆_©å_gë
(
a
));

1265 
OVS_ACTION_ATTR_SAMPLE
:

1266 
	`dp_√tdev_ßm∂e
(
dp
, 
∑ckë
, 
key
, 
a
);

1269 
OVS_ACTION_ATTR_UNSPEC
:

1270 
__OVS_ACTION_ATTR_MAX
:

1271 
	`NOT_REACHED
();

1274 
	}
}

1276 c⁄° 
dpif_˛ass
 
	gdpif_√tdev_˛ass
 = {

1278 
dpif_√tdev_íumî©e
,

1279 
dpif_√tdev_›í
,

1280 
dpif_√tdev_˛o£
,

1281 
dpif_√tdev_de°roy
,

1282 
dpif_√tdev_run
,

1283 
dpif_√tdev_waô
,

1284 
dpif_√tdev_gë_°©s
,

1285 
dpif_√tdev_p‹t_add
,

1286 
dpif_√tdev_p‹t_dñ
,

1287 
dpif_√tdev_p‹t_quîy_by_numbî
,

1288 
dpif_√tdev_p‹t_quîy_by_«me
,

1289 
dpif_√tdev_gë_max_p‹ts
,

1290 
NULL
,

1291 
dpif_√tdev_p‹t_dump_°¨t
,

1292 
dpif_√tdev_p‹t_dump_√xt
,

1293 
dpif_√tdev_p‹t_dump_d⁄e
,

1294 
dpif_√tdev_p‹t_pﬁl
,

1295 
dpif_√tdev_p‹t_pﬁl_waô
,

1296 
dpif_√tdev_Êow_gë
,

1297 
dpif_√tdev_Êow_put
,

1298 
dpif_√tdev_Êow_dñ
,

1299 
dpif_√tdev_Êow_Êush
,

1300 
dpif_√tdev_Êow_dump_°¨t
,

1301 
dpif_√tdev_Êow_dump_√xt
,

1302 
dpif_√tdev_Êow_dump_d⁄e
,

1303 
dpif_√tdev_execuã
,

1304 
NULL
,

1305 
dpif_√tdev_ªcv_£t
,

1306 
dpif_√tdev_queue_to_¥i‹ôy
,

1307 
dpif_√tdev_ªcv
,

1308 
dpif_√tdev_ªcv_waô
,

1309 
dpif_√tdev_ªcv_purge
,

1313 
	$dpif_dummy_ªgi°î__
(c⁄° *
ty≥
)

1315 
dpif_˛ass
 *
˛ass
;

1317 
˛ass
 = 
	`xmÆloc
( *class);

1318 *
˛ass
 = 
dpif_√tdev_˛ass
;

1319 
˛ass
->
ty≥
 = 
	`x°rdup
(type);

1320 
	`dp_ªgi°î_¥ovidî
(
˛ass
);

1321 
	}
}

1324 
	$dpif_dummy_ªgi°î
(
boﬁ
 
ovîride
)

1326 i‡(
ovîride
) {

1327 
s£t
 
ty≥s
;

1328 c⁄° *
ty≥
;

1330 
	`s£t_öô
(&
ty≥s
);

1331 
	`dp_íumî©e_ty≥s
(&
ty≥s
);

1332 
	`SSET_FOR_EACH
 (
ty≥
, &
ty≥s
) {

1333 i‡(!
	`dp_uƒegi°î_¥ovidî
(
ty≥
)) {

1334 
	`dpif_dummy_ªgi°î__
(
ty≥
);

1337 
	`s£t_de°roy
(&
ty≥s
);

1340 
	`dpif_dummy_ªgi°î__
("dummy");

1341 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/dpif-provider.h

17 #i‚de‡
DPIF_PROVIDER_H


18 
	#DPIF_PROVIDER_H
 1

	)

25 
	~<as£π.h
>

26 
	~"›íÊow/›íÊow.h
"

27 
	~"dpif.h
"

28 
	~"utû.h
"

30 #ifde‡ 
__˝lu•lus


37 
	sdpif
 {

38 c⁄° 
dpif_˛ass
 *dpif_class;

39 *
ba£_«me
;

40 *
fuŒ_«me
;

41 
uöt8_t
 
√tÊow_ígöe_ty≥
;

42 
uöt8_t
 
√tÊow_ígöe_id
;

45 
dpif_öô
(
dpif
 *, c⁄° 
dpif_˛ass
 *, c⁄° *
«me
,

46 
uöt8_t
 
√tÊow_ígöe_ty≥
, uöt8_à
√tÊow_ígöe_id
);

47 
dpif_unöô
(
dpif
 *dpif, 
boﬁ
 
˛o£
);

49 
ölöe
 
dpif_as£π_˛ass
(c⁄° 
dpif
 *dpif,

50 c⁄° 
dpif_˛ass
 *dpif_class)

52 
as£π
(
dpif
->
dpif_˛ass
 == dpif_class);

65 
	sdpif_˛ass
 {

70 c⁄° *
ty≥
;

81 (*
íumî©e
)(
s£t
 *
Æl_dps
);

91 (*
›í
)(c⁄° 
dpif_˛ass
 *dpif_class,

92 c⁄° *
«me
, 
boﬁ
 
¸óã
, 
dpif
 **
dpiÂ
);

95 (*
˛o£
)(
dpif
 *dpif);

101 (*
de°roy
)(
dpif
 *dpif);

104 (*
run
)(
dpif
 *dpif);

108 (*
waô
)(
dpif
 *dpif);

111 (*
gë_°©s
)(c⁄° 
dpif
 *dpif, 
dpif_dp_°©s
 *
°©s
);

119 (*
p‹t_add
)(
dpif
 *dpif, 
√tdev
 *netdev,

120 
uöt16_t
 *
p‹t_no
);

123 (*
p‹t_dñ
)(
dpif
 *dpif, 
uöt16_t
 
p‹t_no
);

130 (*
p‹t_quîy_by_numbî
)(c⁄° 
dpif
 *dpif, 
uöt16_t
 
p‹t_no
,

131 
dpif_p‹t
 *
p‹t
);

132 (*
p‹t_quîy_by_«me
)(c⁄° 
dpif
 *dpif, c⁄° *
dev«me
,

133 
dpif_p‹t
 *
p‹t
);

137 (*
gë_max_p‹ts
)(c⁄° 
dpif
 *dpif);

153 
uöt32_t
 (*
p‹t_gë_pid
)(c⁄° 
dpif
 *dpif, 
uöt16_t
 
p‹t_no
);

158 (*
p‹t_dump_°¨t
)(c⁄° 
dpif
 *dpif, **
°©ï
);

171 (*
p‹t_dump_√xt
)(c⁄° 
dpif
 *dpif, *
°©e
,

172 
dpif_p‹t
 *
p‹t
);

176 (*
p‹t_dump_d⁄e
)(c⁄° 
dpif
 *dpif, *
°©e
);

196 (*
p‹t_pﬁl
)(c⁄° 
dpif
 *dpif, **
dev«mï
);

200 (*
p‹t_pﬁl_waô
)(c⁄° 
dpif
 *dpif);

216 (*
Êow_gë
)(c⁄° 
dpif
 *dpif,

217 c⁄° 
∆©å
 *
key
, 
size_t
 
key_Àn
,

218 
oÂbuf
 **
a˘i⁄•
, 
dpif_Êow_°©s
 *
°©s
);

242 (*
Êow_put
)(
dpif
 *dpif, c⁄° 
dpif_Êow_put
 *
put
);

251 (*
Êow_dñ
)(
dpif
 *dpif, c⁄° 
dpif_Êow_dñ
 *
dñ
);

255 (*
Êow_Êush
)(
dpif
 *dpif);

260 (*
Êow_dump_°¨t
)(c⁄° 
dpif
 *dpif, **
°©ï
);

281 (*
Êow_dump_√xt
)(c⁄° 
dpif
 *dpif, *
°©e
,

282 c⁄° 
∆©å
 **
key
, 
size_t
 *
key_Àn
,

283 c⁄° 
∆©å
 **
a˘i⁄s
, 
size_t
 *
a˘i⁄s_Àn
,

284 c⁄° 
dpif_Êow_°©s
 **
°©s
);

288 (*
Êow_dump_d⁄e
)(c⁄° 
dpif
 *dpif, *
°©e
);

296 (*
execuã
)(
dpif
 *dpif, c⁄° 
dpif_execuã
 *execute);

304 (*
›î©e
)(
dpif
 *dpif, 
dpif_›
 **
›s
, 
size_t
 
n_›s
);

310 (*
ªcv_£t
)(
dpif
 *dpif, 
boﬁ
 
íabÀ
);

314 (*
queue_to_¥i‹ôy
)(c⁄° 
dpif
 *dpif, 
uöt32_t
 
queue_id
,

315 
uöt32_t
 *
¥i‹ôy
);

329 (*
ªcv
)(
dpif
 *dpif, 
dpif_upˇŒ
 *
upˇŒ
,

330 
oÂbuf
 *
buf
);

334 (*
ªcv_waô
)(
dpif
 *dpif);

338 (*
ªcv_purge
)(
dpif
 *dpif);

341 c⁄° 
dpif_˛ass
 
dpif_löux_˛ass
;

342 c⁄° 
dpif_˛ass
 
dpif_√tdev_˛ass
;

344 #ifde‡ 
__˝lu•lus


	@/home/lsch/mytest/openvswitch-1.9.0/lib/dpif.c

17 
	~<c⁄fig.h
>

18 
	~"dpif-¥ovidî.h
"

20 
	~<as£π.h
>

21 
	~<˘y≥.h
>

22 
	~<î∫o.h
>

23 
	~<öây≥s.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

27 
	~"covîage.h
"

28 
	~"dy«mic-°rög.h
"

29 
	~"Êow.h
"

30 
	~"√tdev.h
"

31 
	~"√éök.h
"

32 
	~"odp-utû.h
"

33 
	~"oÂ-îr‹s.h
"

34 
	~"oÂ-¥öt.h
"

35 
	~"oÂ-utû.h
"

36 
	~"oÂbuf.h
"

37 
	~"∑ckës.h
"

38 
	~"pﬁl-lo›.h
"

39 
	~"shash.h
"

40 
	~"s£t.h
"

41 
	~"timevÆ.h
"

42 
	~"utû.h
"

43 
	~"vÆgröd.h
"

44 
	~"vlog.h
"

46 
VLOG_DEFINE_THIS_MODULE
(
dpif
);

48 
COVERAGE_DEFINE
(
dpif_de°roy
);

49 
COVERAGE_DEFINE
(
dpif_p‹t_add
);

50 
COVERAGE_DEFINE
(
dpif_p‹t_dñ
);

51 
COVERAGE_DEFINE
(
dpif_Êow_Êush
);

52 
COVERAGE_DEFINE
(
dpif_Êow_gë
);

53 
COVERAGE_DEFINE
(
dpif_Êow_put
);

54 
COVERAGE_DEFINE
(
dpif_Êow_dñ
);

55 
COVERAGE_DEFINE
(
dpif_Êow_quîy_li°
);

56 
COVERAGE_DEFINE
(
dpif_Êow_quîy_li°_n
);

57 
COVERAGE_DEFINE
(
dpif_execuã
);

58 
COVERAGE_DEFINE
(
dpif_purge
);

60 c⁄° 
dpif_˛ass
 *
	gba£_dpif_˛as£s
[] = {

61 #ifde‡
LINUX_DATAPATH


62 &
dpif_löux_˛ass
,

64 &
dpif_√tdev_˛ass
,

67 
	sªgi°îed_dpif_˛ass
 {

68 c⁄° 
dpif_˛ass
 *
	mdpif_˛ass
;

69 
	mªfcou¡
;

71 
shash
 
	gdpif_˛as£s
 = 
SHASH_INITIALIZER
(&
dpif_˛as£s
);

72 
s£t
 
	gdpif_bœckli°
 = 
SSET_INITIALIZER
(&
dpif_bœckli°
);

77 
vlog_øã_limô
 
	gdpmsg_æ
 = 
VLOG_RATE_LIMIT_INIT
(600, 600);

80 
vlog_øã_limô
 
	gîr‹_æ
 = 
VLOG_RATE_LIMIT_INIT
(60, 5);

82 
log_Êow_mesßge
(c⁄° 
dpif
 *dpif, 
îr‹
,

83 c⁄° *
›î©i⁄
,

84 c⁄° 
∆©å
 *
key
, 
size_t
 
key_Àn
,

85 c⁄° 
dpif_Êow_°©s
 *
°©s
,

86 c⁄° 
∆©å
 *
a˘i⁄s
, 
size_t
 
a˘i⁄s_Àn
);

87 
log_›î©i⁄
(c⁄° 
dpif
 *, c⁄° *
›î©i⁄
,

88 
îr‹
);

89 
boﬁ
 
should_log_Êow_mesßge
(
îr‹
);

90 
log_Êow_put_mesßge
(
dpif
 *, c⁄° 
dpif_Êow_put
 *,

91 
îr‹
);

92 
log_Êow_dñ_mesßge
(
dpif
 *, c⁄° 
dpif_Êow_dñ
 *,

93 
îr‹
);

94 
log_execuã_mesßge
(
dpif
 *, c⁄° 
dpif_execuã
 *,

95 
îr‹
);

98 
	$dp_öôülize
()

100 
°©us
 = -1;

102 i‡(
°©us
 < 0) {

103 
i
;

105 
°©us
 = 0;

106 
i
 = 0; i < 
	`ARRAY_SIZE
(
ba£_dpif_˛as£s
); i++) {

107 
	`dp_ªgi°î_¥ovidî
(
ba£_dpif_˛as£s
[
i
]);

110 
	}
}

115 
	$dp_ªgi°î_¥ovidî
(c⁄° 
dpif_˛ass
 *
√w_˛ass
)

117 
ªgi°îed_dpif_˛ass
 *
ªgi°îed_˛ass
;

119 i‡(
	`s£t_c⁄èös
(&
dpif_bœckli°
, 
√w_˛ass
->
ty≥
)) {

120 
	`VLOG_DBG
("attemptedÅoÑegister blacklistedÖrovider: %s",

121 
√w_˛ass
->
ty≥
);

122  
EINVAL
;

125 i‡(
	`shash_föd
(&
dpif_˛as£s
, 
√w_˛ass
->
ty≥
)) {

126 
	`VLOG_WARN
("attemptedÅoÑegister duplicate datapathÖrovider: %s",

127 
√w_˛ass
->
ty≥
);

128  
EEXIST
;

131 
ªgi°îed_˛ass
 = 
	`xmÆloc
( *registered_class);

132 
ªgi°îed_˛ass
->
dpif_˛ass
 = 
√w_˛ass
;

133 
ªgi°îed_˛ass
->
ªfcou¡
 = 0;

135 
	`shash_add
(&
dpif_˛as£s
, 
√w_˛ass
->
ty≥
, 
ªgi°îed_˛ass
);

138 
	}
}

144 
	$dp_uƒegi°î_¥ovidî
(c⁄° *
ty≥
)

146 
shash_node
 *
node
;

147 
ªgi°îed_dpif_˛ass
 *
ªgi°îed_˛ass
;

149 
node
 = 
	`shash_föd
(&
dpif_˛as£s
, 
ty≥
);

150 i‡(!
node
) {

151 
	`VLOG_WARN
("attemptedÅo unregisterá datapathÖroviderÅhat isÇot "

152 "ªgi°îed: %s", 
ty≥
);

153  
EAFNOSUPPORT
;

156 
ªgi°îed_˛ass
 = 
node
->
d©a
;

157 i‡(
ªgi°îed_˛ass
->
ªfcou¡
) {

158 
	`VLOG_WARN
("©ãm±edÅÿuƒegi°î i¿u£ d©≠©hÖrovidî: %s", 
ty≥
);

159  
EBUSY
;

162 
	`shash_dñëe
(&
dpif_˛as£s
, 
node
);

163 
	`‰ì
(
ªgi°îed_˛ass
);

166 
	}
}

171 
	$dp_bœckli°_¥ovidî
(c⁄° *
ty≥
)

173 
	`s£t_add
(&
dpif_bœckli°
, 
ty≥
);

174 
	}
}

179 
	$dp_íumî©e_ty≥s
(
s£t
 *
ty≥s
)

181 
shash_node
 *
node
;

183 
	`dp_öôülize
();

184 
	`s£t_˛ór
(
ty≥s
);

186 
	`SHASH_FOR_EACH
(
node
, &
dpif_˛as£s
) {

187 c⁄° 
ªgi°îed_dpif_˛ass
 *
ªgi°îed_˛ass
 = 
node
->
d©a
;

188 
	`s£t_add
(
ty≥s
, 
ªgi°îed_˛ass
->
dpif_˛ass
->
ty≥
);

190 
	}
}

199 
	$dp_íumî©e_«mes
(c⁄° *
ty≥
, 
s£t
 *
«mes
)

201 c⁄° 
ªgi°îed_dpif_˛ass
 *
ªgi°îed_˛ass
;

202 c⁄° 
dpif_˛ass
 *dpif_class;

203 
îr‹
;

205 
	`dp_öôülize
();

206 
	`s£t_˛ór
(
«mes
);

208 
ªgi°îed_˛ass
 = 
	`shash_föd_d©a
(&
dpif_˛as£s
, 
ty≥
);

209 i‡(!
ªgi°îed_˛ass
) {

210 
	`VLOG_WARN
("couldÇŸÉnumî©êunknow¿ty≥: %s", 
ty≥
);

211  
EAFNOSUPPORT
;

214 
dpif_˛ass
 = 
ªgi°îed_˛ass
->dpif_class;

215 
îr‹
 = 
dpif_˛ass
->
íumî©e
 ? dpif_˛ass->
	`íumî©e
(
«mes
) : 0;

217 i‡(
îr‹
) {

218 
	`VLOG_WARN
("ÁûedÅÿíumî©ê%†d©≠©hs: %s", 
dpif_˛ass
->
ty≥
,

219 
	`°ªº‹
(
îr‹
));

222  
îr‹
;

223 
	}
}

230 
	$dp_∑r£_«me
(c⁄° *
d©≠©h_«me_
, **
«me
, **
ty≥
)

232 *
d©≠©h_«me
 = 
	`x°rdup
(
d©≠©h_«me_
);

233 *
£∑øt‹
;

235 
£∑øt‹
 = 
	`°rchr
(
d©≠©h_«me
, '@');

236 i‡(
£∑øt‹
) {

237 *
£∑øt‹
 = '\0';

238 *
ty≥
 = 
d©≠©h_«me
;

239 *
«me
 = 
	`x°rdup
(
	`dpif_n‹mÆize_ty≥
(
£∑øt‹
 + 1));

241 *
«me
 = 
d©≠©h_«me
;

242 *
ty≥
 = 
	`x°rdup
(
	`dpif_n‹mÆize_ty≥
(
NULL
));

244 
	}
}

247 
	$do_›í
(c⁄° *
«me
, c⁄° *
ty≥
, 
boﬁ
 
¸óã
, 
dpif
 **
dpiÂ
)

249 
dpif
 *dpi‡
NULL
;

250 
îr‹
;

251 
ªgi°îed_dpif_˛ass
 *
ªgi°îed_˛ass
;

253 
	`dp_öôülize
();

255 
ty≥
 = 
	`dpif_n‹mÆize_ty≥
(type);

257 
ªgi°îed_˛ass
 = 
	`shash_föd_d©a
(&
dpif_˛as£s
, 
ty≥
);

258 i‡(!
ªgi°îed_˛ass
) {

259 
	`VLOG_WARN
("couldÇŸ cª©êd©≠©h %†o‡unknow¿ty≥ %s", 
«me
,

260 
ty≥
);

261 
îr‹
 = 
EAFNOSUPPORT
;

262 
exô
;

265 
îr‹
 = 
ªgi°îed_˛ass
->
dpif_˛ass
->
	`›í
(registered_class->dpif_class,

266 
«me
, 
¸óã
, &
dpif
);

267 i‡(!
îr‹
) {

268 
	`as£π
(
dpif
->
dpif_˛ass
 =
ªgi°îed_˛ass
->dpif_class);

269 
ªgi°îed_˛ass
->
ªfcou¡
++;

272 
exô
:

273 *
dpiÂ
 = 
îr‹
 ? 
NULL
 : 
dpif
;

274  
îr‹
;

275 
	}
}

283 
	$dpif_›í
(c⁄° *
«me
, c⁄° *
ty≥
, 
dpif
 **
dpiÂ
)

285  
	`do_›í
(
«me
, 
ty≥
, 
Ál£
, 
dpiÂ
);

286 
	}
}

294 
	$dpif_¸óã
(c⁄° *
«me
, c⁄° *
ty≥
, 
dpif
 **
dpiÂ
)

296  
	`do_›í
(
«me
, 
ty≥
, 
åue
, 
dpiÂ
);

297 
	}
}

305 
	$dpif_¸óã_™d_›í
(c⁄° *
«me
, c⁄° *
ty≥
, 
dpif
 **
dpiÂ
)

307 
îr‹
;

309 
îr‹
 = 
	`dpif_¸óã
(
«me
, 
ty≥
, 
dpiÂ
);

310 i‡(
îr‹
 =
EEXIST
 ||Éº‹ =
EBUSY
) {

311 
îr‹
 = 
	`dpif_›í
(
«me
, 
ty≥
, 
dpiÂ
);

312 i‡(
îr‹
) {

313 
	`VLOG_WARN
("datapath %sálreadyÉxists but cannot be opened: %s",

314 
«me
, 
	`°ªº‹
(
îr‹
));

316 } i‡(
îr‹
) {

317 
	`VLOG_WARN
("ÁûedÅÿ¸óã d©≠©h %s: %s", 
«me
, 
	`°ªº‹
(
îr‹
));

319  
îr‹
;

320 
	}
}

325 
	$dpif_˛o£
(
dpif
 *dpif)

327 i‡(
dpif
) {

328 
ªgi°îed_dpif_˛ass
 *
ªgi°îed_˛ass
;

330 
ªgi°îed_˛ass
 = 
	`shash_föd_d©a
(&
dpif_˛as£s
,

331 
dpif
->
dpif_˛ass
->
ty≥
);

332 
	`as£π
(
ªgi°îed_˛ass
);

333 
	`as£π
(
ªgi°îed_˛ass
->
ªfcou¡
);

335 
ªgi°îed_˛ass
->
ªfcou¡
--;

336 
	`dpif_unöô
(
dpif
, 
åue
);

338 
	}
}

342 
	$dpif_run
(
dpif
 *dpif)

344 i‡(
dpif
->
dpif_˛ass
->
run
) {

345 
dpif
->
dpif_˛ass
->
	`run
(dpif);

347 
	}
}

352 
	$dpif_waô
(
dpif
 *dpif)

354 i‡(
dpif
->
dpif_˛ass
->
waô
) {

355 
dpif
->
dpif_˛ass
->
	`waô
(dpif);

357 
	}
}

362 
	$dpif_«me
(c⁄° 
dpif
 *dpif)

364  
dpif
->
fuŒ_«me
;

365 
	}
}

370 
	$dpif_ba£_«me
(c⁄° 
dpif
 *dpif)

372  
dpif
->
ba£_«me
;

373 
	}
}

380 
	$dpif_n‹mÆize_ty≥
(c⁄° *
ty≥
)

382  
ty≥
 &&Åype[0] ?Åype : "system";

383 
	}
}

389 
	$dpif_dñëe
(
dpif
 *dpif)

391 
îr‹
;

393 
	`COVERAGE_INC
(
dpif_de°roy
);

395 
îr‹
 = 
dpif
->
dpif_˛ass
->
	`de°roy
(dpif);

396 
	`log_›î©i⁄
(
dpif
, "dñëe", 
îr‹
);

397  
îr‹
;

398 
	}
}

403 
	$dpif_gë_dp_°©s
(c⁄° 
dpif
 *dpif, 
dpif_dp_°©s
 *
°©s
)

405 
îr‹
 = 
dpif
->
dpif_˛ass
->
	`gë_°©s
(dpif, 
°©s
);

406 i‡(
îr‹
) {

407 
	`mem£t
(
°©s
, 0,  *stats);

409 
	`log_›î©i⁄
(
dpif
, "gë_°©s", 
îr‹
);

410  
îr‹
;

411 
	}
}

422 
	$dpif_p‹t_add
(
dpif
 *dpif, 
√tdev
 *√tdev, 
uöt16_t
 *
p‹t_n›
)

424 c⁄° *
√tdev_«me
 = 
	`√tdev_gë_«me
(
√tdev
);

425 
uöt16_t
 
p‹t_no
 = 
UINT16_MAX
;

426 
îr‹
;

428 
	`COVERAGE_INC
(
dpif_p‹t_add
);

430 i‡(
p‹t_n›
) {

431 
p‹t_no
 = *
p‹t_n›
;

434 
îr‹
 = 
dpif
->
dpif_˛ass
->
	`p‹t_add
(dpif, 
√tdev
, &
p‹t_no
);

435 i‡(!
îr‹
) {

436 
	`VLOG_DBG_RL
(&
dpmsg_æ
, "%s:ádded %†a†p‹à%"
PRIu16
,

437 
	`dpif_«me
(
dpif
), 
√tdev_«me
, 
p‹t_no
);

439 
	`VLOG_WARN_RL
(&
îr‹_æ
, "%s: failedÅoádd %sásÖort: %s",

440 
	`dpif_«me
(
dpif
), 
√tdev_«me
, 
	`°ªº‹
(
îr‹
));

441 
p‹t_no
 = 
UINT16_MAX
;

443 i‡(
p‹t_n›
) {

444 *
p‹t_n›
 = 
p‹t_no
;

446  
îr‹
;

447 
	}
}

452 
	$dpif_p‹t_dñ
(
dpif
 *dpif, 
uöt16_t
 
p‹t_no
)

454 
îr‹
;

456 
	`COVERAGE_INC
(
dpif_p‹t_dñ
);

458 
îr‹
 = 
dpif
->
dpif_˛ass
->
	`p‹t_dñ
(dpif, 
p‹t_no
);

459 i‡(!
îr‹
) {

460 
	`VLOG_DBG_RL
(&
dpmsg_æ
, "%s:Ö‹t_dñ(%"
PRIu16
")",

461 
	`dpif_«me
(
dpif
), 
p‹t_no
);

463 
	`log_›î©i⁄
(
dpif
, "p‹t_dñ", 
îr‹
);

465  
îr‹
;

466 
	}
}

470 
	$dpif_p‹t_˛⁄e
(
dpif_p‹t
 *
d°
, c⁄° dpif_p‹à*
§c
)

472 
d°
->
«me
 = 
	`x°rdup
(
§c
->name);

473 
d°
->
ty≥
 = 
	`x°rdup
(
§c
->type);

474 
d°
->
p‹t_no
 = 
§c
->port_no;

475 
	}
}

483 
	$dpif_p‹t_de°roy
(
dpif_p‹t
 *dpif_port)

485 
	`‰ì
(
dpif_p‹t
->
«me
);

486 
	`‰ì
(
dpif_p‹t
->
ty≥
);

487 
	}
}

496 
	$dpif_p‹t_quîy_by_numbî
(c⁄° 
dpif
 *dpif, 
uöt16_t
 
p‹t_no
,

497 
dpif_p‹t
 *
p‹t
)

499 
îr‹
 = 
dpif
->
dpif_˛ass
->
	`p‹t_quîy_by_numbî
(dpif, 
p‹t_no
, 
p‹t
);

500 i‡(!
îr‹
) {

501 
	`VLOG_DBG_RL
(&
dpmsg_æ
, "%s:Ö‹à%"
PRIu16
" is device %s",

502 
	`dpif_«me
(
dpif
), 
p‹t_no
, 
p‹t
->
«me
);

504 
	`mem£t
(
p‹t
, 0,  *port);

505 
	`VLOG_WARN_RL
(&
îr‹_æ
, "%s: faûedÅÿquîyÖ‹à%"
PRIu16
": %s",

506 
	`dpif_«me
(
dpif
), 
p‹t_no
, 
	`°ªº‹
(
îr‹
));

508  
îr‹
;

509 
	}
}

518 
	$dpif_p‹t_quîy_by_«me
(c⁄° 
dpif
 *dpif, c⁄° *
dev«me
,

519 
dpif_p‹t
 *
p‹t
)

521 
îr‹
 = 
dpif
->
dpif_˛ass
->
	`p‹t_quîy_by_«me
(dpif, 
dev«me
, 
p‹t
);

522 i‡(!
îr‹
) {

523 
	`VLOG_DBG_RL
(&
dpmsg_æ
, "%s: devi˚ %†i†⁄Ö‹à%"
PRIu16
,

524 
	`dpif_«me
(
dpif
), 
dev«me
, 
p‹t
->
p‹t_no
);

526 
	`mem£t
(
p‹t
, 0,  *port);

532 
	`VLOG_RL
(&
îr‹_æ
,

533 
îr‹
 =
ENOENT
 ||Éº‹ =
ENODEV
 ? 
VLL_DBG
 : 
VLL_WARN
,

535 
	`dpif_«me
(
dpif
), 
dev«me
, 
	`°ªº‹
(
îr‹
));

537  
îr‹
;

538 
	}
}

543 
	$dpif_gë_max_p‹ts
(c⁄° 
dpif
 *dpif)

545  
dpif
->
dpif_˛ass
->
	`gë_max_p‹ts
(dpif);

546 
	}
}

560 
uöt32_t


561 
	$dpif_p‹t_gë_pid
(c⁄° 
dpif
 *dpif, 
uöt16_t
 
p‹t_no
)

563  (
dpif
->
dpif_˛ass
->
p‹t_gë_pid


564 ? (
dpif
->
dpif_˛ass
->
p‹t_gë_pid
)(dpif, 
p‹t_no
)

566 
	}
}

573 
	$dpif_p‹t_gë_«me
(
dpif
 *dpif, 
uöt16_t
 
p‹t_no
,

574 *
«me
, 
size_t
 
«me_size
)

576 
dpif_p‹t
 
p‹t
;

577 
îr‹
;

579 
	`as£π
(
«me_size
 > 0);

581 
îr‹
 = 
	`dpif_p‹t_quîy_by_numbî
(
dpif
, 
p‹t_no
, &
p‹t
);

582 i‡(!
îr‹
) {

583 
	`ovs_°æ˝y
(
«me
, 
p‹t
.«me, 
«me_size
);

584 
	`dpif_p‹t_de°roy
(&
p‹t
);

586 *
«me
 = '\0';

588  
îr‹
;

589 
	}
}

598 
	$dpif_p‹t_dump_°¨t
(
dpif_p‹t_dump
 *
dump
, c⁄° 
dpif
 *dpif)

600 
dump
->
dpif
 = dpif;

601 
dump
->
îr‹
 = 
dpif
->
dpif_˛ass
->
	`p‹t_dump_°¨t
(dpif, &dump->
°©e
);

602 
	`log_›î©i⁄
(
dpif
, "p‹t_dump_°¨t", 
dump
->
îr‹
);

603 
	}
}

616 
boﬁ


617 
	$dpif_p‹t_dump_√xt
(
dpif_p‹t_dump
 *
dump
, 
dpif_p‹t
 *
p‹t
)

619 c⁄° 
dpif
 *dpi‡
dump
->dpif;

621 i‡(
dump
->
îr‹
) {

622  
Ál£
;

625 
dump
->
îr‹
 = 
dpif
->
dpif_˛ass
->
	`p‹t_dump_√xt
(dpif, dump->
°©e
, 
p‹t
);

626 i‡(
dump
->
îr‹
 =
EOF
) {

627 
	`VLOG_DBG_RL
(&
dpmsg_æ
, "%s: dum≥dáŒÖ‹ts", 
	`dpif_«me
(
dpif
));

629 
	`log_›î©i⁄
(
dpif
, "p‹t_dump_√xt", 
dump
->
îr‹
);

632 i‡(
dump
->
îr‹
) {

633 
dpif
->
dpif_˛ass
->
	`p‹t_dump_d⁄e
(dpif, 
dump
->
°©e
);

634  
Ál£
;

636  
åue
;

637 
	}
}

643 
	$dpif_p‹t_dump_d⁄e
(
dpif_p‹t_dump
 *
dump
)

645 c⁄° 
dpif
 *dpi‡
dump
->dpif;

646 i‡(!
dump
->
îr‹
) {

647 
dump
->
îr‹
 = 
dpif
->
dpif_˛ass
->
	`p‹t_dump_d⁄e
(dpif, dump->
°©e
);

648 
	`log_›î©i⁄
(
dpif
, "p‹t_dump_d⁄e", 
dump
->
îr‹
);

650  
dump
->
îr‹
 =
EOF
 ? 0 : dump->error;

651 
	}
}

670 
	$dpif_p‹t_pﬁl
(c⁄° 
dpif
 *dpif, **
dev«mï
)

672 
îr‹
 = 
dpif
->
dpif_˛ass
->
	`p‹t_pﬁl
(dpif, 
dev«mï
);

673 i‡(
îr‹
) {

674 *
dev«mï
 = 
NULL
;

676  
îr‹
;

677 
	}
}

682 
	$dpif_p‹t_pﬁl_waô
(c⁄° 
dpif
 *dpif)

684 
dpif
->
dpif_˛ass
->
	`p‹t_pﬁl_waô
(dpif);

685 
	}
}

691 
	$dpif_Êow_°©s_exåa˘
(c⁄° 
Êow
 *Êow, c⁄° 
oÂbuf
 *
∑ckë
,

692 
u£d
, 
dpif_Êow_°©s
 *
°©s
)

694 
°©s
->
t˝_Êags
 = 
	`∑ckë_gë_t˝_Êags
(
∑ckë
, 
Êow
);

695 
°©s
->
n_byãs
 = 
∑ckë
->
size
;

696 
°©s
->
n_∑ckës
 = 1;

697 
°©s
->
u£d
 = used;

698 
	}
}

702 
	$dpif_Êow_°©s_f‹m©
(c⁄° 
dpif_Êow_°©s
 *
°©s
, 
ds
 *
s
)

704 
	`ds_put_f‹m©
(
s
, "∑ckës:%"
PRIu64
", bytes:%"PRIu64", used:",

705 
°©s
->
n_∑ckës
, sèts->
n_byãs
);

706 i‡(
°©s
->
u£d
) {

707 
	`ds_put_f‹m©
(
s
, "%.3fs", (
	`time_m£c
(Ë- 
°©s
->
u£d
) / 1000.0);

709 
	`ds_put_f‹m©
(
s
, "never");

711 i‡(
°©s
->
t˝_Êags
) {

712 
	`ds_put_c°r
(
s
, ", flags:");

713 
	`∑ckë_f‹m©_t˝_Êags
(
s
, 
°©s
->
t˝_Êags
);

715 
	}
}

720 
	$dpif_Êow_Êush
(
dpif
 *dpif)

722 
îr‹
;

724 
	`COVERAGE_INC
(
dpif_Êow_Êush
);

726 
îr‹
 = 
dpif
->
dpif_˛ass
->
	`Êow_Êush
(dpif);

727 
	`log_›î©i⁄
(
dpif
, "Êow_Êush", 
îr‹
);

728  
îr‹
;

729 
	}
}

746 
	$dpif_Êow_gë
(c⁄° 
dpif
 *dpif,

747 c⁄° 
∆©å
 *
key
, 
size_t
 
key_Àn
,

748 
oÂbuf
 **
a˘i⁄•
, 
dpif_Êow_°©s
 *
°©s
)

750 
îr‹
;

752 
	`COVERAGE_INC
(
dpif_Êow_gë
);

754 
îr‹
 = 
dpif
->
dpif_˛ass
->
	`Êow_gë
(dpif, 
key
, 
key_Àn
, 
a˘i⁄•
, 
°©s
);

755 i‡(
îr‹
) {

756 i‡(
a˘i⁄•
) {

757 *
a˘i⁄•
 = 
NULL
;

759 i‡(
°©s
) {

760 
	`mem£t
(
°©s
, 0,  *stats);

763 i‡(
	`should_log_Êow_mesßge
(
îr‹
)) {

764 c⁄° 
∆©å
 *
a˘i⁄s
;

765 
size_t
 
a˘i⁄s_Àn
;

767 i‡(!
îr‹
 && 
a˘i⁄•
) {

768 
a˘i⁄s
 = (*
a˘i⁄•
)->
d©a
;

769 
a˘i⁄s_Àn
 = (*
a˘i⁄•
)->
size
;

771 
a˘i⁄s
 = 
NULL
;

772 
a˘i⁄s_Àn
 = 0;

774 
	`log_Êow_mesßge
(
dpif
, 
îr‹
, "Êow_gë", 
key
, 
key_Àn
, 
°©s
,

775 
a˘i⁄s
, 
a˘i⁄s_Àn
);

777  
îr‹
;

778 
	}
}

781 
	$dpif_Êow_put__
(
dpif
 *dpif, c⁄° 
dpif_Êow_put
 *
put
)

783 
îr‹
;

785 
	`COVERAGE_INC
(
dpif_Êow_put
);

786 
	`as£π
(!(
put
->
Êags
 & ~(
DPIF_FP_CREATE
 | 
DPIF_FP_MODIFY


787 | 
DPIF_FP_ZERO_STATS
)));

789 
îr‹
 = 
dpif
->
dpif_˛ass
->
	`Êow_put
(dpif, 
put
);

790 i‡(
îr‹
 && 
put
->
°©s
) {

791 
	`mem£t
(
put
->
°©s
, 0,  *put->stats);

793 
	`log_Êow_put_mesßge
(
dpif
, 
put
, 
îr‹
);

794  
îr‹
;

795 
	}
}

818 
	$dpif_Êow_put
(
dpif
 *dpif, 
dpif_Êow_put_Êags
 
Êags
,

819 c⁄° 
∆©å
 *
key
, 
size_t
 
key_Àn
,

820 c⁄° 
∆©å
 *
a˘i⁄s
, 
size_t
 
a˘i⁄s_Àn
,

821 
dpif_Êow_°©s
 *
°©s
)

823 
dpif_Êow_put
 
put
;

825 
put
.
Êags
 = flags;

826 
put
.
key
 = key;

827 
put
.
key_Àn
 = key_len;

828 
put
.
a˘i⁄s
 =áctions;

829 
put
.
a˘i⁄s_Àn
 =áctions_len;

830 
put
.
°©s
 = stats;

831  
	`dpif_Êow_put__
(
dpif
, &
put
);

832 
	}
}

835 
	$dpif_Êow_dñ__
(
dpif
 *dpif, 
dpif_Êow_dñ
 *
dñ
)

837 
îr‹
;

839 
	`COVERAGE_INC
(
dpif_Êow_dñ
);

841 
îr‹
 = 
dpif
->
dpif_˛ass
->
	`Êow_dñ
(dpif, 
dñ
);

842 i‡(
îr‹
 && 
dñ
->
°©s
) {

843 
	`mem£t
(
dñ
->
°©s
, 0,  *del->stats);

845 
	`log_Êow_dñ_mesßge
(
dpif
, 
dñ
, 
îr‹
);

846  
îr‹
;

847 
	}
}

856 
	$dpif_Êow_dñ
(
dpif
 *dpif,

857 c⁄° 
∆©å
 *
key
, 
size_t
 
key_Àn
,

858 
dpif_Êow_°©s
 *
°©s
)

860 
dpif_Êow_dñ
 
dñ
;

862 
dñ
.
key
 = key;

863 
dñ
.
key_Àn
 = key_len;

864 
dñ
.
°©s
 = stats;

865  
	`dpif_Êow_dñ__
(
dpif
, &
dñ
);

866 
	}
}

875 
	$dpif_Êow_dump_°¨t
(
dpif_Êow_dump
 *
dump
, c⁄° 
dpif
 *dpif)

877 
dump
->
dpif
 = dpif;

878 
dump
->
îr‹
 = 
dpif
->
dpif_˛ass
->
	`Êow_dump_°¨t
(dpif, &dump->
°©e
);

879 
	`log_›î©i⁄
(
dpif
, "Êow_dump_°¨t", 
dump
->
îr‹
);

880 
	}
}

900 
boﬁ


901 
	$dpif_Êow_dump_√xt
(
dpif_Êow_dump
 *
dump
,

902 c⁄° 
∆©å
 **
key
, 
size_t
 *
key_Àn
,

903 c⁄° 
∆©å
 **
a˘i⁄s
, 
size_t
 *
a˘i⁄s_Àn
,

904 c⁄° 
dpif_Êow_°©s
 **
°©s
)

906 c⁄° 
dpif
 *dpi‡
dump
->dpif;

907 
îr‹
 = 
dump
->error;

909 i‡(!
îr‹
) {

910 
îr‹
 = 
dpif
->
dpif_˛ass
->
	`Êow_dump_√xt
(dpif, 
dump
->
°©e
,

911 
key
, 
key_Àn
,

912 
a˘i⁄s
, 
a˘i⁄s_Àn
,

913 
°©s
);

914 i‡(
îr‹
) {

915 
dpif
->
dpif_˛ass
->
	`Êow_dump_d⁄e
(dpif, 
dump
->
°©e
);

918 i‡(
îr‹
) {

919 i‡(
key
) {

920 *
key
 = 
NULL
;

921 *
key_Àn
 = 0;

923 i‡(
a˘i⁄s
) {

924 *
a˘i⁄s
 = 
NULL
;

925 *
a˘i⁄s_Àn
 = 0;

927 i‡(
°©s
) {

928 *
°©s
 = 
NULL
;

931 i‡(!
dump
->
îr‹
) {

932 i‡(
îr‹
 =
EOF
) {

933 
	`VLOG_DBG_RL
(&
dpmsg_æ
, "%s: dum≥dáŒ flows", 
	`dpif_«me
(
dpif
));

934 } i‡(
	`should_log_Êow_mesßge
(
îr‹
)) {

935 
	`log_Êow_mesßge
(
dpif
, 
îr‹
, "flow_dump",

936 
key
 ? *key : 
NULL
, key ? *
key_Àn
 : 0,

937 
°©s
 ? *°©†: 
NULL
, 
a˘i⁄s
 ? *actions : NULL,

938 
a˘i⁄s
 ? *
a˘i⁄s_Àn
 : 0);

941 
dump
->
îr‹
 =Érror;

942  !
îr‹
;

943 
	}
}

949 
	$dpif_Êow_dump_d⁄e
(
dpif_Êow_dump
 *
dump
)

951 c⁄° 
dpif
 *dpi‡
dump
->dpif;

952 i‡(!
dump
->
îr‹
) {

953 
dump
->
îr‹
 = 
dpif
->
dpif_˛ass
->
	`Êow_dump_d⁄e
(dpif, dump->
°©e
);

954 
	`log_›î©i⁄
(
dpif
, "Êow_dump_d⁄e", 
dump
->
îr‹
);

956  
dump
->
îr‹
 =
EOF
 ? 0 : dump->error;

957 
	}
}

960 
	$dpif_execuã__
(
dpif
 *dpif, c⁄° 
dpif_execuã
 *
execuã
)

962 
îr‹
;

964 
	`COVERAGE_INC
(
dpif_execuã
);

965 i‡(
execuã
->
a˘i⁄s_Àn
 > 0) {

966 
îr‹
 = 
dpif
->
dpif_˛ass
->
	`execuã
(dpif, 
execuã
);

968 
îr‹
 = 0;

971 
	`log_execuã_mesßge
(
dpif
, 
execuã
, 
îr‹
);

973  
îr‹
;

974 
	}
}

984 
	$dpif_execuã
(
dpif
 *dpif,

985 c⁄° 
∆©å
 *
key
, 
size_t
 
key_Àn
,

986 c⁄° 
∆©å
 *
a˘i⁄s
, 
size_t
 
a˘i⁄s_Àn
,

987 c⁄° 
oÂbuf
 *
buf
)

989 
dpif_execuã
 
execuã
;

991 
execuã
.
key
 = key;

992 
execuã
.
key_Àn
 = key_len;

993 
execuã
.
a˘i⁄s
 =áctions;

994 
execuã
.
a˘i⁄s_Àn
 =áctions_len;

995 
execuã
.
∑ckë
 = 
buf
;

996  
	`dpif_execuã__
(
dpif
, &
execuã
);

997 
	}
}

1006 
	$dpif_›î©e
(
dpif
 *dpif, 
dpif_›
 **
›s
, 
size_t
 
n_›s
)

1008 
size_t
 
i
;

1010 i‡(
dpif
->
dpif_˛ass
->
›î©e
) {

1011 
dpif
->
dpif_˛ass
->
	`›î©e
(dpif, 
›s
, 
n_›s
);

1013 
i
 = 0; i < 
n_›s
; i++) {

1014 
dpif_›
 *
›
 = 
›s
[
i
];

1016 
›
->
ty≥
) {

1017 
DPIF_OP_FLOW_PUT
:

1018 
	`log_Êow_put_mesßge
(
dpif
, &
›
->
u
.
Êow_put
, op->
îr‹
);

1021 
DPIF_OP_FLOW_DEL
:

1022 
	`log_Êow_dñ_mesßge
(
dpif
, &
›
->
u
.
Êow_dñ
, op->
îr‹
);

1025 
DPIF_OP_EXECUTE
:

1026 
	`log_execuã_mesßge
(
dpif
, &
›
->
u
.
execuã
, op->
îr‹
);

1033 
i
 = 0; i < 
n_›s
; i++) {

1034 
dpif_›
 *
›
 = 
›s
[
i
];

1036 
›
->
ty≥
) {

1037 
DPIF_OP_FLOW_PUT
:

1038 
›
->
îr‹
 = 
	`dpif_Êow_put__
(
dpif
, &›->
u
.
Êow_put
);

1041 
DPIF_OP_FLOW_DEL
:

1042 
›
->
îr‹
 = 
	`dpif_Êow_dñ__
(
dpif
, &›->
u
.
Êow_dñ
);

1045 
DPIF_OP_EXECUTE
:

1046 
›
->
îr‹
 = 
	`dpif_execuã__
(
dpif
, &›->
u
.
execuã
);

1050 
	`NOT_REACHED
();

1053 
	}
}

1058 
	$dpif_upˇŒ_ty≥_to_°rög
(
dpif_upˇŒ_ty≥
 
ty≥
)

1060 
ty≥
) {

1061 
DPIF_UC_MISS
:  "miss";

1062 
DPIF_UC_ACTION
:  "action";

1063 
DPIF_N_UC_TYPES
: :  "<unknown>";

1065 
	}
}

1075 
	$dpif_ªcv_£t
(
dpif
 *dpif, 
boﬁ
 
íabÀ
)

1077 
îr‹
 = 
dpif
->
dpif_˛ass
->
	`ªcv_£t
(dpif, 
íabÀ
);

1078 
	`log_›î©i⁄
(
dpif
, "ªcv_£t", 
îr‹
);

1079  
îr‹
;

1080 
	}
}

1094 
	$dpif_ªcv
(
dpif
 *dpif, 
dpif_upˇŒ
 *
upˇŒ
, 
oÂbuf
 *
buf
)

1096 
îr‹
 = 
dpif
->
dpif_˛ass
->
	`ªcv
(dpif, 
upˇŒ
, 
buf
);

1097 i‡(!
îr‹
 && !
	`VLOG_DROP_DBG
(&
dpmsg_æ
)) {

1098 
ds
 
Êow
;

1099 *
∑ckë
;

1101 
∑ckë
 = 
	`oÂ_∑ckë_to_°rög
(
upˇŒ
->∑ckë->
d©a
,

1102 
upˇŒ
->
∑ckë
->
size
);

1104 
	`ds_öô
(&
Êow
);

1105 
	`odp_Êow_key_f‹m©
(
upˇŒ
->
key
, upˇŒ->
key_Àn
, &
Êow
);

1107 
	`VLOG_DBG
("%s: %s upcall:\n%s\n%s",

1108 
	`dpif_«me
(
dpif
), 
	`dpif_upˇŒ_ty≥_to_°rög
(
upˇŒ
->
ty≥
),

1109 
	`ds_c°r
(&
Êow
), 
∑ckë
);

1111 
	`ds_de°roy
(&
Êow
);

1112 
	`‰ì
(
∑ckë
);

1113 } i‡(
îr‹
 &&Éº‹ !
EAGAIN
) {

1114 
	`log_›î©i⁄
(
dpif
, "ªcv", 
îr‹
);

1116  
îr‹
;

1117 
	}
}

1122 
	$dpif_ªcv_purge
(
dpif
 *dpif)

1124 
	`COVERAGE_INC
(
dpif_purge
);

1125 i‡(
dpif
->
dpif_˛ass
->
ªcv_purge
) {

1126 
dpif
->
dpif_˛ass
->
	`ªcv_purge
(dpif);

1128 
	}
}

1133 
	$dpif_ªcv_waô
(
dpif
 *dpif)

1135 
dpif
->
dpif_˛ass
->
	`ªcv_waô
(dpif);

1136 
	}
}

1141 
	$dpif_gë_√tÊow_ids
(c⁄° 
dpif
 *dpif,

1142 
uöt8_t
 *
ígöe_ty≥
, uöt8_à*
ígöe_id
)

1144 *
ígöe_ty≥
 = 
dpif
->
√tÊow_ígöe_ty≥
;

1145 *
ígöe_id
 = 
dpif
->
√tÊow_ígöe_id
;

1146 
	}
}

1153 
	$dpif_queue_to_¥i‹ôy
(c⁄° 
dpif
 *dpif, 
uöt32_t
 
queue_id
,

1154 
uöt32_t
 *
¥i‹ôy
)

1156 
îr‹
 = (
dpif
->
dpif_˛ass
->
queue_to_¥i‹ôy


1157 ? 
dpif
->
dpif_˛ass
->
	`queue_to_¥i‹ôy
(dpif, 
queue_id
,

1158 
¥i‹ôy
)

1159 : 
EOPNOTSUPP
);

1160 i‡(
îr‹
) {

1161 *
¥i‹ôy
 = 0;

1163 
	`log_›î©i⁄
(
dpif
, "queue_to_¥i‹ôy", 
îr‹
);

1164  
îr‹
;

1165 
	}
}

1168 
	$dpif_öô
(
dpif
 *dpif, c⁄° 
dpif_˛ass
 *dpif_class,

1169 c⁄° *
«me
,

1170 
uöt8_t
 
√tÊow_ígöe_ty≥
, uöt8_à
√tÊow_ígöe_id
)

1172 
dpif
->
dpif_˛ass
 = dpif_class;

1173 
dpif
->
ba£_«me
 = 
	`x°rdup
(
«me
);

1174 
dpif
->
fuŒ_«me
 = 
	`xa•rötf
("%s@%s", 
dpif_˛ass
->
ty≥
, 
«me
);

1175 
dpif
->
√tÊow_ígöe_ty≥
 =Çetflow_engine_type;

1176 
dpif
->
√tÊow_ígöe_id
 =Çetflow_engine_id;

1177 
	}
}

1186 
	$dpif_unöô
(
dpif
 *dpif, 
boﬁ
 
˛o£
)

1188 *
ba£_«me
 = 
dpif
->base_name;

1189 *
fuŒ_«me
 = 
dpif
->full_name;

1191 i‡(
˛o£
) {

1192 
dpif
->
dpif_˛ass
->
	`˛o£
(dpif);

1195 
	`‰ì
(
ba£_«me
);

1196 
	`‰ì
(
fuŒ_«me
);

1197 
	}
}

1200 
	$log_›î©i⁄
(c⁄° 
dpif
 *dpif, c⁄° *
›î©i⁄
, 
îr‹
)

1202 i‡(!
îr‹
) {

1203 
	`VLOG_DBG_RL
(&
dpmsg_æ
, "%s: %†suc˚ss", 
	`dpif_«me
(
dpif
), 
›î©i⁄
);

1204 } i‡(
	`oÂîr_is_vÆid
(
îr‹
)) {

1205 
	`VLOG_WARN_RL
(&
îr‹_æ
, "%s: %s failed (%s)",

1206 
	`dpif_«me
(
dpif
), 
›î©i⁄
, 
	`oÂîr_gë_«me
(
îr‹
));

1208 
	`VLOG_WARN_RL
(&
îr‹_æ
, "%s: %s failed (%s)",

1209 
	`dpif_«me
(
dpif
), 
›î©i⁄
, 
	`°ªº‹
(
îr‹
));

1211 
	}
}

1213 
vlog_Àvñ


1214 
	$Êow_mesßge_log_Àvñ
(
îr‹
)

1216  
îr‹
 ? 
VLL_WARN
 : 
VLL_DBG
;

1217 
	}
}

1219 
boﬁ


1220 
	$should_log_Êow_mesßge
(
îr‹
)

1222  !
	`vlog_should_dr›
(
THIS_MODULE
, 
	`Êow_mesßge_log_Àvñ
(
îr‹
),

1223 
îr‹
 ? &
îr‹_æ
 : &
dpmsg_æ
);

1224 
	}
}

1227 
	$log_Êow_mesßge
(c⁄° 
dpif
 *dpif, 
îr‹
, c⁄° *
›î©i⁄
,

1228 c⁄° 
∆©å
 *
key
, 
size_t
 
key_Àn
,

1229 c⁄° 
dpif_Êow_°©s
 *
°©s
,

1230 c⁄° 
∆©å
 *
a˘i⁄s
, 
size_t
 
a˘i⁄s_Àn
)

1232 
ds
 d†
DS_EMPTY_INITIALIZER
;

1233 
	`ds_put_f‹m©
(&
ds
, "%s: ", 
	`dpif_«me
(
dpif
));

1234 i‡(
îr‹
) {

1235 
	`ds_put_c°r
(&
ds
, "failedÅo ");

1237 
	`ds_put_f‹m©
(&
ds
, "%†", 
›î©i⁄
);

1238 i‡(
îr‹
) {

1239 
	`ds_put_f‹m©
(&
ds
, "(%sË", 
	`°ªº‹
(
îr‹
));

1241 
	`odp_Êow_key_f‹m©
(
key
, 
key_Àn
, &
ds
);

1242 i‡(
°©s
) {

1243 
	`ds_put_c°r
(&
ds
, ", ");

1244 
	`dpif_Êow_°©s_f‹m©
(
°©s
, &
ds
);

1246 i‡(
a˘i⁄s
 || 
a˘i⁄s_Àn
) {

1247 
	`ds_put_c°r
(&
ds
, ",áctions:");

1248 
	`f‹m©_odp_a˘i⁄s
(&
ds
, 
a˘i⁄s
, 
a˘i⁄s_Àn
);

1250 
	`vlog
(
THIS_MODULE
, 
	`Êow_mesßge_log_Àvñ
(
îr‹
), "%s", 
	`ds_c°r
(&
ds
));

1251 
	`ds_de°roy
(&
ds
);

1252 
	}
}

1255 
	$log_Êow_put_mesßge
(
dpif
 *dpif, c⁄° 
dpif_Êow_put
 *
put
,

1256 
îr‹
)

1258 i‡(
	`should_log_Êow_mesßge
(
îr‹
)) {

1259 
ds
 
s
;

1261 
	`ds_öô
(&
s
);

1262 
	`ds_put_c°r
(&
s
, "put");

1263 i‡(
put
->
Êags
 & 
DPIF_FP_CREATE
) {

1264 
	`ds_put_c°r
(&
s
, "[create]");

1266 i‡(
put
->
Êags
 & 
DPIF_FP_MODIFY
) {

1267 
	`ds_put_c°r
(&
s
, "[modify]");

1269 i‡(
put
->
Êags
 & 
DPIF_FP_ZERO_STATS
) {

1270 
	`ds_put_c°r
(&
s
, "[zero]");

1272 
	`log_Êow_mesßge
(
dpif
, 
îr‹
, 
	`ds_c°r
(&
s
),

1273 
put
->
key
,Öut->
key_Àn
,Öut->
°©s
,

1274 
put
->
a˘i⁄s
,Öut->
a˘i⁄s_Àn
);

1275 
	`ds_de°roy
(&
s
);

1277 
	}
}

1280 
	$log_Êow_dñ_mesßge
(
dpif
 *dpif, c⁄° 
dpif_Êow_dñ
 *
dñ
,

1281 
îr‹
)

1283 i‡(
	`should_log_Êow_mesßge
(
îr‹
)) {

1284 
	`log_Êow_mesßge
(
dpif
, 
îr‹
, "Êow_dñ", 
dñ
->
key
, dñ->
key_Àn
,

1285 !
îr‹
 ? 
dñ
->
°©s
 : 
NULL
, NULL, 0);

1287 
	}
}

1290 
	$log_execuã_mesßge
(
dpif
 *dpif, c⁄° 
dpif_execuã
 *
execuã
,

1291 
îr‹
)

1293 i‡(!(
îr‹
 ? 
	`VLOG_DROP_WARN
(&
îr‹_æ
Ë: 
	`VLOG_DROP_DBG
(&
dpmsg_æ
))) {

1294 
ds
 d†
DS_EMPTY_INITIALIZER
;

1295 *
∑ckë
;

1297 
∑ckë
 = 
	`oÂ_∑ckë_to_°rög
(
execuã
->∑ckë->
d©a
,

1298 
execuã
->
∑ckë
->
size
);

1299 
	`ds_put_f‹m©
(&
ds
, "%s:Éxecuã ", 
	`dpif_«me
(
dpif
));

1300 
	`f‹m©_odp_a˘i⁄s
(&
ds
, 
execuã
->
a˘i⁄s
,Éxecuã->
a˘i⁄s_Àn
);

1301 i‡(
îr‹
) {

1302 
	`ds_put_f‹m©
(&
ds
, " faûed (%s)", 
	`°ªº‹
(
îr‹
));

1304 
	`ds_put_f‹m©
(&
ds
, " o¿∑ckë %s", 
∑ckë
);

1305 
	`vlog
(
THIS_MODULE
, 
îr‹
 ? 
VLL_WARN
 : 
VLL_DBG
, "%s", 
	`ds_c°r
(&
ds
));

1306 
	`ds_de°roy
(&
ds
);

1307 
	`‰ì
(
∑ckë
);

1309 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/dpif.h

18 #i‚de‡
DPIF_H


19 
	#DPIF_H
 1

	)

21 
	~<°dboﬁ.h
>

22 
	~<°ddef.h
>

23 
	~<°döt.h
>

24 
	~<löux/›ívswôch.h
>

25 
	~"›íÊow/›íÊow.h
"

26 
	~"√tdev.h
"

27 
	~"utû.h
"

29 #ifde‡ 
__˝lu•lus


33 
dpif
;

34 
ds
;

35 
Êow
;

36 
∆©å
;

37 
oÂbuf
;

38 
s£t
;

39 
dpif_˛ass
;

41 
dp_ªgi°î_¥ovidî
(c⁄° 
dpif_˛ass
 *);

42 
dp_uƒegi°î_¥ovidî
(c⁄° *
ty≥
);

43 
dp_bœckli°_¥ovidî
(c⁄° *
ty≥
);

44 
dp_íumî©e_ty≥s
(
s£t
 *
ty≥s
);

45 c⁄° *
dpif_n‹mÆize_ty≥
(const *);

47 
dp_íumî©e_«mes
(c⁄° *
ty≥
, 
s£t
 *
«mes
);

48 
dp_∑r£_«me
(c⁄° *
d©≠©h_«me
, **
«me
, **
ty≥
);

50 
dpif_›í
(c⁄° *
«me
, c⁄° *
ty≥
, 
dpif
 **);

51 
dpif_¸óã
(c⁄° *
«me
, c⁄° *
ty≥
, 
dpif
 **);

52 
dpif_¸óã_™d_›í
(c⁄° *
«me
, c⁄° *
ty≥
, 
dpif
 **);

53 
dpif_˛o£
(
dpif
 *);

55 
dpif_run
(
dpif
 *);

56 
dpif_waô
(
dpif
 *);

58 c⁄° *
dpif_«me
(c⁄° 
dpif
 *);

59 c⁄° *
dpif_ba£_«me
(c⁄° 
dpif
 *);

61 
dpif_dñëe
(
dpif
 *);

64 
	sdpif_dp_°©s
 {

65 
uöt64_t
 
n_hô
;

66 
uöt64_t
 
n_mis£d
;

67 
uöt64_t
 
n_lo°
;

68 
uöt64_t
 
n_Êows
;

70 
dpif_gë_dp_°©s
(c⁄° 
dpif
 *, 
dpif_dp_°©s
 *);

75 
dpif_p‹t_add
(
dpif
 *, 
√tdev
 *, 
uöt16_t
 *
p‹t_n›
);

76 
dpif_p‹t_dñ
(
dpif
 *, 
uöt16_t
 
p‹t_no
);

81 
	sdpif_p‹t
 {

82 *
«me
;

83 *
ty≥
;

84 
uöt32_t
 
p‹t_no
;

86 
dpif_p‹t_˛⁄e
(
dpif_p‹t
 *, const dpif_port *);

87 
dpif_p‹t_de°roy
(
dpif_p‹t
 *);

88 
dpif_p‹t_quîy_by_numbî
(c⁄° 
dpif
 *, 
uöt16_t
 
p‹t_no
,

89 
dpif_p‹t
 *);

90 
dpif_p‹t_quîy_by_«me
(c⁄° 
dpif
 *, c⁄° *
dev«me
,

91 
dpif_p‹t
 *);

92 
dpif_p‹t_gë_«me
(
dpif
 *, 
uöt16_t
 
p‹t_no
,

93 *
«me
, 
size_t
 
«me_size
);

94 
dpif_gë_max_p‹ts
(c⁄° 
dpif
 *);

95 
uöt32_t
 
dpif_p‹t_gë_pid
(c⁄° 
dpif
 *, 
uöt16_t
 
p‹t_no
);

97 
	sdpif_p‹t_dump
 {

98 c⁄° 
dpif
 *dpif;

99 
îr‹
;

100 *
°©e
;

102 
dpif_p‹t_dump_°¨t
(
dpif_p‹t_dump
 *, c⁄° 
dpif
 *);

103 
boﬁ
 
dpif_p‹t_dump_√xt
(
dpif_p‹t_dump
 *, 
dpif_p‹t
 *);

104 
dpif_p‹t_dump_d⁄e
(
dpif_p‹t_dump
 *);

112 
	#DPIF_PORT_FOR_EACH
(
DPIF_PORT
, 
DUMP
, 
DPIF
) \

113 
	`dpif_p‹t_dump_°¨t
(
DUMP
, 
DPIF
); \

114 (
	`dpif_p‹t_dump_√xt
(
DUMP
, 
DPIF_PORT
) \

115 ? 
åue
 \

116 : (
	`dpif_p‹t_dump_d⁄e
(
DUMP
), 
Ál£
)); \

117 )

	)

119 
dpif_p‹t_pﬁl
(c⁄° 
dpif
 *, **
dev«mï
);

120 
dpif_p‹t_pﬁl_waô
(c⁄° 
dpif
 *);

124 
	sdpif_Êow_°©s
 {

125 
uöt64_t
 
n_∑ckës
;

126 
uöt64_t
 
n_byãs
;

127 
u£d
;

128 
uöt8_t
 
t˝_Êags
;

131 
dpif_Êow_°©s_exåa˘
(c⁄° 
Êow
 *, c⁄° 
oÂbuf
 *
∑ckë
,

132 
u£d
, 
dpif_Êow_°©s
 *);

133 
dpif_Êow_°©s_f‹m©
(c⁄° 
dpif_Êow_°©s
 *, 
ds
 *);

135 
	edpif_Êow_put_Êags
 {

136 
DPIF_FP_CREATE
 = 1 << 0,

137 
DPIF_FP_MODIFY
 = 1 << 1,

138 
DPIF_FP_ZERO_STATS
 = 1 << 2

141 
dpif_Êow_Êush
(
dpif
 *);

142 
dpif_Êow_put
(
dpif
 *, 
dpif_Êow_put_Êags
,

143 c⁄° 
∆©å
 *
key
, 
size_t
 
key_Àn
,

144 c⁄° 
∆©å
 *
a˘i⁄s
, 
size_t
 
a˘i⁄s_Àn
,

145 
dpif_Êow_°©s
 *);

146 
dpif_Êow_dñ
(
dpif
 *,

147 c⁄° 
∆©å
 *
key
, 
size_t
 
key_Àn
,

148 
dpif_Êow_°©s
 *);

149 
dpif_Êow_gë
(c⁄° 
dpif
 *,

150 c⁄° 
∆©å
 *
key
, 
size_t
 
key_Àn
,

151 
oÂbuf
 **
a˘i⁄•
, 
dpif_Êow_°©s
 *);

153 
	sdpif_Êow_dump
 {

154 c⁄° 
dpif
 *dpif;

155 
îr‹
;

156 *
°©e
;

158 
dpif_Êow_dump_°¨t
(
dpif_Êow_dump
 *, c⁄° 
dpif
 *);

159 
boﬁ
 
dpif_Êow_dump_√xt
(
dpif_Êow_dump
 *,

160 c⁄° 
∆©å
 **
key
, 
size_t
 *
key_Àn
,

161 c⁄° 
∆©å
 **
a˘i⁄s
, 
size_t
 *
a˘i⁄s_Àn
,

162 c⁄° 
dpif_Êow_°©s
 **);

163 
dpif_Êow_dump_d⁄e
(
dpif_Êow_dump
 *);

167 
dpif_execuã
(
dpif
 *,

168 c⁄° 
∆©å
 *
key
, 
size_t
 
key_Àn
,

169 c⁄° 
∆©å
 *
a˘i⁄s
, 
size_t
 
a˘i⁄s_Àn
,

170 c⁄° 
oÂbuf
 *);

178 
	edpif_›_ty≥
 {

179 
DPIF_OP_FLOW_PUT
 = 1,

180 
DPIF_OP_FLOW_DEL
,

181 
DPIF_OP_EXECUTE
,

184 
	sdpif_Êow_put
 {

186 
dpif_Êow_put_Êags
 
Êags
;

187 c⁄° 
∆©å
 *
key
;

188 
size_t
 
key_Àn
;

189 c⁄° 
∆©å
 *
a˘i⁄s
;

190 
size_t
 
a˘i⁄s_Àn
;

193 
dpif_Êow_°©s
 *
°©s
;

196 
	sdpif_Êow_dñ
 {

198 c⁄° 
∆©å
 *
key
;

199 
size_t
 
key_Àn
;

202 
dpif_Êow_°©s
 *
°©s
;

205 
	sdpif_execuã
 {

206 c⁄° 
∆©å
 *
key
;

207 
size_t
 
key_Àn
;

208 c⁄° 
∆©å
 *
a˘i⁄s
;

209 
size_t
 
a˘i⁄s_Àn
;

210 c⁄° 
oÂbuf
 *
∑ckë
;

213 
	sdpif_›
 {

214 
dpif_›_ty≥
 
ty≥
;

215 
îr‹
;

217 
dpif_Êow_put
 
Êow_put
;

218 
dpif_Êow_dñ
 
Êow_dñ
;

219 
dpif_execuã
 
execuã
;

220 } 
u
;

223 
dpif_›î©e
(
dpif
 *, 
dpif_›
 **
›s
, 
size_t
 
n_›s
);

227 
	edpif_upˇŒ_ty≥
 {

228 
DPIF_UC_MISS
,

229 
DPIF_UC_ACTION
,

230 
DPIF_N_UC_TYPES


233 c⁄° *
dpif_upˇŒ_ty≥_to_°rög
(
dpif_upˇŒ_ty≥
);

242 
	sdpif_upˇŒ
 {

244 
dpif_upˇŒ_ty≥
 
ty≥
;

245 
oÂbuf
 *
∑ckë
;

246 
∆©å
 *
key
;

247 
size_t
 
key_Àn
;

250 
uöt64_t
 
u£rd©a
;

253 
dpif_ªcv_£t
(
dpif
 *, 
boﬁ
 
íabÀ
);

254 
dpif_ªcv
(
dpif
 *, 
dpif_upˇŒ
 *, 
oÂbuf
 *);

255 
dpif_ªcv_purge
(
dpif
 *);

256 
dpif_ªcv_waô
(
dpif
 *);

260 
dpif_gë_√tÊow_ids
(c⁄° 
dpif
 *,

261 
uöt8_t
 *
ígöe_ty≥
, uöt8_à*
ígöe_id
);

263 
dpif_queue_to_¥i‹ôy
(c⁄° 
dpif
 *, 
uöt32_t
 
queue_id
,

264 
uöt32_t
 *
¥i‹ôy
);

266 #ifde‡ 
__˝lu•lus


	@/home/lsch/mytest/openvswitch-1.9.0/lib/dummy.c

17 
	~<c⁄fig.h
>

19 
	~"dummy.h
"

31 
	$dummy_íabÀ
(
boﬁ
 
ovîride
)

33 
	`√tdev_dummy_ªgi°î
(
ovîride
);

34 
	`dpif_dummy_ªgi°î
(
ovîride
);

35 
	`timevÆ_dummy_ªgi°î
();

36 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/dummy.h

17 #i‚de‡
DUMMY_H


18 
	#DUMMY_H
 1

	)

20 
	~<°dboﬁ.h
>

23 
dummy_íabÀ
(
boﬁ
 
ovîride
);

26 
dpif_dummy_ªgi°î
(
boﬁ
 
ovîride
);

27 
√tdev_dummy_ªgi°î
(
boﬁ
 
ovîride
);

28 
timevÆ_dummy_ªgi°î
();

	@/home/lsch/mytest/openvswitch-1.9.0/lib/dynamic-string.c

17 
	~<c⁄fig.h
>

18 
	~"dy«mic-°rög.h
"

19 
	~<as£π.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<time.h
>

23 
	~"timevÆ.h
"

24 
	~"utû.h
"

28 
	$ds_öô
(
ds
 *ds)

30 
ds
->
°rög
 = 
NULL
;

31 
ds
->
Àngth
 = 0;

32 
ds
->
Æloˇãd
 = 0;

33 
	}
}

38 
	$ds_˛ór
(
ds
 *ds)

40 
ds
->
Àngth
 = 0;

41 
	}
}

46 
	$ds_åunˇã
(
ds
 *ds, 
size_t
 
√w_Àngth
)

48 i‡(
ds
->
Àngth
 > 
√w_Àngth
) {

49 
ds
->
Àngth
 = 
√w_Àngth
;

50 
ds
->
°rög
[
√w_Àngth
] = '\0';

52 
	}
}

58 
	$ds_ª£rve
(
ds
 *ds, 
size_t
 
mö_Àngth
)

60 i‡(
mö_Àngth
 > 
ds
->
Æloˇãd
 || !ds->
°rög
) {

61 
ds
->
Æloˇãd
 +
	`MAX
(
mö_Àngth
, ds->allocated);

62 
ds
->
Æloˇãd
 = 
	`MAX
(8, ds->allocated);

63 
ds
->
°rög
 = 
	`xªÆloc
(ds->°rög, ds->
Æloˇãd
 + 1);

65 
	}
}

71 
	$ds_put_unöô
(
ds
 *ds, 
size_t
 
n
)

73 
	`ds_ª£rve
(
ds
, ds->
Àngth
 + 
n
);

74 
ds
->
Àngth
 +
n
;

75 
ds
->
°rög
[ds->
Àngth
] = '\0';

76  &
ds
->
°rög
[ds->
Àngth
 - 
n
];

77 
	}
}

80 
	$ds_put_ch¨__
(
ds
 *ds, 
c
)

82 *
	`ds_put_unöô
(
ds
, 1Ë
c
;

83 
	}
}

87 
	$ds_put_utf8
(
ds
 *ds, 
uc
)

89 i‡(
uc
 <= 0x7f) {

90 
	`ds_put_ch¨
(
ds
, 
uc
);

91 } i‡(
uc
 <= 0x7ff) {

92 
	`ds_put_ch¨
(
ds
, 0xc0 | (
uc
 >> 6));

93 
	`ds_put_ch¨
(
ds
, 0x80 | (
uc
 & 0x3f));

94 } i‡(
uc
 <= 0xffff) {

95 
	`ds_put_ch¨
(
ds
, 0xe0 | (
uc
 >> 12));

96 
	`ds_put_ch¨
(
ds
, 0x80 | ((
uc
 >> 6) & 0x3f));

97 
	`ds_put_ch¨
(
ds
, 0x80 | (
uc
 & 0x3f));

98 } i‡(
uc
 <= 0x10ffff) {

99 
	`ds_put_ch¨
(
ds
, 0xf0 | (
uc
 >> 18));

100 
	`ds_put_ch¨
(
ds
, 0x80 | ((
uc
 >> 12) & 0x3f));

101 
	`ds_put_ch¨
(
ds
, 0x80 | ((
uc
 >> 6) & 0x3f));

102 
	`ds_put_ch¨
(
ds
, 0x80 | (
uc
 & 0x3f));

106 
	`ds_put_utf8
(
ds
, 0xfffd);

108 
	}
}

111 
	$ds_put_ch¨_mu…ùÀ
(
ds
 *ds, 
c
, 
size_t
 
n
)

113 
	`mem£t
(
	`ds_put_unöô
(
ds
, 
n
), 
c
,Ç);

114 
	}
}

117 
	$ds_put_buf„r
(
ds
 *ds, c⁄° *
s
, 
size_t
 
n
)

119 
	`mem˝y
(
	`ds_put_unöô
(
ds
, 
n
), 
s
,Ç);

120 
	}
}

123 
	$ds_put_c°r
(
ds
 *ds, c⁄° *
s
)

125 
size_t
 
s_Àn
 = 
	`°æí
(
s
);

126 
	`mem˝y
(
	`ds_put_unöô
(
ds
, 
s_Àn
), 
s
, s_len);

127 
	}
}

130 
	$ds_put_™d_‰ì_c°r
(
ds
 *ds, *
s
)

132 
	`ds_put_c°r
(
ds
, 
s
);

133 
	`‰ì
(
s
);

134 
	}
}

137 
	$ds_put_f‹m©
(
ds
 *ds, c⁄° *
f‹m©
, ...)

139 
va_li°
 
¨gs
;

141 
	`va_°¨t
(
¨gs
, 
f‹m©
);

142 
	`ds_put_f‹m©_vÆi°
(
ds
, 
f‹m©
, 
¨gs
);

143 
	`va_íd
(
¨gs
);

144 
	}
}

147 
	$ds_put_f‹m©_vÆi°
(
ds
 *ds, c⁄° *
f‹m©
, 
va_li°
 
¨gs_
)

149 
va_li°
 
¨gs
;

150 
size_t
 
avaûabÀ
;

151 
√eded
;

153 
	`va_c›y
(
¨gs
, 
¨gs_
);

154 
avaûabÀ
 = 
ds
->
°rög
 ? ds->
Æloˇãd
 - ds->
Àngth
 + 1 : 0;

155 
√eded
 = 
	`v¢¥ötf
(&
ds
->
°rög
[ds->
Àngth
], 
avaûabÀ
, 
f‹m©
, 
¨gs
);

156 
	`va_íd
(
¨gs
);

158 i‡(
√eded
 < 
avaûabÀ
) {

159 
ds
->
Àngth
 +
√eded
;

161 
	`ds_ª£rve
(
ds
, ds->
Àngth
 + 
√eded
);

163 
	`va_c›y
(
¨gs
, 
¨gs_
);

164 
avaûabÀ
 = 
ds
->
Æloˇãd
 - ds->
Àngth
 + 1;

165 
√eded
 = 
	`v¢¥ötf
(&
ds
->
°rög
[ds->
Àngth
], 
avaûabÀ
, 
f‹m©
, 
¨gs
);

166 
	`va_íd
(
¨gs
);

168 
	`as£π
(
√eded
 < 
avaûabÀ
);

169 
ds
->
Àngth
 +
√eded
;

171 
	}
}

174 
	$ds_put_¥öèbÀ
(
ds
 *ds, c⁄° *
s
, 
size_t
 
n
)

176 
	`ds_ª£rve
(
ds
, ds->
Àngth
 + 
n
);

177 
n
-- > 0) {

178 
c
 = *
s
++;

179 i‡(
c
 < 0x20 || c > 0x7e || c == '\\' || c == '"') {

180 
	`ds_put_f‹m©
(
ds
, "\\%03o", (Ë
c
);

182 
	`ds_put_ch¨
(
ds
, 
c
);

185 
	}
}

190 
	$ds_put_°r·ime
(
ds
 *ds, c⁄° *
ãm∂©e
, 
boﬁ
 
utc
)

192 c⁄° 
tm
 *tm;

193 
time_t
 
now
 = 
	`time_wÆl
();

194 i‡(
utc
) {

195 
tm
 = 
	`gmtime
(&
now
);

197 
tm
 = 
	`loˇ…ime
(&
now
);

201 
size_t
 
avaû
 = 
ds
->
°rög
 ? ds->
Æloˇãd
 - ds->
Àngth
 + 1 : 0;

202 
size_t
 
u£d
 = 
	`°r·ime
(&
ds
->
°rög
[ds->
Àngth
], 
avaû
, 
ãm∂©e
, 
tm
);

203 i‡(
u£d
) {

204 
ds
->
Àngth
 +
u£d
;

207 
	`ds_ª£rve
(
ds
, ds->
Àngth
 + (
avaû
 < 32 ? 64 : 2 *ávail));

209 
	}
}

212 
	$ds_gë_löe
(
ds
 *ds, 
FILE
 *
fûe
)

214 
	`ds_˛ór
(
ds
);

216 
c
 = 
	`gëc
(
fûe
);

217 i‡(
c
 =
EOF
) {

218  
ds
->
Àngth
 ? 0 : 
EOF
;

219 } i‡(
c
 == '\n') {

222 
	`ds_put_ch¨
(
ds
, 
c
);

225 
	}
}

233 
	$ds_gë_¥ïro˚s£d_löe
(
ds
 *ds, 
FILE
 *
fûe
)

235 !
	`ds_gë_löe
(
ds
, 
fûe
)) {

236 *
löe
 = 
	`ds_c°r
(
ds
);

237 *
commít
;

240 
commít
 = 
	`°rchr
(
löe
, '#');

241 i‡(
commít
) {

242 *
commít
 = '\0';

246 i‡(
löe
[
	`°r•n
(line, " \t\n")] != '\0') {

250  
EOF
;

251 
	}
}

271 
	$ds_gë_ã°_löe
(
ds
 *ds, 
FILE
 *
fûe
)

274 *
s
, *
commít
;

275 
ªtvÆ
;

277 
ªtvÆ
 = 
	`ds_gë_löe
(
ds
, 
fûe
);

278 i‡(
ªtvÆ
) {

279  
ªtvÆ
;

282 
s
 = 
	`ds_c°r
(
ds
);

283 i‡(*
s
 == '#') {

284 
	`puts
(
s
);

288 
commít
 = 
	`°rchr
(
s
, '#');

289 i‡(
commít
) {

290 *
commít
 = '\0';

292 i‡(
s
[
	`°r•n
(s, " \t\n")] == '\0') {

293 
	`putch¨
('\n');

299 
	}
}

302 
	$ds_c°r
(
ds
 *ds)

304 i‡(!
ds
->
°rög
) {

305 
	`ds_ª£rve
(
ds
, 0);

307 
ds
->
°rög
[ds->
Àngth
] = '\0';

308  
ds
->
°rög
;

309 
	}
}

312 
	$ds_c°r_ro
(c⁄° 
ds
 *ds)

314  
	`ds_c°r
(
	`CONST_CAST
(
ds
 *, ds));

315 
	}
}

321 
	$ds_°ól_c°r
(
ds
 *ds)

323 *
s
 = 
	`ds_c°r
(
ds
);

324 
	`ds_öô
(
ds
);

325  
s
;

326 
	}
}

329 
	$ds_de°roy
(
ds
 *ds)

331 
	`‰ì
(
ds
->
°rög
);

332 
	}
}

336 
	$ds_sw≠
(
ds
 *
a
, d†*
b
)

338 
ds
 
ãmp
 = *
a
;

339 *
a
 = *
b
;

340 *
b
 = 
ãmp
;

341 
	}
}

348 
	$ds_put_hex_dump
(
ds
 *ds, c⁄° *
buf_
, 
size_t
 
size
,

349 
uöçå_t
 
ofs
, 
boﬁ
 
ascii
)

351 c⁄° 
uöt8_t
 *
buf
 = 
buf_
;

352 c⁄° 
size_t
 
≥r_löe
 = 16;

354 
size
 > 0)

356 
size_t
 
°¨t
, 
íd
, 
n
;

357 
size_t
 
i
;

360 
°¨t
 = 
ofs
 % 
≥r_löe
;

361 
íd
 = 
≥r_löe
;

362 i‡(
íd
 - 
°¨t
 > 
size
)

363 
íd
 = 
°¨t
 + 
size
;

364 
n
 = 
íd
 - 
°¨t
;

367 
	`ds_put_f‹m©
(
ds
, "%08jx ", (
uötmax_t
Ë
	`ROUND_DOWN
(
ofs
, 
≥r_löe
));

368 
i
 = 0; i < 
°¨t
; i++)

369 
	`ds_put_f‹m©
(
ds
, " ");

370 ; 
i
 < 
íd
; i++)

371 
	`ds_put_f‹m©
(
ds
, "%02hhx%c",

372 
buf
[
i
 - 
°¨t
], i =
≥r_löe
 / 2 - 1? '-' : ' ');

373 i‡(
ascii
)

375 ; 
i
 < 
≥r_löe
; i++)

376 
	`ds_put_f‹m©
(
ds
, " ");

377 
	`ds_put_f‹m©
(
ds
, "|");

378 
i
 = 0; i < 
°¨t
; i++)

379 
	`ds_put_f‹m©
(
ds
, " ");

380 ; 
i
 < 
íd
; i++) {

381 
c
 = 
buf
[
i
 - 
°¨t
];

382 
	`ds_put_ch¨
(
ds
, 
c
 >= 32 && c < 127 ? c : '.');

384 ; 
i
 < 
≥r_löe
; i++)

385 
	`ds_put_f‹m©
(
ds
, " ");

386 
	`ds_put_f‹m©
(
ds
, "|");

388 
	`ds_put_f‹m©
(
ds
, "\n");

390 
ofs
 +
n
;

391 
buf
 +
n
;

392 
size
 -
n
;

394 
	}
}

397 
	$ds_œ°
(c⁄° 
ds
 *ds)

399  
ds
->
Àngth
 > 0 ? (Ëds->
°rög
[ds->Àngth - 1] : 
EOF
;

400 
	}
}

403 
	$ds_chomp
(
ds
 *ds, 
c
)

405 i‡(
ds
->
Àngth
 > 0 && ds->
°rög
[ds->Àngth - 1] =(Ë
c
) {

406 
ds
->
°rög
[--ds->
Àngth
] = '\0';

408 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/dynamic-string.h

17 #i‚de‡
DYNAMIC_STRING_H


18 
	#DYNAMIC_STRING_H
 1

	)

20 
	~<°d¨g.h
>

21 
	~<°dboﬁ.h
>

22 
	~<°ddef.h
>

23 
	~<°döt.h
>

24 
	~<°dio.h
>

25 
	~"compûî.h
"

27 
	gtm
;

36 
	sds
 {

37 *
	m°rög
;

38 
size_t
 
	mÀngth
;

39 
size_t
 
	mÆloˇãd
;

42 
	#DS_EMPTY_INITIALIZER
 { 
NULL
, 0, 0 }

	)

44 
ds_öô
(
ds
 *);

45 
ds_˛ór
(
ds
 *);

46 
ds_åunˇã
(
ds
 *, 
size_t
 
√w_Àngth
);

47 
ds_ª£rve
(
ds
 *, 
size_t
 
mö_Àngth
);

48 *
ds_put_unöô
(
ds
 *, 
size_t
 
n
);

49 
ölöe
 
ds_put_ch¨
(
ds
 *, );

50 
ds_put_utf8
(
ds
 *, 
uc
);

51 
ds_put_ch¨_mu…ùÀ
(
ds
 *, , 
size_t
 
n
);

52 
ds_put_buf„r
(
ds
 *, c⁄° *, 
size_t
 
n
);

53 
ds_put_c°r
(
ds
 *, const *);

54 
ds_put_™d_‰ì_c°r
(
ds
 *, *);

55 
	$ds_put_f‹m©
(
ds
 *, c⁄° *, ...Ë
	`PRINTF_FORMAT
(2, 3);

56 
	$ds_put_f‹m©_vÆi°
(
ds
 *, c⁄° *, 
va_li°
)

57 
	`PRINTF_FORMAT
(2, 0);

58 
	`ds_put_¥öèbÀ
(
ds
 *, c⁄° *, 
size_t
);

59 
	$ds_put_°r·ime
(
ds
 *, c⁄° *, 
boﬁ
 
utc
)

60 
	`STRFTIME_FORMAT
(2);

61 
	`ds_put_hex_dump
(
ds
 *ds, c⁄° *
buf_
, 
size_t
 
size
,

62 
uöçå_t
 
ofs
, 
boﬁ
 
ascii
);

63 
	`ds_gë_löe
(
ds
 *, 
FILE
 *);

64 
	`ds_gë_¥ïro˚s£d_löe
(
ds
 *, 
FILE
 *);

65 
	`ds_gë_ã°_löe
(
ds
 *, 
FILE
 *);

67 *
	`ds_c°r
(
ds
 *);

68 c⁄° *
	`ds_c°r_ro
(c⁄° 
ds
 *);

69 *
	`ds_°ól_c°r
(
ds
 *);

70 
	`ds_de°roy
(
ds
 *);

71 
	`ds_sw≠
(
ds
 *, ds *);

73 
	`ds_œ°
(c⁄° 
ds
 *);

74 
	`ds_chomp
(
ds
 *, 
c
);

78 
	`ds_put_ch¨__
(
ds
 *, );

80 
ölöe
 

81 
	$ds_put_ch¨
(
ds
 *ds, 
c
)

83 i‡(
ds
->
Àngth
 < ds->
Æloˇãd
) {

84 
ds
->
°rög
[ds->
Àngth
++] = 
c
;

85 
ds
->
°rög
[ds->
Àngth
] = '\0';

87 
	`ds_put_ch¨__
(
ds
, 
c
);

89 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/entropy.c

16 
	~<c⁄fig.h
>

18 
	~"íå›y.h
"

20 
	~<î∫o.h
>

21 
	~<f˙é.h
>

22 
	~<uni°d.h
>

24 
	~"sockë-utû.h
"

25 
	~"vlog.h
"

27 
VLOG_DEFINE_THIS_MODULE
(
íå›y
);

29 c⁄° 
	guøndom
[] = "/dev/urandom";

34 
	$gë_íå›y
(*
buf„r
, 
size_t
 
n
)

36 
size_t
 
byãs_ªad
;

37 
îr‹
;

38 
fd
;

40 
fd
 = 
	`›í
(
uøndom
, 
O_RDONLY
);

41 i‡(
fd
 < 0) {

42 
	`VLOG_ERR
("%s: o≥¿Áûed (%s)", 
uøndom
, 
	`°ªº‹
(
î∫o
));

43  
î∫o
 ?Éºnÿ: 
EINVAL
;

46 
îr‹
 = 
	`ªad_fuŒy
(
fd
, 
buf„r
, 
n
, &
byãs_ªad
);

47 
	`˛o£
(
fd
);

49 i‡(
îr‹
) {

50 
	`VLOG_ERR
("%s:ÑódÉº‹ (%s)", 
uøndom
, 
	`ovs_ªtvÆ_to_°rög
(
îr‹
));

52  
îr‹
;

53 
	}
}

58 
	$gë_íå›y_‹_dõ
(*
buf„r
, 
size_t
 
n
)

60 
îr‹
 = 
	`gë_íå›y
(
buf„r
, 
n
);

61 i‡(
îr‹
) {

62 
	`VLOG_FATAL
("%s:ÑeadÉrror (%s)",

63 
uøndom
, 
	`ovs_ªtvÆ_to_°rög
(
îr‹
));

65 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/entropy.h

16 #i‚de‡
ENTROPY_H


17 
	#ENTROPY_H
 1

	)

19 
	~<°ddef.h
>

21 
gë_íå›y
(*, 
size_t
);

22 
gë_íå›y_‹_dõ
(*, 
size_t
);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/fatal-signal.c

16 
	~<c⁄fig.h
>

17 
	~"Áèl-sig«l.h
"

18 
	~<as£π.h
>

19 
	~<î∫o.h
>

20 
	~<sig«l.h
>

21 
	~<°dboﬁ.h
>

22 
	~<°dio.h
>

23 
	~<°döt.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~<uni°d.h
>

27 
	~"pﬁl-lo›.h
"

28 
	~"shash.h
"

29 
	~"s£t.h
"

30 
	~"sig«ls.h
"

31 
	~"sockë-utû.h
"

32 
	~"utû.h
"

33 
	~"vlog.h
"

35 
	~"ty≥-¥›s.h
"

37 #i‚de‡
SIG_ATOMIC_MAX


38 
	#SIG_ATOMIC_MAX
 
	`TYPE_MAXIMUM
(
sig_©omic_t
)

	)

41 
VLOG_DEFINE_THIS_MODULE
(
Áèl_sig«l
);

44 c⁄° 
	gÁèl_sig«ls
[] = { 
SIGTERM
, 
SIGINT
, 
SIGHUP
, 
SIGALRM
 };

47 
sig£t_t
 
	gÁèl_sig«l_£t
;

50 
	shook
 {

51 (*
	mhook_cb
)(*
	maux
);

52 (*
	mˇn˚l_cb
)(*
	maux
);

53 *
	maux
;

54 
boﬁ
 
	mrun_©_exô
;

56 
	#MAX_HOOKS
 32

	)

57 
hook
 
	ghooks
[
MAX_HOOKS
];

58 
size_t
 
	gn_hooks
;

60 
	gsig«l_fds
[2];

61 vﬁ©ûê
sig_©omic_t
 
	g°‹ed_sig_ƒ
 = 
SIG_ATOMIC_MAX
;

63 
Áèl_sig«l_öô
();

64 
©exô_h™dÀr
();

65 
ˇŒ_hooks
(
sig_ƒ
);

68 
	$Áèl_sig«l_öô
()

70 
boﬁ
 
öôed
 = 
Ál£
;

72 i‡(!
öôed
) {

73 
size_t
 
i
;

75 
öôed
 = 
åue
;

77 
	`xpùe_n⁄blockög
(
sig«l_fds
);

79 
	`sigem±y£t
(&
Áèl_sig«l_£t
);

80 
i
 = 0; i < 
	`ARRAY_SIZE
(
Áèl_sig«ls
); i++) {

81 
sig_ƒ
 = 
Áèl_sig«ls
[
i
];

82 
siga˘i⁄
 
ﬁd_ß
;

84 
	`sigadd£t
(&
Áèl_sig«l_£t
, 
sig_ƒ
);

85 
	`xsiga˘i⁄
(
sig_ƒ
, 
NULL
, &
ﬁd_ß
);

86 i‡(
ﬁd_ß
.
ß_h™dÀr
 =
SIG_DFL


87 && 
	`sig«l
(
sig_ƒ
, 
Áèl_sig«l_h™dÀr
Ë=
SIG_ERR
) {

88 
	`VLOG_FATAL
("sig«»Áûed (%s)", 
	`°ªº‹
(
î∫o
));

91 
	`©exô
(
©exô_h™dÀr
);

93 
	}
}

110 
Áèl_sig«l_add_hook
((*
hook_cb
)(*
aux
), (*
ˇn˚l_cb
)(*aux),

111 *
aux
, 
boﬁ
 
run_©_exô
)

113 
	`Áèl_sig«l_öô
();

115 
	`as£π
(
n_hooks
 < 
MAX_HOOKS
);

116 
hooks
[
n_hooks
].
hook_cb
 = hook_cb;

117 
hooks
[
n_hooks
].
ˇn˚l_cb
 = cancel_cb;

118 
hooks
[
n_hooks
].
aux
 =áux;

119 
hooks
[
n_hooks
].
run_©_exô
 =Ñun_at_exit;

120 
n_hooks
++;

121 
	}
}

133 
	$Áèl_sig«l_h™dÀr
(
sig_ƒ
)

135 
	`ign‹e
(
	`wrôe
(
sig«l_fds
[1], "", 1));

136 
°‹ed_sig_ƒ
 = 
sig_ƒ
;

137 
	}
}

151 
	$Áèl_sig«l_run
()

153 
sig_©omic_t
 
sig_ƒ
;

155 
	`Áèl_sig«l_öô
();

157 
sig_ƒ
 = 
°‹ed_sig_ƒ
;

158 i‡(
sig_ƒ
 !
SIG_ATOMIC_MAX
) {

159 
	`VLOG_WARN
("terminating with signal %d (%s)",

160 ()
sig_ƒ
, 
	`sig«l_«me
(sig_nr));

161 
	`ˇŒ_hooks
(
sig_ƒ
);

165 
	`sig«l
(
sig_ƒ
, 
SIG_DFL
);

166 
	`øi£
(
sig_ƒ
);

168 
	}
}

171 
	$Áèl_sig«l_waô
()

173 
	`Áèl_sig«l_öô
();

174 
	`pﬁl_fd_waô
(
sig«l_fds
[0], 
POLLIN
);

175 
	}
}

178 
	$©exô_h™dÀr
()

180 
	`ˇŒ_hooks
(0);

181 
	}
}

184 
	$ˇŒ_hooks
(
sig_ƒ
)

186 vﬁ©ûê
sig_©omic_t
 
ªcur£
 = 0;

187 i‡(!
ªcur£
) {

188 
size_t
 
i
;

190 
ªcur£
 = 1;

192 
i
 = 0; i < 
n_hooks
; i++) {

193 
hook
 *
h
 = &
hooks
[
i
];

194 i‡(
sig_ƒ
 || 
h
->
run_©_exô
) {

195 
h
->
	`hook_cb
(h->
aux
);

199 
	}
}

202 
s£t
 
	gfûes
 = 
SSET_INITIALIZER
(&
fûes
);

206 
boﬁ
 
	gadded_hook
;

208 
u∆ök_fûes
(*
aux
);

209 
ˇn˚l_fûes
(*
aux
);

210 
do_u∆ök_fûes
();

215 
	$Áèl_sig«l_add_fûe_to_u∆ök
(c⁄° *
fûe
)

217 i‡(!
added_hook
) {

218 
added_hook
 = 
åue
;

219 
	`Áèl_sig«l_add_hook
(
u∆ök_fûes
, 
ˇn˚l_fûes
, 
NULL
, 
åue
);

222 
	`s£t_add
(&
fûes
, 
fûe
);

223 
	}
}

228 
	$Áèl_sig«l_ªmove_fûe_to_u∆ök
(c⁄° *
fûe
)

230 
	`s£t_föd_™d_dñëe
(&
fûes
, 
fûe
);

231 
	}
}

236 
	$Áèl_sig«l_u∆ök_fûe_now
(c⁄° *
fûe
)

238 
îr‹
 = 
	`u∆ök
(
fûe
Ë? 
î∫o
 : 0;

239 i‡(
îr‹
) {

240 
	`VLOG_WARN
("couldÇŸ u∆ök \"%s\" (%s)", 
fûe
, 
	`°ªº‹
(
îr‹
));

243 
	`Áèl_sig«l_ªmove_fûe_to_u∆ök
(
fûe
);

245  
îr‹
;

246 
	}
}

249 
	$u∆ök_fûes
(*
aux
 
OVS_UNUSED
)

251 
	`do_u∆ök_fûes
();

252 
	}
}

255 
	$ˇn˚l_fûes
(*
aux
 
OVS_UNUSED
)

257 
	`s£t_˛ór
(&
fûes
);

258 
added_hook
 = 
Ál£
;

259 
	}
}

262 
	$do_u∆ök_fûes
()

264 c⁄° *
fûe
;

266 
	`SSET_FOR_EACH
 (
fûe
, &
fûes
) {

267 
	`u∆ök
(
fûe
);

269 
	}
}

280 
	$Áèl_sig«l_f‹k
()

282 
size_t
 
i
;

284 
i
 = 0; i < 
n_hooks
; i++) {

285 
hook
 *
h
 = &
hooks
[
i
];

286 i‡(
h
->
ˇn˚l_cb
) {

287 
h
->
	`ˇn˚l_cb
(h->
aux
);

290 
n_hooks
 = 0;

294 i‡(
°‹ed_sig_ƒ
 !
SIG_ATOMIC_MAX
) {

295 
	`øi£
(
°‹ed_sig_ƒ
);

297 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/fatal-signal.h

17 #i‚de‡
FATAL_SIGNAL_H


18 
	#FATAL_SIGNAL_H
 1

	)

20 
	~<°dboﬁ.h
>

23 
Áèl_sig«l_add_hook
((*
hook_cb
)(*
aux
),

24 (*
ˇn˚l_cb
)(*
aux
), *aux,

25 
boﬁ
 
run_©_exô
);

26 
	`Áèl_sig«l_f‹k
();

27 
	`Áèl_sig«l_run
();

28 
	`Áèl_sig«l_waô
();

34 
	`Áèl_sig«l_add_fûe_to_u∆ök
(const *);

35 
	`Áèl_sig«l_ªmove_fûe_to_u∆ök
(const *);

36 
	`Áèl_sig«l_u∆ök_fûe_now
(const *);

40 
	`Áèl_sig«l_h™dÀr
(
sig_ƒ
);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/flow.c

16 
	~<c⁄fig.h
>

17 
	~<sys/ty≥s.h
>

18 
	~"Êow.h
"

19 
	~<as£π.h
>

20 
	~<î∫o.h
>

21 
	~<öây≥s.h
>

22 
	~<limôs.h
>

23 
	~<√töë/ö.h
>

24 
	~<√töë/icmp6.h
>

25 
	~<√töë/ù6.h
>

26 
	~<°döt.h
>

27 
	~<°dlib.h
>

28 
	~<°rög.h
>

29 
	~"byã-‹dî.h
"

30 
	~"covîage.h
"

31 
	~"csum.h
"

32 
	~"dy«mic-°rög.h
"

33 
	~"hash.h
"

34 
	~"m©ch.h
"

35 
	~"oÂbuf.h
"

36 
	~"›íÊow/›íÊow.h
"

37 
	~"∑ckës.h
"

38 
	~"u«lig√d.h
"

39 
	~"vlog.h
"

41 
VLOG_DEFINE_THIS_MODULE
(
Êow
);

43 
COVERAGE_DEFINE
(
Êow_exåa˘
);

44 
COVERAGE_DEFINE
(
möiÊow_mÆloc
);

46 
¨p_ëh_hódî
 *

47 
	$puŒ_¨p
(
oÂbuf
 *
∑ckë
)

49  
	`oÂbuf_åy_puŒ
(
∑ckë
, 
ARP_ETH_HEADER_LEN
);

50 
	}
}

52 
ù_hódî
 *

53 
	$puŒ_ù
(
oÂbuf
 *
∑ckë
)

55 i‡(
∑ckë
->
size
 >
IP_HEADER_LEN
) {

56 
ù_hódî
 *
ù
 = 
∑ckë
->
d©a
;

57 
ù_Àn
 = 
	`IP_IHL
(
ù
->
ù_ihl_vî
) * 4;

58 i‡(
ù_Àn
 >
IP_HEADER_LEN
 && 
∑ckë
->
size
 >= ip_len) {

59  
	`oÂbuf_puŒ
(
∑ckë
, 
ù_Àn
);

62  
NULL
;

63 
	}
}

65 
t˝_hódî
 *

66 
	$puŒ_t˝
(
oÂbuf
 *
∑ckë
)

68 i‡(
∑ckë
->
size
 >
TCP_HEADER_LEN
) {

69 
t˝_hódî
 *
t˝
 = 
∑ckë
->
d©a
;

70 
t˝_Àn
 = 
	`TCP_OFFSET
(
t˝
->
t˝_˘l
) * 4;

71 i‡(
t˝_Àn
 >
TCP_HEADER_LEN
 && 
∑ckë
->
size
 >=Åcp_len) {

72  
	`oÂbuf_puŒ
(
∑ckë
, 
t˝_Àn
);

75  
NULL
;

76 
	}
}

78 
udp_hódî
 *

79 
	$puŒ_udp
(
oÂbuf
 *
∑ckë
)

81  
	`oÂbuf_åy_puŒ
(
∑ckë
, 
UDP_HEADER_LEN
);

82 
	}
}

84 
icmp_hódî
 *

85 
	$puŒ_icmp
(
oÂbuf
 *
∑ckë
)

87  
	`oÂbuf_åy_puŒ
(
∑ckë
, 
ICMP_HEADER_LEN
);

88 
	}
}

90 
icmp6_hdr
 *

91 
	$puŒ_icmpv6
(
oÂbuf
 *
∑ckë
)

93  
	`oÂbuf_åy_puŒ
(
∑ckë
, (
icmp6_hdr
));

94 
	}
}

97 
	$∑r£_vœn
(
oÂbuf
 *
b
, 
Êow
 *flow)

99 
	sqèg_¥efix
 {

100 
ovs_be16
 
ëh_ty≥
;

101 
ovs_be16
 
tci
;

104 i‡(
b
->
size
 >(
qèg_¥efix
Ë+ (
ovs_be16
)) {

105 
qèg_¥efix
 *
qp
 = 
	`oÂbuf_puŒ
(
b
,  *qp);

106 
Êow
->
vœn_tci
 = 
qp
->
tci
 | 
	`ht⁄s
(
VLAN_CFI
);

108 
	}
}

110 
ovs_be16


111 
	$∑r£_ëhîty≥
(
oÂbuf
 *
b
)

113 
Œc_¢≠_hódî
 *
Œc
;

114 
ovs_be16
 
¥Ÿo
;

116 
¥Ÿo
 = *(
ovs_be16
 *Ë
	`oÂbuf_puŒ
(
b
, Öroto);

117 i‡(
	`¡ohs
(
¥Ÿo
Ë>
ETH_TYPE_MIN
) {

118  
¥Ÿo
;

121 i‡(
b
->
size
 <  *
Œc
) {

122  
	`ht⁄s
(
FLOW_DL_TYPE_NONE
);

125 
Œc
 = 
b
->
d©a
;

126 i‡(
Œc
->Œc.
Œc_dßp
 !
LLC_DSAP_SNAP


127 || 
Œc
->Œc.
Œc_sßp
 !
LLC_SSAP_SNAP


128 || 
Œc
->Œc.
Œc_˙é
 !
LLC_CNTL_SNAP


129 || 
	`memcmp
(
Œc
->
¢≠
.
¢≠_‹g
, 
SNAP_ORG_ETHERNET
,

130  
Œc
->
¢≠
.
¢≠_‹g
)) {

131  
	`ht⁄s
(
FLOW_DL_TYPE_NONE
);

134 
	`oÂbuf_puŒ
(
b
,  *
Œc
);

135  
Œc
->
¢≠
.
¢≠_ty≥
;

136 
	}
}

139 
	$∑r£_ùv6
(
oÂbuf
 *
∑ckë
, 
Êow
 *flow)

141 c⁄° 
ù6_hdr
 *
nh
;

142 
ovs_be32
 
tc_Êow
;

143 
√xthdr
;

145 
nh
 = 
	`oÂbuf_åy_puŒ
(
∑ckë
,  *nh);

146 i‡(!
nh
) {

147  
EINVAL
;

150 
√xthdr
 = 
nh
->
ù6_nxt
;

152 
Êow
->
ùv6_§c
 = 
nh
->
ù6_§c
;

153 
Êow
->
ùv6_d°
 = 
nh
->
ù6_d°
;

155 
tc_Êow
 = 
	`gë_u«lig√d_be32
(&
nh
->
ù6_Êow
);

156 
Êow
->
nw_tos
 = 
	`¡ohl
(
tc_Êow
) >> 20;

157 
Êow
->
ùv6_œbñ
 = 
tc_Êow
 & 
	`ht⁄l
(
IPV6_LABEL_MASK
);

158 
Êow
->
nw_âl
 = 
nh
->
ù6_hlim
;

159 
Êow
->
nw_¥Ÿo
 = 
IPPROTO_NONE
;

162 i‡((
√xthdr
 !
IPPROTO_HOPOPTS
)

163 && (
√xthdr
 !
IPPROTO_ROUTING
)

164 && (
√xthdr
 !
IPPROTO_DSTOPTS
)

165 && (
√xthdr
 !
IPPROTO_AH
)

166 && (
√xthdr
 !
IPPROTO_FRAGMENT
)) {

178 i‡(
∑ckë
->
size
 < 8) {

179  
EINVAL
;

182 i‡((
√xthdr
 =
IPPROTO_HOPOPTS
)

183 || (
√xthdr
 =
IPPROTO_ROUTING
)

184 || (
√xthdr
 =
IPPROTO_DSTOPTS
)) {

187 c⁄° 
ù6_ext
 *
ext_hdr
 = 
∑ckë
->
d©a
;

188 
√xthdr
 = 
ext_hdr
->
ù6e_nxt
;

189 i‡(!
	`oÂbuf_åy_puŒ
(
∑ckë
, (
ext_hdr
->
ù6e_Àn
 + 1) * 8)) {

190  
EINVAL
;

192 } i‡(
√xthdr
 =
IPPROTO_AH
) {

197 c⁄° 
ù6_ext
 *
ext_hdr
 = 
∑ckë
->
d©a
;

198 
√xthdr
 = 
ext_hdr
->
ù6e_nxt
;

199 i‡(!
	`oÂbuf_åy_puŒ
(
∑ckë
, (
ext_hdr
->
ù6e_Àn
 + 2) * 4)) {

200  
EINVAL
;

202 } i‡(
√xthdr
 =
IPPROTO_FRAGMENT
) {

203 c⁄° 
ù6_‰ag
 *
‰ag_hdr
 = 
∑ckë
->
d©a
;

205 
√xthdr
 = 
‰ag_hdr
->
ù6f_nxt
;

206 i‡(!
	`oÂbuf_åy_puŒ
(
∑ckë
,  *
‰ag_hdr
)) {

207  
EINVAL
;

211 i‡(
‰ag_hdr
->
ù6f_ofÊg
 !
	`ht⁄s
(0)) {

212 i‡((
‰ag_hdr
->
ù6f_ofÊg
 & 
IP6F_OFF_MASK
Ë=
	`ht⁄s
(0)) {

213 
Êow
->
nw_‰ag
 = 
FLOW_NW_FRAG_ANY
;

215 
Êow
->
nw_‰ag
 |
FLOW_NW_FRAG_LATER
;

216 
√xthdr
 = 
IPPROTO_FRAGMENT
;

223 
Êow
->
nw_¥Ÿo
 = 
√xthdr
;

225 
	}
}

228 
	$∑r£_t˝
(
oÂbuf
 *
∑ckë
, oÂbu‡*
b
, 
Êow
 *flow)

230 c⁄° 
t˝_hódî
 *
t˝
 = 
	`puŒ_t˝
(
b
);

231 i‡(
t˝
) {

232 
Êow
->
ç_§c
 = 
t˝
->
t˝_§c
;

233 
Êow
->
ç_d°
 = 
t˝
->
t˝_d°
;

234 
∑ckë
->
l7
 = 
b
->
d©a
;

236 
	}
}

239 
	$∑r£_udp
(
oÂbuf
 *
∑ckë
, oÂbu‡*
b
, 
Êow
 *flow)

241 c⁄° 
udp_hódî
 *
udp
 = 
	`puŒ_udp
(
b
);

242 i‡(
udp
) {

243 
Êow
->
ç_§c
 = 
udp
->
udp_§c
;

244 
Êow
->
ç_d°
 = 
udp
->
udp_d°
;

245 
∑ckë
->
l7
 = 
b
->
d©a
;

247 
	}
}

249 
boﬁ


250 
	$∑r£_icmpv6
(
oÂbuf
 *
b
, 
Êow
 *flow)

252 c⁄° 
icmp6_hdr
 *
icmp
 = 
	`puŒ_icmpv6
(
b
);

254 i‡(!
icmp
) {

255  
Ál£
;

260 
Êow
->
ç_§c
 = 
	`ht⁄s
(
icmp
->
icmp6_ty≥
);

261 
Êow
->
ç_d°
 = 
	`ht⁄s
(
icmp
->
icmp6_code
);

263 i‡(
icmp
->
icmp6_code
 == 0 &&

264 (
icmp
->
icmp6_ty≥
 =
ND_NEIGHBOR_SOLICIT
 ||

265 
icmp
->
icmp6_ty≥
 =
ND_NEIGHBOR_ADVERT
)) {

266 c⁄° 
ö6_addr
 *
nd_èrgë
;

268 
nd_èrgë
 = 
	`oÂbuf_åy_puŒ
(
b
,  *nd_target);

269 i‡(!
nd_èrgë
) {

270  
Ál£
;

272 
Êow
->
nd_èrgë
 = *nd_target;

274 
b
->
size
 >= 8) {

277 c⁄° 
nd_›t_hdr
 *
nd_›t
 = 
b
->
d©a
;

278 
›t_Àn
 = 
nd_›t
->
nd_›t_Àn
 * 8;

280 i‡(!
›t_Àn
 || o±_À¿> 
b
->
size
) {

281 
övÆid
;

287 i‡(
nd_›t
->
nd_›t_ty≥
 =
ND_OPT_SOURCE_LINKADDR


288 && 
›t_Àn
 == 8) {

289 i‡(
	`ëh_addr_is_zîo
(
Êow
->
¨p_sha
)) {

290 
	`mem˝y
(
Êow
->
¨p_sha
, 
nd_›t
 + 1, 
ETH_ADDR_LEN
);

292 
övÆid
;

294 } i‡(
nd_›t
->
nd_›t_ty≥
 =
ND_OPT_TARGET_LINKADDR


295 && 
›t_Àn
 == 8) {

296 i‡(
	`ëh_addr_is_zîo
(
Êow
->
¨p_tha
)) {

297 
	`mem˝y
(
Êow
->
¨p_tha
, 
nd_›t
 + 1, 
ETH_ADDR_LEN
);

299 
övÆid
;

303 i‡(!
	`oÂbuf_åy_puŒ
(
b
, 
›t_Àn
)) {

304 
övÆid
;

309  
åue
;

311 
övÆid
:

312 
	`mem£t
(&
Êow
->
nd_èrgë
, 0, (flow->nd_target));

313 
	`mem£t
(
Êow
->
¨p_sha
, 0, (flow->arp_sha));

314 
	`mem£t
(
Êow
->
¨p_tha
, 0, (flow->arp_tha));

316  
Ál£
;

318 
	}
}

338 
	$Êow_exåa˘
(
oÂbuf
 *
∑ckë
, 
uöt32_t
 
skb_¥i‹ôy
, uöt32_à
skb_m¨k
,

339 c⁄° 
Êow_äl
 *
äl
, 
uöt16_t
 
oÂ_ö_p‹t
,

340 
Êow
 *flow)

342 
oÂbuf
 
b
 = *
∑ckë
;

343 
ëh_hódî
 *
ëh
;

345 
	`COVERAGE_INC
(
Êow_exåa˘
);

347 
	`mem£t
(
Êow
, 0,  *flow);

349 i‡(
äl
) {

350 
	`as£π
(
äl
 !&
Êow
->
tu¬ñ
);

351 
Êow
->
tu¬ñ
 = *
äl
;

353 
Êow
->
ö_p‹t
 = 
oÂ_ö_p‹t
;

354 
Êow
->
skb_¥i‹ôy
 = skb_priority;

355 
Êow
->
skb_m¨k
 = skb_mark;

357 
∑ckë
->
l2
 = 
b
.
d©a
;

358 
∑ckë
->
l3
 = 
NULL
;

359 
∑ckë
->
l4
 = 
NULL
;

360 
∑ckë
->
l7
 = 
NULL
;

362 i‡(
b
.
size
 <  *
ëh
) {

367 
ëh
 = 
b
.
d©a
;

368 
	`mem˝y
(
Êow
->
dl_§c
, 
ëh
->
ëh_§c
, 
ETH_ADDR_LEN
);

369 
	`mem˝y
(
Êow
->
dl_d°
, 
ëh
->
ëh_d°
, 
ETH_ADDR_LEN
);

372 
	`oÂbuf_puŒ
(&
b
, 
ETH_ADDR_LEN
 * 2);

373 i‡(
ëh
->
ëh_ty≥
 =
	`ht⁄s
(
ETH_TYPE_VLAN
)) {

374 
	`∑r£_vœn
(&
b
, 
Êow
);

376 
Êow
->
dl_ty≥
 = 
	`∑r£_ëhîty≥
(&
b
);

379 
∑ckë
->
l3
 = 
b
.
d©a
;

380 i‡(
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IP
)) {

381 c⁄° 
ù_hódî
 *
nh
 = 
	`puŒ_ù
(&
b
);

382 i‡(
nh
) {

383 
∑ckë
->
l4
 = 
b
.
d©a
;

385 
Êow
->
nw_§c
 = 
	`gë_u«lig√d_be32
(&
nh
->
ù_§c
);

386 
Êow
->
nw_d°
 = 
	`gë_u«lig√d_be32
(&
nh
->
ù_d°
);

387 
Êow
->
nw_¥Ÿo
 = 
nh
->
ù_¥Ÿo
;

389 
Êow
->
nw_tos
 = 
nh
->
ù_tos
;

390 i‡(
	`IP_IS_FRAGMENT
(
nh
->
ù_‰ag_off
)) {

391 
Êow
->
nw_‰ag
 = 
FLOW_NW_FRAG_ANY
;

392 i‡(
nh
->
ù_‰ag_off
 & 
	`ht⁄s
(
IP_FRAG_OFF_MASK
)) {

393 
Êow
->
nw_‰ag
 |
FLOW_NW_FRAG_LATER
;

396 
Êow
->
nw_âl
 = 
nh
->
ù_âl
;

398 i‡(!(
nh
->
ù_‰ag_off
 & 
	`ht⁄s
(
IP_FRAG_OFF_MASK
))) {

399 i‡(
Êow
->
nw_¥Ÿo
 =
IPPROTO_TCP
) {

400 
	`∑r£_t˝
(
∑ckë
, &
b
, 
Êow
);

401 } i‡(
Êow
->
nw_¥Ÿo
 =
IPPROTO_UDP
) {

402 
	`∑r£_udp
(
∑ckë
, &
b
, 
Êow
);

403 } i‡(
Êow
->
nw_¥Ÿo
 =
IPPROTO_ICMP
) {

404 c⁄° 
icmp_hódî
 *
icmp
 = 
	`puŒ_icmp
(&
b
);

405 i‡(
icmp
) {

406 
Êow
->
ç_§c
 = 
	`ht⁄s
(
icmp
->
icmp_ty≥
);

407 
Êow
->
ç_d°
 = 
	`ht⁄s
(
icmp
->
icmp_code
);

408 
∑ckë
->
l7
 = 
b
.
d©a
;

413 } i‡(
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IPV6
)) {

414 i‡(
	`∑r£_ùv6
(&
b
, 
Êow
)) {

418 
∑ckë
->
l4
 = 
b
.
d©a
;

419 i‡(
Êow
->
nw_¥Ÿo
 =
IPPROTO_TCP
) {

420 
	`∑r£_t˝
(
∑ckë
, &
b
, 
Êow
);

421 } i‡(
Êow
->
nw_¥Ÿo
 =
IPPROTO_UDP
) {

422 
	`∑r£_udp
(
∑ckë
, &
b
, 
Êow
);

423 } i‡(
Êow
->
nw_¥Ÿo
 =
IPPROTO_ICMPV6
) {

424 i‡(
	`∑r£_icmpv6
(&
b
, 
Êow
)) {

425 
∑ckë
->
l7
 = 
b
.
d©a
;

428 } i‡(
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_ARP
) ||

429 
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_RARP
)) {

430 c⁄° 
¨p_ëh_hódî
 *
¨p
 = 
	`puŒ_¨p
(&
b
);

431 i‡(
¨p
 &&áΩ->
¨_hrd
 =
	`ht⁄s
(1)

432 && 
¨p
->
¨_¥o
 =
	`ht⁄s
(
ETH_TYPE_IP
)

433 && 
¨p
->
¨_h 
 =
ETH_ADDR_LEN


434 && 
¨p
->
¨_∂n
 == 4) {

436 i‡(
	`¡ohs
(
¨p
->
¨_›
) <= 0xff) {

437 
Êow
->
nw_¥Ÿo
 = 
	`¡ohs
(
¨p
->
¨_›
);

440 
Êow
->
nw_§c
 = 
¨p
->
¨_•a
;

441 
Êow
->
nw_d°
 = 
¨p
->
¨_ça
;

442 
	`mem˝y
(
Êow
->
¨p_sha
, 
¨p
->
¨_sha
, 
ETH_ADDR_LEN
);

443 
	`mem˝y
(
Êow
->
¨p_tha
, 
¨p
->
¨_tha
, 
ETH_ADDR_LEN
);

446 
	}
}

451 
	$Êow_zîo_wûdˇrds
(
Êow
 *Êow, c⁄° 
Êow_wûdˇrds
 *
wûdˇrds
)

453 
uöt32_t
 *
Êow_u32
 = (uöt32_à*Ë
Êow
;

454 c⁄° 
uöt32_t
 *
wc_u32
 = (c⁄° uöt32_à*Ë&
wûdˇrds
->
masks
;

455 
size_t
 
i
;

457 
i
 = 0; i < 
FLOW_U32S
; i++) {

458 
Êow_u32
[
i
] &
wc_u32
[i];

460 
	}
}

464 
	$Êow_gë_mëad©a
(c⁄° 
Êow
 *Êow, 
Êow_mëad©a
 *
fmd
)

466 
	`BUILD_ASSERT_DECL
(
FLOW_WC_SEQ
 == 18);

468 
fmd
->
tun_id
 = 
Êow
->
tu¬ñ
.tun_id;

469 
fmd
->
mëad©a
 = 
Êow
->metadata;

470 
	`mem˝y
(
fmd
->
ªgs
, 
Êow
->regs,  fmd->regs);

471 
fmd
->
ö_p‹t
 = 
Êow
->in_port;

472 
	}
}

475 
	$Êow_to_°rög
(c⁄° 
Êow
 *flow)

477 
ds
 d†
DS_EMPTY_INITIALIZER
;

478 
	`Êow_f‹m©
(&
ds
, 
Êow
);

479  
	`ds_c°r
(&
ds
);

480 
	}
}

483 
	$Êow_tun_Êag_to_°rög
(
uöt32_t
 
Êags
)

485 
Êags
) {

486 
FLOW_TNL_F_DONT_FRAGMENT
:

488 
FLOW_TNL_F_CSUM
:

490 
FLOW_TNL_F_KEY
:

493  
NULL
;

495 
	}
}

498 
f‹m©_Êags
(
ds
 *ds, c⁄° *(*
bô_to_°rög
)(
uöt32_t
),

499 
uöt32_t
 
Êags
, 
dñ
)

501 
uöt32_t
 
	gbad
 = 0;

503 i‡(!
	gÊags
) {

506 
	gÊags
) {

507 
uöt32_t
 
	gbô
 = 
rightmo°_1bô
(
Êags
);

508 c⁄° *
	gs
;

510 
	gs
 = 
bô_to_°rög
(
bô
);

511 i‡(
	gs
) {

512 
ds_put_f‹m©
(
ds
, "%s%c", 
s
, 
dñ
);

514 
	gbad
 |
bô
;

517 
	gÊags
 &~
bô
;

520 i‡(
	gbad
) {

521 
ds_put_f‹m©
(
ds
, "0x%"
PRIx32
"%c", 
bad
, 
dñ
);

523 
ds_chomp
(
ds
, 
dñ
);

527 
	$Êow_f‹m©
(
ds
 *ds, c⁄° 
Êow
 *flow)

529 
m©ch
 match;

531 
	`m©ch_wc_öô
(&
m©ch
, 
Êow
);

532 
	`m©ch_f‹m©
(&
m©ch
, 
ds
, 
OFP_DEFAULT_PRIORITY
);

533 
	}
}

536 
	$Êow_¥öt
(
FILE
 *
°ªam
, c⁄° 
Êow
 *flow)

538 *
s
 = 
	`Êow_to_°rög
(
Êow
);

539 
	`Âuts
(
s
, 
°ªam
);

540 
	`‰ì
(
s
);

541 
	}
}

547 
	$Êow_wûdˇrds_öô_ˇtchÆl
(
Êow_wûdˇrds
 *
wc
)

549 
	`mem£t
(&
wc
->
masks
, 0,  wc->masks);

550 
	}
}

555 
	$Êow_wûdˇrds_öô_exa˘
(
Êow_wûdˇrds
 *
wc
)

557 
	`mem£t
(&
wc
->
masks
, 0xff,  wc->masks);

558 
	`mem£t
(
wc
->
masks
.
zîos
, 0,  wc->masks.zeros);

559 
	}
}

563 
boﬁ


564 
	$Êow_wûdˇrds_is_ˇtchÆl
(c⁄° 
Êow_wûdˇrds
 *
wc
)

566 c⁄° 
uöt32_t
 *
wc_u32
 = (c⁄° uöt32_à*Ë&
wc
->
masks
;

567 
size_t
 
i
;

569 
i
 = 0; i < 
FLOW_U32S
; i++) {

570 i‡(
wc_u32
[
i
]) {

571  
Ál£
;

574  
åue
;

575 
	}
}

581 
	$Êow_wûdˇrds_comböe
(
Êow_wûdˇrds
 *
d°
,

582 c⁄° 
Êow_wûdˇrds
 *
§c1
,

583 c⁄° 
Êow_wûdˇrds
 *
§c2
)

585 
uöt32_t
 *
d°_u32
 = (uöt32_à*Ë&
d°
->
masks
;

586 c⁄° 
uöt32_t
 *
§c1_u32
 = (c⁄° uöt32_à*Ë&
§c1
->
masks
;

587 c⁄° 
uöt32_t
 *
§c2_u32
 = (c⁄° uöt32_à*Ë&
§c2
->
masks
;

588 
size_t
 
i
;

590 
i
 = 0; i < 
FLOW_U32S
; i++) {

591 
d°_u32
[
i
] = 
§c1_u32
[i] & 
§c2_u32
[i];

593 
	}
}

596 
uöt32_t


597 
	$Êow_wûdˇrds_hash
(c⁄° 
Êow_wûdˇrds
 *
wc
, 
uöt32_t
 
basis
)

599  
	`Êow_hash
(&
wc
->
masks
, 
basis
);;

600 
	}
}

604 
boﬁ


605 
	$Êow_wûdˇrds_equÆ
(c⁄° 
Êow_wûdˇrds
 *
a
,

606 c⁄° 
Êow_wûdˇrds
 *
b
)

608  
	`Êow_equÆ
(&
a
->
masks
, &
b
->masks);

609 
	}
}

613 
boﬁ


614 
	$Êow_wûdˇrds_has_exåa
(c⁄° 
Êow_wûdˇrds
 *
a
,

615 c⁄° 
Êow_wûdˇrds
 *
b
)

617 c⁄° 
uöt32_t
 *
a_u32
 = (c⁄° uöt32_à*Ë&
a
->
masks
;

618 c⁄° 
uöt32_t
 *
b_u32
 = (c⁄° uöt32_à*Ë&
b
->
masks
;

619 
size_t
 
i
;

621 
i
 = 0; i < 
FLOW_U32S
; i++) {

622 i‡((
a_u32
[
i
] & 
b_u32
[i]) != b_u32[i]) {

623  
åue
;

626  
Ál£
;

627 
	}
}

631 
boﬁ


632 
	$Êow_equÆ_ex˚±
(c⁄° 
Êow
 *
a
, c⁄° Êow *
b
,

633 c⁄° 
Êow_wûdˇrds
 *
wc
)

635 c⁄° 
uöt32_t
 *
a_u32
 = (c⁄° uöt32_à*Ë
a
;

636 c⁄° 
uöt32_t
 *
b_u32
 = (c⁄° uöt32_à*Ë
b
;

637 c⁄° 
uöt32_t
 *
wc_u32
 = (c⁄° uöt32_à*Ë&
wc
->
masks
;

638 
size_t
 
i
;

640 
i
 = 0; i < 
FLOW_U32S
; i++) {

641 i‡((
a_u32
[
i
] ^ 
b_u32
[i]Ë& 
wc_u32
[i]) {

642  
Ál£
;

645  
åue
;

646 
	}
}

651 
	$Êow_wûdˇrds_£t_ªg_mask
(
Êow_wûdˇrds
 *
wc
, 
idx
, 
uöt32_t
 
mask
)

653 
wc
->
masks
.
ªgs
[
idx
] = 
mask
;

654 
	}
}

657 
uöt32_t


658 
	$Êow_hash_symmëric_l4
(c⁄° 
Êow
 *Êow, 
uöt32_t
 
basis
)

662 
ovs_be32
 
ùv4_addr
;

663 
ö6_addr
 
ùv6_addr
;

665 
ovs_be16
 
ëh_ty≥
;

666 
ovs_be16
 
vœn_tci
;

667 
ovs_be16
 
ç_p‹t
;

668 
uöt8_t
 
ëh_addr
[
ETH_ADDR_LEN
];

669 
uöt8_t
 
ù_¥Ÿo
;

670 } 
fõlds
;

672 
i
;

674 
	`mem£t
(&
fõlds
, 0,  fields);

675 
i
 = 0; i < 
ETH_ADDR_LEN
; i++) {

676 
fõlds
.
ëh_addr
[
i
] = 
Êow
->
dl_§c
[i] ^ flow->
dl_d°
[i];

678 
fõlds
.
vœn_tci
 = 
Êow
->vœn_tcò& 
	`ht⁄s
(
VLAN_VID_MASK
);

679 
fõlds
.
ëh_ty≥
 = 
Êow
->
dl_ty≥
;

683 i‡(
fõlds
.
ëh_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IP
)) {

684 
fõlds
.
ùv4_addr
 = 
Êow
->
nw_§c
 ^ flow->
nw_d°
;

685 
fõlds
.
ù_¥Ÿo
 = 
Êow
->
nw_¥Ÿo
;

686 i‡(
fõlds
.
ù_¥Ÿo
 =
IPPROTO_TCP
) {

687 
fõlds
.
ç_p‹t
 = 
Êow
->
ç_§c
 ^ flow->
ç_d°
;

689 } i‡(
fõlds
.
ëh_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IPV6
)) {

690 c⁄° 
uöt8_t
 *
a
 = &
Êow
->
ùv6_§c
.
s6_addr
[0];

691 c⁄° 
uöt8_t
 *
b
 = &
Êow
->
ùv6_d°
.
s6_addr
[0];

692 
uöt8_t
 *
ùv6_addr
 = &
fõlds
.ùv6_addr.
s6_addr
[0];

694 
i
=0; i<16; i++) {

695 
ùv6_addr
[
i
] = 
a
[i] ^ 
b
[i];

697 
fõlds
.
ù_¥Ÿo
 = 
Êow
->
nw_¥Ÿo
;

698 i‡(
fõlds
.
ù_¥Ÿo
 =
IPPROTO_TCP
) {

699 
fõlds
.
ç_p‹t
 = 
Êow
->
ç_§c
 ^ flow->
ç_d°
;

702  
	`hash_byãs
(&
fõlds
,  fõlds, 
basis
);

703 
	}
}

706 
uöt32_t


707 
	$Êow_hash_fõlds
(c⁄° 
Êow
 *Êow, 
nx_hash_fõlds
 
fõlds
,

708 
uöt16_t
 
basis
)

710 
fõlds
) {

712 
NX_HASH_FIELDS_ETH_SRC
:

713  
	`hash_byãs
(
Êow
->
dl_§c
,  flow->dl_§c, 
basis
);

715 
NX_HASH_FIELDS_SYMMETRIC_L4
:

716  
	`Êow_hash_symmëric_l4
(
Êow
, 
basis
);

719 
	`NOT_REACHED
();

720 
	}
}

724 
	$Êow_hash_fõlds_to_°r
(
nx_hash_fõlds
 
fõlds
)

726 
fõlds
) {

727 
NX_HASH_FIELDS_ETH_SRC
:  "eth_src";

728 
NX_HASH_FIELDS_SYMMETRIC_L4
:  "symmetric_l4";

731 
	}
}

734 
boﬁ


735 
	$Êow_hash_fõlds_vÆid
(
nx_hash_fõlds
 
fõlds
)

737  
fõlds
 =
NX_HASH_FIELDS_ETH_SRC


738 || 
fõlds
 =
NX_HASH_FIELDS_SYMMETRIC_L4
;

739 
	}
}

753 
	$Êow_£t_dl_vœn
(
Êow
 *Êow, 
ovs_be16
 
vid
)

755 i‡(
vid
 =
	`ht⁄s
(
OFP10_VLAN_NONE
)) {

756 
Êow
->
vœn_tci
 = 
	`ht⁄s
(0);

758 
vid
 &
	`ht⁄s
(
VLAN_VID_MASK
);

759 
Êow
->
vœn_tci
 &~
	`ht⁄s
(
VLAN_VID_MASK
);

760 
Êow
->
vœn_tci
 |
	`ht⁄s
(
VLAN_CFI
Ë| 
vid
;

762 
	}
}

768 
	$Êow_£t_vœn_vid
(
Êow
 *Êow, 
ovs_be16
 
vid
)

770 
ovs_be16
 
mask
 = 
	`ht⁄s
(
VLAN_VID_MASK
 | 
VLAN_CFI
);

771 
Êow
->
vœn_tci
 &~
mask
;

772 
Êow
->
vœn_tci
 |
vid
 & 
mask
;

773 
	}
}

783 
	$Êow_£t_vœn_p˝
(
Êow
 *Êow, 
uöt8_t
 
p˝
)

785 
p˝
 &= 0x07;

786 
Êow
->
vœn_tci
 &~
	`ht⁄s
(
VLAN_PCP_MASK
);

787 
Êow
->
vœn_tci
 |
	`ht⁄s
((
p˝
 << 
VLAN_PCP_SHIFT
Ë| 
VLAN_CFI
);

788 
	}
}

797 
	$Êow_compo£
(
oÂbuf
 *
b
, c⁄° 
Êow
 *flow)

799 
	`ëh_compo£
(
b
, 
Êow
->
dl_d°
, flow->
dl_§c
, 
	`¡ohs
(Êow->
dl_ty≥
), 0);

800 i‡(
Êow
->
dl_ty≥
 =
	`ht⁄s
(
FLOW_DL_TYPE_NONE
)) {

801 
ëh_hódî
 *
ëh
 = 
b
->
l2
;

802 
ëh
->
ëh_ty≥
 = 
	`ht⁄s
(
b
->
size
);

806 i‡(
Êow
->
vœn_tci
 & 
	`ht⁄s
(
VLAN_CFI
)) {

807 
	`ëh_push_vœn
(
b
, 
Êow
->
vœn_tci
);

810 i‡(
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IP
)) {

811 
ù_hódî
 *
ù
;

813 
b
->
l3
 = 
ù
 = 
	`oÂbuf_put_zîos
(b,  *ip);

814 
ù
->
ù_ihl_vî
 = 
	`IP_IHL_VER
(5, 4);

815 
ù
->
ù_tos
 = 
Êow
->
nw_tos
;

816 
ù
->
ù_¥Ÿo
 = 
Êow
->
nw_¥Ÿo
;

817 
ù
->
ù_§c
 = 
Êow
->
nw_§c
;

818 
ù
->
ù_d°
 = 
Êow
->
nw_d°
;

820 i‡(
Êow
->
nw_‰ag
 & 
FLOW_NW_FRAG_ANY
) {

821 
ù
->
ù_‰ag_off
 |
	`ht⁄s
(
IP_MORE_FRAGMENTS
);

822 i‡(
Êow
->
nw_‰ag
 & 
FLOW_NW_FRAG_LATER
) {

823 
ù
->
ù_‰ag_off
 |
	`ht⁄s
(100);

826 i‡(!(
Êow
->
nw_‰ag
 & 
FLOW_NW_FRAG_ANY
)

827 || !(
Êow
->
nw_‰ag
 & 
FLOW_NW_FRAG_LATER
)) {

828 i‡(
Êow
->
nw_¥Ÿo
 =
IPPROTO_TCP
) {

829 
t˝_hódî
 *
t˝
;

831 
b
->
l4
 = 
t˝
 = 
	`oÂbuf_put_zîos
(b,  *tcp);

832 
t˝
->
t˝_§c
 = 
Êow
->
ç_§c
;

833 
t˝
->
t˝_d°
 = 
Êow
->
ç_d°
;

834 
t˝
->
t˝_˘l
 = 
	`TCP_CTL
(0, 5);

835 } i‡(
Êow
->
nw_¥Ÿo
 =
IPPROTO_UDP
) {

836 
udp_hódî
 *
udp
;

838 
b
->
l4
 = 
udp
 = 
	`oÂbuf_put_zîos
(b,  *udp);

839 
udp
->
udp_§c
 = 
Êow
->
ç_§c
;

840 
udp
->
udp_d°
 = 
Êow
->
ç_d°
;

841 } i‡(
Êow
->
nw_¥Ÿo
 =
IPPROTO_ICMP
) {

842 
icmp_hódî
 *
icmp
;

844 
b
->
l4
 = 
icmp
 = 
	`oÂbuf_put_zîos
(b,  *icmp);

845 
icmp
->
icmp_ty≥
 = 
	`¡ohs
(
Êow
->
ç_§c
);

846 
icmp
->
icmp_code
 = 
	`¡ohs
(
Êow
->
ç_d°
);

847 
icmp
->
icmp_csum
 = 
	`csum
(icmp, 
ICMP_HEADER_LEN
);

851 
ù
 = 
b
->
l3
;

852 
ù
->
ù_tŸ_Àn
 = 
	`ht⁄s
((
uöt8_t
 *Ë
b
->
d©a
 + b->
size


853 - (
uöt8_t
 *Ë
b
->
l3
);

854 
ù
->
ù_csum
 = 
	`csum
(ip,  *ip);

855 } i‡(
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IPV6
)) {

857 } i‡(
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_ARP
) ||

858 
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_RARP
)) {

859 
¨p_ëh_hódî
 *
¨p
;

861 
b
->
l3
 = 
¨p
 = 
	`oÂbuf_put_zîos
(b,  *arp);

862 
¨p
->
¨_hrd
 = 
	`ht⁄s
(1);

863 
¨p
->
¨_¥o
 = 
	`ht⁄s
(
ETH_TYPE_IP
);

864 
¨p
->
¨_h 
 = 
ETH_ADDR_LEN
;

865 
¨p
->
¨_∂n
 = 4;

866 
¨p
->
¨_›
 = 
	`ht⁄s
(
Êow
->
nw_¥Ÿo
);

868 i‡(
Êow
->
nw_¥Ÿo
 =
ARP_OP_REQUEST
 ||

869 
Êow
->
nw_¥Ÿo
 =
ARP_OP_REPLY
) {

870 
¨p
->
¨_•a
 = 
Êow
->
nw_§c
;

871 
¨p
->
¨_ça
 = 
Êow
->
nw_d°
;

872 
	`mem˝y
(
¨p
->
¨_sha
, 
Êow
->
¨p_sha
, 
ETH_ADDR_LEN
);

873 
	`mem˝y
(
¨p
->
¨_tha
, 
Êow
->
¨p_tha
, 
ETH_ADDR_LEN
);

876 
	}
}

881 
	$möiÊow_n_vÆues
(c⁄° 
möiÊow
 *
Êow
)

883 
n
, 
i
;

885 
n
 = 0;

886 
i
 = 0; i < 
MINI_N_MAPS
; i++) {

887 
n
 +
	`p›cou¡
(
Êow
->
m≠
[
i
]);

889  
n
;

890 
	}
}

892 
uöt32_t
 *

893 
	$möiÊow_Æloc_vÆues
(
möiÊow
 *
Êow
, 
n
)

895 i‡(
n
 <
MINI_N_INLINE
) {

896  
Êow
->
ölöe_vÆues
;

898 
	`COVERAGE_INC
(
möiÊow_mÆloc
);

899  
	`xmÆloc
(
n
 *  *
Êow
->
vÆues
);

901 
	}
}

906 
	$möiÊow_öô
(
möiÊow
 *
d°
, c⁄° 
Êow
 *
§c
)

908 c⁄° 
uöt32_t
 *
§c_u32
 = (c⁄° uöt32_à*Ë
§c
;

909 
ofs
;

910 
i
;

911 
n
;

914 
n
 = 0;

915 
	`mem£t
(
d°
->
m≠
, 0,  dst->map);

916 
i
 = 0; i < 
FLOW_U32S
; i++) {

917 i‡(
§c_u32
[
i
]) {

918 
d°
->
m≠
[
i
 / 32] |= 1u << (i % 32);

919 
n
++;

924 
d°
->
vÆues
 = 
	`möiÊow_Æloc_vÆues
(d°, 
n
);

925 
ofs
 = 0;

926 
i
 = 0; i < 
MINI_N_MAPS
; i++) {

927 
uöt32_t
 
m≠
;

929 
m≠
 = 
d°
->m≠[
i
]; m≠; m≠ = 
	`zîo_rightmo°_1bô
(map)) {

930 
d°
->
vÆues
[
ofs
++] = 
§c_u32
[
	`øw_˘z
(
m≠
Ë+ 
i
 * 32];

933 
	}
}

938 
	$möiÊow_˛⁄e
(
möiÊow
 *
d°
, c⁄° möiÊow *
§c
)

940 
n
 = 
	`möiÊow_n_vÆues
(
§c
);

941 
	`mem˝y
(
d°
->
m≠
, 
§c
->map,  dst->map);

942 
d°
->
vÆues
 = 
	`möiÊow_Æloc_vÆues
(d°, 
n
);

943 
	`mem˝y
(
d°
->
vÆues
, 
§c
->vÆues, 
n
 *  *dst->values);

944 
	}
}

949 
	$möiÊow_de°roy
(
möiÊow
 *
Êow
)

951 i‡(
Êow
->
vÆues
 !Êow->
ölöe_vÆues
) {

952 
	`‰ì
(
Êow
->
vÆues
);

954 
	}
}

958 
	$möiÊow_ex∑nd
(c⁄° 
möiÊow
 *
§c
, 
Êow
 *
d°
)

960 
uöt32_t
 *
d°_u32
 = (uöt32_à*Ë
d°
;

961 
ofs
;

962 
i
;

964 
	`mem£t
(
d°_u32
, 0,  *
d°
);

966 
ofs
 = 0;

967 
i
 = 0; i < 
MINI_N_MAPS
; i++) {

968 
uöt32_t
 
m≠
;

970 
m≠
 = 
§c
->m≠[
i
]; m≠; m≠ = 
	`zîo_rightmo°_1bô
(map)) {

971 
d°_u32
[
	`øw_˘z
(
m≠
Ë+ 
i
 * 32] = 
§c
->
vÆues
[
ofs
++];

974 
	}
}

976 c⁄° 
uöt32_t
 *

977 
	$möiÊow_gë__
(c⁄° 
möiÊow
 *
Êow
, 
u32_ofs
)

979 i‡(!(
Êow
->
m≠
[
u32_ofs
 / 32] & (1u << (u32_ofs % 32)))) {

980 c⁄° 
uöt32_t
 
zîo
 = 0;

981  &
zîo
;

983 c⁄° 
uöt32_t
 *
p
 = 
Êow
->
vÆues
;

985 
	`BUILD_ASSERT
(
MINI_N_MAPS
 == 2);

986 i‡(
u32_ofs
 < 32) {

987 
p
 +
	`p›cou¡
(
Êow
->
m≠
[0] & ((1u << 
u32_ofs
) - 1));

989 
p
 +
	`p›cou¡
(
Êow
->
m≠
[0]);

990 
p
 +
	`p›cou¡
(
Êow
->
m≠
[1] & ((1u << (
u32_ofs
 - 32)) - 1));

992  
p
;

994 
	}
}

998 
uöt32_t


999 
	$möiÊow_gë
(c⁄° 
möiÊow
 *
Êow
, 
u32_ofs
)

1001  *
	`möiÊow_gë__
(
Êow
, 
u32_ofs
);

1002 
	}
}

1006 
ovs_be16


1007 
	$möiÊow_gë_be16
(c⁄° 
möiÊow
 *
Êow
, 
u8_ofs
)

1009 c⁄° 
uöt32_t
 *
u32p
 = 
	`möiÊow_gë__
(
Êow
, 
u8_ofs
 / 4);

1010 c⁄° 
ovs_be16
 *
be16p
 = (c⁄° ovs_be16 *Ë
u32p
;

1011  
be16p
[
u8_ofs
 % 4 != 0];

1012 
	}
}

1016 
uöt16_t


1017 
	$möiÊow_gë_vid
(c⁄° 
möiÊow
 *
Êow
)

1019 
ovs_be16
 
tci
 = 
	`möiÊow_gë_be16
(
Êow
, 
	`off£tof
(Êow, 
vœn_tci
));

1020  
	`vœn_tci_to_vid
(
tci
);

1021 
	}
}

1024 
boﬁ


1025 
	$möiÊow_equÆ
(c⁄° 
möiÊow
 *
a
, c⁄° möiÊow *
b
)

1027 
i
;

1029 
i
 = 0; i < 
MINI_N_MAPS
; i++) {

1030 i‡(
a
->
m≠
[
i
] !
b
->map[i]) {

1031  
Ál£
;

1035  !
	`memcmp
(
a
->
vÆues
, 
b
->values,

1036 
	`möiÊow_n_vÆues
(
a
Ë*  *a->
vÆues
);

1037 
	}
}

1041 
boﬁ


1042 
	$möiÊow_equÆ_ö_möimask
(c⁄° 
möiÊow
 *
a
, c⁄° möiÊow *
b
,

1043 c⁄° 
möimask
 *
mask
)

1045 c⁄° 
uöt32_t
 *
p
;

1046 
i
;

1048 
p
 = 
mask
->
masks
.
vÆues
;

1049 
i
 = 0; i < 
MINI_N_MAPS
; i++) {

1050 
uöt32_t
 
m≠
;

1052 
m≠
 = 
mask
->
masks
.m≠[
i
]; m≠; m≠ = 
	`zîo_rightmo°_1bô
(map)) {

1053 
ofs
 = 
	`øw_˘z
(
m≠
Ë+ 
i
 * 32;

1055 i‡((
	`möiÊow_gë
(
a
, 
ofs
Ë^ möiÊow_gë(
b
, ofs)Ë& *
p
) {

1056  
Ál£
;

1058 
p
++;

1062  
åue
;

1063 
	}
}

1067 
boﬁ


1068 
	$möiÊow_equÆ_Êow_ö_möimask
(c⁄° 
möiÊow
 *
a
, c⁄° 
Êow
 *
b
,

1069 c⁄° 
möimask
 *
mask
)

1071 c⁄° 
uöt32_t
 *
b_u32
 = (c⁄° uöt32_à*Ë
b
;

1072 c⁄° 
uöt32_t
 *
p
;

1073 
i
;

1075 
p
 = 
mask
->
masks
.
vÆues
;

1076 
i
 = 0; i < 
MINI_N_MAPS
; i++) {

1077 
uöt32_t
 
m≠
;

1079 
m≠
 = 
mask
->
masks
.m≠[
i
]; m≠; m≠ = 
	`zîo_rightmo°_1bô
(map)) {

1080 
ofs
 = 
	`øw_˘z
(
m≠
Ë+ 
i
 * 32;

1082 i‡((
	`möiÊow_gë
(
a
, 
ofs
Ë^ 
b_u32
[ofs]Ë& *
p
) {

1083  
Ál£
;

1085 
p
++;

1089  
åue
;

1090 
	}
}

1093 
uöt32_t


1094 
	$möiÊow_hash
(c⁄° 
möiÊow
 *
Êow
, 
uöt32_t
 
basis
)

1096 
	`BUILD_ASSERT_DECL
(
MINI_N_MAPS
 == 2);

1097  
	`hash_3w‹ds
(
Êow
->
m≠
[0], flow->map[1],

1098 
	`hash_w‹ds
(
Êow
->
vÆues
, 
	`möiÊow_n_vÆues
(flow),

1099 
basis
));

1100 
	}
}

1107 
uöt32_t


1108 
	$möiÊow_hash_ö_möimask
(c⁄° 
möiÊow
 *
Êow
,

1109 c⁄° 
möimask
 *
mask
, 
uöt32_t
 
basis
)

1111 c⁄° 
uöt32_t
 *
p
 = 
mask
->
masks
.
vÆues
;

1112 
uöt32_t
 
hash
;

1113 
i
;

1115 
hash
 = 
basis
;

1116 
i
 = 0; i < 
MINI_N_MAPS
; i++) {

1117 
uöt32_t
 
m≠
;

1119 
m≠
 = 
mask
->
masks
.m≠[
i
]; m≠; m≠ = 
	`zîo_rightmo°_1bô
(map)) {

1120 
ofs
 = 
	`øw_˘z
(
m≠
Ë+ 
i
 * 32;

1122 
hash
 = 
	`mhash_add
(hash, 
	`möiÊow_gë
(
Êow
, 
ofs
Ë& *
p
);

1123 
p
++;

1127  
	`mhash_föish
(
hash
, 
p
 - 
mask
->
masks
.
vÆues
);

1128 
	}
}

1135 
uöt32_t


1136 
	$Êow_hash_ö_möimask
(c⁄° 
Êow
 *Êow, c⁄° 
möimask
 *
mask
,

1137 
uöt32_t
 
basis
)

1139 c⁄° 
uöt32_t
 *
Êow_u32
 = (c⁄° uöt32_à*Ë
Êow
;

1140 c⁄° 
uöt32_t
 *
p
 = 
mask
->
masks
.
vÆues
;

1141 
uöt32_t
 
hash
;

1142 
i
;

1144 
hash
 = 
basis
;

1145 
i
 = 0; i < 
MINI_N_MAPS
; i++) {

1146 
uöt32_t
 
m≠
;

1148 
m≠
 = 
mask
->
masks
.m≠[
i
]; m≠; m≠ = 
	`zîo_rightmo°_1bô
(map)) {

1149 
ofs
 = 
	`øw_˘z
(
m≠
Ë+ 
i
 * 32;

1151 
hash
 = 
	`mhash_add
(hash, 
Êow_u32
[
ofs
] & *
p
);

1152 
p
++;

1156  
	`mhash_föish
(
hash
, 
p
 - 
mask
->
masks
.
vÆues
);

1157 
	}
}

1162 
	$möimask_öô
(
möimask
 *
mask
, c⁄° 
Êow_wûdˇrds
 *
wc
)

1164 
	`möiÊow_öô
(&
mask
->
masks
, &
wc
->masks);

1165 
	}
}

1170 
	$möimask_˛⁄e
(
möimask
 *
d°
, c⁄° möimask *
§c
)

1172 
	`möiÊow_˛⁄e
(&
d°
->
masks
, &
§c
->masks);

1173 
	}
}

1180 
	$möimask_comböe
(
möimask
 *
d°_
,

1181 c⁄° 
möimask
 *
a_
, c⁄° möimask *
b_
,

1182 
uöt32_t
 
°‹age
[
FLOW_U32S
])

1184 
möiÊow
 *
d°
 = &
d°_
->
masks
;

1185 c⁄° 
möiÊow
 *
a
 = &
a_
->
masks
;

1186 c⁄° 
möiÊow
 *
b
 = &
b_
->
masks
;

1187 
i
, 
n
;

1189 
n
 = 0;

1190 
d°
->
vÆues
 = 
°‹age
;

1191 
i
 = 0; i < 
MINI_N_MAPS
; i++) {

1192 
uöt32_t
 
m≠
;

1194 
d°
->
m≠
[
i
] = 0;

1195 
m≠
 = 
a
->m≠[
i
] & 
b
->map[i]; map;

1196 
m≠
 = 
	`zîo_rightmo°_1bô
(map)) {

1197 
ofs
 = 
	`øw_˘z
(
m≠
Ë+ 
i
 * 32;

1198 
uöt32_t
 
mask
 = 
	`möiÊow_gë
(
a
, 
ofs
Ë& möiÊow_gë(
b
, ofs);

1200 i‡(
mask
) {

1201 
d°
->
m≠
[
i
] |
	`rightmo°_1bô
(map);

1202 
d°
->
vÆues
[
n
++] = 
mask
;

1206 
	}
}

1211 
	$möimask_de°roy
(
möimask
 *
mask
)

1213 
	`möiÊow_de°roy
(&
mask
->
masks
);

1214 
	}
}

1218 
	$möimask_ex∑nd
(c⁄° 
möimask
 *
mask
, 
Êow_wûdˇrds
 *
wc
)

1220 
	`möiÊow_ex∑nd
(&
mask
->
masks
, &
wc
->masks);

1221 
	}
}

1225 
uöt32_t


1226 
	$möimask_gë
(c⁄° 
möimask
 *
mask
, 
u32_ofs
)

1228  
	`möiÊow_gë
(&
mask
->
masks
, 
u32_ofs
);

1229 
	}
}

1233 
uöt16_t


1234 
	$möimask_gë_vid_mask
(c⁄° 
möimask
 *
mask
)

1236  
	`möiÊow_gë_vid
(&
mask
->
masks
);

1237 
	}
}

1240 
boﬁ


1241 
	$möimask_equÆ
(c⁄° 
möimask
 *
a
, c⁄° möimask *
b
)

1243  
	`möiÊow_equÆ
(&
a
->
masks
, &
b
->masks);

1244 
	}
}

1247 
uöt32_t


1248 
	$möimask_hash
(c⁄° 
möimask
 *
mask
, 
uöt32_t
 
basis
)

1250  
	`möiÊow_hash
(&
mask
->
masks
, 
basis
);

1251 
	}
}

1255 
boﬁ


1256 
	$möimask_has_exåa
(c⁄° 
möimask
 *
a_
, c⁄° möimask *
b_
)

1258 c⁄° 
möiÊow
 *
a
 = &
a_
->
masks
;

1259 c⁄° 
möiÊow
 *
b
 = &
b_
->
masks
;

1260 
i
;

1262 
i
 = 0; i < 
MINI_N_MAPS
; i++) {

1263 
uöt32_t
 
m≠
;

1265 
m≠
 = 
a
->m≠[
i
] | 
b
->map[i]; map;

1266 
m≠
 = 
	`zîo_rightmo°_1bô
(map)) {

1267 
ofs
 = 
	`øw_˘z
(
m≠
Ë+ 
i
 * 32;

1268 
uöt32_t
 
a_u32
 = 
	`möiÊow_gë
(
a
, 
ofs
);

1269 
uöt32_t
 
b_u32
 = 
	`möiÊow_gë
(
b
, 
ofs
);

1271 i‡((
a_u32
 & 
b_u32
) != b_u32) {

1272  
åue
;

1277  
Ál£
;

1278 
	}
}

1282 
boﬁ


1283 
	$möimask_is_ˇtchÆl
(c⁄° 
möimask
 *
mask_
)

1285 c⁄° 
möiÊow
 *
mask
 = &
mask_
->
masks
;

1287 
	`BUILD_ASSERT
(
MINI_N_MAPS
 == 2);

1288  !(
mask
->
m≠
[0] | mask->map[1]);

1289 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/flow.h

16 #i‚de‡
FLOW_H


17 
	#FLOW_H
 1

	)

19 
	~<sys/ty≥s.h
>

20 
	~<√töë/ö.h
>

21 
	~<°dboﬁ.h
>

22 
	~<°döt.h
>

23 
	~<°rög.h
>

24 
	~"›íÊow/nicúa-ext.h
"

25 
	~"›íÊow/›íÊow.h
"

26 
	~"hash.h
"

27 
	~"utû.h
"

29 
	gdpif_Êow_°©s
;

30 
	gds
;

31 
	gÊow_wûdˇrds
;

32 
	gmöiÊow
;

33 
	gmöimask
;

34 
	goÂbuf
;

39 
	#FLOW_WC_SEQ
 18

	)

41 
	#FLOW_N_REGS
 8

	)

42 
BUILD_ASSERT_DECL
(
FLOW_N_REGS
 <
NXM_NX_MAX_REGS
);

46 
	#FLOW_DL_TYPE_NONE
 0x5ff

	)

49 
	#FLOW_NW_FRAG_ANY
 (1 << 0Ë

	)

50 
	#FLOW_NW_FRAG_LATER
 (1 << 1Ë

	)

51 
	#FLOW_NW_FRAG_MASK
 (
FLOW_NW_FRAG_ANY
 | 
FLOW_NW_FRAG_LATER
)

	)

53 
BUILD_ASSERT_DECL
(
FLOW_NW_FRAG_ANY
 =
NX_IP_FRAG_ANY
);

54 
BUILD_ASSERT_DECL
(
FLOW_NW_FRAG_LATER
 =
NX_IP_FRAG_LATER
);

56 
	#FLOW_TNL_F_DONT_FRAGMENT
 (1 << 0)

	)

57 
	#FLOW_TNL_F_CSUM
 (1 << 1)

	)

58 
	#FLOW_TNL_F_KEY
 (1 << 2)

	)

60 c⁄° *
Êow_tun_Êag_to_°rög
(
uöt32_t
 
Êags
);

62 
	sÊow_äl
 {

63 
ovs_be64
 
	mtun_id
;

64 
ovs_be32
 
	mù_§c
;

65 
ovs_be32
 
	mù_d°
;

66 
uöt16_t
 
	mÊags
;

67 
uöt8_t
 
	mù_tos
;

68 
uöt8_t
 
	mù_âl
;

71 
	sÊow
 {

72 
Êow_äl
 
	mtu¬ñ
;

73 
ovs_be64
 
	mmëad©a
;

74 
ö6_addr
 
	mùv6_§c
;

75 
ö6_addr
 
	mùv6_d°
;

76 
ö6_addr
 
	mnd_èrgë
;

77 
uöt32_t
 
	mskb_¥i‹ôy
;

78 
uöt32_t
 
	mªgs
[
FLOW_N_REGS
];

79 
ovs_be32
 
	mnw_§c
;

80 
ovs_be32
 
	mnw_d°
;

81 
ovs_be32
 
	mùv6_œbñ
;

82 
uöt16_t
 
	mö_p‹t
;

83 
uöt32_t
 
	mskb_m¨k
;

84 
ovs_be16
 
	mvœn_tci
;

85 
ovs_be16
 
	mdl_ty≥
;

86 
ovs_be16
 
	mç_§c
;

87 
ovs_be16
 
	mç_d°
;

88 
uöt8_t
 
	mdl_§c
[6];

89 
uöt8_t
 
	mdl_d°
[6];

90 
uöt8_t
 
	mnw_¥Ÿo
;

91 
uöt8_t
 
	mnw_tos
;

92 
uöt8_t
 
	m¨p_sha
[6];

93 
uöt8_t
 
	m¨p_tha
[6];

94 
uöt8_t
 
	mnw_âl
;

95 
uöt8_t
 
	mnw_‰ag
;

96 
uöt8_t
 
	mzîos
[2];

98 
BUILD_ASSERT_DECL
((
Êow
) % 4 == 0);

100 
	#FLOW_U32S
 ((
Êow
Ë/ 4)

	)

103 
BUILD_ASSERT_DECL
((
Êow
Ë=(
Êow_äl
) + 152 &&

104 
FLOW_WC_SEQ
 == 18);

107 
	sÊow_mëad©a
 {

108 
ovs_be64
 
	mtun_id
;

109 
ovs_be64
 
	mmëad©a
;

110 
uöt32_t
 
	mªgs
[
FLOW_N_REGS
];

111 
uöt16_t
 
	mö_p‹t
;

114 
Êow_exåa˘
(
oÂbuf
 *, 
uöt32_t
 
¥i‹ôy
, uöt32_à
m¨k
,

115 c⁄° 
Êow_äl
 *, 
uöt16_t
 
ö_p‹t
, 
Êow
 *);

116 
Êow_zîo_wûdˇrds
(
Êow
 *, c⁄° 
Êow_wûdˇrds
 *);

117 
Êow_gë_mëad©a
(c⁄° 
Êow
 *, 
Êow_mëad©a
 *);

119 *
Êow_to_°rög
(c⁄° 
Êow
 *);

120 
f‹m©_Êags
(
ds
 *ds, c⁄° *(*
bô_to_°rög
)(
uöt32_t
),

121 
uöt32_t
 
Êags
, 
dñ
);

123 
Êow_f‹m©
(
ds
 *, c⁄° 
Êow
 *);

124 
Êow_¥öt
(
FILE
 *, c⁄° 
Êow
 *);

125 
ölöe
 
Êow_com∑ª_3way
(c⁄° 
Êow
 *, const flow *);

126 
ölöe
 
boﬁ
 
Êow_equÆ
(c⁄° 
Êow
 *, const flow *);

127 
ölöe
 
size_t
 
Êow_hash
(c⁄° 
Êow
 *, 
uöt32_t
 
basis
);

129 
Êow_£t_dl_vœn
(
Êow
 *, 
ovs_be16
 
vid
);

130 
Êow_£t_vœn_vid
(
Êow
 *, 
ovs_be16
 
vid
);

131 
Êow_£t_vœn_p˝
(
Êow
 *, 
uöt8_t
 
p˝
);

133 
Êow_compo£
(
oÂbuf
 *, c⁄° 
Êow
 *);

135 
ölöe
 

136 
	$Êow_com∑ª_3way
(c⁄° 
Êow
 *
a
, c⁄° Êow *
b
)

138  
	`memcmp
(
a
, 
b
,  *a);

139 
	}
}

141 
ölöe
 
boﬁ


142 
	$Êow_equÆ
(c⁄° 
Êow
 *
a
, c⁄° Êow *
b
)

144  !
	`Êow_com∑ª_3way
(
a
, 
b
);

145 
	}
}

147 
ölöe
 
size_t


148 
	$Êow_hash
(c⁄° 
Êow
 *Êow, 
uöt32_t
 
basis
)

150  
	`hash_w‹ds
((c⁄° 
uöt32_t
 *Ë
Êow
,  *Êow / 4, 
basis
);

151 
	}
}

153 
uöt32_t
 
Êow_hash_ö_möimask
(c⁄° 
Êow
 *, c⁄° 
möimask
 *,

154 
uöt32_t
 
basis
);

161 
	sÊow_wûdˇrds
 {

162 
Êow
 
	mmasks
;

165 
Êow_wûdˇrds_öô_ˇtchÆl
(
Êow_wûdˇrds
 *);

166 
Êow_wûdˇrds_öô_exa˘
(
Êow_wûdˇrds
 *);

168 
boﬁ
 
Êow_wûdˇrds_is_ˇtchÆl
(c⁄° 
Êow_wûdˇrds
 *);

170 
Êow_wûdˇrds_£t_ªg_mask
(
Êow_wûdˇrds
 *,

171 
idx
, 
uöt32_t
 
mask
);

173 
Êow_wûdˇrds_comböe
(
Êow_wûdˇrds
 *
d°
,

174 c⁄° 
Êow_wûdˇrds
 *
§c1
,

175 c⁄° 
Êow_wûdˇrds
 *
§c2
);

176 
boﬁ
 
Êow_wûdˇrds_has_exåa
(c⁄° 
Êow_wûdˇrds
 *,

177 c⁄° 
Êow_wûdˇrds
 *);

179 
uöt32_t
 
Êow_wûdˇrds_hash
(c⁄° 
Êow_wûdˇrds
 *, uöt32_à
basis
);

180 
boﬁ
 
Êow_wûdˇrds_equÆ
(c⁄° 
Êow_wûdˇrds
 *,

181 c⁄° 
Êow_wûdˇrds
 *);

182 
uöt32_t
 
Êow_hash_symmëric_l4
(c⁄° 
Êow
 *Êow, uöt32_à
basis
);

184 
uöt32_t
 
Êow_hash_fõlds
(c⁄° 
Êow
 *, 
nx_hash_fõlds
,

185 
uöt16_t
 
basis
);

186 c⁄° *
Êow_hash_fõlds_to_°r
(
nx_hash_fõlds
);

187 
boﬁ
 
Êow_hash_fõlds_vÆid
(
nx_hash_fõlds
);

189 
boﬁ
 
Êow_equÆ_ex˚±
(c⁄° 
Êow
 *
a
, c⁄° Êow *
b
,

190 c⁄° 
Êow_wûdˇrds
 *);

194 
	#MINI_N_INLINE
 ((*Ë=4 ? 7 : 8)

	)

195 
	#MINI_N_MAPS
 
	`DIV_ROUND_UP
(
FLOW_U32S
, 32)

	)

228 
	smöiÊow
 {

229 
uöt32_t
 *
	mvÆues
;

230 
uöt32_t
 
	mölöe_vÆues
[
MINI_N_INLINE
];

231 
uöt32_t
 
	mm≠
[
MINI_N_MAPS
];

234 
möiÊow_öô
(
möiÊow
 *, c⁄° 
Êow
 *);

235 
möiÊow_˛⁄e
(
möiÊow
 *, const miniflow *);

236 
möiÊow_de°roy
(
möiÊow
 *);

238 
möiÊow_ex∑nd
(c⁄° 
möiÊow
 *, 
Êow
 *);

240 
uöt32_t
 
möiÊow_gë
(c⁄° 
möiÊow
 *, 
u32_ofs
);

241 
uöt16_t
 
möiÊow_gë_vid
(c⁄° 
möiÊow
 *);

243 
boﬁ
 
möiÊow_equÆ
(c⁄° 
möiÊow
 *
a
, c⁄° möiÊow *
b
);

244 
boﬁ
 
möiÊow_equÆ_ö_möimask
(c⁄° 
möiÊow
 *
a
,

245 c⁄° 
möiÊow
 *
b
,

246 c⁄° 
möimask
 *);

247 
boﬁ
 
möiÊow_equÆ_Êow_ö_möimask
(c⁄° 
möiÊow
 *
a
,

248 c⁄° 
Êow
 *
b
,

249 c⁄° 
möimask
 *);

250 
uöt32_t
 
möiÊow_hash
(c⁄° 
möiÊow
 *, uöt32_à
basis
);

251 
uöt32_t
 
möiÊow_hash_ö_möimask
(c⁄° 
möiÊow
 *,

252 c⁄° 
möimask
 *, 
uöt32_t
 
basis
);

259 
	smöimask
 {

260 
möiÊow
 
	mmasks
;

263 
möimask_öô
(
möimask
 *, c⁄° 
Êow_wûdˇrds
 *);

264 
möimask_˛⁄e
(
möimask
 *, const minimask *);

265 
möimask_comböe
(
möimask
 *
d°
,

266 c⁄° 
möimask
 *
a
, c⁄° möimask *
b
,

267 
uöt32_t
 
°‹age
[
FLOW_U32S
]);

268 
möimask_de°roy
(
möimask
 *);

270 
möimask_ex∑nd
(c⁄° 
möimask
 *, 
Êow_wûdˇrds
 *);

272 
uöt32_t
 
möimask_gë
(c⁄° 
möimask
 *, 
u32_ofs
);

273 
uöt16_t
 
möimask_gë_vid_mask
(c⁄° 
möimask
 *);

275 
boﬁ
 
möimask_equÆ
(c⁄° 
möimask
 *
a
, c⁄° möimask *
b
);

276 
uöt32_t
 
möimask_hash
(c⁄° 
möimask
 *, uöt32_à
basis
);

278 
boﬁ
 
möimask_has_exåa
(c⁄° 
möimask
 *, const minimask *);

279 
boﬁ
 
möimask_is_ˇtchÆl
(c⁄° 
möimask
 *);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/hash.c

16 
	~<c⁄fig.h
>

17 
	~"hash.h
"

18 
	~<°rög.h
>

19 
	~"u«lig√d.h
"

23 
uöt32_t


24 
	$hash_w‹ds
(c⁄° 
uöt32_t
 *
p
, 
size_t
 
n
, uöt32_à
basis
)

26 
uöt32_t
 
a
, 
b
, 
c
;

28 
a
 = 
b
 = 
c
 = 0xdódbì‡+ (((
uöt32_t
Ë
n
Ë<< 2Ë+ 
basis
;

30 
n
 > 3) {

31 
a
 +
p
[0];

32 
b
 +
p
[1];

33 
c
 +
p
[2];

34 
	`hash_mix
(&
a
, &
b
, &
c
);

35 
n
 -= 3;

36 
p
 += 3;

39 
n
) {

41 
c
 +
p
[2];

44 
b
 +
p
[1];

47 
a
 +
p
[0];

48 
	`hash_föÆ
(&
a
, &
b
, &
c
);

53  
c
;

54 
	}
}

57 
uöt32_t


58 
	$hash_3w‹ds
(
uöt32_t
 
a
, uöt32_à
b
, uöt32_à
c
)

60 
a
 += 0xdeadbeef;

61 
b
 += 0xdeadbeef;

62 
c
 += 0xdeadbeef;

63 
	`hash_föÆ
(&
a
, &
b
, &
c
);

64  
c
;

65 
	}
}

68 
uöt32_t


69 
	$hash_2w‹ds
(
uöt32_t
 
a
, uöt32_à
b
)

71  
	`hash_3w‹ds
(
a
, 
b
, 0);

72 
	}
}

75 
uöt32_t


76 
	$hash_byãs
(c⁄° *
p_
, 
size_t
 
n
, 
uöt32_t
 
basis
)

78 c⁄° 
uöt8_t
 *
p
 = 
p_
;

79 
uöt32_t
 
a
, 
b
, 
c
;

81 
a
 = 
b
 = 
c
 = 0xdódbì‡+ 
n
 + 
basis
;

83 
n
 >= 12) {

84 
a
 +
	`gë_u«lig√d_u32
((
uöt32_t
 *Ë
p
);

85 
b
 +
	`gë_u«lig√d_u32
((
uöt32_t
 *Ë(
p
 + 4));

86 
c
 +
	`gë_u«lig√d_u32
((
uöt32_t
 *Ë(
p
 + 8));

87 
	`hash_mix
(&
a
, &
b
, &
c
);

88 
n
 -= 12;

89 
p
 += 12;

92 i‡(
n
) {

93 
uöt32_t
 
tmp
[3];

95 
tmp
[0] =Åmp[1] =Åmp[2] = 0;

96 
	`mem˝y
(
tmp
, 
p
, 
n
);

97 
a
 +
tmp
[0];

98 
b
 +
tmp
[1];

99 
c
 +
tmp
[2];

100 
	`hash_föÆ
(&
a
, &
b
, &
c
);

103  
c
;

104 
	}
}

108 
uöt32_t


109 
	$mhash_w‹ds
(c⁄° 
uöt32_t
 
p
[], 
size_t
 
n_w‹ds
, uöt32_à
basis
)

111 
uöt32_t
 
hash
;

112 
size_t
 
i
;

114 
hash
 = 
basis
;

115 
i
 = 0; i < 
n_w‹ds
; i++) {

116 
hash
 = 
	`mhash_add
(hash, 
p
[
i
]);

118  
	`mhash_föish
(
hash
, 
n_w‹ds
);

119 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/hash.h

16 #i‚de‡
HASH_H


17 
	#HASH_H
 1

	)

19 
	~<°dboﬁ.h
>

20 
	~<°ddef.h
>

21 
	~<°döt.h
>

22 
	~<°rög.h
>

23 
	~"utû.h
"

25 #ifde‡
__˝lu•lus


32 
ölöe
 
uöt32_t


33 
hash_rŸ
(
uöt32_t
 
x
, 
k
)

35  (
x
 << 
k
) | (x >> (32 - k));

38 
ölöe
 

39 
hash_mix
(
uöt32_t
 *
a
, uöt32_à*
b
, uöt32_à*
c
)

41 *
a
 -*
c
; *®^
hash_rŸ
(*c, 4); *¯+*
b
;

42 *
b
 -*
a
; *b ^
hash_rŸ
(*a, 6); *®+*
c
;

43 *
c
 -*
b
; *¯^
hash_rŸ
(*b, 8); *b +*
a
;

44 *
a
 -*
c
; *®^
hash_rŸ
(*c, 16); *¯+*
b
;

45 *
b
 -*
a
; *b ^
hash_rŸ
(*a, 19); *®+*
c
;

46 *
c
 -*
b
; *¯^
hash_rŸ
(*b, 4); *b +*
a
;

49 
ölöe
 

50 
hash_föÆ
(
uöt32_t
 *
a
, uöt32_à*
b
, uöt32_à*
c
)

52 *
c
 ^*
b
; *¯-
hash_rŸ
(*b, 14);

53 *
a
 ^*
c
; *®-
hash_rŸ
(*c, 11);

54 *
b
 ^*
a
; *b -
hash_rŸ
(*a, 25);

55 *
c
 ^*
b
; *¯-
hash_rŸ
(*b, 16);

56 *
a
 ^*
c
; *®-
hash_rŸ
(*c, 4);

57 *
b
 ^*
a
; *b -
hash_rŸ
(*a, 14);

58 *
c
 ^*
b
; *¯-
hash_rŸ
(*b, 24);

61 
uöt32_t
 
hash_w‹ds
(c⁄° uöt32_à*, 
size_t
 
n_w‹d
, uöt32_à
basis
);

62 
uöt32_t
 
hash_2w‹ds
(uint32_t, uint32_t);

63 
uöt32_t
 
hash_3w‹ds
(uint32_t, uint32_t, uint32_t);

64 
uöt32_t
 
hash_byãs
(c⁄° *, 
size_t
 
n_byãs
, uöt32_à
basis
);

66 
ölöe
 
uöt32_t
 
hash_°rög
(c⁄° *
s
, uöt32_à
basis
)

68  
hash_byãs
(
s
, 
°æí
(s), 
basis
);

77 
ölöe
 
uöt32_t
 
hash_öt
(uöt32_à
x
, uöt32_à
basis
)

79 
x
 -= x << 6;

80 
x
 ^= x >> 17;

81 
x
 -= x << 9;

82 
x
 ^= x << 4;

83 
x
 +
basis
;

84 
x
 -= x << 3;

85 
x
 ^= x << 10;

86 
x
 ^= x >> 15;

87  
x
;

92 
ölöe
 
uöt32_t
 
hash_boﬁón
(
boﬁ
 
x
, uöt32_à
basis
)

94 c⁄° 
uöt32_t
 
P0
 = 0xc2b73583;

95 c⁄° 
uöt32_t
 
P1
 = 0xe90f1258;

96  (
x
 ? 
P0
 : 
P1
Ë^ 
hash_rŸ
(
basis
, 1);

99 
ölöe
 
uöt32_t
 
hash_doubÀ
(
x
, uöt32_à
basis
)

101 
uöt32_t
 
vÆue
[2];

102 
BUILD_ASSERT_DECL
( 
x
 = 
vÆue
);

104 
mem˝y
(
vÆue
, &
x
,  value);

105  
hash_3w‹ds
(
vÆue
[0], vÆue[1], 
basis
);

108 
ölöe
 
uöt32_t
 
hash_poöãr
(c⁄° *
p
, uöt32_à
basis
)

118  
hash_öt
((
uöt32_t
Ë(
uöçå_t
Ë
p
, 
basis
);

139 
uöt32_t
 
mhash_w‹ds
(c⁄° uöt32_à
d©a
[], 
size_t
 
n_w‹ds
, uöt32_à
basis
);

141 
ölöe
 
uöt32_t
 
mhash_add
(uöt32_à
hash
, uöt32_à
d©a
)

143 
d©a
 *= 0xcc9e2d51;

144 
d©a
 = 
hash_rŸ
(data, 15);

145 
d©a
 *= 0x1b873593;

147 
hash
 ^
d©a
;

148 
hash
 = 
hash_rŸ
(hash, 13);

149  
hash
 * 5 + 0xe6546b64;

152 
ölöe
 
uöt32_t
 
mhash_föish
(uöt32_à
hash
, 
size_t
 
n
)

154 
hash
 ^
n
 * 4;

155 
hash
 ^= hash >> 16;

156 
hash
 *= 0x85ebca6b;

157 
hash
 ^= hash >> 13;

158 
hash
 *= 0xc2b2ae35;

159 
hash
 ^= hash >> 16;

160  
hash
;

163 #ifde‡
__˝lu•lus


	@/home/lsch/mytest/openvswitch-1.9.0/lib/heap.c

17 
	~<c⁄fig.h
>

18 
	~"hóp.h
"

19 
	~<°dlib.h
>

20 
	~"utû.h
"

22 
put_node
(
hóp
 *, 
hóp_node
 *, 
size_t
 
i
);

23 
sw≠_nodes
(
hóp
 *, 
size_t
 
i
, size_à
j
);

24 
boﬁ
 
Êﬂt_up
(
hóp
 *, 
size_t
 
i
);

25 
Êﬂt_down
(
hóp
 *, 
size_t
 
i
);

26 
Êﬂt_up_‹_down
(
hóp
 *, 
size_t
 
i
);

30 
	$hóp_öô
(
hóp
 *heap)

32 
hóp
->
¨øy
 = 
NULL
;

33 
hóp
->
n
 = 0;

34 
hóp
->
Æloˇãd
 = 0;

35 
	}
}

40 
	$hóp_de°roy
(
hóp
 *heap)

42 i‡(
hóp
) {

43 
	`‰ì
(
hóp
->
¨øy
);

45 
	}
}

50 
	$hóp_˛ór
(
hóp
 *heap)

52 
hóp
->
n
 = 0;

53 
	}
}

57 
	$hóp_sw≠
(
hóp
 *
a
, hó∞*
b
)

59 
hóp
 
tmp
 = *
a
;

60 *
a
 = *
b
;

61 *
b
 = 
tmp
;

62 
	}
}

68 
	$hóp_ö£π
(
hóp
 *hóp, 
hóp_node
 *
node
, 
uöt32_t
 
¥i‹ôy
)

70 
	`hóp_øw_ö£π
(
hóp
, 
node
, 
¥i‹ôy
);

71 
	`Êﬂt_up
(
hóp
, 
node
->
idx
);

72 
	}
}

78 
	$hóp_ªmove
(
hóp
 *hóp, 
hóp_node
 *
node
)

80 
size_t
 
i
 = 
node
->
idx
;

82 
	`hóp_øw_ªmove
(
hóp
, 
node
);

83 i‡(
i
 <
hóp
->
n
) {

84 
	`Êﬂt_up_‹_down
(
hóp
, 
i
);

86 
	}
}

92 
	$hóp_ch™ge
(
hóp
 *hóp, 
hóp_node
 *
node
, 
uöt32_t
 
¥i‹ôy
)

94 
	`hóp_øw_ch™ge
(
node
, 
¥i‹ôy
);

95 
	`Êﬂt_up_‹_down
(
hóp
, 
node
->
idx
);

96 
	}
}

107 
	$hóp_øw_ö£π
(
hóp
 *hóp, 
hóp_node
 *
node
, 
uöt32_t
 
¥i‹ôy
)

109 i‡(
hóp
->
n
 >hóp->
Æloˇãd
) {

110 
hóp
->
Æloˇãd
 = hóp->
n
 == 0 ? 1 : 2 * heap->n;

111 
hóp
->
¨øy
 = 
	`xªÆloc
(heap->array,

112 (
hóp
->
Æloˇãd
 + 1Ë*  *hóp->
¨øy
);

115 
	`put_node
(
hóp
, 
node
, ++hóp->
n
);

116 
node
->
¥i‹ôy
 =Öriority;

117 
	}
}

127 
	$hóp_øw_ªmove
(
hóp
 *hóp, 
hóp_node
 *
node
)

129 
size_t
 
i
 = 
node
->
idx
;

130 i‡(
i
 < 
hóp
->
n
) {

131 
	`put_node
(
hóp
, hóp->
¨øy
[hóp->
n
], 
i
);

133 
hóp
->
n
--;

134 
	}
}

142 
	$hóp_ªbuûd
(
hóp
 *heap)

144 
size_t
 
i
;

146 
i
 = 
hóp
->
n
 / 2; i >= 1; i--) {

147 
	`Êﬂt_down
(
hóp
, 
i
);

149 
	}
}

152 
	$put_node
(
hóp
 *hóp, 
hóp_node
 *
node
, 
size_t
 
i
)

154 
hóp
->
¨øy
[
i
] = 
node
;

155 
node
->
idx
 = 
i
;

156 
	}
}

159 
	$sw≠_nodes
(
hóp
 *hóp, 
size_t
 
i
, size_à
j
)

161 
hóp_node
 *
ﬁd_i
 = 
hóp
->
¨øy
[
i
];

162 
hóp_node
 *
ﬁd_j
 = 
hóp
->
¨øy
[
j
];

164 
	`put_node
(
hóp
, 
ﬁd_j
, 
i
);

165 
	`put_node
(
hóp
, 
ﬁd_i
, 
j
);

166 
	}
}

168 
boﬁ


169 
	$Êﬂt_up
(
hóp
 *hóp, 
size_t
 
i
)

171 
boﬁ
 
moved
 = 
Ál£
;

172 
size_t
 
∑ª¡
;

174 ; 
i
 > 1; i = 
∑ª¡
) {

175 
∑ª¡
 = 
	`hóp_∑ª¡__
(
i
);

176 i‡(
hóp
->
¨øy
[
∑ª¡
]->
¥i‹ôy
 >hóp->¨øy[
i
]->priority) {

179 
	`sw≠_nodes
(
hóp
, 
∑ª¡
, 
i
);

180 
moved
 = 
åue
;

182  
moved
;

183 
	}
}

186 
	$Êﬂt_down
(
hóp
 *hóp, 
size_t
 
i
)

188 !
	`hóp_is_Àaf__
(
hóp
, 
i
)) {

189 
size_t
 
À·
 = 
	`hóp_À·__
(
i
);

190 
size_t
 
right
 = 
	`hóp_right__
(
i
);

191 
size_t
 
max
 = 
i
;

193 i‡(
hóp
->
¨øy
[
À·
]->
¥i‹ôy
 > hóp->¨øy[
max
]->priority) {

194 
max
 = 
À·
;

196 i‡(
right
 <
hóp
->
n


197 && 
hóp
->
¨øy
[
right
]->
¥i‹ôy
 > hóp->¨øy[
max
]->priority) {

198 
max
 = 
right
;

200 i‡(
max
 =
i
) {

204 
	`sw≠_nodes
(
hóp
, 
max
, 
i
);

205 
i
 = 
max
;

207 
	}
}

210 
	$Êﬂt_up_‹_down
(
hóp
 *hóp, 
size_t
 
i
)

212 i‡(!
	`Êﬂt_up
(
hóp
, 
i
)) {

213 
	`Êﬂt_down
(
hóp
, 
i
);

215 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/heap.h

17 #i‚de‡
HEAP_H


18 
	#HEAP_H
 1

	)

20 
	~<°dboﬁ.h
>

21 
	~<°ddef.h
>

22 
	~<°döt.h
>

25 
	shóp_node
 {

26 
size_t
 
	midx
;

27 
uöt32_t
 
	m¥i‹ôy
;

31 
	shóp
 {

32 
hóp_node
 **
	m¨øy
;

33 
size_t
 
	mn
;

34 
size_t
 
	mÆloˇãd
;

38 
hóp_öô
(
hóp
 *);

39 
hóp_de°roy
(
hóp
 *);

40 
hóp_˛ór
(
hóp
 *);

41 
hóp_sw≠
(
hóp
 *
a
, hó∞*
b
);

42 
ölöe
 
size_t
 
hóp_cou¡
(c⁄° 
hóp
 *);

43 
ölöe
 
boﬁ
 
hóp_is_em±y
(c⁄° 
hóp
 *);

46 
hóp_ö£π
(
hóp
 *, 
hóp_node
 *, 
uöt32_t
 
¥i‹ôy
);

47 
hóp_ch™ge
(
hóp
 *, 
hóp_node
 *, 
uöt32_t
 
¥i‹ôy
);

48 
hóp_ªmove
(
hóp
 *, 
hóp_node
 *);

49 
ölöe
 
hóp_node
 *
hóp_p›
(
hóp
 *);

52 
ölöe
 
hóp_node
 *
hóp_max
(c⁄° 
hóp
 *);

57 
hóp_øw_ö£π
(
hóp
 *, 
hóp_node
 *, 
uöt32_t
 
¥i‹ôy
);

58 
ölöe
 
hóp_øw_ch™ge
(
hóp_node
 *, 
uöt32_t
 
¥i‹ôy
);

59 
hóp_øw_ªmove
(
hóp
 *, 
hóp_node
 *);

60 
hóp_ªbuûd
(
hóp
 *);

69 
	#HEAP_FOR_EACH
(
NODE
, 
MEMBER
, 
HEAP
) \

70 ((
HEAP
)->
n
 > 0 \

71 ? 
	`ASSIGN_CONTAINER
(
NODE
, (
HEAP
)->
¨øy
[1], 
MEMBER
) \

72 : ((
NODE
Ë
NULL
, 1)); \

73 (
NODE
Ë!
NULL
; \

74 ((
NODE
)->
MEMBER
.
idx
 < (
HEAP
)->
n
 \

75 ? 
	`ASSIGN_CONTAINER
(
NODE
, \

76 (
HEAP
)->
¨øy
[(
NODE
)->
MEMBER
.
idx
 + 1], \

77 
MEMBER
) \

78 : ((
NODE
Ë
NULL
, 1)))

	)

82 
ölöe
 
size_t


83 
	$hóp_∑ª¡__
(
size_t
 
idx
)

85  
idx
 / 2;

86 
	}
}

90 
ölöe
 
size_t


91 
	$hóp_À·__
(
size_t
 
idx
)

93  
idx
 * 2;

94 
	}
}

98 
ölöe
 
size_t


99 
	$hóp_right__
(
size_t
 
idx
)

101  
idx
 * 2 + 1;

102 
	}
}

106 
ölöe
 
boﬁ


107 
	$hóp_is_Àaf__
(c⁄° 
hóp
 *hóp, 
size_t
 
idx
)

109  
	`hóp_À·__
(
idx
Ë> 
hóp
->
n
;

110 
	}
}

113 
ölöe
 
size_t


114 
	$hóp_cou¡
(c⁄° 
hóp
 *heap)

116  
hóp
->
n
;

117 
	}
}

121 
ölöe
 
boﬁ


122 
	$hóp_is_em±y
(c⁄° 
hóp
 *heap)

124  
hóp
->
n
 == 0;

125 
	}
}

134 
ölöe
 
hóp_node
 *

135 
	$hóp_max
(c⁄° 
hóp
 *heap)

137  
hóp
->
¨øy
[1];

138 
	}
}

144 
ölöe
 
hóp_node
 *

145 
	$hóp_p›
(
hóp
 *heap)

147  
hóp
->
¨øy
[hóp->
n
--];

148 
	}
}

157 
ölöe
 

158 
	$hóp_øw_ch™ge
(
hóp_node
 *
node
, 
uöt32_t
 
¥i‹ôy
)

160 
node
->
¥i‹ôy
 =Öriority;

161 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/hmap.c

17 
	~<c⁄fig.h
>

18 
	~"hm≠.h
"

19 
	~<as£π.h
>

20 
	~<°döt.h
>

21 
	~<°rög.h
>

22 
	~"covîage.h
"

23 
	~"øndom.h
"

24 
	~"utû.h
"

26 
COVERAGE_DEFINE
(
hm≠_∑thﬁogiˇl
);

27 
COVERAGE_DEFINE
(
hm≠_ex∑nd
);

28 
COVERAGE_DEFINE
(
hm≠_shrök
);

29 
COVERAGE_DEFINE
(
hm≠_ª£rve
);

33 
	$hm≠_öô
(
hm≠
 *hmap)

35 
hm≠
->
buckës
 = &hm≠->
⁄e
;

36 
hm≠
->
⁄e
 = 
NULL
;

37 
hm≠
->
mask
 = 0;

38 
hm≠
->
n
 = 0;

39 
	}
}

44 
	$hm≠_de°roy
(
hm≠
 *hmap)

46 i‡(
hm≠
 && hm≠->
buckës
 !&hm≠->
⁄e
) {

47 
	`‰ì
(
hm≠
->
buckës
);

49 
	}
}

59 
	$hm≠_˛ór
(
hm≠
 *hmap)

61 i‡(
hm≠
->
n
 > 0) {

62 
hm≠
->
n
 = 0;

63 
	`mem£t
(
hm≠
->
buckës
, 0, (hm≠->
mask
 + 1) *  *hmap->buckets);

65 
	}
}

69 
	$hm≠_sw≠
(
hm≠
 *
a
, hm≠ *
b
)

71 
hm≠
 
tmp
 = *
a
;

72 *
a
 = *
b
;

73 *
b
 = 
tmp
;

74 
	`hm≠_moved
(
a
);

75 
	`hm≠_moved
(
b
);

76 
	}
}

81 
	$hm≠_moved
(
hm≠
 *hmap)

83 i‡(!
hm≠
->
mask
) {

84 
hm≠
->
buckës
 = &hm≠->
⁄e
;

86 
	}
}

89 
	$ªsize
(
hm≠
 *hm≠, 
size_t
 
√w_mask
)

91 
hm≠
 
tmp
;

92 
size_t
 
i
;

94 
	`as£π
(!(
√w_mask
 & (new_mask + 1)));

95 
	`as£π
(
√w_mask
 !
SIZE_MAX
);

97 
	`hm≠_öô
(&
tmp
);

98 i‡(
√w_mask
) {

99 
tmp
.
buckës
 = 
	`xmÆloc
( *tmp.buckë†* (
√w_mask
 + 1));

100 
tmp
.
mask
 = 
√w_mask
;

101 
i
 = 0; i <
tmp
.
mask
; i++) {

102 
tmp
.
buckës
[
i
] = 
NULL
;

105 
i
 = 0; i <
hm≠
->
mask
; i++) {

106 
hm≠_node
 *
node
, *
√xt
;

107 
cou¡
 = 0;

108 
node
 = 
hm≠
->
buckës
[
i
];Çode;Çodê
√xt
) {

109 
√xt
 = 
node
->next;

110 
	`hm≠_ö£π_Á°
(&
tmp
, 
node
,Çode->
hash
);

111 
cou¡
++;

113 i‡(
cou¡
 > 5) {

114 
	`COVERAGE_INC
(
hm≠_∑thﬁogiˇl
);

117 
	`hm≠_sw≠
(
hm≠
, &
tmp
);

118 
	`hm≠_de°roy
(&
tmp
);

119 
	}
}

121 
size_t


122 
	$ˇlc_mask
(
size_t
 
ˇ∑côy
)

124 
size_t
 
mask
 = 
ˇ∑côy
 / 2;

125 
mask
 |= mask >> 1;

126 
mask
 |= mask >> 2;

127 
mask
 |= mask >> 4;

128 
mask
 |= mask >> 8;

129 
mask
 |= mask >> 16;

130 #i‡
SIZE_MAX
 > 
UINT32_MAX


131 
mask
 |= mask >> 32;

136 
mask
 |= (mask & 1) << 1;

138  
mask
;

139 
	}
}

143 
	$hm≠_ex∑nd
(
hm≠
 *hmap)

145 
size_t
 
√w_mask
 = 
	`ˇlc_mask
(
hm≠
->
n
);

146 i‡(
√w_mask
 > 
hm≠
->
mask
) {

147 
	`COVERAGE_INC
(
hm≠_ex∑nd
);

148 
	`ªsize
(
hm≠
, 
√w_mask
);

150 
	}
}

154 
	$hm≠_shrök
(
hm≠
 *hmap)

156 
size_t
 
√w_mask
 = 
	`ˇlc_mask
(
hm≠
->
n
);

157 i‡(
√w_mask
 < 
hm≠
->
mask
) {

158 
	`COVERAGE_INC
(
hm≠_shrök
);

159 
	`ªsize
(
hm≠
, 
√w_mask
);

161 
	}
}

167 
	$hm≠_ª£rve
(
hm≠
 *hm≠, 
size_t
 
n
)

169 
size_t
 
√w_mask
 = 
	`ˇlc_mask
(
n
);

170 i‡(
√w_mask
 > 
hm≠
->
mask
) {

171 
	`COVERAGE_INC
(
hm≠_ª£rve
);

172 
	`ªsize
(
hm≠
, 
√w_mask
);

174 
	}
}

179 
	$hm≠_node_moved
(
hm≠
 *hmap,

180 
hm≠_node
 *
ﬁd_node
, hm≠_nodê*
node
)

182 
hm≠_node
 **
buckë
 = &
hm≠
->
buckës
[
node
->
hash
 & hm≠->
mask
];

183 *
buckë
 !
ﬁd_node
) {

184 
buckë
 = &(*buckë)->
√xt
;

186 *
buckë
 = 
node
;

187 
	}
}

194 
hm≠_node
 *

195 
	$hm≠_øndom_node
(c⁄° 
hm≠
 *hmap)

197 
hm≠_node
 *
buckë
, *
node
;

198 
size_t
 
n
, 
i
;

201 
i
 = 
	`øndom_uöt32
(); ; i++) {

202 
buckë
 = 
hm≠
->
buckës
[
i
 & hm≠->
mask
];

203 i‡(
buckë
) {

209 
n
 = 0;

210 
node
 = 
buckë
;Çode;Çodênode->
√xt
) {

211 
n
++;

215 
i
 = 
	`øndom_ønge
(
n
);

216 
node
 = 
buckë
; 
i
-- > 0;Çodênode->
√xt
) {

219  
node
;

220 
	}
}

232 
hm≠_node
 *

233 
	$hm≠_©_posôi⁄
(c⁄° 
hm≠
 *hmap,

234 
uöt32_t
 *
buckëp
, uöt32_à*
off£ç
)

236 
size_t
 
off£t
;

237 
size_t
 
b_idx
;

239 
off£t
 = *
off£ç
;

240 
b_idx
 = *
buckëp
; b_idx <
hm≠
->
mask
; b_idx++) {

241 
hm≠_node
 *
node
;

242 
size_t
 
n_idx
;

244 
n_idx
 = 0, 
node
 = 
hm≠
->
buckës
[
b_idx
];Çodê!
NULL
;

245 
n_idx
++, 
node
 =Çode->
√xt
) {

246 i‡(
n_idx
 =
off£t
) {

247 i‡(
node
->
√xt
) {

248 *
buckëp
 = 
node
->
hash
 & 
hm≠
->
mask
;

249 *
off£ç
 = 
off£t
 + 1;

251 *
buckëp
 = (
node
->
hash
 & 
hm≠
->
mask
) + 1;

252 *
off£ç
 = 0;

254  
node
;

257 
off£t
 = 0;

260 *
buckëp
 = 0;

261 *
off£ç
 = 0;

262  
NULL
;

263 
	}
}

266 
boﬁ


267 
	$hm≠_c⁄èös
(c⁄° 
hm≠
 *hm≠, c⁄° 
hm≠_node
 *
node
)

269 
hm≠_node
 *
p
;

271 
p
 = 
	`hm≠_fú°_ö_buckë
(
hm≠
, 
node
->
hash
);Ö;Ö =Ö->
√xt
) {

272 i‡(
p
 =
node
) {

273  
åue
;

277  
Ál£
;

278 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/hmap.h

17 #i‚de‡
HMAP_H


18 
	#HMAP_H
 1

	)

20 
	~<°dboﬁ.h
>

21 
	~<°dlib.h
>

22 
	~"utû.h
"

24 #ifde‡ 
__˝lu•lus


29 
	shm≠_node
 {

30 
size_t
 
hash
;

31 
hm≠_node
 *
√xt
;

35 
ölöe
 
size_t
 
hm≠_node_hash
(c⁄° 
hm≠_node
 *
node
)

37  
node
->
hash
;

40 
	#HMAP_NODE_NULL
 ((
hm≠_node
 *Ë1)

	)

41 
	#HMAP_NODE_NULL_INITIALIZER
 { 0, 
HMAP_NODE_NULL
 }

	)

45 
ölöe
 
boﬁ


46 
hm≠_node_is_nuŒ
(c⁄° 
hm≠_node
 *
node
)

48  
node
->
√xt
 =
HMAP_NODE_NULL
;

53 
ölöe
 

54 
hm≠_node_nuŒify
(
hm≠_node
 *
node
)

56 
node
->
√xt
 = 
HMAP_NODE_NULL
;

60 
	shm≠
 {

61 
hm≠_node
 **
buckës
;

62 
hm≠_node
 *
⁄e
;

63 
size_t
 
mask
;

64 
size_t
 
n
;

68 
	#HMAP_INITIALIZER
(
HMAP
Ë{ &(HMAP)->
⁄e
, 
NULL
, 0, 0 }

	)

71 
hm≠_öô
(
hm≠
 *);

72 
hm≠_de°roy
(
hm≠
 *);

73 
hm≠_˛ór
(
hm≠
 *);

74 
hm≠_sw≠
(
hm≠
 *
a
, hm≠ *
b
);

75 
hm≠_moved
(
hm≠
 *hmap);

76 
ölöe
 
size_t
 
hm≠_cou¡
(c⁄° 
hm≠
 *);

77 
ölöe
 
boﬁ
 
hm≠_is_em±y
(c⁄° 
hm≠
 *);

80 
hm≠_ex∑nd
(
hm≠
 *);

81 
hm≠_shrök
(
hm≠
 *);

82 
hm≠_ª£rve
(
hm≠
 *, 
size_t
 
ˇ∑côy
);

85 
ölöe
 
hm≠_ö£π_Á°
(
hm≠
 *,

86 
hm≠_node
 *, 
size_t
 
hash
);

87 
ölöe
 
hm≠_ö£π
(
hm≠
 *, 
hm≠_node
 *, 
size_t
 
hash
);

88 
ölöe
 
hm≠_ªmove
(
hm≠
 *, 
hm≠_node
 *);

90 
hm≠_node_moved
(
hm≠
 *, 
hm≠_node
 *, hmap_node *);

91 
ölöe
 
hm≠_ª∂a˚
(
hm≠
 *, c⁄° 
hm≠_node
 *
ﬁd
,

92 
hm≠_node
 *
√w_node
);

94 
hm≠_node
 *
hm≠_øndom_node
(c⁄° 
hm≠
 *);

116 
	#HMAP_FOR_EACH_WITH_HASH
(
NODE
, 
MEMBER
, 
HASH
, 
HMAP
) \

117 
	`ASSIGN_CONTAINER
(
NODE
, 
	`hm≠_fú°_wôh_hash
(
HMAP
, 
HASH
), 
MEMBER
); \

118 &(
NODE
)->
MEMBER
 !
NULL
; \

119 
	`ASSIGN_CONTAINER
(
NODE
, 
	`hm≠_√xt_wôh_hash
(&(NODE)->
MEMBER
), \

120 
MEMBER
))

	)

121 
	#HMAP_FOR_EACH_IN_BUCKET
(
NODE
, 
MEMBER
, 
HASH
, 
HMAP
) \

122 
	`ASSIGN_CONTAINER
(
NODE
, 
	`hm≠_fú°_ö_buckë
(
HMAP
, 
HASH
), 
MEMBER
); \

123 &(
NODE
)->
MEMBER
 !
NULL
; \

124 
	`ASSIGN_CONTAINER
(
NODE
, 
	`hm≠_√xt_ö_buckë
(&(NODE)->
MEMBER
), MEMBER))

	)

126 
ölöe
 
hm≠_node
 *
hm≠_fú°_wôh_hash
(c⁄° 
hm≠
 *,

127 
size_t
 
hash
);

128 
ölöe
 
hm≠_node
 *
hm≠_√xt_wôh_hash
(const hmap_node *);

129 
ölöe
 
hm≠_node
 *
hm≠_fú°_ö_buckë
(c⁄° 
hm≠
 *,

130 
size_t
 
hash
);

131 
ölöe
 
hm≠_node
 *
hm≠_√xt_ö_buckë
(const hmap_node *);

133 
boﬁ
 
hm≠_c⁄èös
(c⁄° 
hm≠
 *, c⁄° 
hm≠_node
 *);

138 
	#HMAP_FOR_EACH
(
NODE
, 
MEMBER
, 
HMAP
) \

139 
	`ASSIGN_CONTAINER
(
NODE
, 
	`hm≠_fú°
(
HMAP
), 
MEMBER
); \

140 &(
NODE
)->
MEMBER
 !
NULL
; \

141 
	`ASSIGN_CONTAINER
(
NODE
, 
	`hm≠_√xt
(
HMAP
, &(NODE)->
MEMBER
), MEMBER))

	)

145 
	#HMAP_FOR_EACH_SAFE
(
NODE
, 
NEXT
, 
MEMBER
, 
HMAP
) \

146 
	`ASSIGN_CONTAINER
(
NODE
, 
	`hm≠_fú°
(
HMAP
), 
MEMBER
); \

147 (&(
NODE
)->
MEMBER
 !
NULL
 \

148 ? 
	`ASSIGN_CONTAINER
(
NEXT
, 
	`hm≠_√xt
(
HMAP
, &(
NODE
)->
MEMBER
), MEMBER) \

150 (
NODE
Ë(
NEXT
))

	)

153 
	#HMAP_FOR_EACH_CONTINUE
(
NODE
, 
MEMBER
, 
HMAP
) \

154 
	`ASSIGN_CONTAINER
(
NODE
, 
	`hm≠_√xt
(
HMAP
, &(NODE)->
MEMBER
), MEMBER); \

155 &(
NODE
)->
MEMBER
 !
NULL
; \

156 
	`ASSIGN_CONTAINER
(
NODE
, 
	`hm≠_√xt
(
HMAP
, &(NODE)->
MEMBER
), MEMBER))

	)

158 
ölöe
 
hm≠_node
 *
hm≠_fú°
(c⁄° 
hm≠
 *);

159 
ölöe
 
hm≠_node
 *
hm≠_√xt
(c⁄° 
hm≠
 *,

160 c⁄° 
hm≠_node
 *);

162 
hm≠_node
 *
hm≠_©_posôi⁄
(c⁄° 
hm≠
 *,

163 
uöt32_t
 *
buckë
, uöt32_à*
off£t
);

166 
ölöe
 
size_t


167 
hm≠_cou¡
(c⁄° 
hm≠
 *hmap)

169  
hm≠
->
n
;

174 
ölöe
 
size_t


175 
hm≠_ˇ∑côy
(c⁄° 
hm≠
 *hmap)

177  
hm≠
->
mask
 * 2 + 1;

182 
ölöe
 
boﬁ


183 
hm≠_is_em±y
(c⁄° 
hm≠
 *hmap)

185  
hm≠
->
n
 == 0;

190 
ölöe
 

191 
hm≠_ö£π_Á°
(
hm≠
 *hm≠, 
hm≠_node
 *
node
, 
size_t
 
hash
)

193 
hm≠_node
 **
buckë
 = &
hm≠
->
buckës
[
hash
 & hm≠->
mask
];

194 
node
->
hash
 = hash;

195 
node
->
√xt
 = *
buckë
;

196 *
buckë
 = 
node
;

197 
hm≠
->
n
++;

202 
ölöe
 

203 
hm≠_ö£π
(
hm≠
 *hm≠, 
hm≠_node
 *
node
, 
size_t
 
hash
)

205 
hm≠_ö£π_Á°
(
hm≠
, 
node
, 
hash
);

206 i‡(
hm≠
->
n
 / 2 > hm≠->
mask
) {

207 
hm≠_ex∑nd
(
hm≠
);

213 
ölöe
 

214 
hm≠_ªmove
(
hm≠
 *hm≠, 
hm≠_node
 *
node
)

216 
hm≠_node
 **
buckë
 = &
hm≠
->
buckës
[
node
->
hash
 & hm≠->
mask
];

217 *
buckë
 !
node
) {

218 
buckë
 = &(*buckë)->
√xt
;

220 *
buckë
 = 
node
->
√xt
;

221 
hm≠
->
n
--;

231 
ölöe
 

232 
hm≠_ª∂a˚
(
hm≠
 *hmap,

233 c⁄° 
hm≠_node
 *
ﬁd_node
, hm≠_nodê*
√w_node
)

235 
hm≠_node
 **
buckë
 = &
hm≠
->
buckës
[
ﬁd_node
->
hash
 & hm≠->
mask
];

236 *
buckë
 !
ﬁd_node
) {

237 
buckë
 = &(*buckë)->
√xt
;

239 *
buckë
 = 
√w_node
;

240 
√w_node
->
hash
 = 
ﬁd_node
->hash;

241 
√w_node
->
√xt
 = 
ﬁd_node
->next;

244 
ölöe
 
hm≠_node
 *

245 
hm≠_√xt_wôh_hash__
(c⁄° 
hm≠_node
 *
node
, 
size_t
 
hash
)

247 
node
 !
NULL
 &&Çode->
hash
 != hash) {

248 
node
 =Çode->
√xt
;

250  
CONST_CAST
(
hm≠_node
 *, 
node
);

255 
ölöe
 
hm≠_node
 *

256 
hm≠_fú°_wôh_hash
(c⁄° 
hm≠
 *hm≠, 
size_t
 
hash
)

258  
hm≠_√xt_wôh_hash__
(
hm≠
->
buckës
[
hash
 & hm≠->
mask
], hash);

263 
ölöe
 
hm≠_node
 *

264 
hm≠_fú°_ö_buckë
(c⁄° 
hm≠
 *hm≠, 
size_t
 
hash
)

266  
hm≠
->
buckës
[
hash
 & hm≠->
mask
];

277 
ölöe
 
hm≠_node
 *

278 
hm≠_√xt_ö_buckë
(c⁄° 
hm≠_node
 *
node
)

280  
node
->
√xt
;

291 
ölöe
 
hm≠_node
 *

292 
hm≠_√xt_wôh_hash
(c⁄° 
hm≠_node
 *
node
)

294  
hm≠_√xt_wôh_hash__
(
node
->
√xt
,Çode->
hash
);

297 
ölöe
 
hm≠_node
 *

298 
hm≠_√xt__
(c⁄° 
hm≠
 *hm≠, 
size_t
 
°¨t
)

300 
size_t
 
i
;

301 
i
 = 
°¨t
; i <
hm≠
->
mask
; i++) {

302 
hm≠_node
 *
node
 = 
hm≠
->
buckës
[
i
];

303 i‡(
node
) {

304  
node
;

307  
NULL
;

312 
ölöe
 
hm≠_node
 *

313 
hm≠_fú°
(c⁄° 
hm≠
 *hmap)

315  
hm≠_√xt__
(
hm≠
, 0);

325 
ölöe
 
hm≠_node
 *

326 
hm≠_√xt
(c⁄° 
hm≠
 *hm≠, c⁄° 
hm≠_node
 *
node
)

328  (
node
->
√xt


329 ? 
node
->
√xt


330 : 
hm≠_√xt__
(
hm≠
, (
node
->
hash
 & hm≠->
mask
) + 1));

333 #ifde‡ 
__˝lu•lus


	@/home/lsch/mytest/openvswitch-1.9.0/lib/hmapx.c

17 
	~<c⁄fig.h
>

19 
	~"hm≠x.h
"

21 
	~<as£π.h
>

23 
	~"hash.h
"

25 
hm≠x_node
 *

26 
	$hm≠x_föd__
(c⁄° 
hm≠x
 *
m≠
, c⁄° *
d©a
, 
size_t
 
hash
)

28 
hm≠x_node
 *
node
;

30 
	`HMAP_FOR_EACH_IN_BUCKET
 (
node
, 
hm≠_node
, 
hash
, &
m≠
->map) {

31 i‡(
node
->
d©a
 == data) {

32  
node
;

35  
NULL
;

36 
	}
}

38 
hm≠x_node
 *

39 
	$hm≠x_add__
(
hm≠x
 *
m≠
, *
d©a
, 
size_t
 
hash
)

41 
hm≠x_node
 *
node
 = 
	`xmÆloc
( *node);

42 
node
->
d©a
 = data;

43 
	`hm≠_ö£π
(&
m≠
->m≠, &
node
->
hm≠_node
, 
hash
);

44  
node
;

45 
	}
}

49 
	$hm≠x_öô
(
hm≠x
 *
m≠
)

51 
	`hm≠_öô
(&
m≠
->map);

52 
	}
}

56 
	$hm≠x_de°roy
(
hm≠x
 *
m≠
)

58 i‡(
m≠
) {

59 
	`hm≠x_˛ór
(
m≠
);

60 
	`hm≠_de°roy
(&
m≠
->map);

62 
	}
}

66 
	$hm≠x_˛⁄e
(
hm≠x
 *
m≠
, c⁄° hm≠x *
‹ig
)

68 
hm≠x_node
 *
node
;

70 
	`hm≠x_öô
(
m≠
);

71 
	`HMAP_FOR_EACH
 (
node
, 
hm≠_node
, &
‹ig
->
m≠
) {

72 
	`hm≠x_add__
(
m≠
, 
node
->
d©a
,Çode->
hm≠_node
.
hash
);

74 
	}
}

78 
	$hm≠x_sw≠
(
hm≠x
 *
a
, hm≠x *
b
)

80 
	`hm≠_sw≠
(&
a
->
m≠
, &
b
->map);

81 
	}
}

86 
	$hm≠x_moved
(
hm≠x
 *
m≠
)

88 
	`hm≠_moved
(&
m≠
->map);

89 
	}
}

93 
boﬁ


94 
	$hm≠x_is_em±y
(c⁄° 
hm≠x
 *
m≠
)

96  
	`hm≠_is_em±y
(&
m≠
->map);

97 
	}
}

100 
size_t


101 
	$hm≠x_cou¡
(c⁄° 
hm≠x
 *
m≠
)

103  
	`hm≠_cou¡
(&
m≠
->map);

104 
	}
}

108 
hm≠x_node
 *

109 
	$hm≠x_add
(
hm≠x
 *
m≠
, *
d©a
)

111 
uöt32_t
 
hash
 = 
	`hash_poöãr
(
d©a
, 0);

112  (
	`hm≠x_föd__
(
m≠
, 
d©a
, 
hash
)

113 ? 
NULL


114 : 
	`hm≠x_add__
(
m≠
, 
d©a
, 
hash
));

115 
	}
}

119 
	$hm≠x_add_as£π
(
hm≠x
 *
m≠
, *
d©a
)

121 
boﬁ
 
added
 
OVS_UNUSED
 = 
	`hm≠x_add
(
m≠
, 
d©a
);

122 
	`as£π
(
added
);

123 
	}
}

127 
	$hm≠x_˛ór
(
hm≠x
 *
m≠
)

129 
hm≠x_node
 *
node
, *
√xt
;

131 
	`HMAPX_FOR_EACH_SAFE
 (
node
, 
√xt
, 
m≠
) {

132 
	`hm≠x_dñëe
(
m≠
, 
node
);

134 
	}
}

138 
	$hm≠x_dñëe
(
hm≠x
 *
m≠
, 
hm≠x_node
 *
node
)

140 
	`hm≠_ªmove
(&
m≠
->m≠, &
node
->
hm≠_node
);

141 
	`‰ì
(
node
);

142 
	}
}

146 
boﬁ


147 
	$hm≠x_föd_™d_dñëe
(
hm≠x
 *
m≠
, c⁄° *
d©a
)

149 
hm≠x_node
 *
node
 = 
	`hm≠x_föd
(
m≠
, 
d©a
);

150 i‡(
node
) {

151 
	`hm≠x_dñëe
(
m≠
, 
node
);

153  
node
 !
NULL
;

154 
	}
}

159 
	$hm≠x_föd_™d_dñëe_as£π
(
hm≠x
 *
m≠
, c⁄° *
d©a
)

161 
boﬁ
 
dñëed
 
OVS_UNUSED
 = 
	`hm≠x_föd_™d_dñëe
(
m≠
, 
d©a
);

162 
	`as£π
(
dñëed
);

163 
	}
}

167 
hm≠x_node
 *

168 
	$hm≠x_föd
(c⁄° 
hm≠x
 *
m≠
, c⁄° *
d©a
)

170  
	`hm≠x_föd__
(
m≠
, 
d©a
, 
	`hash_poöãr
(data, 0));

171 
	}
}

174 
boﬁ


175 
	$hm≠x_c⁄èös
(c⁄° 
hm≠x
 *
m≠
, c⁄° *
d©a
)

177  
	`hm≠x_föd
(
m≠
, 
d©a
Ë!
NULL
;

178 
	}
}

181 
boﬁ


182 
	$hm≠x_equÆs
(c⁄° 
hm≠x
 *
a
, c⁄° hm≠x *
b
)

184 
hm≠x_node
 *
node
;

186 i‡(
	`hm≠x_cou¡
(
a
Ë!hm≠x_cou¡(
b
)) {

187  
Ál£
;

190 
	`HMAP_FOR_EACH
 (
node
, 
hm≠_node
, &
a
->
m≠
) {

191 i‡(!
	`hm≠x_föd__
(
b
, 
node
->
d©a
,Çode->
hm≠_node
.
hash
)) {

192  
Ál£
;

196  
åue
;

197 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/hmapx.h

17 #i‚de‡
HMAPX_H


18 
	#HMAPX_H


	)

20 
	~"hm≠.h
"

22 
	shm≠x_node
 {

23 
hm≠_node
 
	mhm≠_node
;

24 *
	md©a
;

28 
	shm≠x
 {

29 
hm≠
 
	mm≠
;

32 
	#HMAPX_INITIALIZER
(
HMAPX
Ë{ 
	`HMAP_INITIALIZER
(&(HMAPX)->
m≠
Ë}

	)

35 
hm≠x_öô
(
hm≠x
 *);

36 
hm≠x_de°roy
(
hm≠x
 *);

37 
hm≠x_˛⁄e
(
hm≠x
 *, const hmapx *);

38 
hm≠x_sw≠
(
hm≠x
 *, hmapx *);

39 
hm≠x_moved
(
hm≠x
 *);

42 
boﬁ
 
hm≠x_is_em±y
(c⁄° 
hm≠x
 *);

43 
size_t
 
hm≠x_cou¡
(c⁄° 
hm≠x
 *);

46 
hm≠x_node
 *
hm≠x_add
(
hm≠x
 *, *);

47 
hm≠x_add_as£π
(
hm≠x
 *, *);

50 
hm≠x_˛ór
(
hm≠x
 *);

51 
hm≠x_dñëe
(
hm≠x
 *, 
hm≠x_node
 *);

52 
boﬁ
 
hm≠x_föd_™d_dñëe
(
hm≠x
 *, const *);

53 
hm≠x_föd_™d_dñëe_as£π
(
hm≠x
 *, const *);

56 
hm≠x_node
 *
hm≠x_föd
(c⁄° 
hm≠x
 *, const *);

57 
boﬁ
 
hm≠x_c⁄èös
(c⁄° 
hm≠x
 *, const *);

58 
boﬁ
 
hm≠x_equÆs
(c⁄° 
hm≠x
 *, const hmapx *);

63 
	#HMAPX_FOR_EACH
(
NODE
, 
HMAPX
) \

64 
	`HMAP_FOR_EACH
(
NODE
, 
hm≠_node
, &(
HMAPX
)->
m≠
)

	)

68 
	#HMAPX_FOR_EACH_SAFE
(
NODE
, 
NEXT
, 
HMAPX
) \

69 
	`HMAP_FOR_EACH_SAFE
(
NODE
, 
NEXT
, 
hm≠_node
, &(
HMAPX
)->
m≠
)

	)

	@/home/lsch/mytest/openvswitch-1.9.0/lib/json.c

17 
	~<c⁄fig.h
>

19 
	~"js⁄.h
"

21 
	~<as£π.h
>

22 
	~<˘y≥.h
>

23 
	~<î∫o.h
>

24 
	~<Êﬂt.h
>

25 
	~<limôs.h
>

26 
	~<°rög.h
>

28 
	~"dy«mic-°rög.h
"

29 
	~"hash.h
"

30 
	~"shash.h
"

31 
	~"unicode.h
"

32 
	~"utû.h
"

35 
	ejs⁄_tokí_ty≥
 {

36 
	mT_EOF
 = 0,

37 
	mT_BEGIN_ARRAY
 = '[',

38 
	mT_END_ARRAY
 = ']',

39 
	mT_BEGIN_OBJECT
 = '{',

40 
	mT_END_OBJECT
 = '}',

41 
	mT_NAME_SEPARATOR
 = ':',

42 
	mT_VALUE_SEPARATOR
 = ',',

43 
	mT_FALSE
 = 
UCHAR_MAX
 + 1,

44 
	mT_NULL
,

45 
	mT_TRUE
,

46 
	mT_INTEGER
,

47 
	mT_REAL
,

48 
	mT_STRING


56 
	sjs⁄_tokí
 {

57 
js⁄_tokí_ty≥
 
	mty≥
;

59 
	mªÆ
;

60 
	möãgî
;

61 c⁄° *
	m°rög
;

62 } 
	mu
;

65 
	ejs⁄_Àx_°©e
 {

66 
	mJSON_LEX_START
,

67 
	mJSON_LEX_NUMBER
,

68 
	mJSON_LEX_KEYWORD
,

69 
	mJSON_LEX_STRING
,

70 
	mJSON_LEX_ESCAPE


73 
	ejs⁄_∑r£_°©e
 {

74 
	mJSON_PARSE_START
,

75 
	mJSON_PARSE_END
,

78 
	mJSON_PARSE_OBJECT_INIT
,

79 
	mJSON_PARSE_OBJECT_NAME
,

80 
	mJSON_PARSE_OBJECT_COLON
,

81 
	mJSON_PARSE_OBJECT_VALUE
,

82 
	mJSON_PARSE_OBJECT_NEXT
,

85 
	mJSON_PARSE_ARRAY_INIT
,

86 
	mJSON_PARSE_ARRAY_VALUE
,

87 
	mJSON_PARSE_ARRAY_NEXT


90 
	sjs⁄_∑r£r_node
 {

91 
js⁄
 *
	mjs⁄
;

95 
	sjs⁄_∑r£r
 {

96 
	mÊags
;

99 
js⁄_Àx_°©e
 
	mÀx_°©e
;

100 
ds
 
	mbuf„r
;

101 
	mlöe_numbî
;

102 
	mcﬁumn_numbî
;

103 
	mbyã_numbî
;

106 
js⁄_∑r£_°©e
 
	m∑r£_°©e
;

107 
	#JSON_MAX_HEIGHT
 1000

	)

108 
js⁄_∑r£r_node
 *
	m°ack
;

109 
size_t
 
	mheight
, 
	mÆloˇãd_height
;

110 *
	mmembî_«me
;

113 
boﬁ
 
	md⁄e
;

114 *
	mîr‹
;

117 
js⁄
 *
js⁄_¸óã
(
js⁄_ty≥
 
ty≥
);

118 
js⁄_∑r£r_öput
(
js⁄_∑r£r
 *, 
js⁄_tokí
 *);

120 
	$js⁄_îr‹
(
js⁄_∑r£r
 *
p
, c⁄° *
f‹m©
, ...)

121 
	`PRINTF_FORMAT
(2, 3);

124 
	$js⁄_ty≥_to_°rög
(
js⁄_ty≥
 
ty≥
)

126 
ty≥
) {

127 
JSON_NULL
:

130 
JSON_FALSE
:

133 
JSON_TRUE
:

136 
JSON_OBJECT
:

139 
JSON_ARRAY
:

142 
JSON_INTEGER
:

143 
JSON_REAL
:

146 
JSON_STRING
:

149 
JSON_N_TYPES
:

153 
	}
}

157 
js⁄
 *

158 
	$js⁄_nuŒ_¸óã
()

160  
	`js⁄_¸óã
(
JSON_NULL
);

161 
	}
}

163 
js⁄
 *

164 
	$js⁄_boﬁón_¸óã
(
boﬁ
 
b
)

166  
	`js⁄_¸óã
(
b
 ? 
JSON_TRUE
 : 
JSON_FALSE
);

167 
	}
}

169 
js⁄
 *

170 
	$js⁄_°rög_¸óã_noc›y
(*
s
)

172 
js⁄
 *js⁄ = 
	`js⁄_¸óã
(
JSON_STRING
);

173 
js⁄
->
u
.
°rög
 = 
s
;

174  
js⁄
;

175 
	}
}

177 
js⁄
 *

178 
	$js⁄_°rög_¸óã
(c⁄° *
s
)

180  
	`js⁄_°rög_¸óã_noc›y
(
	`x°rdup
(
s
));

181 
	}
}

183 
js⁄
 *

184 
	$js⁄_¨øy_¸óã_em±y
()

186 
js⁄
 *js⁄ = 
	`js⁄_¸óã
(
JSON_ARRAY
);

187 
js⁄
->
u
.
¨øy
.
ñems
 = 
NULL
;

188 
js⁄
->
u
.
¨øy
.
n
 = 0;

189 
js⁄
->
u
.
¨øy
.
n_Æloˇãd
 = 0;

190  
js⁄
;

191 
	}
}

194 
	$js⁄_¨øy_add
(
js⁄
 *
¨øy_
, js⁄ *
ñemít
)

196 
js⁄_¨øy
 *
¨øy
 = 
	`js⁄_¨øy
(
¨øy_
);

197 i‡(
¨øy
->
n
 >¨øy->
n_Æloˇãd
) {

198 
¨øy
->
ñems
 = 
	`x2ƒóŒoc
◊ºay->ñems, &¨øy->
n_Æloˇãd
,

199  *
¨øy
->
ñems
);

201 
¨øy
->
ñems
[¨øy->
n
++] = 
ñemít
;

202 
	}
}

205 
	$js⁄_¨øy_åim
(
js⁄
 *
¨øy_
)

207 
js⁄_¨øy
 *
¨øy
 = 
	`js⁄_¨øy
(
¨øy_
);

208 i‡(
¨øy
->
n
 <áºay->
n_Æloˇãd
){

209 
¨øy
->
n_Æloˇãd
 =áºay->
n
;

210 
¨øy
->
ñems
 = 
	`xªÆloc
◊ºay->ñems,áºay->
n
 *  *array->elems);

212 
	}
}

214 
js⁄
 *

215 
	$js⁄_¨øy_¸óã
(
js⁄
 **
ñemíts
, 
size_t
 
n
)

217 
js⁄
 *js⁄ = 
	`js⁄_¸óã
(
JSON_ARRAY
);

218 
js⁄
->
u
.
¨øy
.
ñems
 = 
ñemíts
;

219 
js⁄
->
u
.
¨øy
.
n
 =Ç;

220 
js⁄
->
u
.
¨øy
.
n_Æloˇãd
 = 
n
;

221  
js⁄
;

222 
	}
}

224 
js⁄
 *

225 
	$js⁄_¨øy_¸óã_1
(
js⁄
 *
ñem0
)

227 
js⁄
 **
ñems
 = 
	`xmÆloc
( *elems);

228 
ñems
[0] = 
ñem0
;

229  
	`js⁄_¨øy_¸óã
(
ñems
, 1);

230 
	}
}

232 
js⁄
 *

233 
	$js⁄_¨øy_¸óã_2
(
js⁄
 *
ñem0
, js⁄ *
ñem1
)

235 
js⁄
 **
ñems
 = 
	`xmÆloc
(2 *  *elems);

236 
ñems
[0] = 
ñem0
;

237 
ñems
[1] = 
ñem1
;

238  
	`js⁄_¨øy_¸óã
(
ñems
, 2);

239 
	}
}

241 
js⁄
 *

242 
	$js⁄_¨øy_¸óã_3
(
js⁄
 *
ñem0
, js⁄ *
ñem1
, js⁄ *
ñem2
)

244 
js⁄
 **
ñems
 = 
	`xmÆloc
(3 *  *elems);

245 
ñems
[0] = 
ñem0
;

246 
ñems
[1] = 
ñem1
;

247 
ñems
[2] = 
ñem2
;

248  
	`js⁄_¨øy_¸óã
(
ñems
, 3);

249 
	}
}

251 
js⁄
 *

252 
	$js⁄_obje˘_¸óã
()

254 
js⁄
 *js⁄ = 
	`js⁄_¸óã
(
JSON_OBJECT
);

255 
js⁄
->
u
.
obje˘
 = 
	`xmÆloc
( *json->u.object);

256 
	`shash_öô
(
js⁄
->
u
.
obje˘
);

257  
js⁄
;

258 
	}
}

260 
js⁄
 *

261 
	$js⁄_öãgî_¸óã
(
öãgî
)

263 
js⁄
 *js⁄ = 
	`js⁄_¸óã
(
JSON_INTEGER
);

264 
js⁄
->
u
.
öãgî
 = integer;

265  
js⁄
;

266 
	}
}

268 
js⁄
 *

269 
	$js⁄_ªÆ_¸óã
(
ªÆ
)

271 
js⁄
 *js⁄ = 
	`js⁄_¸óã
(
JSON_REAL
);

272 
js⁄
->
u
.
ªÆ
 =Ñeal;

273  
js⁄
;

274 
	}
}

277 
	$js⁄_obje˘_put
(
js⁄
 *js⁄, c⁄° *
«me
, js⁄ *
vÆue
)

279 
	`js⁄_de°roy
(
	`shash_ª∂a˚
(
js⁄
->
u
.
obje˘
, 
«me
, 
vÆue
));

280 
	}
}

283 
	$js⁄_obje˘_put_°rög
(
js⁄
 *js⁄, c⁄° *
«me
, c⁄° *
vÆue
)

285 
	`js⁄_obje˘_put
(
js⁄
, 
«me
, 
	`js⁄_°rög_¸óã
(
vÆue
));

286 
	}
}

289 
	$js⁄_°rög
(c⁄° 
js⁄
 *json)

291 
	`as£π
(
js⁄
->
ty≥
 =
JSON_STRING
);

292  
js⁄
->
u
.
°rög
;

293 
	}
}

295 
js⁄_¨øy
 *

296 
	$js⁄_¨øy
(c⁄° 
js⁄
 *json)

298 
	`as£π
(
js⁄
->
ty≥
 =
JSON_ARRAY
);

299  
	`CONST_CAST
(
js⁄_¨øy
 *, &
js⁄
->
u
.
¨øy
);

300 
	}
}

302 
shash
 *

303 
	$js⁄_obje˘
(c⁄° 
js⁄
 *json)

305 
	`as£π
(
js⁄
->
ty≥
 =
JSON_OBJECT
);

306  
	`CONST_CAST
(
shash
 *, 
js⁄
->
u
.
obje˘
);

307 
	}
}

309 
boﬁ


310 
	$js⁄_boﬁón
(c⁄° 
js⁄
 *json)

312 
	`as£π
(
js⁄
->
ty≥
 =
JSON_TRUE
 || js⁄->ty≥ =
JSON_FALSE
);

313  
js⁄
->
ty≥
 =
JSON_TRUE
;

314 
	}
}

317 
	$js⁄_ªÆ
(c⁄° 
js⁄
 *json)

319 
	`as£π
(
js⁄
->
ty≥
 =
JSON_REAL
 || js⁄->ty≥ =
JSON_INTEGER
);

320  
js⁄
->
ty≥
 =
JSON_REAL
 ? js⁄->
u
.
ªÆ
 : js⁄->u.
öãgî
;

321 
	}
}

323 
öt64_t


324 
	$js⁄_öãgî
(c⁄° 
js⁄
 *json)

326 
	`as£π
(
js⁄
->
ty≥
 =
JSON_INTEGER
);

327  
js⁄
->
u
.
öãgî
;

328 
	}
}

330 
js⁄_de°roy_obje˘
(
shash
 *
obje˘
);

331 
js⁄_de°roy_¨øy
(
js⁄_¨øy
 *
¨øy
);

335 
	$js⁄_de°roy
(
js⁄
 *json)

337 i‡(
js⁄
) {

338 
js⁄
->
ty≥
) {

339 
JSON_OBJECT
:

340 
	`js⁄_de°roy_obje˘
(
js⁄
->
u
.
obje˘
);

343 
JSON_ARRAY
:

344 
	`js⁄_de°roy_¨øy
(&
js⁄
->
u
.
¨øy
);

347 
JSON_STRING
:

348 
	`‰ì
(
js⁄
->
u
.
°rög
);

351 
JSON_NULL
:

352 
JSON_FALSE
:

353 
JSON_TRUE
:

354 
JSON_INTEGER
:

355 
JSON_REAL
:

358 
JSON_N_TYPES
:

359 
	`NOT_REACHED
();

361 
	`‰ì
(
js⁄
);

363 
	}
}

366 
	$js⁄_de°roy_obje˘
(
shash
 *
obje˘
)

368 
shash_node
 *
node
, *
√xt
;

370 
	`SHASH_FOR_EACH_SAFE
 (
node
, 
√xt
, 
obje˘
) {

371 
js⁄
 *
vÆue
 = 
node
->
d©a
;

373 
	`js⁄_de°roy
(
vÆue
);

374 
	`shash_dñëe
(
obje˘
, 
node
);

376 
	`shash_de°roy
(
obje˘
);

377 
	`‰ì
(
obje˘
);

378 
	}
}

381 
	$js⁄_de°roy_¨øy
(
js⁄_¨øy
 *
¨øy
)

383 
size_t
 
i
;

385 
i
 = 0; i < 
¨øy
->
n
; i++) {

386 
	`js⁄_de°roy
(
¨øy
->
ñems
[
i
]);

388 
	`‰ì
(
¨øy
->
ñems
);

389 
	}
}

391 
js⁄
 *
js⁄_˛⁄e_obje˘
(c⁄° 
shash
 *
obje˘
);

392 
js⁄
 *
js⁄_˛⁄e_¨øy
(c⁄° 
js⁄_¨øy
 *
¨øy
);

395 
js⁄
 *

396 
	$js⁄_˛⁄e
(c⁄° 
js⁄
 *json)

398 
js⁄
->
ty≥
) {

399 
JSON_OBJECT
:

400  
	`js⁄_˛⁄e_obje˘
(
js⁄
->
u
.
obje˘
);

402 
JSON_ARRAY
:

403  
	`js⁄_˛⁄e_¨øy
(&
js⁄
->
u
.
¨øy
);

405 
JSON_STRING
:

406  
	`js⁄_°rög_¸óã
(
js⁄
->
u
.
°rög
);

408 
JSON_NULL
:

409 
JSON_FALSE
:

410 
JSON_TRUE
:

411  
	`js⁄_¸óã
(
js⁄
->
ty≥
);

413 
JSON_INTEGER
:

414  
	`js⁄_öãgî_¸óã
(
js⁄
->
u
.
öãgî
);

416 
JSON_REAL
:

417  
	`js⁄_ªÆ_¸óã
(
js⁄
->
u
.
ªÆ
);

419 
JSON_N_TYPES
:

421 
	`NOT_REACHED
();

423 
	}
}

425 
js⁄
 *

426 
	$js⁄_˛⁄e_obje˘
(c⁄° 
shash
 *
obje˘
)

428 
shash_node
 *
node
;

429 
js⁄
 *json;

431 
js⁄
 = 
	`js⁄_obje˘_¸óã
();

432 
	`SHASH_FOR_EACH
 (
node
, 
obje˘
) {

433 
js⁄
 *
vÆue
 = 
node
->
d©a
;

434 
	`js⁄_obje˘_put
(
js⁄
, 
node
->
«me
, 
	`js⁄_˛⁄e
(
vÆue
));

436  
js⁄
;

437 
	}
}

439 
js⁄
 *

440 
	$js⁄_˛⁄e_¨øy
(c⁄° 
js⁄_¨øy
 *
¨øy
)

442 
js⁄
 **
ñems
;

443 
size_t
 
i
;

445 
ñems
 = 
	`xmÆloc
(
¨øy
->
n
 *  *elems);

446 
i
 = 0; i < 
¨øy
->
n
; i++) {

447 
ñems
[
i
] = 
	`js⁄_˛⁄e
(
¨øy
->elems[i]);

449  
	`js⁄_¨øy_¸óã
(
ñems
, 
¨øy
->
n
);

450 
	}
}

452 
size_t


453 
	$js⁄_hash_obje˘
(c⁄° 
shash
 *
obje˘
, 
size_t
 
basis
)

455 c⁄° 
shash_node
 **
nodes
;

456 
size_t
 
n
, 
i
;

458 
nodes
 = 
	`shash_s‹t
(
obje˘
);

459 
n
 = 
	`shash_cou¡
(
obje˘
);

460 
i
 = 0; i < 
n
; i++) {

461 c⁄° 
shash_node
 *
node
 = 
nodes
[
i
];

462 
basis
 = 
	`hash_°rög
(
node
->
«me
, basis);

463 
basis
 = 
	`js⁄_hash
(
node
->
d©a
, basis);

465  
basis
;

466 
	}
}

468 
size_t


469 
	$js⁄_hash_¨øy
(c⁄° 
js⁄_¨øy
 *
¨øy
, 
size_t
 
basis
)

471 
size_t
 
i
;

473 
basis
 = 
	`hash_öt
(
¨øy
->
n
, basis);

474 
i
 = 0; i < 
¨øy
->
n
; i++) {

475 
basis
 = 
	`js⁄_hash
(
¨øy
->
ñems
[
i
], basis);

477  
basis
;

478 
	}
}

480 
size_t


481 
	$js⁄_hash
(c⁄° 
js⁄
 *js⁄, 
size_t
 
basis
)

483 
js⁄
->
ty≥
) {

484 
JSON_OBJECT
:

485  
	`js⁄_hash_obje˘
(
js⁄
->
u
.
obje˘
, 
basis
);

487 
JSON_ARRAY
:

488  
	`js⁄_hash_¨øy
(&
js⁄
->
u
.
¨øy
, 
basis
);

490 
JSON_STRING
:

491  
	`hash_°rög
(
js⁄
->
u
.
°rög
, 
basis
);

493 
JSON_NULL
:

494 
JSON_FALSE
:

495 
JSON_TRUE
:

496  
	`hash_öt
(
js⁄
->
ty≥
 << 8, 
basis
);

498 
JSON_INTEGER
:

499  
	`hash_öt
(
js⁄
->
u
.
öãgî
, 
basis
);

501 
JSON_REAL
:

502  
	`hash_doubÀ
(
js⁄
->
u
.
ªÆ
, 
basis
);

504 
JSON_N_TYPES
:

506 
	`NOT_REACHED
();

508 
	}
}

510 
boﬁ


511 
	$js⁄_equÆ_obje˘
(c⁄° 
shash
 *
a
, c⁄° shash *
b
)

513 
shash_node
 *
a_node
;

515 i‡(
	`shash_cou¡
(
a
Ë!shash_cou¡(
b
)) {

516  
Ál£
;

519 
	`SHASH_FOR_EACH
 (
a_node
, 
a
) {

520 
shash_node
 *
b_node
 = 
	`shash_föd
(
b
, 
a_node
->
«me
);

521 i‡(!
b_node
 || !
	`js⁄_equÆ
(
a_node
->
d©a
, b_node->data)) {

522  
Ál£
;

526  
åue
;

527 
	}
}

529 
boﬁ


530 
	$js⁄_equÆ_¨øy
(c⁄° 
js⁄_¨øy
 *
a
, c⁄° js⁄_¨øy *
b
)

532 
size_t
 
i
;

534 i‡(
a
->
n
 !
b
->n) {

535  
Ál£
;

538 
i
 = 0; i < 
a
->
n
; i++) {

539 i‡(!
	`js⁄_equÆ
(
a
->
ñems
[
i
], 
b
->elems[i])) {

540  
Ál£
;

544  
åue
;

545 
	}
}

547 
boﬁ


548 
	$js⁄_equÆ
(c⁄° 
js⁄
 *
a
, c⁄° js⁄ *
b
)

550 i‡(
a
->
ty≥
 !
b
->type) {

551  
Ál£
;

554 
a
->
ty≥
) {

555 
JSON_OBJECT
:

556  
	`js⁄_equÆ_obje˘
(
a
->
u
.
obje˘
, 
b
->u.object);

558 
JSON_ARRAY
:

559  
	`js⁄_equÆ_¨øy
(&
a
->
u
.
¨øy
, &
b
->u.array);

561 
JSON_STRING
:

562  !
	`°rcmp
(
a
->
u
.
°rög
, 
b
->u.string);

564 
JSON_NULL
:

565 
JSON_FALSE
:

566 
JSON_TRUE
:

567  
åue
;

569 
JSON_INTEGER
:

570  
a
->
u
.
öãgî
 =
b
->u.integer;

572 
JSON_REAL
:

573  
a
->
u
.
ªÆ
 =
b
->u.real;

575 
JSON_N_TYPES
:

577 
	`NOT_REACHED
();

579 
	}
}

584 
	$js⁄_Àx_keyw‹d
(
js⁄_∑r£r
 *
p
)

586 
js⁄_tokí
 
tokí
;

587 c⁄° *
s
;

589 
s
 = 
	`ds_c°r
(&
p
->
buf„r
);

590 i‡(!
	`°rcmp
(
s
, "false")) {

591 
tokí
.
ty≥
 = 
T_FALSE
;

592 } i‡(!
	`°rcmp
(
s
, "true")) {

593 
tokí
.
ty≥
 = 
T_TRUE
;

594 } i‡(!
	`°rcmp
(
s
, "null")) {

595 
tokí
.
ty≥
 = 
T_NULL
;

597 
	`js⁄_îr‹
(
p
, "övÆid keyw‹d '%s'", 
s
);

600 
	`js⁄_∑r£r_öput
(
p
, &
tokí
);

601 
	}
}

604 
	$js⁄_Àx_numbî
(
js⁄_∑r£r
 *
p
)

606 c⁄° *
˝
 = 
	`ds_c°r
(&
p
->
buf„r
);

607 
signifiˇnd
 = 0;

608 
js⁄_tokí
 
tokí
;

609 
boﬁ
 
im¥eci£
 = 
Ál£
;

610 
boﬁ
 
√g©ive
 = 
Ál£
;

611 
pow10
 = 0;

614 i‡(*
˝
 == '-') {

615 
√g©ive
 = 
åue
;

616 
˝
++;

621 
signifiˇnd
 = 0;

622 i‡(*
˝
 == '0') {

623 
˝
++;

624 i‡(
	`isdigô
(*
˝
)) {

625 
	`js⁄_îr‹
(
p
, "leading zerosÇotállowed");

628 } i‡(
	`isdigô
(*
˝
)) {

630 i‡(
signifiˇnd
 <
ULLONG_MAX
 / 10) {

631 
signifiˇnd
 = signifiˇnd * 10 + (*
˝
 - '0');

633 
pow10
++;

634 i‡(*
˝
 != '0') {

635 
im¥eci£
 = 
åue
;

638 
˝
++;

639 } 
	`isdigô
(*
˝
));

641 
	`js⁄_îr‹
(
p
, "'-' must be followed by digit");

646 i‡(*
˝
 == '.') {

647 
˝
++;

648 i‡(!
	`isdigô
(*
˝
)) {

649 
	`js⁄_îr‹
(
p
, "decimalÖoint must be followed by digit");

653 i‡(
signifiˇnd
 <
ULLONG_MAX
 / 10) {

654 
signifiˇnd
 = signifiˇnd * 10 + (*
˝
 - '0');

655 
pow10
--;

656 } i‡(*
˝
 != '0') {

657 
im¥eci£
 = 
åue
;

659 
˝
++;

660 } 
	`isdigô
(*
˝
));

664 i‡(*
˝
 == 'e' || *cp == 'E') {

665 
boﬁ
 
√g©ive_exp⁄ít
 = 
Ál£
;

666 
exp⁄ít
;

668 
˝
++;

669 i‡(*
˝
 == '+') {

670 
˝
++;

671 } i‡(*
˝
 == '-') {

672 
√g©ive_exp⁄ít
 = 
åue
;

673 
˝
++;

676 i‡(!
	`isdigô
(*
˝
)) {

677 
	`js⁄_îr‹
(
p
, "exponent must containátÜeast one digit");

681 
exp⁄ít
 = 0;

683 i‡(
exp⁄ít
 >
INT_MAX
 / 10) {

684 
	`js⁄_îr‹
(
p
, "exponent outside validÑange");

687 
exp⁄ít
 =Éxp⁄íà* 10 + (*
˝
 - '0');

688 
˝
++;

689 } 
	`isdigô
(*
˝
));

691 i‡(
√g©ive_exp⁄ít
) {

692 
pow10
 -
exp⁄ít
;

694 
pow10
 +
exp⁄ít
;

698 i‡(*
˝
 != '\0') {

699 
	`js⁄_îr‹
(
p
, "syntaxÉrror inÇumber");

706 i‡(!
signifiˇnd
) {

707 
tokí
.
ty≥
 = 
T_INTEGER
;

708 
tokí
.
u
.
öãgî
 = 0;

709 
	`js⁄_∑r£r_öput
(
p
, &
tokí
);

713 i‡(!
im¥eci£
) {

714 
pow10
 > 0 && 
signifiˇnd
 < 
ULLONG_MAX
 / 10) {

715 
signifiˇnd
 *= 10;

716 
pow10
--;

718 
pow10
 < 0 && 
signifiˇnd
 % 10 == 0) {

719 
signifiˇnd
 /= 10;

720 
pow10
++;

722 i‡(
pow10
 == 0

723 && 
signifiˇnd
 <(
√g©ive


724 ? (Ë
LLONG_MAX
 + 1

725 : 
LLONG_MAX
)) {

726 
tokí
.
ty≥
 = 
T_INTEGER
;

727 
tokí
.
u
.
öãgî
 = 
√g©ive
 ? -
signifiˇnd
 : significand;

728 
	`js⁄_∑r£r_öput
(
p
, &
tokí
);

733 
tokí
.
ty≥
 = 
T_REAL
;

734 i‡(!
	`°r_to_doubÀ
(
	`ds_c°r
(&
p
->
buf„r
), &
tokí
.
u
.
ªÆ
)) {

735 
	`js⁄_îr‹
(
p
, "number outside validÑange");

739 i‡(
tokí
.
u
.
ªÆ
 == 0) {

740 
tokí
.
u
.
ªÆ
 = 0;

742 
	`js⁄_∑r£r_öput
(
p
, &
tokí
);

743 
	}
}

746 
	$js⁄_Àx_4hex
(c⁄° *
˝
, c⁄° *
íd
, *
vÆuï
)

748 
vÆue
;

750 i‡(
˝
 + 4 > 
íd
) {

754 
vÆue
 = 
	`hexôs_vÆue
(
˝
, 4, 
NULL
);

755 i‡(
vÆue
 =
UINT_MAX
) {

758 i‡(!
vÆue
) {

761 *
vÆuï
 = 
vÆue
;

762  
NULL
;

763 
	}
}

766 
	$js⁄_Àx_unicode
(c⁄° *
˝
, c⁄° *
íd
, 
ds
 *
out
)

768 c⁄° *
îr‹
;

769 
c0
, 
c1
;

771 
îr‹
 = 
	`js⁄_Àx_4hex
(
˝
, 
íd
, &
c0
);

772 i‡(
îr‹
) {

773 
	`ds_˛ór
(
out
);

774 
	`ds_put_c°r
(
out
, 
îr‹
);

775  
NULL
;

777 
˝
 += 4;

778 i‡(!
	`uc_is_Àadög_suºog©e
(
c0
)) {

779 
	`ds_put_utf8
(
out
, 
c0
);

780  
˝
;

783 i‡(
˝
 + 2 > 
íd
 || *cp++ != '\\' || *cp++ != 'u') {

784 
	`ds_˛ór
(
out
);

785 
	`ds_put_c°r
(
out
, "malformedÉscaped surrogateÖair");

786  
NULL
;

789 
îr‹
 = 
	`js⁄_Àx_4hex
(
˝
, 
íd
, &
c1
);

790 i‡(
îr‹
) {

791 
	`ds_˛ór
(
out
);

792 
	`ds_put_c°r
(
out
, 
îr‹
);

793  
NULL
;

795 
˝
 += 4;

796 i‡(!
	`uc_is_åaûög_suºog©e
(
c1
)) {

797 
	`ds_˛ór
(
out
);

798 
	`ds_put_c°r
(
out
, "second half ofÉscaped surrogateÖair isÇot "

800  
NULL
;

803 
	`ds_put_utf8
(
out
, 
	`utf16_decode_suºog©e_∑ú
(
c0
, 
c1
));

804  
˝
;

805 
	}
}

807 
boﬁ


808 
	$js⁄_°rög_u√sˇ≥
(c⁄° *
ö
, 
size_t
 
ö_Àn
, **
ouç
)

810 c⁄° *
íd
 = 
ö
 + 
ö_Àn
;

811 
boﬁ
 
ok
 = 
Ál£
;

812 
ds
 
out
;

814 
	`ds_öô
(&
out
);

815 
	`ds_ª£rve
(&
out
, 
ö_Àn
);

816 i‡(
ö_Àn
 > 0 && 
ö
[in_len - 1] == '\\') {

817 
	`ds_put_c°r
(&
out
, "quoted string mayÇotÉnd with backslash");

818 
exô
;

820 
ö
 < 
íd
) {

821 i‡(*
ö
 == '"') {

822 
	`ds_˛ór
(&
out
);

823 
	`ds_put_c°r
(&
out
, "quoted string mayÇot include unescaped \"");

824 
exô
;

826 i‡(*
ö
 != '\\') {

827 
	`ds_put_ch¨
(&
out
, *
ö
++);

831 
ö
++;

832 *
ö
++) {

834 
	`ds_put_ch¨
(&
out
, 
ö
[-1]);

838 
	`ds_put_ch¨
(&
out
, '\b');

842 
	`ds_put_ch¨
(&
out
, '\f');

846 
	`ds_put_ch¨
(&
out
, '\n');

850 
	`ds_put_ch¨
(&
out
, '\r');

854 
	`ds_put_ch¨
(&
out
, '\t');

858 
ö
 = 
	`js⁄_Àx_unicode
(ö, 
íd
, &
out
);

859 i‡(!
ö
) {

860 
exô
;

865 
	`ds_˛ór
(&
out
);

866 
	`ds_put_f‹m©
(&
out
, "badÉsˇ≥ \\%c", 
ö
[-1]);

867 
exô
;

870 
ok
 = 
åue
;

872 
exô
:

873 *
ouç
 = 
	`ds_c°r
(&
out
);

874  
ok
;

875 
	}
}

878 
	$js⁄_∑r£r_öput_°rög
(
js⁄_∑r£r
 *
p
, c⁄° *
s
)

880 
js⁄_tokí
 
tokí
;

882 
tokí
.
ty≥
 = 
T_STRING
;

883 
tokí
.
u
.
°rög
 = 
s
;

884 
	`js⁄_∑r£r_öput
(
p
, &
tokí
);

885 
	}
}

888 
	$js⁄_Àx_°rög
(
js⁄_∑r£r
 *
p
)

890 c⁄° *
øw
 = 
	`ds_c°r
(&
p
->
buf„r
);

891 i‡(!
	`°rchr
(
øw
, '\\')) {

892 
	`js⁄_∑r£r_öput_°rög
(
p
, 
øw
);

894 *
cooked
;

896 i‡(
	`js⁄_°rög_u√sˇ≥
(
øw
, 
	`°æí
‘aw), &
cooked
)) {

897 
	`js⁄_∑r£r_öput_°rög
(
p
, 
cooked
);

899 
	`js⁄_îr‹
(
p
, "%s", 
cooked
);

902 
	`‰ì
(
cooked
);

904 
	}
}

906 
boﬁ


907 
	$js⁄_Àx_öput
(
js⁄_∑r£r
 *
p
, 
c
)

909 
js⁄_tokí
 
tokí
;

911 
p
->
Àx_°©e
) {

912 
JSON_LEX_START
:

913 
c
) {

916  
åue
;

924 
p
->
Àx_°©e
 = 
JSON_LEX_KEYWORD
;

928 
tokí
.
ty≥
 = 
c
;

929 
	`js⁄_∑r£r_öput
(
p
, &
tokí
);

930  
åue
;

935 
p
->
Àx_°©e
 = 
JSON_LEX_NUMBER
;

939 
p
->
Àx_°©e
 = 
JSON_LEX_STRING
;

940  
åue
;

943 i‡(
	`i•röt
(
c
)) {

944 
	`js⁄_îr‹
(
p
, "övÆid ch¨a˘î '%c'", 
c
);

946 
	`js⁄_îr‹
(
p
, "övÆid ch¨a˘î U+%04x", 
c
);

948  
åue
;

952 
JSON_LEX_KEYWORD
:

953 i‡(!
	`ißÕha
((Ë
c
)) {

954 
	`js⁄_Àx_keyw‹d
(
p
);

955  
Ál£
;

959 
JSON_LEX_NUMBER
:

960 i‡(!
	`°rchr
(".0123456789eE-+", 
c
)) {

961 
	`js⁄_Àx_numbî
(
p
);

962  
Ál£
;

966 
JSON_LEX_STRING
:

967 i‡(
c
 == '\\') {

968 
p
->
Àx_°©e
 = 
JSON_LEX_ESCAPE
;

969 } i‡(
c
 == '"') {

970 
	`js⁄_Àx_°rög
(
p
);

971  
åue
;

972 } i‡(
c
 < 0x20) {

973 
	`js⁄_îr‹
(
p
, "U+%04X mu° bêesˇ≥d i¿quŸed såög", 
c
);

974  
åue
;

978 
JSON_LEX_ESCAPE
:

979 
p
->
Àx_°©e
 = 
JSON_LEX_STRING
;

983 
	`ab‹t
();

985 
	`ds_put_ch¨
(&
p
->
buf„r
, 
c
);

986  
åue
;

987 
	}
}

1005 
js⁄
 *

1006 
	$js⁄_‰om_°rög
(c⁄° *
°rög
)

1008 
js⁄_∑r£r
 *
p
 = 
	`js⁄_∑r£r_¸óã
(
JSPF_TRAILER
);

1009 
	`js⁄_∑r£r_„ed
(
p
, 
°rög
, 
	`°æí
(string));

1010  
	`js⁄_∑r£r_föish
(
p
);

1011 
	}
}

1021 
js⁄
 *

1022 
	$js⁄_‰om_fûe
(c⁄° *
fûe_«me
)

1024 
js⁄
 *json;

1025 
FILE
 *
°ªam
;

1027 
°ªam
 = 
	`f›í
(
fûe_«me
, "r");

1028 i‡(!
°ªam
) {

1029  
	`js⁄_°rög_¸óã_noc›y
(

1030 
	`xa•rötf
("îr‹ o≥nög \"%s\": %s", 
fûe_«me
, 
	`°ªº‹
(
î∫o
)));

1032 
js⁄
 = 
	`js⁄_‰om_°ªam
(
°ªam
);

1033 
	`f˛o£
(
°ªam
);

1035  
js⁄
;

1036 
	}
}

1046 
js⁄
 *

1047 
	$js⁄_‰om_°ªam
(
FILE
 *
°ªam
)

1049 
js⁄_∑r£r
 *
p
;

1050 
js⁄
 *json;

1052 
p
 = 
	`js⁄_∑r£r_¸óã
(
JSPF_TRAILER
);

1054 
buf„r
[
BUFSIZ
];

1055 
size_t
 
n
;

1057 
n
 = 
	`‰ód
(
buf„r
, 1,  buf„r, 
°ªam
);

1058 i‡(!
n
 || 
	`js⁄_∑r£r_„ed
(
p
, 
buf„r
,Ç) !=Ç) {

1062 
js⁄
 = 
	`js⁄_∑r£r_föish
(
p
);

1064 i‡(
	`„º‹
(
°ªam
)) {

1065 
	`js⁄_de°roy
(
js⁄
);

1066 
js⁄
 = 
	`js⁄_°rög_¸óã_noc›y
(

1067 
	`xa•rötf
("îr‹Ñódög JSON såóm: %s", 
	`°ªº‹
(
î∫o
)));

1070  
js⁄
;

1071 
	}
}

1073 
js⁄_∑r£r
 *

1074 
	$js⁄_∑r£r_¸óã
(
Êags
)

1076 
js⁄_∑r£r
 *
p
 = 
	`xzÆloc
( *p);

1077 
p
->
Êags
 = flags;

1078  
p
;

1079 
	}
}

1081 
size_t


1082 
	$js⁄_∑r£r_„ed
(
js⁄_∑r£r
 *
p
, c⁄° *
öput
, 
size_t
 
n
)

1084 
size_t
 
i
;

1085 
i
 = 0; !
p
->
d⁄e
 && i < 
n
; ) {

1086 i‡(
	`js⁄_Àx_öput
(
p
, 
öput
[
i
])) {

1087 
p
->
byã_numbî
++;

1088 i‡(
öput
[
i
] == '\n') {

1089 
p
->
cﬁumn_numbî
 = 0;

1090 
p
->
löe_numbî
++;

1092 
p
->
cﬁumn_numbî
++;

1094 
i
++;

1097  
i
;

1098 
	}
}

1100 
boﬁ


1101 
	$js⁄_∑r£r_is_d⁄e
(c⁄° 
js⁄_∑r£r
 *
p
)

1103  
p
->
d⁄e
;

1104 
	}
}

1106 
js⁄
 *

1107 
	$js⁄_∑r£r_föish
(
js⁄_∑r£r
 *
p
)

1109 
js⁄
 *json;

1111 
p
->
Àx_°©e
) {

1112 
JSON_LEX_START
:

1115 
JSON_LEX_STRING
:

1116 
JSON_LEX_ESCAPE
:

1117 
	`js⁄_îr‹
(
p
, "unexpectedÉnd of input in quoted string");

1120 
JSON_LEX_NUMBER
:

1121 
JSON_LEX_KEYWORD
:

1122 
	`js⁄_Àx_öput
(
p
, ' ');

1126 i‡(
p
->
∑r£_°©e
 =
JSON_PARSE_START
) {

1127 
	`js⁄_îr‹
(
p
, "empty input stream");

1128 } i‡(
p
->
∑r£_°©e
 !
JSON_PARSE_END
) {

1129 
	`js⁄_îr‹
(
p
, "unexpectedÉnd of input");

1132 i‡(!
p
->
îr‹
) {

1133 
	`as£π
(
p
->
height
 == 1);

1134 
	`as£π
(
p
->
°ack
[0].
js⁄
 !
NULL
);

1135 
js⁄
 = 
p
->
°ack
[--p->
height
].json;

1137 
js⁄
 = 
	`js⁄_°rög_¸óã_noc›y
(
p
->
îr‹
);

1138 
p
->
îr‹
 = 
NULL
;

1141 
	`js⁄_∑r£r_ab‹t
(
p
);

1143  
js⁄
;

1144 
	}
}

1147 
	$js⁄_∑r£r_ab‹t
(
js⁄_∑r£r
 *
p
)

1149 i‡(
p
) {

1150 
	`ds_de°roy
(&
p
->
buf„r
);

1151 i‡(
p
->
height
) {

1152 
	`js⁄_de°roy
(
p
->
°ack
[0].
js⁄
);

1154 
	`‰ì
(
p
->
°ack
);

1155 
	`‰ì
(
p
->
membî_«me
);

1156 
	`‰ì
(
p
->
îr‹
);

1157 
	`‰ì
(
p
);

1159 
	}
}

1161 
js⁄_∑r£r_node
 *

1162 
	$js⁄_∑r£r_t›
(
js⁄_∑r£r
 *
p
)

1164  &
p
->
°ack
[p->
height
 - 1];

1165 
	}
}

1168 
	$js⁄_∑r£r_put_vÆue
(
js⁄_∑r£r
 *
p
, 
js⁄
 *
vÆue
)

1170 
js⁄_∑r£r_node
 *
node
 = 
	`js⁄_∑r£r_t›
(
p
);

1171 i‡(
node
->
js⁄
->
ty≥
 =
JSON_OBJECT
) {

1172 
	`js⁄_obje˘_put
(
node
->
js⁄
, 
p
->
membî_«me
, 
vÆue
);

1173 
	`‰ì
(
p
->
membî_«me
);

1174 
p
->
membî_«me
 = 
NULL
;

1175 } i‡(
node
->
js⁄
->
ty≥
 =
JSON_ARRAY
) {

1176 
	`js⁄_¨øy_add
(
node
->
js⁄
, 
vÆue
);

1178 
	`NOT_REACHED
();

1180 
	}
}

1183 
	$js⁄_∑r£r_push
(
js⁄_∑r£r
 *
p
,

1184 
js⁄
 *
√w_js⁄
, 
js⁄_∑r£_°©e
 
√w_°©e
)

1186 i‡(
p
->
height
 < 
JSON_MAX_HEIGHT
) {

1187 
js⁄_∑r£r_node
 *
node
;

1189 i‡(
p
->
height
 >p->
Æloˇãd_height
) {

1190 
p
->
°ack
 = 
	`x2ƒóŒoc
’->°ack, &p->
Æloˇãd_height
,

1191  *
p
->
°ack
);

1194 i‡(
p
->
height
 > 0) {

1195 
	`js⁄_∑r£r_put_vÆue
(
p
, 
√w_js⁄
);

1198 
node
 = &
p
->
°ack
[p->
height
++];

1199 
node
->
js⁄
 = 
√w_js⁄
;

1200 
p
->
∑r£_°©e
 = 
√w_°©e
;

1202 
	`js⁄_de°roy
(
√w_js⁄
);

1203 
	`js⁄_îr‹
(
p
, "inputÉxceeds maximumÇesting depth %d",

1204 
JSON_MAX_HEIGHT
);

1206 
	}
}

1209 
	$js⁄_∑r£r_push_obje˘
(
js⁄_∑r£r
 *
p
)

1211 
	`js⁄_∑r£r_push
(
p
, 
	`js⁄_obje˘_¸óã
(), 
JSON_PARSE_OBJECT_INIT
);

1212 
	}
}

1215 
	$js⁄_∑r£r_push_¨øy
(
js⁄_∑r£r
 *
p
)

1217 
	`js⁄_∑r£r_push
(
p
, 
	`js⁄_¨øy_¸óã_em±y
(), 
JSON_PARSE_ARRAY_INIT
);

1218 
	}
}

1221 
	$js⁄_∑r£_vÆue
(
js⁄_∑r£r
 *
p
, 
js⁄_tokí
 *
tokí
,

1222 
js⁄_∑r£_°©e
 
√xt_°©e
)

1224 
js⁄
 *
vÆue
;

1226 
tokí
->
ty≥
) {

1227 
T_FALSE
:

1228 
vÆue
 = 
	`js⁄_boﬁón_¸óã
(
Ál£
);

1231 
T_NULL
:

1232 
vÆue
 = 
	`js⁄_nuŒ_¸óã
();

1235 
T_TRUE
:

1236 
vÆue
 = 
	`js⁄_boﬁón_¸óã
(
åue
);

1240 
	`js⁄_∑r£r_push_obje˘
(
p
);

1244 
	`js⁄_∑r£r_push_¨øy
(
p
);

1247 
T_INTEGER
:

1248 
vÆue
 = 
	`js⁄_öãgî_¸óã
(
tokí
->
u
.
öãgî
);

1251 
T_REAL
:

1252 
vÆue
 = 
	`js⁄_ªÆ_¸óã
(
tokí
->
u
.
ªÆ
);

1255 
T_STRING
:

1256 
vÆue
 = 
	`js⁄_°rög_¸óã
(
tokí
->
u
.
°rög
);

1259 
T_EOF
:

1265 
	`js⁄_îr‹
(
p
, "syntaxÉrrorÉxpecting value");

1269 
	`js⁄_∑r£r_put_vÆue
(
p
, 
vÆue
);

1270 
p
->
∑r£_°©e
 = 
√xt_°©e
;

1271 
	}
}

1274 
	$js⁄_∑r£r_p›
(
js⁄_∑r£r
 *
p
)

1276 
js⁄_∑r£r_node
 *
node
;

1279 
node
 = 
	`js⁄_∑r£r_t›
(
p
);

1280 i‡(
node
->
js⁄
->
ty≥
 =
JSON_ARRAY
) {

1281 
	`js⁄_¨øy_åim
(
node
->
js⁄
);

1285 i‡(
p
->
height
 == 1) {

1286 
p
->
∑r£_°©e
 = 
JSON_PARSE_END
;

1287 i‡(!(
p
->
Êags
 & 
JSPF_TRAILER
)) {

1288 
p
->
d⁄e
 = 
åue
;

1291 
p
->
height
--;

1292 
node
 = 
	`js⁄_∑r£r_t›
(
p
);

1293 i‡(
node
->
js⁄
->
ty≥
 =
JSON_ARRAY
) {

1294 
p
->
∑r£_°©e
 = 
JSON_PARSE_ARRAY_NEXT
;

1295 } i‡(
node
->
js⁄
->
ty≥
 =
JSON_OBJECT
) {

1296 
p
->
∑r£_°©e
 = 
JSON_PARSE_OBJECT_NEXT
;

1298 
	`NOT_REACHED
();

1301 
	}
}

1304 
	$js⁄_∑r£r_öput
(
js⁄_∑r£r
 *
p
, 
js⁄_tokí
 *
tokí
)

1306 
p
->
∑r£_°©e
) {

1307 
JSON_PARSE_START
:

1308 i‡(
tokí
->
ty≥
 == '{') {

1309 
	`js⁄_∑r£r_push_obje˘
(
p
);

1310 } i‡(
tokí
->
ty≥
 == '[') {

1311 
	`js⁄_∑r£r_push_¨øy
(
p
);

1313 
	`js⁄_îr‹
(
p
, "syntaxÉrrorát beginning of input");

1317 
JSON_PARSE_END
:

1318 
	`js⁄_îr‹
(
p
, "trailing garbageátÉnd of input");

1321 
JSON_PARSE_OBJECT_INIT
:

1322 i‡(
tokí
->
ty≥
 == '}') {

1323 
	`js⁄_∑r£r_p›
(
p
);

1327 
JSON_PARSE_OBJECT_NAME
:

1328 i‡(
tokí
->
ty≥
 =
T_STRING
) {

1329 
p
->
membî_«me
 = 
	`x°rdup
(
tokí
->
u
.
°rög
);

1330 
p
->
∑r£_°©e
 = 
JSON_PARSE_OBJECT_COLON
;

1332 
	`js⁄_îr‹
(
p
, "syntaxÉrrorÖarsing objectÉxpecting string");

1336 
JSON_PARSE_OBJECT_COLON
:

1337 i‡(
tokí
->
ty≥
 == ':') {

1338 
p
->
∑r£_°©e
 = 
JSON_PARSE_OBJECT_VALUE
;

1340 
	`js⁄_îr‹
(
p
, "syntaxÉrrorÖarsing objectÉxpecting ':'");

1344 
JSON_PARSE_OBJECT_VALUE
:

1345 
	`js⁄_∑r£_vÆue
(
p
, 
tokí
, 
JSON_PARSE_OBJECT_NEXT
);

1348 
JSON_PARSE_OBJECT_NEXT
:

1349 i‡(
tokí
->
ty≥
 == ',') {

1350 
p
->
∑r£_°©e
 = 
JSON_PARSE_OBJECT_NAME
;

1351 } i‡(
tokí
->
ty≥
 == '}') {

1352 
	`js⁄_∑r£r_p›
(
p
);

1354 
	`js⁄_îr‹
(
p
, "syntaxÉrrorÉxpecting '}' or ','");

1358 
JSON_PARSE_ARRAY_INIT
:

1359 i‡(
tokí
->
ty≥
 == ']') {

1360 
	`js⁄_∑r£r_p›
(
p
);

1364 
JSON_PARSE_ARRAY_VALUE
:

1365 
	`js⁄_∑r£_vÆue
(
p
, 
tokí
, 
JSON_PARSE_ARRAY_NEXT
);

1368 
JSON_PARSE_ARRAY_NEXT
:

1369 i‡(
tokí
->
ty≥
 == ',') {

1370 
p
->
∑r£_°©e
 = 
JSON_PARSE_ARRAY_VALUE
;

1371 } i‡(
tokí
->
ty≥
 == ']') {

1372 
	`js⁄_∑r£r_p›
(
p
);

1374 
	`js⁄_îr‹
(
p
, "syntaxÉrrorÉxpecting ']' or ','");

1379 
	`ab‹t
();

1382 
p
->
Àx_°©e
 = 
JSON_LEX_START
;

1383 
	`ds_˛ór
(&
p
->
buf„r
);

1384 
	}
}

1386 
js⁄
 *

1387 
	$js⁄_¸óã
(
js⁄_ty≥
 
ty≥
)

1389 
js⁄
 *js⁄ = 
	`xmÆloc
( *json);

1390 
js⁄
->
ty≥
 =Åype;

1391  
js⁄
;

1392 
	}
}

1395 
	$js⁄_îr‹
(
js⁄_∑r£r
 *
p
, c⁄° *
f‹m©
, ...)

1397 i‡(!
p
->
îr‹
) {

1398 
ds
 
msg
;

1399 
va_li°
 
¨gs
;

1401 
	`ds_öô
(&
msg
);

1402 
	`ds_put_f‹m©
(&
msg
, "line %d, column %d, byte %d: ",

1403 
p
->
löe_numbî
,Ö->
cﬁumn_numbî
,Ö->
byã_numbî
);

1404 
	`va_°¨t
(
¨gs
, 
f‹m©
);

1405 
	`ds_put_f‹m©_vÆi°
(&
msg
, 
f‹m©
, 
¨gs
);

1406 
	`va_íd
(
¨gs
);

1408 
p
->
îr‹
 = 
	`ds_°ól_c°r
(&
msg
);

1410 
p
->
d⁄e
 = 
åue
;

1412 
	}
}

1414 
	#SPACES_PER_LEVEL
 2

	)

1416 
	sjs⁄_£rülizî
 {

1417 
ds
 *
	mds
;

1418 
	mdïth
;

1419 
	mÊags
;

1422 
js⁄_£rülize
(c⁄° 
js⁄
 *, 
js⁄_£rülizî
 *);

1423 
js⁄_£rülize_obje˘
(c⁄° 
shash
 *
obje˘
,

1424 
js⁄_£rülizî
 *);

1425 
js⁄_£rülize_¨øy
(c⁄° 
js⁄_¨øy
 *,

1426 
js⁄_£rülizî
 *);

1427 
js⁄_£rülize_°rög
(c⁄° *, 
ds
 *);

1444 
	$js⁄_to_°rög
(c⁄° 
js⁄
 *js⁄, 
Êags
)

1446 
ds
 ds;

1448 
	`ds_öô
(&
ds
);

1449 
	`js⁄_to_ds
(
js⁄
, 
Êags
, &
ds
);

1450  
	`ds_°ól_c°r
(&
ds
);

1451 
	}
}

1455 
	$js⁄_to_ds
(c⁄° 
js⁄
 *js⁄, 
Êags
, 
ds
 *ds)

1457 
js⁄_£rülizî
 
s
;

1459 
s
.
ds
 = ds;

1460 
s
.
dïth
 = 0;

1461 
s
.
Êags
 = flags;

1462 
	`js⁄_£rülize
(
js⁄
, &
s
);

1463 
	}
}

1466 
	$js⁄_£rülize
(c⁄° 
js⁄
 *js⁄, 
js⁄_£rülizî
 *
s
)

1468 
ds
 *d†
s
->ds;

1470 
js⁄
->
ty≥
) {

1471 
JSON_NULL
:

1472 
	`ds_put_c°r
(
ds
, "null");

1475 
JSON_FALSE
:

1476 
	`ds_put_c°r
(
ds
, "false");

1479 
JSON_TRUE
:

1480 
	`ds_put_c°r
(
ds
, "true");

1483 
JSON_OBJECT
:

1484 
	`js⁄_£rülize_obje˘
(
js⁄
->
u
.
obje˘
, 
s
);

1487 
JSON_ARRAY
:

1488 
	`js⁄_£rülize_¨øy
(&
js⁄
->
u
.
¨øy
, 
s
);

1491 
JSON_INTEGER
:

1492 
	`ds_put_f‹m©
(
ds
, "%Œd", 
js⁄
->
u
.
öãgî
);

1495 
JSON_REAL
:

1496 
	`ds_put_f‹m©
(
ds
, "%.*g", 
DBL_DIG
, 
js⁄
->
u
.
ªÆ
);

1499 
JSON_STRING
:

1500 
	`js⁄_£rülize_°rög
(
js⁄
->
u
.
°rög
, 
ds
);

1503 
JSON_N_TYPES
:

1505 
	`NOT_REACHED
();

1507 
	}
}

1510 
	$ödít_löe
(
js⁄_£rülizî
 *
s
)

1512 i‡(
s
->
Êags
 & 
JSSF_PRETTY
) {

1513 
	`ds_put_ch¨
(
s
->
ds
, '\n');

1514 
	`ds_put_ch¨_mu…ùÀ
(
s
->
ds
, ' ', 
SPACES_PER_LEVEL
 * s->
dïth
);

1516 
	}
}

1519 
	$js⁄_£rülize_obje˘_membî
(
size_t
 
i
, c⁄° 
shash_node
 *
node
,

1520 
js⁄_£rülizî
 *
s
)

1522 
ds
 *d†
s
->ds;

1524 i‡(
i
) {

1525 
	`ds_put_ch¨
(
ds
, ',');

1526 
	`ödít_löe
(
s
);

1529 
	`js⁄_£rülize_°rög
(
node
->
«me
, 
ds
);

1530 
	`ds_put_ch¨
(
ds
, ':');

1531 i‡(
s
->
Êags
 & 
JSSF_PRETTY
) {

1532 
	`ds_put_ch¨
(
ds
, ' ');

1534 
	`js⁄_£rülize
(
node
->
d©a
, 
s
);

1535 
	}
}

1538 
	$js⁄_£rülize_obje˘
(c⁄° 
shash
 *
obje˘
, 
js⁄_£rülizî
 *
s
)

1540 
ds
 *d†
s
->ds;

1542 
	`ds_put_ch¨
(
ds
, '{');

1544 
s
->
dïth
++;

1545 
	`ödít_löe
(
s
);

1547 i‡(
s
->
Êags
 & 
JSSF_SORT
) {

1548 c⁄° 
shash_node
 **
nodes
;

1549 
size_t
 
n
, 
i
;

1551 
nodes
 = 
	`shash_s‹t
(
obje˘
);

1552 
n
 = 
	`shash_cou¡
(
obje˘
);

1553 
i
 = 0; i < 
n
; i++) {

1554 
	`js⁄_£rülize_obje˘_membî
(
i
, 
nodes
[i], 
s
);

1556 
	`‰ì
(
nodes
);

1558 
shash_node
 *
node
;

1559 
size_t
 
i
;

1561 
i
 = 0;

1562 
	`SHASH_FOR_EACH
 (
node
, 
obje˘
) {

1563 
	`js⁄_£rülize_obje˘_membî
(
i
++, 
node
, 
s
);

1567 
	`ds_put_ch¨
(
ds
, '}');

1568 
s
->
dïth
--;

1569 
	}
}

1572 
	$js⁄_£rülize_¨øy
(c⁄° 
js⁄_¨øy
 *
¨øy
, 
js⁄_£rülizî
 *
s
)

1574 
ds
 *d†
s
->ds;

1575 
size_t
 
i
;

1577 
	`ds_put_ch¨
(
ds
, '[');

1578 
s
->
dïth
++;

1580 i‡(
¨øy
->
n
 > 0) {

1581 
	`ödít_löe
(
s
);

1583 
i
 = 0; i < 
¨øy
->
n
; i++) {

1584 i‡(
i
) {

1585 
	`ds_put_ch¨
(
ds
, ',');

1586 
	`ödít_löe
(
s
);

1588 
	`js⁄_£rülize
(
¨øy
->
ñems
[
i
], 
s
);

1592 
s
->
dïth
--;

1593 
	`ds_put_ch¨
(
ds
, ']');

1594 
	}
}

1597 
	$js⁄_£rülize_°rög
(c⁄° *
°rög
, 
ds
 *ds)

1599 
uöt8_t
 
c
;

1601 
	`ds_put_ch¨
(
ds
, '"');

1602 (
c
 = *
°rög
++) != '\0') {

1603 
c
) {

1605 
	`ds_put_c°r
(
ds
, "\\\"");

1609 
	`ds_put_c°r
(
ds
, "\\\\");

1613 
	`ds_put_c°r
(
ds
, "\\b");

1617 
	`ds_put_c°r
(
ds
, "\\f");

1621 
	`ds_put_c°r
(
ds
, "\\n");

1625 
	`ds_put_c°r
(
ds
, "\\r");

1629 
	`ds_put_c°r
(
ds
, "\\t");

1633 i‡(
c
 >= 32) {

1634 
	`ds_put_ch¨
(
ds
, 
c
);

1636 
	`ds_put_f‹m©
(
ds
, "\\u%04x", 
c
);

1641 
	`ds_put_ch¨
(
ds
, '"');

1642 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/json.h

17 #i‚de‡
JSON_H


18 
	#JSON_H
 1

	)

33 
	~"shash.h
"

35 #ifde‡ 
__˝lu•lus


39 
ds
;

42 
	ejs⁄_ty≥
 {

43 
JSON_NULL
,

44 
JSON_FALSE
,

45 
JSON_TRUE
,

46 
JSON_OBJECT
,

47 
JSON_ARRAY
,

48 
JSON_INTEGER
,

49 
JSON_REAL
,

50 
JSON_STRING
,

51 
JSON_N_TYPES


54 c⁄° *
js⁄_ty≥_to_°rög
(
js⁄_ty≥
);

57 
	sjs⁄_¨øy
 {

58 
size_t
 
n
, 
n_Æloˇãd
;

59 
js⁄
 **
ñems
;

63 
	sjs⁄
 {

64 
js⁄_ty≥
 
ty≥
;

66 
shash
 *
obje˘
;

67 
js⁄_¨øy
 
¨øy
;

68 
öãgî
;

69 
ªÆ
;

70 *
°rög
;

71 } 
u
;

74 
js⁄
 *
js⁄_nuŒ_¸óã
();

75 
js⁄
 *
js⁄_boﬁón_¸óã
(
boﬁ
);

76 
js⁄
 *
js⁄_°rög_¸óã
(const *);

77 
js⁄
 *
js⁄_°rög_¸óã_noc›y
(*);

78 
js⁄
 *
js⁄_öãgî_¸óã
();

79 
js⁄
 *
js⁄_ªÆ_¸óã
();

81 
js⁄
 *
js⁄_¨øy_¸óã_em±y
();

82 
js⁄_¨øy_add
(
js⁄
 *, js⁄ *
ñemít
);

83 
js⁄_¨øy_åim
(
js⁄
 *);

84 
js⁄
 *
js⁄_¨øy_¸óã
(js⁄ **, 
size_t
 
n
);

85 
js⁄
 *
js⁄_¨øy_¸óã_1
(json *);

86 
js⁄
 *
js⁄_¨øy_¸óã_2
(json *, json *);

87 
js⁄
 *
js⁄_¨øy_¸óã_3
(json *, json *, json *);

89 
js⁄
 *
js⁄_obje˘_¸óã
();

90 
js⁄_obje˘_put
(
js⁄
 *, c⁄° *
«me
, js⁄ *
vÆue
);

91 
js⁄_obje˘_put_°rög
(
js⁄
 *,

92 c⁄° *
«me
, c⁄° *
vÆue
);

94 c⁄° *
js⁄_°rög
(c⁄° 
js⁄
 *);

95 
js⁄_¨øy
 *js⁄_¨øy(c⁄° 
js⁄
 *);

96 
shash
 *
js⁄_obje˘
(c⁄° 
js⁄
 *);

97 
boﬁ
 
js⁄_boﬁón
(c⁄° 
js⁄
 *);

98 
js⁄_ªÆ
(c⁄° 
js⁄
 *);

99 
öt64_t
 
js⁄_öãgî
(c⁄° 
js⁄
 *);

101 
js⁄
 *
js⁄_˛⁄e
(const json *);

102 
js⁄_de°roy
(
js⁄
 *);

104 
size_t
 
js⁄_hash
(c⁄° 
js⁄
 *, size_à
basis
);

105 
boﬁ
 
js⁄_equÆ
(c⁄° 
js⁄
 *, const json *);

109 
JSPF_TRAILER
 = 1 << 0

112 
js⁄_∑r£r
 *
js⁄_∑r£r_¸óã
(
Êags
);

113 
size_t
 
js⁄_∑r£r_„ed
(
js⁄_∑r£r
 *, const *, size_t);

114 
boﬁ
 
js⁄_∑r£r_is_d⁄e
(c⁄° 
js⁄_∑r£r
 *);

115 
js⁄
 *
js⁄_∑r£r_föish
(
js⁄_∑r£r
 *);

116 
js⁄_∑r£r_ab‹t
(
js⁄_∑r£r
 *);

118 
js⁄
 *
js⁄_‰om_°rög
(c⁄° *
°rög
);

119 
js⁄
 *
js⁄_‰om_fûe
(c⁄° *
fûe_«me
);

120 
js⁄
 *
js⁄_‰om_°ªam
(
FILE
 *
°ªam
);

125 
JSSF_PRETTY
 = 1 << 0,

126 
JSSF_SORT
 = 1 << 1

128 *
js⁄_to_°rög
(c⁄° 
js⁄
 *, 
Êags
);

129 
js⁄_to_ds
(c⁄° 
js⁄
 *, 
Êags
, 
ds
 *);

133 
boﬁ
 
js⁄_°rög_u√sˇ≥
(c⁄° *
ö
, 
size_t
 
ö_Àn
, **
ouç
);

135 #ifde‡ 
__˝lu•lus


	@/home/lsch/mytest/openvswitch-1.9.0/lib/jsonrpc.c

17 
	~<c⁄fig.h
>

19 
	~"js⁄Ωc.h
"

21 
	~<as£π.h
>

22 
	~<î∫o.h
>

24 
	~"byãq.h
"

25 
	~"dy«mic-°rög.h
"

26 
	~"Áèl-sig«l.h
"

27 
	~"js⁄.h
"

28 
	~"li°.h
"

29 
	~"oÂbuf.h
"

30 
	~"pﬁl-lo›.h
"

31 
	~"ªc⁄√˘.h
"

32 
	~"°ªam.h
"

33 
	~"timevÆ.h
"

34 
	~"vlog.h
"

36 
VLOG_DEFINE_THIS_MODULE
(
js⁄Ωc
);

38 
	sjs⁄Ωc
 {

39 
°ªam
 *
	m°ªam
;

40 *
	m«me
;

41 
	m°©us
;

44 
byãq
 
	möput
;

45 
js⁄_∑r£r
 *
	m∑r£r
;

46 
js⁄Ωc_msg
 *
	mª˚ived
;

49 
li°
 
	mouçut
;

50 
size_t
 
	mbacklog
;

54 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(5, 5);

56 
js⁄Ωc_ª˚ived
(
js⁄Ωc
 *);

57 
js⁄Ωc_˛ónup
(
js⁄Ωc
 *);

58 
js⁄Ωc_îr‹
(
js⁄Ωc
 *, 
îr‹
);

63 
	$js⁄Ωc_°ªam_›í
(c⁄° *
«me
, 
°ªam
 **
°ªamp
, 
uöt8_t
 
ds˝
)

65  
	`°ªam_›í_wôh_deÁu…_p‹ts
(
«me
, 
JSONRPC_TCP_PORT
,

66 
JSONRPC_SSL_PORT
, 
°ªamp
,

67 
ds˝
);

68 
	}
}

73 
	$js⁄Ωc_p°ªam_›í
(c⁄° *
«me
, 
p°ªam
 **
p°ªamp
, 
uöt8_t
 
ds˝
)

75  
	`p°ªam_›í_wôh_deÁu…_p‹ts
(
«me
, 
JSONRPC_TCP_PORT
,

76 
JSONRPC_SSL_PORT
, 
p°ªamp
, 
ds˝
);

77 
	}
}

81 
js⁄Ωc
 *

82 
	$js⁄Ωc_›í
(
°ªam
 *stream)

84 
js⁄Ωc
 *
Ωc
;

86 
	`as£π
(
°ªam
 !
NULL
);

88 
Ωc
 = 
	`xzÆloc
( *rpc);

89 
Ωc
->
«me
 = 
	`x°rdup
(
	`°ªam_gë_«me
(
°ªam
));

90 
Ωc
->
°ªam
 = stream;

91 
	`byãq_öô
(&
Ωc
->
öput
);

92 
	`li°_öô
(&
Ωc
->
ouçut
);

94  
Ωc
;

95 
	}
}

100 
	$js⁄Ωc_˛o£
(
js⁄Ωc
 *
Ωc
)

102 i‡(
Ωc
) {

103 
	`js⁄Ωc_˛ónup
(
Ωc
);

104 
	`‰ì
(
Ωc
->
«me
);

105 
	`‰ì
(
Ωc
);

107 
	}
}

111 
	$js⁄Ωc_run
(
js⁄Ωc
 *
Ωc
)

113 i‡(
Ωc
->
°©us
) {

117 
	`°ªam_run
(
Ωc
->
°ªam
);

118 !
	`li°_is_em±y
(&
Ωc
->
ouçut
)) {

119 
oÂbuf
 *
buf
 = 
	`oÂbuf_‰om_li°
(
Ωc
->
ouçut
.
√xt
);

120 
ªtvÆ
;

122 
ªtvÆ
 = 
	`°ªam_£nd
(
Ωc
->
°ªam
, 
buf
->
d©a
, buf->
size
);

123 i‡(
ªtvÆ
 >= 0) {

124 
Ωc
->
backlog
 -
ªtvÆ
;

125 
	`oÂbuf_puŒ
(
buf
, 
ªtvÆ
);

126 i‡(!
buf
->
size
) {

127 
	`li°_ªmove
(&
buf
->
li°_node
);

128 
	`oÂbuf_dñëe
(
buf
);

131 i‡(
ªtvÆ
 !-
EAGAIN
) {

132 
	`VLOG_WARN_RL
(&
æ
, "%s: sendÉrror: %s",

133 
Ωc
->
«me
, 
	`°ªº‹
(-
ªtvÆ
));

134 
	`js⁄Ωc_îr‹
(
Ωc
, -
ªtvÆ
);

139 
	}
}

144 
	$js⁄Ωc_waô
(
js⁄Ωc
 *
Ωc
)

146 i‡(!
Ωc
->
°©us
) {

147 
	`°ªam_run_waô
(
Ωc
->
°ªam
);

148 i‡(!
	`li°_is_em±y
(&
Ωc
->
ouçut
)) {

149 
	`°ªam_£nd_waô
(
Ωc
->
°ªam
);

152 
	}
}

167 
	$js⁄Ωc_gë_°©us
(c⁄° 
js⁄Ωc
 *
Ωc
)

169  
Ωc
->
°©us
;

170 
	}
}

175 
size_t


176 
	$js⁄Ωc_gë_backlog
(c⁄° 
js⁄Ωc
 *
Ωc
)

178  
Ωc
->
°©us
 ? 0 :Ñpc->
backlog
;

179 
	}
}

184 
	$js⁄Ωc_gë_ª˚ived_byãs
(c⁄° 
js⁄Ωc
 *
Ωc
)

186  
Ωc
->
öput
.
hód
;

187 
	}
}

192 
	$js⁄Ωc_gë_«me
(c⁄° 
js⁄Ωc
 *
Ωc
)

194  
Ωc
->
«me
;

195 
	}
}

198 
	$js⁄Ωc_log_msg
(c⁄° 
js⁄Ωc
 *
Ωc
, c⁄° *
tôÀ
,

199 c⁄° 
js⁄Ωc_msg
 *
msg
)

201 i‡(
	`VLOG_IS_DBG_ENABLED
()) {

202 
ds
 
s
 = 
DS_EMPTY_INITIALIZER
;

203 i‡(
msg
->
mëhod
) {

204 
	`ds_put_f‹m©
(&
s
, ", mëhod=\"%s\"", 
msg
->
mëhod
);

206 i‡(
msg
->
∑øms
) {

207 
	`ds_put_c°r
(&
s
, ",Öarams=");

208 
	`js⁄_to_ds
(
msg
->
∑øms
, 0, &
s
);

210 i‡(
msg
->
ªsu…
) {

211 
	`ds_put_c°r
(&
s
, ",Ñesult=");

212 
	`js⁄_to_ds
(
msg
->
ªsu…
, 0, &
s
);

214 i‡(
msg
->
îr‹
) {

215 
	`ds_put_c°r
(&
s
, ",Érror=");

216 
	`js⁄_to_ds
(
msg
->
îr‹
, 0, &
s
);

218 i‡(
msg
->
id
) {

219 
	`ds_put_c°r
(&
s
, ", id=");

220 
	`js⁄_to_ds
(
msg
->
id
, 0, &
s
);

222 
	`VLOG_DBG
("%s: %†%s%s", 
Ωc
->
«me
, 
tôÀ
,

223 
	`js⁄Ωc_msg_ty≥_to_°rög
(
msg
->
ty≥
), 
	`ds_c°r
(&
s
));

224 
	`ds_de°roy
(&
s
);

226 
	}
}

238 
	$js⁄Ωc_£nd
(
js⁄Ωc
 *
Ωc
, 
js⁄Ωc_msg
 *
msg
)

240 
oÂbuf
 *
buf
;

241 
js⁄
 *json;

242 
size_t
 
Àngth
;

243 *
s
;

245 i‡(
Ωc
->
°©us
) {

246 
	`js⁄Ωc_msg_de°roy
(
msg
);

247  
Ωc
->
°©us
;

250 
	`js⁄Ωc_log_msg
(
Ωc
, "£nd", 
msg
);

252 
js⁄
 = 
	`js⁄Ωc_msg_to_js⁄
(
msg
);

253 
s
 = 
	`js⁄_to_°rög
(
js⁄
, 0);

254 
Àngth
 = 
	`°æí
(
s
);

255 
	`js⁄_de°roy
(
js⁄
);

257 
buf
 = 
	`xmÆloc
( *buf);

258 
	`oÂbuf_u£
(
buf
, 
s
, 
Àngth
);

259 
buf
->
size
 = 
Àngth
;

260 
	`li°_push_back
(&
Ωc
->
ouçut
, &
buf
->
li°_node
);

261 
Ωc
->
backlog
 +
Àngth
;

263 i‡(
Ωc
->
backlog
 =
Àngth
) {

264 
	`js⁄Ωc_run
(
Ωc
);

266  
Ωc
->
°©us
;

267 
	}
}

286 
	$js⁄Ωc_ªcv
(
js⁄Ωc
 *
Ωc
, 
js⁄Ωc_msg
 **
msgp
)

288 
i
;

290 *
msgp
 = 
NULL
;

291 i‡(
Ωc
->
°©us
) {

292  
Ωc
->
°©us
;

295 
i
 = 0; i < 50; i++) {

296 i‡(
Ωc
->
ª˚ived
) {

297 *
msgp
 = 
Ωc
->
ª˚ived
;

298 
Ωc
->
ª˚ived
 = 
NULL
;

300 } i‡(
	`byãq_is_em±y
(&
Ωc
->
öput
)) {

301 
size_t
 
chunk
;

302 
ªtvÆ
;

304 
chunk
 = 
	`byãq_hódroom
(&
Ωc
->
öput
);

305 
ªtvÆ
 = 
	`°ªam_ªcv
(
Ωc
->
°ªam
, 
	`byãq_hód
(&Ωc->
öput
), 
chunk
);

306 i‡(
ªtvÆ
 < 0) {

307 i‡(
ªtvÆ
 =-
EAGAIN
) {

308  
EAGAIN
;

310 
	`VLOG_WARN_RL
(&
æ
, "%s:ÑeceiveÉrror: %s",

311 
Ωc
->
«me
, 
	`°ªº‹
(-
ªtvÆ
));

312 
	`js⁄Ωc_îr‹
(
Ωc
, -
ªtvÆ
);

313  
Ωc
->
°©us
;

315 } i‡(
ªtvÆ
 == 0) {

316 
	`js⁄Ωc_îr‹
(
Ωc
, 
EOF
);

317  
EOF
;

319 
	`byãq_adv™˚_hód
(&
Ωc
->
öput
, 
ªtvÆ
);

321 
size_t
 
n
, 
u£d
;

323 i‡(!
Ωc
->
∑r£r
) {

324 
Ωc
->
∑r£r
 = 
	`js⁄_∑r£r_¸óã
(0);

326 
n
 = 
	`byãq_èûroom
(&
Ωc
->
öput
);

327 
u£d
 = 
	`js⁄_∑r£r_„ed
(
Ωc
->
∑r£r
,

328 (*Ë
	`byãq_èû
(&
Ωc
->
öput
), 
n
);

329 
	`byãq_adv™˚_èû
(&
Ωc
->
öput
, 
u£d
);

330 i‡(
	`js⁄_∑r£r_is_d⁄e
(
Ωc
->
∑r£r
)) {

331 
	`js⁄Ωc_ª˚ived
(
Ωc
);

332 i‡(
Ωc
->
°©us
) {

333 c⁄° 
byãq
 *
q
 = &
Ωc
->
öput
;

334 i‡(
q
->
hód
 <
BYTEQ_SIZE
) {

335 
	`°ªam_ªp‹t_c⁄ã¡
(
q
->
buf„r
, q->
hód
,

336 
STREAM_JSONRPC
,

337 
THIS_MODULE
, 
Ωc
->
«me
);

339  
Ωc
->
°©us
;

345  
EAGAIN
;

346 
	}
}

351 
	$js⁄Ωc_ªcv_waô
(
js⁄Ωc
 *
Ωc
)

353 i‡(
Ωc
->
°©us
 ||Ñpc->
ª˚ived
 || !
	`byãq_is_em±y
(&Ωc->
öput
)) {

354 (
pﬁl_immedüã_wake
)(
Ωc
->
«me
);

356 
	`°ªam_ªcv_waô
(
Ωc
->
°ªam
);

358 
	}
}

366 
	$js⁄Ωc_£nd_block
(
js⁄Ωc
 *
Ωc
, 
js⁄Ωc_msg
 *
msg
)

368 
îr‹
;

370 
	`Áèl_sig«l_run
();

372 
îr‹
 = 
	`js⁄Ωc_£nd
(
Ωc
, 
msg
);

373 i‡(
îr‹
) {

374  
îr‹
;

378 
	`js⁄Ωc_run
(
Ωc
);

379 i‡(
	`li°_is_em±y
(&
Ωc
->
ouçut
Ë||Ñpc->
°©us
) {

380  
Ωc
->
°©us
;

382 
	`js⁄Ωc_waô
(
Ωc
);

383 
	`pﬁl_block
();

385 
	}
}

390 
	$js⁄Ωc_ªcv_block
(
js⁄Ωc
 *
Ωc
, 
js⁄Ωc_msg
 **
msgp
)

393 
îr‹
 = 
	`js⁄Ωc_ªcv
(
Ωc
, 
msgp
);

394 i‡(
îr‹
 !
EAGAIN
) {

395 
	`Áèl_sig«l_run
();

396  
îr‹
;

399 
	`js⁄Ωc_run
(
Ωc
);

400 
	`js⁄Ωc_waô
(
Ωc
);

401 
	`js⁄Ωc_ªcv_waô
(
Ωc
);

402 
	`pﬁl_block
();

404 
	}
}

416 
	$js⁄Ωc_å™ß˘_block
(
js⁄Ωc
 *
Ωc
, 
js⁄Ωc_msg
 *
ªque°
,

417 
js⁄Ωc_msg
 **
ª∂yp
)

419 
js⁄Ωc_msg
 *
ª∂y
 = 
NULL
;

420 
js⁄
 *
id
;

421 
îr‹
;

423 
id
 = 
	`js⁄_˛⁄e
(
ªque°
->id);

424 
îr‹
 = 
	`js⁄Ωc_£nd_block
(
Ωc
, 
ªque°
);

425 i‡(!
îr‹
) {

427 
îr‹
 = 
	`js⁄Ωc_ªcv_block
(
Ωc
, &
ª∂y
);

428 i‡(
îr‹
) {

431 i‡((
ª∂y
->
ty≥
 =
JSONRPC_REPLY
 ||Ñïly->ty≥ =
JSONRPC_ERROR
)

432 && 
	`js⁄_equÆ
(
id
, 
ª∂y
->id)) {

435 
	`js⁄Ωc_msg_de°roy
(
ª∂y
);

438 *
ª∂yp
 = 
îr‹
 ? 
NULL
 : 
ª∂y
;

439 
	`js⁄_de°roy
(
id
);

440  
îr‹
;

441 
	}
}

444 
	$js⁄Ωc_ª˚ived
(
js⁄Ωc
 *
Ωc
)

446 
js⁄Ωc_msg
 *
msg
;

447 
js⁄
 *json;

448 *
îr‹
;

450 
js⁄
 = 
	`js⁄_∑r£r_föish
(
Ωc
->
∑r£r
);

451 
Ωc
->
∑r£r
 = 
NULL
;

452 i‡(
js⁄
->
ty≥
 =
JSON_STRING
) {

453 
	`VLOG_WARN_RL
(&
æ
, "%s:ÉrrorÖarsing stream: %s",

454 
Ωc
->
«me
, 
	`js⁄_°rög
(
js⁄
));

455 
	`js⁄Ωc_îr‹
(
Ωc
, 
EPROTO
);

456 
	`js⁄_de°roy
(
js⁄
);

460 
îr‹
 = 
	`js⁄Ωc_msg_‰om_js⁄
(
js⁄
, &
msg
);

461 i‡(
îr‹
) {

462 
	`VLOG_WARN_RL
(&
æ
, "%s:Ñeceived bad JSON-RPC message: %s",

463 
Ωc
->
«me
, 
îr‹
);

464 
	`‰ì
(
îr‹
);

465 
	`js⁄Ωc_îr‹
(
Ωc
, 
EPROTO
);

469 
	`js⁄Ωc_log_msg
(
Ωc
, "ª˚ived", 
msg
);

470 
Ωc
->
ª˚ived
 = 
msg
;

471 
	}
}

474 
	$js⁄Ωc_îr‹
(
js⁄Ωc
 *
Ωc
, 
îr‹
)

476 
	`as£π
(
îr‹
);

477 i‡(!
Ωc
->
°©us
) {

478 
Ωc
->
°©us
 = 
îr‹
;

479 
	`js⁄Ωc_˛ónup
(
Ωc
);

481 
	}
}

484 
	$js⁄Ωc_˛ónup
(
js⁄Ωc
 *
Ωc
)

486 
	`°ªam_˛o£
(
Ωc
->
°ªam
);

487 
Ωc
->
°ªam
 = 
NULL
;

489 
	`js⁄_∑r£r_ab‹t
(
Ωc
->
∑r£r
);

490 
Ωc
->
∑r£r
 = 
NULL
;

492 
	`js⁄Ωc_msg_de°roy
(
Ωc
->
ª˚ived
);

493 
Ωc
->
ª˚ived
 = 
NULL
;

495 
	`oÂbuf_li°_dñëe
(&
Ωc
->
ouçut
);

496 
Ωc
->
backlog
 = 0;

497 
	}
}

499 
js⁄Ωc_msg
 *

500 
	$js⁄Ωc_¸óã
(
js⁄Ωc_msg_ty≥
 
ty≥
, c⁄° *
mëhod
,

501 
js⁄
 *
∑øms
, js⁄ *
ªsu…
, js⁄ *
îr‹
,

502 
js⁄
 *
id
)

504 
js⁄Ωc_msg
 *
msg
 = 
	`xmÆloc
( *msg);

505 
msg
->
ty≥
 =Åype;

506 
msg
->
mëhod
 = mëhod ? 
	`x°rdup
(mëhodË: 
NULL
;

507 
msg
->
∑øms
 =Öarams;

508 
msg
->
ªsu…
 =Ñesult;

509 
msg
->
îr‹
 =Érror;

510 
msg
->
id
 = id;

511  
msg
;

512 
	}
}

514 
js⁄
 *

515 
	$js⁄Ωc_¸óã_id
()

517 
id
;

518  
	`js⁄_öãgî_¸óã
(
id
++);

519 
	}
}

521 
js⁄Ωc_msg
 *

522 
	$js⁄Ωc_¸óã_ªque°
(c⁄° *
mëhod
, 
js⁄
 *
∑øms
,

523 
js⁄
 **
idp
)

525 
js⁄
 *
id
 = 
	`js⁄Ωc_¸óã_id
();

526 i‡(
idp
) {

527 *
idp
 = 
	`js⁄_˛⁄e
(
id
);

529  
	`js⁄Ωc_¸óã
(
JSONRPC_REQUEST
, 
mëhod
, 
∑øms
, 
NULL
, NULL, 
id
);

530 
	}
}

532 
js⁄Ωc_msg
 *

533 
	$js⁄Ωc_¸óã_nŸify
(c⁄° *
mëhod
, 
js⁄
 *
∑øms
)

535  
	`js⁄Ωc_¸óã
(
JSONRPC_NOTIFY
, 
mëhod
, 
∑øms
, 
NULL
, NULL, NULL);

536 
	}
}

538 
js⁄Ωc_msg
 *

539 
	$js⁄Ωc_¸óã_ª∂y
(
js⁄
 *
ªsu…
, c⁄° js⁄ *
id
)

541  
	`js⁄Ωc_¸óã
(
JSONRPC_REPLY
, 
NULL
, NULL, 
ªsu…
, NULL,

542 
	`js⁄_˛⁄e
(
id
));

543 
	}
}

545 
js⁄Ωc_msg
 *

546 
	$js⁄Ωc_¸óã_îr‹
(
js⁄
 *
îr‹
, c⁄° js⁄ *
id
)

548  
	`js⁄Ωc_¸óã
(
JSONRPC_REPLY
, 
NULL
, NULL, NULL, 
îr‹
,

549 
	`js⁄_˛⁄e
(
id
));

550 
	}
}

553 
	$js⁄Ωc_msg_ty≥_to_°rög
(
js⁄Ωc_msg_ty≥
 
ty≥
)

555 
ty≥
) {

556 
JSONRPC_REQUEST
:

559 
JSONRPC_NOTIFY
:

562 
JSONRPC_REPLY
:

565 
JSONRPC_ERROR
:

569 
	}
}

572 
	$js⁄Ωc_msg_is_vÆid
(c⁄° 
js⁄Ωc_msg
 *
m
)

574 c⁄° *
ty≥_«me
;

575 
∑âîn
;

577 i‡(
m
->
∑øms
 && m->∑øms->
ty≥
 !
JSON_ARRAY
) {

578  
	`x°rdup
("\"params\" must be JSONárray");

581 
m
->
ty≥
) {

582 
JSONRPC_REQUEST
:

583 
∑âîn
 = 0x11001;

586 
JSONRPC_NOTIFY
:

587 
∑âîn
 = 0x11000;

590 
JSONRPC_REPLY
:

591 
∑âîn
 = 0x00101;

594 
JSONRPC_ERROR
:

595 
∑âîn
 = 0x00011;

599  
	`xa•rötf
("övÆid JSON-RPC mesßgêty≥ %d", 
m
->
ty≥
);

602 
ty≥_«me
 = 
	`js⁄Ωc_msg_ty≥_to_°rög
(
m
->
ty≥
);

603 i‡((
m
->
mëhod
 !
NULL
Ë!((
∑âîn
 & 0x10000) != 0)) {

604  
	`xa•rötf
("%s must%s have \"method\"",

605 
ty≥_«me
, (
∑âîn
 & 0x10000) ? "" : "Çot");

608 i‡((
m
->
∑øms
 !
NULL
Ë!((
∑âîn
 & 0x1000) != 0)) {

609  
	`xa•rötf
("%s must%s have \"params\"",

610 
ty≥_«me
, (
∑âîn
 & 0x1000) ? "" : "Çot");

613 i‡((
m
->
ªsu…
 !
NULL
Ë!((
∑âîn
 & 0x100) != 0)) {

614  
	`xa•rötf
("%s must%s have \"result\"",

615 
ty≥_«me
, (
∑âîn
 & 0x100) ? "" : "Çot");

618 i‡((
m
->
îr‹
 !
NULL
Ë!((
∑âîn
 & 0x10) != 0)) {

619  
	`xa•rötf
("%s must%s have \"error\"",

620 
ty≥_«me
, (
∑âîn
 & 0x10) ? "" : "Çot");

623 i‡((
m
->
id
 !
NULL
Ë!((
∑âîn
 & 0x1) != 0)) {

624  
	`xa•rötf
("%s must%s have \"id\"",

625 
ty≥_«me
, (
∑âîn
 & 0x1) ? "" : "Çot");

628  
NULL
;

629 
	}
}

632 
	$js⁄Ωc_msg_de°roy
(
js⁄Ωc_msg
 *
m
)

634 i‡(
m
) {

635 
	`‰ì
(
m
->
mëhod
);

636 
	`js⁄_de°roy
(
m
->
∑øms
);

637 
	`js⁄_de°roy
(
m
->
ªsu…
);

638 
	`js⁄_de°roy
(
m
->
îr‹
);

639 
	`js⁄_de°roy
(
m
->
id
);

640 
	`‰ì
(
m
);

642 
	}
}

644 
js⁄
 *

645 
	$nuŒ_‰om_js⁄_nuŒ
(
js⁄
 *json)

647 i‡(
js⁄
 && js⁄->
ty≥
 =
JSON_NULL
) {

648 
	`js⁄_de°roy
(
js⁄
);

649  
NULL
;

651  
js⁄
;

652 
	}
}

655 
	$js⁄Ωc_msg_‰om_js⁄
(
js⁄
 *js⁄, 
js⁄Ωc_msg
 **
msgp
)

657 
js⁄
 *
mëhod
 = 
NULL
;

658 
js⁄Ωc_msg
 *
msg
 = 
NULL
;

659 
shash
 *
obje˘
;

660 *
îr‹
;

662 i‡(
js⁄
->
ty≥
 !
JSON_OBJECT
) {

663 
îr‹
 = 
	`x°rdup
("message isÇotá JSON object");

664 
exô
;

666 
obje˘
 = 
	`js⁄_obje˘
(
js⁄
);

668 
mëhod
 = 
	`shash_föd_™d_dñëe
(
obje˘
, "method");

669 i‡(
mëhod
 && mëhod->
ty≥
 !
JSON_STRING
) {

670 
îr‹
 = 
	`x°rdup
("method isÇotá JSON string");

671 
exô
;

674 
msg
 = 
	`xzÆloc
( *msg);

675 
msg
->
mëhod
 = mëhod ? 
	`x°rdup
(mëhod->
u
.
°rög
Ë: 
NULL
;

676 
msg
->
∑øms
 = 
	`nuŒ_‰om_js⁄_nuŒ
(
	`shash_föd_™d_dñëe
(
obje˘
, "params"));

677 
msg
->
ªsu…
 = 
	`nuŒ_‰om_js⁄_nuŒ
(
	`shash_föd_™d_dñëe
(
obje˘
, "result"));

678 
msg
->
îr‹
 = 
	`nuŒ_‰om_js⁄_nuŒ
(
	`shash_föd_™d_dñëe
(
obje˘
, "error"));

679 
msg
->
id
 = 
	`nuŒ_‰om_js⁄_nuŒ
(
	`shash_föd_™d_dñëe
(
obje˘
, "id"));

680 
msg
->
ty≥
 = (msg->
ªsu…
 ? 
JSONRPC_REPLY


681 : 
msg
->
îr‹
 ? 
JSONRPC_ERROR


682 : 
msg
->
id
 ? 
JSONRPC_REQUEST


683 : 
JSONRPC_NOTIFY
);

684 i‡(!
	`shash_is_em±y
(
obje˘
)) {

685 
îr‹
 = 
	`xa•rötf
("message has unexpected member \"%s\"",

686 
	`shash_fú°
(
obje˘
)->
«me
);

687 
exô
;

689 
îr‹
 = 
	`js⁄Ωc_msg_is_vÆid
(
msg
);

690 i‡(
îr‹
) {

691 
exô
;

694 
exô
:

695 
	`js⁄_de°roy
(
mëhod
);

696 
	`js⁄_de°roy
(
js⁄
);

697 i‡(
îr‹
) {

698 
	`js⁄Ωc_msg_de°roy
(
msg
);

699 
msg
 = 
NULL
;

701 *
msgp
 = 
msg
;

702  
îr‹
;

703 
	}
}

705 
js⁄
 *

706 
	$js⁄Ωc_msg_to_js⁄
(
js⁄Ωc_msg
 *
m
)

708 
js⁄
 *js⁄ = 
	`js⁄_obje˘_¸óã
();

710 i‡(
m
->
mëhod
) {

711 
	`js⁄_obje˘_put
(
js⁄
, "mëhod", 
	`js⁄_°rög_¸óã_noc›y
(
m
->
mëhod
));

714 i‡(
m
->
∑øms
) {

715 
	`js⁄_obje˘_put
(
js⁄
, "∑øms", 
m
->
∑øms
);

718 i‡(
m
->
ªsu…
) {

719 
	`js⁄_obje˘_put
(
js⁄
, "ªsu…", 
m
->
ªsu…
);

720 } i‡(
m
->
ty≥
 =
JSONRPC_ERROR
) {

721 
	`js⁄_obje˘_put
(
js⁄
, "ªsu…", 
	`js⁄_nuŒ_¸óã
());

724 i‡(
m
->
îr‹
) {

725 
	`js⁄_obje˘_put
(
js⁄
, "îr‹", 
m
->
îr‹
);

726 } i‡(
m
->
ty≥
 =
JSONRPC_REPLY
) {

727 
	`js⁄_obje˘_put
(
js⁄
, "îr‹", 
	`js⁄_nuŒ_¸óã
());

730 i‡(
m
->
id
) {

731 
	`js⁄_obje˘_put
(
js⁄
, "id", 
m
->
id
);

732 } i‡(
m
->
ty≥
 =
JSONRPC_NOTIFY
) {

733 
	`js⁄_obje˘_put
(
js⁄
, "id", 
	`js⁄_nuŒ_¸óã
());

736 
	`‰ì
(
m
);

738  
js⁄
;

739 
	}
}

743 
	sjs⁄Ωc_£ssi⁄
 {

744 
ªc⁄√˘
 *
	mªc⁄√˘
;

745 
js⁄Ωc
 *
	mΩc
;

746 
°ªam
 *
	m°ªam
;

747 
p°ªam
 *
	mp°ªam
;

748 
	m£qno
;

749 
uöt8_t
 
	mds˝
;

762 
js⁄Ωc_£ssi⁄
 *

763 
	$js⁄Ωc_£ssi⁄_›í
(c⁄° *
«me
)

765 
js⁄Ωc_£ssi⁄
 *
s
;

767 
s
 = 
	`xmÆloc
( *s);

768 
s
->
ªc⁄√˘
 = 
	`ªc⁄√˘_¸óã
(
	`time_m£c
());

769 
	`ªc⁄√˘_£t_«me
(
s
->
ªc⁄√˘
, 
«me
);

770 
	`ªc⁄√˘_íabÀ
(
s
->
ªc⁄√˘
, 
	`time_m£c
());

771 
s
->
Ωc
 = 
NULL
;

772 
s
->
°ªam
 = 
NULL
;

773 
s
->
p°ªam
 = 
NULL
;

774 
s
->
£qno
 = 0;

775 
s
->
ds˝
 = 0;

777 i‡(!
	`p°ªam_vîify_«me
(
«me
)) {

778 
	`ªc⁄√˘_£t_∑ssive
(
s
->
ªc⁄√˘
, 
åue
, 
	`time_m£c
());

781 i‡(!
	`°ªam_‹_p°ªam_√eds_¥obes
(
«me
)) {

782 
	`ªc⁄√˘_£t_¥obe_öãrvÆ
(
s
->
ªc⁄√˘
, 0);

785  
s
;

786 
	}
}

793 
js⁄Ωc_£ssi⁄
 *

794 
	$js⁄Ωc_£ssi⁄_›í_uƒñübly
(
js⁄Ωc
 *js⁄Ωc, 
uöt8_t
 
ds˝
)

796 
js⁄Ωc_£ssi⁄
 *
s
;

798 
s
 = 
	`xmÆloc
( *s);

799 
s
->
ªc⁄√˘
 = 
	`ªc⁄√˘_¸óã
(
	`time_m£c
());

800 
	`ªc⁄√˘_£t_quõt
(
s
->
ªc⁄√˘
, 
åue
);

801 
	`ªc⁄√˘_£t_«me
(
s
->
ªc⁄√˘
, 
	`js⁄Ωc_gë_«me
(
js⁄Ωc
));

802 
	`ªc⁄√˘_£t_max_åõs
(
s
->
ªc⁄√˘
, 0);

803 
	`ªc⁄√˘_c⁄√˘ed
(
s
->
ªc⁄√˘
, 
	`time_m£c
());

804 
s
->
ds˝
 = dscp;

805 
s
->
Ωc
 = 
js⁄Ωc
;

806 
s
->
°ªam
 = 
NULL
;

807 
s
->
p°ªam
 = 
NULL
;

808 
s
->
£qno
 = 0;

810  
s
;

811 
	}
}

814 
	$js⁄Ωc_£ssi⁄_˛o£
(
js⁄Ωc_£ssi⁄
 *
s
)

816 i‡(
s
) {

817 
	`js⁄Ωc_˛o£
(
s
->
Ωc
);

818 
	`ªc⁄√˘_de°roy
(
s
->
ªc⁄√˘
);

819 
	`°ªam_˛o£
(
s
->
°ªam
);

820 
	`p°ªam_˛o£
(
s
->
p°ªam
);

821 
	`‰ì
(
s
);

823 
	}
}

826 
	$js⁄Ωc_£ssi⁄_disc⁄√˘
(
js⁄Ωc_£ssi⁄
 *
s
)

828 i‡(
s
->
Ωc
) {

829 
	`js⁄Ωc_îr‹
(
s
->
Ωc
, 
EOF
);

830 
	`js⁄Ωc_˛o£
(
s
->
Ωc
);

831 
s
->
Ωc
 = 
NULL
;

832 
s
->
£qno
++;

833 } i‡(
s
->
°ªam
) {

834 
	`°ªam_˛o£
(
s
->
°ªam
);

835 
s
->
°ªam
 = 
NULL
;

836 
s
->
£qno
++;

838 
	}
}

841 
	$js⁄Ωc_£ssi⁄_c⁄√˘
(
js⁄Ωc_£ssi⁄
 *
s
)

843 c⁄° *
«me
 = 
	`ªc⁄√˘_gë_«me
(
s
->
ªc⁄√˘
);

844 
îr‹
;

846 
	`js⁄Ωc_£ssi⁄_disc⁄√˘
(
s
);

847 i‡(!
	`ªc⁄√˘_is_∑ssive
(
s
->
ªc⁄√˘
)) {

848 
îr‹
 = 
	`js⁄Ωc_°ªam_›í
(
«me
, &
s
->
°ªam
, s->
ds˝
);

849 i‡(!
îr‹
) {

850 
	`ªc⁄√˘_c⁄√˘ög
(
s
->
ªc⁄√˘
, 
	`time_m£c
());

853 
îr‹
 = 
s
->
p°ªam
 ? 0 : 
	`js⁄Ωc_p°ªam_›í
(
«me
, &s->pstream,

854 
s
->
ds˝
);

855 i‡(!
îr‹
) {

856 
	`ªc⁄√˘_li°íög
(
s
->
ªc⁄√˘
, 
	`time_m£c
());

860 i‡(
îr‹
) {

861 
	`ªc⁄√˘_c⁄√˘_Áûed
(
s
->
ªc⁄√˘
, 
	`time_m£c
(), 
îr‹
);

863 
s
->
£qno
++;

864 
	}
}

867 
	$js⁄Ωc_£ssi⁄_run
(
js⁄Ωc_£ssi⁄
 *
s
)

869 i‡(
s
->
p°ªam
) {

870 
°ªam
 *stream;

871 
îr‹
;

873 
îr‹
 = 
	`p°ªam_ac˚±
(
s
->
p°ªam
, &
°ªam
);

874 i‡(!
îr‹
) {

875 i‡(
s
->
Ωc
 || s->
°ªam
) {

876 
	`VLOG_INFO_RL
(&
æ
,

878 
	`ªc⁄√˘_gë_«me
(
s
->
ªc⁄√˘
));

879 
	`js⁄Ωc_£ssi⁄_disc⁄√˘
(
s
);

881 
	`ªc⁄√˘_c⁄√˘ed
(
s
->
ªc⁄√˘
, 
	`time_m£c
());

882 
s
->
Ωc
 = 
	`js⁄Ωc_›í
(
°ªam
);

883 } i‡(
îr‹
 !
EAGAIN
) {

884 
	`ªc⁄√˘_li°í_îr‹
(
s
->
ªc⁄√˘
, 
	`time_m£c
(), 
îr‹
);

885 
	`p°ªam_˛o£
(
s
->
p°ªam
);

886 
s
->
p°ªam
 = 
NULL
;

890 i‡(
s
->
Ωc
) {

891 
size_t
 
backlog
;

892 
îr‹
;

894 
backlog
 = 
	`js⁄Ωc_gë_backlog
(
s
->
Ωc
);

895 
	`js⁄Ωc_run
(
s
->
Ωc
);

896 i‡(
	`js⁄Ωc_gë_backlog
(
s
->
Ωc
Ë< 
backlog
) {

905 
	`ªc⁄√˘_a˘ivôy
(
s
->
ªc⁄√˘
, 
	`time_m£c
());

908 
îr‹
 = 
	`js⁄Ωc_gë_°©us
(
s
->
Ωc
);

909 i‡(
îr‹
) {

910 
	`ªc⁄√˘_disc⁄√˘ed
(
s
->
ªc⁄√˘
, 
	`time_m£c
(), 
îr‹
);

911 
	`js⁄Ωc_£ssi⁄_disc⁄√˘
(
s
);

913 } i‡(
s
->
°ªam
) {

914 
îr‹
;

916 
	`°ªam_run
(
s
->
°ªam
);

917 
îr‹
 = 
	`°ªam_c⁄√˘
(
s
->
°ªam
);

918 i‡(!
îr‹
) {

919 
	`ªc⁄√˘_c⁄√˘ed
(
s
->
ªc⁄√˘
, 
	`time_m£c
());

920 
s
->
Ωc
 = 
	`js⁄Ωc_›í
(s->
°ªam
);

921 
s
->
°ªam
 = 
NULL
;

922 } i‡(
îr‹
 !
EAGAIN
) {

923 
	`ªc⁄√˘_c⁄√˘_Áûed
(
s
->
ªc⁄√˘
, 
	`time_m£c
(), 
îr‹
);

924 
	`°ªam_˛o£
(
s
->
°ªam
);

925 
s
->
°ªam
 = 
NULL
;

929 
	`ªc⁄√˘_run
(
s
->
ªc⁄√˘
, 
	`time_m£c
())) {

930 
RECONNECT_CONNECT
:

931 
	`js⁄Ωc_£ssi⁄_c⁄√˘
(
s
);

934 
RECONNECT_DISCONNECT
:

935 
	`ªc⁄√˘_disc⁄√˘ed
(
s
->
ªc⁄√˘
, 
	`time_m£c
(), 0);

936 
	`js⁄Ωc_£ssi⁄_disc⁄√˘
(
s
);

939 
RECONNECT_PROBE
:

940 i‡(
s
->
Ωc
) {

941 
js⁄
 *
∑øms
;

942 
js⁄Ωc_msg
 *
ªque°
;

944 
∑øms
 = 
	`js⁄_¨øy_¸óã_em±y
();

945 
ªque°
 = 
	`js⁄Ωc_¸óã_ªque°
("echo", 
∑øms
, 
NULL
);

946 
	`js⁄_de°roy
(
ªque°
->
id
);

947 
ªque°
->
id
 = 
	`js⁄_°rög_¸óã
("echo");

948 
	`js⁄Ωc_£nd
(
s
->
Ωc
, 
ªque°
);

952 
	}
}

955 
	$js⁄Ωc_£ssi⁄_waô
(
js⁄Ωc_£ssi⁄
 *
s
)

957 i‡(
s
->
Ωc
) {

958 
	`js⁄Ωc_waô
(
s
->
Ωc
);

959 } i‡(
s
->
°ªam
) {

960 
	`°ªam_run_waô
(
s
->
°ªam
);

961 
	`°ªam_c⁄√˘_waô
(
s
->
°ªam
);

963 i‡(
s
->
p°ªam
) {

964 
	`p°ªam_waô
(
s
->
p°ªam
);

966 
	`ªc⁄√˘_waô
(
s
->
ªc⁄√˘
, 
	`time_m£c
());

967 
	}
}

969 
size_t


970 
	$js⁄Ωc_£ssi⁄_gë_backlog
(c⁄° 
js⁄Ωc_£ssi⁄
 *
s
)

972  
s
->
Ωc
 ? 
	`js⁄Ωc_gë_backlog
(s->rpc) : 0;

973 
	}
}

978 
	$js⁄Ωc_£ssi⁄_gë_«me
(c⁄° 
js⁄Ωc_£ssi⁄
 *
s
)

980  
	`ªc⁄√˘_gë_«me
(
s
->
ªc⁄√˘
);

981 
	}
}

985 
	$js⁄Ωc_£ssi⁄_£nd
(
js⁄Ωc_£ssi⁄
 *
s
, 
js⁄Ωc_msg
 *
msg
)

987 i‡(
s
->
Ωc
) {

988  
	`js⁄Ωc_£nd
(
s
->
Ωc
, 
msg
);

990 
	`js⁄Ωc_msg_de°roy
(
msg
);

991  
ENOTCONN
;

993 
	}
}

995 
js⁄Ωc_msg
 *

996 
	$js⁄Ωc_£ssi⁄_ªcv
(
js⁄Ωc_£ssi⁄
 *
s
)

998 i‡(
s
->
Ωc
) {

999 
ª˚ived_byãs
;

1000 
js⁄Ωc_msg
 *
msg
;

1002 
ª˚ived_byãs
 = 
	`js⁄Ωc_gë_ª˚ived_byãs
(
s
->
Ωc
);

1003 
	`js⁄Ωc_ªcv
(
s
->
Ωc
, &
msg
);

1004 i‡(
ª˚ived_byãs
 !
	`js⁄Ωc_gë_ª˚ived_byãs
(
s
->
Ωc
)) {

1010 
	`ªc⁄√˘_a˘ivôy
(
s
->
ªc⁄√˘
, 
	`time_m£c
());

1013 i‡(
msg
) {

1014 i‡(
msg
->
ty≥
 =
JSONRPC_REQUEST
 && !
	`°rcmp
(msg->
mëhod
, "echo")) {

1016 
js⁄Ωc_msg
 *
ª∂y
;

1018 
ª∂y
 = 
	`js⁄Ωc_¸óã_ª∂y
(
	`js⁄_˛⁄e
(
msg
->
∑øms
), msg->
id
);

1019 
	`js⁄Ωc_£ssi⁄_£nd
(
s
, 
ª∂y
);

1020 } i‡(
msg
->
ty≥
 =
JSONRPC_REPLY


1021 && 
msg
->
id
 && msg->id->
ty≥
 =
JSON_STRING


1022 && !
	`°rcmp
(
msg
->
id
->
u
.
°rög
, "echo")) {

1025  
msg
;

1027 
	`js⁄Ωc_msg_de°roy
(
msg
);

1030  
NULL
;

1031 
	}
}

1034 
	$js⁄Ωc_£ssi⁄_ªcv_waô
(
js⁄Ωc_£ssi⁄
 *
s
)

1036 i‡(
s
->
Ωc
) {

1037 
	`js⁄Ωc_ªcv_waô
(
s
->
Ωc
);

1039 
	}
}

1041 
boﬁ


1042 
	$js⁄Ωc_£ssi⁄_is_Æive
(c⁄° 
js⁄Ωc_£ssi⁄
 *
s
)

1044  
s
->
Ωc
 || s->
°ªam
 || 
	`ªc⁄√˘_gë_max_åõs
(s->
ªc⁄√˘
);

1045 
	}
}

1047 
boﬁ


1048 
	$js⁄Ωc_£ssi⁄_is_c⁄√˘ed
(c⁄° 
js⁄Ωc_£ssi⁄
 *
s
)

1050  
s
->
Ωc
 !
NULL
;

1051 
	}
}

1054 
	$js⁄Ωc_£ssi⁄_gë_£qno
(c⁄° 
js⁄Ωc_£ssi⁄
 *
s
)

1056  
s
->
£qno
;

1057 
	}
}

1060 
	$js⁄Ωc_£ssi⁄_gë_°©us
(c⁄° 
js⁄Ωc_£ssi⁄
 *
s
)

1062  
s
 && s->
Ωc
 ? 
	`js⁄Ωc_gë_°©us
(s->rpc) : 0;

1063 
	}
}

1066 
	$js⁄Ωc_£ssi⁄_gë_ªc⁄√˘_°©s
(c⁄° 
js⁄Ωc_£ssi⁄
 *
s
,

1067 
ªc⁄√˘_°©s
 *
°©s
)

1069 
	`ªc⁄√˘_gë_°©s
(
s
->
ªc⁄√˘
, 
	`time_m£c
(), 
°©s
);

1070 
	}
}

1073 
	$js⁄Ωc_£ssi⁄_f‹˚_ªc⁄√˘
(
js⁄Ωc_£ssi⁄
 *
s
)

1075 
	`ªc⁄√˘_f‹˚_ªc⁄√˘
(
s
->
ªc⁄√˘
, 
	`time_m£c
());

1076 
	}
}

1079 
	$js⁄Ωc_£ssi⁄_£t_max_backoff
(
js⁄Ωc_£ssi⁄
 *
s
, 
max_backoff
)

1081 
	`ªc⁄√˘_£t_backoff
(
s
->
ªc⁄√˘
, 0, 
max_backoff
);

1082 
	}
}

1085 
	$js⁄Ωc_£ssi⁄_£t_¥obe_öãrvÆ
(
js⁄Ωc_£ssi⁄
 *
s
,

1086 
¥obe_öãrvÆ
)

1088 
	`ªc⁄√˘_£t_¥obe_öãrvÆ
(
s
->
ªc⁄√˘
, 
¥obe_öãrvÆ
);

1089 
	}
}

1092 
	$js⁄Ωc_£ssi⁄_£t_ds˝
(
js⁄Ωc_£ssi⁄
 *
s
,

1093 
uöt8_t
 
ds˝
)

1095 i‡(
s
->
ds˝
 != dscp) {

1096 i‡(
s
->
p°ªam
) {

1097 
îr‹
;

1099 
îr‹
 = 
	`p°ªam_£t_ds˝
(
s
->
p°ªam
, 
ds˝
);

1100 i‡(
îr‹
) {

1101 
	`VLOG_ERR
("%s: failed set_dscp %s",

1102 
	`ªc⁄√˘_gë_«me
(
s
->
ªc⁄√˘
), 
	`°ªº‹
(
îr‹
));

1110 
s
->
ds˝
 = dscp;

1111 
	`js⁄Ωc_£ssi⁄_f‹˚_ªc⁄√˘
(
s
);

1113 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/jsonrpc.h

17 #i‚de‡
JSONRPC_H


18 
	#JSONRPC_H
 1

	)

23 
	~<°dboﬁ.h
>

24 
	~<°ddef.h
>

25 
	~"›ívswôch/ty≥s.h
"

27 
	gjs⁄
;

28 
	gjs⁄Ωc_msg
;

29 
	gp°ªam
;

30 
	gªc⁄√˘_°©s
;

31 
	g°ªam
;

39 
	#JSONRPC_TCP_PORT
 6632

	)

40 
	#JSONRPC_SSL_PORT
 6632

	)

42 
js⁄Ωc_°ªam_›í
(c⁄° *
«me
, 
°ªam
 **, 
uöt8_t
 
ds˝
);

43 
js⁄Ωc_p°ªam_›í
(c⁄° *
«me
, 
p°ªam
 **, 
uöt8_t
 
ds˝
);

45 
js⁄Ωc
 *
js⁄Ωc_›í
(
°ªam
 *);

46 
js⁄Ωc_˛o£
(
js⁄Ωc
 *);

48 
js⁄Ωc_run
(
js⁄Ωc
 *);

49 
js⁄Ωc_waô
(
js⁄Ωc
 *);

51 
js⁄Ωc_gë_°©us
(c⁄° 
js⁄Ωc
 *);

52 
size_t
 
js⁄Ωc_gë_backlog
(c⁄° 
js⁄Ωc
 *);

53 
js⁄Ωc_gë_ª˚ived_byãs
(c⁄° 
js⁄Ωc
 *);

54 c⁄° *
js⁄Ωc_gë_«me
(c⁄° 
js⁄Ωc
 *);

56 
js⁄Ωc_£nd
(
js⁄Ωc
 *, 
js⁄Ωc_msg
 *);

57 
js⁄Ωc_ªcv
(
js⁄Ωc
 *, 
js⁄Ωc_msg
 **);

58 
js⁄Ωc_ªcv_waô
(
js⁄Ωc
 *);

60 
js⁄Ωc_£nd_block
(
js⁄Ωc
 *, 
js⁄Ωc_msg
 *);

61 
js⁄Ωc_ªcv_block
(
js⁄Ωc
 *, 
js⁄Ωc_msg
 **);

62 
js⁄Ωc_å™ß˘_block
(
js⁄Ωc
 *, 
js⁄Ωc_msg
 *,

63 
js⁄Ωc_msg
 **);

66 
	ejs⁄Ωc_msg_ty≥
 {

67 
	mJSONRPC_REQUEST
,

68 
	mJSONRPC_NOTIFY
,

69 
	mJSONRPC_REPLY
,

70 
	mJSONRPC_ERROR


73 
	sjs⁄Ωc_msg
 {

74 
js⁄Ωc_msg_ty≥
 
	mty≥
;

75 *
	mmëhod
;

76 
js⁄
 *
	m∑øms
;

77 
js⁄
 *
	mªsu…
;

78 
js⁄
 *
	mîr‹
;

79 
js⁄
 *
	mid
;

82 
js⁄Ωc_msg
 *
js⁄Ωc_¸óã_ªque°
(c⁄° *
mëhod
,

83 
js⁄
 *
∑øms
,

84 
js⁄
 **
idp
);

85 
js⁄Ωc_msg
 *
js⁄Ωc_¸óã_nŸify
(c⁄° *
mëhod
,

86 
js⁄
 *
∑øms
);

87 
js⁄Ωc_msg
 *
js⁄Ωc_¸óã_ª∂y
(
js⁄
 *
ªsu…
,

88 c⁄° 
js⁄
 *
id
);

89 
js⁄Ωc_msg
 *
js⁄Ωc_¸óã_îr‹
(
js⁄
 *
îr‹
,

90 c⁄° 
js⁄
 *
id
);

92 c⁄° *
js⁄Ωc_msg_ty≥_to_°rög
(
js⁄Ωc_msg_ty≥
);

93 *
js⁄Ωc_msg_is_vÆid
(c⁄° 
js⁄Ωc_msg
 *);

94 
js⁄Ωc_msg_de°roy
(
js⁄Ωc_msg
 *);

96 *
js⁄Ωc_msg_‰om_js⁄
(
js⁄
 *, 
js⁄Ωc_msg
 **);

97 
js⁄
 *
js⁄Ωc_msg_to_js⁄
(
js⁄Ωc_msg
 *);

101 
js⁄Ωc_£ssi⁄
 *
js⁄Ωc_£ssi⁄_›í
(c⁄° *
«me
);

102 
js⁄Ωc_£ssi⁄
 *
js⁄Ωc_£ssi⁄_›í_uƒñübly
(
js⁄Ωc
 *,

103 
uöt8_t
);

104 
js⁄Ωc_£ssi⁄_˛o£
(
js⁄Ωc_£ssi⁄
 *);

106 
js⁄Ωc_£ssi⁄_run
(
js⁄Ωc_£ssi⁄
 *);

107 
js⁄Ωc_£ssi⁄_waô
(
js⁄Ωc_£ssi⁄
 *);

109 
size_t
 
js⁄Ωc_£ssi⁄_gë_backlog
(c⁄° 
js⁄Ωc_£ssi⁄
 *);

110 c⁄° *
js⁄Ωc_£ssi⁄_gë_«me
(c⁄° 
js⁄Ωc_£ssi⁄
 *);

112 
js⁄Ωc_£ssi⁄_£nd
(
js⁄Ωc_£ssi⁄
 *, 
js⁄Ωc_msg
 *);

113 
js⁄Ωc_msg
 *
js⁄Ωc_£ssi⁄_ªcv
(
js⁄Ωc_£ssi⁄
 *);

114 
js⁄Ωc_£ssi⁄_ªcv_waô
(
js⁄Ωc_£ssi⁄
 *);

116 
boﬁ
 
js⁄Ωc_£ssi⁄_is_Æive
(c⁄° 
js⁄Ωc_£ssi⁄
 *);

117 
boﬁ
 
js⁄Ωc_£ssi⁄_is_c⁄√˘ed
(c⁄° 
js⁄Ωc_£ssi⁄
 *);

118 
js⁄Ωc_£ssi⁄_gë_£qno
(c⁄° 
js⁄Ωc_£ssi⁄
 *);

119 
js⁄Ωc_£ssi⁄_gë_°©us
(c⁄° 
js⁄Ωc_£ssi⁄
 *);

120 
js⁄Ωc_£ssi⁄_gë_ªc⁄√˘_°©s
(c⁄° 
js⁄Ωc_£ssi⁄
 *,

121 
ªc⁄√˘_°©s
 *);

123 
js⁄Ωc_£ssi⁄_f‹˚_ªc⁄√˘
(
js⁄Ωc_£ssi⁄
 *);

125 
js⁄Ωc_£ssi⁄_£t_max_backoff
(
js⁄Ωc_£ssi⁄
 *,

126 
max_backofF
);

127 
js⁄Ωc_£ssi⁄_£t_¥obe_öãrvÆ
(
js⁄Ωc_£ssi⁄
 *,

128 
¥obe_öãrvÆ
);

129 
js⁄Ωc_£ssi⁄_£t_ds˝
(
js⁄Ωc_£ssi⁄
 *,

130 
uöt8_t
 
ds˝
);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/lacp.c

16 
	~<c⁄fig.h
>

17 
	~"œ˝.h
"

19 
	~<as£π.h
>

20 
	~<°dlib.h
>

22 
	~"dy«mic-°rög.h
"

23 
	~"hash.h
"

24 
	~"hm≠.h
"

25 
	~"oÂbuf.h
"

26 
	~"∑ckës.h
"

27 
	~"pﬁl-lo›.h
"

28 
	~"shash.h
"

29 
	~"timî.h
"

30 
	~"timevÆ.h
"

31 
	~"unix˘l.h
"

32 
	~"vlog.h
"

34 
VLOG_DEFINE_THIS_MODULE
(
œ˝
);

37 
	#LACP_STATE_ACT
 0x01

	)

38 
	#LACP_STATE_TIME
 0x02

	)

39 
	#LACP_STATE_AGG
 0x04

	)

40 
	#LACP_STATE_SYNC
 0x08

	)

41 
	#LACP_STATE_COL
 0x10

	)

42 
	#LACP_STATE_DIST
 0x20

	)

43 
	#LACP_STATE_DEF
 0x40

	)

44 
	#LACP_STATE_EXP
 0x80

	)

46 
	#LACP_FAST_TIME_TX
 1000

	)

47 
	#LACP_SLOW_TIME_TX
 30000

	)

48 
	#LACP_RX_MULTIPLIER
 3

	)

50 
	#LACP_INFO_LEN
 15

	)

51 
	sœ˝_öfo
 {

52 
ovs_be16
 
	msys_¥i‹ôy
;

53 
uöt8_t
 
	msys_id
[
ETH_ADDR_LEN
];

54 
ovs_be16
 
	mkey
;

55 
ovs_be16
 
	mp‹t_¥i‹ôy
;

56 
ovs_be16
 
	mp‹t_id
;

57 
uöt8_t
 
	m°©e
;

58 } 
__©åibuã__
((
∑cked
));

59 
BUILD_ASSERT_DECL
(
LACP_INFO_LEN
 =(
œ˝_öfo
));

61 
	#LACP_PDU_LEN
 110

	)

62 
	sœ˝_pdu
 {

63 
uöt8_t
 
	msubty≥
;

64 
uöt8_t
 
	mvîsi⁄
;

66 
uöt8_t
 
	ma˘‹_ty≥
;

67 
uöt8_t
 
	ma˘‹_Àn
;

68 
œ˝_öfo
 
	ma˘‹
;

69 
uöt8_t
 
	mz1
[3];

71 
uöt8_t
 
	m∑π√r_ty≥
;

72 
uöt8_t
 
	m∑π√r_Àn
;

73 
œ˝_öfo
 
	m∑π√r
;

74 
uöt8_t
 
	mz2
[3];

76 
uöt8_t
 
	mcﬁÀ˘‹_ty≥
;

77 
uöt8_t
 
	mcﬁÀ˘‹_Àn
;

78 
ovs_be16
 
	mcﬁÀ˘‹_dñay
;

79 
uöt8_t
 
	mz3
[64];

80 } 
__©åibuã__
((
∑cked
));

81 
BUILD_ASSERT_DECL
(
LACP_PDU_LEN
 =(
œ˝_pdu
));

85 
	e¶ave_°©us
 {

86 
	mLACP_CURRENT
,

87 
	mLACP_EXPIRED
,

88 
	mLACP_DEFAULTED
,

91 
	sœ˝
 {

92 
li°
 
	mnode
;

93 *
	m«me
;

94 
uöt8_t
 
	msys_id
[
ETH_ADDR_LEN
];

95 
uöt16_t
 
	msys_¥i‹ôy
;

96 
boﬁ
 
	ma˘ive
;

98 
hm≠
 
	m¶aves
;

99 
¶ave
 *
	mkey_¶ave
;

101 
boﬁ
 
	mÁ°
;

102 
boﬁ
 
	m√gŸüãd
;

103 
boﬁ
 
	mupd©e
;

106 
	s¶ave
 {

107 *
	maux
;

108 
hm≠_node
 
	mnode
;

110 
œ˝
 *
	mœ˝
;

111 
uöt16_t
 
	mp‹t_id
;

112 
uöt16_t
 
	mp‹t_¥i‹ôy
;

113 
uöt16_t
 
	mkey
;

114 *
	m«me
;

116 
¶ave_°©us
 
	m°©us
;

117 
boﬁ
 
	m©èched
;

118 
œ˝_öfo
 
	m∑π√r
;

119 
œ˝_öfo
 
	m¡t_a˘‹
;

120 
timî
 
	mtx
;

121 
timî
 
	mrx
;

124 
li°
 
	gÆl_œ˝s
 = 
LIST_INITIALIZER
(&
Æl_œ˝s
);

126 
œ˝_upd©e_©èched
(
œ˝
 *);

128 
¶ave_de°roy
(
¶ave
 *);

129 
¶ave_£t_deÁu…ed
(
¶ave
 *);

130 
¶ave_£t_expúed
(
¶ave
 *);

131 
¶ave_gë_a˘‹
(
¶ave
 *, 
œ˝_öfo
 *
a˘‹
);

132 
¶ave_gë_¥i‹ôy
(
¶ave
 *, 
œ˝_öfo
 *
¥i‹ôy
);

133 
boﬁ
 
¶ave_may_tx
(c⁄° 
¶ave
 *);

134 
¶ave
 *
¶ave_lookup
(c⁄° 
œ˝
 *, const *slave);

135 
boﬁ
 
öfo_tx_equÆ
(
œ˝_öfo
 *, lacp_info *);

137 
unix˘l_cb_func
 
	gœ˝_unix˘l_show
;

141 
	$compo£_œ˝_pdu
(c⁄° 
œ˝_öfo
 *
a˘‹
,

142 c⁄° 
œ˝_öfo
 *
∑π√r
, 
œ˝_pdu
 *
pdu
)

144 
	`mem£t
(
pdu
, 0,  *pdu);

146 
pdu
->
subty≥
 = 1;

147 
pdu
->
vîsi⁄
 = 1;

149 
pdu
->
a˘‹_ty≥
 = 1;

150 
pdu
->
a˘‹_Àn
 = 20;

151 
pdu
->
a˘‹
 = *actor;

153 
pdu
->
∑π√r_ty≥
 = 2;

154 
pdu
->
∑π√r_Àn
 = 20;

155 
pdu
->
∑π√r
 = *partner;

157 
pdu
->
cﬁÀ˘‹_ty≥
 = 3;

158 
pdu
->
cﬁÀ˘‹_Àn
 = 16;

159 
pdu
->
cﬁÀ˘‹_dñay
 = 
	`ht⁄s
(0);

160 
	}
}

166 c⁄° 
œ˝_pdu
 *

167 
	$∑r£_œ˝_∑ckë
(c⁄° 
oÂbuf
 *
b
)

169 c⁄° 
œ˝_pdu
 *
pdu
;

171 
pdu
 = 
	`oÂbuf_©
(
b
, (
uöt8_t
 *)b->
l3
 - (uöt8_à*)b->
d©a
, 
LACP_PDU_LEN
);

173 i‡(
pdu
 &&Ödu->
subty≥
 == 1

174 && 
pdu
->
a˘‹_ty≥
 =1 &&Ödu->
a˘‹_Àn
 == 20

175 && 
pdu
->
∑π√r_ty≥
 =2 &&Ödu->
∑π√r_Àn
 == 20) {

176  
pdu
;

178  
NULL
;

180 
	}
}

186 
	$œ˝_öô
()

188 
	`unix˘l_comm™d_ªgi°î
("lacp/show", "[port]", 0, 1,

189 
œ˝_unix˘l_show
, 
NULL
);

190 
	}
}

193 
œ˝
 *

194 
	$œ˝_¸óã
()

196 
œ˝
 *lacp;

198 
œ˝
 = 
	`xzÆloc
( *lacp);

199 
	`hm≠_öô
(&
œ˝
->
¶aves
);

200 
	`li°_push_back
(&
Æl_œ˝s
, &
œ˝
->
node
);

201  
œ˝
;

202 
	}
}

206 
	$œ˝_de°roy
(
œ˝
 *lacp)

208 i‡(
œ˝
) {

209 
¶ave
 *¶ave, *
√xt
;

211 
	`HMAP_FOR_EACH_SAFE
 (
¶ave
, 
√xt
, 
node
, &
œ˝
->
¶aves
) {

212 
	`¶ave_de°roy
(
¶ave
);

215 
	`hm≠_de°roy
(&
œ˝
->
¶aves
);

216 
	`li°_ªmove
(&
œ˝
->
node
);

217 
	`‰ì
(
œ˝
->
«me
);

218 
	`‰ì
(
œ˝
);

220 
	}
}

224 
	$œ˝_c⁄figuª
(
œ˝
 *œ˝, c⁄° 
œ˝_£âögs
 *
s
)

226 
	`as£π
(!
	`ëh_addr_is_zîo
(
s
->
id
));

228 i‡(!
œ˝
->
«me
 || 
	`°rcmp
(
s
->name,Üacp->name)) {

229 
	`‰ì
(
œ˝
->
«me
);

230 
œ˝
->
«me
 = 
	`x°rdup
(
s
->name);

233 i‡(!
	`ëh_addr_equÆs
(
œ˝
->
sys_id
, 
s
->
id
)

234 || 
œ˝
->
sys_¥i‹ôy
 !
s
->
¥i‹ôy
) {

235 
	`mem˝y
(
œ˝
->
sys_id
, 
s
->
id
, 
ETH_ADDR_LEN
);

236 
œ˝
->
sys_¥i‹ôy
 = 
s
->
¥i‹ôy
;

237 
œ˝
->
upd©e
 = 
åue
;

240 
œ˝
->
a˘ive
 = 
s
->active;

241 
œ˝
->
Á°
 = 
s
->fast;

242 
	}
}

246 
boﬁ


247 
	$œ˝_is_a˘ive
(c⁄° 
œ˝
 *lacp)

249  
œ˝
->
a˘ive
;

250 
	}
}

256 
	$œ˝_¥o˚ss_∑ckë
(
œ˝
 *œ˝, c⁄° *
¶ave_
,

257 c⁄° 
oÂbuf
 *
∑ckë
)

259 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 5);

260 
¶ave
 *¶avê
	`¶ave_lookup
(
œ˝
, 
¶ave_
);

261 c⁄° 
œ˝_pdu
 *
pdu
;

262 
tx_øã
;

264 
pdu
 = 
	`∑r£_œ˝_∑ckë
(
∑ckë
);

265 i‡(!
pdu
) {

266 
	`VLOG_WARN_RL
(&
æ
, "%s:Ñe˚ivedá¿u≈¨ßbÀ LACP PDU.", 
œ˝
->
«me
);

270 
¶ave
->
°©us
 = 
LACP_CURRENT
;

271 
tx_øã
 = 
œ˝
->
Á°
 ? 
LACP_FAST_TIME_TX
 : 
LACP_SLOW_TIME_TX
;

272 
	`timî_£t_duøti⁄
(&
¶ave
->
rx
, 
LACP_RX_MULTIPLIER
 * 
tx_øã
);

274 
¶ave
->
¡t_a˘‹
 = 
pdu
->
∑π√r
;

279 i‡(
	`memcmp
(&
¶ave
->
∑π√r
, &
pdu
->
a˘‹
, Ödu->actor)) {

280 
œ˝
->
upd©e
 = 
åue
;

281 
¶ave
->
∑π√r
 = 
pdu
->
a˘‹
;

283 
	}
}

286 
œ˝_°©us


287 
	$œ˝_°©us
(c⁄° 
œ˝
 *lacp)

289 i‡(!
œ˝
) {

290  
LACP_DISABLED
;

291 } i‡(
œ˝
->
√gŸüãd
) {

292  
LACP_NEGOTIATED
;

294  
LACP_CONFIGURED
;

296 
	}
}

302 
	$œ˝_¶ave_ªgi°î
(
œ˝
 *œ˝, *
¶ave_
,

303 c⁄° 
œ˝_¶ave_£âögs
 *
s
)

305 
¶ave
 *¶avê
	`¶ave_lookup
(
œ˝
, 
¶ave_
);

307 i‡(!
¶ave
) {

308 
¶ave
 = 
	`xzÆloc
( *slave);

309 
¶ave
->
œ˝
 =Üacp;

310 
¶ave
->
aux
 = 
¶ave_
;

311 
	`hm≠_ö£π
(&
œ˝
->
¶aves
, &
¶ave
->
node
, 
	`hash_poöãr
(
¶ave_
, 0));

312 
	`¶ave_£t_deÁu…ed
(
¶ave
);

314 i‡(!
œ˝
->
key_¶ave
) {

315 
œ˝
->
key_¶ave
 = 
¶ave
;

319 i‡(!
¶ave
->
«me
 || 
	`°rcmp
(
s
->name, slave->name)) {

320 
	`‰ì
(
¶ave
->
«me
);

321 
¶ave
->
«me
 = 
	`x°rdup
(
s
->name);

324 i‡(
¶ave
->
p‹t_id
 !
s
->
id


325 || 
¶ave
->
p‹t_¥i‹ôy
 !
s
->
¥i‹ôy


326 || 
¶ave
->
key
 !
s
->key) {

327 
¶ave
->
p‹t_id
 = 
s
->
id
;

328 
¶ave
->
p‹t_¥i‹ôy
 = 
s
->
¥i‹ôy
;

329 
¶ave
->
key
 = 
s
->key;

331 
œ˝
->
upd©e
 = 
åue
;

333 i‡(
œ˝
->
a˘ive
 ||Üa˝->
√gŸüãd
) {

334 
	`¶ave_£t_expúed
(
¶ave
);

337 
	}
}

341 
	$œ˝_¶ave_uƒegi°î
(
œ˝
 *œ˝, c⁄° *
¶ave_
)

343 
¶ave
 *¶avê
	`¶ave_lookup
(
œ˝
, 
¶ave_
);

345 i‡(
¶ave
) {

346 
	`¶ave_de°roy
(
¶ave
);

347 
œ˝
->
upd©e
 = 
åue
;

349 
	}
}

354 
	$œ˝_¶ave_ˇºõr_ch™ged
(c⁄° 
œ˝
 *œ˝, c⁄° *
¶ave_
)

356 i‡(
œ˝
) {

357 
¶ave
 *¶avê
	`¶ave_lookup
(
œ˝
, 
¶ave_
);

359 i‡(
¶ave
->
°©us
 =
LACP_CURRENT
 || sœve->
œ˝
->
a˘ive
) {

360 
	`¶ave_£t_expúed
(
¶ave
);

363 
	}
}

365 
boﬁ


366 
	$¶ave_may_íabÀ__
(
¶ave
 *slave)

370  
¶ave
->
©èched
 && (¶ave->
∑π√r
.
°©e
 & 
LACP_STATE_SYNC
);

371 
	}
}

376 
boﬁ


377 
	$œ˝_¶ave_may_íabÀ
(c⁄° 
œ˝
 *œ˝, c⁄° *
¶ave_
)

379 i‡(
œ˝
) {

380  
	`¶ave_may_íabÀ__
(
	`¶ave_lookup
(
œ˝
, 
¶ave_
));

382  
åue
;

384 
	}
}

387 
uöt16_t


388 
	$œ˝_¶ave_gë_p‹t_id
(c⁄° 
œ˝
 *œ˝, c⁄° *
¶ave_
)

390 
¶ave
 *¶avê
	`¶ave_lookup
(
œ˝
, 
¶ave_
);

391  
¶ave
->
p‹t_id
;

392 
	}
}

397 
boﬁ


398 
	$œ˝_¶ave_is_cuºít
(c⁄° 
œ˝
 *œ˝, c⁄° *
¶ave_
)

400  
	`¶ave_lookup
(
œ˝
, 
¶ave_
)->
°©us
 !
LACP_DEFAULTED
;

401 
	}
}

405 
	$œ˝_run
(
œ˝
 *œ˝, 
œ˝_£nd_pdu
 *
£nd_pdu
)

407 
¶ave
 *slave;

409 
	`HMAP_FOR_EACH
 (
¶ave
, 
node
, &
œ˝
->
¶aves
) {

410 i‡(
	`timî_expúed
(&
¶ave
->
rx
)) {

411 i‡(
¶ave
->
°©us
 =
LACP_CURRENT
) {

412 
	`¶ave_£t_expúed
(
¶ave
);

413 } i‡(
¶ave
->
°©us
 =
LACP_EXPIRED
) {

414 
	`¶ave_£t_deÁu…ed
(
¶ave
);

419 i‡(
œ˝
->
upd©e
) {

420 
	`œ˝_upd©e_©èched
(
œ˝
);

423 
	`HMAP_FOR_EACH
 (
¶ave
, 
node
, &
œ˝
->
¶aves
) {

424 
œ˝_öfo
 
a˘‹
;

426 i‡(!
	`¶ave_may_tx
(
¶ave
)) {

430 
	`¶ave_gë_a˘‹
(
¶ave
, &
a˘‹
);

432 i‡(
	`timî_expúed
(&
¶ave
->
tx
)

433 || !
	`öfo_tx_equÆ
(&
a˘‹
, &
¶ave
->
¡t_a˘‹
)) {

434 
duøti⁄
;

435 
œ˝_pdu
 
pdu
;

437 
¶ave
->
¡t_a˘‹
 = 
a˘‹
;

438 
	`compo£_œ˝_pdu
(&
a˘‹
, &
¶ave
->
∑π√r
, &
pdu
);

439 
	`£nd_pdu
(
¶ave
->
aux
, &
pdu
, Ödu);

441 
duøti⁄
 = (
¶ave
->
∑π√r
.
°©e
 & 
LACP_STATE_TIME


442 ? 
LACP_FAST_TIME_TX


443 : 
LACP_SLOW_TIME_TX
);

445 
	`timî_£t_duøti⁄
(&
¶ave
->
tx
, 
duøti⁄
);

448 
	}
}

452 
	$œ˝_waô
(
œ˝
 *lacp)

454 
¶ave
 *slave;

456 
	`HMAP_FOR_EACH
 (
¶ave
, 
node
, &
œ˝
->
¶aves
) {

457 i‡(
	`¶ave_may_tx
(
¶ave
)) {

458 
	`timî_waô
(&
¶ave
->
tx
);

461 i‡(
¶ave
->
°©us
 !
LACP_DEFAULTED
) {

462 
	`timî_waô
(&
¶ave
->
rx
);

465 
	}
}

472 
	$œ˝_upd©e_©èched
(
œ˝
 *lacp)

474 
¶ave
 *
Àad
, *slave;

475 
œ˝_öfo
 
Àad_¥i
;

476 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 10);

478 
œ˝
->
upd©e
 = 
Ál£
;

480 
Àad
 = 
NULL
;

481 
	`HMAP_FOR_EACH
 (
¶ave
, 
node
, &
œ˝
->
¶aves
) {

482 
œ˝_öfo
 
¥i
;

484 
¶ave
->
©èched
 = 
Ál£
;

488 i‡(
	`ëh_addr_equÆs
(
¶ave
->
∑π√r
.
sys_id
, sœve->
œ˝
->sys_id)) {

489 
	`VLOG_WARN_RL
(&
æ
, "slave %s: Loopback detected. Slave is "

490 "c⁄√˘edÅÿô†ow¿b⁄d", 
¶ave
->
«me
);

494 i‡(
¶ave
->
°©us
 =
LACP_DEFAULTED
) {

498 
¶ave
->
©èched
 = 
åue
;

499 
	`¶ave_gë_¥i‹ôy
(
¶ave
, &
¥i
);

501 i‡(!
Àad
 || 
	`memcmp
(&
¥i
, &
Àad_¥i
, Öri) < 0) {

502 
Àad
 = 
¶ave
;

503 
Àad_¥i
 = 
¥i
;

507 
œ˝
->
√gŸüãd
 = 
Àad
 !
NULL
;

509 i‡(
Àad
) {

510 
	`HMAP_FOR_EACH
 (
¶ave
, 
node
, &
œ˝
->
¶aves
) {

511 i‡(
Àad
->
∑π√r
.
key
 !
¶ave
->partner.key

512 || !
	`ëh_addr_equÆs
(
Àad
->
∑π√r
.
sys_id
,

513 
¶ave
->
∑π√r
.
sys_id
)) {

514 
¶ave
->
©èched
 = 
Ál£
;

518 
	}
}

521 
	$¶ave_de°roy
(
¶ave
 *slave)

523 i‡(
¶ave
) {

524 
œ˝
 *œ˝ = 
¶ave
->lacp;

526 
œ˝
->
upd©e
 = 
åue
;

527 
	`hm≠_ªmove
(&
œ˝
->
¶aves
, &
¶ave
->
node
);

529 i‡(
œ˝
->
key_¶ave
 =
¶ave
) {

530 
hm≠_node
 *
¶ave_node
 = 
	`hm≠_fú°
(&
œ˝
->
¶aves
);

532 i‡(
¶ave_node
) {

533 
œ˝
->
key_¶ave
 = 
	`CONTAINER_OF
(
¶ave_node
, 
¶ave
, 
node
);

535 
œ˝
->
key_¶ave
 = 
NULL
;

539 
	`‰ì
(
¶ave
->
«me
);

540 
	`‰ì
(
¶ave
);

542 
	}
}

545 
	$¶ave_£t_deÁu…ed
(
¶ave
 *slave)

547 
	`mem£t
(&
¶ave
->
∑π√r
, 0,  slave->partner);

549 
¶ave
->
œ˝
->
upd©e
 = 
åue
;

550 
¶ave
->
°©us
 = 
LACP_DEFAULTED
;

551 
	}
}

554 
	$¶ave_£t_expúed
(
¶ave
 *slave)

556 
¶ave
->
°©us
 = 
LACP_EXPIRED
;

557 
¶ave
->
∑π√r
.
°©e
 |
LACP_STATE_TIME
;

558 
¶ave
->
∑π√r
.
°©e
 &~
LACP_STATE_SYNC
;

560 
	`timî_£t_duøti⁄
(&
¶ave
->
rx
, 
LACP_RX_MULTIPLIER
 * 
LACP_FAST_TIME_TX
);

561 
	}
}

564 
	$¶ave_gë_a˘‹
(
¶ave
 *¶ave, 
œ˝_öfo
 *
a˘‹
)

566 
œ˝
 *œ˝ = 
¶ave
->lacp;

567 
uöt16_t
 
key
;

568 
uöt8_t
 
°©e
 = 0;

570 i‡(
œ˝
->
a˘ive
) {

571 
°©e
 |
LACP_STATE_ACT
;

574 i‡(
œ˝
->
Á°
) {

575 
°©e
 |
LACP_STATE_TIME
;

578 i‡(
¶ave
->
©èched
) {

579 
°©e
 |
LACP_STATE_SYNC
;

582 i‡(
¶ave
->
°©us
 =
LACP_DEFAULTED
) {

583 
°©e
 |
LACP_STATE_DEF
;

586 i‡(
¶ave
->
°©us
 =
LACP_EXPIRED
) {

587 
°©e
 |
LACP_STATE_EXP
;

590 i‡(
	`hm≠_cou¡
(&
œ˝
->
¶aves
) > 1) {

591 
°©e
 |
LACP_STATE_AGG
;

594 i‡(
¶ave
->
©èched
 || !
œ˝
->
√gŸüãd
) {

595 
°©e
 |
LACP_STATE_COL
 | 
LACP_STATE_DIST
;

598 
key
 = 
œ˝
->
key_¶ave
->key;

599 i‡(!
key
) {

600 
key
 = 
œ˝
->
key_¶ave
->
p‹t_id
;

603 
a˘‹
->
°©e
 = state;

604 
a˘‹
->
key
 = 
	`ht⁄s
(key);

605 
a˘‹
->
p‹t_¥i‹ôy
 = 
	`ht⁄s
(
¶ave
->port_priority);

606 
a˘‹
->
p‹t_id
 = 
	`ht⁄s
(
¶ave
->port_id);

607 
a˘‹
->
sys_¥i‹ôy
 = 
	`ht⁄s
(
œ˝
->sys_priority);

608 
	`mem˝y
(&
a˘‹
->
sys_id
, 
œ˝
->sys_id, 
ETH_ADDR_LEN
);

609 
	}
}

616 
	$¶ave_gë_¥i‹ôy
(
¶ave
 *¶ave, 
œ˝_öfo
 *
¥i‹ôy
)

618 
uöt16_t
 
∑π√r_¥i‹ôy
, 
a˘‹_¥i‹ôy
;

622 
a˘‹_¥i‹ôy
 = 
¶ave
->
œ˝
->
sys_¥i‹ôy
;

623 
∑π√r_¥i‹ôy
 = 
	`¡ohs
(
¶ave
->
∑π√r
.
sys_¥i‹ôy
);

624 i‡(
a˘‹_¥i‹ôy
 < 
∑π√r_¥i‹ôy
) {

625 
	`¶ave_gë_a˘‹
(
¶ave
, 
¥i‹ôy
);

626 } i‡(
∑π√r_¥i‹ôy
 < 
a˘‹_¥i‹ôy
) {

627 *
¥i‹ôy
 = 
¶ave
->
∑π√r
;

628 } i‡(
	`ëh_addr_com∑ª_3way
(
¶ave
->
œ˝
->
sys_id
,

629 
¶ave
->
∑π√r
.
sys_id
) < 0) {

630 
	`¶ave_gë_a˘‹
(
¶ave
, 
¥i‹ôy
);

632 *
¥i‹ôy
 = 
¶ave
->
∑π√r
;

636 
¥i‹ôy
->
key
 = 0;

637 
¥i‹ôy
->
°©e
 = 0;

638 
	}
}

640 
boﬁ


641 
	$¶ave_may_tx
(c⁄° 
¶ave
 *slave)

643  
¶ave
->
œ˝
->
a˘ive
 || sœve->
°©us
 !
LACP_DEFAULTED
;

644 
	}
}

646 
¶ave
 *

647 
	$¶ave_lookup
(c⁄° 
œ˝
 *œ˝, c⁄° *
¶ave_
)

649 
¶ave
 *slave;

651 
	`HMAP_FOR_EACH_IN_BUCKET
 (
¶ave
, 
node
, 
	`hash_poöãr
(
¶ave_
, 0),

652 &
œ˝
->
¶aves
) {

653 i‡(
¶ave
->
aux
 =
¶ave_
) {

654  
¶ave
;

658  
NULL
;

659 
	}
}

663 
boﬁ


664 
	$öfo_tx_equÆ
(
œ˝_öfo
 *
a
, œ˝_öfÿ*
b
)

672  !((
a
->
°©e
 ^ 
b
->°©eË& (
LACP_STATE_ACT


673 | 
LACP_STATE_TIME


674 | 
LACP_STATE_SYNC


675 | 
LACP_STATE_AGG
))

676 && 
a
->
p‹t_id
 =
b
->port_id

677 && 
a
->
p‹t_¥i‹ôy
 =
b
->port_priority

678 && 
a
->
key
 =
b
->key

679 && 
a
->
sys_¥i‹ôy
 =
b
->sys_priority

680 && 
	`ëh_addr_equÆs
(
a
->
sys_id
, 
b
->sys_id);

681 
	}
}

683 
œ˝
 *

684 
	$œ˝_föd
(c⁄° *
«me
)

686 
œ˝
 *lacp;

688 
	`LIST_FOR_EACH
 (
œ˝
, 
node
, &
Æl_œ˝s
) {

689 i‡(!
	`°rcmp
(
œ˝
->
«me
,Çame)) {

690  
œ˝
;

694  
NULL
;

695 
	}
}

698 
	$ds_put_œ˝_°©e
(
ds
 *ds, 
uöt8_t
 
°©e
)

700 i‡(
°©e
 & 
LACP_STATE_ACT
) {

701 
	`ds_put_c°r
(
ds
, "áctivity");

704 i‡(
°©e
 & 
LACP_STATE_TIME
) {

705 
	`ds_put_c°r
(
ds
, "Åimeout");

708 i‡(
°©e
 & 
LACP_STATE_AGG
) {

709 
	`ds_put_c°r
(
ds
, "ággregation");

712 i‡(
°©e
 & 
LACP_STATE_SYNC
) {

713 
	`ds_put_c°r
(
ds
, " synchronized");

716 i‡(
°©e
 & 
LACP_STATE_COL
) {

717 
	`ds_put_c°r
(
ds
, " collecting");

720 i‡(
°©e
 & 
LACP_STATE_DIST
) {

721 
	`ds_put_c°r
(
ds
, " distributing");

724 i‡(
°©e
 & 
LACP_STATE_DEF
) {

725 
	`ds_put_c°r
(
ds
, " defaulted");

728 i‡(
°©e
 & 
LACP_STATE_EXP
) {

729 
	`ds_put_c°r
(
ds
, "Éxpired");

731 
	}
}

734 
	$œ˝_¥öt_dëaûs
(
ds
 *ds, 
œ˝
 *lacp)

736 
shash
 
¶ave_shash
 = 
	`SHASH_INITIALIZER
(&slave_shash);

737 c⁄° 
shash_node
 **
s‹ãd_¶aves
 = 
NULL
;

739 
¶ave
 *slave;

740 
i
;

742 
	`ds_put_f‹m©
(
ds
, "---- %†----\n", 
œ˝
->
«me
);

743 
	`ds_put_f‹m©
(
ds
, "\t°©us: %s", 
œ˝
->
a˘ive
 ? "active" : "passive");

744 i‡(
œ˝
->
√gŸüãd
) {

745 
	`ds_put_c°r
(
ds
, "Çegotiated");

747 
	`ds_put_c°r
(
ds
, "\n");

749 
	`ds_put_f‹m©
(
ds
, "\tsys_id: " 
ETH_ADDR_FMT
 "\n", 
	`ETH_ADDR_ARGS
(
œ˝
->
sys_id
));

750 
	`ds_put_f‹m©
(
ds
, "\tsys_¥i‹ôy: %u\n", 
œ˝
->
sys_¥i‹ôy
);

751 
	`ds_put_c°r
(
ds
, "\taggregation key: ");

752 i‡(
œ˝
->
key_¶ave
) {

753 
	`ds_put_f‹m©
(
ds
, "%u", 
œ˝
->
key_¶ave
->
p‹t_id
);

755 
	`ds_put_c°r
(
ds
, "none");

757 
	`ds_put_c°r
(
ds
, "\n");

759 
	`ds_put_c°r
(
ds
, "\tlacp_time: ");

760 i‡(
œ˝
->
Á°
) {

761 
	`ds_put_c°r
(
ds
, "fast\n");

763 
	`ds_put_c°r
(
ds
, "slow\n");

766 
	`HMAP_FOR_EACH
 (
¶ave
, 
node
, &
œ˝
->
¶aves
) {

767 
	`shash_add
(&
¶ave_shash
, 
¶ave
->
«me
, slave);

769 
s‹ãd_¶aves
 = 
	`shash_s‹t
(&
¶ave_shash
);

771 
i
 = 0; i < 
	`shash_cou¡
(&
¶ave_shash
); i++) {

772 *
°©us
;

773 
œ˝_öfo
 
a˘‹
;

775 
¶ave
 = 
s‹ãd_¶aves
[
i
]->
d©a
;

776 
	`¶ave_gë_a˘‹
(
¶ave
, &
a˘‹
);

777 
¶ave
->
°©us
) {

778 
LACP_CURRENT
:

779 
°©us
 = "current";

781 
LACP_EXPIRED
:

782 
°©us
 = "expired";

784 
LACP_DEFAULTED
:

785 
°©us
 = "defaulted";

788 
	`NOT_REACHED
();

791 
	`ds_put_f‹m©
(
ds
, "\n¶ave: %s: %†%s\n", 
¶ave
->
«me
, 
°©us
,

792 
¶ave
->
©èched
 ? "attached" : "detached");

793 
	`ds_put_f‹m©
(
ds
, "\ç‹t_id: %u\n", 
¶ave
->
p‹t_id
);

794 
	`ds_put_f‹m©
(
ds
, "\ç‹t_¥i‹ôy: %u\n", 
¶ave
->
p‹t_¥i‹ôy
);

795 
	`ds_put_f‹m©
(
ds
, "\tmay_íabÀ: %s\n", (
	`¶ave_may_íabÀ__
(
¶ave
)

798 
	`ds_put_f‹m©
(
ds
, "\n\è˘‹ sys_id: " 
ETH_ADDR_FMT
 "\n",

799 
	`ETH_ADDR_ARGS
(
a˘‹
.
sys_id
));

800 
	`ds_put_f‹m©
(
ds
, "\tactor sys_priority: %u\n",

801 
	`¡ohs
(
a˘‹
.
sys_¥i‹ôy
));

802 
	`ds_put_f‹m©
(
ds
, "\tactorÖort_id: %u\n",

803 
	`¡ohs
(
a˘‹
.
p‹t_id
));

804 
	`ds_put_f‹m©
(
ds
, "\tactorÖort_priority: %u\n",

805 
	`¡ohs
(
a˘‹
.
p‹t_¥i‹ôy
));

806 
	`ds_put_f‹m©
(
ds
, "\tactor key: %u\n",

807 
	`¡ohs
(
a˘‹
.
key
));

808 
	`ds_put_c°r
(
ds
, "\tactor state:");

809 
	`ds_put_œ˝_°©e
(
ds
, 
a˘‹
.
°©e
);

810 
	`ds_put_c°r
(
ds
, "\n\n");

812 
	`ds_put_f‹m©
(
ds
, "\ç¨äî sys_id: " 
ETH_ADDR_FMT
 "\n",

813 
	`ETH_ADDR_ARGS
(
¶ave
->
∑π√r
.
sys_id
));

814 
	`ds_put_f‹m©
(
ds
, "\tpartner sys_priority: %u\n",

815 
	`¡ohs
(
¶ave
->
∑π√r
.
sys_¥i‹ôy
));

816 
	`ds_put_f‹m©
(
ds
, "\tpartnerÖort_id: %u\n",

817 
	`¡ohs
(
¶ave
->
∑π√r
.
p‹t_id
));

818 
	`ds_put_f‹m©
(
ds
, "\tpartnerÖort_priority: %u\n",

819 
	`¡ohs
(
¶ave
->
∑π√r
.
p‹t_¥i‹ôy
));

820 
	`ds_put_f‹m©
(
ds
, "\tpartner key: %u\n",

821 
	`¡ohs
(
¶ave
->
∑π√r
.
key
));

822 
	`ds_put_c°r
(
ds
, "\tpartner state:");

823 
	`ds_put_œ˝_°©e
(
ds
, 
¶ave
->
∑π√r
.
°©e
);

824 
	`ds_put_c°r
(
ds
, "\n");

827 
	`shash_de°roy
(&
¶ave_shash
);

828 
	`‰ì
(
s‹ãd_¶aves
);

829 
	}
}

832 
	$œ˝_unix˘l_show
(
unix˘l_c⁄n
 *
c⁄n
, 
¨gc
, c⁄° *
¨gv
[],

833 *
aux
 
OVS_UNUSED
)

835 
ds
 d†
DS_EMPTY_INITIALIZER
;

836 
œ˝
 *lacp;

838 i‡(
¨gc
 > 1) {

839 
œ˝
 = 
	`œ˝_föd
(
¨gv
[1]);

840 i‡(!
œ˝
) {

841 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, "no suchÜacp object");

844 
	`œ˝_¥öt_dëaûs
(&
ds
, 
œ˝
);

846 
	`LIST_FOR_EACH
 (
œ˝
, 
node
, &
Æl_œ˝s
) {

847 
	`œ˝_¥öt_dëaûs
(&
ds
, 
œ˝
);

851 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, 
	`ds_c°r
(&
ds
));

852 
	`ds_de°roy
(&
ds
);

853 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/lacp.h

17 #i‚de‡
LACP_H


18 
	#LACP_H
 1

	)

20 
	~<°dboﬁ.h
>

21 
	~<°döt.h
>

22 
	~"∑ckës.h
"

26 
	eœ˝_°©us
 {

27 
	mLACP_NEGOTIATED
,

28 
	mLACP_CONFIGURED
,

29 
	mLACP_DISABLED


32 
	sœ˝_£âögs
 {

33 *
	m«me
;

34 
uöt8_t
 
	mid
[
ETH_ADDR_LEN
];

35 
uöt16_t
 
	m¥i‹ôy
;

36 
boﬁ
 
	ma˘ive
;

37 
boﬁ
 
	mÁ°
;

40 
œ˝_öô
();

41 
œ˝
 *
œ˝_¸óã
();

42 
œ˝_de°roy
(
œ˝
 *);

44 
œ˝_c⁄figuª
(
œ˝
 *, c⁄° 
œ˝_£âögs
 *);

45 
boﬁ
 
œ˝_is_a˘ive
(c⁄° 
œ˝
 *);

47 
œ˝_¥o˚ss_∑ckë
(
œ˝
 *, c⁄° *
¶ave
,

48 c⁄° 
oÂbuf
 *
∑ckë
);

49 
œ˝_°©us
Üa˝_°©us(c⁄° 
œ˝
 *);

51 
	sœ˝_¶ave_£âögs
 {

52 *
	m«me
;

53 
uöt16_t
 
	mid
;

54 
uöt16_t
 
	m¥i‹ôy
;

55 
uöt16_t
 
	mkey
;

58 
œ˝_¶ave_ªgi°î
(
œ˝
 *, *
¶ave_
,

59 c⁄° 
œ˝_¶ave_£âögs
 *);

60 
œ˝_¶ave_uƒegi°î
(
œ˝
 *, c⁄° *
¶ave
);

61 
œ˝_¶ave_ˇºõr_ch™ged
(c⁄° 
œ˝
 *, c⁄° *
¶ave
);

62 
boﬁ
 
œ˝_¶ave_may_íabÀ
(c⁄° 
œ˝
 *, c⁄° *
¶ave
);

63 
uöt16_t
 
œ˝_¶ave_gë_p‹t_id
(c⁄° 
œ˝
 *, c⁄° *
¶ave
);

64 
boﬁ
 
œ˝_¶ave_is_cuºít
(c⁄° 
œ˝
 *, c⁄° *
¶ave_
);

67 
	tœ˝_£nd_pdu
(*
	t¶ave
, c⁄° *
	tpdu
, 
	tsize_t
 
	tpdu_size
);

69 
œ˝_run
(
œ˝
 *, 
œ˝_£nd_pdu
 *);

70 
œ˝_waô
(
œ˝
 *);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/leak-checker.c

17 
	~<c⁄fig.h
>

18 
	~"Àak-checkî.h
"

19 
	~<öây≥s.h
>

20 
	~"backåa˚.h
"

21 
	~"vlog.h
"

23 
VLOG_DEFINE_THIS_MODULE
(
Àak_checkî
);

25 #i‚de‡
HAVE_MALLOC_HOOKS


27 
	$Àak_checkî_°¨t
(c⁄° *
fûe_«me
 
OVS_UNUSED
)

29 
	`VLOG_WARN
("notÉnablingÜeak checker becauseÅheÜibc in use doesÇot "

31 
	}
}

34 
	$Àak_checkî_£t_limô
(
off_t
 
max_size
 
OVS_UNUSED
)

36 
	}
}

39 
	$Àak_checkî_˛aim
(c⁄° *
p
 
OVS_UNUSED
)

41 
	}
}

44 
	$Àak_checkî_ußge
()

46 
	`¥ötf
(" --check-leaks=FILE (accepted but ignored inÅhis build)\n");

47 
	}
}

49 
	~<î∫o.h
>

50 
	~<f˙é.h
>

51 
	~<mÆloc.h
>

52 
	~<sys/°©.h
>

54 *
	tmÆloc_hook_ty≥
(
	tsize_t
, const *);

55 *
	tªÆloc_hook_ty≥
(*, 
	tsize_t
, const *);

56 
	t‰ì_hook_ty≥
(*, const *);

58 
	shooks
 {

59 
mÆloc_hook_ty≥
 *
	mmÆloc_hook_func
;

60 
ªÆloc_hook_ty≥
 *
	mªÆloc_hook_func
;

61 
‰ì_hook_ty≥
 *
	m‰ì_hook_func
;

64 
mÆloc_hook_ty≥
 
	ghook_mÆloc
;

65 
ªÆloc_hook_ty≥
 
	ghook_ªÆloc
;

66 
‰ì_hook_ty≥
 
	ghook_‰ì
;

68 
hooks
 
	glibc_hooks
;

69 c⁄° 
hooks
 
	gour_hooks
 = { 
hook_mÆloc
, 
hook_ªÆloc
, 
hook_‰ì
 };

71 
FILE
 *
	gfûe
;

72 
off_t
 
	glimô
 = 10 * 1000 * 1000;

75 
	$gë_hooks
(
hooks
 *hooks)

77 
hooks
->
mÆloc_hook_func
 = 
__mÆloc_hook
;

78 
hooks
->
ªÆloc_hook_func
 = 
__ªÆloc_hook
;

79 
hooks
->
‰ì_hook_func
 = 
__‰ì_hook
;

80 
	}
}

83 
	$£t_hooks
(c⁄° 
hooks
 *hooks)

85 
__mÆloc_hook
 = 
hooks
->
mÆloc_hook_func
;

86 
__ªÆloc_hook
 = 
hooks
->
ªÆloc_hook_func
;

87 
__‰ì_hook
 = 
hooks
->
‰ì_hook_func
;

88 
	}
}

91 
	$Àak_checkî_°¨t
(c⁄° *
fûe_«me
)

93 i‡(!
fûe
) {

94 
fûe
 = 
	`f›í
(
fûe_«me
, "w");

95 i‡(!
fûe
) {

96 
	`VLOG_WARN
("failedÅo create \"%s\": %s",

97 
fûe_«me
, 
	`°ªº‹
(
î∫o
));

100 
	`£tvbuf
(
fûe
, 
NULL
, 
_IOLBF
, 0);

101 
	`VLOG_WARN
("íabÀd mem‹yÜókÜoggögÅÿ\"%s\"", 
fûe_«me
);

102 
	`gë_hooks
(&
libc_hooks
);

103 
	`£t_hooks
(&
our_hooks
);

105 
	}
}

108 
	$Àak_checkî_°›
()

110 i‡(
fûe
) {

111 
	`f˛o£
(
fûe
);

112 
fûe
 = 
NULL
;

113 
	`£t_hooks
(&
libc_hooks
);

114 
	`VLOG_WARN
("disabled memoryÜeakÜogging");

116 
	}
}

119 
	$Àak_checkî_£t_limô
(
off_t
 
limô_
)

121 
limô
 = 
limô_
;

122 
	}
}

125 
	$Àak_checkî_ußge
()

127 
	`¥ötf
(" --check-leaks=FILEÜog mallocánd free callsÅo FILE\n");

128 
	}
}

130 
	$PRINTF_FORMAT
(1, 2)

131 
	$log_ˇŒîs
(c⁄° *
f‹m©
, ...)

133 
backåa˚
 backtrace;

134 
va_li°
 
¨gs
;

135 
i
;

137 
	`va_°¨t
(
¨gs
, 
f‹m©
);

138 
	`vÂrötf
(
fûe
, 
f‹m©
, 
¨gs
);

139 
	`va_íd
(
¨gs
);

141 
	`putc
(':', 
fûe
);

142 
	`backåa˚_ˇ±uª
(&
backåa˚
);

143 
i
 = 0; i < 
backåa˚
.
n_‰ames
; i++) {

144 
	`Ârötf
(
fûe
, " 0x%"
PRIxPTR
, 
backåa˚
.
‰ames
[
i
]);

146 
	`putc
('\n', 
fûe
);

147 
	}
}

150 
	$ª£t_hooks
()

152 
cou¡
;

154 i‡(
fûe
) {

155 i‡(
	`„º‹
(
fûe
)) {

156 
	`VLOG_WARN
("error writingÜeak checkerÜog file");

157 
	`Àak_checkî_°›
();

161 i‡(
cou¡
++ >100 && 
limô
) {

162 
°©
 
s
;

163 
cou¡
 = 0;

164 i‡(
	`f°©
(
	`fûío
(
fûe
), &
s
) < 0) {

165 
	`VLOG_WARN
("cannot fstatÜeak checkerÜog file: %s",

166 
	`°ªº‹
(
î∫o
));

167 
	`Àak_checkî_°›
();

170 i‡(
s
.
°_size
 > 
limô
) {

171 
	`VLOG_WARN
("leak checkerÜog file sizeÉxceededÜimit");

172 
	`Àak_checkî_°›
();

177 i‡(
fûe
) {

178 
	`£t_hooks
(&
our_hooks
);

180 
	}
}

183 
	$hook_mÆloc
(
size_t
 
size
, c⁄° *
ˇŒî
 
OVS_UNUSED
)

185 *
p
;

187 
	`£t_hooks
(&
libc_hooks
);

188 
p
 = 
	`mÆloc
(
size
);

189 
	`gë_hooks
(&
libc_hooks
);

191 
	`log_ˇŒîs
("mÆloc(%zuË-> %p", 
size
, 
p
);

193 
	`ª£t_hooks
();

194  
p
;

195 
	}
}

198 
	$Àak_checkî_˛aim
(c⁄° *
p
)

200 i‡(!
fûe
) {

204 i‡(
p
) {

205 
	`£t_hooks
(&
libc_hooks
);

206 
	`log_ˇŒîs
("˛aim(%p)", 
p
);

207 
	`ª£t_hooks
();

209 
	}
}

212 
	$hook_‰ì
(*
p
, c⁄° *
ˇŒî
 
OVS_UNUSED
)

214 i‡(!
p
) {

218 
	`£t_hooks
(&
libc_hooks
);

219 
	`log_ˇŒîs
("‰ì(%p)", 
p
);

220 
	`‰ì
(
p
);

221 
	`gë_hooks
(&
libc_hooks
);

223 
	`ª£t_hooks
();

224 
	}
}

227 
	$hook_ªÆloc
(*
p
, 
size_t
 
size
, c⁄° *
ˇŒî
 
OVS_UNUSED
)

229 *
q
;

231 
	`£t_hooks
(&
libc_hooks
);

232 
q
 = 
	`ªÆloc
(
p
, 
size
);

233 
	`gë_hooks
(&
libc_hooks
);

235 i‡(
p
 !
q
) {

236 
	`log_ˇŒîs
("ªÆloc(%p, %zuË-> %p", 
p
, 
size
, 
q
);

239 
	`ª£t_hooks
();

241  
q
;

242 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/leak-checker.h

17 #i‚de‡
LEAK_CHECKER_H


18 
	#LEAK_CHECKER_H
 1

	)

20 
	~<sys/ty≥s.h
>

22 
	#LEAK_CHECKER_OPTION_ENUMS
 \

23 
OPT_CHECK_LEAKS
, \

24 
OPT_LEAK_LIMIT


	)

25 
	#LEAK_CHECKER_LONG_OPTIONS
 \

26 {"check-Àaks", 
ªquúed_¨gumít
, 
NULL
, 
OPT_CHECK_LEAKS
}, \

27 {"Àak-limô", 
ªquúed_¨gumít
, 
NULL
, 
OPT_LEAK_LIMIT
}

	)

28 
	#LEAK_CHECKER_OPTION_HANDLERS
 \

29 
OPT_CHECK_LEAKS
: \

30 
	`Àak_checkî_°¨t
(
›èrg
); \

32 
OPT_LEAK_LIMIT
: \

33 
	`Àak_checkî_£t_limô
(
	`©ﬁ
(
›èrg
)); \

34 ;

	)

35 
Àak_checkî_°¨t
(c⁄° *
fûe_«me
);

36 
Àak_checkî_£t_limô
(
off_t
 
limô
);

37 
Àak_checkî_°›
();

38 
Àak_checkî_˛aim
(const *);

39 
Àak_checkî_ußge
();

	@/home/lsch/mytest/openvswitch-1.9.0/lib/learn.c

17 
	~<c⁄fig.h
>

19 
	~"À¨n.h
"

21 
	~"byã-‹dî.h
"

22 
	~"dy«mic-°rög.h
"

23 
	~"m©ch.h
"

24 
	~"mëa-Êow.h
"

25 
	~"nx-m©ch.h
"

26 
	~"oÂ-a˘i⁄s.h
"

27 
	~"oÂ-îr‹s.h
"

28 
	~"oÂ-utû.h
"

29 
	~"oÂbuf.h
"

30 
	~"›íÊow/›íÊow.h
"

31 
	~"u«lig√d.h
"

33 
ovs_be16


34 
	$gë_be16
(c⁄° **
µ
)

36 c⁄° 
ovs_be16
 *
p
 = *
µ
;

37 
ovs_be16
 
vÆue
 = *
p
;

38 *
µ
 = 
p
 + 1;

39  
vÆue
;

40 
	}
}

42 
ovs_be32


43 
	$gë_be32
(c⁄° **
µ
)

45 c⁄° 
ovs_be32
 *
p
 = *
µ
;

46 
ovs_be32
 
vÆue
 = 
	`gë_u«lig√d_be32
(
p
);

47 *
µ
 = 
p
 + 1;

48  
vÆue
;

49 
	}
}

52 
	$gë_subfõld
(
n_bôs
, c⁄° **
p
, 
mf_subfõld
 *
sf
)

54 
sf
->
fõld
 = 
	`mf_‰om_nxm_hódî
(
	`¡ohl
(
	`gë_be32
(
p
)));

55 
sf
->
ofs
 = 
	`¡ohs
(
	`gë_be16
(
p
));

56 
sf
->
n_bôs
 =Ç_bits;

57 
	}
}

60 
	$À¨n_mö_Àn
(
uöt16_t
 
hódî
)

62 
n_bôs
 = 
hódî
 & 
NX_LEARN_N_BITS_MASK
;

63 
§c_ty≥
 = 
hódî
 & 
NX_LEARN_SRC_MASK
;

64 
d°_ty≥
 = 
hódî
 & 
NX_LEARN_DST_MASK
;

65 
mö_Àn
;

67 
mö_Àn
 = 0;

68 i‡(
§c_ty≥
 =
NX_LEARN_SRC_FIELD
) {

69 
mö_Àn
 +(
ovs_be32
);

70 
mö_Àn
 +(
ovs_be16
);

72 
mö_Àn
 +
	`DIV_ROUND_UP
(
n_bôs
, 16);

74 i‡(
d°_ty≥
 =
NX_LEARN_DST_MATCH
 ||

75 
d°_ty≥
 =
NX_LEARN_DST_LOAD
) {

76 
mö_Àn
 +(
ovs_be32
);

77 
mö_Àn
 +(
ovs_be16
);

79  
mö_Àn
;

80 
	}
}

84 
oÂîr


85 
	$À¨n_‰om_›íÊow
(c⁄° 
nx_a˘i⁄_À¨n
 *
«l
, 
oÂbuf
 *
oÂa˘s
)

87 
oÂa˘_À¨n
 *
À¨n
;

88 c⁄° *
p
, *
íd
;

90 i‡(
«l
->
∑d
) {

91  
OFPERR_OFPBAC_BAD_ARGUMENT
;

94 
À¨n
 = 
	`oÂa˘_put_LEARN
(
oÂa˘s
);

96 
À¨n
->
idÀ_timeout
 = 
	`¡ohs
(
«l
->idle_timeout);

97 
À¨n
->
h¨d_timeout
 = 
	`¡ohs
(
«l
->hard_timeout);

98 
À¨n
->
¥i‹ôy
 = 
	`¡ohs
(
«l
->priority);

99 
À¨n
->
cookõ
 = 
	`¡ohŒ
(
«l
->cookie);

100 
À¨n
->
Êags
 = 
	`¡ohs
(
«l
->flags);

101 
À¨n
->
èbÀ_id
 = 
«l
->table_id;

102 
À¨n
->
fö_idÀ_timeout
 = 
	`¡ohs
(
«l
->fin_idle_timeout);

103 
À¨n
->
fö_h¨d_timeout
 = 
	`¡ohs
(
«l
->fin_hard_timeout);

105 i‡(
À¨n
->
Êags
 & ~
OFPFF_SEND_FLOW_REM
 ||Üó∫->
èbÀ_id
 == 0xff) {

106  
OFPERR_OFPBAC_BAD_ARGUMENT
;

109 
íd
 = (*Ë
«l
 + 
	`¡ohs
“Æ->
Àn
);

110 
p
 = 
«l
 + 1;Ö !
íd
; ) {

111 
oÂa˘_À¨n_•ec
 *
•ec
;

112 
uöt16_t
 
hódî
 = 
	`¡ohs
(
	`gë_be16
(&
p
));

114 i‡(!
hódî
) {

118 
•ec
 = 
	`oÂbuf_put_zîos
(
oÂa˘s
,  *spec);

119 
À¨n
 = 
oÂa˘s
->
l2
;

120 
À¨n
->
n_•ecs
++;

122 
•ec
->
§c_ty≥
 = 
hódî
 & 
NX_LEARN_SRC_MASK
;

123 
•ec
->
d°_ty≥
 = 
hódî
 & 
NX_LEARN_DST_MASK
;

124 
•ec
->
n_bôs
 = 
hódî
 & 
NX_LEARN_N_BITS_MASK
;

127 i‡(
•ec
->
d°_ty≥
 =
NX_LEARN_DST_MATCH
 ||

128 
•ec
->
d°_ty≥
 =
NX_LEARN_DST_LOAD
 ||

129 (
•ec
->
d°_ty≥
 =
NX_LEARN_DST_OUTPUT
 &&

130 
•ec
->
§c_ty≥
 =
NX_LEARN_SRC_FIELD
)) {

133  
OFPERR_OFPBAC_BAD_ARGUMENT
;

137 i‡((*Ë
íd
 - (*Ë
p
 < 
	`À¨n_mö_Àn
(
hódî
)) {

138  
OFPERR_OFPBAC_BAD_LEN
;

142 i‡(
•ec
->
§c_ty≥
 =
NX_LEARN_SRC_FIELD
) {

143 
	`gë_subfõld
(
•ec
->
n_bôs
, &
p
, &•ec->
§c
);

145 
p_byãs
 = 2 * 
	`DIV_ROUND_UP
(
•ec
->
n_bôs
, 16);

147 
	`bôwi£_c›y
(
p
, 
p_byãs
, 0,

148 &
•ec
->
§c_imm
,  spec->src_imm, 0,

149 
•ec
->
n_bôs
);

150 
p
 = (c⁄° 
uöt8_t
 *Ë∞+ 
p_byãs
;

154 i‡(
•ec
->
d°_ty≥
 =
NX_LEARN_DST_MATCH
 ||

155 
•ec
->
d°_ty≥
 =
NX_LEARN_DST_LOAD
) {

156 
	`gë_subfõld
(
•ec
->
n_bôs
, &
p
, &•ec->
d°
);

159 
	`oÂa˘_upd©e_Àn
(
oÂa˘s
, &
À¨n
->
oÂa˘
);

161 i‡(!
	`is_Æl_zîos
(
p
, (*Ë
íd
 - (*)Ö)) {

162  
OFPERR_OFPBAC_BAD_ARGUMENT
;

166 
	}
}

170 
oÂîr


171 
	$À¨n_check
(c⁄° 
oÂa˘_À¨n
 *
À¨n
, c⁄° 
Êow
 *flow)

173 c⁄° 
oÂa˘_À¨n_•ec
 *
•ec
;

174 
m©ch
 match;

176 
	`m©ch_öô_ˇtchÆl
(&
m©ch
);

177 
•ec
 = 
À¨n
->
•ecs
; s≥¯< &À¨n->•ecs[À¨n->
n_•ecs
]; spec++) {

178 
oÂîr
 
îr‹
;

181 i‡(
•ec
->
§c_ty≥
 =
NX_LEARN_SRC_FIELD
) {

182 
îr‹
 = 
	`mf_check_§c
(&
•ec
->
§c
, 
Êow
);

183 i‡(
îr‹
) {

184  
îr‹
;

189 
•ec
->
d°_ty≥
) {

190 
NX_LEARN_DST_MATCH
:

191 
îr‹
 = 
	`mf_check_§c
(&
•ec
->
d°
, &
m©ch
.
Êow
);

192 i‡(
îr‹
) {

193  
îr‹
;

196 
	`mf_wrôe_subfõld
(&
•ec
->
d°
, &•ec->
§c_imm
, &
m©ch
);

199 
NX_LEARN_DST_LOAD
:

200 
îr‹
 = 
	`mf_check_d°
(&
•ec
->
d°
, &
m©ch
.
Êow
);

201 i‡(
îr‹
) {

202  
îr‹
;

206 
NX_LEARN_DST_OUTPUT
:

212 
	}
}

215 
	$put_be16
(
oÂbuf
 *
b
, 
ovs_be16
 
x
)

217 
	`oÂbuf_put
(
b
, &
x
,  x);

218 
	}
}

221 
	$put_be32
(
oÂbuf
 *
b
, 
ovs_be32
 
x
)

223 
	`oÂbuf_put
(
b
, &
x
,  x);

224 
	}
}

227 
	$put_u16
(
oÂbuf
 *
b
, 
uöt16_t
 
x
)

229 
	`put_be16
(
b
, 
	`ht⁄s
(
x
));

230 
	}
}

233 
	$put_u32
(
oÂbuf
 *
b
, 
uöt32_t
 
x
)

235 
	`put_be32
(
b
, 
	`ht⁄l
(
x
));

236 
	}
}

241 
	$À¨n_to_nxa°
(c⁄° 
oÂa˘_À¨n
 *
À¨n
, 
oÂbuf
 *
›íÊow
)

243 c⁄° 
oÂa˘_À¨n_•ec
 *
•ec
;

244 
nx_a˘i⁄_À¨n
 *
«l
;

245 
size_t
 
°¨t_ofs
;

247 
°¨t_ofs
 = 
›íÊow
->
size
;

248 
«l
 = 
	`oÂutû_put_NXAST_LEARN
(
›íÊow
);

249 
«l
->
idÀ_timeout
 = 
	`ht⁄s
(
À¨n
->idle_timeout);

250 
«l
->
h¨d_timeout
 = 
	`ht⁄s
(
À¨n
->hard_timeout);

251 
«l
->
fö_idÀ_timeout
 = 
	`ht⁄s
(
À¨n
->fin_idle_timeout);

252 
«l
->
fö_h¨d_timeout
 = 
	`ht⁄s
(
À¨n
->fin_hard_timeout);

253 
«l
->
¥i‹ôy
 = 
	`ht⁄s
(
À¨n
->priority);

254 
«l
->
cookõ
 = 
	`ht⁄Œ
(
À¨n
->cookie);

255 
«l
->
Êags
 = 
	`ht⁄s
(
À¨n
->flags);

256 
«l
->
èbÀ_id
 = 
À¨n
->table_id;

258 
•ec
 = 
À¨n
->
•ecs
; s≥¯< &À¨n->•ecs[À¨n->
n_•ecs
]; spec++) {

259 
	`put_u16
(
›íÊow
, 
•ec
->
n_bôs
 | s≥c->
d°_ty≥
 | s≥c->
§c_ty≥
);

261 i‡(
•ec
->
§c_ty≥
 =
NX_LEARN_SRC_FIELD
) {

262 
	`put_u32
(
›íÊow
, 
•ec
->
§c
.
fõld
->
nxm_hódî
);

263 
	`put_u16
(
›íÊow
, 
•ec
->
§c
.
ofs
);

265 
size_t
 
n_d°_byãs
 = 2 * 
	`DIV_ROUND_UP
(
•ec
->
n_bôs
, 16);

266 
uöt8_t
 *
bôs
 = 
	`oÂbuf_put_zîos
(
›íÊow
, 
n_d°_byãs
);

267 
	`bôwi£_c›y
(&
•ec
->
§c_imm
,  spec->src_imm, 0,

268 
bôs
, 
n_d°_byãs
, 0,

269 
•ec
->
n_bôs
);

272 i‡(
•ec
->
d°_ty≥
 =
NX_LEARN_DST_MATCH
 ||

273 
•ec
->
d°_ty≥
 =
NX_LEARN_DST_LOAD
) {

274 
	`put_u32
(
›íÊow
, 
•ec
->
d°
.
fõld
->
nxm_hódî
);

275 
	`put_u16
(
›íÊow
, 
•ec
->
d°
.
ofs
);

279 i‡((
›íÊow
->
size
 - 
°¨t_ofs
) % 8) {

280 
	`oÂbuf_put_zîos
(
›íÊow
, 8 - (›íÊow->
size
 - 
°¨t_ofs
) % 8);

283 
«l
 = 
	`oÂbuf_©_as£π
(
›íÊow
, 
°¨t_ofs
,  *nal);

284 
«l
->
Àn
 = 
	`ht⁄s
(
›íÊow
->
size
 - 
°¨t_ofs
);

285 
	}
}

296 
	$À¨n_execuã
(c⁄° 
oÂa˘_À¨n
 *
À¨n
, c⁄° 
Êow
 *flow,

297 
oÂutû_Êow_mod
 *
fm
, 
oÂbuf
 *
oÂa˘s
)

299 c⁄° 
oÂa˘_À¨n_•ec
 *
•ec
;

301 
	`m©ch_öô_ˇtchÆl
(&
fm
->
m©ch
);

302 
fm
->
¥i‹ôy
 = 
À¨n
->priority;

303 
fm
->
cookõ
 = 
	`ht⁄Œ
(0);

304 
fm
->
cookõ_mask
 = 
	`ht⁄Œ
(0);

305 
fm
->
√w_cookõ
 = 
	`ht⁄Œ
(
À¨n
->
cookõ
);

306 
fm
->
èbÀ_id
 = 
À¨n
->table_id;

307 
fm
->
comm™d
 = 
OFPFC_MODIFY_STRICT
;

308 
fm
->
idÀ_timeout
 = 
À¨n
->idle_timeout;

309 
fm
->
h¨d_timeout
 = 
À¨n
->hard_timeout;

310 
fm
->
buf„r_id
 = 
UINT32_MAX
;

311 
fm
->
out_p‹t
 = 
OFPP_NONE
;

312 
fm
->
Êags
 = 
À¨n
->flags;

313 
fm
->
oÂa˘s
 = 
NULL
;

314 
fm
->
oÂa˘s_Àn
 = 0;

316 i‡(
À¨n
->
fö_idÀ_timeout
 ||Üó∫->
fö_h¨d_timeout
) {

317 
oÂa˘_fö_timeout
 *
o·
;

319 
o·
 = 
	`oÂa˘_put_FIN_TIMEOUT
(
oÂa˘s
);

320 
o·
->
fö_idÀ_timeout
 = 
À¨n
->fin_idle_timeout;

321 
o·
->
fö_h¨d_timeout
 = 
À¨n
->fin_hard_timeout;

324 
•ec
 = 
À¨n
->
•ecs
; s≥¯< &À¨n->•ecs[À¨n->
n_•ecs
]; spec++) {

325 
mf_subvÆue
 
vÆue
;

326 
chunk
, 
ofs
;

328 i‡(
•ec
->
§c_ty≥
 =
NX_LEARN_SRC_FIELD
) {

329 
	`mf_ªad_subfõld
(&
•ec
->
§c
, 
Êow
, &
vÆue
);

331 
vÆue
 = 
•ec
->
§c_imm
;

334 
•ec
->
d°_ty≥
) {

335 
NX_LEARN_DST_MATCH
:

336 
	`mf_wrôe_subfõld
(&
•ec
->
d°
, &
vÆue
, &
fm
->
m©ch
);

339 
NX_LEARN_DST_LOAD
:

340 
ofs
 = 0; of†< 
•ec
->
n_bôs
; of†+
chunk
) {

341 
oÂa˘_ªg_lﬂd
 *
lﬂd
;

343 
chunk
 = 
	`MIN
(
•ec
->
n_bôs
 - 
ofs
, 64);

345 
lﬂd
 = 
	`oÂa˘_put_REG_LOAD
(
oÂa˘s
);

346 
lﬂd
->
d°
.
fõld
 = 
•ec
->dst.field;

347 
lﬂd
->
d°
.
ofs
 = 
•ec
->dst.ofs + ofs;

348 
lﬂd
->
d°
.
n_bôs
 = 
chunk
;

349 
	`bôwi£_c›y
(&
vÆue
,  vÆue, 
ofs
,

350 &
lﬂd
->
subvÆue
, Üoad->subvalue, 0,

351 
chunk
);

355 
NX_LEARN_DST_OUTPUT
:

356 i‡(
•ec
->
n_bôs
 <= 16

357 || 
	`is_Æl_zîos
(
vÆue
.
u8
,  value - 2)) {

358 
uöt16_t
 
p‹t
 = 
	`¡ohs
(
vÆue
.
be16
[7]);

360 i‡(
p‹t
 < 
OFPP_MAX


361 || 
p‹t
 =
OFPP_IN_PORT


362 || 
p‹t
 =
OFPP_FLOOD


363 || 
p‹t
 =
OFPP_LOCAL


364 || 
p‹t
 =
OFPP_ALL
) {

365 
	`oÂa˘_put_OUTPUT
(
oÂa˘s
)->
p‹t
 =Öort;

371 
	`oÂa˘_∑d
(
oÂa˘s
);

373 
fm
->
oÂa˘s
 = oÂa˘s->
d©a
;

374 
fm
->
oÂa˘s_Àn
 = 
oÂa˘s
->
size
;

375 
	}
}

378 
	$À¨n_∑r£_lﬂd_immedüã
(c⁄° *
s
, 
oÂa˘_À¨n_•ec
 *
•ec
)

380 c⁄° *
fuŒ_s
 = 
s
;

381 c⁄° *
¨row
 = 
	`°r°r
(
s
, "->");

382 
mf_subfõld
 
d°
;

383 
mf_subvÆue
 
imm
;

385 
	`mem£t
(&
imm
, 0,  imm);

386 i‡(
s
[0] ='0' && (s[1] ='x' || s[1] ='X'Ë&& 
¨row
) {

387 c⁄° *
ö
 = 
¨row
 - 1;

388 
uöt8_t
 *
out
 = 
imm
.
u8
 +  imm.u8 - 1;

389 
n
 = 
¨row
 - (
s
 + 2);

390 
i
;

392 
i
 = 0; i < 
n
; i++) {

393 
hexô
 = 
	`hexô_vÆue
(
ö
[-
i
]);

394 i‡(
hexô
 < 0) {

395 
	`ovs_Áèl
(0, "%s: bad hex digô i¿vÆue", 
fuŒ_s
);

397 
out
[-(
i
 / 2)] |ò% 2 ? 
hexô
 << 4 : hexit;

399 
s
 = 
¨row
;

401 
imm
.
be64
[1] = 
	`ht⁄Œ
(
	`°πouŒ
(
s
, (**) &s, 0));

404 i‡(
	`°∫cmp
(
s
, "->", 2)) {

405 
	`ovs_Áèl
(0, "%s: missög `->' fﬁlowög vÆue", 
fuŒ_s
);

407 
s
 += 2;

409 
s
 = 
	`mf_∑r£_subfõld
(&
d°
, s);

410 i‡(*
s
 != '\0') {

411 
	`ovs_Áèl
(0, "%s:Åøûög g¨bagêfﬁlowög de°ö©i⁄", 
fuŒ_s
);

414 i‡(!
	`bôwi£_is_Æl_zîos
(&
imm
,  imm, 
d°
.
n_bôs
,

415 (8 *  
imm
Ë- 
d°
.
n_bôs
)) {

416 
	`ovs_Áèl
(0, "%s: value doesÇot fit into %u bits",

417 
fuŒ_s
, 
d°
.
n_bôs
);

420 
•ec
->
n_bôs
 = 
d°
.n_bits;

421 
•ec
->
§c_ty≥
 = 
NX_LEARN_SRC_IMMEDIATE
;

422 
•ec
->
§c_imm
 = 
imm
;

423 
•ec
->
d°_ty≥
 = 
NX_LEARN_DST_LOAD
;

424 
•ec
->
d°
 = dst;

425 
	}
}

428 
	$À¨n_∑r£_•ec
(c⁄° *
‹ig
, *
«me
, *
vÆue
,

429 
oÂa˘_À¨n_•ec
 *
•ec
)

431 i‡(
	`mf_‰om_«me
(
«me
)) {

432 c⁄° 
mf_fõld
 *
d°
 = 
	`mf_‰om_«me
(
«me
);

433 
mf_vÆue
 
imm
;

434 *
îr‹
;

436 
îr‹
 = 
	`mf_∑r£_vÆue
(
d°
, 
vÆue
, &
imm
);

437 i‡(
îr‹
) {

438 
	`ovs_Áèl
(0, "%s", 
îr‹
);

441 
•ec
->
n_bôs
 = 
d°
->n_bits;

442 
•ec
->
§c_ty≥
 = 
NX_LEARN_SRC_IMMEDIATE
;

443 
	`mem£t
(&
•ec
->
§c_imm
, 0,  spec->src_imm);

444 
	`mem˝y
(&
•ec
->
§c_imm
.
u8
[ s≥c->§c_imm - 
d°
->
n_byãs
],

445 &
imm
, 
d°
->
n_byãs
);

446 
•ec
->
d°_ty≥
 = 
NX_LEARN_DST_MATCH
;

447 
•ec
->
d°
.
fõld
 = dst;

448 
•ec
->
d°
.
ofs
 = 0;

449 
•ec
->
d°
.
n_bôs
 = dst->n_bits;

450 } i‡(
	`°rchr
(
«me
, '[')) {

452 i‡(
	`mf_∑r£_subfõld
(&
•ec
->
d°
, 
«me
)[0] != '\0') {

453 
	`ovs_Áèl
(0, "%s: syntaxÉrroráfter NXM fieldÇame `%s'",

454 
‹ig
, 
«me
);

458 i‡(
vÆue
[0] != '\0') {

459 i‡(
	`mf_∑r£_subfõld
(&
•ec
->
§c
, 
vÆue
)[0] != '\0') {

460 
	`ovs_Áèl
(0, "%s: syntaxÉrroráfter NXM fieldÇame `%s'",

461 
‹ig
, 
vÆue
);

463 i‡(
•ec
->
§c
.
n_bôs
 !•ec->
d°
.n_bits) {

464 
	`ovs_Áèl
(0, "%s: bit widths of %s (%u)ánd %s (%u) differ",

465 
‹ig
, 
«me
, 
•ec
->
§c
.
n_bôs
, 
vÆue
,

466 
•ec
->
d°
.
n_bôs
);

469 
•ec
->
§c
 = s≥c->
d°
;

472 
•ec
->
n_bôs
 = s≥c->
§c
.n_bits;

473 
•ec
->
§c_ty≥
 = 
NX_LEARN_SRC_FIELD
;

474 
•ec
->
d°_ty≥
 = 
NX_LEARN_DST_MATCH
;

475 } i‡(!
	`°rcmp
(
«me
, "load")) {

476 i‡(
vÆue
[
	`°rc•n
(value, "[-")] == '-') {

477 
	`À¨n_∑r£_lﬂd_immedüã
(
vÆue
, 
•ec
);

479 
oÂa˘_ªg_move
 
move
;

481 
	`nxm_∑r£_ªg_move
(&
move
, 
vÆue
);

483 
•ec
->
n_bôs
 = 
move
.
§c
.n_bits;

484 
•ec
->
§c_ty≥
 = 
NX_LEARN_SRC_FIELD
;

485 
•ec
->
§c
 = 
move
.src;

486 
•ec
->
d°_ty≥
 = 
NX_LEARN_DST_LOAD
;

487 
•ec
->
d°
 = 
move
.dst;

489 } i‡(!
	`°rcmp
(
«me
, "output")) {

490 i‡(
	`mf_∑r£_subfõld
(&
•ec
->
§c
, 
vÆue
)[0] != '\0') {

491 
	`ovs_Áèl
(0, "%s: syntaxÉrroráfter NXM fieldÇame `%s'",

492 
‹ig
, 
«me
);

495 
•ec
->
n_bôs
 = s≥c->
§c
.n_bits;

496 
•ec
->
§c_ty≥
 = 
NX_LEARN_SRC_FIELD
;

497 
•ec
->
d°_ty≥
 = 
NX_LEARN_DST_OUTPUT
;

499 
	`ovs_Áèl
(0, "%s: unknow¿keyw‹d %s", 
‹ig
, 
«me
);

501 
	}
}

515 
	$À¨n_∑r£
(*
¨g
, c⁄° 
Êow
 *Êow, 
oÂbuf
 *
oÂa˘s
)

517 *
‹ig
 = 
	`x°rdup
(
¨g
);

518 *
«me
, *
vÆue
;

520 
oÂa˘_À¨n
 *
À¨n
;

521 
m©ch
 match;

522 
oÂîr
 
îr‹
;

524 
À¨n
 = 
	`oÂa˘_put_LEARN
(
oÂa˘s
);

525 
À¨n
->
idÀ_timeout
 = 
OFP_FLOW_PERMANENT
;

526 
À¨n
->
h¨d_timeout
 = 
OFP_FLOW_PERMANENT
;

527 
À¨n
->
¥i‹ôy
 = 
OFP_DEFAULT_PRIORITY
;

528 
À¨n
->
èbÀ_id
 = 1;

530 
	`m©ch_öô_ˇtchÆl
(&
m©ch
);

531 
	`oÂutû_∑r£_key_vÆue
(&
¨g
, &
«me
, &
vÆue
)) {

532 i‡(!
	`°rcmp
(
«me
, "table")) {

533 
À¨n
->
èbÀ_id
 = 
	`©oi
(
vÆue
);

534 i‡(
À¨n
->
èbÀ_id
 == 255) {

535 
	`ovs_Áèl
(0, "%s:Åable id 255Çot valid for `learn'áction",

536 
‹ig
);

538 } i‡(!
	`°rcmp
(
«me
, "priority")) {

539 
À¨n
->
¥i‹ôy
 = 
	`©oi
(
vÆue
);

540 } i‡(!
	`°rcmp
(
«me
, "idle_timeout")) {

541 
À¨n
->
idÀ_timeout
 = 
	`©oi
(
vÆue
);

542 } i‡(!
	`°rcmp
(
«me
, "hard_timeout")) {

543 
À¨n
->
h¨d_timeout
 = 
	`©oi
(
vÆue
);

544 } i‡(!
	`°rcmp
(
«me
, "fin_idle_timeout")) {

545 
À¨n
->
fö_idÀ_timeout
 = 
	`©oi
(
vÆue
);

546 } i‡(!
	`°rcmp
(
«me
, "fin_hard_timeout")) {

547 
À¨n
->
fö_h¨d_timeout
 = 
	`©oi
(
vÆue
);

548 } i‡(!
	`°rcmp
(
«me
, "cookie")) {

549 
À¨n
->
cookõ
 = 
	`°πouŒ
(
vÆue
, 
NULL
, 0);

551 
oÂa˘_À¨n_•ec
 *
•ec
;

553 
•ec
 = 
	`oÂbuf_put_zîos
(
oÂa˘s
,  *spec);

554 
À¨n
 = 
oÂa˘s
->
l2
;

555 
À¨n
->
n_•ecs
++;

557 
	`À¨n_∑r£_•ec
(
‹ig
, 
«me
, 
vÆue
, 
•ec
);

560 i‡(
•ec
->
§c_ty≥
 =
NX_LEARN_SRC_FIELD


561 && 
Êow
 && !
	`mf_¨e_¥îeqs_ok
(
•ec
->
§c
.
fõld
, flow)) {

562 
	`ovs_Áèl
(0, "%s: cannot specify source field %s because "

564 
‹ig
, 
•ec
->
§c
.
fõld
->
«me
);

566 i‡((
•ec
->
d°_ty≥
 =
NX_LEARN_DST_MATCH


567 || 
•ec
->
d°_ty≥
 =
NX_LEARN_DST_LOAD
)

568 && !
	`mf_¨e_¥îeqs_ok
(
•ec
->
d°
.
fõld
, &
m©ch
.
Êow
)) {

569 
	`ovs_Áèl
(0, "%s: cannot specify destination field %s because "

571 
‹ig
, 
•ec
->
d°
.
fõld
->
«me
);

576 i‡(
•ec
->
§c_ty≥
 =
NX_LEARN_SRC_IMMEDIATE


577 && 
•ec
->
d°_ty≥
 =
NX_LEARN_DST_MATCH
) {

578 
	`mf_wrôe_subfõld
(&
•ec
->
d°
, &•ec->
§c_imm
, &
m©ch
);

582 
	`oÂa˘_upd©e_Àn
(
oÂa˘s
, &
À¨n
->
oÂa˘
);

585 i‡(
Êow
) {

586 
îr‹
 = 
	`À¨n_check
(
À¨n
, 
Êow
);

587 i‡(
îr‹
) {

588 
	`ovs_Áèl
(0, "%s: %s", 
‹ig
, 
	`oÂîr_to_°rög
(
îr‹
));

591 
	`‰ì
(
‹ig
);

592 
	}
}

597 
	$À¨n_f‹m©
(c⁄° 
oÂa˘_À¨n
 *
À¨n
, 
ds
 *
s
)

599 c⁄° 
oÂa˘_À¨n_•ec
 *
•ec
;

600 
m©ch
 match;

602 
	`m©ch_öô_ˇtchÆl
(&
m©ch
);

604 
	`ds_put_f‹m©
(
s
, "À¨n—abÀ=%"
PRIu8
, 
À¨n
->
èbÀ_id
);

605 i‡(
À¨n
->
idÀ_timeout
 !
OFP_FLOW_PERMANENT
) {

606 
	`ds_put_f‹m©
(
s
, ",idÀ_timeout=%"
PRIu16
, 
À¨n
->
idÀ_timeout
);

608 i‡(
À¨n
->
h¨d_timeout
 !
OFP_FLOW_PERMANENT
) {

609 
	`ds_put_f‹m©
(
s
, ",h¨d_timeout=%"
PRIu16
, 
À¨n
->
h¨d_timeout
);

611 i‡(
À¨n
->
fö_idÀ_timeout
) {

612 
	`ds_put_f‹m©
(
s
, ",fö_idÀ_timeout=%"
PRIu16
, 
À¨n
->
fö_idÀ_timeout
);

614 i‡(
À¨n
->
fö_h¨d_timeout
) {

615 
	`ds_put_f‹m©
(
s
, ",fö_h¨d_timeout=%"
PRIu16
, 
À¨n
->
fö_h¨d_timeout
);

617 i‡(
À¨n
->
¥i‹ôy
 !
OFP_DEFAULT_PRIORITY
) {

618 
	`ds_put_f‹m©
(
s
, ",¥i‹ôy=%"
PRIu16
, 
À¨n
->
¥i‹ôy
);

620 i‡(
À¨n
->
Êags
 & 
OFPFF_SEND_FLOW_REM
) {

621 
	`ds_put_c°r
(
s
, ",OFPFF_SEND_FLOW_REM");

623 i‡(
À¨n
->
cookõ
 != 0) {

624 
	`ds_put_f‹m©
(
s
, ",cookõ=%#"
PRIx64
, 
À¨n
->
cookõ
);

627 
•ec
 = 
À¨n
->
•ecs
; s≥¯< &À¨n->•ecs[À¨n->
n_•ecs
]; spec++) {

628 
	`ds_put_ch¨
(
s
, ',');

630 
•ec
->
§c_ty≥
 | s≥c->
d°_ty≥
) {

631 
NX_LEARN_SRC_IMMEDIATE
 | 
NX_LEARN_DST_MATCH
:

632 i‡(
•ec
->
d°
.
ofs
 == 0

633 && 
•ec
->
d°
.
n_bôs
 =•ec->d°.
fõld
->n_bits) {

634 
mf_vÆue
 
vÆue
;

636 
	`mem£t
(&
vÆue
, 0,  value);

637 
	`bôwi£_c›y
(&
•ec
->
§c_imm
,  spec->src_imm, 0,

638 &
vÆue
, 
•ec
->
d°
.
fõld
->
n_byãs
, 0,

639 
•ec
->
d°
.
fõld
->
n_bôs
);

640 
	`ds_put_f‹m©
(
s
, "%s=", 
•ec
->
d°
.
fõld
->
«me
);

641 
	`mf_f‹m©
(
•ec
->
d°
.
fõld
, &
vÆue
, 
NULL
, 
s
);

643 
	`mf_f‹m©_subfõld
(&
•ec
->
d°
, 
s
);

644 
	`ds_put_ch¨
(
s
, '=');

645 
	`mf_f‹m©_subvÆue
(&
•ec
->
§c_imm
, 
s
);

649 
NX_LEARN_SRC_FIELD
 | 
NX_LEARN_DST_MATCH
:

650 
	`mf_f‹m©_subfõld
(&
•ec
->
d°
, 
s
);

651 i‡(
•ec
->
§c
.
fõld
 !•ec->
d°
.field ||

652 
•ec
->
§c
.
ofs
 !•ec->
d°
.ofs) {

653 
	`ds_put_ch¨
(
s
, '=');

654 
	`mf_f‹m©_subfõld
(&
•ec
->
§c
, 
s
);

658 
NX_LEARN_SRC_IMMEDIATE
 | 
NX_LEARN_DST_LOAD
:

659 
	`ds_put_f‹m©
(
s
, "load:");

660 
	`mf_f‹m©_subvÆue
(&
•ec
->
§c_imm
, 
s
);

661 
	`ds_put_c°r
(
s
, "->");

662 
	`mf_f‹m©_subfõld
(&
•ec
->
d°
, 
s
);

665 
NX_LEARN_SRC_FIELD
 | 
NX_LEARN_DST_LOAD
:

666 
	`ds_put_c°r
(
s
, "load:");

667 
	`mf_f‹m©_subfõld
(&
•ec
->
§c
, 
s
);

668 
	`ds_put_c°r
(
s
, "->");

669 
	`mf_f‹m©_subfõld
(&
•ec
->
d°
, 
s
);

672 
NX_LEARN_SRC_FIELD
 | 
NX_LEARN_DST_OUTPUT
:

673 
	`ds_put_c°r
(
s
, "output:");

674 
	`mf_f‹m©_subfõld
(&
•ec
->
§c
, 
s
);

678 
	`ds_put_ch¨
(
s
, ')');

679 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/learn.h

17 #i‚de‡
LEARN_H


18 
	#LEARN_H
 1

	)

20 
	~"oÂ-îr‹s.h
"

22 
	gds
;

23 
	gÊow
;

24 
	goÂbuf
;

25 
	goÂa˘_À¨n
;

26 
	goÂutû_Êow_mod
;

27 
	gnx_a˘i⁄_À¨n
;

34 
oÂîr
 
À¨n_‰om_›íÊow
(c⁄° 
nx_a˘i⁄_À¨n
 *,

35 
oÂbuf
 *
oÂa˘s
);

36 
oÂîr
 
À¨n_check
(c⁄° 
oÂa˘_À¨n
 *, c⁄° 
Êow
 *);

37 
À¨n_to_nxa°
(c⁄° 
oÂa˘_À¨n
 *, 
oÂbuf
 *
›íÊow
);

39 
À¨n_execuã
(c⁄° 
oÂa˘_À¨n
 *, c⁄° 
Êow
 *,

40 
oÂutû_Êow_mod
 *, 
oÂbuf
 *
oÂa˘s
);

42 
À¨n_∑r£
(*, c⁄° 
Êow
 *, 
oÂbuf
 *
oÂa˘s
);

43 
À¨n_f‹m©
(c⁄° 
oÂa˘_À¨n
 *, 
ds
 *);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/learning-switch.c

17 
	~<c⁄fig.h
>

18 
	~"À¨nög-swôch.h
"

20 
	~<î∫o.h
>

21 
	~<öây≥s.h
>

22 
	~<√töë/ö.h
>

23 
	~<°dlib.h
>

24 
	~<time.h
>

26 
	~"byã-‹dî.h
"

27 
	~"˛assifõr.h
"

28 
	~"Êow.h
"

29 
	~"hm≠.h
"

30 
	~"mac-À¨nög.h
"

31 
	~"oÂbuf.h
"

32 
	~"oÂ-a˘i⁄s.h
"

33 
	~"oÂ-îr‹s.h
"

34 
	~"oÂ-msgs.h
"

35 
	~"oÂ-∑r£.h
"

36 
	~"oÂ-¥öt.h
"

37 
	~"oÂ-utû.h
"

38 
	~"›íÊow/›íÊow.h
"

39 
	~"pﬁl-lo›.h
"

40 
	~"rc⁄n.h
"

41 
	~"shash.h
"

42 
	~"sim≠.h
"

43 
	~"timevÆ.h
"

44 
	~"vc⁄n.h
"

45 
	~"vlog.h
"

47 
VLOG_DEFINE_THIS_MODULE
(
À¨nög_swôch
);

49 
	slswôch_p‹t
 {

50 
hm≠_node
 
	mhm≠_node
;

51 
uöt16_t
 
	mp‹t_no
;

52 
uöt32_t
 
	mqueue_id
;

55 
	elswôch_°©e
 {

56 
	mS_CONNECTING
,

57 
	mS_FEATURES_REPLY
,

58 
	mS_SWITCHING
,

61 
	slswôch
 {

62 
rc⁄n
 *
	mrc⁄n
;

63 
lswôch_°©e
 
	m°©e
;

68 
	mmax_idÀ
;

70 
oÂutû_¥Ÿocﬁ
 
	m¥Ÿocﬁ
;

71 
	md©≠©h_id
;

72 
mac_À¨nög
 *
	mml
;

73 
Êow_wûdˇrds
 
	mwc
;

74 
boﬁ
 
	ma˘i⁄_n‹mÆ
;

77 
uöt32_t
 
	mdeÁu…_queue
;

78 
hm≠
 
	mqueue_numbîs
;

79 
shash
 
	mqueue_«mes
;

82 
rc⁄n_∑ckë_cou¡î
 *
	mqueued
;

86 
boﬁ
 
	mmuã
;

90 c⁄° 
oÂutû_Êow_mod
 *
	mdeÁu…_Êows
;

91 
size_t
 
	mn_deÁu…_Êows
;

96 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(30, 300);

98 
queue_tx
(
lswôch
 *, 
oÂbuf
 *);

99 
£nd_„©uªs_ªque°
(
lswôch
 *);

101 
lswôch_¥o˚ss_∑ckë
(
lswôch
 *, c⁄° 
oÂbuf
 *);

102 
oÂîr
 
¥o˚ss_swôch_„©uªs
(
lswôch
 *,

103 
oÂ_hódî
 *);

104 
¥o˚ss_∑ckë_ö
(
lswôch
 *, c⁄° 
oÂ_hódî
 *);

105 
¥o˚ss_echo_ªque°
(
lswôch
 *, c⁄° 
oÂ_hódî
 *);

111 
lswôch
 *

112 
	$lswôch_¸óã
(
rc⁄n
 *rc⁄n, c⁄° 
lswôch_c⁄fig
 *
cfg
)

114 
lswôch
 *
sw
;

115 
uöt32_t
 
oÂfw
;

117 
sw
 = 
	`xzÆloc
( *sw);

118 
sw
->
rc⁄n
 =Ñconn;

119 
sw
->
°©e
 = 
S_CONNECTING
;

120 
sw
->
max_idÀ
 = 
cfg
->max_idle;

121 
sw
->
d©≠©h_id
 = 0;

122 
sw
->
ml
 = (
cfg
->
mode
 =
LSW_LEARN


123 ? 
	`mac_À¨nög_¸óã
(
MAC_ENTRY_DEFAULT_IDLE_TIME
)

124 : 
NULL
);

125 
sw
->
a˘i⁄_n‹mÆ
 = 
cfg
->
mode
 =
LSW_NORMAL
;

127 
cfg
->
wûdˇrds
) {

129 
oÂfw
 = 0;

132 
UINT32_MAX
:

136 
oÂfw
 = (
OFPFW10_DL_TYPE
 | 
OFPFW10_DL_VLAN_PCP


137 | 
OFPFW10_NW_SRC_ALL
 | 
OFPFW10_NW_DST_ALL


138 | 
OFPFW10_NW_TOS
 | 
OFPFW10_NW_PROTO


139 | 
OFPFW10_TP_SRC
 | 
OFPFW10_TP_DST
);

143 
oÂfw
 = 
cfg
->
wûdˇrds
;

146 
	`oÂutû_wûdˇrd_‰om_oÂfw10
(
oÂfw
, &
sw
->
wc
);

148 
sw
->
deÁu…_queue
 = 
cfg
->default_queue;

149 
	`hm≠_öô
(&
sw
->
queue_numbîs
);

150 
	`shash_öô
(&
sw
->
queue_«mes
);

151 i‡(
cfg
->
p‹t_queues
) {

152 
sim≠_node
 *
node
;

154 
	`SIMAP_FOR_EACH
 (
node
, 
cfg
->
p‹t_queues
) {

155 
lswôch_p‹t
 *
p‹t
 = 
	`xmÆloc
( *port);

156 
	`hm≠_node_nuŒify
(&
p‹t
->
hm≠_node
);

157 
p‹t
->
queue_id
 = 
node
->
d©a
;

158 
	`shash_add
(&
sw
->
queue_«mes
, 
node
->
«me
, 
p‹t
);

162 
sw
->
deÁu…_Êows
 = 
cfg
->default_flows;

163 
sw
->
n_deÁu…_Êows
 = 
cfg
->n_default_flows;

165 
sw
->
queued
 = 
	`rc⁄n_∑ckë_cou¡î_¸óã
();

167  
sw
;

168 
	}
}

171 
	$lswôch_h™dshake
(
lswôch
 *
sw
)

173 
oÂutû_¥Ÿocﬁ
 
¥Ÿocﬁ
;

175 
	`£nd_„©uªs_ªque°
(
sw
);

177 
¥Ÿocﬁ
 = 
	`oÂutû_¥Ÿocﬁ_‰om_oÂ_vîsi⁄
(
	`rc⁄n_gë_vîsi⁄
(
sw
->
rc⁄n
));

178 i‡(
sw
->
deÁu…_Êows
) {

179 
oÂutû_¥Ÿocﬁ
 
ußbÀ_¥Ÿocﬁs
;

180 
oÂbuf
 *
msg
 = 
NULL
;

181 
îr‹
 = 0;

182 
size_t
 
i
;

191 
ußbÀ_¥Ÿocﬁs
 = 
	`oÂutû_Êow_mod_ußbÀ_¥Ÿocﬁs
(

192 
sw
->
deÁu…_Êows
, sw->
n_deÁu…_Êows
);

193 i‡(!(
¥Ÿocﬁ
 & 
ußbÀ_¥Ÿocﬁs
)) {

194 
oÂutû_¥Ÿocﬁ
 
w™t
 = 
	`rightmo°_1bô
(
ußbÀ_¥Ÿocﬁs
);

195 !
îr‹
) {

196 
msg
 = 
	`oÂutû_ícode_£t_¥Ÿocﬁ
(
¥Ÿocﬁ
, 
w™t
, &protocol);

197 i‡(!
msg
) {

200 
îr‹
 = 
	`rc⁄n_£nd
(
sw
->
rc⁄n
, 
msg
, 
NULL
);

204 
i
 = 0; !
îr‹
 && i < 
sw
->
n_deÁu…_Êows
; i++) {

205 
msg
 = 
	`oÂutû_ícode_Êow_mod
(&
sw
->
deÁu…_Êows
[
i
], 
¥Ÿocﬁ
);

206 
îr‹
 = 
	`rc⁄n_£nd
(
sw
->
rc⁄n
, 
msg
, 
NULL
);

209 i‡(
îr‹
) {

210 
	`VLOG_INFO_RL
(&
æ
, "%s: failedÅo queue default flows (%s)",

211 
	`rc⁄n_gë_«me
(
sw
->
rc⁄n
), 
	`°ªº‹
(
îr‹
));

214 
sw
->
¥Ÿocﬁ
 =Örotocol;

215 
	}
}

217 
boﬁ


218 
	$lswôch_is_Æive
(c⁄° 
lswôch
 *
sw
)

220  
	`rc⁄n_is_Æive
(
sw
->
rc⁄n
);

221 
	}
}

225 
	$lswôch_de°roy
(
lswôch
 *
sw
)

227 i‡(
sw
) {

228 
lswôch_p‹t
 *
node
, *
√xt
;

230 
	`rc⁄n_de°roy
(
sw
->
rc⁄n
);

231 
	`HMAP_FOR_EACH_SAFE
 (
node
, 
√xt
, 
hm≠_node
, &
sw
->
queue_numbîs
) {

232 
	`hm≠_ªmove
(&
sw
->
queue_numbîs
, &
node
->
hm≠_node
);

233 
	`‰ì
(
node
);

235 
	`shash_de°roy
(&
sw
->
queue_«mes
);

236 
	`mac_À¨nög_de°roy
(
sw
->
ml
);

237 
	`rc⁄n_∑ckë_cou¡î_de°roy
(
sw
->
queued
);

238 
	`‰ì
(
sw
);

240 
	}
}

245 
	$lswôch_run
(
lswôch
 *
sw
)

247 
i
;

249 i‡(
sw
->
ml
) {

250 
	`mac_À¨nög_run
(
sw
->
ml
, 
NULL
);

253 
	`rc⁄n_run
(
sw
->
rc⁄n
);

255 i‡(
sw
->
°©e
 =
S_CONNECTING
) {

256 i‡(
	`rc⁄n_gë_vîsi⁄
(
sw
->
rc⁄n
) != -1) {

257 
	`lswôch_h™dshake
(
sw
);

258 
sw
->
°©e
 = 
S_FEATURES_REPLY
;

263 
i
 = 0; i < 50; i++) {

264 
oÂbuf
 *
msg
;

266 
msg
 = 
	`rc⁄n_ªcv
(
sw
->
rc⁄n
);

267 i‡(!
msg
) {

271 i‡(!
sw
->
muã
) {

272 
	`lswôch_¥o˚ss_∑ckë
(
sw
, 
msg
);

274 
	`oÂbuf_dñëe
(
msg
);

276 
	}
}

279 
	$lswôch_waô
(
lswôch
 *
sw
)

281 i‡(
sw
->
ml
) {

282 
	`mac_À¨nög_waô
(
sw
->
ml
);

284 
	`rc⁄n_run_waô
(
sw
->
rc⁄n
);

285 
	`rc⁄n_ªcv_waô
(
sw
->
rc⁄n
);

286 
	}
}

293 
	$lswôch_¥o˚ss_∑ckë
(
lswôch
 *
sw
, c⁄° 
oÂbuf
 *
msg
)

295 
oÂty≥
 
ty≥
;

296 
oÂbuf
 
b
;

298 
b
 = *
msg
;

299 i‡(
	`oÂty≥_puŒ
(&
ty≥
, &
b
)) {

303 i‡(
sw
->
°©e
 =
S_FEATURES_REPLY


304 && 
ty≥
 !
OFPTYPE_ECHO_REQUEST


305 && 
ty≥
 !
OFPTYPE_FEATURES_REPLY
) {

309 
ty≥
) {

310 
OFPTYPE_ECHO_REQUEST
:

311 
	`¥o˚ss_echo_ªque°
(
sw
, 
msg
->
d©a
);

314 
OFPTYPE_FEATURES_REPLY
:

315 i‡(
sw
->
°©e
 =
S_FEATURES_REPLY
) {

316 i‡(!
	`¥o˚ss_swôch_„©uªs
(
sw
, 
msg
->
d©a
)) {

317 
sw
->
°©e
 = 
S_SWITCHING
;

319 
	`rc⁄n_disc⁄√˘
(
sw
->
rc⁄n
);

324 
OFPTYPE_PACKET_IN
:

325 
	`¥o˚ss_∑ckë_ö
(
sw
, 
msg
->
d©a
);

328 
OFPTYPE_FLOW_REMOVED
:

332 
OFPTYPE_HELLO
:

333 
OFPTYPE_ERROR
:

334 
OFPTYPE_ECHO_REPLY
:

335 
OFPTYPE_FEATURES_REQUEST
:

336 
OFPTYPE_GET_CONFIG_REQUEST
:

337 
OFPTYPE_GET_CONFIG_REPLY
:

338 
OFPTYPE_SET_CONFIG
:

339 
OFPTYPE_PORT_STATUS
:

340 
OFPTYPE_PACKET_OUT
:

341 
OFPTYPE_FLOW_MOD
:

342 
OFPTYPE_PORT_MOD
:

343 
OFPTYPE_BARRIER_REQUEST
:

344 
OFPTYPE_BARRIER_REPLY
:

345 
OFPTYPE_DESC_STATS_REQUEST
:

346 
OFPTYPE_DESC_STATS_REPLY
:

347 
OFPTYPE_FLOW_STATS_REQUEST
:

348 
OFPTYPE_FLOW_STATS_REPLY
:

349 
OFPTYPE_AGGREGATE_STATS_REQUEST
:

350 
OFPTYPE_AGGREGATE_STATS_REPLY
:

351 
OFPTYPE_TABLE_STATS_REQUEST
:

352 
OFPTYPE_TABLE_STATS_REPLY
:

353 
OFPTYPE_PORT_STATS_REQUEST
:

354 
OFPTYPE_PORT_STATS_REPLY
:

355 
OFPTYPE_QUEUE_STATS_REQUEST
:

356 
OFPTYPE_QUEUE_STATS_REPLY
:

357 
OFPTYPE_PORT_DESC_STATS_REQUEST
:

358 
OFPTYPE_PORT_DESC_STATS_REPLY
:

359 
OFPTYPE_ROLE_REQUEST
:

360 
OFPTYPE_ROLE_REPLY
:

361 
OFPTYPE_SET_FLOW_FORMAT
:

362 
OFPTYPE_FLOW_MOD_TABLE_ID
:

363 
OFPTYPE_SET_PACKET_IN_FORMAT
:

364 
OFPTYPE_FLOW_AGE
:

365 
OFPTYPE_SET_ASYNC_CONFIG
:

366 
OFPTYPE_SET_CONTROLLER_ID
:

367 
OFPTYPE_FLOW_MONITOR_STATS_REQUEST
:

368 
OFPTYPE_FLOW_MONITOR_STATS_REPLY
:

369 
OFPTYPE_FLOW_MONITOR_CANCEL
:

370 
OFPTYPE_FLOW_MONITOR_PAUSED
:

371 
OFPTYPE_FLOW_MONITOR_RESUMED
:

373 i‡(
	`VLOG_IS_DBG_ENABLED
()) {

374 *
s
 = 
	`oÂ_to_°rög
(
msg
->
d©a
, msg->
size
, 2);

375 
	`VLOG_DBG_RL
(&
æ
, "%016llx: OpenFlowÖacket ignored: %s",

376 
sw
->
d©≠©h_id
, 
s
);

377 
	`‰ì
(
s
);

380 
	}
}

383 
	$£nd_„©uªs_ªque°
(
lswôch
 *
sw
)

385 
oÂbuf
 *
b
;

386 
oÂ_swôch_c⁄fig
 *
osc
;

387 
oÂ_vîsi⁄
 = 
	`rc⁄n_gë_vîsi⁄
(
sw
->
rc⁄n
);

389 
	`as£π
(
oÂ_vîsi⁄
 > 0 && ofp_version < 0xff);

392 
b
 = 
	`oÂøw_Æloc
(
OFPRAW_OFPT_FEATURES_REQUEST
, 
oÂ_vîsi⁄
, 0);

393 
	`queue_tx
(
sw
, 
b
);

396 
b
 = 
	`oÂøw_Æloc
(
OFPRAW_OFPT_SET_CONFIG
, 
oÂ_vîsi⁄
,  *
osc
);

397 
osc
 = 
	`oÂbuf_put_zîos
(
b
,  *osc);

398 
osc
->
miss_£nd_Àn
 = 
	`ht⁄s
(
OFP_DEFAULT_MISS_SEND_LEN
);

399 
	`queue_tx
(
sw
, 
b
);

400 
	}
}

403 
	$queue_tx
(
lswôch
 *
sw
, 
oÂbuf
 *
b
)

405 
ªtvÆ
 = 
	`rc⁄n_£nd_wôh_limô
(
sw
->
rc⁄n
, 
b
, sw->
queued
, 10);

406 i‡(
ªtvÆ
 &&ÑëvÆ !
ENOTCONN
) {

407 i‡(
ªtvÆ
 =
EAGAIN
) {

408 
	`VLOG_INFO_RL
(&
æ
, "%016llx: %s:Åx queue overflow",

409 
sw
->
d©≠©h_id
, 
	`rc⁄n_gë_«me
(sw->
rc⁄n
));

411 
	`VLOG_WARN_RL
(&
æ
, "%016llx: %s: send: %s",

412 
sw
->
d©≠©h_id
, 
	`rc⁄n_gë_«me
(sw->
rc⁄n
),

413 
	`°ªº‹
(
ªtvÆ
));

416 
	}
}

418 
oÂîr


419 
	$¥o˚ss_swôch_„©uªs
(
lswôch
 *
sw
, 
oÂ_hódî
 *
oh
)

421 
oÂutû_swôch_„©uªs
 
„©uªs
;

422 
oÂutû_phy_p‹t
 
p‹t
;

423 
oÂîr
 
îr‹
;

424 
oÂbuf
 
b
;

426 
îr‹
 = 
	`oÂutû_decode_swôch_„©uªs
(
oh
, &
„©uªs
, &
b
);

427 i‡(
îr‹
) {

428 
	`VLOG_ERR
("received invalid switch featureÑeply (%s)",

429 
	`oÂîr_to_°rög
(
îr‹
));

430  
îr‹
;

433 
sw
->
d©≠©h_id
 = 
„©uªs
.datapath_id;

435 !
	`oÂutû_puŒ_phy_p‹t
(
oh
->
vîsi⁄
, &
b
, &
p‹t
)) {

436 
lswôch_p‹t
 *
Õ
 = 
	`shash_föd_d©a
(&
sw
->
queue_«mes
, 
p‹t
.
«me
);

437 i‡(
Õ
 && 
	`hm≠_node_is_nuŒ
(&Õ->
hm≠_node
)) {

438 
Õ
->
p‹t_no
 = 
p‹t
.port_no;

439 
	`hm≠_ö£π
(&
sw
->
queue_numbîs
, &
Õ
->
hm≠_node
,

440 
	`hash_öt
(
Õ
->
p‹t_no
, 0));

444 
	}
}

446 
uöt16_t


447 
	$lswôch_choo£_de°ö©i⁄
(
lswôch
 *
sw
, c⁄° 
Êow
 *flow)

449 
uöt16_t
 
out_p‹t
;

452 i‡(
	`mac_À¨nög_may_À¨n
(
sw
->
ml
, 
Êow
->
dl_§c
, 0)) {

453 
mac_íåy
 *
mac
 = 
	`mac_À¨nög_ö£π
(
sw
->
ml
, 
Êow
->
dl_§c
, 0);

454 i‡(
	`mac_íåy_is_√w
(
mac
Ë|| mac->
p‹t
.
i
 !
Êow
->
ö_p‹t
) {

455 
	`VLOG_DBG_RL
(&
æ
, "%016Œx:Üó∫edÅh© "
ETH_ADDR_FMT
" is on "

456 "p‹à%"
PRIu16
, 
sw
->
d©≠©h_id
,

457 
	`ETH_ADDR_ARGS
(
Êow
->
dl_§c
), flow->
ö_p‹t
);

459 
mac
->
p‹t
.
i
 = 
Êow
->
ö_p‹t
;

460 
	`mac_À¨nög_ch™ged
(
sw
->
ml
, 
mac
);

465 i‡(
	`ëh_addr_is_ª£rved
(
Êow
->
dl_d°
)) {

466  
OFPP_NONE
;

469 
out_p‹t
 = 
OFPP_FLOOD
;

470 i‡(
sw
->
ml
) {

471 
mac_íåy
 *
mac
;

473 
mac
 = 
	`mac_À¨nög_lookup
(
sw
->
ml
, 
Êow
->
dl_d°
, 0, 
NULL
);

474 i‡(
mac
) {

475 
out_p‹t
 = 
mac
->
p‹t
.
i
;

476 i‡(
out_p‹t
 =
Êow
->
ö_p‹t
) {

478  
OFPP_NONE
;

484 i‡(
sw
->
a˘i⁄_n‹mÆ
 && 
out_p‹t
 !
OFPP_FLOOD
) {

485  
OFPP_NORMAL
;

488  
out_p‹t
;

489 
	}
}

491 
uöt32_t


492 
	$gë_queue_id
(c⁄° 
lswôch
 *
sw
, 
uöt16_t
 
ö_p‹t
)

494 c⁄° 
lswôch_p‹t
 *
p‹t
;

496 
	`HMAP_FOR_EACH_WITH_HASH
 (
p‹t
, 
hm≠_node
, 
	`hash_öt
(
ö_p‹t
, 0),

497 &
sw
->
queue_numbîs
) {

498 i‡(
p‹t
->
p‹t_no
 =
ö_p‹t
) {

499  
p‹t
->
queue_id
;

503  
sw
->
deÁu…_queue
;

504 
	}
}

507 
	$¥o˚ss_∑ckë_ö
(
lswôch
 *
sw
, c⁄° 
oÂ_hódî
 *
oh
)

509 
oÂutû_∑ckë_ö
 
pi
;

510 
uöt32_t
 
queue_id
;

511 
uöt16_t
 
out_p‹t
;

513 
uöt64_t
 
oÂa˘s_°ub
[64 / 8];

514 
oÂbuf
 
oÂa˘s
;

516 
oÂutû_∑ckë_out
 
po
;

517 
oÂîr
 
îr‹
;

519 
oÂbuf
 
pkt
;

520 
Êow
 flow;

522 
îr‹
 = 
	`oÂutû_decode_∑ckë_ö
(&
pi
, 
oh
);

523 i‡(
îr‹
) {

524 
	`VLOG_WARN_RL
(&
æ
, "failedÅo decodeÖacket-in: %s",

525 
	`oÂîr_to_°rög
(
îr‹
));

532 i‡(
pi
.
ªas⁄
 !
OFPR_NO_MATCH
) {

537 
	`oÂbuf_u£_c⁄°
(&
pkt
, 
pi
.
∑ckë
,Öi.
∑ckë_Àn
);

538 
	`Êow_exåa˘
(&
pkt
, 0, 0, 
NULL
, 
pi
.
fmd
.
ö_p‹t
, &
Êow
);

539 
Êow
.
tu¬ñ
.
tun_id
 = 
pi
.
fmd
.tun_id;

542 
out_p‹t
 = 
	`lswôch_choo£_de°ö©i⁄
(
sw
, &
Êow
);

545 
queue_id
 = 
	`gë_queue_id
(
sw
, 
pi
.
fmd
.
ö_p‹t
);

546 
	`oÂbuf_u£_°ack
(&
oÂa˘s
, 
oÂa˘s_°ub
,  ofpacts_stub);

547 i‡(
out_p‹t
 =
OFPP_NONE
) {

549 } i‡(
queue_id
 =
UINT32_MAX
 || 
out_p‹t
 >
OFPP_MAX
) {

550 
	`oÂa˘_put_OUTPUT
(&
oÂa˘s
)->
p‹t
 = 
out_p‹t
;

552 
oÂa˘_íqueue
 *
íqueue
 = 
	`oÂa˘_put_ENQUEUE
(&
oÂa˘s
);

553 
íqueue
->
p‹t
 = 
out_p‹t
;

554 
íqueue
->
queue
 = 
queue_id
;

556 
	`oÂa˘_∑d
(&
oÂa˘s
);

559 
po
.
buf„r_id
 = 
pi
.buffer_id;

560 i‡(
po
.
buf„r_id
 =
UINT32_MAX
) {

561 
po
.
∑ckë
 = 
pkt
.
d©a
;

562 
po
.
∑ckë_Àn
 = 
pkt
.
size
;

564 
po
.
∑ckë
 = 
NULL
;

565 
po
.
∑ckë_Àn
 = 0;

567 
po
.
ö_p‹t
 = 
pi
.
fmd
.in_port;

568 
po
.
oÂa˘s
 = oÂa˘s.
d©a
;

569 
po
.
oÂa˘s_Àn
 = 
oÂa˘s
.
size
;

572 i‡(
sw
->
max_idÀ
 >0 && (!sw->
ml
 || 
out_p‹t
 !
OFPP_FLOOD
)) {

573 
oÂutû_Êow_mod
 
fm
;

574 
oÂbuf
 *
buf„r
;

578 
	`mem£t
(&
fm
, 0,  fm);

579 
	`m©ch_öô
(&
fm
.
m©ch
, &
Êow
, &
sw
->
wc
);

580 
	`oÂutû_n‹mÆize_m©ch_quõt
(&
fm
.
m©ch
);

581 
fm
.
¥i‹ôy
 = 0;

582 
fm
.
èbÀ_id
 = 0xff;

583 
fm
.
comm™d
 = 
OFPFC_ADD
;

584 
fm
.
idÀ_timeout
 = 
sw
->
max_idÀ
;

585 
fm
.
buf„r_id
 = 
pi
.buffer_id;

586 
fm
.
out_p‹t
 = 
OFPP_NONE
;

587 
fm
.
oÂa˘s
 = oÂa˘s.
d©a
;

588 
fm
.
oÂa˘s_Àn
 = 
oÂa˘s
.
size
;

589 
buf„r
 = 
	`oÂutû_ícode_Êow_mod
(&
fm
, 
sw
->
¥Ÿocﬁ
);

591 
	`queue_tx
(
sw
, 
buf„r
);

594 i‡(
pi
.
buf„r_id
 =
UINT32_MAX
 && 
out_p‹t
 !
OFPP_NONE
) {

595 
	`queue_tx
(
sw
, 
	`oÂutû_ícode_∑ckë_out
(&
po
, sw->
¥Ÿocﬁ
));

600 i‡(
pi
.
buf„r_id
 !
UINT32_MAX
 || 
out_p‹t
 !
OFPP_NONE
) {

601 
	`queue_tx
(
sw
, 
	`oÂutû_ícode_∑ckë_out
(&
po
, sw->
¥Ÿocﬁ
));

604 
	}
}

607 
	$¥o˚ss_echo_ªque°
(
lswôch
 *
sw
, c⁄° 
oÂ_hódî
 *
rq
)

609 
	`queue_tx
(
sw
, 
	`make_echo_ª∂y
(
rq
));

610 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/learning-switch.h

17 #i‚de‡
LEARNING_SWITCH_H


18 
	#LEARNING_SWITCH_H
 1

	)

20 
	~<°dboﬁ.h
>

21 
	~<°döt.h
>

22 
	~<°dio.h
>

24 
	goÂbuf
;

25 
	grc⁄n
;

27 
	elswôch_mode
 {

28 
	mLSW_NORMAL
,

29 
	mLSW_FLOOD
,

30 
	mLSW_LEARN


33 
	slswôch_c⁄fig
 {

34 
lswôch_mode
 
	mmode
;

42 
uöt32_t
 
	mwûdˇrds
;

47 
	mmax_idÀ
;

51 c⁄° 
oÂutû_Êow_mod
 *
	mdeÁu…_Êows
;

52 
size_t
 
	mn_deÁu…_Êows
;

56 
uöt32_t
 
	mdeÁu…_queue
;

59 c⁄° 
sim≠
 *
	mp‹t_queues
;

63 
boﬁ
 
	mmuã
;

66 
lswôch
 *
lswôch_¸óã
(
rc⁄n
 *, c⁄° 
lswôch_c⁄fig
 *);

67 
boﬁ
 
lswôch_is_Æive
(c⁄° 
lswôch
 *);

68 
lswôch_£t_queue
(
lswôch
 *
sw
, 
uöt32_t
 
queue
);

69 
lswôch_run
(
lswôch
 *);

70 
lswôch_waô
(
lswôch
 *);

71 
lswôch_de°roy
(
lswôch
 *);

73 
lswôch_muã
(
lswôch
 *);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/list.c

16 
	~<c⁄fig.h
>

17 
	~"li°.h
"

18 
	~<as£π.h
>

22 
	$li°_öô
(
li°
 *list)

24 
li°
->
√xt
 =Üi°->
¥ev
 =Üist;

25 
	}
}

30 
	$li°_pois⁄
(
li°
 *list)

32 
	`mem£t
(
li°
, 0xcc,  *list);

33 
	}
}

37 
	$li°_ö£π
(
li°
 *
bef‹e
, li° *
ñem
)

39 
ñem
->
¥ev
 = 
bef‹e
->prev;

40 
ñem
->
√xt
 = 
bef‹e
;

41 
bef‹e
->
¥ev
->
√xt
 = 
ñem
;

42 
bef‹e
->
¥ev
 = 
ñem
;

43 
	}
}

48 
	$li°_•li˚
(
li°
 *
bef‹e
, li° *
fú°
, li° *
œ°
)

50 i‡(
fú°
 =
œ°
)

52 
œ°
 =Üa°->
¥ev
;

55 
fú°
->
¥ev
->
√xt
 = 
œ°
->next;

56 
œ°
->
√xt
->
¥ev
 = 
fú°
->prev;

59 
fú°
->
¥ev
 = 
bef‹e
->prev;

60 
œ°
->
√xt
 = 
bef‹e
;

61 
bef‹e
->
¥ev
->
√xt
 = 
fú°
;

62 
bef‹e
->
¥ev
 = 
œ°
;

63 
	}
}

68 
	$li°_push_‰⁄t
(
li°
 *li°, li° *
ñem
)

70 
	`li°_ö£π
(
li°
->
√xt
, 
ñem
);

71 
	}
}

76 
	$li°_push_back
(
li°
 *li°, li° *
ñem
)

78 
	`li°_ö£π
(
li°
, 
ñem
);

79 
	}
}

84 
	$li°_ª∂a˚
(
li°
 *
ñemít
, c⁄° li° *
posôi⁄
)

86 
ñemít
->
√xt
 = 
posôi⁄
->next;

87 
ñemít
->
√xt
->
¥ev
 =Élement;

88 
ñemít
->
¥ev
 = 
posôi⁄
->prev;

89 
ñemít
->
¥ev
->
√xt
 =Élement;

90 
	}
}

99 
	$li°_moved
(
li°
 *list)

101 
li°
->
¥ev
->
√xt
 =Üist->next->prev =Üist;

102 
	}
}

106 
li°
 *

107 
	$li°_ªmove
(
li°
 *
ñem
)

109 
ñem
->
¥ev
->
√xt
 =Élem->next;

110 
ñem
->
√xt
->
¥ev
 =Élem->prev;

111  
ñem
->
√xt
;

112 
	}
}

116 
li°
 *

117 
	$li°_p›_‰⁄t
(
li°
 *list)

119 
li°
 *
‰⁄t
 =Üi°->
√xt
;

120 
	`li°_ªmove
(
‰⁄t
);

121  
‰⁄t
;

122 
	}
}

126 
li°
 *

127 
	$li°_p›_back
(
li°
 *list)

129 
li°
 *
back
 =Üi°->
¥ev
;

130 
	`li°_ªmove
(
back
);

131  
back
;

132 
	}
}

136 
li°
 *

137 
	$li°_‰⁄t
(c⁄° 
li°
 *
li°_
)

139 
li°
 *li° = 
	`CONST_CAST
(li° *, 
li°_
);

141 
	`as£π
(!
	`li°_is_em±y
(
li°
));

142  
li°
->
√xt
;

143 
	}
}

147 
li°
 *

148 
	$li°_back
(c⁄° 
li°
 *
li°_
)

150 
li°
 *li° = 
	`CONST_CAST
(li° *, 
li°_
);

152 
	`as£π
(!
	`li°_is_em±y
(
li°
));

153  
li°
->
¥ev
;

154 
	}
}

158 
size_t


159 
	$li°_size
(c⁄° 
li°
 *list)

161 c⁄° 
li°
 *
e
;

162 
size_t
 
˙t
 = 0;

164 
e
 = 
li°
->
√xt
;É !=Üist;É =É->next)

165 
˙t
++;

166  
˙t
;

167 
	}
}

170 
boﬁ


171 
	$li°_is_em±y
(c⁄° 
li°
 *list)

173  
li°
->
√xt
 ==Üist;

174 
	}
}

177 
boﬁ


178 
	$li°_is_sögÀt⁄
(c⁄° 
li°
 *list)

180  
	`li°_is_sh‹t
(
li°
Ë&& !
	`li°_is_em±y
(list);

181 
	}
}

184 
boﬁ


185 
	$li°_is_sh‹t
(c⁄° 
li°
 *list)

187  
li°
->
√xt
 =li°->
¥ev
;

188 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/list.h

16 #i‚de‡
LIST_H


17 
	#LIST_H
 1

	)

21 
	~<°dboﬁ.h
>

22 
	~<°ddef.h
>

23 
	~"utû.h
"

26 
	sli°
 {

27 
li°
 *
	m¥ev
;

28 
li°
 *
	m√xt
;

31 
	#LIST_INITIALIZER
(
LIST
Ë{ LIST, LIST }

	)

33 
li°_öô
(
li°
 *);

34 
li°_pois⁄
(
li°
 *);

37 
li°_ö£π
(
li°
 *, list *);

38 
li°_•li˚
(
li°
 *
bef‹e
, li° *
fú°
, li° *
œ°
);

39 
li°_push_‰⁄t
(
li°
 *, list *);

40 
li°_push_back
(
li°
 *, list *);

41 
li°_ª∂a˚
(
li°
 *, const list *);

42 
li°_moved
(
li°
 *);

45 
li°
 *
li°_ªmove
(list *);

46 
li°
 *
li°_p›_‰⁄t
(list *);

47 
li°
 *
li°_p›_back
(list *);

50 
li°
 *
li°_‰⁄t
(const list *);

51 
li°
 *
li°_back
(const list *);

54 
size_t
 
li°_size
(c⁄° 
li°
 *);

55 
boﬁ
 
li°_is_em±y
(c⁄° 
li°
 *);

56 
boﬁ
 
li°_is_sögÀt⁄
(c⁄° 
li°
 *);

57 
boﬁ
 
li°_is_sh‹t
(c⁄° 
li°
 *);

59 
	#LIST_FOR_EACH
(
ITER
, 
MEMBER
, 
LIST
) \

60 
	`ASSIGN_CONTAINER
(
ITER
, (
LIST
)->
√xt
, 
MEMBER
); \

61 &(
ITER
)->
MEMBER
 !(
LIST
); \

62 
	`ASSIGN_CONTAINER
(
ITER
, (ITER)->
MEMBER
.
√xt
, MEMBER))

	)

63 
	#LIST_FOR_EACH_REVERSE
(
ITER
, 
MEMBER
, 
LIST
) \

64 
	`ASSIGN_CONTAINER
(
ITER
, (
LIST
)->
¥ev
, 
MEMBER
); \

65 &(
ITER
)->
MEMBER
 !(
LIST
); \

66 
	`ASSIGN_CONTAINER
(
ITER
, (ITER)->
MEMBER
.
¥ev
, MEMBER))

	)

67 
	#LIST_FOR_EACH_SAFE
(
ITER
, 
NEXT
, 
MEMBER
, 
LIST
) \

68 
	`ASSIGN_CONTAINER
(
ITER
, (
LIST
)->
√xt
, 
MEMBER
); \

69 (&(
ITER
)->
MEMBER
 !(
LIST
) \

70 ? 
	`ASSIGN_CONTAINER
(
NEXT
, (
ITER
)->
MEMBER
.
√xt
, MEMBER) \

72 (
ITER
Ë(
NEXT
))

	)

	@/home/lsch/mytest/openvswitch-1.9.0/lib/lockfile.c

16 
	~<c⁄fig.h
>

18 
	~"lockfûe.h
"

20 
	~<î∫o.h
>

21 
	~<f˙é.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

24 
	~<sys/°©.h
>

25 
	~<uni°d.h
>

27 
	~"covîage.h
"

28 
	~"hash.h
"

29 
	~"hm≠.h
"

30 
	~"timevÆ.h
"

31 
	~"utû.h
"

32 
	~"vlog.h
"

34 
VLOG_DEFINE_THIS_MODULE
(
lockfûe
);

36 
COVERAGE_DEFINE
(
lockfûe_lock
);

37 
COVERAGE_DEFINE
(
lockfûe_timeout
);

38 
COVERAGE_DEFINE
(
lockfûe_îr‹
);

39 
COVERAGE_DEFINE
(
lockfûe_u∆ock
);

41 
	slockfûe
 {

42 
hm≠_node
 
	mhm≠_node
;

43 *
	m«me
;

44 
dev_t
 
	mdevi˚
;

45 
öo_t
 
	möode
;

46 
	mfd
;

55 
hm≠
 
	glock_èbÀ
 = 
HMAP_INITIALIZER
(&
lock_èbÀ
);

57 
lockfûe_unhash
(
lockfûe
 *);

58 
lockfûe_åy_lock
(c⁄° *
«me
, 
pid_t
 *
pidp
,

59 
lockfûe
 **
lockfûï
);

65 
	$lockfûe_«me
(c⁄° *
fûíame_
)

67 *
fûíame
;

68 c⁄° *
¶ash
;

69 *
lock«me
;

76 
fûíame
 = 
	`fﬁlow_symlöks
(
fûíame_
);

77 
¶ash
 = 
	`°ºchr
(
fûíame
, '/');

78 
lock«me
 = (
¶ash


79 ? 
	`xa•rötf
("%.*s/.%s.~lock~",

80 (Ë(
¶ash
 - 
fûíame
), filename, slash + 1)

81 : 
	`xa•rötf
(".%s.~lock~", 
fûíame
));

82 
	`‰ì
(
fûíame
);

84  
lock«me
;

85 
	}
}

95 
	$lockfûe_lock
(c⁄° *
fûe
, 
lockfûe
 **
lockfûï
)

101 *
lock_«me
;

102 
pid_t
 
pid
;

103 
îr‹
;

105 
	`COVERAGE_INC
(
lockfûe_lock
);

107 
lock_«me
 = 
	`lockfûe_«me
(
fûe
);

109 
îr‹
 = 
	`lockfûe_åy_lock
(
lock_«me
, &
pid
, 
lockfûï
);

111 i‡(
îr‹
) {

112 
	`COVERAGE_INC
(
lockfûe_îr‹
);

113 i‡(
îr‹
 =
EACCES
) {

114 
îr‹
 = 
EAGAIN
;

116 i‡(
pid
) {

117 
	`VLOG_WARN
("%s: cannotÜock file because it isálreadyÜocked by "

118 "pid %ld", 
lock_«me
, (Ë
pid
);

120 
	`VLOG_WARN
("%s: failedÅoÜock file: %s",

121 
lock_«me
, 
	`°ªº‹
(
îr‹
));

125 
	`‰ì
(
lock_«me
);

126  
îr‹
;

127 
	}
}

132 
	$lockfûe_u∆ock
(
lockfûe
 *lockfile)

134 i‡(
lockfûe
) {

135 
	`COVERAGE_INC
(
lockfûe_u∆ock
);

136 
	`lockfûe_unhash
(
lockfûe
);

137 
	`‰ì
(
lockfûe
->
«me
);

138 
	`‰ì
(
lockfûe
);

140 
	}
}

146 
	$lockfûe_po°f‹k
()

148 
lockfûe
 *lockfile;

150 
	`HMAP_FOR_EACH
 (
lockfûe
, 
hm≠_node
, &
lock_èbÀ
) {

151 i‡(
lockfûe
->
fd
 >= 0) {

152 
	`VLOG_WARN
("%s: chûd d€†nŸ inhîôÜock", 
lockfûe
->
«me
);

153 
	`lockfûe_unhash
(
lockfûe
);

156 
	}
}

158 
uöt32_t


159 
	$lockfûe_hash
(
dev_t
 
devi˚
, 
öo_t
 
öode
)

161  
	`hash_byãs
(&
devi˚
,  device,

162 
	`hash_byãs
(&
öode
,  inode, 0));

163 
	}
}

165 
lockfûe
 *

166 
	$lockfûe_föd
(
dev_t
 
devi˚
, 
öo_t
 
öode
)

168 
lockfûe
 *lockfile;

170 
	`HMAP_FOR_EACH_WITH_HASH
 (
lockfûe
, 
hm≠_node
,

171 
	`lockfûe_hash
(
devi˚
, 
öode
), &
lock_èbÀ
) {

172 i‡(
lockfûe
->
devi˚
 =devi˚ &&Üockfûe->
öode
 == inode) {

173  
lockfûe
;

176  
NULL
;

177 
	}
}

180 
	$lockfûe_unhash
(
lockfûe
 *lockfile)

182 i‡(
lockfûe
->
fd
 >= 0) {

183 
	`˛o£
(
lockfûe
->
fd
);

184 
lockfûe
->
fd
 = -1;

185 
	`hm≠_ªmove
(&
lock_èbÀ
, &
lockfûe
->
hm≠_node
);

187 
	}
}

189 
lockfûe
 *

190 
	$lockfûe_ªgi°î
(c⁄° *
«me
, 
dev_t
 
devi˚
, 
öo_t
 
öode
, 
fd
)

192 
lockfûe
 *lockfile;

194 
lockfûe
 = 
	`lockfûe_föd
(
devi˚
, 
öode
);

195 i‡(
lockfûe
) {

196 
	`VLOG_ERR
("%s:Üock fûêdißµóªdándÑóµóªd!", 
«me
);

197 
	`lockfûe_unhash
(
lockfûe
);

200 
lockfûe
 = 
	`xmÆloc
( *lockfile);

201 
lockfûe
->
«me
 = 
	`x°rdup
(name);

202 
lockfûe
->
devi˚
 = device;

203 
lockfûe
->
öode
 = inode;

204 
lockfûe
->
fd
 = fd;

205 
	`hm≠_ö£π
(&
lock_èbÀ
, &
lockfûe
->
hm≠_node
,

206 
	`lockfûe_hash
(
devi˚
, 
öode
));

207  
lockfûe
;

208 
	}
}

211 
	$lockfûe_åy_lock
(c⁄° *
«me
, 
pid_t
 *
pidp
, 
lockfûe
 **
lockfûï
)

213 
Êock
 
l
;

214 
°©
 
s
;

215 
îr‹
;

216 
fd
;

218 *
lockfûï
 = 
NULL
;

219 *
pidp
 = 0;

222 i‡(!
	`°©
(
«me
, &
s
)) {

223 i‡(
	`lockfûe_föd
(
s
.
°_dev
, s.
°_öo
)) {

224  
EDEADLK
;

226 } i‡(
î∫o
 !
ENOENT
) {

227 
	`VLOG_WARN
("%s: failedÅo statÜock file: %s",

228 
«me
, 
	`°ªº‹
(
î∫o
));

229  
î∫o
;

233 
fd
 = 
	`›í
(
«me
, 
O_RDWR
 | 
O_CREAT
, 0600);

234 i‡(
fd
 < 0) {

235 
	`VLOG_WARN
("%s: failedÅo openÜock file: %s",

236 
«me
, 
	`°ªº‹
(
î∫o
));

237  
î∫o
;

241 i‡(
	`f°©
(
fd
, &
s
)) {

242 
	`VLOG_ERR
("%s: faûedÅÿf°©Üock fûe: %s", 
«me
, 
	`°ªº‹
(
î∫o
));

243 
	`˛o£
(
fd
);

244  
î∫o
;

248 
	`mem£t
(&
l
, 0, Ü);

249 
l
.
l_ty≥
 = 
F_WRLCK
;

250 
l
.
l_whí˚
 = 
SEEK_SET
;

251 
l
.
l_°¨t
 = 0;

252 
l
.
l_Àn
 = 0;

254 
	`time_dißbÀ_ª°¨t
();

255 
îr‹
 = 
	`f˙é
(
fd
, 
F_SETLK
, &
l
Ë=-1 ? 
î∫o
 : 0;

256 
	`time_íabÀ_ª°¨t
();

258 i‡(!
îr‹
) {

259 *
lockfûï
 = 
	`lockfûe_ªgi°î
(
«me
, 
s
.
°_dev
, s.
°_öo
, 
fd
);

261 i‡(!
	`f˙é
(
fd
, 
F_GETLK
, &
l
Ë&&Ü.
l_ty≥
 !
F_UNLCK
) {

262 *
pidp
 = 
l
.
l_pid
;

264 
	`˛o£
(
fd
);

266  
îr‹
;

267 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/lockfile.h

16 #i‚de‡
LOCKFILE_H


17 
	#LOCKFILE_H
 1

	)

19 
	glockfûe
;

21 *
lockfûe_«me
(c⁄° *
fûe
);

22 
lockfûe_lock
(c⁄° *
fûe
, 
lockfûe
 **);

23 
lockfûe_u∆ock
(
lockfûe
 *);

24 
lockfûe_po°f‹k
();

	@/home/lsch/mytest/openvswitch-1.9.0/lib/mac-learning.c

17 
	~<c⁄fig.h
>

18 
	~"mac-À¨nög.h
"

20 
	~<as£π.h
>

21 
	~<öây≥s.h
>

22 
	~<°dlib.h
>

24 
	~"bôm≠.h
"

25 
	~"covîage.h
"

26 
	~"hash.h
"

27 
	~"li°.h
"

28 
	~"pﬁl-lo›.h
"

29 
	~"èg.h
"

30 
	~"timevÆ.h
"

31 
	~"u«lig√d.h
"

32 
	~"utû.h
"

33 
	~"vœn-bôm≠.h
"

34 
	~"vlog.h
"

36 
VLOG_DEFINE_THIS_MODULE
(
mac_À¨nög
);

38 
COVERAGE_DEFINE
(
mac_À¨nög_À¨√d
);

39 
COVERAGE_DEFINE
(
mac_À¨nög_expúed
);

43 
	$mac_íåy_age
(c⁄° 
mac_À¨nög
 *
ml
, c⁄° 
mac_íåy
 *
e
)

45 
time_t
 
ªmaöög
 = 
e
->
expúes
 - 
	`time_now
();

46  
ml
->
idÀ_time
 - 
ªmaöög
;

47 
	}
}

49 
uöt32_t


50 
	$mac_èbÀ_hash
(c⁄° 
mac_À¨nög
 *
ml
, c⁄° 
uöt8_t
 
mac
[
ETH_ADDR_LEN
],

51 
uöt16_t
 
vœn
)

53 
mac1
 = 
	`gë_u«lig√d_u32
((
uöt32_t
 *Ë
mac
);

54 
mac2
 = 
	`gë_u«lig√d_u16
((
uöt16_t
 *Ë(
mac
 + 4));

55  
	`hash_3w‹ds
(
mac1
, 
mac2
 | (
vœn
 << 16), 
ml
->
£¸ë
);

56 
	}
}

58 
mac_íåy
 *

59 
	$mac_íåy_‰om_Ãu_node
(
li°
 *list)

61  
	`CONTAINER_OF
(
li°
, 
mac_íåy
, 
Ãu_node
);

62 
	}
}

67 
èg_ty≥


68 
	$make_unknown_mac_èg
(c⁄° 
mac_À¨nög
 *
ml
,

69 c⁄° 
uöt8_t
 
mac
[
ETH_ADDR_LEN
], 
uöt16_t
 
vœn
)

71  
	`èg_¸óã_dëîmöi°ic
(
	`mac_èbÀ_hash
(
ml
, 
mac
, 
vœn
));

72 
	}
}

74 
mac_íåy
 *

75 
	$mac_íåy_lookup
(c⁄° 
mac_À¨nög
 *
ml
,

76 c⁄° 
uöt8_t
 
mac
[
ETH_ADDR_LEN
], 
uöt16_t
 
vœn
)

78 
mac_íåy
 *
e
;

80 
	`HMAP_FOR_EACH_WITH_HASH
 (
e
, 
hm≠_node
, 
	`mac_èbÀ_hash
(
ml
, 
mac
, 
vœn
),

81 &
ml
->
èbÀ
) {

82 i‡(
e
->
vœn
 =vœ¿&& 
	`ëh_addr_equÆs
”->
mac
, mac)) {

83  
e
;

86  
NULL
;

87 
	}
}

92 
boﬁ


93 
	$gë_Ãu
(
mac_À¨nög
 *
ml
, 
mac_íåy
 **
e
)

95 i‡(!
	`li°_is_em±y
(&
ml
->
Ãus
)) {

96 *
e
 = 
	`mac_íåy_‰om_Ãu_node
(
ml
->
Ãus
.
√xt
);

97  
åue
;

99 *
e
 = 
NULL
;

100  
Ál£
;

102 
	}
}

105 
	$n‹mÆize_idÀ_time
(
idÀ_time
)

107  (
idÀ_time
 < 15 ? 15

108 : 
idÀ_time
 > 3600 ? 3600

109 : 
idÀ_time
);

110 
	}
}

114 
mac_À¨nög
 *

115 
	$mac_À¨nög_¸óã
(
idÀ_time
)

117 
mac_À¨nög
 *
ml
;

119 
ml
 = 
	`xmÆloc
( *ml);

120 
	`li°_öô
(&
ml
->
Ãus
);

121 
	`hm≠_öô
(&
ml
->
èbÀ
);

122 
ml
->
£¸ë
 = 
	`øndom_uöt32
();

123 
ml
->
Êood_vœns
 = 
NULL
;

124 
ml
->
idÀ_time
 = 
	`n‹mÆize_idÀ_time
(idle_time);

125  
ml
;

126 
	}
}

130 
	$mac_À¨nög_de°roy
(
mac_À¨nög
 *
ml
)

132 i‡(
ml
) {

133 
mac_íåy
 *
e
, *
√xt
;

135 
	`HMAP_FOR_EACH_SAFE
 (
e
, 
√xt
, 
hm≠_node
, &
ml
->
èbÀ
) {

136 
	`hm≠_ªmove
(&
ml
->
èbÀ
, &
e
->
hm≠_node
);

137 
	`‰ì
(
e
);

139 
	`hm≠_de°roy
(&
ml
->
èbÀ
);

141 
	`bôm≠_‰ì
(
ml
->
Êood_vœns
);

142 
	`‰ì
(
ml
);

144 
	}
}

149 
boﬁ


150 
	$mac_À¨nög_£t_Êood_vœns
(
mac_À¨nög
 *
ml
,

151 c⁄° *
bôm≠
)

153 i‡(
	`vœn_bôm≠_equÆ
(
ml
->
Êood_vœns
, 
bôm≠
)) {

154  
Ál£
;

156 
	`bôm≠_‰ì
(
ml
->
Êood_vœns
);

157 
ml
->
Êood_vœns
 = 
	`vœn_bôm≠_˛⁄e
(
bôm≠
);

158  
åue
;

160 
	}
}

164 
	$mac_À¨nög_£t_idÀ_time
(
mac_À¨nög
 *
ml
, 
idÀ_time
)

166 
idÀ_time
 = 
	`n‹mÆize_idÀ_time
(idle_time);

167 i‡(
idÀ_time
 !
ml
->idle_time) {

168 
mac_íåy
 *
e
;

169 
dñè
;

171 
dñè
 = (Ë
idÀ_time
 - (Ë
ml
->idle_time;

172 
	`LIST_FOR_EACH
 (
e
, 
Ãu_node
, &
ml
->
Ãus
) {

173 
e
->
expúes
 +
dñè
;

175 
ml
->
idÀ_time
 = idle_time;

177 
	}
}

179 
boﬁ


180 
	$is_À¨nög_vœn
(c⁄° 
mac_À¨nög
 *
ml
, 
uöt16_t
 
vœn
)

182  !
ml
->
Êood_vœns
 || !
	`bôm≠_is_£t
(ml->Êood_vœns, 
vœn
);

183 
	}
}

188 
boﬁ


189 
	$mac_À¨nög_may_À¨n
(c⁄° 
mac_À¨nög
 *
ml
,

190 c⁄° 
uöt8_t
 
§c_mac
[
ETH_ADDR_LEN
], 
uöt16_t
 
vœn
)

192  
ml
 && 
	`is_À¨nög_vœn
(ml, 
vœn
Ë&& !
	`ëh_addr_is_mu…iˇ°
(
§c_mac
);

193 
	}
}

205 
mac_íåy
 *

206 
	$mac_À¨nög_ö£π
(
mac_À¨nög
 *
ml
,

207 c⁄° 
uöt8_t
 
§c_mac
[
ETH_ADDR_LEN
], 
uöt16_t
 
vœn
)

209 
mac_íåy
 *
e
;

211 
e
 = 
	`mac_íåy_lookup
(
ml
, 
§c_mac
, 
vœn
);

212 i‡(!
e
) {

213 
uöt32_t
 
hash
 = 
	`mac_èbÀ_hash
(
ml
, 
§c_mac
, 
vœn
);

215 i‡(
	`hm≠_cou¡
(&
ml
->
èbÀ
Ë>
MAC_MAX
) {

216 
	`gë_Ãu
(
ml
, &
e
);

217 
	`mac_À¨nög_expúe
(
ml
, 
e
);

220 
e
 = 
	`xmÆloc
( *e);

221 
	`hm≠_ö£π
(&
ml
->
èbÀ
, &
e
->
hm≠_node
, 
hash
);

222 
	`mem˝y
(
e
->
mac
, 
§c_mac
, 
ETH_ADDR_LEN
);

223 
e
->
vœn
 = vlan;

224 
e
->
èg
 = 0;

225 
e
->
gøt_¨p_lock
 = 
TIME_MIN
;

227 
	`li°_ªmove
(&
e
->
Ãu_node
);

231 
	`li°_push_back
(&
ml
->
Ãus
, &
e
->
Ãu_node
);

232 
e
->
expúes
 = 
	`time_now
(Ë+ 
ml
->
idÀ_time
;

234  
e
;

235 
	}
}

244 
èg_ty≥


245 
	$mac_À¨nög_ch™ged
(
mac_À¨nög
 *
ml
, 
mac_íåy
 *
e
)

247 
èg_ty≥
 
ﬁd_èg
 = 
e
->
èg
;

249 
	`COVERAGE_INC
(
mac_À¨nög_À¨√d
);

251 
e
->
èg
 = 
	`èg_¸óã_øndom
();

252  
ﬁd_èg
 ? old_èg : 
	`make_unknown_mac_èg
(
ml
, 
e
->
mac
,É->
vœn
);

253 
	}
}

259 
mac_íåy
 *

260 
	$mac_À¨nög_lookup
(c⁄° 
mac_À¨nög
 *
ml
,

261 c⁄° 
uöt8_t
 
d°
[
ETH_ADDR_LEN
], 
uöt16_t
 
vœn
,

262 
èg_ty≥
 *
èg
)

264 i‡(
	`ëh_addr_is_mu…iˇ°
(
d°
)) {

267  
NULL
;

268 } i‡(!
	`is_À¨nög_vœn
(
ml
, 
vœn
)) {

271  
NULL
;

273 
mac_íåy
 *
e
 = 
	`mac_íåy_lookup
(
ml
, 
d°
, 
vœn
);

275 
	`as£π
(
e
 =
NULL
 ||É->
èg
 != 0);

276 i‡(
èg
) {

278 *
èg
 |
e
 ?É->èg : 
	`make_unknown_mac_èg
(
ml
, 
d°
, 
vœn
);

280  
e
;

282 
	}
}

286 
	$mac_À¨nög_expúe
(
mac_À¨nög
 *
ml
, 
mac_íåy
 *
e
)

288 
	`hm≠_ªmove
(&
ml
->
èbÀ
, &
e
->
hm≠_node
);

289 
	`li°_ªmove
(&
e
->
Ãu_node
);

290 
	`‰ì
(
e
);

291 
	}
}

298 
	$mac_À¨nög_Êush
(
mac_À¨nög
 *
ml
, 
èg_£t
 *
ègs
)

300 
mac_íåy
 *
e
;

301 
	`gë_Ãu
(
ml
, &
e
)){

302 i‡(
ègs
) {

303 
	`èg_£t_add
(
ègs
, 
e
->
èg
);

305 
	`mac_À¨nög_expúe
(
ml
, 
e
);

307 
	`hm≠_shrök
(&
ml
->
èbÀ
);

308 
	}
}

311 
	$mac_À¨nög_run
(
mac_À¨nög
 *
ml
, 
èg_£t
 *
£t
)

313 
mac_íåy
 *
e
;

314 
	`gë_Ãu
(
ml
, &
e
Ë&& 
	`time_now
(Ë>e->
expúes
) {

315 
	`COVERAGE_INC
(
mac_À¨nög_expúed
);

316 i‡(
£t
) {

317 
	`èg_£t_add
(
£t
, 
e
->
èg
);

319 
	`mac_À¨nög_expúe
(
ml
, 
e
);

321 
	}
}

324 
	$mac_À¨nög_waô
(
mac_À¨nög
 *
ml
)

326 i‡(!
	`li°_is_em±y
(&
ml
->
Ãus
)) {

327 
mac_íåy
 *
e
 = 
	`mac_íåy_‰om_Ãu_node
(
ml
->
Ãus
.
√xt
);

328 
	`pﬁl_timî_waô_u¡û
(
e
->
expúes
 * 1000LL);

330 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/mac-learning.h

17 #i‚de‡
MAC_LEARNING_H


18 
	#MAC_LEARNING_H
 1

	)

20 
	~<time.h
>

21 
	~"hm≠.h
"

22 
	~"li°.h
"

23 
	~"∑ckës.h
"

24 
	~"èg.h
"

25 
	~"timevÆ.h
"

27 
	gmac_À¨nög
;

29 
	#MAC_MAX
 2048

	)

32 
	#MAC_ENTRY_DEFAULT_IDLE_TIME
 300

	)

36 
	#MAC_GRAT_ARP_LOCK_TIME
 5

	)

39 
	smac_íåy
 {

40 
hm≠_node
 
	mhm≠_node
;

41 
li°
 
	mÃu_node
;

42 
time_t
 
	mexpúes
;

43 
time_t
 
	mgøt_¨p_lock
;

44 
uöt8_t
 
	mmac
[
ETH_ADDR_LEN
];

45 
uöt16_t
 
	mvœn
;

46 
èg_ty≥
 
	mèg
;

50 *
	mp
;

51 
	mi
;

52 } 
	mp‹t
;

55 
mac_íåy_age
(c⁄° 
mac_À¨nög
 *, c⁄° 
mac_íåy
 *);

59 
ölöe
 
boﬁ
 
	$mac_íåy_is_√w
(c⁄° 
mac_íåy
 *
mac
)

61  !
mac
->
èg
;

62 
	}
}

66 
ölöe
 
	$mac_íåy_£t_gøt_¨p_lock
(
mac_íåy
 *
mac
)

68 
mac
->
gøt_¨p_lock
 = 
	`time_now
(Ë+ 
MAC_GRAT_ARP_LOCK_TIME
;

69 
	}
}

73 
ölöe
 
boﬁ
 
	$mac_íåy_is_gøt_¨p_locked
(c⁄° 
mac_íåy
 *
mac
)

75  
	`time_now
(Ë< 
mac
->
gøt_¨p_lock
;

76 
	}
}

79 
	smac_À¨nög
 {

80 
hm≠
 
	mèbÀ
;

81 
li°
 
	mÃus
;

83 
uöt32_t
 
	m£¸ë
;

84 *
	mÊood_vœns
;

85 
	midÀ_time
;

89 
mac_À¨nög
 *
mac_À¨nög_¸óã
(
idÀ_time
);

90 
mac_À¨nög_de°roy
(
mac_À¨nög
 *);

92 
mac_À¨nög_run
(
mac_À¨nög
 *, 
èg_£t
 *);

93 
mac_À¨nög_waô
(
mac_À¨nög
 *);

96 
boﬁ
 
mac_À¨nög_£t_Êood_vœns
(
mac_À¨nög
 *,

97 c⁄° *
bôm≠
);

98 
mac_À¨nög_£t_idÀ_time
(
mac_À¨nög
 *, 
idÀ_time
);

101 
boﬁ
 
mac_À¨nög_may_À¨n
(c⁄° 
mac_À¨nög
 *,

102 c⁄° 
uöt8_t
 
§c_mac
[
ETH_ADDR_LEN
],

103 
uöt16_t
 
vœn
);

104 
mac_íåy
 *
mac_À¨nög_ö£π
(
mac_À¨nög
 *,

105 c⁄° 
uöt8_t
 
§c
[
ETH_ADDR_LEN
],

106 
uöt16_t
 
vœn
);

107 
èg_ty≥
 
mac_À¨nög_ch™ged
(
mac_À¨nög
 *, 
mac_íåy
 *);

110 
mac_íåy
 *
mac_À¨nög_lookup
(c⁄° 
mac_À¨nög
 *,

111 c⁄° 
uöt8_t
 
d°
[
ETH_ADDR_LEN
],

112 
uöt16_t
 
vœn
, 
èg_ty≥
 *);

115 
mac_À¨nög_expúe
(
mac_À¨nög
 *, 
mac_íåy
 *);

116 
mac_À¨nög_Êush
(
mac_À¨nög
 *, 
èg_£t
 *);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/match.c

17 
	~<c⁄fig.h
>

18 
	~"m©ch.h
"

19 
	~<as£π.h
>

20 
	~<°dlib.h
>

21 
	~"byã-‹dî.h
"

22 
	~"dy«mic-°rög.h
"

23 
	~"∑ckës.h
"

24 
	~"vlog.h
"

26 
VLOG_DEFINE_THIS_MODULE
(
m©ch
);

32 
	$m©ch_öô
(
m©ch
 *match,

33 c⁄° 
Êow
 *Êow, c⁄° 
Êow_wûdˇrds
 *
wc
)

35 
m©ch
->
Êow
 = *flow;

36 
m©ch
->
wc
 = *wc;

37 
	`m©ch_zîo_wûdˇrded_fõlds
(
m©ch
);

38 
	}
}

44 
	$m©ch_wc_öô
(
m©ch
 *m©ch, c⁄° 
Êow
 *flow)

46 
Êow_wûdˇrds
 *
wc
;

47 
i
;

49 
m©ch
->
Êow
 = *flow;

50 
wc
 = &
m©ch
->wc;

51 
	`mem£t
(&
wc
->
masks
, 0x0,  wc->masks);

53 
	`mem£t
(&
wc
->
masks
.
dl_ty≥
, 0xff,  wc->masks.dl_type);

55 i‡(
Êow
->
nw_¥Ÿo
) {

56 
	`mem£t
(&
wc
->
masks
.
nw_¥Ÿo
, 0xff,  wc->masks.nw_proto);

59 i‡(
Êow
->
skb_¥i‹ôy
) {

60 
	`mem£t
(&
wc
->
masks
.
skb_¥i‹ôy
, 0xff,  wc->masks.skb_priority);

63 i‡(
Êow
->
skb_m¨k
) {

64 
	`mem£t
(&
wc
->
masks
.
skb_m¨k
, 0xff,  wc->masks.skb_mark);

67 
i
 = 0; i < 
FLOW_N_REGS
; i++) {

68 i‡(
Êow
->
ªgs
[
i
]) {

69 
	`mem£t
(&
wc
->
masks
.
ªgs
[
i
], 0xff,  wc->masks.regs[i]);

73 i‡(
Êow
->
tu¬ñ
.
ù_d°
) {

74 i‡(
Êow
->
tu¬ñ
.
Êags
 & 
FLOW_TNL_F_KEY
) {

75 
	`mem£t
(&
wc
->
masks
.
tu¬ñ
.
tun_id
, 0xff,  wc->masks.tunnel.tun_id);

77 
	`mem£t
(&
wc
->
masks
.
tu¬ñ
.
ù_§c
, 0xff,  wc->masks.tunnel.ip_src);

78 
	`mem£t
(&
wc
->
masks
.
tu¬ñ
.
ù_d°
, 0xff,  wc->masks.tunnel.ip_dst);

79 
	`mem£t
(&
wc
->
masks
.
tu¬ñ
.
Êags
, 0xff,  wc->masks.tunnel.flags);

80 
	`mem£t
(&
wc
->
masks
.
tu¬ñ
.
ù_tos
, 0xff,  wc->masks.tunnel.ip_tos);

81 
	`mem£t
(&
wc
->
masks
.
tu¬ñ
.
ù_âl
, 0xff,  wc->masks.tunnel.ip_ttl);

82 } i‡(
Êow
->
tu¬ñ
.
tun_id
) {

83 
	`mem£t
(&
wc
->
masks
.
tu¬ñ
.
tun_id
, 0xff,  wc->masks.tunnel.tun_id);

86 
	`mem£t
(&
wc
->
masks
.
mëad©a
, 0xff,  wc->masks.metadata);

87 
	`mem£t
(&
wc
->
masks
.
ö_p‹t
, 0xff,  wc->masks.in_port);

88 
	`mem£t
(&
wc
->
masks
.
vœn_tci
, 0xff,  wc->masks.vlan_tci);

89 
	`mem£t
(&
wc
->
masks
.
dl_§c
, 0xff,  wc->masks.dl_src);

90 
	`mem£t
(&
wc
->
masks
.
dl_d°
, 0xff,  wc->masks.dl_dst);

92 i‡(
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IPV6
)) {

93 
	`mem£t
(&
wc
->
masks
.
ùv6_§c
, 0xff,  wc->masks.ipv6_src);

94 
	`mem£t
(&
wc
->
masks
.
ùv6_d°
, 0xff,  wc->masks.ipv6_dst);

95 
	`mem£t
(&
wc
->
masks
.
ùv6_œbñ
, 0xff,  wc->masks.ipv6_label);

96 } i‡(
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IP
) ||

97 (
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_ARP
)) ||

98 (
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_RARP
))) {

99 
	`mem£t
(&
wc
->
masks
.
nw_§c
, 0xff,  wc->masks.nw_src);

100 
	`mem£t
(&
wc
->
masks
.
nw_d°
, 0xff,  wc->masks.nw_dst);

103 i‡(
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_ARP
) ||

104 
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_RARP
)) {

105 
	`mem£t
(&
wc
->
masks
.
¨p_sha
, 0xff,  wc->masks.arp_sha);

106 
	`mem£t
(&
wc
->
masks
.
¨p_tha
, 0xff,  wc->masks.arp_tha);

109 i‡(
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IPV6
) ||

110 
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IP
)) {

111 
	`mem£t
(&
wc
->
masks
.
nw_tos
, 0xff,  wc->masks.nw_tos);

112 
	`mem£t
(&
wc
->
masks
.
nw_âl
, 0xff,  wc->masks.nw_ttl);

115 i‡(
Êow
->
nw_‰ag
) {

116 
	`mem£t
(&
wc
->
masks
.
nw_‰ag
, 0xff,  wc->masks.nw_frag);

119 i‡(
Êow
->
nw_¥Ÿo
 =
IPPROTO_ICMP
 || flow->nw_¥Ÿÿ=
IPPROTO_ICMPV6
 ||

120 (
Êow
->
ç_§c
 || flow->
ç_d°
)) {

121 
	`mem£t
(&
wc
->
masks
.
ç_§c
, 0xff,  wc->masks.tp_src);

122 
	`mem£t
(&
wc
->
masks
.
ç_d°
, 0xff,  wc->masks.tp_dst);

125 i‡(
Êow
->
nw_¥Ÿo
 =
IPPROTO_ICMPV6
) {

126 
	`mem£t
(&
wc
->
masks
.
¨p_sha
, 0xff,  wc->masks.arp_sha);

127 
	`mem£t
(&
wc
->
masks
.
¨p_tha
, 0xff,  wc->masks.arp_tha);

131 
	}
}

135 
	$m©ch_öô_exa˘
(
m©ch
 *m©ch, c⁄° 
Êow
 *flow)

137 
ovs_be64
 
tun_id
 = 
Êow
->
tu¬ñ
.tun_id;

139 
m©ch
->
Êow
 = *flow;

140 
m©ch
->
Êow
.
skb_¥i‹ôy
 = 0;

141 
m©ch
->
Êow
.
skb_m¨k
 = 0;

142 
	`mem£t
(&
m©ch
->
Êow
.
tu¬ñ
, 0,  match->flow.tunnel);

143 
m©ch
->
Êow
.
tu¬ñ
.
tun_id
 =Åun_id;

144 
	`Êow_wûdˇrds_öô_exa˘
(&
m©ch
->
wc
);

145 
	}
}

149 
	$m©ch_öô_ˇtchÆl
(
m©ch
 *match)

151 
	`mem£t
(&
m©ch
->
Êow
, 0,  match->flow);

152 
	`Êow_wûdˇrds_öô_ˇtchÆl
(&
m©ch
->
wc
);

153 
	}
}

164 
	$m©ch_zîo_wûdˇrded_fõlds
(
m©ch
 *match)

166 
	`Êow_zîo_wûdˇrds
(&
m©ch
->
Êow
, &m©ch->
wc
);

167 
	}
}

170 
	$m©ch_£t_ªg
(
m©ch
 *m©ch, 
ªg_idx
, 
uöt32_t
 
vÆue
)

172 
	`m©ch_£t_ªg_masked
(
m©ch
, 
ªg_idx
, 
vÆue
, 
UINT32_MAX
);

173 
	}
}

176 
	$m©ch_£t_ªg_masked
(
m©ch
 *m©ch, 
ªg_idx
,

177 
uöt32_t
 
vÆue
, uöt32_à
mask
)

179 
	`as£π
(
ªg_idx
 < 
FLOW_N_REGS
);

180 
	`Êow_wûdˇrds_£t_ªg_mask
(&
m©ch
->
wc
, 
ªg_idx
, 
mask
);

181 
m©ch
->
Êow
.
ªgs
[
ªg_idx
] = 
vÆue
 & 
mask
;

182 
	}
}

185 
	$m©ch_£t_mëad©a
(
m©ch
 *m©ch, 
ovs_be64
 
mëad©a
)

187 
	`m©ch_£t_mëad©a_masked
(
m©ch
, 
mëad©a
, 
	`ht⁄Œ
(
UINT64_MAX
));

188 
	}
}

191 
	$m©ch_£t_mëad©a_masked
(
m©ch
 *match,

192 
ovs_be64
 
mëad©a
, ovs_be64 
mask
)

194 
m©ch
->
wc
.
masks
.
mëad©a
 = 
mask
;

195 
m©ch
->
Êow
.
mëad©a
 = mëad©®& 
mask
;

196 
	}
}

199 
	$m©ch_£t_tun_id
(
m©ch
 *m©ch, 
ovs_be64
 
tun_id
)

201 
	`m©ch_£t_tun_id_masked
(
m©ch
, 
tun_id
, 
	`ht⁄Œ
(
UINT64_MAX
));

202 
	}
}

205 
	$m©ch_£t_tun_id_masked
(
m©ch
 *m©ch, 
ovs_be64
 
tun_id
, ovs_be64 
mask
)

207 
m©ch
->
wc
.
masks
.
tu¬ñ
.
tun_id
 = 
mask
;

208 
m©ch
->
Êow
.
tu¬ñ
.
tun_id
 =Åun_id & 
mask
;

209 
	}
}

212 
	$m©ch_£t_tun_§c
(
m©ch
 *m©ch, 
ovs_be32
 
§c
)

214 
	`m©ch_£t_tun_§c_masked
(
m©ch
, 
§c
, 
	`ht⁄l
(
UINT32_MAX
));

215 
	}
}

218 
	$m©ch_£t_tun_§c_masked
(
m©ch
 *m©ch, 
ovs_be32
 
§c
, ovs_be32 
mask
)

220 
m©ch
->
wc
.
masks
.
tu¬ñ
.
ù_§c
 = 
mask
;

221 
m©ch
->
Êow
.
tu¬ñ
.
ù_§c
 = 
§c
 & 
mask
;

222 
	}
}

225 
	$m©ch_£t_tun_d°
(
m©ch
 *m©ch, 
ovs_be32
 
d°
)

227 
	`m©ch_£t_tun_d°_masked
(
m©ch
, 
d°
, 
	`ht⁄l
(
UINT32_MAX
));

228 
	}
}

231 
	$m©ch_£t_tun_d°_masked
(
m©ch
 *m©ch, 
ovs_be32
 
d°
, ovs_be32 
mask
)

233 
m©ch
->
wc
.
masks
.
tu¬ñ
.
ù_d°
 = 
mask
;

234 
m©ch
->
Êow
.
tu¬ñ
.
ù_d°
 = 
d°
 & 
mask
;

235 
	}
}

238 
	$m©ch_£t_tun_âl
(
m©ch
 *m©ch, 
uöt8_t
 
âl
)

240 
	`m©ch_£t_tun_âl_masked
(
m©ch
, 
âl
, 
UINT8_MAX
);

241 
	}
}

244 
	$m©ch_£t_tun_âl_masked
(
m©ch
 *m©ch, 
uöt8_t
 
âl
, uöt8_à
mask
)

246 
m©ch
->
wc
.
masks
.
tu¬ñ
.
ù_âl
 = 
mask
;

247 
m©ch
->
Êow
.
tu¬ñ
.
ù_âl
 = 
âl
 & 
mask
;

248 
	}
}

251 
	$m©ch_£t_tun_tos
(
m©ch
 *m©ch, 
uöt8_t
 
tos
)

253 
	`m©ch_£t_tun_tos_masked
(
m©ch
, 
tos
, 
UINT8_MAX
);

254 
	}
}

257 
	$m©ch_£t_tun_tos_masked
(
m©ch
 *m©ch, 
uöt8_t
 
tos
, uöt8_à
mask
)

259 
m©ch
->
wc
.
masks
.
tu¬ñ
.
ù_tos
 = 
mask
;

260 
m©ch
->
Êow
.
tu¬ñ
.
ù_tos
 = 
tos
 & 
mask
;

261 
	}
}

264 
	$m©ch_£t_tun_Êags
(
m©ch
 *m©ch, 
uöt16_t
 
Êags
)

266 
	`m©ch_£t_tun_Êags_masked
(
m©ch
, 
Êags
, 
UINT16_MAX
);

267 
	}
}

270 
	$m©ch_£t_tun_Êags_masked
(
m©ch
 *m©ch, 
uöt16_t
 
Êags
, uöt16_à
mask
)

272 
m©ch
->
wc
.
masks
.
tu¬ñ
.
Êags
 = 
mask
;

273 
m©ch
->
Êow
.
tu¬ñ
.
Êags
 = fœg†& 
mask
;

274 
	}
}

277 
	$m©ch_£t_ö_p‹t
(
m©ch
 *m©ch, 
uöt16_t
 
oÂ_p‹t
)

279 
m©ch
->
wc
.
masks
.
ö_p‹t
 = 
UINT16_MAX
;

280 
m©ch
->
Êow
.
ö_p‹t
 = 
oÂ_p‹t
;

281 
	}
}

284 
	$m©ch_£t_skb_¥i‹ôy
(
m©ch
 *m©ch, 
uöt32_t
 
skb_¥i‹ôy
)

286 
m©ch
->
wc
.
masks
.
skb_¥i‹ôy
 = 
UINT32_MAX
;

287 
m©ch
->
Êow
.
skb_¥i‹ôy
 = skb_priority;

288 
	}
}

291 
	$m©ch_£t_skb_m¨k
(
m©ch
 *m©ch, 
uöt32_t
 
skb_m¨k
)

293 
m©ch
->
wc
.
masks
.
skb_m¨k
 = 
UINT32_MAX
;

294 
m©ch
->
Êow
.
skb_m¨k
 = skb_mark;

295 
	}
}

298 
	$m©ch_£t_dl_ty≥
(
m©ch
 *m©ch, 
ovs_be16
 
dl_ty≥
)

300 
m©ch
->
wc
.
masks
.
dl_ty≥
 = 
	`ht⁄s
(
UINT16_MAX
);

301 
m©ch
->
Êow
.
dl_ty≥
 = dl_type;

302 
	}
}

307 
	$£t_ëh
(c⁄° 
uöt8_t
 
vÆue_§c
[
ETH_ADDR_LEN
],

308 
uöt8_t
 
vÆue_d°
[
ETH_ADDR_LEN
],

309 
uöt8_t
 
mask_d°
[
ETH_ADDR_LEN
])

311 
	`mem˝y
(
vÆue_d°
, 
vÆue_§c
, 
ETH_ADDR_LEN
);

312 
	`mem£t
(
mask_d°
, 0xff, 
ETH_ADDR_LEN
);

313 
	}
}

319 
	$£t_ëh_masked
(c⁄° 
uöt8_t
 
vÆue_§c
[
ETH_ADDR_LEN
],

320 c⁄° 
uöt8_t
 
mask_§c
[
ETH_ADDR_LEN
],

321 
uöt8_t
 
vÆue_d°
[
ETH_ADDR_LEN
],

322 
uöt8_t
 
mask_d°
[
ETH_ADDR_LEN
])

324 
size_t
 
i
;

326 
i
 = 0; i < 
ETH_ADDR_LEN
; i++) {

327 
vÆue_d°
[
i
] = 
vÆue_§c
[i] & 
mask_§c
[i];

328 
mask_d°
[
i
] = 
mask_§c
[i];

330 
	}
}

335 
	$m©ch_£t_dl_§c
(
m©ch
 *m©ch, c⁄° 
uöt8_t
 
dl_§c
[
ETH_ADDR_LEN
])

337 
	`£t_ëh
(
dl_§c
, 
m©ch
->
Êow
.dl_§c, m©ch->
wc
.
masks
.dl_src);

338 
	}
}

343 
	$m©ch_£t_dl_§c_masked
(
m©ch
 *match,

344 c⁄° 
uöt8_t
 
dl_§c
[
ETH_ADDR_LEN
],

345 c⁄° 
uöt8_t
 
mask
[
ETH_ADDR_LEN
])

347 
	`£t_ëh_masked
(
dl_§c
, 
mask
, 
m©ch
->
Êow
.dl_§c, m©ch->
wc
.
masks
.dl_src);

348 
	}
}

353 
	$m©ch_£t_dl_d°
(
m©ch
 *m©ch, c⁄° 
uöt8_t
 
dl_d°
[
ETH_ADDR_LEN
])

355 
	`£t_ëh
(
dl_d°
, 
m©ch
->
Êow
.dl_d°, m©ch->
wc
.
masks
.dl_dst);

356 
	}
}

364 
	$m©ch_£t_dl_d°_masked
(
m©ch
 *match,

365 c⁄° 
uöt8_t
 
dl_d°
[
ETH_ADDR_LEN
],

366 c⁄° 
uöt8_t
 
mask
[
ETH_ADDR_LEN
])

368 
	`£t_ëh_masked
(
dl_d°
, 
mask
, 
m©ch
->
Êow
.dl_d°, m©ch->
wc
.
masks
.dl_dst);

369 
	}
}

372 
	$m©ch_£t_dl_tci
(
m©ch
 *m©ch, 
ovs_be16
 
tci
)

374 
	`m©ch_£t_dl_tci_masked
(
m©ch
, 
tci
, 
	`ht⁄s
(0xffff));

375 
	}
}

378 
	$m©ch_£t_dl_tci_masked
(
m©ch
 *m©ch, 
ovs_be16
 
tci
, ovs_be16 
mask
)

380 
m©ch
->
Êow
.
vœn_tci
 = 
tci
 & 
mask
;

381 
m©ch
->
wc
.
masks
.
vœn_tci
 = 
mask
;

382 
	}
}

388 
	$m©ch_£t_™y_vid
(
m©ch
 *match)

390 i‡(
m©ch
->
wc
.
masks
.
vœn_tci
 & 
	`ht⁄s
(
VLAN_PCP_MASK
)) {

391 
m©ch
->
wc
.
masks
.
vœn_tci
 &~
	`ht⁄s
(
VLAN_VID_MASK
);

392 
m©ch
->
Êow
.
vœn_tci
 &~
	`ht⁄s
(
VLAN_VID_MASK
);

394 
	`m©ch_£t_dl_tci_masked
(
m©ch
, 
	`ht⁄s
(0), htons(0));

396 
	}
}

407 
	$m©ch_£t_dl_vœn
(
m©ch
 *m©ch, 
ovs_be16
 
dl_vœn
)

409 
	`Êow_£t_dl_vœn
(&
m©ch
->
Êow
, 
dl_vœn
);

410 i‡(
dl_vœn
 =
	`ht⁄s
(
OFP10_VLAN_NONE
)) {

411 
m©ch
->
wc
.
masks
.
vœn_tci
 = 
	`ht⁄s
(
UINT16_MAX
);

413 
m©ch
->
wc
.
masks
.
vœn_tci
 |
	`ht⁄s
(
VLAN_VID_MASK
 | 
VLAN_CFI
);

415 
	}
}

421 
	$m©ch_£t_vœn_vid
(
m©ch
 *m©ch, 
ovs_be16
 
vid
)

423 
	`m©ch_£t_vœn_vid_masked
(
m©ch
, 
vid
, 
	`ht⁄s
(
VLAN_VID_MASK
 | 
VLAN_CFI
));

424 
	}
}

431 
	$m©ch_£t_vœn_vid_masked
(
m©ch
 *m©ch, 
ovs_be16
 
vid
, ovs_be16 
mask
)

433 
ovs_be16
 
p˝_mask
 = 
	`ht⁄s
(
VLAN_PCP_MASK
);

434 
ovs_be16
 
vid_mask
 = 
	`ht⁄s
(
VLAN_VID_MASK
 | 
VLAN_CFI
);

436 
mask
 &
vid_mask
;

437 
	`Êow_£t_vœn_vid
(&
m©ch
->
Êow
, 
vid
 & 
mask
);

438 
m©ch
->
wc
.
masks
.
vœn_tci
 = 
mask
 | (m©ch->wc.masks.vœn_tcò& 
p˝_mask
);

439 
	}
}

445 
	$m©ch_£t_™y_p˝
(
m©ch
 *match)

447 i‡(
m©ch
->
wc
.
masks
.
vœn_tci
 & 
	`ht⁄s
(
VLAN_VID_MASK
)) {

448 
m©ch
->
wc
.
masks
.
vœn_tci
 &~
	`ht⁄s
(
VLAN_PCP_MASK
);

449 
m©ch
->
Êow
.
vœn_tci
 &~
	`ht⁄s
(
VLAN_PCP_MASK
);

451 
	`m©ch_£t_dl_tci_masked
(
m©ch
, 
	`ht⁄s
(0), htons(0));

453 
	}
}

458 
	$m©ch_£t_dl_vœn_p˝
(
m©ch
 *m©ch, 
uöt8_t
 
dl_vœn_p˝
)

460 
	`Êow_£t_vœn_p˝
(&
m©ch
->
Êow
, 
dl_vœn_p˝
);

461 
m©ch
->
wc
.
masks
.
vœn_tci
 |
	`ht⁄s
(
VLAN_CFI
 | 
VLAN_PCP_MASK
);

462 
	}
}

465 
	$m©ch_£t_ç_§c
(
m©ch
 *m©ch, 
ovs_be16
 
ç_§c
)

467 
	`m©ch_£t_ç_§c_masked
(
m©ch
, 
ç_§c
, 
	`ht⁄s
(
UINT16_MAX
));

468 
	}
}

471 
	$m©ch_£t_ç_§c_masked
(
m©ch
 *m©ch, 
ovs_be16
 
p‹t
, ovs_be16 
mask
)

473 
m©ch
->
Êow
.
ç_§c
 = 
p‹t
 & 
mask
;

474 
m©ch
->
wc
.
masks
.
ç_§c
 = 
mask
;

475 
	}
}

478 
	$m©ch_£t_ç_d°
(
m©ch
 *m©ch, 
ovs_be16
 
ç_d°
)

480 
	`m©ch_£t_ç_d°_masked
(
m©ch
, 
ç_d°
, 
	`ht⁄s
(
UINT16_MAX
));

481 
	}
}

484 
	$m©ch_£t_ç_d°_masked
(
m©ch
 *m©ch, 
ovs_be16
 
p‹t
, ovs_be16 
mask
)

486 
m©ch
->
Êow
.
ç_d°
 = 
p‹t
 & 
mask
;

487 
m©ch
->
wc
.
masks
.
ç_d°
 = 
mask
;

488 
	}
}

491 
	$m©ch_£t_nw_¥Ÿo
(
m©ch
 *m©ch, 
uöt8_t
 
nw_¥Ÿo
)

493 
m©ch
->
Êow
.
nw_¥Ÿo
 =Çw_proto;

494 
m©ch
->
wc
.
masks
.
nw_¥Ÿo
 = 
UINT8_MAX
;

495 
	}
}

498 
	$m©ch_£t_nw_§c
(
m©ch
 *m©ch, 
ovs_be32
 
nw_§c
)

500 
m©ch
->
Êow
.
nw_§c
 =Çw_src;

501 
m©ch
->
wc
.
masks
.
nw_§c
 = 
	`ht⁄l
(
UINT32_MAX
);

502 
	}
}

505 
	$m©ch_£t_nw_§c_masked
(
m©ch
 *match,

506 
ovs_be32
 
nw_§c
, ovs_be32 
mask
)

508 
m©ch
->
Êow
.
nw_§c
 =Çw_§¯& 
mask
;

509 
m©ch
->
wc
.
masks
.
nw_§c
 = 
mask
;

510 
	}
}

513 
	$m©ch_£t_nw_d°
(
m©ch
 *m©ch, 
ovs_be32
 
nw_d°
)

515 
m©ch
->
Êow
.
nw_d°
 =Çw_dst;

516 
m©ch
->
wc
.
masks
.
nw_d°
 = 
	`ht⁄l
(
UINT32_MAX
);

517 
	}
}

520 
	$m©ch_£t_nw_d°_masked
(
m©ch
 *m©ch, 
ovs_be32
 
ù
, ovs_be32 
mask
)

522 
m©ch
->
Êow
.
nw_d°
 = 
ù
 & 
mask
;

523 
m©ch
->
wc
.
masks
.
nw_d°
 = 
mask
;

524 
	}
}

527 
	$m©ch_£t_nw_ds˝
(
m©ch
 *m©ch, 
uöt8_t
 
nw_ds˝
)

529 
m©ch
->
wc
.
masks
.
nw_tos
 |
IP_DSCP_MASK
;

530 
m©ch
->
Êow
.
nw_tos
 &~
IP_DSCP_MASK
;

531 
m©ch
->
Êow
.
nw_tos
 |
nw_ds˝
 & 
IP_DSCP_MASK
;

532 
	}
}

535 
	$m©ch_£t_nw_e˙
(
m©ch
 *m©ch, 
uöt8_t
 
nw_e˙
)

537 
m©ch
->
wc
.
masks
.
nw_tos
 |
IP_ECN_MASK
;

538 
m©ch
->
Êow
.
nw_tos
 &~
IP_ECN_MASK
;

539 
m©ch
->
Êow
.
nw_tos
 |
nw_e˙
 & 
IP_ECN_MASK
;

540 
	}
}

543 
	$m©ch_£t_nw_âl
(
m©ch
 *m©ch, 
uöt8_t
 
nw_âl
)

545 
m©ch
->
wc
.
masks
.
nw_âl
 = 
UINT8_MAX
;

546 
m©ch
->
Êow
.
nw_âl
 =Çw_ttl;

547 
	}
}

550 
	$m©ch_£t_nw_‰ag
(
m©ch
 *m©ch, 
uöt8_t
 
nw_‰ag
)

552 
m©ch
->
wc
.
masks
.
nw_‰ag
 |
FLOW_NW_FRAG_MASK
;

553 
m©ch
->
Êow
.
nw_‰ag
 =Çw_frag;

554 
	}
}

557 
	$m©ch_£t_nw_‰ag_masked
(
m©ch
 *match,

558 
uöt8_t
 
nw_‰ag
, uöt8_à
mask
)

560 
m©ch
->
Êow
.
nw_‰ag
 =Çw_‰ag & 
mask
;

561 
m©ch
->
wc
.
masks
.
nw_‰ag
 = 
mask
;

562 
	}
}

565 
	$m©ch_£t_icmp_ty≥
(
m©ch
 *m©ch, 
uöt8_t
 
icmp_ty≥
)

567 
	`m©ch_£t_ç_§c
(
m©ch
, 
	`ht⁄s
(
icmp_ty≥
));

568 
	}
}

571 
	$m©ch_£t_icmp_code
(
m©ch
 *m©ch, 
uöt8_t
 
icmp_code
)

573 
	`m©ch_£t_ç_d°
(
m©ch
, 
	`ht⁄s
(
icmp_code
));

574 
	}
}

577 
	$m©ch_£t_¨p_sha
(
m©ch
 *m©ch, c⁄° 
uöt8_t
 
sha
[
ETH_ADDR_LEN
])

579 
	`mem˝y
(
m©ch
->
Êow
.
¨p_sha
, 
sha
, 
ETH_ADDR_LEN
);

580 
	`mem£t
(
m©ch
->
wc
.
masks
.
¨p_sha
, 
UINT8_MAX
, 
ETH_ADDR_LEN
);

581 
	}
}

584 
	$m©ch_£t_¨p_sha_masked
(
m©ch
 *match,

585 c⁄° 
uöt8_t
 
¨p_sha
[
ETH_ADDR_LEN
],

586 c⁄° 
uöt8_t
 
mask
[
ETH_ADDR_LEN
])

588 
	`£t_ëh_masked
(
¨p_sha
, 
mask
,

589 
m©ch
->
Êow
.
¨p_sha
, m©ch->
wc
.
masks
.arp_sha);

590 
	}
}

593 
	$m©ch_£t_¨p_tha
(
m©ch
 *m©ch, c⁄° 
uöt8_t
 
tha
[
ETH_ADDR_LEN
])

595 
	`mem˝y
(
m©ch
->
Êow
.
¨p_tha
, 
tha
, 
ETH_ADDR_LEN
);

596 
	`mem£t
(
m©ch
->
wc
.
masks
.
¨p_tha
, 
UINT8_MAX
, 
ETH_ADDR_LEN
);

597 
	}
}

600 
	$m©ch_£t_¨p_tha_masked
(
m©ch
 *match,

601 c⁄° 
uöt8_t
 
¨p_tha
[
ETH_ADDR_LEN
],

602 c⁄° 
uöt8_t
 
mask
[
ETH_ADDR_LEN
])

604 
	`£t_ëh_masked
(
¨p_tha
, 
mask
,

605 
m©ch
->
Êow
.
¨p_tha
, m©ch->
wc
.
masks
.arp_tha);

606 
	}
}

609 
	$m©ch_£t_ùv6_§c
(
m©ch
 *m©ch, c⁄° 
ö6_addr
 *
§c
)

611 
m©ch
->
Êow
.
ùv6_§c
 = *
§c
;

612 
m©ch
->
wc
.
masks
.
ùv6_§c
 = 
ö6addr_exa˘
;

613 
	}
}

616 
	$m©ch_£t_ùv6_§c_masked
(
m©ch
 *m©ch, c⁄° 
ö6_addr
 *
§c
,

617 c⁄° 
ö6_addr
 *
mask
)

619 
m©ch
->
Êow
.
ùv6_§c
 = 
	`ùv6_addr_bô™d
(
§c
, 
mask
);

620 
m©ch
->
wc
.
masks
.
ùv6_§c
 = *
mask
;

621 
	}
}

624 
	$m©ch_£t_ùv6_d°
(
m©ch
 *m©ch, c⁄° 
ö6_addr
 *
d°
)

626 
m©ch
->
Êow
.
ùv6_d°
 = *
d°
;

627 
m©ch
->
wc
.
masks
.
ùv6_d°
 = 
ö6addr_exa˘
;

628 
	}
}

631 
	$m©ch_£t_ùv6_d°_masked
(
m©ch
 *m©ch, c⁄° 
ö6_addr
 *
d°
,

632 c⁄° 
ö6_addr
 *
mask
)

634 
m©ch
->
Êow
.
ùv6_d°
 = 
	`ùv6_addr_bô™d
(
d°
, 
mask
);

635 
m©ch
->
wc
.
masks
.
ùv6_d°
 = *
mask
;

636 
	}
}

639 
	$m©ch_£t_ùv6_œbñ
(
m©ch
 *m©ch, 
ovs_be32
 
ùv6_œbñ
)

641 
m©ch
->
wc
.
masks
.
ùv6_œbñ
 = 
	`ht⁄l
(
UINT32_MAX
);

642 
m©ch
->
Êow
.
ùv6_œbñ
 = ipv6_label;

643 
	}
}

647 
	$m©ch_£t_ùv6_œbñ_masked
(
m©ch
 *m©ch, 
ovs_be32
 
ùv6_œbñ
,

648 
ovs_be32
 
mask
)

650 
m©ch
->
Êow
.
ùv6_œbñ
 = ipv6_œbñ & 
mask
;

651 
m©ch
->
wc
.
masks
.
ùv6_œbñ
 = 
mask
;

652 
	}
}

655 
	$m©ch_£t_nd_èrgë
(
m©ch
 *m©ch, c⁄° 
ö6_addr
 *
èrgë
)

657 
m©ch
->
Êow
.
nd_èrgë
 = *
èrgë
;

658 
m©ch
->
wc
.
masks
.
nd_èrgë
 = 
ö6addr_exa˘
;

659 
	}
}

662 
	$m©ch_£t_nd_èrgë_masked
(
m©ch
 *match,

663 c⁄° 
ö6_addr
 *
èrgë
,

664 c⁄° 
ö6_addr
 *
mask
)

666 
m©ch
->
Êow
.
nd_èrgë
 = 
	`ùv6_addr_bô™d
(
èrgë
, 
mask
);

667 
m©ch
->
wc
.
masks
.
nd_èrgë
 = *
mask
;

668 
	}
}

672 
boﬁ


673 
	$m©ch_equÆ
(c⁄° 
m©ch
 *
a
, c⁄° m©ch *
b
)

675  (
	`Êow_wûdˇrds_equÆ
(&
a
->
wc
, &
b
->wc)

676 && 
	`Êow_equÆ
(&
a
->
Êow
, &
b
->flow));

677 
	}
}

681 
uöt32_t


682 
	$m©ch_hash
(c⁄° 
m©ch
 *m©ch, 
uöt32_t
 
basis
)

684  
	`Êow_wûdˇrds_hash
(&
m©ch
->
wc
, 
	`Êow_hash
(&m©ch->
Êow
, 
basis
));

685 
	}
}

688 
	$f‹m©_ëh_masked
(
ds
 *
s
, c⁄° *
«me
, c⁄° 
uöt8_t
 
ëh
[6],

689 c⁄° 
uöt8_t
 
mask
[6])

691 i‡(!
	`ëh_addr_is_zîo
(
mask
)) {

692 
	`ds_put_f‹m©
(
s
, "%s=", 
«me
);

693 
	`ëh_f‹m©_masked
(
ëh
, 
mask
, 
s
);

694 
	`ds_put_ch¨
(
s
, ',');

696 
	}
}

699 
	$f‹m©_ù_√tmask
(
ds
 *
s
, c⁄° *
«me
, 
ovs_be32
 
ù
,

700 
ovs_be32
 
√tmask
)

702 i‡(
√tmask
) {

703 
	`ds_put_f‹m©
(
s
, "%s=", 
«me
);

704 
	`ù_f‹m©_masked
(
ù
, 
√tmask
, 
s
);

705 
	`ds_put_ch¨
(
s
, ',');

707 
	}
}

710 
	$f‹m©_ùv6_√tmask
(
ds
 *
s
, c⁄° *
«me
,

711 c⁄° 
ö6_addr
 *
addr
,

712 c⁄° 
ö6_addr
 *
√tmask
)

714 i‡(!
	`ùv6_mask_is_™y
(
√tmask
)) {

715 
	`ds_put_f‹m©
(
s
, "%s=", 
«me
);

716 
	`¥öt_ùv6_masked
(
s
, 
addr
, 
√tmask
);

717 
	`ds_put_ch¨
(
s
, ',');

719 
	}
}

723 
	$f‹m©_be16_masked
(
ds
 *
s
, c⁄° *
«me
,

724 
ovs_be16
 
vÆue
, ovs_be16 
mask
)

726 i‡(
mask
 !
	`ht⁄s
(0)) {

727 
	`ds_put_f‹m©
(
s
, "%s=", 
«me
);

728 i‡(
mask
 =
	`ht⁄s
(
UINT16_MAX
)) {

729 
	`ds_put_f‹m©
(
s
, "%"
PRIu16
, 
	`¡ohs
(
vÆue
));

731 
	`ds_put_f‹m©
(
s
, "0x%"
PRIx16
"/0x%"PRIx16,

732 
	`¡ohs
(
vÆue
),Çtohs(
mask
));

734 
	`ds_put_ch¨
(
s
, ',');

736 
	}
}

739 
	$f‹m©_Êow_tu¬ñ
(
ds
 *
s
, c⁄° 
m©ch
 *match)

741 c⁄° 
Êow_wûdˇrds
 *
wc
 = &
m©ch
->wc;

742 c⁄° 
Êow_äl
 *
äl
 = &
m©ch
->
Êow
.
tu¬ñ
;

744 
wc
->
masks
.
tu¬ñ
.
tun_id
) {

747 
	`CONSTANT_HTONLL
(
UINT64_MAX
):

748 
	`ds_put_f‹m©
(
s
, "tun_id=%#"
PRIx64
",", 
	`¡ohŒ
(
äl
->
tun_id
));

751 
	`ds_put_f‹m©
(
s
, "tun_id=%#"
PRIx64
"/%#"PRIx64",",

752 
	`¡ohŒ
(
äl
->
tun_id
),

753 
	`¡ohŒ
(
wc
->
masks
.
tu¬ñ
.
tun_id
));

756 
	`f‹m©_ù_√tmask
(
s
, "tun_§c", 
äl
->
ù_§c
, 
wc
->
masks
.
tu¬ñ
.ip_src);

757 
	`f‹m©_ù_√tmask
(
s
, "tun_d°", 
äl
->
ù_d°
, 
wc
->
masks
.
tu¬ñ
.ip_dst);

759 i‡(
wc
->
masks
.
tu¬ñ
.
ù_tos
) {

760 
	`ds_put_f‹m©
(
s
, "tun_tos=%"
PRIx8
",", 
äl
->
ù_tos
);

762 i‡(
wc
->
masks
.
tu¬ñ
.
ù_âl
) {

763 
	`ds_put_f‹m©
(
s
, "tun_âl=%"
PRIu8
",", 
äl
->
ù_âl
);

765 i‡(
wc
->
masks
.
tu¬ñ
.
Êags
) {

766 
	`f‹m©_Êags
(
s
, 
Êow_tun_Êag_to_°rög
, 
äl
->
Êags
, '|');

767 
	`ds_put_ch¨
(
s
, ',');

769 
	}
}

774 
	$m©ch_f‹m©
(c⁄° 
m©ch
 *m©ch, 
ds
 *
s
, 
¥i‹ôy
)

776 c⁄° 
Êow_wûdˇrds
 *
wc
 = &
m©ch
->wc;

777 
size_t
 
°¨t_Àn
 = 
s
->
Àngth
;

778 c⁄° 
Êow
 *
f
 = &
m©ch
->flow;

779 
boﬁ
 
skù_ty≥
 = 
Ál£
;

780 
boﬁ
 
skù_¥Ÿo
 = 
Ál£
;

782 
i
;

784 
	`BUILD_ASSERT_DECL
(
FLOW_WC_SEQ
 == 18);

786 i‡(
¥i‹ôy
 !
OFP_DEFAULT_PRIORITY
) {

787 
	`ds_put_f‹m©
(
s
, "¥i‹ôy=%u,", 
¥i‹ôy
);

790 i‡(
wc
->
masks
.
skb_m¨k
) {

791 
	`ds_put_f‹m©
(
s
, "skb_m¨k=%#"
PRIx32
",", 
f
->
skb_m¨k
);

794 i‡(
wc
->
masks
.
skb_¥i‹ôy
) {

795 
	`ds_put_f‹m©
(
s
, "skb_¥i‹ôy=%#"
PRIx32
",", 
f
->
skb_¥i‹ôy
);

798 i‡(
wc
->
masks
.
dl_ty≥
) {

799 
skù_ty≥
 = 
åue
;

800 i‡(
f
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IP
)) {

801 i‡(
wc
->
masks
.
nw_¥Ÿo
) {

802 
skù_¥Ÿo
 = 
åue
;

803 i‡(
f
->
nw_¥Ÿo
 =
IPPROTO_ICMP
) {

804 
	`ds_put_c°r
(
s
, "icmp,");

805 } i‡(
f
->
nw_¥Ÿo
 =
IPPROTO_TCP
) {

806 
	`ds_put_c°r
(
s
, "tcp,");

807 } i‡(
f
->
nw_¥Ÿo
 =
IPPROTO_UDP
) {

808 
	`ds_put_c°r
(
s
, "udp,");

810 
	`ds_put_c°r
(
s
, "ip,");

811 
skù_¥Ÿo
 = 
Ál£
;

814 
	`ds_put_c°r
(
s
, "ip,");

816 } i‡(
f
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IPV6
)) {

817 i‡(
wc
->
masks
.
nw_¥Ÿo
) {

818 
skù_¥Ÿo
 = 
åue
;

819 i‡(
f
->
nw_¥Ÿo
 =
IPPROTO_ICMPV6
) {

820 
	`ds_put_c°r
(
s
, "icmp6,");

821 } i‡(
f
->
nw_¥Ÿo
 =
IPPROTO_TCP
) {

822 
	`ds_put_c°r
(
s
, "tcp6,");

823 } i‡(
f
->
nw_¥Ÿo
 =
IPPROTO_UDP
) {

824 
	`ds_put_c°r
(
s
, "udp6,");

826 
	`ds_put_c°r
(
s
, "ipv6,");

827 
skù_¥Ÿo
 = 
Ál£
;

830 
	`ds_put_c°r
(
s
, "ipv6,");

832 } i‡(
f
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_ARP
)) {

833 
	`ds_put_c°r
(
s
, "arp,");

834 } i‡(
f
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_RARP
)) {

835 
	`ds_put_c°r
(
s
, "rarp,");

837 
skù_ty≥
 = 
Ál£
;

840 
i
 = 0; i < 
FLOW_N_REGS
; i++) {

841 
wc
->
masks
.
ªgs
[
i
]) {

844 
UINT32_MAX
:

845 
	`ds_put_f‹m©
(
s
, "ªg%d=0x%"
PRIx32
",", 
i
, 
f
->
ªgs
[i]);

848 
	`ds_put_f‹m©
(
s
, "ªg%d=0x%"
PRIx32
"/0x%"PRIx32",",

849 
i
, 
f
->
ªgs
[i], 
wc
->
masks
.regs[i]);

854 
	`f‹m©_Êow_tu¬ñ
(
s
, 
m©ch
);

856 
wc
->
masks
.
mëad©a
) {

859 
	`CONSTANT_HTONLL
(
UINT64_MAX
):

860 
	`ds_put_f‹m©
(
s
, "mëad©a=%#"
PRIx64
",", 
	`¡ohŒ
(
f
->
mëad©a
));

863 
	`ds_put_f‹m©
(
s
, "mëad©a=%#"
PRIx64
"/%#"PRIx64",",

864 
	`¡ohŒ
(
f
->
mëad©a
),ÇtohŒ(
wc
->
masks
.metadata));

867 i‡(
wc
->
masks
.
ö_p‹t
) {

868 
	`ds_put_f‹m©
(
s
, "ö_p‹t=%"
PRIu16
",", 
f
->
ö_p‹t
);

870 i‡(
wc
->
masks
.
vœn_tci
) {

871 
ovs_be16
 
vid_mask
 = 
wc
->
masks
.
vœn_tci
 & 
	`ht⁄s
(
VLAN_VID_MASK
);

872 
ovs_be16
 
p˝_mask
 = 
wc
->
masks
.
vœn_tci
 & 
	`ht⁄s
(
VLAN_PCP_MASK
);

873 
ovs_be16
 
cfi
 = 
wc
->
masks
.
vœn_tci
 & 
	`ht⁄s
(
VLAN_CFI
);

875 i‡(
cfi
 && 
f
->
vœn_tci
 & 
	`ht⁄s
(
VLAN_CFI
)

876 && (!
vid_mask
 || vid_mask =
	`ht⁄s
(
VLAN_VID_MASK
))

877 && (!
p˝_mask
 ||Ö˝_mask =
	`ht⁄s
(
VLAN_PCP_MASK
))

878 && (
vid_mask
 || 
p˝_mask
)) {

879 i‡(
vid_mask
) {

880 
	`ds_put_f‹m©
(
s
, "dl_vœn=%"
PRIu16
",",

881 
	`vœn_tci_to_vid
(
f
->
vœn_tci
));

883 i‡(
p˝_mask
) {

884 
	`ds_put_f‹m©
(
s
, "dl_vlan_pcp=%d,",

885 
	`vœn_tci_to_p˝
(
f
->
vœn_tci
));

887 } i‡(
wc
->
masks
.
vœn_tci
 =
	`ht⁄s
(0xffff)) {

888 
	`ds_put_f‹m©
(
s
, "vœn_tci=0x%04"
PRIx16
",", 
	`¡ohs
(
f
->
vœn_tci
));

890 
	`ds_put_f‹m©
(
s
, "vœn_tci=0x%04"
PRIx16
"/0x%04"PRIx16",",

891 
	`¡ohs
(
f
->
vœn_tci
),Çtohs(
wc
->
masks
.vlan_tci));

894 
	`f‹m©_ëh_masked
(
s
, "dl_§c", 
f
->
dl_§c
, 
wc
->
masks
.dl_src);

895 
	`f‹m©_ëh_masked
(
s
, "dl_d°", 
f
->
dl_d°
, 
wc
->
masks
.dl_dst);

896 i‡(!
skù_ty≥
 && 
wc
->
masks
.
dl_ty≥
) {

897 
	`ds_put_f‹m©
(
s
, "dl_ty≥=0x%04"
PRIx16
",", 
	`¡ohs
(
f
->
dl_ty≥
));

899 i‡(
f
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IPV6
)) {

900 
	`f‹m©_ùv6_√tmask
(
s
, "ùv6_§c", &
f
->
ùv6_§c
, &
wc
->
masks
.ipv6_src);

901 
	`f‹m©_ùv6_√tmask
(
s
, "ùv6_d°", &
f
->
ùv6_d°
, &
wc
->
masks
.ipv6_dst);

902 i‡(
wc
->
masks
.
ùv6_œbñ
) {

903 i‡(
wc
->
masks
.
ùv6_œbñ
 =
	`ht⁄l
(
UINT32_MAX
)) {

904 
	`ds_put_f‹m©
(
s
, "ùv6_œbñ=0x%05"
PRIx32
",",

905 
	`¡ohl
(
f
->
ùv6_œbñ
));

907 
	`ds_put_f‹m©
(
s
, "ùv6_œbñ=0x%05"
PRIx32
"/0x%05"PRIx32",",

908 
	`¡ohl
(
f
->
ùv6_œbñ
),

909 
	`¡ohl
(
wc
->
masks
.
ùv6_œbñ
));

912 } i‡(
f
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_ARP
) ||

913 
f
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_RARP
)) {

914 
	`f‹m©_ù_√tmask
(
s
, "¨p_•a", 
f
->
nw_§c
, 
wc
->
masks
.nw_src);

915 
	`f‹m©_ù_√tmask
(
s
, "¨p_ça", 
f
->
nw_d°
, 
wc
->
masks
.nw_dst);

917 
	`f‹m©_ù_√tmask
(
s
, "nw_§c", 
f
->
nw_§c
, 
wc
->
masks
.nw_src);

918 
	`f‹m©_ù_√tmask
(
s
, "nw_d°", 
f
->
nw_d°
, 
wc
->
masks
.nw_dst);

920 i‡(!
skù_¥Ÿo
 && 
wc
->
masks
.
nw_¥Ÿo
) {

921 i‡(
f
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_ARP
) ||

922 
f
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_RARP
)) {

923 
	`ds_put_f‹m©
(
s
, "¨p_›=%"
PRIu8
",", 
f
->
nw_¥Ÿo
);

925 
	`ds_put_f‹m©
(
s
, "nw_¥Ÿo=%"
PRIu8
",", 
f
->
nw_¥Ÿo
);

928 i‡(
f
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_ARP
) ||

929 
f
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_RARP
)) {

930 
	`f‹m©_ëh_masked
(
s
, "¨p_sha", 
f
->
¨p_sha
, 
wc
->
masks
.arp_sha);

931 
	`f‹m©_ëh_masked
(
s
, "¨p_tha", 
f
->
¨p_tha
, 
wc
->
masks
.arp_tha);

933 i‡(
wc
->
masks
.
nw_tos
 & 
IP_DSCP_MASK
) {

934 
	`ds_put_f‹m©
(
s
, "nw_tos=%"
PRIu8
",", 
f
->
nw_tos
 & 
IP_DSCP_MASK
);

936 i‡(
wc
->
masks
.
nw_tos
 & 
IP_ECN_MASK
) {

937 
	`ds_put_f‹m©
(
s
, "nw_e˙=%"
PRIu8
",", 
f
->
nw_tos
 & 
IP_ECN_MASK
);

939 i‡(
wc
->
masks
.
nw_âl
) {

940 
	`ds_put_f‹m©
(
s
, "nw_âl=%"
PRIu8
",", 
f
->
nw_âl
);

942 
wc
->
masks
.
nw_‰ag
) {

943 
FLOW_NW_FRAG_ANY
 | 
FLOW_NW_FRAG_LATER
:

944 
	`ds_put_f‹m©
(
s
, "nw_frag=%s,",

945 
f
->
nw_‰ag
 & 
FLOW_NW_FRAG_ANY


946 ? (
f
->
nw_‰ag
 & 
FLOW_NW_FRAG_LATER
 ? "later" : "first")

947 : (
f
->
nw_‰ag
 & 
FLOW_NW_FRAG_LATER
 ? "<error>" : "no"));

950 
FLOW_NW_FRAG_ANY
:

951 
	`ds_put_f‹m©
(
s
, "nw_frag=%s,",

952 
f
->
nw_‰ag
 & 
FLOW_NW_FRAG_ANY
 ? "yes" : "no");

955 
FLOW_NW_FRAG_LATER
:

956 
	`ds_put_f‹m©
(
s
, "nw_frag=%s,",

957 
f
->
nw_‰ag
 & 
FLOW_NW_FRAG_LATER
 ? "later" : "not_later");

960 i‡(
f
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IP
) &&

961 
f
->
nw_¥Ÿo
 =
IPPROTO_ICMP
) {

962 
	`f‹m©_be16_masked
(
s
, "icmp_ty≥", 
f
->
ç_§c
, 
wc
->
masks
.tp_src);

963 
	`f‹m©_be16_masked
(
s
, "icmp_code", 
f
->
ç_d°
, 
wc
->
masks
.tp_dst);

964 } i‡(
f
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IPV6
) &&

965 
f
->
nw_¥Ÿo
 =
IPPROTO_ICMPV6
) {

966 
	`f‹m©_be16_masked
(
s
, "icmp_ty≥", 
f
->
ç_§c
, 
wc
->
masks
.tp_src);

967 
	`f‹m©_be16_masked
(
s
, "icmp_code", 
f
->
ç_d°
, 
wc
->
masks
.tp_dst);

968 
	`f‹m©_ùv6_√tmask
(
s
, "nd_èrgë", &
f
->
nd_èrgë
,

969 &
wc
->
masks
.
nd_èrgë
);

970 
	`f‹m©_ëh_masked
(
s
, "nd_¶l", 
f
->
¨p_sha
, 
wc
->
masks
.arp_sha);

971 
	`f‹m©_ëh_masked
(
s
, "nd_él", 
f
->
¨p_tha
, 
wc
->
masks
.arp_tha);

973 
	`f‹m©_be16_masked
(
s
, "ç_§c", 
f
->
ç_§c
, 
wc
->
masks
.tp_src);

974 
	`f‹m©_be16_masked
(
s
, "ç_d°", 
f
->
ç_d°
, 
wc
->
masks
.tp_dst);

977 i‡(
s
->
Àngth
 > 
°¨t_Àn
 && 
	`ds_œ°
(s) == ',') {

978 
s
->
Àngth
--;

980 
	}
}

986 
	$m©ch_to_°rög
(c⁄° 
m©ch
 *m©ch, 
¥i‹ôy
)

988 
ds
 
s
 = 
DS_EMPTY_INITIALIZER
;

989 
	`m©ch_f‹m©
(
m©ch
, &
s
, 
¥i‹ôy
);

990  
	`ds_°ól_c°r
(&
s
);

991 
	}
}

994 
	$m©ch_¥öt
(c⁄° 
m©ch
 *match)

996 *
s
 = 
	`m©ch_to_°rög
(
m©ch
, 
OFP_DEFAULT_PRIORITY
);

997 
	`puts
(
s
);

998 
	`‰ì
(
s
);

999 
	}
}

1004 
	$möim©ch_öô
(
möim©ch
 *
d°
, c⁄° 
m©ch
 *
§c
)

1006 
	`möiÊow_öô
(&
d°
->
Êow
, &
§c
->flow);

1007 
	`möimask_öô
(&
d°
->
mask
, &
§c
->
wc
);

1008 
	}
}

1013 
	$möim©ch_˛⁄e
(
möim©ch
 *
d°
, c⁄° möim©ch *
§c
)

1015 
	`möiÊow_˛⁄e
(&
d°
->
Êow
, &
§c
->flow);

1016 
	`möimask_˛⁄e
(&
d°
->
mask
, &
§c
->mask);

1017 
	}
}

1022 
	$möim©ch_de°roy
(
möim©ch
 *
m©ch
)

1024 
	`möiÊow_de°roy
(&
m©ch
->
Êow
);

1025 
	`möimask_de°roy
(&
m©ch
->
mask
);

1026 
	}
}

1030 
	$möim©ch_ex∑nd
(c⁄° 
möim©ch
 *
§c
, 
m©ch
 *
d°
)

1032 
	`möiÊow_ex∑nd
(&
§c
->
Êow
, &
d°
->flow);

1033 
	`möimask_ex∑nd
(&
§c
->
mask
, &
d°
->
wc
);

1034 
	}
}

1037 
boﬁ


1038 
	$möim©ch_equÆ
(c⁄° 
möim©ch
 *
a
, c⁄° möim©ch *
b
)

1040  (
	`möiÊow_equÆ
(&
a
->
Êow
, &
b
->flow)

1041 && 
	`möimask_equÆ
(&
a
->
mask
, &
b
->mask));

1042 
	}
}

1045 
uöt32_t


1046 
	$möim©ch_hash
(c⁄° 
möim©ch
 *
m©ch
, 
uöt32_t
 
basis
)

1048  
	`möiÊow_hash
(&
m©ch
->
Êow
, 
	`möimask_hash
(&m©ch->
mask
, 
basis
));

1049 
	}
}

1054 
	$möim©ch_f‹m©
(c⁄° 
möim©ch
 *
m©ch
, 
ds
 *
s
,

1055 
¥i‹ôy
)

1057 
m©ch
 
megam©ch
;

1059 
	`möim©ch_ex∑nd
(
m©ch
, &
megam©ch
);

1060 
	`m©ch_f‹m©
(&
megam©ch
, 
s
, 
¥i‹ôy
);

1061 
	}
}

1067 
	$möim©ch_to_°rög
(c⁄° 
möim©ch
 *
m©ch
, 
¥i‹ôy
)

1069 
m©ch
 
megam©ch
;

1071 
	`möim©ch_ex∑nd
(
m©ch
, &
megam©ch
);

1072  
	`m©ch_to_°rög
(&
megam©ch
, 
¥i‹ôy
);

1073 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/match.h

17 #i‚de‡
MATCH_H


18 
	#MATCH_H
 1

	)

20 
	~"Êow.h
"

22 
	gds
;

32 
	sm©ch
 {

33 
Êow
 
	mÊow
;

34 
Êow_wûdˇrds
 
	mwc
;

37 
m©ch_öô
(
m©ch
 *,

38 c⁄° 
Êow
 *, c⁄° 
Êow_wûdˇrds
 *);

39 
m©ch_wc_öô
(
m©ch
 *m©ch, c⁄° 
Êow
 *flow);

40 
m©ch_öô_ˇtchÆl
(
m©ch
 *);

41 
m©ch_öô_exa˘
(
m©ch
 *, c⁄° 
Êow
 *);

43 
m©ch_zîo_wûdˇrded_fõlds
(
m©ch
 *);

45 
m©ch_£t_ªg
(
m©ch
 *, 
ªg_idx
, 
uöt32_t
 
vÆue
);

46 
m©ch_£t_ªg_masked
(
m©ch
 *, 
ªg_idx
,

47 
uöt32_t
 
vÆue
, uöt32_à
mask
);

48 
m©ch_£t_mëad©a
(
m©ch
 *, 
ovs_be64
 
mëad©a
);

49 
m©ch_£t_mëad©a_masked
(
m©ch
 *,

50 
ovs_be64
 
mëad©a
, ovs_be64 
mask
);

51 
m©ch_£t_tun_id
(
m©ch
 *, 
ovs_be64
 
tun_id
);

52 
m©ch_£t_tun_id_masked
(
m©ch
 *, 
ovs_be64
 
tun_id
, ovs_be64 
mask
);

53 
m©ch_£t_tun_§c
(
m©ch
 *m©ch, 
ovs_be32
 
§c
);

54 
m©ch_£t_tun_§c_masked
(
m©ch
 *m©ch, 
ovs_be32
 
§c
, ovs_be32 
mask
);

55 
m©ch_£t_tun_d°
(
m©ch
 *m©ch, 
ovs_be32
 
d°
);

56 
m©ch_£t_tun_d°_masked
(
m©ch
 *m©ch, 
ovs_be32
 
d°
, ovs_be32 
mask
);

57 
m©ch_£t_tun_âl
(
m©ch
 *m©ch, 
uöt8_t
 
âl
);

58 
m©ch_£t_tun_âl_masked
(
m©ch
 *m©ch, 
uöt8_t
 
âl
, uöt8_à
mask
);

59 
m©ch_£t_tun_tos
(
m©ch
 *m©ch, 
uöt8_t
 
tos
);

60 
m©ch_£t_tun_tos_masked
(
m©ch
 *m©ch, 
uöt8_t
 
tos
, uöt8_à
mask
);

61 
m©ch_£t_tun_Êags
(
m©ch
 *m©ch, 
uöt16_t
 
Êags
);

62 
m©ch_£t_tun_Êags_masked
(
m©ch
 *m©ch, 
uöt16_t
 
Êags
, uöt16_à
mask
);

63 
m©ch_£t_ö_p‹t
(
m©ch
 *, 
uöt16_t
 
oÂ_p‹t
);

64 
m©ch_£t_skb_m¨k
(
m©ch
 *, 
uöt32_t
 
skb_m¨k
);

65 
m©ch_£t_skb_¥i‹ôy
(
m©ch
 *, 
uöt32_t
 
skb_¥i‹ôy
);

66 
m©ch_£t_dl_ty≥
(
m©ch
 *, 
ovs_be16
);

67 
m©ch_£t_dl_§c
(
m©ch
 *, c⁄° 
uöt8_t
[6]);

68 
m©ch_£t_dl_§c_masked
(
m©ch
 *, c⁄° 
uöt8_t
 
dl_§c
[6],

69 c⁄° 
uöt8_t
 
mask
[6]);

70 
m©ch_£t_dl_d°
(
m©ch
 *, c⁄° 
uöt8_t
[6]);

71 
m©ch_£t_dl_d°_masked
(
m©ch
 *, c⁄° 
uöt8_t
 
dl_d°
[6],

72 c⁄° 
uöt8_t
 
mask
[6]);

73 
m©ch_£t_dl_tci
(
m©ch
 *, 
ovs_be16
 
tci
);

74 
m©ch_£t_dl_tci_masked
(
m©ch
 *, 
ovs_be16
 
tci
, ovs_be16 
mask
);

75 
m©ch_£t_™y_vid
(
m©ch
 *);

76 
m©ch_£t_dl_vœn
(
m©ch
 *, 
ovs_be16
);

77 
m©ch_£t_vœn_vid
(
m©ch
 *, 
ovs_be16
);

78 
m©ch_£t_vœn_vid_masked
(
m©ch
 *, 
ovs_be16
 
vid
, ovs_be16 
mask
);

79 
m©ch_£t_™y_p˝
(
m©ch
 *);

80 
m©ch_£t_dl_vœn_p˝
(
m©ch
 *, 
uöt8_t
);

81 
m©ch_£t_ç_§c
(
m©ch
 *, 
ovs_be16
);

82 
m©ch_£t_ç_§c_masked
(
m©ch
 *, 
ovs_be16
 
p‹t
, ovs_be16 
mask
);

83 
m©ch_£t_ç_d°
(
m©ch
 *, 
ovs_be16
);

84 
m©ch_£t_ç_d°_masked
(
m©ch
 *, 
ovs_be16
 
p‹t
, ovs_be16 
mask
);

85 
m©ch_£t_nw_¥Ÿo
(
m©ch
 *, 
uöt8_t
);

86 
m©ch_£t_nw_§c
(
m©ch
 *, 
ovs_be32
);

87 
m©ch_£t_nw_§c_masked
(
m©ch
 *, 
ovs_be32
 
ù
, ovs_be32 
mask
);

88 
m©ch_£t_nw_d°
(
m©ch
 *, 
ovs_be32
);

89 
m©ch_£t_nw_d°_masked
(
m©ch
 *, 
ovs_be32
 
ù
, ovs_be32 
mask
);

90 
m©ch_£t_nw_ds˝
(
m©ch
 *, 
uöt8_t
);

91 
m©ch_£t_nw_e˙
(
m©ch
 *, 
uöt8_t
);

92 
m©ch_£t_nw_âl
(
m©ch
 *, 
uöt8_t
);

93 
m©ch_£t_nw_‰ag
(
m©ch
 *, 
uöt8_t
 
nw_‰ag
);

94 
m©ch_£t_nw_‰ag_masked
(
m©ch
 *, 
uöt8_t
 
nw_‰ag
, uöt8_à
mask
);

95 
m©ch_£t_icmp_ty≥
(
m©ch
 *, 
uöt8_t
);

96 
m©ch_£t_icmp_code
(
m©ch
 *, 
uöt8_t
);

97 
m©ch_£t_¨p_sha
(
m©ch
 *, c⁄° 
uöt8_t
[6]);

98 
m©ch_£t_¨p_sha_masked
(
m©ch
 *,

99 c⁄° 
uöt8_t
 
¨p_sha
[6],

100 c⁄° 
uöt8_t
 
mask
[6]);

101 
m©ch_£t_¨p_tha
(
m©ch
 *, c⁄° 
uöt8_t
[6]);

102 
m©ch_£t_¨p_tha_masked
(
m©ch
 *,

103 c⁄° 
uöt8_t
 
¨p_tha
[6],

104 c⁄° 
uöt8_t
 
mask
[6]);

105 
m©ch_£t_ùv6_§c
(
m©ch
 *, c⁄° 
ö6_addr
 *);

106 
m©ch_£t_ùv6_§c_masked
(
m©ch
 *, c⁄° 
ö6_addr
 *,

107 c⁄° 
ö6_addr
 *);

108 
m©ch_£t_ùv6_d°
(
m©ch
 *, c⁄° 
ö6_addr
 *);

109 
m©ch_£t_ùv6_d°_masked
(
m©ch
 *, c⁄° 
ö6_addr
 *,

110 c⁄° 
ö6_addr
 *);

111 
m©ch_£t_ùv6_œbñ
(
m©ch
 *, 
ovs_be32
);

112 
m©ch_£t_ùv6_œbñ_masked
(
m©ch
 *, 
ovs_be32
, ovs_be32);

113 
m©ch_£t_nd_èrgë
(
m©ch
 *, c⁄° 
ö6_addr
 *);

114 
m©ch_£t_nd_èrgë_masked
(
m©ch
 *, c⁄° 
ö6_addr
 *,

115 c⁄° 
ö6_addr
 *);

117 
boﬁ
 
m©ch_equÆ
(c⁄° 
m©ch
 *, const match *);

118 
uöt32_t
 
m©ch_hash
(c⁄° 
m©ch
 *, uöt32_à
basis
);

120 
m©ch_f‹m©
(c⁄° 
m©ch
 *, 
ds
 *, 
¥i‹ôy
);

121 *
m©ch_to_°rög
(c⁄° 
m©ch
 *, 
¥i‹ôy
);

122 
m©ch_¥öt
(c⁄° 
m©ch
 *);

135 
	smöim©ch
 {

136 
möiÊow
 
	mÊow
;

137 
möimask
 
	mmask
;

140 
möim©ch_öô
(
möim©ch
 *, c⁄° 
m©ch
 *);

141 
möim©ch_˛⁄e
(
möim©ch
 *, const minimatch *);

142 
möim©ch_de°roy
(
möim©ch
 *);

144 
möim©ch_ex∑nd
(c⁄° 
möim©ch
 *, 
m©ch
 *);

146 
boﬁ
 
möim©ch_equÆ
(c⁄° 
möim©ch
 *
a
, c⁄° möim©ch *
b
);

147 
uöt32_t
 
möim©ch_hash
(c⁄° 
möim©ch
 *, uöt32_à
basis
);

149 
möim©ch_f‹m©
(c⁄° 
möim©ch
 *, 
ds
 *,

150 
¥i‹ôy
);

151 *
möim©ch_to_°rög
(c⁄° 
möim©ch
 *, 
¥i‹ôy
);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/memory.c

17 
	~<c⁄fig.h
>

18 
	~"mem‹y.h
"

19 
	~<°dboﬁ.h
>

20 
	~<sys/time.h
>

21 
	~<sys/ªsour˚.h
>

22 
	~"dy«mic-°rög.h
"

23 
	~"pﬁl-lo›.h
"

24 
	~"sim≠.h
"

25 
	~"timevÆ.h
"

26 
	~"unix˘l.h
"

27 
	~"vlog.h
"

29 
VLOG_DEFINE_THIS_MODULE
(
mem‹y
);

33 
	#MEMORY_CHECK_INTERVAL
 (10 * 1000)

	)

36 
	g√xt_check
;

40 
	gœ°_ªp‹t
;

41 
	gœ°_ªp‹ãd_maxrss
;

44 
boﬁ
 
	gw™t_ªp‹t
;

47 
unix˘l_c⁄n
 **
	gc⁄ns
;

48 
size_t
 
	gn_c⁄ns
;

50 
mem‹y_öô
();

56 
	$mem‹y_run
()

58 
rußge
 
ußge
;

59 
now
;

61 
	`mem‹y_öô
();

64 
now
 = 
	`time_m£c
();

65 i‡(
now
 < 
√xt_check
) {

68 
√xt_check
 = 
now
 + 
MEMORY_CHECK_INTERVAL
;

71 
	`gërußge
(
RUSAGE_SELF
, &
ußge
);

72 i‡(!
œ°_ªp‹ãd_maxrss
) {

73 
	`VLOG_INFO
("%lu kBÖeakÑesident set sizeáfter %.1f seconds",

74 (Ë
ußge
.
ru_maxrss
,

75 (
now
 - 
	`time_boŸ_m£c
()) / 1000.0);

76 } i‡(
ußge
.
ru_maxrss
 >
œ°_ªp‹ãd_maxrss
 * 1.5) {

77 
	`VLOG_INFO
("peakÑesident set size grew %.0f%% inÜast %.1f seconds, "

79 ((Ë
ußge
.
ru_maxrss
 / 
œ°_ªp‹ãd_maxrss
 - 1) * 100,

80 (
now
 - 
œ°_ªp‹t
) / 1000.0,

81 
œ°_ªp‹ãd_maxrss
, (Ë
ußge
.
ru_maxrss
);

87 
w™t_ªp‹t
 = 
åue
;

88 
œ°_ªp‹t
 = 
now
;

89 
œ°_ªp‹ãd_maxrss
 = 
ußge
.
ru_maxrss
;

90 
	}
}

94 
	$mem‹y_waô
()

96 i‡(
	`mem‹y_should_ªp‹t
()) {

97 
	`pﬁl_immedüã_wake
();

99 
	}
}

103 
boﬁ


104 
	$mem‹y_should_ªp‹t
()

106  
w™t_ªp‹t
 || 
n_c⁄ns
 > 0;

107 
	}
}

110 
	$compo£_ªp‹t
(c⁄° 
sim≠
 *
ußge
, 
ds
 *
s
)

112 c⁄° 
sim≠_node
 **
nodes
 = 
	`sim≠_s‹t
(
ußge
);

113 
size_t
 
n
 = 
	`sim≠_cou¡
(
ußge
);

114 
size_t
 
i
;

116 
i
 = 0; i < 
n
; i++) {

117 c⁄° 
sim≠_node
 *
node
 = 
nodes
[
i
];

119 
	`ds_put_f‹m©
(
s
, "%s:%u ", 
node
->
«me
,Çode->
d©a
);

121 
	`ds_chomp
(
s
, ' ');

122 
	`‰ì
(
nodes
);

123 
	}
}

132 
	$mem‹y_ªp‹t
(c⁄° 
sim≠
 *
ußge
)

134 
ds
 
s
;

135 
size_t
 
i
;

137 
	`ds_öô
(&
s
);

138 
	`compo£_ªp‹t
(
ußge
, &
s
);

140 i‡(
w™t_ªp‹t
) {

141 
	`VLOG_INFO
("%s", 
	`ds_c°r
(&
s
));

142 
w™t_ªp‹t
 = 
Ál£
;

144 i‡(
n_c⁄ns
) {

145 
i
 = 0; i < 
n_c⁄ns
; i++) {

146 
	`unix˘l_comm™d_ª∂y
(
c⁄ns
[
i
], 
	`ds_c°r
(&
s
));

148 
	`‰ì
(
c⁄ns
);

149 
c⁄ns
 = 
NULL
;

150 
n_c⁄ns
 = 0;

153 
	`ds_de°roy
(&
s
);

154 
	}
}

157 
	$mem‹y_unix˘l_show
(
unix˘l_c⁄n
 *
c⁄n
, 
¨gc
 
OVS_UNUSED
,

158 c⁄° *
¨gv
[] 
OVS_UNUSED
, *
aux
 OVS_UNUSED)

160 
c⁄ns
 = 
	`xªÆloc
(c⁄ns, (
n_c⁄ns
 + 1) *  *conns);

161 
c⁄ns
[
n_c⁄ns
++] = 
c⁄n
;

162 
	}
}

165 
	$mem‹y_öô
()

167 
boﬁ
 
öôed
 = 
Ál£
;

169 i‡(!
öôed
) {

170 
öôed
 = 
åue
;

171 
	`unix˘l_comm™d_ªgi°î
("memory/show", "", 0, 0,

172 
mem‹y_unix˘l_show
, 
NULL
);

174 
√xt_check
 = 
	`time_boŸ_m£c
(Ë+ 
MEMORY_CHECK_INTERVAL
;

176 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/memory.h

17 #i‚de‡
MEMORY_H


18 
	#MEMORY_H
 1

	)

50 
	~<°dboﬁ.h
>

52 
	gsim≠
;

54 
mem‹y_run
();

55 
mem‹y_waô
();

57 
boﬁ
 
mem‹y_should_ªp‹t
();

58 
mem‹y_ªp‹t
(c⁄° 
sim≠
 *
ußge
);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/meta-flow.c

17 
	~<c⁄fig.h
>

19 
	~"mëa-Êow.h
"

21 
	~<as£π.h
>

22 
	~<î∫o.h
>

23 
	~<limôs.h
>

24 
	~<√töë/icmp6.h
>

25 
	~<√töë/ù6.h
>

27 
	~"˛assifõr.h
"

28 
	~"dy«mic-°rög.h
"

29 
	~"oÂ-îr‹s.h
"

30 
	~"oÂ-utû.h
"

31 
	~"∑ckës.h
"

32 
	~"øndom.h
"

33 
	~"shash.h
"

34 
	~"sockë-utû.h
"

35 
	~"u«lig√d.h
"

36 
	~"vlog.h
"

38 
VLOG_DEFINE_THIS_MODULE
(
mëa_Êow
);

40 
	#MF_FIELD_SIZES
(
MEMBER
) \

41  ((
mf_vÆue
 *)0)->
MEMBER
, \

42 8 *  ((
mf_vÆue
 *)0)->
MEMBER


	)

44 c⁄° 
mf_fõld
 
	gmf_fõlds
[
MFF_N_IDS
] = {

50 
MFF_TUN_ID
, "tun_id", 
NULL
,

51 
MF_FIELD_SIZES
(
be64
),

52 
MFM_FULLY
,

53 
MFS_HEXADECIMAL
,

54 
MFP_NONE
,

55 
åue
,

56 
NXM_NX_TUN_ID
, "NXM_NX_TUN_ID",

57 
NXM_NX_TUN_ID
, "NXM_NX_TUN_ID",

59 
MFF_TUN_SRC
, "tun_§c", 
NULL
,

60 
MF_FIELD_SIZES
(
be32
),

61 
MFM_NONE
,

62 
MFS_IPV4
,

63 
MFP_NONE
,

64 
Ál£
,

65 0, 
NULL
,

66 0, 
NULL
,

68 
MFF_TUN_DST
, "tun_d°", 
NULL
,

69 
MF_FIELD_SIZES
(
be32
),

70 
MFM_NONE
,

71 
MFS_IPV4
,

72 
MFP_NONE
,

73 
Ál£
,

74 0, 
NULL
,

75 0, 
NULL
,

77 
MFF_TUN_FLAGS
, "tun_Êags", 
NULL
,

78 
MF_FIELD_SIZES
(
be16
),

79 
MFM_NONE
,

80 
MFS_TNL_FLAGS
,

81 
MFP_NONE
,

82 
Ál£
,

83 0, 
NULL
,

84 0, 
NULL
,

86 
MFF_TUN_TOS
, "tun_tos", 
NULL
,

87 
MF_FIELD_SIZES
(
u8
),

88 
MFM_NONE
,

89 
MFS_DECIMAL
,

90 
MFP_NONE
,

91 
Ál£
,

92 0, 
NULL
,

93 0, 
NULL
,

95 
MFF_TUN_TTL
, "tun_âl", 
NULL
,

96 
MF_FIELD_SIZES
(
u8
),

97 
MFM_NONE
,

98 
MFS_DECIMAL
,

99 
MFP_NONE
,

100 
Ál£
,

101 0, 
NULL
,

102 0, 
NULL
,

104 
MFF_METADATA
, "mëad©a", 
NULL
,

105 
MF_FIELD_SIZES
(
be64
),

106 
MFM_FULLY
,

107 
MFS_HEXADECIMAL
,

108 
MFP_NONE
,

109 
åue
,

110 
OXM_OF_METADATA
, "OXM_OF_METADATA",

111 
OXM_OF_METADATA
, "OXM_OF_METADATA",

113 
MFF_IN_PORT
, "ö_p‹t", 
NULL
,

114 
MF_FIELD_SIZES
(
be16
),

115 
MFM_NONE
,

116 
MFS_OFP_PORT
,

117 
MFP_NONE
,

118 
Ál£
,

119 
NXM_OF_IN_PORT
, "NXM_OF_IN_PORT",

120 
OXM_OF_IN_PORT
, "OXM_OF_IN_PORT",

122 
MFF_SKB_PRIORITY
, "skb_¥i‹ôy", 
NULL
,

123 
MF_FIELD_SIZES
(
be32
),

124 
MFM_NONE
,

125 
MFS_HEXADECIMAL
,

126 
MFP_NONE
,

127 
Ál£
,

128 0, 
NULL
,

129 0, 
NULL
,

131 
MFF_SKB_MARK
, "skb_m¨k", 
NULL
,

132 
MF_FIELD_SIZES
(
be32
),

133 
MFM_NONE
,

134 
MFS_HEXADECIMAL
,

135 
MFP_NONE
,

136 
Ál£
,

137 0, 
NULL
,

138 0, 
NULL
,

141 
	#REGISTER
(
IDX
) \

143 
MFF_REG
##
IDX
, "ªg" #IDX, 
NULL
, \

144 
	`MF_FIELD_SIZES
(
be32
), \

145 
MFM_FULLY
, \

146 
MFS_HEXADECIMAL
, \

147 
MFP_NONE
, \

148 
åue
, \

149 
	`NXM_NX_REG
(
IDX
), "NXM_NX_REG" #IDX, \

150 
	`NXM_NX_REG
(
IDX
), "NXM_NX_REG" #IDX, \

151 }

	)

152 #i‡
FLOW_N_REGS
 > 0

153 
REGISTER
(0),

155 #i‡
FLOW_N_REGS
 > 1

156 
REGISTER
(1),

158 #i‡
FLOW_N_REGS
 > 2

159 
REGISTER
(2),

161 #i‡
FLOW_N_REGS
 > 3

162 
REGISTER
(3),

164 #i‡
FLOW_N_REGS
 > 4

165 
REGISTER
(4),

167 #i‡
FLOW_N_REGS
 > 5

168 
REGISTER
(5),

170 #i‡
FLOW_N_REGS
 > 6

171 
REGISTER
(6),

173 #i‡
FLOW_N_REGS
 > 7

174 
REGISTER
(7),

176 #i‡
FLOW_N_REGS
 > 8

185 
MFF_ETH_SRC
, "eth_src", "dl_src",

186 
MF_FIELD_SIZES
(
mac
),

187 
MFM_FULLY
,

188 
MFS_ETHERNET
,

189 
MFP_NONE
,

190 
åue
,

191 
NXM_OF_ETH_SRC
, "NXM_OF_ETH_SRC",

192 
OXM_OF_ETH_SRC
, "OXM_OF_ETH_SRC",

194 
MFF_ETH_DST
, "eth_dst", "dl_dst",

195 
MF_FIELD_SIZES
(
mac
),

196 
MFM_FULLY
,

197 
MFS_ETHERNET
,

198 
MFP_NONE
,

199 
åue
,

200 
NXM_OF_ETH_DST
, "NXM_OF_ETH_DST",

201 
OXM_OF_ETH_DST
, "OXM_OF_ETH_DST",

203 
MFF_ETH_TYPE
, "eth_type", "dl_type",

204 
MF_FIELD_SIZES
(
be16
),

205 
MFM_NONE
,

206 
MFS_HEXADECIMAL
,

207 
MFP_NONE
,

208 
Ál£
,

209 
NXM_OF_ETH_TYPE
, "NXM_OF_ETH_TYPE",

210 
OXM_OF_ETH_TYPE
, "OXM_OF_ETH_TYPE",

214 
MFF_VLAN_TCI
, "vœn_tci", 
NULL
,

215 
MF_FIELD_SIZES
(
be16
),

216 
MFM_FULLY
,

217 
MFS_HEXADECIMAL
,

218 
MFP_NONE
,

219 
åue
,

220 
NXM_OF_VLAN_TCI
, "NXM_OF_VLAN_TCI",

221 
NXM_OF_VLAN_TCI
, "NXM_OF_VLAN_TCI",

223 
MFF_DL_VLAN
, "dl_vœn", 
NULL
,

224 (
ovs_be16
), 12,

225 
MFM_NONE
,

226 
MFS_DECIMAL
,

227 
MFP_NONE
,

228 
åue
,

229 0, 
NULL
,

230 0, 
NULL
,

232 
MFF_VLAN_VID
, "vœn_vid", 
NULL
,

233 (
ovs_be16
), 12,

234 
MFM_FULLY
,

235 
MFS_DECIMAL
,

236 
MFP_NONE
,

237 
åue
,

238 
OXM_OF_VLAN_VID
, "OXM_OF_VLAN_VID",

239 
OXM_OF_VLAN_VID
, "OXM_OF_VLAN_VID",

241 
MFF_DL_VLAN_PCP
, "dl_vœn_p˝", 
NULL
,

243 
MFM_NONE
,

244 
MFS_DECIMAL
,

245 
MFP_NONE
,

246 
åue
,

247 0, 
NULL
,

248 0, 
NULL
,

250 
MFF_VLAN_PCP
, "vœn_p˝", 
NULL
,

252 
MFM_NONE
,

253 
MFS_DECIMAL
,

254 
MFP_VLAN_VID
,

255 
åue
,

256 
OXM_OF_VLAN_PCP
, "OXM_OF_VLAN_PCP",

257 
OXM_OF_VLAN_PCP
, "OXM_OF_VLAN_PCP",

265 
MFF_IPV4_SRC
, "ip_src", "nw_src",

266 
MF_FIELD_SIZES
(
be32
),

267 
MFM_FULLY
,

268 
MFS_IPV4
,

269 
MFP_IPV4
,

270 
åue
,

271 
NXM_OF_IP_SRC
, "NXM_OF_IP_SRC",

272 
OXM_OF_IPV4_SRC
, "OXM_OF_IPV4_SRC",

274 
MFF_IPV4_DST
, "ip_dst", "nw_dst",

275 
MF_FIELD_SIZES
(
be32
),

276 
MFM_FULLY
,

277 
MFS_IPV4
,

278 
MFP_IPV4
,

279 
åue
,

280 
NXM_OF_IP_DST
, "NXM_OF_IP_DST",

281 
OXM_OF_IPV4_DST
, "OXM_OF_IPV4_DST",

285 
MFF_IPV6_SRC
, "ùv6_§c", 
NULL
,

286 
MF_FIELD_SIZES
(
ùv6
),

287 
MFM_FULLY
,

288 
MFS_IPV6
,

289 
MFP_IPV6
,

290 
åue
,

291 
NXM_NX_IPV6_SRC
, "NXM_NX_IPV6_SRC",

292 
OXM_OF_IPV6_SRC
, "OXM_OF_IPV6_SRC",

294 
MFF_IPV6_DST
, "ùv6_d°", 
NULL
,

295 
MF_FIELD_SIZES
(
ùv6
),

296 
MFM_FULLY
,

297 
MFS_IPV6
,

298 
MFP_IPV6
,

299 
åue
,

300 
NXM_NX_IPV6_DST
, "NXM_NX_IPV6_DST",

301 
OXM_OF_IPV6_DST
, "OXM_OF_IPV6_DST",

304 
MFF_IPV6_LABEL
, "ùv6_œbñ", 
NULL
,

306 
MFM_FULLY
,

307 
MFS_HEXADECIMAL
,

308 
MFP_IPV6
,

309 
Ál£
,

310 
NXM_NX_IPV6_LABEL
, "NXM_NX_IPV6_LABEL",

311 
OXM_OF_IPV6_FLABEL
, "OXM_OF_IPV6_FLABEL",

315 
MFF_IP_PROTO
, "nw_¥Ÿo", 
NULL
,

316 
MF_FIELD_SIZES
(
u8
),

317 
MFM_NONE
,

318 
MFS_DECIMAL
,

319 
MFP_IP_ANY
,

320 
Ál£
,

321 
NXM_OF_IP_PROTO
, "NXM_OF_IP_PROTO",

322 
OXM_OF_IP_PROTO
, "OXM_OF_IP_PROTO",

324 
MFF_IP_DSCP
, "nw_tos", 
NULL
,

325 
MF_FIELD_SIZES
(
u8
),

326 
MFM_NONE
,

327 
MFS_DECIMAL
,

328 
MFP_IP_ANY
,

329 
åue
,

330 
NXM_OF_IP_TOS
, "NXM_OF_IP_TOS",

331 
OXM_OF_IP_DSCP
, "OXM_OF_IP_DSCP",

333 
MFF_IP_ECN
, "nw_e˙", 
NULL
,

335 
MFM_NONE
,

336 
MFS_DECIMAL
,

337 
MFP_IP_ANY
,

338 
åue
,

339 
NXM_NX_IP_ECN
, "NXM_NX_IP_ECN",

340 
OXM_OF_IP_ECN
, "OXM_OF_IP_ECN",

342 
MFF_IP_TTL
, "nw_âl", 
NULL
,

343 
MF_FIELD_SIZES
(
u8
),

344 
MFM_NONE
,

345 
MFS_DECIMAL
,

346 
MFP_IP_ANY
,

347 
åue
,

348 
NXM_NX_IP_TTL
, "NXM_NX_IP_TTL",

349 
NXM_NX_IP_TTL
, "NXM_NX_IP_TTL",

351 
MFF_IP_FRAG
, "ù_‰ag", 
NULL
,

353 
MFM_FULLY
,

354 
MFS_FRAG
,

355 
MFP_IP_ANY
,

356 
Ál£
,

357 
NXM_NX_IP_FRAG
, "NXM_NX_IP_FRAG",

358 
NXM_NX_IP_FRAG
, "NXM_NX_IP_FRAG",

362 
MFF_ARP_OP
, "¨p_›", 
NULL
,

363 
MF_FIELD_SIZES
(
be16
),

364 
MFM_NONE
,

365 
MFS_DECIMAL
,

366 
MFP_ARP
,

367 
Ál£
,

368 
NXM_OF_ARP_OP
, "NXM_OF_ARP_OP",

369 
OXM_OF_ARP_OP
, "OXM_OF_ARP_OP",

371 
MFF_ARP_SPA
, "¨p_•a", 
NULL
,

372 
MF_FIELD_SIZES
(
be32
),

373 
MFM_FULLY
,

374 
MFS_IPV4
,

375 
MFP_ARP
,

376 
Ál£
,

377 
NXM_OF_ARP_SPA
, "NXM_OF_ARP_SPA",

378 
OXM_OF_ARP_SPA
, "OXM_OF_ARP_SPA",

380 
MFF_ARP_TPA
, "¨p_ça", 
NULL
,

381 
MF_FIELD_SIZES
(
be32
),

382 
MFM_FULLY
,

383 
MFS_IPV4
,

384 
MFP_ARP
,

385 
Ál£
,

386 
NXM_OF_ARP_TPA
, "NXM_OF_ARP_TPA",

387 
OXM_OF_ARP_TPA
, "OXM_OF_ARP_TPA",

389 
MFF_ARP_SHA
, "¨p_sha", 
NULL
,

390 
MF_FIELD_SIZES
(
mac
),

391 
MFM_FULLY
,

392 
MFS_ETHERNET
,

393 
MFP_ARP
,

394 
Ál£
,

395 
NXM_NX_ARP_SHA
, "NXM_NX_ARP_SHA",

396 
OXM_OF_ARP_SHA
, "OXM_OF_ARP_SHA",

398 
MFF_ARP_THA
, "¨p_tha", 
NULL
,

399 
MF_FIELD_SIZES
(
mac
),

400 
MFM_FULLY
,

401 
MFS_ETHERNET
,

402 
MFP_ARP
,

403 
Ál£
,

404 
NXM_NX_ARP_THA
, "NXM_NX_ARP_THA",

405 
OXM_OF_ARP_THA
, "OXM_OF_ARP_THA",

413 
MFF_TCP_SRC
, "tcp_src", "tp_src",

414 
MF_FIELD_SIZES
(
be16
),

415 
MFM_FULLY
,

416 
MFS_DECIMAL
,

417 
MFP_TCP
,

418 
åue
,

419 
NXM_OF_TCP_SRC
, "NXM_OF_TCP_SRC",

420 
OXM_OF_TCP_SRC
, "OXM_OF_TCP_SRC",

422 
MFF_TCP_DST
, "tcp_dst", "tp_dst",

423 
MF_FIELD_SIZES
(
be16
),

424 
MFM_FULLY
,

425 
MFS_DECIMAL
,

426 
MFP_TCP
,

427 
åue
,

428 
NXM_OF_TCP_DST
, "NXM_OF_TCP_DST",

429 
OXM_OF_TCP_DST
, "OXM_OF_TCP_DST",

433 
MFF_UDP_SRC
, "udp_§c", 
NULL
,

434 
MF_FIELD_SIZES
(
be16
),

435 
MFM_FULLY
,

436 
MFS_DECIMAL
,

437 
MFP_UDP
,

438 
åue
,

439 
NXM_OF_UDP_SRC
, "NXM_OF_UDP_SRC",

440 
OXM_OF_UDP_SRC
, "OXM_OF_UDP_SRC",

442 
MFF_UDP_DST
, "udp_d°", 
NULL
,

443 
MF_FIELD_SIZES
(
be16
),

444 
MFM_FULLY
,

445 
MFS_DECIMAL
,

446 
MFP_UDP
,

447 
åue
,

448 
NXM_OF_UDP_DST
, "NXM_OF_UDP_DST",

449 
OXM_OF_UDP_DST
, "OXM_OF_UDP_DST",

453 
MFF_ICMPV4_TYPE
, "icmp_ty≥", 
NULL
,

454 
MF_FIELD_SIZES
(
u8
),

455 
MFM_NONE
,

456 
MFS_DECIMAL
,

457 
MFP_ICMPV4
,

458 
Ál£
,

459 
NXM_OF_ICMP_TYPE
, "NXM_OF_ICMP_TYPE",

460 
OXM_OF_ICMPV4_TYPE
, "OXM_OF_ICMPV4_TYPE",

462 
MFF_ICMPV4_CODE
, "icmp_code", 
NULL
,

463 
MF_FIELD_SIZES
(
u8
),

464 
MFM_NONE
,

465 
MFS_DECIMAL
,

466 
MFP_ICMPV4
,

467 
Ál£
,

468 
NXM_OF_ICMP_CODE
, "NXM_OF_ICMP_CODE",

469 
OXM_OF_ICMPV4_CODE
, "OXM_OF_ICMPV4_CODE",

473 
MFF_ICMPV6_TYPE
, "icmpv6_ty≥", 
NULL
,

474 
MF_FIELD_SIZES
(
u8
),

475 
MFM_NONE
,

476 
MFS_DECIMAL
,

477 
MFP_ICMPV6
,

478 
Ál£
,

479 
NXM_NX_ICMPV6_TYPE
, "NXM_NX_ICMPV6_TYPE",

480 
OXM_OF_ICMPV6_TYPE
, "OXM_OF_ICMPV6_TYPE",

482 
MFF_ICMPV6_CODE
, "icmpv6_code", 
NULL
,

483 
MF_FIELD_SIZES
(
u8
),

484 
MFM_NONE
,

485 
MFS_DECIMAL
,

486 
MFP_ICMPV6
,

487 
Ál£
,

488 
NXM_NX_ICMPV6_CODE
, "NXM_NX_ICMPV6_CODE",

489 
OXM_OF_ICMPV6_CODE
, "OXM_OF_ICMPV6_CODE",

497 
MFF_ND_TARGET
, "nd_èrgë", 
NULL
,

498 
MF_FIELD_SIZES
(
ùv6
),

499 
MFM_FULLY
,

500 
MFS_IPV6
,

501 
MFP_ND
,

502 
Ál£
,

503 
NXM_NX_ND_TARGET
, "NXM_NX_ND_TARGET",

504 
OXM_OF_IPV6_ND_TARGET
, "OXM_OF_IPV6_ND_TARGET",

506 
MFF_ND_SLL
, "nd_¶l", 
NULL
,

507 
MF_FIELD_SIZES
(
mac
),

508 
MFM_FULLY
,

509 
MFS_ETHERNET
,

510 
MFP_ND_SOLICIT
,

511 
Ál£
,

512 
NXM_NX_ND_SLL
, "NXM_NX_ND_SLL",

513 
OXM_OF_IPV6_ND_SLL
, "OXM_OF_IPV6_ND_SLL",

515 
MFF_ND_TLL
, "nd_él", 
NULL
,

516 
MF_FIELD_SIZES
(
mac
),

517 
MFM_FULLY
,

518 
MFS_ETHERNET
,

519 
MFP_ND_ADVERT
,

520 
Ál£
,

521 
NXM_NX_ND_TLL
, "NXM_NX_ND_TLL",

522 
OXM_OF_IPV6_ND_TLL
, "OXM_OF_IPV6_ND_TLL",

527 
	snxm_fõld
 {

528 
hm≠_node
 
	mhm≠_node
;

529 
uöt32_t
 
	mhódî
;

530 c⁄° 
mf_fõld
 *
	mmf
;

534 
hm≠
 
	gÆl_fõlds
 = 
HMAP_INITIALIZER
(&
Æl_fõlds
);

538 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(1, 5);

540 c⁄° 
mf_fõld
 *
mf_‰om_nxm_hódî__
(
uöt32_t
 
hódî
);

543 c⁄° 
mf_fõld
 *

544 
	$mf_‰om_id
(
mf_fõld_id
 
id
)

546 
	`as£π
((Ë
id
 < 
MFF_N_IDS
);

547  &
mf_fõlds
[
id
];

548 
	}
}

552 c⁄° 
mf_fõld
 *

553 
	$mf_‰om_«me
(c⁄° *
«me
)

555 
shash
 
mf_by_«me
 = 
	`SHASH_INITIALIZER
(&mf_by_name);

557 i‡(
	`shash_is_em±y
(&
mf_by_«me
)) {

558 c⁄° 
mf_fõld
 *
mf
;

560 
mf
 = 
mf_fõlds
; m‡< &mf_fõlds[
MFF_N_IDS
]; mf++) {

561 
	`shash_add_⁄˚
(&
mf_by_«me
, 
mf
->
«me
, mf);

562 i‡(
mf
->
exåa_«me
) {

563 
	`shash_add_⁄˚
(&
mf_by_«me
, 
mf
->
exåa_«me
, mf);

568  
	`shash_föd_d©a
(&
mf_by_«me
, 
«me
);

569 
	}
}

572 
	$add_nxm_fõld
(
uöt32_t
 
hódî
, c⁄° 
mf_fõld
 *
mf
)

574 
nxm_fõld
 *
f
;

576 
f
 = 
	`xmÆloc
( *f);

577 
	`hm≠_ö£π
(&
Æl_fõlds
, &
f
->
hm≠_node
, 
	`hash_öt
(
hódî
, 0));

578 
f
->
hódî
 = header;

579 
f
->
mf
 = mf;

580 
	}
}

583 
	$nxm_öô_add_fõld
(c⁄° 
mf_fõld
 *
mf
, 
uöt32_t
 
hódî
)

585 i‡(
hódî
) {

586 
	`as£π
(!
	`mf_‰om_nxm_hódî__
(
hódî
));

587 
	`add_nxm_fõld
(
hódî
, 
mf
);

588 i‡(
mf
->
maskabÀ
 !
MFM_NONE
) {

589 
	`add_nxm_fõld
(
	`NXM_MAKE_WILD_HEADER
(
hódî
), 
mf
);

592 
	}
}

595 
	$nxm_öô
()

597 c⁄° 
mf_fõld
 *
mf
;

599 
mf
 = 
mf_fõlds
; m‡< &mf_fõlds[
MFF_N_IDS
]; mf++) {

600 
	`nxm_öô_add_fõld
(
mf
, mf->
nxm_hódî
);

601 i‡(
mf
->
oxm_hódî
 !mf->
nxm_hódî
) {

602 
	`nxm_öô_add_fõld
(
mf
, mf->
oxm_hódî
);

605 
	}
}

607 c⁄° 
mf_fõld
 *

608 
	$mf_‰om_nxm_hódî
(
uöt32_t
 
hódî
)

610 i‡(
	`hm≠_is_em±y
(&
Æl_fõlds
)) {

611 
	`nxm_öô
();

613  
	`mf_‰om_nxm_hódî__
(
hódî
);

614 
	}
}

616 c⁄° 
mf_fõld
 *

617 
	$mf_‰om_nxm_hódî__
(
uöt32_t
 
hódî
)

619 c⁄° 
nxm_fõld
 *
f
;

621 
	`HMAP_FOR_EACH_IN_BUCKET
 (
f
, 
hm≠_node
, 
	`hash_öt
(
hódî
, 0), &
Æl_fõlds
) {

622 i‡(
f
->
hódî
 == header) {

623  
f
->
mf
;

627  
NULL
;

628 
	}
}

635 
boﬁ


636 
	$mf_is_Æl_wûd
(c⁄° 
mf_fõld
 *
mf
, c⁄° 
Êow_wûdˇrds
 *
wc
)

638 
mf
->
id
) {

639 
MFF_TUN_ID
:

640 
MFF_TUN_SRC
:

641 
MFF_TUN_DST
:

642 
MFF_TUN_TOS
:

643 
MFF_TUN_TTL
:

644 
MFF_TUN_FLAGS
:

645  !
wc
->
masks
.
tu¬ñ
.
tun_id
;

646 
MFF_METADATA
:

647  !
wc
->
masks
.
mëad©a
;

648 
MFF_IN_PORT
:

649  !
wc
->
masks
.
ö_p‹t
;

650 
MFF_SKB_PRIORITY
:

651  !
wc
->
masks
.
skb_¥i‹ôy
;

652 
MFF_SKB_MARK
:

653  !
wc
->
masks
.
skb_m¨k
;

654 
CASE_MFF_REGS
:

655  !
wc
->
masks
.
ªgs
[
mf
->
id
 - 
MFF_REG0
];

657 
MFF_ETH_SRC
:

658  
	`ëh_addr_is_zîo
(
wc
->
masks
.
dl_§c
);

659 
MFF_ETH_DST
:

660  
	`ëh_addr_is_zîo
(
wc
->
masks
.
dl_d°
);

661 
MFF_ETH_TYPE
:

662  !
wc
->
masks
.
dl_ty≥
;

664 
MFF_ARP_SHA
:

665 
MFF_ND_SLL
:

666  
	`ëh_addr_is_zîo
(
wc
->
masks
.
¨p_sha
);

668 
MFF_ARP_THA
:

669 
MFF_ND_TLL
:

670  
	`ëh_addr_is_zîo
(
wc
->
masks
.
¨p_tha
);

672 
MFF_VLAN_TCI
:

673  !
wc
->
masks
.
vœn_tci
;

674 
MFF_DL_VLAN
:

675  !(
wc
->
masks
.
vœn_tci
 & 
	`ht⁄s
(
VLAN_VID_MASK
));

676 
MFF_VLAN_VID
:

677  !(
wc
->
masks
.
vœn_tci
 & 
	`ht⁄s
(
VLAN_VID_MASK
 | 
VLAN_CFI
));

678 
MFF_DL_VLAN_PCP
:

679 
MFF_VLAN_PCP
:

680  !(
wc
->
masks
.
vœn_tci
 & 
	`ht⁄s
(
VLAN_PCP_MASK
));

682 
MFF_IPV4_SRC
:

683  !
wc
->
masks
.
nw_§c
;

684 
MFF_IPV4_DST
:

685  !
wc
->
masks
.
nw_d°
;

687 
MFF_IPV6_SRC
:

688  
	`ùv6_mask_is_™y
(&
wc
->
masks
.
ùv6_§c
);

689 
MFF_IPV6_DST
:

690  
	`ùv6_mask_is_™y
(&
wc
->
masks
.
ùv6_d°
);

692 
MFF_IPV6_LABEL
:

693  !
wc
->
masks
.
ùv6_œbñ
;

695 
MFF_IP_PROTO
:

696  !
wc
->
masks
.
nw_¥Ÿo
;

697 
MFF_IP_DSCP
:

698  !(
wc
->
masks
.
nw_tos
 & 
IP_DSCP_MASK
);

699 
MFF_IP_ECN
:

700  !(
wc
->
masks
.
nw_tos
 & 
IP_ECN_MASK
);

701 
MFF_IP_TTL
:

702  !
wc
->
masks
.
nw_âl
;

704 
MFF_ND_TARGET
:

705  
	`ùv6_mask_is_™y
(&
wc
->
masks
.
nd_èrgë
);

707 
MFF_IP_FRAG
:

708  !(
wc
->
masks
.
nw_‰ag
 & 
FLOW_NW_FRAG_MASK
);

710 
MFF_ARP_OP
:

711  !
wc
->
masks
.
nw_¥Ÿo
;

712 
MFF_ARP_SPA
:

713  !
wc
->
masks
.
nw_§c
;

714 
MFF_ARP_TPA
:

715  !
wc
->
masks
.
nw_d°
;

717 
MFF_TCP_SRC
:

718 
MFF_UDP_SRC
:

719 
MFF_ICMPV4_TYPE
:

720 
MFF_ICMPV6_TYPE
:

721  !
wc
->
masks
.
ç_§c
;

722 
MFF_TCP_DST
:

723 
MFF_UDP_DST
:

724 
MFF_ICMPV4_CODE
:

725 
MFF_ICMPV6_CODE
:

726  !
wc
->
masks
.
ç_d°
;

728 
MFF_N_IDS
:

730 
	`NOT_REACHED
();

732 
	}
}

741 
	$mf_gë_mask
(c⁄° 
mf_fõld
 *
mf
, c⁄° 
Êow_wûdˇrds
 *
wc
,

742 
mf_vÆue
 *
mask
)

744 
	`mf_gë_vÆue
(
mf
, &
wc
->
masks
, 
mask
);

745 
	}
}

749 
boﬁ


750 
	$mf_is_mask_vÆid
(c⁄° 
mf_fõld
 *
mf
, c⁄° 
mf_vÆue
 *
mask
)

752 
mf
->
maskabÀ
) {

753 
MFM_NONE
:

754  (
	`is_Æl_zîos
((c⁄° 
uöt8_t
 *Ë
mask
, 
mf
->
n_byãs
) ||

755 
	`is_Æl_⁄es
((c⁄° 
uöt8_t
 *Ë
mask
, 
mf
->
n_byãs
));

757 
MFM_FULLY
:

758  
åue
;

761 
	`NOT_REACHED
();

762 
	}
}

764 
boﬁ


765 
	$is_ù_™y
(c⁄° 
Êow
 *flow)

767  (
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IP
) ||

768 
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IPV6
));

769 
	}
}

771 
boﬁ


772 
	$is_icmpv4
(c⁄° 
Êow
 *flow)

774  (
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IP
)

775 && 
Êow
->
nw_¥Ÿo
 =
IPPROTO_ICMP
);

776 
	}
}

778 
boﬁ


779 
	$is_icmpv6
(c⁄° 
Êow
 *flow)

781  (
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IPV6
)

782 && 
Êow
->
nw_¥Ÿo
 =
IPPROTO_ICMPV6
);

783 
	}
}

786 
boﬁ


787 
	$mf_¨e_¥îeqs_ok
(c⁄° 
mf_fõld
 *
mf
, c⁄° 
Êow
 *flow)

789 
mf
->
¥îeqs
) {

790 
MFP_NONE
:

791  
åue
;

793 
MFP_ARP
:

794  (
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_ARP
) ||

795 
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_RARP
));

796 
MFP_IPV4
:

797  
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IP
);

798 
MFP_IPV6
:

799  
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IPV6
);

800 
MFP_VLAN_VID
:

801  (
Êow
->
vœn_tci
 & 
	`ht⁄s
(
VLAN_CFI
)) != 0;

802 
MFP_IP_ANY
:

803  
	`is_ù_™y
(
Êow
);

805 
MFP_TCP
:

806  
	`is_ù_™y
(
Êow
Ë&& flow->
nw_¥Ÿo
 =
IPPROTO_TCP
;

807 
MFP_UDP
:

808  
	`is_ù_™y
(
Êow
Ë&& flow->
nw_¥Ÿo
 =
IPPROTO_UDP
;

809 
MFP_ICMPV4
:

810  
	`is_icmpv4
(
Êow
);

811 
MFP_ICMPV6
:

812  
	`is_icmpv6
(
Êow
);

814 
MFP_ND
:

815  (
	`is_icmpv6
(
Êow
)

816 && 
Êow
->
ç_d°
 =
	`ht⁄s
(0)

817 && (
Êow
->
ç_§c
 =
	`ht⁄s
(
ND_NEIGHBOR_SOLICIT
) ||

818 
Êow
->
ç_§c
 =
	`ht⁄s
(
ND_NEIGHBOR_ADVERT
)));

819 
MFP_ND_SOLICIT
:

820  (
	`is_icmpv6
(
Êow
)

821 && 
Êow
->
ç_d°
 =
	`ht⁄s
(0)

822 && (
Êow
->
ç_§c
 =
	`ht⁄s
(
ND_NEIGHBOR_SOLICIT
)));

823 
MFP_ND_ADVERT
:

824  (
	`is_icmpv6
(
Êow
)

825 && 
Êow
->
ç_d°
 =
	`ht⁄s
(0)

826 && (
Êow
->
ç_§c
 =
	`ht⁄s
(
ND_NEIGHBOR_ADVERT
)));

829 
	`NOT_REACHED
();

830 
	}
}

842 
boﬁ


843 
	$mf_is_vÆue_vÆid
(c⁄° 
mf_fõld
 *
mf
, c⁄° 
mf_vÆue
 *
vÆue
)

845 
mf
->
id
) {

846 
MFF_TUN_ID
:

847 
MFF_TUN_SRC
:

848 
MFF_TUN_DST
:

849 
MFF_TUN_TOS
:

850 
MFF_TUN_TTL
:

851 
MFF_TUN_FLAGS
:

852 
MFF_METADATA
:

853 
MFF_IN_PORT
:

854 
MFF_SKB_PRIORITY
:

855 
MFF_SKB_MARK
:

856 
CASE_MFF_REGS
:

857 
MFF_ETH_SRC
:

858 
MFF_ETH_DST
:

859 
MFF_ETH_TYPE
:

860 
MFF_VLAN_TCI
:

861 
MFF_IPV4_SRC
:

862 
MFF_IPV4_DST
:

863 
MFF_IPV6_SRC
:

864 
MFF_IPV6_DST
:

865 
MFF_IP_PROTO
:

866 
MFF_IP_TTL
:

867 
MFF_ARP_SPA
:

868 
MFF_ARP_TPA
:

869 
MFF_ARP_SHA
:

870 
MFF_ARP_THA
:

871 
MFF_TCP_SRC
:

872 
MFF_TCP_DST
:

873 
MFF_UDP_SRC
:

874 
MFF_UDP_DST
:

875 
MFF_ICMPV4_TYPE
:

876 
MFF_ICMPV4_CODE
:

877 
MFF_ICMPV6_TYPE
:

878 
MFF_ICMPV6_CODE
:

879 
MFF_ND_TARGET
:

880 
MFF_ND_SLL
:

881 
MFF_ND_TLL
:

882  
åue
;

884 
MFF_IP_DSCP
:

885  !(
vÆue
->
u8
 & ~
IP_DSCP_MASK
);

886 
MFF_IP_ECN
:

887  !(
vÆue
->
u8
 & ~
IP_ECN_MASK
);

888 
MFF_IP_FRAG
:

889  !(
vÆue
->
u8
 & ~
FLOW_NW_FRAG_MASK
);

891 
MFF_ARP_OP
:

892  !(
vÆue
->
be16
 & 
	`ht⁄s
(0xff00));

894 
MFF_DL_VLAN
:

895  !(
vÆue
->
be16
 & 
	`ht⁄s
(
VLAN_CFI
 | 
VLAN_PCP_MASK
));

896 
MFF_VLAN_VID
:

897  !(
vÆue
->
be16
 & 
	`ht⁄s
(
VLAN_PCP_MASK
));

899 
MFF_DL_VLAN_PCP
:

900 
MFF_VLAN_PCP
:

901  !(
vÆue
->
u8
 & ~(
VLAN_PCP_MASK
 >> 
VLAN_PCP_SHIFT
));

903 
MFF_IPV6_LABEL
:

904  !(
vÆue
->
be32
 & ~
	`ht⁄l
(
IPV6_LABEL_MASK
));

906 
MFF_N_IDS
:

908 
	`NOT_REACHED
();

910 
	}
}

915 
	$mf_gë_vÆue
(c⁄° 
mf_fõld
 *
mf
, c⁄° 
Êow
 *flow,

916 
mf_vÆue
 *
vÆue
)

918 
mf
->
id
) {

919 
MFF_TUN_ID
:

920 
vÆue
->
be64
 = 
Êow
->
tu¬ñ
.
tun_id
;

922 
MFF_TUN_SRC
:

923 
vÆue
->
be32
 = 
Êow
->
tu¬ñ
.
ù_§c
;

925 
MFF_TUN_DST
:

926 
vÆue
->
be32
 = 
Êow
->
tu¬ñ
.
ù_d°
;

928 
MFF_TUN_FLAGS
:

929 
vÆue
->
be16
 = 
	`ht⁄s
(
Êow
->
tu¬ñ
.
Êags
);

931 
MFF_TUN_TTL
:

932 
vÆue
->
u8
 = 
Êow
->
tu¬ñ
.
ù_âl
;

934 
MFF_TUN_TOS
:

935 
vÆue
->
u8
 = 
Êow
->
tu¬ñ
.
ù_tos
;

938 
MFF_METADATA
:

939 
vÆue
->
be64
 = 
Êow
->
mëad©a
;

942 
MFF_IN_PORT
:

943 
vÆue
->
be16
 = 
	`ht⁄s
(
Êow
->
ö_p‹t
);

946 
MFF_SKB_PRIORITY
:

947 
vÆue
->
be32
 = 
	`ht⁄l
(
Êow
->
skb_¥i‹ôy
);

950 
MFF_SKB_MARK
:

951 
vÆue
->
be32
 = 
	`ht⁄l
(
Êow
->
skb_m¨k
);

954 
CASE_MFF_REGS
:

955 
vÆue
->
be32
 = 
	`ht⁄l
(
Êow
->
ªgs
[
mf
->
id
 - 
MFF_REG0
]);

958 
MFF_ETH_SRC
:

959 
	`mem˝y
(
vÆue
->
mac
, 
Êow
->
dl_§c
, 
ETH_ADDR_LEN
);

962 
MFF_ETH_DST
:

963 
	`mem˝y
(
vÆue
->
mac
, 
Êow
->
dl_d°
, 
ETH_ADDR_LEN
);

966 
MFF_ETH_TYPE
:

967 
vÆue
->
be16
 = 
Êow
->
dl_ty≥
;

970 
MFF_VLAN_TCI
:

971 
vÆue
->
be16
 = 
Êow
->
vœn_tci
;

974 
MFF_DL_VLAN
:

975 
vÆue
->
be16
 = 
Êow
->
vœn_tci
 & 
	`ht⁄s
(
VLAN_VID_MASK
);

977 
MFF_VLAN_VID
:

978 
vÆue
->
be16
 = 
Êow
->
vœn_tci
 & 
	`ht⁄s
(
VLAN_VID_MASK
 | 
VLAN_CFI
);

981 
MFF_DL_VLAN_PCP
:

982 
MFF_VLAN_PCP
:

983 
vÆue
->
u8
 = 
	`vœn_tci_to_p˝
(
Êow
->
vœn_tci
);

986 
MFF_IPV4_SRC
:

987 
vÆue
->
be32
 = 
Êow
->
nw_§c
;

990 
MFF_IPV4_DST
:

991 
vÆue
->
be32
 = 
Êow
->
nw_d°
;

994 
MFF_IPV6_SRC
:

995 
vÆue
->
ùv6
 = 
Êow
->
ùv6_§c
;

998 
MFF_IPV6_DST
:

999 
vÆue
->
ùv6
 = 
Êow
->
ùv6_d°
;

1002 
MFF_IPV6_LABEL
:

1003 
vÆue
->
be32
 = 
Êow
->
ùv6_œbñ
;

1006 
MFF_IP_PROTO
:

1007 
vÆue
->
u8
 = 
Êow
->
nw_¥Ÿo
;

1010 
MFF_IP_DSCP
:

1011 
vÆue
->
u8
 = 
Êow
->
nw_tos
 & 
IP_DSCP_MASK
;

1014 
MFF_IP_ECN
:

1015 
vÆue
->
u8
 = 
Êow
->
nw_tos
 & 
IP_ECN_MASK
;

1018 
MFF_IP_TTL
:

1019 
vÆue
->
u8
 = 
Êow
->
nw_âl
;

1022 
MFF_IP_FRAG
:

1023 
vÆue
->
u8
 = 
Êow
->
nw_‰ag
;

1026 
MFF_ARP_OP
:

1027 
vÆue
->
be16
 = 
	`ht⁄s
(
Êow
->
nw_¥Ÿo
);

1030 
MFF_ARP_SPA
:

1031 
vÆue
->
be32
 = 
Êow
->
nw_§c
;

1034 
MFF_ARP_TPA
:

1035 
vÆue
->
be32
 = 
Êow
->
nw_d°
;

1038 
MFF_ARP_SHA
:

1039 
MFF_ND_SLL
:

1040 
	`mem˝y
(
vÆue
->
mac
, 
Êow
->
¨p_sha
, 
ETH_ADDR_LEN
);

1043 
MFF_ARP_THA
:

1044 
MFF_ND_TLL
:

1045 
	`mem˝y
(
vÆue
->
mac
, 
Êow
->
¨p_tha
, 
ETH_ADDR_LEN
);

1048 
MFF_TCP_SRC
:

1049 
MFF_UDP_SRC
:

1050 
vÆue
->
be16
 = 
Êow
->
ç_§c
;

1053 
MFF_TCP_DST
:

1054 
MFF_UDP_DST
:

1055 
vÆue
->
be16
 = 
Êow
->
ç_d°
;

1058 
MFF_ICMPV4_TYPE
:

1059 
MFF_ICMPV6_TYPE
:

1060 
vÆue
->
u8
 = 
	`¡ohs
(
Êow
->
ç_§c
);

1063 
MFF_ICMPV4_CODE
:

1064 
MFF_ICMPV6_CODE
:

1065 
vÆue
->
u8
 = 
	`¡ohs
(
Êow
->
ç_d°
);

1068 
MFF_ND_TARGET
:

1069 
vÆue
->
ùv6
 = 
Êow
->
nd_èrgë
;

1072 
MFF_N_IDS
:

1074 
	`NOT_REACHED
();

1076 
	}
}

1082 
	$mf_£t_vÆue
(c⁄° 
mf_fõld
 *
mf
,

1083 c⁄° 
mf_vÆue
 *
vÆue
, 
m©ch
 *match)

1085 
mf
->
id
) {

1086 
MFF_TUN_ID
:

1087 
	`m©ch_£t_tun_id
(
m©ch
, 
vÆue
->
be64
);

1089 
MFF_TUN_SRC
:

1090 
	`m©ch_£t_tun_§c
(
m©ch
, 
vÆue
->
be32
);

1092 
MFF_TUN_DST
:

1093 
	`m©ch_£t_tun_d°
(
m©ch
, 
vÆue
->
be32
);

1095 
MFF_TUN_FLAGS
:

1096 
	`m©ch_£t_tun_Êags
(
m©ch
, 
	`¡ohs
(
vÆue
->
be16
));

1098 
MFF_TUN_TOS
:

1099 
	`m©ch_£t_tun_tos
(
m©ch
, 
vÆue
->
u8
);

1101 
MFF_TUN_TTL
:

1102 
	`m©ch_£t_tun_âl
(
m©ch
, 
vÆue
->
u8
);

1105 
MFF_METADATA
:

1106 
	`m©ch_£t_mëad©a
(
m©ch
, 
vÆue
->
be64
);

1109 
MFF_IN_PORT
:

1110 
	`m©ch_£t_ö_p‹t
(
m©ch
, 
	`¡ohs
(
vÆue
->
be16
));

1113 
MFF_SKB_PRIORITY
:

1114 
	`m©ch_£t_skb_¥i‹ôy
(
m©ch
, 
	`¡ohl
(
vÆue
->
be32
));

1117 
MFF_SKB_MARK
:

1118 
	`m©ch_£t_skb_m¨k
(
m©ch
, 
	`¡ohl
(
vÆue
->
be32
));

1121 
CASE_MFF_REGS
:

1122 
	`m©ch_£t_ªg
(
m©ch
, 
mf
->
id
 - 
MFF_REG0
, 
	`¡ohl
(
vÆue
->
be32
));

1125 
MFF_ETH_SRC
:

1126 
	`m©ch_£t_dl_§c
(
m©ch
, 
vÆue
->
mac
);

1129 
MFF_ETH_DST
:

1130 
	`m©ch_£t_dl_d°
(
m©ch
, 
vÆue
->
mac
);

1133 
MFF_ETH_TYPE
:

1134 
	`m©ch_£t_dl_ty≥
(
m©ch
, 
vÆue
->
be16
);

1137 
MFF_VLAN_TCI
:

1138 
	`m©ch_£t_dl_tci
(
m©ch
, 
vÆue
->
be16
);

1141 
MFF_DL_VLAN
:

1142 
	`m©ch_£t_dl_vœn
(
m©ch
, 
vÆue
->
be16
);

1144 
MFF_VLAN_VID
:

1145 
	`m©ch_£t_vœn_vid
(
m©ch
, 
vÆue
->
be16
);

1148 
MFF_DL_VLAN_PCP
:

1149 
MFF_VLAN_PCP
:

1150 
	`m©ch_£t_dl_vœn_p˝
(
m©ch
, 
vÆue
->
u8
);

1153 
MFF_IPV4_SRC
:

1154 
	`m©ch_£t_nw_§c
(
m©ch
, 
vÆue
->
be32
);

1157 
MFF_IPV4_DST
:

1158 
	`m©ch_£t_nw_d°
(
m©ch
, 
vÆue
->
be32
);

1161 
MFF_IPV6_SRC
:

1162 
	`m©ch_£t_ùv6_§c
(
m©ch
, &
vÆue
->
ùv6
);

1165 
MFF_IPV6_DST
:

1166 
	`m©ch_£t_ùv6_d°
(
m©ch
, &
vÆue
->
ùv6
);

1169 
MFF_IPV6_LABEL
:

1170 
	`m©ch_£t_ùv6_œbñ
(
m©ch
, 
vÆue
->
be32
);

1173 
MFF_IP_PROTO
:

1174 
	`m©ch_£t_nw_¥Ÿo
(
m©ch
, 
vÆue
->
u8
);

1177 
MFF_IP_DSCP
:

1178 
	`m©ch_£t_nw_ds˝
(
m©ch
, 
vÆue
->
u8
);

1181 
MFF_IP_ECN
:

1182 
	`m©ch_£t_nw_e˙
(
m©ch
, 
vÆue
->
u8
);

1185 
MFF_IP_TTL
:

1186 
	`m©ch_£t_nw_âl
(
m©ch
, 
vÆue
->
u8
);

1189 
MFF_IP_FRAG
:

1190 
	`m©ch_£t_nw_‰ag
(
m©ch
, 
vÆue
->
u8
);

1193 
MFF_ARP_OP
:

1194 
	`m©ch_£t_nw_¥Ÿo
(
m©ch
, 
	`¡ohs
(
vÆue
->
be16
));

1197 
MFF_ARP_SPA
:

1198 
	`m©ch_£t_nw_§c
(
m©ch
, 
vÆue
->
be32
);

1201 
MFF_ARP_TPA
:

1202 
	`m©ch_£t_nw_d°
(
m©ch
, 
vÆue
->
be32
);

1205 
MFF_ARP_SHA
:

1206 
MFF_ND_SLL
:

1207 
	`m©ch_£t_¨p_sha
(
m©ch
, 
vÆue
->
mac
);

1210 
MFF_ARP_THA
:

1211 
MFF_ND_TLL
:

1212 
	`m©ch_£t_¨p_tha
(
m©ch
, 
vÆue
->
mac
);

1215 
MFF_TCP_SRC
:

1216 
MFF_UDP_SRC
:

1217 
	`m©ch_£t_ç_§c
(
m©ch
, 
vÆue
->
be16
);

1220 
MFF_TCP_DST
:

1221 
MFF_UDP_DST
:

1222 
	`m©ch_£t_ç_d°
(
m©ch
, 
vÆue
->
be16
);

1225 
MFF_ICMPV4_TYPE
:

1226 
MFF_ICMPV6_TYPE
:

1227 
	`m©ch_£t_icmp_ty≥
(
m©ch
, 
vÆue
->
u8
);

1230 
MFF_ICMPV4_CODE
:

1231 
MFF_ICMPV6_CODE
:

1232 
	`m©ch_£t_icmp_code
(
m©ch
, 
vÆue
->
u8
);

1235 
MFF_ND_TARGET
:

1236 
	`m©ch_£t_nd_èrgë
(
m©ch
, &
vÆue
->
ùv6
);

1239 
MFF_N_IDS
:

1241 
	`NOT_REACHED
();

1243 
	}
}

1249 
	$mf_£t_Êow_vÆue
(c⁄° 
mf_fõld
 *
mf
,

1250 c⁄° 
mf_vÆue
 *
vÆue
, 
Êow
 *flow)

1252 
mf
->
id
) {

1253 
MFF_TUN_ID
:

1254 
Êow
->
tu¬ñ
.
tun_id
 = 
vÆue
->
be64
;

1256 
MFF_TUN_SRC
:

1257 
Êow
->
tu¬ñ
.
ù_§c
 = 
vÆue
->
be32
;

1259 
MFF_TUN_DST
:

1260 
Êow
->
tu¬ñ
.
ù_d°
 = 
vÆue
->
be32
;

1262 
MFF_TUN_FLAGS
:

1263 
Êow
->
tu¬ñ
.
Êags
 = 
	`¡ohs
(
vÆue
->
be16
);

1265 
MFF_TUN_TOS
:

1266 
Êow
->
tu¬ñ
.
ù_tos
 = 
vÆue
->
u8
;

1268 
MFF_TUN_TTL
:

1269 
Êow
->
tu¬ñ
.
ù_âl
 = 
vÆue
->
u8
;

1272 
MFF_METADATA
:

1273 
Êow
->
mëad©a
 = 
vÆue
->
be64
;

1276 
MFF_IN_PORT
:

1277 
Êow
->
ö_p‹t
 = 
	`¡ohs
(
vÆue
->
be16
);

1280 
MFF_SKB_PRIORITY
:

1281 
Êow
->
skb_¥i‹ôy
 = 
	`¡ohl
(
vÆue
->
be32
);

1284 
MFF_SKB_MARK
:

1285 
Êow
->
skb_m¨k
 = 
	`¡ohl
(
vÆue
->
be32
);

1288 
CASE_MFF_REGS
:

1289 
Êow
->
ªgs
[
mf
->
id
 - 
MFF_REG0
] = 
	`¡ohl
(
vÆue
->
be32
);

1292 
MFF_ETH_SRC
:

1293 
	`mem˝y
(
Êow
->
dl_§c
, 
vÆue
->
mac
, 
ETH_ADDR_LEN
);

1296 
MFF_ETH_DST
:

1297 
	`mem˝y
(
Êow
->
dl_d°
, 
vÆue
->
mac
, 
ETH_ADDR_LEN
);

1300 
MFF_ETH_TYPE
:

1301 
Êow
->
dl_ty≥
 = 
vÆue
->
be16
;

1304 
MFF_VLAN_TCI
:

1305 
Êow
->
vœn_tci
 = 
vÆue
->
be16
;

1308 
MFF_DL_VLAN
:

1309 
	`Êow_£t_dl_vœn
(
Êow
, 
vÆue
->
be16
);

1311 
MFF_VLAN_VID
:

1312 
	`Êow_£t_vœn_vid
(
Êow
, 
vÆue
->
be16
);

1315 
MFF_DL_VLAN_PCP
:

1316 
MFF_VLAN_PCP
:

1317 
	`Êow_£t_vœn_p˝
(
Êow
, 
vÆue
->
u8
);

1320 
MFF_IPV4_SRC
:

1321 
Êow
->
nw_§c
 = 
vÆue
->
be32
;

1324 
MFF_IPV4_DST
:

1325 
Êow
->
nw_d°
 = 
vÆue
->
be32
;

1328 
MFF_IPV6_SRC
:

1329 
Êow
->
ùv6_§c
 = 
vÆue
->
ùv6
;

1332 
MFF_IPV6_DST
:

1333 
Êow
->
ùv6_d°
 = 
vÆue
->
ùv6
;

1336 
MFF_IPV6_LABEL
:

1337 
Êow
->
ùv6_œbñ
 = 
vÆue
->
be32
 & ~
	`ht⁄l
(
IPV6_LABEL_MASK
);

1340 
MFF_IP_PROTO
:

1341 
Êow
->
nw_¥Ÿo
 = 
vÆue
->
u8
;

1344 
MFF_IP_DSCP
:

1345 
Êow
->
nw_tos
 &~
IP_DSCP_MASK
;

1346 
Êow
->
nw_tos
 |
vÆue
->
u8
 & 
IP_DSCP_MASK
;

1349 
MFF_IP_ECN
:

1350 
Êow
->
nw_tos
 &~
IP_ECN_MASK
;

1351 
Êow
->
nw_tos
 |
vÆue
->
u8
 & 
IP_ECN_MASK
;

1354 
MFF_IP_TTL
:

1355 
Êow
->
nw_âl
 = 
vÆue
->
u8
;

1358 
MFF_IP_FRAG
:

1359 
Êow
->
nw_‰ag
 &
vÆue
->
u8
;

1362 
MFF_ARP_OP
:

1363 
Êow
->
nw_¥Ÿo
 = 
	`¡ohs
(
vÆue
->
be16
);

1366 
MFF_ARP_SPA
:

1367 
Êow
->
nw_§c
 = 
vÆue
->
be32
;

1370 
MFF_ARP_TPA
:

1371 
Êow
->
nw_d°
 = 
vÆue
->
be32
;

1374 
MFF_ARP_SHA
:

1375 
MFF_ND_SLL
:

1376 
	`mem˝y
(
Êow
->
¨p_sha
, 
vÆue
->
mac
, 
ETH_ADDR_LEN
);

1379 
MFF_ARP_THA
:

1380 
MFF_ND_TLL
:

1381 
	`mem˝y
(
Êow
->
¨p_tha
, 
vÆue
->
mac
, 
ETH_ADDR_LEN
);

1384 
MFF_TCP_SRC
:

1385 
MFF_UDP_SRC
:

1386 
Êow
->
ç_§c
 = 
vÆue
->
be16
;

1389 
MFF_TCP_DST
:

1390 
MFF_UDP_DST
:

1391 
Êow
->
ç_d°
 = 
vÆue
->
be16
;

1394 
MFF_ICMPV4_TYPE
:

1395 
MFF_ICMPV6_TYPE
:

1396 
Êow
->
ç_§c
 = 
	`ht⁄s
(
vÆue
->
u8
);

1399 
MFF_ICMPV4_CODE
:

1400 
MFF_ICMPV6_CODE
:

1401 
Êow
->
ç_d°
 = 
	`ht⁄s
(
vÆue
->
u8
);

1404 
MFF_ND_TARGET
:

1405 
Êow
->
nd_èrgë
 = 
vÆue
->
ùv6
;

1408 
MFF_N_IDS
:

1410 
	`NOT_REACHED
();

1412 
	}
}

1418 
boﬁ


1419 
	$mf_is_zîo
(c⁄° 
mf_fõld
 *
mf
, c⁄° 
Êow
 *flow)

1421 
mf_vÆue
 
vÆue
;

1423 
	`mf_gë_vÆue
(
mf
, 
Êow
, &
vÆue
);

1424  
	`is_Æl_zîos
((c⁄° 
uöt8_t
 *Ë&
vÆue
, 
mf
->
n_byãs
);

1425 
	}
}

1432 
	$mf_£t_wûd
(c⁄° 
mf_fõld
 *
mf
, 
m©ch
 *match)

1434 
mf
->
id
) {

1435 
MFF_TUN_ID
:

1436 
	`m©ch_£t_tun_id_masked
(
m©ch
, 
	`ht⁄Œ
(0), htonll(0));

1438 
MFF_TUN_SRC
:

1439 
	`m©ch_£t_tun_§c_masked
(
m©ch
, 
	`ht⁄l
(0), htonl(0));

1441 
MFF_TUN_DST
:

1442 
	`m©ch_£t_tun_d°_masked
(
m©ch
, 
	`ht⁄l
(0), htonl(0));

1444 
MFF_TUN_FLAGS
:

1445 
	`m©ch_£t_tun_Êags_masked
(
m©ch
, 0, 0);

1447 
MFF_TUN_TOS
:

1448 
	`m©ch_£t_tun_tos_masked
(
m©ch
, 0, 0);

1450 
MFF_TUN_TTL
:

1451 
	`m©ch_£t_tun_âl_masked
(
m©ch
, 0, 0);

1454 
MFF_METADATA
:

1455 
	`m©ch_£t_mëad©a_masked
(
m©ch
, 
	`ht⁄Œ
(0), htonll(0));

1458 
MFF_IN_PORT
:

1459 
m©ch
->
Êow
.
ö_p‹t
 = 0;

1460 
m©ch
->
wc
.
masks
.
ö_p‹t
 = 0;

1463 
MFF_SKB_PRIORITY
:

1464 
m©ch
->
Êow
.
skb_¥i‹ôy
 = 0;

1465 
m©ch
->
wc
.
masks
.
skb_¥i‹ôy
 = 0;

1468 
MFF_SKB_MARK
:

1469 
m©ch
->
Êow
.
skb_m¨k
 = 0;

1470 
m©ch
->
wc
.
masks
.
skb_m¨k
 = 0;

1473 
CASE_MFF_REGS
:

1474 
	`m©ch_£t_ªg_masked
(
m©ch
, 
mf
->
id
 - 
MFF_REG0
, 0, 0);

1477 
MFF_ETH_SRC
:

1478 
	`mem£t
(
m©ch
->
Êow
.
dl_§c
, 0, 
ETH_ADDR_LEN
);

1479 
	`mem£t
(
m©ch
->
wc
.
masks
.
dl_§c
, 0, 
ETH_ADDR_LEN
);

1482 
MFF_ETH_DST
:

1483 
	`mem£t
(
m©ch
->
Êow
.
dl_d°
, 0, 
ETH_ADDR_LEN
);

1484 
	`mem£t
(
m©ch
->
wc
.
masks
.
dl_d°
, 0, 
ETH_ADDR_LEN
);

1487 
MFF_ETH_TYPE
:

1488 
m©ch
->
Êow
.
dl_ty≥
 = 
	`ht⁄s
(0);

1489 
m©ch
->
wc
.
masks
.
dl_ty≥
 = 
	`ht⁄s
(0);

1492 
MFF_VLAN_TCI
:

1493 
	`m©ch_£t_dl_tci_masked
(
m©ch
, 
	`ht⁄s
(0), htons(0));

1496 
MFF_DL_VLAN
:

1497 
MFF_VLAN_VID
:

1498 
	`m©ch_£t_™y_vid
(
m©ch
);

1501 
MFF_DL_VLAN_PCP
:

1502 
MFF_VLAN_PCP
:

1503 
	`m©ch_£t_™y_p˝
(
m©ch
);

1506 
MFF_IPV4_SRC
:

1507 
MFF_ARP_SPA
:

1508 
	`m©ch_£t_nw_§c_masked
(
m©ch
, 
	`ht⁄l
(0), htonl(0));

1511 
MFF_IPV4_DST
:

1512 
MFF_ARP_TPA
:

1513 
	`m©ch_£t_nw_d°_masked
(
m©ch
, 
	`ht⁄l
(0), htonl(0));

1516 
MFF_IPV6_SRC
:

1517 
	`mem£t
(&
m©ch
->
wc
.
masks
.
ùv6_§c
, 0,  match->wc.masks.ipv6_src);

1518 
	`mem£t
(&
m©ch
->
Êow
.
ùv6_§c
, 0,  match->flow.ipv6_src);

1521 
MFF_IPV6_DST
:

1522 
	`mem£t
(&
m©ch
->
wc
.
masks
.
ùv6_d°
, 0,  match->wc.masks.ipv6_dst);

1523 
	`mem£t
(&
m©ch
->
Êow
.
ùv6_d°
, 0,  match->flow.ipv6_dst);

1526 
MFF_IPV6_LABEL
:

1527 
m©ch
->
wc
.
masks
.
ùv6_œbñ
 = 
	`ht⁄l
(0);

1528 
m©ch
->
Êow
.
ùv6_œbñ
 = 
	`ht⁄l
(0);

1531 
MFF_IP_PROTO
:

1532 
m©ch
->
wc
.
masks
.
nw_¥Ÿo
 = 0;

1533 
m©ch
->
Êow
.
nw_¥Ÿo
 = 0;

1536 
MFF_IP_DSCP
:

1537 
m©ch
->
wc
.
masks
.
nw_tos
 &~
IP_DSCP_MASK
;

1538 
m©ch
->
Êow
.
nw_tos
 &~
IP_DSCP_MASK
;

1541 
MFF_IP_ECN
:

1542 
m©ch
->
wc
.
masks
.
nw_tos
 &~
IP_ECN_MASK
;

1543 
m©ch
->
Êow
.
nw_tos
 &~
IP_ECN_MASK
;

1546 
MFF_IP_TTL
:

1547 
m©ch
->
wc
.
masks
.
nw_âl
 = 0;

1548 
m©ch
->
Êow
.
nw_âl
 = 0;

1551 
MFF_IP_FRAG
:

1552 
m©ch
->
wc
.
masks
.
nw_‰ag
 |
FLOW_NW_FRAG_MASK
;

1553 
m©ch
->
Êow
.
nw_‰ag
 &~
FLOW_NW_FRAG_MASK
;

1556 
MFF_ARP_OP
:

1557 
m©ch
->
wc
.
masks
.
nw_¥Ÿo
 = 0;

1558 
m©ch
->
Êow
.
nw_¥Ÿo
 = 0;

1561 
MFF_ARP_SHA
:

1562 
MFF_ND_SLL
:

1563 
	`mem£t
(
m©ch
->
Êow
.
¨p_sha
, 0, 
ETH_ADDR_LEN
);

1564 
	`mem£t
(
m©ch
->
wc
.
masks
.
¨p_sha
, 0, 
ETH_ADDR_LEN
);

1567 
MFF_ARP_THA
:

1568 
MFF_ND_TLL
:

1569 
	`mem£t
(
m©ch
->
Êow
.
¨p_tha
, 0, 
ETH_ADDR_LEN
);

1570 
	`mem£t
(
m©ch
->
wc
.
masks
.
¨p_tha
, 0, 
ETH_ADDR_LEN
);

1573 
MFF_TCP_SRC
:

1574 
MFF_UDP_SRC
:

1575 
MFF_ICMPV4_TYPE
:

1576 
MFF_ICMPV6_TYPE
:

1577 
m©ch
->
wc
.
masks
.
ç_§c
 = 
	`ht⁄s
(0);

1578 
m©ch
->
Êow
.
ç_§c
 = 
	`ht⁄s
(0);

1581 
MFF_TCP_DST
:

1582 
MFF_UDP_DST
:

1583 
MFF_ICMPV4_CODE
:

1584 
MFF_ICMPV6_CODE
:

1585 
m©ch
->
wc
.
masks
.
ç_d°
 = 
	`ht⁄s
(0);

1586 
m©ch
->
Êow
.
ç_d°
 = 
	`ht⁄s
(0);

1589 
MFF_ND_TARGET
:

1590 
	`mem£t
(&
m©ch
->
wc
.
masks
.
nd_èrgë
, 0,

1591  
m©ch
->
wc
.
masks
.
nd_èrgë
);

1592 
	`mem£t
(&
m©ch
->
Êow
.
nd_èrgë
, 0,  match->flow.nd_target);

1595 
MFF_N_IDS
:

1597 
	`NOT_REACHED
();

1599 
	}
}

1613 
	$mf_£t
(c⁄° 
mf_fõld
 *
mf
,

1614 c⁄° 
mf_vÆue
 *
vÆue
, c⁄° mf_vÆuê*
mask
,

1615 
m©ch
 *match)

1617 i‡(!
mask
 || 
	`is_Æl_⁄es
((c⁄° 
uöt8_t
 *Ëmask, 
mf
->
n_byãs
)) {

1618 
	`mf_£t_vÆue
(
mf
, 
vÆue
, 
m©ch
);

1620 } i‡(
	`is_Æl_zîos
((c⁄° 
uöt8_t
 *Ë
mask
, 
mf
->
n_byãs
)) {

1621 
	`mf_£t_wûd
(
mf
, 
m©ch
);

1625 
mf
->
id
) {

1626 
MFF_IN_PORT
:

1627 
MFF_SKB_MARK
:

1628 
MFF_SKB_PRIORITY
:

1629 
MFF_ETH_TYPE
:

1630 
MFF_DL_VLAN
:

1631 
MFF_DL_VLAN_PCP
:

1632 
MFF_VLAN_PCP
:

1633 
MFF_IP_PROTO
:

1634 
MFF_IP_TTL
:

1635 
MFF_IP_DSCP
:

1636 
MFF_IP_ECN
:

1637 
MFF_ARP_OP
:

1638 
MFF_ICMPV4_TYPE
:

1639 
MFF_ICMPV4_CODE
:

1640 
MFF_ICMPV6_TYPE
:

1641 
MFF_ICMPV6_CODE
:

1642 
	`NOT_REACHED
();

1644 
MFF_TUN_ID
:

1645 
	`m©ch_£t_tun_id_masked
(
m©ch
, 
vÆue
->
be64
, 
mask
->be64);

1647 
MFF_TUN_SRC
:

1648 
	`m©ch_£t_tun_§c_masked
(
m©ch
, 
vÆue
->
be32
, 
mask
->be32);

1650 
MFF_TUN_DST
:

1651 
	`m©ch_£t_tun_d°_masked
(
m©ch
, 
vÆue
->
be32
, 
mask
->be32);

1653 
MFF_TUN_FLAGS
:

1654 
	`m©ch_£t_tun_Êags_masked
(
m©ch
, 
	`¡ohs
(
vÆue
->
be16
),Çtohs(
mask
->be16));

1656 
MFF_TUN_TTL
:

1657 
	`m©ch_£t_tun_âl_masked
(
m©ch
, 
vÆue
->
u8
, 
mask
->u8);

1659 
MFF_TUN_TOS
:

1660 
	`m©ch_£t_tun_tos_masked
(
m©ch
, 
vÆue
->
u8
, 
mask
->u8);

1663 
MFF_METADATA
:

1664 
	`m©ch_£t_mëad©a_masked
(
m©ch
, 
vÆue
->
be64
, 
mask
->be64);

1667 
CASE_MFF_REGS
:

1668 
	`m©ch_£t_ªg_masked
(
m©ch
, 
mf
->
id
 - 
MFF_REG0
,

1669 
	`¡ohl
(
vÆue
->
be32
),Çtohl(
mask
->be32));

1672 
MFF_ETH_DST
:

1673 
	`m©ch_£t_dl_d°_masked
(
m©ch
, 
vÆue
->
mac
, 
mask
->mac);

1676 
MFF_ETH_SRC
:

1677 
	`m©ch_£t_dl_§c_masked
(
m©ch
, 
vÆue
->
mac
, 
mask
->mac);

1680 
MFF_ARP_SHA
:

1681 
MFF_ND_SLL
:

1682 
	`m©ch_£t_¨p_sha_masked
(
m©ch
, 
vÆue
->
mac
, 
mask
->mac);

1685 
MFF_ARP_THA
:

1686 
MFF_ND_TLL
:

1687 
	`m©ch_£t_¨p_tha_masked
(
m©ch
, 
vÆue
->
mac
, 
mask
->mac);

1690 
MFF_VLAN_TCI
:

1691 
	`m©ch_£t_dl_tci_masked
(
m©ch
, 
vÆue
->
be16
, 
mask
->be16);

1694 
MFF_VLAN_VID
:

1695 
	`m©ch_£t_vœn_vid_masked
(
m©ch
, 
vÆue
->
be16
, 
mask
->be16);

1698 
MFF_IPV4_SRC
:

1699 
	`m©ch_£t_nw_§c_masked
(
m©ch
, 
vÆue
->
be32
, 
mask
->be32);

1702 
MFF_IPV4_DST
:

1703 
	`m©ch_£t_nw_d°_masked
(
m©ch
, 
vÆue
->
be32
, 
mask
->be32);

1706 
MFF_IPV6_SRC
:

1707 
	`m©ch_£t_ùv6_§c_masked
(
m©ch
, &
vÆue
->
ùv6
, &
mask
->ipv6);

1710 
MFF_IPV6_DST
:

1711 
	`m©ch_£t_ùv6_d°_masked
(
m©ch
, &
vÆue
->
ùv6
, &
mask
->ipv6);

1714 
MFF_IPV6_LABEL
:

1715 i‡((
mask
->
be32
 & 
	`ht⁄l
(
IPV6_LABEL_MASK
)) == htonl(IPV6_LABEL_MASK)) {

1716 
	`mf_£t_vÆue
(
mf
, 
vÆue
, 
m©ch
);

1718 
	`m©ch_£t_ùv6_œbñ_masked
(
m©ch
, 
vÆue
->
be32
, 
mask
->be32);

1722 
MFF_ND_TARGET
:

1723 
	`m©ch_£t_nd_èrgë_masked
(
m©ch
, &
vÆue
->
ùv6
, &
mask
->ipv6);

1726 
MFF_IP_FRAG
:

1727 
	`m©ch_£t_nw_‰ag_masked
(
m©ch
, 
vÆue
->
u8
, 
mask
->u8);

1730 
MFF_ARP_SPA
:

1731 
	`m©ch_£t_nw_§c_masked
(
m©ch
, 
vÆue
->
be32
, 
mask
->be32);

1734 
MFF_ARP_TPA
:

1735 
	`m©ch_£t_nw_d°_masked
(
m©ch
, 
vÆue
->
be32
, 
mask
->be32);

1738 
MFF_TCP_SRC
:

1739 
MFF_UDP_SRC
:

1740 
	`m©ch_£t_ç_§c_masked
(
m©ch
, 
vÆue
->
be16
, 
mask
->be16);

1743 
MFF_TCP_DST
:

1744 
MFF_UDP_DST
:

1745 
	`m©ch_£t_ç_d°_masked
(
m©ch
, 
vÆue
->
be16
, 
mask
->be16);

1748 
MFF_N_IDS
:

1750 
	`NOT_REACHED
();

1752 
	}
}

1754 
oÂîr


1755 
	$mf_check__
(c⁄° 
mf_subfõld
 *
sf
, c⁄° 
Êow
 *flow,

1756 c⁄° *
ty≥
)

1758 i‡(!
sf
->
fõld
) {

1759 
	`VLOG_WARN_RL
(&
æ
, "unknow¿%†fõld", 
ty≥
);

1760 } i‡(!
sf
->
n_bôs
) {

1761 
	`VLOG_WARN_RL
(&
æ
, "zîÿbô %†fõld %s", 
ty≥
, 
sf
->
fõld
->
«me
);

1762 } i‡(
sf
->
ofs
 >sf->
fõld
->
n_bôs
) {

1763 
	`VLOG_WARN_RL
(&
æ
, "bit offset %dÉxceeds %d-bit width of %s field %s",

1764 
sf
->
ofs
, sf->
fõld
->
n_bôs
, 
ty≥
, sf->fõld->
«me
);

1765 } i‡(
sf
->
ofs
 + sf->
n_bôs
 > sf->
fõld
->n_bits) {

1766 
	`VLOG_WARN_RL
(&
æ
, "bit offset %dánd width %dÉxceeds %d-bit width "

1767 "o‡%†fõld %s", 
sf
->
ofs
, sf->
n_bôs
,

1768 
sf
->
fõld
->
n_bôs
, 
ty≥
, sf->fõld->
«me
);

1769 } i‡(
Êow
 && !
	`mf_¨e_¥îeqs_ok
(
sf
->
fõld
, flow)) {

1770 
	`VLOG_WARN_RL
(&
æ
, "%s field %sÜacks correctÖrerequisites",

1771 
ty≥
, 
sf
->
fõld
->
«me
);

1776  
OFPERR_OFPBAC_BAD_ARGUMENT
;

1777 
	}
}

1782 
oÂîr


1783 
	$mf_check_§c
(c⁄° 
mf_subfõld
 *
sf
, c⁄° 
Êow
 *flow)

1785  
	`mf_check__
(
sf
, 
Êow
, "source");

1786 
	}
}

1791 
oÂîr


1792 
	$mf_check_d°
(c⁄° 
mf_subfõld
 *
sf
, c⁄° 
Êow
 *flow)

1794 
îr‹
 = 
	`mf_check__
(
sf
, 
Êow
, "destination");

1795 i‡(!
îr‹
 && !
sf
->
fõld
->
wrôabÀ
) {

1796 
	`VLOG_WARN_RL
(&
æ
, "destination field %s isÇot writable",

1797 
sf
->
fõld
->
«me
);

1798  
OFPERR_OFPBAC_BAD_ARGUMENT
;

1800  
îr‹
;

1801 
	}
}

1806 
	$mf_gë
(c⁄° 
mf_fõld
 *
mf
, c⁄° 
m©ch
 *match,

1807 
mf_vÆue
 *
vÆue
, mf_vÆuê*
mask
)

1809 
	`mf_gë_vÆue
(
mf
, &
m©ch
->
Êow
, 
vÆue
);

1810 
	`mf_gë_mask
(
mf
, &
m©ch
->
wc
, 
mask
);

1811 
	}
}

1815 
	$mf_øndom_vÆue
(c⁄° 
mf_fõld
 *
mf
, 
mf_vÆue
 *
vÆue
)

1817 
	`øndom_byãs
(
vÆue
, 
mf
->
n_byãs
);

1819 
mf
->
id
) {

1820 
MFF_TUN_ID
:

1821 
MFF_TUN_SRC
:

1822 
MFF_TUN_DST
:

1823 
MFF_TUN_TOS
:

1824 
MFF_TUN_TTL
:

1825 
MFF_TUN_FLAGS
:

1826 
MFF_METADATA
:

1827 
MFF_IN_PORT
:

1828 
MFF_SKB_MARK
:

1829 
MFF_SKB_PRIORITY
:

1830 
CASE_MFF_REGS
:

1831 
MFF_ETH_SRC
:

1832 
MFF_ETH_DST
:

1833 
MFF_ETH_TYPE
:

1834 
MFF_VLAN_TCI
:

1835 
MFF_IPV4_SRC
:

1836 
MFF_IPV4_DST
:

1837 
MFF_IPV6_SRC
:

1838 
MFF_IPV6_DST
:

1839 
MFF_IP_PROTO
:

1840 
MFF_IP_TTL
:

1841 
MFF_ARP_SPA
:

1842 
MFF_ARP_TPA
:

1843 
MFF_ARP_SHA
:

1844 
MFF_ARP_THA
:

1845 
MFF_TCP_SRC
:

1846 
MFF_TCP_DST
:

1847 
MFF_UDP_SRC
:

1848 
MFF_UDP_DST
:

1849 
MFF_ICMPV4_TYPE
:

1850 
MFF_ICMPV4_CODE
:

1851 
MFF_ICMPV6_TYPE
:

1852 
MFF_ICMPV6_CODE
:

1853 
MFF_ND_TARGET
:

1854 
MFF_ND_SLL
:

1855 
MFF_ND_TLL
:

1858 
MFF_IPV6_LABEL
:

1859 
vÆue
->
be32
 &~
	`ht⁄l
(
IPV6_LABEL_MASK
);

1862 
MFF_IP_DSCP
:

1863 
vÆue
->
u8
 &
IP_DSCP_MASK
;

1866 
MFF_IP_ECN
:

1867 
vÆue
->
u8
 &
IP_ECN_MASK
;

1870 
MFF_IP_FRAG
:

1871 
vÆue
->
u8
 &
FLOW_NW_FRAG_MASK
;

1874 
MFF_ARP_OP
:

1875 
vÆue
->
be16
 &
	`ht⁄s
(0xff);

1878 
MFF_DL_VLAN
:

1879 
vÆue
->
be16
 &
	`ht⁄s
(
VLAN_VID_MASK
);

1881 
MFF_VLAN_VID
:

1882 
vÆue
->
be16
 &
	`ht⁄s
(
VLAN_VID_MASK
 | 
VLAN_CFI
);

1885 
MFF_DL_VLAN_PCP
:

1886 
MFF_VLAN_PCP
:

1887 
vÆue
->
u8
 &= 0x07;

1890 
MFF_N_IDS
:

1892 
	`NOT_REACHED
();

1894 
	}
}

1897 
	$mf_‰om_öãgî_°rög
(c⁄° 
mf_fõld
 *
mf
, c⁄° *
s
,

1898 
uöt8_t
 *
vÆuï
, uöt8_à*
maskp
)

1900 
öãgî
, 
mask
;

1901 *
èû
;

1902 
i
;

1904 
î∫o
 = 0;

1905 
öãgî
 = 
	`°πouŒ
(
s
, &
èû
, 0);

1906 i‡(
î∫o
 || (*
èû
 != '\0' && *tail != '/')) {

1907 
sy¡ax_îr‹
;

1910 i‡(*
èû
 == '/') {

1911 
mask
 = 
	`°πouŒ
(
èû
 + 1, &tail, 0);

1912 i‡(
î∫o
 || *
èû
 != '\0') {

1913 
sy¡ax_îr‹
;

1916 
mask
 = 
ULLONG_MAX
;

1919 
i
 = 
mf
->
n_byãs
 - 1; i >= 0; i--) {

1920 
vÆuï
[
i
] = 
öãgî
;

1921 
maskp
[
i
] = 
mask
;

1922 
öãgî
 >>= 8;

1923 
mask
 >>= 8;

1925 i‡(
öãgî
) {

1926  
	`xa•rötf
("%s: valueÅooÜarge for %u-byte field %s",

1927 
s
, 
mf
->
n_byãs
, mf->
«me
);

1929  
NULL
;

1931 
sy¡ax_îr‹
:

1932  
	`xa•rötf
("%s: bad sy¡ax f‹ %s", 
s
, 
mf
->
«me
);

1933 
	}
}

1936 
	$mf_‰om_ëhî√t_°rög
(c⁄° 
mf_fõld
 *
mf
, c⁄° *
s
,

1937 
uöt8_t
 
mac
[
ETH_ADDR_LEN
],

1938 
uöt8_t
 
mask
[
ETH_ADDR_LEN
])

1940 
	`as£π
(
mf
->
n_byãs
 =
ETH_ADDR_LEN
);

1942 
	`ssˇnf
(
s
, 
ETH_ADDR_SCAN_FMT
"/"ETH_ADDR_SCAN_FMT,

1943 
	`ETH_ADDR_SCAN_ARGS
(
mac
), ETH_ADDR_SCAN_ARGS(
mask
))){

1944 
ETH_ADDR_SCAN_COUNT
 * 2:

1945  
NULL
;

1947 
ETH_ADDR_SCAN_COUNT
:

1948 
	`mem£t
(
mask
, 0xff, 
ETH_ADDR_LEN
);

1949  
NULL
;

1952  
	`xa•rötf
("%s: invÆid Ethî√àaddªss", 
s
);

1954 
	}
}

1957 
	$mf_‰om_ùv4_°rög
(c⁄° 
mf_fõld
 *
mf
, c⁄° *
s
,

1958 
ovs_be32
 *
ù
, ovs_be32 *
mask
)

1960 
¥efix
;

1962 
	`as£π
(
mf
->
n_byãs
 = *
ù
);

1964 i‡(
	`ssˇnf
(
s
, 
IP_SCAN_FMT
"/"IP_SCAN_FMT,

1965 
	`IP_SCAN_ARGS
(
ù
), IP_SCAN_ARGS(
mask
)Ë=
IP_SCAN_COUNT
 * 2) {

1967 } i‡(
	`ssˇnf
(
s
, 
IP_SCAN_FMT
"/%d",

1968 
	`IP_SCAN_ARGS
(
ù
), &
¥efix
Ë=
IP_SCAN_COUNT
 + 1) {

1969 i‡(
¥efix
 <= 0 ||Örefix > 32) {

1970  
	`xa•rötf
("%s:ÇetworkÖrefix bitsÇot between 1ánd "

1971 "32", 
s
);

1972 } i‡(
¥efix
 == 32) {

1973 *
mask
 = 
	`ht⁄l
(
UINT32_MAX
);

1975 *
mask
 = 
	`ht⁄l
(((1u << 
¥efix
) - 1) << (32 -Örefix));

1977 } i‡(
	`ssˇnf
(
s
, 
IP_SCAN_FMT
, 
	`IP_SCAN_ARGS
(
ù
)Ë=
IP_SCAN_COUNT
) {

1978 *
mask
 = 
	`ht⁄l
(
UINT32_MAX
);

1980  
	`xa•rötf
("%s: invÆid IPáddªss", 
s
);

1982  
NULL
;

1983 
	}
}

1986 
	$mf_‰om_ùv6_°rög
(c⁄° 
mf_fõld
 *
mf
, c⁄° *
s
,

1987 
ö6_addr
 *
vÆue
, ö6_add∏*
mask
)

1989 *
°r
 = 
	`x°rdup
(
s
);

1990 *
ßve_±r
 = 
NULL
;

1991 c⁄° *
«me
, *
√tmask
;

1992 
ªtvÆ
;

1994 
	`as£π
(
mf
->
n_byãs
 = *
vÆue
);

1996 
«me
 = 
	`°πok_r
(
°r
, "/", &
ßve_±r
);

1997 
ªtvÆ
 = 
«me
 ? 
	`lookup_ùv6
“ame, 
vÆue
Ë: 
EINVAL
;

1998 i‡(
ªtvÆ
) {

1999 *
îr
;

2001 
îr
 = 
	`xa•rötf
("%s: couldÇŸ c⁄vîàtÿIPv6áddªss", 
°r
);

2002 
	`‰ì
(
°r
);

2004  
îr
;

2007 
√tmask
 = 
	`°πok_r
(
NULL
, "/", &
ßve_±r
);

2008 i‡(
√tmask
) {

2009 i‡(
	`öë_±⁄
(
AF_INET6
, 
√tmask
, 
mask
) != 1) {

2010 
¥efix
 = 
	`©oi
(
√tmask
);

2011 i‡(
¥efix
 <= 0 ||Örefix > 128) {

2012 
	`‰ì
(
°r
);

2013  
	`xa•rötf
("%s:Öªfix bô†nŸ bëwì¿1ánd 128", 
s
);

2015 *
mask
 = 
	`ùv6_¸óã_mask
(
¥efix
);

2019 *
mask
 = 
ö6addr_exa˘
;

2021 
	`‰ì
(
°r
);

2023  
NULL
;

2024 
	}
}

2027 
	$mf_‰om_oÂ_p‹t_°rög
(c⁄° 
mf_fõld
 *
mf
, c⁄° *
s
,

2028 
ovs_be16
 *
vÆuï
, ovs_be16 *
maskp
)

2030 
uöt16_t
 
p‹t
;

2032 
	`as£π
(
mf
->
n_byãs
 =(
ovs_be16
));

2033 i‡(*
s
 == '-') {

2034  
	`xa•rötf
("%s:Çegative valuesÇot supported for %s",

2035 
s
, 
mf
->
«me
);

2036 } i‡(
	`oÂutû_p‹t_‰om_°rög
(
s
, &
p‹t
)) {

2037 *
vÆuï
 = 
	`ht⁄s
(
p‹t
);

2038 *
maskp
 = 
	`ht⁄s
(
UINT16_MAX
);

2039  
NULL
;

2041  
	`mf_‰om_öãgî_°rög
(
mf
, 
s
,

2042 (
uöt8_t
 *Ë
vÆuï
, (uöt8_à*Ë
maskp
);

2044 
	}
}

2046 
	s‰ag_h™dlög
 {

2047 c⁄° *
	m«me
;

2048 
uöt8_t
 
	mmask
;

2049 
uöt8_t
 
	mvÆue
;

2052 c⁄° 
‰ag_h™dlög
 
	gÆl_‰ags
[] = {

2053 
	#A
 
FLOW_NW_FRAG_ANY


	)

2054 
	#L
 
FLOW_NW_FRAG_LATER


	)

2057 { "no", 
A
|
L
, 0 },

2058 { "fú°", 
A
|
L
, A },

2059 { "œãr", 
A
|
L
, A|L },

2061 { "no", 
A
, 0 },

2062 { "yes", 
A
, A },

2064 { "nŸ_œãr", 
L
, 0 },

2065 { "œãr", 
L
, L },

2066 #unde‡
A


2067 #unde‡
L


2071 
	$mf_‰om_‰ag_°rög
(c⁄° *
s
, 
uöt8_t
 *
vÆuï
, uöt8_à*
maskp
)

2073 c⁄° 
‰ag_h™dlög
 *
h
;

2075 
h
 = 
Æl_‰ags
; h < &Æl_‰ags[
	`ARRAY_SIZE
(all_frags)]; h++) {

2076 i‡(!
	`°rˇ£cmp
(
s
, 
h
->
«me
)) {

2079 *
maskp
 = 
h
->
mask
 | ~
FLOW_NW_FRAG_MASK
;

2080 *
vÆuï
 = 
h
->
vÆue
;

2081  
NULL
;

2085  
	`xa•rötf
("%s: unknown fragmentÅype (validÅypesáre \"no\", "

2086 "\"yes\", \"fú°\", \"œãr\", \"nŸ_fú°\"", 
s
);

2087 
	}
}

2090 
∑r£_Êow_tun_Êags
(c⁄° *
s_
, c⁄° *(*
bô_to_°rög
)(
uöt32_t
),

2091 
ovs_be16
 *
ªs
)

2093 
uöt32_t
 
	gªsu…
 = 0;

2094 *
	gßve_±r
 = 
NULL
;

2095 *
	g«me
;

2096 
	grc
 = 0;

2097 *
	gs
 = 
x°rdup
(
s_
);

2099 
	g«me
 = 
°πok_r
((*)
s
, " |", &
ßve_±r
);Çame;

2100 
	g«me
 = 
°πok_r
(
NULL
, " |", &
ßve_±r
)) {

2101 
	g«me_Àn
;

2102 
	gÊags
;

2103 
uöt32_t
 
	gbô
;

2104 
	gn0
;

2106 i‡(
ssˇnf
(
«me
, "%Œi%n", &
Êags
, &
n0
Ë> 0 && 
	gn0
 > 0) {

2107 
	gªsu…
 |
Êags
;

2110 
	g«me_Àn
 = 
°æí
(
«me
);

2111 
	gbô
 = 1; bit; bit <<= 1) {

2112 c⁄° *
‚ame
 = 
bô_to_°rög
(
bô
);

2113 
size_t
 
	gÀn
;

2115 i‡(!
	g‚ame
) {

2119 
	gÀn
 = 
°æí
(
‚ame
);

2120 i‡(
	gÀn
 !
«me_Àn
) {

2123 i‡(!
°∫cmp
(
«me
, 
‚ame
, 
Àn
)) {

2124 
	gªsu…
 |
bô
;

2129 i‡(!
	gbô
) {

2130 
	grc
 = -
ENOENT
;

2131 
	gout
;

2135 *
	gªs
 = 
ht⁄s
(
ªsu…
);

2136 
	gout
:

2137 
‰ì
(
s
);

2138  
	grc
;

2142 
	$mf_‰om_tun_Êags_°rög
(c⁄° *
s
, 
ovs_be16
 *
vÆuï
, ovs_be16 *
maskp
)

2144 i‡(!
	`∑r£_Êow_tun_Êags
(
s
, 
Êow_tun_Êag_to_°rög
, 
vÆuï
)) {

2145 *
maskp
 = 
	`ht⁄s
(
UINT16_MAX
);

2146  
NULL
;

2149  
	`xa•rötf
("%s: unknownÅunnel flags (valid flagsáre \"df\", "

2150 "\"csum\", \"key\"", 
s
);

2151 
	}
}

2156 
	$mf_∑r£
(c⁄° 
mf_fõld
 *
mf
, c⁄° *
s
,

2157 
mf_vÆue
 *
vÆue
, mf_vÆuê*
mask
)

2159 i‡(!
	`°rˇ£cmp
(
s
, "™y"Ë|| !
	`°rcmp
(s, "*")) {

2160 
	`mem£t
(
vÆue
, 0, 
mf
->
n_byãs
);

2161 
	`mem£t
(
mask
, 0, 
mf
->
n_byãs
);

2162  
NULL
;

2165 
mf
->
°rög
) {

2166 
MFS_DECIMAL
:

2167 
MFS_HEXADECIMAL
:

2168  
	`mf_‰om_öãgî_°rög
(
mf
, 
s
,

2169 (
uöt8_t
 *Ë
vÆue
, (uöt8_à*Ë
mask
);

2171 
MFS_ETHERNET
:

2172  
	`mf_‰om_ëhî√t_°rög
(
mf
, 
s
, 
vÆue
->
mac
, 
mask
->mac);

2174 
MFS_IPV4
:

2175  
	`mf_‰om_ùv4_°rög
(
mf
, 
s
, &
vÆue
->
be32
, &
mask
->be32);

2177 
MFS_IPV6
:

2178  
	`mf_‰om_ùv6_°rög
(
mf
, 
s
, &
vÆue
->
ùv6
, &
mask
->ipv6);

2180 
MFS_OFP_PORT
:

2181  
	`mf_‰om_oÂ_p‹t_°rög
(
mf
, 
s
, &
vÆue
->
be16
, &
mask
->be16);

2183 
MFS_FRAG
:

2184  
	`mf_‰om_‰ag_°rög
(
s
, &
vÆue
->
u8
, &
mask
->u8);

2186 
MFS_TNL_FLAGS
:

2187 
	`as£π
(
mf
->
n_byãs
 =(
ovs_be16
));

2188  
	`mf_‰om_tun_Êags_°rög
(
s
, &
vÆue
->
be16
, &
mask
->be16);

2190 
	`NOT_REACHED
();

2191 
	}
}

2196 
	$mf_∑r£_vÆue
(c⁄° 
mf_fõld
 *
mf
, c⁄° *
s
, 
mf_vÆue
 *
vÆue
)

2198 
mf_vÆue
 
mask
;

2199 *
îr‹
;

2201 
îr‹
 = 
	`mf_∑r£
(
mf
, 
s
, 
vÆue
, &
mask
);

2202 i‡(
îr‹
) {

2203  
îr‹
;

2206 i‡(!
	`is_Æl_⁄es
((c⁄° 
uöt8_t
 *Ë&
mask
, 
mf
->
n_byãs
)) {

2207  
	`xa•rötf
("%s: wûdˇrd†nŸáŒowed hîe", 
s
);

2209  
NULL
;

2210 
	}
}

2213 
	$mf_f‹m©_öãgî_°rög
(c⁄° 
mf_fõld
 *
mf
, c⁄° 
uöt8_t
 *
vÆuï
,

2214 c⁄° 
uöt8_t
 *
maskp
, 
ds
 *
s
)

2216 
öãgî
;

2217 
i
;

2219 
	`as£π
(
mf
->
n_byãs
 <= 8);

2221 
öãgî
 = 0;

2222 
i
 = 0; i < 
mf
->
n_byãs
; i++) {

2223 
öãgî
 = (öãgî << 8Ë| 
vÆuï
[
i
];

2225 i‡(
mf
->
°rög
 =
MFS_HEXADECIMAL
) {

2226 
	`ds_put_f‹m©
(
s
, "%#Œx", 
öãgî
);

2228 
	`ds_put_f‹m©
(
s
, "%Œd", 
öãgî
);

2231 i‡(
maskp
) {

2232 
mask
;

2234 
mask
 = 0;

2235 
i
 = 0; i < 
mf
->
n_byãs
; i++) {

2236 
mask
 = (mask << 8Ë| 
maskp
[
i
];

2242 
	`ds_put_f‹m©
(
s
, "/%#Œx", 
mask
);

2244 
	}
}

2247 
	$mf_f‹m©_‰ag_°rög
(
uöt8_t
 
vÆue
, uöt8_à
mask
, 
ds
 *
s
)

2249 c⁄° 
‰ag_h™dlög
 *
h
;

2251 
mask
 &
FLOW_NW_FRAG_MASK
;

2252 
vÆue
 &
mask
;

2254 
h
 = 
Æl_‰ags
; h < &Æl_‰ags[
	`ARRAY_SIZE
(all_frags)]; h++) {

2255 i‡(
vÆue
 =
h
->vÆuê&& 
mask
 == h->mask) {

2256 
	`ds_put_c°r
(
s
, 
h
->
«me
);

2260 
	`ds_put_c°r
(
s
, "<error>");

2261 
	}
}

2264 
	$mf_f‹m©_äl_Êags_°rög
(c⁄° 
ovs_be16
 *
vÆuï
, 
ds
 *
s
)

2266 
	`f‹m©_Êags
(
s
, 
Êow_tun_Êag_to_°rög
, 
	`¡ohs
(*
vÆuï
), '|');

2267 
	}
}

2272 
	$mf_f‹m©
(c⁄° 
mf_fõld
 *
mf
,

2273 c⁄° 
mf_vÆue
 *
vÆue
, c⁄° mf_vÆuê*
mask
,

2274 
ds
 *
s
)

2276 i‡(
mask
) {

2277 i‡(
	`is_Æl_zîos
((c⁄° 
uöt8_t
 *Ë
mask
, 
mf
->
n_byãs
)) {

2278 
	`ds_put_c°r
(
s
, "ANY");

2280 } i‡(
	`is_Æl_⁄es
((c⁄° 
uöt8_t
 *Ë
mask
, 
mf
->
n_byãs
)) {

2281 
mask
 = 
NULL
;

2285 
mf
->
°rög
) {

2286 
MFS_OFP_PORT
:

2287 i‡(!
mask
) {

2288 
	`oÂutû_f‹m©_p‹t
(
	`¡ohs
(
vÆue
->
be16
), 
s
);

2292 
MFS_DECIMAL
:

2293 
MFS_HEXADECIMAL
:

2294 
	`mf_f‹m©_öãgî_°rög
(
mf
, (
uöt8_t
 *Ë
vÆue
, (uöt8_à*Ë
mask
, 
s
);

2297 
MFS_ETHERNET
:

2298 
	`ëh_f‹m©_masked
(
vÆue
->
mac
, 
mask
->mac, 
s
);

2301 
MFS_IPV4
:

2302 
	`ù_f‹m©_masked
(
vÆue
->
be32
, 
mask
 ? mask->be32 : 
	`ht⁄l
(
UINT32_MAX
),

2303 
s
);

2306 
MFS_IPV6
:

2307 
	`¥öt_ùv6_masked
(
s
, &
vÆue
->
ùv6
, 
mask
 ? &mask->ùv6 : 
NULL
);

2310 
MFS_FRAG
:

2311 
	`mf_f‹m©_‰ag_°rög
(
vÆue
->
u8
, 
mask
 ? mask->u8 : 
UINT8_MAX
, 
s
);

2314 
MFS_TNL_FLAGS
:

2315 
	`mf_f‹m©_äl_Êags_°rög
(&
vÆue
->
be16
, 
s
);

2319 
	`NOT_REACHED
();

2321 
	}
}

2327 
	$mf_wrôe_subfõld_Êow
(c⁄° 
mf_subfõld
 *
sf
,

2328 c⁄° 
mf_subvÆue
 *
x
, 
Êow
 *flow)

2330 c⁄° 
mf_fõld
 *
fõld
 = 
sf
->field;

2331 
mf_vÆue
 
vÆue
;

2333 
	`mf_gë_vÆue
(
fõld
, 
Êow
, &
vÆue
);

2334 
	`bôwi£_c›y
(
x
,  *x, 0, &
vÆue
, 
fõld
->
n_byãs
,

2335 
sf
->
ofs
, sf->
n_bôs
);

2336 
	`mf_£t_Êow_vÆue
(
fõld
, &
vÆue
, 
Êow
);

2337 
	}
}

2343 
	$mf_wrôe_subfõld
(c⁄° 
mf_subfõld
 *
sf
, c⁄° 
mf_subvÆue
 *
x
,

2344 
m©ch
 *match)

2346 c⁄° 
mf_fõld
 *
fõld
 = 
sf
->field;

2347 
mf_vÆue
 
vÆue
, 
mask
;

2349 
	`mf_gë
(
fõld
, 
m©ch
, &
vÆue
, &
mask
);

2350 
	`bôwi£_c›y
(
x
,  *x, 0, &
vÆue
, 
fõld
->
n_byãs
, 
sf
->
ofs
, sf->
n_bôs
);

2351 
	`bôwi£_⁄e
 ( &
mask
, 
fõld
->
n_byãs
, 
sf
->
ofs
, sf->
n_bôs
);

2352 
	`mf_£t
(
fõld
, &
vÆue
, &
mask
, 
m©ch
);

2353 
	}
}

2358 
	$mf_ªad_subfõld
(c⁄° 
mf_subfõld
 *
sf
, c⁄° 
Êow
 *flow,

2359 
mf_subvÆue
 *
x
)

2361 
mf_vÆue
 
vÆue
;

2363 
	`mf_gë_vÆue
(
sf
->
fõld
, 
Êow
, &
vÆue
);

2365 
	`mem£t
(
x
, 0,  *x);

2366 
	`bôwi£_c›y
(&
vÆue
, 
sf
->
fõld
->
n_byãs
, sf->
ofs
,

2367 
x
,  *x, 0,

2368 
sf
->
n_bôs
);

2369 
	}
}

2374 
uöt64_t


2375 
	$mf_gë_subfõld
(c⁄° 
mf_subfõld
 *
sf
, c⁄° 
Êow
 *flow)

2377 
mf_vÆue
 
vÆue
;

2379 
	`mf_gë_vÆue
(
sf
->
fõld
, 
Êow
, &
vÆue
);

2380  
	`bôwi£_gë
(&
vÆue
, 
sf
->
fõld
->
n_byãs
, sf->
ofs
, sf->
n_bôs
);

2381 
	}
}

2387 
	$mf_f‹m©_subfõld
(c⁄° 
mf_subfõld
 *
sf
, 
ds
 *
s
)

2389 i‡(!
sf
->
fõld
) {

2390 
	`ds_put_c°r
(
s
, "<unknown>");

2391 } i‡(
sf
->
fõld
->
nxm_«me
) {

2392 
	`ds_put_c°r
(
s
, 
sf
->
fõld
->
nxm_«me
);

2393 } i‡(
sf
->
fõld
->
nxm_hódî
) {

2394 
uöt32_t
 
hódî
 = 
sf
->
fõld
->
nxm_hódî
;

2395 
	`ds_put_f‹m©
(
s
, "%d:%d", 
	`NXM_VENDOR
(
hódî
), 
	`NXM_FIELD
(header));

2397 
	`ds_put_c°r
(
s
, 
sf
->
fõld
->
«me
);

2400 i‡(
sf
->
fõld
 && sf->
ofs
 =0 && sf->
n_bôs
 == sf->field->n_bits) {

2401 
	`ds_put_c°r
(
s
, "[]");

2402 } i‡(
sf
->
n_bôs
 == 1) {

2403 
	`ds_put_f‹m©
(
s
, "[%d]", 
sf
->
ofs
);

2405 
	`ds_put_f‹m©
(
s
, "[%d..%d]", 
sf
->
ofs
, sf->of†+ sf->
n_bôs
 - 1);

2407 
	}
}

2409 c⁄° 
mf_fõld
 *

2410 
	$mf_∑r£_subfõld_«me
(c⁄° *
«me
, 
«me_Àn
, 
boﬁ
 *
wûd
)

2412 
i
;

2414 *
wûd
 = 
«me_Àn
 > 2 && !
	`memcmp
(&
«me
[name_len - 2], "_W", 2);

2415 i‡(*
wûd
) {

2416 
«me_Àn
 -= 2;

2419 
i
 = 0; i < 
MFF_N_IDS
; i++) {

2420 c⁄° 
mf_fõld
 *
mf
 = 
	`mf_‰om_id
(
i
);

2422 i‡(
mf
->
nxm_«me


2423 && !
	`°∫cmp
(
mf
->
nxm_«me
, 
«me
, 
«me_Àn
)

2424 && 
mf
->
nxm_«me
[
«me_Àn
] == '\0') {

2425  
mf
;

2427 i‡(
mf
->
oxm_«me


2428 && !
	`°∫cmp
(
mf
->
oxm_«me
, 
«me
, 
«me_Àn
)

2429 && 
mf
->
oxm_«me
[
«me_Àn
] == '\0') {

2430  
mf
;

2434  
NULL
;

2435 
	}
}

2448 
	$mf_∑r£_subfõld__
(
mf_subfõld
 *
sf
, c⁄° **
•
)

2450 c⁄° 
mf_fõld
 *
fõld
;

2451 c⁄° *
«me
;

2452 
°¨t
, 
íd
;

2453 c⁄° *
s
;

2454 
«me_Àn
;

2455 
boﬁ
 
wûd
;

2457 
s
 = *
•
;

2458 
«me
 = 
s
;

2459 
«me_Àn
 = 
	`°rc•n
(
s
, "[");

2460 i‡(
s
[
«me_Àn
] != '[') {

2461  
	`xa•rötf
("%s: missög [Üookög f‹ fõldÇame", *
•
);

2464 
fõld
 = 
	`mf_∑r£_subfõld_«me
(
«me
, 
«me_Àn
, &
wûd
);

2465 i‡(!
fõld
) {

2466  
	`xa•rötf
("%s: unknow¿fõld `%.*s'", *
•
, 
«me_Àn
, 
s
);

2469 
s
 +
«me_Àn
;

2470 i‡(
	`ssˇnf
(
s
, "[%d..%d]", &
°¨t
, &
íd
) == 2) {

2472 } i‡(
	`ssˇnf
(
s
, "[%d]", &
°¨t
) == 1) {

2473 
íd
 = 
°¨t
;

2474 } i‡(!
	`°∫cmp
(
s
, "[]", 2)) {

2475 
°¨t
 = 0;

2476 
íd
 = 
fõld
->
n_bôs
 - 1;

2478  
	`xa•rötf
("%s: syntaxÉrrorÉxpecting [] or [<bit>] or "

2479 "[<°¨t>..<íd>]", *
•
);

2481 
s
 = 
	`°rchr
(s, ']') + 1;

2483 i‡(
°¨t
 > 
íd
) {

2484  
	`xa•rötf
("%s: starting bit %d isáfterÉnding bit %d",

2485 *
•
, 
°¨t
, 
íd
);

2486 } i‡(
°¨t
 >
fõld
->
n_bôs
) {

2487  
	`xa•rötf
("%s: starting bit %d isÇot valid because field is "

2488 "⁄ly %d bô†wide", *
•
, 
°¨t
, 
fõld
->
n_bôs
);

2489 } i‡(
íd
 >
fõld
->
n_bôs
){

2490  
	`xa•rötf
("%s:Énding bit %d isÇot valid because field is "

2491 "⁄ly %d bô†wide", *
•
, 
íd
, 
fõld
->
n_bôs
);

2494 
sf
->
fõld
 = field;

2495 
sf
->
ofs
 = 
°¨t
;

2496 
sf
->
n_bôs
 = 
íd
 - 
°¨t
 + 1;

2498 *
•
 = 
s
;

2499  
NULL
;

2500 
	}
}

2513 
	$mf_∑r£_subfõld
(
mf_subfõld
 *
sf
, c⁄° *
s
)

2515 *
msg
 = 
	`mf_∑r£_subfõld__
(
sf
, &
s
);

2516 i‡(
msg
) {

2517 
	`ovs_Áèl
(0, "%s", 
msg
);

2519  
s
;

2520 
	}
}

2523 
	$mf_f‹m©_subvÆue
(c⁄° 
mf_subvÆue
 *
subvÆue
, 
ds
 *
s
)

2525 
i
;

2527 
i
 = 0; i < 
	`ARRAY_SIZE
(
subvÆue
->
u8
); i++) {

2528 i‡(
subvÆue
->
u8
[
i
]) {

2529 
	`ds_put_f‹m©
(
s
, "0x%"
PRIx8
, 
subvÆue
->
u8
[
i
]);

2530 
i
++; i < 
	`ARRAY_SIZE
(
subvÆue
->
u8
); i++) {

2531 
	`ds_put_f‹m©
(
s
, "%02"
PRIx8
, 
subvÆue
->
u8
[
i
]);

2536 
	`ds_put_ch¨
(
s
, '0');

2537 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/meta-flow.h

17 #i‚de‡
META_FLOW_H


18 
	#META_FLOW_H
 1

	)

20 
	~<sys/ty≥s.h
>

21 
	~<√töë/ö.h
>

22 
	~<√töë/ù6.h
>

23 
	~"Êow.h
"

24 
	~"oÂ-îr‹s.h
"

25 
	~"∑ckës.h
"

27 
	gds
;

28 
	gm©ch
;

32 
	emf_fõld_id
 {

34 
	mMFF_TUN_ID
,

35 
	mMFF_TUN_SRC
,

36 
	mMFF_TUN_DST
,

37 
	mMFF_TUN_FLAGS
,

38 
	mMFF_TUN_TTL
,

39 
	mMFF_TUN_TOS
,

40 
	mMFF_METADATA
,

41 
	mMFF_IN_PORT
,

42 
	mMFF_SKB_PRIORITY
,

43 
	mMFF_SKB_MARK
,

45 #i‡
FLOW_N_REGS
 > 0

46 
	mMFF_REG0
,

48 #i‡
FLOW_N_REGS
 > 1

49 
	mMFF_REG1
,

51 #i‡
FLOW_N_REGS
 > 2

52 
	mMFF_REG2
,

54 #i‡
FLOW_N_REGS
 > 3

55 
	mMFF_REG3
,

57 #i‡
FLOW_N_REGS
 > 4

58 
	mMFF_REG4
,

60 #i‡
FLOW_N_REGS
 > 5

61 
	mMFF_REG5
,

63 #i‡
FLOW_N_REGS
 > 6

64 
	mMFF_REG6
,

66 #i‡
FLOW_N_REGS
 > 7

67 
	mMFF_REG7
,

71 
	mMFF_ETH_SRC
,

72 
	mMFF_ETH_DST
,

73 
	mMFF_ETH_TYPE
,

75 
	mMFF_VLAN_TCI
,

76 
	mMFF_DL_VLAN
,

77 
	mMFF_VLAN_VID
,

78 
	mMFF_DL_VLAN_PCP
,

79 
	mMFF_VLAN_PCP
,

82 
	mMFF_IPV4_SRC
,

83 
	mMFF_IPV4_DST
,

85 
	mMFF_IPV6_SRC
,

86 
	mMFF_IPV6_DST
,

87 
	mMFF_IPV6_LABEL
,

89 
	mMFF_IP_PROTO
,

90 
	mMFF_IP_DSCP
,

91 
	mMFF_IP_ECN
,

92 
	mMFF_IP_TTL
,

93 
	mMFF_IP_FRAG
,

95 
	mMFF_ARP_OP
,

96 
	mMFF_ARP_SPA
,

97 
	mMFF_ARP_TPA
,

98 
	mMFF_ARP_SHA
,

99 
	mMFF_ARP_THA
,

102 
	mMFF_TCP_SRC
,

103 
	mMFF_TCP_DST
,

105 
	mMFF_UDP_SRC
,

106 
	mMFF_UDP_DST
,

108 
	mMFF_ICMPV4_TYPE
,

109 
	mMFF_ICMPV4_CODE
,

111 
	mMFF_ICMPV6_TYPE
,

112 
	mMFF_ICMPV6_CODE
,

115 
	mMFF_ND_TARGET
,

116 
	mMFF_ND_SLL
,

117 
	mMFF_ND_TLL
,

119 
	mMFF_N_IDS


124 #i‡
FLOW_N_REGS
 == 1

125 
	#CASE_MFF_REGS
 \

126 
MFF_REG0


	)

127 #ñi‡
FLOW_N_REGS
 == 2

128 
	#CASE_MFF_REGS
 \

129 
MFF_REG0
: 
MFF_REG1


	)

130 #ñi‡
FLOW_N_REGS
 == 3

131 
	#CASE_MFF_REGS
 \

132 
MFF_REG0
: 
MFF_REG1
: 
MFF_REG2


	)

133 #ñi‡
FLOW_N_REGS
 == 4

134 
	#CASE_MFF_REGS
 \

135 
MFF_REG0
: 
MFF_REG1
: 
MFF_REG2
: 
MFF_REG3


	)

136 #ñi‡
FLOW_N_REGS
 == 5

137 
	#CASE_MFF_REGS
 \

138 
MFF_REG0
: 
MFF_REG1
: 
MFF_REG2
: 
MFF_REG3
: \

139 
MFF_REG4


	)

140 #ñi‡
FLOW_N_REGS
 == 6

141 
	#CASE_MFF_REGS
 \

142 
MFF_REG0
: 
MFF_REG1
: 
MFF_REG2
: 
MFF_REG3
: \

143 
MFF_REG4
: 
MFF_REG5


	)

144 #ñi‡
FLOW_N_REGS
 == 7

145 
	#CASE_MFF_REGS
 \

146 
MFF_REG0
: 
MFF_REG1
: 
MFF_REG2
: 
MFF_REG3
: \

147 
MFF_REG4
: 
MFF_REG5
: 
MFF_REG6


	)

148 #ñi‡
FLOW_N_REGS
 == 8

149 
	#CASE_MFF_REGS
 \

150 
MFF_REG0
: 
MFF_REG1
: 
MFF_REG2
: 
MFF_REG3
: \

151 
MFF_REG4
: 
MFF_REG5
: 
MFF_REG6
: 
MFF_REG7


	)

161 
	emf_¥îeqs
 {

162 
	mMFP_NONE
,

165 
	mMFP_ARP
,

166 
	mMFP_VLAN_VID
,

167 
	mMFP_IPV4
,

168 
	mMFP_IPV6
,

169 
	mMFP_IP_ANY
,

172 
	mMFP_TCP
,

173 
	mMFP_UDP
,

174 
	mMFP_ICMPV4
,

175 
	mMFP_ICMPV6
,

178 
	mMFP_ND
,

179 
	mMFP_ND_SOLICIT
,

180 
	mMFP_ND_ADVERT


186 
	emf_maskabÀ
 {

187 
	mMFM_NONE
,

188 
	mMFM_FULLY
,

192 
	emf_°rög
 {

197 
	mMFS_DECIMAL
,

198 
	mMFS_HEXADECIMAL
,

201 
	mMFS_ETHERNET
,

202 
	mMFS_IPV4
,

203 
	mMFS_IPV6
,

204 
	mMFS_OFP_PORT
,

205 
	mMFS_FRAG
,

206 
	mMFS_TNL_FLAGS
,

209 
	smf_fõld
 {

211 
mf_fõld_id
 
	mid
;

212 c⁄° *
	m«me
;

213 c⁄° *
	mexåa_«me
;

224 
	mn_byãs
;

225 
	mn_bôs
;

228 
mf_maskabÀ
 
	mmaskabÀ
;

229 
mf_°rög
 
	m°rög
;

230 
mf_¥îeqs
 
	m¥îeqs
;

231 
boﬁ
 
	mwrôabÀ
;

253 
uöt32_t
 
	mnxm_hódî
;

254 c⁄° *
	mnxm_«me
;

255 
uöt32_t
 
	moxm_hódî
;

256 c⁄° *
	moxm_«me
;

260 
	umf_vÆue
 {

261 
uöt8_t
 
	mu8
;

262 
ovs_be16
 
	mbe16
;

263 
ovs_be32
 
	mbe32
;

264 
ovs_be64
 
	mbe64
;

265 
uöt8_t
 
	mmac
[
ETH_ADDR_LEN
];

266 
ö6_addr
 
	mùv6
;

268 
BUILD_ASSERT_DECL
((
mf_vÆue
) == 16);

271 
	smf_subfõld
 {

272 c⁄° 
mf_fõld
 *
	mfõld
;

273 
	mofs
;

274 
	mn_bôs
;

282 
	umf_subvÆue
 {

283 
uöt8_t
 
	mu8
[16];

284 
ovs_be16
 
	mbe16
[8];

285 
ovs_be32
 
	mbe32
[4];

286 
ovs_be64
 
	mbe64
[2];

288 
BUILD_ASSERT_DECL
((
mf_vÆue
Ë= (
mf_subvÆue
));

291 c⁄° 
mf_fõld
 *
mf_‰om_id
(
mf_fõld_id
);

292 c⁄° 
mf_fõld
 *
mf_‰om_«me
(c⁄° *
«me
);

293 c⁄° 
mf_fõld
 *
mf_‰om_nxm_hódî
(
uöt32_t
 
nxm_hódî
);

294 c⁄° 
mf_fõld
 *
mf_‰om_nxm_«me
(c⁄° *
nxm_«me
);

297 
boﬁ
 
mf_is_Æl_wûd
(c⁄° 
mf_fõld
 *, c⁄° 
Êow_wûdˇrds
 *);

299 
boﬁ
 
mf_is_mask_vÆid
(c⁄° 
mf_fõld
 *, c⁄° 
mf_vÆue
 *
mask
);

300 
mf_gë_mask
(c⁄° 
mf_fõld
 *, c⁄° 
Êow_wûdˇrds
 *,

301 
mf_vÆue
 *
mask
);

304 
boﬁ
 
mf_¨e_¥îeqs_ok
(c⁄° 
mf_fõld
 *, c⁄° 
Êow
 *);

305 
mf_f‹˚_¥îeqs
(c⁄° 
mf_fõld
 *, 
m©ch
 *);

308 
boﬁ
 
mf_is_vÆue_vÆid
(c⁄° 
mf_fõld
 *, c⁄° 
mf_vÆue
 *
vÆue
);

310 
mf_gë_vÆue
(c⁄° 
mf_fõld
 *, c⁄° 
Êow
 *,

311 
mf_vÆue
 *
vÆue
);

312 
mf_£t_vÆue
(c⁄° 
mf_fõld
 *, c⁄° 
mf_vÆue
 *
vÆue
,

313 
m©ch
 *);

314 
mf_£t_Êow_vÆue
(c⁄° 
mf_fõld
 *, c⁄° 
mf_vÆue
 *
vÆue
,

315 
Êow
 *);

316 
boﬁ
 
mf_is_zîo
(c⁄° 
mf_fõld
 *, c⁄° 
Êow
 *);

318 
mf_gë
(c⁄° 
mf_fõld
 *, c⁄° 
m©ch
 *,

319 
mf_vÆue
 *
vÆue
, mf_vÆuê*
mask
);

320 
mf_£t
(c⁄° 
mf_fõld
 *,

321 c⁄° 
mf_vÆue
 *
vÆue
, c⁄° mf_vÆuê*
mask
,

322 
m©ch
 *);

324 
mf_£t_wûd
(c⁄° 
mf_fõld
 *, 
m©ch
 *);

326 
mf_øndom_vÆue
(c⁄° 
mf_fõld
 *, 
mf_vÆue
 *
vÆue
);

329 
mf_wrôe_subfõld_Êow
(c⁄° 
mf_subfõld
 *,

330 c⁄° 
mf_subvÆue
 *, 
Êow
 *);

331 
mf_wrôe_subfõld
(c⁄° 
mf_subfõld
 *, c⁄° 
mf_subvÆue
 *,

332 
m©ch
 *);

334 
mf_ªad_subfõld
(c⁄° 
mf_subfõld
 *, c⁄° 
Êow
 *,

335 
mf_subvÆue
 *);

336 
uöt64_t
 
mf_gë_subfõld
(c⁄° 
mf_subfõld
 *, c⁄° 
Êow
 *);

339 
mf_f‹m©_subfõld
(c⁄° 
mf_subfõld
 *, 
ds
 *);

340 *
mf_∑r£_subfõld__
(
mf_subfõld
 *
sf
, c⁄° **
s
);

341 c⁄° *
mf_∑r£_subfõld
(
mf_subfõld
 *, const *);

343 
oÂîr
 
mf_check_§c
(c⁄° 
mf_subfõld
 *, c⁄° 
Êow
 *);

344 
oÂîr
 
mf_check_d°
(c⁄° 
mf_subfõld
 *, c⁄° 
Êow
 *);

347 *
mf_∑r£
(c⁄° 
mf_fõld
 *, const *,

348 
mf_vÆue
 *
vÆue
, mf_vÆuê*
mask
);

349 *
mf_∑r£_vÆue
(c⁄° 
mf_fõld
 *, c⁄° *, 
mf_vÆue
 *);

350 
mf_f‹m©
(c⁄° 
mf_fõld
 *,

351 c⁄° 
mf_vÆue
 *
vÆue
, c⁄° mf_vÆuê*
mask
,

352 
ds
 *);

353 
mf_f‹m©_subvÆue
(c⁄° 
mf_subvÆue
 *
subvÆue
, 
ds
 *
s
);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/multipath.c

17 
	~<c⁄fig.h
>

19 
	~"mu…ù©h.h
"

20 
	~<¨∑/öë.h
>

21 
	~<öây≥s.h
>

22 
	~<sys/ty≥s.h
>

23 
	~<√töë/ö.h
>

24 
	~"dy«mic-°rög.h
"

25 
	~"nx-m©ch.h
"

26 
	~"oÂ-a˘i⁄s.h
"

27 
	~"oÂ-îr‹s.h
"

28 
	~"oÂ-utû.h
"

29 
	~"›íÊow/nicúa-ext.h
"

30 
	~"∑ckës.h
"

31 
	~"vlog.h
"

33 
VLOG_DEFINE_THIS_MODULE
(
mu…ù©h
);

35 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(1, 5);

39 
oÂîr


40 
	$mu…ù©h_‰om_›íÊow
(c⁄° 
nx_a˘i⁄_mu…ù©h
 *
«m
,

41 
oÂa˘_mu…ù©h
 *
mp
)

43 
uöt32_t
 
n_löks
 = 
	`¡ohs
(
«m
->
max_lök
) + 1;

44 
size_t
 
mö_n_bôs
 = 
	`log_2_˚û
(
n_löks
);

46 
	`oÂa˘_öô_MULTIPATH
(
mp
);

47 
mp
->
fõlds
 = 
	`¡ohs
(
«m
->fields);

48 
mp
->
basis
 = 
	`¡ohs
(
«m
->basis);

49 
mp
->
Æg‹ôhm
 = 
	`¡ohs
(
«m
->algorithm);

50 
mp
->
max_lök
 = 
	`¡ohs
(
«m
->max_link);

51 
mp
->
¨g
 = 
	`¡ohl
(
«m
->arg);

52 
mp
->
d°
.
fõld
 = 
	`mf_‰om_nxm_hódî
(
	`¡ohl
(
«m
->dst));

53 
mp
->
d°
.
ofs
 = 
	`nxm_decode_ofs
(
«m
->
ofs_nbôs
);

54 
mp
->
d°
.
n_bôs
 = 
	`nxm_decode_n_bôs
(
«m
->
ofs_nbôs
);

56 i‡(!
	`Êow_hash_fõlds_vÆid
(
mp
->
fõlds
)) {

57 
	`VLOG_WARN_RL
(&
æ
, "unsuµ‹ãd fõld†%d", (Ë
mp
->
fõlds
);

58  
OFPERR_OFPBAC_BAD_ARGUMENT
;

59 } i‡(
mp
->
Æg‹ôhm
 !
NX_MP_ALG_MODULO_N


60 && 
mp
->
Æg‹ôhm
 !
NX_MP_ALG_HASH_THRESHOLD


61 && 
mp
->
Æg‹ôhm
 !
NX_MP_ALG_HRW


62 && 
mp
->
Æg‹ôhm
 !
NX_MP_ALG_ITER_HASH
) {

63 
	`VLOG_WARN_RL
(&
æ
, "unsuµ‹ãdálg‹ôhm %d", (Ë
mp
->
Æg‹ôhm
);

64  
OFPERR_OFPBAC_BAD_ARGUMENT
;

65 } i‡(
mp
->
d°
.
n_bôs
 < 
mö_n_bôs
) {

66 
	`VLOG_WARN_RL
(&
æ
, "multipatháctionÑequiresátÜeast %zu bits for "

67 "%"
PRIu32
"Üöks", 
mö_n_bôs
, 
n_löks
);

68  
OFPERR_OFPBAC_BAD_ARGUMENT
;

71  
	`mu…ù©h_check
(
mp
, 
NULL
);

72 
	}
}

76 
oÂîr


77 
	$mu…ù©h_check
(c⁄° 
oÂa˘_mu…ù©h
 *
mp
,

78 c⁄° 
Êow
 *flow)

80  
	`mf_check_d°
(&
mp
->
d°
, 
Êow
);

81 
	}
}

86 
	$mu…ù©h_to_nxa°
(c⁄° 
oÂa˘_mu…ù©h
 *
mp
, 
oÂbuf
 *
›íÊow
)

88 
nx_a˘i⁄_mu…ù©h
 *
«m
 = 
	`oÂutû_put_NXAST_MULTIPATH
(
›íÊow
);

90 
«m
->
fõlds
 = 
	`ht⁄s
(
mp
->fields);

91 
«m
->
basis
 = 
	`ht⁄s
(
mp
->basis);

92 
«m
->
Æg‹ôhm
 = 
	`ht⁄s
(
mp
->algorithm);

93 
«m
->
max_lök
 = 
	`ht⁄s
(
mp
->max_link);

94 
«m
->
¨g
 = 
	`ht⁄l
(
mp
->arg);

95 
«m
->
ofs_nbôs
 = 
	`nxm_ícode_ofs_nbôs
(
mp
->
d°
.
ofs
, mp->d°.
n_bôs
);

96 
«m
->
d°
 = 
	`ht⁄l
(
mp
->d°.
fõld
->
nxm_hódî
);

97 
	}
}

101 
uöt16_t
 
mu…ù©h_Æg‹ôhm
(
uöt32_t
 
hash
, 
nx_mp_Æg‹ôhm
,

102 
n_löks
, 
¨g
);

107 
	$mu…ù©h_execuã
(c⁄° 
oÂa˘_mu…ù©h
 *
mp
, 
Êow
 *flow)

110 
uöt32_t
 
hash
 = 
	`Êow_hash_fõlds
(
Êow
, 
mp
->
fõlds
, mp->
basis
);

111 
uöt16_t
 
lök
 = 
	`mu…ù©h_Æg‹ôhm
(
hash
, 
mp
->
Æg‹ôhm
,

112 
mp
->
max_lök
 + 1, mp->
¨g
);

114 
	`nxm_ªg_lﬂd
(&
mp
->
d°
, 
lök
, 
Êow
);

115 
	}
}

117 
uöt16_t


118 
	$Æg‹ôhm_hrw
(
uöt32_t
 
hash
, 
n_löks
)

120 
uöt32_t
 
be°_weight
;

121 
uöt16_t
 
be°_lök
;

122 
lök
;

124 
be°_lök
 = 0;

125 
be°_weight
 = 
	`hash_2w‹ds
(
hash
, 0);

126 
lök
 = 1;Üök < 
n_löks
;Üink++) {

127 
uöt32_t
 
weight
 = 
	`hash_2w‹ds
(
hash
, 
lök
);

128 i‡(
weight
 > 
be°_weight
) {

129 
be°_lök
 = 
lök
;

130 
be°_weight
 = 
weight
;

133  
be°_lök
;

134 
	}
}

138 
	$round_up_pow2
(
x
)

140 
x
--;

141 
x
 |= x >> 1;

142 
x
 |= x >> 2;

143 
x
 |= x >> 4;

144 
x
 |= x >> 8;

145  
x
 + 1;

146 
	}
}

148 
uöt16_t


149 
	$Æg‹ôhm_ôî_hash
(
uöt32_t
 
hash
, 
n_löks
, 
modulo
)

151 
uöt16_t
 
lök
;

152 
i
;

154 i‡(
modulo
 < 
n_löks
 || modulo / 2 >Ç_links) {

155 
modulo
 = 
	`round_up_pow2
(
n_löks
);

158 
i
 = 0;

160 
lök
 = 
	`hash_2w‹ds
(
hash
, 
i
++Ë% 
modulo
;

161 } 
lök
 >
n_löks
);

163  
lök
;

164 
	}
}

166 
uöt16_t


167 
	$mu…ù©h_Æg‹ôhm
(
uöt32_t
 
hash
, 
nx_mp_Æg‹ôhm
 
Æg‹ôhm
,

168 
n_löks
, 
¨g
)

170 
Æg‹ôhm
) {

171 
NX_MP_ALG_MODULO_N
:

172  
hash
 % 
n_löks
;

174 
NX_MP_ALG_HASH_THRESHOLD
:

175 i‡(
n_löks
 == 1) {

178  
hash
 / (
UINT32_MAX
 / 
n_löks
 + 1);

180 
NX_MP_ALG_HRW
:

181  (
n_löks
 <= 64

182 ? 
	`Æg‹ôhm_hrw
(
hash
, 
n_löks
)

183 : 
	`Æg‹ôhm_ôî_hash
(
hash
, 
n_löks
, 0));

185 
NX_MP_ALG_ITER_HASH
:

186  
	`Æg‹ôhm_ôî_hash
(
hash
, 
n_löks
, 
¨g
);

189 
	`NOT_REACHED
();

190 
	}
}

198 
	$mu…ù©h_∑r£
(
oÂa˘_mu…ù©h
 *
mp
, c⁄° *
s_
)

200 *
s
 = 
	`x°rdup
(
s_
);

201 *
ßve_±r
 = 
NULL
;

202 *
fõlds
, *
basis
, *
Æg‹ôhm
, *
n_löks_°r
, *
¨g
, *
d°
;

203 
n_löks
;

205 
fõlds
 = 
	`°πok_r
(
s
, ", ", &
ßve_±r
);

206 
basis
 = 
	`°πok_r
(
NULL
, ", ", &
ßve_±r
);

207 
Æg‹ôhm
 = 
	`°πok_r
(
NULL
, ", ", &
ßve_±r
);

208 
n_löks_°r
 = 
	`°πok_r
(
NULL
, ", ", &
ßve_±r
);

209 
¨g
 = 
	`°πok_r
(
NULL
, ", ", &
ßve_±r
);

210 
d°
 = 
	`°πok_r
(
NULL
, ", ", &
ßve_±r
);

211 i‡(!
d°
) {

212 
	`ovs_Áèl
(0, "%s:ÇŸÉnoughárgumít†tÿmu…ù©há˘i⁄", 
s_
);

215 
	`oÂa˘_öô_MULTIPATH
(
mp
);

216 i‡(!
	`°rˇ£cmp
(
fõlds
, "eth_src")) {

217 
mp
->
fõlds
 = 
NX_HASH_FIELDS_ETH_SRC
;

218 } i‡(!
	`°rˇ£cmp
(
fõlds
, "symmetric_l4")) {

219 
mp
->
fõlds
 = 
NX_HASH_FIELDS_SYMMETRIC_L4
;

221 
	`ovs_Áèl
(0, "%s: unknow¿fõld†`%s'", 
s_
, 
fõlds
);

223 
mp
->
basis
 = 
	`©oi
(basis);

224 i‡(!
	`°rˇ£cmp
(
Æg‹ôhm
, "modulo_n")) {

225 
mp
->
Æg‹ôhm
 = 
NX_MP_ALG_MODULO_N
;

226 } i‡(!
	`°rˇ£cmp
(
Æg‹ôhm
, "hash_threshold")) {

227 
mp
->
Æg‹ôhm
 = 
NX_MP_ALG_HASH_THRESHOLD
;

228 } i‡(!
	`°rˇ£cmp
(
Æg‹ôhm
, "hrw")) {

229 
mp
->
Æg‹ôhm
 = 
NX_MP_ALG_HRW
;

230 } i‡(!
	`°rˇ£cmp
(
Æg‹ôhm
, "iter_hash")) {

231 
mp
->
Æg‹ôhm
 = 
NX_MP_ALG_ITER_HASH
;

233 
	`ovs_Áèl
(0, "%s: unknow¿Æg‹ôhm `%s'", 
s_
, 
Æg‹ôhm
);

235 
n_löks
 = 
	`©oi
(
n_löks_°r
);

236 i‡(
n_löks
 < 1 ||Ç_links > 65536) {

237 
	`ovs_Áèl
(0, "%s:Ç_links %d isÇot in validÑange 1Åo 65536",

238 
s_
, 
n_löks
);

240 
mp
->
max_lök
 = 
n_löks
 - 1;

241 
mp
->
¨g
 = 
	`©oi
(arg);

243 
	`mf_∑r£_subfõld
(&
mp
->
d°
, dst);

244 i‡(
mp
->
d°
.
n_bôs
 < 16 && 
n_löks
 > (1u << mp->dst.n_bits)) {

245 
	`ovs_Áèl
(0, "%s: %d-bit destination field has %uÖossible values, "

247 
s_
, 
mp
->
d°
.
n_bôs
, 1u << mp->d°.n_bôs, 
n_löks
);

250 
	`‰ì
(
s
);

251 
	}
}

256 
	$mu…ù©h_f‹m©
(c⁄° 
oÂa˘_mu…ù©h
 *
mp
, 
ds
 *
s
)

258 c⁄° *
fõlds
, *
Æg‹ôhm
;

260 
fõlds
 = 
	`Êow_hash_fõlds_to_°r
(
mp
->fields);

262 
mp
->
Æg‹ôhm
) {

263 
NX_MP_ALG_MODULO_N
:

264 
Æg‹ôhm
 = "modulo_n";

266 
NX_MP_ALG_HASH_THRESHOLD
:

267 
Æg‹ôhm
 = "hash_threshold";

269 
NX_MP_ALG_HRW
:

270 
Æg‹ôhm
 = "hrw";

272 
NX_MP_ALG_ITER_HASH
:

273 
Æg‹ôhm
 = "iter_hash";

276 
Æg‹ôhm
 = "<unknown>";

279 
	`ds_put_f‹m©
(
s
, "mu…ù©h(%s,%"
PRIu16
",%s,%d,%"PRIu16",",

280 
fõlds
, 
mp
->
basis
, 
Æg‹ôhm
, mp->
max_lök
 + 1,

281 
mp
->
¨g
);

282 
	`mf_f‹m©_subfõld
(&
mp
->
d°
, 
s
);

283 
	`ds_put_ch¨
(
s
, ')');

284 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/multipath.h

17 #i‚de‡
MULTIPATH_H


18 
	#MULTIPATH_H
 1

	)

20 
	~<°döt.h
>

21 
	~"oÂ-îr‹s.h
"

23 
	gds
;

24 
	gÊow
;

25 
	gnx_a˘i⁄_mu…ù©h
;

26 
	goÂa˘_mu…ù©h
;

27 
	goÂbuf
;

34 
oÂîr
 
mu…ù©h_‰om_›íÊow
(c⁄° 
nx_a˘i⁄_mu…ù©h
 *,

35 
oÂa˘_mu…ù©h
 *);

36 
oÂîr
 
mu…ù©h_check
(c⁄° 
oÂa˘_mu…ù©h
 *,

37 c⁄° 
Êow
 *);

38 
mu…ù©h_to_nxa°
(c⁄° 
oÂa˘_mu…ù©h
 *,

39 
oÂbuf
 *
›íÊow
);

41 
mu…ù©h_execuã
(c⁄° 
oÂa˘_mu…ù©h
 *, 
Êow
 *);

43 
mu…ù©h_∑r£
(
oÂa˘_mu…ù©h
 *, const *);

44 
mu…ù©h_f‹m©
(c⁄° 
oÂa˘_mu…ù©h
 *, 
ds
 *);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/netdev-bsd.c

17 
	~<c⁄fig.h
>

19 
	~<°dlib.h
>

20 
	~<c⁄fig.h
>

21 
	~<as£π.h
>

22 
	~<î∫o.h
>

23 
	~<f˙é.h
>

24 
	~<sys/ty≥s.h
>

25 
	~<sys/time.h
>

26 
	~<sys/io˘l.h
>

27 
	~<sys/sockë.h
>

28 
	~<sys/sockio.h
>

29 
	~<iÁddrs.h
>

30 
	~<pˇp/pˇp.h
>

31 
	~<√t/if.h
>

32 
	~<√t/if_dl.h
>

33 
	~<√t/if_medü.h
>

34 
	~<√t/if_èp.h
>

35 
	~<√töë/ö.h
>

36 
	~<√t/if_mib.h
>

37 
	~<pﬁl.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<sys/sys˘l.h
>

42 
	~"πbsd.h
"

43 
	~"covîage.h
"

44 
	~"dy«mic-°rög.h
"

45 
	~"Áèl-sig«l.h
"

46 
	~"√tdev-¥ovidî.h
"

47 
	~"oÂbuf.h
"

48 
	~"›íÊow/›íÊow.h
"

49 
	~"∑ckës.h
"

50 
	~"pﬁl-lo›.h
"

51 
	~"sockë-utû.h
"

52 
	~"shash.h
"

53 
	~"svec.h
"

54 
	~"vlog.h
"

56 
VLOG_DEFINE_THIS_MODULE
(
√tdev_bsd
);

80 
	s√tdev_bsd
 {

81 
√tdev
 
	m√tdev
;

83 
	m√tdev_fd
;

86 
pˇp_t
 *
	mpˇp_h™dÀ
;

90 
	s√tdev_dev_bsd
 {

91 
√tdev_dev
 
	m√tdev_dev
;

92 
	mˇche_vÆid
;

93 
	mch™ge_£q
;

95 
	mifödex
;

96 
uöt8_t
 
	mëhîaddr
[
ETH_ADDR_LEN
];

97 
ö_addr
 
	mö4
;

98 
ö6_addr
 
	mö6
;

99 
	mmtu
;

100 
	mˇºõr
;

102 
boﬁ
 
	mèp_›íed
;

103 
	mèp_fd
;

108 
	mVALID_IFINDEX
 = 1 << 0,

109 
	mVALID_ETHERADDR
 = 1 << 1,

110 
	mVALID_IN4
 = 1 << 2,

111 
	mVALID_IN6
 = 1 << 3,

112 
	mVALID_MTU
 = 1 << 4,

113 
	mVALID_CARRIER
 = 1 << 5

117 
	gaf_öë_sock
 = -1;

119 
	#PCAP_SNAPLEN
 2048

	)

132 
πbsd_nŸifõr
 
	g√tdev_bsd_ˇche_nŸifõr
;

133 
	gˇche_nŸifõr_ªfcou¡
;

135 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(5, 20);

137 
√tdev_bsd_do_io˘l
(c⁄° 
√tdev
 *, 
i‰eq
 *,

138 
cmd
, c⁄° *
cmd_«me
);

139 
de°roy_èp
(
fd
, c⁄° *
«me
);

140 
gë_Êags
(c⁄° 
√tdev
 *, *
Êag•
);

141 
£t_Êags
(
√tdev
 *, 
Êags
);

142 
do_£t_addr
(
√tdev
 *netdev,

143 
io˘l_ƒ
, c⁄° *
io˘l_«me
,

144 
ö_addr
 
addr
);

145 
gë_ëhîaddr
(c⁄° *
√tdev_«me
, 
uöt8_t
 
ó
[
ETH_ADDR_LEN
]);

146 
£t_ëhîaddr
(c⁄° *
√tdev_«me
, 
hwaddr_Ámûy
,

147 
hwaddr_Àn
, c⁄° 
uöt8_t
[
ETH_ADDR_LEN
]);

148 
gë_ifödex
(c⁄° 
√tdev
 *, *
ifödexp
);

150 
√tdev_bsd_öô
();

152 
boﬁ


153 
	$is_√tdev_bsd_˛ass
(c⁄° 
√tdev_˛ass
 *netdev_class)

155  
√tdev_˛ass
->
öô
 =
√tdev_bsd_öô
;

156 
	}
}

158 
√tdev_bsd
 *

159 
	$√tdev_bsd_ˇ°
(c⁄° 
√tdev
 *netdev)

161 
	`as£π
(
	`is_√tdev_bsd_˛ass
(
	`√tdev_dev_gë_˛ass
(
	`√tdev_gë_dev
(
√tdev
))));

162  
	`CONTAINER_OF
(
√tdev
, 
√tdev_bsd
,Çetdev);

163 
	}
}

165 
√tdev_dev_bsd
 *

166 
	$√tdev_dev_bsd_ˇ°
(c⁄° 
√tdev_dev
 *netdev_dev)

168 
	`as£π
(
	`is_√tdev_bsd_˛ass
(
	`√tdev_dev_gë_˛ass
(
√tdev_dev
)));

169  
	`CONTAINER_OF
(
√tdev_dev
, 
√tdev_dev_bsd
,Çetdev_dev);

170 
	}
}

174 
	$√tdev_bsd_öô
()

176 
°©us
 = -1;

178 i‡(
°©us
 >= 0) {

179  
°©us
;

182 
af_öë_sock
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

183 
°©us
 = 
af_öë_sock
 >0 ? 0 : 
î∫o
;

185 i‡(
°©us
) {

186 
	`VLOG_ERR
("ÁûedÅÿ¸óã i√àsockë: %s", 
	`°ªº‹
(
°©us
));

189  
°©us
;

190 
	}
}

197 
	$√tdev_bsd_run
()

199 
	`πbsd_nŸifõr_run
();

200 
	}
}

207 
	$√tdev_bsd_waô
()

209 
	`πbsd_nŸifõr_waô
();

210 
	}
}

213 
	$√tdev_dev_bsd_ch™ged
(
√tdev_dev_bsd
 *
dev
)

215 
dev
->
ch™ge_£q
++;

216 i‡(!
dev
->
ch™ge_£q
) {

217 
dev
->
ch™ge_£q
++;

219 
	}
}

223 
	$√tdev_bsd_ˇche_cb
(c⁄° 
πbsd_ch™ge
 *
ch™ge
,

224 *
aux
 
OVS_UNUSED
)

226 
√tdev_dev_bsd
 *
dev
;

228 i‡(
ch™ge
) {

229 
√tdev_dev
 *
ba£_dev
 = 
	`√tdev_dev_‰om_«me
(
ch™ge
->
if_«me
);

231 i‡(
ba£_dev
) {

232 c⁄° 
√tdev_˛ass
 *netdev_class =

233 
	`√tdev_dev_gë_˛ass
(
ba£_dev
);

235 i‡(
	`is_√tdev_bsd_˛ass
(
√tdev_˛ass
)) {

236 
dev
 = 
	`√tdev_dev_bsd_ˇ°
(
ba£_dev
);

237 
dev
->
ˇche_vÆid
 = 0;

238 
	`√tdev_dev_bsd_ch™ged
(
dev
);

246 
shash
 
devi˚_shash
;

247 
shash_node
 *
node
;

249 
	`shash_öô
(&
devi˚_shash
);

250 
	`√tdev_dev_gë_devi˚s
(&
√tdev_bsd_˛ass
, &
devi˚_shash
);

251 
	`SHASH_FOR_EACH
 (
node
, &
devi˚_shash
) {

252 
dev
 = 
node
->
d©a
;

253 
dev
->
ˇche_vÆid
 = 0;

254 
	`√tdev_dev_bsd_ch™ged
(
dev
);

256 
	`shash_de°roy
(&
devi˚_shash
);

258 
	}
}

261 
	$ˇche_nŸifõr_ªf
()

263 
ªt
 = 0;

265 i‡(!
ˇche_nŸifõr_ªfcou¡
) {

266 
ªt
 = 
	`πbsd_nŸifõr_ªgi°î
(&
√tdev_bsd_ˇche_nŸifõr
,

267 
√tdev_bsd_ˇche_cb
, 
NULL
);

268 i‡(
ªt
) {

269  
ªt
;

272 
ˇche_nŸifõr_ªfcou¡
++;

274 
	}
}

277 
	$ˇche_nŸifõr_uƒef
()

279 
ˇche_nŸifõr_ªfcou¡
--;

280 i‡(
ˇche_nŸifõr_ªfcou¡
 == 0) {

281 
	`πbsd_nŸifõr_uƒegi°î
(&
√tdev_bsd_ˇche_nŸifõr
);

284 
	}
}

288 
	$√tdev_bsd_¸óã_sy°em
(c⁄° 
√tdev_˛ass
 *
˛ass
, c⁄° *
«me
,

289 
√tdev_dev
 **
√tdev_devp
)

291 
√tdev_dev_bsd
 *
√tdev_dev
;

292 
îr‹
;

294 
îr‹
 = 
	`ˇche_nŸifõr_ªf
();

295 i‡(
îr‹
) {

296  
îr‹
;

299 
√tdev_dev
 = 
	`xzÆloc
( *netdev_dev);

300 
√tdev_dev
->
ch™ge_£q
 = 1;

301 
	`√tdev_dev_öô
(&
√tdev_dev
->√tdev_dev, 
«me
, 
˛ass
);

302 *
√tdev_devp
 = &
√tdev_dev
->netdev_dev;

305 
	}
}

311 
	$√tdev_bsd_¸óã_èp
(c⁄° 
√tdev_˛ass
 *
˛ass
, c⁄° *
«me
,

312 
√tdev_dev
 **
√tdev_devp
)

314 
√tdev_dev_bsd
 *
√tdev_dev
 = 
NULL
;

315 
îr‹
 = 0;

316 
i‰eq
 
i‰
;

318 
îr‹
 = 
	`ˇche_nŸifõr_ªf
();

319 i‡(
îr‹
) {

320 
îr‹
;

324 
√tdev_dev
 = 
	`xzÆloc
( *netdev_dev);

326 
	`mem£t
(&
i‰
, 0, (ifr));

330 
√tdev_dev
->
èp_fd
 = 
	`›í
("/dev/èp", 
O_RDWR
);

331 
√tdev_dev
->
ch™ge_£q
 = 1;

332 i‡(
√tdev_dev
->
èp_fd
 < 0) {

333 
îr‹
 = 
î∫o
;

334 
	`VLOG_WARN
("›íög \"/dev/èp\" faûed: %s", 
	`°ªº‹
(
îr‹
));

335 
îr‹_undef_nŸifõr
;

339 i‡(
	`io˘l
(
√tdev_dev
->
èp_fd
, 
TAPGIFNAME
, &
i‰
) == -1) {

341 
îr‹
 = 
î∫o
;

342 
îr‹_undef_nŸifõr
;

346 
i‰
.
i‰_d©a
 = (*)
«me
;

347 i‡(
	`io˘l
(
af_öë_sock
, 
SIOCSIFNAME
, &
i‰
) == -1) {

348 
îr‹
 = 
î∫o
;

349 
	`de°roy_èp
(
√tdev_dev
->
èp_fd
, 
i‰
.
i‰_«me
);

350 
îr‹_undef_nŸifõr
;

354 
îr‹
 = 
	`£t_n⁄blockög
(
√tdev_dev
->
èp_fd
);

355 i‡(
îr‹
) {

356 
	`de°roy_èp
(
√tdev_dev
->
èp_fd
, 
«me
);

357 
îr‹_undef_nŸifõr
;

361 
i‰
.
i‰_Êags
 = (
uöt16_t
)
IFF_UP
;

362 
i‰
.
i‰_Êagshigh
 = 0;

363 
	`°∫˝y
(
i‰
.
i‰_«me
, 
«me
,  ifr.ifr_name);

364 i‡(
	`io˘l
(
af_öë_sock
, 
SIOCSIFFLAGS
, &
i‰
) == -1) {

365 
îr‹
 = 
î∫o
;

366 
	`de°roy_èp
(
√tdev_dev
->
èp_fd
, 
«me
);

367 
îr‹_undef_nŸifõr
;

372 
	`√tdev_dev_öô
(&
√tdev_dev
->√tdev_dev, 
«me
, 
˛ass
);

373 *
√tdev_devp
 = &
√tdev_dev
->netdev_dev;

377 
îr‹_undef_nŸifõr
:

378 
	`ˇche_nŸifõr_uƒef
();

379 
îr‹
:

380 
	`‰ì
(
√tdev_dev
);

381  
îr‹
;

382 
	}
}

385 
	$√tdev_bsd_de°roy
(
√tdev_dev
 *
√tdev_dev_
)

387 
√tdev_dev_bsd
 *
√tdev_dev
 = 
	`√tdev_dev_bsd_ˇ°
(
√tdev_dev_
);

389 
	`ˇche_nŸifõr_uƒef
();

391 i‡(
√tdev_dev
->
èp_fd
 >= 0 &&

392 !
	`°rcmp
(
	`√tdev_dev_gë_ty≥
(
√tdev_dev_
), "tap")) {

393 
	`de°roy_èp
(
√tdev_dev
->
èp_fd
, 
	`√tdev_dev_gë_«me
(
√tdev_dev_
));

395 
	`‰ì
(
√tdev_dev
);

396 
	}
}

400 
	$√tdev_bsd_›í_sy°em
(
√tdev_dev
 *
√tdev_dev_
, 
√tdev
 **
√tdevp
)

402 
√tdev_dev_bsd
 *
√tdev_dev
 = 
	`√tdev_dev_bsd_ˇ°
(
√tdev_dev_
);

403 
√tdev_bsd
 *
√tdev
;

404 
îr‹
;

405 
√tdev_Êags
 
Êags
;

408 
√tdev
 = 
	`xˇŒoc
(1,  *netdev);

409 
√tdev
->
√tdev_fd
 = -1;

410 
	`√tdev_öô
(&
√tdev
->√tdev, 
√tdev_dev_
);

413 
îr‹
 = 
	`√tdev_gë_Êags
(&
√tdev
->√tdev, &
Êags
);

414 i‡(
îr‹
 =
ENXIO
) {

415 
îr‹
;

421 i‡(!
	`°rcmp
(
	`√tdev_dev_gë_ty≥
(
√tdev_dev_
), "tap") &&

422 !
√tdev_dev
->
èp_›íed
) {

423 
√tdev_dev
->
èp_›íed
 = 
åue
;

424 
√tdev
->
√tdev_fd
 = 
√tdev_dev
->
èp_fd
;

427 *
√tdevp
 = &
√tdev
->netdev;

430 
îr‹
:

431 
	`√tdev_unöô
(&
√tdev
->√tdev, 
åue
);

432  
îr‹
;

433 
	}
}

439 
	$√tdev_bsd_˛o£
(
√tdev
 *
√tdev_
)

441 
√tdev_bsd
 *
√tdev
 = 
	`√tdev_bsd_ˇ°
(
√tdev_
);

443 i‡(
√tdev
->
√tdev_fd
 >0 && 
	`°rcmp
(
	`√tdev_gë_ty≥
(
√tdev_
), "tap")) {

444 
	`pˇp_˛o£
(
√tdev
->
pˇp_h™dÀ
);

447 
	`‰ì
(
√tdev
);

448 
	}
}

451 
	$√tdev_bsd_li°í
(
√tdev
 *
√tdev_
)

453 
√tdev_bsd
 *
√tdev
 = 
	`√tdev_bsd_ˇ°
(
√tdev_
);

454 
îrbuf
[
PCAP_ERRBUF_SIZE
];

455 
îr‹
;

456 
fd
 = -1;

457 
⁄e
 = 1;

459 i‡(
√tdev
->
√tdev_fd
 >= 0) {

465 
îrbuf
[0] = '\0';

466 
√tdev
->
pˇp_h™dÀ
 = 
	`pˇp_›í_live
(
	`√tdev_gë_«me
(
√tdev_
), 
PCAP_SNAPLEN
,

467 0, 1000, 
îrbuf
);

468 i‡(
√tdev
->
pˇp_h™dÀ
 =
NULL
) {

469 
	`VLOG_ERR
("%s:Öcap_open_live failed: %s",

470 
	`√tdev_gë_«me
(
√tdev_
), 
îrbuf
);

471 
îr‹
 = 
EIO
;

472 
îr‹
;

473 } i‡(
îrbuf
[0] != '\0') {

474 
	`VLOG_WARN
("%s:Öcap_open_live: %s",

475 
	`√tdev_gë_«me
(
√tdev_
), 
îrbuf
);

478 
	`√tdev_dev_bsd_ch™ged
(
	`√tdev_dev_bsd_ˇ°
(
	`√tdev_gë_dev
(
√tdev_
)));

481 
fd
 = 
	`pˇp_gë_£À˘abÀ_fd
(
√tdev
->
pˇp_h™dÀ
);

482 i‡(
fd
 == -1) {

483 
îr‹
 = 
î∫o
;

484 
îr‹
;

490 
îr‹
 = 
	`pˇp_£ä⁄block
(
√tdev
->
pˇp_h™dÀ
, 1, 
îrbuf
);

491 i‡(
îr‹
 == -1) {

492 
îr‹
 = 
î∫o
;

493 
îr‹
;

499 if(
	`io˘l
(
fd
, 
BIOCIMMEDIATE
, &
⁄e
) < 0 ) {

500 
	`VLOG_ERR
("ioctl(BIOCIMMEDIATE) on %s device failed: %s",

501 
	`√tdev_gë_«me
(
√tdev_
), 
	`°ªº‹
(
î∫o
));

502 
îr‹
 = 
î∫o
;

503 
îr‹
;

507 
îr‹
 = 
	`pˇp_£tdúe˘i⁄
(
√tdev
->
pˇp_h™dÀ
, 
PCAP_D_IN
);

508 i‡(
îr‹
 == -1) {

509 
îr‹
 = 
î∫o
;

510 
îr‹
;

513 
√tdev
->
√tdev_fd
 = 
fd
;

516 
îr‹
:

517 i‡(
fd
 >= 0) {

518 
	`˛o£
(
√tdev
->
√tdev_fd
);

520  
îr‹
;

521 
	}
}

535 
	spˇp_¨g
 {

536 *
	md©a
;

537 
	msize
;

538 
	mªtvÆ
;

550 
	$¥oc_pkt
(
u_ch¨
 *
¨gs_
, c⁄° 
pˇp_pkthdr
 *
hdr
, c⁄° u_ch¨ *
∑ckë
)

552 
pˇp_¨g
 *
¨gs
 = (pˇp_¨g *)
¨gs_
;

554 i‡(
¨gs
->
size
 < 
hdr
->
Àn
) {

555 
	`VLOG_WARN_RL
(&
æ
, "packetÅruncated");

556 
¨gs
->
ªtvÆ
 =árgs->
size
;

558 
¨gs
->
ªtvÆ
 = 
hdr
->
Àn
;

562 
	`mem˝y
(
¨gs
->
d©a
, 
∑ckë
,árgs->
ªtvÆ
);

563 
	}
}

572 
	$√tdev_bsd_ªcv_sy°em
(
√tdev_bsd
 *
√tdev
, *
d©a
, 
size_t
 
size
)

574 
pˇp_¨g
 
¨g
;

575 
ªt
;

577 i‡(
√tdev
->
√tdev_fd
 < 0) {

578  -
EAGAIN
;

582 
¨g
.
size
 = size;

583 
¨g
.
d©a
 = data;

586 
ªt
 = 
	`pˇp_di•©ch
(
√tdev
->
pˇp_h™dÀ
, 1, 
¥oc_pkt
, (
u_ch¨
 *)&
¨g
);

588 i‡(
ªt
 > 0) {

589  
¨g
.
ªtvÆ
;

591 i‡(
ªt
 == -1) {

592 i‡(
î∫o
 =
EINTR
) {

597  -
EAGAIN
;

599 
	}
}

608 
	$√tdev_bsd_ªcv_èp
(
√tdev_bsd
 *
√tdev
, *
d©a
, 
size_t
 
size
)

610 i‡(
√tdev
->
√tdev_fd
 < 0) {

611  -
EAGAIN
;

615 
ssize_t
 
ªtvÆ
 = 
	`ªad
(
√tdev
->
√tdev_fd
, 
d©a
, 
size
);

616 i‡(
ªtvÆ
 >= 0) {

617  
ªtvÆ
;

618 } i‡(
î∫o
 !
EINTR
) {

619 i‡(
î∫o
 !
EAGAIN
) {

620 
	`VLOG_WARN_RL
(&
æ
, "errorÑeceiving EthernetÖacket on %s: %s",

621 
	`°ªº‹
(
î∫o
), 
√tdev
->√tdev.
√tdev_dev
->
«me
);

623  -
î∫o
;

626 
	}
}

641 
	$√tdev_bsd_ªcv
(
√tdev
 *
√tdev_
, * 
d©a
, 
size_t
 
size
)

643 
√tdev_bsd
 *
√tdev
 = 
	`√tdev_bsd_ˇ°
(
√tdev_
);

644 
√tdev_dev_bsd
 * 
√tdev_dev
 =

645 
	`√tdev_dev_bsd_ˇ°
(
	`√tdev_gë_dev
(
√tdev_
));

647 i‡(!
	`°rcmp
(
	`√tdev_gë_ty≥
(
√tdev_
), "tap") &&

648 
√tdev
->
√tdev_fd
 =
√tdev_dev
->
èp_fd
) {

649  
	`√tdev_bsd_ªcv_èp
(
√tdev
, 
d©a
, 
size
);

651  
	`√tdev_bsd_ªcv_sy°em
(
√tdev
, 
d©a
, 
size
);

653 
	}
}

661 
	$√tdev_bsd_ªcv_waô
(
√tdev
 *
√tdev_
)

663 
√tdev_bsd
 *
√tdev
 = 
	`√tdev_bsd_ˇ°
(
√tdev_
);

665 i‡(
√tdev
->
√tdev_fd
 >= 0) {

666 
	`pﬁl_fd_waô
(
√tdev
->
√tdev_fd
, 
POLLIN
);

668 
	}
}

672 
	$√tdev_bsd_døö
(
√tdev
 *
√tdev_
)

674 
i‰eq
 
i‰
;

675 
√tdev_bsd
 *
√tdev
 = 
	`√tdev_bsd_ˇ°
(
√tdev_
);

677 
	`°r˝y
(
i‰
.
i‰_«me
, 
	`√tdev_gë_«me
(
√tdev_
));

678 i‡(
	`io˘l
(
√tdev
->
√tdev_fd
, 
BIOCFLUSH
, &
i‰
) == -1) {

679 
	`VLOG_DBG_RL
(&
æ
, "%s: ioctl(BIOCFLUSH) failed: %s",

680 
	`√tdev_gë_«me
(
√tdev_
), 
	`°ªº‹
(
î∫o
));

681  
î∫o
;

684 
	}
}

691 
	$√tdev_bsd_£nd
(
√tdev
 *
√tdev_
, c⁄° *
d©a
, 
size_t
 
size
)

693 
√tdev_bsd
 *
√tdev
 = 
	`√tdev_bsd_ˇ°
(
√tdev_
);

694 
√tdev_dev_bsd
 * 
√tdev_dev
 =

695 
	`√tdev_dev_bsd_ˇ°
(
	`√tdev_gë_dev
(
√tdev_
));

697 i‡(
√tdev
->
√tdev_fd
 < 0) {

698  
EPIPE
;

702 
ssize_t
 
ªtvÆ
;

703 i‡(!
	`°rcmp
(
	`√tdev_gë_ty≥
(
√tdev_
), "tap") &&

704 
√tdev_dev
->
èp_fd
 =
√tdev
->
√tdev_fd
) {

705 
ªtvÆ
 = 
	`wrôe
(
√tdev
->
√tdev_fd
, 
d©a
, 
size
);

707 
ªtvÆ
 = 
	`pˇp_öje˘
(
√tdev
->
pˇp_h™dÀ
, 
d©a
, 
size
);

709 i‡(
ªtvÆ
 < 0) {

710 i‡(
î∫o
 =
EINTR
) {

712 } i‡(
î∫o
 !
EAGAIN
) {

713 
	`VLOG_WARN_RL
(&
æ
, "error sending EthernetÖacket on %s: %s",

714 
	`√tdev_gë_«me
(
√tdev_
), 
	`°ªº‹
(
î∫o
));

716  
î∫o
;

717 } i‡(
ªtvÆ
 !
size
) {

718 
	`VLOG_WARN_RL
(&
æ
, "sentÖartial EthernetÖacket (%zd bytes of "

719 "%zuË⁄ %s", 
ªtvÆ
, 
size
,

720 
	`√tdev_gë_«me
(
√tdev_
));

721  
EMSGSIZE
;

726 
	}
}

734 
	$√tdev_bsd_£nd_waô
(
√tdev
 *
√tdev_
)

736 
√tdev_bsd
 *
√tdev
 = 
	`√tdev_bsd_ˇ°
(
√tdev_
);

738 i‡(
√tdev
->
√tdev_fd
 < 0) {

742 i‡(
	`°rcmp
(
	`√tdev_gë_ty≥
(
√tdev_
), "tap")) {

743 
	`pﬁl_fd_waô
(
√tdev
->
√tdev_fd
, 
POLLOUT
);

746 
	`pﬁl_immedüã_wake
();

748 
	}
}

755 
	$√tdev_bsd_£t_ëhîaddr
(
√tdev
 *
√tdev_
,

756 c⁄° 
uöt8_t
 
mac
[
ETH_ADDR_LEN
])

758 
√tdev_dev_bsd
 *
√tdev_dev
 =

759 
	`√tdev_dev_bsd_ˇ°
(
	`√tdev_gë_dev
(
√tdev_
));

760 
îr‹
;

762 i‡(!(
√tdev_dev
->
ˇche_vÆid
 & 
VALID_ETHERADDR
)

763 || !
	`ëh_addr_equÆs
(
√tdev_dev
->
ëhîaddr
, 
mac
)) {

764 
îr‹
 = 
	`£t_ëhîaddr
(
	`√tdev_gë_«me
(
√tdev_
), 
AF_LINK
, 
ETH_ADDR_LEN
,

765 
mac
);

766 i‡(!
îr‹
) {

767 
√tdev_dev
->
ˇche_vÆid
 |
VALID_ETHERADDR
;

768 
	`mem˝y
(
√tdev_dev
->
ëhîaddr
, 
mac
, 
ETH_ADDR_LEN
);

769 
	`√tdev_dev_bsd_ch™ged
(
√tdev_dev
);

772 
îr‹
 = 0;

774  
îr‹
;

775 
	}
}

782 
	$√tdev_bsd_gë_ëhîaddr
(c⁄° 
√tdev
 *
√tdev_
,

783 
uöt8_t
 
mac
[
ETH_ADDR_LEN
])

785 
√tdev_dev_bsd
 *
√tdev_dev
 =

786 
	`√tdev_dev_bsd_ˇ°
(
	`√tdev_gë_dev
(
√tdev_
));

788 i‡(!(
√tdev_dev
->
ˇche_vÆid
 & 
VALID_ETHERADDR
)) {

789 
îr‹
 = 
	`gë_ëhîaddr
(
	`√tdev_gë_«me
(
√tdev_
),

790 
√tdev_dev
->
ëhîaddr
);

791 i‡(
îr‹
) {

792  
îr‹
;

794 
√tdev_dev
->
ˇche_vÆid
 |
VALID_ETHERADDR
;

796 
	`mem˝y
(
mac
, 
√tdev_dev
->
ëhîaddr
, 
ETH_ADDR_LEN
);

799 
	}
}

807 
	$√tdev_bsd_gë_mtu
(c⁄° 
√tdev
 *
√tdev_
, *
mtup
)

809 
√tdev_dev_bsd
 *
√tdev_dev
 =

810 
	`√tdev_dev_bsd_ˇ°
(
	`√tdev_gë_dev
(
√tdev_
));

812 i‡(!(
√tdev_dev
->
ˇche_vÆid
 & 
VALID_MTU
)) {

813 
i‰eq
 
i‰
;

814 
îr‹
;

816 
îr‹
 = 
	`√tdev_bsd_do_io˘l
(
√tdev_
, &
i‰
, 
SIOCGIFMTU
, "SIOCGIFMTU");

817 i‡(
îr‹
) {

818  
îr‹
;

820 
√tdev_dev
->
mtu
 = 
i‰
.
i‰_mtu
;

821 
√tdev_dev
->
ˇche_vÆid
 |
VALID_MTU
;

824 *
mtup
 = 
√tdev_dev
->
mtu
;

826 
	}
}

829 
	$√tdev_bsd_gë_ifödex
(c⁄° 
√tdev
 *netdev)

831 
ifödex
, 
îr‹
;

833 
îr‹
 = 
	`gë_ifödex
(
√tdev
, &
ifödex
);

834  
îr‹
 ? -îr‹ : 
ifödex
;

835 
	}
}

838 
	$√tdev_bsd_gë_ˇºõr
(c⁄° 
√tdev
 *
√tdev_
, 
boﬁ
 *
ˇºõr
)

840 
√tdev_dev_bsd
 *
√tdev_dev
 =

841 
	`√tdev_dev_bsd_ˇ°
(
	`√tdev_gë_dev
(
√tdev_
));

843 i‡(!(
√tdev_dev
->
ˇche_vÆid
 & 
VALID_CARRIER
)) {

844 
ifmedüªq
 
ifmr
;

846 
	`mem£t
(&
ifmr
, 0, (ifmr));

847 
	`°∫˝y
(
ifmr
.
ifm_«me
, 
	`√tdev_gë_«me
(
√tdev_
),  ifmr.ifm_name);

849 i‡(
	`io˘l
(
af_öë_sock
, 
SIOCGIFMEDIA
, &
ifmr
) == -1) {

850 
	`VLOG_DBG_RL
(&
æ
, "%s: ioctl(SIOCGIFMEDIA) failed: %s",

851 
	`√tdev_gë_«me
(
√tdev_
), 
	`°ªº‹
(
î∫o
));

852  
î∫o
;

855 
√tdev_dev
->
ˇºõr
 = (
ifmr
.
ifm_°©us
 & 
IFM_ACTIVE
) == IFM_ACTIVE;

856 
√tdev_dev
->
ˇche_vÆid
 |
VALID_CARRIER
;

860 i‡((
ifmr
.
ifm_°©us
 & 
IFM_AVALID
) == 0) {

861 
√tdev_dev
->
ˇºõr
 = 
åue
;

864 *
ˇºõr
 = 
√tdev_dev
->carrier;

867 
	}
}

871 
	$√tdev_bsd_gë_°©s
(c⁄° 
√tdev
 *
√tdev_
, 
√tdev_°©s
 *
°©s
)

873 
if_cou¡
, 
i
;

874 
mib
[6];

875 
size_t
 
Àn
;

876 
ifmibd©a
 
ifmd
;

879 
mib
[0] = 
CTL_NET
;

880 
mib
[1] = 
PF_LINK
;

881 
mib
[2] = 
NETLINK_GENERIC
;

882 
mib
[3] = 
IFMIB_SYSTEM
;

883 
mib
[4] = 
IFMIB_IFCOUNT
;

885 
Àn
 = (
if_cou¡
);

887 i‡(
	`sys˘l
(
mib
, 5, &
if_cou¡
, &
Àn
, (*)0, 0) == -1) {

888 
	`VLOG_DBG_RL
(&
æ
, "%s: sysctl failed: %s",

889 
	`√tdev_gë_«me
(
√tdev_
), 
	`°ªº‹
(
î∫o
));

890  
î∫o
;

893 
mib
[5] = 
IFDATA_GENERAL
;

894 
mib
[3] = 
IFMIB_IFDATA
;

895 
Àn
 = (
ifmd
);

896 
i
 = 1; i <
if_cou¡
; i++) {

897 
mib
[4] = 
i
;

898 i‡(
	`sys˘l
(
mib
, 6, &
ifmd
, &
Àn
, (*)0, 0) == -1) {

899 
	`VLOG_DBG_RL
(&
æ
, "%s: sysctl failed: %s",

900 
	`√tdev_gë_«me
(
√tdev_
), 
	`°ªº‹
(
î∫o
));

901  
î∫o
;

902 } i‡(!
	`°rcmp
(
ifmd
.
ifmd_«me
, 
	`√tdev_gë_«me
(
√tdev_
))) {

903 
°©s
->
rx_∑ckës
 = 
ifmd
.
ifmd_d©a
.
ifi_ùackës
;

904 
°©s
->
tx_∑ckës
 = 
ifmd
.
ifmd_d©a
.
ifi_›ackës
;

905 
°©s
->
rx_byãs
 = 
ifmd
.
ifmd_d©a
.
ifi_ibyãs
;

906 
°©s
->
tx_byãs
 = 
ifmd
.
ifmd_d©a
.
ifi_obyãs
;

907 
°©s
->
rx_îr‹s
 = 
ifmd
.
ifmd_d©a
.
ifi_õº‹s
;

908 
°©s
->
tx_îr‹s
 = 
ifmd
.
ifmd_d©a
.
ifi_€º‹s
;

909 
°©s
->
rx_dr›≥d
 = 
ifmd
.
ifmd_d©a
.
ifi_iqdr›s
;

910 
°©s
->
tx_dr›≥d
 = 0;

911 
°©s
->
mu…iˇ°
 = 
ifmd
.
ifmd_d©a
.
ifi_imˇ°s
;

912 
°©s
->
cﬁlisi⁄s
 = 
ifmd
.
ifmd_d©a
.
ifi_cﬁlisi⁄s
;

914 
°©s
->
rx_Àngth_îr‹s
 = 0;

915 
°©s
->
rx_ovî_îr‹s
 = 0;

916 
°©s
->
rx_¸c_îr‹s
 = 0;

917 
°©s
->
rx_‰ame_îr‹s
 = 0;

918 
°©s
->
rx_fifo_îr‹s
 = 0;

919 
°©s
->
rx_mis£d_îr‹s
 = 0;

921 
°©s
->
tx_ab‹ãd_îr‹s
 = 0;

922 
°©s
->
tx_ˇºõr_îr‹s
 = 0;

923 
°©s
->
tx_fifo_îr‹s
 = 0;

924 
°©s
->
tx_hóπbót_îr‹s
 = 0;

925 
°©s
->
tx_wödow_îr‹s
 = 0;

931 
	}
}

933 
uöt32_t


934 
	$√tdev_bsd_∑r£_medü
(
medü
)

936 
uöt32_t
 
suµ‹ãd
 = 0;

937 
boﬁ
 
hÆf_du∂ex
 = 
medü
 & 
IFM_HDX
 ? 
åue
 : 
Ál£
;

939 
	`IFM_SUBTYPE
(
medü
)) {

940 
IFM_10_2
:

941 
IFM_10_5
:

942 
IFM_10_STP
:

943 
IFM_10_T
:

944 
suµ‹ãd
 |
hÆf_du∂ex
 ? 
NETDEV_F_10MB_HD
 : 
NETDEV_F_10MB_FD
;

945 
suµ‹ãd
 |
NETDEV_F_COPPER
;

948 
IFM_10_FL
:

949 
suµ‹ãd
 |
hÆf_du∂ex
 ? 
NETDEV_F_10MB_HD
 : 
NETDEV_F_10MB_FD
;

950 
suµ‹ãd
 |
NETDEV_F_FIBER
;

953 
IFM_100_T2
:

954 
IFM_100_T4
:

955 
IFM_100_TX
:

956 
IFM_100_VG
:

957 
suµ‹ãd
 |
hÆf_du∂ex
 ? 
NETDEV_F_100MB_HD
 : 
NETDEV_F_100MB_FD
;

958 
suµ‹ãd
 |
NETDEV_F_COPPER
;

961 
IFM_100_FX
:

962 
suµ‹ãd
 |
hÆf_du∂ex
 ? 
NETDEV_F_100MB_HD
 : 
NETDEV_F_100MB_FD
;

963 
suµ‹ãd
 |
NETDEV_F_FIBER
;

966 
IFM_1000_CX
:

967 
IFM_1000_T
:

968 
suµ‹ãd
 |
hÆf_du∂ex
 ? 
NETDEV_F_1GB_HD
 : 
NETDEV_F_1GB_FD
;

969 
suµ‹ãd
 |
NETDEV_F_COPPER
;

972 
IFM_1000_LX
:

973 
IFM_1000_SX
:

974 
suµ‹ãd
 |
hÆf_du∂ex
 ? 
NETDEV_F_1GB_HD
 : 
NETDEV_F_1GB_FD
;

975 
suµ‹ãd
 |
NETDEV_F_FIBER
;

978 
IFM_10G_CX4
:

979 
suµ‹ãd
 |
NETDEV_F_10GB_FD
;

980 
suµ‹ãd
 |
NETDEV_F_COPPER
;

983 
IFM_10G_LR
:

984 
IFM_10G_SR
:

985 
suµ‹ãd
 |
NETDEV_F_10GB_FD
;

986 
suµ‹ãd
 |
NETDEV_F_FIBER
;

993 i‡(
	`IFM_SUBTYPE
(
medü
Ë=
IFM_AUTO
) {

994 
suµ‹ãd
 |
NETDEV_F_AUTONEG
;

1002  
suµ‹ãd
;

1003 
	}
}

1013 
	$√tdev_bsd_gë_„©uªs
(c⁄° 
√tdev
 *netdev,

1014 
√tdev_„©uªs
 *
cuºít
, 
uöt32_t
 *
advîti£d
,

1015 
√tdev_„©uªs
 *
suµ‹ãd
, 
uöt32_t
 *
≥î
)

1017 
ifmedüªq
 
ifmr
;

1018 *
medü_li°
;

1019 
i
;

1020 
îr‹
;

1025 
	`mem£t
(&
ifmr
, 0, (ifmr));

1026 
	`°∫˝y
(
ifmr
.
ifm_«me
, 
	`√tdev_gë_«me
(
√tdev
),  ifmr.ifm_name);

1031 i‡(
	`io˘l
(
af_öë_sock
, 
SIOCGIFMEDIA
, &
ifmr
) == -1) {

1032 
	`VLOG_DBG_RL
(&
æ
, "%s: ioctl(SIOCGIFMEDIA) failed: %s",

1033 
	`√tdev_gë_«me
(
√tdev
), 
	`°ªº‹
(
î∫o
));

1034  
î∫o
;

1037 
medü_li°
 = 
	`xˇŒoc
(
ifmr
.
ifm_cou¡
, ());

1038 
ifmr
.
ifm_uli°
 = 
medü_li°
;

1040 i‡(!
	`IFM_TYPE
(
ifmr
.
ifm_cuºít
Ë& 
IFM_ETHER
) {

1041 
	`VLOG_DBG_RL
(&
æ
, "%s: doesn'táppearÅo beÉthernet",

1042 
	`√tdev_gë_«me
(
√tdev
));

1043 
îr‹
 = 
EINVAL
;

1044 
˛ónup
;

1047 i‡(
	`io˘l
(
af_öë_sock
, 
SIOCGIFMEDIA
, &
ifmr
) == -1) {

1048 
	`VLOG_DBG_RL
(&
æ
, "%s: ioctl(SIOCGIFMEDIA) failed: %s",

1049 
	`√tdev_gë_«me
(
√tdev
), 
	`°ªº‹
(
î∫o
));

1050 
îr‹
 = 
î∫o
;

1051 
˛ónup
;

1055 *
cuºít
 = 
	`√tdev_bsd_∑r£_medü
(
ifmr
.
ifm_a˘ive
);

1058 *
advîti£d
 = 
	`√tdev_bsd_∑r£_medü
(
ifmr
.
ifm_cuºít
);

1061 *
suµ‹ãd
 = 0;

1062 
i
 = 0; i < 
ifmr
.
ifm_cou¡
; i++) {

1063 *
suµ‹ãd
 |
	`√tdev_bsd_∑r£_medü
(
ifmr
.
ifm_uli°
[
i
]);

1067 *
≥î
 = 0;

1069 
îr‹
 = 0;

1070 
˛ónup
:

1071 
	`‰ì
(
medü_li°
);

1072  
îr‹
;

1073 
	}
}

1080 
	$√tdev_bsd_gë_ö4
(c⁄° 
√tdev
 *
√tdev_
, 
ö_addr
 *
ö4
,

1081 
ö_addr
 *
√tmask
)

1083 
√tdev_dev_bsd
 *
√tdev_dev
 =

1084 
	`√tdev_dev_bsd_ˇ°
(
	`√tdev_gë_dev
(
√tdev_
));

1086 i‡(!(
√tdev_dev
->
ˇche_vÆid
 & 
VALID_IN4
)) {

1087 c⁄° 
sockaddr_ö
 *
sö
;

1088 
i‰eq
 
i‰
;

1089 
îr‹
;

1091 
i‰
.
i‰_addr
.
ß_Ámûy
 = 
AF_INET
;

1092 
îr‹
 = 
	`√tdev_bsd_do_io˘l
(
√tdev_
, &
i‰
,

1093 
SIOCGIFADDR
, "SIOCGIFADDR");

1094 i‡(
îr‹
) {

1095  
îr‹
;

1098 
sö
 = (
sockaddr_ö
 *Ë&
i‰
.
i‰_addr
;

1099 
√tdev_dev
->
ö4
 = 
sö
->
sö_addr
;

1100 
√tdev_dev
->
ˇche_vÆid
 |
VALID_IN4
;

1101 
îr‹
 = 
	`√tdev_bsd_do_io˘l
(
√tdev_
, &
i‰
,

1102 
SIOCGIFNETMASK
, "SIOCGIFNETMASK");

1103 i‡(
îr‹
) {

1104  
îr‹
;

1106 *
√tmask
 = ((
sockaddr_ö
*)&
i‰
.
i‰_addr
)->
sö_addr
;

1108 *
ö4
 = 
√tdev_dev
->in4;

1110  
ö4
->
s_addr
 =
INADDR_ANY
 ? 
EADDRNOTAVAIL
 : 0;

1111 
	}
}

1119 
	$√tdev_bsd_£t_ö4
(
√tdev
 *
√tdev_
, 
ö_addr
 
addr
,

1120 
ö_addr
 
mask
)

1122 
√tdev_dev_bsd
 *
√tdev_dev
 =

1123 
	`√tdev_dev_bsd_ˇ°
(
	`√tdev_gë_dev
(
√tdev_
));

1124 
îr‹
;

1126 
îr‹
 = 
	`do_£t_addr
(
√tdev_
, 
SIOCSIFADDR
, "SIOCSIFADDR", 
addr
);

1127 i‡(!
îr‹
) {

1128 
√tdev_dev
->
ˇche_vÆid
 |
VALID_IN4
;

1129 
√tdev_dev
->
ö4
 = 
addr
;

1130 i‡(
addr
.
s_addr
 !
INADDR_ANY
) {

1131 
îr‹
 = 
	`do_£t_addr
(
√tdev_
, 
SIOCSIFNETMASK
,

1132 "SIOCSIFNETMASK", 
mask
);

1134 
	`√tdev_dev_bsd_ch™ged
(
√tdev_dev
);

1136  
îr‹
;

1137 
	}
}

1140 
	$√tdev_bsd_gë_ö6
(c⁄° 
√tdev
 *
√tdev_
, 
ö6_addr
 *
ö6
)

1142 
√tdev_dev_bsd
 *
√tdev_dev
 =

1143 
	`√tdev_dev_bsd_ˇ°
(
	`√tdev_gë_dev
(
√tdev_
));

1144 i‡(!(
√tdev_dev
->
ˇche_vÆid
 & 
VALID_IN6
)) {

1145 
iÁddrs
 *
iÁ
, *
hód
;

1146 
sockaddr_ö6
 *
sö6
;

1147 c⁄° *
√tdev_«me
 = 
	`√tdev_gë_«me
(
√tdev_
);

1149 i‡(
	`gëiÁddrs
(&
hód
) != 0) {

1150 
	`VLOG_ERR
("gëiÁddr†⁄ %†devi˚ faûed: %s", 
√tdev_«me
,

1151 
	`°ªº‹
(
î∫o
));

1152  
î∫o
;

1155 
iÁ
 = 
hód
; iÁ; iÁ = iÁ->
iÁ_√xt
) {

1156 i‡(
iÁ
->
iÁ_addr
->
ß_Ámûy
 =
AF_INET6
 &&

1157 !
	`°rcmp
(
iÁ
->
iÁ_«me
, 
√tdev_«me
)) {

1158 
sö6
 = (
sockaddr_ö6
 *)
iÁ
->
iÁ_addr
;

1159 i‡(
sö6
) {

1160 
	`mem˝y
(&
√tdev_dev
->
ö6
, &
sö6
->
sö6_addr
, sö6->
sö6_Àn
);

1161 
√tdev_dev
->
ˇche_vÆid
 |
VALID_IN6
;

1162 *
ö6
 = 
√tdev_dev
->in6;

1163 
	`‰ìiÁddrs
(
hód
);

1168  
EADDRNOTAVAIL
;

1170 *
ö6
 = 
√tdev_dev
->in6;

1172 
	}
}

1175 
	$make_ö4_sockaddr
(
sockaddr
 *
ß
, 
ö_addr
 
addr
)

1177 
sockaddr_ö
 
sö
;

1178 
	`mem£t
(&
sö
, 0,  sin);

1179 
sö
.
sö_Ámûy
 = 
AF_INET
;

1180 
sö
.
sö_addr
 = 
addr
;

1181 
sö
.
sö_p‹t
 = 0;

1183 
	`mem£t
(
ß
, 0,  *sa);

1184 
	`mem˝y
(
ß
, &
sö
,  sin);

1185 
	}
}

1188 
	$do_£t_addr
(
√tdev
 *netdev,

1189 
io˘l_ƒ
, c⁄° *
io˘l_«me
, 
ö_addr
 
addr
)

1191 
i‰eq
 
i‰
;

1192 
	`make_ö4_sockaddr
(&
i‰
.
i‰_addr
, 
addr
);

1193  
	`√tdev_bsd_do_io˘l
(
√tdev
, &
i‰
, 
io˘l_ƒ
, 
io˘l_«me
);

1194 
	}
}

1197 
	$nd_to_iff_Êags
(
√tdev_Êags
 
nd
)

1199 
iff
 = 0;

1200 i‡(
nd
 & 
NETDEV_UP
) {

1201 
iff
 |
IFF_UP
;

1203 i‡(
nd
 & 
NETDEV_PROMISC
) {

1204 
iff
 |
IFF_PROMISC
;

1205 
iff
 |
IFF_PPROMISC
;

1207  
iff
;

1208 
	}
}

1211 
	$iff_to_nd_Êags
(
iff
)

1213 
√tdev_Êags
 
nd
 = 0;

1214 i‡(
iff
 & 
IFF_UP
) {

1215 
nd
 |
NETDEV_UP
;

1217 i‡(
iff
 & 
IFF_PROMISC
) {

1218 
nd
 |
NETDEV_PROMISC
;

1220  
nd
;

1221 
	}
}

1224 
	$√tdev_bsd_upd©e_Êags
(
√tdev
 *√tdev, 
√tdev_Êags
 
off
,

1225 
√tdev_Êags
 
⁄
, √tdev_Êag†*
ﬁd_Êag•
)

1227 
ﬁd_Êags
, 
√w_Êags
;

1228 
îr‹
;

1230 
îr‹
 = 
	`gë_Êags
(
√tdev
, &
ﬁd_Êags
);

1231 i‡(!
îr‹
) {

1232 *
ﬁd_Êag•
 = 
	`iff_to_nd_Êags
(
ﬁd_Êags
);

1233 
√w_Êags
 = (
ﬁd_Êags
 & ~
	`nd_to_iff_Êags
(
off
)Ë|Çd_to_iff_Êags(
⁄
);

1234 i‡(
√w_Êags
 !
ﬁd_Êags
) {

1235 
îr‹
 = 
	`£t_Êags
(
√tdev
, 
√w_Êags
);

1236 
	`√tdev_dev_bsd_ch™ged
(
	`√tdev_dev_bsd_ˇ°
(
	`√tdev_gë_dev
(
√tdev
)));

1239  
îr‹
;

1240 
	}
}

1243 
	$√tdev_bsd_ch™ge_£q
(c⁄° 
√tdev
 *netdev)

1245  
	`√tdev_dev_bsd_ˇ°
(
	`√tdev_gë_dev
(
√tdev
))->
ch™ge_£q
;

1246 
	}
}

1249 c⁄° 
√tdev_˛ass
 
	g√tdev_bsd_˛ass
 = {

1252 
√tdev_bsd_öô
,

1253 
√tdev_bsd_run
,

1254 
√tdev_bsd_waô
,

1255 
√tdev_bsd_¸óã_sy°em
,

1256 
√tdev_bsd_de°roy
,

1257 
NULL
,

1258 
NULL
,

1259 
√tdev_bsd_›í_sy°em
,

1260 
√tdev_bsd_˛o£
,

1262 
√tdev_bsd_li°í
,

1264 
√tdev_bsd_ªcv
,

1265 
√tdev_bsd_ªcv_waô
,

1266 
√tdev_bsd_døö
,

1268 
√tdev_bsd_£nd
,

1269 
√tdev_bsd_£nd_waô
,

1271 
√tdev_bsd_£t_ëhîaddr
,

1272 
√tdev_bsd_gë_ëhîaddr
,

1273 
√tdev_bsd_gë_mtu
,

1274 
NULL
,

1275 
√tdev_bsd_gë_ifödex
,

1276 
√tdev_bsd_gë_ˇºõr
,

1277 
NULL
,

1278 
NULL
,

1279 
√tdev_bsd_gë_°©s
,

1280 
NULL
,

1282 
√tdev_bsd_gë_„©uªs
,

1283 
NULL
,

1284 
NULL
,

1285 
NULL
,

1286 
NULL
,

1287 
NULL
,

1288 
NULL
,

1289 
NULL
,

1290 
NULL
,

1291 
NULL
,

1292 
NULL
,

1293 
NULL
,

1294 
NULL
,

1296 
√tdev_bsd_gë_ö4
,

1297 
√tdev_bsd_£t_ö4
,

1298 
√tdev_bsd_gë_ö6
,

1299 
NULL
,

1300 
NULL
,

1301 
NULL
,

1302 
NULL
,

1304 
√tdev_bsd_upd©e_Êags
,

1306 
√tdev_bsd_ch™ge_£q


1309 c⁄° 
√tdev_˛ass
 
	g√tdev_èp_˛ass
 = {

1312 
√tdev_bsd_öô
,

1313 
√tdev_bsd_run
,

1314 
√tdev_bsd_waô
,

1315 
√tdev_bsd_¸óã_èp
,

1316 
√tdev_bsd_de°roy
,

1317 
NULL
,

1318 
NULL
,

1319 
√tdev_bsd_›í_sy°em
,

1320 
√tdev_bsd_˛o£
,

1322 
√tdev_bsd_li°í
,

1324 
√tdev_bsd_ªcv
,

1325 
√tdev_bsd_ªcv_waô
,

1326 
√tdev_bsd_døö
,

1328 
√tdev_bsd_£nd
,

1329 
√tdev_bsd_£nd_waô
,

1331 
√tdev_bsd_£t_ëhîaddr
,

1332 
√tdev_bsd_gë_ëhîaddr
,

1333 
√tdev_bsd_gë_mtu
,

1334 
NULL
,

1335 
√tdev_bsd_gë_ifödex
,

1336 
√tdev_bsd_gë_ˇºõr
,

1337 
NULL
,

1338 
NULL
,

1339 
√tdev_bsd_gë_°©s
,

1340 
NULL
,

1342 
√tdev_bsd_gë_„©uªs
,

1343 
NULL
,

1344 
NULL
,

1345 
NULL
,

1346 
NULL
,

1347 
NULL
,

1348 
NULL
,

1349 
NULL
,

1350 
NULL
,

1351 
NULL
,

1352 
NULL
,

1353 
NULL
,

1354 
NULL
,

1356 
√tdev_bsd_gë_ö4
,

1357 
√tdev_bsd_£t_ö4
,

1358 
√tdev_bsd_gë_ö6
,

1359 
NULL
,

1360 
NULL
,

1361 
NULL
,

1362 
NULL
,

1364 
√tdev_bsd_upd©e_Êags
,

1366 
√tdev_bsd_ch™ge_£q


1371 
	$de°roy_èp
(
fd
, c⁄° *
«me
)

1373 
i‰eq
 
i‰
;

1375 
	`˛o£
(
fd
);

1376 
	`°r˝y
(
i‰
.
i‰_«me
, 
«me
);

1378 
	`io˘l
(
af_öë_sock
, 
SIOCIFDESTROY
, &
i‰
);

1379 
	}
}

1382 
	$gë_Êags
(c⁄° 
√tdev
 *√tdev, *
Êags
)

1384 
i‰eq
 
i‰
;

1385 
îr‹
;

1387 
îr‹
 = 
	`√tdev_bsd_do_io˘l
(
√tdev
, &
i‰
, 
SIOCGIFFLAGS
, "SIOCGIFFLAGS");

1389 *
Êags
 = 0xFFFF0000 & (
i‰
.
i‰_Êagshigh
 << 16);

1390 *
Êags
 |0x0000FFFF & 
i‰
.
i‰_Êags
;

1392  
îr‹
;

1393 
	}
}

1396 
	$£t_Êags
(
√tdev
 *√tdev, 
Êags
)

1398 
i‰eq
 
i‰
;

1400 
i‰
.
i‰_Êags
 = 0x0000FFFF & 
Êags
;

1401 
i‰
.
i‰_Êagshigh
 = (0xFFFF0000 & 
Êags
) >> 16;

1403  
	`√tdev_bsd_do_io˘l
(
√tdev
, &
i‰
, 
SIOCSIFFLAGS
, "SIOCSIFFLAGS");

1404 
	}
}

1407 
	$gë_ifödex
(c⁄° 
√tdev
 *
√tdev_
, *
ifödexp
)

1409 
√tdev_dev_bsd
 *
√tdev_dev
 =

1410 
	`√tdev_dev_bsd_ˇ°
(
	`√tdev_gë_dev
(
√tdev_
));

1411 *
ifödexp
 = 0;

1412 i‡(!(
√tdev_dev
->
ˇche_vÆid
 & 
VALID_IFINDEX
)) {

1413 
ifödex
 = 
	`if_«mëoödex
(
	`√tdev_gë_«me
(
√tdev_
));

1414 i‡(
ifödex
 <= 0) {

1415  
î∫o
;

1417 
√tdev_dev
->
ˇche_vÆid
 |
VALID_IFINDEX
;

1418 
√tdev_dev
->
ifödex
 = ifindex;

1420 *
ifödexp
 = 
√tdev_dev
->
ifödex
;

1422 
	}
}

1425 
	$gë_ëhîaddr
(c⁄° *
√tdev_«me
, 
uöt8_t
 
ó
[
ETH_ADDR_LEN
])

1427 
iÁddrs
 *
hód
;

1428 
iÁddrs
 *
iÁ
;

1429 
sockaddr_dl
 *
sdl
;

1431 i‡(
	`gëiÁddrs
(&
hód
) != 0) {

1432 
	`VLOG_ERR
("gëiÁddr†⁄ %†devi˚ faûed: %s", 
√tdev_«me
,

1433 
	`°ªº‹
(
î∫o
));

1434  
î∫o
;

1437 
iÁ
 = 
hód
; iÁ; iÁ = iÁ->
iÁ_√xt
) {

1438 i‡(
iÁ
->
iÁ_addr
->
ß_Ámûy
 =
AF_LINK
) {

1439 i‡(!
	`°rcmp
(
iÁ
->
iÁ_«me
, 
√tdev_«me
)) {

1440 
sdl
 = (
sockaddr_dl
 *)
iÁ
->
iÁ_addr
;

1441 i‡(
sdl
) {

1442 
	`mem˝y
(
ó
, 
	`LLADDR
(
sdl
), sdl->
sdl_Æí
);

1443 
	`‰ìiÁddrs
(
hód
);

1450 
	`VLOG_ERR
("couldÇŸ födÉthî√àaddªs†f‹ %†devi˚", 
√tdev_«me
);

1451 
	`‰ìiÁddrs
(
hód
);

1452  
ENODEV
;

1453 
	}
}

1456 
	$£t_ëhîaddr
(c⁄° *
√tdev_«me
, 
hwaddr_Ámûy
,

1457 
hwaddr_Àn
, c⁄° 
uöt8_t
 
mac
[
ETH_ADDR_LEN
])

1459 
i‰eq
 
i‰
;

1461 
	`mem£t
(&
i‰
, 0,  ifr);

1462 
	`°∫˝y
(
i‰
.
i‰_«me
, 
√tdev_«me
,  ifr.ifr_name);

1463 
i‰
.
i‰_addr
.
ß_Ámûy
 = 
hwaddr_Ámûy
;

1464 
i‰
.
i‰_addr
.
ß_Àn
 = 
hwaddr_Àn
;

1465 
	`mem˝y
(
i‰
.
i‰_addr
.
ß_d©a
, 
mac
, 
hwaddr_Àn
);

1466 i‡(
	`io˘l
(
af_öë_sock
, 
SIOCSIFLLADDR
, &
i‰
) < 0) {

1467 
	`VLOG_ERR
("ioctl(SIOCSIFLLADDR) on %s device failed: %s",

1468 
√tdev_«me
, 
	`°ªº‹
(
î∫o
));

1469  
î∫o
;

1472 
	}
}

1475 
	$√tdev_bsd_do_io˘l
(c⁄° 
√tdev
 *√tdev, 
i‰eq
 *
i‰
,

1476 
cmd
, c⁄° *
cmd_«me
)

1478 
	`°∫˝y
(
i‰
->
i‰_«me
, 
	`√tdev_gë_«me
(
√tdev
),  ifr->ifr_name);

1479 i‡(
	`io˘l
(
af_öë_sock
, 
cmd
, 
i‰
) == -1) {

1480 
	`VLOG_DBG_RL
(&
æ
, "%s: ioctl(%s) failed: %s",

1481 
	`√tdev_gë_«me
(
√tdev
), 
cmd_«me
, 
	`°ªº‹
(
î∫o
));

1482  
î∫o
;

1485 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/netdev-dummy.c

17 
	~<c⁄fig.h
>

19 
	~"dummy.h
"

21 
	~<î∫o.h
>

23 
	~"Êow.h
"

24 
	~"li°.h
"

25 
	~"√tdev-¥ovidî.h
"

26 
	~"odp-utû.h
"

27 
	~"oÂ-¥öt.h
"

28 
	~"oÂbuf.h
"

29 
	~"∑ckës.h
"

30 
	~"pﬁl-lo›.h
"

31 
	~"shash.h
"

32 
	~"s£t.h
"

33 
	~"unix˘l.h
"

34 
	~"vlog.h
"

36 
VLOG_DEFINE_THIS_MODULE
(
√tdev_dummy
);

38 
	s√tdev_dev_dummy
 {

39 
√tdev_dev
 
	m√tdev_dev
;

40 
uöt8_t
 
	mhwaddr
[
ETH_ADDR_LEN
];

41 
	mmtu
;

42 
√tdev_°©s
 
	m°©s
;

43 
√tdev_Êags
 
	mÊags
;

44 
	mch™ge_£q
;

46 
li°
 
	mdevs
;

49 
	s√tdev_dummy
 {

50 
√tdev
 
	m√tdev
;

51 
li°
 
	mnode
;

52 
li°
 
	mªcv_queue
;

53 
boﬁ
 
	mli°íög
;

56 
shash
 
	gdummy_√tdev_devs
 = 
SHASH_INITIALIZER
(&
dummy_√tdev_devs
);

58 
unix˘l_cb_func
 
	g√tdev_dummy_£t_admö_°©e
;

59 
√tdev_dummy_¸óã
(c⁄° 
√tdev_˛ass
 *, const *,

60 
√tdev_dev
 **);

61 
√tdev_dev_dummy_pﬁl_nŸify
(
√tdev_dev_dummy
 *);

62 
√tdev_dev_dummy_upd©e_Êags
(
√tdev_dev_dummy
 *,

63 
√tdev_Êags
 
off
,

64 
√tdev_Êags
 
⁄
,

65 
√tdev_Êags
 *
ﬁd_Êag•
);

67 
boﬁ


68 
	$is_dummy_˛ass
(c⁄° 
√tdev_˛ass
 *
˛ass
)

70  
˛ass
->
¸óã
 =
√tdev_dummy_¸óã
;

71 
	}
}

73 
√tdev_dev_dummy
 *

74 
	$√tdev_dev_dummy_ˇ°
(c⁄° 
√tdev_dev
 *netdev_dev)

76 
	`as£π
(
	`is_dummy_˛ass
(
	`√tdev_dev_gë_˛ass
(
√tdev_dev
)));

77  
	`CONTAINER_OF
(
√tdev_dev
, 
√tdev_dev_dummy
,Çetdev_dev);

78 
	}
}

80 
√tdev_dummy
 *

81 
	$√tdev_dummy_ˇ°
(c⁄° 
√tdev
 *netdev)

83 
√tdev_dev
 *√tdev_dev = 
	`√tdev_gë_dev
(
√tdev
);

84 
	`as£π
(
	`is_dummy_˛ass
(
	`√tdev_dev_gë_˛ass
(
√tdev_dev
)));

85  
	`CONTAINER_OF
(
√tdev
, 
√tdev_dummy
,Çetdev);

86 
	}
}

89 
	$√tdev_dummy_¸óã
(c⁄° 
√tdev_˛ass
 *
˛ass
, c⁄° *
«me
,

90 
√tdev_dev
 **
√tdev_devp
)

92 
n
 = 0xaa550000;

93 
√tdev_dev_dummy
 *
√tdev_dev
;

95 
√tdev_dev
 = 
	`xzÆloc
( *netdev_dev);

96 
	`√tdev_dev_öô
(&
√tdev_dev
->√tdev_dev, 
«me
, 
˛ass
);

97 
√tdev_dev
->
hwaddr
[0] = 0xaa;

98 
√tdev_dev
->
hwaddr
[1] = 0x55;

99 
√tdev_dev
->
hwaddr
[2] = 
n
 >> 24;

100 
√tdev_dev
->
hwaddr
[3] = 
n
 >> 16;

101 
√tdev_dev
->
hwaddr
[4] = 
n
 >> 8;

102 
√tdev_dev
->
hwaddr
[5] = 
n
;

103 
√tdev_dev
->
mtu
 = 1500;

104 
√tdev_dev
->
Êags
 = 0;

105 
√tdev_dev
->
ch™ge_£q
 = 1;

106 
	`li°_öô
(&
√tdev_dev
->
devs
);

108 
	`shash_add
(&
dummy_√tdev_devs
, 
«me
, 
√tdev_dev
);

110 
n
++;

112 *
√tdev_devp
 = &
√tdev_dev
->netdev_dev;

115 
	}
}

118 
	$√tdev_dummy_de°roy
(
√tdev_dev
 *
√tdev_dev_
)

120 
√tdev_dev_dummy
 *
√tdev_dev
 = 
	`√tdev_dev_dummy_ˇ°
(
√tdev_dev_
);

122 
	`shash_föd_™d_dñëe
(&
dummy_√tdev_devs
,

123 
	`√tdev_dev_gë_«me
(
√tdev_dev_
));

124 
	`‰ì
(
√tdev_dev
);

125 
	}
}

128 
	$√tdev_dummy_›í
(
√tdev_dev
 *
√tdev_dev_
, 
√tdev
 **
√tdevp
)

130 
√tdev_dev_dummy
 *
√tdev_dev
 = 
	`√tdev_dev_dummy_ˇ°
(
√tdev_dev_
);

131 
√tdev_dummy
 *
√tdev
;

133 
√tdev
 = 
	`xmÆloc
( *netdev);

134 
	`√tdev_öô
(&
√tdev
->√tdev, 
√tdev_dev_
);

135 
	`li°_öô
(&
√tdev
->
ªcv_queue
);

136 
√tdev
->
li°íög
 = 
Ál£
;

138 *
√tdevp
 = &
√tdev
->netdev;

139 
	`li°_push_back
(&
√tdev_dev
->
devs
, &
√tdev
->
node
);

141 
	}
}

144 
	$√tdev_dummy_˛o£
(
√tdev
 *
√tdev_
)

146 
√tdev_dummy
 *
√tdev
 = 
	`√tdev_dummy_ˇ°
(
√tdev_
);

147 
	`li°_ªmove
(&
√tdev
->
node
);

148 
	`oÂbuf_li°_dñëe
(&
√tdev
->
ªcv_queue
);

149 
	`‰ì
(
√tdev
);

150 
	}
}

153 
	$√tdev_dummy_li°í
(
√tdev
 *
√tdev_
)

155 
√tdev_dummy
 *
√tdev
 = 
	`√tdev_dummy_ˇ°
(
√tdev_
);

156 
√tdev
->
li°íög
 = 
åue
;

158 
	}
}

161 
	$√tdev_dummy_ªcv
(
√tdev
 *
√tdev_
, *
buf„r
, 
size_t
 
size
)

163 
√tdev_dummy
 *
√tdev
 = 
	`√tdev_dummy_ˇ°
(
√tdev_
);

164 
oÂbuf
 *
∑ckë
;

165 
size_t
 
∑ckë_size
;

167 i‡(
	`li°_is_em±y
(&
√tdev
->
ªcv_queue
)) {

168  -
EAGAIN
;

171 
∑ckë
 = 
	`oÂbuf_‰om_li°
(
	`li°_p›_‰⁄t
(&
√tdev
->
ªcv_queue
));

172 i‡(
∑ckë
->
size
 > size) {

173  -
EMSGSIZE
;

175 
∑ckë_size
 = 
∑ckë
->
size
;

177 
	`mem˝y
(
buf„r
, 
∑ckë
->
d©a
,Öackë->
size
);

178 
	`oÂbuf_dñëe
(
∑ckë
);

180  
∑ckë_size
;

181 
	}
}

184 
	$√tdev_dummy_ªcv_waô
(
√tdev
 *
√tdev_
)

186 
√tdev_dummy
 *
√tdev
 = 
	`√tdev_dummy_ˇ°
(
√tdev_
);

187 i‡(!
	`li°_is_em±y
(&
√tdev
->
ªcv_queue
)) {

188 
	`pﬁl_immedüã_wake
();

190 
	}
}

193 
	$√tdev_dummy_døö
(
√tdev
 *
√tdev_
)

195 
√tdev_dummy
 *
√tdev
 = 
	`√tdev_dummy_ˇ°
(
√tdev_
);

196 
	`oÂbuf_li°_dñëe
(&
√tdev
->
ªcv_queue
);

198 
	}
}

201 
	$√tdev_dummy_£t_ëhîaddr
(
√tdev
 *netdev,

202 c⁄° 
uöt8_t
 
mac
[
ETH_ADDR_LEN
])

204 
√tdev_dev_dummy
 *
dev
 =

205 
	`√tdev_dev_dummy_ˇ°
(
	`√tdev_gë_dev
(
√tdev
));

207 i‡(!
	`ëh_addr_equÆs
(
dev
->
hwaddr
, 
mac
)) {

208 
	`mem˝y
(
dev
->
hwaddr
, 
mac
, 
ETH_ADDR_LEN
);

209 
	`√tdev_dev_dummy_pﬁl_nŸify
(
dev
);

213 
	}
}

216 
	$√tdev_dummy_gë_ëhîaddr
(c⁄° 
√tdev
 *netdev,

217 
uöt8_t
 
mac
[
ETH_ADDR_LEN
])

219 c⁄° 
√tdev_dev_dummy
 *
dev
 =

220 
	`√tdev_dev_dummy_ˇ°
(
	`√tdev_gë_dev
(
√tdev
));

222 
	`mem˝y
(
mac
, 
dev
->
hwaddr
, 
ETH_ADDR_LEN
);

224 
	}
}

227 
	$√tdev_dummy_gë_mtu
(c⁄° 
√tdev
 *√tdev, *
mtup
)

229 c⁄° 
√tdev_dev_dummy
 *
dev
 =

230 
	`√tdev_dev_dummy_ˇ°
(
	`√tdev_gë_dev
(
√tdev
));

232 *
mtup
 = 
dev
->
mtu
;

234 
	}
}

237 
	$√tdev_dummy_£t_mtu
(c⁄° 
√tdev
 *√tdev, 
mtu
)

239 
√tdev_dev_dummy
 *
dev
 =

240 
	`√tdev_dev_dummy_ˇ°
(
	`√tdev_gë_dev
(
√tdev
));

242 
dev
->
mtu
 = mtu;

244 
	}
}

247 
	$√tdev_dummy_gë_°©s
(c⁄° 
√tdev
 *√tdev, 
√tdev_°©s
 *
°©s
)

249 c⁄° 
√tdev_dev_dummy
 *
dev
 =

250 
	`√tdev_dev_dummy_ˇ°
(
	`√tdev_gë_dev
(
√tdev
));

252 *
°©s
 = 
dev
->stats;

254 
	}
}

257 
	$√tdev_dummy_£t_°©s
(
√tdev
 *√tdev, c⁄° 
√tdev_°©s
 *
°©s
)

259 
√tdev_dev_dummy
 *
dev
 =

260 
	`√tdev_dev_dummy_ˇ°
(
	`√tdev_gë_dev
(
√tdev
));

262 
dev
->
°©s
 = *stats;

264 
	}
}

267 
	$√tdev_dummy_upd©e_Êags
(
√tdev
 *netdev,

268 
√tdev_Êags
 
off
, √tdev_Êag†
⁄
,

269 
√tdev_Êags
 *
ﬁd_Êag•
)

271 
√tdev_dev_dummy
 *
dev
 =

272 
	`√tdev_dev_dummy_ˇ°
(
	`√tdev_gë_dev
(
√tdev
));

274  
	`√tdev_dev_dummy_upd©e_Êags
(
dev
, 
off
, 
⁄
, 
ﬁd_Êag•
);

275 
	}
}

278 
	$√tdev_dev_dummy_upd©e_Êags
(
√tdev_dev_dummy
 *
dev
,

279 
√tdev_Êags
 
off
, √tdev_Êag†
⁄
,

280 
√tdev_Êags
 *
ﬁd_Êag•
)

282 i‡((
off
 | 
⁄
Ë& ~(
NETDEV_UP
 | 
NETDEV_PROMISC
)) {

283  
EINVAL
;

286 *
ﬁd_Êag•
 = 
dev
->
Êags
;

287 
dev
->
Êags
 |
⁄
;

288 
dev
->
Êags
 &~
off
;

289 i‡(*
ﬁd_Êag•
 !
dev
->
Êags
) {

290 
	`√tdev_dev_dummy_pﬁl_nŸify
(
dev
);

293 
	}
}

296 
	$√tdev_dummy_ch™ge_£q
(c⁄° 
√tdev
 *netdev)

298  
	`√tdev_dev_dummy_ˇ°
(
	`√tdev_gë_dev
(
√tdev
))->
ch™ge_£q
;

299 
	}
}

304 
	$√tdev_dev_dummy_pﬁl_nŸify
(
√tdev_dev_dummy
 *
dev
)

306 
dev
->
ch™ge_£q
++;

307 i‡(!
dev
->
ch™ge_£q
) {

308 
dev
->
ch™ge_£q
++;

310 
	}
}

312 c⁄° 
√tdev_˛ass
 
	gdummy_˛ass
 = {

314 
NULL
,

315 
NULL
,

316 
NULL
,

318 
√tdev_dummy_¸óã
,

319 
√tdev_dummy_de°roy
,

320 
NULL
,

321 
NULL
,

323 
√tdev_dummy_›í
,

324 
√tdev_dummy_˛o£
,

326 
√tdev_dummy_li°í
,

327 
√tdev_dummy_ªcv
,

328 
√tdev_dummy_ªcv_waô
,

329 
√tdev_dummy_døö
,

331 
NULL
,

332 
NULL
,

334 
√tdev_dummy_£t_ëhîaddr
,

335 
√tdev_dummy_gë_ëhîaddr
,

336 
√tdev_dummy_gë_mtu
,

337 
√tdev_dummy_£t_mtu
,

338 
NULL
,

339 
NULL
,

340 
NULL
,

341 
NULL
,

342 
√tdev_dummy_gë_°©s
,

343 
√tdev_dummy_£t_°©s
,

345 
NULL
,

346 
NULL
,

348 
NULL
,

349 
NULL
,

350 
NULL
,

351 
NULL
,

352 
NULL
,

353 
NULL
,

354 
NULL
,

355 
NULL
,

356 
NULL
,

357 
NULL
,

358 
NULL
,

360 
NULL
,

361 
NULL
,

362 
NULL
,

363 
NULL
,

364 
NULL
,

365 
NULL
,

366 
NULL
,

368 
√tdev_dummy_upd©e_Êags
,

370 
√tdev_dummy_ch™ge_£q


373 
oÂbuf
 *

374 
	$ëh_‰om_∑ckë_‹_Êow
(c⁄° *
s
)

376 
odp_key_fô√ss
 
fô√ss
;

377 
oÂbuf
 *
∑ckë
;

378 
oÂbuf
 
odp_key
;

379 
Êow
 flow;

380 
îr‹
;

382 i‡(!
	`ëh_‰om_hex
(
s
, &
∑ckë
)) {

383  
∑ckë
;

392 
	`oÂbuf_öô
(&
odp_key
, 0);

393 
îr‹
 = 
	`odp_Êow_key_‰om_°rög
(
s
, 
NULL
, &
odp_key
);

394 i‡(
îr‹
) {

395 
	`oÂbuf_unöô
(&
odp_key
);

396  
NULL
;

400 
fô√ss
 = 
	`odp_Êow_key_to_Êow
(
odp_key
.
d©a
, odp_key.
size
, &
Êow
);

401 i‡(
fô√ss
 =
ODP_FIT_ERROR
) {

402 
	`oÂbuf_unöô
(&
odp_key
);

403  
NULL
;

406 
∑ckë
 = 
	`oÂbuf_√w
(0);

407 
	`Êow_compo£
(
∑ckë
, &
Êow
);

409 
	`oÂbuf_unöô
(&
odp_key
);

410  
∑ckë
;

411 
	}
}

414 
	$√tdev_dummy_ª˚ive
(
unix˘l_c⁄n
 *
c⁄n
,

415 
¨gc
, c⁄° *
¨gv
[], *
aux
 
OVS_UNUSED
)

417 
√tdev_dev_dummy
 *
dummy_dev
;

418 
n_li°íîs
;

419 
i
;

421 
dummy_dev
 = 
	`shash_föd_d©a
(&
dummy_√tdev_devs
, 
¨gv
[1]);

422 i‡(!
dummy_dev
) {

423 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, "no such dummyÇetdev");

427 
n_li°íîs
 = 0;

428 
i
 = 2; i < 
¨gc
; i++) {

429 
√tdev_dummy
 *
dev
;

430 
oÂbuf
 *
∑ckë
;

432 
∑ckë
 = 
	`ëh_‰om_∑ckë_‹_Êow
(
¨gv
[
i
]);

433 i‡(!
∑ckë
) {

434 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, "badÖacket syntax");

438 
n_li°íîs
 = 0;

439 
	`LIST_FOR_EACH
 (
dev
, 
node
, &
dummy_dev
->
devs
) {

440 i‡(
dev
->
li°íög
) {

441 
oÂbuf
 *
c›y
 = 
	`oÂbuf_˛⁄e
(
∑ckë
);

442 
	`li°_push_back
(&
dev
->
ªcv_queue
, &
c›y
->
li°_node
);

443 
n_li°íîs
++;

446 
	`oÂbuf_dñëe
(
∑ckë
);

449 i‡(!
n_li°íîs
) {

450 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, "packets queued butÇobodyÜistened");

452 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, "success");

454 
	}
}

457 
	$√tdev_dev_dummy_£t_admö_°©e
(
√tdev_dev_dummy
 *
dev
,

458 
boﬁ
 
admö_°©e
)

460 
√tdev_Êags
 
ﬁd_Êags
;

462 i‡(
admö_°©e
) {

463 
	`√tdev_dev_dummy_upd©e_Êags
(
dev
, 0, 
NETDEV_UP
, &
ﬁd_Êags
);

465 
	`√tdev_dev_dummy_upd©e_Êags
(
dev
, 
NETDEV_UP
, 0, &
ﬁd_Êags
);

467 
	}
}

470 
	$√tdev_dummy_£t_admö_°©e
(
unix˘l_c⁄n
 *
c⁄n
, 
¨gc
,

471 c⁄° *
¨gv
[], *
aux
 
OVS_UNUSED
)

473 
boﬁ
 
up
;

475 i‡(!
	`°rˇ£cmp
(
¨gv
[
¨gc
 - 1], "up")) {

476 
up
 = 
åue
;

477 } i‡–!
	`°rˇ£cmp
(
¨gv
[
¨gc
 - 1], "down")) {

478 
up
 = 
Ál£
;

480 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, "Invalid Admin State");

484 i‡(
¨gc
 > 2) {

485 
√tdev_dev_dummy
 *
dummy_dev
;

487 
dummy_dev
 = 
	`shash_föd_d©a
(&
dummy_√tdev_devs
, 
¨gv
[1]);

488 i‡(
dummy_dev
) {

489 
	`√tdev_dev_dummy_£t_admö_°©e
(
dummy_dev
, 
up
);

491 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, "Unknown Dummy Interface");

495 
shash_node
 *
node
;

497 
	`SHASH_FOR_EACH
 (
node
, &
dummy_√tdev_devs
) {

498 
	`√tdev_dev_dummy_£t_admö_°©e
(
node
->
d©a
, 
up
);

501 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, "OK");

502 
	}
}

505 
	$√tdev_dummy_ªgi°î
(
boﬁ
 
ovîride
)

507 
	`unix˘l_comm™d_ªgi°î
("netdev-dummy/receive", "NAME PACKET|FLOW...",

508 2, 
INT_MAX
, 
√tdev_dummy_ª˚ive
, 
NULL
);

509 
	`unix˘l_comm™d_ªgi°î
("netdev-dummy/set-admin-state",

511 
√tdev_dummy_£t_admö_°©e
, 
NULL
);

513 i‡(
ovîride
) {

514 
s£t
 
ty≥s
;

515 c⁄° *
ty≥
;

517 
	`s£t_öô
(&
ty≥s
);

518 
	`√tdev_íumî©e_ty≥s
(&
ty≥s
);

519 
	`SSET_FOR_EACH
 (
ty≥
, &
ty≥s
) {

520 i‡(!
	`√tdev_uƒegi°î_¥ovidî
(
ty≥
)) {

521 
√tdev_˛ass
 *
˛ass
;

523 
˛ass
 = 
	`xmÆloc
( *class);

524 *
˛ass
 = 
dummy_˛ass
;

525 
˛ass
->
ty≥
 = 
	`x°rdup
(type);

526 
	`√tdev_ªgi°î_¥ovidî
(
˛ass
);

529 
	`s£t_de°roy
(&
ty≥s
);

531 
	`√tdev_ªgi°î_¥ovidî
(&
dummy_˛ass
);

532 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/netdev-linux.c

17 
	~<c⁄fig.h
>

19 
	~"√tdev-löux.h
"

21 
	~<as£π.h
>

22 
	~<î∫o.h
>

23 
	~<f˙é.h
>

24 
	~<¨∑/öë.h
>

25 
	~<öây≥s.h
>

26 
	~<löux/gí_°©s.h
>

27 
	~<löux/if_ëhî.h
>

28 
	~<löux/if_tun.h
>

29 
	~<löux/ty≥s.h
>

30 
	~<löux/ëhtoﬁ.h
>

31 
	~<löux/mii.h
>

32 
	~<löux/pkt_˛s.h
>

33 
	~<löux/pkt_sched.h
>

34 
	~<löux/π√éök.h
>

35 
	~<löux/sockios.h
>

36 
	~<löux/vîsi⁄.h
>

37 
	~<sys/ty≥s.h
>

38 
	~<sys/io˘l.h
>

39 
	~<sys/sockë.h
>

40 
	~<√çackë/∑ckë.h
>

41 
	~<√t/if.h
>

42 
	~<√t/if_¨p.h
>

43 
	~<√t/if_∑ckë.h
>

44 
	~<√t/rouã.h
>

45 
	~<√töë/ö.h
>

46 
	~<pﬁl.h
>

47 
	~<°dlib.h
>

48 
	~<°rög.h
>

49 
	~<uni°d.h
>

51 
	~"covîage.h
"

52 
	~"dpif-löux.h
"

53 
	~"dy«mic-°rög.h
"

54 
	~"Áèl-sig«l.h
"

55 
	~"hash.h
"

56 
	~"hm≠.h
"

57 
	~"√tdev-¥ovidî.h
"

58 
	~"√tdev-vp‹t.h
"

59 
	~"√éök.h
"

60 
	~"√éök-nŸifõr.h
"

61 
	~"√éök-sockë.h
"

62 
	~"oÂbuf.h
"

63 
	~"›íÊow/›íÊow.h
"

64 
	~"∑ckës.h
"

65 
	~"pﬁl-lo›.h
"

66 
	~"π√éök-lök.h
"

67 
	~"sockë-utû.h
"

68 
	~"shash.h
"

69 
	~"s£t.h
"

70 
	~"timî.h
"

71 
	~"vlog.h
"

73 
VLOG_DEFINE_THIS_MODULE
(
√tdev_löux
);

75 
COVERAGE_DEFINE
(
√tdev_£t_pﬁicög
);

76 
COVERAGE_DEFINE
(
√tdev_¨p_lookup
);

77 
COVERAGE_DEFINE
(
√tdev_gë_ifödex
);

78 
COVERAGE_DEFINE
(
√tdev_gë_hwaddr
);

79 
COVERAGE_DEFINE
(
√tdev_£t_hwaddr
);

80 
COVERAGE_DEFINE
(
√tdev_gë_ëhtoﬁ
);

81 
COVERAGE_DEFINE
(
√tdev_£t_ëhtoﬁ
);

86 #i‚de‡
ADVERTISED_Pau£


87 
	#ADVERTISED_Pau£
 (1 << 13)

	)

89 #i‚de‡
ADVERTISED_Asym_Pau£


90 
	#ADVERTISED_Asym_Pau£
 (1 << 14)

	)

95 #i‚de‡
ETHTOOL_GFLAGS


96 
	#ETHTOOL_GFLAGS
 0x00000025

	)

98 #i‚de‡
ETHTOOL_SFLAGS


99 
	#ETHTOOL_SFLAGS
 0x00000026

	)

104 #i‚de‡
TC_RTAB_SIZE


105 
	#TC_RTAB_SIZE
 1024

	)

108 
∆n_nŸifõr
 *
	g√tdev_löux_ˇche_nŸifõr
 = 
NULL
;

109 
	gˇche_nŸifõr_ªfcou¡
;

112 
	mVALID_IFINDEX
 = 1 << 0,

113 
	mVALID_ETHERADDR
 = 1 << 1,

114 
	mVALID_IN4
 = 1 << 2,

115 
	mVALID_IN6
 = 1 << 3,

116 
	mVALID_MTU
 = 1 << 4,

117 
	mVALID_POLICING
 = 1 << 5,

118 
	mVALID_VPORT_STAT_ERROR
 = 1 << 6,

119 
	mVALID_DRVINFO
 = 1 << 7,

120 
	mVALID_FEATURES
 = 1 << 8,

123 
	sèp_°©e
 {

124 
	mfd
;

125 
boﬁ
 
	m›íed
;

135 
	stc
 {

136 c⁄° 
tc_›s
 *
	m›s
;

137 
hm≠
 
	mqueues
;

146 
	stc_queue
 {

147 
hm≠_node
 
	mhm≠_node
;

148 
	mqueue_id
;

157 
	stc_›s
 {

161 c⁄° *
	mlöux_«me
;

164 c⁄° *
	movs_«me
;

168 
	mn_queues
;

185 (*
	mtc_ö°Æl
)(
√tdev
 *
	m√tdev
, c⁄° 
sm≠
 *
	mdëaûs
);

200 (*
	mtc_lﬂd
)(
√tdev
 *
	m√tdev
, 
oÂbuf
 *
	m∆msg
);

211 (*
	mtc_de°roy
)(
tc
 *
	mtc
);

225 (*
	mqdisc_gë
)(c⁄° 
√tdev
 *
	m√tdev
, 
sm≠
 *
	mdëaûs
);

236 (*
	mqdisc_£t
)(
	m√tdev
 *, c⁄° 
sm≠
 *
	mdëaûs
);

251 (*
	m˛ass_gë
)(c⁄° 
√tdev
 *
	m√tdev
, c⁄° 
tc_queue
 *
	mqueue
,

252 
sm≠
 *
	mdëaûs
);

265 (*
	m˛ass_£t
)(
	m√tdev
 *, 
	mqueue_id
,

266 c⁄° 
sm≠
 *
	mdëaûs
);

273 (*
	m˛ass_dñëe
)(
	m√tdev
 *, 
tc_queue
 *
	mqueue
);

282 (*
	m˛ass_gë_°©s
)(c⁄° 
√tdev
 *
	m√tdev
,

283 c⁄° 
tc_queue
 *
	mqueue
,

284 
√tdev_queue_°©s
 *
	m°©s
);

291 (*
	m˛ass_dump_°©s
)(c⁄° 
√tdev
 *
	m√tdev
,

292 c⁄° 
oÂbuf
 *
	m∆msg
,

293 
√tdev_dump_queue_°©s_cb
 *
	mcb
, *
	maux
);

297 
	$tc_öô
(
tc
 *tc, c⁄° 
tc_›s
 *
›s
)

299 
tc
->
›s
 = ops;

300 
	`hm≠_öô
(&
tc
->
queues
);

301 
	}
}

304 
	$tc_de°roy
(
tc
 *tc)

306 
	`hm≠_de°roy
(&
tc
->
queues
);

307 
	}
}

309 c⁄° 
tc_›s
 
	gtc_›s_htb
;

310 c⁄° 
tc_›s
 
	gtc_›s_hfsc
;

311 c⁄° 
tc_›s
 
	gtc_›s_deÁu…
;

312 c⁄° 
tc_›s
 
	gtc_›s_Ÿhî
;

314 c⁄° 
tc_›s
 *
	gtcs
[] = {

315 &
tc_›s_htb
,

316 &
tc_›s_hfsc
,

317 &
tc_›s_deÁu…
,

318 &
tc_›s_Ÿhî
,

319 
NULL


322 
tc_make_h™dÀ
(
maj‹
, 
mö‹
);

323 
tc_gë_maj‹
(
h™dÀ
);

324 
tc_gë_mö‹
(
h™dÀ
);

326 
tc_ticks_to_byãs
(
øã
, 
ticks
);

327 
tc_byãs_to_ticks
(
øã
, 
size
);

328 
tc_buf„r_≥r_jiffy
(
øã
);

330 
tcmsg
 *
tc_make_ªque°
(c⁄° 
√tdev
 *, 
ty≥
,

331 
Êags
, 
oÂbuf
 *);

332 
tc_å™ß˘
(
oÂbuf
 *
ªque°
, oÂbu‡**
ª∂yp
);

333 
tc_add_dñ_ögªss_qdisc
(
√tdev
 *√tdev, 
boﬁ
 
add
);

334 
tc_add_pﬁi˚r
(
√tdev
 *√tdev, 
kbôs_øã
,

335 
kbôs_bur°
);

337 
tc_∑r£_qdisc
(c⁄° 
oÂbuf
 *, c⁄° **
köd
,

338 
∆©å
 **
›ti⁄s
);

339 
tc_∑r£_˛ass
(c⁄° 
oÂbuf
 *, *
queue_id
,

340 
∆©å
 **
›ti⁄s
,

341 
√tdev_queue_°©s
 *);

342 
tc_quîy_˛ass
(c⁄° 
√tdev
 *,

343 
h™dÀ
, 
∑ª¡
,

344 
oÂbuf
 **
ª∂yp
);

345 
tc_dñëe_˛ass
(c⁄° 
√tdev
 *, 
h™dÀ
);

347 
tc_dñ_qdisc
(
√tdev
 *netdev);

348 
tc_quîy_qdisc
(c⁄° 
√tdev
 *netdev);

350 
tc_ˇlc_˚Œ_log
(
mtu
);

351 
tc_fûl_øã
(
tc_øã•ec
 *
øã
, 
uöt64_t
 
bps
, 
mtu
);

352 
tc_put_πab
(
oÂbuf
 *, 
uöt16_t
 
ty≥
,

353 c⁄° 
tc_øã•ec
 *
øã
);

354 
tc_ˇlc_buf„r
(
Bps
, 
mtu
, 
uöt64_t
 
bur°_byãs
);

356 
	s√tdev_dev_löux
 {

357 
√tdev_dev
 
	m√tdev_dev
;

359 
shash_node
 *
	mshash_node
;

360 
	mˇche_vÆid
;

361 
	mch™ge_£q
;

363 
boﬁ
 
	mmiim⁄
;

364 
	mmiim⁄_öãrvÆ
;

365 
timî
 
	mmiim⁄_timî
;

369 
	mifödex
;

370 
uöt8_t
 
	mëhîaddr
[
ETH_ADDR_LEN
];

371 
ö_addr
 
	maddªss
, 
	m√tmask
;

372 
ö6_addr
 
	mö6
;

373 
	mmtu
;

374 
	mifi_Êags
;

375 
	mˇºõr_ª£ts
;

376 
uöt32_t
 
	mkbôs_øã
;

377 
uöt32_t
 
	mkbôs_bur°
;

378 
	mvp‹t_°©s_îr‹
;

380 
	m√tdev_mtu_îr‹
;

381 
	mëhî_addr_îr‹
;

382 
	m√tdev_pﬁicög_îr‹
;

383 
	mgë_„©uªs_îr‹
;

384 
	mgë_ifödex_îr‹
;

386 
√tdev_„©uªs
 
	mcuºít
;

387 
√tdev_„©uªs
 
	madvîti£d
;

388 
√tdev_„©uªs
 
	msuµ‹ãd
;

389 
√tdev_„©uªs
 
	m≥î
;

391 
ëhtoﬁ_drvöfo
 
	mdrvöfo
;

392 
tc
 *
	mtc
;

395 
èp_°©e
 
	mèp
;

396 } 
	m°©e
;

399 
	s√tdev_löux
 {

400 
√tdev
 
	m√tdev
;

401 
	mfd
;

405 
	gaf_öë_sock
 = -1;

408 
∆_sock
 *
	gπ∆_sock
;

412 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(5, 20);

414 
√tdev_löux_öô
();

416 
√tdev_löux_do_ëhtoﬁ
(c⁄° *
«me
, 
ëhtoﬁ_cmd
 *,

417 
cmd
, c⁄° *
cmd_«me
);

418 
√tdev_löux_do_io˘l
(c⁄° *
«me
, 
i‰eq
 *, 
cmd
,

419 c⁄° *
cmd_«me
);

420 
√tdev_löux_gë_ùv4
(c⁄° 
√tdev
 *, 
ö_addr
 *,

421 
cmd
, c⁄° *
cmd_«me
);

422 
gë_Êags
(c⁄° 
√tdev_dev
 *, *
Êags
);

423 
£t_Êags
(
√tdev
 *, 
Êags
);

424 
do_gë_ifödex
(c⁄° *
√tdev_«me
);

425 
gë_ifödex
(c⁄° 
√tdev
 *, *
ifödexp
);

426 
do_£t_addr
(
√tdev
 *netdev,

427 
io˘l_ƒ
, c⁄° *
io˘l_«me
,

428 
ö_addr
 
addr
);

429 
gë_ëhîaddr
(c⁄° *
√tdev_«me
, 
uöt8_t
 
ó
[
ETH_ADDR_LEN
]);

430 
£t_ëhîaddr
(c⁄° *
√tdev_«me
, c⁄° 
uöt8_t
[
ETH_ADDR_LEN
]);

431 
gë_°©s_vü_√éök
(
ifödex
, 
√tdev_°©s
 *
°©s
);

432 
gë_°©s_vü_¥oc
(c⁄° *
√tdev_«me
, 
√tdev_°©s
 *
°©s
);

433 
af_∑ckë_sock
();

434 
√tdev_löux_miim⁄_run
();

435 
√tdev_löux_miim⁄_waô
();

437 
boﬁ


438 
	$is_√tdev_löux_˛ass
(c⁄° 
√tdev_˛ass
 *netdev_class)

440  
√tdev_˛ass
->
öô
 =
√tdev_löux_öô
;

441 
	}
}

443 
√tdev_dev_löux
 *

444 
	$√tdev_dev_löux_ˇ°
(c⁄° 
√tdev_dev
 *netdev_dev)

446 c⁄° 
√tdev_˛ass
 *√tdev_˛as†
	`√tdev_dev_gë_˛ass
(
√tdev_dev
);

447 
	`as£π
(
	`is_√tdev_löux_˛ass
(
√tdev_˛ass
));

449  
	`CONTAINER_OF
(
√tdev_dev
, 
√tdev_dev_löux
,Çetdev_dev);

450 
	}
}

452 
√tdev_löux
 *

453 
	$√tdev_löux_ˇ°
(c⁄° 
√tdev
 *netdev)

455 
√tdev_dev
 *√tdev_dev = 
	`√tdev_gë_dev
(
√tdev
);

456 c⁄° 
√tdev_˛ass
 *√tdev_˛as†
	`√tdev_dev_gë_˛ass
(
√tdev_dev
);

457 
	`as£π
(
	`is_√tdev_löux_˛ass
(
√tdev_˛ass
));

459  
	`CONTAINER_OF
(
√tdev
, 
√tdev_löux
,Çetdev);

460 
	}
}

463 
	$√tdev_löux_öô
()

465 
°©us
 = -1;

466 i‡(
°©us
 < 0) {

468 
af_öë_sock
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

469 
°©us
 = 
af_öë_sock
 >0 ? 0 : 
î∫o
;

470 i‡(
°©us
) {

471 
	`VLOG_ERR
("ÁûedÅÿ¸óã i√àsockë: %s", 
	`°ªº‹
(
°©us
));

475 i‡(!
°©us
) {

476 
°©us
 = 
	`∆_sock_¸óã
(
NETLINK_ROUTE
, &
π∆_sock
);

477 i‡(
°©us
) {

478 
	`VLOG_ERR_RL
(&
æ
, "failedÅo createÑtnetlink socket: %s",

479 
	`°ªº‹
(
°©us
));

483  
°©us
;

484 
	}
}

487 
	$√tdev_löux_run
()

489 
	`π√éök_lök_run
();

490 
	`√tdev_löux_miim⁄_run
();

491 
	}
}

494 
	$√tdev_löux_waô
()

496 
	`π√éök_lök_waô
();

497 
	`√tdev_löux_miim⁄_waô
();

498 
	}
}

501 
	$√tdev_löux_gë_drvöfo
(
√tdev_dev_löux
 *
√tdev_dev
)

504 
îr‹
;

506 i‡(
√tdev_dev
->
ˇche_vÆid
 & 
VALID_DRVINFO
) {

510 
	`COVERAGE_INC
(
√tdev_gë_ëhtoﬁ
);

511 
	`mem£t
(&
√tdev_dev
->
drvöfo
, 0, Çetdev_dev->drvinfo);

512 
îr‹
 = 
	`√tdev_löux_do_ëhtoﬁ
(
√tdev_dev
->√tdev_dev.
«me
,

513 (
ëhtoﬁ_cmd
 *)&
√tdev_dev
->
drvöfo
,

514 
ETHTOOL_GDRVINFO
,

516 i‡(!
îr‹
) {

517 
√tdev_dev
->
ˇche_vÆid
 |
VALID_DRVINFO
;

519  
îr‹
;

520 
	}
}

523 
	$√tdev_dev_löux_ch™ged
(
√tdev_dev_löux
 *
dev
,

524 
ifi_Êags
,

525 
mask
)

527 
dev
->
ch™ge_£q
++;

528 i‡(!
dev
->
ch™ge_£q
) {

529 
dev
->
ch™ge_£q
++;

532 i‡((
dev
->
ifi_Êags
 ^ ifi_ÊagsË& 
IFF_RUNNING
) {

533 
dev
->
ˇºõr_ª£ts
++;

535 
dev
->
ifi_Êags
 = ifi_flags;

537 
dev
->
ˇche_vÆid
 &
mask
;

538 
	}
}

541 
	$√tdev_dev_löux_upd©e
(
√tdev_dev_löux
 *
dev
,

542 c⁄° 
π√éök_lök_ch™ge
 *
ch™ge
)

544 i‡(
ch™ge
->
∆msg_ty≥
 =
RTM_NEWLINK
) {

546 
	`√tdev_dev_löux_ch™ged
(
dev
, 
ch™ge
->
ifi_Êags
, 
VALID_DRVINFO
);

549 i‡(
ch™ge
->
mtu
) {

550 
dev
->
mtu
 = 
ch™ge
->mtu;

551 
dev
->
ˇche_vÆid
 |
VALID_MTU
;

552 
dev
->
√tdev_mtu_îr‹
 = 0;

555 i‡(!
	`ëh_addr_is_zîo
(
ch™ge
->
addr
)) {

556 
	`mem˝y
(
dev
->
ëhîaddr
, 
ch™ge
->
addr
, 
ETH_ADDR_LEN
);

557 
dev
->
ˇche_vÆid
 |
VALID_ETHERADDR
;

558 
dev
->
ëhî_addr_îr‹
 = 0;

561 
dev
->
ifödex
 = 
ch™ge
->
ifi_ödex
;

562 
dev
->
ˇche_vÆid
 |
VALID_IFINDEX
;

563 
dev
->
gë_ifödex_îr‹
 = 0;

566 
	`√tdev_dev_löux_ch™ged
(
dev
, 
ch™ge
->
ifi_Êags
, 0);

568 
	}
}

571 
	$√tdev_löux_ˇche_cb
(c⁄° 
π√éök_lök_ch™ge
 *
ch™ge
,

572 *
aux
 
OVS_UNUSED
)

574 
√tdev_dev_löux
 *
dev
;

575 i‡(
ch™ge
) {

576 
√tdev_dev
 *
ba£_dev
 = 
	`√tdev_dev_‰om_«me
(
ch™ge
->
i‚ame
);

577 i‡(
ba£_dev
) {

578 c⁄° 
√tdev_˛ass
 *netdev_class =

579 
	`√tdev_dev_gë_˛ass
(
ba£_dev
);

581 i‡(
	`is_√tdev_löux_˛ass
(
√tdev_˛ass
)) {

582 
dev
 = 
	`√tdev_dev_löux_ˇ°
(
ba£_dev
);

583 
	`√tdev_dev_löux_upd©e
(
dev
, 
ch™ge
);

587 
shash
 
devi˚_shash
;

588 
shash_node
 *
node
;

590 
	`shash_öô
(&
devi˚_shash
);

591 
	`√tdev_dev_gë_devi˚s
(&
√tdev_löux_˛ass
, &
devi˚_shash
);

592 
	`SHASH_FOR_EACH
 (
node
, &
devi˚_shash
) {

593 
Êags
;

595 
dev
 = 
node
->
d©a
;

597 
	`gë_Êags
(&
dev
->
√tdev_dev
, &
Êags
);

598 
	`√tdev_dev_löux_ch™ged
(
dev
, 
Êags
, 0);

600 
	`shash_de°roy
(&
devi˚_shash
);

602 
	}
}

605 
	$ˇche_nŸifõr_ªf
()

607 i‡(!
ˇche_nŸifõr_ªfcou¡
) {

608 
	`as£π
(!
√tdev_löux_ˇche_nŸifõr
);

610 
√tdev_löux_ˇche_nŸifõr
 =

611 
	`π√éök_lök_nŸifõr_¸óã
(
√tdev_löux_ˇche_cb
, 
NULL
);

613 i‡(!
√tdev_löux_ˇche_nŸifõr
) {

614  
EINVAL
;

617 
ˇche_nŸifõr_ªfcou¡
++;

620 
	}
}

623 
	$ˇche_nŸifõr_uƒef
()

625 
	`as£π
(
ˇche_nŸifõr_ªfcou¡
 > 0);

626 i‡(!--
ˇche_nŸifõr_ªfcou¡
) {

627 
	`as£π
(
√tdev_löux_ˇche_nŸifõr
);

628 
	`π√éök_lök_nŸifõr_de°roy
(
√tdev_löux_ˇche_nŸifõr
);

629 
√tdev_löux_ˇche_nŸifõr
 = 
NULL
;

631 
	}
}

635 
	$√tdev_löux_¸óã
(c⁄° 
√tdev_˛ass
 *
˛ass
, c⁄° *
«me
,

636 
√tdev_dev
 **
√tdev_devp
)

638 
√tdev_dev_löux
 *
√tdev_dev
;

639 
îr‹
;

641 
îr‹
 = 
	`ˇche_nŸifõr_ªf
();

642 i‡(
îr‹
) {

643  
îr‹
;

646 
√tdev_dev
 = 
	`xzÆloc
( *netdev_dev);

647 
√tdev_dev
->
ch™ge_£q
 = 1;

648 
	`√tdev_dev_öô
(&
√tdev_dev
->√tdev_dev, 
«me
, 
˛ass
);

649 
	`gë_Êags
(&
√tdev_dev
->√tdev_dev, &√tdev_dev->
ifi_Êags
);

651 *
√tdev_devp
 = &
√tdev_dev
->netdev_dev;

653 
	}
}

662 
	$√tdev_löux_¸óã_èp
(c⁄° 
√tdev_˛ass
 *
˛ass
 
OVS_UNUSED
,

663 c⁄° *
«me
, 
√tdev_dev
 **
√tdev_devp
)

665 
√tdev_dev_löux
 *
√tdev_dev
;

666 
èp_°©e
 *
°©e
;

667 c⁄° 
èp_dev
[] = "/dev/net/tun";

668 
i‰eq
 
i‰
;

669 
îr‹
;

671 
√tdev_dev
 = 
	`xzÆloc
( *netdev_dev);

672 
°©e
 = &
√tdev_dev
->°©e.
èp
;

674 
îr‹
 = 
	`ˇche_nŸifõr_ªf
();

675 i‡(
îr‹
) {

676 
îr‹
;

680 
°©e
->
fd
 = 
	`›í
(
èp_dev
, 
O_RDWR
);

681 i‡(
°©e
->
fd
 < 0) {

682 
îr‹
 = 
î∫o
;

683 
	`VLOG_WARN
("›íög \"%s\" faûed: %s", 
èp_dev
, 
	`°ªº‹
(
îr‹
));

684 
îr‹_uƒef_nŸifõr
;

688 
i‰
.
i‰_Êags
 = 
IFF_TAP
 | 
IFF_NO_PI
;

689 
	`ovs_°rz˝y
(
i‰
.
i‰_«me
, 
«me
,  ifr.ifr_name);

690 i‡(
	`io˘l
(
°©e
->
fd
, 
TUNSETIFF
, &
i‰
) == -1) {

691 
	`VLOG_WARN
("%s: cª©ögÅ≠ devi˚ faûed: %s", 
«me
,

692 
	`°ªº‹
(
î∫o
));

693 
îr‹
 = 
î∫o
;

694 
îr‹_uƒef_nŸifõr
;

698 
îr‹
 = 
	`£t_n⁄blockög
(
°©e
->
fd
);

699 i‡(
îr‹
) {

700 
îr‹_uƒef_nŸifõr
;

703 
	`√tdev_dev_öô
(&
√tdev_dev
->√tdev_dev, 
«me
, &
√tdev_èp_˛ass
);

704 *
√tdev_devp
 = &
√tdev_dev
->netdev_dev;

707 
îr‹_uƒef_nŸifõr
:

708 
	`ˇche_nŸifõr_uƒef
();

709 
îr‹
:

710 
	`‰ì
(
√tdev_dev
);

711  
îr‹
;

712 
	}
}

715 
	$de°roy_èp
(
√tdev_dev_löux
 *
√tdev_dev
)

717 
èp_°©e
 *
°©e
 = &
√tdev_dev
->°©e.
èp
;

719 i‡(
°©e
->
fd
 >= 0) {

720 
	`˛o£
(
°©e
->
fd
);

722 
	}
}

726 
	$√tdev_löux_de°roy
(
√tdev_dev
 *
√tdev_dev_
)

728 
√tdev_dev_löux
 *
√tdev_dev
 = 
	`√tdev_dev_löux_ˇ°
(
√tdev_dev_
);

729 c⁄° 
√tdev_˛ass
 *
˛ass
 = 
	`√tdev_dev_gë_˛ass
(
√tdev_dev_
);

731 i‡(
√tdev_dev
->
tc
 &&Çëdev_dev->tc->
›s
->
tc_de°roy
) {

732 
√tdev_dev
->
tc
->
›s
->
	`tc_de°roy
(netdev_dev->tc);

735 i‡(
˛ass
 =&
√tdev_èp_˛ass
) {

736 
	`de°roy_èp
(
√tdev_dev
);

738 
	`‰ì
(
√tdev_dev
);

740 
	`ˇche_nŸifõr_uƒef
();

741 
	}
}

744 
	$√tdev_löux_›í
(
√tdev_dev
 *
√tdev_dev_
, 
√tdev
 **
√tdevp
)

746 
√tdev_dev_löux
 *
√tdev_dev
 = 
	`√tdev_dev_löux_ˇ°
(
√tdev_dev_
);

747 
√tdev_löux
 *
√tdev
;

748 
√tdev_Êags
 
Êags
;

749 
îr‹
;

752 
√tdev
 = 
	`xzÆloc
( *netdev);

753 
√tdev
->
fd
 = -1;

754 
	`√tdev_öô
(&
√tdev
->√tdev, 
√tdev_dev_
);

764 i‡(
	`√tdev_dev_gë_˛ass
(
√tdev_dev_
Ë!&
√tdev_öã∫Æ_˛ass
) {

765 
îr‹
 = 
	`√tdev_gë_Êags
(&
√tdev
->√tdev, &
Êags
);

766 i‡(
îr‹
 =
ENODEV
) {

767 
îr‹
;

771 i‡(!
	`°rcmp
(
	`√tdev_dev_gë_ty≥
(
√tdev_dev_
), "tap") &&

772 !
√tdev_dev
->
°©e
.
èp
.
›íed
) {

778 
√tdev
->
fd
 = 
√tdev_dev
->
°©e
.
èp
.fd;

779 
√tdev_dev
->
°©e
.
èp
.
›íed
 = 
åue
;

782 *
√tdevp
 = &
√tdev
->netdev;

785 
îr‹
:

786 
	`√tdev_unöô
(&
√tdev
->√tdev, 
åue
);

787  
îr‹
;

788 
	}
}

792 
	$√tdev_löux_˛o£
(
√tdev
 *
√tdev_
)

794 
√tdev_löux
 *
√tdev
 = 
	`√tdev_löux_ˇ°
(
√tdev_
);

796 i‡(
√tdev
->
fd
 > 0 && 
	`°rcmp
(
	`√tdev_gë_ty≥
(
√tdev_
), "tap")) {

797 
	`˛o£
(
√tdev
->
fd
);

799 
	`‰ì
(
√tdev
);

800 
	}
}

803 
	$√tdev_löux_li°í
(
√tdev
 *
√tdev_
)

805 
√tdev_löux
 *
√tdev
 = 
	`√tdev_löux_ˇ°
(
√tdev_
);

806 
sockaddr_Œ
 
¶l
;

807 
ifödex
;

808 
îr‹
;

809 
fd
;

811 i‡(
√tdev
->
fd
 >= 0) {

816 
fd
 = 
	`sockë
(
PF_PACKET
, 
SOCK_RAW
, 0);

817 i‡(
fd
 < 0) {

818 
îr‹
 = 
î∫o
;

819 
	`VLOG_ERR
("ÁûedÅÿ¸óãÑaw sockë (%s)", 
	`°ªº‹
(
îr‹
));

820 
îr‹
;

824 
îr‹
 = 
	`£t_n⁄blockög
(
fd
);

825 i‡(
îr‹
) {

826 
îr‹
;

830 
îr‹
 = 
	`gë_ifödex
(&
√tdev
->√tdev, &
ifödex
);

831 i‡(
îr‹
) {

832 
îr‹
;

836 
	`mem£t
(&
¶l
, 0,  sll);

837 
¶l
.
¶l_Ámûy
 = 
AF_PACKET
;

838 
¶l
.
¶l_ifödex
 = 
ifödex
;

839 
¶l
.
¶l_¥Ÿocﬁ
 = (
OVS_FORCE
 Ë
	`ht⁄s
(
ETH_P_ALL
);

840 i‡(
	`böd
(
fd
, (
sockaddr
 *Ë&
¶l
,  sll) < 0) {

841 
îr‹
 = 
î∫o
;

842 
	`VLOG_ERR
("%s: failedÅo bindÑaw socket (%s)",

843 
	`√tdev_gë_«me
(
√tdev_
), 
	`°ªº‹
(
îr‹
));

844 
îr‹
;

847 
√tdev
->
fd
 = fd;

850 
îr‹
:

851 i‡(
fd
 >= 0) {

852 
	`˛o£
(
fd
);

854  
îr‹
;

855 
	}
}

858 
	$√tdev_löux_ªcv
(
√tdev
 *
√tdev_
, *
d©a
, 
size_t
 
size
)

860 
√tdev_löux
 *
√tdev
 = 
	`√tdev_löux_ˇ°
(
√tdev_
);

862 i‡(
√tdev
->
fd
 < 0) {

864  -
EAGAIN
;

868 
ssize_t
 
ªtvÆ
;

870 
ªtvÆ
 = (
√tdev_
->
√tdev_dev
->
√tdev_˛ass
 =&
√tdev_èp_˛ass


871 ? 
	`ªad
(
√tdev
->
fd
, 
d©a
, 
size
)

872 : 
	`ªcv
(
√tdev
->
fd
, 
d©a
, 
size
, 
MSG_TRUNC
));

873 i‡(
ªtvÆ
 >= 0) {

874  
ªtvÆ
 <
size
 ?ÑëvÆ : -
EMSGSIZE
;

875 } i‡(
î∫o
 !
EINTR
) {

876 i‡(
î∫o
 !
EAGAIN
) {

877 
	`VLOG_WARN_RL
(&
æ
, "errorÑeceiving EthernetÖacket on %s: %s",

878 
	`°ªº‹
(
î∫o
), 
	`√tdev_gë_«me
(
√tdev_
));

880  -
î∫o
;

883 
	}
}

888 
	$√tdev_löux_ªcv_waô
(
√tdev
 *
√tdev_
)

890 
√tdev_löux
 *
√tdev
 = 
	`√tdev_löux_ˇ°
(
√tdev_
);

891 i‡(
√tdev
->
fd
 >= 0) {

892 
	`pﬁl_fd_waô
(
√tdev
->
fd
, 
POLLIN
);

894 
	}
}

898 
	$√tdev_löux_døö
(
√tdev
 *
√tdev_
)

900 
√tdev_löux
 *
√tdev
 = 
	`√tdev_löux_ˇ°
(
√tdev_
);

901 i‡(
√tdev
->
fd
 < 0) {

903 } i‡(!
	`°rcmp
(
	`√tdev_gë_ty≥
(
√tdev_
), "tap")) {

904 
i‰eq
 
i‰
;

905 
îr‹
 = 
	`√tdev_löux_do_io˘l
(
	`√tdev_gë_«me
(
√tdev_
), &
i‰
,

906 
SIOCGIFTXQLEN
, "SIOCGIFTXQLEN");

907 i‡(
îr‹
) {

908  
îr‹
;

910 
	`døö_fd
(
√tdev
->
fd
, 
i‰
.
i‰_qÀn
);

913  
	`døö_rcvbuf
(
√tdev
->
fd
);

915 
	}
}

927 
	$√tdev_löux_£nd
(
√tdev
 *
√tdev_
, c⁄° *
d©a
, 
size_t
 
size
)

929 
√tdev_löux
 *
√tdev
 = 
	`√tdev_löux_ˇ°
(
√tdev_
);

931 
ssize_t
 
ªtvÆ
;

933 i‡(
√tdev
->
fd
 < 0) {

935 
sockaddr_Œ
 
¶l
;

936 
msghdr
 
msg
;

937 
iovec
 
iov
;

938 
ifödex
;

939 
îr‹
;

940 
sock
;

942 
sock
 = 
	`af_∑ckë_sock
();

943 i‡(
sock
 < 0) {

944  
sock
;

947 
îr‹
 = 
	`gë_ifödex
(
√tdev_
, &
ifödex
);

948 i‡(
îr‹
) {

949  
îr‹
;

954 
	`mem£t
(&
¶l
, 0,  sll);

955 
¶l
.
¶l_Ámûy
 = 
AF_PACKET
;

956 
¶l
.
¶l_ifödex
 = 
ifödex
;

958 
iov
.
iov_ba£
 = 
	`CONST_CAST
(*, 
d©a
);

959 
iov
.
iov_Àn
 = 
size
;

961 
msg
.
msg_«me
 = &
¶l
;

962 
msg
.
msg_«mñí
 =  
¶l
;

963 
msg
.
msg_iov
 = &
iov
;

964 
msg
.
msg_iovÀn
 = 1;

965 
msg
.
msg_c⁄åﬁ
 = 
NULL
;

966 
msg
.
msg_c⁄åﬁÀn
 = 0;

967 
msg
.
msg_Êags
 = 0;

969 
ªtvÆ
 = 
	`£ndmsg
(
sock
, &
msg
, 0);

975 
ªtvÆ
 = 
	`wrôe
(
√tdev
->
fd
, 
d©a
, 
size
);

978 i‡(
ªtvÆ
 < 0) {

982 i‡(
î∫o
 =
ENOBUFS
) {

983  
EAGAIN
;

984 } i‡(
î∫o
 =
EINTR
) {

986 } i‡(
î∫o
 !
EAGAIN
) {

987 
	`VLOG_WARN_RL
(&
æ
, "error sending EthernetÖacket on %s: %s",

988 
	`√tdev_gë_«me
(
√tdev_
), 
	`°ªº‹
(
î∫o
));

990  
î∫o
;

991 } i‡(
ªtvÆ
 !
size
) {

992 
	`VLOG_WARN_RL
(&
æ
, "sentÖartial EthernetÖacket (%zd bytes of "

993 "%zuË⁄ %s", 
ªtvÆ
, 
size
, 
	`√tdev_gë_«me
(
√tdev_
));

994  
EMSGSIZE
;

999 
	}
}

1009 
	$√tdev_löux_£nd_waô
(
√tdev
 *
√tdev_
)

1011 
√tdev_löux
 *
√tdev
 = 
	`√tdev_löux_ˇ°
(
√tdev_
);

1012 i‡(
√tdev
->
fd
 < 0) {

1014 } i‡(
	`°rcmp
(
	`√tdev_gë_ty≥
(
√tdev_
), "tap")) {

1015 
	`pﬁl_fd_waô
(
√tdev
->
fd
, 
POLLOUT
);

1018 
	`pﬁl_immedüã_wake
();

1020 
	}
}

1025 
	$√tdev_löux_£t_ëhîaddr
(
√tdev
 *
√tdev_
,

1026 c⁄° 
uöt8_t
 
mac
[
ETH_ADDR_LEN
])

1028 
√tdev_dev_löux
 *
√tdev_dev
 =

1029 
	`√tdev_dev_löux_ˇ°
(
	`√tdev_gë_dev
(
√tdev_
));

1030 
îr‹
;

1032 i‡(
√tdev_dev
->
ˇche_vÆid
 & 
VALID_ETHERADDR
) {

1033 i‡(
√tdev_dev
->
ëhî_addr_îr‹
) {

1034  
√tdev_dev
->
ëhî_addr_îr‹
;

1036 i‡(
	`ëh_addr_equÆs
(
√tdev_dev
->
ëhîaddr
, 
mac
)) {

1039 
√tdev_dev
->
ˇche_vÆid
 &~
VALID_ETHERADDR
;

1042 
îr‹
 = 
	`£t_ëhîaddr
(
	`√tdev_gë_«me
(
√tdev_
), 
mac
);

1043 i‡(!
îr‹
 ||Éº‹ =
ENODEV
) {

1044 
√tdev_dev
->
ëhî_addr_îr‹
 = 
îr‹
;

1045 
√tdev_dev
->
ˇche_vÆid
 |
VALID_ETHERADDR
;

1046 i‡(!
îr‹
) {

1047 
	`mem˝y
(
√tdev_dev
->
ëhîaddr
, 
mac
, 
ETH_ADDR_LEN
);

1051  
îr‹
;

1052 
	}
}

1056 
	$√tdev_löux_gë_ëhîaddr
(c⁄° 
√tdev
 *
√tdev_
,

1057 
uöt8_t
 
mac
[
ETH_ADDR_LEN
])

1059 
√tdev_dev_löux
 *
√tdev_dev
 =

1060 
	`√tdev_dev_löux_ˇ°
(
	`√tdev_gë_dev
(
√tdev_
));

1062 i‡(!(
√tdev_dev
->
ˇche_vÆid
 & 
VALID_ETHERADDR
)) {

1063 
îr‹
 = 
	`gë_ëhîaddr
(
	`√tdev_gë_«me
(
√tdev_
),

1064 
√tdev_dev
->
ëhîaddr
);

1066 
√tdev_dev
->
ëhî_addr_îr‹
 = 
îr‹
;

1067 
√tdev_dev
->
ˇche_vÆid
 |
VALID_ETHERADDR
;

1070 i‡(!
√tdev_dev
->
ëhî_addr_îr‹
) {

1071 
	`mem˝y
(
mac
, 
√tdev_dev
->
ëhîaddr
, 
ETH_ADDR_LEN
);

1074  
√tdev_dev
->
ëhî_addr_îr‹
;

1075 
	}
}

1081 
	$√tdev_löux_gë_mtu
(c⁄° 
√tdev
 *
√tdev_
, *
mtup
)

1083 
√tdev_dev_löux
 *
√tdev_dev
 =

1084 
	`√tdev_dev_löux_ˇ°
(
	`√tdev_gë_dev
(
√tdev_
));

1085 i‡(!(
√tdev_dev
->
ˇche_vÆid
 & 
VALID_MTU
)) {

1086 
i‰eq
 
i‰
;

1087 
îr‹
;

1089 
îr‹
 = 
	`√tdev_löux_do_io˘l
(
	`√tdev_gë_«me
(
√tdev_
), &
i‰
,

1090 
SIOCGIFMTU
, "SIOCGIFMTU");

1092 
√tdev_dev
->
√tdev_mtu_îr‹
 = 
îr‹
;

1093 
√tdev_dev
->
mtu
 = 
i‰
.
i‰_mtu
;

1094 
√tdev_dev
->
ˇche_vÆid
 |
VALID_MTU
;

1097 i‡(!
√tdev_dev
->
√tdev_mtu_îr‹
) {

1098 *
mtup
 = 
√tdev_dev
->
mtu
;

1100  
√tdev_dev
->
√tdev_mtu_îr‹
;

1101 
	}
}

1107 
	$√tdev_löux_£t_mtu
(c⁄° 
√tdev
 *
√tdev_
, 
mtu
)

1109 
√tdev_dev_löux
 *
√tdev_dev
 =

1110 
	`√tdev_dev_löux_ˇ°
(
	`√tdev_gë_dev
(
√tdev_
));

1111 
i‰eq
 
i‰
;

1112 
îr‹
;

1114 i‡(
√tdev_dev
->
ˇche_vÆid
 & 
VALID_MTU
) {

1115 i‡(
√tdev_dev
->
√tdev_mtu_îr‹
) {

1116  
√tdev_dev
->
√tdev_mtu_îr‹
;

1118 i‡(
√tdev_dev
->
mtu
 == mtu) {

1121 
√tdev_dev
->
ˇche_vÆid
 &~
VALID_MTU
;

1123 
i‰
.
i‰_mtu
 = 
mtu
;

1124 
îr‹
 = 
	`√tdev_löux_do_io˘l
(
	`√tdev_gë_«me
(
√tdev_
), &
i‰
,

1125 
SIOCSIFMTU
, "SIOCSIFMTU");

1126 i‡(!
îr‹
 ||Éº‹ =
ENODEV
) {

1127 
√tdev_dev
->
√tdev_mtu_îr‹
 = 
îr‹
;

1128 
√tdev_dev
->
mtu
 = 
i‰
.
i‰_mtu
;

1129 
√tdev_dev
->
ˇche_vÆid
 |
VALID_MTU
;

1131  
îr‹
;

1132 
	}
}

1137 
	$√tdev_löux_gë_ifödex
(c⁄° 
√tdev
 *netdev)

1139 
ifödex
, 
îr‹
;

1141 
îr‹
 = 
	`gë_ifödex
(
√tdev
, &
ifödex
);

1142  
îr‹
 ? -îr‹ : 
ifödex
;

1143 
	}
}

1146 
	$√tdev_löux_gë_ˇºõr
(c⁄° 
√tdev
 *
√tdev_
, 
boﬁ
 *
ˇºõr
)

1148 
√tdev_dev_löux
 *
√tdev_dev
 =

1149 
	`√tdev_dev_löux_ˇ°
(
	`√tdev_gë_dev
(
√tdev_
));

1151 i‡(
√tdev_dev
->
miim⁄_öãrvÆ
 > 0) {

1152 *
ˇºõr
 = 
√tdev_dev
->
miim⁄
;

1154 *
ˇºõr
 = (
√tdev_dev
->
ifi_Êags
 & 
IFF_RUNNING
) != 0;

1158 
	}
}

1161 
	$√tdev_löux_gë_ˇºõr_ª£ts
(c⁄° 
√tdev
 *netdev)

1163  
	`√tdev_dev_löux_ˇ°
(
	`√tdev_gë_dev
(
√tdev
))->
ˇºõr_ª£ts
;

1164 
	}
}

1167 
	$√tdev_löux_do_miim⁄
(c⁄° *
«me
, 
cmd
, c⁄° *
cmd_«me
,

1168 
mii_io˘l_d©a
 *
d©a
)

1170 
i‰eq
 
i‰
;

1171 
îr‹
;

1173 
	`mem£t
(&
i‰
, 0,  ifr);

1174 
	`mem˝y
(&
i‰
.
i‰_d©a
, 
d©a
,  *data);

1175 
îr‹
 = 
	`√tdev_löux_do_io˘l
(
«me
, &
i‰
, 
cmd
, 
cmd_«me
);

1176 
	`mem˝y
(
d©a
, &
i‰
.
i‰_d©a
,  *data);

1178  
îr‹
;

1179 
	}
}

1182 
	$√tdev_löux_gë_miim⁄
(c⁄° *
«me
, 
boﬁ
 *
miim⁄
)

1184 
mii_io˘l_d©a
 
d©a
;

1185 
îr‹
;

1187 *
miim⁄
 = 
Ál£
;

1189 
	`mem£t
(&
d©a
, 0,  data);

1190 
îr‹
 = 
	`√tdev_löux_do_miim⁄
(
«me
, 
SIOCGMIIPHY
, "SIOCGMIIPHY", &
d©a
);

1191 i‡(!
îr‹
) {

1193 
d©a
.
ªg_num
 = 
MII_BMSR
;

1194 
îr‹
 = 
	`√tdev_löux_do_miim⁄
(
«me
, 
SIOCGMIIREG
, "SIOCGMIIREG",

1195 &
d©a
);

1197 i‡(!
îr‹
) {

1198 *
miim⁄
 = !!(
d©a
.
vÆ_out
 & 
BMSR_LSTATUS
);

1200 
	`VLOG_WARN_RL
(&
æ
, "%s: faûedÅÿquîy MII", 
«me
);

1203 
ëhtoﬁ_cmd
 
ecmd
;

1205 
	`VLOG_DBG_RL
(&
æ
, "%s: failedÅo query MII, falling backÅoÉthtool",

1206 
«me
);

1208 
	`COVERAGE_INC
(
√tdev_gë_ëhtoﬁ
);

1209 
	`mem£t
(&
ecmd
, 0, Écmd);

1210 
îr‹
 = 
	`√tdev_löux_do_ëhtoﬁ
(
«me
, &
ecmd
, 
ETHTOOL_GLINK
,

1212 i‡(!
îr‹
) {

1213 
ëhtoﬁ_vÆue
 
evÆ
;

1215 
	`mem˝y
(&
evÆ
, &
ecmd
, Éval);

1216 *
miim⁄
 = !!
evÆ
.
d©a
;

1218 
	`VLOG_WARN_RL
(&
æ
, "%s:ÉthtoﬁÜök sètu†Áûed", 
«me
);

1222  
îr‹
;

1223 
	}
}

1226 
	$√tdev_löux_£t_miim⁄_öãrvÆ
(
√tdev
 *
√tdev_
,

1227 
öãrvÆ
)

1229 
√tdev_dev_löux
 *
√tdev_dev
;

1231 
√tdev_dev
 = 
	`√tdev_dev_löux_ˇ°
(
	`√tdev_gë_dev
(
√tdev_
));

1233 
öãrvÆ
 = i¡îvÆ > 0 ? 
	`MAX
(interval, 100) : 0;

1234 i‡(
√tdev_dev
->
miim⁄_öãrvÆ
 !
öãrvÆ
) {

1235 
√tdev_dev
->
miim⁄_öãrvÆ
 = 
öãrvÆ
;

1236 
	`timî_£t_expúed
(&
√tdev_dev
->
miim⁄_timî
);

1240 
	}
}

1243 
	$√tdev_löux_miim⁄_run
()

1245 
shash
 
devi˚_shash
;

1246 
shash_node
 *
node
;

1248 
	`shash_öô
(&
devi˚_shash
);

1249 
	`√tdev_dev_gë_devi˚s
(&
√tdev_löux_˛ass
, &
devi˚_shash
);

1250 
	`SHASH_FOR_EACH
 (
node
, &
devi˚_shash
) {

1251 
√tdev_dev_löux
 *
dev
 = 
node
->
d©a
;

1252 
boﬁ
 
miim⁄
;

1254 i‡(
dev
->
miim⁄_öãrvÆ
 <0 || !
	`timî_expúed
(&dev->
miim⁄_timî
)) {

1258 
	`√tdev_löux_gë_miim⁄
(
dev
->
√tdev_dev
.
«me
, &
miim⁄
);

1259 i‡(
miim⁄
 !
dev
->miimon) {

1260 
dev
->
miim⁄
 = miimon;

1261 
	`√tdev_dev_löux_ch™ged
(
dev
, dev->
ifi_Êags
, 0);

1264 
	`timî_£t_duøti⁄
(&
dev
->
miim⁄_timî
, dev->
miim⁄_öãrvÆ
);

1267 
	`shash_de°roy
(&
devi˚_shash
);

1268 
	}
}

1271 
	$√tdev_löux_miim⁄_waô
()

1273 
shash
 
devi˚_shash
;

1274 
shash_node
 *
node
;

1276 
	`shash_öô
(&
devi˚_shash
);

1277 
	`√tdev_dev_gë_devi˚s
(&
√tdev_löux_˛ass
, &
devi˚_shash
);

1278 
	`SHASH_FOR_EACH
 (
node
, &
devi˚_shash
) {

1279 
√tdev_dev_löux
 *
dev
 = 
node
->
d©a
;

1281 i‡(
dev
->
miim⁄_öãrvÆ
 > 0) {

1282 
	`timî_waô
(&
dev
->
miim⁄_timî
);

1285 
	`shash_de°roy
(&
devi˚_shash
);

1286 
	}
}

1291 
boﬁ


1292 
	$check_f‹_w‹kög_√éök_°©s
()

1296 
ifödex
 = 
	`do_gë_ifödex
("lo");

1297 i‡(
ifödex
 < 0) {

1298 
	`VLOG_WARN
("failedÅo get ifindex forÜo, "

1300  
Ál£
;

1302 
√tdev_°©s
 
°©s
;

1303 
îr‹
 = 
	`gë_°©s_vü_√éök
(
ifödex
, &
°©s
);

1304 i‡(!
îr‹
) {

1305 
	`VLOG_DBG
("obtainingÇetdev stats viaÑtnetlink");

1306  
åue
;

1308 
	`VLOG_INFO
("RTM_GETLINK failed (%s), obtainingÇetdev stats "

1310 "kî√l)", 
	`°ªº‹
(
îr‹
));

1311  
Ál£
;

1314 
	}
}

1317 
	$sw≠_uöt64
(
uöt64_t
 *
a
, uöt64_à*
b
)

1319 
uöt64_t
 
tmp
 = *
a
;

1320 *
a
 = *
b
;

1321 *
b
 = 
tmp
;

1322 
	}
}

1325 
	$gë_°©s_vü_vp‹t
(c⁄° 
√tdev
 *
√tdev_
,

1326 
√tdev_°©s
 *
°©s
)

1328 
√tdev_dev_löux
 *
√tdev_dev
 =

1329 
	`√tdev_dev_löux_ˇ°
(
	`√tdev_gë_dev
(
√tdev_
));

1331 i‡(!
√tdev_dev
->
vp‹t_°©s_îr‹
 ||

1332 !(
√tdev_dev
->
ˇche_vÆid
 & 
VALID_VPORT_STAT_ERROR
)) {

1333 
îr‹
;

1335 
îr‹
 = 
	`√tdev_vp‹t_gë_°©s
(
√tdev_
, 
°©s
);

1336 i‡(
îr‹
) {

1337 
	`VLOG_WARN_RL
(&
æ
, "%s: obtainingÇetdev stats via vport failed "

1338 "(%s)", 
	`√tdev_gë_«me
(
√tdev_
), 
	`°ªº‹
(
îr‹
));

1340 
√tdev_dev
->
vp‹t_°©s_îr‹
 = 
îr‹
;

1341 
√tdev_dev
->
ˇche_vÆid
 |
VALID_VPORT_STAT_ERROR
;

1343 
	}
}

1346 
	$√tdev_löux_sys_gë_°©s
(c⁄° 
√tdev
 *
√tdev_
,

1347 
√tdev_°©s
 *
°©s
)

1349 
u£_√éök_°©s
 = -1;

1350 
îr‹
;

1352 i‡(
u£_√éök_°©s
 < 0) {

1353 
u£_√éök_°©s
 = 
	`check_f‹_w‹kög_√éök_°©s
();

1356 i‡(
u£_√éök_°©s
) {

1357 
ifödex
;

1359 
îr‹
 = 
	`gë_ifödex
(
√tdev_
, &
ifödex
);

1360 i‡(!
îr‹
) {

1361 
îr‹
 = 
	`gë_°©s_vü_√éök
(
ifödex
, 
°©s
);

1364 
îr‹
 = 
	`gë_°©s_vü_¥oc
(
	`√tdev_gë_«me
(
√tdev_
), 
°©s
);

1367 i‡(
îr‹
) {

1368 
	`VLOG_WARN_RL
(&
æ
, "%s:Üinux-sys get stats failed %d",

1369 
	`√tdev_gë_«me
(
√tdev_
), 
îr‹
);

1371  
îr‹
;

1373 
	}
}

1377 
	$√tdev_löux_gë_°©s
(c⁄° 
√tdev
 *
√tdev_
,

1378 
√tdev_°©s
 *
°©s
)

1380 
√tdev_dev_löux
 *
√tdev_dev
 =

1381 
	`√tdev_dev_löux_ˇ°
(
	`√tdev_gë_dev
(
√tdev_
));

1382 
√tdev_°©s
 
dev_°©s
;

1383 
îr‹
;

1385 
	`gë_°©s_vü_vp‹t
(
√tdev_
, 
°©s
);

1387 
îr‹
 = 
	`√tdev_löux_sys_gë_°©s
(
√tdev_
, &
dev_°©s
);

1389 i‡(
îr‹
) {

1390 i‡(
√tdev_dev
->
vp‹t_°©s_îr‹
) {

1391  
îr‹
;

1397 i‡(
√tdev_dev
->
vp‹t_°©s_îr‹
) {

1399 *
°©s
 = 
dev_°©s
;

1401 
°©s
->
rx_îr‹s
 +
dev_°©s
.rx_errors;

1402 
°©s
->
tx_îr‹s
 +
dev_°©s
.tx_errors;

1403 
°©s
->
rx_dr›≥d
 +
dev_°©s
.rx_dropped;

1404 
°©s
->
tx_dr›≥d
 +
dev_°©s
.tx_dropped;

1405 
°©s
->
mu…iˇ°
 +
dev_°©s
.multicast;

1406 
°©s
->
cﬁlisi⁄s
 +
dev_°©s
.collisions;

1407 
°©s
->
rx_Àngth_îr‹s
 +
dev_°©s
.rx_length_errors;

1408 
°©s
->
rx_ovî_îr‹s
 +
dev_°©s
.rx_over_errors;

1409 
°©s
->
rx_¸c_îr‹s
 +
dev_°©s
.rx_crc_errors;

1410 
°©s
->
rx_‰ame_îr‹s
 +
dev_°©s
.rx_frame_errors;

1411 
°©s
->
rx_fifo_îr‹s
 +
dev_°©s
.rx_fifo_errors;

1412 
°©s
->
rx_mis£d_îr‹s
 +
dev_°©s
.rx_missed_errors;

1413 
°©s
->
tx_ab‹ãd_îr‹s
 +
dev_°©s
.tx_aborted_errors;

1414 
°©s
->
tx_ˇºõr_îr‹s
 +
dev_°©s
.tx_carrier_errors;

1415 
°©s
->
tx_fifo_îr‹s
 +
dev_°©s
.tx_fifo_errors;

1416 
°©s
->
tx_hóπbót_îr‹s
 +
dev_°©s
.tx_heartbeat_errors;

1417 
°©s
->
tx_wödow_îr‹s
 +
dev_°©s
.tx_window_errors;

1420 
	}
}

1425 
	$√tdev_èp_gë_°©s
(c⁄° 
√tdev
 *
√tdev_
,

1426 
√tdev_°©s
 *
°©s
)

1428 
√tdev_dev_löux
 *
√tdev_dev
 =

1429 
	`√tdev_dev_löux_ˇ°
(
	`√tdev_gë_dev
(
√tdev_
));

1430 
√tdev_°©s
 
dev_°©s
;

1431 
îr‹
;

1433 
	`gë_°©s_vü_vp‹t
(
√tdev_
, 
°©s
);

1435 
îr‹
 = 
	`√tdev_löux_sys_gë_°©s
(
√tdev_
, &
dev_°©s
);

1436 i‡(
îr‹
) {

1437 i‡(
√tdev_dev
->
vp‹t_°©s_îr‹
) {

1438  
îr‹
;

1450 i‡(
√tdev_dev
->
vp‹t_°©s_îr‹
) {

1451 *
°©s
 = 
dev_°©s
;

1452 
	`sw≠_uöt64
(&
°©s
->
rx_∑ckës
, &°©s->
tx_∑ckës
);

1453 
	`sw≠_uöt64
(&
°©s
->
rx_byãs
, &°©s->
tx_byãs
);

1454 
	`sw≠_uöt64
(&
°©s
->
rx_îr‹s
, &°©s->
tx_îr‹s
);

1455 
	`sw≠_uöt64
(&
°©s
->
rx_dr›≥d
, &°©s->
tx_dr›≥d
);

1456 
°©s
->
rx_Àngth_îr‹s
 = 0;

1457 
°©s
->
rx_ovî_îr‹s
 = 0;

1458 
°©s
->
rx_¸c_îr‹s
 = 0;

1459 
°©s
->
rx_‰ame_îr‹s
 = 0;

1460 
°©s
->
rx_fifo_îr‹s
 = 0;

1461 
°©s
->
rx_mis£d_îr‹s
 = 0;

1462 
°©s
->
tx_ab‹ãd_îr‹s
 = 0;

1463 
°©s
->
tx_ˇºõr_îr‹s
 = 0;

1464 
°©s
->
tx_fifo_îr‹s
 = 0;

1465 
°©s
->
tx_hóπbót_îr‹s
 = 0;

1466 
°©s
->
tx_wödow_îr‹s
 = 0;

1468 
°©s
->
rx_dr›≥d
 +
dev_°©s
.
tx_dr›≥d
;

1469 
°©s
->
tx_dr›≥d
 +
dev_°©s
.
rx_dr›≥d
;

1471 
°©s
->
rx_îr‹s
 +
dev_°©s
.
tx_îr‹s
;

1472 
°©s
->
tx_îr‹s
 +
dev_°©s
.
rx_îr‹s
;

1474 
°©s
->
mu…iˇ°
 +
dev_°©s
.multicast;

1475 
°©s
->
cﬁlisi⁄s
 +
dev_°©s
.collisions;

1478 
	}
}

1481 
	$√tdev_öã∫Æ_gë_°©s
(c⁄° 
√tdev
 *
√tdev_
,

1482 
√tdev_°©s
 *
°©s
)

1484 
√tdev_dev_löux
 *
√tdev_dev
 =

1485 
	`√tdev_dev_löux_ˇ°
(
	`√tdev_gë_dev
(
√tdev_
));

1487 
	`gë_°©s_vü_vp‹t
(
√tdev_
, 
°©s
);

1488  
√tdev_dev
->
vp‹t_°©s_îr‹
;

1489 
	}
}

1492 
	$√tdev_löux_ªad_„©uªs
(
√tdev_dev_löux
 *
√tdev_dev
)

1494 
ëhtoﬁ_cmd
 
ecmd
;

1495 
uöt32_t
 
•ìd
;

1496 
îr‹
;

1498 i‡(
√tdev_dev
->
ˇche_vÆid
 & 
VALID_FEATURES
) {

1502 
	`COVERAGE_INC
(
√tdev_gë_ëhtoﬁ
);

1503 
	`mem£t
(&
ecmd
, 0, Écmd);

1504 
îr‹
 = 
	`√tdev_löux_do_ëhtoﬁ
(
√tdev_dev
->√tdev_dev.
«me
, &
ecmd
,

1505 
ETHTOOL_GSET
, "ETHTOOL_GSET");

1506 i‡(
îr‹
) {

1507 
out
;

1511 
√tdev_dev
->
suµ‹ãd
 = 0;

1512 i‡(
ecmd
.
suµ‹ãd
 & 
SUPPORTED_10ba£T_HÆf
) {

1513 
√tdev_dev
->
suµ‹ãd
 |
NETDEV_F_10MB_HD
;

1515 i‡(
ecmd
.
suµ‹ãd
 & 
SUPPORTED_10ba£T_FuŒ
) {

1516 
√tdev_dev
->
suµ‹ãd
 |
NETDEV_F_10MB_FD
;

1518 i‡(
ecmd
.
suµ‹ãd
 & 
SUPPORTED_100ba£T_HÆf
) {

1519 
√tdev_dev
->
suµ‹ãd
 |
NETDEV_F_100MB_HD
;

1521 i‡(
ecmd
.
suµ‹ãd
 & 
SUPPORTED_100ba£T_FuŒ
) {

1522 
√tdev_dev
->
suµ‹ãd
 |
NETDEV_F_100MB_FD
;

1524 i‡(
ecmd
.
suµ‹ãd
 & 
SUPPORTED_1000ba£T_HÆf
) {

1525 
√tdev_dev
->
suµ‹ãd
 |
NETDEV_F_1GB_HD
;

1527 i‡(
ecmd
.
suµ‹ãd
 & 
SUPPORTED_1000ba£T_FuŒ
) {

1528 
√tdev_dev
->
suµ‹ãd
 |
NETDEV_F_1GB_FD
;

1530 i‡(
ecmd
.
suµ‹ãd
 & 
SUPPORTED_10000ba£T_FuŒ
) {

1531 
√tdev_dev
->
suµ‹ãd
 |
NETDEV_F_10GB_FD
;

1533 i‡(
ecmd
.
suµ‹ãd
 & 
SUPPORTED_TP
) {

1534 
√tdev_dev
->
suµ‹ãd
 |
NETDEV_F_COPPER
;

1536 i‡(
ecmd
.
suµ‹ãd
 & 
SUPPORTED_FIBRE
) {

1537 
√tdev_dev
->
suµ‹ãd
 |
NETDEV_F_FIBER
;

1539 i‡(
ecmd
.
suµ‹ãd
 & 
SUPPORTED_Aut⁄eg
) {

1540 
√tdev_dev
->
suµ‹ãd
 |
NETDEV_F_AUTONEG
;

1542 i‡(
ecmd
.
suµ‹ãd
 & 
SUPPORTED_Pau£
) {

1543 
√tdev_dev
->
suµ‹ãd
 |
NETDEV_F_PAUSE
;

1545 i‡(
ecmd
.
suµ‹ãd
 & 
SUPPORTED_Asym_Pau£
) {

1546 
√tdev_dev
->
suµ‹ãd
 |
NETDEV_F_PAUSE_ASYM
;

1550 
√tdev_dev
->
advîti£d
 = 0;

1551 i‡(
ecmd
.
advîtisög
 & 
ADVERTISED_10ba£T_HÆf
) {

1552 
√tdev_dev
->
advîti£d
 |
NETDEV_F_10MB_HD
;

1554 i‡(
ecmd
.
advîtisög
 & 
ADVERTISED_10ba£T_FuŒ
) {

1555 
√tdev_dev
->
advîti£d
 |
NETDEV_F_10MB_FD
;

1557 i‡(
ecmd
.
advîtisög
 & 
ADVERTISED_100ba£T_HÆf
) {

1558 
√tdev_dev
->
advîti£d
 |
NETDEV_F_100MB_HD
;

1560 i‡(
ecmd
.
advîtisög
 & 
ADVERTISED_100ba£T_FuŒ
) {

1561 
√tdev_dev
->
advîti£d
 |
NETDEV_F_100MB_FD
;

1563 i‡(
ecmd
.
advîtisög
 & 
ADVERTISED_1000ba£T_HÆf
) {

1564 
√tdev_dev
->
advîti£d
 |
NETDEV_F_1GB_HD
;

1566 i‡(
ecmd
.
advîtisög
 & 
ADVERTISED_1000ba£T_FuŒ
) {

1567 
√tdev_dev
->
advîti£d
 |
NETDEV_F_1GB_FD
;

1569 i‡(
ecmd
.
advîtisög
 & 
ADVERTISED_10000ba£T_FuŒ
) {

1570 
√tdev_dev
->
advîti£d
 |
NETDEV_F_10GB_FD
;

1572 i‡(
ecmd
.
advîtisög
 & 
ADVERTISED_TP
) {

1573 
√tdev_dev
->
advîti£d
 |
NETDEV_F_COPPER
;

1575 i‡(
ecmd
.
advîtisög
 & 
ADVERTISED_FIBRE
) {

1576 
√tdev_dev
->
advîti£d
 |
NETDEV_F_FIBER
;

1578 i‡(
ecmd
.
advîtisög
 & 
ADVERTISED_Aut⁄eg
) {

1579 
√tdev_dev
->
advîti£d
 |
NETDEV_F_AUTONEG
;

1581 i‡(
ecmd
.
advîtisög
 & 
ADVERTISED_Pau£
) {

1582 
√tdev_dev
->
advîti£d
 |
NETDEV_F_PAUSE
;

1584 i‡(
ecmd
.
advîtisög
 & 
ADVERTISED_Asym_Pau£
) {

1585 
√tdev_dev
->
advîti£d
 |
NETDEV_F_PAUSE_ASYM
;

1589 
•ìd
 = 
ecmd
.speed;

1590 i‡(
•ìd
 =
SPEED_10
) {

1591 
√tdev_dev
->
cuºít
 = 
ecmd
.
du∂ex
 ? 
NETDEV_F_10MB_FD
 : 
NETDEV_F_10MB_HD
;

1592 } i‡(
•ìd
 =
SPEED_100
) {

1593 
√tdev_dev
->
cuºít
 = 
ecmd
.
du∂ex
 ? 
NETDEV_F_100MB_FD
 : 
NETDEV_F_100MB_HD
;

1594 } i‡(
•ìd
 =
SPEED_1000
) {

1595 
√tdev_dev
->
cuºít
 = 
ecmd
.
du∂ex
 ? 
NETDEV_F_1GB_FD
 : 
NETDEV_F_1GB_HD
;

1596 } i‡(
•ìd
 =
SPEED_10000
) {

1597 
√tdev_dev
->
cuºít
 = 
NETDEV_F_10GB_FD
;

1598 } i‡(
•ìd
 == 40000) {

1599 
√tdev_dev
->
cuºít
 = 
NETDEV_F_40GB_FD
;

1600 } i‡(
•ìd
 == 100000) {

1601 
√tdev_dev
->
cuºít
 = 
NETDEV_F_100GB_FD
;

1602 } i‡(
•ìd
 == 1000000) {

1603 
√tdev_dev
->
cuºít
 = 
NETDEV_F_1TB_FD
;

1605 
√tdev_dev
->
cuºít
 = 0;

1608 i‡(
ecmd
.
p‹t
 =
PORT_TP
) {

1609 
√tdev_dev
->
cuºít
 |
NETDEV_F_COPPER
;

1610 } i‡(
ecmd
.
p‹t
 =
PORT_FIBRE
) {

1611 
√tdev_dev
->
cuºít
 |
NETDEV_F_FIBER
;

1614 i‡(
ecmd
.
aut⁄eg
) {

1615 
√tdev_dev
->
cuºít
 |
NETDEV_F_AUTONEG
;

1619 
√tdev_dev
->
≥î
 = 0;

1621 
out
:

1622 
√tdev_dev
->
ˇche_vÆid
 |
VALID_FEATURES
;

1623 
√tdev_dev
->
gë_„©uªs_îr‹
 = 
îr‹
;

1624 
	}
}

1631 
	$√tdev_löux_gë_„©uªs
(c⁄° 
√tdev
 *
√tdev_
,

1632 
√tdev_„©uªs
 *
cuºít
,

1633 
√tdev_„©uªs
 *
advîti£d
,

1634 
√tdev_„©uªs
 *
suµ‹ãd
,

1635 
√tdev_„©uªs
 *
≥î
)

1637 
√tdev_dev_löux
 *
√tdev_dev
 =

1638 
	`√tdev_dev_löux_ˇ°
(
	`√tdev_gë_dev
(
√tdev_
));

1640 
	`√tdev_löux_ªad_„©uªs
(
√tdev_dev
);

1642 i‡(!
√tdev_dev
->
gë_„©uªs_îr‹
) {

1643 *
cuºít
 = 
√tdev_dev
->current;

1644 *
advîti£d
 = 
√tdev_dev
->advertised;

1645 *
suµ‹ãd
 = 
√tdev_dev
->supported;

1646 *
≥î
 = 
√tdev_dev
->peer;

1648  
√tdev_dev
->
gë_„©uªs_îr‹
;

1649 
	}
}

1653 
	$√tdev_löux_£t_advîti£míts
(
√tdev
 *netdev,

1654 
√tdev_„©uªs
 
advîti£
)

1656 
ëhtoﬁ_cmd
 
ecmd
;

1657 
îr‹
;

1659 
	`COVERAGE_INC
(
√tdev_gë_ëhtoﬁ
);

1660 
	`mem£t
(&
ecmd
, 0, Écmd);

1661 
îr‹
 = 
	`√tdev_löux_do_ëhtoﬁ
(
	`√tdev_gë_«me
(
√tdev
), &
ecmd
,

1662 
ETHTOOL_GSET
, "ETHTOOL_GSET");

1663 i‡(
îr‹
) {

1664  
îr‹
;

1667 
ecmd
.
advîtisög
 = 0;

1668 i‡(
advîti£
 & 
NETDEV_F_10MB_HD
) {

1669 
ecmd
.
advîtisög
 |
ADVERTISED_10ba£T_HÆf
;

1671 i‡(
advîti£
 & 
NETDEV_F_10MB_FD
) {

1672 
ecmd
.
advîtisög
 |
ADVERTISED_10ba£T_FuŒ
;

1674 i‡(
advîti£
 & 
NETDEV_F_100MB_HD
) {

1675 
ecmd
.
advîtisög
 |
ADVERTISED_100ba£T_HÆf
;

1677 i‡(
advîti£
 & 
NETDEV_F_100MB_FD
) {

1678 
ecmd
.
advîtisög
 |
ADVERTISED_100ba£T_FuŒ
;

1680 i‡(
advîti£
 & 
NETDEV_F_1GB_HD
) {

1681 
ecmd
.
advîtisög
 |
ADVERTISED_1000ba£T_HÆf
;

1683 i‡(
advîti£
 & 
NETDEV_F_1GB_FD
) {

1684 
ecmd
.
advîtisög
 |
ADVERTISED_1000ba£T_FuŒ
;

1686 i‡(
advîti£
 & 
NETDEV_F_10GB_FD
) {

1687 
ecmd
.
advîtisög
 |
ADVERTISED_10000ba£T_FuŒ
;

1689 i‡(
advîti£
 & 
NETDEV_F_COPPER
) {

1690 
ecmd
.
advîtisög
 |
ADVERTISED_TP
;

1692 i‡(
advîti£
 & 
NETDEV_F_FIBER
) {

1693 
ecmd
.
advîtisög
 |
ADVERTISED_FIBRE
;

1695 i‡(
advîti£
 & 
NETDEV_F_AUTONEG
) {

1696 
ecmd
.
advîtisög
 |
ADVERTISED_Aut⁄eg
;

1698 i‡(
advîti£
 & 
NETDEV_F_PAUSE
) {

1699 
ecmd
.
advîtisög
 |
ADVERTISED_Pau£
;

1701 i‡(
advîti£
 & 
NETDEV_F_PAUSE_ASYM
) {

1702 
ecmd
.
advîtisög
 |
ADVERTISED_Asym_Pau£
;

1704 
	`COVERAGE_INC
(
√tdev_£t_ëhtoﬁ
);

1705  
	`√tdev_löux_do_ëhtoﬁ
(
	`√tdev_gë_«me
(
√tdev
), &
ecmd
,

1706 
ETHTOOL_SSET
, "ETHTOOL_SSET");

1707 
	}
}

1712 
	$√tdev_löux_£t_pﬁicög
(
√tdev
 *netdev,

1713 
uöt32_t
 
kbôs_øã
, uöt32_à
kbôs_bur°
)

1715 
√tdev_dev_löux
 *
√tdev_dev
 =

1716 
	`√tdev_dev_löux_ˇ°
(
	`√tdev_gë_dev
(
√tdev
));

1717 c⁄° *
√tdev_«me
 = 
	`√tdev_gë_«me
(
√tdev
);

1718 
îr‹
;

1721 
kbôs_bur°
 = (!
kbôs_øã
 ? 0

1722 : !
kbôs_bur°
 ? 1000

1723 : 
kbôs_bur°
);

1725 i‡(
√tdev_dev
->
ˇche_vÆid
 & 
VALID_POLICING
) {

1726 i‡(
√tdev_dev
->
√tdev_pﬁicög_îr‹
) {

1727  
√tdev_dev
->
√tdev_pﬁicög_îr‹
;

1730 i‡(
√tdev_dev
->
kbôs_øã
 == kbits_rate &&

1731 
√tdev_dev
->
kbôs_bur°
 == kbits_burst) {

1735 
√tdev_dev
->
ˇche_vÆid
 &~
VALID_POLICING
;

1738 
	`COVERAGE_INC
(
√tdev_£t_pﬁicög
);

1740 
îr‹
 = 
	`tc_add_dñ_ögªss_qdisc
(
√tdev
, 
Ál£
);

1741 i‡(
îr‹
) {

1742 
	`VLOG_WARN_RL
(&
æ
, "%s:ÑemovingÖolicing failed: %s",

1743 
√tdev_«me
, 
	`°ªº‹
(
îr‹
));

1744 
out
;

1747 i‡(
kbôs_øã
) {

1748 
îr‹
 = 
	`tc_add_dñ_ögªss_qdisc
(
√tdev
, 
åue
);

1749 i‡(
îr‹
) {

1750 
	`VLOG_WARN_RL
(&
æ
, "%s:áddingÖolicing qdisc failed: %s",

1751 
√tdev_«me
, 
	`°ªº‹
(
îr‹
));

1752 
out
;

1755 
îr‹
 = 
	`tc_add_pﬁi˚r
(
√tdev
, 
kbôs_øã
, 
kbôs_bur°
);

1756 i‡(
îr‹
){

1757 
	`VLOG_WARN_RL
(&
æ
, "%s:áddingÖolicingáction failed: %s",

1758 
√tdev_«me
, 
	`°ªº‹
(
îr‹
));

1759 
out
;

1763 
√tdev_dev
->
kbôs_øã
 = kbits_rate;

1764 
√tdev_dev
->
kbôs_bur°
 = kbits_burst;

1766 
out
:

1767 i‡(!
îr‹
 ||Éº‹ =
ENODEV
) {

1768 
√tdev_dev
->
√tdev_pﬁicög_îr‹
 = 
îr‹
;

1769 
√tdev_dev
->
ˇche_vÆid
 |
VALID_POLICING
;

1771  
îr‹
;

1772 
	}
}

1775 
	$√tdev_löux_gë_qos_ty≥s
(c⁄° 
√tdev
 *√tdev 
OVS_UNUSED
,

1776 
s£t
 *
ty≥s
)

1778 c⁄° 
tc_›s
 **
›•
;

1780 
›•
 = 
tcs
; *›• !
NULL
; opsp++) {

1781 c⁄° 
tc_›s
 *
›s
 = *
›•
;

1782 i‡(
›s
->
tc_ö°Æl
 && ops->
ovs_«me
[0] != '\0') {

1783 
	`s£t_add
(
ty≥s
, 
›s
->
ovs_«me
);

1787 
	}
}

1789 c⁄° 
tc_›s
 *

1790 
	$tc_lookup_ovs_«me
(c⁄° *
«me
)

1792 c⁄° 
tc_›s
 **
›•
;

1794 
›•
 = 
tcs
; *›• !
NULL
; opsp++) {

1795 c⁄° 
tc_›s
 *
›s
 = *
›•
;

1796 i‡(!
	`°rcmp
(
«me
, 
›s
->
ovs_«me
)) {

1797  
›s
;

1800  
NULL
;

1801 
	}
}

1803 c⁄° 
tc_›s
 *

1804 
	$tc_lookup_löux_«me
(c⁄° *
«me
)

1806 c⁄° 
tc_›s
 **
›•
;

1808 
›•
 = 
tcs
; *›• !
NULL
; opsp++) {

1809 c⁄° 
tc_›s
 *
›s
 = *
›•
;

1810 i‡(
›s
->
löux_«me
 && !
	`°rcmp
(
«me
, ops->linux_name)) {

1811  
›s
;

1814  
NULL
;

1815 
	}
}

1817 
tc_queue
 *

1818 
	$tc_föd_queue__
(c⁄° 
√tdev
 *√tdev, 
queue_id
,

1819 
size_t
 
hash
)

1821 
√tdev_dev_löux
 *
√tdev_dev
 =

1822 
	`√tdev_dev_löux_ˇ°
(
	`√tdev_gë_dev
(
√tdev
));

1823 
tc_queue
 *
queue
;

1825 
	`HMAP_FOR_EACH_IN_BUCKET
 (
queue
, 
hm≠_node
, 
hash
, &
√tdev_dev
->
tc
->
queues
) {

1826 i‡(
queue
->
queue_id
 == queue_id) {

1827  
queue
;

1830  
NULL
;

1831 
	}
}

1833 
tc_queue
 *

1834 
	$tc_föd_queue
(c⁄° 
√tdev
 *√tdev, 
queue_id
)

1836  
	`tc_föd_queue__
(
√tdev
, 
queue_id
, 
	`hash_öt
(queue_id, 0));

1837 
	}
}

1840 
	$√tdev_löux_gë_qos_ˇ∑bûôõs
(c⁄° 
√tdev
 *√tdev 
OVS_UNUSED
,

1841 c⁄° *
ty≥
,

1842 
√tdev_qos_ˇ∑bûôõs
 *
ˇps
)

1844 c⁄° 
tc_›s
 *
›s
 = 
	`tc_lookup_ovs_«me
(
ty≥
);

1845 i‡(!
›s
) {

1846  
EOPNOTSUPP
;

1848 
ˇps
->
n_queues
 = 
›s
->n_queues;

1850 
	}
}

1853 
	$√tdev_löux_gë_qos
(c⁄° 
√tdev
 *netdev,

1854 c⁄° **
ty≥p
, 
sm≠
 *
dëaûs
)

1856 
√tdev_dev_löux
 *
√tdev_dev
 =

1857 
	`√tdev_dev_löux_ˇ°
(
	`√tdev_gë_dev
(
√tdev
));

1858 
îr‹
;

1860 
îr‹
 = 
	`tc_quîy_qdisc
(
√tdev
);

1861 i‡(
îr‹
) {

1862  
îr‹
;

1865 *
ty≥p
 = 
√tdev_dev
->
tc
->
›s
->
ovs_«me
;

1866  (
√tdev_dev
->
tc
->
›s
->
qdisc_gë


1867 ? 
√tdev_dev
->
tc
->
›s
->
	`qdisc_gë
(
√tdev
, 
dëaûs
)

1869 
	}
}

1872 
	$√tdev_löux_£t_qos
(
√tdev
 *netdev,

1873 c⁄° *
ty≥
, c⁄° 
sm≠
 *
dëaûs
)

1875 
√tdev_dev_löux
 *
√tdev_dev
 =

1876 
	`√tdev_dev_löux_ˇ°
(
	`√tdev_gë_dev
(
√tdev
));

1877 c⁄° 
tc_›s
 *
√w_›s
;

1878 
îr‹
;

1880 
√w_›s
 = 
	`tc_lookup_ovs_«me
(
ty≥
);

1881 i‡(!
√w_›s
 || !√w_›s->
tc_ö°Æl
) {

1882  
EOPNOTSUPP
;

1885 
îr‹
 = 
	`tc_quîy_qdisc
(
√tdev
);

1886 i‡(
îr‹
) {

1887  
îr‹
;

1890 i‡(
√w_›s
 =
√tdev_dev
->
tc
->
›s
) {

1891  
√w_›s
->
qdisc_£t
 ?Çew_›s->
	`qdisc_£t
(
√tdev
, 
dëaûs
) : 0;

1894 
îr‹
 = 
	`tc_dñ_qdisc
(
√tdev
);

1895 i‡(
îr‹
) {

1896  
îr‹
;

1898 
	`as£π
(
√tdev_dev
->
tc
 =
NULL
);

1901 
îr‹
 = 
√w_›s
->
	`tc_ö°Æl
(
√tdev
, 
dëaûs
);

1902 
	`as£π
((
îr‹
 =0Ë=(
√tdev_dev
->
tc
 !
NULL
));

1904  
îr‹
;

1906 
	}
}

1909 
	$√tdev_löux_gë_queue
(c⁄° 
√tdev
 *netdev,

1910 
queue_id
, 
sm≠
 *
dëaûs
)

1912 
√tdev_dev_löux
 *
√tdev_dev
 =

1913 
	`√tdev_dev_löux_ˇ°
(
	`√tdev_gë_dev
(
√tdev
));

1914 
îr‹
;

1916 
îr‹
 = 
	`tc_quîy_qdisc
(
√tdev
);

1917 i‡(
îr‹
) {

1918  
îr‹
;

1920 
tc_queue
 *
queue
 = 
	`tc_föd_queue
(
√tdev
, 
queue_id
);

1921  (
queue


1922 ? 
√tdev_dev
->
tc
->
›s
->
	`˛ass_gë
(
√tdev
, 
queue
, 
dëaûs
)

1923 : 
ENOENT
);

1925 
	}
}

1928 
	$√tdev_löux_£t_queue
(
√tdev
 *netdev,

1929 
queue_id
, c⁄° 
sm≠
 *
dëaûs
)

1931 
√tdev_dev_löux
 *
√tdev_dev
 =

1932 
	`√tdev_dev_löux_ˇ°
(
	`√tdev_gë_dev
(
√tdev
));

1933 
îr‹
;

1935 
îr‹
 = 
	`tc_quîy_qdisc
(
√tdev
);

1936 i‡(
îr‹
) {

1937  
îr‹
;

1938 } i‡(
queue_id
 >
√tdev_dev
->
tc
->
›s
->
n_queues


1939 || !
√tdev_dev
->
tc
->
›s
->
˛ass_£t
) {

1940  
EINVAL
;

1943  
√tdev_dev
->
tc
->
›s
->
	`˛ass_£t
(
√tdev
, 
queue_id
, 
dëaûs
);

1944 
	}
}

1947 
	$√tdev_löux_dñëe_queue
(
√tdev
 *√tdev, 
queue_id
)

1949 
√tdev_dev_löux
 *
√tdev_dev
 =

1950 
	`√tdev_dev_löux_ˇ°
(
	`√tdev_gë_dev
(
√tdev
));

1951 
îr‹
;

1953 
îr‹
 = 
	`tc_quîy_qdisc
(
√tdev
);

1954 i‡(
îr‹
) {

1955  
îr‹
;

1956 } i‡(!
√tdev_dev
->
tc
->
›s
->
˛ass_dñëe
) {

1957  
EINVAL
;

1959 
tc_queue
 *
queue
 = 
	`tc_föd_queue
(
√tdev
, 
queue_id
);

1960  (
queue


1961 ? 
√tdev_dev
->
tc
->
›s
->
	`˛ass_dñëe
(
√tdev
, 
queue
)

1962 : 
ENOENT
);

1964 
	}
}

1967 
	$√tdev_löux_gë_queue_°©s
(c⁄° 
√tdev
 *netdev,

1968 
queue_id
,

1969 
√tdev_queue_°©s
 *
°©s
)

1971 
√tdev_dev_löux
 *
√tdev_dev
 =

1972 
	`√tdev_dev_löux_ˇ°
(
	`√tdev_gë_dev
(
√tdev
));

1973 
îr‹
;

1975 
îr‹
 = 
	`tc_quîy_qdisc
(
√tdev
);

1976 i‡(
îr‹
) {

1977  
îr‹
;

1978 } i‡(!
√tdev_dev
->
tc
->
›s
->
˛ass_gë_°©s
) {

1979  
EOPNOTSUPP
;

1981 c⁄° 
tc_queue
 *
queue
 = 
	`tc_föd_queue
(
√tdev
, 
queue_id
);

1982  (
queue


1983 ? 
√tdev_dev
->
tc
->
›s
->
	`˛ass_gë_°©s
(
√tdev
, 
queue
, 
°©s
)

1984 : 
ENOENT
);

1986 
	}
}

1988 
boﬁ


1989 
	$°¨t_queue_dump
(c⁄° 
√tdev
 *√tdev, 
∆_dump
 *
dump
)

1991 
oÂbuf
 
ªque°
;

1992 
tcmsg
 *tcmsg;

1994 
tcmsg
 = 
	`tc_make_ªque°
(
√tdev
, 
RTM_GETTCLASS
, 0, &
ªque°
);

1995 i‡(!
tcmsg
) {

1996  
Ál£
;

1998 
tcmsg
->
tcm_∑ª¡
 = 0;

1999 
	`∆_dump_°¨t
(
dump
, 
π∆_sock
, &
ªque°
);

2000 
	`oÂbuf_unöô
(&
ªque°
);

2001  
åue
;

2002 
	}
}

2005 
	$√tdev_löux_dump_queues
(c⁄° 
√tdev
 *netdev,

2006 
√tdev_dump_queues_cb
 *
cb
, *
aux
)

2008 
√tdev_dev_löux
 *
√tdev_dev
 =

2009 
	`√tdev_dev_löux_ˇ°
(
	`√tdev_gë_dev
(
√tdev
));

2010 
tc_queue
 *
queue
, *
√xt_queue
;

2011 
sm≠
 
dëaûs
;

2012 
œ°_îr‹
;

2013 
îr‹
;

2015 
îr‹
 = 
	`tc_quîy_qdisc
(
√tdev
);

2016 i‡(
îr‹
) {

2017  
îr‹
;

2018 } i‡(!
√tdev_dev
->
tc
->
›s
->
˛ass_gë
) {

2019  
EOPNOTSUPP
;

2022 
œ°_îr‹
 = 0;

2023 
	`sm≠_öô
(&
dëaûs
);

2024 
	`HMAP_FOR_EACH_SAFE
 (
queue
, 
√xt_queue
, 
hm≠_node
,

2025 &
√tdev_dev
->
tc
->
queues
) {

2026 
	`sm≠_˛ór
(&
dëaûs
);

2028 
îr‹
 = 
√tdev_dev
->
tc
->
›s
->
	`˛ass_gë
(
√tdev
, 
queue
, &
dëaûs
);

2029 i‡(!
îr‹
) {

2030 (*
cb
)(
queue
->
queue_id
, &
dëaûs
, 
aux
);

2032 
œ°_îr‹
 = 
îr‹
;

2035 
	`sm≠_de°roy
(&
dëaûs
);

2037  
œ°_îr‹
;

2038 
	}
}

2041 
	$√tdev_löux_dump_queue_°©s
(c⁄° 
√tdev
 *netdev,

2042 
√tdev_dump_queue_°©s_cb
 *
cb
, *
aux
)

2044 
√tdev_dev_löux
 *
√tdev_dev
 =

2045 
	`√tdev_dev_löux_ˇ°
(
	`√tdev_gë_dev
(
√tdev
));

2046 
∆_dump
 
dump
;

2047 
oÂbuf
 
msg
;

2048 
œ°_îr‹
;

2049 
îr‹
;

2051 
îr‹
 = 
	`tc_quîy_qdisc
(
√tdev
);

2052 i‡(
îr‹
) {

2053  
îr‹
;

2054 } i‡(!
√tdev_dev
->
tc
->
›s
->
˛ass_dump_°©s
) {

2055  
EOPNOTSUPP
;

2058 
œ°_îr‹
 = 0;

2059 i‡(!
	`°¨t_queue_dump
(
√tdev
, &
dump
)) {

2060  
ENODEV
;

2062 
	`∆_dump_√xt
(&
dump
, &
msg
)) {

2063 
îr‹
 = 
√tdev_dev
->
tc
->
›s
->
	`˛ass_dump_°©s
(
√tdev
, &
msg
, 
cb
, 
aux
);

2064 i‡(
îr‹
) {

2065 
œ°_îr‹
 = 
îr‹
;

2069 
îr‹
 = 
	`∆_dump_d⁄e
(&
dump
);

2070  
îr‹
 ?Éº‹ : 
œ°_îr‹
;

2071 
	}
}

2074 
	$√tdev_löux_gë_ö4
(c⁄° 
√tdev
 *
√tdev_
,

2075 
ö_addr
 *
addªss
, ö_add∏*
√tmask
)

2077 
√tdev_dev_löux
 *
√tdev_dev
 =

2078 
	`√tdev_dev_löux_ˇ°
(
	`√tdev_gë_dev
(
√tdev_
));

2080 i‡(!(
√tdev_dev
->
ˇche_vÆid
 & 
VALID_IN4
)) {

2081 
îr‹
;

2083 
îr‹
 = 
	`√tdev_löux_gë_ùv4
(
√tdev_
, &
√tdev_dev
->
addªss
,

2084 
SIOCGIFADDR
, "SIOCGIFADDR");

2085 i‡(
îr‹
) {

2086  
îr‹
;

2089 
îr‹
 = 
	`√tdev_löux_gë_ùv4
(
√tdev_
, &
√tdev_dev
->
√tmask
,

2090 
SIOCGIFNETMASK
, "SIOCGIFNETMASK");

2091 i‡(
îr‹
) {

2092  
îr‹
;

2095 
√tdev_dev
->
ˇche_vÆid
 |
VALID_IN4
;

2097 *
addªss
 = 
√tdev_dev
->address;

2098 *
√tmask
 = 
√tdev_dev
->netmask;

2099  
addªss
->
s_addr
 =
INADDR_ANY
 ? 
EADDRNOTAVAIL
 : 0;

2100 
	}
}

2103 
	$√tdev_löux_£t_ö4
(
√tdev
 *
√tdev_
, 
ö_addr
 
addªss
,

2104 
ö_addr
 
√tmask
)

2106 
√tdev_dev_löux
 *
√tdev_dev
 =

2107 
	`√tdev_dev_löux_ˇ°
(
	`√tdev_gë_dev
(
√tdev_
));

2108 
îr‹
;

2110 
îr‹
 = 
	`do_£t_addr
(
√tdev_
, 
SIOCSIFADDR
, "SIOCSIFADDR", 
addªss
);

2111 i‡(!
îr‹
) {

2112 
√tdev_dev
->
ˇche_vÆid
 |
VALID_IN4
;

2113 
√tdev_dev
->
addªss
 =áddress;

2114 
√tdev_dev
->
√tmask
 =Çetmask;

2115 i‡(
addªss
.
s_addr
 !
INADDR_ANY
) {

2116 
îr‹
 = 
	`do_£t_addr
(
√tdev_
, 
SIOCSIFNETMASK
,

2117 "SIOCSIFNETMASK", 
√tmask
);

2120  
îr‹
;

2121 
	}
}

2123 
boﬁ


2124 
∑r£_if_öë6_löe
(c⁄° *
löe
,

2125 
ö6_addr
 *
ö6
, 
i‚ame
[16 + 1])

2127 
uöt8_t
 *
	gs6
 = 
ö6
->
s6_addr
;

2128 
	#X8
 "%2"
SCNx8


	)

2129  
ssˇnf
(
löe
,

2130 " "
X8
 X8 X8 X8 X8 X8 X8 X8 X8 X8 X8 X8 X8 X8 X8 X8

2132 &
s6
[0], &s6[1], &s6[2], &s6[3],

2133 &
s6
[4], &s6[5], &s6[6], &s6[7],

2134 &
s6
[8], &s6[9], &s6[10], &s6[11],

2135 &
s6
[12], &s6[13], &s6[14], &s6[15],

2136 
i‚ame
) == 17;

2142 
	$√tdev_löux_gë_ö6
(c⁄° 
√tdev
 *
√tdev_
, 
ö6_addr
 *
ö6
)

2144 
√tdev_dev_löux
 *
√tdev_dev
 =

2145 
	`√tdev_dev_löux_ˇ°
(
	`√tdev_gë_dev
(
√tdev_
));

2146 i‡(!(
√tdev_dev
->
ˇche_vÆid
 & 
VALID_IN6
)) {

2147 
FILE
 *
fûe
;

2148 
löe
[128];

2150 
√tdev_dev
->
ö6
 = 
ö6addr_™y
;

2152 
fûe
 = 
	`f›í
("/proc/net/if_inet6", "r");

2153 i‡(
fûe
 !
NULL
) {

2154 c⁄° *
«me
 = 
	`√tdev_gë_«me
(
√tdev_
);

2155 
	`fgës
(
löe
, Üöe, 
fûe
)) {

2156 
ö6_addr
 
ö6_tmp
;

2157 
i‚ame
[16 + 1];

2158 i‡(
	`∑r£_if_öë6_löe
(
löe
, &
ö6_tmp
, 
i‚ame
)

2159 && !
	`°rcmp
(
«me
, 
i‚ame
))

2161 
√tdev_dev
->
ö6
 = 
ö6_tmp
;

2165 
	`f˛o£
(
fûe
);

2167 
√tdev_dev
->
ˇche_vÆid
 |
VALID_IN6
;

2169 *
ö6
 = 
√tdev_dev
->in6;

2171 
	}
}

2174 
	$make_ö4_sockaddr
(
sockaddr
 *
ß
, 
ö_addr
 
addr
)

2176 
sockaddr_ö
 
sö
;

2177 
	`mem£t
(&
sö
, 0,  sin);

2178 
sö
.
sö_Ámûy
 = 
AF_INET
;

2179 
sö
.
sö_addr
 = 
addr
;

2180 
sö
.
sö_p‹t
 = 0;

2182 
	`mem£t
(
ß
, 0,  *sa);

2183 
	`mem˝y
(
ß
, &
sö
,  sin);

2184 
	}
}

2187 
	$do_£t_addr
(
√tdev
 *netdev,

2188 
io˘l_ƒ
, c⁄° *
io˘l_«me
, 
ö_addr
 
addr
)

2190 
i‰eq
 
i‰
;

2191 
	`ovs_°rz˝y
(
i‰
.
i‰_«me
, 
	`√tdev_gë_«me
(
√tdev
),  ifr.ifr_name);

2192 
	`make_ö4_sockaddr
(&
i‰
.
i‰_addr
, 
addr
);

2194  
	`√tdev_löux_do_io˘l
(
	`√tdev_gë_«me
(
√tdev
), &
i‰
, 
io˘l_ƒ
,

2195 
io˘l_«me
);

2196 
	}
}

2200 
	$√tdev_löux_add_rouãr
(
√tdev
 *√tdev 
OVS_UNUSED
, 
ö_addr
 
rouãr
)

2202 
ö_addr
 
™y
 = { 
INADDR_ANY
 };

2203 
πíåy
 
π
;

2204 
îr‹
;

2206 
	`mem£t
(&
π
, 0, Ñt);

2207 
	`make_ö4_sockaddr
(&
π
.
π_d°
, 
™y
);

2208 
	`make_ö4_sockaddr
(&
π
.
π_g©eway
, 
rouãr
);

2209 
	`make_ö4_sockaddr
(&
π
.
π_gímask
, 
™y
);

2210 
π
.
π_Êags
 = 
RTF_UP
 | 
RTF_GATEWAY
;

2211 
îr‹
 = 
	`io˘l
(
af_öë_sock
, 
SIOCADDRT
, &
π
Ë< 0 ? 
î∫o
 : 0;

2212 i‡(
îr‹
) {

2213 
	`VLOG_WARN
("io˘l(SIOCADDRT): %s", 
	`°ªº‹
(
îr‹
));

2215  
îr‹
;

2216 
	}
}

2219 
	$√tdev_löux_gë_√xt_h›
(c⁄° 
ö_addr
 *
ho°
, ö_add∏*
√xt_h›
,

2220 **
√tdev_«me
)

2222 c⁄° 
‚
[] = "/proc/net/route";

2223 
FILE
 *
°ªam
;

2224 
löe
[256];

2225 
 
;

2227 *
√tdev_«me
 = 
NULL
;

2228 
°ªam
 = 
	`f›í
(
‚
, "r");

2229 i‡(
°ªam
 =
NULL
) {

2230 
	`VLOG_WARN_RL
(&
æ
, "%s: o≥¿Áûed: %s", 
‚
, 
	`°ªº‹
(
î∫o
));

2231  
î∫o
;

2234 
 
 = 0;

2235 
	`fgës
(
löe
, Üöe, 
°ªam
)) {

2236 i‡(++
 
 >= 2) {

2237 
iÁ˚
[17];

2238 
ovs_be32
 
de°
, 
g©eway
, 
mask
;

2239 
ªf˙t
, 
mëric
, 
mtu
;

2240 
Êags
, 
u£
, 
wödow
, 
úâ
;

2242 i‡(
	`ssˇnf
(
löe
,

2243 "%16†%"
SCNx32
" %"SCNx32" %04X %d %u %d %"SCNx32

2245 
iÁ˚
, &
de°
, &
g©eway
, &
Êags
, &
ªf˙t
,

2246 &
u£
, &
mëric
, &
mask
, &
mtu
, &
wödow
, &
úâ
) != 11) {

2248 
	`VLOG_WARN_RL
(&
æ
, "%s: couldÇotÖarseÜine %d: %s",

2249 
‚
, 
 
, 
löe
);

2252 i‡(!(
Êags
 & 
RTF_UP
)) {

2260 i‡((
de°
 & 
mask
Ë=(
ho°
->
s_addr
 & mask)) {

2261 i‡(!
g©eway
) {

2263 
√xt_h›
->
s_addr
 = 0;

2266 
√xt_h›
->
s_addr
 = 
g©eway
;

2268 *
√tdev_«me
 = 
	`x°rdup
(
iÁ˚
);

2269 
	`f˛o£
(
°ªam
);

2275 
	`f˛o£
(
°ªam
);

2276  
ENXIO
;

2277 
	}
}

2280 
	$√tdev_löux_gë_drv_öfo
(c⁄° 
√tdev
 *√tdev, 
sm≠
 *smap)

2282 
îr‹
;

2283 
√tdev_dev_löux
 *
√tdev_dev
 =

2284 
	`√tdev_dev_löux_ˇ°
(
	`√tdev_gë_dev
(
√tdev
));

2286 
îr‹
 = 
	`√tdev_löux_gë_drvöfo
(
√tdev_dev
);

2287 i‡(!
îr‹
) {

2288 
	`sm≠_add
(
sm≠
, "drivî_«me", 
√tdev_dev
->
drvöfo
.
drivî
);

2289 
	`sm≠_add
(
sm≠
, "drivî_vîsi⁄", 
√tdev_dev
->
drvöfo
.
vîsi⁄
);

2290 
	`sm≠_add
(
sm≠
, "fúmw¨e_vîsi⁄", 
√tdev_dev
->
drvöfo
.
fw_vîsi⁄
);

2292  
îr‹
;

2293 
	}
}

2296 
	$√tdev_öã∫Æ_gë_drv_öfo
(c⁄° 
√tdev
 *√tdev 
OVS_UNUSED
,

2297 
sm≠
 *smap)

2299 
	`sm≠_add
(
sm≠
, "driver_name", "openvswitch");

2301 
	}
}

2308 
	$√tdev_löux_¨p_lookup
(c⁄° 
√tdev
 *netdev,

2309 
ovs_be32
 
ù
, 
uöt8_t
 
mac
[
ETH_ADDR_LEN
])

2311 
¨¥eq
 
r
;

2312 
sockaddr_ö
 
sö
;

2313 
ªtvÆ
;

2315 
	`mem£t
(&
r
, 0, Ñ);

2316 
	`mem£t
(&
sö
, 0,  sin);

2317 
sö
.
sö_Ámûy
 = 
AF_INET
;

2318 
sö
.
sö_addr
.
s_addr
 = 
ù
;

2319 
sö
.
sö_p‹t
 = 0;

2320 
	`mem˝y
(&
r
.
¨p_∑
, &
sö
,  sin);

2321 
r
.
¨p_ha
.
ß_Ámûy
 = 
ARPHRD_ETHER
;

2322 
r
.
¨p_Êags
 = 0;

2323 
	`ovs_°rz˝y
(
r
.
¨p_dev
, 
	`√tdev_gë_«me
(
√tdev
), Ñ.arp_dev);

2324 
	`COVERAGE_INC
(
√tdev_¨p_lookup
);

2325 
ªtvÆ
 = 
	`io˘l
(
af_öë_sock
, 
SIOCGARP
, &
r
Ë< 0 ? 
î∫o
 : 0;

2326 i‡(!
ªtvÆ
) {

2327 
	`mem˝y
(
mac
, 
r
.
¨p_ha
.
ß_d©a
, 
ETH_ADDR_LEN
);

2328 } i‡(
ªtvÆ
 !
ENXIO
) {

2329 
	`VLOG_WARN_RL
(&
æ
, "%s: couldÇŸÜook u∞ARPÉ¡ry f‹ "
IP_FMT
": %s",

2330 
	`√tdev_gë_«me
(
√tdev
), 
	`IP_ARGS
(&
ù
), 
	`°ªº‹
(
ªtvÆ
));

2332  
ªtvÆ
;

2333 
	}
}

2336 
	$nd_to_iff_Êags
(
√tdev_Êags
 
nd
)

2338 
iff
 = 0;

2339 i‡(
nd
 & 
NETDEV_UP
) {

2340 
iff
 |
IFF_UP
;

2342 i‡(
nd
 & 
NETDEV_PROMISC
) {

2343 
iff
 |
IFF_PROMISC
;

2345  
iff
;

2346 
	}
}

2349 
	$iff_to_nd_Êags
(
iff
)

2351 
√tdev_Êags
 
nd
 = 0;

2352 i‡(
iff
 & 
IFF_UP
) {

2353 
nd
 |
NETDEV_UP
;

2355 i‡(
iff
 & 
IFF_PROMISC
) {

2356 
nd
 |
NETDEV_PROMISC
;

2358  
nd
;

2359 
	}
}

2362 
	$√tdev_löux_upd©e_Êags
(
√tdev
 *√tdev, 
√tdev_Êags
 
off
,

2363 
√tdev_Êags
 
⁄
, √tdev_Êag†*
ﬁd_Êag•
)

2365 
√tdev_dev_löux
 *
√tdev_dev
;

2366 
ﬁd_Êags
, 
√w_Êags
;

2367 
îr‹
 = 0;

2369 
√tdev_dev
 = 
	`√tdev_dev_löux_ˇ°
(
	`√tdev_gë_dev
(
√tdev
));

2370 
ﬁd_Êags
 = 
√tdev_dev
->
ifi_Êags
;

2371 *
ﬁd_Êag•
 = 
	`iff_to_nd_Êags
(
ﬁd_Êags
);

2372 
√w_Êags
 = (
ﬁd_Êags
 & ~
	`nd_to_iff_Êags
(
off
)Ë|Çd_to_iff_Êags(
⁄
);

2373 i‡(
√w_Êags
 !
ﬁd_Êags
) {

2374 
îr‹
 = 
	`£t_Êags
(
√tdev
, 
√w_Êags
);

2375 
	`gë_Êags
(&
√tdev_dev
->√tdev_dev, &√tdev_dev->
ifi_Êags
);

2377  
îr‹
;

2378 
	}
}

2381 
	$√tdev_löux_ch™ge_£q
(c⁄° 
√tdev
 *netdev)

2383  
	`√tdev_dev_löux_ˇ°
(
	`√tdev_gë_dev
(
√tdev
))->
ch™ge_£q
;

2384 
	}
}

2386 
	#NETDEV_LINUX_CLASS
(
NAME
, 
CREATE
, 
GET_STATS
, 
SET_STATS
, \

2387 
GET_FEATURES
, 
GET_STATUS
) \

2389 
NAME
, \

2391 
√tdev_löux_öô
, \

2392 
√tdev_löux_run
, \

2393 
√tdev_löux_waô
, \

2395 
CREATE
, \

2396 
√tdev_löux_de°roy
, \

2397 
NULL
, \

2398 
NULL
, \

2400 
√tdev_löux_›í
, \

2401 
√tdev_löux_˛o£
, \

2403 
√tdev_löux_li°í
, \

2404 
√tdev_löux_ªcv
, \

2405 
√tdev_löux_ªcv_waô
, \

2406 
√tdev_löux_døö
, \

2408 
√tdev_löux_£nd
, \

2409 
√tdev_löux_£nd_waô
, \

2411 
√tdev_löux_£t_ëhîaddr
, \

2412 
√tdev_löux_gë_ëhîaddr
, \

2413 
√tdev_löux_gë_mtu
, \

2414 
√tdev_löux_£t_mtu
, \

2415 
√tdev_löux_gë_ifödex
, \

2416 
√tdev_löux_gë_ˇºõr
, \

2417 
√tdev_löux_gë_ˇºõr_ª£ts
, \

2418 
√tdev_löux_£t_miim⁄_öãrvÆ
, \

2419 
GET_STATS
, \

2420 
SET_STATS
, \

2422 
GET_FEATURES
, \

2423 
√tdev_löux_£t_advîti£míts
, \

2425 
√tdev_löux_£t_pﬁicög
, \

2426 
√tdev_löux_gë_qos_ty≥s
, \

2427 
√tdev_löux_gë_qos_ˇ∑bûôõs
, \

2428 
√tdev_löux_gë_qos
, \

2429 
√tdev_löux_£t_qos
, \

2430 
√tdev_löux_gë_queue
, \

2431 
√tdev_löux_£t_queue
, \

2432 
√tdev_löux_dñëe_queue
, \

2433 
√tdev_löux_gë_queue_°©s
, \

2434 
√tdev_löux_dump_queues
, \

2435 
√tdev_löux_dump_queue_°©s
, \

2437 
√tdev_löux_gë_ö4
, \

2438 
√tdev_löux_£t_ö4
, \

2439 
√tdev_löux_gë_ö6
, \

2440 
√tdev_löux_add_rouãr
, \

2441 
√tdev_löux_gë_√xt_h›
, \

2442 
GET_STATUS
, \

2443 
√tdev_löux_¨p_lookup
, \

2445 
√tdev_löux_upd©e_Êags
, \

2447 
√tdev_löux_ch™ge_£q
 \

2448 }

	)

2450 c⁄° 
√tdev_˛ass
 
	g√tdev_löux_˛ass
 =

2451 
NETDEV_LINUX_CLASS
(

2453 
√tdev_löux_¸óã
,

2454 
√tdev_löux_gë_°©s
,

2455 
NULL
,

2456 
√tdev_löux_gë_„©uªs
,

2457 
√tdev_löux_gë_drv_öfo
);

2459 c⁄° 
√tdev_˛ass
 
	g√tdev_èp_˛ass
 =

2460 
NETDEV_LINUX_CLASS
(

2462 
√tdev_löux_¸óã_èp
,

2463 
√tdev_èp_gë_°©s
,

2464 
NULL
,

2465 
√tdev_löux_gë_„©uªs
,

2466 
√tdev_löux_gë_drv_öfo
);

2468 c⁄° 
√tdev_˛ass
 
	g√tdev_öã∫Æ_˛ass
 =

2469 
NETDEV_LINUX_CLASS
(

2471 
√tdev_löux_¸óã
,

2472 
√tdev_öã∫Æ_gë_°©s
,

2473 
√tdev_vp‹t_£t_°©s
,

2474 
NULL
,

2475 
√tdev_öã∫Æ_gë_drv_öfo
);

2479 
	#HTB_N_QUEUES
 0xf000

	)

2481 
	shtb
 {

2482 
tc
 
	mtc
;

2483 
	mmax_øã
;

2486 
	shtb_˛ass
 {

2487 
tc_queue
 
	mtc_queue
;

2488 
	mmö_øã
;

2489 
	mmax_øã
;

2490 
	mbur°
;

2491 
	m¥i‹ôy
;

2494 
htb
 *

2495 
	$htb_gë__
(c⁄° 
√tdev
 *netdev)

2497 
√tdev_dev_löux
 *
√tdev_dev
 =

2498 
	`√tdev_dev_löux_ˇ°
(
	`√tdev_gë_dev
(
√tdev
));

2499  
	`CONTAINER_OF
(
√tdev_dev
->
tc
, 
htb
,Åc);

2500 
	}
}

2503 
	$htb_ö°Æl__
(
√tdev
 *√tdev, 
uöt64_t
 
max_øã
)

2505 
√tdev_dev_löux
 *
√tdev_dev
 =

2506 
	`√tdev_dev_löux_ˇ°
(
	`√tdev_gë_dev
(
√tdev
));

2507 
htb
 *htb;

2509 
htb
 = 
	`xmÆloc
( *htb);

2510 
	`tc_öô
(&
htb
->
tc
, &
tc_›s_htb
);

2511 
htb
->
max_øã
 = max_rate;

2513 
√tdev_dev
->
tc
 = &
htb
->tc;

2514 
	}
}

2520 
	$htb_£tup_qdisc__
(
√tdev
 *netdev)

2522 
size_t
 
›t_off£t
;

2523 
tc_htb_glob
 
›t
;

2524 
oÂbuf
 
ªque°
;

2525 
tcmsg
 *tcmsg;

2527 
	`tc_dñ_qdisc
(
√tdev
);

2529 
tcmsg
 = 
	`tc_make_ªque°
(
√tdev
, 
RTM_NEWQDISC
,

2530 
NLM_F_EXCL
 | 
NLM_F_CREATE
, &
ªque°
);

2531 i‡(!
tcmsg
) {

2532  
ENODEV
;

2534 
tcmsg
->
tcm_h™dÀ
 = 
	`tc_make_h™dÀ
(1, 0);

2535 
tcmsg
->
tcm_∑ª¡
 = 
TC_H_ROOT
;

2537 
	`∆_msg_put_°rög
(&
ªque°
, 
TCA_KIND
, "htb");

2539 
	`mem£t
(&
›t
, 0,  opt);

2540 
›t
.
øã2qu™tum
 = 10;

2541 
›t
.
vîsi⁄
 = 3;

2542 
›t
.
def˛s
 = 1;

2544 
›t_off£t
 = 
	`∆_msg_°¨t_√°ed
(&
ªque°
, 
TCA_OPTIONS
);

2545 
	`∆_msg_put_un•ec
(&
ªque°
, 
TCA_HTB_INIT
, &
›t
,  opt);

2546 
	`∆_msg_íd_√°ed
(&
ªque°
, 
›t_off£t
);

2548  
	`tc_å™ß˘
(&
ªque°
, 
NULL
);

2549 
	}
}

2554 
	$htb_£tup_˛ass__
(
√tdev
 *√tdev, 
h™dÀ
,

2555 
∑ª¡
, 
htb_˛ass
 *
˛ass
)

2557 
size_t
 
›t_off£t
;

2558 
tc_htb_›t
 
›t
;

2559 
oÂbuf
 
ªque°
;

2560 
tcmsg
 *tcmsg;

2561 
îr‹
;

2562 
mtu
;

2564 
îr‹
 = 
	`√tdev_gë_mtu
(
√tdev
, &
mtu
);

2565 i‡(
îr‹
) {

2566 
	`VLOG_WARN_RL
(&
æ
, "cannot set up HTB on device %sÅhatÜacks MTU",

2567 
	`√tdev_gë_«me
(
√tdev
));

2568  
îr‹
;

2571 
	`mem£t
(&
›t
, 0,  opt);

2572 
	`tc_fûl_øã
(&
›t
.
øã
, 
˛ass
->
mö_øã
, 
mtu
);

2573 
	`tc_fûl_øã
(&
›t
.
˚û
, 
˛ass
->
max_øã
, 
mtu
);

2574 
›t
.
buf„r
 = 
	`tc_ˇlc_buf„r
(›t.
øã
.øã, 
mtu
, 
˛ass
->
bur°
);

2575 
›t
.
cbuf„r
 = 
	`tc_ˇlc_buf„r
(›t.
˚û
.
øã
, 
mtu
, 
˛ass
->
bur°
);

2576 
›t
.
¥io
 = 
˛ass
->
¥i‹ôy
;

2578 
tcmsg
 = 
	`tc_make_ªque°
(
√tdev
, 
RTM_NEWTCLASS
, 
NLM_F_CREATE
, &
ªque°
);

2579 i‡(!
tcmsg
) {

2580  
ENODEV
;

2582 
tcmsg
->
tcm_h™dÀ
 = 
h™dÀ
;

2583 
tcmsg
->
tcm_∑ª¡
 = 
∑ª¡
;

2585 
	`∆_msg_put_°rög
(&
ªque°
, 
TCA_KIND
, "htb");

2586 
›t_off£t
 = 
	`∆_msg_°¨t_√°ed
(&
ªque°
, 
TCA_OPTIONS
);

2587 
	`∆_msg_put_un•ec
(&
ªque°
, 
TCA_HTB_PARMS
, &
›t
,  opt);

2588 
	`tc_put_πab
(&
ªque°
, 
TCA_HTB_RTAB
, &
›t
.
øã
);

2589 
	`tc_put_πab
(&
ªque°
, 
TCA_HTB_CTAB
, &
›t
.
˚û
);

2590 
	`∆_msg_íd_√°ed
(&
ªque°
, 
›t_off£t
);

2592 
îr‹
 = 
	`tc_å™ß˘
(&
ªque°
, 
NULL
);

2593 i‡(
îr‹
) {

2594 
	`VLOG_WARN_RL
(&
æ
, "failedÅoÑeplace %s class %u:%u,Öarent %u:%u, "

2596 
	`√tdev_gë_«me
(
√tdev
),

2597 
	`tc_gë_maj‹
(
h™dÀ
), 
	`tc_gë_mö‹
(handle),

2598 
	`tc_gë_maj‹
(
∑ª¡
), 
	`tc_gë_mö‹
(parent),

2599 
˛ass
->
mö_øã
, cœss->
max_øã
,

2600 
˛ass
->
bur°
, cœss->
¥i‹ôy
, 
	`°ªº‹
(
îr‹
));

2602  
îr‹
;

2603 
	}
}

2610 
	$htb_∑r£_tˇ_›ti⁄s__
(
∆©å
 *
∆_›ti⁄s
, 
htb_˛ass
 *
˛ass
)

2612 c⁄° 
∆_pﬁicy
 
tˇ_htb_pﬁicy
[] = {

2613 [
TCA_HTB_PARMS
] = { .
ty≥
 = 
NL_A_UNSPEC
, .
›ti⁄Æ
 = 
Ál£
,

2614 .
mö_Àn
 = (
tc_htb_›t
) },

2617 
∆©å
 *
©ås
[
	`ARRAY_SIZE
(
tˇ_htb_pﬁicy
)];

2618 c⁄° 
tc_htb_›t
 *
htb
;

2620 i‡(!
	`∆_∑r£_√°ed
(
∆_›ti⁄s
, 
tˇ_htb_pﬁicy
,

2621 
©ås
, 
	`ARRAY_SIZE
(
tˇ_htb_pﬁicy
))) {

2622 
	`VLOG_WARN_RL
(&
æ
, "failedÅoÖarse HTB class options");

2623  
EPROTO
;

2626 
htb
 = 
	`∆_©å_gë
(
©ås
[
TCA_HTB_PARMS
]);

2627 
˛ass
->
mö_øã
 = 
htb
->
øã
.rate;

2628 
˛ass
->
max_øã
 = 
htb
->
˚û
.
øã
;

2629 
˛ass
->
bur°
 = 
	`tc_ticks_to_byãs
(
htb
->
øã
.øã, htb->
buf„r
);

2630 
˛ass
->
¥i‹ôy
 = 
htb
->
¥io
;

2632 
	}
}

2635 
	$htb_∑r£_tcmsg__
(
oÂbuf
 *
tcmsg
, *
queue_id
,

2636 
htb_˛ass
 *
›ti⁄s
,

2637 
√tdev_queue_°©s
 *
°©s
)

2639 
∆©å
 *
∆_›ti⁄s
;

2640 
h™dÀ
;

2641 
îr‹
;

2643 
îr‹
 = 
	`tc_∑r£_˛ass
(
tcmsg
, &
h™dÀ
, &
∆_›ti⁄s
, 
°©s
);

2644 i‡(!
îr‹
 && 
queue_id
) {

2645 
maj‹
 = 
	`tc_gë_maj‹
(
h™dÀ
);

2646 
mö‹
 = 
	`tc_gë_mö‹
(
h™dÀ
);

2647 i‡(
maj‹
 =1 && 
mö‹
 > 0 && mö‹ <
HTB_N_QUEUES
) {

2648 *
queue_id
 = 
mö‹
 - 1;

2650 
îr‹
 = 
EPROTO
;

2653 i‡(!
îr‹
 && 
›ti⁄s
) {

2654 
îr‹
 = 
	`htb_∑r£_tˇ_›ti⁄s__
(
∆_›ti⁄s
, 
›ti⁄s
);

2656  
îr‹
;

2657 
	}
}

2660 
	$htb_∑r£_qdisc_dëaûs__
(
√tdev
 *netdev,

2661 c⁄° 
sm≠
 *
dëaûs
, 
htb_˛ass
 *
hc
)

2663 c⁄° *
max_øã_s
;

2665 
max_øã_s
 = 
	`sm≠_gë
(
dëaûs
, "max-rate");

2666 
hc
->
max_øã
 = 
max_øã_s
 ? 
	`°πouŒ
(max_øã_s, 
NULL
, 10) / 8 : 0;

2667 i‡(!
hc
->
max_øã
) {

2668 
√tdev_„©uªs
 
cuºít
;

2670 
	`√tdev_gë_„©uªs
(
√tdev
, &
cuºít
, 
NULL
, NULL, NULL);

2671 
hc
->
max_øã
 = 
	`√tdev_„©uªs_to_bps
(
cuºít
) / 8;

2673 
hc
->
mö_øã
 = hc->
max_øã
;

2674 
hc
->
bur°
 = 0;

2675 
hc
->
¥i‹ôy
 = 0;

2676 
	}
}

2679 
	$htb_∑r£_˛ass_dëaûs__
(
√tdev
 *netdev,

2680 c⁄° 
sm≠
 *
dëaûs
, 
htb_˛ass
 *
hc
)

2682 c⁄° 
htb
 *htb = 
	`htb_gë__
(
√tdev
);

2683 c⁄° *
mö_øã_s
 = 
	`sm≠_gë
(
dëaûs
, "min-rate");

2684 c⁄° *
max_øã_s
 = 
	`sm≠_gë
(
dëaûs
, "max-rate");

2685 c⁄° *
bur°_s
 = 
	`sm≠_gë
(
dëaûs
, "burst");

2686 c⁄° *
¥i‹ôy_s
 = 
	`sm≠_gë
(
dëaûs
, "priority");

2687 
mtu
, 
îr‹
;

2689 
îr‹
 = 
	`√tdev_gë_mtu
(
√tdev
, &
mtu
);

2690 i‡(
îr‹
) {

2691 
	`VLOG_WARN_RL
(&
æ
, "cannotÖarse HTB class on device %sÅhatÜacks MTU",

2692 
	`√tdev_gë_«me
(
√tdev
));

2693  
îr‹
;

2698 
hc
->
mö_øã
 = 
mö_øã_s
 ? 
	`°πouŒ
(mö_øã_s, 
NULL
, 10) / 8 : 0;

2699 
hc
->
mö_øã
 = 
	`MAX
(hc->mö_øã, 
mtu
);

2700 
hc
->
mö_øã
 = 
	`MIN
(hc->mö_øã, 
htb
->
max_øã
);

2703 
hc
->
max_øã
 = (
max_øã_s


2704 ? 
	`°πouŒ
(
max_øã_s
, 
NULL
, 10) / 8

2705 : 
htb
->
max_øã
);

2706 
hc
->
max_øã
 = 
	`MAX
(hc->max_øã, hc->
mö_øã
);

2707 
hc
->
max_øã
 = 
	`MIN
(hc->max_øã, 
htb
->max_rate);

2718 
hc
->
bur°
 = 
bur°_s
 ? 
	`°πouŒ
(bur°_s, 
NULL
, 10) / 8 : 0;

2719 
hc
->
bur°
 = 
	`MAX
(hc->bur°, 
mtu
 + 64);

2722 
hc
->
¥i‹ôy
 = 
¥i‹ôy_s
 ? 
	`°πoul
’ri‹ôy_s, 
NULL
, 10) : 0;

2725 
	}
}

2728 
	$htb_quîy_˛ass__
(c⁄° 
√tdev
 *√tdev, 
h™dÀ
,

2729 
∑ª¡
, 
htb_˛ass
 *
›ti⁄s
,

2730 
√tdev_queue_°©s
 *
°©s
)

2732 
oÂbuf
 *
ª∂y
;

2733 
îr‹
;

2735 
îr‹
 = 
	`tc_quîy_˛ass
(
√tdev
, 
h™dÀ
, 
∑ª¡
, &
ª∂y
);

2736 i‡(!
îr‹
) {

2737 
îr‹
 = 
	`htb_∑r£_tcmsg__
(
ª∂y
, 
NULL
, 
›ti⁄s
, 
°©s
);

2738 
	`oÂbuf_dñëe
(
ª∂y
);

2740  
îr‹
;

2741 
	}
}

2744 
	$htb_tc_ö°Æl
(
√tdev
 *√tdev, c⁄° 
sm≠
 *
dëaûs
)

2746 
îr‹
;

2748 
îr‹
 = 
	`htb_£tup_qdisc__
(
√tdev
);

2749 i‡(!
îr‹
) {

2750 
htb_˛ass
 
hc
;

2752 
	`htb_∑r£_qdisc_dëaûs__
(
√tdev
, 
dëaûs
, &
hc
);

2753 
îr‹
 = 
	`htb_£tup_˛ass__
(
√tdev
, 
	`tc_make_h™dÀ
(1, 0xfffe),

2754 
	`tc_make_h™dÀ
(1, 0), &
hc
);

2755 i‡(!
îr‹
) {

2756 
	`htb_ö°Æl__
(
√tdev
, 
hc
.
max_øã
);

2759  
îr‹
;

2760 
	}
}

2762 
htb_˛ass
 *

2763 
	$htb_˛ass_ˇ°__
(c⁄° 
tc_queue
 *
queue
)

2765  
	`CONTAINER_OF
(
queue
, 
htb_˛ass
, 
tc_queue
);

2766 
	}
}

2769 
	$htb_upd©e_queue__
(
√tdev
 *√tdev, 
queue_id
,

2770 c⁄° 
htb_˛ass
 *
hc
)

2772 
htb
 *htb = 
	`htb_gë__
(
√tdev
);

2773 
size_t
 
hash
 = 
	`hash_öt
(
queue_id
, 0);

2774 
tc_queue
 *
queue
;

2775 
htb_˛ass
 *
h˝
;

2777 
queue
 = 
	`tc_föd_queue__
(
√tdev
, 
queue_id
, 
hash
);

2778 i‡(
queue
) {

2779 
h˝
 = 
	`htb_˛ass_ˇ°__
(
queue
);

2781 
h˝
 = 
	`xmÆloc
( *hcp);

2782 
queue
 = &
h˝
->
tc_queue
;

2783 
queue
->
queue_id
 = queue_id;

2784 
	`hm≠_ö£π
(&
htb
->
tc
.
queues
, &
queue
->
hm≠_node
, 
hash
);

2787 
h˝
->
mö_øã
 = 
hc
->min_rate;

2788 
h˝
->
max_øã
 = 
hc
->max_rate;

2789 
h˝
->
bur°
 = 
hc
->burst;

2790 
h˝
->
¥i‹ôy
 = 
hc
->priority;

2791 
	}
}

2794 
	$htb_tc_lﬂd
(
√tdev
 *√tdev, 
oÂbuf
 *
∆msg
 
OVS_UNUSED
)

2796 
oÂbuf
 
msg
;

2797 
∆_dump
 
dump
;

2798 
htb_˛ass
 
hc
;

2801 
hc
.
max_øã
 = 0;

2802 
	`htb_quîy_˛ass__
(
√tdev
, 
	`tc_make_h™dÀ
(1, 0xff„), 0, &
hc
, 
NULL
);

2803 
	`htb_ö°Æl__
(
√tdev
, 
hc
.
max_øã
);

2806 i‡(!
	`°¨t_queue_dump
(
√tdev
, &
dump
)) {

2807  
ENODEV
;

2809 
	`∆_dump_√xt
(&
dump
, &
msg
)) {

2810 
queue_id
;

2812 i‡(!
	`htb_∑r£_tcmsg__
(&
msg
, &
queue_id
, &
hc
, 
NULL
)) {

2813 
	`htb_upd©e_queue__
(
√tdev
, 
queue_id
, &
hc
);

2816 
	`∆_dump_d⁄e
(&
dump
);

2819 
	}
}

2822 
	$htb_tc_de°roy
(
tc
 *tc)

2824 
htb
 *htb = 
	`CONTAINER_OF
(
tc
, htb,Åc);

2825 
htb_˛ass
 *
hc
, *
√xt
;

2827 
	`HMAP_FOR_EACH_SAFE
 (
hc
, 
√xt
, 
tc_queue
.
hm≠_node
, &
htb
->
tc
.
queues
) {

2828 
	`hm≠_ªmove
(&
htb
->
tc
.
queues
, &
hc
->
tc_queue
.
hm≠_node
);

2829 
	`‰ì
(
hc
);

2831 
	`tc_de°roy
(
tc
);

2832 
	`‰ì
(
htb
);

2833 
	}
}

2836 
	$htb_qdisc_gë
(c⁄° 
√tdev
 *√tdev, 
sm≠
 *
dëaûs
)

2838 c⁄° 
htb
 *htb = 
	`htb_gë__
(
√tdev
);

2839 
	`sm≠_add_f‹m©
(
dëaûs
, "max-øã", "%Œu", 8ULL * 
htb
->
max_øã
);

2841 
	}
}

2844 
	$htb_qdisc_£t
(
√tdev
 *√tdev, c⁄° 
sm≠
 *
dëaûs
)

2846 
htb_˛ass
 
hc
;

2847 
îr‹
;

2849 
	`htb_∑r£_qdisc_dëaûs__
(
√tdev
, 
dëaûs
, &
hc
);

2850 
îr‹
 = 
	`htb_£tup_˛ass__
(
√tdev
, 
	`tc_make_h™dÀ
(1, 0xfffe),

2851 
	`tc_make_h™dÀ
(1, 0), &
hc
);

2852 i‡(!
îr‹
) {

2853 
	`htb_gë__
(
√tdev
)->
max_øã
 = 
hc
.max_rate;

2855  
îr‹
;

2856 
	}
}

2859 
	$htb_˛ass_gë
(c⁄° 
√tdev
 *√tdev 
OVS_UNUSED
,

2860 c⁄° 
tc_queue
 *
queue
, 
sm≠
 *
dëaûs
)

2862 c⁄° 
htb_˛ass
 *
hc
 = 
	`htb_˛ass_ˇ°__
(
queue
);

2864 
	`sm≠_add_f‹m©
(
dëaûs
, "mö-øã", "%Œu", 8ULL * 
hc
->
mö_øã
);

2865 i‡(
hc
->
mö_øã
 !hc->
max_øã
) {

2866 
	`sm≠_add_f‹m©
(
dëaûs
, "max-øã", "%Œu", 8ULL * 
hc
->
max_øã
);

2868 
	`sm≠_add_f‹m©
(
dëaûs
, "bur°", "%Œu", 8ULL * 
hc
->
bur°
);

2869 i‡(
hc
->
¥i‹ôy
) {

2870 
	`sm≠_add_f‹m©
(
dëaûs
, "¥i‹ôy", "%u", 
hc
->
¥i‹ôy
);

2873 
	}
}

2876 
	$htb_˛ass_£t
(
√tdev
 *√tdev, 
queue_id
,

2877 c⁄° 
sm≠
 *
dëaûs
)

2879 
htb_˛ass
 
hc
;

2880 
îr‹
;

2882 
îr‹
 = 
	`htb_∑r£_˛ass_dëaûs__
(
√tdev
, 
dëaûs
, &
hc
);

2883 i‡(
îr‹
) {

2884  
îr‹
;

2887 
îr‹
 = 
	`htb_£tup_˛ass__
(
√tdev
, 
	`tc_make_h™dÀ
(1, 
queue_id
 + 1),

2888 
	`tc_make_h™dÀ
(1, 0xff„), &
hc
);

2889 i‡(
îr‹
) {

2890  
îr‹
;

2893 
	`htb_upd©e_queue__
(
√tdev
, 
queue_id
, &
hc
);

2895 
	}
}

2898 
	$htb_˛ass_dñëe
(
√tdev
 *√tdev, 
tc_queue
 *
queue
)

2900 
htb_˛ass
 *
hc
 = 
	`htb_˛ass_ˇ°__
(
queue
);

2901 
htb
 *htb = 
	`htb_gë__
(
√tdev
);

2902 
îr‹
;

2904 
îr‹
 = 
	`tc_dñëe_˛ass
(
√tdev
, 
	`tc_make_h™dÀ
(1, 
queue
->
queue_id
 + 1));

2905 i‡(!
îr‹
) {

2906 
	`hm≠_ªmove
(&
htb
->
tc
.
queues
, &
hc
->
tc_queue
.
hm≠_node
);

2907 
	`‰ì
(
hc
);

2909  
îr‹
;

2910 
	}
}

2913 
	$htb_˛ass_gë_°©s
(c⁄° 
√tdev
 *√tdev, c⁄° 
tc_queue
 *
queue
,

2914 
√tdev_queue_°©s
 *
°©s
)

2916  
	`htb_quîy_˛ass__
(
√tdev
, 
	`tc_make_h™dÀ
(1, 
queue
->
queue_id
 + 1),

2917 
	`tc_make_h™dÀ
(1, 0xff„), 
NULL
, 
°©s
);

2918 
	}
}

2921 
	$htb_˛ass_dump_°©s
(c⁄° 
√tdev
 *√tdev 
OVS_UNUSED
,

2922 c⁄° 
oÂbuf
 *
∆msg
,

2923 
√tdev_dump_queue_°©s_cb
 *
cb
, *
aux
)

2925 
√tdev_queue_°©s
 
°©s
;

2926 
h™dÀ
, 
maj‹
, 
mö‹
;

2927 
îr‹
;

2929 
îr‹
 = 
	`tc_∑r£_˛ass
(
∆msg
, &
h™dÀ
, 
NULL
, &
°©s
);

2930 i‡(
îr‹
) {

2931  
îr‹
;

2934 
maj‹
 = 
	`tc_gë_maj‹
(
h™dÀ
);

2935 
mö‹
 = 
	`tc_gë_mö‹
(
h™dÀ
);

2936 i‡(
maj‹
 =1 && 
mö‹
 > 0 && mö‹ <
HTB_N_QUEUES
) {

2937 (*
cb
)(
mö‹
 - 1, &
°©s
, 
aux
);

2940 
	}
}

2942 c⁄° 
tc_›s
 
	gtc_›s_htb
 = {

2945 
HTB_N_QUEUES
,

2946 
htb_tc_ö°Æl
,

2947 
htb_tc_lﬂd
,

2948 
htb_tc_de°roy
,

2949 
htb_qdisc_gë
,

2950 
htb_qdisc_£t
,

2951 
htb_˛ass_gë
,

2952 
htb_˛ass_£t
,

2953 
htb_˛ass_dñëe
,

2954 
htb_˛ass_gë_°©s
,

2955 
htb_˛ass_dump_°©s


2960 
	#HFSC_N_QUEUES
 0xf000

	)

2962 
	shfsc
 {

2963 
tc
 
	mtc
;

2964 
uöt32_t
 
	mmax_øã
;

2967 
	shfsc_˛ass
 {

2968 
tc_queue
 
	mtc_queue
;

2969 
uöt32_t
 
	mmö_øã
;

2970 
uöt32_t
 
	mmax_øã
;

2973 
hfsc
 *

2974 
	$hfsc_gë__
(c⁄° 
√tdev
 *netdev)

2976 
√tdev_dev_löux
 *
√tdev_dev
;

2977 
√tdev_dev
 = 
	`√tdev_dev_löux_ˇ°
(
	`√tdev_gë_dev
(
√tdev
));

2978  
	`CONTAINER_OF
(
√tdev_dev
->
tc
, 
hfsc
,Åc);

2979 
	}
}

2981 
hfsc_˛ass
 *

2982 
	$hfsc_˛ass_ˇ°__
(c⁄° 
tc_queue
 *
queue
)

2984  
	`CONTAINER_OF
(
queue
, 
hfsc_˛ass
, 
tc_queue
);

2985 
	}
}

2988 
	$hfsc_ö°Æl__
(
√tdev
 *√tdev, 
uöt32_t
 
max_øã
)

2990 
√tdev_dev_löux
 * 
√tdev_dev
;

2991 
hfsc
 *hfsc;

2993 
√tdev_dev
 = 
	`√tdev_dev_löux_ˇ°
(
	`√tdev_gë_dev
(
√tdev
));

2994 
hfsc
 = 
	`xmÆloc
( *hfsc);

2995 
	`tc_öô
(&
hfsc
->
tc
, &
tc_›s_hfsc
);

2996 
hfsc
->
max_øã
 = max_rate;

2997 
√tdev_dev
->
tc
 = &
hfsc
->tc;

2998 
	}
}

3001 
	$hfsc_upd©e_queue__
(
√tdev
 *√tdev, 
queue_id
,

3002 c⁄° 
hfsc_˛ass
 *
hc
)

3004 
size_t
 
hash
;

3005 
hfsc
 *hfsc;

3006 
hfsc_˛ass
 *
h˝
;

3007 
tc_queue
 *
queue
;

3009 
hfsc
 = 
	`hfsc_gë__
(
√tdev
);

3010 
hash
 = 
	`hash_öt
(
queue_id
, 0);

3012 
queue
 = 
	`tc_föd_queue__
(
√tdev
, 
queue_id
, 
hash
);

3013 i‡(
queue
) {

3014 
h˝
 = 
	`hfsc_˛ass_ˇ°__
(
queue
);

3016 
h˝
 = 
	`xmÆloc
( *hcp);

3017 
queue
 = &
h˝
->
tc_queue
;

3018 
queue
->
queue_id
 = queue_id;

3019 
	`hm≠_ö£π
(&
hfsc
->
tc
.
queues
, &
queue
->
hm≠_node
, 
hash
);

3022 
h˝
->
mö_øã
 = 
hc
->min_rate;

3023 
h˝
->
max_øã
 = 
hc
->max_rate;

3024 
	}
}

3027 
	$hfsc_∑r£_tˇ_›ti⁄s__
(
∆©å
 *
∆_›ti⁄s
, 
hfsc_˛ass
 *
˛ass
)

3029 c⁄° 
tc_£rvi˚_curve
 *
rsc
, *
fsc
, *
usc
;

3030 c⁄° 
∆_pﬁicy
 
tˇ_hfsc_pﬁicy
[] = {

3031 [
TCA_HFSC_RSC
] = {

3032 .
ty≥
 = 
NL_A_UNSPEC
,

3033 .
›ti⁄Æ
 = 
Ál£
,

3034 .
mö_Àn
 = (
tc_£rvi˚_curve
),

3036 [
TCA_HFSC_FSC
] = {

3037 .
ty≥
 = 
NL_A_UNSPEC
,

3038 .
›ti⁄Æ
 = 
Ál£
,

3039 .
mö_Àn
 = (
tc_£rvi˚_curve
),

3041 [
TCA_HFSC_USC
] = {

3042 .
ty≥
 = 
NL_A_UNSPEC
,

3043 .
›ti⁄Æ
 = 
Ál£
,

3044 .
mö_Àn
 = (
tc_£rvi˚_curve
),

3047 
∆©å
 *
©ås
[
	`ARRAY_SIZE
(
tˇ_hfsc_pﬁicy
)];

3049 i‡(!
	`∆_∑r£_√°ed
(
∆_›ti⁄s
, 
tˇ_hfsc_pﬁicy
,

3050 
©ås
, 
	`ARRAY_SIZE
(
tˇ_hfsc_pﬁicy
))) {

3051 
	`VLOG_WARN_RL
(&
æ
, "failedÅoÖarse HFSC class options");

3052  
EPROTO
;

3055 
rsc
 = 
	`∆_©å_gë
(
©ås
[
TCA_HFSC_RSC
]);

3056 
fsc
 = 
	`∆_©å_gë
(
©ås
[
TCA_HFSC_FSC
]);

3057 
usc
 = 
	`∆_©å_gë
(
©ås
[
TCA_HFSC_USC
]);

3059 i‡(
rsc
->
m1
 !0 ||Ñsc->
d
 != 0 ||

3060 
fsc
->
m1
 !0 || fsc->
d
 != 0 ||

3061 
usc
->
m1
 !0 || usc->
d
 != 0) {

3062 
	`VLOG_WARN_RL
(&
æ
, "failedÅoÖarse HFSC class options. "

3064  
EPROTO
;

3067 i‡(
rsc
->
m2
 !
fsc
->m2) {

3068 
	`VLOG_WARN_RL
(&
æ
, "failedÅoÖarse HFSC class options. "

3070  
EPROTO
;

3073 i‡(
rsc
->
m2
 > 
usc
->m2) {

3074 
	`VLOG_WARN_RL
(&
æ
, "failedÅoÖarse HFSC class options. "

3077  
EPROTO
;

3080 
˛ass
->
mö_øã
 = 
fsc
->
m2
;

3081 
˛ass
->
max_øã
 = 
usc
->
m2
;

3083 
	}
}

3086 
	$hfsc_∑r£_tcmsg__
(
oÂbuf
 *
tcmsg
, *
queue_id
,

3087 
hfsc_˛ass
 *
›ti⁄s
,

3088 
√tdev_queue_°©s
 *
°©s
)

3090 
îr‹
;

3091 
h™dÀ
;

3092 
∆©å
 *
∆_›ti⁄s
;

3094 
îr‹
 = 
	`tc_∑r£_˛ass
(
tcmsg
, &
h™dÀ
, &
∆_›ti⁄s
, 
°©s
);

3095 i‡(
îr‹
) {

3096  
îr‹
;

3099 i‡(
queue_id
) {

3100 
maj‹
, 
mö‹
;

3102 
maj‹
 = 
	`tc_gë_maj‹
(
h™dÀ
);

3103 
mö‹
 = 
	`tc_gë_mö‹
(
h™dÀ
);

3104 i‡(
maj‹
 =1 && 
mö‹
 > 0 && mö‹ <
HFSC_N_QUEUES
) {

3105 *
queue_id
 = 
mö‹
 - 1;

3107  
EPROTO
;

3111 i‡(
›ti⁄s
) {

3112 
îr‹
 = 
	`hfsc_∑r£_tˇ_›ti⁄s__
(
∆_›ti⁄s
, 
›ti⁄s
);

3115  
îr‹
;

3116 
	}
}

3119 
	$hfsc_quîy_˛ass__
(c⁄° 
√tdev
 *√tdev, 
h™dÀ
,

3120 
∑ª¡
, 
hfsc_˛ass
 *
›ti⁄s
,

3121 
√tdev_queue_°©s
 *
°©s
)

3123 
îr‹
;

3124 
oÂbuf
 *
ª∂y
;

3126 
îr‹
 = 
	`tc_quîy_˛ass
(
√tdev
, 
h™dÀ
, 
∑ª¡
, &
ª∂y
);

3127 i‡(
îr‹
) {

3128  
îr‹
;

3131 
îr‹
 = 
	`hfsc_∑r£_tcmsg__
(
ª∂y
, 
NULL
, 
›ti⁄s
, 
°©s
);

3132 
	`oÂbuf_dñëe
(
ª∂y
);

3133  
îr‹
;

3134 
	}
}

3137 
	$hfsc_∑r£_qdisc_dëaûs__
(
√tdev
 *√tdev, c⁄° 
sm≠
 *
dëaûs
,

3138 
hfsc_˛ass
 *
˛ass
)

3140 
uöt32_t
 
max_øã
;

3141 c⁄° *
max_øã_s
;

3143 
max_øã_s
 = 
	`sm≠_gë
(
dëaûs
, "max-rate");

3144 
max_øã
 = 
max_øã_s
 ? 
	`°πouŒ
(max_øã_s, 
NULL
, 10) / 8 : 0;

3146 i‡(!
max_øã
) {

3147 
√tdev_„©uªs
 
cuºít
;

3149 
	`√tdev_gë_„©uªs
(
√tdev
, &
cuºít
, 
NULL
, NULL, NULL);

3150 
max_øã
 = 
	`√tdev_„©uªs_to_bps
(
cuºít
) / 8;

3153 
˛ass
->
mö_øã
 = 
max_øã
;

3154 
˛ass
->
max_øã
 = max_rate;

3155 
	}
}

3158 
	$hfsc_∑r£_˛ass_dëaûs__
(
√tdev
 *netdev,

3159 c⁄° 
sm≠
 *
dëaûs
,

3160 
hfsc_˛ass
 * 
˛ass
)

3162 c⁄° 
hfsc
 *hfsc;

3163 
uöt32_t
 
mö_øã
, 
max_øã
;

3164 c⁄° *
mö_øã_s
, *
max_øã_s
;

3166 
hfsc
 = 
	`hfsc_gë__
(
√tdev
);

3167 
mö_øã_s
 = 
	`sm≠_gë
(
dëaûs
, "min-rate");

3168 
max_øã_s
 = 
	`sm≠_gë
(
dëaûs
, "max-rate");

3170 
mö_øã
 = 
mö_øã_s
 ? 
	`°πouŒ
(mö_øã_s, 
NULL
, 10) / 8 : 0;

3171 
mö_øã
 = 
	`MAX
(min_rate, 1);

3172 
mö_øã
 = 
	`MIN
(mö_øã, 
hfsc
->
max_øã
);

3174 
max_øã
 = (
max_øã_s


3175 ? 
	`°πouŒ
(
max_øã_s
, 
NULL
, 10) / 8

3176 : 
hfsc
->
max_øã
);

3177 
max_øã
 = 
	`MAX
(max_øã, 
mö_øã
);

3178 
max_øã
 = 
	`MIN
(max_øã, 
hfsc
->max_rate);

3180 
˛ass
->
mö_øã
 = min_rate;

3181 
˛ass
->
max_øã
 = max_rate;

3184 
	}
}

3190 
	$hfsc_£tup_qdisc__
(
√tdev
 *Çetdev)

3192 
tcmsg
 *tcmsg;

3193 
oÂbuf
 
ªque°
;

3194 
tc_hfsc_q›t
 
›t
;

3196 
	`tc_dñ_qdisc
(
√tdev
);

3198 
tcmsg
 = 
	`tc_make_ªque°
(
√tdev
, 
RTM_NEWQDISC
,

3199 
NLM_F_EXCL
 | 
NLM_F_CREATE
, &
ªque°
);

3201 i‡(!
tcmsg
) {

3202  
ENODEV
;

3205 
tcmsg
->
tcm_h™dÀ
 = 
	`tc_make_h™dÀ
(1, 0);

3206 
tcmsg
->
tcm_∑ª¡
 = 
TC_H_ROOT
;

3208 
	`mem£t
(&
›t
, 0,  opt);

3209 
›t
.
def˛s
 = 1;

3211 
	`∆_msg_put_°rög
(&
ªque°
, 
TCA_KIND
, "hfsc");

3212 
	`∆_msg_put_un•ec
(&
ªque°
, 
TCA_OPTIONS
, &
›t
,  opt);

3214  
	`tc_å™ß˘
(&
ªque°
, 
NULL
);

3215 
	}
}

3222 
	$hfsc_£tup_˛ass__
(
√tdev
 *√tdev, 
h™dÀ
,

3223 
∑ª¡
, 
hfsc_˛ass
 *
˛ass
)

3225 
îr‹
;

3226 
size_t
 
›t_off£t
;

3227 
tcmsg
 *tcmsg;

3228 
oÂbuf
 
ªque°
;

3229 
tc_£rvi˚_curve
 
mö
, 
max
;

3231 
tcmsg
 = 
	`tc_make_ªque°
(
√tdev
, 
RTM_NEWTCLASS
, 
NLM_F_CREATE
, &
ªque°
);

3233 i‡(!
tcmsg
) {

3234  
ENODEV
;

3237 
tcmsg
->
tcm_h™dÀ
 = 
h™dÀ
;

3238 
tcmsg
->
tcm_∑ª¡
 = 
∑ª¡
;

3240 
mö
.
m1
 = 0;

3241 
mö
.
d
 = 0;

3242 
mö
.
m2
 = 
˛ass
->
mö_øã
;

3244 
max
.
m1
 = 0;

3245 
max
.
d
 = 0;

3246 
max
.
m2
 = 
˛ass
->
max_øã
;

3248 
	`∆_msg_put_°rög
(&
ªque°
, 
TCA_KIND
, "hfsc");

3249 
›t_off£t
 = 
	`∆_msg_°¨t_√°ed
(&
ªque°
, 
TCA_OPTIONS
);

3250 
	`∆_msg_put_un•ec
(&
ªque°
, 
TCA_HFSC_RSC
, &
mö
,  min);

3251 
	`∆_msg_put_un•ec
(&
ªque°
, 
TCA_HFSC_FSC
, &
mö
,  min);

3252 
	`∆_msg_put_un•ec
(&
ªque°
, 
TCA_HFSC_USC
, &
max
,  max);

3253 
	`∆_msg_íd_√°ed
(&
ªque°
, 
›t_off£t
);

3255 
îr‹
 = 
	`tc_å™ß˘
(&
ªque°
, 
NULL
);

3256 i‡(
îr‹
) {

3257 
	`VLOG_WARN_RL
(&
æ
, "failedÅoÑeplace %s class %u:%u,Öarent %u:%u, "

3259 
	`√tdev_gë_«me
(
√tdev
),

3260 
	`tc_gë_maj‹
(
h™dÀ
), 
	`tc_gë_mö‹
(handle),

3261 
	`tc_gë_maj‹
(
∑ª¡
), 
	`tc_gë_mö‹
(parent),

3262 
˛ass
->
mö_øã
, cœss->
max_øã
, 
	`°ªº‹
(
îr‹
));

3265  
îr‹
;

3266 
	}
}

3269 
	$hfsc_tc_ö°Æl
(
√tdev
 *√tdev, c⁄° 
sm≠
 *
dëaûs
)

3271 
îr‹
;

3272 
hfsc_˛ass
 
˛ass
;

3274 
îr‹
 = 
	`hfsc_£tup_qdisc__
(
√tdev
);

3276 i‡(
îr‹
) {

3277  
îr‹
;

3280 
	`hfsc_∑r£_qdisc_dëaûs__
(
√tdev
, 
dëaûs
, &
˛ass
);

3281 
îr‹
 = 
	`hfsc_£tup_˛ass__
(
√tdev
, 
	`tc_make_h™dÀ
(1, 0xfffe),

3282 
	`tc_make_h™dÀ
(1, 0), &
˛ass
);

3284 i‡(
îr‹
) {

3285  
îr‹
;

3288 
	`hfsc_ö°Æl__
(
√tdev
, 
˛ass
.
max_øã
);

3290 
	}
}

3293 
	$hfsc_tc_lﬂd
(
√tdev
 *√tdev, 
oÂbuf
 *
∆msg
 
OVS_UNUSED
)

3295 
oÂbuf
 
msg
;

3296 
∆_dump
 
dump
;

3297 
hfsc_˛ass
 
hc
;

3299 
hc
.
max_øã
 = 0;

3300 
	`hfsc_quîy_˛ass__
(
√tdev
, 
	`tc_make_h™dÀ
(1, 0xff„), 0, &
hc
, 
NULL
);

3301 
	`hfsc_ö°Æl__
(
√tdev
, 
hc
.
max_øã
);

3303 i‡(!
	`°¨t_queue_dump
(
√tdev
, &
dump
)) {

3304  
ENODEV
;

3307 
	`∆_dump_√xt
(&
dump
, &
msg
)) {

3308 
queue_id
;

3310 i‡(!
	`hfsc_∑r£_tcmsg__
(&
msg
, &
queue_id
, &
hc
, 
NULL
)) {

3311 
	`hfsc_upd©e_queue__
(
√tdev
, 
queue_id
, &
hc
);

3315 
	`∆_dump_d⁄e
(&
dump
);

3317 
	}
}

3320 
	$hfsc_tc_de°roy
(
tc
 *tc)

3322 
hfsc
 *hfsc;

3323 
hfsc_˛ass
 *
hc
, *
√xt
;

3325 
hfsc
 = 
	`CONTAINER_OF
(
tc
, hfsc,Åc);

3327 
	`HMAP_FOR_EACH_SAFE
 (
hc
, 
√xt
, 
tc_queue
.
hm≠_node
, &
hfsc
->
tc
.
queues
) {

3328 
	`hm≠_ªmove
(&
hfsc
->
tc
.
queues
, &
hc
->
tc_queue
.
hm≠_node
);

3329 
	`‰ì
(
hc
);

3332 
	`tc_de°roy
(
tc
);

3333 
	`‰ì
(
hfsc
);

3334 
	}
}

3337 
	$hfsc_qdisc_gë
(c⁄° 
√tdev
 *√tdev, 
sm≠
 *
dëaûs
)

3339 c⁄° 
hfsc
 *hfsc;

3340 
hfsc
 = 
	`hfsc_gë__
(
√tdev
);

3341 
	`sm≠_add_f‹m©
(
dëaûs
, "max-øã", "%Œu", 8ULL * 
hfsc
->
max_øã
);

3343 
	}
}

3346 
	$hfsc_qdisc_£t
(
√tdev
 *√tdev, c⁄° 
sm≠
 *
dëaûs
)

3348 
îr‹
;

3349 
hfsc_˛ass
 
˛ass
;

3351 
	`hfsc_∑r£_qdisc_dëaûs__
(
√tdev
, 
dëaûs
, &
˛ass
);

3352 
îr‹
 = 
	`hfsc_£tup_˛ass__
(
√tdev
, 
	`tc_make_h™dÀ
(1, 0xfffe),

3353 
	`tc_make_h™dÀ
(1, 0), &
˛ass
);

3355 i‡(!
îr‹
) {

3356 
	`hfsc_gë__
(
√tdev
)->
max_øã
 = 
˛ass
.max_rate;

3359  
îr‹
;

3360 
	}
}

3363 
	$hfsc_˛ass_gë
(c⁄° 
√tdev
 *√tdev 
OVS_UNUSED
,

3364 c⁄° 
tc_queue
 *
queue
, 
sm≠
 *
dëaûs
)

3366 c⁄° 
hfsc_˛ass
 *
hc
;

3368 
hc
 = 
	`hfsc_˛ass_ˇ°__
(
queue
);

3369 
	`sm≠_add_f‹m©
(
dëaûs
, "mö-øã", "%Œu", 8ULL * 
hc
->
mö_øã
);

3370 i‡(
hc
->
mö_øã
 !hc->
max_øã
) {

3371 
	`sm≠_add_f‹m©
(
dëaûs
, "max-øã", "%Œu", 8ULL * 
hc
->
max_øã
);

3374 
	}
}

3377 
	$hfsc_˛ass_£t
(
√tdev
 *√tdev, 
queue_id
,

3378 c⁄° 
sm≠
 *
dëaûs
)

3380 
îr‹
;

3381 
hfsc_˛ass
 
˛ass
;

3383 
îr‹
 = 
	`hfsc_∑r£_˛ass_dëaûs__
(
√tdev
, 
dëaûs
, &
˛ass
);

3384 i‡(
îr‹
) {

3385  
îr‹
;

3388 
îr‹
 = 
	`hfsc_£tup_˛ass__
(
√tdev
, 
	`tc_make_h™dÀ
(1, 
queue_id
 + 1),

3389 
	`tc_make_h™dÀ
(1, 0xff„), &
˛ass
);

3390 i‡(
îr‹
) {

3391  
îr‹
;

3394 
	`hfsc_upd©e_queue__
(
√tdev
, 
queue_id
, &
˛ass
);

3396 
	}
}

3399 
	$hfsc_˛ass_dñëe
(
√tdev
 *√tdev, 
tc_queue
 *
queue
)

3401 
îr‹
;

3402 
hfsc
 *hfsc;

3403 
hfsc_˛ass
 *
hc
;

3405 
hc
 = 
	`hfsc_˛ass_ˇ°__
(
queue
);

3406 
hfsc
 = 
	`hfsc_gë__
(
√tdev
);

3408 
îr‹
 = 
	`tc_dñëe_˛ass
(
√tdev
, 
	`tc_make_h™dÀ
(1, 
queue
->
queue_id
 + 1));

3409 i‡(!
îr‹
) {

3410 
	`hm≠_ªmove
(&
hfsc
->
tc
.
queues
, &
hc
->
tc_queue
.
hm≠_node
);

3411 
	`‰ì
(
hc
);

3413  
îr‹
;

3414 
	}
}

3417 
	$hfsc_˛ass_gë_°©s
(c⁄° 
√tdev
 *√tdev, c⁄° 
tc_queue
 *
queue
,

3418 
√tdev_queue_°©s
 *
°©s
)

3420  
	`hfsc_quîy_˛ass__
(
√tdev
, 
	`tc_make_h™dÀ
(1, 
queue
->
queue_id
 + 1),

3421 
	`tc_make_h™dÀ
(1, 0xff„), 
NULL
, 
°©s
);

3422 
	}
}

3425 
	$hfsc_˛ass_dump_°©s
(c⁄° 
√tdev
 *√tdev 
OVS_UNUSED
,

3426 c⁄° 
oÂbuf
 *
∆msg
,

3427 
√tdev_dump_queue_°©s_cb
 *
cb
, *
aux
)

3429 
√tdev_queue_°©s
 
°©s
;

3430 
h™dÀ
, 
maj‹
, 
mö‹
;

3431 
îr‹
;

3433 
îr‹
 = 
	`tc_∑r£_˛ass
(
∆msg
, &
h™dÀ
, 
NULL
, &
°©s
);

3434 i‡(
îr‹
) {

3435  
îr‹
;

3438 
maj‹
 = 
	`tc_gë_maj‹
(
h™dÀ
);

3439 
mö‹
 = 
	`tc_gë_mö‹
(
h™dÀ
);

3440 i‡(
maj‹
 =1 && 
mö‹
 > 0 && mö‹ <
HFSC_N_QUEUES
) {

3441 (*
cb
)(
mö‹
 - 1, &
°©s
, 
aux
);

3444 
	}
}

3446 c⁄° 
tc_›s
 
	gtc_›s_hfsc
 = {

3449 
HFSC_N_QUEUES
,

3450 
hfsc_tc_ö°Æl
,

3451 
hfsc_tc_lﬂd
,

3452 
hfsc_tc_de°roy
,

3453 
hfsc_qdisc_gë
,

3454 
hfsc_qdisc_£t
,

3455 
hfsc_˛ass_gë
,

3456 
hfsc_˛ass_£t
,

3457 
hfsc_˛ass_dñëe
,

3458 
hfsc_˛ass_gë_°©s
,

3459 
hfsc_˛ass_dump_°©s


3468 
	$deÁu…_ö°Æl__
(
√tdev
 *netdev)

3470 
√tdev_dev_löux
 *
√tdev_dev
 =

3471 
	`√tdev_dev_löux_ˇ°
(
	`√tdev_gë_dev
(
√tdev
));

3472 
tc
 *tc;

3474 i‡(!
tc
) {

3475 
tc
 = 
	`xmÆloc
( *tc);

3476 
	`tc_öô
(
tc
, &
tc_›s_deÁu…
);

3478 
√tdev_dev
->
tc
 =Åc;

3479 
	}
}

3482 
	$deÁu…_tc_ö°Æl
(
√tdev
 *netdev,

3483 c⁄° 
sm≠
 *
dëaûs
 
OVS_UNUSED
)

3485 
	`deÁu…_ö°Æl__
(
√tdev
);

3487 
	}
}

3490 
	$deÁu…_tc_lﬂd
(
√tdev
 *√tdev, 
oÂbuf
 *
∆msg
 
OVS_UNUSED
)

3492 
	`deÁu…_ö°Æl__
(
√tdev
);

3494 
	}
}

3496 c⁄° 
tc_›s
 
	gtc_›s_deÁu…
 = {

3497 
NULL
,

3500 
deÁu…_tc_ö°Æl
,

3501 
deÁu…_tc_lﬂd
,

3502 
NULL
,

3503 
NULL
,

3504 
NULL
,

3505 
NULL
,

3506 
NULL
,

3507 
NULL
,

3508 
NULL
,

3509 
NULL


3517 
	$Ÿhî_tc_lﬂd
(
√tdev
 *√tdev, 
oÂbuf
 *
∆msg
 
OVS_UNUSED
)

3519 
√tdev_dev_löux
 *
√tdev_dev
 =

3520 
	`√tdev_dev_löux_ˇ°
(
	`√tdev_gë_dev
(
√tdev
));

3521 
tc
 *tc;

3523 i‡(!
tc
) {

3524 
tc
 = 
	`xmÆloc
( *tc);

3525 
	`tc_öô
(
tc
, &
tc_›s_Ÿhî
);

3527 
√tdev_dev
->
tc
 =Åc;

3529 
	}
}

3531 c⁄° 
tc_›s
 
	gtc_›s_Ÿhî
 = {

3532 
NULL
,

3535 
NULL
,

3536 
Ÿhî_tc_lﬂd
,

3537 
NULL
,

3538 
NULL
,

3539 
NULL
,

3540 
NULL
,

3541 
NULL
,

3542 
NULL
,

3543 
NULL
,

3544 
NULL


3550 
	gticks_≥r_s
;

3569 
	gbuf„r_hz
;

3573 
	$tc_make_h™dÀ
(
maj‹
, 
mö‹
)

3575  
	`TC_H_MAKE
(
maj‹
 << 16, 
mö‹
);

3576 
	}
}

3580 
	$tc_gë_maj‹
(
h™dÀ
)

3582  
	`TC_H_MAJ
(
h™dÀ
) >> 16;

3583 
	}
}

3587 
	$tc_gë_mö‹
(
h™dÀ
)

3589  
	`TC_H_MIN
(
h™dÀ
);

3590 
	}
}

3592 
tcmsg
 *

3593 
	$tc_make_ªque°
(c⁄° 
√tdev
 *√tdev, 
ty≥
, 
Êags
,

3594 
oÂbuf
 *
ªque°
)

3596 
tcmsg
 *tcmsg;

3597 
ifödex
;

3598 
îr‹
;

3600 
îr‹
 = 
	`gë_ifödex
(
√tdev
, &
ifödex
);

3601 i‡(
îr‹
) {

3602  
NULL
;

3605 
	`oÂbuf_öô
(
ªque°
, 512);

3606 
	`∆_msg_put_∆msghdr
(
ªque°
,  *
tcmsg
, 
ty≥
, 
NLM_F_REQUEST
 | 
Êags
);

3607 
tcmsg
 = 
	`oÂbuf_put_zîos
(
ªque°
,  *tcmsg);

3608 
tcmsg
->
tcm_Ámûy
 = 
AF_UNSPEC
;

3609 
tcmsg
->
tcm_ifödex
 = 
ifödex
;

3613  
tcmsg
;

3614 
	}
}

3617 
	$tc_å™ß˘
(
oÂbuf
 *
ªque°
, oÂbu‡**
ª∂yp
)

3619 
îr‹
 = 
	`∆_sock_å™ß˘
(
π∆_sock
, 
ªque°
, 
ª∂yp
);

3620 
	`oÂbuf_unöô
(
ªque°
);

3621  
îr‹
;

3622 
	}
}

3639 
	$tc_add_dñ_ögªss_qdisc
(
√tdev
 *√tdev, 
boﬁ
 
add
)

3641 
oÂbuf
 
ªque°
;

3642 
tcmsg
 *tcmsg;

3643 
îr‹
;

3644 
ty≥
 = 
add
 ? 
RTM_NEWQDISC
 : 
RTM_DELQDISC
;

3645 
Êags
 = 
add
 ? 
NLM_F_EXCL
 | 
NLM_F_CREATE
 : 0;

3647 
tcmsg
 = 
	`tc_make_ªque°
(
√tdev
, 
ty≥
, 
Êags
, &
ªque°
);

3648 i‡(!
tcmsg
) {

3649  
ENODEV
;

3651 
tcmsg
->
tcm_h™dÀ
 = 
	`tc_make_h™dÀ
(0xffff, 0);

3652 
tcmsg
->
tcm_∑ª¡
 = 
TC_H_INGRESS
;

3653 
	`∆_msg_put_°rög
(&
ªque°
, 
TCA_KIND
, "ingress");

3654 
	`∆_msg_put_un•ec
(&
ªque°
, 
TCA_OPTIONS
, 
NULL
, 0);

3656 
îr‹
 = 
	`tc_å™ß˘
(&
ªque°
, 
NULL
);

3657 i‡(
îr‹
) {

3660 i‡(!
add
 && (
îr‹
 =
ENOENT
 ||Éº‹ =
EINVAL
)) {

3663  
îr‹
;

3667 
	}
}

3683 
	$tc_add_pﬁi˚r
(
√tdev
 *√tdev, 
kbôs_øã
, 
kbôs_bur°
)

3685 
tc_pﬁi˚
Åc_police;

3686 
oÂbuf
 
ªque°
;

3687 
tcmsg
 *tcmsg;

3688 
size_t
 
basic_off£t
;

3689 
size_t
 
pﬁi˚_off£t
;

3690 
îr‹
;

3691 
mtu
 = 65535;

3693 
	`mem£t
(&
tc_pﬁi˚
, 0, Åc_police);

3694 
tc_pﬁi˚
.
a˘i⁄
 = 
TC_POLICE_SHOT
;

3695 
tc_pﬁi˚
.
mtu
 = mtu;

3696 
	`tc_fûl_øã
(&
tc_pﬁi˚
.
øã
, (
kbôs_øã
 * 1000)/8, 
mtu
);

3697 
tc_pﬁi˚
.
bur°
 = 
	`tc_byãs_to_ticks
—c_pﬁi˚.
øã
.rate,

3698 
kbôs_bur°
 * 1024);

3700 
tcmsg
 = 
	`tc_make_ªque°
(
√tdev
, 
RTM_NEWTFILTER
,

3701 
NLM_F_EXCL
 | 
NLM_F_CREATE
, &
ªque°
);

3702 i‡(!
tcmsg
) {

3703  
ENODEV
;

3705 
tcmsg
->
tcm_∑ª¡
 = 
	`tc_make_h™dÀ
(0xffff, 0);

3706 
tcmsg
->
tcm_öfo
 = 
	`tc_make_h™dÀ
(49,

3707 (
OVS_FORCE
 
uöt16_t
Ë
	`ht⁄s
(
ETH_P_ALL
));

3709 
	`∆_msg_put_°rög
(&
ªque°
, 
TCA_KIND
, "basic");

3710 
basic_off£t
 = 
	`∆_msg_°¨t_√°ed
(&
ªque°
, 
TCA_OPTIONS
);

3711 
pﬁi˚_off£t
 = 
	`∆_msg_°¨t_√°ed
(&
ªque°
, 
TCA_BASIC_POLICE
);

3712 
	`∆_msg_put_un•ec
(&
ªque°
, 
TCA_POLICE_TBF
, &
tc_pﬁi˚
, Åc_police);

3713 
	`tc_put_πab
(&
ªque°
, 
TCA_POLICE_RATE
, &
tc_pﬁi˚
.
øã
);

3714 
	`∆_msg_íd_√°ed
(&
ªque°
, 
pﬁi˚_off£t
);

3715 
	`∆_msg_íd_√°ed
(&
ªque°
, 
basic_off£t
);

3717 
îr‹
 = 
	`tc_å™ß˘
(&
ªque°
, 
NULL
);

3718 i‡(
îr‹
) {

3719  
îr‹
;

3723 
	}
}

3726 
	$ªad_psched
()

3764 c⁄° 
‚
[] = "/proc/net/psched";

3765 
a
, 
b
, 
c
, 
d
;

3766 
FILE
 *
°ªam
;

3768 
ticks_≥r_s
 = 1.0;

3769 
buf„r_hz
 = 100;

3771 
°ªam
 = 
	`f›í
(
‚
, "r");

3772 i‡(!
°ªam
) {

3773 
	`VLOG_WARN
("%s: o≥¿Áûed: %s", 
‚
, 
	`°ªº‹
(
î∫o
));

3777 i‡(
	`fsˇnf
(
°ªam
, "%x %x %x %x", &
a
, &
b
, &
c
, &
d
) != 4) {

3778 
	`VLOG_WARN
("%s:Ñód faûed", 
‚
);

3779 
	`f˛o£
(
°ªam
);

3782 
	`VLOG_DBG
("%s:ÖschedÖ¨amëî†¨e: %u %u %u %u", 
‚
, 
a
, 
b
, 
c
, 
d
);

3783 
	`f˛o£
(
°ªam
);

3785 i‡(!
a
 || !
c
) {

3786 
	`VLOG_WARN
("%s: invÆid scheduÀ∏∑ømëîs", 
‚
);

3790 
ticks_≥r_s
 = (Ë
a
 * 
c
 / 
b
;

3791 i‡(
c
 == 1000000) {

3792 
buf„r_hz
 = 
d
;

3794 
	`VLOG_WARN
("%s: unexpectedÖschedÖarameters: %u %u %u %u",

3795 
‚
, 
a
, 
b
, 
c
, 
d
);

3797 
	`VLOG_DBG
("%s:Åicks_≥r_s=%‡buf„r_hz=%u", 
‚
, 
ticks_≥r_s
, 
buf„r_hz
);

3798 
	}
}

3803 
	$tc_ticks_to_byãs
(
øã
, 
ticks
)

3805 i‡(!
buf„r_hz
) {

3806 
	`ªad_psched
();

3808  (
øã
 * 
ticks
Ë/ 
ticks_≥r_s
;

3809 
	}
}

3814 
	$tc_byãs_to_ticks
(
øã
, 
size
)

3816 i‡(!
buf„r_hz
) {

3817 
	`ªad_psched
();

3819  
øã
 ? ((Ë
ticks_≥r_s
 * 
size
) /Ñate : 0;

3820 
	}
}

3825 
	$tc_buf„r_≥r_jiffy
(
øã
)

3827 i‡(!
buf„r_hz
) {

3828 
	`ªad_psched
();

3830  
øã
 / 
buf„r_hz
;

3831 
	}
}

3843 
	$tc_∑r£_qdisc
(c⁄° 
oÂbuf
 *
msg
, c⁄° **
köd
,

3844 
∆©å
 **
›ti⁄s
)

3846 c⁄° 
∆_pﬁicy
 
tˇ_pﬁicy
[] = {

3847 [
TCA_KIND
] = { .
ty≥
 = 
NL_A_STRING
, .
›ti⁄Æ
 = 
Ál£
 },

3848 [
TCA_OPTIONS
] = { .
ty≥
 = 
NL_A_NESTED
, .
›ti⁄Æ
 = 
åue
 },

3850 
∆©å
 *
è
[
	`ARRAY_SIZE
(
tˇ_pﬁicy
)];

3852 i‡(!
	`∆_pﬁicy_∑r£
(
msg
, 
NLMSG_HDRLEN
 + (
tcmsg
),

3853 
tˇ_pﬁicy
, 
è
, 
	`ARRAY_SIZE
(ta))) {

3854 
	`VLOG_WARN_RL
(&
æ
, "failedÅoÖarse qdisc message");

3855 
îr‹
;

3858 i‡(
köd
) {

3859 *
köd
 = 
	`∆_©å_gë_°rög
(
è
[
TCA_KIND
]);

3862 i‡(
›ti⁄s
) {

3863 *
›ti⁄s
 = 
è
[
TCA_OPTIONS
];

3868 
îr‹
:

3869 i‡(
köd
) {

3870 *
köd
 = 
NULL
;

3872 i‡(
›ti⁄s
) {

3873 *
›ti⁄s
 = 
NULL
;

3875  
EPROTO
;

3876 
	}
}

3885 
	$tc_∑r£_˛ass
(c⁄° 
oÂbuf
 *
msg
, *
h™dÀp
,

3886 
∆©å
 **
›ti⁄s
, 
√tdev_queue_°©s
 *
°©s
)

3888 c⁄° 
∆_pﬁicy
 
tˇ_pﬁicy
[] = {

3889 [
TCA_OPTIONS
] = { .
ty≥
 = 
NL_A_NESTED
, .
›ti⁄Æ
 = 
Ál£
 },

3890 [
TCA_STATS2
] = { .
ty≥
 = 
NL_A_NESTED
, .
›ti⁄Æ
 = 
Ál£
 },

3892 
∆©å
 *
è
[
	`ARRAY_SIZE
(
tˇ_pﬁicy
)];

3894 i‡(!
	`∆_pﬁicy_∑r£
(
msg
, 
NLMSG_HDRLEN
 + (
tcmsg
),

3895 
tˇ_pﬁicy
, 
è
, 
	`ARRAY_SIZE
(ta))) {

3896 
	`VLOG_WARN_RL
(&
æ
, "failedÅoÖarse class message");

3897 
îr‹
;

3900 i‡(
h™dÀp
) {

3901 
tcmsg
 *
tc
 = 
	`oÂbuf_©_as£π
(
msg
, 
NLMSG_HDRLEN
,  *tc);

3902 *
h™dÀp
 = 
tc
->
tcm_h™dÀ
;

3905 i‡(
›ti⁄s
) {

3906 *
›ti⁄s
 = 
è
[
TCA_OPTIONS
];

3909 i‡(
°©s
) {

3910 c⁄° 
g√t_°©s_queue
 *
gsq
;

3911 
g√t_°©s_basic
 
gsb
;

3913 c⁄° 
∆_pﬁicy
 
°©s_pﬁicy
[] = {

3914 [
TCA_STATS_BASIC
] = { .
ty≥
 = 
NL_A_UNSPEC
, .
›ti⁄Æ
 = 
Ál£
,

3915 .
mö_Àn
 =  
gsb
 },

3916 [
TCA_STATS_QUEUE
] = { .
ty≥
 = 
NL_A_UNSPEC
, .
›ti⁄Æ
 = 
Ál£
,

3917 .
mö_Àn
 =  *
gsq
 },

3919 
∆©å
 *
ß
[
	`ARRAY_SIZE
(
°©s_pﬁicy
)];

3921 i‡(!
	`∆_∑r£_√°ed
(
è
[
TCA_STATS2
], 
°©s_pﬁicy
,

3922 
ß
, 
	`ARRAY_SIZE
(sa))) {

3923 
	`VLOG_WARN_RL
(&
æ
, "failedÅoÖarse class stats");

3924 
îr‹
;

3931 
	`mem£t
(&
gsb
, 0,  gsb);

3932 
	`mem˝y
(&
gsb
, 
	`∆_©å_gë
(
ß
[
TCA_STATS_BASIC
]),

3933 
	`MIN
(
	`∆_©å_gë_size
(
ß
[
TCA_STATS_BASIC
]),  
gsb
));

3934 
°©s
->
tx_byãs
 = 
gsb
.
byãs
;

3935 
°©s
->
tx_∑ckës
 = 
gsb
.
∑ckës
;

3937 
gsq
 = 
	`∆_©å_gë
(
ß
[
TCA_STATS_QUEUE
]);

3938 
°©s
->
tx_îr‹s
 = 
gsq
->
dr›s
;

3943 
îr‹
:

3944 i‡(
›ti⁄s
) {

3945 *
›ti⁄s
 = 
NULL
;

3947 i‡(
°©s
) {

3948 
	`mem£t
(
°©s
, 0,  *stats);

3950  
EPROTO
;

3951 
	}
}

3956 
	$tc_quîy_˛ass
(c⁄° 
√tdev
 *netdev,

3957 
h™dÀ
, 
∑ª¡
,

3958 
oÂbuf
 **
ª∂yp
)

3960 
oÂbuf
 
ªque°
;

3961 
tcmsg
 *tcmsg;

3962 
îr‹
;

3964 
tcmsg
 = 
	`tc_make_ªque°
(
√tdev
, 
RTM_GETTCLASS
, 
NLM_F_ECHO
, &
ªque°
);

3965 i‡(!
tcmsg
) {

3966  
ENODEV
;

3968 
tcmsg
->
tcm_h™dÀ
 = 
h™dÀ
;

3969 
tcmsg
->
tcm_∑ª¡
 = 
∑ª¡
;

3971 
îr‹
 = 
	`tc_å™ß˘
(&
ªque°
, 
ª∂yp
);

3972 i‡(
îr‹
) {

3973 
	`VLOG_WARN_RL
(&
æ
, "query %s class %u:%u (parent %u:%u) failed (%s)",

3974 
	`√tdev_gë_«me
(
√tdev
),

3975 
	`tc_gë_maj‹
(
h™dÀ
), 
	`tc_gë_mö‹
(handle),

3976 
	`tc_gë_maj‹
(
∑ª¡
), 
	`tc_gë_mö‹
(parent),

3977 
	`°ªº‹
(
îr‹
));

3979  
îr‹
;

3980 
	}
}

3984 
	$tc_dñëe_˛ass
(c⁄° 
√tdev
 *√tdev, 
h™dÀ
)

3986 
oÂbuf
 
ªque°
;

3987 
tcmsg
 *tcmsg;

3988 
îr‹
;

3990 
tcmsg
 = 
	`tc_make_ªque°
(
√tdev
, 
RTM_DELTCLASS
, 0, &
ªque°
);

3991 i‡(!
tcmsg
) {

3992  
ENODEV
;

3994 
tcmsg
->
tcm_h™dÀ
 = 
h™dÀ
;

3995 
tcmsg
->
tcm_∑ª¡
 = 0;

3997 
îr‹
 = 
	`tc_å™ß˘
(&
ªque°
, 
NULL
);

3998 i‡(
îr‹
) {

3999 
	`VLOG_WARN_RL
(&
æ
, "delete %s class %u:%u failed (%s)",

4000 
	`√tdev_gë_«me
(
√tdev
),

4001 
	`tc_gë_maj‹
(
h™dÀ
), 
	`tc_gë_mö‹
(handle),

4002 
	`°ªº‹
(
îr‹
));

4004  
îr‹
;

4005 
	}
}

4009 
	$tc_dñ_qdisc
(
√tdev
 *netdev)

4011 
√tdev_dev_löux
 *
√tdev_dev
 =

4012 
	`√tdev_dev_löux_ˇ°
(
	`√tdev_gë_dev
(
√tdev
));

4013 
oÂbuf
 
ªque°
;

4014 
tcmsg
 *tcmsg;

4015 
îr‹
;

4017 
tcmsg
 = 
	`tc_make_ªque°
(
√tdev
, 
RTM_DELQDISC
, 0, &
ªque°
);

4018 i‡(!
tcmsg
) {

4019  
ENODEV
;

4021 
tcmsg
->
tcm_h™dÀ
 = 
	`tc_make_h™dÀ
(1, 0);

4022 
tcmsg
->
tcm_∑ª¡
 = 
TC_H_ROOT
;

4024 
îr‹
 = 
	`tc_å™ß˘
(&
ªque°
, 
NULL
);

4025 i‡(
îr‹
 =
EINVAL
) {

4028 
îr‹
 = 0;

4030 i‡(!
îr‹
 && 
√tdev_dev
->
tc
) {

4031 i‡(
√tdev_dev
->
tc
->
›s
->
tc_de°roy
) {

4032 
√tdev_dev
->
tc
->
›s
->
	`tc_de°roy
(netdev_dev->tc);

4034 
√tdev_dev
->
tc
 = 
NULL
;

4036  
îr‹
;

4037 
	}
}

4043 
	$tc_quîy_qdisc
(c⁄° 
√tdev
 *netdev)

4045 
√tdev_dev_löux
 *
√tdev_dev
 =

4046 
	`√tdev_dev_löux_ˇ°
(
	`√tdev_gë_dev
(
√tdev
));

4047 
oÂbuf
 
ªque°
, *
qdisc
;

4048 c⁄° 
tc_›s
 *
›s
;

4049 
tcmsg
 *tcmsg;

4050 
lﬂd_îr‹
;

4051 
îr‹
;

4053 i‡(
√tdev_dev
->
tc
) {

4071 
tcmsg
 = 
	`tc_make_ªque°
(
√tdev
, 
RTM_GETQDISC
, 
NLM_F_ECHO
, &
ªque°
);

4072 i‡(!
tcmsg
) {

4073  
ENODEV
;

4075 
tcmsg
->
tcm_h™dÀ
 = 
	`tc_make_h™dÀ
(1, 0);

4076 
tcmsg
->
tcm_∑ª¡
 = 0;

4079 
îr‹
 = 
	`tc_å™ß˘
(&
ªque°
, &
qdisc
);

4080 i‡(!
îr‹
) {

4081 c⁄° *
köd
;

4083 
îr‹
 = 
	`tc_∑r£_qdisc
(
qdisc
, &
köd
, 
NULL
);

4084 i‡(
îr‹
) {

4085 
›s
 = &
tc_›s_Ÿhî
;

4087 
›s
 = 
	`tc_lookup_löux_«me
(
köd
);

4088 i‡(!
›s
) {

4089 
vlog_øã_limô
 
æ2
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 1);

4090 
	`VLOG_INFO_RL
(&
æ2
, "unknow¿qdis¯\"%s\"", 
köd
);

4092 
›s
 = &
tc_›s_Ÿhî
;

4095 } i‡(
îr‹
 =
ENOENT
) {

4099 
›s
 = &
tc_›s_deÁu…
;

4100 
îr‹
 = 0;

4103 
	`VLOG_WARN_RL
(&
æ
, "query %s qdisc failed (%s)",

4104 
	`√tdev_gë_«me
(
√tdev
), 
	`°ªº‹
(
îr‹
));

4105 
›s
 = &
tc_›s_Ÿhî
;

4109 
lﬂd_îr‹
 = 
›s
->
	`tc_lﬂd
(
	`CONST_CAST
(
√tdev
 *,Çëdev), 
qdisc
);

4110 
	`as£π
((
lﬂd_îr‹
 =0Ë=(
√tdev_dev
->
tc
 !
NULL
));

4111 
	`oÂbuf_dñëe
(
qdisc
);

4113  
îr‹
 ?Éº‹ : 
lﬂd_îr‹
;

4114 
	}
}

4125 
	$tc_ˇlc_˚Œ_log
(
mtu
)

4127 
˚Œ_log
;

4129 i‡(!
mtu
) {

4130 
mtu
 = 
ETH_PAYLOAD_MAX
;

4132 
mtu
 +
ETH_HEADER_LEN
 + 
VLAN_HEADER_LEN
;

4134 
˚Œ_log
 = 0; 
mtu
 >= 256; cell_log++) {

4135 
mtu
 >>= 1;

4138  
˚Œ_log
;

4139 
	}
}

4144 
	$tc_fûl_øã
(
tc_øã•ec
 *
øã
, 
uöt64_t
 
Bps
, 
mtu
)

4146 
	`mem£t
(
øã
, 0,  *rate);

4147 
øã
->
˚Œ_log
 = 
	`tc_ˇlc_˚Œ_log
(
mtu
);

4150 
øã
->
mpu
 = 
ETH_TOTAL_MIN
;

4151 
øã
->øã = 
Bps
;

4152 
	}
}

4159 
	$tc_put_πab
(
oÂbuf
 *
msg
, 
uöt16_t
 
ty≥
, c⁄° 
tc_øã•ec
 *
øã
)

4161 
uöt32_t
 *
πab
;

4162 
i
;

4164 
πab
 = 
	`∆_msg_put_un•ec_unöô
(
msg
, 
ty≥
, 
TC_RTAB_SIZE
);

4165 
i
 = 0; i < 
TC_RTAB_SIZE
 /  *
πab
; i++) {

4166 
∑ckë_size
 = (
i
 + 1Ë<< 
øã
->
˚Œ_log
;

4167 i‡(
∑ckë_size
 < 
øã
->
mpu
) {

4168 
∑ckë_size
 = 
øã
->
mpu
;

4170 
πab
[
i
] = 
	`tc_byãs_to_ticks
(
øã
->øã, 
∑ckë_size
);

4172 
	}
}

4179 
	$tc_ˇlc_buf„r
(
Bps
, 
mtu
, 
uöt64_t
 
bur°_byãs
)

4181 
mö_bur°
 = 
	`tc_buf„r_≥r_jiffy
(
Bps
Ë+ 
mtu
;

4182  
	`tc_byãs_to_ticks
(
Bps
, 
	`MAX
(
bur°_byãs
, 
mö_bur°
));

4183 
	}
}

4189 
	$√tdev_löux_gë_af_öë_sock
()

4191 
îr‹
 = 
	`√tdev_löux_öô
();

4192  
îr‹
 ? -îr‹ : 
af_öë_sock
;

4193 
	}
}

4198 
	$√tdev_löux_ëhtoﬁ_£t_Êag
(
√tdev
 *√tdev, 
uöt32_t
 
Êag
,

4199 c⁄° *
Êag_«me
, 
boﬁ
 
íabÀ
)

4201 c⁄° *
√tdev_«me
 = 
	`√tdev_gë_«me
(
√tdev
);

4202 
ëhtoﬁ_vÆue
 
evÆue
;

4203 
uöt32_t
 
√w_Êags
;

4204 
îr‹
;

4206 
	`COVERAGE_INC
(
√tdev_gë_ëhtoﬁ
);

4207 
	`mem£t
(&
evÆue
, 0, Évalue);

4208 
îr‹
 = 
	`√tdev_löux_do_ëhtoﬁ
(
√tdev_«me
,

4209 (
ëhtoﬁ_cmd
 *)&
evÆue
,

4210 
ETHTOOL_GFLAGS
, "ETHTOOL_GFLAGS");

4211 i‡(
îr‹
) {

4212  
îr‹
;

4215 
	`COVERAGE_INC
(
√tdev_£t_ëhtoﬁ
);

4216 
evÆue
.
d©a
 = 
√w_Êags
 = (evÆue.d©®& ~
Êag
Ë| (
íabÀ
 ? flag : 0);

4217 
îr‹
 = 
	`√tdev_löux_do_ëhtoﬁ
(
√tdev_«me
,

4218 (
ëhtoﬁ_cmd
 *)&
evÆue
,

4219 
ETHTOOL_SFLAGS
, "ETHTOOL_SFLAGS");

4220 i‡(
îr‹
) {

4221  
îr‹
;

4224 
	`COVERAGE_INC
(
√tdev_gë_ëhtoﬁ
);

4225 
	`mem£t
(&
evÆue
, 0, Évalue);

4226 
îr‹
 = 
	`√tdev_löux_do_ëhtoﬁ
(
√tdev_«me
,

4227 (
ëhtoﬁ_cmd
 *)&
evÆue
,

4228 
ETHTOOL_GFLAGS
, "ETHTOOL_GFLAGS");

4229 i‡(
îr‹
) {

4230  
îr‹
;

4233 i‡(
√w_Êags
 !
evÆue
.
d©a
) {

4234 
	`VLOG_WARN_RL
(&
æ
, "attemptÅo %sÉthtool %s flag onÇetwork "

4235 "devi˚ %†Áûed", 
íabÀ
 ? "enable" : "disable",

4236 
Êag_«me
, 
√tdev_«me
);

4237  
EOPNOTSUPP
;

4241 
	}
}

4247 
	$√tdev_°©s_‰om_π∆_lök_°©s
(
√tdev_°©s
 *
d°
,

4248 c⁄° 
π∆_lök_°©s
 *
§c
)

4250 
d°
->
rx_∑ckës
 = 
§c
->rx_packets;

4251 
d°
->
tx_∑ckës
 = 
§c
->tx_packets;

4252 
d°
->
rx_byãs
 = 
§c
->rx_bytes;

4253 
d°
->
tx_byãs
 = 
§c
->tx_bytes;

4254 
d°
->
rx_îr‹s
 = 
§c
->rx_errors;

4255 
d°
->
tx_îr‹s
 = 
§c
->tx_errors;

4256 
d°
->
rx_dr›≥d
 = 
§c
->rx_dropped;

4257 
d°
->
tx_dr›≥d
 = 
§c
->tx_dropped;

4258 
d°
->
mu…iˇ°
 = 
§c
->multicast;

4259 
d°
->
cﬁlisi⁄s
 = 
§c
->collisions;

4260 
d°
->
rx_Àngth_îr‹s
 = 
§c
->rx_length_errors;

4261 
d°
->
rx_ovî_îr‹s
 = 
§c
->rx_over_errors;

4262 
d°
->
rx_¸c_îr‹s
 = 
§c
->rx_crc_errors;

4263 
d°
->
rx_‰ame_îr‹s
 = 
§c
->rx_frame_errors;

4264 
d°
->
rx_fifo_îr‹s
 = 
§c
->rx_fifo_errors;

4265 
d°
->
rx_mis£d_îr‹s
 = 
§c
->rx_missed_errors;

4266 
d°
->
tx_ab‹ãd_îr‹s
 = 
§c
->tx_aborted_errors;

4267 
d°
->
tx_ˇºõr_îr‹s
 = 
§c
->tx_carrier_errors;

4268 
d°
->
tx_fifo_îr‹s
 = 
§c
->tx_fifo_errors;

4269 
d°
->
tx_hóπbót_îr‹s
 = 
§c
->tx_heartbeat_errors;

4270 
d°
->
tx_wödow_îr‹s
 = 
§c
->tx_window_errors;

4271 
	}
}

4274 
	$gë_°©s_vü_√éök
(
ifödex
, 
√tdev_°©s
 *
°©s
)

4280 c⁄° 
∆_pﬁicy
 
π∆gΩ_lök_pﬁicy
[] = {

4281 [
IFLA_IFNAME
] = { .
ty≥
 = 
NL_A_STRING
, .
›ti⁄Æ
 = 
Ál£
 },

4282 [
IFLA_STATS
] = { .
ty≥
 = 
NL_A_UNSPEC
, .
›ti⁄Æ
 = 
åue
,

4283 .
mö_Àn
 = (
π∆_lök_°©s
) },

4286 
oÂbuf
 
ªque°
;

4287 
oÂbuf
 *
ª∂y
;

4288 
iföfomsg
 *
ifi
;

4289 
∆©å
 *
©ås
[
	`ARRAY_SIZE
(
π∆gΩ_lök_pﬁicy
)];

4290 
îr‹
;

4292 
	`oÂbuf_öô
(&
ªque°
, 0);

4293 
	`∆_msg_put_∆msghdr
(&
ªque°
,  *
ifi
, 
RTM_GETLINK
, 
NLM_F_REQUEST
);

4294 
ifi
 = 
	`oÂbuf_put_zîos
(&
ªque°
,  *ifi);

4295 
ifi
->
ifi_Ámûy
 = 
PF_UNSPEC
;

4296 
ifi
->
ifi_ödex
 = 
ifödex
;

4297 
îr‹
 = 
	`∆_sock_å™ß˘
(
π∆_sock
, &
ªque°
, &
ª∂y
);

4298 
	`oÂbuf_unöô
(&
ªque°
);

4299 i‡(
îr‹
) {

4300  
îr‹
;

4303 i‡(!
	`∆_pﬁicy_∑r£
(
ª∂y
, 
NLMSG_HDRLEN
 + (
iföfomsg
),

4304 
π∆gΩ_lök_pﬁicy
,

4305 
©ås
, 
	`ARRAY_SIZE
(
π∆gΩ_lök_pﬁicy
))) {

4306 
	`oÂbuf_dñëe
(
ª∂y
);

4307  
EPROTO
;

4310 i‡(!
©ås
[
IFLA_STATS
]) {

4311 
	`VLOG_WARN_RL
(&
æ
, "RTM_GETLINKÑeplyÜacks stats");

4312 
	`oÂbuf_dñëe
(
ª∂y
);

4313  
EPROTO
;

4316 
	`√tdev_°©s_‰om_π∆_lök_°©s
(
°©s
, 
	`∆_©å_gë
(
©ås
[
IFLA_STATS
]));

4318 
	`oÂbuf_dñëe
(
ª∂y
);

4321 
	}
}

4324 
	$gë_°©s_vü_¥oc
(c⁄° *
√tdev_«me
, 
√tdev_°©s
 *
°©s
)

4326 c⁄° 
‚
[] = "/proc/net/dev";

4327 
löe
[1024];

4328 
FILE
 *
°ªam
;

4329 
 
;

4331 
°ªam
 = 
	`f›í
(
‚
, "r");

4332 i‡(!
°ªam
) {

4333 
	`VLOG_WARN_RL
(&
æ
, "%s: o≥¿Áûed: %s", 
‚
, 
	`°ªº‹
(
î∫o
));

4334  
î∫o
;

4337 
 
 = 0;

4338 
	`fgës
(
löe
, Üöe, 
°ªam
)) {

4339 i‡(++
 
 >= 3) {

4340 
dev«me
[16];

4341 
	#X64
 "%"
SCNu64


	)

4342 i‡(
	`ssˇnf
(
löe
,

4344 
X64
 X64 X64 X64 X64 X64 X64 "%*u"

4345 
X64
 X64 X64 X64 X64 X64 X64 "%*u",

4346 
dev«me
,

4347 &
°©s
->
rx_byãs
,

4348 &
°©s
->
rx_∑ckës
,

4349 &
°©s
->
rx_îr‹s
,

4350 &
°©s
->
rx_dr›≥d
,

4351 &
°©s
->
rx_fifo_îr‹s
,

4352 &
°©s
->
rx_‰ame_îr‹s
,

4353 &
°©s
->
mu…iˇ°
,

4354 &
°©s
->
tx_byãs
,

4355 &
°©s
->
tx_∑ckës
,

4356 &
°©s
->
tx_îr‹s
,

4357 &
°©s
->
tx_dr›≥d
,

4358 &
°©s
->
tx_fifo_îr‹s
,

4359 &
°©s
->
cﬁlisi⁄s
,

4360 &
°©s
->
tx_ˇºõr_îr‹s
) != 15) {

4361 
	`VLOG_WARN_RL
(&
æ
, "%s:%d:Ö¨£Éº‹", 
‚
, 
 
);

4362 } i‡(!
	`°rcmp
(
dev«me
, 
√tdev_«me
)) {

4363 
°©s
->
rx_Àngth_îr‹s
 = 
UINT64_MAX
;

4364 
°©s
->
rx_ovî_îr‹s
 = 
UINT64_MAX
;

4365 
°©s
->
rx_¸c_îr‹s
 = 
UINT64_MAX
;

4366 
°©s
->
rx_mis£d_îr‹s
 = 
UINT64_MAX
;

4367 
°©s
->
tx_ab‹ãd_îr‹s
 = 
UINT64_MAX
;

4368 
°©s
->
tx_hóπbót_îr‹s
 = 
UINT64_MAX
;

4369 
°©s
->
tx_wödow_îr‹s
 = 
UINT64_MAX
;

4370 
	`f˛o£
(
°ªam
);

4375 
	`VLOG_WARN_RL
(&
æ
, "%s:Çÿ°©†f‹ %s", 
‚
, 
√tdev_«me
);

4376 
	`f˛o£
(
°ªam
);

4377  
ENODEV
;

4378 
	}
}

4381 
	$gë_Êags
(c⁄° 
√tdev_dev
 *
dev
, *
Êags
)

4383 
i‰eq
 
i‰
;

4384 
îr‹
;

4386 *
Êags
 = 0;

4387 
îr‹
 = 
	`√tdev_löux_do_io˘l
(
dev
->
«me
, &
i‰
, 
SIOCGIFFLAGS
,

4389 i‡(!
îr‹
) {

4390 *
Êags
 = 
i‰
.
i‰_Êags
;

4392  
îr‹
;

4393 
	}
}

4396 
	$£t_Êags
(
√tdev
 *√tdev, 
Êags
)

4398 
i‰eq
 
i‰
;

4400 
i‰
.
i‰_Êags
 = 
Êags
;

4401  
	`√tdev_löux_do_io˘l
(
	`√tdev_gë_«me
(
√tdev
), &
i‰
, 
SIOCSIFFLAGS
,

4403 
	}
}

4406 
	$do_gë_ifödex
(c⁄° *
√tdev_«me
)

4408 
i‰eq
 
i‰
;

4410 
	`ovs_°rz˝y
(
i‰
.
i‰_«me
, 
√tdev_«me
,  ifr.ifr_name);

4411 
	`COVERAGE_INC
(
√tdev_gë_ifödex
);

4412 i‡(
	`io˘l
(
af_öë_sock
, 
SIOCGIFINDEX
, &
i‰
) < 0) {

4413 
	`VLOG_WARN_RL
(&
æ
, "ioctl(SIOCGIFINDEX) on %s device failed: %s",

4414 
√tdev_«me
, 
	`°ªº‹
(
î∫o
));

4415  -
î∫o
;

4417  
i‰
.
i‰_ifödex
;

4418 
	}
}

4421 
	$gë_ifödex
(c⁄° 
√tdev
 *
√tdev_
, *
ifödexp
)

4423 
√tdev_dev_löux
 *
√tdev_dev
 =

4424 
	`√tdev_dev_löux_ˇ°
(
	`√tdev_gë_dev
(
√tdev_
));

4426 i‡(!(
√tdev_dev
->
ˇche_vÆid
 & 
VALID_IFINDEX
)) {

4427 
ifödex
 = 
	`do_gë_ifödex
(
	`√tdev_gë_«me
(
√tdev_
));

4429 i‡(
ifödex
 < 0) {

4430 
√tdev_dev
->
gë_ifödex_îr‹
 = -
ifödex
;

4431 
√tdev_dev
->
ifödex
 = 0;

4433 
√tdev_dev
->
gë_ifödex_îr‹
 = 0;

4434 
√tdev_dev
->
ifödex
 = ifindex;

4436 
√tdev_dev
->
ˇche_vÆid
 |
VALID_IFINDEX
;

4439 *
ifödexp
 = 
√tdev_dev
->
ifödex
;

4440  
√tdev_dev
->
gë_ifödex_îr‹
;

4441 
	}
}

4444 
	$gë_ëhîaddr
(c⁄° *
√tdev_«me
, 
uöt8_t
 
ó
[
ETH_ADDR_LEN
])

4446 
i‰eq
 
i‰
;

4447 
hwaddr_Ámûy
;

4449 
	`mem£t
(&
i‰
, 0,  ifr);

4450 
	`ovs_°rz˝y
(
i‰
.
i‰_«me
, 
√tdev_«me
,  ifr.ifr_name);

4451 
	`COVERAGE_INC
(
√tdev_gë_hwaddr
);

4452 i‡(
	`io˘l
(
af_öë_sock
, 
SIOCGIFHWADDR
, &
i‰
) < 0) {

4456 
	`VLOG
(
î∫o
 =
ENODEV
 ? 
VLL_INFO
 : 
VLL_ERR
,

4458 
√tdev_«me
, 
	`°ªº‹
(
î∫o
));

4459  
î∫o
;

4461 
hwaddr_Ámûy
 = 
i‰
.
i‰_hwaddr
.
ß_Ámûy
;

4462 i‡(
hwaddr_Ámûy
 !
AF_UNSPEC
 && hwaddr_Ámûy !
ARPHRD_ETHER
) {

4463 
	`VLOG_WARN
("%s device has unknown hardwareáddress family %d",

4464 
√tdev_«me
, 
hwaddr_Ámûy
);

4466 
	`mem˝y
(
ó
, 
i‰
.
i‰_hwaddr
.
ß_d©a
, 
ETH_ADDR_LEN
);

4468 
	}
}

4471 
	$£t_ëhîaddr
(c⁄° *
√tdev_«me
,

4472 c⁄° 
uöt8_t
 
mac
[
ETH_ADDR_LEN
])

4474 
i‰eq
 
i‰
;

4476 
	`mem£t
(&
i‰
, 0,  ifr);

4477 
	`ovs_°rz˝y
(
i‰
.
i‰_«me
, 
√tdev_«me
,  ifr.ifr_name);

4478 
i‰
.
i‰_hwaddr
.
ß_Ámûy
 = 
ARPHRD_ETHER
;

4479 
	`mem˝y
(
i‰
.
i‰_hwaddr
.
ß_d©a
, 
mac
, 
ETH_ADDR_LEN
);

4480 
	`COVERAGE_INC
(
√tdev_£t_hwaddr
);

4481 i‡(
	`io˘l
(
af_öë_sock
, 
SIOCSIFHWADDR
, &
i‰
) < 0) {

4482 
	`VLOG_ERR
("ioctl(SIOCSIFHWADDR) on %s device failed: %s",

4483 
√tdev_«me
, 
	`°ªº‹
(
î∫o
));

4484  
î∫o
;

4487 
	}
}

4490 
	$√tdev_löux_do_ëhtoﬁ
(c⁄° *
«me
, 
ëhtoﬁ_cmd
 *
ecmd
,

4491 
cmd
, c⁄° *
cmd_«me
)

4493 
i‰eq
 
i‰
;

4495 
	`mem£t
(&
i‰
, 0,  ifr);

4496 
	`ovs_°rz˝y
(
i‰
.
i‰_«me
, 
«me
,  ifr.ifr_name);

4497 
i‰
.
i‰_d©a
 = (
ˇddr_t
Ë
ecmd
;

4499 
ecmd
->
cmd
 = cmd;

4500 i‡(
	`io˘l
(
af_öë_sock
, 
SIOCETHTOOL
, &
i‰
) == 0) {

4503 i‡(
î∫o
 !
EOPNOTSUPP
) {

4504 
	`VLOG_WARN_RL
(&
æ
, "ethtool command %s onÇetwork device %s "

4505 "Áûed: %s", 
cmd_«me
, 
«me
, 
	`°ªº‹
(
î∫o
));

4510  
î∫o
;

4512 
	}
}

4515 
	$√tdev_löux_do_io˘l
(c⁄° *
«me
, 
i‰eq
 *
i‰
, 
cmd
,

4516 c⁄° *
cmd_«me
)

4518 
	`ovs_°rz˝y
(
i‰
->
i‰_«me
, 
«me
,  ifr->ifr_name);

4519 i‡(
	`io˘l
(
af_öë_sock
, 
cmd
, 
i‰
) == -1) {

4520 
	`VLOG_DBG_RL
(&
æ
, "%s: io˘l(%sËÁûed: %s", 
«me
, 
cmd_«me
,

4521 
	`°ªº‹
(
î∫o
));

4522  
î∫o
;

4525 
	}
}

4528 
	$√tdev_löux_gë_ùv4
(c⁄° 
√tdev
 *√tdev, 
ö_addr
 *
ù
,

4529 
cmd
, c⁄° *
cmd_«me
)

4531 
i‰eq
 
i‰
;

4532 
îr‹
;

4534 
i‰
.
i‰_addr
.
ß_Ámûy
 = 
AF_INET
;

4535 
îr‹
 = 
	`√tdev_löux_do_io˘l
(
	`√tdev_gë_«me
(
√tdev
), &
i‰
, 
cmd
, 
cmd_«me
);

4536 i‡(!
îr‹
) {

4537 c⁄° 
sockaddr_ö
 *
sö
 = (sockaddr_ö *Ë&
i‰
.
i‰_addr
;

4538 *
ù
 = 
sö
->
sö_addr
;

4540  
îr‹
;

4541 
	}
}

4545 
	$af_∑ckë_sock
()

4547 
sock
 = 
INT_MIN
;

4549 i‡(
sock
 =
INT_MIN
) {

4550 
sock
 = 
	`sockë
(
AF_PACKET
, 
SOCK_RAW
, 0);

4551 i‡(
sock
 >= 0) {

4552 
	`£t_n⁄blockög
(
sock
);

4554 
sock
 = -
î∫o
;

4555 
	`VLOG_ERR
("ÁûedÅÿ¸óãÖackë sockë: %s", 
	`°ªº‹
(
î∫o
));

4559  
sock
;

4560 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/netdev-linux.h

17 #i‚de‡
NETDEV_LINUX_H


18 
	#NETDEV_LINUX_H
 1

	)

20 
	~<°döt.h
>

21 
	~<°dboﬁ.h
>

26 
	g√tdev
;

27 
	g√tdev_°©s
;

28 
	gπ∆_lök_°©s
;

30 
√tdev_löux_ëhtoﬁ_£t_Êag
(
√tdev
 *√tdev, 
uöt32_t
 
Êag
,

31 c⁄° *
Êag_«me
, 
boﬁ
 
íabÀ
);

32 
√tdev_löux_gë_af_öë_sock
();

	@/home/lsch/mytest/openvswitch-1.9.0/lib/netdev-provider.h

17 #i‚de‡
NETDEV_PROVIDER_H


18 
	#NETDEV_PROVIDER_H
 1

	)

22 
	~<as£π.h
>

24 
	~"√tdev.h
"

25 
	~"li°.h
"

26 
	~"shash.h
"

27 
	~"sm≠.h
"

29 #ifde‡ 
__˝lu•lus


37 
	s√tdev_dev
 {

38 *
«me
;

39 c⁄° 
√tdev_˛ass
 *netdev_class;

41 
ªf_˙t
;

42 
shash_node
 *
node
;

45 
√tdev_dev_öô
(
√tdev_dev
 *, c⁄° *
«me
,

46 c⁄° 
√tdev_˛ass
 *);

47 
√tdev_dev_unöô
(
√tdev_dev
 *, 
boﬁ
 
de°roy
);

48 c⁄° *
√tdev_dev_gë_ty≥
(c⁄° 
√tdev_dev
 *);

49 c⁄° 
√tdev_˛ass
 *
√tdev_dev_gë_˛ass
(c⁄° 
√tdev_dev
 *);

50 c⁄° *
√tdev_dev_gë_«me
(c⁄° 
√tdev_dev
 *);

51 
√tdev_dev
 *
√tdev_dev_‰om_«me
(c⁄° *
«me
);

52 
√tdev_dev_gë_devi˚s
(c⁄° 
√tdev_˛ass
 *,

53 
shash
 *
devi˚_li°
);

55 
ölöe
 
√tdev_dev_as£π_˛ass
(c⁄° 
√tdev_dev
 *netdev_dev,

56 c⁄° 
√tdev_˛ass
 *
˛ass_
)

58 
as£π
(
√tdev_dev
->
√tdev_˛ass
 =
˛ass_
);

65 
	s√tdev
 {

66 
√tdev_dev
 *netdev_dev;

67 
li°
 
node
;

69 
√tdev_Êags
 
ßve_Êags
;

70 
√tdev_Êags
 
ch™ged_Êags
;

73 
√tdev_öô
(
√tdev
 *, 
√tdev_dev
 *);

74 
√tdev_unöô
(
√tdev
 *, 
boﬁ
 
˛o£
);

75 
√tdev_dev
 *
√tdev_gë_dev
(c⁄° 
√tdev
 *);

77 
ölöe
 
√tdev_as£π_˛ass
(c⁄° 
√tdev
 *netdev,

78 c⁄° 
√tdev_˛ass
 *netdev_class)

80 
√tdev_dev_as£π_˛ass
(
√tdev_gë_dev
(
√tdev
), 
√tdev_˛ass
);

88 
	s√tdev_˛ass
 {

95 c⁄° *
ty≥
;

103 (*
öô
)();

107 (*
run
)();

114 (*
waô
)();

118 (*
¸óã
)(c⁄° 
√tdev_˛ass
 *√tdev_˛ass, c⁄° *
«me
,

119 
√tdev_dev
 **
√tdev_devp
);

127 (*
de°roy
)(
√tdev_dev
 *netdev_dev);

134 (*
gë_c⁄fig
)(
√tdev_dev
 *√tdev_dev, 
sm≠
 *
¨gs
);

140 (*
£t_c⁄fig
)(
√tdev_dev
 *√tdev_dev, c⁄° 
sm≠
 *
¨gs
);

144 (*
›í
)(
√tdev_dev
 *√tdev_dev, 
√tdev
 **
√tdevp
);

147 (*
˛o£
)(
√tdev
 *netdev);

169 (*
li°í
)(
√tdev
 *netdev);

184 (*
ªcv
)(
√tdev
 *√tdev, *
buf„r
, 
size_t
 
size
);

192 (*
ªcv_waô
)(
√tdev
 *netdev);

198 (*
døö
)(
√tdev
 *netdev);

218 (*
£nd
)(
√tdev
 *√tdev, c⁄° *
buf„r
, 
size_t
 
size
);

230 (*
£nd_waô
)(
√tdev
 *netdev);

233 (*
£t_ëhîaddr
)(
√tdev
 *√tdev, c⁄° 
uöt8_t
 
mac
[6]);

239 (*
gë_ëhîaddr
)(c⁄° 
√tdev
 *√tdev, 
uöt8_t
 
mac
[6]);

250 (*
gë_mtu
)(c⁄° 
√tdev
 *√tdev, *
mtup
);

257 (*
£t_mtu
)(c⁄° 
√tdev
 *√tdev, 
mtu
);

270 (*
gë_ifödex
)(c⁄° 
√tdev
 *netdev);

278 (*
gë_ˇºõr
)(c⁄° 
√tdev
 *√tdev, 
boﬁ
 *
ˇºõr
);

284 (*
gë_ˇºõr_ª£ts
)(c⁄° 
√tdev
 *netdev);

296 (*
£t_miim⁄_öãrvÆ
)(
√tdev
 *√tdev, 
öãrvÆ
);

303 (*
gë_°©s
)(c⁄° 
√tdev
 *√tdev, 
√tdev_°©s
 *);

311 (*
£t_°©s
)(
√tdev
 *√tdev, c⁄° 
√tdev_°©s
 *);

319 (*
gë_„©uªs
)(c⁄° 
√tdev
 *netdev,

320 
√tdev_„©uªs
 *
cuºít
,

321 
√tdev_„©uªs
 *
advîti£d
,

322 
√tdev_„©uªs
 *
suµ‹ãd
,

323 
√tdev_„©uªs
 *
≥î
);

330 (*
£t_advîti£míts
)(
√tdev
 *netdev,

331 
√tdev_„©uªs
 
advîti£
);

338 (*
£t_pﬁicög
)(
√tdev
 *√tdev, 
kbôs_øã
,

339 
kbôs_bur°
);

354 (*
gë_qos_ty≥s
)(c⁄° 
√tdev
 *√tdev, 
s£t
 *
ty≥s
);

361 (*
gë_qos_ˇ∑bûôõs
)(c⁄° 
√tdev
 *netdev,

362 c⁄° *
ty≥
,

363 
√tdev_qos_ˇ∑bûôõs
 *
ˇps
);

384 (*
gë_qos
)(c⁄° 
√tdev
 *netdev,

385 c⁄° **
ty≥p
, 
sm≠
 *
dëaûs
);

404 (*
£t_qos
)(
√tdev
 *netdev,

405 c⁄° *
ty≥
, c⁄° 
sm≠
 *
dëaûs
);

423 (*
gë_queue
)(c⁄° 
√tdev
 *netdev,

424 
queue_id
, 
sm≠
 *
dëaûs
);

443 (*
£t_queue
)(
√tdev
 *netdev,

444 
queue_id
, c⁄° 
sm≠
 *
dëaûs
);

456 (*
dñëe_queue
)(
√tdev
 *√tdev, 
queue_id
);

463 (*
gë_queue_°©s
)(c⁄° 
√tdev
 *√tdev, 
queue_id
,

464 
√tdev_queue_°©s
 *
°©s
);

477 (*
dump_queues
)(c⁄° 
√tdev
 *netdev,

478 (*
cb
)(
queue_id
,

479 c⁄° 
sm≠
 *
dëaûs
,

480 *
aux
),

481 *
aux
);

489 (*
dump_queue_°©s
)(c⁄° 
√tdev
 *netdev,

490 (*
cb
)(
queue_id
,

491 
√tdev_queue_°©s
 *,

492 *
aux
),

493 *
aux
);

506 (*
gë_ö4
)(c⁄° 
√tdev
 *√tdev, 
ö_addr
 *
addªss
,

507 
ö_addr
 *
√tmask
);

514 (*
£t_ö4
)(
√tdev
 *√tdev, 
ö_addr
 
addr
,

515 
ö_addr
 
mask
);

527 (*
gë_ö6
)(c⁄° 
√tdev
 *√tdev, 
ö6_addr
 *
ö6
);

534 (*
add_rouãr
)(
√tdev
 *√tdev, 
ö_addr
 
rouãr
);

544 (*
gë_√xt_h›
)(c⁄° 
ö_addr
 *
ho°
, ö_add∏*
√xt_h›
,

545 **
√tdev_«me
);

558 (*
gë_drv_öfo
)(c⁄° 
√tdev
 *√tdev, 
sm≠
 *smap);

567 (*
¨p_lookup
)(c⁄° 
√tdev
 *√tdev, 
ovs_be32
 
ù
,

568 
uöt8_t
 
mac
[6]);

577 (*
upd©e_Êags
)(
√tdev
 *√tdev, 
√tdev_Êags
 
off
,

578 
√tdev_Êags
 
⁄
, √tdev_Êag†*
ﬁd_Êags
);

589 (*
ch™ge_£q
)(c⁄° 
√tdev
 *netdev);

592 
√tdev_ªgi°î_¥ovidî
(c⁄° 
√tdev_˛ass
 *);

593 
√tdev_uƒegi°î_¥ovidî
(c⁄° *
ty≥
);

594 c⁄° 
√tdev_˛ass
 *
√tdev_lookup_¥ovidî
(c⁄° *
ty≥
);

596 c⁄° 
√tdev_˛ass
 
√tdev_löux_˛ass
;

597 c⁄° 
√tdev_˛ass
 
√tdev_öã∫Æ_˛ass
;

598 c⁄° 
√tdev_˛ass
 
√tdev_èp_˛ass
;

599 #ifde‡
__FªeBSD__


600 c⁄° 
√tdev_˛ass
 
√tdev_bsd_˛ass
;

603 #ifde‡ 
__˝lu•lus


	@/home/lsch/mytest/openvswitch-1.9.0/lib/netdev-vport.c

17 
	~<c⁄fig.h
>

19 
	~"√tdev-vp‹t.h
"

21 
	~<î∫o.h
>

22 
	~<f˙é.h
>

23 
	~<sys/sockë.h
>

24 
	~<löux/›ívswôch.h
>

25 
	~<löux/π√éök.h
>

26 
	~<√t/if.h
>

27 
	~<sys/io˘l.h
>

29 
	~"byã-‹dî.h
"

30 
	~"d´m⁄.h
"

31 
	~"dús.h
"

32 
	~"dpif-löux.h
"

33 
	~"hash.h
"

34 
	~"hm≠.h
"

35 
	~"li°.h
"

36 
	~"√tdev-löux.h
"

37 
	~"√tdev-¥ovidî.h
"

38 
	~"√éök.h
"

39 
	~"√éök-nŸifõr.h
"

40 
	~"√éök-sockë.h
"

41 
	~"oÂbuf.h
"

42 
	~"›ívswôch/tu¬ñ.h
"

43 
	~"∑ckës.h
"

44 
	~"rouã-èbÀ.h
"

45 
	~"shash.h
"

46 
	~"sockë-utû.h
"

47 
	~"u«lig√d.h
"

48 
	~"vlog.h
"

50 
VLOG_DEFINE_THIS_MODULE
(
√tdev_vp‹t
);

52 
	s√tdev_dev_vp‹t
 {

53 
√tdev_dev
 
	m√tdev_dev
;

54 
oÂbuf
 *
	m›ti⁄s
;

55 
	mdp_ifödex
;

56 
uöt32_t
 
	mp‹t_no
;

57 
	mch™ge_£q
;

60 
	s√tdev_vp‹t
 {

61 
√tdev
 
	m√tdev
;

64 
	svp‹t_˛ass
 {

65 
ovs_vp‹t_ty≥
 
	mty≥
;

66 
√tdev_˛ass
 
	m√tdev_˛ass
;

67 (*
	m∑r£_c⁄fig
)(c⁄° *
	m«me
, c⁄° *
	mty≥
,

68 c⁄° 
sm≠
 *
	m¨gs
, 
oÂbuf
 *
	m›ti⁄s
);

69 (*
	mu≈¨£_c⁄fig
)(c⁄° *
	m«me
, c⁄° *
	mty≥
,

70 c⁄° 
∆©å
 *
	m›ti⁄s
, 
size_t
 
	m›ti⁄s_Àn
,

71 
sm≠
 *
	m¨gs
);

74 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(5, 20);

76 
√tdev_vp‹t_¸óã
(c⁄° 
√tdev_˛ass
 *, const *,

77 
√tdev_dev
 **);

78 
√tdev_vp‹t_pﬁl_nŸify
(c⁄° 
√tdev
 *);

79 
äl_p‹t_c⁄fig_‰om_∆©å
(c⁄° 
∆©å
 *
›ti⁄s
,

80 
size_t
 
›ti⁄s_Àn
,

81 
∆©å
 *
a
[
OVS_TUNNEL_ATTR_MAX
 + 1]);

83 c⁄° *
√tdev_vp‹t_gë_äl_iÁ˚
(c⁄° 
√tdev
 *netdev);

85 
boﬁ


86 
	$is_vp‹t_˛ass
(c⁄° 
√tdev_˛ass
 *
˛ass
)

88  
˛ass
->
¸óã
 =
√tdev_vp‹t_¸óã
;

89 
	}
}

91 c⁄° 
vp‹t_˛ass
 *

92 
	$vp‹t_˛ass_ˇ°
(c⁄° 
√tdev_˛ass
 *
˛ass
)

94 
	`as£π
(
	`is_vp‹t_˛ass
(
˛ass
));

95  
	`CONTAINER_OF
(
˛ass
, 
vp‹t_˛ass
, 
√tdev_˛ass
);

96 
	}
}

98 
√tdev_dev_vp‹t
 *

99 
	$√tdev_dev_vp‹t_ˇ°
(c⁄° 
√tdev_dev
 *netdev_dev)

101 
	`as£π
(
	`is_vp‹t_˛ass
(
	`√tdev_dev_gë_˛ass
(
√tdev_dev
)));

102  
	`CONTAINER_OF
(
√tdev_dev
, 
√tdev_dev_vp‹t
,Çetdev_dev);

103 
	}
}

105 
√tdev_vp‹t
 *

106 
	$√tdev_vp‹t_ˇ°
(c⁄° 
√tdev
 *netdev)

108 
√tdev_dev
 *√tdev_dev = 
	`√tdev_gë_dev
(
√tdev
);

109 
	`as£π
(
	`is_vp‹t_˛ass
(
	`√tdev_dev_gë_˛ass
(
√tdev_dev
)));

110  
	`CONTAINER_OF
(
√tdev
, 
√tdev_vp‹t
,Çetdev);

111 
	}
}

116 c⁄° 
oÂbuf
 *

117 
	$√tdev_vp‹t_gë_›ti⁄s
(c⁄° 
√tdev
 *netdev)

119 c⁄° 
√tdev_dev
 *
dev
 = 
	`√tdev_gë_dev
(
√tdev
);

121  (
	`is_vp‹t_˛ass
(
	`√tdev_dev_gë_˛ass
(
dev
))

122 ? 
	`√tdev_dev_vp‹t_ˇ°
(
dev
)->
›ti⁄s


123 : 
NULL
);

124 
	}
}

126 
ovs_vp‹t_ty≥


127 
	$√tdev_vp‹t_gë_vp‹t_ty≥
(c⁄° 
√tdev
 *netdev)

129 c⁄° 
√tdev_dev
 *
dev
 = 
	`√tdev_gë_dev
(
√tdev
);

130 c⁄° 
√tdev_˛ass
 *
˛ass
 = 
	`√tdev_dev_gë_˛ass
(
dev
);

132  (
	`is_vp‹t_˛ass
(
˛ass
Ë? 
	`vp‹t_˛ass_ˇ°
(˛ass)->
ty≥


133 : 
˛ass
 =&
√tdev_öã∫Æ_˛ass
 ? 
OVS_VPORT_TYPE_INTERNAL


134 : (
˛ass
 =&
√tdev_löux_˛ass
 ||

135 
˛ass
 =&
√tdev_èp_˛ass
Ë? 
OVS_VPORT_TYPE_NETDEV


136 : 
OVS_VPORT_TYPE_UNSPEC
);

137 
	}
}

139 
uöt32_t


140 
	$gë_u32_‹_zîo
(c⁄° 
∆©å
 *
a
)

142  
a
 ? 
	`∆_©å_gë_u32
(a) : 0;

143 
	}
}

146 
	$√tdev_vp‹t_gë_√tdev_ty≥
(c⁄° 
dpif_löux_vp‹t
 *
vp‹t
)

148 
∆©å
 *
a
[
OVS_TUNNEL_ATTR_MAX
 + 1];

150 
vp‹t
->
ty≥
) {

151 
OVS_VPORT_TYPE_UNSPEC
:

154 
OVS_VPORT_TYPE_NETDEV
:

157 
OVS_VPORT_TYPE_INTERNAL
:

160 
OVS_VPORT_TYPE_PATCH
:

163 
OVS_VPORT_TYPE_GRE
:

164 i‡(
	`äl_p‹t_c⁄fig_‰om_∆©å
(
vp‹t
->
›ti⁄s
, vp‹t->
›ti⁄s_Àn
,

165 
a
)) {

168  (
	`gë_u32_‹_zîo
(
a
[
OVS_TUNNEL_ATTR_FLAGS
]Ë& 
TNL_F_IPSEC


171 
OVS_VPORT_TYPE_GRE64
:

172 i‡(
	`äl_p‹t_c⁄fig_‰om_∆©å
(
vp‹t
->
›ti⁄s
, vp‹t->
›ti⁄s_Àn
,

173 
a
)) {

176  (
	`gë_u32_‹_zîo
(
a
[
OVS_TUNNEL_ATTR_FLAGS
]Ë& 
TNL_F_IPSEC


179 
OVS_VPORT_TYPE_CAPWAP
:

182 
OVS_VPORT_TYPE_FT_GRE
:

183 
__OVS_VPORT_TYPE_MAX
:

187 
	`VLOG_WARN_RL
(&
æ
, "dp%d:Öort `%s' has unsupportedÅype %u",

188 
vp‹t
->
dp_ifödex
, vp‹t->
«me
, (Ëvp‹t->
ty≥
);

190 
	}
}

193 
	$√tdev_vp‹t_¸óã
(c⁄° 
√tdev_˛ass
 *√tdev_˛ass, c⁄° *
«me
,

194 
√tdev_dev
 **
√tdev_devp
)

196 
√tdev_dev_vp‹t
 *
dev
;

198 
dev
 = 
	`xmÆloc
( *dev);

199 
	`√tdev_dev_öô
(&
dev
->
√tdev_dev
, 
«me
, 
√tdev_˛ass
);

200 
dev
->
›ti⁄s
 = 
NULL
;

201 
dev
->
dp_ifödex
 = -1;

202 
dev
->
p‹t_no
 = 
UINT32_MAX
;

203 
dev
->
ch™ge_£q
 = 1;

205 *
√tdev_devp
 = &
dev
->
√tdev_dev
;

206 
	`rouã_èbÀ_ªgi°î
();

209 
	}
}

212 
	$√tdev_vp‹t_de°roy
(
√tdev_dev
 *
√tdev_dev_
)

214 
√tdev_dev_vp‹t
 *
√tdev_dev
 = 
	`√tdev_dev_vp‹t_ˇ°
(
√tdev_dev_
);

216 
	`oÂbuf_dñëe
(
√tdev_dev
->
›ti⁄s
);

217 
	`rouã_èbÀ_uƒegi°î
();

218 
	`‰ì
(
√tdev_dev
);

219 
	}
}

222 
	$√tdev_vp‹t_›í
(
√tdev_dev
 *
√tdev_dev_
, 
√tdev
 **
√tdevp
)

224 
√tdev_vp‹t
 *
√tdev
;

226 
√tdev
 = 
	`xmÆloc
( *netdev);

227 
	`√tdev_öô
(&
√tdev
->√tdev, 
√tdev_dev_
);

229 *
√tdevp
 = &
√tdev
->netdev;

231 
	}
}

234 
	$√tdev_vp‹t_˛o£
(
√tdev
 *
√tdev_
)

236 
√tdev_vp‹t
 *
√tdev
 = 
	`√tdev_vp‹t_ˇ°
(
√tdev_
);

237 
	`‰ì
(
√tdev
);

238 
	}
}

241 
	$√tdev_vp‹t_gë_c⁄fig
(
√tdev_dev
 *
dev_
, 
sm≠
 *
¨gs
)

243 c⁄° 
√tdev_˛ass
 *√tdev_˛as†
	`√tdev_dev_gë_˛ass
(
dev_
);

244 c⁄° 
vp‹t_˛ass
 *vp‹t_˛as†
	`vp‹t_˛ass_ˇ°
(
√tdev_˛ass
);

245 
√tdev_dev_vp‹t
 *
dev
 = 
	`√tdev_dev_vp‹t_ˇ°
(
dev_
);

246 c⁄° *
«me
 = 
	`√tdev_dev_gë_«me
(
dev_
);

247 
îr‹
;

249 i‡(!
dev
->
›ti⁄s
) {

250 
dpif_löux_vp‹t
 
ª∂y
;

251 
oÂbuf
 *
buf
;

253 
îr‹
 = 
	`dpif_löux_vp‹t_gë
(
«me
, &
ª∂y
, &
buf
);

254 i‡(
îr‹
) {

255 
	`VLOG_ERR_RL
(&
æ
, "%s: vport query failed (%s)",

256 
«me
, 
	`°ªº‹
(
îr‹
));

257  
îr‹
;

260 
dev
->
›ti⁄s
 = 
	`oÂbuf_˛⁄e_d©a
(
ª∂y
.›ti⁄s,Ñïly.
›ti⁄s_Àn
);

261 
dev
->
dp_ifödex
 = 
ª∂y
.dp_ifindex;

262 
dev
->
p‹t_no
 = 
ª∂y
.port_no;

263 
	`oÂbuf_dñëe
(
buf
);

266 
îr‹
 = 
vp‹t_˛ass
->
	`u≈¨£_c⁄fig
(
«me
, 
√tdev_˛ass
->
ty≥
,

267 
dev
->
›ti⁄s
->
d©a
,

268 
dev
->
›ti⁄s
->
size
,

269 
¨gs
);

270 i‡(
îr‹
) {

271 
	`VLOG_ERR_RL
(&
æ
, "%s: failedÅoÖarse kernel config (%s)",

272 
«me
, 
	`°ªº‹
(
îr‹
));

274  
îr‹
;

275 
	}
}

278 
	$√tdev_vp‹t_£t_c⁄fig
(
√tdev_dev
 *
dev_
, c⁄° 
sm≠
 *
¨gs
)

280 c⁄° 
√tdev_˛ass
 *√tdev_˛as†
	`√tdev_dev_gë_˛ass
(
dev_
);

281 c⁄° 
vp‹t_˛ass
 *vp‹t_˛as†
	`vp‹t_˛ass_ˇ°
(
√tdev_˛ass
);

282 
√tdev_dev_vp‹t
 *
dev
 = 
	`√tdev_dev_vp‹t_ˇ°
(
dev_
);

283 c⁄° *
«me
 = 
	`√tdev_dev_gë_«me
(
dev_
);

284 
oÂbuf
 *
›ti⁄s
;

285 
îr‹
;

287 
›ti⁄s
 = 
	`oÂbuf_√w
(64);

288 
îr‹
 = 
vp‹t_˛ass
->
	`∑r£_c⁄fig
(
«me
, 
	`√tdev_dev_gë_ty≥
(
dev_
),

289 
¨gs
, 
›ti⁄s
);

290 i‡(!
îr‹


291 && (!
dev
->
›ti⁄s


292 || 
›ti⁄s
->
size
 !
dev
->options->size

293 || 
	`memcmp
(
›ti⁄s
->
d©a
, 
dev
->›ti⁄s->d©a, o±i⁄s->
size
))) {

294 
dpif_löux_vp‹t
 
vp‹t
;

296 
	`dpif_löux_vp‹t_öô
(&
vp‹t
);

297 
vp‹t
.
cmd
 = 
OVS_VPORT_CMD_SET
;

298 
vp‹t
.
«me
 =Çame;

299 
vp‹t
.
›ti⁄s
 = o±i⁄s->
d©a
;

300 
vp‹t
.
›ti⁄s_Àn
 = 
›ti⁄s
->
size
;

301 
îr‹
 = 
	`dpif_löux_vp‹t_å™ß˘
(&
vp‹t
, 
NULL
, NULL);

302 i‡(!
îr‹
 ||Éº‹ =
ENODEV
) {

306 
	`oÂbuf_dñëe
(
dev
->
›ti⁄s
);

307 
dev
->
›ti⁄s
 = options;

308 
›ti⁄s
 = 
NULL
;

309 
îr‹
 = 0;

312 
	`oÂbuf_dñëe
(
›ti⁄s
);

314  
îr‹
;

315 
	}
}

318 
	$√tdev_vp‹t_£nd
(
√tdev
 *√tdev, c⁄° *
d©a
, 
size_t
 
size
)

320 
√tdev_dev
 *
dev_
 = 
	`√tdev_gë_dev
(
√tdev
);

321 
√tdev_dev_vp‹t
 *
dev
 = 
	`√tdev_dev_vp‹t_ˇ°
(
dev_
);

323 i‡(
dev
->
dp_ifödex
 == -1) {

324 c⁄° *
«me
 = 
	`√tdev_gë_«me
(
√tdev
);

325 
dpif_löux_vp‹t
 
ª∂y
;

326 
oÂbuf
 *
buf
;

327 
îr‹
;

329 
îr‹
 = 
	`dpif_löux_vp‹t_gë
(
«me
, &
ª∂y
, &
buf
);

330 i‡(
îr‹
) {

331 
	`VLOG_ERR_RL
(&
æ
, "%s: failedÅo query vport for send (%s)",

332 
«me
, 
	`°ªº‹
(
îr‹
));

333  
îr‹
;

335 
dev
->
dp_ifödex
 = 
ª∂y
.dp_ifindex;

336 
dev
->
p‹t_no
 = 
ª∂y
.port_no;

337 
	`oÂbuf_dñëe
(
buf
);

340  
	`dpif_löux_vp‹t_£nd
(
dev
->
dp_ifödex
, dev->
p‹t_no
, 
d©a
, 
size
);

341 
	}
}

344 
	$√tdev_vp‹t_£t_ëhîaddr
(
√tdev
 *netdev,

345 c⁄° 
uöt8_t
 
mac
[
ETH_ADDR_LEN
])

347 
dpif_löux_vp‹t
 
vp‹t
;

348 
îr‹
;

350 
	`dpif_löux_vp‹t_öô
(&
vp‹t
);

351 
vp‹t
.
cmd
 = 
OVS_VPORT_CMD_SET
;

352 
vp‹t
.
«me
 = 
	`√tdev_gë_«me
(
√tdev
);

353 
vp‹t
.
addªss
 = 
mac
;

355 
îr‹
 = 
	`dpif_löux_vp‹t_å™ß˘
(&
vp‹t
, 
NULL
, NULL);

356 i‡(!
îr‹
) {

357 
	`√tdev_vp‹t_pﬁl_nŸify
(
√tdev
);

359  
îr‹
;

360 
	}
}

363 
	$√tdev_vp‹t_gë_ëhîaddr
(c⁄° 
√tdev
 *netdev,

364 
uöt8_t
 
mac
[
ETH_ADDR_LEN
])

366 
dpif_löux_vp‹t
 
ª∂y
;

367 
oÂbuf
 *
buf
;

368 
îr‹
;

370 
îr‹
 = 
	`dpif_löux_vp‹t_gë
(
	`√tdev_gë_«me
(
√tdev
), &
ª∂y
, &
buf
);

371 i‡(!
îr‹
) {

372 i‡(
ª∂y
.
addªss
) {

373 
	`mem˝y
(
mac
, 
ª∂y
.
addªss
, 
ETH_ADDR_LEN
);

375 
îr‹
 = 
EOPNOTSUPP
;

377 
	`oÂbuf_dñëe
(
buf
);

379  
îr‹
;

380 
	}
}

386 
	$√tdev_°©s_‰om_ovs_vp‹t_°©s
(
√tdev_°©s
 *
d°
,

387 c⁄° 
ovs_vp‹t_°©s
 *
§c
)

389 
d°
->
rx_∑ckës
 = 
	`gë_u«lig√d_u64
(&
§c
->rx_packets);

390 
d°
->
tx_∑ckës
 = 
	`gë_u«lig√d_u64
(&
§c
->tx_packets);

391 
d°
->
rx_byãs
 = 
	`gë_u«lig√d_u64
(&
§c
->rx_bytes);

392 
d°
->
tx_byãs
 = 
	`gë_u«lig√d_u64
(&
§c
->tx_bytes);

393 
d°
->
rx_îr‹s
 = 
	`gë_u«lig√d_u64
(&
§c
->rx_errors);

394 
d°
->
tx_îr‹s
 = 
	`gë_u«lig√d_u64
(&
§c
->tx_errors);

395 
d°
->
rx_dr›≥d
 = 
	`gë_u«lig√d_u64
(&
§c
->rx_dropped);

396 
d°
->
tx_dr›≥d
 = 
	`gë_u«lig√d_u64
(&
§c
->tx_dropped);

397 
d°
->
mu…iˇ°
 = 0;

398 
d°
->
cﬁlisi⁄s
 = 0;

399 
d°
->
rx_Àngth_îr‹s
 = 0;

400 
d°
->
rx_ovî_îr‹s
 = 0;

401 
d°
->
rx_¸c_îr‹s
 = 0;

402 
d°
->
rx_‰ame_îr‹s
 = 0;

403 
d°
->
rx_fifo_îr‹s
 = 0;

404 
d°
->
rx_mis£d_îr‹s
 = 0;

405 
d°
->
tx_ab‹ãd_îr‹s
 = 0;

406 
d°
->
tx_ˇºõr_îr‹s
 = 0;

407 
d°
->
tx_fifo_îr‹s
 = 0;

408 
d°
->
tx_hóπbót_îr‹s
 = 0;

409 
d°
->
tx_wödow_îr‹s
 = 0;

410 
	}
}

414 
	$√tdev_°©s_to_ovs_vp‹t_°©s
(
ovs_vp‹t_°©s
 *
d°
,

415 c⁄° 
√tdev_°©s
 *
§c
)

417 
d°
->
rx_∑ckës
 = 
§c
->rx_packets;

418 
d°
->
tx_∑ckës
 = 
§c
->tx_packets;

419 
d°
->
rx_byãs
 = 
§c
->rx_bytes;

420 
d°
->
tx_byãs
 = 
§c
->tx_bytes;

421 
d°
->
rx_îr‹s
 = 
§c
->rx_errors;

422 
d°
->
tx_îr‹s
 = 
§c
->tx_errors;

423 
d°
->
rx_dr›≥d
 = 
§c
->rx_dropped;

424 
d°
->
tx_dr›≥d
 = 
§c
->tx_dropped;

425 
	}
}

428 
	$√tdev_vp‹t_gë_°©s
(c⁄° 
√tdev
 *√tdev, 
√tdev_°©s
 *
°©s
)

430 
dpif_löux_vp‹t
 
ª∂y
;

431 
oÂbuf
 *
buf
;

432 
îr‹
;

434 
îr‹
 = 
	`dpif_löux_vp‹t_gë
(
	`√tdev_gë_«me
(
√tdev
), &
ª∂y
, &
buf
);

435 i‡(
îr‹
) {

436  
îr‹
;

437 } i‡(!
ª∂y
.
°©s
) {

438 
	`oÂbuf_dñëe
(
buf
);

439  
EOPNOTSUPP
;

442 
	`√tdev_°©s_‰om_ovs_vp‹t_°©s
(
°©s
, 
ª∂y
.stats);

444 
	`oÂbuf_dñëe
(
buf
);

447 
	}
}

450 
	$√tdev_vp‹t_£t_°©s
(
√tdev
 *√tdev, c⁄° 
√tdev_°©s
 *
°©s
)

452 
ovs_vp‹t_°©s
 
π∆_°©s
;

453 
dpif_löux_vp‹t
 
vp‹t
;

454 
îr
;

456 
	`√tdev_°©s_to_ovs_vp‹t_°©s
(&
π∆_°©s
, 
°©s
);

458 
	`dpif_löux_vp‹t_öô
(&
vp‹t
);

459 
vp‹t
.
cmd
 = 
OVS_VPORT_CMD_SET
;

460 
vp‹t
.
«me
 = 
	`√tdev_gë_«me
(
√tdev
);

461 
vp‹t
.
°©s
 = &
π∆_°©s
;

463 
îr
 = 
	`dpif_löux_vp‹t_å™ß˘
(&
vp‹t
, 
NULL
, NULL);

469 i‡(
îr
 =
ENODEV
) {

470 
îr
 = 
EOPNOTSUPP
;

473  
îr
;

474 
	}
}

477 
	$√tdev_vp‹t_gë_drv_öfo
(c⁄° 
√tdev
 *√tdev, 
sm≠
 *smap)

479 c⁄° *
iÁ˚
 = 
	`√tdev_vp‹t_gë_äl_iÁ˚
(
√tdev
);

481 i‡(
iÁ˚
) {

482 
√tdev
 *
egªss_√tdev
;

484 
	`sm≠_add
(
sm≠
, "tu¬ñ_egªss_iÁ˚", 
iÁ˚
);

486 i‡(!
	`√tdev_›í
(
iÁ˚
, "sy°em", &
egªss_√tdev
)) {

487 
	`sm≠_add
(
sm≠
, "tunnel_egress_iface_carrier",

488 
	`√tdev_gë_ˇºõr
(
egªss_√tdev
) ? "up" : "down");

489 
	`√tdev_˛o£
(
egªss_√tdev
);

494 
	}
}

497 
	$√tdev_vp‹t_upd©e_Êags
(
√tdev
 *√tdev 
OVS_UNUSED
,

498 
√tdev_Êags
 
off
, √tdev_Êag†
⁄
 
OVS_UNUSED
,

499 
√tdev_Êags
 *
ﬁd_Êag•
)

501 i‡(
off
 & (
NETDEV_UP
 | 
NETDEV_PROMISC
)) {

502  
EOPNOTSUPP
;

505 *
ﬁd_Êag•
 = 
NETDEV_UP
 | 
NETDEV_PROMISC
;

507 
	}
}

510 
	$√tdev_vp‹t_ch™ge_£q
(c⁄° 
√tdev
 *netdev)

512  
	`√tdev_dev_vp‹t_ˇ°
(
	`√tdev_gë_dev
(
√tdev
))->
ch™ge_£q
;

513 
	}
}

516 
	$√tdev_vp‹t_run
()

518 
	`rouã_èbÀ_run
();

519 
	}
}

522 
	$√tdev_vp‹t_waô
()

524 
	`rouã_èbÀ_waô
();

525 
	}
}

529 
	$√tdev_vp‹t_gë_äl_iÁ˚
(c⁄° 
√tdev
 *netdev)

531 
∆©å
 *
a
[
OVS_TUNNEL_ATTR_MAX
 + 1];

532 
√tdev_dev_vp‹t
 *
ndv
;

533 
«me
[
IFNAMSIZ
];

535 
ndv
 = 
	`√tdev_dev_vp‹t_ˇ°
(
	`√tdev_gë_dev
(
√tdev
));

536 i‡(
	`äl_p‹t_c⁄fig_‰om_∆©å
(
ndv
->
›ti⁄s
->
d©a
,Çdv->›ti⁄s->
size
,

537 
a
)) {

538  
NULL
;

540 i‡(
a
[
OVS_TUNNEL_ATTR_DST_IPV4
]) {

541 
ovs_be32
 
rouã
 = 
	`∆_©å_gë_be32
(
a
[
OVS_TUNNEL_ATTR_DST_IPV4
]);

543 i‡(
	`rouã_èbÀ_gë_«me
(
rouã
, 
«me
)) {

544  
«me
;

547  
NULL
;

548 
	}
}

553 
	$√tdev_vp‹t_pﬁl_nŸify
(c⁄° 
√tdev
 *netdev)

555 
√tdev_dev_vp‹t
 *
ndv
;

557 
ndv
 = 
	`√tdev_dev_vp‹t_ˇ°
(
	`√tdev_gë_dev
(
√tdev
));

559 
ndv
->
ch™ge_£q
++;

560 i‡(!
ndv
->
ch™ge_£q
) {

561 
ndv
->
ch™ge_£q
++;

563 
	}
}

568 
	$£t_key
(c⁄° 
sm≠
 *
¨gs
, c⁄° *
«me
, 
uöt16_t
 
ty≥
,

569 
oÂbuf
 *
›ti⁄s
)

571 c⁄° *
s
;

573 
s
 = 
	`sm≠_gë
(
¨gs
, 
«me
);

574 i‡(!
s
) {

575 
s
 = 
	`sm≠_gë
(
¨gs
, "key");

576 i‡(!
s
) {

577 
s
 = "0";

581 i‡(!
	`°rcmp
(
s
, "flow")) {

584 
	`∆_msg_put_be64
(
›ti⁄s
, 
ty≥
, 
	`ht⁄Œ
(
	`°πouŒ
(
s
, 
NULL
, 0)));

586 
	}
}

589 
	$∑r£_tu¬ñ_c⁄fig
(c⁄° *
«me
, c⁄° *
ty≥
,

590 c⁄° 
sm≠
 *
¨gs
, 
oÂbuf
 *
›ti⁄s
)

592 
boﬁ
 
is_gª
 = 
Ál£
;

593 
boﬁ
 
is_ù£c
 = 
Ál£
;

594 
sm≠_node
 *
node
;

595 
boﬁ
 
ù£c_mech_£t
 = 
Ál£
;

596 
ovs_be32
 
daddr
 = 
	`ht⁄l
(0);

597 
ovs_be32
 
ßddr
 = 
	`ht⁄l
(0);

598 
uöt32_t
 
Êags
;

600 i‡(!
	`°rcmp
(
ty≥
, "capwap")) {

601 
	`VLOG_WARN_ONCE
("CAPWAPÅunnel support is deprecated.");

604 
Êags
 = 
TNL_F_DF_DEFAULT
;

605 i‡(!
	`°rcmp
(
ty≥
, "gre") || !strcmp(type, "gre64")) {

606 
is_gª
 = 
åue
;

607 } i‡(!
	`°rcmp
(
ty≥
, "ipsec_gre") || !strcmp(type, "ipsec_gre64")) {

608 
is_gª
 = 
åue
;

609 
is_ù£c
 = 
åue
;

610 
Êags
 |
TNL_F_IPSEC
;

613 
	`SMAP_FOR_EACH
 (
node
, 
¨gs
) {

614 i‡(!
	`°rcmp
(
node
->
key
, "remote_ip")) {

615 
ö_addr
 in_addr;

616 i‡(
	`lookup_ù
(
node
->
vÆue
, &
ö_addr
)) {

617 
	`VLOG_WARN
("%s: bad %†'ªmŸe_ù'", 
«me
, 
ty≥
);

619 
daddr
 = 
ö_addr
.
s_addr
;

621 } i‡(!
	`°rcmp
(
node
->
key
, "local_ip")) {

622 
ö_addr
 in_addr;

623 i‡(
	`lookup_ù
(
node
->
vÆue
, &
ö_addr
)) {

624 
	`VLOG_WARN
("%s: bad %†'loˇl_ù'", 
«me
, 
ty≥
);

626 
ßddr
 = 
ö_addr
.
s_addr
;

628 } i‡(!
	`°rcmp
(
node
->
key
, "tos")) {

629 i‡(!
	`°rcmp
(
node
->
vÆue
, "inherit")) {

630 
Êags
 |
TNL_F_TOS_INHERIT
;

632 *
íd±r
;

633 
tos
;

634 
tos
 = 
	`°πﬁ
(
node
->
vÆue
, &
íd±r
, 0);

635 i‡(*
íd±r
 ='\0' && 
tos
 =—o†& 
IP_DSCP_MASK
)) {

636 
	`∆_msg_put_u8
(
›ti⁄s
, 
OVS_TUNNEL_ATTR_TOS
, 
tos
);

638 
	`VLOG_WARN
("%s: invÆid TOS %s", 
«me
, 
node
->
vÆue
);

641 } i‡(!
	`°rcmp
(
node
->
key
, "ttl")) {

642 i‡(!
	`°rcmp
(
node
->
vÆue
, "inherit")) {

643 
Êags
 |
TNL_F_TTL_INHERIT
;

645 
	`∆_msg_put_u8
(
›ti⁄s
, 
OVS_TUNNEL_ATTR_TTL
, 
	`©oi
(
node
->
vÆue
));

647 } i‡(!
	`°rcmp
(
node
->
key
, "csum"Ë&& 
is_gª
) {

648 i‡(!
	`°rcmp
(
node
->
vÆue
, "true")) {

649 
Êags
 |
TNL_F_CSUM
;

651 } i‡(!
	`°rcmp
(
node
->
key
, "df_inherit")) {

652 i‡(!
	`°rcmp
(
node
->
vÆue
, "true")) {

653 
Êags
 |
TNL_F_DF_INHERIT
;

655 } i‡(!
	`°rcmp
(
node
->
key
, "df_default")) {

656 i‡(!
	`°rcmp
(
node
->
vÆue
, "false")) {

657 
Êags
 &~
TNL_F_DF_DEFAULT
;

659 } i‡(!
	`°rcmp
(
node
->
key
, "pmtud")) {

660 i‡(!
	`°rcmp
(
node
->
vÆue
, "true")) {

661 
	`VLOG_WARN_ONCE
("%s: TheÅunnel Path MTU discovery is "

664 "c⁄˚∫s.", 
«me
);

665 
Êags
 |
TNL_F_PMTUD
;

667 } i‡(!
	`°rcmp
(
node
->
key
, "≥î_˚π"Ë&& 
is_ù£c
) {

668 i‡(
	`sm≠_gë
(
¨gs
, "certificate")) {

669 
ù£c_mech_£t
 = 
åue
;

671 c⁄° *
u£_s¶_˚π
;

679 
u£_s¶_˚π
 = 
	`sm≠_gë
(
¨gs
, "use_ssl_cert");

680 i‡(!
u£_s¶_˚π
 || 
	`°rcmp
(use_ssl_cert, "true")) {

681 
	`VLOG_ERR
("%s: 'peer_cert'Ñequires 'certificate'árgument",

682 
«me
);

683  
EINVAL
;

685 
ù£c_mech_£t
 = 
åue
;

687 } i‡(!
	`°rcmp
(
node
->
key
, "psk"Ë&& 
is_ù£c
) {

688 
ù£c_mech_£t
 = 
åue
;

689 } i‡(
is_ù£c


690 && (!
	`°rcmp
(
node
->
key
, "certificate")

691 || !
	`°rcmp
(
node
->
key
, "private_key")

692 || !
	`°rcmp
(
node
->
key
, "use_ssl_cert"))) {

694 } i‡(!
	`°rcmp
(
node
->
key
, "key") ||

695 !
	`°rcmp
(
node
->
key
, "in_key") ||

696 !
	`°rcmp
(
node
->
key
, "out_key")) {

699 
	`VLOG_WARN
("%s: unknow¿%†¨gumíà'%s'", 
«me
, 
ty≥
, 
node
->
key
);

703 i‡(
is_ù£c
) {

704 
pid_t
 
pid
 = 0;

705 i‡(
pid
 <= 0) {

706 *
fûe_«me
 = 
	`xa•rötf
("%s/%s", 
	`ovs_rundú
(),

708 
pid
 = 
	`ªad_pidfûe
(
fûe_«me
);

709 
	`‰ì
(
fûe_«me
);

712 i‡(
pid
 < 0) {

713 
	`VLOG_ERR
("%s: IPsecÑequiresÅhe ovs-monitor-ipsec daemon",

714 
«me
);

715  
EINVAL
;

718 i‡(
	`sm≠_gë
(
¨gs
, "peer_cert") && smap_get(args, "psk")) {

719 
	`VLOG_ERR
("%s: c™nŸ deföêbŸh '≥î_˚π'ánd 'psk'", 
«me
);

720  
EINVAL
;

723 i‡(!
ù£c_mech_£t
) {

724 
	`VLOG_ERR
("%s: IPsecÑequiresán 'peer_cert' orÖsk'árgument",

725 
«me
);

726  
EINVAL
;

730 
	`£t_key
(
¨gs
, "ö_key", 
OVS_TUNNEL_ATTR_IN_KEY
, 
›ti⁄s
);

731 
	`£t_key
(
¨gs
, "out_key", 
OVS_TUNNEL_ATTR_OUT_KEY
, 
›ti⁄s
);

733 i‡(!
daddr
) {

734 
	`VLOG_ERR
("%s: %sÅypeÑequires valid 'remote_ip'árgument",

735 
«me
, 
ty≥
);

736  
EINVAL
;

738 
	`∆_msg_put_be32
(
›ti⁄s
, 
OVS_TUNNEL_ATTR_DST_IPV4
, 
daddr
);

740 i‡(
ßddr
) {

741 i‡(
	`ù_is_mu…iˇ°
(
daddr
)) {

742 
	`VLOG_WARN
("%s:ÑemŸe_ù i†mu…iˇ°, ign‹ögÜoˇl_ù", 
«me
);

744 
	`∆_msg_put_be32
(
›ti⁄s
, 
OVS_TUNNEL_ATTR_SRC_IPV4
, 
ßddr
);

748 
	`∆_msg_put_u32
(
›ti⁄s
, 
OVS_TUNNEL_ATTR_FLAGS
, 
Êags
);

751 
	}
}

754 
äl_p‹t_c⁄fig_‰om_∆©å
(c⁄° 
∆©å
 *
›ti⁄s
, 
size_t
 
›ti⁄s_Àn
,

755 
∆©å
 *
a
[
OVS_TUNNEL_ATTR_MAX
 + 1])

757 c⁄° 
∆_pﬁicy
 
	govs_tu¬ñ_pﬁicy
[] = {

758 [
OVS_TUNNEL_ATTR_FLAGS
] = { .
ty≥
 = 
NL_A_U32
, .
	g›ti⁄Æ
 = 
åue
 },

759 [
OVS_TUNNEL_ATTR_DST_IPV4
] = { .
ty≥
 = 
NL_A_BE32
, .
	g›ti⁄Æ
 = 
åue
 },

760 [
OVS_TUNNEL_ATTR_SRC_IPV4
] = { .
ty≥
 = 
NL_A_BE32
, .
	g›ti⁄Æ
 = 
åue
 },

761 [
OVS_TUNNEL_ATTR_IN_KEY
] = { .
ty≥
 = 
NL_A_BE64
, .
	g›ti⁄Æ
 = 
åue
 },

762 [
OVS_TUNNEL_ATTR_OUT_KEY
] = { .
ty≥
 = 
NL_A_BE64
, .
	g›ti⁄Æ
 = 
åue
 },

763 [
OVS_TUNNEL_ATTR_TOS
] = { .
ty≥
 = 
NL_A_U8
, .
	g›ti⁄Æ
 = 
åue
 },

764 [
OVS_TUNNEL_ATTR_TTL
] = { .
ty≥
 = 
NL_A_U8
, .
	g›ti⁄Æ
 = 
åue
 },

766 
oÂbuf
 
	gbuf
;

768 
oÂbuf_u£_c⁄°
(&
buf
, 
›ti⁄s
, 
›ti⁄s_Àn
);

769 i‡(!
∆_pﬁicy_∑r£
(&
buf
, 0, 
ovs_tu¬ñ_pﬁicy
,

770 
a
, 
ARRAY_SIZE
(
ovs_tu¬ñ_pﬁicy
))) {

771  
	gEINVAL
;

776 
uöt64_t


777 
	$gë_be64_‹_zîo
(c⁄° 
∆©å
 *
a
)

779  
a
 ? 
	`¡ohŒ
(
	`∆_©å_gë_be64
(a)) : 0;

780 
	}
}

783 
	$u≈¨£_tu¬ñ_c⁄fig
(c⁄° *
«me
 
OVS_UNUSED
, c⁄° *
ty≥
 OVS_UNUSED,

784 c⁄° 
∆©å
 *
›ti⁄s
, 
size_t
 
›ti⁄s_Àn
,

785 
sm≠
 *
¨gs
)

787 
∆©å
 *
a
[
OVS_TUNNEL_ATTR_MAX
 + 1];

788 
uöt32_t
 
Êags
;

789 
îr‹
;

791 
îr‹
 = 
	`äl_p‹t_c⁄fig_‰om_∆©å
(
›ti⁄s
, 
›ti⁄s_Àn
, 
a
);

792 i‡(
îr‹
) {

793  
îr‹
;

796 i‡(
a
[
OVS_TUNNEL_ATTR_DST_IPV4
]) {

797 
ovs_be32
 
daddr
 = 
	`∆_©å_gë_be32
(
a
[
OVS_TUNNEL_ATTR_DST_IPV4
]);

798 
	`sm≠_add_f‹m©
(
¨gs
, "ªmŸe_ù", 
IP_FMT
, 
	`IP_ARGS
(&
daddr
));

801 i‡(
a
[
OVS_TUNNEL_ATTR_SRC_IPV4
]) {

802 
ovs_be32
 
ßddr
 = 
	`∆_©å_gë_be32
(
a
[
OVS_TUNNEL_ATTR_SRC_IPV4
]);

803 
	`sm≠_add_f‹m©
(
¨gs
, "loˇl_ù", 
IP_FMT
, 
	`IP_ARGS
(&
ßddr
));

806 i‡(!
a
[
OVS_TUNNEL_ATTR_IN_KEY
] && !a[
OVS_TUNNEL_ATTR_OUT_KEY
]) {

807 
	`sm≠_add
(
¨gs
, "key", "flow");

809 
uöt64_t
 
ö_key
 = 
	`gë_be64_‹_zîo
(
a
[
OVS_TUNNEL_ATTR_IN_KEY
]);

810 
uöt64_t
 
out_key
 = 
	`gë_be64_‹_zîo
(
a
[
OVS_TUNNEL_ATTR_OUT_KEY
]);

812 i‡(
ö_key
 && in_key =
out_key
) {

813 
	`sm≠_add_f‹m©
(
¨gs
, "key", "%"
PRIu64
, 
ö_key
);

815 i‡(!
a
[
OVS_TUNNEL_ATTR_IN_KEY
]) {

816 
	`sm≠_add
(
¨gs
, "in_key", "flow");

817 } i‡(
ö_key
) {

818 
	`sm≠_add_f‹m©
(
¨gs
, "ö_key", "%"
PRIu64
, 
ö_key
);

821 i‡(!
a
[
OVS_TUNNEL_ATTR_OUT_KEY
]) {

822 
	`sm≠_add
(
¨gs
, "out_key", "flow");

823 } i‡(
out_key
) {

824 
	`sm≠_add_f‹m©
(
¨gs
, "out_key", "%"
PRIu64
, 
out_key
);

829 
Êags
 = 
	`gë_u32_‹_zîo
(
a
[
OVS_TUNNEL_ATTR_FLAGS
]);

831 i‡(
Êags
 & 
TNL_F_TTL_INHERIT
) {

832 
	`sm≠_add
(
¨gs
, "ttl", "inherit");

833 } i‡(
a
[
OVS_TUNNEL_ATTR_TTL
]) {

834 
âl
 = 
	`∆_©å_gë_u8
(
a
[
OVS_TUNNEL_ATTR_TTL
]);

835 
	`sm≠_add_f‹m©
(
¨gs
, "âl", "%d", 
âl
);

838 i‡(
Êags
 & 
TNL_F_TOS_INHERIT
) {

839 
	`sm≠_add
(
¨gs
, "tos", "inherit");

840 } i‡(
a
[
OVS_TUNNEL_ATTR_TOS
]) {

841 
tos
 = 
	`∆_©å_gë_u8
(
a
[
OVS_TUNNEL_ATTR_TOS
]);

842 
	`sm≠_add_f‹m©
(
¨gs
, "tos", "0x%x", 
tos
);

845 i‡(
Êags
 & 
TNL_F_CSUM
) {

846 
	`sm≠_add
(
¨gs
, "csum", "true");

848 i‡(
Êags
 & 
TNL_F_DF_INHERIT
) {

849 
	`sm≠_add
(
¨gs
, "df_inherit", "true");

851 i‡(!(
Êags
 & 
TNL_F_DF_DEFAULT
)) {

852 
	`sm≠_add
(
¨gs
, "df_default", "false");

854 i‡(
Êags
 & 
TNL_F_PMTUD
) {

855 
	`sm≠_add
(
¨gs
, "pmtud", "true");

859 
	}
}

862 
	$∑r£_∑tch_c⁄fig
(c⁄° *
«me
, c⁄° *
ty≥
 
OVS_UNUSED
,

863 c⁄° 
sm≠
 *
¨gs
, 
oÂbuf
 *
›ti⁄s
)

865 c⁄° *
≥î
;

867 
≥î
 = 
	`sm≠_gë
(
¨gs
, "peer");

868 i‡(!
≥î
) {

869 
	`VLOG_ERR
("%s:Ö©chÅy≥Ñequúe†vÆid '≥î'árgumít", 
«me
);

870  
EINVAL
;

873 i‡(
	`sm≠_cou¡
(
¨gs
) > 1) {

874 
	`VLOG_ERR
("%s:Ö©chÅy≥Åake†⁄lyá '≥î'árgumít", 
«me
);

875  
EINVAL
;

878 i‡(
	`°æí
(
≥î
Ë>
IFNAMSIZ
) {

879 
	`VLOG_ERR
("%s:Ö©ch '≥î'árgÅoÿl⁄g", 
«me
);

880  
EINVAL
;

883 i‡(!
	`°rcmp
(
«me
, 
≥î
)) {

884 
	`VLOG_ERR
("%s:Ö©chÖì∏mu°ÇŸ bê£lf", 
«me
);

885  
EINVAL
;

888 
	`∆_msg_put_°rög
(
›ti⁄s
, 
OVS_PATCH_ATTR_PEER
, 
≥î
);

891 
	}
}

894 
	$u≈¨£_∑tch_c⁄fig
(c⁄° *
«me
 
OVS_UNUSED
, c⁄° *
ty≥
 OVS_UNUSED,

895 c⁄° 
∆©å
 *
›ti⁄s
, 
size_t
 
›ti⁄s_Àn
,

896 
sm≠
 *
¨gs
)

898 c⁄° 
∆_pﬁicy
 
ovs_∑tch_pﬁicy
[] = {

899 [
OVS_PATCH_ATTR_PEER
] = { .
ty≥
 = 
NL_A_STRING
,

900 .
max_Àn
 = 
IFNAMSIZ
,

901 .
›ti⁄Æ
 = 
Ál£
 }

904 
∆©å
 *
a
[
	`ARRAY_SIZE
(
ovs_∑tch_pﬁicy
)];

905 
oÂbuf
 
buf
;

907 
	`oÂbuf_u£_c⁄°
(&
buf
, 
›ti⁄s
, 
›ti⁄s_Àn
);

908 i‡(!
	`∆_pﬁicy_∑r£
(&
buf
, 0, 
ovs_∑tch_pﬁicy
,

909 
a
, 
	`ARRAY_SIZE
(
ovs_∑tch_pﬁicy
))) {

910  
EINVAL
;

913 
	`sm≠_add
(
¨gs
, "≥î", 
	`∆_©å_gë_°rög
(
a
[
OVS_PATCH_ATTR_PEER
]));

915 
	}
}

917 
	#VPORT_FUNCTIONS
(
GET_STATUS
) \

918 
NULL
, \

919 
√tdev_vp‹t_run
, \

920 
√tdev_vp‹t_waô
, \

922 
√tdev_vp‹t_¸óã
, \

923 
√tdev_vp‹t_de°roy
, \

924 
√tdev_vp‹t_gë_c⁄fig
, \

925 
√tdev_vp‹t_£t_c⁄fig
, \

927 
√tdev_vp‹t_›í
, \

928 
√tdev_vp‹t_˛o£
, \

930 
NULL
, \

931 
NULL
, \

932 
NULL
, \

933 
NULL
, \

935 
√tdev_vp‹t_£nd
, \

936 
NULL
, \

938 
√tdev_vp‹t_£t_ëhîaddr
, \

939 
√tdev_vp‹t_gë_ëhîaddr
, \

940 
NULL
, \

941 
NULL
, \

942 
NULL
, \

943 
NULL
, \

944 
NULL
, \

945 
NULL
, \

946 
√tdev_vp‹t_gë_°©s
, \

947 
√tdev_vp‹t_£t_°©s
, \

949 
NULL
, \

950 
NULL
, \

952 
NULL
, \

953 
NULL
, \

954 
NULL
, \

955 
NULL
, \

956 
NULL
, \

957 
NULL
, \

958 
NULL
, \

959 
NULL
, \

960 
NULL
, \

961 
NULL
, \

962 
NULL
, \

964 
NULL
, \

965 
NULL
, \

966 
NULL
, \

967 
NULL
, \

968 
NULL
, \

969 
GET_STATUS
, \

970 
NULL
, \

972 
√tdev_vp‹t_upd©e_Êags
, \

974 
√tdev_vp‹t_ch™ge_£q


	)

977 
	$√tdev_vp‹t_ªgi°î
()

979 c⁄° 
vp‹t_˛ass
 
vp‹t_˛as£s
[] = {

980 { 
OVS_VPORT_TYPE_GRE
,

981 { "gª", 
	`VPORT_FUNCTIONS
(
√tdev_vp‹t_gë_drv_öfo
) },

982 
∑r£_tu¬ñ_c⁄fig
, 
u≈¨£_tu¬ñ_c⁄fig
 },

984 { 
OVS_VPORT_TYPE_GRE
,

985 { "ù£c_gª", 
	`VPORT_FUNCTIONS
(
√tdev_vp‹t_gë_drv_öfo
) },

986 
∑r£_tu¬ñ_c⁄fig
, 
u≈¨£_tu¬ñ_c⁄fig
 },

988 { 
OVS_VPORT_TYPE_GRE64
,

989 { "gª64", 
	`VPORT_FUNCTIONS
(
√tdev_vp‹t_gë_drv_öfo
) },

990 
∑r£_tu¬ñ_c⁄fig
, 
u≈¨£_tu¬ñ_c⁄fig
 },

992 { 
OVS_VPORT_TYPE_GRE64
,

993 { "ù£c_gª64", 
	`VPORT_FUNCTIONS
(
√tdev_vp‹t_gë_drv_öfo
) },

994 
∑r£_tu¬ñ_c⁄fig
, 
u≈¨£_tu¬ñ_c⁄fig
 },

996 { 
OVS_VPORT_TYPE_CAPWAP
,

997 { "ˇpw≠", 
	`VPORT_FUNCTIONS
(
√tdev_vp‹t_gë_drv_öfo
) },

998 
∑r£_tu¬ñ_c⁄fig
, 
u≈¨£_tu¬ñ_c⁄fig
 },

1000 { 
OVS_VPORT_TYPE_PATCH
,

1001 { "∑tch", 
	`VPORT_FUNCTIONS
(
NULL
) },

1002 
∑r£_∑tch_c⁄fig
, 
u≈¨£_∑tch_c⁄fig
 }

1005 
i
;

1007 
i
 = 0; i < 
	`ARRAY_SIZE
(
vp‹t_˛as£s
); i++) {

1008 
	`√tdev_ªgi°î_¥ovidî
(&
vp‹t_˛as£s
[
i
].
√tdev_˛ass
);

1010 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/netdev-vport.h

17 #i‚de‡
NETDEV_VPORT_H


18 
	#NETDEV_VPORT_H
 1

	)

20 
	gdpif_löux_vp‹t
;

21 
	g√tdev
;

22 
	g√tdev_°©s
;

24 
√tdev_vp‹t_ªgi°î
();

26 c⁄° 
oÂbuf
 *
√tdev_vp‹t_gë_›ti⁄s
(c⁄° 
√tdev
 *);

28 
ovs_vp‹t_ty≥
 
√tdev_vp‹t_gë_vp‹t_ty≥
(c⁄° 
√tdev
 *);

29 c⁄° *
√tdev_vp‹t_gë_√tdev_ty≥
(c⁄° 
dpif_löux_vp‹t
 *);

31 
√tdev_vp‹t_gë_°©s
(c⁄° 
√tdev
 *, 
√tdev_°©s
 *);

32 
√tdev_vp‹t_£t_°©s
(
√tdev
 *, c⁄° 
√tdev_°©s
 *);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/netdev.c

17 
	~<c⁄fig.h
>

18 
	~"√tdev.h
"

20 
	~<as£π.h
>

21 
	~<î∫o.h
>

22 
	~<öây≥s.h
>

23 
	~<√töë/ö.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~<uni°d.h
>

28 
	~"covîage.h
"

29 
	~"dy«mic-°rög.h
"

30 
	~"Áèl-sig«l.h
"

31 
	~"hash.h
"

32 
	~"li°.h
"

33 
	~"√tdev-¥ovidî.h
"

34 
	~"√tdev-vp‹t.h
"

35 
	~"oÂbuf.h
"

36 
	~"›íÊow/›íÊow.h
"

37 
	~"∑ckës.h
"

38 
	~"pﬁl-lo›.h
"

39 
	~"shash.h
"

40 
	~"sm≠.h
"

41 
	~"s£t.h
"

42 
	~"svec.h
"

43 
	~"vlog.h
"

45 
VLOG_DEFINE_THIS_MODULE
(
√tdev
);

47 
COVERAGE_DEFINE
(
√tdev_ª˚ived
);

48 
COVERAGE_DEFINE
(
√tdev_£¡
);

49 
COVERAGE_DEFINE
(
√tdev_add_rouãr
);

50 
COVERAGE_DEFINE
(
√tdev_gë_°©s
);

52 
shash
 
	g√tdev_˛as£s
 = 
SHASH_INITIALIZER
(&
√tdev_˛as£s
);

55 
shash
 
	g√tdev_dev_shash
 = 
SHASH_INITIALIZER
(&
√tdev_dev_shash
);

58 
li°
 
	g√tdev_li°
 = 
LIST_INITIALIZER
(&
√tdev_li°
);

62 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(5, 20);

64 
˛o£_Æl_√tdevs
(*
aux
 
OVS_UNUSED
);

65 
ª°‹e_Êags
(
√tdev
 *netdev);

66 
upd©e_devi˚_¨gs
(
√tdev_dev
 *, c⁄° 
shash
 *
¨gs
);

69 
	$√tdev_öôülize
()

71 
boﬁ
 
öôed
;

73 i‡(!
öôed
) {

74 
öôed
 = 
åue
;

76 
	`Áèl_sig«l_add_hook
(
˛o£_Æl_√tdevs
, 
NULL
, NULL, 
åue
);

78 #ifde‡
LINUX_DATAPATH


79 
	`√tdev_ªgi°î_¥ovidî
(&
√tdev_löux_˛ass
);

80 
	`√tdev_ªgi°î_¥ovidî
(&
√tdev_öã∫Æ_˛ass
);

81 
	`√tdev_ªgi°î_¥ovidî
(&
√tdev_èp_˛ass
);

82 
	`√tdev_vp‹t_ªgi°î
();

84 #ifde‡
__FªeBSD__


85 
	`√tdev_ªgi°î_¥ovidî
(&
√tdev_èp_˛ass
);

86 
	`√tdev_ªgi°î_¥ovidî
(&
√tdev_bsd_˛ass
);

89 
	}
}

96 
	$√tdev_run
()

98 
shash_node
 *
node
;

99 
	`SHASH_FOR_EACH
(
node
, &
√tdev_˛as£s
) {

100 c⁄° 
√tdev_˛ass
 *√tdev_˛as†
node
->
d©a
;

101 i‡(
√tdev_˛ass
->
run
) {

102 
√tdev_˛ass
->
	`run
();

105 
	}
}

112 
	$√tdev_waô
()

114 
shash_node
 *
node
;

115 
	`SHASH_FOR_EACH
(
node
, &
√tdev_˛as£s
) {

116 c⁄° 
√tdev_˛ass
 *√tdev_˛as†
node
->
d©a
;

117 i‡(
√tdev_˛ass
->
waô
) {

118 
√tdev_˛ass
->
	`waô
();

121 
	}
}

126 
	$√tdev_ªgi°î_¥ovidî
(c⁄° 
√tdev_˛ass
 *
√w_˛ass
)

128 i‡(
	`shash_föd
(&
√tdev_˛as£s
, 
√w_˛ass
->
ty≥
)) {

129 
	`VLOG_WARN
("attemptedÅoÑegister duplicateÇetdevÖrovider: %s",

130 
√w_˛ass
->
ty≥
);

131  
EEXIST
;

134 i‡(
√w_˛ass
->
öô
) {

135 
îr‹
 = 
√w_˛ass
->
	`öô
();

136 i‡(
îr‹
) {

137 
	`VLOG_ERR
("failedÅo initialize %sÇetwork device class: %s",

138 
√w_˛ass
->
ty≥
, 
	`°ªº‹
(
îr‹
));

139  
îr‹
;

143 
	`shash_add
(&
√tdev_˛as£s
, 
√w_˛ass
->
ty≥
,Çew_class);

146 
	}
}

152 
	$√tdev_uƒegi°î_¥ovidî
(c⁄° *
ty≥
)

154 
shash_node
 *
dñ_node
, *
√tdev_dev_node
;

156 
dñ_node
 = 
	`shash_föd
(&
√tdev_˛as£s
, 
ty≥
);

157 i‡(!
dñ_node
) {

158 
	`VLOG_WARN
("attemptedÅo unregisteráÇetdevÖroviderÅhat isÇot "

159 "ªgi°îed: %s", 
ty≥
);

160  
EAFNOSUPPORT
;

163 
	`SHASH_FOR_EACH
(
√tdev_dev_node
, &
√tdev_dev_shash
) {

164 
√tdev_dev
 *√tdev_dev = 
√tdev_dev_node
->
d©a
;

165 i‡(!
	`°rcmp
(
√tdev_dev
->
√tdev_˛ass
->
ty≥
,Åype)) {

166 
	`VLOG_WARN
("attemptedÅo unregister in useÇetdevÖrovider: %s",

167 
ty≥
);

168  
EBUSY
;

172 
	`shash_dñëe
(&
√tdev_˛as£s
, 
dñ_node
);

175 
	}
}

177 c⁄° 
√tdev_˛ass
 *

178 
	$√tdev_lookup_¥ovidî
(c⁄° *
ty≥
)

180 
	`√tdev_öôülize
();

181  
	`shash_föd_d©a
(&
√tdev_˛as£s
, 
ty≥
 &&Åype[0] ?Åype : "system");

182 
	}
}

187 
	$√tdev_íumî©e_ty≥s
(
s£t
 *
ty≥s
)

189 
shash_node
 *
node
;

191 
	`√tdev_öôülize
();

192 
	`s£t_˛ór
(
ty≥s
);

194 
	`SHASH_FOR_EACH
(
node
, &
√tdev_˛as£s
) {

195 c⁄° 
√tdev_˛ass
 *√tdev_˛as†
node
->
d©a
;

196 
	`s£t_add
(
ty≥s
, 
√tdev_˛ass
->
ty≥
);

198 
	}
}

208 
	$√tdev_›í
(c⁄° *
«me
, c⁄° *
ty≥
, 
√tdev
 **
√tdevp
)

210 
√tdev_dev
 *netdev_dev;

211 
îr‹
;

213 *
√tdevp
 = 
NULL
;

214 
	`√tdev_öôülize
();

216 
√tdev_dev
 = 
	`shash_föd_d©a
(&
√tdev_dev_shash
, 
«me
);

218 i‡(!
√tdev_dev
) {

219 c⁄° 
√tdev_˛ass
 *
˛ass
;

221 
˛ass
 = 
	`√tdev_lookup_¥ovidî
(
ty≥
);

222 i‡(!
˛ass
) {

223 
	`VLOG_WARN
("couldÇot createÇetdev %s of unknownÅype %s",

224 
«me
, 
ty≥
);

225  
EAFNOSUPPORT
;

227 
îr‹
 = 
˛ass
->
	`¸óã
(˛ass, 
«me
, &
√tdev_dev
);

228 i‡(
îr‹
) {

229  
îr‹
;

231 
	`as£π
(
√tdev_dev
->
√tdev_˛ass
 =
˛ass
);

235 
îr‹
 = 
√tdev_dev
->
√tdev_˛ass
->
	`›í
“ëdev_dev, 
√tdevp
);

237 i‡(!
îr‹
) {

238 
√tdev_dev
->
ªf_˙t
++;

240 i‡(!
√tdev_dev
->
ªf_˙t
) {

241 
	`√tdev_dev_unöô
(
√tdev_dev
, 
åue
);

245  
îr‹
;

246 
	}
}

251 
	$√tdev_£t_c⁄fig
(
√tdev
 *√tdev, c⁄° 
sm≠
 *
¨gs
)

253 
√tdev_dev
 *√tdev_dev = 
	`√tdev_gë_dev
(
√tdev
);

255 i‡(
√tdev_dev
->
√tdev_˛ass
->
£t_c⁄fig
) {

256 
sm≠
 
no_¨gs
 = 
	`SMAP_INITIALIZER
(&no_args);

257  
√tdev_dev
->
√tdev_˛ass
->
	`£t_c⁄fig
(netdev_dev,

258 
¨gs
 ?árg†: &
no_¨gs
);

259 } i‡(
¨gs
 && !
	`sm≠_is_em±y
(args)) {

260 
	`VLOG_WARN
("%s:árgumentsÖrovidedÅo deviceÅhat isÇot configurable",

261 
	`√tdev_gë_«me
(
√tdev
));

265 
	}
}

275 
	$√tdev_gë_c⁄fig
(c⁄° 
√tdev
 *√tdev, 
sm≠
 *
¨gs
)

277 
√tdev_dev
 *√tdev_dev = 
	`√tdev_gë_dev
(
√tdev
);

278 
îr‹
;

280 
	`sm≠_˛ór
(
¨gs
);

281 i‡(
√tdev_dev
->
√tdev_˛ass
->
gë_c⁄fig
) {

282 
îr‹
 = 
√tdev_dev
->
√tdev_˛ass
->
	`gë_c⁄fig
“ëdev_dev, 
¨gs
);

283 i‡(
îr‹
) {

284 
	`sm≠_˛ór
(
¨gs
);

287 
îr‹
 = 0;

290  
îr‹
;

291 
	}
}

295 
	$√tdev_˛o£
(
√tdev
 *netdev)

297 i‡(
√tdev
) {

298 
√tdev_dev
 *√tdev_dev = 
	`√tdev_gë_dev
(
√tdev
);

300 
	`as£π
(
√tdev_dev
->
ªf_˙t
);

301 
√tdev_dev
->
ªf_˙t
--;

302 
	`√tdev_unöô
(
√tdev
, 
åue
);

305 i‡(!
√tdev_dev
->
ªf_˙t
) {

306 
	`√tdev_dev_unöô
(
√tdev_dev
, 
åue
);

309 
	}
}

313 
boﬁ


314 
	$√tdev_exi°s
(c⁄° *
«me
)

316 
√tdev
 *netdev;

317 
îr‹
;

319 
îr‹
 = 
	`√tdev_›í
(
«me
, "sy°em", &
√tdev
);

320 i‡(!
îr‹
) {

321 
	`√tdev_˛o£
(
√tdev
);

322  
åue
;

324 i‡(
îr‹
 !
ENODEV
) {

325 
	`VLOG_WARN
("failedÅo openÇetwork device %s: %s",

326 
«me
, 
	`°ªº‹
(
îr‹
));

328  
Ál£
;

330 
	}
}

334 
boﬁ


335 
	$√tdev_is_›í
(c⁄° *
«me
)

337  !!
	`shash_föd_d©a
(&
√tdev_dev_shash
, 
«me
);

338 
	}
}

343 
	$√tdev_∑r£_«me
(c⁄° *
√tdev_«me_
, **
«me
, **
ty≥
)

345 *
√tdev_«me
 = 
	`x°rdup
(
√tdev_«me_
);

346 *
£∑øt‹
;

348 
£∑øt‹
 = 
	`°rchr
(
√tdev_«me
, '@');

349 i‡(
£∑øt‹
) {

350 *
£∑øt‹
 = '\0';

351 *
ty≥
 = 
√tdev_«me
;

352 *
«me
 = 
	`x°rdup
(
£∑øt‹
 + 1);

354 *
«me
 = 
√tdev_«me
;

355 *
ty≥
 = 
	`x°rdup
("system");

357 
	}
}

364 
	$√tdev_li°í
(
√tdev
 *netdev)

366 (*
li°í
)(
√tdev
 *);

368 
li°í
 = 
	`√tdev_gë_dev
(
√tdev
)->
√tdev_˛ass
->listen;

369  
li°í
 ? (li°í)(
√tdev
Ë: 
EOPNOTSUPP
;

370 
	}
}

390 
	$√tdev_ªcv
(
√tdev
 *√tdev, 
oÂbuf
 *
buf„r
)

392 (*
ªcv
)(
√tdev
 *, *, 
size_t
);

393 
ªtvÆ
;

395 
	`as£π
(
buf„r
->
size
 == 0);

396 
	`as£π
(
	`oÂbuf_èûroom
(
buf„r
Ë>
ETH_TOTAL_MIN
);

398 
ªcv
 = 
	`√tdev_gë_dev
(
√tdev
)->
√tdev_˛ass
->recv;

399 
ªtvÆ
 = (
ªcv


400 ? (
ªcv
)(
√tdev
, 
buf„r
->
d©a
, 
	`oÂbuf_èûroom
(buffer))

401 : -
EOPNOTSUPP
);

402 i‡(
ªtvÆ
 >= 0) {

403 
	`COVERAGE_INC
(
√tdev_ª˚ived
);

404 
buf„r
->
size
 +
ªtvÆ
;

405 i‡(
buf„r
->
size
 < 
ETH_TOTAL_MIN
) {

406 
	`oÂbuf_put_zîos
(
buf„r
, 
ETH_TOTAL_MIN
 - buf„r->
size
);

410  -
ªtvÆ
;

412 
	}
}

417 
	$√tdev_ªcv_waô
(
√tdev
 *netdev)

419 (*
ªcv_waô
)(
√tdev
 *);

421 
ªcv_waô
 = 
	`√tdev_gë_dev
(
√tdev
)->
√tdev_˛ass
->recv_wait;

422 i‡(
ªcv_waô
) {

423 
	`ªcv_waô
(
√tdev
);

425 
	}
}

429 
	$√tdev_døö
(
√tdev
 *netdev)

431 (*
døö
)(
√tdev
 *);

433 
døö
 = 
	`√tdev_gë_dev
(
√tdev
)->
√tdev_˛ass
->drain;

434  
døö
 ? 
	`døö
(
√tdev
) : 0;

435 
	}
}

450 
	$√tdev_£nd
(
√tdev
 *√tdev, c⁄° 
oÂbuf
 *
buf„r
)

452 (*
£nd
)(
√tdev
 *, c⁄° *, 
size_t
);

453 
îr‹
;

455 
£nd
 = 
	`√tdev_gë_dev
(
√tdev
)->
√tdev_˛ass
->send;

456 
îr‹
 = 
£nd
 ? (£nd)(
√tdev
, 
buf„r
->
d©a
, buf„r->
size
Ë: 
EOPNOTSUPP
;

457 i‡(!
îr‹
) {

458 
	`COVERAGE_INC
(
√tdev_£¡
);

460  
îr‹
;

461 
	}
}

471 
	$√tdev_£nd_waô
(
√tdev
 *netdev)

473 (*
£nd_waô
)(
√tdev
 *);

475 
£nd_waô
 = 
	`√tdev_gë_dev
(
√tdev
)->
√tdev_˛ass
->send_wait;

476 i‡(
£nd_waô
) {

477 
	`£nd_waô
(
√tdev
);

479 
	}
}

484 
	$√tdev_£t_ëhîaddr
(
√tdev
 *√tdev, c⁄° 
uöt8_t
 
mac
[
ETH_ADDR_LEN
])

486  
	`√tdev_gë_dev
(
√tdev
)->
√tdev_˛ass
->
	`£t_ëhîaddr
“ëdev, 
mac
);

487 
	}
}

493 
	$√tdev_gë_ëhîaddr
(c⁄° 
√tdev
 *√tdev, 
uöt8_t
 
mac
[
ETH_ADDR_LEN
])

495  
	`√tdev_gë_dev
(
√tdev
)->
√tdev_˛ass
->
	`gë_ëhîaddr
“ëdev, 
mac
);

496 
	}
}

501 
	$√tdev_gë_«me
(c⁄° 
√tdev
 *netdev)

503  
	`√tdev_gë_dev
(
√tdev
)->
«me
;

504 
	}
}

515 
	$√tdev_gë_mtu
(c⁄° 
√tdev
 *√tdev, *
mtup
)

517 c⁄° 
√tdev_˛ass
 *
˛ass
 = 
	`√tdev_gë_dev
(
√tdev
)->netdev_class;

518 
îr‹
;

520 
îr‹
 = 
˛ass
->
gë_mtu
 ? cœss->
	`gë_mtu
(
√tdev
, 
mtup
Ë: 
EOPNOTSUPP
;

521 i‡(
îr‹
) {

522 *
mtup
 = 0;

523 i‡(
îr‹
 !
EOPNOTSUPP
) {

524 
	`VLOG_DBG_RL
(&
æ
, "failedÅoÑetrieve MTU forÇetwork device %s: "

525 "%s", 
	`√tdev_gë_«me
(
√tdev
), 
	`°ªº‹
(
îr‹
));

528  
îr‹
;

529 
	}
}

538 
	$√tdev_£t_mtu
(c⁄° 
√tdev
 *√tdev, 
mtu
)

540 c⁄° 
√tdev_˛ass
 *
˛ass
 = 
	`√tdev_gë_dev
(
√tdev
)->netdev_class;

541 
îr‹
;

543 
îr‹
 = 
˛ass
->
£t_mtu
 ? cœss->
	`£t_mtu
(
√tdev
, 
mtu
Ë: 
EOPNOTSUPP
;

544 i‡(
îr‹
 &&Éº‹ !
EOPNOTSUPP
) {

545 
	`VLOG_DBG_RL
(&
æ
, "failedÅo set MTU forÇetwork device %s: %s",

546 
	`√tdev_gë_«me
(
√tdev
), 
	`°ªº‹
(
îr‹
));

549  
îr‹
;

550 
	}
}

565 
	$√tdev_gë_ifödex
(c⁄° 
√tdev
 *netdev)

567 (*
gë_ifödex
)(c⁄° 
√tdev
 *);

569 
gë_ifödex
 = 
	`√tdev_gë_dev
(
√tdev
)->
√tdev_˛ass
->get_ifindex;

571  
gë_ifödex
 ? 
	`gë_ifödex
(
√tdev
Ë: -
EOPNOTSUPP
;

572 
	}
}

583 
	$√tdev_gë_„©uªs
(c⁄° 
√tdev
 *netdev,

584 
√tdev_„©uªs
 *
cuºít
,

585 
√tdev_„©uªs
 *
advîti£d
,

586 
√tdev_„©uªs
 *
suµ‹ãd
,

587 
√tdev_„©uªs
 *
≥î
)

589 (*
gë_„©uªs
)(c⁄° 
√tdev
 *netdev,

590 
√tdev_„©uªs
 *
cuºít
,

591 
√tdev_„©uªs
 *
advîti£d
,

592 
√tdev_„©uªs
 *
suµ‹ãd
,

593 
√tdev_„©uªs
 *
≥î
);

594 
√tdev_„©uªs
 
dummy
[4];

595 
îr‹
;

597 i‡(!
cuºít
) {

598 
cuºít
 = &
dummy
[0];

600 i‡(!
advîti£d
) {

601 
advîti£d
 = &
dummy
[1];

603 i‡(!
suµ‹ãd
) {

604 
suµ‹ãd
 = &
dummy
[2];

606 i‡(!
≥î
) {

607 
≥î
 = &
dummy
[3];

610 
gë_„©uªs
 = 
	`√tdev_gë_dev
(
√tdev
)->
√tdev_˛ass
->get_features;

611 
îr‹
 = 
gë_„©uªs


612 ? 
	`gë_„©uªs
(
√tdev
, 
cuºít
, 
advîti£d
, 
suµ‹ãd
,

613 
≥î
)

614 : 
EOPNOTSUPP
;

615 i‡(
îr‹
) {

616 *
cuºít
 = *
advîti£d
 = *
suµ‹ãd
 = *
≥î
 = 0;

618  
îr‹
;

619 
	}
}

624 
uöt64_t


625 
	$√tdev_„©uªs_to_bps
(
√tdev_„©uªs
 
„©uªs
)

628 
F_1000000MB
 = 
NETDEV_F_1TB_FD
,

629 
F_100000MB
 = 
NETDEV_F_100GB_FD
,

630 
F_40000MB
 = 
NETDEV_F_40GB_FD
,

631 
F_10000MB
 = 
NETDEV_F_10GB_FD
,

632 
F_1000MB
 = 
NETDEV_F_1GB_HD
 | 
NETDEV_F_1GB_FD
,

633 
F_100MB
 = 
NETDEV_F_100MB_HD
 | 
NETDEV_F_100MB_FD
,

634 
F_10MB
 = 
NETDEV_F_10MB_HD
 | 
NETDEV_F_10MB_FD


637  ( 
„©uªs
 & 
F_1000000MB
 ? 
	`UINT64_C
(1000000000000)

638 : 
„©uªs
 & 
F_100000MB
 ? 
	`UINT64_C
(100000000000)

639 : 
„©uªs
 & 
F_40000MB
 ? 
	`UINT64_C
(40000000000)

640 : 
„©uªs
 & 
F_10000MB
 ? 
	`UINT64_C
(10000000000)

641 : 
„©uªs
 & 
F_1000MB
 ? 
	`UINT64_C
(1000000000)

642 : 
„©uªs
 & 
F_100MB
 ? 
	`UINT64_C
(100000000)

643 : 
„©uªs
 & 
F_10MB
 ? 
	`UINT64_C
(10000000)

644 : 
	`UINT64_C
(100000000));

645 
	}
}

649 
boﬁ


650 
	$√tdev_„©uªs_is_fuŒ_du∂ex
(
√tdev_„©uªs
 
„©uªs
)

652  (
„©uªs
 & (
NETDEV_F_10MB_FD
 | 
NETDEV_F_100MB_FD
 | 
NETDEV_F_1GB_FD


653 | 
NETDEV_F_10GB_FD
 | 
NETDEV_F_40GB_FD


654 | 
NETDEV_F_100GB_FD
 | 
NETDEV_F_1TB_FD
)) != 0;

655 
	}
}

660 
	$√tdev_£t_advîti£míts
(
√tdev
 *netdev,

661 
√tdev_„©uªs
 
advîti£
)

663  (
	`√tdev_gë_dev
(
√tdev
)->
√tdev_˛ass
->
£t_advîti£míts


664 ? 
	`√tdev_gë_dev
(
√tdev
)->
√tdev_˛ass
->
	`£t_advîti£míts
(

665 
√tdev
, 
advîti£
)

666 : 
EOPNOTSUPP
);

667 
	}
}

682 
	$√tdev_gë_ö4
(c⁄° 
√tdev
 *netdev,

683 
ö_addr
 *
addªss_
, ö_add∏*
√tmask_
)

685 
ö_addr
 
addªss
;

686 
ö_addr
 
√tmask
;

687 
îr‹
;

689 
îr‹
 = (
	`√tdev_gë_dev
(
√tdev
)->
√tdev_˛ass
->
gë_ö4


690 ? 
	`√tdev_gë_dev
(
√tdev
)->
√tdev_˛ass
->
	`gë_ö4
(netdev,

691 &
addªss
, &
√tmask
)

692 : 
EOPNOTSUPP
);

693 i‡(
addªss_
) {

694 
addªss_
->
s_addr
 = 
îr‹
 ? 0 : 
addªss
.s_addr;

696 i‡(
√tmask_
) {

697 
√tmask_
->
s_addr
 = 
îr‹
 ? 0 : 
√tmask
.s_addr;

699  
îr‹
;

700 
	}
}

706 
	$√tdev_£t_ö4
(
√tdev
 *√tdev, 
ö_addr
 
addr
, ö_add∏
mask
)

708  (
	`√tdev_gë_dev
(
√tdev
)->
√tdev_˛ass
->
£t_ö4


709 ? 
	`√tdev_gë_dev
(
√tdev
)->
√tdev_˛ass
->
	`£t_ö4
“ëdev, 
addr
, 
mask
)

710 : 
EOPNOTSUPP
);

711 
	}
}

717 
	$√tdev_gë_ö4_by_«me
(c⁄° *
devi˚_«me
, 
ö_addr
 *
ö4
)

719 
√tdev
 *netdev;

720 
îr‹
;

722 
îr‹
 = 
	`√tdev_›í
(
devi˚_«me
, "sy°em", &
√tdev
);

723 i‡(
îr‹
) {

724 
ö4
->
s_addr
 = 
	`ht⁄l
(0);

725  
îr‹
;

728 
îr‹
 = 
	`√tdev_gë_ö4
(
√tdev
, 
ö4
, 
NULL
);

729 
	`√tdev_˛o£
(
√tdev
);

730  
îr‹
;

731 
	}
}

736 
	$√tdev_add_rouãr
(
√tdev
 *√tdev, 
ö_addr
 
rouãr
)

738 
	`COVERAGE_INC
(
√tdev_add_rouãr
);

739  (
	`√tdev_gë_dev
(
√tdev
)->
√tdev_˛ass
->
add_rouãr


740 ? 
	`√tdev_gë_dev
(
√tdev
)->
√tdev_˛ass
->
	`add_rouãr
“ëdev, 
rouãr
)

741 : 
EOPNOTSUPP
);

742 
	}
}

752 
	$√tdev_gë_√xt_h›
(c⁄° 
√tdev
 *netdev,

753 c⁄° 
ö_addr
 *
ho°
, ö_add∏*
√xt_h›
,

754 **
√tdev_«me
)

756 
îr‹
 = (
	`√tdev_gë_dev
(
√tdev
)->
√tdev_˛ass
->
gë_√xt_h›


757 ? 
	`√tdev_gë_dev
(
√tdev
)->
√tdev_˛ass
->
	`gë_√xt_h›
(

758 
ho°
, 
√xt_h›
, 
√tdev_«me
)

759 : 
EOPNOTSUPP
);

760 i‡(
îr‹
) {

761 
√xt_h›
->
s_addr
 = 0;

762 *
√tdev_«me
 = 
NULL
;

764  
îr‹
;

765 
	}
}

773 
	$√tdev_gë_drv_öfo
(c⁄° 
√tdev
 *√tdev, 
sm≠
 *smap)

775 
√tdev_dev
 *
dev
 = 
	`√tdev_gë_dev
(
√tdev
);

777  (
dev
->
√tdev_˛ass
->
gë_drv_öfo


778 ? 
dev
->
√tdev_˛ass
->
	`gë_drv_öfo
(
√tdev
, 
sm≠
)

779 : 
EOPNOTSUPP
);

780 
	}
}

794 
	$√tdev_gë_ö6
(c⁄° 
√tdev
 *√tdev, 
ö6_addr
 *
ö6
)

796 
ö6_addr
 
dummy
;

797 
îr‹
;

799 
îr‹
 = (
	`√tdev_gë_dev
(
√tdev
)->
√tdev_˛ass
->
gë_ö6


800 ? 
	`√tdev_gë_dev
(
√tdev
)->
√tdev_˛ass
->
	`gë_ö6
(netdev,

801 
ö6
 ? in6 : &
dummy
)

802 : 
EOPNOTSUPP
);

803 i‡(
îr‹
 && 
ö6
) {

804 
	`mem£t
(
ö6
, 0,  *in6);

806  
îr‹
;

807 
	}
}

814 
	$do_upd©e_Êags
(
√tdev
 *√tdev, 
√tdev_Êags
 
off
,

815 
√tdev_Êags
 
⁄
, √tdev_Êag†*
ﬁd_Êag•
,

816 
boﬁ
 
≥rm™ít
)

818 
√tdev_Êags
 
ﬁd_Êags
;

819 
îr‹
;

821 
îr‹
 = 
	`√tdev_gë_dev
(
√tdev
)->
√tdev_˛ass
->
	`upd©e_Êags
(netdev,

822 
off
 & ~
⁄
, on, &
ﬁd_Êags
);

823 i‡(
îr‹
) {

824 
	`VLOG_WARN_RL
(&
æ
, "failedÅo %s flags forÇetwork device %s: %s",

825 
off
 || 
⁄
 ? "£t" : "gë", 
	`√tdev_gë_«me
(
√tdev
),

826 
	`°ªº‹
(
îr‹
));

827 
ﬁd_Êags
 = 0;

828 } i‡((
off
 || 
⁄
Ë&& !
≥rm™ít
) {

829 
√tdev_Êags
 
√w_Êags
 = (
ﬁd_Êags
 & ~
off
Ë| 
⁄
;

830 
√tdev_Êags
 
ch™ged_Êags
 = 
ﬁd_Êags
 ^ 
√w_Êags
;

831 i‡(
ch™ged_Êags
) {

832 i‡(!
√tdev
->
ch™ged_Êags
) {

833 
√tdev
->
ßve_Êags
 = 
ﬁd_Êags
;

835 
√tdev
->
ch™ged_Êags
 |= changed_flags;

838 i‡(
ﬁd_Êag•
) {

839 *
ﬁd_Êag•
 = 
ﬁd_Êags
;

841  
îr‹
;

842 
	}
}

848 
	$√tdev_gë_Êags
(c⁄° 
√tdev
 *
√tdev_
, 
√tdev_Êags
 *
Êag•
)

850 
√tdev
 *√tdev = 
	`CONST_CAST
(√tdev *, 
√tdev_
);

851  
	`do_upd©e_Êags
(
√tdev
, 0, 0, 
Êag•
, 
Ál£
);

852 
	}
}

859 
	$√tdev_£t_Êags
(
√tdev
 *√tdev, 
√tdev_Êags
 
Êags
,

860 
boﬁ
 
≥rm™ít
)

862  
	`do_upd©e_Êags
(
√tdev
, -1, 
Êags
, 
NULL
, 
≥rm™ít
);

863 
	}
}

870 
	$√tdev_tu∫_Êags_⁄
(
√tdev
 *√tdev, 
√tdev_Êags
 
Êags
,

871 
boﬁ
 
≥rm™ít
)

873  
	`do_upd©e_Êags
(
√tdev
, 0, 
Êags
, 
NULL
, 
≥rm™ít
);

874 
	}
}

881 
	$√tdev_tu∫_Êags_off
(
√tdev
 *√tdev, 
√tdev_Êags
 
Êags
,

882 
boﬁ
 
≥rm™ít
)

884  
	`do_upd©e_Êags
(
√tdev
, 
Êags
, 0, 
NULL
, 
≥rm™ít
);

885 
	}
}

892 
	$√tdev_¨p_lookup
(c⁄° 
√tdev
 *netdev,

893 
ovs_be32
 
ù
, 
uöt8_t
 
mac
[
ETH_ADDR_LEN
])

895 
îr‹
 = (
	`√tdev_gë_dev
(
√tdev
)->
√tdev_˛ass
->
¨p_lookup


896 ? 
	`√tdev_gë_dev
(
√tdev
)->
√tdev_˛ass
->
	`¨p_lookup
(netdev,

897 
ù
, 
mac
)

898 : 
EOPNOTSUPP
);

899 i‡(
îr‹
) {

900 
	`mem£t
(
mac
, 0, 
ETH_ADDR_LEN
);

902  
îr‹
;

903 
	}
}

906 
boﬁ


907 
	$√tdev_gë_ˇºõr
(c⁄° 
√tdev
 *netdev)

909 
îr‹
;

910 
√tdev_Êags
 
Êags
;

911 
boﬁ
 
ˇºõr
;

913 
	`√tdev_gë_Êags
(
√tdev
, &
Êags
);

914 i‡(!(
Êags
 & 
NETDEV_UP
)) {

915  
Ál£
;

918 i‡(!
	`√tdev_gë_dev
(
√tdev
)->
√tdev_˛ass
->
gë_ˇºõr
) {

919  
åue
;

922 
îr‹
 = 
	`√tdev_gë_dev
(
√tdev
)->
√tdev_˛ass
->
	`gë_ˇºõr
(netdev,

923 &
ˇºõr
);

924 i‡(
îr‹
) {

925 
	`VLOG_DBG
("%s: failedÅo getÇetwork device carrier status,ássuming "

926 "down: %s", 
	`√tdev_gë_«me
(
√tdev
), 
	`°ªº‹
(
îr‹
));

927 
ˇºõr
 = 
Ál£
;

930  
ˇºõr
;

931 
	}
}

935 
	$√tdev_gë_ˇºõr_ª£ts
(c⁄° 
√tdev
 *netdev)

937  (
	`√tdev_gë_dev
(
√tdev
)->
√tdev_˛ass
->
gë_ˇºõr_ª£ts


938 ? 
	`√tdev_gë_dev
(
√tdev
)->
√tdev_˛ass
->
	`gë_ˇºõr_ª£ts
(netdev)

940 
	}
}

951 
	$√tdev_£t_miim⁄_öãrvÆ
(
√tdev
 *√tdev, 
öãrvÆ
)

953 
√tdev_dev
 *√tdev_dev = 
	`√tdev_gë_dev
(
√tdev
);

954  (
√tdev_dev
->
√tdev_˛ass
->
£t_miim⁄_öãrvÆ


955 ? 
√tdev_dev
->
√tdev_˛ass
->
	`£t_miim⁄_öãrvÆ
(
√tdev
, 
öãrvÆ
)

956 : 
EOPNOTSUPP
);

957 
	}
}

961 
	$√tdev_gë_°©s
(c⁄° 
√tdev
 *√tdev, 
√tdev_°©s
 *
°©s
)

963 
îr‹
;

965 
	`COVERAGE_INC
(
√tdev_gë_°©s
);

966 
îr‹
 = (
	`√tdev_gë_dev
(
√tdev
)->
√tdev_˛ass
->
gë_°©s


967 ? 
	`√tdev_gë_dev
(
√tdev
)->
√tdev_˛ass
->
	`gë_°©s
“ëdev, 
°©s
)

968 : 
EOPNOTSUPP
);

969 i‡(
îr‹
) {

970 
	`mem£t
(
°©s
, 0xff,  *stats);

972  
îr‹
;

973 
	}
}

981 
	$√tdev_£t_°©s
(
√tdev
 *√tdev, c⁄° 
√tdev_°©s
 *
°©s
)

983  (
	`√tdev_gë_dev
(
√tdev
)->
√tdev_˛ass
->
£t_°©s


984 ? 
	`√tdev_gë_dev
(
√tdev
)->
√tdev_˛ass
->
	`£t_°©s
“ëdev, 
°©s
)

985 : 
EOPNOTSUPP
);

986 
	}
}

992 
	$√tdev_£t_pﬁicög
(
√tdev
 *√tdev, 
uöt32_t
 
kbôs_øã
,

993 
uöt32_t
 
kbôs_bur°
)

995  (
	`√tdev_gë_dev
(
√tdev
)->
√tdev_˛ass
->
£t_pﬁicög


996 ? 
	`√tdev_gë_dev
(
√tdev
)->
√tdev_˛ass
->
	`£t_pﬁicög
(netdev,

997 
kbôs_øã
, 
kbôs_bur°
)

998 : 
EOPNOTSUPP
);

999 
	}
}

1015 
	$√tdev_gë_qos_ty≥s
(c⁄° 
√tdev
 *√tdev, 
s£t
 *
ty≥s
)

1017 c⁄° 
√tdev_˛ass
 *
˛ass
 = 
	`√tdev_gë_dev
(
√tdev
)->netdev_class;

1018  (
˛ass
->
gë_qos_ty≥s


1019 ? 
˛ass
->
	`gë_qos_ty≥s
(
√tdev
, 
ty≥s
)

1021 
	}
}

1029 
	$√tdev_gë_qos_ˇ∑bûôõs
(c⁄° 
√tdev
 *√tdev, c⁄° *
ty≥
,

1030 
√tdev_qos_ˇ∑bûôõs
 *
ˇps
)

1032 c⁄° 
√tdev_˛ass
 *
˛ass
 = 
	`√tdev_gë_dev
(
√tdev
)->netdev_class;

1034 i‡(*
ty≥
) {

1035 
ªtvÆ
 = (
˛ass
->
gë_qos_ˇ∑bûôõs


1036 ? 
˛ass
->
	`gë_qos_ˇ∑bûôõs
(
√tdev
, 
ty≥
, 
ˇps
)

1037 : 
EOPNOTSUPP
);

1038 i‡(
ªtvÆ
) {

1039 
	`mem£t
(
ˇps
, 0,  *caps);

1041  
ªtvÆ
;

1044 
	`mem£t
(
ˇps
, 0,  *caps);

1047 
	}
}

1055 
	$√tdev_gë_n_queues
(c⁄° 
√tdev
 *netdev,

1056 c⁄° *
ty≥
, *
n_queue•
)

1058 
√tdev_qos_ˇ∑bûôõs
 
ˇps
;

1059 
ªtvÆ
;

1061 
ªtvÆ
 = 
	`√tdev_gë_qos_ˇ∑bûôõs
(
√tdev
, 
ty≥
, &
ˇps
);

1062 *
n_queue•
 = 
ˇps
.
n_queues
;

1063  
ªtvÆ
;

1064 
	}
}

1084 
	$√tdev_gë_qos
(c⁄° 
√tdev
 *netdev,

1085 c⁄° **
ty≥p
, 
sm≠
 *
dëaûs
)

1087 c⁄° 
√tdev_˛ass
 *
˛ass
 = 
	`√tdev_gë_dev
(
√tdev
)->netdev_class;

1088 
ªtvÆ
;

1090 i‡(
˛ass
->
gë_qos
) {

1091 
ªtvÆ
 = 
˛ass
->
	`gë_qos
(
√tdev
, 
ty≥p
, 
dëaûs
);

1092 i‡(
ªtvÆ
) {

1093 *
ty≥p
 = 
NULL
;

1094 
	`sm≠_˛ór
(
dëaûs
);

1096  
ªtvÆ
;

1099 *
ty≥p
 = "";

1102 
	}
}

1123 
	$√tdev_£t_qos
(
√tdev
 *netdev,

1124 c⁄° *
ty≥
, c⁄° 
sm≠
 *
dëaûs
)

1126 c⁄° 
√tdev_˛ass
 *
˛ass
 = 
	`√tdev_gë_dev
(
√tdev
)->netdev_class;

1128 i‡(!
ty≥
) {

1129 
ty≥
 = "";

1132 i‡(
˛ass
->
£t_qos
) {

1133 i‡(!
dëaûs
) {

1134 
sm≠
 
em±y
 = 
	`SMAP_INITIALIZER
(&empty);

1135 
dëaûs
 = &
em±y
;

1137  
˛ass
->
	`£t_qos
(
√tdev
, 
ty≥
, 
dëaûs
);

1139  *
ty≥
 ? 
EOPNOTSUPP
 : 0;

1141 
	}
}

1158 
	$√tdev_gë_queue
(c⁄° 
√tdev
 *netdev,

1159 
queue_id
, 
sm≠
 *
dëaûs
)

1161 c⁄° 
√tdev_˛ass
 *
˛ass
 = 
	`√tdev_gë_dev
(
√tdev
)->netdev_class;

1162 
ªtvÆ
;

1164 
ªtvÆ
 = (
˛ass
->
gë_queue


1165 ? 
˛ass
->
	`gë_queue
(
√tdev
, 
queue_id
, 
dëaûs
)

1166 : 
EOPNOTSUPP
);

1167 i‡(
ªtvÆ
) {

1168 
	`sm≠_˛ór
(
dëaûs
);

1170  
ªtvÆ
;

1171 
	}
}

1186 
	$√tdev_£t_queue
(
√tdev
 *netdev,

1187 
queue_id
, c⁄° 
sm≠
 *
dëaûs
)

1189 c⁄° 
√tdev_˛ass
 *
˛ass
 = 
	`√tdev_gë_dev
(
√tdev
)->netdev_class;

1190  (
˛ass
->
£t_queue


1191 ? 
˛ass
->
	`£t_queue
(
√tdev
, 
queue_id
, 
dëaûs
)

1192 : 
EOPNOTSUPP
);

1193 
	}
}

1206 
	$√tdev_dñëe_queue
(
√tdev
 *√tdev, 
queue_id
)

1208 c⁄° 
√tdev_˛ass
 *
˛ass
 = 
	`√tdev_gë_dev
(
√tdev
)->netdev_class;

1209  (
˛ass
->
dñëe_queue


1210 ? 
˛ass
->
	`dñëe_queue
(
√tdev
, 
queue_id
)

1211 : 
EOPNOTSUPP
);

1212 
	}
}

1219 
	$√tdev_gë_queue_°©s
(c⁄° 
√tdev
 *√tdev, 
queue_id
,

1220 
√tdev_queue_°©s
 *
°©s
)

1222 c⁄° 
√tdev_˛ass
 *
˛ass
 = 
	`√tdev_gë_dev
(
√tdev
)->netdev_class;

1223 
ªtvÆ
;

1225 
ªtvÆ
 = (
˛ass
->
gë_queue_°©s


1226 ? 
˛ass
->
	`gë_queue_°©s
(
√tdev
, 
queue_id
, 
°©s
)

1227 : 
EOPNOTSUPP
);

1228 i‡(
ªtvÆ
) {

1229 
	`mem£t
(
°©s
, 0xff,  *stats);

1231  
ªtvÆ
;

1232 
	}
}

1251 
	$√tdev_dump_queues
(c⁄° 
√tdev
 *netdev,

1252 
√tdev_dump_queues_cb
 *
cb
, *
aux
)

1254 c⁄° 
√tdev_˛ass
 *
˛ass
 = 
	`√tdev_gë_dev
(
√tdev
)->netdev_class;

1255  (
˛ass
->
dump_queues


1256 ? 
˛ass
->
	`dump_queues
(
√tdev
, 
cb
, 
aux
)

1257 : 
EOPNOTSUPP
);

1258 
	}
}

1273 
	$√tdev_dump_queue_°©s
(c⁄° 
√tdev
 *netdev,

1274 
√tdev_dump_queue_°©s_cb
 *
cb
, *
aux
)

1276 c⁄° 
√tdev_˛ass
 *
˛ass
 = 
	`√tdev_gë_dev
(
√tdev
)->netdev_class;

1277  (
˛ass
->
dump_queue_°©s


1278 ? 
˛ass
->
	`dump_queue_°©s
(
√tdev
, 
cb
, 
aux
)

1279 : 
EOPNOTSUPP
);

1280 
	}
}

1290 
	$√tdev_ch™ge_£q
(c⁄° 
√tdev
 *netdev)

1292  
	`√tdev_gë_dev
(
√tdev
)->
√tdev_˛ass
->
	`ch™ge_£q
(netdev);

1293 
	}
}

1303 
	$√tdev_dev_öô
(
√tdev_dev
 *√tdev_dev, c⁄° *
«me
,

1304 c⁄° 
√tdev_˛ass
 *netdev_class)

1306 
	`as£π
(!
	`shash_föd
(&
√tdev_dev_shash
, 
«me
));

1308 
	`mem£t
(
√tdev_dev
, 0,  *netdev_dev);

1309 
√tdev_dev
->
√tdev_˛ass
 =Çetdev_class;

1310 
√tdev_dev
->
«me
 = 
	`x°rdup
(name);

1311 
√tdev_dev
->
node
 = 
	`shash_add
(&
√tdev_dev_shash
, 
«me
,Çetdev_dev);

1312 
	}
}

1322 
	$√tdev_dev_unöô
(
√tdev_dev
 *√tdev_dev, 
boﬁ
 
de°roy
)

1324 *
«me
 = 
√tdev_dev
->name;

1326 
	`as£π
(!
√tdev_dev
->
ªf_˙t
);

1328 
	`shash_dñëe
(&
√tdev_dev_shash
, 
√tdev_dev
->
node
);

1330 i‡(
de°roy
) {

1331 
√tdev_dev
->
√tdev_˛ass
->
	`de°roy
(netdev_dev);

1333 
	`‰ì
(
«me
);

1334 
	}
}

1340 
	$√tdev_dev_gë_ty≥
(c⁄° 
√tdev_dev
 *netdev_dev)

1342  
√tdev_dev
->
√tdev_˛ass
->
ty≥
;

1343 
	}
}

1346 c⁄° 
√tdev_˛ass
 *

1347 
	$√tdev_dev_gë_˛ass
(c⁄° 
√tdev_dev
 *netdev_dev)

1349  
√tdev_dev
->
√tdev_˛ass
;

1350 
	}
}

1356 
	$√tdev_dev_gë_«me
(c⁄° 
√tdev_dev
 *netdev_dev)

1358  
√tdev_dev
->
«me
;

1359 
	}
}

1364 
√tdev_dev
 *

1365 
	$√tdev_dev_‰om_«me
(c⁄° *
«me
)

1367  
	`shash_föd_d©a
(&
√tdev_dev_shash
, 
«me
);

1368 
	}
}

1375 
	$√tdev_dev_gë_devi˚s
(c⁄° 
√tdev_˛ass
 *netdev_class,

1376 
shash
 *
devi˚_li°
)

1378 
shash_node
 *
node
;

1379 
	`SHASH_FOR_EACH
 (
node
, &
√tdev_dev_shash
) {

1380 
√tdev_dev
 *
dev
 = 
node
->
d©a
;

1382 i‡(
dev
->
√tdev_˛ass
 ==Çetdev_class) {

1383 
	`shash_add
(
devi˚_li°
, 
node
->
«me
,Çode->
d©a
);

1386 
	}
}

1393 
	$√tdev_öô
(
√tdev
 *√tdev, 
√tdev_dev
 *netdev_dev)

1395 
	`mem£t
(
√tdev
, 0,  *netdev);

1396 
√tdev
->
√tdev_dev
 =Çetdev_dev;

1397 
	`li°_push_back
(&
√tdev_li°
, &
√tdev
->
node
);

1398 
	}
}

1407 
	$√tdev_unöô
(
√tdev
 *√tdev, 
boﬁ
 
˛o£
)

1410 
îr‹
 = 
	`ª°‹e_Êags
(
√tdev
);

1411 
	`li°_ªmove
(&
√tdev
->
node
);

1412 i‡(
îr‹
) {

1413 
	`VLOG_WARN
("failedÅoÑestoreÇetwork device flags on %s: %s",

1414 
	`√tdev_gë_«me
(
√tdev
), 
	`°ªº‹
(
îr‹
));

1417 i‡(
˛o£
) {

1418 
	`√tdev_gë_dev
(
√tdev
)->
√tdev_˛ass
->
	`˛o£
(netdev);

1420 
	}
}

1427 
	$√tdev_gë_ty≥
(c⁄° 
√tdev
 *netdev)

1429  
	`√tdev_gë_dev
(
√tdev
)->
√tdev_˛ass
->
ty≥
;

1430 
	}
}

1432 
√tdev_dev
 *

1433 
	$√tdev_gë_dev
(c⁄° 
√tdev
 *netdev)

1435  
√tdev
->
√tdev_dev
;

1436 
	}
}

1444 
	$ª°‹e_Êags
(
√tdev
 *netdev)

1446 i‡(
√tdev
->
ch™ged_Êags
) {

1447 
√tdev_Êags
 
ª°‹e
 = 
√tdev
->
ßve_Êags
 &Çëdev->
ch™ged_Êags
;

1448 
√tdev_Êags
 
ﬁd_Êags
;

1449  
	`√tdev_gë_dev
(
√tdev
)->
√tdev_˛ass
->
	`upd©e_Êags
(netdev,

1450 
√tdev
->
ch™ged_Êags
 & ~
ª°‹e
,

1451 
ª°‹e
, &
ﬁd_Êags
);

1454 
	}
}

1459 
	$˛o£_Æl_√tdevs
(*
aux
 
OVS_UNUSED
)

1461 
√tdev
 *√tdev, *
√xt
;

1462 
	`LIST_FOR_EACH_SAFE
(
√tdev
, 
√xt
, 
node
, &
√tdev_li°
) {

1463 
	`√tdev_˛o£
(
√tdev
);

1465 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/netdev.h

17 #i‚de‡
NETDEV_H


18 
	#NETDEV_H
 1

	)

20 
	~<°dboﬁ.h
>

21 
	~<°ddef.h
>

22 
	~<°döt.h
>

23 
	~"›ívswôch/ty≥s.h
"

25 #ifde‡ 
__˝lu•lus


35 
oÂbuf
;

36 
ö_addr
;

37 
ö6_addr
;

38 
sm≠
;

39 
s£t
;

41 
	e√tdev_Êags
 {

42 
NETDEV_UP
 = 0x0001,

43 
NETDEV_PROMISC
 = 0x0002,

44 
NETDEV_LOOPBACK
 = 0x0004

50 
	s√tdev_°©s
 {

51 
uöt64_t
 
rx_∑ckës
;

52 
uöt64_t
 
tx_∑ckës
;

53 
uöt64_t
 
rx_byãs
;

54 
uöt64_t
 
tx_byãs
;

55 
uöt64_t
 
rx_îr‹s
;

56 
uöt64_t
 
tx_îr‹s
;

57 
uöt64_t
 
rx_dr›≥d
;

58 
uöt64_t
 
tx_dr›≥d
;

59 
uöt64_t
 
mu…iˇ°
;

60 
uöt64_t
 
cﬁlisi⁄s
;

63 
uöt64_t
 
rx_Àngth_îr‹s
;

64 
uöt64_t
 
rx_ovî_îr‹s
;

65 
uöt64_t
 
rx_¸c_îr‹s
;

66 
uöt64_t
 
rx_‰ame_îr‹s
;

67 
uöt64_t
 
rx_fifo_îr‹s
;

68 
uöt64_t
 
rx_mis£d_îr‹s
;

71 
uöt64_t
 
tx_ab‹ãd_îr‹s
;

72 
uöt64_t
 
tx_ˇºõr_îr‹s
;

73 
uöt64_t
 
tx_fifo_îr‹s
;

74 
uöt64_t
 
tx_hóπbót_îr‹s
;

75 
uöt64_t
 
tx_wödow_îr‹s
;

78 
√tdev
;

79 
√tdev_˛ass
;

81 
√tdev_run
();

82 
√tdev_waô
();

84 
√tdev_íumî©e_ty≥s
(
s£t
 *
ty≥s
);

87 
√tdev_›í
(c⁄° *
«me
, c⁄° *
ty≥
, 
√tdev
 **);

88 
√tdev_˛o£
(
√tdev
 *);

90 
boﬁ
 
√tdev_exi°s
(c⁄° *
«me
);

91 
boﬁ
 
√tdev_is_›í
(c⁄° *
«me
);

93 
√tdev_∑r£_«me
(c⁄° *
√tdev_«me
, **
«me
, **
ty≥
);

96 
√tdev_£t_c⁄fig
(
√tdev
 *, c⁄° 
sm≠
 *
¨gs
);

97 
√tdev_gë_c⁄fig
(c⁄° 
√tdev
 *, 
sm≠
 *);

100 c⁄° *
√tdev_gë_«me
(c⁄° 
√tdev
 *);

101 c⁄° *
√tdev_gë_ty≥
(c⁄° 
√tdev
 *);

102 
√tdev_gë_mtu
(c⁄° 
√tdev
 *, *
mtup
);

103 
√tdev_£t_mtu
(c⁄° 
√tdev
 *, 
mtu
);

104 
√tdev_gë_ifödex
(c⁄° 
√tdev
 *);

107 
√tdev_li°í
(
√tdev
 *);

108 
√tdev_ªcv
(
√tdev
 *, 
oÂbuf
 *);

109 
√tdev_ªcv_waô
(
√tdev
 *);

110 
√tdev_døö
(
√tdev
 *);

112 
√tdev_£nd
(
√tdev
 *, c⁄° 
oÂbuf
 *);

113 
√tdev_£nd_waô
(
√tdev
 *);

116 
√tdev_£t_ëhîaddr
(
√tdev
 *, c⁄° 
uöt8_t
 
mac
[6]);

117 
√tdev_gë_ëhîaddr
(c⁄° 
√tdev
 *, 
uöt8_t
 
mac
[6]);

120 
boﬁ
 
√tdev_gë_ˇºõr
(c⁄° 
√tdev
 *);

121 
√tdev_gë_ˇºõr_ª£ts
(c⁄° 
√tdev
 *);

122 
√tdev_£t_miim⁄_öãrvÆ
(
√tdev
 *, 
öãrvÆ
);

125 
	e√tdev_„©uªs
 {

126 
NETDEV_F_10MB_HD
 = 1 << 0,

127 
NETDEV_F_10MB_FD
 = 1 << 1,

128 
NETDEV_F_100MB_HD
 = 1 << 2,

129 
NETDEV_F_100MB_FD
 = 1 << 3,

130 
NETDEV_F_1GB_HD
 = 1 << 4,

131 
NETDEV_F_1GB_FD
 = 1 << 5,

132 
NETDEV_F_10GB_FD
 = 1 << 6,

133 
NETDEV_F_40GB_FD
 = 1 << 7,

134 
NETDEV_F_100GB_FD
 = 1 << 8,

135 
NETDEV_F_1TB_FD
 = 1 << 9,

136 
NETDEV_F_OTHER
 = 1 << 10,

137 
NETDEV_F_COPPER
 = 1 << 11,

138 
NETDEV_F_FIBER
 = 1 << 12,

139 
NETDEV_F_AUTONEG
 = 1 << 13,

140 
NETDEV_F_PAUSE
 = 1 << 14,

141 
NETDEV_F_PAUSE_ASYM
 = 1 << 15,

144 
√tdev_gë_„©uªs
(c⁄° 
√tdev
 *,

145 
√tdev_„©uªs
 *
cuºít
,

146 
√tdev_„©uªs
 *
advîti£d
,

147 
√tdev_„©uªs
 *
suµ‹ãd
,

148 
√tdev_„©uªs
 *
≥î
);

149 
uöt64_t
 
√tdev_„©uªs_to_bps
(
√tdev_„©uªs
 
„©uªs
);

150 
boﬁ
 
√tdev_„©uªs_is_fuŒ_du∂ex
(
√tdev_„©uªs
 
„©uªs
);

151 
√tdev_£t_advîti£míts
(
√tdev
 *, 
√tdev_„©uªs
 
advîti£
);

154 
√tdev_gë_ö4
(c⁄° 
√tdev
 *, 
ö_addr
 *
addªss
,

155 
ö_addr
 *
√tmask
);

156 
√tdev_£t_ö4
(
√tdev
 *, 
ö_addr
 
addr
, ö_add∏
mask
);

157 
√tdev_gë_ö4_by_«me
(c⁄° *
devi˚_«me
, 
ö_addr
 *
ö4
);

158 
√tdev_gë_ö6
(c⁄° 
√tdev
 *, 
ö6_addr
 *);

159 
√tdev_add_rouãr
(
√tdev
 *, 
ö_addr
 
rouãr
);

160 
√tdev_gë_√xt_h›
(c⁄° 
√tdev
 *, c⁄° 
ö_addr
 *
ho°
,

161 
ö_addr
 *
√xt_h›
, **);

162 
√tdev_gë_drv_öfo
(c⁄° 
√tdev
 *, 
sm≠
 *);

163 
√tdev_¨p_lookup
(c⁄° 
√tdev
 *, 
ovs_be32
 
ù
, 
uöt8_t
 
mac
[6]);

165 
√tdev_gë_Êags
(c⁄° 
√tdev
 *, 
√tdev_Êags
 *);

166 
√tdev_£t_Êags
(
√tdev
 *, 
√tdev_Êags
, 
boﬁ
 
≥rm™ít
);

167 
√tdev_tu∫_Êags_⁄
(
√tdev
 *, 
√tdev_Êags
, 
boﬁ
 
≥rm™ít
);

168 
√tdev_tu∫_Êags_off
(
√tdev
 *, 
√tdev_Êags
, 
boﬁ
 
≥rm™ít
);

169 
√tdev
 *
√tdev_föd_dev_by_ö4
(c⁄° 
ö_addr
 *);

172 
√tdev_gë_°©s
(c⁄° 
√tdev
 *, 
√tdev_°©s
 *);

173 
√tdev_£t_°©s
(
√tdev
 *, c⁄° 
√tdev_°©s
 *);

176 
	s√tdev_qos_ˇ∑bûôõs
 {

177 
n_queues
;

180 
	s√tdev_queue_°©s
 {

182 
uöt64_t
 
tx_byãs
;

183 
uöt64_t
 
tx_∑ckës
;

184 
uöt64_t
 
tx_îr‹s
;

187 
√tdev_£t_pﬁicög
(
√tdev
 *, 
uöt32_t
 
kbôs_øã
,

188 
uöt32_t
 
kbôs_bur°
);

190 
√tdev_gë_qos_ty≥s
(c⁄° 
√tdev
 *, 
s£t
 *
ty≥s
);

191 
√tdev_gë_qos_ˇ∑bûôõs
(c⁄° 
√tdev
 *,

192 c⁄° *
ty≥
,

193 
√tdev_qos_ˇ∑bûôõs
 *);

194 
√tdev_gë_n_queues
(c⁄° 
√tdev
 *,

195 c⁄° *
ty≥
, *
n_queue•
);

197 
√tdev_gë_qos
(c⁄° 
√tdev
 *,

198 c⁄° **
ty≥p
, 
sm≠
 *
dëaûs
);

199 
√tdev_£t_qos
(
√tdev
 *,

200 c⁄° *
ty≥
, c⁄° 
sm≠
 *
dëaûs
);

202 
√tdev_gë_queue
(c⁄° 
√tdev
 *,

203 
queue_id
, 
sm≠
 *
dëaûs
);

204 
√tdev_£t_queue
(
√tdev
 *,

205 
queue_id
, c⁄° 
sm≠
 *
dëaûs
);

206 
√tdev_dñëe_queue
(
√tdev
 *, 
queue_id
);

207 
√tdev_gë_queue_°©s
(c⁄° 
√tdev
 *, 
queue_id
,

208 
√tdev_queue_°©s
 *);

210 
	t√tdev_dump_queues_cb
(
	tqueue_id
,

211 c⁄° 
	tsm≠
 *
	tdëaûs
, *
	taux
);

212 
√tdev_dump_queues
(c⁄° 
√tdev
 *,

213 
√tdev_dump_queues_cb
 *, *
aux
);

215 
	t√tdev_dump_queue_°©s_cb
(
	tqueue_id
,

216 
	t√tdev_queue_°©s
 *,

217 *
	taux
);

218 
√tdev_dump_queue_°©s
(c⁄° 
√tdev
 *,

219 
√tdev_dump_queue_°©s_cb
 *, *
aux
);

221 
√tdev_ch™ge_£q
(c⁄° 
√tdev
 *netdev);

223 #ifde‡ 
__˝lu•lus


	@/home/lsch/mytest/openvswitch-1.9.0/lib/netflow.h

17 #i‚de‡
NETFLOW_H


18 
	#NETFLOW_H
 1

	)

22 
	~<°döt.h
>

23 
	~"›ívswôch/ty≥s.h
"

24 
	~"utû.h
"

26 
	#NETFLOW_V5_VERSION
 5

	)

32 
	s√tÊow_v5_hódî
 {

33 
ovs_be16
 
	mvîsi⁄
;

34 
ovs_be16
 
	mcou¡
;

35 
ovs_be32
 
	msysu±ime
;

36 
ovs_be32
 
	munix_£cs
;

37 
ovs_be32
 
	munix_n£cs
;

39 
ovs_be32
 
	mÊow_£q
;

41 
uöt8_t
 
	mígöe_ty≥
;

42 
uöt8_t
 
	mígöe_id
;

43 
ovs_be16
 
	mßm∂ög_öãrvÆ
;

45 
BUILD_ASSERT_DECL
((
√tÊow_v5_hódî
) == 24);

50 
	s√tÊow_v5_ªc‹d
 {

51 
ovs_be32
 
	m§c_addr
;

52 
ovs_be32
 
	md°_addr
;

53 
ovs_be32
 
	m√xth›
;

54 
ovs_be16
 
	möput
;

55 
ovs_be16
 
	mouçut
;

56 
ovs_be32
 
	m∑ckë_cou¡
;

57 
ovs_be32
 
	mbyã_cou¡
;

58 
ovs_be32
 
	möô_time
;

59 
ovs_be32
 
	mu£d_time
;

65 
ovs_be16
 
	m§c_p‹t
;

66 
ovs_be16
 
	md°_p‹t
;

68 
uöt8_t
 
	m∑d1
;

69 
uöt8_t
 
	mt˝_Êags
;

70 
uöt8_t
 
	mù_¥Ÿo
;

71 
uöt8_t
 
	mù_tos
;

72 
ovs_be16
 
	m§c_as
;

73 
ovs_be16
 
	md°_as
;

74 
uöt8_t
 
	m§c_mask
;

75 
uöt8_t
 
	md°_mask
;

76 
uöt8_t
 
	m∑d
[2];

78 
BUILD_ASSERT_DECL
((
√tÊow_v5_ªc‹d
) == 48);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/netlink-notifier.c

17 
	~<c⁄fig.h
>

19 
	~"√éök-nŸifõr.h
"

21 
	~<as£π.h
>

22 
	~<î∫o.h
>

23 
	~<pﬁl.h
>

24 
	~<°dlib.h
>

26 
	~"covîage.h
"

27 
	~"√éök.h
"

28 
	~"√éök-sockë.h
"

29 
	~"oÂbuf.h
"

30 
	~"vlog.h
"

32 
VLOG_DEFINE_THIS_MODULE
(
√éök_nŸifõr
);

34 
COVERAGE_DEFINE
(
∆n_ch™ged
);

36 
∆n_ªp‹t
(
∆n
 *∆n, *
ch™ge
);

38 
	s∆n
 {

39 
∆_sock
 *
	mnŸify_sock
;

40 
li°
 
	mÆl_nŸifõrs
;

41 
boﬁ
 
	mhas_run
;

44 
	mmu…iˇ°_group
;

45 
	m¥Ÿocﬁ
;

46 
∆n_∑r£_func
 *
	m∑r£
;

47 *
	mch™ge
;

50 
	s∆n_nŸifõr
 {

51 
∆n
 *
	m∆n
;

53 
li°
 
	mnode
;

54 
∆n_nŸify_func
 *
	mcb
;

55 *
	maux
;

63 
∆n
 *

64 
	$∆n_¸óã
(
¥Ÿocﬁ
, 
mu…iˇ°_group
, 
∆n_∑r£_func
 *
∑r£
,

65 *
ch™ge
)

67 
∆n
 *nln;

69 
∆n
 = 
	`xzÆloc
( *nln);

70 
∆n
->
nŸify_sock
 = 
NULL
;

71 
∆n
->
¥Ÿocﬁ
 =Örotocol;

72 
∆n
->
mu…iˇ°_group
 = multicast_group;

73 
∆n
->
∑r£
 =Öarse;

74 
∆n
->
ch™ge
 = change;

75 
∆n
->
has_run
 = 
Ál£
;

77 
	`li°_öô
(&
∆n
->
Æl_nŸifõrs
);

78  
∆n
;

79 
	}
}

87 
	$∆n_de°roy
(
∆n
 *nln)

89 i‡(
∆n
) {

90 
	`as£π
(
	`li°_is_em±y
(&
∆n
->
Æl_nŸifõrs
));

91 
	`∆_sock_de°roy
(
∆n
->
nŸify_sock
);

92 
	`‰ì
(
∆n
);

94 
	}
}

104 
∆n_nŸifõr
 *

105 
	$∆n_nŸifõr_¸óã
(
∆n
 *∆n, 
∆n_nŸify_func
 *
cb
, *
aux
)

107 
∆n_nŸifõr
 *
nŸifõr
;

109 i‡(!
∆n
->
nŸify_sock
) {

110 
∆_sock
 *
sock
;

111 
îr‹
;

113 
îr‹
 = 
	`∆_sock_¸óã
(
∆n
->
¥Ÿocﬁ
, &
sock
);

114 i‡(!
îr‹
) {

115 
îr‹
 = 
	`∆_sock_joö_mcgroup
(
sock
, 
∆n
->
mu…iˇ°_group
);

117 i‡(
îr‹
) {

118 
	`∆_sock_de°roy
(
sock
);

119 
	`VLOG_WARN
("couldÇŸ cª©ê√éök sockë: %s", 
	`°ªº‹
(
îr‹
));

120  
NULL
;

122 
∆n
->
nŸify_sock
 = 
sock
;

126 
	`∆n_run
(
∆n
);

129 
nŸifõr
 = 
	`xmÆloc
( *notifier);

130 
	`li°_push_back
(&
∆n
->
Æl_nŸifõrs
, &
nŸifõr
->
node
);

131 
nŸifõr
->
cb
 = cb;

132 
nŸifõr
->
aux
 =áux;

133 
nŸifõr
->
∆n
 =Çln;

134  
nŸifõr
;

135 
	}
}

140 
	$∆n_nŸifõr_de°roy
(
∆n_nŸifõr
 *
nŸifõr
)

142 i‡(
nŸifõr
) {

143 
∆n
 *∆¿
nŸifõr
->nln;

145 
	`li°_ªmove
(&
nŸifõr
->
node
);

146 i‡(
	`li°_is_em±y
(&
∆n
->
Æl_nŸifõrs
)) {

147 
	`∆_sock_de°roy
(
∆n
->
nŸify_sock
);

148 
∆n
->
nŸify_sock
 = 
NULL
;

150 
	`‰ì
(
nŸifõr
);

152 
	}
}

157 
	$∆n_run
(
∆n
 *nln)

159 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 5);

161 i‡(!
∆n
->
nŸify_sock
 ||Ç ->
has_run
) {

165 
∆n
->
has_run
 = 
åue
;

167 
uöt64_t
 
buf_°ub
[4096 / 8];

168 
oÂbuf
 
buf
;

169 
îr‹
;

171 
	`oÂbuf_u£_°ub
(&
buf
, 
buf_°ub
,  buf_stub);

172 
îr‹
 = 
	`∆_sock_ªcv
(
∆n
->
nŸify_sock
, &
buf
, 
Ál£
);

173 i‡(!
îr‹
) {

174 i‡(
∆n
->
	`∑r£
(&
buf
,Ç ->
ch™ge
)) {

175 
	`∆n_ªp‹t
(
∆n
,Ç ->
ch™ge
);

177 
	`VLOG_WARN_RL
(&
æ
, "received badÇetlink message");

178 
	`∆n_ªp‹t
(
∆n
, 
NULL
);

180 
	`oÂbuf_unöô
(&
buf
);

181 } i‡(
îr‹
 =
EAGAIN
) {

184 i‡(
îr‹
 =
ENOBUFS
) {

185 
	`VLOG_WARN_RL
(&
æ
, "netlinkÑeceive buffer overflowed");

187 
	`VLOG_WARN_RL
(&
æ
, "errorÑeadingÇetlink socket: %s",

188 
	`°ªº‹
(
îr‹
));

190 
	`∆n_ªp‹t
(
∆n
, 
NULL
);

193 
	}
}

197 
	$∆n_waô
(
∆n
 *nln)

199 
∆n
->
has_run
 = 
Ál£
;

200 i‡(
∆n
->
nŸify_sock
) {

201 
	`∆_sock_waô
(
∆n
->
nŸify_sock
, 
POLLIN
);

203 
	}
}

206 
	$∆n_ªp‹t
(
∆n
 *∆n, *
ch™ge
)

208 
∆n_nŸifõr
 *
nŸifõr
;

210 i‡(
ch™ge
) {

211 
	`COVERAGE_INC
(
∆n_ch™ged
);

214 
	`LIST_FOR_EACH
 (
nŸifõr
, 
node
, &
∆n
->
Æl_nŸifõrs
) {

215 
nŸifõr
->
	`cb
(
ch™ge
,ÇŸifõr->
aux
);

217 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/netlink-notifier.h

17 #i‚de‡
NETLINK_NOTIFIER_H


18 
	#NETLINK_NOTIFIER_H
 1

	)

23 
	~"li°.h
"

25 
	g∆n
;

26 
	g∆n_nŸifõr
;

28 
	g∆©å
;

29 
	goÂbuf
;

36 
	t∆n_nŸify_func
(c⁄° *
	tch™ge
, *
	taux
);

40 
boﬁ
 
	t∆n_∑r£_func
(
	toÂbuf
 *
	tbuf
, *
	tch™ge
);

42 
∆n
 *
∆n_¸óã
(
¥Ÿocﬁ
, 
mu…iˇ°_group
, 
∆n_∑r£_func
 *,

43 *
ch™ge
);

44 
∆n_de°roy
(
∆n
 *);

45 
∆n_nŸifõr
 *
∆n_nŸifõr_¸óã
(
∆n
 *, 
∆n_nŸify_func
 *,

46 *
aux
);

47 
∆n_nŸifõr_de°roy
(
∆n_nŸifõr
 *);

48 
∆n_run
(
∆n
 *);

49 
∆n_waô
(
∆n
 *);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/netlink-protocol.h

17 #i‚de‡
NETLINK_PROTOCOL_H


18 
	#NETLINK_PROTOCOL_H
 1

	)

32 
	~<°döt.h
>

33 
	~<sys/sockë.h
>

34 
	~"utû.h
"

36 #ifde‡
HAVE_NETLINK


37 
	~<löux/√éök.h
>

38 
	~<löux/gíëlök.h
>

41 
	#NETLINK_GENERIC
 16

	)

43 
	ssockaddr_∆
 {

44 
ß_Ámûy_t
 
	m∆_Ámûy
;

45 
	m∆_∑d
;

46 
uöt32_t
 
	m∆_pid
;

47 
uöt32_t
 
	m∆_groups
;

49 
BUILD_ASSERT_DECL
((
sockaddr_∆
) == 12);

52 
	#NLM_F_REQUEST
 0x001

	)

53 
	#NLM_F_MULTI
 0x002

	)

54 
	#NLM_F_ACK
 0x004

	)

55 
	#NLM_F_ECHO
 0x008

	)

57 
	#NLM_F_ROOT
 0x100

	)

58 
	#NLM_F_MATCH
 0x200

	)

59 
	#NLM_F_ATOMIC
 0x400

	)

60 
	#NLM_F_DUMP
 (
NLM_F_ROOT
 | 
NLM_F_MATCH
)

	)

63 
	#NLMSG_NOOP
 1

	)

64 
	#NLMSG_ERROR
 2

	)

65 
	#NLMSG_DONE
 3

	)

66 
	#NLMSG_OVERRUN
 4

	)

68 
	#NLMSG_MIN_TYPE
 0x10

	)

70 
	s∆msghdr
 {

71 
uöt32_t
 
	m∆msg_Àn
;

72 
uöt16_t
 
	m∆msg_ty≥
;

73 
uöt16_t
 
	m∆msg_Êags
;

74 
uöt32_t
 
	m∆msg_£q
;

75 
uöt32_t
 
	m∆msg_pid
;

77 
BUILD_ASSERT_DECL
((
∆msghdr
) == 16);

79 
	#NLMSG_ALIGNTO
 4

	)

80 
	#NLMSG_ALIGN
(
SIZE
Ë
	`ROUND_UP
(SIZE, 
NLMSG_ALIGNTO
)

	)

81 
	#NLMSG_HDRLEN
 ((Ë
	`NLMSG_ALIGN
((
∆msghdr
)))

	)

83 
	s∆msgîr


85 
	mîr‹
;

86 
∆msghdr
 
	mmsg
;

88 
BUILD_ASSERT_DECL
((
∆msgîr
) == 20);

90 
	sgílmsghdr
 {

91 
uöt8_t
 
	mcmd
;

92 
uöt8_t
 
	mvîsi⁄
;

93 
uöt16_t
 
	mª£rved
;

95 
BUILD_ASSERT_DECL
((
gílmsghdr
) == 4);

97 
	#GENL_HDRLEN
 
	`NLMSG_ALIGN
((
gílmsghdr
))

	)

99 
	s∆©å
 {

100 
uöt16_t
 
	m∆a_Àn
;

101 
uöt16_t
 
	m∆a_ty≥
;

103 
BUILD_ASSERT_DECL
((
∆©å
) == 4);

105 
	#NLA_ALIGNTO
 4

	)

106 
	#NLA_ALIGN
(
SIZE
Ë
	`ROUND_UP
(SIZE, 
NLA_ALIGNTO
)

	)

107 
	#NLA_HDRLEN
 ((Ë
	`NLA_ALIGN
((
∆©å
)))

	)

109 
	#GENL_MIN_ID
 
NLMSG_MIN_TYPE


	)

110 
	#GENL_MAX_ID
 1023

	)

112 
	#GENL_ID_CTRL
 
NLMSG_MIN_TYPE


	)

115 
	mCTRL_CMD_UNSPEC
,

116 
	mCTRL_CMD_NEWFAMILY
,

117 
	mCTRL_CMD_DELFAMILY
,

118 
	mCTRL_CMD_GETFAMILY
,

119 
	mCTRL_CMD_NEWOPS
,

120 
	mCTRL_CMD_DELOPS
,

121 
	mCTRL_CMD_GETOPS
,

122 
	m__CTRL_CMD_MAX
,

125 
	#CTRL_CMD_MAX
 (
__CTRL_CMD_MAX
 - 1)

	)

128 
	mCTRL_ATTR_UNSPEC
,

129 
	mCTRL_ATTR_FAMILY_ID
,

130 
	mCTRL_ATTR_FAMILY_NAME
,

131 
	mCTRL_ATTR_VERSION
,

132 
	mCTRL_ATTR_HDRSIZE
,

133 
	mCTRL_ATTR_MAXATTR
,

134 
	mCTRL_ATTR_OPS
,

135 
	m__CTRL_ATTR_MAX
,

138 
	#CTRL_ATTR_MAX
 (
__CTRL_ATTR_MAX
 - 1)

	)

141 
	mCTRL_ATTR_OP_UNSPEC
,

142 
	mCTRL_ATTR_OP_ID
,

143 
	mCTRL_ATTR_OP_FLAGS
,

144 
	m__CTRL_ATTR_OP_MAX
,

147 
	#CTRL_ATTR_OP_MAX
 (
__CTRL_ATTR_OP_MAX
 - 1)

	)

151 #i‚de‡
NLA_TYPE_MASK


152 
	#NLA_F_NESTED
 (1 << 15)

	)

153 
	#NLA_F_NET_BYTEORDER
 (1 << 14)

	)

154 
	#NLA_TYPE_MASK
 ~(
NLA_F_NESTED
 | 
NLA_F_NET_BYTEORDER
)

	)

159 #i‚de‡
NETLINK_ADD_MEMBERSHIP


160 
	#NETLINK_ADD_MEMBERSHIP
 1

	)

161 
	#NETLINK_DROP_MEMBERSHIP
 2

	)

166 #i‚de‡
CTRL_ATTR_MCAST_GRP_MAX


168 #unde‡
CTRL_ATTR_MAX


169 
	#CTRL_ATTR_MAX
 7

	)

170 
	#CTRL_ATTR_MCAST_GROUPS
 7

	)

173 
	mCTRL_ATTR_MCAST_GRP_UNSPEC
,

174 
	mCTRL_ATTR_MCAST_GRP_NAME
,

175 
	mCTRL_ATTR_MCAST_GRP_ID
,

176 
	m__CTRL_ATTR_MCAST_GRP_MAX
,

179 
	#CTRL_ATTR_MCAST_GRP_MAX
 (
__CTRL_ATTR_MCAST_GRP_MAX
 - 1)

	)

	@/home/lsch/mytest/openvswitch-1.9.0/lib/netlink-socket.c

17 
	~<c⁄fig.h
>

18 
	~"√éök-sockë.h
"

19 
	~<as£π.h
>

20 
	~<î∫o.h
>

21 
	~<öây≥s.h
>

22 
	~<°dlib.h
>

23 
	~<sys/ty≥s.h
>

24 
	~<sys/uio.h
>

25 
	~<uni°d.h
>

26 
	~"covîage.h
"

27 
	~"dy«mic-°rög.h
"

28 
	~"hash.h
"

29 
	~"hm≠.h
"

30 
	~"√éök.h
"

31 
	~"√éök-¥Ÿocﬁ.h
"

32 
	~"oÂbuf.h
"

33 
	~"pﬁl-lo›.h
"

34 
	~"sockë-utû.h
"

35 
	~"°ªss.h
"

36 
	~"utû.h
"

37 
	~"vlog.h
"

39 
VLOG_DEFINE_THIS_MODULE
(
√éök_sockë
);

41 
COVERAGE_DEFINE
(
√éök_ovîÊow
);

42 
COVERAGE_DEFINE
(
√éök_ª˚ived
);

43 
COVERAGE_DEFINE
(
√éök_ªcv_jumbo
);

44 
COVERAGE_DEFINE
(
√éök_£nd
);

45 
COVERAGE_DEFINE
(
√éök_£¡
);

48 #i‚de‡
SOL_NETLINK


49 
	#SOL_NETLINK
 270

	)

55 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(60, 600);

57 
uöt32_t
 
∆_sock_Æloˇã_£q
(
∆_sock
 *, 
n
);

58 
log_∆msg
(c⁄° *
fun˘i⁄
, 
îr‹
,

59 c⁄° *
mesßge
, 
size_t
 
size
, 
¥Ÿocﬁ
);

63 
	s∆_sock


65 
	mfd
;

66 
uöt32_t
 
	m√xt_£q
;

67 
uöt32_t
 
	mpid
;

68 
	m¥Ÿocﬁ
;

69 
∆_dump
 *
	mdump
;

70 
	mrcvbuf
;

75 
	#MAX_IOVS
 128

	)

81 
	gmax_iovs
;

83 
∆_sock_cow__
(
∆_sock
 *);

89 
	$∆_sock_¸óã
(
¥Ÿocﬁ
, 
∆_sock
 **
sockp
)

91 
∆_sock
 *
sock
;

92 
sockaddr_∆
 
loˇl
, 
ªmŸe
;

93 
sockÀn_t
 
loˇl_size
;

94 
rcvbuf
;

95 
ªtvÆ
 = 0;

97 i‡(!
max_iovs
) {

98 
ßve_î∫o
 = 
î∫o
;

99 
î∫o
 = 0;

101 
max_iovs
 = 
	`sysc⁄f
(
_SC_UIO_MAXIOV
);

102 i‡(
max_iovs
 < 
_XOPEN_IOV_MAX
) {

103 i‡(
max_iovs
 =-1 && 
î∫o
) {

104 
	`VLOG_WARN
("sysc⁄f(_SC_UIO_MAXIOV): %s", 
	`°ªº‹
(
î∫o
));

106 
max_iovs
 = 
_XOPEN_IOV_MAX
;

107 } i‡(
max_iovs
 > 
MAX_IOVS
) {

108 
max_iovs
 = 
MAX_IOVS
;

111 
î∫o
 = 
ßve_î∫o
;

114 *
sockp
 = 
NULL
;

115 
sock
 = 
	`mÆloc
( *sock);

116 i‡(
sock
 =
NULL
) {

117  
ENOMEM
;

120 
sock
->
fd
 = 
	`sockë
(
AF_NETLINK
, 
SOCK_RAW
, 
¥Ÿocﬁ
);

121 i‡(
sock
->
fd
 < 0) {

122 
	`VLOG_ERR
("f˙é: %s", 
	`°ªº‹
(
î∫o
));

123 
îr‹
;

125 
sock
->
¥Ÿocﬁ
 =Örotocol;

126 
sock
->
dump
 = 
NULL
;

127 
sock
->
√xt_£q
 = 1;

129 
rcvbuf
 = 1024 * 1024;

130 i‡(
	`£tsock›t
(
sock
->
fd
, 
SOL_SOCKET
, 
SO_RCVBUFFORCE
,

131 &
rcvbuf
, Ñcvbuf)) {

132 
	`VLOG_WARN_RL
(&
æ
, "setting %d-byte socketÑeceive buffer failed (%s)",

133 
rcvbuf
, 
	`°ªº‹
(
î∫o
));

136 
ªtvÆ
 = 
	`gë_sockë_rcvbuf
(
sock
->
fd
);

137 i‡(
ªtvÆ
 < 0) {

138 
ªtvÆ
 = -retval;

139 
îr‹
;

141 
sock
->
rcvbuf
 = 
ªtvÆ
;

144 
	`mem£t
(&
ªmŸe
, 0, Ñemote);

145 
ªmŸe
.
∆_Ámûy
 = 
AF_NETLINK
;

146 
ªmŸe
.
∆_pid
 = 0;

147 i‡(
	`c⁄√˘
(
sock
->
fd
, (
sockaddr
 *Ë&
ªmŸe
, Ñemote) < 0) {

148 
	`VLOG_ERR
("c⁄√˘(0): %s", 
	`°ªº‹
(
î∫o
));

149 
îr‹
;

153 
loˇl_size
 =  
loˇl
;

154 i‡(
	`gësock«me
(
sock
->
fd
, (
sockaddr
 *Ë&
loˇl
, &
loˇl_size
) < 0) {

155 
	`VLOG_ERR
("gësock«me: %s", 
	`°ªº‹
(
î∫o
));

156 
îr‹
;

158 i‡(
loˇl_size
 <  
loˇl
 ||Üoˇl.
∆_Ámûy
 !
AF_NETLINK
) {

159 
	`VLOG_ERR
("getsocknameÑeturned bad NetlinkÇame");

160 
ªtvÆ
 = 
EINVAL
;

161 
îr‹
;

163 
sock
->
pid
 = 
loˇl
.
∆_pid
;

165 *
sockp
 = 
sock
;

168 
îr‹
:

169 i‡(
ªtvÆ
 == 0) {

170 
ªtvÆ
 = 
î∫o
;

171 i‡(
ªtvÆ
 == 0) {

172 
ªtvÆ
 = 
EINVAL
;

175 i‡(
sock
->
fd
 >= 0) {

176 
	`˛o£
(
sock
->
fd
);

178 
	`‰ì
(
sock
);

179  
ªtvÆ
;

180 
	}
}

186 
	$∆_sock_˛⁄e
(c⁄° 
∆_sock
 *
§c
, ∆_sock **
sockp
)

188  
	`∆_sock_¸óã
(
§c
->
¥Ÿocﬁ
, 
sockp
);

189 
	}
}

193 
	$∆_sock_de°roy
(
∆_sock
 *
sock
)

195 i‡(
sock
) {

196 i‡(
sock
->
dump
) {

197 
sock
->
dump
 = 
NULL
;

199 
	`˛o£
(
sock
->
fd
);

200 
	`‰ì
(
sock
);

203 
	}
}

217 
	$∆_sock_joö_mcgroup
(
∆_sock
 *
sock
, 
mu…iˇ°_group
)

219 
îr‹
 = 
	`∆_sock_cow__
(
sock
);

220 i‡(
îr‹
) {

221  
îr‹
;

223 i‡(
	`£tsock›t
(
sock
->
fd
, 
SOL_NETLINK
, 
NETLINK_ADD_MEMBERSHIP
,

224 &
mu…iˇ°_group
,  multicast_group) < 0) {

225 
	`VLOG_WARN
("couldÇot join multicast group %u (%s)",

226 
mu…iˇ°_group
, 
	`°ªº‹
(
î∫o
));

227  
î∫o
;

230 
	}
}

243 
	$∆_sock_Àave_mcgroup
(
∆_sock
 *
sock
, 
mu…iˇ°_group
)

245 
	`as£π
(!
sock
->
dump
);

246 i‡(
	`£tsock›t
(
sock
->
fd
, 
SOL_NETLINK
, 
NETLINK_DROP_MEMBERSHIP
,

247 &
mu…iˇ°_group
,  multicast_group) < 0) {

248 
	`VLOG_WARN
("couldÇotÜeave multicast group %u (%s)",

249 
mu…iˇ°_group
, 
	`°ªº‹
(
î∫o
));

250  
î∫o
;

253 
	}
}

256 
	$∆_sock_£nd__
(
∆_sock
 *
sock
, c⁄° 
oÂbuf
 *
msg
,

257 
uöt32_t
 
∆msg_£q
, 
boﬁ
 
waô
)

259 
∆msghdr
 *
∆msg
 = 
	`∆_msg_∆msghdr
(
msg
);

260 
îr‹
;

262 
∆msg
->
∆msg_Àn
 = 
msg
->
size
;

263 
∆msg
->
∆msg_£q
 =Çlmsg_seq;

264 
∆msg
->
∆msg_pid
 = 
sock
->
pid
;

266 
ªtvÆ
;

267 
ªtvÆ
 = 
	`£nd
(
sock
->
fd
, 
msg
->
d©a
, msg->
size
, 
waô
 ? 0 : 
MSG_DONTWAIT
);

268 
îr‹
 = 
ªtvÆ
 < 0 ? 
î∫o
 : 0;

269 } 
îr‹
 =
EINTR
);

270 
	`log_∆msg
(
__func__
, 
îr‹
, 
msg
->
d©a
, msg->
size
, 
sock
->
¥Ÿocﬁ
);

271 i‡(!
îr‹
) {

272 
	`COVERAGE_INC
(
√éök_£¡
);

274  
îr‹
;

275 
	}
}

286 
	$∆_sock_£nd
(
∆_sock
 *
sock
, c⁄° 
oÂbuf
 *
msg
, 
boﬁ
 
waô
)

288  
	`∆_sock_£nd_£q
(
sock
, 
msg
, 
	`∆_sock_Æloˇã_£q
(sock, 1), 
waô
);

289 
	}
}

303 
	$∆_sock_£nd_£q
(
∆_sock
 *
sock
, c⁄° 
oÂbuf
 *
msg
,

304 
uöt32_t
 
∆msg_£q
, 
boﬁ
 
waô
)

306 
îr‹
 = 
	`∆_sock_cow__
(
sock
);

307 i‡(
îr‹
) {

308  
îr‹
;

310  
	`∆_sock_£nd__
(
sock
, 
msg
, 
∆msg_£q
, 
waô
);

311 
	}
}

318 
STRESS_OPTION
(

319 
√éök_ovîÊow
, "simulateÇetlink socketÑeceive buffer overflow",

323 
	$∆_sock_ªcv__
(
∆_sock
 *
sock
, 
oÂbuf
 *
buf
, 
boﬁ
 
waô
)

330 
∆msghdr
 *nlmsghdr;

331 
uöt8_t
 
èû
[65536];

332 
iovec
 
iov
[2];

333 
msghdr
 
msg
;

334 
ssize_t
 
ªtvÆ
;

336 
	`as£π
(
buf
->
Æloˇãd
 > *
∆msghdr
);

337 
	`oÂbuf_˛ór
(
buf
);

339 
iov
[0].
iov_ba£
 = 
buf
->
ba£
;

340 
iov
[0].
iov_Àn
 = 
buf
->
Æloˇãd
;

341 
iov
[1].
iov_ba£
 = 
èû
;

342 
iov
[1].
iov_Àn
 =  
èû
;

344 
	`mem£t
(&
msg
, 0,  msg);

345 
msg
.
msg_iov
 = 
iov
;

346 
msg
.
msg_iovÀn
 = 2;

349 
ªtvÆ
 = 
	`ªcvmsg
(
sock
->
fd
, &
msg
, 
waô
 ? 0 : 
MSG_DONTWAIT
);

350 } 
ªtvÆ
 < 0 && 
î∫o
 =
EINTR
);

352 i‡(
ªtvÆ
 < 0) {

353 
îr‹
 = 
î∫o
;

354 i‡(
îr‹
 =
ENOBUFS
) {

357 
	`COVERAGE_INC
(
√éök_ovîÊow
);

359  
îr‹
;

362 i‡(
msg
.
msg_Êags
 & 
MSG_TRUNC
) {

363 
	`VLOG_ERR_RL
(&
æ
, "truncated message (longerÅhan %zu bytes)",

364  
èû
);

365  
E2BIG
;

368 
∆msghdr
 = 
buf
->
d©a
;

369 i‡(
ªtvÆ
 <  *
∆msghdr


370 || 
∆msghdr
->
∆msg_Àn
 <  *nlmsghdr

371 || 
∆msghdr
->
∆msg_Àn
 > 
ªtvÆ
) {

372 
	`VLOG_ERR_RL
(&
æ
, "received invalidÇlmsg (%zd bytes < %zu)",

373 
ªtvÆ
,  *
∆msghdr
);

374  
EPROTO
;

377 i‡(
	`STRESS
(
√éök_ovîÊow
)) {

378  
ENOBUFS
;

381 
buf
->
size
 = 
	`MIN
(
ªtvÆ
, buf->
Æloˇãd
);

382 i‡(
ªtvÆ
 > 
buf
->
Æloˇãd
) {

383 
	`COVERAGE_INC
(
√éök_ªcv_jumbo
);

384 
	`oÂbuf_put
(
buf
, 
èû
, 
ªtvÆ
 - buf->
Æloˇãd
);

387 
	`log_∆msg
(
__func__
, 0, 
buf
->
d©a
, buf->
size
, 
sock
->
¥Ÿocﬁ
);

388 
	`COVERAGE_INC
(
√éök_ª˚ived
);

391 
	}
}

411 
	$∆_sock_ªcv
(
∆_sock
 *
sock
, 
oÂbuf
 *
buf
, 
boﬁ
 
waô
)

413 
îr‹
 = 
	`∆_sock_cow__
(
sock
);

414 i‡(
îr‹
) {

415  
îr‹
;

417  
	`∆_sock_ªcv__
(
sock
, 
buf
, 
waô
);

418 
	}
}

421 
	$∆_sock_ªc‹d_îr‹s__
(
∆_å™ß˘i⁄
 **
å™ß˘i⁄s
, 
size_t
 
n
,

422 
îr‹
)

424 
size_t
 
i
;

426 
i
 = 0; i < 
n
; i++) {

427 
∆_å™ß˘i⁄
 *
txn
 = 
å™ß˘i⁄s
[
i
];

429 
txn
->
îr‹
 =Érror;

430 i‡(
txn
->
ª∂y
) {

431 
	`oÂbuf_˛ór
(
txn
->
ª∂y
);

434 
	}
}

437 
	$∆_sock_å™ß˘_mu…ùÀ__
(
∆_sock
 *
sock
,

438 
∆_å™ß˘i⁄
 **
å™ß˘i⁄s
, 
size_t
 
n
,

439 
size_t
 *
d⁄e
)

441 
uöt64_t
 
tmp_ª∂y_°ub
[1024 / 8];

442 
∆_å™ß˘i⁄
 
tmp_txn
;

443 
oÂbuf
 
tmp_ª∂y
;

445 
uöt32_t
 
ba£_£q
;

446 
iovec
 
iovs
[
MAX_IOVS
];

447 
msghdr
 
msg
;

448 
îr‹
;

449 
i
;

451 
ba£_£q
 = 
	`∆_sock_Æloˇã_£q
(
sock
, 
n
);

452 *
d⁄e
 = 0;

453 
i
 = 0; i < 
n
; i++) {

454 
∆_å™ß˘i⁄
 *
txn
 = 
å™ß˘i⁄s
[
i
];

455 
∆msghdr
 *
∆msg
 = 
	`∆_msg_∆msghdr
(
txn
->
ªque°
);

457 
∆msg
->
∆msg_Àn
 = 
txn
->
ªque°
->
size
;

458 
∆msg
->
∆msg_£q
 = 
ba£_£q
 + 
i
;

459 
∆msg
->
∆msg_pid
 = 
sock
->
pid
;

461 
iovs
[
i
].
iov_ba£
 = 
txn
->
ªque°
->
d©a
;

462 
iovs
[
i
].
iov_Àn
 = 
txn
->
ªque°
->
size
;

465 
	`mem£t
(&
msg
, 0,  msg);

466 
msg
.
msg_iov
 = 
iovs
;

467 
msg
.
msg_iovÀn
 = 
n
;

469 
îr‹
 = 
	`£ndmsg
(
sock
->
fd
, &
msg
, 0Ë< 0 ? 
î∫o
 : 0;

470 } 
îr‹
 =
EINTR
);

472 
i
 = 0; i < 
n
; i++) {

473 
∆_å™ß˘i⁄
 *
txn
 = 
å™ß˘i⁄s
[
i
];

475 
	`log_∆msg
(
__func__
, 
îr‹
, 
txn
->
ªque°
->
d©a
,Åxn->ªque°->
size
,

476 
sock
->
¥Ÿocﬁ
);

478 i‡(!
îr‹
) {

479 
	`COVERAGE_ADD
(
√éök_£¡
, 
n
);

482 i‡(
îr‹
) {

483  
îr‹
;

486 
	`oÂbuf_u£_°ub
(&
tmp_ª∂y
, 
tmp_ª∂y_°ub
, Åmp_reply_stub);

487 
tmp_txn
.
ªque°
 = 
NULL
;

488 
tmp_txn
.
ª∂y
 = &
tmp_ª∂y
;

489 
tmp_txn
.
îr‹
 = 0;

490 
n
 > 0) {

491 
∆_å™ß˘i⁄
 *
buf_txn
, *
txn
;

492 
uöt32_t
 
£q
;

496 
buf_txn
 = &
tmp_txn
;

497 
i
 = 0; i < 
n
; i++) {

498 i‡(
å™ß˘i⁄s
[
i
]->
ª∂y
) {

499 
buf_txn
 = 
å™ß˘i⁄s
[
i
];

505 
îr‹
 = 
	`∆_sock_ªcv__
(
sock
, 
buf_txn
->
ª∂y
, 
Ál£
);

506 i‡(
îr‹
) {

507 i‡(
îr‹
 =
EAGAIN
) {

508 
	`∆_sock_ªc‹d_îr‹s__
(
å™ß˘i⁄s
, 
n
, 0);

509 *
d⁄e
 +
n
;

510 
îr‹
 = 0;

516 
£q
 = 
	`∆_msg_∆msghdr
(
buf_txn
->
ª∂y
)->
∆msg_£q
;

517 i‡(
£q
 < 
ba£_£q
 || seq >ba£_£q + 
n
) {

518 
	`VLOG_DBG_RL
(&
æ
, "ign‹ög u√x≥˘ed seq %#"
PRIx32
, 
£q
);

521 
i
 = 
£q
 - 
ba£_£q
;

522 
txn
 = 
å™ß˘i⁄s
[
i
];

525 i‡(
	`∆_msg_∆msgîr
(
buf_txn
->
ª∂y
, &
txn
->
îr‹
)) {

526 i‡(
txn
->
ª∂y
) {

527 
	`oÂbuf_˛ór
(
txn
->
ª∂y
);

529 i‡(
txn
->
îr‹
) {

530 
	`VLOG_DBG_RL
(&
æ
, "received NAKÉrror=%d (%s)",

531 
îr‹
, 
	`°ªº‹
(
txn
->error));

534 
txn
->
îr‹
 = 0;

535 i‡(
txn
->
ª∂y
 &&Åx¿!
buf_txn
) {

537 
oÂbuf
 *
ª∂y
 = 
buf_txn
->reply;

538 
buf_txn
->
ª∂y
 = 
txn
->reply;

539 
txn
->
ª∂y
 =Ñeply;

546 
	`∆_sock_ªc‹d_îr‹s__
(
å™ß˘i⁄s
, 
i
, 0);

549 *
d⁄e
 +
i
 + 1;

550 
å™ß˘i⁄s
 +
i
 + 1;

551 
n
 -
i
 + 1;

552 
ba£_£q
 +
i
 + 1;

554 
	`oÂbuf_unöô
(&
tmp_ª∂y
);

556  
îr‹
;

557 
	}
}

579 
	$∆_sock_å™ß˘_mu…ùÀ
(
∆_sock
 *
sock
,

580 
∆_å™ß˘i⁄
 **
å™ß˘i⁄s
, 
size_t
 
n
)

582 
max_b©ch_cou¡
;

583 
îr‹
;

585 i‡(!
n
) {

589 
îr‹
 = 
	`∆_sock_cow__
(
sock
);

590 i‡(
îr‹
) {

591 
	`∆_sock_ªc‹d_îr‹s__
(
å™ß˘i⁄s
, 
n
, 
îr‹
);

603 
max_b©ch_cou¡
 = 
	`MAX
(
sock
->
rcvbuf
 / 4096, 1);

604 
max_b©ch_cou¡
 = 
	`MIN
(max_b©ch_cou¡, 
max_iovs
);

606 
n
 > 0) {

607 
size_t
 
cou¡
, 
byãs
;

608 
size_t
 
d⁄e
;

613 #i‡
	`deföed
(
PAGESIZE
)

614 íum { 
MAX_BATCH_BYTES
 = 
	`MAX
(1, 
PAGESIZE
 - 512) };

616 íum { 
MAX_BATCH_BYTES
 = 4096 - 512 };

618 
byãs
 = 
å™ß˘i⁄s
[0]->
ªque°
->
size
;

619 
cou¡
 = 1; cou¡ < 
n
 && cou¡ < 
max_b©ch_cou¡
; count++) {

620 i‡(
byãs
 + 
å™ß˘i⁄s
[
cou¡
]->
ªque°
->
size
 > 
MAX_BATCH_BYTES
) {

623 
byãs
 +
å™ß˘i⁄s
[
cou¡
]->
ªque°
->
size
;

626 
îr‹
 = 
	`∆_sock_å™ß˘_mu…ùÀ__
(
sock
, 
å™ß˘i⁄s
, 
cou¡
, &
d⁄e
);

627 
å™ß˘i⁄s
 +
d⁄e
;

628 
n
 -
d⁄e
;

630 i‡(
îr‹
 =
ENOBUFS
) {

631 
	`VLOG_DBG_RL
(&
æ
, "receive buffer overflow,ÑesendingÑequest");

632 } i‡(
îr‹
) {

633 
	`VLOG_ERR_RL
(&
æ
, "å™ß˘i⁄Éº‹ (%s)", 
	`°ªº‹
(
îr‹
));

634 
	`∆_sock_ªc‹d_îr‹s__
(
å™ß˘i⁄s
, 
n
, 
îr‹
);

637 
	}
}

680 
	$∆_sock_å™ß˘
(
∆_sock
 *
sock
, c⁄° 
oÂbuf
 *
ªque°
,

681 
oÂbuf
 **
ª∂yp
)

683 
∆_å™ß˘i⁄
 *
å™ß˘i⁄p
;

684 
∆_å™ß˘i⁄
 
å™ß˘i⁄
;

686 
å™ß˘i⁄
.
ªque°
 = 
	`CONST_CAST
(
oÂbuf
 *,Ñequest);

687 
å™ß˘i⁄
.
ª∂y
 = 
ª∂yp
 ? 
	`oÂbuf_√w
(1024Ë: 
NULL
;

688 
å™ß˘i⁄p
 = &
å™ß˘i⁄
;

690 
	`∆_sock_å™ß˘_mu…ùÀ
(
sock
, &
å™ß˘i⁄p
, 1);

692 i‡(
ª∂yp
) {

693 i‡(
å™ß˘i⁄
.
îr‹
) {

694 
	`oÂbuf_dñëe
(
å™ß˘i⁄
.
ª∂y
);

695 *
ª∂yp
 = 
NULL
;

697 *
ª∂yp
 = 
å™ß˘i⁄
.
ª∂y
;

701  
å™ß˘i⁄
.
îr‹
;

702 
	}
}

706 
	$∆_sock_døö
(
∆_sock
 *
sock
)

708 
îr‹
 = 
	`∆_sock_cow__
(
sock
);

709 i‡(
îr‹
) {

710  
îr‹
;

712  
	`døö_rcvbuf
(
sock
->
fd
);

713 
	}
}

719 
	$∆_sock_cow__
(
∆_sock
 *
sock
)

721 
∆_sock
 *
c›y
;

722 
uöt32_t
 
tmp_pid
;

723 
tmp_fd
;

724 
îr‹
;

726 i‡(!
sock
->
dump
) {

730 
îr‹
 = 
	`∆_sock_˛⁄e
(
sock
, &
c›y
);

731 i‡(
îr‹
) {

732  
îr‹
;

735 
tmp_fd
 = 
sock
->
fd
;

736 
sock
->
fd
 = 
c›y
->fd;

737 
c›y
->
fd
 = 
tmp_fd
;

739 
tmp_pid
 = 
sock
->
pid
;

740 
sock
->
pid
 = 
c›y
->pid;

741 
c›y
->
pid
 = 
tmp_pid
;

743 
sock
->
dump
->sock = 
c›y
;

744 
sock
->
dump
 = 
NULL
;

747 
	}
}

775 
	$∆_dump_°¨t
(
∆_dump
 *
dump
,

776 
∆_sock
 *
sock
, c⁄° 
oÂbuf
 *
ªque°
)

778 
	`oÂbuf_öô
(&
dump
->
buf„r
, 4096);

779 i‡(
sock
->
dump
) {

782 
dump
->
°©us
 = 
	`∆_sock_˛⁄e
(
sock
, &dump->sock);

783 i‡(
dump
->
°©us
) {

787 
sock
->
dump
 = dump;

788 
dump
->
sock
 = sock;

789 
dump
->
°©us
 = 0;

792 
	`∆_msg_∆msghdr
(
ªque°
)->
∆msg_Êags
 |
NLM_F_DUMP
 | 
NLM_F_ACK
;

793 
dump
->
°©us
 = 
	`∆_sock_£nd__
(
sock
, 
ªque°
, 
	`∆_sock_Æloˇã_£q
(sock, 1),

794 
åue
);

795 
dump
->
£q
 = 
	`∆_msg_∆msghdr
(
ªque°
)->
∆msg_£q
;

796 
	}
}

800 
	$∆_dump_ªcv
(
∆_dump
 *
dump
)

802 
∆msghdr
 *nlmsghdr;

803 
ªtvÆ
;

805 
ªtvÆ
 = 
	`∆_sock_ªcv__
(
dump
->
sock
, &dump->
buf„r
, 
åue
);

806 i‡(
ªtvÆ
) {

807  
ªtvÆ
 =
EINTR
 ? 
EAGAIN
 :Ñetval;

810 
∆msghdr
 = 
	`∆_msg_∆msghdr
(&
dump
->
buf„r
);

811 i‡(
dump
->
£q
 !
∆msghdr
->
∆msg_£q
) {

812 
	`VLOG_DBG_RL
(&
æ
, "ign‹ög seq %#"
PRIx32
" !=Éxpected %#"PRIx32,

813 
∆msghdr
->
∆msg_£q
, 
dump
->
£q
);

814  
EAGAIN
;

817 i‡(
	`∆_msg_∆msgîr
(&
dump
->
buf„r
, &
ªtvÆ
)) {

818 
	`VLOG_INFO_RL
(&
æ
, "netlink dumpÑequestÉrror (%s)",

819 
	`°ªº‹
(
ªtvÆ
));

820  
ªtvÆ
 &&ÑëvÆ !
EAGAIN
 ?ÑëvÆ : 
EPROTO
;

824 
	}
}

838 
boﬁ


839 
	$∆_dump_√xt
(
∆_dump
 *
dump
, 
oÂbuf
 *
ª∂y
)

841 
∆msghdr
 *nlmsghdr;

843 
ª∂y
->
d©a
 = 
NULL
;

844 
ª∂y
->
size
 = 0;

845 i‡(
dump
->
°©us
) {

846  
Ál£
;

849 !
dump
->
buf„r
.
size
) {

850 
ªtvÆ
 = 
	`∆_dump_ªcv
(
dump
);

851 i‡(
ªtvÆ
) {

852 
	`oÂbuf_˛ór
(&
dump
->
buf„r
);

853 i‡(
ªtvÆ
 !
EAGAIN
) {

854 
dump
->
°©us
 = 
ªtvÆ
;

855  
Ál£
;

860 
∆msghdr
 = 
	`∆_msg_√xt
(&
dump
->
buf„r
, 
ª∂y
);

861 i‡(!
∆msghdr
) {

862 
	`VLOG_WARN_RL
(&
æ
, "netlink dumpÑeply contains message fragment");

863 
dump
->
°©us
 = 
EPROTO
;

864  
Ál£
;

865 } i‡(
∆msghdr
->
∆msg_ty≥
 =
NLMSG_DONE
) {

866 
dump
->
°©us
 = 
EOF
;

867  
Ál£
;

870  
åue
;

871 
	}
}

877 
	$∆_dump_d⁄e
(
∆_dump
 *
dump
)

881 !
dump
->
°©us
) {

882 
oÂbuf
 
ª∂y
;

883 i‡(!
	`∆_dump_√xt
(
dump
, &
ª∂y
)) {

884 
	`as£π
(
dump
->
°©us
);

888 i‡(
dump
->
sock
) {

889 i‡(
dump
->
sock
->dump) {

890 
dump
->
sock
->dum∞
NULL
;

892 
	`∆_sock_de°roy
(
dump
->
sock
);

895 
	`oÂbuf_unöô
(&
dump
->
buf„r
);

896  
dump
->
°©us
 =
EOF
 ? 0 : dump->status;

897 
	}
}

902 
	$∆_sock_waô
(c⁄° 
∆_sock
 *
sock
, 
evíts
)

904 
	`pﬁl_fd_waô
(
sock
->
fd
, 
evíts
);

905 
	}
}

915 
	$∆_sock_fd
(c⁄° 
∆_sock
 *
sock
)

917  
sock
->
fd
;

918 
	}
}

921 
uöt32_t


922 
	$∆_sock_pid
(c⁄° 
∆_sock
 *
sock
)

924  
sock
->
pid
;

925 
	}
}

929 
	sgíl_Ámûy
 {

930 
hm≠_node
 
	mhm≠_node
;

931 
uöt16_t
 
	mid
;

932 *
	m«me
;

935 
hm≠
 
	ggíl_Ámûõs
 = 
HMAP_INITIALIZER
(&
gíl_Ámûõs
);

937 c⁄° 
∆_pﬁicy
 
	gÁmûy_pﬁicy
[
CTRL_ATTR_MAX
 + 1] = {

938 [
CTRL_ATTR_FAMILY_ID
] = {.
ty≥
 = 
NL_A_U16
},

939 [
CTRL_ATTR_MCAST_GROUPS
] = {.
ty≥
 = 
NL_A_NESTED
, .
	g›ti⁄Æ
 = 
åue
},

942 
gíl_Ámûy
 *

943 
	$föd_gíl_Ámûy_by_id
(
uöt16_t
 
id
)

945 
gíl_Ámûy
 *
Ámûy
;

947 
	`HMAP_FOR_EACH_IN_BUCKET
 (
Ámûy
, 
hm≠_node
, 
	`hash_öt
(
id
, 0),

948 &
gíl_Ámûõs
) {

949 i‡(
Ámûy
->
id
 == id) {

950  
Ámûy
;

953  
NULL
;

954 
	}
}

957 
	$deföe_gíl_Ámûy
(
uöt16_t
 
id
, c⁄° *
«me
)

959 
gíl_Ámûy
 *
Ámûy
 = 
	`föd_gíl_Ámûy_by_id
(
id
);

961 i‡(
Ámûy
) {

962 i‡(!
	`°rcmp
(
Ámûy
->
«me
,Çame)) {

965 
	`‰ì
(
Ámûy
->
«me
);

967 
Ámûy
 = 
	`xmÆloc
( *family);

968 
Ámûy
->
id
 = id;

969 
	`hm≠_ö£π
(&
gíl_Ámûõs
, &
Ámûy
->
hm≠_node
, 
	`hash_öt
(
id
, 0));

971 
Ámûy
->
«me
 = 
	`x°rdup
(name);

972 
	}
}

975 
	$gíl_Ámûy_to_«me
(
uöt16_t
 
id
)

977 i‡(
id
 =
GENL_ID_CTRL
) {

980 
gíl_Ámûy
 *
Ámûy
 = 
	`föd_gíl_Ámûy_by_id
(
id
);

981  
Ámûy
 ? famûy->
«me
 : "unknown";

983 
	}
}

986 
	$do_lookup_gíl_Ámûy
(c⁄° *
«me
, 
∆©å
 **
©ås
,

987 
oÂbuf
 **
ª∂yp
)

989 
∆_sock
 *
sock
;

990 
oÂbuf
 
ªque°
, *
ª∂y
;

991 
îr‹
;

993 *
ª∂yp
 = 
NULL
;

994 
îr‹
 = 
	`∆_sock_¸óã
(
NETLINK_GENERIC
, &
sock
);

995 i‡(
îr‹
) {

996  
îr‹
;

999 
	`oÂbuf_öô
(&
ªque°
, 0);

1000 
	`∆_msg_put_gílmsghdr
(&
ªque°
, 0, 
GENL_ID_CTRL
, 
NLM_F_REQUEST
,

1001 
CTRL_CMD_GETFAMILY
, 1);

1002 
	`∆_msg_put_°rög
(&
ªque°
, 
CTRL_ATTR_FAMILY_NAME
, 
«me
);

1003 
îr‹
 = 
	`∆_sock_å™ß˘
(
sock
, &
ªque°
, &
ª∂y
);

1004 
	`oÂbuf_unöô
(&
ªque°
);

1005 i‡(
îr‹
) {

1006 
	`∆_sock_de°roy
(
sock
);

1007  
îr‹
;

1010 i‡(!
	`∆_pﬁicy_∑r£
(
ª∂y
, 
NLMSG_HDRLEN
 + 
GENL_HDRLEN
,

1011 
Ámûy_pﬁicy
, 
©ås
, 
	`ARRAY_SIZE
(family_policy))

1012 || 
	`∆_©å_gë_u16
(
©ås
[
CTRL_ATTR_FAMILY_ID
]) == 0) {

1013 
	`∆_sock_de°roy
(
sock
);

1014 
	`oÂbuf_dñëe
(
ª∂y
);

1015  
EPROTO
;

1018 
	`∆_sock_de°roy
(
sock
);

1019 *
ª∂yp
 = 
ª∂y
;

1021 
	}
}

1030 
	$∆_lookup_gíl_mcgroup
(c⁄° *
Ámûy_«me
, c⁄° *
group_«me
,

1031 *
mu…iˇ°_group
, 
ÁŒback
)

1033 
∆©å
 *
Ámûy_©ås
[
	`ARRAY_SIZE
(
Ámûy_pﬁicy
)];

1034 c⁄° 
∆©å
 *
mc
;

1035 
oÂbuf
 *
ª∂y
;

1036 
À·
;

1037 
îr‹
;

1039 *
mu…iˇ°_group
 = 0;

1040 
îr‹
 = 
	`do_lookup_gíl_Ámûy
(
Ámûy_«me
, 
Ámûy_©ås
, &
ª∂y
);

1041 i‡(
îr‹
) {

1042  
îr‹
;

1045 i‡(!
Ámûy_©ås
[
CTRL_ATTR_MCAST_GROUPS
]) {

1046 *
mu…iˇ°_group
 = 
ÁŒback
;

1047 
	`VLOG_WARN
("%s-%s: hasÇo multicast group, using fallback %d",

1048 
Ámûy_«me
, 
group_«me
, *
mu…iˇ°_group
);

1049 
îr‹
 = 0;

1050 
exô
;

1053 
	`NL_NESTED_FOR_EACH
 (
mc
, 
À·
, 
Ámûy_©ås
[
CTRL_ATTR_MCAST_GROUPS
]) {

1054 c⁄° 
∆_pﬁicy
 
mc_pﬁicy
[] = {

1055 [
CTRL_ATTR_MCAST_GRP_ID
] = {.
ty≥
 = 
NL_A_U32
},

1056 [
CTRL_ATTR_MCAST_GRP_NAME
] = {.
ty≥
 = 
NL_A_STRING
},

1059 
∆©å
 *
mc_©ås
[
	`ARRAY_SIZE
(
mc_pﬁicy
)];

1060 c⁄° *
mc_«me
;

1062 i‡(!
	`∆_∑r£_√°ed
(
mc
, 
mc_pﬁicy
, 
mc_©ås
, 
	`ARRAY_SIZE
(mc_policy))) {

1063 
îr‹
 = 
EPROTO
;

1064 
exô
;

1067 
mc_«me
 = 
	`∆_©å_gë_°rög
(
mc_©ås
[
CTRL_ATTR_MCAST_GRP_NAME
]);

1068 i‡(!
	`°rcmp
(
group_«me
, 
mc_«me
)) {

1069 *
mu…iˇ°_group
 =

1070 
	`∆_©å_gë_u32
(
mc_©ås
[
CTRL_ATTR_MCAST_GRP_ID
]);

1071 
îr‹
 = 0;

1072 
exô
;

1075 
îr‹
 = 
EPROTO
;

1077 
exô
:

1078 
	`oÂbuf_dñëe
(
ª∂y
);

1079  
îr‹
;

1080 
	}
}

1087 
	$∆_lookup_gíl_Ámûy
(c⁄° *
«me
, *
numbî
)

1089 i‡(*
numbî
 == 0) {

1090 
∆©å
 *
©ås
[
	`ARRAY_SIZE
(
Ámûy_pﬁicy
)];

1091 
oÂbuf
 *
ª∂y
;

1092 
îr‹
;

1094 
îr‹
 = 
	`do_lookup_gíl_Ámûy
(
«me
, 
©ås
, &
ª∂y
);

1095 i‡(!
îr‹
) {

1096 *
numbî
 = 
	`∆_©å_gë_u16
(
©ås
[
CTRL_ATTR_FAMILY_ID
]);

1097 
	`deföe_gíl_Ámûy
(*
numbî
, 
«me
);

1099 *
numbî
 = -
îr‹
;

1101 
	`oÂbuf_dñëe
(
ª∂y
);

1103 
	`as£π
(*
numbî
 != 0);

1105  *
numbî
 > 0 ? 0 : -*number;

1106 
	}
}

1108 
uöt32_t


1109 
	$∆_sock_Æloˇã_£q
(
∆_sock
 *
sock
, 
n
)

1111 
uöt32_t
 
£q
 = 
sock
->
√xt_£q
;

1113 
sock
->
√xt_£q
 +
n
;

1118 i‡(
sock
->
√xt_£q
 >
UINT32_MAX
 / 2) {

1119 
sock
->
√xt_£q
 = 1;

1122  
£q
;

1123 
	}
}

1126 
	$∆msghdr_to_°rög
(c⁄° 
∆msghdr
 *
h
, 
¥Ÿocﬁ
, 
ds
 *ds)

1128 
	s∆msg_Êag
 {

1129 
bôs
;

1130 c⁄° *
«me
;

1132 c⁄° 
∆msg_Êag
 
Êags
[] = {

1133 { 
NLM_F_REQUEST
, "REQUEST" },

1134 { 
NLM_F_MULTI
, "MULTI" },

1135 { 
NLM_F_ACK
, "ACK" },

1136 { 
NLM_F_ECHO
, "ECHO" },

1137 { 
NLM_F_DUMP
, "DUMP" },

1138 { 
NLM_F_ROOT
, "ROOT" },

1139 { 
NLM_F_MATCH
, "MATCH" },

1140 { 
NLM_F_ATOMIC
, "ATOMIC" },

1142 c⁄° 
∆msg_Êag
 *
Êag
;

1143 
uöt16_t
 
Êags_À·
;

1145 
	`ds_put_f‹m©
(
ds
, "∆÷í:%"
PRIu32
",Åy≥=%"
PRIu16
,

1146 
h
->
∆msg_Àn
, h->
∆msg_ty≥
);

1147 i‡(
h
->
∆msg_ty≥
 =
NLMSG_NOOP
) {

1148 
	`ds_put_c°r
(
ds
, "(no-op)");

1149 } i‡(
h
->
∆msg_ty≥
 =
NLMSG_ERROR
) {

1150 
	`ds_put_c°r
(
ds
, "(error)");

1151 } i‡(
h
->
∆msg_ty≥
 =
NLMSG_DONE
) {

1152 
	`ds_put_c°r
(
ds
, "(done)");

1153 } i‡(
h
->
∆msg_ty≥
 =
NLMSG_OVERRUN
) {

1154 
	`ds_put_c°r
(
ds
, "(overrun)");

1155 } i‡(
h
->
∆msg_ty≥
 < 
NLMSG_MIN_TYPE
) {

1156 
	`ds_put_c°r
(
ds
, "(reserved)");

1157 } i‡(
¥Ÿocﬁ
 =
NETLINK_GENERIC
) {

1158 
	`ds_put_f‹m©
(
ds
, "(%s)", 
	`gíl_Ámûy_to_«me
(
h
->
∆msg_ty≥
));

1160 
	`ds_put_c°r
(
ds
, "(family-defined)");

1162 
	`ds_put_f‹m©
(
ds
, ", fœgs=%"
PRIx16
, 
h
->
∆msg_Êags
);

1163 
Êags_À·
 = 
h
->
∆msg_Êags
;

1164 
Êag
 = 
Êags
; fœg < &Êags[
	`ARRAY_SIZE
(flags)]; flag++) {

1165 i‡((
Êags_À·
 & 
Êag
->
bôs
) == flag->bits) {

1166 
	`ds_put_f‹m©
(
ds
, "[%s]", 
Êag
->
«me
);

1167 
Êags_À·
 &~
Êag
->
bôs
;

1170 i‡(
Êags_À·
) {

1171 
	`ds_put_f‹m©
(
ds
, "[OTHER:%"
PRIx16
"]", 
Êags_À·
);

1173 
	`ds_put_f‹m©
(
ds
, ", seq=%"
PRIx32
",Öid=%"
PRIu32
,

1174 
h
->
∆msg_£q
, h->
∆msg_pid
);

1175 
	}
}

1178 
	$∆msg_to_°rög
(c⁄° 
oÂbuf
 *
buf„r
, 
¥Ÿocﬁ
)

1180 
ds
 d†
DS_EMPTY_INITIALIZER
;

1181 c⁄° 
∆msghdr
 *
h
 = 
	`oÂbuf_©
(
buf„r
, 0, 
NLMSG_HDRLEN
);

1182 i‡(
h
) {

1183 
	`∆msghdr_to_°rög
(
h
, 
¥Ÿocﬁ
, &
ds
);

1184 i‡(
h
->
∆msg_ty≥
 =
NLMSG_ERROR
) {

1185 c⁄° 
∆msgîr
 *
e
;

1186 
e
 = 
	`oÂbuf_©
(
buf„r
, 
NLMSG_HDRLEN
,

1187 
	`NLMSG_ALIGN
((
∆msgîr
)));

1188 i‡(
e
) {

1189 
	`ds_put_f‹m©
(&
ds
, "Éº‹(%d", 
e
->
îr‹
);

1190 i‡(
e
->
îr‹
 < 0) {

1191 
	`ds_put_f‹m©
(&
ds
, "(%s)", 
	`°ªº‹
(-
e
->
îr‹
));

1193 
	`ds_put_c°r
(&
ds
, ", in-reply-to(");

1194 
	`∆msghdr_to_°rög
(&
e
->
msg
, 
¥Ÿocﬁ
, &
ds
);

1195 
	`ds_put_c°r
(&
ds
, "))");

1197 
	`ds_put_c°r
(&
ds
, "Érror(truncated)");

1199 } i‡(
h
->
∆msg_ty≥
 =
NLMSG_DONE
) {

1200 *
îr‹
 = 
	`oÂbuf_©
(
buf„r
, 
NLMSG_HDRLEN
,  *error);

1201 i‡(
îr‹
) {

1202 
	`ds_put_f‹m©
(&
ds
, " d⁄e(%d", *
îr‹
);

1203 i‡(*
îr‹
 < 0) {

1204 
	`ds_put_f‹m©
(&
ds
, "(%s)", 
	`°ªº‹
(-*
îr‹
));

1206 
	`ds_put_c°r
(&
ds
, ")");

1208 
	`ds_put_c°r
(&
ds
, " done(truncated)");

1210 } i‡(
¥Ÿocﬁ
 =
NETLINK_GENERIC
) {

1211 
gílmsghdr
 *
gíl
 = 
	`∆_msg_gílmsghdr
(
buf„r
);

1212 i‡(
gíl
) {

1213 
	`ds_put_f‹m©
(&
ds
, ",gíl(cmd=%"
PRIu8
",version=%"PRIu8")",

1214 
gíl
->
cmd
, gíl->
vîsi⁄
);

1218 
	`ds_put_c°r
(&
ds
, "nl(truncated)");

1220  
ds
.
°rög
;

1221 
	}
}

1224 
	$log_∆msg
(c⁄° *
fun˘i⁄
, 
îr‹
,

1225 c⁄° *
mesßge
, 
size_t
 
size
, 
¥Ÿocﬁ
)

1227 
oÂbuf
 
buf„r
;

1228 *
∆msg
;

1230 i‡(!
	`VLOG_IS_DBG_ENABLED
()) {

1234 
	`oÂbuf_u£_c⁄°
(&
buf„r
, 
mesßge
, 
size
);

1235 
∆msg
 = 
	`∆msg_to_°rög
(&
buf„r
, 
¥Ÿocﬁ
);

1236 
	`VLOG_DBG_RL
(&
æ
, "%†(%s): %s", 
fun˘i⁄
, 
	`°ªº‹
(
îr‹
), 
∆msg
);

1237 
	`‰ì
(
∆msg
);

1238 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/netlink-socket.h

17 #i‚de‡
NETLINK_SOCKET_H


18 
	#NETLINK_SOCKET_H
 1

	)

35 
	~<°dboﬁ.h
>

36 
	~<°ddef.h
>

37 
	~<°döt.h
>

38 
	~"oÂbuf.h
"

40 
	g∆_sock
;

42 #i‚de‡
HAVE_NETLINK


47 
∆_sock_¸óã
(
¥Ÿocﬁ
, 
∆_sock
 **);

48 
∆_sock_˛⁄e
(c⁄° 
∆_sock
 *, nl_sock **);

49 
∆_sock_de°roy
(
∆_sock
 *);

51 
∆_sock_joö_mcgroup
(
∆_sock
 *, 
mu…iˇ°_group
);

52 
∆_sock_Àave_mcgroup
(
∆_sock
 *, 
mu…iˇ°_group
);

54 
∆_sock_£nd
(
∆_sock
 *, c⁄° 
oÂbuf
 *, 
boﬁ
 
waô
);

55 
∆_sock_£nd_£q
(
∆_sock
 *, c⁄° 
oÂbuf
 *,

56 
uöt32_t
 
∆msg_£q
, 
boﬁ
 
waô
);

57 
∆_sock_ªcv
(
∆_sock
 *, 
oÂbuf
 *, 
boﬁ
 
waô
);

58 
∆_sock_å™ß˘
(
∆_sock
 *, c⁄° 
oÂbuf
 *
ªque°
,

59 
oÂbuf
 **
ª∂yp
);

61 
∆_sock_døö
(
∆_sock
 *);

63 
∆_sock_waô
(c⁄° 
∆_sock
 *, 
evíts
);

64 
∆_sock_fd
(c⁄° 
∆_sock
 *);

66 
uöt32_t
 
∆_sock_pid
(c⁄° 
∆_sock
 *);

69 
	s∆_å™ß˘i⁄
 {

71 
oÂbuf
 *
	mªque°
;

80 
oÂbuf
 *
	mª∂y
;

81 
	mîr‹
;

84 
∆_sock_å™ß˘_mu…ùÀ
(
∆_sock
 *,

85 
∆_å™ß˘i⁄
 **, 
size_t
 
n
);

88 
	s∆_dump
 {

89 
∆_sock
 *
	msock
;

90 
uöt32_t
 
	m£q
;

91 
oÂbuf
 
	mbuf„r
;

92 
	m°©us
;

95 
∆_dump_°¨t
(
∆_dump
 *, 
∆_sock
 *,

96 c⁄° 
oÂbuf
 *
ªque°
);

97 
boﬁ
 
∆_dump_√xt
(
∆_dump
 *, 
oÂbuf
 *
ª∂y
);

98 
∆_dump_d⁄e
(
∆_dump
 *);

101 
∆_lookup_gíl_Ámûy
(c⁄° *
«me
, *
numbî
);

102 
∆_lookup_gíl_mcgroup
(c⁄° *
Ámûy_«me
, c⁄° *
group_«me
,

103 *
mu…iˇ°_group
,

104 
ÁŒback
);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/netlink.c

17 
	~<c⁄fig.h
>

18 
	~"√éök.h
"

19 
	~<as£π.h
>

20 
	~<î∫o.h
>

21 
	~<öây≥s.h
>

22 
	~<sys/ty≥s.h
>

23 
	~<uni°d.h
>

24 
	~"covîage.h
"

25 
	~"√éök-¥Ÿocﬁ.h
"

26 
	~"oÂbuf.h
"

27 
	~"timevÆ.h
"

28 
	~"u«lig√d.h
"

29 
	~"vlog.h
"

31 
VLOG_DEFINE_THIS_MODULE
(
√éök
);

36 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(60, 600);

41 
∆msghdr
 *

42 
	$∆_msg_∆msghdr
(c⁄° 
oÂbuf
 *
msg
)

44  
	`oÂbuf_©_as£π
(
msg
, 0, 
NLMSG_HDRLEN
);

45 
	}
}

51 
gílmsghdr
 *

52 
	$∆_msg_gílmsghdr
(c⁄° 
oÂbuf
 *
msg
)

54  
	`oÂbuf_©
(
msg
, 
NLMSG_HDRLEN
, 
GENL_HDRLEN
);

55 
	}
}

62 
boﬁ


63 
	$∆_msg_∆msgîr
(c⁄° 
oÂbuf
 *
msg
, *
îr‹p
)

65 i‡(
	`∆_msg_∆msghdr
(
msg
)->
∆msg_ty≥
 =
NLMSG_ERROR
) {

66 
∆msgîr
 *
îr
 = 
	`oÂbuf_©
(
msg
, 
NLMSG_HDRLEN
,  *err);

67 
code
 = 
EPROTO
;

68 i‡(!
îr
) {

69 
	`VLOG_ERR_RL
(&
æ
, "received invalidÇlmsgerr (%zd bytes < %zd)",

70 
msg
->
size
, 
NLMSG_HDRLEN
 +  *
îr
);

71 } i‡(
îr
->
îr‹
 <0 &&Éº->îr‹ > 
INT_MIN
) {

72 
code
 = -
îr
->
îr‹
;

74 i‡(
îr‹p
) {

75 *
îr‹p
 = 
code
;

77  
åue
;

79  
Ál£
;

81 
	}
}

86 
	$∆_msg_ª£rve
(
oÂbuf
 *
msg
, 
size_t
 
size
)

88 
	`oÂbuf_¥óŒoc_èûroom
(
msg
, 
	`NLMSG_ALIGN
(
size
));

89 
	}
}

111 
	$∆_msg_put_∆msghdr
(
oÂbuf
 *
msg
,

112 
size_t
 
ex≥˘ed_∑ylﬂd
, 
uöt32_t
 
ty≥
, uöt32_à
Êags
)

114 
∆msghdr
 *nlmsghdr;

116 
	`as£π
(
msg
->
size
 == 0);

118 
	`∆_msg_ª£rve
(
msg
, 
NLMSG_HDRLEN
 + 
ex≥˘ed_∑ylﬂd
);

119 
∆msghdr
 = 
	`∆_msg_put_unöô
(
msg
, 
NLMSG_HDRLEN
);

120 
∆msghdr
->
∆msg_Àn
 = 0;

121 
∆msghdr
->
∆msg_ty≥
 = 
ty≥
;

122 
∆msghdr
->
∆msg_Êags
 = 
Êags
;

123 
∆msghdr
->
∆msg_£q
 = 0;

124 
∆msghdr
->
∆msg_pid
 = 0;

125 
	}
}

149 
	$∆_msg_put_gílmsghdr
(
oÂbuf
 *
msg
, 
size_t
 
ex≥˘ed_∑ylﬂd
,

150 
Ámûy
, 
uöt32_t
 
Êags
, 
uöt8_t
 
cmd
, uöt8_à
vîsi⁄
)

152 
gílmsghdr
 *genlmsghdr;

154 
	`∆_msg_put_∆msghdr
(
msg
, 
GENL_HDRLEN
 + 
ex≥˘ed_∑ylﬂd
, 
Ámûy
, 
Êags
);

155 
	`as£π
(
msg
->
size
 =
NLMSG_HDRLEN
);

156 
gílmsghdr
 = 
	`∆_msg_put_unöô
(
msg
, 
GENL_HDRLEN
);

157 
gílmsghdr
->
cmd
 = cmd;

158 
gílmsghdr
->
vîsi⁄
 = version;

159 
gílmsghdr
->
ª£rved
 = 0;

160 
	}
}

166 
	$∆_msg_put
(
oÂbuf
 *
msg
, c⁄° *
d©a
, 
size_t
 
size
)

168 
	`mem˝y
(
	`∆_msg_put_unöô
(
msg
, 
size
), 
d©a
, size);

169 
	}
}

175 
	$∆_msg_put_unöô
(
oÂbuf
 *
msg
, 
size_t
 
size
)

177 
size_t
 
∑d
 = 
	`NLMSG_ALIGN
(
size
) - size;

178 *
p
 = 
	`oÂbuf_put_unöô
(
msg
, 
size
 + 
∑d
);

179 i‡(
∑d
) {

180 
	`mem£t
(
p
 + 
size
, 0, 
∑d
);

182  
p
;

183 
	}
}

189 
	$∆_msg_push
(
oÂbuf
 *
msg
, c⁄° *
d©a
, 
size_t
 
size
)

191 
	`mem˝y
(
	`∆_msg_push_unöô
(
msg
, 
size
), 
d©a
, size);

192 
	}
}

198 
	$∆_msg_push_unöô
(
oÂbuf
 *
msg
, 
size_t
 
size
)

200 
size_t
 
∑d
 = 
	`NLMSG_ALIGN
(
size
) - size;

201 *
p
 = 
	`oÂbuf_push_unöô
(
msg
, 
size
 + 
∑d
);

202 i‡(
∑d
) {

203 
	`mem£t
(
p
 + 
size
, 0, 
∑d
);

205  
p
;

206 
	}
}

213 
	$∆_msg_put_un•ec_unöô
(
oÂbuf
 *
msg
, 
uöt16_t
 
ty≥
, 
size_t
 
size
)

215 
size_t
 
tŸÆ_size
 = 
NLA_HDRLEN
 + 
size
;

216 
∆©å
* 
∆a
 = 
	`∆_msg_put_unöô
(
msg
, 
tŸÆ_size
);

217 
	`as£π
(
	`NLA_ALIGN
(
tŸÆ_size
Ë<
UINT16_MAX
);

218 
∆a
->
∆a_Àn
 = 
tŸÆ_size
;

219 
∆a
->
∆a_ty≥
 = 
ty≥
;

220  
∆a
 + 1;

221 
	}
}

228 
	$∆_msg_put_un•ec
(
oÂbuf
 *
msg
, 
uöt16_t
 
ty≥
,

229 c⁄° *
d©a
, 
size_t
 
size
)

231 
	`mem˝y
(
	`∆_msg_put_un•ec_unöô
(
msg
, 
ty≥
, 
size
), 
d©a
, size);

232 
	}
}

238 
	$∆_msg_put_Êag
(
oÂbuf
 *
msg
, 
uöt16_t
 
ty≥
)

240 
	`∆_msg_put_un•ec
(
msg
, 
ty≥
, 
NULL
, 0);

241 
	}
}

246 
	$∆_msg_put_u8
(
oÂbuf
 *
msg
, 
uöt16_t
 
ty≥
, 
uöt8_t
 
vÆue
)

248 
	`∆_msg_put_un•ec
(
msg
, 
ty≥
, &
vÆue
,  value);

249 
	}
}

254 
	$∆_msg_put_u16
(
oÂbuf
 *
msg
, 
uöt16_t
 
ty≥
, uöt16_à
vÆue
)

256 
	`∆_msg_put_un•ec
(
msg
, 
ty≥
, &
vÆue
,  value);

257 
	}
}

262 
	$∆_msg_put_u32
(
oÂbuf
 *
msg
, 
uöt16_t
 
ty≥
, 
uöt32_t
 
vÆue
)

264 
	`∆_msg_put_un•ec
(
msg
, 
ty≥
, &
vÆue
,  value);

265 
	}
}

270 
	$∆_msg_put_u64
(
oÂbuf
 *
msg
, 
uöt16_t
 
ty≥
, 
uöt64_t
 
vÆue
)

272 
	`∆_msg_put_un•ec
(
msg
, 
ty≥
, &
vÆue
,  value);

273 
	}
}

278 
	$∆_msg_put_be16
(
oÂbuf
 *
msg
, 
uöt16_t
 
ty≥
, 
ovs_be16
 
vÆue
)

280 
	`∆_msg_put_un•ec
(
msg
, 
ty≥
, &
vÆue
,  value);

281 
	}
}

286 
	$∆_msg_put_be32
(
oÂbuf
 *
msg
, 
uöt16_t
 
ty≥
, 
ovs_be32
 
vÆue
)

288 
	`∆_msg_put_un•ec
(
msg
, 
ty≥
, &
vÆue
,  value);

289 
	}
}

294 
	$∆_msg_put_be64
(
oÂbuf
 *
msg
, 
uöt16_t
 
ty≥
, 
ovs_be64
 
vÆue
)

296 
	`∆_msg_put_un•ec
(
msg
, 
ty≥
, &
vÆue
,  value);

297 
	}
}

302 
	$∆_msg_put_°rög
(
oÂbuf
 *
msg
, 
uöt16_t
 
ty≥
, c⁄° *
vÆue
)

304 
	`∆_msg_put_un•ec
(
msg
, 
ty≥
, 
vÆue
, 
	`°æí
(value) + 1);

305 
	}
}

312 
	$∆_msg_push_un•ec_unöô
(
oÂbuf
 *
msg
, 
uöt16_t
 
ty≥
, 
size_t
 
size
)

314 
size_t
 
tŸÆ_size
 = 
NLA_HDRLEN
 + 
size
;

315 
∆©å
* 
∆a
 = 
	`∆_msg_push_unöô
(
msg
, 
tŸÆ_size
);

316 
	`as£π
(
	`NLA_ALIGN
(
tŸÆ_size
Ë<
UINT16_MAX
);

317 
∆a
->
∆a_Àn
 = 
tŸÆ_size
;

318 
∆a
->
∆a_ty≥
 = 
ty≥
;

319  
∆a
 + 1;

320 
	}
}

327 
	$∆_msg_push_un•ec
(
oÂbuf
 *
msg
, 
uöt16_t
 
ty≥
,

328 c⁄° *
d©a
, 
size_t
 
size
)

330 
	`mem˝y
(
	`∆_msg_push_un•ec_unöô
(
msg
, 
ty≥
, 
size
), 
d©a
, size);

331 
	}
}

337 
	$∆_msg_push_Êag
(
oÂbuf
 *
msg
, 
uöt16_t
 
ty≥
)

339 
	`∆_msg_push_un•ec
(
msg
, 
ty≥
, 
NULL
, 0);

340 
	}
}

345 
	$∆_msg_push_u8
(
oÂbuf
 *
msg
, 
uöt16_t
 
ty≥
, 
uöt8_t
 
vÆue
)

347 
	`∆_msg_push_un•ec
(
msg
, 
ty≥
, &
vÆue
,  value);

348 
	}
}

353 
	$∆_msg_push_u16
(
oÂbuf
 *
msg
, 
uöt16_t
 
ty≥
, uöt16_à
vÆue
)

355 
	`∆_msg_push_un•ec
(
msg
, 
ty≥
, &
vÆue
,  value);

356 
	}
}

361 
	$∆_msg_push_u32
(
oÂbuf
 *
msg
, 
uöt16_t
 
ty≥
, 
uöt32_t
 
vÆue
)

363 
	`∆_msg_push_un•ec
(
msg
, 
ty≥
, &
vÆue
,  value);

364 
	}
}

369 
	$∆_msg_push_u64
(
oÂbuf
 *
msg
, 
uöt16_t
 
ty≥
, 
uöt64_t
 
vÆue
)

371 
	`∆_msg_push_un•ec
(
msg
, 
ty≥
, &
vÆue
,  value);

372 
	}
}

377 
	$∆_msg_push_be16
(
oÂbuf
 *
msg
, 
uöt16_t
 
ty≥
, 
ovs_be16
 
vÆue
)

379 
	`∆_msg_push_un•ec
(
msg
, 
ty≥
, &
vÆue
,  value);

380 
	}
}

385 
	$∆_msg_push_be32
(
oÂbuf
 *
msg
, 
uöt16_t
 
ty≥
, 
ovs_be32
 
vÆue
)

387 
	`∆_msg_push_un•ec
(
msg
, 
ty≥
, &
vÆue
,  value);

388 
	}
}

393 
	$∆_msg_push_be64
(
oÂbuf
 *
msg
, 
uöt16_t
 
ty≥
, 
ovs_be64
 
vÆue
)

395 
	`∆_msg_push_un•ec
(
msg
, 
ty≥
, &
vÆue
,  value);

396 
	}
}

401 
	$∆_msg_push_°rög
(
oÂbuf
 *
msg
, 
uöt16_t
 
ty≥
, c⁄° *
vÆue
)

403 
	`∆_msg_push_un•ec
(
msg
, 
ty≥
, 
vÆue
, 
	`°æí
(value) + 1);

404 
	}
}

411 
size_t


412 
	$∆_msg_°¨t_√°ed
(
oÂbuf
 *
msg
, 
uöt16_t
 
ty≥
)

414 
size_t
 
off£t
 = 
msg
->
size
;

415 
	`∆_msg_put_un•ec
(
msg
, 
ty≥
, 
NULL
, 0);

416  
off£t
;

417 
	}
}

422 
	$∆_msg_íd_√°ed
(
oÂbuf
 *
msg
, 
size_t
 
off£t
)

424 
∆©å
 *
©å
 = 
	`oÂbuf_©_as£π
(
msg
, 
off£t
,  *attr);

425 
©å
->
∆a_Àn
 = 
msg
->
size
 - 
off£t
;

426 
	}
}

431 
	$∆_msg_put_√°ed
(
oÂbuf
 *
msg
,

432 
uöt16_t
 
ty≥
, c⁄° *
d©a
, 
size_t
 
size
)

434 
size_t
 
off£t
 = 
	`∆_msg_°¨t_√°ed
(
msg
, 
ty≥
);

435 
	`∆_msg_put
(
msg
, 
d©a
, 
size
);

436 
	`∆_msg_íd_√°ed
(
msg
, 
off£t
);

437 
	}
}

445 
∆msghdr
 *

446 
	$∆_msg_√xt
(
oÂbuf
 *
buf„r
, oÂbu‡*
msg
)

448 i‡(
buf„r
->
size
 >(
∆msghdr
)) {

449 
∆msghdr
 *∆msghd∏
	`∆_msg_∆msghdr
(
buf„r
);

450 
size_t
 
Àn
 = 
∆msghdr
->
∆msg_Àn
;

451 i‡(
Àn
 > *
∆msghdr
 &&Üí <
buf„r
->
size
) {

452 
	`oÂbuf_u£_c⁄°
(
msg
, 
∆msghdr
, 
Àn
);

453 
	`oÂbuf_puŒ
(
buf„r
, 
Àn
);

454  
∆msghdr
;

458 
msg
->
d©a
 = 
NULL
;

459 
msg
->
size
 = 0;

460  
NULL
;

461 
	}
}

468 
	$∆_©å_ty≥
(c⁄° 
∆©å
 *
∆a
)

470  
∆a
->
∆a_ty≥
 & 
NLA_TYPE_MASK
;

471 
	}
}

475 
	$∆_©å_gë
(c⁄° 
∆©å
 *
∆a
)

477 
	`as£π
(
∆a
->
∆a_Àn
 >
NLA_HDRLEN
);

478  
∆a
 + 1;

479 
	}
}

482 
size_t


483 
	$∆_©å_gë_size
(c⁄° 
∆©å
 *
∆a
)

485 
	`as£π
(
∆a
->
∆a_Àn
 >
NLA_HDRLEN
);

486  
∆a
->
∆a_Àn
 - 
NLA_HDRLEN
;

487 
	}
}

492 
	$∆_©å_gë_un•ec
(c⁄° 
∆©å
 *
∆a
, 
size_t
 
size
)

494 
	`as£π
(
∆a
->
∆a_Àn
 >
NLA_HDRLEN
 + 
size
);

495  
∆a
 + 1;

496 
	}
}

500 
boﬁ


501 
	$∆_©å_gë_Êag
(c⁄° 
∆©å
 *
∆a
)

503  
∆a
 !
NULL
;

504 
	}
}

506 
	#NL_ATTR_GET_AS
(
NLA
, 
TYPE
) \

507 (*(
TYPE
*Ë
	`∆_©å_gë_un•ec
(
∆a
, (TYPE)))

	)

512 
uöt8_t


513 
	$∆_©å_gë_u8
(c⁄° 
∆©å
 *
∆a
)

515  
	`NL_ATTR_GET_AS
(
∆a
, 
uöt8_t
);

516 
	}
}

521 
uöt16_t


522 
	$∆_©å_gë_u16
(c⁄° 
∆©å
 *
∆a
)

524  
	`NL_ATTR_GET_AS
(
∆a
, 
uöt16_t
);

525 
	}
}

530 
uöt32_t


531 
	$∆_©å_gë_u32
(c⁄° 
∆©å
 *
∆a
)

533  
	`NL_ATTR_GET_AS
(
∆a
, 
uöt32_t
);

534 
	}
}

539 
uöt64_t


540 
	$∆_©å_gë_u64
(c⁄° 
∆©å
 *
∆a
)

542 c⁄° 
ovs_32Æig√d_u64
 *
x
 = 
	`∆_©å_gë_un•ec
(
∆a
,  *x);

543  
	`gë_32Æig√d_u64
(
x
);

544 
	}
}

549 
ovs_be16


550 
	$∆_©å_gë_be16
(c⁄° 
∆©å
 *
∆a
)

552  
	`NL_ATTR_GET_AS
(
∆a
, 
ovs_be16
);

553 
	}
}

558 
ovs_be32


559 
	$∆_©å_gë_be32
(c⁄° 
∆©å
 *
∆a
)

561  
	`NL_ATTR_GET_AS
(
∆a
, 
ovs_be32
);

562 
	}
}

567 
ovs_be64


568 
	$∆_©å_gë_be64
(c⁄° 
∆©å
 *
∆a
)

570 c⁄° 
ovs_32Æig√d_be64
 *
x
 = 
	`∆_©å_gë_un•ec
(
∆a
,  *x);

571  
	`gë_32Æig√d_be64
(
x
);

572 
	}
}

578 
	$∆_©å_gë_°rög
(c⁄° 
∆©å
 *
∆a
)

580 
	`as£π
(
∆a
->
∆a_Àn
 > 
NLA_HDRLEN
);

581 
	`as£π
(
	`memchr
(
	`∆_©å_gë
(
∆a
), '\0',Çœ->
∆a_Àn
 - 
NLA_HDRLEN
Ë!
NULL
);

582  
	`∆_©å_gë
(
∆a
);

583 
	}
}

587 
	$∆_©å_gë_√°ed
(c⁄° 
∆©å
 *
∆a
, 
oÂbuf
 *
√°ed
)

589 
	`oÂbuf_u£_c⁄°
(
√°ed
, 
	`∆_©å_gë
(
∆a
), 
	`∆_©å_gë_size
(nla));

590 
	}
}

593 c⁄° 
size_t
 
	g©å_Àn_ønge
[][2] = {

594 [0 ... 
N_NL_ATTR_TYPES
 - 1] = { 0, 
SIZE_MAX
 },

595 [
NL_A_U8
] = { 1, 1 },

596 [
NL_A_U16
] = { 2, 2 },

597 [
NL_A_U32
] = { 4, 4 },

598 [
NL_A_U64
] = { 8, 8 },

599 [
NL_A_STRING
] = { 1, 
SIZE_MAX
 },

600 [
NL_A_FLAG
] = { 0, 
SIZE_MAX
 },

601 [
NL_A_NESTED
] = { 0, 
SIZE_MAX
 },

604 
boﬁ


605 
	$∆_©å_vÆid©e
(c⁄° 
∆©å
 *
∆a
, c⁄° 
∆_pﬁicy
 *
pﬁicy
)

607 
uöt16_t
 
ty≥
 = 
	`∆_©å_ty≥
(
∆a
);

608 
size_t
 
mö_Àn
;

609 
size_t
 
max_Àn
;

610 
size_t
 
Àn
;

612 i‡(
pﬁicy
->
ty≥
 =
NL_A_NO_ATTR
) {

613  
åue
;

617 
mö_Àn
 = 
pﬁicy
->min_len;

618 i‡(!
mö_Àn
) {

619 
mö_Àn
 = 
©å_Àn_ønge
[
pﬁicy
->
ty≥
][0];

621 
max_Àn
 = 
pﬁicy
->max_len;

622 i‡(!
max_Àn
) {

623 
max_Àn
 = 
©å_Àn_ønge
[
pﬁicy
->
ty≥
][1];

627 
Àn
 = 
	`∆_©å_gë_size
(
∆a
);

628 i‡(
Àn
 < 
mö_Àn
 ||Üí > 
max_Àn
) {

629 
	`VLOG_DBG_RL
(&
æ
, "©å %"
PRIu16
"Üength %zuÇot in "

630 "ÆlowedÑ™gê%zu...%zu", 
ty≥
, 
Àn
, 
mö_Àn
, 
max_Àn
);

631  
Ál£
;

635 i‡(
pﬁicy
->
ty≥
 =
NL_A_STRING
) {

636 i‡(((*Ë
∆a
)[∆a->
∆a_Àn
 - 1]) {

637 
	`VLOG_DBG_RL
(&
æ
, "©å %"
PRIu16
"Üack†nuŒáàíd", 
ty≥
);

638  
Ál£
;

640 i‡(
	`memchr
(
∆a
 + 1, '\0', 
Àn
 - 1Ë!
NULL
) {

641 
	`VLOG_DBG_RL
(&
æ
, "©å %"
PRIu16
" ha†badÜígth", 
ty≥
);

642  
Ál£
;

646  
åue
;

647 
	}
}

656 
boﬁ


657 
	$∆_pﬁicy_∑r£
(c⁄° 
oÂbuf
 *
msg
, 
size_t
 
∆a_off£t
,

658 c⁄° 
∆_pﬁicy
 
pﬁicy
[],

659 
∆©å
 *
©ås
[], 
size_t
 
n_©ås
)

661 
∆©å
 *
∆a
;

662 
size_t
 
À·
;

663 
size_t
 
i
;

665 
	`mem£t
(
©ås
, 0, 
n_©ås
 *  *attrs);

667 i‡(
msg
->
size
 < 
∆a_off£t
) {

668 
	`VLOG_DBG_RL
(&
æ
, "missing headers inÇl_policy_parse");

669  
Ál£
;

672 
	`NL_ATTR_FOR_EACH
 (
∆a
, 
À·
,

673 (
∆©å
 *Ë((*Ë
msg
->
d©a
 + 
∆a_off£t
),

674 
msg
->
size
 - 
∆a_off£t
)

676 
uöt16_t
 
ty≥
 = 
	`∆_©å_ty≥
(
∆a
);

677 i‡(
ty≥
 < 
n_©ås
 && 
pﬁicy
[ty≥].ty≥ !
NL_A_NO_ATTR
) {

678 c⁄° 
∆_pﬁicy
 *
e
 = &
pﬁicy
[
ty≥
];

679 i‡(!
	`∆_©å_vÆid©e
(
∆a
, 
e
)) {

680  
Ál£
;

682 i‡(
©ås
[
ty≥
]) {

683 
	`VLOG_DBG_RL
(&
æ
, "du∂iˇãáâ∏%"
PRIu16
, 
ty≥
);

685 
©ås
[
ty≥
] = 
∆a
;

688 i‡(
À·
) {

689 
	`VLOG_DBG_RL
(&
æ
, "attributes followed by garbage");

690  
Ál£
;

693 
i
 = 0; i < 
n_©ås
; i++) {

694 c⁄° 
∆_pﬁicy
 *
e
 = &
pﬁicy
[
i
];

695 i‡(!
e
->
›ti⁄Æ
 &&É->
ty≥
 !
NL_A_NO_ATTR
 && !
©ås
[
i
]) {

696 
	`VLOG_DBG_RL
(&
æ
, "ªquúedáâ∏%zu missög", 
i
);

697  
Ál£
;

700  
åue
;

701 
	}
}

707 
boﬁ


708 
	$∆_∑r£_√°ed
(c⁄° 
∆©å
 *
∆a
, c⁄° 
∆_pﬁicy
 
pﬁicy
[],

709 
∆©å
 *
©ås
[], 
size_t
 
n_©ås
)

711 
oÂbuf
 
buf
;

713 
	`∆_©å_gë_√°ed
(
∆a
, &
buf
);

714  
	`∆_pﬁicy_∑r£
(&
buf
, 0, 
pﬁicy
, 
©ås
, 
n_©ås
);

715 
	}
}

717 c⁄° 
∆©å
 *

718 
	$∆_©å_föd__
(c⁄° 
∆©å
 *
©ås
, 
size_t
 
size
, 
uöt16_t
 
ty≥
)

720 c⁄° 
∆©å
 *
∆a
;

721 
size_t
 
À·
;

723 
	`NL_ATTR_FOR_EACH
 (
∆a
, 
À·
, 
©ås
, 
size
) {

724 i‡(
	`∆_©å_ty≥
(
∆a
Ë=
ty≥
) {

725  
∆a
;

728  
NULL
;

729 
	}
}

735 c⁄° 
∆©å
 *

736 
	$∆_©å_föd
(c⁄° 
oÂbuf
 *
buf
, 
size_t
 
hdr_Àn
, 
uöt16_t
 
ty≥
)

738 c⁄° 
uöt8_t
 *
°¨t
 = (c⁄° uöt8_à*Ë
buf
->
d©a
 + 
hdr_Àn
;

739  
	`∆_©å_föd__
((c⁄° 
∆©å
 *Ë
°¨t
, 
buf
->
size
 - 
hdr_Àn
,

740 
ty≥
);

741 
	}
}

747 c⁄° 
∆©å
 *

748 
	$∆_©å_föd_√°ed
(c⁄° 
∆©å
 *
∆a
, 
uöt16_t
 
ty≥
)

750  
	`∆_©å_föd__
(
	`∆_©å_gë
(
∆a
), 
	`∆_©å_gë_size
“œ), 
ty≥
);

751 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/netlink.h

17 #i‚de‡
NETLINK_H


18 
	#NETLINK_H
 1

	)

34 
	~<°dboﬁ.h
>

35 
	~<°ddef.h
>

36 
	~<°döt.h
>

37 
	~"√éök-¥Ÿocﬁ.h
"

38 
	~"›ívswôch/ty≥s.h
"

40 
	goÂbuf
;

41 
	g∆©å
;

44 
∆msghdr
 *
∆_msg_∆msghdr
(c⁄° 
oÂbuf
 *);

45 
gílmsghdr
 *
∆_msg_gílmsghdr
(c⁄° 
oÂbuf
 *);

46 
boﬁ
 
∆_msg_∆msgîr
(c⁄° 
oÂbuf
 *, *
îr‹
);

47 
∆_msg_ª£rve
(
oÂbuf
 *, 
size_t
);

50 
∆_msg_put_∆msghdr
(
oÂbuf
 *, 
size_t
 
ex≥˘ed_∑ylﬂd
,

51 
uöt32_t
 
ty≥
, uöt32_à
Êags
);

52 
∆_msg_put_gílmsghdr
(
oÂbuf
 *, 
size_t
 
ex≥˘ed_∑ylﬂd
,

53 
Ámûy
, 
uöt32_t
 
Êags
,

54 
uöt8_t
 
cmd
, uöt8_à
vîsi⁄
);

55 
∆_msg_put
(
oÂbuf
 *, c⁄° *, 
size_t
);

56 *
∆_msg_put_unöô
(
oÂbuf
 *, 
size_t
);

57 
∆_msg_push
(
oÂbuf
 *, c⁄° *, 
size_t
);

58 *
∆_msg_push_unöô
(
oÂbuf
 *, 
size_t
);

61 *
∆_msg_put_un•ec_unöô
(
oÂbuf
 *, 
uöt16_t
 
ty≥
, 
size_t
);

62 
∆_msg_put_un•ec
(
oÂbuf
 *, 
uöt16_t
 
ty≥
, c⁄° *, 
size_t
);

63 
∆_msg_put_Êag
(
oÂbuf
 *, 
uöt16_t
 
ty≥
);

64 
∆_msg_put_u8
(
oÂbuf
 *, 
uöt16_t
 
ty≥
, 
uöt8_t
 
vÆue
);

65 
∆_msg_put_u16
(
oÂbuf
 *, 
uöt16_t
 
ty≥
, uöt16_à
vÆue
);

66 
∆_msg_put_u32
(
oÂbuf
 *, 
uöt16_t
 
ty≥
, 
uöt32_t
 
vÆue
);

67 
∆_msg_put_u64
(
oÂbuf
 *, 
uöt16_t
 
ty≥
, 
uöt64_t
 
vÆue
);

68 
∆_msg_put_be16
(
oÂbuf
 *, 
uöt16_t
 
ty≥
, 
ovs_be16
 
vÆue
);

69 
∆_msg_put_be32
(
oÂbuf
 *, 
uöt16_t
 
ty≥
, 
ovs_be32
 
vÆue
);

70 
∆_msg_put_be64
(
oÂbuf
 *, 
uöt16_t
 
ty≥
, 
ovs_be64
 
vÆue
);

71 
∆_msg_put_°rög
(
oÂbuf
 *, 
uöt16_t
 
ty≥
, c⁄° *
vÆue
);

73 
size_t
 
∆_msg_°¨t_√°ed
(
oÂbuf
 *, 
uöt16_t
 
ty≥
);

74 
∆_msg_íd_√°ed
(
oÂbuf
 *, 
size_t
 
off£t
);

75 
∆_msg_put_√°ed
(
oÂbuf
 *, 
uöt16_t
 
ty≥
,

76 c⁄° *
d©a
, 
size_t
 
size
);

79 *
∆_msg_push_un•ec_unöô
(
oÂbuf
 *, 
uöt16_t
 
ty≥
, 
size_t
);

80 
∆_msg_push_un•ec
(
oÂbuf
 *, 
uöt16_t
 
ty≥
, c⁄° *, 
size_t
);

81 
∆_msg_push_Êag
(
oÂbuf
 *, 
uöt16_t
 
ty≥
);

82 
∆_msg_push_u8
(
oÂbuf
 *, 
uöt16_t
 
ty≥
, 
uöt8_t
 
vÆue
);

83 
∆_msg_push_u16
(
oÂbuf
 *, 
uöt16_t
 
ty≥
, uöt16_à
vÆue
);

84 
∆_msg_push_u32
(
oÂbuf
 *, 
uöt16_t
 
ty≥
, 
uöt32_t
 
vÆue
);

85 
∆_msg_push_u64
(
oÂbuf
 *, 
uöt16_t
 
ty≥
, 
uöt64_t
 
vÆue
);

86 
∆_msg_push_be16
(
oÂbuf
 *, 
uöt16_t
 
ty≥
, 
ovs_be16
 
vÆue
);

87 
∆_msg_push_be32
(
oÂbuf
 *, 
uöt16_t
 
ty≥
, 
ovs_be32
 
vÆue
);

88 
∆_msg_push_be64
(
oÂbuf
 *, 
uöt16_t
 
ty≥
, 
ovs_be64
 
vÆue
);

89 
∆_msg_push_°rög
(
oÂbuf
 *, 
uöt16_t
 
ty≥
, c⁄° *
vÆue
);

92 
∆msghdr
 *
∆_msg_√xt
(
oÂbuf
 *
buf„r
, oÂbu‡*
msg
);

96 
	#NL_ATTR_SIZE
(
PAYLOAD_SIZE
Ë(
NLA_HDRLEN
 + 
	`NLA_ALIGN
(PAYLOAD_SIZE))

	)

97 
	#NL_A_U8_SIZE
 
	`NL_ATTR_SIZE
((
uöt8_t
))

	)

98 
	#NL_A_U16_SIZE
 
	`NL_ATTR_SIZE
((
uöt16_t
))

	)

99 
	#NL_A_U32_SIZE
 
	`NL_ATTR_SIZE
((
uöt32_t
))

	)

100 
	#NL_A_U64_SIZE
 
	`NL_ATTR_SIZE
((
uöt64_t
))

	)

101 
	#NL_A_BE16_SIZE
 
	`NL_ATTR_SIZE
((
ovs_be16
))

	)

102 
	#NL_A_BE32_SIZE
 
	`NL_ATTR_SIZE
((
ovs_be32
))

	)

103 
	#NL_A_BE64_SIZE
 
	`NL_ATTR_SIZE
((
ovs_be64
))

	)

104 
	#NL_A_FLAG_SIZE
 
	`NL_ATTR_SIZE
(0)

	)

107 
	e∆_©å_ty≥


109 
	mNL_A_NO_ATTR
 = 0,

110 
	mNL_A_UNSPEC
,

111 
	mNL_A_U8
,

112 
	mNL_A_U16
,

113 
	mNL_A_BE16
 = 
NL_A_U16
,

114 
	mNL_A_U32
,

115 
	mNL_A_BE32
 = 
NL_A_U32
,

116 
	mNL_A_U64
,

117 
	mNL_A_BE64
 = 
NL_A_U64
,

118 
	mNL_A_STRING
,

119 
	mNL_A_FLAG
,

120 
	mNL_A_NESTED
,

121 
	mN_NL_ATTR_TYPES


125 
ölöe
 
∆©å
 *

126 
	$∆_©å_√xt
(c⁄° 
∆©å
 *
∆a
)

128  (*Ë((
uöt8_t
 *Ë
∆a
 + 
	`NLA_ALIGN
“œ->
∆a_Àn
));

129 
	}
}

131 
ölöe
 
boﬁ


132 
	$∆_©å_is_vÆid
(c⁄° 
∆©å
 *
∆a
, 
size_t
 
maxÀn
)

134  (
maxÀn
 > *
∆a


135 && 
∆a
->
∆a_Àn
 >=  *nla

136 && 
	`NLA_ALIGN
(
∆a
->
∆a_Àn
Ë<
maxÀn
);

137 
	}
}

140 
	#NL_ATTR_FOR_EACH
(
ITER
, 
LEFT
, 
ATTRS
, 
ATTRS_LEN
) \

141 (
ITER
Ë(
ATTRS
), (
LEFT
Ë(
ATTRS_LEN
); \

142 
	`∆_©å_is_vÆid
(
ITER
, 
LEFT
); \

143 (
LEFT
Ë-
	`NLA_ALIGN
((
ITER
)->
∆a_Àn
), (ITERË
	`∆_©å_√xt
(ITER))

	)

149 
	#NL_ATTR_FOR_EACH_UNSAFE
(
ITER
, 
LEFT
, 
ATTRS
, 
ATTRS_LEN
) \

150 (
ITER
Ë(
ATTRS
), (
LEFT
Ë(
ATTRS_LEN
); \

151 (
LEFT
) > 0; \

152 (
LEFT
Ë-
	`NLA_ALIGN
((
ITER
)->
∆a_Àn
), (ITERË
	`∆_©å_√xt
(ITER))

	)

155 
	#NL_NESTED_FOR_EACH
(
ITER
, 
LEFT
, 
A
) \

156 
	`NL_ATTR_FOR_EACH
(
ITER
, 
LEFT
, 
	`∆_©å_gë
(
A
), 
	`∆_©å_gë_size
(A))

	)

157 
	#NL_NESTED_FOR_EACH_UNSAFE
(
ITER
, 
LEFT
, 
A
) \

158 
	`NL_ATTR_FOR_EACH_UNSAFE
(
ITER
, 
LEFT
, 
	`∆_©å_gë
(
A
), 
	`∆_©å_gë_size
(A))

	)

161 
∆_©å_ty≥
(c⁄° 
∆©å
 *);

162 c⁄° *
∆_©å_gë
(c⁄° 
∆©å
 *);

163 
size_t
 
∆_©å_gë_size
(c⁄° 
∆©å
 *);

164 c⁄° *
∆_©å_gë_un•ec
(c⁄° 
∆©å
 *, 
size_t
 
size
);

165 
boﬁ
 
∆_©å_gë_Êag
(c⁄° 
∆©å
 *);

166 
uöt8_t
 
∆_©å_gë_u8
(c⁄° 
∆©å
 *);

167 
uöt16_t
 
∆_©å_gë_u16
(c⁄° 
∆©å
 *);

168 
uöt32_t
 
∆_©å_gë_u32
(c⁄° 
∆©å
 *);

169 
uöt64_t
 
∆_©å_gë_u64
(c⁄° 
∆©å
 *);

170 
ovs_be16
 
∆_©å_gë_be16
(c⁄° 
∆©å
 *);

171 
ovs_be32
 
∆_©å_gë_be32
(c⁄° 
∆©å
 *);

172 
ovs_be64
 
∆_©å_gë_be64
(c⁄° 
∆©å
 *);

173 c⁄° *
∆_©å_gë_°rög
(c⁄° 
∆©å
 *);

174 
∆_©å_gë_√°ed
(c⁄° 
∆©å
 *, 
oÂbuf
 *);

180 
	s∆_pﬁicy


182 
∆_©å_ty≥
 
	mty≥
;

183 
size_t
 
	mmö_Àn
, 
	mmax_Àn
;

184 
boﬁ
 
	m›ti⁄Æ
;

187 
	#NL_POLICY_FOR
(
TYPE
) \

188 .
ty≥
 = 
NL_A_UNSPEC
, .
mö_Àn
 = (
TYPE
), .
max_Àn
 = (TYPE)

	)

190 
boﬁ
 
∆_©å_vÆid©e
(c⁄° 
∆©å
 *, c⁄° 
∆_pﬁicy
 *);

192 
boﬁ
 
∆_pﬁicy_∑r£
(c⁄° 
oÂbuf
 *, 
size_t
 
off£t
,

193 c⁄° 
∆_pﬁicy
[],

194 
∆©å
 *[], 
size_t
 
n_©ås
);

195 
boﬁ
 
∆_∑r£_√°ed
(c⁄° 
∆©å
 *, c⁄° 
∆_pﬁicy
[],

196 
∆©å
 *[], 
size_t
 
n_©ås
);

198 c⁄° 
∆©å
 *
∆_©å_föd
(c⁄° 
oÂbuf
 *, 
size_t
 
hdr_Àn
,

199 
uöt16_t
 
ty≥
);

200 c⁄° 
∆©å
 *
∆_©å_föd_√°ed
(c⁄° ∆©å *, 
uöt16_t
 
ty≥
);

201 c⁄° 
∆©å
 *
∆_©å_föd__
(c⁄° ∆©å *
©ås
, 
size_t
 
size
,

202 
uöt16_t
 
ty≥
);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/nx-match.c

17 
	~<c⁄fig.h
>

19 
	~"nx-m©ch.h
"

21 
	~<√töë/icmp6.h
>

23 
	~"˛assifõr.h
"

24 
	~"dy«mic-°rög.h
"

25 
	~"mëa-Êow.h
"

26 
	~"oÂ-a˘i⁄s.h
"

27 
	~"oÂ-îr‹s.h
"

28 
	~"oÂ-utû.h
"

29 
	~"oÂbuf.h
"

30 
	~"›íÊow/nicúa-ext.h
"

31 
	~"∑ckës.h
"

32 
	~"u«lig√d.h
"

33 
	~"utû.h
"

34 
	~"vlog.h
"

36 
VLOG_DEFINE_THIS_MODULE
(
nx_m©ch
);

40 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(1, 5);

45 
	$nxm_fõld_byãs
(
uöt32_t
 
hódî
)

47 
Àngth
 = 
	`NXM_LENGTH
(
hódî
);

48  
	`NXM_HASMASK
(
hódî
Ë? 
Àngth
 / 2 :Üength;

49 
	}
}

54 
	$nxm_fõld_bôs
(
uöt32_t
 
hódî
)

56  
	`nxm_fõld_byãs
(
hódî
) * 8;

57 
	}
}

61 
uöt32_t


62 
	$nx_íåy_ok
(c⁄° *
p
, 
m©ch_Àn
)

64 
∑ylﬂd_Àn
;

65 
ovs_be32
 
hódî_be
;

66 
uöt32_t
 
hódî
;

68 i‡(
m©ch_Àn
 < 4) {

69 i‡(
m©ch_Àn
) {

70 
	`VLOG_DBG_RL
(&
æ
, "nx_matchÉnds withÖartial (%u-byte)Çxm_header",

71 
m©ch_Àn
);

75 
	`mem˝y
(&
hódî_be
, 
p
, 4);

76 
hódî
 = 
	`¡ohl
(
hódî_be
);

78 
∑ylﬂd_Àn
 = 
	`NXM_LENGTH
(
hódî
);

79 i‡(!
∑ylﬂd_Àn
) {

80 
	`VLOG_DBG_RL
(&
æ
, "nxm_íåy %08"
PRIx32
" has invalidÖayload "

81 "Àngth 0", 
hódî
);

84 i‡(
m©ch_Àn
 < 
∑ylﬂd_Àn
 + 4) {

85 
	`VLOG_DBG_RL
(&
æ
, "%"
PRIu32
"-byteÇxm_entry but only "

86 "%u byã†À· i¿nx_m©ch", 
∑ylﬂd_Àn
 + 4, 
m©ch_Àn
);

90  
hódî
;

91 
	}
}

93 
oÂîr


94 
	$nx_puŒ_øw
(c⁄° 
uöt8_t
 *
p
, 
m©ch_Àn
, 
boﬁ
 
°ri˘
,

95 
m©ch
 *m©ch, 
ovs_be64
 *
cookõ
, ovs_be64 *
cookõ_mask
)

97 
uöt32_t
 
hódî
;

99 
	`as£π
((
cookõ
 !
NULL
Ë=(
cookõ_mask
 != NULL));

101 
	`m©ch_öô_ˇtchÆl
(
m©ch
);

102 i‡(
cookõ
) {

103 *
cookõ
 = *
cookõ_mask
 = 
	`ht⁄Œ
(0);

105 i‡(!
m©ch_Àn
) {

110 (
hódî
 = 
	`nx_íåy_ok
(
p
, 
m©ch_Àn
)) != 0;

111 
p
 +4 + 
	`NXM_LENGTH
(
hódî
), 
m©ch_Àn
 -= 4 + NXM_LENGTH(header)) {

112 c⁄° 
mf_fõld
 *
mf
;

113 
oÂîr
 
îr‹
;

115 
mf
 = 
	`mf_‰om_nxm_hódî
(
hódî
);

116 i‡(!
mf
) {

117 i‡(
°ri˘
) {

118 
îr‹
 = 
OFPERR_OFPBMC_BAD_FIELD
;

122 } i‡(!
	`mf_¨e_¥îeqs_ok
(
mf
, &
m©ch
->
Êow
)) {

123 
îr‹
 = 
OFPERR_OFPBMC_BAD_PREREQ
;

124 } i‡(!
	`mf_is_Æl_wûd
(
mf
, &
m©ch
->
wc
)) {

125 
îr‹
 = 
OFPERR_OFPBMC_DUP_FIELD
;

126 } i‡(
hódî
 !
OXM_OF_IN_PORT
) {

127 
width
 = 
mf
->
n_byãs
;

128 
mf_vÆue
 
vÆue
;

130 
	`mem˝y
(&
vÆue
, 
p
 + 4, 
width
);

131 i‡(!
	`mf_is_vÆue_vÆid
(
mf
, &
vÆue
)) {

132 
îr‹
 = 
OFPERR_OFPBMC_BAD_VALUE
;

133 } i‡(!
	`NXM_HASMASK
(
hódî
)) {

134 
îr‹
 = 0;

135 
	`mf_£t_vÆue
(
mf
, &
vÆue
, 
m©ch
);

137 
mf_vÆue
 
mask
;

139 
	`mem˝y
(&
mask
, 
p
 + 4 + 
width
, width);

140 i‡(!
	`mf_is_mask_vÆid
(
mf
, &
mask
)) {

141 
îr‹
 = 
OFPERR_OFPBMC_BAD_MASK
;

143 
îr‹
 = 0;

144 
	`mf_£t
(
mf
, &
vÆue
, &
mask
, 
m©ch
);

150 
ovs_be32
 
p‹t_of11
;

151 
uöt16_t
 
p‹t
;

153 
	`mem˝y
(&
p‹t_of11
, 
p
 + 4, Öort_of11);

154 
îr‹
 = 
	`oÂutû_p‹t_‰om_oÂ11
(
p‹t_of11
, &
p‹t
);

155 i‡(!
îr‹
) {

156 
	`m©ch_£t_ö_p‹t
(
m©ch
, 
p‹t
);

161 i‡((
hódî
 =
NXM_NX_COOKIE
 || hódî =
NXM_NX_COOKIE_W
Ë&& 
cookõ
) {

162 i‡(*
cookõ_mask
) {

163 
îr‹
 = 
OFPERR_OFPBMC_DUP_FIELD
;

165 
width
 =  *
cookõ
;

167 
	`mem˝y
(
cookõ
, 
p
 + 4, 
width
);

168 i‡(
	`NXM_HASMASK
(
hódî
)) {

169 
	`mem˝y
(
cookõ_mask
, 
p
 + 4 + 
width
, width);

171 *
cookõ_mask
 = 
	`ht⁄Œ
(
UINT64_MAX
);

173 
îr‹
 = 0;

177 i‡(
îr‹
) {

178 
	`VLOG_DBG_RL
(&
æ
, "badÇxm_íåy %#08"
PRIx32
" (víd‹=%"
PRIu32
", "

179 "fõld=%"
PRIu32
", hasmask=%"PRIu32",Üen=%"PRIu32"), "

180 "(%s)", 
hódî
,

181 
	`NXM_VENDOR
(
hódî
), 
	`NXM_FIELD
(header),

182 
	`NXM_HASMASK
(
hódî
), 
	`NXM_LENGTH
(header),

183 
	`oÂîr_to_°rög
(
îr‹
));

184  
îr‹
;

188  
m©ch_Àn
 ? 
OFPERR_OFPBMC_BAD_LEN
 : 0;

189 
	}
}

191 
oÂîr


192 
	$nx_puŒ_m©ch__
(
oÂbuf
 *
b
, 
m©ch_Àn
, 
boﬁ
 
°ri˘
,

193 
m©ch
 *match,

194 
ovs_be64
 *
cookõ
, ovs_be64 *
cookõ_mask
)

196 
uöt8_t
 *
p
 = 
NULL
;

198 i‡(
m©ch_Àn
) {

199 
p
 = 
	`oÂbuf_åy_puŒ
(
b
, 
	`ROUND_UP
(
m©ch_Àn
, 8));

200 i‡(!
p
) {

201 
	`VLOG_DBG_RL
(&
æ
, "nx_matchÜength %u,Ñounded upÅoá "

203 "Àngth %zu)", 
m©ch_Àn
, 
b
->
size
);

204  
OFPERR_OFPBMC_BAD_LEN
;

208  
	`nx_puŒ_øw
(
p
, 
m©ch_Àn
, 
°ri˘
, 
m©ch
, 
cookõ
, 
cookõ_mask
);

209 
	}
}

219 
oÂîr


220 
	$nx_puŒ_m©ch
(
oÂbuf
 *
b
, 
m©ch_Àn
, 
m©ch
 *match,

221 
ovs_be64
 *
cookõ
, ovs_be64 *
cookõ_mask
)

223  
	`nx_puŒ_m©ch__
(
b
, 
m©ch_Àn
, 
åue
, 
m©ch
, 
cookõ
, 
cookõ_mask
);

224 
	}
}

228 
oÂîr


229 
	$nx_puŒ_m©ch_loo£
(
oÂbuf
 *
b
, 
m©ch_Àn
,

230 
m©ch
 *match,

231 
ovs_be64
 *
cookõ
, ovs_be64 *
cookõ_mask
)

233  
	`nx_puŒ_m©ch__
(
b
, 
m©ch_Àn
, 
Ál£
, 
m©ch
, 
cookõ
, 
cookõ_mask
);

234 
	}
}

236 
oÂîr


237 
	$oxm_puŒ_m©ch__
(
oÂbuf
 *
b
, 
boﬁ
 
°ri˘
, 
m©ch
 *match)

239 
oÂ11_m©ch_hódî
 *
omh
 = 
b
->
d©a
;

240 
uöt8_t
 *
p
;

241 
uöt16_t
 
m©ch_Àn
;

243 i‡(
b
->
size
 <  *
omh
) {

244  
OFPERR_OFPBMC_BAD_LEN
;

247 
m©ch_Àn
 = 
	`¡ohs
(
omh
->
Àngth
);

248 i‡(
m©ch_Àn
 <  *
omh
) {

249  
OFPERR_OFPBMC_BAD_LEN
;

252 i‡(
omh
->
ty≥
 !
	`ht⁄s
(
OFPMT_OXM
)) {

253  
OFPERR_OFPBMC_BAD_TYPE
;

256 
p
 = 
	`oÂbuf_åy_puŒ
(
b
, 
	`ROUND_UP
(
m©ch_Àn
, 8));

257 i‡(!
p
) {

258 
	`VLOG_DBG_RL
(&
æ
, "oxmÜength %u,Ñounded upÅoá "

260 "Àngth %zu)", 
m©ch_Àn
, 
b
->
size
);

261  
OFPERR_OFPBMC_BAD_LEN
;

264  
	`nx_puŒ_øw
(
p
 +  *
omh
, 
m©ch_Àn
 -  *omh,

265 
°ri˘
, 
m©ch
, 
NULL
, NULL);

266 
	}
}

274 
oÂîr


275 
	$oxm_puŒ_m©ch
(
oÂbuf
 *
b
, 
m©ch
 *match)

277  
	`oxm_puŒ_m©ch__
(
b
, 
åue
, 
m©ch
);

278 
	}
}

282 
oÂîr


283 
	$oxm_puŒ_m©ch_loo£
(
oÂbuf
 *
b
, 
m©ch
 *match)

285  
	`oxm_puŒ_m©ch__
(
b
, 
Ál£
, 
m©ch
);

286 
	}
}

296 
	$nxm_put_hódî
(
oÂbuf
 *
b
, 
uöt32_t
 
hódî
)

298 
ovs_be32
 
n_hódî
 = 
	`ht⁄l
(
hódî
);

299 
	`oÂbuf_put
(
b
, &
n_hódî
, Ç_header);

300 
	}
}

303 
	$nxm_put_8
(
oÂbuf
 *
b
, 
uöt32_t
 
hódî
, 
uöt8_t
 
vÆue
)

305 
	`nxm_put_hódî
(
b
, 
hódî
);

306 
	`oÂbuf_put
(
b
, &
vÆue
,  value);

307 
	}
}

310 
	$nxm_put_8m
(
oÂbuf
 *
b
, 
uöt32_t
 
hódî
, 
uöt8_t
 
vÆue
, uöt8_à
mask
)

312 
mask
) {

316 
UINT8_MAX
:

317 
	`nxm_put_8
(
b
, 
hódî
, 
vÆue
);

321 
	`nxm_put_hódî
(
b
, 
	`NXM_MAKE_WILD_HEADER
(
hódî
));

322 
	`oÂbuf_put
(
b
, &
vÆue
,  value);

323 
	`oÂbuf_put
(
b
, &
mask
,  mask);

325 
	}
}

328 
	$nxm_put_16
(
oÂbuf
 *
b
, 
uöt32_t
 
hódî
, 
ovs_be16
 
vÆue
)

330 
	`nxm_put_hódî
(
b
, 
hódî
);

331 
	`oÂbuf_put
(
b
, &
vÆue
,  value);

332 
	}
}

335 
	$nxm_put_16w
(
oÂbuf
 *
b
, 
uöt32_t
 
hódî
, 
ovs_be16
 
vÆue
, ovs_be16 
mask
)

337 
	`nxm_put_hódî
(
b
, 
hódî
);

338 
	`oÂbuf_put
(
b
, &
vÆue
,  value);

339 
	`oÂbuf_put
(
b
, &
mask
,  mask);

340 
	}
}

343 
	$nxm_put_16m
(
oÂbuf
 *
b
, 
uöt32_t
 
hódî
, 
ovs_be16
 
vÆue
, ovs_be16 
mask
)

345 
mask
) {

349 
	`CONSTANT_HTONS
(
UINT16_MAX
):

350 
	`nxm_put_16
(
b
, 
hódî
, 
vÆue
);

354 
	`nxm_put_16w
(
b
, 
	`NXM_MAKE_WILD_HEADER
(
hódî
), 
vÆue
, 
mask
);

357 
	}
}

360 
	$nxm_put_32
(
oÂbuf
 *
b
, 
uöt32_t
 
hódî
, 
ovs_be32
 
vÆue
)

362 
	`nxm_put_hódî
(
b
, 
hódî
);

363 
	`oÂbuf_put
(
b
, &
vÆue
,  value);

364 
	}
}

367 
	$nxm_put_32w
(
oÂbuf
 *
b
, 
uöt32_t
 
hódî
, 
ovs_be32
 
vÆue
, ovs_be32 
mask
)

369 
	`nxm_put_hódî
(
b
, 
hódî
);

370 
	`oÂbuf_put
(
b
, &
vÆue
,  value);

371 
	`oÂbuf_put
(
b
, &
mask
,  mask);

372 
	}
}

375 
	$nxm_put_32m
(
oÂbuf
 *
b
, 
uöt32_t
 
hódî
, 
ovs_be32
 
vÆue
, ovs_be32 
mask
)

377 
mask
) {

381 
	`CONSTANT_HTONL
(
UINT32_MAX
):

382 
	`nxm_put_32
(
b
, 
hódî
, 
vÆue
);

386 
	`nxm_put_32w
(
b
, 
	`NXM_MAKE_WILD_HEADER
(
hódî
), 
vÆue
, 
mask
);

389 
	}
}

392 
	$nxm_put_64
(
oÂbuf
 *
b
, 
uöt32_t
 
hódî
, 
ovs_be64
 
vÆue
)

394 
	`nxm_put_hódî
(
b
, 
hódî
);

395 
	`oÂbuf_put
(
b
, &
vÆue
,  value);

396 
	}
}

399 
	$nxm_put_64w
(
oÂbuf
 *
b
, 
uöt32_t
 
hódî
, 
ovs_be64
 
vÆue
, ovs_be64 
mask
)

401 
	`nxm_put_hódî
(
b
, 
hódî
);

402 
	`oÂbuf_put
(
b
, &
vÆue
,  value);

403 
	`oÂbuf_put
(
b
, &
mask
,  mask);

404 
	}
}

407 
	$nxm_put_64m
(
oÂbuf
 *
b
, 
uöt32_t
 
hódî
, 
ovs_be64
 
vÆue
, ovs_be64 
mask
)

409 
mask
) {

413 
	`CONSTANT_HTONLL
(
UINT64_MAX
):

414 
	`nxm_put_64
(
b
, 
hódî
, 
vÆue
);

418 
	`nxm_put_64w
(
b
, 
	`NXM_MAKE_WILD_HEADER
(
hódî
), 
vÆue
, 
mask
);

421 
	}
}

424 
	$nxm_put_ëh
(
oÂbuf
 *
b
, 
uöt32_t
 
hódî
,

425 c⁄° 
uöt8_t
 
vÆue
[
ETH_ADDR_LEN
])

427 
	`nxm_put_hódî
(
b
, 
hódî
);

428 
	`oÂbuf_put
(
b
, 
vÆue
, 
ETH_ADDR_LEN
);

429 
	}
}

432 
	$nxm_put_ëh_masked
(
oÂbuf
 *
b
, 
uöt32_t
 
hódî
,

433 c⁄° 
uöt8_t
 
vÆue
[
ETH_ADDR_LEN
],

434 c⁄° 
uöt8_t
 
mask
[
ETH_ADDR_LEN
])

436 i‡(!
	`ëh_addr_is_zîo
(
mask
)) {

437 i‡(
	`ëh_mask_is_exa˘
(
mask
)) {

438 
	`nxm_put_ëh
(
b
, 
hódî
, 
vÆue
);

440 
	`nxm_put_hódî
(
b
, 
	`NXM_MAKE_WILD_HEADER
(
hódî
));

441 
	`oÂbuf_put
(
b
, 
vÆue
, 
ETH_ADDR_LEN
);

442 
	`oÂbuf_put
(
b
, 
mask
, 
ETH_ADDR_LEN
);

445 
	}
}

448 
	$nxm_put_ùv6
(
oÂbuf
 *
b
, 
uöt32_t
 
hódî
,

449 c⁄° 
ö6_addr
 *
vÆue
, c⁄° ö6_add∏*
mask
)

451 i‡(
	`ùv6_mask_is_™y
(
mask
)) {

453 } i‡(
	`ùv6_mask_is_exa˘
(
mask
)) {

454 
	`nxm_put_hódî
(
b
, 
hódî
);

455 
	`oÂbuf_put
(
b
, 
vÆue
,  *value);

457 
	`nxm_put_hódî
(
b
, 
	`NXM_MAKE_WILD_HEADER
(
hódî
));

458 
	`oÂbuf_put
(
b
, 
vÆue
,  *value);

459 
	`oÂbuf_put
(
b
, 
mask
,  *mask);

461 
	}
}

464 
	$nxm_put_‰ag
(
oÂbuf
 *
b
, c⁄° 
m©ch
 *match)

466 
uöt8_t
 
nw_‰ag
 = 
m©ch
->
Êow
.nw_frag;

467 
uöt8_t
 
nw_‰ag_mask
 = 
m©ch
->
wc
.
masks
.
nw_‰ag
;

469 
nw_‰ag_mask
) {

473 
FLOW_NW_FRAG_MASK
:

474 
	`nxm_put_8
(
b
, 
NXM_NX_IP_FRAG
, 
nw_‰ag
);

478 
	`nxm_put_8m
(
b
, 
NXM_NX_IP_FRAG
, 
nw_‰ag
,

479 
nw_‰ag_mask
 & 
FLOW_NW_FRAG_MASK
);

482 
	}
}

485 
	$nxm_put_ù
(
oÂbuf
 *
b
, c⁄° 
m©ch
 *match,

486 
uöt8_t
 
icmp_¥Ÿo
, 
uöt32_t
 
icmp_ty≥
, uöt32_à
icmp_code
,

487 
boﬁ
 
oxm
)

489 c⁄° 
Êow
 *Êow = &
m©ch
->flow;

491 
	`nxm_put_‰ag
(
b
, 
m©ch
);

493 i‡(
m©ch
->
wc
.
masks
.
nw_tos
 & 
IP_DSCP_MASK
) {

494 
	`nxm_put_8
(
b
, 
oxm
 ? 
OXM_OF_IP_DSCP
 : 
NXM_OF_IP_TOS
,

495 
Êow
->
nw_tos
 & 
IP_DSCP_MASK
);

498 i‡(
m©ch
->
wc
.
masks
.
nw_tos
 & 
IP_ECN_MASK
) {

499 
	`nxm_put_8
(
b
, 
oxm
 ? 
OXM_OF_IP_ECN
 : 
NXM_NX_IP_ECN
,

500 
Êow
->
nw_tos
 & 
IP_ECN_MASK
);

503 i‡(!
oxm
 && 
m©ch
->
wc
.
masks
.
nw_âl
) {

504 
	`nxm_put_8
(
b
, 
NXM_NX_IP_TTL
, 
Êow
->
nw_âl
);

507 i‡(
m©ch
->
wc
.
masks
.
nw_¥Ÿo
) {

508 
	`nxm_put_8
(
b
, 
oxm
 ? 
OXM_OF_IP_PROTO
 : 
NXM_OF_IP_PROTO
, 
Êow
->
nw_¥Ÿo
);

510 i‡(
Êow
->
nw_¥Ÿo
 =
IPPROTO_TCP
) {

511 
	`nxm_put_16m
(
b
, 
oxm
 ? 
OXM_OF_TCP_SRC
 : 
NXM_OF_TCP_SRC
,

512 
Êow
->
ç_§c
, 
m©ch
->
wc
.
masks
.tp_src);

513 
	`nxm_put_16m
(
b
, 
oxm
 ? 
OXM_OF_TCP_DST
 : 
NXM_OF_TCP_DST
,

514 
Êow
->
ç_d°
, 
m©ch
->
wc
.
masks
.tp_dst);

515 } i‡(
Êow
->
nw_¥Ÿo
 =
IPPROTO_UDP
) {

516 
	`nxm_put_16m
(
b
, 
oxm
 ? 
OXM_OF_UDP_SRC
 : 
NXM_OF_UDP_SRC
,

517 
Êow
->
ç_§c
, 
m©ch
->
wc
.
masks
.tp_src);

518 
	`nxm_put_16m
(
b
, 
oxm
 ? 
OXM_OF_UDP_DST
 : 
NXM_OF_UDP_DST
,

519 
Êow
->
ç_d°
, 
m©ch
->
wc
.
masks
.tp_dst);

520 } i‡(
Êow
->
nw_¥Ÿo
 =
icmp_¥Ÿo
) {

521 i‡(
m©ch
->
wc
.
masks
.
ç_§c
) {

522 
	`nxm_put_8
(
b
, 
icmp_ty≥
, 
	`¡ohs
(
Êow
->
ç_§c
));

524 i‡(
m©ch
->
wc
.
masks
.
ç_d°
) {

525 
	`nxm_put_8
(
b
, 
icmp_code
, 
	`¡ohs
(
Êow
->
ç_d°
));

529 
	}
}

542 
	$nx_put_øw
(
oÂbuf
 *
b
, 
boﬁ
 
oxm
, c⁄° 
m©ch
 *match,

543 
ovs_be64
 
cookõ
, ovs_be64 
cookõ_mask
)

545 c⁄° 
Êow
 *Êow = &
m©ch
->flow;

546 c⁄° 
size_t
 
°¨t_Àn
 = 
b
->
size
;

547 
m©ch_Àn
;

548 
i
;

550 
	`BUILD_ASSERT_DECL
(
FLOW_WC_SEQ
 == 18);

553 i‡(
m©ch
->
wc
.
masks
.
ö_p‹t
) {

554 
uöt16_t
 
ö_p‹t
 = 
Êow
->in_port;

555 i‡(
oxm
) {

556 
	`nxm_put_32
(
b
, 
OXM_OF_IN_PORT
, 
	`oÂutû_p‹t_to_oÂ11
(
ö_p‹t
));

558 
	`nxm_put_16
(
b
, 
NXM_OF_IN_PORT
, 
	`ht⁄s
(
ö_p‹t
));

563 
	`nxm_put_ëh_masked
(
b
, 
oxm
 ? 
OXM_OF_ETH_SRC
 : 
NXM_OF_ETH_SRC
,

564 
Êow
->
dl_§c
, 
m©ch
->
wc
.
masks
.dl_src);

565 
	`nxm_put_ëh_masked
(
b
, 
oxm
 ? 
OXM_OF_ETH_DST
 : 
NXM_OF_ETH_DST
,

566 
Êow
->
dl_d°
, 
m©ch
->
wc
.
masks
.dl_dst);

567 
	`nxm_put_16m
(
b
, 
oxm
 ? 
OXM_OF_ETH_TYPE
 : 
NXM_OF_ETH_TYPE
,

568 
	`oÂutû_dl_ty≥_to_›íÊow
(
Êow
->
dl_ty≥
),

569 
m©ch
->
wc
.
masks
.
dl_ty≥
);

572 i‡(
oxm
) {

573 
ovs_be16
 
VID_CFI_MASK
 = 
	`ht⁄s
(
VLAN_VID_MASK
 | 
VLAN_CFI
);

574 
ovs_be16
 
vid
 = 
Êow
->
vœn_tci
 & 
VID_CFI_MASK
;

575 
ovs_be16
 
mask
 = 
m©ch
->
wc
.
masks
.
vœn_tci
 & 
VID_CFI_MASK
;

577 i‡(
mask
 =
	`ht⁄s
(
VLAN_VID_MASK
 | 
VLAN_CFI
)) {

578 
	`nxm_put_16
(
b
, 
OXM_OF_VLAN_VID
, 
vid
);

579 } i‡(
mask
) {

580 
	`nxm_put_16m
(
b
, 
OXM_OF_VLAN_VID
, 
vid
, 
mask
);

583 i‡(
vid
 && 
	`vœn_tci_to_p˝
(
m©ch
->
wc
.
masks
.
vœn_tci
)) {

584 
	`nxm_put_8
(
b
, 
OXM_OF_VLAN_PCP
, 
	`vœn_tci_to_p˝
(
Êow
->
vœn_tci
));

588 
	`nxm_put_16m
(
b
, 
NXM_OF_VLAN_TCI
, 
Êow
->
vœn_tci
,

589 
m©ch
->
wc
.
masks
.
vœn_tci
);

593 i‡(
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IP
)) {

595 
	`nxm_put_32m
(
b
, 
oxm
 ? 
OXM_OF_IPV4_SRC
 : 
NXM_OF_IP_SRC
,

596 
Êow
->
nw_§c
, 
m©ch
->
wc
.
masks
.nw_src);

597 
	`nxm_put_32m
(
b
, 
oxm
 ? 
OXM_OF_IPV4_DST
 : 
NXM_OF_IP_DST
,

598 
Êow
->
nw_d°
, 
m©ch
->
wc
.
masks
.nw_dst);

599 
	`nxm_put_ù
(
b
, 
m©ch
, 
IPPROTO_ICMP
,

600 
oxm
 ? 
OXM_OF_ICMPV4_TYPE
 : 
NXM_OF_ICMP_TYPE
,

601 
oxm
 ? 
OXM_OF_ICMPV4_CODE
 : 
NXM_OF_ICMP_CODE
, oxm);

602 } i‡(
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IPV6
)) {

604 
	`nxm_put_ùv6
(
b
, 
oxm
 ? 
OXM_OF_IPV6_SRC
 : 
NXM_NX_IPV6_SRC
,

605 &
Êow
->
ùv6_§c
, &
m©ch
->
wc
.
masks
.ipv6_src);

606 
	`nxm_put_ùv6
(
b
, 
oxm
 ? 
OXM_OF_IPV6_DST
 : 
NXM_NX_IPV6_DST
,

607 &
Êow
->
ùv6_d°
, &
m©ch
->
wc
.
masks
.ipv6_dst);

608 
	`nxm_put_ù
(
b
, 
m©ch
, 
IPPROTO_ICMPV6
,

609 
oxm
 ? 
OXM_OF_ICMPV6_TYPE
 : 
NXM_NX_ICMPV6_TYPE
,

610 
oxm
 ? 
OXM_OF_ICMPV6_CODE
 : 
NXM_NX_ICMPV6_CODE
, oxm);

612 
	`nxm_put_32m
(
b
, 
oxm
 ? 
OXM_OF_IPV6_FLABEL
 : 
NXM_NX_IPV6_LABEL
,

613 
Êow
->
ùv6_œbñ
, 
m©ch
->
wc
.
masks
.ipv6_label);

615 i‡(
Êow
->
nw_¥Ÿo
 =
IPPROTO_ICMPV6


616 && (
Êow
->
ç_§c
 =
	`ht⁄s
(
ND_NEIGHBOR_SOLICIT
) ||

617 
Êow
->
ç_§c
 =
	`ht⁄s
(
ND_NEIGHBOR_ADVERT
))) {

618 
	`nxm_put_ùv6
(
b
, 
oxm
 ? 
OXM_OF_IPV6_ND_TARGET
 : 
NXM_NX_ND_TARGET
,

619 &
Êow
->
nd_èrgë
, &
m©ch
->
wc
.
masks
.nd_target);

620 i‡(
Êow
->
ç_§c
 =
	`ht⁄s
(
ND_NEIGHBOR_SOLICIT
)) {

621 
	`nxm_put_ëh_masked
(
b
, 
oxm
 ? 
OXM_OF_IPV6_ND_SLL
 : 
NXM_NX_ND_SLL
,

622 
Êow
->
¨p_sha
, 
m©ch
->
wc
.
masks
.arp_sha);

624 i‡(
Êow
->
ç_§c
 =
	`ht⁄s
(
ND_NEIGHBOR_ADVERT
)) {

625 
	`nxm_put_ëh_masked
(
b
, 
oxm
 ? 
OXM_OF_IPV6_ND_TLL
 : 
NXM_NX_ND_TLL
,

626 
Êow
->
¨p_tha
, 
m©ch
->
wc
.
masks
.arp_tha);

629 } i‡(
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_ARP
) ||

630 
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_RARP
)) {

632 i‡(
m©ch
->
wc
.
masks
.
nw_¥Ÿo
) {

633 
	`nxm_put_16
(
b
, 
oxm
 ? 
OXM_OF_ARP_OP
 : 
NXM_OF_ARP_OP
,

634 
	`ht⁄s
(
Êow
->
nw_¥Ÿo
));

636 
	`nxm_put_32m
(
b
, 
oxm
 ? 
OXM_OF_ARP_SPA
 : 
NXM_OF_ARP_SPA
,

637 
Êow
->
nw_§c
, 
m©ch
->
wc
.
masks
.nw_src);

638 
	`nxm_put_32m
(
b
, 
oxm
 ? 
OXM_OF_ARP_TPA
 : 
NXM_OF_ARP_TPA
,

639 
Êow
->
nw_d°
, 
m©ch
->
wc
.
masks
.nw_dst);

640 
	`nxm_put_ëh_masked
(
b
, 
oxm
 ? 
OXM_OF_ARP_SHA
 : 
NXM_NX_ARP_SHA
,

641 
Êow
->
¨p_sha
, 
m©ch
->
wc
.
masks
.arp_sha);

642 
	`nxm_put_ëh_masked
(
b
, 
oxm
 ? 
OXM_OF_ARP_THA
 : 
NXM_NX_ARP_THA
,

643 
Êow
->
¨p_tha
, 
m©ch
->
wc
.
masks
.arp_tha);

647 
	`nxm_put_64m
(
b
, 
NXM_NX_TUN_ID
, 
Êow
->
tu¬ñ
.
tun_id
,

648 
m©ch
->
wc
.
masks
.
tu¬ñ
.
tun_id
);

651 
i
 = 0; i < 
FLOW_N_REGS
; i++) {

652 
	`nxm_put_32m
(
b
, 
	`NXM_NX_REG
(
i
),

653 
	`ht⁄l
(
Êow
->
ªgs
[
i
]), ht⁄l(
m©ch
->
wc
.
masks
.regs[i]));

657 
	`nxm_put_64m
(
b
, 
OXM_OF_METADATA
, 
Êow
->
mëad©a
, 
m©ch
->
wc
.
masks
.metadata);

660 
	`nxm_put_64m
(
b
, 
NXM_NX_COOKIE
, 
cookõ
, 
cookõ_mask
);

662 
m©ch_Àn
 = 
b
->
size
 - 
°¨t_Àn
;

663  
m©ch_Àn
;

664 
	}
}

677 
	$nx_put_m©ch
(
oÂbuf
 *
b
, c⁄° 
m©ch
 *match,

678 
ovs_be64
 
cookõ
, ovs_be64 
cookõ_mask
)

680 
m©ch_Àn
 = 
	`nx_put_øw
(
b
, 
Ál£
, 
m©ch
, 
cookõ
, 
cookõ_mask
);

682 
	`oÂbuf_put_zîos
(
b
, 
	`ROUND_UP
(
m©ch_Àn
, 8) - match_len);

683  
m©ch_Àn
;

684 
	}
}

696 
	$oxm_put_m©ch
(
oÂbuf
 *
b
, c⁄° 
m©ch
 *match)

698 
m©ch_Àn
;

699 
oÂ11_m©ch_hódî
 *
omh
;

700 
size_t
 
°¨t_Àn
 = 
b
->
size
;

701 
ovs_be64
 
cookõ
 = 
	`ht⁄Œ
(0), 
cookõ_mask
 = htonll(0);

703 
	`oÂbuf_put_unöô
(
b
,  *
omh
);

704 
m©ch_Àn
 = 
	`nx_put_øw
(
b
, 
åue
, 
m©ch
, 
cookõ
, 
cookõ_mask
Ë+  *
omh
;

705 
	`oÂbuf_put_zîos
(
b
, 
	`ROUND_UP
(
m©ch_Àn
, 8) - match_len);

707 
omh
 = (
oÂ11_m©ch_hódî
 *)((*)
b
->
d©a
 + 
°¨t_Àn
);

708 
omh
->
ty≥
 = 
	`ht⁄s
(
OFPMT_OXM
);

709 
omh
->
Àngth
 = 
	`ht⁄s
(
m©ch_Àn
);

711  
m©ch_Àn
;

712 
	}
}

716 
f‹m©_nxm_fõld_«me
(
ds
 *, 
uöt32_t
 
hódî
);

719 
	$nx_m©ch_to_°rög
(c⁄° 
uöt8_t
 *
p
, 
m©ch_Àn
)

721 
uöt32_t
 
hódî
;

722 
ds
 
s
;

724 i‡(!
m©ch_Àn
) {

725  
	`x°rdup
("<any>");

728 
	`ds_öô
(&
s
);

729 (
hódî
 = 
	`nx_íåy_ok
(
p
, 
m©ch_Àn
)) != 0) {

730 
Àngth
 = 
	`NXM_LENGTH
(
hódî
);

731 
vÆue_Àn
 = 
	`nxm_fõld_byãs
(
hódî
);

732 c⁄° 
uöt8_t
 *
vÆue
 = 
p
 + 4;

733 c⁄° 
uöt8_t
 *
mask
 = 
vÆue
 + 
vÆue_Àn
;

734 
i
;

736 i‡(
s
.
Àngth
) {

737 
	`ds_put_c°r
(&
s
, ", ");

740 
	`f‹m©_nxm_fõld_«me
(&
s
, 
hódî
);

741 
	`ds_put_ch¨
(&
s
, '(');

743 
i
 = 0; i < 
vÆue_Àn
; i++) {

744 
	`ds_put_f‹m©
(&
s
, "%02x", 
vÆue
[
i
]);

746 i‡(
	`NXM_HASMASK
(
hódî
)) {

747 
	`ds_put_ch¨
(&
s
, '/');

748 
i
 = 0; i < 
vÆue_Àn
; i++) {

749 
	`ds_put_f‹m©
(&
s
, "%02x", 
mask
[
i
]);

752 
	`ds_put_ch¨
(&
s
, ')');

754 
p
 +4 + 
Àngth
;

755 
m©ch_Àn
 -4 + 
Àngth
;

758 i‡(
m©ch_Àn
) {

759 i‡(
s
.
Àngth
) {

760 
	`ds_put_c°r
(&
s
, ", ");

763 
	`ds_put_f‹m©
(&
s
, "<%u invÆid byãs>", 
m©ch_Àn
);

766  
	`ds_°ól_c°r
(&
s
);

767 
	}
}

770 
	$oxm_m©ch_to_°rög
(c⁄° 
uöt8_t
 *
p
, 
m©ch_Àn
)

772 c⁄° 
oÂ11_m©ch_hódî
 *
omh
 = (oÂ11_m©ch_hódî *)
p
;

773 
uöt16_t
 
m©ch_Àn_
;

774 
ds
 
s
;

776 
	`ds_öô
(&
s
);

778 i‡(
m©ch_Àn
 <  *
omh
) {

779 
	`ds_put_f‹m©
(&
s
, "<m©chÅoÿsh‹t: %u>", 
m©ch_Àn
);

780 
îr
;

783 i‡(
omh
->
ty≥
 !
	`ht⁄s
(
OFPMT_OXM
)) {

784 
	`ds_put_f‹m©
(&
s
, "<bad m©chÅy≥ fõld: %u>", 
	`¡ohs
(
omh
->
ty≥
));

785 
îr
;

788 
m©ch_Àn_
 = 
	`¡ohs
(
omh
->
Àngth
);

789 i‡(
m©ch_Àn_
 <  *
omh
) {

790 
	`ds_put_f‹m©
(&
s
, "<m©chÜígth fõldÅoÿsh‹t: %u>", 
m©ch_Àn_
);

791 
îr
;

794 i‡(
m©ch_Àn_
 !
m©ch_Àn
) {

795 
	`ds_put_f‹m©
(&
s
, "<matchÜength field incorrect: %u != %u>",

796 
m©ch_Àn_
, 
m©ch_Àn
);

797 
îr
;

800  
	`nx_m©ch_to_°rög
(
p
 +  *
omh
, 
m©ch_Àn
 -  *omh);

802 
îr
:

803  
	`ds_°ól_c°r
(&
s
);

804 
	}
}

807 
	$f‹m©_nxm_fõld_«me
(
ds
 *
s
, 
uöt32_t
 
hódî
)

809 c⁄° 
mf_fõld
 *
mf
 = 
	`mf_‰om_nxm_hódî
(
hódî
);

810 i‡(
mf
) {

811 
	`ds_put_c°r
(
s
, 
	`IS_OXM_HEADER
(
hódî
Ë? 
mf
->
oxm_«me
 : mf->
nxm_«me
);

812 i‡(
	`NXM_HASMASK
(
hódî
)) {

813 
	`ds_put_c°r
(
s
, "_W");

815 } i‡(
hódî
 =
NXM_NX_COOKIE
) {

816 
	`ds_put_c°r
(
s
, "NXM_NX_COOKIE");

817 } i‡(
hódî
 =
NXM_NX_COOKIE_W
) {

818 
	`ds_put_c°r
(
s
, "NXM_NX_COOKIE_W");

820 
	`ds_put_f‹m©
(
s
, "%d:%d", 
	`NXM_VENDOR
(
hódî
), 
	`NXM_FIELD
(header));

822 
	}
}

824 
uöt32_t


825 
	$∑r£_nxm_fõld_«me
(c⁄° *
«me
, 
«me_Àn
)

827 
boﬁ
 
wûd
;

828 
i
;

831 
wûd
 = 
«me_Àn
 > 2 && !
	`memcmp
(&
«me
[name_len - 2], "_W", 2);

832 i‡(
wûd
) {

833 
«me_Àn
 -= 2;

836 
i
 = 0; i < 
MFF_N_IDS
; i++) {

837 c⁄° 
mf_fõld
 *
mf
 = 
	`mf_‰om_id
(
i
);

838 
uöt32_t
 
hódî
;

840 i‡(
mf
->
nxm_«me
 &&

841 !
	`°∫cmp
(
mf
->
nxm_«me
, 
«me
, 
«me_Àn
) &&

842 
mf
->
nxm_«me
[
«me_Àn
] == '\0') {

843 
hódî
 = 
mf
->
nxm_hódî
;

844 } i‡(
mf
->
oxm_«me
 &&

845 !
	`°∫cmp
(
mf
->
oxm_«me
, 
«me
, 
«me_Àn
) &&

846 
mf
->
oxm_«me
[
«me_Àn
] == '\0') {

847 
hódî
 = 
mf
->
oxm_hódî
;

852 i‡(!
wûd
) {

853  
hódî
;

854 } i‡(
mf
->
maskabÀ
 !
MFM_NONE
) {

855  
	`NXM_MAKE_WILD_HEADER
(
hódî
);

859 i‡(!
	`°∫cmp
("NXM_NX_COOKIE", 
«me
, 
«me_Àn
) &&

860 (
«me_Àn
 =
	`°æí
("NXM_NX_COOKIE"))) {

861 i‡(!
wûd
) {

862  
NXM_NX_COOKIE
;

864  
NXM_NX_COOKIE_W
;

870 i‡(
«me_Àn
 == 8) {

871 
uöt32_t
 
hódî
 = 
	`hexôs_vÆue
(
«me
, 
«me_Àn
, 
NULL
);

872 i‡(
hódî
 !
UINT_MAX
) {

873  
hódî
;

878 
	}
}

883 
	$nx_m©ch_‰om_°rög_øw
(c⁄° *
s
, 
oÂbuf
 *
b
)

885 c⁄° *
fuŒ_s
 = 
s
;

886 c⁄° 
size_t
 
°¨t_Àn
 = 
b
->
size
;

888 i‡(!
	`°rcmp
(
s
, "<any>")) {

890 
	`oÂbuf_¥óŒoc_èûroom
(
b
, 1);

894 
s
 +
	`°r•n
(s, ", "); *s; s += strspn(s, ", ")) {

895 c⁄° *
«me
;

896 
uöt32_t
 
hódî
;

897 
«me_Àn
;

898 
size_t
 
n
;

900 
«me
 = 
s
;

901 
«me_Àn
 = 
	`°rc•n
(
s
, "(");

902 i‡(
s
[
«me_Àn
] != '(') {

903 
	`ovs_Áèl
(0, "%s: missög (áàíd o‡nx_m©ch", 
fuŒ_s
);

906 
hódî
 = 
	`∑r£_nxm_fõld_«me
(
«me
, 
«me_Àn
);

907 i‡(!
hódî
) {

908 
	`ovs_Áèl
(0, "%s: unknow¿fõld `%.*s'", 
fuŒ_s
, 
«me_Àn
, 
s
);

911 
s
 +
«me_Àn
 + 1;

913 
	`nxm_put_hódî
(
b
, 
hódî
);

914 
s
 = 
	`oÂbuf_put_hex
(
b
, s, &
n
);

915 i‡(
n
 !
	`nxm_fõld_byãs
(
hódî
)) {

916 
	`ovs_Áèl
(0, "%.2s: hex digô†ex≥˘ed", 
s
);

918 i‡(
	`NXM_HASMASK
(
hódî
)) {

919 
s
 +
	`°r•n
(s, " ");

920 i‡(*
s
 != '/') {

921 
	`ovs_Áèl
(0, "%s: missing / in masked field %.*s",

922 
fuŒ_s
, 
«me_Àn
, 
«me
);

924 
s
 = 
	`oÂbuf_put_hex
(
b
, s + 1, &
n
);

925 i‡(
n
 !
	`nxm_fõld_byãs
(
hódî
)) {

926 
	`ovs_Áèl
(0, "%.2s: hex digô†ex≥˘ed", 
s
);

930 
s
 +
	`°r•n
(s, " ");

931 i‡(*
s
 != ')') {

932 
	`ovs_Áèl
(0, "%s: missing ) following field %.*s",

933 
fuŒ_s
, 
«me_Àn
, 
«me
);

935 
s
++;

938  
b
->
size
 - 
°¨t_Àn
;

939 
	}
}

942 
	$nx_m©ch_‰om_°rög
(c⁄° *
s
, 
oÂbuf
 *
b
)

944 
m©ch_Àn
 = 
	`nx_m©ch_‰om_°rög_øw
(
s
, 
b
);

945 
	`oÂbuf_put_zîos
(
b
, 
	`ROUND_UP
(
m©ch_Àn
, 8) - match_len);

946  
m©ch_Àn
;

947 
	}
}

950 
	$oxm_m©ch_‰om_°rög
(c⁄° *
s
, 
oÂbuf
 *
b
)

952 
m©ch_Àn
;

953 
oÂ11_m©ch_hódî
 *
omh
;

954 
size_t
 
°¨t_Àn
 = 
b
->
size
;

956 
	`oÂbuf_put_unöô
(
b
,  *
omh
);

957 
m©ch_Àn
 = 
	`nx_m©ch_‰om_°rög_øw
(
s
, 
b
Ë+  *
omh
;

958 
	`oÂbuf_put_zîos
(
b
, 
	`ROUND_UP
(
m©ch_Àn
, 8) - match_len);

960 
omh
 = (
oÂ11_m©ch_hódî
 *)((*)
b
->
d©a
 + 
°¨t_Àn
);

961 
omh
->
ty≥
 = 
	`ht⁄s
(
OFPMT_OXM
);

962 
omh
->
Àngth
 = 
	`ht⁄s
(
m©ch_Àn
);

964  
m©ch_Àn
;

965 
	}
}

968 
	$nxm_∑r£_ªg_move
(
oÂa˘_ªg_move
 *
move
, c⁄° *
s
)

970 c⁄° *
fuŒ_s
 = 
s
;

972 
s
 = 
	`mf_∑r£_subfõld
(&
move
->
§c
, s);

973 i‡(
	`°∫cmp
(
s
, "->", 2)) {

974 
	`ovs_Áèl
(0, "%s: missög `->' fﬁlowög sour˚", 
fuŒ_s
);

976 
s
 += 2;

977 
s
 = 
	`mf_∑r£_subfõld
(&
move
->
d°
, s);

978 i‡(*
s
 != '\0') {

979 
	`ovs_Áèl
(0, "%s:Åøûög g¨bagêfﬁlowög de°ö©i⁄", 
fuŒ_s
);

982 i‡(
move
->
§c
.
n_bôs
 !move->
d°
.n_bits) {

983 
	`ovs_Áèl
(0, "%s: source field is %d bits wide but destination is "

984 "%d bô†wide", 
fuŒ_s
,

985 
move
->
§c
.
n_bôs
, move->
d°
.n_bits);

987 
	}
}

990 
	$nxm_∑r£_ªg_lﬂd
(
oÂa˘_ªg_lﬂd
 *
lﬂd
, c⁄° *
s
)

992 c⁄° *
fuŒ_s
 = 
s
;

993 
uöt64_t
 
vÆue
 = 
	`°πouŒ
(
s
, (**) &s, 0);

995 i‡(
	`°∫cmp
(
s
, "->", 2)) {

996 
	`ovs_Áèl
(0, "%s: missög `->' fﬁlowög vÆue", 
fuŒ_s
);

998 
s
 += 2;

999 
s
 = 
	`mf_∑r£_subfõld
(&
lﬂd
->
d°
, s);

1000 i‡(*
s
 != '\0') {

1001 
	`ovs_Áèl
(0, "%s:Åøûög g¨bagêfﬁlowög de°ö©i⁄", 
fuŒ_s
);

1004 i‡(
lﬂd
->
d°
.
n_bôs
 < 64 && (
vÆue
 >>Üoad->dst.n_bits) != 0) {

1005 
	`ovs_Áèl
(0, "%s: vÆuê%"
PRIu64
" doesÇot fit into %d bits",

1006 
fuŒ_s
, 
vÆue
, 
lﬂd
->
d°
.
n_bôs
);

1009 
lﬂd
->
subvÆue
.
be64
[0] = 
	`ht⁄Œ
(0);

1010 
lﬂd
->
subvÆue
.
be64
[1] = 
	`ht⁄Œ
(
vÆue
);

1011 
	}
}

1016 
	$nxm_f‹m©_ªg_move
(c⁄° 
oÂa˘_ªg_move
 *
move
, 
ds
 *
s
)

1018 
	`ds_put_f‹m©
(
s
, "move:");

1019 
	`mf_f‹m©_subfõld
(&
move
->
§c
, 
s
);

1020 
	`ds_put_c°r
(
s
, "->");

1021 
	`mf_f‹m©_subfõld
(&
move
->
d°
, 
s
);

1022 
	}
}

1025 
	$£t_fõld_f‹m©
(c⁄° 
oÂa˘_ªg_lﬂd
 *
lﬂd
, 
ds
 *
s
)

1027 c⁄° 
mf_fõld
 *
mf
 = 
lﬂd
->
d°
.
fõld
;

1028 
mf_vÆue
 
vÆue
;

1030 
	`as£π
(
lﬂd
->
oÂa˘
.
com∑t
 =
OFPUTIL_OFPAT12_SET_FIELD
);

1031 
	`ds_put_f‹m©
(
s
, "set_field:");

1032 
	`mem£t
(&
vÆue
, 0,  value);

1033 
	`bôwi£_c›y
(&
lﬂd
->
subvÆue
, Üoad->subvalue, 0,

1034 &
vÆue
, 
mf
->
n_byãs
, 0, 
lﬂd
->
d°
.
n_bôs
);

1035 
	`mf_f‹m©
(
mf
, &
vÆue
, 
NULL
, 
s
);

1036 
	`ds_put_f‹m©
(
s
, "->%s", 
mf
->
«me
);

1037 
	}
}

1040 
	$lﬂd_f‹m©
(c⁄° 
oÂa˘_ªg_lﬂd
 *
lﬂd
, 
ds
 *
s
)

1042 
	`ds_put_c°r
(
s
, "load:");

1043 
	`mf_f‹m©_subvÆue
(&
lﬂd
->
subvÆue
, 
s
);

1044 
	`ds_put_c°r
(
s
, "->");

1045 
	`mf_f‹m©_subfõld
(&
lﬂd
->
d°
, 
s
);

1046 
	}
}

1049 
	$nxm_f‹m©_ªg_lﬂd
(c⁄° 
oÂa˘_ªg_lﬂd
 *
lﬂd
, 
ds
 *
s
)

1051 i‡(
lﬂd
->
oÂa˘
.
com∑t
 =
OFPUTIL_OFPAT12_SET_FIELD
) {

1052 
	`£t_fõld_f‹m©
(
lﬂd
, 
s
);

1054 
	`lﬂd_f‹m©
(
lﬂd
, 
s
);

1056 
	}
}

1058 
oÂîr


1059 
	$nxm_ªg_move_‰om_›íÊow
(c⁄° 
nx_a˘i⁄_ªg_move
 *
«rm
,

1060 
oÂbuf
 *
oÂa˘s
)

1062 
oÂa˘_ªg_move
 *
move
;

1064 
move
 = 
	`oÂa˘_put_REG_MOVE
(
oÂa˘s
);

1065 
move
->
§c
.
fõld
 = 
	`mf_‰om_nxm_hódî
(
	`¡ohl
(
«rm
->src));

1066 
move
->
§c
.
ofs
 = 
	`¡ohs
(
«rm
->
§c_ofs
);

1067 
move
->
§c
.
n_bôs
 = 
	`¡ohs
(
«rm
->n_bits);

1068 
move
->
d°
.
fõld
 = 
	`mf_‰om_nxm_hódî
(
	`¡ohl
(
«rm
->dst));

1069 
move
->
d°
.
ofs
 = 
	`¡ohs
(
«rm
->
d°_ofs
);

1070 
move
->
d°
.
n_bôs
 = 
	`¡ohs
(
«rm
->n_bits);

1072  
	`nxm_ªg_move_check
(
move
, 
NULL
);

1073 
	}
}

1075 
oÂîr


1076 
	$nxm_ªg_lﬂd_‰om_›íÊow
(c⁄° 
nx_a˘i⁄_ªg_lﬂd
 *
«æ
,

1077 
oÂbuf
 *
oÂa˘s
)

1079 
oÂa˘_ªg_lﬂd
 *
lﬂd
;

1081 
lﬂd
 = 
	`oÂa˘_put_REG_LOAD
(
oÂa˘s
);

1082 
lﬂd
->
d°
.
fõld
 = 
	`mf_‰om_nxm_hódî
(
	`¡ohl
(
«æ
->dst));

1083 
lﬂd
->
d°
.
ofs
 = 
	`nxm_decode_ofs
(
«æ
->
ofs_nbôs
);

1084 
lﬂd
->
d°
.
n_bôs
 = 
	`nxm_decode_n_bôs
(
«æ
->
ofs_nbôs
);

1085 
lﬂd
->
subvÆue
.
be64
[1] = 
«æ
->
vÆue
;

1089 i‡(
lﬂd
->
d°
.
n_bôs
 < 64 &&

1090 
	`¡ohŒ
(
«æ
->
vÆue
Ë>> 
lﬂd
->
d°
.
n_bôs
) {

1091  
OFPERR_OFPBAC_BAD_ARGUMENT
;

1094  
	`nxm_ªg_lﬂd_check
(
lﬂd
, 
NULL
);

1095 
	}
}

1097 
oÂîr


1098 
	$nxm_ªg_lﬂd_‰om_›íÊow12_£t_fõld
(

1099 c⁄° 
oÂ12_a˘i⁄_£t_fõld
 * 
ﬂsf
, 
oÂbuf
 *
oÂa˘s
)

1101 
uöt16_t
 
ﬂsf_Àn
 = 
	`¡ohs
(
ﬂsf
->
Àn
);

1102 
uöt32_t
 
oxm_hódî
 = 
	`¡ohl
(
ﬂsf
->
d°
);

1103 
uöt8_t
 
oxm_Àngth
 = 
	`NXM_LENGTH
(
oxm_hódî
);

1104 
oÂa˘_ªg_lﬂd
 *
lﬂd
;

1105 c⁄° 
mf_fõld
 *
mf
;

1108 i‡(
ﬂsf_Àn
 !
	`ROUND_UP
((*
ﬂsf
Ë+ 
oxm_Àngth
, 8)) {

1109  
OFPERR_OFPBAC_BAD_ARGUMENT
;

1111 i‡(!
	`is_Æl_zîos
((c⁄° 
uöt8_t
 *)(
ﬂsf
Ë+  *ﬂs‡+ 
oxm_Àngth
,

1112 
ﬂsf_Àn
 - 
oxm_Àngth
 -  *
ﬂsf
)) {

1113  
OFPERR_OFPBAC_BAD_ARGUMENT
;

1116 i‡(
	`NXM_HASMASK
(
oxm_hódî
)) {

1117  
OFPERR_OFPBAC_BAD_ARGUMENT
;

1119 
mf
 = 
	`mf_‰om_nxm_hódî
(
oxm_hódî
);

1120 i‡(!
mf
) {

1121  
OFPERR_OFPBAC_BAD_ARGUMENT
;

1123 
lﬂd
 = 
	`oÂa˘_put_REG_LOAD
(
oÂa˘s
);

1124 
	`oÂa˘_£t_fõld_öô
(
lﬂd
, 
mf
, 
ﬂsf
 + 1);

1126  
	`nxm_ªg_lﬂd_check
(
lﬂd
, 
NULL
);

1127 
	}
}

1129 
oÂîr


1130 
	$nxm_ªg_move_check
(c⁄° 
oÂa˘_ªg_move
 *
move
, c⁄° 
Êow
 *flow)

1132 
oÂîr
 
îr‹
;

1134 
îr‹
 = 
	`mf_check_§c
(&
move
->
§c
, 
Êow
);

1135 i‡(
îr‹
) {

1136  
îr‹
;

1139  
	`mf_check_d°
(&
move
->
d°
, 
NULL
);

1140 
	}
}

1142 
oÂîr


1143 
	$nxm_ªg_lﬂd_check
(c⁄° 
oÂa˘_ªg_lﬂd
 *
lﬂd
, c⁄° 
Êow
 *flow)

1145  
	`mf_check_d°
(&
lﬂd
->
d°
, 
Êow
);

1146 
	}
}

1149 
	$nxm_ªg_move_to_nxa°
(c⁄° 
oÂa˘_ªg_move
 *
move
,

1150 
oÂbuf
 *
›íÊow
)

1152 
nx_a˘i⁄_ªg_move
 *
«rm
;

1154 
«rm
 = 
	`oÂutû_put_NXAST_REG_MOVE
(
›íÊow
);

1155 
«rm
->
n_bôs
 = 
	`ht⁄s
(
move
->
d°
.n_bits);

1156 
«rm
->
§c_ofs
 = 
	`ht⁄s
(
move
->
§c
.
ofs
);

1157 
«rm
->
d°_ofs
 = 
	`ht⁄s
(
move
->
d°
.
ofs
);

1158 
«rm
->
§c
 = 
	`ht⁄l
(
move
->§c.
fõld
->
nxm_hódî
);

1159 
«rm
->
d°
 = 
	`ht⁄l
(
move
->d°.
fõld
->
nxm_hódî
);

1160 
	}
}

1163 
	$ªg_lﬂd_to_nxa°
(c⁄° 
oÂa˘_ªg_lﬂd
 *
lﬂd
, 
oÂbuf
 *
›íÊow
)

1165 
nx_a˘i⁄_ªg_lﬂd
 *
«æ
;

1167 
«æ
 = 
	`oÂutû_put_NXAST_REG_LOAD
(
›íÊow
);

1168 
«æ
->
ofs_nbôs
 = 
	`nxm_ícode_ofs_nbôs
(
lﬂd
->
d°
.
ofs
,Üﬂd->d°.
n_bôs
);

1169 
«æ
->
d°
 = 
	`ht⁄l
(
lﬂd
->d°.
fõld
->
nxm_hódî
);

1170 
«æ
->
vÆue
 = 
lﬂd
->
subvÆue
.
be64
[1];

1171 
	}
}

1174 
	$£t_fõld_to_oÁ°
(c⁄° 
oÂa˘_ªg_lﬂd
 *
lﬂd
,

1175 
oÂbuf
 *
›íÊow
)

1177 c⁄° 
mf_fõld
 *
mf
 = 
lﬂd
->
d°
.
fõld
;

1178 
oÂ12_a˘i⁄_£t_fõld
 *
ﬂsf
;

1179 
uöt16_t
 
∑dded_vÆue_Àn
;

1181 
ﬂsf
 = 
	`oÂutû_put_OFPAT12_SET_FIELD
(
›íÊow
);

1182 
ﬂsf
->
d°
 = 
	`ht⁄l
(
mf
->
oxm_hódî
);

1186 
∑dded_vÆue_Àn
 = 
	`ROUND_UP
(
mf
->
n_byãs
, 8);

1187 
	`oÂbuf_put_unöô
(
›íÊow
, 
∑dded_vÆue_Àn
);

1188 
ﬂsf
->
Àn
 = 
	`ht⁄s
(
	`¡ohs
(ﬂsf->ÀnË+ 
∑dded_vÆue_Àn
);

1189 
	`mem£t
(
ﬂsf
 + 1, 0, 
∑dded_vÆue_Àn
);

1191 
	`bôwi£_c›y
(&
lﬂd
->
subvÆue
, Üﬂd->subvÆue,Üﬂd->
d°
.
ofs
,

1192 
ﬂsf
 + 1, 
mf
->
n_byãs
, 
lﬂd
->
d°
.
ofs
,Üﬂd->d°.
n_bôs
);

1194 
	}
}

1197 
	$nxm_ªg_lﬂd_to_nxa°
(c⁄° 
oÂa˘_ªg_lﬂd
 *
lﬂd
,

1198 
oÂbuf
 *
›íÊow
)

1201 i‡(
lﬂd
->
oÂa˘
.
com∑t
 =
OFPUTIL_OFPAT12_SET_FIELD
) {

1202 
oÂ_hódî
 *
oh
 = (oÂ_hódî *)
›íÊow
->
l2
;

1204 
oh
->
vîsi⁄
) {

1205 
OFP12_VERSION
:

1206 
	`£t_fõld_to_oÁ°
(
lﬂd
, 
›íÊow
);

1209 
OFP11_VERSION
:

1210 
OFP10_VERSION
:

1211 i‡(
lﬂd
->
d°
.
n_bôs
 < 64) {

1212 
	`ªg_lﬂd_to_nxa°
(
lﬂd
, 
›íÊow
);

1215 
chunk
, 
ofs
;

1216 
ofs
 = 0; of†< 
lﬂd
->
d°
.
n_bôs
; of†+
chunk
) {

1217 
oÂa˘_ªg_lﬂd
 
sublﬂd
 = *
lﬂd
;

1219 
chunk
 = 
	`MIN
(
lﬂd
->
d°
.
n_bôs
 - 
ofs
, 64);

1221 
sublﬂd
.
d°
.
fõld
 = 
lﬂd
->dst.field;

1222 
sublﬂd
.
d°
.
ofs
 = 
lﬂd
->dst.ofs + ofs;

1223 
sublﬂd
.
d°
.
n_bôs
 = 
chunk
;

1224 
	`bôwi£_c›y
(&
lﬂd
->
subvÆue
, Üﬂd->subvÆue, 
ofs
,

1225 &
sublﬂd
.
subvÆue
,  subload.subvalue, 0,

1226 
chunk
);

1227 
	`ªg_lﬂd_to_nxa°
(&
sublﬂd
, 
›íÊow
);

1233 
	`NOT_REACHED
();

1236 
	`ªg_lﬂd_to_nxa°
(
lﬂd
, 
›íÊow
);

1238 
	}
}

1243 
	$nxm_execuã_ªg_move
(c⁄° 
oÂa˘_ªg_move
 *
move
,

1244 
Êow
 *flow)

1246 
mf_vÆue
 
§c_vÆue
;

1247 
mf_vÆue
 
d°_vÆue
;

1249 
	`mf_gë_vÆue
(
move
->
d°
.
fõld
, 
Êow
, &
d°_vÆue
);

1250 
	`mf_gë_vÆue
(
move
->
§c
.
fõld
, 
Êow
, &
§c_vÆue
);

1251 
	`bôwi£_c›y
(&
§c_vÆue
, 
move
->
§c
.
fõld
->
n_byãs
, move->§c.
ofs
,

1252 &
d°_vÆue
, 
move
->
d°
.
fõld
->
n_byãs
, move->d°.
ofs
,

1253 
move
->
§c
.
n_bôs
);

1254 
	`mf_£t_Êow_vÆue
(
move
->
d°
.
fõld
, &
d°_vÆue
, 
Êow
);

1255 
	}
}

1258 
	$nxm_execuã_ªg_lﬂd
(c⁄° 
oÂa˘_ªg_lﬂd
 *
lﬂd
, 
Êow
 *flow)

1260 
	`mf_wrôe_subfõld_Êow
(&
lﬂd
->
d°
, &lﬂd->
subvÆue
, 
Êow
);

1261 
	}
}

1264 
	$nxm_ªg_lﬂd
(c⁄° 
mf_subfõld
 *
d°
, 
uöt64_t
 
§c_d©a
,

1265 
Êow
 *flow)

1267 
mf_subvÆue
 
§c_subvÆue
;

1268 
ovs_be64
 
§c_d©a_be
 = 
	`ht⁄Œ
(
§c_d©a
);

1270 
	`bôwi£_c›y
(&
§c_d©a_be
,  src_data_be, 0,

1271 &
§c_subvÆue
,  src_subvalue, 0,

1272  
§c_d©a_be
 * 8);

1273 
	`mf_wrôe_subfõld_Êow
(
d°
, &
§c_subvÆue
, 
Êow
);

1274 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/nx-match.h

17 #i‚de‡
NX_MATCH_H


18 
	#NX_MATCH_H
 1

	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<√töë/ö.h
>

23 
	~"Êow.h
"

24 
	~"oÂ-îr‹s.h
"

25 
	~"›ívswôch/ty≥s.h
"

27 
	gds
;

28 
	gm©ch
;

29 
	gmf_subfõld
;

30 
	goÂa˘_ªg_move
;

31 
	goÂa˘_ªg_lﬂd
;

32 
	goÂbuf
;

33 
	gnx_a˘i⁄_ªg_lﬂd
;

34 
	gnx_a˘i⁄_ªg_move
;

41 
oÂîr
 
nx_puŒ_m©ch
(
oÂbuf
 *, 
m©ch_Àn
,

42 
m©ch
 *,

43 
ovs_be64
 *
cookõ
, ovs_be64 *
cookõ_mask
);

44 
oÂîr
 
nx_puŒ_m©ch_loo£
(
oÂbuf
 *, 
m©ch_Àn
,

45 
m©ch
 *, 
ovs_be64
 *
cookõ
,

46 
ovs_be64
 *
cookõ_mask
);

47 
oÂîr
 
oxm_puŒ_m©ch
(
oÂbuf
 *, 
m©ch
 *);

48 
oÂîr
 
oxm_puŒ_m©ch_loo£
(
oÂbuf
 *, 
m©ch
 *);

49 
nx_put_m©ch
(
oÂbuf
 *, c⁄° 
m©ch
 *,

50 
ovs_be64
 
cookõ
, ovs_be64 
cookõ_mask
);

51 
oxm_put_m©ch
(
oÂbuf
 *, c⁄° 
m©ch
 *);

53 *
nx_m©ch_to_°rög
(c⁄° 
uöt8_t
 *, 
m©ch_Àn
);

54 *
oxm_m©ch_to_°rög
(c⁄° 
uöt8_t
 *, 
m©ch_Àn
);

55 
nx_m©ch_‰om_°rög
(c⁄° *, 
oÂbuf
 *);

56 
oxm_m©ch_‰om_°rög
(c⁄° *, 
oÂbuf
 *);

58 
nxm_∑r£_ªg_move
(
oÂa˘_ªg_move
 *, const *);

59 
nxm_∑r£_ªg_lﬂd
(
oÂa˘_ªg_lﬂd
 *, const *);

61 
nxm_f‹m©_ªg_move
(c⁄° 
oÂa˘_ªg_move
 *, 
ds
 *);

62 
nxm_f‹m©_ªg_lﬂd
(c⁄° 
oÂa˘_ªg_lﬂd
 *, 
ds
 *);

64 
oÂîr
 
nxm_ªg_move_‰om_›íÊow
(c⁄° 
nx_a˘i⁄_ªg_move
 *,

65 
oÂbuf
 *
oÂa˘s
);

66 
oÂîr
 
nxm_ªg_lﬂd_‰om_›íÊow
(c⁄° 
nx_a˘i⁄_ªg_lﬂd
 *,

67 
oÂbuf
 *
oÂa˘s
);

68 
oÂîr
 
nxm_ªg_lﬂd_‰om_›íÊow12_£t_fõld
(

69 c⁄° 
oÂ12_a˘i⁄_£t_fõld
 * 
ﬂsf
, 
oÂbuf
 *
oÂa˘s
);

71 
oÂîr
 
nxm_ªg_move_check
(c⁄° 
oÂa˘_ªg_move
 *,

72 c⁄° 
Êow
 *);

73 
oÂîr
 
nxm_ªg_lﬂd_check
(c⁄° 
oÂa˘_ªg_lﬂd
 *,

74 c⁄° 
Êow
 *);

76 
nxm_ªg_move_to_nxa°
(c⁄° 
oÂa˘_ªg_move
 *,

77 
oÂbuf
 *
›íÊow
);

78 
nxm_ªg_lﬂd_to_nxa°
(c⁄° 
oÂa˘_ªg_lﬂd
 *,

79 
oÂbuf
 *
›íÊow
);

81 
nxm_execuã_ªg_move
(c⁄° 
oÂa˘_ªg_move
 *, 
Êow
 *);

82 
nxm_execuã_ªg_lﬂd
(c⁄° 
oÂa˘_ªg_lﬂd
 *, 
Êow
 *);

83 
nxm_ªg_lﬂd
(c⁄° 
mf_subfõld
 *, 
uöt64_t
 
§c_d©a
,

84 
Êow
 *);

86 
nxm_fõld_byãs
(
uöt32_t
 
hódî
);

87 
nxm_fõld_bôs
(
uöt32_t
 
hódî
);

91 
ölöe
 
ovs_be16


92 
	$nxm_ícode_ofs_nbôs
(
ofs
, 
n_bôs
)

94  
	`ht⁄s
((
ofs
 << 6Ë| (
n_bôs
 - 1));

95 
	}
}

97 
ölöe
 

98 
	$nxm_decode_ofs
(
ovs_be16
 
ofs_nbôs
)

100  
	`¡ohs
(
ofs_nbôs
) >> 6;

101 
	}
}

103 
ölöe
 

104 
	$nxm_decode_n_bôs
(
ovs_be16
 
ofs_nbôs
)

106  (
	`¡ohs
(
ofs_nbôs
) & 0x3f) + 1;

107 
	}
}

111 
	#NXM_TYPICAL_LEN
 64

	)

	@/home/lsch/mytest/openvswitch-1.9.0/lib/odp-util.c

17 
	~<c⁄fig.h
>

18 
	~<¨∑/öë.h
>

19 
	~"odp-utû.h
"

20 
	~<î∫o.h
>

21 
	~<öây≥s.h
>

22 
	~<m©h.h
>

23 
	~<√töë/ö.h
>

24 
	~<√töë/icmp6.h
>

25 
	~<°dlib.h
>

26 
	~<°rög.h
>

27 
	~"byã-‹dî.h
"

28 
	~"covîage.h
"

29 
	~"dy«mic-°rög.h
"

30 
	~"Êow.h
"

31 
	~"√éök.h
"

32 
	~"oÂbuf.h
"

33 
	~"∑ckës.h
"

34 
	~"sim≠.h
"

35 
	~"timevÆ.h
"

36 
	~"utû.h
"

37 
	~"vlog.h
"

39 
VLOG_DEFINE_THIS_MODULE
(
odp_utû
);

49 c⁄° *
	gdñimôîs
 = ", \t\r\n";

51 
∑r£_odp_key_©å
(c⁄° *, c⁄° 
sim≠
 *
p‹t_«mes
,

52 
oÂbuf
 *);

53 
f‹m©_odp_key_©å
(c⁄° 
∆©å
 *
a
, 
ds
 *ds);

65 
	$odp_a˘i⁄_Àn
(
uöt16_t
 
ty≥
)

67 i‡(
ty≥
 > 
OVS_ACTION_ATTR_MAX
) {

71 (
ovs_a˘i⁄_©å
Ë
ty≥
) {

72 
OVS_ACTION_ATTR_OUTPUT
:  (
uöt32_t
);

73 
OVS_ACTION_ATTR_USERSPACE
:  -2;

74 
OVS_ACTION_ATTR_PUSH_VLAN
:  (
ovs_a˘i⁄_push_vœn
);

75 
OVS_ACTION_ATTR_POP_VLAN
:  0;

76 
OVS_ACTION_ATTR_SET
:  -2;

77 
OVS_ACTION_ATTR_SAMPLE
:  -2;

79 
OVS_ACTION_ATTR_UNSPEC
:

80 
__OVS_ACTION_ATTR_MAX
:

85 
	}
}

88 
	$ovs_key_©å_to_°rög
(
ovs_key_©å
 
©å
)

90 
unknown_©å
[3 + 
	`INT_STRLEN
() + 1];

92 
©å
) {

93 
OVS_KEY_ATTR_UNSPEC
:  "unspec";

94 
OVS_KEY_ATTR_ENCAP
:  "encap";

95 
OVS_KEY_ATTR_PRIORITY
:  "skb_priority";

96 
OVS_KEY_ATTR_SKB_MARK
:  "skb_mark";

97 
OVS_KEY_ATTR_TUN_ID
:  "tun_id";

98 
OVS_KEY_ATTR_TUNNEL
:  "tunnel";

99 
OVS_KEY_ATTR_IN_PORT
:  "in_port";

100 
OVS_KEY_ATTR_ETHERNET
:  "eth";

101 
OVS_KEY_ATTR_VLAN
:  "vlan";

102 
OVS_KEY_ATTR_ETHERTYPE
:  "eth_type";

103 
OVS_KEY_ATTR_IPV4
:  "ipv4";

104 
OVS_KEY_ATTR_IPV6
:  "ipv6";

105 
OVS_KEY_ATTR_TCP
:  "tcp";

106 
OVS_KEY_ATTR_UDP
:  "udp";

107 
OVS_KEY_ATTR_ICMP
:  "icmp";

108 
OVS_KEY_ATTR_ICMPV6
:  "icmpv6";

109 
OVS_KEY_ATTR_ARP
:  "arp";

110 
OVS_KEY_ATTR_ND
:  "nd";

112 
__OVS_KEY_ATTR_MAX
:

114 
	`¢¥ötf
(
unknown_©å
,  unknown_attr, "key%u",

115 (Ë
©å
);

116  
unknown_©å
;

118 
	}
}

121 
	$f‹m©_gíîic_odp_a˘i⁄
(
ds
 *ds, c⁄° 
∆©å
 *
a
)

123 
size_t
 
Àn
 = 
	`∆_©å_gë_size
(
a
);

125 
	`ds_put_f‹m©
(
ds
, "a˘i⁄%"
PRId16
, 
	`∆_©å_ty≥
(
a
));

126 i‡(
Àn
) {

127 c⁄° 
uöt8_t
 *
un•ec
;

128 
i
;

130 
un•ec
 = 
	`∆_©å_gë
(
a
);

131 
i
 = 0; i < 
Àn
; i++) {

132 
	`ds_put_ch¨
(
ds
, 
i
 ? ' ': '(');

133 
	`ds_put_f‹m©
(
ds
, "%02x", 
un•ec
[
i
]);

135 
	`ds_put_ch¨
(
ds
, ')');

137 
	}
}

140 
	$f‹m©_odp_ßm∂e_a˘i⁄
(
ds
 *ds, c⁄° 
∆©å
 *
©å
)

142 c⁄° 
∆_pﬁicy
 
ovs_ßm∂e_pﬁicy
[] = {

143 [
OVS_SAMPLE_ATTR_PROBABILITY
] = { .
ty≥
 = 
NL_A_U32
 },

144 [
OVS_SAMPLE_ATTR_ACTIONS
] = { .
ty≥
 = 
NL_A_NESTED
 }

146 
∆©å
 *
a
[
	`ARRAY_SIZE
(
ovs_ßm∂e_pﬁicy
)];

147 
≥r˚¡age
;

148 c⁄° 
∆©å
 *
∆a_a˘s
;

149 
Àn
;

151 
	`ds_put_c°r
(
ds
, "sample");

153 i‡(!
	`∆_∑r£_√°ed
(
©å
, 
ovs_ßm∂e_pﬁicy
, 
a
, 
	`ARRAY_SIZE
(a))) {

154 
	`ds_put_c°r
(
ds
, "(error)");

158 
≥r˚¡age
 = (100.0 * 
	`∆_©å_gë_u32
(
a
[
OVS_SAMPLE_ATTR_PROBABILITY
])) /

159 
UINT32_MAX
;

161 
	`ds_put_f‹m©
(
ds
, "(ßm∂e=%.1f%%,", 
≥r˚¡age
);

163 
	`ds_put_c°r
(
ds
, "actions(");

164 
∆a_a˘s
 = 
	`∆_©å_gë
(
a
[
OVS_SAMPLE_ATTR_ACTIONS
]);

165 
Àn
 = 
	`∆_©å_gë_size
(
a
[
OVS_SAMPLE_ATTR_ACTIONS
]);

166 
	`f‹m©_odp_a˘i⁄s
(
ds
, 
∆a_a˘s
, 
Àn
);

167 
	`ds_put_f‹m©
(
ds
, "))");

168 
	}
}

171 
	$¶ow_∑th_ªas⁄_to_°rög
(
uöt32_t
 
d©a
)

173 
¶ow_∑th_ªas⁄
 
bô
 = (¶ow_∑th_ªas⁄Ë
d©a
;

175 
bô
) {

176 
SLOW_CFM
:

178 
SLOW_LACP
:

180 
SLOW_STP
:

182 
SLOW_IN_BAND
:

184 
SLOW_CONTROLLER
:

186 
SLOW_MATCH
:

189  
NULL
;

191 
	}
}

194 
∑r£_Êags
(c⁄° *
s
, c⁄° *(*
bô_to_°rög
)(
uöt32_t
),

195 
uöt32_t
 *
ªs
)

197 
uöt32_t
 
	gªsu…
 = 0;

198 
	gn
 = 0;

200 i‡(
	gs
[
n
] != '(') {

201  -
EINVAL
;

203 
	gn
++;

205 
	gs
[
n
] != ')') {

206 
Êags
;

207 
uöt32_t
 
	gbô
;

208 
	gn0
;

210 i‡(
ssˇnf
(&
s
[
n
], "%Œi%n", &
Êags
, &
n0
Ë> 0 && 
	gn0
 > 0) {

211 
	gn
 +
n0
 + (
s
[
n
 +Ç0] == ',');

212 
	gªsu…
 |
Êags
;

216 
	gbô
 = 1; bit; bit <<= 1) {

217 c⁄° *
«me
 = 
bô_to_°rög
(
bô
);

218 
size_t
 
	gÀn
;

220 i‡(!
	g«me
) {

224 
	gÀn
 = 
°æí
(
«me
);

225 i‡(!
°∫cmp
(
s
 + 
n
, 
«me
, 
Àn
) &&

226 (
	gs
[
n
 + 
Àn
] =',' || 
s
[n +Üen] == ')')) {

227 
ªsu…
 |
bô
;

228 
	gn
 +
Àn
 + (
s
[
n
 +Üen] == ',');

233 i‡(!
	gbô
) {

234  -
	gEINVAL
;

237 
	gn
++;

239 *
	gªs
 = 
ªsu…
;

240  
	gn
;

244 
	$f‹m©_odp_u£r•a˚_a˘i⁄
(
ds
 *ds, c⁄° 
∆©å
 *
©å
)

246 c⁄° 
∆_pﬁicy
 
ovs_u£r•a˚_pﬁicy
[] = {

247 [
OVS_USERSPACE_ATTR_PID
] = { .
ty≥
 = 
NL_A_U32
 },

248 [
OVS_USERSPACE_ATTR_USERDATA
] = { .
ty≥
 = 
NL_A_U64
, .
›ti⁄Æ
 = 
åue
 },

250 
∆©å
 *
a
[
	`ARRAY_SIZE
(
ovs_u£r•a˚_pﬁicy
)];

252 i‡(!
	`∆_∑r£_√°ed
(
©å
, 
ovs_u£r•a˚_pﬁicy
, 
a
, 
	`ARRAY_SIZE
(a))) {

253 
	`ds_put_c°r
(
ds
, "userspace(error)");

257 
	`ds_put_f‹m©
(
ds
, "u£r•a˚’id=%"
PRIu32
,

258 
	`∆_©å_gë_u32
(
a
[
OVS_USERSPACE_ATTR_PID
]));

260 i‡(
a
[
OVS_USERSPACE_ATTR_USERDATA
]) {

261 
uöt64_t
 
u£rd©a
 = 
	`∆_©å_gë_u64
(
a
[
OVS_USERSPACE_ATTR_USERDATA
]);

262 
u£r_a˘i⁄_cookõ
 
cookõ
;

264 
	`mem˝y
(&
cookõ
, &
u£rd©a
,  cookie);

266 
cookõ
.
ty≥
) {

267 
USER_ACTION_COOKIE_SFLOW
:

268 
	`ds_put_f‹m©
(
ds
, ",sFlow("

269 "vid=%"
PRIu16
",p˝=%"
PRIu8
",ouçut=%"
PRIu32
")",

270 
	`vœn_tci_to_vid
(
cookõ
.
sÊow
.
vœn_tci
),

271 
	`vœn_tci_to_p˝
(
cookõ
.
sÊow
.
vœn_tci
),

272 
cookõ
.
sÊow
.
ouçut
);

275 
USER_ACTION_COOKIE_SLOW_PATH
:

276 
	`ds_put_c°r
(
ds
, ",slow_path(");

277 
	`f‹m©_Êags
(
ds
, 
¶ow_∑th_ªas⁄_to_°rög
,

278 
cookõ
.
¶ow_∑th
.
ªas⁄
, ',');

279 
	`ds_put_f‹m©
(
ds
, ")");

282 
USER_ACTION_COOKIE_UNSPEC
:

284 
	`ds_put_f‹m©
(
ds
, ",u£rd©a=0x%"
PRIx64
, 
u£rd©a
);

289 
	`ds_put_ch¨
(
ds
, ')');

290 
	}
}

293 
	$f‹m©_vœn_tci
(
ds
 *ds, 
ovs_be16
 
vœn_tci
)

295 
	`ds_put_f‹m©
(
ds
, "vid=%"
PRIu16
",pcp=%d",

296 
	`vœn_tci_to_vid
(
vœn_tci
),

297 
	`vœn_tci_to_p˝
(
vœn_tci
));

298 i‡(!(
vœn_tci
 & 
	`ht⁄s
(
VLAN_CFI
))) {

299 
	`ds_put_c°r
(
ds
, ",cfi=0");

301 
	}
}

304 
	$f‹m©_odp_a˘i⁄
(
ds
 *ds, c⁄° 
∆©å
 *
a
)

306 
ex≥˘ed_Àn
;

307 
ovs_a˘i⁄_©å
 
ty≥
 = 
	`∆_©å_ty≥
(
a
);

308 c⁄° 
ovs_a˘i⁄_push_vœn
 *
vœn
;

310 
ex≥˘ed_Àn
 = 
	`odp_a˘i⁄_Àn
(
	`∆_©å_ty≥
(
a
));

311 i‡(
ex≥˘ed_Àn
 !-2 && 
	`∆_©å_gë_size
(
a
) !=Éxpected_len) {

312 
	`ds_put_f‹m©
(
ds
, "badÜength %zu,Éxpected %d for: ",

313 
	`∆_©å_gë_size
(
a
), 
ex≥˘ed_Àn
);

314 
	`f‹m©_gíîic_odp_a˘i⁄
(
ds
, 
a
);

318 
ty≥
) {

319 
OVS_ACTION_ATTR_OUTPUT
:

320 
	`ds_put_f‹m©
(
ds
, "%"
PRIu16
, 
	`∆_©å_gë_u32
(
a
));

322 
OVS_ACTION_ATTR_USERSPACE
:

323 
	`f‹m©_odp_u£r•a˚_a˘i⁄
(
ds
, 
a
);

325 
OVS_ACTION_ATTR_SET
:

326 
	`ds_put_c°r
(
ds
, "set(");

327 
	`f‹m©_odp_key_©å
(
	`∆_©å_gë
(
a
), 
ds
);

328 
	`ds_put_c°r
(
ds
, ")");

330 
OVS_ACTION_ATTR_PUSH_VLAN
:

331 
vœn
 = 
	`∆_©å_gë
(
a
);

332 
	`ds_put_c°r
(
ds
, "push_vlan(");

333 i‡(
vœn
->
vœn_çid
 !
	`ht⁄s
(
ETH_TYPE_VLAN
)) {

334 
	`ds_put_f‹m©
(
ds
, "çid=0x%04"
PRIx16
",", 
	`¡ohs
(
vœn
->
vœn_çid
));

336 
	`f‹m©_vœn_tci
(
ds
, 
vœn
->
vœn_tci
);

337 
	`ds_put_ch¨
(
ds
, ')');

339 
OVS_ACTION_ATTR_POP_VLAN
:

340 
	`ds_put_c°r
(
ds
, "pop_vlan");

342 
OVS_ACTION_ATTR_SAMPLE
:

343 
	`f‹m©_odp_ßm∂e_a˘i⁄
(
ds
, 
a
);

345 
OVS_ACTION_ATTR_UNSPEC
:

346 
__OVS_ACTION_ATTR_MAX
:

348 
	`f‹m©_gíîic_odp_a˘i⁄
(
ds
, 
a
);

351 
	}
}

354 
	$f‹m©_odp_a˘i⁄s
(
ds
 *ds, c⁄° 
∆©å
 *
a˘i⁄s
,

355 
size_t
 
a˘i⁄s_Àn
)

357 i‡(
a˘i⁄s_Àn
) {

358 c⁄° 
∆©å
 *
a
;

359 
À·
;

361 
	`NL_ATTR_FOR_EACH
 (
a
, 
À·
, 
a˘i⁄s
, 
a˘i⁄s_Àn
) {

362 i‡(
a
 !
a˘i⁄s
) {

363 
	`ds_put_ch¨
(
ds
, ',');

365 
	`f‹m©_odp_a˘i⁄
(
ds
, 
a
);

367 i‡(
À·
) {

368 
i
;

370 i‡(
À·
 =
a˘i⁄s_Àn
) {

371 
	`ds_put_c°r
(
ds
, "<empty>");

373 
	`ds_put_f‹m©
(
ds
, ",***%uÜe·ovî byãs*** (", 
À·
);

374 
i
 = 0; i < 
À·
; i++) {

375 
	`ds_put_f‹m©
(
ds
, "%02x", ((c⁄° 
uöt8_t
 *Ë
a
)[
i
]);

377 
	`ds_put_ch¨
(
ds
, ')');

380 
	`ds_put_c°r
(
ds
, "drop");

382 
	}
}

385 
	$∑r£_odp_a˘i⁄
(c⁄° *
s
, c⁄° 
sim≠
 *
p‹t_«mes
,

386 
oÂbuf
 *
a˘i⁄s
)

399 
p‹t
;

400 
n
 = -1;

402 i‡(
	`ssˇnf
(
s
, "%Œi%n", &
p‹t
, &
n
) > 0 &&Ç > 0) {

403 
	`∆_msg_put_u32
(
a˘i⁄s
, 
OVS_ACTION_ATTR_OUTPUT
, 
p‹t
);

404  
n
;

408 i‡(
p‹t_«mes
) {

409 
Àn
 = 
	`°rc•n
(
s
, 
dñimôîs
);

410 
sim≠_node
 *
node
;

412 
node
 = 
	`sim≠_föd_Àn
(
p‹t_«mes
, 
s
, 
Àn
);

413 i‡(
node
) {

414 
	`∆_msg_put_u32
(
a˘i⁄s
, 
OVS_ACTION_ATTR_OUTPUT
, 
node
->
d©a
);

415  
Àn
;

420 
pid
;

421 
ouçut
;

422 
u£rd©a_s
[32];

423 
vid
, 
p˝
;

424 
n
 = -1;

426 i‡(
	`ssˇnf
(
s
, "u£r•a˚’id=%Œi)%n", &
pid
, &
n
) > 0 &&Ç > 0) {

427 
	`odp_put_u£r•a˚_a˘i⁄
(
pid
, 
NULL
, 
a˘i⁄s
);

428  
n
;

429 } i‡(
	`ssˇnf
(
s
, "userspace(pid=%lli,sFlow(vid=%i,"

431 &
pid
, &
vid
, &
p˝
, &
ouçut
, &
n
) > 0 &&Ç > 0) {

432 
u£r_a˘i⁄_cookõ
 
cookõ
;

433 
uöt16_t
 
tci
;

435 
tci
 = 
vid
 | (
p˝
 << 
VLAN_PCP_SHIFT
);

436 i‡(
tci
) {

437 
tci
 |
VLAN_CFI
;

440 
cookõ
.
ty≥
 = 
USER_ACTION_COOKIE_SFLOW
;

441 
cookõ
.
sÊow
.
vœn_tci
 = 
	`ht⁄s
(
tci
);

442 
cookõ
.
sÊow
.
ouçut
 = output;

443 
	`odp_put_u£r•a˚_a˘i⁄
(
pid
, &
cookõ
, 
a˘i⁄s
);

444  
n
;

445 } i‡(
	`ssˇnf
(
s
, "u£r•a˚’id=%Œi,¶ow_∑th%n", &
pid
, &
n
) > 0

446 && 
n
 > 0) {

447 
u£r_a˘i⁄_cookõ
 
cookõ
;

448 
ªs
;

450 
cookõ
.
ty≥
 = 
USER_ACTION_COOKIE_SLOW_PATH
;

451 
cookõ
.
¶ow_∑th
.
unu£d
 = 0;

452 
cookõ
.
¶ow_∑th
.
ªas⁄
 = 0;

454 
ªs
 = 
	`∑r£_Êags
(&
s
[
n
], 
¶ow_∑th_ªas⁄_to_°rög
,

455 &
cookõ
.
¶ow_∑th
.
ªas⁄
);

456 i‡(
ªs
 < 0) {

457  
ªs
;

459 
n
 +
ªs
;

460 i‡(
s
[
n
] != ')') {

461  -
EINVAL
;

463 
n
++;

465 
	`odp_put_u£r•a˚_a˘i⁄
(
pid
, &
cookõ
, 
a˘i⁄s
);

466  
n
;

467 } i‡(
	`ssˇnf
(
s
, "userspace(pid=%lli,userdata="

468 "%31[x0123456789abcdefABCDEF])%n", &
pid
, 
u£rd©a_s
,

469 &
n
) > 0 &&Ç > 0) {

470 
u£r_a˘i⁄_cookõ
 
cookõ
;

471 
uöt64_t
 
u£rd©a
;

473 
u£rd©a
 = 
	`°πouŒ
(
u£rd©a_s
, 
NULL
, 0);

474 
	`mem˝y
(&
cookõ
, &
u£rd©a
,  cookie);

475 
	`odp_put_u£r•a˚_a˘i⁄
(
pid
, &
cookõ
, 
a˘i⁄s
);

476  
n
;

480 i‡(!
	`°∫cmp
(
s
, "set(", 4)) {

481 
size_t
 
°¨t_ofs
;

482 
ªtvÆ
;

484 
°¨t_ofs
 = 
	`∆_msg_°¨t_√°ed
(
a˘i⁄s
, 
OVS_ACTION_ATTR_SET
);

485 
ªtvÆ
 = 
	`∑r£_odp_key_©å
(
s
 + 4, 
p‹t_«mes
, 
a˘i⁄s
);

486 i‡(
ªtvÆ
 < 0) {

487  
ªtvÆ
;

489 i‡(
s
[
ªtvÆ
 + 4] != ')') {

490  -
EINVAL
;

492 
	`∆_msg_íd_√°ed
(
a˘i⁄s
, 
°¨t_ofs
);

493  
ªtvÆ
 + 5;

497 
ovs_a˘i⁄_push_vœn
 
push
;

498 
çid
 = 
ETH_TYPE_VLAN
;

499 
vid
, 
p˝
;

500 
cfi
 = 1;

501 
n
 = -1;

503 i‡((
	`ssˇnf
(
s
, "push_vœn(vid=%i,p˝=%i)%n", &
vid
, &
p˝
, &
n
) > 0

504 && 
n
 > 0)

505 || (
	`ssˇnf
(
s
, "push_vlan(vid=%i,pcp=%i,cfi=%i)%n",

506 &
vid
, &
p˝
, &
cfi
, &
n
) > 0 &&Ç > 0)

507 || (
	`ssˇnf
(
s
, "push_vlan(tpid=%i,vid=%i,pcp=%i)%n",

508 &
çid
, &
vid
, &
p˝
, &
n
) > 0 &&Ç > 0)

509 || (
	`ssˇnf
(
s
, "push_vlan(tpid=%i,vid=%i,pcp=%i,cfi=%i)%n",

510 &
çid
, &
vid
, &
p˝
, &
cfi
, &
n
) > 0 &&Ç > 0)) {

511 
push
.
vœn_çid
 = 
	`ht⁄s
(
çid
);

512 
push
.
vœn_tci
 = 
	`ht⁄s
((
vid
 << 
VLAN_VID_SHIFT
)

513 | (
p˝
 << 
VLAN_PCP_SHIFT
)

514 | (
cfi
 ? 
VLAN_CFI
 : 0));

515 
	`∆_msg_put_un•ec
(
a˘i⁄s
, 
OVS_ACTION_ATTR_PUSH_VLAN
,

516 &
push
, Öush);

518  
n
;

522 i‡(!
	`°∫cmp
(
s
, "pop_vlan", 8)) {

523 
	`∆_msg_put_Êag
(
a˘i⁄s
, 
OVS_ACTION_ATTR_POP_VLAN
);

528 
≥r˚¡age
;

529 
n
 = -1;

531 i‡(
	`ssˇnf
(
s
, "ßm∂e(ßm∂e=%lf%%,a˘i⁄s(%n", &
≥r˚¡age
, &
n
) > 0

532 && 
≥r˚¡age
 >= 0. &&Öercentage <= 100.0

533 && 
n
 > 0) {

534 
size_t
 
ßm∂e_ofs
, 
a˘i⁄s_ofs
;

535 
¥obabûôy
;

537 
¥obabûôy
 = 
	`Êo‹
(
UINT32_MAX
 * (
≥r˚¡age
 / 100.0) + .5);

538 
ßm∂e_ofs
 = 
	`∆_msg_°¨t_√°ed
(
a˘i⁄s
, 
OVS_ACTION_ATTR_SAMPLE
);

539 
	`∆_msg_put_u32
(
a˘i⁄s
, 
OVS_SAMPLE_ATTR_PROBABILITY
,

540 (
¥obabûôy
 <= 0 ? 0

541 : 
¥obabûôy
 >
UINT32_MAX
 ? UINT32_MAX

542 : 
¥obabûôy
));

544 
a˘i⁄s_ofs
 = 
	`∆_msg_°¨t_√°ed
(
a˘i⁄s
,

545 
OVS_SAMPLE_ATTR_ACTIONS
);

547 
ªtvÆ
;

549 
n
 +
	`°r•n
(
s
 +Ç, 
dñimôîs
);

550 i‡(
s
[
n
] == ')') {

554 
ªtvÆ
 = 
	`∑r£_odp_a˘i⁄
(
s
 + 
n
, 
p‹t_«mes
, 
a˘i⁄s
);

555 i‡(
ªtvÆ
 < 0) {

556  
ªtvÆ
;

558 
n
 +
ªtvÆ
;

560 
	`∆_msg_íd_√°ed
(
a˘i⁄s
, 
a˘i⁄s_ofs
);

561 
	`∆_msg_íd_√°ed
(
a˘i⁄s
, 
ßm∂e_ofs
);

563  
s
[
n
 + 1] =')' ?Ç + 2 : -
EINVAL
;

567  -
EINVAL
;

568 
	}
}

576 
	$odp_a˘i⁄s_‰om_°rög
(c⁄° *
s
, c⁄° 
sim≠
 *
p‹t_«mes
,

577 
oÂbuf
 *
a˘i⁄s
)

579 
size_t
 
ﬁd_size
;

581 i‡(!
	`°rˇ£cmp
(
s
, "drop")) {

585 
ﬁd_size
 = 
a˘i⁄s
->
size
;

587 
ªtvÆ
;

589 
s
 +
	`°r•n
(s, 
dñimôîs
);

590 i‡(!*
s
) {

594 
ªtvÆ
 = 
	`∑r£_odp_a˘i⁄
(
s
, 
p‹t_«mes
, 
a˘i⁄s
);

595 i‡(
ªtvÆ
 < 0 || !
	`°rchr
(
dñimôîs
, 
s
[retval])) {

596 
a˘i⁄s
->
size
 = 
ﬁd_size
;

597  -
ªtvÆ
;

599 
s
 +
ªtvÆ
;

603 
	}
}

609 
	$odp_Êow_key_©å_Àn
(
uöt16_t
 
ty≥
)

611 i‡(
ty≥
 > 
OVS_KEY_ATTR_MAX
) {

615 (
ovs_key_©å
Ë
ty≥
) {

616 
OVS_KEY_ATTR_ENCAP
:  -2;

617 
OVS_KEY_ATTR_PRIORITY
:  4;

618 
OVS_KEY_ATTR_SKB_MARK
:  4;

619 
OVS_KEY_ATTR_TUN_ID
:  8;

620 
OVS_KEY_ATTR_TUNNEL
:  -2;

621 
OVS_KEY_ATTR_IN_PORT
:  4;

622 
OVS_KEY_ATTR_ETHERNET
:  (
ovs_key_ëhî√t
);

623 
OVS_KEY_ATTR_VLAN
:  (
ovs_be16
);

624 
OVS_KEY_ATTR_ETHERTYPE
:  2;

625 
OVS_KEY_ATTR_IPV4
:  (
ovs_key_ùv4
);

626 
OVS_KEY_ATTR_IPV6
:  (
ovs_key_ùv6
);

627 
OVS_KEY_ATTR_TCP
:  (
ovs_key_t˝
);

628 
OVS_KEY_ATTR_UDP
:  (
ovs_key_udp
);

629 
OVS_KEY_ATTR_ICMP
:  (
ovs_key_icmp
);

630 
OVS_KEY_ATTR_ICMPV6
:  (
ovs_key_icmpv6
);

631 
OVS_KEY_ATTR_ARP
:  (
ovs_key_¨p
);

632 
OVS_KEY_ATTR_ND
:  (
ovs_key_nd
);

634 
OVS_KEY_ATTR_UNSPEC
:

635 
__OVS_KEY_ATTR_MAX
:

640 
	}
}

643 
	$f‹m©_gíîic_odp_key
(c⁄° 
∆©å
 *
a
, 
ds
 *ds)

645 
size_t
 
Àn
 = 
	`∆_©å_gë_size
(
a
);

646 i‡(
Àn
) {

647 c⁄° 
uöt8_t
 *
un•ec
;

648 
i
;

650 
un•ec
 = 
	`∆_©å_gë
(
a
);

651 
i
 = 0; i < 
Àn
; i++) {

652 
	`ds_put_ch¨
(
ds
, 
i
 ? ' ': '(');

653 
	`ds_put_f‹m©
(
ds
, "%02x", 
un•ec
[
i
]);

655 
	`ds_put_ch¨
(
ds
, ')');

657 
	}
}

660 
	$ovs_‰ag_ty≥_to_°rög
(
ovs_‰ag_ty≥
 
ty≥
)

662 
ty≥
) {

663 
OVS_FRAG_TYPE_NONE
:

665 
OVS_FRAG_TYPE_FIRST
:

667 
OVS_FRAG_TYPE_LATER
:

669 
__OVS_FRAG_TYPE_MAX
:

673 
	}
}

676 
	$tu¬ñ_key_©å_Àn
(
ty≥
)

678 
ty≥
) {

679 
OVS_TUNNEL_KEY_ATTR_ID
:  8;

680 
OVS_TUNNEL_KEY_ATTR_IPV4_SRC
:  4;

681 
OVS_TUNNEL_KEY_ATTR_IPV4_DST
:  4;

682 
OVS_TUNNEL_KEY_ATTR_TOS
:  1;

683 
OVS_TUNNEL_KEY_ATTR_TTL
:  1;

684 
OVS_TUNNEL_KEY_ATTR_DONT_FRAGMENT
:  0;

685 
OVS_TUNNEL_KEY_ATTR_CSUM
:  0;

686 
__OVS_TUNNEL_KEY_ATTR_MAX
:

690 
	}
}

692 
odp_key_fô√ss


693 
	$tun_key_‰om_©å
(c⁄° 
∆©å
 *
©å
, 
Êow_äl
 *
tun
)

695 
À·
;

696 c⁄° 
∆©å
 *
a
;

697 
boﬁ
 
âl
 = 
Ál£
;

698 
boﬁ
 
unknown
 = 
Ál£
;

700 
	`NL_NESTED_FOR_EACH
(
a
, 
À·
, 
©å
) {

701 
uöt16_t
 
ty≥
 = 
	`∆_©å_ty≥
(
a
);

702 
size_t
 
Àn
 = 
	`∆_©å_gë_size
(
a
);

703 
ex≥˘ed_Àn
 = 
	`tu¬ñ_key_©å_Àn
(
ty≥
);

705 i‡(
Àn
 !
ex≥˘ed_Àn
 &&Éxpected_len >= 0) {

706  
ODP_FIT_ERROR
;

709 
ty≥
) {

710 
OVS_TUNNEL_KEY_ATTR_ID
:

711 
tun
->
tun_id
 = 
	`∆_©å_gë_be64
(
a
);

712 
tun
->
Êags
 |
FLOW_TNL_F_KEY
;

714 
OVS_TUNNEL_KEY_ATTR_IPV4_SRC
:

715 
tun
->
ù_§c
 = 
	`∆_©å_gë_be32
(
a
);

717 
OVS_TUNNEL_KEY_ATTR_IPV4_DST
:

718 
tun
->
ù_d°
 = 
	`∆_©å_gë_be32
(
a
);

720 
OVS_TUNNEL_KEY_ATTR_TOS
:

721 
tun
->
ù_tos
 = 
	`∆_©å_gë_u8
(
a
);

723 
OVS_TUNNEL_KEY_ATTR_TTL
:

724 
tun
->
ù_âl
 = 
	`∆_©å_gë_u8
(
a
);

725 
âl
 = 
åue
;

727 
OVS_TUNNEL_KEY_ATTR_DONT_FRAGMENT
:

728 
tun
->
Êags
 |
FLOW_TNL_F_DONT_FRAGMENT
;

730 
OVS_TUNNEL_KEY_ATTR_CSUM
:

731 
tun
->
Êags
 |
FLOW_TNL_F_CSUM
;

736 
unknown
 = 
åue
;

741 i‡(!
âl
) {

742  
ODP_FIT_ERROR
;

744 i‡(
unknown
) {

745  
ODP_FIT_TOO_MUCH
;

747  
ODP_FIT_PERFECT
;

748 
	}
}

751 
	$tun_key_to_©å
(
oÂbuf
 *
a
, c⁄° 
Êow_äl
 *
tun_key
)

753 
size_t
 
tun_key_ofs
;

755 
tun_key_ofs
 = 
	`∆_msg_°¨t_√°ed
(
a
, 
OVS_KEY_ATTR_TUNNEL
);

757 i‡(
tun_key
->
Êags
 & 
FLOW_TNL_F_KEY
) {

758 
	`∆_msg_put_be64
(
a
, 
OVS_TUNNEL_KEY_ATTR_ID
, 
tun_key
->
tun_id
);

760 i‡(
tun_key
->
ù_§c
) {

761 
	`∆_msg_put_be32
(
a
, 
OVS_TUNNEL_KEY_ATTR_IPV4_SRC
, 
tun_key
->
ù_§c
);

763 i‡(
tun_key
->
ù_d°
) {

764 
	`∆_msg_put_be32
(
a
, 
OVS_TUNNEL_KEY_ATTR_IPV4_DST
, 
tun_key
->
ù_d°
);

766 i‡(
tun_key
->
ù_tos
) {

767 
	`∆_msg_put_u8
(
a
, 
OVS_TUNNEL_KEY_ATTR_TOS
, 
tun_key
->
ù_tos
);

769 
	`∆_msg_put_u8
(
a
, 
OVS_TUNNEL_KEY_ATTR_TTL
, 
tun_key
->
ù_âl
);

770 i‡(
tun_key
->
Êags
 & 
FLOW_TNL_F_DONT_FRAGMENT
) {

771 
	`∆_msg_put_Êag
(
a
, 
OVS_TUNNEL_KEY_ATTR_DONT_FRAGMENT
);

773 i‡(
tun_key
->
Êags
 & 
FLOW_TNL_F_CSUM
) {

774 
	`∆_msg_put_Êag
(
a
, 
OVS_TUNNEL_KEY_ATTR_CSUM
);

777 
	`∆_msg_íd_√°ed
(
a
, 
tun_key_ofs
);

778 
	}
}

781 
	$f‹m©_odp_key_©å
(c⁄° 
∆©å
 *
a
, 
ds
 *ds)

783 c⁄° 
ovs_key_ëhî√t
 *
ëh_key
;

784 c⁄° 
ovs_key_ùv4
 *
ùv4_key
;

785 c⁄° 
ovs_key_ùv6
 *
ùv6_key
;

786 c⁄° 
ovs_key_t˝
 *
t˝_key
;

787 c⁄° 
ovs_key_udp
 *
udp_key
;

788 c⁄° 
ovs_key_icmp
 *
icmp_key
;

789 c⁄° 
ovs_key_icmpv6
 *
icmpv6_key
;

790 c⁄° 
ovs_key_¨p
 *
¨p_key
;

791 c⁄° 
ovs_key_nd
 *
nd_key
;

792 
Êow_äl
 
tun_key
;

793 
ovs_key_©å
 
©å
 = 
	`∆_©å_ty≥
(
a
);

794 
ex≥˘ed_Àn
;

796 
	`ds_put_c°r
(
ds
, 
	`ovs_key_©å_to_°rög
(
©å
));

797 
ex≥˘ed_Àn
 = 
	`odp_Êow_key_©å_Àn
(
	`∆_©å_ty≥
(
a
));

798 i‡(
ex≥˘ed_Àn
 !-2 && 
	`∆_©å_gë_size
(
a
) !=Éxpected_len) {

799 
	`ds_put_f‹m©
(
ds
, "(badÜength %zu,Éxpected %d)",

800 
	`∆_©å_gë_size
(
a
),

801 
	`odp_Êow_key_©å_Àn
(
	`∆_©å_ty≥
(
a
)));

802 
	`f‹m©_gíîic_odp_key
(
a
, 
ds
);

806 
©å
) {

807 
OVS_KEY_ATTR_ENCAP
:

808 
	`ds_put_c°r
(
ds
, "(");

809 i‡(
	`∆_©å_gë_size
(
a
)) {

810 
	`odp_Êow_key_f‹m©
(
	`∆_©å_gë
(
a
), 
	`∆_©å_gë_size
◊), 
ds
);

812 
	`ds_put_ch¨
(
ds
, ')');

815 
OVS_KEY_ATTR_PRIORITY
:

816 
	`ds_put_f‹m©
(
ds
, "(%#"
PRIx32
")", 
	`∆_©å_gë_u32
(
a
));

819 
OVS_KEY_ATTR_SKB_MARK
:

820 
	`ds_put_f‹m©
(
ds
, "(%#"
PRIx32
")", 
	`∆_©å_gë_u32
(
a
));

823 
OVS_KEY_ATTR_TUN_ID
:

824 
	`ds_put_f‹m©
(
ds
, "(%#"
PRIx64
")", 
	`¡ohŒ
(
	`∆_©å_gë_be64
(
a
)));

827 
OVS_KEY_ATTR_TUNNEL
:

828 
	`mem£t
(&
tun_key
, 0, Åun_key);

829 i‡(
	`tun_key_‰om_©å
(
a
, &
tun_key
Ë=
ODP_FIT_ERROR
) {

830 
	`ds_put_f‹m©
(
ds
, "(error)");

832 
	`ds_put_f‹m©
(
ds
, "—un_id=0x%"
PRIx64
",§c="
IP_FMT
",dst="IP_FMT","

833 "tos=0x%"
PRIx8
",âl=%"
PRIu8
",flags(",

834 
	`¡ohŒ
(
tun_key
.
tun_id
),

835 
	`IP_ARGS
(&
tun_key
.
ù_§c
),

836 
	`IP_ARGS
(&
tun_key
.
ù_d°
),

837 
tun_key
.
ù_tos
,Åun_key.
ù_âl
);

839 
	`f‹m©_Êags
(
ds
, 
Êow_tun_Êag_to_°rög
,

840 (
uöt32_t
Ë
tun_key
.
Êags
, ',');

841 
	`ds_put_f‹m©
(
ds
, "))");

846 
OVS_KEY_ATTR_IN_PORT
:

847 
	`ds_put_f‹m©
(
ds
, "(%"
PRIu32
")", 
	`∆_©å_gë_u32
(
a
));

850 
OVS_KEY_ATTR_ETHERNET
:

851 
ëh_key
 = 
	`∆_©å_gë
(
a
);

852 
	`ds_put_f‹m©
(
ds
, "(§c="
ETH_ADDR_FMT
",dst="ETH_ADDR_FMT")",

853 
	`ETH_ADDR_ARGS
(
ëh_key
->
ëh_§c
),

854 
	`ETH_ADDR_ARGS
(
ëh_key
->
ëh_d°
));

857 
OVS_KEY_ATTR_VLAN
:

858 
	`ds_put_ch¨
(
ds
, '(');

859 
	`f‹m©_vœn_tci
(
ds
, 
	`∆_©å_gë_be16
(
a
));

860 
	`ds_put_ch¨
(
ds
, ')');

863 
OVS_KEY_ATTR_ETHERTYPE
:

864 
	`ds_put_f‹m©
(
ds
, "(0x%04"
PRIx16
")",

865 
	`¡ohs
(
	`∆_©å_gë_be16
(
a
)));

868 
OVS_KEY_ATTR_IPV4
:

869 
ùv4_key
 = 
	`∆_©å_gë
(
a
);

870 
	`ds_put_f‹m©
(
ds
, "(§c="
IP_FMT
",d°="IP_FMT",¥Ÿo=%"
PRIu8


871 ",tos=%#"
PRIx8
",âl=%"
PRIu8
",frag=%s)",

872 
	`IP_ARGS
(&
ùv4_key
->
ùv4_§c
),

873 
	`IP_ARGS
(&
ùv4_key
->
ùv4_d°
),

874 
ùv4_key
->
ùv4_¥Ÿo
, ipv4_key->
ùv4_tos
,

875 
ùv4_key
->
ùv4_âl
,

876 
	`ovs_‰ag_ty≥_to_°rög
(
ùv4_key
->
ùv4_‰ag
));

879 
OVS_KEY_ATTR_IPV6
: {

880 
§c_°r
[
INET6_ADDRSTRLEN
];

881 
d°_°r
[
INET6_ADDRSTRLEN
];

883 
ùv6_key
 = 
	`∆_©å_gë
(
a
);

884 
	`öë_¡›
(
AF_INET6
, 
ùv6_key
->
ùv6_§c
, 
§c_°r
,  src_str);

885 
	`öë_¡›
(
AF_INET6
, 
ùv6_key
->
ùv6_d°
, 
d°_°r
,  dst_str);

887 
	`ds_put_f‹m©
(
ds
, "(§c=%s,d°=%s,œbñ=%#"
PRIx32
",¥Ÿo=%"
PRIu8


888 ",t˛ass=%#"
PRIx8
",hlimô=%"
PRIu8
",frag=%s)",

889 
§c_°r
, 
d°_°r
, 
	`¡ohl
(
ùv6_key
->
ùv6_œbñ
),

890 
ùv6_key
->
ùv6_¥Ÿo
, ipv6_key->
ùv6_t˛ass
,

891 
ùv6_key
->
ùv6_hlimô
,

892 
	`ovs_‰ag_ty≥_to_°rög
(
ùv6_key
->
ùv6_‰ag
));

896 
OVS_KEY_ATTR_TCP
:

897 
t˝_key
 = 
	`∆_©å_gë
(
a
);

898 
	`ds_put_f‹m©
(
ds
, "(§c=%"
PRIu16
",dst=%"PRIu16")",

899 
	`¡ohs
(
t˝_key
->
t˝_§c
),Çtohs—˝_key->
t˝_d°
));

902 
OVS_KEY_ATTR_UDP
:

903 
udp_key
 = 
	`∆_©å_gë
(
a
);

904 
	`ds_put_f‹m©
(
ds
, "(§c=%"
PRIu16
",dst=%"PRIu16")",

905 
	`¡ohs
(
udp_key
->
udp_§c
),Çtohs(udp_key->
udp_d°
));

908 
OVS_KEY_ATTR_ICMP
:

909 
icmp_key
 = 
	`∆_©å_gë
(
a
);

910 
	`ds_put_f‹m©
(
ds
, "—y≥=%"
PRIu8
",code=%"PRIu8")",

911 
icmp_key
->
icmp_ty≥
, icmp_key->
icmp_code
);

914 
OVS_KEY_ATTR_ICMPV6
:

915 
icmpv6_key
 = 
	`∆_©å_gë
(
a
);

916 
	`ds_put_f‹m©
(
ds
, "—y≥=%"
PRIu8
",code=%"PRIu8")",

917 
icmpv6_key
->
icmpv6_ty≥
, icmpv6_key->
icmpv6_code
);

920 
OVS_KEY_ATTR_ARP
:

921 
¨p_key
 = 
	`∆_©å_gë
(
a
);

922 
	`ds_put_f‹m©
(
ds
, "(sù="
IP_FMT
",tù="IP_FMT",›=%"
PRIu16
","

923 "sha="
ETH_ADDR_FMT
",tha="ETH_ADDR_FMT")",

924 
	`IP_ARGS
(&
¨p_key
->
¨p_sù
), IP_ARGS(&¨p_key->
¨p_tù
),

925 
	`¡ohs
(
¨p_key
->
¨p_›
), 
	`ETH_ADDR_ARGS
◊Ω_key->
¨p_sha
),

926 
	`ETH_ADDR_ARGS
(
¨p_key
->
¨p_tha
));

929 
OVS_KEY_ATTR_ND
: {

930 
èrgë
[
INET6_ADDRSTRLEN
];

932 
nd_key
 = 
	`∆_©å_gë
(
a
);

933 
	`öë_¡›
(
AF_INET6
, 
nd_key
->
nd_èrgë
, 
èrgë
, Åarget);

935 
	`ds_put_f‹m©
(
ds
, "—¨gë=%s", 
èrgë
);

936 i‡(!
	`ëh_addr_is_zîo
(
nd_key
->
nd_¶l
)) {

937 
	`ds_put_f‹m©
(
ds
, ",¶l="
ETH_ADDR_FMT
,

938 
	`ETH_ADDR_ARGS
(
nd_key
->
nd_¶l
));

940 i‡(!
	`ëh_addr_is_zîo
(
nd_key
->
nd_él
)) {

941 
	`ds_put_f‹m©
(
ds
, ",él="
ETH_ADDR_FMT
,

942 
	`ETH_ADDR_ARGS
(
nd_key
->
nd_él
));

944 
	`ds_put_ch¨
(
ds
, ')');

948 
OVS_KEY_ATTR_UNSPEC
:

949 
__OVS_KEY_ATTR_MAX
:

951 
	`f‹m©_gíîic_odp_key
(
a
, 
ds
);

954 
	}
}

959 
	$odp_Êow_key_f‹m©
(c⁄° 
∆©å
 *
key
, 
size_t
 
key_Àn
, 
ds
 *ds)

961 i‡(
key_Àn
) {

962 c⁄° 
∆©å
 *
a
;

963 
À·
;

965 
	`NL_ATTR_FOR_EACH
 (
a
, 
À·
, 
key
, 
key_Àn
) {

966 i‡(
a
 !
key
) {

967 
	`ds_put_ch¨
(
ds
, ',');

969 
	`f‹m©_odp_key_©å
(
a
, 
ds
);

971 i‡(
À·
) {

972 
i
;

974 i‡(
À·
 =
key_Àn
) {

975 
	`ds_put_c°r
(
ds
, "<empty>");

977 
	`ds_put_f‹m©
(
ds
, ",***%uÜe·ovî byãs*** (", 
À·
);

978 
i
 = 0; i < 
À·
; i++) {

979 
	`ds_put_f‹m©
(
ds
, "%02x", ((c⁄° 
uöt8_t
 *Ë
a
)[
i
]);

981 
	`ds_put_ch¨
(
ds
, ')');

984 
	`ds_put_c°r
(
ds
, "<empty>");

986 
	}
}

989 
	$put_nd_key
(
n
, c⁄° *
nd_èrgë_s
,

990 c⁄° 
uöt8_t
 *
nd_¶l
, c⁄° uöt8_à*
nd_él
, 
oÂbuf
 *
key
)

992 
ovs_key_nd
 
nd_key
;

994 
	`mem£t
(&
nd_key
, 0, Çd_key);

995 i‡(
	`öë_±⁄
(
AF_INET6
, 
nd_èrgë_s
, 
nd_key
.
nd_èrgë
) != 1) {

996  -
EINVAL
;

998 i‡(
nd_¶l
) {

999 
	`mem˝y
(
nd_key
.
nd_¶l
,Çd_¶l, 
ETH_ADDR_LEN
);

1001 i‡(
nd_él
) {

1002 
	`mem˝y
(
nd_key
.
nd_él
,Çd_él, 
ETH_ADDR_LEN
);

1004 
	`∆_msg_put_un•ec
(
key
, 
OVS_KEY_ATTR_ND
, &
nd_key
, Çd_key);

1005  
n
;

1006 
	}
}

1008 
boﬁ


1009 
	$ovs_‰ag_ty≥_‰om_°rög
(c⁄° *
s
, 
ovs_‰ag_ty≥
 *
ty≥
)

1011 i‡(!
	`°rˇ£cmp
(
s
, "no")) {

1012 *
ty≥
 = 
OVS_FRAG_TYPE_NONE
;

1013 } i‡(!
	`°rˇ£cmp
(
s
, "first")) {

1014 *
ty≥
 = 
OVS_FRAG_TYPE_FIRST
;

1015 } i‡(!
	`°rˇ£cmp
(
s
, "later")) {

1016 *
ty≥
 = 
OVS_FRAG_TYPE_LATER
;

1018  
Ál£
;

1020  
åue
;

1021 
	}
}

1024 
	$∑r£_odp_key_©å
(c⁄° *
s
, c⁄° 
sim≠
 *
p‹t_«mes
,

1025 
oÂbuf
 *
key
)

1038 
¥i‹ôy
;

1039 
n
 = -1;

1041 i‡(
	`ssˇnf
(
s
, "skb_¥i‹ôy(%Œx)%n", &
¥i‹ôy
, &
n
) > 0 &&Ç > 0) {

1042 
	`∆_msg_put_u32
(
key
, 
OVS_KEY_ATTR_PRIORITY
, 
¥i‹ôy
);

1043  
n
;

1048 
m¨k
;

1049 
n
 = -1;

1051 i‡(
	`ssˇnf
(
s
, "skb_m¨k(%Œx)%n", &
m¨k
, &
n
) > 0 &&Ç > 0) {

1052 
	`∆_msg_put_u32
(
key
, 
OVS_KEY_ATTR_SKB_MARK
, 
m¨k
);

1053  
n
;

1058 
tun_id_s
[32];

1059 
n
 = -1;

1061 i‡(
	`ssˇnf
(
s
, "tun_id(%31[x0123456789abcdefABCDEF])%n",

1062 
tun_id_s
, &
n
) > 0 &&Ç > 0) {

1063 
uöt64_t
 
tun_id
 = 
	`°πouŒ
(
tun_id_s
, 
NULL
, 0);

1064 
	`∆_msg_put_be64
(
key
, 
OVS_KEY_ATTR_TUN_ID
, 
	`ht⁄Œ
(
tun_id
));

1065  
n
;

1070 
tun_id_s
[32];

1071 
tos
, 
âl
;

1072 
Êow_äl
 
tun_key
;

1073 
n
 = -1;

1075 i‡(
	`ssˇnf
(
s
, "tunnel(tun_id=%31[x0123456789abcdefABCDEF],"

1076 "§c="
IP_SCAN_FMT
",dst="IP_SCAN_FMT

1077 ",tos=%i,âl=%i,Êags%n", 
tun_id_s
,

1078 
	`IP_SCAN_ARGS
(&
tun_key
.
ù_§c
),

1079 
	`IP_SCAN_ARGS
(&
tun_key
.
ù_d°
), &
tos
, &
âl
,

1080 &
n
) > 0 &&Ç > 0) {

1081 
ªs
;

1082 
uöt32_t
 
Êags
;

1084 
tun_key
.
tun_id
 = 
	`ht⁄Œ
(
	`°πouŒ
(
tun_id_s
, 
NULL
, 0));

1085 
tun_key
.
ù_tos
 = 
tos
;

1086 
tun_key
.
ù_âl
 = 
âl
;

1087 
ªs
 = 
	`∑r£_Êags
(&
s
[
n
], 
Êow_tun_Êag_to_°rög
, &
Êags
);

1088 
tun_key
.
Êags
 = (
uöt16_t
) flags;

1090 i‡(
ªs
 < 0) {

1091  
ªs
;

1093 
n
 +
ªs
;

1094 i‡(
s
[
n
] != ')') {

1095  -
EINVAL
;

1097 
n
++;

1098 
	`tun_key_to_©å
(
key
, &
tun_key
);

1099  
n
;

1104 
ö_p‹t
;

1105 
n
 = -1;

1107 i‡(
	`ssˇnf
(
s
, "ö_p‹t(%Œi)%n", &
ö_p‹t
, &
n
) > 0 &&Ç > 0) {

1108 
	`∆_msg_put_u32
(
key
, 
OVS_KEY_ATTR_IN_PORT
, 
ö_p‹t
);

1109  
n
;

1113 i‡(
p‹t_«mes
 && !
	`°∫cmp
(
s
, "in_port(", 8)) {

1114 c⁄° *
«me
;

1115 c⁄° 
sim≠_node
 *
node
;

1116 
«me_Àn
;

1118 
«me
 = 
s
 + 8;

1119 
«me_Àn
 = 
	`°rc•n
(
s
, ")");

1120 
node
 = 
	`sim≠_föd_Àn
(
p‹t_«mes
, 
«me
, 
«me_Àn
);

1121 i‡(
node
) {

1122 
	`∆_msg_put_u32
(
key
, 
OVS_KEY_ATTR_IN_PORT
, 
node
->
d©a
);

1123  8 + 
«me_Àn
 + 1;

1128 
ovs_key_ëhî√t
 
ëh_key
;

1129 
n
 = -1;

1131 i‡(
	`ssˇnf
(
s
,

1132 "ëh(§c="
ETH_ADDR_SCAN_FMT
",dst="ETH_ADDR_SCAN_FMT")%n",

1133 
	`ETH_ADDR_SCAN_ARGS
(
ëh_key
.
ëh_§c
),

1134 
	`ETH_ADDR_SCAN_ARGS
(
ëh_key
.
ëh_d°
), &
n
) > 0 &&Ç > 0) {

1135 
	`∆_msg_put_un•ec
(
key
, 
OVS_KEY_ATTR_ETHERNET
,

1136 &
ëh_key
, Éth_key);

1137  
n
;

1142 
uöt16_t
 
vid
;

1143 
p˝
;

1144 
cfi
;

1145 
n
 = -1;

1147 i‡((
	`ssˇnf
(
s
, "vœn(vid=%"
SCNi16
",p˝=%i)%n", &
vid
, &
p˝
, &
n
) > 0

1148 && 
n
 > 0)) {

1149 
	`∆_msg_put_be16
(
key
, 
OVS_KEY_ATTR_VLAN
,

1150 
	`ht⁄s
((
vid
 << 
VLAN_VID_SHIFT
) |

1151 (
p˝
 << 
VLAN_PCP_SHIFT
) |

1152 
VLAN_CFI
));

1153  
n
;

1154 } i‡((
	`ssˇnf
(
s
, "vœn(vid=%"
SCNi16
",pcp=%i,cfi=%i)%n",

1155 &
vid
, &
p˝
, &
cfi
, &
n
) > 0

1156 && 
n
 > 0)) {

1157 
	`∆_msg_put_be16
(
key
, 
OVS_KEY_ATTR_VLAN
,

1158 
	`ht⁄s
((
vid
 << 
VLAN_VID_SHIFT
) |

1159 (
p˝
 << 
VLAN_PCP_SHIFT
) |

1160 (
cfi
 ? 
VLAN_CFI
 : 0)));

1161  
n
;

1166 
ëh_ty≥
;

1167 
n
 = -1;

1169 i‡(
	`ssˇnf
(
s
, "ëh_ty≥(%i)%n", &
ëh_ty≥
, &
n
) > 0 &&Ç > 0) {

1170 
	`∆_msg_put_be16
(
key
, 
OVS_KEY_ATTR_ETHERTYPE
, 
	`ht⁄s
(
ëh_ty≥
));

1171  
n
;

1176 
ovs_be32
 
ùv4_§c
;

1177 
ovs_be32
 
ùv4_d°
;

1178 
ùv4_¥Ÿo
;

1179 
ùv4_tos
;

1180 
ùv4_âl
;

1181 
‰ag
[8];

1182 
ovs_‰ag_ty≥
 
ùv4_‰ag
;

1183 
n
 = -1;

1185 i‡(
	`ssˇnf
(
s
, "ùv4(§c="
IP_SCAN_FMT
",dst="IP_SCAN_FMT","

1187 
	`IP_SCAN_ARGS
(&
ùv4_§c
), IP_SCAN_ARGS(&
ùv4_d°
),

1188 &
ùv4_¥Ÿo
, &
ùv4_tos
, &
ùv4_âl
, 
‰ag
, &
n
) > 0

1189 && 
n
 > 0

1190 && 
	`ovs_‰ag_ty≥_‰om_°rög
(
‰ag
, &
ùv4_‰ag
)) {

1191 
ovs_key_ùv4
 
ùv4_key
;

1193 
ùv4_key
.
ùv4_§c
 = ipv4_src;

1194 
ùv4_key
.
ùv4_d°
 = ipv4_dst;

1195 
ùv4_key
.
ùv4_¥Ÿo
 = ipv4_proto;

1196 
ùv4_key
.
ùv4_tos
 = ipv4_tos;

1197 
ùv4_key
.
ùv4_âl
 = ipv4_ttl;

1198 
ùv4_key
.
ùv4_‰ag
 = ipv4_frag;

1199 
	`∆_msg_put_un•ec
(
key
, 
OVS_KEY_ATTR_IPV4
,

1200 &
ùv4_key
,  ipv4_key);

1201  
n
;

1206 
ùv6_§c_s
[
IPV6_SCAN_LEN
 + 1];

1207 
ùv6_d°_s
[
IPV6_SCAN_LEN
 + 1];

1208 
ùv6_œbñ
;

1209 
ùv6_¥Ÿo
;

1210 
ùv6_t˛ass
;

1211 
ùv6_hlimô
;

1212 
‰ag
[8];

1213 
ovs_‰ag_ty≥
 
ùv6_‰ag
;

1214 
n
 = -1;

1216 i‡(
	`ssˇnf
(
s
, "ùv6(§c="
IPV6_SCAN_FMT
",dst="IPV6_SCAN_FMT","

1218 
ùv6_§c_s
, 
ùv6_d°_s
, &
ùv6_œbñ
,

1219 &
ùv6_¥Ÿo
, &
ùv6_t˛ass
, &
ùv6_hlimô
, 
‰ag
, &
n
) > 0

1220 && 
n
 > 0

1221 && 
	`ovs_‰ag_ty≥_‰om_°rög
(
‰ag
, &
ùv6_‰ag
)) {

1222 
ovs_key_ùv6
 
ùv6_key
;

1224 i‡(
	`öë_±⁄
(
AF_INET6
, 
ùv6_§c_s
, &
ùv6_key
.
ùv6_§c
) != 1 ||

1225 
	`öë_±⁄
(
AF_INET6
, 
ùv6_d°_s
, &
ùv6_key
.
ùv6_d°
) != 1) {

1226  -
EINVAL
;

1228 
ùv6_key
.
ùv6_œbñ
 = 
	`ht⁄l
(ipv6_label);

1229 
ùv6_key
.
ùv6_¥Ÿo
 = ipv6_proto;

1230 
ùv6_key
.
ùv6_t˛ass
 = ipv6_tclass;

1231 
ùv6_key
.
ùv6_hlimô
 = ipv6_hlimit;

1232 
ùv6_key
.
ùv6_‰ag
 = ipv6_frag;

1233 
	`∆_msg_put_un•ec
(
key
, 
OVS_KEY_ATTR_IPV6
,

1234 &
ùv6_key
,  ipv6_key);

1235  
n
;

1240 
t˝_§c
;

1241 
t˝_d°
;

1242 
n
 = -1;

1244 i‡(
	`ssˇnf
(
s
, "t˝(§c=%i,d°=%i)%n",&
t˝_§c
, &
t˝_d°
, &
n
) > 0

1245 && 
n
 > 0) {

1246 
ovs_key_t˝
 
t˝_key
;

1248 
t˝_key
.
t˝_§c
 = 
	`ht⁄s
(tcp_src);

1249 
t˝_key
.
t˝_d°
 = 
	`ht⁄s
(tcp_dst);

1250 
	`∆_msg_put_un•ec
(
key
, 
OVS_KEY_ATTR_TCP
, &
t˝_key
, Åcp_key);

1251  
n
;

1256 
udp_§c
;

1257 
udp_d°
;

1258 
n
 = -1;

1260 i‡(
	`ssˇnf
(
s
, "udp(§c=%i,d°=%i)%n", &
udp_§c
, &
udp_d°
, &
n
) > 0

1261 && 
n
 > 0) {

1262 
ovs_key_udp
 
udp_key
;

1264 
udp_key
.
udp_§c
 = 
	`ht⁄s
(udp_src);

1265 
udp_key
.
udp_d°
 = 
	`ht⁄s
(udp_dst);

1266 
	`∆_msg_put_un•ec
(
key
, 
OVS_KEY_ATTR_UDP
, &
udp_key
,  udp_key);

1267  
n
;

1272 
icmp_ty≥
;

1273 
icmp_code
;

1274 
n
 = -1;

1276 i‡(
	`ssˇnf
(
s
, "icmp(type=%i,code=%i)%n",

1277 &
icmp_ty≥
, &
icmp_code
, &
n
) > 0

1278 && 
n
 > 0) {

1279 
ovs_key_icmp
 
icmp_key
;

1281 
icmp_key
.
icmp_ty≥
 = icmp_type;

1282 
icmp_key
.
icmp_code
 = icmp_code;

1283 
	`∆_msg_put_un•ec
(
key
, 
OVS_KEY_ATTR_ICMP
,

1284 &
icmp_key
,  icmp_key);

1285  
n
;

1290 
ovs_key_icmpv6
 
icmpv6_key
;

1291 
n
 = -1;

1293 i‡(
	`ssˇnf
(
s
, "icmpv6—y≥=%"
SCNi8
",code=%"SCNi8")%n",

1294 &
icmpv6_key
.
icmpv6_ty≥
, &icmpv6_key.
icmpv6_code
,&
n
) > 0

1295 && 
n
 > 0) {

1296 
	`∆_msg_put_un•ec
(
key
, 
OVS_KEY_ATTR_ICMPV6
,

1297 &
icmpv6_key
,  icmpv6_key);

1298  
n
;

1303 
ovs_be32
 
¨p_sù
;

1304 
ovs_be32
 
¨p_tù
;

1305 
¨p_›
;

1306 
uöt8_t
 
¨p_sha
[
ETH_ADDR_LEN
];

1307 
uöt8_t
 
¨p_tha
[
ETH_ADDR_LEN
];

1308 
n
 = -1;

1310 i‡(
	`ssˇnf
(
s
, "¨p(sù="
IP_SCAN_FMT
",tip="IP_SCAN_FMT","

1311 "›=%i,sha="
ETH_ADDR_SCAN_FMT
",tha="ETH_ADDR_SCAN_FMT")%n",

1312 
	`IP_SCAN_ARGS
(&
¨p_sù
),

1313 
	`IP_SCAN_ARGS
(&
¨p_tù
),

1314 &
¨p_›
,

1315 
	`ETH_ADDR_SCAN_ARGS
(
¨p_sha
),

1316 
	`ETH_ADDR_SCAN_ARGS
(
¨p_tha
), &
n
) > 0 &&Ç > 0) {

1317 
ovs_key_¨p
 
¨p_key
;

1319 
	`mem£t
(&
¨p_key
, 0, árp_key);

1320 
¨p_key
.
¨p_sù
 =árp_sip;

1321 
¨p_key
.
¨p_tù
 =árp_tip;

1322 
¨p_key
.
¨p_›
 = 
	`ht⁄s
(arp_op);

1323 
	`mem˝y
(
¨p_key
.
¨p_sha
,áΩ_sha, 
ETH_ADDR_LEN
);

1324 
	`mem˝y
(
¨p_key
.
¨p_tha
,áΩ_tha, 
ETH_ADDR_LEN
);

1325 
	`∆_msg_put_un•ec
(
key
, 
OVS_KEY_ATTR_ARP
, &
¨p_key
, árp_key);

1326  
n
;

1331 
nd_èrgë_s
[
IPV6_SCAN_LEN
 + 1];

1332 
uöt8_t
 
nd_¶l
[
ETH_ADDR_LEN
];

1333 
uöt8_t
 
nd_él
[
ETH_ADDR_LEN
];

1334 
n
 = -1;

1336 i‡(
	`ssˇnf
(
s
, "nd—¨gë="
IPV6_SCAN_FMT
")%n",

1337 
nd_èrgë_s
, &
n
) > 0 &&Ç > 0) {

1338  
	`put_nd_key
(
n
, 
nd_èrgë_s
, 
NULL
, NULL, 
key
);

1340 i‡(
	`ssˇnf
(
s
, "nd—¨gë="
IPV6_SCAN_FMT
",¶l="
ETH_ADDR_SCAN_FMT
")%n",

1341 
nd_èrgë_s
, 
	`ETH_ADDR_SCAN_ARGS
(
nd_¶l
), &
n
) > 0

1342 && 
n
 > 0) {

1343  
	`put_nd_key
(
n
, 
nd_èrgë_s
, 
nd_¶l
, 
NULL
, 
key
);

1345 i‡(
	`ssˇnf
(
s
, "nd—¨gë="
IPV6_SCAN_FMT
",él="
ETH_ADDR_SCAN_FMT
")%n",

1346 
nd_èrgë_s
, 
	`ETH_ADDR_SCAN_ARGS
(
nd_él
), &
n
) > 0

1347 && 
n
 > 0) {

1348  
	`put_nd_key
(
n
, 
nd_èrgë_s
, 
NULL
, 
nd_él
, 
key
);

1350 i‡(
	`ssˇnf
(
s
, "nd—¨gë="
IPV6_SCAN_FMT
",¶l="
ETH_ADDR_SCAN_FMT
","

1351 "él="
ETH_ADDR_SCAN_FMT
")%n",

1352 
nd_èrgë_s
, 
	`ETH_ADDR_SCAN_ARGS
(
nd_¶l
),

1353 
	`ETH_ADDR_SCAN_ARGS
(
nd_él
), &
n
) > 0

1354 && 
n
 > 0) {

1355  
	`put_nd_key
(
n
, 
nd_èrgë_s
, 
nd_¶l
, 
nd_él
, 
key
);

1359 i‡(!
	`°∫cmp
(
s
, "encap(", 6)) {

1360 c⁄° *
°¨t
 = 
s
;

1361 
size_t
 
íˇp
;

1363 
íˇp
 = 
	`∆_msg_°¨t_√°ed
(
key
, 
OVS_KEY_ATTR_ENCAP
);

1365 
s
 += 6;

1367 
ªtvÆ
;

1369 
s
 +
	`°r•n
(s, ", \t\r\n");

1370 i‡(!*
s
) {

1371  -
EINVAL
;

1372 } i‡(*
s
 == ')') {

1376 
ªtvÆ
 = 
	`∑r£_odp_key_©å
(
s
, 
p‹t_«mes
, 
key
);

1377 i‡(
ªtvÆ
 < 0) {

1378  
ªtvÆ
;

1380 
s
 +
ªtvÆ
;

1382 
s
++;

1384 
	`∆_msg_íd_√°ed
(
key
, 
íˇp
);

1386  
s
 - 
°¨t
;

1389  -
EINVAL
;

1390 
	}
}

1407 
	$odp_Êow_key_‰om_°rög
(c⁄° *
s
, c⁄° 
sim≠
 *
p‹t_«mes
,

1408 
oÂbuf
 *
key
)

1410 c⁄° 
size_t
 
ﬁd_size
 = 
key
->
size
;

1412 
ªtvÆ
;

1414 
s
 +
	`°r•n
(s, 
dñimôîs
);

1415 i‡(!*
s
) {

1419 
ªtvÆ
 = 
	`∑r£_odp_key_©å
(
s
, 
p‹t_«mes
, 
key
);

1420 i‡(
ªtvÆ
 < 0) {

1421 
key
->
size
 = 
ﬁd_size
;

1422  -
ªtvÆ
;

1424 
s
 +
ªtvÆ
;

1428 
	}
}

1430 
uöt8_t


1431 
	$ovs_to_odp_‰ag
(
uöt8_t
 
nw_‰ag
)

1433  (
nw_‰ag
 =0 ? 
OVS_FRAG_TYPE_NONE


1434 : 
nw_‰ag
 =
FLOW_NW_FRAG_ANY
 ? 
OVS_FRAG_TYPE_FIRST


1435 : 
OVS_FRAG_TYPE_LATER
);

1436 
	}
}

1443 
	$odp_Êow_key_‰om_Êow
(
oÂbuf
 *
buf
, c⁄° 
Êow
 *flow)

1445 
ovs_key_ëhî√t
 *
ëh_key
;

1446 
size_t
 
íˇp
;

1448 i‡(
Êow
->
skb_¥i‹ôy
) {

1449 
	`∆_msg_put_u32
(
buf
, 
OVS_KEY_ATTR_PRIORITY
, 
Êow
->
skb_¥i‹ôy
);

1452 i‡(
Êow
->
tu¬ñ
.
tun_id
 !
	`ht⁄Œ
(0)) {

1453 
	`∆_msg_put_be64
(
buf
, 
OVS_KEY_ATTR_TUN_ID
, 
Êow
->
tu¬ñ
.
tun_id
);

1456 i‡(
Êow
->
skb_m¨k
) {

1457 
	`∆_msg_put_u32
(
buf
, 
OVS_KEY_ATTR_SKB_MARK
, 
Êow
->
skb_m¨k
);

1460 i‡(
Êow
->
ö_p‹t
 !
OFPP_NONE
 && flow->ö_p‹à!
OFPP_CONTROLLER
) {

1461 
	`∆_msg_put_u32
(
buf
, 
OVS_KEY_ATTR_IN_PORT
,

1462 
	`oÂ_p‹t_to_odp_p‹t
(
Êow
->
ö_p‹t
));

1465 
ëh_key
 = 
	`∆_msg_put_un•ec_unöô
(
buf
, 
OVS_KEY_ATTR_ETHERNET
,

1466  *
ëh_key
);

1467 
	`mem˝y
(
ëh_key
->
ëh_§c
, 
Êow
->
dl_§c
, 
ETH_ADDR_LEN
);

1468 
	`mem˝y
(
ëh_key
->
ëh_d°
, 
Êow
->
dl_d°
, 
ETH_ADDR_LEN
);

1470 i‡(
Êow
->
vœn_tci
 !
	`ht⁄s
(0Ë|| flow->
dl_ty≥
 =ht⁄s(
ETH_TYPE_VLAN
)) {

1471 
	`∆_msg_put_be16
(
buf
, 
OVS_KEY_ATTR_ETHERTYPE
, 
	`ht⁄s
(
ETH_TYPE_VLAN
));

1472 
	`∆_msg_put_be16
(
buf
, 
OVS_KEY_ATTR_VLAN
, 
Êow
->
vœn_tci
);

1473 
íˇp
 = 
	`∆_msg_°¨t_√°ed
(
buf
, 
OVS_KEY_ATTR_ENCAP
);

1474 i‡(
Êow
->
vœn_tci
 =
	`ht⁄s
(0)) {

1475 
u√nˇp
;

1478 
íˇp
 = 0;

1481 i‡(
	`¡ohs
(
Êow
->
dl_ty≥
Ë< 
ETH_TYPE_MIN
) {

1482 
u√nˇp
;

1485 
	`∆_msg_put_be16
(
buf
, 
OVS_KEY_ATTR_ETHERTYPE
, 
Êow
->
dl_ty≥
);

1487 i‡(
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IP
)) {

1488 
ovs_key_ùv4
 *
ùv4_key
;

1490 
ùv4_key
 = 
	`∆_msg_put_un•ec_unöô
(
buf
, 
OVS_KEY_ATTR_IPV4
,

1491  *
ùv4_key
);

1492 
ùv4_key
->
ùv4_§c
 = 
Êow
->
nw_§c
;

1493 
ùv4_key
->
ùv4_d°
 = 
Êow
->
nw_d°
;

1494 
ùv4_key
->
ùv4_¥Ÿo
 = 
Êow
->
nw_¥Ÿo
;

1495 
ùv4_key
->
ùv4_tos
 = 
Êow
->
nw_tos
;

1496 
ùv4_key
->
ùv4_âl
 = 
Êow
->
nw_âl
;

1497 
ùv4_key
->
ùv4_‰ag
 = 
	`ovs_to_odp_‰ag
(
Êow
->
nw_‰ag
);

1498 } i‡(
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IPV6
)) {

1499 
ovs_key_ùv6
 *
ùv6_key
;

1501 
ùv6_key
 = 
	`∆_msg_put_un•ec_unöô
(
buf
, 
OVS_KEY_ATTR_IPV6
,

1502  *
ùv6_key
);

1503 
	`mem˝y
(
ùv6_key
->
ùv6_§c
, &
Êow
->ipv6_src,  ipv6_key->ipv6_src);

1504 
	`mem˝y
(
ùv6_key
->
ùv6_d°
, &
Êow
->ipv6_dst,  ipv6_key->ipv6_dst);

1505 
ùv6_key
->
ùv6_œbñ
 = 
Êow
->ipv6_label;

1506 
ùv6_key
->
ùv6_¥Ÿo
 = 
Êow
->
nw_¥Ÿo
;

1507 
ùv6_key
->
ùv6_t˛ass
 = 
Êow
->
nw_tos
;

1508 
ùv6_key
->
ùv6_hlimô
 = 
Êow
->
nw_âl
;

1509 
ùv6_key
->
ùv6_‰ag
 = 
	`ovs_to_odp_‰ag
(
Êow
->
nw_‰ag
);

1510 } i‡(
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_ARP
) ||

1511 
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_RARP
)) {

1512 
ovs_key_¨p
 *
¨p_key
;

1514 
¨p_key
 = 
	`∆_msg_put_un•ec_unöô
(
buf
, 
OVS_KEY_ATTR_ARP
,

1515  *
¨p_key
);

1516 
	`mem£t
(
¨p_key
, 0,  *arp_key);

1517 
¨p_key
->
¨p_sù
 = 
Êow
->
nw_§c
;

1518 
¨p_key
->
¨p_tù
 = 
Êow
->
nw_d°
;

1519 
¨p_key
->
¨p_›
 = 
	`ht⁄s
(
Êow
->
nw_¥Ÿo
);

1520 
	`mem˝y
(
¨p_key
->
¨p_sha
, 
Êow
->¨p_sha, 
ETH_ADDR_LEN
);

1521 
	`mem˝y
(
¨p_key
->
¨p_tha
, 
Êow
->¨p_tha, 
ETH_ADDR_LEN
);

1524 i‡((
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IP
)

1525 || 
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IPV6
))

1526 && !(
Êow
->
nw_‰ag
 & 
FLOW_NW_FRAG_LATER
)) {

1528 i‡(
Êow
->
nw_¥Ÿo
 =
IPPROTO_TCP
) {

1529 
ovs_key_t˝
 *
t˝_key
;

1531 
t˝_key
 = 
	`∆_msg_put_un•ec_unöô
(
buf
, 
OVS_KEY_ATTR_TCP
,

1532  *
t˝_key
);

1533 
t˝_key
->
t˝_§c
 = 
Êow
->
ç_§c
;

1534 
t˝_key
->
t˝_d°
 = 
Êow
->
ç_d°
;

1535 } i‡(
Êow
->
nw_¥Ÿo
 =
IPPROTO_UDP
) {

1536 
ovs_key_udp
 *
udp_key
;

1538 
udp_key
 = 
	`∆_msg_put_un•ec_unöô
(
buf
, 
OVS_KEY_ATTR_UDP
,

1539  *
udp_key
);

1540 
udp_key
->
udp_§c
 = 
Êow
->
ç_§c
;

1541 
udp_key
->
udp_d°
 = 
Êow
->
ç_d°
;

1542 } i‡(
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IP
)

1543 && 
Êow
->
nw_¥Ÿo
 =
IPPROTO_ICMP
) {

1544 
ovs_key_icmp
 *
icmp_key
;

1546 
icmp_key
 = 
	`∆_msg_put_un•ec_unöô
(
buf
, 
OVS_KEY_ATTR_ICMP
,

1547  *
icmp_key
);

1548 
icmp_key
->
icmp_ty≥
 = 
	`¡ohs
(
Êow
->
ç_§c
);

1549 
icmp_key
->
icmp_code
 = 
	`¡ohs
(
Êow
->
ç_d°
);

1550 } i‡(
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IPV6
)

1551 && 
Êow
->
nw_¥Ÿo
 =
IPPROTO_ICMPV6
) {

1552 
ovs_key_icmpv6
 *
icmpv6_key
;

1554 
icmpv6_key
 = 
	`∆_msg_put_un•ec_unöô
(
buf
, 
OVS_KEY_ATTR_ICMPV6
,

1555  *
icmpv6_key
);

1556 
icmpv6_key
->
icmpv6_ty≥
 = 
	`¡ohs
(
Êow
->
ç_§c
);

1557 
icmpv6_key
->
icmpv6_code
 = 
	`¡ohs
(
Êow
->
ç_d°
);

1559 i‡(
icmpv6_key
->
icmpv6_ty≥
 =
ND_NEIGHBOR_SOLICIT


1560 || 
icmpv6_key
->
icmpv6_ty≥
 =
ND_NEIGHBOR_ADVERT
) {

1561 
ovs_key_nd
 *
nd_key
;

1563 
nd_key
 = 
	`∆_msg_put_un•ec_unöô
(
buf
, 
OVS_KEY_ATTR_ND
,

1564  *
nd_key
);

1565 
	`mem˝y
(
nd_key
->
nd_èrgë
, &
Êow
->nd_target,

1566  
nd_key
->
nd_èrgë
);

1567 
	`mem˝y
(
nd_key
->
nd_¶l
, 
Êow
->
¨p_sha
, 
ETH_ADDR_LEN
);

1568 
	`mem˝y
(
nd_key
->
nd_él
, 
Êow
->
¨p_tha
, 
ETH_ADDR_LEN
);

1573 
u√nˇp
:

1574 i‡(
íˇp
) {

1575 
	`∆_msg_íd_√°ed
(
buf
, 
íˇp
);

1577 
	}
}

1579 
uöt32_t


1580 
	$odp_Êow_key_hash
(c⁄° 
∆©å
 *
key
, 
size_t
 
key_Àn
)

1582 
	`BUILD_ASSERT_DECL
(!(
NLA_ALIGNTO
 % (
uöt32_t
)));

1583  
	`hash_w‹ds
((c⁄° 
uöt32_t
 *Ë
key
, 
key_Àn
 / (uint32_t), 0);

1584 
	}
}

1587 
	$log_odp_key_©åibuãs
(
vlog_øã_limô
 *
æ
, c⁄° *
tôÀ
,

1588 
uöt64_t
 
©ås
, 
out_of_ønge_©å
,

1589 c⁄° 
∆©å
 *
key
, 
size_t
 
key_Àn
)

1591 
ds
 
s
;

1592 
i
;

1594 i‡(
	`VLOG_DROP_DBG
(
æ
)) {

1598 
	`ds_öô
(&
s
);

1599 
i
 = 0; i < 64; i++) {

1600 i‡(
©ås
 & (
	`UINT64_C
(1Ë<< 
i
)) {

1601 
	`ds_put_f‹m©
(&
s
, " %s", 
	`ovs_key_©å_to_°rög
(
i
));

1604 i‡(
out_of_ønge_©å
) {

1605 
	`ds_put_f‹m©
(&
s
, " %d (™dÖossibly othîs)", 
out_of_ønge_©å
);

1608 
	`ds_put_c°r
(&
s
, ": ");

1609 
	`odp_Êow_key_f‹m©
(
key
, 
key_Àn
, &
s
);

1611 
	`VLOG_DBG
("%s:%s", 
tôÀ
, 
	`ds_c°r
(&
s
));

1612 
	`ds_de°roy
(&
s
);

1613 
	}
}

1615 
boﬁ


1616 
	$odp_to_ovs_‰ag
(
uöt8_t
 
odp_‰ag
, 
Êow
 *flow)

1618 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 5);

1620 i‡(
odp_‰ag
 > 
OVS_FRAG_TYPE_LATER
) {

1621 
	`VLOG_ERR_RL
(&
æ
, "övÆid føg %"
PRIu8
" i¿Êow key", 
odp_‰ag
);

1622  
Ál£
;

1625 i‡(
odp_‰ag
 !
OVS_FRAG_TYPE_NONE
) {

1626 
Êow
->
nw_‰ag
 |
FLOW_NW_FRAG_ANY
;

1627 i‡(
odp_‰ag
 =
OVS_FRAG_TYPE_LATER
) {

1628 
Êow
->
nw_‰ag
 |
FLOW_NW_FRAG_LATER
;

1631  
åue
;

1632 
	}
}

1634 
boﬁ


1635 
	$∑r£_Êow_∆©ås
(c⁄° 
∆©å
 *
key
, 
size_t
 
key_Àn
,

1636 c⁄° 
∆©å
 *
©ås
[], 
uöt64_t
 *
¥e£¡_©å•
,

1637 *
out_of_ønge_©åp
)

1639 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(10, 10);

1640 c⁄° 
∆©å
 *
∆a
;

1641 
uöt64_t
 
¥e£¡_©ås
;

1642 
size_t
 
À·
;

1644 
¥e£¡_©ås
 = 0;

1645 *
out_of_ønge_©åp
 = 0;

1646 
	`NL_ATTR_FOR_EACH
 (
∆a
, 
À·
, 
key
, 
key_Àn
) {

1647 
uöt16_t
 
ty≥
 = 
	`∆_©å_ty≥
(
∆a
);

1648 
size_t
 
Àn
 = 
	`∆_©å_gë_size
(
∆a
);

1649 
ex≥˘ed_Àn
 = 
	`odp_Êow_key_©å_Àn
(
ty≥
);

1651 i‡(
Àn
 !
ex≥˘ed_Àn
 &&Éxpected_len >= 0) {

1652 
	`VLOG_ERR_RL
(&
æ
, "attribute %s hasÜength %zu but should have "

1653 "Àngth %d", 
	`ovs_key_©å_to_°rög
(
ty≥
),

1654 
Àn
, 
ex≥˘ed_Àn
);

1655  
Ál£
;

1658 i‡(
ty≥
 >
CHAR_BIT
 *  
¥e£¡_©ås
) {

1659 *
out_of_ønge_©åp
 = 
ty≥
;

1661 i‡(
¥e£¡_©ås
 & (
	`UINT64_C
(1Ë<< 
ty≥
)) {

1662 
	`VLOG_ERR_RL
(&
æ
, "duplicate %sáttribute in flow key",

1663 
	`ovs_key_©å_to_°rög
(
ty≥
));

1664  
Ál£
;

1667 
¥e£¡_©ås
 |
	`UINT64_C
(1Ë<< 
ty≥
;

1668 
©ås
[
ty≥
] = 
∆a
;

1671 i‡(
À·
) {

1672 
	`VLOG_ERR_RL
(&
æ
, "trailing garbage in flow key");

1673  
Ál£
;

1676 *
¥e£¡_©å•
 = 
¥e£¡_©ås
;

1677  
åue
;

1678 
	}
}

1680 
odp_key_fô√ss


1681 
	$check_ex≥˘©i⁄s
(
uöt64_t
 
¥e£¡_©ås
, 
out_of_ønge_©å
,

1682 
uöt64_t
 
ex≥˘ed_©ås
,

1683 c⁄° 
∆©å
 *
key
, 
size_t
 
key_Àn
)

1685 
uöt64_t
 
missög_©ås
;

1686 
uöt64_t
 
exåa_©ås
;

1688 
missög_©ås
 = 
ex≥˘ed_©ås
 & ~
¥e£¡_©ås
;

1689 i‡(
missög_©ås
) {

1690 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(10, 10);

1691 
	`log_odp_key_©åibuãs
(&
æ
, "expected butÇotÖresent",

1692 
missög_©ås
, 0, 
key
, 
key_Àn
);

1693  
ODP_FIT_TOO_LITTLE
;

1696 
exåa_©ås
 = 
¥e£¡_©ås
 & ~
ex≥˘ed_©ås
;

1697 i‡(
exåa_©ås
 || 
out_of_ønge_©å
) {

1698 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(10, 10);

1699 
	`log_odp_key_©åibuãs
(&
æ
, "present butÇotÉxpected",

1700 
exåa_©ås
, 
out_of_ønge_©å
, 
key
, 
key_Àn
);

1701  
ODP_FIT_TOO_MUCH
;

1704  
ODP_FIT_PERFECT
;

1705 
	}
}

1707 
boﬁ


1708 
∑r£_ëhîty≥
(c⁄° 
∆©å
 *
©ås
[
OVS_KEY_ATTR_MAX
 + 1],

1709 
uöt64_t
 
¥e£¡_©ås
, uöt64_à*
ex≥˘ed_©ås
,

1710 
Êow
 *flow)

1712 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(1, 5);

1714 i‡(
	g¥e£¡_©ås
 & (
UINT64_C
(1Ë<< 
	gOVS_KEY_ATTR_ETHERTYPE
)) {

1715 
	gÊow
->
	gdl_ty≥
 = 
∆_©å_gë_be16
(
©ås
[
OVS_KEY_ATTR_ETHERTYPE
]);

1716 i‡(
¡ohs
(
Êow
->
dl_ty≥
) < 1536) {

1717 
VLOG_ERR_RL
(&
æ
, "övÆid Ethîty≥ %"
PRIu16
" in flow key",

1718 
¡ohs
(
Êow
->
dl_ty≥
));

1719  
	gÁl£
;

1721 *
	gex≥˘ed_©ås
 |
UINT64_C
(1Ë<< 
OVS_KEY_ATTR_ETHERTYPE
;

1723 
	gÊow
->
	gdl_ty≥
 = 
ht⁄s
(
FLOW_DL_TYPE_NONE
);

1725  
	gåue
;

1728 
odp_key_fô√ss


1729 
∑r£_l3_⁄w¨d
(c⁄° 
∆©å
 *
©ås
[
OVS_KEY_ATTR_MAX
 + 1],

1730 
uöt64_t
 
¥e£¡_©ås
, 
out_of_ønge_©å
,

1731 
uöt64_t
 
ex≥˘ed_©ås
, 
Êow
 *flow,

1732 c⁄° 
∆©å
 *
key
, 
size_t
 
key_Àn
)

1734 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(1, 5);

1736 i‡(
	gÊow
->
	gdl_ty≥
 =
ht⁄s
(
ETH_TYPE_IP
)) {

1737 
ex≥˘ed_©ås
 |
UINT64_C
(1Ë<< 
OVS_KEY_ATTR_IPV4
;

1738 i‡(
	g¥e£¡_©ås
 & (
UINT64_C
(1Ë<< 
	gOVS_KEY_ATTR_IPV4
)) {

1739 c⁄° 
ovs_key_ùv4
 *
	gùv4_key
;

1741 
	gùv4_key
 = 
∆_©å_gë
(
©ås
[
OVS_KEY_ATTR_IPV4
]);

1742 
	gÊow
->
	gnw_§c
 = 
ùv4_key
->
ùv4_§c
;

1743 
	gÊow
->
	gnw_d°
 = 
ùv4_key
->
ùv4_d°
;

1744 
	gÊow
->
	gnw_¥Ÿo
 = 
ùv4_key
->
ùv4_¥Ÿo
;

1745 
	gÊow
->
	gnw_tos
 = 
ùv4_key
->
ùv4_tos
;

1746 
	gÊow
->
	gnw_âl
 = 
ùv4_key
->
ùv4_âl
;

1747 i‡(!
odp_to_ovs_‰ag
(
ùv4_key
->
ùv4_‰ag
, 
Êow
)) {

1748  
	gODP_FIT_ERROR
;

1751 } i‡(
	gÊow
->
	gdl_ty≥
 =
ht⁄s
(
ETH_TYPE_IPV6
)) {

1752 
ex≥˘ed_©ås
 |
UINT64_C
(1Ë<< 
OVS_KEY_ATTR_IPV6
;

1753 i‡(
	g¥e£¡_©ås
 & (
UINT64_C
(1Ë<< 
	gOVS_KEY_ATTR_IPV6
)) {

1754 c⁄° 
ovs_key_ùv6
 *
	gùv6_key
;

1756 
	gùv6_key
 = 
∆_©å_gë
(
©ås
[
OVS_KEY_ATTR_IPV6
]);

1757 
mem˝y
(&
Êow
->
ùv6_§c
, 
ùv6_key
->ipv6_src,  flow->ipv6_src);

1758 
mem˝y
(&
Êow
->
ùv6_d°
, 
ùv6_key
->ipv6_dst,  flow->ipv6_dst);

1759 
	gÊow
->
	gùv6_œbñ
 = 
ùv6_key
->
ùv6_œbñ
;

1760 
	gÊow
->
	gnw_¥Ÿo
 = 
ùv6_key
->
ùv6_¥Ÿo
;

1761 
	gÊow
->
	gnw_tos
 = 
ùv6_key
->
ùv6_t˛ass
;

1762 
	gÊow
->
	gnw_âl
 = 
ùv6_key
->
ùv6_hlimô
;

1763 i‡(!
odp_to_ovs_‰ag
(
ùv6_key
->
ùv6_‰ag
, 
Êow
)) {

1764  
	gODP_FIT_ERROR
;

1767 } i‡(
	gÊow
->
	gdl_ty≥
 =
ht⁄s
(
ETH_TYPE_ARP
) ||

1768 
Êow
->
dl_ty≥
 =
ht⁄s
(
ETH_TYPE_RARP
)) {

1769 
ex≥˘ed_©ås
 |
UINT64_C
(1Ë<< 
OVS_KEY_ATTR_ARP
;

1770 i‡(
	g¥e£¡_©ås
 & (
UINT64_C
(1Ë<< 
	gOVS_KEY_ATTR_ARP
)) {

1771 c⁄° 
ovs_key_¨p
 *
	g¨p_key
;

1773 
	g¨p_key
 = 
∆_©å_gë
(
©ås
[
OVS_KEY_ATTR_ARP
]);

1774 
	gÊow
->
	gnw_§c
 = 
¨p_key
->
¨p_sù
;

1775 
	gÊow
->
	gnw_d°
 = 
¨p_key
->
¨p_tù
;

1776 i‡(
	g¨p_key
->
	g¨p_›
 & 
ht⁄s
(0xff00)) {

1777 
VLOG_ERR_RL
(&
æ
, "unsuµ‹ãd ARP opcodê%"
PRIu16
" in flow "

1778 "key", 
¡ohs
(
¨p_key
->
¨p_›
));

1779  
	gODP_FIT_ERROR
;

1781 
	gÊow
->
	gnw_¥Ÿo
 = 
¡ohs
(
¨p_key
->
¨p_›
);

1782 
mem˝y
(
Êow
->
¨p_sha
, 
¨p_key
->¨p_sha, 
ETH_ADDR_LEN
);

1783 
mem˝y
(
Êow
->
¨p_tha
, 
¨p_key
->¨p_tha, 
ETH_ADDR_LEN
);

1787 i‡(
	gÊow
->
	gnw_¥Ÿo
 =
IPPROTO_TCP


1788 && (
Êow
->
dl_ty≥
 =
ht⁄s
(
ETH_TYPE_IP
) ||

1789 
Êow
->
dl_ty≥
 =
ht⁄s
(
ETH_TYPE_IPV6
))

1790 && !(
Êow
->
nw_‰ag
 & 
FLOW_NW_FRAG_LATER
)) {

1791 
ex≥˘ed_©ås
 |
UINT64_C
(1Ë<< 
OVS_KEY_ATTR_TCP
;

1792 i‡(
	g¥e£¡_©ås
 & (
UINT64_C
(1Ë<< 
	gOVS_KEY_ATTR_TCP
)) {

1793 c⁄° 
ovs_key_t˝
 *
	gt˝_key
;

1795 
	gt˝_key
 = 
∆_©å_gë
(
©ås
[
OVS_KEY_ATTR_TCP
]);

1796 
	gÊow
->
	gç_§c
 = 
t˝_key
->
t˝_§c
;

1797 
	gÊow
->
	gç_d°
 = 
t˝_key
->
t˝_d°
;

1799 } i‡(
	gÊow
->
	gnw_¥Ÿo
 =
IPPROTO_UDP


1800 && (
Êow
->
dl_ty≥
 =
ht⁄s
(
ETH_TYPE_IP
) ||

1801 
Êow
->
dl_ty≥
 =
ht⁄s
(
ETH_TYPE_IPV6
))

1802 && !(
Êow
->
nw_‰ag
 & 
FLOW_NW_FRAG_LATER
)) {

1803 
ex≥˘ed_©ås
 |
UINT64_C
(1Ë<< 
OVS_KEY_ATTR_UDP
;

1804 i‡(
	g¥e£¡_©ås
 & (
UINT64_C
(1Ë<< 
	gOVS_KEY_ATTR_UDP
)) {

1805 c⁄° 
ovs_key_udp
 *
	gudp_key
;

1807 
	gudp_key
 = 
∆_©å_gë
(
©ås
[
OVS_KEY_ATTR_UDP
]);

1808 
	gÊow
->
	gç_§c
 = 
udp_key
->
udp_§c
;

1809 
	gÊow
->
	gç_d°
 = 
udp_key
->
udp_d°
;

1811 } i‡(
	gÊow
->
	gnw_¥Ÿo
 =
IPPROTO_ICMP


1812 && 
Êow
->
dl_ty≥
 =
ht⁄s
(
ETH_TYPE_IP
)

1813 && !(
Êow
->
nw_‰ag
 & 
FLOW_NW_FRAG_LATER
)) {

1814 
ex≥˘ed_©ås
 |
UINT64_C
(1Ë<< 
OVS_KEY_ATTR_ICMP
;

1815 i‡(
	g¥e£¡_©ås
 & (
UINT64_C
(1Ë<< 
	gOVS_KEY_ATTR_ICMP
)) {

1816 c⁄° 
ovs_key_icmp
 *
	gicmp_key
;

1818 
	gicmp_key
 = 
∆_©å_gë
(
©ås
[
OVS_KEY_ATTR_ICMP
]);

1819 
	gÊow
->
	gç_§c
 = 
ht⁄s
(
icmp_key
->
icmp_ty≥
);

1820 
	gÊow
->
	gç_d°
 = 
ht⁄s
(
icmp_key
->
icmp_code
);

1822 } i‡(
	gÊow
->
	gnw_¥Ÿo
 =
IPPROTO_ICMPV6


1823 && 
Êow
->
dl_ty≥
 =
ht⁄s
(
ETH_TYPE_IPV6
)

1824 && !(
Êow
->
nw_‰ag
 & 
FLOW_NW_FRAG_LATER
)) {

1825 
ex≥˘ed_©ås
 |
UINT64_C
(1Ë<< 
OVS_KEY_ATTR_ICMPV6
;

1826 i‡(
	g¥e£¡_©ås
 & (
UINT64_C
(1Ë<< 
	gOVS_KEY_ATTR_ICMPV6
)) {

1827 c⁄° 
ovs_key_icmpv6
 *
	gicmpv6_key
;

1829 
	gicmpv6_key
 = 
∆_©å_gë
(
©ås
[
OVS_KEY_ATTR_ICMPV6
]);

1830 
	gÊow
->
	gç_§c
 = 
ht⁄s
(
icmpv6_key
->
icmpv6_ty≥
);

1831 
	gÊow
->
	gç_d°
 = 
ht⁄s
(
icmpv6_key
->
icmpv6_code
);

1833 i‡(
	gÊow
->
	gç_§c
 =
ht⁄s
(
ND_NEIGHBOR_SOLICIT
) ||

1834 
Êow
->
ç_§c
 =
ht⁄s
(
ND_NEIGHBOR_ADVERT
)) {

1835 
ex≥˘ed_©ås
 |
UINT64_C
(1Ë<< 
OVS_KEY_ATTR_ND
;

1836 i‡(
	g¥e£¡_©ås
 & (
UINT64_C
(1Ë<< 
	gOVS_KEY_ATTR_ND
)) {

1837 c⁄° 
ovs_key_nd
 *
	gnd_key
;

1839 
	gnd_key
 = 
∆_©å_gë
(
©ås
[
OVS_KEY_ATTR_ND
]);

1840 
mem˝y
(&
Êow
->
nd_èrgë
, 
nd_key
->nd_target,

1841  
Êow
->
nd_èrgë
);

1842 
mem˝y
(
Êow
->
¨p_sha
, 
nd_key
->
nd_¶l
, 
ETH_ADDR_LEN
);

1843 
mem˝y
(
Êow
->
¨p_tha
, 
nd_key
->
nd_él
, 
ETH_ADDR_LEN
);

1849  
check_ex≥˘©i⁄s
(
¥e£¡_©ås
, 
out_of_ønge_©å
, 
ex≥˘ed_©ås
,

1850 
key
, 
key_Àn
);

1854 
odp_key_fô√ss


1855 
∑r£_8021q_⁄w¨d
(c⁄° 
∆©å
 *
©ås
[
OVS_KEY_ATTR_MAX
 + 1],

1856 
uöt64_t
 
¥e£¡_©ås
, 
out_of_ønge_©å
,

1857 
uöt64_t
 
ex≥˘ed_©ås
, 
Êow
 *flow,

1858 c⁄° 
∆©å
 *
key
, 
size_t
 
key_Àn
)

1860 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(1, 5);

1862 c⁄° 
∆©å
 *
	gíˇp


1863 (
¥e£¡_©ås
 & (
UINT64_C
(1Ë<< 
OVS_KEY_ATTR_ENCAP
)

1864 ? 
©ås
[
OVS_KEY_ATTR_ENCAP
] : 
NULL
);

1865 
odp_key_fô√ss
 
	gíˇp_fô√ss
;

1866 
odp_key_fô√ss
 
	gfô√ss
;

1867 
ovs_be16
 
	gtci
;

1870 
	gex≥˘ed_©ås
 |((
UINT64_C
(1Ë<< 
OVS_KEY_ATTR_VLAN
) |

1871 (
UINT64_C
(1Ë<< 
OVS_KEY_ATTR_ENCAP
));

1872 
	gfô√ss
 = 
check_ex≥˘©i⁄s
(
¥e£¡_©ås
, 
out_of_ønge_©å
,

1873 
ex≥˘ed_©ås
, 
key
, 
key_Àn
);

1876 i‡(!(
	g¥e£¡_©ås
 & (
UINT64_C
(1Ë<< 
	gOVS_KEY_ATTR_VLAN
))) {

1877  
	gODP_FIT_TOO_LITTLE
;

1879 
	gtci
 = 
∆_©å_gë_be16
(
©ås
[
OVS_KEY_ATTR_VLAN
]);

1880 i‡(
	gtci
 =
ht⁄s
(0)) {

1882 i‡(
fô√ss
 =
ODP_FIT_PERFECT
 && 
∆_©å_gë_size
(
íˇp
)) {

1883  
ODP_FIT_TOO_MUCH
;

1885  
	gfô√ss
;

1886 } i‡(!(
	gtci
 & 
ht⁄s
(
VLAN_CFI
))) {

1887 
VLOG_ERR_RL
(&
æ
, "OVS_KEY_ATTR_VLAN 0x%04"
PRIx16
" isÇonzero "

1888 "buàCFI bô i†nŸ së", 
¡ohs
(
tci
));

1889  
	gODP_FIT_ERROR
;

1894 
	gÊow
->
	gvœn_tci
 = 
tci
;

1895 
	gÊow
->
	gdl_ty≥
 = 
ht⁄s
(0);

1898 i‡(!
∑r£_Êow_∆©ås
(
∆_©å_gë
(
íˇp
), 
∆_©å_gë_size
(encap),

1899 
©ås
, &
¥e£¡_©ås
, &
out_of_ønge_©å
)) {

1900  
	gODP_FIT_ERROR
;

1902 
	gex≥˘ed_©ås
 = 0;

1904 i‡(!
∑r£_ëhîty≥
(
©ås
, 
¥e£¡_©ås
, &
ex≥˘ed_©ås
, 
Êow
)) {

1905  
	gODP_FIT_ERROR
;

1907 
	gíˇp_fô√ss
 = 
∑r£_l3_⁄w¨d
(
©ås
, 
¥e£¡_©ås
, 
out_of_ønge_©å
,

1908 
ex≥˘ed_©ås
, 
Êow
, 
key
, 
key_Àn
);

1911  
MAX
(
fô√ss
, 
íˇp_fô√ss
);

1925 
odp_key_fô√ss


1926 
	$odp_Êow_key_to_Êow
(c⁄° 
∆©å
 *
key
, 
size_t
 
key_Àn
,

1927 
Êow
 *flow)

1929 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 5);

1930 c⁄° 
∆©å
 *
©ås
[
OVS_KEY_ATTR_MAX
 + 1];

1931 
uöt64_t
 
ex≥˘ed_©ås
;

1932 
uöt64_t
 
¥e£¡_©ås
;

1933 
out_of_ønge_©å
;

1935 
	`mem£t
(
Êow
, 0,  *flow);

1938 i‡(!
	`∑r£_Êow_∆©ås
(
key
, 
key_Àn
, 
©ås
, &
¥e£¡_©ås
,

1939 &
out_of_ønge_©å
)) {

1940  
ODP_FIT_ERROR
;

1942 
ex≥˘ed_©ås
 = 0;

1945 i‡(
¥e£¡_©ås
 & (
	`UINT64_C
(1Ë<< 
OVS_KEY_ATTR_PRIORITY
)) {

1946 
Êow
->
skb_¥i‹ôy
 = 
	`∆_©å_gë_u32
(
©ås
[
OVS_KEY_ATTR_PRIORITY
]);

1947 
ex≥˘ed_©ås
 |
	`UINT64_C
(1Ë<< 
OVS_KEY_ATTR_PRIORITY
;

1950 i‡(
¥e£¡_©ås
 & (
	`UINT64_C
(1Ë<< 
OVS_KEY_ATTR_SKB_MARK
)) {

1951 
Êow
->
skb_m¨k
 = 
	`∆_©å_gë_u32
(
©ås
[
OVS_KEY_ATTR_SKB_MARK
]);

1952 
ex≥˘ed_©ås
 |
	`UINT64_C
(1Ë<< 
OVS_KEY_ATTR_SKB_MARK
;

1955 i‡(
¥e£¡_©ås
 & (
	`UINT64_C
(1Ë<< 
OVS_KEY_ATTR_TUN_ID
)) {

1956 
Êow
->
tu¬ñ
.
tun_id
 = 
	`∆_©å_gë_be64
(
©ås
[
OVS_KEY_ATTR_TUN_ID
]);

1957 
ex≥˘ed_©ås
 |
	`UINT64_C
(1Ë<< 
OVS_KEY_ATTR_TUN_ID
;

1960 i‡(
¥e£¡_©ås
 & (
	`UINT64_C
(1Ë<< 
OVS_KEY_ATTR_IN_PORT
)) {

1961 
uöt32_t
 
ö_p‹t
 = 
	`∆_©å_gë_u32
(
©ås
[
OVS_KEY_ATTR_IN_PORT
]);

1962 i‡(
ö_p‹t
 >
UINT16_MAX
 || in_p‹à>
OFPP_MAX
) {

1963 
	`VLOG_ERR_RL
(&
æ
, "ö_p‹à%"
PRIu32
" out of supportedÑange",

1964 
ö_p‹t
);

1965  
ODP_FIT_ERROR
;

1967 
Êow
->
ö_p‹t
 = 
	`odp_p‹t_to_oÂ_p‹t
(in_port);

1968 
ex≥˘ed_©ås
 |
	`UINT64_C
(1Ë<< 
OVS_KEY_ATTR_IN_PORT
;

1970 
Êow
->
ö_p‹t
 = 
OFPP_NONE
;

1974 i‡(
¥e£¡_©ås
 & (
	`UINT64_C
(1Ë<< 
OVS_KEY_ATTR_ETHERNET
)) {

1975 c⁄° 
ovs_key_ëhî√t
 *
ëh_key
;

1977 
ëh_key
 = 
	`∆_©å_gë
(
©ås
[
OVS_KEY_ATTR_ETHERNET
]);

1978 
	`mem˝y
(
Êow
->
dl_§c
, 
ëh_key
->
ëh_§c
, 
ETH_ADDR_LEN
);

1979 
	`mem˝y
(
Êow
->
dl_d°
, 
ëh_key
->
ëh_d°
, 
ETH_ADDR_LEN
);

1981 
ex≥˘ed_©ås
 |
	`UINT64_C
(1Ë<< 
OVS_KEY_ATTR_ETHERNET
;

1984 i‡(!
	`∑r£_ëhîty≥
(
©ås
, 
¥e£¡_©ås
, &
ex≥˘ed_©ås
, 
Êow
)) {

1985  
ODP_FIT_ERROR
;

1988 i‡(
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_VLAN
)) {

1989  
	`∑r£_8021q_⁄w¨d
(
©ås
, 
¥e£¡_©ås
, 
out_of_ønge_©å
,

1990 
ex≥˘ed_©ås
, 
Êow
, 
key
, 
key_Àn
);

1992  
	`∑r£_l3_⁄w¨d
(
©ås
, 
¥e£¡_©ås
, 
out_of_ønge_©å
,

1993 
ex≥˘ed_©ås
, 
Êow
, 
key
, 
key_Àn
);

1994 
	}
}

1998 
	$odp_key_fô√ss_to_°rög
(
odp_key_fô√ss
 
fô√ss
)

2000 
fô√ss
) {

2001 
ODP_FIT_PERFECT
:

2003 
ODP_FIT_TOO_MUCH
:

2005 
ODP_FIT_TOO_LITTLE
:

2007 
ODP_FIT_ERROR
:

2012 
	}
}

2019 
size_t


2020 
	$odp_put_u£r•a˚_a˘i⁄
(
uöt32_t
 
pid
, c⁄° 
u£r_a˘i⁄_cookõ
 *
cookõ
,

2021 
oÂbuf
 *
odp_a˘i⁄s
)

2023 
size_t
 
off£t
;

2025 
off£t
 = 
	`∆_msg_°¨t_√°ed
(
odp_a˘i⁄s
, 
OVS_ACTION_ATTR_USERSPACE
);

2026 
	`∆_msg_put_u32
(
odp_a˘i⁄s
, 
OVS_USERSPACE_ATTR_PID
, 
pid
);

2027 i‡(
cookõ
) {

2028 
	`∆_msg_put_un•ec
(
odp_a˘i⁄s
, 
OVS_USERSPACE_ATTR_USERDATA
,

2029 
cookõ
,  *cookie);

2031 
	`∆_msg_íd_√°ed
(
odp_a˘i⁄s
, 
off£t
);

2033  
cookõ
 ? 
odp_a˘i⁄s
->
size
 - 
	`NLA_ALIGN
( *cookie) : 0;

2034 
	}
}

2039 
	$commô_£t_a˘i⁄
(
oÂbuf
 *
odp_a˘i⁄s
, 
ovs_key_©å
 
key_ty≥
,

2040 c⁄° *
key
, 
size_t
 
key_size
)

2042 
size_t
 
off£t
 = 
	`∆_msg_°¨t_√°ed
(
odp_a˘i⁄s
, 
OVS_ACTION_ATTR_SET
);

2043 
	`∆_msg_put_un•ec
(
odp_a˘i⁄s
, 
key_ty≥
, 
key
, 
key_size
);

2044 
	`∆_msg_íd_√°ed
(
odp_a˘i⁄s
, 
off£t
);

2045 
	}
}

2048 
	$commô_£t_tun_id_a˘i⁄
(c⁄° 
Êow
 *Êow, Êow *
ba£
,

2049 
oÂbuf
 *
odp_a˘i⁄s
)

2051 i‡(
ba£
->
tu¬ñ
.
tun_id
 =
Êow
->tunnel.tun_id) {

2054 
ba£
->
tu¬ñ
.
tun_id
 = 
Êow
->tunnel.tun_id;

2056 
	`commô_£t_a˘i⁄
(
odp_a˘i⁄s
, 
OVS_KEY_ATTR_TUN_ID
,

2057 &
ba£
->
tu¬ñ
.
tun_id
, (base->tunnel.tun_id));

2058 
	}
}

2061 
	$commô_£t_ëhî_addr_a˘i⁄
(c⁄° 
Êow
 *Êow, Êow *
ba£
,

2062 
oÂbuf
 *
odp_a˘i⁄s
)

2064 
ovs_key_ëhî√t
 
ëh_key
;

2066 i‡(
	`ëh_addr_equÆs
(
ba£
->
dl_§c
, 
Êow
->dl_src) &&

2067 
	`ëh_addr_equÆs
(
ba£
->
dl_d°
, 
Êow
->dl_dst)) {

2071 
	`mem˝y
(
ba£
->
dl_§c
, 
Êow
->dl_§c, 
ETH_ADDR_LEN
);

2072 
	`mem˝y
(
ba£
->
dl_d°
, 
Êow
->dl_d°, 
ETH_ADDR_LEN
);

2074 
	`mem˝y
(
ëh_key
.
ëh_§c
, 
ba£
->
dl_§c
, 
ETH_ADDR_LEN
);

2075 
	`mem˝y
(
ëh_key
.
ëh_d°
, 
ba£
->
dl_d°
, 
ETH_ADDR_LEN
);

2077 
	`commô_£t_a˘i⁄
(
odp_a˘i⁄s
, 
OVS_KEY_ATTR_ETHERNET
,

2078 &
ëh_key
, (eth_key));

2079 
	}
}

2082 
	$commô_vœn_a˘i⁄
(c⁄° 
Êow
 *Êow, Êow *
ba£
,

2083 
oÂbuf
 *
odp_a˘i⁄s
)

2085 i‡(
ba£
->
vœn_tci
 =
Êow
->vlan_tci) {

2089 i‡(
ba£
->
vœn_tci
 & 
	`ht⁄s
(
VLAN_CFI
)) {

2090 
	`∆_msg_put_Êag
(
odp_a˘i⁄s
, 
OVS_ACTION_ATTR_POP_VLAN
);

2093 i‡(
Êow
->
vœn_tci
 & 
	`ht⁄s
(
VLAN_CFI
)) {

2094 
ovs_a˘i⁄_push_vœn
 
vœn
;

2096 
vœn
.
vœn_çid
 = 
	`ht⁄s
(
ETH_TYPE_VLAN
);

2097 
vœn
.
vœn_tci
 = 
Êow
->vlan_tci;

2098 
	`∆_msg_put_un•ec
(
odp_a˘i⁄s
, 
OVS_ACTION_ATTR_PUSH_VLAN
,

2099 &
vœn
,  vlan);

2101 
ba£
->
vœn_tci
 = 
Êow
->vlan_tci;

2102 
	}
}

2105 
	$commô_£t_ùv4_a˘i⁄
(c⁄° 
Êow
 *Êow, Êow *
ba£
,

2106 
oÂbuf
 *
odp_a˘i⁄s
)

2108 
ovs_key_ùv4
 
ùv4_key
;

2110 i‡(
ba£
->
nw_§c
 =
Êow
->nw_src &&

2111 
ba£
->
nw_d°
 =
Êow
->nw_dst &&

2112 
ba£
->
nw_tos
 =
Êow
->nw_tos &&

2113 
ba£
->
nw_âl
 =
Êow
->nw_ttl &&

2114 
ba£
->
nw_‰ag
 =
Êow
->nw_frag) {

2118 
ùv4_key
.
ùv4_§c
 = 
ba£
->
nw_§c
 = 
Êow
->nw_src;

2119 
ùv4_key
.
ùv4_d°
 = 
ba£
->
nw_d°
 = 
Êow
->nw_dst;

2120 
ùv4_key
.
ùv4_tos
 = 
ba£
->
nw_tos
 = 
Êow
->nw_tos;

2121 
ùv4_key
.
ùv4_âl
 = 
ba£
->
nw_âl
 = 
Êow
->nw_ttl;

2122 
ùv4_key
.
ùv4_¥Ÿo
 = 
ba£
->
nw_¥Ÿo
;

2123 
ùv4_key
.
ùv4_‰ag
 = 
	`ovs_to_odp_‰ag
(
ba£
->
nw_‰ag
);

2125 
	`commô_£t_a˘i⁄
(
odp_a˘i⁄s
, 
OVS_KEY_ATTR_IPV4
,

2126 &
ùv4_key
, (ipv4_key));

2127 
	}
}

2130 
	$commô_£t_ùv6_a˘i⁄
(c⁄° 
Êow
 *Êow, Êow *
ba£
,

2131 
oÂbuf
 *
odp_a˘i⁄s
)

2133 
ovs_key_ùv6
 
ùv6_key
;

2135 i‡(
	`ùv6_addr_equÆs
(&
ba£
->
ùv6_§c
, &
Êow
->ipv6_src) &&

2136 
	`ùv6_addr_equÆs
(&
ba£
->
ùv6_d°
, &
Êow
->ipv6_dst) &&

2137 
ba£
->
ùv6_œbñ
 =
Êow
->ipv6_label &&

2138 
ba£
->
nw_tos
 =
Êow
->nw_tos &&

2139 
ba£
->
nw_âl
 =
Êow
->nw_ttl &&

2140 
ba£
->
nw_‰ag
 =
Êow
->nw_frag) {

2144 
ba£
->
ùv6_§c
 = 
Êow
->ipv6_src;

2145 
	`mem˝y
(&
ùv6_key
.
ùv6_§c
, &
ba£
->ipv6_src, (ipv6_key.ipv6_src));

2146 
ba£
->
ùv6_d°
 = 
Êow
->ipv6_dst;

2147 
	`mem˝y
(&
ùv6_key
.
ùv6_d°
, &
ba£
->ipv6_dst, (ipv6_key.ipv6_dst));

2149 
ùv6_key
.
ùv6_œbñ
 = 
ba£
->ùv6_œbñ = 
Êow
->ipv6_label;

2150 
ùv6_key
.
ùv6_t˛ass
 = 
ba£
->
nw_tos
 = 
Êow
->nw_tos;

2151 
ùv6_key
.
ùv6_hlimô
 = 
ba£
->
nw_âl
 = 
Êow
->nw_ttl;

2152 
ùv6_key
.
ùv6_¥Ÿo
 = 
ba£
->
nw_¥Ÿo
;

2153 
ùv6_key
.
ùv6_‰ag
 = 
	`ovs_to_odp_‰ag
(
ba£
->
nw_‰ag
);

2155 
	`commô_£t_a˘i⁄
(
odp_a˘i⁄s
, 
OVS_KEY_ATTR_IPV6
,

2156 &
ùv6_key
, (ipv6_key));

2157 
	}
}

2160 
	$commô_£t_nw_a˘i⁄
(c⁄° 
Êow
 *Êow, Êow *
ba£
,

2161 
oÂbuf
 *
odp_a˘i⁄s
)

2164 i‡(!
Êow
->
nw_¥Ÿo
) {

2168 i‡(
ba£
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IP
)) {

2169 
	`commô_£t_ùv4_a˘i⁄
(
Êow
, 
ba£
, 
odp_a˘i⁄s
);

2170 } i‡(
ba£
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IPV6
)) {

2171 
	`commô_£t_ùv6_a˘i⁄
(
Êow
, 
ba£
, 
odp_a˘i⁄s
);

2173 
	}
}

2176 
	$commô_£t_p‹t_a˘i⁄
(c⁄° 
Êow
 *Êow, Êow *
ba£
,

2177 
oÂbuf
 *
odp_a˘i⁄s
)

2179 i‡(!
ba£
->
ç_§c
 && !ba£->
ç_d°
) {

2183 i‡(
ba£
->
ç_§c
 =
Êow
->tp_src &&

2184 
ba£
->
ç_d°
 =
Êow
->tp_dst) {

2188 i‡(
Êow
->
nw_¥Ÿo
 =
IPPROTO_TCP
) {

2189 
ovs_key_t˝
 
p‹t_key
;

2191 
p‹t_key
.
t˝_§c
 = 
ba£
->
ç_§c
 = 
Êow
->tp_src;

2192 
p‹t_key
.
t˝_d°
 = 
ba£
->
ç_d°
 = 
Êow
->tp_dst;

2194 
	`commô_£t_a˘i⁄
(
odp_a˘i⁄s
, 
OVS_KEY_ATTR_TCP
,

2195 &
p‹t_key
, (port_key));

2197 } i‡(
Êow
->
nw_¥Ÿo
 =
IPPROTO_UDP
) {

2198 
ovs_key_udp
 
p‹t_key
;

2200 
p‹t_key
.
udp_§c
 = 
ba£
->
ç_§c
 = 
Êow
->tp_src;

2201 
p‹t_key
.
udp_d°
 = 
ba£
->
ç_d°
 = 
Êow
->tp_dst;

2203 
	`commô_£t_a˘i⁄
(
odp_a˘i⁄s
, 
OVS_KEY_ATTR_UDP
,

2204 &
p‹t_key
, (port_key));

2206 
	}
}

2209 
	$commô_£t_¥i‹ôy_a˘i⁄
(c⁄° 
Êow
 *Êow, Êow *
ba£
,

2210 
oÂbuf
 *
odp_a˘i⁄s
)

2212 i‡(
ba£
->
skb_¥i‹ôy
 =
Êow
->skb_priority) {

2215 
ba£
->
skb_¥i‹ôy
 = 
Êow
->skb_priority;

2217 
	`commô_£t_a˘i⁄
(
odp_a˘i⁄s
, 
OVS_KEY_ATTR_PRIORITY
,

2218 &
ba£
->
skb_¥i‹ôy
, (base->skb_priority));

2219 
	}
}

2222 
	$commô_£t_skb_m¨k_a˘i⁄
(c⁄° 
Êow
 *Êow, Êow *
ba£
,

2223 
oÂbuf
 *
odp_a˘i⁄s
)

2225 i‡(
ba£
->
skb_m¨k
 =
Êow
->skb_mark) {

2228 
ba£
->
skb_m¨k
 = 
Êow
->skb_mark;

2230 
	`commô_£t_a˘i⁄
(
odp_a˘i⁄s
, 
OVS_KEY_ATTR_SKB_MARK
,

2231 &
ba£
->
skb_m¨k
, (base->skb_mark));

2232 
	}
}

2237 
	$commô_odp_a˘i⁄s
(c⁄° 
Êow
 *Êow, Êow *
ba£
,

2238 
oÂbuf
 *
odp_a˘i⁄s
)

2240 
	`commô_£t_tun_id_a˘i⁄
(
Êow
, 
ba£
, 
odp_a˘i⁄s
);

2241 
	`commô_£t_ëhî_addr_a˘i⁄
(
Êow
, 
ba£
, 
odp_a˘i⁄s
);

2242 
	`commô_vœn_a˘i⁄
(
Êow
, 
ba£
, 
odp_a˘i⁄s
);

2243 
	`commô_£t_nw_a˘i⁄
(
Êow
, 
ba£
, 
odp_a˘i⁄s
);

2244 
	`commô_£t_p‹t_a˘i⁄
(
Êow
, 
ba£
, 
odp_a˘i⁄s
);

2245 
	`commô_£t_¥i‹ôy_a˘i⁄
(
Êow
, 
ba£
, 
odp_a˘i⁄s
);

2246 
	`commô_£t_skb_m¨k_a˘i⁄
(
Êow
, 
ba£
, 
odp_a˘i⁄s
);

2247 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/odp-util.h

17 #i‚de‡
ODP_UTIL_H


18 
	#ODP_UTIL_H
 1

	)

20 
	~<°dboﬁ.h
>

21 
	~<°ddef.h
>

22 
	~<°döt.h
>

23 
	~<°rög.h
>

24 
	~<löux/›ívswôch.h
>

25 
	~"hash.h
"

26 
	~"›íÊow/›íÊow.h
"

27 
	~"utû.h
"

29 
	gds
;

30 
	gÊow
;

31 
	g∆©å
;

32 
	goÂbuf
;

33 
	gsim≠
;

35 
	#OVSP_NONE
 
UINT16_MAX


	)

37 
ölöe
 
uöt16_t


38 
	$oÂ_p‹t_to_odp_p‹t
(
uöt16_t
 
oÂ_p‹t
)

40 
oÂ_p‹t
) {

41 
OFPP_LOCAL
:

42  
OVSP_LOCAL
;

43 
OFPP_NONE
:

44  
OVSP_NONE
;

46  
oÂ_p‹t
;

48 
	}
}

50 
ölöe
 
uöt16_t


51 
	$odp_p‹t_to_oÂ_p‹t
(
uöt16_t
 
odp_p‹t
)

53 
odp_p‹t
) {

54 
OVSP_LOCAL
:

55  
OFPP_LOCAL
;

56 
OVSP_NONE
:

57  
OFPP_NONE
;

59  
odp_p‹t
;

61 
	}
}

63 
f‹m©_odp_a˘i⁄s
(
ds
 *, c⁄° 
∆©å
 *
odp_a˘i⁄s
,

64 
size_t
 
a˘i⁄s_Àn
);

65 
odp_a˘i⁄s_‰om_°rög
(c⁄° *, c⁄° 
sim≠
 *
p‹t_«mes
,

66 
oÂbuf
 *
odp_a˘i⁄s
);

107 
	#ODPUTIL_FLOW_KEY_BYTES
 256

	)

112 
	sodputû_keybuf
 {

113 
uöt32_t
 
	mkeybuf
[
DIV_ROUND_UP
(
ODPUTIL_FLOW_KEY_BYTES
, 4)];

116 
odp_Êow_key_f‹m©
(c⁄° 
∆©å
 *, 
size_t
, 
ds
 *);

117 
odp_Êow_key_‰om_°rög
(c⁄° *
s
, c⁄° 
sim≠
 *
p‹t_«mes
,

118 
oÂbuf
 *);

120 
odp_Êow_key_‰om_Êow
(
oÂbuf
 *, c⁄° 
Êow
 *);

122 
uöt32_t
 
odp_Êow_key_hash
(c⁄° 
∆©å
 *, 
size_t
);

131 
	eodp_key_fô√ss
 {

132 
	mODP_FIT_PERFECT
,

133 
	mODP_FIT_TOO_MUCH
,

134 
	mODP_FIT_TOO_LITTLE
,

135 
	mODP_FIT_ERROR
,

137 
odp_key_fô√ss
 
odp_Êow_key_to_Êow
(c⁄° 
∆©å
 *, 
size_t
,

138 
Êow
 *);

139 c⁄° *
odp_key_fô√ss_to_°rög
(
odp_key_fô√ss
);

141 
commô_odp_a˘i⁄s
(c⁄° 
Êow
 *, Êow *
ba£
,

142 
oÂbuf
 *
odp_a˘i⁄s
);

151 
	eu£r_a˘i⁄_cookõ_ty≥
 {

152 
	mUSER_ACTION_COOKIE_UNSPEC
,

153 
	mUSER_ACTION_COOKIE_SFLOW
,

154 
	mUSER_ACTION_COOKIE_SLOW_PATH


159 
	uu£r_a˘i⁄_cookõ
 {

160 
uöt16_t
 
	mty≥
;

163 
uöt16_t
 
	mty≥
;

164 
ovs_be16
 
	mvœn_tci
;

165 
uöt32_t
 
	mouçut
;

166 } 
	msÊow
;

169 
uöt16_t
 
	mty≥
;

170 
uöt16_t
 
	munu£d
;

171 
uöt32_t
 
	mªas⁄
;

172 } 
	m¶ow_∑th
;

174 
BUILD_ASSERT_DECL
((
u£r_a˘i⁄_cookõ
) == 8);

176 
size_t
 
odp_put_u£r•a˚_a˘i⁄
(
uöt32_t
 
pid
,

177 c⁄° 
u£r_a˘i⁄_cookõ
 *,

178 
oÂbuf
 *
odp_a˘i⁄s
);

181 
	e¶ow_∑th_ªas⁄
 {

183 
	mSLOW_CFM
 = 1 << 0,

184 
	mSLOW_LACP
 = 1 << 1,

185 
	mSLOW_STP
 = 1 << 2,

186 
	mSLOW_IN_BAND
 = 1 << 3,

190 
	mSLOW_CONTROLLER
 = 1 << 4,

194 
	mSLOW_MATCH
 = 1 << 5,

	@/home/lsch/mytest/openvswitch-1.9.0/lib/ofp-actions.c

17 
	~<c⁄fig.h
>

18 
	~"oÂ-a˘i⁄s.h
"

19 
	~"aut›©h.h
"

20 
	~"bundÀ.h
"

21 
	~"byã-‹dî.h
"

22 
	~"compûî.h
"

23 
	~"dy«mic-°rög.h
"

24 
	~"À¨n.h
"

25 
	~"mëa-Êow.h
"

26 
	~"mu…ù©h.h
"

27 
	~"nx-m©ch.h
"

28 
	~"oÂ-utû.h
"

29 
	~"oÂbuf.h
"

30 
	~"vlog.h
"

32 
VLOG_DEFINE_THIS_MODULE
(
oÂ_a˘i⁄s
);

34 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(1, 5);

38 
oÂîr


39 
	$ouçut_‰om_›íÊow10
(c⁄° 
oÂ10_a˘i⁄_ouçut
 *
ﬂo
,

40 
oÂbuf
 *
out
)

42 
oÂa˘_ouçut
 *
ouçut
;

44 
ouçut
 = 
	`oÂa˘_put_OUTPUT
(
out
);

45 
ouçut
->
p‹t
 = 
	`¡ohs
(
ﬂo
->port);

46 
ouçut
->
max_Àn
 = 
	`¡ohs
(
ﬂo
->max_len);

48  
	`oÂutû_check_ouçut_p‹t
(
ouçut
->
p‹t
, 
OFPP_MAX
);

49 
	}
}

51 
oÂîr


52 
	$íqueue_‰om_›íÊow10
(c⁄° 
oÂ_a˘i⁄_íqueue
 *
ﬂe
,

53 
oÂbuf
 *
out
)

55 
oÂa˘_íqueue
 *
íqueue
;

57 
íqueue
 = 
	`oÂa˘_put_ENQUEUE
(
out
);

58 
íqueue
->
p‹t
 = 
	`¡ohs
(
ﬂe
->port);

59 
íqueue
->
queue
 = 
	`¡ohl
(
ﬂe
->
queue_id
);

60 i‡(
íqueue
->
p‹t
 >
OFPP_MAX
 &&Énqueue->p‹à!
OFPP_IN_PORT


61 && 
íqueue
->
p‹t
 !
OFPP_LOCAL
) {

62  
OFPERR_OFPBAC_BAD_OUT_PORT
;

65 
	}
}

68 
	$ªsubmô_‰om_›íÊow
(c⁄° 
nx_a˘i⁄_ªsubmô
 *
«r
,

69 
oÂbuf
 *
out
)

71 
oÂa˘_ªsubmô
 *
ªsubmô
;

73 
ªsubmô
 = 
	`oÂa˘_put_RESUBMIT
(
out
);

74 
ªsubmô
->
oÂa˘
.
com∑t
 = 
OFPUTIL_NXAST_RESUBMIT
;

75 
ªsubmô
->
ö_p‹t
 = 
	`¡ohs
(
«r
->in_port);

76 
ªsubmô
->
èbÀ_id
 = 0xff;

77 
	}
}

79 
oÂîr


80 
	$ªsubmô_èbÀ_‰om_›íÊow
(c⁄° 
nx_a˘i⁄_ªsubmô
 *
«r
,

81 
oÂbuf
 *
out
)

83 
oÂa˘_ªsubmô
 *
ªsubmô
;

85 i‡(
«r
->
∑d
[0] ||Çar->pad[1] ||Çar->pad[2]) {

86  
OFPERR_OFPBAC_BAD_ARGUMENT
;

89 
ªsubmô
 = 
	`oÂa˘_put_RESUBMIT
(
out
);

90 
ªsubmô
->
oÂa˘
.
com∑t
 = 
OFPUTIL_NXAST_RESUBMIT_TABLE
;

91 
ªsubmô
->
ö_p‹t
 = 
	`¡ohs
(
«r
->in_port);

92 
ªsubmô
->
èbÀ_id
 = 
«r
->
èbÀ
;

94 
	}
}

96 
oÂîr


97 
	$ouçut_ªg_‰om_›íÊow
(c⁄° 
nx_a˘i⁄_ouçut_ªg
 *
«‹
,

98 
oÂbuf
 *
out
)

100 
oÂa˘_ouçut_ªg
 *
ouçut_ªg
;

102 i‡(!
	`is_Æl_zîos
(
«‹
->
zîo
, Çaor->zero)) {

103  
OFPERR_OFPBAC_BAD_ARGUMENT
;

106 
ouçut_ªg
 = 
	`oÂa˘_put_OUTPUT_REG
(
out
);

107 
ouçut_ªg
->
§c
.
fõld
 = 
	`mf_‰om_nxm_hódî
(
	`¡ohl
(
«‹
->src));

108 
ouçut_ªg
->
§c
.
ofs
 = 
	`nxm_decode_ofs
(
«‹
->
ofs_nbôs
);

109 
ouçut_ªg
->
§c
.
n_bôs
 = 
	`nxm_decode_n_bôs
(
«‹
->
ofs_nbôs
);

110 
ouçut_ªg
->
max_Àn
 = 
	`¡ohs
(
«‹
->max_len);

112  
	`mf_check_§c
(&
ouçut_ªg
->
§c
, 
NULL
);

113 
	}
}

116 
	$fö_timeout_‰om_›íÊow
(c⁄° 
nx_a˘i⁄_fö_timeout
 *
«·
,

117 
oÂbuf
 *
out
)

119 
oÂa˘_fö_timeout
 *
o·
;

121 
o·
 = 
	`oÂa˘_put_FIN_TIMEOUT
(
out
);

122 
o·
->
fö_idÀ_timeout
 = 
	`¡ohs
(
«·
->fin_idle_timeout);

123 
o·
->
fö_h¨d_timeout
 = 
	`¡ohs
(
«·
->fin_hard_timeout);

124 
	}
}

127 
	$c⁄åﬁÀr_‰om_›íÊow
(c⁄° 
nx_a˘i⁄_c⁄åﬁÀr
 *
«c
,

128 
oÂbuf
 *
out
)

130 
oÂa˘_c⁄åﬁÀr
 *
oc
;

132 
oc
 = 
	`oÂa˘_put_CONTROLLER
(
out
);

133 
oc
->
max_Àn
 = 
	`¡ohs
(
«c
->max_len);

134 
oc
->
c⁄åﬁÀr_id
 = 
	`¡ohs
(
«c
->controller_id);

135 
oc
->
ªas⁄
 = 
«c
->reason;

136 
	}
}

138 
oÂîr


139 
	$mëad©a_‰om_nxa°
(c⁄° 
nx_a˘i⁄_wrôe_mëad©a
 *
«wm
,

140 
oÂbuf
 *
out
)

142 
oÂa˘_mëad©a
 *
om
;

144 i‡(!
	`is_Æl_zîos
(
«wm
->
zîos
, Çawm->zeros)) {

145  
OFPERR_NXBRC_MUST_BE_ZERO
;

148 
om
 = 
	`oÂa˘_put_WRITE_METADATA
(
out
);

149 
om
->
mëad©a
 = 
«wm
->metadata;

150 
om
->
mask
 = 
«wm
->mask;

153 
	}
}

156 
	$nŸe_‰om_›íÊow
(c⁄° 
nx_a˘i⁄_nŸe
 *
«n
, 
oÂbuf
 *
out
)

158 
oÂa˘_nŸe
 *
nŸe
;

159 
Àngth
;

161 
Àngth
 = 
	`¡ohs
(
«n
->
Àn
Ë- 
	`off£tof
(
nx_a˘i⁄_nŸe
, 
nŸe
);

162 
nŸe
 = 
	`oÂa˘_put
(
out
, 
OFPACT_NOTE
,

163 
	`off£tof
(
oÂa˘_nŸe
, 
d©a
Ë+ 
Àngth
);

164 
nŸe
->
Àngth
 =Üength;

165 
	`mem˝y
(
nŸe
->
d©a
, 
«n
->nŸe, 
Àngth
);

166 
	}
}

168 
oÂîr


169 
	$dec_âl_‰om_›íÊow
(
oÂbuf
 *
out
, 
oÂutû_a˘i⁄_code
 
com∑t
)

171 
uöt16_t
 
id
 = 0;

172 
oÂa˘_˙t_ids
 *
ids
;

173 
oÂîr
 
îr‹
 = 0;

175 
ids
 = 
	`oÂa˘_put_DEC_TTL
(
out
);

176 
ids
->
oÂa˘
.
com∑t
 = compat;

177 
ids
->
n_c⁄åﬁÀrs
 = 1;

178 
	`oÂbuf_put
(
out
, &
id
,  id);

179 
ids
 = 
out
->
l2
;

180 
	`oÂa˘_upd©e_Àn
(
out
, &
ids
->
oÂa˘
);

181  
îr‹
;

182 
	}
}

184 
oÂîr


185 
	$dec_âl_˙t_ids_‰om_›íÊow
(c⁄° 
nx_a˘i⁄_˙t_ids
 *
«c_ids
,

186 
oÂbuf
 *
out
)

188 
oÂa˘_˙t_ids
 *
ids
;

189 
size_t
 
ids_size
;

190 
i
;

192 
ids
 = 
	`oÂa˘_put_DEC_TTL
(
out
);

193 
ids
->
oÂa˘
.
com∑t
 = 
OFPUTIL_NXAST_DEC_TTL_CNT_IDS
;

194 
ids
->
n_c⁄åﬁÀrs
 = 
	`¡ohs
(
«c_ids
->n_controllers);

195 
ids_size
 = 
	`¡ohs
(
«c_ids
->
Àn
) -  *nac_ids;

197 i‡(!
	`is_Æl_zîos
(
«c_ids
->
zîos
, Çac_ids->zeros)) {

198  
OFPERR_NXBRC_MUST_BE_ZERO
;

201 i‡(
ids_size
 < 
ids
->
n_c⁄åﬁÀrs
 * (
ovs_be16
)) {

202 
	`VLOG_WARN_RL
(&
æ
, "Niciraáction dec_ttl_cnt_ids only has %zu bytes "

204 "%"
PRIu16
" c⁄åﬁÀrs.", 
ids_size
,

205 
ids
->
n_c⁄åﬁÀrs
 * (
ovs_be16
), ids->n_controllers);

206  
OFPERR_OFPBAC_BAD_LEN
;

209 
i
 = 0; i < 
ids
->
n_c⁄åﬁÀrs
; i++) {

210 
uöt16_t
 
id
 = 
	`¡ohs
(((
ovs_be16
 *)(
«c_ids
 + 1))[
i
]);

211 
	`oÂbuf_put
(
out
, &
id
,  id);

214 
ids
 = 
out
->
l2
;

215 
	`oÂa˘_upd©e_Àn
(
out
, &
ids
->
oÂa˘
);

218 
	}
}

220 
oÂîr


221 
	$decode_nc_a˘i⁄
(c⁄° 
oÂ_a˘i⁄
 *
a
, 
oÂutû_a˘i⁄_code
 *
code
)

223 c⁄° 
nc_a˘i⁄_hódî
 *
nch
 = (c⁄° nc_a˘i⁄_hódî *)
a
;

224 
uöt16_t
 
Àn
 = 
	`¡ohs
(
a
->
hódî
.len);

225 
nch
->
subty≥
) {

226 
	#NC_ACTION
(
ENUM
, 
STRUCT
, 
EXTENSIBLE
, 
NAME
) \

227 
	`CONSTANT_HTONS
(
ENUM
): \

228 i‡(
EXTENSIBLE
 \

229 ? 
Àn
 >(
STRUCT
) \

230 : 
Àn
 =(
STRUCT
)) { \

231 *
code
 = 
OFPUTIL_
##
ENUM
; \

234  
OFPERR_OFPBAC_BAD_LEN
; \

236 
	`NOT_REACHED
();

	)

237 
	~"oÂ-utû.def
"

239  
OFPERR_OFPBAC_BAD_TYPE
;

240 
	}
}

243 
oÂîr


244 
	$decode_nxa°_a˘i⁄
(c⁄° 
oÂ_a˘i⁄
 *
a
, 
oÂutû_a˘i⁄_code
 *
code
)

246 c⁄° 
nx_a˘i⁄_hódî
 *
«h
 = (c⁄° nx_a˘i⁄_hódî *Ë
a
;

247 
uöt16_t
 
Àn
 = 
	`¡ohs
(
a
->
hódî
.len);

249 i‡(
Àn
 < (
nx_a˘i⁄_hódî
)) {

250  
OFPERR_OFPBAC_BAD_LEN
;

252 } i‡(
a
->
víd‹
.víd‹ =
	`CONSTANT_HTONL
(
NC_VENDOR_ID
)) {

253  
	`decode_nc_a˘i⁄
(
a
, 
code
);

255 } i‡(
a
->
víd‹
.víd‹ !
	`CONSTANT_HTONL
(
NX_VENDOR_ID
)) {

256  
OFPERR_OFPBAC_BAD_VENDOR
;

259 
«h
->
subty≥
) {

260 
	#NXAST_ACTION
(
ENUM
, 
STRUCT
, 
EXTENSIBLE
, 
NAME
) \

261 
	`CONSTANT_HTONS
(
ENUM
): \

262 i‡(
EXTENSIBLE
 \

263 ? 
Àn
 >(
STRUCT
) \

264 : 
Àn
 =(
STRUCT
)) { \

265 *
code
 = 
OFPUTIL_
##
ENUM
; \

268  
OFPERR_OFPBAC_BAD_LEN
; \

270 
	`NOT_REACHED
();

	)

271 
	~"oÂ-utû.def
"

273 
	`CONSTANT_HTONS
(
NXAST_SNAT__OBSOLETE
):

274 
	`CONSTANT_HTONS
(
NXAST_DROP_SPOOFED_ARP__OBSOLETE
):

276  
OFPERR_OFPBAC_BAD_TYPE
;

278 
	}
}

290 
oÂîr


291 
	$decode_›íÊow10_a˘i⁄
(c⁄° 
oÂ_a˘i⁄
 *
a
,

292 
oÂutû_a˘i⁄_code
 *
code
)

294 
a
->
ty≥
) {

295 
	`CONSTANT_HTONS
(
OFPAT10_VENDOR
):

296  
	`decode_nxa°_a˘i⁄
(
a
, 
code
);

298 
	#OFPAT10_ACTION
(
ENUM
, 
STRUCT
, 
NAME
) \

299 
	`CONSTANT_HTONS
(
ENUM
): \

300 i‡(
a
->
hódî
.
Àn
 =
	`ht⁄s
((
STRUCT
))) { \

301 *
code
 = 
OFPUTIL_
##
ENUM
; \

304  
OFPERR_OFPBAC_BAD_LEN
; \

306 ;

	)

307 
	~"oÂ-utû.def
"

310  
OFPERR_OFPBAC_BAD_TYPE
;

312 
	}
}

314 
oÂîr


315 
	$oÂa˘_‰om_nxa°
(c⁄° 
oÂ_a˘i⁄
 *
a
, 
oÂutû_a˘i⁄_code
 
code
,

316 
oÂbuf
 *
out
)

318 c⁄° 
nx_a˘i⁄_ªsubmô
 *
«r
;

319 c⁄° 
nx_a˘i⁄_£t_tu¬ñ
 *
«°
;

320 c⁄° 
nx_a˘i⁄_£t_queue
 *
«sq
;

321 c⁄° 
nx_a˘i⁄_nŸe
 *
«n
;

322 c⁄° 
nx_a˘i⁄_£t_tu¬ñ64
 *
«°64
;

323 c⁄° 
nx_a˘i⁄_wrôe_mëad©a
 *
«wm
;

324 
oÂa˘_tu¬ñ
 *
tu¬ñ
;

325 
oÂîr
 
îr‹
 = 0;

327 
code
) {

328 
OFPUTIL_ACTION_INVALID
:

329 
	#OFPAT10_ACTION
(
ENUM
, 
STRUCT
, 
NAME
Ë
OFPUTIL_
##ENUM:

	)

330 
	#OFPAT11_ACTION
(
ENUM
, 
STRUCT
, 
EXTENSIBLE
, 
NAME
Ë
OFPUTIL_
##ENUM:

	)

331 
	~"oÂ-utû.def
"

332 
	`NOT_REACHED
();

334 
OFPUTIL_NXAST_RESUBMIT
:

335 
	`ªsubmô_‰om_›íÊow
((c⁄° 
nx_a˘i⁄_ªsubmô
 *Ë
a
, 
out
);

338 
OFPUTIL_NXAST_SET_TUNNEL
:

339 
«°
 = (c⁄° 
nx_a˘i⁄_£t_tu¬ñ
 *Ë
a
;

340 
tu¬ñ
 = 
	`oÂa˘_put_SET_TUNNEL
(
out
);

341 
tu¬ñ
->
oÂa˘
.
com∑t
 = 
code
;

342 
tu¬ñ
->
tun_id
 = 
	`¡ohl
(
«°
->tun_id);

345 
OFPUTIL_NXAST_WRITE_METADATA
:

346 
«wm
 = (c⁄° 
nx_a˘i⁄_wrôe_mëad©a
 *Ë
a
;

347 
îr‹
 = 
	`mëad©a_‰om_nxa°
(
«wm
, 
out
);

350 
OFPUTIL_NXAST_SET_QUEUE
:

351 
«sq
 = (c⁄° 
nx_a˘i⁄_£t_queue
 *Ë
a
;

352 
	`oÂa˘_put_SET_QUEUE
(
out
)->
queue_id
 = 
	`¡ohl
(
«sq
->queue_id);

355 
OFPUTIL_NXAST_POP_QUEUE
:

356 
	`oÂa˘_put_POP_QUEUE
(
out
);

359 
OFPUTIL_NXAST_REG_MOVE
:

360 
îr‹
 = 
	`nxm_ªg_move_‰om_›íÊow
(

361 (c⁄° 
nx_a˘i⁄_ªg_move
 *Ë
a
, 
out
);

364 
OFPUTIL_NXAST_REG_LOAD
:

365 
îr‹
 = 
	`nxm_ªg_lﬂd_‰om_›íÊow
(

366 (c⁄° 
nx_a˘i⁄_ªg_lﬂd
 *Ë
a
, 
out
);

369 
OFPUTIL_NXAST_NOTE
:

370 
«n
 = (c⁄° 
nx_a˘i⁄_nŸe
 *Ë
a
;

371 
	`nŸe_‰om_›íÊow
(
«n
, 
out
);

374 
OFPUTIL_NXAST_SET_TUNNEL64
:

375 
«°64
 = (c⁄° 
nx_a˘i⁄_£t_tu¬ñ64
 *Ë
a
;

376 
tu¬ñ
 = 
	`oÂa˘_put_SET_TUNNEL
(
out
);

377 
tu¬ñ
->
oÂa˘
.
com∑t
 = 
code
;

378 
tu¬ñ
->
tun_id
 = 
	`¡ohŒ
(
«°64
->tun_id);

381 
OFPUTIL_NXAST_MULTIPATH
:

382 
îr‹
 = 
	`mu…ù©h_‰om_›íÊow
((c⁄° 
nx_a˘i⁄_mu…ù©h
 *Ë
a
,

383 
	`oÂa˘_put_MULTIPATH
(
out
));

386 
OFPUTIL_NXAST_AUTOPATH__DEPRECATED
:

387 
îr‹
 = 
	`aut›©h_‰om_›íÊow
((c⁄° 
nx_a˘i⁄_aut›©h
 *Ë
a
,

388 
	`oÂa˘_put_AUTOPATH
(
out
));

391 
OFPUTIL_NXAST_BUNDLE
:

392 
OFPUTIL_NXAST_BUNDLE_LOAD
:

393 
îr‹
 = 
	`bundÀ_‰om_›íÊow
((c⁄° 
nx_a˘i⁄_bundÀ
 *Ë
a
, 
out
);

396 
OFPUTIL_NXAST_OUTPUT_REG
:

397 
îr‹
 = 
	`ouçut_ªg_‰om_›íÊow
(

398 (c⁄° 
nx_a˘i⁄_ouçut_ªg
 *Ë
a
, 
out
);

401 
OFPUTIL_NXAST_RESUBMIT_TABLE
:

402 
«r
 = (c⁄° 
nx_a˘i⁄_ªsubmô
 *Ë
a
;

403 
îr‹
 = 
	`ªsubmô_èbÀ_‰om_›íÊow
(
«r
, 
out
);

406 
OFPUTIL_NXAST_LEARN
:

407 
îr‹
 = 
	`À¨n_‰om_›íÊow
((c⁄° 
nx_a˘i⁄_À¨n
 *Ë
a
, 
out
);

410 
OFPUTIL_NXAST_EXIT
:

411 
	`oÂa˘_put_EXIT
(
out
);

414 
OFPUTIL_NXAST_DEC_TTL
:

415 
îr‹
 = 
	`dec_âl_‰om_›íÊow
(
out
, 
code
);

418 
OFPUTIL_NXAST_DEC_TTL_CNT_IDS
:

419 
îr‹
 = 
	`dec_âl_˙t_ids_‰om_›íÊow
(

420 (c⁄° 
nx_a˘i⁄_˙t_ids
 *Ë
a
, 
out
);

423 
OFPUTIL_NXAST_FIN_TIMEOUT
:

424 
	`fö_timeout_‰om_›íÊow
(

425 (c⁄° 
nx_a˘i⁄_fö_timeout
 *Ë
a
, 
out
);

428 
OFPUTIL_NXAST_CONTROLLER
:

429 
	`c⁄åﬁÀr_‰om_›íÊow
((c⁄° 
nx_a˘i⁄_c⁄åﬁÀr
 *Ë
a
, 
out
);

433  
îr‹
;

434 
	}
}

436 
oÂîr


437 
	$nc_öô_codög_‰om_›íÊow
(c⁄° 
nc_a˘i⁄_öô_codög
 *
nˇ
,

438 
oÂbuf
 *
out
)

440 
d©a_Àn
;

441 *
p
;

442 
i
;

443 
oÂa˘_öô_codög
 *
s
 = 
	`oÂa˘_put_INIT_CODING
(
out
);

444 
s
->
buf„r_id
 = 
nˇ
->buffer_id;

445 
s
->
∑ckë_num
 = 
nˇ
->packet_num;

446 
s
->
p‹t_num
 = 
nˇ
->port_num;

447 
s
->
ve˘‹_off
 = 
nˇ
->vector_off;

448 
s
->
∑ckë_Àn
 = 
	`¡ohs
(
nˇ
->packet_len);

449 
d©a_Àn
 = 
nˇ
->
p‹t_num
 * 2 +Çˇ->p‹t_num *Çˇ->
∑ckë_num
 * 1;

450 
	`oÂbuf_put
(
out
, 
nˇ
->
d©Øsdf
, 
d©a_Àn
);

451 
s
->
oÂa˘
.
Àn
 +
d©a_Àn
;

453 
	}
}

455 
oÂîr


456 
	$nc_ícode_‰om_›íÊow
(c⁄° 
nc_a˘i⁄_ícode
 *
nˇ
,

457 
oÂbuf
 *
out
)

459 
d©a_Àn
;

460 *
p
;

461 
i
;

462 
oÂa˘_ícode
 *
s
 = 
	`oÂa˘_put_ENCODE
(
out
);

463 
s
->
buf„r_id
 = 
nˇ
->buffer_id;

464 
s
->
p‹t_num
 = 
nˇ
->port_num;

465 
s
->
buf„r_size
 = 
	`¡ohs
(
nˇ
->buffer_size);

466 
s
->
ouçut_p‹t
 = 
	`¡ohs
(
nˇ
->output_port);

467 
s
->
∑ckë_Àn
 = 
	`¡ohs
(
nˇ
->packet_len);

468 
s
->
∑ckë_num
 = 
	`¡ohs
(
nˇ
->packet_num);

469 
s
->
p‹t_id
 = 
	`¡ohs
(
nˇ
->port_id);

470 
d©a_Àn
 = 
	`¡ohs
(
nˇ
->
∑ckë_num
) * 1;

471 
	`oÂbuf_put
(
out
, 
nˇ
->
d©Øsdf
, 
d©a_Àn
);

472 
s
->
oÂa˘
.
Àn
 +
d©a_Àn
;

474 
	}
}

476 
oÂîr


477 
	$nc_decode_‰om_›íÊow
(c⁄° 
nc_a˘i⁄_decode
 *
nˇ
,

478 
oÂbuf
 *
out
)

480 
d©a_Àn
;

481 *
p
;

482 
i
;

483 
oÂa˘_decode
 *
s
 = 
	`oÂa˘_put_DECODE
(
out
);

484 
s
->
buf„r_id
 = 
nˇ
->buffer_id;

485 
s
->
∑ckë_num
 = 
nˇ
->packet_num;

486 
s
->
buf„r_size
 = 
	`¡ohs
(
nˇ
->buffer_size);

487 
s
->
ouçut_num
 = 
	`¡ohs
(
nˇ
->output_num);

488 
s
->
∑ckë_Àn
 = 
	`¡ohs
(
nˇ
->packet_len);

489 
s
->
p‹t_id
 = 
	`¡ohs
(
nˇ
->port_id);

490 
d©a_Àn
 = 
	`¡ohs
(
nˇ
->
ouçut_num
) * 2;

491 
	`oÂbuf_put
(
out
, 
nˇ
->
d©Øsdf
, 
d©a_Àn
);

492 
s
->
oÂa˘
.
Àn
 +
d©a_Àn
;

494 
	}
}

496 
oÂîr


497 
	$oÂa˘_‰om_nc
(c⁄° 
oÂ_a˘i⁄
 *
a
, 
oÂutû_a˘i⁄_code
 
code
,

498 
oÂbuf
 *
out
)

500 
oÂîr
 
îr‹
 = 0;

501 
code
) {

502 
OFPUTIL_NC_INIT_CODING
:

503 
îr‹
 = 
	`nc_öô_codög_‰om_›íÊow
((c⁄° 
nc_a˘i⁄_öô_codög
 *)
a
, 
out
);

505 
OFPUTIL_NC_ENCODE
:

506 
îr‹
 = 
	`nc_ícode_‰om_›íÊow
((c⁄° 
nc_a˘i⁄_ícode
 *)
a
, 
out
);

508 
OFPUTIL_NC_DECODE
:

509 
îr‹
 = 
	`nc_decode_‰om_›íÊow
((c⁄° 
nc_a˘i⁄_decode
 *)
a
, 
out
);

512  
îr‹
;

513 
	}
}

517 
oÂîr


518 
	$oÂa˘_‰om_›íÊow10
(c⁄° 
oÂ_a˘i⁄
 *
a
, 
oÂbuf
 *
out
)

520 
oÂutû_a˘i⁄_code
 
code
;

521 
oÂîr
 
îr‹
;

523 
îr‹
 = 
	`decode_›íÊow10_a˘i⁄
(
a
, &
code
);

524 i‡(
îr‹
) {

525  
îr‹
;

528 
code
) {

529 
OFPUTIL_ACTION_INVALID
:

530 
	#OFPAT11_ACTION
(
ENUM
, 
STRUCT
, 
EXTENSIBLE
, 
NAME
Ë
OFPUTIL_
##ENUM:

	)

531 
	~"oÂ-utû.def
"

532 
	`NOT_REACHED
();

534 
OFPUTIL_OFPAT10_OUTPUT
:

535  
	`ouçut_‰om_›íÊow10
(&
a
->
ouçut10
, 
out
);

537 
OFPUTIL_OFPAT10_SET_VLAN_VID
:

538 i‡(
a
->
vœn_vid
.vœn_vid & ~
	`ht⁄s
(0xfff)) {

539  
OFPERR_OFPBAC_BAD_ARGUMENT
;

541 
	`oÂa˘_put_SET_VLAN_VID
(
out
)->
vœn_vid
 = 
	`¡ohs
(
a
->vlan_vid.vlan_vid);

544 
OFPUTIL_OFPAT10_SET_VLAN_PCP
:

545 i‡(
a
->
vœn_p˝
.vlan_pcp & ~7) {

546  
OFPERR_OFPBAC_BAD_ARGUMENT
;

548 
	`oÂa˘_put_SET_VLAN_PCP
(
out
)->
vœn_p˝
 = 
a
->vlan_pcp.vlan_pcp;

551 
OFPUTIL_OFPAT10_STRIP_VLAN
:

552 
	`oÂa˘_put_STRIP_VLAN
(
out
);

555 
OFPUTIL_OFPAT10_SET_DL_SRC
:

556 
	`mem˝y
(
	`oÂa˘_put_SET_ETH_SRC
(
out
)->
mac
,

557 ((c⁄° 
oÂ_a˘i⁄_dl_addr
 *Ë
a
)->
dl_addr
, 
ETH_ADDR_LEN
);

560 
OFPUTIL_OFPAT10_SET_DL_DST
:

561 
	`mem˝y
(
	`oÂa˘_put_SET_ETH_DST
(
out
)->
mac
,

562 ((c⁄° 
oÂ_a˘i⁄_dl_addr
 *Ë
a
)->
dl_addr
, 
ETH_ADDR_LEN
);

565 
OFPUTIL_OFPAT10_SET_NW_SRC
:

566 
	`oÂa˘_put_SET_IPV4_SRC
(
out
)->
ùv4
 = 
a
->
nw_addr
.nw_addr;

569 
OFPUTIL_OFPAT10_SET_NW_DST
:

570 
	`oÂa˘_put_SET_IPV4_DST
(
out
)->
ùv4
 = 
a
->
nw_addr
.nw_addr;

573 
OFPUTIL_OFPAT10_SET_NW_TOS
:

574 i‡(
a
->
nw_tos
.nw_to†& ~
IP_DSCP_MASK
) {

575  
OFPERR_OFPBAC_BAD_ARGUMENT
;

577 
	`oÂa˘_put_SET_IPV4_DSCP
(
out
)->
ds˝
 = 
a
->
nw_tos
.nw_tos;

580 
OFPUTIL_OFPAT10_SET_TP_SRC
:

581 
	`oÂa˘_put_SET_L4_SRC_PORT
(
out
)->
p‹t
 = 
	`¡ohs
(
a
->
ç_p‹t
.tp_port);

584 
OFPUTIL_OFPAT10_SET_TP_DST
:

585 
	`oÂa˘_put_SET_L4_DST_PORT
(
out
)->
p‹t
 = 
	`¡ohs
(
a
->
ç_p‹t
.tp_port);

589 
OFPUTIL_OFPAT10_ENQUEUE
:

590 
îr‹
 = 
	`íqueue_‰om_›íÊow10
((c⁄° 
oÂ_a˘i⁄_íqueue
 *Ë
a
,

591 
out
);

594 
	#NC_ACTION
(
ENUM
, 
STRUCT
, 
EXTENSIBLE
, 
NAME
Ë
OFPUTIL_
##ENUM:

	)

595 
	~"oÂ-utû.def
"

596  
	`oÂa˘_‰om_nc
(
a
, 
code
, 
out
);

599 
	#NXAST_ACTION
(
ENUM
, 
STRUCT
, 
EXTENSIBLE
, 
NAME
Ë
OFPUTIL_
##ENUM:

	)

600 
	~"oÂ-utû.def
"

601  
	`oÂa˘_‰om_nxa°
(
a
, 
code
, 
out
);

604  
îr‹
;

605 
	}
}

607 
ölöe
 
oÂ_a˘i⁄
 *

608 
	$a˘i⁄_√xt
(c⁄° 
oÂ_a˘i⁄
 *
a
)

610  ((
oÂ_a˘i⁄
 *) (*)

611 ((
uöt8_t
 *Ë
a
 + 
	`¡ohs
◊->
hódî
.
Àn
)));

612 
	}
}

614 
ölöe
 
boﬁ


615 
	$a˘i⁄_is_vÆid
(c⁄° 
oÂ_a˘i⁄
 *
a
, 
size_t
 
n_a˘i⁄s
)

617 
uöt16_t
 
Àn
 = 
	`¡ohs
(
a
->
hódî
.len);

618  (!(
Àn
 % 
OFP_ACTION_ALIGN
)

619 && 
Àn
 > *
a


620 && 
Àn
 /  *
a
 <
n_a˘i⁄s
);

621 
	}
}

624 
	#ACTION_FOR_EACH
(
ITER
, 
LEFT
, 
ACTIONS
, 
N_ACTIONS
) \

625 (
ITER
Ë(
ACTIONS
), (
LEFT
Ë(
N_ACTIONS
); \

626 (
LEFT
Ë> 0 && 
	`a˘i⁄_is_vÆid
(
ITER
, LEFT); \

627 ((
LEFT
Ë-
	`¡ohs
((
ITER
)->
hódî
.
Àn
Ë/ (
oÂ_a˘i⁄
), \

628 (
ITER
Ë
	`a˘i⁄_√xt
(ITER)))

	)

631 
	$log_bad_a˘i⁄
(c⁄° 
oÂ_a˘i⁄
 *
a˘i⁄s
, 
size_t
 
n_a˘i⁄s
, size_à
ofs
,

632 
oÂîr
 
îr‹
)

634 i‡(!
	`VLOG_DROP_WARN
(&
æ
)) {

635 
ds
 
s
;

637 
	`ds_öô
(&
s
);

638 
	`ds_put_hex_dump
(&
s
, 
a˘i⁄s
, 
n_a˘i⁄s
 *  *a˘i⁄s, 0, 
Ál£
);

639 
	`VLOG_WARN
("badáctionát offset %#zx (%s):\n%s",

640 
ofs
 *  *
a˘i⁄s
, 
	`oÂîr_gë_«me
(
îr‹
), 
	`ds_c°r
(&
s
));

641 
	`ds_de°roy
(&
s
);

643 
	}
}

645 
oÂîr


646 
oÂa˘s_‰om_›íÊow
(c⁄° 
oÂ_a˘i⁄
 *
ö
, 
size_t
 
n_ö
,

647 
oÂbuf
 *
out
,

648 
	$oÂîr
 (*
oÂa˘_‰om_›íÊow
)(

649 c⁄° 
oÂ_a˘i⁄
 *
a
, 
oÂbuf
 *
out
))

651 c⁄° 
oÂ_a˘i⁄
 *
a
;

652 
size_t
 
À·
;

654 
	`ACTION_FOR_EACH
 (
a
, 
À·
, 
ö
, 
n_ö
) {

655 
oÂîr
 
îr‹
 = 
	`oÂa˘_‰om_›íÊow
(
a
, 
out
);

656 i‡(
îr‹
) {

657 
	`log_bad_a˘i⁄
(
ö
, 
n_ö
, 
a
 - in, 
îr‹
);

658  
îr‹
;

661 i‡(
À·
) {

662 
oÂîr
 
îr‹
 = 
OFPERR_OFPBAC_BAD_LEN
;

663 
	`log_bad_a˘i⁄
(
ö
, 
n_ö
,Ç_ö - 
À·
, 
îr‹
);

664  
îr‹
;

667 
	`oÂa˘_∑d
(
out
);

669 
	}
}

671 
oÂîr


672 
	$oÂa˘s_‰om_›íÊow10
(c⁄° 
oÂ_a˘i⁄
 *
ö
, 
size_t
 
n_ö
,

673 
oÂbuf
 *
out
)

675  
	`oÂa˘s_‰om_›íÊow
(
ö
, 
n_ö
, 
out
, 
oÂa˘_‰om_›íÊow10
);

676 
	}
}

678 
oÂîr


679 
oÂa˘s_puŒ_a˘i⁄s
(
oÂbuf
 *
›íÊow
, 
a˘i⁄s_Àn
,

680 
oÂbuf
 *
oÂa˘s
,

681 
	$oÂîr
 (*
å™¶©e
)(c⁄° 
oÂ_a˘i⁄
 *
a˘i⁄s
,

682 
size_t
 
n_a˘i⁄s
,

683 
oÂbuf
 *
oÂa˘s
))

685 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 5);

686 c⁄° 
oÂ_a˘i⁄
 *
a˘i⁄s
;

687 
oÂîr
 
îr‹
;

689 
	`oÂbuf_˛ór
(
oÂa˘s
);

691 i‡(
a˘i⁄s_Àn
 % 
OFP_ACTION_ALIGN
 != 0) {

692 
	`VLOG_WARN_RL
(&
æ
, "OpenFlow messageáctionsÜength %u isÇotá "

693 "mu…ùÀ o‡%d", 
a˘i⁄s_Àn
, 
OFP_ACTION_ALIGN
);

694  
OFPERR_OFPBRC_BAD_LEN
;

697 
a˘i⁄s
 = 
	`oÂbuf_åy_puŒ
(
›íÊow
, 
a˘i⁄s_Àn
);

698 i‡(
a˘i⁄s
 =
NULL
) {

699 
	`VLOG_WARN_RL
(&
æ
, "OpenFlow messageáctionsÜength %uÉxceeds "

701 
a˘i⁄s_Àn
, 
›íÊow
->
size
);

702  
OFPERR_OFPBRC_BAD_LEN
;

705 
îr‹
 = 
	`å™¶©e
(
a˘i⁄s
, 
a˘i⁄s_Àn
 / 
OFP_ACTION_ALIGN
, 
oÂa˘s
);

706 i‡(
îr‹
) {

707 
	`oÂbuf_˛ór
(
oÂa˘s
);

708  
îr‹
;

711 
îr‹
 = 
	`oÂa˘s_vîify
(
oÂa˘s
->
d©a
, oÂa˘s->
size
);

712 i‡(
îr‹
) {

713 
	`oÂbuf_˛ór
(
oÂa˘s
);

715  
îr‹
;

716 
	}
}

728 
oÂîr


729 
	$oÂa˘s_puŒ_›íÊow10
(
oÂbuf
 *
›íÊow
, 
a˘i⁄s_Àn
,

730 
oÂbuf
 *
oÂa˘s
)

732  
	`oÂa˘s_puŒ_a˘i⁄s
(
›íÊow
, 
a˘i⁄s_Àn
, 
oÂa˘s
,

733 
oÂa˘s_‰om_›íÊow10
);

734 
	}
}

748 
oÂîr


749 
	$decode_›íÊow11_a˘i⁄
(c⁄° 
oÂ_a˘i⁄
 *
a
,

750 
oÂutû_a˘i⁄_code
 *
code
)

752 
uöt16_t
 
Àn
;

754 
a
->
ty≥
) {

755 
	`CONSTANT_HTONS
(
OFPAT11_EXPERIMENTER
):

756  
	`decode_nxa°_a˘i⁄
(
a
, 
code
);

758 
	#OFPAT11_ACTION
(
ENUM
, 
STRUCT
, 
EXTENSIBLE
, 
NAME
) \

759 
	`CONSTANT_HTONS
(
ENUM
): \

760 
Àn
 = 
	`¡ohs
(
a
->
hódî
.len); \

761 i‡(
EXTENSIBLE
 \

762 ? 
Àn
 >(
STRUCT
) \

763 : 
Àn
 =(
STRUCT
)) { \

764 *
code
 = 
OFPUTIL_
##
ENUM
; \

767  
OFPERR_OFPBAC_BAD_LEN
; \

769 
	`NOT_REACHED
();

	)

770 
	~"oÂ-utû.def
"

773  
OFPERR_OFPBAC_BAD_TYPE
;

775 
	}
}

777 
oÂîr


778 
	$ouçut_‰om_›íÊow11
(c⁄° 
oÂ11_a˘i⁄_ouçut
 *
ﬂo
,

779 
oÂbuf
 *
out
)

781 
oÂa˘_ouçut
 *
ouçut
;

782 
oÂîr
 
îr‹
;

784 
ouçut
 = 
	`oÂa˘_put_OUTPUT
(
out
);

785 
ouçut
->
max_Àn
 = 
	`¡ohs
(
ﬂo
->max_len);

787 
îr‹
 = 
	`oÂutû_p‹t_‰om_oÂ11
(
ﬂo
->
p‹t
, &
ouçut
->port);

788 i‡(
îr‹
) {

789  
îr‹
;

792  
	`oÂutû_check_ouçut_p‹t
(
ouçut
->
p‹t
, 
OFPP_MAX
);

793 
	}
}

795 
oÂîr


796 
	$oÂa˘_‰om_›íÊow11
(c⁄° 
oÂ_a˘i⁄
 *
a
, 
oÂbuf
 *
out
)

798 
oÂutû_a˘i⁄_code
 
code
;

799 
oÂîr
 
îr‹
;

801 
îr‹
 = 
	`decode_›íÊow11_a˘i⁄
(
a
, &
code
);

802 i‡(
îr‹
) {

803  
îr‹
;

806 
code
) {

807 
OFPUTIL_ACTION_INVALID
:

808 
	#OFPAT10_ACTION
(
ENUM
, 
STRUCT
, 
NAME
Ë
OFPUTIL_
##ENUM:

	)

809 
	~"oÂ-utû.def
"

810 
	`NOT_REACHED
();

812 
OFPUTIL_OFPAT11_OUTPUT
:

813  
	`ouçut_‰om_›íÊow11
((c⁄° 
oÂ11_a˘i⁄_ouçut
 *Ë
a
,

814 
out
);

816 
OFPUTIL_OFPAT11_SET_VLAN_VID
:

817 i‡(
a
->
vœn_vid
.vœn_vid & ~
	`ht⁄s
(0xfff)) {

818  
OFPERR_OFPBAC_BAD_ARGUMENT
;

820 
	`oÂa˘_put_SET_VLAN_VID
(
out
)->
vœn_vid
 = 
	`¡ohs
(
a
->vlan_vid.vlan_vid);

823 
OFPUTIL_OFPAT11_SET_VLAN_PCP
:

824 i‡(
a
->
vœn_p˝
.vlan_pcp & ~7) {

825  
OFPERR_OFPBAC_BAD_ARGUMENT
;

827 
	`oÂa˘_put_SET_VLAN_PCP
(
out
)->
vœn_p˝
 = 
a
->vlan_pcp.vlan_pcp;

830 
OFPUTIL_OFPAT11_POP_VLAN
:

831 
	`oÂa˘_put_STRIP_VLAN
(
out
);

834 
OFPUTIL_OFPAT11_SET_DL_SRC
:

835 
	`mem˝y
(
	`oÂa˘_put_SET_ETH_SRC
(
out
)->
mac
,

836 ((c⁄° 
oÂ_a˘i⁄_dl_addr
 *Ë
a
)->
dl_addr
, 
ETH_ADDR_LEN
);

839 
OFPUTIL_OFPAT11_SET_DL_DST
:

840 
	`mem˝y
(
	`oÂa˘_put_SET_ETH_DST
(
out
)->
mac
,

841 ((c⁄° 
oÂ_a˘i⁄_dl_addr
 *Ë
a
)->
dl_addr
, 
ETH_ADDR_LEN
);

844 
OFPUTIL_OFPAT11_DEC_NW_TTL
:

845 
	`dec_âl_‰om_›íÊow
(
out
, 
code
);

848 
OFPUTIL_OFPAT11_SET_NW_SRC
:

849 
	`oÂa˘_put_SET_IPV4_SRC
(
out
)->
ùv4
 = 
a
->
nw_addr
.nw_addr;

852 
OFPUTIL_OFPAT11_SET_NW_DST
:

853 
	`oÂa˘_put_SET_IPV4_DST
(
out
)->
ùv4
 = 
a
->
nw_addr
.nw_addr;

856 
OFPUTIL_OFPAT11_SET_NW_TOS
:

857 i‡(
a
->
nw_tos
.nw_to†& ~
IP_DSCP_MASK
) {

858  
OFPERR_OFPBAC_BAD_ARGUMENT
;

860 
	`oÂa˘_put_SET_IPV4_DSCP
(
out
)->
ds˝
 = 
a
->
nw_tos
.nw_tos;

863 
OFPUTIL_OFPAT11_SET_TP_SRC
:

864 
	`oÂa˘_put_SET_L4_SRC_PORT
(
out
)->
p‹t
 = 
	`¡ohs
(
a
->
ç_p‹t
.tp_port);

867 
OFPUTIL_OFPAT11_SET_TP_DST
:

868 
	`oÂa˘_put_SET_L4_DST_PORT
(
out
)->
p‹t
 = 
	`¡ohs
(
a
->
ç_p‹t
.tp_port);

871 
OFPUTIL_OFPAT12_SET_FIELD
:

872  
	`nxm_ªg_lﬂd_‰om_›íÊow12_£t_fõld
(

873 (c⁄° 
oÂ12_a˘i⁄_£t_fõld
 *)
a
, 
out
);

875 
	#NXAST_ACTION
(
ENUM
, 
STRUCT
, 
EXTENSIBLE
, 
NAME
Ë
OFPUTIL_
##ENUM:

	)

876 
	~"oÂ-utû.def
"

877  
	`oÂa˘_‰om_nxa°
(
a
, 
code
, 
out
);

880  
îr‹
;

881 
	}
}

883 
oÂîr


884 
	$oÂa˘s_‰om_›íÊow11
(c⁄° 
oÂ_a˘i⁄
 *
ö
, 
size_t
 
n_ö
,

885 
oÂbuf
 *
out
)

887  
	`oÂa˘s_‰om_›íÊow
(
ö
, 
n_ö
, 
out
, 
oÂa˘_‰om_›íÊow11
);

888 
	}
}

892 
	#DEFINE_INST
(
ENUM
, 
STRUCT
, 
EXTENSIBLE
, 
NAME
) \

893 
ölöe
 c⁄° 
STRUCT
 * \

894 
ö°ru˘i⁄_gë_
##
	`ENUM
(c⁄° 
oÂ11_ö°ru˘i⁄
 *
ö°
)\

896 
	`as£π
(
ö°
->
ty≥
 =
	`ht⁄s
(
ENUM
)); \

897  (
STRUCT
 *)
ö°
; \

900 
ölöe
 \

901 
ö°ru˘i⁄_öô_
##
	`ENUM
(
STRUCT
 *
s
) \

903 
	`mem£t
(
s
, 0,  *s); \

904 
s
->
ty≥
 = 
	`ht⁄s
(
ENUM
); \

905 
s
->
Àn
 = 
	`ht⁄s
( *s); \

908 
ölöe
 
STRUCT
 * \

909 
ö°ru˘i⁄_put_
##
	`ENUM
(
oÂbuf
 *
buf
) \

911 
STRUCT
 *
s
 = 
	`oÂbuf_put_unöô
(
buf
,  *s); \

912 
ö°ru˘i⁄_öô_
##
	`ENUM
(
s
); \

913  
s
; \

914 }

	)

915 
	gOVS_INSTRUCTIONS


916 #unde‡
DEFINE_INST


918 
	sö°ru˘i⁄_ty≥_öfo
 {

919 
ovs_ö°ru˘i⁄_ty≥
 
	mty≥
;

920 c⁄° *
	m«me
;

923 c⁄° 
ö°ru˘i⁄_ty≥_öfo
 
	gö°_öfo
[] = {

924 
	#DEFINE_INST
(
ENUM
, 
STRUCT
, 
EXTENSIBLE
, 
NAME
Ë{
OVSINST_
##ENUM, NAME},

	)

925 
OVS_INSTRUCTIONS


926 #unde‡
DEFINE_INST


930 
	$oÂa˘_ö°ru˘i⁄_«me_‰om_ty≥
(
ovs_ö°ru˘i⁄_ty≥
 
ty≥
)

932  
ö°_öfo
[
ty≥
].
«me
;

933 
	}
}

936 
	$oÂa˘_ö°ru˘i⁄_ty≥_‰om_«me
(c⁄° *
«me
)

938 c⁄° 
ö°ru˘i⁄_ty≥_öfo
 *
p
;

939 
p
 = 
ö°_öfo
;Ö < &ö°_öfo[
	`ARRAY_SIZE
(inst_info)];Ö++) {

940 i‡(!
	`°rˇ£cmp
(
«me
, 
p
->name)) {

941  
p
->
ty≥
;

945 
	}
}

947 
ölöe
 
oÂ11_ö°ru˘i⁄
 *

948 
	$ö°ru˘i⁄_√xt
(c⁄° 
oÂ11_ö°ru˘i⁄
 *
ö°
)

950  ((
oÂ11_ö°ru˘i⁄
 *) (*)

951 ((
uöt8_t
 *Ë
ö°
 + 
	`¡ohs
(ö°->
Àn
)));

952 
	}
}

954 
ölöe
 
boﬁ


955 
	$ö°ru˘i⁄_is_vÆid
(c⁄° 
oÂ11_ö°ru˘i⁄
 *
ö°
,

956 
size_t
 
n_ö°ru˘i⁄s
)

958 
uöt16_t
 
Àn
 = 
	`¡ohs
(
ö°
->len);

959  (!(
Àn
 % 
OFP11_INSTRUCTION_ALIGN
)

960 && 
Àn
 > *
ö°


961 && 
Àn
 /  *
ö°
 <
n_ö°ru˘i⁄s
);

962 
	}
}

965 
	#INSTRUCTION_FOR_EACH
(
ITER
, 
LEFT
, 
INSTRUCTIONS
, 
N_INSTRUCTIONS
) \

966 (
ITER
Ë(
INSTRUCTIONS
), (
LEFT
Ë(
N_INSTRUCTIONS
); \

967 (
LEFT
Ë> 0 && 
	`ö°ru˘i⁄_is_vÆid
(
ITER
, LEFT); \

968 ((
LEFT
Ë-(
	`¡ohs
((
ITER
)->
Àn
) \

969 / (
oÂ11_ö°ru˘i⁄
)), \

970 (
ITER
Ë
	`ö°ru˘i⁄_√xt
(ITER)))

	)

972 
oÂîr


973 
	$decode_›íÊow11_ö°ru˘i⁄
(c⁄° 
oÂ11_ö°ru˘i⁄
 *
ö°
,

974 
ovs_ö°ru˘i⁄_ty≥
 *
ty≥
)

976 
uöt16_t
 
Àn
 = 
	`¡ohs
(
ö°
->len);

978 
ö°
->
ty≥
) {

979 
	`CONSTANT_HTONS
(
OFPIT11_EXPERIMENTER
):

980  
OFPERR_OFPBIC_BAD_EXPERIMENTER
;

982 
	#DEFINE_INST
(
ENUM
, 
STRUCT
, 
EXTENSIBLE
, 
NAME
) \

983 
	`CONSTANT_HTONS
(
ENUM
): \

984 i‡(
EXTENSIBLE
 \

985 ? 
Àn
 >(
STRUCT
) \

986 : 
Àn
 =(
STRUCT
)) { \

987 *
ty≥
 = 
OVSINST_
##
ENUM
; \

990  
OFPERR_OFPBIC_BAD_LEN
; \

991 }

	)

992 
OVS_INSTRUCTIONS


993 #unde‡
DEFINE_INST


996  
OFPERR_OFPBIC_UNKNOWN_INST
;

998 
	}
}

1000 
oÂîr


1001 
	$decode_›íÊow11_ö°ru˘i⁄s
(c⁄° 
oÂ11_ö°ru˘i⁄
 
ö°s
[],

1002 
size_t
 
n_ö°s
,

1003 c⁄° 
oÂ11_ö°ru˘i⁄
 *
out
[])

1005 c⁄° 
oÂ11_ö°ru˘i⁄
 *
ö°
;

1006 
size_t
 
À·
;

1008 
	`mem£t
(
out
, 0, 
N_OVS_INSTRUCTIONS
 *  *out);

1009 
	`INSTRUCTION_FOR_EACH
 (
ö°
, 
À·
, 
ö°s
, 
n_ö°s
) {

1010 
ovs_ö°ru˘i⁄_ty≥
 
ty≥
;

1011 
oÂîr
 
îr‹
;

1013 
îr‹
 = 
	`decode_›íÊow11_ö°ru˘i⁄
(
ö°
, &
ty≥
);

1014 i‡(
îr‹
) {

1015  
îr‹
;

1018 i‡(
out
[
ty≥
]) {

1019  
OFPERR_OFPIT_BAD_INSTRUCTION
;

1021 
out
[
ty≥
] = 
ö°
;

1024 i‡(
À·
) {

1025 
	`VLOG_WARN_RL
(&
æ
, "bad instruction formatát offset %zu",

1026 (
n_ö°s
 - 
À·
Ë*  *
ö°
);

1027  
OFPERR_OFPBIC_BAD_LEN
;

1030 
	}
}

1033 
	$gë_a˘i⁄s_‰om_ö°ru˘i⁄
(c⁄° 
oÂ11_ö°ru˘i⁄
 *
ö°
,

1034 c⁄° 
oÂ_a˘i⁄
 **
a˘i⁄s
,

1035 
size_t
 *
n_a˘i⁄s
)

1037 *
a˘i⁄s
 = (c⁄° 
oÂ_a˘i⁄
 *Ë(
ö°
 + 1);

1038 *
n_a˘i⁄s
 = (
	`¡ohs
(
ö°
->
Àn
Ë-  *ö°Ë/ 
OFP11_INSTRUCTION_ALIGN
;

1039 
	}
}

1055 
oÂîr


1056 
	$oÂa˘s_puŒ_›íÊow11_a˘i⁄s
(
oÂbuf
 *
›íÊow
,

1057 
a˘i⁄s_Àn
,

1058 
oÂbuf
 *
oÂa˘s
)

1060  
	`oÂa˘s_puŒ_a˘i⁄s
(
›íÊow
, 
a˘i⁄s_Àn
, 
oÂa˘s
,

1061 
oÂa˘s_‰om_›íÊow11
);

1062 
	}
}

1064 
oÂîr


1065 
	$oÂa˘s_puŒ_›íÊow11_ö°ru˘i⁄s
(
oÂbuf
 *
›íÊow
,

1066 
ö°ru˘i⁄s_Àn
,

1067 
oÂbuf
 *
oÂa˘s
)

1069 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 5);

1070 c⁄° 
oÂ11_ö°ru˘i⁄
 *
ö°ru˘i⁄s
;

1071 c⁄° 
oÂ11_ö°ru˘i⁄
 *
ö°s
[
N_OVS_INSTRUCTIONS
];

1072 
oÂîr
 
îr‹
;

1074 
	`oÂbuf_˛ór
(
oÂa˘s
);

1076 i‡(
ö°ru˘i⁄s_Àn
 % 
OFP11_INSTRUCTION_ALIGN
 != 0) {

1077 
	`VLOG_WARN_RL
(&
æ
, "OpenFlow message instructionsÜength %u isÇotá "

1079 
ö°ru˘i⁄s_Àn
, 
OFP11_INSTRUCTION_ALIGN
);

1080 
îr‹
 = 
OFPERR_OFPBIC_BAD_LEN
;

1081 
exô
;

1084 
ö°ru˘i⁄s
 = 
	`oÂbuf_åy_puŒ
(
›íÊow
, 
ö°ru˘i⁄s_Àn
);

1085 i‡(
ö°ru˘i⁄s
 =
NULL
) {

1086 
	`VLOG_WARN_RL
(&
æ
, "OpenFlow message instructionsÜength %uÉxceeds "

1088 
ö°ru˘i⁄s_Àn
, 
›íÊow
->
size
);

1089 
îr‹
 = 
OFPERR_OFPBIC_BAD_LEN
;

1090 
exô
;

1093 
îr‹
 = 
	`decode_›íÊow11_ö°ru˘i⁄s
(

1094 
ö°ru˘i⁄s
, 
ö°ru˘i⁄s_Àn
 / 
OFP11_INSTRUCTION_ALIGN
,

1095 
ö°s
);

1096 i‡(
îr‹
) {

1097 
exô
;

1100 i‡(
ö°s
[
OVSINST_OFPIT11_APPLY_ACTIONS
]) {

1101 c⁄° 
oÂ_a˘i⁄
 *
a˘i⁄s
;

1102 
size_t
 
n_a˘i⁄s
;

1104 
	`gë_a˘i⁄s_‰om_ö°ru˘i⁄
(
ö°s
[
OVSINST_OFPIT11_APPLY_ACTIONS
],

1105 &
a˘i⁄s
, &
n_a˘i⁄s
);

1106 
îr‹
 = 
	`oÂa˘s_‰om_›íÊow11
(
a˘i⁄s
, 
n_a˘i⁄s
, 
oÂa˘s
);

1107 i‡(
îr‹
) {

1108 
exô
;

1111 i‡(
ö°s
[
OVSINST_OFPIT11_CLEAR_ACTIONS
]) {

1112 
	`ö°ru˘i⁄_gë_OFPIT11_CLEAR_ACTIONS
(

1113 
ö°s
[
OVSINST_OFPIT11_CLEAR_ACTIONS
]);

1114 
	`oÂa˘_put_CLEAR_ACTIONS
(
oÂa˘s
);

1117 i‡(
ö°s
[
OVSINST_OFPIT11_WRITE_METADATA
]) {

1118 c⁄° 
oÂ11_ö°ru˘i⁄_wrôe_mëad©a
 *
oiwm
;

1119 
oÂa˘_mëad©a
 *
om
;

1121 
oiwm
 = (c⁄° 
oÂ11_ö°ru˘i⁄_wrôe_mëad©a
 *)

1122 
ö°s
[
OVSINST_OFPIT11_WRITE_METADATA
];

1124 
om
 = 
	`oÂa˘_put_WRITE_METADATA
(
oÂa˘s
);

1125 
om
->
mëad©a
 = 
oiwm
->metadata;

1126 
om
->
mask
 = 
oiwm
->
mëad©a_mask
;

1128 i‡(
ö°s
[
OVSINST_OFPIT11_GOTO_TABLE
]) {

1129 c⁄° 
oÂ11_ö°ru˘i⁄_gŸo_èbÀ
 *
oigt
;

1130 
oÂa˘_gŸo_èbÀ
 *
ogt
;

1132 
oigt
 = 
	`ö°ru˘i⁄_gë_OFPIT11_GOTO_TABLE
(

1133 
ö°s
[
OVSINST_OFPIT11_GOTO_TABLE
]);

1134 
ogt
 = 
	`oÂa˘_put_GOTO_TABLE
(
oÂa˘s
);

1135 
ogt
->
èbÀ_id
 = 
oigt
->table_id;

1138 i‡(
ö°s
[
OVSINST_OFPIT11_WRITE_ACTIONS
]) {

1139 
îr‹
 = 
OFPERR_OFPBIC_UNSUP_INST
;

1140 
exô
;

1143 
îr‹
 = 
	`oÂa˘s_vîify
(
oÂa˘s
->
d©a
, oÂa˘s->
size
);

1144 
exô
:

1145 i‡(
îr‹
) {

1146 
	`oÂbuf_˛ór
(
oÂa˘s
);

1148  
îr‹
;

1149 
	}
}

1151 
oÂîr


1152 
	$oÂa˘_check__
(c⁄° 
oÂa˘
 *
a
, c⁄° 
Êow
 *Êow, 
max_p‹ts
)

1154 c⁄° 
oÂa˘_íqueue
 *
íqueue
;

1156 
a
->
ty≥
) {

1157 
OFPACT_OUTPUT
:

1158  
	`oÂutû_check_ouçut_p‹t
(
	`oÂa˘_gë_OUTPUT
(
a
)->
p‹t
,

1159 
max_p‹ts
);

1161 
OFPACT_CONTROLLER
:

1164 
OFPACT_ENQUEUE
:

1165 
íqueue
 = 
	`oÂa˘_gë_ENQUEUE
(
a
);

1166 i‡(
íqueue
->
p‹t
 >
max_p‹ts
 &&Énqueue->p‹à!
OFPP_IN_PORT


1167 && 
íqueue
->
p‹t
 !
OFPP_LOCAL
) {

1168  
OFPERR_OFPBAC_BAD_OUT_PORT
;

1172 
OFPACT_OUTPUT_REG
:

1173  
	`mf_check_§c
(&
	`oÂa˘_gë_OUTPUT_REG
(
a
)->
§c
, 
Êow
);

1175 
OFPACT_BUNDLE
:

1176  
	`bundÀ_check
(
	`oÂa˘_gë_BUNDLE
(
a
), 
max_p‹ts
, 
Êow
);

1178 
OFPACT_SET_VLAN_VID
:

1179 
OFPACT_SET_VLAN_PCP
:

1180 
OFPACT_STRIP_VLAN
:

1181 
OFPACT_SET_ETH_SRC
:

1182 
OFPACT_SET_ETH_DST
:

1183 
OFPACT_SET_IPV4_SRC
:

1184 
OFPACT_SET_IPV4_DST
:

1185 
OFPACT_SET_IPV4_DSCP
:

1186 
OFPACT_SET_L4_SRC_PORT
:

1187 
OFPACT_SET_L4_DST_PORT
:

1190 
OFPACT_REG_MOVE
:

1191  
	`nxm_ªg_move_check
(
	`oÂa˘_gë_REG_MOVE
(
a
), 
Êow
);

1193 
OFPACT_REG_LOAD
:

1194  
	`nxm_ªg_lﬂd_check
(
	`oÂa˘_gë_REG_LOAD
(
a
), 
Êow
);

1196 
OFPACT_DEC_TTL
:

1197 
OFPACT_SET_TUNNEL
:

1198 
OFPACT_SET_QUEUE
:

1199 
OFPACT_POP_QUEUE
:

1200 
OFPACT_FIN_TIMEOUT
:

1201 
OFPACT_RESUBMIT
:

1204 
OFPACT_LEARN
:

1205  
	`À¨n_check
(
	`oÂa˘_gë_LEARN
(
a
), 
Êow
);

1207 
OFPACT_MULTIPATH
:

1208  
	`mu…ù©h_check
(
	`oÂa˘_gë_MULTIPATH
(
a
), 
Êow
);

1210 
OFPACT_AUTOPATH
:

1211  
	`aut›©h_check
(
	`oÂa˘_gë_AUTOPATH
(
a
), 
Êow
);

1213 
OFPACT_NOTE
:

1214 
OFPACT_EXIT
:

1217 
OFPACT_CLEAR_ACTIONS
:

1218 
OFPACT_WRITE_METADATA
:

1219 
OFPACT_GOTO_TABLE
:

1222 
OFPACT_INIT_CODING
:

1223 
OFPACT_ENCODE
:

1224 
OFPACT_DECODE
:

1229 
	`NOT_REACHED
();

1231 
	}
}

1236 
oÂîr


1237 
	$oÂa˘s_check
(c⁄° 
oÂa˘
 
oÂa˘s
[], 
size_t
 
oÂa˘s_Àn
,

1238 c⁄° 
Êow
 *Êow, 
max_p‹ts
)

1240 c⁄° 
oÂa˘
 *
a
;

1242 
	`OFPACT_FOR_EACH
 (
a
, 
oÂa˘s
, 
oÂa˘s_Àn
) {

1243 
oÂîr
 
îr‹
 = 
	`oÂa˘_check__
(
a
, 
Êow
, 
max_p‹ts
);

1244 i‡(
îr‹
) {

1245  
îr‹
;

1250 
	}
}

1254 
oÂîr


1255 
	$oÂa˘s_vîify
(c⁄° 
oÂa˘
 
oÂa˘s
[], 
size_t
 
oÂa˘s_Àn
)

1257 c⁄° 
oÂa˘
 *
a
;

1258 c⁄° 
oÂa˘_mëad©a
 *
om
 = 
NULL
;

1260 
	`OFPACT_FOR_EACH
 (
a
, 
oÂa˘s
, 
oÂa˘s_Àn
) {

1261 i‡(
om
) {

1262 i‡(
a
->
ty≥
 =
OFPACT_WRITE_METADATA
) {

1263 
	`VLOG_WARN
("duplicate write_metadata instruction specified");

1265  
OFPERR_OFPBAC_UNSUPPORTED_ORDER
;

1267 
	`VLOG_WARN
("write_metadata instruction must be specifiedáfter "

1269  
OFPERR_OFPBAC_UNSUPPORTED_ORDER
;

1273 i‡(
a
->
ty≥
 =
OFPACT_WRITE_METADATA
) {

1274 
om
 = (c⁄° 
oÂa˘_mëad©a
 *Ë
a
;

1279 
	}
}

1284 
	$oÂa˘_ouçut_ªg_to_nxa°
(c⁄° 
oÂa˘_ouçut_ªg
 *
ouçut_ªg
,

1285 
oÂbuf
 *
out
)

1287 
nx_a˘i⁄_ouçut_ªg
 *
«‹
 = 
	`oÂutû_put_NXAST_OUTPUT_REG
(
out
);

1289 
«‹
->
ofs_nbôs
 = 
	`nxm_ícode_ofs_nbôs
(
ouçut_ªg
->
§c
.
ofs
,

1290 
ouçut_ªg
->
§c
.
n_bôs
);

1291 
«‹
->
§c
 = 
	`ht⁄l
(
ouçut_ªg
->§c.
fõld
->
nxm_hódî
);

1292 
«‹
->
max_Àn
 = 
	`ht⁄s
(
ouçut_ªg
->max_len);

1293 
	}
}

1296 
	$oÂa˘_ªsubmô_to_nxa°
(c⁄° 
oÂa˘_ªsubmô
 *
ªsubmô
,

1297 
oÂbuf
 *
out
)

1299 
nx_a˘i⁄_ªsubmô
 *
«r
;

1301 i‡(
ªsubmô
->
èbÀ_id
 == 0xff

1302 && 
ªsubmô
->
oÂa˘
.
com∑t
 !
OFPUTIL_NXAST_RESUBMIT_TABLE
) {

1303 
«r
 = 
	`oÂutû_put_NXAST_RESUBMIT
(
out
);

1305 
«r
 = 
	`oÂutû_put_NXAST_RESUBMIT_TABLE
(
out
);

1306 
«r
->
èbÀ
 = 
ªsubmô
->
èbÀ_id
;

1308 
«r
->
ö_p‹t
 = 
	`ht⁄s
(
ªsubmô
->in_port);

1309 
	}
}

1312 
	$oÂa˘_£t_tu¬ñ_to_nxa°
(c⁄° 
oÂa˘_tu¬ñ
 *
tu¬ñ
,

1313 
oÂbuf
 *
out
)

1315 
uöt64_t
 
tun_id
 = 
tu¬ñ
->tun_id;

1317 i‡(
tun_id
 <
UINT32_MAX


1318 && 
tu¬ñ
->
oÂa˘
.
com∑t
 !
OFPUTIL_NXAST_SET_TUNNEL64
) {

1319 
	`oÂutû_put_NXAST_SET_TUNNEL
(
out
)->
tun_id
 = 
	`ht⁄l
(tun_id);

1321 
	`oÂutû_put_NXAST_SET_TUNNEL64
(
out
)->
tun_id
 = 
	`ht⁄Œ
(tun_id);

1323 
	}
}

1326 
	$oÂa˘_wrôe_mëad©a_to_nxa°
(c⁄° 
oÂa˘_mëad©a
 *
om
,

1327 
oÂbuf
 *
out
)

1329 
nx_a˘i⁄_wrôe_mëad©a
 *
«wm
;

1331 
«wm
 = 
	`oÂutû_put_NXAST_WRITE_METADATA
(
out
);

1332 
«wm
->
mëad©a
 = 
om
->metadata;

1333 
«wm
->
mask
 = 
om
->mask;

1334 
	}
}

1337 
	$oÂa˘_nŸe_to_nxa°
(c⁄° 
oÂa˘_nŸe
 *
nŸe
, 
oÂbuf
 *
out
)

1339 
size_t
 
°¨t_ofs
 = 
out
->
size
;

1340 
nx_a˘i⁄_nŸe
 *
«n
;

1341 
ªmaödî
;

1342 
Àn
;

1344 
«n
 = 
	`oÂutû_put_NXAST_NOTE
(
out
);

1345 
out
->
size
 - 
«n
->
nŸe
;

1347 
	`oÂbuf_put
(
out
, 
nŸe
->
d©a
,ÇŸe->
Àngth
);

1349 
Àn
 = 
out
->
size
 - 
°¨t_ofs
;

1350 
ªmaödî
 = 
Àn
 % 
OFP_ACTION_ALIGN
;

1351 i‡(
ªmaödî
) {

1352 
	`oÂbuf_put_zîos
(
out
, 
OFP_ACTION_ALIGN
 - 
ªmaödî
);

1354 
«n
 = (
nx_a˘i⁄_nŸe
 *)((*)
out
->
d©a
 + 
°¨t_ofs
);

1355 
«n
->
Àn
 = 
	`ht⁄s
(
out
->
size
 - 
°¨t_ofs
);

1356 
	}
}

1359 
	$oÂa˘_c⁄åﬁÀr_to_nxa°
(c⁄° 
oÂa˘_c⁄åﬁÀr
 *
oc
,

1360 
oÂbuf
 *
out
)

1362 
nx_a˘i⁄_c⁄åﬁÀr
 *
«c
;

1364 
«c
 = 
	`oÂutû_put_NXAST_CONTROLLER
(
out
);

1365 
«c
->
max_Àn
 = 
	`ht⁄s
(
oc
->max_len);

1366 
«c
->
c⁄åﬁÀr_id
 = 
	`ht⁄s
(
oc
->controller_id);

1367 
«c
->
ªas⁄
 = 
oc
->reason;

1368 
	}
}

1371 
	$oÂa˘_dec_âl_to_nxa°
(c⁄° 
oÂa˘_˙t_ids
 *
oc_ids
,

1372 
oÂbuf
 *
out
)

1374 i‡(
oc_ids
->
oÂa˘
.
com∑t
 =
OFPUTIL_NXAST_DEC_TTL
) {

1375 
	`oÂutû_put_NXAST_DEC_TTL
(
out
);

1377 
nx_a˘i⁄_˙t_ids
 *
«c_ids
 =

1378 
	`oÂutû_put_NXAST_DEC_TTL_CNT_IDS
(
out
);

1379 
ids_Àn
 = 
	`ROUND_UP
(2 * 
oc_ids
->
n_c⁄åﬁÀrs
, 
OFP_ACTION_ALIGN
);

1380 
ovs_be16
 *
ids
;

1381 
size_t
 
i
;

1383 
«c_ids
->
Àn
 = 
	`ht⁄s
(
	`¡ohs
“ac_ids->ÀnË+ 
ids_Àn
);

1384 
«c_ids
->
n_c⁄åﬁÀrs
 = 
	`ht⁄s
(
oc_ids
->n_controllers);

1386 
ids
 = 
	`oÂbuf_put_zîos
(
out
, 
ids_Àn
);

1387 
i
 = 0; i < 
oc_ids
->
n_c⁄åﬁÀrs
; i++) {

1388 
ids
[
i
] = 
	`ht⁄s
(
oc_ids
->
˙t_ids
[i]);

1391 
	}
}

1394 
	$oÂa˘_fö_timeout_to_nxa°
(c⁄° 
oÂa˘_fö_timeout
 *
fö_timeout
,

1395 
oÂbuf
 *
out
)

1397 
nx_a˘i⁄_fö_timeout
 *
«·
 = 
	`oÂutû_put_NXAST_FIN_TIMEOUT
(
out
);

1398 
«·
->
fö_idÀ_timeout
 = 
	`ht⁄s
(
fö_timeout
->fin_idle_timeout);

1399 
«·
->
fö_h¨d_timeout
 = 
	`ht⁄s
(
fö_timeout
->fin_hard_timeout);

1400 
	}
}

1403 
	$oÂa˘_to_nxa°
(c⁄° 
oÂa˘
 *
a
, 
oÂbuf
 *
out
)

1405 
a
->
ty≥
) {

1406 
OFPACT_CONTROLLER
:

1407 
	`oÂa˘_c⁄åﬁÀr_to_nxa°
(
	`oÂa˘_gë_CONTROLLER
(
a
), 
out
);

1410 
OFPACT_OUTPUT_REG
:

1411 
	`oÂa˘_ouçut_ªg_to_nxa°
(
	`oÂa˘_gë_OUTPUT_REG
(
a
), 
out
);

1414 
OFPACT_BUNDLE
:

1415 
	`bundÀ_to_nxa°
(
	`oÂa˘_gë_BUNDLE
(
a
), 
out
);

1418 
OFPACT_REG_MOVE
:

1419 
	`nxm_ªg_move_to_nxa°
(
	`oÂa˘_gë_REG_MOVE
(
a
), 
out
);

1422 
OFPACT_REG_LOAD
:

1423 
	`nxm_ªg_lﬂd_to_nxa°
(
	`oÂa˘_gë_REG_LOAD
(
a
), 
out
);

1426 
OFPACT_DEC_TTL
:

1427 
	`oÂa˘_dec_âl_to_nxa°
(
	`oÂa˘_gë_DEC_TTL
(
a
), 
out
);

1430 
OFPACT_SET_TUNNEL
:

1431 
	`oÂa˘_£t_tu¬ñ_to_nxa°
(
	`oÂa˘_gë_SET_TUNNEL
(
a
), 
out
);

1434 
OFPACT_WRITE_METADATA
:

1435 
	`oÂa˘_wrôe_mëad©a_to_nxa°
(
	`oÂa˘_gë_WRITE_METADATA
(
a
), 
out
);

1438 
OFPACT_SET_QUEUE
:

1439 
	`oÂutû_put_NXAST_SET_QUEUE
(
out
)->
queue_id


1440 
	`ht⁄l
(
	`oÂa˘_gë_SET_QUEUE
(
a
)->
queue_id
);

1443 
OFPACT_POP_QUEUE
:

1444 
	`oÂutû_put_NXAST_POP_QUEUE
(
out
);

1447 
OFPACT_FIN_TIMEOUT
:

1448 
	`oÂa˘_fö_timeout_to_nxa°
(
	`oÂa˘_gë_FIN_TIMEOUT
(
a
), 
out
);

1451 
OFPACT_RESUBMIT
:

1452 
	`oÂa˘_ªsubmô_to_nxa°
(
	`oÂa˘_gë_RESUBMIT
(
a
), 
out
);

1455 
OFPACT_LEARN
:

1456 
	`À¨n_to_nxa°
(
	`oÂa˘_gë_LEARN
(
a
), 
out
);

1459 
OFPACT_MULTIPATH
:

1460 
	`mu…ù©h_to_nxa°
(
	`oÂa˘_gë_MULTIPATH
(
a
), 
out
);

1463 
OFPACT_AUTOPATH
:

1464 
	`aut›©h_to_nxa°
(
	`oÂa˘_gë_AUTOPATH
(
a
), 
out
);

1467 
OFPACT_NOTE
:

1468 
	`oÂa˘_nŸe_to_nxa°
(
	`oÂa˘_gë_NOTE
(
a
), 
out
);

1471 
OFPACT_EXIT
:

1472 
	`oÂutû_put_NXAST_EXIT
(
out
);

1475 
OFPACT_OUTPUT
:

1476 
OFPACT_ENQUEUE
:

1477 
OFPACT_SET_VLAN_VID
:

1478 
OFPACT_SET_VLAN_PCP
:

1479 
OFPACT_STRIP_VLAN
:

1480 
OFPACT_SET_ETH_SRC
:

1481 
OFPACT_SET_ETH_DST
:

1482 
OFPACT_SET_IPV4_SRC
:

1483 
OFPACT_SET_IPV4_DST
:

1484 
OFPACT_SET_IPV4_DSCP
:

1485 
OFPACT_SET_L4_SRC_PORT
:

1486 
OFPACT_SET_L4_DST_PORT
:

1487 
OFPACT_CLEAR_ACTIONS
:

1488 
OFPACT_GOTO_TABLE
:

1489 
	`NOT_REACHED
();

1491 
	}
}

1496 
	$oÂa˘_ouçut_to_›íÊow10
(c⁄° 
oÂa˘_ouçut
 *
ouçut
,

1497 
oÂbuf
 *
out
)

1499 
oÂ10_a˘i⁄_ouçut
 *
ﬂo
;

1501 
ﬂo
 = 
	`oÂutû_put_OFPAT10_OUTPUT
(
out
);

1502 
ﬂo
->
p‹t
 = 
	`ht⁄s
(
ouçut
->port);

1503 
ﬂo
->
max_Àn
 = 
	`ht⁄s
(
ouçut
->max_len);

1504 
	}
}

1507 
	$oÂa˘_íqueue_to_›íÊow10
(c⁄° 
oÂa˘_íqueue
 *
íqueue
,

1508 
oÂbuf
 *
out
)

1510 
oÂ_a˘i⁄_íqueue
 *
ﬂe
;

1512 
ﬂe
 = 
	`oÂutû_put_OFPAT10_ENQUEUE
(
out
);

1513 
ﬂe
->
p‹t
 = 
	`ht⁄s
(
íqueue
->port);

1514 
ﬂe
->
queue_id
 = 
	`ht⁄l
(
íqueue
->
queue
);

1515 
	}
}

1518 
	$oÂa˘_to_›íÊow10
(c⁄° 
oÂa˘
 *
a
, 
oÂbuf
 *
out
)

1520 
a
->
ty≥
) {

1521 
OFPACT_OUTPUT
:

1522 
	`oÂa˘_ouçut_to_›íÊow10
(
	`oÂa˘_gë_OUTPUT
(
a
), 
out
);

1525 
OFPACT_ENQUEUE
:

1526 
	`oÂa˘_íqueue_to_›íÊow10
(
	`oÂa˘_gë_ENQUEUE
(
a
), 
out
);

1529 
OFPACT_SET_VLAN_VID
:

1530 
	`oÂutû_put_OFPAT10_SET_VLAN_VID
(
out
)->
vœn_vid


1531 
	`ht⁄s
(
	`oÂa˘_gë_SET_VLAN_VID
(
a
)->
vœn_vid
);

1534 
OFPACT_SET_VLAN_PCP
:

1535 
	`oÂutû_put_OFPAT10_SET_VLAN_PCP
(
out
)->
vœn_p˝


1536 
	`oÂa˘_gë_SET_VLAN_PCP
(
a
)->
vœn_p˝
;

1539 
OFPACT_STRIP_VLAN
:

1540 
	`oÂutû_put_OFPAT10_STRIP_VLAN
(
out
);

1543 
OFPACT_SET_ETH_SRC
:

1544 
	`mem˝y
(
	`oÂutû_put_OFPAT10_SET_DL_SRC
(
out
)->
dl_addr
,

1545 
	`oÂa˘_gë_SET_ETH_SRC
(
a
)->
mac
, 
ETH_ADDR_LEN
);

1548 
OFPACT_SET_ETH_DST
:

1549 
	`mem˝y
(
	`oÂutû_put_OFPAT10_SET_DL_DST
(
out
)->
dl_addr
,

1550 
	`oÂa˘_gë_SET_ETH_DST
(
a
)->
mac
, 
ETH_ADDR_LEN
);

1553 
OFPACT_SET_IPV4_SRC
:

1554 
	`oÂutû_put_OFPAT10_SET_NW_SRC
(
out
)->
nw_addr


1555 
	`oÂa˘_gë_SET_IPV4_SRC
(
a
)->
ùv4
;

1558 
OFPACT_SET_IPV4_DST
:

1559 
	`oÂutû_put_OFPAT10_SET_NW_DST
(
out
)->
nw_addr


1560 
	`oÂa˘_gë_SET_IPV4_DST
(
a
)->
ùv4
;

1563 
OFPACT_SET_IPV4_DSCP
:

1564 
	`oÂutû_put_OFPAT10_SET_NW_TOS
(
out
)->
nw_tos


1565 
	`oÂa˘_gë_SET_IPV4_DSCP
(
a
)->
ds˝
;

1568 
OFPACT_SET_L4_SRC_PORT
:

1569 
	`oÂutû_put_OFPAT10_SET_TP_SRC
(
out
)->
ç_p‹t


1570 
	`ht⁄s
(
	`oÂa˘_gë_SET_L4_SRC_PORT
(
a
)->
p‹t
);

1573 
OFPACT_SET_L4_DST_PORT
:

1574 
	`oÂutû_put_OFPAT10_SET_TP_DST
(
out
)->
ç_p‹t


1575 
	`ht⁄s
(
	`oÂa˘_gë_SET_L4_DST_PORT
(
a
)->
p‹t
);

1578 
OFPACT_CLEAR_ACTIONS
:

1579 
OFPACT_GOTO_TABLE
:

1583 
OFPACT_CONTROLLER
:

1584 
OFPACT_OUTPUT_REG
:

1585 
OFPACT_BUNDLE
:

1586 
OFPACT_REG_MOVE
:

1587 
OFPACT_REG_LOAD
:

1588 
OFPACT_DEC_TTL
:

1589 
OFPACT_SET_TUNNEL
:

1590 
OFPACT_WRITE_METADATA
:

1591 
OFPACT_SET_QUEUE
:

1592 
OFPACT_POP_QUEUE
:

1593 
OFPACT_FIN_TIMEOUT
:

1594 
OFPACT_RESUBMIT
:

1595 
OFPACT_LEARN
:

1596 
OFPACT_MULTIPATH
:

1597 
OFPACT_AUTOPATH
:

1598 
OFPACT_NOTE
:

1599 
OFPACT_EXIT
:

1600 
	`oÂa˘_to_nxa°
(
a
, 
out
);

1603 
	}
}

1609 
	$oÂa˘s_put_›íÊow10
(c⁄° 
oÂa˘
 
oÂa˘s
[], 
size_t
 
oÂa˘s_Àn
,

1610 
oÂbuf
 *
›íÊow
)

1612 c⁄° 
oÂa˘
 *
a
;

1614 
	`OFPACT_FOR_EACH
 (
a
, 
oÂa˘s
, 
oÂa˘s_Àn
) {

1615 
	`oÂa˘_to_›íÊow10
(
a
, 
›íÊow
);

1617 
	}
}

1622 
	$oÂa˘_ouçut_to_›íÊow11
(c⁄° 
oÂa˘_ouçut
 *
ouçut
,

1623 
oÂbuf
 *
out
)

1625 
oÂ11_a˘i⁄_ouçut
 *
ﬂo
;

1627 
ﬂo
 = 
	`oÂutû_put_OFPAT11_OUTPUT
(
out
);

1628 
ﬂo
->
p‹t
 = 
	`oÂutû_p‹t_to_oÂ11
(
ouçut
->port);

1629 
ﬂo
->
max_Àn
 = 
	`ht⁄s
(
ouçut
->max_len);

1630 
	}
}

1633 
	$oÂa˘_dec_âl_to_›íÊow11
(c⁄° 
oÂa˘_˙t_ids
 *
dec_âl
,

1634 
oÂbuf
 *
out
)

1636 i‡(
dec_âl
->
n_c⁄åﬁÀrs
 =1 && dec_âl->
˙t_ids
[0] == 0

1637 && (!
dec_âl
->
oÂa˘
.
com∑t
 ||

1638 
dec_âl
->
oÂa˘
.
com∑t
 =
OFPUTIL_OFPAT11_DEC_NW_TTL
)) {

1639 
	`oÂutû_put_OFPAT11_DEC_NW_TTL
(
out
);

1641 
	`oÂa˘_dec_âl_to_nxa°
(
dec_âl
, 
out
);

1643 
	}
}

1646 
	$oÂa˘_to_›íÊow11
(c⁄° 
oÂa˘
 *
a
, 
oÂbuf
 *
out
)

1648 
a
->
ty≥
) {

1649 
OFPACT_OUTPUT
:

1650  
	`oÂa˘_ouçut_to_›íÊow11
(
	`oÂa˘_gë_OUTPUT
(
a
), 
out
);

1652 
OFPACT_ENQUEUE
:

1656 
OFPACT_SET_VLAN_VID
:

1657 
	`oÂutû_put_OFPAT11_SET_VLAN_VID
(
out
)->
vœn_vid


1658 
	`ht⁄s
(
	`oÂa˘_gë_SET_VLAN_VID
(
a
)->
vœn_vid
);

1661 
OFPACT_SET_VLAN_PCP
:

1662 
	`oÂutû_put_OFPAT11_SET_VLAN_PCP
(
out
)->
vœn_p˝


1663 
	`oÂa˘_gë_SET_VLAN_PCP
(
a
)->
vœn_p˝
;

1666 
OFPACT_STRIP_VLAN
:

1667 
	`oÂutû_put_OFPAT11_POP_VLAN
(
out
);

1670 
OFPACT_SET_ETH_SRC
:

1671 
	`mem˝y
(
	`oÂutû_put_OFPAT11_SET_DL_SRC
(
out
)->
dl_addr
,

1672 
	`oÂa˘_gë_SET_ETH_SRC
(
a
)->
mac
, 
ETH_ADDR_LEN
);

1675 
OFPACT_SET_ETH_DST
:

1676 
	`mem˝y
(
	`oÂutû_put_OFPAT11_SET_DL_DST
(
out
)->
dl_addr
,

1677 
	`oÂa˘_gë_SET_ETH_DST
(
a
)->
mac
, 
ETH_ADDR_LEN
);

1680 
OFPACT_SET_IPV4_SRC
:

1681 
	`oÂutû_put_OFPAT11_SET_NW_SRC
(
out
)->
nw_addr


1682 
	`oÂa˘_gë_SET_IPV4_SRC
(
a
)->
ùv4
;

1685 
OFPACT_SET_IPV4_DST
:

1686 
	`oÂutû_put_OFPAT11_SET_NW_DST
(
out
)->
nw_addr


1687 
	`oÂa˘_gë_SET_IPV4_DST
(
a
)->
ùv4
;

1690 
OFPACT_SET_IPV4_DSCP
:

1691 
	`oÂutû_put_OFPAT11_SET_NW_TOS
(
out
)->
nw_tos


1692 
	`oÂa˘_gë_SET_IPV4_DSCP
(
a
)->
ds˝
;

1695 
OFPACT_SET_L4_SRC_PORT
:

1696 
	`oÂutû_put_OFPAT11_SET_TP_SRC
(
out
)->
ç_p‹t


1697 
	`ht⁄s
(
	`oÂa˘_gë_SET_L4_SRC_PORT
(
a
)->
p‹t
);

1700 
OFPACT_SET_L4_DST_PORT
:

1701 
	`oÂutû_put_OFPAT11_SET_TP_DST
(
out
)->
ç_p‹t


1702 
	`ht⁄s
(
	`oÂa˘_gë_SET_L4_DST_PORT
(
a
)->
p‹t
);

1705 
OFPACT_DEC_TTL
:

1706 
	`oÂa˘_dec_âl_to_›íÊow11
(
	`oÂa˘_gë_DEC_TTL
(
a
), 
out
);

1709 
OFPACT_WRITE_METADATA
:

1713 
OFPACT_CLEAR_ACTIONS
:

1714 
OFPACT_GOTO_TABLE
:

1715 
	`NOT_REACHED
();

1717 
OFPACT_CONTROLLER
:

1718 
OFPACT_OUTPUT_REG
:

1719 
OFPACT_BUNDLE
:

1720 
OFPACT_REG_MOVE
:

1721 
OFPACT_REG_LOAD
:

1722 
OFPACT_SET_TUNNEL
:

1723 
OFPACT_SET_QUEUE
:

1724 
OFPACT_POP_QUEUE
:

1725 
OFPACT_FIN_TIMEOUT
:

1726 
OFPACT_RESUBMIT
:

1727 
OFPACT_LEARN
:

1728 
OFPACT_MULTIPATH
:

1729 
OFPACT_AUTOPATH
:

1730 
OFPACT_NOTE
:

1731 
OFPACT_EXIT
:

1732 
	`oÂa˘_to_nxa°
(
a
, 
out
);

1735 
	}
}

1740 
size_t


1741 
	$oÂa˘s_put_›íÊow11_a˘i⁄s
(c⁄° 
oÂa˘
 
oÂa˘s
[],

1742 
size_t
 
oÂa˘s_Àn
, 
oÂbuf
 *
›íÊow
)

1744 c⁄° 
oÂa˘
 *
a
;

1745 
size_t
 
°¨t_size
 = 
›íÊow
->
size
;

1747 
	`OFPACT_FOR_EACH
 (
a
, 
oÂa˘s
, 
oÂa˘s_Àn
) {

1748 
	`oÂa˘_to_›íÊow11
(
a
, 
›íÊow
);

1751  
›íÊow
->
size
 - 
°¨t_size
;

1752 
	}
}

1755 
	$oÂa˘s_upd©e_ö°ru˘i⁄_a˘i⁄s
(
oÂbuf
 *
›íÊow
, 
size_t
 
ofs
)

1757 
oÂ11_ö°ru˘i⁄_a˘i⁄s
 *
oü
;

1760 
oü
 = 
	`oÂbuf_©_as£π
(
›íÊow
, 
ofs
,  *oia);

1761 i‡(
›íÊow
->
size
 > 
ofs
 +  *
oü
) {

1762 
oü
->
Àn
 = 
	`ht⁄s
(
›íÊow
->
size
 - 
ofs
);

1764 
›íÊow
->
size
 = 
ofs
;

1766 
	}
}

1769 
	$oÂa˘s_put_›íÊow11_ö°ru˘i⁄s
(c⁄° 
oÂa˘
 
oÂa˘s
[],

1770 
size_t
 
oÂa˘s_Àn
,

1771 
oÂbuf
 *
›íÊow
)

1773 c⁄° 
oÂa˘
 *
a
;

1775 
	`OFPACT_FOR_EACH
 (
a
, 
oÂa˘s
, 
oÂa˘s_Àn
) {

1778 i‡(
a
->
ty≥
 =
OFPACT_CLEAR_ACTIONS
) {

1779 
	`ö°ru˘i⁄_put_OFPIT11_CLEAR_ACTIONS
(
›íÊow
);

1780 } i‡(
a
->
ty≥
 =
OFPACT_GOTO_TABLE
) {

1781 
oÂ11_ö°ru˘i⁄_gŸo_èbÀ
 *
oigt
;

1783 
oigt
 = 
	`ö°ru˘i⁄_put_OFPIT11_GOTO_TABLE
(
›íÊow
);

1784 
oigt
->
èbÀ_id
 = 
	`oÂa˘_gë_GOTO_TABLE
(
a
)->table_id;

1785 
	`mem£t
(
oigt
->
∑d
, 0,  oigt->pad);

1786 } i‡(
a
->
ty≥
 =
OFPACT_WRITE_METADATA
) {

1787 c⁄° 
oÂa˘_mëad©a
 *
om
;

1788 
oÂ11_ö°ru˘i⁄_wrôe_mëad©a
 *
oiwm
;

1790 
om
 = 
	`oÂa˘_gë_WRITE_METADATA
(
a
);

1791 
oiwm
 = 
	`ö°ru˘i⁄_put_OFPIT11_WRITE_METADATA
(
›íÊow
);

1792 
oiwm
->
mëad©a
 = 
om
->metadata;

1793 
oiwm
->
mëad©a_mask
 = 
om
->
mask
;

1794 } i‡(!
	`oÂa˘_is_ö°ru˘i⁄
(
a
)) {

1796 c⁄° 
size_t
 
ofs
 = 
›íÊow
->
size
;

1797 c⁄° 
size_t
 
oÂa˘s_Àn_À·
 =

1798 (
uöt8_t
*)
	`oÂa˘_íd
(
oÂa˘s
, 
oÂa˘s_Àn
Ë- (uöt8_t*)
a
;

1799 c⁄° 
oÂa˘
 *
a˘i⁄
;

1800 c⁄° 
oÂa˘
 *
¥o˚s£d
 = 
a
;

1802 
	`ö°ru˘i⁄_put_OFPIT11_APPLY_ACTIONS
(
›íÊow
);

1803 
	`OFPACT_FOR_EACH
(
a˘i⁄
, 
a
, 
oÂa˘s_Àn_À·
) {

1804 i‡(
	`oÂa˘_is_ö°ru˘i⁄
(
a˘i⁄
)) {

1807 
	`oÂa˘_to_›íÊow11
(
a˘i⁄
, 
›íÊow
);

1808 
¥o˚s£d
 = 
a˘i⁄
;

1810 
	`oÂa˘s_upd©e_ö°ru˘i⁄_a˘i⁄s
(
›íÊow
, 
ofs
);

1811 
a
 = 
¥o˚s£d
;

1814 
	}
}

1817 
boﬁ


1818 
	$oÂa˘_ouçuts_to_p‹t
(c⁄° 
oÂa˘
 *oÂa˘, 
uöt16_t
 
p‹t
)

1820 
oÂa˘
->
ty≥
) {

1821 
OFPACT_OUTPUT
:

1822  
	`oÂa˘_gë_OUTPUT
(
oÂa˘
)->
p‹t
 ==Öort;

1823 
OFPACT_ENQUEUE
:

1824  
	`oÂa˘_gë_ENQUEUE
(
oÂa˘
)->
p‹t
 ==Öort;

1825 
OFPACT_CONTROLLER
:

1826  
p‹t
 =
OFPP_CONTROLLER
;

1828 
OFPACT_OUTPUT_REG
:

1829 
OFPACT_BUNDLE
:

1830 
OFPACT_SET_VLAN_VID
:

1831 
OFPACT_SET_VLAN_PCP
:

1832 
OFPACT_STRIP_VLAN
:

1833 
OFPACT_SET_ETH_SRC
:

1834 
OFPACT_SET_ETH_DST
:

1835 
OFPACT_SET_IPV4_SRC
:

1836 
OFPACT_SET_IPV4_DST
:

1837 
OFPACT_SET_IPV4_DSCP
:

1838 
OFPACT_SET_L4_SRC_PORT
:

1839 
OFPACT_SET_L4_DST_PORT
:

1840 
OFPACT_REG_MOVE
:

1841 
OFPACT_REG_LOAD
:

1842 
OFPACT_DEC_TTL
:

1843 
OFPACT_SET_TUNNEL
:

1844 
OFPACT_WRITE_METADATA
:

1845 
OFPACT_SET_QUEUE
:

1846 
OFPACT_POP_QUEUE
:

1847 
OFPACT_FIN_TIMEOUT
:

1848 
OFPACT_RESUBMIT
:

1849 
OFPACT_LEARN
:

1850 
OFPACT_MULTIPATH
:

1851 
OFPACT_AUTOPATH
:

1852 
OFPACT_NOTE
:

1853 
OFPACT_EXIT
:

1854 
OFPACT_CLEAR_ACTIONS
:

1855 
OFPACT_GOTO_TABLE
:

1857  
Ál£
;

1859 
	}
}

1863 
boﬁ


1864 
	$oÂa˘s_ouçut_to_p‹t
(c⁄° 
oÂa˘
 *
oÂa˘s
, 
size_t
 
oÂa˘s_Àn
,

1865 
uöt16_t
 
p‹t
)

1867 c⁄° 
oÂa˘
 *
a
;

1869 
	`OFPACT_FOR_EACH
 (
a
, 
oÂa˘s
, 
oÂa˘s_Àn
) {

1870 i‡(
	`oÂa˘_ouçuts_to_p‹t
(
a
, 
p‹t
)) {

1871  
åue
;

1875  
Ál£
;

1876 
	}
}

1878 
boﬁ


1879 
	$oÂa˘s_equÆ
(c⁄° 
oÂa˘
 *
a
, 
size_t
 
a_Àn
,

1880 c⁄° 
oÂa˘
 *
b
, 
size_t
 
b_Àn
)

1882  
a_Àn
 =
b_Àn
 && !
	`memcmp
(
a
, 
b
,á_len);

1883 
	}
}

1888 
	$¥öt_nŸe
(c⁄° 
oÂa˘_nŸe
 *
nŸe
, 
ds
 *
°rög
)

1890 
size_t
 
i
;

1892 
	`ds_put_c°r
(
°rög
, "note:");

1893 
i
 = 0; i < 
nŸe
->
Àngth
; i++) {

1894 i‡(
i
) {

1895 
	`ds_put_ch¨
(
°rög
, '.');

1897 
	`ds_put_f‹m©
(
°rög
, "%02"
PRIx8
, 
nŸe
->
d©a
[
i
]);

1899 
	}
}

1902 
	$¥öt_dec_âl
(c⁄° 
oÂa˘_˙t_ids
 *
ids
,

1903 
ds
 *
s
)

1905 
size_t
 
i
;

1907 
	`ds_put_c°r
(
s
, "dec_ttl");

1908 i‡(
ids
->
oÂa˘
.
com∑t
 =
OFPUTIL_NXAST_DEC_TTL_CNT_IDS
) {

1909 
	`ds_put_c°r
(
s
, "(");

1910 
i
 = 0; i < 
ids
->
n_c⁄åﬁÀrs
; i++) {

1911 i‡(
i
) {

1912 
	`ds_put_c°r
(
s
, ",");

1914 
	`ds_put_f‹m©
(
s
, "%"
PRIu16
, 
ids
->
˙t_ids
[
i
]);

1916 
	`ds_put_c°r
(
s
, ")");

1918 
	}
}

1921 
	$¥öt_fö_timeout
(c⁄° 
oÂa˘_fö_timeout
 *
fö_timeout
,

1922 
ds
 *
s
)

1924 
	`ds_put_c°r
(
s
, "fin_timeout(");

1925 i‡(
fö_timeout
->
fö_idÀ_timeout
) {

1926 
	`ds_put_f‹m©
(
s
, "idÀ_timeout=%"
PRIu16
",",

1927 
fö_timeout
->
fö_idÀ_timeout
);

1929 i‡(
fö_timeout
->
fö_h¨d_timeout
) {

1930 
	`ds_put_f‹m©
(
s
, "h¨d_timeout=%"
PRIu16
",",

1931 
fö_timeout
->
fö_h¨d_timeout
);

1933 
	`ds_chomp
(
s
, ',');

1934 
	`ds_put_ch¨
(
s
, ')');

1935 
	}
}

1938 
	$oÂa˘_f‹m©
(c⁄° 
oÂa˘
 *
a
, 
ds
 *
s
)

1940 c⁄° 
oÂa˘_íqueue
 *
íqueue
;

1941 c⁄° 
oÂa˘_ªsubmô
 *
ªsubmô
;

1942 c⁄° 
oÂa˘_aut›©h
 *
aut›©h
;

1943 c⁄° 
oÂa˘_c⁄åﬁÀr
 *
c⁄åﬁÀr
;

1944 c⁄° 
oÂa˘_mëad©a
 *
mëad©a
;

1945 c⁄° 
oÂa˘_tu¬ñ
 *
tu¬ñ
;

1946 
uöt16_t
 
p‹t
;

1948 
a
->
ty≥
) {

1949 
OFPACT_OUTPUT
:

1950 
p‹t
 = 
	`oÂa˘_gë_OUTPUT
(
a
)->port;

1951 i‡(
p‹t
 < 
OFPP_MAX
) {

1952 
	`ds_put_f‹m©
(
s
, "ouçut:%"
PRIu16
, 
p‹t
);

1954 
	`oÂutû_f‹m©_p‹t
(
p‹t
, 
s
);

1955 i‡(
p‹t
 =
OFPP_CONTROLLER
) {

1956 
	`ds_put_f‹m©
(
s
, ":%"
PRIu16
, 
	`oÂa˘_gë_OUTPUT
(
a
)->
max_Àn
);

1961 
OFPACT_CONTROLLER
:

1962 
c⁄åﬁÀr
 = 
	`oÂa˘_gë_CONTROLLER
(
a
);

1963 i‡(
c⁄åﬁÀr
->
ªas⁄
 =
OFPR_ACTION
 &&

1964 
c⁄åﬁÀr
->
c⁄åﬁÀr_id
 == 0) {

1965 
	`ds_put_f‹m©
(
s
, "CONTROLLER:%"
PRIu16
,

1966 
	`oÂa˘_gë_CONTROLLER
(
a
)->
max_Àn
);

1968 
oÂ_∑ckë_ö_ªas⁄
 
ªas⁄
 = 
c⁄åﬁÀr
->reason;

1970 
	`ds_put_c°r
(
s
, "controller(");

1971 i‡(
ªas⁄
 !
OFPR_ACTION
) {

1972 
	`ds_put_f‹m©
(
s
, "reason=%s,",

1973 
	`oÂutû_∑ckë_ö_ªas⁄_to_°rög
(
ªas⁄
));

1975 i‡(
c⁄åﬁÀr
->
max_Àn
 !
UINT16_MAX
) {

1976 
	`ds_put_f‹m©
(
s
, "max_Àn=%"
PRIu16
",", 
c⁄åﬁÀr
->
max_Àn
);

1978 i‡(
c⁄åﬁÀr
->
c⁄åﬁÀr_id
 != 0) {

1979 
	`ds_put_f‹m©
(
s
, "id=%"
PRIu16
",", 
c⁄åﬁÀr
->
c⁄åﬁÀr_id
);

1981 
	`ds_chomp
(
s
, ',');

1982 
	`ds_put_ch¨
(
s
, ')');

1986 
OFPACT_ENQUEUE
:

1987 
íqueue
 = 
	`oÂa˘_gë_ENQUEUE
(
a
);

1988 
	`ds_put_f‹m©
(
s
, "enqueue:");

1989 
	`oÂutû_f‹m©_p‹t
(
íqueue
->
p‹t
, 
s
);

1990 
	`ds_put_f‹m©
(
s
, "q%"
PRIu32
, 
íqueue
->
queue
);

1993 
OFPACT_OUTPUT_REG
:

1994 
	`ds_put_c°r
(
s
, "output:");

1995 
	`mf_f‹m©_subfõld
(&
	`oÂa˘_gë_OUTPUT_REG
(
a
)->
§c
, 
s
);

1998 
OFPACT_BUNDLE
:

1999 
	`bundÀ_f‹m©
(
	`oÂa˘_gë_BUNDLE
(
a
), 
s
);

2002 
OFPACT_SET_VLAN_VID
:

2003 
	`ds_put_f‹m©
(
s
, "mod_vœn_vid:%"
PRIu16
,

2004 
	`oÂa˘_gë_SET_VLAN_VID
(
a
)->
vœn_vid
);

2007 
OFPACT_SET_VLAN_PCP
:

2008 
	`ds_put_f‹m©
(
s
, "mod_vœn_p˝:%"
PRIu8
,

2009 
	`oÂa˘_gë_SET_VLAN_PCP
(
a
)->
vœn_p˝
);

2012 
OFPACT_STRIP_VLAN
:

2013 
	`ds_put_c°r
(
s
, "strip_vlan");

2016 
OFPACT_SET_ETH_SRC
:

2017 
	`ds_put_f‹m©
(
s
, "mod_dl_§c:"
ETH_ADDR_FMT
,

2018 
	`ETH_ADDR_ARGS
(
	`oÂa˘_gë_SET_ETH_SRC
(
a
)->
mac
));

2021 
OFPACT_SET_ETH_DST
:

2022 
	`ds_put_f‹m©
(
s
, "mod_dl_d°:"
ETH_ADDR_FMT
,

2023 
	`ETH_ADDR_ARGS
(
	`oÂa˘_gë_SET_ETH_DST
(
a
)->
mac
));

2026 
OFPACT_SET_IPV4_SRC
:

2027 
	`ds_put_f‹m©
(
s
, "mod_nw_§c:"
IP_FMT
,

2028 
	`IP_ARGS
(&
	`oÂa˘_gë_SET_IPV4_SRC
(
a
)->
ùv4
));

2031 
OFPACT_SET_IPV4_DST
:

2032 
	`ds_put_f‹m©
(
s
, "mod_nw_d°:"
IP_FMT
,

2033 
	`IP_ARGS
(&
	`oÂa˘_gë_SET_IPV4_DST
(
a
)->
ùv4
));

2036 
OFPACT_SET_IPV4_DSCP
:

2037 
	`ds_put_f‹m©
(
s
, "mod_nw_tos:%d", 
	`oÂa˘_gë_SET_IPV4_DSCP
(
a
)->
ds˝
);

2040 
OFPACT_SET_L4_SRC_PORT
:

2041 
	`ds_put_f‹m©
(
s
, "mod_ç_§c:%d", 
	`oÂa˘_gë_SET_L4_SRC_PORT
(
a
)->
p‹t
);

2044 
OFPACT_SET_L4_DST_PORT
:

2045 
	`ds_put_f‹m©
(
s
, "mod_ç_d°:%d", 
	`oÂa˘_gë_SET_L4_DST_PORT
(
a
)->
p‹t
);

2048 
OFPACT_REG_MOVE
:

2049 
	`nxm_f‹m©_ªg_move
(
	`oÂa˘_gë_REG_MOVE
(
a
), 
s
);

2052 
OFPACT_REG_LOAD
:

2053 
	`nxm_f‹m©_ªg_lﬂd
(
	`oÂa˘_gë_REG_LOAD
(
a
), 
s
);

2056 
OFPACT_DEC_TTL
:

2057 
	`¥öt_dec_âl
(
	`oÂa˘_gë_DEC_TTL
(
a
), 
s
);

2060 
OFPACT_SET_TUNNEL
:

2061 
tu¬ñ
 = 
	`oÂa˘_gë_SET_TUNNEL
(
a
);

2062 
	`ds_put_f‹m©
(
s
, "£t_tu¬ñ%s:%#"
PRIx64
,

2063 (
tu¬ñ
->
tun_id
 > 
UINT32_MAX


2064 || 
a
->
com∑t
 =
OFPUTIL_NXAST_SET_TUNNEL64
 ? "64" : ""),

2065 
tu¬ñ
->
tun_id
);

2068 
OFPACT_SET_QUEUE
:

2069 
	`ds_put_f‹m©
(
s
, "£t_queue:%"
PRIu32
,

2070 
	`oÂa˘_gë_SET_QUEUE
(
a
)->
queue_id
);

2073 
OFPACT_POP_QUEUE
:

2074 
	`ds_put_c°r
(
s
, "pop_queue");

2077 
OFPACT_FIN_TIMEOUT
:

2078 
	`¥öt_fö_timeout
(
	`oÂa˘_gë_FIN_TIMEOUT
(
a
), 
s
);

2081 
OFPACT_RESUBMIT
:

2082 
ªsubmô
 = 
	`oÂa˘_gë_RESUBMIT
(
a
);

2083 i‡(
ªsubmô
->
ö_p‹t
 !
OFPP_IN_PORT
 &&Ñesubmô->
èbÀ_id
 == 255) {

2084 
	`ds_put_c°r
(
s
, "resubmit:");

2085 
	`oÂutû_f‹m©_p‹t
(
ªsubmô
->
ö_p‹t
, 
s
);

2087 
	`ds_put_f‹m©
(
s
, "resubmit(");

2088 i‡(
ªsubmô
->
ö_p‹t
 !
OFPP_IN_PORT
) {

2089 
	`oÂutû_f‹m©_p‹t
(
ªsubmô
->
ö_p‹t
, 
s
);

2091 
	`ds_put_ch¨
(
s
, ',');

2092 i‡(
ªsubmô
->
èbÀ_id
 != 255) {

2093 
	`ds_put_f‹m©
(
s
, "%"
PRIu8
, 
ªsubmô
->
èbÀ_id
);

2095 
	`ds_put_ch¨
(
s
, ')');

2099 
OFPACT_LEARN
:

2100 
	`À¨n_f‹m©
(
	`oÂa˘_gë_LEARN
(
a
), 
s
);

2103 
OFPACT_MULTIPATH
:

2104 
	`mu…ù©h_f‹m©
(
	`oÂa˘_gë_MULTIPATH
(
a
), 
s
);

2107 
OFPACT_AUTOPATH
:

2108 
aut›©h
 = 
	`oÂa˘_gë_AUTOPATH
(
a
);

2109 
	`ds_put_c°r
(
s
, "autopath(");

2110 
	`oÂutû_f‹m©_p‹t
(
aut›©h
->
p‹t
, 
s
);

2111 
	`ds_put_ch¨
(
s
, ',');

2112 
	`mf_f‹m©_subfõld
(&
aut›©h
->
d°
, 
s
);

2113 
	`ds_put_ch¨
(
s
, ')');

2116 
OFPACT_NOTE
:

2117 
	`¥öt_nŸe
(
	`oÂa˘_gë_NOTE
(
a
), 
s
);

2120 
OFPACT_EXIT
:

2121 
	`ds_put_c°r
(
s
, "exit");

2124 
OFPACT_CLEAR_ACTIONS
:

2125 
	`ds_put_f‹m©
(
s
, "%s",

2126 
	`oÂa˘_ö°ru˘i⁄_«me_‰om_ty≥
(

2127 
OVSINST_OFPIT11_CLEAR_ACTIONS
));

2130 
OFPACT_WRITE_METADATA
:

2131 
mëad©a
 = 
	`oÂa˘_gë_WRITE_METADATA
(
a
);

2132 
	`ds_put_f‹m©
(
s
, "%s:%#"
PRIx64
,

2133 
	`oÂa˘_ö°ru˘i⁄_«me_‰om_ty≥
(

2134 
OVSINST_OFPIT11_WRITE_METADATA
),

2135 
	`¡ohŒ
(
mëad©a
->metadata));

2136 i‡(
mëad©a
->
mask
 !
	`ht⁄Œ
(
UINT64_MAX
)) {

2137 
	`ds_put_f‹m©
(
s
, "/%#"
PRIx64
, 
	`¡ohŒ
(
mëad©a
->
mask
));

2141 
OFPACT_GOTO_TABLE
:

2142 
	`ds_put_f‹m©
(
s
, "%s:%"
PRIu8
,

2143 
	`oÂa˘_ö°ru˘i⁄_«me_‰om_ty≥
(

2144 
OVSINST_OFPIT11_GOTO_TABLE
),

2145 
	`oÂa˘_gë_GOTO_TABLE
(
a
)->
èbÀ_id
);

2148 
	}
}

2153 
	$oÂa˘s_f‹m©
(c⁄° 
oÂa˘
 *
oÂa˘s
, 
size_t
 
oÂa˘s_Àn
,

2154 
ds
 *
°rög
)

2156 
	`ds_put_c°r
(
°rög
, "actions=");

2157 i‡(!
oÂa˘s_Àn
) {

2158 
	`ds_put_c°r
(
°rög
, "drop");

2160 c⁄° 
oÂa˘
 *
a
;

2162 
	`OFPACT_FOR_EACH
 (
a
, 
oÂa˘s
, 
oÂa˘s_Àn
) {

2163 i‡(
a
 !
oÂa˘s
) {

2164 
	`ds_put_c°r
(
°rög
, ",");

2168 
	`oÂa˘_f‹m©
(
a
, 
°rög
);

2171 
	}
}

2176 
	$oÂa˘_put
(
oÂbuf
 *
oÂa˘s
, 
oÂa˘_ty≥
 
ty≥
, 
size_t
 
Àn
)

2178 
oÂa˘
 *ofpact;

2180 
	`oÂa˘_∑d
(
oÂa˘s
);

2181 
oÂa˘
 = 
oÂa˘s
->
l2
 = 
	`oÂbuf_put_unöô
(oÂa˘s, 
Àn
);

2182 
	`oÂa˘_öô
(
oÂa˘
, 
ty≥
, 
Àn
);

2183  
oÂa˘
;

2184 
	}
}

2187 
	$oÂa˘_öô
(
oÂa˘
 *oÂa˘, 
oÂa˘_ty≥
 
ty≥
, 
size_t
 
Àn
)

2189 
	`mem£t
(
oÂa˘
, 0, 
Àn
);

2190 
oÂa˘
->
ty≥
 =Åype;

2191 
oÂa˘
->
com∑t
 = 
OFPUTIL_ACTION_INVALID
;

2192 
oÂa˘
->
Àn
 =Üen;

2193 
	}
}

2202 
	$oÂa˘_upd©e_Àn
(
oÂbuf
 *
oÂa˘s
, 
oÂa˘
 *ofpact)

2204 
	`as£π
(
oÂa˘
 =
oÂa˘s
->
l2
);

2205 
oÂa˘
->
Àn
 = (*Ë
	`oÂbuf_èû
(
oÂa˘s
) - (*) ofpact;

2206 
	}
}

2219 
	$oÂa˘_∑d
(
oÂbuf
 *
oÂa˘s
)

2221 
ªm
 = 
oÂa˘s
->
size
 % 
OFPACT_ALIGNTO
;

2222 i‡(
ªm
) {

2223 
	`oÂbuf_put_zîos
(
oÂa˘s
, 
OFPACT_ALIGNTO
 - 
ªm
);

2225 
	}
}

2228 
	$oÂa˘_£t_fõld_öô
(
oÂa˘_ªg_lﬂd
 *
lﬂd
, c⁄° 
mf_fõld
 *
mf
,

2229 c⁄° *
§c
)

2231 
lﬂd
->
oÂa˘
.
com∑t
 = 
OFPUTIL_OFPAT12_SET_FIELD
;

2232 
lﬂd
->
d°
.
fõld
 = 
mf
;

2233 
lﬂd
->
d°
.
ofs
 = 0;

2234 
lﬂd
->
d°
.
n_bôs
 = 
mf
->n_bits;

2235 
	`bôwi£_c›y
(
§c
, 
mf
->
n_byãs
, 
lﬂd
->
d°
.
ofs
,

2236 &
lﬂd
->
subvÆue
, Üﬂd->subvÆue, 0, 
mf
->
n_bôs
);

2237 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/ofp-actions.h

17 #i‚de‡
OFP_ACTIONS_H


18 
	#OFP_ACTIONS_H
 1

	)

20 
	~<°döt.h
>

21 
	~"mëa-Êow.h
"

22 
	~"oÂ-îr‹s.h
"

23 
	~"oÂ-utû.h
"

24 
	~"›íÊow/›íÊow.h
"

25 
	~"›íÊow/nicúa-ext.h
"

26 
	~"›ívswôch/ty≥s.h
"

52 
	#OFPACTS
 \

54 
	`DEFINE_OFPACT
(
OUTPUT
, 
oÂa˘_ouçut
, 
oÂa˘
) \

55 
	`DEFINE_OFPACT
(
CONTROLLER
, 
oÂa˘_c⁄åﬁÀr
, 
oÂa˘
) \

56 
	`DEFINE_OFPACT
(
ENQUEUE
, 
oÂa˘_íqueue
, 
oÂa˘
) \

57 
	`DEFINE_OFPACT
(
OUTPUT_REG
, 
oÂa˘_ouçut_ªg
, 
oÂa˘
) \

58 
	`DEFINE_OFPACT
(
BUNDLE
, 
oÂa˘_bundÀ
, 
¶aves
) \

61 
	`DEFINE_OFPACT
(
SET_VLAN_VID
, 
oÂa˘_vœn_vid
, 
oÂa˘
) \

62 
	`DEFINE_OFPACT
(
SET_VLAN_PCP
, 
oÂa˘_vœn_p˝
, 
oÂa˘
) \

63 
	`DEFINE_OFPACT
(
STRIP_VLAN
, 
oÂa˘_nuŒ
, 
oÂa˘
) \

64 
	`DEFINE_OFPACT
(
SET_ETH_SRC
, 
oÂa˘_mac
, 
oÂa˘
) \

65 
	`DEFINE_OFPACT
(
SET_ETH_DST
, 
oÂa˘_mac
, 
oÂa˘
) \

66 
	`DEFINE_OFPACT
(
SET_IPV4_SRC
, 
oÂa˘_ùv4
, 
oÂa˘
) \

67 
	`DEFINE_OFPACT
(
SET_IPV4_DST
, 
oÂa˘_ùv4
, 
oÂa˘
) \

68 
	`DEFINE_OFPACT
(
SET_IPV4_DSCP
, 
oÂa˘_ds˝
, 
oÂa˘
) \

69 
	`DEFINE_OFPACT
(
SET_L4_SRC_PORT
, 
oÂa˘_l4_p‹t
, 
oÂa˘
) \

70 
	`DEFINE_OFPACT
(
SET_L4_DST_PORT
, 
oÂa˘_l4_p‹t
, 
oÂa˘
) \

71 
	`DEFINE_OFPACT
(
REG_MOVE
, 
oÂa˘_ªg_move
, 
oÂa˘
) \

72 
	`DEFINE_OFPACT
(
REG_LOAD
, 
oÂa˘_ªg_lﬂd
, 
oÂa˘
) \

73 
	`DEFINE_OFPACT
(
DEC_TTL
, 
oÂa˘_˙t_ids
, 
˙t_ids
) \

76 
	`DEFINE_OFPACT
(
SET_TUNNEL
, 
oÂa˘_tu¬ñ
, 
oÂa˘
) \

77 
	`DEFINE_OFPACT
(
SET_QUEUE
, 
oÂa˘_queue
, 
oÂa˘
) \

78 
	`DEFINE_OFPACT
(
POP_QUEUE
, 
oÂa˘_nuŒ
, 
oÂa˘
) \

79 
	`DEFINE_OFPACT
(
FIN_TIMEOUT
, 
oÂa˘_fö_timeout
, 
oÂa˘
) \

82 
	`DEFINE_OFPACT
(
RESUBMIT
, 
oÂa˘_ªsubmô
, 
oÂa˘
) \

83 
	`DEFINE_OFPACT
(
LEARN
, 
oÂa˘_À¨n
, 
•ecs
) \

86 
	`DEFINE_OFPACT
(
MULTIPATH
, 
oÂa˘_mu…ù©h
, 
oÂa˘
) \

87 
	`DEFINE_OFPACT
(
AUTOPATH
, 
oÂa˘_aut›©h
, 
oÂa˘
) \

90 
	`DEFINE_OFPACT
(
NOTE
, 
oÂa˘_nŸe
, 
d©a
) \

91 
	`DEFINE_OFPACT
(
EXIT
, 
oÂa˘_nuŒ
, 
oÂa˘
) \

95 
	`DEFINE_OFPACT
(
WRITE_METADATA
, 
oÂa˘_mëad©a
, 
oÂa˘
) \

96 
	`DEFINE_OFPACT
(
CLEAR_ACTIONS
, 
oÂa˘_nuŒ
, 
oÂa˘
) \

97 
	`DEFINE_OFPACT
(
GOTO_TABLE
, 
oÂa˘_gŸo_èbÀ
, 
oÂa˘
)

	)

100 
OVS_PACKED_ENUM
 
	goÂa˘_ty≥
 {

101 
	#DEFINE_OFPACT
(
ENUM
, 
STRUCT
, 
MEMBER
Ë
OFPACT_
##ENUM,

	)

102 
	gOFPACTS


103 #unde‡
DEFINE_OFPACT


107 
	#OFPACTS
 \

109 
	`DEFINE_OFPACT
(
OUTPUT
, 
oÂa˘_ouçut
, 
oÂa˘
) \

110 
	`DEFINE_OFPACT
(
CONTROLLER
, 
oÂa˘_c⁄åﬁÀr
, 
oÂa˘
) \

111 
	`DEFINE_OFPACT
(
ENQUEUE
, 
oÂa˘_íqueue
, 
oÂa˘
) \

112 
	`DEFINE_OFPACT
(
OUTPUT_REG
, 
oÂa˘_ouçut_ªg
, 
oÂa˘
) \

113 
	`DEFINE_OFPACT
(
BUNDLE
, 
oÂa˘_bundÀ
, 
¶aves
) \

115 
	`DEFINE_OFPACT
(
SET_VLAN_VID
, 
oÂa˘_vœn_vid
, 
oÂa˘
) \

116 
	`DEFINE_OFPACT
(
SET_VLAN_PCP
, 
oÂa˘_vœn_p˝
, 
oÂa˘
) \

117 
	`DEFINE_OFPACT
(
STRIP_VLAN
, 
oÂa˘_nuŒ
, 
oÂa˘
) \

118 
	`DEFINE_OFPACT
(
SET_ETH_SRC
, 
oÂa˘_mac
, 
oÂa˘
) \

119 
	`DEFINE_OFPACT
(
SET_ETH_DST
, 
oÂa˘_mac
, 
oÂa˘
) \

120 
	`DEFINE_OFPACT
(
SET_IPV4_SRC
, 
oÂa˘_ùv4
, 
oÂa˘
) \

121 
	`DEFINE_OFPACT
(
SET_IPV4_DST
, 
oÂa˘_ùv4
, 
oÂa˘
) \

122 
	`DEFINE_OFPACT
(
SET_IPV4_DSCP
, 
oÂa˘_ds˝
, 
oÂa˘
) \

123 
	`DEFINE_OFPACT
(
SET_L4_SRC_PORT
, 
oÂa˘_l4_p‹t
, 
oÂa˘
) \

124 
	`DEFINE_OFPACT
(
SET_L4_DST_PORT
, 
oÂa˘_l4_p‹t
, 
oÂa˘
) \

125 
	`DEFINE_OFPACT
(
REG_MOVE
, 
oÂa˘_ªg_move
, 
oÂa˘
) \

126 
	`DEFINE_OFPACT
(
REG_LOAD
, 
oÂa˘_ªg_lﬂd
, 
oÂa˘
) \

127 
	`DEFINE_OFPACT
(
DEC_TTL
, 
oÂa˘_˙t_ids
, 
˙t_ids
) \

130 
	`DEFINE_OFPACT
(
SET_TUNNEL
, 
oÂa˘_tu¬ñ
, 
oÂa˘
) \

131 
	`DEFINE_OFPACT
(
SET_QUEUE
, 
oÂa˘_queue
, 
oÂa˘
) \

132 
	`DEFINE_OFPACT
(
POP_QUEUE
, 
oÂa˘_nuŒ
, 
oÂa˘
) \

133 
	`DEFINE_OFPACT
(
FIN_TIMEOUT
, 
oÂa˘_fö_timeout
, 
oÂa˘
) \

136 
	`DEFINE_OFPACT
(
RESUBMIT
, 
oÂa˘_ªsubmô
, 
oÂa˘
) \

137 
	`DEFINE_OFPACT
(
LEARN
, 
oÂa˘_À¨n
, 
•ecs
) \

140 
	`DEFINE_OFPACT
(
MULTIPATH
, 
oÂa˘_mu…ù©h
, 
oÂa˘
) \

141 
	`DEFINE_OFPACT
(
AUTOPATH
, 
oÂa˘_aut›©h
, 
oÂa˘
) \

144 
	`DEFINE_OFPACT
(
NOTE
, 
oÂa˘_nŸe
, 
d©a
) \

145 
	`DEFINE_OFPACT
(
EXIT
, 
oÂa˘_nuŒ
, 
oÂa˘
) \

149 
	`DEFINE_OFPACT
(
WRITE_METADATA
, 
oÂa˘_mëad©a
, 
oÂa˘
) \

150 
	`DEFINE_OFPACT
(
CLEAR_ACTIONS
, 
oÂa˘_nuŒ
, 
oÂa˘
) \

151 
	`DEFINE_OFPACT
(
GOTO_TABLE
, 
oÂa˘_gŸo_èbÀ
, 
oÂa˘
) \

152 
	`DEFINE_OFPACT
(
INIT_CODING
, 
oÂa˘_öô_codög
, 
d©Øsdf
) \

153 
	`DEFINE_OFPACT
(
ENCODE
, 
oÂa˘_ícode
, 
d©Øsdf
) \

154 
	`DEFINE_OFPACT
(
DECODE
, 
oÂa˘_decode
, 
d©Øsdf
)

	)

157 
OVS_PACKED_ENUM
 
	goÂa˘_ty≥
 {

158 
	#DEFINE_OFPACT
(
ENUM
, 
STRUCT
, 
MEMBER
Ë
OFPACT_
##ENUM,

	)

159 
	gOFPACTS


160 #unde‡
DEFINE_OFPACT


166 
	mN_OFPACTS
 =

167 
	#DEFINE_OFPACT
(
ENUM
, 
STRUCT
, 
MEMBER
Ë+ 1

	)

168 
	mOFPACTS


169 #unde‡
DEFINE_OFPACT


201 
	soÂa˘
 {

202 
oÂa˘_ty≥
 
	mty≥
;

203 
oÂutû_a˘i⁄_code
 
	mcom∑t
;

204 
uöt16_t
 
	mÀn
;

208 #ifde‡
__GNUC__


210 
BUILD_ASSERT_DECL
((
oÂa˘
) == 4);

214 
	#OFPACT_ALIGNTO
 8

	)

215 
	#OFPACT_ALIGN
(
SIZE
Ë
	`ROUND_UP
(SIZE, 
OFPACT_ALIGNTO
)

	)

217 
ölöe
 
oÂa˘
 *

218 
	$oÂa˘_√xt
(c⁄° 
oÂa˘
 *ofpact)

220  (*Ë((
uöt8_t
 *Ë
oÂa˘
 + 
	`OFPACT_ALIGN
(oÂa˘->
Àn
));

221 
	}
}

223 
ölöe
 
oÂa˘
 *

224 
	$oÂa˘_íd
(c⁄° 
oÂa˘
 *
oÂa˘s
, 
size_t
 
oÂa˘s_Àn
)

226  (*Ë((
uöt8_t
 *Ë
oÂa˘s
 + 
oÂa˘s_Àn
);

227 
	}
}

231 
	#OFPACT_FOR_EACH
(
POS
, 
OFPACTS
, 
OFPACTS_LEN
) \

232 (
POS
Ë(
OFPACTS
); (POSË< 
	`oÂa˘_íd
(OFPACTS, 
OFPACTS_LEN
); \

233 (
POS
Ë
	`oÂa˘_√xt
(POS))

	)

244 
	soÂa˘_nuŒ
 {

245 
oÂa˘
 
	moÂa˘
;

251 
	soÂa˘_ouçut
 {

252 
oÂa˘
 
	moÂa˘
;

253 
uöt16_t
 
	mp‹t
;

254 
uöt16_t
 
	mmax_Àn
;

260 
	soÂa˘_c⁄åﬁÀr
 {

261 
oÂa˘
 
	moÂa˘
;

262 
uöt16_t
 
	mmax_Àn
;

263 
uöt16_t
 
	mc⁄åﬁÀr_id
;

264 
oÂ_∑ckë_ö_ªas⁄
 
	mªas⁄
;

270 
	soÂa˘_íqueue
 {

271 
oÂa˘
 
	moÂa˘
;

272 
uöt16_t
 
	mp‹t
;

273 
uöt32_t
 
	mqueue
;

279 
	soÂa˘_ouçut_ªg
 {

280 
oÂa˘
 
	moÂa˘
;

281 
mf_subfõld
 
	m§c
;

282 
uöt16_t
 
	mmax_Àn
;

288 
	soÂa˘_bundÀ
 {

289 
oÂa˘
 
	moÂa˘
;

292 
nx_bd_Æg‹ôhm
 
	mÆg‹ôhm
;

295 
nx_hash_fõlds
 
	mfõlds
;

296 
uöt16_t
 
	mbasis
;

298 
mf_subfõld
 
	md°
;

301 
	mn_¶aves
;

302 
uöt16_t
 
	m¶aves
[];

308 
	soÂa˘_vœn_vid
 {

309 
oÂa˘
 
	moÂa˘
;

310 
uöt16_t
 
	mvœn_vid
;

316 
	soÂa˘_vœn_p˝
 {

317 
oÂa˘
 
	moÂa˘
;

318 
uöt8_t
 
	mvœn_p˝
;

324 
	soÂa˘_mac
 {

325 
oÂa˘
 
	moÂa˘
;

326 
uöt8_t
 
	mmac
[
ETH_ADDR_LEN
];

332 
	soÂa˘_ùv4
 {

333 
oÂa˘
 
	moÂa˘
;

334 
ovs_be32
 
	mùv4
;

340 
	soÂa˘_ds˝
 {

341 
oÂa˘
 
	moÂa˘
;

342 
uöt8_t
 
	mds˝
;

348 
	soÂa˘_l4_p‹t
 {

349 
oÂa˘
 
	moÂa˘
;

350 
uöt16_t
 
	mp‹t
;

356 
	soÂa˘_ªg_move
 {

357 
oÂa˘
 
	moÂa˘
;

358 
mf_subfõld
 
	m§c
;

359 
mf_subfõld
 
	md°
;

365 
	soÂa˘_ªg_lﬂd
 {

366 
oÂa˘
 
	moÂa˘
;

367 
mf_subfõld
 
	md°
;

368 
mf_subvÆue
 
	msubvÆue
;

374 
	soÂa˘_tu¬ñ
 {

375 
oÂa˘
 
	moÂa˘
;

376 
uöt64_t
 
	mtun_id
;

382 
	soÂa˘_queue
 {

383 
oÂa˘
 
	moÂa˘
;

384 
uöt32_t
 
	mqueue_id
;

390 
	soÂa˘_fö_timeout
 {

391 
oÂa˘
 
	moÂa˘
;

392 
uöt16_t
 
	mfö_idÀ_timeout
;

393 
uöt16_t
 
	mfö_h¨d_timeout
;

399 
	soÂa˘_mëad©a
 {

400 
oÂa˘
 
	moÂa˘
;

401 
ovs_be64
 
	mmëad©a
;

402 
ovs_be64
 
	mmask
;

408 
	soÂa˘_ªsubmô
 {

409 
oÂa˘
 
	moÂa˘
;

410 
uöt16_t
 
	mö_p‹t
;

411 
uöt8_t
 
	mèbÀ_id
;

415 
	soÂa˘_À¨n_•ec
 {

416 
	mn_bôs
;

418 
	m§c_ty≥
;

419 
mf_subfõld
 
	m§c
;

420 
mf_subvÆue
 
	m§c_imm
;

422 
	md°_ty≥
;

423 
mf_subfõld
 
	md°
;

429 
	soÂa˘_À¨n
 {

430 
oÂa˘
 
	moÂa˘
;

432 
uöt16_t
 
	midÀ_timeout
;

433 
uöt16_t
 
	mh¨d_timeout
;

434 
uöt16_t
 
	m¥i‹ôy
;

435 
uöt64_t
 
	mcookõ
;

436 
uöt16_t
 
	mÊags
;

437 
uöt8_t
 
	mèbÀ_id
;

438 
uöt16_t
 
	mfö_idÀ_timeout
;

439 
uöt16_t
 
	mfö_h¨d_timeout
;

441 
	mn_•ecs
;

442 
oÂa˘_À¨n_•ec
 
	m•ecs
[];

448 
	soÂa˘_mu…ù©h
 {

449 
oÂa˘
 
	moÂa˘
;

452 
nx_hash_fõlds
 
	mfõlds
;

453 
uöt16_t
 
	mbasis
;

456 
nx_mp_Æg‹ôhm
 
	mÆg‹ôhm
;

457 
uöt16_t
 
	mmax_lök
;

458 
uöt32_t
 
	m¨g
;

461 
mf_subfõld
 
	md°
;

467 
	soÂa˘_aut›©h
 {

468 
oÂa˘
 
	moÂa˘
;

469 
mf_subfõld
 
	md°
;

470 
uöt32_t
 
	mp‹t
;

476 
	soÂa˘_nŸe
 {

477 
oÂa˘
 
	moÂa˘
;

478 
size_t
 
	mÀngth
;

479 
uöt8_t
 
	md©a
[];

485 
	soÂa˘_˙t_ids
 {

486 
oÂa˘
 
	moÂa˘
;

489 
	mn_c⁄åﬁÀrs
;

490 
uöt16_t
 
	m˙t_ids
[];

496 
	soÂa˘_gŸo_èbÀ
 {

497 
oÂa˘
 
	moÂa˘
;

498 
uöt8_t
 
	mèbÀ_id
;

502 
	soÂa˘_öô_codög
 {

503 
oÂa˘
 
	moÂa˘
;

504 
uöt8_t
 
	mbuf„r_id
;

505 
uöt8_t
 
	m∑ckë_num
;

506 
uöt8_t
 
	mp‹t_num
;

507 
uöt8_t
 
	mve˘‹_off
;

508 
uöt16_t
 
	m∑ckë_Àn
;

509 
uöt8_t
 
	md©Øsdf
[0];

512 
	soÂa˘_ícode
 {

513 
oÂa˘
 
	moÂa˘
;

514 
uöt8_t
 
	mbuf„r_id
;

515 
uöt8_t
 
	mp‹t_num
;

516 
uöt16_t
 
	mbuf„r_size
;

517 
uöt16_t
 
	mouçut_p‹t
;

518 
uöt16_t
 
	m∑ckë_Àn
;

519 
uöt16_t
 
	m∑ckë_num
;

520 
uöt16_t
 
	mp‹t_id
;

521 
uöt8_t
 
	md©Øsdf
[0];

524 
	soÂa˘_decode
 {

525 
oÂa˘
 
	moÂa˘
;

526 
uöt8_t
 
	mbuf„r_id
;

527 
uöt8_t
 
	m∑ckë_num
;

528 
uöt16_t
 
	mbuf„r_size
;

529 
uöt16_t
 
	mouçut_num
;

530 
uöt16_t
 
	m∑ckë_Àn
;

531 
uöt16_t
 
	mp‹t_id
;

532 
uöt8_t
 
	md©Øsdf
[0];

538 
oÂîr
 
oÂa˘s_puŒ_›íÊow10
(
oÂbuf
 *
›íÊow
,

539 
a˘i⁄s_Àn
,

540 
oÂbuf
 *
oÂa˘s
);

541 
oÂîr
 
oÂa˘s_puŒ_›íÊow11_a˘i⁄s
(
oÂbuf
 *
›íÊow
,

542 
a˘i⁄s_Àn
,

543 
oÂbuf
 *
oÂa˘s
);

544 
oÂîr
 
oÂa˘s_puŒ_›íÊow11_ö°ru˘i⁄s
(
oÂbuf
 *
›íÊow
,

545 
ö°ru˘i⁄s_Àn
,

546 
oÂbuf
 *
oÂa˘s
);

547 
oÂîr
 
oÂa˘s_check
(c⁄° 
oÂa˘
[], 
size_t
 
oÂa˘s_Àn
,

548 c⁄° 
Êow
 *, 
max_p‹ts
);

549 
oÂîr
 
oÂa˘s_vîify
(c⁄° 
oÂa˘
 
oÂa˘s
[], 
size_t
 
oÂa˘s_Àn
);

552 
oÂa˘s_put_›íÊow10
(c⁄° 
oÂa˘
[], 
size_t
 
oÂa˘s_Àn
,

553 
oÂbuf
 *
›íÊow
);

554 
size_t
 
oÂa˘s_put_›íÊow11_a˘i⁄s
(c⁄° 
oÂa˘
[], size_à
oÂa˘s_Àn
,

555 
oÂbuf
 *
›íÊow
);

556 
oÂa˘s_put_›íÊow11_ö°ru˘i⁄s
(c⁄° 
oÂa˘
[],

557 
size_t
 
oÂa˘s_Àn
,

558 
oÂbuf
 *
›íÊow
);

561 
boﬁ
 
oÂa˘s_ouçut_to_p‹t
(c⁄° 
oÂa˘
[], 
size_t
 
oÂa˘s_Àn
,

562 
uöt16_t
 
p‹t
);

563 
boﬁ
 
oÂa˘s_equÆ
(c⁄° 
oÂa˘
 
a
[], 
size_t
 
a_Àn
,

564 c⁄° 
oÂa˘
 
b
[], 
size_t
 
b_Àn
);

569 
oÂa˘s_f‹m©
(c⁄° 
oÂa˘
[], 
size_t
 
oÂa˘s_Àn
, 
ds
 *);

572 
oÂa˘_öô
(
oÂa˘
 *, 
oÂa˘_ty≥
, 
size_t
 
Àn
);

573 *
oÂa˘_put
(
oÂbuf
 *, 
oÂa˘_ty≥
, 
size_t
 
Àn
);

613 
	#DEFINE_OFPACT
(
ENUM
, 
STRUCT
, 
MEMBER
) \

614 
	`BUILD_ASSERT_DECL
(
	`off£tof
(
STRUCT
, 
oÂa˘
) == 0); \

616 íum { 
OFPACT_
##
ENUM
##
_RAW_SIZE
 \

617 (
	`off£tof
(
STRUCT
, 
MEMBER
) \

618 ? 
	`off£tof
(
STRUCT
, 
MEMBER
) \

619 : (
STRUCT
)) }; \

621 íum { 
OFPACT_
##
ENUM
##
_SIZE
 \

622 
	`ROUND_UP
(
OFPACT_
##
ENUM
##
_RAW_SIZE
, 
OFPACT_ALIGNTO
) }; \

624 
ölöe
 
STRUCT
 * \

625 
oÂa˘_gë_
##
	`ENUM
(c⁄° 
oÂa˘
 *ofpact) \

627 
	`as£π
(
oÂa˘
->
ty≥
 =
OFPACT_
##
ENUM
); \

628  (
STRUCT
 *Ë
oÂa˘
; \

631 
ölöe
 
STRUCT
 * \

632 
oÂa˘_put_
##
	`ENUM
(
oÂbuf
 *
oÂa˘s
) \

634  
	`oÂa˘_put
(
oÂa˘s
, 
OFPACT_
##
ENUM
, \

635 
OFPACT_
##
ENUM
##
_RAW_SIZE
); \

638 
ölöe
 \

639 
oÂa˘_öô_
##
	`ENUM
(
STRUCT
 *
oÂa˘
) \

641 
	`oÂa˘_öô
(&
oÂa˘
->oÂa˘, 
OFPACT_
##
ENUM
, \

642 
OFPACT_
##
ENUM
##
_RAW_SIZE
); \

643 }

	)

644 
	gOFPACTS


645 #unde‡
DEFINE_OFPACT


648 
oÂa˘_upd©e_Àn
(
oÂbuf
 *, 
oÂa˘
 *);

649 
oÂa˘_∑d
(
oÂbuf
 *);

655 
	#OVS_INSTRUCTIONS
 \

656 
	`DEFINE_INST
(
OFPIT11_APPLY_ACTIONS
, \

657 
oÂ11_ö°ru˘i⁄_a˘i⁄s
, 
åue
, \

660 
	`DEFINE_INST
(
OFPIT11_CLEAR_ACTIONS
, \

661 
oÂ11_ö°ru˘i⁄
, 
Ál£
, \

664 
	`DEFINE_INST
(
OFPIT11_WRITE_ACTIONS
, \

665 
oÂ11_ö°ru˘i⁄_a˘i⁄s
, 
åue
, \

668 
	`DEFINE_INST
(
OFPIT11_WRITE_METADATA
, \

669 
oÂ11_ö°ru˘i⁄_wrôe_mëad©a
, 
Ál£
, \

672 
	`DEFINE_INST
(
OFPIT11_GOTO_TABLE
, \

673 
oÂ11_ö°ru˘i⁄_gŸo_èbÀ
, 
Ál£
, \

674 "gŸo_èbÀ")

	)

676 
	eovs_ö°ru˘i⁄_ty≥
 {

677 
	#DEFINE_INST
(
ENUM
, 
STRUCT
, 
EXTENSIBLE
, 
NAME
Ë
OVSINST_
##ENUM,

	)

678 
	mOVS_INSTRUCTIONS


679 #unde‡
DEFINE_INST


683 
	#DEFINE_INST
(
ENUM
, 
STRUCT
, 
EXTENSIBLE
, 
NAME
Ë+ 1

	)

684 
	mN_OVS_INSTRUCTIONS
 = 
OVS_INSTRUCTIONS


685 #unde‡
DEFINE_INST


689 
ölöe
 
boﬁ


690 
	$oÂa˘_is_ö°ru˘i⁄
(c⁄° 
oÂa˘
 *
a
)

693  
a
->
ty≥
 =
OFPACT_CLEAR_ACTIONS


694 || 
a
->
ty≥
 =
OFPACT_WRITE_METADATA


695 || 
a
->
ty≥
 =
OFPACT_GOTO_TABLE
;

696 
	}
}

698 c⁄° *
oÂa˘_ö°ru˘i⁄_«me_‰om_ty≥
(
ovs_ö°ru˘i⁄_ty≥
 
ty≥
);

699 
oÂa˘_ö°ru˘i⁄_ty≥_‰om_«me
(c⁄° *
«me
);

701 
oÂa˘_£t_fõld_öô
(
oÂa˘_ªg_lﬂd
 *
lﬂd
,

702 c⁄° 
mf_fõld
 *
mf
, c⁄° *
§c
);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/ofp-errors.c

1 
	~<c⁄fig.h
>

2 
	~"oÂ-îr‹s.h
"

3 
	~<î∫o.h
>

4 
	~"byã-‹dî.h
"

5 
	~"dy«mic-°rög.h
"

6 
	~"oÂ-msgs.h
"

7 
	~"oÂ-utû.h
"

8 
	~"oÂbuf.h
"

9 
	~"›íÊow/›íÊow.h
"

10 
	~"vlog.h
"

12 
VLOG_DEFINE_THIS_MODULE
(
oÂ_îr‹s
);

14 
	s∑ú
 {

15 
	mty≥
, 
	mcode
;

18 
	~"oÂ-îr‹s.öc
"

24 c⁄° 
oÂîr_domaö
 *

25 
	$oÂîr_domaö_‰om_vîsi⁄
(
oÂ_vîsi⁄
 
vîsi⁄
)

27 
vîsi⁄
) {

28 
OFP10_VERSION
:

29  &
oÂîr_of10
;

30 
OFP11_VERSION
:

31  &
oÂîr_of11
;

32 
OFP12_VERSION
:

33  &
oÂîr_of12
;

35  
NULL
;

37 
	}
}

41 
	$oÂîr_domaö_gë_«me
(
oÂ_vîsi⁄
 
vîsi⁄
)

43 c⁄° 
oÂîr_domaö
 *
domaö
 = 
	`oÂîr_domaö_‰om_vîsi⁄
(
vîsi⁄
);

44  
domaö
 ? domaö->
«me
 : 
NULL
;

45 
	}
}

48 
boﬁ


49 
	$oÂîr_is_vÆid
(
oÂîr
 
îr‹
)

51  
îr‹
 >
OFPERR_OFS
 &&Éº‹ < OFPERR_OFS + 
OFPERR_N_ERRORS
;

52 
	}
}

57 
boﬁ


58 
	$oÂîr_is_ˇãg‹y
(
oÂîr
 
îr‹
)

60  (
	`oÂîr_is_vÆid
(
îr‹
)

61 && 
oÂîr_of10
.
îr‹s
[
îr‹
 - 
OFPERR_OFS
].
code
 == -1

62 && 
oÂîr_of11
.
îr‹s
[
îr‹
 - 
OFPERR_OFS
].
code
 == -1);

63 
	}
}

67 
boﬁ


68 
	$oÂîr_is_nx_exãnsi⁄
(
oÂîr
 
îr‹
)

70  (
	`oÂîr_is_vÆid
(
îr‹
)

71 && (
oÂîr_of10
.
îr‹s
[
îr‹
 - 
OFPERR_OFS
].
code
 >= 0x100 ||

72 
oÂîr_of11
.
îr‹s
[
îr‹
 - 
OFPERR_OFS
].
code
 >= 0x100));

73 
	}
}

80 
boﬁ


81 
	$oÂîr_is_ícodabÀ
(
oÂîr
 
îr‹
, 
oÂ_vîsi⁄
 
vîsi⁄
)

83 c⁄° 
oÂîr_domaö
 *
domaö
 = 
	`oÂîr_domaö_‰om_vîsi⁄
(
vîsi⁄
);

84  (
	`oÂîr_is_vÆid
(
îr‹
)

85 && 
domaö
 && domaö->
îr‹s
[
îr‹
 - 
OFPERR_OFS
].
code
 >= 0);

86 
	}
}

91 
oÂîr


92 
	$oÂîr_decode
(
oÂ_vîsi⁄
 
vîsi⁄
, 
uöt16_t
 
ty≥
, uöt16_à
code
)

94 c⁄° 
oÂîr_domaö
 *
domaö
 = 
	`oÂîr_domaö_‰om_vîsi⁄
(
vîsi⁄
);

95  
domaö
 ? domaö->
	`decode
(
ty≥
, 
code
) : 0;

96 
	}
}

101 
oÂîr


102 
	$oÂîr_decode_ty≥
(
oÂ_vîsi⁄
 
vîsi⁄
, 
uöt16_t
 
ty≥
)

104 c⁄° 
oÂîr_domaö
 *
domaö
 = 
	`oÂîr_domaö_‰om_vîsi⁄
(
vîsi⁄
);

105  
domaö
 ? domaö->
	`decode_ty≥
(
ty≥
) : 0;

106 
	}
}

114 
	$oÂîr_gë_«me
(
oÂîr
 
îr‹
)

116  (
	`oÂîr_is_vÆid
(
îr‹
)

117 ? 
îr‹_«mes
[
îr‹
 - 
OFPERR_OFS
]

119 
	}
}

126 
oÂîr


127 
	$oÂîr_‰om_«me
(c⁄° *
«me
)

129 
i
;

131 
i
 = 0; i < 
OFPERR_N_ERRORS
; i++) {

132 i‡(!
	`°rcmp
(
«me
, 
îr‹_«mes
[
i
])) {

133  
i
 + 
OFPERR_OFS
;

137 
	}
}

143 
	$oÂîr_gë_des¸ùti⁄
(
oÂîr
 
îr‹
)

145  (
	`oÂîr_is_vÆid
(
îr‹
)

146 ? 
îr‹_commíts
[
îr‹
 - 
OFPERR_OFS
]

148 
	}
}

150 c⁄° 
∑ú
 *

151 
	$oÂîr_gë_∑ú__
(
oÂîr
 
îr‹
, c⁄° 
oÂîr_domaö
 *
domaö
)

153 
size_t
 
ofs
 = 
îr‹
 - 
OFPERR_OFS
;

155 
	`as£π
(
	`oÂîr_is_vÆid
(
îr‹
));

156  &
domaö
->
îr‹s
[
ofs
];

157 
	}
}

159 
oÂbuf
 *

160 
	$oÂîr_ícode_msg__
(
oÂîr
 
îr‹
, 
oÂ_vîsi⁄
 ofp_version,

161 
ovs_be32
 
xid
, c⁄° *
d©a
, 
size_t
 
d©a_Àn
)

163 
oÂ_îr‹_msg
 *
€m
;

164 c⁄° 
∑ú
 *pair;

165 
oÂbuf
 *
buf
;

166 c⁄° 
oÂîr_domaö
 *
domaö
;

168 
domaö
 = 
	`oÂîr_domaö_‰om_vîsi⁄
(
oÂ_vîsi⁄
);

169 i‡(!
domaö
) {

170  
NULL
;

173 i‡(!
	`oÂîr_is_ícodabÀ
(
îr‹
, 
oÂ_vîsi⁄
)) {

174 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 5);

176 i‡(!
	`oÂîr_is_vÆid
(
îr‹
)) {

178 
	`VLOG_WARN_RL
(&
æ
, "invalid OpenFlowÉrror code %d (%s)",

179 
îr‹
, 
	`°ªº‹
(error));

181 c⁄° *
s
 = 
	`oÂîr_gë_«me
(
îr‹
);

182 i‡(
	`oÂîr_is_ˇãg‹y
(
îr‹
)) {

183 
	`VLOG_WARN_RL
(&
æ
, "ˇ¬ŸÉncodêîr‹ c©eg‹y (%s)", 
s
);

185 
	`VLOG_WARN_RL
(&
æ
, "ˇ¬ŸÉncodê%†f‹ %s", 
s
, 
domaö
->
«me
);

189  
NULL
;

192 
∑ú
 = 
	`oÂîr_gë_∑ú__
(
îr‹
, 
domaö
);

193 i‡(!
	`oÂîr_is_nx_exãnsi⁄
(
îr‹
)) {

194 
buf
 = 
	`oÂøw_Æloc_xid
(
OFPRAW_OFPT_ERROR
, 
domaö
->
vîsi⁄
, 
xid
,

195  *
€m
 + 
d©a_Àn
);

197 
€m
 = 
	`oÂbuf_put_unöô
(
buf
,  *oem);

198 
€m
->
ty≥
 = 
	`ht⁄s
(
∑ú
->type);

199 
€m
->
code
 = 
	`ht⁄s
(
∑ú
->code);

201 
nx_víd‹_îr‹
 *
nve
;

203 
buf
 = 
	`oÂøw_Æloc_xid
(
OFPRAW_OFPT_ERROR
, 
domaö
->
vîsi⁄
, 
xid
,

204  *
€m
 +  *
nve
 + 
d©a_Àn
);

206 
€m
 = 
	`oÂbuf_put_unöô
(
buf
,  *oem);

207 
€m
->
ty≥
 = 
	`ht⁄s
(
NXET_VENDOR
);

208 
€m
->
code
 = 
	`ht⁄s
(
NXVC_VENDOR_ERROR
);

210 
nve
 = 
	`oÂbuf_put_unöô
(
buf
,  *nve);

211 
nve
->
víd‹
 = 
	`ht⁄l
(
NX_VENDOR_ID
);

212 
nve
->
ty≥
 = 
	`ht⁄s
(
∑ú
->type);

213 
nve
->
code
 = 
	`ht⁄s
(
∑ú
->code);

216 
	`oÂbuf_put
(
buf
, 
d©a
, 
d©a_Àn
);

218  
buf
;

219 
	}
}

234 
oÂbuf
 *

235 
	$oÂîr_ícode_ª∂y
(
oÂîr
 
îr‹
, c⁄° 
oÂ_hódî
 *
oh
)

237 
uöt16_t
 
Àn
 = 
	`¡ohs
(
oh
->
Àngth
);

239  
	`oÂîr_ícode_msg__
(
îr‹
, 
oh
->
vîsi⁄
, oh->
xid
, oh, 
	`MIN
(
Àn
, 64));

240 
	}
}

252 
oÂbuf
 *

253 
	$oÂîr_ícode_hñlo
(
oÂîr
 
îr‹
, 
oÂ_vîsi⁄
 ofp_version,

254 c⁄° *
s
)

256 
oÂ_vîsi⁄
) {

257 
OFP10_VERSION
:

258 
OFP11_VERSION
:

259 
OFP12_VERSION
:

263 
oÂ_vîsi⁄
 = 
OFP10_VERSION
;

266  
	`oÂîr_ícode_msg__
(
îr‹
, 
oÂ_vîsi⁄
, 
	`ht⁄l
(0), 
s
, 
	`°æí
(s));

267 
	}
}

275 
	$oÂîr_gë_ty≥
(
oÂîr
 
îr‹
, 
oÂ_vîsi⁄
 
vîsi⁄
)

277 c⁄° 
oÂîr_domaö
 *
domaö
 = 
	`oÂîr_domaö_‰om_vîsi⁄
(
vîsi⁄
);

278  
domaö
 ? 
	`oÂîr_gë_∑ú__
(
îr‹
, domaö)->
ty≥
 : -1;

279 
	}
}

289 
	$oÂîr_gë_code
(
oÂîr
 
îr‹
, 
oÂ_vîsi⁄
 
vîsi⁄
)

291 c⁄° 
oÂîr_domaö
 *
domaö
 = 
	`oÂîr_domaö_‰om_vîsi⁄
(
vîsi⁄
);

292  
domaö
 ? 
	`oÂîr_gë_∑ú__
(
îr‹
, domaö)->
code
 : -1;

293 
	}
}

300 
oÂîr


301 
	$oÂîr_decode_msg
(c⁄° 
oÂ_hódî
 *
oh
, 
oÂbuf
 *
∑ylﬂd
)

303 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 5);

305 c⁄° 
oÂ_îr‹_msg
 *
€m
;

306 
oÂøw
 
øw
;

307 
uöt16_t
 
ty≥
, 
code
;

308 
oÂîr
 
îr‹
;

309 
oÂbuf
 
b
;

311 i‡(
∑ylﬂd
) {

312 
	`mem£t
(
∑ylﬂd
, 0,  *payload);

316 
	`oÂbuf_u£_c⁄°
(&
b
, 
oh
, 
	`¡ohs
(oh->
Àngth
));

317 
îr‹
 = 
	`oÂøw_puŒ
(&
øw
, &
b
);

318 i‡(
îr‹
) {

321 
€m
 = 
	`oÂbuf_puŒ
(&
b
,  *oem);

324 
ty≥
 = 
	`¡ohs
(
€m
->type);

325 
code
 = 
	`¡ohs
(
€m
->code);

326 i‡(
ty≥
 =
NXET_VENDOR
 && 
code
 =
NXVC_VENDOR_ERROR
) {

327 c⁄° 
nx_víd‹_îr‹
 *
nve
 = 
	`oÂbuf_åy_puŒ
(&
b
,  *nve);

328 i‡(!
nve
) {

332 i‡(
nve
->
víd‹
 !
	`ht⁄l
(
NX_VENDOR_ID
)) {

333 
	`VLOG_WARN_RL
(&
æ
, "îr‹ c⁄èö†unknow¿víd‹ ID %#"
PRIx32
,

334 
	`¡ohl
(
nve
->
víd‹
));

337 
ty≥
 = 
	`¡ohs
(
nve
->type);

338 
code
 = 
	`¡ohs
(
nve
->code);

343 
îr‹
 = 
	`oÂîr_decode
(
oh
->
vîsi⁄
, 
ty≥
, 
code
);

344 i‡(!
îr‹
) {

345 
îr‹
 = 
	`oÂîr_decode_ty≥
(
oh
->
vîsi⁄
, 
ty≥
);

347 i‡(
îr‹
 && 
∑ylﬂd
) {

348 
	`oÂbuf_u£_c⁄°
(
∑ylﬂd
, 
b
.
d©a
, b.
size
);

350  
îr‹
;

351 
	}
}

358 
	$oÂîr_to_°rög
(
oÂîr
 
îr‹
)

360  
	`oÂîr_is_vÆid
(
îr‹
Ë? 
	`oÂîr_gë_«me
”º‹Ë: 
	`°ªº‹
(error);

361 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/ofp-errors.h

17 #i‚de‡
OFP_ERRORS_H


18 
	#OFP_ERRORS_H
 1

	)

20 
	~<°dboﬁ.h
>

21 
	~<°ddef.h
>

22 
	~<°döt.h
>

24 
	~"›íÊow/›íÊow.h
"

26 
	gds
;

27 
	goÂbuf
;

46 
	#OFPERR_OFS
 (1 << 30)

	)

61 
	eoÂîr
 {

72 
	mOFPERR_OFPET_HELLO_FAILED
 = 
OFPERR_OFS
,

75 
	mOFPERR_OFPHFC_INCOMPATIBLE
,

78 
	mOFPERR_OFPHFC_EPERM
,

85 
	mOFPERR_OFPET_BAD_REQUEST
,

88 
	mOFPERR_OFPBRC_BAD_VERSION
,

91 
	mOFPERR_OFPBRC_BAD_TYPE
,

94 
	mOFPERR_OFPBRC_BAD_STAT
,

98 
	mOFPERR_OFPBRC_BAD_VENDOR
,

101 
	mOFPERR_OFPBRC_BAD_SUBTYPE
,

104 
	mOFPERR_OFPBRC_EPERM
,

107 
	mOFPERR_OFPBRC_BAD_LEN
,

110 
	mOFPERR_OFPBRC_BUFFER_EMPTY
,

113 
	mOFPERR_OFPBRC_BUFFER_UNKNOWN
,

119 
	mOFPERR_OFPBRC_BAD_TABLE_ID
,

122 
	mOFPERR_OFPBRC_IS_SLAVE
,

128 
	mOFPERR_OFPBRC_BAD_PORT
,

131 
	mOFPERR_OFPBRC_BAD_PACKET
,

134 
	mOFPERR_NXBRC_NXM_INVALID
,

138 
	mOFPERR_NXBRC_NXM_BAD_TYPE
,

141 
	mOFPERR_NXBRC_MUST_BE_ZERO
,

145 
	mOFPERR_NXBRC_BAD_REASON
,

150 
	mOFPERR_NXBRC_FM_DUPLICATE_ID
,

155 
	mOFPERR_NXBRC_FM_BAD_FLAGS
,

159 
	mOFPERR_NXBRC_FM_BAD_ID
,

166 
	mOFPERR_OFPET_BAD_ACTION
,

169 
	mOFPERR_OFPBAC_BAD_TYPE
,

172 
	mOFPERR_OFPBAC_BAD_LEN
,

175 
	mOFPERR_OFPBAC_BAD_VENDOR
,

178 
	mOFPERR_OFPBAC_BAD_VENDOR_TYPE
,

181 
	mOFPERR_OFPBAC_BAD_OUT_PORT
,

184 
	mOFPERR_OFPBAC_BAD_ARGUMENT
,

187 
	mOFPERR_OFPBAC_EPERM
,

190 
	mOFPERR_OFPBAC_TOO_MANY
,

193 
	mOFPERR_OFPBAC_BAD_QUEUE
,

196 
	mOFPERR_OFPBAC_BAD_OUT_GROUP
,

199 
	mOFPERR_OFPBAC_MATCH_INCONSISTENT
,

203 
	mOFPERR_OFPBAC_UNSUPPORTED_ORDER
,

206 
	mOFPERR_OFPBAC_BAD_TAG
,

209 
	mOFPERR_OFPBAC_SET_TYPE
,

212 
	mOFPERR_OFPBAC_SET_LEN
,

215 
	mOFPERR_OFPBAC_ARGUMENT
,

218 
	mOFPERR_NXBAC_MUST_BE_ZERO
,

225 
	mOFPERR_OFPIT_BAD_INSTRUCTION
,

228 
	mOFPERR_OFPBIC_UNKNOWN_INST
,

231 
	mOFPERR_OFPBIC_UNSUP_INST
,

234 
	mOFPERR_OFPBIC_BAD_TABLE_ID
,

237 
	mOFPERR_OFPBIC_UNSUP_METADATA
,

240 
	mOFPERR_OFPBIC_UNSUP_METADATA_MASK
,

243 
	mOFPERR_OFPBIC_BAD_EXPERIMENTER
,

246 
	mOFPERR_OFPBIC_BAD_EXP_TYPE
,

249 
	mOFPERR_OFPBIC_BAD_LEN
,

252 
	mOFPERR_OFPBIC_EPERM
,

259 
	mOFPERR_OFPET_BAD_MATCH
,

262 
	mOFPERR_OFPBMC_BAD_TYPE
,

265 
	mOFPERR_OFPBMC_BAD_LEN
,

268 
	mOFPERR_OFPBMC_BAD_TAG
,

272 
	mOFPERR_OFPBMC_BAD_DL_ADDR_MASK
,

276 
	mOFPERR_OFPBMC_BAD_NW_ADDR_MASK
,

279 
	mOFPERR_OFPBMC_BAD_WILDCARDS
,

282 
	mOFPERR_OFPBMC_BAD_FIELD
,

286 
	mOFPERR_OFPBMC_BAD_VALUE
,

290 
	mOFPERR_OFPBMC_BAD_MASK
,

293 
	mOFPERR_OFPBMC_BAD_PREREQ
,

297 
	mOFPERR_OFPBMC_DUP_FIELD
,

300 
	mOFPERR_OFPBMC_EPERM
,

307 
	mOFPERR_OFPET_FLOW_MOD_FAILED
,

310 
	mOFPERR_OFPFMFC_UNKNOWN
,

313 
	mOFPERR_OFPFMFC_TABLE_FULL
,

316 
	mOFPERR_OFPFMFC_BAD_TABLE_ID
,

320 
	mOFPERR_OFPFMFC_OVERLAP
,

323 
	mOFPERR_OFPFMFC_EPERM
,

327 
	mOFPERR_OFPFMFC_BAD_TIMEOUT
,

330 
	mOFPERR_OFPFMFC_BAD_EMERG_TIMEOUT
,

333 
	mOFPERR_OFPFMFC_BAD_COMMAND
,

336 
	mOFPERR_OFPFMFC_BAD_FLAGS
,

340 
	mOFPERR_OFPFMFC_UNSUPPORTED
,

343 
	mOFPERR_NXFMFC_HARDWARE
,

348 
	mOFPERR_NXFMFC_BAD_TABLE_ID
,

355 
	mOFPERR_OFPET_GROUP_MOD_FAILED
,

359 
	mOFPERR_OFPGMFC_GROUP_EXISTS
,

362 
	mOFPERR_OFPGMFC_INVALID_GROUP
,

366 
	mOFPERR_OFPGMFC_WEIGHT_UNSUPPORTED
,

369 
	mOFPERR_OFPGMFC_OUT_OF_GROUPS
,

373 
	mOFPERR_OFPGMFC_OUT_OF_BUCKETS
,

376 
	mOFPERR_OFPGMFC_CHAINING_UNSUPPORTED
,

380 
	mOFPERR_OFPGMFC_WATCH_UNSUPPORTED
,

383 
	mOFPERR_OFPGMFC_LOOP
,

387 
	mOFPERR_OFPGMFC_UNKNOWN_GROUP
,

391 
	mOFPERR_OFPGMFC_CHAINED_GROUP
,

394 
	mOFPERR_OFPGMFC_BAD_TYPE
,

397 
	mOFPERR_OFPGMFC_BAD_COMMAND
,

400 
	mOFPERR_OFPGMFC_OFPGMFC_BAD_BUCKET
,

403 
	mOFPERR_OFPGMFC_OFPGMFC_BAD_WATCH
,

406 
	mOFPERR_OFPGMFC_OFPGMFC_EPERM
,

413 
	mOFPERR_OFPET_PORT_MOD_FAILED
,

416 
	mOFPERR_OFPPMFC_BAD_PORT
,

420 
	mOFPERR_OFPPMFC_BAD_HW_ADDR
,

423 
	mOFPERR_OFPPMFC_BAD_CONFIG
,

426 
	mOFPERR_OFPPMFC_BAD_ADVERTISE
,

429 
	mOFPERR_OFPPMFC_EPERM
,

436 
	mOFPERR_OFPET_TABLE_MOD_FAILED
,

439 
	mOFPERR_OFPTMFC_BAD_TABLE
,

442 
	mOFPERR_OFPTMFC_BAD_CONFIG
,

445 
	mOFPERR_OFPTMFC_EPERM
,

452 
	mOFPERR_OFPET_QUEUE_OP_FAILED
,

455 
	mOFPERR_OFPQOFC_BAD_PORT
,

458 
	mOFPERR_OFPQOFC_BAD_QUEUE
,

461 
	mOFPERR_OFPQOFC_EPERM
,

468 
	mOFPERR_OFPET_SWITCH_CONFIG_FAILED
,

471 
	mOFPERR_OFPSCFC_BAD_FLAGS
,

474 
	mOFPERR_OFPSCFC_BAD_LEN
,

477 
	mOFPERR_OFPSCFC_EPERM
,

484 
	mOFPERR_OFPET_ROLE_REQUEST_FAILED
,

487 
	mOFPERR_OFPRRFC_STALE
,

490 
	mOFPERR_OFPRRFC_UNSUP
,

493 
	mOFPERR_OFPRRFC_BAD_ROLE
,

500 
	mOFPERR_OFPET_EXPERIMENTER
,

503 c⁄° *
oÂîr_domaö_gë_«me
(
oÂ_vîsi⁄
);

505 
boﬁ
 
oÂîr_is_vÆid
(
oÂîr
);

506 
boﬁ
 
oÂîr_is_ˇãg‹y
(
oÂîr
);

507 
boﬁ
 
oÂîr_is_nx_exãnsi⁄
(
oÂîr
);

508 
boﬁ
 
oÂîr_is_ícodabÀ
(
oÂîr
, 
oÂ_vîsi⁄
);

510 
oÂîr
 
oÂîr_decode
(
oÂ_vîsi⁄
, 
uöt16_t
 
ty≥
, uöt16_à
code
);

511 
oÂîr
 
oÂîr_decode_ty≥
(
oÂ_vîsi⁄
, 
uöt16_t
 
ty≥
);

512 
oÂîr
 
oÂîr_‰om_«me
(const *);

514 
oÂîr
 
oÂîr_decode_msg
(c⁄° 
oÂ_hódî
 *,

515 
oÂbuf
 *
∑ylﬂd
);

516 
oÂbuf
 *
oÂîr_ícode_ª∂y
(
oÂîr
, c⁄° 
oÂ_hódî
 *);

517 
oÂbuf
 *
oÂîr_ícode_hñlo
(
oÂîr
, 
oÂ_vîsi⁄
 ofp_version,

519 
oÂîr_gë_ty≥
(
oÂîr
, 
oÂ_vîsi⁄
);

520 
oÂîr_gë_code
(
oÂîr
, 
oÂ_vîsi⁄
);

522 c⁄° *
oÂîr_gë_«me
(
oÂîr
);

523 c⁄° *
oÂîr_gë_des¸ùti⁄
(
oÂîr
);

525 
oÂîr_f‹m©
(
ds
 *, 
oÂîr
);

526 c⁄° *
oÂîr_to_°rög
(
oÂîr
);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/ofp-msgs.c

17 
	~<c⁄fig.h
>

18 
	~"oÂ-msgs.h
"

19 
	~<as£π.h
>

20 
	~"byã-‹dî.h
"

21 
	~"dy«mic-°rög.h
"

22 
	~"hash.h
"

23 
	~"hm≠.h
"

24 
	~"oÂbuf.h
"

25 
	~"›íÊow/nicúa-ext.h
"

26 
	~"›íÊow/›íÊow.h
"

27 
	~"vlog.h
"

29 
VLOG_DEFINE_THIS_MODULE
(
oÂ_msgs
);

31 
	#OFPT_VENDOR
 4

	)

32 
	#OFPT10_STATS_REQUEST
 16

	)

33 
	#OFPT10_STATS_REPLY
 17

	)

34 
	#OFPT11_STATS_REQUEST
 18

	)

35 
	#OFPT11_STATS_REPLY
 19

	)

36 
	#OFPST_VENDOR
 0xffff

	)

55 
	soÂhdrs
 {

56 
uöt8_t
 
	mvîsi⁄
;

57 
uöt8_t
 
	mty≥
;

58 
uöt16_t
 
	m°©
;

59 
uöt32_t
 
	mvíd‹
;

62 
uöt32_t
 
	msubty≥
;

65 
BUILD_ASSERT_DECL
((
oÂhdrs
) == 12);

68 
	søw_ö°™˚
 {

69 
hm≠_node
 
	mhm≠_node
;

70 
oÂhdrs
 
	mhdrs
;

71 
oÂøw
 
	møw
;

72 
	mhdrs_Àn
;

76 
	søw_öfo
 {

78 
øw_ö°™˚
 *
	mö°™˚s
;

79 
uöt8_t
 
	mmö_vîsi⁄
;

80 
uöt8_t
 
	mmax_vîsi⁄
;

82 
	mmö_body
;

83 
	mexåa_mu…ùÀ
;

84 
oÂty≥
 
	mty≥
;

85 c⁄° *
	m«me
;

89 
hm≠
 
	gøw_ö°™˚_m≠
;

90 
	~"oÂ-msgs.öc
"

92 
ovs_be32
 
Æloc_xid
();

95 
uöt32_t
 
oÂhdrs_hash
(c⁄° 
oÂhdrs
 *);

96 
boﬁ
 
oÂhdrs_equÆ
(c⁄° 
oÂhdrs
 *
a
, c⁄° oÂhdr†*
b
);

97 
oÂîr
 
oÂhdrs_decode
(
oÂhdrs
 *,

98 c⁄° 
oÂ_hódî
 *
oh
, 
size_t
 
Àngth
);

99 
oÂhdrs_decode_as£π
(
oÂhdrs
 *,

100 c⁄° 
oÂ_hódî
 *
oh
, 
size_t
 
Àngth
);

101 
size_t
 
oÂhdrs_Àn
(c⁄° 
oÂhdrs
 *);

103 c⁄° 
øw_öfo
 *
øw_öfo_gë
(
oÂøw
);

104 
øw_ö°™˚
 *
øw_ö°™˚_gë
(c⁄° 
øw_öfo
 *,

105 
uöt8_t
 
vîsi⁄
);

107 
oÂîr
 
oÂøw_‰om_oÂhdrs
(
oÂøw
 *, c⁄° 
oÂhdrs
 *);

110 
ovs_be32


111 
	$Æloc_xid
()

113 
uöt32_t
 
√xt_xid
 = 1;

114  
	`ht⁄l
(
√xt_xid
++);

115 
	}
}

117 
uöt32_t


118 
	$oÂhdrs_hash
(c⁄° 
oÂhdrs
 *
hdrs
)

120 
	`BUILD_ASSERT_DECL
( *
hdrs
 == 12);

121  
	`hash_w‹ds
((c⁄° 
uöt32_t
 *Ë
hdrs
, 3, 0);

122 
	}
}

124 
boﬁ


125 
	$oÂhdrs_equÆ
(c⁄° 
oÂhdrs
 *
a
, c⁄° oÂhdr†*
b
)

127  !
	`memcmp
(
a
, 
b
,  *a);

128 
	}
}

131 
	$log_bad_víd‹
(
uöt32_t
 
víd‹
)

133 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 1);

135 
	`VLOG_WARN_RL
(&
æ
, "O≥nFlow mesßgêha†unknow¿víd‹ %#"
PRIx32
, 
víd‹
);

136 
	}
}

138 
oÂîr


139 
	$oÂhdrs_decode
(
oÂhdrs
 *
hdrs
,

140 c⁄° 
oÂ_hódî
 *
oh
, 
size_t
 
Àngth
)

142 
	`mem£t
(
hdrs
, 0,  *hdrs);

143 i‡(
Àngth
 <  *
oh
) {

144  
OFPERR_OFPBRC_BAD_LEN
;

148 
hdrs
->
vîsi⁄
 = 
oh
->version;

149 
hdrs
->
ty≥
 = 
oh
->type;

151 i‡(
hdrs
->
ty≥
 =
OFPT_VENDOR
) {

153 c⁄° 
oÂ_víd‹_hódî
 *
ovh
;

155 i‡(
Àngth
 <  *
ovh
) {

156  
OFPERR_OFPBRC_BAD_LEN
;

159 
ovh
 = (c⁄° 
oÂ_víd‹_hódî
 *Ë
oh
;

160 
hdrs
->
víd‹
 = 
	`¡ohl
(
ovh
->vendor);

161 i‡(
hdrs
->
víd‹
 =
NX_VENDOR_ID
) {

163 c⁄° 
nicúa_hódî
 *
nh
;

165 i‡(
Àngth
 <  *
nh
) {

166  
OFPERR_OFPBRC_BAD_LEN
;

168 
nh
 = (c⁄° 
nicúa_hódî
 *Ë
oh
;

169 
hdrs
->
subty≥
 = 
	`¡ohl
(
nh
->subtype);

171 } if(
hdrs
->
víd‹
 =
NC_VENDOR_ID
) {

172 c⁄° 
nc_hódî
 *
nch
;

173 if(
Àngth
 <  *
nch
) {

174  
OFPERR_OFPBRC_BAD_LEN
;

176 
nch
 = (c⁄° 
nc_hódî
 *Ë
oh
;

177 
hdrs
->
subty≥
 = 
	`¡ohl
(
nch
->subtype);

180 
	`log_bad_víd‹
(
hdrs
->
víd‹
);

181  
OFPERR_OFPBRC_BAD_VENDOR
;

183 } i‡(
hdrs
->
vîsi⁄
 =
OFP10_VERSION


184 && (
hdrs
->
ty≥
 =
OFPT10_STATS_REQUEST
 ||

185 
hdrs
->
ty≥
 =
OFPT10_STATS_REPLY
)) {

186 c⁄° 
oÂ10_°©s_msg
 *
osm
;

189 i‡(
Àngth
 <  *
osm
) {

190  
OFPERR_OFPBRC_BAD_LEN
;

192 
osm
 = (c⁄° 
oÂ10_°©s_msg
 *Ë
oh
;

193 
hdrs
->
°©
 = 
	`¡ohs
(
osm
->
ty≥
);

195 i‡(
hdrs
->
°©
 =
OFPST_VENDOR
) {

197 c⁄° 
oÂ10_víd‹_°©s_msg
 *
ovsm
;

199 i‡(
Àngth
 <  *
ovsm
) {

200  
OFPERR_OFPBRC_BAD_LEN
;

203 
ovsm
 = (c⁄° 
oÂ10_víd‹_°©s_msg
 *Ë
oh
;

204 
hdrs
->
víd‹
 = 
	`¡ohl
(
ovsm
->vendor);

205 i‡(
hdrs
->
víd‹
 =
NX_VENDOR_ID
) {

207 c⁄° 
nicúa10_°©s_msg
 *
nsm
;

209 i‡(
Àngth
 <  *
nsm
) {

210  
OFPERR_OFPBRC_BAD_LEN
;

212 
nsm
 = (c⁄° 
nicúa10_°©s_msg
 *Ë
oh
;

213 
hdrs
->
subty≥
 = 
	`¡ohl
(
nsm
->subtype);

215 
	`log_bad_víd‹
(
hdrs
->
víd‹
);

216  
OFPERR_OFPBRC_BAD_VENDOR
;

219 } i‡(
hdrs
->
vîsi⁄
 !
OFP10_VERSION


220 && (
hdrs
->
ty≥
 =
OFPT11_STATS_REQUEST
 ||

221 
hdrs
->
ty≥
 =
OFPT11_STATS_REPLY
)) {

222 c⁄° 
oÂ11_°©s_msg
 *
osm
;

225 i‡(
Àngth
 <  *
osm
) {

226  
OFPERR_OFPBRC_BAD_LEN
;

228 
osm
 = (c⁄° 
oÂ11_°©s_msg
 *Ë
oh
;

229 
hdrs
->
°©
 = 
	`¡ohs
(
osm
->
ty≥
);

231 i‡(
hdrs
->
°©
 =
OFPST_VENDOR
) {

233 c⁄° 
oÂ11_víd‹_°©s_msg
 *
ovsm
;

235 i‡(
Àngth
 <  *
ovsm
) {

236  
OFPERR_OFPBRC_BAD_LEN
;

239 
ovsm
 = (c⁄° 
oÂ11_víd‹_°©s_msg
 *Ë
oh
;

240 
hdrs
->
víd‹
 = 
	`¡ohl
(
ovsm
->vendor);

241 i‡(
hdrs
->
víd‹
 =
NX_VENDOR_ID
) {

243 c⁄° 
nicúa11_°©s_msg
 *
nsm
;

245 i‡(
Àngth
 <  *
nsm
) {

246  
OFPERR_OFPBRC_BAD_LEN
;

248 
nsm
 = (c⁄° 
nicúa11_°©s_msg
 *Ë
oh
;

249 
hdrs
->
subty≥
 = 
	`¡ohl
(
nsm
->subtype);

251 
	`log_bad_víd‹
(
hdrs
->
víd‹
);

252  
OFPERR_OFPBRC_BAD_VENDOR
;

258 
	}
}

261 
	$oÂhdrs_decode_as£π
(
oÂhdrs
 *
hdrs
,

262 c⁄° 
oÂ_hódî
 *
oh
, 
size_t
 
Àngth
)

264 
oÂîr
 
îr‹
 = 
	`oÂhdrs_decode
(
hdrs
, 
oh
, 
Àngth
);

265 
	`as£π
(!
îr‹
);

266 
	}
}

268 
boﬁ


269 
	$oÂhdrs_is_°©
(c⁄° 
oÂhdrs
 *
hdrs
)

271 (
oÂ_vîsi⁄
Ë
hdrs
->
vîsi⁄
) {

272 
OFP10_VERSION
:

273  (
hdrs
->
ty≥
 =
OFPT10_STATS_REQUEST
 ||

274 
hdrs
->
ty≥
 =
OFPT10_STATS_REPLY
);

275 
OFP11_VERSION
:

276 
OFP12_VERSION
:

277  (
hdrs
->
ty≥
 =
OFPT11_STATS_REQUEST
 ||

278 
hdrs
->
ty≥
 =
OFPT11_STATS_REPLY
);

281  
Ál£
;

282 
	}
}

284 
size_t


285 
	$oÂhdrs_Àn
(c⁄° 
oÂhdrs
 *
hdrs
)

287 i‡(
hdrs
->
ty≥
 =
OFPT_VENDOR
) {

288  (
nicúa_hódî
);

291 (
oÂ_vîsi⁄
Ë
hdrs
->
vîsi⁄
) {

292 
OFP10_VERSION
:

293 i‡(
hdrs
->
ty≥
 =
OFPT10_STATS_REQUEST
 ||

294 
hdrs
->
ty≥
 =
OFPT10_STATS_REPLY
) {

295  (
hdrs
->
°©
 =
OFPST_VENDOR


296 ? (
nicúa10_°©s_msg
)

297 : (
oÂ10_°©s_msg
));

301 
OFP11_VERSION
:

302 
OFP12_VERSION
:

303 i‡(
hdrs
->
ty≥
 =
OFPT11_STATS_REQUEST
 ||

304 
hdrs
->
ty≥
 =
OFPT11_STATS_REPLY
) {

305  (
hdrs
->
°©
 =
OFPST_VENDOR


306 ? (
nicúa11_°©s_msg
)

307 : (
oÂ11_°©s_msg
));

312  (
oÂ_hódî
);

313 
	}
}

322 
oÂîr


323 
	$oÂøw_decode
(
oÂøw
 *
øw
, c⁄° 
oÂ_hódî
 *
oh
)

325 
oÂbuf
 
msg
;

327 
	`oÂbuf_u£_c⁄°
(&
msg
, 
oh
, 
	`¡ohs
(oh->
Àngth
));

328  
	`oÂøw_puŒ
(
øw
, &
msg
);

329 
	}
}

344 
oÂîr


345 
	$oÂøw_puŒ
(
oÂøw
 *
øwp
, 
oÂbuf
 *
msg
)

347 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 5);

349 c⁄° 
øw_ö°™˚
 *
ö°™˚
;

350 c⁄° 
øw_öfo
 *
öfo
;

351 
oÂhdrs
 
hdrs
;

353 
mö_Àn
;

354 
Àn
;

356 
oÂîr
 
îr‹
;

357 
oÂøw
 
øw
;

360 
msg
->
l2
 = msg->
l3
 = msg->
d©a
;

361 *
øwp
 = 0;

363 
Àn
 = 
msg
->
size
;

364 
îr‹
 = 
	`oÂhdrs_decode
(&
hdrs
, 
msg
->
d©a
, 
Àn
);

365 i‡(
îr‹
) {

366  
îr‹
;

369 
îr‹
 = 
	`oÂøw_‰om_oÂhdrs
(&
øw
, &
hdrs
);

370 i‡(
îr‹
) {

371  
îr‹
;

374 
öfo
 = 
	`øw_öfo_gë
(
øw
);

375 
ö°™˚
 = 
	`øw_ö°™˚_gë
(
öfo
, 
hdrs
.
vîsi⁄
);

376 
msg
->
l2
 = 
	`oÂbuf_puŒ
(msg, 
ö°™˚
->
hdrs_Àn
);

377 
msg
->
l3
 = msg->
d©a
;

379 
mö_Àn
 = 
ö°™˚
->
hdrs_Àn
 + 
öfo
->
mö_body
;

380 
öfo
->
exåa_mu…ùÀ
) {

382 i‡(
Àn
 !
mö_Àn
) {

383 
	`VLOG_WARN_RL
(&
æ
, "received %s with incorrectÜength %u (expected "

384 "Àngth %u)", 
öfo
->
«me
, 
Àn
, 
mö_Àn
);

385  
OFPERR_OFPBRC_BAD_LEN
;

390 i‡(
Àn
 < 
mö_Àn
) {

391 
	`VLOG_WARN_RL
(&
æ
, "received %s with incorrectÜength %u (expected "

393 
öfo
->
«me
, 
Àn
, 
mö_Àn
);

394  
OFPERR_OFPBRC_BAD_LEN
;

399 i‡(
Àn
 < 
mö_Àn
 || (À¿- mö_ÀnË% 
öfo
->
exåa_mu…ùÀ
) {

400 
	`VLOG_WARN_RL
(&
æ
, "received %s with incorrectÜength %u (must be "

403 
öfo
->
«me
, 
Àn
, 
mö_Àn
, info->
exåa_mu…ùÀ
);

404  
OFPERR_OFPBRC_BAD_LEN
;

409 *
øwp
 = 
øw
;

411 
	}
}

419 
oÂøw


420 
	$oÂøw_puŒ_as£π
(
oÂbuf
 *
msg
)

422 
oÂîr
 
îr‹
;

423 
oÂøw
 
øw
;

425 
îr‹
 = 
	`oÂøw_puŒ
(&
øw
, 
msg
);

426 
	`as£π
(!
îr‹
);

427  
øw
;

428 
	}
}

440 
oÂîr


441 
	$oÂøw_decode_∑πül
(
oÂøw
 *
øw
,

442 c⁄° 
oÂ_hódî
 *
oh
, 
size_t
 
Àngth
)

444 
oÂhdrs
 
hdrs
;

445 
oÂîr
 
îr‹
;

447 
îr‹
 = 
	`oÂhdrs_decode
(&
hdrs
, 
oh
, 
Àngth
);

448 i‡(!
îr‹
) {

449 
îr‹
 = 
	`oÂøw_‰om_oÂhdrs
(
øw
, &
hdrs
);

452 i‡(
îr‹
) {

453 *
øw
 = 0;

455  
îr‹
;

456 
	}
}

460 
oÂøw_put__
(
oÂøw
, 
uöt8_t
 
vîsi⁄
, 
ovs_be32
 
xid
,

461 
size_t
 
exåa_èûroom
, 
oÂbuf
 *);

478 
oÂbuf
 *

479 
	$oÂøw_Æloc
(
oÂøw
 
øw
, 
uöt8_t
 
vîsi⁄
, 
size_t
 
exåa_èûroom
)

481  
	`oÂøw_Æloc_xid
(
øw
, 
vîsi⁄
, 
	`Æloc_xid
(), 
exåa_èûroom
);

482 
	}
}

485 
oÂbuf
 *

486 
	$oÂøw_Æloc_xid
(
oÂøw
 
øw
, 
uöt8_t
 
vîsi⁄
, 
ovs_be32
 
xid
,

487 
size_t
 
exåa_èûroom
)

489 
oÂbuf
 *
buf
 = 
	`oÂbuf_√w
(0);

490 
	`oÂøw_put__
(
øw
, 
vîsi⁄
, 
xid
, 
exåa_èûroom
, 
buf
);

491  
buf
;

492 
	}
}

500 
oÂbuf
 *

501 
	$oÂøw_Æloc_ª∂y
(
oÂøw
 
øw
, c⁄° 
oÂ_hódî
 *
ªque°
,

502 
size_t
 
exåa_èûroom
)

504  
	`oÂøw_Æloc_xid
(
øw
, 
ªque°
->
vîsi⁄
,Ñeque°->
xid
,

505 
exåa_èûroom
);

506 
	}
}

525 
oÂbuf
 *

526 
	$oÂøw_Æloc_°©s_ª∂y
(c⁄° 
oÂ_hódî
 *
ªque°
,

527 
size_t
 
exåa_èûroom
)

529 
oÂøw
 
ªque°_øw
;

530 
oÂøw
 
ª∂y_øw
;

531 
oÂîr
 
îr‹
;

533 
îr‹
 = 
	`oÂøw_decode_∑πül
(&
ªque°_øw
, 
ªque°
,

534 
	`¡ohs
(
ªque°
->
Àngth
));

535 
	`as£π
(!
îr‹
);

537 
ª∂y_øw
 = 
	`oÂøw_°©s_ªque°_to_ª∂y
(
ªque°_øw
, 
ªque°
->
vîsi⁄
);

538 
	`as£π
(
ª∂y_øw
);

540  
	`oÂøw_Æloc_ª∂y
(
ª∂y_øw
, 
ªque°
, 
exåa_èûroom
);

541 
	}
}

556 
	$oÂøw_put
(
oÂøw
 
øw
, 
uöt8_t
 
vîsi⁄
, 
oÂbuf
 *
buf
)

558 
	`oÂøw_put__
(
øw
, 
vîsi⁄
, 
	`Æloc_xid
(), 0, 
buf
);

559 
	}
}

563 
	$oÂøw_put_xid
(
oÂøw
 
øw
, 
uöt8_t
 
vîsi⁄
, 
ovs_be32
 
xid
,

564 
oÂbuf
 *
buf
)

566 
	`oÂøw_put__
(
øw
, 
vîsi⁄
, 
xid
, 0, 
buf
);

567 
	}
}

576 
	$oÂøw_put_ª∂y
(
oÂøw
 
øw
, c⁄° 
oÂ_hódî
 *
ªque°
,

577 
oÂbuf
 *
buf
)

579 
	`oÂøw_put__
(
øw
, 
ªque°
->
vîsi⁄
,Ñeque°->
xid
, 0, 
buf
);

580 
	}
}

599 
	$oÂøw_put_°©s_ª∂y
(c⁄° 
oÂ_hódî
 *
ªque°
, 
oÂbuf
 *
buf
)

601 
oÂîr
 
îr‹
;

602 
oÂøw
 
øw
;

604 
îr‹
 = 
	`oÂøw_decode_∑πül
(&
øw
, 
ªque°
, 
	`¡ohs
‘eque°->
Àngth
));

605 
	`as£π
(!
îr‹
);

607 
øw
 = 
	`oÂøw_°©s_ªque°_to_ª∂y
‘aw, 
ªque°
->
vîsi⁄
);

608 
	`as£π
(
øw
);

610 
	`oÂøw_put__
(
øw
, 
ªque°
->
vîsi⁄
,Ñeque°->
xid
, 0, 
buf
);

611 
	}
}

614 
	$oÂøw_put__
(
oÂøw
 
øw
, 
uöt8_t
 
vîsi⁄
, 
ovs_be32
 
xid
,

615 
size_t
 
exåa_èûroom
, 
oÂbuf
 *
buf
)

617 c⁄° 
øw_öfo
 *
öfo
 = 
	`øw_öfo_gë
(
øw
);

618 c⁄° 
øw_ö°™˚
 *
ö°™˚
 = 
	`øw_ö°™˚_gë
(
öfo
, 
vîsi⁄
);

619 c⁄° 
oÂhdrs
 *
hdrs
 = &
ö°™˚
->hdrs;

620 
oÂ_hódî
 *
oh
;

622 
	`oÂbuf_¥óŒoc_èûroom
(
buf
, (
ö°™˚
->
hdrs_Àn
 + 
öfo
->
mö_body


623 + 
exåa_èûroom
));

624 
buf
->
l2
 = 
	`oÂbuf_put_unöô
(buf, 
ö°™˚
->
hdrs_Àn
);

625 
buf
->
l3
 = 
	`oÂbuf_èû
(buf);

627 
oh
 = 
buf
->
l2
;

628 
oh
->
vîsi⁄
 = version;

629 
oh
->
ty≥
 = 
hdrs
->type;

630 
oh
->
Àngth
 = 
	`ht⁄s
(
buf
->
size
);

631 
oh
->
xid
 = xid;

633 i‡(
hdrs
->
ty≥
 =
OFPT_VENDOR
) {

634 
nicúa_hódî
 *
nh
 = 
buf
->
l2
;

636 
	`as£π
(
hdrs
->
víd‹
 =
NX_VENDOR_ID
);

637 
nh
->
víd‹
 = 
	`ht⁄l
(
hdrs
->vendor);

638 
nh
->
subty≥
 = 
	`ht⁄l
(
hdrs
->subtype);

639 } i‡(
vîsi⁄
 =
OFP10_VERSION


640 && (
hdrs
->
ty≥
 =
OFPT10_STATS_REQUEST
 ||

641 
hdrs
->
ty≥
 =
OFPT10_STATS_REPLY
)) {

642 
oÂ10_°©s_msg
 *
osm
 = 
buf
->
l2
;

644 
osm
->
ty≥
 = 
	`ht⁄s
(
hdrs
->
°©
);

645 
osm
->
Êags
 = 
	`ht⁄s
(0);

647 i‡(
hdrs
->
°©
 =
OFPST_VENDOR
) {

648 
oÂ10_víd‹_°©s_msg
 *
ovsm
 = 
buf
->
l2
;

650 
ovsm
->
víd‹
 = 
	`ht⁄l
(
hdrs
->vendor);

651 i‡(
hdrs
->
víd‹
 =
NX_VENDOR_ID
) {

652 
nicúa10_°©s_msg
 *
nsm
 = 
buf
->
l2
;

654 
nsm
->
subty≥
 = 
	`ht⁄l
(
hdrs
->subtype);

655 
	`mem£t
(
nsm
->
∑d
, 0, Çsm->pad);

657 
	`NOT_REACHED
();

660 } i‡(
vîsi⁄
 !
OFP10_VERSION


661 && (
hdrs
->
ty≥
 =
OFPT11_STATS_REQUEST
 ||

662 
hdrs
->
ty≥
 =
OFPT11_STATS_REPLY
)) {

663 
oÂ11_°©s_msg
 *
osm
 = 
buf
->
l2
;

665 
osm
->
ty≥
 = 
	`ht⁄s
(
hdrs
->
°©
);

666 
osm
->
Êags
 = 
	`ht⁄s
(0);

667 
	`mem£t
(
osm
->
∑d
, 0,  osm->pad);

669 i‡(
hdrs
->
°©
 =
OFPST_VENDOR
) {

670 
oÂ11_víd‹_°©s_msg
 *
ovsm
 = 
buf
->
l2
;

672 
ovsm
->
víd‹
 = 
	`ht⁄l
(
hdrs
->vendor);

673 i‡(
hdrs
->
víd‹
 =
NX_VENDOR_ID
) {

674 
nicúa11_°©s_msg
 *
nsm
 = 
buf
->
l2
;

676 
nsm
->
subty≥
 = 
	`ht⁄l
(
hdrs
->subtype);

678 
	`NOT_REACHED
();

682 
	}
}

692 
	$oÂøw_gë_«me
(
oÂøw
 
øw
)

694  
	`øw_öfo_gë
(
øw
)->
«me
;

695 
	}
}

699 
oÂøw


700 
	$oÂøw_°©s_ªque°_to_ª∂y
(
oÂøw
 
øw
, 
uöt8_t
 
vîsi⁄
)

702 c⁄° 
øw_öfo
 *
öfo
 = 
	`øw_öfo_gë
(
øw
);

703 c⁄° 
øw_ö°™˚
 *
ö°™˚
 = 
	`øw_ö°™˚_gë
(
öfo
, 
vîsi⁄
);

704 
oÂøw
 
ª∂y_øw
;

705 
oÂhdrs
 
hdrs
;

706 
oÂîr
 
îr‹
;

708 
hdrs
 = 
ö°™˚
->hdrs;

709 (
oÂ_vîsi⁄
)
hdrs
.
vîsi⁄
) {

710 
OFP10_VERSION
:

711 
	`as£π
(
hdrs
.
ty≥
 =
OFPT10_STATS_REQUEST
);

712 
hdrs
.
ty≥
 = 
OFPT10_STATS_REPLY
;

714 
OFP11_VERSION
:

715 
OFP12_VERSION
:

716 
	`as£π
(
hdrs
.
ty≥
 =
OFPT11_STATS_REQUEST
);

717 
hdrs
.
ty≥
 = 
OFPT11_STATS_REPLY
;

720 
	`NOT_REACHED
();

723 
îr‹
 = 
	`oÂøw_‰om_oÂhdrs
(&
ª∂y_øw
, &
hdrs
);

724 
	`as£π
(!
îr‹
);

726  
ª∂y_øw
;

727 
	}
}

736 
oÂîr


737 
	$oÂty≥_decode
(
oÂty≥
 *
ty≥p
, c⁄° 
oÂ_hódî
 *
oh
)

739 
oÂîr
 
îr‹
;

740 
oÂøw
 
øw
;

742 
îr‹
 = 
	`oÂøw_decode
(&
øw
, 
oh
);

743 *
ty≥p
 = 
îr‹
 ? 0 : 
	`oÂty≥_‰om_oÂøw
(
øw
);

744  
îr‹
;

745 
	}
}

760 
oÂîr


761 
	$oÂty≥_puŒ
(
oÂty≥
 *
ty≥p
, 
oÂbuf
 *
buf
)

763 
oÂîr
 
îr‹
;

764 
oÂøw
 
øw
;

766 
îr‹
 = 
	`oÂøw_puŒ
(&
øw
, 
buf
);

767 *
ty≥p
 = 
îr‹
 ? 0 : 
	`oÂty≥_‰om_oÂøw
(
øw
);

768  
îr‹
;

769 
	}
}

775 
oÂty≥


776 
	$oÂty≥_‰om_oÂøw
(
oÂøw
 
øw
)

778  
	`øw_öfo_gë
(
øw
)->
ty≥
;

779 
	}
}

784 
	$oÂmsg_upd©e_Àngth
(
oÂbuf
 *
buf
)

786 
oÂ_hódî
 *
oh
 = 
	`oÂbuf_©_as£π
(
buf
, 0,  *oh);

787 
oh
->
Àngth
 = 
	`ht⁄s
(
buf
->
size
);

788 
	}
}

793 
	$oÂmsg_body
(c⁄° 
oÂ_hódî
 *
oh
)

795 
oÂhdrs
 
hdrs
;

797 
	`oÂhdrs_decode_as£π
(&
hdrs
, 
oh
, 
	`¡ohs
(oh->
Àngth
));

798  (c⁄° 
uöt8_t
 *Ë
oh
 + 
	`oÂhdrs_Àn
(&
hdrs
);

799 
	}
}

801 
ovs_be16
 *
oÂmp_Êags__
(c⁄° 
oÂ_hódî
 *);

809 
	$oÂmp_öô
(
li°
 *
ª∂õs
, c⁄° 
oÂ_hódî
 *
ªque°
)

811 
oÂbuf
 *
msg
;

813 
	`li°_öô
(
ª∂õs
);

815 
msg
 = 
	`oÂøw_Æloc_°©s_ª∂y
(
ªque°
, 1000);

816 
	`li°_push_back
(
ª∂õs
, &
msg
->
li°_node
);

817 
	}
}

826 
oÂbuf
 *

827 
	$oÂmp_ª£rve
(
li°
 *
ª∂õs
, 
size_t
 
Àn
)

829 
oÂbuf
 *
msg
 = 
	`oÂbuf_‰om_li°
(
	`li°_back
(
ª∂õs
));

831 i‡(
msg
->
size
 + 
Àn
 <
UINT16_MAX
) {

832 
	`oÂbuf_¥óŒoc_èûroom
(
msg
, 
Àn
);

833  
msg
;

835 
hdrs_Àn
;

836 
oÂbuf
 *
√xt
;

837 
oÂhdrs
 
hdrs
;

839 
	`oÂhdrs_decode_as£π
(&
hdrs
, 
msg
->
d©a
, msg->
size
);

840 
hdrs_Àn
 = 
	`oÂhdrs_Àn
(&
hdrs
);

842 
√xt
 = 
	`oÂbuf_√w
(
	`MAX
(1024, 
hdrs_Àn
 + 
Àn
));

843 
	`oÂbuf_put
(
√xt
, 
msg
->
d©a
, 
hdrs_Àn
);

844 
√xt
->
l2
 =Çext->
d©a
;

845 
√xt
->
l3
 = 
	`oÂbuf_èû
(next);

846 
	`li°_push_back
(
ª∂õs
, &
√xt
->
li°_node
);

848 *
	`oÂmp_Êags__
(
msg
->
d©a
Ë|
	`ht⁄s
(
OFPSF_REPLY_MORE
);

850  
√xt
;

852 
	}
}

857 
	$oÂmp_≠≥nd
(
li°
 *
ª∂õs
, 
size_t
 
Àn
)

859  
	`oÂbuf_put_unöô
(
	`oÂmp_ª£rve
(
ª∂õs
, 
Àn
),Üen);

860 
	}
}

873 
	$oÂmp_po°≠≥nd
(
li°
 *
ª∂õs
, 
size_t
 
°¨t_ofs
)

875 
oÂbuf
 *
msg
 = 
	`oÂbuf_‰om_li°
(
	`li°_back
(
ª∂õs
));

877 
	`as£π
(
°¨t_ofs
 <
UINT16_MAX
);

878 i‡(
msg
->
size
 > 
UINT16_MAX
) {

879 
size_t
 
Àn
 = 
msg
->
size
 - 
°¨t_ofs
;

880 
	`mem˝y
(
	`oÂmp_≠≥nd
(
ª∂õs
, 
Àn
),

881 (c⁄° 
uöt8_t
 *Ë
msg
->
d©a
 + 
°¨t_ofs
, 
Àn
);

882 
msg
->
size
 = 
°¨t_ofs
;

884 
	}
}

886 
ovs_be16
 *

887 
	$oÂmp_Êags__
(c⁄° 
oÂ_hódî
 *
oh
)

889 (
oÂ_vîsi⁄
)
oh
->
vîsi⁄
) {

890 
OFP10_VERSION
:

891  &((
oÂ10_°©s_msg
 *Ë
oh
)->
Êags
;

892 
OFP11_VERSION
:

893 
OFP12_VERSION
:

894  &((
oÂ11_°©s_msg
 *Ë
oh
)->
Êags
;

896 
	`NOT_REACHED
();

898 
	}
}

904 
uöt16_t


905 
	$oÂmp_Êags
(c⁄° 
oÂ_hódî
 *
oh
)

907  
	`¡ohs
(*
	`oÂmp_Êags__
(
oh
));

908 
	}
}

913 
boﬁ


914 
	$oÂmp_m‹e
(c⁄° 
oÂ_hódî
 *
oh
)

916  (
	`oÂmp_Êags
(
oh
Ë& 
OFPSF_REPLY_MORE
) != 0;

917 
	}
}

919 
oÂmsgs_öô
();

921 c⁄° 
øw_öfo
 *

922 
	$øw_öfo_gë
(
oÂøw
 
øw
)

924 
	`oÂmsgs_öô
();

926 
	`as£π
(
øw
 < 
	`ARRAY_SIZE
(
øw_öfos
));

927  &
øw_öfos
[
øw
];

928 
	}
}

930 
øw_ö°™˚
 *

931 
	$øw_ö°™˚_gë
(c⁄° 
øw_öfo
 *
öfo
, 
uöt8_t
 
vîsi⁄
)

933 
	`as£π
(
vîsi⁄
 >
öfo
->
mö_vîsi⁄
 && vîsi⁄ <öfo->
max_vîsi⁄
);

934  &
öfo
->
ö°™˚s
[
vîsi⁄
 - info->
mö_vîsi⁄
];

935 
	}
}

937 
oÂîr


938 
	$oÂøw_‰om_oÂhdrs
(
oÂøw
 *
øw
, c⁄° 
oÂhdrs
 *
hdrs
)

940 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 1);

942 
øw_ö°™˚
 *
øw_hdrs
;

943 
uöt32_t
 
hash
;

945 
	`oÂmsgs_öô
();

947 
hash
 = 
	`oÂhdrs_hash
(
hdrs
);

948 
	`HMAP_FOR_EACH_WITH_HASH
 (
øw_hdrs
, 
hm≠_node
, 
hash
, &
øw_ö°™˚_m≠
) {

949 i‡(
	`oÂhdrs_equÆ
(
hdrs
, &
øw_hdrs
->hdrs)) {

950 *
øw
 = 
øw_hdrs
->raw;

955 i‡(!
	`VLOG_DROP_WARN
(&
æ
)) {

956 
ds
 
s
;

958 
	`ds_öô
(&
s
);

959 
	`ds_put_f‹m©
(&
s
, "vîsi⁄ %"
PRIu8
",Åype %"PRIu8,

960 
hdrs
->
vîsi⁄
, hdrs->
ty≥
);

961 i‡(
	`oÂhdrs_is_°©
(
hdrs
)) {

962 
	`ds_put_f‹m©
(&
s
, ", sèà%"
PRIu16
, 
hdrs
->
°©
);

964 i‡(
hdrs
->
víd‹
) {

965 
	`ds_put_f‹m©
(&
s
, ", víd‹ 0x%"
PRIx32
", subty≥ %"
PRIu32
,

966 
hdrs
->
víd‹
, hdrs->
subty≥
);

968 
	`VLOG_WARN
("unknow¿O≥nFlow mesßgê(%s)", 
	`ds_c°r
(&
s
));

969 
	`ds_de°roy
(&
s
);

972  (
hdrs
->
víd‹
 ? 
OFPERR_OFPBRC_BAD_SUBTYPE


973 : 
	`oÂhdrs_is_°©
(
hdrs
Ë? 
OFPERR_OFPBRC_BAD_STAT


974 : 
OFPERR_OFPBRC_BAD_TYPE
);

975 
	}
}

978 
	$oÂmsgs_öô
()

980 c⁄° 
øw_öfo
 *
öfo
;

982 i‡(
øw_ö°™˚_m≠
.
buckës
) {

986 
	`hm≠_öô
(&
øw_ö°™˚_m≠
);

987 
öfo
 = 
øw_öfos
; infÿ< &øw_öfos[
	`ARRAY_SIZE
(raw_infos)]; info++)

989 
n_ö°™˚s
 = 
öfo
->
max_vîsi⁄
 - info->
mö_vîsi⁄
 + 1;

990 
øw_ö°™˚
 *
ö°
;

992 
ö°
 = 
öfo
->
ö°™˚s
;

993 
ö°
 < &
öfo
->
ö°™˚s
[
n_ö°™˚s
];

994 
ö°
++) {

995 
ö°
->
hdrs_Àn
 = 
	`oÂhdrs_Àn
(&ö°->
hdrs
);

996 
	`hm≠_ö£π
(&
øw_ö°™˚_m≠
, &
ö°
->
hm≠_node
,

997 
	`oÂhdrs_hash
(&
ö°
->
hdrs
));

1000 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/ofp-msgs.h

17 #i‚de‡
OFP_MSGS_H


18 
	#OFP_MSGS_H
 1

	)

41 
	~"›ívswôch/ty≥s.h
"

42 
	~"oÂ-îr‹s.h
"

43 
	~"utû.h
"

45 
	gli°
;

94 
	eoÂøw
 {

110 
	mOFPRAW_OFPT_HELLO
,

113 
	mOFPRAW_OFPT_ERROR
,

116 
	mOFPRAW_OFPT_ECHO_REQUEST
,

119 
	mOFPRAW_OFPT_ECHO_REPLY
,

127 
	mOFPRAW_OFPT_FEATURES_REQUEST
,

130 
	mOFPRAW_OFPT10_FEATURES_REPLY
,

132 
	mOFPRAW_OFPT11_FEATURES_REPLY
,

135 
	mOFPRAW_OFPT_GET_CONFIG_REQUEST
,

138 
	mOFPRAW_OFPT_GET_CONFIG_REPLY
,

141 
	mOFPRAW_OFPT_SET_CONFIG
,

144 
	mOFPRAW_OFPT10_PACKET_IN
,

146 
	mOFPRAW_OFPT11_PACKET_IN
,

148 
	mOFPRAW_OFPT12_PACKET_IN
,

150 
	mOFPRAW_NXT_PACKET_IN
,

153 
	mOFPRAW_OFPT10_FLOW_REMOVED
,

155 
	mOFPRAW_OFPT11_FLOW_REMOVED
,

157 
	mOFPRAW_NXT_FLOW_REMOVED
,

160 
	mOFPRAW_OFPT10_PORT_STATUS
,

162 
	mOFPRAW_OFPT11_PORT_STATUS
,

165 
	mOFPRAW_OFPT10_PACKET_OUT
,

167 
	mOFPRAW_OFPT11_PACKET_OUT
,

170 
	mOFPRAW_OFPT10_FLOW_MOD
,

172 
	mOFPRAW_OFPT11_FLOW_MOD
,

174 
	mOFPRAW_NXT_FLOW_MOD
,

177 
	mOFPRAW_OFPT10_PORT_MOD
,

179 
	mOFPRAW_OFPT11_PORT_MOD
,

182 
	mOFPRAW_OFPT10_BARRIER_REQUEST
,

184 
	mOFPRAW_OFPT11_BARRIER_REQUEST
,

187 
	mOFPRAW_OFPT10_BARRIER_REPLY
,

189 
	mOFPRAW_OFPT11_BARRIER_REPLY
,

194 
	mOFPRAW_OFPST_DESC_REQUEST
,

197 
	mOFPRAW_OFPST_DESC_REPLY
,

200 
	mOFPRAW_OFPST10_FLOW_REQUEST
,

202 
	mOFPRAW_OFPST11_FLOW_REQUEST
,

204 
	mOFPRAW_NXST_FLOW_REQUEST
,

207 
	mOFPRAW_OFPST10_FLOW_REPLY
,

209 
	mOFPRAW_OFPST11_FLOW_REPLY
,

211 
	mOFPRAW_NXST_FLOW_REPLY
,

214 
	mOFPRAW_OFPST10_AGGREGATE_REQUEST
,

216 
	mOFPRAW_OFPST11_AGGREGATE_REQUEST
,

218 
	mOFPRAW_NXST_AGGREGATE_REQUEST
,

221 
	mOFPRAW_OFPST_AGGREGATE_REPLY
,

223 
	mOFPRAW_NXST_AGGREGATE_REPLY
,

226 
	mOFPRAW_OFPST_TABLE_REQUEST
,

229 
	mOFPRAW_OFPST10_TABLE_REPLY
,

231 
	mOFPRAW_OFPST11_TABLE_REPLY
,

233 
	mOFPRAW_OFPST12_TABLE_REPLY
,

236 
	mOFPRAW_OFPST10_PORT_REQUEST
,

238 
	mOFPRAW_OFPST11_PORT_REQUEST
,

241 
	mOFPRAW_OFPST10_PORT_REPLY
,

243 
	mOFPRAW_OFPST11_PORT_REPLY
,

246 
	mOFPRAW_OFPST10_QUEUE_REQUEST
,

248 
	mOFPRAW_OFPST11_QUEUE_REQUEST
,

251 
	mOFPRAW_OFPST10_QUEUE_REPLY
,

253 
	mOFPRAW_OFPST11_QUEUE_REPLY
,

256 
	mOFPRAW_OFPST_PORT_DESC_REQUEST
,

259 
	mOFPRAW_OFPST10_PORT_DESC_REPLY
,

261 
	mOFPRAW_OFPST11_PORT_DESC_REPLY
,

269 
	mOFPRAW_NXT_ROLE_REQUEST
,

272 
	mOFPRAW_NXT_ROLE_REPLY
,

275 
	mOFPRAW_NXT_SET_FLOW_FORMAT
,

278 
	mOFPRAW_NXT_FLOW_MOD_TABLE_ID
,

281 
	mOFPRAW_NXT_SET_PACKET_IN_FORMAT
,

284 
	mOFPRAW_NXT_FLOW_AGE
,

287 
	mOFPRAW_NXT_SET_ASYNC_CONFIG
,

290 
	mOFPRAW_NXT_SET_CONTROLLER_ID
,

293 
	mOFPRAW_NXT_FLOW_MONITOR_CANCEL
,

296 
	mOFPRAW_NXT_FLOW_MONITOR_PAUSED
,

299 
	mOFPRAW_NXT_FLOW_MONITOR_RESUMED
,

307 
	mOFPRAW_NXST_FLOW_MONITOR_REQUEST
,

310 
	mOFPRAW_NXST_FLOW_MONITOR_REPLY
,

314 
oÂîr
 
oÂøw_decode
(
oÂøw
 *, c⁄° 
oÂ_hódî
 *);

315 
oÂîr
 
oÂøw_puŒ
(
oÂøw
 *, 
oÂbuf
 *);

316 
oÂøw
 
oÂøw_puŒ_as£π
(
oÂbuf
 *);

318 
oÂîr
 
oÂøw_decode_∑πül
(
oÂøw
 *,

319 c⁄° 
oÂ_hódî
 *, 
size_t
 
Àngth
);

322 
oÂbuf
 *
oÂøw_Æloc
(
oÂøw
, 
uöt8_t
 
oÂ_vîsi⁄
,

323 
size_t
 
exåa_èûroom
);

324 
oÂbuf
 *
oÂøw_Æloc_xid
(
oÂøw
, 
uöt8_t
 
oÂ_vîsi⁄
,

325 
ovs_be32
 
xid
, 
size_t
 
exåa_èûroom
);

326 
oÂbuf
 *
oÂøw_Æloc_ª∂y
(
oÂøw
,

327 c⁄° 
oÂ_hódî
 *
ªque°
,

328 
size_t
 
exåa_èûroom
);

329 
oÂbuf
 *
oÂøw_Æloc_°©s_ª∂y
(c⁄° 
oÂ_hódî
 *
ªque°
,

330 
size_t
 
exåa_èûroom
);

332 
oÂøw_put
(
oÂøw
, 
uöt8_t
 
oÂ_vîsi⁄
, 
oÂbuf
 *);

333 
oÂøw_put_xid
(
oÂøw
, 
uöt8_t
 
oÂ_vîsi⁄
, 
ovs_be32
 
xid
,

334 
oÂbuf
 *);

335 
oÂøw_put_ª∂y
(
oÂøw
, c⁄° 
oÂ_hódî
 *
ªque°
,

336 
oÂbuf
 *);

337 
oÂøw_put_°©s_ª∂y
(c⁄° 
oÂ_hódî
 *
ªque°
, 
oÂbuf
 *);

340 c⁄° *
oÂøw_gë_«me
(
oÂøw
);

341 
oÂøw
 
oÂøw_°©s_ªque°_to_ª∂y
(oÂøw, 
uöt8_t
 
vîsi⁄
);

353 
	eoÂty≥
 {

355 
	mOFPTYPE_HELLO
,

356 
	mOFPTYPE_ERROR
,

357 
	mOFPTYPE_ECHO_REQUEST
,

358 
	mOFPTYPE_ECHO_REPLY
,

361 
	mOFPTYPE_FEATURES_REQUEST
,

362 
	mOFPTYPE_FEATURES_REPLY
,

364 
	mOFPTYPE_GET_CONFIG_REQUEST
,

365 
	mOFPTYPE_GET_CONFIG_REPLY
,

366 
	mOFPTYPE_SET_CONFIG
,

369 
	mOFPTYPE_PACKET_IN
,

373 
	mOFPTYPE_FLOW_REMOVED
,

376 
	mOFPTYPE_PORT_STATUS
,

380 
	mOFPTYPE_PACKET_OUT
,

382 
	mOFPTYPE_FLOW_MOD
,

385 
	mOFPTYPE_PORT_MOD
,

389 
	mOFPTYPE_BARRIER_REQUEST
,

391 
	mOFPTYPE_BARRIER_REPLY
,

395 
	mOFPTYPE_DESC_STATS_REQUEST
,

396 
	mOFPTYPE_DESC_STATS_REPLY
,

397 
	mOFPTYPE_FLOW_STATS_REQUEST
,

400 
	mOFPTYPE_FLOW_STATS_REPLY
,

403 
	mOFPTYPE_AGGREGATE_STATS_REQUEST
,

406 
	mOFPTYPE_AGGREGATE_STATS_REPLY
,

408 
	mOFPTYPE_TABLE_STATS_REQUEST
,

409 
	mOFPTYPE_TABLE_STATS_REPLY
,

412 
	mOFPTYPE_PORT_STATS_REQUEST
,

414 
	mOFPTYPE_PORT_STATS_REPLY
,

416 
	mOFPTYPE_QUEUE_STATS_REQUEST
,

418 
	mOFPTYPE_QUEUE_STATS_REPLY
,

420 
	mOFPTYPE_PORT_DESC_STATS_REQUEST
,

422 
	mOFPTYPE_PORT_DESC_STATS_REPLY
,

426 
	mOFPTYPE_ROLE_REQUEST
,

427 
	mOFPTYPE_ROLE_REPLY
,

428 
	mOFPTYPE_SET_FLOW_FORMAT
,

429 
	mOFPTYPE_FLOW_MOD_TABLE_ID
,

430 
	mOFPTYPE_SET_PACKET_IN_FORMAT
,

431 
	mOFPTYPE_FLOW_AGE
,

432 
	mOFPTYPE_SET_ASYNC_CONFIG
,

433 
	mOFPTYPE_SET_CONTROLLER_ID
,

436 
	mOFPTYPE_FLOW_MONITOR_STATS_REQUEST
,

437 
	mOFPTYPE_FLOW_MONITOR_STATS_REPLY
,

438 
	mOFPTYPE_FLOW_MONITOR_CANCEL
,

439 
	mOFPTYPE_FLOW_MONITOR_PAUSED
,

440 
	mOFPTYPE_FLOW_MONITOR_RESUMED
,

444 
oÂîr
 
oÂty≥_decode
(
oÂty≥
 *, c⁄° 
oÂ_hódî
 *);

445 
oÂîr
 
oÂty≥_puŒ
(
oÂty≥
 *, 
oÂbuf
 *);

446 
oÂty≥
 
oÂty≥_‰om_oÂøw
(
oÂøw
);

449 
oÂmsg_upd©e_Àngth
(
oÂbuf
 *);

450 c⁄° *
oÂmsg_body
(c⁄° 
oÂ_hódî
 *);

478 
oÂmp_öô
(
li°
 *, c⁄° 
oÂ_hódî
 *
ªque°
);

479 
oÂbuf
 *
oÂmp_ª£rve
(
li°
 *, 
size_t
 
Àn
);

480 *
oÂmp_≠≥nd
(
li°
 *, 
size_t
 
Àn
);

481 
oÂmp_po°≠≥nd
(
li°
 *, 
size_t
 
°¨t_ofs
);

484 
uöt16_t
 
oÂmp_Êags
(c⁄° 
oÂ_hódî
 *);

485 
boﬁ
 
oÂmp_m‹e
(c⁄° 
oÂ_hódî
 *);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/ofp-parse.c

17 
	~<c⁄fig.h
>

19 
	~"oÂ-∑r£.h
"

21 
	~<˘y≥.h
>

22 
	~<î∫o.h
>

23 
	~<°dlib.h
>

25 
	~"aut›©h.h
"

26 
	~"bundÀ.h
"

27 
	~"byã-‹dî.h
"

28 
	~"dy«mic-°rög.h
"

29 
	~"À¨n.h
"

30 
	~"mëa-Êow.h
"

31 
	~"mu…ù©h.h
"

32 
	~"√tdev.h
"

33 
	~"nx-m©ch.h
"

34 
	~"oÂ-a˘i⁄s.h
"

35 
	~"oÂ-utû.h
"

36 
	~"oÂbuf.h
"

37 
	~"›íÊow/›íÊow.h
"

38 
	~"∑ckës.h
"

39 
	~"sockë-utû.h
"

40 
	~"vc⁄n.h
"

41 
	~"vlog.h
"

43 
VLOG_DEFINE_THIS_MODULE
(
oÂ_∑r£
);

45 
	$oÂ_Áèl
(c⁄° *
Êow
, 
boﬁ
 
vîbo£
, c⁄° *
f‹m©
, ...)

46 
NO_RETURN
;

48 
uöt8_t


49 
	$°r_to_èbÀ_id
(c⁄° *
°r
)

51 
èbÀ_id
;

53 i‡(!
	`°r_to_öt
(
°r
, 10, &
èbÀ_id
) ||Åable_id < 0 ||Åable_id > 255) {

54 
	`ovs_Áèl
(0, "övÆidÅabÀ \"%s\"", 
°r
);

56  
èbÀ_id
;

57 
	}
}

59 
uöt16_t


60 
	$°r_to_u16
(c⁄° *
°r
, c⁄° *
«me
)

62 
vÆue
;

64 i‡(!
	`°r_to_öt
(
°r
, 0, &
vÆue
) || value < 0 || value > 65535) {

65 
	`ovs_Áèl
(0, "övÆid %†\"%s\"", 
«me
, 
°r
);

67  
vÆue
;

68 
	}
}

70 
uöt32_t


71 
	$°r_to_u32
(c⁄° *
°r
)

73 *
èû
;

74 
uöt32_t
 
vÆue
;

76 i‡(!
°r
[0]) {

77 
	`ovs_Áèl
(0, "missingÑequiredÇumericárgument");

80 
î∫o
 = 0;

81 
vÆue
 = 
	`°πoul
(
°r
, &
èû
, 0);

82 i‡(
î∫o
 =
EINVAL
 ||Éºnÿ=
ERANGE
 || *
èû
) {

83 
	`ovs_Áèl
(0, "övÆidÇumîi¯f‹m© %s", 
°r
);

85  
vÆue
;

86 
	}
}

88 
uöt64_t


89 
	$°r_to_u64
(c⁄° *
°r
)

91 *
èû
;

92 
uöt64_t
 
vÆue
;

94 i‡(!
°r
[0]) {

95 
	`ovs_Áèl
(0, "missingÑequiredÇumericárgument");

98 
î∫o
 = 0;

99 
vÆue
 = 
	`°πouŒ
(
°r
, &
èû
, 0);

100 i‡(
î∫o
 =
EINVAL
 ||Éºnÿ=
ERANGE
 || *
èû
) {

101 
	`ovs_Áèl
(0, "övÆidÇumîi¯f‹m© %s", 
°r
);

103  
vÆue
;

104 
	}
}

107 
	$°r_to_mac
(c⁄° *
°r
, 
uöt8_t
 
mac
[6])

109 i‡(
	`ssˇnf
(
°r
, 
ETH_ADDR_SCAN_FMT
, 
	`ETH_ADDR_SCAN_ARGS
(
mac
))

110 !
ETH_ADDR_SCAN_COUNT
) {

111 
	`ovs_Áèl
(0, "övÆid ma¯addªs†%s", 
°r
);

113 
	}
}

116 
	$°r_to_ù
(c⁄° *
°r
, 
ovs_be32
 *
ù
)

118 
ö_addr
 in_addr;

120 i‡(
	`lookup_ù
(
°r
, &
ö_addr
)) {

121 
	`ovs_Áèl
(0, "%s: couldÇŸ c⁄vîàtÿIPáddªss", 
°r
);

123 *
ù
 = 
ö_addr
.
s_addr
;

124 
	}
}

127 
	$∑r£_íqueue
(*
¨g
, 
oÂbuf
 *
oÂa˘s
)

129 *
•
 = 
NULL
;

130 *
p‹t
 = 
	`°πok_r
(
¨g
, ":q", &
•
);

131 *
queue
 = 
	`°πok_r
(
NULL
, "", &
•
);

132 
oÂa˘_íqueue
 *
íqueue
;

134 i‡(
p‹t
 =
NULL
 || 
queue
 == NULL) {

135 
	`ovs_Áèl
(0, "\"enqueue\" syntax is \"enqueue:PORT:QUEUE\"");

138 
íqueue
 = 
	`oÂa˘_put_ENQUEUE
(
oÂa˘s
);

139 
íqueue
->
p‹t
 = 
	`°r_to_u32
(port);

140 
íqueue
->
queue
 = 
	`°r_to_u32
(queue);

141 
	}
}

144 
	$∑r£_ouçut
(*
¨g
, 
oÂbuf
 *
oÂa˘s
)

146 i‡(
	`°rchr
(
¨g
, '[')) {

147 
oÂa˘_ouçut_ªg
 *
ouçut_ªg
;

149 
ouçut_ªg
 = 
	`oÂa˘_put_OUTPUT_REG
(
oÂa˘s
);

150 
	`mf_∑r£_subfõld
(&
ouçut_ªg
->
§c
, 
¨g
);

151 
ouçut_ªg
->
max_Àn
 = 
UINT16_MAX
;

153 
oÂa˘_ouçut
 *
ouçut
;

155 
ouçut
 = 
	`oÂa˘_put_OUTPUT
(
oÂa˘s
);

156 
ouçut
->
p‹t
 = 
	`°r_to_u32
(
¨g
);

157 
ouçut
->
max_Àn
 = ouçut->
p‹t
 =
OFPP_CONTROLLER
 ? 
UINT16_MAX
 : 0;

159 
	}
}

162 
	$∑r£_ªsubmô
(*
¨g
, 
oÂbuf
 *
oÂa˘s
)

164 
oÂa˘_ªsubmô
 *
ªsubmô
;

165 *
ö_p‹t_s
, *
èbÀ_s
;

167 
ªsubmô
 = 
	`oÂa˘_put_RESUBMIT
(
oÂa˘s
);

169 
ö_p‹t_s
 = 
	`°r£p
(&
¨g
, ",");

170 i‡(
ö_p‹t_s
 && in_port_s[0]) {

171 i‡(!
	`oÂutû_p‹t_‰om_°rög
(
ö_p‹t_s
, &
ªsubmô
->
ö_p‹t
)) {

172 
	`ovs_Áèl
(0, "%s:ÑesubmôÅÿunknow¿p‹t", 
ö_p‹t_s
);

175 
ªsubmô
->
ö_p‹t
 = 
OFPP_IN_PORT
;

178 
èbÀ_s
 = 
	`°r£p
(&
¨g
, ",");

179 
ªsubmô
->
èbÀ_id
 = 
èbÀ_s
 &&ÅabÀ_s[0] ? 
	`°r_to_u32
(table_s) : 255;

181 i‡(
ªsubmô
->
ö_p‹t
 =
OFPP_IN_PORT
 &&Ñesubmô->
èbÀ_id
 == 255) {

182 
	`ovs_Áèl
(0, "atÜeast one \"in_port\" or \"table\" must be specified "

185 
	}
}

188 
	$∑r£_nŸe
(c⁄° *
¨g
, 
oÂbuf
 *
oÂa˘s
)

190 
oÂa˘_nŸe
 *
nŸe
;

192 
nŸe
 = 
	`oÂa˘_put_NOTE
(
oÂa˘s
);

193 *
¨g
 != '\0') {

194 
uöt8_t
 
byã
;

195 
boﬁ
 
ok
;

197 i‡(*
¨g
 == '.') {

198 
¨g
++;

200 i‡(*
¨g
 == '\0') {

204 
byã
 = 
	`hexôs_vÆue
(
¨g
, 2, &
ok
);

205 i‡(!
ok
) {

206 
	`ovs_Áèl
(0, "bad hex digit in `note'árgument");

208 
	`oÂbuf_put
(
oÂa˘s
, &
byã
, 1);

210 
nŸe
 = 
oÂa˘s
->
l2
;

211 
nŸe
->
Àngth
++;

213 
¨g
 += 2;

215 
	`oÂa˘_upd©e_Àn
(
oÂa˘s
, &
nŸe
->
oÂa˘
);

216 
	}
}

219 
	$∑r£_fö_timeout
(
oÂbuf
 *
b
, *
¨g
)

221 
oÂa˘_fö_timeout
 *
o·
 = 
	`oÂa˘_put_FIN_TIMEOUT
(
b
);

222 *
key
, *
vÆue
;

224 
	`oÂutû_∑r£_key_vÆue
(&
¨g
, &
key
, &
vÆue
)) {

225 i‡(!
	`°rcmp
(
key
, "idle_timeout")) {

226 
o·
->
fö_idÀ_timeout
 = 
	`°r_to_u16
(
vÆue
, 
key
);

227 } i‡(!
	`°rcmp
(
key
, "hard_timeout")) {

228 
o·
->
fö_h¨d_timeout
 = 
	`°r_to_u16
(
vÆue
, 
key
);

230 
	`ovs_Áèl
(0, "övÆid key '%s' i¿'fö_timeout'árgumít", 
key
);

233 
	}
}

236 
	$∑r£_c⁄åﬁÀr
(
oÂbuf
 *
b
, *
¨g
)

238 
oÂ_∑ckë_ö_ªas⁄
 
ªas⁄
 = 
OFPR_ACTION
;

239 
uöt16_t
 
c⁄åﬁÀr_id
 = 0;

240 
uöt16_t
 
max_Àn
 = 
UINT16_MAX
;

242 i‡(!
¨g
[0]) {

244 } i‡(
	`°r•n
(
¨g
, "0123456789"Ë=
	`°æí
(arg)) {

245 
max_Àn
 = 
	`°r_to_u16
(
¨g
, "max_len");

247 *
«me
, *
vÆue
;

249 
	`oÂutû_∑r£_key_vÆue
(&
¨g
, &
«me
, &
vÆue
)) {

250 i‡(!
	`°rcmp
(
«me
, "reason")) {

251 i‡(!
	`oÂutû_∑ckë_ö_ªas⁄_‰om_°rög
(
vÆue
, &
ªas⁄
)) {

252 
	`ovs_Áèl
(0, "unknow¿ªas⁄ \"%s\"", 
vÆue
);

254 } i‡(!
	`°rcmp
(
«me
, "max_len")) {

255 
max_Àn
 = 
	`°r_to_u16
(
vÆue
, "max_len");

256 } i‡(!
	`°rcmp
(
«me
, "id")) {

257 
c⁄åﬁÀr_id
 = 
	`°r_to_u16
(
vÆue
, "id");

259 
	`ovs_Áèl
(0, "unknown key \"%s\"Öarsing controlleráction",

260 
«me
);

265 i‡(
ªas⁄
 =
OFPR_ACTION
 && 
c⁄åﬁÀr_id
 == 0) {

266 
oÂa˘_ouçut
 *
ouçut
;

268 
ouçut
 = 
	`oÂa˘_put_OUTPUT
(
b
);

269 
ouçut
->
p‹t
 = 
OFPP_CONTROLLER
;

270 
ouçut
->
max_Àn
 = max_len;

272 
oÂa˘_c⁄åﬁÀr
 *
c⁄åﬁÀr
;

274 
c⁄åﬁÀr
 = 
	`oÂa˘_put_CONTROLLER
(
b
);

275 
c⁄åﬁÀr
->
max_Àn
 = max_len;

276 
c⁄åﬁÀr
->
ªas⁄
 =Ñeason;

277 
c⁄åﬁÀr
->
c⁄åﬁÀr_id
 = controller_id;

279 
	}
}

282 
	$∑r£_nﬂrgs_dec_âl
(
oÂbuf
 *
b
)

284 
oÂa˘_˙t_ids
 *
ids
;

285 
uöt16_t
 
id
 = 0;

287 
ids
 = 
	`oÂa˘_put_DEC_TTL
(
b
);

288 
	`oÂbuf_put
(
b
, &
id
,  id);

289 
ids
 = 
b
->
l2
;

290 
ids
->
n_c⁄åﬁÀrs
++;

291 
	`oÂa˘_upd©e_Àn
(
b
, &
ids
->
oÂa˘
);

292 
	}
}

295 
	$∑r£_dec_âl
(
oÂbuf
 *
b
, *
¨g
)

297 i‡(*
¨g
 == '\0') {

298 
	`∑r£_nﬂrgs_dec_âl
(
b
);

300 
oÂa˘_˙t_ids
 *
ids
;

301 *
˙å
;

303 
ids
 = 
	`oÂa˘_put_DEC_TTL
(
b
);

304 
ids
->
oÂa˘
.
com∑t
 = 
OFPUTIL_NXAST_DEC_TTL_CNT_IDS
;

305 
˙å
 = 
	`°πok_r
(
¨g
, ", ", &¨g); c¡∏!
NULL
;

306 
˙å
 = 
	`°πok_r
(
NULL
, ", ", &
¨g
)) {

307 
uöt16_t
 
id
 = 
	`©oi
(
˙å
);

309 
	`oÂbuf_put
(
b
, &
id
,  id);

310 
ids
 = 
b
->
l2
;

311 
ids
->
n_c⁄åﬁÀrs
++;

313 i‡(!
ids
->
n_c⁄åﬁÀrs
) {

314 
	`ovs_Áèl
(0, "dec_ttl_cnt_ids:ÉxpectedátÜeast one controller "

317 
	`oÂa˘_upd©e_Àn
(
b
, &
ids
->
oÂa˘
);

319 
	}
}

322 
	$£t_fõld_∑r£
(c⁄° *
¨g
, 
oÂbuf
 *
oÂa˘s
)

324 *
‹ig
 = 
	`x°rdup
(
¨g
);

325 
oÂa˘_ªg_lﬂd
 *
lﬂd
 = 
	`oÂa˘_put_REG_LOAD
(
oÂa˘s
);

326 *
vÆue
;

327 *
dñim
;

328 *
key
;

329 c⁄° 
mf_fõld
 *
mf
;

330 c⁄° *
îr‹
;

331 
mf_vÆue
 mf_value;

333 
vÆue
 = 
‹ig
;

334 
dñim
 = 
	`°r°r
(
‹ig
, "->");

335 i‡(!
dñim
) {

336 
	`ovs_Áèl
(0, "%s: missög `->'", 
‹ig
);

338 i‡(
	`°æí
(
dñim
) <= strlen("->")) {

339 
	`ovs_Áèl
(0, "%s: missög fõldÇamêfﬁlowög `->'", 
‹ig
);

342 
key
 = 
dñim
 + 
	`°æí
("->");

343 
mf
 = 
	`mf_‰om_«me
(
key
);

344 i‡(!
mf
) {

345 
	`ovs_Áèl
(0, "%†i†nŸ vÆid oxm fõldÇame", 
key
);

347 i‡(!
mf
->
wrôabÀ
) {

348 
	`ovs_Áèl
(0, "%†i†nŸáŒowedÅÿ£t", 
key
);

351 
dñim
[0] = '\0';

352 
îr‹
 = 
	`mf_∑r£_vÆue
(
mf
, 
vÆue
, &
mf_vÆue
);

353 i‡(
îr‹
) {

354 
	`ovs_Áèl
(0, "%s", 
îr‹
);

356 i‡(!
	`mf_is_vÆue_vÆid
(
mf
, &
mf_vÆue
)) {

357 
	`ovs_Áèl
(0, "%†i†nŸ vÆid vÆid f‹ fõld %s", 
vÆue
, 
key
);

359 
	`oÂa˘_£t_fõld_öô
(
lﬂd
, 
mf
, &
mf_vÆue
);

360 
	`‰ì
(
‹ig
);

361 
	}
}

364 
	$∑r£_mëad©a
(
oÂbuf
 *
b
, *
¨g
)

366 
oÂa˘_mëad©a
 *
om
;

367 *
mask
 = 
	`°rchr
(
¨g
, '/');

369 
om
 = 
	`oÂa˘_put_WRITE_METADATA
(
b
);

371 i‡(
mask
) {

372 *
mask
 = '\0';

373 
om
->
mask
 = 
	`ht⁄Œ
(
	`°r_to_u64
(mask + 1));

375 
om
->
mask
 = 
	`ht⁄Œ
(
UINT64_MAX
);

378 
om
->
mëad©a
 = 
	`ht⁄Œ
(
	`°r_to_u64
(
¨g
));

379 
	}
}

382 
	$∑r£_«med_a˘i⁄
(
oÂutû_a˘i⁄_code
 
code
, c⁄° 
Êow
 *flow,

383 *
¨g
, 
oÂbuf
 *
oÂa˘s
)

385 
oÂa˘_tu¬ñ
 *
tu¬ñ
;

386 
uöt16_t
 
vid
;

387 
ovs_be32
 
ù
;

388 
uöt8_t
 
p˝
;

389 
uöt8_t
 
tos
;

391 
code
) {

392 
OFPUTIL_ACTION_INVALID
:

393 
	`NOT_REACHED
();

395 
OFPUTIL_OFPAT10_OUTPUT
:

396 
OFPUTIL_OFPAT11_OUTPUT
:

397 
	`∑r£_ouçut
(
¨g
, 
oÂa˘s
);

400 
OFPUTIL_OFPAT10_SET_VLAN_VID
:

401 
OFPUTIL_OFPAT11_SET_VLAN_VID
:

402 
vid
 = 
	`°r_to_u32
(
¨g
);

403 i‡(
vid
 & ~
VLAN_VID_MASK
) {

404 
	`ovs_Áèl
(0, "%s:ÇŸá vÆid VLAN VID", 
¨g
);

406 
	`oÂa˘_put_SET_VLAN_VID
(
oÂa˘s
)->
vœn_vid
 = 
vid
;

409 
OFPUTIL_OFPAT10_SET_VLAN_PCP
:

410 
OFPUTIL_OFPAT11_SET_VLAN_PCP
:

411 
p˝
 = 
	`°r_to_u32
(
¨g
);

412 i‡(
p˝
 & ~7) {

413 
	`ovs_Áèl
(0, "%s:ÇŸá vÆid VLAN PCP", 
¨g
);

415 
	`oÂa˘_put_SET_VLAN_PCP
(
oÂa˘s
)->
vœn_p˝
 = 
p˝
;

418 
OFPUTIL_OFPAT12_SET_FIELD
:

419 
	`£t_fõld_∑r£
(
¨g
, 
oÂa˘s
);

422 
OFPUTIL_OFPAT10_STRIP_VLAN
:

423 
OFPUTIL_OFPAT11_POP_VLAN
:

424 
	`oÂa˘_put_STRIP_VLAN
(
oÂa˘s
);

427 
OFPUTIL_OFPAT10_SET_DL_SRC
:

428 
OFPUTIL_OFPAT11_SET_DL_SRC
:

429 
	`°r_to_mac
(
¨g
, 
	`oÂa˘_put_SET_ETH_SRC
(
oÂa˘s
)->
mac
);

432 
OFPUTIL_OFPAT10_SET_DL_DST
:

433 
OFPUTIL_OFPAT11_SET_DL_DST
:

434 
	`°r_to_mac
(
¨g
, 
	`oÂa˘_put_SET_ETH_DST
(
oÂa˘s
)->
mac
);

437 
OFPUTIL_OFPAT10_SET_NW_SRC
:

438 
OFPUTIL_OFPAT11_SET_NW_SRC
:

439 
	`°r_to_ù
(
¨g
, &
ù
);

440 
	`oÂa˘_put_SET_IPV4_SRC
(
oÂa˘s
)->
ùv4
 = 
ù
;

443 
OFPUTIL_OFPAT10_SET_NW_DST
:

444 
OFPUTIL_OFPAT11_SET_NW_DST
:

445 
	`°r_to_ù
(
¨g
, &
ù
);

446 
	`oÂa˘_put_SET_IPV4_DST
(
oÂa˘s
)->
ùv4
 = 
ù
;

449 
OFPUTIL_OFPAT10_SET_NW_TOS
:

450 
OFPUTIL_OFPAT11_SET_NW_TOS
:

451 
tos
 = 
	`°r_to_u32
(
¨g
);

452 i‡(
tos
 & ~
IP_DSCP_MASK
) {

453 
	`ovs_Áèl
(0, "%s:ÇŸá vÆid TOS", 
¨g
);

455 
	`oÂa˘_put_SET_IPV4_DSCP
(
oÂa˘s
)->
ds˝
 = 
tos
;

458 
OFPUTIL_OFPAT11_DEC_NW_TTL
:

459 
	`NOT_REACHED
();

461 
OFPUTIL_OFPAT10_SET_TP_SRC
:

462 
OFPUTIL_OFPAT11_SET_TP_SRC
:

463 
	`oÂa˘_put_SET_L4_SRC_PORT
(
oÂa˘s
)->
p‹t
 = 
	`°r_to_u32
(
¨g
);

466 
OFPUTIL_OFPAT10_SET_TP_DST
:

467 
OFPUTIL_OFPAT11_SET_TP_DST
:

468 
	`oÂa˘_put_SET_L4_DST_PORT
(
oÂa˘s
)->
p‹t
 = 
	`°r_to_u32
(
¨g
);

471 
OFPUTIL_OFPAT10_ENQUEUE
:

472 
	`∑r£_íqueue
(
¨g
, 
oÂa˘s
);

475 
OFPUTIL_NXAST_RESUBMIT
:

476 
	`∑r£_ªsubmô
(
¨g
, 
oÂa˘s
);

479 
OFPUTIL_NXAST_SET_TUNNEL
:

480 
OFPUTIL_NXAST_SET_TUNNEL64
:

481 
tu¬ñ
 = 
	`oÂa˘_put_SET_TUNNEL
(
oÂa˘s
);

482 
tu¬ñ
->
oÂa˘
.
com∑t
 = 
code
;

483 
tu¬ñ
->
tun_id
 = 
	`°r_to_u64
(
¨g
);

486 
OFPUTIL_NXAST_WRITE_METADATA
:

487 
	`∑r£_mëad©a
(
oÂa˘s
, 
¨g
);

490 
OFPUTIL_NXAST_SET_QUEUE
:

491 
	`oÂa˘_put_SET_QUEUE
(
oÂa˘s
)->
queue_id
 = 
	`°r_to_u32
(
¨g
);

494 
OFPUTIL_NXAST_POP_QUEUE
:

495 
	`oÂa˘_put_POP_QUEUE
(
oÂa˘s
);

498 
OFPUTIL_NXAST_REG_MOVE
:

499 
	`nxm_∑r£_ªg_move
(
	`oÂa˘_put_REG_MOVE
(
oÂa˘s
), 
¨g
);

502 
OFPUTIL_NXAST_REG_LOAD
:

503 
	`nxm_∑r£_ªg_lﬂd
(
	`oÂa˘_put_REG_LOAD
(
oÂa˘s
), 
¨g
);

506 
OFPUTIL_NXAST_NOTE
:

507 
	`∑r£_nŸe
(
¨g
, 
oÂa˘s
);

510 
OFPUTIL_NXAST_MULTIPATH
:

511 
	`mu…ù©h_∑r£
(
	`oÂa˘_put_MULTIPATH
(
oÂa˘s
), 
¨g
);

514 
OFPUTIL_NXAST_AUTOPATH__DEPRECATED
:

515 
	`aut›©h_∑r£
(
	`oÂa˘_put_AUTOPATH
(
oÂa˘s
), 
¨g
);

518 
OFPUTIL_NXAST_BUNDLE
:

519 
	`bundÀ_∑r£
(
¨g
, 
oÂa˘s
);

522 
OFPUTIL_NXAST_BUNDLE_LOAD
:

523 
	`bundÀ_∑r£_lﬂd
(
¨g
, 
oÂa˘s
);

526 
OFPUTIL_NXAST_RESUBMIT_TABLE
:

527 
OFPUTIL_NXAST_OUTPUT_REG
:

528 
OFPUTIL_NXAST_DEC_TTL_CNT_IDS
:

529 
	`NOT_REACHED
();

531 
OFPUTIL_NXAST_LEARN
:

532 
	`À¨n_∑r£
(
¨g
, 
Êow
, 
oÂa˘s
);

535 
OFPUTIL_NXAST_EXIT
:

536 
	`oÂa˘_put_EXIT
(
oÂa˘s
);

539 
OFPUTIL_NXAST_DEC_TTL
:

540 
	`∑r£_dec_âl
(
oÂa˘s
, 
¨g
);

543 
OFPUTIL_NXAST_FIN_TIMEOUT
:

544 
	`∑r£_fö_timeout
(
oÂa˘s
, 
¨g
);

547 
OFPUTIL_NXAST_CONTROLLER
:

548 
	`∑r£_c⁄åﬁÀr
(
oÂa˘s
, 
¨g
);

551 
	}
}

553 
boﬁ


554 
	$°r_to_oÂa˘__
(c⁄° 
Êow
 *Êow, *
pos
, *
a˘
, *
¨g
,

555 
oÂbuf
 *
oÂa˘s
, 
n_a˘i⁄s
)

557 
code
 = 
	`oÂutû_a˘i⁄_code_‰om_«me
(
a˘
);

558 i‡(
code
 >= 0) {

559 
	`∑r£_«med_a˘i⁄
(
code
, 
Êow
, 
¨g
, 
oÂa˘s
);

560 } i‡(!
	`°rˇ£cmp
(
a˘
, "drop")) {

561 i‡(
n_a˘i⁄s
) {

562 
	`ovs_Áèl
(0, "Dropáctions mustÇot beÖreceded by other "

564 } i‡(
	`oÂutû_∑r£_key_vÆue
(&
pos
, &
a˘
, &
¨g
)) {

565 
	`ovs_Áèl
(0, "Dropáctions mustÇot be followed by other "

568  
Ál£
;

570 
uöt16_t
 
p‹t
;

571 i‡(
	`oÂutû_p‹t_‰om_°rög
(
a˘
, &
p‹t
)) {

572 
	`oÂa˘_put_OUTPUT
(
oÂa˘s
)->
p‹t
 =Öort;

574 
	`ovs_Áèl
(0, "Unknow¿a˘i⁄: %s", 
a˘
);

578  
åue
;

579 
	}
}

582 
	$°r_to_oÂa˘s
(c⁄° 
Êow
 *Êow, *
°r
, 
oÂbuf
 *
oÂa˘s
)

584 *
pos
, *
a˘
, *
¨g
;

585 
oÂîr
 
îr‹
;

586 
n_a˘i⁄s
;

588 
pos
 = 
°r
;

589 
n_a˘i⁄s
 = 0;

590 
	`oÂutû_∑r£_key_vÆue
(&
pos
, &
a˘
, &
¨g
)) {

591 i‡(!
	`°r_to_oÂa˘__
(
Êow
, 
pos
, 
a˘
, 
¨g
, 
oÂa˘s
, 
n_a˘i⁄s
)) {

594 
n_a˘i⁄s
++;

597 
îr‹
 = 
	`oÂa˘s_vîify
(
oÂa˘s
->
d©a
, oÂa˘s->
size
);

598 i‡(
îr‹
) {

599 
	`ovs_Áèl
(0, "Incorrectáction ordering");

602 
	`oÂa˘_∑d
(
oÂa˘s
);

603 
	}
}

606 
	$∑r£_«med_ö°ru˘i⁄
(
ovs_ö°ru˘i⁄_ty≥
 
ty≥
,

607 *
¨g
, 
oÂbuf
 *
oÂa˘s
)

609 
oÂîr
 
îr‹
;

611 
ty≥
) {

612 
OVSINST_OFPIT11_APPLY_ACTIONS
:

613 
	`NOT_REACHED
();

616 
OVSINST_OFPIT11_WRITE_ACTIONS
:

618 
	`ovs_Áèl
(0, "instruction write-actions isÇot supported yet");

621 
OVSINST_OFPIT11_CLEAR_ACTIONS
:

622 
	`oÂa˘_put_CLEAR_ACTIONS
(
oÂa˘s
);

625 
OVSINST_OFPIT11_WRITE_METADATA
:

626 
	`∑r£_mëad©a
(
oÂa˘s
, 
¨g
);

629 
OVSINST_OFPIT11_GOTO_TABLE
: {

630 
oÂa˘_gŸo_èbÀ
 *
ogt
 = 
	`oÂa˘_put_GOTO_TABLE
(
oÂa˘s
);

631 *
èbÀ_s
 = 
	`°r£p
(&
¨g
, ",");

632 i‡(!
èbÀ_s
 || !table_s[0]) {

633 
	`ovs_Áèl
(0, "instruction goto-tableÇeedsÅable id");

635 
ogt
->
èbÀ_id
 = 
	`°r_to_èbÀ_id
(
èbÀ_s
);

642 
îr‹
 = 
	`oÂa˘s_vîify
(
oÂa˘s
->
d©a
, oÂa˘s->
size
);

643 i‡(
îr‹
) {

644 
	`ovs_Áèl
(0, "Incorrect instruction ordering");

646 
	}
}

649 
	$°r_to_ö°_oÂa˘s
(c⁄° 
Êow
 *Êow, *
°r
, 
oÂbuf
 *
oÂa˘s
)

651 *
pos
, *
ö°
, *
¨g
;

652 
ty≥
;

653 c⁄° *
¥ev_ö°
 = 
NULL
;

654 
¥ev_ty≥
 = -1;

655 
n_a˘i⁄s
 = 0;

657 
pos
 = 
°r
;

658 
	`oÂutû_∑r£_key_vÆue
(&
pos
, &
ö°
, &
¨g
)) {

659 
ty≥
 = 
	`oÂa˘_ö°ru˘i⁄_ty≥_‰om_«me
(
ö°
);

660 i‡(
ty≥
 < 0) {

661 i‡(!
	`°r_to_oÂa˘__
(
Êow
, 
pos
, 
ö°
, 
¨g
, 
oÂa˘s
, 
n_a˘i⁄s
)) {

665 
ty≥
 = 
OVSINST_OFPIT11_APPLY_ACTIONS
;

666 i‡(
¥ev_ty≥
 =
ty≥
) {

667 
n_a˘i⁄s
++;

670 } i‡(
ty≥
 =
OVSINST_OFPIT11_APPLY_ACTIONS
) {

671 
	`ovs_Áèl
(0, "%s isn't supported. Just writeáctionsÅhen "

672 "ô i†öãΩªãdá†≠∂y_a˘i⁄s", 
ö°
);

674 
	`∑r£_«med_ö°ru˘i⁄
(
ty≥
, 
¨g
, 
oÂa˘s
);

677 i‡(
ty≥
 =
¥ev_ty≥
) {

678 
	`ovs_Áèl
(0, "instruction can be specifiedát most once: %s",

679 
ö°
);

681 i‡(
ty≥
 <
¥ev_ty≥
) {

682 
	`ovs_Áèl
(0, "Instruction %s must be specified before %s",

683 
ö°
, 
¥ev_ö°
);

686 
¥ev_ö°
 = 
ö°
;

687 
¥ev_ty≥
 = 
ty≥
;

688 
n_a˘i⁄s
++;

690 
	`oÂa˘_∑d
(
oÂa˘s
);

691 
	}
}

693 
	s¥Ÿocﬁ
 {

694 c⁄° *
	m«me
;

695 
uöt16_t
 
	mdl_ty≥
;

696 
uöt8_t
 
	mnw_¥Ÿo
;

699 
boﬁ


700 
	$∑r£_¥Ÿocﬁ
(c⁄° *
«me
, c⁄° 
¥Ÿocﬁ
 **
p_out
)

702 c⁄° 
¥Ÿocﬁ
 
¥Ÿocﬁs
[] = {

703 { "ù", 
ETH_TYPE_IP
, 0 },

704 { "¨p", 
ETH_TYPE_ARP
, 0 },

705 { "icmp", 
ETH_TYPE_IP
, 
IPPROTO_ICMP
 },

706 { "t˝", 
ETH_TYPE_IP
, 
IPPROTO_TCP
 },

707 { "udp", 
ETH_TYPE_IP
, 
IPPROTO_UDP
 },

708 { "ùv6", 
ETH_TYPE_IPV6
, 0 },

709 { "ù6", 
ETH_TYPE_IPV6
, 0 },

710 { "icmp6", 
ETH_TYPE_IPV6
, 
IPPROTO_ICMPV6
 },

711 { "t˝6", 
ETH_TYPE_IPV6
, 
IPPROTO_TCP
 },

712 { "udp6", 
ETH_TYPE_IPV6
, 
IPPROTO_UDP
 },

713 { "øΩ", 
ETH_TYPE_RARP
, 0},

715 c⁄° 
¥Ÿocﬁ
 *
p
;

717 
p
 = 
¥Ÿocﬁs
;Ö < &¥Ÿocﬁs[
	`ARRAY_SIZE
(protocols)];Ö++) {

718 i‡(!
	`°rcmp
(
p
->
«me
,Çame)) {

719 *
p_out
 = 
p
;

720  
åue
;

723 *
p_out
 = 
NULL
;

724  
Ál£
;

725 
	}
}

728 
	$oÂ_Áèl
(c⁄° *
Êow
, 
boﬁ
 
vîbo£
, c⁄° *
f‹m©
, ...)

730 
va_li°
 
¨gs
;

732 i‡(
vîbo£
) {

733 
	`Ârötf
(
°dîr
, "%s:\n", 
Êow
);

736 
	`va_°¨t
(
¨gs
, 
f‹m©
);

737 
	`ovs_Áèl_vÆi°
(0, 
f‹m©
, 
¨gs
);

738 
	}
}

741 
	$∑r£_fõld
(c⁄° 
mf_fõld
 *
mf
, c⁄° *
s
, 
m©ch
 *match)

743 
mf_vÆue
 
vÆue
, 
mask
;

744 *
îr‹
;

746 
îr‹
 = 
	`mf_∑r£
(
mf
, 
s
, &
vÆue
, &
mask
);

747 i‡(
îr‹
) {

748 
	`ovs_Áèl
(0, "%s", 
îr‹
);

751 
	`mf_£t
(
mf
, &
vÆue
, &
mask
, 
m©ch
);

752 
	}
}

763 
	$∑r£_oÂ_°r
(
oÂutû_Êow_mod
 *
fm
, 
comm™d
, c⁄° *
°r_
,

764 
boﬁ
 
vîbo£
)

767 
F_OUT_PORT
 = 1 << 0,

768 
F_ACTIONS
 = 1 << 1,

769 
F_TIMEOUT
 = 1 << 3,

770 
F_PRIORITY
 = 1 << 4,

771 
F_FLAGS
 = 1 << 5,

772 } 
fõlds
;

773 *
°rög
 = 
	`x°rdup
(
°r_
);

774 *
ßve_±r
 = 
NULL
;

775 *
a˘_°r
 = 
NULL
;

776 *
«me
;

778 
comm™d
) {

780 
fõlds
 = 
F_OUT_PORT
;

783 
OFPFC_ADD
:

784 
fõlds
 = 
F_ACTIONS
 | 
F_TIMEOUT
 | 
F_PRIORITY
 | 
F_FLAGS
;

787 
OFPFC_DELETE
:

788 
fõlds
 = 
F_OUT_PORT
;

791 
OFPFC_DELETE_STRICT
:

792 
fõlds
 = 
F_OUT_PORT
 | 
F_PRIORITY
;

795 
OFPFC_MODIFY
:

796 
fõlds
 = 
F_ACTIONS
 | 
F_TIMEOUT
 | 
F_PRIORITY
 | 
F_FLAGS
;

799 
OFPFC_MODIFY_STRICT
:

800 
fõlds
 = 
F_ACTIONS
 | 
F_TIMEOUT
 | 
F_PRIORITY
 | 
F_FLAGS
;

804 
	`NOT_REACHED
();

807 
	`m©ch_öô_ˇtchÆl
(&
fm
->
m©ch
);

808 
fm
->
¥i‹ôy
 = 
OFP_DEFAULT_PRIORITY
;

809 
fm
->
cookõ
 = 
	`ht⁄Œ
(0);

810 
fm
->
cookõ_mask
 = 
	`ht⁄Œ
(0);

811 i‡(
comm™d
 =
OFPFC_MODIFY
 || comm™d =
OFPFC_MODIFY_STRICT
) {

813 
fm
->
√w_cookõ
 = 
	`ht⁄Œ
(
UINT64_MAX
);

815 
fm
->
√w_cookõ
 = 
	`ht⁄Œ
(0);

817 
fm
->
èbÀ_id
 = 0xff;

818 
fm
->
comm™d
 = command;

819 
fm
->
idÀ_timeout
 = 
OFP_FLOW_PERMANENT
;

820 
fm
->
h¨d_timeout
 = 
OFP_FLOW_PERMANENT
;

821 
fm
->
buf„r_id
 = 
UINT32_MAX
;

822 
fm
->
out_p‹t
 = 
OFPP_NONE
;

823 
fm
->
Êags
 = 0;

824 i‡(
fõlds
 & 
F_ACTIONS
) {

825 
a˘_°r
 = 
	`°r°r
(
°rög
, "action");

826 i‡(!
a˘_°r
) {

827 
	`oÂ_Áèl
(
°r_
, 
vîbo£
, "must specifyánáction");

829 *
a˘_°r
 = '\0';

831 
a˘_°r
 = 
	`°rchr
(act_str + 1, '=');

832 i‡(!
a˘_°r
) {

833 
	`oÂ_Áèl
(
°r_
, 
vîbo£
, "must specifyánáction");

836 
a˘_°r
++;

838 
«me
 = 
	`°πok_r
(
°rög
, "=, \t\r\n", &
ßve_±r
);Çame;

839 
«me
 = 
	`°πok_r
(
NULL
, "=, \t\r\n", &
ßve_±r
)) {

840 c⁄° 
¥Ÿocﬁ
 *
p
;

842 i‡(
	`∑r£_¥Ÿocﬁ
(
«me
, &
p
)) {

843 
	`m©ch_£t_dl_ty≥
(&
fm
->
m©ch
, 
	`ht⁄s
(
p
->
dl_ty≥
));

844 i‡(
p
->
nw_¥Ÿo
) {

845 
	`m©ch_£t_nw_¥Ÿo
(&
fm
->
m©ch
, 
p
->
nw_¥Ÿo
);

847 } i‡(
fõlds
 & 
F_FLAGS
 && !
	`°rcmp
(
«me
, "send_flow_rem")) {

848 
fm
->
Êags
 |
OFPFF_SEND_FLOW_REM
;

849 } i‡(
fõlds
 & 
F_FLAGS
 && !
	`°rcmp
(
«me
, "check_overlap")) {

850 
fm
->
Êags
 |
OFPFF_CHECK_OVERLAP
;

852 *
vÆue
;

854 
vÆue
 = 
	`°πok_r
(
NULL
, ", \t\r\n", &
ßve_±r
);

855 i‡(!
vÆue
) {

856 
	`oÂ_Áèl
(
°r_
, 
vîbo£
, "fõld %†missög vÆue", 
«me
);

859 i‡(!
	`°rcmp
(
«me
, "table")) {

860 
fm
->
èbÀ_id
 = 
	`°r_to_èbÀ_id
(
vÆue
);

861 } i‡(!
	`°rcmp
(
«me
, "out_port")) {

862 i‡(!
	`oÂutû_p‹t_‰om_°rög
(
«me
, &
fm
->
out_p‹t
)) {

863 
	`oÂ_Áèl
(
°r_
, 
vîbo£
, "%s isÇotá valid OpenFlowÖort",

864 
«me
);

866 } i‡(
fõlds
 & 
F_PRIORITY
 && !
	`°rcmp
(
«me
, "priority")) {

867 
fm
->
¥i‹ôy
 = 
	`°r_to_u16
(
vÆue
, 
«me
);

868 } i‡(
fõlds
 & 
F_TIMEOUT
 && !
	`°rcmp
(
«me
, "idle_timeout")) {

869 
fm
->
idÀ_timeout
 = 
	`°r_to_u16
(
vÆue
, 
«me
);

870 } i‡(
fõlds
 & 
F_TIMEOUT
 && !
	`°rcmp
(
«me
, "hard_timeout")) {

871 
fm
->
h¨d_timeout
 = 
	`°r_to_u16
(
vÆue
, 
«me
);

872 } i‡(!
	`°rcmp
(
«me
, "cookie")) {

873 *
mask
 = 
	`°rchr
(
vÆue
, '/');

875 i‡(
mask
) {

877 i‡(
comm™d
 =
OFPFC_ADD
) {

878 
	`oÂ_Áèl
(
°r_
, 
vîbo£
, "flowádditions cannot use "

881 *
mask
 = '\0';

882 
fm
->
cookõ
 = 
	`ht⁄Œ
(
	`°r_to_u64
(
vÆue
));

883 
fm
->
cookõ_mask
 = 
	`ht⁄Œ
(
	`°r_to_u64
(
mask
+1));

886 i‡(
comm™d
 !
OFPFC_ADD
 && comm™d !
OFPFC_MODIFY


887 && 
comm™d
 !
OFPFC_MODIFY_STRICT
) {

888 
	`oÂ_Áèl
(
°r_
, 
vîbo£
, "cannot set cookie");

890 
fm
->
√w_cookõ
 = 
	`ht⁄Œ
(
	`°r_to_u64
(
vÆue
));

892 } i‡(
	`mf_‰om_«me
(
«me
)) {

893 
	`∑r£_fõld
(
	`mf_‰om_«me
(
«me
), 
vÆue
, &
fm
->
m©ch
);

894 } i‡(!
	`°rcmp
(
«me
, "duration")

895 || !
	`°rcmp
(
«me
, "n_packets")

896 || !
	`°rcmp
(
«me
, "n_bytes")

897 || !
	`°rcmp
(
«me
, "idle_age")

898 || !
	`°rcmp
(
«me
, "hard_age")) {

903 
	`oÂ_Áèl
(
°r_
, 
vîbo£
, "unknow¿keyw‹d %s", 
«me
);

907 i‡(!
fm
->
cookõ_mask
 && fm->
√w_cookõ
 =
	`ht⁄Œ
(
UINT64_MAX
)

908 && (
comm™d
 =
OFPFC_MODIFY
 || comm™d =
OFPFC_MODIFY_STRICT
)) {

912 
fm
->
√w_cookõ
 = 
	`ht⁄Œ
(0);

914 i‡(
fõlds
 & 
F_ACTIONS
) {

915 
oÂbuf
 
oÂa˘s
;

917 
	`oÂbuf_öô
(&
oÂa˘s
, 32);

918 
	`°r_to_ö°_oÂa˘s
(&
fm
->
m©ch
.
Êow
, 
a˘_°r
, &
oÂa˘s
);

919 
fm
->
oÂa˘s_Àn
 = 
oÂa˘s
.
size
;

920 
fm
->
oÂa˘s
 = 
	`oÂbuf_°ól_d©a
(&ofpacts);

922 
fm
->
oÂa˘s_Àn
 = 0;

923 
fm
->
oÂa˘s
 = 
NULL
;

926 
	`‰ì
(
°rög
);

927 
	}
}

932 
	$∑r£_Êow_m⁄ô‹_ªque°
(
oÂutû_Êow_m⁄ô‹_ªque°
 *
fmr
,

933 c⁄° *
°r_
)

935 
uöt32_t
 
id
;

937 *
°rög
 = 
	`x°rdup
(
°r_
);

938 *
ßve_±r
 = 
NULL
;

939 *
«me
;

941 
fmr
->
id
 = id++;

942 
fmr
->
Êags
 = (
NXFMF_INITIAL
 | 
NXFMF_ADD
 | 
NXFMF_DELETE
 | 
NXFMF_MODIFY


943 | 
NXFMF_OWN
 | 
NXFMF_ACTIONS
);

944 
fmr
->
out_p‹t
 = 
OFPP_NONE
;

945 
fmr
->
èbÀ_id
 = 0xff;

946 
	`m©ch_öô_ˇtchÆl
(&
fmr
->
m©ch
);

948 
«me
 = 
	`°πok_r
(
°rög
, "=, \t\r\n", &
ßve_±r
);Çame;

949 
«me
 = 
	`°πok_r
(
NULL
, "=, \t\r\n", &
ßve_±r
)) {

950 c⁄° 
¥Ÿocﬁ
 *
p
;

952 i‡(!
	`°rcmp
(
«me
, "!initial")) {

953 
fmr
->
Êags
 &~
NXFMF_INITIAL
;

954 } i‡(!
	`°rcmp
(
«me
, "!add")) {

955 
fmr
->
Êags
 &~
NXFMF_ADD
;

956 } i‡(!
	`°rcmp
(
«me
, "!delete")) {

957 
fmr
->
Êags
 &~
NXFMF_DELETE
;

958 } i‡(!
	`°rcmp
(
«me
, "!modify")) {

959 
fmr
->
Êags
 &~
NXFMF_MODIFY
;

960 } i‡(!
	`°rcmp
(
«me
, "!actions")) {

961 
fmr
->
Êags
 &~
NXFMF_ACTIONS
;

962 } i‡(!
	`°rcmp
(
«me
, "!own")) {

963 
fmr
->
Êags
 &~
NXFMF_OWN
;

964 } i‡(
	`∑r£_¥Ÿocﬁ
(
«me
, &
p
)) {

965 
	`m©ch_£t_dl_ty≥
(&
fmr
->
m©ch
, 
	`ht⁄s
(
p
->
dl_ty≥
));

966 i‡(
p
->
nw_¥Ÿo
) {

967 
	`m©ch_£t_nw_¥Ÿo
(&
fmr
->
m©ch
, 
p
->
nw_¥Ÿo
);

970 *
vÆue
;

972 
vÆue
 = 
	`°πok_r
(
NULL
, ", \t\r\n", &
ßve_±r
);

973 i‡(!
vÆue
) {

974 
	`ovs_Áèl
(0, "%s: fõld %†missög vÆue", 
°r_
, 
«me
);

977 i‡(!
	`°rcmp
(
«me
, "table")) {

978 
fmr
->
èbÀ_id
 = 
	`°r_to_èbÀ_id
(
vÆue
);

979 } i‡(!
	`°rcmp
(
«me
, "out_port")) {

980 
fmr
->
out_p‹t
 = 
	`©oi
(
vÆue
);

981 } i‡(
	`mf_‰om_«me
(
«me
)) {

982 
	`∑r£_fõld
(
	`mf_‰om_«me
(
«me
), 
vÆue
, &
fmr
->
m©ch
);

984 
	`ovs_Áèl
(0, "%s: unknow¿keyw‹d %s", 
°r_
, 
«me
);

988 
	`‰ì
(
°rög
);

989 
	}
}

997 
	$∑r£_oÂa˘s
(c⁄° *
s_
, 
oÂbuf
 *
oÂa˘s
)

999 *
s
 = 
	`x°rdup
(
s_
);

1000 
	`°r_to_oÂa˘s
(
NULL
, 
s
, 
oÂa˘s
);

1001 
	`‰ì
(
s
);

1002 
	}
}

1007 
	$∑r£_oÂ_Êow_mod_°r
(
oÂutû_Êow_mod
 *
fm
, c⁄° *
°rög
,

1008 
uöt16_t
 
comm™d
, 
boﬁ
 
vîbo£
)

1010 
m©ch
 
m©ch_c›y
;

1012 
	`∑r£_oÂ_°r
(
fm
, 
comm™d
, 
°rög
, 
vîbo£
);

1017 
m©ch_c›y
 = 
fm
->
m©ch
;

1018 
	`oÂutû_n‹mÆize_m©ch
(&
m©ch_c›y
);

1019 
	}
}

1022 
	$∑r£_oÂ_Êow_mod_fûe
(c⁄° *
fûe_«me
, 
uöt16_t
 
comm™d
,

1023 
oÂutû_Êow_mod
 **
fms
, 
size_t
 *
n_fms
)

1025 
size_t
 
Æloˇãd_fms
;

1026 
FILE
 *
°ªam
;

1027 
ds
 
s
;

1029 
°ªam
 = !
	`°rcmp
(
fûe_«me
, "-"Ë? 
°dö
 : 
	`f›í
(file_name, "r");

1030 i‡(
°ªam
 =
NULL
) {

1031 
	`ovs_Áèl
(
î∫o
, "%s: o≥n", 
fûe_«me
);

1034 
Æloˇãd_fms
 = *
n_fms
;

1035 
	`ds_öô
(&
s
);

1036 !
	`ds_gë_¥ïro˚s£d_löe
(&
s
, 
°ªam
)) {

1037 i‡(*
n_fms
 >
Æloˇãd_fms
) {

1038 *
fms
 = 
	`x2ƒóŒoc
(*fms, &
Æloˇãd_fms
,  **fms);

1040 
	`∑r£_oÂ_Êow_mod_°r
(&(*
fms
)[*
n_fms
], 
	`ds_c°r
(&
s
), 
comm™d
, 
Ál£
);

1041 *
n_fms
 += 1;

1043 
	`ds_de°roy
(&
s
);

1045 i‡(
°ªam
 !
°dö
) {

1046 
	`f˛o£
(
°ªam
);

1048 
	}
}

1051 
	$∑r£_oÂ_Êow_°©s_ªque°_°r
(
oÂutû_Êow_°©s_ªque°
 *
f§
,

1052 
boﬁ
 
aggªg©e
, c⁄° *
°rög
)

1054 
oÂutû_Êow_mod
 
fm
;

1056 
	`∑r£_oÂ_°r
(&
fm
, -1, 
°rög
, 
Ál£
);

1057 
f§
->
aggªg©e
 =ággregate;

1058 
f§
->
cookõ
 = 
fm
.cookie;

1059 
f§
->
cookõ_mask
 = 
fm
.cookie_mask;

1060 
f§
->
m©ch
 = 
fm
.match;

1061 
f§
->
out_p‹t
 = 
fm
.out_port;

1062 
f§
->
èbÀ_id
 = 
fm
.table_id;

1063 
	}
}

1073 
	$∑r£_oÂ_exa˘_Êow
(
Êow
 *Êow, c⁄° *
s
)

1075 *
pos
, *
key
, *
vÆue_s
;

1076 *
îr‹
 = 
NULL
;

1077 *
c›y
;

1079 
	`mem£t
(
Êow
, 0,  *flow);

1081 
pos
 = 
c›y
 = 
	`x°rdup
(
s
);

1082 
	`oÂutû_∑r£_key_vÆue
(&
pos
, &
key
, &
vÆue_s
)) {

1083 c⁄° 
¥Ÿocﬁ
 *
p
;

1084 i‡(
	`∑r£_¥Ÿocﬁ
(
key
, &
p
)) {

1085 i‡(
Êow
->
dl_ty≥
) {

1086 
îr‹
 = 
	`xa•rötf
("%s: Ethî√àty≥ së mu…ùÀÅimes", 
s
);

1087 
exô
;

1089 
Êow
->
dl_ty≥
 = 
	`ht⁄s
(
p
->dl_type);

1091 i‡(
p
->
nw_¥Ÿo
) {

1092 i‡(
Êow
->
nw_¥Ÿo
) {

1093 
îr‹
 = 
	`xa•rötf
("%s:ÇetworkÖrotocol set "

1094 "mu…ùÀÅimes", 
s
);

1095 
exô
;

1097 
Êow
->
nw_¥Ÿo
 = 
p
->nw_proto;

1100 c⁄° 
mf_fõld
 *
mf
;

1101 
mf_vÆue
 
vÆue
;

1102 *
fõld_îr‹
;

1104 
mf
 = 
	`mf_‰om_«me
(
key
);

1105 i‡(!
mf
) {

1106 
îr‹
 = 
	`xa•rötf
("%s: unknow¿fõld %s", 
s
, 
key
);

1107 
exô
;

1110 i‡(!
	`mf_¨e_¥îeqs_ok
(
mf
, 
Êow
)) {

1111 
îr‹
 = 
	`xa•rötf
("%s:ÖrerequisitesÇot met for setting %s",

1112 
s
, 
key
);

1113 
exô
;

1116 i‡(!
	`mf_is_zîo
(
mf
, 
Êow
)) {

1117 
îr‹
 = 
	`xa•rötf
("%s: fõld %†£àmu…ùÀÅimes", 
s
, 
key
);

1118 
exô
;

1121 
fõld_îr‹
 = 
	`mf_∑r£_vÆue
(
mf
, 
vÆue_s
, &
vÆue
);

1122 i‡(
fõld_îr‹
) {

1123 
îr‹
 = 
	`xa•rötf
("%s: bad value for %s (%s)",

1124 
s
, 
key
, 
fõld_îr‹
);

1125 
	`‰ì
(
fõld_îr‹
);

1126 
exô
;

1129 
	`mf_£t_Êow_vÆue
(
mf
, &
vÆue
, 
Êow
);

1133 
exô
:

1134 
	`‰ì
(
c›y
);

1136 i‡(
îr‹
) {

1137 
	`mem£t
(
Êow
, 0,  *flow);

1139  
îr‹
;

1140 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/ofp-parse.h

19 #i‚de‡
OFP_PARSE_H


20 
	#OFP_PARSE_H
 1

	)

22 
	~<°dboﬁ.h
>

23 
	~<°döt.h
>

24 
	~<°dio.h
>

26 
	gÊow
;

27 
	goÂbuf
;

28 
	goÂutû_Êow_mod
;

29 
	goÂutû_Êow_m⁄ô‹_ªque°
;

30 
	goÂutû_Êow_°©s_ªque°
;

32 
∑r£_oÂ_°r
(
oÂutû_Êow_mod
 *, 
comm™d
, c⁄° *
°r_
,

33 
boﬁ
 
vîbo£
);

35 
∑r£_oÂ_Êow_mod_°r
(
oÂutû_Êow_mod
 *, c⁄° *
°rög
,

36 
uöt16_t
 
comm™d
, 
boﬁ
 
vîbo£
);

37 
∑r£_oÂ_Êow_mod_fûe
(c⁄° *
fûe_«me
, 
uöt16_t
 
comm™d
,

38 
oÂutû_Êow_mod
 **
fms
, 
size_t
 *
n_fms
);

40 
∑r£_oÂ_Êow_°©s_ªque°_°r
(
oÂutû_Êow_°©s_ªque°
 *,

41 
boﬁ
 
aggªg©e
, c⁄° *
°rög
);

44 
∑r£_oÂa˘s
(c⁄° *, 
oÂbuf
 *
oÂa˘s
);

46 *
∑r£_oÂ_exa˘_Êow
(
Êow
 *, const *);

48 
∑r£_Êow_m⁄ô‹_ªque°
(
oÂutû_Êow_m⁄ô‹_ªque°
 *,

	@/home/lsch/mytest/openvswitch-1.9.0/lib/ofp-print.c

17 
	~<c⁄fig.h
>

18 
	~"oÂ-¥öt.h
"

20 
	~<î∫o.h
>

21 
	~<öây≥s.h
>

22 
	~<sys/ty≥s.h
>

23 
	~<√töë/ö.h
>

24 
	~<sys/waô.h
>

25 
	~<°d¨g.h
>

26 
	~<°dlib.h
>

27 
	~<˘y≥.h
>

29 
	~"bundÀ.h
"

30 
	~"byã-‹dî.h
"

31 
	~"compûî.h
"

32 
	~"dy«mic-°rög.h
"

33 
	~"Êow.h
"

34 
	~"À¨n.h
"

35 
	~"mu…ù©h.h
"

36 
	~"mëa-Êow.h
"

37 
	~"√tdev.h
"

38 
	~"nx-m©ch.h
"

39 
	~"oÂ-a˘i⁄s.h
"

40 
	~"oÂ-îr‹s.h
"

41 
	~"oÂ-msgs.h
"

42 
	~"oÂ-utû.h
"

43 
	~"oÂbuf.h
"

44 
	~"›íÊow/›íÊow.h
"

45 
	~"›íÊow/nicúa-ext.h
"

46 
	~"∑ckës.h
"

47 
	~"pˇp.h
"

48 
	~"ty≥-¥›s.h
"

49 
	~"u«lig√d.h
"

50 
	~"utû.h
"

52 
oÂ_¥öt_queue_«me
(
ds
 *
°rög
, 
uöt32_t
 
p‹t
);

53 
oÂ_¥öt_îr‹
(
ds
 *, 
oÂîr
);

59 
	$oÂ_∑ckë_to_°rög
(c⁄° *
d©a
, 
size_t
 
Àn
)

61 
ds
 d†
DS_EMPTY_INITIALIZER
;

62 
oÂbuf
 
buf
;

63 
Êow
 flow;

65 
	`oÂbuf_u£_c⁄°
(&
buf
, 
d©a
, 
Àn
);

66 
	`Êow_exåa˘
(&
buf
, 0, 0, 
NULL
, 0, &
Êow
);

67 
	`Êow_f‹m©
(&
ds
, &
Êow
);

69 i‡(
buf
.
l7
) {

70 i‡(
Êow
.
nw_¥Ÿo
 =
IPPROTO_TCP
) {

71 
t˝_hódî
 *
th
 = 
buf
.
l4
;

72 
	`ds_put_f‹m©
(&
ds
, "Å˝_csum:%"
PRIx16
,

73 
	`¡ohs
(
th
->
t˝_csum
));

74 } i‡(
Êow
.
nw_¥Ÿo
 =
IPPROTO_UDP
) {

75 
udp_hódî
 *
uh
 = 
buf
.
l4
;

76 
	`ds_put_f‹m©
(&
ds
, " udp_csum:%"
PRIx16
,

77 
	`¡ohs
(
uh
->
udp_csum
));

81 
	`ds_put_ch¨
(&
ds
, '\n');

83  
	`ds_c°r
(&
ds
);

84 
	}
}

87 
	$oÂ_¥öt_∑ckë_ö
(
ds
 *
°rög
, c⁄° 
oÂ_hódî
 *
oh
,

88 
vîbosôy
)

90 
oÂutû_∑ckë_ö
 
pö
;

91 
îr‹
;

92 
i
;

94 
îr‹
 = 
	`oÂutû_decode_∑ckë_ö
(&
pö
, 
oh
);

95 i‡(
îr‹
) {

96 
	`oÂ_¥öt_îr‹
(
°rög
, 
îr‹
);

100 i‡(
pö
.
èbÀ_id
) {

101 
	`ds_put_f‹m©
(
°rög
, "ÅabÀ_id=%"
PRIu8
, 
pö
.
èbÀ_id
);

104 i‡(
pö
.
cookõ
) {

105 
	`ds_put_f‹m©
(
°rög
, " cookõ=0x%"
PRIx64
, 
	`¡ohŒ
(
pö
.
cookõ
));

108 
	`ds_put_f‹m©
(
°rög
, "ÅŸÆ_Àn=%"
PRIu16
" in_p‹t=", 
pö
.
tŸÆ_Àn
);

109 
	`oÂutû_f‹m©_p‹t
(
pö
.
fmd
.
ö_p‹t
, 
°rög
);

111 i‡(
pö
.
fmd
.
tun_id
 !
	`ht⁄Œ
(0)) {

112 
	`ds_put_f‹m©
(
°rög
, "Åun_id=0x%"
PRIx64
, 
	`¡ohŒ
(
pö
.
fmd
.
tun_id
));

115 i‡(
pö
.
fmd
.
mëad©a
 !
	`ht⁄Œ
(0)) {

116 
	`ds_put_f‹m©
(
°rög
, " mëad©a=0x%"
PRIx64
, 
	`¡ohŒ
(
pö
.
fmd
.
mëad©a
));

119 
i
 = 0; i < 
FLOW_N_REGS
; i++) {

120 i‡(
pö
.
fmd
.
ªgs
[
i
]) {

121 
	`ds_put_f‹m©
(
°rög
, "Ñeg%d=0x%"
PRIx32
, 
i
, 
pö
.
fmd
.
ªgs
[i]);

125 
	`ds_put_f‹m©
(
°rög
, " (via %s)",

126 
	`oÂutû_∑ckë_ö_ªas⁄_to_°rög
(
pö
.
ªas⁄
));

128 
	`ds_put_f‹m©
(
°rög
, " d©a_Àn=%zu", 
pö
.
∑ckë_Àn
);

129 i‡(
pö
.
buf„r_id
 =
UINT32_MAX
) {

130 
	`ds_put_f‹m©
(
°rög
, " (unbuffered)");

131 i‡(
pö
.
tŸÆ_Àn
 !pö.
∑ckë_Àn
) {

132 
	`ds_put_f‹m©
(
°rög
, " (***total_len != data_len***)");

135 
	`ds_put_f‹m©
(
°rög
, " buf„r=0x%08"
PRIx32
, 
pö
.
buf„r_id
);

136 i‡(
pö
.
tŸÆ_Àn
 <Öö.
∑ckë_Àn
) {

137 
	`ds_put_f‹m©
(
°rög
, " (***total_len < data_len***)");

140 
	`ds_put_ch¨
(
°rög
, '\n');

142 i‡(
vîbosôy
 > 0) {

143 *
∑ckë
 = 
	`oÂ_∑ckë_to_°rög
(
pö
.∑ckë,Öö.
∑ckë_Àn
);

144 
	`ds_put_c°r
(
°rög
, 
∑ckë
);

145 
	`‰ì
(
∑ckë
);

147 
	}
}

150 
	$oÂ_¥öt_∑ckë_out
(
ds
 *
°rög
, c⁄° 
oÂ_hódî
 *
oh
,

151 
vîbosôy
)

153 
oÂutû_∑ckë_out
 
po
;

154 
oÂbuf
 
oÂa˘s
;

155 
oÂîr
 
îr‹
;

157 
	`oÂbuf_öô
(&
oÂa˘s
, 64);

158 
îr‹
 = 
	`oÂutû_decode_∑ckë_out
(&
po
, 
oh
, &
oÂa˘s
);

159 i‡(
îr‹
) {

160 
	`oÂbuf_unöô
(&
oÂa˘s
);

161 
	`oÂ_¥öt_îr‹
(
°rög
, 
îr‹
);

165 
	`ds_put_c°r
(
°rög
, " in_port=");

166 
	`oÂutû_f‹m©_p‹t
(
po
.
ö_p‹t
, 
°rög
);

168 
	`ds_put_ch¨
(
°rög
, ' ');

169 
	`oÂa˘s_f‹m©
(
po
.
oÂa˘s
,Öo.
oÂa˘s_Àn
, 
°rög
);

171 i‡(
po
.
buf„r_id
 =
UINT32_MAX
) {

172 
	`ds_put_f‹m©
(
°rög
, " d©a_Àn=%zu", 
po
.
∑ckë_Àn
);

173 i‡(
vîbosôy
 > 0 && 
po
.
∑ckë_Àn
 > 0) {

174 *
∑ckë
 = 
	`oÂ_∑ckë_to_°rög
(
po
.∑ckë,Öo.
∑ckë_Àn
);

175 
	`ds_put_ch¨
(
°rög
, '\n');

176 
	`ds_put_c°r
(
°rög
, 
∑ckë
);

177 
	`‰ì
(
∑ckë
);

180 
	`ds_put_f‹m©
(
°rög
, " buf„r=0x%08"
PRIx32
, 
po
.
buf„r_id
);

182 
	`ds_put_ch¨
(
°rög
, '\n');

184 
	`oÂbuf_unöô
(&
oÂa˘s
);

185 
	}
}

189 
	$com∑ª_p‹ts
(c⁄° *
a_
, c⁄° *
b_
)

191 c⁄° 
oÂutû_phy_p‹t
 *
a
 = 
a_
;

192 c⁄° 
oÂutû_phy_p‹t
 *
b
 = 
b_
;

193 
uöt16_t
 
≠
 = 
a
->
p‹t_no
;

194 
uöt16_t
 
bp
 = 
b
->
p‹t_no
;

196  
≠
 < 
bp
 ? -1 :áp > bp;

197 
	}
}

200 
oÂ_¥öt_bô_«mes
(
ds
 *
°rög
, 
uöt32_t
 
bôs
,

201 c⁄° *(*
bô_to_«me
)(
uöt32_t
 
bô
),

202 
£∑øt‹
)

204 
	gn
 = 0;

205 
	gi
;

207 i‡(!
	gbôs
) {

208 
ds_put_c°r
(
°rög
, "0");

212 
	gi
 = 0; i < 32; i++) {

213 
uöt32_t
 
	gbô
 = 
UINT32_C
(1Ë<< 
i
;

215 i‡(
	gbôs
 & 
	gbô
) {

216 c⁄° *
	g«me
 = 
bô_to_«me
(
bô
);

217 i‡(
	g«me
) {

218 i‡(
	gn
++) {

219 
ds_put_ch¨
(
°rög
, 
£∑øt‹
);

221 
ds_put_c°r
(
°rög
, 
«me
);

222 
	gbôs
 &~
bô
;

227 i‡(
	gbôs
) {

228 i‡(
	gn
) {

229 
ds_put_ch¨
(
°rög
, 
£∑øt‹
);

231 
ds_put_f‹m©
(
°rög
, "0x%"
PRIx32
, 
bôs
);

236 
	$√tdev_„©uª_to_«me
(
uöt32_t
 
bô
)

238 
√tdev_„©uªs
 
f
 = 
bô
;

240 
f
) {

241 
NETDEV_F_10MB_HD
:  "10MB-HD";

242 
NETDEV_F_10MB_FD
:  "10MB-FD";

243 
NETDEV_F_100MB_HD
:  "100MB-HD";

244 
NETDEV_F_100MB_FD
:  "100MB-FD";

245 
NETDEV_F_1GB_HD
:  "1GB-HD";

246 
NETDEV_F_1GB_FD
:  "1GB-FD";

247 
NETDEV_F_10GB_FD
:  "10GB-FD";

248 
NETDEV_F_40GB_FD
:  "40GB-FD";

249 
NETDEV_F_100GB_FD
:  "100GB-FD";

250 
NETDEV_F_1TB_FD
:  "1TB-FD";

251 
NETDEV_F_OTHER
:  "OTHER";

252 
NETDEV_F_COPPER
:  "COPPER";

253 
NETDEV_F_FIBER
:  "FIBER";

254 
NETDEV_F_AUTONEG
:  "AUTO_NEG";

255 
NETDEV_F_PAUSE
:  "AUTO_PAUSE";

256 
NETDEV_F_PAUSE_ASYM
:  "AUTO_PAUSE_ASYM";

259  
NULL
;

260 
	}
}

263 
	$oÂ_¥öt_p‹t_„©uªs
(
ds
 *
°rög
, 
√tdev_„©uªs
 
„©uªs
)

265 
	`oÂ_¥öt_bô_«mes
(
°rög
, 
„©uªs
, 
√tdev_„©uª_to_«me
, ' ');

266 
	`ds_put_ch¨
(
°rög
, '\n');

267 
	}
}

270 
	$oÂutû_p‹t_c⁄fig_to_«me
(
uöt32_t
 
bô
)

272 
oÂutû_p‹t_c⁄fig
 
pc
 = 
bô
;

274 
pc
) {

275 
OFPUTIL_PC_PORT_DOWN
:  "PORT_DOWN";

276 
OFPUTIL_PC_NO_STP
:  "NO_STP";

277 
OFPUTIL_PC_NO_RECV
:  "NO_RECV";

278 
OFPUTIL_PC_NO_RECV_STP
:  "NO_RECV_STP";

279 
OFPUTIL_PC_NO_FLOOD
:  "NO_FLOOD";

280 
OFPUTIL_PC_NO_FWD
:  "NO_FWD";

281 
OFPUTIL_PC_NO_PACKET_IN
:  "NO_PACKET_IN";

284  
NULL
;

285 
	}
}

288 
	$oÂ_¥öt_p‹t_c⁄fig
(
ds
 *
°rög
, 
oÂutû_p‹t_c⁄fig
 
c⁄fig
)

290 
	`oÂ_¥öt_bô_«mes
(
°rög
, 
c⁄fig
, 
oÂutû_p‹t_c⁄fig_to_«me
, ' ');

291 
	`ds_put_ch¨
(
°rög
, '\n');

292 
	}
}

295 
	$oÂutû_p‹t_°©e_to_«me
(
uöt32_t
 
bô
)

297 
oÂutû_p‹t_°©e
 
ps
 = 
bô
;

299 
ps
) {

300 
OFPUTIL_PS_LINK_DOWN
:  "LINK_DOWN";

301 
OFPUTIL_PS_BLOCKED
:  "BLOCKED";

302 
OFPUTIL_PS_LIVE
:  "LIVE";

304 
OFPUTIL_PS_STP_LISTEN
:

305 
OFPUTIL_PS_STP_LEARN
:

306 
OFPUTIL_PS_STP_FORWARD
:

307 
OFPUTIL_PS_STP_BLOCK
:

309  
NULL
;

312  
NULL
;

313 
	}
}

316 
	$oÂ_¥öt_p‹t_°©e
(
ds
 *
°rög
, 
oÂutû_p‹t_°©e
 
°©e
)

318 
oÂutû_p‹t_°©e
 
°p_°©e
;

327 
°p_°©e
 = 
°©e
 & 
OFPUTIL_PS_STP_MASK
;

328 i‡(
°p_°©e
) {

329 
	`ds_put_c°r
(
°rög
,

330 (
°p_°©e
 =
OFPUTIL_PS_STP_LEARN
 ? "STP_LEARN"

331 : 
°p_°©e
 =
OFPUTIL_PS_STP_FORWARD
 ? "STP_FORWARD"

333 
°©e
 &~
OFPUTIL_PS_STP_MASK
;

334 i‡(
°©e
) {

335 
	`oÂ_¥öt_bô_«mes
(
°rög
, 
°©e
, 
oÂutû_p‹t_°©e_to_«me
,

339 
	`oÂ_¥öt_bô_«mes
(
°rög
, 
°©e
, 
oÂutû_p‹t_°©e_to_«me
, ' ');

341 
	`ds_put_ch¨
(
°rög
, '\n');

342 
	}
}

345 
	$oÂ_¥öt_phy_p‹t
(
ds
 *
°rög
, c⁄° 
oÂutû_phy_p‹t
 *
p‹t
)

347 
«me
[ 
p‹t
->name];

348 
j
;

350 
	`mem˝y
(
«me
, 
p‹t
->name, Çame);

351 
j
 = 0; j <  
«me
 - 1; j++) {

352 i‡(!
	`i•röt
((Ë
«me
[
j
])) {

356 
«me
[
j
] = '\0';

358 
	`ds_put_ch¨
(
°rög
, ' ');

359 
	`oÂutû_f‹m©_p‹t
(
p‹t
->
p‹t_no
, 
°rög
);

360 
	`ds_put_f‹m©
(
°rög
, "(%s):áddr:"
ETH_ADDR_FMT
"\n",

361 
«me
, 
	`ETH_ADDR_ARGS
(
p‹t
->
hw_addr
));

363 
	`ds_put_c°r
(
°rög
, " config: ");

364 
	`oÂ_¥öt_p‹t_c⁄fig
(
°rög
, 
p‹t
->
c⁄fig
);

366 
	`ds_put_c°r
(
°rög
, " state: ");

367 
	`oÂ_¥öt_p‹t_°©e
(
°rög
, 
p‹t
->
°©e
);

369 i‡(
p‹t
->
cuº
) {

370 
	`ds_put_f‹m©
(
°rög
, " current: ");

371 
	`oÂ_¥öt_p‹t_„©uªs
(
°rög
, 
p‹t
->
cuº
);

373 i‡(
p‹t
->
advîti£d
) {

374 
	`ds_put_f‹m©
(
°rög
, "ádvertised: ");

375 
	`oÂ_¥öt_p‹t_„©uªs
(
°rög
, 
p‹t
->
advîti£d
);

377 i‡(
p‹t
->
suµ‹ãd
) {

378 
	`ds_put_f‹m©
(
°rög
, " supported: ");

379 
	`oÂ_¥öt_p‹t_„©uªs
(
°rög
, 
p‹t
->
suµ‹ãd
);

381 i‡(
p‹t
->
≥î
) {

382 
	`ds_put_f‹m©
(
°rög
, "Öeer: ");

383 
	`oÂ_¥öt_p‹t_„©uªs
(
°rög
, 
p‹t
->
≥î
);

385 
	`ds_put_f‹m©
(
°rög
, " s≥ed: %"
PRIu32
" MbpsÇow, "

386 "%"
PRIu32
" Mbps max\n",

387 
p‹t
->
cuº_•ìd
 / 
	`UINT32_C
(1000),

388 
p‹t
->
max_•ìd
 / 
	`UINT32_C
(1000));

389 
	}
}

395 
	$oÂ_¥öt_phy_p‹ts
(
ds
 *
°rög
, 
uöt8_t
 
oÂ_vîsi⁄
,

396 
oÂbuf
 *
b
)

398 
size_t
 
n_p‹ts
;

399 
oÂutû_phy_p‹t
 *
p‹ts
;

400 
oÂîr
 
îr‹
;

401 
size_t
 
i
;

403 
n_p‹ts
 = 
	`oÂutû_cou¡_phy_p‹ts
(
oÂ_vîsi⁄
, 
b
);

405 
p‹ts
 = 
	`xmÆloc
(
n_p‹ts
 *  *ports);

406 
i
 = 0; i < 
n_p‹ts
; i++) {

407 
îr‹
 = 
	`oÂutû_puŒ_phy_p‹t
(
oÂ_vîsi⁄
, 
b
, &
p‹ts
[
i
]);

408 i‡(
îr‹
) {

409 
	`oÂ_¥öt_îr‹
(
°rög
, 
îr‹
);

410 
exô
;

413 
	`qs‹t
(
p‹ts
, 
n_p‹ts
,  *p‹ts, 
com∑ª_p‹ts
);

414 
i
 = 0; i < 
n_p‹ts
; i++) {

415 
	`oÂ_¥öt_phy_p‹t
(
°rög
, &
p‹ts
[
i
]);

418 
exô
:

419 
	`‰ì
(
p‹ts
);

420 
	}
}

423 
	$oÂutû_ˇ∑bûôõs_to_«me
(
uöt32_t
 
bô
)

425 
oÂutû_ˇ∑bûôõs
 
ˇ∑bûôõs
 = 
bô
;

427 
ˇ∑bûôõs
) {

428 
OFPUTIL_C_FLOW_STATS
:  "FLOW_STATS";

429 
OFPUTIL_C_TABLE_STATS
:  "TABLE_STATS";

430 
OFPUTIL_C_PORT_STATS
:  "PORT_STATS";

431 
OFPUTIL_C_IP_REASM
:  "IP_REASM";

432 
OFPUTIL_C_QUEUE_STATS
:  "QUEUE_STATS";

433 
OFPUTIL_C_ARP_MATCH_IP
:  "ARP_MATCH_IP";

434 
OFPUTIL_C_STP
:  "STP";

435 
OFPUTIL_C_GROUP_STATS
:  "GROUP_STATS";

436 
OFPUTIL_C_PORT_BLOCKED
:  "PORT_BLOCKED";

439  
NULL
;

440 
	}
}

443 
	$oÂutû_a˘i⁄_bôm≠_to_«me
(
uöt32_t
 
bô
)

445 
oÂutû_a˘i⁄_bôm≠
 
a˘i⁄
 = 
bô
;

447 
a˘i⁄
) {

448 
OFPUTIL_A_OUTPUT
:  "OUTPUT";

449 
OFPUTIL_A_SET_VLAN_VID
:  "SET_VLAN_VID";

450 
OFPUTIL_A_SET_VLAN_PCP
:  "SET_VLAN_PCP";

451 
OFPUTIL_A_STRIP_VLAN
:  "STRIP_VLAN";

452 
OFPUTIL_A_SET_DL_SRC
:  "SET_DL_SRC";

453 
OFPUTIL_A_SET_DL_DST
:  "SET_DL_DST";

454 
OFPUTIL_A_SET_NW_SRC
:  "SET_NW_SRC";

455 
OFPUTIL_A_SET_NW_DST
:  "SET_NW_DST";

456 
OFPUTIL_A_SET_NW_ECN
:  "SET_NW_ECN";

457 
OFPUTIL_A_SET_NW_TOS
:  "SET_NW_TOS";

458 
OFPUTIL_A_SET_TP_SRC
:  "SET_TP_SRC";

459 
OFPUTIL_A_SET_TP_DST
:  "SET_TP_DST";

460 
OFPUTIL_A_SET_FIELD
:  "SET_FIELD";

461 
OFPUTIL_A_ENQUEUE
:  "ENQUEUE";

462 
OFPUTIL_A_COPY_TTL_OUT
:  "COPY_TTL_OUT";

463 
OFPUTIL_A_COPY_TTL_IN
:  "COPY_TTL_IN";

464 
OFPUTIL_A_SET_MPLS_LABEL
:  "SET_MPLS_LABEL";

465 
OFPUTIL_A_SET_MPLS_TC
:  "SET_MPLS_TC";

466 
OFPUTIL_A_SET_MPLS_TTL
:  "SET_MPLS_TTL";

467 
OFPUTIL_A_DEC_MPLS_TTL
:  "DEC_MPLS_TTL";

468 
OFPUTIL_A_PUSH_VLAN
:  "PUSH_VLAN";

469 
OFPUTIL_A_POP_VLAN
:  "POP_VLAN";

470 
OFPUTIL_A_PUSH_MPLS
:  "PUSH_MPLS";

471 
OFPUTIL_A_POP_MPLS
:  "POP_MPLS";

472 
OFPUTIL_A_SET_QUEUE
:  "SET_QUEUE";

473 
OFPUTIL_A_GROUP
:  "GROUP";

474 
OFPUTIL_A_SET_NW_TTL
:  "SET_NW_TTL";

475 
OFPUTIL_A_DEC_NW_TTL
:  "DEC_NW_TTL";

478  
NULL
;

479 
	}
}

482 
	$oÂ_¥öt_swôch_„©uªs
(
ds
 *
°rög
, c⁄° 
oÂ_hódî
 *
oh
)

484 
oÂutû_swôch_„©uªs
 
„©uªs
;

485 
oÂîr
 
îr‹
;

486 
oÂbuf
 
b
;

488 
îr‹
 = 
	`oÂutû_decode_swôch_„©uªs
(
oh
, &
„©uªs
, &
b
);

489 i‡(
îr‹
) {

490 
	`oÂ_¥öt_îr‹
(
°rög
, 
îr‹
);

494 
	`ds_put_f‹m©
(
°rög
, " dpid:%016"
PRIx64
"\n", 
„©uªs
.
d©≠©h_id
);

495 
	`ds_put_f‹m©
(
°rög
, "n_èbÀs:%"
PRIu8
",Ç_buf„rs:%"
PRIu32
"\n",

496 
„©uªs
.
n_èbÀs
, fótuªs.
n_buf„rs
);

498 
	`ds_put_c°r
(
°rög
, "capabilities: ");

499 
	`oÂ_¥öt_bô_«mes
(
°rög
, 
„©uªs
.
ˇ∑bûôõs
,

500 
oÂutû_ˇ∑bûôõs_to_«me
, ' ');

501 
	`ds_put_ch¨
(
°rög
, '\n');

503 (
oÂ_vîsi⁄
)
oh
->
vîsi⁄
) {

504 
OFP10_VERSION
:

505 
	`ds_put_c°r
(
°rög
, "actions: ");

506 
	`oÂ_¥öt_bô_«mes
(
°rög
, 
„©uªs
.
a˘i⁄s
,

507 
oÂutû_a˘i⁄_bôm≠_to_«me
, ' ');

508 
	`ds_put_ch¨
(
°rög
, '\n');

510 
OFP11_VERSION
:

511 
OFP12_VERSION
:

514 
	`NOT_REACHED
();

517 
	`oÂ_¥öt_phy_p‹ts
(
°rög
, 
oh
->
vîsi⁄
, &
b
);

518 
	}
}

521 
	$oÂ_¥öt_swôch_c⁄fig
(
ds
 *
°rög
, c⁄° 
oÂ_swôch_c⁄fig
 *
osc
)

523 
oÂ_c⁄fig_Êags
 
Êags
;

525 
Êags
 = 
	`¡ohs
(
osc
->flags);

527 
	`ds_put_f‹m©
(
°rög
, " føgs=%s", 
	`oÂutû_‰ag_h™dlög_to_°rög
(
Êags
));

528 
Êags
 &~
OFPC_FRAG_MASK
;

530 i‡(
Êags
 & 
OFPC_INVALID_TTL_TO_CONTROLLER
) {

531 
	`ds_put_f‹m©
(
°rög
, " invalid_ttl_to_controller");

532 
Êags
 &~
OFPC_INVALID_TTL_TO_CONTROLLER
;

535 i‡(
Êags
) {

536 
	`ds_put_f‹m©
(
°rög
, " ***unknow¿Êag†0x%04"
PRIx16
"***", 
Êags
);

539 
	`ds_put_f‹m©
(
°rög
, " miss_£nd_Àn=%"
PRIu16
"\n", 
	`¡ohs
(
osc
->
miss_£nd_Àn
));

540 
	}
}

542 
	$¥öt_wûd
(
ds
 *
°rög
, c⁄° *
Àadî
, 
is_wûd
,

543 
vîbosôy
, c⁄° *
f‹m©
, ...)

544 
	`__©åibuã__
((
	`f‹m©
(
¥ötf
, 5, 6)));

546 
	$¥öt_wûd
(
ds
 *
°rög
, c⁄° *
Àadî
, 
is_wûd
,

547 
vîbosôy
, c⁄° *
f‹m©
, ...)

549 i‡(
is_wûd
 && 
vîbosôy
 < 2) {

552 
	`ds_put_c°r
(
°rög
, 
Àadî
);

553 i‡(!
is_wûd
) {

554 
va_li°
 
¨gs
;

556 
	`va_°¨t
(
¨gs
, 
f‹m©
);

557 
	`ds_put_f‹m©_vÆi°
(
°rög
, 
f‹m©
, 
¨gs
);

558 
	`va_íd
(
¨gs
);

560 
	`ds_put_ch¨
(
°rög
, '*');

562 
	`ds_put_ch¨
(
°rög
, ',');

563 
	}
}

566 
	$¥öt_ù_√tmask
(
ds
 *
°rög
, c⁄° *
Àadî
, 
ovs_be32
 
ù
,

567 
uöt32_t
 
wûd_bôs
, 
vîbosôy
)

569 i‡(
wûd_bôs
 >32 && 
vîbosôy
 < 2) {

572 
	`ds_put_c°r
(
°rög
, 
Àadî
);

573 i‡(
wûd_bôs
 < 32) {

574 
	`ds_put_f‹m©
(
°rög
, 
IP_FMT
, 
	`IP_ARGS
(&
ù
));

575 i‡(
wûd_bôs
) {

576 
	`ds_put_f‹m©
(
°rög
, "/%d", 32 - 
wûd_bôs
);

579 
	`ds_put_ch¨
(
°rög
, '*');

581 
	`ds_put_ch¨
(
°rög
, ',');

582 
	}
}

585 
	$oÂ10_m©ch_¥öt
(
ds
 *
f
, c⁄° 
oÂ10_m©ch
 *
om
, 
vîbosôy
)

587 *
s
 = 
	`oÂ10_m©ch_to_°rög
(
om
, 
vîbosôy
);

588 
	`ds_put_c°r
(
f
, 
s
);

589 
	`‰ì
(
s
);

590 
	}
}

593 
	$oÂ10_m©ch_to_°rög
(c⁄° 
oÂ10_m©ch
 *
om
, 
vîbosôy
)

595 
ds
 
f
 = 
DS_EMPTY_INITIALIZER
;

596 
uöt32_t
 
w
 = 
	`¡ohl
(
om
->
wûdˇrds
);

597 
boﬁ
 
skù_ty≥
 = 
Ál£
;

598 
boﬁ
 
skù_¥Ÿo
 = 
Ál£
;

600 i‡(!(
w
 & 
OFPFW10_DL_TYPE
)) {

601 
skù_ty≥
 = 
åue
;

602 i‡(
om
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IP
)) {

603 i‡(!(
w
 & 
OFPFW10_NW_PROTO
)) {

604 
skù_¥Ÿo
 = 
åue
;

605 i‡(
om
->
nw_¥Ÿo
 =
IPPROTO_ICMP
) {

606 
	`ds_put_c°r
(&
f
, "icmp,");

607 } i‡(
om
->
nw_¥Ÿo
 =
IPPROTO_TCP
) {

608 
	`ds_put_c°r
(&
f
, "tcp,");

609 } i‡(
om
->
nw_¥Ÿo
 =
IPPROTO_UDP
) {

610 
	`ds_put_c°r
(&
f
, "udp,");

612 
	`ds_put_c°r
(&
f
, "ip,");

613 
skù_¥Ÿo
 = 
Ál£
;

616 
	`ds_put_c°r
(&
f
, "ip,");

618 } i‡(
om
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_ARP
)) {

619 
	`ds_put_c°r
(&
f
, "arp,");

620 } i‡(
om
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_RARP
)){

621 
	`ds_put_c°r
(&
f
, "rarp,");

623 
skù_ty≥
 = 
Ál£
;

626 
	`¥öt_wûd
(&
f
, "ö_p‹t=", 
w
 & 
OFPFW10_IN_PORT
, 
vîbosôy
,

627 "%d", 
	`¡ohs
(
om
->
ö_p‹t
));

628 
	`¥öt_wûd
(&
f
, "dl_vœn=", 
w
 & 
OFPFW10_DL_VLAN
, 
vîbosôy
,

629 "%d", 
	`¡ohs
(
om
->
dl_vœn
));

630 
	`¥öt_wûd
(&
f
, "dl_vœn_p˝=", 
w
 & 
OFPFW10_DL_VLAN_PCP
, 
vîbosôy
,

631 "%d", 
om
->
dl_vœn_p˝
);

632 
	`¥öt_wûd
(&
f
, "dl_§c=", 
w
 & 
OFPFW10_DL_SRC
, 
vîbosôy
,

633 
ETH_ADDR_FMT
, 
	`ETH_ADDR_ARGS
(
om
->
dl_§c
));

634 
	`¥öt_wûd
(&
f
, "dl_d°=", 
w
 & 
OFPFW10_DL_DST
, 
vîbosôy
,

635 
ETH_ADDR_FMT
, 
	`ETH_ADDR_ARGS
(
om
->
dl_d°
));

636 i‡(!
skù_ty≥
) {

637 
	`¥öt_wûd
(&
f
, "dl_ty≥=", 
w
 & 
OFPFW10_DL_TYPE
, 
vîbosôy
,

638 "0x%04x", 
	`¡ohs
(
om
->
dl_ty≥
));

640 
	`¥öt_ù_√tmask
(&
f
, "nw_§c=", 
om
->
nw_§c
,

641 (
w
 & 
OFPFW10_NW_SRC_MASK
Ë>> 
OFPFW10_NW_SRC_SHIFT
,

642 
vîbosôy
);

643 
	`¥öt_ù_√tmask
(&
f
, "nw_d°=", 
om
->
nw_d°
,

644 (
w
 & 
OFPFW10_NW_DST_MASK
Ë>> 
OFPFW10_NW_DST_SHIFT
,

645 
vîbosôy
);

646 i‡(!
skù_¥Ÿo
) {

647 i‡(
om
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_ARP
) ||

648 
om
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_RARP
)) {

649 
	`¥öt_wûd
(&
f
, "¨p_›=", 
w
 & 
OFPFW10_NW_PROTO
, 
vîbosôy
,

650 "%u", 
om
->
nw_¥Ÿo
);

652 
	`¥öt_wûd
(&
f
, "nw_¥Ÿo=", 
w
 & 
OFPFW10_NW_PROTO
, 
vîbosôy
,

653 "%u", 
om
->
nw_¥Ÿo
);

656 
	`¥öt_wûd
(&
f
, "nw_tos=", 
w
 & 
OFPFW10_NW_TOS
, 
vîbosôy
,

657 "%u", 
om
->
nw_tos
);

658 i‡(
om
->
nw_¥Ÿo
 =
IPPROTO_ICMP
) {

659 
	`¥öt_wûd
(&
f
, "icmp_ty≥=", 
w
 & 
OFPFW10_ICMP_TYPE
, 
vîbosôy
,

660 "%d", 
	`¡ohs
(
om
->
ç_§c
));

661 
	`¥öt_wûd
(&
f
, "icmp_code=", 
w
 & 
OFPFW10_ICMP_CODE
, 
vîbosôy
,

662 "%d", 
	`¡ohs
(
om
->
ç_d°
));

664 
	`¥öt_wûd
(&
f
, "ç_§c=", 
w
 & 
OFPFW10_TP_SRC
, 
vîbosôy
,

665 "%d", 
	`¡ohs
(
om
->
ç_§c
));

666 
	`¥öt_wûd
(&
f
, "ç_d°=", 
w
 & 
OFPFW10_TP_DST
, 
vîbosôy
,

667 "%d", 
	`¡ohs
(
om
->
ç_d°
));

669 i‡(
	`ds_œ°
(&
f
) == ',') {

670 
f
.
Àngth
--;

672  
	`ds_c°r
(&
f
);

673 
	}
}

676 
	$oÂ_¥öt_Êow_mod
(
ds
 *
s
, c⁄° 
oÂ_hódî
 *
oh
, 
vîbosôy
)

678 
oÂutû_Êow_mod
 
fm
;

679 
oÂbuf
 
oÂa˘s
;

680 
boﬁ
 
√ed_¥i‹ôy
;

681 
oÂîr
 
îr‹
;

682 
oÂøw
 
øw
;

683 
oÂutû_¥Ÿocﬁ
 
¥Ÿocﬁ
;

685 
¥Ÿocﬁ
 = 
	`oÂutû_¥Ÿocﬁ_‰om_oÂ_vîsi⁄
(
oh
->
vîsi⁄
);

686 
¥Ÿocﬁ
 = 
	`oÂutû_¥Ÿocﬁ_£t_tid
’rŸocﬁ, 
åue
);

688 
	`oÂbuf_öô
(&
oÂa˘s
, 64);

689 
îr‹
 = 
	`oÂutû_decode_Êow_mod
(&
fm
, 
oh
, 
¥Ÿocﬁ
, &
oÂa˘s
);

690 i‡(
îr‹
) {

691 
	`oÂbuf_unöô
(&
oÂa˘s
);

692 
	`oÂ_¥öt_îr‹
(
s
, 
îr‹
);

696 
	`ds_put_ch¨
(
s
, ' ');

697 
fm
.
comm™d
) {

698 
OFPFC_ADD
:

699 
	`ds_put_c°r
(
s
, "ADD");

701 
OFPFC_MODIFY
:

702 
	`ds_put_c°r
(
s
, "MOD");

704 
OFPFC_MODIFY_STRICT
:

705 
	`ds_put_c°r
(
s
, "MOD_STRICT");

707 
OFPFC_DELETE
:

708 
	`ds_put_c°r
(
s
, "DEL");

710 
OFPFC_DELETE_STRICT
:

711 
	`ds_put_c°r
(
s
, "DEL_STRICT");

714 
	`ds_put_f‹m©
(
s
, "cmd:%d", 
fm
.
comm™d
);

716 i‡(
fm
.
èbÀ_id
 != 0) {

717 
	`ds_put_f‹m©
(
s
, "ÅabÀ:%d", 
fm
.
èbÀ_id
);

720 
	`ds_put_ch¨
(
s
, ' ');

721 
	`oÂøw_decode
(&
øw
, 
oh
);

722 i‡(
vîbosôy
 >3 && 
øw
 =
OFPRAW_OFPT10_FLOW_MOD
) {

723 c⁄° 
oÂ10_Êow_mod
 *
ofm
 = 
	`oÂmsg_body
(
oh
);

724 
	`oÂ10_m©ch_¥öt
(
s
, &
ofm
->
m©ch
, 
vîbosôy
);

727 
√ed_¥i‹ôy
 = 
åue
;

728 } i‡(
vîbosôy
 >3 && 
øw
 =
OFPRAW_NXT_FLOW_MOD
) {

729 c⁄° 
nx_Êow_mod
 *
nfm
 = 
	`oÂmsg_body
(
oh
);

730 c⁄° *
nxm
 = 
nfm
 + 1;

731 *
nxm_s
;

733 
nxm_s
 = 
	`nx_m©ch_to_°rög
(
nxm
, 
	`¡ohs
(
nfm
->
m©ch_Àn
));

734 
	`ds_put_c°r
(
s
, 
nxm_s
);

735 
	`‰ì
(
nxm_s
);

738 
√ed_¥i‹ôy
 = 
åue
;

740 
	`m©ch_f‹m©
(&
fm
.
m©ch
, 
s
, fm.
¥i‹ôy
);

743 
√ed_¥i‹ôy
 = 
Ál£
;

746 i‡(
	`ds_œ°
(
s
) != ' ') {

747 
	`ds_put_ch¨
(
s
, ' ');

749 i‡(
fm
.
√w_cookõ
 !
	`ht⁄Œ
(0Ë&& fm.√w_cookõ !ht⁄Œ(
UINT64_MAX
)) {

750 
	`ds_put_f‹m©
(
s
, "cookõ:0x%"
PRIx64
" ", 
	`¡ohŒ
(
fm
.
√w_cookõ
));

752 i‡(
fm
.
cookõ_mask
 !
	`ht⁄Œ
(0)) {

753 
	`ds_put_f‹m©
(
s
, "cookõ:0x%"
PRIx64
"/0x%"PRIx64" ",

754 
	`¡ohŒ
(
fm
.
cookõ
),ÇtohŒ(fm.
cookõ_mask
));

756 i‡(
fm
.
idÀ_timeout
 !
OFP_FLOW_PERMANENT
) {

757 
	`ds_put_f‹m©
(
s
, "idÀ:%"
PRIu16
" ", 
fm
.
idÀ_timeout
);

759 i‡(
fm
.
h¨d_timeout
 !
OFP_FLOW_PERMANENT
) {

760 
	`ds_put_f‹m©
(
s
, "h¨d:%"
PRIu16
" ", 
fm
.
h¨d_timeout
);

762 i‡(
fm
.
¥i‹ôy
 !
OFP_DEFAULT_PRIORITY
 && 
√ed_¥i‹ôy
) {

763 
	`ds_put_f‹m©
(
s
, "¥i:%"
PRIu16
" ", 
fm
.
¥i‹ôy
);

765 i‡(
fm
.
buf„r_id
 !
UINT32_MAX
) {

766 
	`ds_put_f‹m©
(
s
, "buf:0x%"
PRIx32
" ", 
fm
.
buf„r_id
);

768 i‡(
fm
.
out_p‹t
 !
OFPP_NONE
) {

769 
	`ds_put_f‹m©
(
s
, "out_port:");

770 
	`oÂutû_f‹m©_p‹t
(
fm
.
out_p‹t
, 
s
);

771 
	`ds_put_ch¨
(
s
, ' ');

773 i‡(
fm
.
Êags
 != 0) {

774 
uöt16_t
 
Êags
 = 
fm
.flags;

776 i‡(
Êags
 & 
OFPFF_SEND_FLOW_REM
) {

777 
	`ds_put_c°r
(
s
, "send_flow_rem ");

779 i‡(
Êags
 & 
OFPFF_CHECK_OVERLAP
) {

780 
	`ds_put_c°r
(
s
, "check_overlap ");

782 i‡(
Êags
 & 
OFPFF10_EMERG
) {

783 
	`ds_put_c°r
(
s
, "emerg ");

786 
Êags
 &~(
OFPFF_SEND_FLOW_REM
 | 
OFPFF_CHECK_OVERLAP
 | 
OFPFF10_EMERG
);

787 i‡(
Êags
) {

788 
	`ds_put_f‹m©
(
s
, "Êags:0x%"
PRIx16
" ", 
Êags
);

792 
	`oÂa˘s_f‹m©
(
fm
.
oÂa˘s
, fm.
oÂa˘s_Àn
, 
s
);

793 
	`oÂbuf_unöô
(&
oÂa˘s
);

794 
	}
}

797 
	$oÂ_¥öt_duøti⁄
(
ds
 *
°rög
, 
£c
, 
n£c
)

799 
	`ds_put_f‹m©
(
°rög
, "%u", 
£c
);

800 i‡(
n£c
 > 0) {

801 
	`ds_put_f‹m©
(
°rög
, ".%09u", 
n£c
);

802 
°rög
->°rög[°rög->
Àngth
 - 1] == '0') {

803 
°rög
->
Àngth
--;

806 
	`ds_put_ch¨
(
°rög
, 's');

807 
	}
}

810 
	$oÂ_Êow_ªmoved_ªas⁄_to_°rög
(
oÂ_Êow_ªmoved_ªas⁄
 
ªas⁄
)

812 
s
[32];

814 
ªas⁄
) {

815 
OFPRR_IDLE_TIMEOUT
:

817 
OFPRR_HARD_TIMEOUT
:

819 
OFPRR_DELETE
:

821 
OFPRR_GROUP_DELETE
:

823 
OFPRR_EVICTION
:

826 
	`•rötf
(
s
, "%d", (Ë
ªas⁄
);

827  
s
;

829 
	}
}

832 
	$oÂ_¥öt_Êow_ªmoved
(
ds
 *
°rög
, c⁄° 
oÂ_hódî
 *
oh
)

834 
oÂutû_Êow_ªmoved
 
‰
;

835 
oÂîr
 
îr‹
;

837 
îr‹
 = 
	`oÂutû_decode_Êow_ªmoved
(&
‰
, 
oh
);

838 i‡(
îr‹
) {

839 
	`oÂ_¥öt_îr‹
(
°rög
, 
îr‹
);

843 
	`ds_put_ch¨
(
°rög
, ' ');

844 
	`m©ch_f‹m©
(&
‰
.
m©ch
, 
°rög
, fr.
¥i‹ôy
);

846 
	`ds_put_f‹m©
(
°rög
, "Ñeason=%s",

847 
	`oÂ_Êow_ªmoved_ªas⁄_to_°rög
(
‰
.
ªas⁄
));

849 i‡(
‰
.
èbÀ_id
 != 255) {

850 
	`ds_put_f‹m©
(
°rög
, "ÅabÀ_id=%"
PRIu8
, 
‰
.
èbÀ_id
);

853 i‡(
‰
.
cookõ
 !
	`ht⁄Œ
(0)) {

854 
	`ds_put_f‹m©
(
°rög
, " cookõ:0x%"
PRIx64
, 
	`¡ohŒ
(
‰
.
cookõ
));

856 
	`ds_put_c°r
(
°rög
, " duration");

857 
	`oÂ_¥öt_duøti⁄
(
°rög
, 
‰
.
duøti⁄_£c
, fr.
duøti⁄_n£c
);

858 
	`ds_put_f‹m©
(
°rög
, " idÀ%"
PRIu16
, 
‰
.
idÀ_timeout
);

859 i‡(
‰
.
h¨d_timeout
) {

862 
	`ds_put_f‹m©
(
°rög
, " h¨d%"
PRIu16
, 
‰
.
h¨d_timeout
);

864 
	`ds_put_f‹m©
(
°rög
, "Ökts%"
PRIu64
" bytes%"PRIu64"\n",

865 
‰
.
∑ckë_cou¡
, fr.
byã_cou¡
);

866 
	}
}

869 
	$oÂ_¥öt_p‹t_mod
(
ds
 *
°rög
, c⁄° 
oÂ_hódî
 *
oh
)

871 
oÂutû_p‹t_mod
 
pm
;

872 
oÂîr
 
îr‹
;

874 
îr‹
 = 
	`oÂutû_decode_p‹t_mod
(
oh
, &
pm
);

875 i‡(
îr‹
) {

876 
	`oÂ_¥öt_îr‹
(
°rög
, 
îr‹
);

880 
	`ds_put_f‹m©
(
°rög
, "p‹t: %"
PRIu16
":áddr:"
ETH_ADDR_FMT
"\n",

881 
pm
.
p‹t_no
, 
	`ETH_ADDR_ARGS
’m.
hw_addr
));

883 
	`ds_put_f‹m©
(
°rög
, " config: ");

884 
	`oÂ_¥öt_p‹t_c⁄fig
(
°rög
, 
pm
.
c⁄fig
);

886 
	`ds_put_f‹m©
(
°rög
, " mask: ");

887 
	`oÂ_¥öt_p‹t_c⁄fig
(
°rög
, 
pm
.
mask
);

889 
	`ds_put_f‹m©
(
°rög
, "ádvertise: ");

890 i‡(
pm
.
advîti£
) {

891 
	`oÂ_¥öt_p‹t_„©uªs
(
°rög
, 
pm
.
advîti£
);

893 
	`ds_put_f‹m©
(
°rög
, "UNCHANGED\n");

895 
	}
}

898 
	$oÂ_¥öt_îr‹
(
ds
 *
°rög
, 
oÂîr
 
îr‹
)

900 i‡(
°rög
->
Àngth
) {

901 
	`ds_put_ch¨
(
°rög
, ' ');

903 
	`ds_put_f‹m©
(
°rög
, "***decodêîr‹: %s***\n", 
	`oÂîr_gë_«me
(
îr‹
));

904 
	}
}

907 
	$oÂ_¥öt_îr‹_msg
(
ds
 *
°rög
, c⁄° 
oÂ_hódî
 *
oh
)

909 
size_t
 
Àn
 = 
	`¡ohs
(
oh
->
Àngth
);

910 
oÂbuf
 
∑ylﬂd
;

911 
oÂîr
 
îr‹
;

912 *
s
;

914 
îr‹
 = 
	`oÂîr_decode_msg
(
oh
, &
∑ylﬂd
);

915 i‡(!
îr‹
) {

916 
	`ds_put_c°r
(
°rög
, "***decodeÉrror***");

917 
	`ds_put_hex_dump
(
°rög
, 
oh
 + 1, 
Àn
 -  *oh, 0, 
åue
);

921 
	`ds_put_f‹m©
(
°rög
, " %s\n", 
	`oÂîr_gë_«me
(
îr‹
));

923 i‡(
îr‹
 =
OFPERR_OFPHFC_INCOMPATIBLE
 ||Éº‹ =
OFPERR_OFPHFC_EPERM
) {

924 
	`ds_put_¥öèbÀ
(
°rög
, 
∑ylﬂd
.
d©a
,Öaylﬂd.
size
);

926 
s
 = 
	`oÂ_to_°rög
(
∑ylﬂd
.
d©a
,Öaylﬂd.
size
, 1);

927 
	`ds_put_c°r
(
°rög
, 
s
);

928 
	`‰ì
(
s
);

930 
	}
}

933 
	$oÂ_¥öt_p‹t_°©us
(
ds
 *
°rög
, c⁄° 
oÂ_hódî
 *
oh
)

935 
oÂutû_p‹t_°©us
 
ps
;

936 
oÂîr
 
îr‹
;

938 
îr‹
 = 
	`oÂutû_decode_p‹t_°©us
(
oh
, &
ps
);

939 i‡(
îr‹
) {

940 
	`oÂ_¥öt_îr‹
(
°rög
, 
îr‹
);

944 i‡(
ps
.
ªas⁄
 =
OFPPR_ADD
) {

945 
	`ds_put_f‹m©
(
°rög
, " ADD:");

946 } i‡(
ps
.
ªas⁄
 =
OFPPR_DELETE
) {

947 
	`ds_put_f‹m©
(
°rög
, " DEL:");

948 } i‡(
ps
.
ªas⁄
 =
OFPPR_MODIFY
) {

949 
	`ds_put_f‹m©
(
°rög
, " MOD:");

952 
	`oÂ_¥öt_phy_p‹t
(
°rög
, &
ps
.
desc
);

953 
	}
}

956 
	$oÂ_¥öt_oÂ°_desc_ª∂y
(
ds
 *
°rög
, c⁄° 
oÂ_hódî
 *
oh
)

958 c⁄° 
oÂ_desc_°©s
 *
ods
 = 
	`oÂmsg_body
(
oh
);

960 
	`ds_put_ch¨
(
°rög
, '\n');

961 
	`ds_put_f‹m©
(
°rög
, "Manufacturer: %.*s\n",

962 (Ë 
ods
->
m‰_desc
, ods->mfr_desc);

963 
	`ds_put_f‹m©
(
°rög
, "Hardware: %.*s\n",

964 (Ë 
ods
->
hw_desc
, ods->hw_desc);

965 
	`ds_put_f‹m©
(
°rög
, "Software: %.*s\n",

966 (Ë 
ods
->
sw_desc
, ods->sw_desc);

967 
	`ds_put_f‹m©
(
°rög
, "Serial Num: %.*s\n",

968 (Ë 
ods
->
£rül_num
, ods->serial_num);

969 
	`ds_put_f‹m©
(
°rög
, "DP Description: %.*s\n",

970 (Ë 
ods
->
dp_desc
, ods->dp_desc);

971 
	}
}

974 
	$oÂ_¥öt_Êow_°©s_ªque°
(
ds
 *
°rög
, c⁄° 
oÂ_hódî
 *
oh
)

976 
oÂutû_Êow_°©s_ªque°
 
f§
;

977 
oÂîr
 
îr‹
;

979 
îr‹
 = 
	`oÂutû_decode_Êow_°©s_ªque°
(&
f§
, 
oh
);

980 i‡(
îr‹
) {

981 
	`oÂ_¥öt_îr‹
(
°rög
, 
îr‹
);

985 i‡(
f§
.
èbÀ_id
 != 0xff) {

986 
	`ds_put_f‹m©
(
°rög
, "ÅabÀ=%"
PRIu8
, 
f§
.
èbÀ_id
);

989 i‡(
f§
.
out_p‹t
 !
OFPP_NONE
) {

990 
	`ds_put_c°r
(
°rög
, " out_port=");

991 
	`oÂutû_f‹m©_p‹t
(
f§
.
out_p‹t
, 
°rög
);

994 
	`ds_put_ch¨
(
°rög
, ' ');

995 
	`m©ch_f‹m©
(&
f§
.
m©ch
, 
°rög
, 
OFP_DEFAULT_PRIORITY
);

996 
	}
}

999 
	$oÂ_¥öt_Êow_°©s
(
ds
 *
°rög
, 
oÂutû_Êow_°©s
 *
fs
)

1001 
	`ds_put_f‹m©
(
°rög
, " cookõ=0x%"
PRIx64
", duration=",

1002 
	`¡ohŒ
(
fs
->
cookõ
));

1004 
	`oÂ_¥öt_duøti⁄
(
°rög
, 
fs
->
duøti⁄_£c
, fs->
duøti⁄_n£c
);

1005 
	`ds_put_f‹m©
(
°rög
, ",ÅabÀ=%"
PRIu8
", ", 
fs
->
èbÀ_id
);

1006 
	`ds_put_f‹m©
(
°rög
, "n_∑ckës=%"
PRIu64
", ", 
fs
->
∑ckë_cou¡
);

1007 
	`ds_put_f‹m©
(
°rög
, "n_byãs=%"
PRIu64
", ", 
fs
->
byã_cou¡
);

1008 i‡(
fs
->
idÀ_timeout
 !
OFP_FLOW_PERMANENT
) {

1009 
	`ds_put_f‹m©
(
°rög
, "idÀ_timeout=%"
PRIu16
", ", 
fs
->
idÀ_timeout
);

1011 i‡(
fs
->
h¨d_timeout
 !
OFP_FLOW_PERMANENT
) {

1012 
	`ds_put_f‹m©
(
°rög
, "h¨d_timeout=%"
PRIu16
", ", 
fs
->
h¨d_timeout
);

1014 i‡(
fs
->
idÀ_age
 >= 0) {

1015 
	`ds_put_f‹m©
(
°rög
, "idÀ_age=%d, ", 
fs
->
idÀ_age
);

1017 i‡(
fs
->
h¨d_age
 >0 && fs->h¨d_agê!fs->
duøti⁄_£c
) {

1018 
	`ds_put_f‹m©
(
°rög
, "h¨d_age=%d, ", 
fs
->
h¨d_age
);

1021 
	`m©ch_f‹m©
(&
fs
->
m©ch
, 
°rög
, fs->
¥i‹ôy
);

1022 i‡(
°rög
->°rög[°rög->
Àngth
 - 1] != ' ') {

1023 
	`ds_put_ch¨
(
°rög
, ' ');

1026 
	`oÂa˘s_f‹m©
(
fs
->
oÂa˘s
, fs->
oÂa˘s_Àn
, 
°rög
);

1027 
	}
}

1030 
	$oÂ_¥öt_Êow_°©s_ª∂y
(
ds
 *
°rög
, c⁄° 
oÂ_hódî
 *
oh
)

1032 
oÂbuf
 
oÂa˘s
;

1033 
oÂbuf
 
b
;

1035 
	`oÂbuf_u£_c⁄°
(&
b
, 
oh
, 
	`¡ohs
(oh->
Àngth
));

1036 
	`oÂbuf_öô
(&
oÂa˘s
, 64);

1038 
oÂutû_Êow_°©s
 
fs
;

1039 
ªtvÆ
;

1041 
ªtvÆ
 = 
	`oÂutû_decode_Êow_°©s_ª∂y
(&
fs
, &
b
, 
åue
, &
oÂa˘s
);

1042 i‡(
ªtvÆ
) {

1043 i‡(
ªtvÆ
 !
EOF
) {

1044 
	`ds_put_c°r
(
°rög
, " ***parseÉrror***");

1048 
	`ds_put_ch¨
(
°rög
, '\n');

1049 
	`oÂ_¥öt_Êow_°©s
(
°rög
, &
fs
);

1051 
	`oÂbuf_unöô
(&
oÂa˘s
);

1052 
	}
}

1055 
	$oÂ_¥öt_aggªg©e_°©s_ª∂y
(
ds
 *
°rög
, c⁄° 
oÂ_hódî
 *
oh
)

1057 
oÂutû_aggªg©e_°©s
 
as
;

1058 
oÂîr
 
îr‹
;

1060 
îr‹
 = 
	`oÂutû_decode_aggªg©e_°©s_ª∂y
(&
as
, 
oh
);

1061 i‡(
îr‹
) {

1062 
	`oÂ_¥öt_îr‹
(
°rög
, 
îr‹
);

1066 
	`ds_put_f‹m©
(
°rög
, "Öackë_cou¡=%"
PRIu64
, 
as
.
∑ckë_cou¡
);

1067 
	`ds_put_f‹m©
(
°rög
, " byã_cou¡=%"
PRIu64
, 
as
.
byã_cou¡
);

1068 
	`ds_put_f‹m©
(
°rög
, " flow_cou¡=%"
PRIu32
, 
as
.
Êow_cou¡
);

1069 
	}
}

1072 
	$¥öt_p‹t_°©
(
ds
 *
°rög
, c⁄° *
Àadî
, 
uöt64_t
 
°©
, 
m‹e
)

1074 
	`ds_put_c°r
(
°rög
, 
Àadî
);

1075 i‡(
°©
 !
UINT64_MAX
) {

1076 
	`ds_put_f‹m©
(
°rög
, "%"
PRIu64
, 
°©
);

1078 
	`ds_put_ch¨
(
°rög
, '?');

1080 i‡(
m‹e
) {

1081 
	`ds_put_c°r
(
°rög
, ", ");

1083 
	`ds_put_c°r
(
°rög
, "\n");

1085 
	}
}

1088 
	$oÂ_¥öt_oÂ°_p‹t_ªque°
(
ds
 *
°rög
, c⁄° 
oÂ_hódî
 *
oh
)

1090 
uöt16_t
 
oÂ10_p‹t
;

1091 
oÂîr
 
îr‹
;

1093 
îr‹
 = 
	`oÂutû_decode_p‹t_°©s_ªque°
(
oh
, &
oÂ10_p‹t
);

1094 i‡(
îr‹
) {

1095 
	`oÂ_¥öt_îr‹
(
°rög
, 
îr‹
);

1099 
	`ds_put_f‹m©
(
°rög
, "Ö‹t_no=%2"
PRIu16
, 
oÂ10_p‹t
);

1100 
	}
}

1103 
	$oÂ_¥öt_oÂ°_p‹t_ª∂y
(
ds
 *
°rög
, c⁄° 
oÂ_hódî
 *
oh
,

1104 
vîbosôy
)

1106 
oÂbuf
 
b
;

1108 
	`ds_put_f‹m©
(
°rög
, " %zuÖ‹ts\n", 
	`oÂutû_cou¡_p‹t_°©s
(
oh
));

1109 i‡(
vîbosôy
 < 1) {

1113 
	`oÂbuf_u£_c⁄°
(&
b
, 
oh
, 
	`¡ohs
(oh->
Àngth
));

1115 
oÂutû_p‹t_°©s
 
ps
;

1116 
ªtvÆ
;

1118 
ªtvÆ
 = 
	`oÂutû_decode_p‹t_°©s
(&
ps
, &
b
);

1119 i‡(
ªtvÆ
) {

1120 i‡(
ªtvÆ
 !
EOF
) {

1121 
	`ds_put_c°r
(
°rög
, " ***parseÉrror***");

1126 
	`ds_put_f‹m©
(
°rög
, "Ö‹à%2"
PRIu16
, 
ps
.
p‹t_no
);

1128 
	`ds_put_c°r
(
°rög
, ":Ñx ");

1129 
	`¥öt_p‹t_°©
(
°rög
, "pkts=", 
ps
.
°©s
.
rx_∑ckës
, 1);

1130 
	`¥öt_p‹t_°©
(
°rög
, "byãs=", 
ps
.
°©s
.
rx_byãs
, 1);

1131 
	`¥öt_p‹t_°©
(
°rög
, "dr›=", 
ps
.
°©s
.
rx_dr›≥d
, 1);

1132 
	`¥öt_p‹t_°©
(
°rög
, "îrs=", 
ps
.
°©s
.
rx_îr‹s
, 1);

1133 
	`¥öt_p‹t_°©
(
°rög
, "‰ame=", 
ps
.
°©s
.
rx_‰ame_îr‹s
, 1);

1134 
	`¥öt_p‹t_°©
(
°rög
, "ovî=", 
ps
.
°©s
.
rx_ovî_îr‹s
, 1);

1135 
	`¥öt_p‹t_°©
(
°rög
, "¸c=", 
ps
.
°©s
.
rx_¸c_îr‹s
, 0);

1137 
	`ds_put_c°r
(
°rög
, "Åx ");

1138 
	`¥öt_p‹t_°©
(
°rög
, "pkts=", 
ps
.
°©s
.
tx_∑ckës
, 1);

1139 
	`¥öt_p‹t_°©
(
°rög
, "byãs=", 
ps
.
°©s
.
tx_byãs
, 1);

1140 
	`¥öt_p‹t_°©
(
°rög
, "dr›=", 
ps
.
°©s
.
tx_dr›≥d
, 1);

1141 
	`¥öt_p‹t_°©
(
°rög
, "îrs=", 
ps
.
°©s
.
tx_îr‹s
, 1);

1142 
	`¥öt_p‹t_°©
(
°rög
, "cﬁl=", 
ps
.
°©s
.
cﬁlisi⁄s
, 0);

1144 
	}
}

1147 
	$oÂ_¥öt_⁄e_oÂ°_èbÀ_ª∂y
(
ds
 *
°rög
, 
oÂ_vîsi⁄
 ofp_version,

1148 c⁄° *
«me
, 
oÂ12_èbÀ_°©s
 *
ts
)

1150 
«me_
[
OFP_MAX_TABLE_NAME_LEN
 + 1];

1152 
	`ovs_°æ˝y
(
«me_
, 
«me
, Çame_);

1154 
	`ds_put_f‹m©
(
°rög
, " %d: %-8s: ", 
ts
->
èbÀ_id
, 
«me_
);

1155 
	`ds_put_f‹m©
(
°rög
, "wûd=0x%05"
PRIx64
", ", 
	`¡ohŒ
(
ts
->
wûdˇrds
));

1156 
	`ds_put_f‹m©
(
°rög
, "max=%6"
PRIu32
", ", 
	`¡ohl
(
ts
->
max_íåõs
));

1157 
	`ds_put_f‹m©
(
°rög
, "a˘ive=%"
PRIu32
"\n", 
	`¡ohl
(
ts
->
a˘ive_cou¡
));

1158 
	`ds_put_c°r
(
°rög
, " ");

1159 
	`ds_put_f‹m©
(
°rög
, "lookup=%"
PRIu64
", ", 
	`¡ohŒ
(
ts
->
lookup_cou¡
));

1160 
	`ds_put_f‹m©
(
°rög
, "m©ched=%"
PRIu64
"\n", 
	`¡ohŒ
(
ts
->
m©ched_cou¡
));

1162 i‡(
oÂ_vîsi⁄
 < 
OFP11_VERSION
) {

1166 
	`ds_put_c°r
(
°rög
, " ");

1167 
	`ds_put_f‹m©
(
°rög
, "m©ch=0x%08"
PRIx64
", ", 
	`¡ohŒ
(
ts
->
m©ch
));

1168 
	`ds_put_f‹m©
(
°rög
, "ö°ru˘i⁄s=0x%08"
PRIx32
", ",

1169 
	`¡ohl
(
ts
->
ö°ru˘i⁄s
));

1170 
	`ds_put_f‹m©
(
°rög
, "c⁄fig=0x%08"
PRIx32
"\n", 
	`¡ohl
(
ts
->
c⁄fig
));

1171 
	`ds_put_c°r
(
°rög
, " ");

1172 
	`ds_put_f‹m©
(
°rög
, "wrôe_a˘i⁄s=0x%08"
PRIx32
", ",

1173 
	`¡ohl
(
ts
->
wrôe_a˘i⁄s
));

1174 
	`ds_put_f‹m©
(
°rög
, "≠∂y_a˘i⁄s=0x%08"
PRIx32
"\n",

1175 
	`¡ohl
(
ts
->
≠∂y_a˘i⁄s
));

1177 i‡(
oÂ_vîsi⁄
 < 
OFP12_VERSION
) {

1181 
	`ds_put_c°r
(
°rög
, " ");

1182 
	`ds_put_f‹m©
(
°rög
, "wrôe_£tfõlds=0x%016"
PRIx64
"\n",

1183 
	`¡ohŒ
(
ts
->
wrôe_£tfõlds
));

1184 
	`ds_put_c°r
(
°rög
, " ");

1185 
	`ds_put_f‹m©
(
°rög
, "≠∂y_£tfõlds=0x%016"
PRIx64
"\n",

1186 
	`¡ohŒ
(
ts
->
≠∂y_£tfõlds
));

1187 
	`ds_put_c°r
(
°rög
, " ");

1188 
	`ds_put_f‹m©
(
°rög
, "mëad©a_m©ch=0x%016"
PRIx64
"\n",

1189 
	`¡ohŒ
(
ts
->
mëad©a_m©ch
));

1190 
	`ds_put_c°r
(
°rög
, " ");

1191 
	`ds_put_f‹m©
(
°rög
, "mëad©a_wrôe=0x%016"
PRIx64
"\n",

1192 
	`¡ohŒ
(
ts
->
mëad©a_wrôe
));

1193 
	}
}

1196 
	$oÂ_¥öt_oÂ°_èbÀ_ª∂y12
(
ds
 *
°rög
, c⁄° 
oÂ_hódî
 *
oh
,

1197 
vîbosôy
)

1199 
oÂ12_èbÀ_°©s
 *
ts
;

1200 
oÂbuf
 
b
;

1201 
size_t
 
n
;

1203 
	`oÂbuf_u£_c⁄°
(&
b
, 
oh
, 
	`¡ohs
(oh->
Àngth
));

1204 
	`oÂøw_puŒ_as£π
(&
b
);

1206 
n
 = 
b
.
size
 /  *
ts
;

1207 
	`ds_put_f‹m©
(
°rög
, " %zuÅabÀs\n", 
n
);

1208 i‡(
vîbosôy
 < 1) {

1213 
ts
 = 
	`oÂbuf_åy_puŒ
(&
b
,  *ts);

1214 i‡(!
ts
) {

1218 
	`oÂ_¥öt_⁄e_oÂ°_èbÀ_ª∂y
(
°rög
, 
OFP12_VERSION
, 
ts
->
«me
,Ås);

1220 
	}
}

1223 
	$oÂ_¥öt_oÂ°_èbÀ_ª∂y11
(
ds
 *
°rög
, c⁄° 
oÂ_hódî
 *
oh
,

1224 
vîbosôy
)

1226 
oÂ11_èbÀ_°©s
 *
ts
;

1227 
oÂbuf
 
b
;

1228 
size_t
 
n
;

1230 
	`oÂbuf_u£_c⁄°
(&
b
, 
oh
, 
	`¡ohs
(oh->
Àngth
));

1231 
	`oÂøw_puŒ_as£π
(&
b
);

1233 
n
 = 
b
.
size
 /  *
ts
;

1234 
	`ds_put_f‹m©
(
°rög
, " %zuÅabÀs\n", 
n
);

1235 i‡(
vîbosôy
 < 1) {

1240 
oÂ12_èbÀ_°©s
 
ts12
;

1242 
ts
 = 
	`oÂbuf_åy_puŒ
(&
b
,  *ts);

1243 i‡(!
ts
) {

1247 
ts12
.
èbÀ_id
 = 
ts
->table_id;

1248 
ts12
.
wûdˇrds
 = 
	`ht⁄Œ
(
	`¡ohl
(
ts
->wildcards));

1249 
ts12
.
max_íåõs
 = 
ts
->max_entries;

1250 
ts12
.
a˘ive_cou¡
 = 
ts
->active_count;

1251 
ts12
.
lookup_cou¡
 = 
ts
->lookup_count;

1252 
ts12
.
m©ched_cou¡
 = 
ts
->matched_count;

1253 
ts12
.
m©ch
 = 
	`ht⁄Œ
(
	`¡ohl
(
ts
->match));

1254 
ts12
.
ö°ru˘i⁄s
 = 
ts
->instructions;

1255 
ts12
.
c⁄fig
 = 
ts
->config;

1256 
ts12
.
wrôe_a˘i⁄s
 = 
ts
->write_actions;

1257 
ts12
.
≠∂y_a˘i⁄s
 = 
ts
->apply_actions;

1258 
	`oÂ_¥öt_⁄e_oÂ°_èbÀ_ª∂y
(
°rög
, 
OFP11_VERSION
, 
ts
->
«me
, &
ts12
);

1260 
	}
}

1263 
	$oÂ_¥öt_oÂ°_èbÀ_ª∂y10
(
ds
 *
°rög
, c⁄° 
oÂ_hódî
 *
oh
,

1264 
vîbosôy
)

1266 
oÂ10_èbÀ_°©s
 *
ts
;

1267 
oÂbuf
 
b
;

1268 
size_t
 
n
;

1270 
	`oÂbuf_u£_c⁄°
(&
b
, 
oh
, 
	`¡ohs
(oh->
Àngth
));

1271 
	`oÂøw_puŒ_as£π
(&
b
);

1273 
n
 = 
b
.
size
 /  *
ts
;

1274 
	`ds_put_f‹m©
(
°rög
, " %zuÅabÀs\n", 
n
);

1275 i‡(
vîbosôy
 < 1) {

1280 
oÂ12_èbÀ_°©s
 
ts12
;

1282 
ts
 = 
	`oÂbuf_åy_puŒ
(&
b
,  *ts);

1283 i‡(!
ts
) {

1287 
ts12
.
èbÀ_id
 = 
ts
->table_id;

1288 
ts12
.
wûdˇrds
 = 
	`ht⁄Œ
(
	`¡ohl
(
ts
->wildcards));

1289 
ts12
.
max_íåõs
 = 
ts
->max_entries;

1290 
ts12
.
a˘ive_cou¡
 = 
ts
->active_count;

1291 
ts12
.
lookup_cou¡
 = 
	`gë_32Æig√d_be64
(&
ts
->lookup_count);

1292 
ts12
.
m©ched_cou¡
 = 
	`gë_32Æig√d_be64
(&
ts
->matched_count);

1293 
	`oÂ_¥öt_⁄e_oÂ°_èbÀ_ª∂y
(
°rög
, 
OFP10_VERSION
, 
ts
->
«me
, &
ts12
);

1295 
	}
}

1298 
	$oÂ_¥öt_oÂ°_èbÀ_ª∂y
(
ds
 *
°rög
, c⁄° 
oÂ_hódî
 *
oh
,

1299 
vîbosôy
)

1301 (
oÂ_vîsi⁄
)
oh
->
vîsi⁄
) {

1302 
OFP12_VERSION
:

1303 
	`oÂ_¥öt_oÂ°_èbÀ_ª∂y12
(
°rög
, 
oh
, 
vîbosôy
);

1306 
OFP11_VERSION
:

1307 
	`oÂ_¥öt_oÂ°_èbÀ_ª∂y11
(
°rög
, 
oh
, 
vîbosôy
);

1310 
OFP10_VERSION
:

1311 
	`oÂ_¥öt_oÂ°_èbÀ_ª∂y10
(
°rög
, 
oh
, 
vîbosôy
);

1315 
	`NOT_REACHED
();

1317 
	}
}

1320 
	$oÂ_¥öt_queue_«me
(
ds
 *
°rög
, 
uöt32_t
 
queue_id
)

1322 i‡(
queue_id
 =
OFPQ_ALL
) {

1323 
	`ds_put_c°r
(
°rög
, "ALL");

1325 
	`ds_put_f‹m©
(
°rög
, "%"
PRIu32
, 
queue_id
);

1327 
	}
}

1330 
	$oÂ_¥öt_oÂ°_queue_ªque°
(
ds
 *
°rög
, c⁄° 
oÂ_hódî
 *
oh
)

1332 
oÂutû_queue_°©s_ªque°
 
oq§
;

1333 
oÂîr
 
îr‹
;

1335 
îr‹
 = 
	`oÂutû_decode_queue_°©s_ªque°
(
oh
, &
oq§
);

1336 i‡(
îr‹
) {

1337 
	`ds_put_f‹m©
(
°rög
, "***decodêîr‹: %s***\n", 
	`oÂîr_gë_«me
(
îr‹
));

1341 
	`ds_put_c°r
(
°rög
, "port=");

1342 
	`oÂutû_f‹m©_p‹t
(
oq§
.
p‹t_no
, 
°rög
);

1344 
	`ds_put_c°r
(
°rög
, " queue=");

1345 
	`oÂ_¥öt_queue_«me
(
°rög
, 
oq§
.
queue_id
);

1346 
	}
}

1349 
	$oÂ_¥öt_oÂ°_queue_ª∂y
(
ds
 *
°rög
, c⁄° 
oÂ_hódî
 *
oh
,

1350 
vîbosôy
)

1352 
oÂbuf
 
b
;

1354 
	`ds_put_f‹m©
(
°rög
, " %zu queues\n", 
	`oÂutû_cou¡_queue_°©s
(
oh
));

1355 i‡(
vîbosôy
 < 1) {

1359 
	`oÂbuf_u£_c⁄°
(&
b
, 
oh
, 
	`¡ohs
(oh->
Àngth
));

1361 
oÂutû_queue_°©s
 
qs
;

1362 
ªtvÆ
;

1364 
ªtvÆ
 = 
	`oÂutû_decode_queue_°©s
(&
qs
, &
b
);

1365 i‡(
ªtvÆ
) {

1366 i‡(
ªtvÆ
 !
EOF
) {

1367 
	`ds_put_c°r
(
°rög
, " ***parseÉrror***");

1372 
	`ds_put_c°r
(
°rög
, "Öort ");

1373 
	`oÂutû_f‹m©_p‹t
(
qs
.
p‹t_no
, 
°rög
);

1374 
	`ds_put_c°r
(
°rög
, " queue ");

1375 
	`oÂ_¥öt_queue_«me
(
°rög
, 
qs
.
queue_id
);

1376 
	`ds_put_c°r
(
°rög
, ": ");

1378 
	`¥öt_p‹t_°©
(
°rög
, "byãs=", 
qs
.
°©s
.
tx_byãs
, 1);

1379 
	`¥öt_p‹t_°©
(
°rög
, "pkts=", 
qs
.
°©s
.
tx_∑ckës
, 1);

1380 
	`¥öt_p‹t_°©
(
°rög
, "îr‹s=", 
qs
.
°©s
.
tx_îr‹s
, 0);

1382 
	}
}

1385 
	$oÂ_¥öt_oÂ°_p‹t_desc_ª∂y
(
ds
 *
°rög
,

1386 c⁄° 
oÂ_hódî
 *
oh
)

1388 
oÂbuf
 
b
;

1390 
	`oÂbuf_u£_c⁄°
(&
b
, 
oh
, 
	`¡ohs
(oh->
Àngth
));

1391 
	`oÂøw_puŒ_as£π
(&
b
);

1392 
	`ds_put_ch¨
(
°rög
, '\n');

1393 
	`oÂ_¥öt_phy_p‹ts
(
°rög
, 
oh
->
vîsi⁄
, &
b
);

1394 
	}
}

1397 
	$oÂ_¥öt_°©s_ªque°
(
ds
 *
°rög
, c⁄° 
oÂ_hódî
 *
oh
)

1399 
uöt16_t
 
Êags
 = 
	`oÂmp_Êags
(
oh
);

1401 i‡(
Êags
) {

1402 
	`ds_put_f‹m©
(
°rög
, " ***unknow¿Êag†0x%04"
PRIx16
"***", 
Êags
);

1404 
	}
}

1407 
	$oÂ_¥öt_°©s_ª∂y
(
ds
 *
°rög
, c⁄° 
oÂ_hódî
 *
oh
)

1409 
uöt16_t
 
Êags
 = 
	`oÂmp_Êags
(
oh
);

1411 i‡(
Êags
) {

1412 
	`ds_put_c°r
(
°rög
, " flags=");

1413 i‡(
Êags
 & 
OFPSF_REPLY_MORE
) {

1414 
	`ds_put_c°r
(
°rög
, "[more]");

1415 
Êags
 &~
OFPSF_REPLY_MORE
;

1417 i‡(
Êags
) {

1418 
	`ds_put_f‹m©
(
°rög
, "[***unknow¿Êag†0x%04"
PRIx16
"***]",

1419 
Êags
);

1422 
	}
}

1425 
	$oÂ_¥öt_echo
(
ds
 *
°rög
, c⁄° 
oÂ_hódî
 *
oh
, 
vîbosôy
)

1427 
size_t
 
Àn
 = 
	`¡ohs
(
oh
->
Àngth
);

1429 
	`ds_put_f‹m©
(
°rög
, " %zu byã†o‡∑ylﬂd\n", 
Àn
 -  *
oh
);

1430 i‡(
vîbosôy
 > 1) {

1431 
	`ds_put_hex_dump
(
°rög
, 
oh
 + 1, 
Àn
 -  *oh, 0, 
åue
);

1433 
	}
}

1436 
	$oÂ_¥öt_nxt_rﬁe_mesßge
(
ds
 *
°rög
,

1437 c⁄° 
nx_rﬁe_ªque°
 *
ƒr
)

1439 
rﬁe
 = 
	`¡ohl
(
ƒr
->role);

1441 
	`ds_put_c°r
(
°rög
, "Ñole=");

1442 i‡(
rﬁe
 =
NX_ROLE_OTHER
) {

1443 
	`ds_put_c°r
(
°rög
, "other");

1444 } i‡(
rﬁe
 =
NX_ROLE_MASTER
) {

1445 
	`ds_put_c°r
(
°rög
, "master");

1446 } i‡(
rﬁe
 =
NX_ROLE_SLAVE
) {

1447 
	`ds_put_c°r
(
°rög
, "slave");

1449 
	`ds_put_f‹m©
(
°rög
, "%u", 
rﬁe
);

1451 
	}
}

1454 
	$oÂ_¥öt_nxt_Êow_mod_èbÀ_id
(
ds
 *
°rög
,

1455 c⁄° 
nx_Êow_mod_èbÀ_id
 *
nfmti
)

1457 
	`ds_put_f‹m©
(
°rög
, " %s", 
nfmti
->
£t
 ? "enable" : "disable");

1458 
	}
}

1461 
	$oÂ_¥öt_nxt_£t_Êow_f‹m©
(
ds
 *
°rög
,

1462 c⁄° 
nx_£t_Êow_f‹m©
 *
nsff
)

1464 
uöt32_t
 
f‹m©
 = 
	`¡ohl
(
nsff
->format);

1466 
	`ds_put_c°r
(
°rög
, " format=");

1467 i‡(
	`oÂutû_nx_Êow_f‹m©_is_vÆid
(
f‹m©
)) {

1468 
	`ds_put_c°r
(
°rög
, 
	`oÂutû_nx_Êow_f‹m©_to_°rög
(
f‹m©
));

1470 
	`ds_put_f‹m©
(
°rög
, "%"
PRIu32
, 
f‹m©
);

1472 
	}
}

1475 
	$oÂ_¥öt_nxt_£t_∑ckë_ö_f‹m©
(
ds
 *
°rög
,

1476 c⁄° 
nx_£t_∑ckë_ö_f‹m©
 *
n•f
)

1478 
uöt32_t
 
f‹m©
 = 
	`¡ohl
(
n•f
->format);

1480 
	`ds_put_c°r
(
°rög
, " format=");

1481 i‡(
	`oÂutû_∑ckë_ö_f‹m©_is_vÆid
(
f‹m©
)) {

1482 
	`ds_put_c°r
(
°rög
, 
	`oÂutû_∑ckë_ö_f‹m©_to_°rög
(
f‹m©
));

1484 
	`ds_put_f‹m©
(
°rög
, "%"
PRIu32
, 
f‹m©
);

1486 
	}
}

1489 
	$oÂ_p‹t_ªas⁄_to_°rög
(
oÂ_p‹t_ªas⁄
 
ªas⁄
)

1491 
s
[32];

1493 
ªas⁄
) {

1494 
OFPPR_ADD
:

1497 
OFPPR_DELETE
:

1500 
OFPPR_MODIFY
:

1504 
	`•rötf
(
s
, "%d", (Ë
ªas⁄
);

1505  
s
;

1507 
	}
}

1510 
	$oÂ_¥öt_nxt_£t_async_c⁄fig
(
ds
 *
°rög
,

1511 c⁄° 
nx_async_c⁄fig
 *
«c
)

1513 
i
;

1515 
i
 = 0; i < 2; i++) {

1516 
j
;

1518 
	`ds_put_f‹m©
(
°rög
, "\¿%s:\n", 
i
 == 0 ? "master" : "slave");

1520 
	`ds_put_c°r
(
°rög
, " PACKET_IN:");

1521 
j
 = 0; j < 32; j++) {

1522 i‡(
«c
->
∑ckë_ö_mask
[
i
] & 
	`ht⁄l
(1u << 
j
)) {

1523 
	`ds_put_f‹m©
(
°rög
, " %s",

1524 
	`oÂutû_∑ckë_ö_ªas⁄_to_°rög
(
j
));

1527 i‡(!
«c
->
∑ckë_ö_mask
[
i
]) {

1528 
	`ds_put_c°r
(
°rög
, " (off)");

1530 
	`ds_put_ch¨
(
°rög
, '\n');

1532 
	`ds_put_c°r
(
°rög
, " PORT_STATUS:");

1533 
j
 = 0; j < 32; j++) {

1534 i‡(
«c
->
p‹t_°©us_mask
[
i
] & 
	`ht⁄l
(1u << 
j
)) {

1535 
	`ds_put_f‹m©
(
°rög
, " %s", 
	`oÂ_p‹t_ªas⁄_to_°rög
(
j
));

1538 i‡(!
«c
->
p‹t_°©us_mask
[
i
]) {

1539 
	`ds_put_c°r
(
°rög
, " (off)");

1541 
	`ds_put_ch¨
(
°rög
, '\n');

1543 
	`ds_put_c°r
(
°rög
, " FLOW_REMOVED:");

1544 
j
 = 0; j < 32; j++) {

1545 i‡(
«c
->
Êow_ªmoved_mask
[
i
] & 
	`ht⁄l
(1u << 
j
)) {

1546 
	`ds_put_f‹m©
(
°rög
, " %s",

1547 
	`oÂ_Êow_ªmoved_ªas⁄_to_°rög
(
j
));

1550 i‡(!
«c
->
Êow_ªmoved_mask
[
i
]) {

1551 
	`ds_put_c°r
(
°rög
, " (off)");

1553 
	`ds_put_ch¨
(
°rög
, '\n');

1555 
	}
}

1558 
	$oÂ_¥öt_nxt_£t_c⁄åﬁÀr_id
(
ds
 *
°rög
,

1559 c⁄° 
nx_c⁄åﬁÀr_id
 *
nci
)

1561 
	`ds_put_f‹m©
(
°rög
, " id=%"
PRIu16
, 
	`¡ohs
(
nci
->
c⁄åﬁÀr_id
));

1562 
	}
}

1565 
	$oÂ_¥öt_nxt_Êow_m⁄ô‹_ˇn˚l
(
ds
 *
°rög
,

1566 c⁄° 
oÂ_hódî
 *
oh
)

1568 
	`ds_put_f‹m©
(
°rög
, " id=%"
PRIu32
,

1569 
	`oÂutû_decode_Êow_m⁄ô‹_ˇn˚l
(
oh
));

1570 
	}
}

1573 
	$nx_Êow_m⁄ô‹_Êags_to_«me
(
uöt32_t
 
bô
)

1575 
nx_Êow_m⁄ô‹_Êags
 
fmf
 = 
bô
;

1577 
fmf
) {

1578 
NXFMF_INITIAL
:  "initial";

1579 
NXFMF_ADD
:  "add";

1580 
NXFMF_DELETE
:  "delete";

1581 
NXFMF_MODIFY
:  "modify";

1582 
NXFMF_ACTIONS
:  "actions";

1583 
NXFMF_OWN
:  "own";

1586  
NULL
;

1587 
	}
}

1590 
	$oÂ_¥öt_nx°_Êow_m⁄ô‹_ªque°
(
ds
 *
°rög
,

1591 c⁄° 
oÂ_hódî
 *
oh
)

1593 
oÂbuf
 
b
;

1595 
	`oÂbuf_u£_c⁄°
(&
b
, 
oh
, 
	`¡ohs
(oh->
Àngth
));

1597 
oÂutû_Êow_m⁄ô‹_ªque°
 
ªque°
;

1598 
ªtvÆ
;

1600 
ªtvÆ
 = 
	`oÂutû_decode_Êow_m⁄ô‹_ªque°
(&
ªque°
, &
b
);

1601 i‡(
ªtvÆ
) {

1602 i‡(
ªtvÆ
 !
EOF
) {

1603 
	`oÂ_¥öt_îr‹
(
°rög
, 
ªtvÆ
);

1608 
	`ds_put_f‹m©
(
°rög
, "\¿id=%"
PRIu32
" fœgs=", 
ªque°
.
id
);

1609 
	`oÂ_¥öt_bô_«mes
(
°rög
, 
ªque°
.
Êags
,

1610 
nx_Êow_m⁄ô‹_Êags_to_«me
, ',');

1612 i‡(
ªque°
.
out_p‹t
 !
OFPP_NONE
) {

1613 
	`ds_put_c°r
(
°rög
, " out_port=");

1614 
	`oÂutû_f‹m©_p‹t
(
ªque°
.
out_p‹t
, 
°rög
);

1617 i‡(
ªque°
.
èbÀ_id
 != 0xff) {

1618 
	`ds_put_f‹m©
(
°rög
, "ÅabÀ=%"
PRIu8
, 
ªque°
.
èbÀ_id
);

1621 
	`ds_put_ch¨
(
°rög
, ' ');

1622 
	`m©ch_f‹m©
(&
ªque°
.
m©ch
, 
°rög
, 
OFP_DEFAULT_PRIORITY
);

1623 
	`ds_chomp
(
°rög
, ' ');

1625 
	}
}

1628 
	$oÂ_¥öt_nx°_Êow_m⁄ô‹_ª∂y
(
ds
 *
°rög
,

1629 c⁄° 
oÂ_hódî
 *
oh
)

1631 
uöt64_t
 
oÂa˘s_°ub
[1024 / 8];

1632 
oÂbuf
 
oÂa˘s
;

1633 
oÂbuf
 
b
;

1635 
	`oÂbuf_u£_c⁄°
(&
b
, 
oh
, 
	`¡ohs
(oh->
Àngth
));

1636 
	`oÂbuf_u£_°ub
(&
oÂa˘s
, 
oÂa˘s_°ub
,  ofpacts_stub);

1638 
oÂutû_Êow_upd©e
 
upd©e
;

1639 
m©ch
 match;

1640 
ªtvÆ
;

1642 
upd©e
.
m©ch
 = &match;

1643 
ªtvÆ
 = 
	`oÂutû_decode_Êow_upd©e
(&
upd©e
, &
b
, &
oÂa˘s
);

1644 i‡(
ªtvÆ
) {

1645 i‡(
ªtvÆ
 !
EOF
) {

1646 
	`oÂ_¥öt_îr‹
(
°rög
, 
ªtvÆ
);

1648 
	`oÂbuf_unöô
(&
oÂa˘s
);

1652 
	`ds_put_c°r
(
°rög
, "\nÉvent=");

1653 
upd©e
.
evít
) {

1654 
NXFME_ADDED
:

1655 
	`ds_put_c°r
(
°rög
, "ADDED");

1658 
NXFME_DELETED
:

1659 
	`ds_put_f‹m©
(
°rög
, "DELETEDÑeason=%s",

1660 
	`oÂ_Êow_ªmoved_ªas⁄_to_°rög
(
upd©e
.
ªas⁄
));

1663 
NXFME_MODIFIED
:

1664 
	`ds_put_c°r
(
°rög
, "MODIFIED");

1667 
NXFME_ABBREV
:

1668 
	`ds_put_f‹m©
(
°rög
, "ABBREV xid=0x%"
PRIx32
, 
	`¡ohl
(
upd©e
.
xid
));

1672 
	`ds_put_f‹m©
(
°rög
, "ÅabÀ=%"
PRIu8
, 
upd©e
.
èbÀ_id
);

1673 i‡(
upd©e
.
idÀ_timeout
 !
OFP_FLOW_PERMANENT
) {

1674 
	`ds_put_f‹m©
(
°rög
, " idÀ_timeout=%"
PRIu16
,

1675 
upd©e
.
idÀ_timeout
);

1677 i‡(
upd©e
.
h¨d_timeout
 !
OFP_FLOW_PERMANENT
) {

1678 
	`ds_put_f‹m©
(
°rög
, " h¨d_timeout=%"
PRIu16
,

1679 
upd©e
.
h¨d_timeout
);

1681 
	`ds_put_f‹m©
(
°rög
, " cookõ=%#"
PRIx64
, 
	`¡ohŒ
(
upd©e
.
cookõ
));

1683 
	`ds_put_ch¨
(
°rög
, ' ');

1684 
	`m©ch_f‹m©
(
upd©e
.
m©ch
, 
°rög
, 
OFP_DEFAULT_PRIORITY
);

1686 i‡(
upd©e
.
oÂa˘s_Àn
) {

1687 i‡(
°rög
->°rög[°rög->
Àngth
 - 1] != ' ') {

1688 
	`ds_put_ch¨
(
°rög
, ' ');

1690 
	`oÂa˘s_f‹m©
(
upd©e
.
oÂa˘s
, upd©e.
oÂa˘s_Àn
, 
°rög
);

1693 
	}
}

1696 
	$oÂ_¥öt_vîsi⁄
(c⁄° 
oÂ_hódî
 *
oh
,

1697 
ds
 *
°rög
)

1699 
oh
->
vîsi⁄
) {

1700 
OFP10_VERSION
:

1702 
OFP11_VERSION
:

1703 
	`ds_put_c°r
(
°rög
, " (OF1.1)");

1705 
OFP12_VERSION
:

1706 
	`ds_put_c°r
(
°rög
, " (OF1.2)");

1709 
	`ds_put_f‹m©
(
°rög
, " (OF 0x%02"
PRIx8
")", 
oh
->
vîsi⁄
);

1712 
	`ds_put_f‹m©
(
°rög
, " (xid=0x%"
PRIx32
"):", 
	`¡ohl
(
oh
->
xid
));

1713 
	}
}

1716 
	$oÂ_hódî_to_°rög__
(c⁄° 
oÂ_hódî
 *
oh
, 
oÂøw
 
øw
,

1717 
ds
 *
°rög
)

1719 
	`ds_put_c°r
(
°rög
, 
	`oÂøw_gë_«me
(
øw
));

1720 
	`oÂ_¥öt_vîsi⁄
(
oh
, 
°rög
);

1721 
	}
}

1724 
	$oÂ_to_°rög__
(c⁄° 
oÂ_hódî
 *
oh
, 
oÂøw
 
øw
,

1725 
ds
 *
°rög
, 
vîbosôy
)

1727 c⁄° *
msg
 = 
oh
;

1729 
	`oÂ_hódî_to_°rög__
(
oh
, 
øw
, 
°rög
);

1730 
	`oÂty≥_‰om_oÂøw
(
øw
)) {

1731 
OFPTYPE_HELLO
:

1732 
	`ds_put_ch¨
(
°rög
, '\n');

1733 
	`ds_put_hex_dump
(
°rög
, 
oh
 + 1, 
	`¡ohs
(oh->
Àngth
) -  *oh,

1734 0, 
åue
);

1737 
OFPTYPE_ERROR
:

1738 
	`oÂ_¥öt_îr‹_msg
(
°rög
, 
oh
);

1741 
OFPTYPE_ECHO_REQUEST
:

1742 
OFPTYPE_ECHO_REPLY
:

1743 
	`oÂ_¥öt_echo
(
°rög
, 
oh
, 
vîbosôy
);

1746 
OFPTYPE_FEATURES_REQUEST
:

1749 
OFPTYPE_FEATURES_REPLY
:

1750 
	`oÂ_¥öt_swôch_„©uªs
(
°rög
, 
oh
);

1753 
OFPTYPE_GET_CONFIG_REQUEST
:

1756 
OFPTYPE_GET_CONFIG_REPLY
:

1757 
OFPTYPE_SET_CONFIG
:

1758 
	`oÂ_¥öt_swôch_c⁄fig
(
°rög
, 
	`oÂmsg_body
(
oh
));

1761 
OFPTYPE_PACKET_IN
:

1762 
	`oÂ_¥öt_∑ckë_ö
(
°rög
, 
oh
, 
vîbosôy
);

1765 
OFPTYPE_FLOW_REMOVED
:

1766 
	`oÂ_¥öt_Êow_ªmoved
(
°rög
, 
oh
);

1769 
OFPTYPE_PORT_STATUS
:

1770 
	`oÂ_¥öt_p‹t_°©us
(
°rög
, 
oh
);

1773 
OFPTYPE_PACKET_OUT
:

1774 
	`oÂ_¥öt_∑ckë_out
(
°rög
, 
oh
, 
vîbosôy
);

1777 
OFPTYPE_FLOW_MOD
:

1778 
	`oÂ_¥öt_Êow_mod
(
°rög
, 
oh
, 
vîbosôy
);

1781 
OFPTYPE_PORT_MOD
:

1782 
	`oÂ_¥öt_p‹t_mod
(
°rög
, 
oh
);

1785 
OFPTYPE_BARRIER_REQUEST
:

1786 
OFPTYPE_BARRIER_REPLY
:

1789 
OFPTYPE_DESC_STATS_REQUEST
:

1790 
OFPTYPE_PORT_DESC_STATS_REQUEST
:

1791 
	`oÂ_¥öt_°©s_ªque°
(
°rög
, 
oh
);

1794 
OFPTYPE_FLOW_STATS_REQUEST
:

1795 
OFPTYPE_AGGREGATE_STATS_REQUEST
:

1796 
	`oÂ_¥öt_°©s_ªque°
(
°rög
, 
oh
);

1797 
	`oÂ_¥öt_Êow_°©s_ªque°
(
°rög
, 
oh
);

1800 
OFPTYPE_TABLE_STATS_REQUEST
:

1801 
	`oÂ_¥öt_°©s_ªque°
(
°rög
, 
oh
);

1804 
OFPTYPE_PORT_STATS_REQUEST
:

1805 
	`oÂ_¥öt_°©s_ªque°
(
°rög
, 
oh
);

1806 
	`oÂ_¥öt_oÂ°_p‹t_ªque°
(
°rög
, 
oh
);

1809 
OFPTYPE_QUEUE_STATS_REQUEST
:

1810 
	`oÂ_¥öt_°©s_ªque°
(
°rög
, 
oh
);

1811 
	`oÂ_¥öt_oÂ°_queue_ªque°
(
°rög
, 
oh
);

1814 
OFPTYPE_DESC_STATS_REPLY
:

1815 
	`oÂ_¥öt_°©s_ª∂y
(
°rög
, 
oh
);

1816 
	`oÂ_¥öt_oÂ°_desc_ª∂y
(
°rög
, 
oh
);

1819 
OFPTYPE_FLOW_STATS_REPLY
:

1820 
	`oÂ_¥öt_°©s_ª∂y
(
°rög
, 
oh
);

1821 
	`oÂ_¥öt_Êow_°©s_ª∂y
(
°rög
, 
oh
);

1824 
OFPTYPE_QUEUE_STATS_REPLY
:

1825 
	`oÂ_¥öt_°©s_ª∂y
(
°rög
, 
oh
);

1826 
	`oÂ_¥öt_oÂ°_queue_ª∂y
(
°rög
, 
oh
, 
vîbosôy
);

1829 
OFPTYPE_PORT_STATS_REPLY
:

1830 
	`oÂ_¥öt_°©s_ª∂y
(
°rög
, 
oh
);

1831 
	`oÂ_¥öt_oÂ°_p‹t_ª∂y
(
°rög
, 
oh
, 
vîbosôy
);

1834 
OFPTYPE_TABLE_STATS_REPLY
:

1835 
	`oÂ_¥öt_°©s_ª∂y
(
°rög
, 
oh
);

1836 
	`oÂ_¥öt_oÂ°_èbÀ_ª∂y
(
°rög
, 
oh
, 
vîbosôy
);

1839 
OFPTYPE_AGGREGATE_STATS_REPLY
:

1840 
	`oÂ_¥öt_°©s_ª∂y
(
°rög
, 
oh
);

1841 
	`oÂ_¥öt_aggªg©e_°©s_ª∂y
(
°rög
, 
oh
);

1844 
OFPTYPE_PORT_DESC_STATS_REPLY
:

1845 
	`oÂ_¥öt_°©s_ª∂y
(
°rög
, 
oh
);

1846 
	`oÂ_¥öt_oÂ°_p‹t_desc_ª∂y
(
°rög
, 
oh
);

1849 
OFPTYPE_ROLE_REQUEST
:

1850 
OFPTYPE_ROLE_REPLY
:

1851 
	`oÂ_¥öt_nxt_rﬁe_mesßge
(
°rög
, 
	`oÂmsg_body
(
oh
));

1854 
OFPTYPE_FLOW_MOD_TABLE_ID
:

1855 
	`oÂ_¥öt_nxt_Êow_mod_èbÀ_id
(
°rög
, 
	`oÂmsg_body
(
oh
));

1858 
OFPTYPE_SET_FLOW_FORMAT
:

1859 
	`oÂ_¥öt_nxt_£t_Êow_f‹m©
(
°rög
, 
	`oÂmsg_body
(
oh
));

1862 
OFPTYPE_SET_PACKET_IN_FORMAT
:

1863 
	`oÂ_¥öt_nxt_£t_∑ckë_ö_f‹m©
(
°rög
, 
	`oÂmsg_body
(
oh
));

1866 
OFPTYPE_FLOW_AGE
:

1869 
OFPTYPE_SET_CONTROLLER_ID
:

1870 
	`oÂ_¥öt_nxt_£t_c⁄åﬁÀr_id
(
°rög
, 
	`oÂmsg_body
(
oh
));

1873 
OFPTYPE_SET_ASYNC_CONFIG
:

1874 
	`oÂ_¥öt_nxt_£t_async_c⁄fig
(
°rög
, 
	`oÂmsg_body
(
oh
));

1877 
OFPTYPE_FLOW_MONITOR_CANCEL
:

1878 
	`oÂ_¥öt_nxt_Êow_m⁄ô‹_ˇn˚l
(
°rög
, 
msg
);

1881 
OFPTYPE_FLOW_MONITOR_PAUSED
:

1882 
OFPTYPE_FLOW_MONITOR_RESUMED
:

1885 
OFPTYPE_FLOW_MONITOR_STATS_REQUEST
:

1886 
	`oÂ_¥öt_nx°_Êow_m⁄ô‹_ªque°
(
°rög
, 
msg
);

1889 
OFPTYPE_FLOW_MONITOR_STATS_REPLY
:

1890 
	`oÂ_¥öt_nx°_Êow_m⁄ô‹_ª∂y
(
°rög
, 
msg
);

1893 
	}
}

1900 
	$oÂ_to_°rög
(c⁄° *
oh_
, 
size_t
 
Àn
, 
vîbosôy
)

1902 
ds
 
°rög
 = 
DS_EMPTY_INITIALIZER
;

1903 c⁄° 
oÂ_hódî
 *
oh
 = 
oh_
;

1905 i‡(!
Àn
) {

1906 
	`ds_put_c°r
(&
°rög
, "OpenFlow message isÉmpty\n");

1907 } i‡(
Àn
 < (
oÂ_hódî
)) {

1908 
	`ds_put_f‹m©
(&
°rög
, "OpenFlowÖacketÅoo short (only %zu bytes):\n",

1909 
Àn
);

1910 } i‡(
	`¡ohs
(
oh
->
Àngth
Ë> 
Àn
) {

1911 
oÂîr
 
îr‹
;

1912 
oÂøw
 
øw
;

1914 
îr‹
 = 
	`oÂøw_decode_∑πül
(&
øw
, 
oh
, 
Àn
);

1915 i‡(!
îr‹
) {

1916 
	`oÂ_hódî_to_°rög__
(
oh
, 
øw
, &
°rög
);

1917 
	`ds_put_ch¨
(&
°rög
, '\n');

1920 
	`ds_put_f‹m©
(&
°rög
,

1921 "(***åunˇãdÅÿ%zu byã†‰om %"
PRIu16
"***)\n",

1922 
Àn
, 
	`¡ohs
(
oh
->
Àngth
));

1923 } i‡(
	`¡ohs
(
oh
->
Àngth
Ë< 
Àn
) {

1924 
	`ds_put_f‹m©
(&
°rög
,

1925 "(***⁄ly u£†%"
PRIu16
" bytes out of %zu***)\n",

1926 
	`¡ohs
(
oh
->
Àngth
), 
Àn
);

1928 
oÂîr
 
îr‹
;

1929 
oÂøw
 
øw
;

1931 
îr‹
 = 
	`oÂøw_decode
(&
øw
, 
oh
);

1932 i‡(!
îr‹
) {

1933 
	`oÂ_to_°rög__
(
oh
, 
øw
, &
°rög
, 
vîbosôy
);

1934 i‡(
vîbosôy
 >= 5) {

1935 i‡(
	`ds_œ°
(&
°rög
) != '\n') {

1936 
	`ds_put_ch¨
(&
°rög
, '\n');

1938 
	`ds_put_hex_dump
(&
°rög
, 
oh
, 
Àn
, 0, 
åue
);

1940 i‡(
	`ds_œ°
(&
°rög
) != '\n') {

1941 
	`ds_put_ch¨
(&
°rög
, '\n');

1943  
	`ds_°ól_c°r
(&
°rög
);

1946 
	`oÂ_¥öt_îr‹
(&
°rög
, 
îr‹
);

1948 
	`ds_put_hex_dump
(&
°rög
, 
oh
, 
Àn
, 0, 
åue
);

1949  
	`ds_°ól_c°r
(&
°rög
);

1950 
	}
}

1953 
	$¥öt_™d_‰ì
(
FILE
 *
°ªam
, *
°rög
)

1955 
	`Âuts
(
°rög
, 
°ªam
);

1956 
	`‰ì
(
°rög
);

1957 
	}
}

1963 
	$oÂ_¥öt
(
FILE
 *
°ªam
, c⁄° *
oh
, 
size_t
 
Àn
, 
vîbosôy
)

1965 
	`¥öt_™d_‰ì
(
°ªam
, 
	`oÂ_to_°rög
(
oh
, 
Àn
, 
vîbosôy
));

1966 
	}
}

1971 
	$oÂ_¥öt_∑ckë
(
FILE
 *
°ªam
, c⁄° *
d©a
, 
size_t
 
Àn
)

1973 
	`¥öt_™d_‰ì
(
°ªam
, 
	`oÂ_∑ckë_to_°rög
(
d©a
, 
Àn
));

1974 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/ofp-print.h

19 #i‚de‡
OFP_PRINT_H


20 
	#OFP_PRINT_H
 1

	)

22 
	~<°döt.h
>

23 
	~<°dio.h
>

25 
	gds
;

26 
	goÂ10_m©ch
;

27 
	goÂ_Êow_mod
;

28 
	goÂ_hódî
;

29 
	goÂutû_Êow_°©s
;

31 #ifde‡ 
__˝lu•lus


35 
oÂ_¥öt
(
FILE
 *, c⁄° *, 
size_t
, 
vîbosôy
);

36 
oÂ_¥öt_∑ckë
(
FILE
 *
°ªam
, c⁄° *
d©a
, 
size_t
 
Àn
);

38 
oÂ10_m©ch_¥öt
(
ds
 *, c⁄° 
oÂ10_m©ch
 *, 
vîbosôy
);

40 *
oÂ_to_°rög
(c⁄° *, 
size_t
, 
vîbosôy
);

41 *
oÂ10_m©ch_to_°rög
(c⁄° 
oÂ10_m©ch
 *, 
vîbosôy
);

42 *
oÂ_∑ckë_to_°rög
(c⁄° *
d©a
, 
size_t
 
Àn
);

44 
oÂ_¥öt_Êow_°©s
(
ds
 *, 
oÂutû_Êow_°©s
 *);

45 
oÂ_¥öt_vîsi⁄
(c⁄° 
oÂ_hódî
 *, 
ds
 *);

47 #ifde‡ 
__˝lu•lus


	@/home/lsch/mytest/openvswitch-1.9.0/lib/ofp-util.c

17 
	~<c⁄fig.h
>

18 
	~"oÂ-¥öt.h
"

19 
	~<î∫o.h
>

20 
	~<öây≥s.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<√töë/ö.h
>

23 
	~<√töë/icmp6.h
>

24 
	~<°dlib.h
>

25 
	~"aut›©h.h
"

26 
	~"bundÀ.h
"

27 
	~"byã-‹dî.h
"

28 
	~"˛assifõr.h
"

29 
	~"dy«mic-°rög.h
"

30 
	~"À¨n.h
"

31 
	~"mëa-Êow.h
"

32 
	~"mu…ù©h.h
"

33 
	~"√tdev.h
"

34 
	~"nx-m©ch.h
"

35 
	~"oÂ-a˘i⁄s.h
"

36 
	~"oÂ-îr‹s.h
"

37 
	~"oÂ-msgs.h
"

38 
	~"oÂ-utû.h
"

39 
	~"oÂbuf.h
"

40 
	~"∑ckës.h
"

41 
	~"øndom.h
"

42 
	~"u«lig√d.h
"

43 
	~"ty≥-¥›s.h
"

44 
	~"vlog.h
"

46 
VLOG_DEFINE_THIS_MODULE
(
oÂ_utû
);

50 
vlog_øã_limô
 
	gbad_ofmsg_æ
 = 
VLOG_RATE_LIMIT_INIT
(1, 5);

61 
ovs_be32


62 
	$oÂutû_wcbôs_to_√tmask
(
wcbôs
)

64 
wcbôs
 &= 0x3f;

65  
wcbôs
 < 32 ? 
	`ht⁄l
(~((1u << wcbits) - 1)) : 0;

66 
	}
}

75 
	$oÂutû_√tmask_to_wcbôs
(
ovs_be32
 
√tmask
)

77  32 - 
	`ù_cou¡_cidr_bôs
(
√tmask
);

78 
	}
}

85 
	$oÂutû_wûdˇrd_‰om_oÂfw10
(
uöt32_t
 
oÂfw
, 
Êow_wûdˇrds
 *
wc
)

87 
	`BUILD_ASSERT_DECL
(
FLOW_WC_SEQ
 == 18);

90 
	`Êow_wûdˇrds_öô_ˇtchÆl
(
wc
);

92 i‡(!(
oÂfw
 & 
OFPFW10_IN_PORT
)) {

93 
wc
->
masks
.
ö_p‹t
 = 
UINT16_MAX
;

96 i‡(!(
oÂfw
 & 
OFPFW10_NW_TOS
)) {

97 
wc
->
masks
.
nw_tos
 |
IP_DSCP_MASK
;

100 i‡(!(
oÂfw
 & 
OFPFW10_NW_PROTO
)) {

101 
wc
->
masks
.
nw_¥Ÿo
 = 
UINT8_MAX
;

103 
wc
->
masks
.
nw_§c
 = 
	`oÂutû_wcbôs_to_√tmask
(
oÂfw


104 >> 
OFPFW10_NW_SRC_SHIFT
);

105 
wc
->
masks
.
nw_d°
 = 
	`oÂutû_wcbôs_to_√tmask
(
oÂfw


106 >> 
OFPFW10_NW_DST_SHIFT
);

108 i‡(!(
oÂfw
 & 
OFPFW10_TP_SRC
)) {

109 
wc
->
masks
.
ç_§c
 = 
	`ht⁄s
(
UINT16_MAX
);

111 i‡(!(
oÂfw
 & 
OFPFW10_TP_DST
)) {

112 
wc
->
masks
.
ç_d°
 = 
	`ht⁄s
(
UINT16_MAX
);

115 i‡(!(
oÂfw
 & 
OFPFW10_DL_SRC
)) {

116 
	`mem£t
(
wc
->
masks
.
dl_§c
, 0xff, 
ETH_ADDR_LEN
);

118 i‡(!(
oÂfw
 & 
OFPFW10_DL_DST
)) {

119 
	`mem£t
(
wc
->
masks
.
dl_d°
, 0xff, 
ETH_ADDR_LEN
);

121 i‡(!(
oÂfw
 & 
OFPFW10_DL_TYPE
)) {

122 
wc
->
masks
.
dl_ty≥
 = 
	`ht⁄s
(
UINT16_MAX
);

126 i‡(!(
oÂfw
 & 
OFPFW10_DL_VLAN_PCP
)) {

127 
wc
->
masks
.
vœn_tci
 |
	`ht⁄s
(
VLAN_PCP_MASK
 | 
VLAN_CFI
);

129 i‡(!(
oÂfw
 & 
OFPFW10_DL_VLAN
)) {

130 
wc
->
masks
.
vœn_tci
 |
	`ht⁄s
(
VLAN_VID_MASK
 | 
VLAN_CFI
);

132 
	}
}

136 
	$oÂutû_m©ch_‰om_oÂ10_m©ch
(c⁄° 
oÂ10_m©ch
 *
ofm©ch
,

137 
m©ch
 *match)

139 
uöt32_t
 
oÂfw
 = 
	`¡ohl
(
ofm©ch
->
wûdˇrds
Ë& 
OFPFW10_ALL
;

142 
	`mem£t
(&
m©ch
->
Êow
, 0,  match->flow);

143 
	`oÂutû_wûdˇrd_‰om_oÂfw10
(
oÂfw
, &
m©ch
->
wc
);

146 
m©ch
->
Êow
.
nw_§c
 = 
ofm©ch
->nw_src;

147 
m©ch
->
Êow
.
nw_d°
 = 
ofm©ch
->nw_dst;

148 
m©ch
->
Êow
.
ö_p‹t
 = 
	`¡ohs
(
ofm©ch
->in_port);

149 
m©ch
->
Êow
.
dl_ty≥
 = 
	`oÂutû_dl_ty≥_‰om_›íÊow
(
ofm©ch
->dl_type);

150 
m©ch
->
Êow
.
ç_§c
 = 
ofm©ch
->tp_src;

151 
m©ch
->
Êow
.
ç_d°
 = 
ofm©ch
->tp_dst;

152 
	`mem˝y
(
m©ch
->
Êow
.
dl_§c
, 
ofm©ch
->dl_§c, 
ETH_ADDR_LEN
);

153 
	`mem˝y
(
m©ch
->
Êow
.
dl_d°
, 
ofm©ch
->dl_d°, 
ETH_ADDR_LEN
);

154 
m©ch
->
Êow
.
nw_tos
 = 
ofm©ch
->nw_to†& 
IP_DSCP_MASK
;

155 
m©ch
->
Êow
.
nw_¥Ÿo
 = 
ofm©ch
->nw_proto;

158 i‡(!(
oÂfw
 & 
OFPFW10_DL_VLAN
) &&

159 
ofm©ch
->
dl_vœn
 =
	`ht⁄s
(
OFP10_VLAN_NONE
)) {

168 
m©ch
->
Êow
.
vœn_tci
 = 
	`ht⁄s
(0);

169 
m©ch
->
wc
.
masks
.
vœn_tci
 = 
	`ht⁄s
(0xffff);

171 
ovs_be16
 
vid
, 
p˝
, 
tci
;

173 
vid
 = 
ofm©ch
->
dl_vœn
 & 
	`ht⁄s
(
VLAN_VID_MASK
);

174 
p˝
 = 
	`ht⁄s
((
ofm©ch
->
dl_vœn_p˝
 << 
VLAN_PCP_SHIFT
Ë& 
VLAN_PCP_MASK
);

175 
tci
 = 
vid
 | 
p˝
 | 
	`ht⁄s
(
VLAN_CFI
);

176 
m©ch
->
Êow
.
vœn_tci
 = 
tci
 & m©ch->
wc
.
masks
.vlan_tci;

180 
	`m©ch_zîo_wûdˇrded_fõlds
(
m©ch
);

181 
	}
}

185 
	$oÂutû_m©ch_to_oÂ10_m©ch
(c⁄° 
m©ch
 *match,

186 
oÂ10_m©ch
 *
ofm©ch
)

188 c⁄° 
Êow_wûdˇrds
 *
wc
 = &
m©ch
->wc;

189 
uöt32_t
 
oÂfw
;

192 
oÂfw
 = 0;

193 i‡(!
wc
->
masks
.
ö_p‹t
) {

194 
oÂfw
 |
OFPFW10_IN_PORT
;

196 i‡(!
wc
->
masks
.
dl_ty≥
) {

197 
oÂfw
 |
OFPFW10_DL_TYPE
;

199 i‡(!
wc
->
masks
.
nw_¥Ÿo
) {

200 
oÂfw
 |
OFPFW10_NW_PROTO
;

202 
oÂfw
 |(
	`oÂutû_√tmask_to_wcbôs
(
wc
->
masks
.
nw_§c
)

203 << 
OFPFW10_NW_SRC_SHIFT
);

204 
oÂfw
 |(
	`oÂutû_√tmask_to_wcbôs
(
wc
->
masks
.
nw_d°
)

205 << 
OFPFW10_NW_DST_SHIFT
);

206 i‡(!(
wc
->
masks
.
nw_tos
 & 
IP_DSCP_MASK
)) {

207 
oÂfw
 |
OFPFW10_NW_TOS
;

209 i‡(!
wc
->
masks
.
ç_§c
) {

210 
oÂfw
 |
OFPFW10_TP_SRC
;

212 i‡(!
wc
->
masks
.
ç_d°
) {

213 
oÂfw
 |
OFPFW10_TP_DST
;

215 i‡(
	`ëh_addr_is_zîo
(
wc
->
masks
.
dl_§c
)) {

216 
oÂfw
 |
OFPFW10_DL_SRC
;

218 i‡(
	`ëh_addr_is_zîo
(
wc
->
masks
.
dl_d°
)) {

219 
oÂfw
 |
OFPFW10_DL_DST
;

223 
ofm©ch
->
dl_vœn
 = 
	`ht⁄s
(0);

224 
ofm©ch
->
dl_vœn_p˝
 = 0;

225 i‡(
m©ch
->
wc
.
masks
.
vœn_tci
 =
	`ht⁄s
(0)) {

226 
oÂfw
 |
OFPFW10_DL_VLAN
 | 
OFPFW10_DL_VLAN_PCP
;

227 } i‡(
m©ch
->
wc
.
masks
.
vœn_tci
 & 
	`ht⁄s
(
VLAN_CFI
)

228 && !(
m©ch
->
Êow
.
vœn_tci
 & 
	`ht⁄s
(
VLAN_CFI
))) {

229 
ofm©ch
->
dl_vœn
 = 
	`ht⁄s
(
OFP10_VLAN_NONE
);

230 
oÂfw
 |
OFPFW10_DL_VLAN_PCP
;

232 i‡(!(
m©ch
->
wc
.
masks
.
vœn_tci
 & 
	`ht⁄s
(
VLAN_VID_MASK
))) {

233 
oÂfw
 |
OFPFW10_DL_VLAN
;

235 
ofm©ch
->
dl_vœn
 = 
	`ht⁄s
(
	`vœn_tci_to_vid
(
m©ch
->
Êow
.
vœn_tci
));

238 i‡(!(
m©ch
->
wc
.
masks
.
vœn_tci
 & 
	`ht⁄s
(
VLAN_PCP_MASK
))) {

239 
oÂfw
 |
OFPFW10_DL_VLAN_PCP
;

241 
ofm©ch
->
dl_vœn_p˝
 = 
	`vœn_tci_to_p˝
(
m©ch
->
Êow
.
vœn_tci
);

246 
ofm©ch
->
wûdˇrds
 = 
	`ht⁄l
(
oÂfw
);

247 
ofm©ch
->
ö_p‹t
 = 
	`ht⁄s
(
m©ch
->
Êow
.in_port);

248 
	`mem˝y
(
ofm©ch
->
dl_§c
, 
m©ch
->
Êow
.dl_§c, 
ETH_ADDR_LEN
);

249 
	`mem˝y
(
ofm©ch
->
dl_d°
, 
m©ch
->
Êow
.dl_d°, 
ETH_ADDR_LEN
);

250 
ofm©ch
->
dl_ty≥
 = 
	`oÂutû_dl_ty≥_to_›íÊow
(
m©ch
->
Êow
.dl_type);

251 
ofm©ch
->
nw_§c
 = 
m©ch
->
Êow
.nw_src;

252 
ofm©ch
->
nw_d°
 = 
m©ch
->
Êow
.nw_dst;

253 
ofm©ch
->
nw_tos
 = 
m©ch
->
Êow
.nw_to†& 
IP_DSCP_MASK
;

254 
ofm©ch
->
nw_¥Ÿo
 = 
m©ch
->
Êow
.nw_proto;

255 
ofm©ch
->
ç_§c
 = 
m©ch
->
Êow
.tp_src;

256 
ofm©ch
->
ç_d°
 = 
m©ch
->
Êow
.tp_dst;

257 
	`mem£t
(
ofm©ch
->
∑d1
, '\0',  ofmatch->pad1);

258 
	`mem£t
(
ofm©ch
->
∑d2
, '\0',  ofmatch->pad2);

259 
	}
}

261 
oÂîr


262 
	$oÂutû_puŒ_oÂ11_m©ch
(
oÂbuf
 *
buf
, 
m©ch
 *match,

263 
uöt16_t
 *
∑dded_m©ch_Àn
)

265 
oÂ11_m©ch_hódî
 *
omh
 = 
buf
->
d©a
;

266 
uöt16_t
 
m©ch_Àn
;

268 i‡(
buf
->
size
 <  *
omh
) {

269  
OFPERR_OFPBMC_BAD_LEN
;

272 
m©ch_Àn
 = 
	`¡ohs
(
omh
->
Àngth
);

274 
	`¡ohs
(
omh
->
ty≥
)) {

275 
OFPMT_STANDARD
: {

276 
oÂ11_m©ch
 *
om
;

278 i‡(
m©ch_Àn
 ! *
om
 || 
buf
->
size
 <  *om) {

279  
OFPERR_OFPBMC_BAD_LEN
;

281 
om
 = 
	`oÂbuf_puŒ
(
buf
,  *om);

282 i‡(
∑dded_m©ch_Àn
) {

283 *
∑dded_m©ch_Àn
 = 
m©ch_Àn
;

285  
	`oÂutû_m©ch_‰om_oÂ11_m©ch
(
om
, 
m©ch
);

288 
OFPMT_OXM
:

289 i‡(
∑dded_m©ch_Àn
) {

290 *
∑dded_m©ch_Àn
 = 
	`ROUND_UP
(
m©ch_Àn
, 8);

292  
	`oxm_puŒ_m©ch
(
buf
, 
m©ch
);

295  
OFPERR_OFPBMC_BAD_TYPE
;

297 
	}
}

301 
oÂîr


302 
	$oÂutû_m©ch_‰om_oÂ11_m©ch
(c⁄° 
oÂ11_m©ch
 *
ofm©ch
,

303 
m©ch
 *match)

305 
uöt16_t
 
wc
 = 
	`¡ohl
(
ofm©ch
->
wûdˇrds
);

306 
uöt8_t
 
dl_§c_mask
[
ETH_ADDR_LEN
];

307 
uöt8_t
 
dl_d°_mask
[
ETH_ADDR_LEN
];

308 
boﬁ
 
ùv4
, 
¨p
, 
øΩ
;

309 
i
;

311 
	`m©ch_öô_ˇtchÆl
(
m©ch
);

313 i‡(!(
wc
 & 
OFPFW11_IN_PORT
)) {

314 
uöt16_t
 
oÂ_p‹t
;

315 
oÂîr
 
îr‹
;

317 
îr‹
 = 
	`oÂutû_p‹t_‰om_oÂ11
(
ofm©ch
->
ö_p‹t
, &
oÂ_p‹t
);

318 i‡(
îr‹
) {

319  
OFPERR_OFPBMC_BAD_VALUE
;

321 
	`m©ch_£t_ö_p‹t
(
m©ch
, 
oÂ_p‹t
);

324 
i
 = 0; i < 
ETH_ADDR_LEN
; i++) {

325 
dl_§c_mask
[
i
] = ~
ofm©ch
->dl_src_mask[i];

327 
	`m©ch_£t_dl_§c_masked
(
m©ch
, 
ofm©ch
->
dl_§c
, 
dl_§c_mask
);

329 
i
 = 0; i < 
ETH_ADDR_LEN
; i++) {

330 
dl_d°_mask
[
i
] = ~
ofm©ch
->dl_dst_mask[i];

332 
	`m©ch_£t_dl_d°_masked
(
m©ch
, 
ofm©ch
->
dl_d°
, 
dl_d°_mask
);

334 i‡(!(
wc
 & 
OFPFW11_DL_VLAN
)) {

335 i‡(
ofm©ch
->
dl_vœn
 =
	`ht⁄s
(
OFPVID11_NONE
)) {

337 
m©ch
->
Êow
.
vœn_tci
 = 
	`ht⁄s
(0);

338 
m©ch
->
wc
.
masks
.
vœn_tci
 = 
	`ht⁄s
(
UINT16_MAX
);

340 i‡(
ofm©ch
->
dl_vœn
 =
	`ht⁄s
(
OFPVID11_ANY
)) {

342 
m©ch
->
Êow
.
vœn_tci
 = 
	`ht⁄s
(
VLAN_CFI
);

343 
m©ch
->
wc
.
masks
.
vœn_tci
 = 
	`ht⁄s
(
VLAN_CFI
);

344 } i‡(
	`¡ohs
(
ofm©ch
->
dl_vœn
) < 4096) {

346 
m©ch
->
Êow
.
vœn_tci
 = 
	`ht⁄s
(
VLAN_CFI
Ë| 
ofm©ch
->
dl_vœn
;

347 
m©ch
->
wc
.
masks
.
vœn_tci
 = 
	`ht⁄s
(
VLAN_CFI
 | 
VLAN_VID_MASK
);

350  
OFPERR_OFPBMC_BAD_VALUE
;

353 i‡(!(
wc
 & 
OFPFW11_DL_VLAN_PCP
)) {

354 i‡(
ofm©ch
->
dl_vœn_p˝
 <= 7) {

355 
m©ch
->
Êow
.
vœn_tci
 |
	`ht⁄s
(
ofm©ch
->
dl_vœn_p˝


356 << 
VLAN_PCP_SHIFT
);

357 
m©ch
->
wc
.
masks
.
vœn_tci
 |
	`ht⁄s
(
VLAN_PCP_MASK
);

360  
OFPERR_OFPBMC_BAD_VALUE
;

366 i‡(!(
wc
 & 
OFPFW11_DL_TYPE
)) {

367 
	`m©ch_£t_dl_ty≥
(
m©ch
,

368 
	`oÂutû_dl_ty≥_‰om_›íÊow
(
ofm©ch
->
dl_ty≥
));

371 
ùv4
 = 
m©ch
->
Êow
.
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IP
);

372 
¨p
 = 
m©ch
->
Êow
.
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_ARP
);

373 
øΩ
 = 
m©ch
->
Êow
.
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_RARP
);

375 i‡(
ùv4
 && !(
wc
 & 
OFPFW11_NW_TOS
)) {

376 i‡(
ofm©ch
->
nw_tos
 & ~
IP_DSCP_MASK
) {

378  
OFPERR_OFPBMC_BAD_VALUE
;

381 
	`m©ch_£t_nw_ds˝
(
m©ch
, 
ofm©ch
->
nw_tos
);

384 i‡(
ùv4
 || 
¨p
 || 
øΩ
) {

385 i‡(!(
wc
 & 
OFPFW11_NW_PROTO
)) {

386 
	`m©ch_£t_nw_¥Ÿo
(
m©ch
, 
ofm©ch
->
nw_¥Ÿo
);

388 
	`m©ch_£t_nw_§c_masked
(
m©ch
, 
ofm©ch
->
nw_§c
, ~ofm©ch->
nw_§c_mask
);

389 
	`m©ch_£t_nw_d°_masked
(
m©ch
, 
ofm©ch
->
nw_d°
, ~ofm©ch->
nw_d°_mask
);

392 
	#OFPFW11_TP_ALL
 (
OFPFW11_TP_SRC
 | 
OFPFW11_TP_DST
)

	)

393 i‡(
ùv4
 && (
wc
 & 
OFPFW11_TP_ALL
) != OFPFW11_TP_ALL) {

394 
m©ch
->
Êow
.
nw_¥Ÿo
) {

395 
IPPROTO_ICMP
:

403 i‡(!(
wc
 & 
OFPFW11_TP_SRC
)) {

404 
uöt16_t
 
icmp_ty≥
 = 
	`¡ohs
(
ofm©ch
->
ç_§c
);

405 i‡(
icmp_ty≥
 < 0x100) {

406 
	`m©ch_£t_icmp_ty≥
(
m©ch
, 
icmp_ty≥
);

408  
OFPERR_OFPBMC_BAD_FIELD
;

411 i‡(!(
wc
 & 
OFPFW11_TP_DST
)) {

412 
uöt16_t
 
icmp_code
 = 
	`¡ohs
(
ofm©ch
->
ç_d°
);

413 i‡(
icmp_code
 < 0x100) {

414 
	`m©ch_£t_icmp_code
(
m©ch
, 
icmp_code
);

416  
OFPERR_OFPBMC_BAD_FIELD
;

421 
IPPROTO_TCP
:

422 
IPPROTO_UDP
:

423 i‡(!(
wc
 & (
OFPFW11_TP_SRC
))) {

424 
	`m©ch_£t_ç_§c
(
m©ch
, 
ofm©ch
->
ç_§c
);

426 i‡(!(
wc
 & (
OFPFW11_TP_DST
))) {

427 
	`m©ch_£t_ç_d°
(
m©ch
, 
ofm©ch
->
ç_d°
);

431 
IPPROTO_SCTP
:

434  
OFPERR_OFPBMC_BAD_FIELD
;

442 i‡(
m©ch
->
Êow
.
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_MPLS
) ||

443 
m©ch
->
Êow
.
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_MPLS_MCAST
)) {

444 íum { 
OFPFW11_MPLS_ALL
 = 
OFPFW11_MPLS_LABEL
 | 
OFPFW11_MPLS_TC
 };

446 i‡((
wc
 & 
OFPFW11_MPLS_ALL
) != OFPFW11_MPLS_ALL) {

448  
OFPERR_OFPBMC_BAD_TAG
;

452 
	`m©ch_£t_mëad©a_masked
(
m©ch
, 
ofm©ch
->
mëad©a
,

453 ~
ofm©ch
->
mëad©a_mask
);

456 
	}
}

460 
	$oÂutû_m©ch_to_oÂ11_m©ch
(c⁄° 
m©ch
 *match,

461 
oÂ11_m©ch
 *
ofm©ch
)

463 
uöt32_t
 
wc
 = 0;

464 
i
;

466 
	`mem£t
(
ofm©ch
, 0,  *ofmatch);

467 
ofm©ch
->
omh
.
ty≥
 = 
	`ht⁄s
(
OFPMT_STANDARD
);

468 
ofm©ch
->
omh
.
Àngth
 = 
	`ht⁄s
(
OFPMT11_STANDARD_LENGTH
);

470 i‡(!
m©ch
->
wc
.
masks
.
ö_p‹t
) {

471 
wc
 |
OFPFW11_IN_PORT
;

473 
ofm©ch
->
ö_p‹t
 = 
	`oÂutû_p‹t_to_oÂ11
(
m©ch
->
Êow
.in_port);

476 
	`mem˝y
(
ofm©ch
->
dl_§c
, 
m©ch
->
Êow
.dl_§c, 
ETH_ADDR_LEN
);

477 
i
 = 0; i < 
ETH_ADDR_LEN
; i++) {

478 
ofm©ch
->
dl_§c_mask
[
i
] = ~
m©ch
->
wc
.
masks
.
dl_§c
[i];

481 
	`mem˝y
(
ofm©ch
->
dl_d°
, 
m©ch
->
Êow
.dl_d°, 
ETH_ADDR_LEN
);

482 
i
 = 0; i < 
ETH_ADDR_LEN
; i++) {

483 
ofm©ch
->
dl_d°_mask
[
i
] = ~
m©ch
->
wc
.
masks
.
dl_d°
[i];

486 i‡(
m©ch
->
wc
.
masks
.
vœn_tci
 =
	`ht⁄s
(0)) {

487 
wc
 |
OFPFW11_DL_VLAN
 | 
OFPFW11_DL_VLAN_PCP
;

488 } i‡(
m©ch
->
wc
.
masks
.
vœn_tci
 & 
	`ht⁄s
(
VLAN_CFI
)

489 && !(
m©ch
->
Êow
.
vœn_tci
 & 
	`ht⁄s
(
VLAN_CFI
))) {

490 
ofm©ch
->
dl_vœn
 = 
	`ht⁄s
(
OFPVID11_NONE
);

491 
wc
 |
OFPFW11_DL_VLAN_PCP
;

493 i‡(!(
m©ch
->
wc
.
masks
.
vœn_tci
 & 
	`ht⁄s
(
VLAN_VID_MASK
))) {

494 
ofm©ch
->
dl_vœn
 = 
	`ht⁄s
(
OFPVID11_ANY
);

496 
ofm©ch
->
dl_vœn
 = 
	`ht⁄s
(
	`vœn_tci_to_vid
(
m©ch
->
Êow
.
vœn_tci
));

499 i‡(!(
m©ch
->
wc
.
masks
.
vœn_tci
 & 
	`ht⁄s
(
VLAN_PCP_MASK
))) {

500 
wc
 |
OFPFW11_DL_VLAN_PCP
;

502 
ofm©ch
->
dl_vœn_p˝
 = 
	`vœn_tci_to_p˝
(
m©ch
->
Êow
.
vœn_tci
);

506 i‡(!
m©ch
->
wc
.
masks
.
dl_ty≥
) {

507 
wc
 |
OFPFW11_DL_TYPE
;

509 
ofm©ch
->
dl_ty≥
 = 
	`oÂutû_dl_ty≥_to_›íÊow
(
m©ch
->
Êow
.dl_type);

512 i‡(!(
m©ch
->
wc
.
masks
.
nw_tos
 & 
IP_DSCP_MASK
)) {

513 
wc
 |
OFPFW11_NW_TOS
;

515 
ofm©ch
->
nw_tos
 = 
m©ch
->
Êow
.nw_to†& 
IP_DSCP_MASK
;

518 i‡(!
m©ch
->
wc
.
masks
.
nw_¥Ÿo
) {

519 
wc
 |
OFPFW11_NW_PROTO
;

521 
ofm©ch
->
nw_¥Ÿo
 = 
m©ch
->
Êow
.nw_proto;

524 
ofm©ch
->
nw_§c
 = 
m©ch
->
Êow
.nw_src;

525 
ofm©ch
->
nw_§c_mask
 = ~
m©ch
->
wc
.
masks
.
nw_§c
;

526 
ofm©ch
->
nw_d°
 = 
m©ch
->
Êow
.nw_dst;

527 
ofm©ch
->
nw_d°_mask
 = ~
m©ch
->
wc
.
masks
.
nw_d°
;

529 i‡(!
m©ch
->
wc
.
masks
.
ç_§c
) {

530 
wc
 |
OFPFW11_TP_SRC
;

532 
ofm©ch
->
ç_§c
 = 
m©ch
->
Êow
.tp_src;

535 i‡(!
m©ch
->
wc
.
masks
.
ç_d°
) {

536 
wc
 |
OFPFW11_TP_DST
;

538 
ofm©ch
->
ç_d°
 = 
m©ch
->
Êow
.tp_dst;

542 
wc
 |
OFPFW11_MPLS_LABEL
;

543 
wc
 |
OFPFW11_MPLS_TC
;

545 
ofm©ch
->
mëad©a
 = 
m©ch
->
Êow
.metadata;

546 
ofm©ch
->
mëad©a_mask
 = ~
m©ch
->
wc
.
masks
.
mëad©a
;

548 
ofm©ch
->
wûdˇrds
 = 
	`ht⁄l
(
wc
);

549 
	}
}

554 
ovs_be16


555 
	$oÂutû_dl_ty≥_to_›íÊow
(
ovs_be16
 
Êow_dl_ty≥
)

557  (
Êow_dl_ty≥
 =
	`ht⁄s
(
FLOW_DL_TYPE_NONE
)

558 ? 
	`ht⁄s
(
OFP_DL_TYPE_NOT_ETH_TYPE
)

559 : 
Êow_dl_ty≥
);

560 
	}
}

565 
ovs_be16


566 
	$oÂutû_dl_ty≥_‰om_›íÊow
(
ovs_be16
 
oÂ_dl_ty≥
)

568  (
oÂ_dl_ty≥
 =
	`ht⁄s
(
OFP_DL_TYPE_NOT_ETH_TYPE
)

569 ? 
	`ht⁄s
(
FLOW_DL_TYPE_NONE
)

570 : 
oÂ_dl_ty≥
);

571 
	}
}

575 
	s¥Ÿo_abbªv
 {

576 
oÂutû_¥Ÿocﬁ
 
	m¥Ÿocﬁ
;

577 c⁄° *
	m«me
;

582 c⁄° 
¥Ÿo_abbªv
 
	g¥Ÿo_abbªvs
[] = {

583 { 
OFPUTIL_P_ANY
, "any" },

584 { 
OFPUTIL_P_OF10_ANY
, "OpenFlow10" },

585 { 
OFPUTIL_P_NXM_ANY
, "NXM" },

587 
	#N_PROTO_ABBREVS
 
	`ARRAY_SIZE
(
¥Ÿo_abbªvs
)

	)

589 
oÂutû_¥Ÿocﬁ
 
	goÂutû_Êow_dump_¥Ÿocﬁs
[] = {

590 
OFPUTIL_P_NXM
,

591 
OFPUTIL_P_OF10
,

593 
size_t
 
	goÂutû_n_Êow_dump_¥Ÿocﬁs
 = 
ARRAY_SIZE
(
oÂutû_Êow_dump_¥Ÿocﬁs
);

600 
oÂutû_¥Ÿocﬁ


601 
	$oÂutû_¥Ÿocﬁ_‰om_oÂ_vîsi⁄
(
oÂ_vîsi⁄
 
vîsi⁄
)

603 
vîsi⁄
) {

604 
OFP10_VERSION
:

605  
OFPUTIL_P_OF10
;

606 
OFP12_VERSION
:

607  
OFPUTIL_P_OF12
;

608 
OFP11_VERSION
:

612 
	}
}

616 
oÂ_vîsi⁄


617 
	$oÂutû_¥Ÿocﬁ_to_oÂ_vîsi⁄
(
oÂutû_¥Ÿocﬁ
 
¥Ÿocﬁ
)

619 
¥Ÿocﬁ
) {

620 
OFPUTIL_P_OF10
:

621 
OFPUTIL_P_OF10_TID
:

622 
OFPUTIL_P_NXM
:

623 
OFPUTIL_P_NXM_TID
:

624  
OFP10_VERSION
;

625 
OFPUTIL_P_OF12
:

626  
OFP12_VERSION
;

629 
	`NOT_REACHED
();

630 
	}
}

634 
boﬁ


635 
	$oÂutû_¥Ÿocﬁ_is_vÆid
(
oÂutû_¥Ÿocﬁ
 
¥Ÿocﬁ
)

637  
¥Ÿocﬁ
 & 
OFPUTIL_P_ANY
 && 
	`is_pow2
(protocol);

638 
	}
}

650 
oÂutû_¥Ÿocﬁ


651 
	$oÂutû_¥Ÿocﬁ_£t_tid
(
oÂutû_¥Ÿocﬁ
 
¥Ÿocﬁ
, 
boﬁ
 
íabÀ
)

653 
¥Ÿocﬁ
) {

654 
OFPUTIL_P_OF10
:

655 
OFPUTIL_P_OF10_TID
:

656  
íabÀ
 ? 
OFPUTIL_P_OF10_TID
 : 
OFPUTIL_P_OF10
;

658 
OFPUTIL_P_NXM
:

659 
OFPUTIL_P_NXM_TID
:

660  
íabÀ
 ? 
OFPUTIL_P_NXM_TID
 : 
OFPUTIL_P_NXM
;

662 
OFPUTIL_P_OF12
:

663  
OFPUTIL_P_OF12
;

666 
	`NOT_REACHED
();

668 
	}
}

674 
oÂutû_¥Ÿocﬁ


675 
	$oÂutû_¥Ÿocﬁ_to_ba£
(
oÂutû_¥Ÿocﬁ
 
¥Ÿocﬁ
)

677  
	`oÂutû_¥Ÿocﬁ_£t_tid
(
¥Ÿocﬁ
, 
Ál£
);

678 
	}
}

681 
oÂutû_¥Ÿocﬁ


682 
	$oÂutû_¥Ÿocﬁ_£t_ba£
(
oÂutû_¥Ÿocﬁ
 
cur
,

683 
oÂutû_¥Ÿocﬁ
 
√w_ba£
)

685 
boﬁ
 
tid
 = (
cur
 & 
OFPUTIL_P_TID
) != 0;

687 
√w_ba£
) {

688 
OFPUTIL_P_OF10
:

689 
OFPUTIL_P_OF10_TID
:

690  
	`oÂutû_¥Ÿocﬁ_£t_tid
(
OFPUTIL_P_OF10
, 
tid
);

692 
OFPUTIL_P_NXM
:

693 
OFPUTIL_P_NXM_TID
:

694  
	`oÂutû_¥Ÿocﬁ_£t_tid
(
OFPUTIL_P_NXM
, 
tid
);

696 
OFPUTIL_P_OF12
:

697  
	`oÂutû_¥Ÿocﬁ_£t_tid
(
OFPUTIL_P_OF12
, 
tid
);

700 
	`NOT_REACHED
();

702 
	}
}

708 
	$oÂutû_¥Ÿocﬁ_to_°rög
(
oÂutû_¥Ÿocﬁ
 
¥Ÿocﬁ
)

710 c⁄° 
¥Ÿo_abbªv
 *
p
;

714 
¥Ÿocﬁ
) {

715 
OFPUTIL_P_NXM
:

718 
OFPUTIL_P_NXM_TID
:

721 
OFPUTIL_P_OF10
:

724 
OFPUTIL_P_OF10_TID
:

727 
OFPUTIL_P_OF12
:

728  
NULL
;

732 
p
 = 
¥Ÿo_abbªvs
;Ö < &¥Ÿo_abbªvs[
N_PROTO_ABBREVS
];Ö++) {

733 i‡(
¥Ÿocﬁ
 =
p
->protocol) {

734  
p
->
«me
;

738  
NULL
;

739 
	}
}

747 
	$oÂutû_¥Ÿocﬁs_to_°rög
(
oÂutû_¥Ÿocﬁ
 
¥Ÿocﬁs
)

749 
ds
 
s
;

751 
	`as£π
(!(
¥Ÿocﬁs
 & ~
OFPUTIL_P_ANY
));

752 i‡(
¥Ÿocﬁs
 == 0) {

753  
	`x°rdup
("none");

756 
	`ds_öô
(&
s
);

757 
¥Ÿocﬁs
) {

758 c⁄° 
¥Ÿo_abbªv
 *
p
;

759 
i
;

761 i‡(
s
.
Àngth
) {

762 
	`ds_put_ch¨
(&
s
, ',');

765 
p
 = 
¥Ÿo_abbªvs
;Ö < &¥Ÿo_abbªvs[
N_PROTO_ABBREVS
];Ö++) {

766 i‡((
¥Ÿocﬁs
 & 
p
->
¥Ÿocﬁ
) ==Ö->protocol) {

767 
	`ds_put_c°r
(&
s
, 
p
->
«me
);

768 
¥Ÿocﬁs
 &~
p
->
¥Ÿocﬁ
;

769 
m©ch
;

773 
i
 = 0; i < 
CHAR_BIT
 * (
oÂutû_¥Ÿocﬁ
); i++) {

774 
oÂutû_¥Ÿocﬁ
 
bô
 = 1u << 
i
;

776 i‡(
¥Ÿocﬁs
 & 
bô
) {

777 
	`ds_put_c°r
(&
s
, 
	`oÂutû_¥Ÿocﬁ_to_°rög
(
bô
));

778 
¥Ÿocﬁs
 &~
bô
;

779 
m©ch
;

782 
	`NOT_REACHED
();

784 
m©ch
: ;

786  
	`ds_°ól_c°r
(&
s
);

787 
	}
}

789 
oÂutû_¥Ÿocﬁ


790 
	$oÂutû_¥Ÿocﬁ_‰om_°rög__
(c⁄° *
s
, 
size_t
 
n
)

792 c⁄° 
¥Ÿo_abbªv
 *
p
;

793 
i
;

795 
i
 = 0; i < 
CHAR_BIT
 * (
oÂutû_¥Ÿocﬁ
); i++) {

796 
oÂutû_¥Ÿocﬁ
 
bô
 = 1u << 
i
;

797 c⁄° *
«me
 = 
	`oÂutû_¥Ÿocﬁ_to_°rög
(
bô
);

799 i‡(
«me
 && 
n
 =
	`°æí
“ameË&& !
	`°∫ˇ£cmp
(
s
,Çame,Ç)) {

800  
bô
;

804 
p
 = 
¥Ÿo_abbªvs
;Ö < &¥Ÿo_abbªvs[
N_PROTO_ABBREVS
];Ö++) {

805 i‡(
n
 =
	`°æí
(
p
->
«me
Ë&& !
	`°∫ˇ£cmp
(
s
,Ö->name,Ç)) {

806  
p
->
¥Ÿocﬁ
;

811 
	}
}

817 
oÂutû_¥Ÿocﬁ


818 
	$oÂutû_¥Ÿocﬁs_‰om_°rög
(c⁄° *
s
)

820 c⁄° *
‹ig_s
 = 
s
;

821 
oÂutû_¥Ÿocﬁ
 
¥Ÿocﬁs
;

823 
¥Ÿocﬁs
 = 0;

824 *
s
) {

825 
oÂutû_¥Ÿocﬁ
 
p
;

826 
size_t
 
n
;

828 
n
 = 
	`°rc•n
(
s
, ",");

829 i‡(
n
 == 0) {

830 
s
++;

834 
p
 = 
	`oÂutû_¥Ÿocﬁ_‰om_°rög__
(
s
, 
n
);

835 i‡(!
p
) {

836 
	`ovs_Áèl
(0, "%.*s: unknow¿ÊowÖrŸocﬁ", (Ë
n
, 
s
);

838 
¥Ÿocﬁs
 |
p
;

840 
s
 +
n
;

843 i‡(!
¥Ÿocﬁs
) {

844 
	`ovs_Áèl
(0, "%s:ÇÿÊowÖrŸocﬁ s≥cifõd", 
‹ig_s
);

846  
¥Ÿocﬁs
;

847 
	}
}

849 
boﬁ


850 
	$oÂutû_∑ckë_ö_f‹m©_is_vÆid
(
nx_∑ckë_ö_f‹m©
 
∑ckë_ö_f‹m©
)

852 
∑ckë_ö_f‹m©
) {

853 
NXPIF_OPENFLOW10
:

854 
NXPIF_NXM
:

855  
åue
;

858  
Ál£
;

859 
	}
}

862 
	$oÂutû_∑ckë_ö_f‹m©_to_°rög
(
nx_∑ckë_ö_f‹m©
 
∑ckë_ö_f‹m©
)

864 
∑ckë_ö_f‹m©
) {

865 
NXPIF_OPENFLOW10
:

867 
NXPIF_NXM
:

870 
	`NOT_REACHED
();

872 
	}
}

875 
	$oÂutû_∑ckë_ö_f‹m©_‰om_°rög
(c⁄° *
s
)

877  (!
	`°rcmp
(
s
, "›íÊow10"Ë? 
NXPIF_OPENFLOW10


878 : !
	`°rcmp
(
s
, "nxm"Ë? 
NXPIF_NXM


880 
	}
}

882 
boﬁ


883 
	$ªgs_fuŒy_wûdˇrded
(c⁄° 
Êow_wûdˇrds
 *
wc
)

885 
i
;

887 
i
 = 0; i < 
FLOW_N_REGS
; i++) {

888 i‡(
wc
->
masks
.
ªgs
[
i
] != 0) {

889  
Ál£
;

892  
åue
;

893 
	}
}

895 
boﬁ


896 
	$tun_∑rms_fuŒy_wûdˇrded
(c⁄° 
Êow_wûdˇrds
 *
wc
)

898  (!
wc
->
masks
.
tu¬ñ
.
ù_§c
 &&

899 !
wc
->
masks
.
tu¬ñ
.
ù_d°
 &&

900 !
wc
->
masks
.
tu¬ñ
.
ù_âl
 &&

901 !
wc
->
masks
.
tu¬ñ
.
ù_tos
 &&

902 !
wc
->
masks
.
tu¬ñ
.
Êags
);

903 
	}
}

909 
oÂutû_¥Ÿocﬁ


910 
	$oÂutû_ußbÀ_¥Ÿocﬁs
(c⁄° 
m©ch
 *match)

912 c⁄° 
Êow_wûdˇrds
 *
wc
 = &
m©ch
->wc;

914 
	`BUILD_ASSERT_DECL
(
FLOW_WC_SEQ
 == 18);

917 i‡(!
	`tun_∑rms_fuŒy_wûdˇrded
(
wc
)) {

922 i‡(
wc
->
masks
.
skb_m¨k
 || wc->masks.
skb_¥i‹ôy
) {

927 i‡(!
	`ëh_mask_is_exa˘
(
wc
->
masks
.
dl_§c
)

928 && !
	`ëh_addr_is_zîo
(
wc
->
masks
.
dl_§c
)) {

929  
OFPUTIL_P_NXM_ANY
;

931 i‡(!
	`ëh_mask_is_exa˘
(
wc
->
masks
.
dl_d°
)

932 && !
	`ëh_addr_is_zîo
(
wc
->
masks
.
dl_d°
)) {

933  
OFPUTIL_P_NXM_ANY
;

937 i‡(
wc
->
masks
.
mëad©a
 !
	`ht⁄Œ
(0)) {

938  
OFPUTIL_P_NXM_ANY
;

942 i‡(!
	`ëh_addr_is_zîo
(
wc
->
masks
.
¨p_sha
) ||

943 !
	`ëh_addr_is_zîo
(
wc
->
masks
.
¨p_tha
)) {

944  
OFPUTIL_P_NXM_ANY
;

948 i‡(
m©ch
->
Êow
.
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IPV6
)) {

949  
OFPUTIL_P_NXM_ANY
;

953 i‡(!
	`ªgs_fuŒy_wûdˇrded
(
wc
)) {

954  
OFPUTIL_P_NXM_ANY
;

958 i‡(
wc
->
masks
.
tu¬ñ
.
tun_id
 !
	`ht⁄Œ
(0)) {

959  
OFPUTIL_P_NXM_ANY
;

963 i‡(
wc
->
masks
.
nw_‰ag
) {

964  
OFPUTIL_P_NXM_ANY
;

968 i‡(
wc
->
masks
.
ùv6_œbñ
) {

969  
OFPUTIL_P_NXM_ANY
;

973 i‡(
wc
->
masks
.
nw_tos
 & 
IP_ECN_MASK
) {

974  
OFPUTIL_P_NXM_ANY
;

978 i‡(
wc
->
masks
.
nw_âl
) {

979  
OFPUTIL_P_NXM_ANY
;

983 i‡(!
	`ù_is_cidr
(
wc
->
masks
.
nw_§c
Ë|| !ù_is_cidr(wc->masks.
nw_d°
)) {

984  
OFPUTIL_P_NXM_ANY
;

988 i‡((
wc
->
masks
.
ç_§c
 && wc->masks.ç_§¯!
	`ht⁄s
(
UINT16_MAX
)) ||

989 (
wc
->
masks
.
ç_d°
 && wc->masks.ç_d° !
	`ht⁄s
(
UINT16_MAX
))) {

990  
OFPUTIL_P_NXM_ANY
;

994  
OFPUTIL_P_ANY
;

995 
	}
}

1004 
oÂbuf
 *

1005 
	$oÂutû_ícode_£t_¥Ÿocﬁ
(
oÂutû_¥Ÿocﬁ
 
cuºít
,

1006 
oÂutû_¥Ÿocﬁ
 
w™t
,

1007 
oÂutû_¥Ÿocﬁ
 *
√xt
)

1009 
oÂutû_¥Ÿocﬁ
 
cur_ba£
, 
w™t_ba£
;

1010 
boﬁ
 
cur_tid
, 
w™t_tid
;

1012 
cur_ba£
 = 
	`oÂutû_¥Ÿocﬁ_to_ba£
(
cuºít
);

1013 
w™t_ba£
 = 
	`oÂutû_¥Ÿocﬁ_to_ba£
(
w™t
);

1014 i‡(
cur_ba£
 !
w™t_ba£
) {

1015 *
√xt
 = 
	`oÂutû_¥Ÿocﬁ_£t_ba£
(
cuºít
, 
w™t_ba£
);

1017 
w™t_ba£
) {

1018 
OFPUTIL_P_NXM
:

1019  
	`oÂutû_ícode_nx_£t_Êow_f‹m©
(
NXFF_NXM
);

1021 
OFPUTIL_P_OF10
:

1022  
	`oÂutû_ícode_nx_£t_Êow_f‹m©
(
NXFF_OPENFLOW10
);

1024 
OFPUTIL_P_OF12
:

1025  
	`oÂutû_ícode_nx_£t_Êow_f‹m©
(
NXFF_OPENFLOW12
);

1027 
OFPUTIL_P_OF10_TID
:

1028 
OFPUTIL_P_NXM_TID
:

1029 
	`NOT_REACHED
();

1033 
cur_tid
 = (
cuºít
 & 
OFPUTIL_P_TID
) != 0;

1034 
w™t_tid
 = (
w™t
 & 
OFPUTIL_P_TID
) != 0;

1035 i‡(
cur_tid
 !
w™t_tid
) {

1036 *
√xt
 = 
	`oÂutû_¥Ÿocﬁ_£t_tid
(
cuºít
, 
w™t_tid
);

1037  
	`oÂutû_make_Êow_mod_èbÀ_id
(
w™t_tid
);

1040 
	`as£π
(
cuºít
 =
w™t
);

1042 *
√xt
 = 
cuºít
;

1043  
NULL
;

1044 
	}
}

1048 
oÂbuf
 *

1049 
	$oÂutû_ícode_nx_£t_Êow_f‹m©
(
nx_Êow_f‹m©
 
nxff
)

1051 
nx_£t_Êow_f‹m©
 *
sff
;

1052 
oÂbuf
 *
msg
;

1054 
	`as£π
(
	`oÂutû_nx_Êow_f‹m©_is_vÆid
(
nxff
));

1056 
msg
 = 
	`oÂøw_Æloc
(
OFPRAW_NXT_SET_FLOW_FORMAT
, 
OFP10_VERSION
, 0);

1057 
sff
 = 
	`oÂbuf_put_zîos
(
msg
,  *sff);

1058 
sff
->
f‹m©
 = 
	`ht⁄l
(
nxff
);

1060  
msg
;

1061 
	}
}

1065 
oÂutû_¥Ÿocﬁ


1066 
	$oÂutû_nx_Êow_f‹m©_to_¥Ÿocﬁ
(
nx_Êow_f‹m©
 
Êow_f‹m©
)

1068 
Êow_f‹m©
) {

1069 
NXFF_OPENFLOW10
:

1070  
OFPUTIL_P_OF10
;

1072 
NXFF_NXM
:

1073  
OFPUTIL_P_NXM
;

1075 
NXFF_OPENFLOW12
:

1076  
OFPUTIL_P_OF12
;

1081 
	}
}

1084 
boﬁ


1085 
	$oÂutû_nx_Êow_f‹m©_is_vÆid
(
nx_Êow_f‹m©
 
Êow_f‹m©
)

1087  
	`oÂutû_nx_Êow_f‹m©_to_¥Ÿocﬁ
(
Êow_f‹m©
) != 0;

1088 
	}
}

1093 
	$oÂutû_nx_Êow_f‹m©_to_°rög
(
nx_Êow_f‹m©
 
Êow_f‹m©
)

1095 
Êow_f‹m©
) {

1096 
NXFF_OPENFLOW10
:

1098 
NXFF_NXM
:

1100 
NXFF_OPENFLOW12
:

1103 
	`NOT_REACHED
();

1105 
	}
}

1107 
oÂbuf
 *

1108 
	$oÂutû_make_£t_∑ckë_ö_f‹m©
(
oÂ_vîsi⁄
 ofp_version,

1109 
nx_∑ckë_ö_f‹m©
 
∑ckë_ö_f‹m©
)

1111 
nx_£t_∑ckë_ö_f‹m©
 *
•if
;

1112 
oÂbuf
 *
msg
;

1114 
msg
 = 
	`oÂøw_Æloc
(
OFPRAW_NXT_SET_PACKET_IN_FORMAT
, 
oÂ_vîsi⁄
, 0);

1115 
•if
 = 
	`oÂbuf_put_zîos
(
msg
,  *spif);

1116 
•if
->
f‹m©
 = 
	`ht⁄l
(
∑ckë_ö_f‹m©
);

1118  
msg
;

1119 
	}
}

1123 
oÂbuf
 *

1124 
	$oÂutû_make_Êow_mod_èbÀ_id
(
boﬁ
 
Êow_mod_èbÀ_id
)

1126 
nx_Êow_mod_èbÀ_id
 *
nfmti
;

1127 
oÂbuf
 *
msg
;

1129 
msg
 = 
	`oÂøw_Æloc
(
OFPRAW_NXT_FLOW_MOD_TABLE_ID
, 
OFP10_VERSION
, 0);

1130 
nfmti
 = 
	`oÂbuf_put_zîos
(
msg
,  *nfmti);

1131 
nfmti
->
£t
 = 
Êow_mod_èbÀ_id
;

1132  
msg
;

1133 
	}
}

1145 
oÂîr


1146 
	$oÂutû_decode_Êow_mod
(
oÂutû_Êow_mod
 *
fm
,

1147 c⁄° 
oÂ_hódî
 *
oh
,

1148 
oÂutû_¥Ÿocﬁ
 
¥Ÿocﬁ
,

1149 
oÂbuf
 *
oÂa˘s
)

1151 
uöt16_t
 
comm™d
;

1152 
oÂbuf
 
b
;

1153 
oÂøw
 
øw
;

1155 
	`oÂbuf_u£_c⁄°
(&
b
, 
oh
, 
	`¡ohs
(oh->
Àngth
));

1156 
øw
 = 
	`oÂøw_puŒ_as£π
(&
b
);

1157 i‡(
øw
 =
OFPRAW_OFPT11_FLOW_MOD
) {

1159 c⁄° 
oÂ11_Êow_mod
 *
ofm
;

1160 
oÂîr
 
îr‹
;

1162 
ofm
 = 
	`oÂbuf_puŒ
(&
b
,  *ofm);

1164 
îr‹
 = 
	`oÂutû_puŒ_oÂ11_m©ch
(&
b
, &
fm
->
m©ch
, 
NULL
);

1165 i‡(
îr‹
) {

1166  
îr‹
;

1169 
îr‹
 = 
	`oÂa˘s_puŒ_›íÊow11_ö°ru˘i⁄s
(&
b
, b.
size
, 
oÂa˘s
);

1170 i‡(
îr‹
) {

1171  
îr‹
;

1175 
fm
->
¥i‹ôy
 = 
	`¡ohs
(
ofm
->priority);

1176 i‡(
ofm
->
comm™d
 =
OFPFC_ADD
) {

1177 
fm
->
cookõ
 = 
	`ht⁄Œ
(0);

1178 
fm
->
cookõ_mask
 = 
	`ht⁄Œ
(0);

1179 
fm
->
√w_cookõ
 = 
ofm
->
cookõ
;

1181 
fm
->
cookõ
 = 
ofm
->cookie;

1182 
fm
->
cookõ_mask
 = 
ofm
->cookie_mask;

1183 
fm
->
√w_cookõ
 = 
	`ht⁄Œ
(
UINT64_MAX
);

1185 
fm
->
comm™d
 = 
ofm
->command;

1186 
fm
->
èbÀ_id
 = 
ofm
->table_id;

1187 
fm
->
idÀ_timeout
 = 
	`¡ohs
(
ofm
->idle_timeout);

1188 
fm
->
h¨d_timeout
 = 
	`¡ohs
(
ofm
->hard_timeout);

1189 
fm
->
buf„r_id
 = 
	`¡ohl
(
ofm
->buffer_id);

1190 
îr‹
 = 
	`oÂutû_p‹t_‰om_oÂ11
(
ofm
->
out_p‹t
, &
fm
->out_port);

1191 i‡(
îr‹
) {

1192  
îr‹
;

1194 i‡(
ofm
->
out_group
 !
	`ht⁄l
(
OFPG_ANY
)) {

1195  
OFPERR_OFPFMFC_UNKNOWN
;

1197 
fm
->
Êags
 = 
	`¡ohs
(
ofm
->flags);

1199 i‡(
øw
 =
OFPRAW_OFPT10_FLOW_MOD
) {

1201 c⁄° 
oÂ10_Êow_mod
 *
ofm
;

1202 
oÂîr
 
îr‹
;

1205 
ofm
 = 
	`oÂbuf_puŒ
(&
b
,  *ofm);

1208 
	`oÂutû_m©ch_‰om_oÂ10_m©ch
(&
ofm
->
m©ch
, &
fm
->match);

1209 
	`oÂutû_n‹mÆize_m©ch
(&
fm
->
m©ch
);

1212 
îr‹
 = 
	`oÂa˘s_puŒ_›íÊow10
(&
b
, b.
size
, 
oÂa˘s
);

1213 i‡(
îr‹
) {

1214  
îr‹
;

1219 
fm
->
¥i‹ôy
 = (
ofm
->
m©ch
.
wûdˇrds
 & 
	`ht⁄l
(
OFPFW10_ALL
)

1220 ? 
	`¡ohs
(
ofm
->
¥i‹ôy
)

1221 : 
UINT16_MAX
);

1224 
comm™d
 = 
	`¡ohs
(
ofm
->command);

1225 
fm
->
cookõ
 = 
	`ht⁄Œ
(0);

1226 
fm
->
cookõ_mask
 = 
	`ht⁄Œ
(0);

1227 
fm
->
√w_cookõ
 = 
ofm
->
cookõ
;

1228 
fm
->
idÀ_timeout
 = 
	`¡ohs
(
ofm
->idle_timeout);

1229 
fm
->
h¨d_timeout
 = 
	`¡ohs
(
ofm
->hard_timeout);

1230 
fm
->
buf„r_id
 = 
	`¡ohl
(
ofm
->buffer_id);

1231 
fm
->
out_p‹t
 = 
	`¡ohs
(
ofm
->out_port);

1232 
fm
->
Êags
 = 
	`¡ohs
(
ofm
->flags);

1233 } i‡(
øw
 =
OFPRAW_NXT_FLOW_MOD
) {

1235 c⁄° 
nx_Êow_mod
 *
nfm
;

1236 
oÂîr
 
îr‹
;

1239 
nfm
 = 
	`oÂbuf_puŒ
(&
b
,  *nfm);

1240 
îr‹
 = 
	`nx_puŒ_m©ch
(&
b
, 
	`¡ohs
(
nfm
->
m©ch_Àn
),

1241 &
fm
->
m©ch
, &fm->
cookõ
, &fm->
cookõ_mask
);

1242 i‡(
îr‹
) {

1243  
îr‹
;

1245 
îr‹
 = 
	`oÂa˘s_puŒ_›íÊow10
(&
b
, b.
size
, 
oÂa˘s
);

1246 i‡(
îr‹
) {

1247  
îr‹
;

1251 
comm™d
 = 
	`¡ohs
(
nfm
->command);

1252 i‡((
comm™d
 & 0xffË=
OFPFC_ADD
 && 
fm
->
cookõ_mask
) {

1255  
OFPERR_NXBRC_NXM_INVALID
;

1257 
fm
->
¥i‹ôy
 = 
	`¡ohs
(
nfm
->priority);

1258 
fm
->
√w_cookõ
 = 
nfm
->
cookõ
;

1259 
fm
->
idÀ_timeout
 = 
	`¡ohs
(
nfm
->idle_timeout);

1260 
fm
->
h¨d_timeout
 = 
	`¡ohs
(
nfm
->hard_timeout);

1261 
fm
->
buf„r_id
 = 
	`¡ohl
(
nfm
->buffer_id);

1262 
fm
->
out_p‹t
 = 
	`¡ohs
(
nfm
->out_port);

1263 
fm
->
Êags
 = 
	`¡ohs
(
nfm
->flags);

1265 
	`NOT_REACHED
();

1268 i‡(
¥Ÿocﬁ
 & 
OFPUTIL_P_TID
) {

1269 
fm
->
comm™d
 = command & 0xff;

1270 
fm
->
èbÀ_id
 = 
comm™d
 >> 8;

1272 
fm
->
comm™d
 = command;

1273 
fm
->
èbÀ_id
 = 0xff;

1277 
fm
->
oÂa˘s
 = oÂa˘s->
d©a
;

1278 
fm
->
oÂa˘s_Àn
 = 
oÂa˘s
->
size
;

1281 
	}
}

1283 
ovs_be16


1284 
	$oÂutû_tid_comm™d
(c⁄° 
oÂutû_Êow_mod
 *
fm
,

1285 
oÂutû_¥Ÿocﬁ
 
¥Ÿocﬁ
)

1287  
	`ht⁄s
(
¥Ÿocﬁ
 & 
OFPUTIL_P_TID


1288 ? (
fm
->
comm™d
 & 0xffË| (fm->
èbÀ_id
 << 8)

1289 : 
fm
->
comm™d
);

1290 
	}
}

1294 
oÂbuf
 *

1295 
	$oÂutû_ícode_Êow_mod
(c⁄° 
oÂutû_Êow_mod
 *
fm
,

1296 
oÂutû_¥Ÿocﬁ
 
¥Ÿocﬁ
)

1298 
oÂbuf
 *
msg
;

1300 
¥Ÿocﬁ
) {

1301 
OFPUTIL_P_OF12
: {

1302 
oÂ11_Êow_mod
 *
ofm
;

1304 
msg
 = 
	`oÂøw_Æloc
(
OFPRAW_OFPT11_FLOW_MOD
, 
OFP12_VERSION
,

1305 
NXM_TYPICAL_LEN
 + 
fm
->
oÂa˘s_Àn
);

1306 
ofm
 = 
	`oÂbuf_put_zîos
(
msg
,  *ofm);

1307 i‡(
fm
->
comm™d
 =
OFPFC_ADD
) {

1308 
ofm
->
cookõ
 = 
fm
->
√w_cookõ
;

1310 
ofm
->
cookõ
 = 
fm
->cookie;

1312 
ofm
->
cookõ_mask
 = 
fm
->cookie_mask;

1313 
ofm
->
èbÀ_id
 = 
fm
->table_id;

1314 
ofm
->
comm™d
 = 
fm
->command;

1315 
ofm
->
idÀ_timeout
 = 
	`ht⁄s
(
fm
->idle_timeout);

1316 
ofm
->
h¨d_timeout
 = 
	`ht⁄s
(
fm
->hard_timeout);

1317 
ofm
->
¥i‹ôy
 = 
	`ht⁄s
(
fm
->priority);

1318 
ofm
->
buf„r_id
 = 
	`ht⁄l
(
fm
->buffer_id);

1319 
ofm
->
out_p‹t
 = 
	`oÂutû_p‹t_to_oÂ11
(
fm
->out_port);

1320 
ofm
->
out_group
 = 
	`ht⁄l
(
OFPG11_ANY
);

1321 
ofm
->
Êags
 = 
	`ht⁄s
(
fm
->flags);

1322 
	`oxm_put_m©ch
(
msg
, &
fm
->
m©ch
);

1323 
	`oÂa˘s_put_›íÊow11_ö°ru˘i⁄s
(
fm
->
oÂa˘s
, fm->
oÂa˘s_Àn
, 
msg
);

1327 
OFPUTIL_P_OF10
:

1328 
OFPUTIL_P_OF10_TID
: {

1329 
oÂ10_Êow_mod
 *
ofm
;

1331 
msg
 = 
	`oÂøw_Æloc
(
OFPRAW_OFPT10_FLOW_MOD
, 
OFP10_VERSION
,

1332 
fm
->
oÂa˘s_Àn
);

1333 
ofm
 = 
	`oÂbuf_put_zîos
(
msg
,  *ofm);

1334 
	`oÂutû_m©ch_to_oÂ10_m©ch
(&
fm
->
m©ch
, &
ofm
->match);

1335 
ofm
->
cookõ
 = 
fm
->
√w_cookõ
;

1336 
ofm
->
comm™d
 = 
	`oÂutû_tid_comm™d
(
fm
, 
¥Ÿocﬁ
);

1337 
ofm
->
idÀ_timeout
 = 
	`ht⁄s
(
fm
->idle_timeout);

1338 
ofm
->
h¨d_timeout
 = 
	`ht⁄s
(
fm
->hard_timeout);

1339 
ofm
->
¥i‹ôy
 = 
	`ht⁄s
(
fm
->priority);

1340 
ofm
->
buf„r_id
 = 
	`ht⁄l
(
fm
->buffer_id);

1341 
ofm
->
out_p‹t
 = 
	`ht⁄s
(
fm
->out_port);

1342 
ofm
->
Êags
 = 
	`ht⁄s
(
fm
->flags);

1343 
	`oÂa˘s_put_›íÊow10
(
fm
->
oÂa˘s
, fm->
oÂa˘s_Àn
, 
msg
);

1347 
OFPUTIL_P_NXM
:

1348 
OFPUTIL_P_NXM_TID
: {

1349 
nx_Êow_mod
 *
nfm
;

1350 
m©ch_Àn
;

1352 
msg
 = 
	`oÂøw_Æloc
(
OFPRAW_NXT_FLOW_MOD
, 
OFP10_VERSION
,

1353 
NXM_TYPICAL_LEN
 + 
fm
->
oÂa˘s_Àn
);

1354 
nfm
 = 
	`oÂbuf_put_zîos
(
msg
,  *nfm);

1355 
nfm
->
comm™d
 = 
	`oÂutû_tid_comm™d
(
fm
, 
¥Ÿocﬁ
);

1356 
nfm
->
cookõ
 = 
fm
->
√w_cookõ
;

1357 
m©ch_Àn
 = 
	`nx_put_m©ch
(
msg
, &
fm
->
m©ch
, fm->
cookõ
, fm->
cookõ_mask
);

1358 
nfm
 = 
msg
->
l3
;

1359 
nfm
->
idÀ_timeout
 = 
	`ht⁄s
(
fm
->idle_timeout);

1360 
nfm
->
h¨d_timeout
 = 
	`ht⁄s
(
fm
->hard_timeout);

1361 
nfm
->
¥i‹ôy
 = 
	`ht⁄s
(
fm
->priority);

1362 
nfm
->
buf„r_id
 = 
	`ht⁄l
(
fm
->buffer_id);

1363 
nfm
->
out_p‹t
 = 
	`ht⁄s
(
fm
->out_port);

1364 
nfm
->
Êags
 = 
	`ht⁄s
(
fm
->flags);

1365 
nfm
->
m©ch_Àn
 = 
	`ht⁄s
(match_len);

1366 
	`oÂa˘s_put_›íÊow10
(
fm
->
oÂa˘s
, fm->
oÂa˘s_Àn
, 
msg
);

1371 
	`NOT_REACHED
();

1374 
	`oÂmsg_upd©e_Àngth
(
msg
);

1375  
msg
;

1376 
	}
}

1383 
oÂutû_¥Ÿocﬁ


1384 
	$oÂutû_Êow_mod_ußbÀ_¥Ÿocﬁs
(c⁄° 
oÂutû_Êow_mod
 *
fms
,

1385 
size_t
 
n_fms
)

1387 
oÂutû_¥Ÿocﬁ
 
ußbÀ_¥Ÿocﬁs
;

1388 
size_t
 
i
;

1390 
ußbÀ_¥Ÿocﬁs
 = 
OFPUTIL_P_ANY
;

1391 
i
 = 0; i < 
n_fms
; i++) {

1392 c⁄° 
oÂutû_Êow_mod
 *
fm
 = &
fms
[
i
];

1394 
ußbÀ_¥Ÿocﬁs
 &
	`oÂutû_ußbÀ_¥Ÿocﬁs
(&
fm
->
m©ch
);

1395 i‡(
fm
->
èbÀ_id
 != 0xff) {

1396 
ußbÀ_¥Ÿocﬁs
 &
OFPUTIL_P_TID
;

1400 i‡(
fm
->
cookõ_mask
 !
	`ht⁄Œ
(0)) {

1401 
ußbÀ_¥Ÿocﬁs
 &
OFPUTIL_P_NXM_ANY
;

1405  
ußbÀ_¥Ÿocﬁs
;

1406 
	}
}

1408 
oÂîr


1409 
	$oÂutû_decode_oÂ°10_Êow_ªque°
(
oÂutû_Êow_°©s_ªque°
 *
f§
,

1410 c⁄° 
oÂ10_Êow_°©s_ªque°
 *
of§
,

1411 
boﬁ
 
aggªg©e
)

1413 
f§
->
aggªg©e
 =ággregate;

1414 
	`oÂutû_m©ch_‰om_oÂ10_m©ch
(&
of§
->
m©ch
, &
f§
->match);

1415 
f§
->
out_p‹t
 = 
	`¡ohs
(
of§
->out_port);

1416 
f§
->
èbÀ_id
 = 
of§
->table_id;

1417 
f§
->
cookõ
 = f§->
cookõ_mask
 = 
	`ht⁄Œ
(0);

1420 
	}
}

1422 
oÂîr


1423 
	$oÂutû_decode_oÂ°11_Êow_ªque°
(
oÂutû_Êow_°©s_ªque°
 *
f§
,

1424 
oÂbuf
 *
b
, 
boﬁ
 
aggªg©e
)

1426 c⁄° 
oÂ11_Êow_°©s_ªque°
 *
of§
;

1427 
oÂîr
 
îr‹
;

1429 
of§
 = 
	`oÂbuf_puŒ
(
b
,  *ofsr);

1430 
f§
->
aggªg©e
 =ággregate;

1431 
f§
->
èbÀ_id
 = 
of§
->table_id;

1432 
îr‹
 = 
	`oÂutû_p‹t_‰om_oÂ11
(
of§
->
out_p‹t
, &
f§
->out_port);

1433 i‡(
îr‹
) {

1434  
îr‹
;

1436 i‡(
of§
->
out_group
 !
	`ht⁄l
(
OFPG11_ANY
)) {

1437  
OFPERR_OFPFMFC_UNKNOWN
;

1439 
f§
->
cookõ
 = 
of§
->cookie;

1440 
f§
->
cookõ_mask
 = 
of§
->cookie_mask;

1441 
îr‹
 = 
	`oÂutû_puŒ_oÂ11_m©ch
(
b
, &
f§
->
m©ch
, 
NULL
);

1442 i‡(
îr‹
) {

1443  
îr‹
;

1447 
	}
}

1449 
oÂîr


1450 
	$oÂutû_decode_nx°_Êow_ªque°
(
oÂutû_Êow_°©s_ªque°
 *
f§
,

1451 
oÂbuf
 *
b
, 
boﬁ
 
aggªg©e
)

1453 c⁄° 
nx_Êow_°©s_ªque°
 *
nf§
;

1454 
oÂîr
 
îr‹
;

1456 
nf§
 = 
	`oÂbuf_puŒ
(
b
,  *nfsr);

1457 
îr‹
 = 
	`nx_puŒ_m©ch
(
b
, 
	`¡ohs
(
nf§
->
m©ch_Àn
), &
f§
->
m©ch
,

1458 &
f§
->
cookõ
, &f§->
cookõ_mask
);

1459 i‡(
îr‹
) {

1460  
îr‹
;

1462 i‡(
b
->
size
) {

1463  
OFPERR_OFPBRC_BAD_LEN
;

1466 
f§
->
aggªg©e
 =ággregate;

1467 
f§
->
out_p‹t
 = 
	`¡ohs
(
nf§
->out_port);

1468 
f§
->
èbÀ_id
 = 
nf§
->table_id;

1471 
	}
}

1476 
oÂîr


1477 
	$oÂutû_decode_Êow_°©s_ªque°
(
oÂutû_Êow_°©s_ªque°
 *
f§
,

1478 c⁄° 
oÂ_hódî
 *
oh
)

1480 
oÂøw
 
øw
;

1481 
oÂbuf
 
b
;

1483 
	`oÂbuf_u£_c⁄°
(&
b
, 
oh
, 
	`¡ohs
(oh->
Àngth
));

1484 
øw
 = 
	`oÂøw_puŒ_as£π
(&
b
);

1485 (Ë
øw
) {

1486 
OFPRAW_OFPST10_FLOW_REQUEST
:

1487  
	`oÂutû_decode_oÂ°10_Êow_ªque°
(
f§
, 
b
.
d©a
, 
Ál£
);

1489 
OFPRAW_OFPST10_AGGREGATE_REQUEST
:

1490  
	`oÂutû_decode_oÂ°10_Êow_ªque°
(
f§
, 
b
.
d©a
, 
åue
);

1492 
OFPRAW_OFPST11_FLOW_REQUEST
:

1493  
	`oÂutû_decode_oÂ°11_Êow_ªque°
(
f§
, &
b
, 
Ál£
);

1495 
OFPRAW_OFPST11_AGGREGATE_REQUEST
:

1496  
	`oÂutû_decode_oÂ°11_Êow_ªque°
(
f§
, &
b
, 
åue
);

1498 
OFPRAW_NXST_FLOW_REQUEST
:

1499  
	`oÂutû_decode_nx°_Êow_ªque°
(
f§
, &
b
, 
Ál£
);

1501 
OFPRAW_NXST_AGGREGATE_REQUEST
:

1502  
	`oÂutû_decode_nx°_Êow_ªque°
(
f§
, &
b
, 
åue
);

1506 
	`NOT_REACHED
();

1508 
	}
}

1513 
oÂbuf
 *

1514 
	$oÂutû_ícode_Êow_°©s_ªque°
(c⁄° 
oÂutû_Êow_°©s_ªque°
 *
f§
,

1515 
oÂutû_¥Ÿocﬁ
 
¥Ÿocﬁ
)

1517 
oÂbuf
 *
msg
;

1518 
oÂøw
 
øw
;

1520 
¥Ÿocﬁ
) {

1521 
OFPUTIL_P_OF12
: {

1522 
oÂ11_Êow_°©s_ªque°
 *
of§
;

1524 
øw
 = (
f§
->
aggªg©e


1525 ? 
OFPRAW_OFPST11_AGGREGATE_REQUEST


1526 : 
OFPRAW_OFPST11_FLOW_REQUEST
);

1527 
msg
 = 
	`oÂøw_Æloc
(
øw
, 
OFP12_VERSION
, 
NXM_TYPICAL_LEN
);

1528 
of§
 = 
	`oÂbuf_put_zîos
(
msg
,  *ofsr);

1529 
of§
->
èbÀ_id
 = 
f§
->table_id;

1530 
of§
->
out_p‹t
 = 
	`oÂutû_p‹t_to_oÂ11
(
f§
->out_port);

1531 
of§
->
out_group
 = 
	`ht⁄l
(
OFPG11_ANY
);

1532 
of§
->
cookõ
 = 
f§
->cookie;

1533 
of§
->
cookõ_mask
 = 
f§
->cookie_mask;

1534 
	`oxm_put_m©ch
(
msg
, &
f§
->
m©ch
);

1538 
OFPUTIL_P_OF10
:

1539 
OFPUTIL_P_OF10_TID
: {

1540 
oÂ10_Êow_°©s_ªque°
 *
of§
;

1542 
øw
 = (
f§
->
aggªg©e


1543 ? 
OFPRAW_OFPST10_AGGREGATE_REQUEST


1544 : 
OFPRAW_OFPST10_FLOW_REQUEST
);

1545 
msg
 = 
	`oÂøw_Æloc
(
øw
, 
OFP10_VERSION
, 0);

1546 
of§
 = 
	`oÂbuf_put_zîos
(
msg
,  *ofsr);

1547 
	`oÂutû_m©ch_to_oÂ10_m©ch
(&
f§
->
m©ch
, &
of§
->match);

1548 
of§
->
èbÀ_id
 = 
f§
->table_id;

1549 
of§
->
out_p‹t
 = 
	`ht⁄s
(
f§
->out_port);

1553 
OFPUTIL_P_NXM
:

1554 
OFPUTIL_P_NXM_TID
: {

1555 
nx_Êow_°©s_ªque°
 *
nf§
;

1556 
m©ch_Àn
;

1558 
øw
 = (
f§
->
aggªg©e


1559 ? 
OFPRAW_NXST_AGGREGATE_REQUEST


1560 : 
OFPRAW_NXST_FLOW_REQUEST
);

1561 
msg
 = 
	`oÂøw_Æloc
(
øw
, 
OFP10_VERSION
, 
NXM_TYPICAL_LEN
);

1562 
	`oÂbuf_put_zîos
(
msg
,  *
nf§
);

1563 
m©ch_Àn
 = 
	`nx_put_m©ch
(
msg
, &
f§
->
m©ch
,

1564 
f§
->
cookõ
, f§->
cookõ_mask
);

1566 
nf§
 = 
msg
->
l3
;

1567 
nf§
->
out_p‹t
 = 
	`ht⁄s
(
f§
->out_port);

1568 
nf§
->
m©ch_Àn
 = 
	`ht⁄s
(match_len);

1569 
nf§
->
èbÀ_id
 = 
f§
->table_id;

1574 
	`NOT_REACHED
();

1577  
msg
;

1578 
	}
}

1584 
oÂutû_¥Ÿocﬁ


1585 
	$oÂutû_Êow_°©s_ªque°_ußbÀ_¥Ÿocﬁs
(

1586 c⁄° 
oÂutû_Êow_°©s_ªque°
 *
f§
)

1588 
oÂutû_¥Ÿocﬁ
 
ußbÀ_¥Ÿocﬁs
;

1590 
ußbÀ_¥Ÿocﬁs
 = 
	`oÂutû_ußbÀ_¥Ÿocﬁs
(&
f§
->
m©ch
);

1591 i‡(
f§
->
cookõ_mask
 !
	`ht⁄Œ
(0)) {

1592 
ußbÀ_¥Ÿocﬁs
 &
OFPUTIL_P_NXM_ANY
;

1594  
ußbÀ_¥Ÿocﬁs
;

1595 
	}
}

1618 
	$oÂutû_decode_Êow_°©s_ª∂y
(
oÂutû_Êow_°©s
 *
fs
,

1619 
oÂbuf
 *
msg
,

1620 
boﬁ
 
Êow_age_exãnsi⁄
,

1621 
oÂbuf
 *
oÂa˘s
)

1623 
oÂîr
 
îr‹
;

1624 
oÂøw
 
øw
;

1626 
îr‹
 = (
msg
->
l2


1627 ? 
	`oÂøw_decode
(&
øw
, 
msg
->
l2
)

1628 : 
	`oÂøw_puŒ
(&
øw
, 
msg
));

1629 i‡(
îr‹
) {

1630  
îr‹
;

1633 i‡(!
msg
->
size
) {

1634  
EOF
;

1635 } i‡(
øw
 =
OFPRAW_OFPST11_FLOW_REPLY
) {

1636 c⁄° 
oÂ11_Êow_°©s
 *
ofs
;

1637 
size_t
 
Àngth
;

1638 
uöt16_t
 
∑dded_m©ch_Àn
;

1640 
ofs
 = 
	`oÂbuf_åy_puŒ
(
msg
,  *ofs);

1641 i‡(!
ofs
) {

1642 
	`VLOG_WARN_RL
(&
bad_ofmsg_æ
, "OFPST_FLOWÑeply has %zuÜeftover "

1643 "byã†©Énd", 
msg
->
size
);

1644  
EINVAL
;

1647 
Àngth
 = 
	`¡ohs
(
ofs
->length);

1648 i‡(
Àngth
 <  *
ofs
) {

1649 
	`VLOG_WARN_RL
(&
bad_ofmsg_æ
, "OFPST_FLOWÑeply claims invalid "

1650 "Àngth %zu", 
Àngth
);

1651  
EINVAL
;

1654 i‡(
	`oÂutû_puŒ_oÂ11_m©ch
(
msg
, &
fs
->
m©ch
, &
∑dded_m©ch_Àn
)) {

1655 
	`VLOG_WARN_RL
(&
bad_ofmsg_æ
, "OFPST_FLOWÑeply bad match");

1656  
EINVAL
;

1659 i‡(
	`oÂa˘s_puŒ_›íÊow11_ö°ru˘i⁄s
(
msg
, 
Àngth
 -  *
ofs
 -

1660 
∑dded_m©ch_Àn
, 
oÂa˘s
)) {

1661 
	`VLOG_WARN_RL
(&
bad_ofmsg_æ
, "OFPST_FLOWÑeply bad instructions");

1662  
EINVAL
;

1665 
fs
->
¥i‹ôy
 = 
	`¡ohs
(
ofs
->priority);

1666 
fs
->
èbÀ_id
 = 
ofs
->table_id;

1667 
fs
->
duøti⁄_£c
 = 
	`¡ohl
(
ofs
->duration_sec);

1668 
fs
->
duøti⁄_n£c
 = 
	`¡ohl
(
ofs
->duration_nsec);

1669 
fs
->
idÀ_timeout
 = 
	`¡ohs
(
ofs
->idle_timeout);

1670 
fs
->
h¨d_timeout
 = 
	`¡ohs
(
ofs
->hard_timeout);

1671 
fs
->
idÀ_age
 = -1;

1672 
fs
->
h¨d_age
 = -1;

1673 
fs
->
cookõ
 = 
ofs
->cookie;

1674 
fs
->
∑ckë_cou¡
 = 
	`¡ohŒ
(
ofs
->packet_count);

1675 
fs
->
byã_cou¡
 = 
	`¡ohŒ
(
ofs
->byte_count);

1676 } i‡(
øw
 =
OFPRAW_OFPST10_FLOW_REPLY
) {

1677 c⁄° 
oÂ10_Êow_°©s
 *
ofs
;

1678 
size_t
 
Àngth
;

1680 
ofs
 = 
	`oÂbuf_åy_puŒ
(
msg
,  *ofs);

1681 i‡(!
ofs
) {

1682 
	`VLOG_WARN_RL
(&
bad_ofmsg_æ
, "OFPST_FLOWÑeply has %zuÜeftover "

1683 "byã†©Énd", 
msg
->
size
);

1684  
EINVAL
;

1687 
Àngth
 = 
	`¡ohs
(
ofs
->length);

1688 i‡(
Àngth
 <  *
ofs
) {

1689 
	`VLOG_WARN_RL
(&
bad_ofmsg_æ
, "OFPST_FLOWÑeply claims invalid "

1690 "Àngth %zu", 
Àngth
);

1691  
EINVAL
;

1694 i‡(
	`oÂa˘s_puŒ_›íÊow10
(
msg
, 
Àngth
 -  *
ofs
, 
oÂa˘s
)) {

1695  
EINVAL
;

1698 
fs
->
cookõ
 = 
	`gë_32Æig√d_be64
(&
ofs
->cookie);

1699 
	`oÂutû_m©ch_‰om_oÂ10_m©ch
(&
ofs
->
m©ch
, &
fs
->match);

1700 
fs
->
¥i‹ôy
 = 
	`¡ohs
(
ofs
->priority);

1701 
fs
->
èbÀ_id
 = 
ofs
->table_id;

1702 
fs
->
duøti⁄_£c
 = 
	`¡ohl
(
ofs
->duration_sec);

1703 
fs
->
duøti⁄_n£c
 = 
	`¡ohl
(
ofs
->duration_nsec);

1704 
fs
->
idÀ_timeout
 = 
	`¡ohs
(
ofs
->idle_timeout);

1705 
fs
->
h¨d_timeout
 = 
	`¡ohs
(
ofs
->hard_timeout);

1706 
fs
->
idÀ_age
 = -1;

1707 
fs
->
h¨d_age
 = -1;

1708 
fs
->
∑ckë_cou¡
 = 
	`¡ohŒ
(
	`gë_32Æig√d_be64
(&
ofs
->packet_count));

1709 
fs
->
byã_cou¡
 = 
	`¡ohŒ
(
	`gë_32Æig√d_be64
(&
ofs
->byte_count));

1710 } i‡(
øw
 =
OFPRAW_NXST_FLOW_REPLY
) {

1711 c⁄° 
nx_Êow_°©s
 *
nfs
;

1712 
size_t
 
m©ch_Àn
, 
a˘i⁄s_Àn
, 
Àngth
;

1714 
nfs
 = 
	`oÂbuf_åy_puŒ
(
msg
,  *nfs);

1715 i‡(!
nfs
) {

1716 
	`VLOG_WARN_RL
(&
bad_ofmsg_æ
, "NXST_FLOWÑeply has %zuÜeftover "

1717 "byã†©Énd", 
msg
->
size
);

1718  
EINVAL
;

1721 
Àngth
 = 
	`¡ohs
(
nfs
->length);

1722 
m©ch_Àn
 = 
	`¡ohs
(
nfs
->match_len);

1723 i‡(
Àngth
 <  *
nfs
 + 
	`ROUND_UP
(
m©ch_Àn
, 8)) {

1724 
	`VLOG_WARN_RL
(&
bad_ofmsg_æ
, "NXST_FLOWÑeply with match_len=%zu "

1725 "˛aim†övÆidÜígth %zu", 
m©ch_Àn
, 
Àngth
);

1726  
EINVAL
;

1728 i‡(
	`nx_puŒ_m©ch
(
msg
, 
m©ch_Àn
, &
fs
->
m©ch
, 
NULL
, NULL)) {

1729  
EINVAL
;

1732 
a˘i⁄s_Àn
 = 
Àngth
 -  *
nfs
 - 
	`ROUND_UP
(
m©ch_Àn
, 8);

1733 i‡(
	`oÂa˘s_puŒ_›íÊow10
(
msg
, 
a˘i⁄s_Àn
, 
oÂa˘s
)) {

1734  
EINVAL
;

1737 
fs
->
cookõ
 = 
nfs
->cookie;

1738 
fs
->
èbÀ_id
 = 
nfs
->table_id;

1739 
fs
->
duøti⁄_£c
 = 
	`¡ohl
(
nfs
->duration_sec);

1740 
fs
->
duøti⁄_n£c
 = 
	`¡ohl
(
nfs
->duration_nsec);

1741 
fs
->
¥i‹ôy
 = 
	`¡ohs
(
nfs
->priority);

1742 
fs
->
idÀ_timeout
 = 
	`¡ohs
(
nfs
->idle_timeout);

1743 
fs
->
h¨d_timeout
 = 
	`¡ohs
(
nfs
->hard_timeout);

1744 
fs
->
idÀ_age
 = -1;

1745 
fs
->
h¨d_age
 = -1;

1746 i‡(
Êow_age_exãnsi⁄
) {

1747 i‡(
nfs
->
idÀ_age
) {

1748 
fs
->
idÀ_age
 = 
	`¡ohs
(
nfs
->idle_age) - 1;

1750 i‡(
nfs
->
h¨d_age
) {

1751 
fs
->
h¨d_age
 = 
	`¡ohs
(
nfs
->hard_age) - 1;

1754 
fs
->
∑ckë_cou¡
 = 
	`¡ohŒ
(
nfs
->packet_count);

1755 
fs
->
byã_cou¡
 = 
	`¡ohŒ
(
nfs
->byte_count);

1757 
	`NOT_REACHED
();

1760 
fs
->
oÂa˘s
 = oÂa˘s->
d©a
;

1761 
fs
->
oÂa˘s_Àn
 = 
oÂa˘s
->
size
;

1764 
	}
}

1770 
uöt64_t


1771 
	$unknown_to_zîo
(
uöt64_t
 
cou¡
)

1773  
cou¡
 !
UINT64_MAX
 ? count : 0;

1774 
	}
}

1780 
	$oÂutû_≠≥nd_Êow_°©s_ª∂y
(c⁄° 
oÂutû_Êow_°©s
 *
fs
,

1781 
li°
 *
ª∂õs
)

1783 
oÂbuf
 *
ª∂y
 = 
	`oÂbuf_‰om_li°
(
	`li°_back
(
ª∂õs
));

1784 
size_t
 
°¨t_ofs
 = 
ª∂y
->
size
;

1785 
oÂøw
 
øw
;

1787 
	`oÂøw_decode_∑πül
(&
øw
, 
ª∂y
->
d©a
,Ñïly->
size
);

1788 i‡(
øw
 =
OFPRAW_OFPST11_FLOW_REPLY
) {

1789 
oÂ11_Êow_°©s
 *
ofs
;

1791 
	`oÂbuf_put_unöô
(
ª∂y
,  *
ofs
);

1792 
	`oxm_put_m©ch
(
ª∂y
, &
fs
->
m©ch
);

1793 
	`oÂa˘s_put_›íÊow11_ö°ru˘i⁄s
(
fs
->
oÂa˘s
, fs->
oÂa˘s_Àn
,

1794 
ª∂y
);

1796 
ofs
 = 
	`oÂbuf_©_as£π
(
ª∂y
, 
°¨t_ofs
,  *ofs);

1797 
ofs
->
Àngth
 = 
	`ht⁄s
(
ª∂y
->
size
 - 
°¨t_ofs
);

1798 
ofs
->
èbÀ_id
 = 
fs
->table_id;

1799 
ofs
->
∑d
 = 0;

1800 
ofs
->
duøti⁄_£c
 = 
	`ht⁄l
(
fs
->duration_sec);

1801 
ofs
->
duøti⁄_n£c
 = 
	`ht⁄l
(
fs
->duration_nsec);

1802 
ofs
->
¥i‹ôy
 = 
	`ht⁄s
(
fs
->priority);

1803 
ofs
->
idÀ_timeout
 = 
	`ht⁄s
(
fs
->idle_timeout);

1804 
ofs
->
h¨d_timeout
 = 
	`ht⁄s
(
fs
->hard_timeout);

1805 
	`mem£t
(
ofs
->
∑d2
, 0,  ofs->pad2);

1806 
ofs
->
cookõ
 = 
fs
->cookie;

1807 
ofs
->
∑ckë_cou¡
 = 
	`ht⁄Œ
(
	`unknown_to_zîo
(
fs
->packet_count));

1808 
ofs
->
byã_cou¡
 = 
	`ht⁄Œ
(
	`unknown_to_zîo
(
fs
->byte_count));

1809 } i‡(
øw
 =
OFPRAW_OFPST10_FLOW_REPLY
) {

1810 
oÂ10_Êow_°©s
 *
ofs
;

1812 
	`oÂbuf_put_unöô
(
ª∂y
,  *
ofs
);

1813 
	`oÂa˘s_put_›íÊow10
(
fs
->
oÂa˘s
, fs->
oÂa˘s_Àn
, 
ª∂y
);

1815 
ofs
 = 
	`oÂbuf_©_as£π
(
ª∂y
, 
°¨t_ofs
,  *ofs);

1816 
ofs
->
Àngth
 = 
	`ht⁄s
(
ª∂y
->
size
 - 
°¨t_ofs
);

1817 
ofs
->
èbÀ_id
 = 
fs
->table_id;

1818 
ofs
->
∑d
 = 0;

1819 
	`oÂutû_m©ch_to_oÂ10_m©ch
(&
fs
->
m©ch
, &
ofs
->match);

1820 
ofs
->
duøti⁄_£c
 = 
	`ht⁄l
(
fs
->duration_sec);

1821 
ofs
->
duøti⁄_n£c
 = 
	`ht⁄l
(
fs
->duration_nsec);

1822 
ofs
->
¥i‹ôy
 = 
	`ht⁄s
(
fs
->priority);

1823 
ofs
->
idÀ_timeout
 = 
	`ht⁄s
(
fs
->idle_timeout);

1824 
ofs
->
h¨d_timeout
 = 
	`ht⁄s
(
fs
->hard_timeout);

1825 
	`mem£t
(
ofs
->
∑d2
, 0,  ofs->pad2);

1826 
	`put_32Æig√d_be64
(&
ofs
->
cookõ
, 
fs
->cookie);

1827 
	`put_32Æig√d_be64
(&
ofs
->
∑ckë_cou¡
,

1828 
	`ht⁄Œ
(
	`unknown_to_zîo
(
fs
->
∑ckë_cou¡
)));

1829 
	`put_32Æig√d_be64
(&
ofs
->
byã_cou¡
,

1830 
	`ht⁄Œ
(
	`unknown_to_zîo
(
fs
->
byã_cou¡
)));

1831 } i‡(
øw
 =
OFPRAW_NXST_FLOW_REPLY
) {

1832 
nx_Êow_°©s
 *
nfs
;

1833 
m©ch_Àn
;

1835 
	`oÂbuf_put_unöô
(
ª∂y
,  *
nfs
);

1836 
m©ch_Àn
 = 
	`nx_put_m©ch
(
ª∂y
, &
fs
->
m©ch
, 0, 0);

1837 
	`oÂa˘s_put_›íÊow10
(
fs
->
oÂa˘s
, fs->
oÂa˘s_Àn
, 
ª∂y
);

1839 
nfs
 = 
	`oÂbuf_©_as£π
(
ª∂y
, 
°¨t_ofs
,  *nfs);

1840 
nfs
->
Àngth
 = 
	`ht⁄s
(
ª∂y
->
size
 - 
°¨t_ofs
);

1841 
nfs
->
èbÀ_id
 = 
fs
->table_id;

1842 
nfs
->
∑d
 = 0;

1843 
nfs
->
duøti⁄_£c
 = 
	`ht⁄l
(
fs
->duration_sec);

1844 
nfs
->
duøti⁄_n£c
 = 
	`ht⁄l
(
fs
->duration_nsec);

1845 
nfs
->
¥i‹ôy
 = 
	`ht⁄s
(
fs
->priority);

1846 
nfs
->
idÀ_timeout
 = 
	`ht⁄s
(
fs
->idle_timeout);

1847 
nfs
->
h¨d_timeout
 = 
	`ht⁄s
(
fs
->hard_timeout);

1848 
nfs
->
idÀ_age
 = 
	`ht⁄s
(
fs
->idle_age < 0 ? 0

1849 : 
fs
->
idÀ_age
 < 
UINT16_MAX
 ? fs->idle_age + 1

1850 : 
UINT16_MAX
);

1851 
nfs
->
h¨d_age
 = 
	`ht⁄s
(
fs
->hard_age < 0 ? 0

1852 : 
fs
->
h¨d_age
 < 
UINT16_MAX
 ? fs->hard_age + 1

1853 : 
UINT16_MAX
);

1854 
nfs
->
m©ch_Àn
 = 
	`ht⁄s
(match_len);

1855 
nfs
->
cookõ
 = 
fs
->cookie;

1856 
nfs
->
∑ckë_cou¡
 = 
	`ht⁄Œ
(
fs
->packet_count);

1857 
nfs
->
byã_cou¡
 = 
	`ht⁄Œ
(
fs
->byte_count);

1859 
	`NOT_REACHED
();

1862 
	`oÂmp_po°≠≥nd
(
ª∂õs
, 
°¨t_ofs
);

1863 
	}
}

1867 
oÂbuf
 *

1868 
	$oÂutû_ícode_aggªg©e_°©s_ª∂y
(

1869 c⁄° 
oÂutû_aggªg©e_°©s
 *
°©s
,

1870 c⁄° 
oÂ_hódî
 *
ªque°
)

1872 
oÂ_aggªg©e_°©s_ª∂y
 *
a§
;

1873 
uöt64_t
 
∑ckë_cou¡
;

1874 
uöt64_t
 
byã_cou¡
;

1875 
oÂbuf
 *
msg
;

1876 
oÂøw
 
øw
;

1878 
	`oÂøw_decode
(&
øw
, 
ªque°
);

1879 i‡(
øw
 =
OFPRAW_OFPST10_AGGREGATE_REQUEST
) {

1880 
∑ckë_cou¡
 = 
	`unknown_to_zîo
(
°©s
->packet_count);

1881 
byã_cou¡
 = 
	`unknown_to_zîo
(
°©s
->byte_count);

1883 
∑ckë_cou¡
 = 
°©s
->packet_count;

1884 
byã_cou¡
 = 
°©s
->byte_count;

1887 
msg
 = 
	`oÂøw_Æloc_°©s_ª∂y
(
ªque°
, 0);

1888 
a§
 = 
	`oÂbuf_put_zîos
(
msg
,  *asr);

1889 
	`put_32Æig√d_be64
(&
a§
->
∑ckë_cou¡
, 
	`ht⁄Œ
(packet_count));

1890 
	`put_32Æig√d_be64
(&
a§
->
byã_cou¡
, 
	`ht⁄Œ
(byte_count));

1891 
a§
->
Êow_cou¡
 = 
	`ht⁄l
(
°©s
->flow_count);

1893  
msg
;

1894 
	}
}

1896 
oÂîr


1897 
	$oÂutû_decode_aggªg©e_°©s_ª∂y
(
oÂutû_aggªg©e_°©s
 *
°©s
,

1898 c⁄° 
oÂ_hódî
 *
ª∂y
)

1900 
oÂ_aggªg©e_°©s_ª∂y
 *
a§
;

1901 
oÂbuf
 
msg
;

1903 
	`oÂbuf_u£_c⁄°
(&
msg
, 
ª∂y
, 
	`¡ohs
‘ïly->
Àngth
));

1904 
	`oÂøw_puŒ_as£π
(&
msg
);

1906 
a§
 = 
msg
.
l3
;

1907 
°©s
->
∑ckë_cou¡
 = 
	`¡ohŒ
(
	`gë_32Æig√d_be64
(&
a§
->packet_count));

1908 
°©s
->
byã_cou¡
 = 
	`¡ohŒ
(
	`gë_32Æig√d_be64
(&
a§
->byte_count));

1909 
°©s
->
Êow_cou¡
 = 
	`¡ohl
(
a§
->flow_count);

1912 
	}
}

1917 
oÂîr


1918 
	$oÂutû_decode_Êow_ªmoved
(
oÂutû_Êow_ªmoved
 *
‰
,

1919 c⁄° 
oÂ_hódî
 *
oh
)

1921 
oÂøw
 
øw
;

1922 
oÂbuf
 
b
;

1924 
	`oÂbuf_u£_c⁄°
(&
b
, 
oh
, 
	`¡ohs
(oh->
Àngth
));

1925 
øw
 = 
	`oÂøw_puŒ_as£π
(&
b
);

1926 i‡(
øw
 =
OFPRAW_OFPT11_FLOW_REMOVED
) {

1927 c⁄° 
oÂ12_Êow_ªmoved
 *
o‰
;

1928 
oÂîr
 
îr‹
;

1930 
o‰
 = 
	`oÂbuf_puŒ
(&
b
,  *ofr);

1932 
îr‹
 = 
	`oÂutû_puŒ_oÂ11_m©ch
(&
b
, &
‰
->
m©ch
, 
NULL
);

1933 i‡(
îr‹
) {

1934  
îr‹
;

1937 
‰
->
¥i‹ôy
 = 
	`¡ohs
(
o‰
->priority);

1938 
‰
->
cookõ
 = 
o‰
->cookie;

1939 
‰
->
ªas⁄
 = 
o‰
->reason;

1940 
‰
->
èbÀ_id
 = 
o‰
->table_id;

1941 
‰
->
duøti⁄_£c
 = 
	`¡ohl
(
o‰
->duration_sec);

1942 
‰
->
duøti⁄_n£c
 = 
	`¡ohl
(
o‰
->duration_nsec);

1943 
‰
->
idÀ_timeout
 = 
	`¡ohs
(
o‰
->idle_timeout);

1944 
‰
->
h¨d_timeout
 = 
	`¡ohs
(
o‰
->hard_timeout);

1945 
‰
->
∑ckë_cou¡
 = 
	`¡ohŒ
(
o‰
->packet_count);

1946 
‰
->
byã_cou¡
 = 
	`¡ohŒ
(
o‰
->byte_count);

1947 } i‡(
øw
 =
OFPRAW_OFPT10_FLOW_REMOVED
) {

1948 c⁄° 
oÂ_Êow_ªmoved
 *
o‰
;

1950 
o‰
 = 
	`oÂbuf_puŒ
(&
b
,  *ofr);

1952 
	`oÂutû_m©ch_‰om_oÂ10_m©ch
(&
o‰
->
m©ch
, &
‰
->match);

1953 
‰
->
¥i‹ôy
 = 
	`¡ohs
(
o‰
->priority);

1954 
‰
->
cookõ
 = 
o‰
->cookie;

1955 
‰
->
ªas⁄
 = 
o‰
->reason;

1956 
‰
->
èbÀ_id
 = 255;

1957 
‰
->
duøti⁄_£c
 = 
	`¡ohl
(
o‰
->duration_sec);

1958 
‰
->
duøti⁄_n£c
 = 
	`¡ohl
(
o‰
->duration_nsec);

1959 
‰
->
idÀ_timeout
 = 
	`¡ohs
(
o‰
->idle_timeout);

1960 
‰
->
h¨d_timeout
 = 0;

1961 
‰
->
∑ckë_cou¡
 = 
	`¡ohŒ
(
o‰
->packet_count);

1962 
‰
->
byã_cou¡
 = 
	`¡ohŒ
(
o‰
->byte_count);

1963 } i‡(
øw
 =
OFPRAW_NXT_FLOW_REMOVED
) {

1964 
nx_Êow_ªmoved
 *
n‰
;

1965 
oÂîr
 
îr‹
;

1967 
n‰
 = 
	`oÂbuf_puŒ
(&
b
,  *nfr);

1968 
îr‹
 = 
	`nx_puŒ_m©ch
(&
b
, 
	`¡ohs
(
n‰
->
m©ch_Àn
), &
‰
->
m©ch
,

1969 
NULL
, NULL);

1970 i‡(
îr‹
) {

1971  
îr‹
;

1973 i‡(
b
.
size
) {

1974  
OFPERR_OFPBRC_BAD_LEN
;

1977 
‰
->
¥i‹ôy
 = 
	`¡ohs
(
n‰
->priority);

1978 
‰
->
cookõ
 = 
n‰
->cookie;

1979 
‰
->
ªas⁄
 = 
n‰
->reason;

1980 
‰
->
èbÀ_id
 = 255;

1981 
‰
->
duøti⁄_£c
 = 
	`¡ohl
(
n‰
->duration_sec);

1982 
‰
->
duøti⁄_n£c
 = 
	`¡ohl
(
n‰
->duration_nsec);

1983 
‰
->
idÀ_timeout
 = 
	`¡ohs
(
n‰
->idle_timeout);

1984 
‰
->
h¨d_timeout
 = 0;

1985 
‰
->
∑ckë_cou¡
 = 
	`¡ohŒ
(
n‰
->packet_count);

1986 
‰
->
byã_cou¡
 = 
	`¡ohŒ
(
n‰
->byte_count);

1988 
	`NOT_REACHED
();

1992 
	}
}

1997 
oÂbuf
 *

1998 
	$oÂutû_ícode_Êow_ªmoved
(c⁄° 
oÂutû_Êow_ªmoved
 *
‰
,

1999 
oÂutû_¥Ÿocﬁ
 
¥Ÿocﬁ
)

2001 
oÂbuf
 *
msg
;

2003 
¥Ÿocﬁ
) {

2004 
OFPUTIL_P_OF12
: {

2005 
oÂ12_Êow_ªmoved
 *
o‰
;

2007 
msg
 = 
	`oÂøw_Æloc_xid
(
OFPRAW_OFPT11_FLOW_REMOVED
,

2008 
	`oÂutû_¥Ÿocﬁ_to_oÂ_vîsi⁄
(
¥Ÿocﬁ
),

2009 
	`ht⁄l
(0), 
NXM_TYPICAL_LEN
);

2010 
o‰
 = 
	`oÂbuf_put_zîos
(
msg
,  *ofr);

2011 
o‰
->
cookõ
 = 
‰
->cookie;

2012 
o‰
->
¥i‹ôy
 = 
	`ht⁄s
(
‰
->priority);

2013 
o‰
->
ªas⁄
 = 
‰
->reason;

2014 
o‰
->
èbÀ_id
 = 
‰
->table_id;

2015 
o‰
->
duøti⁄_£c
 = 
	`ht⁄l
(
‰
->duration_sec);

2016 
o‰
->
duøti⁄_n£c
 = 
	`ht⁄l
(
‰
->duration_nsec);

2017 
o‰
->
idÀ_timeout
 = 
	`ht⁄s
(
‰
->idle_timeout);

2018 
o‰
->
h¨d_timeout
 = 
	`ht⁄s
(
‰
->hard_timeout);

2019 
o‰
->
∑ckë_cou¡
 = 
	`ht⁄Œ
(
‰
->packet_count);

2020 
o‰
->
byã_cou¡
 = 
	`ht⁄Œ
(
‰
->byte_count);

2021 
	`oxm_put_m©ch
(
msg
, &
‰
->
m©ch
);

2025 
OFPUTIL_P_OF10
:

2026 
OFPUTIL_P_OF10_TID
: {

2027 
oÂ_Êow_ªmoved
 *
o‰
;

2029 
msg
 = 
	`oÂøw_Æloc_xid
(
OFPRAW_OFPT10_FLOW_REMOVED
, 
OFP10_VERSION
,

2030 
	`ht⁄l
(0), 0);

2031 
o‰
 = 
	`oÂbuf_put_zîos
(
msg
,  *ofr);

2032 
	`oÂutû_m©ch_to_oÂ10_m©ch
(&
‰
->
m©ch
, &
o‰
->match);

2033 
o‰
->
cookõ
 = 
‰
->cookie;

2034 
o‰
->
¥i‹ôy
 = 
	`ht⁄s
(
‰
->priority);

2035 
o‰
->
ªas⁄
 = 
‰
->reason;

2036 
o‰
->
duøti⁄_£c
 = 
	`ht⁄l
(
‰
->duration_sec);

2037 
o‰
->
duøti⁄_n£c
 = 
	`ht⁄l
(
‰
->duration_nsec);

2038 
o‰
->
idÀ_timeout
 = 
	`ht⁄s
(
‰
->idle_timeout);

2039 
o‰
->
∑ckë_cou¡
 = 
	`ht⁄Œ
(
	`unknown_to_zîo
(
‰
->packet_count));

2040 
o‰
->
byã_cou¡
 = 
	`ht⁄Œ
(
	`unknown_to_zîo
(
‰
->byte_count));

2044 
OFPUTIL_P_NXM
:

2045 
OFPUTIL_P_NXM_TID
: {

2046 
nx_Êow_ªmoved
 *
n‰
;

2047 
m©ch_Àn
;

2049 
msg
 = 
	`oÂøw_Æloc_xid
(
OFPRAW_NXT_FLOW_REMOVED
, 
OFP10_VERSION
,

2050 
	`ht⁄l
(0), 
NXM_TYPICAL_LEN
);

2051 
n‰
 = 
	`oÂbuf_put_zîos
(
msg
,  *nfr);

2052 
m©ch_Àn
 = 
	`nx_put_m©ch
(
msg
, &
‰
->
m©ch
, 0, 0);

2054 
n‰
 = 
msg
->
l3
;

2055 
n‰
->
cookõ
 = 
‰
->cookie;

2056 
n‰
->
¥i‹ôy
 = 
	`ht⁄s
(
‰
->priority);

2057 
n‰
->
ªas⁄
 = 
‰
->reason;

2058 
n‰
->
duøti⁄_£c
 = 
	`ht⁄l
(
‰
->duration_sec);

2059 
n‰
->
duøti⁄_n£c
 = 
	`ht⁄l
(
‰
->duration_nsec);

2060 
n‰
->
idÀ_timeout
 = 
	`ht⁄s
(
‰
->idle_timeout);

2061 
n‰
->
m©ch_Àn
 = 
	`ht⁄s
(match_len);

2062 
n‰
->
∑ckë_cou¡
 = 
	`ht⁄Œ
(
‰
->packet_count);

2063 
n‰
->
byã_cou¡
 = 
	`ht⁄Œ
(
‰
->byte_count);

2068 
	`NOT_REACHED
();

2071  
msg
;

2072 
	}
}

2075 
	$oÂutû_decode_∑ckë_ö_föish
(
oÂutû_∑ckë_ö
 *
pö
,

2076 
m©ch
 *m©ch, 
oÂbuf
 *
b
)

2078 
pö
->
∑ckë
 = 
b
->
d©a
;

2079 
pö
->
∑ckë_Àn
 = 
b
->
size
;

2081 
pö
->
fmd
.
ö_p‹t
 = 
m©ch
->
Êow
.in_port;

2082 
pö
->
fmd
.
tun_id
 = 
m©ch
->
Êow
.
tu¬ñ
.tun_id;

2083 
pö
->
fmd
.
mëad©a
 = 
m©ch
->
Êow
.metadata;

2084 
	`mem˝y
(
pö
->
fmd
.
ªgs
, 
m©ch
->
Êow
.regs, Öin->fmd.regs);

2085 
	}
}

2087 
oÂîr


2088 
	$oÂutû_decode_∑ckë_ö
(
oÂutû_∑ckë_ö
 *
pö
,

2089 c⁄° 
oÂ_hódî
 *
oh
)

2091 
oÂøw
 
øw
;

2092 
oÂbuf
 
b
;

2094 
	`mem£t
(
pö
, 0,  *pin);

2096 
	`oÂbuf_u£_c⁄°
(&
b
, 
oh
, 
	`¡ohs
(oh->
Àngth
));

2097 
øw
 = 
	`oÂøw_puŒ_as£π
(&
b
);

2098 i‡(
øw
 =
OFPRAW_OFPT12_PACKET_IN
) {

2099 c⁄° 
oÂ12_∑ckë_ö
 *
›i
;

2100 
m©ch
 match;

2101 
îr‹
;

2103 
›i
 = 
	`oÂbuf_puŒ
(&
b
,  *opi);

2104 
îr‹
 = 
	`oxm_puŒ_m©ch_loo£
(&
b
, &
m©ch
);

2105 i‡(
îr‹
) {

2106  
îr‹
;

2109 i‡(!
	`oÂbuf_åy_puŒ
(&
b
, 2)) {

2110  
OFPERR_OFPBRC_BAD_LEN
;

2113 
pö
->
ªas⁄
 = 
›i
->reason;

2114 
pö
->
èbÀ_id
 = 
›i
->table_id;

2116 
pö
->
buf„r_id
 = 
	`¡ohl
(
›i
->buffer_id);

2117 
pö
->
tŸÆ_Àn
 = 
	`¡ohs
(
›i
->total_len);

2119 
	`oÂutû_decode_∑ckë_ö_föish
(
pö
, &
m©ch
, &
b
);

2120 } i‡(
øw
 =
OFPRAW_OFPT10_PACKET_IN
) {

2121 c⁄° 
oÂ_∑ckë_ö
 *
›i
;

2123 
›i
 = 
	`oÂbuf_puŒ
(&
b
, 
	`off£tof
(
oÂ_∑ckë_ö
, 
d©a
));

2125 
pö
->
∑ckë
 = 
›i
->
d©a
;

2126 
pö
->
∑ckë_Àn
 = 
b
.
size
;

2128 
pö
->
fmd
.
ö_p‹t
 = 
	`¡ohs
(
›i
->in_port);

2129 
pö
->
ªas⁄
 = 
›i
->reason;

2130 
pö
->
buf„r_id
 = 
	`¡ohl
(
›i
->buffer_id);

2131 
pö
->
tŸÆ_Àn
 = 
	`¡ohs
(
›i
->total_len);

2132 } i‡(
øw
 =
OFPRAW_NXT_PACKET_IN
) {

2133 c⁄° 
nx_∑ckë_ö
 *
≈i
;

2134 
m©ch
 match;

2135 
îr‹
;

2137 
≈i
 = 
	`oÂbuf_puŒ
(&
b
,  *npi);

2138 
îr‹
 = 
	`nx_puŒ_m©ch_loo£
(&
b
, 
	`¡ohs
(
≈i
->
m©ch_Àn
), &
m©ch
, 
NULL
,

2139 
NULL
);

2140 i‡(
îr‹
) {

2141  
îr‹
;

2144 i‡(!
	`oÂbuf_åy_puŒ
(&
b
, 2)) {

2145  
OFPERR_OFPBRC_BAD_LEN
;

2148 
pö
->
ªas⁄
 = 
≈i
->reason;

2149 
pö
->
èbÀ_id
 = 
≈i
->table_id;

2150 
pö
->
cookõ
 = 
≈i
->cookie;

2152 
pö
->
buf„r_id
 = 
	`¡ohl
(
≈i
->buffer_id);

2153 
pö
->
tŸÆ_Àn
 = 
	`¡ohs
(
≈i
->total_len);

2155 
	`oÂutû_decode_∑ckë_ö_föish
(
pö
, &
m©ch
, &
b
);

2157 
	`NOT_REACHED
();

2161 
	}
}

2164 
	$oÂutû_∑ckë_ö_to_m©ch
(c⁄° 
oÂutû_∑ckë_ö
 *
pö
,

2165 
m©ch
 *match)

2167 
i
;

2169 
	`m©ch_öô_ˇtchÆl
(
m©ch
);

2170 i‡(
pö
->
fmd
.
tun_id
 !
	`ht⁄Œ
(0)) {

2171 
	`m©ch_£t_tun_id
(
m©ch
, 
pö
->
fmd
.
tun_id
);

2173 i‡(
pö
->
fmd
.
mëad©a
 !
	`ht⁄Œ
(0)) {

2174 
	`m©ch_£t_mëad©a
(
m©ch
, 
pö
->
fmd
.
mëad©a
);

2177 
i
 = 0; i < 
FLOW_N_REGS
; i++) {

2178 i‡(
pö
->
fmd
.
ªgs
[
i
]) {

2179 
	`m©ch_£t_ªg
(
m©ch
, 
i
, 
pö
->
fmd
.
ªgs
[i]);

2183 
	`m©ch_£t_ö_p‹t
(
m©ch
, 
pö
->
fmd
.
ö_p‹t
);

2184 
	}
}

2188 
oÂbuf
 *

2189 
	$oÂutû_ícode_∑ckë_ö
(c⁄° 
oÂutû_∑ckë_ö
 *
pö
,

2190 
oÂutû_¥Ÿocﬁ
 
¥Ÿocﬁ
,

2191 
nx_∑ckë_ö_f‹m©
 
∑ckë_ö_f‹m©
)

2193 
size_t
 
£nd_Àn
 = 
	`MIN
(
pö
->£nd_Àn,Öö->
∑ckë_Àn
);

2194 
oÂbuf
 *
∑ckë
;

2197 i‡(
¥Ÿocﬁ
 =
OFPUTIL_P_OF12
) {

2198 
oÂ12_∑ckë_ö
 *
›i
;

2199 
m©ch
 match;

2201 
	`oÂutû_∑ckë_ö_to_m©ch
(
pö
, &
m©ch
);

2204 
∑ckë
 = 
	`oÂøw_Æloc_xid
(
OFPRAW_OFPT12_PACKET_IN
, 
OFP12_VERSION
,

2205 
	`ht⁄l
(0), ((
Êow_mëad©a
) * 2

2206 + 2 + 
£nd_Àn
));

2207 
	`oÂbuf_put_zîos
(
∑ckë
,  *
›i
);

2208 
	`oxm_put_m©ch
(
∑ckë
, &
m©ch
);

2209 
	`oÂbuf_put_zîos
(
∑ckë
, 2);

2210 
	`oÂbuf_put
(
∑ckë
, 
pö
->∑ckë, 
£nd_Àn
);

2212 
›i
 = 
∑ckë
->
l3
;

2213 
›i
->
buf„r_id
 = 
	`ht⁄l
(
pö
->buffer_id);

2214 
›i
->
tŸÆ_Àn
 = 
	`ht⁄s
(
pö
->total_len);

2215 
›i
->
ªas⁄
 = 
pö
->reason;

2216 
›i
->
èbÀ_id
 = 
pö
->table_id;

2217 } i‡(
∑ckë_ö_f‹m©
 =
NXPIF_OPENFLOW10
) {

2218 
oÂ_∑ckë_ö
 *
›i
;

2220 
∑ckë
 = 
	`oÂøw_Æloc_xid
(
OFPRAW_OFPT10_PACKET_IN
, 
OFP10_VERSION
,

2221 
	`ht⁄l
(0), 
£nd_Àn
);

2222 
›i
 = 
	`oÂbuf_put_zîos
(
∑ckë
, 
	`off£tof
(
oÂ_∑ckë_ö
, 
d©a
));

2223 
›i
->
tŸÆ_Àn
 = 
	`ht⁄s
(
pö
->total_len);

2224 
›i
->
ö_p‹t
 = 
	`ht⁄s
(
pö
->
fmd
.in_port);

2225 
›i
->
ªas⁄
 = 
pö
->reason;

2226 
›i
->
buf„r_id
 = 
	`ht⁄l
(
pö
->buffer_id);

2228 
	`oÂbuf_put
(
∑ckë
, 
pö
->∑ckë, 
£nd_Àn
);

2229 } i‡(
∑ckë_ö_f‹m©
 =
NXPIF_NXM
) {

2230 
nx_∑ckë_ö
 *
≈i
;

2231 
m©ch
 match;

2232 
size_t
 
m©ch_Àn
;

2234 
	`oÂutû_∑ckë_ö_to_m©ch
(
pö
, &
m©ch
);

2237 
∑ckë
 = 
	`oÂøw_Æloc_xid
(
OFPRAW_NXT_PACKET_IN
, 
OFP10_VERSION
,

2238 
	`ht⁄l
(0), ((
Êow_mëad©a
) * 2

2239 + 2 + 
£nd_Àn
));

2240 
	`oÂbuf_put_zîos
(
∑ckë
,  *
≈i
);

2241 
m©ch_Àn
 = 
	`nx_put_m©ch
(
∑ckë
, &
m©ch
, 0, 0);

2242 
	`oÂbuf_put_zîos
(
∑ckë
, 2);

2243 
	`oÂbuf_put
(
∑ckë
, 
pö
->∑ckë, 
£nd_Àn
);

2245 
≈i
 = 
∑ckë
->
l3
;

2246 
≈i
->
buf„r_id
 = 
	`ht⁄l
(
pö
->buffer_id);

2247 
≈i
->
tŸÆ_Àn
 = 
	`ht⁄s
(
pö
->total_len);

2248 
≈i
->
ªas⁄
 = 
pö
->reason;

2249 
≈i
->
èbÀ_id
 = 
pö
->table_id;

2250 
≈i
->
cookõ
 = 
pö
->cookie;

2251 
≈i
->
m©ch_Àn
 = 
	`ht⁄s
(match_len);

2253 
	`NOT_REACHED
();

2255 
	`oÂmsg_upd©e_Àngth
(
∑ckë
);

2257  
∑ckë
;

2258 
	}
}

2261 
	$oÂutû_∑ckë_ö_ªas⁄_to_°rög
(
oÂ_∑ckë_ö_ªas⁄
 
ªas⁄
)

2263 
s
[
	`INT_STRLEN
() + 1];

2265 
ªas⁄
) {

2266 
OFPR_NO_MATCH
:

2268 
OFPR_ACTION
:

2270 
OFPR_INVALID_TTL
:

2273 
OFPR_N_REASONS
:

2275 
	`•rötf
(
s
, "%d", (Ë
ªas⁄
);

2276  
s
;

2278 
	}
}

2280 
boﬁ


2281 
	$oÂutû_∑ckë_ö_ªas⁄_‰om_°rög
(c⁄° *
s
,

2282 
oÂ_∑ckë_ö_ªas⁄
 *
ªas⁄
)

2284 
i
;

2286 
i
 = 0; i < 
OFPR_N_REASONS
; i++) {

2287 i‡(!
	`°rˇ£cmp
(
s
, 
	`oÂutû_∑ckë_ö_ªas⁄_to_°rög
(
i
))) {

2288 *
ªas⁄
 = 
i
;

2289  
åue
;

2292  
Ál£
;

2293 
	}
}

2303 
oÂîr


2304 
	$oÂutû_decode_∑ckë_out
(
oÂutû_∑ckë_out
 *
po
,

2305 c⁄° 
oÂ_hódî
 *
oh
,

2306 
oÂbuf
 *
oÂa˘s
)

2308 
oÂøw
 
øw
;

2309 
oÂbuf
 
b
;

2311 
	`oÂbuf_u£_c⁄°
(&
b
, 
oh
, 
	`¡ohs
(oh->
Àngth
));

2312 
øw
 = 
	`oÂøw_puŒ_as£π
(&
b
);

2314 i‡(
øw
 =
OFPRAW_OFPT11_PACKET_OUT
) {

2315 
oÂîr
 
îr‹
;

2316 c⁄° 
oÂ11_∑ckë_out
 *
›o
 = 
	`oÂbuf_puŒ
(&
b
,  *opo);

2318 
po
->
buf„r_id
 = 
	`¡ohl
(
›o
->buffer_id);

2319 
îr‹
 = 
	`oÂutû_p‹t_‰om_oÂ11
(
›o
->
ö_p‹t
, &
po
->in_port);

2320 i‡(
îr‹
) {

2321  
îr‹
;

2324 
îr‹
 = 
	`oÂa˘s_puŒ_›íÊow11_a˘i⁄s
(&
b
, 
	`¡ohs
(
›o
->
a˘i⁄s_Àn
),

2325 
oÂa˘s
);

2326 i‡(
îr‹
) {

2327  
îr‹
;

2329 } i‡(
øw
 =
OFPRAW_OFPT10_PACKET_OUT
) {

2330 
oÂîr
 
îr‹
;

2331 c⁄° 
oÂ_∑ckë_out
 *
›o
 = 
	`oÂbuf_puŒ
(&
b
,  *opo);

2333 
po
->
buf„r_id
 = 
	`¡ohl
(
›o
->buffer_id);

2334 
po
->
ö_p‹t
 = 
	`¡ohs
(
›o
->in_port);

2336 
îr‹
 = 
	`oÂa˘s_puŒ_›íÊow10
(&
b
, 
	`¡ohs
(
›o
->
a˘i⁄s_Àn
), 
oÂa˘s
);

2337 i‡(
îr‹
) {

2338  
îr‹
;

2341 
	`NOT_REACHED
();

2344 i‡(
po
->
ö_p‹t
 >
OFPP_MAX
 &&Öo->ö_p‹à!
OFPP_LOCAL


2345 && 
po
->
ö_p‹t
 !
OFPP_NONE
 &&Öo->ö_p‹à!
OFPP_CONTROLLER
) {

2346 
	`VLOG_WARN_RL
(&
bad_ofmsg_æ
, "∑ckë-ouàha†bad i≈uàp‹à%#"
PRIx16
,

2347 
po
->
ö_p‹t
);

2348  
OFPERR_OFPBRC_BAD_PORT
;

2351 
po
->
oÂa˘s
 = oÂa˘s->
d©a
;

2352 
po
->
oÂa˘s_Àn
 = 
oÂa˘s
->
size
;

2354 i‡(
po
->
buf„r_id
 =
UINT32_MAX
) {

2355 
po
->
∑ckë
 = 
b
.
d©a
;

2356 
po
->
∑ckë_Àn
 = 
b
.
size
;

2358 
po
->
∑ckë
 = 
NULL
;

2359 
po
->
∑ckë_Àn
 = 0;

2363 
	}
}

2368 
BUILD_ASSERT_DECL
((Ë
NETDEV_F_10MB_HD
 =
OFPPF_10MB_HD
);

2369 
BUILD_ASSERT_DECL
((Ë
NETDEV_F_10MB_FD
 =
OFPPF_10MB_FD
);

2370 
BUILD_ASSERT_DECL
((Ë
NETDEV_F_100MB_HD
 =
OFPPF_100MB_HD
);

2371 
BUILD_ASSERT_DECL
((Ë
NETDEV_F_100MB_FD
 =
OFPPF_100MB_FD
);

2372 
BUILD_ASSERT_DECL
((Ë
NETDEV_F_1GB_HD
 =
OFPPF_1GB_HD
);

2373 
BUILD_ASSERT_DECL
((Ë
NETDEV_F_1GB_FD
 =
OFPPF_1GB_FD
);

2374 
BUILD_ASSERT_DECL
((Ë
NETDEV_F_10GB_FD
 =
OFPPF_10GB_FD
);

2377 
BUILD_ASSERT_DECL
((Ë
NETDEV_F_COPPER
 =(
OFPPF10_COPPER
 << 4));

2378 
BUILD_ASSERT_DECL
((Ë
NETDEV_F_FIBER
 =(
OFPPF10_FIBER
 << 4));

2379 
BUILD_ASSERT_DECL
((Ë
NETDEV_F_AUTONEG
 =(
OFPPF10_AUTONEG
 << 4));

2380 
BUILD_ASSERT_DECL
((Ë
NETDEV_F_PAUSE
 =(
OFPPF10_PAUSE
 << 4));

2381 
BUILD_ASSERT_DECL
((Ë
NETDEV_F_PAUSE_ASYM
 =(
OFPPF10_PAUSE_ASYM
 << 4));

2383 
√tdev_„©uªs


2384 
	$√tdev_p‹t_„©uªs_‰om_oÂ10
(
ovs_be32
 
oÂ10_
)

2386 
uöt32_t
 
oÂ10
 = 
	`¡ohl
(
oÂ10_
);

2387  (
oÂ10
 & 0x7f) | ((ofp10 & 0xf80) << 4);

2388 
	}
}

2390 
ovs_be32


2391 
	$√tdev_p‹t_„©uªs_to_oÂ10
(
√tdev_„©uªs
 
„©uªs
)

2393  
	`ht⁄l
((
„©uªs
 & 0x7f) | ((features & 0xf800) >> 4));

2394 
	}
}

2396 
BUILD_ASSERT_DECL
((Ë
NETDEV_F_10MB_HD
 =
OFPPF_10MB_HD
);

2397 
BUILD_ASSERT_DECL
((Ë
NETDEV_F_10MB_FD
 =
OFPPF_10MB_FD
);

2398 
BUILD_ASSERT_DECL
((Ë
NETDEV_F_100MB_HD
 =
OFPPF_100MB_HD
);

2399 
BUILD_ASSERT_DECL
((Ë
NETDEV_F_100MB_FD
 =
OFPPF_100MB_FD
);

2400 
BUILD_ASSERT_DECL
((Ë
NETDEV_F_1GB_HD
 =
OFPPF_1GB_HD
);

2401 
BUILD_ASSERT_DECL
((Ë
NETDEV_F_1GB_FD
 =
OFPPF_1GB_FD
);

2402 
BUILD_ASSERT_DECL
((Ë
NETDEV_F_10GB_FD
 =
OFPPF_10GB_FD
);

2403 
BUILD_ASSERT_DECL
((Ë
NETDEV_F_40GB_FD
 =
OFPPF11_40GB_FD
);

2404 
BUILD_ASSERT_DECL
((Ë
NETDEV_F_100GB_FD
 =
OFPPF11_100GB_FD
);

2405 
BUILD_ASSERT_DECL
((Ë
NETDEV_F_1TB_FD
 =
OFPPF11_1TB_FD
);

2406 
BUILD_ASSERT_DECL
((Ë
NETDEV_F_OTHER
 =
OFPPF11_OTHER
);

2407 
BUILD_ASSERT_DECL
((Ë
NETDEV_F_COPPER
 =
OFPPF11_COPPER
);

2408 
BUILD_ASSERT_DECL
((Ë
NETDEV_F_FIBER
 =
OFPPF11_FIBER
);

2409 
BUILD_ASSERT_DECL
((Ë
NETDEV_F_AUTONEG
 =
OFPPF11_AUTONEG
);

2410 
BUILD_ASSERT_DECL
((Ë
NETDEV_F_PAUSE
 =
OFPPF11_PAUSE
);

2411 
BUILD_ASSERT_DECL
((Ë
NETDEV_F_PAUSE_ASYM
 =
OFPPF11_PAUSE_ASYM
);

2413 
√tdev_„©uªs


2414 
	$√tdev_p‹t_„©uªs_‰om_oÂ11
(
ovs_be32
 
oÂ11
)

2416  
	`¡ohl
(
oÂ11
) & 0xffff;

2417 
	}
}

2419 
ovs_be32


2420 
	$√tdev_p‹t_„©uªs_to_oÂ11
(
√tdev_„©uªs
 
„©uªs
)

2422  
	`ht⁄l
(
„©uªs
 & 0xffff);

2423 
	}
}

2425 
oÂîr


2426 
	$oÂutû_decode_oÂ10_phy_p‹t
(
oÂutû_phy_p‹t
 *
µ
,

2427 c⁄° 
oÂ10_phy_p‹t
 *
›p
)

2429 
	`mem£t
(
µ
, 0,  *pp);

2431 
µ
->
p‹t_no
 = 
	`¡ohs
(
›p
->port_no);

2432 
	`mem˝y
(
µ
->
hw_addr
, 
›p
->hw_addr, 
OFP_ETH_ALEN
);

2433 
	`ovs_°æ˝y
(
µ
->
«me
, 
›p
->«me, 
OFP_MAX_PORT_NAME_LEN
);

2435 
µ
->
c⁄fig
 = 
	`¡ohl
(
›p
->c⁄figË& 
OFPPC10_ALL
;

2436 
µ
->
°©e
 = 
	`¡ohl
(
›p
->°©eË& 
OFPPS10_ALL
;

2438 
µ
->
cuº
 = 
	`√tdev_p‹t_„©uªs_‰om_oÂ10
(
›p
->curr);

2439 
µ
->
advîti£d
 = 
	`√tdev_p‹t_„©uªs_‰om_oÂ10
(
›p
->advertised);

2440 
µ
->
suµ‹ãd
 = 
	`√tdev_p‹t_„©uªs_‰om_oÂ10
(
›p
->supported);

2441 
µ
->
≥î
 = 
	`√tdev_p‹t_„©uªs_‰om_oÂ10
(
›p
->peer);

2443 
µ
->
cuº_•ìd
 = 
	`√tdev_„©uªs_to_bps
’p->
cuº
) / 1000;

2444 
µ
->
max_•ìd
 = 
	`√tdev_„©uªs_to_bps
’p->
suµ‹ãd
) / 1000;

2447 
	}
}

2449 
oÂîr


2450 
	$oÂutû_decode_oÂ11_p‹t
(
oÂutû_phy_p‹t
 *
µ
,

2451 c⁄° 
oÂ11_p‹t
 *
›
)

2453 
oÂîr
 
îr‹
;

2455 
	`mem£t
(
µ
, 0,  *pp);

2457 
îr‹
 = 
	`oÂutû_p‹t_‰om_oÂ11
(
›
->
p‹t_no
, &
µ
->port_no);

2458 i‡(
îr‹
) {

2459  
îr‹
;

2461 
	`mem˝y
(
µ
->
hw_addr
, 
›
->hw_addr, 
OFP_ETH_ALEN
);

2462 
	`ovs_°æ˝y
(
µ
->
«me
, 
›
->«me, 
OFP_MAX_PORT_NAME_LEN
);

2464 
µ
->
c⁄fig
 = 
	`¡ohl
(
›
->c⁄figË& 
OFPPC11_ALL
;

2465 
µ
->
°©e
 = 
	`¡ohl
(
›
->°©eË& 
OFPPC11_ALL
;

2467 
µ
->
cuº
 = 
	`√tdev_p‹t_„©uªs_‰om_oÂ11
(
›
->curr);

2468 
µ
->
advîti£d
 = 
	`√tdev_p‹t_„©uªs_‰om_oÂ11
(
›
->advertised);

2469 
µ
->
suµ‹ãd
 = 
	`√tdev_p‹t_„©uªs_‰om_oÂ11
(
›
->supported);

2470 
µ
->
≥î
 = 
	`√tdev_p‹t_„©uªs_‰om_oÂ11
(
›
->peer);

2472 
µ
->
cuº_•ìd
 = 
	`¡ohl
(
›
->curr_speed);

2473 
µ
->
max_•ìd
 = 
	`¡ohl
(
›
->max_speed);

2476 
	}
}

2478 
size_t


2479 
	$oÂutû_gë_phy_p‹t_size
(
oÂ_vîsi⁄
 ofp_version)

2481 
oÂ_vîsi⁄
) {

2482 
OFP10_VERSION
:

2483  (
oÂ10_phy_p‹t
);

2484 
OFP11_VERSION
:

2485 
OFP12_VERSION
:

2486  (
oÂ11_p‹t
);

2488 
	`NOT_REACHED
();

2490 
	}
}

2493 
	$oÂutû_ícode_oÂ10_phy_p‹t
(c⁄° 
oÂutû_phy_p‹t
 *
µ
,

2494 
oÂ10_phy_p‹t
 *
›p
)

2496 
	`mem£t
(
›p
, 0,  *opp);

2498 
›p
->
p‹t_no
 = 
	`ht⁄s
(
µ
->port_no);

2499 
	`mem˝y
(
›p
->
hw_addr
, 
µ
->hw_addr, 
ETH_ADDR_LEN
);

2500 
	`ovs_°æ˝y
(
›p
->
«me
, 
µ
->«me, 
OFP_MAX_PORT_NAME_LEN
);

2502 
›p
->
c⁄fig
 = 
	`ht⁄l
(
µ
->c⁄fig & 
OFPPC10_ALL
);

2503 
›p
->
°©e
 = 
	`ht⁄l
(
µ
->°©ê& 
OFPPS10_ALL
);

2505 
›p
->
cuº
 = 
	`√tdev_p‹t_„©uªs_to_oÂ10
(
µ
->curr);

2506 
›p
->
advîti£d
 = 
	`√tdev_p‹t_„©uªs_to_oÂ10
(
µ
->advertised);

2507 
›p
->
suµ‹ãd
 = 
	`√tdev_p‹t_„©uªs_to_oÂ10
(
µ
->supported);

2508 
›p
->
≥î
 = 
	`√tdev_p‹t_„©uªs_to_oÂ10
(
µ
->peer);

2509 
	}
}

2512 
	$oÂutû_ícode_oÂ11_p‹t
(c⁄° 
oÂutû_phy_p‹t
 *
µ
,

2513 
oÂ11_p‹t
 *
›
)

2515 
	`mem£t
(
›
, 0,  *op);

2517 
›
->
p‹t_no
 = 
	`oÂutû_p‹t_to_oÂ11
(
µ
->port_no);

2518 
	`mem˝y
(
›
->
hw_addr
, 
µ
->hw_addr, 
ETH_ADDR_LEN
);

2519 
	`ovs_°æ˝y
(
›
->
«me
, 
µ
->«me, 
OFP_MAX_PORT_NAME_LEN
);

2521 
›
->
c⁄fig
 = 
	`ht⁄l
(
µ
->c⁄fig & 
OFPPC11_ALL
);

2522 
›
->
°©e
 = 
	`ht⁄l
(
µ
->°©ê& 
OFPPS11_ALL
);

2524 
›
->
cuº
 = 
	`√tdev_p‹t_„©uªs_to_oÂ11
(
µ
->curr);

2525 
›
->
advîti£d
 = 
	`√tdev_p‹t_„©uªs_to_oÂ11
(
µ
->advertised);

2526 
›
->
suµ‹ãd
 = 
	`√tdev_p‹t_„©uªs_to_oÂ11
(
µ
->supported);

2527 
›
->
≥î
 = 
	`√tdev_p‹t_„©uªs_to_oÂ11
(
µ
->peer);

2529 
›
->
cuº_•ìd
 = 
	`ht⁄l
(
µ
->curr_speed);

2530 
›
->
max_•ìd
 = 
	`ht⁄l
(
µ
->max_speed);

2531 
	}
}

2534 
	$oÂutû_put_phy_p‹t
(
oÂ_vîsi⁄
 ofp_version,

2535 c⁄° 
oÂutû_phy_p‹t
 *
µ
, 
oÂbuf
 *
b
)

2537 
oÂ_vîsi⁄
) {

2538 
OFP10_VERSION
: {

2539 
oÂ10_phy_p‹t
 *
›p
;

2540 i‡(
b
->
size
 +  *
›p
 <
UINT16_MAX
) {

2541 
›p
 = 
	`oÂbuf_put_unöô
(
b
,  *opp);

2542 
	`oÂutû_ícode_oÂ10_phy_p‹t
(
µ
, 
›p
);

2547 
OFP11_VERSION
:

2548 
OFP12_VERSION
: {

2549 
oÂ11_p‹t
 *
›
;

2550 i‡(
b
->
size
 +  *
›
 <
UINT16_MAX
) {

2551 
›
 = 
	`oÂbuf_put_unöô
(
b
,  *op);

2552 
	`oÂutû_ícode_oÂ11_p‹t
(
µ
, 
›
);

2558 
	`NOT_REACHED
();

2560 
	}
}

2563 
	$oÂutû_≠≥nd_p‹t_desc_°©s_ª∂y
(
oÂ_vîsi⁄
 ofp_version,

2564 c⁄° 
oÂutû_phy_p‹t
 *
µ
,

2565 
li°
 *
ª∂õs
)

2567 
oÂ_vîsi⁄
) {

2568 
OFP10_VERSION
: {

2569 
oÂ10_phy_p‹t
 *
›p
;

2571 
›p
 = 
	`oÂmp_≠≥nd
(
ª∂õs
,  *opp);

2572 
	`oÂutû_ícode_oÂ10_phy_p‹t
(
µ
, 
›p
);

2576 
OFP11_VERSION
:

2577 
OFP12_VERSION
: {

2578 
oÂ11_p‹t
 *
›
;

2580 
›
 = 
	`oÂmp_≠≥nd
(
ª∂õs
,  *op);

2581 
	`oÂutû_ícode_oÂ11_p‹t
(
µ
, 
›
);

2586 
	`NOT_REACHED
();

2588 
	}
}

2592 
	#OFPC_COMMON
 (
OFPC_FLOW_STATS
 | 
OFPC_TABLE_STATS
 | 
OFPC_PORT_STATS
 | \

2593 
OFPC_IP_REASM
 | 
OFPC_QUEUE_STATS
)

	)

2594 
BUILD_ASSERT_DECL
((Ë
OFPUTIL_C_FLOW_STATS
 =
OFPC_FLOW_STATS
);

2595 
BUILD_ASSERT_DECL
((Ë
OFPUTIL_C_TABLE_STATS
 =
OFPC_TABLE_STATS
);

2596 
BUILD_ASSERT_DECL
((Ë
OFPUTIL_C_PORT_STATS
 =
OFPC_PORT_STATS
);

2597 
BUILD_ASSERT_DECL
((Ë
OFPUTIL_C_IP_REASM
 =
OFPC_IP_REASM
);

2598 
BUILD_ASSERT_DECL
((Ë
OFPUTIL_C_QUEUE_STATS
 =
OFPC_QUEUE_STATS
);

2599 
BUILD_ASSERT_DECL
((Ë
OFPUTIL_C_ARP_MATCH_IP
 =
OFPC_ARP_MATCH_IP
);

2601 
	soÂutû_a˘i⁄_bô_å™¶©i⁄
 {

2602 
oÂutû_a˘i⁄_bôm≠
 
	moÂutû_bô
;

2603 
	mof_bô
;

2606 c⁄° 
oÂutû_a˘i⁄_bô_å™¶©i⁄
 
	gof10_a˘i⁄_bôs
[] = {

2607 { 
OFPUTIL_A_OUTPUT
, 
OFPAT10_OUTPUT
 },

2608 { 
OFPUTIL_A_SET_VLAN_VID
, 
OFPAT10_SET_VLAN_VID
 },

2609 { 
OFPUTIL_A_SET_VLAN_PCP
, 
OFPAT10_SET_VLAN_PCP
 },

2610 { 
OFPUTIL_A_STRIP_VLAN
, 
OFPAT10_STRIP_VLAN
 },

2611 { 
OFPUTIL_A_SET_DL_SRC
, 
OFPAT10_SET_DL_SRC
 },

2612 { 
OFPUTIL_A_SET_DL_DST
, 
OFPAT10_SET_DL_DST
 },

2613 { 
OFPUTIL_A_SET_NW_SRC
, 
OFPAT10_SET_NW_SRC
 },

2614 { 
OFPUTIL_A_SET_NW_DST
, 
OFPAT10_SET_NW_DST
 },

2615 { 
OFPUTIL_A_SET_NW_TOS
, 
OFPAT10_SET_NW_TOS
 },

2616 { 
OFPUTIL_A_SET_TP_SRC
, 
OFPAT10_SET_TP_SRC
 },

2617 { 
OFPUTIL_A_SET_TP_DST
, 
OFPAT10_SET_TP_DST
 },

2618 { 
OFPUTIL_A_ENQUEUE
, 
OFPAT10_ENQUEUE
 },

2622 
oÂutû_a˘i⁄_bôm≠


2623 
	$decode_a˘i⁄_bôs
(
ovs_be32
 
of_a˘i⁄s
,

2624 c⁄° 
oÂutû_a˘i⁄_bô_å™¶©i⁄
 *
x
)

2626 
oÂutû_a˘i⁄_bôm≠
 
oÂutû_a˘i⁄s
;

2628 
oÂutû_a˘i⁄s
 = 0;

2629 ; 
x
->
oÂutû_bô
; x++) {

2630 i‡(
of_a˘i⁄s
 & 
	`ht⁄l
(1u << 
x
->
of_bô
)) {

2631 
oÂutû_a˘i⁄s
 |
x
->
oÂutû_bô
;

2634  
oÂutû_a˘i⁄s
;

2635 
	}
}

2637 
uöt32_t


2638 
	$oÂutû_ˇ∑bûôõs_mask
(
oÂ_vîsi⁄
 ofp_version)

2641 
oÂ_vîsi⁄
) {

2642 
OFP10_VERSION
:

2643 
OFP11_VERSION
:

2644  
OFPC_COMMON
 | 
OFPC_ARP_MATCH_IP
;

2645 
OFP12_VERSION
:

2646  
OFPC_COMMON
 | 
OFPC12_PORT_BLOCKED
;

2651 
	}
}

2658 
oÂîr


2659 
	$oÂutû_decode_swôch_„©uªs
(c⁄° 
oÂ_hódî
 *
oh
,

2660 
oÂutû_swôch_„©uªs
 *
„©uªs
,

2661 
oÂbuf
 *
b
)

2663 c⁄° 
oÂ_swôch_„©uªs
 *
osf
;

2664 
oÂøw
 
øw
;

2666 
	`oÂbuf_u£_c⁄°
(
b
, 
oh
, 
	`¡ohs
(oh->
Àngth
));

2667 
øw
 = 
	`oÂøw_puŒ_as£π
(
b
);

2669 
osf
 = 
	`oÂbuf_puŒ
(
b
,  *osf);

2670 
„©uªs
->
d©≠©h_id
 = 
	`¡ohŒ
(
osf
->datapath_id);

2671 
„©uªs
->
n_buf„rs
 = 
	`¡ohl
(
osf
->n_buffers);

2672 
„©uªs
->
n_èbÀs
 = 
osf
->n_tables;

2674 
„©uªs
->
ˇ∑bûôõs
 = 
	`¡ohl
(
osf
->capabilities) &

2675 
	`oÂutû_ˇ∑bûôõs_mask
(
oh
->
vîsi⁄
);

2677 i‡(
b
->
size
 % 
	`oÂutû_gë_phy_p‹t_size
(
oh
->
vîsi⁄
)) {

2678  
OFPERR_OFPBRC_BAD_LEN
;

2681 i‡(
øw
 =
OFPRAW_OFPT10_FEATURES_REPLY
) {

2682 i‡(
osf
->
ˇ∑bûôõs
 & 
	`ht⁄l
(
OFPC10_STP
)) {

2683 
„©uªs
->
ˇ∑bûôõs
 |
OFPUTIL_C_STP
;

2685 
„©uªs
->
a˘i⁄s
 = 
	`decode_a˘i⁄_bôs
(
osf
->a˘i⁄s, 
of10_a˘i⁄_bôs
);

2686 } i‡(
øw
 =
OFPRAW_OFPT11_FEATURES_REPLY
) {

2687 i‡(
osf
->
ˇ∑bûôõs
 & 
	`ht⁄l
(
OFPC11_GROUP_STATS
)) {

2688 
„©uªs
->
ˇ∑bûôõs
 |
OFPUTIL_C_GROUP_STATS
;

2690 
„©uªs
->
a˘i⁄s
 = 0;

2692  
OFPERR_OFPBRC_BAD_VERSION
;

2696 
	}
}

2699 
boﬁ


2700 
	$max_p‹ts_ö_„©uªs
(c⁄° 
oÂ_hódî
 *
oh
)

2702 
size_t
 
µ_size
 = 
	`oÂutû_gë_phy_p‹t_size
(
oh
->
vîsi⁄
);

2703  
	`¡ohs
(
oh
->
Àngth
Ë+ 
µ_size
 > 
UINT16_MAX
;

2704 
	}
}

2713 
boﬁ


2714 
	$oÂutû_swôch_„©uªs_p‹ts_åunc
(
oÂbuf
 *
b
)

2716 
oÂ_hódî
 *
oh
 = 
b
->
d©a
;

2718 i‡(
	`max_p‹ts_ö_„©uªs
(
oh
)) {

2720 
b
->
size
 = ((
oÂ_hódî
)

2721 + (
oÂ_swôch_„©uªs
));

2722 
	`oÂmsg_upd©e_Àngth
(
b
);

2724  
åue
;

2727  
Ál£
;

2728 
	}
}

2730 
ovs_be32


2731 
	$ícode_a˘i⁄_bôs
(
oÂutû_a˘i⁄_bôm≠
 
oÂutû_a˘i⁄s
,

2732 c⁄° 
oÂutû_a˘i⁄_bô_å™¶©i⁄
 *
x
)

2734 
uöt32_t
 
of_a˘i⁄s
;

2736 
of_a˘i⁄s
 = 0;

2737 ; 
x
->
oÂutû_bô
; x++) {

2738 i‡(
oÂutû_a˘i⁄s
 & 
x
->
oÂutû_bô
) {

2739 
of_a˘i⁄s
 |1 << 
x
->
of_bô
;

2742  
	`ht⁄l
(
of_a˘i⁄s
);

2743 
	}
}

2749 
oÂbuf
 *

2750 
	$oÂutû_ícode_swôch_„©uªs
(c⁄° 
oÂutû_swôch_„©uªs
 *
„©uªs
,

2751 
oÂutû_¥Ÿocﬁ
 
¥Ÿocﬁ
, 
ovs_be32
 
xid
)

2753 
oÂ_swôch_„©uªs
 *
osf
;

2754 
oÂbuf
 *
b
;

2755 
oÂ_vîsi⁄
 
vîsi⁄
;

2756 
oÂøw
 
øw
;

2758 
vîsi⁄
 = 
	`oÂutû_¥Ÿocﬁ_to_oÂ_vîsi⁄
(
¥Ÿocﬁ
);

2759 
vîsi⁄
) {

2760 
OFP10_VERSION
:

2761 
øw
 = 
OFPRAW_OFPT10_FEATURES_REPLY
;

2763 
OFP11_VERSION
:

2764 
OFP12_VERSION
:

2765 
øw
 = 
OFPRAW_OFPT11_FEATURES_REPLY
;

2768 
	`NOT_REACHED
();

2770 
b
 = 
	`oÂøw_Æloc_xid
(
øw
, 
vîsi⁄
, 
xid
, 0);

2771 
osf
 = 
	`oÂbuf_put_zîos
(
b
,  *osf);

2772 
osf
->
d©≠©h_id
 = 
	`ht⁄Œ
(
„©uªs
->datapath_id);

2773 
osf
->
n_buf„rs
 = 
	`ht⁄l
(
„©uªs
->n_buffers);

2774 
osf
->
n_èbÀs
 = 
„©uªs
->n_tables;

2776 
osf
->
ˇ∑bûôõs
 = 
	`ht⁄l
(
„©uªs
->ˇ∑bûôõ†& 
OFPC_COMMON
);

2777 
osf
->
ˇ∑bûôõs
 = 
	`ht⁄l
(
„©uªs
->capabilities &

2778 
	`oÂutû_ˇ∑bûôõs_mask
(
vîsi⁄
));

2779 
vîsi⁄
) {

2780 
OFP10_VERSION
:

2781 i‡(
„©uªs
->
ˇ∑bûôõs
 & 
OFPUTIL_C_STP
) {

2782 
osf
->
ˇ∑bûôõs
 |
	`ht⁄l
(
OFPC10_STP
);

2784 
osf
->
a˘i⁄s
 = 
	`ícode_a˘i⁄_bôs
(
„©uªs
->a˘i⁄s, 
of10_a˘i⁄_bôs
);

2786 
OFP11_VERSION
:

2787 
OFP12_VERSION
:

2788 i‡(
„©uªs
->
ˇ∑bûôõs
 & 
OFPUTIL_C_GROUP_STATS
) {

2789 
osf
->
ˇ∑bûôõs
 |
	`ht⁄l
(
OFPC11_GROUP_STATS
);

2793 
	`NOT_REACHED
();

2796  
b
;

2797 
	}
}

2803 
	$oÂutû_put_swôch_„©uªs_p‹t
(c⁄° 
oÂutû_phy_p‹t
 *
µ
,

2804 
oÂbuf
 *
b
)

2806 c⁄° 
oÂ_hódî
 *
oh
 = 
b
->
d©a
;

2808 
	`oÂutû_put_phy_p‹t
(
oh
->
vîsi⁄
, 
µ
, 
b
);

2809 
	}
}

2815 
oÂîr


2816 
	$oÂutû_decode_p‹t_°©us
(c⁄° 
oÂ_hódî
 *
oh
,

2817 
oÂutû_p‹t_°©us
 *
ps
)

2819 c⁄° 
oÂ_p‹t_°©us
 *
›s
;

2820 
oÂbuf
 
b
;

2821 
ªtvÆ
;

2823 
	`oÂbuf_u£_c⁄°
(&
b
, 
oh
, 
	`¡ohs
(oh->
Àngth
));

2824 
	`oÂøw_puŒ_as£π
(&
b
);

2825 
›s
 = 
	`oÂbuf_puŒ
(&
b
,  *ops);

2827 i‡(
›s
->
ªas⁄
 !
OFPPR_ADD
 &&

2828 
›s
->
ªas⁄
 !
OFPPR_DELETE
 &&

2829 
›s
->
ªas⁄
 !
OFPPR_MODIFY
) {

2830  
OFPERR_NXBRC_BAD_REASON
;

2832 
ps
->
ªas⁄
 = 
›s
->reason;

2834 
ªtvÆ
 = 
	`oÂutû_puŒ_phy_p‹t
(
oh
->
vîsi⁄
, &
b
, &
ps
->
desc
);

2835 
	`as£π
(
ªtvÆ
 !
EOF
);

2836  
ªtvÆ
;

2837 
	}
}

2842 
oÂbuf
 *

2843 
	$oÂutû_ícode_p‹t_°©us
(c⁄° 
oÂutû_p‹t_°©us
 *
ps
,

2844 
oÂutû_¥Ÿocﬁ
 
¥Ÿocﬁ
)

2846 
oÂ_p‹t_°©us
 *
›s
;

2847 
oÂbuf
 *
b
;

2848 
oÂ_vîsi⁄
 
vîsi⁄
;

2849 
oÂøw
 
øw
;

2851 
vîsi⁄
 = 
	`oÂutû_¥Ÿocﬁ_to_oÂ_vîsi⁄
(
¥Ÿocﬁ
);

2852 
vîsi⁄
) {

2853 
OFP10_VERSION
:

2854 
øw
 = 
OFPRAW_OFPT10_PORT_STATUS
;

2857 
OFP11_VERSION
:

2858 
OFP12_VERSION
:

2859 
øw
 = 
OFPRAW_OFPT11_PORT_STATUS
;

2863 
	`NOT_REACHED
();

2866 
b
 = 
	`oÂøw_Æloc_xid
(
øw
, 
vîsi⁄
, 
	`ht⁄l
(0), 0);

2867 
›s
 = 
	`oÂbuf_put_zîos
(
b
,  *ops);

2868 
›s
->
ªas⁄
 = 
ps
->reason;

2869 
	`oÂutû_put_phy_p‹t
(
vîsi⁄
, &
ps
->
desc
, 
b
);

2870 
	`oÂmsg_upd©e_Àngth
(
b
);

2871  
b
;

2872 
	}
}

2878 
oÂîr


2879 
	$oÂutû_decode_p‹t_mod
(c⁄° 
oÂ_hódî
 *
oh
,

2880 
oÂutû_p‹t_mod
 *
pm
)

2882 
oÂøw
 
øw
;

2883 
oÂbuf
 
b
;

2885 
	`oÂbuf_u£_c⁄°
(&
b
, 
oh
, 
	`¡ohs
(oh->
Àngth
));

2886 
øw
 = 
	`oÂøw_puŒ_as£π
(&
b
);

2888 i‡(
øw
 =
OFPRAW_OFPT10_PORT_MOD
) {

2889 c⁄° 
oÂ10_p‹t_mod
 *
›m
 = 
b
.
d©a
;

2891 
pm
->
p‹t_no
 = 
	`¡ohs
(
›m
->port_no);

2892 
	`mem˝y
(
pm
->
hw_addr
, 
›m
->hw_addr, 
ETH_ADDR_LEN
);

2893 
pm
->
c⁄fig
 = 
	`¡ohl
(
›m
->c⁄figË& 
OFPPC10_ALL
;

2894 
pm
->
mask
 = 
	`¡ohl
(
›m
->maskË& 
OFPPC10_ALL
;

2895 
pm
->
advîti£
 = 
	`√tdev_p‹t_„©uªs_‰om_oÂ10
(
›m
->advertise);

2896 } i‡(
øw
 =
OFPRAW_OFPT11_PORT_MOD
) {

2897 c⁄° 
oÂ11_p‹t_mod
 *
›m
 = 
b
.
d©a
;

2898 
oÂîr
 
îr‹
;

2900 
îr‹
 = 
	`oÂutû_p‹t_‰om_oÂ11
(
›m
->
p‹t_no
, &
pm
->port_no);

2901 i‡(
îr‹
) {

2902  
îr‹
;

2905 
	`mem˝y
(
pm
->
hw_addr
, 
›m
->hw_addr, 
ETH_ADDR_LEN
);

2906 
pm
->
c⁄fig
 = 
	`¡ohl
(
›m
->c⁄figË& 
OFPPC11_ALL
;

2907 
pm
->
mask
 = 
	`¡ohl
(
›m
->maskË& 
OFPPC11_ALL
;

2908 
pm
->
advîti£
 = 
	`√tdev_p‹t_„©uªs_‰om_oÂ11
(
›m
->advertise);

2910  
OFPERR_OFPBRC_BAD_TYPE
;

2913 
pm
->
c⁄fig
 &pm->
mask
;

2915 
	}
}

2920 
oÂbuf
 *

2921 
	$oÂutû_ícode_p‹t_mod
(c⁄° 
oÂutû_p‹t_mod
 *
pm
,

2922 
oÂutû_¥Ÿocﬁ
 
¥Ÿocﬁ
)

2924 
oÂ_vîsi⁄
 oÂ_vîsi⁄ = 
	`oÂutû_¥Ÿocﬁ_to_oÂ_vîsi⁄
(
¥Ÿocﬁ
);

2925 
oÂbuf
 *
b
;

2927 
oÂ_vîsi⁄
) {

2928 
OFP10_VERSION
: {

2929 
oÂ10_p‹t_mod
 *
›m
;

2931 
b
 = 
	`oÂøw_Æloc
(
OFPRAW_OFPT10_PORT_MOD
, 
oÂ_vîsi⁄
, 0);

2932 
›m
 = 
	`oÂbuf_put_zîos
(
b
,  *opm);

2933 
›m
->
p‹t_no
 = 
	`ht⁄s
(
pm
->port_no);

2934 
	`mem˝y
(
›m
->
hw_addr
, 
pm
->hw_addr, 
ETH_ADDR_LEN
);

2935 
›m
->
c⁄fig
 = 
	`ht⁄l
(
pm
->c⁄fig & 
OFPPC10_ALL
);

2936 
›m
->
mask
 = 
	`ht⁄l
(
pm
->mask & 
OFPPC10_ALL
);

2937 
›m
->
advîti£
 = 
	`√tdev_p‹t_„©uªs_to_oÂ10
(
pm
->advertise);

2941 
OFP11_VERSION
:

2942 
OFP12_VERSION
: {

2943 
oÂ11_p‹t_mod
 *
›m
;

2945 
b
 = 
	`oÂøw_Æloc
(
OFPRAW_OFPT11_PORT_MOD
, 
oÂ_vîsi⁄
, 0);

2946 
›m
 = 
	`oÂbuf_put_zîos
(
b
,  *opm);

2947 
›m
->
p‹t_no
 = 
	`oÂutû_p‹t_to_oÂ11
(
pm
->port_no);

2948 
	`mem˝y
(
›m
->
hw_addr
, 
pm
->hw_addr, 
ETH_ADDR_LEN
);

2949 
›m
->
c⁄fig
 = 
	`ht⁄l
(
pm
->c⁄fig & 
OFPPC11_ALL
);

2950 
›m
->
mask
 = 
	`ht⁄l
(
pm
->mask & 
OFPPC11_ALL
);

2951 
›m
->
advîti£
 = 
	`√tdev_p‹t_„©uªs_to_oÂ11
(
pm
->advertise);

2956 
	`NOT_REACHED
();

2959  
b
;

2960 
	}
}

2965 
	$oÂutû_put_oÂ10_èbÀ_°©s
(c⁄° 
oÂ12_èbÀ_°©s
 *
ö
,

2966 
oÂbuf
 *
buf
)

2968 
	swc_m≠
 {

2969 
oÂ_Êow_wûdˇrds
 
wc10
;

2970 
oxm12_ofb_m©ch_fõlds
 
mf12
;

2973 c⁄° 
wc_m≠
 wc_map[] = {

2974 { 
OFPFW10_IN_PORT
, 
OFPXMT12_OFB_IN_PORT
 },

2975 { 
OFPFW10_DL_VLAN
, 
OFPXMT12_OFB_VLAN_VID
 },

2976 { 
OFPFW10_DL_SRC
, 
OFPXMT12_OFB_ETH_SRC
 },

2977 { 
OFPFW10_DL_DST
, 
OFPXMT12_OFB_ETH_DST
},

2978 { 
OFPFW10_DL_TYPE
, 
OFPXMT12_OFB_ETH_TYPE
 },

2979 { 
OFPFW10_NW_PROTO
, 
OFPXMT12_OFB_IP_PROTO
 },

2980 { 
OFPFW10_TP_SRC
, 
OFPXMT12_OFB_TCP_SRC
 },

2981 { 
OFPFW10_TP_DST
, 
OFPXMT12_OFB_TCP_DST
 },

2982 { 
OFPFW10_NW_SRC_MASK
, 
OFPXMT12_OFB_IPV4_SRC
 },

2983 { 
OFPFW10_NW_DST_MASK
, 
OFPXMT12_OFB_IPV4_DST
 },

2984 { 
OFPFW10_DL_VLAN_PCP
, 
OFPXMT12_OFB_VLAN_PCP
 },

2985 { 
OFPFW10_NW_TOS
, 
OFPXMT12_OFB_IP_DSCP
 },

2988 
oÂ10_èbÀ_°©s
 *
out
;

2989 c⁄° 
wc_m≠
 *
p
;

2991 
out
 = 
	`oÂbuf_put_zîos
(
buf
,  *out);

2992 
out
->
èbÀ_id
 = 
ö
->table_id;

2993 
	`ovs_°æ˝y
(
out
->
«me
, 
ö
->name,  out->name);

2994 
out
->
wûdˇrds
 = 0;

2995 
p
 = 
wc_m≠
;Ö < &wc_m≠[
	`ARRAY_SIZE
(wc_map)];Ö++) {

2996 i‡(
ö
->
wûdˇrds
 & 
	`ht⁄Œ
(1ULL << 
p
->
mf12
)) {

2997 
out
->
wûdˇrds
 |
	`ht⁄l
(
p
->
wc10
);

3000 
out
->
max_íåõs
 = 
ö
->max_entries;

3001 
out
->
a˘ive_cou¡
 = 
ö
->active_count;

3002 
	`put_32Æig√d_be64
(&
out
->
lookup_cou¡
, 
ö
->lookup_count);

3003 
	`put_32Æig√d_be64
(&
out
->
m©ched_cou¡
, 
ö
->matched_count);

3004 
	}
}

3006 
ovs_be32


3007 
	$oxm12_to_oÂ11_Êow_m©ch_fõlds
(
ovs_be64
 
oxm12
)

3009 
	sm≠
 {

3010 
oÂ11_Êow_m©ch_fõlds
 
fmf11
;

3011 
oxm12_ofb_m©ch_fõlds
 
mf12
;

3014 c⁄° 
m≠
 map[] = {

3015 { 
OFPFMF11_IN_PORT
, 
OFPXMT12_OFB_IN_PORT
 },

3016 { 
OFPFMF11_DL_VLAN
, 
OFPXMT12_OFB_VLAN_VID
 },

3017 { 
OFPFMF11_DL_VLAN_PCP
, 
OFPXMT12_OFB_VLAN_PCP
 },

3018 { 
OFPFMF11_DL_TYPE
, 
OFPXMT12_OFB_ETH_TYPE
 },

3019 { 
OFPFMF11_NW_TOS
, 
OFPXMT12_OFB_IP_DSCP
 },

3020 { 
OFPFMF11_NW_PROTO
, 
OFPXMT12_OFB_IP_PROTO
 },

3021 { 
OFPFMF11_TP_SRC
, 
OFPXMT12_OFB_TCP_SRC
 },

3022 { 
OFPFMF11_TP_DST
, 
OFPXMT12_OFB_TCP_DST
 },

3023 { 
OFPFMF11_MPLS_LABEL
, 
OFPXMT12_OFB_MPLS_LABEL
 },

3024 { 
OFPFMF11_MPLS_TC
, 
OFPXMT12_OFB_MPLS_TC
 },

3026 { 
OFPFMF11_DL_SRC
, 
OFPXMT12_OFB_ETH_SRC
 },

3027 { 
OFPFMF11_DL_DST
, 
OFPXMT12_OFB_ETH_DST
 },

3028 { 
OFPFMF11_NW_SRC
, 
OFPXMT12_OFB_IPV4_SRC
 },

3029 { 
OFPFMF11_NW_DST
, 
OFPXMT12_OFB_IPV4_DST
 },

3030 { 
OFPFMF11_METADATA
, 
OFPXMT12_OFB_METADATA
 },

3033 c⁄° 
m≠
 *
p
;

3034 
uöt32_t
 
fmf11
;

3036 
fmf11
 = 0;

3037 
p
 = 
m≠
;Ö < &m≠[
	`ARRAY_SIZE
(map)];Ö++) {

3038 i‡(
oxm12
 & 
	`ht⁄Œ
(1ULL << 
p
->
mf12
)) {

3039 
fmf11
 |
p
->fmf11;

3042  
	`ht⁄l
(
fmf11
);

3043 
	}
}

3046 
	$oÂutû_put_oÂ11_èbÀ_°©s
(c⁄° 
oÂ12_èbÀ_°©s
 *
ö
,

3047 
oÂbuf
 *
buf
)

3049 
oÂ11_èbÀ_°©s
 *
out
;

3051 
out
 = 
	`oÂbuf_put_zîos
(
buf
,  *out);

3052 
out
->
èbÀ_id
 = 
ö
->table_id;

3053 
	`ovs_°æ˝y
(
out
->
«me
, 
ö
->name,  out->name);

3054 
out
->
wûdˇrds
 = 
	`oxm12_to_oÂ11_Êow_m©ch_fõlds
(
ö
->wildcards);

3055 
out
->
m©ch
 = 
	`oxm12_to_oÂ11_Êow_m©ch_fõlds
(
ö
->match);

3056 
out
->
ö°ru˘i⁄s
 = 
ö
->instructions;

3057 
out
->
wrôe_a˘i⁄s
 = 
ö
->write_actions;

3058 
out
->
≠∂y_a˘i⁄s
 = 
ö
->apply_actions;

3059 
out
->
c⁄fig
 = 
ö
->config;

3060 
out
->
max_íåõs
 = 
ö
->max_entries;

3061 
out
->
a˘ive_cou¡
 = 
ö
->active_count;

3062 
out
->
lookup_cou¡
 = 
ö
->lookup_count;

3063 
out
->
m©ched_cou¡
 = 
ö
->matched_count;

3064 
	}
}

3066 
oÂbuf
 *

3067 
	$oÂutû_ícode_èbÀ_°©s_ª∂y
(c⁄° 
oÂ12_èbÀ_°©s
 
°©s
[], 
n
,

3068 c⁄° 
oÂ_hódî
 *
ªque°
)

3070 
oÂbuf
 *
ª∂y
;

3071 
i
;

3073 
ª∂y
 = 
	`oÂøw_Æloc_°©s_ª∂y
(
ªque°
, 
n
 *  *
°©s
);

3075 (
oÂ_vîsi⁄
Ë
ªque°
->
vîsi⁄
) {

3076 
OFP10_VERSION
:

3077 
i
 = 0; i < 
n
; i++) {

3078 
	`oÂutû_put_oÂ10_èbÀ_°©s
(&
°©s
[
i
], 
ª∂y
);

3082 
OFP11_VERSION
:

3083 
i
 = 0; i < 
n
; i++) {

3084 
	`oÂutû_put_oÂ11_èbÀ_°©s
(&
°©s
[
i
], 
ª∂y
);

3088 
OFP12_VERSION
:

3089 
	`oÂbuf_put
(
ª∂y
, 
°©s
, 
n
 *  *stats);

3093 
	`NOT_REACHED
();

3096  
ª∂y
;

3097 
	}
}

3112 
	$oÂutû_decode_Êow_m⁄ô‹_ªque°
(
oÂutû_Êow_m⁄ô‹_ªque°
 *
rq
,

3113 
oÂbuf
 *
msg
)

3115 
nx_Êow_m⁄ô‹_ªque°
 *
nfmr
;

3116 
uöt16_t
 
Êags
;

3118 i‡(!
msg
->
l2
) {

3119 
msg
->
l2
 = msg->
d©a
;

3120 
	`oÂøw_puŒ_as£π
(
msg
);

3123 i‡(!
msg
->
size
) {

3124  
EOF
;

3127 
nfmr
 = 
	`oÂbuf_åy_puŒ
(
msg
,  *nfmr);

3128 i‡(!
nfmr
) {

3129 
	`VLOG_WARN_RL
(&
bad_ofmsg_æ
, "NXST_FLOW_MONITORÑequest has %zu "

3130 "À·ovî byã†©Énd", 
msg
->
size
);

3131  
OFPERR_OFPBRC_BAD_LEN
;

3134 
Êags
 = 
	`¡ohs
(
nfmr
->flags);

3135 i‡(!(
Êags
 & (
NXFMF_ADD
 | 
NXFMF_DELETE
 | 
NXFMF_MODIFY
))

3136 || 
Êags
 & ~(
NXFMF_INITIAL
 | 
NXFMF_ADD
 | 
NXFMF_DELETE


3137 | 
NXFMF_MODIFY
 | 
NXFMF_ACTIONS
 | 
NXFMF_OWN
)) {

3138 
	`VLOG_WARN_RL
(&
bad_ofmsg_æ
, "NXST_FLOW_MONITOR ha†bad fœg†%#"
PRIx16
,

3139 
Êags
);

3140  
OFPERR_NXBRC_FM_BAD_FLAGS
;

3143 i‡(!
	`is_Æl_zîos
(
nfmr
->
zîos
, Çfmr->zeros)) {

3144  
OFPERR_NXBRC_MUST_BE_ZERO
;

3147 
rq
->
id
 = 
	`¡ohl
(
nfmr
->id);

3148 
rq
->
Êags
 = flags;

3149 
rq
->
out_p‹t
 = 
	`¡ohs
(
nfmr
->out_port);

3150 
rq
->
èbÀ_id
 = 
nfmr
->table_id;

3152  
	`nx_puŒ_m©ch
(
msg
, 
	`¡ohs
(
nfmr
->
m©ch_Àn
), &
rq
->
m©ch
, 
NULL
, NULL);

3153 
	}
}

3156 
	$oÂutû_≠≥nd_Êow_m⁄ô‹_ªque°
(

3157 c⁄° 
oÂutû_Êow_m⁄ô‹_ªque°
 *
rq
, 
oÂbuf
 *
msg
)

3159 
nx_Êow_m⁄ô‹_ªque°
 *
nfmr
;

3160 
size_t
 
°¨t_ofs
;

3161 
m©ch_Àn
;

3163 i‡(!
msg
->
size
) {

3164 
	`oÂøw_put
(
OFPRAW_NXST_FLOW_MONITOR_REQUEST
, 
OFP10_VERSION
, 
msg
);

3167 
°¨t_ofs
 = 
msg
->
size
;

3168 
	`oÂbuf_put_zîos
(
msg
,  *
nfmr
);

3169 
m©ch_Àn
 = 
	`nx_put_m©ch
(
msg
, &
rq
->
m©ch
, 
	`ht⁄Œ
(0), htonll(0));

3171 
nfmr
 = 
	`oÂbuf_©_as£π
(
msg
, 
°¨t_ofs
,  *nfmr);

3172 
nfmr
->
id
 = 
	`ht⁄l
(
rq
->id);

3173 
nfmr
->
Êags
 = 
	`ht⁄s
(
rq
->flags);

3174 
nfmr
->
out_p‹t
 = 
	`ht⁄s
(
rq
->out_port);

3175 
nfmr
->
m©ch_Àn
 = 
	`ht⁄s
(match_len);

3176 
nfmr
->
èbÀ_id
 = 
rq
->table_id;

3177 
	}
}

3196 
	$oÂutû_decode_Êow_upd©e
(
oÂutû_Êow_upd©e
 *
upd©e
,

3197 
oÂbuf
 *
msg
, oÂbu‡*
oÂa˘s
)

3199 
nx_Êow_upd©e_hódî
 *
nfuh
;

3200 
Àngth
;

3202 i‡(!
msg
->
l2
) {

3203 
msg
->
l2
 = msg->
d©a
;

3204 
	`oÂøw_puŒ_as£π
(
msg
);

3207 i‡(!
msg
->
size
) {

3208  
EOF
;

3211 i‡(
msg
->
size
 < (
nx_Êow_upd©e_hódî
)) {

3212 
bad_Àn
;

3215 
nfuh
 = 
msg
->
d©a
;

3216 
upd©e
->
evít
 = 
	`¡ohs
(
nfuh
->event);

3217 
Àngth
 = 
	`¡ohs
(
nfuh
->length);

3218 i‡(
Àngth
 > 
msg
->
size
 ||Üength % 8) {

3219 
bad_Àn
;

3222 i‡(
upd©e
->
evít
 =
NXFME_ABBREV
) {

3223 
nx_Êow_upd©e_abbªv
 *
nfua
;

3225 i‡(
Àngth
 ! *
nfua
) {

3226 
bad_Àn
;

3229 
nfua
 = 
	`oÂbuf_puŒ
(
msg
,  *nfua);

3230 
upd©e
->
xid
 = 
nfua
->xid;

3232 } i‡(
upd©e
->
evít
 =
NXFME_ADDED


3233 || 
upd©e
->
evít
 =
NXFME_DELETED


3234 || 
upd©e
->
evít
 =
NXFME_MODIFIED
) {

3235 
nx_Êow_upd©e_fuŒ
 *
nfuf
;

3236 
a˘i⁄s_Àn
;

3237 
m©ch_Àn
;

3238 
oÂîr
 
îr‹
;

3240 i‡(
Àngth
 <  *
nfuf
) {

3241 
bad_Àn
;

3244 
nfuf
 = 
	`oÂbuf_puŒ
(
msg
,  *nfuf);

3245 
m©ch_Àn
 = 
	`¡ohs
(
nfuf
->match_len);

3246 i‡( *
nfuf
 + 
m©ch_Àn
 > 
Àngth
) {

3247 
bad_Àn
;

3250 
upd©e
->
ªas⁄
 = 
	`¡ohs
(
nfuf
->reason);

3251 
upd©e
->
idÀ_timeout
 = 
	`¡ohs
(
nfuf
->idle_timeout);

3252 
upd©e
->
h¨d_timeout
 = 
	`¡ohs
(
nfuf
->hard_timeout);

3253 
upd©e
->
èbÀ_id
 = 
nfuf
->table_id;

3254 
upd©e
->
cookõ
 = 
nfuf
->cookie;

3255 
upd©e
->
¥i‹ôy
 = 
	`¡ohs
(
nfuf
->priority);

3257 
îr‹
 = 
	`nx_puŒ_m©ch
(
msg
, 
m©ch_Àn
, 
upd©e
->
m©ch
, 
NULL
, NULL);

3258 i‡(
îr‹
) {

3259  
îr‹
;

3262 
a˘i⁄s_Àn
 = 
Àngth
 -  *
nfuf
 - 
	`ROUND_UP
(
m©ch_Àn
, 8);

3263 
îr‹
 = 
	`oÂa˘s_puŒ_›íÊow10
(
msg
, 
a˘i⁄s_Àn
, 
oÂa˘s
);

3264 i‡(
îr‹
) {

3265  
îr‹
;

3268 
upd©e
->
oÂa˘s
 = oÂa˘s->
d©a
;

3269 
upd©e
->
oÂa˘s_Àn
 = 
oÂa˘s
->
size
;

3272 
	`VLOG_WARN_RL
(&
bad_ofmsg_æ
,

3273 "NXST_FLOW_MONITORÑïly ha†badÉvíà%"
PRIu16
,

3274 
	`¡ohs
(
nfuh
->
evít
));

3275  
OFPERR_OFPET_BAD_REQUEST
;

3278 
bad_Àn
:

3279 
	`VLOG_WARN_RL
(&
bad_ofmsg_æ
, "NXST_FLOW_MONITORÑeply has %zu "

3280 "À·ovî byã†©Énd", 
msg
->
size
);

3281  
OFPERR_OFPBRC_BAD_LEN
;

3282 
	}
}

3284 
uöt32_t


3285 
	$oÂutû_decode_Êow_m⁄ô‹_ˇn˚l
(c⁄° 
oÂ_hódî
 *
oh
)

3287 c⁄° 
nx_Êow_m⁄ô‹_ˇn˚l
 *
ˇn˚l
 = 
	`oÂmsg_body
(
oh
);

3289  
	`¡ohl
(
ˇn˚l
->
id
);

3290 
	}
}

3292 
oÂbuf
 *

3293 
	$oÂutû_ícode_Êow_m⁄ô‹_ˇn˚l
(
uöt32_t
 
id
)

3295 
nx_Êow_m⁄ô‹_ˇn˚l
 *
nfmc
;

3296 
oÂbuf
 *
msg
;

3298 
msg
 = 
	`oÂøw_Æloc
(
OFPRAW_NXT_FLOW_MONITOR_CANCEL
, 
OFP10_VERSION
, 0);

3299 
nfmc
 = 
	`oÂbuf_put_unöô
(
msg
,  *nfmc);

3300 
nfmc
->
id
 = 
	`ht⁄l
(id);

3301  
msg
;

3302 
	}
}

3305 
	$oÂutû_°¨t_Êow_upd©e
(
li°
 *
ª∂õs
)

3307 
oÂbuf
 *
msg
;

3309 
msg
 = 
	`oÂøw_Æloc_xid
(
OFPRAW_NXST_FLOW_MONITOR_REPLY
, 
OFP10_VERSION
,

3310 
	`ht⁄l
(0), 1024);

3312 
	`li°_öô
(
ª∂õs
);

3313 
	`li°_push_back
(
ª∂õs
, &
msg
->
li°_node
);

3314 
	}
}

3317 
	$oÂutû_≠≥nd_Êow_upd©e
(c⁄° 
oÂutû_Êow_upd©e
 *
upd©e
,

3318 
li°
 *
ª∂õs
)

3320 
nx_Êow_upd©e_hódî
 *
nfuh
;

3321 
oÂbuf
 *
msg
;

3322 
size_t
 
°¨t_ofs
;

3324 
msg
 = 
	`oÂbuf_‰om_li°
(
	`li°_back
(
ª∂õs
));

3325 
°¨t_ofs
 = 
msg
->
size
;

3327 i‡(
upd©e
->
evít
 =
NXFME_ABBREV
) {

3328 
nx_Êow_upd©e_abbªv
 *
nfua
;

3330 
nfua
 = 
	`oÂbuf_put_zîos
(
msg
,  *nfua);

3331 
nfua
->
xid
 = 
upd©e
->xid;

3333 
nx_Êow_upd©e_fuŒ
 *
nfuf
;

3334 
m©ch_Àn
;

3336 
	`oÂbuf_put_zîos
(
msg
,  *
nfuf
);

3337 
m©ch_Àn
 = 
	`nx_put_m©ch
(
msg
, 
upd©e
->
m©ch
, 
	`ht⁄Œ
(0), htonll(0));

3338 
	`oÂa˘s_put_›íÊow10
(
upd©e
->
oÂa˘s
, upd©e->
oÂa˘s_Àn
, 
msg
);

3340 
nfuf
 = 
	`oÂbuf_©_as£π
(
msg
, 
°¨t_ofs
,  *nfuf);

3341 
nfuf
->
ªas⁄
 = 
	`ht⁄s
(
upd©e
->reason);

3342 
nfuf
->
¥i‹ôy
 = 
	`ht⁄s
(
upd©e
->priority);

3343 
nfuf
->
idÀ_timeout
 = 
	`ht⁄s
(
upd©e
->idle_timeout);

3344 
nfuf
->
h¨d_timeout
 = 
	`ht⁄s
(
upd©e
->hard_timeout);

3345 
nfuf
->
m©ch_Àn
 = 
	`ht⁄s
(match_len);

3346 
nfuf
->
èbÀ_id
 = 
upd©e
->table_id;

3347 
nfuf
->
cookõ
 = 
upd©e
->cookie;

3350 
nfuh
 = 
	`oÂbuf_©_as£π
(
msg
, 
°¨t_ofs
,  *nfuh);

3351 
nfuh
->
Àngth
 = 
	`ht⁄s
(
msg
->
size
 - 
°¨t_ofs
);

3352 
nfuh
->
evít
 = 
	`ht⁄s
(
upd©e
->event);

3354 
	`oÂmp_po°≠≥nd
(
ª∂õs
, 
°¨t_ofs
);

3355 
	}
}

3357 
oÂbuf
 *

3358 
	$oÂutû_ícode_∑ckë_out
(c⁄° 
oÂutû_∑ckë_out
 *
po
,

3359 
oÂutû_¥Ÿocﬁ
 
¥Ÿocﬁ
)

3361 
oÂ_vîsi⁄
 oÂ_vîsi⁄ = 
	`oÂutû_¥Ÿocﬁ_to_oÂ_vîsi⁄
(
¥Ÿocﬁ
);

3362 
oÂbuf
 *
msg
;

3363 
size_t
 
size
;

3365 
size
 = 
po
->
oÂa˘s_Àn
;

3366 i‡(
po
->
buf„r_id
 =
UINT32_MAX
) {

3367 
size
 +
po
->
∑ckë_Àn
;

3370 
oÂ_vîsi⁄
) {

3371 
OFP10_VERSION
: {

3372 
oÂ_∑ckë_out
 *
›o
;

3373 
size_t
 
a˘i⁄s_ofs
;

3375 
msg
 = 
	`oÂøw_Æloc
(
OFPRAW_OFPT10_PACKET_OUT
, 
OFP10_VERSION
, 
size
);

3376 
	`oÂbuf_put_zîos
(
msg
,  *
›o
);

3377 
a˘i⁄s_ofs
 = 
msg
->
size
;

3378 
	`oÂa˘s_put_›íÊow10
(
po
->
oÂa˘s
,Öo->
oÂa˘s_Àn
, 
msg
);

3380 
›o
 = 
msg
->
l3
;

3381 
›o
->
buf„r_id
 = 
	`ht⁄l
(
po
->buffer_id);

3382 
›o
->
ö_p‹t
 = 
	`ht⁄s
(
po
->in_port);

3383 
›o
->
a˘i⁄s_Àn
 = 
	`ht⁄s
(
msg
->
size
 - 
a˘i⁄s_ofs
);

3387 
OFP11_VERSION
:

3388 
OFP12_VERSION
: {

3389 
oÂ11_∑ckë_out
 *
›o
;

3390 
size_t
 
Àn
;

3392 
msg
 = 
	`oÂøw_Æloc
(
OFPRAW_OFPT11_PACKET_OUT
, 
oÂ_vîsi⁄
, 
size
);

3393 
	`oÂbuf_put_zîos
(
msg
,  *
›o
);

3394 
Àn
 = 
	`oÂa˘s_put_›íÊow11_a˘i⁄s
(
po
->
oÂa˘s
,Öo->
oÂa˘s_Àn
, 
msg
);

3396 
›o
 = 
msg
->
l3
;

3397 
›o
->
buf„r_id
 = 
	`ht⁄l
(
po
->buffer_id);

3398 
›o
->
ö_p‹t
 = 
	`oÂutû_p‹t_to_oÂ11
(
po
->in_port);

3399 
›o
->
a˘i⁄s_Àn
 = 
	`ht⁄s
(
Àn
);

3404 
	`NOT_REACHED
();

3407 i‡(
po
->
buf„r_id
 =
UINT32_MAX
) {

3408 
	`oÂbuf_put
(
msg
, 
po
->
∑ckë
,Öo->
∑ckë_Àn
);

3411 
	`oÂmsg_upd©e_Àngth
(
msg
);

3413  
msg
;

3414 
	}
}

3417 
oÂbuf
 *

3418 
	$make_echo_ªque°
(
oÂ_vîsi⁄
 ofp_version)

3420  
	`oÂøw_Æloc_xid
(
OFPRAW_OFPT_ECHO_REQUEST
, 
oÂ_vîsi⁄
,

3421 
	`ht⁄l
(0), 0);

3422 
	}
}

3426 
oÂbuf
 *

3427 
	$make_echo_ª∂y
(c⁄° 
oÂ_hódî
 *
rq
)

3429 
oÂbuf
 
rq_buf
;

3430 
oÂbuf
 *
ª∂y
;

3432 
	`oÂbuf_u£_c⁄°
(&
rq_buf
, 
rq
, 
	`¡ohs
‘q->
Àngth
));

3433 
	`oÂøw_puŒ_as£π
(&
rq_buf
);

3435 
ª∂y
 = 
	`oÂøw_Æloc_ª∂y
(
OFPRAW_OFPT_ECHO_REPLY
, 
rq
, 
rq_buf
.
size
);

3436 
	`oÂbuf_put
(
ª∂y
, 
rq_buf
.
d©a
,Ñq_buf.
size
);

3437  
ª∂y
;

3438 
	}
}

3440 
oÂbuf
 *

3441 
	$oÂutû_ícode_b¨rõr_ªque°
(
oÂ_vîsi⁄
 ofp_version)

3443 
oÂøw
 
ty≥
;

3445 
oÂ_vîsi⁄
) {

3446 
OFP12_VERSION
:

3447 
OFP11_VERSION
:

3448 
ty≥
 = 
OFPRAW_OFPT11_BARRIER_REQUEST
;

3451 
OFP10_VERSION
:

3452 
ty≥
 = 
OFPRAW_OFPT10_BARRIER_REQUEST
;

3456 
	`NOT_REACHED
();

3459  
	`oÂøw_Æloc
(
ty≥
, 
oÂ_vîsi⁄
, 0);

3460 
	}
}

3463 
	$oÂutû_‰ag_h™dlög_to_°rög
(
oÂ_c⁄fig_Êags
 
Êags
)

3465 
Êags
 & 
OFPC_FRAG_MASK
) {

3466 
OFPC_FRAG_NORMAL
:  "normal";

3467 
OFPC_FRAG_DROP
:  "drop";

3468 
OFPC_FRAG_REASM
:  "reassemble";

3469 
OFPC_FRAG_NX_MATCH
:  "nx-match";

3472 
	`NOT_REACHED
();

3473 
	}
}

3475 
boﬁ


3476 
	$oÂutû_‰ag_h™dlög_‰om_°rög
(c⁄° *
s
, 
oÂ_c⁄fig_Êags
 *
Êags
)

3478 i‡(!
	`°rˇ£cmp
(
s
, "normal")) {

3479 *
Êags
 = 
OFPC_FRAG_NORMAL
;

3480 } i‡(!
	`°rˇ£cmp
(
s
, "drop")) {

3481 *
Êags
 = 
OFPC_FRAG_DROP
;

3482 } i‡(!
	`°rˇ£cmp
(
s
, "reassemble")) {

3483 *
Êags
 = 
OFPC_FRAG_REASM
;

3484 } i‡(!
	`°rˇ£cmp
(
s
, "nx-match")) {

3485 *
Êags
 = 
OFPC_FRAG_NX_MATCH
;

3487  
Ál£
;

3489  
åue
;

3490 
	}
}

3498 
oÂîr


3499 
	$oÂutû_p‹t_‰om_oÂ11
(
ovs_be32
 
oÂ11_p‹t
, 
uöt16_t
 *
oÂ10_p‹t
)

3501 
uöt32_t
 
oÂ11_p‹t_h
 = 
	`¡ohl
(
oÂ11_p‹t
);

3503 i‡(
oÂ11_p‹t_h
 < 
OFPP_MAX
) {

3504 *
oÂ10_p‹t
 = 
oÂ11_p‹t_h
;

3506 } i‡(
oÂ11_p‹t_h
 >
OFPP11_MAX
) {

3507 *
oÂ10_p‹t
 = 
oÂ11_p‹t_h
 - 
OFPP11_OFFSET
;

3510 
	`VLOG_WARN_RL
(&
bad_ofmsg_æ
, "p‹à%"
PRIu32
" is outsideÅhe supported "

3511 "øngê0Åhrough %d o∏0x%"
PRIx32
"Åhrough 0x%"PRIx32,

3512 
oÂ11_p‹t_h
, 
OFPP_MAX
 - 1,

3513 (
uöt32_t
Ë
OFPP11_MAX
, 
UINT32_MAX
);

3514  
OFPERR_OFPBAC_BAD_OUT_PORT
;

3516 
	}
}

3522 
ovs_be32


3523 
	$oÂutû_p‹t_to_oÂ11
(
uöt16_t
 
oÂ10_p‹t
)

3525  
	`ht⁄l
(
oÂ10_p‹t
 < 
OFPP_MAX


3526 ? 
oÂ10_p‹t


3527 : 
oÂ10_p‹t
 + 
OFPP11_OFFSET
);

3528 
	}
}

3533 
oÂîr


3534 
	$oÂutû_check_ouçut_p‹t
(
uöt16_t
 
p‹t
, 
max_p‹ts
)

3536 
p‹t
) {

3537 
OFPP_IN_PORT
:

3538 
OFPP_TABLE
:

3539 
OFPP_NORMAL
:

3540 
OFPP_FLOOD
:

3541 
OFPP_ALL
:

3542 
OFPP_CONTROLLER
:

3543 
OFPP_NONE
:

3544 
OFPP_LOCAL
:

3548 i‡(
p‹t
 < 
max_p‹ts
) {

3551  
OFPERR_OFPBAC_BAD_OUT_PORT
;

3553 
	}
}

3555 
	#OFPUTIL_NAMED_PORTS
 \

3556 
	`OFPUTIL_NAMED_PORT
(
IN_PORT
) \

3557 
	`OFPUTIL_NAMED_PORT
(
TABLE
) \

3558 
	`OFPUTIL_NAMED_PORT
(
NORMAL
) \

3559 
	`OFPUTIL_NAMED_PORT
(
FLOOD
) \

3560 
	`OFPUTIL_NAMED_PORT
(
ALL
) \

3561 
	`OFPUTIL_NAMED_PORT
(
CONTROLLER
) \

3562 
	`OFPUTIL_NAMED_PORT
(
LOCAL
) \

3563 
	`OFPUTIL_NAMED_PORT
(
NONE
)

	)

3578 
boﬁ


3579 
	$oÂutû_p‹t_‰om_°rög
(c⁄° *
s
, 
uöt16_t
 *
p‹ç
)

3581 
p‹t32
;

3583 *
p‹ç
 = 0;

3584 i‡(
	`°r_to_uöt
(
s
, 10, &
p‹t32
)) {

3585 i‡(
p‹t32
 < 
OFPP_MAX
) {

3586 *
p‹ç
 = 
p‹t32
;

3587  
åue
;

3588 } i‡(
p‹t32
 < 
OFPP_FIRST_RESV
) {

3589 
	`VLOG_WARN
("port %u isáÑeserved OF1.0ÖortÇumberÅhat will "

3591 "œã∏c⁄åﬁÀr", 
p‹t32
,Ö‹t32 + 
OFPP11_OFFSET
);

3592 *
p‹ç
 = 
p‹t32
;

3593  
åue
;

3594 } i‡(
p‹t32
 <
OFPP_LAST_RESV
) {

3595 
ds
 
s
;

3597 
	`ds_öô
(&
s
);

3598 
	`oÂutû_f‹m©_p‹t
(
p‹t32
, &
s
);

3599 
	`VLOG_WARN_ONCE
("referringÅoÖort %sás %u is deprecated for "

3601 
	`ds_c°r
(&
s
), 
p‹t32
);

3602 
	`ds_de°roy
(&
s
);

3604 *
p‹ç
 = 
p‹t32
;

3605  
åue
;

3606 } i‡(
p‹t32
 < 
OFPP11_MAX
) {

3607 
	`VLOG_WARN
("port %u is outsideÅhe supportedÑange 0Åhrough "

3608 "%"
PRIx16
" o∏0x%xÅhrough 0x%"
PRIx32
, 
p‹t32
,

3609 
UINT16_MAX
, (Ë
OFPP11_MAX
, 
UINT32_MAX
);

3610  
Ál£
;

3612 *
p‹ç
 = 
p‹t32
 - 
OFPP11_OFFSET
;

3613  
åue
;

3616 
	s∑ú
 {

3617 c⁄° *
«me
;

3618 
uöt16_t
 
vÆue
;

3620 c⁄° 
∑ú
 
∑ús
[] = {

3621 
	#OFPUTIL_NAMED_PORT
(
NAME
Ë{#NAME, 
OFPP_
##NAME},

	)

3622 
OFPUTIL_NAMED_PORTS


3623 #unde‡
OFPUTIL_NAMED_PORT


3625 c⁄° 
∑ú
 *
p
;

3627 
p
 = 
∑ús
;Ö < &∑ús[
	`ARRAY_SIZE
(pairs)];Ö++) {

3628 i‡(!
	`°rˇ£cmp
(
s
, 
p
->
«me
)) {

3629 *
p‹ç
 = 
p
->
vÆue
;

3630  
åue
;

3633  
Ál£
;

3635 
	}
}

3641 
	$oÂutû_f‹m©_p‹t
(
uöt16_t
 
p‹t
, 
ds
 *
s
)

3643 c⁄° *
«me
;

3645 
p‹t
) {

3646 
	#OFPUTIL_NAMED_PORT
(
NAME
Ë
OFPP_
##NAME: 
«me
 = #NAME; ;

	)

3647 
OFPUTIL_NAMED_PORTS


3648 #unde‡
OFPUTIL_NAMED_PORT


3651 
	`ds_put_f‹m©
(
s
, "%"
PRIu16
, 
p‹t
);

3654 
	`ds_put_c°r
(
s
, 
«me
);

3655 
	}
}

3663 
	$oÂutû_puŒ_phy_p‹t
(
oÂ_vîsi⁄
 oÂ_vîsi⁄, 
oÂbuf
 *
b
,

3664 
oÂutû_phy_p‹t
 *
µ
)

3666 
oÂ_vîsi⁄
) {

3667 
OFP10_VERSION
: {

3668 c⁄° 
oÂ10_phy_p‹t
 *
›p
 = 
	`oÂbuf_åy_puŒ
(
b
,  *opp);

3669  
›p
 ? 
	`oÂutû_decode_oÂ10_phy_p‹t
(
µ
, oµË: 
EOF
;

3671 
OFP11_VERSION
:

3672 
OFP12_VERSION
: {

3673 c⁄° 
oÂ11_p‹t
 *
›
 = 
	`oÂbuf_åy_puŒ
(
b
,  *op);

3674  
›
 ? 
	`oÂutû_decode_oÂ11_p‹t
(
µ
, opË: 
EOF
;

3677 
	`NOT_REACHED
();

3679 
	}
}

3683 
size_t
 
	$oÂutû_cou¡_phy_p‹ts
(
uöt8_t
 
oÂ_vîsi⁄
, 
oÂbuf
 *
b
)

3685  
b
->
size
 / 
	`oÂutû_gë_phy_p‹t_size
(
oÂ_vîsi⁄
);

3686 
	}
}

3694 
	$oÂutû_a˘i⁄_code_‰om_«me
(c⁄° *
«me
)

3696 c⁄° *
«mes
[
OFPUTIL_N_ACTIONS
] = {

3697 
NULL
,

3698 
	#OFPAT10_ACTION
(
ENUM
, 
STRUCT
, 
NAME
ËNAME,

	)

3699 
	#OFPAT11_ACTION
(
ENUM
, 
STRUCT
, 
EXTENSIBLE
, 
NAME
ËNAME,

	)

3700 
	#NXAST_ACTION
(
ENUM
, 
STRUCT
, 
EXTENSIBLE
, 
NAME
ËNAME,

	)

3702 
	#NC_ACTION
(
ENUM
, 
STRUCT
, 
EXTENSIBLE
, 
NAME
ËNAME,

	)

3704 
	~"oÂ-utû.def
"

3707 c⁄° **
p
;

3709 
p
 = 
«mes
;Ö < &«mes[
	`ARRAY_SIZE
(names)];Ö++) {

3710 i‡(*
p
 && !
	`°rˇ£cmp
(
«me
, *p)) {

3711  
p
 - 
«mes
;

3715 
	}
}

3723 
	$oÂutû_put_a˘i⁄
(
oÂutû_a˘i⁄_code
 
code
, 
oÂbuf
 *
buf
)

3725 
code
) {

3726 
OFPUTIL_ACTION_INVALID
:

3727 
	`NOT_REACHED
();

3729 
	#OFPAT10_ACTION
(
ENUM
, 
STRUCT
, 
NAME
) \

3730 
OFPUTIL_
##
ENUM
:  
oÂutû_put_
##
	`ENUM
(
buf
);

	)

3731 
	#OFPAT11_ACTION
(
ENUM
, 
STRUCT
, 
EXTENSIBLE
, 
NAME
) \

3732 
OFPUTIL_
##
ENUM
:  
oÂutû_put_
##
	`ENUM
(
buf
);

	)

3733 
	#NXAST_ACTION
(
ENUM
, 
STRUCT
, 
EXTENSIBLE
, 
NAME
) \

3734 
OFPUTIL_
##
ENUM
:  
oÂutû_put_
##
	`ENUM
(
buf
);

	)

3736 
	#NC_ACTION
(
ENUM
, 
STRUCT
, 
EXTENSIBLE
, 
NAME
) \

3737 
OFPUTIL_
##
ENUM
:  
oÂutû_put_
##
	`ENUM
(
buf
);

	)

3739 
	~"oÂ-utû.def
"

3741 
	`NOT_REACHED
();

3742 
	}
}

3744 
	#OFPAT10_ACTION
(
ENUM
, 
STRUCT
, 
NAME
) \

3746 
oÂutû_öô_
##
	`ENUM
(
STRUCT
 *
s
) \

3748 
	`mem£t
(
s
, 0,  *s); \

3749 
s
->
ty≥
 = 
	`ht⁄s
(
ENUM
); \

3750 
s
->
Àn
 = 
	`ht⁄s
( *s); \

3753 
STRUCT
 * \

3754 
oÂutû_put_
##
	`ENUM
(
oÂbuf
 *
buf
) \

3756 
STRUCT
 *
s
 = 
	`oÂbuf_put_unöô
(
buf
,  *s); \

3757 
oÂutû_öô_
##
	`ENUM
(
s
); \

3758  
s
; \

3759 }

	)

3760 
	#OFPAT11_ACTION
(
ENUM
, 
STRUCT
, 
EXTENSIBLE
, 
NAME
) \

3761 
	`OFPAT10_ACTION
(
ENUM
, 
STRUCT
, 
NAME
)

	)

3762 
	#NXAST_ACTION
(
ENUM
, 
STRUCT
, 
EXTENSIBLE
, 
NAME
) \

3764 
oÂutû_öô_
##
	`ENUM
(
STRUCT
 *
s
) \

3766 
	`mem£t
(
s
, 0,  *s); \

3767 
s
->
ty≥
 = 
	`ht⁄s
(
OFPAT10_VENDOR
); \

3768 
s
->
Àn
 = 
	`ht⁄s
( *s); \

3769 
s
->
víd‹
 = 
	`ht⁄l
(
NX_VENDOR_ID
); \

3770 
s
->
subty≥
 = 
	`ht⁄s
(
ENUM
); \

3773 
STRUCT
 * \

3774 
oÂutû_put_
##
	`ENUM
(
oÂbuf
 *
buf
) \

3776 
STRUCT
 *
s
 = 
	`oÂbuf_put_unöô
(
buf
,  *s); \

3777 
oÂutû_öô_
##
	`ENUM
(
s
); \

3778  
s
; \

3779 }

	)

3781 
	#NC_ACTION
(
ENUM
, 
STRUCT
, 
EXTENSIBLE
, 
NAME
) \

3783 
oÂutû_öô_
##
	`ENUM
(
STRUCT
 *
s
) \

3785 
	`mem£t
(
s
, 0,  *s); \

3786 
s
->
ty≥
 = 
	`ht⁄s
(
OFPAT10_VENDOR
); \

3787 
s
->
Àn
 = 
	`ht⁄s
( *s); \

3788 
s
->
víd‹
 = 
	`ht⁄l
(
NC_VENDOR_ID
); \

3789 
s
->
subty≥
 = 
	`ht⁄s
(
ENUM
); \

3792 
STRUCT
 * \

3793 
oÂutû_put_
##
	`ENUM
(
oÂbuf
 *
buf
) \

3795 
STRUCT
 *
s
 = 
	`oÂbuf_put_unöô
(
buf
,  *s); \

3796 
oÂutû_öô_
##
	`ENUM
(
s
); \

3797  
s
; \

3798 }

	)

3801 
	~"oÂ-utû.def
"

3804 
	$oÂutû_n‹mÆize_m©ch__
(
m©ch
 *m©ch, 
boﬁ
 
may_log
)

3807 
MAY_NW_ADDR
 = 1 << 0,

3808 
MAY_TP_ADDR
 = 1 << 1,

3809 
MAY_NW_PROTO
 = 1 << 2,

3810 
MAY_IPVx
 = 1 << 3,

3811 
MAY_ARP_SHA
 = 1 << 4,

3812 
MAY_ARP_THA
 = 1 << 5,

3813 
MAY_IPV6
 = 1 << 6,

3814 
MAY_ND_TARGET
 = 1 << 7

3815 } 
may_m©ch
;

3817 
Êow_wûdˇrds
 
wc
;

3820 i‡(
m©ch
->
Êow
.
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IP
)) {

3821 
may_m©ch
 = 
MAY_NW_PROTO
 | 
MAY_IPVx
 | 
MAY_NW_ADDR
;

3822 i‡(
m©ch
->
Êow
.
nw_¥Ÿo
 =
IPPROTO_TCP
 ||

3823 
m©ch
->
Êow
.
nw_¥Ÿo
 =
IPPROTO_UDP
 ||

3824 
m©ch
->
Êow
.
nw_¥Ÿo
 =
IPPROTO_ICMP
) {

3825 
may_m©ch
 |
MAY_TP_ADDR
;

3827 } i‡(
m©ch
->
Êow
.
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IPV6
)) {

3828 
may_m©ch
 = 
MAY_NW_PROTO
 | 
MAY_IPVx
 | 
MAY_IPV6
;

3829 i‡(
m©ch
->
Êow
.
nw_¥Ÿo
 =
IPPROTO_TCP
 ||

3830 
m©ch
->
Êow
.
nw_¥Ÿo
 =
IPPROTO_UDP
) {

3831 
may_m©ch
 |
MAY_TP_ADDR
;

3832 } i‡(
m©ch
->
Êow
.
nw_¥Ÿo
 =
IPPROTO_ICMPV6
) {

3833 
may_m©ch
 |
MAY_TP_ADDR
;

3834 i‡(
m©ch
->
Êow
.
ç_§c
 =
	`ht⁄s
(
ND_NEIGHBOR_SOLICIT
)) {

3835 
may_m©ch
 |
MAY_ND_TARGET
 | 
MAY_ARP_SHA
;

3836 } i‡(
m©ch
->
Êow
.
ç_§c
 =
	`ht⁄s
(
ND_NEIGHBOR_ADVERT
)) {

3837 
may_m©ch
 |
MAY_ND_TARGET
 | 
MAY_ARP_THA
;

3840 } i‡(
m©ch
->
Êow
.
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_ARP
) ||

3841 
m©ch
->
Êow
.
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_RARP
)) {

3842 
may_m©ch
 = 
MAY_NW_PROTO
 | 
MAY_NW_ADDR
 | 
MAY_ARP_SHA
 | 
MAY_ARP_THA
;

3844 
may_m©ch
 = 0;

3848 
wc
 = 
m©ch
->wc;

3849 i‡(!(
may_m©ch
 & 
MAY_NW_ADDR
)) {

3850 
wc
.
masks
.
nw_§c
 = wc.masks.
nw_d°
 = 
	`ht⁄l
(0);

3852 i‡(!(
may_m©ch
 & 
MAY_TP_ADDR
)) {

3853 
wc
.
masks
.
ç_§c
 = wc.masks.
ç_d°
 = 
	`ht⁄s
(0);

3855 i‡(!(
may_m©ch
 & 
MAY_NW_PROTO
)) {

3856 
wc
.
masks
.
nw_¥Ÿo
 = 0;

3858 i‡(!(
may_m©ch
 & 
MAY_IPVx
)) {

3859 
wc
.
masks
.
nw_tos
 = 0;

3860 
wc
.
masks
.
nw_âl
 = 0;

3862 i‡(!(
may_m©ch
 & 
MAY_ARP_SHA
)) {

3863 
	`mem£t
(
wc
.
masks
.
¨p_sha
, 0, 
ETH_ADDR_LEN
);

3865 i‡(!(
may_m©ch
 & 
MAY_ARP_THA
)) {

3866 
	`mem£t
(
wc
.
masks
.
¨p_tha
, 0, 
ETH_ADDR_LEN
);

3868 i‡(!(
may_m©ch
 & 
MAY_IPV6
)) {

3869 
wc
.
masks
.
ùv6_§c
 = wc.masks.
ùv6_d°
 = 
ö6addr_™y
;

3870 
wc
.
masks
.
ùv6_œbñ
 = 
	`ht⁄l
(0);

3872 i‡(!(
may_m©ch
 & 
MAY_ND_TARGET
)) {

3873 
wc
.
masks
.
nd_èrgë
 = 
ö6addr_™y
;

3877 i‡(!
	`Êow_wûdˇrds_equÆ
(&
wc
, &
m©ch
->wc)) {

3878 
boﬁ
 
log
 = 
may_log
 && !
	`VLOG_DROP_INFO
(&
bad_ofmsg_æ
);

3879 *
¥e
 = 
log
 ? 
	`m©ch_to_°rög
(
m©ch
, 
OFP_DEFAULT_PRIORITY
Ë: 
NULL
;

3881 
m©ch
->
wc
 = wc;

3882 
	`m©ch_zîo_wûdˇrded_fõlds
(
m©ch
);

3884 i‡(
log
) {

3885 *
po°
 = 
	`m©ch_to_°rög
(
m©ch
, 
OFP_DEFAULT_PRIORITY
);

3886 
	`VLOG_INFO
("normalization changed ofp_match, details:");

3887 
	`VLOG_INFO
("Öª: %s", 
¥e
);

3888 
	`VLOG_INFO
("po°: %s", 
po°
);

3889 
	`‰ì
(
¥e
);

3890 
	`‰ì
(
po°
);

3893 
	}
}

3913 
	$oÂutû_n‹mÆize_m©ch
(
m©ch
 *match)

3915 
	`oÂutû_n‹mÆize_m©ch__
(
m©ch
, 
åue
);

3916 
	}
}

3923 
	$oÂutû_n‹mÆize_m©ch_quõt
(
m©ch
 *match)

3925 
	`oÂutû_n‹mÆize_m©ch__
(
m©ch
, 
Ál£
);

3926 
	}
}

3938 
boﬁ


3939 
	$oÂutû_∑r£_key_vÆue
(**
°rögp
, **
keyp
, **
vÆuï
)

3941 *
pos
, *
key
, *
vÆue
;

3942 
size_t
 
key_Àn
;

3944 
pos
 = *
°rögp
;

3945 
pos
 +
	`°r•n
(pos, ", \t\r\n");

3946 i‡(*
pos
 == '\0') {

3947 *
keyp
 = *
vÆuï
 = 
NULL
;

3948  
Ál£
;

3951 
key
 = 
pos
;

3952 
key_Àn
 = 
	`°rc•n
(
pos
, ":=(, \t\r\n");

3953 i‡(
key
[
key_Àn
] == ':' || key[key_len] == '=') {

3955 
size_t
 
vÆue_Àn
;

3957 
vÆue
 = 
key
 + 
key_Àn
 + 1;

3958 
vÆue_Àn
 = 
	`°rc•n
(
vÆue
, ", \t\r\n");

3959 
pos
 = 
vÆue
 + 
vÆue_Àn
 + (value[value_len] != '\0');

3960 
vÆue
[
vÆue_Àn
] = '\0';

3961 } i‡(
key
[
key_Àn
] == '(') {

3964 
Àvñ
 = 1;

3965 
size_t
 
vÆue_Àn
;

3967 
vÆue
 = 
key
 + 
key_Àn
 + 1;

3968 
vÆue_Àn
 = 0; 
Àvñ
 > 0; value_len++) {

3969 
vÆue
[
vÆue_Àn
]) {

3971 
Àvñ
 = 0;

3975 
Àvñ
++;

3979 
Àvñ
--;

3983 
vÆue
[
vÆue_Àn
 - 1] = '\0';

3984 
pos
 = 
vÆue
 + 
vÆue_Àn
;

3987 
vÆue
 = 
key
 + 
key_Àn
;

3988 
pos
 = 
key
 + 
key_Àn
 + (key[key_len] != '\0');

3990 
key
[
key_Àn
] = '\0';

3992 *
°rögp
 = 
pos
;

3993 *
keyp
 = 
key
;

3994 *
vÆuï
 = 
vÆue
;

3995  
åue
;

3996 
	}
}

4001 
oÂbuf
 *

4002 
	$oÂutû_ícode_dump_p‹ts_ªque°
(
oÂ_vîsi⁄
 oÂ_vîsi⁄, 
öt16_t
 
p‹t
)

4004 
oÂbuf
 *
ªque°
;

4006 
oÂ_vîsi⁄
) {

4007 
OFP10_VERSION
: {

4008 
oÂ10_p‹t_°©s_ªque°
 *
ªq
;

4009 
ªque°
 = 
	`oÂøw_Æloc
(
OFPRAW_OFPST10_PORT_REQUEST
, 
oÂ_vîsi⁄
, 0);

4010 
ªq
 = 
	`oÂbuf_put_zîos
(
ªque°
,  *req);

4011 
ªq
->
p‹t_no
 = 
	`ht⁄s
(
p‹t
);

4014 
OFP11_VERSION
:

4015 
OFP12_VERSION
: {

4016 
oÂ11_p‹t_°©s_ªque°
 *
ªq
;

4017 
ªque°
 = 
	`oÂøw_Æloc
(
OFPRAW_OFPST11_PORT_REQUEST
, 
oÂ_vîsi⁄
, 0);

4018 
ªq
 = 
	`oÂbuf_put_zîos
(
ªque°
,  *req);

4019 
ªq
->
p‹t_no
 = 
	`oÂutû_p‹t_to_oÂ11
(
p‹t
);

4023 
	`NOT_REACHED
();

4026  
ªque°
;

4027 
	}
}

4030 
	$oÂutû_p‹t_°©s_to_oÂ10
(c⁄° 
oÂutû_p‹t_°©s
 *
›s
,

4031 
oÂ10_p‹t_°©s
 *
ps10
)

4033 
ps10
->
p‹t_no
 = 
	`ht⁄s
(
›s
->port_no);

4034 
	`mem£t
(
ps10
->
∑d
, 0, Ös10->pad);

4035 
	`put_32Æig√d_be64
(&
ps10
->
rx_∑ckës
, 
	`ht⁄Œ
(
›s
->
°©s
.rx_packets));

4036 
	`put_32Æig√d_be64
(&
ps10
->
tx_∑ckës
, 
	`ht⁄Œ
(
›s
->
°©s
.tx_packets));

4037 
	`put_32Æig√d_be64
(&
ps10
->
rx_byãs
, 
	`ht⁄Œ
(
›s
->
°©s
.rx_bytes));

4038 
	`put_32Æig√d_be64
(&
ps10
->
tx_byãs
, 
	`ht⁄Œ
(
›s
->
°©s
.tx_bytes));

4039 
	`put_32Æig√d_be64
(&
ps10
->
rx_dr›≥d
, 
	`ht⁄Œ
(
›s
->
°©s
.rx_dropped));

4040 
	`put_32Æig√d_be64
(&
ps10
->
tx_dr›≥d
, 
	`ht⁄Œ
(
›s
->
°©s
.tx_dropped));

4041 
	`put_32Æig√d_be64
(&
ps10
->
rx_îr‹s
, 
	`ht⁄Œ
(
›s
->
°©s
.rx_errors));

4042 
	`put_32Æig√d_be64
(&
ps10
->
tx_îr‹s
, 
	`ht⁄Œ
(
›s
->
°©s
.tx_errors));

4043 
	`put_32Æig√d_be64
(&
ps10
->
rx_‰ame_îr
, 
	`ht⁄Œ
(
›s
->
°©s
.
rx_‰ame_îr‹s
));

4044 
	`put_32Æig√d_be64
(&
ps10
->
rx_ovî_îr
, 
	`ht⁄Œ
(
›s
->
°©s
.
rx_ovî_îr‹s
));

4045 
	`put_32Æig√d_be64
(&
ps10
->
rx_¸c_îr
, 
	`ht⁄Œ
(
›s
->
°©s
.
rx_¸c_îr‹s
));

4046 
	`put_32Æig√d_be64
(&
ps10
->
cﬁlisi⁄s
, 
	`ht⁄Œ
(
›s
->
°©s
.collisions));

4047 
	}
}

4050 
	$oÂutû_p‹t_°©s_to_oÂ11
(c⁄° 
oÂutû_p‹t_°©s
 *
›s
,

4051 
oÂ11_p‹t_°©s
 *
ps11
)

4053 
ps11
->
p‹t_no
 = 
	`oÂutû_p‹t_to_oÂ11
(
›s
->port_no);

4054 
	`mem£t
(
ps11
->
∑d
, 0, Ös11->pad);

4055 
ps11
->
rx_∑ckës
 = 
	`ht⁄Œ
(
›s
->
°©s
.rx_packets);

4056 
ps11
->
tx_∑ckës
 = 
	`ht⁄Œ
(
›s
->
°©s
.tx_packets);

4057 
ps11
->
rx_byãs
 = 
	`ht⁄Œ
(
›s
->
°©s
.rx_bytes);

4058 
ps11
->
tx_byãs
 = 
	`ht⁄Œ
(
›s
->
°©s
.tx_bytes);

4059 
ps11
->
rx_dr›≥d
 = 
	`ht⁄Œ
(
›s
->
°©s
.rx_dropped);

4060 
ps11
->
tx_dr›≥d
 = 
	`ht⁄Œ
(
›s
->
°©s
.tx_dropped);

4061 
ps11
->
rx_îr‹s
 = 
	`ht⁄Œ
(
›s
->
°©s
.rx_errors);

4062 
ps11
->
tx_îr‹s
 = 
	`ht⁄Œ
(
›s
->
°©s
.tx_errors);

4063 
ps11
->
rx_‰ame_îr
 = 
	`ht⁄Œ
(
›s
->
°©s
.
rx_‰ame_îr‹s
);

4064 
ps11
->
rx_ovî_îr
 = 
	`ht⁄Œ
(
›s
->
°©s
.
rx_ovî_îr‹s
);

4065 
ps11
->
rx_¸c_îr
 = 
	`ht⁄Œ
(
›s
->
°©s
.
rx_¸c_îr‹s
);

4066 
ps11
->
cﬁlisi⁄s
 = 
	`ht⁄Œ
(
›s
->
°©s
.collisions);

4067 
	}
}

4071 
	$oÂutû_≠≥nd_p‹t_°©
(
li°
 *
ª∂õs
,

4072 c⁄° 
oÂutû_p‹t_°©s
 *
›s
)

4074 
oÂbuf
 *
msg
 = 
	`oÂbuf_‰om_li°
(
	`li°_back
(
ª∂õs
));

4075 
oÂ_hódî
 *
oh
 = 
msg
->
d©a
;

4077 (
oÂ_vîsi⁄
)
oh
->
vîsi⁄
) {

4078 
OFP12_VERSION
:

4079 
OFP11_VERSION
: {

4080 
oÂ11_p‹t_°©s
 *
ª∂y
 = 
	`oÂmp_≠≥nd
(
ª∂õs
,  *reply);

4081 
	`oÂutû_p‹t_°©s_to_oÂ11
(
›s
, 
ª∂y
);

4085 
OFP10_VERSION
: {

4086 
oÂ10_p‹t_°©s
 *
ª∂y
 = 
	`oÂmp_≠≥nd
(
ª∂õs
,  *reply);

4087 
	`oÂutû_p‹t_°©s_to_oÂ10
(
›s
, 
ª∂y
);

4092 
	`NOT_REACHED
();

4094 
	}
}

4096 
oÂîr


4097 
	$oÂutû_p‹t_°©s_‰om_oÂ10
(
oÂutû_p‹t_°©s
 *
›s
,

4098 c⁄° 
oÂ10_p‹t_°©s
 *
ps10
)

4100 
	`mem£t
(
›s
, 0,  *ops);

4102 
›s
->
p‹t_no
 = 
	`¡ohs
(
ps10
->port_no);

4103 
›s
->
°©s
.
rx_∑ckës
 = 
	`¡ohŒ
(
	`gë_32Æig√d_be64
(&
ps10
->rx_packets));

4104 
›s
->
°©s
.
tx_∑ckës
 = 
	`¡ohŒ
(
	`gë_32Æig√d_be64
(&
ps10
->tx_packets));

4105 
›s
->
°©s
.
rx_byãs
 = 
	`¡ohŒ
(
	`gë_32Æig√d_be64
(&
ps10
->rx_bytes));

4106 
›s
->
°©s
.
tx_byãs
 = 
	`¡ohŒ
(
	`gë_32Æig√d_be64
(&
ps10
->tx_bytes));

4107 
›s
->
°©s
.
rx_dr›≥d
 = 
	`¡ohŒ
(
	`gë_32Æig√d_be64
(&
ps10
->rx_dropped));

4108 
›s
->
°©s
.
tx_dr›≥d
 = 
	`¡ohŒ
(
	`gë_32Æig√d_be64
(&
ps10
->tx_dropped));

4109 
›s
->
°©s
.
rx_îr‹s
 = 
	`¡ohŒ
(
	`gë_32Æig√d_be64
(&
ps10
->rx_errors));

4110 
›s
->
°©s
.
tx_îr‹s
 = 
	`¡ohŒ
(
	`gë_32Æig√d_be64
(&
ps10
->tx_errors));

4111 
›s
->
°©s
.
rx_‰ame_îr‹s
 =

4112 
	`¡ohŒ
(
	`gë_32Æig√d_be64
(&
ps10
->
rx_‰ame_îr
));

4113 
›s
->
°©s
.
rx_ovî_îr‹s
 = 
	`¡ohŒ
(
	`gë_32Æig√d_be64
(&
ps10
->
rx_ovî_îr
));

4114 
›s
->
°©s
.
rx_¸c_îr‹s
 = 
	`¡ohŒ
(
	`gë_32Æig√d_be64
(&
ps10
->
rx_¸c_îr
));

4115 
›s
->
°©s
.
cﬁlisi⁄s
 = 
	`¡ohŒ
(
	`gë_32Æig√d_be64
(&
ps10
->collisions));

4118 
	}
}

4120 
oÂîr


4121 
	$oÂutû_p‹t_°©s_‰om_oÂ11
(
oÂutû_p‹t_°©s
 *
›s
,

4122 c⁄° 
oÂ11_p‹t_°©s
 *
ps11
)

4124 
oÂîr
 
îr‹
;

4126 
	`mem£t
(
›s
, 0,  *ops);

4127 
îr‹
 = 
	`oÂutû_p‹t_‰om_oÂ11
(
ps11
->
p‹t_no
, &
›s
->port_no);

4128 i‡(
îr‹
) {

4129  
îr‹
;

4132 
›s
->
°©s
.
rx_∑ckës
 = 
	`¡ohŒ
(
ps11
->rx_packets);

4133 
›s
->
°©s
.
tx_∑ckës
 = 
	`¡ohŒ
(
ps11
->tx_packets);

4134 
›s
->
°©s
.
rx_byãs
 = 
	`¡ohŒ
(
ps11
->rx_bytes);

4135 
›s
->
°©s
.
tx_byãs
 = 
	`¡ohŒ
(
ps11
->tx_bytes);

4136 
›s
->
°©s
.
rx_dr›≥d
 = 
	`¡ohŒ
(
ps11
->rx_dropped);

4137 
›s
->
°©s
.
tx_dr›≥d
 = 
	`¡ohŒ
(
ps11
->tx_dropped);

4138 
›s
->
°©s
.
rx_îr‹s
 = 
	`¡ohŒ
(
ps11
->rx_errors);

4139 
›s
->
°©s
.
tx_îr‹s
 = 
	`¡ohŒ
(
ps11
->tx_errors);

4140 
›s
->
°©s
.
rx_‰ame_îr‹s
 = 
	`¡ohŒ
(
ps11
->
rx_‰ame_îr
);

4141 
›s
->
°©s
.
rx_ovî_îr‹s
 = 
	`¡ohŒ
(
ps11
->
rx_ovî_îr
);

4142 
›s
->
°©s
.
rx_¸c_îr‹s
 = 
	`¡ohŒ
(
ps11
->
rx_¸c_îr
);

4143 
›s
->
°©s
.
cﬁlisi⁄s
 = 
	`¡ohŒ
(
ps11
->collisions);

4146 
	}
}

4150 
size_t


4151 
	$oÂutû_cou¡_p‹t_°©s
(c⁄° 
oÂ_hódî
 *
oh
)

4153 
oÂbuf
 
b
;

4155 
	`oÂbuf_u£_c⁄°
(&
b
, 
oh
, 
	`¡ohs
(oh->
Àngth
));

4156 
	`oÂøw_puŒ_as£π
(&
b
);

4158 
	`BUILD_ASSERT
((
oÂ10_p‹t_°©s
) ==

4159 (
oÂ11_p‹t_°©s
));

4160  
b
.
size
 / (
oÂ10_p‹t_°©s
);

4161 
	}
}

4174 
	$oÂutû_decode_p‹t_°©s
(
oÂutû_p‹t_°©s
 *
ps
, 
oÂbuf
 *
msg
)

4176 
oÂîr
 
îr‹
;

4177 
oÂøw
 
øw
;

4179 
îr‹
 = (
msg
->
l2


4180 ? 
	`oÂøw_decode
(&
øw
, 
msg
->
l2
)

4181 : 
	`oÂøw_puŒ
(&
øw
, 
msg
));

4182 i‡(
îr‹
) {

4183  
îr‹
;

4186 i‡(!
msg
->
size
) {

4187  
EOF
;

4188 } i‡(
øw
 =
OFPRAW_OFPST11_PORT_REPLY
) {

4189 c⁄° 
oÂ11_p‹t_°©s
 *
ps11
;

4191 
ps11
 = 
	`oÂbuf_åy_puŒ
(
msg
,  *ps11);

4192 i‡(!
ps11
) {

4193 
	`VLOG_WARN_RL
(&
bad_ofmsg_æ
, "OFPST_PORTÑeply has %zuÜeftover "

4194 "byã†©Énd", 
msg
->
size
);

4195  
OFPERR_OFPBRC_BAD_LEN
;

4197  
	`oÂutû_p‹t_°©s_‰om_oÂ11
(
ps
, 
ps11
);

4198 } i‡(
øw
 =
OFPRAW_OFPST10_PORT_REPLY
) {

4199 c⁄° 
oÂ10_p‹t_°©s
 *
ps10
;

4201 
ps10
 = 
	`oÂbuf_åy_puŒ
(
msg
,  *ps10);

4202 i‡(!
ps10
) {

4203 
	`VLOG_WARN_RL
(&
bad_ofmsg_æ
, "OFPST_PORTÑeply has %zuÜeftover "

4204 "byã†©Énd", 
msg
->
size
);

4205  
OFPERR_OFPBRC_BAD_LEN
;

4207  
	`oÂutû_p‹t_°©s_‰om_oÂ10
(
ps
, 
ps10
);

4209 
	`NOT_REACHED
();

4212 
	}
}

4217 
oÂîr


4218 
	$oÂutû_decode_p‹t_°©s_ªque°
(c⁄° 
oÂ_hódî
 *
ªque°
,

4219 
uöt16_t
 *
oÂ10_p‹t
)

4221 (
oÂ_vîsi⁄
)
ªque°
->
vîsi⁄
) {

4222 
OFP12_VERSION
:

4223 
OFP11_VERSION
: {

4224 c⁄° 
oÂ11_p‹t_°©s_ªque°
 *
p§11
 = 
	`oÂmsg_body
(
ªque°
);

4225  
	`oÂutû_p‹t_‰om_oÂ11
(
p§11
->
p‹t_no
, 
oÂ10_p‹t
);

4228 
OFP10_VERSION
: {

4229 c⁄° 
oÂ10_p‹t_°©s_ªque°
 *
p§10
 = 
	`oÂmsg_body
(
ªque°
);

4230 *
oÂ10_p‹t
 = 
	`¡ohs
(
p§10
->
p‹t_no
);

4235 
	`NOT_REACHED
();

4237 
	}
}

4241 
oÂîr


4242 
	$oÂutû_decode_queue_°©s_ªque°
(c⁄° 
oÂ_hódî
 *
ªque°
,

4243 
oÂutû_queue_°©s_ªque°
 *
oq§
)

4245 (
oÂ_vîsi⁄
)
ªque°
->
vîsi⁄
) {

4246 
OFP12_VERSION
:

4247 
OFP11_VERSION
: {

4248 c⁄° 
oÂ11_queue_°©s_ªque°
 *
q§11
 = 
	`oÂmsg_body
(
ªque°
);

4249 
oq§
->
queue_id
 = 
	`¡ohl
(
q§11
->queue_id);

4250  
	`oÂutû_p‹t_‰om_oÂ11
(
q§11
->
p‹t_no
, &
oq§
->port_no);

4253 
OFP10_VERSION
: {

4254 c⁄° 
oÂ10_queue_°©s_ªque°
 *
q§11
 = 
	`oÂmsg_body
(
ªque°
);

4255 
oq§
->
queue_id
 = 
	`¡ohl
(
q§11
->queue_id);

4256 
oq§
->
p‹t_no
 = 
	`¡ohs
(
q§11
->port_no);

4261 
	`NOT_REACHED
();

4263 
	}
}

4268 
oÂbuf
 *

4269 
	$oÂutû_ícode_queue_°©s_ªque°
(
oÂ_vîsi⁄
 ofp_version,

4270 c⁄° 
oÂutû_queue_°©s_ªque°
 *
oq§
)

4272 
oÂbuf
 *
ªque°
;

4274 
oÂ_vîsi⁄
) {

4275 
OFP11_VERSION
:

4276 
OFP12_VERSION
: {

4277 
oÂ11_queue_°©s_ªque°
 *
ªq
;

4278 
ªque°
 = 
	`oÂøw_Æloc
(
OFPRAW_OFPST11_QUEUE_REQUEST
, 
oÂ_vîsi⁄
, 0);

4279 
ªq
 = 
	`oÂbuf_put_zîos
(
ªque°
,  *req);

4280 
ªq
->
p‹t_no
 = 
	`oÂutû_p‹t_to_oÂ11
(
oq§
->port_no);

4281 
ªq
->
queue_id
 = 
	`ht⁄l
(
oq§
->queue_id);

4284 
OFP10_VERSION
: {

4285 
oÂ10_queue_°©s_ªque°
 *
ªq
;

4286 
ªque°
 = 
	`oÂøw_Æloc
(
OFPRAW_OFPST10_QUEUE_REQUEST
, 
oÂ_vîsi⁄
, 0);

4287 
ªq
 = 
	`oÂbuf_put_zîos
(
ªque°
,  *req);

4288 
ªq
->
p‹t_no
 = 
	`ht⁄s
(
oq§
->port_no);

4289 
ªq
->
queue_id
 = 
	`ht⁄l
(
oq§
->queue_id);

4293 
	`NOT_REACHED
();

4296  
ªque°
;

4297 
	}
}

4301 
size_t


4302 
	$oÂutû_cou¡_queue_°©s
(c⁄° 
oÂ_hódî
 *
oh
)

4304 
oÂbuf
 
b
;

4306 
	`oÂbuf_u£_c⁄°
(&
b
, 
oh
, 
	`¡ohs
(oh->
Àngth
));

4307 
	`oÂøw_puŒ_as£π
(&
b
);

4309 
	`BUILD_ASSERT
((
oÂ10_queue_°©s
) ==

4310 (
oÂ11_queue_°©s
));

4311  
b
.
size
 / (
oÂ10_queue_°©s
);

4312 
	}
}

4314 
oÂîr


4315 
	$oÂutû_queue_°©s_‰om_oÂ10
(
oÂutû_queue_°©s
 *
oqs
,

4316 c⁄° 
oÂ10_queue_°©s
 *
qs10
)

4318 
oqs
->
p‹t_no
 = 
	`¡ohs
(
qs10
->port_no);

4319 
oqs
->
queue_id
 = 
	`¡ohl
(
qs10
->queue_id);

4320 
oqs
->
°©s
.
tx_byãs
 = 
	`¡ohŒ
(
	`gë_32Æig√d_be64
(&
qs10
->tx_bytes));

4321 
oqs
->
°©s
.
tx_∑ckës
 = 
	`¡ohŒ
(
	`gë_32Æig√d_be64
(&
qs10
->tx_packets));

4322 
oqs
->
°©s
.
tx_îr‹s
 = 
	`¡ohŒ
(
	`gë_32Æig√d_be64
(&
qs10
->tx_errors));

4325 
	}
}

4327 
oÂîr


4328 
	$oÂutû_queue_°©s_‰om_oÂ11
(
oÂutû_queue_°©s
 *
oqs
,

4329 c⁄° 
oÂ11_queue_°©s
 *
qs11
)

4331 
oÂîr
 
îr‹
;

4333 
îr‹
 = 
	`oÂutû_p‹t_‰om_oÂ11
(
qs11
->
p‹t_no
, &
oqs
->port_no);

4334 i‡(
îr‹
) {

4335  
îr‹
;

4338 
oqs
->
queue_id
 = 
	`¡ohl
(
qs11
->queue_id);

4339 
oqs
->
°©s
.
tx_byãs
 = 
	`¡ohŒ
(
qs11
->tx_bytes);

4340 
oqs
->
°©s
.
tx_∑ckës
 = 
	`¡ohŒ
(
qs11
->tx_packets);

4341 
oqs
->
°©s
.
tx_îr‹s
 = 
	`¡ohŒ
(
qs11
->tx_errors);

4344 
	}
}

4357 
	$oÂutû_decode_queue_°©s
(
oÂutû_queue_°©s
 *
qs
, 
oÂbuf
 *
msg
)

4359 
oÂîr
 
îr‹
;

4360 
oÂøw
 
øw
;

4362 
îr‹
 = (
msg
->
l2


4363 ? 
	`oÂøw_decode
(&
øw
, 
msg
->
l2
)

4364 : 
	`oÂøw_puŒ
(&
øw
, 
msg
));

4365 i‡(
îr‹
) {

4366  
îr‹
;

4369 i‡(!
msg
->
size
) {

4370  
EOF
;

4371 } i‡(
øw
 =
OFPRAW_OFPST11_QUEUE_REPLY
) {

4372 c⁄° 
oÂ11_queue_°©s
 *
qs11
;

4374 
qs11
 = 
	`oÂbuf_åy_puŒ
(
msg
,  *qs11);

4375 i‡(!
qs11
) {

4376 
	`VLOG_WARN_RL
(&
bad_ofmsg_æ
, "OFPST_QUEUEÑeply has %zuÜeftover "

4377 "byã†©Énd", 
msg
->
size
);

4378  
OFPERR_OFPBRC_BAD_LEN
;

4380  
	`oÂutû_queue_°©s_‰om_oÂ11
(
qs
, 
qs11
);

4381 } i‡(
øw
 =
OFPRAW_OFPST10_QUEUE_REPLY
) {

4382 c⁄° 
oÂ10_queue_°©s
 *
qs10
;

4384 
qs10
 = 
	`oÂbuf_åy_puŒ
(
msg
,  *qs10);

4385 i‡(!
qs10
) {

4386 
	`VLOG_WARN_RL
(&
bad_ofmsg_æ
, "OFPST_QUEUEÑeply has %zuÜeftover "

4387 "byã†©Énd", 
msg
->
size
);

4388  
OFPERR_OFPBRC_BAD_LEN
;

4390  
	`oÂutû_queue_°©s_‰om_oÂ10
(
qs
, 
qs10
);

4392 
	`NOT_REACHED
();

4394 
	}
}

4397 
	$oÂutû_queue_°©s_to_oÂ10
(c⁄° 
oÂutû_queue_°©s
 *
oqs
,

4398 
oÂ10_queue_°©s
 *
qs10
)

4400 
qs10
->
p‹t_no
 = 
	`ht⁄s
(
oqs
->port_no);

4401 
	`mem£t
(
qs10
->
∑d
, 0,  qs10->pad);

4402 
qs10
->
queue_id
 = 
	`ht⁄l
(
oqs
->queue_id);

4403 
	`put_32Æig√d_be64
(&
qs10
->
tx_byãs
, 
	`ht⁄Œ
(
oqs
->
°©s
.tx_bytes));

4404 
	`put_32Æig√d_be64
(&
qs10
->
tx_∑ckës
, 
	`ht⁄Œ
(
oqs
->
°©s
.tx_packets));

4405 
	`put_32Æig√d_be64
(&
qs10
->
tx_îr‹s
, 
	`ht⁄Œ
(
oqs
->
°©s
.tx_errors));

4406 
	}
}

4409 
	$oÂutû_queue_°©s_to_oÂ11
(c⁄° 
oÂutû_queue_°©s
 *
oqs
,

4410 
oÂ11_queue_°©s
 *
qs11
)

4412 
qs11
->
p‹t_no
 = 
	`oÂutû_p‹t_to_oÂ11
(
oqs
->port_no);

4413 
qs11
->
queue_id
 = 
	`ht⁄l
(
oqs
->queue_id);

4414 
qs11
->
tx_byãs
 = 
	`ht⁄Œ
(
oqs
->
°©s
.tx_bytes);

4415 
qs11
->
tx_∑ckës
 = 
	`ht⁄Œ
(
oqs
->
°©s
.tx_packets);

4416 
qs11
->
tx_îr‹s
 = 
	`ht⁄Œ
(
oqs
->
°©s
.tx_errors);

4417 
	}
}

4421 
	$oÂutû_≠≥nd_queue_°©
(
li°
 *
ª∂õs
,

4422 c⁄° 
oÂutû_queue_°©s
 *
oqs
)

4424 
oÂbuf
 *
msg
 = 
	`oÂbuf_‰om_li°
(
	`li°_back
(
ª∂õs
));

4425 
oÂ_hódî
 *
oh
 = 
msg
->
d©a
;

4427 (
oÂ_vîsi⁄
)
oh
->
vîsi⁄
) {

4428 
OFP12_VERSION
:

4429 
OFP11_VERSION
: {

4430 
oÂ11_queue_°©s
 *
ª∂y
 = 
	`oÂmp_≠≥nd
(
ª∂õs
,  *reply);;

4431 
	`oÂutû_queue_°©s_to_oÂ11
(
oqs
, 
ª∂y
);

4435 
OFP10_VERSION
: {

4436 
oÂ10_queue_°©s
 *
ª∂y
 = 
	`oÂmp_≠≥nd
(
ª∂õs
,  *reply);;

4437 
	`oÂutû_queue_°©s_to_oÂ10
(
oqs
, 
ª∂y
);

4442 
	`NOT_REACHED
();

4444 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/ofp-util.h

17 #i‚de‡
OFP_UTIL_H


18 
	#OFP_UTIL_H
 1

	)

20 
	~<as£π.h
>

21 
	~<°dboﬁ.h
>

22 
	~<°ddef.h
>

23 
	~<°döt.h
>

24 
	~"˛assifõr.h
"

25 
	~"compûî.h
"

26 
	~"Êow.h
"

27 
	~"m©ch.h
"

28 
	~"√tdev.h
"

29 
	~"›íÊow/nicúa-ext.h
"

30 
	~"›ívswôch/ty≥s.h
"

32 
	goÂbuf
;

35 
oÂîr
 
oÂutû_p‹t_‰om_oÂ11
(
ovs_be32
 
oÂ11_p‹t
, 
uöt16_t
 *
oÂ10_p‹t
);

36 
ovs_be32
 
oÂutû_p‹t_to_oÂ11
(
uöt16_t
 
oÂ10_p‹t
);

38 
oÂîr
 
oÂutû_check_ouçut_p‹t
(
uöt16_t
 
oÂ_p‹t
, 
max_p‹ts
);

39 
boﬁ
 
oÂutû_p‹t_‰om_°rög
(c⁄° *, 
uöt16_t
 *
p‹ç
);

40 
oÂutû_f‹m©_p‹t
(
uöt16_t
 
p‹t
, 
ds
 *);

44 
ovs_be32
 
oÂutû_wcbôs_to_√tmask
(
wcbôs
);

45 
oÂutû_√tmask_to_wcbôs
(
ovs_be32
 
√tmask
);

60 
	eoÂutû_¥Ÿocﬁ
 {

62 
	mOFPUTIL_P_OF10
 = 1 << 0,

63 
	mOFPUTIL_P_OF10_TID
 = 1 << 1,

64 
	#OFPUTIL_P_OF10_ANY
 (
OFPUTIL_P_OF10
 | 
OFPUTIL_P_OF10_TID
)

	)

67 
	mOFPUTIL_P_NXM
 = 1 << 2,

68 
	mOFPUTIL_P_NXM_TID
 = 1 << 3,

69 
	#OFPUTIL_P_NXM_ANY
 (
OFPUTIL_P_NXM
 | 
OFPUTIL_P_NXM_TID
)

	)

72 
	mOFPUTIL_P_OF12
 = 1 << 4,

75 
	#OFPUTIL_P_ANY
 (
OFPUTIL_P_OF10_ANY
 | 
OFPUTIL_P_NXM_ANY
)

	)

78 
	#OFPUTIL_P_TID
 (
OFPUTIL_P_OF10_TID
 | 
OFPUTIL_P_NXM_TID
)

	)

82 
oÂutû_¥Ÿocﬁ
 
oÂutû_Êow_dump_¥Ÿocﬁs
[];

83 
size_t
 
oÂutû_n_Êow_dump_¥Ÿocﬁs
;

85 
oÂutû_¥Ÿocﬁ


86 
oÂutû_¥Ÿocﬁ_‰om_oÂ_vîsi⁄
(
oÂ_vîsi⁄
 
vîsi⁄
);

87 
oÂ_vîsi⁄
 
oÂutû_¥Ÿocﬁ_to_oÂ_vîsi⁄
(
oÂutû_¥Ÿocﬁ
);

89 
boﬁ
 
oÂutû_¥Ÿocﬁ_is_vÆid
(
oÂutû_¥Ÿocﬁ
);

90 
oÂutû_¥Ÿocﬁ
 
oÂutû_¥Ÿocﬁ_£t_tid
(ofputil_protocol,

91 
boﬁ
 
íabÀ
);

92 
oÂutû_¥Ÿocﬁ
 
oÂutû_¥Ÿocﬁ_to_ba£
(ofputil_protocol);

93 
oÂutû_¥Ÿocﬁ
 
oÂutû_¥Ÿocﬁ_£t_ba£
(

94 
oÂutû_¥Ÿocﬁ
 
cur
, oÂutû_¥Ÿocﬁ 
√w_ba£
);

96 c⁄° *
oÂutû_¥Ÿocﬁ_to_°rög
(
oÂutû_¥Ÿocﬁ
);

97 *
oÂutû_¥Ÿocﬁs_to_°rög
(
oÂutû_¥Ÿocﬁ
);

98 
oÂutû_¥Ÿocﬁ
 
oÂutû_¥Ÿocﬁs_‰om_°rög
(const *);

99 
oÂutû_¥Ÿocﬁ
 
oÂutû_ußbÀ_¥Ÿocﬁs
(c⁄° 
m©ch
 *);

101 
oÂbuf
 *
oÂutû_ícode_£t_¥Ÿocﬁ
(
oÂutû_¥Ÿocﬁ
 
cuºít
,

102 
oÂutû_¥Ÿocﬁ
 
w™t
,

103 
oÂutû_¥Ÿocﬁ
 *
√xt
);

106 
oÂbuf
 *
oÂutû_ícode_nx_£t_Êow_f‹m©
(
nx_Êow_f‹m©
);

107 
oÂutû_¥Ÿocﬁ
 
oÂutû_nx_Êow_f‹m©_to_¥Ÿocﬁ
(
nx_Êow_f‹m©
);

108 
boﬁ
 
oÂutû_nx_Êow_f‹m©_is_vÆid
(
nx_Êow_f‹m©
);

109 c⁄° *
oÂutû_nx_Êow_f‹m©_to_°rög
(
nx_Êow_f‹m©
);

112 
oÂutû_wûdˇrd_‰om_oÂfw10
(
uöt32_t
 
oÂfw
, 
Êow_wûdˇrds
 *);

113 
oÂutû_m©ch_‰om_oÂ10_m©ch
(c⁄° 
oÂ10_m©ch
 *,

114 
m©ch
 *);

115 
oÂutû_n‹mÆize_m©ch
(
m©ch
 *);

116 
oÂutû_n‹mÆize_m©ch_quõt
(
m©ch
 *);

117 
oÂutû_m©ch_to_oÂ10_m©ch
(c⁄° 
m©ch
 *, 
oÂ10_m©ch
 *);

120 
oÂîr
 
oÂutû_puŒ_oÂ11_m©ch
(
oÂbuf
 *, 
m©ch
 *,

121 
uöt16_t
 *
∑dded_m©ch_Àn
);

122 
oÂîr
 
oÂutû_m©ch_‰om_oÂ11_m©ch
(c⁄° 
oÂ11_m©ch
 *,

123 
m©ch
 *);

124 
oÂutû_m©ch_to_oÂ11_m©ch
(c⁄° 
m©ch
 *, 
oÂ11_m©ch
 *);

127 
ovs_be16
 
oÂutû_dl_ty≥_to_›íÊow
(ovs_be16 
Êow_dl_ty≥
);

128 
ovs_be16
 
oÂutû_dl_ty≥_‰om_›íÊow
(ovs_be16 
oÂ_dl_ty≥
);

131 
boﬁ
 
oÂutû_∑ckë_ö_f‹m©_is_vÆid
(
nx_∑ckë_ö_f‹m©
);

132 
oÂutû_∑ckë_ö_f‹m©_‰om_°rög
(const *);

133 c⁄° *
oÂutû_∑ckë_ö_f‹m©_to_°rög
(
nx_∑ckë_ö_f‹m©
);

134 
oÂbuf
 *
oÂutû_make_£t_∑ckë_ö_f‹m©
(
oÂ_vîsi⁄
,

135 
nx_∑ckë_ö_f‹m©
);

138 
oÂbuf
 *
oÂutû_make_Êow_mod_èbÀ_id
(
boﬁ
 
Êow_mod_èbÀ_id
);

158 
	soÂutû_Êow_mod
 {

159 
m©ch
 
	mm©ch
;

160 
	m¥i‹ôy
;

161 
ovs_be64
 
	mcookõ
;

162 
ovs_be64
 
	mcookõ_mask
;

163 
ovs_be64
 
	m√w_cookõ
;

164 
uöt8_t
 
	mèbÀ_id
;

165 
uöt16_t
 
	mcomm™d
;

166 
uöt16_t
 
	midÀ_timeout
;

167 
uöt16_t
 
	mh¨d_timeout
;

168 
uöt32_t
 
	mbuf„r_id
;

169 
uöt16_t
 
	mout_p‹t
;

170 
uöt16_t
 
	mÊags
;

171 
oÂa˘
 *
	moÂa˘s
;

172 
size_t
 
	moÂa˘s_Àn
;

175 
oÂîr
 
oÂutû_decode_Êow_mod
(
oÂutû_Êow_mod
 *,

176 c⁄° 
oÂ_hódî
 *,

177 
oÂutû_¥Ÿocﬁ
,

178 
oÂbuf
 *
oÂa˘s
);

179 
oÂbuf
 *
oÂutû_ícode_Êow_mod
(c⁄° 
oÂutû_Êow_mod
 *,

180 
oÂutû_¥Ÿocﬁ
);

182 
oÂutû_¥Ÿocﬁ
 
oÂutû_Êow_mod_ußbÀ_¥Ÿocﬁs
(

183 c⁄° 
oÂutû_Êow_mod
 *
fms
, 
size_t
 
n_fms
);

186 
	soÂutû_Êow_°©s_ªque°
 {

187 
boﬁ
 
	maggªg©e
;

188 
m©ch
 
	mm©ch
;

189 
ovs_be64
 
	mcookõ
;

190 
ovs_be64
 
	mcookõ_mask
;

191 
uöt16_t
 
	mout_p‹t
;

192 
uöt8_t
 
	mèbÀ_id
;

195 
oÂîr
 
oÂutû_decode_Êow_°©s_ªque°
(

196 
oÂutû_Êow_°©s_ªque°
 *, c⁄° 
oÂ_hódî
 *);

197 
oÂbuf
 *
oÂutû_ícode_Êow_°©s_ªque°
(

198 c⁄° 
oÂutû_Êow_°©s_ªque°
 *, 
oÂutû_¥Ÿocﬁ
);

199 
oÂutû_¥Ÿocﬁ
 
oÂutû_Êow_°©s_ªque°_ußbÀ_¥Ÿocﬁs
(

200 c⁄° 
oÂutû_Êow_°©s_ªque°
 *);

203 
	soÂutû_Êow_°©s
 {

204 
m©ch
 
	mm©ch
;

205 
ovs_be64
 
	mcookõ
;

206 
uöt8_t
 
	mèbÀ_id
;

207 
uöt32_t
 
	mduøti⁄_£c
;

208 
uöt32_t
 
	mduøti⁄_n£c
;

209 
uöt16_t
 
	m¥i‹ôy
;

210 
uöt16_t
 
	midÀ_timeout
;

211 
uöt16_t
 
	mh¨d_timeout
;

212 
	midÀ_age
;

213 
	mh¨d_age
;

214 
uöt64_t
 
	m∑ckë_cou¡
;

215 
uöt64_t
 
	mbyã_cou¡
;

216 
oÂa˘
 *
	moÂa˘s
;

217 
size_t
 
	moÂa˘s_Àn
;

220 
oÂutû_decode_Êow_°©s_ª∂y
(
oÂutû_Êow_°©s
 *,

221 
oÂbuf
 *
msg
,

222 
boﬁ
 
Êow_age_exãnsi⁄
,

223 
oÂbuf
 *
oÂa˘s
);

224 
oÂutû_≠≥nd_Êow_°©s_ª∂y
(c⁄° 
oÂutû_Êow_°©s
 *,

225 
li°
 *
ª∂õs
);

228 
	soÂutû_aggªg©e_°©s
 {

229 
uöt64_t
 
	m∑ckë_cou¡
;

230 
uöt64_t
 
	mbyã_cou¡
;

231 
uöt32_t
 
	mÊow_cou¡
;

234 
oÂbuf
 *
oÂutû_ícode_aggªg©e_°©s_ª∂y
(

235 c⁄° 
oÂutû_aggªg©e_°©s
 *
°©s
,

236 c⁄° 
oÂ_hódî
 *
ªque°
);

237 
oÂîr
 
oÂutû_decode_aggªg©e_°©s_ª∂y
(

238 
oÂutû_aggªg©e_°©s
 *,

239 c⁄° 
oÂ_hódî
 *
ª∂y
);

242 
	soÂutû_Êow_ªmoved
 {

243 
m©ch
 
	mm©ch
;

244 
uöt16_t
 
	m¥i‹ôy
;

245 
ovs_be64
 
	mcookõ
;

246 
uöt8_t
 
	mªas⁄
;

247 
uöt8_t
 
	mèbÀ_id
;

248 
uöt32_t
 
	mduøti⁄_£c
;

249 
uöt32_t
 
	mduøti⁄_n£c
;

250 
uöt16_t
 
	midÀ_timeout
;

251 
uöt16_t
 
	mh¨d_timeout
;

252 
uöt64_t
 
	m∑ckë_cou¡
;

253 
uöt64_t
 
	mbyã_cou¡
;

256 
oÂîr
 
oÂutû_decode_Êow_ªmoved
(
oÂutû_Êow_ªmoved
 *,

257 c⁄° 
oÂ_hódî
 *);

258 
oÂbuf
 *
oÂutû_ícode_Êow_ªmoved
(c⁄° 
oÂutû_Êow_ªmoved
 *,

259 
oÂutû_¥Ÿocﬁ
);

262 
	soÂutû_∑ckë_ö
 {

263 c⁄° *
	m∑ckë
;

264 
size_t
 
	m∑ckë_Àn
;

266 
oÂ_∑ckë_ö_ªas⁄
 
	mªas⁄
;

267 
uöt16_t
 
	mc⁄åﬁÀr_id
;

268 
uöt8_t
 
	mèbÀ_id
;

269 
ovs_be64
 
	mcookõ
;

271 
uöt32_t
 
	mbuf„r_id
;

272 
	m£nd_Àn
;

273 
uöt16_t
 
	mtŸÆ_Àn
;

275 
Êow_mëad©a
 
	mfmd
;

278 
oÂîr
 
oÂutû_decode_∑ckë_ö
(
oÂutû_∑ckë_ö
 *,

279 c⁄° 
oÂ_hódî
 *);

280 
oÂbuf
 *
oÂutû_ícode_∑ckë_ö
(c⁄° 
oÂutû_∑ckë_ö
 *,

281 
oÂutû_¥Ÿocﬁ
 
¥Ÿocﬁ
,

282 
nx_∑ckë_ö_f‹m©
);

284 c⁄° *
oÂutû_∑ckë_ö_ªas⁄_to_°rög
(
oÂ_∑ckë_ö_ªas⁄
);

285 
boﬁ
 
oÂutû_∑ckë_ö_ªas⁄_‰om_°rög
(const *,

286 
oÂ_∑ckë_ö_ªas⁄
 *);

292 
	soÂutû_∑ckë_out
 {

293 c⁄° *
	m∑ckë
;

294 
size_t
 
	m∑ckë_Àn
;

295 
uöt32_t
 
	mbuf„r_id
;

296 
uöt16_t
 
	mö_p‹t
;

297 
oÂa˘
 *
	moÂa˘s
;

298 
size_t
 
	moÂa˘s_Àn
;

301 
oÂîr
 
oÂutû_decode_∑ckë_out
(
oÂutû_∑ckë_out
 *,

302 c⁄° 
oÂ_hódî
 *,

303 
oÂbuf
 *
oÂa˘s
);

304 
oÂbuf
 *
oÂutû_ícode_∑ckë_out
(c⁄° 
oÂutû_∑ckë_out
 *,

305 
oÂutû_¥Ÿocﬁ
 
¥Ÿocﬁ
);

307 
	eoÂutû_p‹t_c⁄fig
 {

309 
	mOFPUTIL_PC_PORT_DOWN
 = 1 << 0,

310 
	mOFPUTIL_PC_NO_RECV
 = 1 << 2,

311 
	mOFPUTIL_PC_NO_FWD
 = 1 << 5,

312 
	mOFPUTIL_PC_NO_PACKET_IN
 = 1 << 6,

314 
	mOFPUTIL_PC_NO_STP
 = 1 << 1,

315 
	mOFPUTIL_PC_NO_RECV_STP
 = 1 << 3,

316 
	mOFPUTIL_PC_NO_FLOOD
 = 1 << 4,

320 
	eoÂutû_p‹t_°©e
 {

322 
	mOFPUTIL_PS_LINK_DOWN
 = 1 << 0,

324 
	mOFPUTIL_PS_BLOCKED
 = 1 << 1,

325 
	mOFPUTIL_PS_LIVE
 = 1 << 2,

327 
	mOFPUTIL_PS_STP_LISTEN
 = 0 << 8,

328 
	mOFPUTIL_PS_STP_LEARN
 = 1 << 8,

329 
	mOFPUTIL_PS_STP_FORWARD
 = 2 << 8,

330 
	mOFPUTIL_PS_STP_BLOCK
 = 3 << 8,

331 
	mOFPUTIL_PS_STP_MASK
 = 3 << 8

335 
	soÂutû_phy_p‹t
 {

336 
uöt16_t
 
	mp‹t_no
;

337 
uöt8_t
 
	mhw_addr
[
OFP_ETH_ALEN
];

338 
	m«me
[
OFP_MAX_PORT_NAME_LEN
];

339 
oÂutû_p‹t_c⁄fig
 
	mc⁄fig
;

340 
oÂutû_p‹t_°©e
 
	m°©e
;

343 
√tdev_„©uªs
 
	mcuº
;

344 
√tdev_„©uªs
 
	madvîti£d
;

345 
√tdev_„©uªs
 
	msuµ‹ãd
;

346 
√tdev_„©uªs
 
	m≥î
;

349 
uöt32_t
 
	mcuº_•ìd
;

350 
uöt32_t
 
	mmax_•ìd
;

353 
	eoÂutû_ˇ∑bûôõs
 {

355 
	mOFPUTIL_C_FLOW_STATS
 = 1 << 0,

356 
	mOFPUTIL_C_TABLE_STATS
 = 1 << 1,

357 
	mOFPUTIL_C_PORT_STATS
 = 1 << 2,

358 
	mOFPUTIL_C_IP_REASM
 = 1 << 5,

359 
	mOFPUTIL_C_QUEUE_STATS
 = 1 << 6,

362 
	mOFPUTIL_C_ARP_MATCH_IP
 = 1 << 7,

365 
	mOFPUTIL_C_STP
 = 1 << 3,

368 
	mOFPUTIL_C_GROUP_STATS
 = 1 << 4,

371 
	mOFPUTIL_C_PORT_BLOCKED
 = 1 << 8,

374 
	eoÂutû_a˘i⁄_bôm≠
 {

375 
	mOFPUTIL_A_OUTPUT
 = 1 << 0,

376 
	mOFPUTIL_A_SET_VLAN_VID
 = 1 << 1,

377 
	mOFPUTIL_A_SET_VLAN_PCP
 = 1 << 2,

378 
	mOFPUTIL_A_STRIP_VLAN
 = 1 << 3,

379 
	mOFPUTIL_A_SET_DL_SRC
 = 1 << 4,

380 
	mOFPUTIL_A_SET_DL_DST
 = 1 << 5,

381 
	mOFPUTIL_A_SET_NW_SRC
 = 1 << 6,

382 
	mOFPUTIL_A_SET_NW_DST
 = 1 << 7,

383 
	mOFPUTIL_A_SET_NW_ECN
 = 1 << 8,

384 
	mOFPUTIL_A_SET_NW_TOS
 = 1 << 9,

385 
	mOFPUTIL_A_SET_TP_SRC
 = 1 << 10,

386 
	mOFPUTIL_A_SET_TP_DST
 = 1 << 11,

387 
	mOFPUTIL_A_ENQUEUE
 = 1 << 12,

388 
	mOFPUTIL_A_COPY_TTL_OUT
 = 1 << 13,

389 
	mOFPUTIL_A_COPY_TTL_IN
 = 1 << 14,

390 
	mOFPUTIL_A_SET_MPLS_LABEL
 = 1 << 15,

391 
	mOFPUTIL_A_SET_MPLS_TC
 = 1 << 16,

392 
	mOFPUTIL_A_SET_MPLS_TTL
 = 1 << 17,

393 
	mOFPUTIL_A_DEC_MPLS_TTL
 = 1 << 18,

394 
	mOFPUTIL_A_PUSH_VLAN
 = 1 << 19,

395 
	mOFPUTIL_A_POP_VLAN
 = 1 << 20,

396 
	mOFPUTIL_A_PUSH_MPLS
 = 1 << 21,

397 
	mOFPUTIL_A_POP_MPLS
 = 1 << 22,

398 
	mOFPUTIL_A_SET_QUEUE
 = 1 << 23,

399 
	mOFPUTIL_A_GROUP
 = 1 << 24,

400 
	mOFPUTIL_A_SET_NW_TTL
 = 1 << 25,

401 
	mOFPUTIL_A_DEC_NW_TTL
 = 1 << 26,

402 
	mOFPUTIL_A_SET_FIELD
 = 1 << 27,

406 
	soÂutû_swôch_„©uªs
 {

407 
uöt64_t
 
	md©≠©h_id
;

408 
uöt32_t
 
	mn_buf„rs
;

409 
uöt8_t
 
	mn_èbÀs
;

410 
oÂutû_ˇ∑bûôõs
 
	mˇ∑bûôõs
;

411 
oÂutû_a˘i⁄_bôm≠
 
	ma˘i⁄s
;

414 
oÂîr
 
oÂutû_decode_swôch_„©uªs
(c⁄° 
oÂ_hódî
 *,

415 
oÂutû_swôch_„©uªs
 *,

416 
oÂbuf
 *);

418 
oÂbuf
 *
oÂutû_ícode_swôch_„©uªs
(

419 c⁄° 
oÂutû_swôch_„©uªs
 *, 
oÂutû_¥Ÿocﬁ
,

420 
ovs_be32
 
xid
);

421 
oÂutû_put_swôch_„©uªs_p‹t
(c⁄° 
oÂutû_phy_p‹t
 *,

422 
oÂbuf
 *);

423 
boﬁ
 
oÂutû_swôch_„©uªs_p‹ts_åunc
(
oÂbuf
 *
b
);

426 
oÂutû_puŒ_phy_p‹t
(
oÂ_vîsi⁄
 oÂ_vîsi⁄, 
oÂbuf
 *,

427 
oÂutû_phy_p‹t
 *);

428 
size_t
 
oÂutû_cou¡_phy_p‹ts
(
uöt8_t
 
oÂ_vîsi⁄
, 
oÂbuf
 *);

431 
	soÂutû_p‹t_°©us
 {

432 
oÂ_p‹t_ªas⁄
 
	mªas⁄
;

433 
oÂutû_phy_p‹t
 
	mdesc
;

436 
oÂîr
 
oÂutû_decode_p‹t_°©us
(c⁄° 
oÂ_hódî
 *,

437 
oÂutû_p‹t_°©us
 *);

438 
oÂbuf
 *
oÂutû_ícode_p‹t_°©us
(c⁄° 
oÂutû_p‹t_°©us
 *,

439 
oÂutû_¥Ÿocﬁ
);

442 
	soÂutû_p‹t_mod
 {

443 
uöt16_t
 
	mp‹t_no
;

444 
uöt8_t
 
	mhw_addr
[
OFP_ETH_ALEN
];

445 
oÂutû_p‹t_c⁄fig
 
	mc⁄fig
;

446 
oÂutû_p‹t_c⁄fig
 
	mmask
;

447 
√tdev_„©uªs
 
	madvîti£
;

450 
oÂîr
 
oÂutû_decode_p‹t_mod
(c⁄° 
oÂ_hódî
 *,

451 
oÂutû_p‹t_mod
 *);

452 
oÂbuf
 *
oÂutû_ícode_p‹t_mod
(c⁄° 
oÂutû_p‹t_mod
 *,

453 
oÂutû_¥Ÿocﬁ
);

460 
oÂbuf
 *
oÂutû_ícode_èbÀ_°©s_ª∂y
(

461 c⁄° 
oÂ12_èbÀ_°©s
[], 
n
,

462 c⁄° 
oÂ_hódî
 *
ªque°
);

465 
	soÂutû_Êow_m⁄ô‹_ªque°
 {

466 
uöt32_t
 
	mid
;

467 
nx_Êow_m⁄ô‹_Êags
 
	mÊags
;

468 
uöt16_t
 
	mout_p‹t
;

469 
uöt8_t
 
	mèbÀ_id
;

470 
m©ch
 
	mm©ch
;

473 
oÂutû_decode_Êow_m⁄ô‹_ªque°
(
oÂutû_Êow_m⁄ô‹_ªque°
 *,

474 
oÂbuf
 *
msg
);

475 
oÂutû_≠≥nd_Êow_m⁄ô‹_ªque°
(

476 c⁄° 
oÂutû_Êow_m⁄ô‹_ªque°
 *, 
oÂbuf
 *
msg
);

479 
	soÂutû_Êow_upd©e
 {

480 
nx_Êow_upd©e_evít
 
	mevít
;

483 
oÂ_Êow_ªmoved_ªas⁄
 
	mªas⁄
;

484 
uöt16_t
 
	midÀ_timeout
;

485 
uöt16_t
 
	mh¨d_timeout
;

486 
uöt8_t
 
	mèbÀ_id
;

487 
ovs_be64
 
	mcookõ
;

488 
m©ch
 *
	mm©ch
;

489 
uöt16_t
 
	m¥i‹ôy
;

490 
oÂa˘
 *
	moÂa˘s
;

491 
size_t
 
	moÂa˘s_Àn
;

494 
ovs_be32
 
	mxid
;

497 
oÂutû_decode_Êow_upd©e
(
oÂutû_Êow_upd©e
 *,

498 
oÂbuf
 *
msg
, oÂbu‡*
oÂa˘s
);

499 
oÂutû_°¨t_Êow_upd©e
(
li°
 *
ª∂õs
);

500 
oÂutû_≠≥nd_Êow_upd©e
(c⁄° 
oÂutû_Êow_upd©e
 *,

501 
li°
 *
ª∂õs
);

504 
uöt32_t
 
oÂutû_decode_Êow_m⁄ô‹_ˇn˚l
(c⁄° 
oÂ_hódî
 *);

505 
oÂbuf
 *
oÂutû_ícode_Êow_m⁄ô‹_ˇn˚l
(
uöt32_t
 
id
);

508 
oÂutû_≠≥nd_p‹t_desc_°©s_ª∂y
(
oÂ_vîsi⁄
 ofp_version,

509 c⁄° 
oÂutû_phy_p‹t
 *
µ
,

510 
li°
 *
ª∂õs
);

513 
oÂbuf
 *
make_echo_ªque°
(
oÂ_vîsi⁄
);

514 
oÂbuf
 *
make_echo_ª∂y
(c⁄° 
oÂ_hódî
 *
rq
);

516 
oÂbuf
 *
oÂutû_ícode_b¨rõr_ªque°
(
oÂ_vîsi⁄
);

518 c⁄° *
oÂutû_‰ag_h™dlög_to_°rög
(
oÂ_c⁄fig_Êags
);

519 
boﬁ
 
oÂutû_‰ag_h™dlög_‰om_°rög
(c⁄° *, 
oÂ_c⁄fig_Êags
 *);

607 
OVS_PACKED_ENUM
 
	goÂutû_a˘i⁄_code
 {

608 
	gOFPUTIL_ACTION_INVALID
,

609 
	#OFPAT10_ACTION
(
ENUM
, 
STRUCT
, 
NAME
Ë
OFPUTIL_
##ENUM,

	)

610 
	#OFPAT11_ACTION
(
ENUM
, 
STRUCT
, 
EXTENSIBLE
, 
NAME
Ë
OFPUTIL_
##ENUM,

	)

611 
	#NXAST_ACTION
(
ENUM
, 
STRUCT
, 
EXTENSIBLE
, 
NAME
Ë
OFPUTIL_
##ENUM,

	)

613 
	#NC_ACTION
(
ENUM
, 
STRUCT
, 
EXTENSIBLE
, 
NAME
Ë
OFPUTIL_
##ENUM,

	)

615 
	~"oÂ-utû.def
"

620 
	#OFPAT10_ACTION
(
ENUM
, 
STRUCT
, 
NAME
Ë+ 1

	)

621 
	#OFPAT11_ACTION
(
ENUM
, 
STRUCT
, 
EXTENSIBLE
, 
NAME
Ë+ 1

	)

622 
	#NXAST_ACTION
(
ENUM
, 
STRUCT
, 
EXTENSIBLE
, 
NAME
Ë+ 1

	)

624 
	#NC_ACTION
(
ENUM
, 
STRUCT
, 
EXTENSIBLE
, 
NAME
Ë+ 1

	)

626 
	mOFPUTIL_N_ACTIONS
 = 1

627 
	~"oÂ-utû.def
"

630 
oÂutû_a˘i⁄_code_‰om_«me
(const *);

632 *
oÂutû_put_a˘i⁄
(
oÂutû_a˘i⁄_code
, 
oÂbuf
 *
buf
);

648 
	#OFPAT10_ACTION
(
ENUM
, 
STRUCT
, 
NAME
) \

649 
oÂutû_öô_
##
	`ENUM
(
STRUCT
 *); \

650 
STRUCT
 *
oÂutû_put_
##
	`ENUM
(
oÂbuf
 *);

	)

651 
	#OFPAT11_ACTION
(
ENUM
, 
STRUCT
, 
EXTENSIBLE
, 
NAME
) \

652 
oÂutû_öô_
##
	`ENUM
(
STRUCT
 *); \

653 
STRUCT
 *
oÂutû_put_
##
	`ENUM
(
oÂbuf
 *);

	)

654 
	#NXAST_ACTION
(
ENUM
, 
STRUCT
, 
EXTENSIBLE
, 
NAME
) \

655 
oÂutû_öô_
##
	`ENUM
(
STRUCT
 *); \

656 
STRUCT
 *
oÂutû_put_
##
	`ENUM
(
oÂbuf
 *);

	)

658 
	#NC_ACTION
(
ENUM
, 
STRUCT
, 
EXTENSIBLE
, 
NAME
) \

659 
oÂutû_öô_
##
	`ENUM
(
STRUCT
 *); \

660 
STRUCT
 *
oÂutû_put_
##
	`ENUM
(
oÂbuf
 *);

	)

662 
	~"oÂ-utû.def
"

664 
	#OFP_ACTION_ALIGN
 8

	)

666 
oÂîr
 
vÆid©e_a˘i⁄s
(c⁄° 
oÂ_a˘i⁄
 *, 
size_t
 
n_a˘i⁄s
,

667 c⁄° 
Êow
 *, 
max_p‹ts
);

668 
boﬁ
 
a˘i⁄_ouçuts_to_p‹t
(c⁄° 
oÂ_a˘i⁄
 *, 
ovs_be16
 
p‹t
);

670 
oÂîr
 
oÂutû_puŒ_a˘i⁄s
(
oÂbuf
 *, 
a˘i⁄s_Àn
,

671 
oÂ_a˘i⁄
 **, 
size_t
 *);

673 
boﬁ
 
oÂutû_a˘i⁄s_equÆ
(c⁄° 
oÂ_a˘i⁄
 *
a
, 
size_t
 
n_a
,

674 c⁄° 
oÂ_a˘i⁄
 *
b
, 
size_t
 
n_b
);

675 
oÂ_a˘i⁄
 *
oÂutû_a˘i⁄s_˛⁄e
(c⁄° oÂ_a˘i⁄ *, 
size_t
 
n
);

678 
boﬁ
 
oÂutû_∑r£_key_vÆue
(**
°rögp
, **
keyp
, **
vÆuï
);

680 
oÂbuf
 *
oÂuéû_dump_p‹ts
(
oÂ_vîsi⁄
 oÂ_vîsi⁄, 
öt16_t
 
p‹t
);

682 
	soÂutû_p‹t_°©s
 {

683 
uöt16_t
 
	mp‹t_no
;

684 
√tdev_°©s
 
	m°©s
;

687 
oÂbuf
 *
oÂutû_ícode_dump_p‹ts_ªque°
(
oÂ_vîsi⁄
 ofp_version,

688 
öt16_t
 
p‹t
);

689 
oÂutû_≠≥nd_p‹t_°©
(
li°
 *
ª∂õs
,

690 c⁄° 
oÂutû_p‹t_°©s
 *
›s
);

691 
size_t
 
oÂutû_cou¡_p‹t_°©s
(c⁄° 
oÂ_hódî
 *);

692 
oÂutû_decode_p‹t_°©s
(
oÂutû_p‹t_°©s
 *, 
oÂbuf
 *
msg
);

693 
oÂîr
 
oÂutû_decode_p‹t_°©s_ªque°
(c⁄° 
oÂ_hódî
 *
ªque°
,

694 
uöt16_t
 *
oÂ10_p‹t
);

696 
	soÂutû_queue_°©s_ªque°
 {

697 
uöt16_t
 
	mp‹t_no
;

698 
uöt32_t
 
	mqueue_id
;

701 
oÂîr


702 
oÂutû_decode_queue_°©s_ªque°
(c⁄° 
oÂ_hódî
 *
ªque°
,

703 
oÂutû_queue_°©s_ªque°
 *
oq§
);

704 
oÂbuf
 *

705 
oÂutû_ícode_queue_°©s_ªque°
(
oÂ_vîsi⁄
 ofp_version,

706 c⁄° 
oÂutû_queue_°©s_ªque°
 *
oq§
);

708 
	soÂutû_queue_°©s
 {

709 
uöt16_t
 
	mp‹t_no
;

710 
uöt32_t
 
	mqueue_id
;

711 
√tdev_queue_°©s
 
	m°©s
;

714 
size_t
 
oÂutû_cou¡_queue_°©s
(c⁄° 
oÂ_hódî
 *);

715 
oÂutû_decode_queue_°©s
(
oÂutû_queue_°©s
 *
qs
, 
oÂbuf
 *
msg
);

716 
oÂutû_≠≥nd_queue_°©
(
li°
 *
ª∂õs
,

717 c⁄° 
oÂutû_queue_°©s
 *
oqs
);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/ofpbuf.c

17 
	~<c⁄fig.h
>

18 
	~"oÂbuf.h
"

19 
	~<as£π.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~"dy«mic-°rög.h
"

23 
	~"utû.h
"

26 
	$oÂbuf_u£__
(
oÂbuf
 *
b
, *
ba£
, 
size_t
 
Æloˇãd
,

27 
oÂbuf_sour˚
 
sour˚
)

29 
b
->
ba£
 = b->
d©a
 = base;

30 
b
->
Æloˇãd
 =állocated;

31 
b
->
sour˚
 = source;

32 
b
->
size
 = 0;

33 
b
->
l2
 = b->
l3
 = b->
l4
 = b->
l7
 = 
NULL
;

34 
	`li°_pois⁄
(&
b
->
li°_node
);

35 
b
->
¥iv©e_p
 = 
NULL
;

36 
	}
}

43 
	$oÂbuf_u£
(
oÂbuf
 *
b
, *
ba£
, 
size_t
 
Æloˇãd
)

45 
	`oÂbuf_u£__
(
b
, 
ba£
, 
Æloˇãd
, 
OFPBUF_MALLOC
);

46 
	}
}

63 
	$oÂbuf_u£_°ack
(
oÂbuf
 *
b
, *
ba£
, 
size_t
 
Æloˇãd
)

65 
	`oÂbuf_u£__
(
b
, 
ba£
, 
Æloˇãd
, 
OFPBUF_STACK
);

66 
	}
}

83 
	$oÂbuf_u£_°ub
(
oÂbuf
 *
b
, *
ba£
, 
size_t
 
Æloˇãd
)

85 
	`oÂbuf_u£__
(
b
, 
ba£
, 
Æloˇãd
, 
OFPBUF_STUB
);

86 
	}
}

96 
	$oÂbuf_u£_c⁄°
(
oÂbuf
 *
b
, c⁄° *
d©a
, 
size_t
 
size
)

98 
	`oÂbuf_u£__
(
b
, 
	`CONST_CAST
(*, 
d©a
), 
size
, 
OFPBUF_STACK
);

99 
b
->
size
 = size;

100 
	}
}

105 
	$oÂbuf_öô
(
oÂbuf
 *
b
, 
size_t
 
size
)

107 
	`oÂbuf_u£
(
b
, 
size
 ? 
	`xmÆloc
(sizeË: 
NULL
, size);

108 
	}
}

112 
	$oÂbuf_unöô
(
oÂbuf
 *
b
)

114 i‡(
b
 && b->
sour˚
 =
OFPBUF_MALLOC
) {

115 
	`‰ì
(
b
->
ba£
);

117 
	}
}

123 
	$oÂbuf_gë_unöô_poöãr
(
oÂbuf
 *
b
)

125  
b
 && b->
sour˚
 =
OFPBUF_MALLOC
 ? b->
ba£
 : 
NULL
;

126 
	}
}

130 
	$oÂbuf_ªöô
(
oÂbuf
 *
b
, 
size_t
 
size
)

132 
	`oÂbuf_unöô
(
b
);

133 
	`oÂbuf_öô
(
b
, 
size
);

134 
	}
}

138 
oÂbuf
 *

139 
	$oÂbuf_√w
(
size_t
 
size
)

141 
oÂbuf
 *
b
 = 
	`xmÆloc
( *b);

142 
	`oÂbuf_öô
(
b
, 
size
);

143  
b
;

144 
	}
}

148 
oÂbuf
 *

149 
	$oÂbuf_√w_wôh_hódroom
(
size_t
 
size
, size_à
hódroom
)

151 
oÂbuf
 *
b
 = 
	`oÂbuf_√w
(
size
 + 
hódroom
);

152 
	`oÂbuf_ª£rve
(
b
, 
hódroom
);

153  
b
;

154 
	}
}

159 
oÂbuf
 *

160 
	$oÂbuf_˛⁄e
(c⁄° 
oÂbuf
 *
buf„r
)

162  
	`oÂbuf_˛⁄e_wôh_hódroom
(
buf„r
, 0);

163 
	}
}

167 
oÂbuf
 *

168 
	$oÂbuf_˛⁄e_wôh_hódroom
(c⁄° 
oÂbuf
 *
buf„r
, 
size_t
 
hódroom
)

170 
oÂbuf
 *
√w_buf„r
;

171 
uöçå_t
 
d©a_dñè
;

173 
√w_buf„r
 = 
	`oÂbuf_˛⁄e_d©a_wôh_hódroom
(
buf„r
->
d©a
, buf„r->
size
,

174 
hódroom
);

175 
d©a_dñè
 = (*Ë
√w_buf„r
->
d©a
 - (*Ë
buf„r
->data;

177 i‡(
buf„r
->
l2
) {

178 
√w_buf„r
->
l2
 = (*Ë
buf„r
->l2 + 
d©a_dñè
;

180 i‡(
buf„r
->
l3
) {

181 
√w_buf„r
->
l3
 = (*Ë
buf„r
->l3 + 
d©a_dñè
;

183 i‡(
buf„r
->
l4
) {

184 
√w_buf„r
->
l4
 = (*Ë
buf„r
->l4 + 
d©a_dñè
;

186 i‡(
buf„r
->
l7
) {

187 
√w_buf„r
->
l7
 = (*Ë
buf„r
->l7 + 
d©a_dñè
;

190  
√w_buf„r
;

191 
	}
}

195 
oÂbuf
 *

196 
	$oÂbuf_˛⁄e_d©a
(c⁄° *
d©a
, 
size_t
 
size
)

198  
	`oÂbuf_˛⁄e_d©a_wôh_hódroom
(
d©a
, 
size
, 0);

199 
	}
}

204 
oÂbuf
 *

205 
	$oÂbuf_˛⁄e_d©a_wôh_hódroom
(c⁄° *
d©a
, 
size_t
 
size
, size_à
hódroom
)

207 
oÂbuf
 *
b
 = 
	`oÂbuf_√w_wôh_hódroom
(
size
, 
hódroom
);

208 
	`oÂbuf_put
(
b
, 
d©a
, 
size
);

209  
b
;

210 
	}
}

214 
	$oÂbuf_dñëe
(
oÂbuf
 *
b
)

216 i‡(
b
) {

217 
	`oÂbuf_unöô
(
b
);

218 
	`‰ì
(
b
);

220 
	}
}

226 
size_t


227 
	$oÂbuf_hódroom
(c⁄° 
oÂbuf
 *
b
)

229  (*)
b
->
d©a
 - (*)b->
ba£
;

230 
	}
}

234 
size_t


235 
	$oÂbuf_èûroom
(c⁄° 
oÂbuf
 *
b
)

237  (*)
	`oÂbuf_íd
(
b
Ë- (*)
	`oÂbuf_èû
(b);

238 
	}
}

241 
	$oÂbuf_c›y__
(
oÂbuf
 *
b
, 
uöt8_t
 *
√w_ba£
,

242 
size_t
 
√w_hódroom
, size_à
√w_èûroom
)

244 c⁄° 
uöt8_t
 *
ﬁd_ba£
 = 
b
->
ba£
;

245 
size_t
 
ﬁd_hódroom
 = 
	`oÂbuf_hódroom
(
b
);

246 
size_t
 
ﬁd_èûroom
 = 
	`oÂbuf_èûroom
(
b
);

247 
size_t
 
c›y_hódroom
 = 
	`MIN
(
ﬁd_hódroom
, 
√w_hódroom
);

248 
size_t
 
c›y_èûroom
 = 
	`MIN
(
ﬁd_èûroom
, 
√w_èûroom
);

250 
	`mem˝y
(&
√w_ba£
[
√w_hódroom
 - 
c›y_hódroom
],

251 &
ﬁd_ba£
[
ﬁd_hódroom
 - 
c›y_hódroom
],

252 
c›y_hódroom
 + 
b
->
size
 + 
c›y_èûroom
);

253 
	}
}

258 
	$oÂbuf_ªsize__
(
oÂbuf
 *
b
, 
size_t
 
√w_hódroom
, size_à
√w_èûroom
)

260 *
√w_ba£
, *
√w_d©a
;

261 
size_t
 
√w_Æloˇãd
;

263 
√w_Æloˇãd
 = 
√w_hódroom
 + 
b
->
size
 + 
√w_èûroom
;

265 
b
->
sour˚
) {

266 
OFPBUF_MALLOC
:

267 i‡(
√w_hódroom
 =
	`oÂbuf_hódroom
(
b
)) {

268 
√w_ba£
 = 
	`xªÆloc
(
b
->
ba£
, 
√w_Æloˇãd
);

270 
√w_ba£
 = 
	`xmÆloc
(
√w_Æloˇãd
);

271 
	`oÂbuf_c›y__
(
b
, 
√w_ba£
, 
√w_hódroom
, 
√w_èûroom
);

272 
	`‰ì
(
b
->
ba£
);

276 
OFPBUF_STACK
:

277 
	`NOT_REACHED
();

279 
OFPBUF_STUB
:

280 
b
->
sour˚
 = 
OFPBUF_MALLOC
;

281 
√w_ba£
 = 
	`xmÆloc
(
√w_Æloˇãd
);

282 
	`oÂbuf_c›y__
(
b
, 
√w_ba£
, 
√w_hódroom
, 
√w_èûroom
);

286 
	`NOT_REACHED
();

289 
b
->
Æloˇãd
 = 
√w_Æloˇãd
;

290 
b
->
ba£
 = 
√w_ba£
;

292 
√w_d©a
 = (*Ë
√w_ba£
 + 
√w_hódroom
;

293 i‡(
b
->
d©a
 !
√w_d©a
) {

294 
uöçå_t
 
d©a_dñè
 = (*Ë
√w_d©a
 - (*Ë
b
->
d©a
;

295 
b
->
d©a
 = 
√w_d©a
;

296 i‡(
b
->
l2
) {

297 
b
->
l2
 = (*Ëb->l2 + 
d©a_dñè
;

299 i‡(
b
->
l3
) {

300 
b
->
l3
 = (*Ëb->l3 + 
d©a_dñè
;

302 i‡(
b
->
l4
) {

303 
b
->
l4
 = (*Ëb->l4 + 
d©a_dñè
;

305 i‡(
b
->
l7
) {

306 
b
->
l7
 = (*Ëb->l7 + 
d©a_dñè
;

309 
	}
}

315 
	$oÂbuf_¥óŒoc_èûroom
(
oÂbuf
 *
b
, 
size_t
 
size
)

317 i‡(
size
 > 
	`oÂbuf_èûroom
(
b
)) {

318 
	`oÂbuf_ªsize__
(
b
, 
	`oÂbuf_hódroom
(b), 
	`MAX
(
size
, 64));

320 
	}
}

326 
	$oÂbuf_¥óŒoc_hódroom
(
oÂbuf
 *
b
, 
size_t
 
size
)

328 i‡(
size
 > 
	`oÂbuf_hódroom
(
b
)) {

329 
	`oÂbuf_ªsize__
(
b
, 
	`MAX
(
size
, 64), 
	`oÂbuf_èûroom
(b));

331 
	}
}

339 
	$oÂbuf_åim
(
oÂbuf
 *
b
)

341 i‡(
b
->
sour˚
 =
OFPBUF_MALLOC


342 && (
	`oÂbuf_hódroom
(
b
Ë|| 
	`oÂbuf_èûroom
(b))) {

343 
	`oÂbuf_ªsize__
(
b
, 0, 0);

345 
	}
}

350 
	$oÂbuf_∑dto
(
oÂbuf
 *
b
, 
size_t
 
Àngth
)

352 i‡(
b
->
size
 < 
Àngth
) {

353 
	`oÂbuf_put_zîos
(
b
, 
Àngth
 - b->
size
);

355 
	}
}

361 
	$oÂbuf_put_unöô
(
oÂbuf
 *
b
, 
size_t
 
size
)

363 *
p
;

364 
	`oÂbuf_¥óŒoc_èûroom
(
b
, 
size
);

365 
p
 = 
	`oÂbuf_èû
(
b
);

366 
b
->
size
 += size;

367  
p
;

368 
	}
}

374 
	$oÂbuf_put_zîos
(
oÂbuf
 *
b
, 
size_t
 
size
)

376 *
d°
 = 
	`oÂbuf_put_unöô
(
b
, 
size
);

377 
	`mem£t
(
d°
, 0, 
size
);

378  
d°
;

379 
	}
}

385 
	$oÂbuf_put
(
oÂbuf
 *
b
, c⁄° *
p
, 
size_t
 
size
)

387 *
d°
 = 
	`oÂbuf_put_unöô
(
b
, 
size
);

388 
	`mem˝y
(
d°
, 
p
, 
size
);

389  
d°
;

390 
	}
}

398 
	$oÂbuf_put_hex
(
oÂbuf
 *
b
, c⁄° *
s
, 
size_t
 *
n
)

400 
size_t
 
öôül_size
 = 
b
->
size
;

402 
uöt8_t
 
byã
;

403 
boﬁ
 
ok
;

405 
s
 +
	`°r•n
(s, " ");

406 
byã
 = 
	`hexôs_vÆue
(
s
, 2, &
ok
);

407 i‡(!
ok
) {

408 i‡(
n
) {

409 *
n
 = 
b
->
size
 - 
öôül_size
;

411  
	`CONST_CAST
(*, 
s
);

414 
	`oÂbuf_put
(
b
, &
byã
, 1);

415 
s
 += 2;

417 
	}
}

422 
	$oÂbuf_ª£rve
(
oÂbuf
 *
b
, 
size_t
 
size
)

424 
	`as£π
(!
b
->
size
);

425 
	`oÂbuf_¥óŒoc_èûroom
(
b
, 
size
);

426 
b
->
d©a
 = (*)b->d©®+ 
size
;

427 
	}
}

433 
	$oÂbuf_push_unöô
(
oÂbuf
 *
b
, 
size_t
 
size
)

435 
	`oÂbuf_¥óŒoc_hódroom
(
b
, 
size
);

436 
b
->
d©a
 = (*)b->d©®- 
size
;

437 
b
->
size
 += size;

438  
b
->
d©a
;

439 
	}
}

445 
	$oÂbuf_push_zîos
(
oÂbuf
 *
b
, 
size_t
 
size
)

447 *
d°
 = 
	`oÂbuf_push_unöô
(
b
, 
size
);

448 
	`mem£t
(
d°
, 0, 
size
);

449  
d°
;

450 
	}
}

456 
	$oÂbuf_push
(
oÂbuf
 *
b
, c⁄° *
p
, 
size_t
 
size
)

458 *
d°
 = 
	`oÂbuf_push_unöô
(
b
, 
size
);

459 
	`mem˝y
(
d°
, 
p
, 
size
);

460  
d°
;

461 
	}
}

466 
	$oÂbuf_©
(c⁄° 
oÂbuf
 *
b
, 
size_t
 
off£t
, size_à
size
)

468  
off£t
 + 
size
 <
b
->sizê? (*Ëb->
d©a
 + off£à: 
NULL
;

469 
	}
}

474 
	$oÂbuf_©_as£π
(c⁄° 
oÂbuf
 *
b
, 
size_t
 
off£t
, size_à
size
)

476 
	`as£π
(
off£t
 + 
size
 <
b
->size);

477  ((*Ë
b
->
d©a
Ë+ 
off£t
;

478 
	}
}

482 
	$oÂbuf_èû
(c⁄° 
oÂbuf
 *
b
)

484  (*Ë
b
->
d©a
 + b->
size
;

485 
	}
}

490 
	$oÂbuf_íd
(c⁄° 
oÂbuf
 *
b
)

492  (*Ë
b
->
ba£
 + b->
Æloˇãd
;

493 
	}
}

497 
	$oÂbuf_˛ór
(
oÂbuf
 *
b
)

499 
b
->
d©a
 = b->
ba£
;

500 
b
->
size
 = 0;

501 
	}
}

506 
	$oÂbuf_puŒ
(
oÂbuf
 *
b
, 
size_t
 
size
)

508 *
d©a
 = 
b
->data;

509 
	`as£π
(
b
->
size
 >= size);

510 
b
->
d©a
 = (*)b->d©®+ 
size
;

511 
b
->
size
 -= size;

512  
d©a
;

513 
	}
}

519 
	$oÂbuf_åy_puŒ
(
oÂbuf
 *
b
, 
size_t
 
size
)

521  
b
->
size
 >sizê? 
	`oÂbuf_puŒ
(b, sizeË: 
NULL
;

522 
	}
}

528 
	$oÂbuf_°ól_d©a
(
oÂbuf
 *
b
)

530 *
p
;

531 i‡(
b
->
sour˚
 =
OFPBUF_MALLOC
 && b->
d©a
 =b->
ba£
) {

532 
p
 = 
b
->
d©a
;

534 
p
 = 
	`xmemdup
(
b
->
d©a
, b->
size
);

535 i‡(
b
->
sour˚
 =
OFPBUF_MALLOC
) {

536 
	`‰ì
(
b
->
ba£
);

539 
b
->
ba£
 = b->
d©a
 = 
NULL
;

540  
p
;

541 
	}
}

546 
	$oÂbuf_to_°rög
(c⁄° 
oÂbuf
 *
b
, 
size_t
 
maxbyãs
)

548 
ds
 
s
;

550 
	`ds_öô
(&
s
);

551 
	`ds_put_f‹m©
(&
s
, "size=%zu,állocated=%zu, head=%zu,Åail=%zu\n",

552 
b
->
size
, b->
Æloˇãd
,

553 
	`oÂbuf_hódroom
(
b
), 
	`oÂbuf_èûroom
(b));

554 
	`ds_put_hex_dump
(&
s
, 
b
->
d©a
, 
	`MIN
(b->
size
, 
maxbyãs
), 0, 
Ál£
);

555  
	`ds_c°r
(&
s
);

556 
	}
}

561 
	$oÂbuf_li°_dñëe
(
li°
 *list)

563 
oÂbuf
 *
b
, *
√xt
;

565 
	`LIST_FOR_EACH_SAFE
 (
b
, 
√xt
, 
li°_node
, 
li°
) {

566 
	`li°_ªmove
(&
b
->
li°_node
);

567 
	`oÂbuf_dñëe
(
b
);

569 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/ofpbuf.h

17 #i‚de‡
OFPBUF_H


18 
	#OFPBUF_H
 1

	)

20 
	~<°ddef.h
>

21 
	~<°döt.h
>

22 
	~"li°.h
"

23 
	~"utû.h
"

25 #ifde‡ 
__˝lu•lus


29 
	eoÂbuf_sour˚
 {

30 
OFPBUF_MALLOC
,

31 
OFPBUF_STACK
,

32 
OFPBUF_STUB


37 
	soÂbuf
 {

38 *
ba£
;

39 
size_t
 
Æloˇãd
;

40 
oÂbuf_sour˚
 
sour˚
;

42 *
d©a
;

43 
size_t
 
size
;

45 *
l2
;

46 *
l3
;

47 *
l4
;

48 *
l7
;

50 
li°
 
li°_node
;

51 *
¥iv©e_p
;

56 
	#OFPBUF_STACK_BUFFER
(
NAME
, 
SIZE
Ë
uöt64_t
 NAME[
	`DIV_ROUND_UP
(SIZE, 8)]

	)

58 
oÂbuf_u£
(
oÂbuf
 *, *, 
size_t
);

59 
oÂbuf_u£_°ack
(
oÂbuf
 *, *, 
size_t
);

60 
oÂbuf_u£_°ub
(
oÂbuf
 *, *, 
size_t
);

61 
oÂbuf_u£_c⁄°
(
oÂbuf
 *, c⁄° *, 
size_t
);

63 
oÂbuf_öô
(
oÂbuf
 *, 
size_t
);

64 
oÂbuf_unöô
(
oÂbuf
 *);

65 *
oÂbuf_gë_unöô_poöãr
(
oÂbuf
 *);

66 
oÂbuf_ªöô
(
oÂbuf
 *, 
size_t
);

68 
oÂbuf
 *
oÂbuf_√w
(
size_t
);

69 
oÂbuf
 *
oÂbuf_√w_wôh_hódroom
(
size_t
, size_à
hódroom
);

70 
oÂbuf
 *
oÂbuf_˛⁄e
(const ofpbuf *);

71 
oÂbuf
 *
oÂbuf_˛⁄e_wôh_hódroom
(const ofpbuf *,

72 
size_t
 
hódroom
);

73 
oÂbuf
 *
oÂbuf_˛⁄e_d©a
(c⁄° *, 
size_t
);

74 
oÂbuf
 *
oÂbuf_˛⁄e_d©a_wôh_hódroom
(c⁄° *, 
size_t
,

75 
size_t
 
hódroom
);

76 
oÂbuf_dñëe
(
oÂbuf
 *);

78 *
oÂbuf_©
(c⁄° 
oÂbuf
 *, 
size_t
 
off£t
, size_à
size
);

79 *
oÂbuf_©_as£π
(c⁄° 
oÂbuf
 *, 
size_t
 
off£t
, size_à
size
);

80 *
oÂbuf_èû
(c⁄° 
oÂbuf
 *);

81 *
oÂbuf_íd
(c⁄° 
oÂbuf
 *);

83 *
oÂbuf_put_unöô
(
oÂbuf
 *, 
size_t
);

84 *
oÂbuf_put_zîos
(
oÂbuf
 *, 
size_t
);

85 *
oÂbuf_put
(
oÂbuf
 *, c⁄° *, 
size_t
);

86 *
oÂbuf_put_hex
(
oÂbuf
 *, c⁄° *
s
, 
size_t
 *
n
);

87 
oÂbuf_ª£rve
(
oÂbuf
 *, 
size_t
);

88 *
oÂbuf_push_unöô
(
oÂbuf
 *
b
, 
size_t
);

89 *
oÂbuf_push_zîos
(
oÂbuf
 *, 
size_t
);

90 *
oÂbuf_push
(
oÂbuf
 *
b
, c⁄° *, 
size_t
);

92 
size_t
 
oÂbuf_hódroom
(c⁄° 
oÂbuf
 *);

93 
size_t
 
oÂbuf_èûroom
(c⁄° 
oÂbuf
 *);

94 
oÂbuf_¥óŒoc_hódroom
(
oÂbuf
 *, 
size_t
);

95 
oÂbuf_¥óŒoc_èûroom
(
oÂbuf
 *, 
size_t
);

96 
oÂbuf_åim
(
oÂbuf
 *);

97 
oÂbuf_∑dto
(
oÂbuf
 *, 
size_t
);

99 
oÂbuf_˛ór
(
oÂbuf
 *);

100 *
oÂbuf_puŒ
(
oÂbuf
 *, 
size_t
);

101 *
oÂbuf_åy_puŒ
(
oÂbuf
 *, 
size_t
);

103 *
oÂbuf_°ól_d©a
(
oÂbuf
 *);

105 *
oÂbuf_to_°rög
(c⁄° 
oÂbuf
 *, 
size_t
 
maxbyãs
);

107 
ölöe
 
oÂbuf
 *
oÂbuf_‰om_li°
(c⁄° 
li°
 *list)

109  
CONTAINER_OF
(
li°
, 
oÂbuf
, 
li°_node
);

111 
oÂbuf_li°_dñëe
(
li°
 *);

113 #ifde‡ 
__˝lu•lus


	@/home/lsch/mytest/openvswitch-1.9.0/lib/ovsdb-data.c

16 
	~<c⁄fig.h
>

18 
	~"ovsdb-d©a.h
"

20 
	~<as£π.h
>

21 
	~<˘y≥.h
>

22 
	~<Êﬂt.h
>

23 
	~<öây≥s.h
>

24 
	~<limôs.h
>

26 
	~"dy«mic-°rög.h
"

27 
	~"hash.h
"

28 
	~"ovsdb-îr‹.h
"

29 
	~"ovsdb-∑r£r.h
"

30 
	~"js⁄.h
"

31 
	~"shash.h
"

32 
	~"sm≠.h
"

33 
	~"s‹t.h
"

34 
	~"unicode.h
"

36 
js⁄
 *

37 
	$wøp_js⁄
(c⁄° *
«me
, 
js⁄
 *
wøµed
)

39  
	`js⁄_¨øy_¸óã_2
(
	`js⁄_°rög_¸óã
(
«me
), 
wøµed
);

40 
	}
}

57 
	$ovsdb_©om_öô_deÁu…
(
ovsdb_©om
 *
©om
, 
ovsdb_©omic_ty≥
 
ty≥
)

59 
ty≥
) {

60 
OVSDB_TYPE_VOID
:

61 
	`NOT_REACHED
();

63 
OVSDB_TYPE_INTEGER
:

64 
©om
->
öãgî
 = 0;

67 
OVSDB_TYPE_REAL
:

68 
©om
->
ªÆ
 = 0.0;

71 
OVSDB_TYPE_BOOLEAN
:

72 
©om
->
boﬁón
 = 
Ál£
;

75 
OVSDB_TYPE_STRING
:

76 
©om
->
°rög
 = 
	`xmemdup
("", 1);

79 
OVSDB_TYPE_UUID
:

80 
	`uuid_zîo
(&
©om
->
uuid
);

83 
OVSDB_N_TYPES
:

85 
	`NOT_REACHED
();

87 
	}
}

94 c⁄° 
ovsdb_©om
 *

95 
	$ovsdb_©om_deÁu…
(
ovsdb_©omic_ty≥
 
ty≥
)

97 
ovsdb_©om
 
deÁu…_©oms
[
OVSDB_N_TYPES
];

98 
boﬁ
 
öôed
;

100 i‡(!
öôed
) {

101 
i
;

103 
i
 = 0; i < 
OVSDB_N_TYPES
; i++) {

104 i‡(
i
 !
OVSDB_TYPE_VOID
) {

105 
	`ovsdb_©om_öô_deÁu…
(&
deÁu…_©oms
[
i
], i);

108 
öôed
 = 
åue
;

111 
	`as£π
(
	`ovsdb_©omic_ty≥_is_vÆid
(
ty≥
));

112  &
deÁu…_©oms
[
ty≥
];

113 
	}
}

120 
boﬁ


121 
	$ovsdb_©om_is_deÁu…
(c⁄° 
ovsdb_©om
 *
©om
,

122 
ovsdb_©omic_ty≥
 
ty≥
)

124 
ty≥
) {

125 
OVSDB_TYPE_VOID
:

126 
	`NOT_REACHED
();

128 
OVSDB_TYPE_INTEGER
:

129  
©om
->
öãgî
 == 0;

131 
OVSDB_TYPE_REAL
:

132  
©om
->
ªÆ
 == 0.0;

134 
OVSDB_TYPE_BOOLEAN
:

135  
©om
->
boﬁón
 =
Ál£
;

137 
OVSDB_TYPE_STRING
:

138  
©om
->
°rög
[0] == '\0';

140 
OVSDB_TYPE_UUID
:

141  
	`uuid_is_zîo
(&
©om
->
uuid
);

143 
OVSDB_N_TYPES
:

145 
	`NOT_REACHED
();

147 
	}
}

154 
	$ovsdb_©om_˛⁄e
(
ovsdb_©om
 *
√w
, c⁄° ovsdb_©om *
ﬁd
,

155 
ovsdb_©omic_ty≥
 
ty≥
)

157 
ty≥
) {

158 
OVSDB_TYPE_VOID
:

159 
	`NOT_REACHED
();

161 
OVSDB_TYPE_INTEGER
:

162 
√w
->
öãgî
 = 
ﬁd
->integer;

165 
OVSDB_TYPE_REAL
:

166 
√w
->
ªÆ
 = 
ﬁd
->real;

169 
OVSDB_TYPE_BOOLEAN
:

170 
√w
->
boﬁón
 = 
ﬁd
->boolean;

173 
OVSDB_TYPE_STRING
:

174 
√w
->
°rög
 = 
	`x°rdup
(
ﬁd
->string);

177 
OVSDB_TYPE_UUID
:

178 
√w
->
uuid
 = 
ﬁd
->uuid;

181 
OVSDB_N_TYPES
:

183 
	`NOT_REACHED
();

185 
	}
}

189 
	$ovsdb_©om_sw≠
(
ovsdb_©om
 *
a
, ovsdb_©om *
b
)

191 
ovsdb_©om
 
tmp
 = *
a
;

192 *
a
 = *
b
;

193 *
b
 = 
tmp
;

194 
	}
}

198 
uöt32_t


199 
	$ovsdb_©om_hash
(c⁄° 
ovsdb_©om
 *
©om
, 
ovsdb_©omic_ty≥
 
ty≥
,

200 
uöt32_t
 
basis
)

202 
ty≥
) {

203 
OVSDB_TYPE_VOID
:

204 
	`NOT_REACHED
();

206 
OVSDB_TYPE_INTEGER
:

207  
	`hash_öt
(
©om
->
öãgî
, 
basis
);

209 
OVSDB_TYPE_REAL
:

210  
	`hash_doubÀ
(
©om
->
ªÆ
, 
basis
);

212 
OVSDB_TYPE_BOOLEAN
:

213  
	`hash_boﬁón
(
©om
->
boﬁón
, 
basis
);

215 
OVSDB_TYPE_STRING
:

216  
	`hash_°rög
(
©om
->
°rög
, 
basis
);

218 
OVSDB_TYPE_UUID
:

219  
	`hash_öt
(
	`uuid_hash
(&
©om
->
uuid
), 
basis
);

221 
OVSDB_N_TYPES
:

223 
	`NOT_REACHED
();

225 
	}
}

230 
	$ovsdb_©om_com∑ª_3way
(c⁄° 
ovsdb_©om
 *
a
,

231 c⁄° 
ovsdb_©om
 *
b
,

232 
ovsdb_©omic_ty≥
 
ty≥
)

234 
ty≥
) {

235 
OVSDB_TYPE_VOID
:

236 
	`NOT_REACHED
();

238 
OVSDB_TYPE_INTEGER
:

239  
a
->
öãgî
 < 
b
->integer ? -1 :á->integer > b->integer;

241 
OVSDB_TYPE_REAL
:

242  
a
->
ªÆ
 < 
b
->real ? -1 :á->real > b->real;

244 
OVSDB_TYPE_BOOLEAN
:

245  
a
->
boﬁón
 - 
b
->boolean;

247 
OVSDB_TYPE_STRING
:

248  
	`°rcmp
(
a
->
°rög
, 
b
->string);

250 
OVSDB_TYPE_UUID
:

251  
	`uuid_com∑ª_3way
(&
a
->
uuid
, &
b
->uuid);

253 
OVSDB_N_TYPES
:

255 
	`NOT_REACHED
();

257 
	}
}

259 
ovsdb_îr‹
 *

260 
	$unwøp_js⁄
(c⁄° 
js⁄
 *js⁄, c⁄° *
«me
,

261 
js⁄_ty≥
 
vÆue_ty≥
, c⁄° 
js⁄
 **
vÆue
)

263 i‡(
js⁄
->
ty≥
 !
JSON_ARRAY


264 || 
js⁄
->
u
.
¨øy
.
n
 != 2

265 || 
js⁄
->
u
.
¨øy
.
ñems
[0]->
ty≥
 !
JSON_STRING


266 || (
«me
 && 
	`°rcmp
(
js⁄
->
u
.
¨øy
.
ñems
[0]->u.
°rög
,Çame))

267 || 
js⁄
->
u
.
¨øy
.
ñems
[1]->
ty≥
 !
vÆue_ty≥
)

269 *
vÆue
 = 
NULL
;

270  
	`ovsdb_sy¡ax_îr‹
(
js⁄
, 
NULL
, "ex≥˘ed [\"%s\", <%s>]", 
«me
,

271 
	`js⁄_ty≥_to_°rög
(
vÆue_ty≥
));

273 *
vÆue
 = 
js⁄
->
u
.
¨øy
.
ñems
[1];

274  
NULL
;

275 
	}
}

277 
ovsdb_îr‹
 *

278 
	$∑r£_js⁄_∑ú
(c⁄° 
js⁄
 *json,

279 c⁄° 
js⁄
 **
ñem0
, c⁄° js⁄ **
ñem1
)

281 i‡(
js⁄
->
ty≥
 !
JSON_ARRAY
 || js⁄->
u
.
¨øy
.
n
 != 2) {

282  
	`ovsdb_sy¡ax_îr‹
(
js⁄
, 
NULL
, "expected 2-elementárray");

284 *
ñem0
 = 
js⁄
->
u
.
¨øy
.
ñems
[0];

285 *
ñem1
 = 
js⁄
->
u
.
¨øy
.
ñems
[1];

286  
NULL
;

287 
	}
}

290 
	$ovsdb_symbﬁ_ª„ªn˚d
(
ovsdb_symbﬁ
 *
symbﬁ
,

291 c⁄° 
ovsdb_ba£_ty≥
 *
ba£
)

293 
	`as£π
(
ba£
->
ty≥
 =
OVSDB_TYPE_UUID
);

295 i‡(
ba£
->
u
.
uuid
.
ªfTabÀName
) {

296 
ba£
->
u
.
uuid
.
ªfTy≥
) {

297 
OVSDB_REF_STRONG
:

298 
symbﬁ
->
°r⁄g_ªf
 = 
åue
;

300 
OVSDB_REF_WEAK
:

301 
symbﬁ
->
wók_ªf
 = 
åue
;

305 
	}
}

307 
ovsdb_îr‹
 * 
WARN_UNUSED_RESULT


308 
	$ovsdb_©om_∑r£_uuid
(
uuid
 *uuid, c⁄° 
js⁄
 *json,

309 
ovsdb_symbﬁ_èbÀ
 *
symèb
,

310 c⁄° 
ovsdb_ba£_ty≥
 *
ba£
)

312 
ovsdb_îr‹
 *
îr‹0
;

313 c⁄° 
js⁄
 *
vÆue
;

315 
îr‹0
 = 
	`unwøp_js⁄
(
js⁄
, "uuid", 
JSON_STRING
, &
vÆue
);

316 i‡(!
îr‹0
) {

317 c⁄° *
uuid_°rög
 = 
	`js⁄_°rög
(
vÆue
);

318 i‡(!
	`uuid_‰om_°rög
(
uuid
, 
uuid_°rög
)) {

319  
	`ovsdb_sy¡ax_îr‹
(
js⁄
, 
NULL
, "\"%s\" isÇotá valid UUID",

320 
uuid_°rög
);

322 } i‡(
symèb
) {

323 
ovsdb_îr‹
 *
îr‹1
;

325 
îr‹1
 = 
	`unwøp_js⁄
(
js⁄
, "«med-uuid", 
JSON_STRING
, &
vÆue
);

326 i‡(!
îr‹1
) {

327 
ovsdb_symbﬁ
 *
symbﬁ
;

329 
	`ovsdb_îr‹_de°roy
(
îr‹0
);

330 i‡(!
	`ovsdb_∑r£r_is_id
(
	`js⁄_°rög
(
vÆue
))) {

331  
	`ovsdb_sy¡ax_îr‹
(
js⁄
, 
NULL
, "named-uuid string is "

335 
symbﬁ
 = 
	`ovsdb_symbﬁ_èbÀ_ö£π
(
symèb
, 
	`js⁄_°rög
(
vÆue
));

336 *
uuid
 = 
symbﬁ
->uuid;

337 
	`ovsdb_symbﬁ_ª„ªn˚d
(
symbﬁ
, 
ba£
);

338  
NULL
;

340 
	`ovsdb_îr‹_de°roy
(
îr‹1
);

343  
îr‹0
;

344 
	}
}

346 
ovsdb_îr‹
 * 
WARN_UNUSED_RESULT


347 
	$ovsdb_©om_‰om_js⁄__
(
ovsdb_©om
 *
©om
,

348 c⁄° 
ovsdb_ba£_ty≥
 *
ba£
,

349 c⁄° 
js⁄
 *json,

350 
ovsdb_symbﬁ_èbÀ
 *
symèb
)

352 
ovsdb_©omic_ty≥
 
ty≥
 = 
ba£
->type;

354 
ty≥
) {

355 
OVSDB_TYPE_VOID
:

356 
	`NOT_REACHED
();

358 
OVSDB_TYPE_INTEGER
:

359 i‡(
js⁄
->
ty≥
 =
JSON_INTEGER
) {

360 
©om
->
öãgî
 = 
js⁄
->
u
.integer;

361  
NULL
;

365 
OVSDB_TYPE_REAL
:

366 i‡(
js⁄
->
ty≥
 =
JSON_INTEGER
) {

367 
©om
->
ªÆ
 = 
js⁄
->
u
.
öãgî
;

368  
NULL
;

369 } i‡(
js⁄
->
ty≥
 =
JSON_REAL
) {

370 
©om
->
ªÆ
 = 
js⁄
->
u
.real;

371  
NULL
;

375 
OVSDB_TYPE_BOOLEAN
:

376 i‡(
js⁄
->
ty≥
 =
JSON_TRUE
) {

377 
©om
->
boﬁón
 = 
åue
;

378  
NULL
;

379 } i‡(
js⁄
->
ty≥
 =
JSON_FALSE
) {

380 
©om
->
boﬁón
 = 
Ál£
;

381  
NULL
;

385 
OVSDB_TYPE_STRING
:

386 i‡(
js⁄
->
ty≥
 =
JSON_STRING
) {

387 
©om
->
°rög
 = 
	`x°rdup
(
js⁄
->
u
.string);

388  
NULL
;

392 
OVSDB_TYPE_UUID
:

393  
	`ovsdb_©om_∑r£_uuid
(&
©om
->
uuid
, 
js⁄
, 
symèb
, 
ba£
);

395 
OVSDB_N_TYPES
:

397 
	`NOT_REACHED
();

400  
	`ovsdb_sy¡ax_îr‹
(
js⁄
, 
NULL
, "expected %s",

401 
	`ovsdb_©omic_ty≥_to_°rög
(
ty≥
));

402 
	}
}

416 
ovsdb_îr‹
 *

417 
	$ovsdb_©om_‰om_js⁄
(
ovsdb_©om
 *
©om
,

418 c⁄° 
ovsdb_ba£_ty≥
 *
ba£
,

419 c⁄° 
js⁄
 *json,

420 
ovsdb_symbﬁ_èbÀ
 *
symèb
)

422 
ovsdb_îr‹
 *
îr‹
;

424 
îr‹
 = 
	`ovsdb_©om_‰om_js⁄__
(
©om
, 
ba£
, 
js⁄
, 
symèb
);

425 i‡(
îr‹
) {

426  
îr‹
;

429 
îr‹
 = 
	`ovsdb_©om_check_c⁄°øöts
(
©om
, 
ba£
);

430 i‡(
îr‹
) {

431 
	`ovsdb_©om_de°roy
(
©om
, 
ba£
->
ty≥
);

433  
îr‹
;

434 
	}
}

441 
js⁄
 *

442 
	$ovsdb_©om_to_js⁄
(c⁄° 
ovsdb_©om
 *
©om
, 
ovsdb_©omic_ty≥
 
ty≥
)

444 
ty≥
) {

445 
OVSDB_TYPE_VOID
:

446 
	`NOT_REACHED
();

448 
OVSDB_TYPE_INTEGER
:

449  
	`js⁄_öãgî_¸óã
(
©om
->
öãgî
);

451 
OVSDB_TYPE_REAL
:

452  
	`js⁄_ªÆ_¸óã
(
©om
->
ªÆ
);

454 
OVSDB_TYPE_BOOLEAN
:

455  
	`js⁄_boﬁón_¸óã
(
©om
->
boﬁón
);

457 
OVSDB_TYPE_STRING
:

458  
	`js⁄_°rög_¸óã
(
©om
->
°rög
);

460 
OVSDB_TYPE_UUID
:

461  
	`wøp_js⁄
("uuid", 
	`js⁄_°rög_¸óã_noc›y
(

462 
	`xa•rötf
(
UUID_FMT
, 
	`UUID_ARGS
(&
©om
->
uuid
))));

464 
OVSDB_N_TYPES
:

466 
	`NOT_REACHED
();

468 
	}
}

471 
	$ovsdb_©om_‰om_°rög__
(
ovsdb_©om
 *
©om
,

472 c⁄° 
ovsdb_ba£_ty≥
 *
ba£
, c⁄° *
s
,

473 
ovsdb_symbﬁ_èbÀ
 *
symèb
)

475 
ovsdb_©omic_ty≥
 
ty≥
 = 
ba£
->type;

477 
ty≥
) {

478 
OVSDB_TYPE_VOID
:

479 
	`NOT_REACHED
();

481 
OVSDB_TYPE_INTEGER
: {

482 
öãgî
;

483 i‡(!
	`°r_to_Œ⁄g
(
s
, 10, &
öãgî
)) {

484  
	`xa•rötf
("\"%s\" i†nŸá vÆid i¡egî", 
s
);

486 
©om
->
öãgî
 = integer;

490 
OVSDB_TYPE_REAL
:

491 i‡(!
	`°r_to_doubÀ
(
s
, &
©om
->
ªÆ
)) {

492  
	`xa•rötf
("\"%s\" i†nŸá vÆidÑó»numbî", 
s
);

496 i‡(
©om
->
ªÆ
 == 0.0) {

497 
©om
->
ªÆ
 = 0.0;

501 
OVSDB_TYPE_BOOLEAN
:

502 i‡(!
	`°rcmp
(
s
, "true") || !strcmp(s, "yes") || !strcmp(s, "on")

503 || !
	`°rcmp
(
s
, "1")) {

504 
©om
->
boﬁón
 = 
åue
;

505 } i‡(!
	`°rcmp
(
s
, "false") || !strcmp(s, "no") || !strcmp(s, "off")

506 || !
	`°rcmp
(
s
, "0")) {

507 
©om
->
boﬁón
 = 
Ál£
;

509  
	`xa•rötf
("\"%s\" isÇotá valid boolean "

510 "(u£ \"åue\" o∏\"Ál£\")", 
s
);

514 
OVSDB_TYPE_STRING
:

515 i‡(*
s
 == '\0') {

516  
	`x°rdup
("AnÉmpty string isÇot validás input; "

518 } i‡(*
s
 == '"') {

519 
size_t
 
s_Àn
 = 
	`°æí
(
s
);

521 i‡(
s_Àn
 < 2 || 
s
[s_len - 1] != '"') {

522  
	`xa•rötf
("%s: missing quoteátÉnd of "

523 "quŸed såög", 
s
);

524 } i‡(!
	`js⁄_°rög_u√sˇ≥
(
s
 + 1, 
s_Àn
 - 2,

525 &
©om
->
°rög
)) {

526 *
îr‹
 = 
	`xa•rötf
("%s: %s", 
s
, 
©om
->
°rög
);

527 
	`‰ì
(
©om
->
°rög
);

528  
îr‹
;

531 
©om
->
°rög
 = 
	`x°rdup
(
s
);

535 
OVSDB_TYPE_UUID
:

536 i‡(*
s
 == '@') {

537 
ovsdb_symbﬁ
 *
symbﬁ
 = 
	`ovsdb_symbﬁ_èbÀ_ö£π
(
symèb
, 
s
);

538 
©om
->
uuid
 = 
symbﬁ
->uuid;

539 
	`ovsdb_symbﬁ_ª„ªn˚d
(
symbﬁ
, 
ba£
);

540 } i‡(!
	`uuid_‰om_°rög
(&
©om
->
uuid
, 
s
)) {

541  
	`xa•rötf
("\"%s\" i†nŸá vÆid UUID", 
s
);

545 
OVSDB_N_TYPES
:

547 
	`NOT_REACHED
();

550  
NULL
;

551 
	}
}

580 
	$ovsdb_©om_‰om_°rög
(
ovsdb_©om
 *
©om
,

581 c⁄° 
ovsdb_ba£_ty≥
 *
ba£
, c⁄° *
s
,

582 
ovsdb_symbﬁ_èbÀ
 *
symèb
)

584 
ovsdb_îr‹
 *
îr‹
;

585 *
msg
;

587 
msg
 = 
	`ovsdb_©om_‰om_°rög__
(
©om
, 
ba£
, 
s
, 
symèb
);

588 i‡(
msg
) {

589  
msg
;

592 
îr‹
 = 
	`ovsdb_©om_check_c⁄°øöts
(
©om
, 
ba£
);

593 i‡(
îr‹
) {

594 
	`ovsdb_©om_de°roy
(
©om
, 
ba£
->
ty≥
);

595 
msg
 = 
	`ovsdb_îr‹_to_°rög
(
îr‹
);

596 
	`ovsdb_îr‹_de°roy
(
îr‹
);

598  
msg
;

599 
	}
}

601 
boﬁ


602 
	$°rög_√eds_quŸes
(c⁄° *
s
)

604 c⁄° *
p
 = 
s
;

605 
c
;

607 
c
 = *
p
++;

608 i‡(!
	`ißÕha
(
c
) && c != '_') {

609  
åue
;

612 (
c
 = *
p
++) != '\0') {

613 i‡(!
	`ißÕha
(
c
) && c != '_' && c != '-' && c != '.') {

614  
åue
;

618 i‡(!
	`°rcmp
(
s
, "true") || !strcmp(s, "false")) {

619  
åue
;

622  
Ál£
;

623 
	}
}

628 
	$ovsdb_©om_to_°rög
(c⁄° 
ovsdb_©om
 *
©om
, 
ovsdb_©omic_ty≥
 
ty≥
,

629 
ds
 *
out
)

631 
ty≥
) {

632 
OVSDB_TYPE_VOID
:

633 
	`NOT_REACHED
();

635 
OVSDB_TYPE_INTEGER
:

636 
	`ds_put_f‹m©
(
out
, "%"
PRId64
, 
©om
->
öãgî
);

639 
OVSDB_TYPE_REAL
:

640 
	`ds_put_f‹m©
(
out
, "%.*g", 
DBL_DIG
, 
©om
->
ªÆ
);

643 
OVSDB_TYPE_BOOLEAN
:

644 
	`ds_put_c°r
(
out
, 
©om
->
boﬁón
 ? "true" : "false");

647 
OVSDB_TYPE_STRING
:

648 i‡(
	`°rög_√eds_quŸes
(
©om
->
°rög
)) {

649 
js⁄
 json;

651 
js⁄
.
ty≥
 = 
JSON_STRING
;

652 
js⁄
.
u
.
°rög
 = 
©om
->string;

653 
	`js⁄_to_ds
(&
js⁄
, 0, 
out
);

655 
	`ds_put_c°r
(
out
, 
©om
->
°rög
);

659 
OVSDB_TYPE_UUID
:

660 
	`ds_put_f‹m©
(
out
, 
UUID_FMT
, 
	`UUID_ARGS
(&
©om
->
uuid
));

663 
OVSDB_N_TYPES
:

665 
	`NOT_REACHED
();

667 
	}
}

673 
	$ovsdb_©om_to_b¨e
(c⁄° 
ovsdb_©om
 *
©om
, 
ovsdb_©omic_ty≥
 
ty≥
,

674 
ds
 *
out
)

676 i‡(
ty≥
 =
OVSDB_TYPE_STRING
) {

677 
	`ds_put_c°r
(
out
, 
©om
->
°rög
);

679 
	`ovsdb_©om_to_°rög
(
©om
, 
ty≥
, 
out
);

681 
	}
}

683 
ovsdb_îr‹
 *

684 
	$check_°rög_c⁄°øöts
(c⁄° *
s
,

685 c⁄° 
ovsdb_°rög_c⁄°øöts
 *
c
)

687 
size_t
 
n_ch¨s
;

688 *
msg
;

690 
msg
 = 
	`utf8_vÆid©e
(
s
, &
n_ch¨s
);

691 i‡(
msg
) {

692 
ovsdb_îr‹
 *
îr‹
;

694 
îr‹
 = 
	`ovsdb_îr‹
("constraint violation",

695 "nŸá vÆid UTF-8 såög: %s", 
msg
);

696 
	`‰ì
(
msg
);

697  
îr‹
;

700 i‡(
n_ch¨s
 < 
c
->
möLí
) {

701  
	`ovsdb_îr‹
(

704 "Àngth %u", 
s
, 
n_ch¨s
, 
c
->
möLí
);

705 } i‡(
n_ch¨s
 > 
c
->
maxLí
) {

706  
	`ovsdb_îr‹
(

709 "Àngth %u", 
s
, 
n_ch¨s
, 
c
->
maxLí
);

712  
NULL
;

713 
	}
}

721 
ovsdb_îr‹
 *

722 
	$ovsdb_©om_check_c⁄°øöts
(c⁄° 
ovsdb_©om
 *
©om
,

723 c⁄° 
ovsdb_ba£_ty≥
 *
ba£
)

725 i‡(
ba£
->
íum_


726 && 
	`ovsdb_d©um_föd_key
(
ba£
->
íum_
, 
©om
, ba£->
ty≥
Ë=
UINT_MAX
) {

727 
ovsdb_îr‹
 *
îr‹
;

728 
ds
 
a˘uÆ
 = 
DS_EMPTY_INITIALIZER
;

729 
ds
 
vÆid
 = 
DS_EMPTY_INITIALIZER
;

731 
	`ovsdb_©om_to_°rög
(
©om
, 
ba£
->
ty≥
, &
a˘uÆ
);

732 
	`ovsdb_d©um_to_°rög
(
ba£
->
íum_
,

733 
	`ovsdb_ba£_ty≥_gë_íum_ty≥
(
ba£
->
ty≥
),

734 &
vÆid
);

735 
îr‹
 = 
	`ovsdb_îr‹
("constraint violation",

737 
	`ds_c°r
(&
a˘uÆ
), ds_c°r(&
vÆid
));

738 
	`ds_de°roy
(&
a˘uÆ
);

739 
	`ds_de°roy
(&
vÆid
);

741  
îr‹
;

744 
ba£
->
ty≥
) {

745 
OVSDB_TYPE_VOID
:

746 
	`NOT_REACHED
();

748 
OVSDB_TYPE_INTEGER
:

749 i‡(
©om
->
öãgî
 >
ba£
->
u
.öãgî.
mö


750 && 
©om
->
öãgî
 <
ba£
->
u
.öãgî.
max
) {

751  
NULL
;

752 } i‡(
ba£
->
u
.
öãgî
.
mö
 !
INT64_MIN
) {

753 i‡(
ba£
->
u
.
öãgî
.
max
 !
INT64_MAX
) {

754  
	`ovsdb_îr‹
("constraint violation",

755 "%"
PRId64
" isÇot inÅhe validÑange "

756 "%"
PRId64
"Åo %"PRId64" (inclusive)",

757 
©om
->
öãgî
,

758 
ba£
->
u
.
öãgî
.
mö
, ba£->u.öãgî.
max
);

760  
	`ovsdb_îr‹
("constraint violation",

761 "%"
PRId64
" isÜessÅhan minimumállowed "

762 "vÆuê%"
PRId64
,

763 
©om
->
öãgî
, 
ba£
->
u
.öãgî.
mö
);

766  
	`ovsdb_îr‹
("constraint violation",

767 "%"
PRId64
" is greaterÅhan maximumállowed "

768 "vÆuê%"
PRId64
,

769 
©om
->
öãgî
, 
ba£
->
u
.öãgî.
max
);

771 
	`NOT_REACHED
();

773 
OVSDB_TYPE_REAL
:

774 i‡(
©om
->
ªÆ
 >
ba£
->
u
.ªÆ.
mö
 &&átom->ªÆ <ba£->u.ªÆ.
max
) {

775  
NULL
;

776 } i‡(
ba£
->
u
.
ªÆ
.
mö
 !-
DBL_MAX
) {

777 i‡(
ba£
->
u
.
ªÆ
.
max
 !
DBL_MAX
) {

778  
	`ovsdb_îr‹
("constraint violation",

781 
DBL_DIG
, 
©om
->
ªÆ
,

782 
DBL_DIG
, 
ba£
->
u
.
ªÆ
.
mö
,

783 
DBL_DIG
, 
ba£
->
u
.
ªÆ
.
max
);

785  
	`ovsdb_îr‹
("constraint violation",

788 
DBL_DIG
, 
©om
->
ªÆ
,

789 
DBL_DIG
, 
ba£
->
u
.
ªÆ
.
mö
);

792  
	`ovsdb_îr‹
("constraint violation",

795 
DBL_DIG
, 
©om
->
ªÆ
,

796 
DBL_DIG
, 
ba£
->
u
.
ªÆ
.
max
);

798 
	`NOT_REACHED
();

800 
OVSDB_TYPE_BOOLEAN
:

801  
NULL
;

803 
OVSDB_TYPE_STRING
:

804  
	`check_°rög_c⁄°øöts
(
©om
->
°rög
, &
ba£
->
u
.string);

806 
OVSDB_TYPE_UUID
:

807  
NULL
;

809 
OVSDB_N_TYPES
:

811 
	`NOT_REACHED
();

813 
	}
}

815 
ovsdb_©om
 *

816 
	$Æloc_deÁu…_©oms
(
ovsdb_©omic_ty≥
 
ty≥
, 
size_t
 
n
)

818 i‡(
ty≥
 !
OVSDB_TYPE_VOID
 && 
n
) {

819 
ovsdb_©om
 *
©oms
;

820 
i
;

822 
©oms
 = 
	`xmÆloc
(
n
 *  *atoms);

823 
i
 = 0; i < 
n
; i++) {

824 
	`ovsdb_©om_öô_deÁu…
(&
©oms
[
i
], 
ty≥
);

826  
©oms
;

830  
NULL
;

832 
	}
}

837 
	$ovsdb_d©um_öô_em±y
(
ovsdb_d©um
 *
d©um
)

839 
d©um
->
n
 = 0;

840 
d©um
->
keys
 = 
NULL
;

841 
d©um
->
vÆues
 = 
NULL
;

842 
	}
}

857 
	$ovsdb_d©um_öô_deÁu…
(
ovsdb_d©um
 *
d©um
,

858 c⁄° 
ovsdb_ty≥
 *
ty≥
)

860 
d©um
->
n
 = 
ty≥
->
n_mö
;

861 
d©um
->
keys
 = 
	`Æloc_deÁu…_©oms
(
ty≥
->
key
.ty≥, d©um->
n
);

862 
d©um
->
vÆues
 = 
	`Æloc_deÁu…_©oms
(
ty≥
->
vÆue
.ty≥, d©um->
n
);

863 
	}
}

870 c⁄° 
ovsdb_d©um
 *

871 
	$ovsdb_d©um_deÁu…
(c⁄° 
ovsdb_ty≥
 *
ty≥
)

873 i‡(
ty≥
->
n_mö
 == 0) {

874 c⁄° 
ovsdb_d©um
 
em±y
;

875  &
em±y
;

876 } i‡(
ty≥
->
n_mö
 == 1) {

877 
ovsdb_d©um
 
deÁu…_d©a
[
OVSDB_N_TYPES
][OVSDB_N_TYPES];

878 
ovsdb_d©um
 *
d
;

879 
kt
 = 
ty≥
->
key
.type;

880 
vt
 = 
ty≥
->
vÆue
.type;

882 
	`as£π
(
	`ovsdb_ty≥_is_vÆid
(
ty≥
));

884 
d
 = &
deÁu…_d©a
[
kt
][
vt
];

885 i‡(!
d
->
n
) {

886 
d
->
n
 = 1;

887 
d
->
keys
 = 
	`CONST_CAST
(
ovsdb_©om
 *, 
	`ovsdb_©om_deÁu…
(
kt
));

888 i‡(
vt
 !
OVSDB_TYPE_VOID
) {

889 
d
->
vÆues
 = 
	`CONST_CAST
(
ovsdb_©om
 *,

890 
	`ovsdb_©om_deÁu…
(
vt
));

893  
d
;

895 
	`NOT_REACHED
();

897 
	}
}

904 
boﬁ


905 
	$ovsdb_d©um_is_deÁu…
(c⁄° 
ovsdb_d©um
 *
d©um
,

906 c⁄° 
ovsdb_ty≥
 *
ty≥
)

908 
size_t
 
i
;

910 i‡(
d©um
->
n
 !
ty≥
->
n_mö
) {

911  
Ál£
;

913 
i
 = 0; i < 
d©um
->
n
; i++) {

914 i‡(!
	`ovsdb_©om_is_deÁu…
(&
d©um
->
keys
[
i
], 
ty≥
->
key
.type)) {

915  
Ál£
;

917 i‡(
ty≥
->
vÆue
.ty≥ !
OVSDB_TYPE_VOID


918 && !
	`ovsdb_©om_is_deÁu…
(&
d©um
->
vÆues
[
i
], 
ty≥
->
vÆue
.type)) {

919  
Ál£
;

923  
åue
;

924 
	}
}

926 
ovsdb_©om
 *

927 
	$˛⁄e_©oms
(c⁄° 
ovsdb_©om
 *
ﬁd
, 
ovsdb_©omic_ty≥
 
ty≥
, 
size_t
 
n
)

929 i‡(
ty≥
 !
OVSDB_TYPE_VOID
 && 
n
) {

930 
ovsdb_©om
 *
√w
;

931 
i
;

933 
√w
 = 
	`xmÆloc
(
n
 *  *new);

934 
i
 = 0; i < 
n
; i++) {

935 
	`ovsdb_©om_˛⁄e
(&
√w
[
i
], &
ﬁd
[i], 
ty≥
);

937  
√w
;

941  
NULL
;

943 
	}
}

950 
	$ovsdb_d©um_˛⁄e
(
ovsdb_d©um
 *
√w
, c⁄° ovsdb_d©um *
ﬁd
,

951 c⁄° 
ovsdb_ty≥
 *
ty≥
)

953 
n
 = 
ﬁd
->n;

954 
√w
->
n
 =Ç;

955 
√w
->
keys
 = 
	`˛⁄e_©oms
(
ﬁd
->keys, 
ty≥
->
key
.ty≥, 
n
);

956 
√w
->
vÆues
 = 
	`˛⁄e_©oms
(
ﬁd
->vÆues, 
ty≥
->
vÆue
.ty≥, 
n
);

957 
	}
}

960 
	$‰ì_d©a
(
ovsdb_©omic_ty≥
 
ty≥
,

961 
ovsdb_©om
 *
©oms
, 
size_t
 
n_©oms
)

963 i‡(
	`ovsdb_©om_√eds_de°ru˘i⁄
(
ty≥
)) {

964 
i
;

965 
i
 = 0; i < 
n_©oms
; i++) {

966 
	`ovsdb_©om_de°roy
(&
©oms
[
i
], 
ty≥
);

969 
	`‰ì
(
©oms
);

970 
	}
}

977 
	$ovsdb_d©um_de°roy
(
ovsdb_d©um
 *
d©um
, c⁄° 
ovsdb_ty≥
 *
ty≥
)

979 
	`‰ì_d©a
(
ty≥
->
key
.ty≥, 
d©um
->
keys
, d©um->
n
);

980 
	`‰ì_d©a
(
ty≥
->
vÆue
.ty≥, 
d©um
->
vÆues
, d©um->
n
);

981 
	}
}

985 
	$ovsdb_d©um_sw≠
(
ovsdb_d©um
 *
a
, ovsdb_d©um *
b
)

987 
ovsdb_d©um
 
tmp
 = *
a
;

988 *
a
 = *
b
;

989 *
b
 = 
tmp
;

990 
	}
}

992 
	sovsdb_d©um_s‹t_cbd©a
 {

993 
ovsdb_©omic_ty≥
 
	mkey_ty≥
;

994 
ovsdb_©omic_ty≥
 
	mvÆue_ty≥
;

995 
ovsdb_d©um
 *
	md©um
;

999 
	$ovsdb_d©um_s‹t_com∑ª_cb
(
size_t
 
a
, size_à
b
, *
cbd©a_
)

1001 
ovsdb_d©um_s‹t_cbd©a
 *
cbd©a
 = 
cbd©a_
;

1002 
ªtvÆ
;

1004 
ªtvÆ
 = 
	`ovsdb_©om_com∑ª_3way
(&
cbd©a
->
d©um
->
keys
[
a
],

1005 &
cbd©a
->
d©um
->
keys
[
b
],

1006 
cbd©a
->
key_ty≥
);

1007 i‡(
ªtvÆ
 || 
cbd©a
->
vÆue_ty≥
 =
OVSDB_TYPE_VOID
) {

1008  
ªtvÆ
;

1011  
	`ovsdb_©om_com∑ª_3way
(&
cbd©a
->
d©um
->
vÆues
[
a
],

1012 &
cbd©a
->
d©um
->
vÆues
[
b
],

1013 
cbd©a
->
vÆue_ty≥
);

1014 
	}
}

1017 
	$ovsdb_d©um_s‹t_sw≠_cb
(
size_t
 
a
, size_à
b
, *
cbd©a_
)

1019 
ovsdb_d©um_s‹t_cbd©a
 *
cbd©a
 = 
cbd©a_
;

1021 
	`ovsdb_©om_sw≠
(&
cbd©a
->
d©um
->
keys
[
a
], &cbd©a->d©um->keys[
b
]);

1022 i‡(
cbd©a
->
d©um
->
vÆues
) {

1023 
	`ovsdb_©om_sw≠
(&
cbd©a
->
d©um
->
vÆues
[
a
], &cbd©a->d©um->vÆues[
b
]);

1025 
	}
}

1028 
	$ovsdb_d©um_s‹t__
(
ovsdb_d©um
 *
d©um
, 
ovsdb_©omic_ty≥
 
key_ty≥
,

1029 
ovsdb_©omic_ty≥
 
vÆue_ty≥
)

1031 
ovsdb_d©um_s‹t_cbd©a
 
cbd©a
;

1033 
cbd©a
.
key_ty≥
 = key_type;

1034 
cbd©a
.
vÆue_ty≥
 = value_type;

1035 
cbd©a
.
d©um
 = datum;

1036 
	`s‹t
(
d©um
->
n
, 
ovsdb_d©um_s‹t_com∑ª_cb
, 
ovsdb_d©um_s‹t_sw≠_cb
,

1037 &
cbd©a
);

1038 
	}
}

1048 
ovsdb_îr‹
 *

1049 
	$ovsdb_d©um_s‹t
(
ovsdb_d©um
 *
d©um
, 
ovsdb_©omic_ty≥
 
key_ty≥
)

1051 
size_t
 
i
;

1053 i‡(
d©um
->
n
 < 2) {

1054  
NULL
;

1057 
	`ovsdb_d©um_s‹t__
(
d©um
, 
key_ty≥
, 
OVSDB_TYPE_VOID
);

1059 
i
 = 0; i < 
d©um
->
n
 - 1; i++) {

1060 i‡(
	`ovsdb_©om_equÆs
(&
d©um
->
keys
[
i
], &datum->keys[i + 1],

1061 
key_ty≥
)) {

1062 i‡(
d©um
->
vÆues
) {

1063  
	`ovsdb_îr‹
(
NULL
, "map contains duplicate key");

1065  
	`ovsdb_îr‹
(
NULL
, "set contains duplicate");

1069  
NULL
;

1070 
	}
}

1076 
	$ovsdb_d©um_s‹t_as£π
(
ovsdb_d©um
 *
d©um
,

1077 
ovsdb_©omic_ty≥
 
key_ty≥
)

1079 
ovsdb_îr‹
 *
îr‹
 = 
	`ovsdb_d©um_s‹t
(
d©um
, 
key_ty≥
);

1080 i‡(
îr‹
) {

1081 
	`NOT_REACHED
();

1083 
	}
}

1090 
size_t


1091 
	$ovsdb_d©um_s‹t_unique
(
ovsdb_d©um
 *
d©um
,

1092 
ovsdb_©omic_ty≥
 
key_ty≥
,

1093 
ovsdb_©omic_ty≥
 
vÆue_ty≥
)

1095 
size_t
 
§c
, 
d°
;

1097 i‡(
d©um
->
n
 < 2) {

1101 
	`ovsdb_d©um_s‹t__
(
d©um
, 
key_ty≥
, 
vÆue_ty≥
);

1103 
d°
 = 1;

1104 
§c
 = 1; sr¯< 
d©um
->
n
; src++) {

1105 i‡(
	`ovsdb_©om_equÆs
(&
d©um
->
keys
[
§c
], &d©um->keys[
d°
 - 1],

1106 
key_ty≥
)) {

1107 
	`ovsdb_©om_de°roy
(&
d©um
->
keys
[
§c
], 
key_ty≥
);

1108 i‡(
vÆue_ty≥
 !
OVSDB_TYPE_VOID
) {

1109 
	`ovsdb_©om_de°roy
(&
d©um
->
vÆues
[
§c
], 
vÆue_ty≥
);

1112 i‡(
§c
 !
d°
) {

1113 
d©um
->
keys
[
d°
] = d©um->keys[
§c
];

1114 i‡(
vÆue_ty≥
 !
OVSDB_TYPE_VOID
) {

1115 
d©um
->
vÆues
[
d°
] = d©um->vÆues[
§c
];

1118 
d°
++;

1121 
d©um
->
n
 = 
d°
;

1122  
d©um
->
n
 - 
§c
;

1123 
	}
}

1132 
ovsdb_îr‹
 *

1133 
	$ovsdb_d©um_check_c⁄°øöts
(c⁄° 
ovsdb_d©um
 *
d©um
,

1134 c⁄° 
ovsdb_ty≥
 *
ty≥
)

1136 
ovsdb_îr‹
 *
îr‹
;

1137 
i
;

1139 
i
 = 0; i < 
d©um
->
n
; i++) {

1140 
îr‹
 = 
	`ovsdb_©om_check_c⁄°øöts
(&
d©um
->
keys
[
i
], &
ty≥
->
key
);

1141 i‡(
îr‹
) {

1142  
îr‹
;

1146 i‡(
ty≥
->
vÆue
.ty≥ !
OVSDB_TYPE_VOID
) {

1147 
i
 = 0; i < 
d©um
->
n
; i++) {

1148 
îr‹
 = 
	`ovsdb_©om_check_c⁄°øöts
(&
d©um
->
vÆues
[
i
],

1149 &
ty≥
->
vÆue
);

1150 i‡(
îr‹
) {

1151  
îr‹
;

1156  
NULL
;

1157 
	}
}

1159 
ovsdb_îr‹
 *

1160 
	$ovsdb_d©um_‰om_js⁄__
(
ovsdb_d©um
 *
d©um
,

1161 c⁄° 
ovsdb_ty≥
 *
ty≥
,

1162 c⁄° 
js⁄
 *json,

1163 
ovsdb_symbﬁ_èbÀ
 *
symèb
)

1165 
ovsdb_îr‹
 *
îr‹
;

1167 i‡(
	`ovsdb_ty≥_is_m≠
(
ty≥
)

1168 || (
js⁄
->
ty≥
 =
JSON_ARRAY


1169 && 
js⁄
->
u
.
¨øy
.
n
 > 0

1170 && 
js⁄
->
u
.
¨øy
.
ñems
[0]->
ty≥
 =
JSON_STRING


1171 && !
	`°rcmp
(
js⁄
->
u
.
¨øy
.
ñems
[0]->u.
°rög
, "set"))) {

1172 
boﬁ
 
is_m≠
 = 
	`ovsdb_ty≥_is_m≠
(
ty≥
);

1173 c⁄° *
˛ass
 = 
is_m≠
 ? "map" : "set";

1174 c⁄° 
js⁄
 *
ö√r
;

1175 
i
;

1176 
size_t
 
n
;

1178 
îr‹
 = 
	`unwøp_js⁄
(
js⁄
, 
˛ass
, 
JSON_ARRAY
, &
ö√r
);

1179 i‡(
îr‹
) {

1180  
îr‹
;

1183 
n
 = 
ö√r
->
u
.
¨øy
.n;

1184 i‡(
n
 < 
ty≥
->
n_mö
 ||Ç >Åy≥->
n_max
) {

1185  
	`ovsdb_sy¡ax_îr‹
(
js⁄
, 
NULL
, "%s must have %uÅo "

1187 
˛ass
, 
ty≥
->
n_mö
,Åy≥->
n_max
, 
n
);

1190 
d©um
->
n
 = 0;

1191 
d©um
->
keys
 = 
	`xmÆloc
(
n
 *  *datum->keys);

1192 
d©um
->
vÆues
 = 
is_m≠
 ? 
	`xmÆloc
(
n
 *  *d©um->vÆuesË: 
NULL
;

1193 
i
 = 0; i < 
n
; i++) {

1194 c⁄° 
js⁄
 *
ñemít
 = 
ö√r
->
u
.
¨øy
.
ñems
[
i
];

1195 c⁄° 
js⁄
 *
key
 = 
NULL
;

1196 c⁄° 
js⁄
 *
vÆue
 = 
NULL
;

1198 i‡(!
is_m≠
) {

1199 
key
 = 
ñemít
;

1201 
îr‹
 = 
	`∑r£_js⁄_∑ú
(
ñemít
, &
key
, &
vÆue
);

1202 i‡(
îr‹
) {

1203 
îr‹
;

1207 
îr‹
 = 
	`ovsdb_©om_‰om_js⁄
(&
d©um
->
keys
[
i
], &
ty≥
->
key
,

1208 
key
, 
symèb
);

1209 i‡(
îr‹
) {

1210 
îr‹
;

1213 i‡(
is_m≠
) {

1214 
îr‹
 = 
	`ovsdb_©om_‰om_js⁄
(&
d©um
->
vÆues
[
i
],

1215 &
ty≥
->
vÆue
, vÆue, 
symèb
);

1216 i‡(
îr‹
) {

1217 
	`ovsdb_©om_de°roy
(&
d©um
->
keys
[
i
], 
ty≥
->
key
.type);

1218 
îr‹
;

1222 
d©um
->
n
++;

1224  
NULL
;

1226 
îr‹
:

1227 
	`ovsdb_d©um_de°roy
(
d©um
, 
ty≥
);

1228  
îr‹
;

1230 
d©um
->
n
 = 1;

1231 
d©um
->
keys
 = 
	`xmÆloc
( *datum->keys);

1232 
d©um
->
vÆues
 = 
NULL
;

1234 
îr‹
 = 
	`ovsdb_©om_‰om_js⁄
(&
d©um
->
keys
[0], &
ty≥
->
key
,

1235 
js⁄
, 
symèb
);

1236 i‡(
îr‹
) {

1237 
	`‰ì
(
d©um
->
keys
);

1239  
îr‹
;

1241 
	}
}

1253 
ovsdb_îr‹
 *

1254 
	$ovsdb_d©um_‰om_js⁄
(
ovsdb_d©um
 *
d©um
,

1255 c⁄° 
ovsdb_ty≥
 *
ty≥
,

1256 c⁄° 
js⁄
 *json,

1257 
ovsdb_symbﬁ_èbÀ
 *
symèb
)

1259 
ovsdb_îr‹
 *
îr‹
;

1261 
îr‹
 = 
	`ovsdb_d©um_‰om_js⁄__
(
d©um
, 
ty≥
, 
js⁄
, 
symèb
);

1262 i‡(
îr‹
) {

1263  
îr‹
;

1266 
îr‹
 = 
	`ovsdb_d©um_s‹t
(
d©um
, 
ty≥
->
key
.type);

1267 i‡(
îr‹
) {

1268 
	`ovsdb_d©um_de°roy
(
d©um
, 
ty≥
);

1270  
îr‹
;

1271 
	}
}

1280 
js⁄
 *

1281 
	$ovsdb_d©um_to_js⁄
(c⁄° 
ovsdb_d©um
 *
d©um
,

1282 c⁄° 
ovsdb_ty≥
 *
ty≥
)

1284 i‡(
	`ovsdb_ty≥_is_m≠
(
ty≥
)) {

1285 
js⁄
 **
ñems
;

1286 
size_t
 
i
;

1288 
ñems
 = 
	`xmÆloc
(
d©um
->
n
 *  *elems);

1289 
i
 = 0; i < 
d©um
->
n
; i++) {

1290 
ñems
[
i
] = 
	`js⁄_¨øy_¸óã_2
(

1291 
	`ovsdb_©om_to_js⁄
(&
d©um
->
keys
[
i
], 
ty≥
->
key
.type),

1292 
	`ovsdb_©om_to_js⁄
(&
d©um
->
vÆues
[
i
], 
ty≥
->
vÆue
.type));

1295  
	`wøp_js⁄
("m≠", 
	`js⁄_¨øy_¸óã
(
ñems
, 
d©um
->
n
));

1296 } i‡(
d©um
->
n
 == 1) {

1297  
	`ovsdb_©om_to_js⁄
(&
d©um
->
keys
[0], 
ty≥
->
key
.type);

1299 
js⁄
 **
ñems
;

1300 
size_t
 
i
;

1302 
ñems
 = 
	`xmÆloc
(
d©um
->
n
 *  *elems);

1303 
i
 = 0; i < 
d©um
->
n
; i++) {

1304 
ñems
[
i
] = 
	`ovsdb_©om_to_js⁄
(&
d©um
->
keys
[i], 
ty≥
->
key
.type);

1307  
	`wøp_js⁄
("£t", 
	`js⁄_¨øy_¸óã
(
ñems
, 
d©um
->
n
));

1309 
	}
}

1312 
	$skù_•a˚s
(c⁄° *
p
)

1314 
	`is•a˚
((Ë*
p
)) {

1315 
p
++;

1317  
p
;

1318 
	}
}

1321 
	$∑r£_©om_tokí
(c⁄° **
s
, c⁄° 
ovsdb_ba£_ty≥
 *
ba£
,

1322 
ovsdb_©om
 *
©om
, 
ovsdb_symbﬁ_èbÀ
 *
symèb
)

1324 *
tokí
, *
îr‹
;

1326 
îr‹
 = 
	`ovsdb_tokí_∑r£
(
s
, &
tokí
);

1327 i‡(!
îr‹
) {

1328 
îr‹
 = 
	`ovsdb_©om_‰om_°rög
(
©om
, 
ba£
, 
tokí
, 
symèb
);

1329 
	`‰ì
(
tokí
);

1331  
îr‹
;

1332 
	}
}

1335 
	$∑r£_key_vÆue
(c⁄° **
s
, c⁄° 
ovsdb_ty≥
 *
ty≥
,

1336 
ovsdb_©om
 *
key
, ovsdb_©om *
vÆue
,

1337 
ovsdb_symbﬁ_èbÀ
 *
symèb
)

1339 c⁄° *
°¨t
 = *
s
;

1340 *
îr‹
;

1342 
îr‹
 = 
	`∑r£_©om_tokí
(
s
, &
ty≥
->
key
, key, 
symèb
);

1343 i‡(!
îr‹
 && 
ty≥
->
vÆue
.ty≥ !
OVSDB_TYPE_VOID
) {

1344 *
s
 = 
	`skù_•a˚s
(*s);

1345 i‡(**
s
 == '=') {

1346 (*
s
)++;

1347 *
s
 = 
	`skù_•a˚s
(*s);

1348 
îr‹
 = 
	`∑r£_©om_tokí
(
s
, &
ty≥
->
vÆue
, vÆue, 
symèb
);

1350 
îr‹
 = 
	`xa•rötf
("%s: syntaxÉrrorát \"%c\"Éxpecting \"=\"",

1351 
°¨t
, **
s
);

1353 i‡(
îr‹
) {

1354 
	`ovsdb_©om_de°roy
(
key
, 
ty≥
->key.type);

1357  
îr‹
;

1358 
	}
}

1361 
	$‰ì_key_vÆue
(c⁄° 
ovsdb_ty≥
 *
ty≥
,

1362 
ovsdb_©om
 *
key
, ovsdb_©om *
vÆue
)

1364 
	`ovsdb_©om_de°roy
(
key
, 
ty≥
->key.type);

1365 i‡(
ty≥
->
vÆue
.ty≥ !
OVSDB_TYPE_VOID
) {

1366 
	`ovsdb_©om_de°roy
(
vÆue
, 
ty≥
->value.type);

1368 
	}
}

1380 
	$ovsdb_d©um_‰om_°rög
(
ovsdb_d©um
 *
d©um
,

1381 c⁄° 
ovsdb_ty≥
 *
ty≥
, c⁄° *
s
,

1382 
ovsdb_symbﬁ_èbÀ
 *
symèb
)

1384 
boﬁ
 
is_m≠
 = 
	`ovsdb_ty≥_is_m≠
(
ty≥
);

1385 
ovsdb_îr‹
 *
dbîr‹
;

1386 c⁄° *
p
;

1387 
íd_dñim
;

1388 *
îr‹
;

1390 
	`ovsdb_d©um_öô_em±y
(
d©um
);

1393 
p
 = 
	`skù_•a˚s
(
s
);

1394 i‡(*
p
 =(
is_m≠
 ? '{' : '[')) {

1395 
íd_dñim
 = 
is_m≠
 ? '}' : ']';

1396 
p
 = 
	`skù_•a˚s
(p + 1);

1397 } i‡(!*
p
) {

1398 i‡(
is_m≠
) {

1399  
	`x°rdup
("use \"{}\"Åo specifyÅheÉmpty map");

1401  
	`x°rdup
("use \"[]\"Åo specifyÅheÉmpty set");

1404 
íd_dñim
 = 0;

1407 *
p
 && *∞!
íd_dñim
) {

1408 
ovsdb_©om
 
key
, 
vÆue
;

1410 i‡(
	`ovsdb_tokí_is_dñim
(*
p
)) {

1411 *
ty≥_°r
 = 
	`ovsdb_ty≥_to_íglish
(
ty≥
);

1412 
îr‹
 = 
	`xa•rötf
("%s: unexpected \"%c\"Öarsing %s",

1413 
s
, *
p
, 
ty≥_°r
);

1414 
	`‰ì
(
ty≥_°r
);

1415 
îr‹
;

1419 
îr‹
 = 
	`∑r£_key_vÆue
(&
p
, 
ty≥
, &
key
, &
vÆue
, 
symèb
);

1420 i‡(
îr‹
) {

1421 
îr‹
;

1423 
	`ovsdb_d©um_add_unß„
(
d©um
, &
key
, &
vÆue
, 
ty≥
);

1424 
	`‰ì_key_vÆue
(
ty≥
, &
key
, &
vÆue
);

1427 
p
 = 
	`skù_•a˚s
(p);

1428 i‡(*
p
 == ',') {

1429 
p
 = 
	`skù_•a˚s
(p + 1);

1433 i‡(*
p
 !
íd_dñim
) {

1434 
îr‹
 = 
	`xa•rötf
("%s: missög \"%c\"áàíd o‡d©a", 
s
, 
íd_dñim
);

1435 
îr‹
;

1437 i‡(
íd_dñim
) {

1438 
p
 = 
	`skù_•a˚s
(p + 1);

1439 i‡(*
p
) {

1440 
îr‹
 = 
	`xa•rötf
("%s:Årailing garbageáfter \"%c\"",

1441 
s
, 
íd_dñim
);

1442 
îr‹
;

1446 i‡(
d©um
->
n
 < 
ty≥
->
n_mö
) {

1447 
îr‹
 = 
	`xa•rötf
("%s: %u %s specified butÅhe minimumÇumber is %u",

1448 
s
, 
d©um
->
n
, 
is_m≠
 ? "pair(s)" : "value(s)",

1449 
ty≥
->
n_mö
);

1450 
îr‹
;

1451 } i‡(
d©um
->
n
 > 
ty≥
->
n_max
) {

1452 
îr‹
 = 
	`xa•rötf
("%s: %u %s specified butÅhe maximumÇumber is %u",

1453 
s
, 
d©um
->
n
, 
is_m≠
 ? "pair(s)" : "value(s)",

1454 
ty≥
->
n_max
);

1455 
îr‹
;

1458 
dbîr‹
 = 
	`ovsdb_d©um_s‹t
(
d©um
, 
ty≥
->
key
.type);

1459 i‡(
dbîr‹
) {

1460 
	`ovsdb_îr‹_de°roy
(
dbîr‹
);

1461 i‡(
	`ovsdb_ty≥_is_m≠
(
ty≥
)) {

1462 
îr‹
 = 
	`xa•rötf
("%s: m≠ c⁄èö†du∂iˇã key", 
s
);

1464 
îr‹
 = 
	`xa•rötf
("%s: së c⁄èö†du∂iˇã vÆue", 
s
);

1466 
îr‹
;

1469  
NULL
;

1471 
îr‹
:

1472 
	`ovsdb_d©um_de°roy
(
d©um
, 
ty≥
);

1473 
	`ovsdb_d©um_öô_em±y
(
d©um
);

1474  
îr‹
;

1475 
	}
}

1480 
	$ovsdb_d©um_to_°rög
(c⁄° 
ovsdb_d©um
 *
d©um
,

1481 c⁄° 
ovsdb_ty≥
 *
ty≥
, 
ds
 *
out
)

1483 
boﬁ
 
is_m≠
 = 
	`ovsdb_ty≥_is_m≠
(
ty≥
);

1484 
size_t
 
i
;

1486 i‡(
ty≥
->
n_max
 > 1 || !
d©um
->
n
) {

1487 
	`ds_put_ch¨
(
out
, 
is_m≠
 ? '{' : '[');

1489 
i
 = 0; i < 
d©um
->
n
; i++) {

1490 i‡(
i
 > 0) {

1491 
	`ds_put_c°r
(
out
, ", ");

1494 
	`ovsdb_©om_to_°rög
(&
d©um
->
keys
[
i
], 
ty≥
->
key
.ty≥, 
out
);

1495 i‡(
is_m≠
) {

1496 
	`ds_put_ch¨
(
out
, '=');

1497 
	`ovsdb_©om_to_°rög
(&
d©um
->
vÆues
[
i
], 
ty≥
->
vÆue
.ty≥, 
out
);

1500 i‡(
ty≥
->
n_max
 > 1 || !
d©um
->
n
) {

1501 
	`ds_put_ch¨
(
out
, 
is_m≠
 ? '}' : ']');

1503 
	}
}

1509 
	$ovsdb_d©um_to_b¨e
(c⁄° 
ovsdb_d©um
 *
d©um
,

1510 c⁄° 
ovsdb_ty≥
 *
ty≥
, 
ds
 *
out
)

1512 
boﬁ
 
is_m≠
 = 
	`ovsdb_ty≥_is_m≠
(
ty≥
);

1513 
size_t
 
i
;

1515 
i
 = 0; i < 
d©um
->
n
; i++) {

1516 i‡(
i
 > 0) {

1517 
	`ds_put_c°r
(
out
, " ");

1520 
	`ovsdb_©om_to_b¨e
(&
d©um
->
keys
[
i
], 
ty≥
->
key
.ty≥, 
out
);

1521 i‡(
is_m≠
) {

1522 
	`ds_put_ch¨
(
out
, '=');

1523 
	`ovsdb_©om_to_b¨e
(&
d©um
->
vÆues
[
i
], 
ty≥
->
vÆue
.ty≥, 
out
);

1526 
	}
}

1531 
	$ovsdb_d©um_‰om_sm≠
(
ovsdb_d©um
 *
d©um
, 
sm≠
 *smap)

1533 
sm≠_node
 *
node
, *
√xt
;

1534 
size_t
 
i
;

1536 
d©um
->
n
 = 
	`sm≠_cou¡
(
sm≠
);

1537 
d©um
->
keys
 = 
	`xmÆloc
(d©um->
n
 *  *datum->keys);

1538 
d©um
->
vÆues
 = 
	`xmÆloc
(d©um->
n
 *  *datum->values);

1540 
i
 = 0;

1541 
	`SMAP_FOR_EACH_SAFE
 (
node
, 
√xt
, 
sm≠
) {

1542 
	`sm≠_°ól
(
sm≠
, 
node
,

1543 &
d©um
->
keys
[
i
].
°rög
, &d©um->
vÆues
[i].string);

1544 
i
++;

1546 
	`as£π
(
i
 =
d©um
->
n
);

1548 
	`sm≠_de°roy
(
sm≠
);

1549 
	`ovsdb_d©um_s‹t_unique
(
d©um
, 
OVSDB_TYPE_STRING
, OVSDB_TYPE_STRING);

1550 
	}
}

1552 
uöt32_t


1553 
	$hash_©oms
(
ovsdb_©omic_ty≥
 
ty≥
, c⁄° 
ovsdb_©om
 *
©oms
,

1554 
n
, 
uöt32_t
 
basis
)

1556 i‡(
ty≥
 !
OVSDB_TYPE_VOID
) {

1557 
i
;

1559 
i
 = 0; i < 
n
; i++) {

1560 
basis
 = 
	`ovsdb_©om_hash
(&
©oms
[
i
], 
ty≥
, basis);

1563  
basis
;

1564 
	}
}

1566 
uöt32_t


1567 
	$ovsdb_d©um_hash
(c⁄° 
ovsdb_d©um
 *
d©um
,

1568 c⁄° 
ovsdb_ty≥
 *
ty≥
, 
uöt32_t
 
basis
)

1570 
basis
 = 
	`hash_©oms
(
ty≥
->
key
.ty≥, 
d©um
->
keys
, d©um->
n
, basis);

1571 
basis
 ^(
ty≥
->
key
.ty≥ << 24Ë| (ty≥->
vÆue
.ty≥ << 16Ë| 
d©um
->
n
;

1572 
basis
 = 
	`hash_©oms
(
ty≥
->
vÆue
.ty≥, 
d©um
->
vÆues
, d©um->
n
, basis);

1573  
basis
;

1574 
	}
}

1577 
	$©om_¨øys_com∑ª_3way
(c⁄° 
ovsdb_©om
 *
a
,

1578 c⁄° 
ovsdb_©om
 *
b
,

1579 
ovsdb_©omic_ty≥
 
ty≥
,

1580 
size_t
 
n
)

1582 
i
;

1584 
i
 = 0; i < 
n
; i++) {

1585 
cmp
 = 
	`ovsdb_©om_com∑ª_3way
(&
a
[
i
], &
b
[i], 
ty≥
);

1586 i‡(
cmp
) {

1587  
cmp
;

1592 
	}
}

1594 
boﬁ


1595 
	$ovsdb_d©um_equÆs
(c⁄° 
ovsdb_d©um
 *
a
,

1596 c⁄° 
ovsdb_d©um
 *
b
,

1597 c⁄° 
ovsdb_ty≥
 *
ty≥
)

1599  !
	`ovsdb_d©um_com∑ª_3way
(
a
, 
b
, 
ty≥
);

1600 
	}
}

1603 
	$ovsdb_d©um_com∑ª_3way
(c⁄° 
ovsdb_d©um
 *
a
,

1604 c⁄° 
ovsdb_d©um
 *
b
,

1605 c⁄° 
ovsdb_ty≥
 *
ty≥
)

1607 
cmp
;

1609 i‡(
a
->
n
 !
b
->n) {

1610  
a
->
n
 < 
b
->n ? -1 : 1;

1613 
cmp
 = 
	`©om_¨øys_com∑ª_3way
(
a
->
keys
, 
b
->keys, 
ty≥
->
key
.ty≥,á->
n
);

1614 i‡(
cmp
) {

1615  
cmp
;

1618  (
ty≥
->
vÆue
.ty≥ =
OVSDB_TYPE_VOID
 ? 0

1619 : 
	`©om_¨øys_com∑ª_3way
(
a
->
vÆues
, 
b
->vÆues, 
ty≥
->
vÆue
.type,

1620 
a
->
n
));

1621 
	}
}

1628 
	$ovsdb_d©um_föd_key
(c⁄° 
ovsdb_d©um
 *
d©um
,

1629 c⁄° 
ovsdb_©om
 *
key
,

1630 
ovsdb_©omic_ty≥
 
key_ty≥
)

1632 
low
 = 0;

1633 
high
 = 
d©um
->
n
;

1634 
low
 < 
high
) {

1635 
idx
 = (
low
 + 
high
) / 2;

1636 
cmp
 = 
	`ovsdb_©om_com∑ª_3way
(
key
, &
d©um
->
keys
[
idx
], 
key_ty≥
);

1637 i‡(
cmp
 < 0) {

1638 
high
 = 
idx
;

1639 } i‡(
cmp
 > 0) {

1640 
low
 = 
idx
 + 1;

1642  
idx
;

1645  
UINT_MAX
;

1646 
	}
}

1654 
	$ovsdb_d©um_föd_key_vÆue
(c⁄° 
ovsdb_d©um
 *
d©um
,

1655 c⁄° 
ovsdb_©om
 *
key
,

1656 
ovsdb_©omic_ty≥
 
key_ty≥
,

1657 c⁄° 
ovsdb_©om
 *
vÆue
,

1658 
ovsdb_©omic_ty≥
 
vÆue_ty≥
)

1660 
idx
 = 
	`ovsdb_d©um_föd_key
(
d©um
, 
key
, 
key_ty≥
);

1661 i‡(
idx
 !
UINT_MAX


1662 && 
vÆue_ty≥
 !
OVSDB_TYPE_VOID


1663 && !
	`ovsdb_©om_equÆs
(&
d©um
->
vÆues
[
idx
], 
vÆue
, 
vÆue_ty≥
)) {

1664 
idx
 = 
UINT_MAX
;

1666  
idx
;

1667 
	}
}

1674 
	$ovsdb_d©um_föd
(c⁄° 
ovsdb_d©um
 *
a
, 
i
,

1675 c⁄° 
ovsdb_d©um
 *
b
,

1676 c⁄° 
ovsdb_ty≥
 *
ty≥
)

1678  
	`ovsdb_d©um_föd_key_vÆue
(
b
,

1679 &
a
->
keys
[
i
], 
ty≥
->
key
.type,

1680 
a
->
vÆues
 ? &a->vÆues[
i
] : 
NULL
,

1681 
ty≥
->
vÆue
.type);

1682 
	}
}

1685 
boﬁ


1686 
	$ovsdb_d©um_ö˛udes_Æl
(c⁄° 
ovsdb_d©um
 *
a
,

1687 c⁄° 
ovsdb_d©um
 *
b
,

1688 c⁄° 
ovsdb_ty≥
 *
ty≥
)

1690 
size_t
 
i
;

1692 i‡(
a
->
n
 > 
b
->n) {

1693  
Ál£
;

1695 
i
 = 0; i < 
a
->
n
; i++) {

1696 i‡(
	`ovsdb_d©um_föd
(
a
, 
i
, 
b
, 
ty≥
Ë=
UINT_MAX
) {

1697  
Ál£
;

1700  
åue
;

1701 
	}
}

1704 
boﬁ


1705 
	$ovsdb_d©um_ex˛udes_Æl
(c⁄° 
ovsdb_d©um
 *
a
,

1706 c⁄° 
ovsdb_d©um
 *
b
,

1707 c⁄° 
ovsdb_ty≥
 *
ty≥
)

1709 
size_t
 
i
;

1711 
i
 = 0; i < 
a
->
n
; i++) {

1712 i‡(
	`ovsdb_d©um_föd
(
a
, 
i
, 
b
, 
ty≥
Ë!
UINT_MAX
) {

1713  
Ál£
;

1716  
åue
;

1717 
	}
}

1720 
	$ovsdb_d©um_ªÆloˇã
(
ovsdb_d©um
 *
a
, c⁄° 
ovsdb_ty≥
 *
ty≥
,

1721 
ˇ∑côy
)

1723 
a
->
keys
 = 
	`xªÆloc
◊->keys, 
ˇ∑côy
 *  *a->keys);

1724 i‡(
ty≥
->
vÆue
.ty≥ !
OVSDB_TYPE_VOID
) {

1725 
a
->
vÆues
 = 
	`xªÆloc
◊->vÆues, 
ˇ∑côy
 *  *a->values);

1727 
	}
}

1736 
	$ovsdb_d©um_ªmove_unß„
(
ovsdb_d©um
 *
d©um
, 
size_t
 
idx
,

1737 c⁄° 
ovsdb_ty≥
 *
ty≥
)

1739 
	`ovsdb_©om_de°roy
(&
d©um
->
keys
[
idx
], 
ty≥
->
key
.type);

1740 
d©um
->
keys
[
idx
] = d©um->keys[d©um->
n
 - 1];

1741 i‡(
ty≥
->
vÆue
.ty≥ !
OVSDB_TYPE_VOID
) {

1742 
	`ovsdb_©om_de°roy
(&
d©um
->
vÆues
[
idx
], 
ty≥
->
vÆue
.type);

1743 
d©um
->
vÆues
[
idx
] = d©um->vÆues[d©um->
n
 - 1];

1745 
d©um
->
n
--;

1746 
	}
}

1758 
	$ovsdb_d©um_add_unß„
(
ovsdb_d©um
 *
d©um
,

1759 c⁄° 
ovsdb_©om
 *
key
,

1760 c⁄° 
ovsdb_©om
 *
vÆue
,

1761 c⁄° 
ovsdb_ty≥
 *
ty≥
)

1763 
size_t
 
idx
 = 
d©um
->
n
++;

1764 
d©um
->
keys
 = 
	`xªÆloc
(d©um->keys, d©um->
n
 *  *datum->keys);

1765 
	`ovsdb_©om_˛⁄e
(&
d©um
->
keys
[
idx
], 
key
, 
ty≥
->key.type);

1766 i‡(
ty≥
->
vÆue
.ty≥ !
OVSDB_TYPE_VOID
) {

1767 
d©um
->
vÆues
 = 
	`xªÆloc
(datum->values,

1768 
d©um
->
n
 *  *d©um->
vÆues
);

1769 
	`ovsdb_©om_˛⁄e
(&
d©um
->
vÆues
[
idx
], 
vÆue
, 
ty≥
->value.type);

1771 
	}
}

1774 
	$ovsdb_d©um_uni⁄
(
ovsdb_d©um
 *
a
, c⁄° ovsdb_d©um *
b
,

1775 c⁄° 
ovsdb_ty≥
 *
ty≥
, 
boﬁ
 
ª∂a˚
)

1777 
n
;

1778 
size_t
 
bi
;

1780 
n
 = 
a
->n;

1781 
bi
 = 0; bò< 
b
->
n
; bi++) {

1782 
ai
;

1784 
ai
 = 
	`ovsdb_d©um_föd_key
(
a
, &
b
->
keys
[
bi
], 
ty≥
->
key
.type);

1785 i‡(
ai
 =
UINT_MAX
) {

1786 i‡(
n
 =
a
->n) {

1787 
	`ovsdb_d©um_ªÆloˇã
(
a
, 
ty≥
,á->
n
 + (
b
->¿- 
bi
));

1789 
	`ovsdb_©om_˛⁄e
(&
a
->
keys
[
n
], &
b
->keys[
bi
], 
ty≥
->
key
.type);

1790 i‡(
ty≥
->
vÆue
.ty≥ !
OVSDB_TYPE_VOID
) {

1791 
	`ovsdb_©om_˛⁄e
(&
a
->
vÆues
[
n
], &
b
->vÆues[
bi
],

1792 
ty≥
->
vÆue
.type);

1794 
n
++;

1795 } i‡(
ª∂a˚
 && 
ty≥
->
vÆue
.ty≥ !
OVSDB_TYPE_VOID
) {

1796 
	`ovsdb_©om_de°roy
(&
a
->
vÆues
[
ai
], 
ty≥
->
vÆue
.type);

1797 
	`ovsdb_©om_˛⁄e
(&
a
->
vÆues
[
ai
], &
b
->vÆues[
bi
],

1798 
ty≥
->
vÆue
.type);

1801 i‡(
n
 !
a
->n) {

1802 
ovsdb_îr‹
 *
îr‹
;

1803 
a
->
n
 =Ç;

1804 
îr‹
 = 
	`ovsdb_d©um_s‹t
(
a
, 
ty≥
->
key
.type);

1805 
	`as£π
(!
îr‹
);

1807 
	}
}

1810 
	$ovsdb_d©um_subåa˘
(
ovsdb_d©um
 *
a
, c⁄° 
ovsdb_ty≥
 *
a_ty≥
,

1811 c⁄° 
ovsdb_d©um
 *
b
,

1812 c⁄° 
ovsdb_ty≥
 *
b_ty≥
)

1814 
boﬁ
 
ch™ged
 = 
Ál£
;

1815 
size_t
 
i
;

1817 
	`as£π
(
a_ty≥
->
key
.
ty≥
 =
b_ty≥
->key.type);

1818 
	`as£π
(
a_ty≥
->
vÆue
.
ty≥
 =
b_ty≥
->value.type

1819 || 
b_ty≥
->
vÆue
.
ty≥
 =
OVSDB_TYPE_VOID
);

1822 
i
 = 0; i < 
a
->
n
; ) {

1823 
idx
 = 
	`ovsdb_d©um_föd
(
a
, 
i
, 
b
, 
b_ty≥
);

1824 i‡(
idx
 !
UINT_MAX
) {

1825 
ch™ged
 = 
åue
;

1826 
	`ovsdb_d©um_ªmove_unß„
(
a
, 
i
, 
a_ty≥
);

1828 
i
++;

1831 i‡(
ch™ged
) {

1832 
	`ovsdb_d©um_s‹t_as£π
(
a
, 
a_ty≥
->
key
.
ty≥
);

1834 
	}
}

1836 
ovsdb_symbﬁ_èbÀ
 *

1837 
	$ovsdb_symbﬁ_èbÀ_¸óã
()

1839 
ovsdb_symbﬁ_èbÀ
 *
symèb
 = 
	`xmÆloc
( *symtab);

1840 
	`shash_öô
(&
symèb
->
sh
);

1841  
symèb
;

1842 
	}
}

1845 
	$ovsdb_symbﬁ_èbÀ_de°roy
(
ovsdb_symbﬁ_èbÀ
 *
symèb
)

1847 i‡(
symèb
) {

1848 
	`shash_de°roy_‰ì_d©a
(&
symèb
->
sh
);

1849 
	`‰ì
(
symèb
);

1851 
	}
}

1853 
ovsdb_symbﬁ
 *

1854 
	$ovsdb_symbﬁ_èbÀ_gë
(c⁄° 
ovsdb_symbﬁ_èbÀ
 *
symèb
,

1855 c⁄° *
«me
)

1857  
	`shash_föd_d©a
(&
symèb
->
sh
, 
«me
);

1858 
	}
}

1860 
ovsdb_symbﬁ
 *

1861 
	$ovsdb_symbﬁ_èbÀ_put
(
ovsdb_symbﬁ_èbÀ
 *
symèb
, c⁄° *
«me
,

1862 c⁄° 
uuid
 *uuid, 
boﬁ
 
¸óãd
)

1864 
ovsdb_symbﬁ
 *
symbﬁ
;

1866 
	`as£π
(!
	`ovsdb_symbﬁ_èbÀ_gë
(
symèb
, 
«me
));

1867 
symbﬁ
 = 
	`xmÆloc
( *symbol);

1868 
symbﬁ
->
uuid
 = *uuid;

1869 
symbﬁ
->
¸óãd
 = created;

1870 
symbﬁ
->
°r⁄g_ªf
 = 
Ál£
;

1871 
symbﬁ
->
wók_ªf
 = 
Ál£
;

1872 
	`shash_add
(&
symèb
->
sh
, 
«me
, 
symbﬁ
);

1873  
symbﬁ
;

1874 
	}
}

1876 
ovsdb_symbﬁ
 *

1877 
	$ovsdb_symbﬁ_èbÀ_ö£π
(
ovsdb_symbﬁ_èbÀ
 *
symèb
,

1878 c⁄° *
«me
)

1880 
ovsdb_symbﬁ
 *
symbﬁ
;

1882 
symbﬁ
 = 
	`ovsdb_symbﬁ_èbÀ_gë
(
symèb
, 
«me
);

1883 i‡(!
symbﬁ
) {

1884 
uuid
 uuid;

1886 
	`uuid_gíî©e
(&
uuid
);

1887 
symbﬁ
 = 
	`ovsdb_symbﬁ_èbÀ_put
(
symèb
, 
«me
, &
uuid
, 
Ál£
);

1889  
symbﬁ
;

1890 
	}
}

1906 
	$ovsdb_tokí_∑r£
(c⁄° **
s
, **
ouç
)

1908 c⁄° *
p
;

1909 
ds
 
out
;

1910 
boﬁ
 
ö_quŸes
;

1911 *
îr‹
;

1913 
	`ds_öô
(&
out
);

1914 
ö_quŸes
 = 
Ál£
;

1915 
p
 = *
s
; *p != '\0'; ) {

1916 
c
 = *
p
++;

1917 i‡(
c
 == '\\') {

1918 i‡(
ö_quŸes
) {

1919 
	`ds_put_ch¨
(&
out
, '\\');

1921 i‡(!*
p
) {

1922 
îr‹
 = 
	`xa•rötf
("%s: back¶asháàíd o‡¨gumít", *
s
);

1923 
îr‹
;

1925 
	`ds_put_ch¨
(&
out
, *
p
++);

1926 } i‡(!
ö_quŸes
 && 
	`ovsdb_tokí_is_dñim
(
c
)) {

1927 
p
--;

1930 
	`ds_put_ch¨
(&
out
, 
c
);

1931 i‡(
c
 == '"') {

1932 
ö_quŸes
 = !in_quotes;

1936 i‡(
ö_quŸes
) {

1937 
îr‹
 = 
	`xa•rötf
("%s: quoted stringÉxtendsÖastÉnd ofárgument",

1938 *
s
);

1939 
îr‹
;

1941 *
ouç
 = 
	`ds_c°r
(&
out
);

1942 *
s
 = 
p
;

1943  
NULL
;

1945 
îr‹
:

1946 
	`ds_de°roy
(&
out
);

1947 *
ouç
 = 
NULL
;

1948  
îr‹
;

1949 
	}
}

1952 
boﬁ


1953 
	$ovsdb_tokí_is_dñim
(
c
)

1955  
	`°rchr
(":=, []{}!<>", 
c
Ë!
NULL
;

1956 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/ovsdb-data.h

16 #i‚de‡
OVSDB_DATA_H


17 
	#OVSDB_DATA_H
 1

	)

19 
	~<°dlib.h
>

20 
	~"compûî.h
"

21 
	~"ovsdb-ty≥s.h
"

22 
	~"shash.h
"

24 
	gds
;

25 
	govsdb_symbﬁ_èbÀ
;

26 
	gsm≠
;

29 
	uovsdb_©om
 {

30 
öt64_t
 
	möãgî
;

31 
	mªÆ
;

32 
boﬁ
 
	mboﬁón
;

33 *
	m°rög
;

34 
uuid
 
	muuid
;

37 
ovsdb_©om_öô_deÁu…
(
ovsdb_©om
 *, 
ovsdb_©omic_ty≥
);

38 c⁄° 
ovsdb_©om
 *
ovsdb_©om_deÁu…
(
ovsdb_©omic_ty≥
);

39 
boﬁ
 
ovsdb_©om_is_deÁu…
(c⁄° 
ovsdb_©om
 *, 
ovsdb_©omic_ty≥
);

40 
ovsdb_©om_˛⁄e
(
ovsdb_©om
 *, const ovsdb_atom *,

41 
ovsdb_©omic_ty≥
);

42 
ovsdb_©om_sw≠
(
ovsdb_©om
 *, ovsdb_atom *);

50 
ölöe
 
boﬁ


51 
	$ovsdb_©om_√eds_de°ru˘i⁄
(
ovsdb_©omic_ty≥
 
ty≥
)

53  
ty≥
 =
OVSDB_TYPE_STRING
;

54 
	}
}

60 
ölöe
 

61 
	$ovsdb_©om_de°roy
(
ovsdb_©om
 *
©om
, 
ovsdb_©omic_ty≥
 
ty≥
)

63 i‡(
ty≥
 =
OVSDB_TYPE_STRING
) {

64 
	`‰ì
(
©om
->
°rög
);

66 
	}
}

68 
uöt32_t
 
ovsdb_©om_hash
(c⁄° 
ovsdb_©om
 *, 
ovsdb_©omic_ty≥
,

69 
uöt32_t
 
basis
);

71 
ovsdb_©om_com∑ª_3way
(c⁄° 
ovsdb_©om
 *,

72 c⁄° 
ovsdb_©om
 *,

73 
ovsdb_©omic_ty≥
);

77 
ölöe
 
boﬁ
 
	$ovsdb_©om_equÆs
(c⁄° 
ovsdb_©om
 *
a
,

78 c⁄° 
ovsdb_©om
 *
b
,

79 
ovsdb_©omic_ty≥
 
ty≥
)

81  !
	`ovsdb_©om_com∑ª_3way
(
a
, 
b
, 
ty≥
);

82 
	}
}

84 
ovsdb_îr‹
 *
	$ovsdb_©om_‰om_js⁄
(
ovsdb_©om
 *,

85 c⁄° 
ovsdb_ba£_ty≥
 *,

86 c⁄° 
js⁄
 *,

87 
ovsdb_symbﬁ_èbÀ
 *)

88 
WARN_UNUSED_RESULT
;

89 
js⁄
 *
	`ovsdb_©om_to_js⁄
(c⁄° 
ovsdb_©om
 *,

90 
ovsdb_©omic_ty≥
);

92 *
	$ovsdb_©om_‰om_°rög
(
ovsdb_©om
 *,

93 c⁄° 
ovsdb_ba£_ty≥
 *, const *,

94 
ovsdb_symbﬁ_èbÀ
 *)

95 
WARN_UNUSED_RESULT
;

96 
	`ovsdb_©om_to_°rög
(c⁄° 
ovsdb_©om
 *, 
ovsdb_©omic_ty≥
,

97 
ds
 *);

98 
	`ovsdb_©om_to_b¨e
(c⁄° 
ovsdb_©om
 *, 
ovsdb_©omic_ty≥
,

99 
ds
 *);

101 
ovsdb_îr‹
 *
	$ovsdb_©om_check_c⁄°øöts
(

102 c⁄° 
ovsdb_©om
 *, c⁄° 
ovsdb_ba£_ty≥
 *)

103 
WARN_UNUSED_RESULT
;

125 
	sovsdb_d©um
 {

126 
n
;

127 
ovsdb_©om
 *
keys
;

128 
ovsdb_©om
 *
vÆues
;

132 
	`ovsdb_d©um_öô_em±y
(
ovsdb_d©um
 *);

133 
	`ovsdb_d©um_öô_deÁu…
(
ovsdb_d©um
 *, c⁄° 
ovsdb_ty≥
 *);

134 
boﬁ
 
	`ovsdb_d©um_is_deÁu…
(c⁄° 
ovsdb_d©um
 *,

135 c⁄° 
ovsdb_ty≥
 *);

136 c⁄° 
ovsdb_d©um
 *
	`ovsdb_d©um_deÁu…
(c⁄° 
ovsdb_ty≥
 *);

137 
	`ovsdb_d©um_˛⁄e
(
ovsdb_d©um
 *, const ovsdb_datum *,

138 c⁄° 
ovsdb_ty≥
 *);

139 
	`ovsdb_d©um_de°roy
(
ovsdb_d©um
 *, c⁄° 
ovsdb_ty≥
 *);

140 
	`ovsdb_d©um_sw≠
(
ovsdb_d©um
 *, ovsdb_datum *);

143 
ovsdb_îr‹
 *
	$ovsdb_d©um_s‹t
(
ovsdb_d©um
 *,

144 
ovsdb_©omic_ty≥
 
key_ty≥
)

145 
WARN_UNUSED_RESULT
;

147 
	`ovsdb_d©um_s‹t_as£π
(
ovsdb_d©um
 *,

148 
ovsdb_©omic_ty≥
 
key_ty≥
);

150 
size_t
 
	`ovsdb_d©um_s‹t_unique
(
ovsdb_d©um
 *,

151 
ovsdb_©omic_ty≥
 
key_ty≥
,

152 
ovsdb_©omic_ty≥
 
vÆue_ty≥
);

154 
ovsdb_îr‹
 *
	$ovsdb_d©um_check_c⁄°øöts
(

155 c⁄° 
ovsdb_d©um
 *, c⁄° 
ovsdb_ty≥
 *)

156 
WARN_UNUSED_RESULT
;

159 
ovsdb_îr‹
 *
	$ovsdb_d©um_‰om_js⁄
(
ovsdb_d©um
 *,

160 c⁄° 
ovsdb_ty≥
 *,

161 c⁄° 
js⁄
 *,

162 
ovsdb_symbﬁ_èbÀ
 *)

163 
WARN_UNUSED_RESULT
;

164 
js⁄
 *
	`ovsdb_d©um_to_js⁄
(c⁄° 
ovsdb_d©um
 *,

165 c⁄° 
ovsdb_ty≥
 *);

167 *
	$ovsdb_d©um_‰om_°rög
(
ovsdb_d©um
 *,

168 c⁄° 
ovsdb_ty≥
 *, const *,

169 
ovsdb_symbﬁ_èbÀ
 *)

170 
WARN_UNUSED_RESULT
;

171 
	`ovsdb_d©um_to_°rög
(c⁄° 
ovsdb_d©um
 *,

172 c⁄° 
ovsdb_ty≥
 *, 
ds
 *);

173 
	`ovsdb_d©um_to_b¨e
(c⁄° 
ovsdb_d©um
 *,

174 c⁄° 
ovsdb_ty≥
 *, 
ds
 *);

176 
	`ovsdb_d©um_‰om_sm≠
(
ovsdb_d©um
 *, 
sm≠
 *);

179 
uöt32_t
 
	`ovsdb_d©um_hash
(c⁄° 
ovsdb_d©um
 *,

180 c⁄° 
ovsdb_ty≥
 *, 
uöt32_t
 
basis
);

181 
	`ovsdb_d©um_com∑ª_3way
(c⁄° 
ovsdb_d©um
 *,

182 c⁄° 
ovsdb_d©um
 *,

183 c⁄° 
ovsdb_ty≥
 *);

184 
boﬁ
 
	`ovsdb_d©um_equÆs
(c⁄° 
ovsdb_d©um
 *,

185 c⁄° 
ovsdb_d©um
 *,

186 c⁄° 
ovsdb_ty≥
 *);

189 
	`ovsdb_d©um_föd_key
(c⁄° 
ovsdb_d©um
 *,

190 c⁄° 
ovsdb_©om
 *
key
,

191 
ovsdb_©omic_ty≥
 
key_ty≥
);

192 
	`ovsdb_d©um_föd_key_vÆue
(c⁄° 
ovsdb_d©um
 *,

193 c⁄° 
ovsdb_©om
 *
key
,

194 
ovsdb_©omic_ty≥
 
key_ty≥
,

195 c⁄° 
ovsdb_©om
 *
vÆue
,

196 
ovsdb_©omic_ty≥
 
vÆue_ty≥
);

199 
boﬁ
 
	`ovsdb_d©um_ö˛udes_Æl
(c⁄° 
ovsdb_d©um
 *,

200 c⁄° 
ovsdb_d©um
 *,

201 c⁄° 
ovsdb_ty≥
 *);

202 
boﬁ
 
	`ovsdb_d©um_ex˛udes_Æl
(c⁄° 
ovsdb_d©um
 *,

203 c⁄° 
ovsdb_d©um
 *,

204 c⁄° 
ovsdb_ty≥
 *);

205 
	`ovsdb_d©um_uni⁄
(
ovsdb_d©um
 *,

206 c⁄° 
ovsdb_d©um
 *,

207 c⁄° 
ovsdb_ty≥
 *,

208 
boﬁ
 
ª∂a˚
);

209 
	`ovsdb_d©um_subåa˘
(
ovsdb_d©um
 *
a
,

210 c⁄° 
ovsdb_ty≥
 *
a_ty≥
,

211 c⁄° 
ovsdb_d©um
 *
b
,

212 c⁄° 
ovsdb_ty≥
 *
b_ty≥
);

215 
	`ovsdb_d©um_ªmove_unß„
(
ovsdb_d©um
 *, 
size_t
 
idx
,

216 c⁄° 
ovsdb_ty≥
 *);

217 
	`ovsdb_d©um_add_unß„
(
ovsdb_d©um
 *,

218 c⁄° 
ovsdb_©om
 *
key
,

219 c⁄° 
ovsdb_©om
 *
vÆue
,

220 c⁄° 
ovsdb_ty≥
 *);

223 
ölöe
 
boﬁ


224 
	$ovsdb_d©um_c⁄f‹ms_to_ty≥
(c⁄° 
ovsdb_d©um
 *
d©um
,

225 c⁄° 
ovsdb_ty≥
 *
ty≥
)

227  
d©um
->
n
 >
ty≥
->
n_mö
 && d©um->¿<ty≥->
n_max
;

228 
	}
}

233 
	sovsdb_symbﬁ_èbÀ
 {

234 
shash
 
	msh
;

237 
	sovsdb_symbﬁ
 {

238 
uuid
 
	muuid
;

239 
boﬁ
 
	m¸óãd
;

240 
boﬁ
 
	m°r⁄g_ªf
;

241 
boﬁ
 
	mwók_ªf
;

244 
ovsdb_symbﬁ_èbÀ
 *
ovsdb_symbﬁ_èbÀ_¸óã
();

245 
ovsdb_symbﬁ_èbÀ_de°roy
(
ovsdb_symbﬁ_èbÀ
 *);

246 
ovsdb_symbﬁ
 *
ovsdb_symbﬁ_èbÀ_gë
(c⁄° 
ovsdb_symbﬁ_èbÀ
 *,

247 c⁄° *
«me
);

248 
ovsdb_symbﬁ
 *
ovsdb_symbﬁ_èbÀ_put
(
ovsdb_symbﬁ_èbÀ
 *,

249 c⁄° *
«me
,

250 c⁄° 
uuid
 *, 
boﬁ
 
u£d
);

251 
ovsdb_symbﬁ
 *
ovsdb_symbﬁ_èbÀ_ö£π
(
ovsdb_symbﬁ_èbÀ
 *,

252 c⁄° *
«me
);

258 *
	$ovsdb_tokí_∑r£
(c⁄° **, **
ouç
Ë
WARN_UNUSED_RESULT
;

259 
boﬁ
 
	`ovsdb_tokí_is_dñim
();

	@/home/lsch/mytest/openvswitch-1.9.0/lib/ovsdb-error.c

16 
	~<c⁄fig.h
>

18 
	~"ovsdb-îr‹.h
"

20 
	~<öây≥s.h
>

22 
	~"backåa˚.h
"

23 
	~"dy«mic-°rög.h
"

24 
	~"js⁄.h
"

25 
	~"utû.h
"

26 
	~"vlog.h
"

28 
VLOG_DEFINE_THIS_MODULE
(
ovsdb_îr‹
);

30 
	sovsdb_îr‹
 {

31 c⁄° *
	mèg
;

32 *
	mdëaûs
;

33 *
	msy¡ax
;

34 
	mî∫o_
;

37 
ovsdb_îr‹
 *

38 
	$ovsdb_îr‹_vÆi°
(c⁄° *
èg
, c⁄° *
dëaûs
, 
va_li°
 
¨gs
)

40 
ovsdb_îr‹
 *
îr‹
 = 
	`xmÆloc
( *error);

41 
îr‹
->
èg
 =Åag ?Åag : "ovsdbÉrror";

42 
îr‹
->
dëaûs
 = dëaû†? 
	`xva•rötf
(dëaûs, 
¨gs
Ë: 
NULL
;

43 
îr‹
->
sy¡ax
 = 
NULL
;

44 
îr‹
->
î∫o_
 = 0;

45  
îr‹
;

46 
	}
}

48 
ovsdb_îr‹
 *

49 
	$ovsdb_îr‹
(c⁄° *
èg
, c⁄° *
dëaûs
, ...)

51 
ovsdb_îr‹
 *
îr‹
;

52 
va_li°
 
¨gs
;

54 
	`va_°¨t
(
¨gs
, 
dëaûs
);

55 
îr‹
 = 
	`ovsdb_îr‹_vÆi°
(
èg
, 
dëaûs
, 
¨gs
);

56 
	`va_íd
(
¨gs
);

58  
îr‹
;

59 
	}
}

61 
ovsdb_îr‹
 *

62 
	$ovsdb_io_îr‹
(
î∫o_
, c⁄° *
dëaûs
, ...)

64 
ovsdb_îr‹
 *
îr‹
;

65 
va_li°
 
¨gs
;

67 
	`va_°¨t
(
¨gs
, 
dëaûs
);

68 
îr‹
 = 
	`ovsdb_îr‹_vÆi°
("I/OÉº‹", 
dëaûs
, 
¨gs
);

69 
	`va_íd
(
¨gs
);

71 
îr‹
->
î∫o_
 =Érrno_;

73  
îr‹
;

74 
	}
}

76 
ovsdb_îr‹
 *

77 
	$ovsdb_sy¡ax_îr‹
(c⁄° 
js⁄
 *js⁄, c⁄° *
èg
,

78 c⁄° *
dëaûs
, ...)

80 
ovsdb_îr‹
 *
îr‹
;

81 
va_li°
 
¨gs
;

83 
	`va_°¨t
(
¨gs
, 
dëaûs
);

84 
îr‹
 = 
	`ovsdb_îr‹_vÆi°
(
èg
 ?Åag : "sy¡axÉº‹", 
dëaûs
, 
¨gs
);

85 
	`va_íd
(
¨gs
);

87 i‡(
js⁄
) {

89 
îr‹
->
sy¡ax
 = 
	`js⁄_to_°rög
(
js⁄
, 
JSSF_SORT
);

92  
îr‹
;

93 
	}
}

95 
ovsdb_îr‹
 *

96 
	$ovsdb_wøp_îr‹
(
ovsdb_îr‹
 *
îr‹
, c⁄° *
dëaûs
, ...)

98 
va_li°
 
¨gs
;

99 *
msg
;

101 
	`va_°¨t
(
¨gs
, 
dëaûs
);

102 
msg
 = 
	`xva•rötf
(
dëaûs
, 
¨gs
);

103 
	`va_íd
(
¨gs
);

105 i‡(
îr‹
->
dëaûs
) {

106 *
√w
 = 
	`xa•rötf
("%s: %s", 
msg
, 
îr‹
->
dëaûs
);

107 
	`‰ì
(
îr‹
->
dëaûs
);

108 
îr‹
->
dëaûs
 = 
√w
;

109 
	`‰ì
(
msg
);

111 
îr‹
->
dëaûs
 = 
msg
;

114  
îr‹
;

115 
	}
}

124 
ovsdb_îr‹
 *

125 
	$ovsdb_öã∫Æ_îr‹
(
ovsdb_îr‹
 *
ö√r_îr‹
,

126 c⁄° *
fûe
, 
löe
, c⁄° *
dëaûs
, ...)

128 
ds
 d†
DS_EMPTY_INITIALIZER
;

129 
backåa˚
 backtrace;

130 
ovsdb_îr‹
 *
îr‹
;

131 
va_li°
 
¨gs
;

133 
	`ds_put_f‹m©
(&
ds
, "%s:%d:", 
fûe
, 
löe
);

135 i‡(
dëaûs
) {

136 
	`ds_put_ch¨
(&
ds
, ' ');

137 
	`va_°¨t
(
¨gs
, 
dëaûs
);

138 
	`ds_put_f‹m©_vÆi°
(&
ds
, 
dëaûs
, 
¨gs
);

139 
	`va_íd
(
¨gs
);

142 
	`backåa˚_ˇ±uª
(&
backåa˚
);

143 i‡(
backåa˚
.
n_‰ames
) {

144 
i
;

146 
	`ds_put_c°r
(&
ds
, " (backtrace:");

147 
i
 = 0; i < 
backåa˚
.
n_‰ames
; i++) {

148 
	`ds_put_f‹m©
(&
ds
, " 0x%08"
PRIxPTR
, 
backåa˚
.
‰ames
[
i
]);

150 
	`ds_put_ch¨
(&
ds
, ')');

153 
	`ds_put_f‹m©
(&
ds
, " (%†%s)", 
¥ogøm_«me
, 
VERSION
);

155 i‡(
ö√r_îr‹
) {

156 *
s
 = 
	`ovsdb_îr‹_to_°rög
(
ö√r_îr‹
);

157 
	`ds_put_f‹m©
(&
ds
, " (gíî©ed from: %s)", 
s
);

158 
	`‰ì
(
s
);

160 
	`ovsdb_îr‹_de°roy
(
ö√r_îr‹
);

163 
îr‹
 = 
	`ovsdb_îr‹
("öã∫ÆÉº‹", "%s", 
	`ds_c°r
(&
ds
));

165 
	`ds_de°roy
(&
ds
);

167  
îr‹
;

168 
	}
}

171 
	$ovsdb_îr‹_de°roy
(
ovsdb_îr‹
 *
îr‹
)

173 i‡(
îr‹
) {

174 
	`‰ì
(
îr‹
->
dëaûs
);

175 
	`‰ì
(
îr‹
->
sy¡ax
);

176 
	`‰ì
(
îr‹
);

178 
	}
}

180 
ovsdb_îr‹
 *

181 
	$ovsdb_îr‹_˛⁄e
(c⁄° 
ovsdb_îr‹
 *
ﬁd
)

183 i‡(
ﬁd
) {

184 
ovsdb_îr‹
 *
√w
 = 
	`xmÆloc
( *new);

185 
√w
->
èg
 = 
ﬁd
->tag;

186 
√w
->
dëaûs
 = 
ﬁd
->dëaû†? 
	`x°rdup
(ﬁd->dëaûsË: 
NULL
;

187 
√w
->
sy¡ax
 = 
ﬁd
->sy¡ax ? 
	`x°rdup
(ﬁd->sy¡axË: 
NULL
;

188 
√w
->
î∫o_
 = 
ﬁd
->errno_;

189  
√w
;

191  
NULL
;

193 
	}
}

195 
js⁄
 *

196 
	$ovsdb_îr‹_to_js⁄
(c⁄° 
ovsdb_îr‹
 *
îr‹
)

198 
js⁄
 *js⁄ = 
	`js⁄_obje˘_¸óã
();

199 
	`js⁄_obje˘_put_°rög
(
js⁄
, "îr‹", 
îr‹
->
èg
);

200 i‡(
îr‹
->
dëaûs
) {

201 
	`js⁄_obje˘_put_°rög
(
js⁄
, "dëaûs", 
îr‹
->
dëaûs
);

203 i‡(
îr‹
->
sy¡ax
) {

204 
	`js⁄_obje˘_put_°rög
(
js⁄
, "sy¡ax", 
îr‹
->
sy¡ax
);

206 i‡(
îr‹
->
î∫o_
) {

207 
	`js⁄_obje˘_put_°rög
(
js⁄
, "io-error",

208 
	`ovs_ªtvÆ_to_°rög
(
îr‹
->
î∫o_
));

210  
js⁄
;

211 
	}
}

214 
	$ovsdb_îr‹_to_°rög
(c⁄° 
ovsdb_îr‹
 *
îr‹
)

216 
ds
 d†
DS_EMPTY_INITIALIZER
;

217 i‡(
îr‹
->
sy¡ax
) {

218 
	`ds_put_f‹m©
(&
ds
, "sy¡ax \"%s\": ", 
îr‹
->
sy¡ax
);

220 
	`ds_put_c°r
(&
ds
, 
îr‹
->
èg
);

221 i‡(
îr‹
->
dëaûs
) {

222 
	`ds_put_f‹m©
(&
ds
, ": %s", 
îr‹
->
dëaûs
);

224 i‡(
îr‹
->
î∫o_
) {

225 
	`ds_put_f‹m©
(&
ds
, " (%s)", 
	`ovs_ªtvÆ_to_°rög
(
îr‹
->
î∫o_
));

227  
	`ds_°ól_c°r
(&
ds
);

228 
	}
}

231 
	$ovsdb_îr‹_gë_èg
(c⁄° 
ovsdb_îr‹
 *
îr‹
)

233  
îr‹
->
èg
;

234 
	}
}

240 
	$ovsdb_îr‹_as£π
(
ovsdb_îr‹
 *
îr‹
)

242 i‡(
îr‹
) {

243 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 1);

244 *
s
 = 
	`ovsdb_îr‹_to_°rög
(
îr‹
);

245 
	`VLOG_ERR_RL
(&
æ
, "u√x≥˘ed ovsdbÉº‹: %s", 
s
);

246 
	`‰ì
(
s
);

247 
	`ovsdb_îr‹_de°roy
(
îr‹
);

249 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/ovsdb-error.h

16 #i‚de‡
OVSDB_ERROR_H


17 
	#OVSDB_ERROR_H
 1

	)

19 
	~"compûî.h
"

21 
	gjs⁄
;

23 
ovsdb_îr‹
 *
	$ovsdb_îr‹
(c⁄° *
èg
, c⁄° *
dëaûs
, ...)

24 
	$PRINTF_FORMAT
(2, 3)

25 
WARN_UNUSED_RESULT
;

26 
ovsdb_îr‹
 *
	$ovsdb_io_îr‹
(
îr‹
, c⁄° *
dëaûs
, ...)

27 
	$PRINTF_FORMAT
(2, 3)

28 
WARN_UNUSED_RESULT
;

29 
ovsdb_îr‹
 *
	$ovsdb_sy¡ax_îr‹
(c⁄° 
js⁄
 *, c⁄° *
èg
,

30 c⁄° *
dëaûs
, ...)

31 
	$PRINTF_FORMAT
(3, 4)

32 
WARN_UNUSED_RESULT
;

34 
ovsdb_îr‹
 *
	$ovsdb_wøp_îr‹
(
ovsdb_îr‹
 *
îr‹
,

35 c⁄° *
dëaûs
, ...)

36 
	`PRINTF_FORMAT
(2, 3);

38 
ovsdb_îr‹
 *
	$ovsdb_öã∫Æ_îr‹
(
ovsdb_îr‹
 *
îr‹
,

39 c⁄° *
fûe
, 
löe
,

40 c⁄° *
dëaûs
, ...)

41 
	$PRINTF_FORMAT
(4, 5)

42 
WARN_UNUSED_RESULT
;

47 
	#OVSDB_BUG
(
MSG
) \

48 
	`ovsdb_öã∫Æ_îr‹
(
NULL
, 
__FILE__
, 
__LINE__
, "%s", 
MSG
)

	)

55 
	#OVSDB_WRAP_BUG
(
MSG
, 
ERROR
) \

56 
	`ovsdb_öã∫Æ_îr‹
(
ERROR
, 
__FILE__
, 
__LINE__
, "%s", 
MSG
)

	)

58 
	`ovsdb_îr‹_de°roy
(
ovsdb_îr‹
 *);

59 
ovsdb_îr‹
 *
	$ovsdb_îr‹_˛⁄e
(c⁄° 
ovsdb_îr‹
 *)

60 
WARN_UNUSED_RESULT
;

62 *
	`ovsdb_îr‹_to_°rög
(c⁄° 
ovsdb_îr‹
 *);

63 
js⁄
 *
	`ovsdb_îr‹_to_js⁄
(c⁄° 
ovsdb_îr‹
 *);

65 c⁄° *
	`ovsdb_îr‹_gë_èg
(c⁄° 
ovsdb_îr‹
 *);

67 
	`ovsdb_îr‹_as£π
(
ovsdb_îr‹
 *);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/ovsdb-idl-provider.h

16 #i‚de‡
OVSDB_IDL_PROVIDER_H


17 
	#OVSDB_IDL_PROVIDER_H
 1

	)

19 
	~"hm≠.h
"

20 
	~"li°.h
"

21 
	~"ovsdb-idl.h
"

22 
	~"ovsdb-ty≥s.h
"

23 
	~"shash.h
"

24 
	~"uuid.h
"

26 
	sovsdb_idl_row
 {

27 
hm≠_node
 
	mhm≠_node
;

28 
uuid
 
	muuid
;

29 
li°
 
	m§c_¨cs
;

30 
li°
 
	md°_¨cs
;

31 
ovsdb_idl_èbÀ
 *
	mèbÀ
;

32 
ovsdb_d©um
 *
	mﬁd
;

35 
ovsdb_d©um
 *
	m√w
;

36 *
	m¥îeqs
;

37 *
	mwrôãn
;

38 
hm≠_node
 
	mtxn_node
;

41 
	sovsdb_idl_cﬁumn
 {

42 *
	m«me
;

43 
ovsdb_ty≥
 
	mty≥
;

44 
boﬁ
 
	mmuèbÀ
;

45 (*
	m∑r£
)(
	movsdb_idl_row
 *, c⁄° 
	movsdb_d©um
 *);

46 (*
	mu≈¨£
)(
	movsdb_idl_row
 *);

49 
	sovsdb_idl_èbÀ_˛ass
 {

50 *
	m«me
;

51 
boﬁ
 
	mis_roŸ
;

52 c⁄° 
ovsdb_idl_cﬁumn
 *
	mcﬁumns
;

53 
size_t
 
	mn_cﬁumns
;

54 
size_t
 
	mÆloˇti⁄_size
;

55 (*
	mrow_öô
)(
	movsdb_idl_row
 *);

58 
	sovsdb_idl_èbÀ
 {

59 c⁄° 
ovsdb_idl_èbÀ_˛ass
 *
	m˛ass
;

60 *
	mmodes
;

61 
boﬁ
 
	m√ed_èbÀ
;

62 
shash
 
	mcﬁumns
;

63 
hm≠
 
	mrows
;

64 
ovsdb_idl
 *
	midl
;

67 
	sovsdb_idl_˛ass
 {

68 c⁄° *
	md©aba£
;

69 c⁄° 
ovsdb_idl_èbÀ_˛ass
 *
	mèbÀs
;

70 
size_t
 
	mn_èbÀs
;

73 
ovsdb_idl_row
 *
ovsdb_idl_gë_row_¨c
(

74 
ovsdb_idl_row
 *
§c
,

75 
ovsdb_idl_èbÀ_˛ass
 *
d°_èbÀ
,

76 c⁄° 
uuid
 *
d°_uuid
);

78 
ovsdb_idl_txn_vîify
(c⁄° 
ovsdb_idl_row
 *,

79 c⁄° 
ovsdb_idl_cﬁumn
 *);

81 
ovsdb_idl_txn
 *
ovsdb_idl_txn_gë
(c⁄° 
ovsdb_idl_row
 *);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/ovsdb-idl.c

16 
	~<c⁄fig.h
>

18 
	~"ovsdb-idl.h
"

20 
	~<as£π.h
>

21 
	~<î∫o.h
>

22 
	~<öây≥s.h
>

23 
	~<limôs.h
>

24 
	~<°dlib.h
>

26 
	~"bôm≠.h
"

27 
	~"dy«mic-°rög.h
"

28 
	~"Áèl-sig«l.h
"

29 
	~"js⁄.h
"

30 
	~"js⁄Ωc.h
"

31 
	~"ovsdb-d©a.h
"

32 
	~"ovsdb-îr‹.h
"

33 
	~"ovsdb-idl-¥ovidî.h
"

34 
	~"pﬁl-lo›.h
"

35 
	~"shash.h
"

36 
	~"utû.h
"

37 
	~"vlog.h
"

39 
VLOG_DEFINE_THIS_MODULE
(
ovsdb_idl
);

58 
	sovsdb_idl_¨c
 {

59 
li°
 
	m§c_node
;

60 
li°
 
	md°_node
;

61 
ovsdb_idl_row
 *
	m§c
;

62 
ovsdb_idl_row
 *
	md°
;

65 
	sovsdb_idl
 {

66 c⁄° 
ovsdb_idl_˛ass
 *
	m˛ass
;

67 
js⁄Ωc_£ssi⁄
 *
	m£ssi⁄
;

68 
shash
 
	mèbÀ_by_«me
;

69 
ovsdb_idl_èbÀ
 *
	mèbÀs
;

70 
js⁄
 *
	mm⁄ô‹_ªque°_id
;

71 
	mœ°_m⁄ô‹_ªque°_£qno
;

72 
	mch™ge_£qno
;

73 
boﬁ
 
	mvîify_wrôe_⁄ly
;

76 *
	mlock_«me
;

77 
boﬁ
 
	mhas_lock
;

78 
boﬁ
 
	mis_lock_c⁄ãnded
;

79 
js⁄
 *
	mlock_ªque°_id
;

82 
ovsdb_idl_txn
 *
	mtxn
;

83 
hm≠
 
	mout°™dög_txns
;

86 
	sovsdb_idl_txn
 {

87 
hm≠_node
 
	mhm≠_node
;

88 
js⁄
 *
	mªque°_id
;

89 
ovsdb_idl
 *
	midl
;

90 
hm≠
 
	mtxn_rows
;

91 
ovsdb_idl_txn_°©us
 
	m°©us
;

92 *
	mîr‹
;

93 
boﬁ
 
	mdry_run
;

94 
ds
 
	mcommít
;

95 
	mcommô_£qno
;

98 c⁄° *
	möc_èbÀ
;

99 c⁄° *
	möc_cﬁumn
;

100 
uuid
 
	möc_row
;

101 
	möc_ödex
;

102 
öt64_t
 
	möc_√w_vÆue
;

105 
hm≠
 
	mö£πed_rows
;

108 
	sovsdb_idl_txn_ö£π
 {

109 
hm≠_node
 
	mhm≠_node
;

110 
uuid
 
	mdummy
;

111 
	m›_ödex
;

112 
uuid
 
	mªÆ
;

115 
vlog_øã_limô
 
	gsy¡ax_æ
 = 
VLOG_RATE_LIMIT_INIT
(1, 5);

116 
vlog_øã_limô
 
	g£m™tic_æ
 = 
VLOG_RATE_LIMIT_INIT
(1, 5);

118 
ovsdb_idl_˛ór
(
ovsdb_idl
 *);

119 
ovsdb_idl_£nd_m⁄ô‹_ªque°
(
ovsdb_idl
 *);

120 
ovsdb_idl_∑r£_upd©e
(
ovsdb_idl
 *, c⁄° 
js⁄
 *);

121 
ovsdb_îr‹
 *
ovsdb_idl_∑r£_upd©e__
(
ovsdb_idl
 *,

122 c⁄° 
js⁄
 *);

123 
boﬁ
 
ovsdb_idl_¥o˚ss_upd©e
(
ovsdb_idl_èbÀ
 *,

124 c⁄° 
uuid
 *,

125 c⁄° 
js⁄
 *
ﬁd
,

126 c⁄° 
js⁄
 *
√w
);

127 
ovsdb_idl_ö£π_row
(
ovsdb_idl_row
 *, c⁄° 
js⁄
 *);

128 
ovsdb_idl_dñëe_row
(
ovsdb_idl_row
 *);

129 
boﬁ
 
ovsdb_idl_modify_row
(
ovsdb_idl_row
 *, c⁄° 
js⁄
 *);

131 
boﬁ
 
ovsdb_idl_row_is_‹ph™
(c⁄° 
ovsdb_idl_row
 *);

132 
ovsdb_idl_row
 *
ovsdb_idl_row_¸óã__
(

133 c⁄° 
ovsdb_idl_èbÀ_˛ass
 *);

134 
ovsdb_idl_row
 *
ovsdb_idl_row_¸óã
(
ovsdb_idl_èbÀ
 *,

135 c⁄° 
uuid
 *);

136 
ovsdb_idl_row_de°roy
(
ovsdb_idl_row
 *);

138 
ovsdb_idl_row_∑r£
(
ovsdb_idl_row
 *);

139 
ovsdb_idl_row_u≈¨£
(
ovsdb_idl_row
 *);

140 
ovsdb_idl_row_˛ór_ﬁd
(
ovsdb_idl_row
 *);

141 
ovsdb_idl_row_˛ór_√w
(
ovsdb_idl_row
 *);

143 
ovsdb_idl_txn_ab‹t_Æl
(
ovsdb_idl
 *);

144 
boﬁ
 
ovsdb_idl_txn_¥o˚ss_ª∂y
(
ovsdb_idl
 *,

145 c⁄° 
js⁄Ωc_msg
 *
msg
);

147 
ovsdb_idl_£nd_lock_ªque°
(
ovsdb_idl
 *);

148 
ovsdb_idl_£nd_u∆ock_ªque°
(
ovsdb_idl
 *);

149 
ovsdb_idl_∑r£_lock_ª∂y
(
ovsdb_idl
 *,

150 c⁄° 
js⁄
 *);

151 
ovsdb_idl_∑r£_lock_nŸify
(
ovsdb_idl
 *,

152 c⁄° 
js⁄
 *
∑øms
,

153 
boﬁ
 
√w_has_lock
);

170 
ovsdb_idl
 *

171 
	$ovsdb_idl_¸óã
(c⁄° *
ªmŸe
, c⁄° 
ovsdb_idl_˛ass
 *
˛ass
,

172 
boﬁ
 
m⁄ô‹_evîythög_by_deÁu…
)

174 
ovsdb_idl
 *
idl
;

175 
uöt8_t
 
deÁu…_mode
;

176 
size_t
 
i
;

178 
deÁu…_mode
 = (
m⁄ô‹_evîythög_by_deÁu…


179 ? 
OVSDB_IDL_MONITOR
 | 
OVSDB_IDL_ALERT


182 
idl
 = 
	`xzÆloc
( *idl);

183 
idl
->
˛ass
 = class;

184 
idl
->
£ssi⁄
 = 
	`js⁄Ωc_£ssi⁄_›í
(
ªmŸe
);

185 
	`shash_öô
(&
idl
->
èbÀ_by_«me
);

186 
idl
->
èbÀs
 = 
	`xmÆloc
(
˛ass
->
n_èbÀs
 *  *idl->tables);

187 
i
 = 0; i < 
˛ass
->
n_èbÀs
; i++) {

188 c⁄° 
ovsdb_idl_èbÀ_˛ass
 *
tc
 = &
˛ass
->
èbÀs
[
i
];

189 
ovsdb_idl_èbÀ
 *
èbÀ
 = &
idl
->
èbÀs
[
i
];

190 
size_t
 
j
;

192 
	`shash_add_as£π
(&
idl
->
èbÀ_by_«me
, 
tc
->
«me
, 
èbÀ
);

193 
èbÀ
->
˛ass
 = 
tc
;

194 
èbÀ
->
modes
 = 
	`xmÆloc
(
tc
->
n_cﬁumns
);

195 
	`mem£t
(
èbÀ
->
modes
, 
deÁu…_mode
, 
tc
->
n_cﬁumns
);

196 
èbÀ
->
√ed_èbÀ
 = 
Ál£
;

197 
	`shash_öô
(&
èbÀ
->
cﬁumns
);

198 
j
 = 0; j < 
tc
->
n_cﬁumns
; j++) {

199 c⁄° 
ovsdb_idl_cﬁumn
 *
cﬁumn
 = &
tc
->
cﬁumns
[
j
];

201 
	`shash_add_as£π
(&
èbÀ
->
cﬁumns
, 
cﬁumn
->
«me
, column);

203 
	`hm≠_öô
(&
èbÀ
->
rows
);

204 
èbÀ
->
idl
 = idl;

206 
idl
->
œ°_m⁄ô‹_ªque°_£qno
 = 
UINT_MAX
;

207 
	`hm≠_öô
(&
idl
->
out°™dög_txns
);

209  
idl
;

210 
	}
}

214 
	$ovsdb_idl_de°roy
(
ovsdb_idl
 *
idl
)

216 i‡(
idl
) {

217 
size_t
 
i
;

219 
	`as£π
(!
idl
->
txn
);

220 
	`ovsdb_idl_˛ór
(
idl
);

221 
	`js⁄Ωc_£ssi⁄_˛o£
(
idl
->
£ssi⁄
);

223 
i
 = 0; i < 
idl
->
˛ass
->
n_èbÀs
; i++) {

224 
ovsdb_idl_èbÀ
 *
èbÀ
 = &
idl
->
èbÀs
[
i
];

225 
	`shash_de°roy
(&
èbÀ
->
cﬁumns
);

226 
	`hm≠_de°roy
(&
èbÀ
->
rows
);

227 
	`‰ì
(
èbÀ
->
modes
);

229 
	`shash_de°roy
(&
idl
->
èbÀ_by_«me
);

230 
	`‰ì
(
idl
->
èbÀs
);

231 
	`js⁄_de°roy
(
idl
->
m⁄ô‹_ªque°_id
);

232 
	`‰ì
(
idl
->
lock_«me
);

233 
	`js⁄_de°roy
(
idl
->
lock_ªque°_id
);

234 
	`hm≠_de°roy
(&
idl
->
out°™dög_txns
);

235 
	`‰ì
(
idl
);

237 
	}
}

240 
	$ovsdb_idl_˛ór
(
ovsdb_idl
 *
idl
)

242 
boﬁ
 
ch™ged
 = 
Ál£
;

243 
size_t
 
i
;

245 
i
 = 0; i < 
idl
->
˛ass
->
n_èbÀs
; i++) {

246 
ovsdb_idl_èbÀ
 *
èbÀ
 = &
idl
->
èbÀs
[
i
];

247 
ovsdb_idl_row
 *
row
, *
√xt_row
;

249 i‡(
	`hm≠_is_em±y
(&
èbÀ
->
rows
)) {

253 
ch™ged
 = 
åue
;

254 
	`HMAP_FOR_EACH_SAFE
 (
row
, 
√xt_row
, 
hm≠_node
, &
èbÀ
->
rows
) {

255 
ovsdb_idl_¨c
 *
¨c
, *
√xt_¨c
;

257 i‡(!
	`ovsdb_idl_row_is_‹ph™
(
row
)) {

258 
	`ovsdb_idl_row_u≈¨£
(
row
);

260 
	`LIST_FOR_EACH_SAFE
 (
¨c
, 
√xt_¨c
, 
§c_node
, &
row
->
§c_¨cs
) {

261 
	`‰ì
(
¨c
);

266 
	`ovsdb_idl_row_de°roy
(
row
);

270 i‡(
ch™ged
) {

271 
idl
->
ch™ge_£qno
++;

273 
	}
}

279 
	$ovsdb_idl_run
(
ovsdb_idl
 *
idl
)

281 
i
;

283 
	`as£π
(!
idl
->
txn
);

284 
	`js⁄Ωc_£ssi⁄_run
(
idl
->
£ssi⁄
);

285 
i
 = 0; 
	`js⁄Ωc_£ssi⁄_is_c⁄√˘ed
(
idl
->
£ssi⁄
) && i < 50; i++) {

286 
js⁄Ωc_msg
 *
msg
;

287 
£qno
;

289 
£qno
 = 
	`js⁄Ωc_£ssi⁄_gë_£qno
(
idl
->
£ssi⁄
);

290 i‡(
idl
->
œ°_m⁄ô‹_ªque°_£qno
 !
£qno
) {

291 
idl
->
œ°_m⁄ô‹_ªque°_£qno
 = 
£qno
;

292 
	`ovsdb_idl_txn_ab‹t_Æl
(
idl
);

293 
	`ovsdb_idl_£nd_m⁄ô‹_ªque°
(
idl
);

294 i‡(
idl
->
lock_«me
) {

295 
	`ovsdb_idl_£nd_lock_ªque°
(
idl
);

300 
msg
 = 
	`js⁄Ωc_£ssi⁄_ªcv
(
idl
->
£ssi⁄
);

301 i‡(!
msg
) {

305 i‡(
msg
->
ty≥
 =
JSONRPC_NOTIFY


306 && !
	`°rcmp
(
msg
->
mëhod
, "update")

307 && 
msg
->
∑øms
->
ty≥
 =
JSON_ARRAY


308 && 
msg
->
∑øms
->
u
.
¨øy
.
n
 == 2

309 && 
msg
->
∑øms
->
u
.
¨øy
.
ñems
[0]->
ty≥
 =
JSON_NULL
) {

311 
	`ovsdb_idl_∑r£_upd©e
(
idl
, 
msg
->
∑øms
->
u
.
¨øy
.
ñems
[1]);

312 } i‡(
msg
->
ty≥
 =
JSONRPC_REPLY


313 && 
idl
->
m⁄ô‹_ªque°_id


314 && 
	`js⁄_equÆ
(
idl
->
m⁄ô‹_ªque°_id
, 
msg
->
id
)) {

316 
idl
->
ch™ge_£qno
++;

317 
	`js⁄_de°roy
(
idl
->
m⁄ô‹_ªque°_id
);

318 
idl
->
m⁄ô‹_ªque°_id
 = 
NULL
;

319 
	`ovsdb_idl_˛ór
(
idl
);

320 
	`ovsdb_idl_∑r£_upd©e
(
idl
, 
msg
->
ªsu…
);

321 } i‡(
msg
->
ty≥
 =
JSONRPC_REPLY


322 && 
idl
->
lock_ªque°_id


323 && 
	`js⁄_equÆ
(
idl
->
lock_ªque°_id
, 
msg
->
id
)) {

325 
	`ovsdb_idl_∑r£_lock_ª∂y
(
idl
, 
msg
->
ªsu…
);

326 } i‡(
msg
->
ty≥
 =
JSONRPC_NOTIFY


327 && !
	`°rcmp
(
msg
->
mëhod
, "locked")) {

329 
	`ovsdb_idl_∑r£_lock_nŸify
(
idl
, 
msg
->
∑øms
, 
åue
);

330 } i‡(
msg
->
ty≥
 =
JSONRPC_NOTIFY


331 && !
	`°rcmp
(
msg
->
mëhod
, "stolen")) {

333 
	`ovsdb_idl_∑r£_lock_nŸify
(
idl
, 
msg
->
∑øms
, 
Ál£
);

334 } i‡(
msg
->
ty≥
 =
JSONRPC_REPLY
 && msg->
id
->ty≥ =
JSON_STRING


335 && !
	`°rcmp
(
msg
->
id
->
u
.
°rög
, "echo")) {

337 } i‡((
msg
->
ty≥
 =
JSONRPC_ERROR


338 || 
msg
->
ty≥
 =
JSONRPC_REPLY
)

339 && 
	`ovsdb_idl_txn_¥o˚ss_ª∂y
(
idl
, 
msg
)) {

345 
	`VLOG_DBG
("%s:Ñeceived unexpected %s message",

346 
	`js⁄Ωc_£ssi⁄_gë_«me
(
idl
->
£ssi⁄
),

347 
	`js⁄Ωc_msg_ty≥_to_°rög
(
msg
->
ty≥
));

349 
	`js⁄Ωc_msg_de°roy
(
msg
);

351 
	}
}

356 
	$ovsdb_idl_waô
(
ovsdb_idl
 *
idl
)

358 
	`js⁄Ωc_£ssi⁄_waô
(
idl
->
£ssi⁄
);

359 
	`js⁄Ωc_£ssi⁄_ªcv_waô
(
idl
->
£ssi⁄
);

360 
	}
}

380 
	$ovsdb_idl_gë_£qno
(c⁄° 
ovsdb_idl
 *
idl
)

382  
idl
->
ch™ge_£qno
;

383 
	}
}

393 
boﬁ


394 
	$ovsdb_idl_has_evî_c⁄√˘ed
(c⁄° 
ovsdb_idl
 *
idl
)

396  
	`ovsdb_idl_gë_£qno
(
idl
) != 0;

397 
	}
}

402 
	$ovsdb_idl_f‹˚_ªc⁄√˘
(
ovsdb_idl
 *
idl
)

404 
	`js⁄Ωc_£ssi⁄_f‹˚_ªc⁄√˘
(
idl
->
£ssi⁄
);

405 
	}
}

412 
	$ovsdb_idl_vîify_wrôe_⁄ly
(
ovsdb_idl
 *
idl
)

414 
idl
->
vîify_wrôe_⁄ly
 = 
åue
;

415 
	}
}

418 
	$ovsdb_idl_gë_mode
(
ovsdb_idl
 *
idl
,

419 c⁄° 
ovsdb_idl_cﬁumn
 *
cﬁumn
)

421 
size_t
 
i
;

423 
	`as£π
(!
idl
->
ch™ge_£qno
);

425 
i
 = 0; i < 
idl
->
˛ass
->
n_èbÀs
; i++) {

426 c⁄° 
ovsdb_idl_èbÀ
 *
èbÀ
 = &
idl
->
èbÀs
[
i
];

427 c⁄° 
ovsdb_idl_èbÀ_˛ass
 *
tc
 = 
èbÀ
->
˛ass
;

429 i‡(
cﬁumn
 >
tc
->
cﬁumns
 && cﬁum¿< &tc->cﬁumns[tc->
n_cﬁumns
]) {

430  &
èbÀ
->
modes
[
cﬁumn
 - 
tc
->
cﬁumns
];

434 
	`NOT_REACHED
();

435 
	}
}

438 
	$add_ªf_èbÀ
(
ovsdb_idl
 *
idl
, c⁄° 
ovsdb_ba£_ty≥
 *
ba£
)

440 i‡(
ba£
->
ty≥
 =
OVSDB_TYPE_UUID
 && ba£->
u
.
uuid
.
ªfTabÀName
) {

441 
ovsdb_idl_èbÀ
 *
èbÀ
;

443 
èbÀ
 = 
	`shash_föd_d©a
(&
idl
->
èbÀ_by_«me
,

444 
ba£
->
u
.
uuid
.
ªfTabÀName
);

445 i‡(
èbÀ
) {

446 
èbÀ
->
√ed_èbÀ
 = 
åue
;

448 
	`VLOG_WARN
("%s IDL class missingÑeferencedÅable %s",

449 
idl
->
˛ass
->
d©aba£
, 
ba£
->
u
.
uuid
.
ªfTabÀName
);

452 
	}
}

464 
	$ovsdb_idl_add_cﬁumn
(
ovsdb_idl
 *
idl
,

465 c⁄° 
ovsdb_idl_cﬁumn
 *
cﬁumn
)

467 *
	`ovsdb_idl_gë_mode
(
idl
, 
cﬁumn
Ë
OVSDB_IDL_MONITOR
 | 
OVSDB_IDL_ALERT
;

468 
	`add_ªf_èbÀ
(
idl
, &
cﬁumn
->
ty≥
.
key
);

469 
	`add_ªf_èbÀ
(
idl
, &
cﬁumn
->
ty≥
.
vÆue
);

470 
	}
}

484 
	$ovsdb_idl_add_èbÀ
(
ovsdb_idl
 *
idl
,

485 c⁄° 
ovsdb_idl_èbÀ_˛ass
 *
tc
)

487 
size_t
 
i
;

489 
i
 = 0; i < 
idl
->
˛ass
->
n_èbÀs
; i++) {

490 
ovsdb_idl_èbÀ
 *
èbÀ
 = &
idl
->
èbÀs
[
i
];

492 i‡(
èbÀ
->
˛ass
 =
tc
) {

493 
èbÀ
->
√ed_èbÀ
 = 
åue
;

498 
	`NOT_REACHED
();

499 
	}
}

507 
	$ovsdb_idl_omô_Æît
(
ovsdb_idl
 *
idl
,

508 c⁄° 
ovsdb_idl_cﬁumn
 *
cﬁumn
)

510 *
	`ovsdb_idl_gë_mode
(
idl
, 
cﬁumn
Ë&~
OVSDB_IDL_ALERT
;

511 
	}
}

520 
	$ovsdb_idl_omô
(
ovsdb_idl
 *
idl
, c⁄° 
ovsdb_idl_cﬁumn
 *
cﬁumn
)

522 *
	`ovsdb_idl_gë_mode
(
idl
, 
cﬁumn
) = 0;

523 
	}
}

526 
	$ovsdb_idl_£nd_m⁄ô‹_ªque°
(
ovsdb_idl
 *
idl
)

528 
js⁄
 *
m⁄ô‹_ªque°s
;

529 
js⁄Ωc_msg
 *
msg
;

530 
size_t
 
i
;

532 
m⁄ô‹_ªque°s
 = 
	`js⁄_obje˘_¸óã
();

533 
i
 = 0; i < 
idl
->
˛ass
->
n_èbÀs
; i++) {

534 c⁄° 
ovsdb_idl_èbÀ
 *
èbÀ
 = &
idl
->
èbÀs
[
i
];

535 c⁄° 
ovsdb_idl_èbÀ_˛ass
 *
tc
 = 
èbÀ
->
˛ass
;

536 
js⁄
 *
m⁄ô‹_ªque°
, *
cﬁumns
;

537 
size_t
 
j
;

539 
cﬁumns
 = 
èbÀ
->
√ed_èbÀ
 ? 
	`js⁄_¨øy_¸óã_em±y
(Ë: 
NULL
;

540 
j
 = 0; j < 
tc
->
n_cﬁumns
; j++) {

541 c⁄° 
ovsdb_idl_cﬁumn
 *
cﬁumn
 = &
tc
->
cﬁumns
[
j
];

542 i‡(
èbÀ
->
modes
[
j
] & 
OVSDB_IDL_MONITOR
) {

543 i‡(!
cﬁumns
) {

544 
cﬁumns
 = 
	`js⁄_¨øy_¸óã_em±y
();

546 
	`js⁄_¨øy_add
(
cﬁumns
, 
	`js⁄_°rög_¸óã
(
cﬁumn
->
«me
));

550 i‡(
cﬁumns
) {

551 
m⁄ô‹_ªque°
 = 
	`js⁄_obje˘_¸óã
();

552 
	`js⁄_obje˘_put
(
m⁄ô‹_ªque°
, "cﬁumns", 
cﬁumns
);

553 
	`js⁄_obje˘_put
(
m⁄ô‹_ªque°s
, 
tc
->
«me
, 
m⁄ô‹_ªque°
);

557 
	`js⁄_de°roy
(
idl
->
m⁄ô‹_ªque°_id
);

558 
msg
 = 
	`js⁄Ωc_¸óã_ªque°
(

560 
	`js⁄_¨øy_¸óã_3
(
	`js⁄_°rög_¸óã
(
idl
->
˛ass
->
d©aba£
),

561 
	`js⁄_nuŒ_¸óã
(), 
m⁄ô‹_ªque°s
),

562 &
idl
->
m⁄ô‹_ªque°_id
);

563 
	`js⁄Ωc_£ssi⁄_£nd
(
idl
->
£ssi⁄
, 
msg
);

564 
	}
}

567 
	$ovsdb_idl_∑r£_upd©e
(
ovsdb_idl
 *
idl
, c⁄° 
js⁄
 *
èbÀ_upd©es
)

569 
ovsdb_îr‹
 *
îr‹
 = 
	`ovsdb_idl_∑r£_upd©e__
(
idl
, 
èbÀ_upd©es
);

570 i‡(
îr‹
) {

571 i‡(!
	`VLOG_DROP_WARN
(&
sy¡ax_æ
)) {

572 *
s
 = 
	`ovsdb_îr‹_to_°rög
(
îr‹
);

573 
	`VLOG_WARN_RL
(&
sy¡ax_æ
, "%s", 
s
);

574 
	`‰ì
(
s
);

576 
	`ovsdb_îr‹_de°roy
(
îr‹
);

578 
	}
}

580 
ovsdb_îr‹
 *

581 
	$ovsdb_idl_∑r£_upd©e__
(
ovsdb_idl
 *
idl
,

582 c⁄° 
js⁄
 *
èbÀ_upd©es
)

584 c⁄° 
shash_node
 *
èbÀs_node
;

586 i‡(
èbÀ_upd©es
->
ty≥
 !
JSON_OBJECT
) {

587  
	`ovsdb_sy¡ax_îr‹
(
èbÀ_upd©es
, 
NULL
,

590 
	`SHASH_FOR_EACH
 (
èbÀs_node
, 
	`js⁄_obje˘
(
èbÀ_upd©es
)) {

591 c⁄° 
js⁄
 *
èbÀ_upd©e
 = 
èbÀs_node
->
d©a
;

592 c⁄° 
shash_node
 *
èbÀ_node
;

593 
ovsdb_idl_èbÀ
 *
èbÀ
;

595 
èbÀ
 = 
	`shash_föd_d©a
(&
idl
->
èbÀ_by_«me
, 
èbÀs_node
->
«me
);

596 i‡(!
èbÀ
) {

597  
	`ovsdb_sy¡ax_îr‹
(

598 
èbÀ_upd©es
, 
NULL
,

600 
èbÀs_node
->
«me
);

603 i‡(
èbÀ_upd©e
->
ty≥
 !
JSON_OBJECT
) {

604  
	`ovsdb_sy¡ax_îr‹
(
èbÀ_upd©e
, 
NULL
,

606 "nŸá¿obje˘", 
èbÀ
->
˛ass
->
«me
);

608 
	`SHASH_FOR_EACH
 (
èbÀ_node
, 
	`js⁄_obje˘
(
èbÀ_upd©e
)) {

609 c⁄° 
js⁄
 *
row_upd©e
 = 
èbÀ_node
->
d©a
;

610 c⁄° 
js⁄
 *
ﬁd_js⁄
, *
√w_js⁄
;

611 
uuid
 uuid;

613 i‡(!
	`uuid_‰om_°rög
(&
uuid
, 
èbÀ_node
->
«me
)) {

614  
	`ovsdb_sy¡ax_îr‹
(
èbÀ_upd©e
, 
NULL
,

618 
èbÀ
->
˛ass
->
«me
,

619 
èbÀ_node
->
«me
);

621 i‡(
row_upd©e
->
ty≥
 !
JSON_OBJECT
) {

622  
	`ovsdb_sy¡ax_îr‹
(
row_upd©e
, 
NULL
,

626 
èbÀ
->
˛ass
->
«me
,

627 
èbÀ_node
->
«me
);

630 
ﬁd_js⁄
 = 
	`shash_föd_d©a
(
	`js⁄_obje˘
(
row_upd©e
), "old");

631 
√w_js⁄
 = 
	`shash_föd_d©a
(
	`js⁄_obje˘
(
row_upd©e
), "new");

632 i‡(
ﬁd_js⁄
 && old_js⁄->
ty≥
 !
JSON_OBJECT
) {

633  
	`ovsdb_sy¡ax_îr‹
(
ﬁd_js⁄
, 
NULL
,

635 } i‡(
√w_js⁄
 &&Çew_js⁄->
ty≥
 !
JSON_OBJECT
) {

636  
	`ovsdb_sy¡ax_îr‹
(
√w_js⁄
, 
NULL
,

638 } i‡((
ﬁd_js⁄
 !
NULL
Ë+ (
√w_js⁄
 != NULL)

639 !
	`shash_cou¡
(
	`js⁄_obje˘
(
row_upd©e
))) {

640  
	`ovsdb_sy¡ax_îr‹
(
row_upd©e
, 
NULL
,

643 } i‡(!
ﬁd_js⁄
 && !
√w_js⁄
) {

644  
	`ovsdb_sy¡ax_îr‹
(
row_upd©e
, 
NULL
,

649 i‡(
	`ovsdb_idl_¥o˚ss_upd©e
(
èbÀ
, &
uuid
, 
ﬁd_js⁄
, 
√w_js⁄
)) {

650 
idl
->
ch™ge_£qno
++;

655  
NULL
;

656 
	}
}

658 
ovsdb_idl_row
 *

659 
	$ovsdb_idl_gë_row
(
ovsdb_idl_èbÀ
 *
èbÀ
, c⁄° 
uuid
 *uuid)

661 
ovsdb_idl_row
 *
row
;

663 
	`HMAP_FOR_EACH_WITH_HASH
 (
row
, 
hm≠_node
, 
	`uuid_hash
(
uuid
), &
èbÀ
->
rows
) {

664 i‡(
	`uuid_equÆs
(&
row
->
uuid
, uuid)) {

665  
row
;

668  
NULL
;

669 
	}
}

673 
boﬁ


674 
	$ovsdb_idl_¥o˚ss_upd©e
(
ovsdb_idl_èbÀ
 *
èbÀ
,

675 c⁄° 
uuid
 *uuid, c⁄° 
js⁄
 *
ﬁd
,

676 c⁄° 
js⁄
 *
√w
)

678 
ovsdb_idl_row
 *
row
;

680 
row
 = 
	`ovsdb_idl_gë_row
(
èbÀ
, 
uuid
);

681 i‡(!
√w
) {

683 i‡(
row
 && !
	`ovsdb_idl_row_is_‹ph™
(row)) {

685 
	`ovsdb_idl_dñëe_row
(
row
);

687 
	`VLOG_WARN_RL
(&
£m™tic_æ
, "ˇ¬Ÿ dñëêmissögÑow "
UUID_FMT
" "

689 
	`UUID_ARGS
(
uuid
), 
èbÀ
->
˛ass
->
«me
);

690  
Ál£
;

692 } i‡(!
ﬁd
) {

694 i‡(!
row
) {

695 
	`ovsdb_idl_ö£π_row
(
	`ovsdb_idl_row_¸óã
(
èbÀ
, 
uuid
), 
√w
);

696 } i‡(
	`ovsdb_idl_row_is_‹ph™
(
row
)) {

697 
	`ovsdb_idl_ö£π_row
(
row
, 
√w
);

699 
	`VLOG_WARN_RL
(&
£m™tic_æ
, "ˇ¬ŸáddÉxi°ögÑow "
UUID_FMT
"Åo "

700 "èbÀ %s", 
	`UUID_ARGS
(
uuid
), 
èbÀ
->
˛ass
->
«me
);

701  
	`ovsdb_idl_modify_row
(
row
, 
√w
);

705 i‡(
row
) {

707 i‡(!
	`ovsdb_idl_row_is_‹ph™
(
row
)) {

708  
	`ovsdb_idl_modify_row
(
row
, 
√w
);

710 
	`VLOG_WARN_RL
(&
£m™tic_æ
, "cannot modify missing but "

711 "ª„ªn˚dÑow "
UUID_FMT
" inÅable %s",

712 
	`UUID_ARGS
(
uuid
), 
èbÀ
->
˛ass
->
«me
);

713 
	`ovsdb_idl_ö£π_row
(
row
, 
√w
);

716 
	`VLOG_WARN_RL
(&
£m™tic_æ
, "ˇ¬Ÿ modify missögÑow "
UUID_FMT
" "

717 "öÅabÀ %s", 
	`UUID_ARGS
(
uuid
), 
èbÀ
->
˛ass
->
«me
);

718 
	`ovsdb_idl_ö£π_row
(
	`ovsdb_idl_row_¸óã
(
èbÀ
, 
uuid
), 
√w
);

722  
åue
;

723 
	}
}

727 
boﬁ


728 
	$ovsdb_idl_row_upd©e
(
ovsdb_idl_row
 *
row
, c⁄° 
js⁄
 *
row_js⁄
)

730 
ovsdb_idl_èbÀ
 *
èbÀ
 = 
row
->table;

731 
shash_node
 *
node
;

732 
boﬁ
 
ch™ged
 = 
Ál£
;

734 
	`SHASH_FOR_EACH
 (
node
, 
	`js⁄_obje˘
(
row_js⁄
)) {

735 c⁄° *
cﬁumn_«me
 = 
node
->
«me
;

736 c⁄° 
ovsdb_idl_cﬁumn
 *
cﬁumn
;

737 
ovsdb_d©um
 
d©um
;

738 
ovsdb_îr‹
 *
îr‹
;

740 
cﬁumn
 = 
	`shash_föd_d©a
(&
èbÀ
->
cﬁumns
, 
cﬁumn_«me
);

741 i‡(!
cﬁumn
) {

742 
	`VLOG_WARN_RL
(&
sy¡ax_æ
, "unknow¿cﬁum¿%†upd©ögÑow "
UUID_FMT
,

743 
cﬁumn_«me
, 
	`UUID_ARGS
(&
row
->
uuid
));

747 
îr‹
 = 
	`ovsdb_d©um_‰om_js⁄
(&
d©um
, &
cﬁumn
->
ty≥
, 
node
->
d©a
, 
NULL
);

748 i‡(!
îr‹
) {

749 
cﬁumn_idx
 = 
cﬁumn
 - 
èbÀ
->
˛ass
->
cﬁumns
;

750 
ovsdb_d©um
 *
ﬁd
 = &
row
->ﬁd[
cﬁumn_idx
];

752 i‡(!
	`ovsdb_d©um_equÆs
(
ﬁd
, &
d©um
, &
cﬁumn
->
ty≥
)) {

753 
	`ovsdb_d©um_sw≠
(
ﬁd
, &
d©um
);

754 i‡(
èbÀ
->
modes
[
cﬁumn_idx
] & 
OVSDB_IDL_ALERT
) {

755 
ch™ged
 = 
åue
;

762 
	`ovsdb_d©um_de°roy
(&
d©um
, &
cﬁumn
->
ty≥
);

764 *
s
 = 
	`ovsdb_îr‹_to_°rög
(
îr‹
);

765 
	`VLOG_WARN_RL
(&
sy¡ax_æ
, "îr‹Ö¨sög cﬁum¿%†öÑow "
UUID_FMT


766 " i¿èbÀ %s: %s", 
cﬁumn_«me
,

767 
	`UUID_ARGS
(&
row
->
uuid
), 
èbÀ
->
˛ass
->
«me
, 
s
);

768 
	`‰ì
(
s
);

769 
	`ovsdb_îr‹_de°roy
(
îr‹
);

772  
ch™ged
;

773 
	}
}

784 
boﬁ


785 
	$ovsdb_idl_row_is_‹ph™
(c⁄° 
ovsdb_idl_row
 *
row
)

787  !
row
->
ﬁd
 && !row->
√w
;

788 
	}
}

806 
boﬁ


807 
	$ovsdb_idl_row_exi°s
(c⁄° 
ovsdb_idl_row
 *
row
)

809  
row
->
√w
 !
NULL
;

810 
	}
}

813 
	$ovsdb_idl_row_∑r£
(
ovsdb_idl_row
 *
row
)

815 c⁄° 
ovsdb_idl_èbÀ_˛ass
 *
˛ass
 = 
row
->
èbÀ
->class;

816 
size_t
 
i
;

818 
i
 = 0; i < 
˛ass
->
n_cﬁumns
; i++) {

819 c⁄° 
ovsdb_idl_cﬁumn
 *
c
 = &
˛ass
->
cﬁumns
[
i
];

820 (
c
->
∑r£
)(
row
, &row->
ﬁd
[
i
]);

822 
	}
}

825 
	$ovsdb_idl_row_u≈¨£
(
ovsdb_idl_row
 *
row
)

827 c⁄° 
ovsdb_idl_èbÀ_˛ass
 *
˛ass
 = 
row
->
èbÀ
->class;

828 
size_t
 
i
;

830 
i
 = 0; i < 
˛ass
->
n_cﬁumns
; i++) {

831 c⁄° 
ovsdb_idl_cﬁumn
 *
c
 = &
˛ass
->
cﬁumns
[
i
];

832 (
c
->
u≈¨£
)(
row
);

834 
	}
}

837 
	$ovsdb_idl_row_˛ór_ﬁd
(
ovsdb_idl_row
 *
row
)

839 
	`as£π
(
row
->
ﬁd
 =row->
√w
);

840 i‡(!
	`ovsdb_idl_row_is_‹ph™
(
row
)) {

841 c⁄° 
ovsdb_idl_èbÀ_˛ass
 *
˛ass
 = 
row
->
èbÀ
->class;

842 
size_t
 
i
;

844 
i
 = 0; i < 
˛ass
->
n_cﬁumns
; i++) {

845 
	`ovsdb_d©um_de°roy
(&
row
->
ﬁd
[
i
], &
˛ass
->
cﬁumns
[i].
ty≥
);

847 
	`‰ì
(
row
->
ﬁd
);

848 
row
->
ﬁd
 =Ñow->
√w
 = 
NULL
;

850 
	}
}

853 
	$ovsdb_idl_row_˛ór_√w
(
ovsdb_idl_row
 *
row
)

855 i‡(
row
->
ﬁd
 !row->
√w
) {

856 i‡(
row
->
√w
) {

857 c⁄° 
ovsdb_idl_èbÀ_˛ass
 *
˛ass
 = 
row
->
èbÀ
->class;

858 
size_t
 
i
;

860 i‡(
row
->
wrôãn
) {

861 
	`BITMAP_FOR_EACH_1
 (
i
, 
˛ass
->
n_cﬁumns
, 
row
->
wrôãn
) {

862 
	`ovsdb_d©um_de°roy
(&
row
->
√w
[
i
], &
˛ass
->
cﬁumns
[i].
ty≥
);

865 
	`‰ì
(
row
->
√w
);

866 
	`‰ì
(
row
->
wrôãn
);

867 
row
->
wrôãn
 = 
NULL
;

869 
row
->
√w
 =Ñow->
ﬁd
;

871 
	}
}

874 
	$ovsdb_idl_row_˛ór_¨cs
(
ovsdb_idl_row
 *
row
, 
boﬁ
 
de°roy_d°s
)

876 
ovsdb_idl_¨c
 *
¨c
, *
√xt
;

880 
	`LIST_FOR_EACH_SAFE
 (
¨c
, 
√xt
, 
§c_node
, &
row
->
§c_¨cs
) {

881 
	`li°_ªmove
(&
¨c
->
d°_node
);

882 i‡(
de°roy_d°s


883 && 
	`ovsdb_idl_row_is_‹ph™
(
¨c
->
d°
)

884 && 
	`li°_is_em±y
(&
¨c
->
d°
->
d°_¨cs
)) {

885 
	`ovsdb_idl_row_de°roy
(
¨c
->
d°
);

887 
	`‰ì
(
¨c
);

889 
	`li°_öô
(&
row
->
§c_¨cs
);

890 
	}
}

894 
	$ovsdb_idl_row_ª∑r£_backªfs
(
ovsdb_idl_row
 *
row
)

896 
ovsdb_idl_¨c
 *
¨c
, *
√xt
;

908 
	`LIST_FOR_EACH_SAFE
 (
¨c
, 
√xt
, 
d°_node
, &
row
->
d°_¨cs
) {

909 
ovsdb_idl_row
 *
ªf
 = 
¨c
->
§c
;

911 
	`ovsdb_idl_row_u≈¨£
(
ªf
);

912 
	`ovsdb_idl_row_˛ór_¨cs
(
ªf
, 
Ál£
);

913 
	`ovsdb_idl_row_∑r£
(
ªf
);

915 
	}
}

917 
ovsdb_idl_row
 *

918 
	$ovsdb_idl_row_¸óã__
(c⁄° 
ovsdb_idl_èbÀ_˛ass
 *
˛ass
)

920 
ovsdb_idl_row
 *
row
 = 
	`xzÆloc
(
˛ass
->
Æloˇti⁄_size
);

921 
˛ass
->
	`row_öô
(
row
);

922 
	`li°_öô
(&
row
->
§c_¨cs
);

923 
	`li°_öô
(&
row
->
d°_¨cs
);

924 
	`hm≠_node_nuŒify
(&
row
->
txn_node
);

925  
row
;

926 
	}
}

928 
ovsdb_idl_row
 *

929 
	$ovsdb_idl_row_¸óã
(
ovsdb_idl_èbÀ
 *
èbÀ
, c⁄° 
uuid
 *uuid)

931 
ovsdb_idl_row
 *
row
 = 
	`ovsdb_idl_row_¸óã__
(
èbÀ
->
˛ass
);

932 
	`hm≠_ö£π
(&
èbÀ
->
rows
, &
row
->
hm≠_node
, 
	`uuid_hash
(
uuid
));

933 
row
->
uuid
 = *uuid;

934 
row
->
èbÀ
 =Åable;

935  
row
;

936 
	}
}

939 
	$ovsdb_idl_row_de°roy
(
ovsdb_idl_row
 *
row
)

941 i‡(
row
) {

942 
	`ovsdb_idl_row_˛ór_ﬁd
(
row
);

943 
	`hm≠_ªmove
(&
row
->
èbÀ
->
rows
, &row->
hm≠_node
);

944 
	`‰ì
(
row
);

946 
	}
}

949 
	$ovsdb_idl_ö£π_row
(
ovsdb_idl_row
 *
row
, c⁄° 
js⁄
 *
row_js⁄
)

951 c⁄° 
ovsdb_idl_èbÀ_˛ass
 *
˛ass
 = 
row
->
èbÀ
->class;

952 
size_t
 
i
;

954 
	`as£π
(!
row
->
ﬁd
 && !row->
√w
);

955 
row
->
ﬁd
 =Ñow->
√w
 = 
	`xmÆloc
(
˛ass
->
n_cﬁumns
 *  *row->old);

956 
i
 = 0; i < 
˛ass
->
n_cﬁumns
; i++) {

957 
	`ovsdb_d©um_öô_deÁu…
(&
row
->
ﬁd
[
i
], &
˛ass
->
cﬁumns
[i].
ty≥
);

959 
	`ovsdb_idl_row_upd©e
(
row
, 
row_js⁄
);

960 
	`ovsdb_idl_row_∑r£
(
row
);

962 
	`ovsdb_idl_row_ª∑r£_backªfs
(
row
);

963 
	}
}

966 
	$ovsdb_idl_dñëe_row
(
ovsdb_idl_row
 *
row
)

968 
	`ovsdb_idl_row_u≈¨£
(
row
);

969 
	`ovsdb_idl_row_˛ór_¨cs
(
row
, 
åue
);

970 
	`ovsdb_idl_row_˛ór_ﬁd
(
row
);

971 i‡(
	`li°_is_em±y
(&
row
->
d°_¨cs
)) {

972 
	`ovsdb_idl_row_de°roy
(
row
);

974 
	`ovsdb_idl_row_ª∑r£_backªfs
(
row
);

976 
	}
}

980 
boﬁ


981 
	$ovsdb_idl_modify_row
(
ovsdb_idl_row
 *
row
, c⁄° 
js⁄
 *
row_js⁄
)

983 
boﬁ
 
ch™ged
;

985 
	`ovsdb_idl_row_u≈¨£
(
row
);

986 
	`ovsdb_idl_row_˛ór_¨cs
(
row
, 
åue
);

987 
ch™ged
 = 
	`ovsdb_idl_row_upd©e
(
row
, 
row_js⁄
);

988 
	`ovsdb_idl_row_∑r£
(
row
);

990  
ch™ged
;

991 
	}
}

993 
boﬁ


994 
	$may_add_¨c
(c⁄° 
ovsdb_idl_row
 *
§c
, c⁄° ovsdb_idl_row *
d°
)

996 c⁄° 
ovsdb_idl_¨c
 *
¨c
;

999 i‡(
§c
 =
d°
) {

1000  
Ál£
;

1009 i‡(
	`li°_is_em±y
(&
d°
->
d°_¨cs
)) {

1010  
åue
;

1012 
¨c
 = 
	`CONTAINER_OF
(
d°
->
d°_¨cs
.
√xt
, 
ovsdb_idl_¨c
, 
d°_node
);

1013  
¨c
->
§c
 != src;

1014 
	}
}

1016 
ovsdb_idl_èbÀ
 *

1017 
	$ovsdb_idl_èbÀ_‰om_˛ass
(c⁄° 
ovsdb_idl
 *
idl
,

1018 c⁄° 
ovsdb_idl_èbÀ_˛ass
 *
èbÀ_˛ass
)

1020  &
idl
->
èbÀs
[
èbÀ_˛ass
 - idl->
˛ass
->tables];

1021 
	}
}

1024 
ovsdb_idl_row
 *

1025 
	$ovsdb_idl_gë_row_¨c
(
ovsdb_idl_row
 *
§c
,

1026 
ovsdb_idl_èbÀ_˛ass
 *
d°_èbÀ_˛ass
,

1027 c⁄° 
uuid
 *
d°_uuid
)

1029 
ovsdb_idl
 *
idl
 = 
§c
->
èbÀ
->idl;

1030 
ovsdb_idl_èbÀ
 *
d°_èbÀ
;

1031 
ovsdb_idl_¨c
 *
¨c
;

1032 
ovsdb_idl_row
 *
d°
;

1034 
d°_èbÀ
 = 
	`ovsdb_idl_èbÀ_‰om_˛ass
(
idl
, 
d°_èbÀ_˛ass
);

1035 
d°
 = 
	`ovsdb_idl_gë_row
(
d°_èbÀ
, 
d°_uuid
);

1036 i‡(
idl
->
txn
) {

1043 i‡(
d°
 && (
	`hm≠_node_is_nuŒ
(&d°->
txn_node
Ë|| d°->
√w
)) {

1044  
d°
;

1046  
NULL
;

1049 i‡(!
d°
) {

1050 
d°
 = 
	`ovsdb_idl_row_¸óã
(
d°_èbÀ
, 
d°_uuid
);

1054 i‡(
	`may_add_¨c
(
§c
, 
d°
)) {

1057 
¨c
 = 
	`xmÆloc
( *arc);

1058 
	`li°_push_‰⁄t
(&
§c
->
§c_¨cs
, &
¨c
->
§c_node
);

1059 
	`li°_push_‰⁄t
(&
d°
->
d°_¨cs
, &
¨c
->
d°_node
);

1060 
¨c
->
§c
 = src;

1061 
¨c
->
d°
 = dst;

1064  !
	`ovsdb_idl_row_is_‹ph™
(
d°
Ë? d° : 
NULL
;

1066 
	}
}

1070 c⁄° 
ovsdb_idl_row
 *

1071 
	$ovsdb_idl_gë_row_f‹_uuid
(c⁄° 
ovsdb_idl
 *
idl
,

1072 c⁄° 
ovsdb_idl_èbÀ_˛ass
 *
tc
,

1073 c⁄° 
uuid
 *uuid)

1075  
	`ovsdb_idl_gë_row
(
	`ovsdb_idl_èbÀ_‰om_˛ass
(
idl
, 
tc
), 
uuid
);

1076 
	}
}

1078 
ovsdb_idl_row
 *

1079 
	$√xt_ªÆ_row
(
ovsdb_idl_èbÀ
 *
èbÀ
, 
hm≠_node
 *
node
)

1081 ; 
node
;Çodê
	`hm≠_√xt
(&
èbÀ
->
rows
,Çode)) {

1082 
ovsdb_idl_row
 *
row
;

1084 
row
 = 
	`CONTAINER_OF
(
node
, 
ovsdb_idl_row
, 
hm≠_node
);

1085 i‡(
	`ovsdb_idl_row_exi°s
(
row
)) {

1086  
row
;

1089  
NULL
;

1090 
	}
}

1098 c⁄° 
ovsdb_idl_row
 *

1099 
	$ovsdb_idl_fú°_row
(c⁄° 
ovsdb_idl
 *
idl
,

1100 c⁄° 
ovsdb_idl_èbÀ_˛ass
 *
èbÀ_˛ass
)

1102 
ovsdb_idl_èbÀ
 *
èbÀ


1103 
	`ovsdb_idl_èbÀ_‰om_˛ass
(
idl
, 
èbÀ_˛ass
);

1104  
	`√xt_ªÆ_row
(
èbÀ
, 
	`hm≠_fú°
(&èbÀ->
rows
));

1105 
	}
}

1109 c⁄° 
ovsdb_idl_row
 *

1110 
	$ovsdb_idl_√xt_row
(c⁄° 
ovsdb_idl_row
 *
row
)

1112 
ovsdb_idl_èbÀ
 *
èbÀ
 = 
row
->table;

1114  
	`√xt_ªÆ_row
(
èbÀ
, 
	`hm≠_√xt
(&èbÀ->
rows
, &
row
->
hm≠_node
));

1115 
	}
}

1128 c⁄° 
ovsdb_d©um
 *

1129 
	$ovsdb_idl_ªad
(c⁄° 
ovsdb_idl_row
 *
row
,

1130 c⁄° 
ovsdb_idl_cﬁumn
 *
cﬁumn
)

1132 c⁄° 
ovsdb_idl_èbÀ_˛ass
 *
˛ass
;

1133 
size_t
 
cﬁumn_idx
;

1135 
	`as£π
(!
	`ovsdb_idl_row_is_sy¡hëic
(
row
));

1137 
˛ass
 = 
row
->
èbÀ
->class;

1138 
cﬁumn_idx
 = 
cﬁumn
 - 
˛ass
->
cﬁumns
;

1140 
	`as£π
(
row
->
√w
 !
NULL
);

1141 
	`as£π
(
cﬁumn_idx
 < 
˛ass
->
n_cﬁumns
);

1143 i‡(
row
->
wrôãn
 && 
	`bôm≠_is_£t
‘ow->wrôãn, 
cﬁumn_idx
)) {

1144  &
row
->
√w
[
cﬁumn_idx
];

1145 } i‡(
row
->
ﬁd
) {

1146  &
row
->
ﬁd
[
cﬁumn_idx
];

1148  
	`ovsdb_d©um_deÁu…
(&
cﬁumn
->
ty≥
);

1150 
	}
}

1159 c⁄° 
ovsdb_d©um
 *

1160 
	$ovsdb_idl_gë
(c⁄° 
ovsdb_idl_row
 *
row
,

1161 c⁄° 
ovsdb_idl_cﬁumn
 *
cﬁumn
,

1162 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
,

1163 
ovsdb_©omic_ty≥
 
vÆue_ty≥
 
OVS_UNUSED
)

1165 
	`as£π
(
cﬁumn
->
ty≥
.
key
.ty≥ =
key_ty≥
);

1166 
	`as£π
(
cﬁumn
->
ty≥
.
vÆue
.ty≥ =
vÆue_ty≥
);

1168  
	`ovsdb_idl_ªad
(
row
, 
cﬁumn
);

1169 
	}
}

1174 
boﬁ


1175 
	$ovsdb_idl_row_is_sy¡hëic
(c⁄° 
ovsdb_idl_row
 *
row
)

1177  
row
->
èbÀ
 =
NULL
;

1178 
	}
}

1182 
ovsdb_idl_txn_com∂ëe
(
ovsdb_idl_txn
 *
txn
,

1183 
ovsdb_idl_txn_°©us
);

1191 
	$ovsdb_idl_txn_°©us_to_°rög
(
ovsdb_idl_txn_°©us
 
°©us
)

1193 
°©us
) {

1194 
TXN_UNCOMMITTED
:

1196 
TXN_UNCHANGED
:

1198 
TXN_INCOMPLETE
:

1200 
TXN_ABORTED
:

1202 
TXN_SUCCESS
:

1204 
TXN_TRY_AGAIN
:

1206 
TXN_NOT_LOCKED
:

1208 
TXN_ERROR
:

1212 
	}
}

1217 
ovsdb_idl_txn
 *

1218 
	$ovsdb_idl_txn_¸óã
(
ovsdb_idl
 *
idl
)

1220 
ovsdb_idl_txn
 *
txn
;

1222 
	`as£π
(!
idl
->
txn
);

1223 
idl
->
txn
 =Åx¿
	`xmÆloc
( *txn);

1224 
txn
->
ªque°_id
 = 
NULL
;

1225 
txn
->
idl
 = idl;

1226 
	`hm≠_öô
(&
txn
->
txn_rows
);

1227 
txn
->
°©us
 = 
TXN_UNCOMMITTED
;

1228 
txn
->
îr‹
 = 
NULL
;

1229 
txn
->
dry_run
 = 
Ál£
;

1230 
	`ds_öô
(&
txn
->
commít
);

1231 
txn
->
commô_£qno
 =Åxn->
idl
->
ch™ge_£qno
;

1233 
txn
->
öc_èbÀ
 = 
NULL
;

1234 
txn
->
öc_cﬁumn
 = 
NULL
;

1236 
	`hm≠_öô
(&
txn
->
ö£πed_rows
);

1238  
txn
;

1239 
	}
}

1246 
	$ovsdb_idl_txn_add_commít
(
ovsdb_idl_txn
 *
txn
, c⁄° *
s
, ...)

1248 
va_li°
 
¨gs
;

1250 i‡(
txn
->
commít
.
Àngth
) {

1251 
	`ds_put_ch¨
(&
txn
->
commít
, '\n');

1254 
	`va_°¨t
(
¨gs
, 
s
);

1255 
	`ds_put_f‹m©_vÆi°
(&
txn
->
commít
, 
s
, 
¨gs
);

1256 
	`va_íd
(
¨gs
);

1257 
	}
}

1267 
	$ovsdb_idl_txn_£t_dry_run
(
ovsdb_idl_txn
 *
txn
)

1269 
txn
->
dry_run
 = 
åue
;

1270 
	}
}

1285 
	$ovsdb_idl_txn_ö¸emít
(
ovsdb_idl_txn
 *
txn
,

1286 c⁄° 
ovsdb_idl_row
 *
row
,

1287 c⁄° 
ovsdb_idl_cﬁumn
 *
cﬁumn
)

1289 
	`as£π
(!
txn
->
öc_èbÀ
);

1290 
	`as£π
(
cﬁumn
->
ty≥
.
key
.ty≥ =
OVSDB_TYPE_INTEGER
);

1291 
	`as£π
(
cﬁumn
->
ty≥
.
vÆue
.ty≥ =
OVSDB_TYPE_VOID
);

1293 
txn
->
öc_èbÀ
 = 
row
->
èbÀ
->
˛ass
->
«me
;

1294 
txn
->
öc_cﬁumn
 = 
cﬁumn
->
«me
;

1295 
txn
->
öc_row
 = 
row
->
uuid
;

1296 
	}
}

1304 
	$ovsdb_idl_txn_de°roy
(
ovsdb_idl_txn
 *
txn
)

1306 
ovsdb_idl_txn_ö£π
 *
ö£π
, *
√xt
;

1308 
	`js⁄_de°roy
(
txn
->
ªque°_id
);

1309 i‡(
txn
->
°©us
 =
TXN_INCOMPLETE
) {

1310 
	`hm≠_ªmove
(&
txn
->
idl
->
out°™dög_txns
, &txn->
hm≠_node
);

1312 
	`ovsdb_idl_txn_ab‹t
(
txn
);

1313 
	`ds_de°roy
(&
txn
->
commít
);

1314 
	`‰ì
(
txn
->
îr‹
);

1315 
	`HMAP_FOR_EACH_SAFE
 (
ö£π
, 
√xt
, 
hm≠_node
, &
txn
->
ö£πed_rows
) {

1316 
	`‰ì
(
ö£π
);

1318 
	`hm≠_de°roy
(&
txn
->
ö£πed_rows
);

1319 
	`‰ì
(
txn
);

1320 
	}
}

1324 
	$ovsdb_idl_txn_waô
(c⁄° 
ovsdb_idl_txn
 *
txn
)

1326 i‡(
txn
->
°©us
 !
TXN_UNCOMMITTED
 &&Åxn->°©u†!
TXN_INCOMPLETE
) {

1327 
	`pﬁl_immedüã_wake
();

1329 
	}
}

1331 
js⁄
 *

1332 
	$whîe_uuid_equÆs
(c⁄° 
uuid
 *uuid)

1335 
	`js⁄_¨øy_¸óã_1
(

1336 
	`js⁄_¨øy_¸óã_3
(

1337 
	`js⁄_°rög_¸óã
("_uuid"),

1338 
	`js⁄_°rög_¸óã
("=="),

1339 
	`js⁄_¨øy_¸óã_2
(

1340 
	`js⁄_°rög_¸óã
("uuid"),

1341 
	`js⁄_°rög_¸óã_noc›y
(

1342 
	`xa•rötf
(
UUID_FMT
, 
	`UUID_ARGS
(
uuid
))))));

1343 
	}
}

1346 
	$uuid_«me_‰om_uuid
(c⁄° 
uuid
 *uuid)

1348 *
«me
;

1349 *
p
;

1351 
«me
 = 
	`xa•rötf
("row"
UUID_FMT
, 
	`UUID_ARGS
(
uuid
));

1352 
p
 = 
«me
; *p != '\0';Ö++) {

1353 i‡(*
p
 == '-') {

1354 *
p
 = '_';

1358  
«me
;

1359 
	}
}

1361 c⁄° 
ovsdb_idl_row
 *

1362 
	$ovsdb_idl_txn_gë_row
(c⁄° 
ovsdb_idl_txn
 *
txn
, c⁄° 
uuid
 *uuid)

1364 c⁄° 
ovsdb_idl_row
 *
row
;

1366 
	`HMAP_FOR_EACH_WITH_HASH
 (
row
, 
txn_node
, 
	`uuid_hash
(
uuid
), &
txn
->
txn_rows
) {

1367 i‡(
	`uuid_equÆs
(&
row
->
uuid
, uuid)) {

1368  
row
;

1371  
NULL
;

1372 
	}
}

1375 
js⁄
 *

1376 
	$sub°ôuã_uuids
(
js⁄
 *js⁄, c⁄° 
ovsdb_idl_txn
 *
txn
)

1378 i‡(
js⁄
->
ty≥
 =
JSON_ARRAY
) {

1379 
uuid
 uuid;

1380 
size_t
 
i
;

1382 i‡(
js⁄
->
u
.
¨øy
.
n
 == 2

1383 && 
js⁄
->
u
.
¨øy
.
ñems
[0]->
ty≥
 =
JSON_STRING


1384 && 
js⁄
->
u
.
¨øy
.
ñems
[1]->
ty≥
 =
JSON_STRING


1385 && !
	`°rcmp
(
js⁄
->
u
.
¨øy
.
ñems
[0]->u.
°rög
, "uuid")

1386 && 
	`uuid_‰om_°rög
(&
uuid
, 
js⁄
->
u
.
¨øy
.
ñems
[1]->u.
°rög
)) {

1387 c⁄° 
ovsdb_idl_row
 *
row
;

1389 
row
 = 
	`ovsdb_idl_txn_gë_row
(
txn
, &
uuid
);

1390 i‡(
row
 && !row->
ﬁd
 &&Ñow->
√w
) {

1391 
	`js⁄_de°roy
(
js⁄
);

1393  
	`js⁄_¨øy_¸óã_2
(

1394 
	`js⁄_°rög_¸óã
("named-uuid"),

1395 
	`js⁄_°rög_¸óã_noc›y
(
	`uuid_«me_‰om_uuid
(&
uuid
)));

1399 
i
 = 0; i < 
js⁄
->
u
.
¨øy
.
n
; i++) {

1400 
js⁄
->
u
.
¨øy
.
ñems
[
i
] = 
	`sub°ôuã_uuids
(json->u.array.elems[i],

1401 
txn
);

1403 } i‡(
js⁄
->
ty≥
 =
JSON_OBJECT
) {

1404 
shash_node
 *
node
;

1406 
	`SHASH_FOR_EACH
 (
node
, 
	`js⁄_obje˘
(
js⁄
)) {

1407 
node
->
d©a
 = 
	`sub°ôuã_uuids
“ode->d©a, 
txn
);

1410  
js⁄
;

1411 
	}
}

1414 
	$ovsdb_idl_txn_dißs£mbÀ
(
ovsdb_idl_txn
 *
txn
)

1416 
ovsdb_idl_row
 *
row
, *
√xt
;

1422 
txn
->
idl
->tx¿
NULL
;

1424 
	`HMAP_FOR_EACH_SAFE
 (
row
, 
√xt
, 
txn_node
, &
txn
->
txn_rows
) {

1425 i‡(
row
->
ﬁd
) {

1426 i‡(
row
->
wrôãn
) {

1427 
	`ovsdb_idl_row_u≈¨£
(
row
);

1428 
	`ovsdb_idl_row_˛ór_¨cs
(
row
, 
Ál£
);

1429 
	`ovsdb_idl_row_∑r£
(
row
);

1432 
	`ovsdb_idl_row_u≈¨£
(
row
);

1434 
	`ovsdb_idl_row_˛ór_√w
(
row
);

1436 
	`‰ì
(
row
->
¥îeqs
);

1437 
row
->
¥îeqs
 = 
NULL
;

1439 
	`‰ì
(
row
->
wrôãn
);

1440 
row
->
wrôãn
 = 
NULL
;

1442 
	`hm≠_ªmove
(&
txn
->
txn_rows
, &
row
->
txn_node
);

1443 
	`hm≠_node_nuŒify
(&
row
->
txn_node
);

1444 i‡(!
row
->
ﬁd
) {

1445 
	`hm≠_ªmove
(&
row
->
èbÀ
->
rows
, &row->
hm≠_node
);

1446 
	`‰ì
(
row
);

1449 
	`hm≠_de°roy
(&
txn
->
txn_rows
);

1450 
	`hm≠_öô
(&
txn
->
txn_rows
);

1451 
	}
}

1502 
ovsdb_idl_txn_°©us


1503 
	$ovsdb_idl_txn_commô
(
ovsdb_idl_txn
 *
txn
)

1505 
ovsdb_idl_row
 *
row
;

1506 
js⁄
 *
›î©i⁄s
;

1507 
boﬁ
 
™y_upd©es
;

1509 i‡(
txn
 !txn->
idl
->txn) {

1510  
txn
->
°©us
;

1514 i‡(
txn
->
idl
->
lock_«me
 && !
	`ovsdb_idl_has_lock
(txn->idl)) {

1515 
txn
->
°©us
 = 
TXN_NOT_LOCKED
;

1516 
	`ovsdb_idl_txn_dißs£mbÀ
(
txn
);

1517  
txn
->
°©us
;

1520 
›î©i⁄s
 = 
	`js⁄_¨øy_¸óã_1
(

1521 
	`js⁄_°rög_¸óã
(
txn
->
idl
->
˛ass
->
d©aba£
));

1524 i‡(
txn
->
idl
->
lock_«me
) {

1525 
js⁄
 *
›
 = 
	`js⁄_obje˘_¸óã
();

1526 
	`js⁄_¨øy_add
(
›î©i⁄s
, 
›
);

1527 
	`js⁄_obje˘_put_°rög
(
›
, "op", "assert");

1528 
	`js⁄_obje˘_put_°rög
(
›
, "lock", 
txn
->
idl
->
lock_«me
);

1532 
	`HMAP_FOR_EACH
 (
row
, 
txn_node
, &
txn
->
txn_rows
) {

1534 i‡(
row
->
¥îeqs
) {

1535 c⁄° 
ovsdb_idl_èbÀ_˛ass
 *
˛ass
 = 
row
->
èbÀ
->class;

1536 
size_t
 
n_cﬁumns
 = 
˛ass
->n_columns;

1537 
js⁄
 *
›
, *
cﬁumns
, *
row_js⁄
;

1538 
size_t
 
idx
;

1540 
›
 = 
	`js⁄_obje˘_¸óã
();

1541 
	`js⁄_¨øy_add
(
›î©i⁄s
, 
›
);

1542 
	`js⁄_obje˘_put_°rög
(
›
, "op", "wait");

1543 
	`js⁄_obje˘_put_°rög
(
›
, "èbÀ", 
˛ass
->
«me
);

1544 
	`js⁄_obje˘_put
(
›
, "timeout", 
	`js⁄_öãgî_¸óã
(0));

1545 
	`js⁄_obje˘_put
(
›
, "whîe", 
	`whîe_uuid_equÆs
(&
row
->
uuid
));

1546 
	`js⁄_obje˘_put_°rög
(
›
, "until", "==");

1547 
cﬁumns
 = 
	`js⁄_¨øy_¸óã_em±y
();

1548 
	`js⁄_obje˘_put
(
›
, "cﬁumns", 
cﬁumns
);

1549 
row_js⁄
 = 
	`js⁄_obje˘_¸óã
();

1550 
	`js⁄_obje˘_put
(
›
, "rows", 
	`js⁄_¨øy_¸óã_1
(
row_js⁄
));

1552 
	`BITMAP_FOR_EACH_1
 (
idx
, 
n_cﬁumns
, 
row
->
¥îeqs
) {

1553 c⁄° 
ovsdb_idl_cﬁumn
 *
cﬁumn
 = &
˛ass
->
cﬁumns
[
idx
];

1554 
	`js⁄_¨øy_add
(
cﬁumns
, 
	`js⁄_°rög_¸óã
(
cﬁumn
->
«me
));

1555 
	`js⁄_obje˘_put
(
row_js⁄
, 
cﬁumn
->
«me
,

1556 
	`ovsdb_d©um_to_js⁄
(&
row
->
ﬁd
[
idx
],

1557 &
cﬁumn
->
ty≥
));

1563 
™y_upd©es
 = 
Ál£
;

1564 
	`HMAP_FOR_EACH
 (
row
, 
txn_node
, &
txn
->
txn_rows
) {

1565 c⁄° 
ovsdb_idl_èbÀ_˛ass
 *
˛ass
 = 
row
->
èbÀ
->class;

1567 i‡(!
row
->
√w
) {

1568 i‡(
˛ass
->
is_roŸ
) {

1569 
js⁄
 *
›
 = 
	`js⁄_obje˘_¸óã
();

1570 
	`js⁄_obje˘_put_°rög
(
›
, "op", "delete");

1571 
	`js⁄_obje˘_put_°rög
(
›
, "èbÀ", 
˛ass
->
«me
);

1572 
	`js⁄_obje˘_put
(
›
, "whîe", 
	`whîe_uuid_equÆs
(&
row
->
uuid
));

1573 
	`js⁄_¨øy_add
(
›î©i⁄s
, 
›
);

1574 
™y_upd©es
 = 
åue
;

1578 } i‡(
row
->
ﬁd
 !row->
√w
) {

1579 
js⁄
 *
row_js⁄
;

1580 
js⁄
 *
›
;

1581 
size_t
 
idx
;

1583 
›
 = 
	`js⁄_obje˘_¸óã
();

1584 
	`js⁄_obje˘_put_°rög
(
›
, "›", 
row
->
ﬁd
 ? "update" : "insert");

1585 
	`js⁄_obje˘_put_°rög
(
›
, "èbÀ", 
˛ass
->
«me
);

1586 i‡(
row
->
ﬁd
) {

1587 
	`js⁄_obje˘_put
(
›
, "whîe", 
	`whîe_uuid_equÆs
(&
row
->
uuid
));

1589 
ovsdb_idl_txn_ö£π
 *
ö£π
;

1591 
™y_upd©es
 = 
åue
;

1593 
	`js⁄_obje˘_put
(
›
, "uuid-name",

1594 
	`js⁄_°rög_¸óã_noc›y
(

1595 
	`uuid_«me_‰om_uuid
(&
row
->
uuid
)));

1597 
ö£π
 = 
	`xmÆloc
( *insert);

1598 
ö£π
->
dummy
 = 
row
->
uuid
;

1599 
ö£π
->
›_ödex
 = 
›î©i⁄s
->
u
.
¨øy
.
n
 - 1;

1600 
	`uuid_zîo
(&
ö£π
->
ªÆ
);

1601 
	`hm≠_ö£π
(&
txn
->
ö£πed_rows
, &
ö£π
->
hm≠_node
,

1602 
	`uuid_hash
(&
ö£π
->
dummy
));

1604 
row_js⁄
 = 
	`js⁄_obje˘_¸óã
();

1605 
	`js⁄_obje˘_put
(
›
, "row", 
row_js⁄
);

1607 i‡(
row
->
wrôãn
) {

1608 
	`BITMAP_FOR_EACH_1
 (
idx
, 
˛ass
->
n_cﬁumns
, 
row
->
wrôãn
) {

1609 c⁄° 
ovsdb_idl_cﬁumn
 *
cﬁumn
 =

1610 &
˛ass
->
cﬁumns
[
idx
];

1612 i‡(
row
->
ﬁd


1613 || !
	`ovsdb_d©um_is_deÁu…
(&
row
->
√w
[
idx
],

1614 &
cﬁumn
->
ty≥
)) {

1615 
	`js⁄_obje˘_put
(
row_js⁄
, 
cﬁumn
->
«me
,

1616 
	`sub°ôuã_uuids
(

1617 
	`ovsdb_d©um_to_js⁄
(&
row
->
√w
[
idx
],

1618 &
cﬁumn
->
ty≥
),

1619 
txn
));

1625 i‡(!
™y_upd©es
 && 
row
->
ﬁd
 &&

1626 !
	`ovsdb_d©um_equÆs
(&
row
->
ﬁd
[
idx
], &row->
√w
[idx],

1627 &
cﬁumn
->
ty≥
)) {

1628 
™y_upd©es
 = 
åue
;

1634 i‡(!
row
->
ﬁd
 || !
	`shash_is_em±y
(
	`js⁄_obje˘
(
row_js⁄
))) {

1635 
	`js⁄_¨øy_add
(
›î©i⁄s
, 
›
);

1637 
	`js⁄_de°roy
(
›
);

1643 i‡(
txn
->
öc_èbÀ
 && 
™y_upd©es
) {

1644 
js⁄
 *
›
;

1646 
txn
->
öc_ödex
 = 
›î©i⁄s
->
u
.
¨øy
.
n
 - 1;

1648 
›
 = 
	`js⁄_obje˘_¸óã
();

1649 
	`js⁄_obje˘_put_°rög
(
›
, "op", "mutate");

1650 
	`js⁄_obje˘_put_°rög
(
›
, "èbÀ", 
txn
->
öc_èbÀ
);

1651 
	`js⁄_obje˘_put
(
›
, "where",

1652 
	`sub°ôuã_uuids
(
	`whîe_uuid_equÆs
(&
txn
->
öc_row
),

1653 
txn
));

1654 
	`js⁄_obje˘_put
(
›
, "mutations",

1655 
	`js⁄_¨øy_¸óã_1
(

1656 
	`js⁄_¨øy_¸óã_3
(

1657 
	`js⁄_°rög_¸óã
(
txn
->
öc_cﬁumn
),

1658 
	`js⁄_°rög_¸óã
("+="),

1659 
	`js⁄_öãgî_¸óã
(1))));

1660 
	`js⁄_¨øy_add
(
›î©i⁄s
, 
›
);

1662 
›
 = 
	`js⁄_obje˘_¸óã
();

1663 
	`js⁄_obje˘_put_°rög
(
›
, "op", "select");

1664 
	`js⁄_obje˘_put_°rög
(
›
, "èbÀ", 
txn
->
öc_èbÀ
);

1665 
	`js⁄_obje˘_put
(
›
, "where",

1666 
	`sub°ôuã_uuids
(
	`whîe_uuid_equÆs
(&
txn
->
öc_row
),

1667 
txn
));

1668 
	`js⁄_obje˘_put
(
›
, "columns",

1669 
	`js⁄_¨øy_¸óã_1
(
	`js⁄_°rög_¸óã
(

1670 
txn
->
öc_cﬁumn
)));

1671 
	`js⁄_¨øy_add
(
›î©i⁄s
, 
›
);

1674 i‡(
txn
->
commít
.
Àngth
) {

1675 
js⁄
 *
›
 = 
	`js⁄_obje˘_¸óã
();

1676 
	`js⁄_obje˘_put_°rög
(
›
, "op", "comment");

1677 
	`js⁄_obje˘_put_°rög
(
›
, "commít", 
	`ds_c°r
(&
txn
->
commít
));

1678 
	`js⁄_¨øy_add
(
›î©i⁄s
, 
›
);

1681 i‡(
txn
->
dry_run
) {

1682 
js⁄
 *
›
 = 
	`js⁄_obje˘_¸óã
();

1683 
	`js⁄_obje˘_put_°rög
(
›
, "op", "abort");

1684 
	`js⁄_¨øy_add
(
›î©i⁄s
, 
›
);

1687 i‡(!
™y_upd©es
) {

1688 
txn
->
°©us
 = 
TXN_UNCHANGED
;

1689 
	`js⁄_de°roy
(
›î©i⁄s
);

1690 } i‡(!
	`js⁄Ωc_£ssi⁄_£nd
(

1691 
txn
->
idl
->
£ssi⁄
,

1692 
	`js⁄Ωc_¸óã_ªque°
(

1693 "å™ß˘", 
›î©i⁄s
, &
txn
->
ªque°_id
))) {

1694 
	`hm≠_ö£π
(&
txn
->
idl
->
out°™dög_txns
, &txn->
hm≠_node
,

1695 
	`js⁄_hash
(
txn
->
ªque°_id
, 0));

1696 
txn
->
°©us
 = 
TXN_INCOMPLETE
;

1698 
txn
->
°©us
 = 
TXN_TRY_AGAIN
;

1701 
	`ovsdb_idl_txn_dißs£mbÀ
(
txn
);

1702  
txn
->
°©us
;

1703 
	}
}

1711 
ovsdb_idl_txn_°©us


1712 
	$ovsdb_idl_txn_commô_block
(
ovsdb_idl_txn
 *
txn
)

1714 
ovsdb_idl_txn_°©us
 
°©us
;

1716 
	`Áèl_sig«l_run
();

1717 (
°©us
 = 
	`ovsdb_idl_txn_commô
(
txn
)Ë=
TXN_INCOMPLETE
) {

1718 
	`ovsdb_idl_run
(
txn
->
idl
);

1719 
	`ovsdb_idl_waô
(
txn
->
idl
);

1720 
	`ovsdb_idl_txn_waô
(
txn
);

1721 
	`pﬁl_block
();

1723  
°©us
;

1724 
	}
}

1729 
öt64_t


1730 
	$ovsdb_idl_txn_gë_ö¸emít_√w_vÆue
(c⁄° 
ovsdb_idl_txn
 *
txn
)

1732 
	`as£π
(
txn
->
°©us
 =
TXN_SUCCESS
);

1733  
txn
->
öc_√w_vÆue
;

1734 
	}
}

1743 
	$ovsdb_idl_txn_ab‹t
(
ovsdb_idl_txn
 *
txn
)

1745 
	`ovsdb_idl_txn_dißs£mbÀ
(
txn
);

1746 i‡(
txn
->
°©us
 =
TXN_UNCOMMITTED
 ||Åxn->°©u†=
TXN_INCOMPLETE
) {

1747 
txn
->
°©us
 = 
TXN_ABORTED
;

1749 
	}
}

1760 
	$ovsdb_idl_txn_gë_îr‹
(c⁄° 
ovsdb_idl_txn
 *
txn
)

1762 i‡(
txn
->
°©us
 !
TXN_ERROR
) {

1763  
	`ovsdb_idl_txn_°©us_to_°rög
(
txn
->
°©us
);

1764 } i‡(
txn
->
îr‹
) {

1765  
txn
->
îr‹
;

1769 
	}
}

1772 
	$ovsdb_idl_txn_£t_îr‹_js⁄
(
ovsdb_idl_txn
 *
txn
,

1773 c⁄° 
js⁄
 *json)

1775 i‡(
txn
->
îr‹
 =
NULL
) {

1776 
txn
->
îr‹
 = 
	`js⁄_to_°rög
(
js⁄
, 
JSSF_SORT
);

1778 
	}
}

1789 c⁄° 
uuid
 *

1790 
	$ovsdb_idl_txn_gë_ö£π_uuid
(c⁄° 
ovsdb_idl_txn
 *
txn
,

1791 c⁄° 
uuid
 *uuid)

1793 c⁄° 
ovsdb_idl_txn_ö£π
 *
ö£π
;

1795 
	`as£π
(
txn
->
°©us
 =
TXN_SUCCESS
 ||Åxn->°©u†=
TXN_UNCHANGED
);

1796 
	`HMAP_FOR_EACH_IN_BUCKET
 (
ö£π
, 
hm≠_node
,

1797 
	`uuid_hash
(
uuid
), &
txn
->
ö£πed_rows
) {

1798 i‡(
	`uuid_equÆs
(
uuid
, &
ö£π
->
dummy
)) {

1799  &
ö£π
->
ªÆ
;

1802  
NULL
;

1803 
	}
}

1806 
	$ovsdb_idl_txn_com∂ëe
(
ovsdb_idl_txn
 *
txn
,

1807 
ovsdb_idl_txn_°©us
 
°©us
)

1809 
txn
->
°©us
 = status;

1810 
	`hm≠_ªmove
(&
txn
->
idl
->
out°™dög_txns
, &txn->
hm≠_node
);

1811 
	}
}

1831 
	$ovsdb_idl_txn_wrôe
(c⁄° 
ovsdb_idl_row
 *
row_
,

1832 c⁄° 
ovsdb_idl_cﬁumn
 *
cﬁumn
,

1833 
ovsdb_d©um
 *
d©um
)

1835 
ovsdb_idl_row
 *
row
 = 
	`CONST_CAST
(ovsdb_idl_row *, 
row_
);

1836 c⁄° 
ovsdb_idl_èbÀ_˛ass
 *
˛ass
;

1837 
size_t
 
cﬁumn_idx
;

1838 
boﬁ
 
wrôe_⁄ly
;

1840 i‡(
	`ovsdb_idl_row_is_sy¡hëic
(
row
)) {

1841 
	`ovsdb_d©um_de°roy
(
d©um
, &
cﬁumn
->
ty≥
);

1845 
˛ass
 = 
row
->
èbÀ
->class;

1846 
cﬁumn_idx
 = 
cﬁumn
 - 
˛ass
->
cﬁumns
;

1847 
wrôe_⁄ly
 = 
row
->
èbÀ
->
modes
[
cﬁumn_idx
] =
OVSDB_IDL_MONITOR
;

1849 
	`as£π
(
row
->
√w
 !
NULL
);

1850 
	`as£π
(
cﬁumn_idx
 < 
˛ass
->
n_cﬁumns
);

1851 
	`as£π
(
row
->
ﬁd
 =
NULL
 ||

1852 
row
->
èbÀ
->
modes
[
cﬁumn_idx
] & 
OVSDB_IDL_MONITOR
);

1854 i‡(
row
->
èbÀ
->
idl
->
vîify_wrôe_⁄ly
 && !
wrôe_⁄ly
) {

1855 
	`VLOG_ERR
("Bug: AttemptÅo writeÅoáÑead/write column (%s:%s) when"

1856 "Éx∂icôly c⁄figuªdÇŸÅo.", 
˛ass
->
«me
, 
cﬁumn
->name);

1857 
	`ovsdb_d©um_de°roy
(
d©um
, &
cﬁumn
->
ty≥
);

1872 i‡(
wrôe_⁄ly
 && 
	`ovsdb_d©um_equÆs
(
	`ovsdb_idl_ªad
(
row
, 
cﬁumn
),

1873 
d©um
, &
cﬁumn
->
ty≥
)) {

1874 
	`ovsdb_d©um_de°roy
(
d©um
, &
cﬁumn
->
ty≥
);

1878 i‡(
	`hm≠_node_is_nuŒ
(&
row
->
txn_node
)) {

1879 
	`hm≠_ö£π
(&
row
->
èbÀ
->
idl
->
txn
->
txn_rows
, &row->
txn_node
,

1880 
	`uuid_hash
(&
row
->
uuid
));

1882 i‡(
row
->
ﬁd
 =row->
√w
) {

1883 
row
->
√w
 = 
	`xmÆloc
(
˛ass
->
n_cﬁumns
 *  *row->new);

1885 i‡(!
row
->
wrôãn
) {

1886 
row
->
wrôãn
 = 
	`bôm≠_Æloˇã
(
˛ass
->
n_cﬁumns
);

1888 i‡(
	`bôm≠_is_£t
(
row
->
wrôãn
, 
cﬁumn_idx
)) {

1889 
	`ovsdb_d©um_de°roy
(&
row
->
√w
[
cﬁumn_idx
], &
cﬁumn
->
ty≥
);

1891 
	`bôm≠_£t1
(
row
->
wrôãn
, 
cﬁumn_idx
);

1893 
row
->
√w
[
cﬁumn_idx
] = *
d©um
;

1894 (
cﬁumn
->
u≈¨£
)(
row
);

1895 (
cﬁumn
->
∑r£
)(
row
, &row->
√w
[
cﬁumn_idx
]);

1896 
	}
}

1927 
	$ovsdb_idl_txn_vîify
(c⁄° 
ovsdb_idl_row
 *
row_
,

1928 c⁄° 
ovsdb_idl_cﬁumn
 *
cﬁumn
)

1930 
ovsdb_idl_row
 *
row
 = 
	`CONST_CAST
(ovsdb_idl_row *, 
row_
);

1931 c⁄° 
ovsdb_idl_èbÀ_˛ass
 *
˛ass
;

1932 
size_t
 
cﬁumn_idx
;

1934 i‡(
	`ovsdb_idl_row_is_sy¡hëic
(
row
)) {

1938 
˛ass
 = 
row
->
èbÀ
->class;

1939 
cﬁumn_idx
 = 
cﬁumn
 - 
˛ass
->
cﬁumns
;

1941 
	`as£π
(
row
->
√w
 !
NULL
);

1942 
	`as£π
(
row
->
ﬁd
 =
NULL
 ||

1943 
row
->
èbÀ
->
modes
[
cﬁumn_idx
] & 
OVSDB_IDL_MONITOR
);

1944 i‡(!
row
->
ﬁd


1945 || (
row
->
wrôãn
 && 
	`bôm≠_is_£t
‘ow->wrôãn, 
cﬁumn_idx
))) {

1949 i‡(
	`hm≠_node_is_nuŒ
(&
row
->
txn_node
)) {

1950 
	`hm≠_ö£π
(&
row
->
èbÀ
->
idl
->
txn
->
txn_rows
, &row->
txn_node
,

1951 
	`uuid_hash
(&
row
->
uuid
));

1953 i‡(!
row
->
¥îeqs
) {

1954 
row
->
¥îeqs
 = 
	`bôm≠_Æloˇã
(
˛ass
->
n_cﬁumns
);

1956 
	`bôm≠_£t1
(
row
->
¥îeqs
, 
cﬁumn_idx
);

1957 
	}
}

1967 
	$ovsdb_idl_txn_dñëe
(c⁄° 
ovsdb_idl_row
 *
row_
)

1969 
ovsdb_idl_row
 *
row
 = 
	`CONST_CAST
(ovsdb_idl_row *, 
row_
);

1971 i‡(
	`ovsdb_idl_row_is_sy¡hëic
(
row
)) {

1975 
	`as£π
(
row
->
√w
 !
NULL
);

1976 i‡(!
row
->
ﬁd
) {

1977 
	`ovsdb_idl_row_u≈¨£
(
row
);

1978 
	`ovsdb_idl_row_˛ór_√w
(
row
);

1979 
	`as£π
(!
row
->
¥îeqs
);

1980 
	`hm≠_ªmove
(&
row
->
èbÀ
->
rows
, &row->
hm≠_node
);

1981 
	`hm≠_ªmove
(&
row
->
èbÀ
->
idl
->
txn
->
txn_rows
, &row->
txn_node
);

1982 
	`‰ì
(
row
);

1985 i‡(
	`hm≠_node_is_nuŒ
(&
row
->
txn_node
)) {

1986 
	`hm≠_ö£π
(&
row
->
èbÀ
->
idl
->
txn
->
txn_rows
, &row->
txn_node
,

1987 
	`uuid_hash
(&
row
->
uuid
));

1989 
	`ovsdb_idl_row_˛ór_√w
(
row
);

1990 
row
->
√w
 = 
NULL
;

1991 
	}
}

2005 c⁄° 
ovsdb_idl_row
 *

2006 
	$ovsdb_idl_txn_ö£π
(
ovsdb_idl_txn
 *
txn
,

2007 c⁄° 
ovsdb_idl_èbÀ_˛ass
 *
˛ass
,

2008 c⁄° 
uuid
 *uuid)

2010 
ovsdb_idl_row
 *
row
 = 
	`ovsdb_idl_row_¸óã__
(
˛ass
);

2012 i‡(
uuid
) {

2013 
	`as£π
(!
	`ovsdb_idl_txn_gë_row
(
txn
, 
uuid
));

2014 
row
->
uuid
 = *uuid;

2016 
	`uuid_gíî©e
(&
row
->
uuid
);

2019 
row
->
èbÀ
 = 
	`ovsdb_idl_èbÀ_‰om_˛ass
(
txn
->
idl
, 
˛ass
);

2020 
row
->
√w
 = 
	`xmÆloc
(
˛ass
->
n_cﬁumns
 *  *row->new);

2021 
	`hm≠_ö£π
(&
row
->
èbÀ
->
rows
, &row->
hm≠_node
, 
	`uuid_hash
(&row->
uuid
));

2022 
	`hm≠_ö£π
(&
txn
->
txn_rows
, &
row
->
txn_node
, 
	`uuid_hash
(&row->
uuid
));

2023  
row
;

2024 
	}
}

2027 
	$ovsdb_idl_txn_ab‹t_Æl
(
ovsdb_idl
 *
idl
)

2029 
ovsdb_idl_txn
 *
txn
;

2031 
	`HMAP_FOR_EACH
 (
txn
, 
hm≠_node
, &
idl
->
out°™dög_txns
) {

2032 
	`ovsdb_idl_txn_com∂ëe
(
txn
, 
TXN_TRY_AGAIN
);

2034 
	}
}

2036 
ovsdb_idl_txn
 *

2037 
	$ovsdb_idl_txn_föd
(
ovsdb_idl
 *
idl
, c⁄° 
js⁄
 *
id
)

2039 
ovsdb_idl_txn
 *
txn
;

2041 
	`HMAP_FOR_EACH_WITH_HASH
 (
txn
, 
hm≠_node
,

2042 
	`js⁄_hash
(
id
, 0), &
idl
->
out°™dög_txns
) {

2043 i‡(
	`js⁄_equÆ
(
id
, 
txn
->
ªque°_id
)) {

2044  
txn
;

2047  
NULL
;

2048 
	}
}

2050 
boﬁ


2051 
	$check_js⁄_ty≥
(c⁄° 
js⁄
 *js⁄, 
js⁄_ty≥
 
ty≥
, c⁄° *
«me
)

2053 i‡(!
js⁄
) {

2054 
	`VLOG_WARN_RL
(&
sy¡ax_æ
, "%†i†missög", 
«me
);

2055  
Ál£
;

2056 } i‡(
js⁄
->
ty≥
 !=Åype) {

2057 
	`VLOG_WARN_RL
(&
sy¡ax_æ
, "%s is %s instead of %s",

2058 
«me
, 
	`js⁄_ty≥_to_°rög
(
js⁄
->
ty≥
),

2059 
	`js⁄_ty≥_to_°rög
(
ty≥
));

2060  
Ál£
;

2062  
åue
;

2064 
	}
}

2066 
boﬁ


2067 
	$ovsdb_idl_txn_¥o˚ss_öc_ª∂y
(
ovsdb_idl_txn
 *
txn
,

2068 c⁄° 
js⁄_¨øy
 *
ªsu…s
)

2070 
js⁄
 *
cou¡
, *
rows
, *
row
, *
cﬁumn
;

2071 
shash
 *
muèã
, *
£À˘
;

2073 i‡(
txn
->
öc_ödex
 + 2 > 
ªsu…s
->
n
) {

2074 
	`VLOG_WARN_RL
(&
sy¡ax_æ
, "reply doesÇot containÉnough operations "

2076 
ªsu…s
->
n
, 
txn
->
öc_ödex
 + 2);

2077  
Ál£
;

2082 
muèã
 = 
	`js⁄_obje˘
(
ªsu…s
->
ñems
[
txn
->
öc_ödex
]);

2083 
cou¡
 = 
	`shash_föd_d©a
(
muèã
, "count");

2084 i‡(!
	`check_js⁄_ty≥
(
cou¡
, 
JSON_INTEGER
, "\"mutate\"Ñeply \"count\"")) {

2085  
Ál£
;

2087 i‡(
cou¡
->
u
.
öãgî
 != 1) {

2088 
	`VLOG_WARN_RL
(&
sy¡ax_æ
,

2090 
cou¡
->
u
.
öãgî
);

2091  
Ál£
;

2094 
£À˘
 = 
	`js⁄_obje˘
(
ªsu…s
->
ñems
[
txn
->
öc_ödex
 + 1]);

2095 
rows
 = 
	`shash_föd_d©a
(
£À˘
, "rows");

2096 i‡(!
	`check_js⁄_ty≥
(
rows
, 
JSON_ARRAY
, "\"select\"Ñeply \"rows\"")) {

2097  
Ál£
;

2099 i‡(
rows
->
u
.
¨øy
.
n
 != 1) {

2100 
	`VLOG_WARN_RL
(&
sy¡ax_æ
, "\"select\"Ñeply \"rows\" has %zuÉlements "

2102 
rows
->
u
.
¨øy
.
n
);

2103  
Ál£
;

2105 
row
 = 
rows
->
u
.
¨øy
.
ñems
[0];

2106 i‡(!
	`check_js⁄_ty≥
(
row
, 
JSON_OBJECT
, "\"select\"ÑeplyÑow")) {

2107  
Ál£
;

2109 
cﬁumn
 = 
	`shash_föd_d©a
(
	`js⁄_obje˘
(
row
), 
txn
->
öc_cﬁumn
);

2110 i‡(!
	`check_js⁄_ty≥
(
cﬁumn
, 
JSON_INTEGER
,

2112  
Ál£
;

2114 
txn
->
öc_√w_vÆue
 = 
cﬁumn
->
u
.
öãgî
;

2115  
åue
;

2116 
	}
}

2118 
boﬁ


2119 
	$ovsdb_idl_txn_¥o˚ss_ö£π_ª∂y
(
ovsdb_idl_txn_ö£π
 *
ö£π
,

2120 c⁄° 
js⁄_¨øy
 *
ªsu…s
)

2122 c⁄° 
ovsdb_ba£_ty≥
 
uuid_ty≥
 = 
OVSDB_BASE_UUID_INIT
;

2123 
ovsdb_îr‹
 *
îr‹
;

2124 
js⁄
 *
js⁄_uuid
;

2125 
ovsdb_©om
 
uuid
;

2126 
shash
 *
ª∂y
;

2128 i‡(
ö£π
->
›_ödex
 >
ªsu…s
->
n
) {

2129 
	`VLOG_WARN_RL
(&
sy¡ax_æ
, "reply doesÇot containÉnough operations "

2131 
ªsu…s
->
n
, 
ö£π
->
›_ödex
);

2132  
Ál£
;

2137 
ª∂y
 = 
	`js⁄_obje˘
(
ªsu…s
->
ñems
[
ö£π
->
›_ödex
]);

2138 
js⁄_uuid
 = 
	`shash_föd_d©a
(
ª∂y
, "uuid");

2139 i‡(!
	`check_js⁄_ty≥
(
js⁄_uuid
, 
JSON_ARRAY
, "\"insert\"Ñeply \"uuid\"")) {

2140  
Ál£
;

2143 
îr‹
 = 
	`ovsdb_©om_‰om_js⁄
(&
uuid
, &
uuid_ty≥
, 
js⁄_uuid
, 
NULL
);

2144 i‡(
îr‹
) {

2145 *
s
 = 
	`ovsdb_îr‹_to_°rög
(
îr‹
);

2146 
	`VLOG_WARN_RL
(&
sy¡ax_æ
, "\"insert\"Ñeply \"uuid\" isÇotá JSON "

2147 "UUID: %s", 
s
);

2148 
	`‰ì
(
s
);

2149 
	`ovsdb_îr‹_de°roy
(
îr‹
);

2150  
Ál£
;

2153 
ö£π
->
ªÆ
 = 
uuid
.uuid;

2155  
åue
;

2156 
	}
}

2158 
boﬁ


2159 
	$ovsdb_idl_txn_¥o˚ss_ª∂y
(
ovsdb_idl
 *
idl
,

2160 c⁄° 
js⁄Ωc_msg
 *
msg
)

2162 
ovsdb_idl_txn
 *
txn
;

2163 
ovsdb_idl_txn_°©us
 
°©us
;

2165 
txn
 = 
	`ovsdb_idl_txn_föd
(
idl
, 
msg
->
id
);

2166 i‡(!
txn
) {

2167  
Ál£
;

2170 i‡(
msg
->
ty≥
 =
JSONRPC_ERROR
) {

2171 
°©us
 = 
TXN_ERROR
;

2172 } i‡(
msg
->
ªsu…
->
ty≥
 !
JSON_ARRAY
) {

2173 
	`VLOG_WARN_RL
(&
sy¡ax_æ
, "replyÅo \"transact\" isÇot JSONárray");

2174 
°©us
 = 
TXN_ERROR
;

2176 
js⁄_¨øy
 *
›s
 = &
msg
->
ªsu…
->
u
.
¨øy
;

2177 
h¨d_îr‹s
 = 0;

2178 
so·_îr‹s
 = 0;

2179 
lock_îr‹s
 = 0;

2180 
size_t
 
i
;

2182 
i
 = 0; i < 
›s
->
n
; i++) {

2183 
js⁄
 *
›
 = 
›s
->
ñems
[
i
];

2185 i‡(
›
->
ty≥
 =
JSON_NULL
) {

2188 
so·_îr‹s
++;

2189 } i‡(
›
->
ty≥
 =
JSON_OBJECT
) {

2190 
js⁄
 *
îr‹
;

2192 
îr‹
 = 
	`shash_föd_d©a
(
	`js⁄_obje˘
(
›
), "error");

2193 i‡(
îr‹
) {

2194 i‡(
îr‹
->
ty≥
 =
JSON_STRING
) {

2195 i‡(!
	`°rcmp
(
îr‹
->
u
.
°rög
, "timed out")) {

2196 
so·_îr‹s
++;

2197 } i‡(!
	`°rcmp
(
îr‹
->
u
.
°rög
, "not owner")) {

2198 
lock_îr‹s
++;

2199 } i‡(
	`°rcmp
(
îr‹
->
u
.
°rög
, "aborted")) {

2200 
h¨d_îr‹s
++;

2201 
	`ovsdb_idl_txn_£t_îr‹_js⁄
(
txn
, 
›
);

2204 
h¨d_îr‹s
++;

2205 
	`ovsdb_idl_txn_£t_îr‹_js⁄
(
txn
, 
›
);

2206 
	`VLOG_WARN_RL
(&
sy¡ax_æ
,

2211 
h¨d_îr‹s
++;

2212 
	`ovsdb_idl_txn_£t_îr‹_js⁄
(
txn
, 
›
);

2213 
	`VLOG_WARN_RL
(&
sy¡ax_æ
,

2218 i‡(!
so·_îr‹s
 && !
h¨d_îr‹s
 && !
lock_îr‹s
) {

2219 
ovsdb_idl_txn_ö£π
 *
ö£π
;

2221 i‡(
txn
->
öc_èbÀ
 && !
	`ovsdb_idl_txn_¥o˚ss_öc_ª∂y
—xn, 
›s
)) {

2222 
h¨d_îr‹s
++;

2225 
	`HMAP_FOR_EACH
 (
ö£π
, 
hm≠_node
, &
txn
->
ö£πed_rows
) {

2226 i‡(!
	`ovsdb_idl_txn_¥o˚ss_ö£π_ª∂y
(
ö£π
, 
›s
)) {

2227 
h¨d_îr‹s
++;

2232 
°©us
 = (
h¨d_îr‹s
 ? 
TXN_ERROR


2233 : 
lock_îr‹s
 ? 
TXN_NOT_LOCKED


2234 : 
so·_îr‹s
 ? 
TXN_TRY_AGAIN


2235 : 
TXN_SUCCESS
);

2238 
	`ovsdb_idl_txn_com∂ëe
(
txn
, 
°©us
);

2239  
åue
;

2240 
	}
}

2244 
ovsdb_idl_txn
 *

2245 
	$ovsdb_idl_txn_gë
(c⁄° 
ovsdb_idl_row
 *
row
)

2247 
ovsdb_idl_txn
 *
txn
 = 
row
->
èbÀ
->
idl
->txn;

2248 
	`as£π
(
txn
 !
NULL
);

2249  
txn
;

2250 
	}
}

2253 
ovsdb_idl
 *

2254 
	$ovsdb_idl_txn_gë_idl
 (
ovsdb_idl_txn
 *
txn
)

2256  
txn
->
idl
;

2257 
	}
}

2266 
	$ovsdb_idl_£t_lock
(
ovsdb_idl
 *
idl
, c⁄° *
lock_«me
)

2268 
	`as£π
(!
idl
->
txn
);

2269 
	`as£π
(
	`hm≠_is_em±y
(&
idl
->
out°™dög_txns
));

2271 i‡(
idl
->
lock_«me
 && (!lock_«mê|| 
	`°rcmp
(lock_name, idl->lock_name))) {

2273 
	`ovsdb_idl_£nd_u∆ock_ªque°
(
idl
);

2274 
	`‰ì
(
idl
->
lock_«me
);

2275 
idl
->
lock_«me
 = 
NULL
;

2276 
idl
->
is_lock_c⁄ãnded
 = 
Ál£
;

2279 i‡(
lock_«me
 && !
idl
->lock_name) {

2281 
idl
->
lock_«me
 = 
	`x°rdup
(lock_name);

2282 
	`ovsdb_idl_£nd_lock_ªque°
(
idl
);

2284 
	}
}

2292 
boﬁ


2293 
	$ovsdb_idl_has_lock
(c⁄° 
ovsdb_idl
 *
idl
)

2295  
idl
->
has_lock
;

2296 
	}
}

2300 
boﬁ


2301 
	$ovsdb_idl_is_lock_c⁄ãnded
(c⁄° 
ovsdb_idl
 *
idl
)

2303  
idl
->
is_lock_c⁄ãnded
;

2304 
	}
}

2307 
	$ovsdb_idl_upd©e_has_lock
(
ovsdb_idl
 *
idl
, 
boﬁ
 
√w_has_lock
)

2309 i‡(
√w_has_lock
 && !
idl
->
has_lock
) {

2310 i‡(!
idl
->
m⁄ô‹_ªque°_id
) {

2311 
idl
->
ch™ge_£qno
++;

2317 
idl
->
is_lock_c⁄ãnded
 = 
Ál£
;

2319 
idl
->
has_lock
 = 
√w_has_lock
;

2320 
	}
}

2323 
	$ovsdb_idl_£nd_lock_ªque°__
(
ovsdb_idl
 *
idl
, c⁄° *
mëhod
,

2324 
js⁄
 **
idp
)

2326 
	`ovsdb_idl_upd©e_has_lock
(
idl
, 
Ál£
);

2328 
	`js⁄_de°roy
(
idl
->
lock_ªque°_id
);

2329 
idl
->
lock_ªque°_id
 = 
NULL
;

2331 i‡(
	`js⁄Ωc_£ssi⁄_is_c⁄√˘ed
(
idl
->
£ssi⁄
)) {

2332 
js⁄
 *
∑øms
;

2334 
∑øms
 = 
	`js⁄_¨øy_¸óã_1
(
	`js⁄_°rög_¸óã
(
idl
->
lock_«me
));

2335 
	`js⁄Ωc_£ssi⁄_£nd
(
idl
->
£ssi⁄
,

2336 
	`js⁄Ωc_¸óã_ªque°
(
mëhod
, 
∑øms
, 
idp
));

2338 
	}
}

2341 
	$ovsdb_idl_£nd_lock_ªque°
(
ovsdb_idl
 *
idl
)

2343 
	`ovsdb_idl_£nd_lock_ªque°__
(
idl
, "lock", &idl->
lock_ªque°_id
);

2344 
	}
}

2347 
	$ovsdb_idl_£nd_u∆ock_ªque°
(
ovsdb_idl
 *
idl
)

2349 
	`ovsdb_idl_£nd_lock_ªque°__
(
idl
, "u∆ock", 
NULL
);

2350 
	}
}

2353 
	$ovsdb_idl_∑r£_lock_ª∂y
(
ovsdb_idl
 *
idl
, c⁄° 
js⁄
 *
ªsu…
)

2355 
boﬁ
 
gŸ_lock
;

2357 
	`js⁄_de°roy
(
idl
->
lock_ªque°_id
);

2358 
idl
->
lock_ªque°_id
 = 
NULL
;

2360 i‡(
ªsu…
->
ty≥
 =
JSON_OBJECT
) {

2361 c⁄° 
js⁄
 *
locked
;

2363 
locked
 = 
	`shash_föd_d©a
(
	`js⁄_obje˘
(
ªsu…
), "locked");

2364 
gŸ_lock
 = 
locked
 &&Üocked->
ty≥
 =
JSON_TRUE
;

2366 
gŸ_lock
 = 
Ál£
;

2369 
	`ovsdb_idl_upd©e_has_lock
(
idl
, 
gŸ_lock
);

2370 i‡(!
gŸ_lock
) {

2371 
idl
->
is_lock_c⁄ãnded
 = 
åue
;

2373 
	}
}

2376 
	$ovsdb_idl_∑r£_lock_nŸify
(
ovsdb_idl
 *
idl
,

2377 c⁄° 
js⁄
 *
∑øms
,

2378 
boﬁ
 
√w_has_lock
)

2380 i‡(
idl
->
lock_«me


2381 && 
∑øms
->
ty≥
 =
JSON_ARRAY


2382 && 
	`js⁄_¨øy
(
∑øms
)->
n
 > 0

2383 && 
	`js⁄_¨øy
(
∑øms
)->
ñems
[0]->
ty≥
 =
JSON_STRING
) {

2384 c⁄° *
lock_«me
 = 
	`js⁄_°rög
(
	`js⁄_¨øy
(
∑øms
)->
ñems
[0]);

2386 i‡(!
	`°rcmp
(
idl
->
lock_«me
,Üock_name)) {

2387 
	`ovsdb_idl_upd©e_has_lock
(
idl
, 
√w_has_lock
);

2388 i‡(!
√w_has_lock
) {

2389 
idl
->
is_lock_c⁄ãnded
 = 
åue
;

2393 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/ovsdb-idl.h

16 #i‚de‡
OVSDB_IDL_H


17 
	#OVSDB_IDL_H
 1

	)

33 
	~<°dboﬁ.h
>

34 
	~<°döt.h
>

35 
	~"compûî.h
"

36 
	~"ovsdb-ty≥s.h
"

38 
	gjs⁄
;

39 
	govsdb_d©um
;

40 
	govsdb_idl_˛ass
;

41 
	govsdb_idl_cﬁumn
;

42 
	govsdb_idl_èbÀ_˛ass
;

43 
	guuid
;

45 
ovsdb_idl
 *
ovsdb_idl_¸óã
(c⁄° *
ªmŸe
,

46 c⁄° 
ovsdb_idl_˛ass
 *,

47 
boﬁ
 
m⁄ô‹_evîythög_by_deÁu…
);

48 
ovsdb_idl_de°roy
(
ovsdb_idl
 *);

50 
ovsdb_idl_run
(
ovsdb_idl
 *);

51 
ovsdb_idl_waô
(
ovsdb_idl
 *);

53 
ovsdb_idl_£t_lock
(
ovsdb_idl
 *, c⁄° *
lock_«me
);

54 
boﬁ
 
ovsdb_idl_has_lock
(c⁄° 
ovsdb_idl
 *);

55 
boﬁ
 
ovsdb_idl_is_lock_c⁄ãnded
(c⁄° 
ovsdb_idl
 *);

57 
ovsdb_idl_gë_£qno
(c⁄° 
ovsdb_idl
 *);

58 
boﬁ
 
ovsdb_idl_has_evî_c⁄√˘ed
(c⁄° 
ovsdb_idl
 *);

59 
ovsdb_idl_f‹˚_ªc⁄√˘
(
ovsdb_idl
 *);

60 
ovsdb_idl_vîify_wrôe_⁄ly
(
ovsdb_idl
 *);

88 
	#OVSDB_IDL_MONITOR
 (1 << 0Ë

	)

89 
	#OVSDB_IDL_ALERT
 (1 << 1Ë

	)

91 
ovsdb_idl_add_cﬁumn
(
ovsdb_idl
 *, c⁄° 
ovsdb_idl_cﬁumn
 *);

92 
ovsdb_idl_add_èbÀ
(
ovsdb_idl
 *,

93 c⁄° 
ovsdb_idl_èbÀ_˛ass
 *);

95 
ovsdb_idl_omô
(
ovsdb_idl
 *, c⁄° 
ovsdb_idl_cﬁumn
 *);

96 
ovsdb_idl_omô_Æît
(
ovsdb_idl
 *, c⁄° 
ovsdb_idl_cﬁumn
 *);

100 c⁄° 
ovsdb_idl_row
 *
ovsdb_idl_gë_row_f‹_uuid
(

101 c⁄° 
ovsdb_idl
 *, c⁄° 
ovsdb_idl_èbÀ_˛ass
 *,

102 c⁄° 
uuid
 *);

103 c⁄° 
ovsdb_idl_row
 *
ovsdb_idl_fú°_row
(

104 c⁄° 
ovsdb_idl
 *, c⁄° 
ovsdb_idl_èbÀ_˛ass
 *);

105 c⁄° 
ovsdb_idl_row
 *
ovsdb_idl_√xt_row
(const ovsdb_idl_row *);

107 c⁄° 
ovsdb_d©um
 *
ovsdb_idl_ªad
(c⁄° 
ovsdb_idl_row
 *,

108 c⁄° 
ovsdb_idl_cﬁumn
 *);

109 c⁄° 
ovsdb_d©um
 *
ovsdb_idl_gë
(c⁄° 
ovsdb_idl_row
 *,

110 c⁄° 
ovsdb_idl_cﬁumn
 *,

111 
ovsdb_©omic_ty≥
 
key_ty≥
,

112 
ovsdb_©omic_ty≥
 
vÆue_ty≥
);

114 
boﬁ
 
ovsdb_idl_row_is_sy¡hëic
(c⁄° 
ovsdb_idl_row
 *);

167 
	eovsdb_idl_txn_°©us
 {

168 
	mTXN_UNCOMMITTED
,

169 
	mTXN_UNCHANGED
,

170 
	mTXN_INCOMPLETE
,

171 
	mTXN_ABORTED
,

172 
	mTXN_SUCCESS
,

173 
	mTXN_TRY_AGAIN
,

177 
	mTXN_NOT_LOCKED
,

178 
	mTXN_ERROR


181 c⁄° *
ovsdb_idl_txn_°©us_to_°rög
(
ovsdb_idl_txn_°©us
);

183 
ovsdb_idl_txn
 *
ovsdb_idl_txn_¸óã
(
ovsdb_idl
 *);

184 
	$ovsdb_idl_txn_add_commít
(
ovsdb_idl_txn
 *, const *, ...)

185 
	`PRINTF_FORMAT
 (2, 3);

186 
	`ovsdb_idl_txn_£t_dry_run
(
ovsdb_idl_txn
 *);

187 
	`ovsdb_idl_txn_ö¸emít
(
ovsdb_idl_txn
 *,

188 c⁄° 
ovsdb_idl_row
 *,

189 c⁄° 
ovsdb_idl_cﬁumn
 *);

190 
	`ovsdb_idl_txn_de°roy
(
ovsdb_idl_txn
 *);

191 
	`ovsdb_idl_txn_waô
(c⁄° 
ovsdb_idl_txn
 *);

192 
ovsdb_idl_txn_°©us
 
	`ovsdb_idl_txn_commô
(
ovsdb_idl_txn
 *);

193 
ovsdb_idl_txn_°©us
 
	`ovsdb_idl_txn_commô_block
(
ovsdb_idl_txn
 *);

194 
	`ovsdb_idl_txn_ab‹t
(
ovsdb_idl_txn
 *);

196 c⁄° *
	`ovsdb_idl_txn_gë_îr‹
(c⁄° 
ovsdb_idl_txn
 *);

198 
öt64_t
 
	`ovsdb_idl_txn_gë_ö¸emít_√w_vÆue
(c⁄° 
ovsdb_idl_txn
 *);

199 c⁄° 
uuid
 *
	`ovsdb_idl_txn_gë_ö£π_uuid
(c⁄° 
ovsdb_idl_txn
 *,

200 c⁄° 
uuid
 *);

202 
	`ovsdb_idl_txn_wrôe
(c⁄° 
ovsdb_idl_row
 *,

203 c⁄° 
ovsdb_idl_cﬁumn
 *,

204 
ovsdb_d©um
 *);

205 
	`ovsdb_idl_txn_dñëe
(c⁄° 
ovsdb_idl_row
 *);

206 c⁄° 
ovsdb_idl_row
 *
	`ovsdb_idl_txn_ö£π
(

207 
ovsdb_idl_txn
 *, c⁄° 
ovsdb_idl_èbÀ_˛ass
 *,

208 c⁄° 
uuid
 *);

210 
ovsdb_idl
 *
	`ovsdb_idl_txn_gë_idl
 (
ovsdb_idl_txn
 *);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/ovsdb-parser.c

16 
	~<c⁄fig.h
>

18 
	~"ovsdb-∑r£r.h
"

20 
	~<˘y≥.h
>

21 
	~<°d¨g.h
>

23 
	~"ovsdb-îr‹.h
"

26 
	$ovsdb_∑r£r_öô
(
ovsdb_∑r£r
 *
∑r£r
, c⁄° 
js⁄
 *json,

27 c⁄° *
«me
, ...)

29 
va_li°
 
¨gs
;

31 
	`va_°¨t
(
¨gs
, 
«me
);

32 
∑r£r
->
«me
 = 
	`xva•rötf
“ame, 
¨gs
);

33 
	`va_íd
(
¨gs
);

35 
	`s£t_öô
(&
∑r£r
->
u£d
);

36 
∑r£r
->
îr‹
 = 
NULL
;

38 
∑r£r
->
js⁄
 = (js⁄ && js⁄->
ty≥
 =
JSON_OBJECT
 ? js⁄ : 
NULL
);

39 i‡(!
∑r£r
->
js⁄
) {

40 
	`ovsdb_∑r£r_øi£_îr‹
(
∑r£r
, "ObjectÉxpected.");

42 
	}
}

44 
boﬁ


45 
	$ovsdb_∑r£r_is_id
(c⁄° *
°rög
)

47 
c
;

49 
c
 = *
°rög
;

50 i‡(!
	`ißÕha
(
c
) && c != '_') {

51  
Ál£
;

55 
c
 = *++
°rög
;

56 i‡(
c
 == '\0') {

57  
åue
;

58 } i‡(!
	`ißÕha
(
c
Ë&& !
	`isdigô
(c) && c != '_') {

59  
Ál£
;

62 
	}
}

64 c⁄° 
js⁄
 *

65 
	$ovsdb_∑r£r_membî
(
ovsdb_∑r£r
 *
∑r£r
, c⁄° *
«me
,

66 
ovsdb_∑r£r_ty≥s
 
ty≥s
)

68 
js⁄
 *
vÆue
;

70 i‡(!
∑r£r
->
js⁄
) {

71  
NULL
;

74 
vÆue
 = 
	`shash_föd_d©a
(
	`js⁄_obje˘
(
∑r£r
->
js⁄
), 
«me
);

75 i‡(!
vÆue
) {

76 i‡(!(
ty≥s
 & 
OP_OPTIONAL
)) {

77 
	`ovsdb_∑r£r_øi£_îr‹
(
∑r£r
,

78 "Requúed '%s' membî i†missög.", 
«me
);

80  
NULL
;

83 i‡(((Ë
vÆue
->
ty≥
 >0 && vÆue->ty≥ < 
JSON_N_TYPES


84 && 
ty≥s
 & (1u << 
vÆue
->
ty≥
))

85 || (
ty≥s
 & 
OP_ID
 && 
vÆue
->
ty≥
 =
JSON_STRING


86 && 
	`ovsdb_∑r£r_is_id
(
vÆue
->
u
.
°rög
)))

88 
	`s£t_add
(&
∑r£r
->
u£d
, 
«me
);

89  
vÆue
;

91 
	`ovsdb_∑r£r_øi£_îr‹
(
∑r£r
, "Type mismatch for member '%s'.",

92 
«me
);

93  
NULL
;

95 
	}
}

98 
	$ovsdb_∑r£r_øi£_îr‹
(
ovsdb_∑r£r
 *
∑r£r
, c⁄° *
f‹m©
, ...)

100 i‡(!
∑r£r
->
îr‹
) {

101 
ovsdb_îr‹
 *
îr‹
;

102 
va_li°
 
¨gs
;

103 *
mesßge
;

105 
	`va_°¨t
(
¨gs
, 
f‹m©
);

106 
mesßge
 = 
	`xva•rötf
(
f‹m©
, 
¨gs
);

107 
	`va_íd
(
¨gs
);

109 
îr‹
 = 
	`ovsdb_sy¡ax_îr‹
(
∑r£r
->
js⁄
, 
NULL
, "Parsing %s failed: %s",

110 
∑r£r
->
«me
, 
mesßge
);

111 
	`‰ì
(
mesßge
);

113 
∑r£r
->
îr‹
 =Érror;

115 
	}
}

117 
ovsdb_îr‹
 *

118 
	$ovsdb_∑r£r_gë_îr‹
(c⁄° 
ovsdb_∑r£r
 *
∑r£r
)

120  
∑r£r
->
îr‹
 ? 
	`ovsdb_îr‹_˛⁄e
’¨£r->îr‹Ë: 
NULL
;

121 
	}
}

123 
boﬁ


124 
	$ovsdb_∑r£r_has_îr‹
(c⁄° 
ovsdb_∑r£r
 *
∑r£r
)

126  
∑r£r
->
îr‹
 !
NULL
;

127 
	}
}

129 
ovsdb_îr‹
 *

130 
	$ovsdb_∑r£r_föish
(
ovsdb_∑r£r
 *
∑r£r
)

132 i‡(!
∑r£r
->
îr‹
) {

133 c⁄° 
shash
 *
obje˘
 = 
	`js⁄_obje˘
(
∑r£r
->
js⁄
);

134 
size_t
 
n_unu£d
;

136 
n_unu£d
 = 
	`shash_cou¡
(
obje˘
Ë- 
	`s£t_cou¡
(&
∑r£r
->
u£d
);

137 i‡(
n_unu£d
) {

138 
shash_node
 *
node
;

140 
	`SHASH_FOR_EACH
 (
node
, 
obje˘
) {

141 i‡(!
	`s£t_c⁄èös
(&
∑r£r
->
u£d
, 
node
->
«me
)) {

142 i‡(
n_unu£d
 > 1) {

143 
	`ovsdb_∑r£r_øi£_îr‹
(

144 
∑r£r
,

147 
node
->
«me
, 
n_unu£d
 - 1,Ç_unused > 2 ? "s" : "");

149 
	`ovsdb_∑r£r_øi£_îr‹
(

150 
∑r£r
,

152 
node
->
«me
);

160 
	`‰ì
(
∑r£r
->
«me
);

161 
	`s£t_de°roy
(&
∑r£r
->
u£d
);

163  
∑r£r
->
îr‹
;

164 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/ovsdb-parser.h

16 #i‚de‡
OVSDB_PARSER_H


17 
	#OVSDB_PARSER_H
 1

	)

19 
	~<°dboﬁ.h
>

20 
	~"compûî.h
"

21 
	~"js⁄.h
"

22 
	~"s£t.h
"

23 
	~"utû.h
"

25 
	sovsdb_∑r£r
 {

26 *
	m«me
;

27 
s£t
 
	mu£d
;

28 c⁄° 
js⁄
 *
	mjs⁄
;

29 
ovsdb_îr‹
 *
	mîr‹
;

33 
BUILD_ASSERT_DECL
(
JSON_NULL
 >= 0 && JSON_NULL < 10);

34 
BUILD_ASSERT_DECL
(
JSON_FALSE
 >= 0 && JSON_FALSE < 10);

35 
BUILD_ASSERT_DECL
(
JSON_TRUE
 >= 0 && JSON_TRUE < 10);

36 
BUILD_ASSERT_DECL
(
JSON_OBJECT
 >= 0 && JSON_OBJECT < 10);

37 
BUILD_ASSERT_DECL
(
JSON_ARRAY
 >= 0 && JSON_ARRAY < 10);

38 
BUILD_ASSERT_DECL
(
JSON_INTEGER
 >= 0 && JSON_INTEGER < 10);

39 
BUILD_ASSERT_DECL
(
JSON_REAL
 >= 0 && JSON_REAL < 10);

40 
BUILD_ASSERT_DECL
(
JSON_STRING
 >= 0 && JSON_STRING < 10);

41 
BUILD_ASSERT_DECL
(
JSON_N_TYPES
 == 8);

43 
	eovsdb_∑r£r_ty≥s
 {

44 
	mOP_NULL
 = 1 << 
JSON_NULL
,

45 
	mOP_FALSE
 = 1 << 
JSON_FALSE
,

46 
	mOP_TRUE
 = 1 << 
JSON_TRUE
,

47 
	mOP_OBJECT
 = 1 << 
JSON_OBJECT
,

48 
	mOP_ARRAY
 = 1 << 
JSON_ARRAY
,

49 
	mOP_INTEGER
 = 1 << 
JSON_INTEGER
,

50 
	mOP_NONINTEGER
 = 1 << 
JSON_REAL
,

51 
	mOP_STRING
 = 1 << 
JSON_STRING
,

52 
	mOP_ANY
 = (
OP_NULL
 | 
OP_FALSE
 | 
OP_TRUE
 | 
OP_OBJECT
 | 
OP_ARRAY


53 | 
OP_INTEGER
 | 
OP_NONINTEGER
 | 
OP_STRING
),

55 
	mOP_BOOLEAN
 = 
OP_FALSE
 | 
OP_TRUE
,

56 
	mOP_NUMBER
 = 
OP_INTEGER
 | 
OP_NONINTEGER
,

58 
	mOP_ID
 = 1 << 
JSON_N_TYPES
,

59 
	mOP_OPTIONAL
 = 1 << (
JSON_N_TYPES
 + 1)

62 
	$ovsdb_∑r£r_öô
(
ovsdb_∑r£r
 *, c⁄° 
js⁄
 *,

63 c⁄° *
«me
, ...)

64 
	`PRINTF_FORMAT
(3, 4);

65 c⁄° 
js⁄
 *
	`ovsdb_∑r£r_membî
(
ovsdb_∑r£r
 *, c⁄° *
«me
,

66 
ovsdb_∑r£r_ty≥s
);

68 
	$ovsdb_∑r£r_øi£_îr‹
(
ovsdb_∑r£r
 *
∑r£r
,

69 c⁄° *
f‹m©
, ...)

70 
	`PRINTF_FORMAT
(2, 3);

71 
boﬁ
 
	`ovsdb_∑r£r_has_îr‹
(c⁄° 
ovsdb_∑r£r
 *);

72 
ovsdb_îr‹
 *
	`ovsdb_∑r£r_gë_îr‹
(c⁄° 
ovsdb_∑r£r
 *);

73 
ovsdb_îr‹
 *
	$ovsdb_∑r£r_föish
(
ovsdb_∑r£r
 *)

74 
WARN_UNUSED_RESULT
;

75 
	`ovsdb_∑r£r_de°roy
(
ovsdb_∑r£r
 *);

77 
boﬁ
 
	`ovsdb_∑r£r_is_id
(c⁄° *
°rög
);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/ovsdb-types.c

16 
	~<c⁄fig.h
>

18 
	~"ovsdb-ty≥s.h
"

20 
	~<Êﬂt.h
>

21 
	~<limôs.h
>

23 
	~"dy«mic-°rög.h
"

24 
	~"js⁄.h
"

25 
	~"ovsdb-d©a.h
"

26 
	~"ovsdb-îr‹.h
"

27 
	~"ovsdb-∑r£r.h
"

29 c⁄° 
ovsdb_ty≥
 
	govsdb_ty≥_öãgî
 =

30 
OVSDB_TYPE_SCALAR_INITIALIZER
(
OVSDB_BASE_INTEGER_INIT
);

31 c⁄° 
ovsdb_ty≥
 
	govsdb_ty≥_ªÆ
 =

32 
OVSDB_TYPE_SCALAR_INITIALIZER
(
OVSDB_BASE_REAL_INIT
);

33 c⁄° 
ovsdb_ty≥
 
	govsdb_ty≥_boﬁón
 =

34 
OVSDB_TYPE_SCALAR_INITIALIZER
(
OVSDB_BASE_BOOLEAN_INIT
);

35 c⁄° 
ovsdb_ty≥
 
	govsdb_ty≥_°rög
 =

36 
OVSDB_TYPE_SCALAR_INITIALIZER
(
OVSDB_BASE_STRING_INIT
);

37 c⁄° 
ovsdb_ty≥
 
	govsdb_ty≥_uuid
 =

38 
OVSDB_TYPE_SCALAR_INITIALIZER
(
OVSDB_BASE_UUID_INIT
);

42 
	$ovsdb_©omic_ty≥_to_°rög
(
ovsdb_©omic_ty≥
 
ty≥
)

44 
ty≥
) {

45 
OVSDB_TYPE_VOID
:

48 
OVSDB_TYPE_INTEGER
:

51 
OVSDB_TYPE_REAL
:

54 
OVSDB_TYPE_BOOLEAN
:

57 
OVSDB_TYPE_STRING
:

60 
OVSDB_TYPE_UUID
:

63 
OVSDB_N_TYPES
:

67 
	}
}

69 
js⁄
 *

70 
	$ovsdb_©omic_ty≥_to_js⁄
(
ovsdb_©omic_ty≥
 
ty≥
)

72  
	`js⁄_°rög_¸óã
(
	`ovsdb_©omic_ty≥_to_°rög
(
ty≥
));

73 
	}
}

75 
boﬁ


76 
	$ovsdb_©omic_ty≥_‰om_°rög
(c⁄° *
°rög
, 
ovsdb_©omic_ty≥
 *
ty≥
)

78 i‡(!
	`°rcmp
(
°rög
, "integer")) {

79 *
ty≥
 = 
OVSDB_TYPE_INTEGER
;

80 } i‡(!
	`°rcmp
(
°rög
, "real")) {

81 *
ty≥
 = 
OVSDB_TYPE_REAL
;

82 } i‡(!
	`°rcmp
(
°rög
, "boolean")) {

83 *
ty≥
 = 
OVSDB_TYPE_BOOLEAN
;

84 } i‡(!
	`°rcmp
(
°rög
, "string")) {

85 *
ty≥
 = 
OVSDB_TYPE_STRING
;

86 } i‡(!
	`°rcmp
(
°rög
, "uuid")) {

87 *
ty≥
 = 
OVSDB_TYPE_UUID
;

89  
Ál£
;

91  
åue
;

92 
	}
}

94 
ovsdb_îr‹
 *

95 
	$ovsdb_©omic_ty≥_‰om_js⁄
(
ovsdb_©omic_ty≥
 *
ty≥
,

96 c⁄° 
js⁄
 *json)

98 i‡(
js⁄
->
ty≥
 =
JSON_STRING
) {

99 i‡(
	`ovsdb_©omic_ty≥_‰om_°rög
(
	`js⁄_°rög
(
js⁄
), 
ty≥
)) {

100  
NULL
;

102 *
ty≥
 = 
OVSDB_TYPE_VOID
;

103  
	`ovsdb_sy¡ax_îr‹
(
js⁄
, 
NULL
,

105 
	`js⁄_°rög
(
js⁄
));

108 *
ty≥
 = 
OVSDB_TYPE_VOID
;

109  
	`ovsdb_sy¡ax_îr‹
(
js⁄
, 
NULL
, "atomic-typeÉxpected");

111 
	}
}

116 
	$ovsdb_ba£_ty≥_öô
(
ovsdb_ba£_ty≥
 *
ba£
, 
ovsdb_©omic_ty≥
 
ty≥
)

118 
ba£
->
ty≥
 =Åype;

119 
ba£
->
íum_
 = 
NULL
;

121 
ba£
->
ty≥
) {

122 
OVSDB_TYPE_VOID
:

125 
OVSDB_TYPE_INTEGER
:

126 
ba£
->
u
.
öãgî
.
mö
 = 
INT64_MIN
;

127 
ba£
->
u
.
öãgî
.
max
 = 
INT64_MAX
;

130 
OVSDB_TYPE_REAL
:

131 
ba£
->
u
.
ªÆ
.
mö
 = -
DBL_MAX
;

132 
ba£
->
u
.
ªÆ
.
max
 = 
DBL_MAX
;

135 
OVSDB_TYPE_BOOLEAN
:

138 
OVSDB_TYPE_STRING
:

139 
ba£
->
u
.
°rög
.
möLí
 = 0;

140 
ba£
->
u
.
°rög
.
maxLí
 = 
UINT_MAX
;

143 
OVSDB_TYPE_UUID
:

144 
ba£
->
u
.
uuid
.
ªfTabÀName
 = 
NULL
;

145 
ba£
->
u
.
uuid
.
ªfTabÀ
 = 
NULL
;

148 
OVSDB_N_TYPES
:

149 
	`NOT_REACHED
();

152 
	`NOT_REACHED
();

154 
	}
}

158 c⁄° 
ovsdb_ty≥
 *

159 
	$ovsdb_ba£_ty≥_gë_íum_ty≥
(
ovsdb_©omic_ty≥
 
©omic_ty≥
)

161 
ovsdb_ty≥
 *
ty≥s
[
OVSDB_N_TYPES
];

163 i‡(!
ty≥s
[
©omic_ty≥
]) {

164 
ovsdb_ty≥
 *
ty≥
;

166 
ty≥s
[
©omic_ty≥
] = 
ty≥
 = 
	`xmÆloc
( *type);

167 
	`ovsdb_ba£_ty≥_öô
(&
ty≥
->
key
, 
©omic_ty≥
);

168 
	`ovsdb_ba£_ty≥_öô
(&
ty≥
->
vÆue
, 
OVSDB_TYPE_VOID
);

169 
ty≥
->
n_mö
 = 1;

170 
ty≥
->
n_max
 = 
UINT_MAX
;

172  
ty≥s
[
©omic_ty≥
];

173 
	}
}

176 
	$ovsdb_ba£_ty≥_˛⁄e
(
ovsdb_ba£_ty≥
 *
d°
,

177 c⁄° 
ovsdb_ba£_ty≥
 *
§c
)

179 *
d°
 = *
§c
;

181 i‡(
§c
->
íum_
) {

182 
d°
->
íum_
 = 
	`xmÆloc
( *dst->enum_);

183 
	`ovsdb_d©um_˛⁄e
(
d°
->
íum_
, 
§c
->enum_,

184 
	`ovsdb_ba£_ty≥_gë_íum_ty≥
(
d°
->
ty≥
));

187 
d°
->
ty≥
) {

188 
OVSDB_TYPE_VOID
:

189 
OVSDB_TYPE_INTEGER
:

190 
OVSDB_TYPE_REAL
:

191 
OVSDB_TYPE_BOOLEAN
:

194 
OVSDB_TYPE_STRING
:

197 
OVSDB_TYPE_UUID
:

198 i‡(
d°
->
u
.
uuid
.
ªfTabÀName
) {

199 
d°
->
u
.
uuid
.
ªfTabÀName
 = 
	`x°rdup
(dst->u.uuid.refTableName);

203 
OVSDB_N_TYPES
:

205 
	`NOT_REACHED
();

207 
	}
}

210 
	$ovsdb_ba£_ty≥_de°roy
(
ovsdb_ba£_ty≥
 *
ba£
)

212 i‡(
ba£
) {

213 i‡(
ba£
->
íum_
) {

214 
	`ovsdb_d©um_de°roy
(
ba£
->
íum_
,

215 
	`ovsdb_ba£_ty≥_gë_íum_ty≥
(
ba£
->
ty≥
));

216 
	`‰ì
(
ba£
->
íum_
);

219 
ba£
->
ty≥
) {

220 
OVSDB_TYPE_VOID
:

221 
OVSDB_TYPE_INTEGER
:

222 
OVSDB_TYPE_REAL
:

223 
OVSDB_TYPE_BOOLEAN
:

226 
OVSDB_TYPE_STRING
:

229 
OVSDB_TYPE_UUID
:

230 
	`‰ì
(
ba£
->
u
.
uuid
.
ªfTabÀName
);

233 
OVSDB_N_TYPES
:

234 
	`NOT_REACHED
();

237 
	`NOT_REACHED
();

240 
	}
}

242 
boﬁ


243 
	$ovsdb_ba£_ty≥_is_vÆid
(c⁄° 
ovsdb_ba£_ty≥
 *
ba£
)

245 
ba£
->
ty≥
) {

246 
OVSDB_TYPE_VOID
:

247  
åue
;

249 
OVSDB_TYPE_INTEGER
:

250  
ba£
->
u
.
öãgî
.
mö
 <ba£->u.öãgî.
max
;

252 
OVSDB_TYPE_REAL
:

253  
ba£
->
u
.
ªÆ
.
mö
 <ba£->u.ªÆ.
max
;

255 
OVSDB_TYPE_BOOLEAN
:

256  
åue
;

258 
OVSDB_TYPE_STRING
:

259  
ba£
->
u
.
°rög
.
möLí
 <ba£->u.°rög.
maxLí
;

261 
OVSDB_TYPE_UUID
:

262  
åue
;

264 
OVSDB_N_TYPES
:

266  
Ál£
;

268 
	}
}

270 
boﬁ


271 
	$ovsdb_ba£_ty≥_has_c⁄°øöts
(c⁄° 
ovsdb_ba£_ty≥
 *
ba£
)

273 i‡(
ba£
->
íum_
) {

274  
åue
;

277 
ba£
->
ty≥
) {

278 
OVSDB_TYPE_VOID
:

279 
	`NOT_REACHED
();

281 
OVSDB_TYPE_INTEGER
:

282  (
ba£
->
u
.
öãgî
.
mö
 !
INT64_MIN


283 || 
ba£
->
u
.
öãgî
.
max
 !
INT64_MAX
);

285 
OVSDB_TYPE_REAL
:

286  (
ba£
->
u
.
ªÆ
.
mö
 !-
DBL_MAX


287 || 
ba£
->
u
.
ªÆ
.
max
 !
DBL_MAX
);

289 
OVSDB_TYPE_BOOLEAN
:

290  
Ál£
;

292 
OVSDB_TYPE_STRING
:

293  
ba£
->
u
.
°rög
.
möLí
 !0 || ba£->u.°rög.
maxLí
 !
UINT_MAX
;

295 
OVSDB_TYPE_UUID
:

296  
ba£
->
u
.
uuid
.
ªfTabÀName
 !
NULL
;

298 
OVSDB_N_TYPES
:

299 
	`NOT_REACHED
();

302 
	`NOT_REACHED
();

304 
	}
}

307 
	$ovsdb_ba£_ty≥_˛ór_c⁄°øöts
(
ovsdb_ba£_ty≥
 *
ba£
)

309 
ovsdb_©omic_ty≥
 
ty≥
 = 
ba£
->type;

310 
	`ovsdb_ba£_ty≥_de°roy
(
ba£
);

311 
	`ovsdb_ba£_ty≥_öô
(
ba£
, 
ty≥
);

312 
	}
}

314 
ovsdb_îr‹
 *

315 
	$∑r£_›ti⁄Æ_uöt
(
ovsdb_∑r£r
 *
∑r£r
, c⁄° *
membî
,

316 *
uöt
)

318 c⁄° 
js⁄
 *json;

320 
js⁄
 = 
	`ovsdb_∑r£r_membî
(
∑r£r
, 
membî
, 
OP_INTEGER
 | 
OP_OPTIONAL
);

321 i‡(
js⁄
) {

322 i‡(
js⁄
->
u
.
öãgî
 < 0 || js⁄->u.öãgî > 
UINT_MAX
) {

323  
	`ovsdb_sy¡ax_îr‹
(
js⁄
, 
NULL
,

325 
membî
, 
UINT_MAX
);

327 *
uöt
 = 
js⁄
->
u
.
öãgî
;

329  
NULL
;

330 
	}
}

332 
ovsdb_îr‹
 *

333 
	$ovsdb_ba£_ty≥_‰om_js⁄
(
ovsdb_ba£_ty≥
 *
ba£
,

334 c⁄° 
js⁄
 *json)

336 
ovsdb_∑r£r
 
∑r£r
;

337 
ovsdb_îr‹
 *
îr‹
;

338 c⁄° 
js⁄
 *
ty≥
, *
íum_
;

340 i‡(
js⁄
->
ty≥
 =
JSON_STRING
) {

341 
îr‹
 = 
	`ovsdb_©omic_ty≥_‰om_js⁄
(&
ba£
->
ty≥
, 
js⁄
);

342 i‡(
îr‹
) {

343  
îr‹
;

345 
	`ovsdb_ba£_ty≥_öô
(
ba£
, ba£->
ty≥
);

346  
NULL
;

349 
	`ovsdb_∑r£r_öô
(&
∑r£r
, 
js⁄
, "ovsdbÅype");

350 
ty≥
 = 
	`ovsdb_∑r£r_membî
(&
∑r£r
, "ty≥", 
OP_STRING
);

351 i‡(
	`ovsdb_∑r£r_has_îr‹
(&
∑r£r
)) {

352 
ba£
->
ty≥
 = 
OVSDB_TYPE_VOID
;

353  
	`ovsdb_∑r£r_föish
(&
∑r£r
);

356 
îr‹
 = 
	`ovsdb_©omic_ty≥_‰om_js⁄
(&
ba£
->
ty≥
,Åype);

357 i‡(
îr‹
) {

358  
îr‹
;

361 
	`ovsdb_ba£_ty≥_öô
(
ba£
, ba£->
ty≥
);

363 
íum_
 = 
	`ovsdb_∑r£r_membî
(&
∑r£r
, "íum", 
OP_ANY
 | 
OP_OPTIONAL
);

364 i‡(
íum_
) {

365 
ba£
->
íum_
 = 
	`xmÆloc
( *base->enum_);

366 
îr‹
 = 
	`ovsdb_d©um_‰om_js⁄
(

367 
ba£
->
íum_
, 
	`ovsdb_ba£_ty≥_gë_íum_ty≥
(ba£->
ty≥
),

368 
íum_
, 
NULL
);

369 i‡(
îr‹
) {

370 
	`‰ì
(
ba£
->
íum_
);

371 
ba£
->
íum_
 = 
NULL
;

373 } i‡(
ba£
->
ty≥
 =
OVSDB_TYPE_INTEGER
) {

374 c⁄° 
js⁄
 *
mö
, *
max
;

376 
mö
 = 
	`ovsdb_∑r£r_membî
(&
∑r£r
, "minInteger",

377 
OP_INTEGER
 | 
OP_OPTIONAL
);

378 
max
 = 
	`ovsdb_∑r£r_membî
(&
∑r£r
, "maxInteger",

379 
OP_INTEGER
 | 
OP_OPTIONAL
);

380 
ba£
->
u
.
öãgî
.
mö
 = mö ? mö->u.öãgî : 
INT64_MIN
;

381 
ba£
->
u
.
öãgî
.
max
 = max ? max->u.öãgî : 
INT64_MAX
;

382 i‡(
ba£
->
u
.
öãgî
.
mö
 > ba£->u.öãgî.
max
) {

383 
îr‹
 = 
	`ovsdb_sy¡ax_îr‹
(
js⁄
, 
NULL
,

386 } i‡(
ba£
->
ty≥
 =
OVSDB_TYPE_REAL
) {

387 c⁄° 
js⁄
 *
mö
, *
max
;

389 
mö
 = 
	`ovsdb_∑r£r_membî
(&
∑r£r
, "möRól", 
OP_NUMBER
 | 
OP_OPTIONAL
);

390 
max
 = 
	`ovsdb_∑r£r_membî
(&
∑r£r
, "maxRól", 
OP_NUMBER
 | 
OP_OPTIONAL
);

391 
ba£
->
u
.
ªÆ
.
mö
 = mö ? 
	`js⁄_ªÆ
(möË: -
DBL_MAX
;

392 
ba£
->
u
.
ªÆ
.
max
 = max ? 
	`js⁄_ªÆ
(maxË: 
DBL_MAX
;

393 i‡(
ba£
->
u
.
ªÆ
.
mö
 > ba£->u.ªÆ.
max
) {

394 
îr‹
 = 
	`ovsdb_sy¡ax_îr‹
(
js⁄
, 
NULL
, "minRealÉxceeds maxReal");

396 } i‡(
ba£
->
ty≥
 =
OVSDB_TYPE_STRING
) {

397 i‡(!
îr‹
) {

398 
îr‹
 = 
	`∑r£_›ti⁄Æ_uöt
(&
∑r£r
, "minLength",

399 &
ba£
->
u
.
°rög
.
möLí
);

401 i‡(!
îr‹
) {

402 
îr‹
 = 
	`∑r£_›ti⁄Æ_uöt
(&
∑r£r
, "maxLength",

403 &
ba£
->
u
.
°rög
.
maxLí
);

405 i‡(!
îr‹
 && 
ba£
->
u
.
°rög
.
möLí
 > ba£->u.°rög.
maxLí
) {

406 
îr‹
 = 
	`ovsdb_sy¡ax_îr‹
(
js⁄
, 
NULL
,

409 } i‡(
ba£
->
ty≥
 =
OVSDB_TYPE_UUID
) {

410 c⁄° 
js⁄
 *
ªfTabÀ
;

412 
ªfTabÀ
 = 
	`ovsdb_∑r£r_membî
(&
∑r£r
, "refTable",

413 
OP_ID
 | 
OP_OPTIONAL
);

414 i‡(
ªfTabÀ
) {

415 c⁄° 
js⁄
 *
ªfTy≥
;

417 
ba£
->
u
.
uuid
.
ªfTabÀName
 = 
	`x°rdup
(
ªfTabÀ
->u.
°rög
);

423 
ªfTy≥
 = 
	`ovsdb_∑r£r_membî
(&
∑r£r
, "refType",

424 
OP_ID
 | 
OP_OPTIONAL
);

425 i‡(
ªfTy≥
) {

426 c⁄° *
ªfTy≥_s
 = 
	`js⁄_°rög
(
ªfTy≥
);

427 i‡(!
	`°rcmp
(
ªfTy≥_s
, "strong")) {

428 
ba£
->
u
.
uuid
.
ªfTy≥
 = 
OVSDB_REF_STRONG
;

429 } i‡(!
	`°rcmp
(
ªfTy≥_s
, "weak")) {

430 
ba£
->
u
.
uuid
.
ªfTy≥
 = 
OVSDB_REF_WEAK
;

432 
îr‹
 = 
	`ovsdb_sy¡ax_îr‹
(
js⁄
, 
NULL
, "refType must be "

434 "\"%s\")", 
ªfTy≥_s
);

437 
ba£
->
u
.
uuid
.
ªfTy≥
 = 
OVSDB_REF_STRONG
;

442 i‡(
îr‹
) {

443 
	`ovsdb_îr‹_de°roy
(
	`ovsdb_∑r£r_föish
(&
∑r£r
));

445 
îr‹
 = 
	`ovsdb_∑r£r_föish
(&
∑r£r
);

447 i‡(
îr‹
) {

448 
	`ovsdb_ba£_ty≥_de°roy
(
ba£
);

449 
ba£
->
ty≥
 = 
OVSDB_TYPE_VOID
;

451  
îr‹
;

452 
	}
}

454 
js⁄
 *

455 
	$ovsdb_ba£_ty≥_to_js⁄
(c⁄° 
ovsdb_ba£_ty≥
 *
ba£
)

457 
js⁄
 *json;

459 i‡(!
	`ovsdb_ba£_ty≥_has_c⁄°øöts
(
ba£
)) {

460  
	`js⁄_°rög_¸óã
(
	`ovsdb_©omic_ty≥_to_°rög
(
ba£
->
ty≥
));

463 
js⁄
 = 
	`js⁄_obje˘_¸óã
();

464 
	`js⁄_obje˘_put_°rög
(
js⁄
, "type",

465 
	`ovsdb_©omic_ty≥_to_°rög
(
ba£
->
ty≥
));

467 i‡(
ba£
->
íum_
) {

468 c⁄° 
ovsdb_ty≥
 *
ty≥
;

470 
ty≥
 = 
	`ovsdb_ba£_ty≥_gë_íum_ty≥
(
ba£
->type);

471 
	`js⁄_obje˘_put
(
js⁄
, "íum", 
	`ovsdb_d©um_to_js⁄
(
ba£
->
íum_
, 
ty≥
));

474 
ba£
->
ty≥
) {

475 
OVSDB_TYPE_VOID
:

476 
	`NOT_REACHED
();

478 
OVSDB_TYPE_INTEGER
:

479 i‡(
ba£
->
u
.
öãgî
.
mö
 !
INT64_MIN
) {

480 
	`js⁄_obje˘_put
(
js⁄
, "minInteger",

481 
	`js⁄_öãgî_¸óã
(
ba£
->
u
.
öãgî
.
mö
));

483 i‡(
ba£
->
u
.
öãgî
.
max
 !
INT64_MAX
) {

484 
	`js⁄_obje˘_put
(
js⁄
, "maxInteger",

485 
	`js⁄_öãgî_¸óã
(
ba£
->
u
.
öãgî
.
max
));

489 
OVSDB_TYPE_REAL
:

490 i‡(
ba£
->
u
.
ªÆ
.
mö
 !-
DBL_MAX
) {

491 
	`js⁄_obje˘_put
(
js⁄
, "minReal",

492 
	`js⁄_ªÆ_¸óã
(
ba£
->
u
.
ªÆ
.
mö
));

494 i‡(
ba£
->
u
.
ªÆ
.
max
 !
DBL_MAX
) {

495 
	`js⁄_obje˘_put
(
js⁄
, "maxReal",

496 
	`js⁄_ªÆ_¸óã
(
ba£
->
u
.
ªÆ
.
max
));

500 
OVSDB_TYPE_BOOLEAN
:

503 
OVSDB_TYPE_STRING
:

504 i‡(
ba£
->
u
.
°rög
.
möLí
 != 0) {

505 
	`js⁄_obje˘_put
(
js⁄
, "minLength",

506 
	`js⁄_öãgî_¸óã
(
ba£
->
u
.
°rög
.
möLí
));

508 i‡(
ba£
->
u
.
°rög
.
maxLí
 !
UINT_MAX
) {

509 
	`js⁄_obje˘_put
(
js⁄
, "maxLength",

510 
	`js⁄_öãgî_¸óã
(
ba£
->
u
.
°rög
.
maxLí
));

514 
OVSDB_TYPE_UUID
:

515 i‡(
ba£
->
u
.
uuid
.
ªfTabÀName
) {

516 
	`js⁄_obje˘_put_°rög
(
js⁄
, "refTable",

517 
ba£
->
u
.
uuid
.
ªfTabÀName
);

518 i‡(
ba£
->
u
.
uuid
.
ªfTy≥
 =
OVSDB_REF_WEAK
) {

519 
	`js⁄_obje˘_put_°rög
(
js⁄
, "refType", "weak");

524 
OVSDB_N_TYPES
:

525 
	`NOT_REACHED
();

528 
	`NOT_REACHED
();

531  
js⁄
;

532 
	}
}

537 
	$ovsdb_ty≥_˛⁄e
(
ovsdb_ty≥
 *
d°
, c⁄° ovsdb_ty≥ *
§c
)

539 
	`ovsdb_ba£_ty≥_˛⁄e
(&
d°
->
key
, &
§c
->key);

540 
	`ovsdb_ba£_ty≥_˛⁄e
(&
d°
->
vÆue
, &
§c
->value);

541 
d°
->
n_mö
 = 
§c
->n_min;

542 
d°
->
n_max
 = 
§c
->n_max;

543 
	}
}

546 
	$ovsdb_ty≥_de°roy
(
ovsdb_ty≥
 *
ty≥
)

548 
	`ovsdb_ba£_ty≥_de°roy
(&
ty≥
->
key
);

549 
	`ovsdb_ba£_ty≥_de°roy
(&
ty≥
->
vÆue
);

550 
	}
}

552 
boﬁ


553 
	$ovsdb_ty≥_is_vÆid
(c⁄° 
ovsdb_ty≥
 *
ty≥
)

555  (
ty≥
->
key
.ty≥ !
OVSDB_TYPE_VOID


556 && 
	`ovsdb_ba£_ty≥_is_vÆid
(&
ty≥
->
key
)

557 && 
	`ovsdb_ba£_ty≥_is_vÆid
(&
ty≥
->
vÆue
)

558 && 
ty≥
->
n_mö
 <= 1

559 && 
ty≥
->
n_max
 >= 1);

560 
	}
}

562 
ovsdb_îr‹
 *

563 
	$n_‰om_js⁄
(c⁄° 
js⁄
 *js⁄, *
n
)

565 i‡(!
js⁄
) {

566  
NULL
;

567 } i‡(
js⁄
->
ty≥
 =
JSON_INTEGER


568 && 
js⁄
->
u
.
öãgî
 >0 && js⁄->u.öãgî < 
UINT_MAX
) {

569 *
n
 = 
js⁄
->
u
.
öãgî
;

570  
NULL
;

572  
	`ovsdb_sy¡ax_îr‹
(
js⁄
, 
NULL
, "bad min or max value");

574 
	}
}

577 
	$ovsdb_ty≥_to_íglish
(c⁄° 
ovsdb_ty≥
 *
ty≥
)

579 c⁄° *
key
 = 
	`ovsdb_©omic_ty≥_to_°rög
(
ty≥
->key.type);

580 c⁄° *
vÆue
 = 
	`ovsdb_©omic_ty≥_to_°rög
(
ty≥
->value.type);

581 i‡(
	`ovsdb_ty≥_is_sˇœr
(
ty≥
)) {

582  
	`x°rdup
(
key
);

584 
ds
 
s
 = 
DS_EMPTY_INITIALIZER
;

585 
	`ds_put_c°r
(&
s
, 
	`ovsdb_ty≥_is_£t
(
ty≥
) ? "set" : "map");

586 i‡(
ty≥
->
n_max
 =
UINT_MAX
) {

587 i‡(
ty≥
->
n_mö
) {

588 
	`ds_put_f‹m©
(&
s
, " o‡%u o∏m‹e", 
ty≥
->
n_mö
);

590 
	`ds_put_c°r
(&
s
, " of");

592 } i‡(
ty≥
->
n_mö
) {

593 
	`ds_put_f‹m©
(&
s
, " o‡%uÅÿ%u", 
ty≥
->
n_mö
,Åy≥->
n_max
);

595 
	`ds_put_f‹m©
(&
s
, " o‡u∞tÿ%u", 
ty≥
->
n_max
);

597 i‡(
	`ovsdb_ty≥_is_£t
(
ty≥
)) {

598 
	`ds_put_f‹m©
(&
s
, " %ss", 
key
);

600 
	`ds_put_f‹m©
(&
s
, " (%s, %sË∑ús", 
key
, 
vÆue
);

602  
	`ds_c°r
(&
s
);

604 
	}
}

606 
ovsdb_îr‹
 *

607 
	$ovsdb_ty≥_‰om_js⁄
(
ovsdb_ty≥
 *
ty≥
, c⁄° 
js⁄
 *json)

609 
	`ovsdb_ba£_ty≥_öô
(&
ty≥
->
vÆue
, 
OVSDB_TYPE_VOID
);

610 
ty≥
->
n_mö
 = 1;

611 
ty≥
->
n_max
 = 1;

613 i‡(
js⁄
->
ty≥
 =
JSON_STRING
) {

614  
	`ovsdb_ba£_ty≥_‰om_js⁄
(&
ty≥
->
key
, 
js⁄
);

615 } i‡(
js⁄
->
ty≥
 =
JSON_OBJECT
) {

616 c⁄° 
js⁄
 *
key
, *
vÆue
, *
mö
, *
max
;

617 
ovsdb_îr‹
 *
îr‹
;

618 
ovsdb_∑r£r
 
∑r£r
;

620 
	`ovsdb_∑r£r_öô
(&
∑r£r
, 
js⁄
, "ovsdbÅype");

621 
key
 = 
	`ovsdb_∑r£r_membî
(&
∑r£r
, "key", 
OP_STRING
 | 
OP_OBJECT
);

622 
vÆue
 = 
	`ovsdb_∑r£r_membî
(&
∑r£r
, "value",

623 
OP_STRING
 | 
OP_OBJECT
 | 
OP_OPTIONAL
);

624 
mö
 = 
	`ovsdb_∑r£r_membî
(&
∑r£r
, "mö", 
OP_INTEGER
 | 
OP_OPTIONAL
);

625 
max
 = 
	`ovsdb_∑r£r_membî
(&
∑r£r
, "max",

626 
OP_INTEGER
 | 
OP_STRING
 | 
OP_OPTIONAL
);

627 
îr‹
 = 
	`ovsdb_∑r£r_föish
(&
∑r£r
);

628 i‡(
îr‹
) {

629  
îr‹
;

632 
îr‹
 = 
	`ovsdb_ba£_ty≥_‰om_js⁄
(&
ty≥
->
key
, key);

633 i‡(
îr‹
) {

634  
îr‹
;

637 i‡(
vÆue
) {

638 
îr‹
 = 
	`ovsdb_ba£_ty≥_‰om_js⁄
(&
ty≥
->
vÆue
, value);

639 i‡(
îr‹
) {

640  
îr‹
;

644 
îr‹
 = 
	`n_‰om_js⁄
(
mö
, &
ty≥
->
n_mö
);

645 i‡(
îr‹
) {

646  
îr‹
;

649 i‡(
max
 && max->
ty≥
 =
JSON_STRING


650 && !
	`°rcmp
(
max
->
u
.
°rög
, "unlimited")) {

651 
ty≥
->
n_max
 = 
UINT_MAX
;

653 
îr‹
 = 
	`n_‰om_js⁄
(
max
, &
ty≥
->
n_max
);

654 i‡(
îr‹
) {

655  
îr‹
;

659 i‡(!
	`ovsdb_ty≥_is_vÆid
(
ty≥
)) {

660  
	`ovsdb_sy¡ax_îr‹
(
js⁄
, 
NULL
,

664  
NULL
;

666  
	`ovsdb_sy¡ax_îr‹
(
js⁄
, 
NULL
, "ovsdbÅypeÉxpected");

668 
	}
}

670 
js⁄
 *

671 
	$ovsdb_ty≥_to_js⁄
(c⁄° 
ovsdb_ty≥
 *
ty≥
)

673 i‡(
	`ovsdb_ty≥_is_sˇœr
(
ty≥
)

674 && !
	`ovsdb_ba£_ty≥_has_c⁄°øöts
(&
ty≥
->
key
)) {

675  
	`ovsdb_ba£_ty≥_to_js⁄
(&
ty≥
->
key
);

677 
js⁄
 *js⁄ = 
	`js⁄_obje˘_¸óã
();

678 
	`js⁄_obje˘_put
(
js⁄
, "key", 
	`ovsdb_ba£_ty≥_to_js⁄
(&
ty≥
->
key
));

679 i‡(
ty≥
->
vÆue
.ty≥ !
OVSDB_TYPE_VOID
) {

680 
	`js⁄_obje˘_put
(
js⁄
, "value",

681 
	`ovsdb_ba£_ty≥_to_js⁄
(&
ty≥
->
vÆue
));

683 i‡(
ty≥
->
n_mö
 != 1) {

684 
	`js⁄_obje˘_put
(
js⁄
, "mö", 
	`js⁄_öãgî_¸óã
(
ty≥
->
n_mö
));

686 i‡(
ty≥
->
n_max
 =
UINT_MAX
) {

687 
	`js⁄_obje˘_put_°rög
(
js⁄
, "max", "unlimited");

688 } i‡(
ty≥
->
n_max
 != 1) {

689 
	`js⁄_obje˘_put
(
js⁄
, "max", 
	`js⁄_öãgî_¸óã
(
ty≥
->
n_max
));

691  
js⁄
;

693 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/ovsdb-types.h

16 #i‚de‡
OVSDB_TYPES_H


17 
	#OVSDB_TYPES_H
 1

	)

19 
	~<Êﬂt.h
>

20 
	~<°dboﬁ.h
>

21 
	~<°döt.h
>

22 
	~"compûî.h
"

23 
	~"uuid.h
"

25 
	gjs⁄
;

28 
	eovsdb_©omic_ty≥
 {

29 
	mOVSDB_TYPE_VOID
,

30 
	mOVSDB_TYPE_INTEGER
,

31 
	mOVSDB_TYPE_REAL
,

32 
	mOVSDB_TYPE_BOOLEAN
,

33 
	mOVSDB_TYPE_STRING
,

34 
	mOVSDB_TYPE_UUID
,

35 
	mOVSDB_N_TYPES


38 
ölöe
 
boﬁ
 
ovsdb_©omic_ty≥_is_vÆid
(
ovsdb_©omic_ty≥
);

39 
boﬁ
 
ovsdb_©omic_ty≥_‰om_°rög
(c⁄° *, 
ovsdb_©omic_ty≥
 *);

40 
ovsdb_îr‹
 *
ovsdb_©omic_ty≥_‰om_js⁄
(
ovsdb_©omic_ty≥
 *,

41 c⁄° 
js⁄
 *);

42 c⁄° *
ovsdb_©omic_ty≥_to_°rög
(
ovsdb_©omic_ty≥
);

43 
js⁄
 *
ovsdb_©omic_ty≥_to_js⁄
(
ovsdb_©omic_ty≥
);

47 
	eovsdb_ªf_ty≥
 {

48 
	mOVSDB_REF_STRONG
,

49 
	mOVSDB_REF_WEAK


52 
	sovsdb_ba£_ty≥
 {

53 
ovsdb_©omic_ty≥
 
	mty≥
;

57 
ovsdb_d©um
 *
	míum_
;

60 
	sovsdb_öãgî_c⁄°øöts
 {

61 
öt64_t
 
	mmö
;

62 
öt64_t
 
	mmax
;

63 } 
	möãgî
;

65 
	sovsdb_ªÆ_c⁄°øöts
 {

66 
	mmö
;

67 
	mmax
;

68 } 
	mªÆ
;

72 
	sovsdb_°rög_c⁄°øöts
 {

73 
	mmöLí
;

74 
	mmaxLí
;

75 } 
	m°rög
;

77 
	sovsdb_uuid_c⁄°øöts
 {

78 *
	mªfTabÀName
;

79 
ovsdb_èbÀ
 *
	mªfTabÀ
;

80 
ovsdb_ªf_ty≥
 
	mªfTy≥
;

81 } 
	muuid
;

82 } 
	mu
;

85 
	#OVSDB_BASE_VOID_INIT
 { .
ty≥
 = 
OVSDB_TYPE_VOID
 }

	)

86 
	#OVSDB_BASE_INTEGER_INIT
 { .
ty≥
 = 
OVSDB_TYPE_INTEGER
, \

87 .
u
.
öãgî
 = { 
INT64_MIN
, 
INT64_MAX
 } }

	)

88 
	#OVSDB_BASE_REAL_INIT
 { .
ty≥
 = 
OVSDB_TYPE_REAL
, \

89 .
u
.
ªÆ
 = { -
DBL_MAX
, DBL_MAX } }

	)

90 
	#OVSDB_BASE_BOOLEAN_INIT
 { .
ty≥
 = 
OVSDB_TYPE_BOOLEAN
 }

	)

91 
	#OVSDB_BASE_STRING_INIT
 { .
ty≥
 = 
OVSDB_TYPE_STRING
, \

92 .
u
.
°rög
 = { 0, 
UINT_MAX
 } }

	)

93 
	#OVSDB_BASE_UUID_INIT
 { .
ty≥
 = 
OVSDB_TYPE_UUID
, \

94 .
u
.
uuid
 = { 
NULL
, NULL, 0 } }

	)

96 
ovsdb_ba£_ty≥_öô
(
ovsdb_ba£_ty≥
 *, 
ovsdb_©omic_ty≥
);

97 
ovsdb_ba£_ty≥_˛⁄e
(
ovsdb_ba£_ty≥
 *,

98 c⁄° 
ovsdb_ba£_ty≥
 *);

99 
ovsdb_ba£_ty≥_de°roy
(
ovsdb_ba£_ty≥
 *);

101 
boﬁ
 
ovsdb_ba£_ty≥_is_vÆid
(c⁄° 
ovsdb_ba£_ty≥
 *);

102 
boﬁ
 
ovsdb_ba£_ty≥_has_c⁄°øöts
(c⁄° 
ovsdb_ba£_ty≥
 *);

103 
ovsdb_ba£_ty≥_˛ór_c⁄°øöts
(
ovsdb_ba£_ty≥
 *);

104 c⁄° 
ovsdb_ty≥
 *
ovsdb_ba£_ty≥_gë_íum_ty≥
(
ovsdb_©omic_ty≥
);

106 
ovsdb_îr‹
 *
	$ovsdb_ba£_ty≥_‰om_js⁄
(
ovsdb_ba£_ty≥
 *,

107 c⁄° 
js⁄
 *)

108 
WARN_UNUSED_RESULT
;

109 
js⁄
 *
	`ovsdb_ba£_ty≥_to_js⁄
(c⁄° 
ovsdb_ba£_ty≥
 *);

111 
ölöe
 
boﬁ
 
	`ovsdb_ba£_ty≥_is_ªf
(c⁄° 
ovsdb_ba£_ty≥
 *);

112 
ölöe
 
boﬁ
 
	`ovsdb_ba£_ty≥_is_°r⁄g_ªf
(

113 c⁄° 
ovsdb_ba£_ty≥
 *);

114 
ölöe
 
boﬁ
 
	`ovsdb_ba£_ty≥_is_wók_ªf
(c⁄° 
ovsdb_ba£_ty≥
 *);

133 
	sovsdb_ty≥
 {

134 
ovsdb_ba£_ty≥
 
key
;

135 
ovsdb_ba£_ty≥
 
vÆue
;

136 
n_mö
;

137 
n_max
;

140 
	#OVSDB_TYPE_SCALAR_INITIALIZER
(
KEY
Ë{ KEY, 
OVSDB_BASE_VOID_INIT
, 1, 1 
	}

	)
}

142 c⁄° 
ovsdb_ty≥
 
ovsdb_ty≥_öãgî
;

143 c⁄° 
ovsdb_ty≥
 
ovsdb_ty≥_ªÆ
;

144 c⁄° 
ovsdb_ty≥
 
ovsdb_ty≥_boﬁón
;

145 c⁄° 
ovsdb_ty≥
 
ovsdb_ty≥_°rög
;

146 c⁄° 
ovsdb_ty≥
 
ovsdb_ty≥_uuid
;

148 
ovsdb_ty≥_˛⁄e
(
ovsdb_ty≥
 *, const ovsdb_type *);

149 
ovsdb_ty≥_de°roy
(
ovsdb_ty≥
 *);

151 
boﬁ
 
ovsdb_ty≥_is_vÆid
(c⁄° 
ovsdb_ty≥
 *);

153 
ölöe
 
boﬁ
 
ovsdb_ty≥_is_sˇœr
(c⁄° 
ovsdb_ty≥
 *);

154 
ölöe
 
boﬁ
 
ovsdb_ty≥_is_›ti⁄Æ
(c⁄° 
ovsdb_ty≥
 *);

155 
ölöe
 
boﬁ
 
ovsdb_ty≥_is_composôe
(c⁄° 
ovsdb_ty≥
 *);

156 
ölöe
 
boﬁ
 
ovsdb_ty≥_is_£t
(c⁄° 
ovsdb_ty≥
 *);

157 
ölöe
 
boﬁ
 
ovsdb_ty≥_is_m≠
(c⁄° 
ovsdb_ty≥
 *);

159 *
ovsdb_ty≥_to_íglish
(c⁄° 
ovsdb_ty≥
 *);

161 
ovsdb_îr‹
 *
	$ovsdb_ty≥_‰om_js⁄
(
ovsdb_ty≥
 *,

162 c⁄° 
js⁄
 *)

163 
WARN_UNUSED_RESULT
;

164 
js⁄
 *
	`ovsdb_ty≥_to_js⁄
(c⁄° 
ovsdb_ty≥
 *);

168 
ölöe
 
boﬁ


169 
	$ovsdb_©omic_ty≥_is_vÆid
(
ovsdb_©omic_ty≥
 
©omic_ty≥
)

171  (Ë
©omic_ty≥
 >0 &&átomic_ty≥ < 
OVSDB_N_TYPES
;

172 
	}
}

174 
ölöe
 
boﬁ


175 
	$ovsdb_ba£_ty≥_is_ªf
(c⁄° 
ovsdb_ba£_ty≥
 *
ba£
)

177  
ba£
->
ty≥
 =
OVSDB_TYPE_UUID
 && ba£->
u
.
uuid
.
ªfTabÀName
;

178 
	}
}

180 
ölöe
 
boﬁ


181 
	$ovsdb_ba£_ty≥_is_°r⁄g_ªf
(c⁄° 
ovsdb_ba£_ty≥
 *
ba£
)

183  (
	`ovsdb_ba£_ty≥_is_ªf
(
ba£
)

184 && 
ba£
->
u
.
uuid
.
ªfTy≥
 =
OVSDB_REF_STRONG
);

185 
	}
}

187 
ölöe
 
boﬁ


188 
	$ovsdb_ba£_ty≥_is_wók_ªf
(c⁄° 
ovsdb_ba£_ty≥
 *
ba£
)

190  (
	`ovsdb_ba£_ty≥_is_ªf
(
ba£
)

191 && 
ba£
->
u
.
uuid
.
ªfTy≥
 =
OVSDB_REF_WEAK
);

192 
	}
}

194 
ölöe
 
boﬁ
 
	$ovsdb_ty≥_is_sˇœr
(c⁄° 
ovsdb_ty≥
 *
ty≥
)

196  (
ty≥
->
vÆue
.ty≥ =
OVSDB_TYPE_VOID


197 && 
ty≥
->
n_mö
 =1 &&Åy≥->
n_max
 == 1);

198 
	}
}

200 
ölöe
 
boﬁ
 
	$ovsdb_ty≥_is_›ti⁄Æ
(c⁄° 
ovsdb_ty≥
 *
ty≥
)

202  
ty≥
->
n_mö
 == 0;

203 
	}
}

205 
ölöe
 
boﬁ
 
	$ovsdb_ty≥_is_composôe
(c⁄° 
ovsdb_ty≥
 *
ty≥
)

207  
ty≥
->
n_max
 > 1;

208 
	}
}

210 
ölöe
 
boﬁ
 
	$ovsdb_ty≥_is_£t
(c⁄° 
ovsdb_ty≥
 *
ty≥
)

212  (
ty≥
->
vÆue
.ty≥ =
OVSDB_TYPE_VOID


213 && (
ty≥
->
n_mö
 !1 ||Åy≥->
n_max
 != 1));

214 
	}
}

216 
ölöe
 
boﬁ
 
	$ovsdb_ty≥_is_m≠
(c⁄° 
ovsdb_ty≥
 *
ty≥
)

218  
ty≥
->
vÆue
.ty≥ !
OVSDB_TYPE_VOID
;

219 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/packets.c

17 
	~<c⁄fig.h
>

18 
	~"∑ckës.h
"

19 
	~<as£π.h
>

20 
	~<¨∑/öë.h
>

21 
	~<sys/sockë.h
>

22 
	~<√töë/ö.h
>

23 
	~<√töë/ù6.h
>

24 
	~<°dlib.h
>

25 
	~"byã-‹dî.h
"

26 
	~"csum.h
"

27 
	~"Êow.h
"

28 
	~"hm≠.h
"

29 
	~"dy«mic-°rög.h
"

30 
	~"oÂbuf.h
"

32 c⁄° 
ö6_addr
 
	gö6addr_exa˘
 = 
IN6ADDR_EXACT_INIT
;

39 
boﬁ


40 
	$dpid_‰om_°rög
(c⁄° *
s
, 
uöt64_t
 *
dpidp
)

42 *
dpidp
 = (
	`°æí
(
s
Ë=16 && 
	`°r•n
(s, "0123456789abcdefABCDEF") == 16

43 ? 
	`°πouŒ
(
s
, 
NULL
, 16)

45  *
dpidp
 != 0;

46 
	}
}

53 
boﬁ


54 
	$ëh_addr_is_ª£rved
(c⁄° 
uöt8_t
 
ó
[
ETH_ADDR_LEN
])

56 
	sëh_addr_node
 {

57 
hm≠_node
 hmap_node;

58 
uöt64_t
 
ó64
;

61 
ëh_addr_node
 
nodes
[] = {

63 { 
HMAP_NODE_NULL_INITIALIZER
, 0x0108c2000000ULL },

64 { 
HMAP_NODE_NULL_INITIALIZER
, 0x0108c2000001ULL },

65 { 
HMAP_NODE_NULL_INITIALIZER
, 0x0108c2000002ULL },

66 { 
HMAP_NODE_NULL_INITIALIZER
, 0x0108c2000003ULL },

67 { 
HMAP_NODE_NULL_INITIALIZER
, 0x0108c2000004ULL },

68 { 
HMAP_NODE_NULL_INITIALIZER
, 0x0108c2000005ULL },

69 { 
HMAP_NODE_NULL_INITIALIZER
, 0x0108c2000006ULL },

70 { 
HMAP_NODE_NULL_INITIALIZER
, 0x0108c2000007ULL },

71 { 
HMAP_NODE_NULL_INITIALIZER
, 0x0108c2000008ULL },

72 { 
HMAP_NODE_NULL_INITIALIZER
, 0x0108c2000009ULL },

73 { 
HMAP_NODE_NULL_INITIALIZER
, 0x0108c200000aULL },

74 { 
HMAP_NODE_NULL_INITIALIZER
, 0x0108c200000bULL },

75 { 
HMAP_NODE_NULL_INITIALIZER
, 0x0108c200000cULL },

76 { 
HMAP_NODE_NULL_INITIALIZER
, 0x0108c200000dULL },

77 { 
HMAP_NODE_NULL_INITIALIZER
, 0x0108c200000eULL },

78 { 
HMAP_NODE_NULL_INITIALIZER
, 0x0108c200000fULL },

81 { 
HMAP_NODE_NULL_INITIALIZER
, 0x00e02b000000ULL },

82 { 
HMAP_NODE_NULL_INITIALIZER
, 0x00e02b000004ULL },

83 { 
HMAP_NODE_NULL_INITIALIZER
, 0x00e02b000006ULL },

86 { 
HMAP_NODE_NULL_INITIALIZER
, 0x01000c000000ULL },

87 { 
HMAP_NODE_NULL_INITIALIZER
, 0x01000cccccccULL },

89 { 
HMAP_NODE_NULL_INITIALIZER
, 0x01000ccccccdULL },

90 { 
HMAP_NODE_NULL_INITIALIZER
, 0x01000ccdcdcdULL },

94 { 
HMAP_NODE_NULL_INITIALIZER
, 0x01000cccccc0ULL },

95 { 
HMAP_NODE_NULL_INITIALIZER
, 0x01000cccccc1ULL },

96 { 
HMAP_NODE_NULL_INITIALIZER
, 0x01000cccccc2ULL },

97 { 
HMAP_NODE_NULL_INITIALIZER
, 0x01000cccccc3ULL },

98 { 
HMAP_NODE_NULL_INITIALIZER
, 0x01000cccccc4ULL },

99 { 
HMAP_NODE_NULL_INITIALIZER
, 0x01000cccccc5ULL },

100 { 
HMAP_NODE_NULL_INITIALIZER
, 0x01000cccccc6ULL },

101 { 
HMAP_NODE_NULL_INITIALIZER
, 0x01000cccccc7ULL },

104 
hm≠
 
addrs
 = 
	`HMAP_INITIALIZER
(&addrs);

105 
ëh_addr_node
 *
node
;

106 
uöt64_t
 
ó64
;

108 i‡(
	`hm≠_is_em±y
(&
addrs
)) {

109 
node
 = 
nodes
;Çodê< &nodes[
	`ARRAY_SIZE
(nodes)];Çode++) {

110 
	`hm≠_ö£π
(&
addrs
, &
node
->
hm≠_node
,

111 
	`hash_2w‹ds
(
node
->
ó64
,Çode->ea64 >> 32));

115 
ó64
 = 
	`ëh_addr_to_uöt64
(
ó
);

116 
	`HMAP_FOR_EACH_IN_BUCKET
 (
node
, 
hm≠_node
, 
	`hash_2w‹ds
(
ó64
,Éa64 >> 32),

117 &
addrs
) {

118 i‡(
node
->
ó64
 ==Éa64) {

119  
åue
;

122  
Ál£
;

123 
	}
}

125 
boﬁ


126 
	$ëh_addr_‰om_°rög
(c⁄° *
s
, 
uöt8_t
 
ó
[
ETH_ADDR_LEN
])

128 i‡(
	`ssˇnf
(
s
, 
ETH_ADDR_SCAN_FMT
, 
	`ETH_ADDR_SCAN_ARGS
(
ó
))

129 =
ETH_ADDR_SCAN_COUNT
) {

130  
åue
;

132 
	`mem£t
(
ó
, 0, 
ETH_ADDR_LEN
);

133  
Ál£
;

135 
	}
}

144 
	$compo£_øΩ
(
oÂbuf
 *
b
, c⁄° 
uöt8_t
 
ëh_§c
[
ETH_ADDR_LEN
])

146 
ëh_hódî
 *
ëh
;

147 
¨p_ëh_hódî
 *
¨p
;

149 
	`oÂbuf_˛ór
(
b
);

150 
	`oÂbuf_¥óŒoc_èûroom
(
b
, 
ETH_HEADER_LEN
 + 
VLAN_HEADER_LEN


151 + 
ARP_ETH_HEADER_LEN
);

152 
	`oÂbuf_ª£rve
(
b
, 
VLAN_HEADER_LEN
);

153 
ëh
 = 
	`oÂbuf_put_unöô
(
b
,  *eth);

154 
	`mem˝y
(
ëh
->
ëh_d°
, 
ëh_addr_brﬂdˇ°
, 
ETH_ADDR_LEN
);

155 
	`mem˝y
(
ëh
->
ëh_§c
,Éth_§c, 
ETH_ADDR_LEN
);

156 
ëh
->
ëh_ty≥
 = 
	`ht⁄s
(
ETH_TYPE_RARP
);

158 
¨p
 = 
	`oÂbuf_put_unöô
(
b
,  *arp);

159 
¨p
->
¨_hrd
 = 
	`ht⁄s
(
ARP_HRD_ETHERNET
);

160 
¨p
->
¨_¥o
 = 
	`ht⁄s
(
ARP_PRO_IP
);

161 
¨p
->
¨_h 
 = áΩ->
¨_sha
;

162 
¨p
->
¨_∂n
 = áΩ->
¨_•a
;

163 
¨p
->
¨_›
 = 
	`ht⁄s
(
ARP_OP_RARP
);

164 
	`mem˝y
(
¨p
->
¨_sha
, 
ëh_§c
, 
ETH_ADDR_LEN
);

165 
¨p
->
¨_•a
 = 
	`ht⁄l
(0);

166 
	`mem˝y
(
¨p
->
¨_tha
, 
ëh_§c
, 
ETH_ADDR_LEN
);

167 
¨p
->
¨_ça
 = 
	`ht⁄l
(0);

168 
	}
}

175 
	$ëh_push_vœn
(
oÂbuf
 *
∑ckë
, 
ovs_be16
 
tci
)

177 
ëh_hódî
 *
eh
 = 
∑ckë
->
d©a
;

178 
vœn_ëh_hódî
 *
veh
;

181 
vœn_ëh_hódî
 
tmp
;

182 
	`mem˝y
(
tmp
.
vëh_d°
, 
eh
->
ëh_d°
, 
ETH_ADDR_LEN
);

183 
	`mem˝y
(
tmp
.
vëh_§c
, 
eh
->
ëh_§c
, 
ETH_ADDR_LEN
);

184 
tmp
.
vëh_ty≥
 = 
	`ht⁄s
(
ETH_TYPE_VLAN
);

185 
tmp
.
vëh_tci
 = 
tci
 & 
	`ht⁄s
(~
VLAN_CFI
);

186 
tmp
.
vëh_√xt_ty≥
 = 
eh
->
ëh_ty≥
;

188 
veh
 = 
	`oÂbuf_push_unöô
(
∑ckë
, 
VLAN_HEADER_LEN
);

189 
	`mem˝y
(
veh
, &
tmp
, Åmp);

191 
∑ckë
->
l2
 =Öackë->
d©a
;

192 
	}
}

198 
	$ëh_p›_vœn
(
oÂbuf
 *
∑ckë
)

200 
vœn_ëh_hódî
 *
veh
 = 
∑ckë
->
l2
;

201 i‡(
∑ckë
->
size
 > *
veh


202 && 
veh
->
vëh_ty≥
 =
	`ht⁄s
(
ETH_TYPE_VLAN
)) {

203 
ëh_hódî
 
tmp
;

205 
	`mem˝y
(
tmp
.
ëh_d°
, 
veh
->
vëh_d°
, 
ETH_ADDR_LEN
);

206 
	`mem˝y
(
tmp
.
ëh_§c
, 
veh
->
vëh_§c
, 
ETH_ADDR_LEN
);

207 
tmp
.
ëh_ty≥
 = 
veh
->
vëh_√xt_ty≥
;

209 
	`oÂbuf_puŒ
(
∑ckë
, 
VLAN_HEADER_LEN
);

210 
∑ckë
->
l2
 = (*Ìackë->l2 + 
VLAN_HEADER_LEN
;

211 
	`mem˝y
(
∑ckë
->
d©a
, &
tmp
, Åmp);

213 
	}
}

219 
	$ëh_‰om_hex
(c⁄° *
hex
, 
oÂbuf
 **
∑ckëp
)

221 
oÂbuf
 *
∑ckë
;

223 
∑ckë
 = *
∑ckëp
 = 
	`oÂbuf_√w
(
	`°æí
(
hex
) / 2);

225 i‡(
	`oÂbuf_put_hex
(
∑ckë
, 
hex
, 
NULL
)[0] != '\0') {

226 
	`oÂbuf_dñëe
(
∑ckë
);

227 *
∑ckëp
 = 
NULL
;

231 i‡(
∑ckë
->
size
 < 
ETH_HEADER_LEN
) {

232 
	`oÂbuf_dñëe
(
∑ckë
);

233 *
∑ckëp
 = 
NULL
;

237  
NULL
;

238 
	}
}

241 
	$ëh_f‹m©_masked
(c⁄° 
uöt8_t
 
ëh
[
ETH_ADDR_LEN
],

242 c⁄° 
uöt8_t
 
mask
[
ETH_ADDR_LEN
], 
ds
 *
s
)

244 
	`ds_put_f‹m©
(
s
, 
ETH_ADDR_FMT
, 
	`ETH_ADDR_ARGS
(
ëh
));

245 i‡(
mask
 && !
	`ëh_mask_is_exa˘
(mask)) {

246 
	`ds_put_f‹m©
(
s
, "/"
ETH_ADDR_FMT
, 
	`ETH_ADDR_ARGS
(
mask
));

248 
	}
}

251 
	$ëh_addr_bô™d
(c⁄° 
uöt8_t
 
§c
[
ETH_ADDR_LEN
],

252 c⁄° 
uöt8_t
 
mask
[
ETH_ADDR_LEN
],

253 
uöt8_t
 
d°
[
ETH_ADDR_LEN
])

255 
i
;

257 
i
 = 0; i < 
ETH_ADDR_LEN
; i++) {

258 
d°
[
i
] = 
§c
[i] & 
mask
[i];

260 
	}
}

268 
	$ù_cou¡_cidr_bôs
(
ovs_be32
 
√tmask
)

270  32 - 
	`˘z
(
	`¡ohl
(
√tmask
));

271 
	}
}

274 
	$ù_f‹m©_masked
(
ovs_be32
 
ù
, ovs_be32 
mask
, 
ds
 *
s
)

276 
	`ds_put_f‹m©
(
s
, 
IP_FMT
, 
	`IP_ARGS
(&
ù
));

277 i‡(
mask
 !
	`ht⁄l
(
UINT32_MAX
)) {

278 i‡(
	`ù_is_cidr
(
mask
)) {

279 
	`ds_put_f‹m©
(
s
, "/%d", 
	`ù_cou¡_cidr_bôs
(
mask
));

281 
	`ds_put_f‹m©
(
s
, "/"
IP_FMT
, 
	`IP_ARGS
(&
mask
));

284 
	}
}

291 
	$f‹m©_ùv6_addr
(*
addr_°r
, c⁄° 
ö6_addr
 *
addr
)

293 
	`öë_¡›
(
AF_INET6
, 
addr
, 
addr_°r
, 
INET6_ADDRSTRLEN
);

294 
	}
}

297 
	$¥öt_ùv6_addr
(
ds
 *
°rög
, c⁄° 
ö6_addr
 *
addr
)

299 *
d°
;

301 
	`ds_ª£rve
(
°rög
, såög->
Àngth
 + 
INET6_ADDRSTRLEN
);

303 
d°
 = 
°rög
->°rög + såög->
Àngth
;

304 
	`f‹m©_ùv6_addr
(
d°
, 
addr
);

305 
°rög
->
Àngth
 +
	`°æí
(
d°
);

306 
	}
}

309 
	$¥öt_ùv6_masked
(
ds
 *
s
, c⁄° 
ö6_addr
 *
addr
,

310 c⁄° 
ö6_addr
 *
mask
)

312 
	`¥öt_ùv6_addr
(
s
, 
addr
);

313 i‡(
mask
 && !
	`ùv6_mask_is_exa˘
(mask)) {

314 i‡(
	`ùv6_is_cidr
(
mask
)) {

315 
cidr_bôs
 = 
	`ùv6_cou¡_cidr_bôs
(
mask
);

316 
	`ds_put_f‹m©
(
s
, "/%d", 
cidr_bôs
);

318 
	`ds_put_ch¨
(
s
, '/');

319 
	`¥öt_ùv6_addr
(
s
, 
mask
);

322 
	}
}

324 
ö6_addr
 
	$ùv6_addr_bô™d
(c⁄° 
ö6_addr
 *
a
,

325 c⁄° 
ö6_addr
 *
b
)

327 
i
;

328 
ö6_addr
 
d°
;

330 #ifde‡
s6_addr32


331 
i
=0; i<4; i++) {

332 
d°
.
s6_addr32
[
i
] = 
a
->s6_addr32[i] & 
b
->s6_addr32[i];

335 
i
=0; i<16; i++) {

336 
d°
.
s6_addr
[
i
] = 
a
->s6_addr[i] & 
b
->s6_addr[i];

340  
d°
;

341 
	}
}

345 
ö6_addr


346 
	$ùv6_¸óã_mask
(
mask
)

348 
ö6_addr
 
√tmask
;

349 
uöt8_t
 *
√tmaskp
 = &
√tmask
.
s6_addr
[0];

351 
	`mem£t
(&
√tmask
, 0, Çetmask);

352 
mask
 > 8) {

353 *
√tmaskp
 = 0xff;

354 
√tmaskp
++;

355 
mask
 -= 8;

358 i‡(
mask
) {

359 *
√tmaskp
 = 0xf‡<< (8 - 
mask
);

362  
√tmask
;

363 
	}
}

372 
	$ùv6_cou¡_cidr_bôs
(c⁄° 
ö6_addr
 *
√tmask
)

374 
i
;

375 
cou¡
 = 0;

376 c⁄° 
uöt8_t
 *
√tmaskp
 = &
√tmask
->
s6_addr
[0];

378 
i
=0; i<16; i++) {

379 i‡(
√tmaskp
[
i
] == 0xff) {

380 
cou¡
 += 8;

382 
uöt8_t
 
nm
;

384 
nm
 = 
√tmaskp
[
i
];Çm;Çm <<= 1) {

385 
cou¡
++;

392  
cou¡
;

393 
	}
}

397 
boﬁ


398 
	$ùv6_is_cidr
(c⁄° 
ö6_addr
 *
√tmask
)

400 c⁄° 
uöt8_t
 *
√tmaskp
 = &
√tmask
->
s6_addr
[0];

401 
i
;

403 
i
=0; i<16; i++) {

404 i‡(
√tmaskp
[
i
] != 0xff) {

405 
uöt8_t
 
x
 = ~
√tmaskp
[
i
];

406 i‡(
x
 & (x + 1)) {

407  
Ál£
;

409 ++
i
 < 16) {

410 i‡(
√tmaskp
[
i
]) {

411  
Ál£
;

417  
åue
;

418 
	}
}

429 
	$ëh_compo£
(
oÂbuf
 *
b
, c⁄° 
uöt8_t
 
ëh_d°
[
ETH_ADDR_LEN
],

430 c⁄° 
uöt8_t
 
ëh_§c
[
ETH_ADDR_LEN
], 
uöt16_t
 
ëh_ty≥
,

431 
size_t
 
size
)

433 *
d©a
;

434 
ëh_hódî
 *
ëh
;

436 
	`oÂbuf_˛ór
(
b
);

438 
	`oÂbuf_¥óŒoc_èûroom
(
b
, 
ETH_HEADER_LEN
 + 
VLAN_HEADER_LEN
 + 
size
);

439 
	`oÂbuf_ª£rve
(
b
, 
VLAN_HEADER_LEN
);

440 
ëh
 = 
	`oÂbuf_put_unöô
(
b
, 
ETH_HEADER_LEN
);

441 
d©a
 = 
	`oÂbuf_put_unöô
(
b
, 
size
);

443 
	`mem˝y
(
ëh
->
ëh_d°
,Éth_d°, 
ETH_ADDR_LEN
);

444 
	`mem˝y
(
ëh
->
ëh_§c
,Éth_§c, 
ETH_ADDR_LEN
);

445 
ëh
->
ëh_ty≥
 = 
	`ht⁄s
(eth_type);

447 
b
->
l2
 = 
ëh
;

448 
b
->
l3
 = 
d©a
;

450  
d©a
;

451 
	}
}

454 
	$∑ckë_£t_ùv4_addr
(
oÂbuf
 *
∑ckë
, 
ovs_be32
 *
addr
, ovs_be32 
√w_addr
)

456 
ù_hódî
 *
nh
 = 
∑ckë
->
l3
;

458 i‡(
nh
->
ù_¥Ÿo
 =
IPPROTO_TCP
 && 
∑ckë
->
l7
) {

459 
t˝_hódî
 *
th
 = 
∑ckë
->
l4
;

461 
th
->
t˝_csum
 = 
	`ªˇlc_csum32
—h->t˝_csum, *
addr
, 
√w_addr
);

462 } i‡(
nh
->
ù_¥Ÿo
 =
IPPROTO_UDP
 && 
∑ckë
->
l7
) {

463 
udp_hódî
 *
uh
 = 
∑ckë
->
l4
;

465 i‡(
uh
->
udp_csum
) {

466 
uh
->
udp_csum
 = 
	`ªˇlc_csum32
(uh->udp_csum, *
addr
, 
√w_addr
);

467 i‡(!
uh
->
udp_csum
) {

468 
uh
->
udp_csum
 = 
	`ht⁄s
(0xffff);

472 
nh
->
ù_csum
 = 
	`ªˇlc_csum32
“h->ù_csum, *
addr
, 
√w_addr
);

473 *
addr
 = 
√w_addr
;

474 
	}
}

480 
boﬁ


481 
	$∑ckë_rh_¥e£¡
(
oÂbuf
 *
∑ckë
)

483 c⁄° 
ù6_hdr
 *
nh
;

484 
√xthdr
;

485 
size_t
 
Àn
;

486 
size_t
 
ªmaöög
;

487 
uöt8_t
 *
d©a
 = 
∑ckë
->
l3
;

489 
ªmaöög
 = (
uöt8_t
 *)
∑ckë
->
l4
 - (uöt8_à*Ìackë->
l3
;

491 i‡(
ªmaöög
 <  *
nh
) {

492  
Ál£
;

494 
nh
 = (
ù6_hdr
 *)
d©a
;

495 
d©a
 + *
nh
;

496 
ªmaöög
 - *
nh
;

497 
√xthdr
 = 
nh
->
ù6_nxt
;

500 i‡((
√xthdr
 !
IPPROTO_HOPOPTS
)

501 && (
√xthdr
 !
IPPROTO_ROUTING
)

502 && (
√xthdr
 !
IPPROTO_DSTOPTS
)

503 && (
√xthdr
 !
IPPROTO_AH
)

504 && (
√xthdr
 !
IPPROTO_FRAGMENT
)) {

516 i‡(
ªmaöög
 < 8) {

517  
Ál£
;

520 i‡(
√xthdr
 =
IPPROTO_AH
) {

525 c⁄° 
ù6_ext
 *
ext_hdr
 = (ù6_exà*)
d©a
;

527 
√xthdr
 = 
ext_hdr
->
ù6e_nxt
;

528 
Àn
 = (
ext_hdr
->
ù6e_Àn
 + 2) * 4;

529 } i‡(
√xthdr
 =
IPPROTO_FRAGMENT
) {

530 c⁄° 
ù6_‰ag
 *
‰ag_hdr
 = (ù6_‰ag *)
d©a
;

532 
√xthdr
 = 
‰ag_hdr
->
ù6f_nxt
;

533 
Àn
 =  *
‰ag_hdr
;

534 } i‡(
√xthdr
 =
IPPROTO_ROUTING
) {

535 c⁄° 
ù6_πhdr
 *
rh
 = (ù6_πhd∏*)
d©a
;

537 i‡(
rh
->
ù6r_£gÀ·
 > 0) {

538  
åue
;

541 
√xthdr
 = 
rh
->
ù6r_nxt
;

542 
Àn
 = (
rh
->
ù6r_Àn
 + 1) * 8;

544 c⁄° 
ù6_ext
 *
ext_hdr
 = (ù6_exà*)
d©a
;

546 
√xthdr
 = 
ext_hdr
->
ù6e_nxt
;

547 
Àn
 = (
ext_hdr
->
ù6e_Àn
 + 1) * 8;

550 i‡(
ªmaöög
 < 
Àn
) {

551  
Ál£
;

553 
ªmaöög
 -
Àn
;

554 
d©a
 +
Àn
;

557  
Ál£
;

558 
	}
}

561 
	$∑ckë_upd©e_csum128
(
oÂbuf
 *
∑ckë
, 
uöt8_t
 
¥Ÿo
,

562 
ovs_be32
 
addr
[4], c⁄° ovs_be32 
√w_addr
[4])

564 i‡(
¥Ÿo
 =
IPPROTO_TCP
 && 
∑ckë
->
l7
) {

565 
t˝_hódî
 *
th
 = 
∑ckë
->
l4
;

567 
th
->
t˝_csum
 = 
	`ªˇlc_csum128
—h->t˝_csum, 
addr
, 
√w_addr
);

568 } i‡(
¥Ÿo
 =
IPPROTO_UDP
 && 
∑ckë
->
l7
) {

569 
udp_hódî
 *
uh
 = 
∑ckë
->
l4
;

571 i‡(
uh
->
udp_csum
) {

572 
uh
->
udp_csum
 = 
	`ªˇlc_csum128
(uh->udp_csum, 
addr
, 
√w_addr
);

573 i‡(!
uh
->
udp_csum
) {

574 
uh
->
udp_csum
 = 
	`ht⁄s
(0xffff);

578 
	}
}

581 
	$∑ckë_£t_ùv6_addr
(
oÂbuf
 *
∑ckë
, 
uöt8_t
 
¥Ÿo
,

582 
ö6_addr
 *
addr
, c⁄° 
ovs_be32
 
√w_addr
[4],

583 
boﬁ
 
ªˇlcuœã_csum
)

585 i‡(
ªˇlcuœã_csum
) {

586 
	`∑ckë_upd©e_csum128
(
∑ckë
, 
¥Ÿo
, (
ovs_be32
 *)
addr
, 
√w_addr
);

588 
	`mem˝y
(
addr
, 
√w_addr
, (*addr));

589 
	}
}

592 
	$∑ckë_£t_ùv6_Êow_œbñ
(
ovs_be32
 *
Êow_œbñ
, ovs_be32 
Êow_key
)

594 *
Êow_œbñ
 = (*Êow_œbñ & 
	`ht⁄l
(~
IPV6_LABEL_MASK
)Ë| 
Êow_key
;

595 
	}
}

598 
	$∑ckë_£t_ùv6_tc
(
ovs_be32
 *
Êow_œbñ
, 
uöt8_t
 
tc
)

600 *
Êow_œbñ
 = (*Êow_œbñ & 
	`ht⁄l
(0xF00FFFFF)Ë| ht⁄l(
tc
 << 20);

601 
	}
}

608 
	$∑ckë_£t_ùv4
(
oÂbuf
 *
∑ckë
, 
ovs_be32
 
§c
, ovs_be32 
d°
,

609 
uöt8_t
 
tos
, uöt8_à
âl
)

611 
ù_hódî
 *
nh
 = 
∑ckë
->
l3
;

613 i‡(
nh
->
ù_§c
 !
§c
) {

614 
	`∑ckë_£t_ùv4_addr
(
∑ckë
, &
nh
->
ù_§c
, 
§c
);

617 i‡(
nh
->
ù_d°
 !
d°
) {

618 
	`∑ckë_£t_ùv4_addr
(
∑ckë
, &
nh
->
ù_d°
, 
d°
);

621 i‡(
nh
->
ù_tos
 !
tos
) {

622 
uöt8_t
 *
fõld
 = &
nh
->
ù_tos
;

624 
nh
->
ù_csum
 = 
	`ªˇlc_csum16
“h->ù_csum, 
	`ht⁄s
((
uöt16_t
Ë*
fõld
),

625 
	`ht⁄s
((
uöt16_t
Ë
tos
));

626 *
fõld
 = 
tos
;

629 i‡(
nh
->
ù_âl
 !
âl
) {

630 
uöt8_t
 *
fõld
 = &
nh
->
ù_âl
;

632 
nh
->
ù_csum
 = 
	`ªˇlc_csum16
“h->ù_csum, 
	`ht⁄s
(*
fõld
 << 8),

633 
	`ht⁄s
(
âl
 << 8));

634 *
fõld
 = 
âl
;

636 
	}
}

643 
	$∑ckë_£t_ùv6
(
oÂbuf
 *
∑ckë
, 
uöt8_t
 
¥Ÿo
, c⁄° 
ovs_be32
 
§c
[4],

644 c⁄° 
ovs_be32
 
d°
[4], 
uöt8_t
 
key_tc
, ovs_be32 
key_Ê
,

645 
uöt8_t
 
key_hl
)

647 
ù6_hdr
 *
nh
 = 
∑ckë
->
l3
;

649 i‡(
	`memcmp
(&
nh
->
ù6_§c
, 
§c
, (
ovs_be32
[4]))) {

650 
	`∑ckë_£t_ùv6_addr
(
∑ckë
, 
¥Ÿo
, &
nh
->
ù6_§c
, 
§c
, 
åue
);

653 i‡(
	`memcmp
(&
nh
->
ù6_d°
, 
d°
, (
ovs_be32
[4]))) {

654 
	`∑ckë_£t_ùv6_addr
(
∑ckë
, 
¥Ÿo
, &
nh
->
ù6_d°
, 
d°
,

655 !
	`∑ckë_rh_¥e£¡
(
∑ckë
));

658 
	`∑ckë_£t_ùv6_tc
(&
nh
->
ù6_Êow
, 
key_tc
);

660 
	`∑ckë_£t_ùv6_Êow_œbñ
(&
nh
->
ù6_Êow
, 
key_Ê
);

662 
nh
->
ù6_hlim
 = 
key_hl
;

663 
	}
}

666 
	$∑ckë_£t_p‹t
(
ovs_be16
 *
p‹t
, ovs_be16 
√w_p‹t
, ovs_be16 *
csum
)

668 i‡(*
p‹t
 !
√w_p‹t
) {

669 *
csum
 = 
	`ªˇlc_csum16
(*csum, *
p‹t
, 
√w_p‹t
);

670 *
p‹t
 = 
√w_p‹t
;

672 
	}
}

678 
	$∑ckë_£t_t˝_p‹t
(
oÂbuf
 *
∑ckë
, 
ovs_be16
 
§c
, ovs_be16 
d°
)

680 
t˝_hódî
 *
th
 = 
∑ckë
->
l4
;

682 
	`∑ckë_£t_p‹t
(&
th
->
t˝_§c
, 
§c
, &th->
t˝_csum
);

683 
	`∑ckë_£t_p‹t
(&
th
->
t˝_d°
, 
d°
, &th->
t˝_csum
);

684 
	}
}

690 
	$∑ckë_£t_udp_p‹t
(
oÂbuf
 *
∑ckë
, 
ovs_be16
 
§c
, ovs_be16 
d°
)

692 
udp_hódî
 *
uh
 = 
∑ckë
->
l4
;

694 i‡(
uh
->
udp_csum
) {

695 
	`∑ckë_£t_p‹t
(&
uh
->
udp_§c
, 
§c
, &uh->
udp_csum
);

696 
	`∑ckë_£t_p‹t
(&
uh
->
udp_d°
, 
d°
, &uh->
udp_csum
);

698 i‡(!
uh
->
udp_csum
) {

699 
uh
->
udp_csum
 = 
	`ht⁄s
(0xffff);

702 
uh
->
udp_§c
 = 
§c
;

703 
uh
->
udp_d°
 = 
d°
;

705 
	}
}

711 
uöt8_t


712 
	$∑ckë_gë_t˝_Êags
(c⁄° 
oÂbuf
 *
∑ckë
, c⁄° 
Êow
 *flow)

714 i‡((
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IP
) ||

715 
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IPV6
)) &&

716 
Êow
->
nw_¥Ÿo
 =
IPPROTO_TCP
 && 
∑ckë
->
l7
) {

717 c⁄° 
t˝_hódî
 *
t˝
 = 
∑ckë
->
l4
;

718  
	`TCP_FLAGS
(
t˝
->
t˝_˘l
);

722 
	}
}

728 
	$∑ckë_f‹m©_t˝_Êags
(
ds
 *
s
, 
uöt8_t
 
t˝_Êags
)

730 i‡(!
t˝_Êags
) {

731 
	`ds_put_c°r
(
s
, "none");

735 i‡(
t˝_Êags
 & 
TCP_SYN
) {

736 
	`ds_put_ch¨
(
s
, 'S');

738 i‡(
t˝_Êags
 & 
TCP_FIN
) {

739 
	`ds_put_ch¨
(
s
, 'F');

741 i‡(
t˝_Êags
 & 
TCP_PSH
) {

742 
	`ds_put_ch¨
(
s
, 'P');

744 i‡(
t˝_Êags
 & 
TCP_RST
) {

745 
	`ds_put_ch¨
(
s
, 'R');

747 i‡(
t˝_Êags
 & 
TCP_URG
) {

748 
	`ds_put_ch¨
(
s
, 'U');

750 i‡(
t˝_Êags
 & 
TCP_ACK
) {

751 
	`ds_put_ch¨
(
s
, '.');

753 i‡(
t˝_Êags
 & 0x40) {

754 
	`ds_put_c°r
(
s
, "[40]");

756 i‡(
t˝_Êags
 & 0x80) {

757 
	`ds_put_c°r
(
s
, "[80]");

759 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/packets.h

17 #i‚de‡
PACKETS_H


18 
	#PACKETS_H
 1

	)

20 
	~<öây≥s.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<√töë/ö.h
>

23 
	~<°döt.h
>

24 
	~<°rög.h
>

25 
	~"compûî.h
"

26 
	~"›ívswôch/ty≥s.h
"

27 
	~"øndom.h
"

28 
	~"utû.h
"

30 
	goÂbuf
;

31 
	gds
;

32 
	gÊow
;

34 
boﬁ
 
dpid_‰om_°rög
(c⁄° *
s
, 
uöt64_t
 *
dpidp
);

36 
	#ETH_ADDR_LEN
 6

	)

38 c⁄° 
uöt8_t
 
	gëh_addr_brﬂdˇ°
[
ETH_ADDR_LEN
] 
	gOVS_UNUSED


41 c⁄° 
uöt8_t
 
	gëh_addr_°p
[
ETH_ADDR_LEN
] 
	gOVS_UNUSED


44 c⁄° 
uöt8_t
 
	gëh_addr_œ˝
[
ETH_ADDR_LEN
] 
	gOVS_UNUSED


47 
ölöe
 
boﬁ
 
	$ëh_addr_is_brﬂdˇ°
(c⁄° 
uöt8_t
 
ó
[6])

49  (
ó
[0] &Éa[1] &Éa[2] &Éa[3] &Éa[4] &Éa[5]) == 0xff;

50 
	}
}

52 
ölöe
 
boﬁ
 
	$ëh_addr_is_mu…iˇ°
(c⁄° 
uöt8_t
 
ó
[6])

54  
ó
[0] & 1;

55 
	}
}

56 
ölöe
 
boﬁ
 
	$ëh_addr_is_loˇl
(c⁄° 
uöt8_t
 
ó
[6])

60  
ó
[0] & 2

61 || (
ó
[0] == 0x00 &&Éa[1] == 0x23 &&Éa[2] == 0x20 &&Éa[3] & 0x80);

62 
	}
}

63 
ölöe
 
boﬁ
 
	$ëh_addr_is_zîo
(c⁄° 
uöt8_t
 
ó
[6])

65  !(
ó
[0] |Éa[1] |Éa[2] |Éa[3] |Éa[4] |Éa[5]);

66 
	}
}

68 
ölöe
 
	$ëh_mask_is_exa˘
(c⁄° 
uöt8_t
 
ó
[
ETH_ADDR_LEN
])

70  (
ó
[0] &Éa[1] &Éa[2] &Éa[3] &Éa[4] &Éa[5]) == 0xff;

71 
	}
}

73 
ölöe
 
	$ëh_addr_com∑ª_3way
(c⁄° 
uöt8_t
 
a
[
ETH_ADDR_LEN
],

74 c⁄° 
uöt8_t
 
b
[
ETH_ADDR_LEN
])

76  
	`memcmp
(
a
, 
b
, 
ETH_ADDR_LEN
);

77 
	}
}

78 
ölöe
 
boﬁ
 
	$ëh_addr_equÆs
(c⁄° 
uöt8_t
 
a
[
ETH_ADDR_LEN
],

79 c⁄° 
uöt8_t
 
b
[
ETH_ADDR_LEN
])

81  !
	`ëh_addr_com∑ª_3way
(
a
, 
b
);

82 
	}
}

83 
ölöe
 
boﬁ
 
	$ëh_addr_equÆ_ex˚±
(c⁄° 
uöt8_t
 
a
[
ETH_ADDR_LEN
],

84 c⁄° 
uöt8_t
 
b
[
ETH_ADDR_LEN
],

85 c⁄° 
uöt8_t
 
mask
[
ETH_ADDR_LEN
])

87  !(((
a
[0] ^ 
b
[0]Ë& 
mask
[0])

88 || ((
a
[1] ^ 
b
[1]Ë& 
mask
[1])

89 || ((
a
[2] ^ 
b
[2]Ë& 
mask
[2])

90 || ((
a
[3] ^ 
b
[3]Ë& 
mask
[3])

91 || ((
a
[4] ^ 
b
[4]Ë& 
mask
[4])

92 || ((
a
[5] ^ 
b
[5]Ë& 
mask
[5]));

93 
	}
}

94 
ölöe
 
uöt64_t
 
	$ëh_addr_to_uöt64
(c⁄° 
uöt8_t
 
ó
[
ETH_ADDR_LEN
])

96  (((
uöt64_t
Ë
ó
[0] << 40)

97 | ((
uöt64_t
Ë
ó
[1] << 32)

98 | ((
uöt64_t
Ë
ó
[2] << 24)

99 | ((
uöt64_t
Ë
ó
[3] << 16)

100 | ((
uöt64_t
Ë
ó
[4] << 8)

101 | 
ó
[5]);

102 
	}
}

103 
ölöe
 
	$ëh_addr_‰om_uöt64
(
uöt64_t
 
x
, 
uöt8_t
 
ó
[
ETH_ADDR_LEN
])

105 
ó
[0] = 
x
 >> 40;

106 
ó
[1] = 
x
 >> 32;

107 
ó
[2] = 
x
 >> 24;

108 
ó
[3] = 
x
 >> 16;

109 
ó
[4] = 
x
 >> 8;

110 
ó
[5] = 
x
;

111 
	}
}

112 
ölöe
 
	$ëh_addr_m¨k_øndom
(
uöt8_t
 
ó
[
ETH_ADDR_LEN
])

114 
ó
[0] &= ~1;

115 
ó
[0] |= 2;

116 
	}
}

117 
ölöe
 
	$ëh_addr_øndom
(
uöt8_t
 
ó
[
ETH_ADDR_LEN
])

119 
	`øndom_byãs
(
ó
, 
ETH_ADDR_LEN
);

120 
	`ëh_addr_m¨k_øndom
(
ó
);

121 
	}
}

122 
ölöe
 
	$ëh_addr_nicúa_øndom
(
uöt8_t
 
ó
[
ETH_ADDR_LEN
])

124 
	`ëh_addr_øndom
(
ó
);

127 
ó
[0] = 0x00;

128 
ó
[1] = 0x23;

129 
ó
[2] = 0x20;

132 
ó
[3] |= 0x80;

133 
	}
}

135 
boﬁ
 
ëh_addr_is_ª£rved
(c⁄° 
uöt8_t
 
ó
[
ETH_ADDR_LEN
]);

136 
boﬁ
 
ëh_addr_‰om_°rög
(c⁄° *, 
uöt8_t
 
ó
[
ETH_ADDR_LEN
]);

138 
compo£_øΩ
(
oÂbuf
 *, c⁄° 
uöt8_t
 
ëh_§c
[
ETH_ADDR_LEN
]);

140 
ëh_push_vœn
(
oÂbuf
 *, 
ovs_be16
 
tci
);

141 
ëh_p›_vœn
(
oÂbuf
 *);

143 c⁄° *
ëh_‰om_hex
(c⁄° *
hex
, 
oÂbuf
 **
∑ckëp
);

144 
ëh_f‹m©_masked
(c⁄° 
uöt8_t
 
ëh
[
ETH_ADDR_LEN
],

145 c⁄° 
uöt8_t
 
mask
[
ETH_ADDR_LEN
], 
ds
 *
s
);

146 
ëh_addr_bô™d
(c⁄° 
uöt8_t
 
§c
[
ETH_ADDR_LEN
],

147 c⁄° 
uöt8_t
 
mask
[
ETH_ADDR_LEN
],

148 
uöt8_t
 
d°
[
ETH_ADDR_LEN
]);

157 
	#ETH_ADDR_FMT
 \

158 "%02"
PRIx8
":%02"PRIx8":%02"PRIx8":%02"PRIx8":%02"PRIx8":%02"
	)
PRIx8

159 
	#ETH_ADDR_ARGS
(
ó
) \

160 (
ó
)[0], (ó)[1], (ó)[2], (ó)[3], (ó)[4], (ó)[5]

	)

173 
	#ETH_ADDR_SCAN_FMT
 "%"
SCNx8
":%"SCNx8":%"SCNx8":%"SCNx8":%"SCNx8":%"
	)
SCNx8

174 
	#ETH_ADDR_SCAN_ARGS
(
ó
) \

175 &(
ó
)[0], &”a)[1], &”a)[2], &”a)[3], &”a)[4], &”a)[5]

	)

176 
	#ETH_ADDR_SCAN_COUNT
 6

	)

178 
	#ETH_TYPE_IP
 0x0800

	)

179 
	#ETH_TYPE_ARP
 0x0806

	)

180 
	#ETH_TYPE_VLAN
 0x8100

	)

181 
	#ETH_TYPE_IPV6
 0x86dd

	)

182 
	#ETH_TYPE_LACP
 0x8809

	)

183 
	#ETH_TYPE_RARP
 0x8035

	)

184 
	#ETH_TYPE_MPLS
 0x8847

	)

185 
	#ETH_TYPE_MPLS_MCAST
 0x8848

	)

189 
	#ETH_TYPE_MIN
 0x600

	)

191 
	#ETH_HEADER_LEN
 14

	)

192 
	#ETH_PAYLOAD_MIN
 46

	)

193 
	#ETH_PAYLOAD_MAX
 1500

	)

194 
	#ETH_TOTAL_MIN
 (
ETH_HEADER_LEN
 + 
ETH_PAYLOAD_MIN
)

	)

195 
	#ETH_TOTAL_MAX
 (
ETH_HEADER_LEN
 + 
ETH_PAYLOAD_MAX
)

	)

196 
	#ETH_VLAN_TOTAL_MAX
 (
ETH_HEADER_LEN
 + 
VLAN_HEADER_LEN
 + 
ETH_PAYLOAD_MAX
)

	)

197 
	sëh_hódî
 {

198 
uöt8_t
 
	mëh_d°
[
ETH_ADDR_LEN
];

199 
uöt8_t
 
	mëh_§c
[
ETH_ADDR_LEN
];

200 
ovs_be16
 
	mëh_ty≥
;

201 } 
__©åibuã__
((
∑cked
));

202 
BUILD_ASSERT_DECL
(
ETH_HEADER_LEN
 =(
ëh_hódî
));

204 
	#LLC_DSAP_SNAP
 0xØ

	)

205 
	#LLC_SSAP_SNAP
 0xØ

	)

206 
	#LLC_CNTL_SNAP
 3

	)

208 
	#LLC_HEADER_LEN
 3

	)

209 
	sŒc_hódî
 {

210 
uöt8_t
 
	mŒc_dßp
;

211 
uöt8_t
 
	mŒc_sßp
;

212 
uöt8_t
 
	mŒc_˙é
;

213 } 
__©åibuã__
((
∑cked
));

214 
BUILD_ASSERT_DECL
(
LLC_HEADER_LEN
 =(
Œc_hódî
));

216 
	#SNAP_ORG_ETHERNET
 "\0\0"

	)

218 
	#SNAP_HEADER_LEN
 5

	)

219 
	s¢≠_hódî
 {

220 
uöt8_t
 
	m¢≠_‹g
[3];

221 
ovs_be16
 
	m¢≠_ty≥
;

222 } 
__©åibuã__
((
∑cked
));

223 
BUILD_ASSERT_DECL
(
SNAP_HEADER_LEN
 =(
¢≠_hódî
));

225 
	#LLC_SNAP_HEADER_LEN
 (
LLC_HEADER_LEN
 + 
SNAP_HEADER_LEN
)

	)

226 
	sŒc_¢≠_hódî
 {

227 
Œc_hódî
 
	mŒc
;

228 
¢≠_hódî
 
	m¢≠
;

229 } 
__©åibuã__
((
∑cked
));

230 
BUILD_ASSERT_DECL
(
LLC_SNAP_HEADER_LEN
 =(
Œc_¢≠_hódî
));

232 
	#VLAN_VID_MASK
 0x0fff

	)

233 
	#VLAN_VID_SHIFT
 0

	)

235 
	#VLAN_PCP_MASK
 0xe000

	)

236 
	#VLAN_PCP_SHIFT
 13

	)

238 
	#VLAN_CFI
 0x1000

	)

242 
ölöe
 
uöt16_t


243 
	$vœn_tci_to_vid
(
ovs_be16
 
vœn_tci
)

245  (
	`¡ohs
(
vœn_tci
Ë& 
VLAN_VID_MASK
Ë>> 
VLAN_VID_SHIFT
;

246 
	}
}

250 
ölöe
 

251 
	$vœn_tci_to_p˝
(
ovs_be16
 
vœn_tci
)

253  (
	`¡ohs
(
vœn_tci
Ë& 
VLAN_PCP_MASK
Ë>> 
VLAN_PCP_SHIFT
;

254 
	}
}

256 
	#VLAN_HEADER_LEN
 4

	)

257 
	svœn_hódî
 {

258 
ovs_be16
 
	mvœn_tci
;

259 
ovs_be16
 
	mvœn_√xt_ty≥
;

261 
BUILD_ASSERT_DECL
(
VLAN_HEADER_LEN
 =(
vœn_hódî
));

263 
	#VLAN_ETH_HEADER_LEN
 (
ETH_HEADER_LEN
 + 
VLAN_HEADER_LEN
)

	)

264 
	svœn_ëh_hódî
 {

265 
uöt8_t
 
	mvëh_d°
[
ETH_ADDR_LEN
];

266 
uöt8_t
 
	mvëh_§c
[
ETH_ADDR_LEN
];

267 
ovs_be16
 
	mvëh_ty≥
;

268 
ovs_be16
 
	mvëh_tci
;

269 
ovs_be16
 
	mvëh_√xt_ty≥
;

270 } 
__©åibuã__
((
∑cked
));

271 
BUILD_ASSERT_DECL
(
VLAN_ETH_HEADER_LEN
 =(
vœn_ëh_hódî
));

277 
	#IP_FMT
 "%"
PRIu8
".%"PRIu8".%"PRIu8".%"
	)
PRIu8

278 
	#IP_ARGS
(
ù
) \

279 ((Ë(
ù
)[0], ((
uöt8_t
 *) ip)[0]), \

280 ((
uöt8_t
 *Ë
ù
)[1], \

281 ((
uöt8_t
 *Ë
ù
)[2], \

282 ((
uöt8_t
 *Ë
ù
)[3]

	)

295 
	#IP_SCAN_FMT
 "%"
SCNu8
".%"SCNu8".%"SCNu8".%"
	)
SCNu8

296 
	#IP_SCAN_ARGS
(
ù
) \

297 ((Ë(
ovs_be32
Ë*(
ù
), &((
uöt8_t
 *) ip)[0]), \

298 &((
uöt8_t
 *Ë
ù
)[1], \

299 &((
uöt8_t
 *Ë
ù
)[2], \

300 &((
uöt8_t
 *Ë
ù
)[3]

	)

301 
	#IP_SCAN_COUNT
 4

	)

305 
ölöe
 
boﬁ


306 
	$ù_is_cidr
(
ovs_be32
 
√tmask
)

308 
uöt32_t
 
x
 = ~
	`¡ohl
(
√tmask
);

309  !(
x
 & (x + 1));

310 
	}
}

311 
ölöe
 
boﬁ


312 
	$ù_is_mu…iˇ°
(
ovs_be32
 
ù
)

314  (
ù
 & 
	`ht⁄l
(0xf0000000)) == htonl(0xe0000000);

315 
	}
}

316 
ù_cou¡_cidr_bôs
(
ovs_be32
 
√tmask
);

317 
ù_f‹m©_masked
(
ovs_be32
 
ù
, ovs_be32 
mask
, 
ds
 *);

319 
	#IP_VER
(
ù_ihl_vî
Ë((ù_ihl_vîË>> 4)

	)

320 
	#IP_IHL
(
ù_ihl_vî
Ë((ù_ihl_vîË& 15)

	)

321 
	#IP_IHL_VER
(
ihl
, 
vî
Ë(((vîË<< 4Ë| (ihl))

	)

323 #i‚de‡
IPPROTO_SCTP


324 
	#IPPROTO_SCTP
 132

	)

328 
	#IP_ECN_NOT_ECT
 0x0

	)

329 
	#IP_ECN_ECT_1
 0x01

	)

330 
	#IP_ECN_ECT_0
 0x02

	)

331 
	#IP_ECN_CE
 0x03

	)

332 
	#IP_ECN_MASK
 0x03

	)

333 
	#IP_DSCP_MASK
 0xfc

	)

335 
	#IP_VERSION
 4

	)

337 
	#IP_DONT_FRAGMENT
 0x4000

	)

338 
	#IP_MORE_FRAGMENTS
 0x2000

	)

339 
	#IP_FRAG_OFF_MASK
 0x1ff‡

	)

340 
	#IP_IS_FRAGMENT
(
ù_‰ag_off
) \

341 ((
ù_‰ag_off
Ë& 
	`ht⁄s
(
IP_MORE_FRAGMENTS
 | 
IP_FRAG_OFF_MASK
))

	)

343 
	#IP_HEADER_LEN
 20

	)

344 
	sù_hódî
 {

345 
uöt8_t
 
	mù_ihl_vî
;

346 
uöt8_t
 
	mù_tos
;

347 
ovs_be16
 
	mù_tŸ_Àn
;

348 
ovs_be16
 
	mù_id
;

349 
ovs_be16
 
	mù_‰ag_off
;

350 
uöt8_t
 
	mù_âl
;

351 
uöt8_t
 
	mù_¥Ÿo
;

352 
ovs_be16
 
	mù_csum
;

353 
ovs_be32
 
	mù_§c
;

354 
ovs_be32
 
	mù_d°
;

356 
BUILD_ASSERT_DECL
(
IP_HEADER_LEN
 =(
ù_hódî
));

358 
	#ICMP_HEADER_LEN
 8

	)

359 
	sicmp_hódî
 {

360 
uöt8_t
 
	micmp_ty≥
;

361 
uöt8_t
 
	micmp_code
;

362 
ovs_be16
 
	micmp_csum
;

365 
ovs_be16
 
	mid
;

366 
ovs_be16
 
	m£q
;

367 } 
	mecho
;

369 
ovs_be16
 
	mem±y
;

370 
ovs_be16
 
	mmtu
;

371 } 
	m‰ag
;

372 
ovs_be32
 
	mg©eway
;

373 } 
	micmp_fõlds
;

374 
uöt8_t
 
	micmp_d©a
[0];

376 
BUILD_ASSERT_DECL
(
ICMP_HEADER_LEN
 =(
icmp_hódî
));

378 
	#UDP_HEADER_LEN
 8

	)

379 
	sudp_hódî
 {

380 
ovs_be16
 
	mudp_§c
;

381 
ovs_be16
 
	mudp_d°
;

382 
ovs_be16
 
	mudp_Àn
;

383 
ovs_be16
 
	mudp_csum
;

385 
BUILD_ASSERT_DECL
(
UDP_HEADER_LEN
 =(
udp_hódî
));

387 
	#TCP_FIN
 0x01

	)

388 
	#TCP_SYN
 0x02

	)

389 
	#TCP_RST
 0x04

	)

390 
	#TCP_PSH
 0x08

	)

391 
	#TCP_ACK
 0x10

	)

392 
	#TCP_URG
 0x20

	)

394 
	#TCP_CTL
(
Êags
, 
off£t
Ë(
	`ht⁄s
((ÊagsË| ((off£tË<< 12)))

	)

395 
	#TCP_FLAGS
(
t˝_˘l
Ë(
	`¡ohs
—˝_˘lË& 0x003f)

	)

396 
	#TCP_OFFSET
(
t˝_˘l
Ë(
	`¡ohs
—˝_˘lË>> 12)

	)

398 
	#TCP_HEADER_LEN
 20

	)

399 
	st˝_hódî
 {

400 
ovs_be16
 
	mt˝_§c
;

401 
ovs_be16
 
	mt˝_d°
;

402 
ovs_be32
 
	mt˝_£q
;

403 
ovs_be32
 
	mt˝_ack
;

404 
ovs_be16
 
	mt˝_˘l
;

405 
ovs_be16
 
	mt˝_wösz
;

406 
ovs_be16
 
	mt˝_csum
;

407 
ovs_be16
 
	mt˝_urg
;

409 
BUILD_ASSERT_DECL
(
TCP_HEADER_LEN
 =(
t˝_hódî
));

411 
	#ARP_HRD_ETHERNET
 1

	)

412 
	#ARP_PRO_IP
 0x0800

	)

413 
	#ARP_OP_REQUEST
 1

	)

414 
	#ARP_OP_REPLY
 2

	)

415 
	#ARP_OP_RARP
 3

	)

417 
	#ARP_ETH_HEADER_LEN
 28

	)

418 
	s¨p_ëh_hódî
 {

420 
ovs_be16
 
	m¨_hrd
;

421 
ovs_be16
 
	m¨_¥o
;

422 
uöt8_t
 
	m¨_h 
;

423 
uöt8_t
 
	m¨_∂n
;

424 
ovs_be16
 
	m¨_›
;

427 
uöt8_t
 
	m¨_sha
[
ETH_ADDR_LEN
];

428 
ovs_be32
 
	m¨_•a
;

429 
uöt8_t
 
	m¨_tha
[
ETH_ADDR_LEN
];

430 
ovs_be32
 
	m¨_ça
;

431 } 
__©åibuã__
((
∑cked
));

432 
BUILD_ASSERT_DECL
(
ARP_ETH_HEADER_LEN
 =(
¨p_ëh_hódî
));

435 
	#IPV6_LABEL_MASK
 0x000fffff

	)

448 
	#IPV6_SCAN_FMT
 "%46[0123456789abcdefABCDEF:.]"

	)

449 
	#IPV6_SCAN_LEN
 46

	)

451 c⁄° 
ö6_addr
 
ö6addr_exa˘
;

452 
	#IN6ADDR_EXACT_INIT
 { { { 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, \

453 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf‡} } }

	)

455 
ölöe
 
boﬁ
 
	$ùv6_addr_equÆs
(c⁄° 
ö6_addr
 *
a
,

456 c⁄° 
ö6_addr
 *
b
)

458 #ifde‡
IN6_ARE_ADDR_EQUAL


459  
	`IN6_ARE_ADDR_EQUAL
(
a
, 
b
);

461  !
	`memcmp
(
a
, 
b
, (*a));

463 
	}
}

465 
ölöe
 
boﬁ
 
	$ùv6_mask_is_™y
(c⁄° 
ö6_addr
 *
mask
) {

466  
	`ùv6_addr_equÆs
(
mask
, &
ö6addr_™y
);

467 
	}
}

469 
ölöe
 
boﬁ
 
	$ùv6_mask_is_exa˘
(c⁄° 
ö6_addr
 *
mask
) {

470  
	`ùv6_addr_equÆs
(
mask
, &
ö6addr_exa˘
);

471 
	}
}

473 
f‹m©_ùv6_addr
(*
addr_°r
, c⁄° 
ö6_addr
 *
addr
);

474 
¥öt_ùv6_addr
(
ds
 *
°rög
, c⁄° 
ö6_addr
 *
addr
);

475 
¥öt_ùv6_masked
(
ds
 *
°rög
, c⁄° 
ö6_addr
 *
addr
,

476 c⁄° 
ö6_addr
 *
mask
);

477 
ö6_addr
 
ùv6_addr_bô™d
(c⁄° ö6_add∏*
§c
,

478 c⁄° 
ö6_addr
 *
mask
);

479 
ö6_addr
 
ùv6_¸óã_mask
(
mask
);

480 
ùv6_cou¡_cidr_bôs
(c⁄° 
ö6_addr
 *
√tmask
);

481 
boﬁ
 
ùv6_is_cidr
(c⁄° 
ö6_addr
 *
√tmask
);

483 *
ëh_compo£
(
oÂbuf
 *, c⁄° 
uöt8_t
 
ëh_d°
[
ETH_ADDR_LEN
],

484 c⁄° 
uöt8_t
 
ëh_§c
[
ETH_ADDR_LEN
], 
uöt16_t
 
ëh_ty≥
,

485 
size_t
 
size
);

486 *
¢≠_compo£
(
oÂbuf
 *, c⁄° 
uöt8_t
 
ëh_d°
[
ETH_ADDR_LEN
],

487 c⁄° 
uöt8_t
 
ëh_§c
[
ETH_ADDR_LEN
],

488 
oui
, 
uöt16_t
 
¢≠_ty≥
, 
size_t
 
size
);

489 
∑ckë_£t_ùv4
(
oÂbuf
 *, 
ovs_be32
 
§c
, ovs_be32 
d°
, 
uöt8_t
 
tos
,

490 
uöt8_t
 
âl
);

491 
∑ckë_£t_ùv6
(
oÂbuf
 *, 
uöt8_t
 
¥Ÿo
, c⁄° 
ovs_be32
 
§c
[4],

492 c⁄° 
ovs_be32
 
d°
[4], 
uöt8_t
 
tc
,

493 
ovs_be32
 
Ê
, 
uöt8_t
 
hlmô
);

494 
∑ckë_£t_t˝_p‹t
(
oÂbuf
 *, 
ovs_be16
 
§c
, ovs_be16 
d°
);

495 
∑ckë_£t_udp_p‹t
(
oÂbuf
 *, 
ovs_be16
 
§c
, ovs_be16 
d°
);

497 
uöt8_t
 
∑ckë_gë_t˝_Êags
(c⁄° 
oÂbuf
 *, c⁄° 
Êow
 *);

498 
∑ckë_f‹m©_t˝_Êags
(
ds
 *, 
uöt8_t
);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/pcap.c

17 
	~<c⁄fig.h
>

18 
	~"pˇp.h
"

19 
	~<as£π.h
>

20 
	~<î∫o.h
>

21 
	~<öây≥s.h
>

22 
	~<°rög.h
>

23 
	~"compûî.h
"

24 
	~"oÂbuf.h
"

25 
	~"vlog.h
"

27 
VLOG_DEFINE_THIS_MODULE
(
pˇp
);

29 
	spˇp_hdr
 {

30 
uöt32_t
 
	mmagic_numbî
;

31 
uöt16_t
 
	mvîsi⁄_maj‹
;

32 
uöt16_t
 
	mvîsi⁄_mö‹
;

33 
öt32_t
 
	mthisz⁄e
;

34 
uöt32_t
 
	msigfigs
;

35 
uöt32_t
 
	m¢≠Àn
;

36 
uöt32_t
 
	m√tw‹k
;

38 
BUILD_ASSERT_DECL
((
pˇp_hdr
) == 24);

40 
	spˇ¥ec_hdr
 {

41 
uöt32_t
 
	mts_£c
;

42 
uöt32_t
 
	mts_u£c
;

43 
uöt32_t
 
	mö˛_Àn
;

44 
uöt32_t
 
	m‹ig_Àn
;

46 
BUILD_ASSERT_DECL
((
pˇ¥ec_hdr
) == 16);

48 
FILE
 *

49 
	$pˇp_›í
(c⁄° *
fûe_«me
, c⁄° *
mode
)

51 
FILE
 *
fûe
;

53 
	`as£π
(!
	`°rcmp
(
mode
, "rb") || !strcmp(mode, "wb"));

55 
fûe
 = 
	`f›í
(
fûe_«me
, 
mode
);

56 i‡(
fûe
 =
NULL
) {

57 
	`VLOG_WARN
("%s: failedÅo openÖcap file for %s",

58 
fûe_«me
, 
mode
[0] == 'r' ? "reading" : "writing");

59  
NULL
;

62 i‡(
mode
[0] == 'r') {

63 i‡(!
	`pˇp_ªad_hódî
(
fûe
)) {

64 
	`f˛o£
(
fûe
);

65  
NULL
;

68 
	`pˇp_wrôe_hódî
(
fûe
);

70  
fûe
;

71 
	}
}

74 
	$pˇp_ªad_hódî
(
FILE
 *
fûe
)

76 
pˇp_hdr
 
ph
;

77 i‡(
	`‰ód
(&
ph
, Öh, 1, 
fûe
) != 1) {

78 
îr‹
 = 
	`„º‹
(
fûe
Ë? 
î∫o
 : 
EOF
;

79 
	`VLOG_WARN
("ÁûedÅÿªadÖˇ∞hódî: %s", 
	`ovs_ªtvÆ_to_°rög
(
îr‹
));

80  
îr‹
;

82 i‡(
ph
.
magic_numbî
 != 0xa1b2c3d4 &&Öh.magic_number != 0xd4c3b2a1) {

83 
	`VLOG_WARN
("bad magi¯0x%08"
PRIx32
"ÑeadingÖcap file "

84 "”x≥˘ed 0xa1b2c3d4 o∏0xd4c3b2a1)", 
ph
.
magic_numbî
);

85  
EPROTO
;

88 
	}
}

91 
	$pˇp_wrôe_hódî
(
FILE
 *
fûe
)

95 
pˇp_hdr
 
ph
;

96 
ph
.
magic_numbî
 = 0xa1b2c3d4;

97 
ph
.
vîsi⁄_maj‹
 = 2;

98 
ph
.
vîsi⁄_mö‹
 = 4;

99 
ph
.
thisz⁄e
 = 0;

100 
ph
.
sigfigs
 = 0;

101 
ph
.
¢≠Àn
 = 1518;

102 
ph
.
√tw‹k
 = 1;

103 
	`ign‹e
(
	`fwrôe
(&
ph
, Öh, 1, 
fûe
));

104 
	}
}

107 
	$pˇp_ªad
(
FILE
 *
fûe
, 
oÂbuf
 **
buÂ
)

109 
pˇ¥ec_hdr
 
¥h
;

110 
oÂbuf
 *
buf
;

111 *
d©a
;

112 
size_t
 
Àn
;

114 *
buÂ
 = 
NULL
;

117 i‡(
	`‰ód
(&
¥h
, Örh, 1, 
fûe
) != 1) {

118 
îr‹
 = 
	`„º‹
(
fûe
Ë? 
î∫o
 : 
EOF
;

119 
	`VLOG_WARN
("failedÅoÑeadÖcapÑecord header: %s",

120 
	`ovs_ªtvÆ_to_°rög
(
îr‹
));

121  
îr‹
;

125 
Àn
 = 
¥h
.
ö˛_Àn
;

126 i‡(
Àn
 > 0xffff) {

127 
uöt32_t
 
sw≠≥d_Àn
 = (((
Àn
 & 0xff000000) >> 24) |

128 ((
Àn
 & 0x00ff0000) >> 8) |

129 ((
Àn
 & 0x0000ff00) << 8) |

130 ((
Àn
 & 0x000000ff) << 24));

131 i‡(
sw≠≥d_Àn
 > 0xffff) {

132 
	`VLOG_WARN
("badÖackëÜígth %zu o∏%"
PRIu32
" "

134 
Àn
, 
sw≠≥d_Àn
);

135  
EPROTO
;

137 
Àn
 = 
sw≠≥d_Àn
;

141 
buf
 = 
	`oÂbuf_√w
(
Àn
);

142 
d©a
 = 
	`oÂbuf_put_unöô
(
buf
, 
Àn
);

143 i‡(
	`‰ód
(
d©a
, 
Àn
, 1, 
fûe
) != 1) {

144 
îr‹
 = 
	`„º‹
(
fûe
Ë? 
î∫o
 : 
EOF
;

145 
	`VLOG_WARN
("failedÅoÑeadÖcapÖacket: %s",

146 
	`ovs_ªtvÆ_to_°rög
(
îr‹
));

147 
	`oÂbuf_dñëe
(
buf
);

148  
îr‹
;

150 *
buÂ
 = 
buf
;

152 
	}
}

155 
	$pˇp_wrôe
(
FILE
 *
fûe
, 
oÂbuf
 *
buf
)

157 
pˇ¥ec_hdr
 
¥h
;

158 
¥h
.
ts_£c
 = 0;

159 
¥h
.
ts_u£c
 = 0;

160 
¥h
.
ö˛_Àn
 = 
buf
->
size
;

161 
¥h
.
‹ig_Àn
 = 
buf
->
size
;

162 
	`ign‹e
(
	`fwrôe
(&
¥h
, Örh, 1, 
fûe
));

163 
	`ign‹e
(
	`fwrôe
(
buf
->
d©a
, buf->
size
, 1, 
fûe
));

164 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/pcap.h

17 #i‚de‡
PCAP_H


18 
	#PCAP_H
 1

	)

20 
	~<°dio.h
>

22 
	goÂbuf
;

24 
FILE
 *
pˇp_›í
(c⁄° *
fûe_«me
, c⁄° *
mode
);

25 
pˇp_ªad_hódî
(
FILE
 *);

26 
pˇp_wrôe_hódî
(
FILE
 *);

27 
pˇp_ªad
(
FILE
 *, 
oÂbuf
 **);

28 
pˇp_wrôe
(
FILE
 *, 
oÂbuf
 *);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/poll-loop.c

17 
	~<c⁄fig.h
>

18 
	~"pﬁl-lo›.h
"

19 
	~<as£π.h
>

20 
	~<î∫o.h
>

21 
	~<öây≥s.h
>

22 
	~<pﬁl.h
>

23 
	~<°dlib.h
>

24 
	~<°rög.h
>

25 
	~"covîage.h
"

26 
	~"dy«mic-°rög.h
"

27 
	~"Áèl-sig«l.h
"

28 
	~"li°.h
"

29 
	~"sockë-utû.h
"

30 
	~"timevÆ.h
"

31 
	~"vlog.h
"

33 #unde‡
pﬁl_fd_waô


34 #unde‡
pﬁl_timî_waô


35 #unde‡
pﬁl_timî_waô_u¡û


36 #unde‡
pﬁl_immedüã_wake


38 
VLOG_DEFINE_THIS_MODULE
(
pﬁl_lo›
);

40 
COVERAGE_DEFINE
(
pﬁl_fd_waô
);

41 
COVERAGE_DEFINE
(
pﬁl_zîo_timeout
);

44 
	spﬁl_waôî
 {

46 
li°
 
	mnode
;

47 
	mfd
;

48 
	mevíts
;

49 c⁄° *
	mwhîe
;

52 
pﬁlfd
 *
	mpﬁlfd
;

56 
li°
 
	gwaôîs
 = 
LIST_INITIALIZER
(&
waôîs
);

61 
	gtimeout_whí
 = 
LLONG_MAX
;

64 c⁄° *
	gtimeout_whîe
;

66 
pﬁl_waôî
 *
√w_waôî
(
fd
, 
evíts
,

67 c⁄° *
whîe
);

79 
pﬁl_waôî
 *

80 
	$pﬁl_fd_waô
(
fd
, 
evíts
, c⁄° *
whîe
)

82 
	`COVERAGE_INC
(
pﬁl_fd_waô
);

83  
	`√w_waôî
(
fd
, 
evíts
, 
whîe
);

84 
	}
}

97 
	$pﬁl_timî_waô
(
m£c
, c⁄° *
whîe
)

99 
now
 = 
	`time_m£c
();

100 
whí
;

102 i‡(
m£c
 <= 0) {

104 
whí
 = 
LLONG_MIN
;

105 } i‡((Ë
now
 + 
m£c
 <
LLONG_MAX
) {

107 
whí
 = 
now
 + 
m£c
;

110 
whí
 = 
LLONG_MAX
;

113 
	`pﬁl_timî_waô_u¡û
(
whí
, 
whîe
);

114 
	}
}

128 
	$pﬁl_timî_waô_u¡û
(
whí
, c⁄° *
whîe
)

130 i‡(
whí
 < 
timeout_whí
) {

131 
timeout_whí
 = 
whí
;

132 
timeout_whîe
 = 
whîe
;

134 
	}
}

142 
	$pﬁl_immedüã_wake
(c⁄° *
whîe
)

144 
	`pﬁl_timî_waô
(0, 
whîe
);

145 
	}
}

158 
	$log_wakeup
(c⁄° *
whîe
, c⁄° 
pﬁlfd
 *pﬁlfd, 
timeout
)

160 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(10, 10);

161 
vlog_Àvñ
 
Àvñ
;

162 
˝u_ußge
;

163 
ds
 
s
;

165 
˝u_ußge
 = 
	`gë_˝u_ußge
();

166 i‡(
	`VLOG_IS_DBG_ENABLED
()) {

167 
Àvñ
 = 
VLL_DBG
;

168 } i‡(
˝u_ußge
 > 50 && !
	`VLOG_DROP_WARN
(&
æ
)) {

169 
Àvñ
 = 
VLL_WARN
;

174 
	`ds_öô
(&
s
);

175 
	`ds_put_c°r
(&
s
, "wakeup dueÅo ");

176 i‡(
pﬁlfd
) {

177 *
des¸ùti⁄
 = 
	`des¸ibe_fd
(
pﬁlfd
->
fd
);

178 i‡(
pﬁlfd
->
ªvíts
 & 
POLLIN
) {

179 
	`ds_put_c°r
(&
s
, "[POLLIN]");

181 i‡(
pﬁlfd
->
ªvíts
 & 
POLLOUT
) {

182 
	`ds_put_c°r
(&
s
, "[POLLOUT]");

184 i‡(
pﬁlfd
->
ªvíts
 & 
POLLERR
) {

185 
	`ds_put_c°r
(&
s
, "[POLLERR]");

187 i‡(
pﬁlfd
->
ªvíts
 & 
POLLHUP
) {

188 
	`ds_put_c°r
(&
s
, "[POLLHUP]");

190 i‡(
pﬁlfd
->
ªvíts
 & 
POLLNVAL
) {

191 
	`ds_put_c°r
(&
s
, "[POLLNVAL]");

193 
	`ds_put_f‹m©
(&
s
, " o¿fd %d (%s)", 
pﬁlfd
->
fd
, 
des¸ùti⁄
);

194 
	`‰ì
(
des¸ùti⁄
);

196 
	`ds_put_f‹m©
(&
s
, "%d-m†timeout", 
timeout
);

198 i‡(
whîe
) {

199 
	`ds_put_f‹m©
(&
s
, "áà%s", 
whîe
);

201 i‡(
˝u_ußge
 >= 0) {

202 
	`ds_put_f‹m©
(&
s
, " (%d%% CPU ußge)", 
˝u_ußge
);

204 
	`VLOG
(
Àvñ
, "%s", 
	`ds_c°r
(&
s
));

205 
	`ds_de°roy
(&
s
);

206 
	}
}

212 
	$pﬁl_block
()

214 
pﬁlfd
 *
pﬁlfds
;

215 
size_t
 
max_pﬁlfds
;

217 
pﬁl_waôî
 *
pw
, *
√xt
;

218 
n_waôîs
, 
n_pﬁlfds
;

219 
ñ≠£d
;

220 
ªtvÆ
;

224 
	`Áèl_sig«l_waô
();

226 
n_waôîs
 = 
	`li°_size
(&
waôîs
);

227 i‡(
max_pﬁlfds
 < 
n_waôîs
) {

228 
max_pﬁlfds
 = 
n_waôîs
;

229 
pﬁlfds
 = 
	`xªÆloc
’ﬁlfds, 
max_pﬁlfds
 *  *pollfds);

232 
n_pﬁlfds
 = 0;

233 
	`LIST_FOR_EACH
 (
pw
, 
node
, &
waôîs
) {

234 
pw
->
pﬁlfd
 = &
pﬁlfds
[
n_pﬁlfds
];

235 
pﬁlfds
[
n_pﬁlfds
].
fd
 = 
pw
->fd;

236 
pﬁlfds
[
n_pﬁlfds
].
evíts
 = 
pw
->events;

237 
pﬁlfds
[
n_pﬁlfds
].
ªvíts
 = 0;

238 
n_pﬁlfds
++;

241 i‡(
timeout_whí
 =
LLONG_MIN
) {

242 
	`COVERAGE_INC
(
pﬁl_zîo_timeout
);

244 
ªtvÆ
 = 
	`time_pﬁl
(
pﬁlfds
, 
n_pﬁlfds
, 
timeout_whí
, &
ñ≠£d
);

245 i‡(
ªtvÆ
 < 0) {

246 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 5);

247 
	`VLOG_ERR_RL
(&
æ
, "pﬁl: %s", 
	`°ªº‹
(-
ªtvÆ
));

248 } i‡(!
ªtvÆ
) {

249 
	`log_wakeup
(
timeout_whîe
, 
NULL
, 
ñ≠£d
);

252 
	`LIST_FOR_EACH_SAFE
 (
pw
, 
√xt
, 
node
, &
waôîs
) {

253 i‡(
pw
->
pﬁlfd
->
ªvíts
) {

254 
	`log_wakeup
(
pw
->
whîe
,Öw->
pﬁlfd
, 0);

256 
	`pﬁl_ˇn˚l
(
pw
);

259 
timeout_whí
 = 
LLONG_MAX
;

260 
timeout_whîe
 = 
NULL
;

263 
	`Áèl_sig«l_run
();

264 
	}
}

273 
	$pﬁl_ˇn˚l
(
pﬁl_waôî
 *
pw
)

275 i‡(
pw
) {

276 
	`li°_ªmove
(&
pw
->
node
);

277 
	`‰ì
(
pw
);

279 
	}
}

282 
pﬁl_waôî
 *

283 
	$√w_waôî
(
fd
, 
evíts
, c⁄° *
whîe
)

285 
pﬁl_waôî
 *
waôî
 = 
	`xzÆloc
( *waiter);

286 
	`as£π
(
fd
 >= 0);

287 
waôî
->
fd
 = fd;

288 
waôî
->
evíts
 =Évents;

289 
waôî
->
whîe
 = where;

290 
	`li°_push_back
(&
waôîs
, &
waôî
->
node
);

291  
waôî
;

292 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/poll-loop.h

27 #i‚de‡
POLL_LOOP_H


28 
	#POLL_LOOP_H
 1

	)

30 
	~<pﬁl.h
>

31 
	~"utû.h
"

33 #ifde‡ 
__˝lu•lus


37 
pﬁl_waôî
;

50 
pﬁl_waôî
 *
pﬁl_fd_waô
(
fd
, 
evíts
, c⁄° *
whîe
);

51 
	#pﬁl_fd_waô
(
fd
, 
evíts
Ë
	`pﬁl_fd_waô
(fd,Évíts, 
SOURCE_LOCATOR
)

	)

53 
pﬁl_timî_waô
(
m£c
, c⁄° *
whîe
);

54 
	#pﬁl_timî_waô
(
m£c
Ë
	`pﬁl_timî_waô
(m£c, 
SOURCE_LOCATOR
)

	)

56 
pﬁl_timî_waô_u¡û
(
m£c
, c⁄° *
whîe
);

57 
	#pﬁl_timî_waô_u¡û
(
m£c
Ë
	`pﬁl_timî_waô_u¡û
(m£c, 
SOURCE_LOCATOR
)

	)

59 
pﬁl_immedüã_wake
(c⁄° *
whîe
);

60 
	#pﬁl_immedüã_wake
(Ë
	`pﬁl_immedüã_wake
(
SOURCE_LOCATOR
)

	)

63 
pﬁl_block
();

66 
pﬁl_ˇn˚l
(
pﬁl_waôî
 *);

68 #ifde‡ 
__˝lu•lus


	@/home/lsch/mytest/openvswitch-1.9.0/lib/process.c

17 
	~<c⁄fig.h
>

18 
	~"¥o˚ss.h
"

19 
	~<as£π.h
>

20 
	~<î∫o.h
>

21 
	~<f˙é.h
>

22 
	~<sig«l.h
>

23 
	~<°dlib.h
>

24 
	~<°rög.h
>

25 
	~<sys/°©.h
>

26 
	~<sys/waô.h
>

27 
	~<uni°d.h
>

28 
	~"covîage.h
"

29 
	~"dy«mic-°rög.h
"

30 
	~"Áèl-sig«l.h
"

31 
	~"li°.h
"

32 
	~"pﬁl-lo›.h
"

33 
	~"sig«ls.h
"

34 
	~"sockë-utû.h
"

35 
	~"utû.h
"

36 
	~"vlog.h
"

38 
VLOG_DEFINE_THIS_MODULE
(
¥o˚ss
);

40 
COVERAGE_DEFINE
(
¥o˚ss_run
);

41 
COVERAGE_DEFINE
(
¥o˚ss_run_ˇ±uª
);

42 
COVERAGE_DEFINE
(
¥o˚ss_sigchld
);

43 
COVERAGE_DEFINE
(
¥o˚ss_°¨t
);

45 
	s¥o˚ss
 {

46 
li°
 
	mnode
;

47 *
	m«me
;

48 
pid_t
 
	mpid
;

51 vﬁ©ûê
boﬁ
 
	mexôed
;

52 vﬁ©ûê
	m°©us
;

56 
	gfds
[2];

59 
li°
 
	gÆl_¥o˚s£s
 = 
LIST_INITIALIZER
(&
Æl_¥o˚s£s
);

61 
boﬁ
 
sigchld_is_blocked
();

62 
block_sigchld
(
sig£t_t
 *);

63 
unblock_sigchld
(c⁄° 
sig£t_t
 *);

64 
sigchld_h™dÀr
(
sigƒ
 
OVS_UNUSED
);

65 
boﬁ
 
is_membî
(
x
, c⁄° *
¨øy
, 
size_t
);

74 
	$¥o˚ss_öô
()

76 
boﬁ
 
öôed
;

77 
siga˘i⁄
 
ß
;

79 i‡(
öôed
) {

82 
öôed
 = 
åue
;

85 
	`xpùe_n⁄blockög
(
fds
);

88 
	`mem£t
(&
ß
, 0,  sa);

89 
ß
.
ß_h™dÀr
 = 
sigchld_h™dÀr
;

90 
	`sigem±y£t
(&
ß
.
ß_mask
);

91 
ß
.
ß_Êags
 = 
SA_NOCLDSTOP
 | 
SA_RESTART
;

92 
	`xsiga˘i⁄
(
SIGCHLD
, &
ß
, 
NULL
);

93 
	}
}

96 
	$¥o˚ss_esˇ≥_¨gs
(**
¨gv
)

98 
ds
 d†
DS_EMPTY_INITIALIZER
;

99 **
¨gp
;

100 
¨gp
 = 
¨gv
; *argp;árgp++) {

101 c⁄° *
¨g
 = *
¨gp
;

102 c⁄° *
p
;

103 i‡(
¨gp
 !
¨gv
) {

104 
	`ds_put_ch¨
(&
ds
, ' ');

106 i‡(
¨g
[
	`°rc•n
(arg, " \t\r\n\v\\\'\"")]) {

107 
	`ds_put_ch¨
(&
ds
, '"');

108 
p
 = 
¨g
; *p;Ö++) {

109 i‡(*
p
 == '\\' || *p == '\"') {

110 
	`ds_put_ch¨
(&
ds
, '\\');

112 
	`ds_put_ch¨
(&
ds
, *
p
);

114 
	`ds_put_ch¨
(&
ds
, '"');

116 
	`ds_put_c°r
(&
ds
, 
¨g
);

119  
	`ds_c°r
(&
ds
);

120 
	}
}

126 
	$¥o˚ss_¥e°¨t
(**
¨gv
)

128 *
bö¨y
;

130 
	`¥o˚ss_öô
();

133 i‡(
	`VLOG_IS_DBG_ENABLED
()) {

134 *
¨gs
 = 
	`¥o˚ss_esˇ≥_¨gs
(
¨gv
);

135 
	`VLOG_DBG
("°¨tög sub¥o˚ss: %s", 
¨gs
);

136 
	`‰ì
(
¨gs
);

141 
bö¨y
 = 
	`¥o˚ss_£¨ch_∑th
(
¨gv
[0]);

142 i‡(!
bö¨y
) {

143 
	`VLOG_ERR
("%†nŸ found i¿PATH", 
¨gv
[0]);

144  
ENOENT
;

146 
	`‰ì
(
bö¨y
);

149 
	}
}

156 
¥o˚ss
 *

157 
	$¥o˚ss_ªgi°î
(c⁄° *
«me
, 
pid_t
 
pid
)

159 
¥o˚ss
 *
p
;

160 c⁄° *
¶ash
;

162 
	`as£π
(
	`sigchld_is_blocked
());

164 
p
 = 
	`xzÆloc
( *p);

165 
p
->
pid
 =Öid;

166 
¶ash
 = 
	`°ºchr
(
«me
, '/');

167 
p
->
«me
 = 
	`x°rdup
(
¶ash
 ? slash + 1 :Çame);

168 
p
->
exôed
 = 
Ál£
;

170 
	`li°_push_back
(&
Æl_¥o˚s£s
, &
p
->
node
);

172  
p
;

173 
	}
}

187 
	$¥o˚ss_°¨t
(**
¨gv
,

188 c⁄° 
kìp_fds
[], 
size_t
 
n_kìp_fds
,

189 c⁄° 
nuŒ_fds
[], 
size_t
 
n_nuŒ_fds
,

190 
¥o˚ss
 **
µ
)

192 
sig£t_t
 
ﬁdsigs
;

193 
nuŒfd
;

194 
pid_t
 
pid
;

195 
îr‹
;

197 *
µ
 = 
NULL
;

198 
	`COVERAGE_INC
(
¥o˚ss_°¨t
);

199 
îr‹
 = 
	`¥o˚ss_¥e°¨t
(
¨gv
);

200 i‡(
îr‹
) {

201  
îr‹
;

204 i‡(
n_nuŒ_fds
) {

205 
nuŒfd
 = 
	`gë_nuŒ_fd
();

206 i‡(
nuŒfd
 < 0) {

207  -
nuŒfd
;

210 
nuŒfd
 = -1;

213 
	`block_sigchld
(&
ﬁdsigs
);

214 
pid
 = 
	`f‹k
();

215 i‡(
pid
 < 0) {

216 
	`unblock_sigchld
(&
ﬁdsigs
);

217 
	`VLOG_WARN
("f‹k faûed: %s", 
	`°ªº‹
(
î∫o
));

218  
î∫o
;

219 } i‡(
pid
) {

221 *
µ
 = 
	`¥o˚ss_ªgi°î
(
¨gv
[0], 
pid
);

222 
	`unblock_sigchld
(&
ﬁdsigs
);

226 
fd_max
 = 
	`gë_max_fds
();

227 
fd
;

229 
	`Áèl_sig«l_f‹k
();

230 
	`unblock_sigchld
(&
ﬁdsigs
);

231 
fd
 = 0; fd < 
fd_max
; fd++) {

232 i‡(
	`is_membî
(
fd
, 
nuŒ_fds
, 
n_nuŒ_fds
)) {

233 
	`dup2
(
nuŒfd
, 
fd
);

234 } i‡(
fd
 >3 && fd !
nuŒfd


235 && !
	`is_membî
(
fd
, 
kìp_fds
, 
n_kìp_fds
)) {

236 
	`˛o£
(
fd
);

239 i‡(
nuŒfd
 >= 0

240 && !
	`is_membî
(
nuŒfd
, 
kìp_fds
, 
n_kìp_fds
)

241 && !
	`is_membî
(
nuŒfd
, 
nuŒ_fds
, 
n_nuŒ_fds
)) {

242 
	`˛o£
(
nuŒfd
);

244 
	`execvp
(
¨gv
[0],árgv);

245 
	`Ârötf
(
°dîr
, "execvp(\"%s\") failed: %s\n",

246 
¨gv
[0], 
	`°ªº‹
(
î∫o
));

247 
	`_exô
(1);

249 
	}
}

253 
	$¥o˚ss_de°roy
(
¥o˚ss
 *
p
)

255 i‡(
p
) {

256 
sig£t_t
 
ﬁdsigs
;

258 
	`block_sigchld
(&
ﬁdsigs
);

259 
	`li°_ªmove
(&
p
->
node
);

260 
	`unblock_sigchld
(&
ﬁdsigs
);

262 
	`‰ì
(
p
->
«me
);

263 
	`‰ì
(
p
);

265 
	}
}

270 
	$¥o˚ss_kûl
(c⁄° 
¥o˚ss
 *
p
, 
sigƒ
)

272  (
p
->
exôed
 ? 
ESRCH


273 : !
	`kûl
(
p
->
pid
, 
sigƒ
) ? 0

274 : 
î∫o
);

275 
	}
}

278 
pid_t


279 
	$¥o˚ss_pid
(c⁄° 
¥o˚ss
 *
p
)

281  
p
->
pid
;

282 
	}
}

287 
	$¥o˚ss_«me
(c⁄° 
¥o˚ss
 *
p
)

289  
p
->
«me
;

290 
	}
}

293 
boﬁ


294 
	$¥o˚ss_exôed
(
¥o˚ss
 *
p
)

296 i‡(
p
->
exôed
) {

297  
åue
;

299 
buf
[
_POSIX_PIPE_BUF
];

300 
	`ign‹e
(
	`ªad
(
fds
[0], 
buf
,  buf));

301  
Ál£
;

303 
	}
}

309 
	$¥o˚ss_°©us
(c⁄° 
¥o˚ss
 *
p
)

311 
	`as£π
(
p
->
exôed
);

312  
p
->
°©us
;

313 
	}
}

316 
	$¥o˚ss_run
(**
¨gv
,

317 c⁄° 
kìp_fds
[], 
size_t
 
n_kìp_fds
,

318 c⁄° 
nuŒ_fds
[], 
size_t
 
n_nuŒ_fds
,

319 *
°©us
)

321 
¥o˚ss
 *
p
;

322 
ªtvÆ
;

324 
	`COVERAGE_INC
(
¥o˚ss_run
);

325 
ªtvÆ
 = 
	`¥o˚ss_°¨t
(
¨gv
, 
kìp_fds
, 
n_kìp_fds
, 
nuŒ_fds
, 
n_nuŒ_fds
,

326 &
p
);

327 i‡(
ªtvÆ
) {

328 *
°©us
 = 0;

329  
ªtvÆ
;

332 !
	`¥o˚ss_exôed
(
p
)) {

333 
	`¥o˚ss_waô
(
p
);

334 
	`pﬁl_block
();

336 *
°©us
 = 
	`¥o˚ss_°©us
(
p
);

337 
	`¥o˚ss_de°roy
(
p
);

339 
	}
}

346 
	$¥o˚ss_°©us_msg
(
°©us
)

348 
ds
 d†
DS_EMPTY_INITIALIZER
;

349 i‡(
	`WIFEXITED
(
°©us
)) {

350 
	`ds_put_f‹m©
(&
ds
, "exô sètu†%d", 
	`WEXITSTATUS
(
°©us
));

351 } i‡(
	`WIFSIGNALED
(
°©us
)) {

352 
	`ds_put_f‹m©
(&
ds
, "kûÀd (%s)", 
	`sig«l_«me
(
	`WTERMSIG
(
°©us
)));

353 } i‡(
	`WIFSTOPPED
(
°©us
)) {

354 
	`ds_put_f‹m©
(&
ds
, "°›≥d (%s)", 
	`sig«l_«me
(
	`WSTOPSIG
(
°©us
)));

356 
	`ds_put_f‹m©
(&
ds
, "ãrmö©edábn‹mÆly (%x)", 
°©us
);

358 i‡(
	`WCOREDUMP
(
°©us
)) {

359 
	`ds_put_c°r
(&
ds
, ", core dumped");

361  
	`ds_c°r
(&
ds
);

362 
	}
}

367 
	$¥o˚ss_waô
(
¥o˚ss
 *
p
)

369 i‡(
p
->
exôed
) {

370 
	`pﬁl_immedüã_wake
();

372 
	`pﬁl_fd_waô
(
fds
[0], 
POLLIN
);

374 
	}
}

377 
	$¥o˚ss_£¨ch_∑th
(c⁄° *
«me
)

379 *
ßve_±r
 = 
NULL
;

380 *
∑th
, *
dú
;

381 
°©
 
s
;

383 i‡(
	`°rchr
(
«me
, '/'Ë|| !
	`gëív
("PATH")) {

384  
	`°©
(
«me
, &
s
Ë=0 ? 
	`x°rdup
“ameË: 
NULL
;

387 
∑th
 = 
	`x°rdup
(
	`gëív
("PATH"));

388 
dú
 = 
	`°πok_r
(
∑th
, ":", &
ßve_±r
); dir;

389 
dú
 = 
	`°πok_r
(
NULL
, ":", &
ßve_±r
)) {

390 *
fûe
 = 
	`xa•rötf
("%s/%s", 
dú
, 
«me
);

391 i‡(
	`°©
(
fûe
, &
s
) == 0) {

392 
	`‰ì
(
∑th
);

393  
fûe
;

395 
	`‰ì
(
fûe
);

397 
	`‰ì
(
∑th
);

398  
NULL
;

399 
	}
}

403 
	s°ªam
 {

404 
size_t
 
	mmax_size
;

405 
ds
 
	mlog
;

406 
	mfds
[2];

410 
	$°ªam_›í
(
°ªam
 *
s
, 
size_t
 
max_size
)

412 
s
->
max_size
 = max_size;

413 
	`ds_öô
(&
s
->
log
);

414 i‡(
	`pùe
(
s
->
fds
)) {

415 
	`VLOG_WARN
("ÁûedÅÿ¸óãÖùe: %s", 
	`°ªº‹
(
î∫o
));

416  
î∫o
;

418 
	`£t_n⁄blockög
(
s
->
fds
[0]);

420 
	}
}

423 
	$°ªam_ªad
(
°ªam
 *
s
)

425 i‡(
s
->
fds
[0] < 0) {

430 
buf„r
[512];

431 
îr‹
;

432 
size_t
 
n
;

434 
îr‹
 = 
	`ªad_fuŒy
(
s
->
fds
[0], 
buf„r
,  buf„r, &
n
);

435 
	`ds_put_buf„r
(&
s
->
log
, 
buf„r
, 
n
);

436 i‡(
îr‹
) {

437 i‡(
îr‹
 =
EAGAIN
 ||Éº‹ =
EWOULDBLOCK
) {

440 i‡(
îr‹
 !
EOF
) {

441 
	`VLOG_WARN
("errorÑeading subprocessÖipe: %s",

442 
	`°ªº‹
(
îr‹
));

446 } i‡(
s
->
log
.
Àngth
 > s->
max_size
) {

447 
	`VLOG_WARN
("subprocess output overflowed %zu-byte buffer",

448 
s
->
max_size
);

452 
	`˛o£
(
s
->
fds
[0]);

453 
s
->
fds
[0] = -1;

454 
	}
}

457 
	$°ªam_waô
(
°ªam
 *
s
)

459 i‡(
s
->
fds
[0] >= 0) {

460 
	`pﬁl_fd_waô
(
s
->
fds
[0], 
POLLIN
);

462 
	}
}

465 
	$°ªam_˛o£
(
°ªam
 *
s
)

467 
	`ds_de°roy
(&
s
->
log
);

468 i‡(
s
->
fds
[0] >= 0) {

469 
	`˛o£
(
s
->
fds
[0]);

471 i‡(
s
->
fds
[1] >= 0) {

472 
	`˛o£
(
s
->
fds
[1]);

474 
	}
}

492 
	$¥o˚ss_run_ˇ±uª
(**
¨gv
, **
°dout_log
, **
°dîr_log
,

493 
size_t
 
max_log
, *
°©us
)

495 
°ªam
 
s_°dout
, 
s_°dîr
;

496 
sig£t_t
 
ﬁdsigs
;

497 
pid_t
 
pid
;

498 
îr‹
;

500 
	`COVERAGE_INC
(
¥o˚ss_run_ˇ±uª
);

501 i‡(
°dout_log
) {

502 *
°dout_log
 = 
NULL
;

504 i‡(
°dîr_log
) {

505 *
°dîr_log
 = 
NULL
;

507 *
°©us
 = 0;

508 
îr‹
 = 
	`¥o˚ss_¥e°¨t
(
¨gv
);

509 i‡(
îr‹
) {

510  
îr‹
;

513 
îr‹
 = 
	`°ªam_›í
(&
s_°dout
, 
max_log
);

514 i‡(
îr‹
) {

515  
îr‹
;

518 
îr‹
 = 
	`°ªam_›í
(&
s_°dîr
, 
max_log
);

519 i‡(
îr‹
) {

520 
	`°ªam_˛o£
(&
s_°dout
);

521  
îr‹
;

524 
	`block_sigchld
(&
ﬁdsigs
);

525 
pid
 = 
	`f‹k
();

526 i‡(
pid
 < 0) {

527 
îr‹
 = 
î∫o
;

529 
	`unblock_sigchld
(&
ﬁdsigs
);

530 
	`VLOG_WARN
("f‹k faûed: %s", 
	`°ªº‹
(
îr‹
));

532 
	`°ªam_˛o£
(&
s_°dout
);

533 
	`°ªam_˛o£
(&
s_°dîr
);

534 *
°©us
 = 0;

535  
îr‹
;

536 } i‡(
pid
) {

538 
¥o˚ss
 *
p
;

540 
p
 = 
	`¥o˚ss_ªgi°î
(
¨gv
[0], 
pid
);

541 
	`unblock_sigchld
(&
ﬁdsigs
);

543 
	`˛o£
(
s_°dout
.
fds
[1]);

544 
	`˛o£
(
s_°dîr
.
fds
[1]);

545 !
	`¥o˚ss_exôed
(
p
)) {

546 
	`°ªam_ªad
(&
s_°dout
);

547 
	`°ªam_ªad
(&
s_°dîr
);

549 
	`°ªam_waô
(&
s_°dout
);

550 
	`°ªam_waô
(&
s_°dîr
);

551 
	`¥o˚ss_waô
(
p
);

552 
	`pﬁl_block
();

554 
	`°ªam_ªad
(&
s_°dout
);

555 
	`°ªam_ªad
(&
s_°dîr
);

557 i‡(
°dout_log
) {

558 *
°dout_log
 = 
	`ds_°ól_c°r
(&
s_°dout
.
log
);

560 i‡(
°dîr_log
) {

561 *
°dîr_log
 = 
	`ds_°ól_c°r
(&
s_°dîr
.
log
);

564 
	`°ªam_˛o£
(&
s_°dout
);

565 
	`°ªam_˛o£
(&
s_°dîr
);

567 *
°©us
 = 
	`¥o˚ss_°©us
(
p
);

568 
	`¥o˚ss_de°roy
(
p
);

572 
max_fds
;

573 
i
;

575 
	`Áèl_sig«l_f‹k
();

576 
	`unblock_sigchld
(&
ﬁdsigs
);

578 
	`dup2
(
	`gë_nuŒ_fd
(), 0);

579 
	`dup2
(
s_°dout
.
fds
[1], 1);

580 
	`dup2
(
s_°dîr
.
fds
[1], 2);

582 
max_fds
 = 
	`gë_max_fds
();

583 
i
 = 3; i < 
max_fds
; i++) {

584 
	`˛o£
(
i
);

587 
	`execvp
(
¨gv
[0],árgv);

588 
	`Ârötf
(
°dîr
, "execvp(\"%s\") failed: %s\n",

589 
¨gv
[0], 
	`°ªº‹
(
î∫o
));

590 
	`exô
(
EXIT_FAILURE
);

592 
	}
}

595 
	$sigchld_h™dÀr
(
sigƒ
 
OVS_UNUSED
)

597 
¥o˚ss
 *
p
;

599 
	`COVERAGE_INC
(
¥o˚ss_sigchld
);

600 
	`LIST_FOR_EACH
 (
p
, 
node
, &
Æl_¥o˚s£s
) {

601 i‡(!
p
->
exôed
) {

602 
ªtvÆ
, 
°©us
;

604 
ªtvÆ
 = 
	`waôpid
(
p
->
pid
, &
°©us
, 
WNOHANG
);

605 } 
ªtvÆ
 =-1 && 
î∫o
 =
EINTR
);

606 i‡(
ªtvÆ
 =
p
->
pid
) {

607 
p
->
exôed
 = 
åue
;

608 
p
->
°©us
 = status;

609 } i‡(
ªtvÆ
 < 0) {

612 
p
->
exôed
 = 
åue
;

613 
p
->
°©us
 = -1;

617 
	`ign‹e
(
	`wrôe
(
fds
[1], "", 1));

618 
	}
}

620 
boﬁ


621 
	$is_membî
(
x
, c⁄° *
¨øy
, 
size_t
 
n
)

623 
size_t
 
i
;

625 
i
 = 0; i < 
n
; i++) {

626 i‡(
¨øy
[
i
] =
x
) {

627  
åue
;

630  
Ál£
;

631 
	}
}

633 
boﬁ


634 
	$sigchld_is_blocked
()

636 
sig£t_t
 
sigs
;

638 
	`xsig¥ocmask
(
SIG_SETMASK
, 
NULL
, &
sigs
);

639  
	`sigismembî
(&
sigs
, 
SIGCHLD
);

640 
	}
}

643 
	$block_sigchld
(
sig£t_t
 *
ﬁdsigs
)

645 
sig£t_t
 
sigchld
;

647 
	`sigem±y£t
(&
sigchld
);

648 
	`sigadd£t
(&
sigchld
, 
SIGCHLD
);

649 
	`xsig¥ocmask
(
SIG_BLOCK
, &
sigchld
, 
ﬁdsigs
);

650 
	}
}

653 
	$unblock_sigchld
(c⁄° 
sig£t_t
 *
ﬁdsigs
)

655 
	`xsig¥ocmask
(
SIG_SETMASK
, 
ﬁdsigs
, 
NULL
);

656 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/process.h

17 #i‚de‡
PROCESS_H


18 
	#PROCESS_H
 1

	)

20 
	~<°dboﬁ.h
>

21 
	~<sys/ty≥s.h
>

23 
	g¥o˚ss
;

24 
¥o˚ss_öô
();

25 *
¥o˚ss_esˇ≥_¨gs
(**
¨gv
);

26 
¥o˚ss_°¨t
(**
¨gv
,

27 c⁄° *
kìp_fds
, 
size_t
 
n_kìp_fds
,

28 c⁄° *
nuŒ_fds
, 
size_t
 
n_nuŒ_fds
,

29 
¥o˚ss
 **);

30 
¥o˚ss_de°roy
(
¥o˚ss
 *);

31 
¥o˚ss_kûl
(c⁄° 
¥o˚ss
 *, 
sigƒ
);

33 
¥o˚ss_run
(**
¨gv
,

34 c⁄° *
kìp_fds
, 
size_t
 
n_kìp_fds
,

35 c⁄° *
nuŒ_fds
, 
size_t
 
n_nuŒ_fds
,

36 *
°©us
);

38 
pid_t
 
¥o˚ss_pid
(c⁄° 
¥o˚ss
 *);

39 c⁄° *
¥o˚ss_«me
(c⁄° 
¥o˚ss
 *);

40 
boﬁ
 
¥o˚ss_exôed
(
¥o˚ss
 *);

41 
¥o˚ss_°©us
(c⁄° 
¥o˚ss
 *);

42 *
¥o˚ss_°©us_msg
();

44 
¥o˚ss_waô
(
¥o˚ss
 *);

46 *
¥o˚ss_£¨ch_∑th
(const *);

48 
¥o˚ss_run_ˇ±uª
(**
¨gv
, **
°dout_log
, **
°dîr_log
,

49 
size_t
 
max_log
, *
°©us
);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/random.c

17 
	~<c⁄fig.h
>

18 
	~"øndom.h
"

20 
	~<as£π.h
>

21 
	~<î∫o.h
>

22 
	~<°dlib.h
>

23 
	~<sys/time.h
>

25 
	~"íå›y.h
"

26 
	~"timevÆ.h
"

27 
	~"utû.h
"

41 
uöt32_t
 
	g£ed
;

43 
uöt32_t
 
øndom_√xt
();

46 
	$øndom_öô
()

48 !
£ed
) {

49 
timevÆ
 
tv
;

50 
uöt32_t
 
íå›y
;

52 
	`xgëtimeofday
(&
tv
);

53 
	`gë_íå›y_‹_dõ
(&
íå›y
, 4);

55 
£ed
 = 
tv
.
tv_£c
 ^Åv.
tv_u£c
 ^ 
íå›y
;

57 
	}
}

60 
	$øndom_£t_£ed
(
uöt32_t
 
£ed_
)

62 
	`as£π
(
£ed_
);

63 
£ed
 = 
£ed_
;

64 
	}
}

67 
	$øndom_byãs
(*
p_
, 
size_t
 
n
)

69 
uöt8_t
 *
p
 = 
p_
;

71 
	`øndom_öô
();

73 ; 
n
 > 4; 
p
 += 4,Ç -= 4) {

74 
uöt32_t
 
x
 = 
	`øndom_√xt
();

75 
	`mem˝y
(
p
, &
x
, 4);

78 i‡(
n
) {

79 
uöt32_t
 
x
 = 
	`øndom_√xt
();

80 
	`mem˝y
(
p
, &
x
, 
n
);

82 
	}
}

84 
uöt8_t


85 
	$øndom_uöt8
()

87  
	`øndom_uöt32
();

88 
	}
}

90 
uöt16_t


91 
	$øndom_uöt16
()

93  
	`øndom_uöt32
();

94 
	}
}

96 
uöt32_t


97 
	$øndom_uöt32
()

99 
	`øndom_öô
();

100  
	`øndom_√xt
();

101 
	}
}

103 
uöt64_t


104 
	$øndom_uöt64
()

106 
uöt64_t
 
x
;

108 
	`øndom_öô
();

110 
x
 = 
	`øndom_√xt
();

111 
x
 |(
uöt64_t
Ë
	`øndom_√xt
() << 32;

112  
x
;

113 
	}
}

116 
	$øndom_ønge
(
max
)

118  
	`øndom_uöt32
(Ë% 
max
;

119 
	}
}

121 
uöt32_t


122 
	$øndom_√xt
()

124 
£ed
 ^= seed << 13;

125 
£ed
 ^= seed >> 17;

126 
£ed
 ^= seed << 5;

128  
£ed
;

129 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/random.h

17 #i‚de‡
RANDOM_H


18 
	#RANDOM_H
 1

	)

20 
	~<°ddef.h
>

21 
	~<°döt.h
>

23 
øndom_öô
();

24 
øndom_£t_£ed
(
uöt32_t
);

26 
øndom_byãs
(*, 
size_t
);

27 
uöt8_t
 
øndom_uöt8
();

28 
uöt16_t
 
øndom_uöt16
();

29 
uöt32_t
 
øndom_uöt32
();

30 
uöt64_t
 
øndom_uöt64
();

31 
øndom_ønge
(
max
);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/rconn.c

17 
	~<c⁄fig.h
>

18 
	~"rc⁄n.h
"

19 
	~<as£π.h
>

20 
	~<î∫o.h
>

21 
	~<limôs.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

24 
	~"covîage.h
"

25 
	~"oÂ-msgs.h
"

26 
	~"oÂ-utû.h
"

27 
	~"oÂbuf.h
"

28 
	~"›íÊow/›íÊow.h
"

29 
	~"pﬁl-lo›.h
"

30 
	~"ßt-m©h.h
"

31 
	~"timevÆ.h
"

32 
	~"utû.h
"

33 
	~"vc⁄n.h
"

34 
	~"vlog.h
"

36 
VLOG_DEFINE_THIS_MODULE
(
rc⁄n
);

38 
COVERAGE_DEFINE
(
rc⁄n_disˇrded
);

39 
COVERAGE_DEFINE
(
rc⁄n_ovîÊow
);

40 
COVERAGE_DEFINE
(
rc⁄n_queued
);

41 
COVERAGE_DEFINE
(
rc⁄n_£¡
);

43 
	#STATES
 \

44 
	`STATE
(
VOID
, 1 << 0) \

45 
	`STATE
(
BACKOFF
, 1 << 1) \

46 
	`STATE
(
CONNECTING
, 1 << 2) \

47 
	`STATE
(
ACTIVE
, 1 << 3) \

48 
	`STATE
(
IDLE
, 1 << 4)

	)

49 
	e°©e
 {

50 
	#STATE
(
NAME
, 
VALUE
Ë
S_
##NAME = VALUE,

	)

51 
	mSTATES


52 #unde‡
STATE


56 
	$°©e_«me
(
°©e
 state)

58 
°©e
) {

59 
	#STATE
(
NAME
, 
VALUE
Ë
S_
##NAME:  #NAME;

	)

60 
STATES


61 #unde‡
STATE


64 
	}
}

69 
	src⁄n
 {

70 
°©e
 
	m°©e
;

71 
time_t
 
	m°©e_íãªd
;

73 
vc⁄n
 *
	mvc⁄n
;

74 *
	m«me
;

75 *
	mèrgë
;

76 
boﬁ
 
	mªlübÀ
;

78 
li°
 
	mtxq
;

80 
	mbackoff
;

81 
	mmax_backoff
;

82 
time_t
 
	mbackoff_dódlöe
;

83 
time_t
 
	mœ°_c⁄√˘ed
;

84 
time_t
 
	mœ°_disc⁄√˘ed
;

85 
	m∑ckës_£¡
;

86 
	m£qno
;

87 
	mœ°_îr‹
;

97 
boﬁ
 
	m¥obably_admôãd
;

98 
time_t
 
	mœ°_admôãd
;

102 
	m∑ckës_ª˚ived
;

103 
	mn_©ãm±ed_c⁄√˘i⁄s
, 
	mn_suc˚ssful_c⁄√˘i⁄s
;

104 
time_t
 
	m¸óti⁄_time
;

105 
	mtŸÆ_time_c⁄√˘ed
;

114 
	m¥obe_öãrvÆ
;

115 
time_t
 
	mœ°_a˘ivôy
;

126 
ovs_be32
 
	mloˇl_ù
, 
	mªmŸe_ù
;

127 
ovs_be16
 
	mªmŸe_p‹t
;

128 
uöt8_t
 
	mds˝
;

131 
	#MAX_MONITORS
 8

	)

132 
vc⁄n
 *
	mm⁄ô‹s
[8];

133 
size_t
 
	mn_m⁄ô‹s
;

136 
ñ≠£d_ö_this_°©e
(c⁄° 
rc⁄n
 *);

137 
timeout
(c⁄° 
rc⁄n
 *);

138 
boﬁ
 
timed_out
(c⁄° 
rc⁄n
 *);

139 
°©e_å™sôi⁄
(
rc⁄n
 *, 
°©e
);

140 
rc⁄n_£t_èrgë__
(
rc⁄n
 *,

141 c⁄° *
èrgë
, c⁄° *
«me
);

142 
åy_£nd
(
rc⁄n
 *);

143 
ªc⁄√˘
(
rc⁄n
 *);

144 
ªp‹t_îr‹
(
rc⁄n
 *, 
îr‹
);

145 
disc⁄√˘
(
rc⁄n
 *, 
îr‹
);

146 
Êush_queue
(
rc⁄n
 *);

147 
c›y_to_m⁄ô‹
(
rc⁄n
 *, c⁄° 
oÂbuf
 *);

148 
boﬁ
 
is_c⁄√˘ed_°©e
(
°©e
);

149 
boﬁ
 
is_admôãd_msg
(c⁄° 
oÂbuf
 *);

150 
boﬁ
 
rc⁄n_loggög_c⁄√˘i⁄_©ãm±s__
(c⁄° 
rc⁄n
 *);

167 
rc⁄n
 *

168 
	$rc⁄n_¸óã
(
¥obe_öãrvÆ
, 
max_backoff
, 
uöt8_t
 
ds˝
)

170 
rc⁄n
 *
rc
 = 
	`xzÆloc
( *rc);

172 
rc
->
°©e
 = 
S_VOID
;

173 
rc
->
°©e_íãªd
 = 
	`time_now
();

175 
rc
->
vc⁄n
 = 
NULL
;

176 
rc
->
«me
 = 
	`x°rdup
("void");

177 
rc
->
èrgë
 = 
	`x°rdup
("void");

178 
rc
->
ªlübÀ
 = 
Ál£
;

180 
	`li°_öô
(&
rc
->
txq
);

182 
rc
->
backoff
 = 0;

183 
rc
->
max_backoff
 = max_backoff ? max_backoff : 8;

184 
rc
->
backoff_dódlöe
 = 
TIME_MIN
;

185 
rc
->
œ°_c⁄√˘ed
 = 
TIME_MIN
;

186 
rc
->
œ°_disc⁄√˘ed
 = 
TIME_MIN
;

187 
rc
->
£qno
 = 0;

189 
rc
->
∑ckës_£¡
 = 0;

191 
rc
->
¥obably_admôãd
 = 
Ál£
;

192 
rc
->
œ°_admôãd
 = 
	`time_now
();

194 
rc
->
∑ckës_ª˚ived
 = 0;

195 
rc
->
n_©ãm±ed_c⁄√˘i⁄s
 = 0;

196 
rc
->
n_suc˚ssful_c⁄√˘i⁄s
 = 0;

197 
rc
->
¸óti⁄_time
 = 
	`time_now
();

198 
rc
->
tŸÆ_time_c⁄√˘ed
 = 0;

200 
rc
->
œ°_a˘ivôy
 = 
	`time_now
();

202 
	`rc⁄n_£t_¥obe_öãrvÆ
(
rc
, 
¥obe_öãrvÆ
);

203 
	`rc⁄n_£t_ds˝
(
rc
, 
ds˝
);

205 
rc
->
n_m⁄ô‹s
 = 0;

207  
rc
;

208 
	}
}

211 
	$rc⁄n_£t_max_backoff
(
rc⁄n
 *
rc
, 
max_backoff
)

213 
rc
->
max_backoff
 = 
	`MAX
(1, max_backoff);

214 i‡(
rc
->
°©e
 =
S_BACKOFF
 &&Ñc->
backoff
 > 
max_backoff
) {

215 
rc
->
backoff
 = 
max_backoff
;

216 i‡(
rc
->
backoff_dódlöe
 > 
	`time_now
(Ë+ 
max_backoff
) {

217 
rc
->
backoff_dódlöe
 = 
	`time_now
(Ë+ 
max_backoff
;

220 
	}
}

223 
	$rc⁄n_gë_max_backoff
(c⁄° 
rc⁄n
 *
rc
)

225  
rc
->
max_backoff
;

226 
	}
}

229 
	$rc⁄n_£t_ds˝
(
rc⁄n
 *
rc
, 
uöt8_t
 
ds˝
)

231 
rc
->
ds˝
 = dscp;

232 
	}
}

234 
uöt8_t


235 
	$rc⁄n_gë_ds˝
(c⁄° 
rc⁄n
 *
rc
)

237  
rc
->
ds˝
;

238 
	}
}

241 
	$rc⁄n_£t_¥obe_öãrvÆ
(
rc⁄n
 *
rc
, 
¥obe_öãrvÆ
)

243 
rc
->
¥obe_öãrvÆ
 =Örobe_öãrvÆ ? 
	`MAX
(5,Örobe_interval) : 0;

244 
	}
}

247 
	$rc⁄n_gë_¥obe_öãrvÆ
(c⁄° 
rc⁄n
 *
rc
)

249  
rc
->
¥obe_öãrvÆ
;

250 
	}
}

260 
	$rc⁄n_c⁄√˘
(
rc⁄n
 *
rc
, c⁄° *
èrgë
, c⁄° *
«me
)

262 
	`rc⁄n_disc⁄√˘
(
rc
);

263 
	`rc⁄n_£t_èrgë__
(
rc
, 
èrgë
, 
«me
);

264 
rc
->
ªlübÀ
 = 
åue
;

265 
	`ªc⁄√˘
(
rc
);

266 
	}
}

277 
	$rc⁄n_c⁄√˘_uƒñübly
(
rc⁄n
 *
rc
,

278 
vc⁄n
 *vc⁄n, c⁄° *
«me
)

280 
	`as£π
(
vc⁄n
 !
NULL
);

281 
	`rc⁄n_disc⁄√˘
(
rc
);

282 
	`rc⁄n_£t_èrgë__
(
rc
, 
	`vc⁄n_gë_«me
(
vc⁄n
), 
«me
);

283 
rc
->
ªlübÀ
 = 
Ál£
;

284 
rc
->
vc⁄n
 = vconn;

285 
rc
->
œ°_c⁄√˘ed
 = 
	`time_now
();

286 
	`°©e_å™sôi⁄
(
rc
, 
S_ACTIVE
);

287 
	}
}

291 
	$rc⁄n_ªc⁄√˘
(
rc⁄n
 *
rc
)

293 i‡(
rc
->
°©e
 & (
S_ACTIVE
 | 
S_IDLE
)) {

294 
	`VLOG_INFO
("%s: disc⁄√˘ög", 
rc
->
«me
);

295 
	`disc⁄√˘
(
rc
, 0);

297 
	}
}

300 
	$rc⁄n_disc⁄√˘
(
rc⁄n
 *
rc
)

302 i‡(
rc
->
°©e
 !
S_VOID
) {

303 i‡(
rc
->
vc⁄n
) {

304 
	`vc⁄n_˛o£
(
rc
->
vc⁄n
);

305 
rc
->
vc⁄n
 = 
NULL
;

307 
	`rc⁄n_£t_èrgë__
(
rc
, "void", 
NULL
);

308 
rc
->
ªlübÀ
 = 
Ál£
;

310 
rc
->
backoff
 = 0;

311 
rc
->
backoff_dódlöe
 = 
TIME_MIN
;

313 
	`°©e_å™sôi⁄
(
rc
, 
S_VOID
);

315 
	}
}

319 
	$rc⁄n_de°roy
(
rc⁄n
 *
rc
)

321 i‡(
rc
) {

322 
size_t
 
i
;

324 
	`‰ì
(
rc
->
«me
);

325 
	`‰ì
(
rc
->
èrgë
);

326 
	`vc⁄n_˛o£
(
rc
->
vc⁄n
);

327 
	`Êush_queue
(
rc
);

328 
	`oÂbuf_li°_dñëe
(&
rc
->
txq
);

329 
i
 = 0; i < 
rc
->
n_m⁄ô‹s
; i++) {

330 
	`vc⁄n_˛o£
(
rc
->
m⁄ô‹s
[
i
]);

332 
	`‰ì
(
rc
);

334 
	}
}

337 
	$timeout_VOID
(c⁄° 
rc⁄n
 *
rc
 
OVS_UNUSED
)

339  
UINT_MAX
;

340 
	}
}

343 
	$run_VOID
(
rc⁄n
 *
rc
 
OVS_UNUSED
)

346 
	}
}

349 
	$ªc⁄√˘
(
rc⁄n
 *
rc
)

351 
ªtvÆ
;

353 i‡(
	`rc⁄n_loggög_c⁄√˘i⁄_©ãm±s__
(
rc
)) {

354 
	`VLOG_INFO
("%s: c⁄√˘ög...", 
rc
->
«me
);

356 
rc
->
n_©ãm±ed_c⁄√˘i⁄s
++;

357 
ªtvÆ
 = 
	`vc⁄n_›í
(
rc
->
èrgë
, 
OFP10_VERSION
, &rc->
vc⁄n
,Ñc->
ds˝
);

358 i‡(!
ªtvÆ
) {

359 
rc
->
ªmŸe_ù
 = 
	`vc⁄n_gë_ªmŸe_ù
‘c->
vc⁄n
);

360 
rc
->
loˇl_ù
 = 
	`vc⁄n_gë_loˇl_ù
‘c->
vc⁄n
);

361 
rc
->
ªmŸe_p‹t
 = 
	`vc⁄n_gë_ªmŸe_p‹t
‘c->
vc⁄n
);

362 
rc
->
backoff_dódlöe
 = 
	`time_now
(Ë+Ñc->
backoff
;

363 
	`°©e_å™sôi⁄
(
rc
, 
S_CONNECTING
);

365 
	`VLOG_WARN
("%s: c⁄√˘i⁄ faûed (%s)", 
rc
->
«me
, 
	`°ªº‹
(
ªtvÆ
));

366 
rc
->
backoff_dódlöe
 = 
TIME_MAX
;

367 
	`disc⁄√˘
(
rc
, 
ªtvÆ
);

369 
	}
}

372 
	$timeout_BACKOFF
(c⁄° 
rc⁄n
 *
rc
)

374  
rc
->
backoff
;

375 
	}
}

378 
	$run_BACKOFF
(
rc⁄n
 *
rc
)

380 i‡(
	`timed_out
(
rc
)) {

381 
	`ªc⁄√˘
(
rc
);

383 
	}
}

386 
	$timeout_CONNECTING
(c⁄° 
rc⁄n
 *
rc
)

388  
	`MAX
(1, 
rc
->
backoff
);

389 
	}
}

392 
	$run_CONNECTING
(
rc⁄n
 *
rc
)

394 
ªtvÆ
 = 
	`vc⁄n_c⁄√˘
(
rc
->
vc⁄n
);

395 i‡(!
ªtvÆ
) {

396 
	`VLOG_INFO
("%s: c⁄√˘ed", 
rc
->
«me
);

397 
rc
->
n_suc˚ssful_c⁄√˘i⁄s
++;

398 
	`°©e_å™sôi⁄
(
rc
, 
S_ACTIVE
);

399 
rc
->
œ°_c⁄√˘ed
 =Ñc->
°©e_íãªd
;

400 } i‡(
ªtvÆ
 !
EAGAIN
) {

401 i‡(
	`rc⁄n_loggög_c⁄√˘i⁄_©ãm±s__
(
rc
)) {

402 
	`VLOG_INFO
("%s: connection failed (%s)",

403 
rc
->
«me
, 
	`°ªº‹
(
ªtvÆ
));

405 
	`disc⁄√˘
(
rc
, 
ªtvÆ
);

406 } i‡(
	`timed_out
(
rc
)) {

407 i‡(
	`rc⁄n_loggög_c⁄√˘i⁄_©ãm±s__
(
rc
)) {

408 
	`VLOG_INFO
("%s: c⁄√˘i⁄Åimed out", 
rc
->
«me
);

410 
rc
->
backoff_dódlöe
 = 
TIME_MAX
;

411 
	`disc⁄√˘
(
rc
, 
ETIMEDOUT
);

413 
	}
}

416 
	$do_tx_w‹k
(
rc⁄n
 *
rc
)

418 i‡(
	`li°_is_em±y
(&
rc
->
txq
)) {

421 !
	`li°_is_em±y
(&
rc
->
txq
)) {

422 
îr‹
 = 
	`åy_£nd
(
rc
);

423 i‡(
îr‹
) {

426 
rc
->
œ°_a˘ivôy
 = 
	`time_now
();

428 i‡(
	`li°_is_em±y
(&
rc
->
txq
)) {

429 
	`pﬁl_immedüã_wake
();

431 
	}
}

434 
	$timeout_ACTIVE
(c⁄° 
rc⁄n
 *
rc
)

436 i‡(
rc
->
¥obe_öãrvÆ
) {

437 
ba£
 = 
	`MAX
(
rc
->
œ°_a˘ivôy
,Ñc->
°©e_íãªd
);

438 
¨g
 = 
ba£
 + 
rc
->
¥obe_öãrvÆ
 -Ñc->
°©e_íãªd
;

439  
¨g
;

441  
UINT_MAX
;

442 
	}
}

445 
	$run_ACTIVE
(
rc⁄n
 *
rc
)

447 i‡(
	`timed_out
(
rc
)) {

448 
ba£
 = 
	`MAX
(
rc
->
œ°_a˘ivôy
,Ñc->
°©e_íãªd
);

449 
vîsi⁄
;

451 
	`VLOG_DBG
("%s: idle %u seconds, sending inactivityÖrobe",

452 
rc
->
«me
, (Ë(
	`time_now
(Ë- 
ba£
));

454 
vîsi⁄
 = 
	`rc⁄n_gë_vîsi⁄
(
rc
);

455 
	`as£π
(
vîsi⁄
 >= 0 && version <= 0xff);

460 
	`°©e_å™sôi⁄
(
rc
, 
S_IDLE
);

461 
	`rc⁄n_£nd
(
rc
, 
	`make_echo_ªque°
(
vîsi⁄
), 
NULL
);

465 
	`do_tx_w‹k
(
rc
);

466 
	}
}

469 
	$timeout_IDLE
(c⁄° 
rc⁄n
 *
rc
)

471  
rc
->
¥obe_öãrvÆ
;

472 
	}
}

475 
	$run_IDLE
(
rc⁄n
 *
rc
)

477 i‡(
	`timed_out
(
rc
)) {

478 
	`VLOG_ERR
("%s:ÇoÑesponseÅo inactivityÖrobeáfter %u "

480 
rc
->
«me
, 
	`ñ≠£d_ö_this_°©e
(rc));

481 
	`disc⁄√˘
(
rc
, 
ETIMEDOUT
);

483 
	`do_tx_w‹k
(
rc
);

485 
	}
}

491 
	$rc⁄n_run
(
rc⁄n
 *
rc
)

493 
ﬁd_°©e
;

494 
size_t
 
i
;

496 i‡(
rc
->
vc⁄n
) {

497 
	`vc⁄n_run
(
rc
->
vc⁄n
);

499 
i
 = 0; i < 
rc
->
n_m⁄ô‹s
; i++) {

500 
	`vc⁄n_run
(
rc
->
m⁄ô‹s
[
i
]);

504 
ﬁd_°©e
 = 
rc
->
°©e
;

505 
rc
->
°©e
) {

506 
	#STATE
(
NAME
, 
VALUE
Ë
S_
##NAME: 
run_
##
	`NAME
(
rc
); ;

	)

507 
STATES


508 #unde‡
STATE


510 
	`NOT_REACHED
();

512 } 
rc
->
°©e
 !
ﬁd_°©e
);

513 
	}
}

518 
	$rc⁄n_run_waô
(
rc⁄n
 *
rc
)

520 
timeo
;

521 
size_t
 
i
;

523 i‡(
rc
->
vc⁄n
) {

524 
	`vc⁄n_run_waô
(
rc
->
vc⁄n
);

525 i‡((
rc
->
°©e
 & (
S_ACTIVE
 | 
S_IDLE
)Ë&& !
	`li°_is_em±y
(&rc->
txq
)) {

526 
	`vc⁄n_waô
(
rc
->
vc⁄n
, 
WAIT_SEND
);

529 
i
 = 0; i < 
rc
->
n_m⁄ô‹s
; i++) {

530 
	`vc⁄n_run_waô
(
rc
->
m⁄ô‹s
[
i
]);

533 
timeo
 = 
	`timeout
(
rc
);

534 i‡(
timeo
 !
UINT_MAX
) {

535 
expúes
 = 
	`ßt_add
(
rc
->
°©e_íãªd
, 
timeo
);

536 
	`pﬁl_timî_waô_u¡û
(
expúes
 * 1000);

538 
	}
}

543 
oÂbuf
 *

544 
	$rc⁄n_ªcv
(
rc⁄n
 *
rc
)

546 i‡(
rc
->
°©e
 & (
S_ACTIVE
 | 
S_IDLE
)) {

547 
oÂbuf
 *
buf„r
;

548 
îr‹
 = 
	`vc⁄n_ªcv
(
rc
->
vc⁄n
, &
buf„r
);

549 i‡(!
îr‹
) {

550 
	`c›y_to_m⁄ô‹
(
rc
, 
buf„r
);

551 i‡(
rc
->
¥obably_admôãd
 || 
	`is_admôãd_msg
(
buf„r
)

552 || 
	`time_now
(Ë- 
rc
->
œ°_c⁄√˘ed
 >= 30) {

553 
rc
->
¥obably_admôãd
 = 
åue
;

554 
rc
->
œ°_admôãd
 = 
	`time_now
();

556 
rc
->
œ°_a˘ivôy
 = 
	`time_now
();

557 
rc
->
∑ckës_ª˚ived
++;

558 i‡(
rc
->
°©e
 =
S_IDLE
) {

559 
	`°©e_å™sôi⁄
(
rc
, 
S_ACTIVE
);

561  
buf„r
;

562 } i‡(
îr‹
 !
EAGAIN
) {

563 
	`ªp‹t_îr‹
(
rc
, 
îr‹
);

564 
	`disc⁄√˘
(
rc
, 
îr‹
);

567  
NULL
;

568 
	}
}

573 
	$rc⁄n_ªcv_waô
(
rc⁄n
 *
rc
)

575 i‡(
rc
->
vc⁄n
) {

576 
	`vc⁄n_waô
(
rc
->
vc⁄n
, 
WAIT_RECV
);

578 
	}
}

593 
	$rc⁄n_£nd
(
rc⁄n
 *
rc
, 
oÂbuf
 *
b
,

594 
rc⁄n_∑ckë_cou¡î
 *
cou¡î
)

596 i‡(
	`rc⁄n_is_c⁄√˘ed
(
rc
)) {

597 
	`COVERAGE_INC
(
rc⁄n_queued
);

598 
	`c›y_to_m⁄ô‹
(
rc
, 
b
);

599 
b
->
¥iv©e_p
 = 
cou¡î
;

600 i‡(
cou¡î
) {

601 
	`rc⁄n_∑ckë_cou¡î_öc
(
cou¡î
, 
b
->
size
);

603 
	`li°_push_back
(&
rc
->
txq
, &
b
->
li°_node
);

609 i‡(
rc
->
txq
.
√xt
 =&
b
->
li°_node
) {

610 
	`åy_£nd
(
rc
);

614 
	`oÂbuf_dñëe
(
b
);

615  
ENOTCONN
;

617 
	}
}

632 
	$rc⁄n_£nd_wôh_limô
(
rc⁄n
 *
rc
, 
oÂbuf
 *
b
,

633 
rc⁄n_∑ckë_cou¡î
 *
cou¡î
, 
queue_limô
)

635 i‡(
cou¡î
->
n_∑ckës
 < 
queue_limô
) {

636  
	`rc⁄n_£nd
(
rc
, 
b
, 
cou¡î
);

638 
	`COVERAGE_INC
(
rc⁄n_ovîÊow
);

639 
	`oÂbuf_dñëe
(
b
);

640  
EAGAIN
;

642 
	}
}

648 
	$rc⁄n_∑ckës_£¡
(c⁄° 
rc⁄n
 *
rc
)

650  
rc
->
∑ckës_£¡
;

651 
	}
}

656 
	$rc⁄n_add_m⁄ô‹
(
rc⁄n
 *
rc
, 
vc⁄n
 *vconn)

658 i‡(
rc
->
n_m⁄ô‹s
 < 
	`ARRAY_SIZE
‘c->
m⁄ô‹s
)) {

659 
	`VLOG_INFO
("√w m⁄ô‹ c⁄√˘i⁄ from %s", 
	`vc⁄n_gë_«me
(
vc⁄n
));

660 
rc
->
m⁄ô‹s
[rc->
n_m⁄ô‹s
++] = 
vc⁄n
;

662 
	`VLOG_DBG
("too many monitor connections, discarding %s",

663 
	`vc⁄n_gë_«me
(
vc⁄n
));

664 
	`vc⁄n_˛o£
(
vc⁄n
);

666 
	}
}

672 
	$rc⁄n_gë_«me
(c⁄° 
rc⁄n
 *
rc
)

674  
rc
->
«me
;

675 
	}
}

679 
	$rc⁄n_£t_«me
(
rc⁄n
 *
rc
, c⁄° *
√w_«me
)

681 
	`‰ì
(
rc
->
«me
);

682 
rc
->
«me
 = 
	`x°rdup
(
√w_«me
);

683 
	}
}

688 
	$rc⁄n_gë_èrgë
(c⁄° 
rc⁄n
 *
rc
)

690  
rc
->
èrgë
;

691 
	}
}

695 
boﬁ


696 
	$rc⁄n_is_Æive
(c⁄° 
rc⁄n
 *rconn)

698  
rc⁄n
->
°©e
 !
S_VOID
;

699 
	}
}

702 
boﬁ


703 
	$rc⁄n_is_c⁄√˘ed
(c⁄° 
rc⁄n
 *rconn)

705  
	`is_c⁄√˘ed_°©e
(
rc⁄n
->
°©e
);

706 
	}
}

710 
boﬁ


711 
	$rc⁄n_is_admôãd
(c⁄° 
rc⁄n
 *rconn)

713  (
	`rc⁄n_is_c⁄√˘ed
(
rc⁄n
)

714 && 
rc⁄n
->
œ°_admôãd
 >rc⁄n->
œ°_c⁄√˘ed
);

715 
	}
}

721 
	$rc⁄n_Áûuª_duøti⁄
(c⁄° 
rc⁄n
 *rconn)

723  
	`rc⁄n_is_admôãd
(
rc⁄n
Ë? 0 : 
	`time_now
(Ë-Ñc⁄n->
œ°_admôãd
;

724 
	}
}

728 
ovs_be32


729 
	$rc⁄n_gë_ªmŸe_ù
(c⁄° 
rc⁄n
 *rconn)

731  
rc⁄n
->
ªmŸe_ù
;

732 
	}
}

736 
ovs_be16


737 
	$rc⁄n_gë_ªmŸe_p‹t
(c⁄° 
rc⁄n
 *rconn)

739  
rc⁄n
->
ªmŸe_p‹t
;

740 
	}
}

745 
ovs_be32


746 
	$rc⁄n_gë_loˇl_ù
(c⁄° 
rc⁄n
 *rconn)

748  
rc⁄n
->
loˇl_ù
;

749 
	}
}

753 
ovs_be16


754 
	$rc⁄n_gë_loˇl_p‹t
(c⁄° 
rc⁄n
 *rconn)

756  
rc⁄n
->
vc⁄n
 ? 
	`vc⁄n_gë_loˇl_p‹t
(rconn->vconn) : 0;

757 
	}
}

762 
	$rc⁄n_gë_vîsi⁄
(c⁄° 
rc⁄n
 *rconn)

764  
rc⁄n
->
vc⁄n
 ? 
	`vc⁄n_gë_vîsi⁄
(rconn->vconn) : -1;

765 
	}
}

770 
	$rc⁄n_∑ckës_ª˚ived
(c⁄° 
rc⁄n
 *
rc
)

772  
rc
->
∑ckës_ª˚ived
;

773 
	}
}

778 
	$rc⁄n_gë_°©e
(c⁄° 
rc⁄n
 *
rc
)

780  
	`°©e_«me
(
rc
->
°©e
);

781 
	}
}

785 
time_t


786 
	$rc⁄n_gë_œ°_c⁄√˘i⁄
(c⁄° 
rc⁄n
 *
rc
)

788  
rc
->
œ°_c⁄√˘ed
;

789 
	}
}

793 
time_t


794 
	$rc⁄n_gë_œ°_disc⁄√˘
(c⁄° 
rc⁄n
 *
rc
)

796  
rc
->
œ°_disc⁄√˘ed
;

797 
	}
}

802 
	$rc⁄n_gë_c⁄√˘i⁄_£qno
(c⁄° 
rc⁄n
 *
rc
)

804  
rc
->
£qno
;

805 
	}
}

818 
	$rc⁄n_gë_œ°_îr‹
(c⁄° 
rc⁄n
 *
rc
)

820  
rc
->
œ°_îr‹
;

821 
	}
}

825 
	$rc⁄n_cou¡_txqÀn
(c⁄° 
rc⁄n
 *
rc
)

827  
	`li°_size
(&
rc
->
txq
);

828 
	}
}

830 
rc⁄n_∑ckë_cou¡î
 *

831 
	$rc⁄n_∑ckë_cou¡î_¸óã
()

833 
rc⁄n_∑ckë_cou¡î
 *
c
 = 
	`xzÆloc
( *c);

834 
c
->
ªf_˙t
 = 1;

835  
c
;

836 
	}
}

839 
	$rc⁄n_∑ckë_cou¡î_de°roy
(
rc⁄n_∑ckë_cou¡î
 *
c
)

841 i‡(
c
) {

842 
	`as£π
(
c
->
ªf_˙t
 > 0);

843 i‡(!--
c
->
ªf_˙t
 && !c->
n_∑ckës
) {

844 
	`‰ì
(
c
);

847 
	}
}

850 
	$rc⁄n_∑ckë_cou¡î_öc
(
rc⁄n_∑ckë_cou¡î
 *
c
, 
n_byãs
)

852 
c
->
n_∑ckës
++;

853 
c
->
n_byãs
 +=Ç_bytes;

854 
	}
}

857 
	$rc⁄n_∑ckë_cou¡î_dec
(
rc⁄n_∑ckë_cou¡î
 *
c
, 
n_byãs
)

859 
	`as£π
(
c
->
n_∑ckës
 > 0);

860 
	`as£π
(
c
->
n_byãs
 >=Ç_bytes);

862 
c
->
n_byãs
 -=Ç_bytes;

863 
c
->
n_∑ckës
--;

864 i‡(!
c
->
n_∑ckës
) {

865 
	`as£π
(!
c
->
n_byãs
);

866 i‡(!
c
->
ªf_˙t
) {

867 
	`‰ì
(
c
);

870 
	}
}

878 
	$rc⁄n_£t_èrgë__
(
rc⁄n
 *
rc
, c⁄° *
èrgë
, c⁄° *
«me
)

880 
	`‰ì
(
rc
->
«me
);

881 
rc
->
«me
 = 
	`x°rdup
“amê?Çamê: 
èrgë
);

882 
	`‰ì
(
rc
->
èrgë
);

883 
rc
->
èrgë
 = 
	`x°rdup
(target);

884 
rc
->
loˇl_ù
 = 0;

885 
rc
->
ªmŸe_ù
 = 0;

886 
rc
->
ªmŸe_p‹t
 = 0;

887 
	}
}

892 
	$åy_£nd
(
rc⁄n
 *
rc
)

894 
oÂbuf
 *
msg
 = 
	`oÂbuf_‰om_li°
(
rc
->
txq
.
√xt
);

895 
n_byãs
 = 
msg
->
size
;

896 
rc⁄n_∑ckë_cou¡î
 *
cou¡î
 = 
msg
->
¥iv©e_p
;

897 
ªtvÆ
;

902 
	`li°_ªmove
(&
msg
->
li°_node
);

904 
ªtvÆ
 = 
	`vc⁄n_£nd
(
rc
->
vc⁄n
, 
msg
);

905 i‡(
ªtvÆ
) {

906 
	`li°_push_‰⁄t
(&
rc
->
txq
, &
msg
->
li°_node
);

907 i‡(
ªtvÆ
 !
EAGAIN
) {

908 
	`ªp‹t_îr‹
(
rc
, 
ªtvÆ
);

909 
	`disc⁄√˘
(
rc
, 
ªtvÆ
);

911  
ªtvÆ
;

913 
	`COVERAGE_INC
(
rc⁄n_£¡
);

914 
rc
->
∑ckës_£¡
++;

915 i‡(
cou¡î
) {

916 
	`rc⁄n_∑ckë_cou¡î_dec
(
cou¡î
, 
n_byãs
);

919 
	}
}

925 
	$ªp‹t_îr‹
(
rc⁄n
 *
rc
, 
îr‹
)

927 i‡(
îr‹
 =
EOF
) {

931 
vlog_Àvñ
 
Àvñ
 = 
rc
->
ªlübÀ
 ? 
VLL_INFO
 : 
VLL_DBG
;

932 
	`VLOG
(
Àvñ
, "%s: c⁄√˘i⁄ clo£d byÖìr", 
rc
->
«me
);

934 
	`VLOG_WARN
("%s: c⁄√˘i⁄ dr›≥d (%s)", 
rc
->
«me
, 
	`°ªº‹
(
îr‹
));

936 
	}
}

949 
	$disc⁄√˘
(
rc⁄n
 *
rc
, 
îr‹
)

951 
rc
->
œ°_îr‹
 = 
îr‹
;

952 i‡(
rc
->
ªlübÀ
) {

953 
time_t
 
now
 = 
	`time_now
();

955 i‡(
rc
->
°©e
 & (
S_CONNECTING
 | 
S_ACTIVE
 | 
S_IDLE
)) {

956 
rc
->
œ°_disc⁄√˘ed
 = 
now
;

957 
	`vc⁄n_˛o£
(
rc
->
vc⁄n
);

958 
rc
->
vc⁄n
 = 
NULL
;

959 
	`Êush_queue
(
rc
);

962 i‡(
now
 >
rc
->
backoff_dódlöe
) {

963 
rc
->
backoff
 = 1;

964 } i‡(
rc
->
backoff
 <Ñc->
max_backoff
 / 2) {

965 
rc
->
backoff
 = 
	`MAX
(1, 2 *Ñc->backoff);

966 
	`VLOG_INFO
("%s: waiting %d seconds beforeÑeconnect",

967 
rc
->
«me
,Ñc->
backoff
);

969 i‡(
	`rc⁄n_loggög_c⁄√˘i⁄_©ãm±s__
(
rc
)) {

970 
	`VLOG_INFO
("%s: continuingÅoÑetry connections inÅhe "

972 
rc
->
«me
);

974 
rc
->
backoff
 =Ñc->
max_backoff
;

976 
rc
->
backoff_dódlöe
 = 
now
 +Ñc->
backoff
;

977 
	`°©e_å™sôi⁄
(
rc
, 
S_BACKOFF
);

979 
rc
->
œ°_disc⁄√˘ed
 = 
	`time_now
();

980 
	`rc⁄n_disc⁄√˘
(
rc
);

982 
	}
}

987 
	$Êush_queue
(
rc⁄n
 *
rc
)

989 i‡(
	`li°_is_em±y
(&
rc
->
txq
)) {

992 !
	`li°_is_em±y
(&
rc
->
txq
)) {

993 
oÂbuf
 *
b
 = 
	`oÂbuf_‰om_li°
(
	`li°_p›_‰⁄t
(&
rc
->
txq
));

994 
rc⁄n_∑ckë_cou¡î
 *
cou¡î
 = 
b
->
¥iv©e_p
;

995 i‡(
cou¡î
) {

996 
	`rc⁄n_∑ckë_cou¡î_dec
(
cou¡î
, 
b
->
size
);

998 
	`COVERAGE_INC
(
rc⁄n_disˇrded
);

999 
	`oÂbuf_dñëe
(
b
);

1001 
	`pﬁl_immedüã_wake
();

1002 
	}
}

1005 
	$ñ≠£d_ö_this_°©e
(c⁄° 
rc⁄n
 *
rc
)

1007  
	`time_now
(Ë- 
rc
->
°©e_íãªd
;

1008 
	}
}

1011 
	$timeout
(c⁄° 
rc⁄n
 *
rc
)

1013 
rc
->
°©e
) {

1014 
	#STATE
(
NAME
, 
VALUE
Ë
S_
##NAME:  
timeout_
##
	`NAME
(
rc
);

	)

1015 
STATES


1016 #unde‡
STATE


1018 
	`NOT_REACHED
();

1020 
	}
}

1022 
boﬁ


1023 
	$timed_out
(c⁄° 
rc⁄n
 *
rc
)

1025  
	`time_now
(Ë>
	`ßt_add
(
rc
->
°©e_íãªd
, 
	`timeout
(rc));

1026 
	}
}

1029 
	$°©e_å™sôi⁄
(
rc⁄n
 *
rc
, 
°©e
 state)

1031 
rc
->
£qno
 +‘c->
°©e
 =
S_ACTIVE
) != (state == S_ACTIVE);

1032 i‡(
	`is_c⁄√˘ed_°©e
(
°©e
Ë&& !is_c⁄√˘ed_°©e(
rc
->state)) {

1033 
rc
->
¥obably_admôãd
 = 
Ál£
;

1035 i‡(
	`rc⁄n_is_c⁄√˘ed
(
rc
)) {

1036 
rc
->
tŸÆ_time_c⁄√˘ed
 +
	`ñ≠£d_ö_this_°©e
(rc);

1038 
	`VLOG_DBG
("%s:É¡îög %s", 
rc
->
«me
, 
	`°©e_«me
(
°©e
));

1039 
rc
->
°©e
 = state;

1040 
rc
->
°©e_íãªd
 = 
	`time_now
();

1041 
	}
}

1044 
	$c›y_to_m⁄ô‹
(
rc⁄n
 *
rc
, c⁄° 
oÂbuf
 *
b
)

1046 
oÂbuf
 *
˛⁄e
 = 
NULL
;

1047 
ªtvÆ
;

1048 
size_t
 
i
;

1050 
i
 = 0; i < 
rc
->
n_m⁄ô‹s
; ) {

1051 
vc⁄n
 *vc⁄¿
rc
->
m⁄ô‹s
[
i
];

1053 i‡(!
˛⁄e
) {

1054 
˛⁄e
 = 
	`oÂbuf_˛⁄e
(
b
);

1056 
ªtvÆ
 = 
	`vc⁄n_£nd
(
vc⁄n
, 
˛⁄e
);

1057 i‡(!
ªtvÆ
) {

1058 
˛⁄e
 = 
NULL
;

1059 } i‡(
ªtvÆ
 !
EAGAIN
) {

1060 
	`VLOG_DBG
("%s: closing monitor connectionÅo %s: %s",

1061 
	`rc⁄n_gë_«me
(
rc
), 
	`vc⁄n_gë_«me
(
vc⁄n
),

1062 
	`°ªº‹
(
ªtvÆ
));

1063 
rc
->
m⁄ô‹s
[
i
] =Ñc->m⁄ô‹s[--rc->
n_m⁄ô‹s
];

1066 
i
++;

1068 
	`oÂbuf_dñëe
(
˛⁄e
);

1069 
	}
}

1071 
boﬁ


1072 
	$is_c⁄√˘ed_°©e
(
°©e
 state)

1074  (
°©e
 & (
S_ACTIVE
 | 
S_IDLE
)) != 0;

1075 
	}
}

1077 
boﬁ


1078 
	$is_admôãd_msg
(c⁄° 
oÂbuf
 *
b
)

1080 
oÂty≥
 
ty≥
;

1081 
oÂîr
 
îr‹
;

1083 
îr‹
 = 
	`oÂty≥_decode
(&
ty≥
, 
b
->
d©a
);

1084 i‡(
îr‹
) {

1085  
Ál£
;

1088 
ty≥
) {

1089 
OFPTYPE_HELLO
:

1090 
OFPTYPE_ERROR
:

1091 
OFPTYPE_ECHO_REQUEST
:

1092 
OFPTYPE_ECHO_REPLY
:

1093 
OFPTYPE_FEATURES_REQUEST
:

1094 
OFPTYPE_FEATURES_REPLY
:

1095 
OFPTYPE_GET_CONFIG_REQUEST
:

1096 
OFPTYPE_GET_CONFIG_REPLY
:

1097 
OFPTYPE_SET_CONFIG
:

1098  
Ál£
;

1100 
OFPTYPE_PACKET_IN
:

1101 
OFPTYPE_FLOW_REMOVED
:

1102 
OFPTYPE_PORT_STATUS
:

1103 
OFPTYPE_PACKET_OUT
:

1104 
OFPTYPE_FLOW_MOD
:

1105 
OFPTYPE_PORT_MOD
:

1106 
OFPTYPE_BARRIER_REQUEST
:

1107 
OFPTYPE_BARRIER_REPLY
:

1108 
OFPTYPE_DESC_STATS_REQUEST
:

1109 
OFPTYPE_DESC_STATS_REPLY
:

1110 
OFPTYPE_FLOW_STATS_REQUEST
:

1111 
OFPTYPE_FLOW_STATS_REPLY
:

1112 
OFPTYPE_AGGREGATE_STATS_REQUEST
:

1113 
OFPTYPE_AGGREGATE_STATS_REPLY
:

1114 
OFPTYPE_TABLE_STATS_REQUEST
:

1115 
OFPTYPE_TABLE_STATS_REPLY
:

1116 
OFPTYPE_PORT_STATS_REQUEST
:

1117 
OFPTYPE_PORT_STATS_REPLY
:

1118 
OFPTYPE_QUEUE_STATS_REQUEST
:

1119 
OFPTYPE_QUEUE_STATS_REPLY
:

1120 
OFPTYPE_PORT_DESC_STATS_REQUEST
:

1121 
OFPTYPE_PORT_DESC_STATS_REPLY
:

1122 
OFPTYPE_ROLE_REQUEST
:

1123 
OFPTYPE_ROLE_REPLY
:

1124 
OFPTYPE_SET_FLOW_FORMAT
:

1125 
OFPTYPE_FLOW_MOD_TABLE_ID
:

1126 
OFPTYPE_SET_PACKET_IN_FORMAT
:

1127 
OFPTYPE_FLOW_AGE
:

1128 
OFPTYPE_SET_ASYNC_CONFIG
:

1129 
OFPTYPE_SET_CONTROLLER_ID
:

1130 
OFPTYPE_FLOW_MONITOR_STATS_REQUEST
:

1131 
OFPTYPE_FLOW_MONITOR_STATS_REPLY
:

1132 
OFPTYPE_FLOW_MONITOR_CANCEL
:

1133 
OFPTYPE_FLOW_MONITOR_PAUSED
:

1134 
OFPTYPE_FLOW_MONITOR_RESUMED
:

1136  
åue
;

1138 
	}
}

1143 
boﬁ


1144 
	$rc⁄n_loggög_c⁄√˘i⁄_©ãm±s__
(c⁄° 
rc⁄n
 *
rc
)

1146  
rc
->
backoff
 <Ñc->
max_backoff
;

1147 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/rconn.h

17 #i‚de‡
RCONN_H


18 
	#RCONN_H
 1

	)

20 
	~<°dboﬁ.h
>

21 
	~<°döt.h
>

22 
	~<time.h
>

23 
	~"›ívswôch/ty≥s.h
"

37 
	gvc⁄n
;

38 
	grc⁄n_∑ckë_cou¡î
;

40 
rc⁄n
 *
rc⁄n_¸óã
(
öa˘ivôy_¥obe_öãrvÆ
,

41 
max_backoff
, 
uöt8_t
 
ds˝
);

42 
rc⁄n_£t_ds˝
(
rc⁄n
 *
rc
, 
uöt8_t
 
ds˝
);

43 
uöt8_t
 
rc⁄n_gë_ds˝
(c⁄° 
rc⁄n
 *
rc
);

44 
rc⁄n_£t_max_backoff
(
rc⁄n
 *, 
max_backoff
);

45 
rc⁄n_gë_max_backoff
(c⁄° 
rc⁄n
 *);

46 
rc⁄n_£t_¥obe_öãrvÆ
(
rc⁄n
 *, 
öa˘ivôy_¥obe_öãrvÆ
);

47 
rc⁄n_gë_¥obe_öãrvÆ
(c⁄° 
rc⁄n
 *);

49 
rc⁄n_c⁄√˘
(
rc⁄n
 *, c⁄° *
èrgë
, c⁄° *
«me
);

50 
rc⁄n_c⁄√˘_uƒñübly
(
rc⁄n
 *,

51 
vc⁄n
 *, c⁄° *
«me
);

52 
rc⁄n_ªc⁄√˘
(
rc⁄n
 *);

53 
rc⁄n_disc⁄√˘
(
rc⁄n
 *);

54 
rc⁄n_de°roy
(
rc⁄n
 *);

56 
rc⁄n_run
(
rc⁄n
 *);

57 
rc⁄n_run_waô
(
rc⁄n
 *);

58 
oÂbuf
 *
rc⁄n_ªcv
(
rc⁄n
 *);

59 
rc⁄n_ªcv_waô
(
rc⁄n
 *);

60 
rc⁄n_£nd
(
rc⁄n
 *, 
oÂbuf
 *, 
rc⁄n_∑ckë_cou¡î
 *);

61 
rc⁄n_£nd_wôh_limô
(
rc⁄n
 *, 
oÂbuf
 *,

62 
rc⁄n_∑ckë_cou¡î
 *, 
queue_limô
);

63 
rc⁄n_∑ckës_£¡
(c⁄° 
rc⁄n
 *);

64 
rc⁄n_∑ckës_ª˚ived
(c⁄° 
rc⁄n
 *);

66 
rc⁄n_add_m⁄ô‹
(
rc⁄n
 *, 
vc⁄n
 *);

68 c⁄° *
rc⁄n_gë_«me
(c⁄° 
rc⁄n
 *);

69 
rc⁄n_£t_«me
(
rc⁄n
 *, c⁄° *
√w_«me
);

70 c⁄° *
rc⁄n_gë_èrgë
(c⁄° 
rc⁄n
 *);

72 
boﬁ
 
rc⁄n_is_Æive
(c⁄° 
rc⁄n
 *);

73 
boﬁ
 
rc⁄n_is_c⁄√˘ed
(c⁄° 
rc⁄n
 *);

74 
boﬁ
 
rc⁄n_is_admôãd
(c⁄° 
rc⁄n
 *);

75 
rc⁄n_Áûuª_duøti⁄
(c⁄° 
rc⁄n
 *);

77 
ovs_be32
 
rc⁄n_gë_ªmŸe_ù
(c⁄° 
rc⁄n
 *);

78 
ovs_be16
 
rc⁄n_gë_ªmŸe_p‹t
(c⁄° 
rc⁄n
 *);

79 
ovs_be32
 
rc⁄n_gë_loˇl_ù
(c⁄° 
rc⁄n
 *);

80 
ovs_be16
 
rc⁄n_gë_loˇl_p‹t
(c⁄° 
rc⁄n
 *);

81 
rc⁄n_gë_vîsi⁄
(c⁄° 
rc⁄n
 *);

83 c⁄° *
rc⁄n_gë_°©e
(c⁄° 
rc⁄n
 *);

84 
time_t
 
rc⁄n_gë_œ°_c⁄√˘i⁄
(c⁄° 
rc⁄n
 *);

85 
time_t
 
rc⁄n_gë_œ°_disc⁄√˘
(c⁄° 
rc⁄n
 *);

86 
rc⁄n_gë_c⁄√˘i⁄_£qno
(c⁄° 
rc⁄n
 *);

87 
rc⁄n_gë_œ°_îr‹
(c⁄° 
rc⁄n
 *);

88 
rc⁄n_cou¡_txqÀn
(c⁄° 
rc⁄n
 *);

91 
	src⁄n_∑ckë_cou¡î
 {

92 
	mn_∑ckës
;

93 
	mn_byãs
;

94 
	mªf_˙t
;

97 
rc⁄n_∑ckë_cou¡î
 *
rc⁄n_∑ckë_cou¡î_¸óã
();

98 
rc⁄n_∑ckë_cou¡î_de°roy
(
rc⁄n_∑ckë_cou¡î
 *);

99 
rc⁄n_∑ckë_cou¡î_öc
(
rc⁄n_∑ckë_cou¡î
 *, 
n_byãs
);

100 
rc⁄n_∑ckë_cou¡î_dec
(
rc⁄n_∑ckë_cou¡î
 *, 
n_byãs
);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/reconnect.c

17 
	~<c⁄fig.h
>

18 
	~"ªc⁄√˘.h
"

20 
	~<as£π.h
>

21 
	~<°dlib.h
>

23 
	~"pﬁl-lo›.h
"

24 
	~"vlog.h
"

26 
VLOG_DEFINE_THIS_MODULE
(
ªc⁄√˘
);

28 
	#STATES
 \

29 
	`STATE
(
VOID
, 1 << 0) \

30 
	`STATE
(
BACKOFF
, 1 << 1) \

31 
	`STATE
(
CONNECTING
, 1 << 3) \

32 
	`STATE
(
ACTIVE
, 1 << 4) \

33 
	`STATE
(
IDLE
, 1 << 5) \

34 
	`STATE
(
RECONNECT
, 1 << 6) \

35 
	`STATE
(
LISTENING
, 1 << 7)

	)

36 
	e°©e
 {

37 
	#STATE
(
NAME
, 
VALUE
Ë
S_
##NAME = VALUE,

	)

38 
	mSTATES


39 #unde‡
STATE


42 
boﬁ


43 
	$is_c⁄√˘ed_°©e
(
°©e
 state)

45  (
°©e
 & (
S_ACTIVE
 | 
S_IDLE
)) != 0;

46 
	}
}

48 
	sªc⁄√˘
 {

50 *
	m«me
;

51 
	mmö_backoff
;

52 
	mmax_backoff
;

53 
	m¥obe_öãrvÆ
;

54 
boﬁ
 
	m∑ssive
;

55 
vlog_Àvñ
 
	möfo
;

58 
°©e
 
	m°©e
;

59 
	m°©e_íãªd
;

60 
	mbackoff
;

61 
	mœ°_a˘ivôy
;

62 
	mœ°_c⁄√˘ed
;

63 
	mœ°_disc⁄√˘ed
;

64 
	mmax_åõs
;

68 
	m¸óti⁄_time
;

69 
	mn_©ãm±ed_c⁄√˘i⁄s
, 
	mn_suc˚ssful_c⁄√˘i⁄s
;

70 
	mtŸÆ_c⁄√˘ed_duøti⁄
;

71 
	m£qno
;

74 
ªc⁄√˘_å™sôi⁄__
(
ªc⁄√˘
 *, 
now
,

75 
°©e
 state);

76 
ªc⁄√˘_dódlöe__
(c⁄° 
ªc⁄√˘
 *);

77 
boﬁ
 
ªc⁄√˘_may_ªåy
(
ªc⁄√˘
 *);

80 
	$ªc⁄√˘_°©e_«me__
(
°©e
 state)

82 
°©e
) {

83 
	#STATE
(
NAME
, 
VALUE
Ë
S_
##NAME:  #NAME;

	)

84 
STATES


85 #unde‡
STATE


88 
	}
}

93 
ªc⁄√˘
 *

94 
	$ªc⁄√˘_¸óã
(
now
)

96 
ªc⁄√˘
 *
fsm
 = 
	`xzÆloc
( *fsm);

98 
fsm
->
«me
 = 
	`x°rdup
("void");

99 
fsm
->
mö_backoff
 = 
RECONNECT_DEFAULT_MIN_BACKOFF
;

100 
fsm
->
max_backoff
 = 
RECONNECT_DEFAULT_MAX_BACKOFF
;

101 
fsm
->
¥obe_öãrvÆ
 = 
RECONNECT_DEFAULT_PROBE_INTERVAL
;

102 
fsm
->
∑ssive
 = 
Ál£
;

103 
fsm
->
öfo
 = 
VLL_INFO
;

105 
fsm
->
°©e
 = 
S_VOID
;

106 
fsm
->
°©e_íãªd
 = 
now
;

107 
fsm
->
backoff
 = 0;

108 
fsm
->
œ°_a˘ivôy
 = 
now
;

109 
fsm
->
œ°_c⁄√˘ed
 = 
LLONG_MAX
;

110 
fsm
->
œ°_disc⁄√˘ed
 = 
LLONG_MAX
;

111 
fsm
->
max_åõs
 = 
UINT_MAX
;

112 
fsm
->
¸óti⁄_time
 = 
now
;

114  
fsm
;

115 
	}
}

119 
	$ªc⁄√˘_de°roy
(
ªc⁄√˘
 *
fsm
)

121 i‡(
fsm
) {

122 
	`‰ì
(
fsm
->
«me
);

123 
	`‰ì
(
fsm
);

125 
	}
}

138 
	$ªc⁄√˘_£t_quõt
(
ªc⁄√˘
 *
fsm
, 
boﬁ
 
quõt
)

140 
fsm
->
öfo
 = 
quõt
 ? 
VLL_DBG
 : 
VLL_INFO
;

141 
	}
}

145 
	$ªc⁄√˘_gë_«me
(c⁄° 
ªc⁄√˘
 *
fsm
)

147  
fsm
->
«me
;

148 
	}
}

155 
	$ªc⁄√˘_£t_«me
(
ªc⁄√˘
 *
fsm
, c⁄° *
«me
)

157 
	`‰ì
(
fsm
->
«me
);

158 
fsm
->
«me
 = 
	`x°rdup
(name ?Çame : "void");

159 
	}
}

164 
	$ªc⁄√˘_gë_mö_backoff
(c⁄° 
ªc⁄√˘
 *
fsm
)

166  
fsm
->
mö_backoff
;

167 
	}
}

172 
	$ªc⁄√˘_gë_max_backoff
(c⁄° 
ªc⁄√˘
 *
fsm
)

174  
fsm
->
max_backoff
;

175 
	}
}

184 
	$ªc⁄√˘_gë_¥obe_öãrvÆ
(c⁄° 
ªc⁄√˘
 *
fsm
)

186  
fsm
->
¥obe_öãrvÆ
;

187 
	}
}

196 
	$ªc⁄√˘_£t_max_åõs
(
ªc⁄√˘
 *
fsm
, 
max_åõs
)

198 
fsm
->
max_åõs
 = max_tries;

199 
	}
}

204 
	$ªc⁄√˘_gë_max_åõs
(
ªc⁄√˘
 *
fsm
)

206  
fsm
->
max_åõs
;

207 
	}
}

218 
	$ªc⁄√˘_£t_backoff
(
ªc⁄√˘
 *
fsm
, 
mö_backoff
, 
max_backoff
)

220 
fsm
->
mö_backoff
 = 
	`MAX
(min_backoff, 1000);

221 
fsm
->
max_backoff
 = (max_backoff

222 ? 
	`MAX
(
max_backoff
, 1000)

223 : 
RECONNECT_DEFAULT_MAX_BACKOFF
);

224 i‡(
fsm
->
mö_backoff
 > fsm->
max_backoff
) {

225 
fsm
->
max_backoff
 = fsm->
mö_backoff
;

228 i‡(
fsm
->
°©e
 =
S_BACKOFF
 && fsm->
backoff
 > 
max_backoff
) {

229 
fsm
->
backoff
 = 
max_backoff
;

231 
	}
}

243 
	$ªc⁄√˘_£t_¥obe_öãrvÆ
(
ªc⁄√˘
 *
fsm
, 
¥obe_öãrvÆ
)

245 
fsm
->
¥obe_öãrvÆ
 =Örobe_öãrvÆ ? 
	`MAX
(1000,Örobe_interval) : 0;

246 
	}
}

250 
boﬁ


251 
	$ªc⁄√˘_is_∑ssive
(c⁄° 
ªc⁄√˘
 *
fsm
)

253  
fsm
->
∑ssive
;

254 
	}
}

260 
	$ªc⁄√˘_£t_∑ssive
(
ªc⁄√˘
 *
fsm
, 
boﬁ
 
∑ssive
, 
now
)

262 i‡(
fsm
->
∑ssive
 !=Öassive) {

263 
fsm
->
∑ssive
 =Öassive;

265 i‡(
∑ssive


266 ? 
fsm
->
°©e
 & (
S_CONNECTING
 | 
S_RECONNECT
)

267 : 
fsm
->
°©e
 =
S_LISTENING
 && 
	`ªc⁄√˘_may_ªåy
(fsm)) {

268 
	`ªc⁄√˘_å™sôi⁄__
(
fsm
, 
now
, 
S_BACKOFF
);

269 
fsm
->
backoff
 = 0;

272 
	}
}

278 
boﬁ


279 
	$ªc⁄√˘_is_íabÀd
(c⁄° 
ªc⁄√˘
 *
fsm
)

281  
fsm
->
°©e
 !
S_VOID
;

282 
	}
}

290 
	$ªc⁄√˘_íabÀ
(
ªc⁄√˘
 *
fsm
, 
now
)

292 i‡(
fsm
->
°©e
 =
S_VOID
 && 
	`ªc⁄√˘_may_ªåy
(fsm)) {

293 
	`ªc⁄√˘_å™sôi⁄__
(
fsm
, 
now
, 
S_BACKOFF
);

294 
fsm
->
backoff
 = 0;

296 
	}
}

301 
	$ªc⁄√˘_dißbÀ
(
ªc⁄√˘
 *
fsm
, 
now
)

303 i‡(
fsm
->
°©e
 !
S_VOID
) {

304 
	`ªc⁄√˘_å™sôi⁄__
(
fsm
, 
now
, 
S_VOID
);

306 
	}
}

313 
	$ªc⁄√˘_f‹˚_ªc⁄√˘
(
ªc⁄√˘
 *
fsm
, 
now
)

315 i‡(
fsm
->
°©e
 & (
S_CONNECTING
 | 
S_ACTIVE
 | 
S_IDLE
)) {

316 
	`ªc⁄√˘_å™sôi⁄__
(
fsm
, 
now
, 
S_RECONNECT
);

318 
	}
}

327 
	$ªc⁄√˘_disc⁄√˘ed
(
ªc⁄√˘
 *
fsm
, 
now
, 
îr‹
)

329 i‡(!(
fsm
->
°©e
 & (
S_BACKOFF
 | 
S_VOID
))) {

331 i‡(
fsm
->
°©e
 & (
S_ACTIVE
 | 
S_IDLE
)) {

332 i‡(
îr‹
 > 0) {

333 
	`VLOG_WARN
("%s: connection dropped (%s)",

334 
fsm
->
«me
, 
	`°ªº‹
(
îr‹
));

335 } i‡(
îr‹
 =
EOF
) {

336 
	`VLOG
(
fsm
->
öfo
, "%s: c⁄√˘i⁄ clo£d byÖìr", fsm->
«me
);

338 
	`VLOG
(
fsm
->
öfo
, "%s: c⁄√˘i⁄ dr›≥d", fsm->
«me
);

340 } i‡(
fsm
->
°©e
 =
S_LISTENING
) {

341 i‡(
îr‹
 > 0) {

342 
	`VLOG_WARN
("%s:ÉrrorÜistening for connections (%s)",

343 
fsm
->
«me
, 
	`°ªº‹
(
îr‹
));

345 
	`VLOG
(
fsm
->
öfo
, "%s:ÉrrorÜistening for connections",

346 
fsm
->
«me
);

349 c⁄° *
ty≥
 = 
fsm
->
∑ssive
 ? "listen" : "connection";

350 i‡(
îr‹
 > 0) {

351 
	`VLOG_WARN
("%s: %sáttempt failed (%s)",

352 
fsm
->
«me
, 
ty≥
, 
	`°ªº‹
(
îr‹
));

354 
	`VLOG
(
fsm
->
öfo
, "%s: %†©ãm±Åimed out", fsm->
«me
, 
ty≥
);

358 i‡(
fsm
->
°©e
 & (
S_ACTIVE
 | 
S_IDLE
)) {

359 
fsm
->
œ°_disc⁄√˘ed
 = 
now
;

362 i‡(
fsm
->
°©e
 & (
S_ACTIVE
 | 
S_IDLE
)

363 && (
fsm
->
œ°_a˘ivôy
 - fsm->
œ°_c⁄√˘ed
 >fsm->
backoff


364 || 
fsm
->
∑ssive
)) {

365 
fsm
->
backoff
 = fsm->
∑ssive
 ? 0 : fsm->
mö_backoff
;

367 i‡(
fsm
->
backoff
 < fsm->
mö_backoff
) {

368 
fsm
->
backoff
 = fsm->
mö_backoff
;

369 } i‡(
fsm
->
backoff
 >fsm->
max_backoff
 / 2) {

370 
fsm
->
backoff
 = fsm->
max_backoff
;

372 
fsm
->
backoff
 *= 2;

374 i‡(
fsm
->
∑ssive
) {

375 
	`VLOG
(
fsm
->
öfo
, "%s: waiting %.3g seconds beforeÅryingÅo "

376 "li°íágaö", 
fsm
->
«me
, fsm->
backoff
 / 1000.0);

378 
	`VLOG
(
fsm
->
öfo
, "%s: waiting %.3g seconds beforeÑeconnect",

379 
fsm
->
«me
, fsm->
backoff
 / 1000.0);

383 
	`ªc⁄√˘_å™sôi⁄__
(
fsm
, 
now
,

384 
	`ªc⁄√˘_may_ªåy
(
fsm
Ë? 
S_BACKOFF
 : 
S_VOID
);

386 
	}
}

394 
	$ªc⁄√˘_c⁄√˘ög
(
ªc⁄√˘
 *
fsm
, 
now
)

396 i‡(
fsm
->
°©e
 !
S_CONNECTING
) {

397 i‡(
fsm
->
∑ssive
) {

398 
	`VLOG
(
fsm
->
öfo
, "%s:Üi°íög...", fsm->
«me
);

400 
	`VLOG
(
fsm
->
öfo
, "%s: c⁄√˘ög...", fsm->
«me
);

402 
	`ªc⁄√˘_å™sôi⁄__
(
fsm
, 
now
, 
S_CONNECTING
);

404 
	}
}

418 
	$ªc⁄√˘_li°íög
(
ªc⁄√˘
 *
fsm
, 
now
)

420 i‡(
fsm
->
°©e
 !
S_LISTENING
) {

421 
	`VLOG
(
fsm
->
öfo
, "%s:Üi°íög...", fsm->
«me
);

422 
	`ªc⁄√˘_å™sôi⁄__
(
fsm
, 
now
, 
S_LISTENING
);

424 
	}
}

434 
	$ªc⁄√˘_li°í_îr‹
(
ªc⁄√˘
 *
fsm
, 
now
, 
îr‹
)

436 i‡(
fsm
->
°©e
 =
S_LISTENING
) {

437 
	`ªc⁄√˘_disc⁄√˘ed
(
fsm
, 
now
, 
îr‹
);

439 
	}
}

449 
	$ªc⁄√˘_c⁄√˘ed
(
ªc⁄√˘
 *
fsm
, 
now
)

451 i‡(!
	`is_c⁄√˘ed_°©e
(
fsm
->
°©e
)) {

452 
	`ªc⁄√˘_c⁄√˘ög
(
fsm
, 
now
);

454 
	`VLOG
(
fsm
->
öfo
, "%s: c⁄√˘ed", fsm->
«me
);

455 
	`ªc⁄√˘_å™sôi⁄__
(
fsm
, 
now
, 
S_ACTIVE
);

456 
fsm
->
œ°_c⁄√˘ed
 = 
now
;

458 
	}
}

464 
	$ªc⁄√˘_c⁄√˘_Áûed
(
ªc⁄√˘
 *
fsm
, 
now
, 
îr‹
)

466 
	`ªc⁄√˘_c⁄√˘ög
(
fsm
, 
now
);

467 
	`ªc⁄√˘_disc⁄√˘ed
(
fsm
, 
now
, 
îr‹
);

468 
	}
}

473 
	$ªc⁄√˘_a˘ivôy
(
ªc⁄√˘
 *
fsm
, 
now
)

475 i‡(
fsm
->
°©e
 !
S_ACTIVE
) {

476 
	`ªc⁄√˘_å™sôi⁄__
(
fsm
, 
now
, 
S_ACTIVE
);

478 
fsm
->
œ°_a˘ivôy
 = 
now
;

479 
	}
}

482 
	$ªc⁄√˘_å™sôi⁄__
(
ªc⁄√˘
 *
fsm
, 
now
,

483 
°©e
 state)

485 i‡(
fsm
->
°©e
 =
S_CONNECTING
) {

486 
fsm
->
n_©ãm±ed_c⁄√˘i⁄s
++;

487 i‡(
°©e
 =
S_ACTIVE
) {

488 
fsm
->
n_suc˚ssful_c⁄√˘i⁄s
++;

491 i‡(
	`is_c⁄√˘ed_°©e
(
fsm
->
°©e
) != is_connected_state(state)) {

492 i‡(
	`is_c⁄√˘ed_°©e
(
fsm
->
°©e
)) {

493 
fsm
->
tŸÆ_c⁄√˘ed_duøti⁄
 +
now
 - fsm->
œ°_c⁄√˘ed
;

495 
fsm
->
£qno
++;

498 
	`VLOG_DBG
("%s:É¡îög %s", 
fsm
->
«me
, 
	`ªc⁄√˘_°©e_«me__
(
°©e
));

499 
fsm
->
°©e
 = state;

500 
fsm
->
°©e_íãªd
 = 
now
;

501 
	}
}

504 
	$ªc⁄√˘_dódlöe__
(c⁄° 
ªc⁄√˘
 *
fsm
)

506 
	`as£π
(
fsm
->
°©e_íãªd
 !
LLONG_MIN
);

507 
fsm
->
°©e
) {

508 
S_VOID
:

509 
S_LISTENING
:

510  
LLONG_MAX
;

512 
S_BACKOFF
:

513  
fsm
->
°©e_íãªd
 + fsm->
backoff
;

515 
S_CONNECTING
:

516  
fsm
->
°©e_íãªd
 + 
	`MAX
(1000, fsm->
backoff
);

518 
S_ACTIVE
:

519 i‡(
fsm
->
¥obe_öãrvÆ
) {

520 
ba£
 = 
	`MAX
(
fsm
->
œ°_a˘ivôy
, fsm->
°©e_íãªd
);

521  
ba£
 + 
fsm
->
¥obe_öãrvÆ
;

523  
LLONG_MAX
;

525 
S_IDLE
:

526 i‡(
fsm
->
¥obe_öãrvÆ
) {

527  
fsm
->
°©e_íãªd
 + fsm->
¥obe_öãrvÆ
;

529  
LLONG_MAX
;

531 
S_RECONNECT
:

532  
fsm
->
°©e_íãªd
;

535 
	`NOT_REACHED
();

536 
	}
}

574 
ªc⁄√˘_a˘i⁄


575 
	$ªc⁄√˘_run
(
ªc⁄√˘
 *
fsm
, 
now
)

577 i‡(
now
 >
	`ªc⁄√˘_dódlöe__
(
fsm
)) {

578 
fsm
->
°©e
) {

579 
S_VOID
:

582 
S_BACKOFF
:

583  
RECONNECT_CONNECT
;

585 
S_CONNECTING
:

586  
RECONNECT_DISCONNECT
;

588 
S_ACTIVE
:

589 
	`VLOG_DBG
("%s: idÀ %Œd ms, sídög i«˘ivôyÖrobe", 
fsm
->
«me
,

590 
now
 - 
	`MAX
(
fsm
->
œ°_a˘ivôy
, fsm->
°©e_íãªd
));

591 
	`ªc⁄√˘_å™sôi⁄__
(
fsm
, 
now
, 
S_IDLE
);

592  
RECONNECT_PROBE
;

594 
S_IDLE
:

595 
	`VLOG_ERR
("%s:ÇoÑesponseÅo inactivityÖrobeáfter %.3g "

597 
fsm
->
«me
, (
now
 - fsm->
°©e_íãªd
) / 1000.0);

598  
RECONNECT_DISCONNECT
;

600 
S_RECONNECT
:

601  
RECONNECT_DISCONNECT
;

603 
S_LISTENING
:

607 
	`NOT_REACHED
();

611 
	}
}

616 
	$ªc⁄√˘_waô
(
ªc⁄√˘
 *
fsm
, 
now
)

618 
timeout
 = 
	`ªc⁄√˘_timeout
(
fsm
, 
now
);

619 i‡(
timeout
 >= 0) {

620 
	`pﬁl_timî_waô
(
timeout
);

622 
	}
}

628 
	$ªc⁄√˘_timeout
(
ªc⁄√˘
 *
fsm
, 
now
)

630 
dódlöe
 = 
	`ªc⁄√˘_dódlöe__
(
fsm
);

631 i‡(
dódlöe
 !
LLONG_MAX
) {

632 
ªmaöög
 = 
dódlöe
 - 
now
;

633  
	`MAX
(0, 
	`MIN
(
INT_MAX
, 
ªmaöög
));

636 
	}
}

642 
boﬁ


643 
	$ªc⁄√˘_is_c⁄√˘ed
(c⁄° 
ªc⁄√˘
 *
fsm
)

645  
	`is_c⁄√˘ed_°©e
(
fsm
->
°©e
);

646 
	}
}

652 
	$ªc⁄√˘_gë_œ°_c⁄√˘_ñ≠£d
(c⁄° 
ªc⁄√˘
 *
fsm
,

653 
now
)

655  
fsm
->
œ°_c⁄√˘ed
 =
LLONG_MAX
 ? 
UINT_MAX


656 : 
now
 - 
fsm
->
œ°_c⁄√˘ed
;

657 
	}
}

663 
	$ªc⁄√˘_gë_œ°_disc⁄√˘_ñ≠£d
(c⁄° 
ªc⁄√˘
 *
fsm
,

664 
now
)

666  
fsm
->
œ°_disc⁄√˘ed
 =
LLONG_MAX
 ? 
UINT_MAX


667 : 
now
 - 
fsm
->
œ°_disc⁄√˘ed
;

668 
	}
}

672 
	$ªc⁄√˘_gë_°©s
(c⁄° 
ªc⁄√˘
 *
fsm
, 
now
,

673 
ªc⁄√˘_°©s
 *
°©s
)

675 
°©s
->
¸óti⁄_time
 = 
fsm
->creation_time;

676 
°©s
->
œ°_a˘ivôy
 = 
fsm
->last_activity;

677 
°©s
->
œ°_c⁄√˘ed
 = 
fsm
->last_connected;

678 
°©s
->
œ°_disc⁄√˘ed
 = 
fsm
->last_disconnected;

679 
°©s
->
backoff
 = 
fsm
->backoff;

680 
°©s
->
£qno
 = 
fsm
->seqno;

681 
°©s
->
is_c⁄√˘ed
 = 
	`ªc⁄√˘_is_c⁄√˘ed
(
fsm
);

682 
°©s
->
m£c_sö˚_c⁄√˘


683 
	`ªc⁄√˘_gë_œ°_c⁄√˘_ñ≠£d
(
fsm
, 
now
);

684 
°©s
->
m£c_sö˚_disc⁄√˘


685 
	`ªc⁄√˘_gë_œ°_disc⁄√˘_ñ≠£d
(
fsm
, 
now
);

686 
°©s
->
tŸÆ_c⁄√˘ed_duøti⁄
 = 
fsm
->total_connected_duration

687 + (
	`is_c⁄√˘ed_°©e
(
fsm
->
°©e
)

688 ? 
	`ªc⁄√˘_gë_œ°_c⁄√˘_ñ≠£d
(
fsm
, 
now
) : 0);

689 
°©s
->
n_©ãm±ed_c⁄√˘i⁄s
 = 
fsm
->n_attempted_connections;

690 
°©s
->
n_suc˚ssful_c⁄√˘i⁄s
 = 
fsm
->n_successful_connections;

691 
°©s
->
°©e
 = 
	`ªc⁄√˘_°©e_«me__
(
fsm
->state);

692 
°©s
->
°©e_ñ≠£d
 = 
now
 - 
fsm
->
°©e_íãªd
;

693 
	}
}

695 
boﬁ


696 
	$ªc⁄√˘_may_ªåy
(
ªc⁄√˘
 *
fsm
)

698 
boﬁ
 
may_ªåy
 = 
fsm
->
max_åõs
 > 0;

699 i‡(
may_ªåy
 && 
fsm
->
max_åõs
 !
UINT_MAX
) {

700 
fsm
->
max_åõs
--;

702  
may_ªåy
;

703 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/reconnect.h

17 #i‚de‡
RECONNECT_H


18 
	#RECONNECT_H
 1

	)

33 
	~<°dboﬁ.h
>

35 
ªc⁄√˘
 *
ªc⁄√˘_¸óã
(
now
);

36 
ªc⁄√˘_de°roy
(
ªc⁄√˘
 *);

38 
ªc⁄√˘_£t_quõt
(
ªc⁄√˘
 *, 
boﬁ
 
quõt
);

40 c⁄° *
ªc⁄√˘_gë_«me
(c⁄° 
ªc⁄√˘
 *);

41 
ªc⁄√˘_£t_«me
(
ªc⁄√˘
 *, c⁄° *
«me
);

44 
	#RECONNECT_DEFAULT_MIN_BACKOFF
 1000

	)

45 
	#RECONNECT_DEFAULT_MAX_BACKOFF
 8000

	)

46 
	#RECONNECT_DEFAULT_PROBE_INTERVAL
 5000

	)

48 
ªc⁄√˘_gë_mö_backoff
(c⁄° 
ªc⁄√˘
 *);

49 
ªc⁄√˘_gë_max_backoff
(c⁄° 
ªc⁄√˘
 *);

50 
ªc⁄√˘_gë_¥obe_öãrvÆ
(c⁄° 
ªc⁄√˘
 *);

52 
ªc⁄√˘_£t_max_åõs
(
ªc⁄√˘
 *, 
max_åõs
);

53 
ªc⁄√˘_gë_max_åõs
(
ªc⁄√˘
 *);

55 
ªc⁄√˘_£t_backoff
(
ªc⁄√˘
 *,

56 
mö_backoff
, 
max_backoff
);

57 
ªc⁄√˘_£t_¥obe_öãrvÆ
(
ªc⁄√˘
 *, 
¥obe_öãrvÆ
);

59 
boﬁ
 
ªc⁄√˘_is_∑ssive
(c⁄° 
ªc⁄√˘
 *);

60 
ªc⁄√˘_£t_∑ssive
(
ªc⁄√˘
 *, 
boﬁ
 
∑ssive
,

61 
now
);

63 
boﬁ
 
ªc⁄√˘_is_íabÀd
(c⁄° 
ªc⁄√˘
 *);

64 
ªc⁄√˘_íabÀ
(
ªc⁄√˘
 *, 
now
);

65 
ªc⁄√˘_dißbÀ
(
ªc⁄√˘
 *, 
now
);

67 
ªc⁄√˘_f‹˚_ªc⁄√˘
(
ªc⁄√˘
 *, 
now
);

69 
boﬁ
 
ªc⁄√˘_is_c⁄√˘ed
(c⁄° 
ªc⁄√˘
 *);

70 
ªc⁄√˘_gë_œ°_c⁄√˘_ñ≠£d
(c⁄° 
ªc⁄√˘
 *,

71 
now
);

72 
ªc⁄√˘_gë_œ°_disc⁄√˘_ñ≠£d
(c⁄° 
ªc⁄√˘
 *,

73 
now
);

75 
ªc⁄√˘_disc⁄√˘ed
(
ªc⁄√˘
 *, 
now
, 
îr‹
);

76 
ªc⁄√˘_c⁄√˘ög
(
ªc⁄√˘
 *, 
now
);

77 
ªc⁄√˘_li°íög
(
ªc⁄√˘
 *, 
now
);

78 
ªc⁄√˘_li°í_îr‹
(
ªc⁄√˘
 *, 
now
, 
îr‹
);

79 
ªc⁄√˘_c⁄√˘ed
(
ªc⁄√˘
 *, 
now
);

80 
ªc⁄√˘_c⁄√˘_Áûed
(
ªc⁄√˘
 *, 
now
,

81 
îr‹
);

82 
ªc⁄√˘_a˘ivôy
(
ªc⁄√˘
 *, 
now
);

84 
	eªc⁄√˘_a˘i⁄
 {

85 
	mRECONNECT_CONNECT
 = 1,

86 
	mRECONNECT_DISCONNECT
,

87 
	mRECONNECT_PROBE
,

89 
ªc⁄√˘_a˘i⁄
 
ªc⁄√˘_run
(
ªc⁄√˘
 *, 
now
);

90 
ªc⁄√˘_waô
(
ªc⁄√˘
 *, 
now
);

91 
ªc⁄√˘_timeout
(
ªc⁄√˘
 *, 
now
);

93 
	sªc⁄√˘_°©s
 {

95 
	m¸óti⁄_time
;

96 
	mœ°_a˘ivôy
;

97 
	mœ°_c⁄√˘ed
;

98 
	mœ°_disc⁄√˘ed
;

99 
	mbackoff
;

101 
	m£qno
;

103 
boﬁ
 
	mis_c⁄√˘ed
;

104 
	mm£c_sö˚_c⁄√˘
;

105 
	mm£c_sö˚_disc⁄√˘
;

106 
	mtŸÆ_c⁄√˘ed_duøti⁄
;

107 
	mn_©ãm±ed_c⁄√˘i⁄s
;

108 
	mn_suc˚ssful_c⁄√˘i⁄s
;

112 c⁄° *
	m°©e
;

113 
	m°©e_ñ≠£d
;

116 
ªc⁄√˘_gë_°©s
(c⁄° 
ªc⁄√˘
 *, 
now
,

117 
ªc⁄√˘_°©s
 *);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/route-table-bsd.c

17 
	~<c⁄fig.h
>

19 
	~"rouã-èbÀ.h
"

21 
	~<sys/sockë.h
>

22 
	~<sys/ty≥s.h
>

24 
	~<√t/if.h
>

25 
	~<√t/rouã.h
>

26 
	~<√t/if_dl.h
>

27 
	~<√töë/ö.h
>

29 
	~<°rög.h
>

30 
	~<uni°d.h
>

32 
	~"vlog.h
"

34 
VLOG_DEFINE_THIS_MODULE
(
rouã_èbÀ
);

36 
	gpid
;

37 
	gªgi°î_cou¡
 = 0;

39 
boﬁ


40 
	$rouã_èbÀ_gë_«me
(
ovs_be32
 
ù
, 
«me
[
IFNAMSIZ
])

43 
π_msghdr
 
πm
;

44 
•a˚
[512];

45 } 
πmsg
;

47 
π_msghdr
 *
πm
 = &
πmsg
.rtm;

48 
sockaddr_dl
 *
iÂ
 = 
NULL
;

49 
sockaddr_ö
 *
sö
;

50 
sockaddr
 *
ß
;

51 
£q
;

52 
i
, 
Àn
, 
«mñí
, 
πsock
;

54 
πsock
 = 
	`sockë
(
PF_ROUTE
, 
SOCK_RAW
, 0);

55 i‡(
πsock
 < 0)

56  
Ál£
;

58 
	`mem£t
(&
πmsg
, 0, (rtmsg));

60 
πm
->
πm_msgÀn
 = (
π_msghdr
Ë+ (
sockaddr_ö
);

61 
πm
->
πm_vîsi⁄
 = 
RTM_VERSION
;

62 
πm
->
πm_ty≥
 = 
RTM_GET
;

63 
πm
->
πm_addrs
 = 
RTA_DST
 | 
RTA_IFP
;

64 
πm
->
πm_£q
 = ++
£q
;

66 
sö
 = (
sockaddr_ö
 *)(
πm
 + 1);

67 
sö
->
sö_Àn
 = 
Àn
 = (
sockaddr_ö
);

68 
sö
->
sö_Ámûy
 = 
AF_INET
;

69 
sö
->
sö_addr
.
s_addr
 = 
ù
;

71 i‡((
	`wrôe
(
πsock
, (*)&
πmsg
, 
πm
->
πm_msgÀn
)) < 0) {

72 
	`˛o£
(
πsock
);

73  
Ál£
;

77 
Àn
 = 
	`ªad
(
πsock
, (*)&
πmsg
, (rtmsg));

78 } 
Àn
 > 0 && (
πmsg
.
πm
.
πm_£q
 !
£q
 ||

79 
πmsg
.
πm
.
πm_pid
 !
pid
));

81 
	`˛o£
(
πsock
);

83 i‡(
Àn
 < 0) {

84  
Ál£
;

87 
ß
 = (
sockaddr
 *)(
πm
 + 1);

88 
i
 = 1; i; i <<= 1) {

89 i‡(
πm
->
πm_addrs
 & 
i
) {

90 i‡(
i
 =
RTA_IFP
 && 
ß
->
ß_Ámûy
 =
AF_LINK
 &&

91 ((
sockaddr_dl
 *)
ß
)->
sdl_∆í
) {

92 
iÂ
 = (
sockaddr_dl
 *)
ß
;

93 
«mñí
 = 
iÂ
->
sdl_∆í
;

94 i‡(
«mñí
 > 
IFNAMSIZ
 - 1)

95 
«mñí
 = 
IFNAMSIZ
 - 1;

96 
	`mem˝y
(
«me
, 
iÂ
->
sdl_d©a
, 
«mñí
);

97 
«me
[
«mñí
] = '\0';

98  
åue
;

100 
ß
 = (
sockaddr
 *)((*)ß + 
	`SA_SIZE
(sa));

103  
Ál£
;

104 
	}
}

107 
	$rouã_èbÀ_ªgi°î
()

109 i‡(!
ªgi°î_cou¡
)

111 
pid
 = 
	`gëpid
();

114 
ªgi°î_cou¡
++;

115 
	}
}

118 
	$rouã_èbÀ_uƒegi°î
()

120 
ªgi°î_cou¡
--;

121 
	}
}

124 
	$rouã_èbÀ_run
()

126 
	}
}

129 
	$rouã_èbÀ_waô
()

131 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/route-table-stub.c

15 
	~<c⁄fig.h
>

16 
	~"rouã-èbÀ.h
"

18 
	~"compûî.h
"

20 
boﬁ


21 
	$rouã_èbÀ_gë_«me
(
ovs_be32
 
ù
 
OVS_UNUSED
, 
«me
[
IFNAMSIZ
] OVS_UNUSED)

23 
«me
[0] = '\0';

24  
Ál£
;

25 
	}
}

27 
boﬁ


28 
	$rouã_èbÀ_gë_ifödex
(
ovs_be32
 
ù
 
OVS_UNUSED
, *
ifödex
)

30 *
ifödex
 = 0;

31  
Ál£
;

32 
	}
}

35 
	$rouã_èbÀ_ªgi°î
()

37 
	}
}

40 
	$rouã_èbÀ_uƒegi°î
()

42 
	}
}

45 
	$rouã_èbÀ_run
()

47 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/route-table.c

17 
	~<c⁄fig.h
>

19 
	~"rouã-èbÀ.h
"

21 
	~<as£π.h
>

22 
	~<¨∑/öë.h
>

23 
	~<sys/sockë.h
>

24 
	~<löux/π√éök.h
>

25 
	~<√t/if.h
>

27 
	~"hash.h
"

28 
	~"hm≠.h
"

29 
	~"√éök.h
"

30 
	~"√éök-nŸifõr.h
"

31 
	~"√éök-sockë.h
"

32 
	~"oÂbuf.h
"

33 
	~"π√éök-lök.h
"

34 
	~"vlog.h
"

36 
VLOG_DEFINE_THIS_MODULE
(
rouã_èbÀ
);

38 
	srouã_d©a
 {

40 
	mπm_d°_Àn
;

43 
uöt32_t
 
	mπa_d°
;

44 
	mπa_oif
;

49 
	srouã_èbÀ_msg
 {

50 
boﬁ
 
	mªÀv™t
;

51 
	m∆msg_ty≥
;

52 
rouã_d©a
 
	mrd
;

55 
	srouã_node
 {

56 
hm≠_node
 
	mnode
;

57 
rouã_d©a
 
	mrd
;

60 
	s«me_node
 {

61 
hm≠_node
 
	mnode
;

62 
uöt32_t
 
	mifi_ödex
;

64 
	mi‚ame
[
IFNAMSIZ
];

67 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(5, 20);

69 
	gªgi°î_cou¡
 = 0;

70 
∆n
 *
	g∆n
 = 
NULL
;

71 
rouã_èbÀ_msg
 
	gπmsg
;

72 
∆n_nŸifõr
 *
	grouã_nŸifõr
 = 
NULL
;

73 
∆n_nŸifõr
 *
	g«me_nŸifõr
 = 
NULL
;

75 
boﬁ
 
	grouã_èbÀ_vÆid
 = 
Ál£
;

76 
boﬁ
 
	g«me_èbÀ_vÆid
 = 
Ál£
;

77 
hm≠
 
	grouã_m≠
;

78 
hm≠
 
	g«me_m≠
;

80 
rouã_èbÀ_ª£t
();

81 
rouã_èbÀ_h™dÀ_msg
(c⁄° 
rouã_èbÀ_msg
 *);

82 
boﬁ
 
rouã_èbÀ_∑r£
(
oÂbuf
 *, 
rouã_èbÀ_msg
 *);

83 
rouã_èbÀ_ch™ge
(c⁄° 
rouã_èbÀ_msg
 *, *);

84 
rouã_node
 *
rouã_node_lookup
(c⁄° 
rouã_d©a
 *);

85 
rouã_node
 *
rouã_node_lookup_by_ù
(
uöt32_t
 
ù
);

86 
rouã_m≠_˛ór
();

87 
uöt32_t
 
hash_rouã_d©a
(c⁄° 
rouã_d©a
 *);

89 
«me_èbÀ_öô
();

90 
«me_èbÀ_unöô
();

91 
«me_èbÀ_ª£t
();

92 
«me_èbÀ_ch™ge
(c⁄° 
π√éök_lök_ch™ge
 *, *);

93 
«me_m≠_˛ór
();

94 
«me_node
 *
«me_node_lookup
(
ifi_ödex
);

100 
boﬁ


101 
	$rouã_èbÀ_gë_«me
(
ovs_be32
 
ù
, 
«me
[
IFNAMSIZ
])

103 
ifödex
;

105 i‡(!
«me_èbÀ_vÆid
) {

106 
	`«me_èbÀ_ª£t
();

109 i‡(
	`rouã_èbÀ_gë_ifödex
(
ù
, &
ifödex
)) {

110 
«me_node
 *
¬
;

112 
¬
 = 
	`«me_node_lookup
(
ifödex
);

113 i‡(
¬
) {

114 
	`ovs_°æ˝y
(
«me
, 
¬
->
i‚ame
, 
IFNAMSIZ
);

115  
åue
;

119  
Ál£
;

120 
	}
}

128 
boﬁ


129 
	$rouã_èbÀ_gë_ifödex
(
ovs_be32
 
ù_
, *
ifödex
)

131 
rouã_node
 *
∫
;

132 
uöt32_t
 
ù
 = 
	`¡ohl
(
ù_
);

134 *
ifödex
 = 0;

136 i‡(!
rouã_èbÀ_vÆid
) {

137 
	`rouã_èbÀ_ª£t
();

140 
∫
 = 
	`rouã_node_lookup_by_ù
(
ù
);

142 i‡(
∫
) {

143 *
ifödex
 = 
∫
->
rd
.
πa_oif
;

144  
åue
;

148 
	`HMAP_FOR_EACH
(
∫
, 
node
, &
rouã_m≠
) {

149 i‡(
∫
->
rd
.
πa_d°
 =0 &&Ñn->rd.
πm_d°_Àn
 == 0) {

150 *
ifödex
 = 
∫
->
rd
.
πa_oif
;

151  
åue
;

155  
Ál£
;

156 
	}
}

161 
	$rouã_èbÀ_ªgi°î
()

163 i‡(!
ªgi°î_cou¡
) {

164 
	`as£π
(!
∆n
);

165 
	`as£π
(!
rouã_nŸifõr
);

167 
∆n
 = 
	`∆n_¸óã
(
NETLINK_ROUTE
, 
RTNLGRP_IPV4_ROUTE
,

168 (
∆n_∑r£_func
 *Ë
rouã_èbÀ_∑r£
, &
πmsg
);

170 
rouã_nŸifõr
 =

171 
	`∆n_nŸifõr_¸óã
(
∆n
, (
∆n_nŸify_func
 *Ë
rouã_èbÀ_ch™ge
,

172 
NULL
);

174 
	`hm≠_öô
(&
rouã_m≠
);

175 
	`rouã_èbÀ_ª£t
();

176 
	`«me_èbÀ_öô
();

179 
ªgi°î_cou¡
++;

180 
	}
}

186 
	$rouã_èbÀ_uƒegi°î
()

188 
ªgi°î_cou¡
--;

190 i‡(!
ªgi°î_cou¡
) {

191 
	`∆n_nŸifõr_de°roy
(
rouã_nŸifõr
);

192 
rouã_nŸifõr
 = 
NULL
;

193 
	`∆n_de°roy
(
∆n
);

194 
∆n
 = 
NULL
;

196 
	`rouã_m≠_˛ór
();

197 
	`hm≠_de°roy
(&
rouã_m≠
);

198 
	`«me_èbÀ_unöô
();

200 
	}
}

204 
	$rouã_èbÀ_run
()

206 i‡(
∆n
) {

207 
	`π√éök_lök_run
();

208 
	`∆n_run
(
∆n
);

210 
	}
}

214 
	$rouã_èbÀ_waô
()

216 i‡(
∆n
) {

217 
	`π√éök_lök_waô
();

218 
	`∆n_waô
(
∆n
);

220 
	}
}

223 
	$rouã_èbÀ_ª£t
()

225 
îr‹
;

226 
∆_dump
 
dump
;

227 
πgímsg
 *
πmsg
;

228 
oÂbuf
 
ªque°
, 
ª∂y
;

229 
∆_sock
 *
π∆_sock
;

231 
	`rouã_m≠_˛ór
();

232 
rouã_èbÀ_vÆid
 = 
åue
;

234 
îr‹
 = 
	`∆_sock_¸óã
(
NETLINK_ROUTE
, &
π∆_sock
);

235 i‡(
îr‹
) {

236 
	`VLOG_WARN_RL
(&
æ
, "failedÅoÑesetÑoutingÅable, "

238  
îr‹
;

241 
	`oÂbuf_öô
(&
ªque°
, 0);

243 
	`∆_msg_put_∆msghdr
(&
ªque°
,  *
πmsg
, 
RTM_GETROUTE
, 
NLM_F_REQUEST
);

245 
πmsg
 = 
	`oÂbuf_put_zîos
(&
ªque°
,  *rtmsg);

246 
πmsg
->
πgí_Ámûy
 = 
AF_INET
;

248 
	`∆_dump_°¨t
(&
dump
, 
π∆_sock
, &
ªque°
);

249 
	`oÂbuf_unöô
(&
ªque°
);

251 
	`∆_dump_√xt
(&
dump
, &
ª∂y
)) {

252 
rouã_èbÀ_msg
 
msg
;

254 i‡(
	`rouã_èbÀ_∑r£
(&
ª∂y
, &
msg
)) {

255 
	`rouã_èbÀ_h™dÀ_msg
(&
msg
);

259 
îr‹
 = 
	`∆_dump_d⁄e
(&
dump
);

260 
	`∆_sock_de°roy
(
π∆_sock
);

262  
îr‹
;

263 
	}
}

266 
boﬁ


267 
	$rouã_èbÀ_∑r£
(
oÂbuf
 *
buf
, 
rouã_èbÀ_msg
 *
ch™ge
)

269 
boﬁ
 
∑r£d
;

271 c⁄° 
∆_pﬁicy
 
pﬁicy
[] = {

272 [
RTA_DST
] = { .
ty≥
 = 
NL_A_U32
, .
›ti⁄Æ
 = 
åue
 },

273 [
RTA_OIF
] = { .
ty≥
 = 
NL_A_U32
, .
›ti⁄Æ
 = 
Ál£
 },

276 
∆©å
 *
©ås
[
	`ARRAY_SIZE
(
pﬁicy
)];

278 
∑r£d
 = 
	`∆_pﬁicy_∑r£
(
buf
, 
NLMSG_HDRLEN
 + (
πmsg
),

279 
pﬁicy
, 
©ås
, 
	`ARRAY_SIZE
(policy));

281 i‡(
∑r£d
) {

282 c⁄° 
πmsg
 *
πm
;

283 c⁄° 
∆msghdr
 *
∆msg
;

285 
∆msg
 = 
buf
->
d©a
;

286 
πm
 = (c⁄° 
πmsg
 *Ë((c⁄° *Ë
buf
->
d©a
 + 
NLMSG_HDRLEN
);

288 i‡(
πm
->
πm_Ámûy
 !
AF_INET
) {

289 
	`VLOG_DBG_RL
(&
æ
, "receivedÇon AF_INETÑtnetlinkÑoute message");

290  
Ál£
;

293 
	`mem£t
(
ch™ge
, 0,  *change);

294 
ch™ge
->
ªÀv™t
 = 
åue
;

296 i‡(
πm
->
πm_sc›e
 =
RT_SCOPE_NOWHERE
) {

297 
ch™ge
->
ªÀv™t
 = 
Ál£
;

300 i‡(
πm
->
πm_ty≥
 !
RTN_UNICAST
 &&

301 
πm
->
πm_ty≥
 !
RTN_LOCAL
) {

302 
ch™ge
->
ªÀv™t
 = 
Ál£
;

305 
ch™ge
->
∆msg_ty≥
 = 
∆msg
->nlmsg_type;

306 
ch™ge
->
rd
.
πm_d°_Àn
 = 
πm
->rtm_dst_len;

307 
ch™ge
->
rd
.
πa_oif
 = 
	`∆_©å_gë_u32
(
©ås
[
RTA_OIF
]);

309 i‡(
©ås
[
RTA_DST
]) {

310 
ch™ge
->
rd
.
πa_d°
 = 
	`¡ohl
(
	`∆_©å_gë_be32
(
©ås
[
RTA_DST
]));

314 
	`VLOG_DBG_RL
(&
æ
, "received unparseableÑtnetlinkÑoute message");

317  
∑r£d
;

318 
	}
}

321 
	$rouã_èbÀ_ch™ge
(c⁄° 
rouã_èbÀ_msg
 *
ch™ge
 
OVS_UNUSED
,

322 *
aux
 
OVS_UNUSED
)

324 
rouã_èbÀ_vÆid
 = 
Ál£
;

325 
	}
}

328 
	$rouã_èbÀ_h™dÀ_msg
(c⁄° 
rouã_èbÀ_msg
 *
ch™ge
)

330 i‡(
ch™ge
->
ªÀv™t
 && ch™ge->
∆msg_ty≥
 =
RTM_NEWROUTE
 &&

331 !
	`rouã_node_lookup
(&
ch™ge
->
rd
)) {

332 
rouã_node
 *
∫
;

334 
∫
 = 
	`xzÆloc
( *rn);

335 
	`mem˝y
(&
∫
->
rd
, &
ch™ge
->rd,  change->rd);

337 
	`hm≠_ö£π
(&
rouã_m≠
, &
∫
->
node
, 
	`hash_rouã_d©a
(&∫->
rd
));

339 
	}
}

341 
rouã_node
 *

342 
	$rouã_node_lookup
(c⁄° 
rouã_d©a
 *
rd
)

344 
rouã_node
 *
∫
;

346 
	`HMAP_FOR_EACH_WITH_HASH
(
∫
, 
node
, 
	`hash_rouã_d©a
(
rd
), &
rouã_m≠
) {

347 i‡(!
	`memcmp
(&
∫
->
rd
,Ñd,  *rd)) {

348  
∫
;

352  
NULL
;

353 
	}
}

355 
rouã_node
 *

356 
	$rouã_node_lookup_by_ù
(
uöt32_t
 
ù
)

358 
d°_Àn
;

359 
rouã_node
 *
∫
, *
∫_ªt
;

361 
d°_Àn
 = -1;

362 
∫_ªt
 = 
NULL
;

364 
	`HMAP_FOR_EACH
(
∫
, 
node
, &
rouã_m≠
) {

365 
uöt32_t
 
mask
 = 0xfffffff‡<< (32 - 
∫
->
rd
.
πm_d°_Àn
);

367 i‡(
∫
->
rd
.
πa_d°
 =0 &&Ñn->rd.
πm_d°_Àn
 == 0) {

372 i‡(
∫
->
rd
.
πm_d°_Àn
 > 
d°_Àn
 &&

373 (
ù
 & 
mask
Ë=(
∫
->
rd
.
πa_d°
 & mask)) {

374 
∫_ªt
 = 
∫
;

375 
d°_Àn
 = 
∫
->
rd
.
πm_d°_Àn
;

379  
∫_ªt
;

380 
	}
}

383 
	$rouã_m≠_˛ór
()

385 
rouã_node
 *
∫
, *
∫_√xt
;

387 
	`HMAP_FOR_EACH_SAFE
(
∫
, 
∫_√xt
, 
node
, &
rouã_m≠
) {

388 
	`hm≠_ªmove
(&
rouã_m≠
, &
∫
->
node
);

389 
	`‰ì
(
∫
);

391 
	}
}

393 
uöt32_t


394 
	$hash_rouã_d©a
(c⁄° 
rouã_d©a
 *
rd
)

396  
	`hash_byãs
(
rd
,  *rd, 0);

397 
	}
}

402 
	$«me_èbÀ_öô
()

404 
	`hm≠_öô
(&
«me_m≠
);

405 
«me_nŸifõr
 = 
	`π√éök_lök_nŸifõr_¸óã
(
«me_èbÀ_ch™ge
, 
NULL
);

406 
«me_èbÀ_vÆid
 = 
Ál£
;

407 
	}
}

410 
	$«me_èbÀ_unöô
()

412 
	`π√éök_lök_nŸifõr_de°roy
(
«me_nŸifõr
);

413 
«me_nŸifõr
 = 
NULL
;

414 
	`«me_m≠_˛ór
();

415 
	`hm≠_de°roy
(&
«me_m≠
);

416 
	}
}

419 
	$«me_èbÀ_ª£t
()

421 
îr‹
;

422 
∆_dump
 
dump
;

423 
πgímsg
 *
πmsg
;

424 
oÂbuf
 
ªque°
, 
ª∂y
;

425 
∆_sock
 *
π∆_sock
;

427 
«me_èbÀ_vÆid
 = 
åue
;

428 
	`«me_m≠_˛ór
();

429 
îr‹
 = 
	`∆_sock_¸óã
(
NETLINK_ROUTE
, &
π∆_sock
);

430 i‡(
îr‹
) {

431 
	`VLOG_WARN_RL
(&
æ
, "failedÅo create NETLINK_ROUTE socket");

432  
îr‹
;

435 
	`oÂbuf_öô
(&
ªque°
, 0);

436 
	`∆_msg_put_∆msghdr
(&
ªque°
,  *
πmsg
, 
RTM_GETLINK
, 
NLM_F_REQUEST
);

437 
πmsg
 = 
	`oÂbuf_put_zîos
(&
ªque°
,  *rtmsg);

438 
πmsg
->
πgí_Ámûy
 = 
AF_INET
;

440 
	`∆_dump_°¨t
(&
dump
, 
π∆_sock
, &
ªque°
);

441 
	`oÂbuf_unöô
(&
ªque°
);

443 
	`∆_dump_√xt
(&
dump
, &
ª∂y
)) {

444 
π√éök_lök_ch™ge
 
ch™ge
;

446 i‡(
	`π√éök_lök_∑r£
(&
ª∂y
, &
ch™ge
)

447 && 
ch™ge
.
∆msg_ty≥
 =
RTM_NEWLINK


448 && !
	`«me_node_lookup
(
ch™ge
.
ifi_ödex
)) {

449 
«me_node
 *
¬
;

451 
¬
 = 
	`xzÆloc
( *nn);

452 
¬
->
ifi_ödex
 = 
ch™ge
.ifi_index;

453 
	`ovs_°æ˝y
(
¬
->
i‚ame
, 
ch™ge
.i‚ame, 
IFNAMSIZ
);

454 
	`hm≠_ö£π
(&
«me_m≠
, &
¬
->
node
, 
	`hash_öt
“n->
ifi_ödex
, 0));

457 
	`∆_sock_de°roy
(
π∆_sock
);

458  
	`∆_dump_d⁄e
(&
dump
);

459 
	}
}

462 
	$«me_èbÀ_ch™ge
(c⁄° 
π√éök_lök_ch™ge
 *
ch™ge
 
OVS_UNUSED
,

463 *
aux
 
OVS_UNUSED
)

467 
rouã_èbÀ_vÆid
 = 
Ál£
;

468 
«me_èbÀ_vÆid
 = 
Ál£
;

469 
	}
}

471 
«me_node
 *

472 
	$«me_node_lookup
(
ifi_ödex
)

474 
«me_node
 *
¬
;

476 
	`HMAP_FOR_EACH_WITH_HASH
(
¬
, 
node
, 
	`hash_öt
(
ifi_ödex
, 0), &
«me_m≠
) {

477 i‡(
¬
->
ifi_ödex
 == ifi_index) {

478  
¬
;

482  
NULL
;

483 
	}
}

486 
	$«me_m≠_˛ór
()

488 
«me_node
 *
¬
, *
¬_√xt
;

490 
	`HMAP_FOR_EACH_SAFE
(
¬
, 
¬_√xt
, 
node
, &
«me_m≠
) {

491 
	`hm≠_ªmove
(&
«me_m≠
, &
¬
->
node
);

492 
	`‰ì
(
¬
);

494 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/route-table.h

17 #i‚de‡
ROUTE_TABLE_H


18 
	#ROUTE_TABLE_H
 1

	)

20 
	~<sys/sockë.h
>

21 
	~<√t/if.h
>

22 
	~<°dboﬁ.h
>

23 
	~<°döt.h
>

25 
	~"›ívswôch/ty≥s.h
"

27 
boﬁ
 
rouã_èbÀ_gë_ifödex
(
ovs_be32
 
ù
, *
ifödex
);

28 
boﬁ
 
rouã_èbÀ_gë_«me
(
ovs_be32
 
ù
, 
«me
[
IFNAMSIZ
]);

29 
rouã_èbÀ_ªgi°î
();

30 
rouã_èbÀ_uƒegi°î
();

31 
rouã_èbÀ_run
();

32 
rouã_èbÀ_waô
();

	@/home/lsch/mytest/openvswitch-1.9.0/lib/rtbsd.c

17 
	~<c⁄fig.h
>

19 
	~<uni°d.h
>

20 
	~<î∫o.h
>

21 
	~<sys/sockë.h
>

22 
	~<√t/if.h
>

23 
	~<√t/rouã.h
>

24 
	~<pﬁl.h
>

26 
	~"covîage.h
"

27 
	~"sockë-utû.h
"

28 
	~"pﬁl-lo›.h
"

29 
	~"vlog.h
"

30 
	~"πbsd.h
"

32 
VLOG_DEFINE_THIS_MODULE
(
πbsd
);

33 
COVERAGE_DEFINE
(
πbsd_ch™ged
);

36 
	gnŸify_sock
 = -1;

39 
li°
 
	gÆl_nŸifõrs
 = 
LIST_INITIALIZER
(&
Æl_nŸifõrs
);

41 
πbsd_ªp‹t_ch™ge
(c⁄° 
if_msghdr
 *);

42 
πbsd_ªp‹t_nŸify_îr‹
();

50 
	$πbsd_nŸifõr_ªgi°î
(
πbsd_nŸifõr
 *
nŸifõr
,

51 
πbsd_nŸify_func
 *
cb
, *
aux
)

53 i‡(
nŸify_sock
 < 0) {

54 
îr‹
;

55 
nŸify_sock
 = 
	`sockë
(
PF_ROUTE
, 
SOCK_RAW
, 0);

56 i‡(
nŸify_sock
 < 0) {

57 
	`VLOG_WARN
("couldÇot create PF_ROUTE socket: %s",

58 
	`°ªº‹
(
î∫o
));

59  
î∫o
;

61 
îr‹
 = 
	`£t_n⁄blockög
(
nŸify_sock
);

62 i‡(
îr‹
) {

63 
	`VLOG_WARN
("error set_nonblocking PF_ROUTE socket: %s",

64 
	`°ªº‹
(
îr‹
));

65  
îr‹
;

70 
	`πbsd_nŸifõr_run
();

73 
	`li°_push_back
(&
Æl_nŸifõrs
, &
nŸifõr
->
node
);

74 
nŸifõr
->
cb
 = cb;

75 
nŸifõr
->
aux
 =áux;

77 
	}
}

82 
	$πbsd_nŸifõr_uƒegi°î
(
πbsd_nŸifõr
 *
nŸifõr
)

84 
	`li°_ªmove
(&
nŸifõr
->
node
);

85 i‡(
	`li°_is_em±y
(&
Æl_nŸifõrs
)) {

86 
	`˛o£
(
nŸify_sock
);

87 
nŸify_sock
 = -1;

89 
	}
}

94 
	$πbsd_nŸifõr_run
()

96 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 5);

97 
if_msghdr
 
msg
;

98 i‡(
nŸify_sock
 < 0) {

103 
ªtvÆ
;

105 
msg
.
ifm_ty≥
 = 
RTM_IFINFO
;

106 
msg
.
ifm_vîsi⁄
 = 
RTM_VERSION
;

109 
ªtvÆ
 = 
	`ªad
(
nŸify_sock
, (*)&
msg
, (msg));

110 i‡(
ªtvÆ
 >= 0) {

113 i‡(
msg
.
ifm_ty≥
 =
RTM_IFINFO
) {

114 
	`πbsd_ªp‹t_ch™ge
(&
msg
);

116 } i‡(
î∫o
 =
EAGAIN
) {

119 i‡(
î∫o
 =
ENOBUFS
) {

120 
	`VLOG_WARN_RL
(&
æ
, "PF_ROUTEÑeceive buffer overflowed");

122 
	`VLOG_WARN_RL
(&
æ
, "errorÑeading PF_ROUTE socket: %s",

123 
	`°ªº‹
(
î∫o
));

125 
	`πbsd_ªp‹t_nŸify_îr‹
();

128 
	}
}

133 
	$πbsd_nŸifõr_waô
()

135 i‡(
nŸify_sock
 >= 0) {

136 
	`pﬁl_fd_waô
(
nŸify_sock
, 
POLLIN
);

138 
	}
}

141 
	$πbsd_ªp‹t_ch™ge
(c⁄° 
if_msghdr
 *
msg
)

143 
πbsd_nŸifõr
 *
nŸifõr
;

144 
πbsd_ch™ge
 
ch™ge
;

146 
	`COVERAGE_INC
(
πbsd_ch™ged
);

148 
ch™ge
.
msg_ty≥
 = 
msg
->
ifm_ty≥
;

149 
ch™ge
.
if_ödex
 = 
msg
->
ifm_ödex
;

150 
	`if_ödext⁄ame
(
msg
->
ifm_ödex
, 
ch™ge
.
if_«me
);

151 
ch™ge
.
ma°î_ifödex
 = 0;

153 
	`LIST_FOR_EACH
 (
nŸifõr
, 
node
, &
Æl_nŸifõrs
) {

154 
nŸifõr
->
	`cb
(&
ch™ge
,ÇŸifõr->
aux
);

156 
	}
}

160 
	$πbsd_ªp‹t_nŸify_îr‹
()

162 
πbsd_nŸifõr
 *
nŸifõr
;

164 
	`LIST_FOR_EACH
 (
nŸifõr
, 
node
, &
Æl_nŸifõrs
) {

165 
nŸifõr
->
	`cb
(
NULL
,ÇŸifõr->
aux
);

167 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/rtbsd.h

17 #i‚de‡
RTBSD_H


18 
	#RTBSD_H
 1

	)

20 
	~"li°.h
"

26 
	sπbsd_ch™ge
 {

28 
	mmsg_ty≥
;

31 
	mif_ödex
;

33 
	mif_«me
[
IF_NAMESIZE
];

34 
	mma°î_ifödex
;

44 
	tπbsd_nŸify_func
(c⁄° 
	tπbsd_ch™ge
 *, *
	taux
);

46 
	sπbsd_nŸifõr
 {

47 
li°
 
	mnode
;

48 
πbsd_nŸify_func
 *
	mcb
;

49 *
	maux
;

52 
πbsd_nŸifõr_ªgi°î
(
πbsd_nŸifõr
 *,

53 
πbsd_nŸify_func
 *, *
aux
);

54 
πbsd_nŸifõr_uƒegi°î
(
πbsd_nŸifõr
 *);

55 
πbsd_nŸifõr_run
();

56 
πbsd_nŸifõr_waô
();

	@/home/lsch/mytest/openvswitch-1.9.0/lib/rtnetlink-link.c

17 
	~<c⁄fig.h
>

19 
	~"π√éök-lök.h
"

21 
	~<sys/sockë.h
>

22 
	~<löux/π√éök.h
>

23 
	~<√t/if.h
>

25 
	~"√éök.h
"

26 
	~"√éök-nŸifõr.h
"

27 
	~"oÂbuf.h
"

29 
∆n
 *
	g∆n
 = 
NULL
;

30 
π√éök_lök_ch™ge
 
	gπn_ch™ge
;

35 
boﬁ


36 
	$π√éök_lök_∑r£
(
oÂbuf
 *
buf
,

37 
π√éök_lök_ch™ge
 *
ch™ge
)

39 
boﬁ
 
∑r£d
;

45 c⁄° 
∆_pﬁicy
 
pﬁicy
[] = {

46 [
IFLA_IFNAME
] = { .
ty≥
 = 
NL_A_STRING
, .
›ti⁄Æ
 = 
Ál£
 },

47 [
IFLA_MASTER
] = { .
ty≥
 = 
NL_A_U32
, .
›ti⁄Æ
 = 
åue
 },

48 [
IFLA_MTU
] = { .
ty≥
 = 
NL_A_U32
, .
›ti⁄Æ
 = 
åue
 },

49 [
IFLA_ADDRESS
] = { .
ty≥
 = 
NL_A_UNSPEC
, .
›ti⁄Æ
 = 
åue
 },

52 
∆©å
 *
©ås
[
	`ARRAY_SIZE
(
pﬁicy
)];

54 
∑r£d
 = 
	`∆_pﬁicy_∑r£
(
buf
, 
NLMSG_HDRLEN
 + (
iföfomsg
),

55 
pﬁicy
, 
©ås
, 
	`ARRAY_SIZE
(policy));

57 i‡(
∑r£d
) {

58 c⁄° 
∆msghdr
 *
∆msg
;

59 c⁄° 
iföfomsg
 *
iföfo
;

61 
∆msg
 = 
buf
->
d©a
;

62 
iföfo
 = ((c⁄° 
iföfomsg
 *)

63 ((c⁄° *Ë
buf
->
d©a
 + 
NLMSG_HDRLEN
));

65 
ch™ge
->
∆msg_ty≥
 = 
∆msg
->nlmsg_type;

66 
ch™ge
->
ifi_ödex
 = 
iföfo
->ifi_index;

67 
ch™ge
->
i‚ame
 = 
	`∆_©å_gë_°rög
(
©ås
[
IFLA_IFNAME
]);

68 
ch™ge
->
ifi_Êags
 = 
iföfo
->ifi_flags;

69 
ch™ge
->
ma°î_ifödex
 = (
©ås
[
IFLA_MASTER
]

70 ? 
	`∆_©å_gë_u32
(
©ås
[
IFLA_MASTER
])

72 
ch™ge
->
mtu
 = (
©ås
[
IFLA_MTU
]

73 ? 
	`∆_©å_gë_u32
(
©ås
[
IFLA_MTU
])

76 i‡(
©ås
[
IFLA_ADDRESS
] &&

77 
	`∆_©å_gë_size
(
©ås
[
IFLA_ADDRESS
]Ë=
ETH_ALEN
) {

78 
	`mem˝y
(
ch™ge
->
addr
, 
	`∆_©å_gë
(
©ås
[
IFLA_ADDRESS
]), 
ETH_ALEN
);

80 
	`mem£t
(
ch™ge
->
addr
, 0, 
ETH_ALEN
);

84  
∑r£d
;

85 
	}
}

87 
boﬁ


88 
	$π√éök_lök_∑r£_cb
(
oÂbuf
 *
buf
, *
ch™ge
)

90  
	`π√éök_lök_∑r£
(
buf
, 
ch™ge
);

91 
	}
}

102 
∆n_nŸifõr
 *

103 
	$π√éök_lök_nŸifõr_¸óã
(
π√éök_lök_nŸify_func
 *
cb
, *
aux
)

105 i‡(!
∆n
) {

106 
∆n
 = 
	`∆n_¸óã
(
NETLINK_ROUTE
, 
RTNLGRP_LINK
, 
π√éök_lök_∑r£_cb
,

107 &
πn_ch™ge
);

110  
	`∆n_nŸifõr_¸óã
(
∆n
, (
∆n_nŸify_func
 *Ë
cb
, 
aux
);

111 
	}
}

116 
	$π√éök_lök_nŸifõr_de°roy
(
∆n_nŸifõr
 *
nŸifõr
)

118 
	`∆n_nŸifõr_de°roy
(
nŸifõr
);

119 
	}
}

124 
	$π√éök_lök_run
()

126 i‡(
∆n
) {

127 
	`∆n_run
(
∆n
);

129 
	}
}

134 
	$π√éök_lök_waô
()

136 i‡(
∆n
) {

137 
	`∆n_waô
(
∆n
);

139 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/rtnetlink-link.h

17 #i‚de‡
RTNETLINK_LINK_H


18 
	#RTNETLINK_LINK_H
 1

	)

20 
	~<°dboﬁ.h
>

21 
	~<°döt.h
>

22 
	~<löux/if_ëhî.h
>

24 
	goÂbuf
;

25 
	g∆n_nŸifõr
;

32 
	sπ√éök_lök_ch™ge
 {

34 
	m∆msg_ty≥
;

37 
	mifi_ödex
;

40 c⁄° *
	mi‚ame
;

41 
	mma°î_ifödex
;

42 
	mmtu
;

43 
uöt8_t
 
	maddr
[
ETH_ALEN
];

44 
	mifi_Êags
;

53 
	tπ√éök_lök_nŸify_func
(c⁄° 
	tπ√éök_lök_ch™ge
 *
	tch™ge
,

54 *
	taux
);

56 
boﬁ
 
π√éök_lök_∑r£
(
oÂbuf
 *
buf
,

57 
π√éök_lök_ch™ge
 *
ch™ge
);

58 
∆n_nŸifõr
 *

59 
π√éök_lök_nŸifõr_¸óã
(
π√éök_lök_nŸify_func
 *, *
aux
);

60 
π√éök_lök_nŸifõr_de°roy
(
∆n_nŸifõr
 *);

61 
π√éök_lök_run
();

62 
π√éök_lök_waô
();

	@/home/lsch/mytest/openvswitch-1.9.0/lib/sat-math.h

17 #i‚de‡
SAT_MATH_H


18 
	#SAT_MATH_H
 1

	)

20 
	~<as£π.h
>

21 
	~<limôs.h
>

24 
ölöe
 

25 
	$ßt_add
(
x
, 
y
)

27  
x
 + 
y
 >x ? x + y : 
UINT_MAX
;

28 
	}
}

31 
ölöe
 

32 
	$ßt_sub
(
x
, 
y
)

34  
x
 >
y
 ? x - y : 0;

35 
	}
}

38 
	#SAT_MUL
(
X
, 
Y
) \

39 ((
Y
) == 0 ? 0 \

40 : (
X
Ë<
UINT_MAX
 / (
Y
) ? () (X) * () (Y) \

41 : 
UINT_MAX
)

	)

42 
ölöe
 

43 
	$ßt_mul
(
x
, 
y
)

45  
	`SAT_MUL
(
x
, 
y
);

46 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/sflow.h

8 #i‚de‡
SFLOW_H


9 
	#SFLOW_H
 1

	)

11 
	eSFLAddªss_ty≥
 {

12 
	mSFLADDRESSTYPE_IP_V4
 = 1,

13 
	mSFLADDRESSTYPE_IP_V6
 = 2

17 
u_öt32_t
 
	maddr
;

18 } 
	tSFLIPv4
;

21 
u_ch¨
 
	maddr
[16];

22 } 
	tSFLIPv6
;

24 
	u_SFLAddªss_vÆue
 {

25 
SFLIPv4
 
	mù_v4
;

26 
SFLIPv6
 
	mù_v6
;

27 } 
	tSFLAddªss_vÆue
;

29 
	s_SFLAddªss
 {

30 
u_öt32_t
 
	mty≥
;

31 
SFLAddªss_vÆue
 
	maddªss
;

32 } 
	tSFLAddªss
;

36 
	#SFL_DEFAULT_HEADER_SIZE
 128

	)

37 
	#SFL_DEFAULT_COLLECTOR_PORT
 6343

	)

38 
	#SFL_DEFAULT_SAMPLING_RATE
 400

	)

39 
	#SFL_DEFAULT_POLLING_INTERVAL
 30

	)

42 
	eSFLHódî_¥Ÿocﬁ
 {

43 
	mSFLHEADER_ETHERNET_ISO8023
 = 1,

44 
	mSFLHEADER_ISO88024_TOKENBUS
 = 2,

45 
	mSFLHEADER_ISO88025_TOKENRING
 = 3,

46 
	mSFLHEADER_FDDI
 = 4,

47 
	mSFLHEADER_FRAME_RELAY
 = 5,

48 
	mSFLHEADER_X25
 = 6,

49 
	mSFLHEADER_PPP
 = 7,

50 
	mSFLHEADER_SMDS
 = 8,

51 
	mSFLHEADER_AAL5
 = 9,

52 
	mSFLHEADER_AAL5_IP
 = 10,

53 
	mSFLHEADER_IPv4
 = 11,

54 
	mSFLHEADER_IPv6
 = 12,

55 
	mSFLHEADER_MPLS
 = 13

60 
	s_SFLSam∂ed_hódî
 {

61 
u_öt32_t
 
	mhódî_¥Ÿocﬁ
;

62 
u_öt32_t
 
	m‰ame_Àngth
;

63 
u_öt32_t
 
	m°rù≥d
;

64 
u_öt32_t
 
	mhódî_Àngth
;

65 
u_öt8_t
 *
	mhódî_byãs
;

66 } 
	tSFLSam∂ed_hódî
;

70 
	s_SFLSam∂ed_ëhî√t
 {

71 
u_öt32_t
 
	mëh_Àn
;

73 
u_öt8_t
 
	m§c_mac
[8];

74 
u_öt8_t
 
	md°_mac
[8];

75 
u_öt32_t
 
	mëh_ty≥
;

76 } 
	tSFLSam∂ed_ëhî√t
;

80 
	s_SFLSam∂ed_ùv4
 {

81 
u_öt32_t
 
	mÀngth
;

83 
u_öt32_t
 
	m¥Ÿocﬁ
;

84 
SFLIPv4
 
	m§c_ù
;

85 
SFLIPv4
 
	md°_ù
;

86 
u_öt32_t
 
	m§c_p‹t
;

87 
u_öt32_t
 
	md°_p‹t
;

88 
u_öt32_t
 
	mt˝_Êags
;

89 
u_öt32_t
 
	mtos
;

90 } 
	tSFLSam∂ed_ùv4
;

94 
	s_SFLSam∂ed_ùv6
 {

95 
u_öt32_t
 
	mÀngth
;

97 
u_öt32_t
 
	m¥Ÿocﬁ
;

98 
SFLIPv6
 
	m§c_ù
;

99 
SFLIPv6
 
	md°_ù
;

100 
u_öt32_t
 
	m§c_p‹t
;

101 
u_öt32_t
 
	md°_p‹t
;

102 
u_öt32_t
 
	mt˝_Êags
;

103 
u_öt32_t
 
	m¥i‹ôy
;

104 } 
	tSFLSam∂ed_ùv6
;

110 
	s_SFLExãnded_swôch
 {

111 
u_öt32_t
 
	m§c_vœn
;

112 
u_öt32_t
 
	m§c_¥i‹ôy
;

113 
u_öt32_t
 
	md°_vœn
;

114 
u_öt32_t
 
	md°_¥i‹ôy
;

115 } 
	tSFLExãnded_swôch
;

119 
	s_SFLExãnded_rouãr
 {

120 
SFLAddªss
 
	m√xth›
;

121 
u_öt32_t
 
	m§c_mask
;

122 
u_öt32_t
 
	md°_mask
;

123 } 
	tSFLExãnded_rouãr
;

126 
	eSFLExãnded_as_∑th_£gmít_ty≥
 {

127 
	mSFLEXTENDED_AS_SET
 = 1,

128 
	mSFLEXTENDED_AS_SEQUENCE
 = 2

131 
	s_SFLExãnded_as_∑th_£gmít
 {

132 
u_öt32_t
 
	mty≥
;

133 
u_öt32_t
 
	mÀngth
;

135 
u_öt32_t
 *
	m£t
;

136 
u_öt32_t
 *
	m£q
;

137 } 
	mas
;

138 } 
	tSFLExãnded_as_∑th_£gmít
;

140 
	s_SFLExãnded_g©eway
 {

141 
SFLAddªss
 
	m√xth›
;

143 
u_öt32_t
 
	mas
;

144 
u_öt32_t
 
	m§c_as
;

145 
u_öt32_t
 
	m§c_≥î_as
;

146 
u_öt32_t
 
	md°_as_∑th_£gmíts
;

147 
SFLExãnded_as_∑th_£gmít
 *
	md°_as_∑th
;

148 
u_öt32_t
 
	mcommunôõs_Àngth
;

149 
u_öt32_t
 *
	mcommunôõs
;

150 
u_öt32_t
 
	mloˇÕªf
;

151 } 
	tSFLExãnded_g©eway
;

153 
	s_SFLSåög
 {

154 
u_öt32_t
 
	mÀn
;

155 *
	m°r
;

156 } 
	tSFLSåög
;

160 
	s_SFLExãnded_u£r
 {

161 
u_öt32_t
 
	m§c_ch¨£t
;

164 
SFLSåög
 
	m§c_u£r
;

165 
u_öt32_t
 
	md°_ch¨£t
;

166 
SFLSåög
 
	md°_u£r
;

167 } 
	tSFLExãnded_u£r
;

171 
	eSFLExãnded_uæ_dúe˘i⁄
 {

172 
	mSFLEXTENDED_URL_SRC
 = 1,

173 
	mSFLEXTENDED_URL_DST
 = 2

176 
	s_SFLExãnded_uæ
 {

177 
u_öt32_t
 
	mdúe˘i⁄
;

178 
SFLSåög
 
	muæ
;

180 
SFLSåög
 
	mho°
;

181 } 
	tSFLExãnded_uæ
;

185 
	s_SFLLabñSèck
 {

186 
u_öt32_t
 
	mdïth
;

187 
u_öt32_t
 *
	m°ack
;

188 } 
	tSFLLabñSèck
;

190 
	s_SFLExãnded_m∂s
 {

191 
SFLAddªss
 
	m√xtH›
;

192 
SFLLabñSèck
 
	mö_°ack
;

193 
SFLLabñSèck
 
	mout_°ack
;

194 } 
	tSFLExãnded_m∂s
;

202 
	s_SFLExãnded_«t
 {

203 
SFLAddªss
 
	m§c
;

204 
SFLAddªss
 
	md°
;

205 } 
	tSFLExãnded_«t
;

209 
	s_SFLExãnded_m∂s_tu¬ñ
 {

210 
SFLSåög
 
	mtu¬ñ_l•_«me
;

211 
u_öt32_t
 
	mtu¬ñ_id
;

212 
u_öt32_t
 
	mtu¬ñ_cos
;

213 } 
	tSFLExãnded_m∂s_tu¬ñ
;

215 
	s_SFLExãnded_m∂s_vc
 {

216 
SFLSåög
 
	mvc_ö°™˚_«me
;

217 
u_öt32_t
 
	mvŒ_vc_id
;

218 
u_öt32_t
 
	mvc_œbñ_cos
;

219 } 
	tSFLExãnded_m∂s_vc
;

224 
	s_SFLExãnded_m∂s_FTN
 {

225 
SFLSåög
 
	mm∂sFTNDes¸
;

226 
u_öt32_t
 
	mm∂sFTNMask
;

227 } 
	tSFLExãnded_m∂s_FTN
;

234 
	s_SFLExãnded_m∂s_LDP_FEC
 {

235 
u_öt32_t
 
	mm∂sFecAddrPªfixLígth
;

236 } 
	tSFLExãnded_m∂s_LDP_FEC
;

255 
SFLLabñSèck
 
	tSFLVœnSèck
;

256 
	s_SFLExãnded_vœn_tu¬ñ
 {

257 
SFLVœnSèck
 
	m°ack
;

261 } 
	tSFLExãnded_vœn_tu¬ñ
;

263 
	eSFLFlow_ty≥_èg
 {

265 
	mSFLFLOW_HEADER
 = 1,

266 
	mSFLFLOW_ETHERNET
 = 2,

267 
	mSFLFLOW_IPV4
 = 3,

268 
	mSFLFLOW_IPV6
 = 4,

269 
	mSFLFLOW_EX_SWITCH
 = 1001,

270 
	mSFLFLOW_EX_ROUTER
 = 1002,

271 
	mSFLFLOW_EX_GATEWAY
 = 1003,

272 
	mSFLFLOW_EX_USER
 = 1004,

273 
	mSFLFLOW_EX_URL
 = 1005,

274 
	mSFLFLOW_EX_MPLS
 = 1006,

275 
	mSFLFLOW_EX_NAT
 = 1007,

276 
	mSFLFLOW_EX_MPLS_TUNNEL
 = 1008,

277 
	mSFLFLOW_EX_MPLS_VC
 = 1009,

278 
	mSFLFLOW_EX_MPLS_FTN
 = 1010,

279 
	mSFLFLOW_EX_MPLS_LDP_FEC
 = 1011,

280 
	mSFLFLOW_EX_VLAN_TUNNEL
 = 1012,

283 
	u_SFLFlow_ty≥
 {

284 
SFLSam∂ed_hódî
 
	mhódî
;

285 
SFLSam∂ed_ëhî√t
 
	mëhî√t
;

286 
SFLSam∂ed_ùv4
 
	mùv4
;

287 
SFLSam∂ed_ùv6
 
	mùv6
;

288 
SFLExãnded_swôch
 
	msw
;

289 
SFLExãnded_rouãr
 
	mrouãr
;

290 
SFLExãnded_g©eway
 
	mg©eway
;

291 
SFLExãnded_u£r
 
	mu£r
;

292 
SFLExãnded_uæ
 
	muæ
;

293 
SFLExãnded_m∂s
 
	mm∂s
;

294 
SFLExãnded_«t
 
	m«t
;

295 
SFLExãnded_m∂s_tu¬ñ
 
	mm∂s_tu¬ñ
;

296 
SFLExãnded_m∂s_vc
 
	mm∂s_vc
;

297 
SFLExãnded_m∂s_FTN
 
	mm∂s_·n
;

298 
SFLExãnded_m∂s_LDP_FEC
 
	mm∂s_ldp_„c
;

299 
SFLExãnded_vœn_tu¬ñ
 
	mvœn_tu¬ñ
;

300 } 
	tSFLFlow_ty≥
;

302 
	s_SFLFlow_ßm∂e_ñemít
 {

303 
_SFLFlow_ßm∂e_ñemít
 *
	mnxt
;

304 
u_öt32_t
 
	mèg
;

305 
u_öt32_t
 
	mÀngth
;

306 
SFLFlow_ty≥
 
	mÊowTy≥
;

307 } 
	tSFLFlow_ßm∂e_ñemít
;

309 
	eSFL_ßm∂e_èg
 {

310 
	mSFLFLOW_SAMPLE
 = 1,

311 
	mSFLCOUNTERS_SAMPLE
 = 2,

312 
	mSFLFLOW_SAMPLE_EXPANDED
 = 3,

313 
	mSFLCOUNTERS_SAMPLE_EXPANDED
 = 4

318 
	s_SFLFlow_ßm∂e
 {

321 
u_öt32_t
 
	m£quí˚_numbî
;

323 
u_öt32_t
 
	msour˚_id
;

324 
u_öt32_t
 
	mßm∂ög_øã
;

325 
u_öt32_t
 
	mßm∂e_poﬁ
;

328 
u_öt32_t
 
	mdr›s
;

330 
u_öt32_t
 
	möput
;

332 
u_öt32_t
 
	mouçut
;

347 
u_öt32_t
 
	mnum_ñemíts
;

348 
SFLFlow_ßm∂e_ñemít
 *
	mñemíts
;

349 } 
	tSFLFlow_ßm∂e
;

353 
	s_SFLFlow_ßm∂e_ex∑nded
 {

356 
u_öt32_t
 
	m£quí˚_numbî
;

358 
u_öt32_t
 
	mds_˛ass
;

359 
u_öt32_t
 
	mds_ödex
;

360 
u_öt32_t
 
	mßm∂ög_øã
;

361 
u_öt32_t
 
	mßm∂e_poﬁ
;

364 
u_öt32_t
 
	mdr›s
;

366 
u_öt32_t
 
	möputF‹m©
;

367 
u_öt32_t
 
	möput
;

369 
u_öt32_t
 
	mouçutF‹m©
;

370 
u_öt32_t
 
	mouçut
;

372 
u_öt32_t
 
	mnum_ñemíts
;

373 
SFLFlow_ßm∂e_ñemít
 *
	mñemíts
;

374 } 
	tSFLFlow_ßm∂e_ex∑nded
;

380 
	s_SFLIf_cou¡îs
 {

381 
u_öt32_t
 
	mifIndex
;

382 
u_öt32_t
 
	mifTy≥
;

383 
u_öt64_t
 
	mifS≥ed
;

384 
u_öt32_t
 
	mifDúe˘i⁄
;

387 
u_öt32_t
 
	mifSètus
;

390 
u_öt64_t
 
	mifInO˘ës
;

391 
u_öt32_t
 
	mifInUˇ°Pkts
;

392 
u_öt32_t
 
	mifInMu…iˇ°Pkts
;

393 
u_öt32_t
 
	mifInBrﬂdˇ°Pkts
;

394 
u_öt32_t
 
	mifInDisˇrds
;

395 
u_öt32_t
 
	mifInEº‹s
;

396 
u_öt32_t
 
	mifInUnknownPrŸos
;

397 
u_öt64_t
 
	mifOutO˘ës
;

398 
u_öt32_t
 
	mifOutUˇ°Pkts
;

399 
u_öt32_t
 
	mifOutMu…iˇ°Pkts
;

400 
u_öt32_t
 
	mifOutBrﬂdˇ°Pkts
;

401 
u_öt32_t
 
	mifOutDisˇrds
;

402 
u_öt32_t
 
	mifOutEº‹s
;

403 
u_öt32_t
 
	mifPromiscuousMode
;

404 } 
	tSFLIf_cou¡îs
;

407 
	s_SFLEthî√t_cou¡îs
 {

408 
u_öt32_t
 
	mdŸ3SètsAlignmítEº‹s
;

409 
u_öt32_t
 
	mdŸ3SètsFCSEº‹s
;

410 
u_öt32_t
 
	mdŸ3SètsSögÀCﬁlisi⁄Fømes
;

411 
u_öt32_t
 
	mdŸ3SètsMu…ùÀCﬁlisi⁄Fømes
;

412 
u_öt32_t
 
	mdŸ3SètsSQETe°Eº‹s
;

413 
u_öt32_t
 
	mdŸ3SètsDe„ºedTønsmissi⁄s
;

414 
u_öt32_t
 
	mdŸ3SètsL©eCﬁlisi⁄s
;

415 
u_öt32_t
 
	mdŸ3SètsEx˚ssiveCﬁlisi⁄s
;

416 
u_öt32_t
 
	mdŸ3SètsI¡î«lMacTønsmôEº‹s
;

417 
u_öt32_t
 
	mdŸ3SètsC¨rõrSí£Eº‹s
;

418 
u_öt32_t
 
	mdŸ3SètsFømeTooL⁄gs
;

419 
u_öt32_t
 
	mdŸ3SètsI¡î«lMacRe˚iveEº‹s
;

420 
u_öt32_t
 
	mdŸ3SètsSymbﬁEº‹s
;

421 } 
	tSFLEthî√t_cou¡îs
;

425 
	s_SFLTokírög_cou¡îs
 {

426 
u_öt32_t
 
	mdŸ5SètsLöeEº‹s
;

427 
u_öt32_t
 
	mdŸ5SètsBur°Eº‹s
;

428 
u_öt32_t
 
	mdŸ5SètsACEº‹s
;

429 
u_öt32_t
 
	mdŸ5SètsAb‹tTønsEº‹s
;

430 
u_öt32_t
 
	mdŸ5SètsI¡î«lEº‹s
;

431 
u_öt32_t
 
	mdŸ5SètsLo°FømeEº‹s
;

432 
u_öt32_t
 
	mdŸ5SètsRe˚iveC⁄ge°i⁄s
;

433 
u_öt32_t
 
	mdŸ5SètsFømeC›õdEº‹s
;

434 
u_öt32_t
 
	mdŸ5SètsTokíEº‹s
;

435 
u_öt32_t
 
	mdŸ5SètsSo·Eº‹s
;

436 
u_öt32_t
 
	mdŸ5SètsH¨dEº‹s
;

437 
u_öt32_t
 
	mdŸ5SètsSig«lLoss
;

438 
u_öt32_t
 
	mdŸ5SètsTønsmôBóc⁄s
;

439 
u_öt32_t
 
	mdŸ5SètsRecovîys
;

440 
u_öt32_t
 
	mdŸ5SètsLobeWúes
;

441 
u_öt32_t
 
	mdŸ5SètsRemoves
;

442 
u_öt32_t
 
	mdŸ5SètsSögÀs
;

443 
u_öt32_t
 
	mdŸ5SètsFªqEº‹s
;

444 } 
	tSFLTokírög_cou¡îs
;

448 
	s_SFLVg_cou¡îs
 {

449 
u_öt32_t
 
	mdŸ12InHighPri‹ôyFømes
;

450 
u_öt64_t
 
	mdŸ12InHighPri‹ôyO˘ës
;

451 
u_öt32_t
 
	mdŸ12InN‹mPri‹ôyFømes
;

452 
u_öt64_t
 
	mdŸ12InN‹mPri‹ôyO˘ës
;

453 
u_öt32_t
 
	mdŸ12InIPMEº‹s
;

454 
u_öt32_t
 
	mdŸ12InOvîsizeFømeEº‹s
;

455 
u_öt32_t
 
	mdŸ12InD©aEº‹s
;

456 
u_öt32_t
 
	mdŸ12InNuŒAddªs£dFømes
;

457 
u_öt32_t
 
	mdŸ12OutHighPri‹ôyFømes
;

458 
u_öt64_t
 
	mdŸ12OutHighPri‹ôyO˘ës
;

459 
u_öt32_t
 
	mdŸ12Tønsôi⁄I¡oTøöögs
;

460 
u_öt64_t
 
	mdŸ12HCInHighPri‹ôyO˘ës
;

461 
u_öt64_t
 
	mdŸ12HCInN‹mPri‹ôyO˘ës
;

462 
u_öt64_t
 
	mdŸ12HCOutHighPri‹ôyO˘ës
;

463 } 
	tSFLVg_cou¡îs
;

465 
	s_SFLVœn_cou¡îs
 {

466 
u_öt32_t
 
	mvœn_id
;

467 
u_öt64_t
 
	mo˘ës
;

468 
u_öt32_t
 
	muˇ°Pkts
;

469 
u_öt32_t
 
	mmu…iˇ°Pkts
;

470 
u_öt32_t
 
	mbrﬂdˇ°Pkts
;

471 
u_öt32_t
 
	mdisˇrds
;

472 } 
	tSFLVœn_cou¡îs
;

476 
	eSFLCou¡îs_ty≥_èg
 {

478 
	mSFLCOUNTERS_GENERIC
 = 1,

479 
	mSFLCOUNTERS_ETHERNET
 = 2,

480 
	mSFLCOUNTERS_TOKENRING
 = 3,

481 
	mSFLCOUNTERS_VG
 = 4,

482 
	mSFLCOUNTERS_VLAN
 = 5

485 
	u_SFLCou¡îs_ty≥
 {

486 
SFLIf_cou¡îs
 
	mgíîic
;

487 
SFLEthî√t_cou¡îs
 
	mëhî√t
;

488 
SFLTokírög_cou¡îs
 
	mtokírög
;

489 
SFLVg_cou¡îs
 
	mvg
;

490 
SFLVœn_cou¡îs
 
	mvœn
;

491 } 
	tSFLCou¡îs_ty≥
;

493 
	s_SFLCou¡îs_ßm∂e_ñemít
 {

494 
_SFLCou¡îs_ßm∂e_ñemít
 *
	mnxt
;

495 
u_öt32_t
 
	mèg
;

496 
u_öt32_t
 
	mÀngth
;

497 
SFLCou¡îs_ty≥
 
	mcou¡îBlock
;

498 } 
	tSFLCou¡îs_ßm∂e_ñemít
;

500 
	s_SFLCou¡îs_ßm∂e
 {

503 
u_öt32_t
 
	m£quí˚_numbî
;

505 
u_öt32_t
 
	msour˚_id
;

506 
u_öt32_t
 
	mnum_ñemíts
;

507 
SFLCou¡îs_ßm∂e_ñemít
 *
	mñemíts
;

508 } 
	tSFLCou¡îs_ßm∂e
;

511 
	s_SFLCou¡îs_ßm∂e_ex∑nded
 {

514 
u_öt32_t
 
	m£quí˚_numbî
;

516 
u_öt32_t
 
	mds_˛ass
;

517 
u_öt32_t
 
	mds_ödex
;

518 
u_öt32_t
 
	mnum_ñemíts
;

519 
SFLCou¡îs_ßm∂e_ñemít
 *
	mñemíts
;

520 } 
	tSFLCou¡îs_ßm∂e_ex∑nded
;

522 
	#SFLADD_ELEMENT
(
_sm
, 
_ñ
Ëdÿ{ (_ñ)->
nxt
 = (_sm)->
ñemíts
; (_sm)->ñemít†(_ñ); } 0)

	)

526 
	eSFLD©agøm_vîsi⁄
 {

527 
	mSFLDATAGRAM_VERSION2
 = 2,

528 
	mSFLDATAGRAM_VERSION4
 = 4,

529 
	mSFLDATAGRAM_VERSION5
 = 5

532 
	s_SFLSam∂e_d©agøm_hdr
 {

533 
u_öt32_t
 
	md©agøm_vîsi⁄
;

534 
SFLAddªss
 
	magít_addªss
;

535 
u_öt32_t
 
	msub_agít_id
;

538 
u_öt32_t
 
	m£quí˚_numbî
;

540 
u_öt32_t
 
	mu±ime
;

543 
u_öt32_t
 
	mnum_ªc‹ds
;

544 } 
	tSFLSam∂e_d©agøm_hdr
;

546 
	#SFL_MAX_DATAGRAM_SIZE
 1500

	)

547 
	#SFL_MIN_DATAGRAM_SIZE
 200

	)

548 
	#SFL_DEFAULT_DATAGRAM_SIZE
 1400

	)

550 
	#SFL_DATA_PAD
 400

	)

	@/home/lsch/mytest/openvswitch-1.9.0/lib/sflow_agent.c

8 
	~"sÊow_≠i.h
"

10 * 
sÊAŒoc
(
SFLAgít
 *
agít
, 
size_t
 
byãs
);

11 
sÊFªe
(
SFLAgít
 *
agít
, *
obj
);

12 
sÊ_agít_jumpTabÀAdd
(
SFLAgít
 *
agít
, 
SFLSam∂î
 *
ßm∂î
);

13 
sÊ_agít_jumpTabÀRemove
(
SFLAgít
 *
agít
, 
SFLSam∂î
 *
ßm∂î
);

20 
	$sÊ_agít_öô
(
SFLAgít
 *
agít
,

21 
SFLAddªss
 *
myIP
,

22 
u_öt32_t
 
subId
,

23 
time_t
 
boŸTime
,

24 
time_t
 
now
,

25 *
magic
,

26 
ÆlocFn_t
 
ÆlocFn
,

27 
‰ìFn_t
 
‰ìFn
,

28 
îr‹Fn_t
 
îr‹Fn
,

29 
£ndFn_t
 
£ndFn
)

32 
	`mem£t
(
agít
, 0, (*agent));

34 
agít
->
myIP
 = *myIP;

35 
agít
->
subId
 = subId;

36 
agít
->
boŸTime
 = bootTime;

37 
agít
->
now
 =Çow;

38 
agít
->
magic
 = magic;

39 
agít
->
ÆlocFn
 =állocFn;

40 
agít
->
‰ìFn
 = freeFn;

41 
agít
->
îr‹Fn
 =ÉrrorFn;

42 
agít
->
£ndFn
 = sendFn;

44 #ifde‡
SFLOW_DO_SOCKET


45 if(
£ndFn
 =
NULL
) {

47 if((
agít
->
ª˚ivîSockë4
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 
IPPROTO_UDP
)) == -1)

48 
	`sÊ_agít_sysEº‹
(
agít
, "agent", "IPv4 socket open failed");

49 if((
agít
->
ª˚ivîSockë6
 = 
	`sockë
(
AF_INET6
, 
SOCK_DGRAM
, 
IPPROTO_UDP
)) == -1)

50 
	`sÊ_agít_sysEº‹
(
agít
, "agent", "IPv6 socket open failed");

53 
	}
}

60 
	$sÊ_agít_ªÀa£
(
SFLAgít
 *
agít
)

63 
SFLSam∂î
 *
sm
 = 
agít
->
ßm∂îs
;

64 
SFLPﬁÀr
 *
∂
 = 
agít
->
pﬁÀrs
;

65 
SFLRe˚ivî
 *
rcv
 = 
agít
->
ª˚ivîs
;

67 ; 
sm
 !
NULL
; ) {

68 
SFLSam∂î
 *
√xtSm
 = 
sm
->
nxt
;

69 
	`sÊFªe
(
agít
, 
sm
);

70 
sm
 = 
√xtSm
;

72 
agít
->
ßm∂îs
 = 
NULL
;

74 ; 
∂
 !
NULL
; ) {

75 
SFLPﬁÀr
 *
√xtPl
 = 
∂
->
nxt
;

76 
	`sÊFªe
(
agít
, 
∂
);

77 
∂
 = 
√xtPl
;

79 
agít
->
pﬁÀrs
 = 
NULL
;

81 ; 
rcv
 !
NULL
; ) {

82 
SFLRe˚ivî
 *
√xtRcv
 = 
rcv
->
nxt
;

83 
	`sÊFªe
(
agít
, 
rcv
);

84 
rcv
 = 
√xtRcv
;

86 
agít
->
ª˚ivîs
 = 
NULL
;

88 #ifde‡
SFLOW_DO_SOCKET


90 if(
agít
->
ª˚ivîSockë4
 > 0Ë
	`˛o£
(agent->receiverSocket4);

91 if(
agít
->
ª˚ivîSockë6
 > 0Ë
	`˛o£
(agent->receiverSocket6);

93 
	}
}

101 
	$sÊ_agít_£t_agítAddªss
(
SFLAgít
 *
agít
, 
SFLAddªss
 *
addr
)

103 if(
addr
 && 
	`memcmp
◊ddr, &
agít
->
myIP
, (agent->myIP)) != 0) {

105 
agít
->
myIP
 = *
addr
;

108 
	}
}

110 
	$sÊ_agít_£t_agítSubId
(
SFLAgít
 *
agít
, 
u_öt32_t
 
subId
)

112 if(
subId
 !
agít
->subId) {

114 
agít
->
subId
 = subId;

117 
	}
}

124 
	$sÊ_agít_tick
(
SFLAgít
 *
agít
, 
time_t
 
now
)

126 
SFLRe˚ivî
 *
rcv
 = 
agít
->
ª˚ivîs
;

127 
SFLSam∂î
 *
sm
 = 
agít
->
ßm∂îs
;

128 
SFLPﬁÀr
 *
∂
 = 
agít
->
pﬁÀrs
;

129 
agít
->
now
 =Çow;

131 ; 
rcv
 !
NULL
;Ñcv =Ñcv->
nxt
Ë
	`sÊ_ª˚ivî_tick
‘cv, 
now
);

133 ; 
sm
 !
NULL
; sm = sm->
nxt
Ë
	`sÊ_ßm∂î_tick
(sm, 
now
);

135 ; 
∂
 !
NULL
;Ö»∂->
nxt
Ë
	`sÊ_pﬁÀr_tick
’l, 
now
);

136 
	}
}

143 
SFLRe˚ivî
 *
	$sÊ_agít_addRe˚ivî
(
SFLAgít
 *
agít
)

145 
SFLRe˚ivî
 *
rcv
 = (SFLRe˚ivî *)
	`sÊAŒoc
(
agít
, (SFLReceiver));

146 
	`sÊ_ª˚ivî_öô
(
rcv
, 
agít
);

149 
SFLRe˚ivî
 *
r
, *
¥ev
 = 
NULL
;

150 
r
 = 
agít
->
ª˚ivîs
;Ñ !
NULL
; 
¥ev
 =Ñ,Ñ =Ñ->
nxt
);

151 if(
¥ev
Ë¥ev->
nxt
 = 
rcv
;

152 
agít
->
ª˚ivîs
 = 
rcv
;

153 
rcv
->
nxt
 = 
NULL
;

155  
rcv
;

156 
	}
}

169 
ölöe
 
	$sÊ_dsi_com∑ª
(
SFLD©aSour˚_ö°™˚
 *
pdsi1
, SFLD©aSour˚_ö°™˚ *
pdsi2
) {

172 
cmp
 = 
pdsi2
->
ds_˛ass
 - 
pdsi1
->ds_class;

173 if(
cmp
 =0Ëcm∞
pdsi2
->
ds_ödex
 - 
pdsi1
->ds_index;

174 if(
cmp
 =0Ëcm∞
pdsi2
->
ds_ö°™˚
 - 
pdsi1
->ds_instance;

175  
cmp
;

176 
	}
}

183 
SFLSam∂î
 *
	$sÊ_agít_addSam∂î
(
SFLAgít
 *
agít
, 
SFLD©aSour˚_ö°™˚
 *
pdsi
)

186 
SFLSam∂î
 *
¥ev
 = 
NULL
, *
sm
 = 
agít
->
ßm∂îs
;

187 ; 
sm
 !
NULL
; 
¥ev
 = sm, sm = sm->
nxt
) {

188 
öt64_t
 
cmp
 = 
	`sÊ_dsi_com∑ª
(
pdsi
, &
sm
->
dsi
);

189 if(
cmp
 =0Ë 
sm
;

190 if(
cmp
 < 0) ;

195 
SFLSam∂î
 *
√wsm
 = (SFLSam∂î *)
	`sÊAŒoc
(
agít
, (SFLSampler));

196 
	`sÊ_ßm∂î_öô
(
√wsm
, 
agít
, 
pdsi
);

197 if(
¥ev
Ë¥ev->
nxt
 = 
√wsm
;

198 
agít
->
ßm∂îs
 = 
√wsm
;

199 
√wsm
->
nxt
 = 
sm
;

202 if(
	`SFL_DS_CLASS
(
√wsm
->
dsi
) == 0) {

203 
SFLSam∂î
 *
ã°
 = 
	`sÊ_agít_gëSam∂îByIfIndex
(
agít
, 
	`SFL_DS_INDEX
(
√wsm
->
dsi
));

204 if(
ã°
 && (
	`SFL_DS_INSTANCE
(
√wsm
->
dsi
) < SFL_DS_INSTANCE(test->dsi))) {

206 
	`sÊ_agít_jumpTabÀRemove
(
agít
, 
ã°
);

207 
ã°
 = 
NULL
;

209 if(
ã°
 =
NULL
Ë
	`sÊ_agít_jumpTabÀAdd
(
agít
, 
√wsm
);

211  
√wsm
;

213 
	}
}

220 
SFLPﬁÀr
 *
	$sÊ_agít_addPﬁÀr
(
SFLAgít
 *
agít
,

221 
SFLD©aSour˚_ö°™˚
 *
pdsi
,

222 *
magic
,

223 
gëCou¡îsFn_t
 
gëCou¡îsFn
)

226 
SFLPﬁÀr
 *
¥ev
 = 
NULL
, *
∂
 = 
agít
->
pﬁÀrs
;

227 ; 
∂
 !
NULL
; 
¥ev
 =Öl,Ö»∂->
nxt
) {

228 
öt64_t
 
cmp
 = 
	`sÊ_dsi_com∑ª
(
pdsi
, &
∂
->
dsi
);

229 if(
cmp
 =0Ë 
∂
;

230 if(
cmp
 < 0) ;

234 
SFLPﬁÀr
 *
√w∂
 = (SFLPﬁÀ∏*)
	`sÊAŒoc
(
agít
, (SFLPoller));

235 
	`sÊ_pﬁÀr_öô
(
√w∂
, 
agít
, 
pdsi
, 
magic
, 
gëCou¡îsFn
);

236 if(
¥ev
Ë¥ev->
nxt
 = 
√w∂
;

237 
agít
->
pﬁÀrs
 = 
√w∂
;

238 
√w∂
->
nxt
 = 
∂
;

239  
√w∂
;

241 
	}
}

248 
	$sÊ_agít_ªmoveSam∂î
(
SFLAgít
 *
agít
, 
SFLD©aSour˚_ö°™˚
 *
pdsi
)

251 
SFLSam∂î
 *
¥ev
 = 
NULL
, *
sm
 = 
agít
->
ßm∂îs
;

252 ; 
sm
 !
NULL
; 
¥ev
 = sm, sm = sm->
nxt
) {

253 if(
	`sÊ_dsi_com∑ª
(
pdsi
, &
sm
->
dsi
) == 0) {

254 if(
¥ev
 =
NULL
Ë
agít
->
ßm∂îs
 = 
sm
->
nxt
;

255 
¥ev
->
nxt
 = 
sm
->nxt;

256 
	`sÊ_agít_jumpTabÀRemove
(
agít
, 
sm
);

257 
	`sÊFªe
(
agít
, 
sm
);

263 
	}
}

270 
	$sÊ_agít_ªmovePﬁÀr
(
SFLAgít
 *
agít
, 
SFLD©aSour˚_ö°™˚
 *
pdsi
)

273 
SFLPﬁÀr
 *
¥ev
 = 
NULL
, *
∂
 = 
agít
->
pﬁÀrs
;

274 ; 
∂
 !
NULL
; 
¥ev
 =Öl,Ö»∂->
nxt
) {

275 if(
	`sÊ_dsi_com∑ª
(
pdsi
, &
∂
->
dsi
) == 0) {

276 if(
¥ev
 =
NULL
Ë
agít
->
pﬁÀrs
 = 
∂
->
nxt
;

277 
¥ev
->
nxt
 = 
∂
->nxt;

278 
	`sÊFªe
(
agít
, 
∂
);

284 
	}
}

291 
	$sÊ_agít_jumpTabÀAdd
(
SFLAgít
 *
agít
, 
SFLSam∂î
 *
ßm∂î
)

293 
u_öt32_t
 
hashIndex
 = 
	`SFL_DS_INDEX
(
ßm∂î
->
dsi
Ë% 
SFL_HASHTABLE_SIZ
;

294 
ßm∂î
->
hash_nxt
 = 
agít
->
jumpTabÀ
[
hashIndex
];

295 
agít
->
jumpTabÀ
[
hashIndex
] = 
ßm∂î
;

296 
	}
}

303 
	$sÊ_agít_jumpTabÀRemove
(
SFLAgít
 *
agít
, 
SFLSam∂î
 *
ßm∂î
)

305 
u_öt32_t
 
hashIndex
 = 
	`SFL_DS_INDEX
(
ßm∂î
->
dsi
Ë% 
SFL_HASHTABLE_SIZ
;

306 
SFLSam∂î
 *
£¨ch
 = 
agít
->
jumpTabÀ
[
hashIndex
], *
¥ev
 = 
NULL
;

307  ; 
£¨ch
 !
NULL
; 
¥ev
 = sórch, sórch = sórch->
hash_nxt
Ëif(£¨ch =
ßm∂î
) ;

308 if(
£¨ch
) {

310 if(
¥ev
Ë¥ev->
hash_nxt
 = 
£¨ch
->hash_nxt;

311 
agít
->
jumpTabÀ
[
hashIndex
] = 
£¨ch
->
hash_nxt
;

312 
£¨ch
->
hash_nxt
 = 
NULL
;

314 
	}
}

328 
SFLSam∂î
 *
	$sÊ_agít_gëSam∂îByIfIndex
(
SFLAgít
 *
agít
, 
u_öt32_t
 
ifIndex
)

330 
SFLSam∂î
 *
£¨ch
 = 
agít
->
jumpTabÀ
[
ifIndex
 % 
SFL_HASHTABLE_SIZ
];

331  ; 
£¨ch
 !
NULL
; sórch = sórch->
hash_nxt
Ëif(
	`SFL_DS_INDEX
(£¨ch->
dsi
Ë=
ifIndex
) ;

332  
£¨ch
;

333 
	}
}

340 
SFLSam∂î
 *
	$sÊ_agít_gëSam∂î
(
SFLAgít
 *
agít
, 
SFLD©aSour˚_ö°™˚
 *
pdsi
)

343 
SFLSam∂î
 *
sm
 = 
agít
->
ßm∂îs
;

344 ; 
sm
 !
NULL
; sm = sm->
nxt
)

345 if(
	`sÊ_dsi_com∑ª
(
pdsi
, &
sm
->
dsi
) == 0)  sm;

347  
NULL
;

348 
	}
}

355 
SFLPﬁÀr
 *
	$sÊ_agít_gëPﬁÀr
(
SFLAgít
 *
agít
, 
SFLD©aSour˚_ö°™˚
 *
pdsi
)

358 
SFLPﬁÀr
 *
∂
 = 
agít
->
pﬁÀrs
;

359 ; 
∂
 !
NULL
;Ö»∂->
nxt
)

360 if(
	`sÊ_dsi_com∑ª
(
pdsi
, &
∂
->
dsi
) == 0) Öl;

362  
NULL
;

363 
	}
}

370 
SFLRe˚ivî
 *
	$sÊ_agít_gëRe˚ivî
(
SFLAgít
 *
agít
, 
u_öt32_t
 
ª˚ivîIndex
)

372 
u_öt32_t
 
rcvIdx
 = 0;

373 
SFLRe˚ivî
 *
rcv
 = 
agít
->
ª˚ivîs
;

374 ; 
rcv
 !
NULL
;Ñcv =Ñcv->
nxt
)

375 if(
ª˚ivîIndex
 =++
rcvIdx
Ë 
rcv
;

378  
NULL
;

379 
	}
}

386 
SFLSam∂î
 *
	$sÊ_agít_gëNextSam∂î
(
SFLAgít
 *
agít
, 
SFLD©aSour˚_ö°™˚
 *
pdsi
)

390 
SFLSam∂î
 *
sm
 = 
	`sÊ_agít_gëSam∂î
(
agít
, 
pdsi
);

391  
sm
 ? sm->
nxt
 : 
NULL
;

392 
	}
}

399 
SFLPﬁÀr
 *
	$sÊ_agít_gëNextPﬁÀr
(
SFLAgít
 *
agít
, 
SFLD©aSour˚_ö°™˚
 *
pdsi
)

403 
SFLPﬁÀr
 *
∂
 = 
	`sÊ_agít_gëPﬁÀr
(
agít
, 
pdsi
);

404  
∂
 ?Öl->
nxt
 : 
NULL
;

405 
	}
}

412 
SFLRe˚ivî
 *
	$sÊ_agít_gëNextRe˚ivî
(
SFLAgít
 *
agít
, 
u_öt32_t
 
ª˚ivîIndex
)

414  
	`sÊ_agít_gëRe˚ivî
(
agít
, 
ª˚ivîIndex
 + 1);

415 
	}
}

423 
	$sÊ_agít_ª£tRe˚ivî
(
SFLAgít
 *
agít
, 
SFLRe˚ivî
 *
ª˚ivî
)

427 
u_öt32_t
 
rcvIdx
 = 0;

428 
SFLRe˚ivî
 *
rcv
 = 
agít
->
ª˚ivîs
;

429 ; 
rcv
 !
NULL
;Ñcv =Ñcv->
nxt
) {

430 
rcvIdx
++;

431 if(
rcv
 =
ª˚ivî
) {

433 
SFLSam∂î
 *
sm
 = 
agít
->
ßm∂îs
;

434 
SFLPﬁÀr
 *
∂
 = 
agít
->
pﬁÀrs
;

436 ; 
sm
 !
NULL
; sm = sm->
nxt
)

437 if(
	`sÊ_ßm∂î_gë_sFlowFsRe˚ivî
(
sm
Ë=
rcvIdx
Ë
	`sÊ_ßm∂î_£t_sFlowFsRe˚ivî
(sm, 0);

439 ; 
∂
 !
NULL
;Ö»∂->
nxt
)

440 if(
	`sÊ_pﬁÀr_gë_sFlowCpRe˚ivî
(
∂
Ë=
rcvIdx
Ë
	`sÊ_pﬁÀr_£t_sFlowCpRe˚ivî
(pl, 0);

445 
	}
}

451 
	#MAX_ERRMSG_LEN
 1000

	)

453 
	$sÊ_agít_îr‹
(
SFLAgít
 *
agít
, *
modName
, *
msg
)

455 
îrm
[
MAX_ERRMSG_LEN
];

456 
	`¢¥ötf
(
îrm
, Éºm, "sÊ_agít_îr‹: %s: %s\n", 
modName
, 
msg
);

457 if(
agít
->
îr‹Fn
Ë(*agít->îr‹Fn)◊gít->
magic
,ágít, 
îrm
);

459 
	`Ârötf
(
°dîr
, "%s\n", 
îrm
);

460 
	`fÊush
(
°dîr
);

462 
	}
}

469 
	$sÊ_agít_sysEº‹
(
SFLAgít
 *
agít
, *
modName
, *
msg
)

471 
îrm
[
MAX_ERRMSG_LEN
];

472 
	`¢¥ötf
(
îrm
, Éºm, "sÊ_agít_sysEº‹: %s: %†”ºnÿ%d - %s)\n", 
modName
, 
msg
, 
î∫o
, 
	`°ªº‹
(errno));

473 if(
agít
->
îr‹Fn
Ë(*agít->îr‹Fn)◊gít->
magic
,ágít, 
îrm
);

475 
	`Ârötf
(
°dîr
, "%s\n", 
îrm
);

476 
	`fÊush
(
°dîr
);

478 
	}
}

486 * 
	$sÊAŒoc
(
SFLAgít
 *
agít
, 
size_t
 
byãs
)

488 if(
agít
->
ÆlocFn
Ë (*agít->ÆlocFn)◊gít->
magic
,ágít, 
byãs
);

489  
	`SFL_ALLOC
(
byãs
);

490 
	}
}

492 
	$sÊFªe
(
SFLAgít
 *
agít
, *
obj
)

494 if(
agít
->
‰ìFn
Ë(*agít->‰ìFn)◊gít->
magic
,ágít, 
obj
);

495 
	`SFL_FREE
(
obj
);

496 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/sflow_api.h

8 #i‚de‡
SFLOW_API_H


9 
	#SFLOW_API_H
 1

	)

16 
	~<°dio.h
>

17 
	~<°dlib.h
>

18 
	~<uni°d.h
>

19 
	~<î∫o.h
>

20 
	~<°rög.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<¨∑/öë.h
>

24 #ifde‡
SFLOW_DO_SOCKET


25 
	~<sys/sockë.h
>

26 
	~<√töë/ö_sy°m.h
>

27 
	~<√töë/ö.h
>

28 
	~<√töë/ù.h
>

31 
	~"sÊow.h
"

59 
	s_SFLD©aSour˚_ö°™˚
 {

60 
u_öt32_t
 
	mds_˛ass
;

61 
u_öt32_t
 
	mds_ödex
;

62 
u_öt32_t
 
	mds_ö°™˚
;

63 } 
	tSFLD©aSour˚_ö°™˚
;

65 #ifde‡
SFL_USE_32BIT_INDEX


66 
	#SFL_FLOW_SAMPLE_TYPE
 
SFLFlow_ßm∂e_ex∑nded


	)

67 
	#SFL_COUNTERS_SAMPLE_TYPE
 
SFLCou¡îs_ßm∂e_ex∑nded


	)

69 
	#SFL_FLOW_SAMPLE_TYPE
 
SFLFlow_ßm∂e


	)

70 
	#SFL_COUNTERS_SAMPLE_TYPE
 
SFLCou¡îs_ßm∂e


	)

73 
	#SFL_DS_DATASOURCE
(
dsi
Ë(((dsi).
ds_˛ass
 << 24Ë+ (dsi).
ds_ödex
)

	)

76 
	#SFL_DS_INSTANCE
(
dsi
Ë(dsi).
ds_ö°™˚


	)

77 
	#SFL_DS_CLASS
(
dsi
Ë(dsi).
ds_˛ass


	)

78 
	#SFL_DS_INDEX
(
dsi
Ë(dsi).
ds_ödex


	)

79 
	#SFL_DS_SET
(
dsi
,
˛ss
,
ödx
,
ö°
) \

81 (
dsi
).
ds_˛ass
 = (
˛ss
); \

82 (
dsi
).
ds_ödex
 = (
ödx
); \

83 (
dsi
).
ds_ö°™˚
 = (
ö°
); \

84 } 0)

	)

86 
	s_SFLSam∂eCﬁÀ˘‹
 {

87 
u_öt32_t
 
	md©a
[(
SFL_MAX_DATAGRAM_SIZE
 + 
SFL_DATA_PAD
) / (u_int32_t)];

88 
u_öt32_t
 *
	md©≠
;

89 
u_öt32_t
 
	mpkéí
;

90 
u_öt32_t
 
	m∑ckëSeqNo
;

91 
u_öt32_t
 
	mnumSam∂es
;

92 } 
	tSFLSam∂eCﬁÀ˘‹
;

94 
	g_SFLAgít
;

96 
	s_SFLRe˚ivî
 {

97 
_SFLRe˚ivî
 *
	mnxt
;

99 *
	msFlowRcvrOw√r
;

100 
time_t
 
	msFlowRcvrTimeout
;

101 
u_öt32_t
 
	msFlowRcvrMaximumD©agømSize
;

102 
SFLAddªss
 
	msFlowRcvrAddªss
;

103 
u_öt32_t
 
	msFlowRcvrP‹t
;

104 
u_öt32_t
 
	msFlowRcvrD©agømVîsi⁄
;

106 
_SFLAgít
 *
	magít
;

108 
SFLSam∂eCﬁÀ˘‹
 
	mßm∂eCﬁÀ˘‹
;

109 #ifde‡
SFLOW_DO_SOCKET


110 
sockaddr_ö
 
	mª˚ivî4
;

111 
sockaddr_ö6
 
	mª˚ivî6
;

113 } 
	tSFLRe˚ivî
;

115 
	s_SFLSam∂î
 {

117 
_SFLSam∂î
 *
	mnxt
;

119 
_SFLSam∂î
 *
	mhash_nxt
;

121 
SFLD©aSour˚_ö°™˚
 
	mdsi
;

122 
u_öt32_t
 
	msFlowFsRe˚ivî
;

123 
u_öt32_t
 
	msFlowFsPackëSam∂ögR©e
;

124 
u_öt32_t
 
	msFlowFsMaximumHódîSize
;

126 
_SFLAgít
 *
	magít
;

128 
SFLRe˚ivî
 *
	mmyRe˚ivî
;

129 
u_öt32_t
 
	mskù
;

130 
u_öt32_t
 
	mßm∂ePoﬁ
;

131 
u_öt32_t
 
	mÊowSam∂eSeqNo
;

133 
u_öt32_t
 
	mßm∂esThisTick
;

134 
u_öt32_t
 
	mßm∂esLa°Tick
;

135 
u_öt32_t
 
	mbackoffThªshﬁd
;

136 } 
	tSFLSam∂î
;

139 
	g_SFLPﬁÀr
;

141 (*
	tgëCou¡îsFn_t
)(*
	tmagic
,

142 
	t_SFLPﬁÀr
 *
	tßm∂î
,

143 
	tSFL_COUNTERS_SAMPLE_TYPE
 *
	tcs
);

145 
	s_SFLPﬁÀr
 {

147 
_SFLPﬁÀr
 *
nxt
;

149 
SFLD©aSour˚_ö°™˚
 
dsi
;

150 
u_öt32_t
 
sFlowCpRe˚ivî
;

151 
time_t
 
sFlowCpI¡îvÆ
;

153 
_SFLAgít
 *
agít
;

154 *
magic
;

155 
gëCou¡îsFn_t
 
gëCou¡îsFn
;

156 
u_öt32_t
 
bridgeP‹t
;

158 
SFLRe˚ivî
 *
myRe˚ivî
;

159 
time_t
 
cou¡îsCou¡down
;

160 
u_öt32_t
 
cou¡îsSam∂eSeqNo
;

161 } 
	tSFLPﬁÀr
;

163 *(*
	tÆlocFn_t
)(*
	tmagic
,

164 
	t_SFLAgít
 *
	tagít
,

165 
	tsize_t
 
	tbyãs
);

167 (*
	t‰ìFn_t
)(*
	tmagic
,

168 
	t_SFLAgít
 *
	tagít
,

169 *
	tobj
);

171 (*
	tîr‹Fn_t
)(*
	tmagic
,

172 
	t_SFLAgít
 *
	tagít
,

173 *
	tmsg
);

175 (*
	t£ndFn_t
)(*
	tmagic
,

176 
	t_SFLAgít
 *
	tagít
,

177 
	tSFLRe˚ivî
 *
	tª˚ivî
,

178 
	tu_ch¨
 *
	tpkt
,

179 
	tu_öt32_t
 
	tpktLí
);

183 
	#SFL_HASHTABLE_SIZ
 199

	)

185 
	s_SFLAgít
 {

186 
SFLSam∂î
 *
jumpTabÀ
[
SFL_HASHTABLE_SIZ
];

187 
SFLSam∂î
 *
ßm∂îs
;

188 
SFLPﬁÀr
 *
pﬁÀrs
;

189 
SFLRe˚ivî
 *
ª˚ivîs
;

190 
time_t
 
boŸTime
;

191 
time_t
 
now
;

192 
SFLAddªss
 
myIP
;

193 
u_öt32_t
 
subId
;

194 *
magic
;

195 
ÆlocFn_t
 
ÆlocFn
;

196 
‰ìFn_t
 
‰ìFn
;

197 
îr‹Fn_t
 
îr‹Fn
;

198 
£ndFn_t
 
£ndFn
;

199 #ifde‡
SFLOW_DO_SOCKET


200 
ª˚ivîSockë4
;

201 
ª˚ivîSockë6
;

203 } 
	tSFLAgít
;

206 
	`sÊ_agít_öô
(
SFLAgít
 *
agít
,

207 
SFLAddªss
 *
myIP
,

208 
u_öt32_t
 
subId
,

209 
time_t
 
boŸTime
,

210 
time_t
 
now
,

211 *
magic
,

212 
ÆlocFn_t
 
ÆlocFn
,

213 
‰ìFn_t
 
‰ìFn
,

214 
îr‹Fn_t
 
îr‹Fn
,

215 
£ndFn_t
 
£ndFn
);

218 
SFLSam∂î
 *
	`sÊ_agít_addSam∂î
(
SFLAgít
 *
agít
, 
SFLD©aSour˚_ö°™˚
 *
pdsi
);

221 
SFLPﬁÀr
 *
	`sÊ_agít_addPﬁÀr
(
SFLAgít
 *
agít
,

222 
SFLD©aSour˚_ö°™˚
 *
pdsi
,

223 *
magic
,

224 
gëCou¡îsFn_t
 
gëCou¡îsFn
);

227 
SFLRe˚ivî
 *
	`sÊ_agít_addRe˚ivî
(
SFLAgít
 *
agít
);

230 
	`sÊ_agít_ªmoveSam∂î
(
SFLAgít
 *
agít
, 
SFLD©aSour˚_ö°™˚
 *
pdsi
);

233 
	`sÊ_agít_ªmovePﬁÀr
(
SFLAgít
 *
agít
, 
SFLD©aSour˚_ö°™˚
 *
pdsi
);

239 
SFLSam∂î
 *
	`sÊ_agít_gëSam∂î
(
SFLAgít
 *
agít
, 
SFLD©aSour˚_ö°™˚
 *
pdsi
);

240 
SFLSam∂î
 *
	`sÊ_agít_gëNextSam∂î
(
SFLAgít
 *
agít
, 
SFLD©aSour˚_ö°™˚
 *
pdsi
);

241 
SFLPﬁÀr
 *
	`sÊ_agít_gëPﬁÀr
(
SFLAgít
 *
agít
, 
SFLD©aSour˚_ö°™˚
 *
pdsi
);

242 
SFLPﬁÀr
 *
	`sÊ_agít_gëNextPﬁÀr
(
SFLAgít
 *
agít
, 
SFLD©aSour˚_ö°™˚
 *
pdsi
);

243 
SFLRe˚ivî
 *
	`sÊ_agít_gëRe˚ivî
(
SFLAgít
 *
agít
, 
u_öt32_t
 
ª˚ivîIndex
);

244 
SFLRe˚ivî
 *
	`sÊ_agít_gëNextRe˚ivî
(
SFLAgít
 *
agít
, 
u_öt32_t
 
ª˚ivîIndex
);

247 
SFLSam∂î
 *
	`sÊ_agít_gëSam∂îByIfIndex
(
SFLAgít
 *
agít
, 
u_öt32_t
 
ifIndex
);

252 * 
	`sÊ_ª˚ivî_gë_sFlowRcvrOw√r
(
SFLRe˚ivî
 *
ª˚ivî
);

253 
	`sÊ_ª˚ivî_£t_sFlowRcvrOw√r
(
SFLRe˚ivî
 *
ª˚ivî
, *
sFlowRcvrOw√r
);

254 
time_t
 
	`sÊ_ª˚ivî_gë_sFlowRcvrTimeout
(
SFLRe˚ivî
 *
ª˚ivî
);

255 
	`sÊ_ª˚ivî_£t_sFlowRcvrTimeout
(
SFLRe˚ivî
 *
ª˚ivî
, 
time_t
 
sFlowRcvrTimeout
);

256 
u_öt32_t
 
	`sÊ_ª˚ivî_gë_sFlowRcvrMaximumD©agømSize
(
SFLRe˚ivî
 *
ª˚ivî
);

257 
	`sÊ_ª˚ivî_£t_sFlowRcvrMaximumD©agømSize
(
SFLRe˚ivî
 *
ª˚ivî
, 
u_öt32_t
 
sFlowRcvrMaximumD©agømSize
);

258 
SFLAddªss
 *
	`sÊ_ª˚ivî_gë_sFlowRcvrAddªss
(
SFLRe˚ivî
 *
ª˚ivî
);

259 
	`sÊ_ª˚ivî_£t_sFlowRcvrAddªss
(
SFLRe˚ivî
 *
ª˚ivî
, 
SFLAddªss
 *
sFlowRcvrAddªss
);

260 
u_öt32_t
 
	`sÊ_ª˚ivî_gë_sFlowRcvrP‹t
(
SFLRe˚ivî
 *
ª˚ivî
);

261 
	`sÊ_ª˚ivî_£t_sFlowRcvrP‹t
(
SFLRe˚ivî
 *
ª˚ivî
, 
u_öt32_t
 
sFlowRcvrP‹t
);

263 
u_öt32_t
 
	`sÊ_ßm∂î_gë_sFlowFsRe˚ivî
(
SFLSam∂î
 *
ßm∂î
);

264 
	`sÊ_ßm∂î_£t_sFlowFsRe˚ivî
(
SFLSam∂î
 *
ßm∂î
, 
u_öt32_t
 
sFlowFsRe˚ivî
);

265 
u_öt32_t
 
	`sÊ_ßm∂î_gë_sFlowFsPackëSam∂ögR©e
(
SFLSam∂î
 *
ßm∂î
);

266 
	`sÊ_ßm∂î_£t_sFlowFsPackëSam∂ögR©e
(
SFLSam∂î
 *
ßm∂î
, 
u_öt32_t
 
sFlowFsPackëSam∂ögR©e
);

267 
u_öt32_t
 
	`sÊ_ßm∂î_gë_sFlowFsMaximumHódîSize
(
SFLSam∂î
 *
ßm∂î
);

268 
	`sÊ_ßm∂î_£t_sFlowFsMaximumHódîSize
(
SFLSam∂î
 *
ßm∂î
, 
u_öt32_t
 
sFlowFsMaximumHódîSize
);

269 
u_öt32_t
 
	`sÊ_ßm∂î_gë_ßm∂esLa°Tick
(
SFLSam∂î
 *
ßm∂î
);

271 
u_öt32_t
 
	`sÊ_pﬁÀr_gë_sFlowCpRe˚ivî
(
SFLPﬁÀr
 *
pﬁÀr
);

272 
	`sÊ_pﬁÀr_£t_sFlowCpRe˚ivî
(
SFLPﬁÀr
 *
pﬁÀr
, 
u_öt32_t
 
sFlowCpRe˚ivî
);

273 
u_öt32_t
 
	`sÊ_pﬁÀr_gë_sFlowCpI¡îvÆ
(
SFLPﬁÀr
 *
pﬁÀr
);

274 
	`sÊ_pﬁÀr_£t_sFlowCpI¡îvÆ
(
SFLPﬁÀr
 *
pﬁÀr
, 
u_öt32_t
 
sFlowCpI¡îvÆ
);

277 
	`sÊ_agít_£t_agítAddªss
(
SFLAgít
 *
agít
, 
SFLAddªss
 *
addr
);

278 
	`sÊ_agít_£t_agítSubId
(
SFLAgít
 *
agít
, 
u_öt32_t
 
subId
);

282 
	`sÊ_pﬁÀr_£t_bridgeP‹t
(
SFLPﬁÀr
 *
pﬁÀr
, 
u_öt32_t
 
p‹t_no
);

283 
u_öt32_t
 
	`sÊ_pﬁÀr_gë_bridgeP‹t
(
SFLPﬁÀr
 *
pﬁÀr
);

287 
	`sÊ_ßm∂î_ª£tFlowSeqNo
(
SFLSam∂î
 *
ßm∂î
);

291 
	`sÊ_pﬁÀr_ª£tCou¡îsSeqNo
(
SFLPﬁÀr
 *
pﬁÀr
);

293 #ifde‡
SFLOW_SOFTWARE_SAMLING


296 
	`sÊ_ßm∂î_èkeSam∂e
(
SFLSam∂î
 *
ßm∂î
);

302 
	`sÊ_ßm∂î_£t_backoffThªshﬁd
(
SFLSam∂î
 *
ßm∂î
, 
u_öt32_t
 
ßm∂esPîSec⁄d
);

303 
u_öt32_t
 
	`sÊ_ßm∂î_gë_backoffThªshﬁd
(
SFLSam∂î
 *
ßm∂î
);

306 
	`sÊ_agít_tick
(
SFLAgít
 *
agít
, 
time_t
 
now
);

309 
	`sÊ_ßm∂î_wrôeFlowSam∂e
(
SFLSam∂î
 *
ßm∂î
, 
SFL_FLOW_SAMPLE_TYPE
 *
fs
);

312 
	`sÊ_pﬁÀr_wrôeCou¡îsSam∂e
(
SFLPﬁÀr
 *
pﬁÀr
, 
SFL_COUNTERS_SAMPLE_TYPE
 *
cs
);

315 
	`sÊ_agít_ªÀa£
(
SFLAgít
 *
agít
);

320 
	`sÊ_ª˚ivî_öô
(
SFLRe˚ivî
 *
ª˚ivî
, 
SFLAgít
 *
agít
);

321 
	`sÊ_ßm∂î_öô
(
SFLSam∂î
 *
ßm∂î
, 
SFLAgít
 *
agít
, 
SFLD©aSour˚_ö°™˚
 *
pdsi
);

322 
	`sÊ_pﬁÀr_öô
(
SFLPﬁÀr
 *
pﬁÀr
, 
SFLAgít
 *
agít
, 
SFLD©aSour˚_ö°™˚
 *
pdsi
, *
magic
, 
gëCou¡îsFn_t
 
gëCou¡îsFn
);

325 
	`sÊ_ª˚ivî_tick
(
SFLRe˚ivî
 *
ª˚ivî
, 
time_t
 
now
);

326 
	`sÊ_pﬁÀr_tick
(
SFLPﬁÀr
 *
pﬁÀr
, 
time_t
 
now
);

327 
	`sÊ_ßm∂î_tick
(
SFLSam∂î
 *
ßm∂î
, 
time_t
 
now
);

329 
	`sÊ_ª˚ivî_wrôeFlowSam∂e
(
SFLRe˚ivî
 *
ª˚ivî
, 
SFL_FLOW_SAMPLE_TYPE
 *
fs
);

330 
	`sÊ_ª˚ivî_wrôeCou¡îsSam∂e
(
SFLRe˚ivî
 *
ª˚ivî
, 
SFL_COUNTERS_SAMPLE_TYPE
 *
cs
);

332 
	`sÊ_agít_ª£tRe˚ivî
(
SFLAgít
 *
agít
, 
SFLRe˚ivî
 *
ª˚ivî
);

334 
	`sÊ_agít_îr‹
(
SFLAgít
 *
agít
, *
modName
, *
msg
);

335 
	`sÊ_agít_sysEº‹
(
SFLAgít
 *
agít
, *
modName
, *
msg
);

337 
u_öt32_t
 
	`sÊ_ª˚ivî_ßm∂ePackësSít
(
SFLRe˚ivî
 *
ª˚ivî
);

339 
	#SFL_ALLOC
 
mÆloc


	)

340 
	#SFL_FREE
 
‰ì


	)

	@/home/lsch/mytest/openvswitch-1.9.0/lib/sflow_poller.c

8 
	~"sÊow_≠i.h
"

15 
	$sÊ_pﬁÀr_öô
(
SFLPﬁÀr
 *
pﬁÀr
,

16 
SFLAgít
 *
agít
,

17 
SFLD©aSour˚_ö°™˚
 *
pdsi
,

18 *
magic
,

19 
gëCou¡îsFn_t
 
gëCou¡îsFn
)

22 
SFLD©aSour˚_ö°™˚
 
dsi
 = *
pdsi
;

26 
SFLPﬁÀr
 *
nxtPå
 = 
pﬁÀr
->
nxt
;

29 
	`mem£t
(
pﬁÀr
, 0, (*poller));

32 
pﬁÀr
->
nxt
 = 
nxtPå
;

35 
pﬁÀr
->
agít
 =ágent;

36 
pﬁÀr
->
dsi
 = dsi;

37 
pﬁÀr
->
magic
 = magic;

38 
pﬁÀr
->
gëCou¡îsFn
 = getCountersFn;

39 
	}
}

46 
	$ª£t
(
SFLPﬁÀr
 *
pﬁÀr
)

48 
SFLD©aSour˚_ö°™˚
 
dsi
 = 
pﬁÀr
->dsi;

49 
	`sÊ_pﬁÀr_öô
(
pﬁÀr
,ÖﬁÀr->
agít
, &
dsi
,ÖﬁÀr->
magic
,ÖﬁÀr->
gëCou¡îsFn
);

50 
	}
}

56 
u_öt32_t
 
	$sÊ_pﬁÀr_gë_sFlowCpRe˚ivî
(
SFLPﬁÀr
 *
pﬁÀr
) {

57  
pﬁÀr
->
sFlowCpRe˚ivî
;

58 
	}
}

60 
	$sÊ_pﬁÀr_£t_sFlowCpRe˚ivî
(
SFLPﬁÀr
 *
pﬁÀr
, 
u_öt32_t
 
sFlowCpRe˚ivî
) {

61 
pﬁÀr
->
sFlowCpRe˚ivî
 = sFlowCpReceiver;

62 if(
sFlowCpRe˚ivî
 =0Ë
	`ª£t
(
pﬁÀr
);

65 
pﬁÀr
->
myRe˚ivî
 = 
	`sÊ_agít_gëRe˚ivî
’ﬁÀr->
agít
,ÖﬁÀr->
sFlowCpRe˚ivî
);

67 
	}
}

69 
u_öt32_t
 
	$sÊ_pﬁÀr_gë_sFlowCpI¡îvÆ
(
SFLPﬁÀr
 *
pﬁÀr
) {

70  
pﬁÀr
->
sFlowCpI¡îvÆ
;

71 
	}
}

73 
	$sÊ_pﬁÀr_£t_sFlowCpI¡îvÆ
(
SFLPﬁÀr
 *
pﬁÀr
, 
u_öt32_t
 
sFlowCpI¡îvÆ
) {

74 
pﬁÀr
->
sFlowCpI¡îvÆ
 = sFlowCpInterval;

75 if(
sFlowCpI¡îvÆ
) {

91 
pﬁÀr
->
cou¡îsCou¡down
 = 1 + (
	`øndom
(Ë% 
sFlowCpI¡îvÆ
);

96 
pﬁÀr
->
cou¡îsCou¡down
 = 0;

98 
	}
}

107 
	$sÊ_pﬁÀr_£t_bridgeP‹t
(
SFLPﬁÀr
 *
pﬁÀr
, 
u_öt32_t
 
p‹t_no
) {

108 
pﬁÀr
->
bridgeP‹t
 = 
p‹t_no
;

109 
	}
}

111 
u_öt32_t
 
	$sÊ_pﬁÀr_gë_bridgeP‹t
(
SFLPﬁÀr
 *
pﬁÀr
) {

112  
pﬁÀr
->
bridgeP‹t
;

113 
	}
}

121 
	$sÊ_pﬁÀr_ª£tCou¡îsSeqNo
(
SFLPﬁÀr
 *
pﬁÀr
Ë{ÖﬁÀr->
cou¡îsSam∂eSeqNo
 = 0; 
	}
}

128 
	$sÊ_pﬁÀr_tick
(
SFLPﬁÀr
 *
pﬁÀr
, 
time_t
 
now
)

130 if(
pﬁÀr
->
cou¡îsCou¡down
 == 0) ;

131 if(
pﬁÀr
->
sFlowCpRe˚ivî
 == 0) ;

133 if(--
pﬁÀr
->
cou¡îsCou¡down
 == 0) {

134 if(
pﬁÀr
->
gëCou¡îsFn
 !
NULL
) {

136 
SFL_COUNTERS_SAMPLE_TYPE
 
cs
;

137 
	`mem£t
(&
cs
, 0, (cs));

138 
pﬁÀr
->
	`gëCou¡îsFn
’ﬁÀr->
magic
,ÖﬁÀr, &
cs
);

143 
pﬁÀr
->
cou¡îsCou¡down
 =ÖﬁÀr->
sFlowCpI¡îvÆ
;

145 
	}
}

152 
	$sÊ_pﬁÀr_wrôeCou¡îsSam∂e
(
SFLPﬁÀr
 *
pﬁÀr
, 
SFL_COUNTERS_SAMPLE_TYPE
 *
cs
)

155 
cs
->
£quí˚_numbî
 = ++
pﬁÀr
->
cou¡îsSam∂eSeqNo
;

156 #ifde‡
SFL_USE_32BIT_INDEX


157 
cs
->
ds_˛ass
 = 
	`SFL_DS_CLASS
(
pﬁÀr
->
dsi
);

158 
cs
->
ds_ödex
 = 
	`SFL_DS_INDEX
(
pﬁÀr
->
dsi
);

160 
cs
->
sour˚_id
 = 
	`SFL_DS_DATASOURCE
(
pﬁÀr
->
dsi
);

163 if(
pﬁÀr
->
myRe˚ivî
Ë
	`sÊ_ª˚ivî_wrôeCou¡îsSam∂e
’ﬁÀr->myRe˚ivî, 
cs
);

164 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/sflow_receiver.c

8 #i‚de‡
__CHECKER__


10 
	~<as£π.h
>

11 
	~"sÊow_≠i.h
"

13 
ª£tSam∂eCﬁÀ˘‹
(
SFLRe˚ivî
 *
ª˚ivî
);

14 
£ndSam∂e
(
SFLRe˚ivî
 *
ª˚ivî
);

15 
sÊEº‹
(
SFLRe˚ivî
 *
ª˚ivî
, *
îrm
);

16 
ölöe
 
putNë32
(
SFLRe˚ivî
 *
ª˚ivî
, 
u_öt32_t
 
vÆ
);

17 
ölöe
 
putAddªss
(
SFLRe˚ivî
 *
ª˚ivî
, 
SFLAddªss
 *
addr
);

18 #ifde‡
SFLOW_DO_SOCKET


19 
öôSockë
(
SFLRe˚ivî
 *
ª˚ivî
);

27 
	$sÊ_ª˚ivî_öô
(
SFLRe˚ivî
 *
ª˚ivî
, 
SFLAgít
 *
agít
)

30 
	`mem£t
(
ª˚ivî
, 0, (*receiver));

33 
ª˚ivî
->
agít
 =ágent;

36 
ª˚ivî
->
sFlowRcvrMaximumD©agømSize
 = 
SFL_DEFAULT_DATAGRAM_SIZE
;

37 
ª˚ivî
->
sFlowRcvrP‹t
 = 
SFL_DEFAULT_COLLECTOR_PORT
;

39 #ifde‡
SFLOW_DO_SOCKET


41 
	`öôSockë
(
ª˚ivî
);

45 
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
d©≠
 =Ñe˚ivî->ßm∂eCﬁÀ˘‹.
d©a
;

46 
	`putNë32
(
ª˚ivî
, 
SFLDATAGRAM_VERSION5
);

47 
	`putAddªss
(
ª˚ivî
, &
agít
->
myIP
);

48 
	`putNë32
(
ª˚ivî
, 
agít
->
subId
);

51 
	`ª£tSam∂eCﬁÀ˘‹
(
ª˚ivî
);

52 
	}
}

61 
	$ª£t
(
SFLRe˚ivî
 *
ª˚ivî
) {

63 
	`sÊ_agít_ª£tRe˚ivî
(
ª˚ivî
->
agít
,Ñeceiver);

65 
	`sÊ_ª˚ivî_öô
(
ª˚ivî
,Ñe˚ivî->
agít
);

66 
	}
}

68 #ifde‡
SFLOW_DO_SOCKET


74 
	$öôSockë
(
SFLRe˚ivî
 *
ª˚ivî
) {

75 if(
ª˚ivî
->
sFlowRcvrAddªss
.
ty≥
 =
SFLADDRESSTYPE_IP_V6
) {

76 
sockaddr_ö6
 *
ß6
 = &
ª˚ivî
->
ª˚ivî6
;

77 
ß6
->
sö6_p‹t
 = 
	`ht⁄s
((
u_öt16_t
)
ª˚ivî
->
sFlowRcvrP‹t
);

78 
ß6
->
sö6_Ámûy
 = 
AF_INET6
;

79 
ß6
->
sö6_addr
 = 
ª˚ivî
->
sFlowRcvrAddªss
.
addªss
.
ù_v6
;

82 
sockaddr_ö
 *
ß4
 = &
ª˚ivî
->
ª˚ivî4
;

83 
ß4
->
sö_p‹t
 = 
	`ht⁄s
((
u_öt16_t
)
ª˚ivî
->
sFlowRcvrP‹t
);

84 
ß4
->
sö_Ámûy
 = 
AF_INET
;

85 
ß4
->
sö_addr
 = 
ª˚ivî
->
sFlowRcvrAddªss
.
addªss
.
ù_v4
;

87 
	}
}

95 * 
	$sÊ_ª˚ivî_gë_sFlowRcvrOw√r
(
SFLRe˚ivî
 *
ª˚ivî
) {

96  
ª˚ivî
->
sFlowRcvrOw√r
;

97 
	}
}

98 
	$sÊ_ª˚ivî_£t_sFlowRcvrOw√r
(
SFLRe˚ivî
 *
ª˚ivî
, *
sFlowRcvrOw√r
) {

99 
ª˚ivî
->
sFlowRcvrOw√r
 = sFlowRcvrOwner;

100 if(
sFlowRcvrOw√r
 =
NULL
 || sFlowRcvrOwner[0] == '\0') {

102 
	`ª£t
(
ª˚ivî
);

104 
	}
}

105 
time_t
 
	$sÊ_ª˚ivî_gë_sFlowRcvrTimeout
(
SFLRe˚ivî
 *
ª˚ivî
) {

106  
ª˚ivî
->
sFlowRcvrTimeout
;

107 
	}
}

108 
	$sÊ_ª˚ivî_£t_sFlowRcvrTimeout
(
SFLRe˚ivî
 *
ª˚ivî
, 
time_t
 
sFlowRcvrTimeout
) {

109 
ª˚ivî
->
sFlowRcvrTimeout
 =sFlowRcvrTimeout;

110 
	}
}

111 
u_öt32_t
 
	$sÊ_ª˚ivî_gë_sFlowRcvrMaximumD©agømSize
(
SFLRe˚ivî
 *
ª˚ivî
) {

112  
ª˚ivî
->
sFlowRcvrMaximumD©agømSize
;

113 
	}
}

114 
	$sÊ_ª˚ivî_£t_sFlowRcvrMaximumD©agømSize
(
SFLRe˚ivî
 *
ª˚ivî
, 
u_öt32_t
 
sFlowRcvrMaximumD©agømSize
) {

115 
u_öt32_t
 
mdz
 = 
sFlowRcvrMaximumD©agømSize
;

116 if(
mdz
 < 
SFL_MIN_DATAGRAM_SIZE
) mdz = SFL_MIN_DATAGRAM_SIZE;

117 
ª˚ivî
->
sFlowRcvrMaximumD©agømSize
 = 
mdz
;

118 
	}
}

119 
SFLAddªss
 *
	$sÊ_ª˚ivî_gë_sFlowRcvrAddªss
(
SFLRe˚ivî
 *
ª˚ivî
) {

120  &
ª˚ivî
->
sFlowRcvrAddªss
;

121 
	}
}

122 
	$sÊ_ª˚ivî_£t_sFlowRcvrAddªss
(
SFLRe˚ivî
 *
ª˚ivî
, 
SFLAddªss
 *
sFlowRcvrAddªss
) {

123 if(
sFlowRcvrAddªss
Ë
ª˚ivî
->sFlowRcvrAddress = *sFlowRcvrAddress;

124 #ifde‡
SFLOW_DO_SOCKET


125 
	`öôSockë
(
ª˚ivî
);

127 
	}
}

128 
u_öt32_t
 
	$sÊ_ª˚ivî_gë_sFlowRcvrP‹t
(
SFLRe˚ivî
 *
ª˚ivî
) {

129  
ª˚ivî
->
sFlowRcvrP‹t
;

130 
	}
}

131 
	$sÊ_ª˚ivî_£t_sFlowRcvrP‹t
(
SFLRe˚ivî
 *
ª˚ivî
, 
u_öt32_t
 
sFlowRcvrP‹t
) {

132 
ª˚ivî
->
sFlowRcvrP‹t
 = sFlowRcvrPort;

134 #ifde‡
SFLOW_DO_SOCKET


135 
	`öôSockë
(
ª˚ivî
);

137 
	}
}

144 
	$sÊ_ª˚ivî_tick
(
SFLRe˚ivî
 *
ª˚ivî
, 
time_t
 
now
)

147 if(
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
numSam∂es
 > 0Ë
	`£ndSam∂e
(receiver);

149 if(
ª˚ivî
->
sFlowRcvrTimeout
 && (
u_öt32_t
)receiver->sFlowRcvrTimeout != 0xFFFFFFFF) {

151 if(--
ª˚ivî
->
sFlowRcvrTimeout
 =0Ë
	`ª£t
(receiver);

153 
	}
}

160 
ölöe
 
	$put32
(
SFLRe˚ivî
 *
ª˚ivî
, 
u_öt32_t
 
vÆ
)

162 *
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
d©≠
++ = 
vÆ
;

163 
	}
}

165 
ölöe
 
	$putNë32
(
SFLRe˚ivî
 *
ª˚ivî
, 
u_öt32_t
 
vÆ
)

167 *
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
d©≠
++ = 
	`ht⁄l
(
vÆ
);

168 
	}
}

170 
ölöe
 
	$putNë32_run
(
SFLRe˚ivî
 *
ª˚ivî
, *
obj
, 
size_t
 
quads
)

172 
u_öt32_t
 *
‰om
 = (u_öt32_à*)
obj
;

173 
quads
--Ë
	`putNë32
(
ª˚ivî
, *
‰om
++);

174 
	}
}

176 
ölöe
 
	$putNë64
(
SFLRe˚ivî
 *
ª˚ivî
, 
u_öt64_t
 
vÆ64
)

178 
u_öt32_t
 *
fú°QuadPå
 = 
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
d©≠
;

180 
	`mem˝y
((
u_ch¨
 *)
fú°QuadPå
, &
vÆ64
, 8);

181 if(
	`ht⁄l
(1) != 1) {

183 
u_öt32_t
 
tmp
 = *
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
d©≠
++;

184 *
fú°QuadPå
 = 
	`ht⁄l
(*
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
d©≠
);

185 *
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
d©≠
++ = 
	`ht⁄l
(
tmp
);

187 
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
d©≠
 += 2;

188 
	}
}

190 
ölöe
 
	$put128
(
SFLRe˚ivî
 *
ª˚ivî
, 
u_ch¨
 *
vÆ
)

192 
	`mem˝y
(
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
d©≠
, 
vÆ
, 16);

193 
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
d©≠
 += 4;

194 
	}
}

196 
ölöe
 
	$putSåög
(
SFLRe˚ivî
 *
ª˚ivî
, 
SFLSåög
 *
s
)

198 
	`putNë32
(
ª˚ivî
, 
s
->
Àn
);

199 
	`mem˝y
(
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
d©≠
, 
s
->
°r
, s->
Àn
);

200 
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
d©≠
 +(
s
->
Àn
 + 3) / 4;

201 
	}
}

203 
ölöe
 
u_öt32_t
 
	$°rögEncodögLígth
(
SFLSåög
 *
s
) {

205  4 + (((
s
->
Àn
 + 3) / 4) * 4);

206 
	}
}

208 
ölöe
 
	$putAddªss
(
SFLRe˚ivî
 *
ª˚ivî
, 
SFLAddªss
 *
addr
)

211 if(
addr
->
ty≥
 == 0) {

212 
	`putNë32
(
ª˚ivî
, 
SFLADDRESSTYPE_IP_V4
);

213 
	`put32
(
ª˚ivî
, 0);

216 
	`putNë32
(
ª˚ivî
, 
addr
->
ty≥
);

217 if(
addr
->
ty≥
 =
SFLADDRESSTYPE_IP_V4
Ë
	`put32
(
ª˚ivî
,áddr->
addªss
.
ù_v4
.addr);

218 
	`put128
(
ª˚ivî
, 
addr
->
addªss
.
ù_v6
.addr);

220 
	}
}

222 
ölöe
 
u_öt32_t
 
	$addªssEncodögLígth
(
SFLAddªss
 *
addr
) {

223  (
addr
->
ty≥
 =
SFLADDRESSTYPE_IP_V6
) ? 20 : 8;

224 
	}
}

226 
ölöe
 
	$putMACAddªss
(
SFLRe˚ivî
 *
ª˚ivî
, 
u_öt8_t
 *
mac
)

228 
	`mem˝y
(
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
d©≠
, 
mac
, 6);

229 
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
d©≠
 += 2;

230 
	}
}

232 
ölöe
 
	$putSwôch
(
SFLRe˚ivî
 *
ª˚ivî
, 
SFLExãnded_swôch
 *
sw
)

234 
	`putNë32
(
ª˚ivî
, 
sw
->
§c_vœn
);

235 
	`putNë32
(
ª˚ivî
, 
sw
->
§c_¥i‹ôy
);

236 
	`putNë32
(
ª˚ivî
, 
sw
->
d°_vœn
);

237 
	`putNë32
(
ª˚ivî
, 
sw
->
d°_¥i‹ôy
);

238 
	}
}

240 
ölöe
 
	$putRouãr
(
SFLRe˚ivî
 *
ª˚ivî
, 
SFLExãnded_rouãr
 *
rouãr
)

242 
	`putAddªss
(
ª˚ivî
, &
rouãr
->
√xth›
);

243 
	`putNë32
(
ª˚ivî
, 
rouãr
->
§c_mask
);

244 
	`putNë32
(
ª˚ivî
, 
rouãr
->
d°_mask
);

245 
	}
}

247 
ölöe
 
u_öt32_t
 
	$rouãrEncodögLígth
(
SFLExãnded_rouãr
 *
rouãr
) {

248  
	`addªssEncodögLígth
(&
rouãr
->
√xth›
) + 8;

249 
	}
}

251 
ölöe
 
	$putG©eway
(
SFLRe˚ivî
 *
ª˚ivî
, 
SFLExãnded_g©eway
 *
gw
)

253 
	`putAddªss
(
ª˚ivî
, &
gw
->
√xth›
);

254 
	`putNë32
(
ª˚ivî
, 
gw
->
as
);

255 
	`putNë32
(
ª˚ivî
, 
gw
->
§c_as
);

256 
	`putNë32
(
ª˚ivî
, 
gw
->
§c_≥î_as
);

257 
	`putNë32
(
ª˚ivî
, 
gw
->
d°_as_∑th_£gmíts
);

259 
u_öt32_t
 
£g
 = 0;

260 ; 
£g
 < 
gw
->
d°_as_∑th_£gmíts
; seg++) {

261 
	`putNë32
(
ª˚ivî
, 
gw
->
d°_as_∑th
[
£g
].
ty≥
);

262 
	`putNë32
(
ª˚ivî
, 
gw
->
d°_as_∑th
[
£g
].
Àngth
);

263 
	`putNë32_run
(
ª˚ivî
, 
gw
->
d°_as_∑th
[
£g
].
as
.
£q
, gw->d°_as_∑th[£g].
Àngth
);

266 
	`putNë32
(
ª˚ivî
, 
gw
->
communôõs_Àngth
);

267 
	`putNë32_run
(
ª˚ivî
, 
gw
->
communôõs
, gw->
communôõs_Àngth
);

268 
	`putNë32
(
ª˚ivî
, 
gw
->
loˇÕªf
);

269 
	}
}

271 
ölöe
 
u_öt32_t
 
	$g©ewayEncodögLígth
(
SFLExãnded_g©eway
 *
gw
) {

272 
u_öt32_t
 
ñemSiz
 = 
	`addªssEncodögLígth
(&
gw
->
√xth›
);

273 
u_öt32_t
 
£g
 = 0;

274 
ñemSiz
 += 16;

275 ; 
£g
 < 
gw
->
d°_as_∑th_£gmíts
; seg++) {

276 
ñemSiz
 += 8;

277 
ñemSiz
 +4 * 
gw
->
d°_as_∑th
[
£g
].
Àngth
;

279 
ñemSiz
 += 4;

280 
ñemSiz
 +4 * 
gw
->
communôõs_Àngth
;

281 
ñemSiz
 += 4;

282  
ñemSiz
;

283 
	}
}

285 
ölöe
 
	$putU£r
(
SFLRe˚ivî
 *
ª˚ivî
, 
SFLExãnded_u£r
 *
u£r
)

287 
	`putNë32
(
ª˚ivî
, 
u£r
->
§c_ch¨£t
);

288 
	`putSåög
(
ª˚ivî
, &
u£r
->
§c_u£r
);

289 
	`putNë32
(
ª˚ivî
, 
u£r
->
d°_ch¨£t
);

290 
	`putSåög
(
ª˚ivî
, &
u£r
->
d°_u£r
);

291 
	}
}

293 
ölöe
 
u_öt32_t
 
	$u£rEncodögLígth
(
SFLExãnded_u£r
 *
u£r
) {

295 + 
	`°rögEncodögLígth
(&
u£r
->
§c_u£r
)

297 + 
	`°rögEncodögLígth
(&
u£r
->
d°_u£r
);

298 
	}
}

300 
ölöe
 
	$putUæ
(
SFLRe˚ivî
 *
ª˚ivî
, 
SFLExãnded_uæ
 *
uæ
)

302 
	`putNë32
(
ª˚ivî
, 
uæ
->
dúe˘i⁄
);

303 
	`putSåög
(
ª˚ivî
, &
uæ
->url);

304 
	`putSåög
(
ª˚ivî
, &
uæ
->
ho°
);

305 
	}
}

307 
ölöe
 
u_öt32_t
 
	$uæEncodögLígth
(
SFLExãnded_uæ
 *
uæ
) {

309 + 
	`°rögEncodögLígth
(&
uæ
->url)

310 + 
	`°rögEncodögLígth
(&
uæ
->
ho°
);

311 
	}
}

313 
ölöe
 
	$putLabñSèck
(
SFLRe˚ivî
 *
ª˚ivî
, 
SFLLabñSèck
 *
œbñSèck
)

315 
	`putNë32
(
ª˚ivî
, 
œbñSèck
->
dïth
);

316 
	`putNë32_run
(
ª˚ivî
, 
œbñSèck
->
°ack
,ÜabñSèck->
dïth
);

317 
	}
}

319 
ölöe
 
u_öt32_t
 
	$œbñSèckEncodögLígth
(
SFLLabñSèck
 *
œbñSèck
) {

320  4 + (4 * 
œbñSèck
->
dïth
);

321 
	}
}

323 
ölöe
 
	$putM∂s
(
SFLRe˚ivî
 *
ª˚ivî
, 
SFLExãnded_m∂s
 *
m∂s
)

325 
	`putAddªss
(
ª˚ivî
, &
m∂s
->
√xtH›
);

326 
	`putLabñSèck
(
ª˚ivî
, &
m∂s
->
ö_°ack
);

327 
	`putLabñSèck
(
ª˚ivî
, &
m∂s
->
out_°ack
);

328 
	}
}

330 
ölöe
 
u_öt32_t
 
	$m∂sEncodögLígth
(
SFLExãnded_m∂s
 *
m∂s
) {

331  
	`addªssEncodögLígth
(&
m∂s
->
√xtH›
)

332 + 
	`œbñSèckEncodögLígth
(&
m∂s
->
ö_°ack
)

333 + 
	`œbñSèckEncodögLígth
(&
m∂s
->
out_°ack
);

334 
	}
}

336 
ölöe
 
	$putN©
(
SFLRe˚ivî
 *
ª˚ivî
, 
SFLExãnded_«t
 *
«t
)

338 
	`putAddªss
(
ª˚ivî
, &
«t
->
§c
);

339 
	`putAddªss
(
ª˚ivî
, &
«t
->
d°
);

340 
	}
}

342 
ölöe
 
u_öt32_t
 
	$«tEncodögLígth
(
SFLExãnded_«t
 *
«t
) {

343  
	`addªssEncodögLígth
(&
«t
->
§c
)

344 + 
	`addªssEncodögLígth
(&
«t
->
d°
);

345 
	}
}

347 
ölöe
 
	$putM∂sTu¬ñ
(
SFLRe˚ivî
 *
ª˚ivî
, 
SFLExãnded_m∂s_tu¬ñ
 *
tu¬ñ
)

349 
	`putSåög
(
ª˚ivî
, &
tu¬ñ
->
tu¬ñ_l•_«me
);

350 
	`putNë32
(
ª˚ivî
, 
tu¬ñ
->
tu¬ñ_id
);

351 
	`putNë32
(
ª˚ivî
, 
tu¬ñ
->
tu¬ñ_cos
);

352 
	}
}

354 
ölöe
 
u_öt32_t
 
	$m∂sTu¬ñEncodögLígth
(
SFLExãnded_m∂s_tu¬ñ
 *
tu¬ñ
) {

355  
	`°rögEncodögLígth
(&
tu¬ñ
->
tu¬ñ_l•_«me
) + 8;

356 
	}
}

358 
ölöe
 
	$putM∂sVc
(
SFLRe˚ivî
 *
ª˚ivî
, 
SFLExãnded_m∂s_vc
 *
vc
)

360 
	`putSåög
(
ª˚ivî
, &
vc
->
vc_ö°™˚_«me
);

361 
	`putNë32
(
ª˚ivî
, 
vc
->
vŒ_vc_id
);

362 
	`putNë32
(
ª˚ivî
, 
vc
->
vc_œbñ_cos
);

363 
	}
}

365 
ölöe
 
u_öt32_t
 
	$m∂sVcEncodögLígth
(
SFLExãnded_m∂s_vc
 *
vc
) {

366  
	`°rögEncodögLígth
–&
vc
->
vc_ö°™˚_«me
) + 8;

367 
	}
}

369 
ölöe
 
	$putM∂sFä
(
SFLRe˚ivî
 *
ª˚ivî
, 
SFLExãnded_m∂s_FTN
 *
·n
)

371 
	`putSåög
(
ª˚ivî
, &
·n
->
m∂sFTNDes¸
);

372 
	`putNë32
(
ª˚ivî
, 
·n
->
m∂sFTNMask
);

373 
	}
}

375 
ölöe
 
u_öt32_t
 
	$m∂sFäEncodögLígth
(
SFLExãnded_m∂s_FTN
 *
·n
) {

376  
	`°rögEncodögLígth
–&
·n
->
m∂sFTNDes¸
) + 4;

377 
	}
}

379 
ölöe
 
	$putM∂sLdpFec
(
SFLRe˚ivî
 *
ª˚ivî
, 
SFLExãnded_m∂s_LDP_FEC
 *
ldp„c
)

381 
	`putNë32
(
ª˚ivî
, 
ldp„c
->
m∂sFecAddrPªfixLígth
);

382 
	}
}

384 
ölöe
 
u_öt32_t
 
	$m∂sLdpFecEncodögLígth
(
SFLExãnded_m∂s_LDP_FEC
 *
ldp„c
) {

386 
	}
}

388 
ölöe
 
	$putVœnTu¬ñ
(
SFLRe˚ivî
 *
ª˚ivî
, 
SFLExãnded_vœn_tu¬ñ
 *
vœnTu¬ñ
)

390 
	`putLabñSèck
(
ª˚ivî
, &
vœnTu¬ñ
->
°ack
);

391 
	}
}

393 
ölöe
 
u_öt32_t
 
	$vœnTu¬ñEncodögLígth
(
SFLExãnded_vœn_tu¬ñ
 *
vœnTu¬ñ
) {

394  
	`œbñSèckEncodögLígth
(&
vœnTu¬ñ
->
°ack
);

395 
	}
}

398 
ölöe
 
	$putGíîicCou¡îs
(
SFLRe˚ivî
 *
ª˚ivî
, 
SFLIf_cou¡îs
 *
cou¡îs
)

400 
	`putNë32
(
ª˚ivî
, 
cou¡îs
->
ifIndex
);

401 
	`putNë32
(
ª˚ivî
, 
cou¡îs
->
ifTy≥
);

402 
	`putNë64
(
ª˚ivî
, 
cou¡îs
->
ifS≥ed
);

403 
	`putNë32
(
ª˚ivî
, 
cou¡îs
->
ifDúe˘i⁄
);

404 
	`putNë32
(
ª˚ivî
, 
cou¡îs
->
ifSètus
);

405 
	`putNë64
(
ª˚ivî
, 
cou¡îs
->
ifInO˘ës
);

406 
	`putNë32
(
ª˚ivî
, 
cou¡îs
->
ifInUˇ°Pkts
);

407 
	`putNë32
(
ª˚ivî
, 
cou¡îs
->
ifInMu…iˇ°Pkts
);

408 
	`putNë32
(
ª˚ivî
, 
cou¡îs
->
ifInBrﬂdˇ°Pkts
);

409 
	`putNë32
(
ª˚ivî
, 
cou¡îs
->
ifInDisˇrds
);

410 
	`putNë32
(
ª˚ivî
, 
cou¡îs
->
ifInEº‹s
);

411 
	`putNë32
(
ª˚ivî
, 
cou¡îs
->
ifInUnknownPrŸos
);

412 
	`putNë64
(
ª˚ivî
, 
cou¡îs
->
ifOutO˘ës
);

413 
	`putNë32
(
ª˚ivî
, 
cou¡îs
->
ifOutUˇ°Pkts
);

414 
	`putNë32
(
ª˚ivî
, 
cou¡îs
->
ifOutMu…iˇ°Pkts
);

415 
	`putNë32
(
ª˚ivî
, 
cou¡îs
->
ifOutBrﬂdˇ°Pkts
);

416 
	`putNë32
(
ª˚ivî
, 
cou¡îs
->
ifOutDisˇrds
);

417 
	`putNë32
(
ª˚ivî
, 
cou¡îs
->
ifOutEº‹s
);

418 
	`putNë32
(
ª˚ivî
, 
cou¡îs
->
ifPromiscuousMode
);

419 
	}
}

427 
	$compuãFlowSam∂eSize
(
SFLRe˚ivî
 *
ª˚ivî
, 
SFL_FLOW_SAMPLE_TYPE
 *
fs
)

429 
SFLFlow_ßm∂e_ñemít
 *
ñem
 = 
fs
->
ñemíts
;

430 #ifde‡
SFL_USE_32BIT_INDEX


431 
u_öt
 
siz
 = 52;

434 
u_öt
 
siz
 = 40;

438 
fs
->
num_ñemíts
 = 0;

439 ; 
ñem
 !
NULL
;ÉÀm =ÉÀm->
nxt
) {

440 
u_öt
 
ñemSiz
 = 0;

441 
fs
->
num_ñemíts
++;

442 
siz
 += 8;

443 
ñem
->
èg
) {

444 
SFLFLOW_HEADER
:

445 
ñemSiz
 = 16;

446 
ñemSiz
 +((
ñem
->
ÊowTy≥
.
hódî
.
hódî_Àngth
 + 3) / 4) * 4;

448 
SFLFLOW_ETHERNET
: 
ñemSiz
 = (
SFLSam∂ed_ëhî√t
); ;

449 
SFLFLOW_IPV4
: 
ñemSiz
 = (
SFLSam∂ed_ùv4
); ;

450 
SFLFLOW_IPV6
: 
ñemSiz
 = (
SFLSam∂ed_ùv6
); ;

451 
SFLFLOW_EX_SWITCH
: 
ñemSiz
 = (
SFLExãnded_swôch
); ;

452 
SFLFLOW_EX_ROUTER
: 
ñemSiz
 = 
	`rouãrEncodögLígth
(&
ñem
->
ÊowTy≥
.
rouãr
); ;

453 
SFLFLOW_EX_GATEWAY
: 
ñemSiz
 = 
	`g©ewayEncodögLígth
(&
ñem
->
ÊowTy≥
.
g©eway
); ;

454 
SFLFLOW_EX_USER
: 
ñemSiz
 = 
	`u£rEncodögLígth
(&
ñem
->
ÊowTy≥
.
u£r
); ;

455 
SFLFLOW_EX_URL
: 
ñemSiz
 = 
	`uæEncodögLígth
(&
ñem
->
ÊowTy≥
.
uæ
); ;

456 
SFLFLOW_EX_MPLS
: 
ñemSiz
 = 
	`m∂sEncodögLígth
(&
ñem
->
ÊowTy≥
.
m∂s
); ;

457 
SFLFLOW_EX_NAT
: 
ñemSiz
 = 
	`«tEncodögLígth
(&
ñem
->
ÊowTy≥
.
«t
); ;

458 
SFLFLOW_EX_MPLS_TUNNEL
: 
ñemSiz
 = 
	`m∂sTu¬ñEncodögLígth
(&
ñem
->
ÊowTy≥
.
m∂s_tu¬ñ
); ;

459 
SFLFLOW_EX_MPLS_VC
: 
ñemSiz
 = 
	`m∂sVcEncodögLígth
(&
ñem
->
ÊowTy≥
.
m∂s_vc
); ;

460 
SFLFLOW_EX_MPLS_FTN
: 
ñemSiz
 = 
	`m∂sFäEncodögLígth
(&
ñem
->
ÊowTy≥
.
m∂s_·n
); ;

461 
SFLFLOW_EX_MPLS_LDP_FEC
: 
ñemSiz
 = 
	`m∂sLdpFecEncodögLígth
(&
ñem
->
ÊowTy≥
.
m∂s_ldp_„c
); ;

462 
SFLFLOW_EX_VLAN_TUNNEL
: 
ñemSiz
 = 
	`vœnTu¬ñEncodögLígth
(&
ñem
->
ÊowTy≥
.
vœn_tu¬ñ
); ;

464 
	`sÊEº‹
(
ª˚ivî
, "unexpectedÖacket_data_tag");

469 
ñem
->
Àngth
 = 
ñemSiz
;

470 
siz
 +
ñemSiz
;

473  
siz
;

474 
	}
}

481 
	$sÊ_ª˚ivî_wrôeFlowSam∂e
(
SFLRe˚ivî
 *
ª˚ivî
, 
SFL_FLOW_SAMPLE_TYPE
 *
fs
)

483 
∑ckedSize
;

484 if(
fs
 =
NULL
)  -1;

485 if((
∑ckedSize
 = 
	`compuãFlowSam∂eSize
(
ª˚ivî
, 
fs
)) == -1)  -1;

490 if(
∑ckedSize
 > ()(
ª˚ivî
->
sFlowRcvrMaximumD©agømSize
 / 2)) {

491 
	`sÊEº‹
(
ª˚ivî
, "flow sampleÅoo big for datagram");

497 if((
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
pkéí
 + 
∑ckedSize
Ë>ª˚ivî->
sFlowRcvrMaximumD©agømSize
)

498 
	`£ndSam∂e
(
ª˚ivî
);

500 
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
numSam∂es
++;

502 #ifde‡
SFL_USE_32BIT_INDEX


503 
	`putNë32
(
ª˚ivî
, 
SFLFLOW_SAMPLE_EXPANDED
);

505 
	`putNë32
(
ª˚ivî
, 
SFLFLOW_SAMPLE
);

508 
	`putNë32
(
ª˚ivî
, 
∑ckedSize
 - 8);

509 
	`putNë32
(
ª˚ivî
, 
fs
->
£quí˚_numbî
);

511 #ifde‡
SFL_USE_32BIT_INDEX


512 
	`putNë32
(
ª˚ivî
, 
fs
->
ds_˛ass
);

513 
	`putNë32
(
ª˚ivî
, 
fs
->
ds_ödex
);

515 
	`putNë32
(
ª˚ivî
, 
fs
->
sour˚_id
);

518 
	`putNë32
(
ª˚ivî
, 
fs
->
ßm∂ög_øã
);

519 
	`putNë32
(
ª˚ivî
, 
fs
->
ßm∂e_poﬁ
);

520 
	`putNë32
(
ª˚ivî
, 
fs
->
dr›s
);

522 #ifde‡
SFL_USE_32BIT_INDEX


523 
	`putNë32
(
ª˚ivî
, 
fs
->
öputF‹m©
);

524 
	`putNë32
(
ª˚ivî
, 
fs
->
öput
);

525 
	`putNë32
(
ª˚ivî
, 
fs
->
ouçutF‹m©
);

526 
	`putNë32
(
ª˚ivî
, 
fs
->
ouçut
);

528 
	`putNë32
(
ª˚ivî
, 
fs
->
öput
);

529 
	`putNë32
(
ª˚ivî
, 
fs
->
ouçut
);

532 
	`putNë32
(
ª˚ivî
, 
fs
->
num_ñemíts
);

535 
SFLFlow_ßm∂e_ñemít
 *
ñem
 = 
fs
->
ñemíts
;

536 ; 
ñem
 !
NULL
;ÉÀm =ÉÀm->
nxt
) {

538 
	`putNë32
(
ª˚ivî
, 
ñem
->
èg
);

539 
	`putNë32
(
ª˚ivî
, 
ñem
->
Àngth
);

541 
ñem
->
èg
) {

542 
SFLFLOW_HEADER
:

543 
	`putNë32
(
ª˚ivî
, 
ñem
->
ÊowTy≥
.
hódî
.
hódî_¥Ÿocﬁ
);

544 
	`putNë32
(
ª˚ivî
, 
ñem
->
ÊowTy≥
.
hódî
.
‰ame_Àngth
);

545 
	`putNë32
(
ª˚ivî
, 
ñem
->
ÊowTy≥
.
hódî
.
°rù≥d
);

546 
	`putNë32
(
ª˚ivî
, 
ñem
->
ÊowTy≥
.
hódî
.
hódî_Àngth
);

548 
	`mem˝y
(
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
d©≠
, 
ñem
->
ÊowTy≥
.
hódî
.
hódî_byãs
,ÉÀm->ÊowTy≥.hódî.
hódî_Àngth
);

550 
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
d©≠
 +((
ñem
->
ÊowTy≥
.
hódî
.
hódî_Àngth
 + 3) / 4);

552 
SFLFLOW_ETHERNET
:

553 
	`putNë32
(
ª˚ivî
, 
ñem
->
ÊowTy≥
.
ëhî√t
.
ëh_Àn
);

554 
	`putMACAddªss
(
ª˚ivî
, 
ñem
->
ÊowTy≥
.
ëhî√t
.
§c_mac
);

555 
	`putMACAddªss
(
ª˚ivî
, 
ñem
->
ÊowTy≥
.
ëhî√t
.
d°_mac
);

556 
	`putNë32
(
ª˚ivî
, 
ñem
->
ÊowTy≥
.
ëhî√t
.
ëh_ty≥
);

558 
SFLFLOW_IPV4
:

559 
	`putNë32
(
ª˚ivî
, 
ñem
->
ÊowTy≥
.
ùv4
.
Àngth
);

560 
	`putNë32
(
ª˚ivî
, 
ñem
->
ÊowTy≥
.
ùv4
.
¥Ÿocﬁ
);

561 
	`put32
(
ª˚ivî
, 
ñem
->
ÊowTy≥
.
ùv4
.
§c_ù
.
addr
);

562 
	`put32
(
ª˚ivî
, 
ñem
->
ÊowTy≥
.
ùv4
.
d°_ù
.
addr
);

563 
	`putNë32
(
ª˚ivî
, 
ñem
->
ÊowTy≥
.
ùv4
.
§c_p‹t
);

564 
	`putNë32
(
ª˚ivî
, 
ñem
->
ÊowTy≥
.
ùv4
.
d°_p‹t
);

565 
	`putNë32
(
ª˚ivî
, 
ñem
->
ÊowTy≥
.
ùv4
.
t˝_Êags
);

566 
	`putNë32
(
ª˚ivî
, 
ñem
->
ÊowTy≥
.
ùv4
.
tos
);

568 
SFLFLOW_IPV6
:

569 
	`putNë32
(
ª˚ivî
, 
ñem
->
ÊowTy≥
.
ùv6
.
Àngth
);

570 
	`putNë32
(
ª˚ivî
, 
ñem
->
ÊowTy≥
.
ùv6
.
¥Ÿocﬁ
);

571 
	`put128
(
ª˚ivî
, 
ñem
->
ÊowTy≥
.
ùv6
.
§c_ù
.
addr
);

572 
	`put128
(
ª˚ivî
, 
ñem
->
ÊowTy≥
.
ùv6
.
d°_ù
.
addr
);

573 
	`putNë32
(
ª˚ivî
, 
ñem
->
ÊowTy≥
.
ùv6
.
§c_p‹t
);

574 
	`putNë32
(
ª˚ivî
, 
ñem
->
ÊowTy≥
.
ùv6
.
d°_p‹t
);

575 
	`putNë32
(
ª˚ivî
, 
ñem
->
ÊowTy≥
.
ùv6
.
t˝_Êags
);

576 
	`putNë32
(
ª˚ivî
, 
ñem
->
ÊowTy≥
.
ùv6
.
¥i‹ôy
);

578 
SFLFLOW_EX_SWITCH
: 
	`putSwôch
(
ª˚ivî
, &
ñem
->
ÊowTy≥
.
sw
); ;

579 
SFLFLOW_EX_ROUTER
: 
	`putRouãr
(
ª˚ivî
, &
ñem
->
ÊowTy≥
.
rouãr
); ;

580 
SFLFLOW_EX_GATEWAY
: 
	`putG©eway
(
ª˚ivî
, &
ñem
->
ÊowTy≥
.
g©eway
); ;

581 
SFLFLOW_EX_USER
: 
	`putU£r
(
ª˚ivî
, &
ñem
->
ÊowTy≥
.
u£r
); ;

582 
SFLFLOW_EX_URL
: 
	`putUæ
(
ª˚ivî
, &
ñem
->
ÊowTy≥
.
uæ
); ;

583 
SFLFLOW_EX_MPLS
: 
	`putM∂s
(
ª˚ivî
, &
ñem
->
ÊowTy≥
.
m∂s
); ;

584 
SFLFLOW_EX_NAT
: 
	`putN©
(
ª˚ivî
, &
ñem
->
ÊowTy≥
.
«t
); ;

585 
SFLFLOW_EX_MPLS_TUNNEL
: 
	`putM∂sTu¬ñ
(
ª˚ivî
, &
ñem
->
ÊowTy≥
.
m∂s_tu¬ñ
); ;

586 
SFLFLOW_EX_MPLS_VC
: 
	`putM∂sVc
(
ª˚ivî
, &
ñem
->
ÊowTy≥
.
m∂s_vc
); ;

587 
SFLFLOW_EX_MPLS_FTN
: 
	`putM∂sFä
(
ª˚ivî
, &
ñem
->
ÊowTy≥
.
m∂s_·n
); ;

588 
SFLFLOW_EX_MPLS_LDP_FEC
: 
	`putM∂sLdpFec
(
ª˚ivî
, &
ñem
->
ÊowTy≥
.
m∂s_ldp_„c
); ;

589 
SFLFLOW_EX_VLAN_TUNNEL
: 
	`putVœnTu¬ñ
(
ª˚ivî
, &
ñem
->
ÊowTy≥
.
vœn_tu¬ñ
); ;

591 
	`sÊEº‹
(
ª˚ivî
, "unexpectedÖacket_data_tag");

599 
	`as£π
(((
u_ch¨
 *)
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
d©≠


600 - (
u_ch¨
 *)
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
d©a


601 - 
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
pkéí
Ë=(
u_öt32_t
)
∑ckedSize
);

604 
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
pkéí
 = (
u_ch¨
 *Ïe˚ivî->ßm∂eCﬁÀ˘‹.
d©≠
 - (u_ch¨ *Ïe˚ivî->ßm∂eCﬁÀ˘‹.
d©a
;

605  
∑ckedSize
;

606 
	}
}

613 
	$compuãCou¡îsSam∂eSize
(
SFLRe˚ivî
 *
ª˚ivî
, 
SFL_COUNTERS_SAMPLE_TYPE
 *
cs
)

615 
SFLCou¡îs_ßm∂e_ñemít
 *
ñem
 = 
cs
->
ñemíts
;

616 #ifde‡
SFL_USE_32BIT_INDEX


617 
u_öt
 
siz
 = 24;

619 
u_öt
 
siz
 = 20;

622 
cs
->
num_ñemíts
 = 0;

623 ; 
ñem
 !
NULL
;ÉÀm =ÉÀm->
nxt
) {

624 
u_öt
 
ñemSiz
 = 0;

625 
cs
->
num_ñemíts
++;

626 
siz
 += 8;

627 
ñem
->
èg
) {

628 
SFLCOUNTERS_GENERIC
: 
ñemSiz
 = (
ñem
->
cou¡îBlock
.
gíîic
); ;

629 
SFLCOUNTERS_ETHERNET
: 
ñemSiz
 = (
ñem
->
cou¡îBlock
.
ëhî√t
); ;

630 
SFLCOUNTERS_TOKENRING
: 
ñemSiz
 = (
ñem
->
cou¡îBlock
.
tokírög
); ;

631 
SFLCOUNTERS_VG
: 
ñemSiz
 = (
ñem
->
cou¡îBlock
.
vg
); ;

632 
SFLCOUNTERS_VLAN
: 
ñemSiz
 = (
ñem
->
cou¡îBlock
.
vœn
); ;

634 
	`sÊEº‹
(
ª˚ivî
, "unexpected counters_tag");

639 
ñem
->
Àngth
 = 
ñemSiz
;

640 
siz
 +
ñemSiz
;

642  
siz
;

643 
	}
}

650 
	$sÊ_ª˚ivî_wrôeCou¡îsSam∂e
(
SFLRe˚ivî
 *
ª˚ivî
, 
SFL_COUNTERS_SAMPLE_TYPE
 *
cs
)

652 
∑ckedSize
;

653 if(
cs
 =
NULL
)  -1;

656 if((
∑ckedSize
 = 
	`compuãCou¡îsSam∂eSize
(
ª˚ivî
, 
cs
)) == -1)  -1;

661 if(
∑ckedSize
 > ()(
ª˚ivî
->
sFlowRcvrMaximumD©agømSize
 / 2)) {

662 
	`sÊEº‹
(
ª˚ivî
, "counters sampleÅoo big for datagram");

666 if((
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
pkéí
 + 
∑ckedSize
Ë>ª˚ivî->
sFlowRcvrMaximumD©agømSize
)

667 
	`£ndSam∂e
(
ª˚ivî
);

669 
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
numSam∂es
++;

671 #ifde‡
SFL_USE_32BIT_INDEX


672 
	`putNë32
(
ª˚ivî
, 
SFLCOUNTERS_SAMPLE_EXPANDED
);

674 
	`putNë32
(
ª˚ivî
, 
SFLCOUNTERS_SAMPLE
);

677 
	`putNë32
(
ª˚ivî
, 
∑ckedSize
 - 8);

678 
	`putNë32
(
ª˚ivî
, 
cs
->
£quí˚_numbî
);

680 #ifde‡
SFL_USE_32BIT_INDEX


681 
	`putNë32
(
ª˚ivî
, 
cs
->
ds_˛ass
);

682 
	`putNë32
(
ª˚ivî
, 
cs
->
ds_ödex
);

684 
	`putNë32
(
ª˚ivî
, 
cs
->
sour˚_id
);

687 
	`putNë32
(
ª˚ivî
, 
cs
->
num_ñemíts
);

690 
SFLCou¡îs_ßm∂e_ñemít
 *
ñem
 = 
cs
->
ñemíts
;

691 ; 
ñem
 !
NULL
;ÉÀm =ÉÀm->
nxt
) {

693 
	`putNë32
(
ª˚ivî
, 
ñem
->
èg
);

694 
	`putNë32
(
ª˚ivî
, 
ñem
->
Àngth
);

696 
ñem
->
èg
) {

697 
SFLCOUNTERS_GENERIC
:

698 
	`putGíîicCou¡îs
(
ª˚ivî
, &(
ñem
->
cou¡îBlock
.
gíîic
));

700 
SFLCOUNTERS_ETHERNET
:

702 
	`putNë32_run
(
ª˚ivî
, &
ñem
->
cou¡îBlock
.
ëhî√t
, (elem->counterBlock.ethernet) / 4);

704 
SFLCOUNTERS_TOKENRING
:

706 
	`putNë32_run
(
ª˚ivî
, &
ñem
->
cou¡îBlock
.
tokírög
, (elem->counterBlock.tokenring) / 4);

708 
SFLCOUNTERS_VG
:

710 
	`putNë32
(
ª˚ivî
, 
ñem
->
cou¡îBlock
.
vg
.
dŸ12InHighPri‹ôyFømes
);

711 
	`putNë64
(
ª˚ivî
, 
ñem
->
cou¡îBlock
.
vg
.
dŸ12InHighPri‹ôyO˘ës
);

712 
	`putNë32
(
ª˚ivî
, 
ñem
->
cou¡îBlock
.
vg
.
dŸ12InN‹mPri‹ôyFømes
);

713 
	`putNë64
(
ª˚ivî
, 
ñem
->
cou¡îBlock
.
vg
.
dŸ12InN‹mPri‹ôyO˘ës
);

714 
	`putNë32
(
ª˚ivî
, 
ñem
->
cou¡îBlock
.
vg
.
dŸ12InIPMEº‹s
);

715 
	`putNë32
(
ª˚ivî
, 
ñem
->
cou¡îBlock
.
vg
.
dŸ12InOvîsizeFømeEº‹s
);

716 
	`putNë32
(
ª˚ivî
, 
ñem
->
cou¡îBlock
.
vg
.
dŸ12InD©aEº‹s
);

717 
	`putNë32
(
ª˚ivî
, 
ñem
->
cou¡îBlock
.
vg
.
dŸ12InNuŒAddªs£dFømes
);

718 
	`putNë32
(
ª˚ivî
, 
ñem
->
cou¡îBlock
.
vg
.
dŸ12OutHighPri‹ôyFømes
);

719 
	`putNë64
(
ª˚ivî
, 
ñem
->
cou¡îBlock
.
vg
.
dŸ12OutHighPri‹ôyO˘ës
);

720 
	`putNë32
(
ª˚ivî
, 
ñem
->
cou¡îBlock
.
vg
.
dŸ12Tønsôi⁄I¡oTøöögs
);

721 
	`putNë64
(
ª˚ivî
, 
ñem
->
cou¡îBlock
.
vg
.
dŸ12HCInHighPri‹ôyO˘ës
);

722 
	`putNë64
(
ª˚ivî
, 
ñem
->
cou¡îBlock
.
vg
.
dŸ12HCInN‹mPri‹ôyO˘ës
);

723 
	`putNë64
(
ª˚ivî
, 
ñem
->
cou¡îBlock
.
vg
.
dŸ12HCOutHighPri‹ôyO˘ës
);

725 
SFLCOUNTERS_VLAN
:

727 
	`putNë32
(
ª˚ivî
, 
ñem
->
cou¡îBlock
.
vœn
.
vœn_id
);

728 
	`putNë64
(
ª˚ivî
, 
ñem
->
cou¡îBlock
.
vœn
.
o˘ës
);

729 
	`putNë32
(
ª˚ivî
, 
ñem
->
cou¡îBlock
.
vœn
.
uˇ°Pkts
);

730 
	`putNë32
(
ª˚ivî
, 
ñem
->
cou¡îBlock
.
vœn
.
mu…iˇ°Pkts
);

731 
	`putNë32
(
ª˚ivî
, 
ñem
->
cou¡îBlock
.
vœn
.
brﬂdˇ°Pkts
);

732 
	`putNë32
(
ª˚ivî
, 
ñem
->
cou¡îBlock
.
vœn
.
disˇrds
);

735 
	`sÊEº‹
(
ª˚ivî
, "unexpected counters_tag");

742 
	`as£π
(((
u_ch¨
 *)
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
d©≠


743 - (
u_ch¨
 *)
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
d©a


744 - 
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
pkéí
Ë=(
u_öt32_t
)
∑ckedSize
);

747 
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
pkéí
 = (
u_ch¨
 *Ïe˚ivî->ßm∂eCﬁÀ˘‹.
d©≠
 - (u_ch¨ *Ïe˚ivî->ßm∂eCﬁÀ˘‹.
d©a
;

748  
∑ckedSize
;

749 
	}
}

756 
u_öt32_t
 
	$sÊ_ª˚ivî_ßm∂ePackësSít
(
SFLRe˚ivî
 *
ª˚ivî
)

758  
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
∑ckëSeqNo
;

759 
	}
}

766 
	$£ndSam∂e
(
SFLRe˚ivî
 *
ª˚ivî
)

771 
u_öt32_t
 
hdrIdx
 = (
ª˚ivî
->
agít
->
myIP
.
ty≥
 =
SFLADDRESSTYPE_IP_V6
) ? 7 : 4;

772 
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
d©a
[
hdrIdx
++] = 
	`ht⁄l
(++ª˚ivî->ßm∂eCﬁÀ˘‹.
∑ckëSeqNo
);

773 
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
d©a
[
hdrIdx
++] = 
	`ht⁄l
(‘e˚ivî->
agít
->
now
 -Ñe˚ivî->agít->
boŸTime
) * 1000);

774 
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
d©a
[
hdrIdx
++] = 
	`ht⁄l
‘e˚ivî->ßm∂eCﬁÀ˘‹.
numSam∂es
);

776 if(
ª˚ivî
->
agít
->
£ndFn
Ë(*ª˚ivî->agít->£ndFn)‘e˚ivî->agít->
magic
,

777 
ª˚ivî
->
agít
,

778 
ª˚ivî
,

779 (
u_ch¨
 *)
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
d©a
,

780 
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
pkéí
);

782 #ifde‡
SFLOW_DO_SOCKET


784 i‡(
ª˚ivî
->
sFlowRcvrAddªss
.
ty≥
 =
SFLADDRESSTYPE_IP_V6
) {

785 
u_öt32_t
 
so˛í
 = (
sockaddr_ö6
);

786 
ªsu…
 = 
	`£ndto
(
ª˚ivî
->
agít
->
ª˚ivîSockë6
,

787 
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
d©a
,

788 
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
pkéí
,

790 (
sockaddr
 *)&
ª˚ivî
->
ª˚ivî6
,

791 
so˛í
);

792 if(
ªsu…
 =-1 && 
î∫o
 !
EINTR
Ë
	`sÊ_agít_sysEº‹
(
ª˚ivî
->
agít
, "receiver", "IPv6 socket sendtoÉrror");

793 if(
ªsu…
 =0Ë
	`sÊ_agít_îr‹
(
ª˚ivî
->
agít
, "receiver", "IPv6 socket sendtoÑeturned 0");

796 
u_öt32_t
 
so˛í
 = (
sockaddr_ö
);

797 
ªsu…
 = 
	`£ndto
(
ª˚ivî
->
agít
->
ª˚ivîSockë4
,

798 
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
d©a
,

799 
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
pkéí
,

801 (
sockaddr
 *)&
ª˚ivî
->
ª˚ivî4
,

802 
so˛í
);

803 if(
ªsu…
 =-1 && 
î∫o
 !
EINTR
Ë
	`sÊ_agít_sysEº‹
(
ª˚ivî
->
agít
, "receiver", "socket sendtoÉrror");

804 if(
ªsu…
 =0Ë
	`sÊ_agít_îr‹
(
ª˚ivî
->
agít
, "receiver", "socket sendtoÑeturned 0");

810 
	`ª£tSam∂eCﬁÀ˘‹
(
ª˚ivî
);

811 
	}
}

818 
	$ª£tSam∂eCﬁÀ˘‹
(
SFLRe˚ivî
 *
ª˚ivî
)

820 
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
pkéí
 = 0;

821 
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
numSam∂es
 = 0;

823 
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
d©≠
 = (ª˚ivî->
agít
->
myIP
.
ty≥
 =
SFLADDRESSTYPE_IP_V6
) ?

824 (
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
d©a
 + 10) : (receiver->sampleCollector.data + 7);

826 
ª˚ivî
->
ßm∂eCﬁÀ˘‹
.
pkéí
 = (
u_ch¨
 *Ïe˚ivî->ßm∂eCﬁÀ˘‹.
d©≠
 - (u_ch¨ *Ïe˚ivî->ßm∂eCﬁÀ˘‹.
d©a
;

827 
	}
}

834 
	$sÊEº‹
(
SFLRe˚ivî
 *
ª˚ivî
, *
msg
)

836 
	`sÊ_agít_îr‹
(
ª˚ivî
->
agít
, "ª˚ivî", 
msg
);

837 
	`ª£tSam∂eCﬁÀ˘‹
(
ª˚ivî
);

838 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/sflow_sampler.c

8 
	~"sÊow_≠i.h
"

16 
	$sÊ_ßm∂î_öô
(
SFLSam∂î
 *
ßm∂î
, 
SFLAgít
 *
agít
, 
SFLD©aSour˚_ö°™˚
 *
pdsi
)

20 
SFLD©aSour˚_ö°™˚
 
dsi
 = *
pdsi
;

25 
SFLSam∂î
 *
nxtPå
 = 
ßm∂î
->
nxt
;

26 
SFLSam∂î
 *
hashPå
 = 
ßm∂î
->
hash_nxt
;

29 
	`mem£t
(
ßm∂î
, 0, (*sampler));

32 
ßm∂î
->
nxt
 = 
nxtPå
;

33 
ßm∂î
->
hash_nxt
 = 
hashPå
;

36 
ßm∂î
->
agít
 =ágent;

37 
ßm∂î
->
dsi
 = dsi;

40 
ßm∂î
->
sFlowFsMaximumHódîSize
 = 
SFL_DEFAULT_HEADER_SIZE
;

41 
ßm∂î
->
sFlowFsPackëSam∂ögR©e
 = 
SFL_DEFAULT_SAMPLING_RATE
;

42 
	}
}

49 
	$ª£t
(
SFLSam∂î
 *
ßm∂î
)

51 
SFLD©aSour˚_ö°™˚
 
dsi
 = 
ßm∂î
->dsi;

52 
	`sÊ_ßm∂î_öô
(
ßm∂î
, sam∂î->
agít
, &
dsi
);

53 
	}
}

59 
u_öt32_t
 
	$sÊ_ßm∂î_gë_sFlowFsRe˚ivî
(
SFLSam∂î
 *
ßm∂î
) {

60  
ßm∂î
->
sFlowFsRe˚ivî
;

61 
	}
}

62 
	$sÊ_ßm∂î_£t_sFlowFsRe˚ivî
(
SFLSam∂î
 *
ßm∂î
, 
u_öt32_t
 
sFlowFsRe˚ivî
) {

63 
ßm∂î
->
sFlowFsRe˚ivî
 = sFlowFsReceiver;

64 if(
sFlowFsRe˚ivî
 =0Ë
	`ª£t
(
ßm∂î
);

67 
ßm∂î
->
myRe˚ivî
 = 
	`sÊ_agít_gëRe˚ivî
(ßm∂î->
agít
, sam∂î->
sFlowFsRe˚ivî
);

69 
	}
}

70 
u_öt32_t
 
	$sÊ_ßm∂î_gë_sFlowFsPackëSam∂ögR©e
(
SFLSam∂î
 *
ßm∂î
) {

71  
ßm∂î
->
sFlowFsPackëSam∂ögR©e
;

72 
	}
}

73 
	$sÊ_ßm∂î_£t_sFlowFsPackëSam∂ögR©e
(
SFLSam∂î
 *
ßm∂î
, 
u_öt32_t
 
sFlowFsPackëSam∂ögR©e
) {

74 
ßm∂î
->
sFlowFsPackëSam∂ögR©e
 = sFlowFsPacketSamplingRate;

75 
	}
}

76 
u_öt32_t
 
	$sÊ_ßm∂î_gë_sFlowFsMaximumHódîSize
(
SFLSam∂î
 *
ßm∂î
) {

77  
ßm∂î
->
sFlowFsMaximumHódîSize
;

78 
	}
}

79 
	$sÊ_ßm∂î_£t_sFlowFsMaximumHódîSize
(
SFLSam∂î
 *
ßm∂î
, 
u_öt32_t
 
sFlowFsMaximumHódîSize
) {

80 
ßm∂î
->
sFlowFsMaximumHódîSize
 = sFlowFsMaximumHeaderSize;

81 
	}
}

86 
	$sÊ_ßm∂î_£t_backoffThªshﬁd
(
SFLSam∂î
 *
ßm∂î
, 
u_öt32_t
 
ßm∂esPîSec⁄d
) {

87 
ßm∂î
->
backoffThªshﬁd
 = 
ßm∂esPîSec⁄d
;

88 
	}
}

89 
u_öt32_t
 
	$sÊ_ßm∂î_gë_backoffThªshﬁd
(
SFLSam∂î
 *
ßm∂î
) {

90  
ßm∂î
->
backoffThªshﬁd
;

91 
	}
}

92 
u_öt32_t
 
	$sÊ_ßm∂î_gë_ßm∂esLa°Tick
(
SFLSam∂î
 *
ßm∂î
) {

93  
ßm∂î
->
ßm∂esLa°Tick
;

94 
	}
}

102 
	$sÊ_ßm∂î_ª£tFlowSeqNo
(
SFLSam∂î
 *
ßm∂î
Ë{ sam∂î->
ÊowSam∂eSeqNo
 = 0; 
	}
}

110 
	$sÊ_ßm∂î_tick
(
SFLSam∂î
 *
ßm∂î
, 
time_t
 
now
)

112 if(
ßm∂î
->
backoffThªshﬁd
 && sam∂î->
ßm∂esThisTick
 > sampler->backoffThreshold) {

117 
ßm∂î
->
sFlowFsPackëSam∂ögR©e
 *= 2;

119 
ßm∂î
->
ßm∂esLa°Tick
 = sam∂î->
ßm∂esThisTick
;

120 
ßm∂î
->
ßm∂esThisTick
 = 0;

121 
	}
}

130 
	$sÊ_ßm∂î_wrôeFlowSam∂e
(
SFLSam∂î
 *
ßm∂î
, 
SFL_FLOW_SAMPLE_TYPE
 *
fs
)

132 if(
fs
 =
NULL
) ;

133 
ßm∂î
->
ßm∂esThisTick
++;

135 
fs
->
£quí˚_numbî
 = ++
ßm∂î
->
ÊowSam∂eSeqNo
;

137 #ifde‡
SFL_USE_32BIT_INDEX


138 
fs
->
ds_˛ass
 = 
	`SFL_DS_CLASS
(
ßm∂î
->
dsi
);

139 
fs
->
ds_ödex
 = 
	`SFL_DS_INDEX
(
ßm∂î
->
dsi
);

141 
fs
->
sour˚_id
 = 
	`SFL_DS_DATASOURCE
(
ßm∂î
->
dsi
);

144 if(
fs
->
ßm∂ög_øã
 =0Ëfs->ßm∂ög_øã = 
ßm∂î
->
sFlowFsPackëSam∂ögR©e
;

146 if–
fs
->
ßm∂e_poﬁ
 =0Ëfs->ßm∂e_poﬁ = 
ßm∂î
->
ßm∂ePoﬁ
;

148 if(
ßm∂î
->
myRe˚ivî
Ë
	`sÊ_ª˚ivî_wrôeFlowSam∂e
(ßm∂î->myRe˚ivî, 
fs
);

149 
	}
}

151 #ifde‡
SFLOW_SOFTWARE_SAMPLING


160 
ölöe
 
u_öt32_t
 
	$√xtR™domSkù
(
u_öt32_t
 
món
)

162 if(
món
 == 0 || mean == 1)  1;

163  ((
	`øndom
(Ë% ((2 * 
món
) - 1)) + 1);

164 
	}
}

171 
	$sÊ_ßm∂î_èkeSam∂e
(
SFLSam∂î
 *
ßm∂î
)

173 if(
ßm∂î
->
skù
 == 0) {

175 
	`§™dom
(
	`SFL_DS_INDEX
(
ßm∂î
->
dsi
));

176 
ßm∂î
->
skù
 = 
	`√xtR™domSkù
(ßm∂î->
sFlowFsPackëSam∂ögR©e
);

180 
ßm∂î
->
ßm∂ePoﬁ
++;

182 if(--
ßm∂î
->
skù
 == 0) {

184 
ßm∂î
->
skù
 = 
	`√xtR™domSkù
(ßm∂î->
sFlowFsPackëSam∂ögR©e
);

188 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/sha1.c

32 
	~<c⁄fig.h
>

33 
	~"sha1.h
"

34 
	~<˘y≥.h
>

35 
	~<°rög.h
>

36 
	~"compûî.h
"

37 
	~"utû.h
"

40 
	#UNROLL_LOOPS


	)

43 
ölöe
 
uöt32_t


44 
	$f1
(
uöt32_t
 
x
, uöt32_à
y
, uöt32_à
z
)

46  (
x
 & 
y
Ë| (~x & 
z
);

47 
	}
}

49 
ölöe
 
uöt32_t


50 
	$f2
(
uöt32_t
 
x
, uöt32_à
y
, uöt32_à
z
)

52  
x
 ^ 
y
 ^ 
z
;

53 
	}
}

55 
ölöe
 
uöt32_t


56 
	$f3
(
uöt32_t
 
x
, uöt32_à
y
, uöt32_à
z
)

58  (
x
 & 
y
Ë| (x & 
z
) | (y & z);

59 
	}
}

61 
ölöe
 
uöt32_t


62 
	$f4
(
uöt32_t
 
x
, uöt32_à
y
, uöt32_à
z
)

64  
x
 ^ 
y
 ^ 
z
;

65 
	}
}

68 
	#CONST1
 0x5a827999L

	)

69 
	#CONST2
 0x6ed9eba1L

	)

70 
	#CONST3
 0x8f1bbcdcL

	)

71 
	#CONST4
 0xˇ62c1d6L

	)

74 
ölöe
 
uöt32_t


75 
	$rŸ©e32
(
uöt32_t
 
x
, 
n
)

77  ((
x
 << 
n
) | (x >> (32 -Ç)));

78 
	}
}

80 
	#FUNC
(
n
, 
i
) \

82 
ãmp
 = 
	`rŸ©e32
(
A
, 5Ë+ 
f
##
	`n
(
B
, 
C
, 
D
Ë+ 
E
 + 
W
[
i
] + 
CONST
##
n
; \

83 
E
 = 
D
; \

84 
D
 = 
C
; \

85 
C
 = 
	`rŸ©e32
(
B
, 30); \

86 
B
 = 
A
; \

87 
A
 = 
ãmp
; \

88 } 0)

	)

90 
	#SHA_BLOCK_SIZE
 64

	)

94 
	$sha_å™sf‹m
(
sha1_˘x
 *
sha_öfo
)

96 
i
;

97 
uöt32_t
 
ãmp
, 
A
, 
B
, 
C
, 
D
, 
E
, 
W
[80];

99 
i
 = 0; i < 16; ++i) {

100 
W
[
i
] = 
sha_öfo
->
d©a
[i];

102 
i
 = 16; i < 80; ++i) {

103 
W
[
i
] = W[i-3] ^ W[i-8] ^ W[i-14] ^ W[i-16];

104 
W
[
i
] = 
	`rŸ©e32
(W[i], 1);

106 
A
 = 
sha_öfo
->
dige°
[0];

107 
B
 = 
sha_öfo
->
dige°
[1];

108 
C
 = 
sha_öfo
->
dige°
[2];

109 
D
 = 
sha_öfo
->
dige°
[3];

110 
E
 = 
sha_öfo
->
dige°
[4];

111 #ifde‡
UNROLL_LOOPS


112 
	`FUNC
(1, 0); FUNC(1, 1); FUNC(1, 2); FUNC(1, 3); FUNC(1, 4);

113 
	`FUNC
(1, 5); FUNC(1, 6); FUNC(1, 7); FUNC(1, 8); FUNC(1, 9);

114 
	`FUNC
(1,10); FUNC(1,11); FUNC(1,12); FUNC(1,13); FUNC(1,14);

115 
	`FUNC
(1,15); FUNC(1,16); FUNC(1,17); FUNC(1,18); FUNC(1,19);

117 
	`FUNC
(2,20); FUNC(2,21); FUNC(2,22); FUNC(2,23); FUNC(2,24);

118 
	`FUNC
(2,25); FUNC(2,26); FUNC(2,27); FUNC(2,28); FUNC(2,29);

119 
	`FUNC
(2,30); FUNC(2,31); FUNC(2,32); FUNC(2,33); FUNC(2,34);

120 
	`FUNC
(2,35); FUNC(2,36); FUNC(2,37); FUNC(2,38); FUNC(2,39);

122 
	`FUNC
(3,40); FUNC(3,41); FUNC(3,42); FUNC(3,43); FUNC(3,44);

123 
	`FUNC
(3,45); FUNC(3,46); FUNC(3,47); FUNC(3,48); FUNC(3,49);

124 
	`FUNC
(3,50); FUNC(3,51); FUNC(3,52); FUNC(3,53); FUNC(3,54);

125 
	`FUNC
(3,55); FUNC(3,56); FUNC(3,57); FUNC(3,58); FUNC(3,59);

127 
	`FUNC
(4,60); FUNC(4,61); FUNC(4,62); FUNC(4,63); FUNC(4,64);

128 
	`FUNC
(4,65); FUNC(4,66); FUNC(4,67); FUNC(4,68); FUNC(4,69);

129 
	`FUNC
(4,70); FUNC(4,71); FUNC(4,72); FUNC(4,73); FUNC(4,74);

130 
	`FUNC
(4,75); FUNC(4,76); FUNC(4,77); FUNC(4,78); FUNC(4,79);

132 
i
 = 0; i < 20; ++i) {

133 
	`FUNC
(1,
i
);

135 
i
 = 20; i < 40; ++i) {

136 
	`FUNC
(2,
i
);

138 
i
 = 40; i < 60; ++i) {

139 
	`FUNC
(3,
i
);

141 
i
 = 60; i < 80; ++i) {

142 
	`FUNC
(4,
i
);

145 
sha_öfo
->
dige°
[0] +
A
;

146 
sha_öfo
->
dige°
[1] +
B
;

147 
sha_öfo
->
dige°
[2] +
C
;

148 
sha_öfo
->
dige°
[3] +
D
;

149 
sha_öfo
->
dige°
[4] +
E
;

150 
	}
}

154 
	$maybe_byã_ªvî£
(
uöt32_t
 *
buf„r
 
OVS_UNUSED
, 
cou¡
 OVS_UNUSED)

156 #i‡!
WORDS_BIGENDIAN


157 
i
;

158 
uöt8_t
 
˘
[4], *
˝
;

160 
cou¡
 /(
uöt32_t
);

161 
˝
 = (
uöt8_t
 *Ë
buf„r
;

162 
i
 = 0; i < 
cou¡
; i++) {

163 
˘
[0] = 
˝
[0];

164 
˘
[1] = 
˝
[1];

165 
˘
[2] = 
˝
[2];

166 
˘
[3] = 
˝
[3];

167 
˝
[0] = 
˘
[3];

168 
˝
[1] = 
˘
[2];

169 
˝
[2] = 
˘
[1];

170 
˝
[3] = 
˘
[0];

171 
˝
 +(
uöt32_t
);

174 
	}
}

181 
	$sha1_öô
(
sha1_˘x
 *
sha_öfo
)

183 
sha_öfo
->
dige°
[0] = 0x67452301L;

184 
sha_öfo
->
dige°
[1] = 0xefcdab89L;

185 
sha_öfo
->
dige°
[2] = 0x98badcfeL;

186 
sha_öfo
->
dige°
[3] = 0x10325476L;

187 
sha_öfo
->
dige°
[4] = 0xc3d2e1f0L;

188 
sha_öfo
->
cou¡_lo
 = 0L;

189 
sha_öfo
->
cou¡_hi
 = 0L;

190 
sha_öfo
->
loˇl
 = 0;

191 
	}
}

200 
	$sha1_upd©e
(
sha1_˘x
 *
˘x
, c⁄° *
buf„r_
, 
size_t
 
cou¡
)

202 c⁄° 
uöt8_t
 *
buf„r
 = 
buf„r_
;

203 
i
;

205 i‡((
˘x
->
cou¡_lo
 + (
cou¡
 << 3)) < ctx->count_lo) {

206 
˘x
->
cou¡_hi
++;

208 
˘x
->
cou¡_lo
 +
cou¡
 << 3;

209 
˘x
->
cou¡_hi
 +
cou¡
 >> 29;

210 i‡(
˘x
->
loˇl
) {

211 
i
 = 
SHA_BLOCK_SIZE
 - 
˘x
->
loˇl
;

212 i‡(
i
 > 
cou¡
) {

213 
i
 = 
cou¡
;

215 
	`mem˝y
(((
uöt8_t
 *Ë
˘x
->
d©a
Ë+ ctx->
loˇl
, 
buf„r
, 
i
);

216 
cou¡
 -
i
;

217 
buf„r
 +
i
;

218 
˘x
->
loˇl
 +
i
;

219 i‡(
˘x
->
loˇl
 =
SHA_BLOCK_SIZE
) {

220 
	`maybe_byã_ªvî£
(
˘x
->
d©a
, 
SHA_BLOCK_SIZE
);

221 
	`sha_å™sf‹m
(
˘x
);

226 
cou¡
 >
SHA_BLOCK_SIZE
) {

227 
	`mem˝y
(
˘x
->
d©a
, 
buf„r
, 
SHA_BLOCK_SIZE
);

228 
buf„r
 +
SHA_BLOCK_SIZE
;

229 
cou¡
 -
SHA_BLOCK_SIZE
;

230 
	`maybe_byã_ªvî£
(
˘x
->
d©a
, 
SHA_BLOCK_SIZE
);

231 
	`sha_å™sf‹m
(
˘x
);

233 
	`mem˝y
(
˘x
->
d©a
, 
buf„r
, 
cou¡
);

234 
˘x
->
loˇl
 = 
cou¡
;

235 
	}
}

243 
	$sha1_föÆ
(
sha1_˘x
 *
˘x
, 
uöt8_t
 
dige°
[
SHA1_DIGEST_SIZE
])

245 
cou¡
, 
i
, 
j
;

246 
uöt32_t
 
lo_bô_cou¡
, 
hi_bô_cou¡
, 
k
;

248 
lo_bô_cou¡
 = 
˘x
->
cou¡_lo
;

249 
hi_bô_cou¡
 = 
˘x
->
cou¡_hi
;

250 
cou¡
 = (Ë((
lo_bô_cou¡
 >> 3) & 0x3f);

251 ((
uöt8_t
 *Ë
˘x
->
d©a
)[
cou¡
++] = 0x80;

252 i‡(
cou¡
 > 
SHA_BLOCK_SIZE
 - 8) {

253 
	`mem£t
(((
uöt8_t
 *Ë
˘x
->
d©a
Ë+ 
cou¡
, 0, 
SHA_BLOCK_SIZE
 - count);

254 
	`maybe_byã_ªvî£
(
˘x
->
d©a
, 
SHA_BLOCK_SIZE
);

255 
	`sha_å™sf‹m
(
˘x
);

256 
	`mem£t
((
uöt8_t
 *Ë
˘x
->
d©a
, 0, 
SHA_BLOCK_SIZE
 - 8);

258 
	`mem£t
(((
uöt8_t
 *Ë
˘x
->
d©a
Ë+ 
cou¡
, 0,

259 
SHA_BLOCK_SIZE
 - 8 - 
cou¡
);

261 
	`maybe_byã_ªvî£
(
˘x
->
d©a
, 
SHA_BLOCK_SIZE
);

262 
˘x
->
d©a
[14] = 
hi_bô_cou¡
;

263 
˘x
->
d©a
[15] = 
lo_bô_cou¡
;

264 
	`sha_å™sf‹m
(
˘x
);

266 
i
 = 
j
 = 0; j < 
SHA1_DIGEST_SIZE
; i++) {

267 
k
 = 
˘x
->
dige°
[
i
];

268 
dige°
[
j
++] = 
k
 >> 24;

269 
dige°
[
j
++] = 
k
 >> 16;

270 
dige°
[
j
++] = 
k
 >> 8;

271 
dige°
[
j
++] = 
k
;

273 
	}
}

277 
	$sha1_byãs
(c⁄° *
d©a
, 
size_t
 
n
, 
uöt8_t
 
dige°
[
SHA1_DIGEST_SIZE
])

279 
sha1_˘x
 
˘x
;

281 
	`sha1_öô
(&
˘x
);

282 
	`sha1_upd©e
(&
˘x
, 
d©a
, 
n
);

283 
	`sha1_föÆ
(&
˘x
, 
dige°
);

284 
	}
}

287 
sha1_to_hex
(c⁄° 
uöt8_t
 
dige°
[
SHA1_DIGEST_SIZE
],

288 
hex
[
SHA1_HEX_DIGEST_LEN
 + 1])

290 
	gi
;

292 
	gi
 = 0; i < 
	gSHA1_DIGEST_SIZE
; i++) {

293 *
	ghex
++ = "0123456789abcdef"[
dige°
[
i
] >> 4];

294 *
	ghex
++ = "0123456789abcdef"[
dige°
[
i
] & 15];

296 *
	ghex
 = '\0';

299 
boﬁ


300 
	$sha1_‰om_hex
(
uöt8_t
 
dige°
[
SHA1_DIGEST_SIZE
], c⁄° *
hex
)

302 
i
;

304 
i
 = 0; i < 
SHA1_DIGEST_SIZE
; i++) {

305 
boﬁ
 
ok
;

307 
dige°
[
i
] = 
	`hexôs_vÆue
(
hex
, 2, &
ok
);

308 i‡(!
ok
) {

309  
Ál£
;

311 
hex
 += 2;

313  
åue
;

314 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/sha1.h

29 #i‚de‡
SHA1_H


30 
	#SHA1_H


	)

32 
	~<°dboﬁ.h
>

33 
	~<°ddef.h
>

34 
	~<°döt.h
>

36 
	#SHA1_DIGEST_SIZE
 20

	)

37 
	#SHA1_HEX_DIGEST_LEN
 40

	)

40 
	ssha1_˘x
 {

41 
uöt32_t
 
	mdige°
[5];

42 
uöt32_t
 
	mcou¡_lo
, 
	mcou¡_hi
;

43 
uöt32_t
 
	md©a
[16];

44 
	mloˇl
;

47 
sha1_öô
(
sha1_˘x
 *);

48 
sha1_upd©e
(
sha1_˘x
 *, c⁄° *, 
size_t
);

49 
sha1_föÆ
(
sha1_˘x
 *, 
uöt8_t
 
dige°
[
SHA1_DIGEST_SIZE
]);

50 
sha1_byãs
(c⁄° *, 
size_t
, 
uöt8_t
 
dige°
[
SHA1_DIGEST_SIZE
]);

52 
	#SHA1_FMT
 \

54 "%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x"

	)

55 
	#SHA1_ARGS
(
DIGEST
) \

56 ((
DIGEST
)[0]), ((DIGEST)[1]), ((DIGEST)[2]), ((DIGEST)[3]), \

57 ((
DIGEST
)[4]), ((DIGEST)[5]), ((DIGEST)[6]), ((DIGEST)[7]), \

58 ((
DIGEST
)[8]), ((DIGEST)[9]), ((DIGEST)[10]), ((DIGEST)[11]), \

59 ((
DIGEST
)[12]), ((DIGEST)[13]), ((DIGEST)[14]), ((DIGEST)[15]), \

60 ((
DIGEST
)[16]), ((DIGEST)[17]), ((DIGEST)[18]), ((DIGEST)[19])

	)

62 
sha1_to_hex
(c⁄° 
uöt8_t
 
dige°
[
SHA1_DIGEST_SIZE
],

63 
hex
[
SHA1_HEX_DIGEST_LEN
 + 1]);

64 
boﬁ
 
sha1_‰om_hex
(
uöt8_t
 
dige°
[
SHA1_DIGEST_SIZE
], c⁄° *
hex
);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/shash.c

17 
	~<c⁄fig.h
>

18 
	~"shash.h
"

19 
	~<as£π.h
>

20 
	~"hash.h
"

22 
shash_node
 *
shash_föd__
(c⁄° 
shash
 *,

23 c⁄° *
«me
, 
size_t
 
«me_Àn
,

24 
size_t
 
hash
);

26 
size_t


27 
	$hash_«me
(c⁄° *
«me
)

29  
	`hash_°rög
(
«me
, 0);

30 
	}
}

33 
	$shash_öô
(
shash
 *
sh
)

35 
	`hm≠_öô
(&
sh
->
m≠
);

36 
	}
}

39 
	$shash_de°roy
(
shash
 *
sh
)

41 i‡(
sh
) {

42 
	`shash_˛ór
(
sh
);

43 
	`hm≠_de°roy
(&
sh
->
m≠
);

45 
	}
}

49 
	$shash_de°roy_‰ì_d©a
(
shash
 *
sh
)

51 i‡(
sh
) {

52 
	`shash_˛ór_‰ì_d©a
(
sh
);

53 
	`hm≠_de°roy
(&
sh
->
m≠
);

55 
	}
}

58 
	$shash_sw≠
(
shash
 *
a
, shash *
b
)

60 
	`hm≠_sw≠
(&
a
->
m≠
, &
b
->map);

61 
	}
}

64 
	$shash_moved
(
shash
 *
sh
)

66 
	`hm≠_moved
(&
sh
->
m≠
);

67 
	}
}

70 
	$shash_˛ór
(
shash
 *
sh
)

72 
shash_node
 *
node
, *
√xt
;

74 
	`SHASH_FOR_EACH_SAFE
 (
node
, 
√xt
, 
sh
) {

75 
	`hm≠_ªmove
(&
sh
->
m≠
, &
node
->node);

76 
	`‰ì
(
node
->
«me
);

77 
	`‰ì
(
node
);

79 
	}
}

83 
	$shash_˛ór_‰ì_d©a
(
shash
 *
sh
)

85 
shash_node
 *
node
, *
√xt
;

87 
	`SHASH_FOR_EACH_SAFE
 (
node
, 
√xt
, 
sh
) {

88 
	`hm≠_ªmove
(&
sh
->
m≠
, &
node
->node);

89 
	`‰ì
(
node
->
d©a
);

90 
	`‰ì
(
node
->
«me
);

91 
	`‰ì
(
node
);

93 
	}
}

95 
boﬁ


96 
	$shash_is_em±y
(c⁄° 
shash
 *shash)

98  
	`hm≠_is_em±y
(&
shash
->
m≠
);

99 
	}
}

101 
size_t


102 
	$shash_cou¡
(c⁄° 
shash
 *shash)

104  
	`hm≠_cou¡
(&
shash
->
m≠
);

105 
	}
}

107 
shash_node
 *

108 
	$shash_add_noc›y__
(
shash
 *
sh
, *
«me
, c⁄° *
d©a
, 
size_t
 
hash
)

110 
shash_node
 *
node
 = 
	`xmÆloc
( *node);

111 
node
->
«me
 =Çame;

112 
node
->
d©a
 = 
	`CONST_CAST
(*, data);

113 
	`hm≠_ö£π
(&
sh
->
m≠
, &
node
->node, 
hash
);

114  
node
;

115 
	}
}

119 
shash_node
 *

120 
	$shash_add_noc›y
(
shash
 *
sh
, *
«me
, c⁄° *
d©a
)

122  
	`shash_add_noc›y__
(
sh
, 
«me
, 
d©a
, 
	`hash_«me
(name));

123 
	}
}

127 
shash_node
 *

128 
	$shash_add
(
shash
 *
sh
, c⁄° *
«me
, c⁄° *
d©a
)

130  
	`shash_add_noc›y
(
sh
, 
	`x°rdup
(
«me
), 
d©a
);

131 
	}
}

133 
boﬁ


134 
	$shash_add_⁄˚
(
shash
 *
sh
, c⁄° *
«me
, c⁄° *
d©a
)

136 i‡(!
	`shash_föd
(
sh
, 
«me
)) {

137 
	`shash_add
(
sh
, 
«me
, 
d©a
);

138  
åue
;

140  
Ál£
;

142 
	}
}

145 
	$shash_add_as£π
(
shash
 *
sh
, c⁄° *
«me
, c⁄° *
d©a
)

147 
boﬁ
 
added
 
OVS_UNUSED
 = 
	`shash_add_⁄˚
(
sh
, 
«me
, 
d©a
);

148 
	`as£π
(
added
);

149 
	}
}

155 
	$shash_ª∂a˚
(
shash
 *
sh
, c⁄° *
«me
, c⁄° *
d©a
)

157 
size_t
 
hash
 = 
	`hash_«me
(
«me
);

158 
shash_node
 *
node
;

160 
node
 = 
	`shash_föd__
(
sh
, 
«me
, 
	`°æí
“ame), 
hash
);

161 i‡(!
node
) {

162 
	`shash_add_noc›y__
(
sh
, 
	`x°rdup
(
«me
), 
d©a
, 
hash
);

163  
NULL
;

165 *
ﬁd_d©a
 = 
node
->
d©a
;

166 
node
->
d©a
 = 
	`CONST_CAST
(*, data);

167  
ﬁd_d©a
;

169 
	}
}

174 
	$shash_dñëe
(
shash
 *
sh
, 
shash_node
 *
node
)

176 
	`‰ì
(
	`shash_°ól
(
sh
, 
node
));

177 
	}
}

183 
	$shash_°ól
(
shash
 *
sh
, 
shash_node
 *
node
)

185 *
«me
 = 
node
->name;

187 
	`hm≠_ªmove
(&
sh
->
m≠
, &
node
->node);

188 
	`‰ì
(
node
);

189  
«me
;

190 
	}
}

192 
shash_node
 *

193 
	$shash_föd__
(c⁄° 
shash
 *
sh
, c⁄° *
«me
, 
size_t
 
«me_Àn
,

194 
size_t
 
hash
)

196 
shash_node
 *
node
;

198 
	`HMAP_FOR_EACH_WITH_HASH
 (
node
,Çode, 
hash
, &
sh
->
m≠
) {

199 i‡(!
	`°∫cmp
(
node
->
«me
,Çame, 
«me_Àn
) && !node->name[name_len]) {

200  
node
;

203  
NULL
;

204 
	}
}

207 
shash_node
 *

208 
	$shash_föd
(c⁄° 
shash
 *
sh
, c⁄° *
«me
)

210  
	`shash_föd__
(
sh
, 
«me
, 
	`°æí
“ame), 
	`hash_«me
(name));

211 
	}
}

215 
shash_node
 *

216 
	$shash_föd_Àn
(c⁄° 
shash
 *
sh
, c⁄° *
«me
, 
size_t
 
Àn
)

218  
	`shash_föd__
(
sh
, 
«me
, 
Àn
, 
	`hash_byãs
(name,Üen, 0));

219 
	}
}

222 
	$shash_föd_d©a
(c⁄° 
shash
 *
sh
, c⁄° *
«me
)

224 
shash_node
 *
node
 = 
	`shash_föd
(
sh
, 
«me
);

225  
node
 ?Çode->
d©a
 : 
NULL
;

226 
	}
}

229 
	$shash_föd_™d_dñëe
(
shash
 *
sh
, c⁄° *
«me
)

231 
shash_node
 *
node
 = 
	`shash_föd
(
sh
, 
«me
);

232 i‡(
node
) {

233 *
d©a
 = 
node
->data;

234 
	`shash_dñëe
(
sh
, 
node
);

235  
d©a
;

237  
NULL
;

239 
	}
}

242 
	$shash_föd_™d_dñëe_as£π
(
shash
 *
sh
, c⁄° *
«me
)

244 *
d©a
 = 
	`shash_föd_™d_dñëe
(
sh
, 
«me
);

245 
	`as£π
(
d©a
 !
NULL
);

246  
d©a
;

247 
	}
}

249 
shash_node
 *

250 
	$shash_fú°
(c⁄° 
shash
 *shash)

252 
hm≠_node
 *
node
 = 
	`hm≠_fú°
(&
shash
->
m≠
);

253  
node
 ? 
	`CONTAINER_OF
“ode, 
shash_node
,ÇodeË: 
NULL
;

254 
	}
}

257 
	$com∑ª_nodes_by_«me
(c⁄° *
a_
, c⁄° *
b_
)

259 c⁄° 
shash_node
 *c⁄° *
a
 = 
a_
;

260 c⁄° 
shash_node
 *c⁄° *
b
 = 
b_
;

261  
	`°rcmp
((*
a
)->
«me
, (*
b
)->name);

262 
	}
}

264 c⁄° 
shash_node
 **

265 
	$shash_s‹t
(c⁄° 
shash
 *
sh
)

267 i‡(
	`shash_is_em±y
(
sh
)) {

268  
NULL
;

270 c⁄° 
shash_node
 **
nodes
;

271 
shash_node
 *
node
;

272 
size_t
 
i
, 
n
;

274 
n
 = 
	`shash_cou¡
(
sh
);

275 
nodes
 = 
	`xmÆloc
(
n
 *  *nodes);

276 
i
 = 0;

277 
	`SHASH_FOR_EACH
 (
node
, 
sh
) {

278 
nodes
[
i
++] = 
node
;

280 
	`as£π
(
i
 =
n
);

282 
	`qs‹t
(
nodes
, 
n
,  *nodes, 
com∑ª_nodes_by_«me
);

284  
nodes
;

286 
	}
}

290 
boﬁ


291 
	$shash_equÆ_keys
(c⁄° 
shash
 *
a
, c⁄° shash *
b
)

293 
shash_node
 *
node
;

295 i‡(
	`hm≠_cou¡
(&
a
->
m≠
Ë!hm≠_cou¡(&
b
->map)) {

296  
Ál£
;

298 
	`SHASH_FOR_EACH
 (
node
, 
a
) {

299 i‡(!
	`shash_föd
(
b
, 
node
->
«me
)) {

300  
Ál£
;

303  
åue
;

304 
	}
}

311 
shash_node
 *

312 
	$shash_øndom_node
(
shash
 *
sh
)

314  
	`CONTAINER_OF
(
	`hm≠_øndom_node
(&
sh
->
m≠
), 
shash_node
, 
node
);

315 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/shash.h

17 #i‚de‡
SHASH_H


18 
	#SHASH_H
 1

	)

20 
	~"hm≠.h
"

22 #ifde‡ 
__˝lu•lus


26 
	sshash_node
 {

27 
hm≠_node
 
node
;

28 *
«me
;

29 *
d©a
;

32 
	sshash
 {

33 
hm≠
 
m≠
;

36 
	#SHASH_INITIALIZER
(
SHASH
Ë{ 
	`HMAP_INITIALIZER
(&(SHASH)->
m≠
Ë}

	)

38 
	#SHASH_FOR_EACH
(
SHASH_NODE
, 
SHASH
) \

39 
	`HMAP_FOR_EACH
 (
SHASH_NODE
, 
node
, &(
SHASH
)->
m≠
)

	)

41 
	#SHASH_FOR_EACH_SAFE
(
SHASH_NODE
, 
NEXT
, 
SHASH
) \

42 
	`HMAP_FOR_EACH_SAFE
 (
SHASH_NODE
, 
NEXT
, 
node
, &(
SHASH
)->
m≠
)

	)

44 
shash_öô
(
shash
 *);

45 
shash_de°roy
(
shash
 *);

46 
shash_de°roy_‰ì_d©a
(
shash
 *);

47 
shash_sw≠
(
shash
 *, shash *);

48 
shash_moved
(
shash
 *);

49 
shash_˛ór
(
shash
 *);

50 
shash_˛ór_‰ì_d©a
(
shash
 *);

51 
boﬁ
 
shash_is_em±y
(c⁄° 
shash
 *);

52 
size_t
 
shash_cou¡
(c⁄° 
shash
 *);

53 
shash_node
 *
shash_add
(
shash
 *, const *, const *);

54 
shash_node
 *
shash_add_noc›y
(
shash
 *, *, const *);

55 
boﬁ
 
shash_add_⁄˚
(
shash
 *, const *, const *);

56 
shash_add_as£π
(
shash
 *, const *, const *);

57 *
shash_ª∂a˚
(
shash
 *, c⁄° *, c⁄° *
d©a
);

58 
shash_dñëe
(
shash
 *, 
shash_node
 *);

59 *
shash_°ól
(
shash
 *, 
shash_node
 *);

60 
shash_node
 *
shash_föd
(c⁄° 
shash
 *, const *);

61 
shash_node
 *
shash_föd_Àn
(c⁄° 
shash
 *, c⁄° *, 
size_t
);

62 *
shash_föd_d©a
(c⁄° 
shash
 *, const *);

63 *
shash_föd_™d_dñëe
(
shash
 *, const *);

64 *
shash_föd_™d_dñëe_as£π
(
shash
 *, const *);

65 
shash_node
 *
shash_fú°
(c⁄° 
shash
 *);

66 c⁄° 
shash_node
 **
shash_s‹t
(c⁄° 
shash
 *);

67 
boﬁ
 
shash_equÆ_keys
(c⁄° 
shash
 *, const shash *);

68 
shash_node
 *
shash_øndom_node
(
shash
 *);

70 #ifde‡ 
__˝lu•lus


	@/home/lsch/mytest/openvswitch-1.9.0/lib/signals.c

17 
	~<c⁄fig.h
>

18 
	~"sig«ls.h
"

19 
	~<as£π.h
>

20 
	~<î∫o.h
>

21 
	~<limôs.h
>

22 
	~<sig«l.h
>

23 
	~<°dlib.h
>

24 
	~<uni°d.h
>

25 
	~"pﬁl-lo›.h
"

26 
	~"sockë-utû.h
"

27 
	~"ty≥-¥›s.h
"

28 
	~"utû.h
"

29 
	~"vlog.h
"

31 
VLOG_DEFINE_THIS_MODULE
(
sig«ls
);

33 #i‡
deföed
(
_NSIG
)

34 
	#N_SIGNALS
 
_NSIG


	)

35 #ñi‡
deföed
(
NSIG
)

36 
	#N_SIGNALS
 
NSIG


	)

40 
	#N_SIGNALS
 32

	)

43 
	ssig«l
 {

44 
siga˘i⁄
 
	mßved_ß
;

45 
	msigƒ
;

48 vﬁ©ûê
sig_©omic_t
 
	gsig«Àd
[
N_SIGNALS
];

50 
	gfds
[2];

52 
sig«l_h™dÀr
(
sigƒ
);

61 
	$sig«l_öô
()

63 
boﬁ
 
öôed
;

64 i‡(!
öôed
) {

65 
öôed
 = 
åue
;

66 
	`xpùe_n⁄blockög
(
fds
);

68 
	}
}

73 
sig«l
 *

74 
	$sig«l_ªgi°î
(
sigƒ
)

76 
siga˘i⁄
 
ß
;

77 
sig«l
 *
s
;

79 
	`sig«l_öô
();

81 
s
 = 
	`xmÆloc
( *s);

82 
s
->
sigƒ
 = signr;

85 
	`as£π
(
sigƒ
 >1 && sigƒ < 
N_SIGNALS
);

86 
	`mem£t
(&
ß
, 0,  sa);

87 
ß
.
ß_h™dÀr
 = 
sig«l_h™dÀr
;

88 
	`sigem±y£t
(&
ß
.
ß_mask
);

89 
ß
.
ß_Êags
 = 
SA_RESTART
;

90 
	`xsiga˘i⁄
(
sigƒ
, &
ß
, &
s
->
ßved_ß
);

92  
s
;

93 
	}
}

98 
	$sig«l_uƒegi°î
(
sig«l
 *
s
)

100 i‡(
s
) {

101 
	`xsiga˘i⁄
(
s
->
sigƒ
, &s->
ßved_ß
, 
NULL
);

102 
	`‰ì
(
s
);

104 
	}
}

108 
boﬁ


109 
	$sig«l_pﬁl
(
sig«l
 *
s
)

111 
buf
[
_POSIX_PIPE_BUF
];

112 
	`ign‹e
(
	`ªad
(
fds
[0], 
buf
,  buf));

113 i‡(
sig«Àd
[
s
->
sigƒ
]) {

114 
sig«Àd
[
s
->
sigƒ
] = 0;

115  
åue
;

117  
Ál£
;

118 
	}
}

123 
	$sig«l_waô
(
sig«l
 *
s
)

125 i‡(
sig«Àd
[
s
->
sigƒ
]) {

126 
	`pﬁl_immedüã_wake
();

128 
	`pﬁl_fd_waô
(
fds
[0], 
POLLIN
);

130 
	}
}

133 
	$sig«l_h™dÀr
(
sigƒ
)

135 i‡(
sigƒ
 >1 && sigƒ < 
N_SIGNALS
) {

136 
	`ign‹e
(
	`wrôe
(
fds
[1], "", 1));

137 
sig«Àd
[
sigƒ
] = 
åue
;

139 
	}
}

148 
	$sig«l_«me
(
signum
)

150 c⁄° *
«me
 = 
NULL
;

151 #ifde‡
HAVE_STRSIGNAL


152 
«me
 = 
	`°rsig«l
(
signum
);

154 i‡(!
«me
) {

155 
buf„r
[7 + 
	`INT_STRLEN
() + 1];

156 
	`•rötf
(
buf„r
, "sig«»%d", 
signum
);

157 
«me
 = 
buf„r
;

159  
«me
;

160 
	}
}

163 
	$xsiga˘i⁄
(
signum
, c⁄° 
siga˘i⁄
 *
√w
, siga˘i⁄ *
ﬁd
)

165 i‡(
	`siga˘i⁄
(
signum
, 
√w
, 
ﬁd
)) {

166 
	`VLOG_FATAL
("sigaction(%s) failed (%s)",

167 
	`sig«l_«me
(
signum
), 
	`°ªº‹
(
î∫o
));

169 
	}
}

172 
	$xsig¥ocmask
(
how
, c⁄° 
sig£t_t
 *
√w
, sig£t_à*
ﬁd
)

174 i‡(
	`sig¥ocmask
(
how
, 
√w
, 
ﬁd
)) {

175 
	`VLOG_FATAL
("sig¥ocmask faûed (%s)", 
	`°ªº‹
(
î∫o
));

177 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/signals.h

17 #i‚de‡
SIGNALS_H


18 
	#SIGNALS_H
 1

	)

20 
	~<sig«l.h
>

21 
	~<°dboﬁ.h
>

23 
sig«l_öô
();

25 
sig«l
 *
sig«l_ªgi°î
(
sigƒ
);

26 
sig«l_uƒegi°î
(
sig«l
 *);

28 
boﬁ
 
sig«l_pﬁl
(
sig«l
 *);

29 
sig«l_waô
(
sig«l
 *);

31 c⁄° *
sig«l_«me
(
signum
);

33 
xsiga˘i⁄
(
signum
, c⁄° 
siga˘i⁄
 *, siga˘i⁄ *
ﬁd
);

34 
xsig¥ocmask
(
how
, c⁄° 
sig£t_t
 *, sig£t_à*
ﬁd
);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/simap.c

17 
	~<c⁄fig.h
>

18 
	~"sim≠.h
"

19 
	~<as£π.h
>

20 
	~"hash.h
"

22 
size_t
 
hash_«me
(c⁄° *, size_à
Àngth
);

23 
sim≠_node
 *
sim≠_föd__
(c⁄° 
sim≠
 *,

24 c⁄° *
«me
, 
size_t
 
«me_Àn
,

25 
size_t
 
hash
);

26 
sim≠_node
 *
sim≠_add_noc›y__
(
sim≠
 *,

27 *
«me
, 
d©a
,

28 
size_t
 
hash
);

29 
com∑ª_nodes_by_«me
(c⁄° *
a_
, c⁄° *
b_
);

33 
	$sim≠_öô
(
sim≠
 *simap)

35 
	`hm≠_öô
(&
sim≠
->
m≠
);

36 
	}
}

40 
	$sim≠_de°roy
(
sim≠
 *simap)

42 i‡(
sim≠
) {

43 
	`sim≠_˛ór
(
sim≠
);

44 
	`hm≠_de°roy
(&
sim≠
->
m≠
);

46 
	}
}

50 
	$sim≠_sw≠
(
sim≠
 *
a
, sim≠ *
b
)

52 
	`hm≠_sw≠
(&
a
->
m≠
, &
b
->map);

53 
	}
}

58 
	$sim≠_moved
(
sim≠
 *simap)

60 
	`hm≠_moved
(&
sim≠
->
m≠
);

61 
	}
}

65 
	$sim≠_˛ór
(
sim≠
 *simap)

67 
sim≠_node
 *
node
, *
√xt
;

69 
	`SIMAP_FOR_EACH_SAFE
 (
node
, 
√xt
, 
sim≠
) {

70 
	`hm≠_ªmove
(&
sim≠
->
m≠
, &
node
->node);

71 
	`‰ì
(
node
->
«me
);

72 
	`‰ì
(
node
);

74 
	}
}

78 
boﬁ


79 
	$sim≠_is_em±y
(c⁄° 
sim≠
 *simap)

81  
	`hm≠_is_em±y
(&
sim≠
->
m≠
);

82 
	}
}

85 
size_t


86 
	$sim≠_cou¡
(c⁄° 
sim≠
 *simap)

88  
	`hm≠_cou¡
(&
sim≠
->
m≠
);

89 
	}
}

96 
boﬁ


97 
	$sim≠_put
(
sim≠
 *sim≠, c⁄° *
«me
, 
d©a
)

99 
size_t
 
Àngth
 = 
	`°æí
(
«me
);

100 
size_t
 
hash
 = 
	`hash_«me
(
«me
, 
Àngth
);

101 
sim≠_node
 *
node
;

103 
node
 = 
	`sim≠_föd__
(
sim≠
, 
«me
, 
Àngth
, 
hash
);

104 i‡(
node
) {

105 
node
->
d©a
 = data;

106  
Ál£
;

108 
	`sim≠_add_noc›y__
(
sim≠
, 
	`xmemdup0
(
«me
, 
Àngth
), 
d©a
, 
hash
);

109  
åue
;

111 
	}
}

122 
	$sim≠_ö¸ó£
(
sim≠
 *sim≠, c⁄° *
«me
, 
amt
)

124 i‡(
amt
) {

125 
size_t
 
Àngth
 = 
	`°æí
(
«me
);

126 
size_t
 
hash
 = 
	`hash_«me
(
«me
, 
Àngth
);

127 
sim≠_node
 *
node
;

129 
node
 = 
	`sim≠_föd__
(
sim≠
, 
«me
, 
Àngth
, 
hash
);

130 i‡(
node
) {

131 
node
->
d©a
 +
amt
;

133 
node
 = 
	`sim≠_add_noc›y__
(
sim≠
, 
	`xmemdup0
(
«me
, 
Àngth
),

134 
amt
, 
hash
);

136  
node
->
d©a
;

140 
	}
}

144 
	$sim≠_dñëe
(
sim≠
 *sim≠, 
sim≠_node
 *
node
)

146 
	`hm≠_ªmove
(&
sim≠
->
m≠
, &
node
->node);

147 
	`‰ì
(
node
->
«me
);

148 
	`‰ì
(
node
);

149 
	}
}

153 
sim≠_node
 *

154 
	$sim≠_föd
(c⁄° 
sim≠
 *sim≠, c⁄° *
«me
)

156  
	`sim≠_föd_Àn
(
sim≠
, 
«me
, 
	`°æí
(name));

157 
	}
}

161 
sim≠_node
 *

162 
	$sim≠_föd_Àn
(c⁄° 
sim≠
 *sim≠, c⁄° *
«me
, 
size_t
 
Àn
)

164  
	`sim≠_föd__
(
sim≠
, 
«me
, 
Àn
, 
	`hash_«me
(name,Üen));

165 
	}
}

170 
	$sim≠_gë
(c⁄° 
sim≠
 *sim≠, c⁄° *
«me
)

172 
sim≠_node
 *
node
 = 
	`sim≠_föd
(
sim≠
, 
«me
);

173  
node
 ?Çode->
d©a
 : 0;

174 
	}
}

183 c⁄° 
sim≠_node
 **

184 
	$sim≠_s‹t
(c⁄° 
sim≠
 *simap)

186 i‡(
	`sim≠_is_em±y
(
sim≠
)) {

187  
NULL
;

189 c⁄° 
sim≠_node
 **
nodes
;

190 
sim≠_node
 *
node
;

191 
size_t
 
i
, 
n
;

193 
n
 = 
	`sim≠_cou¡
(
sim≠
);

194 
nodes
 = 
	`xmÆloc
(
n
 *  *nodes);

195 
i
 = 0;

196 
	`SIMAP_FOR_EACH
 (
node
, 
sim≠
) {

197 
nodes
[
i
++] = 
node
;

199 
	`as£π
(
i
 =
n
);

201 
	`qs‹t
(
nodes
, 
n
,  *nodes, 
com∑ª_nodes_by_«me
);

203  
nodes
;

205 
	}
}

207 
size_t


208 
	$hash_«me
(c⁄° *
«me
, 
size_t
 
Àngth
)

210  
	`hash_byãs
(
«me
, 
Àngth
, 0);

211 
	}
}

213 
sim≠_node
 *

214 
	$sim≠_föd__
(c⁄° 
sim≠
 *sim≠, c⁄° *
«me
, 
size_t
 
«me_Àn
,

215 
size_t
 
hash
)

217 
sim≠_node
 *
node
;

219 
	`HMAP_FOR_EACH_WITH_HASH
 (
node
,Çode, 
hash
, &
sim≠
->
m≠
) {

220 i‡(!
	`°∫cmp
(
node
->
«me
,Çame, 
«me_Àn
) && !node->name[name_len]) {

221  
node
;

224  
NULL
;

225 
	}
}

227 
sim≠_node
 *

228 
	$sim≠_add_noc›y__
(
sim≠
 *sim≠, *
«me
, 
d©a
,

229 
size_t
 
hash
)

231 
sim≠_node
 *
node
 = 
	`xmÆloc
( *node);

232 
node
->
«me
 =Çame;

233 
node
->
d©a
 = data;

234 
	`hm≠_ö£π
(&
sim≠
->
m≠
, &
node
->node, 
hash
);

235  
node
;

236 
	}
}

239 
	$com∑ª_nodes_by_«me
(c⁄° *
a_
, c⁄° *
b_
)

241 c⁄° 
sim≠_node
 *c⁄° *
a
 = 
a_
;

242 c⁄° 
sim≠_node
 *c⁄° *
b
 = 
b_
;

243  
	`°rcmp
((*
a
)->
«me
, (*
b
)->name);

244 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/simap.h

17 #i‚de‡
SIMAP_H


18 
	#SIMAP_H
 1

	)

20 
	~"hm≠.h
"

22 #ifde‡ 
__˝lu•lus


27 
	ssim≠
 {

28 
hm≠
 
m≠
;

31 
	ssim≠_node
 {

32 
hm≠_node
 
node
;

33 *
«me
;

34 
d©a
;

37 
	#SIMAP_INITIALIZER
(
SIMAP
Ë{ 
	`HMAP_INITIALIZER
(&(SIMAP)->
m≠
Ë}

	)

39 
	#SIMAP_FOR_EACH
(
SIMAP_NODE
, 
SIMAP
) \

40 
	`HMAP_FOR_EACH
 (
SIMAP_NODE
, 
node
, &(
SIMAP
)->
m≠
)

	)

42 
	#SIMAP_FOR_EACH_SAFE
(
SIMAP_NODE
, 
NEXT
, 
SIMAP
) \

43 
	`HMAP_FOR_EACH_SAFE
 (
SIMAP_NODE
, 
NEXT
, 
node
, &(
SIMAP
)->
m≠
)

	)

45 
sim≠_öô
(
sim≠
 *);

46 
sim≠_de°roy
(
sim≠
 *);

47 
sim≠_sw≠
(
sim≠
 *, simap *);

48 
sim≠_moved
(
sim≠
 *);

49 
sim≠_˛ór
(
sim≠
 *);

51 
boﬁ
 
sim≠_is_em±y
(c⁄° 
sim≠
 *);

52 
size_t
 
sim≠_cou¡
(c⁄° 
sim≠
 *);

54 
boﬁ
 
sim≠_put
(
sim≠
 *, const *, );

55 
sim≠_ö¸ó£
(
sim≠
 *, const *, );

57 
sim≠_gë
(c⁄° 
sim≠
 *, const *);

58 
sim≠_node
 *
sim≠_föd
(c⁄° 
sim≠
 *, const *);

59 
sim≠_node
 *
sim≠_föd_Àn
(c⁄° 
sim≠
 *,

60 c⁄° *, 
size_t
 
Àn
);

62 
sim≠_dñëe
(
sim≠
 *, 
sim≠_node
 *);

64 c⁄° 
sim≠_node
 **
sim≠_s‹t
(c⁄° 
sim≠
 *);

66 #ifde‡ 
__˝lu•lus


	@/home/lsch/mytest/openvswitch-1.9.0/lib/smap.c

15 
	~<c⁄fig.h
>

16 
	~"sm≠.h
"

18 
	~<as£π.h
>

20 
	~"hash.h
"

21 
	~"js⁄.h
"

23 
sm≠_node
 *
sm≠_add__
(
sm≠
 *, *, *,

24 
size_t
 
hash
);

25 
sm≠_node
 *
sm≠_föd__
(c⁄° 
sm≠
 *, c⁄° *
key
,

26 
size_t
 
key_Àn
, size_à
hash
);

27 
com∑ª_nodes_by_key
(const *, const *);

32 
	$sm≠_öô
(
sm≠
 *smap)

34 
	`hm≠_öô
(&
sm≠
->
m≠
);

35 
	}
}

38 
	$sm≠_de°roy
(
sm≠
 *smap)

40 i‡(
sm≠
) {

41 
	`sm≠_˛ór
(
sm≠
);

42 
	`hm≠_de°roy
(&
sm≠
->
m≠
);

44 
	}
}

48 
sm≠_node
 *

49 
	$sm≠_add
(
sm≠
 *sm≠, c⁄° *
key
, c⁄° *
vÆue
)

51 
size_t
 
key_Àn
 = 
	`°æí
(
key
);

52  
	`sm≠_add__
(
sm≠
, 
	`xmemdup0
(
key
, 
key_Àn
), 
	`x°rdup
(
vÆue
),

53 
	`hash_byãs
(
key
, 
key_Àn
, 0));

54 
	}
}

59 
boﬁ


60 
	$sm≠_add_⁄˚
(
sm≠
 *sm≠, c⁄° *
key
, c⁄° *
vÆue
)

62 i‡(!
	`sm≠_gë
(
sm≠
, 
key
)) {

63 
	`sm≠_add
(
sm≠
, 
key
, 
vÆue
);

64  
åue
;

66  
Ál£
;

68 
	}
}

73 
	$sm≠_add_f‹m©
(
sm≠
 *sm≠, c⁄° *
key
, c⁄° *
f‹m©
, ...)

75 
size_t
 
key_Àn
;

76 
va_li°
 
¨gs
;

77 *
vÆue
;

79 
	`va_°¨t
(
¨gs
, 
f‹m©
);

80 
vÆue
 = 
	`xva•rötf
(
f‹m©
, 
¨gs
);

81 
	`va_íd
(
¨gs
);

83 
key_Àn
 = 
	`°æí
(
key
);

84 
	`sm≠_add__
(
sm≠
, 
	`xmemdup0
(
key
, 
key_Àn
), 
vÆue
,

85 
	`hash_byãs
(
key
, 
key_Àn
, 0));

86 
	}
}

91 
	$sm≠_ª∂a˚
(
sm≠
 *sm≠, c⁄° *
key
, c⁄° *
vÆue
)

93 
size_t
 
key_Àn
 = 
	`°æí
(
key
);

94 
size_t
 
hash
 = 
	`hash_byãs
(
key
, 
key_Àn
, 0);

96 
sm≠_node
 *
node
;

98 
node
 = 
	`sm≠_föd__
(
sm≠
, 
key
, 
key_Àn
, 
hash
);

99 i‡(
node
) {

100 
	`‰ì
(
node
->
vÆue
);

101 
node
->
vÆue
 = 
	`x°rdup
(value);

103 
	`sm≠_add__
(
sm≠
, 
	`xmemdup0
(
key
, 
key_Àn
), 
	`x°rdup
(
vÆue
), 
hash
);

105 
	}
}

109 
	$sm≠_ªmove
(
sm≠
 *sm≠, c⁄° *
key
)

111 
sm≠_node
 *
node
 = 
	`sm≠_gë_node
(
sm≠
, 
key
);

113 i‡(
node
) {

114 
	`sm≠_ªmove_node
(
sm≠
, 
node
);

116 
	}
}

120 
	$sm≠_ªmove_node
(
sm≠
 *sm≠, 
sm≠_node
 *
node
)

122 
	`hm≠_ªmove
(&
sm≠
->
m≠
, &
node
->node);

123 
	`‰ì
(
node
->
key
);

124 
	`‰ì
(
node
->
vÆue
);

125 
	`‰ì
(
node
);

126 
	}
}

134 
	$sm≠_°ól
(
sm≠
 *sm≠, 
sm≠_node
 *
node
,

135 **
keyp
, **
vÆuï
)

137 i‡(
keyp
) {

138 *
keyp
 = 
node
->
key
;

140 
	`‰ì
(
node
->
key
);

143 i‡(
vÆuï
) {

144 *
vÆuï
 = 
node
->
vÆue
;

146 
	`‰ì
(
node
->
vÆue
);

149 
	`hm≠_ªmove
(&
sm≠
->
m≠
, &
node
->node);

150 
	`‰ì
(
node
);

151 
	}
}

155 
	$sm≠_˛ór
(
sm≠
 *smap)

157 
sm≠_node
 *
node
, *
√xt
;

159 
	`SMAP_FOR_EACH_SAFE
 (
node
, 
√xt
, 
sm≠
) {

160 
	`sm≠_ªmove_node
(
sm≠
, 
node
);

162 
	}
}

166 
	$sm≠_gë
(c⁄° 
sm≠
 *sm≠, c⁄° *
key
)

168 
sm≠_node
 *
node
 = 
	`sm≠_gë_node
(
sm≠
, 
key
);

169  
node
 ?Çode->
vÆue
 : 
NULL
;

170 
	}
}

173 
sm≠_node
 *

174 
	$sm≠_gë_node
(c⁄° 
sm≠
 *sm≠, c⁄° *
key
)

176 
size_t
 
key_Àn
 = 
	`°æí
(
key
);

177  
	`sm≠_föd__
(
sm≠
, 
key
, 
key_Àn
, 
	`hash_byãs
(key, key_len, 0));

178 
	}
}

183 
boﬁ


184 
	$sm≠_gë_boﬁ
(c⁄° 
sm≠
 *sm≠, c⁄° *
key
, 
boﬁ
 
def
)

186 c⁄° *
vÆue
 = 
	`sm≠_gë
(
sm≠
, 
key
);

188 i‡(!
vÆue
) {

189  
def
;

192 i‡(
def
) {

193  
	`°rˇ£cmp
("Ál£", 
vÆue
) != 0;

195  !
	`°rˇ£cmp
("åue", 
vÆue
);

197 
	}
}

202 
	$sm≠_gë_öt
(c⁄° 
sm≠
 *sm≠, c⁄° *
key
, 
def
)

204 c⁄° *
vÆue
 = 
	`sm≠_gë
(
sm≠
, 
key
);

206  
vÆue
 ? 
	`©oi
(vÆueË: 
def
;

207 
	}
}

210 
boﬁ


211 
	$sm≠_is_em±y
(c⁄° 
sm≠
 *smap)

213  
	`hm≠_is_em±y
(&
sm≠
->
m≠
);

214 
	}
}

217 
size_t


218 
	$sm≠_cou¡
(c⁄° 
sm≠
 *smap)

220  
	`hm≠_cou¡
(&
sm≠
->
m≠
);

221 
	}
}

225 
	$sm≠_˛⁄e
(
sm≠
 *
d°
, c⁄° sm≠ *
§c
)

227 c⁄° 
sm≠_node
 *
node
;

229 
	`sm≠_öô
(
d°
);

230 
	`SMAP_FOR_EACH
 (
node
, 
§c
) {

231 
	`sm≠_add__
(
d°
, 
	`x°rdup
(
node
->
key
), x°rdup“ode->
vÆue
),

232 
node
->node.
hash
);

234 
	}
}

238 c⁄° 
sm≠_node
 **

239 
	$sm≠_s‹t
(c⁄° 
sm≠
 *smap)

241 i‡(
	`sm≠_is_em±y
(
sm≠
)) {

242  
NULL
;

244 c⁄° 
sm≠_node
 **
nodes
;

245 
sm≠_node
 *
node
;

246 
size_t
 
i
, 
n
;

248 
n
 = 
	`sm≠_cou¡
(
sm≠
);

249 
nodes
 = 
	`xmÆloc
(
n
 *  *nodes);

250 
i
 = 0;

251 
	`SMAP_FOR_EACH
 (
node
, 
sm≠
) {

252 
nodes
[
i
++] = 
node
;

254 
	`as£π
(
i
 =
n
);

256 
	`qs‹t
(
nodes
, 
n
,  *nodes, 
com∑ª_nodes_by_key
);

258  
nodes
;

260 
	}
}

269 
	$sm≠_‰om_js⁄
(
sm≠
 *sm≠, c⁄° 
js⁄
 *json)

271 c⁄° 
shash_node
 *
node
;

273 
	`SHASH_FOR_EACH
 (
node
, 
	`js⁄_obje˘
(
js⁄
)) {

274 c⁄° 
js⁄
 *
vÆue
 = 
node
->
d©a
;

275 
	`sm≠_add
(
sm≠
, 
node
->
«me
, 
	`js⁄_°rög
(
vÆue
));

277 
	}
}

284 
js⁄
 *

285 
	$sm≠_to_js⁄
(c⁄° 
sm≠
 *smap)

287 c⁄° 
sm≠_node
 *
node
;

288 
js⁄
 *json;

290 
js⁄
 = 
	`js⁄_obje˘_¸óã
();

291 
	`SMAP_FOR_EACH
 (
node
, 
sm≠
) {

292 
	`js⁄_obje˘_put_°rög
(
js⁄
, 
node
->
key
,Çode->
vÆue
);

294  
js⁄
;

295 
	}
}

299 
sm≠_node
 *

300 
	$sm≠_add__
(
sm≠
 *sm≠, *
key
, *
vÆue
, 
size_t
 
hash
)

302 
sm≠_node
 *
node
 = 
	`xmÆloc
( *node);

303 
node
->
key
 = key;

304 
node
->
vÆue
 = value;

305 
	`hm≠_ö£π
(&
sm≠
->
m≠
, &
node
->node, 
hash
);

306  
node
;

307 
	}
}

309 
sm≠_node
 *

310 
	$sm≠_föd__
(c⁄° 
sm≠
 *sm≠, c⁄° *
key
, 
size_t
 
key_Àn
,

311 
size_t
 
hash
)

313 
sm≠_node
 *
node
;

315 
	`HMAP_FOR_EACH_WITH_HASH
 (
node
,Çode, 
hash
, &
sm≠
->
m≠
) {

316 i‡(!
	`°∫cmp
(
node
->
key
, key, 
key_Àn
) && !node->key[key_len]) {

317  
node
;

321  
NULL
;

322 
	}
}

325 
	$com∑ª_nodes_by_key
(c⁄° *
a_
, c⁄° *
b_
)

327 c⁄° 
sm≠_node
 *c⁄° *
a
 = 
a_
;

328 c⁄° 
sm≠_node
 *c⁄° *
b
 = 
b_
;

329  
	`°rcmp
((*
a
)->
key
, (*
b
)->key);

330 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/smap.h

15 #i‚de‡
SMAP_H


16 
	#SMAP_H
 1

	)

18 
	~"hm≠.h
"

20 
	gjs⁄
;

23 
	ssm≠
 {

24 
hm≠
 
	mm≠
;

27 
	ssm≠_node
 {

28 
hm≠_node
 
	mnode
;

29 *
	mkey
;

30 *
	mvÆue
;

33 
	#SMAP_INITIALIZER
(
SMAP
Ë{ 
	`HMAP_INITIALIZER
(&(SMAP)->
m≠
Ë}

	)

35 
	#SMAP_FOR_EACH
(
SMAP_NODE
, 
SMAP
) \

36 
	`HMAP_FOR_EACH
 (
SMAP_NODE
, 
node
, &(
SMAP
)->
m≠
)

	)

38 
	#SMAP_FOR_EACH_SAFE
(
SMAP_NODE
, 
NEXT
, 
SMAP
) \

39 
	`HMAP_FOR_EACH_SAFE
 (
SMAP_NODE
, 
NEXT
, 
node
, &(
SMAP
)->
m≠
)

	)

41 
sm≠_öô
(
sm≠
 *);

42 
sm≠_de°roy
(
sm≠
 *);

44 
sm≠_node
 *
sm≠_add
(
sm≠
 *, const *, const *);

45 
boﬁ
 
sm≠_add_⁄˚
(
sm≠
 *, const *, const *);

46 
	$sm≠_add_f‹m©
(
sm≠
 *, c⁄° *
key
, const *, ...)

47 
	`PRINTF_FORMAT
(3, 4);

48 
	`sm≠_ª∂a˚
(
sm≠
 *, const *, const *);

50 
	`sm≠_ªmove
(
sm≠
 *, const *);

51 
	`sm≠_ªmove_node
(
sm≠
 *, 
sm≠_node
 *);

52 
	`sm≠_°ól
(
sm≠
 *, 
sm≠_node
 *, **
keyp
, **
vÆuï
);

53 
	`sm≠_˛ór
(
sm≠
 *);

55 c⁄° *
	`sm≠_gë
(c⁄° 
sm≠
 *, const *);

56 
sm≠_node
 *
	`sm≠_gë_node
(c⁄° 
sm≠
 *, const *);

57 
boﬁ
 
	`sm≠_gë_boﬁ
(c⁄° 
sm≠
 *sm≠, c⁄° *
key
, boﬁ 
def
);

58 
	`sm≠_gë_öt
(c⁄° 
sm≠
 *sm≠, c⁄° *
key
, 
def
);

60 
boﬁ
 
	`sm≠_is_em±y
(c⁄° 
sm≠
 *);

61 
size_t
 
	`sm≠_cou¡
(c⁄° 
sm≠
 *);

63 
	`sm≠_˛⁄e
(
sm≠
 *
d°
, c⁄° sm≠ *
§c
);

64 c⁄° 
sm≠_node
 **
	`sm≠_s‹t
(c⁄° 
sm≠
 *);

66 
	`sm≠_‰om_js⁄
(
sm≠
 *, c⁄° 
js⁄
 *);

67 
js⁄
 *
	`sm≠_to_js⁄
(c⁄° 
sm≠
 *);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/socket-util.c

17 
	~<c⁄fig.h
>

18 
	~"sockë-utû.h
"

19 
	~<¨∑/öë.h
>

20 
	~<as£π.h
>

21 
	~<î∫o.h
>

22 
	~<f˙é.h
>

23 
	~<√t/if.h
>

24 
	~<√tdb.h
>

25 
	~<pﬁl.h
>

26 
	~<°ddef.h
>

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

30 
	~<sys/ªsour˚.h
>

31 
	~<sys/sockë.h
>

32 
	~<sys/°©.h
>

33 
	~<sys/uio.h
>

34 
	~<sys/un.h
>

35 
	~<uni°d.h
>

36 
	~"dy«mic-°rög.h
"

37 
	~"Áèl-sig«l.h
"

38 
	~"∑ckës.h
"

39 
	~"pﬁl-lo›.h
"

40 
	~"utû.h
"

41 
	~"vlog.h
"

42 #i‡
AF_PACKET
 && 
LINUX_DATAPATH


43 
	~<löux/if_∑ckë.h
>

45 #ifde‡
HAVE_NETLINK


46 
	~"√éök-¥Ÿocﬁ.h
"

47 
	~"√éök-sockë.h
"

50 
VLOG_DEFINE_THIS_MODULE
(
sockë_utû
);

55 #i‚de‡
LINUX_DATAPATH


56 
	#LINUX_DATAPATH
 0

	)

59 #i‚de‡
O_DIRECTORY


60 
	#O_DIRECTORY
 0

	)

63 
gësock›t_öt
(
fd
, 
Àvñ
, 
›ti⁄
, c⁄° *
›äame
,

64 *
vÆuï
);

69 
	$£t_n⁄blockög
(
fd
)

71 
Êags
 = 
	`f˙é
(
fd
, 
F_GETFL
, 0);

72 i‡(
Êags
 != -1) {

73 i‡(
	`f˙é
(
fd
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
) != -1) {

76 
	`VLOG_ERR
("f˙é(F_SETFLËÁûed: %s", 
	`°ªº‹
(
î∫o
));

77  
î∫o
;

80 
	`VLOG_ERR
("f˙é(F_GETFLËÁûed: %s", 
	`°ªº‹
(
î∫o
));

81  
î∫o
;

83 
	}
}

86 
	$x£t_n⁄blockög
(
fd
)

88 i‡(
	`£t_n⁄blockög
(
fd
)) {

89 
	`exô
(
EXIT_FAILURE
);

91 
	}
}

94 
	$£t_ds˝
(
fd
, 
uöt8_t
 
ds˝
)

96 
vÆ
;

98 i‡(
ds˝
 > 63) {

99  
EINVAL
;

102 
vÆ
 = 
ds˝
 << 2;

103 i‡(
	`£tsock›t
(
fd
, 
IPPROTO_IP
, 
IP_TOS
, &
vÆ
,  val)) {

104  
î∫o
;

108 
	}
}

110 
boﬁ


111 
	$æim_is_föôe
(
æim_t
 
limô
)

113 i‡(
limô
 =
RLIM_INFINITY
) {

114  
Ál£
;

117 #ifde‡
RLIM_SAVED_CUR


118 i‡(
limô
 =
RLIM_SAVED_CUR
) {

119  
Ál£
;

123 #ifde‡
RLIM_SAVED_MAX


124 i‡(
limô
 =
RLIM_SAVED_MAX
) {

125  
Ál£
;

129  
åue
;

130 
	}
}

134 
	$gë_max_fds
()

136 
max_fds
 = -1;

137 i‡(
max_fds
 < 0) {

138 
æimô
 
r
;

139 i‡(!
	`gëæimô
(
RLIMIT_NOFILE
, &
r
Ë&& 
	`æim_is_föôe
‘.
æim_cur
)) {

140 
max_fds
 = 
r
.
æim_cur
;

142 
	`VLOG_WARN
("failedÅo obtain fdÜimit, defaultingÅo 1024");

143 
max_fds
 = 1024;

146  
max_fds
;

147 
	}
}

153 
	$lookup_ù
(c⁄° *
ho°_«me
, 
ö_addr
 *
addr
)

155 i‡(!
	`öë_©⁄
(
ho°_«me
, 
addr
)) {

156 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 5);

157 
	`VLOG_ERR_RL
(&
æ
, "\"%s\" i†nŸá vÆid IPáddªss", 
ho°_«me
);

158  
ENOENT
;

161 
	}
}

167 
	$lookup_ùv6
(c⁄° *
ho°_«me
, 
ö6_addr
 *
addr
)

169 i‡(
	`öë_±⁄
(
AF_INET6
, 
ho°_«me
, 
addr
) != 1) {

170 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 5);

171 
	`VLOG_ERR_RL
(&
æ
, "\"%s\" i†nŸá vÆid IPv6áddªss", 
ho°_«me
);

172  
ENOENT
;

175 
	}
}

187 
	$lookup_ho°«me
(c⁄° *
ho°_«me
, 
ö_addr
 *
addr
)

189 
ho°ít
 *
h
;

191 i‡(
	`öë_©⁄
(
ho°_«me
, 
addr
)) {

195 
h
 = 
	`gëho°by«me
(
ho°_«me
);

196 i‡(
h
) {

197 *
addr
 = *(
ö_addr
 *Ë
h
->
h_addr
;

201  (
h_î∫o
 =
HOST_NOT_FOUND
 ? 
ENOENT


202 : 
h_î∫o
 =
TRY_AGAIN
 ? 
EAGAIN


203 : 
h_î∫o
 =
NO_RECOVERY
 ? 
EIO


204 : 
h_î∫o
 =
NO_ADDRESS
 ? 
ENXIO


205 : 
EINVAL
);

206 
	}
}

211 
	$gë_sockë_îr‹
(
fd
)

213 
îr‹
;

215 i‡(
	`gësock›t_öt
(
fd
, 
SOL_SOCKET
, 
SO_ERROR
, "SO_ERROR", &
îr‹
)) {

216 
îr‹
 = 
î∫o
;

218  
îr‹
;

219 
	}
}

222 
	$check_c⁄√˘i⁄_com∂ëi⁄
(
fd
)

224 
pﬁlfd
 
pfd
;

225 
ªtvÆ
;

227 
pfd
.
fd
 = fd;

228 
pfd
.
evíts
 = 
POLLOUT
;

230 
ªtvÆ
 = 
	`pﬁl
(&
pfd
, 1, 0);

231 } 
ªtvÆ
 < 0 && 
î∫o
 =
EINTR
);

232 i‡(
ªtvÆ
 == 1) {

233  
	`gë_sockë_îr‹
(
fd
);

234 } i‡(
ªtvÆ
 < 0) {

235 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(5, 10);

236 
	`VLOG_ERR_RL
(&
æ
, "pﬁl: %s", 
	`°ªº‹
(
î∫o
));

237  
î∫o
;

239  
EAGAIN
;

241 
	}
}

249 
	$døö_rcvbuf
(
fd
)

251 
rcvbuf
;

253 
rcvbuf
 = 
	`gë_sockë_rcvbuf
(
fd
);

254 i‡(
rcvbuf
 < 0) {

255  -
rcvbuf
;

258 
rcvbuf
 > 0) {

267 
buf„r
[
LINUX_DATAPATH
 ? 1 : 2048];

268 
ssize_t
 
n_byãs
 = 
	`ªcv
(
fd
, 
buf„r
,  buffer,

269 
MSG_TRUNC
 | 
MSG_DONTWAIT
);

270 i‡(
n_byãs
 <0 ||Ç_byã†>
rcvbuf
) {

273 
rcvbuf
 -
n_byãs
;

276 
	}
}

281 
	$gë_sockë_rcvbuf
(
sock
)

283 
rcvbuf
;

284 
îr‹
;

286 
îr‹
 = 
	`gësock›t_öt
(
sock
, 
SOL_SOCKET
, 
SO_RCVBUF
, "SO_RCVBUF", &
rcvbuf
);

287  
îr‹
 ? -îr‹ : 
rcvbuf
;

288 
	}
}

294 
	$døö_fd
(
fd
, 
size_t
 
n_∑ckës
)

296 ; 
n_∑ckës
 > 0;Ç_packets--) {

301 
buf„r
[128];

302 i‡(
	`ªad
(
fd
, 
buf„r
,  buffer) <= 0) {

306 
	}
}

311 
	$make_sockaddr_un__
(c⁄° *
«me
, 
sockaddr_un
 *
un
, 
sockÀn_t
 *
un_Àn
)

313 
un
->
sun_Ámûy
 = 
AF_UNIX
;

314 
	`ovs_°rz˝y
(
un
->
sun_∑th
, 
«me
,  un->sun_path);

315 *
un_Àn
 = (
	`off£tof
(
sockaddr_un
, 
sun_∑th
)

316 + 
	`°æí
 (
un
->
sun_∑th
) + 1);

317 
	}
}

327 
	$make_sockaddr_un
(c⁄° *
«me
, 
sockaddr_un
 *
un
, 
sockÀn_t
 *
un_Àn
,

328 *
dúfdp
)

330 íum { 
MAX_UN_LEN
 =  
un
->
sun_∑th
 - 1 };

332 *
dúfdp
 = -1;

333 i‡(
	`°æí
(
«me
Ë> 
MAX_UN_LEN
) {

334 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 1);

336 i‡(
LINUX_DATAPATH
) {

341 *
dú
, *
ba£
;

342 *
sh‹t_«me
;

343 
dúfd
;

345 
dú
 = 
	`dú_«me
(
«me
);

346 
ba£
 = 
	`ba£_«me
(
«me
);

348 
dúfd
 = 
	`›í
(
dú
, 
O_DIRECTORY
 | 
O_RDONLY
);

349 i‡(
dúfd
 < 0) {

350 
	`‰ì
(
ba£
);

351 
	`‰ì
(
dú
);

352  
î∫o
;

355 
sh‹t_«me
 = 
	`xa•rötf
("/¥oc/£lf/fd/%d/%s", 
dúfd
, 
ba£
);

356 
	`‰ì
(
dú
);

357 
	`‰ì
(
ba£
);

359 i‡(
	`°æí
(
sh‹t_«me
Ë<
MAX_UN_LEN
) {

360 
	`make_sockaddr_un__
(
sh‹t_«me
, 
un
, 
un_Àn
);

361 
	`‰ì
(
sh‹t_«me
);

362 *
dúfdp
 = 
dúfd
;

365 
	`‰ì
(
sh‹t_«me
);

366 
	`˛o£
(
dúfd
);

368 
	`VLOG_WARN_RL
(&
æ
, "Unix socketÇame %s isÜongerÅhan maximum "

369 "%d byã†”ví sh‹ã√d)", 
«me
, 
MAX_UN_LEN
);

372 
	`VLOG_WARN_RL
(&
æ
, "Unix socketÇame %s isÜongerÅhan maximum "

373 "%d byãs", 
«me
, 
MAX_UN_LEN
);

376  
ENAMETOOLONG
;

378 
	`make_sockaddr_un__
(
«me
, 
un
, 
un_Àn
);

381 
	}
}

385 
	$böd_unix_sockë
(
fd
, 
sockaddr
 *
sun
, 
sockÀn_t
 
sun_Àn
)

388 
mode_t
 
ﬁd_umask
 = 
	`umask
(0077);

389 
îr‹
 = 
	`böd
(
fd
, 
sun
, 
sun_Àn
Ë? 
î∫o
 : 0;

390 
	`umask
(
ﬁd_umask
);

391  
îr‹
;

392 
	}
}

401 
	$make_unix_sockë
(
°yÀ
, 
boﬁ
 
n⁄block
,

402 c⁄° *
böd_∑th
, c⁄° *
c⁄√˘_∑th
)

404 
îr‹
;

405 
fd
;

407 
fd
 = 
	`sockë
(
PF_UNIX
, 
°yÀ
, 0);

408 i‡(
fd
 < 0) {

409  -
î∫o
;

416 i‡(
n⁄block
) {

417 
Êags
 = 
	`f˙é
(
fd
, 
F_GETFL
, 0);

418 i‡(
Êags
 == -1) {

419 
îr‹
 = 
î∫o
;

420 
îr‹
;

422 i‡(
	`f˙é
(
fd
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
) == -1) {

423 
îr‹
 = 
î∫o
;

424 
îr‹
;

428 i‡(
böd_∑th
) {

429 
sockaddr_un
 
un
;

430 
sockÀn_t
 
un_Àn
;

431 
dúfd
;

433 i‡(
	`u∆ök
(
böd_∑th
Ë&& 
î∫o
 !
ENOENT
) {

434 
	`VLOG_WARN
("u∆ökög \"%s\": %s\n", 
böd_∑th
, 
	`°ªº‹
(
î∫o
));

436 
	`Áèl_sig«l_add_fûe_to_u∆ök
(
böd_∑th
);

438 
îr‹
 = 
	`make_sockaddr_un
(
böd_∑th
, &
un
, &
un_Àn
, &
dúfd
);

439 i‡(!
îr‹
) {

440 
îr‹
 = 
	`böd_unix_sockë
(
fd
, (
sockaddr
 *Ë&
un
, 
un_Àn
);

442 i‡(
dúfd
 >= 0) {

443 
	`˛o£
(
dúfd
);

445 i‡(
îr‹
) {

446 
îr‹
;

450 i‡(
c⁄√˘_∑th
) {

451 
sockaddr_un
 
un
;

452 
sockÀn_t
 
un_Àn
;

453 
dúfd
;

455 
îr‹
 = 
	`make_sockaddr_un
(
c⁄√˘_∑th
, &
un
, &
un_Àn
, &
dúfd
);

456 i‡(!
îr‹


457 && 
	`c⁄√˘
(
fd
, (
sockaddr
*Ë&
un
, 
un_Àn
)

458 && 
î∫o
 !
EINPROGRESS
) {

459 
îr‹
 = 
î∫o
;

461 i‡(
dúfd
 >= 0) {

462 
	`˛o£
(
dúfd
);

464 i‡(
îr‹
) {

465 
îr‹
;

469  
fd
;

471 
îr‹
:

472 i‡(
îr‹
 =
EAGAIN
) {

473 
îr‹
 = 
EPROTO
;

475 i‡(
böd_∑th
) {

476 
	`Áèl_sig«l_u∆ök_fûe_now
(
böd_∑th
);

478 
	`˛o£
(
fd
);

479  -
îr‹
;

480 
	}
}

483 
	$gë_unix_«me_Àn
(
sockÀn_t
 
sun_Àn
)

485  (
sun_Àn
 >
	`off£tof
(
sockaddr_un
, 
sun_∑th
)

486 ? 
sun_Àn
 - 
	`off£tof
(
sockaddr_un
, 
sun_∑th
)

488 
	}
}

490 
ovs_be32


491 
	$guess_√tmask
(
ovs_be32
 
ù_
)

493 
uöt32_t
 
ù
 = 
	`¡ohl
(
ù_
);

494  ((
ù
 >> 31Ë=0 ? 
	`ht⁄l
(0xff000000)

495 : (
ù
 >> 30Ë=2 ? 
	`ht⁄l
(0xffff0000)

496 : (
ù
 >> 29Ë=6 ? 
	`ht⁄l
(0xffffff00)

497 : 
	`ht⁄l
(0));

498 
	}
}

506 
boﬁ


507 
	$öë_∑r£_a˘ive
(c⁄° *
èrgë_
, 
uöt16_t
 
deÁu…_p‹t
,

508 
sockaddr_ö
 *
söp
)

510 *
èrgë
 = 
	`x°rdup
(
èrgë_
);

511 *
ßve_±r
 = 
NULL
;

512 c⁄° *
ho°_«me
;

513 c⁄° *
p‹t_°rög
;

514 
boﬁ
 
ok
 = 
Ál£
;

517 
söp
->
sö_Ámûy
 = 
AF_INET
;

518 
söp
->
sö_p‹t
 = 
	`ht⁄s
(
deÁu…_p‹t
);

521 
ho°_«me
 = 
	`°πok_r
(
èrgë
, ":", &
ßve_±r
);

522 
p‹t_°rög
 = 
	`°πok_r
(
NULL
, ":", &
ßve_±r
);

523 i‡(!
ho°_«me
) {

524 
	`VLOG_ERR
("%s: badÖì∏«mêf‹m©", 
èrgë_
);

525 
exô
;

529 i‡(
	`lookup_ù
(
ho°_«me
, &
söp
->
sö_addr
)) {

530 
exô
;

532 i‡(
p‹t_°rög
 && 
	`©oi
(port_string)) {

533 
söp
->
sö_p‹t
 = 
	`ht⁄s
(
	`©oi
(
p‹t_°rög
));

534 } i‡(!
deÁu…_p‹t
) {

535 
	`VLOG_ERR
("%s:Ö‹ànumbî mu° bê•ecifõd", 
èrgë_
);

536 
exô
;

539 
ok
 = 
åue
;

541 
exô
:

542 i‡(!
ok
) {

543 
	`mem£t
(
söp
, 0,  *sinp);

545 
	`‰ì
(
èrgë
);

546  
ok
;

547 
	}
}

568 
	$öë_›í_a˘ive
(
°yÀ
, c⁄° *
èrgë
, 
uöt16_t
 
deÁu…_p‹t
,

569 
sockaddr_ö
 *
söp
, *
fdp
, 
uöt8_t
 
ds˝
)

571 
sockaddr_ö
 
sö
;

572 
fd
 = -1;

573 
îr‹
;

576 i‡(!
	`öë_∑r£_a˘ive
(
èrgë
, 
deÁu…_p‹t
, &
sö
)) {

577 
îr‹
 = 
EAFNOSUPPORT
;

578 
exô
;

582 
fd
 = 
	`sockë
(
AF_INET
, 
°yÀ
, 0);

583 i‡(
fd
 < 0) {

584 
	`VLOG_ERR
("%s: sockë: %s", 
èrgë
, 
	`°ªº‹
(
î∫o
));

585 
îr‹
 = 
î∫o
;

586 
exô
;

588 
îr‹
 = 
	`£t_n⁄blockög
(
fd
);

589 i‡(
îr‹
) {

590 
exô
;

596 
îr‹
 = 
	`£t_ds˝
(
fd
, 
ds˝
);

597 i‡(
îr‹
) {

598 
	`VLOG_ERR
("%s: sockë: %s", 
èrgë
, 
	`°ªº‹
(
îr‹
));

599 
exô
;

603 
îr‹
 = 
	`c⁄√˘
(
fd
, (
sockaddr
 *Ë&
sö
,  söË=0 ? 0 : 
î∫o
;

604 i‡(
îr‹
 =
EINPROGRESS
) {

605 
îr‹
 = 
EAGAIN
;

608 
exô
:

609 i‡(!
îr‹
 ||Éº‹ =
EAGAIN
) {

610 i‡(
söp
) {

611 *
söp
 = 
sö
;

613 } i‡(
fd
 >= 0) {

614 
	`˛o£
(
fd
);

615 
fd
 = -1;

617 *
fdp
 = 
fd
;

618  
îr‹
;

619 
	}
}

633 
boﬁ


634 
	$öë_∑r£_∑ssive
(c⁄° *
èrgë_
, 
deÁu…_p‹t
,

635 
sockaddr_ö
 *
söp
)

637 *
èrgë
 = 
	`x°rdup
(
èrgë_
);

638 *
°rög_±r
 = 
èrgë
;

639 c⁄° *
ho°_«me
;

640 c⁄° *
p‹t_°rög
;

641 
boﬁ
 
ok
 = 
Ál£
;

642 
p‹t
;

645 
	`mem£t
(
söp
, 0,  *sinp);

646 
söp
->
sö_Ámûy
 = 
AF_INET
;

647 
söp
->
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

648 
söp
->
sö_p‹t
 = 
	`ht⁄s
(
deÁu…_p‹t
);

651 
p‹t_°rög
 = 
	`°r£p
(&
°rög_±r
, ":");

652 i‡(
p‹t_°rög
 && 
	`°r_to_öt
’‹t_°rög, 10, &
p‹t
)) {

653 
söp
->
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

654 } i‡(
deÁu…_p‹t
 < 0) {

655 
	`VLOG_ERR
("%s:Ö‹ànumbî mu° bê•ecifõd", 
èrgë_
);

656 
exô
;

660 
ho°_«me
 = 
	`°r£p
(&
°rög_±r
, ":");

661 i‡(
ho°_«me
 && ho°_«me[0] && 
	`lookup_ù
(ho°_«me, &
söp
->
sö_addr
)) {

662 
exô
;

665 
ok
 = 
åue
;

667 
exô
:

668 i‡(!
ok
) {

669 
	`mem£t
(
söp
, 0,  *sinp);

671 
	`‰ì
(
èrgë
);

672  
ok
;

673 
	}
}

694 
	$öë_›í_∑ssive
(
°yÀ
, c⁄° *
èrgë
, 
deÁu…_p‹t
,

695 
sockaddr_ö
 *
söp
, 
uöt8_t
 
ds˝
)

697 
sockaddr_ö
 
sö
;

698 
fd
 = 0, 
îr‹
;

699 
yes
 = 1;

701 i‡(!
	`öë_∑r£_∑ssive
(
èrgë
, 
deÁu…_p‹t
, &
sö
)) {

702  -
EAFNOSUPPORT
;

706 
fd
 = 
	`sockë
(
AF_INET
, 
°yÀ
, 0);

707 i‡(
fd
 < 0) {

708 
îr‹
 = 
î∫o
;

709 
	`VLOG_ERR
("%s: sockë: %s", 
èrgë
, 
	`°ªº‹
(
îr‹
));

710  -
îr‹
;

712 
îr‹
 = 
	`£t_n⁄blockög
(
fd
);

713 i‡(
îr‹
) {

714 
îr‹
;

716 i‡(
°yÀ
 =
SOCK_STREAM


717 && 
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
yes
,  yes) < 0) {

718 
îr‹
 = 
î∫o
;

719 
	`VLOG_ERR
("%s: sësock›t(SO_REUSEADDR): %s", 
èrgë
, 
	`°ªº‹
(
îr‹
));

720 
îr‹
;

724 i‡(
	`böd
(
fd
, (
sockaddr
 *Ë&
sö
,  sin) < 0) {

725 
îr‹
 = 
î∫o
;

726 
	`VLOG_ERR
("%s: böd: %s", 
èrgë
, 
	`°ªº‹
(
îr‹
));

727 
îr‹
;

733 
îr‹
 = 
	`£t_ds˝
(
fd
, 
ds˝
);

734 i‡(
îr‹
) {

735 
	`VLOG_ERR
("%s: sockë: %s", 
èrgë
, 
	`°ªº‹
(
îr‹
));

736 
îr‹
;

740 i‡(
°yÀ
 =
SOCK_STREAM
 && 
	`li°í
(
fd
, 10) < 0) {

741 
îr‹
 = 
î∫o
;

742 
	`VLOG_ERR
("%s:Üi°í: %s", 
èrgë
, 
	`°ªº‹
(
îr‹
));

743 
îr‹
;

746 i‡(
söp
) {

747 
sockÀn_t
 
sö_Àn
 =  
sö
;

748 i‡(
	`gësock«me
(
fd
, (
sockaddr
 *Ë&
sö
, &
sö_Àn
) < 0){

749 
îr‹
 = 
î∫o
;

750 
	`VLOG_ERR
("%s: gësock«me: %s", 
èrgë
, 
	`°ªº‹
(
îr‹
));

751 
îr‹
;

753 i‡(
sö
.
sö_Ámûy
 !
AF_INET
 || 
sö_Àn
 !=  sin) {

754 
îr‹
 = 
EAFNOSUPPORT
;

755 
	`VLOG_ERR
("%s: gësock«me: invÆid sockëÇame", 
èrgë
);

756 
îr‹
;

758 *
söp
 = 
sö
;

761  
fd
;

763 
îr‹
:

764 
	`˛o£
(
fd
);

765  -
îr‹
;

766 
	}
}

772 
	$gë_nuŒ_fd
()

774 
nuŒ_fd
 = -1;

775 i‡(
nuŒ_fd
 < 0) {

776 
nuŒ_fd
 = 
	`›í
("/dev/nuŒ", 
O_RDWR
);

777 i‡(
nuŒ_fd
 < 0) {

778 
îr‹
 = 
î∫o
;

779 
	`VLOG_ERR
("couldÇŸ o≥¿/dev/nuŒ: %s", 
	`°ªº‹
(
îr‹
));

780  -
îr‹
;

783  
nuŒ_fd
;

784 
	}
}

787 
	$ªad_fuŒy
(
fd
, *
p_
, 
size_t
 
size
, size_à*
byãs_ªad
)

789 
uöt8_t
 *
p
 = 
p_
;

791 *
byãs_ªad
 = 0;

792 
size
 > 0) {

793 
ssize_t
 
ªtvÆ
 = 
	`ªad
(
fd
, 
p
, 
size
);

794 i‡(
ªtvÆ
 > 0) {

795 *
byãs_ªad
 +
ªtvÆ
;

796 
size
 -
ªtvÆ
;

797 
p
 +
ªtvÆ
;

798 } i‡(
ªtvÆ
 == 0) {

799  
EOF
;

800 } i‡(
î∫o
 !
EINTR
) {

801  
î∫o
;

805 
	}
}

808 
	$wrôe_fuŒy
(
fd
, c⁄° *
p_
, 
size_t
 
size
, size_à*
byãs_wrôãn
)

810 c⁄° 
uöt8_t
 *
p
 = 
p_
;

812 *
byãs_wrôãn
 = 0;

813 
size
 > 0) {

814 
ssize_t
 
ªtvÆ
 = 
	`wrôe
(
fd
, 
p
, 
size
);

815 i‡(
ªtvÆ
 > 0) {

816 *
byãs_wrôãn
 +
ªtvÆ
;

817 
size
 -
ªtvÆ
;

818 
p
 +
ªtvÆ
;

819 } i‡(
ªtvÆ
 == 0) {

820 
	`VLOG_WARN
("writeÑeturned 0");

821  
EPROTO
;

822 } i‡(
î∫o
 !
EINTR
) {

823  
î∫o
;

827 
	}
}

832 
	$fsync_∑ª¡_dú
(c⁄° *
fûe_«me
)

834 
îr‹
 = 0;

835 *
dú
;

836 
fd
;

838 
dú
 = 
	`dú_«me
(
fûe_«me
);

839 
fd
 = 
	`›í
(
dú
, 
O_RDONLY
);

840 i‡(
fd
 >= 0) {

841 i‡(
	`fsync
(
fd
)) {

842 i‡(
î∫o
 =
EINVAL
 ||Éºnÿ=
EROFS
) {

846 
îr‹
 = 
î∫o
;

847 
	`VLOG_ERR
("%s: fsyn¯Áûed (%s)", 
dú
, 
	`°ªº‹
(
îr‹
));

850 
	`˛o£
(
fd
);

852 
îr‹
 = 
î∫o
;

853 
	`VLOG_ERR
("%s: o≥¿Áûed (%s)", 
dú
, 
	`°ªº‹
(
îr‹
));

855 
	`‰ì
(
dú
);

857  
îr‹
;

858 
	}
}

865 
	$gë_mtime
(c⁄° *
fûe_«me
, 
time•ec
 *
mtime
)

867 
°©
 
s
;

869 i‡(!
	`°©
(
fûe_«me
, &
s
)) {

870 
mtime
->
tv_£c
 = 
s
.
°_mtime
;

872 #i‡
HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC


873 
mtime
->
tv_n£c
 = 
s
.
°_mtim
.tv_nsec;

874 #ñi‡
HAVE_STRUCT_STAT_ST_MTIMENSEC


875 
mtime
->
tv_n£c
 = 
s
.
°_mtimí£c
;

877 
mtime
->
tv_n£c
 = 0;

882 
mtime
->
tv_£c
 = mtime->
tv_n£c
 = 0;

883  
î∫o
;

885 
	}
}

888 
	$xpùe
(
fds
[2])

890 i‡(
	`pùe
(
fds
)) {

891 
	`VLOG_FATAL
("ÁûedÅÿ¸óãÖùê(%s)", 
	`°ªº‹
(
î∫o
));

893 
	}
}

896 
	$xpùe_n⁄blockög
(
fds
[2])

898 
	`xpùe
(
fds
);

899 
	`x£t_n⁄blockög
(
fds
[0]);

900 
	`x£t_n⁄blockög
(
fds
[1]);

901 
	}
}

904 
	$xsockë∑ú
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
, 
fds
[2])

906 i‡(
	`sockë∑ú
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
, 
fds
)) {

907 
	`VLOG_FATAL
("ÁûedÅÿ¸óã sockë∑ú (%s)", 
	`°ªº‹
(
î∫o
));

909 
	}
}

912 
	$gësock›t_öt
(
fd
, 
Àvñ
, 
›ti⁄
, c⁄° *
›äame
, *
vÆuï
)

914 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(5, 10);

915 
sockÀn_t
 
Àn
;

916 
vÆue
;

917 
îr‹
;

919 
Àn
 =  
vÆue
;

920 i‡(
	`gësock›t
(
fd
, 
Àvñ
, 
›ti⁄
, &
vÆue
, &
Àn
)) {

921 
îr‹
 = 
î∫o
;

922 
	`VLOG_ERR_RL
(&
æ
, "gësock›t(%s): %s", 
›äame
, 
	`°ªº‹
(
îr‹
));

923 } i‡(
Àn
 ! 
vÆue
) {

924 
îr‹
 = 
EINVAL
;

925 
	`VLOG_ERR_RL
(&
æ
, "getsockopt(%s): value is %u bytes (expected %zu)",

926 
›äame
, (Ë
Àn
,  
vÆue
);

928 
îr‹
 = 0;

931 *
vÆuï
 = 
îr‹
 ? 0 : 
vÆue
;

932  
îr‹
;

933 
	}
}

936 
des¸ibe_sockaddr
(
ds
 *
°rög
, 
fd
,

937 (*
gëaddr
)(, 
sockaddr
 *, 
sockÀn_t
 *))

939 
sockaddr_°‹age
 
ss
;

940 
sockÀn_t
 
Àn
 =  
ss
;

942 i‡(!
	`gëaddr
(
fd
, (
sockaddr
 *Ë&
ss
, &
Àn
)) {

943 i‡(
ss
.
ss_Ámûy
 =
AF_INET
) {

944 
sockaddr_ö
 
sö
;

946 
	`mem˝y
(&
sö
, &
ss
,  sin);

947 
	`ds_put_f‹m©
(
°rög
, 
IP_FMT
":%"
PRIu16
,

948 
	`IP_ARGS
(&
sö
.
sö_addr
.
s_addr
), 
	`¡ohs
(sö.
sö_p‹t
));

949 } i‡(
ss
.
ss_Ámûy
 =
AF_UNIX
) {

950 
sockaddr_un
 
sun
;

951 c⁄° *
nuŒ
;

952 
size_t
 
maxÀn
;

954 
	`mem˝y
(&
sun
, &
ss
,  sun);

955 
maxÀn
 = 
Àn
 - 
	`off£tof
(
sockaddr_un
, 
sun_∑th
);

956 
nuŒ
 = 
	`memchr
(
sun
.
sun_∑th
, '\0', 
maxÀn
);

957 
	`ds_put_buf„r
(
°rög
, 
sun
.
sun_∑th
,

958 
nuŒ
 ?ÇuŒ - 
sun
.
sun_∑th
 : 
maxÀn
);

960 #ifde‡
HAVE_NETLINK


961 i‡(
ss
.
ss_Ámûy
 =
AF_NETLINK
) {

962 
¥Ÿocﬁ
;

966 #i‚de‡
SO_PROTOCOL


967 
	#SO_PROTOCOL
 38

	)

970 i‡(!
	`gësock›t_öt
(
fd
, 
SOL_SOCKET
, 
SO_PROTOCOL
, "SO_PROTOCOL",

971 &
¥Ÿocﬁ
)) {

972 
¥Ÿocﬁ
) {

973 
NETLINK_ROUTE
:

974 
	`ds_put_c°r
(
°rög
, "NETLINK_ROUTE");

977 
NETLINK_GENERIC
:

978 
	`ds_put_c°r
(
°rög
, "NETLINK_GENERIC");

982 
	`ds_put_f‹m©
(
°rög
, "AF_NETLINK famûy %d", 
¥Ÿocﬁ
);

986 
	`ds_put_c°r
(
°rög
, "AF_NETLINK");

990 #i‡
AF_PACKET
 && 
LINUX_DATAPATH


991 i‡(
ss
.
ss_Ámûy
 =
AF_PACKET
) {

992 
sockaddr_Œ
 
¶l
;

994 
	`mem˝y
(&
¶l
, &
ss
,  sll);

995 
	`ds_put_c°r
(
°rög
, "AF_PACKET");

996 i‡(
¶l
.
¶l_ifödex
) {

997 
«me
[
IFNAMSIZ
];

999 i‡(
	`if_ödext⁄ame
(
¶l
.
¶l_ifödex
, 
«me
)) {

1000 
	`ds_put_f‹m©
(
°rög
, "(%s)", 
«me
);

1002 
	`ds_put_f‹m©
(
°rög
, "(ifödex=%d)", 
¶l
.
¶l_ifödex
);

1005 i‡(
¶l
.
¶l_¥Ÿocﬁ
) {

1006 
	`ds_put_f‹m©
(
°rög
, "’rŸocﬁ=0x%"
PRIu16
")",

1007 
	`¡ohs
(
¶l
.
¶l_¥Ÿocﬁ
));

1011 i‡(
ss
.
ss_Ámûy
 =
AF_UNSPEC
) {

1012 
	`ds_put_c°r
(
°rög
, "AF_UNSPEC");

1014 
	`ds_put_f‹m©
(
°rög
, "AF_%d", (Ë
ss
.
ss_Ámûy
);

1017 
	}
}

1020 #ifde‡
LINUX_DATAPATH


1022 
	$put_fd_fûíame
(
ds
 *
°rög
, 
fd
)

1024 
buf
[1024];

1025 *
lök«me
;

1026 
n
;

1028 
lök«me
 = 
	`xa•rötf
("/¥oc/£lf/fd/%d", 
fd
);

1029 
n
 = 
	`ªadlök
(
lök«me
, 
buf
,  buf);

1030 i‡(
n
 > 0) {

1031 
	`ds_put_ch¨
(
°rög
, ' ');

1032 
	`ds_put_buf„r
(
°rög
, 
buf
, 
n
);

1033 i‡(
n
 >  
buf
) {

1034 
	`ds_put_c°r
(
°rög
, "...");

1037 
	`‰ì
(
lök«me
);

1038 
	}
}

1043 
	$des¸ibe_fd
(
fd
)

1045 
ds
 
°rög
;

1046 
°©
 
s
;

1048 
	`ds_öô
(&
°rög
);

1049 i‡(
	`f°©
(
fd
, &
s
)) {

1050 
	`ds_put_f‹m©
(&
°rög
, "f°© faûed (%s)", 
	`°ªº‹
(
î∫o
));

1051 } i‡(
	`S_ISSOCK
(
s
.
°_mode
)) {

1052 
	`des¸ibe_sockaddr
(&
°rög
, 
fd
, 
gësock«me
);

1053 
	`ds_put_c°r
(&
°rög
, "<->");

1054 
	`des¸ibe_sockaddr
(&
°rög
, 
fd
, 
gë≥î«me
);

1056 
	`ds_put_c°r
(&
°rög
, (
	`ißây
(
fd
) ? "tty"

1057 : 
	`S_ISDIR
(
s
.
°_mode
) ? "directory"

1058 : 
	`S_ISCHR
(
s
.
°_mode
) ? "character device"

1059 : 
	`S_ISBLK
(
s
.
°_mode
) ? "block device"

1060 : 
	`S_ISREG
(
s
.
°_mode
) ? "file"

1061 : 
	`S_ISFIFO
(
s
.
°_mode
) ? "FIFO"

1062 : 
	`S_ISLNK
(
s
.
°_mode
) ? "symbolicÜink"

1064 #ifde‡
LINUX_DATAPATH


1065 
	`put_fd_fûíame
(&
°rög
, 
fd
);

1068  
	`ds_°ól_c°r
(&
°rög
);

1069 
	}
}

1073 
size_t


1074 
	$iovec_Àn
(c⁄° 
iovec
 
iovs
[], 
size_t
 
n_iovs
)

1076 
size_t
 
Àn
 = 0;

1077 
size_t
 
i
;

1079 
i
 = 0; i < 
n_iovs
; i++) {

1080 
Àn
 +
iovs
[
i
].
iov_Àn
;

1082  
Àn
;

1083 
	}
}

1086 
boﬁ


1087 
	$iovec_is_em±y
(c⁄° 
iovec
 
iovs
[], 
size_t
 
n_iovs
)

1089 
size_t
 
i
;

1091 
i
 = 0; i < 
n_iovs
; i++) {

1092 i‡(
iovs
[
i
].
iov_Àn
) {

1093  
Ál£
;

1096  
åue
;

1097 
	}
}

1104 
	$£nd_iovec_™d_fds
(
sock
,

1105 c⁄° 
iovec
 *
iovs
, 
size_t
 
n_iovs
,

1106 c⁄° 
fds
[], 
size_t
 
n_fds
)

1108 
	`as£π
(
sock
 >= 0);

1109 i‡(
n_fds
 > 0) {

1111 
cmsghdr
 
cm
;

1112 
c⁄åﬁ
[
	`CMSG_SPACE
(
SOUTIL_MAX_FDS
 *  *
fds
)];

1113 } 
cmsg
;

1114 
msghdr
 
msg
;

1116 
	`as£π
(!
	`iovec_is_em±y
(
iovs
, 
n_iovs
));

1117 
	`as£π
(
n_fds
 <
SOUTIL_MAX_FDS
);

1119 
	`mem£t
(&
cmsg
, 0,  cmsg);

1120 
cmsg
.
cm
.
cmsg_Àn
 = 
	`CMSG_LEN
(
n_fds
 *  *
fds
);

1121 
cmsg
.
cm
.
cmsg_Àvñ
 = 
SOL_SOCKET
;

1122 
cmsg
.
cm
.
cmsg_ty≥
 = 
SCM_RIGHTS
;

1123 
	`mem˝y
(
	`CMSG_DATA
(&
cmsg
.
cm
), 
fds
, 
n_fds
 *  *fds);

1125 
msg
.
msg_«me
 = 
NULL
;

1126 
msg
.
msg_«mñí
 = 0;

1127 
msg
.
msg_iov
 = (
iovec
 *Ë
iovs
;

1128 
msg
.
msg_iovÀn
 = 
n_iovs
;

1129 
msg
.
msg_c⁄åﬁ
 = &
cmsg
.
cm
;

1130 
msg
.
msg_c⁄åﬁÀn
 = 
	`CMSG_SPACE
(
n_fds
 *  *
fds
);

1131 
msg
.
msg_Êags
 = 0;

1133  
	`£ndmsg
(
sock
, &
msg
, 0);

1135  
	`wrôev
(
sock
, 
iovs
, 
n_iovs
);

1137 
	}
}

1152 
	$£nd_iovec_™d_fds_fuŒy
(
sock
,

1153 c⁄° 
iovec
 
iovs
[], 
size_t
 
n_iovs
,

1154 c⁄° 
fds
[], 
size_t
 
n_fds
,

1155 
size_t
 
skù_byãs
, size_à*
byãs_£¡
)

1157 *
byãs_£¡
 = 0;

1158 
n_iovs
 > 0) {

1159 
ªtvÆ
;

1161 i‡(
skù_byãs
) {

1162 
ªtvÆ
 = 
skù_byãs
;

1163 
skù_byãs
 = 0;

1164 } i‡(!*
byãs_£¡
) {

1165 
ªtvÆ
 = 
	`£nd_iovec_™d_fds
(
sock
, 
iovs
, 
n_iovs
, 
fds
, 
n_fds
);

1167 
ªtvÆ
 = 
	`wrôev
(
sock
, 
iovs
, 
n_iovs
);

1170 i‡(
ªtvÆ
 > 0) {

1171 *
byãs_£¡
 +
ªtvÆ
;

1172 
ªtvÆ
 > 0) {

1173 c⁄° 
uöt8_t
 *
ba£
 = 
iovs
->
iov_ba£
;

1174 
size_t
 
Àn
 = 
iovs
->
iov_Àn
;

1176 i‡(
ªtvÆ
 < 
Àn
) {

1177 
size_t
 
£¡
;

1178 
îr‹
;

1180 
îr‹
 = 
	`wrôe_fuŒy
(
sock
, 
ba£
 + 
ªtvÆ
, 
Àn
 -Ñetval,

1181 &
£¡
);

1182 *
byãs_£¡
 +
£¡
;

1183 
ªtvÆ
 +
£¡
;

1184 i‡(
îr‹
) {

1185  
îr‹
;

1188 
ªtvÆ
 -
Àn
;

1189 
iovs
++;

1190 
n_iovs
--;

1192 } i‡(
ªtvÆ
 == 0) {

1193 i‡(
	`iovec_is_em±y
(
iovs
, 
n_iovs
)) {

1196 
	`VLOG_WARN
("sendÑeturned 0");

1197  
EPROTO
;

1198 } i‡(
î∫o
 !
EINTR
) {

1199  
î∫o
;

1204 
	}
}

1215 
	$£nd_iovec_™d_fds_fuŒy_block
(
sock
,

1216 c⁄° 
iovec
 
iovs
[], 
size_t
 
n_iovs
,

1217 c⁄° 
fds
[], 
size_t
 
n_fds
)

1219 
size_t
 
£¡
 = 0;

1222 
îr‹
;

1224 
îr‹
 = 
	`£nd_iovec_™d_fds_fuŒy
(
sock
, 
iovs
, 
n_iovs
,

1225 
fds
, 
n_fds
, 
£¡
, &sent);

1226 i‡(
îr‹
 !
EAGAIN
) {

1227  
îr‹
;

1229 
	`pﬁl_fd_waô
(
sock
, 
POLLOUT
);

1230 
	`pﬁl_block
();

1232 
	}
}

1245 
	$ªcv_d©a_™d_fds
(
sock
,

1246 *
d©a
, 
size_t
 
size
,

1247 
fds
[
SOUTIL_MAX_FDS
], 
size_t
 *
n_fd•
)

1250 
cmsghdr
 
cm
;

1251 
c⁄åﬁ
[
	`CMSG_SPACE
(
SOUTIL_MAX_FDS
 *  *
fds
)];

1252 } 
cmsg
;

1253 
msghdr
 
msg
;

1254 
ªtvÆ
;

1255 
cmsghdr
 *
p
;

1256 
size_t
 
i
;

1258 *
n_fd•
 = 0;

1261 
iovec
 
iov
;

1263 
iov
.
iov_ba£
 = 
d©a
;

1264 
iov
.
iov_Àn
 = 
size
;

1266 
msg
.
msg_«me
 = 
NULL
;

1267 
msg
.
msg_«mñí
 = 0;

1268 
msg
.
msg_iov
 = &
iov
;

1269 
msg
.
msg_iovÀn
 = 1;

1270 
msg
.
msg_c⁄åﬁ
 = &
cmsg
.
cm
;

1271 
msg
.
msg_c⁄åﬁÀn
 =  
cmsg
.
c⁄åﬁ
;

1272 
msg
.
msg_Êags
 = 0;

1274 
ªtvÆ
 = 
	`ªcvmsg
(
sock
, &
msg
, 0);

1275 } 
ªtvÆ
 < 0 && 
î∫o
 =
EINTR
);

1276 i‡(
ªtvÆ
 <= 0) {

1277  
ªtvÆ
 < 0 ? -
î∫o
 : 0;

1280 
p
 = 
	`CMSG_FIRSTHDR
(&
msg
);Ö;Ö = 
	`CMSG_NXTHDR
(&msg,Ö)) {

1281 i‡(
p
->
cmsg_Àvñ
 !
SOL_SOCKET
 ||Ö->
cmsg_ty≥
 !
SCM_RIGHTS
) {

1282 
	`VLOG_ERR
("unexpected control message %d:%d",

1283 
p
->
cmsg_Àvñ
,Ö->
cmsg_ty≥
);

1284 
îr‹
;

1285 } i‡(*
n_fd•
) {

1286 
	`VLOG_ERR
("multiple SCM_RIGHTSÑeceived");

1287 
îr‹
;

1289 
size_t
 
n_fds
 = (
p
->
cmsg_Àn
 - 
	`CMSG_LEN
(0)Ë/  *
fds
;

1290 c⁄° *
fds_d©a
 = (c⁄° *Ë
	`CMSG_DATA
(
p
);

1292 
	`as£π
(
n_fds
 > 0);

1293 i‡(
n_fds
 > 
SOUTIL_MAX_FDS
) {

1294 
	`VLOG_ERR
("%zu fdsÑeceived but only %d supported",

1295 
n_fds
, 
SOUTIL_MAX_FDS
);

1296 
i
 = 0; i < 
n_fds
; i++) {

1297 
	`˛o£
(
fds_d©a
[
i
]);

1299 
îr‹
;

1302 *
n_fd•
 = 
n_fds
;

1303 
	`mem˝y
(
fds
, 
fds_d©a
, 
n_fds
 *  *fds);

1307  
ªtvÆ
;

1309 
îr‹
:

1310 
i
 = 0; i < *
n_fd•
; i++) {

1311 
	`˛o£
(
fds
[
i
]);

1313 *
n_fd•
 = 0;

1314  
EPROTO
;

1315 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/socket-util.h

17 #i‚de‡
SOCKET_UTIL_H


18 
	#SOCKET_UTIL_H
 1

	)

20 
	~<sys/ty≥s.h
>

21 
	~<sys/sockë.h
>

22 
	~<sys/time.h
>

23 
	~<√töë/ö.h
>

24 
	~<°dboﬁ.h
>

25 
	~"›ívswôch/ty≥s.h
"

26 
	~<√töë/ù.h
>

28 
£t_n⁄blockög
(
fd
);

29 
x£t_n⁄blockög
(
fd
);

30 
£t_ds˝
(
fd
, 
uöt8_t
 
ds˝
);

32 
gë_max_fds
();

34 
lookup_ù
(c⁄° *
ho°_«me
, 
ö_addr
 *
addªss
);

35 
lookup_ùv6
(c⁄° *
ho°_«me
, 
ö6_addr
 *
addªss
);

37 
lookup_ho°«me
(c⁄° *
ho°_«me
, 
ö_addr
 *);

39 
gë_sockë_îr‹
(
sock
);

40 
gë_sockë_rcvbuf
(
sock
);

41 
check_c⁄√˘i⁄_com∂ëi⁄
(
fd
);

42 
døö_rcvbuf
(
fd
);

43 
døö_fd
(
fd
, 
size_t
 
n_∑ckës
);

44 
make_unix_sockë
(
°yÀ
, 
boﬁ
 
n⁄block
,

45 c⁄° *
böd_∑th
, c⁄° *
c⁄√˘_∑th
);

46 
gë_unix_«me_Àn
(
sockÀn_t
 
sun_Àn
);

47 
ovs_be32
 
guess_√tmask
(ovs_be32 
ù
);

48 
gë_nuŒ_fd
();

50 
boﬁ
 
öë_∑r£_a˘ive
(c⁄° *
èrgë
, 
uöt16_t
 
deÁu…_p‹t
,

51 
sockaddr_ö
 *
söp
);

52 
öë_›í_a˘ive
(
°yÀ
, c⁄° *
èrgë
, 
uöt16_t
 
deÁu…_p‹t
,

53 
sockaddr_ö
 *
söp
, *
fdp
, 
uöt8_t
 
ds˝
);

55 
boﬁ
 
öë_∑r£_∑ssive
(c⁄° *
èrgë
, 
deÁu…_p‹t
,

56 
sockaddr_ö
 *
söp
);

57 
öë_›í_∑ssive
(
°yÀ
, c⁄° *
èrgë
, 
deÁu…_p‹t
,

58 
sockaddr_ö
 *
söp
, 
uöt8_t
 
ds˝
);

60 
ªad_fuŒy
(
fd
, *, 
size_t
, size_à*
byãs_ªad
);

61 
wrôe_fuŒy
(
fd
, c⁄° *, 
size_t
, size_à*
byãs_wrôãn
);

63 
fsync_∑ª¡_dú
(c⁄° *
fûe_«me
);

64 
gë_mtime
(c⁄° *
fûe_«me
, 
time•ec
 *
mtime
);

66 
xpùe
(
fds
[2]);

67 
xpùe_n⁄blockög
(
fds
[2]);

69 *
des¸ibe_fd
(
fd
);

74 
	#DSCP_DEFAULT
 (
IPTOS_PREC_INTERNETCONTROL
 >> 2)

	)

78 
	#SOUTIL_MAX_FDS
 8

	)

81 
size_t
 
iovec_Àn
(c⁄° 
iovec
 *
iovs
, size_à
n_iovs
);

82 
boﬁ
 
iovec_is_em±y
(c⁄° 
iovec
 *
iovs
, 
size_t
 
n_iovs
);

85 
xsockë∑ú
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
, 
fds
[2]);

86 
£nd_iovec_™d_fds
(
sock
,

87 c⁄° 
iovec
 *
iovs
, 
size_t
 
n_iovs
,

88 c⁄° 
fds
[], 
size_t
 
n_fds
);

89 
£nd_iovec_™d_fds_fuŒy
(
sock
,

90 c⁄° 
iovec
 *
iovs
, 
size_t
 
n_iovs
,

91 c⁄° 
fds
[], 
size_t
 
n_fds
,

92 
size_t
 
skù_byãs
, size_à*
byãs_£¡
);

93 
£nd_iovec_™d_fds_fuŒy_block
(
sock
,

94 c⁄° 
iovec
 *
iovs
, 
size_t
 
n_iovs
,

95 c⁄° 
fds
[], 
size_t
 
n_fds
);

96 
ªcv_d©a_™d_fds
(
sock
,

97 *
d©a
, 
size_t
 
size
,

98 
fds
[
SOUTIL_MAX_FDS
], 
size_t
 *
n_fd•
);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/sort.c

16 
	~<c⁄fig.h
>

18 
	~"s‹t.h
"

20 
	~"øndom.h
"

22 
size_t


23 
∑πôi⁄
(
size_t
 
p
, size_à
r
,

24 (*
com∑ª
)(
size_t
 
a
, size_à
b
, *
aux
),

25 (*
sw≠
)(
size_t
 
a
, size_à
b
, *
aux
),

26 *
aux
)

28 
size_t
 
x
 = 
r
 - 1;

29 
size_t
 
i
, 
j
;

31 
i
 = 
p
;

32 
j
 = 
p
; j < 
x
; j++) {

33 i‡(
	`com∑ª
(
j
, 
x
, 
aux
) <= 0) {

34 
	`sw≠
(
i
++, 
j
, 
aux
);

37 
	`sw≠
(
i
, 
x
, 
aux
);

38  
i
;

39 
	}
}

42 
quicks‹t
(
size_t
 
p
, size_à
r
,

43 (*
com∑ª
)(
size_t
 
a
, size_à
b
, *
aux
),

44 (*
sw≠
)(
size_t
 
a
, size_à
b
, *
aux
),

45 *
aux
)

47 
size_t
 
i
, 
q
;

49 i‡(
r
 - 
p
 < 2) {

53 
i
 = 
	`øndom_ønge
(
r
 - 
p
) +Ö;

54 i‡(
r
 - 1 !
i
) {

55 
	`sw≠
(
r
 - 1, 
i
, 
aux
);

58 
q
 = 
	`∑πôi⁄
(
p
, 
r
, 
com∑ª
, 
sw≠
, 
aux
);

59 
	`quicks‹t
(
p
, 
q
, 
com∑ª
, 
sw≠
, 
aux
);

60 
	`quicks‹t
(
q
, 
r
, 
com∑ª
, 
sw≠
, 
aux
);

61 
	}
}

64 
s‹t
(
size_t
 
cou¡
,

65 (*
com∑ª
)(
size_t
 
a
, size_à
b
, *
aux
),

66 (*
sw≠
)(
size_t
 
a
, size_à
b
, *
aux
),

67 *
aux
)

69 
	`quicks‹t
(0, 
cou¡
, 
com∑ª
, 
sw≠
, 
aux
);

70 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/sort.h

16 #i‚de‡
SORT_H


17 
	#SORT_H
 1

	)

19 
	~<°ddef.h
>

21 
s‹t
(
size_t
 
cou¡
,

22 (*
com∑ª
)(
size_t
 
a
, size_à
b
, *
aux
),

23 (*
sw≠
)(
size_t
 
a
, size_à
b
, *
aux
),

24 *
aux
);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/sset.c

17 
	~<c⁄fig.h
>

19 
	~"s£t.h
"

21 
	~<as£π.h
>

23 
	~"hash.h
"

25 
uöt32_t


26 
	$hash_«me__
(c⁄° *
«me
, 
size_t
 
Àngth
)

28  
	`hash_byãs
(
«me
, 
Àngth
, 0);

29 
	}
}

31 
uöt32_t


32 
	$hash_«me
(c⁄° *
«me
)

34  
	`hash_«me__
(
«me
, 
	`°æí
(name));

35 
	}
}

37 
s£t_node
 *

38 
	$s£t_föd__
(c⁄° 
s£t
 *
£t
, c⁄° *
«me
, 
size_t
 
hash
)

40 
s£t_node
 *
node
;

42 
	`HMAP_FOR_EACH_WITH_HASH
 (
node
, 
hm≠_node
, 
hash
, &
£t
->
m≠
) {

43 i‡(!
	`°rcmp
(
node
->
«me
,Çame)) {

44  
node
;

47  
NULL
;

48 
	}
}

50 
s£t_node
 *

51 
	$s£t_add__
(
s£t
 *
£t
, c⁄° *
«me
, 
size_t
 
Àngth
, size_à
hash
)

53 
s£t_node
 *
node
 = 
	`xmÆloc
(
Àngth
 +  *node);

54 
	`mem˝y
(
node
->
«me
,Çame, 
Àngth
 + 1);

55 
	`hm≠_ö£π
(&
£t
->
m≠
, &
node
->
hm≠_node
, 
hash
);

56  
node
;

57 
	}
}

61 
	$s£t_öô
(
s£t
 *
£t
)

63 
	`hm≠_öô
(&
£t
->
m≠
);

64 
	}
}

68 
	$s£t_de°roy
(
s£t
 *
£t
)

70 i‡(
£t
) {

71 
	`s£t_˛ór
(
£t
);

72 
	`hm≠_de°roy
(&
£t
->
m≠
);

74 
	}
}

78 
	$s£t_˛⁄e
(
s£t
 *
£t
, c⁄° s£à*
‹ig
)

80 
s£t_node
 *
node
;

82 
	`s£t_öô
(
£t
);

83 
	`HMAP_FOR_EACH
 (
node
, 
hm≠_node
, &
‹ig
->
m≠
) {

84 
	`s£t_add__
(
£t
, 
node
->
«me
, 
	`°æí
(node->name),

85 
node
->
hm≠_node
.
hash
);

87 
	}
}

91 
	$s£t_sw≠
(
s£t
 *
a
, s£à*
b
)

93 
	`hm≠_sw≠
(&
a
->
m≠
, &
b
->map);

94 
	}
}

99 
	$s£t_moved
(
s£t
 *
£t
)

101 
	`hm≠_moved
(&
£t
->
m≠
);

102 
	}
}

106 
boﬁ


107 
	$s£t_is_em±y
(c⁄° 
s£t
 *
£t
)

109  
	`hm≠_is_em±y
(&
£t
->
m≠
);

110 
	}
}

113 
size_t


114 
	$s£t_cou¡
(c⁄° 
s£t
 *
£t
)

116  
	`hm≠_cou¡
(&
£t
->
m≠
);

117 
	}
}

121 
s£t_node
 *

122 
	$s£t_add
(
s£t
 *
£t
, c⁄° *
«me
)

124 
size_t
 
Àngth
 = 
	`°æí
(
«me
);

125 
uöt32_t
 
hash
 = 
	`hash_«me__
(
«me
, 
Àngth
);

127  (
	`s£t_föd__
(
£t
, 
«me
, 
hash
)

128 ? 
NULL


129 : 
	`s£t_add__
(
£t
, 
«me
, 
Àngth
, 
hash
));

130 
	}
}

136 
s£t_node
 *

137 
	$s£t_add_™d_‰ì
(
s£t
 *
£t
, *
«me
)

139 
s£t_node
 *
node
 = 
	`s£t_add
(
£t
, 
«me
);

140 
	`‰ì
(
«me
);

141  
node
;

142 
	}
}

147 
	$s£t_add_as£π
(
s£t
 *
£t
, c⁄° *
«me
)

149 
boﬁ
 
added
 
OVS_UNUSED
 = 
	`s£t_add
(
£t
, 
«me
);

150 
	`as£π
(
added
);

151 
	}
}

155 
	$s£t_add_¨øy
(
s£t
 *
£t
, **
«mes
, 
size_t
 
n
)

157 
size_t
 
i
;

159 
i
 = 0; i < 
n
; i++) {

160 
	`s£t_add
(
£t
, 
«mes
[
i
]);

162 
	}
}

166 
	$s£t_˛ór
(
s£t
 *
£t
)

168 c⁄° *
«me
, *
√xt
;

170 
	`SSET_FOR_EACH_SAFE
 (
«me
, 
√xt
, 
£t
) {

171 
	`s£t_dñëe
(
£t
, 
	`SSET_NODE_FROM_NAME
(
«me
));

173 
	}
}

177 
	$s£t_dñëe
(
s£t
 *
£t
, 
s£t_node
 *
node
)

179 
	`hm≠_ªmove
(&
£t
->
m≠
, &
node
->
hm≠_node
);

180 
	`‰ì
(
node
);

181 
	}
}

185 
boﬁ


186 
	$s£t_föd_™d_dñëe
(
s£t
 *
£t
, c⁄° *
«me
)

188 
s£t_node
 *
node
 = 
	`s£t_föd
(
£t
, 
«me
);

189 i‡(
node
) {

190 
	`s£t_dñëe
(
£t
, 
node
);

192  
node
 !
NULL
;

193 
	}
}

198 
	$s£t_föd_™d_dñëe_as£π
(
s£t
 *
£t
, c⁄° *
«me
)

200 
boﬁ
 
dñëed
 
OVS_UNUSED
 = 
	`s£t_föd_™d_dñëe
(
£t
, 
«me
);

201 
	`as£π
(
dñëed
);

202 
	}
}

213 
	$s£t_p›
(
s£t
 *
£t
)

215 c⁄° *
«me
 = 
	`SSET_FIRST
(
£t
);

216 *
c›y
 = 
	`x°rdup
(
«me
);

217 
	`s£t_dñëe
(
£t
, 
	`SSET_NODE_FROM_NAME
(
«me
));

218  
c›y
;

219 
	}
}

223 
s£t_node
 *

224 
	$s£t_föd
(c⁄° 
s£t
 *
£t
, c⁄° *
«me
)

226  
	`s£t_föd__
(
£t
, 
«me
, 
	`hash_«me
(name));

227 
	}
}

230 
boﬁ


231 
	$s£t_c⁄èös
(c⁄° 
s£t
 *
£t
, c⁄° *
«me
)

233  
	`s£t_föd
(
£t
, 
«me
Ë!
NULL
;

234 
	}
}

237 
boﬁ


238 
	$s£t_equÆs
(c⁄° 
s£t
 *
a
, c⁄° s£à*
b
)

240 
s£t_node
 *
node
;

242 i‡(
	`s£t_cou¡
(
a
Ë!s£t_cou¡(
b
)) {

243  
Ál£
;

246 
	`HMAP_FOR_EACH
 (
node
, 
hm≠_node
, &
a
->
m≠
) {

247 i‡(!
	`s£t_föd__
(
b
, 
node
->
«me
,Çode->
hm≠_node
.
hash
)) {

248  
Ál£
;

252  
åue
;

253 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/sset.h

17 #i‚de‡
SSET_H


18 
	#SSET_H


	)

20 
	~"hm≠.h
"

21 
	~"utû.h
"

23 #ifde‡
__˝lu•lus


27 
	ss£t_node
 {

28 
hm≠_node
 hmap_node;

29 
«me
[1];

33 
	ss£t
 {

34 
hm≠
 
m≠
;

37 
	#SSET_INITIALIZER
(
SSET
Ë{ 
	`HMAP_INITIALIZER
(&(SSET)->
m≠
Ë}

	)

40 
s£t_öô
(
s£t
 *);

41 
s£t_de°roy
(
s£t
 *);

42 
s£t_˛⁄e
(
s£t
 *, const sset *);

43 
s£t_sw≠
(
s£t
 *, sset *);

44 
s£t_moved
(
s£t
 *);

47 
boﬁ
 
s£t_is_em±y
(c⁄° 
s£t
 *);

48 
size_t
 
s£t_cou¡
(c⁄° 
s£t
 *);

51 
s£t_node
 *
s£t_add
(
s£t
 *, const *);

52 
s£t_node
 *
s£t_add_™d_‰ì
(
s£t
 *, *);

53 
s£t_add_as£π
(
s£t
 *, const *);

54 
s£t_add_¨øy
(
s£t
 *, **, 
size_t
 
n
);

57 
s£t_˛ór
(
s£t
 *);

58 
s£t_dñëe
(
s£t
 *, 
s£t_node
 *);

59 
boﬁ
 
s£t_föd_™d_dñëe
(
s£t
 *, const *);

60 
s£t_föd_™d_dñëe_as£π
(
s£t
 *, const *);

61 *
s£t_p›
(
s£t
 *);

64 
s£t_node
 *
s£t_föd
(c⁄° 
s£t
 *, const *);

65 
boﬁ
 
s£t_c⁄èös
(c⁄° 
s£t
 *, const *);

66 
boﬁ
 
s£t_equÆs
(c⁄° 
s£t
 *, const sset *);

69 
	#SSET_FOR_EACH
(
NAME
, 
SSET
) \

70 (
NAME
Ë
	`SSET_FIRST
(
SSET
); \

71 
	`SSET_NODE_FROM_NAME
(
NAME
Ë!
NULL
; \

72 (
NAME
Ë
	`SSET_NEXT
(
SSET
, NAME))

	)

74 
	#SSET_FOR_EACH_SAFE
(
NAME
, 
NEXT
, 
SSET
) \

75 (
NAME
Ë
	`SSET_FIRST
(
SSET
); \

76 (
	`SSET_NODE_FROM_NAME
(
NAME
Ë!
NULL
 \

77 ? (
NEXT
Ë
	`SSET_NEXT
(
SSET
, 
NAME
), 
åue
 \

78 : 
Ál£
); \

79 (
NAME
Ë(
NEXT
))

	)

83 
	#SSET_NODE_FROM_HMAP_NODE
(
HMAP_NODE
) \

84 
	`CONTAINER_OF
(
HMAP_NODE
, 
s£t_node
, 
hm≠_node
)

	)

85 
	#SSET_NAME_FROM_HMAP_NODE
(
HMAP_NODE
) \

86 (
	`CONST_CAST
(c⁄° *, (
	`SSET_NODE_FROM_HMAP_NODE
(
HMAP_NODE
)->
«me
)))

	)

87 
	#SSET_NODE_FROM_NAME
(
NAME
Ë
	`CONTAINER_OF
(NAME, 
s£t_node
, 
«me
)

	)

88 
	#SSET_FIRST
(
SSET
Ë
	`SSET_NAME_FROM_HMAP_NODE
(
	`hm≠_fú°
(&(SSET)->
m≠
))

	)

89 
	#SSET_NEXT
(
SSET
, 
NAME
) \

90 
	`SSET_NAME_FROM_HMAP_NODE
( \

91 
	`hm≠_√xt
(&(
SSET
)->
m≠
, &
	`SSET_NODE_FROM_NAME
(
NAME
)->
hm≠_node
))

	)

93 #ifde‡
__˝lu•lus


	@/home/lsch/mytest/openvswitch-1.9.0/lib/stp.c

20 
	~<c⁄fig.h
>

22 
	~"°p.h
"

23 
	~<sys/ty≥s.h
>

24 
	~<√töë/ö.h
>

25 
	~<¨∑/öë.h
>

26 
	~<as£π.h
>

27 
	~<öây≥s.h
>

28 
	~<°dlib.h
>

29 
	~"byã-‹dî.h
"

30 
	~"oÂbuf.h
"

31 
	~"∑ckës.h
"

32 
	~"unix˘l.h
"

33 
	~"utû.h
"

34 
	~"vlog.h
"

36 
VLOG_DEFINE_THIS_MODULE
(
°p
);

38 
	#STP_PROTOCOL_ID
 0x0000

	)

39 
	#STP_PROTOCOL_VERSION
 0x00

	)

40 
	#STP_TYPE_CONFIG
 0x00

	)

41 
	#STP_TYPE_TCN
 0x80

	)

43 
	s°p_bpdu_hódî
 {

44 
ovs_be16
 
	m¥Ÿocﬁ_id
;

45 
uöt8_t
 
	m¥Ÿocﬁ_vîsi⁄
;

46 
uöt8_t
 
	mbpdu_ty≥
;

47 } 
__©åibuã__
((
∑cked
));

48 
BUILD_ASSERT_DECL
((
°p_bpdu_hódî
) == 4);

50 
	e°p_c⁄fig_bpdu_Êags
 {

51 
	mSTP_CONFIG_TOPOLOGY_CHANGE_ACK
 = 0x80,

52 
	mSTP_CONFIG_TOPOLOGY_CHANGE
 = 0x01

55 
	s°p_c⁄fig_bpdu
 {

56 
°p_bpdu_hódî
 
	mhódî
;

57 
uöt8_t
 
	mÊags
;

58 
ovs_be64
 
	mroŸ_id
;

59 
ovs_be32
 
	mroŸ_∑th_co°
;

60 
ovs_be64
 
	mbridge_id
;

61 
ovs_be16
 
	mp‹t_id
;

62 
ovs_be16
 
	mmesßge_age
;

63 
ovs_be16
 
	mmax_age
;

64 
ovs_be16
 
	mhñlo_time
;

65 
ovs_be16
 
	mf‹w¨d_dñay
;

66 } 
__©åibuã__
((
∑cked
));

67 
BUILD_ASSERT_DECL
((
°p_c⁄fig_bpdu
) == 35);

69 
	s°p_t˙_bpdu
 {

70 
°p_bpdu_hódî
 
	mhódî
;

71 } 
__©åibuã__
((
∑cked
));

72 
BUILD_ASSERT_DECL
((
°p_t˙_bpdu
) == 4);

74 
	s°p_timî
 {

75 
boﬁ
 
	ma˘ive
;

76 
	mvÆue
;

79 
	s°p_p‹t
 {

80 
°p
 *
	m°p
;

81 *
	maux
;

82 
	mp‹t_id
;

83 
°p_°©e
 
	m°©e
;

84 
	m∑th_co°
;

85 
°p_idítifõr
 
	mdesig«ãd_roŸ
;

86 
	mdesig«ãd_co°
;

87 
°p_idítifõr
 
	mdesig«ãd_bridge
;

88 
	mdesig«ãd_p‹t
;

89 
boﬁ
 
	mt›ﬁogy_ch™ge_ack
;

90 
boﬁ
 
	mc⁄fig_≥ndög
;

91 
boﬁ
 
	mch™ge_dëe˘i⁄_íabÀd
;

93 
°p_timî
 
	mmesßge_age_timî
;

94 
°p_timî
 
	mf‹w¨d_dñay_timî
;

95 
°p_timî
 
	mhﬁd_timî
;

97 
	mtx_cou¡
;

98 
	mrx_cou¡
;

99 
	mîr‹_cou¡
;

101 
boﬁ
 
	m°©e_ch™ged
;

104 
	s°p
 {

105 
li°
 
	mnode
;

108 *
	m«me
;

109 
°p_idítifõr
 
	mbridge_id
;

110 
	mmax_age
;

111 
	mhñlo_time
;

112 
	mf‹w¨d_dñay
;

113 
	mbridge_max_age
;

114 
	mbridge_hñlo_time
;

115 
	mbridge_f‹w¨d_dñay
;

116 
	mrq_max_age
;

117 
	mrq_hñlo_time
;

118 
	mrq_f‹w¨d_dñay
;

119 
	mñ≠£d_ªmaödî
;

122 
°p_idítifõr
 
	mdesig«ãd_roŸ
;

123 
	mroŸ_∑th_co°
;

124 
°p_p‹t
 *
	mroŸ_p‹t
;

125 
boﬁ
 
	mt›ﬁogy_ch™ge_dëe˘ed
;

126 
boﬁ
 
	mt›ﬁogy_ch™ge
;

129 
°p_timî
 
	mhñlo_timî
;

130 
°p_timî
 
	mt˙_timî
;

131 
°p_timî
 
	mt›ﬁogy_ch™ge_timî
;

134 
°p_p‹t
 
	mp‹ts
[
STP_MAX_PORTS
];

137 
boﬁ
 
	mfdb_√eds_Êush
;

138 
°p_p‹t
 *
	mfú°_ch™ged_p‹t
;

139 (*
	m£nd_bpdu
)(
oÂbuf
 *
	mbpdu
, 
	mp‹t_no
, *
	maux
);

140 *
	maux
;

143 
li°
 
	gÆl_°ps
 = 
LIST_INITIALIZER
(&
Æl_°ps
);

145 
	#FOR_EACH_ENABLED_PORT
(
PORT
, 
STP
) \

146 (
PORT
Ë
	`°p_√xt_íabÀd_p‹t
((
STP
), (STP)->
p‹ts
); \

147 (
PORT
); \

148 (
PORT
Ë
	`°p_√xt_íabÀd_p‹t
((
STP
), (PORTË+ 1))

	)

149 
°p_p‹t
 *

150 
	$°p_√xt_íabÀd_p‹t
(c⁄° 
°p
 *°p, c⁄° 
°p_p‹t
 *
p‹t
)

152 ; 
p‹t
 < &
°p
->
p‹ts
[
	`ARRAY_SIZE
(stp->ports)];Öort++) {

153 i‡(
p‹t
->
°©e
 !
STP_DISABLED
) {

154  
	`CONST_CAST
(
°p_p‹t
 *, 
p‹t
);

157  
NULL
;

158 
	}
}

160 
	#MESSAGE_AGE_INCREMENT
 1

	)

162 
°p_å™smô_c⁄fig
(
°p_p‹t
 *);

163 
boﬁ
 
°p_su≥r£des_p‹t_öfo
(c⁄° 
°p_p‹t
 *,

164 c⁄° 
°p_c⁄fig_bpdu
 *);

165 
°p_ªc‹d_c⁄fig_öf‹m©i⁄
(
°p_p‹t
 *,

166 c⁄° 
°p_c⁄fig_bpdu
 *);

167 
°p_ªc‹d_c⁄fig_timeout_vÆues
(
°p
 *,

168 c⁄° 
°p_c⁄fig_bpdu
 *);

169 
boﬁ
 
°p_is_desig«ãd_p‹t
(c⁄° 
°p_p‹t
 *);

170 
°p_c⁄fig_bpdu_gíî©i⁄
(
°p
 *);

171 
°p_å™smô_t˙
(
°p
 *);

172 
°p_c⁄figuøti⁄_upd©e
(
°p
 *);

173 
boﬁ
 
°p_su≥r£des_roŸ
(c⁄° 
°p_p‹t
 *
roŸ
,

174 c⁄° 
°p_p‹t
 *);

175 
°p_roŸ_£À˘i⁄
(
°p
 *);

176 
°p_desig«ãd_p‹t_£À˘i⁄
(
°p
 *);

177 
°p_become_desig«ãd_p‹t
(
°p_p‹t
 *);

178 
°p_p‹t_°©e_£À˘i⁄
(
°p
 *);

179 
°p_make_f‹w¨dög
(
°p_p‹t
 *);

180 
°p_make_blockög
(
°p_p‹t
 *);

181 
°p_£t_p‹t_°©e
(
°p_p‹t
 *, 
°p_°©e
);

182 
°p_t›ﬁogy_ch™ge_dëe˘i⁄
(
°p
 *);

183 
°p_t›ﬁogy_ch™ge_acknowÀdged
(
°p
 *);

184 
°p_acknowÀdge_t›ﬁogy_ch™ge
(
°p_p‹t
 *);

185 
°p_ª˚ived_c⁄fig_bpdu
(
°p
 *, 
°p_p‹t
 *,

186 c⁄° 
°p_c⁄fig_bpdu
 *);

187 
°p_ª˚ived_t˙_bpdu
(
°p
 *, 
°p_p‹t
 *);

188 
°p_hñlo_timî_expúy
(
°p
 *);

189 
°p_mesßge_age_timî_expúy
(
°p_p‹t
 *);

190 
boﬁ
 
°p_is_desig«ãd_f‹_some_p‹t
(c⁄° 
°p
 *);

191 
°p_f‹w¨d_dñay_timî_expúy
(
°p_p‹t
 *);

192 
°p_t˙_timî_expúy
(
°p
 *);

193 
°p_t›ﬁogy_ch™ge_timî_expúy
(
°p
 *);

194 
°p_hﬁd_timî_expúy
(
°p_p‹t
 *);

195 
°p_öôülize_p‹t
(
°p_p‹t
 *, 
°p_°©e
);

196 
°p_become_roŸ_bridge
(
°p
 *);

197 
°p_upd©e_bridge_timîs
(
°p
 *);

199 
˛amp
(
x
, 
mö
, 
max
);

200 
ms_to_timî
(
ms
);

201 
timî_to_ms
(
timî
);

202 
°p_°¨t_timî
(
°p_timî
 *, 
vÆue
);

203 
°p_°›_timî
(
°p_timî
 *);

204 
boﬁ
 
°p_timî_expúed
(
°p_timî
 *, 
ñ≠£d
, 
timeout
);

206 
°p_£nd_bpdu
(
°p_p‹t
 *, c⁄° *, 
size_t
);

207 
°p_unix˘l_t˙
(
unix˘l_c⁄n
 *, 
¨gc
,

208 c⁄° *
¨gv
[], *
aux
);

211 
	$°p_öô
()

213 
	`unix˘l_comm™d_ªgi°î
("°p/t˙", "[bridge]", 0, 1, 
°p_unix˘l_t˙
,

214 
NULL
);

215 
	}
}

230 
°p
 *

231 
°p_¸óã
(c⁄° *
«me
, 
°p_idítifõr
 
bridge_id
,

232 (*
£nd_bpdu
)(
oÂbuf
 *
bpdu
, 
p‹t_no
, *
aux
),

233 *
aux
)

235 
°p
 *stp;

236 
°p_p‹t
 *
p
;

238 
°p
 = 
	`xzÆloc
( *stp);

239 
°p
->
«me
 = 
	`x°rdup
(name);

240 
°p
->
bridge_id
 = bridge_id;

241 i‡(!(
°p
->
bridge_id
 >> 48)) {

242 
°p
->
bridge_id
 |(
uöt64_t
Ë
STP_DEFAULT_BRIDGE_PRIORITY
 << 48;

245 
°p
->
rq_max_age
 = 
STP_DEFAULT_MAX_AGE
;

246 
°p
->
rq_hñlo_time
 = 
STP_DEFAULT_HELLO_TIME
;

247 
°p
->
rq_f‹w¨d_dñay
 = 
STP_DEFAULT_FWD_DELAY
;

248 
	`°p_upd©e_bridge_timîs
(
°p
);

249 
°p
->
max_age
 = sç->
bridge_max_age
;

250 
°p
->
hñlo_time
 = sç->
bridge_hñlo_time
;

251 
°p
->
f‹w¨d_dñay
 = sç->
bridge_f‹w¨d_dñay
;

253 
°p
->
desig«ãd_roŸ
 = sç->
bridge_id
;

254 
°p
->
roŸ_∑th_co°
 = 0;

255 
°p
->
roŸ_p‹t
 = 
NULL
;

256 
°p
->
t›ﬁogy_ch™ge_dëe˘ed
 = 
Ál£
;

257 
°p
->
t›ﬁogy_ch™ge
 = 
Ál£
;

259 
	`°p_°›_timî
(&
°p
->
t˙_timî
);

260 
	`°p_°›_timî
(&
°p
->
t›ﬁogy_ch™ge_timî
);

261 
	`°p_°¨t_timî
(&
°p
->
hñlo_timî
, 0);

263 
°p
->
£nd_bpdu
 = send_bpdu;

264 
°p
->
aux
 =áux;

266 
°p
->
fú°_ch™ged_p‹t
 = &°p->
p‹ts
[
	`ARRAY_SIZE
(stp->ports)];

267 
p
 = 
°p
->
p‹ts
;Ö < &°p->p‹ts[
	`ARRAY_SIZE
(stp->ports)];Ö++) {

268 
p
->
°p
 = stp;

269 
p
->
p‹t_id
 = (
	`°p_p‹t_no
’Ë+ 1Ë| (
STP_DEFAULT_PORT_PRIORITY
 << 8);

270 
p
->
∑th_co°
 = 19;

271 
	`°p_öôülize_p‹t
(
p
, 
STP_DISABLED
);

273 
	`li°_push_back
(&
Æl_°ps
, &
°p
->
node
);

274  
°p
;

275 
	}
}

279 
	$°p_de°roy
(
°p
 *stp)

281 i‡(
°p
) {

282 
	`li°_ªmove
(&
°p
->
node
);

283 
	`‰ì
(
°p
->
«me
);

284 
	`‰ì
(
°p
);

286 
	}
}

290 
	$°p_tick
(
°p
 *°p, 
ms
)

292 
°p_p‹t
 *
p
;

293 
ñ≠£d
;

298 
ms
 = 
	`˛amp
(ms, 0, 
INT_MAX
 - 1000Ë+ 
°p
->
ñ≠£d_ªmaödî
;

299 
ñ≠£d
 = 
	`ms_to_timî
(
ms
);

300 
°p
->
ñ≠£d_ªmaödî
 = 
ms
 - 
	`timî_to_ms
(
ñ≠£d
);

301 i‡(!
ñ≠£d
) {

305 i‡(
	`°p_timî_expúed
(&
°p
->
hñlo_timî
, 
ñ≠£d
, sç->
hñlo_time
)) {

306 
	`°p_hñlo_timî_expúy
(
°p
);

308 i‡(
	`°p_timî_expúed
(&
°p
->
t˙_timî
, 
ñ≠£d
, sç->
bridge_hñlo_time
)) {

309 
	`°p_t˙_timî_expúy
(
°p
);

311 i‡(
	`°p_timî_expúed
(&
°p
->
t›ﬁogy_ch™ge_timî
, 
ñ≠£d
,

312 
°p
->
max_age
 + sç->
f‹w¨d_dñay
)) {

313 
	`°p_t›ﬁogy_ch™ge_timî_expúy
(
°p
);

315 
	`FOR_EACH_ENABLED_PORT
 (
p
, 
°p
) {

316 i‡(
	`°p_timî_expúed
(&
p
->
mesßge_age_timî
, 
ñ≠£d
, 
°p
->
max_age
)) {

317 
	`°p_mesßge_age_timî_expúy
(
p
);

320 
	`FOR_EACH_ENABLED_PORT
 (
p
, 
°p
) {

321 i‡(
	`°p_timî_expúed
(&
p
->
f‹w¨d_dñay_timî
, 
ñ≠£d
,

322 
°p
->
f‹w¨d_dñay
)) {

323 
	`°p_f‹w¨d_dñay_timî_expúy
(
p
);

325 i‡(
	`°p_timî_expúed
(&
p
->
hﬁd_timî
, 
ñ≠£d
, 
	`ms_to_timî
(1000))) {

326 
	`°p_hﬁd_timî_expúy
(
p
);

329 
	}
}

332 
	$£t_bridge_id
(
°p
 *°p, 
°p_idítifõr
 
√w_bridge_id
)

334 i‡(
√w_bridge_id
 !
°p
->
bridge_id
) {

335 
boﬁ
 
roŸ
;

336 
°p_p‹t
 *
p
;

338 
roŸ
 = 
	`°p_is_roŸ_bridge
(
°p
);

339 
	`FOR_EACH_ENABLED_PORT
 (
p
, 
°p
) {

340 i‡(
	`°p_is_desig«ãd_p‹t
(
p
)) {

341 
p
->
desig«ãd_bridge
 = 
√w_bridge_id
;

344 
°p
->
bridge_id
 = 
√w_bridge_id
;

345 
	`°p_c⁄figuøti⁄_upd©e
(
°p
);

346 
	`°p_p‹t_°©e_£À˘i⁄
(
°p
);

347 i‡(
	`°p_is_roŸ_bridge
(
°p
Ë&& !
roŸ
) {

348 
	`°p_become_roŸ_bridge
(
°p
);

351 
	}
}

354 
	$°p_£t_bridge_id
(
°p
 *°p, 
°p_idítifõr
 
bridge_id
)

356 c⁄° 
uöt64_t
 
mac_bôs
 = (
	`UINT64_C
(1) << 48) - 1;

357 c⁄° 
uöt64_t
 
¥i_bôs
 = ~
mac_bôs
;

358 
	`£t_bridge_id
(
°p
, (°p->
bridge_id
 & 
¥i_bôs
Ë| (bridge_id & 
mac_bôs
));

359 
	}
}

362 
	$°p_£t_bridge_¥i‹ôy
(
°p
 *°p, 
uöt16_t
 
√w_¥i‹ôy
)

364 c⁄° 
uöt64_t
 
mac_bôs
 = (
	`UINT64_C
(1) << 48) - 1;

365 
	`£t_bridge_id
(
°p
, ((°p->
bridge_id
 & 
mac_bôs
)

366 | ((
uöt64_t
Ë
√w_¥i‹ôy
 << 48)));

367 
	}
}

374 
	$°p_£t_hñlo_time
(
°p
 *°p, 
ms
)

376 
°p
->
rq_hñlo_time
 = 
ms
;

377 
	`°p_upd©e_bridge_timîs
(
°p
);

378 
	}
}

386 
	$°p_£t_max_age
(
°p
 *°p, 
ms
)

388 
°p
->
rq_max_age
 = 
ms
;

389 
	`°p_upd©e_bridge_timîs
(
°p
);

390 
	}
}

397 
	$°p_£t_f‹w¨d_dñay
(
°p
 *°p, 
ms
)

399 
°p
->
rq_f‹w¨d_dñay
 = 
ms
;

400 
	`°p_upd©e_bridge_timîs
(
°p
);

401 
	}
}

405 
	$°p_gë_«me
(c⁄° 
°p
 *stp)

407  
°p
->
«me
;

408 
	}
}

411 
°p_idítifõr


412 
	$°p_gë_bridge_id
(c⁄° 
°p
 *stp)

414  
°p
->
bridge_id
;

415 
	}
}

418 
°p_idítifõr


419 
	$°p_gë_desig«ãd_roŸ
(c⁄° 
°p
 *stp)

421  
°p
->
desig«ãd_roŸ
;

422 
	}
}

426 
boﬁ


427 
	$°p_is_roŸ_bridge
(c⁄° 
°p
 *stp)

429  
°p
->
bridge_id
 =°p->
desig«ãd_roŸ
;

430 
	}
}

434 
	$°p_gë_roŸ_∑th_co°
(c⁄° 
°p
 *stp)

436  
°p
->
roŸ_∑th_co°
;

437 
	}
}

443 
	$°p_gë_hñlo_time
(c⁄° 
°p
 *stp)

445  
	`timî_to_ms
(
°p
->
bridge_hñlo_time
);

446 
	}
}

453 
	$°p_gë_max_age
(c⁄° 
°p
 *stp)

455  
	`timî_to_ms
(
°p
->
bridge_max_age
);

456 
	}
}

463 
	$°p_gë_f‹w¨d_dñay
(c⁄° 
°p
 *stp)

465  
	`timî_to_ms
(
°p
->
bridge_f‹w¨d_dñay
);

466 
	}
}

471 
boﬁ


472 
	$°p_check_™d_ª£t_fdb_Êush
(
°p
 *stp)

474 
boﬁ
 
√eds_Êush
 = 
°p
->
fdb_√eds_Êush
;

475 
°p
->
fdb_√eds_Êush
 = 
Ál£
;

476  
√eds_Êush
;

477 
	}
}

481 
°p_p‹t
 *

482 
	$°p_gë_p‹t
(
°p
 *°p, 
p‹t_no
)

484 
	`as£π
(
p‹t_no
 >0 &&Ö‹t_nÿ< 
	`ARRAY_SIZE
(
°p
->
p‹ts
));

485  &
°p
->
p‹ts
[
p‹t_no
];

486 
	}
}

490 
°p_p‹t
 *

491 
	$°p_gë_roŸ_p‹t
(
°p
 *stp)

493  
°p
->
roŸ_p‹t
;

494 
	}
}

499 
boﬁ


500 
	$°p_gë_ch™ged_p‹t
(
°p
 *°p, 
°p_p‹t
 **
p‹ç
)

502 
°p_p‹t
 *
íd
 = &
°p
->
p‹ts
[
	`ARRAY_SIZE
(stp->ports)];

503 
°p_p‹t
 *
p
;

505 
p
 = 
°p
->
fú°_ch™ged_p‹t
;Ö < 
íd
;Ö++) {

506 i‡(
p
->
°©e_ch™ged
) {

507 
p
->
°©e_ch™ged
 = 
Ál£
;

508 
°p
->
fú°_ch™ged_p‹t
 = 
p
 + 1;

509 *
p‹ç
 = 
p
;

510  
åue
;

513 
°p
->
fú°_ch™ged_p‹t
 = 
íd
;

514 *
p‹ç
 = 
NULL
;

515  
Ál£
;

516 
	}
}

521 
	$°p_°©e_«me
(
°p_°©e
 
°©e
)

523 
°©e
) {

524 
STP_DISABLED
:

526 
STP_LISTENING
:

528 
STP_LEARNING
:

530 
STP_FORWARDING
:

532 
STP_BLOCKING
:

535 
	`NOT_REACHED
();

537 
	}
}

544 
boﬁ


545 
	$°p_f‹w¨d_ö_°©e
(
°p_°©e
 
°©e
)

547  (
°©e
 & (
STP_DISABLED
 | 
STP_FORWARDING
)) != 0;

548 
	}
}

555 
boﬁ


556 
	$°p_À¨n_ö_°©e
(
°p_°©e
 
°©e
)

558  (
°©e
 & (
STP_DISABLED
 | 
STP_LEARNING
 | 
STP_FORWARDING
)) != 0;

559 
	}
}

564 
	$°p_rﬁe_«me
(
°p_rﬁe
 
rﬁe
)

566 
rﬁe
) {

567 
STP_ROLE_ROOT
:

569 
STP_ROLE_DESIGNATED
:

571 
STP_ROLE_ALTERNATE
:

573 
STP_ROLE_DISABLED
:

576 
	`NOT_REACHED
();

578 
	}
}

585 
	$°p_ª˚ived_bpdu
(
°p_p‹t
 *
p
, c⁄° *
bpdu
, 
size_t
 
bpdu_size
)

587 
°p
 *°∞
p
->stp;

588 c⁄° 
°p_bpdu_hódî
 *
hódî
;

590 i‡(
p
->
°©e
 =
STP_DISABLED
) {

594 i‡(
bpdu_size
 < (
°p_bpdu_hódî
)) {

595 
	`VLOG_WARN
("%s:Ñe˚ivedÑu¡ %zu-byã BPDU", 
°p
->
«me
, 
bpdu_size
);

596 
p
->
îr‹_cou¡
++;

600 
hódî
 = 
bpdu
;

601 i‡(
hódî
->
¥Ÿocﬁ_id
 !
	`ht⁄s
(
STP_PROTOCOL_ID
)) {

602 
	`VLOG_WARN
("%s:Ñe˚ived BPDU wôh u√x≥˘edÖrŸocﬁ ID %"
PRIu16
,

603 
°p
->
«me
, 
	`¡ohs
(
hódî
->
¥Ÿocﬁ_id
));

604 
p
->
îr‹_cou¡
++;

607 i‡(
hódî
->
¥Ÿocﬁ_vîsi⁄
 !
STP_PROTOCOL_VERSION
) {

608 
	`VLOG_DBG
("%s:Ñe˚ived BPDU wôh u√x≥˘edÖrŸocﬁ vîsi⁄ %"
PRIu8
,

609 
°p
->
«me
, 
hódî
->
¥Ÿocﬁ_vîsi⁄
);

612 
hódî
->
bpdu_ty≥
) {

613 
STP_TYPE_CONFIG
:

614 i‡(
bpdu_size
 < (
°p_c⁄fig_bpdu
)) {

615 
	`VLOG_WARN
("%s:Ñeceived config BPDU with invalid size %zu",

616 
°p
->
«me
, 
bpdu_size
);

617 
p
->
îr‹_cou¡
++;

620 
	`°p_ª˚ived_c⁄fig_bpdu
(
°p
, 
p
, 
bpdu
);

623 
STP_TYPE_TCN
:

624 i‡(
bpdu_size
 !(
°p_t˙_bpdu
)) {

625 
	`VLOG_WARN
("%s:Ñeceived TCN BPDU with invalid size %zu",

626 
°p
->
«me
, 
bpdu_size
);

627 
p
->
îr‹_cou¡
++;

630 
	`°p_ª˚ived_t˙_bpdu
(
°p
, 
p
);

634 
	`VLOG_WARN
("%s:Ñe˚ived BPDU o‡u√x≥˘edÅy≥ %"
PRIu8
,

635 
°p
->
«me
, 
hódî
->
bpdu_ty≥
);

636 
p
->
îr‹_cou¡
++;

639 
p
->
rx_cou¡
++;

640 
	}
}

643 
°p
 *

644 
	$°p_p‹t_gë_°p
(
°p_p‹t
 *
p
)

646  
p
->
°p
;

647 
	}
}

655 
	$°p_p‹t_£t_aux
(
°p_p‹t
 *
p
, *
aux
)

657 
p
->
aux
 =áux;

658 
	}
}

662 
	$°p_p‹t_gë_aux
(
°p_p‹t
 *
p
)

664  
p
->
aux
;

665 
	}
}

669 
	$°p_p‹t_no
(c⁄° 
°p_p‹t
 *
p
)

671 
°p
 *°∞
p
->stp;

672 
	`as£π
(
p
 >
°p
->
p‹ts
 &&Ö < &°p->p‹ts[
	`ARRAY_SIZE
(stp->ports)]);

673  
p
 - 
°p
->
p‹ts
;

674 
	}
}

678 
	$°p_p‹t_gë_id
(c⁄° 
°p_p‹t
 *
p
)

680  
p
->
p‹t_id
;

681 
	}
}

684 
°p_°©e


685 
	$°p_p‹t_gë_°©e
(c⁄° 
°p_p‹t
 *
p
)

687  
p
->
°©e
;

688 
	}
}

691 
°p_rﬁe


692 
	$°p_p‹t_gë_rﬁe
(c⁄° 
°p_p‹t
 *
p
)

694 
°p_p‹t
 *
roŸ_p‹t
 = 
	`°p_gë_roŸ_p‹t
(
p
->
°p
);

696 i‡(
roŸ_p‹t
 &&ÑoŸ_p‹t->
p‹t_id
 =
p
->port_id) {

697  
STP_ROLE_ROOT
;

698 } i‡(
	`°p_is_desig«ãd_p‹t
(
p
)) {

699  
STP_ROLE_DESIGNATED
;

700 } i‡(
p
->
°©e
 =
STP_DISABLED
) {

701  
STP_ROLE_DISABLED
;

703  
STP_ROLE_ALTERNATE
;

705 
	}
}

708 
	$°p_p‹t_gë_cou¡s
(c⁄° 
°p_p‹t
 *
p
,

709 *
tx_cou¡
, *
rx_cou¡
, *
îr‹_cou¡
)

711 *
tx_cou¡
 = 
p
->tx_count;

712 *
rx_cou¡
 = 
p
->rx_count;

713 *
îr‹_cou¡
 = 
p
->error_count;

714 
	}
}

718 
	$°p_p‹t_dißbÀ
(
°p_p‹t
 *
p
)

720 
°p
 *°∞
p
->stp;

721 i‡(
p
->
°©e
 !
STP_DISABLED
) {

722 
boﬁ
 
roŸ
 = 
	`°p_is_roŸ_bridge
(
°p
);

723 
	`°p_become_desig«ãd_p‹t
(
p
);

724 
	`°p_£t_p‹t_°©e
(
p
, 
STP_DISABLED
);

725 
p
->
t›ﬁogy_ch™ge_ack
 = 
Ál£
;

726 
p
->
c⁄fig_≥ndög
 = 
Ál£
;

727 
	`°p_°›_timî
(&
p
->
mesßge_age_timî
);

728 
	`°p_°›_timî
(&
p
->
f‹w¨d_dñay_timî
);

729 
	`°p_c⁄figuøti⁄_upd©e
(
°p
);

730 
	`°p_p‹t_°©e_£À˘i⁄
(
°p
);

731 i‡(
	`°p_is_roŸ_bridge
(
°p
Ë&& !
roŸ
) {

732 
	`°p_become_roŸ_bridge
(
°p
);

734 
p
->
aux
 = 
NULL
;

736 
	}
}

740 
	$°p_p‹t_íabÀ
(
°p_p‹t
 *
p
)

742 i‡(
p
->
°©e
 =
STP_DISABLED
) {

743 
	`°p_öôülize_p‹t
(
p
, 
STP_BLOCKING
);

744 
	`°p_p‹t_°©e_£À˘i⁄
(
p
->
°p
);

746 
	}
}

751 
	$°p_p‹t_£t_¥i‹ôy
(
°p_p‹t
 *
p
, 
uöt8_t
 
√w_¥i‹ôy
)

753 
uöt16_t
 
√w_p‹t_id
 = (
p
->
p‹t_id
 & 0xffË| (
√w_¥i‹ôy
 << 8);

754 i‡(
p
->
p‹t_id
 !
√w_p‹t_id
) {

755 
°p
 *°∞
p
->stp;

756 i‡(
	`°p_is_desig«ãd_p‹t
(
p
)) {

757 
p
->
desig«ãd_p‹t
 = 
√w_p‹t_id
;

759 
p
->
p‹t_id
 = 
√w_p‹t_id
;

760 i‡(
°p
->
bridge_id
 =
p
->
desig«ãd_bridge


761 && 
p
->
p‹t_id
 <Ö->
desig«ãd_p‹t
) {

762 
	`°p_become_desig«ãd_p‹t
(
p
);

763 
	`°p_p‹t_°©e_£À˘i⁄
(
°p
);

766 
	}
}

769 
uöt16_t


770 
	$°p_c⁄vît_•ìd_to_co°
(
•ìd
)

772  
•ìd
 >= 10000 ? 2

773 : 
•ìd
 >= 1000 ? 4

774 : 
•ìd
 >= 100 ? 19

775 : 
•ìd
 >= 16 ? 62

776 : 
•ìd
 >= 10 ? 100

777 : 
•ìd
 >= 4 ? 250

779 
	}
}

785 
	$°p_p‹t_£t_∑th_co°
(
°p_p‹t
 *
p
, 
uöt16_t
 
∑th_co°
)

787 i‡(
p
->
∑th_co°
 !=Öath_cost) {

788 
°p
 *°∞
p
->stp;

789 
p
->
∑th_co°
 =Öath_cost;

790 
	`°p_c⁄figuøti⁄_upd©e
(
°p
);

791 
	`°p_p‹t_°©e_£À˘i⁄
(
°p
);

793 
	}
}

797 
	$°p_p‹t_£t_•ìd
(
°p_p‹t
 *
p
, 
•ìd
)

799 
	`°p_p‹t_£t_∑th_co°
(
p
, 
	`°p_c⁄vît_•ìd_to_co°
(
•ìd
));

800 
	}
}

804 
	$°p_p‹t_íabÀ_ch™ge_dëe˘i⁄
(
°p_p‹t
 *
p
)

806 
p
->
ch™ge_dëe˘i⁄_íabÀd
 = 
åue
;

807 
	}
}

811 
	$°p_p‹t_dißbÀ_ch™ge_dëe˘i⁄
(
°p_p‹t
 *
p
)

813 
p
->
ch™ge_dëe˘i⁄_íabÀd
 = 
Ál£
;

814 
	}
}

817 
	$°p_å™smô_c⁄fig
(
°p_p‹t
 *
p
)

819 
°p
 *°∞
p
->stp;

820 
boﬁ
 
roŸ
 = 
	`°p_is_roŸ_bridge
(
°p
);

821 i‡(!
roŸ
 && !
°p
->
roŸ_p‹t
) {

824 i‡(
p
->
hﬁd_timî
.
a˘ive
) {

825 
p
->
c⁄fig_≥ndög
 = 
åue
;

827 
°p_c⁄fig_bpdu
 
c⁄fig
;

828 
	`mem£t
(&
c⁄fig
, 0,  config);

829 
c⁄fig
.
hódî
.
¥Ÿocﬁ_id
 = 
	`ht⁄s
(
STP_PROTOCOL_ID
);

830 
c⁄fig
.
hódî
.
¥Ÿocﬁ_vîsi⁄
 = 
STP_PROTOCOL_VERSION
;

831 
c⁄fig
.
hódî
.
bpdu_ty≥
 = 
STP_TYPE_CONFIG
;

832 
c⁄fig
.
Êags
 = 0;

833 i‡(
p
->
t›ﬁogy_ch™ge_ack
) {

834 
c⁄fig
.
Êags
 |
STP_CONFIG_TOPOLOGY_CHANGE_ACK
;

836 i‡(
°p
->
t›ﬁogy_ch™ge
) {

837 
c⁄fig
.
Êags
 |
STP_CONFIG_TOPOLOGY_CHANGE
;

839 
c⁄fig
.
roŸ_id
 = 
	`ht⁄Œ
(
°p
->
desig«ãd_roŸ
);

840 
c⁄fig
.
roŸ_∑th_co°
 = 
	`ht⁄l
(
°p
->root_path_cost);

841 
c⁄fig
.
bridge_id
 = 
	`ht⁄Œ
(
°p
->bridge_id);

842 
c⁄fig
.
p‹t_id
 = 
	`ht⁄s
(
p
->port_id);

843 i‡(
roŸ
) {

844 
c⁄fig
.
mesßge_age
 = 
	`ht⁄s
(0);

846 
c⁄fig
.
mesßge_age
 = 
	`ht⁄s
(
°p
->
roŸ_p‹t
->
mesßge_age_timî
.
vÆue


847 + 
MESSAGE_AGE_INCREMENT
);

849 
c⁄fig
.
max_age
 = 
	`ht⁄s
(
°p
->max_age);

850 
c⁄fig
.
hñlo_time
 = 
	`ht⁄s
(
°p
->hello_time);

851 
c⁄fig
.
f‹w¨d_dñay
 = 
	`ht⁄s
(
°p
->forward_delay);

852 i‡(
	`¡ohs
(
c⁄fig
.
mesßge_age
Ë< 
°p
->
max_age
) {

853 
p
->
t›ﬁogy_ch™ge_ack
 = 
Ál£
;

854 
p
->
c⁄fig_≥ndög
 = 
Ál£
;

855 
	`°p_£nd_bpdu
(
p
, &
c⁄fig
,  config);

856 
	`°p_°¨t_timî
(&
p
->
hﬁd_timî
, 0);

859 
	}
}

861 
boﬁ


862 
	$°p_su≥r£des_p‹t_öfo
(c⁄° 
°p_p‹t
 *
p
,

863 c⁄° 
°p_c⁄fig_bpdu
 *
c⁄fig
)

865 i‡(
	`¡ohŒ
(
c⁄fig
->
roŸ_id
Ë!
p
->
desig«ãd_roŸ
) {

866  
	`¡ohŒ
(
c⁄fig
->
roŸ_id
Ë< 
p
->
desig«ãd_roŸ
;

867 } i‡(
	`¡ohl
(
c⁄fig
->
roŸ_∑th_co°
Ë!
p
->
desig«ãd_co°
) {

868  
	`¡ohl
(
c⁄fig
->
roŸ_∑th_co°
Ë< 
p
->
desig«ãd_co°
;

869 } i‡(
	`¡ohŒ
(
c⁄fig
->
bridge_id
Ë!
p
->
desig«ãd_bridge
) {

870  
	`¡ohŒ
(
c⁄fig
->
bridge_id
Ë< 
p
->
desig«ãd_bridge
;

872  (
	`¡ohŒ
(
c⁄fig
->
bridge_id
Ë!
p
->
°p
->bridge_id

873 || 
	`¡ohs
(
c⁄fig
->
p‹t_id
Ë<
p
->
desig«ãd_p‹t
);

875 
	}
}

878 
	$°p_ªc‹d_c⁄fig_öf‹m©i⁄
(
°p_p‹t
 *
p
,

879 c⁄° 
°p_c⁄fig_bpdu
 *
c⁄fig
)

881 
p
->
desig«ãd_roŸ
 = 
	`¡ohŒ
(
c⁄fig
->
roŸ_id
);

882 
p
->
desig«ãd_co°
 = 
	`¡ohl
(
c⁄fig
->
roŸ_∑th_co°
);

883 
p
->
desig«ãd_bridge
 = 
	`¡ohŒ
(
c⁄fig
->
bridge_id
);

884 
p
->
desig«ãd_p‹t
 = 
	`¡ohs
(
c⁄fig
->
p‹t_id
);

885 
	`°p_°¨t_timî
(&
p
->
mesßge_age_timî
, 
	`¡ohs
(
c⁄fig
->
mesßge_age
));

886 
	}
}

889 
	$°p_ªc‹d_c⁄fig_timeout_vÆues
(
°p
 *stp,

890 c⁄° 
°p_c⁄fig_bpdu
 *
c⁄fig
)

892 
°p
->
max_age
 = 
	`¡ohs
(
c⁄fig
->max_age);

893 
°p
->
hñlo_time
 = 
	`¡ohs
(
c⁄fig
->hello_time);

894 
°p
->
f‹w¨d_dñay
 = 
	`¡ohs
(
c⁄fig
->forward_delay);

895 
°p
->
t›ﬁogy_ch™ge
 = 
c⁄fig
->
Êags
 & 
STP_CONFIG_TOPOLOGY_CHANGE
;

896 
	}
}

898 
boﬁ


899 
	$°p_is_desig«ãd_p‹t
(c⁄° 
°p_p‹t
 *
p
)

901  (
p
->
desig«ãd_bridge
 =p->
°p
->
bridge_id


902 && 
p
->
desig«ãd_p‹t
 =p->
p‹t_id
);

903 
	}
}

906 
	$°p_c⁄fig_bpdu_gíî©i⁄
(
°p
 *stp)

908 
°p_p‹t
 *
p
;

910 
	`FOR_EACH_ENABLED_PORT
 (
p
, 
°p
) {

911 i‡(
	`°p_is_desig«ãd_p‹t
(
p
)) {

912 
	`°p_å™smô_c⁄fig
(
p
);

915 
	}
}

918 
	$°p_å™smô_t˙
(
°p
 *stp)

920 
°p_p‹t
 *
p
 = 
°p
->
roŸ_p‹t
;

921 
°p_t˙_bpdu
 
t˙_bpdu
;

922 i‡(!
p
) {

925 
t˙_bpdu
.
hódî
.
¥Ÿocﬁ_id
 = 
	`ht⁄s
(
STP_PROTOCOL_ID
);

926 
t˙_bpdu
.
hódî
.
¥Ÿocﬁ_vîsi⁄
 = 
STP_PROTOCOL_VERSION
;

927 
t˙_bpdu
.
hódî
.
bpdu_ty≥
 = 
STP_TYPE_TCN
;

928 
	`°p_£nd_bpdu
(
p
, &
t˙_bpdu
, Åcn_bpdu);

929 
	}
}

932 
	$°p_c⁄figuøti⁄_upd©e
(
°p
 *stp)

934 
	`°p_roŸ_£À˘i⁄
(
°p
);

935 
	`°p_desig«ãd_p‹t_£À˘i⁄
(
°p
);

936 
	}
}

938 
boﬁ


939 
	$°p_su≥r£des_roŸ
(c⁄° 
°p_p‹t
 *
roŸ
, c⁄° °p_p‹à*
p
)

941 
p_co°
 = 
p
->
desig«ãd_co°
 +Ö->
∑th_co°
;

942 
roŸ_co°
 = 
roŸ
->
desig«ãd_co°
 +ÑoŸ->
∑th_co°
;

944 i‡(
p
->
desig«ãd_roŸ
 !
roŸ
->designated_root) {

945  
p
->
desig«ãd_roŸ
 < 
roŸ
->designated_root;

946 } i‡(
p_co°
 !
roŸ_co°
) {

947  
p_co°
 < 
roŸ_co°
;

948 } i‡(
p
->
desig«ãd_bridge
 !
roŸ
->designated_bridge) {

949  
p
->
desig«ãd_bridge
 < 
roŸ
->designated_bridge;

950 } i‡(
p
->
desig«ãd_p‹t
 !
roŸ
->designated_port) {

951  
p
->
desig«ãd_p‹t
 < 
roŸ
->designated_port;

953  
p
->
p‹t_id
 < 
roŸ
->port_id;

955 
	}
}

958 
	$°p_roŸ_£À˘i⁄
(
°p
 *stp)

960 
°p_p‹t
 *
p
, *
roŸ
;

962 
roŸ
 = 
NULL
;

963 
	`FOR_EACH_ENABLED_PORT
 (
p
, 
°p
) {

964 i‡(
	`°p_is_desig«ãd_p‹t
(
p
)

965 || 
p
->
desig«ãd_roŸ
 >
°p
->
bridge_id
) {

968 i‡(
roŸ
 && !
	`°p_su≥r£des_roŸ
‘oŸ, 
p
)) {

971 
roŸ
 = 
p
;

973 
°p
->
roŸ_p‹t
 = 
roŸ
;

974 i‡(!
roŸ
) {

975 
°p
->
desig«ãd_roŸ
 = sç->
bridge_id
;

976 
°p
->
roŸ_∑th_co°
 = 0;

978 
°p
->
desig«ãd_roŸ
 = 
roŸ
->designated_root;

979 
°p
->
roŸ_∑th_co°
 = 
roŸ
->
desig«ãd_co°
 +ÑoŸ->
∑th_co°
;

981 
	}
}

984 
	$°p_desig«ãd_p‹t_£À˘i⁄
(
°p
 *stp)

986 
°p_p‹t
 *
p
;

988 
	`FOR_EACH_ENABLED_PORT
 (
p
, 
°p
) {

989 i‡(
	`°p_is_desig«ãd_p‹t
(
p
)

990 || 
p
->
desig«ãd_roŸ
 !
°p
->designated_root

991 || 
°p
->
roŸ_∑th_co°
 < 
p
->
desig«ãd_co°


992 || (
°p
->
roŸ_∑th_co°
 =
p
->
desig«ãd_co°


993 && (
°p
->
bridge_id
 < 
p
->
desig«ãd_bridge


994 || (
°p
->
bridge_id
 =
p
->
desig«ãd_bridge


995 && 
p
->
p‹t_id
 <p->
desig«ãd_p‹t
))))

997 
	`°p_become_desig«ãd_p‹t
(
p
);

1000 
	}
}

1003 
	$°p_become_desig«ãd_p‹t
(
°p_p‹t
 *
p
)

1005 
°p
 *°∞
p
->stp;

1006 
p
->
desig«ãd_roŸ
 = 
°p
->designated_root;

1007 
p
->
desig«ãd_co°
 = 
°p
->
roŸ_∑th_co°
;

1008 
p
->
desig«ãd_bridge
 = 
°p
->
bridge_id
;

1009 
p
->
desig«ãd_p‹t
 =Ö->
p‹t_id
;

1010 
	}
}

1013 
	$°p_p‹t_°©e_£À˘i⁄
(
°p
 *stp)

1015 
°p_p‹t
 *
p
;

1017 
	`FOR_EACH_ENABLED_PORT
 (
p
, 
°p
) {

1018 i‡(
p
 =
°p
->
roŸ_p‹t
) {

1019 
p
->
c⁄fig_≥ndög
 = 
Ál£
;

1020 
p
->
t›ﬁogy_ch™ge_ack
 = 
Ál£
;

1021 
	`°p_make_f‹w¨dög
(
p
);

1022 } i‡(
	`°p_is_desig«ãd_p‹t
(
p
)) {

1023 
	`°p_°›_timî
(&
p
->
mesßge_age_timî
);

1024 
	`°p_make_f‹w¨dög
(
p
);

1026 
p
->
c⁄fig_≥ndög
 = 
Ál£
;

1027 
p
->
t›ﬁogy_ch™ge_ack
 = 
Ál£
;

1028 
	`°p_make_blockög
(
p
);

1031 
	}
}

1034 
	$°p_make_f‹w¨dög
(
°p_p‹t
 *
p
)

1036 i‡(
p
->
°©e
 =
STP_BLOCKING
) {

1037 
	`°p_£t_p‹t_°©e
(
p
, 
STP_LISTENING
);

1038 
	`°p_°¨t_timî
(&
p
->
f‹w¨d_dñay_timî
, 0);

1040 
	}
}

1043 
	$°p_make_blockög
(
°p_p‹t
 *
p
)

1045 i‡(!(
p
->
°©e
 & (
STP_DISABLED
 | 
STP_BLOCKING
))) {

1046 i‡(
p
->
°©e
 & (
STP_FORWARDING
 | 
STP_LEARNING
)) {

1047 i‡(
p
->
ch™ge_dëe˘i⁄_íabÀd
) {

1048 
	`°p_t›ﬁogy_ch™ge_dëe˘i⁄
(
p
->
°p
);

1051 
	`°p_£t_p‹t_°©e
(
p
, 
STP_BLOCKING
);

1052 
	`°p_°›_timî
(&
p
->
f‹w¨d_dñay_timî
);

1054 
	}
}

1057 
	$°p_£t_p‹t_°©e
(
°p_p‹t
 *
p
, 
°p_°©e
 
°©e
)

1059 i‡(
°©e
 !
p
->°©ê&& !p->
°©e_ch™ged
) {

1060 
p
->
°©e_ch™ged
 = 
åue
;

1061 i‡(
p
 <Ö->
°p
->
fú°_ch™ged_p‹t
) {

1062 
p
->
°p
->
fú°_ch™ged_p‹t
 =Ö;

1065 
p
->
°©e
 = state;

1066 
	}
}

1069 
	$°p_t›ﬁogy_ch™ge_dëe˘i⁄
(
°p
 *stp)

1071 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 5);

1073 i‡(
	`°p_is_roŸ_bridge
(
°p
)) {

1074 
°p
->
t›ﬁogy_ch™ge
 = 
åue
;

1075 
	`°p_°¨t_timî
(&
°p
->
t›ﬁogy_ch™ge_timî
, 0);

1076 } i‡(!
°p
->
t›ﬁogy_ch™ge_dëe˘ed
) {

1077 
	`°p_å™smô_t˙
(
°p
);

1078 
	`°p_°¨t_timî
(&
°p
->
t˙_timî
, 0);

1080 
°p
->
fdb_√eds_Êush
 = 
åue
;

1081 
°p
->
t›ﬁogy_ch™ge_dëe˘ed
 = 
åue
;

1082 
	`VLOG_INFO_RL
(&
æ
, "%s: dëe˘edÅ›ﬁogy ch™ge.", 
°p
->
«me
);

1083 
	}
}

1086 
	$°p_t›ﬁogy_ch™ge_acknowÀdged
(
°p
 *stp)

1088 
°p
->
t›ﬁogy_ch™ge_dëe˘ed
 = 
Ál£
;

1089 
	`°p_°›_timî
(&
°p
->
t˙_timî
);

1090 
	}
}

1093 
	$°p_acknowÀdge_t›ﬁogy_ch™ge
(
°p_p‹t
 *
p
)

1095 
p
->
t›ﬁogy_ch™ge_ack
 = 
åue
;

1096 
	`°p_å™smô_c⁄fig
(
p
);

1097 
	}
}

1100 
	$°p_ª˚ived_c⁄fig_bpdu
(
°p
 *°p, 
°p_p‹t
 *
p
,

1101 c⁄° 
°p_c⁄fig_bpdu
 *
c⁄fig
)

1103 i‡(
	`¡ohs
(
c⁄fig
->
mesßge_age
Ë>¡ohs(c⁄fig->
max_age
)) {

1104 
	`VLOG_WARN
("%s:Ñeceived config BPDU with messageáge (%u) greater "

1106 
°p
->
«me
,

1107 
	`¡ohs
(
c⁄fig
->
mesßge_age
),Çtohs(c⁄fig->
max_age
));

1110 i‡(
p
->
°©e
 !
STP_DISABLED
) {

1111 
boﬁ
 
roŸ
 = 
	`°p_is_roŸ_bridge
(
°p
);

1112 i‡(
	`°p_su≥r£des_p‹t_öfo
(
p
, 
c⁄fig
)) {

1113 
	`°p_ªc‹d_c⁄fig_öf‹m©i⁄
(
p
, 
c⁄fig
);

1114 
	`°p_c⁄figuøti⁄_upd©e
(
°p
);

1115 
	`°p_p‹t_°©e_£À˘i⁄
(
°p
);

1116 i‡(!
	`°p_is_roŸ_bridge
(
°p
Ë&& 
roŸ
) {

1117 
	`°p_°›_timî
(&
°p
->
hñlo_timî
);

1118 i‡(
°p
->
t›ﬁogy_ch™ge_dëe˘ed
) {

1119 
	`°p_°›_timî
(&
°p
->
t›ﬁogy_ch™ge_timî
);

1120 
	`°p_å™smô_t˙
(
°p
);

1121 
	`°p_°¨t_timî
(&
°p
->
t˙_timî
, 0);

1124 i‡(
p
 =
°p
->
roŸ_p‹t
) {

1125 
	`°p_ªc‹d_c⁄fig_timeout_vÆues
(
°p
, 
c⁄fig
);

1126 
	`°p_c⁄fig_bpdu_gíî©i⁄
(
°p
);

1127 i‡(
c⁄fig
->
Êags
 & 
STP_CONFIG_TOPOLOGY_CHANGE_ACK
) {

1128 
	`°p_t›ﬁogy_ch™ge_acknowÀdged
(
°p
);

1130 i‡(
c⁄fig
->
Êags
 & 
STP_CONFIG_TOPOLOGY_CHANGE
) {

1131 
°p
->
fdb_√eds_Êush
 = 
åue
;

1134 } i‡(
	`°p_is_desig«ãd_p‹t
(
p
)) {

1135 
	`°p_å™smô_c⁄fig
(
p
);

1138 
	}
}

1141 
	$°p_ª˚ived_t˙_bpdu
(
°p
 *°p, 
°p_p‹t
 *
p
)

1143 i‡(
p
->
°©e
 !
STP_DISABLED
) {

1144 i‡(
	`°p_is_desig«ãd_p‹t
(
p
)) {

1145 
	`°p_t›ﬁogy_ch™ge_dëe˘i⁄
(
°p
);

1146 
	`°p_acknowÀdge_t›ﬁogy_ch™ge
(
p
);

1149 
	}
}

1152 
	$°p_hñlo_timî_expúy
(
°p
 *stp)

1154 
	`°p_c⁄fig_bpdu_gíî©i⁄
(
°p
);

1155 
	`°p_°¨t_timî
(&
°p
->
hñlo_timî
, 0);

1156 
	}
}

1159 
	$°p_mesßge_age_timî_expúy
(
°p_p‹t
 *
p
)

1161 
°p
 *°∞
p
->stp;

1162 
boﬁ
 
roŸ
 = 
	`°p_is_roŸ_bridge
(
°p
);

1163 
	`°p_become_desig«ãd_p‹t
(
p
);

1164 
	`°p_c⁄figuøti⁄_upd©e
(
°p
);

1165 
	`°p_p‹t_°©e_£À˘i⁄
(
°p
);

1166 i‡(
	`°p_is_roŸ_bridge
(
°p
Ë&& !
roŸ
) {

1167 
°p
->
max_age
 = sç->
bridge_max_age
;

1168 
°p
->
hñlo_time
 = sç->
bridge_hñlo_time
;

1169 
°p
->
f‹w¨d_dñay
 = sç->
bridge_f‹w¨d_dñay
;

1170 
	`°p_t›ﬁogy_ch™ge_dëe˘i⁄
(
°p
);

1171 
	`°p_°›_timî
(&
°p
->
t˙_timî
);

1172 
	`°p_c⁄fig_bpdu_gíî©i⁄
(
°p
);

1173 
	`°p_°¨t_timî
(&
°p
->
hñlo_timî
, 0);

1175 
	}
}

1177 
boﬁ


1178 
	$°p_is_desig«ãd_f‹_some_p‹t
(c⁄° 
°p
 *stp)

1180 c⁄° 
°p_p‹t
 *
p
;

1182 
	`FOR_EACH_ENABLED_PORT
 (
p
, 
°p
) {

1183 i‡(
p
->
desig«ãd_bridge
 =
°p
->
bridge_id
) {

1184  
åue
;

1187  
Ál£
;

1188 
	}
}

1191 
	$°p_f‹w¨d_dñay_timî_expúy
(
°p_p‹t
 *
p
)

1193 i‡(
p
->
°©e
 =
STP_LISTENING
) {

1194 
	`°p_£t_p‹t_°©e
(
p
, 
STP_LEARNING
);

1195 
	`°p_°¨t_timî
(&
p
->
f‹w¨d_dñay_timî
, 0);

1196 } i‡(
p
->
°©e
 =
STP_LEARNING
) {

1197 
	`°p_£t_p‹t_°©e
(
p
, 
STP_FORWARDING
);

1198 i‡(
	`°p_is_desig«ãd_f‹_some_p‹t
(
p
->
°p
)) {

1199 i‡(
p
->
ch™ge_dëe˘i⁄_íabÀd
) {

1200 
	`°p_t›ﬁogy_ch™ge_dëe˘i⁄
(
p
->
°p
);

1204 
	}
}

1207 
	$°p_t˙_timî_expúy
(
°p
 *stp)

1209 
	`°p_å™smô_t˙
(
°p
);

1210 
	`°p_°¨t_timî
(&
°p
->
t˙_timî
, 0);

1211 
	}
}

1214 
	$°p_t›ﬁogy_ch™ge_timî_expúy
(
°p
 *stp)

1216 
°p
->
t›ﬁogy_ch™ge_dëe˘ed
 = 
Ál£
;

1217 
°p
->
t›ﬁogy_ch™ge
 = 
Ál£
;

1218 
	}
}

1221 
	$°p_hﬁd_timî_expúy
(
°p_p‹t
 *
p
)

1223 i‡(
p
->
c⁄fig_≥ndög
) {

1224 
	`°p_å™smô_c⁄fig
(
p
);

1226 
	}
}

1229 
	$°p_öôülize_p‹t
(
°p_p‹t
 *
p
, 
°p_°©e
 
°©e
)

1231 
	`as£π
(
°©e
 & (
STP_DISABLED
 | 
STP_BLOCKING
));

1232 
	`°p_become_desig«ãd_p‹t
(
p
);

1233 
	`°p_£t_p‹t_°©e
(
p
, 
°©e
);

1234 
p
->
t›ﬁogy_ch™ge_ack
 = 
Ál£
;

1235 
p
->
c⁄fig_≥ndög
 = 
Ál£
;

1236 
p
->
ch™ge_dëe˘i⁄_íabÀd
 = 
åue
;

1237 
p
->
aux
 = 
NULL
;

1238 
	`°p_°›_timî
(&
p
->
mesßge_age_timî
);

1239 
	`°p_°›_timî
(&
p
->
f‹w¨d_dñay_timî
);

1240 
	`°p_°›_timî
(&
p
->
hﬁd_timî
);

1241 
p
->
tx_cou¡
 =Ö->
rx_cou¡
 =Ö->
îr‹_cou¡
 = 0;

1242 
	}
}

1245 
	$°p_become_roŸ_bridge
(
°p
 *stp)

1247 
°p
->
max_age
 = sç->
bridge_max_age
;

1248 
°p
->
hñlo_time
 = sç->
bridge_hñlo_time
;

1249 
°p
->
f‹w¨d_dñay
 = sç->
bridge_f‹w¨d_dñay
;

1250 
	`°p_t›ﬁogy_ch™ge_dëe˘i⁄
(
°p
);

1251 
	`°p_°›_timî
(&
°p
->
t˙_timî
);

1252 
	`°p_c⁄fig_bpdu_gíî©i⁄
(
°p
);

1253 
	`°p_°¨t_timî
(&
°p
->
hñlo_timî
, 0);

1254 
	}
}

1257 
	$°p_°¨t_timî
(
°p_timî
 *
timî
, 
vÆue
)

1259 
timî
->
vÆue
 = value;

1260 
timî
->
a˘ive
 = 
åue
;

1261 
	}
}

1264 
	$°p_°›_timî
(
°p_timî
 *
timî
)

1266 
timî
->
a˘ive
 = 
Ál£
;

1267 
	}
}

1269 
boﬁ


1270 
	$°p_timî_expúed
(
°p_timî
 *
timî
, 
ñ≠£d
, 
timeout
)

1272 i‡(
timî
->
a˘ive
) {

1273 
timî
->
vÆue
 +
ñ≠£d
;

1274 i‡(
timî
->
vÆue
 >
timeout
) {

1275 
timî
->
a˘ive
 = 
Ál£
;

1276  
åue
;

1279  
Ál£
;

1280 
	}
}

1285 
	$ms_to_timî
(
ms
)

1287  
ms
 * 0x100 / 1000;

1288 
	}
}

1293 
	$timî_to_ms
(
timî
)

1295  
timî
 * 1000 / 0x100;

1296 
	}
}

1299 
	$˛amp
(
x
, 
mö
, 
max
)

1301  
x
 < 
mö
 ? mö : x > 
max
 ? max : x;

1302 
	}
}

1305 
	$°p_upd©e_bridge_timîs
(
°p
 *stp)

1307 
ht
, 
ma
, 
fd
;

1309 
ht
 = 
	`˛amp
(
°p
->
rq_hñlo_time
, 1000, 10000);

1310 
ma
 = 
	`˛amp
(
°p
->
rq_max_age
, 
	`MAX
(2 * (
ht
 + 1000), 6000), 40000);

1311 
fd
 = 
	`˛amp
(
°p
->
rq_f‹w¨d_dñay
, 
ma
 / 2 + 1000, 30000);

1313 
°p
->
bridge_hñlo_time
 = 
	`ms_to_timî
(
ht
);

1314 
°p
->
bridge_max_age
 = 
	`ms_to_timî
(
ma
);

1315 
°p
->
bridge_f‹w¨d_dñay
 = 
	`ms_to_timî
(
fd
);

1317 i‡(
	`°p_is_roŸ_bridge
(
°p
)) {

1318 
°p
->
max_age
 = sç->
bridge_max_age
;

1319 
°p
->
hñlo_time
 = sç->
bridge_hñlo_time
;

1320 
°p
->
f‹w¨d_dñay
 = sç->
bridge_f‹w¨d_dñay
;

1322 
	}
}

1325 
	$°p_£nd_bpdu
(
°p_p‹t
 *
p
, c⁄° *
bpdu
, 
size_t
 
bpdu_size
)

1327 
ëh_hódî
 *
ëh
;

1328 
Œc_hódî
 *
Œc
;

1329 
oÂbuf
 *
pkt
;

1332 
pkt
 = 
	`oÂbuf_√w
(
ETH_HEADER_LEN
 + 
LLC_HEADER_LEN
 + 
bpdu_size
);

1333 
pkt
->
l2
 = 
ëh
 = 
	`oÂbuf_put_zîos
(pkt,  *eth);

1334 
Œc
 = 
	`oÂbuf_put_zîos
(
pkt
,  *llc);

1335 
pkt
->
l3
 = 
	`oÂbuf_put
’kt, 
bpdu
, 
bpdu_size
);

1338 
	`mem˝y
(
ëh
->
ëh_d°
, 
ëh_addr_°p
, 
ETH_ADDR_LEN
);

1340 
ëh
->
ëh_ty≥
 = 
	`ht⁄s
(
pkt
->
size
 - 
ETH_HEADER_LEN
);

1343 
Œc
->
Œc_dßp
 = 
STP_LLC_DSAP
;

1344 
Œc
->
Œc_sßp
 = 
STP_LLC_SSAP
;

1345 
Œc
->
Œc_˙é
 = 
STP_LLC_CNTL
;

1347 
p
->
°p
->
	`£nd_bpdu
(
pkt
, 
	`°p_p‹t_no
’),Ö->°p->
aux
);

1348 
p
->
tx_cou¡
++;

1349 
	}
}

1353 
°p
 *

1354 
	$°p_föd
(c⁄° *
«me
)

1356 
°p
 *stp;

1358 
	`LIST_FOR_EACH
 (
°p
, 
node
, &
Æl_°ps
) {

1359 i‡(!
	`°rcmp
(
°p
->
«me
,Çame)) {

1360  
°p
;

1363  
NULL
;

1364 
	}
}

1367 
	$°p_unix˘l_t˙
(
unix˘l_c⁄n
 *
c⁄n
, 
¨gc
,

1368 c⁄° *
¨gv
[], *
aux
 
OVS_UNUSED
)

1370 i‡(
¨gc
 > 1) {

1371 
°p
 *°∞
	`°p_föd
(
¨gv
[1]);

1373 i‡(!
°p
) {

1374 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, "no such stp object");

1377 
	`°p_t›ﬁogy_ch™ge_dëe˘i⁄
(
°p
);

1379 
°p
 *stp;

1381 
	`LIST_FOR_EACH
 (
°p
, 
node
, &
Æl_°ps
) {

1382 
	`°p_t›ﬁogy_ch™ge_dëe˘i⁄
(
°p
);

1386 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, "OK");

1387 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/stp.h

17 #i‚de‡
STP_H


18 
	#STP_H
 1

	)

23 
	~<°dboﬁ.h
>

24 
	~<°döt.h
>

25 
	~"compûî.h
"

26 
	~"utû.h
"

28 
	goÂbuf
;

31 
	#STP_LLC_SSAP
 0x42

	)

32 
	#STP_LLC_DSAP
 0x42

	)

33 
	#STP_LLC_CNTL
 0x03

	)

36 
	#STP_DEFAULT_BRIDGE_PRIORITY
 32768

	)

37 
	#STP_DEFAULT_PORT_PRIORITY
 128

	)

40 
	#STP_DEFAULT_MAX_AGE
 20000

	)

41 
	#STP_DEFAULT_HELLO_TIME
 2000

	)

42 
	#STP_DEFAULT_FWD_DELAY
 15000

	)

46 
uöt64_t
 
	t°p_idítifõr
;

49 
	#STP_ID_FMT
 "%04"
PRIx16
".%012"
PRIx64


	)

50 
	#STP_ID_ARGS
(
°p_id
) \

51 (
uöt16_t
)((
°p_id
) >> 48), \

52 (
uöt64_t
)((
°p_id
Ë& 0xffffffffffffULL)

	)

54 
	#STP_PORT_ID_FMT
 "%04"
PRIx16


	)

57 
	#STP_MAX_PORTS
 255

	)

58 
°p_öô
();

59 
°p
 *
°p_¸óã
(c⁄° *
«me
, 
°p_idítifõr
 
bridge_id
,

60 (*
£nd_bpdu
)(
oÂbuf
 *
bpdu
, 
p‹t_no
,

61 *
aux
),

62 *
aux
);

63 
	`°p_de°roy
(
°p
 *);

64 
	`°p_tick
(
°p
 *, 
ms
);

65 
	`°p_£t_bridge_id
(
°p
 *, 
°p_idítifõr
 
bridge_id
);

66 
	`°p_£t_bridge_¥i‹ôy
(
°p
 *, 
uöt16_t
 
√w_¥i‹ôy
);

67 
	`°p_£t_hñlo_time
(
°p
 *, 
ms
);

68 
	`°p_£t_max_age
(
°p
 *, 
ms
);

69 
	`°p_£t_f‹w¨d_dñay
(
°p
 *, 
ms
);

72 c⁄° *
	`°p_gë_«me
(c⁄° 
°p
 *);

73 
°p_idítifõr
 
	`°p_gë_bridge_id
(c⁄° 
°p
 *);

74 
°p_idítifõr
 
	`°p_gë_desig«ãd_roŸ
(c⁄° 
°p
 *);

75 
boﬁ
 
	`°p_is_roŸ_bridge
(c⁄° 
°p
 *);

76 
	`°p_gë_roŸ_∑th_co°
(c⁄° 
°p
 *);

77 
	`°p_gë_hñlo_time
(c⁄° 
°p
 *);

78 
	`°p_gë_max_age
(c⁄° 
°p
 *);

79 
	`°p_gë_f‹w¨d_dñay
(c⁄° 
°p
 *);

80 
boﬁ
 
	`°p_check_™d_ª£t_fdb_Êush
(
°p
 *);

83 
°p_p‹t
 *
	`°p_gë_p‹t
(
°p
 *, 
p‹t_no
);

84 
°p_p‹t
 *
	`°p_gë_roŸ_p‹t
(
°p
 *);

85 
boﬁ
 
	`°p_gë_ch™ged_p‹t
(
°p
 *, 
°p_p‹t
 **
p‹ç
);

112 
	e°p_°©e
 {

113 
STP_DISABLED
 = 1 << 0,

114 
STP_LISTENING
 = 1 << 1,

115 
STP_LEARNING
 = 1 << 2,

116 
STP_FORWARDING
 = 1 << 3,

117 
STP_BLOCKING
 = 1 << 4

119 c⁄° *
	`°p_°©e_«me
(
°p_°©e
);

120 
boﬁ
 
	`°p_f‹w¨d_ö_°©e
(
°p_°©e
);

121 
boﬁ
 
	`°p_À¨n_ö_°©e
(
°p_°©e
);

124 
	e°p_rﬁe
 {

125 
STP_ROLE_ROOT
,

126 
STP_ROLE_DESIGNATED
,

127 
STP_ROLE_ALTERNATE
,

128 
STP_ROLE_DISABLED


130 c⁄° *
	`°p_rﬁe_«me
(
°p_rﬁe
);

132 
	`°p_ª˚ived_bpdu
(
°p_p‹t
 *, c⁄° *
bpdu
, 
size_t
 
bpdu_size
);

134 
°p
 *
	`°p_p‹t_gë_°p
(
°p_p‹t
 *);

135 
	`°p_p‹t_£t_aux
(
°p_p‹t
 *, *);

136 *
	`°p_p‹t_gë_aux
(
°p_p‹t
 *);

137 
	`°p_p‹t_no
(c⁄° 
°p_p‹t
 *);

138 
	`°p_p‹t_gë_id
(c⁄° 
°p_p‹t
 *);

139 
°p_°©e
 
	`°p_p‹t_gë_°©e
(c⁄° 
°p_p‹t
 *);

140 
°p_rﬁe
 
	`°p_p‹t_gë_rﬁe
(c⁄° 
°p_p‹t
 *);

141 
	`°p_p‹t_gë_cou¡s
(c⁄° 
°p_p‹t
 *,

142 *
tx_cou¡
, *
rx_cou¡
, *
îr‹_cou¡
);

143 
	`°p_p‹t_íabÀ
(
°p_p‹t
 *);

144 
	`°p_p‹t_dißbÀ
(
°p_p‹t
 *);

145 
	`°p_p‹t_£t_¥i‹ôy
(
°p_p‹t
 *, 
uöt8_t
 
√w_¥i‹ôy
);

146 
uöt16_t
 
	`°p_c⁄vît_•ìd_to_co°
(
•ìd
);

147 
	`°p_p‹t_£t_∑th_co°
(
°p_p‹t
 *, 
uöt16_t
 
∑th_co°
);

148 
	`°p_p‹t_£t_•ìd
(
°p_p‹t
 *, 
•ìd
);

149 
	`°p_p‹t_íabÀ_ch™ge_dëe˘i⁄
(
°p_p‹t
 *);

150 
	`°p_p‹t_dißbÀ_ch™ge_dëe˘i⁄
(
°p_p‹t
 *);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/stream-fd.c

17 
	~<c⁄fig.h
>

18 
	~"°ªam-fd.h
"

19 
	~<as£π.h
>

20 
	~<î∫o.h
>

21 
	~<pﬁl.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

24 
	~<sys/sockë.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<uni°d.h
>

27 
	~"Áèl-sig«l.h
"

28 
	~"Àak-checkî.h
"

29 
	~"pﬁl-lo›.h
"

30 
	~"sockë-utû.h
"

31 
	~"°ªss.h
"

32 
	~"utû.h
"

33 
	~"°ªam-¥ovidî.h
"

34 
	~"°ªam.h
"

35 
	~"vlog.h
"

37 
VLOG_DEFINE_THIS_MODULE
(
°ªam_fd
);

41 
	s°ªam_fd


43 
°ªam
 
	m°ªam
;

44 
	mfd
;

47 c⁄° 
°ªam_˛ass
 
	g°ªam_fd_˛ass
;

49 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(10, 25);

51 
maybe_u∆ök_™d_‰ì
(*
∑th
);

60 
	$√w_fd_°ªam
(c⁄° *
«me
, 
fd
, 
c⁄√˘_°©us
,

61 
°ªam
 **
°ªamp
)

63 
°ªam_fd
 *
s
;

65 
s
 = 
	`xmÆloc
( *s);

66 
	`°ªam_öô
(&
s
->
°ªam
, &
°ªam_fd_˛ass
, 
c⁄√˘_°©us
, 
«me
);

67 
s
->
fd
 = fd;

68 *
°ªamp
 = &
s
->
°ªam
;

70 
	}
}

72 
°ªam_fd
 *

73 
	$°ªam_fd_ˇ°
(
°ªam
 *stream)

75 
	`°ªam_as£π_˛ass
(
°ªam
, &
°ªam_fd_˛ass
);

76  
	`CONTAINER_OF
(
°ªam
, 
°ªam_fd
, stream);

77 
	}
}

80 
	$fd_˛o£
(
°ªam
 *stream)

82 
°ªam_fd
 *
s
 = 
	`°ªam_fd_ˇ°
(
°ªam
);

83 
	`˛o£
(
s
->
fd
);

84 
	`‰ì
(
s
);

85 
	}
}

88 
	$fd_c⁄√˘
(
°ªam
 *stream)

90 
°ªam_fd
 *
s
 = 
	`°ªam_fd_ˇ°
(
°ªam
);

91  
	`check_c⁄√˘i⁄_com∂ëi⁄
(
s
->
fd
);

92 
	}
}

94 
STRESS_OPTION
(

95 
°ªam_Êaky_ªcv
, "simulate failure of fd streamÑecvs",

98 
ssize_t


99 
	$fd_ªcv
(
°ªam
 *°ªam, *
buf„r
, 
size_t
 
n
)

101 
°ªam_fd
 *
s
 = 
	`°ªam_fd_ˇ°
(
°ªam
);

102 
ssize_t
 
ªtvÆ
;

104 i‡(
	`STRESS
(
°ªam_Êaky_ªcv
)) {

105  -
EIO
;

108 
ªtvÆ
 = 
	`ªad
(
s
->
fd
, 
buf„r
, 
n
);

109  
ªtvÆ
 >0 ?ÑëvÆ : -
î∫o
;

110 
	}
}

112 
STRESS_OPTION
(

113 
°ªam_Êaky_£nd
, "simulate failure of fd stream sends",

116 
ssize_t


117 
	$fd_£nd
(
°ªam
 *°ªam, c⁄° *
buf„r
, 
size_t
 
n
)

119 
°ªam_fd
 *
s
 = 
	`°ªam_fd_ˇ°
(
°ªam
);

120 
ssize_t
 
ªtvÆ
;

122 i‡(
	`STRESS
(
°ªam_Êaky_£nd
)) {

123  -
EIO
;

126 
ªtvÆ
 = 
	`wrôe
(
s
->
fd
, 
buf„r
, 
n
);

127  (
ªtvÆ
 > 0 ?Ñetval

128 : 
ªtvÆ
 =0 ? -
EAGAIN


129 : -
î∫o
);

130 
	}
}

133 
	$fd_waô
(
°ªam
 *°ªam, 
°ªam_waô_ty≥
 
waô
)

135 
°ªam_fd
 *
s
 = 
	`°ªam_fd_ˇ°
(
°ªam
);

136 
waô
) {

137 
STREAM_CONNECT
:

138 
STREAM_SEND
:

139 
	`pﬁl_fd_waô
(
s
->
fd
, 
POLLOUT
);

142 
STREAM_RECV
:

143 
	`pﬁl_fd_waô
(
s
->
fd
, 
POLLIN
);

147 
	`NOT_REACHED
();

149 
	}
}

151 c⁄° 
°ªam_˛ass
 
	g°ªam_fd_˛ass
 = {

153 
Ál£
,

154 
NULL
,

155 
fd_˛o£
,

156 
fd_c⁄√˘
,

157 
fd_ªcv
,

158 
fd_£nd
,

159 
NULL
,

160 
NULL
,

161 
fd_waô
,

166 
	sfd_p°ªam


168 
p°ªam
 
	mp°ªam
;

169 
	mfd
;

170 (*
	mac˚±_cb
)(
	mfd
, c⁄° 
	msockaddr
 *, 
size_t
 
	mß_Àn
,

171 
	m°ªam
 **);

172 (*
	m£t_ds˝_cb
)(
	mfd
, 
uöt8_t
 
	mds˝
);

173 *
	mu∆ök_∑th
;

176 
p°ªam_˛ass
 
	gfd_p°ªam_˛ass
;

178 
fd_p°ªam
 *

179 
	$fd_p°ªam_ˇ°
(
p°ªam
 *pstream)

181 
	`p°ªam_as£π_˛ass
(
p°ªam
, &
fd_p°ªam_˛ass
);

182  
	`CONTAINER_OF
(
p°ªam
, 
fd_p°ªam
,Östream);

183 
	}
}

200 
√w_fd_p°ªam
(c⁄° *
«me
, 
fd
,

201 (*
ac˚±_cb
)(
fd
, c⁄° 
sockaddr
 *
ß
,

202 
size_t
 
ß_Àn
, 
°ªam
 **
°ªamp
),

203 (*
£t_ds˝_cb
)(
fd
, 
uöt8_t
 
ds˝
),

204 *
u∆ök_∑th
, 
p°ªam
 **
p°ªamp
)

206 
fd_p°ªam
 *
ps
 = 
	`xmÆloc
( *ps);

207 
	`p°ªam_öô
(&
ps
->
p°ªam
, &
fd_p°ªam_˛ass
, 
«me
);

208 
ps
->
fd
 = fd;

209 
ps
->
ac˚±_cb
 =áccept_cb;

210 
ps
->
£t_ds˝_cb
 = set_dscp_cb;

211 
ps
->
u∆ök_∑th
 = unlink_path;

212 *
p°ªamp
 = &
ps
->
p°ªam
;

214 
	}
}

217 
	$pfd_˛o£
(
p°ªam
 *pstream)

219 
fd_p°ªam
 *
ps
 = 
	`fd_p°ªam_ˇ°
(
p°ªam
);

220 
	`˛o£
(
ps
->
fd
);

221 
	`maybe_u∆ök_™d_‰ì
(
ps
->
u∆ök_∑th
);

222 
	`‰ì
(
ps
);

223 
	}
}

226 
	$pfd_ac˚±
(
p°ªam
 *p°ªam, 
°ªam
 **
√w_°ªamp
)

228 
fd_p°ªam
 *
ps
 = 
	`fd_p°ªam_ˇ°
(
p°ªam
);

229 
sockaddr_°‹age
 
ss
;

230 
sockÀn_t
 
ss_Àn
 =  
ss
;

231 
√w_fd
;

232 
ªtvÆ
;

234 
√w_fd
 = 
	`ac˚±
(
ps
->
fd
, (
sockaddr
 *Ë&
ss
, &
ss_Àn
);

235 i‡(
√w_fd
 < 0) {

236 
ªtvÆ
 = 
î∫o
;

237 i‡(
ªtvÆ
 !
EAGAIN
) {

238 
	`VLOG_DBG_RL
(&
æ
, "ac˚±: %s", 
	`°ªº‹
(
ªtvÆ
));

240  
ªtvÆ
;

243 
ªtvÆ
 = 
	`£t_n⁄blockög
(
√w_fd
);

244 i‡(
ªtvÆ
) {

245 
	`˛o£
(
√w_fd
);

246  
ªtvÆ
;

249  
ps
->
	`ac˚±_cb
(
√w_fd
, (c⁄° 
sockaddr
 *Ë&
ss
, 
ss_Àn
,

250 
√w_°ªamp
);

251 
	}
}

254 
	$pfd_waô
(
p°ªam
 *pstream)

256 
fd_p°ªam
 *
ps
 = 
	`fd_p°ªam_ˇ°
(
p°ªam
);

257 
	`pﬁl_fd_waô
(
ps
->
fd
, 
POLLIN
);

258 
	}
}

261 
	$pfd_£t_ds˝
(
p°ªam
 *p°ªam, 
uöt8_t
 
ds˝
)

263 
fd_p°ªam
 *
ps
 = 
	`fd_p°ªam_ˇ°
(
p°ªam
);

264 i‡(
ps
->
£t_ds˝_cb
) {

265  
ps
->
	`£t_ds˝_cb
’s->
fd
, 
ds˝
);

268 
	}
}

270 
p°ªam_˛ass
 
	gfd_p°ªam_˛ass
 = {

272 
Ál£
,

273 
NULL
,

274 
pfd_˛o£
,

275 
pfd_ac˚±
,

276 
pfd_waô
,

277 
pfd_£t_ds˝
,

282 
	$maybe_u∆ök_™d_‰ì
(*
∑th
)

284 i‡(
∑th
) {

285 
	`Áèl_sig«l_u∆ök_fûe_now
(
∑th
);

286 
	`‰ì
(
∑th
);

288 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/stream-fd.h

17 #i‚de‡
STREAM_FD_H


18 
	#STREAM_FD_H
 1

	)

20 
	~<°dboﬁ.h
>

21 
	~<°ddef.h
>

22 
	~<°döt.h
>

24 
	g°ªam
;

25 
	gp°ªam
;

26 
	gsockaddr
;

28 
√w_fd_°ªam
(c⁄° *
«me
, 
fd
, 
c⁄√˘_°©us
,

29 
°ªam
 **
°ªamp
);

30 
√w_fd_p°ªam
(c⁄° *
«me
, 
fd
,

31 (*
ac˚±_cb
)(
fd
, c⁄° 
sockaddr
 *,

32 
size_t
 
ß_Àn
, 
°ªam
 **),

33 (*
£t_ds˝_cb
)(
fd
, 
uöt8_t
 
ds˝
),

34 *
u∆ök_∑th
,

35 
p°ªam
 **
p°ªamp
);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/stream-nossl.c

17 
	~<c⁄fig.h
>

18 
	~"°ªam-s¶.h
"

19 
	~"vlog.h
"

21 
VLOG_DEFINE_THIS_MODULE
(
°ªam_nos¶
);

25 
boﬁ


26 
	$°ªam_s¶_is_c⁄figuªd
()

28  
Ál£
;

29 
	}
}

31 
NO_RETURN


32 
	$nos¶_›ti⁄
(c⁄° *
dëaû
)

34 
	`VLOG_FATAL
("%s specified but Open vSwitch was built without SSL support",

35 
dëaû
);

36 
	}
}

39 
	$°ªam_s¶_£t_¥iv©e_key_fûe
(c⁄° *
fûe_«me
)

41 i‡(
fûe_«me
 !
NULL
) {

42 
	`nos¶_›ti⁄
("Private key");

44 
	}
}

47 
	$°ªam_s¶_£t_˚πifiˇã_fûe
(c⁄° *
fûe_«me
)

49 i‡(
fûe_«me
 !
NULL
) {

50 
	`nos¶_›ti⁄
("Certificate");

52 
	}
}

55 
	$°ªam_s¶_£t_ˇ_˚π_fûe
(c⁄° *
fûe_«me
, 
boﬁ
 
boŸ°øp
 
OVS_UNUSED
)

57 i‡(
fûe_«me
 !
NULL
) {

58 
	`nos¶_›ti⁄
("CA certificate");

60 
	}
}

63 
	$°ªam_s¶_£t_≥î_ˇ_˚π_fûe
(c⁄° *
fûe_«me
)

65 i‡(
fûe_«me
 !
NULL
) {

66 
	`nos¶_›ti⁄
("Peer CA certificate");

68 
	}
}

71 
	$°ªam_s¶_£t_key_™d_˚π
(c⁄° *
¥iv©e_key_fûe
,

72 c⁄° *
˚πifiˇã_fûe
)

74 
	`°ªam_s¶_£t_¥iv©e_key_fûe
(
¥iv©e_key_fûe
);

75 
	`°ªam_s¶_£t_˚πifiˇã_fûe
(
˚πifiˇã_fûe
);

76 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/stream-provider.h

17 #i‚de‡
STREAM_PROVIDER_H


18 
	#STREAM_PROVIDER_H
 1

	)

20 
	~<as£π.h
>

21 
	~<sys/ty≥s.h
>

22 
	~"°ªam.h
"

29 
	s°ªam
 {

30 c⁄° 
°ªam_˛ass
 *
	m˛ass
;

31 
	m°©e
;

32 
	mîr‹
;

33 
ovs_be32
 
	mªmŸe_ù
;

34 
ovs_be16
 
	mªmŸe_p‹t
;

35 
ovs_be32
 
	mloˇl_ù
;

36 
ovs_be16
 
	mloˇl_p‹t
;

37 *
	m«me
;

40 
°ªam_öô
(
°ªam
 *, c⁄° 
°ªam_˛ass
 *,

41 
c⁄√˘_°©us
, c⁄° *
«me
);

42 
°ªam_£t_ªmŸe_ù
(
°ªam
 *, 
ovs_be32
 
ªmŸe_ù
);

43 
°ªam_£t_ªmŸe_p‹t
(
°ªam
 *, 
ovs_be16
 
ªmŸe_p‹t
);

44 
°ªam_£t_loˇl_ù
(
°ªam
 *, 
ovs_be32
 
loˇl_ù
);

45 
°ªam_£t_loˇl_p‹t
(
°ªam
 *, 
ovs_be16
 
loˇl_p‹t
);

46 
ölöe
 
	$°ªam_as£π_˛ass
(c⁄° 
°ªam
 *stream,

47 c⁄° 
°ªam_˛ass
 *
˛ass
)

49 
	`as£π
(
°ªam
->
˛ass
 == class);

50 
	}
}

52 
	s°ªam_˛ass
 {

54 c⁄° *
	m«me
;

59 
boﬁ
 
	m√eds_¥obes
;

76 (*
	m›í
)(c⁄° *
	m«me
, *
	msuffix
, 
°ªam
 **
	m°ªamp
,

77 
uöt8_t
 
	mds˝
);

80 (*
	m˛o£
)(
°ªam
 *
	m°ªam
);

89 (*
	mc⁄√˘
)(
°ªam
 *
	m°ªam
);

104 
ssize_t
 (*
ªcv
)(
°ªam
 *
	m°ªam
, *
	mbuf„r
, 
size_t
 
	mn
);

118 
ssize_t
 (*
£nd
)(
°ªam
 *
	m°ªam
, c⁄° *
	mbuf„r
, 
size_t
 
	mn
);

124 (*
	mrun
)(
°ªam
 *
	m°ªam
);

130 (*
	mrun_waô
)(
°ªam
 *
	m°ªam
);

134 (*
	mwaô
)(
°ªam
 *
	m°ªam
, 
°ªam_waô_ty≥
 
	mty≥
);

140 
	sp°ªam
 {

141 c⁄° 
p°ªam_˛ass
 *
	m˛ass
;

142 *
	m«me
;

145 
p°ªam_öô
(
p°ªam
 *, c⁄° 
p°ªam_˛ass
 *, c⁄° *
«me
);

146 
ölöe
 
	$p°ªam_as£π_˛ass
(c⁄° 
p°ªam
 *pstream,

147 c⁄° 
p°ªam_˛ass
 *
˛ass
)

149 
	`as£π
(
p°ªam
->
˛ass
 == class);

150 
	}
}

152 
	sp°ªam_˛ass
 {

154 c⁄° *
	m«me
;

159 
boﬁ
 
	m√eds_¥obes
;

176 (*
	mli°í
)(c⁄° *
	m«me
, *
	msuffix
, 
p°ªam
 **
	mp°ªamp
,

177 
uöt8_t
 
	mds˝
);

180 (*
	m˛o£
)(
p°ªam
 *
	mp°ªam
);

188 (*
	mac˚±
)(
p°ªam
 *
	mp°ªam
, 
°ªam
 **
	m√w_°ªamp
);

192 (*
	mwaô
)(
p°ªam
 *
	mp°ªam
);

195 (*
	m£t_ds˝
)(
p°ªam
 *
	mp°ªam
, 
uöt8_t
 
	mds˝
);

199 c⁄° 
°ªam_˛ass
 
t˝_°ªam_˛ass
;

200 c⁄° 
p°ªam_˛ass
 
±˝_p°ªam_˛ass
;

201 c⁄° 
°ªam_˛ass
 
unix_°ªam_˛ass
;

202 c⁄° 
p°ªam_˛ass
 
punix_p°ªam_˛ass
;

203 #ifde‡
HAVE_OPENSSL


204 c⁄° 
°ªam_˛ass
 
s¶_°ªam_˛ass
;

205 c⁄° 
p°ªam_˛ass
 
ps¶_p°ªam_˛ass
;

	@/home/lsch/mytest/openvswitch-1.9.0/lib/stream-ssl.c

17 
	~<c⁄fig.h
>

18 
	~"°ªam-s¶.h
"

19 
	~"dh∑øms.h
"

20 
	~<as£π.h
>

21 
	~<˘y≥.h
>

22 
	~<î∫o.h
>

23 
	~<öây≥s.h
>

24 
	~<°rög.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<sys/sockë.h
>

27 
	~<√töë/t˝.h
>

28 
	~<›ís¶/îr.h
>

29 
	~<›ís¶/ønd.h
>

30 
	~<›ís¶/s¶.h
>

31 
	~<›ís¶/x509v3.h
>

32 
	~<pﬁl.h
>

33 
	~<sys/f˙é.h
>

34 
	~<sys/°©.h
>

35 
	~<uni°d.h
>

36 
	~"covîage.h
"

37 
	~"dy«mic-°rög.h
"

38 
	~"íå›y.h
"

39 
	~"Àak-checkî.h
"

40 
	~"oÂbuf.h
"

41 
	~"›íÊow/›íÊow.h
"

42 
	~"∑ckës.h
"

43 
	~"pﬁl-lo›.h
"

44 
	~"shash.h
"

45 
	~"sockë-utû.h
"

46 
	~"utû.h
"

47 
	~"°ªam-¥ovidî.h
"

48 
	~"°ªam.h
"

49 
	~"timevÆ.h
"

50 
	~"vlog.h
"

52 
VLOG_DEFINE_THIS_MODULE
(
°ªam_s¶
);

56 
	es¶_°©e
 {

57 
	mSTATE_TCP_CONNECTING
,

58 
	mSTATE_SSL_CONNECTING


61 
	e£ssi⁄_ty≥
 {

62 
	mCLIENT
,

63 
	mSERVER


66 
	ss¶_°ªam


68 
°ªam
 
	m°ªam
;

69 
s¶_°©e
 
	m°©e
;

70 
£ssi⁄_ty≥
 
	mty≥
;

71 
	mfd
;

72 
SSL
 *
	ms¶
;

73 
oÂbuf
 *
	mtxbuf
;

74 
	m£ssi⁄_ƒ
;

132 
	mrx_w™t
, 
	mtx_w™t
;

135 
uöt8_t
 
	mhód
[2];

136 
	mn_hód
;

140 
SSL_CTX
 *
	g˘x
;

142 
	ss¶_c⁄fig_fûe
 {

143 
boﬁ
 
	mªad
;

144 *
	mfûe_«me
;

145 
time•ec
 
	mmtime
;

149 
s¶_c⁄fig_fûe
 
	g¥iv©e_key
;

150 
s¶_c⁄fig_fûe
 
	g˚πifiˇã
;

151 
s¶_c⁄fig_fûe
 
	gˇ_˚π
;

156 
boﬁ
 
	gvîify_≥î_˚π
 = 
åue
;

163 
boﬁ
 
	gboŸ°øp_ˇ_˚π
;

167 
	g√xt_£ssi⁄_ƒ
;

171 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(10, 25);

173 
s¶_öô
();

174 
do_s¶_öô
();

175 
boﬁ
 
s¶_w™ts_io
(
s¶_îr‹
);

176 
s¶_˛o£
(
°ªam
 *);

177 
s¶_˛ór_txbuf
(
s¶_°ªam
 *);

178 
öãΩªt_queued_s¶_îr‹
(c⁄° *
fun˘i⁄
);

179 
öãΩªt_s¶_îr‹
(c⁄° *
fun˘i⁄
, 
ªt
, 
îr‹
,

180 *
w™t
);

181 
DH
 *
tmp_dh_ˇŒback
(
SSL
 *
s¶
, 
is_exp‹t
 
OVS_UNUSED
, 
keyÀngth
);

182 
log_ˇ_˚π
(c⁄° *
fûe_«me
, 
X509
 *
˚π
);

183 
°ªam_s¶_£t_ˇ_˚π_fûe__
(c⁄° *
fûe_«me
,

184 
boﬁ
 
boŸ°øp
, boﬁ 
f‹˚
);

185 
s¶_¥Ÿocﬁ_cb
(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
,

186 c⁄° *, 
size_t
, 
SSL
 *, *
s¶v_
);

187 
boﬁ
 
upd©e_s¶_c⁄fig
(
s¶_c⁄fig_fûe
 *, c⁄° *
fûe_«me
);

190 
	$w™t_to_pﬁl_evíts
(
w™t
)

192 
w™t
) {

193 
SSL_NOTHING
:

194 
	`NOT_REACHED
();

196 
SSL_READING
:

197  
POLLIN
;

199 
SSL_WRITING
:

200  
POLLOUT
;

203 
	`NOT_REACHED
();

205 
	}
}

208 
	$√w_s¶_°ªam
(c⁄° *
«me
, 
fd
, 
£ssi⁄_ty≥
 
ty≥
,

209 
s¶_°©e
 
°©e
, c⁄° 
sockaddr_ö
 *
ªmŸe
,

210 
°ªam
 **
°ªamp
)

212 
sockaddr_ö
 
loˇl
;

213 
sockÀn_t
 
loˇl_Àn
 =  
loˇl
;

214 
s¶_°ªam
 *
s¶v
;

215 
SSL
 *
s¶
 = 
NULL
;

216 
⁄
 = 1;

217 
ªtvÆ
;

220 
ªtvÆ
 = 0;

221 i‡(!
¥iv©e_key
.
ªad
) {

222 
	`VLOG_ERR
("Private key must be configuredÅo use SSL");

223 
ªtvÆ
 = 
ENOPROTOOPT
;

225 i‡(!
˚πifiˇã
.
ªad
) {

226 
	`VLOG_ERR
("Certificate must be configuredÅo use SSL");

227 
ªtvÆ
 = 
ENOPROTOOPT
;

229 i‡(!
ˇ_˚π
.
ªad
 && 
vîify_≥î_˚π
 && !
boŸ°øp_ˇ_˚π
) {

230 
	`VLOG_ERR
("CA certificate must be configuredÅo use SSL");

231 
ªtvÆ
 = 
ENOPROTOOPT
;

233 i‡(!
ªtvÆ
 && !
	`SSL_CTX_check_¥iv©e_key
(
˘x
)) {

234 
	`VLOG_ERR
("Private key doesÇot match certificateÖublic key: %s",

235 
	`ERR_îr‹_°rög
(
	`ERR_gë_îr‹
(), 
NULL
));

236 
ªtvÆ
 = 
ENOPROTOOPT
;

238 i‡(
ªtvÆ
) {

239 
îr‹
;

243 
ªtvÆ
 = 
	`gësock«me
(
fd
, (
sockaddr
 *Ë&
loˇl
, &
loˇl_Àn
);

244 i‡(
ªtvÆ
) {

245 
	`mem£t
(&
loˇl
, 0, Üocal);

249 
ªtvÆ
 = 
	`£tsock›t
(
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
, &
⁄
,  on);

250 i‡(
ªtvÆ
) {

251 
	`VLOG_ERR
("%s: sësock›t(TCP_NODELAY): %s", 
«me
, 
	`°ªº‹
(
î∫o
));

252 
ªtvÆ
 = 
î∫o
;

253 
îr‹
;

257 
s¶
 = 
	`SSL_√w
(
˘x
);

258 i‡(
s¶
 =
NULL
) {

259 
	`VLOG_ERR
("SSL_√w: %s", 
	`ERR_îr‹_°rög
(
	`ERR_gë_îr‹
(), 
NULL
));

260 
ªtvÆ
 = 
ENOPROTOOPT
;

261 
îr‹
;

263 i‡(
	`SSL_£t_fd
(
s¶
, 
fd
) == 0) {

264 
	`VLOG_ERR
("SSL_£t_fd: %s", 
	`ERR_îr‹_°rög
(
	`ERR_gë_îr‹
(), 
NULL
));

265 
ªtvÆ
 = 
ENOPROTOOPT
;

266 
îr‹
;

268 i‡(!
vîify_≥î_˚π
 || (
boŸ°øp_ˇ_˚π
 && 
ty≥
 =
CLIENT
)) {

269 
	`SSL_£t_vîify
(
s¶
, 
SSL_VERIFY_NONE
, 
NULL
);

273 
s¶v
 = 
	`xmÆloc
( *sslv);

274 
	`°ªam_öô
(&
s¶v
->
°ªam
, &
s¶_°ªam_˛ass
, 
EAGAIN
, 
«me
);

275 
	`°ªam_£t_ªmŸe_ù
(&
s¶v
->
°ªam
, 
ªmŸe
->
sö_addr
.
s_addr
);

276 
	`°ªam_£t_ªmŸe_p‹t
(&
s¶v
->
°ªam
, 
ªmŸe
->
sö_p‹t
);

277 
	`°ªam_£t_loˇl_ù
(&
s¶v
->
°ªam
, 
loˇl
.
sö_addr
.
s_addr
);

278 
	`°ªam_£t_loˇl_p‹t
(&
s¶v
->
°ªam
, 
loˇl
.
sö_p‹t
);

279 
s¶v
->
°©e
 = state;

280 
s¶v
->
ty≥
 =Åype;

281 
s¶v
->
fd
 = fd;

282 
s¶v
->
s¶
 = ssl;

283 
s¶v
->
txbuf
 = 
NULL
;

284 
s¶v
->
rx_w™t
 = s¶v->
tx_w™t
 = 
SSL_NOTHING
;

285 
s¶v
->
£ssi⁄_ƒ
 = 
√xt_£ssi⁄_ƒ
++;

286 
s¶v
->
n_hód
 = 0;

288 i‡(
	`VLOG_IS_DBG_ENABLED
()) {

289 
	`SSL_£t_msg_ˇŒback
(
s¶
, 
s¶_¥Ÿocﬁ_cb
);

290 
	`SSL_£t_msg_ˇŒback_¨g
(
s¶
, 
s¶v
);

293 *
°ªamp
 = &
s¶v
->
°ªam
;

296 
îr‹
:

297 i‡(
s¶
) {

298 
	`SSL_‰ì
(
s¶
);

300 
	`˛o£
(
fd
);

301  
ªtvÆ
;

302 
	}
}

304 
s¶_°ªam
 *

305 
	$s¶_°ªam_ˇ°
(
°ªam
 *stream)

307 
	`°ªam_as£π_˛ass
(
°ªam
, &
s¶_°ªam_˛ass
);

308  
	`CONTAINER_OF
(
°ªam
, 
s¶_°ªam
, stream);

309 
	}
}

312 
	$s¶_›í
(c⁄° *
«me
, *
suffix
, 
°ªam
 **
°ªamp
, 
uöt8_t
 
ds˝
)

314 
sockaddr_ö
 
sö
;

315 
îr‹
, 
fd
;

317 
îr‹
 = 
	`s¶_öô
();

318 i‡(
îr‹
) {

319  
îr‹
;

322 
îr‹
 = 
	`öë_›í_a˘ive
(
SOCK_STREAM
, 
suffix
, 
OFP_SSL_PORT
, &
sö
, &
fd
,

323 
ds˝
);

324 i‡(
fd
 >= 0) {

325 
°©e
 = 
îr‹
 ? 
STATE_TCP_CONNECTING
 : 
STATE_SSL_CONNECTING
;

326  
	`√w_s¶_°ªam
(
«me
, 
fd
, 
CLIENT
, 
°©e
, &
sö
, 
°ªamp
);

328 
	`VLOG_ERR
("%s: c⁄√˘: %s", 
«me
, 
	`°ªº‹
(
îr‹
));

329  
îr‹
;

331 
	}
}

334 
	$do_ˇ_˚π_boŸ°øp
(
°ªam
 *stream)

336 
s¶_°ªam
 *
s¶v
 = 
	`s¶_°ªam_ˇ°
(
°ªam
);

337 
	`STACK_OF
(
X509
Ë*
chaö
;

338 
X509
 *
˚π
;

339 
FILE
 *
fûe
;

340 
îr‹
;

341 
fd
;

343 
chaö
 = 
	`SSL_gë_≥î_˚π_chaö
(
s¶v
->
s¶
);

344 i‡(!
chaö
 || !
	`sk_X509_num
(chain)) {

345 
	`VLOG_ERR
("couldÇot bootstrap CA cert:Ço certificateÖresented by "

347  
EPROTO
;

349 
˚π
 = 
	`sk_X509_vÆue
(
chaö
, 
	`sk_X509_num
(chain) - 1);

353 
îr‹
 = 
	`X509_check_issued
(
˚π
, cert);

354 i‡(
îr‹
) {

355 
	`VLOG_ERR
("couldÇot bootstrap CA cert: obtained certificate is "

357 
	`X509_vîify_˚π_îr‹_°rög
(
îr‹
));

358 i‡(
	`sk_X509_num
(
chaö
) < 2) {

359 
	`VLOG_ERR
("only one certificate wasÑeceived, soÖrobablyÅheÖeer "

362  
EPROTO
;

365 
fd
 = 
	`›í
(
ˇ_˚π
.
fûe_«me
, 
O_CREAT
 | 
O_EXCL
 | 
O_WRONLY
, 0444);

366 i‡(
fd
 < 0) {

367 i‡(
î∫o
 =
EEXIST
) {

368 
	`VLOG_INFO_RL
(&
æ
, "reading CA cert %s created byánotherÖrocess",

369 
ˇ_˚π
.
fûe_«me
);

370 
	`°ªam_s¶_£t_ˇ_˚π_fûe__
(
ˇ_˚π
.
fûe_«me
, 
åue
,Årue);

371  
EPROTO
;

373 
	`VLOG_ERR
("couldÇot bootstrap CA cert: creating %s failed: %s",

374 
ˇ_˚π
.
fûe_«me
, 
	`°ªº‹
(
î∫o
));

375  
î∫o
;

379 
fûe
 = 
	`fd›í
(
fd
, "w");

380 i‡(!
fûe
) {

381 
îr‹
 = 
î∫o
;

382 
	`VLOG_ERR
("couldÇot bootstrap CA cert: fdopen failed: %s",

383 
	`°ªº‹
(
îr‹
));

384 
	`u∆ök
(
ˇ_˚π
.
fûe_«me
);

385  
îr‹
;

388 i‡(!
	`PEM_wrôe_X509
(
fûe
, 
˚π
)) {

389 
	`VLOG_ERR
("couldÇot bootstrap CA cert: PEM_write_X509Åo %s failed: "

390 "%s", 
ˇ_˚π
.
fûe_«me
,

391 
	`ERR_îr‹_°rög
(
	`ERR_gë_îr‹
(), 
NULL
));

392 
	`f˛o£
(
fûe
);

393 
	`u∆ök
(
ˇ_˚π
.
fûe_«me
);

394  
EIO
;

397 i‡(
	`f˛o£
(
fûe
)) {

398 
îr‹
 = 
î∫o
;

399 
	`VLOG_ERR
("couldÇot bootstrap CA cert: writing %s failed: %s",

400 
ˇ_˚π
.
fûe_«me
, 
	`°ªº‹
(
îr‹
));

401 
	`u∆ök
(
ˇ_˚π
.
fûe_«me
);

402  
îr‹
;

405 
	`VLOG_INFO
("suc˚ssfuŒy boŸ°øµed CA cîàtÿ%s", 
ˇ_˚π
.
fûe_«me
);

406 
	`log_ˇ_˚π
(
ˇ_˚π
.
fûe_«me
, 
˚π
);

407 
boŸ°øp_ˇ_˚π
 = 
Ál£
;

408 
ˇ_˚π
.
ªad
 = 
åue
;

411 
	`SSL_CTX_add_˛õ¡_CA
(
˘x
, 
˚π
);

415 
˚π
 = 
	`X509_dup
(cert);

416 i‡(!
˚π
) {

417 
	`out_of_mem‹y
();

419 
	`SSL_CTX_£t_˚π_°‹e
(
˘x
, 
	`X509_STORE_√w
());

420 i‡(
	`SSL_CTX_lﬂd_vîify_loˇti⁄s
(
˘x
, 
ˇ_˚π
.
fûe_«me
, 
NULL
) != 1) {

421 
	`VLOG_ERR
("SSL_CTX_load_verify_locations: %s",

422 
	`ERR_îr‹_°rög
(
	`ERR_gë_îr‹
(), 
NULL
));

423  
EPROTO
;

425 
	`VLOG_INFO
("killing successful connectionÅoÑetry using CA cert");

426  
EPROTO
;

427 
	}
}

430 
	$s¶_c⁄√˘
(
°ªam
 *stream)

432 
s¶_°ªam
 *
s¶v
 = 
	`s¶_°ªam_ˇ°
(
°ªam
);

433 
ªtvÆ
;

435 
s¶v
->
°©e
) {

436 
STATE_TCP_CONNECTING
:

437 
ªtvÆ
 = 
	`check_c⁄√˘i⁄_com∂ëi⁄
(
s¶v
->
fd
);

438 i‡(
ªtvÆ
) {

439  
ªtvÆ
;

441 
s¶v
->
°©e
 = 
STATE_SSL_CONNECTING
;

444 
STATE_SSL_CONNECTING
:

447 i‡(
s¶v
->
n_hód
 <= 0) {

448 
s¶v
->
n_hód
 = 
	`ªcv
(s¶v->
fd
, s¶v->
hód
,  sslv->head,

449 
MSG_PEEK
);

452 
ªtvÆ
 = (
s¶v
->
ty≥
 =
CLIENT


453 ? 
	`SSL_c⁄√˘
(
s¶v
->
s¶
Ë: 
	`SSL_ac˚±
(sslv->ssl));

454 i‡(
ªtvÆ
 != 1) {

455 
îr‹
 = 
	`SSL_gë_îr‹
(
s¶v
->
s¶
, 
ªtvÆ
);

456 i‡(
ªtvÆ
 < 0 && 
	`s¶_w™ts_io
(
îr‹
)) {

457  
EAGAIN
;

459 
unu£d
;

461 
	`öãΩªt_s¶_îr‹
((
s¶v
->
ty≥
 =
CLIENT
 ? "SSL_connect"

462 : "SSL_ac˚±"), 
ªtvÆ
, 
îr‹
, &
unu£d
);

463 
	`shutdown
(
s¶v
->
fd
, 
SHUT_RDWR
);

464 
	`°ªam_ªp‹t_c⁄ã¡
(
s¶v
->
hód
, s¶v->
n_hód
, 
STREAM_SSL
,

465 
THIS_MODULE
, 
	`°ªam_gë_«me
(
°ªam
));

466  
EPROTO
;

468 } i‡(
boŸ°øp_ˇ_˚π
) {

469  
	`do_ˇ_˚π_boŸ°øp
(
°ªam
);

470 } i‡(
vîify_≥î_˚π


471 && ((
	`SSL_gë_vîify_mode
(
s¶v
->
s¶
)

472 & (
SSL_VERIFY_NONE
 | 
SSL_VERIFY_PEER
))

473 !
SSL_VERIFY_PEER
)) {

482 
	`VLOG_INFO
("rejecting SSL connection during bootstrapÑace window");

483  
EPROTO
;

489 
	`NOT_REACHED
();

490 
	}
}

493 
	$s¶_˛o£
(
°ªam
 *stream)

495 
s¶_°ªam
 *
s¶v
 = 
	`s¶_°ªam_ˇ°
(
°ªam
);

496 
	`s¶_˛ór_txbuf
(
s¶v
);

503 
	`SSL_shutdown
(
s¶v
->
s¶
);

508 
	`ERR_˛ór_îr‹
();

510 
	`SSL_‰ì
(
s¶v
->
s¶
);

511 
	`˛o£
(
s¶v
->
fd
);

512 
	`‰ì
(
s¶v
);

513 
	}
}

516 
	$öãΩªt_queued_s¶_îr‹
(c⁄° *
fun˘i⁄
)

518 
queued_îr‹
 = 
	`ERR_gë_îr‹
();

519 i‡(
queued_îr‹
 != 0) {

520 
	`VLOG_WARN_RL
(&
æ
, "%s: %s",

521 
fun˘i⁄
, 
	`ERR_îr‹_°rög
(
queued_îr‹
, 
NULL
));

523 
	`VLOG_ERR_RL
(&
æ
, "%s: SSL_ERROR_SSL wôhouàqueuedÉº‹", 
fun˘i⁄
);

525 
	}
}

528 
	$öãΩªt_s¶_îr‹
(c⁄° *
fun˘i⁄
, 
ªt
, 
îr‹
,

529 *
w™t
)

531 *
w™t
 = 
SSL_NOTHING
;

533 
îr‹
) {

534 
SSL_ERROR_NONE
:

535 
	`VLOG_ERR_RL
(&
æ
, "%s: u√x≥˘ed SSL_ERROR_NONE", 
fun˘i⁄
);

538 
SSL_ERROR_ZERO_RETURN
:

539 
	`VLOG_ERR_RL
(&
æ
, "%s: u√x≥˘ed SSL_ERROR_ZERO_RETURN", 
fun˘i⁄
);

542 
SSL_ERROR_WANT_READ
:

543 *
w™t
 = 
SSL_READING
;

544  
EAGAIN
;

546 
SSL_ERROR_WANT_WRITE
:

547 *
w™t
 = 
SSL_WRITING
;

548  
EAGAIN
;

550 
SSL_ERROR_WANT_CONNECT
:

551 
	`VLOG_ERR_RL
(&
æ
, "%s: u√x≥˘ed SSL_ERROR_WANT_CONNECT", 
fun˘i⁄
);

554 
SSL_ERROR_WANT_ACCEPT
:

555 
	`VLOG_ERR_RL
(&
æ
, "%s: u√x≥˘ed SSL_ERROR_WANT_ACCEPT", 
fun˘i⁄
);

558 
SSL_ERROR_WANT_X509_LOOKUP
:

559 
	`VLOG_ERR_RL
(&
æ
, "%s: unexpected SSL_ERROR_WANT_X509_LOOKUP",

560 
fun˘i⁄
);

563 
SSL_ERROR_SYSCALL
: {

564 
queued_îr‹
 = 
	`ERR_gë_îr‹
();

565 i‡(
queued_îr‹
 == 0) {

566 i‡(
ªt
 < 0) {

567 
°©us
 = 
î∫o
;

568 
	`VLOG_WARN_RL
(&
æ
, "%s: systemÉrror (%s)",

569 
fun˘i⁄
, 
	`°ªº‹
(
°©us
));

570  
°©us
;

572 
	`VLOG_WARN_RL
(&
æ
, "%s: unexpected SSL connection close",

573 
fun˘i⁄
);

574  
EPROTO
;

577 
	`VLOG_WARN_RL
(&
æ
, "%s: %s",

578 
fun˘i⁄
, 
	`ERR_îr‹_°rög
(
queued_îr‹
, 
NULL
));

583 
SSL_ERROR_SSL
:

584 
	`öãΩªt_queued_s¶_îr‹
(
fun˘i⁄
);

588 
	`VLOG_ERR_RL
(&
æ
, "%s: bad SSLÉº‹ codê%d", 
fun˘i⁄
, 
îr‹
);

591  
EIO
;

592 
	}
}

594 
ssize_t


595 
	$s¶_ªcv
(
°ªam
 *°ªam, *
buf„r
, 
size_t
 
n
)

597 
s¶_°ªam
 *
s¶v
 = 
	`s¶_°ªam_ˇ°
(
°ªam
);

598 
ﬁd_°©e
;

599 
ssize_t
 
ªt
;

602 
	`as£π
(
n
 > 0);

604 
ﬁd_°©e
 = 
	`SSL_gë_°©e
(
s¶v
->
s¶
);

605 
ªt
 = 
	`SSL_ªad
(
s¶v
->
s¶
, 
buf„r
, 
n
);

606 i‡(
ﬁd_°©e
 !
	`SSL_gë_°©e
(
s¶v
->
s¶
)) {

607 
s¶v
->
tx_w™t
 = 
SSL_NOTHING
;

609 
s¶v
->
rx_w™t
 = 
SSL_NOTHING
;

611 i‡(
ªt
 > 0) {

612  
ªt
;

614 
îr‹
 = 
	`SSL_gë_îr‹
(
s¶v
->
s¶
, 
ªt
);

615 i‡(
îr‹
 =
SSL_ERROR_ZERO_RETURN
) {

618  -
	`öãΩªt_s¶_îr‹
("SSL_ªad", 
ªt
, 
îr‹
,

619 &
s¶v
->
rx_w™t
);

622 
	}
}

625 
	$s¶_˛ór_txbuf
(
s¶_°ªam
 *
s¶v
)

627 
	`oÂbuf_dñëe
(
s¶v
->
txbuf
);

628 
s¶v
->
txbuf
 = 
NULL
;

629 
	}
}

632 
	$s¶_do_tx
(
°ªam
 *stream)

634 
s¶_°ªam
 *
s¶v
 = 
	`s¶_°ªam_ˇ°
(
°ªam
);

637 
ﬁd_°©e
 = 
	`SSL_gë_°©e
(
s¶v
->
s¶
);

638 
ªt
 = 
	`SSL_wrôe
(
s¶v
->
s¶
, s¶v->
txbuf
->
d©a
, s¶v->txbuf->
size
);

639 i‡(
ﬁd_°©e
 !
	`SSL_gë_°©e
(
s¶v
->
s¶
)) {

640 
s¶v
->
rx_w™t
 = 
SSL_NOTHING
;

642 
s¶v
->
tx_w™t
 = 
SSL_NOTHING
;

643 i‡(
ªt
 > 0) {

644 
	`oÂbuf_puŒ
(
s¶v
->
txbuf
, 
ªt
);

645 i‡(
s¶v
->
txbuf
->
size
 == 0) {

649 
s¶_îr‹
 = 
	`SSL_gë_îr‹
(
s¶v
->
s¶
, 
ªt
);

650 i‡(
s¶_îr‹
 =
SSL_ERROR_ZERO_RETURN
) {

651 
	`VLOG_WARN_RL
(&
æ
, "SSL_write: connection closed");

652  
EPIPE
;

654  
	`öãΩªt_s¶_îr‹
("SSL_wrôe", 
ªt
, 
s¶_îr‹
,

655 &
s¶v
->
tx_w™t
);

659 
	}
}

661 
ssize_t


662 
	$s¶_£nd
(
°ªam
 *°ªam, c⁄° *
buf„r
, 
size_t
 
n
)

664 
s¶_°ªam
 *
s¶v
 = 
	`s¶_°ªam_ˇ°
(
°ªam
);

666 i‡(
s¶v
->
txbuf
) {

667  -
EAGAIN
;

669 
îr‹
;

671 
s¶v
->
txbuf
 = 
	`oÂbuf_˛⁄e_d©a
(
buf„r
, 
n
);

672 
îr‹
 = 
	`s¶_do_tx
(
°ªam
);

673 
îr‹
) {

675 
	`s¶_˛ór_txbuf
(
s¶v
);

676  
n
;

677 
EAGAIN
:

678 
	`Àak_checkî_˛aim
(
buf„r
);

679  
n
;

681 
s¶v
->
txbuf
 = 
NULL
;

682  -
îr‹
;

685 
	}
}

688 
	$s¶_run
(
°ªam
 *stream)

690 
s¶_°ªam
 *
s¶v
 = 
	`s¶_°ªam_ˇ°
(
°ªam
);

692 i‡(
s¶v
->
txbuf
 && 
	`s¶_do_tx
(
°ªam
Ë!
EAGAIN
) {

693 
	`s¶_˛ór_txbuf
(
s¶v
);

695 
	}
}

698 
	$s¶_run_waô
(
°ªam
 *stream)

700 
s¶_°ªam
 *
s¶v
 = 
	`s¶_°ªam_ˇ°
(
°ªam
);

702 i‡(
s¶v
->
tx_w™t
 !
SSL_NOTHING
) {

703 
	`pﬁl_fd_waô
(
s¶v
->
fd
, 
	`w™t_to_pﬁl_evíts
(s¶v->
tx_w™t
));

705 
	}
}

708 
	$s¶_waô
(
°ªam
 *°ªam, 
°ªam_waô_ty≥
 
waô
)

710 
s¶_°ªam
 *
s¶v
 = 
	`s¶_°ªam_ˇ°
(
°ªam
);

712 
waô
) {

713 
STREAM_CONNECT
:

714 i‡(
	`°ªam_c⁄√˘
(
°ªam
Ë!
EAGAIN
) {

715 
	`pﬁl_immedüã_wake
();

717 
s¶v
->
°©e
) {

718 
STATE_TCP_CONNECTING
:

719 
	`pﬁl_fd_waô
(
s¶v
->
fd
, 
POLLOUT
);

722 
STATE_SSL_CONNECTING
:

725 
	`pﬁl_fd_waô
(
s¶v
->
fd
,

726 
	`w™t_to_pﬁl_evíts
(
	`SSL_w™t
(
s¶v
->
s¶
)));

730 
	`NOT_REACHED
();

735 
STREAM_RECV
:

736 i‡(
s¶v
->
rx_w™t
 !
SSL_NOTHING
) {

737 
	`pﬁl_fd_waô
(
s¶v
->
fd
, 
	`w™t_to_pﬁl_evíts
(s¶v->
rx_w™t
));

739 
	`pﬁl_immedüã_wake
();

743 
STREAM_SEND
:

744 i‡(!
s¶v
->
txbuf
) {

746 
	`pﬁl_immedüã_wake
();

754 
	`NOT_REACHED
();

756 
	}
}

758 c⁄° 
°ªam_˛ass
 
	gs¶_°ªam_˛ass
 = {

760 
åue
,

761 
s¶_›í
,

762 
s¶_˛o£
,

763 
s¶_c⁄√˘
,

764 
s¶_ªcv
,

765 
s¶_£nd
,

766 
s¶_run
,

767 
s¶_run_waô
,

768 
s¶_waô
,

773 
	sps¶_p°ªam


775 
p°ªam
 
	mp°ªam
;

776 
	mfd
;

779 c⁄° 
p°ªam_˛ass
 
	gps¶_p°ªam_˛ass
;

781 
ps¶_p°ªam
 *

782 
	$ps¶_p°ªam_ˇ°
(
p°ªam
 *pstream)

784 
	`p°ªam_as£π_˛ass
(
p°ªam
, &
ps¶_p°ªam_˛ass
);

785  
	`CONTAINER_OF
(
p°ªam
, 
ps¶_p°ªam
,Östream);

786 
	}
}

789 
	$ps¶_›í
(c⁄° *
«me
 
OVS_UNUSED
, *
suffix
, 
p°ªam
 **
p°ªamp
,

790 
uöt8_t
 
ds˝
)

792 
ps¶_p°ªam
 *
ps¶
;

793 
sockaddr_ö
 
sö
;

794 
bound_«me
[128];

795 
ªtvÆ
;

796 
fd
;

798 
ªtvÆ
 = 
	`s¶_öô
();

799 i‡(
ªtvÆ
) {

800  
ªtvÆ
;

803 
fd
 = 
	`öë_›í_∑ssive
(
SOCK_STREAM
, 
suffix
, 
OFP_SSL_PORT
, &
sö
, 
ds˝
);

804 i‡(
fd
 < 0) {

805  -
fd
;

807 
	`•rötf
(
bound_«me
, "ps¶:%"
PRIu16
":"
IP_FMT
,

808 
	`¡ohs
(
sö
.
sö_p‹t
), 
	`IP_ARGS
(&sö.
sö_addr
.
s_addr
));

810 
ps¶
 = 
	`xmÆloc
( *pssl);

811 
	`p°ªam_öô
(&
ps¶
->
p°ªam
, &
ps¶_p°ªam_˛ass
, 
bound_«me
);

812 
ps¶
->
fd
 = fd;

813 *
p°ªamp
 = &
ps¶
->
p°ªam
;

815 
	}
}

818 
	$ps¶_˛o£
(
p°ªam
 *pstream)

820 
ps¶_p°ªam
 *
ps¶
 = 
	`ps¶_p°ªam_ˇ°
(
p°ªam
);

821 
	`˛o£
(
ps¶
->
fd
);

822 
	`‰ì
(
ps¶
);

823 
	}
}

826 
	$ps¶_ac˚±
(
p°ªam
 *p°ªam, 
°ªam
 **
√w_°ªamp
)

828 
ps¶_p°ªam
 *
ps¶
 = 
	`ps¶_p°ªam_ˇ°
(
p°ªam
);

829 
sockaddr_ö
 
sö
;

830 
sockÀn_t
 
sö_Àn
 =  
sö
;

831 
«me
[128];

832 
√w_fd
;

833 
îr‹
;

835 
√w_fd
 = 
	`ac˚±
(
ps¶
->
fd
, (
sockaddr
 *Ë&
sö
, &
sö_Àn
);

836 i‡(
√w_fd
 < 0) {

837 
îr‹
 = 
î∫o
;

838 i‡(
îr‹
 !
EAGAIN
) {

839 
	`VLOG_DBG_RL
(&
æ
, "ac˚±: %s", 
	`°ªº‹
(
îr‹
));

841  
îr‹
;

844 
îr‹
 = 
	`£t_n⁄blockög
(
√w_fd
);

845 i‡(
îr‹
) {

846 
	`˛o£
(
√w_fd
);

847  
îr‹
;

850 
	`•rötf
(
«me
, "s¶:"
IP_FMT
, 
	`IP_ARGS
(&
sö
.
sö_addr
));

851 i‡(
sö
.
sö_p‹t
 !
	`ht⁄s
(
OFP_SSL_PORT
)) {

852 
	`•rötf
(
	`°rchr
(
«me
, '\0'), ":%"
PRIu16
, 
	`¡ohs
(
sö
.
sö_p‹t
));

854  
	`√w_s¶_°ªam
(
«me
, 
√w_fd
, 
SERVER
, 
STATE_SSL_CONNECTING
, &
sö
,

855 
√w_°ªamp
);

856 
	}
}

859 
	$ps¶_waô
(
p°ªam
 *pstream)

861 
ps¶_p°ªam
 *
ps¶
 = 
	`ps¶_p°ªam_ˇ°
(
p°ªam
);

862 
	`pﬁl_fd_waô
(
ps¶
->
fd
, 
POLLIN
);

863 
	}
}

866 
	$ps¶_£t_ds˝
(
p°ªam
 *p°ªam, 
uöt8_t
 
ds˝
)

868 
ps¶_p°ªam
 *
ps¶
 = 
	`ps¶_p°ªam_ˇ°
(
p°ªam
);

869  
	`£t_ds˝
(
ps¶
->
fd
, 
ds˝
);

870 
	}
}

872 c⁄° 
p°ªam_˛ass
 
	gps¶_p°ªam_˛ass
 = {

874 
åue
,

875 
ps¶_›í
,

876 
ps¶_˛o£
,

877 
ps¶_ac˚±
,

878 
ps¶_waô
,

879 
ps¶_£t_ds˝
,

887 
boﬁ


888 
	$s¶_w™ts_io
(
s¶_îr‹
)

890  (
s¶_îr‹
 =
SSL_ERROR_WANT_WRITE


891 || 
s¶_îr‹
 =
SSL_ERROR_WANT_READ
);

892 
	}
}

895 
	$s¶_öô
()

897 
öô_°©us
 = -1;

898 i‡(
öô_°©us
 < 0) {

899 
öô_°©us
 = 
	`do_s¶_öô
();

900 
	`as£π
(
öô_°©us
 >= 0);

902  
öô_°©us
;

903 
	}
}

906 
	$do_s¶_öô
()

908 
SSL_METHOD
 *
mëhod
;

910 
	`SSL_libøry_öô
();

911 
	`SSL_lﬂd_îr‹_°rögs
();

913 i‡(!
	`RAND_°©us
()) {

928 
uöt8_t
 
£ed
[32];

929 
ªtvÆ
;

931 
	`VLOG_WARN
("OpenSSLÑandom seeding failed,Ñeseeding ourselves");

933 
ªtvÆ
 = 
	`gë_íå›y
(
£ed
,  seed);

934 i‡(
ªtvÆ
) {

935 
	`VLOG_ERR
("failedÅo obtainÉntropy (%s)",

936 
	`ovs_ªtvÆ_to_°rög
(
ªtvÆ
));

937  
ªtvÆ
 > 0 ?ÑëvÆ : 
ENOPROTOOPT
;

940 
	`RAND_£ed
(
£ed
,  seed);

945 
mëhod
 = 
	`CONST_CAST
(
SSL_METHOD
 *, 
	`TLSv1_mëhod
());

946 i‡(
mëhod
 =
NULL
) {

947 
	`VLOG_ERR
("TLSv1_mëhod: %s", 
	`ERR_îr‹_°rög
(
	`ERR_gë_îr‹
(), 
NULL
));

948  
ENOPROTOOPT
;

951 
˘x
 = 
	`SSL_CTX_√w
(
mëhod
);

952 i‡(
˘x
 =
NULL
) {

953 
	`VLOG_ERR
("SSL_CTX_√w: %s", 
	`ERR_îr‹_°rög
(
	`ERR_gë_îr‹
(), 
NULL
));

954  
ENOPROTOOPT
;

956 
	`SSL_CTX_£t_›ti⁄s
(
˘x
, 
SSL_OP_NO_SSLv2
 | 
SSL_OP_NO_SSLv3
);

957 
	`SSL_CTX_£t_tmp_dh_ˇŒback
(
˘x
, 
tmp_dh_ˇŒback
);

958 
	`SSL_CTX_£t_mode
(
˘x
, 
SSL_MODE_ENABLE_PARTIAL_WRITE
);

959 
	`SSL_CTX_£t_mode
(
˘x
, 
SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER
);

960 
	`SSL_CTX_£t_vîify
(
˘x
, 
SSL_VERIFY_PEER
 | 
SSL_VERIFY_FAIL_IF_NO_PEER_CERT
,

961 
NULL
);

964 
	}
}

966 
DH
 *

967 
	$tmp_dh_ˇŒback
(
SSL
 *
s¶
 
OVS_UNUSED
, 
is_exp‹t
 OVS_UNUSED, 
keyÀngth
)

969 
	sdh
 {

970 
keyÀngth
;

971 
DH
 *
dh
;

972 
DH
 *(*
c⁄°ru˘‹
)();

975 
dh
 
dh_èbÀ
[] = {

976 {1024, 
NULL
, 
gë_dh1024
},

977 {2048, 
NULL
, 
gë_dh2048
},

978 {4096, 
NULL
, 
gë_dh4096
},

981 
dh
 *dh;

983 
dh
 = 
dh_èbÀ
; dh < &dh_èbÀ[
	`ARRAY_SIZE
(dh_table)]; dh++) {

984 i‡(
dh
->
keyÀngth
 == keylength) {

985 i‡(!
dh
->dh) {

986 
dh
->dh = dh->
	`c⁄°ru˘‹
();

987 i‡(!
dh
->dh) {

988 
	`out_of_mem‹y
();

991  
dh
->dh;

994 
	`VLOG_ERR_RL
(&
æ
, "no Diffie-HellmanÖarameters for keyÜength %d",

995 
keyÀngth
);

996  
NULL
;

997 
	}
}

1000 
boﬁ


1001 
	$°ªam_s¶_is_c⁄figuªd
()

1003  
¥iv©e_key
.
fûe_«me
 || 
˚πifiˇã
.fûe_«mê|| 
ˇ_˚π
.file_name;

1004 
	}
}

1006 
boﬁ


1007 
	$upd©e_s¶_c⁄fig
(
s¶_c⁄fig_fûe
 *
c⁄fig
, c⁄° *
fûe_«me
)

1009 
time•ec
 
mtime
;

1010 
îr‹
;

1012 i‡(
	`s¶_öô
(Ë|| !
fûe_«me
) {

1013  
Ál£
;

1018 
îr‹
 = 
	`gë_mtime
(
fûe_«me
, &
mtime
);

1019 i‡(
îr‹
 &&Éº‹ !
ENOENT
) {

1020 
	`VLOG_ERR_RL
(&
æ
, "%s: sèàÁûed (%s)", 
fûe_«me
, 
	`°ªº‹
(
îr‹
));

1022 i‡(
c⁄fig
->
fûe_«me


1023 && !
	`°rcmp
(
c⁄fig
->
fûe_«me
, file_name)

1024 && 
mtime
.
tv_£c
 =
c⁄fig
->mtime.tv_sec

1025 && 
mtime
.
tv_n£c
 =
c⁄fig
->mtime.tv_nsec) {

1026  
Ál£
;

1030 
c⁄fig
->
mtime
 = mtime;

1031 i‡(
fûe_«me
 !
c⁄fig
->file_name) {

1032 
	`‰ì
(
c⁄fig
->
fûe_«me
);

1033 
c⁄fig
->
fûe_«me
 = 
	`x°rdup
(file_name);

1035  
åue
;

1036 
	}
}

1039 
	$°ªam_s¶_£t_¥iv©e_key_fûe__
(c⁄° *
fûe_«me
)

1041 i‡(
	`SSL_CTX_u£_Priv©eKey_fûe
(
˘x
, 
fûe_«me
, 
SSL_FILETYPE_PEM
) == 1) {

1042 
¥iv©e_key
.
ªad
 = 
åue
;

1044 
	`VLOG_ERR
("SSL_use_PrivateKey_file: %s",

1045 
	`ERR_îr‹_°rög
(
	`ERR_gë_îr‹
(), 
NULL
));

1047 
	}
}

1050 
	$°ªam_s¶_£t_¥iv©e_key_fûe
(c⁄° *
fûe_«me
)

1052 i‡(
	`upd©e_s¶_c⁄fig
(&
¥iv©e_key
, 
fûe_«me
)) {

1053 
	`°ªam_s¶_£t_¥iv©e_key_fûe__
(
fûe_«me
);

1055 
	}
}

1058 
	$°ªam_s¶_£t_˚πifiˇã_fûe__
(c⁄° *
fûe_«me
)

1060 i‡(
	`SSL_CTX_u£_˚πifiˇã_chaö_fûe
(
˘x
, 
fûe_«me
) == 1) {

1061 
˚πifiˇã
.
ªad
 = 
åue
;

1063 
	`VLOG_ERR
("SSL_use_certificate_file: %s",

1064 
	`ERR_îr‹_°rög
(
	`ERR_gë_îr‹
(), 
NULL
));

1066 
	}
}

1069 
	$°ªam_s¶_£t_˚πifiˇã_fûe
(c⁄° *
fûe_«me
)

1071 i‡(
	`upd©e_s¶_c⁄fig
(&
˚πifiˇã
, 
fûe_«me
)) {

1072 
	`°ªam_s¶_£t_˚πifiˇã_fûe__
(
fûe_«me
);

1074 
	}
}

1099 
	$°ªam_s¶_£t_key_™d_˚π
(c⁄° *
¥iv©e_key_fûe
,

1100 c⁄° *
˚πifiˇã_fûe
)

1102 i‡(
	`upd©e_s¶_c⁄fig
(&
¥iv©e_key
, 
¥iv©e_key_fûe
)

1103 || 
	`upd©e_s¶_c⁄fig
(&
˚πifiˇã
, 
˚πifiˇã_fûe
)) {

1104 
	`°ªam_s¶_£t_˚πifiˇã_fûe__
(
˚πifiˇã_fûe
);

1105 
	`°ªam_s¶_£t_¥iv©e_key_fûe__
(
¥iv©e_key_fûe
);

1107 
	}
}

1117 
	$ªad_˚π_fûe
(c⁄° *
fûe_«me
, 
X509
 ***
˚πs
, 
size_t
 *
n_˚πs
)

1119 
FILE
 *
fûe
;

1120 
size_t
 
Æloˇãd_˚πs
 = 0;

1122 *
˚πs
 = 
NULL
;

1123 *
n_˚πs
 = 0;

1125 
fûe
 = 
	`f›í
(
fûe_«me
, "r");

1126 i‡(!
fûe
) {

1127 
	`VLOG_ERR
("failedÅo open %s forÑeading: %s",

1128 
fûe_«me
, 
	`°ªº‹
(
î∫o
));

1129  
î∫o
;

1133 
X509
 *
˚πifiˇã
;

1134 
c
;

1137 
˚πifiˇã
 = 
	`PEM_ªad_X509
(
fûe
, 
NULL
, NULL, NULL);

1138 i‡(!
˚πifiˇã
) {

1139 
size_t
 
i
;

1141 
	`VLOG_ERR
("PEM_read_X509 failedÑeading %s: %s",

1142 
fûe_«me
, 
	`ERR_îr‹_°rög
(
	`ERR_gë_îr‹
(), 
NULL
));

1143 
i
 = 0; i < *
n_˚πs
; i++) {

1144 
	`X509_‰ì
((*
˚πs
)[
i
]);

1146 
	`‰ì
(*
˚πs
);

1147 *
˚πs
 = 
NULL
;

1148 *
n_˚πs
 = 0;

1149  
EIO
;

1153 i‡(*
n_˚πs
 >
Æloˇãd_˚πs
) {

1154 *
˚πs
 = 
	`x2ƒóŒoc
(*˚πs, &
Æloˇãd_˚πs
,  **certs);

1156 (*
˚πs
)[(*
n_˚πs
)++] = 
˚πifiˇã
;

1160 
c
 = 
	`gëc
(
fûe
);

1161 } 
	`is•a˚
(
c
));

1162 i‡(
c
 =
EOF
) {

1165 
	`ungëc
(
c
, 
fûe
);

1167 
	`f˛o£
(
fûe
);

1169 
	}
}

1177 
	$°ªam_s¶_£t_≥î_ˇ_˚π_fûe
(c⁄° *
fûe_«me
)

1179 
X509
 **
˚πs
;

1180 
size_t
 
n_˚πs
;

1181 
size_t
 
i
;

1183 i‡(
	`s¶_öô
()) {

1187 i‡(!
	`ªad_˚π_fûe
(
fûe_«me
, &
˚πs
, &
n_˚πs
)) {

1188 
i
 = 0; i < 
n_˚πs
; i++) {

1189 i‡(
	`SSL_CTX_add_exåa_chaö_˚π
(
˘x
, 
˚πs
[
i
]) != 1) {

1190 
	`VLOG_ERR
("SSL_CTX_add_extra_chain_cert: %s",

1191 
	`ERR_îr‹_°rög
(
	`ERR_gë_îr‹
(), 
NULL
));

1194 
	`‰ì
(
˚πs
);

1196 
	}
}

1200 
	$log_ˇ_˚π
(c⁄° *
fûe_«me
, 
X509
 *
˚π
)

1202 
dige°
[
EVP_MAX_MD_SIZE
];

1203 
n_byãs
;

1204 
ds
 
Â
;

1205 *
subje˘
;

1207 
	`ds_öô
(&
Â
);

1208 i‡(!
	`X509_dige°
(
˚π
, 
	`EVP_sha1
(), 
dige°
, &
n_byãs
)) {

1209 
	`ds_put_c°r
(&
Â
, "<out of memory>");

1211 
i
;

1212 
i
 = 0; i < 
n_byãs
; i++) {

1213 i‡(
i
) {

1214 
	`ds_put_ch¨
(&
Â
, ':');

1216 
	`ds_put_f‹m©
(&
Â
, "%02hhx", 
dige°
[
i
]);

1219 
subje˘
 = 
	`X509_NAME_⁄ñöe
(
	`X509_gë_subje˘_«me
(
˚π
), 
NULL
, 0);

1220 
	`VLOG_INFO
("Tru°ög CA cîà‰om %†(%sË(fögî¥öà%s)", 
fûe_«me
,

1221 
subje˘
 ? subje˘ : "<ouào‡mem‹y>", 
	`ds_c°r
(&
Â
));

1222 
	`OPENSSL_‰ì
(
subje˘
);

1223 
	`ds_de°roy
(&
Â
);

1224 
	}
}

1227 
	$°ªam_s¶_£t_ˇ_˚π_fûe__
(c⁄° *
fûe_«me
,

1228 
boﬁ
 
boŸ°øp
, boﬁ 
f‹˚
)

1230 
X509
 **
˚πs
;

1231 
size_t
 
n_˚πs
;

1232 
°©
 
s
;

1234 i‡(!
	`upd©e_s¶_c⁄fig
(&
ˇ_˚π
, 
fûe_«me
Ë&& !
f‹˚
) {

1238 i‡(!
	`°rcmp
(
fûe_«me
, "none")) {

1239 
vîify_≥î_˚π
 = 
Ál£
;

1240 
	`VLOG_WARN
("Peer certificate validation disabled "

1242 } i‡(
boŸ°øp
 && 
	`°©
(
fûe_«me
, &
s
Ë&& 
î∫o
 =
ENOENT
) {

1243 
boŸ°øp_ˇ_˚π
 = 
åue
;

1244 } i‡(!
	`ªad_˚π_fûe
(
fûe_«me
, &
˚πs
, &
n_˚πs
)) {

1245 
size_t
 
i
;

1248 
i
 = 0; i < 
n_˚πs
; i++) {

1250 i‡(
	`SSL_CTX_add_˛õ¡_CA
(
˘x
, 
˚πs
[
i
]) != 1) {

1251 
	`VLOG_ERR
("failedÅoádd client certificate %zu from %s: %s",

1252 
i
, 
fûe_«me
,

1253 
	`ERR_îr‹_°rög
(
	`ERR_gë_îr‹
(), 
NULL
));

1255 
	`log_ˇ_˚π
(
fûe_«me
, 
˚πs
[
i
]);

1257 
	`X509_‰ì
(
˚πs
[
i
]);

1259 
	`‰ì
(
˚πs
);

1263 
	`SSL_CTX_£t_˚π_°‹e
(
˘x
, 
	`X509_STORE_√w
());

1264 i‡(
	`SSL_CTX_lﬂd_vîify_loˇti⁄s
(
˘x
, 
fûe_«me
, 
NULL
) != 1) {

1265 
	`VLOG_ERR
("SSL_CTX_load_verify_locations: %s",

1266 
	`ERR_îr‹_°rög
(
	`ERR_gë_îr‹
(), 
NULL
));

1270 
boŸ°øp_ˇ_˚π
 = 
Ál£
;

1272 
ˇ_˚π
.
ªad
 = 
åue
;

1273 
	}
}

1281 
	$°ªam_s¶_£t_ˇ_˚π_fûe
(c⁄° *
fûe_«me
, 
boﬁ
 
boŸ°øp
)

1283 
	`°ªam_s¶_£t_ˇ_˚π_fûe__
(
fûe_«me
, 
boŸ°øp
, 
Ál£
);

1284 
	}
}

1289 
	$s¶_Æît_Àvñ_to_°rög
(
uöt8_t
 
ty≥
)

1291 
ty≥
) {

1296 
	}
}

1299 
	$s¶_Æît_des¸ùti⁄_to_°rög
(
uöt8_t
 
ty≥
)

1301 
ty≥
) {

1327 
	}
}

1330 
	$s¶_h™dshake_ty≥_to_°rög
(
uöt8_t
 
ty≥
)

1332 
ty≥
) {

1345 
	}
}

1348 
	$s¶_¥Ÿocﬁ_cb
(
wrôe_p
, 
vîsi⁄
 
OVS_UNUSED
, 
c⁄ã¡_ty≥
,

1349 c⁄° *
buf_
, 
size_t
 
Àn
, 
SSL
 *
s¶
 
OVS_UNUSED
, *
s¶v_
)

1351 c⁄° 
s¶_°ªam
 *
s¶v
 = 
s¶v_
;

1352 c⁄° 
uöt8_t
 *
buf
 = 
buf_
;

1353 
ds
 
dëaûs
;

1355 i‡(!
	`VLOG_IS_DBG_ENABLED
()) {

1359 
	`ds_öô
(&
dëaûs
);

1360 i‡(
c⁄ã¡_ty≥
 == 20) {

1361 
	`ds_put_c°r
(&
dëaûs
, "change_cipher_spec");

1362 } i‡(
c⁄ã¡_ty≥
 == 21) {

1363 
	`ds_put_f‹m©
(&
dëaûs
, "alert: %s, %s",

1364 
	`s¶_Æît_Àvñ_to_°rög
(
buf
[0]),

1365 
	`s¶_Æît_des¸ùti⁄_to_°rög
(
buf
[1]));

1366 } i‡(
c⁄ã¡_ty≥
 == 22) {

1367 
	`ds_put_f‹m©
(&
dëaûs
, "handshake: %s",

1368 
	`s¶_h™dshake_ty≥_to_°rög
(
buf
[0]));

1370 
	`ds_put_f‹m©
(&
dëaûs
, "ty≥ %d", 
c⁄ã¡_ty≥
);

1373 
	`VLOG_DBG
("%s%u%s%s %s (%zu bytes)",

1374 
s¶v
->
ty≥
 =
CLIENT
 ? "client" : "server",

1375 
s¶v
->
£ssi⁄_ƒ
, 
wrôe_p
 ? "-->" : "<--",

1376 
	`°ªam_gë_«me
(&
s¶v
->
°ªam
), 
	`ds_c°r
(&
dëaûs
), 
Àn
);

1378 
	`ds_de°roy
(&
dëaûs
);

1379 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/stream-ssl.h

16 #i‚de‡
STREAM_SSL_H


17 
	#STREAM_SSL_H
 1

	)

19 
	~<°dboﬁ.h
>

21 
boﬁ
 
°ªam_s¶_is_c⁄figuªd
();

22 
°ªam_s¶_£t_¥iv©e_key_fûe
(c⁄° *
fûe_«me
);

23 
°ªam_s¶_£t_˚πifiˇã_fûe
(c⁄° *
fûe_«me
);

24 
°ªam_s¶_£t_ˇ_˚π_fûe
(c⁄° *
fûe_«me
, 
boﬁ
 
boŸ°øp
);

25 
°ªam_s¶_£t_≥î_ˇ_˚π_fûe
(c⁄° *
fûe_«me
);

26 
°ªam_s¶_£t_key_™d_˚π
(c⁄° *
¥iv©e_key_fûe
,

27 c⁄° *
˚πifiˇã_fûe
);

29 
	#STREAM_SSL_LONG_OPTIONS
 \

30 {"¥iv©e-key", 
ªquúed_¨gumít
, 
NULL
, 'p'}, \

31 {"˚πifiˇã", 
ªquúed_¨gumít
, 
NULL
, 'c'}, \

32 {"ˇ-˚π", 
ªquúed_¨gumít
, 
NULL
, 'C'}

	)

34 
	#STREAM_SSL_OPTION_HANDLERS
 \

36 
	`°ªam_s¶_£t_¥iv©e_key_fûe
(
›èrg
); \

40 
	`°ªam_s¶_£t_˚πifiˇã_fûe
(
›èrg
); \

44 
	`°ªam_s¶_£t_ˇ_˚π_fûe
(
›èrg
, 
Ál£
); \

45 ;

	)

	@/home/lsch/mytest/openvswitch-1.9.0/lib/stream-tcp.c

17 
	~<c⁄fig.h
>

18 
	~"°ªam.h
"

19 
	~<î∫o.h
>

20 
	~<öây≥s.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<√töë/ö.h
>

23 
	~<√töë/t˝.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~<sys/sockë.h
>

27 
	~<uni°d.h
>

28 
	~"∑ckës.h
"

29 
	~"sockë-utû.h
"

30 
	~"utû.h
"

31 
	~"°ªam-¥ovidî.h
"

32 
	~"°ªam-fd.h
"

33 
	~"vlog.h
"

35 
VLOG_DEFINE_THIS_MODULE
(
°ªam_t˝
);

40 
	$√w_t˝_°ªam
(c⁄° *
«me
, 
fd
, 
c⁄√˘_°©us
,

41 c⁄° 
sockaddr_ö
 *
ªmŸe
, 
°ªam
 **
°ªamp
)

43 
sockaddr_ö
 
loˇl
;

44 
sockÀn_t
 
loˇl_Àn
 =  
loˇl
;

45 
⁄
 = 1;

46 
ªtvÆ
;

49 
ªtvÆ
 = 
	`gësock«me
(
fd
, (
sockaddr
 *)&
loˇl
, &
loˇl_Àn
);

50 i‡(
ªtvÆ
) {

51 
	`mem£t
(&
loˇl
, 0, Üocal);

54 
ªtvÆ
 = 
	`£tsock›t
(
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
, &
⁄
,  on);

55 i‡(
ªtvÆ
) {

56 
	`VLOG_ERR
("%s: sësock›t(TCP_NODELAY): %s", 
«me
, 
	`°ªº‹
(
î∫o
));

57 
	`˛o£
(
fd
);

58  
î∫o
;

61 
ªtvÆ
 = 
	`√w_fd_°ªam
(
«me
, 
fd
, 
c⁄√˘_°©us
, 
°ªamp
);

62 i‡(!
ªtvÆ
) {

63 
°ªam
 *°ªam = *
°ªamp
;

64 
	`°ªam_£t_ªmŸe_ù
(
°ªam
, 
ªmŸe
->
sö_addr
.
s_addr
);

65 
	`°ªam_£t_ªmŸe_p‹t
(
°ªam
, 
ªmŸe
->
sö_p‹t
);

66 
	`°ªam_£t_loˇl_ù
(
°ªam
, 
loˇl
.
sö_addr
.
s_addr
);

67 
	`°ªam_£t_loˇl_p‹t
(
°ªam
, 
loˇl
.
sö_p‹t
);

69  
ªtvÆ
;

70 
	}
}

73 
	$t˝_›í
(c⁄° *
«me
, *
suffix
, 
°ªam
 **
°ªamp
, 
uöt8_t
 
ds˝
)

75 
sockaddr_ö
 
sö
;

76 
fd
, 
îr‹
;

78 
îr‹
 = 
	`öë_›í_a˘ive
(
SOCK_STREAM
, 
suffix
, 0, &
sö
, &
fd
, 
ds˝
);

79 i‡(
fd
 >= 0) {

80  
	`√w_t˝_°ªam
(
«me
, 
fd
, 
îr‹
, &
sö
, 
°ªamp
);

82 
	`VLOG_ERR
("%s: c⁄√˘: %s", 
«me
, 
	`°ªº‹
(
îr‹
));

83  
îr‹
;

85 
	}
}

87 c⁄° 
°ªam_˛ass
 
	gt˝_°ªam_˛ass
 = {

89 
åue
,

90 
t˝_›í
,

91 
NULL
,

92 
NULL
,

93 
NULL
,

94 
NULL
,

95 
NULL
,

96 
NULL
,

97 
NULL
,

102 
±˝_ac˚±
(
fd
, c⁄° 
sockaddr
 *
ß
, 
size_t
 
ß_Àn
,

103 
°ªam
 **
°ªamp
);

106 
	$±˝_›í
(c⁄° *
«me
 
OVS_UNUSED
, *
suffix
, 
p°ªam
 **
p°ªamp
,

107 
uöt8_t
 
ds˝
)

109 
sockaddr_ö
 
sö
;

110 
bound_«me
[128];

111 
fd
;

113 
fd
 = 
	`öë_›í_∑ssive
(
SOCK_STREAM
, 
suffix
, -1, &
sö
, 
ds˝
);

114 i‡(
fd
 < 0) {

115  -
fd
;

118 
	`•rötf
(
bound_«me
, "±˝:%"
PRIu16
":"
IP_FMT
,

119 
	`¡ohs
(
sö
.
sö_p‹t
), 
	`IP_ARGS
(&sö.
sö_addr
.
s_addr
));

120  
	`√w_fd_p°ªam
(
bound_«me
, 
fd
, 
±˝_ac˚±
, 
£t_ds˝
, 
NULL
,

121 
p°ªamp
);

122 
	}
}

125 
	$±˝_ac˚±
(
fd
, c⁄° 
sockaddr
 *
ß
, 
size_t
 
ß_Àn
,

126 
°ªam
 **
°ªamp
)

128 c⁄° 
sockaddr_ö
 *
sö
 = (c⁄° sockaddr_ö *Ë
ß
;

129 
«me
[128];

131 i‡(
ß_Àn
 =(
sockaddr_ö
Ë&& 
sö
->
sö_Ámûy
 =
AF_INET
) {

132 
	`•rötf
(
«me
, "t˝:"
IP_FMT
, 
	`IP_ARGS
(&
sö
->
sö_addr
));

133 
	`•rötf
(
	`°rchr
(
«me
, '\0'), ":%"
PRIu16
, 
	`¡ohs
(
sö
->
sö_p‹t
));

135 
	`°r˝y
(
«me
, "tcp");

137  
	`√w_t˝_°ªam
(
«me
, 
fd
, 0, 
sö
, 
°ªamp
);

138 
	}
}

140 c⁄° 
p°ªam_˛ass
 
	g±˝_p°ªam_˛ass
 = {

142 
åue
,

143 
±˝_›í
,

144 
NULL
,

145 
NULL
,

146 
NULL
,

147 
NULL
,

	@/home/lsch/mytest/openvswitch-1.9.0/lib/stream-unix.c

17 
	~<c⁄fig.h
>

18 
	~"°ªam.h
"

19 
	~<as£π.h
>

20 
	~<î∫o.h
>

21 
	~<öây≥s.h
>

22 
	~<√tdb.h
>

23 
	~<pﬁl.h
>

24 
	~<sys/sockë.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<sys/un.h
>

27 
	~<°dlib.h
>

28 
	~<°rög.h
>

29 
	~<uni°d.h
>

30 
	~"∑ckës.h
"

31 
	~"pﬁl-lo›.h
"

32 
	~"sockë-utû.h
"

33 
	~"utû.h
"

34 
	~"°ªam-¥ovidî.h
"

35 
	~"°ªam-fd.h
"

36 
	~"vlog.h
"

38 
VLOG_DEFINE_THIS_MODULE
(
°ªam_unix
);

43 
	$unix_›í
(c⁄° *
«me
, *
suffix
, 
°ªam
 **
°ªamp
,

44 
uöt8_t
 
ds˝
 
OVS_UNUSED
)

46 c⁄° *
c⁄√˘_∑th
 = 
suffix
;

47 
fd
;

49 
fd
 = 
	`make_unix_sockë
(
SOCK_STREAM
, 
åue
, 
NULL
, 
c⁄√˘_∑th
);

50 i‡(
fd
 < 0) {

51 
	`VLOG_WARN
("%s: c⁄√˘i⁄ faûed (%s)", 
c⁄√˘_∑th
, 
	`°ªº‹
(-
fd
));

52  -
fd
;

55  
	`√w_fd_°ªam
(
«me
, 
fd
, 
	`check_c⁄√˘i⁄_com∂ëi⁄
(fd), 
°ªamp
);

56 
	}
}

58 c⁄° 
°ªam_˛ass
 
	gunix_°ªam_˛ass
 = {

60 
Ál£
,

61 
unix_›í
,

62 
NULL
,

63 
NULL
,

64 
NULL
,

65 
NULL
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

73 
punix_ac˚±
(
fd
, c⁄° 
sockaddr
 *
ß
, 
size_t
 
ß_Àn
,

74 
°ªam
 **
°ªamp
);

77 
	$punix_›í
(c⁄° *
«me
 
OVS_UNUSED
, *
suffix
,

78 
p°ªam
 **
p°ªamp
, 
uöt8_t
 
ds˝
 
OVS_UNUSED
)

80 
fd
, 
îr‹
;

82 
fd
 = 
	`make_unix_sockë
(
SOCK_STREAM
, 
åue
, 
suffix
, 
NULL
);

83 i‡(
fd
 < 0) {

84 
	`VLOG_ERR
("%s: bödög faûed: %s", 
suffix
, 
	`°ªº‹
(
î∫o
));

85  
î∫o
;

88 i‡(
	`li°í
(
fd
, 10) < 0) {

89 
îr‹
 = 
î∫o
;

90 
	`VLOG_ERR
("%s:Üi°í: %s", 
«me
, 
	`°ªº‹
(
îr‹
));

91 
	`˛o£
(
fd
);

92  
îr‹
;

95  
	`√w_fd_p°ªam
(
«me
, 
fd
, 
punix_ac˚±
, 
NULL
,

96 
	`x°rdup
(
suffix
), 
p°ªamp
);

97 
	}
}

100 
	$punix_ac˚±
(
fd
, c⁄° 
sockaddr
 *
ß
, 
size_t
 
ß_Àn
,

101 
°ªam
 **
°ªamp
)

103 c⁄° 
sockaddr_un
 *
sun
 = (c⁄° sockaddr_u¿*Ë
ß
;

104 
«me_Àn
 = 
	`gë_unix_«me_Àn
(
ß_Àn
);

105 
«me
[128];

107 i‡(
«me_Àn
 > 0) {

108 
	`¢¥ötf
(
«me
, Çame, "unix:%.*s", 
«me_Àn
, 
sun
->
sun_∑th
);

110 
	`°r˝y
(
«me
, "unix");

112  
	`√w_fd_°ªam
(
«me
, 
fd
, 0, 
°ªamp
);

113 
	}
}

115 c⁄° 
p°ªam_˛ass
 
	gpunix_p°ªam_˛ass
 = {

117 
Ál£
,

118 
punix_›í
,

119 
NULL
,

120 
NULL
,

121 
NULL
,

122 
NULL
,

	@/home/lsch/mytest/openvswitch-1.9.0/lib/stream.c

17 
	~<c⁄fig.h
>

18 
	~"°ªam-¥ovidî.h
"

19 
	~<as£π.h
>

20 
	~<î∫o.h
>

21 
	~<öây≥s.h
>

22 
	~<√töë/ö.h
>

23 
	~<pﬁl.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~"covîage.h
"

27 
	~"dy«mic-°rög.h
"

28 
	~"Áèl-sig«l.h
"

29 
	~"Êow.h
"

30 
	~"oÂ-¥öt.h
"

31 
	~"oÂbuf.h
"

32 
	~"›íÊow/nicúa-ext.h
"

33 
	~"›íÊow/›íÊow.h
"

34 
	~"∑ckës.h
"

35 
	~"pﬁl-lo›.h
"

36 
	~"øndom.h
"

37 
	~"utû.h
"

38 
	~"vlog.h
"

40 
VLOG_DEFINE_THIS_MODULE
(
°ªam
);

42 
COVERAGE_DEFINE
(
p°ªam_›í
);

43 
COVERAGE_DEFINE
(
°ªam_›í
);

46 
	e°ªam_°©e
 {

47 
	mSCS_CONNECTING
,

48 
	mSCS_CONNECTED
,

49 
	mSCS_DISCONNECTED


52 c⁄° 
°ªam_˛ass
 *
	g°ªam_˛as£s
[] = {

53 &
t˝_°ªam_˛ass
,

54 &
unix_°ªam_˛ass
,

55 #ifde‡
HAVE_OPENSSL


56 &
s¶_°ªam_˛ass
,

60 c⁄° 
p°ªam_˛ass
 *
	gp°ªam_˛as£s
[] = {

61 &
±˝_p°ªam_˛ass
,

62 &
punix_p°ªam_˛ass
,

63 #ifde‡
HAVE_OPENSSL


64 &
ps¶_p°ªam_˛ass
,

70 
	$check_°ªam_˛as£s
()

72 #i‚de‡
NDEBUG


73 
size_t
 
i
;

75 
i
 = 0; i < 
	`ARRAY_SIZE
(
°ªam_˛as£s
); i++) {

76 c⁄° 
°ªam_˛ass
 *
˛ass
 = 
°ªam_˛as£s
[
i
];

77 
	`as£π
(
˛ass
->
«me
 !
NULL
);

78 
	`as£π
(
˛ass
->
›í
 !
NULL
);

79 i‡(
˛ass
->
˛o£
 || cœss->
ªcv
 || cœss->
£nd
 || cœss->
run


80 || 
˛ass
->
run_waô
 || cœss->
waô
) {

81 
	`as£π
(
˛ass
->
˛o£
 !
NULL
);

82 
	`as£π
(
˛ass
->
ªcv
 !
NULL
);

83 
	`as£π
(
˛ass
->
£nd
 !
NULL
);

84 
	`as£π
(
˛ass
->
waô
 !
NULL
);

90 
i
 = 0; i < 
	`ARRAY_SIZE
(
p°ªam_˛as£s
); i++) {

91 c⁄° 
p°ªam_˛ass
 *
˛ass
 = 
p°ªam_˛as£s
[
i
];

92 
	`as£π
(
˛ass
->
«me
 !
NULL
);

93 
	`as£π
(
˛ass
->
li°í
 !
NULL
);

94 i‡(
˛ass
->
˛o£
 || cœss->
ac˚±
 || cœss->
waô
) {

95 
	`as£π
(
˛ass
->
˛o£
 !
NULL
);

96 
	`as£π
(
˛ass
->
ac˚±
 !
NULL
);

97 
	`as£π
(
˛ass
->
waô
 !
NULL
);

103 
	}
}

108 
	$°ªam_ußge
(c⁄° *
«me
, 
boﬁ
 
a˘ive
, boﬁ 
∑ssive
,

109 
boﬁ
 
boŸ°øp
 
OVS_UNUSED
)

115 
	`¥ötf
("\n");

116 i‡(
a˘ive
) {

117 
	`¥ötf
("A˘ivê%†c⁄√˘i⁄ mëhods:\n", 
«me
);

118 
	`¥ötf
("Åcp:IP:PORT "

120 #ifde‡
HAVE_OPENSSL


121 
	`¥ötf
(" ssl:IP:PORT "

124 
	`¥ötf
(" unix:FILE "

128 i‡(
∑ssive
) {

129 
	`¥ötf
("Passivê%†c⁄√˘i⁄ mëhods:\n", 
«me
);

130 
	`¥ötf
("Ötcp:PORT[:IP] "

132 #ifde‡
HAVE_OPENSSL


133 
	`¥ötf
("Össl:PORT[:IP] "

136 
	`¥ötf
("Öunix:FILE "

140 #ifde‡
HAVE_OPENSSL


141 
	`¥ötf
("PKI configuration (requiredÅo use SSL):\n"

145 i‡(
boŸ°øp
) {

146 
	`¥ötf
(" --bootstrap-ca-cert=FILE file withÖeer CA certificate "

150 
	}
}

157 
	$°ªam_lookup_˛ass
(c⁄° *
«me
, c⁄° 
°ªam_˛ass
 **
˛as•
)

159 
size_t
 
¥efix_Àn
;

160 
size_t
 
i
;

162 
	`check_°ªam_˛as£s
();

164 *
˛as•
 = 
NULL
;

165 
¥efix_Àn
 = 
	`°rc•n
(
«me
, ":");

166 i‡(
«me
[
¥efix_Àn
] == '\0') {

167  
EAFNOSUPPORT
;

169 
i
 = 0; i < 
	`ARRAY_SIZE
(
°ªam_˛as£s
); i++) {

170 c⁄° 
°ªam_˛ass
 *
˛ass
 = 
°ªam_˛as£s
[
i
];

171 i‡(
	`°æí
(
˛ass
->
«me
Ë=
¥efix_Àn


172 && !
	`memcmp
(
˛ass
->
«me
,Çame, 
¥efix_Àn
)) {

173 *
˛as•
 = 
˛ass
;

177  
EAFNOSUPPORT
;

178 
	}
}

183 
	$°ªam_vîify_«me
(c⁄° *
«me
)

185 c⁄° 
°ªam_˛ass
 *
˛ass
;

186  
	`°ªam_lookup_˛ass
(
«me
, &
˛ass
);

187 
	}
}

197 
	$°ªam_›í
(c⁄° *
«me
, 
°ªam
 **
°ªamp
, 
uöt8_t
 
ds˝
)

199 c⁄° 
°ªam_˛ass
 *
˛ass
;

200 
°ªam
 *stream;

201 *
suffix_c›y
;

202 
îr‹
;

204 
	`COVERAGE_INC
(
°ªam_›í
);

207 
îr‹
 = 
	`°ªam_lookup_˛ass
(
«me
, &
˛ass
);

208 i‡(!
˛ass
) {

209 
îr‹
;

213 
suffix_c›y
 = 
	`x°rdup
(
	`°rchr
(
«me
, ':') + 1);

214 
îr‹
 = 
˛ass
->
	`›í
(
«me
, 
suffix_c›y
, &
°ªam
, 
ds˝
);

215 
	`‰ì
(
suffix_c›y
);

216 i‡(
îr‹
) {

217 
îr‹
;

221 *
°ªamp
 = 
°ªam
;

224 
îr‹
:

225 *
°ªamp
 = 
NULL
;

226  
îr‹
;

227 
	}
}

240 
	$°ªam_›í_block
(
îr‹
, 
°ªam
 **
°ªamp
)

242 
°ªam
 *°ªam = *
°ªamp
;

244 
	`Áèl_sig«l_run
();

246 i‡(!
îr‹
) {

247 (
îr‹
 = 
	`°ªam_c⁄√˘
(
°ªam
)Ë=
EAGAIN
) {

248 
	`°ªam_run
(
°ªam
);

249 
	`°ªam_run_waô
(
°ªam
);

250 
	`°ªam_c⁄√˘_waô
(
°ªam
);

251 
	`pﬁl_block
();

253 
	`as£π
(
îr‹
 !
EINPROGRESS
);

256 i‡(
îr‹
) {

257 
	`°ªam_˛o£
(
°ªam
);

258 *
°ªamp
 = 
NULL
;

260 *
°ªamp
 = 
°ªam
;

262  
îr‹
;

263 
	}
}

267 
	$°ªam_˛o£
(
°ªam
 *stream)

269 i‡(
°ªam
 !
NULL
) {

270 *
«me
 = 
°ªam
->name;

271 (
°ªam
->
˛ass
->
˛o£
)(stream);

272 
	`‰ì
(
«me
);

274 
	}
}

279 
	$°ªam_gë_«me
(c⁄° 
°ªam
 *stream)

281  
°ªam
 ? såóm->
«me
 : "(null)";

282 
	}
}

286 
ovs_be32


287 
	$°ªam_gë_ªmŸe_ù
(c⁄° 
°ªam
 *stream)

289  
°ªam
->
ªmŸe_ù
;

290 
	}
}

294 
ovs_be16


295 
	$°ªam_gë_ªmŸe_p‹t
(c⁄° 
°ªam
 *stream)

297  
°ªam
->
ªmŸe_p‹t
;

298 
	}
}

302 
ovs_be32


303 
	$°ªam_gë_loˇl_ù
(c⁄° 
°ªam
 *stream)

305  
°ªam
->
loˇl_ù
;

306 
	}
}

310 
ovs_be16


311 
	$°ªam_gë_loˇl_p‹t
(c⁄° 
°ªam
 *stream)

313  
°ªam
->
loˇl_p‹t
;

314 
	}
}

317 
	$scs_c⁄√˘ög
(
°ªam
 *stream)

319 
ªtvÆ
 = (
°ªam
->
˛ass
->
c⁄√˘
)(stream);

320 
	`as£π
(
ªtvÆ
 !
EINPROGRESS
);

321 i‡(!
ªtvÆ
) {

322 
°ªam
->
°©e
 = 
SCS_CONNECTED
;

323 } i‡(
ªtvÆ
 !
EAGAIN
) {

324 
°ªam
->
°©e
 = 
SCS_DISCONNECTED
;

325 
°ªam
->
îr‹
 = 
ªtvÆ
;

327 
	}
}

334 
	$°ªam_c⁄√˘
(
°ªam
 *stream)

336 
°ªam_°©e
 
œ°_°©e
;

339 
œ°_°©e
 = 
°ªam
->
°©e
;

340 
°ªam
->
°©e
) {

341 
SCS_CONNECTING
:

342 
	`scs_c⁄√˘ög
(
°ªam
);

345 
SCS_CONNECTED
:

348 
SCS_DISCONNECTED
:

349  
°ªam
->
îr‹
;

352 
	`NOT_REACHED
();

354 } 
°ªam
->
°©e
 !
œ°_°©e
);

356  
EAGAIN
;

357 
	}
}

371 
	$°ªam_ªcv
(
°ªam
 *°ªam, *
buf„r
, 
size_t
 
n
)

373 
ªtvÆ
 = 
	`°ªam_c⁄√˘
(
°ªam
);

374  (
ªtvÆ
 ? -retval

375 : 
n
 == 0 ? 0

376 : (
°ªam
->
˛ass
->
ªcv
)(°ªam, 
buf„r
, 
n
));

377 
	}
}

389 
	$°ªam_£nd
(
°ªam
 *°ªam, c⁄° *
buf„r
, 
size_t
 
n
)

391 
ªtvÆ
 = 
	`°ªam_c⁄√˘
(
°ªam
);

392  (
ªtvÆ
 ? -retval

393 : 
n
 == 0 ? 0

394 : (
°ªam
->
˛ass
->
£nd
)(°ªam, 
buf„r
, 
n
));

395 
	}
}

400 
	$°ªam_run
(
°ªam
 *stream)

402 i‡(
°ªam
->
˛ass
->
run
) {

403 (
°ªam
->
˛ass
->
run
)(stream);

405 
	}
}

410 
	$°ªam_run_waô
(
°ªam
 *stream)

412 i‡(
°ªam
->
˛ass
->
run_waô
) {

413 (
°ªam
->
˛ass
->
run_waô
)(stream);

415 
	}
}

420 
	$°ªam_waô
(
°ªam
 *°ªam, 
°ªam_waô_ty≥
 
waô
)

422 
	`as£π
(
waô
 =
STREAM_CONNECT
 || waô =
STREAM_RECV


423 || 
waô
 =
STREAM_SEND
);

425 
°ªam
->
°©e
) {

426 
SCS_CONNECTING
:

427 
waô
 = 
STREAM_CONNECT
;

430 
SCS_DISCONNECTED
:

431 
	`pﬁl_immedüã_wake
();

434 (
°ªam
->
˛ass
->
waô
)(stream, wait);

435 
	}
}

438 
	$°ªam_c⁄√˘_waô
(
°ªam
 *stream)

440 
	`°ªam_waô
(
°ªam
, 
STREAM_CONNECT
);

441 
	}
}

444 
	$°ªam_ªcv_waô
(
°ªam
 *stream)

446 
	`°ªam_waô
(
°ªam
, 
STREAM_RECV
);

447 
	}
}

450 
	$°ªam_£nd_waô
(
°ªam
 *stream)

452 
	`°ªam_waô
(
°ªam
, 
STREAM_SEND
);

453 
	}
}

460 
	$p°ªam_lookup_˛ass
(c⁄° *
«me
, c⁄° 
p°ªam_˛ass
 **
˛as•
)

462 
size_t
 
¥efix_Àn
;

463 
size_t
 
i
;

465 
	`check_°ªam_˛as£s
();

467 *
˛as•
 = 
NULL
;

468 
¥efix_Àn
 = 
	`°rc•n
(
«me
, ":");

469 i‡(
«me
[
¥efix_Àn
] == '\0') {

470  
EAFNOSUPPORT
;

472 
i
 = 0; i < 
	`ARRAY_SIZE
(
p°ªam_˛as£s
); i++) {

473 c⁄° 
p°ªam_˛ass
 *
˛ass
 = 
p°ªam_˛as£s
[
i
];

474 i‡(
	`°æí
(
˛ass
->
«me
Ë=
¥efix_Àn


475 && !
	`memcmp
(
˛ass
->
«me
,Çame, 
¥efix_Àn
)) {

476 *
˛as•
 = 
˛ass
;

480  
EAFNOSUPPORT
;

481 
	}
}

486 
	$p°ªam_vîify_«me
(c⁄° *
«me
)

488 c⁄° 
p°ªam_˛ass
 *
˛ass
;

489  
	`p°ªam_lookup_˛ass
(
«me
, &
˛ass
);

490 
	}
}

497 
	$°ªam_‹_p°ªam_√eds_¥obes
(c⁄° *
«me
)

499 c⁄° 
p°ªam_˛ass
 *
p˛ass
;

500 c⁄° 
°ªam_˛ass
 *
˛ass
;

502 i‡(!
	`°ªam_lookup_˛ass
(
«me
, &
˛ass
)) {

503  
˛ass
->
√eds_¥obes
;

504 } i‡(!
	`p°ªam_lookup_˛ass
(
«me
, &
p˛ass
)) {

505  
p˛ass
->
√eds_¥obes
;

509 
	}
}

519 
	$p°ªam_›í
(c⁄° *
«me
, 
p°ªam
 **
p°ªamp
, 
uöt8_t
 
ds˝
)

521 c⁄° 
p°ªam_˛ass
 *
˛ass
;

522 
p°ªam
 *pstream;

523 *
suffix_c›y
;

524 
îr‹
;

526 
	`COVERAGE_INC
(
p°ªam_›í
);

529 
îr‹
 = 
	`p°ªam_lookup_˛ass
(
«me
, &
˛ass
);

530 i‡(!
˛ass
) {

531 
îr‹
;

535 
suffix_c›y
 = 
	`x°rdup
(
	`°rchr
(
«me
, ':') + 1);

536 
îr‹
 = 
˛ass
->
	`li°í
(
«me
, 
suffix_c›y
, &
p°ªam
, 
ds˝
);

537 
	`‰ì
(
suffix_c›y
);

538 i‡(
îr‹
) {

539 
îr‹
;

543 *
p°ªamp
 = 
p°ªam
;

546 
îr‹
:

547 *
p°ªamp
 = 
NULL
;

548  
îr‹
;

549 
	}
}

554 
	$p°ªam_gë_«me
(c⁄° 
p°ªam
 *pstream)

556  
p°ªam
->
«me
;

557 
	}
}

561 
	$p°ªam_˛o£
(
p°ªam
 *pstream)

563 i‡(
p°ªam
 !
NULL
) {

564 *
«me
 = 
p°ªam
->name;

565 (
p°ªam
->
˛ass
->
˛o£
)(pstream);

566 
	`‰ì
(
«me
);

568 
	}
}

577 
	$p°ªam_ac˚±
(
p°ªam
 *p°ªam, 
°ªam
 **
√w_°ªam
)

579 
ªtvÆ
 = (
p°ªam
->
˛ass
->
ac˚±
)’°ªam, 
√w_°ªam
);

580 i‡(
ªtvÆ
) {

581 *
√w_°ªam
 = 
NULL
;

583 
	`as£π
((*
√w_°ªam
)->
°©e
 !
SCS_CONNECTING


584 || (*
√w_°ªam
)->
˛ass
->
c⁄√˘
);

586  
ªtvÆ
;

587 
	}
}

596 
	$p°ªam_ac˚±_block
(
p°ªam
 *p°ªam, 
°ªam
 **
√w_°ªam
)

598 
îr‹
;

600 
	`Áèl_sig«l_run
();

601 (
îr‹
 = 
	`p°ªam_ac˚±
(
p°ªam
, 
√w_°ªam
)Ë=
EAGAIN
) {

602 
	`p°ªam_waô
(
p°ªam
);

603 
	`pﬁl_block
();

605 i‡(
îr‹
) {

606 *
√w_°ªam
 = 
NULL
;

608  
îr‹
;

609 
	}
}

612 
	$p°ªam_waô
(
p°ªam
 *pstream)

614 (
p°ªam
->
˛ass
->
waô
)(pstream);

615 
	}
}

618 
	$p°ªam_£t_ds˝
(
p°ªam
 *p°ªam, 
uöt8_t
 
ds˝
)

620 i‡(
p°ªam
->
˛ass
->
£t_ds˝
) {

621  
p°ªam
->
˛ass
->
	`£t_ds˝
’°ªam, 
ds˝
);

624 
	}
}

644 
	$°ªam_öô
(
°ªam
 *°ªam, c⁄° 
°ªam_˛ass
 *
˛ass
,

645 
c⁄√˘_°©us
, c⁄° *
«me
)

647 
	`mem£t
(
°ªam
, 0,  *stream);

648 
°ªam
->
˛ass
 = class;

649 
°ªam
->
°©e
 = (
c⁄√˘_°©us
 =
EAGAIN
 ? 
SCS_CONNECTING


650 : !
c⁄√˘_°©us
 ? 
SCS_CONNECTED


651 : 
SCS_DISCONNECTED
);

652 
°ªam
->
îr‹
 = 
c⁄√˘_°©us
;

653 
°ªam
->
«me
 = 
	`x°rdup
(name);

654 
	`as£π
(
°ªam
->
°©e
 !
SCS_CONNECTING
 || 
˛ass
->
c⁄√˘
);

655 
	}
}

658 
	$°ªam_£t_ªmŸe_ù
(
°ªam
 *°ªam, 
ovs_be32
 
ù
)

660 
°ªam
->
ªmŸe_ù
 = 
ù
;

661 
	}
}

664 
	$°ªam_£t_ªmŸe_p‹t
(
°ªam
 *°ªam, 
ovs_be16
 
p‹t
)

666 
°ªam
->
ªmŸe_p‹t
 = 
p‹t
;

667 
	}
}

670 
	$°ªam_£t_loˇl_ù
(
°ªam
 *°ªam, 
ovs_be32
 
ù
)

672 
°ªam
->
loˇl_ù
 = 
ù
;

673 
	}
}

676 
	$°ªam_£t_loˇl_p‹t
(
°ªam
 *°ªam, 
ovs_be16
 
p‹t
)

678 
°ªam
->
loˇl_p‹t
 = 
p‹t
;

679 
	}
}

682 
	$p°ªam_öô
(
p°ªam
 *p°ªam, c⁄° 
p°ªam_˛ass
 *
˛ass
,

683 c⁄° *
«me
)

685 
p°ªam
->
˛ass
 = class;

686 
p°ªam
->
«me
 = 
	`x°rdup
(name);

687 
	}
}

690 
	$cou¡_fõlds
(c⁄° *
s_
)

692 *
s
, *
fõld
, *
ßve_±r
;

693 
n
 = 0;

695 
ßve_±r
 = 
NULL
;

696 
s
 = 
	`x°rdup
(
s_
);

697 
fõld
 = 
	`°πok_r
(
s
, ":", &
ßve_±r
); fõld !
NULL
;

698 
fõld
 = 
	`°πok_r
(
NULL
, ":", &
ßve_±r
)) {

699 
n
++;

701 
	`‰ì
(
s
);

703  
n
;

704 
	}
}

710 
	$°ªam_›í_wôh_deÁu…_p‹ts
(c⁄° *
«me_
,

711 
uöt16_t
 
deÁu…_t˝_p‹t
,

712 
uöt16_t
 
deÁu…_s¶_p‹t
,

713 
°ªam
 **
°ªamp
,

714 
uöt8_t
 
ds˝
)

716 *
«me
;

717 
îr‹
;

719 i‡(!
	`°∫cmp
(
«me_
, "t˝:", 4Ë&& 
	`cou¡_fõlds
(name_) < 3) {

720 
«me
 = 
	`xa•rötf
("%s:%d", 
«me_
, 
deÁu…_t˝_p‹t
);

721 } i‡(!
	`°∫cmp
(
«me_
, "s¶:", 4Ë&& 
	`cou¡_fõlds
(name_) < 3) {

722 
«me
 = 
	`xa•rötf
("%s:%d", 
«me_
, 
deÁu…_s¶_p‹t
);

724 
«me
 = 
	`x°rdup
(
«me_
);

726 
îr‹
 = 
	`°ªam_›í
(
«me
, 
°ªamp
, 
ds˝
);

727 
	`‰ì
(
«me
);

729  
îr‹
;

730 
	}
}

736 
	$p°ªam_›í_wôh_deÁu…_p‹ts
(c⁄° *
«me_
,

737 
uöt16_t
 
deÁu…_±˝_p‹t
,

738 
uöt16_t
 
deÁu…_ps¶_p‹t
,

739 
p°ªam
 **
p°ªamp
,

740 
uöt8_t
 
ds˝
)

742 *
«me
;

743 
îr‹
;

745 i‡(!
	`°∫cmp
(
«me_
, "±˝:", 5Ë&& 
	`cou¡_fõlds
(name_) < 2) {

746 
«me
 = 
	`xa•rötf
("%s%d", 
«me_
, 
deÁu…_±˝_p‹t
);

747 } i‡(!
	`°∫cmp
(
«me_
, "ps¶:", 5Ë&& 
	`cou¡_fõlds
(name_) < 2) {

748 
«me
 = 
	`xa•rötf
("%s%d", 
«me_
, 
deÁu…_ps¶_p‹t
);

750 
«me
 = 
	`x°rdup
(
«me_
);

752 
îr‹
 = 
	`p°ªam_›í
(
«me
, 
p°ªamp
, 
ds˝
);

753 
	`‰ì
(
«me
);

755  
îr‹
;

756 
	}
}

766 
boﬁ


767 
	$°ªam_∑r£_èrgë_wôh_deÁu…_p‹ts
(c⁄° *
èrgë
,

768 
uöt16_t
 
deÁu…_t˝_p‹t
,

769 
uöt16_t
 
deÁu…_s¶_p‹t
,

770 
sockaddr_ö
 *
sö
)

772  (!
	`°∫cmp
(
èrgë
, "tcp:", 4)

773 && 
	`öë_∑r£_a˘ive
(
èrgë
 + 4, 
deÁu…_t˝_p‹t
, 
sö
)) ||

774 (!
	`°∫cmp
(
èrgë
, "ssl:", 4)

775 && 
	`öë_∑r£_a˘ive
(
èrgë
 + 4, 
deÁu…_s¶_p‹t
, 
sö
));

776 
	}
}

780 
°ªam_c⁄ã¡_ty≥


781 
	$°ªam_guess_c⁄ã¡
(c⁄° 
uöt8_t
 *
d©a
, 
ssize_t
 
size
)

783 i‡(
size
 >= 2) {

784 
	#PAIR
(
A
, 
B
Ë(((AË<< 8Ë| (B))

	)

785 
	`PAIR
(
d©a
[0], data[1])) {

786 
	`PAIR
(0x16, 0x03):

787  
STREAM_SSL
;

788 
	`PAIR
('{', '"'):

789  
STREAM_JSONRPC
;

790 
	`PAIR
(
OFP10_VERSION
, 0 ):

791  
STREAM_OPENFLOW
;

795  
STREAM_UNKNOWN
;

796 
	}
}

800 
	$°ªam_c⁄ã¡_ty≥_to_°rög
(
°ªam_c⁄ã¡_ty≥
 
ty≥
)

802 
ty≥
) {

803 
STREAM_UNKNOWN
:

807 
STREAM_JSONRPC
:

810 
STREAM_OPENFLOW
:

813 
STREAM_SSL
:

816 
	}
}

824 
	$°ªam_ªp‹t_c⁄ã¡
(c⁄° *
d©a
, 
ssize_t
 
size
,

825 
°ªam_c⁄ã¡_ty≥
 
ex≥˘ed_ty≥
,

826 
vlog_moduÀ
 *
moduÀ
, c⁄° *
°ªam_«me
)

828 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(5, 5);

829 
°ªam_c⁄ã¡_ty≥
 
a˘uÆ_ty≥
;

831 
a˘uÆ_ty≥
 = 
	`°ªam_guess_c⁄ã¡
(
d©a
, 
size
);

832 i‡(
a˘uÆ_ty≥
 !
ex≥˘ed_ty≥
 &&á˘uÆ_ty≥ !
STREAM_UNKNOWN
) {

833 
	`vlog_øã_limô
(
moduÀ
, 
VLL_WARN
, &
æ
,

835 
°ªam_«me
,

836 
	`°ªam_c⁄ã¡_ty≥_to_°rög
(
a˘uÆ_ty≥
),

837 
	`°ªam_c⁄ã¡_ty≥_to_°rög
(
ex≥˘ed_ty≥
));

839 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/stream.h

17 #i‚de‡
STREAM_H


18 
	#STREAM_H
 1

	)

20 
	~<°dboﬁ.h
>

21 
	~<°ddef.h
>

22 
	~<°döt.h
>

23 
	~<sys/ty≥s.h
>

24 
	~"›ívswôch/ty≥s.h
"

25 
	~"vlog.h
"

26 
	~"sockë-utû.h
"

28 
	gp°ªam
;

29 
	g°ªam
;

31 
°ªam_ußge
(c⁄° *
«me
, 
boﬁ
 
a˘ive
, boﬁ 
∑ssive
, boﬁ 
boŸ°øp
);

34 
°ªam_vîify_«me
(c⁄° *
«me
);

35 
°ªam_›í
(c⁄° *
«me
, 
°ªam
 **, 
uöt8_t
 
ds˝
);

36 
°ªam_›í_block
(
îr‹
, 
°ªam
 **);

37 
°ªam_˛o£
(
°ªam
 *);

38 c⁄° *
°ªam_gë_«me
(c⁄° 
°ªam
 *);

39 
ovs_be32
 
°ªam_gë_ªmŸe_ù
(c⁄° 
°ªam
 *);

40 
ovs_be16
 
°ªam_gë_ªmŸe_p‹t
(c⁄° 
°ªam
 *);

41 
ovs_be32
 
°ªam_gë_loˇl_ù
(c⁄° 
°ªam
 *);

42 
ovs_be16
 
°ªam_gë_loˇl_p‹t
(c⁄° 
°ªam
 *);

43 
°ªam_c⁄√˘
(
°ªam
 *);

44 
°ªam_ªcv
(
°ªam
 *, *
buf„r
, 
size_t
 
n
);

45 
°ªam_£nd
(
°ªam
 *, c⁄° *
buf„r
, 
size_t
 
n
);

47 
°ªam_run
(
°ªam
 *);

48 
°ªam_run_waô
(
°ªam
 *);

50 
	e°ªam_waô_ty≥
 {

51 
	mSTREAM_CONNECT
,

52 
	mSTREAM_RECV
,

53 
	mSTREAM_SEND


55 
°ªam_waô
(
°ªam
 *, 
°ªam_waô_ty≥
);

56 
°ªam_c⁄√˘_waô
(
°ªam
 *);

57 
°ªam_ªcv_waô
(
°ªam
 *);

58 
°ªam_£nd_waô
(
°ªam
 *);

61 
p°ªam_vîify_«me
(c⁄° *
«me
);

62 
p°ªam_›í
(c⁄° *
«me
, 
p°ªam
 **, 
uöt8_t
 
ds˝
);

63 c⁄° *
p°ªam_gë_«me
(c⁄° 
p°ªam
 *);

64 
p°ªam_˛o£
(
p°ªam
 *);

65 
p°ªam_ac˚±
(
p°ªam
 *, 
°ªam
 **);

66 
p°ªam_ac˚±_block
(
p°ªam
 *, 
°ªam
 **);

67 
p°ªam_waô
(
p°ªam
 *);

68 
p°ªam_£t_ds˝
(
p°ªam
 *, 
uöt8_t
 
ds˝
);

72 
°ªam_›í_wôh_deÁu…_p‹ts
(c⁄° *
«me
,

73 
uöt16_t
 
deÁu…_t˝_p‹t
,

74 
uöt16_t
 
deÁu…_s¶_p‹t
,

75 
°ªam
 **,

76 
uöt8_t
 
ds˝
);

77 
p°ªam_›í_wôh_deÁu…_p‹ts
(c⁄° *
«me
,

78 
uöt16_t
 
deÁu…_±˝_p‹t
,

79 
uöt16_t
 
deÁu…_ps¶_p‹t
,

80 
p°ªam
 **,

81 
uöt8_t
 
ds˝
);

82 
boﬁ
 
°ªam_∑r£_èrgë_wôh_deÁu…_p‹ts
(c⁄° *
èrgë
,

83 
uöt16_t
 
deÁu…_t˝_p‹t
,

84 
uöt16_t
 
deÁu…_s¶_p‹t
,

85 
sockaddr_ö
 *
sö
);

86 
°ªam_‹_p°ªam_√eds_¥obes
(c⁄° *
«me
);

90 
	e°ªam_c⁄ã¡_ty≥
 {

91 
	mSTREAM_UNKNOWN
,

92 
	mSTREAM_OPENFLOW
,

93 
	mSTREAM_SSL
,

94 
	mSTREAM_JSONRPC


97 
°ªam_ªp‹t_c⁄ã¡
(c⁄° *, 
ssize_t
, 
°ªam_c⁄ã¡_ty≥
,

98 
vlog_moduÀ
 *, c⁄° *
°ªam_«me
);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/stress.c

17 
	~<c⁄fig.h
>

18 
	~"°ªss.h
"

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~"unix˘l.h
"

22 
	~"dy«mic-°rög.h
"

23 
	~"øndom.h
"

24 
	~"utû.h
"

25 
	~"vlog.h
"

27 
VLOG_DEFINE_THIS_MODULE
(
°ªss
);

30 #i‡
USE_LINKER_SECTIONS


31 
°ªss_›ti⁄
 *
__°¨t_°ªss_›ti⁄s
[];

32 
°ªss_›ti⁄
 *
__°›_°ªss_›ti⁄s
[];

33 
	#°ªss_›ti⁄s
 
__°¨t_°ªss_›ti⁄s


	)

34 
	#n_°ªss_›ti⁄s
 (
__°›_°ªss_›ti⁄s
 - 
__°¨t_°ªss_›ti⁄s
)

	)

36 #unde‡
STRESS_OPTION


37 
	#STRESS_OPTION
(
NAME
, 
DESCRIPTION
, 
RECOMMENDED
, 
MIN
, 
MAX
, 
DEFAULT
) \

38 
	`STRESS_OPTION__
(
NAME
, 
DESCRIPTION
, 
RECOMMENDED
, 
MIN
, 
MAX
, 
DEFAULT
);

	)

39 
	~"°ªss.def
"

40 #unde‡
STRESS_OPTION


42 
°ªss_›ti⁄
 *
	g°ªss_›ti⁄s
[] = {

43 
	#STRESS_OPTION
(
NAME
, 
DESCRIPTION
, 
RECOMMENDED
, 
MIN
, 
MAX
, 
DEFAULT
) \

44 &
°ªss_
##
NAME
,

	)

45 
	~"°ªss.def
"

46 #unde‡
STRESS_OPTION


48 
	#n_°ªss_›ti⁄s
 
	`ARRAY_SIZE
(
°ªss_›ti⁄s
)

	)

52 
boﬁ
 
	g°ªss_íabÀd
;

55 
	$°ªss_ª£t
(
°ªss_›ti⁄
 *
›ti⁄
)

57 i‡(!
›ti⁄
->
≥riod
 || !
°ªss_íabÀd
) {

58 
›ti⁄
->
cou¡î
 = 
UINT_MAX
;

59 } i‡(!
›ti⁄
->
øndom
) {

60 
›ti⁄
->
cou¡î
 = o±i⁄->
≥riod
;

61 } i‡(
›ti⁄
->
≥riod
 < 
UINT32_MAX
 / 2) {

63 
›ti⁄
->
cou¡î
 = 
	`øndom_uöt32
(Ë% ((2 * o±i⁄->
≥riod
) - 1) + 1;

65 
›ti⁄
->
cou¡î
 = 
	`øndom_uöt32
();

67 
	}
}

70 
	$°ªss_íabÀ
(
boﬁ
 
íabÀ
)

72 i‡(
°ªss_íabÀd
 !
íabÀ
) {

73 
i
;

75 
°ªss_íabÀd
 = 
íabÀ
;

76 
i
 = 0; i < 
n_°ªss_›ti⁄s
; i++) {

77 
	`°ªss_ª£t
(
°ªss_›ti⁄s
[
i
]);

80 
	}
}

82 
boﬁ


83 
	$°ªss_ßm∂e_¶ow∑th__
(
°ªss_›ti⁄
 *
›ti⁄
)

85 
	`°ªss_ª£t
(
›ti⁄
);

86 i‡(
›ti⁄
->
≥riod
 && 
°ªss_íabÀd
) {

87 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(5, 1);

89 
›ti⁄
->
hôs
++;

90 
	`VLOG_DBG_RL
(&
æ
, "%†hô (%ŒuÅŸÆ)", 
›ti⁄
->
«me
, o±i⁄->
hôs
);

92  
åue
;

94  
Ál£
;

96 
	}
}

99 
	$°ªss_£t
(
°ªss_›ti⁄
 *
›ti⁄
, 
≥riod
, 
boﬁ
 
øndom
)

101 i‡(
≥riod
 > 
›ti⁄
->
max
) {

102 
≥riod
 = 
›ti⁄
->
max
;

104 i‡(
≥riod
 < 
›ti⁄
->
mö
) {

105 
≥riod
 = 
›ti⁄
->
mö
;

107 i‡(
≥riod
 !
›ti⁄
->≥riod || 
øndom
 != option->random) {

108 
›ti⁄
->
øndom
 =Ñandom;

109 
›ti⁄
->
≥riod
 =Öeriod;

110 
	`°ªss_ª£t
(
›ti⁄
);

112 
	}
}

115 
	$°ªss_unix˘l_li°
(
unix˘l_c⁄n
 *
c⁄n
, 
¨gc
 
OVS_UNUSED
,

116 c⁄° *
¨gv
[] 
OVS_UNUSED
, *
aux
 OVS_UNUSED)

118 
i
, 
found
 = 0;

119 
ds
 
ªsu…s
;

121 
	`ds_öô
(&
ªsu…s
);

122 
	`ds_put_c°r
(&
ªsu…s
, "NAME (DESCRIPTION)\n");

123 
	`ds_put_f‹m©
(&
ªsu…s
, "%11s %10s %10s %10s\n",

125 
	`ds_put_f‹m©
(&
ªsu…s
, "%11s %10s %10s %10s\n",

127 
i
 = 0; i < 
n_°ªss_›ti⁄s
; i++) {

128 
°ªss_›ti⁄
 *
›ti⁄
 = 
°ªss_›ti⁄s
[
i
];

129 i‡(!
¨gv
[1] || 
	`°r°r
(
›ti⁄
->
«me
,árgv[1])) {

130 
	`ds_put_f‹m©
(&
ªsu…s
, "\n%s (%s)\n",

131 
›ti⁄
->
«me
, o±i⁄->
des¸ùti⁄
);

132 i‡(
›ti⁄
->
≥riod
) {

133 
	`ds_put_f‹m©
(&
ªsu…s
, "%11u %10†", 
›ti⁄
->
≥riod
,

134 
›ti⁄
->
øndom
 ? "random" : "periodic");

135 i‡(
°ªss_íabÀd
) {

136 
	`ds_put_f‹m©
(&
ªsu…s
, "%10u", 
›ti⁄
->
cou¡î
);

138 
	`ds_put_c°r
(&
ªsu…s
, "Ç/a");

141 
	`ds_put_f‹m©
(&
ªsu…s
, "%11s %10s %10s",

144 
	`ds_put_f‹m©
(&
ªsu…s
, " %10Œu\n", 
›ti⁄
->
hôs
);

145 
	`ds_put_f‹m©
(&
ªsu…s
, "%11u %10u %10u ",

146 
›ti⁄
->
ªcommíded
, o±i⁄->
mö
, o±i⁄->
max
);

147 i‡(!
›ti⁄
->
def
) {

148 
	`ds_put_f‹m©
(&
ªsu…s
, "%10s", "disabled");

150 
	`ds_put_f‹m©
(&
ªsu…s
, "%10u", 
›ti⁄
->
def
);

152 
	`ds_put_ch¨
(&
ªsu…s
, '\n');

153 
found
++;

156 i‡(
found
) {

157 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, 
	`ds_c°r
(&
ªsu…s
));

159 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, 
NULL
);

161 
	`ds_de°roy
(&
ªsu…s
);

162 
	}
}

165 
	$°ªss_unix˘l_íabÀ
(
unix˘l_c⁄n
 *
c⁄n
, 
¨gc
 
OVS_UNUSED
,

166 c⁄° *
¨gv
[] 
OVS_UNUSED
, *
aux
 OVS_UNUSED)

168 
	`°ªss_íabÀ
(
åue
);

169 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, 
NULL
);

170 
	}
}

173 
	$°ªss_unix˘l_dißbÀ
(
unix˘l_c⁄n
 *
c⁄n
, 
¨gc
 
OVS_UNUSED
,

174 c⁄° *
¨gv
[] 
OVS_UNUSED
, *
aux
 OVS_UNUSED)

176 
	`°ªss_íabÀ
(
Ál£
);

177 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, 
NULL
);

178 
	}
}

181 
	$°ªss_unix˘l_£t
(
unix˘l_c⁄n
 *
c⁄n
, 
¨gc
 
OVS_UNUSED
,

182 c⁄° *
¨gv
[], *
aux
 
OVS_UNUSED
)

184 c⁄° *
›ti⁄_«me
 = 
¨gv
[1];

185 c⁄° *
›ti⁄_vÆ
 = 
¨gv
[2];

186 
i
;

188 
i
 = 0; i < 
n_°ªss_›ti⁄s
; i++) {

189 
°ªss_›ti⁄
 *
›ti⁄
 = 
°ªss_›ti⁄s
[
i
];

190 i‡(!
	`°rcmp
(
›ti⁄_«me
, 
›ti⁄
->
«me
)) {

191 
≥riod
 = 
	`°πoul
(
›ti⁄_vÆ
, 
NULL
, 0);

192 
boﬁ
 
øndom
 = !
	`°rcmp
(
¨gv
[3], "random");

194 
	`°ªss_£t
(
›ti⁄
, 
≥riod
, 
øndom
);

195 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, 
NULL
);

200 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, 
NULL
);

201 
	}
}

209 
	$°ªss_öô_comm™d
()

211 
	`unix˘l_comm™d_ªgi°î
("stress/list", "", 0, 1,

212 
°ªss_unix˘l_li°
, 
NULL
);

213 
	`unix˘l_comm™d_ªgi°î
("stress/set", "optionÖeriod [random |Öeriodic]",

214 2, 3, 
°ªss_unix˘l_£t
, 
NULL
);

215 
	`unix˘l_comm™d_ªgi°î
("stress/enable", "", 0, 0,

216 
°ªss_unix˘l_íabÀ
, 
NULL
);

217 
	`unix˘l_comm™d_ªgi°î
("stress/disable", "", 0, 0,

218 
°ªss_unix˘l_dißbÀ
, 
NULL
);

219 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/stress.h

17 #i‚de‡
STRESS_H


18 
	#STRESS_H
 1

	)

20 
	~<°dboﬁ.h
>

22 
	s°ªss_›ti⁄
 {

24 *
	m«me
;

25 *
	mdes¸ùti⁄
;

26 
	mªcommíded
;

27 
	mmö
;

28 
	mmax
;

29 
	mdef
;

32 
	m≥riod
;

33 
boﬁ
 
	møndom
;

36 
	mcou¡î
;

37 
	mhôs
;

60 #i‡
USE_LINKER_SECTIONS


61 
	#STRESS_OPTION
(
NAME
, 
DESCRIPTION
, 
RECOMMENDED
, 
MIN
, 
MAX
, 
DEFAULT
) \

62 
	`STRESS_OPTION__
(
NAME
, 
DESCRIPTION
, 
RECOMMENDED
, 
MIN
, 
MAX
, 
DEFAULT
); \

63 
°ªss_›ti⁄
 *
°ªss_›ti⁄_±r_
##
NAME
; \

64 
°ªss_›ti⁄
 *
°ªss_›ti⁄_±r_
##
NAME
 \

65 
	`__©åibuã__
((
	`£˘i⁄
("°ªss_›ti⁄s"))Ë&
°ªss_
##
NAME


	)

67 
	#STRESS_OPTION
(
NAME
, 
DESCRIPTION
, 
RECOMMENDED
, 
MIN
, 
MAX
, 
DEFAULT
) \

68 
°ªss_›ti⁄
 
°ªss_
##
NAME


	)

73 
	#STRESS
(
NAME
Ë
	`°ªss_ßm∂e__
(&
°ªss_
##NAME)

	)

75 
°ªss_öô_comm™d
();

79 
	#STRESS_OPTION__
(
NAME
, 
DESCRIPTION
, 
RECOMMENDED
, 
MIN
, 
MAX
, 
DEFAULT
) \

80 
°ªss_›ti⁄
 
°ªss_
##
NAME
; \

81 
°ªss_›ti⁄
 
°ªss_
##
NAME
 = \

82 { #NAME, 
DESCRIPTION
, 
RECOMMENDED
, 
MIN
, 
MAX
, 
DEFAULT
, \

83 
DEFAULT
 ? DEFAULT : 0, \

84 
Ál£
, \

85 
UINT_MAX
, \

86 0 }

	)

88 
boﬁ
 
°ªss_ßm∂e_¶ow∑th__
(
°ªss_›ti⁄
 *);

89 
ölöe
 
boﬁ
 
	$°ªss_ßm∂e__
(
°ªss_›ti⁄
 *
›ti⁄
)

91  --
›ti⁄
->
cou¡î
 =0 && 
	`°ªss_ßm∂e_¶ow∑th__
(option);

92 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/string.c

17 
	~<c⁄fig.h
>

19 
	~<°rög.h
>

21 #i‚de‡
HAVE_STRNLEN


22 
size_t


23 
	$°∫Àn
(c⁄° *
s
, 
size_t
 
maxÀn
)

25 c⁄° *
íd
 = 
	`memchr
(
s
, '\0', 
maxÀn
);

26  
íd
 ?Énd - 
s
 : 
maxÀn
;

27 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/string.h

17 #i‚de‡
STRING_WRAPPER_H


18 
	#STRING_WRAPPER_H
 1

	)

20 #ö˛ude_√xà<
°rög
.
h
>

30 #i‡
HAVE_STRTOK_R_BUG


31 #unde‡
°πok_r


34 #i‚de‡
HAVE_STRNLEN


35 #unde‡
°∫Àn


36 
	#°∫Àn
 
Ωl_°∫Àn


	)

37 
size_t
 
°∫Àn
(c⁄° *, size_à
maxÀn
);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/svec.c

17 
	~<c⁄fig.h
>

18 
	~"svec.h
"

19 
	~<as£π.h
>

20 
	~<˘y≥.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~"dy«mic-°rög.h
"

24 
	~"utû.h
"

25 
	~"vlog.h
"

27 
VLOG_DEFINE_THIS_MODULE
(
svec
);

30 
	$svec_öô
(
svec
 *svec)

32 
svec
->
«mes
 = 
NULL
;

33 
svec
->
n
 = 0;

34 
svec
->
Æloˇãd
 = 0;

35 
	}
}

38 
	$svec_˛⁄e
(
svec
 *svec, c⁄° sve¯*
Ÿhî
)

40 
	`svec_öô
(
svec
);

41 
	`svec_≠≥nd
(
svec
, 
Ÿhî
);

42 
	}
}

45 
	$svec_de°roy
(
svec
 *svec)

47 
	`svec_˛ór
(
svec
);

48 
	`‰ì
(
svec
->
«mes
);

49 
	}
}

52 
	$svec_˛ór
(
svec
 *svec)

54 
size_t
 
i
;

56 
i
 = 0; i < 
svec
->
n
; i++) {

57 
	`‰ì
(
svec
->
«mes
[
i
]);

59 
svec
->
n
 = 0;

60 
	}
}

62 
boﬁ


63 
	$svec_is_em±y
(c⁄° 
svec
 *svec)

65  
svec
->
n
 == 0;

66 
	}
}

69 
	$svec_add
(
svec
 *svec, c⁄° *
«me
)

71 
	`svec_add_noc›y
(
svec
, 
	`x°rdup
(
«me
));

72 
	}
}

75 
	$svec_dñ
(
svec
 *svec, c⁄° *
«me
)

77 
size_t
 
off£t
;

79 
off£t
 = 
	`svec_föd
(
svec
, 
«me
);

80 i‡(
off£t
 !
SIZE_MAX
) {

81 
	`‰ì
(
svec
->
«mes
[
off£t
]);

82 
	`memmove
(&
svec
->
«mes
[
off£t
], &svec->names[offset + 1],

83  *
svec
->
«mes
 * (svec->
n
 - 
off£t
 - 1));

84 
svec
->
n
--;

86 
	}
}

89 
	$svec_ex∑nd
(
svec
 *svec)

91 i‡(
svec
->
n
 >svec->
Æloˇãd
) {

92 
svec
->
«mes
 = 
	`x2ƒóŒoc
(svec->«mes, &svec->
Æloˇãd
,

93  *
svec
->
«mes
);

95 
	}
}

98 
	$svec_add_noc›y
(
svec
 *svec, *
«me
)

100 
	`svec_ex∑nd
(
svec
);

101 
svec
->
«mes
[svec->
n
++] = 
«me
;

102 
	}
}

105 
	$svec_≠≥nd
(
svec
 *svec, c⁄° sve¯*
Ÿhî
)

107 
size_t
 
i
;

108 
i
 = 0; i < 
Ÿhî
->
n
; i++) {

109 
	`svec_add
(
svec
, 
Ÿhî
->
«mes
[
i
]);

111 
	}
}

114 
	$svec_ãrmö©e
(
svec
 *svec)

116 
	`svec_ex∑nd
(
svec
);

117 
svec
->
«mes
[svec->
n
] = 
NULL
;

118 
	}
}

121 
	$com∑ª_°rögs
(c⁄° *
a_
, c⁄° *
b_
)

123 *c⁄° *
a
 = 
a_
;

124 *c⁄° *
b
 = 
b_
;

125  
	`°rcmp
(*
a
, *
b
);

126 
	}
}

129 
	$svec_s‹t
(
svec
 *svec)

131 
	`qs‹t
(
svec
->
«mes
, svec->
n
,  *svec->«mes, 
com∑ª_°rögs
);

132 
	}
}

135 
	$svec_s‹t_unique
(
svec
 *svec)

137 
	`svec_s‹t
(
svec
);

138 
	`svec_unique
(
svec
);

139 
	}
}

142 
	$svec_unique
(
svec
 *svec)

144 
	`as£π
(
	`svec_is_s‹ãd
(
svec
));

145 i‡(
svec
->
n
 > 1) {

148 
svec
 
tmp
;

149 
size_t
 
i
;

151 
	`svec_öô
(&
tmp
);

152 
	`svec_add
(&
tmp
, 
svec
->
«mes
[0]);

153 
i
 = 1; i < 
svec
->
n
; i++) {

154 i‡(
	`°rcmp
(
svec
->
«mes
[
i
 - 1], svec->names[i])) {

155 
	`svec_add
(&
tmp
, 
svec
->
«mes
[
i
]);

158 
	`svec_sw≠
(&
tmp
, 
svec
);

159 
	`svec_de°roy
(&
tmp
);

161 
	}
}

164 
	$svec_com∑˘
(
svec
 *svec)

166 
size_t
 
i
, 
j
;

168 
i
 = 
j
 = 0; i < 
svec
->
n
; i++) {

169 i‡(
svec
->
«mes
[
i
] !
NULL
) {

170 
svec
->
«mes
[
j
++] = svec->«mes[
i
];

173 
svec
->
n
 = 
j
;

174 
	}
}

177 
	$svec_diff
(c⁄° 
svec
 *
a
, c⁄° sve¯*
b
,

178 
svec
 *
a_⁄ly
, sve¯*
bŸh
, sve¯*
b_⁄ly
)

180 
size_t
 
i
, 
j
;

182 
	`as£π
(
	`svec_is_s‹ãd
(
a
));

183 
	`as£π
(
	`svec_is_s‹ãd
(
b
));

184 i‡(
a_⁄ly
) {

185 
	`svec_öô
(
a_⁄ly
);

187 i‡(
bŸh
) {

188 
	`svec_öô
(
bŸh
);

190 i‡(
b_⁄ly
) {

191 
	`svec_öô
(
b_⁄ly
);

193 
i
 = 
j
 = 0; i < 
a
->
n
 && j < 
b
->n; ) {

194 
cmp
 = 
	`°rcmp
(
a
->
«mes
[
i
], 
b
->«mes[
j
]);

195 i‡(
cmp
 < 0) {

196 i‡(
a_⁄ly
) {

197 
	`svec_add
(
a_⁄ly
, 
a
->
«mes
[
i
]);

199 
i
++;

200 } i‡(
cmp
 > 0) {

201 i‡(
b_⁄ly
) {

202 
	`svec_add
(
b_⁄ly
, 
b
->
«mes
[
j
]);

204 
j
++;

206 i‡(
bŸh
) {

207 
	`svec_add
(
bŸh
, 
a
->
«mes
[
i
]);

209 
i
++;

210 
j
++;

213 i‡(
a_⁄ly
) {

214 ; 
i
 < 
a
->
n
; i++) {

215 
	`svec_add
(
a_⁄ly
, 
a
->
«mes
[
i
]);

218 i‡(
b_⁄ly
) {

219 ; 
j
 < 
b
->
n
; j++) {

220 
	`svec_add
(
b_⁄ly
, 
b
->
«mes
[
j
]);

223 
	}
}

225 
boﬁ


226 
	$svec_c⁄èös
(c⁄° 
svec
 *svec, c⁄° *
«me
)

228  
	`svec_föd
(
svec
, 
«me
Ë!
SIZE_MAX
;

229 
	}
}

231 
size_t


232 
	$svec_föd
(c⁄° 
svec
 *svec, c⁄° *
«me
)

234 **
p
;

236 
	`as£π
(
	`svec_is_s‹ãd
(
svec
));

237 
p
 = 
	`b£¨ch
(&
«me
, 
svec
->
«mes
, svec->
n
,  *svec->names,

238 
com∑ª_°rögs
);

239  
p
 ?Ö - 
svec
->
«mes
 : 
SIZE_MAX
;

240 
	}
}

242 
boﬁ


243 
	$svec_is_s‹ãd
(c⁄° 
svec
 *svec)

245 
size_t
 
i
;

247 
i
 = 1; i < 
svec
->
n
; i++) {

248 i‡(
	`°rcmp
(
svec
->
«mes
[
i
 - 1], svec->names[i]) > 0) {

249  
Ál£
;

252  
åue
;

253 
	}
}

255 
boﬁ


256 
	$svec_is_unique
(c⁄° 
svec
 *svec)

258  
	`svec_gë_du∂iˇã
(
svec
Ë=
NULL
;

259 
	}
}

262 
	$svec_gë_du∂iˇã
(c⁄° 
svec
 *svec)

264 
	`as£π
(
	`svec_is_s‹ãd
(
svec
));

265 i‡(
svec
->
n
 > 1) {

266 
size_t
 
i
;

267 
i
 = 1; i < 
svec
->
n
; i++) {

268 i‡(!
	`°rcmp
(
svec
->
«mes
[
i
 - 1], svec->names[i])) {

269  
svec
->
«mes
[
i
];

273  
NULL
;

274 
	}
}

277 
	$svec_sw≠
(
svec
 *
a
, sve¯*
b
)

279 
svec
 
tmp
 = *
a
;

280 *
a
 = *
b
;

281 *
b
 = 
tmp
;

282 
	}
}

285 
	$svec_¥öt
(c⁄° 
svec
 *svec, c⁄° *
tôÀ
)

287 
size_t
 
i
;

289 
	`¥ötf
("%s:\n", 
tôÀ
);

290 
i
 = 0; i < 
svec
->
n
; i++) {

291 
	`¥ötf
("\"%s\"\n", 
svec
->
«mes
[
i
]);

293 
	}
}

298 
	$svec_∑r£_w‹ds
(
svec
 *svec, c⁄° *
w‹ds
)

300 
ds
 
w‹d
 = 
DS_EMPTY_INITIALIZER
;

301 c⁄° *
p
, *
q
;

303 
p
 = 
w‹ds
; *∞!'\0';Ö = 
q
) {

304 
quŸe
 = 0;

306 
	`is•a˚
((Ë*
p
)) {

307 
p
++;

309 i‡(*
p
 == '\0') {

313 
	`ds_˛ór
(&
w‹d
);

314 
q
 = 
p
; *q != '\0'; q++) {

315 i‡(*
q
 =
quŸe
) {

316 
quŸe
 = 0;

317 } i‡(*
q
 == '\'' || *q == '"') {

318 
quŸe
 = *
q
;

319 } i‡(*
q
 ='\\' && (!
quŸe
 || quote == '"')) {

320 
q
++;

321 i‡(*
q
 == '\0') {

322 
	`VLOG_WARN
("%s:Énd†öÅøûög back¶ash", 
w‹ds
);

325 
	`ds_put_ch¨
(&
w‹d
, *
q
);

326 } i‡(
	`is•a˚
((Ë*
q
Ë&& !
quŸe
) {

327 
q
++;

330 
	`ds_put_ch¨
(&
w‹d
, *
q
);

333 
	`svec_add
(
svec
, 
	`ds_c°r
(&
w‹d
));

334 i‡(
quŸe
) {

335 
	`VLOG_WARN
("%s: w‹dÉnd†ösidêquŸed såög", 
w‹ds
);

338 
	`ds_de°roy
(&
w‹d
);

339 
	}
}

341 
boﬁ


342 
	$svec_equÆ
(c⁄° 
svec
 *
a
, c⁄° sve¯*
b
)

344 
size_t
 
i
;

346 i‡(
a
->
n
 !
b
->n) {

347  
Ál£
;

349 
i
 = 0; i < 
a
->
n
; i++) {

350 i‡(
	`°rcmp
(
a
->
«mes
[
i
], 
b
->names[i])) {

351  
Ál£
;

354  
åue
;

355 
	}
}

358 
	$svec_joö
(c⁄° 
svec
 *svec,

359 c⁄° *
dñimôî
, c⁄° *
ãrmö©‹
)

361 
ds
 ds;

362 
size_t
 
i
;

364 
	`ds_öô
(&
ds
);

365 
i
 = 0; i < 
svec
->
n
; i++) {

366 i‡(
i
) {

367 
	`ds_put_c°r
(&
ds
, 
dñimôî
);

369 
	`ds_put_c°r
(&
ds
, 
svec
->
«mes
[
i
]);

371 
	`ds_put_c°r
(&
ds
, 
ãrmö©‹
);

372  
	`ds_c°r
(&
ds
);

373 
	}
}

376 
	$svec_back
(c⁄° 
svec
 *svec)

378 
	`as£π
(
svec
->
n
);

379  
svec
->
«mes
[svec->
n
 - 1];

380 
	}
}

383 
	$svec_p›_back
(
svec
 *svec)

385 
	`as£π
(
svec
->
n
);

386 
	`‰ì
(
svec
->
«mes
[--svec->
n
]);

387 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/svec.h

17 #i‚de‡
SVEC_H


18 
	#SVEC_H
 1

	)

20 
	~<°dboﬁ.h
>

21 
	~<°ddef.h
>

23 #ifde‡ 
__˝lu•lus


27 
	ssvec
 {

28 **
«mes
;

29 
size_t
 
n
;

30 
size_t
 
Æloˇãd
;

33 
	#SVEC_EMPTY_INITIALIZER
 { 
NULL
, 0, 0 }

	)

35 
svec_öô
(
svec
 *);

36 
svec_˛⁄e
(
svec
 *, const svec *);

37 
svec_de°roy
(
svec
 *);

38 
svec_˛ór
(
svec
 *);

39 
boﬁ
 
svec_is_em±y
(c⁄° 
svec
 *);

40 
svec_add
(
svec
 *, const *);

41 
svec_add_noc›y
(
svec
 *, *);

42 
svec_dñ
(
svec
 *, const *);

43 
svec_≠≥nd
(
svec
 *, const svec *);

44 
svec_ãrmö©e
(
svec
 *);

45 
svec_s‹t
(
svec
 *);

46 
svec_s‹t_unique
(
svec
 *);

47 
svec_unique
(
svec
 *);

48 
svec_com∑˘
(
svec
 *);

49 
svec_diff
(c⁄° 
svec
 *
a
, c⁄° sve¯*
b
,

50 
svec
 *
a_⁄ly
, sve¯*
bŸh
, sve¯*
b_⁄ly
);

51 
boﬁ
 
svec_c⁄èös
(c⁄° 
svec
 *, const *);

52 
size_t
 
svec_föd
(c⁄° 
svec
 *, const *);

53 
boﬁ
 
svec_is_s‹ãd
(c⁄° 
svec
 *);

54 
boﬁ
 
svec_is_unique
(c⁄° 
svec
 *);

55 c⁄° *
svec_gë_du∂iˇã
(c⁄° 
svec
 *);

56 
svec_sw≠
(
svec
 *
a
, sve¯*
b
);

57 
svec_¥öt
(c⁄° 
svec
 *svec, c⁄° *
tôÀ
);

58 
svec_∑r£_w‹ds
(
svec
 *svec, c⁄° *
w‹ds
);

59 
boﬁ
 
svec_equÆ
(c⁄° 
svec
 *, const svec *);

60 *
svec_joö
(c⁄° 
svec
 *,

61 c⁄° *
dñimôî
, c⁄° *
ãrmö©‹
);

62 c⁄° *
svec_back
(c⁄° 
svec
 *);

63 
svec_p›_back
(
svec
 *);

67 
	#SVEC_FOR_EACH
(
INDEX
, 
NAME
, 
SVEC
) \

68 (
INDEX
) = 0; \

69 ((
INDEX
Ë< (
SVEC
)->
n
 \

70 ? (
NAME
Ë(
SVEC
)->
«mes
[
INDEX
], 1 \

72 (
INDEX
)++)

	)

74 #ifde‡ 
__˝lu•lus


	@/home/lsch/mytest/openvswitch-1.9.0/lib/table.c

17 
	~<c⁄fig.h
>

19 
	~"èbÀ.h
"

21 
	~<as£π.h
>

23 
	~"dy«mic-°rög.h
"

24 
	~"js⁄.h
"

25 
	~"ovsdb-d©a.h
"

26 
	~"ovsdb-îr‹.h
"

27 
	~"timevÆ.h
"

28 
	~"utû.h
"

30 
	scﬁumn
 {

31 *
	mhódög
;

35 
	$˚Œ_to_ãxt
(
˚Œ
 *˚Œ, c⁄° 
èbÀ_°yÀ
 *
°yÀ
)

37 i‡(!
˚Œ
->
ãxt
) {

38 i‡(
˚Œ
->
js⁄
) {

39 i‡(
°yÀ
->
˚Œ_f‹m©
 =
CF_JSON
 || !
˚Œ
->
ty≥
) {

40 
˚Œ
->
ãxt
 = 
	`js⁄_to_°rög
(˚Œ->
js⁄
, 
JSSF_SORT
);

42 
ovsdb_d©um
 
d©um
;

43 
ovsdb_îr‹
 *
îr‹
;

44 
ds
 
s
;

46 
îr‹
 = 
	`ovsdb_d©um_‰om_js⁄
(&
d©um
, 
˚Œ
->
ty≥
, cñl->
js⁄
,

47 
NULL
);

48 i‡(!
îr‹
) {

49 
	`ds_öô
(&
s
);

50 i‡(
°yÀ
->
˚Œ_f‹m©
 =
CF_STRING
) {

51 
	`ovsdb_d©um_to_°rög
(&
d©um
, 
˚Œ
->
ty≥
, &
s
);

53 
	`ovsdb_d©um_to_b¨e
(&
d©um
, 
˚Œ
->
ty≥
, &
s
);

55 
	`ovsdb_d©um_de°roy
(&
d©um
, 
˚Œ
->
ty≥
);

56 
˚Œ
->
ãxt
 = 
	`ds_°ól_c°r
(&
s
);

58 
˚Œ
->
ãxt
 = 
	`js⁄_to_°rög
(˚Œ->
js⁄
, 
JSSF_SORT
);

59 
	`ovsdb_îr‹_de°roy
(
îr‹
);

63 
˚Œ
->
ãxt
 = 
	`x°rdup
("");

67  
˚Œ
->
ãxt
;

68 
	}
}

71 
	$˚Œ_de°roy
(
˚Œ
 *cell)

73 
	`‰ì
(
˚Œ
->
ãxt
);

74 
	`js⁄_de°roy
(
˚Œ
->
js⁄
);

75 
	}
}

90 
	$èbÀ_öô
(
èbÀ
 *table)

92 
	`mem£t
(
èbÀ
, 0,  *table);

93 
	}
}

98 
	$èbÀ_de°roy
(
èbÀ
 *table)

100 i‡(
èbÀ
) {

101 
size_t
 
i
;

103 
i
 = 0; i < 
èbÀ
->
n_cﬁumns
; i++) {

104 
	`‰ì
(
èbÀ
->
cﬁumns
[
i
].
hódög
);

106 
	`‰ì
(
èbÀ
->
cﬁumns
);

108 
i
 = 0; i < 
èbÀ
->
n_cﬁumns
 *ÅabÀ->
n_rows
; i++) {

109 
	`˚Œ_de°roy
(&
èbÀ
->
˚Œs
[
i
]);

111 
	`‰ì
(
èbÀ
->
˚Œs
);

113 
	`‰ì
(
èbÀ
->
ˇ±i⁄
);

115 
	}
}

121 
	$èbÀ_£t_ˇ±i⁄
(
èbÀ
 *èbÀ, *
ˇ±i⁄
)

123 
	`‰ì
(
èbÀ
->
ˇ±i⁄
);

124 
èbÀ
->
ˇ±i⁄
 = caption;

125 
	}
}

130 
	$èbÀ_£t_time°amp
(
èbÀ
 *èbÀ, 
boﬁ
 
time°amp
)

132 
èbÀ
->
time°amp
 =Åimestamp;

133 
	}
}

141 
	$èbÀ_add_cﬁumn
(
èbÀ
 *èbÀ, c⁄° *
hódög
, ...)

143 
cﬁumn
 *column;

144 
va_li°
 
¨gs
;

146 
	`as£π
(!
èbÀ
->
n_rows
);

147 i‡(
èbÀ
->
n_cﬁumns
 >èbÀ->
Æloˇãd_cﬁumns
) {

148 
èbÀ
->
cﬁumns
 = 
	`x2ƒóŒoc
—abÀ->cﬁumns, &èbÀ->
Æloˇãd_cﬁumns
,

149  *
èbÀ
->
cﬁumns
);

151 
cﬁumn
 = &
èbÀ
->
cﬁumns
[èbÀ->
n_cﬁumns
++];

153 
	`va_°¨t
(
¨gs
, 
hódög
);

154 
cﬁumn
->
hódög
 = 
	`xva•rötf
(hódög, 
¨gs
);

155 
	`va_íd
(
¨gs
);

156 
	}
}

158 
˚Œ
 *

159 
	$èbÀ_˚Œ__
(c⁄° 
èbÀ
 *èbÀ, 
size_t
 
row
, size_à
cﬁumn
)

161  &
èbÀ
->
˚Œs
[
cﬁumn
 + 
row
 *ÅabÀ->
n_cﬁumns
];

162 
	}
}

169 
	$èbÀ_add_row
(
èbÀ
 *table)

171 
size_t
 
x
, 
y
;

173 i‡(
èbÀ
->
n_rows
 >èbÀ->
Æloˇãd_rows
) {

174 
èbÀ
->
˚Œs
 = 
	`x2ƒóŒoc
—abÀ->˚Œs, &èbÀ->
Æloˇãd_rows
,

175 
èbÀ
->
n_cﬁumns
 *  *èbÀ->
˚Œs
);

178 
y
 = 
èbÀ
->
n_rows
++;

179 
èbÀ
->
cuºít_cﬁumn
 = 0;

180 
x
 = 0; x < 
èbÀ
->
n_cﬁumns
; x++) {

181 
˚Œ
 *˚Œ = 
	`èbÀ_˚Œ__
(
èbÀ
, 
y
, 
x
);

182 
	`mem£t
(
˚Œ
, 0,  *cell);

184 
	}
}

202 
˚Œ
 *

203 
	$èbÀ_add_˚Œ
(
èbÀ
 *table)

205 
size_t
 
x
, 
y
;

207 
	`as£π
(
èbÀ
->
n_rows
 > 0);

208 
	`as£π
(
èbÀ
->
cuºít_cﬁumn
 <ÅabÀ->
n_cﬁumns
);

210 
x
 = 
èbÀ
->
cuºít_cﬁumn
++;

211 
y
 = 
èbÀ
->
n_rows
 - 1;

213  
	`èbÀ_˚Œ__
(
èbÀ
, 
y
, 
x
);

214 
	}
}

217 
	$èbÀ_¥öt_èbÀ_löe__
(
ds
 *
löe
)

219 
	`puts
(
	`ds_c°r
(
löe
));

220 
	`ds_˛ór
(
löe
);

221 
	}
}

224 
	$èbÀ_f‹m©_time°amp__
(*
s
, 
size_t
 
size
)

226 
time_t
 
now
 = 
	`time_wÆl
();

227 
	`°r·ime
(
s
, 
size
, "%Y-%m-%d %H:%M:%S", 
	`gmtime
(&
now
));

228 
	}
}

231 
	$èbÀ_¥öt_time°amp__
(c⁄° 
èbÀ
 *table)

233 i‡(
èbÀ
->
time°amp
) {

234 
s
[32];

236 
	`èbÀ_f‹m©_time°amp__
(
s
,  s);

237 
	`puts
(
s
);

239 
	}
}

242 
	$èbÀ_¥öt_èbÀ__
(c⁄° 
èbÀ
 *èbÀ, c⁄° 
èbÀ_°yÀ
 *
°yÀ
)

244 
n
 = 0;

245 
ds
 
löe
 = 
DS_EMPTY_INITIALIZER
;

246 *
widths
;

247 
size_t
 
x
, 
y
;

249 i‡(
n
++ > 0) {

250 
	`putch¨
('\n');

253 
	`èbÀ_¥öt_time°amp__
(
èbÀ
);

255 i‡(
èbÀ
->
ˇ±i⁄
) {

256 
	`puts
(
èbÀ
->
ˇ±i⁄
);

259 
widths
 = 
	`xmÆloc
(
èbÀ
->
n_cﬁumns
 *  *widths);

260 
x
 = 0; x < 
èbÀ
->
n_cﬁumns
; x++) {

261 c⁄° 
cﬁumn
 *cﬁum¿&
èbÀ
->
cﬁumns
[
x
];

263 
widths
[
x
] = 
	`°æí
(
cﬁumn
->
hódög
);

264 
y
 = 0; y < 
èbÀ
->
n_rows
; y++) {

265 c⁄° *
ãxt
 = 
	`˚Œ_to_ãxt
(
	`èbÀ_˚Œ__
(
èbÀ
, 
y
, 
x
), 
°yÀ
);

266 
size_t
 
Àngth
 = 
	`°æí
(
ãxt
);

268 i‡(
Àngth
 > 
widths
[
x
]) {

269 
widths
[
x
] = 
Àngth
;

274 i‡(
°yÀ
->
hódögs
) {

275 
x
 = 0; x < 
èbÀ
->
n_cﬁumns
; x++) {

276 c⁄° 
cﬁumn
 *cﬁum¿&
èbÀ
->
cﬁumns
[
x
];

277 i‡(
x
) {

278 
	`ds_put_ch¨
(&
löe
, ' ');

280 
	`ds_put_f‹m©
(&
löe
, "%-*s", 
widths
[
x
], 
cﬁumn
->
hódög
);

282 
	`èbÀ_¥öt_èbÀ_löe__
(&
löe
);

284 
x
 = 0; x < 
èbÀ
->
n_cﬁumns
; x++) {

285 i‡(
x
) {

286 
	`ds_put_ch¨
(&
löe
, ' ');

288 
	`ds_put_ch¨_mu…ùÀ
(&
löe
, '-', 
widths
[
x
]);

290 
	`èbÀ_¥öt_èbÀ_löe__
(&
löe
);

293 
y
 = 0; y < 
èbÀ
->
n_rows
; y++) {

294 
x
 = 0; x < 
èbÀ
->
n_cﬁumns
; x++) {

295 c⁄° *
ãxt
 = 
	`˚Œ_to_ãxt
(
	`èbÀ_˚Œ__
(
èbÀ
, 
y
, 
x
), 
°yÀ
);

296 i‡(
x
) {

297 
	`ds_put_ch¨
(&
löe
, ' ');

299 
	`ds_put_f‹m©
(&
löe
, "%-*s", 
widths
[
x
], 
ãxt
);

301 
	`èbÀ_¥öt_èbÀ_löe__
(&
löe
);

304 
	`ds_de°roy
(&
löe
);

305 
	`‰ì
(
widths
);

306 
	}
}

309 
	$èbÀ_¥öt_li°__
(c⁄° 
èbÀ
 *èbÀ, c⁄° 
èbÀ_°yÀ
 *
°yÀ
)

311 
n
 = 0;

312 
size_t
 
x
, 
y
;

314 i‡(
n
++ > 0) {

315 
	`putch¨
('\n');

318 
	`èbÀ_¥öt_time°amp__
(
èbÀ
);

320 i‡(
èbÀ
->
ˇ±i⁄
) {

321 
	`puts
(
èbÀ
->
ˇ±i⁄
);

324 
y
 = 0; y < 
èbÀ
->
n_rows
; y++) {

325 i‡(
y
 > 0) {

326 
	`putch¨
('\n');

328 
x
 = 0; x < 
èbÀ
->
n_cﬁumns
; x++) {

329 c⁄° *
ãxt
 = 
	`˚Œ_to_ãxt
(
	`èbÀ_˚Œ__
(
èbÀ
, 
y
, 
x
), 
°yÀ
);

330 i‡(
°yÀ
->
hódögs
) {

331 
	`¥ötf
("%-20s: ", 
èbÀ
->
cﬁumns
[
x
].
hódög
);

333 
	`puts
(
ãxt
);

336 
	}
}

339 
	$èbÀ_esˇ≥_html_ãxt__
(c⁄° *
s
, 
size_t
 
n
)

341 
size_t
 
i
;

343 
i
 = 0; i < 
n
; i++) {

344 
c
 = 
s
[
i
];

346 
c
) {

348 
	`Âuts
("&amp;", 
°dout
);

351 
	`Âuts
("&…;", 
°dout
);

354 
	`Âuts
("&gt;", 
°dout
);

357 
	`Âuts
("&quŸ;", 
°dout
);

360 
	`putch¨
(
c
);

364 
	}
}

367 
	$èbÀ_¥öt_html_˚Œ__
(c⁄° *
ñemít
, c⁄° *
c⁄ã¡
)

369 c⁄° *
p
;

371 
	`¥ötf
(" <%s>", 
ñemít
);

372 
p
 = 
c⁄ã¡
; *p; ) {

373 
uuid
 uuid;

375 i‡(
	`uuid_‰om_°rög_¥efix
(&
uuid
, 
p
)) {

376 
	`¥ötf
("<®hªf=\"#%.*s\">%.*s</a>", 
UUID_LEN
, 
p
, 8,Ö);

377 
p
 +
UUID_LEN
;

379 
	`èbÀ_esˇ≥_html_ãxt__
(
p
, 1);

380 
p
++;

383 
	`¥ötf
("</%s>\n", 
ñemít
);

384 
	}
}

387 
	$èbÀ_¥öt_html__
(c⁄° 
èbÀ
 *èbÀ, c⁄° 
èbÀ_°yÀ
 *
°yÀ
)

389 
size_t
 
x
, 
y
;

391 
	`èbÀ_¥öt_time°amp__
(
èbÀ
);

393 
	`Âuts
("<èbÀ b‹dî=1>\n", 
°dout
);

395 i‡(
èbÀ
->
ˇ±i⁄
) {

396 
	`èbÀ_¥öt_html_˚Œ__
("ˇ±i⁄", 
èbÀ
->
ˇ±i⁄
);

399 i‡(
°yÀ
->
hódögs
) {

400 
	`Âuts
(" <å>\n", 
°dout
);

401 
x
 = 0; x < 
èbÀ
->
n_cﬁumns
; x++) {

402 c⁄° 
cﬁumn
 *cﬁum¿&
èbÀ
->
cﬁumns
[
x
];

403 
	`èbÀ_¥öt_html_˚Œ__
("th", 
cﬁumn
->
hódög
);

405 
	`Âuts
(" </å>\n", 
°dout
);

408 
y
 = 0; y < 
èbÀ
->
n_rows
; y++) {

409 
	`Âuts
(" <å>\n", 
°dout
);

410 
x
 = 0; x < 
èbÀ
->
n_cﬁumns
; x++) {

411 c⁄° *
c⁄ã¡
;

413 
c⁄ã¡
 = 
	`˚Œ_to_ãxt
(
	`èbÀ_˚Œ__
(
èbÀ
, 
y
, 
x
), 
°yÀ
);

414 i‡(!
	`°rcmp
(
èbÀ
->
cﬁumns
[
x
].
hódög
, "_uuid")) {

415 
	`Âuts
(" <td><®«me=\"", 
°dout
);

416 
	`èbÀ_esˇ≥_html_ãxt__
(
c⁄ã¡
, 
	`°æí
(content));

417 
	`Âuts
("\">", 
°dout
);

418 
	`èbÀ_esˇ≥_html_ãxt__
(
c⁄ã¡
, 8);

419 
	`Âuts
("</a></td>\n", 
°dout
);

421 
	`èbÀ_¥öt_html_˚Œ__
("td", 
c⁄ã¡
);

424 
	`Âuts
(" </å>\n", 
°dout
);

427 
	`Âuts
("</èbÀ>\n", 
°dout
);

428 
	}
}

431 
	$èbÀ_¥öt_csv_˚Œ__
(c⁄° *
c⁄ã¡
)

433 c⁄° *
p
;

435 i‡(!
	`°Ωbrk
(
c⁄ã¡
, "\n\",")) {

436 
	`Âuts
(
c⁄ã¡
, 
°dout
);

438 
	`putch¨
('"');

439 
p
 = 
c⁄ã¡
; *p != '\0';Ö++) {

440 *
p
) {

442 
	`Âuts
("\"\"", 
°dout
);

445 
	`putch¨
(*
p
);

449 
	`putch¨
('"');

451 
	}
}

454 
	$èbÀ_¥öt_csv__
(c⁄° 
èbÀ
 *èbÀ, c⁄° 
èbÀ_°yÀ
 *
°yÀ
)

456 
n
 = 0;

457 
size_t
 
x
, 
y
;

459 i‡(
n
++ > 0) {

460 
	`putch¨
('\n');

463 
	`èbÀ_¥öt_time°amp__
(
èbÀ
);

465 i‡(
èbÀ
->
ˇ±i⁄
) {

466 
	`puts
(
èbÀ
->
ˇ±i⁄
);

469 i‡(
°yÀ
->
hódögs
) {

470 
x
 = 0; x < 
èbÀ
->
n_cﬁumns
; x++) {

471 c⁄° 
cﬁumn
 *cﬁum¿&
èbÀ
->
cﬁumns
[
x
];

472 i‡(
x
) {

473 
	`putch¨
(',');

475 
	`èbÀ_¥öt_csv_˚Œ__
(
cﬁumn
->
hódög
);

477 
	`putch¨
('\n');

480 
y
 = 0; y < 
èbÀ
->
n_rows
; y++) {

481 
x
 = 0; x < 
èbÀ
->
n_cﬁumns
; x++) {

482 i‡(
x
) {

483 
	`putch¨
(',');

485 
	`èbÀ_¥öt_csv_˚Œ__
(
	`˚Œ_to_ãxt
(
	`èbÀ_˚Œ__
(
èbÀ
, 
y
, 
x
),

486 
°yÀ
));

488 
	`putch¨
('\n');

490 
	}
}

493 
	$èbÀ_¥öt_js⁄__
(c⁄° 
èbÀ
 *èbÀ, c⁄° 
èbÀ_°yÀ
 *
°yÀ
)

495 
js⁄
 *js⁄, *
hódögs
, *
d©a
;

496 
size_t
 
x
, 
y
;

497 *
s
;

499 
js⁄
 = 
	`js⁄_obje˘_¸óã
();

500 i‡(
èbÀ
->
ˇ±i⁄
) {

501 
	`js⁄_obje˘_put_°rög
(
js⁄
, "ˇ±i⁄", 
èbÀ
->
ˇ±i⁄
);

503 i‡(
èbÀ
->
time°amp
) {

504 
s
[32];

506 
	`èbÀ_f‹m©_time°amp__
(
s
,  s);

507 
	`js⁄_obje˘_put_°rög
(
js⁄
, "time", 
s
);

510 
hódögs
 = 
	`js⁄_¨øy_¸óã_em±y
();

511 
x
 = 0; x < 
èbÀ
->
n_cﬁumns
; x++) {

512 c⁄° 
cﬁumn
 *cﬁum¿&
èbÀ
->
cﬁumns
[
x
];

513 
	`js⁄_¨øy_add
(
hódögs
, 
	`js⁄_°rög_¸óã
(
cﬁumn
->
hódög
));

515 
	`js⁄_obje˘_put
(
js⁄
, "hódögs", 
hódögs
);

517 
d©a
 = 
	`js⁄_¨øy_¸óã_em±y
();

518 
y
 = 0; y < 
èbÀ
->
n_rows
; y++) {

519 
js⁄
 *
row
 = 
	`js⁄_¨øy_¸óã_em±y
();

520 
x
 = 0; x < 
èbÀ
->
n_cﬁumns
; x++) {

521 c⁄° 
˚Œ
 *˚Œ = 
	`èbÀ_˚Œ__
(
èbÀ
, 
y
, 
x
);

522 i‡(
˚Œ
->
ãxt
) {

523 
	`js⁄_¨øy_add
(
row
, 
	`js⁄_°rög_¸óã
(
˚Œ
->
ãxt
));

524 } i‡(
˚Œ
->
js⁄
) {

525 
	`js⁄_¨øy_add
(
row
, 
	`js⁄_˛⁄e
(
˚Œ
->
js⁄
));

527 
	`js⁄_¨øy_add
(
row
, 
	`js⁄_nuŒ_¸óã
());

530 
	`js⁄_¨øy_add
(
d©a
, 
row
);

532 
	`js⁄_obje˘_put
(
js⁄
, "d©a", 
d©a
);

534 
s
 = 
	`js⁄_to_°rög
(
js⁄
, 
°yÀ
->
js⁄_Êags
);

535 
	`js⁄_de°roy
(
js⁄
);

536 
	`puts
(
s
);

537 
	`‰ì
(
s
);

538 
	}
}

543 
	$èbÀ_∑r£_f‹m©
(
èbÀ_°yÀ
 *
°yÀ
, c⁄° *
f‹m©
)

545 i‡(!
	`°rcmp
(
f‹m©
, "table")) {

546 
°yÀ
->
f‹m©
 = 
TF_TABLE
;

547 } i‡(!
	`°rcmp
(
f‹m©
, "list")) {

548 
°yÀ
->
f‹m©
 = 
TF_LIST
;

549 } i‡(!
	`°rcmp
(
f‹m©
, "html")) {

550 
°yÀ
->
f‹m©
 = 
TF_HTML
;

551 } i‡(!
	`°rcmp
(
f‹m©
, "csv")) {

552 
°yÀ
->
f‹m©
 = 
TF_CSV
;

553 } i‡(!
	`°rcmp
(
f‹m©
, "json")) {

554 
°yÀ
->
f‹m©
 = 
TF_JSON
;

556 
	`ovs_Áèl
(0, "unknow¿ouçuàf‹m© \"%s\"", 
f‹m©
);

558 
	}
}

563 
	$èbÀ_∑r£_˚Œ_f‹m©
(
èbÀ_°yÀ
 *
°yÀ
, c⁄° *
f‹m©
)

565 i‡(!
	`°rcmp
(
f‹m©
, "string")) {

566 
°yÀ
->
˚Œ_f‹m©
 = 
CF_STRING
;

567 } i‡(!
	`°rcmp
(
f‹m©
, "bare")) {

568 
°yÀ
->
˚Œ_f‹m©
 = 
CF_BARE
;

569 } i‡(!
	`°rcmp
(
f‹m©
, "json")) {

570 
°yÀ
->
˚Œ_f‹m©
 = 
CF_JSON
;

572 
	`ovs_Áèl
(0, "unknow¿d©®f‹m© \"%s\"", 
f‹m©
);

574 
	}
}

578 
	$èbÀ_¥öt
(c⁄° 
èbÀ
 *èbÀ, c⁄° 
èbÀ_°yÀ
 *
°yÀ
)

580 
°yÀ
->
f‹m©
) {

581 
TF_TABLE
:

582 
	`èbÀ_¥öt_èbÀ__
(
èbÀ
, 
°yÀ
);

585 
TF_LIST
:

586 
	`èbÀ_¥öt_li°__
(
èbÀ
, 
°yÀ
);

589 
TF_HTML
:

590 
	`èbÀ_¥öt_html__
(
èbÀ
, 
°yÀ
);

593 
TF_CSV
:

594 
	`èbÀ_¥öt_csv__
(
èbÀ
, 
°yÀ
);

597 
TF_JSON
:

598 
	`èbÀ_¥öt_js⁄__
(
èbÀ
, 
°yÀ
);

601 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/table.h

17 #i‚de‡
TABLE_H


18 
	#TABLE_H
 1

	)

20 
	~<°dboﬁ.h
>

21 
	~<°ddef.h
>

22 
	~"compûî.h
"

24 
	gèbÀ_°yÀ
;

28 
	sèbÀ
 {

29 
˚Œ
 *
	m˚Œs
;

30 
cﬁumn
 *
	mcﬁumns
;

31 
size_t
 
	mn_cﬁumns
, 
	mÆloˇãd_cﬁumns
;

32 
size_t
 
	mn_rows
, 
	mÆloˇãd_rows
;

33 
size_t
 
	mcuºít_cﬁumn
;

34 *
	mˇ±i⁄
;

35 
boﬁ
 
	mtime°amp
;

38 
èbÀ_öô
(
èbÀ
 *);

39 
èbÀ_de°roy
(
èbÀ
 *);

40 
èbÀ_£t_ˇ±i⁄
(
èbÀ
 *, *
ˇ±i⁄
);

41 
èbÀ_£t_time°amp
(
èbÀ
 *, 
boﬁ
 
time°amp
);

43 
	$èbÀ_add_cﬁumn
(
èbÀ
 *, c⁄° *
hódög
, ...)

44 
	`PRINTF_FORMAT
(2, 3);

45 
	`èbÀ_add_row
(
èbÀ
 *);

49 
	s˚Œ
 {

51 *
ãxt
;

54 
js⁄
 *json;

55 c⁄° 
ovsdb_ty≥
 *
ty≥
;

58 
˚Œ
 *
	`èbÀ_add_˚Œ
(
èbÀ
 *);

62 
	eèbÀ_f‹m©
 {

63 
TF_TABLE
,

64 
TF_LIST
,

65 
TF_HTML
,

66 
TF_CSV
,

67 
TF_JSON


70 
	e˚Œ_f‹m©
 {

71 
CF_STRING
,

72 
CF_BARE
,

73 
CF_JSON


76 
	sèbÀ_°yÀ
 {

77 
èbÀ_f‹m©
 
f‹m©
;

78 
˚Œ_f‹m©
 cell_format;

79 
boﬁ
 
hódögs
;

80 
js⁄_Êags
;

83 
	#TABLE_STYLE_DEFAULT
 { 
TF_TABLE
, 
CF_STRING
, 
åue
, 
JSSF_SORT
 
	}

	)
}

85 
	#TABLE_OPTION_ENUMS
 \

86 
OPT_NO_HEADINGS
, \

87 
OPT_PRETTY
, \

88 
OPT_BARE


	)

90 
	#TABLE_LONG_OPTIONS
 \

91 {"f‹m©", 
ªquúed_¨gumít
, 
NULL
, 'f'}, \

92 {"d©a", 
ªquúed_¨gumít
, 
NULL
, 'd'}, \

93 {"no-hódögs", 
no_¨gumít
, 
NULL
, 
OPT_NO_HEADINGS
}, \

94 {"¥ëty", 
no_¨gumít
, 
NULL
, 
OPT_PRETTY
}, \

95 {"b¨e", 
no_¨gumít
, 
NULL
, 
OPT_BARE
}

	)

97 
	#TABLE_OPTION_HANDLERS
(
STYLE
) \

99 
	`èbÀ_∑r£_f‹m©
(
STYLE
, 
›èrg
); \

103 
	`èbÀ_∑r£_˚Œ_f‹m©
(
STYLE
, 
›èrg
); \

106 
OPT_NO_HEADINGS
: \

107 (
STYLE
)->
hódögs
 = 
Ál£
; \

110 
OPT_PRETTY
: \

111 (
STYLE
)->
js⁄_Êags
 |
JSSF_PRETTY
; \

114 
OPT_BARE
: \

115 (
STYLE
)->
f‹m©
 = 
TF_LIST
; \

116 (
STYLE
)->
˚Œ_f‹m©
 = 
CF_BARE
; \

117 (
STYLE
)->
hódögs
 = 
Ál£
; \

118 ;

	)

120 
èbÀ_∑r£_f‹m©
(
èbÀ_°yÀ
 *, c⁄° *
f‹m©
);

121 
èbÀ_∑r£_˚Œ_f‹m©
(
èbÀ_°yÀ
 *, c⁄° *
f‹m©
);

123 
èbÀ_¥öt
(c⁄° 
èbÀ
 *, c⁄° 
èbÀ_°yÀ
 *);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/tag.c

17 
	~<c⁄fig.h
>

18 
	~"èg.h
"

19 
	~<limôs.h
>

20 
	~"øndom.h
"

21 
	~"ty≥-¥›s.h
"

22 
	~"utû.h
"

24 
	#N_TAG_BITS
 (
CHAR_BIT
 * (
èg_ty≥
))

	)

25 
BUILD_ASSERT_DECL
(
IS_POW2
(
N_TAG_BITS
));

27 
	#LOG2_N_TAG_BITS
 (
N_TAG_BITS
 =32 ? 5 : N_TAG_BITS =64 ? 6 : 0)

	)

28 
BUILD_ASSERT_DECL
(
LOG2_N_TAG_BITS
 > 0);

31 
èg_ty≥


32 
	$èg_¸óã_øndom
()

34 
x
, 
y
;

36 
uöt16_t
 
r
 = 
	`øndom_uöt16
();

37 
x
 = 
r
 & (
N_TAG_BITS
 - 1);

38 
y
 = 
r
 >> (16 - 
LOG2_N_TAG_BITS
);

39 } 
x
 =
y
);

40  (1u << 
x
Ë| (1u << 
y
);

41 
	}
}

48 
èg_ty≥


49 
	$èg_¸óã_dëîmöi°ic
(
uöt32_t
 
£ed
)

51 
x
 = 
£ed
 & (
N_TAG_BITS
 - 1);

52 
y
 = (
£ed
 >> 
LOG2_N_TAG_BITS
Ë% (
N_TAG_BITS
 - 1);

53 
y
 +y >
x
;

54  (1u << 
x
Ë| (1u << 
y
);

55 
	}
}

59 
	$èg_£t_öô
(
èg_£t
 *
£t
)

61 
	`mem£t
(
£t
, 0,  *set);

62 
	}
}

64 
boﬁ


65 
	$èg_is_w‹th_addög
(c⁄° 
èg_£t
 *
£t
, 
èg_ty≥
 
èg
)

67 i‡(!
èg
) {

69  
Ál£
;

70 } i‡((
£t
->
tŸÆ
 & 
èg
) !=Åag) {

72  
åue
;

78 
i
;

80 
i
 = 0; i < 
TAG_SET_SIZE
; i++) {

81 i‡((
£t
->
ègs
[
i
] & 
èg
) ==Åag) {

82  
Ál£
;

85  
åue
;

87 
	}
}

91 
	$èg_£t_add
(
èg_£t
 *
£t
, 
èg_ty≥
 
èg
)

93 i‡(
	`èg_is_w‹th_addög
(
£t
, 
èg
)) {

98 
èg_ty≥
 *
t
 = &
£t
->
ègs
[£t->
n
++ % 
TAG_SET_SIZE
];

99 *
t
 |
èg
;

100 i‡(*
t
 =
	`TYPE_MAXIMUM
(
èg_ty≥
)) {

101 
£t
->
ègs
[0] = *
t
;

104 
£t
->
tŸÆ
 |
èg
;

106 
	}
}

110 
	$èg_£t_uni⁄
(
èg_£t
 *
£t
, c⁄° èg_£à*
Ÿhî
)

112 
size_t
 
i
;

114 
i
 = 0; i < 
TAG_SET_SIZE
; i++) {

115 
	`èg_£t_add
(
£t
, 
Ÿhî
->
ègs
[
i
]);

117 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/tag.h

17 #i‚de‡
TAG_H


18 
	#TAG_H
 1

	)

20 
	~<as£π.h
>

21 
	~<°dboﬁ.h
>

22 
	~<°döt.h
>

23 
	~"utû.h
"

70 
uöt32_t
 
	tèg_ty≥
;

72 
èg_ty≥
 
èg_¸óã_øndom
();

73 
èg_ty≥
 
èg_¸óã_dëîmöi°ic
(
uöt32_t
 
£ed
);

74 
ölöe
 
boﬁ
 
èg_öãr£˘s
(
èg_ty≥
,Åag_type);

75 
ölöe
 
boﬁ
 
èg_is_vÆid
(
èg_ty≥
);

79 
ölöe
 
boﬁ


80 
	$èg_öãr£˘s
(
èg_ty≥
 
a
,Åag_ty≥ 
b
)

82 
èg_ty≥
 
x
 = 
a
 & 
b
;

83  (
x
 & (x - 1)) != 0;

84 
	}
}

88 
ölöe
 
boﬁ


89 
	$èg_is_vÆid
(
èg_ty≥
 
èg
)

91 
èg_ty≥
 
x
 = 
èg
 & (tag - 1);

92 
èg_ty≥
 
y
 = 
x
 & (x - 1);

93  
x
 && !
y
;

94 
	}
}

101 
	#TAG_SET_SIZE
 4

	)

102 
	sèg_£t
 {

103 
èg_ty≥
 
	mtŸÆ
;

104 
èg_ty≥
 
	mègs
[
TAG_SET_SIZE
];

105 
	mn
;

108 
èg_£t_öô
(
èg_£t
 *);

109 
èg_£t_add
(
èg_£t
 *, 
èg_ty≥
);

110 
èg_£t_uni⁄
(
èg_£t
 *, const tag_set *);

111 
ölöe
 
boﬁ
 
èg_£t_is_em±y
(c⁄° 
èg_£t
 *);

112 
ölöe
 
boﬁ
 
èg_£t_öãr£˘s
(c⁄° 
èg_£t
 *, 
èg_ty≥
);

116 
ölöe
 
boﬁ


117 
	$èg_£t_is_em±y
(c⁄° 
èg_£t
 *
£t
)

119  !
£t
->
n
;

120 
	}
}

124 
ölöe
 
boﬁ


125 
	$èg_£t_öãr£˘s
(c⁄° 
èg_£t
 *
£t
, 
èg_ty≥
 
ègs
)

127 
	`BUILD_ASSERT_DECL
(
TAG_SET_SIZE
 == 4);

128  (
	`èg_öãr£˘s
(
£t
->
tŸÆ
, 
ègs
)

129 && (
	`èg_öãr£˘s
(
£t
->
ègs
[0],Åags)

130 || 
	`èg_öãr£˘s
(
£t
->
ègs
[1],Åags)

131 || 
	`èg_öãr£˘s
(
£t
->
ègs
[2],Åags)

132 || 
	`èg_öãr£˘s
(
£t
->
ègs
[3],Åags)));

133 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/timer.c

17 
	~<c⁄fig.h
>

19 
	~"timî.h
"

21 
	~"pﬁl-lo›.h
"

22 
	~"timevÆ.h
"

26 
	$timî_m£cs_u¡û_expúed
(c⁄° 
timî
 *timer)

28 
timî
->
t
) {

29 
LLONG_MAX
:  LLONG_MAX;

30 
LLONG_MIN
:  0;

31 :  
timî
->
t
 - 
	`time_m£c
();

33 
	}
}

37 (
	gtimî_waô
)(c⁄° 
timî
 *
	gtimî
, c⁄° *
	gwhîe
)

39 i‡(
	gtimî
->
	gt
 < 
	gLLONG_MAX
) {

40 (
	gpﬁl_timî_waô_u¡û
)(
	gtimî
->
	gt
, 
	gwhîe
);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/timer.h

17 #i‚de‡
TIMER_H


18 
	#TIMER_H
 1

	)

20 
	~<°dboﬁ.h
>

22 
	~"timevÆ.h
"

23 
	~"utû.h
"

25 
	stimî
 {

26 
	mt
;

29 
timî_m£cs_u¡û_expúed
(c⁄° 
timî
 *);

30 
timî_waô
(c⁄° 
timî
 *, c⁄° *
whîe
);

31 
	#timî_waô
(
timî
Ë
	`timî_waô
—imî, 
SOURCE_LOCATOR
)

	)

36 
ölöe
 

37 
	$timî_£t_duøti⁄
(
timî
 *timî, 
duøti⁄
)

39 
timî
->
t
 = 
	`time_m£c
(Ë+ 
duøti⁄
;

40 
	}
}

45 
ölöe
 

46 
	$timî_£t_öföôe
(
timî
 *timer)

48 
timî
->
t
 = 
LLONG_MAX
;

49 
	}
}

54 
ölöe
 

55 
	$timî_£t_expúed
(
timî
 *timer)

57 
timî
->
t
 = 
LLONG_MIN
;

58 
	}
}

61 
ölöe
 
boﬁ


62 
	$timî_expúed
(c⁄° 
timî
 *timer)

64  
	`time_m£c
(Ë>
timî
->
t
;

65 
	}
}

68 
ölöe
 
boﬁ


69 
	$timî_is_öföôe
(c⁄° 
timî
 *timer)

71  
timî
->
t
 =
LLONG_MAX
;

72 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/timeval.c

17 
	~<c⁄fig.h
>

18 
	~"timevÆ.h
"

19 
	~<as£π.h
>

20 
	~<î∫o.h
>

21 #i‡
HAVE_EXECINFO_H


22 
	~<execöfo.h
>

24 
	~<pﬁl.h
>

25 
	~<sig«l.h
>

26 
	~<°dlib.h
>

27 
	~<°rög.h
>

28 
	~<sys/time.h
>

29 
	~<sys/ªsour˚.h
>

30 
	~<uni°d.h
>

31 
	~"covîage.h
"

32 
	~"dummy.h
"

33 
	~"dy«mic-°rög.h
"

34 
	~"Áèl-sig«l.h
"

35 
	~"sig«ls.h
"

36 
	~"unix˘l.h
"

37 
	~"utû.h
"

38 
	~"vlog.h
"

40 #i‚de‡
HAVE_EXECINFO_H


41 
	#HAVE_EXECINFO_H
 0

	)

44 
VLOG_DEFINE_THIS_MODULE
(
timevÆ
);

49 
˛ockid_t
 
	gm⁄Ÿ⁄ic_˛ock
;

55 vﬁ©ûê
sig_©omic_t
 
	gwÆl_tick
 = 
åue
;

56 vﬁ©ûê
sig_©omic_t
 
	gm⁄Ÿ⁄ic_tick
 = 
åue
;

59 
time•ec
 
	gwÆl_time
;

60 
time•ec
 
	gm⁄Ÿ⁄ic_time
;

63 
	gboŸ_time
;

66 
time•ec
 
	gw¨p_off£t
;

67 
boﬁ
 
	gtime_°›≥d
;

70 
	gdódlöe
 = 
LLONG_MAX
;

72 
	såa˚
 {

73 *
	mbackåa˚
[32];

74 
size_t
 
	mn_‰ames
;

77 
	#MAX_TRACES
 50

	)

78 
unix˘l_c⁄n
 *
	gbackåa˚_c⁄n
 = 
NULL
;

79 
åa˚
 *
	gåa˚s
 = 
NULL
;

80 
size_t
 
	gn_åa˚s
 = 0;

82 
£t_up_timî
();

83 
£t_up_sig«l
(
Êags
);

84 
sigÆrm_h™dÀr
();

85 
ª‰esh_wÆl_if_ticked
();

86 
ª‰esh_m⁄Ÿ⁄ic_if_ticked
();

87 
block_sigÆrm
(
sig£t_t
 *);

88 
unblock_sigÆrm
(c⁄° 
sig£t_t
 *);

89 
log_pﬁl_öãrvÆ
(
œ°_wakeup
);

90 
rußge
 *
gë_ª˚¡_rußge
();

91 
ª‰esh_rußge
();

92 
time•ec_add
(
time•ec
 *
sum
,

93 c⁄° 
time•ec
 *
a
, c⁄° time•e¯*
b
);

94 
åa˚_run
();

95 
unix˘l_cb_func
 
	gbackåa˚_cb
;

99 
	$time_öô
()

101 
boﬁ
 
öôed
;

106 
	`åa˚_run
();

108 i‡(
öôed
) {

111 
öôed
 = 
åue
;

113 i‡(
HAVE_EXECINFO_H
 && 
CACHE_TIME
) {

114 
	`unix˘l_comm™d_ªgi°î
("backåa˚", "", 0, 0, 
backåa˚_cb
, 
NULL
);

117 
	`covîage_öô
();

119 i‡(!
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
m⁄Ÿ⁄ic_time
)) {

120 
m⁄Ÿ⁄ic_˛ock
 = 
CLOCK_MONOTONIC
;

122 
m⁄Ÿ⁄ic_˛ock
 = 
CLOCK_REALTIME
;

123 
	`VLOG_DBG
("monotonicÅimerÇotávailable");

126 
	`£t_up_sig«l
(
SA_RESTART
);

127 
	`£t_up_timî
();

129 
boŸ_time
 = 
	`time_m£c
();

130 
	}
}

133 
	$£t_up_sig«l
(
Êags
)

135 
siga˘i⁄
 
ß
;

137 
	`mem£t
(&
ß
, 0,  sa);

138 
ß
.
ß_h™dÀr
 = 
sigÆrm_h™dÀr
;

139 
	`sigem±y£t
(&
ß
.
ß_mask
);

140 
ß
.
ß_Êags
 = 
Êags
;

141 
	`xsiga˘i⁄
(
SIGALRM
, &
ß
, 
NULL
);

142 
	}
}

157 
	$time_dißbÀ_ª°¨t
()

159 
	`time_öô
();

160 
	`£t_up_sig«l
(0);

161 
	}
}

167 
	$time_íabÀ_ª°¨t
()

169 
	`time_öô
();

170 
	`£t_up_sig«l
(
SA_RESTART
);

171 
	}
}

174 
	$£t_up_timî
()

176 
timî_t
 
timî_id
;

177 
ôimî•ec
 
ôimî
;

179 i‡(!
CACHE_TIME
) {

183 i‡(
	`timî_¸óã
(
m⁄Ÿ⁄ic_˛ock
, 
NULL
, &
timî_id
)) {

184 
	`VLOG_FATAL
("timî_¸óã faûed (%s)", 
	`°ªº‹
(
î∫o
));

187 
ôimî
.
ô_öãrvÆ
.
tv_£c
 = 0;

188 
ôimî
.
ô_öãrvÆ
.
tv_n£c
 = 
TIME_UPDATE_INTERVAL
 * 1000 * 1000;

189 
ôimî
.
ô_vÆue
 = itimî.
ô_öãrvÆ
;

191 i‡(
	`timî_£âime
(
timî_id
, 0, &
ôimî
, 
NULL
)) {

192 
	`VLOG_FATAL
("timî_£âimêÁûed (%s)", 
	`°ªº‹
(
î∫o
));

194 
	}
}

202 
	$time_po°f‹k
()

204 
	`time_öô
();

205 
	`£t_up_timî
();

206 
	}
}

209 
	$ª‰esh_wÆl
()

211 
	`time_öô
();

212 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
wÆl_time
);

213 
wÆl_tick
 = 
Ál£
;

214 
	}
}

217 
	$ª‰esh_m⁄Ÿ⁄ic
()

219 
	`time_öô
();

221 i‡(!
time_°›≥d
) {

222 i‡(
m⁄Ÿ⁄ic_˛ock
 =
CLOCK_MONOTONIC
) {

223 
	`˛ock_gëtime
(
m⁄Ÿ⁄ic_˛ock
, &
m⁄Ÿ⁄ic_time
);

225 
	`ª‰esh_wÆl_if_ticked
();

226 
m⁄Ÿ⁄ic_time
 = 
wÆl_time
;

228 
	`time•ec_add
(&
m⁄Ÿ⁄ic_time
, &m⁄Ÿ⁄ic_time, &
w¨p_off£t
);

230 
m⁄Ÿ⁄ic_tick
 = 
Ál£
;

232 
	}
}

240 
	$time_ª‰esh
()

242 
wÆl_tick
 = 
m⁄Ÿ⁄ic_tick
 = 
åue
;

243 
	}
}

246 
time_t


247 
	$time_now
()

249 
	`ª‰esh_m⁄Ÿ⁄ic_if_ticked
();

250  
m⁄Ÿ⁄ic_time
.
tv_£c
;

251 
	}
}

254 
time_t


255 
	$time_wÆl
()

257 
	`ª‰esh_wÆl_if_ticked
();

258  
wÆl_time
.
tv_£c
;

259 
	}
}

263 
	$time_m£c
()

265 
	`ª‰esh_m⁄Ÿ⁄ic_if_ticked
();

266  
	`time•ec_to_m£c
(&
m⁄Ÿ⁄ic_time
);

267 
	}
}

271 
	$time_wÆl_m£c
()

273 
	`ª‰esh_wÆl_if_ticked
();

274  
	`time•ec_to_m£c
(&
wÆl_time
);

275 
	}
}

280 
	$time_time•ec
(
time•ec
 *
ts
)

282 
	`ª‰esh_m⁄Ÿ⁄ic_if_ticked
();

283 *
ts
 = 
m⁄Ÿ⁄ic_time
;

284 
	}
}

289 
	$time_wÆl_time•ec
(
time•ec
 *
ts
)

291 
	`ª‰esh_wÆl_if_ticked
();

292 *
ts
 = 
wÆl_time
;

293 
	}
}

298 
	$time_Æ¨m
(
£cs
)

300 
now
;

301 
m£cs
;

303 
sig£t_t
 
ﬁdsigs
;

305 
	`time_öô
();

306 
	`time_ª‰esh
();

308 
now
 = 
	`time_m£c
();

309 
m£cs
 = 
£cs
 * 1000;

311 
	`block_sigÆrm
(&
ﬁdsigs
);

312 
dódlöe
 = 
now
 < 
LLONG_MAX
 - 
m£cs
 ?Çow + msecs : LLONG_MAX;

313 
	`unblock_sigÆrm
(&
ﬁdsigs
);

314 
	}
}

331 
	$time_pﬁl
(
pﬁlfd
 *
pﬁlfds
, 
n_pﬁlfds
, 
timeout_whí
,

332 *
ñ≠£d
)

334 
œ°_wakeup
 = 0;

335 
°¨t
;

336 
sig£t_t
 
ﬁdsigs
;

337 
boﬁ
 
blocked
;

338 
ªtvÆ
;

340 
	`time_ª‰esh
();

341 i‡(
œ°_wakeup
) {

342 
	`log_pﬁl_öãrvÆ
(
œ°_wakeup
);

344 
	`covîage_˛ór
();

345 
°¨t
 = 
	`time_m£c
();

346 
blocked
 = 
Ál£
;

348 
timeout_whí
 = 
	`MIN
—imeout_whí, 
dódlöe
);

351 
now
 = 
	`time_m£c
();

352 
time_À·
;

354 i‡(
now
 >
timeout_whí
) {

355 
time_À·
 = 0;

356 } i‡((Ë
timeout_whí
 - 
now
 > 
INT_MAX
) {

357 
time_À·
 = 
INT_MAX
;

359 
time_À·
 = 
timeout_whí
 - 
now
;

362 
ªtvÆ
 = 
	`pﬁl
(
pﬁlfds
, 
n_pﬁlfds
, 
time_À·
);

363 i‡(
ªtvÆ
 < 0) {

364 
ªtvÆ
 = -
î∫o
;

367 
	`time_ª‰esh
();

368 i‡(
dódlöe
 <
	`time_m£c
()) {

369 
	`Áèl_sig«l_h™dÀr
(
SIGALRM
);

370 i‡(
ªtvÆ
 < 0) {

371 
ªtvÆ
 = 0;

376 i‡(
ªtvÆ
 !-
EINTR
) {

380 i‡(!
blocked
 && 
CACHE_TIME
 && !
backåa˚_c⁄n
) {

381 
	`block_sigÆrm
(&
ﬁdsigs
);

382 
blocked
 = 
åue
;

385 i‡(
blocked
) {

386 
	`unblock_sigÆrm
(&
ﬁdsigs
);

388 
œ°_wakeup
 = 
	`time_m£c
();

389 
	`ª‰esh_rußge
();

390 *
ñ≠£d
 = 
œ°_wakeup
 - 
°¨t
;

391  
ªtvÆ
;

392 
	}
}

395 
	$sigÆrm_h™dÀr
(
sig_ƒ
 
OVS_UNUSED
)

397 
wÆl_tick
 = 
åue
;

398 
m⁄Ÿ⁄ic_tick
 = 
åue
;

400 #i‡
HAVE_EXECINFO_H


401 i‡(
backåa˚_c⁄n
 && 
n_åa˚s
 < 
MAX_TRACES
) {

402 
åa˚
 *åa˚ = &
åa˚s
[
n_åa˚s
++];

403 
åa˚
->
n_‰ames
 = 
	`backåa˚
—ø˚->
backåa˚
,

404 
	`ARRAY_SIZE
(
åa˚
->
backåa˚
));

407 
	}
}

410 
	$ª‰esh_wÆl_if_ticked
()

412 i‡(!
CACHE_TIME
 || 
wÆl_tick
) {

413 
	`ª‰esh_wÆl
();

415 
	}
}

418 
	$ª‰esh_m⁄Ÿ⁄ic_if_ticked
()

420 i‡(!
CACHE_TIME
 || 
m⁄Ÿ⁄ic_tick
) {

421 
	`ª‰esh_m⁄Ÿ⁄ic
();

423 
	}
}

426 
	$block_sigÆrm
(
sig£t_t
 *
ﬁdsigs
)

428 
sig£t_t
 
sigÆrm
;

429 
	`sigem±y£t
(&
sigÆrm
);

430 
	`sigadd£t
(&
sigÆrm
, 
SIGALRM
);

431 
	`xsig¥ocmask
(
SIG_BLOCK
, &
sigÆrm
, 
ﬁdsigs
);

432 
	}
}

435 
	$unblock_sigÆrm
(c⁄° 
sig£t_t
 *
ﬁdsigs
)

437 
	`xsig¥ocmask
(
SIG_SETMASK
, 
ﬁdsigs
, 
NULL
);

438 
	}
}

441 
	$time•ec_to_m£c
(c⁄° 
time•ec
 *
ts
)

443  (Ë
ts
->
tv_£c
 * 1000 +Ås->
tv_n£c
 / (1000 * 1000);

444 
	}
}

447 
	$timevÆ_to_m£c
(c⁄° 
timevÆ
 *
tv
)

449  (Ë
tv
->
tv_£c
 * 1000 +Åv->
tv_u£c
 / 1000;

450 
	}
}

455 
	$time_boŸ_m£c
()

457 
	`time_öô
();

458  
boŸ_time
;

459 
	}
}

462 
	$xgëtimeofday
(
timevÆ
 *
tv
)

464 i‡(
	`gëtimeofday
(
tv
, 
NULL
) == -1) {

465 
	`VLOG_FATAL
("gëtimeofday faûed (%s)", 
	`°ªº‹
(
î∫o
));

467 
	}
}

470 
	$timevÆ_diff_m£c
(c⁄° 
timevÆ
 *
a
, c⁄° timevÆ *
b
)

472  
	`timevÆ_to_m£c
(
a
Ë-ÅimevÆ_to_m£c(
b
);

473 
	}
}

476 
	$time•ec_add
(
time•ec
 *
sum
,

477 c⁄° 
time•ec
 *
a
,

478 c⁄° 
time•ec
 *
b
)

480 
time•ec
 
tmp
;

482 
tmp
.
tv_£c
 = 
a
->tv_£¯+ 
b
->tv_sec;

483 
tmp
.
tv_n£c
 = 
a
->tv_n£¯+ 
b
->tv_nsec;

484 i‡(
tmp
.
tv_n£c
 >= 1000 * 1000 * 1000) {

485 
tmp
.
tv_n£c
 -= 1000 * 1000 * 1000;

486 
tmp
.
tv_£c
++;

489 *
sum
 = 
tmp
;

490 
	}
}

493 
	$log_pﬁl_öãrvÆ
(
œ°_wakeup
)

495 
öãrvÆ
 = 
	`time_m£c
(Ë- 
œ°_wakeup
;

497 i‡(
öãrvÆ
 >= 1000) {

498 c⁄° 
rußge
 *
œ°_rußge
 = 
	`gë_ª˚¡_rußge
();

499 
rußge
Ñusage;

501 
	`gërußge
(
RUSAGE_SELF
, &
rußge
);

502 
	`VLOG_WARN
("UnreasonablyÜong %lldmsÖoll interval"

504 
öãrvÆ
,

505 
	`timevÆ_diff_m£c
(&
rußge
.
ru_utime
,

506 &
œ°_rußge
->
ru_utime
),

507 
	`timevÆ_diff_m£c
(&
rußge
.
ru_°ime
,

508 &
œ°_rußge
->
ru_°ime
));

509 i‡(
rußge
.
ru_möÊt
 > 
œ°_rußge
->ru_minflt

510 || 
rußge
.
ru_majÊt
 > 
œ°_rußge
->ru_majflt) {

511 
	`VLOG_WARN
("faults: %ld minor, %ld major",

512 
rußge
.
ru_möÊt
 - 
œ°_rußge
->ru_minflt,

513 
rußge
.
ru_majÊt
 - 
œ°_rußge
->ru_majflt);

515 i‡(
rußge
.
ru_öblock
 > 
œ°_rußge
->ru_inblock

516 || 
rußge
.
ru_oublock
 > 
œ°_rußge
->ru_oublock) {

517 
	`VLOG_WARN
("disk: %ldÑeads, %ld writes",

518 
rußge
.
ru_öblock
 - 
œ°_rußge
->ru_inblock,

519 
rußge
.
ru_oublock
 - 
œ°_rußge
->ru_oublock);

521 i‡(
rußge
.
ru_nvcsw
 > 
œ°_rußge
->ru_nvcsw

522 || 
rußge
.
ru_nivcsw
 > 
œ°_rußge
->ru_nivcsw) {

523 
	`VLOG_WARN
("context switches: %ld voluntary, %ld involuntary",

524 
rußge
.
ru_nvcsw
 - 
œ°_rußge
->ru_nvcsw,

525 
rußge
.
ru_nivcsw
 - 
œ°_rußge
->ru_nivcsw);

527 
	`covîage_log
();

529 
	}
}

533 
	s˝u_ußge
 {

534 
	mwhí
;

535 
	m˝u
;

538 
rußge
 
	gª˚¡_rußge
;

539 
˝u_ußge
 
	gﬁdî
 = { 
LLONG_MIN
, 0 };

540 
˝u_ußge
 
	g√wî
 = { 
LLONG_MIN
, 0 };

541 
	g˝u_ußge
 = -1;

543 
rußge
 *

544 
	$gë_ª˚¡_rußge
()

546  &
ª˚¡_rußge
;

547 
	}
}

550 
	$ª‰esh_rußge
()

552 
now
;

554 
now
 = 
	`time_m£c
();

555 
	`gërußge
(
RUSAGE_SELF
, &
ª˚¡_rußge
);

557 i‡(
now
 >
√wî
.
whí
 + 3 * 1000) {

558 
ﬁdî
 = 
√wî
;

559 
√wî
.
whí
 = 
now
;

560 
√wî
.
˝u
 = (
	`timevÆ_to_m£c
(&
ª˚¡_rußge
.
ru_utime
) +

561 
	`timevÆ_to_m£c
(&
ª˚¡_rußge
.
ru_°ime
));

563 i‡(
ﬁdî
.
whí
 !
LLONG_MIN
 && 
√wî
.
˝u
 > older.cpu) {

564 
dividíd
 = 
√wî
.
˝u
 - 
ﬁdî
.cpu;

565 
divis‹
 = (
√wî
.
whí
 - 
ﬁdî
.when) / 100;

566 
˝u_ußge
 = 
divis‹
 > 0 ? 
dividíd
 / divisor : -1;

568 
˝u_ußge
 = -1;

571 
	}
}

578 
	$gë_˝u_ußge
()

580  
˝u_ußge
;

581 
	}
}

584 
	$åa˚_run
()

586 #i‡
HAVE_EXECINFO_H


587 i‡(
backåa˚_c⁄n
 && 
n_åa˚s
 >
MAX_TRACES
) {

588 
unix˘l_c⁄n
 *
ª∂y_c⁄n
 = 
backåa˚_c⁄n
;

589 
ds
 d†
DS_EMPTY_INITIALIZER
;

590 
sig£t_t
 
ﬁdsigs
;

591 
size_t
 
i
;

593 
	`block_sigÆrm
(&
ﬁdsigs
);

595 
i
 = 0; i < 
n_åa˚s
; i++) {

596 
åa˚
 *åa˚ = &
åa˚s
[
i
];

597 **
‰ame_°rs
;

598 
size_t
 
j
;

600 
‰ame_°rs
 = 
	`backåa˚_symbﬁs
(
åa˚
->
backåa˚
,Åø˚->
n_‰ames
);

602 
	`ds_put_f‹m©
(&
ds
, "Backåa˚ %zu\n", 
i
 + 1);

603 
j
 = 0; j < 
åa˚
->
n_‰ames
; j++) {

604 
	`ds_put_f‹m©
(&
ds
, "%s\n", 
‰ame_°rs
[
j
]);

606 
	`ds_put_c°r
(&
ds
, "\n");

608 
	`‰ì
(
‰ame_°rs
);

611 
	`‰ì
(
åa˚s
);

612 
åa˚s
 = 
NULL
;

613 
n_åa˚s
 = 0;

614 
backåa˚_c⁄n
 = 
NULL
;

616 
	`unblock_sigÆrm
(&
ﬁdsigs
);

618 
	`unix˘l_comm™d_ª∂y
(
ª∂y_c⁄n
, 
	`ds_c°r
(&
ds
));

619 
	`ds_de°roy
(&
ds
);

622 
	}
}

629 
	$timevÆ_°›_cb
(
unix˘l_c⁄n
 *
c⁄n
,

630 
¨gc
 
OVS_UNUSED
, c⁄° *
¨gv
[] OVS_UNUSED,

631 *
aux
 
OVS_UNUSED
)

633 
time_°›≥d
 = 
åue
;

634 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, 
NULL
);

635 
	}
}

643 
	$timevÆ_w¨p_cb
(
unix˘l_c⁄n
 *
c⁄n
,

644 
¨gc
 
OVS_UNUSED
, c⁄° *
¨gv
[], *
aux
 OVS_UNUSED)

646 
time•ec
 
ts
;

647 
m£cs
;

649 
m£cs
 = 
	`©oi
(
¨gv
[1]);

650 i‡(
m£cs
 <= 0) {

651 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, "invalid MSECS");

655 
ts
.
tv_£c
 = 
m£cs
 / 1000;

656 
ts
.
tv_n£c
 = (
m£cs
 % 1000) * 1000 * 1000;

657 
	`time•ec_add
(&
w¨p_off£t
, &w¨p_off£t, &
ts
);

658 
	`time•ec_add
(&
m⁄Ÿ⁄ic_time
, &m⁄Ÿ⁄ic_time, &
ts
);

659 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, "warped");

660 
	}
}

663 
	$backåa˚_cb
(
unix˘l_c⁄n
 *
c⁄n
,

664 
¨gc
 
OVS_UNUSED
, c⁄° *
¨gv
[] OVS_UNUSED,

665 *
aux
 
OVS_UNUSED
)

667 
sig£t_t
 
ﬁdsigs
;

669 
	`as£π
(
HAVE_EXECINFO_H
 && 
CACHE_TIME
);

671 i‡(
backåa˚_c⁄n
) {

672 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, "In Use");

675 
	`as£π
(!
åa˚s
);

677 
	`block_sigÆrm
(&
ﬁdsigs
);

678 
backåa˚_c⁄n
 = 
c⁄n
;

679 
åa˚s
 = 
	`xmÆloc
(
MAX_TRACES
 *  *traces);

680 
n_åa˚s
 = 0;

681 
	`unblock_sigÆrm
(&
ﬁdsigs
);

682 
	}
}

685 
	$timevÆ_dummy_ªgi°î
()

687 
	`unix˘l_comm™d_ªgi°î
("time/°›", "", 0, 0, 
timevÆ_°›_cb
, 
NULL
);

688 
	`unix˘l_comm™d_ªgi°î
("time/warp", "MSECS", 1, 1,

689 
timevÆ_w¨p_cb
, 
NULL
);

690 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/timeval.h

17 #i‚de‡
TIMEVAL_H


18 
	#TIMEVAL_H
 1

	)

20 
	~<time.h
>

21 
	~"ty≥-¥›s.h
"

22 
	~"utû.h
"

24 #ifde‡ 
__˝lu•lus


28 
pﬁlfd
;

29 
time•ec
;

30 
timevÆ
;

33 
BUILD_ASSERT_DECL
(
TYPE_IS_INTEGER
(
time_t
));

37 
BUILD_ASSERT_DECL
(
TYPE_IS_SIGNED
(
time_t
));

39 
	#TIME_MAX
 
	`TYPE_MAXIMUM
(
time_t
)

	)

40 
	#TIME_MIN
 
	`TYPE_MINIMUM
(
time_t
)

	)

45 
	#TIME_UPDATE_INTERVAL
 100

	)

57 #i‚de‡
CACHE_TIME


58 #i‡
deföed
 
ESX
 || (deföed 
__x86_64__
 && deföed 
LINUX_DATAPATH
)

59 
	#CACHE_TIME
 0

	)

61 
	#CACHE_TIME
 1

	)

65 
time_dißbÀ_ª°¨t
();

66 
time_íabÀ_ª°¨t
();

67 
time_po°f‹k
();

68 
time_ª‰esh
();

69 
time_t
 
time_now
();

70 
time_t
 
time_wÆl
();

71 
time_m£c
();

72 
time_wÆl_m£c
();

73 
time_time•ec
(
time•ec
 *);

74 
time_wÆl_time•ec
(
time•ec
 *);

75 
time_Æ¨m
(
£cs
);

76 
time_pﬁl
(
pﬁlfd
 *, 
n_pﬁlfds
, 
timeout_whí
,

77 *
ñ≠£d
);

78 
boﬁ
 
time_ˇched
();

80 
time•ec_to_m£c
(c⁄° 
time•ec
 *);

81 
timevÆ_to_m£c
(c⁄° 
timevÆ
 *);

83 
xgëtimeofday
(
timevÆ
 *);

85 
gë_˝u_ußge
();

87 
time_boŸ_m£c
();

89 #ifde‡ 
__˝lu•lus


	@/home/lsch/mytest/openvswitch-1.9.0/lib/token-bucket.c

17 
	~<c⁄fig.h
>

19 
	~"tokí-buckë.h
"

21 
	~"pﬁl-lo›.h
"

22 
	~"ßt-m©h.h
"

23 
	~"timevÆ.h
"

24 
	~"utû.h
"

33 
	$tokí_buckë_öô
(
tokí_buckë
 *
tb
,

34 
øã
, 
bur°
)

36 
tb
->
øã
 =Ñate;

37 
tb
->
bur°
 = burst;

38 
tb
->
tokís
 = 0;

39 
tb
->
œ°_fûl
 = 
LLONG_MIN
;

40 
	}
}

48 
	$tokí_buckë_£t
(
tokí_buckë
 *
tb
,

49 
øã
, 
bur°
)

51 
tb
->
øã
 =Ñate;

52 
tb
->
bur°
 = burst;

53 i‡(
bur°
 > 
tb
->
tokís
) {

54 
tb
->
tokís
 = 
bur°
;

56 
	}
}

61 
boﬁ


62 
	$tokí_buckë_wôhdøw
(
tokí_buckë
 *
tb
, 
n
)

64 i‡(
tb
->
tokís
 < 
n
) {

65 
now
 = 
	`time_m£c
();

66 i‡(
now
 > 
tb
->
œ°_fûl
) {

67 
ñ≠£d_uŒ


68 (Ë
now
 - 
tb
->
œ°_fûl
;

69 
ñ≠£d
 = 
	`MIN
(
UINT_MAX
, 
ñ≠£d_uŒ
);

70 
add
 = 
	`ßt_mul
(
tb
->
øã
, 
ñ≠£d
);

71 
tokís
 = 
	`ßt_add
(
tb
->tokís, 
add
);

72 
tb
->
tokís
 = 
	`MIN
—okís,Åb->
bur°
);

73 
tb
->
œ°_fûl
 = 
now
;

76 i‡(
tb
->
tokís
 < 
n
) {

77  
Ál£
;

81 
tb
->
tokís
 -
n
;

82  
åue
;

83 
	}
}

88 
	$tokí_buckë_waô
(
tokí_buckë
 *
tb
, 
n
)

90 i‡(
tb
->
tokís
 >
n
) {

91 
	`pﬁl_immedüã_wake
();

93 
√ed
 = 
n
 - 
tb
->
tokís
;

94 
	`pﬁl_timî_waô_u¡û
(
tb
->
œ°_fûl
 + 
√ed
 /Åb->
øã
 + 1);

96 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/token-bucket.h

17 #i‚de‡
TOKEN_BUCKET_H


18 
	#TOKEN_BUCKET_H
 1

	)

20 
	~<limôs.h
>

21 
	~<°dboﬁ.h
>

23 
	stokí_buckë
 {

25 
	møã
;

26 
	mbur°
;

29 
	mtokís
;

30 
	mœ°_fûl
;

33 
	#TOKEN_BUCKET_INIT
(
RATE
, 
BURST
Ë{ RATE, BURST, 0, 
LLONG_MIN
 }

	)

35 
tokí_buckë_öô
(
tokí_buckë
 *,

36 
øã
, 
bur°
);

37 
tokí_buckë_£t
(
tokí_buckë
 *,

38 
øã
, 
bur°
);

39 
boﬁ
 
tokí_buckë_wôhdøw
(
tokí_buckë
 *, 
n
);

40 
tokí_buckë_waô
(
tokí_buckë
 *, 
n
);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/type-props.h

17 #i‚de‡
TYPE_PROPS_H


18 
	#TYPE_PROPS_H
 1

	)

20 
	~<limôs.h
>

22 
	#TYPE_IS_INTEGER
(
TYPE
Ë((TYPEË1.5 =(TYPEË1)

	)

23 
	#TYPE_IS_SIGNED
(
TYPE
Ë((TYPEË1 > (TYPEË-1)

	)

24 
	#TYPE_VALUE_BITS
(
TYPE
Ë((TYPEË* 
CHAR_BIT
 - 
	`TYPE_IS_SIGNED
(TYPE))

	)

25 
	#TYPE_MINIMUM
(
TYPE
Ë(
	`TYPE_IS_SIGNED
(TYPE) \

26 ? ~(
TYPE
)0 << 
	`TYPE_VALUE_BITS
(TYPE) \

27 : 0)

	)

28 
	#TYPE_MAXIMUM
(
TYPE
Ë(
	`TYPE_IS_SIGNED
(TYPE) \

29 ? ~(~(
TYPE
)0 << 
	`TYPE_VALUE_BITS
(TYPE)) \

30 : (
TYPE
)-1)

	)

37 
	#INT_STRLEN
(
TYPE
Ë(
	`TYPE_IS_SIGNED
(TYPEË+ 
	`TYPE_VALUE_BITS
(TYPEË/ 3 + 1)

	)

	@/home/lsch/mytest/openvswitch-1.9.0/lib/unaligned.h

17 #i‚de‡
UNALIGNED_H


18 
	#UNALIGNED_H
 1

	)

20 
	~<°döt.h
>

21 
	~"byã-‹dî.h
"

22 
	~"›ívswôch/ty≥s.h
"

23 
	~"ty≥-¥›s.h
"

24 
	~"utû.h
"

27 
ölöe
 
uöt16_t
 
gë_u«lig√d_u16
(const uint16_t *);

28 
ölöe
 
uöt32_t
 
gë_u«lig√d_u32
(const uint32_t *);

29 
ölöe
 
put_u«lig√d_u16
(
uöt16_t
 *, uint16_t);

30 
ölöe
 
put_u«lig√d_u32
(
uöt32_t
 *, uint32_t);

31 
ölöe
 
put_u«lig√d_u64
(
uöt64_t
 *, uint64_t);

33 
ölöe
 
ovs_be16
 
gë_u«lig√d_be16
(const ovs_be16 *);

34 
ölöe
 
ovs_be32
 
gë_u«lig√d_be32
(const ovs_be32 *);

35 
ölöe
 
ovs_be64
 
gë_u«lig√d_be64
(const ovs_be64 *);

36 
ölöe
 
put_u«lig√d_be16
(
ovs_be16
 *, ovs_be16);

37 
ölöe
 
put_u«lig√d_be32
(
ovs_be32
 *, ovs_be32);

38 
ölöe
 
put_u«lig√d_be64
(
ovs_be64
 *, ovs_be64);

40 #ifde‡
__GNUC__


42 
	#GCC_UNALIGNED_ACCESSORS
(
TYPE
, 
ABBREV
) \

43 
u«lig√d_
##
ABBREV
 { \

44 
TYPE
 
x
 
	`__©åibuã__
((
__∑cked__
)); \

46 
ölöe
 
u«lig√d_
##
ABBREV
 * \

47 
u«lig√d_
##
	`ABBREV
(c⁄° 
TYPE
 *
p
) \

49  (
u«lig√d_
##
ABBREV
 *Ë
p
; \

52 
ölöe
 
TYPE
 \

53 
gë_u«lig√d_
##
	`ABBREV
(c⁄° 
TYPE
 *
p
) \

55  
u«lig√d_
##
	`ABBREV
(
p
)->
x
; \

58 
ölöe
 \

59 
put_u«lig√d_
##
	`ABBREV
(
TYPE
 *
p
, TYPE 
x
) \

61 
u«lig√d_
##
	`ABBREV
(
p
)->
x
 = x; \

62 }

	)

64 
GCC_UNALIGNED_ACCESSORS
(
uöt16_t
, 
u16
);

65 
GCC_UNALIGNED_ACCESSORS
(
uöt32_t
, 
u32
);

66 
GCC_UNALIGNED_ACCESSORS
(
uöt64_t
, 
u64__
);

68 
GCC_UNALIGNED_ACCESSORS
(
ovs_be16
, 
be16
);

69 
GCC_UNALIGNED_ACCESSORS
(
ovs_be32
, 
be32
);

70 
GCC_UNALIGNED_ACCESSORS
(
ovs_be64
, 
be64
);

74 
ölöe
 
uöt16_t
 
	$gë_u«lig√d_u16
(c⁄° 
uöt16_t
 *
p_
)

76 c⁄° 
uöt8_t
 *
p
 = (c⁄° uöt8_à*Ë
p_
;

77  
	`¡ohs
((
p
[0] << 8) |Ö[1]);

78 
	}
}

80 
ölöe
 
	$put_u«lig√d_u16
(
uöt16_t
 *
p_
, uöt16_à
x_
)

82 
uöt8_t
 *
p
 = (uöt8_à*Ë
p_
;

83 
uöt16_t
 
x
 = 
	`¡ohs
(
x_
);

85 
p
[0] = 
x
 >> 8;

86 
p
[1] = 
x
;

87 
	}
}

89 
ölöe
 
uöt32_t
 
	$gë_u«lig√d_u32
(c⁄° 
uöt32_t
 *
p_
)

91 c⁄° 
uöt8_t
 *
p
 = (c⁄° uöt8_à*Ë
p_
;

92  
	`¡ohl
((
p
[0] << 24) | (p[1] << 16) | (p[2] << 8) |Ö[3]);

93 
	}
}

95 
ölöe
 
	$put_u«lig√d_u32
(
uöt32_t
 *
p_
, uöt32_à
x_
)

97 
uöt8_t
 *
p
 = (uöt8_à*Ë
p_
;

98 
uöt32_t
 
x
 = 
	`¡ohl
(
x_
);

100 
p
[0] = 
x
 >> 24;

101 
p
[1] = 
x
 >> 16;

102 
p
[2] = 
x
 >> 8;

103 
p
[3] = 
x
;

104 
	}
}

106 
ölöe
 
uöt64_t
 
	$gë_u«lig√d_u64__
(c⁄° 
uöt64_t
 *
p_
)

108 c⁄° 
uöt8_t
 *
p
 = (c⁄° uöt8_à*Ë
p_
;

109  
	`¡ohŒ
(((
uöt64_t
Ë
p
[0] << 56)

110 | ((
uöt64_t
Ë
p
[1] << 48)

111 | ((
uöt64_t
Ë
p
[2] << 40)

112 | ((
uöt64_t
Ë
p
[3] << 32)

113 | (
p
[4] << 24)

114 | (
p
[5] << 16)

115 | (
p
[6] << 8)

116 | 
p
[7]);

117 
	}
}

119 
ölöe
 
	$put_u«lig√d_u64__
(
uöt64_t
 *
p_
, uöt64_à
x_
)

121 
uöt8_t
 *
p
 = (uöt8_à*Ë
p_
;

122 
uöt64_t
 
x
 = 
	`¡ohŒ
(
x_
);

124 
p
[0] = 
x
 >> 56;

125 
p
[1] = 
x
 >> 48;

126 
p
[2] = 
x
 >> 40;

127 
p
[3] = 
x
 >> 32;

128 
p
[4] = 
x
 >> 24;

129 
p
[5] = 
x
 >> 16;

130 
p
[6] = 
x
 >> 8;

131 
p
[7] = 
x
;

132 
	}
}

137 
	#gë_u«lig√d_be16
 
gë_u«lig√d_u16


	)

138 
	#gë_u«lig√d_be32
 
gë_u«lig√d_u32


	)

139 
	#gë_u«lig√d_be64
 
gë_u«lig√d_u64


	)

140 
	#put_u«lig√d_be16
 
put_u«lig√d_u16


	)

141 
	#put_u«lig√d_be32
 
put_u«lig√d_u32


	)

142 
	#put_u«lig√d_be64
 
put_u«lig√d_u64


	)

160 
	#gë_u«lig√d_u64
(
P
) \

161 (
	`BUILD_ASSERT
( *(
P
) == 8), \

162 
	`BUILD_ASSERT_GCCONLY
(!
	`TYPE_IS_SIGNED
(
	`ty≥of
(*(
P
)))), \

163 (Ë (*(
P
) % 1), \

164 
	`gë_u«lig√d_u64__
((c⁄° 
uöt64_t
 *Ë(
P
)))

	)

171 
ölöe
 

172 
	$put_u«lig√d_u64
(
uöt64_t
 *
p
, uöt64_à
x
)

174 
	`put_u«lig√d_u64__
(
p
, 
x
);

175 
	}
}

178 
ölöe
 
uöt64_t


179 
	$gë_32Æig√d_u64
(c⁄° 
ovs_32Æig√d_u64
 *
x
)

181  ((
uöt64_t
Ë
x
->
hi
 << 32Ë| x->
lo
;

182 
	}
}

185 
ölöe
 

186 
	$put_32Æig√d_u64
(
ovs_32Æig√d_u64
 *
x
, 
uöt64_t
 
vÆue
)

188 
x
->
hi
 = 
vÆue
 >> 32;

189 
x
->
lo
 = 
vÆue
;

190 
	}
}

192 #i‚de‡
__CHECKER__


194 
ölöe
 
ovs_be64


195 
	$gë_32Æig√d_be64
(c⁄° 
ovs_32Æig√d_be64
 *
x
)

197 #ifde‡
WORDS_BIGENDIAN


198  ((
ovs_be64
Ë
x
->
hi
 << 32Ë| x->
lo
;

200  ((
ovs_be64
Ë
x
->
lo
 << 32Ë| x->
hi
;

202 
	}
}

205 
ölöe
 

206 
	$put_32Æig√d_be64
(
ovs_32Æig√d_be64
 *
x
, 
ovs_be64
 
vÆue
)

208 #i‡
WORDS_BIGENDIAN


209 
x
->
hi
 = 
vÆue
 >> 32;

210 
x
->
lo
 = 
vÆue
;

212 
x
->
hi
 = 
vÆue
;

213 
x
->
lo
 = 
vÆue
 >> 32;

215 
	}
}

219 
ovs_be64
 
gë_32Æig√d_be64
(c⁄° 
ovs_32Æig√d_be64
 *);

220 
put_32Æig√d_be64
(
ovs_32Æig√d_be64
 *, 
ovs_be64
);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/unicode.c

17 
	~<c⁄fig.h
>

19 
	~"unicode.h
"

21 
	~<öây≥s.h
>

23 
	~"dy«mic-°rög.h
"

24 
	~"utû.h
"

31 
	$utf16_decode_suºog©e_∑ú
(
Àadög
, 
åaûög
)

38 
w
 = (
Àadög
 >> 6) & 0xf;

39 
u
 = 
w
 + 1;

40 
x0
 = 
Àadög
 & 0x3f;

41 
x1
 = 
åaûög
 & 0x3ff;

42  (
u
 << 16Ë| (
x0
 << 10Ë| 
x1
;

43 
	}
}

46 
size_t


47 
	$utf8_Àngth
(c⁄° *
s_
)

49 c⁄° 
uöt8_t
 *
s
;

50 
size_t
 
Àngth
;

52 
Àngth
 = 0;

53 
s
 = (c⁄° 
uöt8_t
 *Ë
s_
; *s != '\0'; s++) {

56 
Àngth
 +(*
s
 & 0xc0) != 0x80;

58  
Àngth
;

59 
	}
}

62 
	$övÆid_utf8_£quí˚
(c⁄° 
uöt8_t
 *
s
, 
n
, 
size_t
 *
Àngthp
)

64 
ds
 
msg
;

65 
i
;

67 i‡(
Àngthp
) {

68 *
Àngthp
 = 0;

71 
	`ds_öô
(&
msg
);

72 
	`ds_put_c°r
(&
msg
, "invalid UTF-8 sequence");

73 
i
 = 0; i < 
n
; i++) {

74 
	`ds_put_f‹m©
(&
msg
, " 0x%02"
PRIx8
, 
s
[
i
]);

76  
	`ds_°ól_c°r
(&
msg
);

77 
	}
}

79 
	sutf8_£quí˚
 {

80 
uöt8_t
 
	mo˘ës
[5][2];

83 c⁄° 
utf8_£quí˚
 *

84 
	$lookup_utf8_£quí˚
(
uöt8_t
 
c
)

86 c⁄° 
utf8_£quí˚
 
£qs
[] = {

115 
size_t
 
i
;

117 
i
 = 0; i < 
	`ARRAY_SIZE
(
£qs
); i++) {

118 c⁄° 
uöt8_t
 *
o
 = 
£qs
[
i
].
o˘ës
[0];

119 i‡(
c
 >
o
[0] && c <= o[1]) {

120  &
£qs
[
i
];

123  
NULL
;

124 
	}
}

133 
	$utf8_vÆid©e
(c⁄° *
s_
, 
size_t
 *
Àngthp
)

135 
size_t
 
Àngth
 = 0;

136 c⁄° 
uöt8_t
 *
s
;

138 
s
 = (c⁄° 
uöt8_t
 *Ë
s_
; *s != '\0'; ) {

139 
Àngth
++;

140 i‡(
s
[0] < 0x80) {

141 
s
++;

143 c⁄° 
utf8_£quí˚
 *
£q
;

144 
i
;

146 
£q
 = 
	`lookup_utf8_£quí˚
(
s
[0]);

147 i‡(!
£q
) {

148  
	`övÆid_utf8_£quí˚
(
s
, 1, 
Àngthp
);

151 
i
 = 1; 
£q
->
o˘ës
[i][0]; i++) {

152 c⁄° 
uöt8_t
 *
o
 = 
£q
->
o˘ës
[
i
];

153 i‡(
s
[
i
] < 
o
[0] || s[i] > o[1]) {

154  
	`övÆid_utf8_£quí˚
(
s
, 
i
 + 1, 
Àngthp
);

157 
s
 +
i
;

160 i‡(
Àngthp
) {

161 *
Àngthp
 = 
Àngth
;

163  
NULL
;

164 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/unicode.h

17 #i‚de‡
UNICODE_H


18 
	#UNICODE_H
 1

	)

20 
	~<°dboﬁ.h
>

21 
	~<°ddef.h
>

22 
	~"compûî.h
"

25 
ölöe
 
boﬁ


26 
	$uc_is_code_poöt
(
c
)

28  
c
 >= 0 && c <= 0x10ffff;

29 
	}
}

32 
ölöe
 
boﬁ


33 
	$uc_is_Àadög_suºog©e
(
c
)

35  
c
 >= 0xd800 && c <= 0xdbff;

36 
	}
}

39 
ölöe
 
boﬁ


40 
	$uc_is_åaûög_suºog©e
(
c
)

42  
c
 >= 0xdc00 && c <= 0xdfff;

43 
	}
}

47 
ölöe
 
boﬁ


48 
	$uc_is_suºog©e
(
c
)

50  
c
 >= 0xd800 && c <= 0xdfff;

51 
	}
}

53 
utf16_decode_suºog©e_∑ú
(
Àadög
, 
åaûög
);

55 
size_t
 
utf8_Àngth
(const *);

56 *
	$utf8_vÆid©e
(c⁄° *, 
size_t
 *
Àngthp
Ë
WARN_UNUSED_RESULT
;

	@/home/lsch/mytest/openvswitch-1.9.0/lib/unixctl.c

17 
	~<c⁄fig.h
>

18 
	~"unix˘l.h
"

19 
	~<as£π.h
>

20 
	~<î∫o.h
>

21 
	~<uni°d.h
>

22 
	~"covîage.h
"

23 
	~"dús.h
"

24 
	~"dy«mic-°rög.h
"

25 
	~"js⁄.h
"

26 
	~"js⁄Ωc.h
"

27 
	~"li°.h
"

28 
	~"pﬁl-lo›.h
"

29 
	~"shash.h
"

30 
	~"°ªam.h
"

31 
	~"svec.h
"

32 
	~"vlog.h
"

34 
VLOG_DEFINE_THIS_MODULE
(
unix˘l
);

36 
COVERAGE_DEFINE
(
unix˘l_ª˚ived
);

37 
COVERAGE_DEFINE
(
unix˘l_ª∂õd
);

39 
	sunix˘l_comm™d
 {

40 c⁄° *
	mußge
;

41 
	mmö_¨gs
, 
	mmax_¨gs
;

42 
unix˘l_cb_func
 *
	mcb
;

43 *
	maux
;

46 
	sunix˘l_c⁄n
 {

47 
li°
 
	mnode
;

48 
js⁄Ωc
 *
	mΩc
;

52 
js⁄
 *
	mªque°_id
;

56 
	sunix˘l_£rvî
 {

57 
p°ªam
 *
	mli°íî
;

58 
li°
 
	mc⁄ns
;

61 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(5, 5);

63 
shash
 
	gcomm™ds
 = 
SHASH_INITIALIZER
(&
comm™ds
);

66 
	$unix˘l_hñp
(
unix˘l_c⁄n
 *
c⁄n
, 
¨gc
 
OVS_UNUSED
,

67 c⁄° *
¨gv
[] 
OVS_UNUSED
, *
aux
 OVS_UNUSED)

69 
ds
 d†
DS_EMPTY_INITIALIZER
;

70 c⁄° 
shash_node
 **
nodes
 = 
	`shash_s‹t
(&
comm™ds
);

71 
size_t
 
i
;

73 
	`ds_put_c°r
(&
ds
, "Theávailable commandsáre:\n");

75 
i
 = 0; i < 
	`shash_cou¡
(&
comm™ds
); i++) {

76 c⁄° 
shash_node
 *
node
 = 
nodes
[
i
];

77 c⁄° 
unix˘l_comm™d
 *
comm™d
 = 
node
->
d©a
;

79 
	`ds_put_f‹m©
(&
ds
, " %-23†%s\n", 
node
->
«me
, 
comm™d
->
ußge
);

81 
	`‰ì
(
nodes
);

83 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, 
	`ds_c°r
(&
ds
));

84 
	`ds_de°roy
(&
ds
);

85 
	}
}

88 
	$unix˘l_vîsi⁄
(
unix˘l_c⁄n
 *
c⁄n
, 
¨gc
 
OVS_UNUSED
,

89 c⁄° *
¨gv
[] 
OVS_UNUSED
, *
aux
 OVS_UNUSED)

91 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, 
	`gë_¥ogøm_vîsi⁄
());

92 
	}
}

106 
	$unix˘l_comm™d_ªgi°î
(c⁄° *
«me
, c⁄° *
ußge
,

107 
mö_¨gs
, 
max_¨gs
,

108 
unix˘l_cb_func
 *
cb
, *
aux
)

110 
unix˘l_comm™d
 *
comm™d
;

111 
unix˘l_comm™d
 *
lookup
 = 
	`shash_föd_d©a
(&
comm™ds
, 
«me
);

113 
	`as£π
(!
lookup
 ||Üookup->
cb
 == cb);

115 i‡(
lookup
) {

119 
comm™d
 = 
	`xmÆloc
( *command);

120 
comm™d
->
ußge
 = usage;

121 
comm™d
->
mö_¨gs
 = min_args;

122 
comm™d
->
max_¨gs
 = max_args;

123 
comm™d
->
cb
 = cb;

124 
comm™d
->
aux
 =áux;

125 
	`shash_add
(&
comm™ds
, 
«me
, 
comm™d
);

126 
	}
}

129 
	$unix˘l_comm™d_ª∂y__
(
unix˘l_c⁄n
 *
c⁄n
,

130 
boﬁ
 
suc˚ss
, c⁄° *
body
)

132 
js⁄
 *
body_js⁄
;

133 
js⁄Ωc_msg
 *
ª∂y
;

135 
	`COVERAGE_INC
(
unix˘l_ª∂õd
);

136 
	`as£π
(
c⁄n
->
ªque°_id
);

138 i‡(!
body
) {

139 
body
 = "";

142 i‡(
body
[0] && body[
	`°æí
(body) - 1] != '\n') {

143 
body_js⁄
 = 
	`js⁄_°rög_¸óã_noc›y
(
	`xa•rötf
("%s\n", 
body
));

145 
body_js⁄
 = 
	`js⁄_°rög_¸óã
(
body
);

148 i‡(
suc˚ss
) {

149 
ª∂y
 = 
	`js⁄Ωc_¸óã_ª∂y
(
body_js⁄
, 
c⁄n
->
ªque°_id
);

151 
ª∂y
 = 
	`js⁄Ωc_¸óã_îr‹
(
body_js⁄
, 
c⁄n
->
ªque°_id
);

156 
	`js⁄Ωc_£nd
(
c⁄n
->
Ωc
, 
ª∂y
);

157 
	`js⁄_de°roy
(
c⁄n
->
ªque°_id
);

158 
c⁄n
->
ªque°_id
 = 
NULL
;

159 
	}
}

166 
	$unix˘l_comm™d_ª∂y
(
unix˘l_c⁄n
 *
c⁄n
, c⁄° *
ªsu…
)

168 
	`unix˘l_comm™d_ª∂y__
(
c⁄n
, 
åue
, 
ªsu…
);

169 
	}
}

176 
	$unix˘l_comm™d_ª∂y_îr‹
(
unix˘l_c⁄n
 *
c⁄n
, c⁄° *
îr‹
)

178 
	`unix˘l_comm™d_ª∂y__
(
c⁄n
, 
Ál£
, 
îr‹
);

179 
	}
}

203 
	$unix˘l_£rvî_¸óã
(c⁄° *
∑th
, 
unix˘l_£rvî
 **
£rvîp
)

205 
unix˘l_£rvî
 *
£rvî
;

206 
p°ªam
 *
li°íî
;

207 *
punix_∑th
;

208 
îr‹
;

210 *
£rvîp
 = 
NULL
;

211 i‡(
∑th
 && !
	`°rcmp
(path, "none")) {

215 i‡(
∑th
) {

216 *
abs_∑th
 = 
	`abs_fûe_«me
(
	`ovs_rundú
(), 
∑th
);

217 
punix_∑th
 = 
	`xa•rötf
("punix:%s", 
abs_∑th
);

218 
	`‰ì
(
abs_∑th
);

220 
punix_∑th
 = 
	`xa•rötf
("punix:%s/%s.%ld.˘l", 
	`ovs_rundú
(),

221 
¥ogøm_«me
, (Ë
	`gëpid
());

224 
îr‹
 = 
	`p°ªam_›í
(
punix_∑th
, &
li°íî
, 0);

225 i‡(
îr‹
) {

226 
	`ovs_îr‹
(
îr‹
, "couldÇŸ inôülizêc⁄åﬁ sockë %s", 
punix_∑th
);

227 
exô
;

230 
	`unix˘l_comm™d_ªgi°î
("hñp", "", 0, 0, 
unix˘l_hñp
, 
NULL
);

231 
	`unix˘l_comm™d_ªgi°î
("vîsi⁄", "", 0, 0, 
unix˘l_vîsi⁄
, 
NULL
);

233 
£rvî
 = 
	`xmÆloc
( *server);

234 
£rvî
->
li°íî
 =Üistener;

235 
	`li°_öô
(&
£rvî
->
c⁄ns
);

236 *
£rvîp
 = 
£rvî
;

238 
exô
:

239 
	`‰ì
(
punix_∑th
);

240  
îr‹
;

241 
	}
}

244 
	$¥o˚ss_comm™d
(
unix˘l_c⁄n
 *
c⁄n
, 
js⁄Ωc_msg
 *
ªque°
)

246 *
îr‹
 = 
NULL
;

248 
unix˘l_comm™d
 *
comm™d
;

249 
js⁄_¨øy
 *
∑øms
;

251 
	`COVERAGE_INC
(
unix˘l_ª˚ived
);

252 
c⁄n
->
ªque°_id
 = 
	`js⁄_˛⁄e
(
ªque°
->
id
);

254 
∑øms
 = 
	`js⁄_¨øy
(
ªque°
->params);

255 
comm™d
 = 
	`shash_föd_d©a
(&
comm™ds
, 
ªque°
->
mëhod
);

256 i‡(!
comm™d
) {

257 
îr‹
 = 
	`xa•rötf
("\"%s\" i†nŸá vÆid comm™d", 
ªque°
->
mëhod
);

258 } i‡(
∑øms
->
n
 < 
comm™d
->
mö_¨gs
) {

259 
îr‹
 = 
	`xa•rötf
("\"%s\" commandÑequiresátÜeast %dárguments",

260 
ªque°
->
mëhod
, 
comm™d
->
mö_¨gs
);

261 } i‡(
∑øms
->
n
 > 
comm™d
->
max_¨gs
) {

262 
îr‹
 = 
	`xa•rötf
("\"%s\" commandÅakesát most %dárguments",

263 
ªque°
->
mëhod
, 
comm™d
->
max_¨gs
);

265 
svec
 
¨gv
 = 
SVEC_EMPTY_INITIALIZER
;

266 
i
;

268 
	`svec_add
(&
¨gv
, 
ªque°
->
mëhod
);

269 
i
 = 0; i < 
∑øms
->
n
; i++) {

270 i‡(
∑øms
->
ñems
[
i
]->
ty≥
 !
JSON_STRING
) {

271 
îr‹
 = 
	`xa•rötf
("\"%s\" command hasÇon-stringárgument",

272 
ªque°
->
mëhod
);

275 
	`svec_add
(&
¨gv
, 
	`js⁄_°rög
(
∑øms
->
ñems
[
i
]));

277 
	`svec_ãrmö©e
(&
¨gv
);

279 i‡(!
îr‹
) {

280 
comm™d
->
	`cb
(
c⁄n
, 
¨gv
.
n
, (c⁄° **Ë¨gv.
«mes
,

281 
comm™d
->
aux
);

284 
	`svec_de°roy
(&
¨gv
);

287 i‡(
îr‹
) {

288 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, 
îr‹
);

289 
	`‰ì
(
îr‹
);

291 
	}
}

294 
	$run_c⁄√˘i⁄
(
unix˘l_c⁄n
 *
c⁄n
)

296 
îr‹
, 
i
;

298 
	`js⁄Ωc_run
(
c⁄n
->
Ωc
);

299 
îr‹
 = 
	`js⁄Ωc_gë_°©us
(
c⁄n
->
Ωc
);

300 i‡(
îr‹
 || 
	`js⁄Ωc_gë_backlog
(
c⁄n
->
Ωc
)) {

301  
îr‹
;

304 
i
 = 0; i < 10; i++) {

305 
js⁄Ωc_msg
 *
msg
;

307 i‡(
îr‹
 || 
c⁄n
->
ªque°_id
) {

311 
	`js⁄Ωc_ªcv
(
c⁄n
->
Ωc
, &
msg
);

312 i‡(
msg
) {

313 i‡(
msg
->
ty≥
 =
JSONRPC_REQUEST
) {

314 
	`¥o˚ss_comm™d
(
c⁄n
, 
msg
);

316 
	`VLOG_WARN_RL
(&
æ
, "%s:Ñeceived unexpected %s message",

317 
	`js⁄Ωc_gë_«me
(
c⁄n
->
Ωc
),

318 
	`js⁄Ωc_msg_ty≥_to_°rög
(
msg
->
ty≥
));

319 
îr‹
 = 
EINVAL
;

321 
	`js⁄Ωc_msg_de°roy
(
msg
);

323 
îr‹
 =Éº‹ ?Éº‹ : 
	`js⁄Ωc_gë_°©us
(
c⁄n
->
Ωc
);

326  
îr‹
;

327 
	}
}

330 
	$kûl_c⁄√˘i⁄
(
unix˘l_c⁄n
 *
c⁄n
)

332 
	`li°_ªmove
(&
c⁄n
->
node
);

333 
	`js⁄Ωc_˛o£
(
c⁄n
->
Ωc
);

334 
	`js⁄_de°roy
(
c⁄n
->
ªque°_id
);

335 
	`‰ì
(
c⁄n
);

336 
	}
}

339 
	$unix˘l_£rvî_run
(
unix˘l_£rvî
 *
£rvî
)

341 
unix˘l_c⁄n
 *
c⁄n
, *
√xt
;

342 
i
;

344 i‡(!
£rvî
) {

348 
i
 = 0; i < 10; i++) {

349 
°ªam
 *stream;

350 
îr‹
;

352 
îr‹
 = 
	`p°ªam_ac˚±
(
£rvî
->
li°íî
, &
°ªam
);

353 i‡(!
îr‹
) {

354 
unix˘l_c⁄n
 *
c⁄n
 = 
	`xzÆloc
( *conn);

355 
	`li°_push_back
(&
£rvî
->
c⁄ns
, &
c⁄n
->
node
);

356 
c⁄n
->
Ωc
 = 
	`js⁄Ωc_›í
(
°ªam
);

357 } i‡(
îr‹
 =
EAGAIN
) {

360 
	`VLOG_WARN_RL
(&
æ
, "%s:áccept failed: %s",

361 
	`p°ªam_gë_«me
(
£rvî
->
li°íî
),

362 
	`°ªº‹
(
îr‹
));

366 
	`LIST_FOR_EACH_SAFE
 (
c⁄n
, 
√xt
, 
node
, &
£rvî
->
c⁄ns
) {

367 
îr‹
 = 
	`run_c⁄√˘i⁄
(
c⁄n
);

368 i‡(
îr‹
 &&Éº‹ !
EAGAIN
) {

369 
	`kûl_c⁄√˘i⁄
(
c⁄n
);

372 
	}
}

375 
	$unix˘l_£rvî_waô
(
unix˘l_£rvî
 *
£rvî
)

377 
unix˘l_c⁄n
 *
c⁄n
;

379 i‡(!
£rvî
) {

383 
	`p°ªam_waô
(
£rvî
->
li°íî
);

384 
	`LIST_FOR_EACH
 (
c⁄n
, 
node
, &
£rvî
->
c⁄ns
) {

385 
	`js⁄Ωc_waô
(
c⁄n
->
Ωc
);

386 i‡(!
	`js⁄Ωc_gë_backlog
(
c⁄n
->
Ωc
)) {

387 
	`js⁄Ωc_ªcv_waô
(
c⁄n
->
Ωc
);

390 
	}
}

394 
	$unix˘l_£rvî_de°roy
(
unix˘l_£rvî
 *
£rvî
)

396 i‡(
£rvî
) {

397 
unix˘l_c⁄n
 *
c⁄n
, *
√xt
;

399 
	`LIST_FOR_EACH_SAFE
 (
c⁄n
, 
√xt
, 
node
, &
£rvî
->
c⁄ns
) {

400 
	`kûl_c⁄√˘i⁄
(
c⁄n
);

403 
	`p°ªam_˛o£
(
£rvî
->
li°íî
);

404 
	`‰ì
(
£rvî
);

406 
	}
}

415 
	$unix˘l_˛õ¡_¸óã
(c⁄° *
∑th
, 
js⁄Ωc
 **
˛õ¡
)

417 *
abs_∑th
, *
unix_∑th
;

418 
°ªam
 *stream;

419 
îr‹
;

421 *
˛õ¡
 = 
NULL
;

423 
abs_∑th
 = 
	`abs_fûe_«me
(
	`ovs_rundú
(), 
∑th
);

424 
unix_∑th
 = 
	`xa•rötf
("unix:%s", 
abs_∑th
);

425 
îr‹
 = 
	`°ªam_›í_block
(
	`°ªam_›í
(
unix_∑th
, &
°ªam
, 
DSCP_DEFAULT
),

426 &
°ªam
);

427 
	`‰ì
(
unix_∑th
);

428 
	`‰ì
(
abs_∑th
);

430 i‡(
îr‹
) {

431 
	`VLOG_WARN
("ÁûedÅÿc⁄√˘Åÿ%s", 
∑th
);

432  
îr‹
;

435 *
˛õ¡
 = 
	`js⁄Ωc_›í
(
°ªam
);

437 
	}
}

446 
	$unix˘l_˛õ¡_å™ß˘
(
js⁄Ωc
 *
˛õ¡
, c⁄° *
comm™d
, 
¨gc
,

447 *
¨gv
[], **
ªsu…
, **
îr
)

449 
js⁄Ωc_msg
 *
ªque°
, *
ª∂y
;

450 
js⁄
 **
js⁄_¨gs
, *
∑øms
;

451 
îr‹
, 
i
;

453 *
ªsu…
 = 
NULL
;

454 *
îr
 = 
NULL
;

456 
js⁄_¨gs
 = 
	`xmÆloc
(
¨gc
 *  *json_args);

457 
i
 = 0; i < 
¨gc
; i++) {

458 
js⁄_¨gs
[
i
] = 
	`js⁄_°rög_¸óã
(
¨gv
[i]);

460 
∑øms
 = 
	`js⁄_¨øy_¸óã
(
js⁄_¨gs
, 
¨gc
);

461 
ªque°
 = 
	`js⁄Ωc_¸óã_ªque°
(
comm™d
, 
∑øms
, 
NULL
);

463 
îr‹
 = 
	`js⁄Ωc_å™ß˘_block
(
˛õ¡
, 
ªque°
, &
ª∂y
);

464 i‡(
îr‹
) {

465 
	`VLOG_WARN
("îr‹ communiˇtög wôh %s: %s", 
	`js⁄Ωc_gë_«me
(
˛õ¡
),

466 
	`°ªº‹
(
îr‹
));

467  
îr‹
;

470 i‡(
ª∂y
->
îr‹
) {

471 i‡(
ª∂y
->
îr‹
->
ty≥
 =
JSON_STRING
) {

472 *
îr
 = 
	`x°rdup
(
	`js⁄_°rög
(
ª∂y
->
îr‹
));

474 
	`VLOG_WARN
("%s: unexpectedÉrrorÅype in JSON RPCÑeply: %s",

475 
	`js⁄Ωc_gë_«me
(
˛õ¡
),

476 
	`js⁄_ty≥_to_°rög
(
ª∂y
->
îr‹
->
ty≥
));

477 
îr‹
 = 
EINVAL
;

479 } i‡(
ª∂y
->
ªsu…
) {

480 i‡(
ª∂y
->
ªsu…
->
ty≥
 =
JSON_STRING
) {

481 *
ªsu…
 = 
	`x°rdup
(
	`js⁄_°rög
(
ª∂y
->result));

483 
	`VLOG_WARN
("%s: unexpectedÑesultÅype in JSONÑpcÑeply: %s",

484 
	`js⁄Ωc_gë_«me
(
˛õ¡
),

485 
	`js⁄_ty≥_to_°rög
(
ª∂y
->
ªsu…
->
ty≥
));

486 
îr‹
 = 
EINVAL
;

490 
	`js⁄Ωc_msg_de°roy
(
ª∂y
);

491  
îr‹
;

492 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/unixctl.h

17 #i‚de‡
UNIXCTL_H


18 
	#UNIXCTL_H
 1

	)

20 #ifde‡ 
__˝lu•lus


25 
unix˘l_£rvî
;

26 
unix˘l_£rvî_¸óã
(c⁄° *
∑th
, 
unix˘l_£rvî
 **);

27 
unix˘l_£rvî_run
(
unix˘l_£rvî
 *);

28 
unix˘l_£rvî_waô
(
unix˘l_£rvî
 *);

29 
unix˘l_£rvî_de°roy
(
unix˘l_£rvî
 *);

32 
js⁄Ωc
;

33 
unix˘l_˛õ¡_¸óã
(c⁄° *
∑th
, 
js⁄Ωc
 **
˛õ¡
);

34 
unix˘l_˛õ¡_å™ß˘
(
js⁄Ωc
 *
˛õ¡
,

35 c⁄° *
comm™d
,

36 
¨gc
, *
¨gv
[],

37 **
ªsu…
, **
îr‹
);

40 
unix˘l_c⁄n
;

41 
	tunix˘l_cb_func
(
	tunix˘l_c⁄n
 *,

42 
	t¨gc
, c⁄° *
	t¨gv
[], *
	taux
);

43 
unix˘l_comm™d_ªgi°î
(c⁄° *
«me
, c⁄° *
ußge
,

44 
mö_¨gs
, 
max_¨gs
,

45 
unix˘l_cb_func
 *
cb
, *
aux
);

46 
unix˘l_comm™d_ª∂y_îr‹
(
unix˘l_c⁄n
 *, c⁄° *
îr‹
);

47 
unix˘l_comm™d_ª∂y
(
unix˘l_c⁄n
 *, c⁄° *
body
);

49 #ifde‡ 
__˝lu•lus


	@/home/lsch/mytest/openvswitch-1.9.0/lib/util.c

17 
	~<c⁄fig.h
>

18 
	~"utû.h
"

19 
	~<as£π.h
>

20 
	~<î∫o.h
>

21 
	~<limôs.h
>

22 
	~<°d¨g.h
>

23 
	~<°döt.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°rög.h
>

27 
	~<sys/°©.h
>

28 
	~<uni°d.h
>

29 
	~"byã-‹dî.h
"

30 
	~"covîage.h
"

31 
	~"›ívswôch/ty≥s.h
"

32 
	~"vlog.h
"

34 
VLOG_DEFINE_THIS_MODULE
(
utû
);

36 
COVERAGE_DEFINE
(
utû_xÆloc
);

39 c⁄° *
	g¥ogøm_«me
;

43 c⁄° *
	gsub¥ogøm_«me
 = "";

46 *
	g¥ogøm_vîsi⁄
;

49 
	$out_of_mem‹y
()

51 
	`ovs_ab‹t
(0, "virtual memoryÉxhausted");

52 
	}
}

55 
	$xˇŒoc
(
size_t
 
cou¡
, size_à
size
)

57 *
p
 = 
cou¡
 && 
size
 ? 
	`ˇŒoc
(cou¡, sizeË: 
	`mÆloc
(1);

58 
	`COVERAGE_INC
(
utû_xÆloc
);

59 i‡(
p
 =
NULL
) {

60 
	`out_of_mem‹y
();

62  
p
;

63 
	}
}

66 
	$xzÆloc
(
size_t
 
size
)

68  
	`xˇŒoc
(1, 
size
);

69 
	}
}

72 
	$xmÆloc
(
size_t
 
size
)

74 *
p
 = 
	`mÆloc
(
size
 ? size : 1);

75 
	`COVERAGE_INC
(
utû_xÆloc
);

76 i‡(
p
 =
NULL
) {

77 
	`out_of_mem‹y
();

79  
p
;

80 
	}
}

83 
	$xªÆloc
(*
p
, 
size_t
 
size
)

85 
p
 = 
	`ªÆloc
’, 
size
 ? size : 1);

86 
	`COVERAGE_INC
(
utû_xÆloc
);

87 i‡(
p
 =
NULL
) {

88 
	`out_of_mem‹y
();

90  
p
;

91 
	}
}

94 
	$xmemdup
(c⁄° *
p_
, 
size_t
 
size
)

96 *
p
 = 
	`xmÆloc
(
size
);

97 
	`mem˝y
(
p
, 
p_
, 
size
);

98  
p
;

99 
	}
}

102 
	$xmemdup0
(c⁄° *
p_
, 
size_t
 
Àngth
)

104 *
p
 = 
	`xmÆloc
(
Àngth
 + 1);

105 
	`mem˝y
(
p
, 
p_
, 
Àngth
);

106 
p
[
Àngth
] = '\0';

107  
p
;

108 
	}
}

111 
	$x°rdup
(c⁄° *
s
)

113  
	`xmemdup0
(
s
, 
	`°æí
(s));

114 
	}
}

117 
	$xva•rötf
(c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

119 
va_li°
 
¨gs2
;

120 
size_t
 
√eded
;

121 *
s
;

123 
	`va_c›y
(
¨gs2
, 
¨gs
);

124 
√eded
 = 
	`v¢¥ötf
(
NULL
, 0, 
f‹m©
, 
¨gs
);

126 
s
 = 
	`xmÆloc
(
√eded
 + 1);

128 
	`v¢¥ötf
(
s
, 
√eded
 + 1, 
f‹m©
, 
¨gs2
);

129 
	`va_íd
(
¨gs2
);

131  
s
;

132 
	}
}

135 
	$x2ƒóŒoc
(*
p
, 
size_t
 *
n
, size_à
s
)

137 *
n
 = *n == 0 ? 1 : 2 * *n;

138  
	`xªÆloc
(
p
, *
n
 * 
s
);

139 
	}
}

142 
	$xa•rötf
(c⁄° *
f‹m©
, ...)

144 
va_li°
 
¨gs
;

145 *
s
;

147 
	`va_°¨t
(
¨gs
, 
f‹m©
);

148 
s
 = 
	`xva•rötf
(
f‹m©
, 
¨gs
);

149 
	`va_íd
(
¨gs
);

151  
s
;

152 
	}
}

157 
	$ovs_°æ˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
size
)

159 i‡(
size
 > 0) {

160 
size_t
 
Àn
 = 
	`°∫Àn
(
§c
, 
size
 - 1);

161 
	`mem˝y
(
d°
, 
§c
, 
Àn
);

162 
d°
[
Àn
] = '\0';

164 
	}
}

179 
	$ovs_°rz˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
size
)

181 i‡(
size
 > 0) {

182 
size_t
 
Àn
 = 
	`°∫Àn
(
§c
, 
size
 - 1);

183 
	`mem˝y
(
d°
, 
§c
, 
Àn
);

184 
	`mem£t
(
d°
 + 
Àn
, '\0', 
size
 -Üen);

186 
	}
}

198 
	$ovs_ab‹t
(
îr_no
, c⁄° *
f‹m©
, ...)

200 
va_li°
 
¨gs
;

202 
	`va_°¨t
(
¨gs
, 
f‹m©
);

203 
	`ovs_ab‹t_vÆi°
(
îr_no
, 
f‹m©
, 
¨gs
);

204 
	}
}

208 
	$ovs_ab‹t_vÆi°
(
îr_no
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

210 
	`ovs_îr‹_vÆi°
(
îr_no
, 
f‹m©
, 
¨gs
);

211 
	`ab‹t
();

212 
	}
}

221 
	$ovs_Áèl
(
îr_no
, c⁄° *
f‹m©
, ...)

223 
va_li°
 
¨gs
;

225 
	`va_°¨t
(
¨gs
, 
f‹m©
);

226 
	`ovs_Áèl_vÆi°
(
îr_no
, 
f‹m©
, 
¨gs
);

227 
	}
}

231 
	$ovs_Áèl_vÆi°
(
îr_no
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

233 
	`ovs_îr‹_vÆi°
(
îr_no
, 
f‹m©
, 
¨gs
);

234 
	`exô
(
EXIT_FAILURE
);

235 
	}
}

244 
	$ovs_îr‹
(
îr_no
, c⁄° *
f‹m©
, ...)

246 
va_li°
 
¨gs
;

248 
	`va_°¨t
(
¨gs
, 
f‹m©
);

249 
	`ovs_îr‹_vÆi°
(
îr_no
, 
f‹m©
, 
¨gs
);

250 
	`va_íd
(
¨gs
);

251 
	}
}

255 
	$ovs_îr‹_vÆi°
(
îr_no
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

257 
ßve_î∫o
 = 
î∫o
;

259 i‡(
sub¥ogøm_«me
[0]) {

260 
	`Ârötf
(
°dîr
, "%s(%s): ", 
¥ogøm_«me
, 
sub¥ogøm_«me
);

262 
	`Ârötf
(
°dîr
, "%s: ", 
¥ogøm_«me
);

265 
	`vÂrötf
(
°dîr
, 
f‹m©
, 
¨gs
);

266 i‡(
îr_no
 != 0) {

267 
	`Ârötf
(
°dîr
, " (%s)", 
	`ovs_ªtvÆ_to_°rög
(
îr_no
));

269 
	`putc
('\n', 
°dîr
);

271 
î∫o
 = 
ßve_î∫o
;

272 
	}
}

284 
	$ovs_ªtvÆ_to_°rög
(
ªtvÆ
)

286 
unknown
[48];

288 i‡(!
ªtvÆ
) {

291 i‡(
ªtvÆ
 > 0) {

292  
	`°ªº‹
(
ªtvÆ
);

294 i‡(
ªtvÆ
 =
EOF
) {

297 
	`¢¥ötf
(
unknown
,  unknown, "***unknow¿ªtu∫ vÆue: %d***", 
ªtvÆ
);

298  
unknown
;

299 
	}
}

316 
	$£t_¥ogøm_«me__
(c⁄° *
¨gv0
, c⁄° *
vîsi⁄
, c⁄° *
d©e
,

317 c⁄° *
time
)

319 c⁄° *
¶ash
 = 
	`°ºchr
(
¨gv0
, '/');

320 
¥ogøm_«me
 = 
¶ash
 ? sœsh + 1 : 
¨gv0
;

322 
	`‰ì
(
¥ogøm_vîsi⁄
);

324 i‡(!
	`°rcmp
(
vîsi⁄
, 
VERSION
)) {

325 
¥ogøm_vîsi⁄
 = 
	`xa•rötf
("%†(O≥¿vSwôchË"
VERSION
"\n"

327 
¥ogøm_«me
, 
d©e
, 
time
);

329 
¥ogøm_vîsi⁄
 = 
	`xa•rötf
("%s %s\n"

330 "O≥¿vSwôch Libøry "
VERSION
"\n"

332 
¥ogøm_«me
, 
vîsi⁄
, 
d©e
, 
time
);

334 
	}
}

340 
	$gë_¥ogøm_vîsi⁄
()

342  
¥ogøm_vîsi⁄
;

343 
	}
}

347 
	$ovs_¥öt_vîsi⁄
(
uöt8_t
 
mö_oÂ
, uöt8_à
max_oÂ
)

349 
	`¥ötf
("%s", 
¥ogøm_vîsi⁄
);

350 i‡(
mö_oÂ
 || 
max_oÂ
) {

351 
	`¥ötf
("O≥nFlow vîsi⁄†%#x:%#x\n", 
mö_oÂ
, 
max_oÂ
);

353 
	}
}

360 
	$ovs_hex_dump
(
FILE
 *
°ªam
, c⁄° *
buf_
, 
size_t
 
size
,

361 
uöçå_t
 
ofs
, 
boﬁ
 
ascii
)

363 c⁄° 
uöt8_t
 *
buf
 = 
buf_
;

364 c⁄° 
size_t
 
≥r_löe
 = 16;

366 
size
 > 0)

368 
size_t
 
°¨t
, 
íd
, 
n
;

369 
size_t
 
i
;

372 
°¨t
 = 
ofs
 % 
≥r_löe
;

373 
íd
 = 
≥r_löe
;

374 i‡(
íd
 - 
°¨t
 > 
size
)

375 
íd
 = 
°¨t
 + 
size
;

376 
n
 = 
íd
 - 
°¨t
;

379 
	`Ârötf
(
°ªam
, "%08jx ", (
uötmax_t
Ë
	`ROUND_DOWN
(
ofs
, 
≥r_löe
));

380 
i
 = 0; i < 
°¨t
; i++)

381 
	`Ârötf
(
°ªam
, " ");

382 ; 
i
 < 
íd
; i++)

383 
	`Ârötf
(
°ªam
, "%02hhx%c",

384 
buf
[
i
 - 
°¨t
], i =
≥r_löe
 / 2 - 1? '-' : ' ');

385 i‡(
ascii
)

387 ; 
i
 < 
≥r_löe
; i++)

388 
	`Ârötf
(
°ªam
, " ");

389 
	`Ârötf
(
°ªam
, "|");

390 
i
 = 0; i < 
°¨t
; i++)

391 
	`Ârötf
(
°ªam
, " ");

392 ; 
i
 < 
íd
; i++) {

393 
c
 = 
buf
[
i
 - 
°¨t
];

394 
	`putc
(
c
 >32 && c < 127 ? c : '.', 
°ªam
);

396 ; 
i
 < 
≥r_löe
; i++)

397 
	`Ârötf
(
°ªam
, " ");

398 
	`Ârötf
(
°ªam
, "|");

400 
	`Ârötf
(
°ªam
, "\n");

402 
ofs
 +
n
;

403 
buf
 +
n
;

404 
size
 -
n
;

406 
	}
}

408 
boﬁ


409 
	$°r_to_öt
(c⁄° *
s
, 
ba£
, *
i
)

411 
Œ
;

412 
boﬁ
 
ok
 = 
	`°r_to_Œ⁄g
(
s
, 
ba£
, &
Œ
);

413 *
i
 = 
Œ
;

414  
ok
;

415 
	}
}

417 
boﬁ


418 
	$°r_to_l⁄g
(c⁄° *
s
, 
ba£
, *
li
)

420 
Œ
;

421 
boﬁ
 
ok
 = 
	`°r_to_Œ⁄g
(
s
, 
ba£
, &
Œ
);

422 *
li
 = 
Œ
;

423  
ok
;

424 
	}
}

426 
boﬁ


427 
	$°r_to_Œ⁄g
(c⁄° *
s
, 
ba£
, *
x
)

429 
ßve_î∫o
 = 
î∫o
;

430 *
èû
;

431 
î∫o
 = 0;

432 *
x
 = 
	`°πﬁl
(
s
, &
èû
, 
ba£
);

433 i‡(
î∫o
 =
EINVAL
 ||Éºnÿ=
ERANGE
 || 
èû
 =
s
 || *tail != '\0') {

434 
î∫o
 = 
ßve_î∫o
;

435 *
x
 = 0;

436  
Ál£
;

438 
î∫o
 = 
ßve_î∫o
;

439  
åue
;

441 
	}
}

443 
boﬁ


444 
	$°r_to_uöt
(c⁄° *
s
, 
ba£
, *
u
)

446  
	`°r_to_öt
(
s
, 
ba£
, (*Ë
u
);

447 
	}
}

449 
boﬁ


450 
	$°r_to_ul⁄g
(c⁄° *
s
, 
ba£
, *
ul
)

452  
	`°r_to_l⁄g
(
s
, 
ba£
, (*Ë
ul
);

453 
	}
}

455 
boﬁ


456 
	$°r_to_uŒ⁄g
(c⁄° *
s
, 
ba£
, *
uŒ
)

458  
	`°r_to_Œ⁄g
(
s
, 
ba£
, (*Ë
uŒ
);

459 
	}
}

467 
boﬁ


468 
	$°r_to_doubÀ
(c⁄° *
s
, *
d
)

470 
ßve_î∫o
 = 
î∫o
;

471 *
èû
;

472 
î∫o
 = 0;

473 *
d
 = 
	`°πod
(
s
, &
èû
);

474 i‡(
î∫o
 =
EINVAL
 || (î∫ÿ=
ERANGE
 && *
d
 != 0)

475 || 
èû
 =
s
 || *tail != '\0') {

476 
î∫o
 = 
ßve_î∫o
;

477 *
d
 = 0;

478  
Ál£
;

480 
î∫o
 = 
ßve_î∫o
;

481  
åue
;

483 
	}
}

487 
	$hexô_vÆue
(
c
)

489 
c
) {

492  
c
 - '0';

515 
	}
}

522 
	$hexôs_vÆue
(c⁄° *
s
, 
size_t
 
n
, 
boﬁ
 *
ok
)

524 
vÆue
;

525 
size_t
 
i
;

527 
vÆue
 = 0;

528 
i
 = 0; i < 
n
; i++) {

529 
hexô
 = 
	`hexô_vÆue
(
s
[
i
]);

530 i‡(
hexô
 < 0) {

531 i‡(
ok
) {

532 *
ok
 = 
Ál£
;

534  
UINT_MAX
;

536 
vÆue
 = (vÆuê<< 4Ë+ 
hexô
;

538 i‡(
ok
) {

539 *
ok
 = 
åue
;

541  
vÆue
;

542 
	}
}

547 
	$gë_cwd
()

549 
∑th_max
;

550 
size_t
 
size
;

553 
∑th_max
 = 
	`∑thc⁄f
(".", 
_PC_PATH_MAX
);

554 
size
 = (
∑th_max
 < 0 ? 1024

555 : 
∑th_max
 > 10240 ? 10240

556 : 
∑th_max
);

560 *
buf
 = 
	`xmÆloc
(
size
);

561 i‡(
	`gëcwd
(
buf
, 
size
)) {

562  
	`xªÆloc
(
buf
, 
	`°æí
(buf) + 1);

564 
îr‹
 = 
î∫o
;

565 
	`‰ì
(
buf
);

566 i‡(
îr‹
 !
ERANGE
) {

567 
	`VLOG_WARN
("gëcwd faûed (%s)", 
	`°ªº‹
(
îr‹
));

568  
NULL
;

570 
size
 *= 2;

573 
	}
}

576 
	$Æl_¶ashes_«me
(c⁄° *
s
)

578  
	`x°rdup
(
s
[0] == '/' && s[1] == '/' && s[2] != '/' ? "//"

579 : 
s
[0] == '/' ? "/"

581 
	}
}

586 
	$dú_«me
(c⁄° *
fûe_«me
)

588 
size_t
 
Àn
 = 
	`°æí
(
fûe_«me
);

589 
Àn
 > 0 && 
fûe_«me
[len - 1] == '/') {

590 
Àn
--;

592 
Àn
 > 0 && 
fûe_«me
[len - 1] != '/') {

593 
Àn
--;

595 
Àn
 > 0 && 
fûe_«me
[len - 1] == '/') {

596 
Àn
--;

598  
Àn
 ? 
	`xmemdup0
(
fûe_«me
,ÜíË: 
	`Æl_¶ashes_«me
(file_name);

599 
	}
}

604 
	$ba£_«me
(c⁄° *
fûe_«me
)

606 
size_t
 
íd
, 
°¨t
;

608 
íd
 = 
	`°æí
(
fûe_«me
);

609 
íd
 > 0 && 
fûe_«me
[end - 1] == '/') {

610 
íd
--;

613 i‡(!
íd
) {

614  
	`Æl_¶ashes_«me
(
fûe_«me
);

617 
°¨t
 = 
íd
;

618 
°¨t
 > 0 && 
fûe_«me
[start - 1] != '/') {

619 
°¨t
--;

622  
	`xmemdup0
(
fûe_«me
 + 
°¨t
, 
íd
 - start);

623 
	}
}

632 
	$abs_fûe_«me
(c⁄° *
dú
, c⁄° *
fûe_«me
)

634 i‡(
fûe_«me
[0] == '/') {

635  
	`x°rdup
(
fûe_«me
);

636 } i‡(
dú
 && dir[0]) {

637 *
£∑øt‹
 = 
dú
[
	`°æí
(dir) - 1] == '/' ? "" : "/";

638  
	`xa•rötf
("%s%s%s", 
dú
, 
£∑øt‹
, 
fûe_«me
);

640 *
cwd
 = 
	`gë_cwd
();

641 i‡(
cwd
) {

642 *
abs_«me
 = 
	`xa•rötf
("%s/%s", 
cwd
, 
fûe_«me
);

643 
	`‰ì
(
cwd
);

644  
abs_«me
;

646  
NULL
;

649 
	}
}

655 
	$xªadlök
(c⁄° *
fûíame
)

657 
size_t
 
size
;

659 
size
 = 64; ; size *= 2) {

660 *
buf
 = 
	`xmÆloc
(
size
);

661 
ssize_t
 
ªtvÆ
 = 
	`ªadlök
(
fûíame
, 
buf
, 
size
);

662 
îr‹
 = 
î∫o
;

664 i‡(
ªtvÆ
 >0 &&ÑëvÆ < 
size
) {

665 
buf
[
ªtvÆ
] = '\0';

666  
buf
;

669 
	`‰ì
(
buf
);

670 i‡(
ªtvÆ
 < 0) {

671 
î∫o
 = 
îr‹
;

672  
NULL
;

675 
	}
}

688 
	$fﬁlow_symlöks
(c⁄° *
fûíame
)

690 
°©
 
s
;

691 *
‚
;

692 
i
;

694 
‚
 = 
	`x°rdup
(
fûíame
);

695 
i
 = 0; i < 10; i++) {

696 *
lök«me
;

697 *
√xt_‚
;

699 i‡(
	`l°©
(
‚
, &
s
Ë!0 || !
	`S_ISLNK
(s.
°_mode
)) {

700  
‚
;

703 
lök«me
 = 
	`xªadlök
(
‚
);

704 i‡(!
lök«me
) {

705 
	`VLOG_WARN
("%s:Ñódlök faûed (%s)", 
fûíame
, 
	`°ªº‹
(
î∫o
));

706  
‚
;

709 i‡(
lök«me
[0] == '/') {

711 
√xt_‚
 = 
lök«me
;

714 *
dú
 = 
	`dú_«me
(
‚
);

716 i‡(!
	`°rcmp
(
dú
, ".")) {

717 
√xt_‚
 = 
lök«me
;

719 *
£∑øt‹
 = 
dú
[
	`°æí
(dir) - 1] == '/' ? "" : "/";

720 
√xt_‚
 = 
	`xa•rötf
("%s%s%s", 
dú
, 
£∑øt‹
, 
lök«me
);

721 
	`‰ì
(
lök«me
);

724 
	`‰ì
(
dú
);

727 
	`‰ì
(
‚
);

728 
‚
 = 
√xt_‚
;

731 
	`VLOG_WARN
("%s:Åoÿm™yÜevñ†o‡symlöks", 
fûíame
);

732 
	`‰ì
(
‚
);

733  
	`x°rdup
(
fûíame
);

734 
	}
}

740 
	$ign‹e
(
boﬁ
 
x
 
OVS_UNUSED
Ë{ 
	}
}

745 
	$íglish_li°_dñimôî
(
size_t
 
ödex
, size_à
tŸÆ
)

747  (
ödex
 == 0 ? ""

748 : 
ödex
 < 
tŸÆ
 - 1 ? ", "

749 : 
tŸÆ
 > 2 ? ",ánd "

751 
	}
}

757 
	$log_2_Êo‹
(
uöt32_t
 
n
)

759 
	`as£π
(
n
);

761 #i‡!
	`deföed
(
UINT_MAX
Ë|| !deföed(
UINT32_MAX
)

763 #ñi‡
__GNUC__
 >4 && 
UINT_MAX
 =
UINT32_MAX


764  31 - 
	`__buûtö_˛z
(
n
);

767 
log
 = 0;

769 
	#BIN_SEARCH_STEP
(
BITS
) \

770 i‡(
n
 >(1 << 
BITS
)) { \

771 
log
 +
BITS
; \

772 
n
 >>
BITS
; \

773 }

	)

774 
	`BIN_SEARCH_STEP
(16);

775 
	`BIN_SEARCH_STEP
(8);

776 
	`BIN_SEARCH_STEP
(4);

777 
	`BIN_SEARCH_STEP
(2);

778 
	`BIN_SEARCH_STEP
(1);

779 #unde‡
BIN_SEARCH_STEP


780  
log
;

783 
	}
}

788 
	$log_2_˚û
(
uöt32_t
 
n
)

790  
	`log_2_Êo‹
(
n
Ë+ !
	`IS_POW2
(n);

791 
	}
}

794 #i‡!
deföed
(
UINT_MAX
Ë|| !deföed(
UINT32_MAX
)

796 #ñi‡
__GNUC__
 >4 && 
UINT_MAX
 =
UINT32_MAX


800 
	$øw_˘z
(
uöt32_t
 
n
)

802 
k
;

803 
cou¡
 = 31;

805 
	#CTZ_STEP
(
X
) \

806 
k
 = 
n
 << (
X
); \

807 i‡(
k
) { \

808 
cou¡
 -
X
; \

809 
n
 = 
k
; \

810 }

	)

811 
	`CTZ_STEP
(16);

812 
	`CTZ_STEP
(8);

813 
	`CTZ_STEP
(4);

814 
	`CTZ_STEP
(2);

815 
	`CTZ_STEP
(1);

816 #unde‡
CTZ_STEP


818  
cou¡
;

819 
	}
}

824 
	$p›cou¡
(
uöt32_t
 
x
)

830 
	#INIT1
(
X
) \

831 ((((
X
) & (1 << 0)) != 0) + \

832 (((
X
) & (1 << 1)) != 0) + \

833 (((
X
) & (1 << 2)) != 0) + \

834 (((
X
) & (1 << 3)) != 0) + \

835 (((
X
) & (1 << 4)) != 0) + \

836 (((
X
) & (1 << 5)) != 0) + \

837 (((
X
) & (1 << 6)) != 0) + \

838 (((
X
Ë& (1 << 7)Ë!0))

	)

839 
	#INIT2
(
X
Ë
	`INIT1
(X), INIT1((XË+ 1)

	)

840 
	#INIT4
(
X
Ë
	`INIT2
(X), INIT2((XË+ 2)

	)

841 
	#INIT8
(
X
Ë
	`INIT4
(X), INIT4((XË+ 4)

	)

842 
	#INIT16
(
X
Ë
	`INIT8
(X), INIT8((XË+ 8)

	)

843 
	#INIT32
(
X
Ë
	`INIT16
(X), INIT16((XË+ 16)

	)

844 
	#INIT64
(
X
Ë
	`INIT32
(X), INIT32((XË+ 32)

	)

846 c⁄° 
uöt8_t
 
p›cou¡8
[256] = {

847 
	`INIT64
(0), INIT64(64), INIT64(128), INIT64(192)

850  (
p›cou¡8
[
x
 & 0xff] +

851 
p›cou¡8
[(
x
 >> 8) & 0xff] +

852 
p›cou¡8
[(
x
 >> 16) & 0xff] +

853 
p›cou¡8
[
x
 >> 24]);

854 
	}
}

857 
boﬁ


858 
	$is_Æl_zîos
(c⁄° 
uöt8_t
 *
p
, 
size_t
 
n
)

860 
size_t
 
i
;

862 
i
 = 0; i < 
n
; i++) {

863 i‡(
p
[
i
] != 0x00) {

864  
Ál£
;

867  
åue
;

868 
	}
}

871 
boﬁ


872 
	$is_Æl_⁄es
(c⁄° 
uöt8_t
 *
p
, 
size_t
 
n
)

874 
size_t
 
i
;

876 
i
 = 0; i < 
n
; i++) {

877 i‡(
p
[
i
] != 0xff) {

878  
Ál£
;

881  
åue
;

882 
	}
}

900 
	$bôwi£_c›y
(c⁄° *
§c_
, 
§c_Àn
, 
§c_ofs
,

901 *
d°_
, 
d°_Àn
, 
d°_ofs
,

902 
n_bôs
)

904 c⁄° 
uöt8_t
 *
§c
 = 
§c_
;

905 
uöt8_t
 *
d°
 = 
d°_
;

907 
§c
 +
§c_Àn
 - (
§c_ofs
 / 8 + 1);

908 
§c_ofs
 %= 8;

910 
d°
 +
d°_Àn
 - (
d°_ofs
 / 8 + 1);

911 
d°_ofs
 %= 8;

913 i‡(
§c_ofs
 =0 && 
d°_ofs
 == 0) {

914 
n_byãs
 = 
n_bôs
 / 8;

915 i‡(
n_byãs
) {

916 
d°
 -
n_byãs
 - 1;

917 
§c
 -
n_byãs
 - 1;

918 
	`mem˝y
(
d°
, 
§c
, 
n_byãs
);

920 
n_bôs
 %= 8;

921 
§c
--;

922 
d°
--;

924 i‡(
n_bôs
) {

925 
uöt8_t
 
mask
 = (1 << 
n_bôs
) - 1;

926 *
d°
 = (*d° & ~
mask
Ë| (*
§c
 & mask);

929 
n_bôs
 > 0) {

930 
max_c›y
 = 8 - 
	`MAX
(
§c_ofs
, 
d°_ofs
);

931 
chunk
 = 
	`MIN
(
n_bôs
, 
max_c›y
);

932 
uöt8_t
 
mask
 = ((1 << 
chunk
Ë- 1Ë<< 
d°_ofs
;

934 *
d°
 &~
mask
;

935 *
d°
 |((*
§c
 >> 
§c_ofs
Ë<< 
d°_ofs
Ë& 
mask
;

937 
§c_ofs
 +
chunk
;

938 i‡(
§c_ofs
 == 8) {

939 
§c
--;

940 
§c_ofs
 = 0;

942 
d°_ofs
 +
chunk
;

943 i‡(
d°_ofs
 == 8) {

944 
d°
--;

945 
d°_ofs
 = 0;

947 
n_bôs
 -
chunk
;

950 
	}
}

965 
	$bôwi£_zîo
(*
d°_
, 
d°_Àn
, 
d°_ofs
,

966 
n_bôs
)

968 
uöt8_t
 *
d°
 = 
d°_
;

970 i‡(!
n_bôs
) {

974 
d°
 +
d°_Àn
 - (
d°_ofs
 / 8 + 1);

975 
d°_ofs
 %= 8;

977 i‡(
d°_ofs
) {

978 
chunk
 = 
	`MIN
(
n_bôs
, 8 - 
d°_ofs
);

980 *
d°
 &~(((1 << 
chunk
Ë- 1Ë<< 
d°_ofs
);

982 
n_bôs
 -
chunk
;

983 i‡(!
n_bôs
) {

987 
d°
--;

990 
n_bôs
 >= 8) {

991 *
d°
-- = 0;

992 
n_bôs
 -= 8;

995 i‡(
n_bôs
) {

996 *
d°
 &~((1 << 
n_bôs
) - 1);

998 
	}
}

1013 
	$bôwi£_⁄e
(*
d°_
, 
d°_Àn
, 
d°_ofs
,

1014 
n_bôs
)

1016 
uöt8_t
 *
d°
 = 
d°_
;

1018 i‡(!
n_bôs
) {

1022 
d°
 +
d°_Àn
 - (
d°_ofs
 / 8 + 1);

1023 
d°_ofs
 %= 8;

1025 i‡(
d°_ofs
) {

1026 
chunk
 = 
	`MIN
(
n_bôs
, 8 - 
d°_ofs
);

1028 *
d°
 |((1 << 
chunk
Ë- 1Ë<< 
d°_ofs
;

1030 
n_bôs
 -
chunk
;

1031 i‡(!
n_bôs
) {

1035 
d°
--;

1038 
n_bôs
 >= 8) {

1039 *
d°
-- = 0xff;

1040 
n_bôs
 -= 8;

1043 i‡(
n_bôs
) {

1044 *
d°
 |(1 << 
n_bôs
) - 1;

1046 
	}
}

1061 
boﬁ


1062 
	$bôwi£_is_Æl_zîos
(c⁄° *
p_
, 
Àn
, 
ofs
,

1063 
n_bôs
)

1065 c⁄° 
uöt8_t
 *
p
 = 
p_
;

1067 i‡(!
n_bôs
) {

1068  
åue
;

1071 
p
 +
Àn
 - (
ofs
 / 8 + 1);

1072 
ofs
 %= 8;

1074 i‡(
ofs
) {

1075 
chunk
 = 
	`MIN
(
n_bôs
, 8 - 
ofs
);

1077 i‡(*
p
 & (((1 << 
chunk
Ë- 1Ë<< 
ofs
)) {

1078  
Ál£
;

1081 
n_bôs
 -
chunk
;

1082 i‡(!
n_bôs
) {

1083  
åue
;

1086 
p
--;

1089 
n_bôs
 >= 8) {

1090 i‡(*
p
) {

1091  
Ál£
;

1093 
n_bôs
 -= 8;

1094 
p
--;

1097 i‡(
n_bôs
 && *
p
 & ((1 <<Ç_bits) - 1)) {

1098  
Ál£
;

1101  
åue
;

1102 
	}
}

1118 
	$bôwi£_put
(
uöt64_t
 
vÆue
,

1119 *
d°
, 
d°_Àn
, 
d°_ofs
,

1120 
n_bôs
)

1122 
ovs_be64
 
n_vÆue
 = 
	`ht⁄Œ
(
vÆue
);

1123 
	`bôwi£_c›y
(&
n_vÆue
, Ç_value, 0,

1124 
d°
, 
d°_Àn
, 
d°_ofs
,

1125 
n_bôs
);

1126 
	}
}

1141 
uöt64_t


1142 
	$bôwi£_gë
(c⁄° *
§c
, 
§c_Àn
,

1143 
§c_ofs
, 
n_bôs
)

1145 
ovs_be64
 
vÆue
 = 
	`ht⁄Œ
(0);

1147 
	`bôwi£_c›y
(
§c
, 
§c_Àn
, 
§c_ofs
,

1148 &
vÆue
,  value, 0,

1149 
n_bôs
);

1150  
	`¡ohŒ
(
vÆue
);

1151 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/util.h

17 #i‚de‡
UTIL_H


18 
	#UTIL_H
 1

	)

20 
	~<limôs.h
>

21 
	~<°d¨g.h
>

22 
	~<°dboﬁ.h
>

23 
	~<°ddef.h
>

24 
	~<°döt.h
>

25 
	~<°dio.h
>

26 
	~<°rög.h
>

27 
	~"compûî.h
"

29 #i‚de‡
va_c›y


30 #ifde‡
__va_c›y


31 
	#va_c›y
 
__va_c›y


	)

33 
	#va_c›y
(
d°
, 
§c
Ë((d°Ë(§c))

	)

37 #ifde‡
__CHECKER__


38 
	#BUILD_ASSERT
(
EXPR
Ë((Ë0)

	)

39 
	#BUILD_ASSERT_DECL
(
EXPR
Ë(*
	`buûd_as£π
())[1]

	)

40 #ñi‡!
deföed
(
__˝lu•lus
)

42 
	#BUILD_ASSERT__
(
EXPR
) \

43 (°ru˘ { 
buûd_as£π_Áûed
 : (
EXPR
Ë? 1 : -1; })

	)

46 
	#BUILD_ASSERT
(
EXPR
Ë(Ë
	`BUILD_ASSERT__
(EXPR)

	)

49 
	#BUILD_ASSERT_DECL
(
EXPR
) \

50 (*
	`buûd_as£π
())[
	`BUILD_ASSERT__
(
EXPR
)]

	)

52 
	~<boo°/°©ic_as£π.hµ
>

53 
	#BUILD_ASSERT
 
BOOST_STATIC_ASSERT


	)

54 
	#BUILD_ASSERT_DECL
 
BOOST_STATIC_ASSERT


	)

57 #ifde‡
__GNUC__


58 
	#BUILD_ASSERT_GCCONLY
(
EXPR
Ë
	`BUILD_ASSERT
(EXPR)

	)

59 
	#BUILD_ASSERT_DECL_GCCONLY
(
EXPR
Ë
	`BUILD_ASSERT_DECL
(EXPR)

	)

61 
	#BUILD_ASSERT_GCCONLY
(
EXPR
Ë((Ë0)

	)

62 
	#BUILD_ASSERT_DECL_GCCONLY
(
EXPR
Ë((Ë0)

	)

71 
	#CONST_CAST
(
TYPE
, 
POINTER
) \

72 ((Ë ((Ë((
POINTER
Ë=(
TYPE
) (POINTER))), \

73 (
TYPE
Ë(
POINTER
))

	)

75 c⁄° *
¥ogøm_«me
;

76 c⁄° *
sub¥ogøm_«me
;

79 
	#ARRAY_SIZE
(
ARRAY
Ë( ARRAY /  *ARRAY)

	)

82 
	#DIV_ROUND_UP
(
X
, 
Y
Ë(((XË+ ((YË- 1)Ë/ (Y))

	)

85 
	#ROUND_UP
(
X
, 
Y
Ë(
	`DIV_ROUND_UP
(X, YË* (Y))

	)

88 
	#ROUND_DOWN
(
X
, 
Y
Ë((XË/ (YË* (Y))

	)

91 
	#IS_POW2
(
X
Ë((XË&& !((XË& ((XË- 1)))

	)

93 
ölöe
 
boﬁ


94 
	$is_pow2
(
uötmax_t
 
x
)

96  
	`IS_POW2
(
x
);

97 
	}
}

101 
ölöe
 
uötmax_t


102 
	$rightmo°_1bô
(
uötmax_t
 
x
)

104  
x
 & -x;

105 
	}
}

109 
ölöe
 
uötmax_t


110 
	$zîo_rightmo°_1bô
(
uötmax_t
 
x
)

112  
x
 & (x - 1);

113 
	}
}

115 #i‚de‡
MIN


116 
	#MIN
(
X
, 
Y
Ë((XË< (YË? (XË: (Y))

	)

119 #i‚de‡
MAX


120 
	#MAX
(
X
, 
Y
Ë((XË> (YË? (XË: (Y))

	)

123 
	#NOT_REACHED
(Ë
	`ab‹t
()

	)

129 
	#SOURCE_LOCATOR
 
__FILE__
 ":" 
	`STRINGIZE
(
__LINE__
)

	)

130 
	#STRINGIZE
(
ARG
Ë
	`STRINGIZE2
(ARG)

	)

131 
	#STRINGIZE2
(
ARG
Ë#ARG

	)

135 #ifde‡
__GNUC__


136 
	#OVS_TYPEOF
(
OBJECT
Ë
	`ty≥of
(OBJECT)

	)

138 
	#OVS_TYPEOF
(
OBJECT
Ë*

	)

150 #ifde‡
__GNUC__


151 
	#OBJECT_OFFSETOF
(
OBJECT
, 
MEMBER
Ë
	`off£tof
(
	`ty≥of
(*(OBJECT)), MEMBER)

	)

153 
	#OBJECT_OFFSETOF
(
OBJECT
, 
MEMBER
) \

154 ((*Ë&(
OBJECT
)->
MEMBER
 - (*Ë(OBJECT))

	)

159 
	#CONTAINER_OF
(
POINTER
, 
STRUCT
, 
MEMBER
) \

160 ((
STRUCT
 *Ë(*Ë((*Ë(
POINTER
Ë- 
	`off£tof
 (STRUCT, 
MEMBER
)))

	)

169 
	#OBJECT_CONTAINING
(
POINTER
, 
OBJECT
, 
MEMBER
) \

170 ((
	`OVS_TYPEOF
(
OBJECT
)) (*) \

171 ((*Ë(
POINTER
Ë- 
	`OBJECT_OFFSETOF
(
OBJECT
, 
MEMBER
)))

	)

178 
	#ASSIGN_CONTAINER
(
OBJECT
, 
POINTER
, 
MEMBER
) \

179 ((
OBJECT
Ë
	`OBJECT_CONTAINING
(
POINTER
, OBJECT, 
MEMBER
), 1)

	)

181 #ifde‡ 
__˝lu•lus


185 
£t_¥ogøm_«me__
(c⁄° *
«me
, c⁄° *
vîsi⁄
,

186 c⁄° *
d©e
, c⁄° *
time
);

187 
	#£t_¥ogøm_«me
(
«me
) \

188 
	`£t_¥ogøm_«me__
(
«me
, 
VERSION
, 
__DATE__
, 
__TIME__
)

	)

190 c⁄° *
gë_¥ogøm_vîsi⁄
();

191 
ovs_¥öt_vîsi⁄
(
uöt8_t
 
mö_oÂ
, uöt8_à
max_oÂ
);

193 
out_of_mem‹y
(Ë
NO_RETURN
;

194 *
xmÆloc
(
size_t
Ë
MALLOC_LIKE
;

195 *
xˇŒoc
(
size_t
, size_tË
MALLOC_LIKE
;

196 *
xzÆloc
(
size_t
Ë
MALLOC_LIKE
;

197 *
xªÆloc
(*, 
size_t
);

198 *
xmemdup
(c⁄° *, 
size_t
Ë
MALLOC_LIKE
;

199 *
xmemdup0
(c⁄° *, 
size_t
Ë
MALLOC_LIKE
;

200 *
x°rdup
(c⁄° *Ë
MALLOC_LIKE
;

201 *
xa•rötf
(c⁄° *
f‹m©
, ...Ë
PRINTF_FORMAT
(1, 2Ë
MALLOC_LIKE
;

202 *
xva•rötf
(c⁄° *
f‹m©
, 
va_li°
Ë
PRINTF_FORMAT
(1, 0Ë
MALLOC_LIKE
;

203 *
x2ƒóŒoc
(*
p
, 
size_t
 *
n
, size_à
s
);

205 
ovs_°æ˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
size
);

206 
ovs_°rz˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
size
);

208 
ovs_ab‹t
(
îr_no
, c⁄° *
f‹m©
, ...)

209 
PRINTF_FORMAT
(2, 3Ë
NO_RETURN
;

210 
ovs_ab‹t_vÆi°
(
îr_no
, c⁄° *
f‹m©
, 
va_li°
)

211 
PRINTF_FORMAT
(2, 0Ë
NO_RETURN
;

212 
ovs_Áèl
(
îr_no
, c⁄° *
f‹m©
, ...)

213 
PRINTF_FORMAT
(2, 3Ë
NO_RETURN
;

214 
ovs_Áèl_vÆi°
(
îr_no
, c⁄° *
f‹m©
, 
va_li°
)

215 
PRINTF_FORMAT
(2, 0Ë
NO_RETURN
;

216 
ovs_îr‹
(
îr_no
, c⁄° *
f‹m©
, ...Ë
PRINTF_FORMAT
(2, 3);

217 
ovs_îr‹_vÆi°
(
îr_no
, c⁄° *
f‹m©
, 
va_li°
)

218 
PRINTF_FORMAT
(2, 0);

219 c⁄° *
ovs_ªtvÆ_to_°rög
();

220 
ovs_hex_dump
(
FILE
 *, c⁄° *, 
size_t
, 
uöçå_t
 
off£t
, 
boﬁ
 
ascii
);

222 
boﬁ
 
°r_to_öt
(c⁄° *, 
ba£
, *);

223 
boﬁ
 
°r_to_l⁄g
(c⁄° *, 
ba£
, *);

224 
boﬁ
 
°r_to_Œ⁄g
(c⁄° *, 
ba£
, *);

225 
boﬁ
 
°r_to_uöt
(c⁄° *, 
ba£
, *);

226 
boﬁ
 
°r_to_ul⁄g
(c⁄° *, 
ba£
, *);

227 
boﬁ
 
°r_to_uŒ⁄g
(c⁄° *, 
ba£
, *);

229 
boﬁ
 
°r_to_doubÀ
(const *, *);

231 
hexô_vÆue
(
c
);

232 
hexôs_vÆue
(c⁄° *
s
, 
size_t
 
n
, 
boﬁ
 *
ok
);

234 c⁄° *
íglish_li°_dñimôî
(
size_t
 
ödex
, size_à
tŸÆ
);

236 *
gë_cwd
();

237 *
dú_«me
(c⁄° *
fûe_«me
);

238 *
ba£_«me
(c⁄° *
fûe_«me
);

239 *
abs_fûe_«me
(c⁄° *
dú
, c⁄° *
fûe_«me
);

241 *
xªadlök
(c⁄° *
fûíame
);

242 *
fﬁlow_symlöks
(c⁄° *
fûíame
);

244 
ign‹e
(
boﬁ
 
x
 
OVS_UNUSED
);

249 #i‡!
deföed
(
UINT_MAX
Ë|| !deföed(
UINT32_MAX
)

251 #ñi‡
__GNUC__
 >4 && 
UINT_MAX
 =
UINT32_MAX


252 
ölöe
 

253 
øw_˘z
(
uöt32_t
 
n
)

255  
__buûtö_˘z
(
n
);

259 
øw_˘z
(
uöt32_t
 
n
);

263 
ölöe
 

264 
˘z
(
uöt32_t
 
n
)

266  
n
 ? 
øw_˘z
(n) : 32;

269 
log_2_Êo‹
(
uöt32_t
);

270 
log_2_˚û
(
uöt32_t
);

271 
p›cou¡
(
uöt32_t
);

273 
boﬁ
 
is_Æl_zîos
(c⁄° 
uöt8_t
 *, 
size_t
);

274 
boﬁ
 
is_Æl_⁄es
(c⁄° 
uöt8_t
 *, 
size_t
);

275 
bôwi£_c›y
(c⁄° *
§c
, 
§c_Àn
, 
§c_ofs
,

276 *
d°
, 
d°_Àn
, 
d°_ofs
,

277 
n_bôs
);

278 
bôwi£_zîo
(*
d°_
, 
d°_Àn
, 
d°_ofs
,

279 
n_bôs
);

280 
bôwi£_⁄e
(*
d°_
, 
d°_Àn
, 
d°_ofs
,

281 
n_bôs
);

282 
boﬁ
 
bôwi£_is_Æl_zîos
(c⁄° *, 
Àn
, 
ofs
,

283 
n_bôs
);

284 
bôwi£_put
(
uöt64_t
 
vÆue
,

285 *
d°
, 
d°_Àn
, 
d°_ofs
,

286 
n_bôs
);

287 
uöt64_t
 
bôwi£_gë
(c⁄° *
§c
, 
§c_Àn
,

288 
§c_ofs
, 
n_bôs
);

290 #ifde‡ 
__˝lu•lus


	@/home/lsch/mytest/openvswitch-1.9.0/lib/uuid.c

16 
	~<c⁄fig.h
>

18 
	~"uuid.h
"

20 
	~<˘y≥.h
>

21 
	~<î∫o.h
>

22 
	~<f˙é.h
>

23 
	~<sys/time.h
>

24 
	~<sys/ty≥s.h
>

25 
	~<uni°d.h
>

27 
	~"´s128.h
"

28 
	~"íå›y.h
"

29 
	~"sha1.h
"

30 
	~"timevÆ.h
"

31 
	~"utû.h
"

33 
´s128
 
	gkey
;

34 
uöt64_t
 
	gcou¡î
[2];

35 
BUILD_ASSERT_DECL
( 
cou¡î
 == 16);

37 
do_öô
();

50 
	$uuid_öô
()

52 
boﬁ
 
öôed
;

53 i‡(!
öôed
) {

54 
	`do_öô
();

55 
öôed
 = 
åue
;

57 
	}
}

84 
	$uuid_gíî©e
(
uuid
 *uuid)

86 
	`uuid_öô
();

89 i‡(++
cou¡î
[1] == 0) {

90 
cou¡î
[0]++;

94 
	`´s128_í¸y±
(&
key
, 
cou¡î
, 
uuid
);

97 
uuid
->
∑πs
[2] &= ~0xc0000000;

98 
uuid
->
∑πs
[2] |= 0x80000000;

99 
uuid
->
∑πs
[1] &= ~0x0000f000;

100 
uuid
->
∑πs
[1] |= 0x00004000;

101 
	}
}

105 
	$uuid_zîo
(
uuid
 *uuid)

107 
uuid
->
∑πs
[0] = uuid->parts[1] = uuid->parts[2] = uuid->parts[3] = 0;

108 
	}
}

111 
boﬁ


112 
	$uuid_is_zîo
(c⁄° 
uuid
 *uuid)

114  (!
uuid
->
∑πs
[0] && !uuid->parts[1]

115 && !
uuid
->
∑πs
[2] && !uuid->parts[3]);

116 
	}
}

122 
	$uuid_com∑ª_3way
(c⁄° 
uuid
 *
a
, c⁄° uuid *
b
)

124 i‡(
a
->
∑πs
[0] !
b
->parts[0]) {

125  
a
->
∑πs
[0] > 
b
->parts[0] ? 1 : -1;

126 } i‡(
a
->
∑πs
[1] !
b
->parts[1]) {

127  
a
->
∑πs
[1] > 
b
->parts[1] ? 1 : -1;

128 } i‡(
a
->
∑πs
[2] !
b
->parts[2]) {

129  
a
->
∑πs
[2] > 
b
->parts[2] ? 1 : -1;

130 } i‡(
a
->
∑πs
[3] !
b
->parts[3]) {

131  
a
->
∑πs
[3] > 
b
->parts[3] ? 1 : -1;

135 
	}
}

141 
boﬁ


142 
	$uuid_‰om_°rög
(
uuid
 *uuid, c⁄° *
s
)

144 i‡(!
	`uuid_‰om_°rög_¥efix
(
uuid
, 
s
)) {

145  
Ál£
;

146 } i‡(
s
[
UUID_LEN
] != '\0') {

147 
	`uuid_zîo
(
uuid
);

148  
Ál£
;

150  
åue
;

152 
	}
}

157 
boﬁ


158 
	$uuid_‰om_°rög_¥efix
(
uuid
 *uuid, c⁄° *
s
)

165 
boﬁ
 
ok
;

167 
uuid
->
∑πs
[0] = 
	`hexôs_vÆue
(
s
, 8, &
ok
);

168 i‡(!
ok
 || 
s
[8] != '-') {

169 
îr‹
;

172 
uuid
->
∑πs
[1] = 
	`hexôs_vÆue
(
s
 + 9, 4, &
ok
) << 16;

173 i‡(!
ok
 || 
s
[13] != '-') {

174 
îr‹
;

177 
uuid
->
∑πs
[1] +
	`hexôs_vÆue
(
s
 + 14, 4, &
ok
);

178 i‡(!
ok
 || 
s
[18] != '-') {

179 
îr‹
;

182 
uuid
->
∑πs
[2] = 
	`hexôs_vÆue
(
s
 + 19, 4, &
ok
) << 16;

183 i‡(!
ok
 || 
s
[23] != '-') {

184 
îr‹
;

187 
uuid
->
∑πs
[2] +
	`hexôs_vÆue
(
s
 + 24, 4, &
ok
);

188 i‡(!
ok
) {

189 
îr‹
;

192 
uuid
->
∑πs
[3] = 
	`hexôs_vÆue
(
s
 + 28, 8, &
ok
);

193 i‡(!
ok
) {

194 
îr‹
;

196  
åue
;

198 
îr‹
:

199 
	`uuid_zîo
(
uuid
);

200  
Ál£
;

201 
	}
}

204 
	$do_öô
()

206 
uöt8_t
 
sha1
[
SHA1_DIGEST_SIZE
];

207 
sha1_˘x
 sha1_ctx;

208 
uöt8_t
 
øndom_£ed
[16];

209 
timevÆ
 
now
;

210 
pid_t
 
pid
, 
µid
;

211 
uid_t
 
uid
;

212 
gid_t
 
gid
;

215 
	`gë_íå›y_‹_dõ
(
øndom_£ed
, Ñandom_seed);

216 
	`xgëtimeofday
(&
now
);

217 
pid
 = 
	`gëpid
();

218 
µid
 = 
	`gëµid
();

219 
uid
 = 
	`gëuid
();

220 
gid
 = 
	`gëgid
();

223 
	`sha1_öô
(&
sha1_˘x
);

224 
	`sha1_upd©e
(&
sha1_˘x
, 
øndom_£ed
, Ñandom_seed);

225 
	`sha1_upd©e
(&
sha1_˘x
, &
pid
, Öid);

226 
	`sha1_upd©e
(&
sha1_˘x
, &
µid
, Öpid);

227 
	`sha1_upd©e
(&
sha1_˘x
, &
uid
,  uid);

228 
	`sha1_upd©e
(&
sha1_˘x
, &
gid
,  gid);

229 
	`sha1_föÆ
(&
sha1_˘x
, 
sha1
);

232 
	`BUILD_ASSERT
( 
sha1
 >= 16);

233 
	`´s128_scheduÀ
(&
key
, 
sha1
);

236 
	`gë_íå›y_‹_dõ
(
cou¡î
,  counter);

237 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/uuid.h

16 #i‚de‡
UUID_H


17 
	#UUID_H
 1

	)

19 
	~<°dboﬁ.h
>

20 
	~<°ddef.h
>

21 
	~<°döt.h
>

22 
	~"utû.h
"

24 
	#UUID_BIT
 128

	)

25 
	#UUID_OCTET
 (
UUID_BIT
 / 8Ë

	)

33 
	suuid
 {

34 
uöt32_t
 
	m∑πs
[4];

36 
BUILD_ASSERT_DECL
((
uuid
Ë=
UUID_OCTET
);

45 
	#UUID_LEN
 36

	)

46 
	#UUID_FMT
 "%08x-%04x-%04x-%04x-%04x%08x"

	)

47 
	#UUID_ARGS
(
UUID
) \

48 ((Ë((
UUID
)->
∑πs
[0])), \

49 ((Ë((
UUID
)->
∑πs
[1] >> 16)), \

50 ((Ë((
UUID
)->
∑πs
[1] & 0xffff)), \

51 ((Ë((
UUID
)->
∑πs
[2] >> 16)), \

52 ((Ë((
UUID
)->
∑πs
[2] & 0xffff)), \

53 ((Ë((
UUID
)->
∑πs
[3]))

	)

58 
ölöe
 
size_t


59 
	$uuid_hash
(c⁄° 
uuid
 *uuid)

61  
uuid
->
∑πs
[0];

62 
	}
}

65 
ölöe
 
boﬁ


66 
	$uuid_equÆs
(c⁄° 
uuid
 *
a
, c⁄° uuid *
b
)

68  (
a
->
∑πs
[0] =
b
->parts[0]

69 && 
a
->
∑πs
[1] =
b
->parts[1]

70 && 
a
->
∑πs
[2] =
b
->parts[2]

71 && 
a
->
∑πs
[3] =
b
->parts[3]);

72 
	}
}

74 
uuid_öô
();

75 
uuid_gíî©e
(
uuid
 *);

76 
uuid_zîo
(
uuid
 *);

77 
boﬁ
 
uuid_is_zîo
(c⁄° 
uuid
 *);

78 
uuid_com∑ª_3way
(c⁄° 
uuid
 *, const uuid *);

79 
boﬁ
 
uuid_‰om_°rög
(
uuid
 *, const *);

80 
boﬁ
 
uuid_‰om_°rög_¥efix
(
uuid
 *, const *);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/valgrind.h

17 #i‚de‡
VALGRIND_H


18 
	#VALGRIND_H
 1

	)

20 #ifde‡
HAVE_VALGRIND_VALGRIND_H


21 
	~<vÆgröd/vÆgröd.h
>

23 
	#RUNNING_ON_VALGRIND
 0

	)

	@/home/lsch/mytest/openvswitch-1.9.0/lib/vconn-provider.h

17 #i‚de‡
VCONN_PROVIDER_H


18 
	#VCONN_PROVIDER_H
 1

	)

23 
	~<as£π.h
>

24 
	~"vc⁄n.h
"

25 
	~"›íÊow/›íÊow-comm⁄.h
"

32 
	svc⁄n
 {

33 
vc⁄n_˛ass
 *
	m˛ass
;

34 
	m°©e
;

35 
	mîr‹
;

36 
oÂ_vîsi⁄
 
	mmö_vîsi⁄
;

37 
oÂ_vîsi⁄
 
	mvîsi⁄
;

38 
ovs_be32
 
	mªmŸe_ù
;

39 
ovs_be16
 
	mªmŸe_p‹t
;

40 
ovs_be32
 
	mloˇl_ù
;

41 
ovs_be16
 
	mloˇl_p‹t
;

42 *
	m«me
;

45 
vc⁄n_öô
(
vc⁄n
 *, 
vc⁄n_˛ass
 *, 
c⁄√˘_°©us
,

46 c⁄° *
«me
);

47 
vc⁄n_£t_ªmŸe_ù
(
vc⁄n
 *, 
ovs_be32
 
ªmŸe_ù
);

48 
vc⁄n_£t_ªmŸe_p‹t
(
vc⁄n
 *, 
ovs_be16
 
ªmŸe_p‹t
);

49 
vc⁄n_£t_loˇl_ù
(
vc⁄n
 *, 
ovs_be32
 
loˇl_ù
);

50 
vc⁄n_£t_loˇl_p‹t
(
vc⁄n
 *, 
ovs_be16
 
loˇl_p‹t
);

51 
ölöe
 
	$vc⁄n_as£π_˛ass
(c⁄° 
vc⁄n
 *vconn,

52 c⁄° 
vc⁄n_˛ass
 *
˛ass
)

54 
	`as£π
(
vc⁄n
->
˛ass
 == class);

55 
	}
}

57 
	svc⁄n_˛ass
 {

59 c⁄° *
	m«me
;

76 (*
	m›í
)(c⁄° *
	m«me
, *
	msuffix
, 
vc⁄n
 **
	mvc⁄≈
,

77 
uöt8_t
 
	mds˝
);

80 (*
	m˛o£
)(
vc⁄n
 *
	mvc⁄n
);

89 (*
	mc⁄√˘
)(
vc⁄n
 *
	mvc⁄n
);

101 (*
	mªcv
)(
vc⁄n
 *
	mvc⁄n
, 
oÂbuf
 **
	mmsgp
);

113 (*
	m£nd
)(
vc⁄n
 *
	mvc⁄n
, 
oÂbuf
 *
	mmsg
);

119 (*
	mrun
)(
vc⁄n
 *
	mvc⁄n
);

125 (*
	mrun_waô
)(
vc⁄n
 *
	mvc⁄n
);

129 (*
	mwaô
)(
vc⁄n
 *
	mvc⁄n
, 
vc⁄n_waô_ty≥
 
	mty≥
);

135 
	spvc⁄n
 {

136 
pvc⁄n_˛ass
 *
	m˛ass
;

137 *
	m«me
;

140 
pvc⁄n_öô
(
pvc⁄n
 *, 
pvc⁄n_˛ass
 *, c⁄° *
«me
);

141 
ölöe
 
	$pvc⁄n_as£π_˛ass
(c⁄° 
pvc⁄n
 *pvconn,

142 c⁄° 
pvc⁄n_˛ass
 *
˛ass
)

144 
	`as£π
(
pvc⁄n
->
˛ass
 == class);

145 
	}
}

147 
	spvc⁄n_˛ass
 {

149 c⁄° *
	m«me
;

166 (*
	mli°í
)(c⁄° *
	m«me
, *
	msuffix
, 
pvc⁄n
 **
	mpvc⁄≈
,

167 
uöt8_t
 
	mds˝
);

170 (*
	m˛o£
)(
pvc⁄n
 *
	mpvc⁄n
);

178 (*
	mac˚±
)(
pvc⁄n
 *
	mpvc⁄n
, 
vc⁄n
 **
	m√w_vc⁄≈
);

182 (*
	mwaô
)(
pvc⁄n
 *
	mpvc⁄n
);

186 
vc⁄n_˛ass
 
t˝_vc⁄n_˛ass
;

187 
pvc⁄n_˛ass
 
±˝_pvc⁄n_˛ass
;

188 
vc⁄n_˛ass
 
unix_vc⁄n_˛ass
;

189 
pvc⁄n_˛ass
 
punix_pvc⁄n_˛ass
;

190 #ifde‡
HAVE_OPENSSL


191 
vc⁄n_˛ass
 
s¶_vc⁄n_˛ass
;

192 
pvc⁄n_˛ass
 
ps¶_pvc⁄n_˛ass
;

	@/home/lsch/mytest/openvswitch-1.9.0/lib/vconn-stream.c

17 
	~<c⁄fig.h
>

18 
	~<as£π.h
>

19 
	~<î∫o.h
>

20 
	~<pﬁl.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/ty≥s.h
>

24 
	~<uni°d.h
>

25 
	~"Áèl-sig«l.h
"

26 
	~"Àak-checkî.h
"

27 
	~"oÂbuf.h
"

28 
	~"›íÊow/›íÊow.h
"

29 
	~"pﬁl-lo›.h
"

30 
	~"sockë-utû.h
"

31 
	~"°ªam.h
"

32 
	~"utû.h
"

33 
	~"vc⁄n-¥ovidî.h
"

34 
	~"vc⁄n.h
"

35 
	~"vlog.h
"

37 
VLOG_DEFINE_THIS_MODULE
(
vc⁄n_°ªam
);

41 
	svc⁄n_°ªam


43 
vc⁄n
 
	mvc⁄n
;

44 
°ªam
 *
	m°ªam
;

45 
oÂbuf
 *
	mrxbuf
;

46 
oÂbuf
 *
	mtxbuf
;

47 
	mn_∑ckës
;

50 
vc⁄n_˛ass
 
	g°ªam_vc⁄n_˛ass
;

52 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(10, 25);

54 
vc⁄n_°ªam_˛ór_txbuf
(
vc⁄n_°ªam
 *);

56 
vc⁄n
 *

57 
	$vc⁄n_°ªam_√w
(
°ªam
 *°ªam, 
c⁄√˘_°©us
)

59 
vc⁄n_°ªam
 *
s
;

61 
s
 = 
	`xmÆloc
( *s);

62 
	`vc⁄n_öô
(&
s
->
vc⁄n
, &
°ªam_vc⁄n_˛ass
, 
c⁄√˘_°©us
,

63 
	`°ªam_gë_«me
(
°ªam
));

64 
s
->
°ªam
 = stream;

65 
s
->
txbuf
 = 
NULL
;

66 
s
->
rxbuf
 = 
NULL
;

67 
s
->
n_∑ckës
 = 0;

68 
s
->
vc⁄n
.
ªmŸe_ù
 = 
	`°ªam_gë_ªmŸe_ù
(
°ªam
);

69 
s
->
vc⁄n
.
ªmŸe_p‹t
 = 
	`°ªam_gë_ªmŸe_p‹t
(
°ªam
);

70 
s
->
vc⁄n
.
loˇl_ù
 = 
	`°ªam_gë_loˇl_ù
(
°ªam
);

71 
s
->
vc⁄n
.
loˇl_p‹t
 = 
	`°ªam_gë_loˇl_p‹t
(
°ªam
);

72  &
s
->
vc⁄n
;

73 
	}
}

80 
	$vc⁄n_°ªam_›í
(c⁄° *
«me
, *
suffix
 
OVS_UNUSED
,

81 
vc⁄n
 **
vc⁄≈
, 
uöt8_t
 
ds˝
)

83 
°ªam
 *stream;

84 
îr‹
;

86 
îr‹
 = 
	`°ªam_›í_wôh_deÁu…_p‹ts
(
«me
, 
OFP_TCP_PORT
, 
OFP_SSL_PORT
,

87 &
°ªam
, 
ds˝
);

88 i‡(!
îr‹
) {

89 
îr‹
 = 
	`°ªam_c⁄√˘
(
°ªam
);

90 i‡(!
îr‹
 ||Éº‹ =
EAGAIN
) {

91 *
vc⁄≈
 = 
	`vc⁄n_°ªam_√w
(
°ªam
, 
îr‹
);

96 
	`°ªam_˛o£
(
°ªam
);

97  
îr‹
;

98 
	}
}

100 
vc⁄n_°ªam
 *

101 
	$vc⁄n_°ªam_ˇ°
(
vc⁄n
 *vconn)

103  
	`CONTAINER_OF
(
vc⁄n
, 
vc⁄n_°ªam
, vconn);

104 
	}
}

107 
	$vc⁄n_°ªam_˛o£
(
vc⁄n
 *vconn)

109 
vc⁄n_°ªam
 *
s
 = 
	`vc⁄n_°ªam_ˇ°
(
vc⁄n
);

111 i‡((
vc⁄n
->
îr‹
 =
EPROTO
 || 
s
->
n_∑ckës
 < 1Ë&& s->
rxbuf
) {

112 
	`°ªam_ªp‹t_c⁄ã¡
(
s
->
rxbuf
->
d©a
, s->rxbuf->
size
, 
STREAM_OPENFLOW
,

113 
THIS_MODULE
, 
	`vc⁄n_gë_«me
(
vc⁄n
));

116 
	`°ªam_˛o£
(
s
->
°ªam
);

117 
	`vc⁄n_°ªam_˛ór_txbuf
(
s
);

118 
	`oÂbuf_dñëe
(
s
->
rxbuf
);

119 
	`‰ì
(
s
);

120 
	}
}

123 
	$vc⁄n_°ªam_c⁄√˘
(
vc⁄n
 *vconn)

125 
vc⁄n_°ªam
 *
s
 = 
	`vc⁄n_°ªam_ˇ°
(
vc⁄n
);

126  
	`°ªam_c⁄√˘
(
s
->
°ªam
);

127 
	}
}

130 
	$vc⁄n_°ªam_ªcv__
(
vc⁄n_°ªam
 *
s
, 
rx_Àn
)

132 
oÂbuf
 *
rx
 = 
s
->
rxbuf
;

133 
w™t_byãs
, 
ªtvÆ
;

135 
w™t_byãs
 = 
rx_Àn
 - 
rx
->
size
;

136 
	`oÂbuf_¥óŒoc_èûroom
(
rx
, 
w™t_byãs
);

137 
ªtvÆ
 = 
	`°ªam_ªcv
(
s
->
°ªam
, 
	`oÂbuf_èû
(
rx
), 
w™t_byãs
);

138 i‡(
ªtvÆ
 > 0) {

139 
rx
->
size
 +
ªtvÆ
;

140  
ªtvÆ
 =
w™t_byãs
 ? 0 : 
EAGAIN
;

141 } i‡(
ªtvÆ
 == 0) {

142 i‡(
rx
->
size
) {

143 
	`VLOG_ERR_RL
(&
æ
, "connection dropped mid-packet");

144  
EPROTO
;

146  
EOF
;

148  -
ªtvÆ
;

150 
	}
}

153 
	$vc⁄n_°ªam_ªcv
(
vc⁄n
 *vc⁄n, 
oÂbuf
 **
buf„Ω
)

155 
vc⁄n_°ªam
 *
s
 = 
	`vc⁄n_°ªam_ˇ°
(
vc⁄n
);

156 c⁄° 
oÂ_hódî
 *
oh
;

157 
rx_Àn
;

160 i‡(
s
->
rxbuf
 =
NULL
) {

161 
s
->
rxbuf
 = 
	`oÂbuf_√w
(1564);

165 i‡(
s
->
rxbuf
->
size
 < (
oÂ_hódî
)) {

166 
ªtvÆ
 = 
	`vc⁄n_°ªam_ªcv__
(
s
, (
oÂ_hódî
));

167 i‡(
ªtvÆ
) {

168  
ªtvÆ
;

173 
oh
 = 
s
->
rxbuf
->
d©a
;

174 
rx_Àn
 = 
	`¡ohs
(
oh
->
Àngth
);

175 i‡(
rx_Àn
 < (
oÂ_hódî
)) {

176 
	`VLOG_ERR_RL
(&
æ
, "ª˚ivedÅoo-sh‹àoÂ_hódî (%d byãs)", 
rx_Àn
);

177  
EPROTO
;

178 } i‡(
s
->
rxbuf
->
size
 < 
rx_Àn
) {

179 
ªtvÆ
 = 
	`vc⁄n_°ªam_ªcv__
(
s
, 
rx_Àn
);

180 i‡(
ªtvÆ
) {

181  
ªtvÆ
;

185 
s
->
n_∑ckës
++;

186 *
buf„Ω
 = 
s
->
rxbuf
;

187 
s
->
rxbuf
 = 
NULL
;

189 
	}
}

192 
	$vc⁄n_°ªam_˛ór_txbuf
(
vc⁄n_°ªam
 *
s
)

194 
	`oÂbuf_dñëe
(
s
->
txbuf
);

195 
s
->
txbuf
 = 
NULL
;

196 
	}
}

199 
	$vc⁄n_°ªam_£nd
(
vc⁄n
 *vc⁄n, 
oÂbuf
 *
buf„r
)

201 
vc⁄n_°ªam
 *
s
 = 
	`vc⁄n_°ªam_ˇ°
(
vc⁄n
);

202 
ssize_t
 
ªtvÆ
;

204 i‡(
s
->
txbuf
) {

205  
EAGAIN
;

208 
ªtvÆ
 = 
	`°ªam_£nd
(
s
->
°ªam
, 
buf„r
->
d©a
, buf„r->
size
);

209 i‡(
ªtvÆ
 =
buf„r
->
size
) {

210 
	`oÂbuf_dñëe
(
buf„r
);

212 } i‡(
ªtvÆ
 >0 ||ÑëvÆ =-
EAGAIN
) {

213 
	`Àak_checkî_˛aim
(
buf„r
);

214 
s
->
txbuf
 = 
buf„r
;

215 i‡(
ªtvÆ
 > 0) {

216 
	`oÂbuf_puŒ
(
buf„r
, 
ªtvÆ
);

220  -
ªtvÆ
;

222 
	}
}

225 
	$vc⁄n_°ªam_run
(
vc⁄n
 *vconn)

227 
vc⁄n_°ªam
 *
s
 = 
	`vc⁄n_°ªam_ˇ°
(
vc⁄n
);

228 
ssize_t
 
ªtvÆ
;

230 
	`°ªam_run
(
s
->
°ªam
);

231 i‡(!
s
->
txbuf
) {

235 
ªtvÆ
 = 
	`°ªam_£nd
(
s
->
°ªam
, s->
txbuf
->
d©a
, s->txbuf->
size
);

236 i‡(
ªtvÆ
 < 0) {

237 i‡(
ªtvÆ
 !-
EAGAIN
) {

238 
	`VLOG_ERR_RL
(&
æ
, "£nd: %s", 
	`°ªº‹
(-
ªtvÆ
));

239 
	`vc⁄n_°ªam_˛ór_txbuf
(
s
);

242 } i‡(
ªtvÆ
 > 0) {

243 
	`oÂbuf_puŒ
(
s
->
txbuf
, 
ªtvÆ
);

244 i‡(!
s
->
txbuf
->
size
) {

245 
	`vc⁄n_°ªam_˛ór_txbuf
(
s
);

249 
	}
}

252 
	$vc⁄n_°ªam_run_waô
(
vc⁄n
 *vconn)

254 
vc⁄n_°ªam
 *
s
 = 
	`vc⁄n_°ªam_ˇ°
(
vc⁄n
);

256 
	`°ªam_run_waô
(
s
->
°ªam
);

257 i‡(
s
->
txbuf
) {

258 
	`°ªam_£nd_waô
(
s
->
°ªam
);

260 
	}
}

263 
	$vc⁄n_°ªam_waô
(
vc⁄n
 *vc⁄n, 
vc⁄n_waô_ty≥
 
waô
)

265 
vc⁄n_°ªam
 *
s
 = 
	`vc⁄n_°ªam_ˇ°
(
vc⁄n
);

266 
waô
) {

267 
WAIT_CONNECT
:

268 
	`°ªam_c⁄√˘_waô
(
s
->
°ªam
);

271 
WAIT_SEND
:

272 i‡(!
s
->
txbuf
) {

273 
	`°ªam_£nd_waô
(
s
->
°ªam
);

282 
WAIT_RECV
:

283 
	`°ªam_ªcv_waô
(
s
->
°ªam
);

287 
	`NOT_REACHED
();

289 
	}
}

293 
	spvc⁄n_p°ªam


295 
pvc⁄n
 
	mpvc⁄n
;

296 
p°ªam
 *
	mp°ªam
;

299 
pvc⁄n_˛ass
 
	gp°ªam_pvc⁄n_˛ass
;

301 
pvc⁄n_p°ªam
 *

302 
	$pvc⁄n_p°ªam_ˇ°
(
pvc⁄n
 *pvconn)

304  
	`CONTAINER_OF
(
pvc⁄n
, 
pvc⁄n_p°ªam
,Övconn);

305 
	}
}

313 
	$pvc⁄n_p°ªam_li°í
(c⁄° *
«me
, *
suffix
 
OVS_UNUSED
,

314 
pvc⁄n
 **
pvc⁄≈
, 
uöt8_t
 
ds˝
)

316 
pvc⁄n_p°ªam
 *
ps
;

317 
p°ªam
 *pstream;

318 
îr‹
;

320 
îr‹
 = 
	`p°ªam_›í_wôh_deÁu…_p‹ts
(
«me
, 
OFP_TCP_PORT
, 
OFP_SSL_PORT
,

321 &
p°ªam
, 
ds˝
);

322 i‡(
îr‹
) {

323  
îr‹
;

326 
ps
 = 
	`xmÆloc
( *ps);

327 
	`pvc⁄n_öô
(&
ps
->
pvc⁄n
, &
p°ªam_pvc⁄n_˛ass
, 
«me
);

328 
ps
->
p°ªam
 =Östream;

329 *
pvc⁄≈
 = &
ps
->
pvc⁄n
;

331 
	}
}

334 
	$pvc⁄n_p°ªam_˛o£
(
pvc⁄n
 *pvconn)

336 
pvc⁄n_p°ªam
 *
ps
 = 
	`pvc⁄n_p°ªam_ˇ°
(
pvc⁄n
);

337 
	`p°ªam_˛o£
(
ps
->
p°ªam
);

338 
	`‰ì
(
ps
);

339 
	}
}

342 
	$pvc⁄n_p°ªam_ac˚±
(
pvc⁄n
 *pvc⁄n, 
vc⁄n
 **
√w_vc⁄≈
)

344 
pvc⁄n_p°ªam
 *
ps
 = 
	`pvc⁄n_p°ªam_ˇ°
(
pvc⁄n
);

345 
°ªam
 *stream;

346 
îr‹
;

348 
îr‹
 = 
	`p°ªam_ac˚±
(
ps
->
p°ªam
, &
°ªam
);

349 i‡(
îr‹
) {

350 i‡(
îr‹
 !
EAGAIN
) {

351 
	`VLOG_DBG_RL
(&
æ
, "%s:áccept: %s",

352 
	`p°ªam_gë_«me
(
ps
->
p°ªam
), 
	`°ªº‹
(
îr‹
));

354  
îr‹
;

357 *
√w_vc⁄≈
 = 
	`vc⁄n_°ªam_√w
(
°ªam
, 0);

359 
	}
}

362 
	$pvc⁄n_p°ªam_waô
(
pvc⁄n
 *pvconn)

364 
pvc⁄n_p°ªam
 *
ps
 = 
	`pvc⁄n_p°ªam_ˇ°
(
pvc⁄n
);

365 
	`p°ªam_waô
(
ps
->
p°ªam
);

366 
	}
}

370 
	#STREAM_INIT
(
NAME
) \

372 
NAME
, \

373 
vc⁄n_°ªam_›í
, \

374 
vc⁄n_°ªam_˛o£
, \

375 
vc⁄n_°ªam_c⁄√˘
, \

376 
vc⁄n_°ªam_ªcv
, \

377 
vc⁄n_°ªam_£nd
, \

378 
vc⁄n_°ªam_run
, \

379 
vc⁄n_°ªam_run_waô
, \

380 
vc⁄n_°ªam_waô
, \

381 }

	)

383 
	#PSTREAM_INIT
(
NAME
) \

385 
NAME
, \

386 
pvc⁄n_p°ªam_li°í
, \

387 
pvc⁄n_p°ªam_˛o£
, \

388 
pvc⁄n_p°ªam_ac˚±
, \

389 
pvc⁄n_p°ªam_waô
 \

390 }

	)

392 
vc⁄n_˛ass
 
	g°ªam_vc⁄n_˛ass
 = 
STREAM_INIT
("stream");

393 
pvc⁄n_˛ass
 
	gp°ªam_pvc⁄n_˛ass
 = 
PSTREAM_INIT
("pstream");

395 
vc⁄n_˛ass
 
	gt˝_vc⁄n_˛ass
 = 
STREAM_INIT
("tcp");

396 
pvc⁄n_˛ass
 
	g±˝_pvc⁄n_˛ass
 = 
PSTREAM_INIT
("ptcp");

398 
vc⁄n_˛ass
 
	gunix_vc⁄n_˛ass
 = 
STREAM_INIT
("unix");

399 
pvc⁄n_˛ass
 
	gpunix_pvc⁄n_˛ass
 = 
PSTREAM_INIT
("punix");

401 #ifde‡
HAVE_OPENSSL


402 
vc⁄n_˛ass
 
	gs¶_vc⁄n_˛ass
 = 
STREAM_INIT
("ssl");

403 
pvc⁄n_˛ass
 
	gps¶_pvc⁄n_˛ass
 = 
PSTREAM_INIT
("pssl");

	@/home/lsch/mytest/openvswitch-1.9.0/lib/vconn.c

17 
	~<c⁄fig.h
>

18 
	~"vc⁄n-¥ovidî.h
"

19 
	~<as£π.h
>

20 
	~<î∫o.h
>

21 
	~<öây≥s.h
>

22 
	~<√töë/ö.h
>

23 
	~<pﬁl.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~"covîage.h
"

27 
	~"dy«mic-°rög.h
"

28 
	~"Áèl-sig«l.h
"

29 
	~"Êow.h
"

30 
	~"oÂ-îr‹s.h
"

31 
	~"oÂ-msgs.h
"

32 
	~"oÂ-¥öt.h
"

33 
	~"oÂ-utû.h
"

34 
	~"oÂbuf.h
"

35 
	~"›íÊow/nicúa-ext.h
"

36 
	~"›íÊow/›íÊow.h
"

37 
	~"∑ckës.h
"

38 
	~"pﬁl-lo›.h
"

39 
	~"øndom.h
"

40 
	~"utû.h
"

41 
	~"vlog.h
"

42 
	~"sockë-utû.h
"

44 
VLOG_DEFINE_THIS_MODULE
(
vc⁄n
);

46 
COVERAGE_DEFINE
(
vc⁄n_›í
);

47 
COVERAGE_DEFINE
(
vc⁄n_ª˚ived
);

48 
COVERAGE_DEFINE
(
vc⁄n_£¡
);

51 
	evc⁄n_°©e
 {

53 
	mVCS_CONNECTING
,

54 
	mVCS_SEND_HELLO
,

55 
	mVCS_RECV_HELLO
,

56 
	mVCS_CONNECTED
,

59 
	mVCS_SEND_ERROR
,

60 
	mVCS_DISCONNECTED


63 
vc⁄n_˛ass
 *
	gvc⁄n_˛as£s
[] = {

64 &
t˝_vc⁄n_˛ass
,

65 &
unix_vc⁄n_˛ass
,

66 #ifde‡
HAVE_OPENSSL


67 &
s¶_vc⁄n_˛ass
,

71 
pvc⁄n_˛ass
 *
	gpvc⁄n_˛as£s
[] = {

72 &
±˝_pvc⁄n_˛ass
,

73 &
punix_pvc⁄n_˛ass
,

74 #ifde‡
HAVE_OPENSSL


75 &
ps¶_pvc⁄n_˛ass
,

82 
vlog_øã_limô
 
	gofmsg_æ
 = 
VLOG_RATE_LIMIT_INIT
(600, 600);

86 
vlog_øã_limô
 
	gbad_ofmsg_æ
 = 
VLOG_RATE_LIMIT_INIT
(1, 5);

88 
do_ªcv
(
vc⁄n
 *, 
oÂbuf
 **);

89 
do_£nd
(
vc⁄n
 *, 
oÂbuf
 *);

93 
	$check_vc⁄n_˛as£s
()

95 #i‚de‡
NDEBUG


96 
size_t
 
i
;

98 
i
 = 0; i < 
	`ARRAY_SIZE
(
vc⁄n_˛as£s
); i++) {

99 
vc⁄n_˛ass
 *
˛ass
 = 
vc⁄n_˛as£s
[
i
];

100 
	`as£π
(
˛ass
->
«me
 !
NULL
);

101 
	`as£π
(
˛ass
->
›í
 !
NULL
);

102 i‡(
˛ass
->
˛o£
 || cœss->
ªcv
 || cœss->
£nd


103 || 
˛ass
->
run
 || cœss->
run_waô
 || cœss->
waô
) {

104 
	`as£π
(
˛ass
->
˛o£
 !
NULL
);

105 
	`as£π
(
˛ass
->
ªcv
 !
NULL
);

106 
	`as£π
(
˛ass
->
£nd
 !
NULL
);

107 
	`as£π
(
˛ass
->
waô
 !
NULL
);

113 
i
 = 0; i < 
	`ARRAY_SIZE
(
pvc⁄n_˛as£s
); i++) {

114 
pvc⁄n_˛ass
 *
˛ass
 = 
pvc⁄n_˛as£s
[
i
];

115 
	`as£π
(
˛ass
->
«me
 !
NULL
);

116 
	`as£π
(
˛ass
->
li°í
 !
NULL
);

117 i‡(
˛ass
->
˛o£
 || cœss->
ac˚±
 || cœss->
waô
) {

118 
	`as£π
(
˛ass
->
˛o£
 !
NULL
);

119 
	`as£π
(
˛ass
->
ac˚±
 !
NULL
);

120 
	`as£π
(
˛ass
->
waô
 !
NULL
);

126 
	}
}

132 
	$vc⁄n_ußge
(
boﬁ
 
a˘ive
, boﬁ 
∑ssive
, boﬁ 
boŸ°øp
 
OVS_UNUSED
)

138 
	`¥ötf
("\n");

139 i‡(
a˘ive
) {

140 
	`¥ötf
("Active OpenFlow connection methods:\n");

141 
	`¥ötf
("Åcp:IP[:PORT] "

142 "PORT (deÁu…: %dË©ÑemŸêIP\n", 
OFP_TCP_PORT
);

143 #ifde‡
HAVE_OPENSSL


144 
	`¥ötf
(" ssl:IP[:PORT] "

145 "SSL PORT (deÁu…: %dË©ÑemŸêIP\n", 
OFP_SSL_PORT
);

147 
	`¥ötf
(" unix:FILE Unix domain socketÇamed FILE\n");

150 i‡(
∑ssive
) {

151 
	`¥ötf
("Passive OpenFlow connection methods:\n");

152 
	`¥ötf
("Ötcp:[PORT][:IP] "

154 
OFP_TCP_PORT
);

155 #ifde‡
HAVE_OPENSSL


156 
	`¥ötf
("Össl:[PORT][:IP] "

158 
OFP_SSL_PORT
);

160 
	`¥ötf
("Öunix:FILE "

164 #ifde‡
HAVE_OPENSSL


165 
	`¥ötf
("PKI configuration (requiredÅo use SSL):\n"

169 i‡(
boŸ°øp
) {

170 
	`¥ötf
(" --bootstrap-ca-cert=FILE file withÖeer CA certificate "

174 
	}
}

181 
	$vc⁄n_lookup_˛ass
(c⁄° *
«me
, 
vc⁄n_˛ass
 **
˛as•
)

183 
size_t
 
¥efix_Àn
;

185 
¥efix_Àn
 = 
	`°rc•n
(
«me
, ":");

186 i‡(
«me
[
¥efix_Àn
] != '\0') {

187 
size_t
 
i
;

189 
i
 = 0; i < 
	`ARRAY_SIZE
(
vc⁄n_˛as£s
); i++) {

190 
vc⁄n_˛ass
 *
˛ass
 = 
vc⁄n_˛as£s
[
i
];

191 i‡(
	`°æí
(
˛ass
->
«me
Ë=
¥efix_Àn


192 && !
	`memcmp
(
˛ass
->
«me
,Çame, 
¥efix_Àn
)) {

193 *
˛as•
 = 
˛ass
;

199 *
˛as•
 = 
NULL
;

200  
EAFNOSUPPORT
;

201 
	}
}

206 
	$vc⁄n_vîify_«me
(c⁄° *
«me
)

208 
vc⁄n_˛ass
 *
˛ass
;

209  
	`vc⁄n_lookup_˛ass
(
«me
, &
˛ass
);

210 
	}
}

224 
	$vc⁄n_›í
(c⁄° *
«me
, 
mö_vîsi⁄
, 
vc⁄n
 **
vc⁄≈
,

225 
uöt8_t
 
ds˝
)

227 
vc⁄n_˛ass
 *
˛ass
;

228 
vc⁄n
 *vconn;

229 *
suffix_c›y
;

230 
îr‹
;

232 
	`COVERAGE_INC
(
vc⁄n_›í
);

233 
	`check_vc⁄n_˛as£s
();

236 
îr‹
 = 
	`vc⁄n_lookup_˛ass
(
«me
, &
˛ass
);

237 i‡(!
˛ass
) {

238 
îr‹
;

242 
suffix_c›y
 = 
	`x°rdup
(
	`°rchr
(
«me
, ':') + 1);

243 
îr‹
 = 
˛ass
->
	`›í
(
«me
, 
suffix_c›y
, &
vc⁄n
, 
ds˝
);

244 
	`‰ì
(
suffix_c›y
);

245 i‡(
îr‹
) {

246 
îr‹
;

250 
	`as£π
(
vc⁄n
->
°©e
 !
VCS_CONNECTING
 || vc⁄n->
˛ass
->
c⁄√˘
);

251 
vc⁄n
->
mö_vîsi⁄
 = min_version;

252 *
vc⁄≈
 = 
vc⁄n
;

255 
îr‹
:

256 *
vc⁄≈
 = 
NULL
;

257  
îr‹
;

258 
	}
}

263 
	$vc⁄n_run
(
vc⁄n
 *vconn)

265 i‡(
vc⁄n
->
°©e
 =
VCS_CONNECTING
 ||

266 
vc⁄n
->
°©e
 =
VCS_SEND_HELLO
 ||

267 
vc⁄n
->
°©e
 =
VCS_RECV_HELLO
) {

268 
	`vc⁄n_c⁄√˘
(
vc⁄n
);

271 i‡(
vc⁄n
->
˛ass
->
run
) {

272 (
vc⁄n
->
˛ass
->
run
)(vconn);

274 
	}
}

279 
	$vc⁄n_run_waô
(
vc⁄n
 *vconn)

281 i‡(
vc⁄n
->
°©e
 =
VCS_CONNECTING
 ||

282 
vc⁄n
->
°©e
 =
VCS_SEND_HELLO
 ||

283 
vc⁄n
->
°©e
 =
VCS_RECV_HELLO
) {

284 
	`vc⁄n_c⁄√˘_waô
(
vc⁄n
);

287 i‡(
vc⁄n
->
˛ass
->
run_waô
) {

288 (
vc⁄n
->
˛ass
->
run_waô
)(vconn);

290 
	}
}

293 
	$vc⁄n_›í_block
(c⁄° *
«me
, 
oÂ_vîsi⁄
 
mö_vîsi⁄
,

294 
vc⁄n
 **
vc⁄≈
)

296 
vc⁄n
 *vconn;

297 
îr‹
;

299 
	`Áèl_sig«l_run
();

301 
îr‹
 = 
	`vc⁄n_›í
(
«me
, 
mö_vîsi⁄
, &
vc⁄n
, 
DSCP_DEFAULT
);

302 i‡(!
îr‹
) {

303 
îr‹
 = 
	`vc⁄n_c⁄√˘_block
(
vc⁄n
);

306 i‡(
îr‹
) {

307 
	`vc⁄n_˛o£
(
vc⁄n
);

308 *
vc⁄≈
 = 
NULL
;

310 *
vc⁄≈
 = 
vc⁄n
;

312  
îr‹
;

313 
	}
}

317 
	$vc⁄n_˛o£
(
vc⁄n
 *vconn)

319 i‡(
vc⁄n
 !
NULL
) {

320 *
«me
 = 
vc⁄n
->name;

321 (
vc⁄n
->
˛ass
->
˛o£
)(vconn);

322 
	`‰ì
(
«me
);

324 
	}
}

328 
	$vc⁄n_gë_«me
(c⁄° 
vc⁄n
 *vconn)

330  
vc⁄n
->
«me
;

331 
	}
}

335 
ovs_be32


336 
	$vc⁄n_gë_ªmŸe_ù
(c⁄° 
vc⁄n
 *vconn)

338  
vc⁄n
->
ªmŸe_ù
;

339 
	}
}

343 
ovs_be16


344 
	$vc⁄n_gë_ªmŸe_p‹t
(c⁄° 
vc⁄n
 *vconn)

346  
vc⁄n
->
ªmŸe_p‹t
;

347 
	}
}

352 
ovs_be32


353 
	$vc⁄n_gë_loˇl_ù
(c⁄° 
vc⁄n
 *vconn)

355  
vc⁄n
->
loˇl_ù
;

356 
	}
}

360 
ovs_be16


361 
	$vc⁄n_gë_loˇl_p‹t
(c⁄° 
vc⁄n
 *vconn)

363  
vc⁄n
->
loˇl_p‹t
;

364 
	}
}

372 
	$vc⁄n_gë_vîsi⁄
(c⁄° 
vc⁄n
 *vconn)

374  
vc⁄n
->
vîsi⁄
 ? vconn->version : -1;

375 
	}
}

378 
	$vcs_c⁄√˘ög
(
vc⁄n
 *vconn)

380 
ªtvÆ
 = (
vc⁄n
->
˛ass
->
c⁄√˘
)(vconn);

381 
	`as£π
(
ªtvÆ
 !
EINPROGRESS
);

382 i‡(!
ªtvÆ
) {

383 
vc⁄n
->
°©e
 = 
VCS_SEND_HELLO
;

384 } i‡(
ªtvÆ
 !
EAGAIN
) {

385 
vc⁄n
->
°©e
 = 
VCS_DISCONNECTED
;

386 
vc⁄n
->
îr‹
 = 
ªtvÆ
;

388 
	}
}

391 
	$vcs_£nd_hñlo
(
vc⁄n
 *vconn)

393 
oÂbuf
 *
b
;

394 
ªtvÆ
;

396 
b
 = 
	`oÂøw_Æloc
(
OFPRAW_OFPT_HELLO
, 
OFP10_VERSION
, 0);

397 
ªtvÆ
 = 
	`do_£nd
(
vc⁄n
, 
b
);

398 i‡(!
ªtvÆ
) {

399 
vc⁄n
->
°©e
 = 
VCS_RECV_HELLO
;

401 
	`oÂbuf_dñëe
(
b
);

402 i‡(
ªtvÆ
 !
EAGAIN
) {

403 
vc⁄n
->
°©e
 = 
VCS_DISCONNECTED
;

404 
vc⁄n
->
îr‹
 = 
ªtvÆ
;

407 
	}
}

410 
	$vcs_ªcv_hñlo
(
vc⁄n
 *vconn)

412 
oÂbuf
 *
b
;

413 
ªtvÆ
;

415 
ªtvÆ
 = 
	`do_ªcv
(
vc⁄n
, &
b
);

416 i‡(!
ªtvÆ
) {

417 c⁄° 
oÂ_hódî
 *
oh
 = 
b
->
d©a
;

418 
oÂty≥
 
ty≥
;

419 
oÂîr
 
îr‹
;

421 
îr‹
 = 
	`oÂty≥_decode
(&
ty≥
, 
b
->
d©a
);

422 i‡(!
îr‹
 && 
ty≥
 =
OFPTYPE_HELLO
) {

423 i‡(
b
->
size
 >  *
oh
) {

424 
ds
 
msg
 = 
DS_EMPTY_INITIALIZER
;

425 
	`ds_put_f‹m©
(&
msg
, "%s:Éxåa-l⁄g hñlo:\n", 
vc⁄n
->
«me
);

426 
	`ds_put_hex_dump
(&
msg
, 
b
->
d©a
, b->
size
, 0, 
åue
);

427 
	`VLOG_WARN_RL
(&
bad_ofmsg_æ
, "%s", 
	`ds_c°r
(&
msg
));

428 
	`ds_de°roy
(&
msg
);

431 
vc⁄n
->
vîsi⁄
 = 
	`MIN
(
OFP10_VERSION
, 
oh
->version);

432 i‡(
vc⁄n
->
vîsi⁄
 < vc⁄n->
mö_vîsi⁄
) {

433 
	`VLOG_WARN_RL
(&
bad_ofmsg_æ
,

436 "suµ‹t†nÿœã∏th™ vîsi⁄ 0x%02"
PRIx8
,

437 
vc⁄n
->
«me
, vc⁄n->
mö_vîsi⁄
, 
OFP10_VERSION
,

438 
oh
->
vîsi⁄
);

439 
vc⁄n
->
°©e
 = 
VCS_SEND_ERROR
;

441 
	`VLOG_DBG
("%s:Çegotiated OpenFlow version 0x%02x "

443 "≥îÇÿœã∏th™ vîsi⁄ 0x%02"
PRIx8
")",

444 
vc⁄n
->
«me
, vc⁄n->
vîsi⁄
, vc⁄n->
mö_vîsi⁄
,

445 
OFP10_VERSION
, 
oh
->
vîsi⁄
);

446 
vc⁄n
->
°©e
 = 
VCS_CONNECTED
;

448 
	`oÂbuf_dñëe
(
b
);

451 *
s
 = 
	`oÂ_to_°rög
(
b
->
d©a
, b->
size
, 1);

452 
	`VLOG_WARN_RL
(&
bad_ofmsg_æ
,

454 
vc⁄n
->
«me
, 
s
);

455 
	`‰ì
(
s
);

456 
ªtvÆ
 = 
EPROTO
;

457 
	`oÂbuf_dñëe
(
b
);

461 i‡(
ªtvÆ
 !
EAGAIN
) {

462 
vc⁄n
->
°©e
 = 
VCS_DISCONNECTED
;

463 
vc⁄n
->
îr‹
 = 
ªtvÆ
 =
EOF
 ? 
ECONNRESET
 :Ñetval;

465 
	}
}

468 
	$vcs_£nd_îr‹
(
vc⁄n
 *vconn)

470 
oÂbuf
 *
b
;

471 
s
[128];

472 
ªtvÆ
;

474 
	`¢¥ötf
(
s
,  s, "We support versions 0x%02xÅo 0x%02x inclusive but "

475 "you suµ‹ànÿœã∏th™ vîsi⁄ 0x%02"
PRIx8
".",

476 
vc⁄n
->
mö_vîsi⁄
, 
OFP12_VERSION
, vc⁄n->
vîsi⁄
);

477 
b
 = 
	`oÂîr_ícode_hñlo
(
OFPERR_OFPHFC_INCOMPATIBLE
, 
vc⁄n
->
vîsi⁄
, 
s
);

478 
ªtvÆ
 = 
	`do_£nd
(
vc⁄n
, 
b
);

479 i‡(
ªtvÆ
) {

480 
	`oÂbuf_dñëe
(
b
);

482 i‡(
ªtvÆ
 !
EAGAIN
) {

483 
vc⁄n
->
°©e
 = 
VCS_DISCONNECTED
;

484 
vc⁄n
->
îr‹
 = 
ªtvÆ
 ?ÑëvÆ : 
EPROTO
;

486 
	}
}

493 
	$vc⁄n_c⁄√˘
(
vc⁄n
 *vconn)

495 
vc⁄n_°©e
 
œ°_°©e
;

497 
	`as£π
(
vc⁄n
->
mö_vîsi⁄
 > 0);

499 
œ°_°©e
 = 
vc⁄n
->
°©e
;

500 
vc⁄n
->
°©e
) {

501 
VCS_CONNECTING
:

502 
	`vcs_c⁄√˘ög
(
vc⁄n
);

505 
VCS_SEND_HELLO
:

506 
	`vcs_£nd_hñlo
(
vc⁄n
);

509 
VCS_RECV_HELLO
:

510 
	`vcs_ªcv_hñlo
(
vc⁄n
);

513 
VCS_CONNECTED
:

516 
VCS_SEND_ERROR
:

517 
	`vcs_£nd_îr‹
(
vc⁄n
);

520 
VCS_DISCONNECTED
:

521  
vc⁄n
->
îr‹
;

524 
	`NOT_REACHED
();

526 } 
vc⁄n
->
°©e
 !
œ°_°©e
);

528  
EAGAIN
;

529 
	}
}

540 
	$vc⁄n_ªcv
(
vc⁄n
 *vc⁄n, 
oÂbuf
 **
msgp
)

542 
oÂbuf
 *
msg
;

543 
ªtvÆ
;

545 
ªtvÆ
 = 
	`vc⁄n_c⁄√˘
(
vc⁄n
);

546 i‡(!
ªtvÆ
) {

547 
ªtvÆ
 = 
	`do_ªcv
(
vc⁄n
, &
msg
);

549 i‡(!
ªtvÆ
) {

550 c⁄° 
oÂ_hódî
 *
oh
 = 
msg
->
d©a
;

551 i‡(
oh
->
vîsi⁄
 !
vc⁄n
->version) {

552 
oÂty≥
 
ty≥
;

554 i‡(
	`oÂty≥_decode
(&
ty≥
, 
msg
->
d©a
)

555 || (
ty≥
 !
OFPTYPE_HELLO
 &&

556 
ty≥
 !
OFPTYPE_ERROR
 &&

557 
ty≥
 !
OFPTYPE_ECHO_REQUEST
 &&

558 
ty≥
 !
OFPTYPE_ECHO_REPLY
)) {

559 
	`VLOG_ERR_RL
(&
bad_ofmsg_æ
, "%s:Ñeceived OpenFlow version "

560 "0x%02"
PRIx8
" !=Éxpected %02x",

561 
vc⁄n
->
«me
, 
oh
->
vîsi⁄
, vconn->version);

562 
	`oÂbuf_dñëe
(
msg
);

563 
ªtvÆ
 = 
EPROTO
;

568 *
msgp
 = 
ªtvÆ
 ? 
NULL
 : 
msg
;

569  
ªtvÆ
;

570 
	}
}

573 
	$do_ªcv
(
vc⁄n
 *vc⁄n, 
oÂbuf
 **
msgp
)

575 
ªtvÆ
 = (
vc⁄n
->
˛ass
->
ªcv
)(vc⁄n, 
msgp
);

576 i‡(!
ªtvÆ
) {

577 
	`COVERAGE_INC
(
vc⁄n_ª˚ived
);

578 i‡(
	`VLOG_IS_DBG_ENABLED
()) {

579 *
s
 = 
	`oÂ_to_°rög
((*
msgp
)->
d©a
, (*msgp)->
size
, 1);

580 
	`VLOG_DBG_RL
(&
ofmsg_æ
, "%s:Ñe˚ived: %s", 
vc⁄n
->
«me
, 
s
);

581 
	`‰ì
(
s
);

584  
ªtvÆ
;

585 
	}
}

598 
	$vc⁄n_£nd
(
vc⁄n
 *vc⁄n, 
oÂbuf
 *
msg
)

600 
ªtvÆ
 = 
	`vc⁄n_c⁄√˘
(
vc⁄n
);

601 i‡(!
ªtvÆ
) {

602 
ªtvÆ
 = 
	`do_£nd
(
vc⁄n
, 
msg
);

604  
ªtvÆ
;

605 
	}
}

608 
	$do_£nd
(
vc⁄n
 *vc⁄n, 
oÂbuf
 *
msg
)

610 
ªtvÆ
;

612 
	`as£π
(
msg
->
size
 >(
oÂ_hódî
));

614 
	`oÂmsg_upd©e_Àngth
(
msg
);

615 i‡(!
	`VLOG_IS_DBG_ENABLED
()) {

616 
	`COVERAGE_INC
(
vc⁄n_£¡
);

617 
ªtvÆ
 = (
vc⁄n
->
˛ass
->
£nd
)(vc⁄n, 
msg
);

619 *
s
 = 
	`oÂ_to_°rög
(
msg
->
d©a
, msg->
size
, 1);

620 
ªtvÆ
 = (
vc⁄n
->
˛ass
->
£nd
)(vc⁄n, 
msg
);

621 i‡(
ªtvÆ
 !
EAGAIN
) {

622 
	`VLOG_DBG_RL
(&
ofmsg_æ
, "%s: sent (%s): %s",

623 
vc⁄n
->
«me
, 
	`°ªº‹
(
ªtvÆ
), 
s
);

625 
	`‰ì
(
s
);

627  
ªtvÆ
;

628 
	}
}

633 
	$vc⁄n_c⁄√˘_block
(
vc⁄n
 *vconn)

635 
îr‹
;

637 (
îr‹
 = 
	`vc⁄n_c⁄√˘
(
vc⁄n
)Ë=
EAGAIN
) {

638 
	`vc⁄n_run
(
vc⁄n
);

639 
	`vc⁄n_run_waô
(
vc⁄n
);

640 
	`vc⁄n_c⁄√˘_waô
(
vc⁄n
);

641 
	`pﬁl_block
();

643 
	`as£π
(
îr‹
 !
EINPROGRESS
);

645  
îr‹
;

646 
	}
}

650 
	$vc⁄n_£nd_block
(
vc⁄n
 *vc⁄n, 
oÂbuf
 *
msg
)

652 
ªtvÆ
;

654 
	`Áèl_sig«l_run
();

656 (
ªtvÆ
 = 
	`vc⁄n_£nd
(
vc⁄n
, 
msg
)Ë=
EAGAIN
) {

657 
	`vc⁄n_run
(
vc⁄n
);

658 
	`vc⁄n_run_waô
(
vc⁄n
);

659 
	`vc⁄n_£nd_waô
(
vc⁄n
);

660 
	`pﬁl_block
();

662  
ªtvÆ
;

663 
	}
}

667 
	$vc⁄n_ªcv_block
(
vc⁄n
 *vc⁄n, 
oÂbuf
 **
msgp
)

669 
ªtvÆ
;

671 
	`Áèl_sig«l_run
();

673 (
ªtvÆ
 = 
	`vc⁄n_ªcv
(
vc⁄n
, 
msgp
)Ë=
EAGAIN
) {

674 
	`vc⁄n_run
(
vc⁄n
);

675 
	`vc⁄n_run_waô
(
vc⁄n
);

676 
	`vc⁄n_ªcv_waô
(
vc⁄n
);

677 
	`pﬁl_block
();

679  
ªtvÆ
;

680 
	}
}

689 
	$vc⁄n_ªcv_xid
(
vc⁄n
 *vc⁄n, 
ovs_be32
 
xid
, 
oÂbuf
 **
ª∂yp
)

692 
ovs_be32
 
ªcv_xid
;

693 
oÂbuf
 *
ª∂y
;

694 
îr‹
;

696 
îr‹
 = 
	`vc⁄n_ªcv_block
(
vc⁄n
, &
ª∂y
);

697 i‡(
îr‹
) {

698 *
ª∂yp
 = 
NULL
;

699  
îr‹
;

701 
ªcv_xid
 = ((
oÂ_hódî
 *Ë
ª∂y
->
d©a
)->
xid
;

702 i‡(
xid
 =
ªcv_xid
) {

703 *
ª∂yp
 = 
ª∂y
;

707 
	`VLOG_DBG_RL
(&
bad_ofmsg_æ
, "%s:Ñe˚ivedÑïly wôh xid %08"
PRIx32


708 " !ex≥˘ed %08"
PRIx32
,

709 
vc⁄n
->
«me
, 
	`¡ohl
(
ªcv_xid
),Çtohl(
xid
));

710 
	`oÂbuf_dñëe
(
ª∂y
);

712 
	}
}

725 
	$vc⁄n_å™ß˘
(
vc⁄n
 *vc⁄n, 
oÂbuf
 *
ªque°
,

726 
oÂbuf
 **
ª∂yp
)

728 
ovs_be32
 
£nd_xid
 = ((
oÂ_hódî
 *Ë
ªque°
->
d©a
)->
xid
;

729 
îr‹
;

731 *
ª∂yp
 = 
NULL
;

732 
îr‹
 = 
	`vc⁄n_£nd_block
(
vc⁄n
, 
ªque°
);

733 i‡(
îr‹
) {

734 
	`oÂbuf_dñëe
(
ªque°
);

736  
îr‹
 ?Éº‹ : 
	`vc⁄n_ªcv_xid
(
vc⁄n
, 
£nd_xid
, 
ª∂yp
);

737 
	}
}

751 
	$vc⁄n_å™ß˘_n‹ïly
(
vc⁄n
 *vc⁄n, 
oÂbuf
 *
ªque°
,

752 
oÂbuf
 **
ª∂yp
)

754 
ovs_be32
 
ªque°_xid
;

755 
ovs_be32
 
b¨rõr_xid
;

756 
oÂbuf
 *
b¨rõr
;

757 
îr‹
;

759 *
ª∂yp
 = 
NULL
;

762 
ªque°_xid
 = ((
oÂ_hódî
 *Ë
ªque°
->
d©a
)->
xid
;

763 
îr‹
 = 
	`vc⁄n_£nd_block
(
vc⁄n
, 
ªque°
);

764 i‡(
îr‹
) {

765 
	`oÂbuf_dñëe
(
ªque°
);

766  
îr‹
;

770 
b¨rõr
 = 
	`oÂutû_ícode_b¨rõr_ªque°
(
	`vc⁄n_gë_vîsi⁄
(
vc⁄n
));

771 
b¨rõr_xid
 = ((
oÂ_hódî
 *Ë
b¨rõr
->
d©a
)->
xid
;

772 
îr‹
 = 
	`vc⁄n_£nd_block
(
vc⁄n
, 
b¨rõr
);

773 i‡(
îr‹
) {

774 
	`oÂbuf_dñëe
(
b¨rõr
);

775  
îr‹
;

779 
oÂbuf
 *
msg
;

780 
ovs_be32
 
msg_xid
;

781 
îr‹
;

783 
îr‹
 = 
	`vc⁄n_ªcv_block
(
vc⁄n
, &
msg
);

784 i‡(
îr‹
) {

785 
	`oÂbuf_dñëe
(*
ª∂yp
);

786 *
ª∂yp
 = 
NULL
;

787  
îr‹
;

790 
msg_xid
 = ((
oÂ_hódî
 *Ë
msg
->
d©a
)->
xid
;

791 i‡(
msg_xid
 =
ªque°_xid
) {

792 i‡(*
ª∂yp
) {

793 
	`VLOG_WARN_RL
(&
bad_ofmsg_æ
, "%s: duplicateÑeplies with "

794 "xid %08"
PRIx32
, 
vc⁄n
->
«me
, 
	`¡ohl
(
msg_xid
));

795 
	`oÂbuf_dñëe
(*
ª∂yp
);

797 *
ª∂yp
 = 
msg
;

799 
	`oÂbuf_dñëe
(
msg
);

800 i‡(
msg_xid
 =
b¨rõr_xid
) {

803 
	`VLOG_DBG_RL
(&
bad_ofmsg_æ
, "%s:Ñïly wôh xid %08"
PRIx32


804 " !ex≥˘ed %08"
PRIx32
" or %08"PRIx32,

805 
vc⁄n
->
«me
, 
	`¡ohl
(
msg_xid
),

806 
	`¡ohl
(
ªque°_xid
),Çtohl(
b¨rõr_xid
));

810 
	}
}

816 
	$vc⁄n_å™ß˘_mu…ùÀ_n‹ïly
(
vc⁄n
 *vc⁄n, 
li°
 *
ªque°s
,

817 
oÂbuf
 **
ª∂yp
)

819 
oÂbuf
 *
ªque°
, *
√xt
;

821 
	`LIST_FOR_EACH_SAFE
 (
ªque°
, 
√xt
, 
li°_node
, 
ªque°s
) {

822 
îr‹
;

824 
	`li°_ªmove
(&
ªque°
->
li°_node
);

826 
îr‹
 = 
	`vc⁄n_å™ß˘_n‹ïly
(
vc⁄n
, 
ªque°
, 
ª∂yp
);

827 i‡(
îr‹
 || *
ª∂yp
) {

828 
	`oÂbuf_li°_dñëe
(
ªque°s
);

829  
îr‹
;

833 *
ª∂yp
 = 
NULL
;

835 
	}
}

838 
	$vc⁄n_waô
(
vc⁄n
 *vc⁄n, 
vc⁄n_waô_ty≥
 
waô
)

840 
	`as£π
(
waô
 =
WAIT_CONNECT
 || waô =
WAIT_RECV
 || waô =
WAIT_SEND
);

842 
vc⁄n
->
°©e
) {

843 
VCS_CONNECTING
:

844 
waô
 = 
WAIT_CONNECT
;

847 
VCS_SEND_HELLO
:

848 
VCS_SEND_ERROR
:

849 
waô
 = 
WAIT_SEND
;

852 
VCS_RECV_HELLO
:

853 
waô
 = 
WAIT_RECV
;

856 
VCS_CONNECTED
:

859 
VCS_DISCONNECTED
:

860 
	`pﬁl_immedüã_wake
();

863 (
vc⁄n
->
˛ass
->
waô
)(vconn, wait);

864 
	}
}

867 
	$vc⁄n_c⁄√˘_waô
(
vc⁄n
 *vconn)

869 
	`vc⁄n_waô
(
vc⁄n
, 
WAIT_CONNECT
);

870 
	}
}

873 
	$vc⁄n_ªcv_waô
(
vc⁄n
 *vconn)

875 
	`vc⁄n_waô
(
vc⁄n
, 
WAIT_RECV
);

876 
	}
}

879 
	$vc⁄n_£nd_waô
(
vc⁄n
 *vconn)

881 
	`vc⁄n_waô
(
vc⁄n
, 
WAIT_SEND
);

882 
	}
}

889 
	$pvc⁄n_lookup_˛ass
(c⁄° *
«me
, 
pvc⁄n_˛ass
 **
˛as•
)

891 
size_t
 
¥efix_Àn
;

893 
¥efix_Àn
 = 
	`°rc•n
(
«me
, ":");

894 i‡(
«me
[
¥efix_Àn
] != '\0') {

895 
size_t
 
i
;

897 
i
 = 0; i < 
	`ARRAY_SIZE
(
pvc⁄n_˛as£s
); i++) {

898 
pvc⁄n_˛ass
 *
˛ass
 = 
pvc⁄n_˛as£s
[
i
];

899 i‡(
	`°æí
(
˛ass
->
«me
Ë=
¥efix_Àn


900 && !
	`memcmp
(
˛ass
->
«me
,Çame, 
¥efix_Àn
)) {

901 *
˛as•
 = 
˛ass
;

907 *
˛as•
 = 
NULL
;

908  
EAFNOSUPPORT
;

909 
	}
}

914 
	$pvc⁄n_vîify_«me
(c⁄° *
«me
)

916 
pvc⁄n_˛ass
 *
˛ass
;

917  
	`pvc⁄n_lookup_˛ass
(
«me
, &
˛ass
);

918 
	}
}

928 
	$pvc⁄n_›í
(c⁄° *
«me
, 
pvc⁄n
 **
pvc⁄≈
, 
uöt8_t
 
ds˝
)

930 
pvc⁄n_˛ass
 *
˛ass
;

931 
pvc⁄n
 *pvconn;

932 *
suffix_c›y
;

933 
îr‹
;

935 
	`check_vc⁄n_˛as£s
();

938 
îr‹
 = 
	`pvc⁄n_lookup_˛ass
(
«me
, &
˛ass
);

939 i‡(!
˛ass
) {

940 
îr‹
;

944 
suffix_c›y
 = 
	`x°rdup
(
	`°rchr
(
«me
, ':') + 1);

945 
îr‹
 = 
˛ass
->
	`li°í
(
«me
, 
suffix_c›y
, &
pvc⁄n
, 
ds˝
);

946 
	`‰ì
(
suffix_c›y
);

947 i‡(
îr‹
) {

948 
îr‹
;

952 *
pvc⁄≈
 = 
pvc⁄n
;

955 
îr‹
:

956 *
pvc⁄≈
 = 
NULL
;

957  
îr‹
;

958 
	}
}

963 
	$pvc⁄n_gë_«me
(c⁄° 
pvc⁄n
 *pvconn)

965  
pvc⁄n
->
«me
;

966 
	}
}

970 
	$pvc⁄n_˛o£
(
pvc⁄n
 *pvconn)

972 i‡(
pvc⁄n
 !
NULL
) {

973 *
«me
 = 
pvc⁄n
->name;

974 (
pvc⁄n
->
˛ass
->
˛o£
)(pvconn);

975 
	`‰ì
(
«me
);

977 
	}
}

990 
	$pvc⁄n_ac˚±
(
pvc⁄n
 *pvc⁄n, 
mö_vîsi⁄
, 
vc⁄n
 **
√w_vc⁄n
)

992 
ªtvÆ
 = (
pvc⁄n
->
˛ass
->
ac˚±
)’vc⁄n, 
√w_vc⁄n
);

993 i‡(
ªtvÆ
) {

994 *
√w_vc⁄n
 = 
NULL
;

996 
	`as£π
((*
√w_vc⁄n
)->
°©e
 !
VCS_CONNECTING


997 || (*
√w_vc⁄n
)->
˛ass
->
c⁄√˘
);

998 (*
√w_vc⁄n
)->
mö_vîsi⁄
 = min_version;

1000  
ªtvÆ
;

1001 
	}
}

1004 
	$pvc⁄n_waô
(
pvc⁄n
 *pvconn)

1006 (
pvc⁄n
->
˛ass
->
waô
)(pvconn);

1007 
	}
}

1027 
	$vc⁄n_öô
(
vc⁄n
 *vc⁄n, 
vc⁄n_˛ass
 *
˛ass
, 
c⁄√˘_°©us
,

1028 c⁄° *
«me
)

1030 
vc⁄n
->
˛ass
 = class;

1031 
vc⁄n
->
°©e
 = (
c⁄√˘_°©us
 =
EAGAIN
 ? 
VCS_CONNECTING


1032 : !
c⁄√˘_°©us
 ? 
VCS_SEND_HELLO


1033 : 
VCS_DISCONNECTED
);

1034 
vc⁄n
->
îr‹
 = 
c⁄√˘_°©us
;

1035 
vc⁄n
->
vîsi⁄
 = 0;

1036 
vc⁄n
->
mö_vîsi⁄
 = 0;

1037 
vc⁄n
->
ªmŸe_ù
 = 0;

1038 
vc⁄n
->
ªmŸe_p‹t
 = 0;

1039 
vc⁄n
->
loˇl_ù
 = 0;

1040 
vc⁄n
->
loˇl_p‹t
 = 0;

1041 
vc⁄n
->
«me
 = 
	`x°rdup
(name);

1042 
	`as£π
(
vc⁄n
->
°©e
 !
VCS_CONNECTING
 || 
˛ass
->
c⁄√˘
);

1043 
	}
}

1046 
	$vc⁄n_£t_ªmŸe_ù
(
vc⁄n
 *vc⁄n, 
ovs_be32
 
ù
)

1048 
vc⁄n
->
ªmŸe_ù
 = 
ù
;

1049 
	}
}

1052 
	$vc⁄n_£t_ªmŸe_p‹t
(
vc⁄n
 *vc⁄n, 
ovs_be16
 
p‹t
)

1054 
vc⁄n
->
ªmŸe_p‹t
 = 
p‹t
;

1055 
	}
}

1058 
	$vc⁄n_£t_loˇl_ù
(
vc⁄n
 *vc⁄n, 
ovs_be32
 
ù
)

1060 
vc⁄n
->
loˇl_ù
 = 
ù
;

1061 
	}
}

1064 
	$vc⁄n_£t_loˇl_p‹t
(
vc⁄n
 *vc⁄n, 
ovs_be16
 
p‹t
)

1066 
vc⁄n
->
loˇl_p‹t
 = 
p‹t
;

1067 
	}
}

1070 
	$pvc⁄n_öô
(
pvc⁄n
 *pvc⁄n, 
pvc⁄n_˛ass
 *
˛ass
,

1071 c⁄° *
«me
)

1073 
pvc⁄n
->
˛ass
 = class;

1074 
pvc⁄n
->
«me
 = 
	`x°rdup
(name);

1075 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/vconn.h

17 #i‚de‡
VCONN_H


18 
	#VCONN_H
 1

	)

20 
	~<°dboﬁ.h
>

21 
	~"›ívswôch/ty≥s.h
"

22 
	~"›íÊow/›íÊow.h
"

24 #ifde‡
__˝lu•lus


28 
li°
;

29 
oÂbuf
;

30 
pvc⁄n
;

31 
vc⁄n
;

33 
vc⁄n_ußge
(
boﬁ
 
a˘ive
, boﬁ 
∑ssive
, boﬁ 
boŸ°øp
);

36 
vc⁄n_vîify_«me
(c⁄° *
«me
);

37 
vc⁄n_›í
(c⁄° *
«me
, 
mö_vîsi⁄
,

38 
vc⁄n
 **, 
uöt8_t
 
ds˝
);

39 
vc⁄n_˛o£
(
vc⁄n
 *);

40 c⁄° *
vc⁄n_gë_«me
(c⁄° 
vc⁄n
 *);

41 
ovs_be32
 
vc⁄n_gë_ªmŸe_ù
(c⁄° 
vc⁄n
 *);

42 
ovs_be16
 
vc⁄n_gë_ªmŸe_p‹t
(c⁄° 
vc⁄n
 *);

43 
ovs_be32
 
vc⁄n_gë_loˇl_ù
(c⁄° 
vc⁄n
 *);

44 
ovs_be16
 
vc⁄n_gë_loˇl_p‹t
(c⁄° 
vc⁄n
 *);

45 
vc⁄n_gë_vîsi⁄
(c⁄° 
vc⁄n
 *);

46 
vc⁄n_c⁄√˘
(
vc⁄n
 *);

47 
vc⁄n_ªcv
(
vc⁄n
 *, 
oÂbuf
 **);

48 
vc⁄n_£nd
(
vc⁄n
 *, 
oÂbuf
 *);

49 
vc⁄n_ªcv_xid
(
vc⁄n
 *, 
ovs_be32
 
xid
, 
oÂbuf
 **);

50 
vc⁄n_å™ß˘
(
vc⁄n
 *, 
oÂbuf
 *, ofpbuf **);

51 
vc⁄n_å™ß˘_n‹ïly
(
vc⁄n
 *, 
oÂbuf
 *, ofpbuf **);

52 
vc⁄n_å™ß˘_mu…ùÀ_n‹ïly
(
vc⁄n
 *, 
li°
 *
ªque°s
,

53 
oÂbuf
 **
ª∂yp
);

55 
vc⁄n_run
(
vc⁄n
 *);

56 
vc⁄n_run_waô
(
vc⁄n
 *);

58 
vc⁄n_›í_block
(c⁄° *
«me
, 
oÂ_vîsi⁄
 
mö_vîsi⁄
,

59 
vc⁄n
 **);

60 
vc⁄n_c⁄√˘_block
(
vc⁄n
 *);

61 
vc⁄n_£nd_block
(
vc⁄n
 *, 
oÂbuf
 *);

62 
vc⁄n_ªcv_block
(
vc⁄n
 *, 
oÂbuf
 **);

64 
	evc⁄n_waô_ty≥
 {

65 
WAIT_CONNECT
,

66 
WAIT_RECV
,

67 
WAIT_SEND


69 
vc⁄n_waô
(
vc⁄n
 *, 
vc⁄n_waô_ty≥
);

70 
vc⁄n_c⁄√˘_waô
(
vc⁄n
 *);

71 
vc⁄n_ªcv_waô
(
vc⁄n
 *);

72 
vc⁄n_£nd_waô
(
vc⁄n
 *);

75 
pvc⁄n_vîify_«me
(c⁄° *
«me
);

76 
pvc⁄n_›í
(c⁄° *
«me
, 
pvc⁄n
 **, 
uöt8_t
 
ds˝
);

77 c⁄° *
pvc⁄n_gë_«me
(c⁄° 
pvc⁄n
 *);

78 
pvc⁄n_˛o£
(
pvc⁄n
 *);

79 
pvc⁄n_ac˚±
(
pvc⁄n
 *, 
mö_vîsi⁄
, 
vc⁄n
 **);

80 
pvc⁄n_waô
(
pvc⁄n
 *);

82 #ifde‡
__˝lu•lus


	@/home/lsch/mytest/openvswitch-1.9.0/lib/vlan-bitmap.c

16 
	~<c⁄fig.h
>

18 
	~"vœn-bôm≠.h
"

24 
	$vœn_bôm≠_‰om_¨øy
(c⁄° 
öt64_t
 *
vœns
, 
size_t
 
n_vœns
)

26 *
b
;

28 i‡(!
n_vœns
) {

29  
NULL
;

32 
b
 = 
	`bôm≠_Æloˇã
(4096);

33 i‡(!
	`vœn_bôm≠_‰om_¨øy__
(
vœns
, 
n_vœns
, 
b
)) {

34 
	`‰ì
(
b
);

35  
NULL
;

37  
b
;

38 
	}
}

43 
	$vœn_bôm≠_‰om_¨øy__
(c⁄° 
öt64_t
 *
vœns
, 
size_t
 
n_vœns
,

44 *
b
)

46 
size_t
 
i
;

47 
n
;

49 
n
 = 0;

50 
i
 = 0; i < 
n_vœns
; i++) {

51 
öt64_t
 
vœn
 = 
vœns
[
i
];

53 i‡(
vœn
 >0 && vœ¿< 4096 && !
	`bôm≠_is_£t
(
b
, vlan)) {

54 
	`bôm≠_£t1
(
b
, 
vœn
);

55 
n
++;

59  
n
;

60 
	}
}

66 
boﬁ


67 
	$vœn_bôm≠_equÆ
(c⁄° *
a
, c⁄° *
b
)

69  (!
a
 && !
b
Ë|| (®&& b && 
	`bôm≠_equÆ
(a, b, 4096));

70 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/vlan-bitmap.h

16 #i‚de‡
VLAN_BITMAP_H


17 
	#VLAN_BITMAP_H
 1

	)

19 
	~<°dboﬁ.h
>

20 
	~<°döt.h
>

21 
	~"bôm≠.h
"

30 *
vœn_bôm≠_‰om_¨øy
(c⁄° 
öt64_t
 *
vœns
, 
size_t
 
n_vœns
);

31 
vœn_bôm≠_‰om_¨øy__
(c⁄° 
öt64_t
 *
vœns
, 
size_t
 
n_vœns
,

32 *
b
);

34 
boﬁ
 
vœn_bôm≠_equÆ
(c⁄° *
a
, c⁄° *
b
);

37 
ölöe
 *

38 
	$vœn_bôm≠_˛⁄e
(c⁄° *
vœns
)

40  
vœns
 ? 
	`bôm≠_˛⁄e
(vœns, 4096Ë: 
NULL
;

41 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/vlandev.c

17 
	~<c⁄fig.h
>

19 
	~"vœndev.h
"

21 
	~<î∫o.h
>

22 
	~<sys/io˘l.h
>

23 
	~<sys/°©.h
>

25 
	~"hash.h
"

26 
	~"shash.h
"

27 
	~"vlog.h
"

29 
VLOG_DEFINE_THIS_MODULE
(
vœndev
);

31 #ifde‡
LINUX_DATAPATH


32 
	~"π√éök-lök.h
"

33 
	~<löux/if_vœn.h
>

34 
	~<löux/sockios.h
>

35 
	~"√tdev-löux.h
"

37 
∆n_nŸifõr
 *
	gvœn_ˇche_nŸifõr
;

38 
shash
 
	gvœn_devs
 = 
SHASH_INITIALIZER
(&
vœn_devs
);

39 
shash
 
	gvœn_ªÆ_devs
 = 
SHASH_INITIALIZER
(&
vœn_ªÆ_devs
);

40 
boﬁ
 
	gˇche_vÆid
;

43 
	$vœn_ˇche_cb
(c⁄° 
π√éök_lök_ch™ge
 *
ch™ge
 
OVS_UNUSED
,

44 *
aux
 
OVS_UNUSED
)

46 
ˇche_vÆid
 = 
Ál£
;

47 
	}
}

50 
	$vœndev_ª‰esh
()

52 c⁄° *
‚
 = "/proc/net/vlan/config";

53 
shash_node
 *
node
;

54 
löe
[128];

55 
FILE
 *
°ªam
;

57 i‡(!
vœn_ˇche_nŸifõr
) {

58 
vœn_ˇche_nŸifõr
 = 
	`π√éök_lök_nŸifõr_¸óã
(
vœn_ˇche_cb
,

59 
NULL
);

60 i‡(!
vœn_ˇche_nŸifõr
) {

61  
EINVAL
;

65 i‡(
ˇche_vÆid
) {

73 
	`shash_˛ór_‰ì_d©a
(&
vœn_devs
);

74 
	`SHASH_FOR_EACH
 (
node
, &
vœn_ªÆ_devs
) {

75 
vœn_ªÆ_dev
 *
vrd
 = 
node
->
d©a
;

77 
	`hm≠_de°roy
(&
vrd
->
vœn_devs
);

79 
	`shash_˛ór_‰ì_d©a
(&
vœn_ªÆ_devs
);

82 
°ªam
 = 
	`f›í
(
‚
, "r");

83 i‡(!
°ªam
) {

84 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 1);

85 
îr‹
 = 
î∫o
;

86 
°©
 
s
;

88 i‡(
îr‹
 =
ENOENT
 && !
	`°©
("/¥oc", &
s
)) {

96 
	`VLOG_WARN_RL
(&
æ
, "%s: o≥¿Áûed (%s)", 
‚
, 
	`°ªº‹
(
îr‹
));

97  
îr‹
;

100 
	`fgës
(
löe
, Üöe, 
°ªam
)) {

101 
vœn_dev
[16], 
ªÆ_dev
[16];

102 
vid
;

104 i‡(
	`ssˇnf
(
löe
, "%15[^ |] | %d | %15s", 
vœn_dev
, &
vid
, 
ªÆ_dev
) == 3

105 && 
vid
 >= 0 && vid <= 4095

106 && !
	`shash_föd
(&
vœn_devs
, 
vœn_dev
)) {

107 
vœn_ªÆ_dev
 *
vrd
;

108 
vœn_dev
 *
vd
;

110 
vrd
 = 
	`shash_föd_d©a
(&
vœn_ªÆ_devs
, 
ªÆ_dev
);

111 i‡(!
vrd
) {

112 
vrd
 = 
	`xmÆloc
( *vrd);

113 
vrd
->
«me
 = 
	`x°rdup
(
ªÆ_dev
);

114 
	`hm≠_öô
(&
vrd
->
vœn_devs
);

115 
	`shash_add_noc›y
(&
vœn_ªÆ_devs
, 
vrd
->
«me
, vrd);

118 
vd
 = 
	`xmÆloc
( *vd);

119 
	`hm≠_ö£π
(&
vrd
->
vœn_devs
, &
vd
->
hm≠_node
, 
	`hash_öt
(
vid
, 0));

120 
vd
->
«me
 = 
	`x°rdup
(
vœn_dev
);

121 
vd
->
vid
 = vid;

122 
vd
->
ªÆ_dev
 = 
vrd
;

123 
	`shash_add_noc›y
(&
vœn_devs
, 
vd
->
«me
, vd);

126 
	`f˛o£
(
°ªam
);

128 
ˇche_vÆid
 = 
åue
;

130 
	}
}

132 
shash
 *

133 
	$vœndev_gë_ªÆ_devs
()

135  &
vœn_ªÆ_devs
;

136 
	}
}

139 
	$vœndev_gë_«me
(c⁄° *
ªÆ_dev_«me
, 
vid
)

141 c⁄° 
vœn_ªÆ_dev
 *
ªÆ_dev
;

143 
ªÆ_dev
 = 
	`shash_föd_d©a
(&
vœn_ªÆ_devs
, 
ªÆ_dev_«me
);

144 i‡(
ªÆ_dev
) {

145 c⁄° 
vœn_dev
 *vlan_dev;

147 
	`HMAP_FOR_EACH_WITH_HASH
 (
vœn_dev
, 
hm≠_node
, 
	`hash_öt
(
vid
, 0),

148 &
ªÆ_dev
->
vœn_devs
) {

149 i‡(
vœn_dev
->
vid
 == vid) {

150  
vœn_dev
->
«me
;

155  
NULL
;

156 
	}
}

159 
	$do_vœn_io˘l
(c⁄° *
√tdev_«me
, 
vœn_io˘l_¨gs
 *
vü
,

160 
cmd
, c⁄° *
cmd_«me
)

162 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 1);

163 
îr‹
;

164 
sock
;

166 
vü
->
cmd
 = cmd;

167 
	`ovs_°æ˝y
(
vü
->
devi˚1
, 
√tdev_«me
,  via->device1);

169 
sock
 = 
	`√tdev_löux_gë_af_öë_sock
();

170 i‡(
sock
 < 0) {

171  -
sock
;

174 
îr‹
 = 
	`io˘l
(
sock
, 
SIOCSIFVLAN
, 
vü
Ë< 0 ? 
î∫o
 : 0;

175 i‡(
îr‹
) {

176 
	`VLOG_WARN_RL
(&
æ
, "%s: VLAN ioctl %s failed (%s)",

177 
√tdev_«me
, 
cmd_«me
, 
	`°ªº‹
(
îr‹
));

179  
îr‹
;

180 
	}
}

183 
	$vœndev_add
(c⁄° *
ªÆ_dev
, 
vid
)

185 
vœn_io˘l_¨gs
 
vü
;

186 
îr‹
;

188 
	`mem£t
(&
vü
, 0,  via);

189 
vü
.
u
.
VID
 = 
vid
;

191 
îr‹
 = 
	`do_vœn_io˘l
(
ªÆ_dev
, &
vü
, 
ADD_VLAN_CMD
, "ADD_VLAN_CMD");

192 i‡(!
îr‹
) {

193 
ˇche_vÆid
 = 
Ál£
;

195  
îr‹
;

196 
	}
}

199 
	$vœndev_dñ
(c⁄° *
vœn_dev
)

201 
vœn_io˘l_¨gs
 
vü
;

202 
îr‹
;

204 
	`mem£t
(&
vü
, 0,  via);

205 
îr‹
 = 
	`do_vœn_io˘l
(
vœn_dev
, &
vü
, 
DEL_VLAN_CMD
, "DEL_VLAN_CMD");

206 i‡(!
îr‹
) {

207 
ˇche_vÆid
 = 
Ál£
;

209  
îr‹
;

210 
	}
}

215 
	$vœndev_ª‰esh
()

218 
	}
}

220 
shash
 *

221 
	$vœndev_gë_ªÆ_devs
()

223 
shash
 
vœn_ªÆ_devs
 = 
	`SHASH_INITIALIZER
(&vlan_real_devs);

225  &
vœn_ªÆ_devs
;

226 
	}
}

229 
	$vœndev_gë_«me
(c⁄° *
ªÆ_dev_«me
 
OVS_UNUSED
, 
vid
 OVS_UNUSED)

231  
NULL
;

232 
	}
}

235 
	$vœndev_add
(c⁄° *
ªÆ_dev
 
OVS_UNUSED
, 
vid
 OVS_UNUSED)

237 
	`VLOG_ERR
("not supported onÇon-LinuxÖlatform");

238  
EOPNOTSUPP
;

239 
	}
}

242 
	$vœndev_dñ
(c⁄° *
vœn_dev
 
OVS_UNUSED
)

244 
	`VLOG_ERR
("not supported onÇon-LinuxÖlatform");

245  
EOPNOTSUPP
;

246 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/vlandev.h

17 #i‚de‡
VLANDEV_H


18 
	#VLANDEV_H
 1

	)

20 
	~"hm≠.h
"

30 
	svœn_dev
 {

31 
vœn_ªÆ_dev
 *
	mªÆ_dev
;

32 
hm≠_node
 
	mhm≠_node
;

33 *
	m«me
;

34 
	mvid
;

38 
	svœn_ªÆ_dev
 {

39 *
	m«me
;

40 
hm≠
 
	mvœn_devs
;

43 
vœndev_ª‰esh
();

45 
shash
 *
vœndev_gë_ªÆ_devs
();

47 c⁄° *
vœndev_gë_«me
(c⁄° *
ªÆ_dev_«me
, 
vid
);

49 
vœndev_add
(c⁄° *
ªÆ_dev
, 
vid
);

50 
vœndev_dñ
(c⁄° *
vœn_dev
);

	@/home/lsch/mytest/openvswitch-1.9.0/lib/vlog.c

17 
	~<c⁄fig.h
>

18 
	~"vlog.h
"

19 
	~<as£π.h
>

20 
	~<˘y≥.h
>

21 
	~<î∫o.h
>

22 
	~<f˙é.h
>

23 
	~<°d¨g.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~<sys/°©.h
>

27 
	~<sys/ty≥s.h
>

28 
	~<sy¶og.h
>

29 
	~<time.h
>

30 
	~<uni°d.h
>

31 
	~"covîage.h
"

32 
	~"dús.h
"

33 
	~"dy«mic-°rög.h
"

34 
	~"oÂbuf.h
"

35 
	~"ßt-m©h.h
"

36 
	~"svec.h
"

37 
	~"timevÆ.h
"

38 
	~"unix˘l.h
"

39 
	~"utû.h
"

40 
	~"w‹kî.h
"

42 
VLOG_DEFINE_THIS_MODULE
(
vlog
);

44 
COVERAGE_DEFINE
(
vlog_ªcursive
);

47 c⁄° *
	gÀvñ_«mes
[
VLL_N_LEVELS
] = {

48 
	#VLOG_LEVEL
(
NAME
, 
SYSLOG_LEVEL
Ë#NAME,

	)

49 
VLOG_LEVELS


50 #unde‡
VLOG_LEVEL


54 
	gsy¶og_Àvñs
[
VLL_N_LEVELS
] = {

55 
	#VLOG_LEVEL
(
NAME
, 
SYSLOG_LEVEL
ËSYSLOG_LEVEL,

	)

56 
VLOG_LEVELS


57 #unde‡
VLOG_LEVEL


61 #i‡
USE_LINKER_SECTIONS


62 
vlog_moduÀ
 *
__°¨t_vlog_moduÀs
[];

63 
vlog_moduÀ
 *
__°›_vlog_moduÀs
[];

64 
	#vlog_moduÀs
 
__°¨t_vlog_moduÀs


	)

65 
	#n_vlog_moduÀs
 (
__°›_vlog_moduÀs
 - 
__°¨t_vlog_moduÀs
)

	)

67 
	#VLOG_MODULE
 
VLOG_DEFINE_MODULE__


	)

68 
	~"vlog-moduÀs.def
"

69 #unde‡
VLOG_MODULE


71 
vlog_moduÀ
 *
	gvlog_moduÀs
[] = {

72 
	#VLOG_MODULE
(
NAME
Ë&
VLM_
##NAME,

	)

73 
	~"vlog-moduÀs.def
"

74 #unde‡
VLOG_MODULE


76 
	#n_vlog_moduÀs
 
	`ARRAY_SIZE
(
vlog_moduÀs
)

	)

80 
	sÁcûôy
 {

81 c⁄° *
	m«me
;

82 *
	m∑âîn
;

83 
boﬁ
 
	mdeÁu…_∑âîn
;

85 
Ácûôy
 
	gÁcûôõs
[
VLF_N_FACILITIES
] = {

86 
	#VLOG_FACILITY
(
NAME
, 
PATTERN
Ë{#NAME, PATTERN, 
åue
},

	)

87 
VLOG_FACILITIES


88 #unde‡
VLOG_FACILITY


92 *
	glog_fûe_«me
;

93 
	glog_fd
 = -1;

96 
boﬁ
 
	gvlog_öôed
;

98 
	$f‹m©_log_mesßge
(c⁄° 
vlog_moduÀ
 *, 
vlog_Àvñ
,

99 
vlog_Ácûôy
, 
msg_num
,

100 c⁄° *
mesßge
, 
va_li°
, 
ds
 *)

101 
	`PRINTF_FORMAT
(5, 0);

102 
	`vlog_wrôe_fûe
(
ds
 *);

103 
	`vlog_upd©e_async_log_fd
();

107 
size_t


108 
	$£¨ch_«me_¨øy
(c⁄° *
èrgë
, c⁄° **
«mes
, 
size_t
 
n_«mes
)

110 
size_t
 
i
;

112 
i
 = 0; i < 
n_«mes
; i++) {

113 
	`as£π
(
«mes
[
i
]);

114 i‡(!
	`°rˇ£cmp
(
«mes
[
i
], 
èrgë
)) {

118  
i
;

119 
	}
}

123 
	$vlog_gë_Àvñ_«me
(
vlog_Àvñ
 
Àvñ
)

125 
	`as£π
(
Àvñ
 < 
VLL_N_LEVELS
);

126  
Àvñ_«mes
[
Àvñ
];

127 
	}
}

131 
vlog_Àvñ


132 
	$vlog_gë_Àvñ_vÆ
(c⁄° *
«me
)

134  
	`£¨ch_«me_¨øy
(
«me
, 
Àvñ_«mes
, 
	`ARRAY_SIZE
(level_names));

135 
	}
}

139 
	$vlog_gë_Ácûôy_«me
(
vlog_Ácûôy
 
Ácûôy
)

141 
	`as£π
(
Ácûôy
 < 
VLF_N_FACILITIES
);

142  
Ácûôõs
[
Ácûôy
].
«me
;

143 
	}
}

147 
vlog_Ácûôy


148 
	$vlog_gë_Ácûôy_vÆ
(c⁄° *
«me
)

150 
size_t
 
i
;

152 
i
 = 0; i < 
VLF_N_FACILITIES
; i++) {

153 i‡(!
	`°rˇ£cmp
(
Ácûôõs
[
i
].
«me
,Çame)) {

157  
i
;

158 
	}
}

162 
	$vlog_gë_moduÀ_«me
(c⁄° 
vlog_moduÀ
 *
moduÀ
)

164  
moduÀ
->
«me
;

165 
	}
}

169 
vlog_moduÀ
 *

170 
	$vlog_moduÀ_‰om_«me
(c⁄° *
«me
)

172 
vlog_moduÀ
 **
mp
;

174 
mp
 = 
vlog_moduÀs
; m∞< &vlog_moduÀs[
n_vlog_moduÀs
]; mp++) {

175 i‡(!
	`°rˇ£cmp
(
«me
, (*
mp
)->name)) {

176  *
mp
;

179  
NULL
;

180 
	}
}

183 
vlog_Àvñ


184 
	$vlog_gë_Àvñ
(c⁄° 
vlog_moduÀ
 *
moduÀ
, 
vlog_Ácûôy
 
Ácûôy
)

186 
	`as£π
(
Ácûôy
 < 
VLF_N_FACILITIES
);

187  
moduÀ
->
Àvñs
[
Ácûôy
];

188 
	}
}

191 
	$upd©e_mö_Àvñ
(
vlog_moduÀ
 *
moduÀ
)

193 
vlog_Ácûôy
 
Ácûôy
;

195 
moduÀ
->
mö_Àvñ
 = 
VLL_OFF
;

196 
Ácûôy
 = 0; facûôy < 
VLF_N_FACILITIES
; facility++) {

197 i‡(
log_fd
 >0 || 
Ácûôy
 !
VLF_FILE
) {

198 
vlog_Àvñ
 
Àvñ
 = 
moduÀ
->
Àvñs
[
Ácûôy
];

199 i‡(
Àvñ
 > 
moduÀ
->
mö_Àvñ
) {

200 
moduÀ
->
mö_Àvñ
 = 
Àvñ
;

204 
	}
}

207 
	$£t_Ácûôy_Àvñ
(
vlog_Ácûôy
 
Ácûôy
, 
vlog_moduÀ
 *
moduÀ
,

208 
vlog_Àvñ
 
Àvñ
)

210 
	`as£π
(
Ácûôy
 >0 && facûôy < 
VLF_N_FACILITIES
);

211 
	`as£π
(
Àvñ
 < 
VLL_N_LEVELS
);

213 i‡(!
moduÀ
) {

214 
vlog_moduÀ
 **
mp
;

216 
mp
 = 
vlog_moduÀs
; m∞< &vlog_moduÀs[
n_vlog_moduÀs
]; mp++) {

217 (*
mp
)->
Àvñs
[
Ácûôy
] = 
Àvñ
;

218 
	`upd©e_mö_Àvñ
(*
mp
);

221 
moduÀ
->
Àvñs
[
Ácûôy
] = 
Àvñ
;

222 
	`upd©e_mö_Àvñ
(
moduÀ
);

224 
	}
}

230 
	$vlog_£t_Àvñs
(
vlog_moduÀ
 *
moduÀ
, 
vlog_Ácûôy
 
Ácûôy
,

231 
vlog_Àvñ
 
Àvñ
)

233 
	`as£π
(
Ácûôy
 < 
VLF_N_FACILITIES
 || facûôy =
VLF_ANY_FACILITY
);

234 i‡(
Ácûôy
 =
VLF_ANY_FACILITY
) {

235 
Ácûôy
 = 0; facûôy < 
VLF_N_FACILITIES
; facility++) {

236 
	`£t_Ácûôy_Àvñ
(
Ácûôy
, 
moduÀ
, 
Àvñ
);

239 
	`£t_Ácûôy_Àvñ
(
Ácûôy
, 
moduÀ
, 
Àvñ
);

241 
	}
}

244 
	$do_£t_∑âîn
(
vlog_Ácûôy
 
Ácûôy
, c⁄° *
∑âîn
)

246 
Ácûôy
 *
f
 = &
Ácûôõs
[facility];

247 i‡(!
f
->
deÁu…_∑âîn
) {

248 
	`‰ì
(
f
->
∑âîn
);

250 
f
->
deÁu…_∑âîn
 = 
Ál£
;

252 
f
->
∑âîn
 = 
	`x°rdup
(pattern);

253 
	}
}

257 
	$vlog_£t_∑âîn
(
vlog_Ácûôy
 
Ácûôy
, c⁄° *
∑âîn
)

259 
	`as£π
(
Ácûôy
 < 
VLF_N_FACILITIES
 || facûôy =
VLF_ANY_FACILITY
);

260 i‡(
Ácûôy
 =
VLF_ANY_FACILITY
) {

261 
Ácûôy
 = 0; facûôy < 
VLF_N_FACILITIES
; facility++) {

262 
	`do_£t_∑âîn
(
Ácûôy
, 
∑âîn
);

265 
	`do_£t_∑âîn
(
Ácûôy
, 
∑âîn
);

267 
	}
}

274 
	$vlog_gë_log_fûe
()

276  
log_fûe_«me
;

277 
	}
}

283 
	$vlog_£t_log_fûe
(c⁄° *
fûe_«me
)

285 *
ﬁd_log_fûe_«me
;

286 
vlog_moduÀ
 **
mp
;

287 
îr‹
;

290 i‡(
log_fd
 >= 0) {

291 
	`VLOG_INFO
("closingÜog file");

292 
	`˛o£
(
log_fd
);

293 
log_fd
 = -1;

298 
ﬁd_log_fûe_«me
 = 
log_fûe_«me
;

299 
log_fûe_«me
 = (
fûe_«me


300 ? 
	`x°rdup
(
fûe_«me
)

301 : 
	`xa•rötf
("%s/%s.log", 
	`ovs_logdú
(), 
¥ogøm_«me
));

302 
	`‰ì
(
ﬁd_log_fûe_«me
);

303 
fûe_«me
 = 
NULL
;

307 
log_fd
 = 
	`›í
(
log_fûe_«me
, 
O_WRONLY
 | 
O_CREAT
 | 
O_APPEND
, 0666);

308 i‡(
log_fd
 >= 0) {

309 
	`vlog_upd©e_async_log_fd
();

311 
mp
 = 
vlog_moduÀs
; m∞< &vlog_moduÀs[
n_vlog_moduÀs
]; mp++) {

312 
	`upd©e_mö_Àvñ
(*
mp
);

316 i‡(
log_fd
 < 0) {

317 
	`VLOG_WARN
("failedÅo open %s forÜogging: %s",

318 
log_fûe_«me
, 
	`°ªº‹
(
î∫o
));

319 
îr‹
 = 
î∫o
;

321 
	`VLOG_INFO
("›íedÜog fûê%s", 
log_fûe_«me
);

322 
îr‹
 = 0;

325  
îr‹
;

326 
	}
}

332 
	$vlog_ª›í_log_fûe
()

334 
°©
 
ﬁd
, 
√w
;

337 i‡(!
log_fûe_«me
) {

344 i‡(
log_fd
 >= 0

345 && !
	`f°©
(
log_fd
, &
ﬁd
)

346 && !
	`°©
(
log_fûe_«me
, &
√w
)

347 && 
ﬁd
.
°_dev
 =
√w
.st_dev

348 && 
ﬁd
.
°_öo
 =
√w
.st_ino) {

352  
	`vlog_£t_log_fûe
(
log_fûe_«me
);

353 
	}
}

358 
	$vlog_£t_Àvñs_‰om_°rög
(c⁄° *
s_
)

360 *
s
 = 
	`x°rdup
(
s_
);

361 *
ßve_±r
 = 
NULL
;

362 *
msg
 = 
NULL
;

363 *
w‹d
;

365 
w‹d
 = 
	`°πok_r
(
s
, " ,:\t", &
ßve_±r
);

366 i‡(
w‹d
 && !
	`°rˇ£cmp
(word, "PATTERN")) {

367 
vlog_Ácûôy
 
Ácûôy
;

369 
w‹d
 = 
	`°πok_r
(
NULL
, " ,:\t", &
ßve_±r
);

370 i‡(!
w‹d
) {

371 
msg
 = 
	`x°rdup
("missing facility");

372 
exô
;

375 
Ácûôy
 = (!
	`°rˇ£cmp
(
w‹d
, "ANY")

376 ? 
VLF_ANY_FACILITY


377 : 
	`vlog_gë_Ácûôy_vÆ
(
w‹d
));

378 i‡(
Ácûôy
 =
VLF_N_FACILITIES
) {

379 
msg
 = 
	`xa•rötf
("unknow¿Ácûôy \"%s\"", 
w‹d
);

380 
exô
;

382 
	`vlog_£t_∑âîn
(
Ácûôy
, 
ßve_±r
);

384 
vlog_moduÀ
 *
moduÀ
 = 
NULL
;

385 
vlog_Àvñ
 
Àvñ
 = 
VLL_N_LEVELS
;

386 
vlog_Ácûôy
 
Ácûôy
 = 
VLF_N_FACILITIES
;

388 ; 
w‹d
 !
NULL
; w‹d = 
	`°πok_r
(NULL, " ,:\t", &
ßve_±r
)) {

389 i‡(!
	`°rˇ£cmp
(
w‹d
, "ANY")) {

391 } i‡(
	`vlog_gë_Ácûôy_vÆ
(
w‹d
Ë!
VLF_N_FACILITIES
) {

392 i‡(
Ácûôy
 !
VLF_N_FACILITIES
) {

393 
msg
 = 
	`x°rdup
("cannot specify multiple facilities");

394 
exô
;

396 
Ácûôy
 = 
	`vlog_gë_Ácûôy_vÆ
(
w‹d
);

397 } i‡(
	`vlog_gë_Àvñ_vÆ
(
w‹d
Ë!
VLL_N_LEVELS
) {

398 i‡(
Àvñ
 !
VLL_N_LEVELS
) {

399 
msg
 = 
	`x°rdup
("cannot specify multipleÜevels");

400 
exô
;

402 
Àvñ
 = 
	`vlog_gë_Àvñ_vÆ
(
w‹d
);

403 } i‡(
	`vlog_moduÀ_‰om_«me
(
w‹d
)) {

404 i‡(
moduÀ
) {

405 
msg
 = 
	`x°rdup
("cannot specify multiple modules");

406 
exô
;

408 
moduÀ
 = 
	`vlog_moduÀ_‰om_«me
(
w‹d
);

410 
msg
 = 
	`xa•rötf
("nÿÁcûôy,Üevñ, o∏moduÀ \"%s\"", 
w‹d
);

411 
exô
;

415 i‡(
Ácûôy
 =
VLF_N_FACILITIES
) {

416 
Ácûôy
 = 
VLF_ANY_FACILITY
;

418 i‡(
Àvñ
 =
VLL_N_LEVELS
) {

419 
Àvñ
 = 
VLL_DBG
;

421 
	`vlog_£t_Àvñs
(
moduÀ
, 
Ácûôy
, 
Àvñ
);

424 
exô
:

425 
	`‰ì
(
s
);

426  
msg
;

427 
	}
}

432 
	$vlog_£t_vîbosôy
(c⁄° *
¨g
)

434 i‡(
¨g
) {

435 *
msg
 = 
	`vlog_£t_Àvñs_‰om_°rög
(
¨g
);

436 i‡(
msg
) {

437 
	`ovs_Áèl
(0, "¥o˚ssög \"%s\": %s", 
¨g
, 
msg
);

440 
	`vlog_£t_Àvñs
(
NULL
, 
VLF_ANY_FACILITY
, 
VLL_DBG
);

442 
	}
}

445 
	$vlog_unix˘l_£t
(
unix˘l_c⁄n
 *
c⁄n
, 
¨gc
, c⁄° *
¨gv
[],

446 *
aux
 
OVS_UNUSED
)

448 
i
;

450 
i
 = 1; i < 
¨gc
; i++) {

451 *
msg
 = 
	`vlog_£t_Àvñs_‰om_°rög
(
¨gv
[
i
]);

452 i‡(
msg
) {

453 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, 
msg
);

454 
	`‰ì
(
msg
);

458 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, 
NULL
);

459 
	}
}

462 
	$vlog_unix˘l_li°
(
unix˘l_c⁄n
 *
c⁄n
, 
¨gc
 
OVS_UNUSED
,

463 c⁄° *
¨gv
[] 
OVS_UNUSED
, *
aux
 OVS_UNUSED)

465 *
msg
 = 
	`vlog_gë_Àvñs
();

466 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, 
msg
);

467 
	`‰ì
(
msg
);

468 
	}
}

471 
	$vlog_unix˘l_ª›í
(
unix˘l_c⁄n
 *
c⁄n
, 
¨gc
 
OVS_UNUSED
,

472 c⁄° *
¨gv
[] 
OVS_UNUSED
, *
aux
 OVS_UNUSED)

474 i‡(
log_fûe_«me
) {

475 
îr‹
 = 
	`vlog_ª›í_log_fûe
();

476 i‡(
îr‹
) {

477 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, 
	`°ªº‹
(
î∫o
));

479 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, 
NULL
);

482 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, "LoggingÅo fileÇot configured");

484 
	}
}

489 
	$vlog_öô
()

491 *
¥ogøm_«me_c›y
;

492 
time_t
 
now
;

494 i‡(
vlog_öôed
) {

497 
vlog_öôed
 = 
åue
;

504 
¥ogøm_«me_c›y
 = 
¥ogøm_«me
 ? 
	`x°rdup
’rogøm_«meË: 
NULL
;

505 
	`›ílog
(
¥ogøm_«me_c›y
, 
LOG_NDELAY
, 
LOG_DAEMON
);

507 
now
 = 
	`time_wÆl
();

508 i‡(
now
 < 0) {

509 
tm
Åm;

510 
s
[128];

512 
	`gmtime_r
(&
now
, &
tm
);

513 
	`°r·ime
(
s
,  s, "%a, %d %b %Y %H:%M:%S", &
tm
);

514 
	`VLOG_ERR
("cuºíàtimêi†√g©ive: %†(%ld)", 
s
, (Ë
now
);

517 
	`unix˘l_comm™d_ªgi°î
(

519 1, 
INT_MAX
, 
vlog_unix˘l_£t
, 
NULL
);

520 
	`unix˘l_comm™d_ªgi°î
("vlog/li°", "", 0, 0, 
vlog_unix˘l_li°
, 
NULL
);

521 
	`unix˘l_comm™d_ªgi°î
("vlog/reopen", "", 0, 0,

522 
vlog_unix˘l_ª›í
, 
NULL
);

523 
	}
}

527 
	$vlog_exô
()

529 i‡(
vlog_öôed
) {

530 
	`˛o£log
();

531 
vlog_öôed
 = 
Ál£
;

533 
	}
}

537 
	$vlog_gë_Àvñs
()

539 
ds
 
s
 = 
DS_EMPTY_INITIALIZER
;

540 
vlog_moduÀ
 **
mp
;

541 
svec
 
löes
 = 
SVEC_EMPTY_INITIALIZER
;

542 *
löe
;

543 
size_t
 
i
;

545 
	`ds_put_f‹m©
(&
s
, " console syslog file\n");

546 
	`ds_put_f‹m©
(&
s
, " ------- ------ ------\n");

548 
mp
 = 
vlog_moduÀs
; m∞< &vlog_moduÀs[
n_vlog_moduÀs
]; mp++) {

549 
löe
 = 
	`xa•rötf
("%-16s %4s %4s %4s\n",

550 
	`vlog_gë_moduÀ_«me
(*
mp
),

551 
	`vlog_gë_Àvñ_«me
(
	`vlog_gë_Àvñ
(*
mp
, 
VLF_CONSOLE
)),

552 
	`vlog_gë_Àvñ_«me
(
	`vlog_gë_Àvñ
(*
mp
, 
VLF_SYSLOG
)),

553 
	`vlog_gë_Àvñ_«me
(
	`vlog_gë_Àvñ
(*
mp
, 
VLF_FILE
)));

554 
	`svec_add_noc›y
(&
löes
, 
löe
);

557 
	`svec_s‹t
(&
löes
);

558 
	`SVEC_FOR_EACH
 (
i
, 
löe
, &
löes
) {

559 
	`ds_put_c°r
(&
s
, 
löe
);

561 
	`svec_de°roy
(&
löes
);

563  
	`ds_c°r
(&
s
);

564 
	}
}

569 
boﬁ


570 
	$vlog_is_íabÀd
(c⁄° 
vlog_moduÀ
 *
moduÀ
, 
vlog_Àvñ
 
Àvñ
)

572  
moduÀ
->
mö_Àvñ
 >
Àvñ
;

573 
	}
}

576 
	$„tch_bø˚s
(c⁄° *
p
, c⁄° *
def
, *
out
, 
size_t
 
out_size
)

578 i‡(*
p
 == '{') {

579 
size_t
 
n
 = 
	`°rc•n
(
p
 + 1, "}");

580 
size_t
 
n_c›y
 = 
	`MIN
(
n
, 
out_size
 - 1);

581 
	`mem˝y
(
out
, 
p
 + 1, 
n_c›y
);

582 
out
[
n_c›y
] = '\0';

583 
p
 +
n
 + 2;

585 
	`ovs_°æ˝y
(
out
, 
def
, 
out_size
);

587  
p
;

588 
	}
}

591 
	$f‹m©_log_mesßge
(c⁄° 
vlog_moduÀ
 *
moduÀ
, 
vlog_Àvñ
 
Àvñ
,

592 
vlog_Ácûôy
 
Ácûôy
, 
msg_num
,

593 c⁄° *
mesßge
, 
va_li°
 
¨gs_
, 
ds
 *
s
)

595 
tmp
[128];

596 
va_li°
 
¨gs
;

597 c⁄° *
p
;

599 
	`ds_˛ór
(
s
);

600 
p
 = 
Ácûôõs
[
Ácûôy
].
∑âîn
; *p != '\0'; ) {

601 íum { 
LEFT
, 
RIGHT
 } 
ju°ify
 = RIGHT;

602 
∑d
 = '0';

603 
size_t
 
Àngth
, 
fõld
, 
u£d
;

605 i‡(*
p
 != '%') {

606 
	`ds_put_ch¨
(
s
, *
p
++);

610 
p
++;

611 i‡(*
p
 == '-') {

612 
ju°ify
 = 
LEFT
;

613 
p
++;

615 i‡(*
p
 == '0') {

616 
∑d
 = '0';

617 
p
++;

619 
fõld
 = 0;

620 
	`isdigô
(()*
p
)) {

621 
fõld
 = (fõld * 10Ë+ (*
p
 - '0');

622 
p
++;

625 
Àngth
 = 
s
->length;

626 *
p
++) {

628 
	`ds_put_c°r
(
s
, 
¥ogøm_«me
);

631 
p
 = 
	`„tch_bø˚s
’, "", 
tmp
, Åmp);

632 
	`ds_put_c°r
(
s
, 
	`vlog_gë_moduÀ_«me
(
moduÀ
));

635 
p
 = 
	`„tch_bø˚s
’, "%Y-%m-%d %H:%M:%S", 
tmp
, Åmp);

636 
	`ds_put_°r·ime
(
s
, 
tmp
, 
Ál£
);

639 
p
 = 
	`„tch_bø˚s
’, "%Y-%m-%d %H:%M:%S", 
tmp
, Åmp);

640 
	`ds_put_°r·ime
(
s
, 
tmp
, 
åue
);

644 
Àngth
 = 
s
->length;

645 
	`va_c›y
(
¨gs
, 
¨gs_
);

646 
	`ds_put_f‹m©_vÆi°
(
s
, 
mesßge
, 
¨gs
);

647 
	`va_íd
(
¨gs
);

648 
s
->
Àngth
 >Üígth && s->
°rög
[s->length - 1] == '\n') {

649 
s
->
Àngth
--;

653 
	`ds_put_f‹m©
(
s
, "%u", 
msg_num
);

656 
	`ds_put_ch¨
(
s
, '\n');

659 
	`ds_put_c°r
(
s
, 
	`vlog_gë_Àvñ_«me
(
Àvñ
));

662 
	`ds_put_f‹m©
(
s
, "%ld", (Ë
	`gëpid
());

665 
	`ds_put_f‹m©
(
s
, "%Œd", 
	`time_m£c
(Ë- 
	`time_boŸ_m£c
());

668 
	`ds_put_c°r
(
s
, 
sub¥ogøm_«me
[0] ? subprogram_name : "main");

671 i‡(
sub¥ogøm_«me
[0]) {

672 
	`ds_put_f‹m©
(
s
, "(%s)", 
sub¥ogøm_«me
);

676 
	`ds_put_ch¨
(
s
, 
p
[-1]);

679 
u£d
 = 
s
->
Àngth
 -Üength;

680 i‡(
u£d
 < 
fõld
) {

681 
size_t
 
n_∑d
 = 
fõld
 - 
u£d
;

682 i‡(
ju°ify
 =
RIGHT
) {

683 
	`ds_put_unöô
(
s
, 
n_∑d
);

684 
	`memmove
(&
s
->
°rög
[
Àngth
 + 
n_∑d
], &s->°rög[Àngth], 
u£d
);

685 
	`mem£t
(&
s
->
°rög
[
Àngth
], 
∑d
, 
n_∑d
);

687 
	`ds_put_ch¨_mu…ùÀ
(
s
, 
∑d
, 
n_∑d
);

691 
	}
}

698 
	$vlog_vÆi°
(c⁄° 
vlog_moduÀ
 *
moduÀ
, 
vlog_Àvñ
 
Àvñ
,

699 c⁄° *
mesßge
, 
va_li°
 
¨gs
)

701 
boﬁ
 
log_to_c⁄sﬁe
 = 
moduÀ
->
Àvñs
[
VLF_CONSOLE
] >
Àvñ
;

702 
boﬁ
 
log_to_sy¶og
 = 
moduÀ
->
Àvñs
[
VLF_SYSLOG
] >
Àvñ
;

703 
boﬁ
 
log_to_fûe
 = 
moduÀ
->
Àvñs
[
VLF_FILE
] >
Àvñ
 && 
log_fd
 >= 0;

704 i‡(
log_to_c⁄sﬁe
 || 
log_to_sy¶og
 || 
log_to_fûe
) {

705 
ßve_î∫o
 = 
î∫o
;

706 
msg_num
;

707 
ds
 
s
;

709 
	`vlog_öô
();

711 
	`ds_öô
(&
s
);

712 
	`ds_ª£rve
(&
s
, 1024);

713 
msg_num
++;

715 i‡(
log_to_c⁄sﬁe
) {

716 
	`f‹m©_log_mesßge
(
moduÀ
, 
Àvñ
, 
VLF_CONSOLE
, 
msg_num
,

717 
mesßge
, 
¨gs
, &
s
);

718 
	`ds_put_ch¨
(&
s
, '\n');

719 
	`Âuts
(
	`ds_c°r
(&
s
), 
°dîr
);

722 i‡(
log_to_sy¶og
) {

723 
sy¶og_Àvñ
 = 
sy¶og_Àvñs
[
Àvñ
];

724 *
ßve_±r
 = 
NULL
;

725 *
löe
;

727 
	`f‹m©_log_mesßge
(
moduÀ
, 
Àvñ
, 
VLF_SYSLOG
, 
msg_num
,

728 
mesßge
, 
¨gs
, &
s
);

729 
löe
 = 
	`°πok_r
(
s
.
°rög
, "\n", &
ßve_±r
);Üine;

730 
löe
 = 
	`°πok_r
(
NULL
, "\n", &
ßve_±r
)) {

731 
	`sy¶og
(
sy¶og_Àvñ
, "%s", 
löe
);

735 i‡(
log_to_fûe
) {

736 
	`f‹m©_log_mesßge
(
moduÀ
, 
Àvñ
, 
VLF_FILE
, 
msg_num
,

737 
mesßge
, 
¨gs
, &
s
);

738 
	`ds_put_ch¨
(&
s
, '\n');

739 
	`vlog_wrôe_fûe
(&
s
);

742 
	`ds_de°roy
(&
s
);

743 
î∫o
 = 
ßve_î∫o
;

745 
	}
}

748 
	$vlog
(c⁄° 
vlog_moduÀ
 *
moduÀ
, 
vlog_Àvñ
 
Àvñ
,

749 c⁄° *
mesßge
, ...)

751 
va_li°
 
¨gs
;

753 
	`va_°¨t
(
¨gs
, 
mesßge
);

754 
	`vlog_vÆi°
(
moduÀ
, 
Àvñ
, 
mesßge
, 
¨gs
);

755 
	`va_íd
(
¨gs
);

756 
	}
}

765 
	$vlog_Áèl_vÆi°
(c⁄° 
vlog_moduÀ
 *
moduÀ_
,

766 c⁄° *
mesßge
, 
va_li°
 
¨gs
)

768 
vlog_moduÀ
 *
moduÀ
 = 
	`CONST_CAST
(vlog_moduÀ *, 
moduÀ_
);

772 
moduÀ
->
Àvñs
[
VLF_CONSOLE
] = 
VLL_OFF
;

774 
	`vlog_vÆi°
(
moduÀ
, 
VLL_EMER
, 
mesßge
, 
¨gs
);

775 
	`ovs_Áèl_vÆi°
(0, 
mesßge
, 
¨gs
);

776 
	}
}

785 
	$vlog_Áèl
(c⁄° 
vlog_moduÀ
 *
moduÀ
, c⁄° *
mesßge
, ...)

787 
va_li°
 
¨gs
;

789 
	`va_°¨t
(
¨gs
, 
mesßge
);

790 
	`vlog_Áèl_vÆi°
(
moduÀ
, 
mesßge
, 
¨gs
);

791 
	`va_íd
(
¨gs
);

792 
	}
}

800 
	$vlog_ab‹t_vÆi°
(c⁄° 
vlog_moduÀ
 *
moduÀ_
,

801 c⁄° *
mesßge
, 
va_li°
 
¨gs
)

803 
vlog_moduÀ
 *
moduÀ
 = (vlog_moduÀ *Ë
moduÀ_
;

807 
moduÀ
->
Àvñs
[
VLF_CONSOLE
] = 
VLL_OFF
;

809 
	`vlog_vÆi°
(
moduÀ
, 
VLL_EMER
, 
mesßge
, 
¨gs
);

810 
	`ovs_ab‹t_vÆi°
(0, 
mesßge
, 
¨gs
);

811 
	}
}

819 
	$vlog_ab‹t
(c⁄° 
vlog_moduÀ
 *
moduÀ
, c⁄° *
mesßge
, ...)

821 
va_li°
 
¨gs
;

823 
	`va_°¨t
(
¨gs
, 
mesßge
);

824 
	`vlog_ab‹t_vÆi°
(
moduÀ
, 
mesßge
, 
¨gs
);

825 
	`va_íd
(
¨gs
);

826 
	}
}

828 
boﬁ


829 
	$vlog_should_dr›
(c⁄° 
vlog_moduÀ
 *
moduÀ
, 
vlog_Àvñ
 
Àvñ
,

830 
vlog_øã_limô
 *
æ
)

832 i‡(!
	`vlog_is_íabÀd
(
moduÀ
, 
Àvñ
)) {

833  
åue
;

836 i‡(!
	`tokí_buckë_wôhdøw
(&
æ
->
tokí_buckë
, 
VLOG_MSG_TOKENS
)) {

837 
time_t
 
now
 = 
	`time_now
();

838 i‡(!
æ
->
n_dr›≥d
) {

839 
æ
->
fú°_dr›≥d
 = 
now
;

841 
æ
->
œ°_dr›≥d
 = 
now
;

842 
æ
->
n_dr›≥d
++;

843  
åue
;

846 i‡(
æ
->
n_dr›≥d
) {

847 
time_t
 
now
 = 
	`time_now
();

848 
fú°_dr›≥d_ñ≠£d
 = 
now
 - 
æ
->
fú°_dr›≥d
;

849 
œ°_dr›≥d_ñ≠£d
 = 
now
 - 
æ
->
œ°_dr›≥d
;

851 
	`vlog
(
moduÀ
, 
Àvñ
,

854 
æ
->
n_dr›≥d
, 
fú°_dr›≥d_ñ≠£d
, 
œ°_dr›≥d_ñ≠£d
);

856 
æ
->
n_dr›≥d
 = 0;

858  
Ál£
;

859 
	}
}

862 
	$vlog_øã_limô
(c⁄° 
vlog_moduÀ
 *
moduÀ
, 
vlog_Àvñ
 
Àvñ
,

863 
vlog_øã_limô
 *
æ
, c⁄° *
mesßge
, ...)

865 i‡(!
	`vlog_should_dr›
(
moduÀ
, 
Àvñ
, 
æ
)) {

866 
va_li°
 
¨gs
;

868 
	`va_°¨t
(
¨gs
, 
mesßge
);

869 
	`vlog_vÆi°
(
moduÀ
, 
Àvñ
, 
mesßge
, 
¨gs
);

870 
	`va_íd
(
¨gs
);

872 
	}
}

875 
	$vlog_ußge
()

877 
	`¥ötf
("\nLogging options:\n"

882 
	`ovs_logdú
(), 
¥ogøm_«me
);

883 
	}
}

885 
boﬁ
 
	gvlog_async_öôed
 = 
Ál£
;

887 
w‹kî_ªque°_func
 
	gvlog_async_wrôe_ªque°_cb
;

890 
	$vlog_wrôe_fûe
(
ds
 *
s
)

892 i‡(
	`w‹kî_is_ru¬ög
()) {

893 
boﬁ
 
ö_w‹kî_ªque°
 = 
Ál£
;

894 i‡(!
ö_w‹kî_ªque°
) {

895 
ö_w‹kî_ªque°
 = 
åue
;

897 
	`w‹kî_ªque°
(
s
->
°rög
, s->
Àngth
,

898 &
log_fd
, 
vlog_async_öôed
 ? 0 : 1,

899 
vlog_async_wrôe_ªque°_cb
, 
NULL
, NULL);

900 
vlog_async_öôed
 = 
åue
;

902 
ö_w‹kî_ªque°
 = 
Ál£
;

909 
	`COVERAGE_INC
(
vlog_ªcursive
);

912 
	`ign‹e
(
	`wrôe
(
log_fd
, 
s
->
°rög
, s->
Àngth
));

913 
	}
}

916 
	$vlog_upd©e_async_log_fd
()

918 i‡(
	`w‹kî_is_ru¬ög
()) {

919 
	`w‹kî_ªque°
(
NULL
, 0, &
log_fd
, 1, 
vlog_async_wrôe_ªque°_cb
,

920 
NULL
, NULL);

921 
vlog_async_öôed
 = 
åue
;

923 
	}
}

926 
	$vlog_async_wrôe_ªque°_cb
(
oÂbuf
 *
ªque°
,

927 c⁄° *
fd
, 
size_t
 
n_fds
)

929 i‡(
n_fds
 > 0) {

930 i‡(
log_fd
 >= 0) {

931 
	`˛o£
(
log_fd
);

933 
log_fd
 = *
fd
;

936 i‡(
ªque°
->
size
 > 0) {

937 
	`ign‹e
(
	`wrôe
(
log_fd
, 
ªque°
->
d©a
,Ñeque°->
size
));

939 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/vlog.h

17 #i‚de‡
VLOG_H


18 
	#VLOG_H
 1

	)

20 
	~<limôs.h
>

21 
	~<°d¨g.h
>

22 
	~<°dboﬁ.h
>

23 
	~<time.h
>

24 
	~"compûî.h
"

25 
	~"ßt-m©h.h
"

26 
	~"tokí-buckë.h
"

27 
	~"utû.h
"

29 #ifde‡ 
__˝lu•lus


36 
	#VLOG_LEVELS
 \

37 
	`VLOG_LEVEL
(
OFF
, 
LOG_ALERT
) \

38 
	`VLOG_LEVEL
(
EMER
, 
LOG_ALERT
) \

39 
	`VLOG_LEVEL
(
ERR
, 
LOG_ERR
) \

40 
	`VLOG_LEVEL
(
WARN
, 
LOG_WARNING
) \

41 
	`VLOG_LEVEL
(
INFO
, 
LOG_NOTICE
) \

42 
	`VLOG_LEVEL
(
DBG
, 
LOG_DEBUG
)

	)

43 
	evlog_Àvñ
 {

44 
	#VLOG_LEVEL
(
NAME
, 
SYSLOG_LEVEL
Ë
VLL_
##NAME,

	)

45 
VLOG_LEVELS


46 #unde‡
VLOG_LEVEL


47 
VLL_N_LEVELS


50 c⁄° *
vlog_gë_Àvñ_«me
(
vlog_Àvñ
);

51 
vlog_Àvñ
 
vlog_gë_Àvñ_vÆ
(c⁄° *
«me
);

54 
	#VLOG_FACILITIES
 \

55 
	`VLOG_FACILITY
(
SYSLOG
, "%05N|%c%T|%p|%m") \

56 
	`VLOG_FACILITY
(
CONSOLE
, "%D{%Y-%m-%dT%H:%M:%SZ}|%05N|%c%T|%p|%m") \

57 
	`VLOG_FACILITY
(
FILE
, "%D{%Y-%m-%dT%H:%M:%SZ}|%05N|%c%T|%p|%m")

	)

58 
	evlog_Ácûôy
 {

59 
	#VLOG_FACILITY
(
NAME
, 
PATTERN
Ë
VLF_
##NAME,

	)

60 
VLOG_FACILITIES


61 #unde‡
VLOG_FACILITY


62 
VLF_N_FACILITIES
,

63 
VLF_ANY_FACILITY
 = -1

66 c⁄° *
vlog_gë_Ácûôy_«me
(
vlog_Ácûôy
);

67 
vlog_Ácûôy
 
vlog_gë_Ácûôy_vÆ
(c⁄° *
«me
);

70 
	svlog_moduÀ
 {

71 c⁄° *
«me
;

72 
Àvñs
[
VLF_N_FACILITIES
];

73 
mö_Àvñ
;

77 #i‡
USE_LINKER_SECTIONS


78 
	#VLOG_DEFINE_MODULE
(
MODULE
) \

79 
	`VLOG_DEFINE_MODULE__
(
MODULE
) \

80 
vlog_moduÀ
 *
vlog_moduÀ_±r_
##
MODULE
; \

81 
vlog_moduÀ
 *
vlog_moduÀ_±r_
##
MODULE
 \

82 
	`__©åibuã__
((
	`£˘i⁄
("vlog_moduÀs"))Ë&
VLM_
##
MODULE


	)

84 
	#VLOG_DEFINE_MODULE
(
MODULE
Ë
vlog_moduÀ
 
VLM_
##
	)
MODULE

87 c⁄° *
vlog_gë_moduÀ_«me
(c⁄° 
vlog_moduÀ
 *);

88 
vlog_moduÀ
 *
vlog_moduÀ_‰om_«me
(c⁄° *
«me
);

91 
	svlog_øã_limô
 {

92 
tokí_buckë
 
	gtokí_buckë
;

93 
time_t
 
	gfú°_dr›≥d
;

94 
time_t
 
	gœ°_dr›≥d
;

95 
	gn_dr›≥d
;

100 
	#VLOG_MSG_TOKENS
 (60 * 1000)

	)

104 
	#VLOG_RATE_LIMIT_INIT
(
RATE
, 
BURST
) \

106 
	`TOKEN_BUCKET_INIT
(
RATE
, 
	`SAT_MUL
(
BURST
, 
VLOG_MSG_TOKENS
)), \

110 }

	)

113 
vlog_Àvñ
 
vlog_gë_Àvñ
(c⁄° 
vlog_moduÀ
 *, 
vlog_Ácûôy
);

114 
vlog_£t_Àvñs
(
vlog_moduÀ
 *,

115 
vlog_Ácûôy
, 
vlog_Àvñ
);

116 *
vlog_£t_Àvñs_‰om_°rög
(const *);

117 *
vlog_gë_Àvñs
();

118 
boﬁ
 
vlog_is_íabÀd
(c⁄° 
vlog_moduÀ
 *, 
vlog_Àvñ
);

119 
boﬁ
 
vlog_should_dr›
(c⁄° 
vlog_moduÀ
 *, 
vlog_Àvñ
,

120 
vlog_øã_limô
 *);

121 
vlog_£t_vîbosôy
(c⁄° *
¨g
);

124 
vlog_£t_∑âîn
(
vlog_Ácûôy
, c⁄° *
∑âîn
);

125 c⁄° *
vlog_gë_log_fûe
();

126 
vlog_£t_log_fûe
(c⁄° *
fûe_«me
);

127 
vlog_ª›í_log_fûe
();

130 
vlog_öô
();

131 
vlog_exô
();

134 
vlog
(c⁄° 
vlog_moduÀ
 *, 
vlog_Àvñ
, c⁄° *
f‹m©
, ...)

135 
PRINTF_FORMAT
 (3, 4);

136 
vlog_vÆi°
(c⁄° 
vlog_moduÀ
 *, 
vlog_Àvñ
,

137 c⁄° *, 
va_li°
)

138 
PRINTF_FORMAT
 (3, 0);

140 
vlog_Áèl
(c⁄° 
vlog_moduÀ
 *, c⁄° *
f‹m©
, ...)

141 
PRINTF_FORMAT
 (2, 3Ë
	gNO_RETURN
;

142 
vlog_Áèl_vÆi°
(c⁄° 
vlog_moduÀ
 *, c⁄° *
f‹m©
, 
va_li°
)

143 
PRINTF_FORMAT
 (2, 0Ë
	gNO_RETURN
;

145 
vlog_ab‹t
(c⁄° 
vlog_moduÀ
 *, c⁄° *
f‹m©
, ...)

146 
PRINTF_FORMAT
 (2, 3Ë
	gNO_RETURN
;

147 
vlog_ab‹t_vÆi°
(c⁄° 
vlog_moduÀ
 *, c⁄° *
f‹m©
, 
va_li°
)

148 
PRINTF_FORMAT
 (2, 0Ë
	gNO_RETURN
;

150 
vlog_øã_limô
(c⁄° 
vlog_moduÀ
 *, 
vlog_Àvñ
,

151 
vlog_øã_limô
 *, const *, ...)

152 
PRINTF_FORMAT
 (4, 5);

157 
	#VLOG_DEFINE_THIS_MODULE
(
MODULE
) \

158 
	`VLOG_DEFINE_MODULE
(
MODULE
); \

159 
vlog_moduÀ
 *c⁄° 
THIS_MODULE
 = &
VLM_
##
MODULE


	)

167 
	#VLOG_FATAL
(...Ë
	`vlog_Áèl
(
THIS_MODULE
, 
__VA_ARGS__
)

	)

168 
	#VLOG_ABORT
(...Ë
	`vlog_ab‹t
(
THIS_MODULE
, 
__VA_ARGS__
)

	)

169 
	#VLOG_EMER
(...Ë
	`VLOG
(
VLL_EMER
, 
__VA_ARGS__
)

	)

170 
	#VLOG_ERR
(...Ë
	`VLOG
(
VLL_ERR
, 
__VA_ARGS__
)

	)

171 
	#VLOG_WARN
(...Ë
	`VLOG
(
VLL_WARN
, 
__VA_ARGS__
)

	)

172 
	#VLOG_INFO
(...Ë
	`VLOG
(
VLL_INFO
, 
__VA_ARGS__
)

	)

173 
	#VLOG_DBG
(...Ë
	`VLOG
(
VLL_DBG
, 
__VA_ARGS__
)

	)

178 
	#VLOG_IS_ERR_ENABLED
(Ë
	`vlog_is_íabÀd
(
THIS_MODULE
, 
VLL_ERR
)

	)

179 
	#VLOG_IS_WARN_ENABLED
(Ë
	`vlog_is_íabÀd
(
THIS_MODULE
, 
VLL_WARN
)

	)

180 
	#VLOG_IS_INFO_ENABLED
(Ë
	`vlog_is_íabÀd
(
THIS_MODULE
, 
VLL_INFO
)

	)

181 
	#VLOG_IS_DBG_ENABLED
(Ë
	`vlog_is_íabÀd
(
THIS_MODULE
, 
VLL_DBG
)

	)

186 
	#VLOG_ERR_RL
(
RL
, ...Ë
	`VLOG_RL
(RL, 
VLL_ERR
, 
__VA_ARGS__
)

	)

187 
	#VLOG_WARN_RL
(
RL
, ...Ë
	`VLOG_RL
(RL, 
VLL_WARN
, 
__VA_ARGS__
)

	)

188 
	#VLOG_INFO_RL
(
RL
, ...Ë
	`VLOG_RL
(RL, 
VLL_INFO
, 
__VA_ARGS__
)

	)

189 
	#VLOG_DBG_RL
(
RL
, ...Ë
	`VLOG_RL
(RL, 
VLL_DBG
, 
__VA_ARGS__
)

	)

191 
	#VLOG_DROP_ERR
(
RL
Ë
	`vlog_should_dr›
(
THIS_MODULE
, 
VLL_ERR
, RL)

	)

192 
	#VLOG_DROP_WARN
(
RL
Ë
	`vlog_should_dr›
(
THIS_MODULE
, 
VLL_WARN
, RL)

	)

193 
	#VLOG_DROP_INFO
(
RL
Ë
	`vlog_should_dr›
(
THIS_MODULE
, 
VLL_INFO
, RL)

	)

194 
	#VLOG_DROP_DBG
(
RL
Ë
	`vlog_should_dr›
(
THIS_MODULE
, 
VLL_DBG
, RL)

	)

197 
	#VLOG_ERR_ONCE
(...Ë
	`VLOG_ONCE
(
VLL_ERR
, 
__VA_ARGS__
)

	)

198 
	#VLOG_WARN_ONCE
(...Ë
	`VLOG_ONCE
(
VLL_WARN
, 
__VA_ARGS__
)

	)

199 
	#VLOG_INFO_ONCE
(...Ë
	`VLOG_ONCE
(
VLL_INFO
, 
__VA_ARGS__
)

	)

200 
	#VLOG_DBG_ONCE
(...Ë
	`VLOG_ONCE
(
VLL_DBG
, 
__VA_ARGS__
)

	)

203 
	#VLOG_OPTION_ENUMS
 
OPT_LOG_FILE


	)

204 
	#VLOG_LONG_OPTIONS
 \

205 {"vîbo£", 
›ti⁄Æ_¨gumít
, 
NULL
, 'v'}, \

206 {"log-fûe", 
›ti⁄Æ_¨gumít
, 
NULL
, 
OPT_LOG_FILE
}

	)

207 
	#VLOG_OPTION_HANDLERS
 \

209 
	`vlog_£t_vîbosôy
(
›èrg
); \

211 
OPT_LOG_FILE
: \

212 
	`vlog_£t_log_fûe
(
›èrg
); \

213 ;

	)

214 
vlog_ußge
();

217 
	#VLOG
(
LEVEL
, ...) \

219 
vlog_Àvñ
 
Àvñ__
 = 
LEVEL
; \

220 i‡(
THIS_MODULE
->
mö_Àvñ
 >
Àvñ__
) { \

221 
	`vlog
(
THIS_MODULE
, 
Àvñ__
, 
__VA_ARGS__
); \

223 } 0)

	)

224 
	#VLOG_RL
(
RL
, 
LEVEL
, ...) \

226 
vlog_Àvñ
 
Àvñ__
 = 
LEVEL
; \

227 i‡(
THIS_MODULE
->
mö_Àvñ
 >
Àvñ__
) { \

228 
	`vlog_øã_limô
(
THIS_MODULE
, 
Àvñ__
, 
RL
, 
__VA_ARGS__
); \

230 } 0)

	)

231 
	#VLOG_ONCE
(
LEVEL
, ...) \

233 
boﬁ
 
Æªady_logged
; \

234 i‡(!
Æªady_logged
) { \

235 
Æªady_logged
 = 
åue
; \

236 
	`vlog
(
THIS_MODULE
, 
LEVEL
, 
__VA_ARGS__
); \

238 } 0)

	)

240 
	#VLOG_DEFINE_MODULE__
(
MODULE
) \

241 
vlog_moduÀ
 
VLM_
##
MODULE
; \

242 
vlog_moduÀ
 
VLM_
##
MODULE
 = \

245 { [ 0 ... 
VLF_N_FACILITIES
 - 1] = 
VLL_INFO
 }, \

246 
VLL_INFO
, \

247 };

	)

249 #ifde‡ 
__˝lu•lus


	@/home/lsch/mytest/openvswitch-1.9.0/lib/vswitch-idl.c

3 
	~<c⁄fig.h
>

4 
	~"lib/vswôch-idl.h
"

5 
	~<as£π.h
>

6 
	~<limôs.h
>

7 
	~"ovsdb-d©a.h
"

8 
	~"ovsdb-îr‹.h
"

10 #ifde‡
__CHECKER__


12 íum { 
	msizeof_boﬁ
 = 1 };

14 íum { 
	msizeof_boﬁ
 = (
boﬁ
) };

17 
boﬁ
 
	göôed
;

20 
ov§ec_bridge
 *

21 
	$ov§ec_bridge_ˇ°
(c⁄° 
ovsdb_idl_row
 *
row
)

23  
row
 ? 
	`CONTAINER_OF
‘ow, 
ov§ec_bridge
, 
hódî_
Ë: 
NULL
;

24 
	}
}

26 
ov§ec_c⁄åﬁÀr
 *

27 
	$ov§ec_c⁄åﬁÀr_ˇ°
(c⁄° 
ovsdb_idl_row
 *
row
)

29  
row
 ? 
	`CONTAINER_OF
‘ow, 
ov§ec_c⁄åﬁÀr
, 
hódî_
Ë: 
NULL
;

30 
	}
}

32 
ov§ec_Êow_èbÀ
 *

33 
	$ov§ec_Êow_èbÀ_ˇ°
(c⁄° 
ovsdb_idl_row
 *
row
)

35  
row
 ? 
	`CONTAINER_OF
‘ow, 
ov§ec_Êow_èbÀ
, 
hódî_
Ë: 
NULL
;

36 
	}
}

38 
ov§ec_öãrÁ˚
 *

39 
	$ov§ec_öãrÁ˚_ˇ°
(c⁄° 
ovsdb_idl_row
 *
row
)

41  
row
 ? 
	`CONTAINER_OF
‘ow, 
ov§ec_öãrÁ˚
, 
hódî_
Ë: 
NULL
;

42 
	}
}

44 
ov§ec_m™agî
 *

45 
	$ov§ec_m™agî_ˇ°
(c⁄° 
ovsdb_idl_row
 *
row
)

47  
row
 ? 
	`CONTAINER_OF
‘ow, 
ov§ec_m™agî
, 
hódî_
Ë: 
NULL
;

48 
	}
}

50 
ov§ec_múr‹
 *

51 
	$ov§ec_múr‹_ˇ°
(c⁄° 
ovsdb_idl_row
 *
row
)

53  
row
 ? 
	`CONTAINER_OF
‘ow, 
ov§ec_múr‹
, 
hódî_
Ë: 
NULL
;

54 
	}
}

56 
ov§ec_√tÊow
 *

57 
	$ov§ec_√tÊow_ˇ°
(c⁄° 
ovsdb_idl_row
 *
row
)

59  
row
 ? 
	`CONTAINER_OF
‘ow, 
ov§ec_√tÊow
, 
hódî_
Ë: 
NULL
;

60 
	}
}

62 
ov§ec_›í_vswôch
 *

63 
	$ov§ec_›í_vswôch_ˇ°
(c⁄° 
ovsdb_idl_row
 *
row
)

65  
row
 ? 
	`CONTAINER_OF
‘ow, 
ov§ec_›í_vswôch
, 
hódî_
Ë: 
NULL
;

66 
	}
}

68 
ov§ec_p‹t
 *

69 
	$ov§ec_p‹t_ˇ°
(c⁄° 
ovsdb_idl_row
 *
row
)

71  
row
 ? 
	`CONTAINER_OF
‘ow, 
ov§ec_p‹t
, 
hódî_
Ë: 
NULL
;

72 
	}
}

74 
ov§ec_qos
 *

75 
	$ov§ec_qos_ˇ°
(c⁄° 
ovsdb_idl_row
 *
row
)

77  
row
 ? 
	`CONTAINER_OF
‘ow, 
ov§ec_qos
, 
hódî_
Ë: 
NULL
;

78 
	}
}

80 
ov§ec_queue
 *

81 
	$ov§ec_queue_ˇ°
(c⁄° 
ovsdb_idl_row
 *
row
)

83  
row
 ? 
	`CONTAINER_OF
‘ow, 
ov§ec_queue
, 
hódî_
Ë: 
NULL
;

84 
	}
}

86 
ov§ec_s¶
 *

87 
	$ov§ec_s¶_ˇ°
(c⁄° 
ovsdb_idl_row
 *
row
)

89  
row
 ? 
	`CONTAINER_OF
‘ow, 
ov§ec_s¶
, 
hódî_
Ë: 
NULL
;

90 
	}
}

92 
ov§ec_sÊow
 *

93 
	$ov§ec_sÊow_ˇ°
(c⁄° 
ovsdb_idl_row
 *
row
)

95  
row
 ? 
	`CONTAINER_OF
‘ow, 
ov§ec_sÊow
, 
hódî_
Ë: 
NULL
;

96 
	}
}

101 
	$ov§ec_bridge_∑r£_c⁄åﬁÀr
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

103 
ov§ec_bridge
 *
row
 = 
	`ov§ec_bridge_ˇ°
(
row_
);

104 
size_t
 
i
;

106 
	`as£π
(
öôed
);

107 
row
->
c⁄åﬁÀr
 = 
NULL
;

108 
row
->
n_c⁄åﬁÀr
 = 0;

109 
i
 = 0; i < 
d©um
->
n
; i++) {

110 
ov§ec_c⁄åﬁÀr
 *
keyRow
 = 
	`ov§ec_c⁄åﬁÀr_ˇ°
(
	`ovsdb_idl_gë_row_¨c
(
row_
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_CONTROLLER
], &
d©um
->
keys
[
i
].
uuid
));

111 i‡(
keyRow
) {

112 i‡(!
row
->
n_c⁄åﬁÀr
) {

113 
row
->
c⁄åﬁÀr
 = 
	`xmÆloc
(
d©um
->
n
 *  *row->controller);

115 
row
->
c⁄åﬁÀr
[row->
n_c⁄åﬁÀr
] = 
keyRow
;

116 
row
->
n_c⁄åﬁÀr
++;

119 
	}
}

122 
	$ov§ec_bridge_∑r£_d©≠©h_id
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

124 
ov§ec_bridge
 *
row
 = 
	`ov§ec_bridge_ˇ°
(
row_
);

126 
	`as£π
(
öôed
);

127 i‡(
d©um
->
n
 >= 1) {

128 
row
->
d©≠©h_id
 = 
d©um
->
keys
[0].
°rög
;

130 
row
->
d©≠©h_id
 = 
NULL
;

132 
	}
}

135 
	$ov§ec_bridge_∑r£_d©≠©h_ty≥
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

137 
ov§ec_bridge
 *
row
 = 
	`ov§ec_bridge_ˇ°
(
row_
);

139 
	`as£π
(
öôed
);

140 i‡(
d©um
->
n
 >= 1) {

141 
row
->
d©≠©h_ty≥
 = 
d©um
->
keys
[0].
°rög
;

143 
row
->
d©≠©h_ty≥
 = "";

145 
	}
}

148 
	$ov§ec_bridge_∑r£_exã∫Æ_ids
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

150 
ov§ec_bridge
 *
row
 = 
	`ov§ec_bridge_ˇ°
(
row_
);

151 
size_t
 
i
;

153 
	`as£π
(
öôed
);

154 
	`sm≠_öô
(&
row
->
exã∫Æ_ids
);

155 
i
 = 0; i < 
d©um
->
n
; i++) {

156 
	`sm≠_add
(&
row
->
exã∫Æ_ids
,

157 
d©um
->
keys
[
i
].
°rög
,

158 
d©um
->
vÆues
[
i
].
°rög
);

160 
	}
}

163 
	$ov§ec_bridge_∑r£_Áû_mode
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

165 
ov§ec_bridge
 *
row
 = 
	`ov§ec_bridge_ˇ°
(
row_
);

167 
	`as£π
(
öôed
);

168 i‡(
d©um
->
n
 >= 1) {

169 
row
->
Áû_mode
 = 
d©um
->
keys
[0].
°rög
;

171 
row
->
Áû_mode
 = 
NULL
;

173 
	}
}

176 
	$ov§ec_bridge_∑r£_Êood_vœns
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

178 
ov§ec_bridge
 *
row
 = 
	`ov§ec_bridge_ˇ°
(
row_
);

179 
size_t
 
n
 = 
	`MIN
(4096, 
d©um
->n);

180 
size_t
 
i
;

182 
	`as£π
(
öôed
);

183 
row
->
Êood_vœns
 = 
NULL
;

184 
row
->
n_Êood_vœns
 = 0;

185 
i
 = 0; i < 
n
; i++) {

186 i‡(!
row
->
n_Êood_vœns
) {

187 
row
->
Êood_vœns
 = 
	`xmÆloc
(
n
 *  *row->flood_vlans);

189 
row
->
Êood_vœns
[row->
n_Êood_vœns
] = 
d©um
->
keys
[
i
].
öãgî
;

190 
row
->
n_Êood_vœns
++;

192 
	}
}

195 
	$ov§ec_bridge_∑r£_Êow_èbÀs
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

197 
ov§ec_bridge
 *
row
 = 
	`ov§ec_bridge_ˇ°
(
row_
);

198 
size_t
 
i
;

200 
	`as£π
(
öôed
);

201 
row
->
key_Êow_èbÀs
 = 
NULL
;

202 
row
->
vÆue_Êow_èbÀs
 = 
NULL
;

203 
row
->
n_Êow_èbÀs
 = 0;

204 
i
 = 0; i < 
d©um
->
n
; i++) {

205 
ov§ec_Êow_èbÀ
 *
vÆueRow
 = 
	`ov§ec_Êow_èbÀ_ˇ°
(
	`ovsdb_idl_gë_row_¨c
(
row_
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_FLOW_TABLE
], &
d©um
->
vÆues
[
i
].
uuid
));

206 i‡(
vÆueRow
) {

207 i‡(!
row
->
n_Êow_èbÀs
) {

208 
row
->
key_Êow_èbÀs
 = 
	`xmÆloc
(
d©um
->
n
 *  *row->key_flow_tables);

209 
row
->
vÆue_Êow_èbÀs
 = 
	`xmÆloc
(
d©um
->
n
 *  *row->value_flow_tables);

211 
row
->
key_Êow_èbÀs
[row->
n_Êow_èbÀs
] = 
d©um
->
keys
[
i
].
öãgî
;

212 
row
->
vÆue_Êow_èbÀs
[row->
n_Êow_èbÀs
] = 
vÆueRow
;

213 
row
->
n_Êow_èbÀs
++;

216 
	}
}

219 
	$ov§ec_bridge_∑r£_múr‹s
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

221 
ov§ec_bridge
 *
row
 = 
	`ov§ec_bridge_ˇ°
(
row_
);

222 
size_t
 
i
;

224 
	`as£π
(
öôed
);

225 
row
->
múr‹s
 = 
NULL
;

226 
row
->
n_múr‹s
 = 0;

227 
i
 = 0; i < 
d©um
->
n
; i++) {

228 
ov§ec_múr‹
 *
keyRow
 = 
	`ov§ec_múr‹_ˇ°
(
	`ovsdb_idl_gë_row_¨c
(
row_
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_MIRROR
], &
d©um
->
keys
[
i
].
uuid
));

229 i‡(
keyRow
) {

230 i‡(!
row
->
n_múr‹s
) {

231 
row
->
múr‹s
 = 
	`xmÆloc
(
d©um
->
n
 *  *row->mirrors);

233 
row
->
múr‹s
[row->
n_múr‹s
] = 
keyRow
;

234 
row
->
n_múr‹s
++;

237 
	}
}

240 
	$ov§ec_bridge_∑r£_«me
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

242 
ov§ec_bridge
 *
row
 = 
	`ov§ec_bridge_ˇ°
(
row_
);

244 
	`as£π
(
öôed
);

245 i‡(
d©um
->
n
 >= 1) {

246 
row
->
«me
 = 
d©um
->
keys
[0].
°rög
;

248 
row
->
«me
 = "";

250 
	}
}

253 
	$ov§ec_bridge_∑r£_√tÊow
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

255 
ov§ec_bridge
 *
row
 = 
	`ov§ec_bridge_ˇ°
(
row_
);

257 
	`as£π
(
öôed
);

258 i‡(
d©um
->
n
 >= 1) {

259 
row
->
√tÊow
 = 
	`ov§ec_√tÊow_ˇ°
(
	`ovsdb_idl_gë_row_¨c
(
row_
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_NETFLOW
], &
d©um
->
keys
[0].
uuid
));

261 
row
->
√tÊow
 = 
NULL
;

263 
	}
}

266 
	$ov§ec_bridge_∑r£_Ÿhî_c⁄fig
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

268 
ov§ec_bridge
 *
row
 = 
	`ov§ec_bridge_ˇ°
(
row_
);

269 
size_t
 
i
;

271 
	`as£π
(
öôed
);

272 
	`sm≠_öô
(&
row
->
Ÿhî_c⁄fig
);

273 
i
 = 0; i < 
d©um
->
n
; i++) {

274 
	`sm≠_add
(&
row
->
Ÿhî_c⁄fig
,

275 
d©um
->
keys
[
i
].
°rög
,

276 
d©um
->
vÆues
[
i
].
°rög
);

278 
	}
}

281 
	$ov§ec_bridge_∑r£_p‹ts
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

283 
ov§ec_bridge
 *
row
 = 
	`ov§ec_bridge_ˇ°
(
row_
);

284 
size_t
 
i
;

286 
	`as£π
(
öôed
);

287 
row
->
p‹ts
 = 
NULL
;

288 
row
->
n_p‹ts
 = 0;

289 
i
 = 0; i < 
d©um
->
n
; i++) {

290 
ov§ec_p‹t
 *
keyRow
 = 
	`ov§ec_p‹t_ˇ°
(
	`ovsdb_idl_gë_row_¨c
(
row_
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_PORT
], &
d©um
->
keys
[
i
].
uuid
));

291 i‡(
keyRow
) {

292 i‡(!
row
->
n_p‹ts
) {

293 
row
->
p‹ts
 = 
	`xmÆloc
(
d©um
->
n
 *  *row->ports);

295 
row
->
p‹ts
[row->
n_p‹ts
] = 
keyRow
;

296 
row
->
n_p‹ts
++;

299 
	}
}

302 
	$ov§ec_bridge_∑r£_sÊow
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

304 
ov§ec_bridge
 *
row
 = 
	`ov§ec_bridge_ˇ°
(
row_
);

306 
	`as£π
(
öôed
);

307 i‡(
d©um
->
n
 >= 1) {

308 
row
->
sÊow
 = 
	`ov§ec_sÊow_ˇ°
(
	`ovsdb_idl_gë_row_¨c
(
row_
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_SFLOW
], &
d©um
->
keys
[0].
uuid
));

310 
row
->
sÊow
 = 
NULL
;

312 
	}
}

315 
	$ov§ec_bridge_∑r£_°©us
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

317 
ov§ec_bridge
 *
row
 = 
	`ov§ec_bridge_ˇ°
(
row_
);

318 
size_t
 
i
;

320 
	`as£π
(
öôed
);

321 
	`sm≠_öô
(&
row
->
°©us
);

322 
i
 = 0; i < 
d©um
->
n
; i++) {

323 
	`sm≠_add
(&
row
->
°©us
,

324 
d©um
->
keys
[
i
].
°rög
,

325 
d©um
->
vÆues
[
i
].
°rög
);

327 
	}
}

330 
	$ov§ec_bridge_∑r£_°p_íabÀ
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

332 
ov§ec_bridge
 *
row
 = 
	`ov§ec_bridge_ˇ°
(
row_
);

334 
	`as£π
(
öôed
);

335 i‡(
d©um
->
n
 >= 1) {

336 
row
->
°p_íabÀ
 = 
d©um
->
keys
[0].
boﬁón
;

338 
row
->
°p_íabÀ
 = 
Ál£
;

340 
	}
}

343 
	$ov§ec_bridge_u≈¨£_c⁄åﬁÀr
(
ovsdb_idl_row
 *
row_
)

345 
ov§ec_bridge
 *
row
 = 
	`ov§ec_bridge_ˇ°
(
row_
);

347 
	`as£π
(
öôed
);

348 
	`‰ì
(
row
->
c⁄åﬁÀr
);

349 
	}
}

352 
	$ov§ec_bridge_u≈¨£_d©≠©h_id
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

355 
	}
}

358 
	$ov§ec_bridge_u≈¨£_d©≠©h_ty≥
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

361 
	}
}

364 
	$ov§ec_bridge_u≈¨£_exã∫Æ_ids
(
ovsdb_idl_row
 *
row_
)

366 
ov§ec_bridge
 *
row
 = 
	`ov§ec_bridge_ˇ°
(
row_
);

368 
	`as£π
(
öôed
);

369 
	`sm≠_de°roy
(&
row
->
exã∫Æ_ids
);

370 
	}
}

373 
	$ov§ec_bridge_u≈¨£_Áû_mode
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

376 
	}
}

379 
	$ov§ec_bridge_u≈¨£_Êood_vœns
(
ovsdb_idl_row
 *
row_
)

381 
ov§ec_bridge
 *
row
 = 
	`ov§ec_bridge_ˇ°
(
row_
);

383 
	`as£π
(
öôed
);

384 
	`‰ì
(
row
->
Êood_vœns
);

385 
	}
}

388 
	$ov§ec_bridge_u≈¨£_Êow_èbÀs
(
ovsdb_idl_row
 *
row_
)

390 
ov§ec_bridge
 *
row
 = 
	`ov§ec_bridge_ˇ°
(
row_
);

392 
	`as£π
(
öôed
);

393 
	`‰ì
(
row
->
key_Êow_èbÀs
);

394 
	`‰ì
(
row
->
vÆue_Êow_èbÀs
);

395 
	}
}

398 
	$ov§ec_bridge_u≈¨£_múr‹s
(
ovsdb_idl_row
 *
row_
)

400 
ov§ec_bridge
 *
row
 = 
	`ov§ec_bridge_ˇ°
(
row_
);

402 
	`as£π
(
öôed
);

403 
	`‰ì
(
row
->
múr‹s
);

404 
	}
}

407 
	$ov§ec_bridge_u≈¨£_«me
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

410 
	}
}

413 
	$ov§ec_bridge_u≈¨£_√tÊow
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

416 
	}
}

419 
	$ov§ec_bridge_u≈¨£_Ÿhî_c⁄fig
(
ovsdb_idl_row
 *
row_
)

421 
ov§ec_bridge
 *
row
 = 
	`ov§ec_bridge_ˇ°
(
row_
);

423 
	`as£π
(
öôed
);

424 
	`sm≠_de°roy
(&
row
->
Ÿhî_c⁄fig
);

425 
	}
}

428 
	$ov§ec_bridge_u≈¨£_p‹ts
(
ovsdb_idl_row
 *
row_
)

430 
ov§ec_bridge
 *
row
 = 
	`ov§ec_bridge_ˇ°
(
row_
);

432 
	`as£π
(
öôed
);

433 
	`‰ì
(
row
->
p‹ts
);

434 
	}
}

437 
	$ov§ec_bridge_u≈¨£_sÊow
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

440 
	}
}

443 
	$ov§ec_bridge_u≈¨£_°©us
(
ovsdb_idl_row
 *
row_
)

445 
ov§ec_bridge
 *
row
 = 
	`ov§ec_bridge_ˇ°
(
row_
);

447 
	`as£π
(
öôed
);

448 
	`sm≠_de°roy
(&
row
->
°©us
);

449 
	}
}

452 
	$ov§ec_bridge_u≈¨£_°p_íabÀ
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

455 
	}
}

458 
	$ov§ec_bridge_öô__
(
ovsdb_idl_row
 *
row
)

460 
	`ov§ec_bridge_öô
(
	`ov§ec_bridge_ˇ°
(
row
));

461 
	}
}

464 
	$ov§ec_bridge_öô
(
ov§ec_bridge
 *
row
)

466 
	`mem£t
(
row
, 0,  *row);

467 
	`sm≠_öô
(&
row
->
exã∫Æ_ids
);

468 
	`sm≠_öô
(&
row
->
Ÿhî_c⁄fig
);

469 
	`sm≠_öô
(&
row
->
°©us
);

470 
	}
}

472 c⁄° 
ov§ec_bridge
 *

473 
	$ov§ec_bridge_fú°
(c⁄° 
ovsdb_idl
 *
idl
)

475  
	`ov§ec_bridge_ˇ°
(
	`ovsdb_idl_fú°_row
(
idl
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_BRIDGE
]));

476 
	}
}

478 c⁄° 
ov§ec_bridge
 *

479 
	$ov§ec_bridge_√xt
(c⁄° 
ov§ec_bridge
 *
row
)

481  
	`ov§ec_bridge_ˇ°
(
	`ovsdb_idl_√xt_row
(&
row
->
hódî_
));

482 
	}
}

485 
	$ov§ec_bridge_dñëe
(c⁄° 
ov§ec_bridge
 *
row
)

487 
	`ovsdb_idl_txn_dñëe
(&
row
->
hódî_
);

488 
	}
}

490 
ov§ec_bridge
 *

491 
	$ov§ec_bridge_ö£π
(
ovsdb_idl_txn
 *
txn
)

493  
	`ov§ec_bridge_ˇ°
(
	`ovsdb_idl_txn_ö£π
(
txn
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_BRIDGE
], 
NULL
));

494 
	}
}

498 
	$ov§ec_bridge_vîify_c⁄åﬁÀr
(c⁄° 
ov§ec_bridge
 *
row
)

500 
	`as£π
(
öôed
);

501 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_CONTROLLER
]);

502 
	}
}

505 
	$ov§ec_bridge_vîify_d©≠©h_id
(c⁄° 
ov§ec_bridge
 *
row
)

507 
	`as£π
(
öôed
);

508 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_DATAPATH_ID
]);

509 
	}
}

512 
	$ov§ec_bridge_vîify_d©≠©h_ty≥
(c⁄° 
ov§ec_bridge
 *
row
)

514 
	`as£π
(
öôed
);

515 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_DATAPATH_TYPE
]);

516 
	}
}

519 
	$ov§ec_bridge_vîify_exã∫Æ_ids
(c⁄° 
ov§ec_bridge
 *
row
)

521 
	`as£π
(
öôed
);

522 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_EXTERNAL_IDS
]);

523 
	}
}

526 
	$ov§ec_bridge_vîify_Áû_mode
(c⁄° 
ov§ec_bridge
 *
row
)

528 
	`as£π
(
öôed
);

529 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_FAIL_MODE
]);

530 
	}
}

533 
	$ov§ec_bridge_vîify_Êood_vœns
(c⁄° 
ov§ec_bridge
 *
row
)

535 
	`as£π
(
öôed
);

536 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_FLOOD_VLANS
]);

537 
	}
}

540 
	$ov§ec_bridge_vîify_Êow_èbÀs
(c⁄° 
ov§ec_bridge
 *
row
)

542 
	`as£π
(
öôed
);

543 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_FLOW_TABLES
]);

544 
	}
}

547 
	$ov§ec_bridge_vîify_múr‹s
(c⁄° 
ov§ec_bridge
 *
row
)

549 
	`as£π
(
öôed
);

550 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_MIRRORS
]);

551 
	}
}

554 
	$ov§ec_bridge_vîify_«me
(c⁄° 
ov§ec_bridge
 *
row
)

556 
	`as£π
(
öôed
);

557 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_NAME
]);

558 
	}
}

561 
	$ov§ec_bridge_vîify_√tÊow
(c⁄° 
ov§ec_bridge
 *
row
)

563 
	`as£π
(
öôed
);

564 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_NETFLOW
]);

565 
	}
}

568 
	$ov§ec_bridge_vîify_Ÿhî_c⁄fig
(c⁄° 
ov§ec_bridge
 *
row
)

570 
	`as£π
(
öôed
);

571 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_OTHER_CONFIG
]);

572 
	}
}

575 
	$ov§ec_bridge_vîify_p‹ts
(c⁄° 
ov§ec_bridge
 *
row
)

577 
	`as£π
(
öôed
);

578 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_PORTS
]);

579 
	}
}

582 
	$ov§ec_bridge_vîify_sÊow
(c⁄° 
ov§ec_bridge
 *
row
)

584 
	`as£π
(
öôed
);

585 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_SFLOW
]);

586 
	}
}

589 
	$ov§ec_bridge_vîify_°©us
(c⁄° 
ov§ec_bridge
 *
row
)

591 
	`as£π
(
öôed
);

592 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_STATUS
]);

593 
	}
}

596 
	$ov§ec_bridge_vîify_°p_íabÀ
(c⁄° 
ov§ec_bridge
 *
row
)

598 
	`as£π
(
öôed
);

599 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_STP_ENABLE
]);

600 
	}
}

617 c⁄° 
ovsdb_d©um
 *

618 
	$ov§ec_bridge_gë_c⁄åﬁÀr
(c⁄° 
ov§ec_bridge
 *
row
,

619 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

621 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_UUID
);

622  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁ_c⁄åﬁÀr
);

623 
	}
}

640 c⁄° 
ovsdb_d©um
 *

641 
	$ov§ec_bridge_gë_d©≠©h_id
(c⁄° 
ov§ec_bridge
 *
row
,

642 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

644 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

645  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁ_d©≠©h_id
);

646 
	}
}

663 c⁄° 
ovsdb_d©um
 *

664 
	$ov§ec_bridge_gë_d©≠©h_ty≥
(c⁄° 
ov§ec_bridge
 *
row
,

665 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

667 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

668  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁ_d©≠©h_ty≥
);

669 
	}
}

687 c⁄° 
ovsdb_d©um
 *

688 
	$ov§ec_bridge_gë_exã∫Æ_ids
(c⁄° 
ov§ec_bridge
 *
row
,

689 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
,

690 
ovsdb_©omic_ty≥
 
vÆue_ty≥
 
OVS_UNUSED
)

692 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

693 
	`as£π
(
vÆue_ty≥
 =
OVSDB_TYPE_STRING
);

694  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁ_exã∫Æ_ids
);

695 
	}
}

712 c⁄° 
ovsdb_d©um
 *

713 
	$ov§ec_bridge_gë_Áû_mode
(c⁄° 
ov§ec_bridge
 *
row
,

714 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

716 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

717  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁ_Áû_mode
);

718 
	}
}

735 c⁄° 
ovsdb_d©um
 *

736 
	$ov§ec_bridge_gë_Êood_vœns
(c⁄° 
ov§ec_bridge
 *
row
,

737 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

739 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_INTEGER
);

740  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁ_Êood_vœns
);

741 
	}
}

759 c⁄° 
ovsdb_d©um
 *

760 
	$ov§ec_bridge_gë_Êow_èbÀs
(c⁄° 
ov§ec_bridge
 *
row
,

761 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
,

762 
ovsdb_©omic_ty≥
 
vÆue_ty≥
 
OVS_UNUSED
)

764 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_INTEGER
);

765 
	`as£π
(
vÆue_ty≥
 =
OVSDB_TYPE_UUID
);

766  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁ_Êow_èbÀs
);

767 
	}
}

784 c⁄° 
ovsdb_d©um
 *

785 
	$ov§ec_bridge_gë_múr‹s
(c⁄° 
ov§ec_bridge
 *
row
,

786 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

788 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_UUID
);

789  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁ_múr‹s
);

790 
	}
}

807 c⁄° 
ovsdb_d©um
 *

808 
	$ov§ec_bridge_gë_«me
(c⁄° 
ov§ec_bridge
 *
row
,

809 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

811 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

812  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁ_«me
);

813 
	}
}

830 c⁄° 
ovsdb_d©um
 *

831 
	$ov§ec_bridge_gë_√tÊow
(c⁄° 
ov§ec_bridge
 *
row
,

832 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

834 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_UUID
);

835  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁ_√tÊow
);

836 
	}
}

854 c⁄° 
ovsdb_d©um
 *

855 
	$ov§ec_bridge_gë_Ÿhî_c⁄fig
(c⁄° 
ov§ec_bridge
 *
row
,

856 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
,

857 
ovsdb_©omic_ty≥
 
vÆue_ty≥
 
OVS_UNUSED
)

859 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

860 
	`as£π
(
vÆue_ty≥
 =
OVSDB_TYPE_STRING
);

861  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁ_Ÿhî_c⁄fig
);

862 
	}
}

879 c⁄° 
ovsdb_d©um
 *

880 
	$ov§ec_bridge_gë_p‹ts
(c⁄° 
ov§ec_bridge
 *
row
,

881 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

883 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_UUID
);

884  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁ_p‹ts
);

885 
	}
}

902 c⁄° 
ovsdb_d©um
 *

903 
	$ov§ec_bridge_gë_sÊow
(c⁄° 
ov§ec_bridge
 *
row
,

904 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

906 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_UUID
);

907  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁ_sÊow
);

908 
	}
}

926 c⁄° 
ovsdb_d©um
 *

927 
	$ov§ec_bridge_gë_°©us
(c⁄° 
ov§ec_bridge
 *
row
,

928 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
,

929 
ovsdb_©omic_ty≥
 
vÆue_ty≥
 
OVS_UNUSED
)

931 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

932 
	`as£π
(
vÆue_ty≥
 =
OVSDB_TYPE_STRING
);

933  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁ_°©us
);

934 
	}
}

951 c⁄° 
ovsdb_d©um
 *

952 
	$ov§ec_bridge_gë_°p_íabÀ
(c⁄° 
ov§ec_bridge
 *
row
,

953 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

955 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_BOOLEAN
);

956  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁ_°p_íabÀ
);

957 
	}
}

960 
	$ov§ec_bridge_£t_c⁄åﬁÀr
(c⁄° 
ov§ec_bridge
 *
row
, 
ov§ec_c⁄åﬁÀr
 **
c⁄åﬁÀr
, 
size_t
 
n_c⁄åﬁÀr
)

962 
ovsdb_d©um
 
d©um
;

963 
size_t
 
i
;

965 
	`as£π
(
öôed
);

966 
d©um
.
n
 = 
n_c⁄åﬁÀr
;

967 
d©um
.
keys
 = 
	`xmÆloc
(
n_c⁄åﬁÀr
 *  *datum.keys);

968 
d©um
.
vÆues
 = 
NULL
;

969 
i
 = 0; i < 
n_c⁄åﬁÀr
; i++) {

970 
d©um
.
keys
[
i
].
uuid
 = 
c⁄åﬁÀr
[i]->
hódî_
.uuid;

972 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_UUID
, 
OVSDB_TYPE_VOID
);

973 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_CONTROLLER
], &
d©um
);

974 
	}
}

977 
	$ov§ec_bridge_£t_d©≠©h_id
(c⁄° 
ov§ec_bridge
 *
row
, c⁄° *
d©≠©h_id
)

979 
ovsdb_d©um
 
d©um
;

981 
	`as£π
(
öôed
);

982 i‡(
d©≠©h_id
) {

983 
d©um
.
n
 = 1;

984 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

985 
d©um
.
keys
[0].
°rög
 = 
	`x°rdup
(
d©≠©h_id
);

987 
d©um
.
n
 = 0;

988 
d©um
.
keys
 = 
NULL
;

990 
d©um
.
vÆues
 = 
NULL
;

991 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_DATAPATH_ID
], &
d©um
);

992 
	}
}

995 
	$ov§ec_bridge_£t_d©≠©h_ty≥
(c⁄° 
ov§ec_bridge
 *
row
, c⁄° *
d©≠©h_ty≥
)

997 
ovsdb_d©um
 
d©um
;

999 
	`as£π
(
öôed
);

1000 
d©um
.
n
 = 1;

1001 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

1002 
d©um
.
keys
[0].
°rög
 = 
	`x°rdup
(
d©≠©h_ty≥
);

1003 
d©um
.
vÆues
 = 
NULL
;

1004 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_DATAPATH_TYPE
], &
d©um
);

1005 
	}
}

1008 
	$ov§ec_bridge_£t_exã∫Æ_ids
(c⁄° 
ov§ec_bridge
 *
row
, c⁄° 
sm≠
 *smap)

1010 
ovsdb_d©um
 
d©um
;

1012 
	`as£π
(
öôed
);

1013 i‡(
sm≠
) {

1014 
sm≠_node
 *
node
;

1015 
size_t
 
i
;

1017 
d©um
.
n
 = 
	`sm≠_cou¡
(
sm≠
);

1018 
d©um
.
keys
 = 
	`xmÆloc
(d©um.
n
 *  *datum.keys);

1019 
d©um
.
vÆues
 = 
	`xmÆloc
(d©um.
n
 *  *datum.values);

1021 
i
 = 0;

1022 
	`SMAP_FOR_EACH
 (
node
, 
sm≠
) {

1023 
d©um
.
keys
[
i
].
°rög
 = 
	`x°rdup
(
node
->
key
);

1024 
d©um
.
vÆues
[
i
].
°rög
 = 
	`x°rdup
(
node
->
vÆue
);

1025 
i
++;

1027 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_STRING
, OVSDB_TYPE_STRING);

1029 
	`ovsdb_d©um_öô_em±y
(&
d©um
);

1031 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
,

1032 &
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_EXTERNAL_IDS
],

1033 &
d©um
);

1034 
	}
}

1038 
	$ov§ec_bridge_£t_Áû_mode
(c⁄° 
ov§ec_bridge
 *
row
, c⁄° *
Áû_mode
)

1040 
ovsdb_d©um
 
d©um
;

1042 
	`as£π
(
öôed
);

1043 i‡(
Áû_mode
) {

1044 
d©um
.
n
 = 1;

1045 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

1046 
d©um
.
keys
[0].
°rög
 = 
	`x°rdup
(
Áû_mode
);

1048 
d©um
.
n
 = 0;

1049 
d©um
.
keys
 = 
NULL
;

1051 
d©um
.
vÆues
 = 
NULL
;

1052 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_FAIL_MODE
], &
d©um
);

1053 
	}
}

1056 
	$ov§ec_bridge_£t_Êood_vœns
(c⁄° 
ov§ec_bridge
 *
row
, c⁄° 
öt64_t
 *
Êood_vœns
, 
size_t
 
n_Êood_vœns
)

1058 
ovsdb_d©um
 
d©um
;

1059 
size_t
 
i
;

1061 
	`as£π
(
öôed
);

1062 
d©um
.
n
 = 
n_Êood_vœns
;

1063 
d©um
.
keys
 = 
	`xmÆloc
(
n_Êood_vœns
 *  *datum.keys);

1064 
d©um
.
vÆues
 = 
NULL
;

1065 
i
 = 0; i < 
n_Êood_vœns
; i++) {

1066 
d©um
.
keys
[
i
].
öãgî
 = 
Êood_vœns
[i];

1068 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_INTEGER
, 
OVSDB_TYPE_VOID
);

1069 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_FLOOD_VLANS
], &
d©um
);

1070 
	}
}

1073 
	$ov§ec_bridge_£t_Êow_èbÀs
(c⁄° 
ov§ec_bridge
 *
row
, c⁄° 
öt64_t
 *
key_Êow_èbÀs
, 
ov§ec_Êow_èbÀ
 **
vÆue_Êow_èbÀs
, 
size_t
 
n_Êow_èbÀs
)

1075 
ovsdb_d©um
 
d©um
;

1076 
size_t
 
i
;

1078 
	`as£π
(
öôed
);

1079 
d©um
.
n
 = 
n_Êow_èbÀs
;

1080 
d©um
.
keys
 = 
	`xmÆloc
(
n_Êow_èbÀs
 *  *datum.keys);

1081 
d©um
.
vÆues
 = 
	`xmÆloc
(
n_Êow_èbÀs
 *  *datum.values);

1082 
i
 = 0; i < 
n_Êow_èbÀs
; i++) {

1083 
d©um
.
keys
[
i
].
öãgî
 = 
key_Êow_èbÀs
[i];

1084 
d©um
.
vÆues
[
i
].
uuid
 = 
vÆue_Êow_èbÀs
[i]->
hódî_
.uuid;

1086 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_INTEGER
, 
OVSDB_TYPE_UUID
);

1087 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_FLOW_TABLES
], &
d©um
);

1088 
	}
}

1091 
	$ov§ec_bridge_£t_múr‹s
(c⁄° 
ov§ec_bridge
 *
row
, 
ov§ec_múr‹
 **
múr‹s
, 
size_t
 
n_múr‹s
)

1093 
ovsdb_d©um
 
d©um
;

1094 
size_t
 
i
;

1096 
	`as£π
(
öôed
);

1097 
d©um
.
n
 = 
n_múr‹s
;

1098 
d©um
.
keys
 = 
	`xmÆloc
(
n_múr‹s
 *  *datum.keys);

1099 
d©um
.
vÆues
 = 
NULL
;

1100 
i
 = 0; i < 
n_múr‹s
; i++) {

1101 
d©um
.
keys
[
i
].
uuid
 = 
múr‹s
[i]->
hódî_
.uuid;

1103 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_UUID
, 
OVSDB_TYPE_VOID
);

1104 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_MIRRORS
], &
d©um
);

1105 
	}
}

1108 
	$ov§ec_bridge_£t_«me
(c⁄° 
ov§ec_bridge
 *
row
, c⁄° *
«me
)

1110 
ovsdb_d©um
 
d©um
;

1112 
	`as£π
(
öôed
);

1113 
d©um
.
n
 = 1;

1114 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

1115 
d©um
.
keys
[0].
°rög
 = 
	`x°rdup
(
«me
);

1116 
d©um
.
vÆues
 = 
NULL
;

1117 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_NAME
], &
d©um
);

1118 
	}
}

1121 
	$ov§ec_bridge_£t_√tÊow
(c⁄° 
ov§ec_bridge
 *
row
, c⁄° 
ov§ec_√tÊow
 *
√tÊow
)

1123 
ovsdb_d©um
 
d©um
;

1125 
	`as£π
(
öôed
);

1126 i‡(
√tÊow
) {

1127 
d©um
.
n
 = 1;

1128 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

1129 
d©um
.
keys
[0].
uuid
 = 
√tÊow
->
hódî_
.uuid;

1131 
d©um
.
n
 = 0;

1132 
d©um
.
keys
 = 
NULL
;

1134 
d©um
.
vÆues
 = 
NULL
;

1135 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_NETFLOW
], &
d©um
);

1136 
	}
}

1139 
	$ov§ec_bridge_£t_Ÿhî_c⁄fig
(c⁄° 
ov§ec_bridge
 *
row
, c⁄° 
sm≠
 *smap)

1141 
ovsdb_d©um
 
d©um
;

1143 
	`as£π
(
öôed
);

1144 i‡(
sm≠
) {

1145 
sm≠_node
 *
node
;

1146 
size_t
 
i
;

1148 
d©um
.
n
 = 
	`sm≠_cou¡
(
sm≠
);

1149 
d©um
.
keys
 = 
	`xmÆloc
(d©um.
n
 *  *datum.keys);

1150 
d©um
.
vÆues
 = 
	`xmÆloc
(d©um.
n
 *  *datum.values);

1152 
i
 = 0;

1153 
	`SMAP_FOR_EACH
 (
node
, 
sm≠
) {

1154 
d©um
.
keys
[
i
].
°rög
 = 
	`x°rdup
(
node
->
key
);

1155 
d©um
.
vÆues
[
i
].
°rög
 = 
	`x°rdup
(
node
->
vÆue
);

1156 
i
++;

1158 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_STRING
, OVSDB_TYPE_STRING);

1160 
	`ovsdb_d©um_öô_em±y
(&
d©um
);

1162 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
,

1163 &
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_OTHER_CONFIG
],

1164 &
d©um
);

1165 
	}
}

1169 
	$ov§ec_bridge_£t_p‹ts
(c⁄° 
ov§ec_bridge
 *
row
, 
ov§ec_p‹t
 **
p‹ts
, 
size_t
 
n_p‹ts
)

1171 
ovsdb_d©um
 
d©um
;

1172 
size_t
 
i
;

1174 
	`as£π
(
öôed
);

1175 
d©um
.
n
 = 
n_p‹ts
;

1176 
d©um
.
keys
 = 
	`xmÆloc
(
n_p‹ts
 *  *datum.keys);

1177 
d©um
.
vÆues
 = 
NULL
;

1178 
i
 = 0; i < 
n_p‹ts
; i++) {

1179 
d©um
.
keys
[
i
].
uuid
 = 
p‹ts
[i]->
hódî_
.uuid;

1181 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_UUID
, 
OVSDB_TYPE_VOID
);

1182 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_PORTS
], &
d©um
);

1183 
	}
}

1186 
	$ov§ec_bridge_£t_sÊow
(c⁄° 
ov§ec_bridge
 *
row
, c⁄° 
ov§ec_sÊow
 *
sÊow
)

1188 
ovsdb_d©um
 
d©um
;

1190 
	`as£π
(
öôed
);

1191 i‡(
sÊow
) {

1192 
d©um
.
n
 = 1;

1193 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

1194 
d©um
.
keys
[0].
uuid
 = 
sÊow
->
hódî_
.uuid;

1196 
d©um
.
n
 = 0;

1197 
d©um
.
keys
 = 
NULL
;

1199 
d©um
.
vÆues
 = 
NULL
;

1200 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_SFLOW
], &
d©um
);

1201 
	}
}

1204 
	$ov§ec_bridge_£t_°©us
(c⁄° 
ov§ec_bridge
 *
row
, c⁄° 
sm≠
 *smap)

1206 
ovsdb_d©um
 
d©um
;

1208 
	`as£π
(
öôed
);

1209 i‡(
sm≠
) {

1210 
sm≠_node
 *
node
;

1211 
size_t
 
i
;

1213 
d©um
.
n
 = 
	`sm≠_cou¡
(
sm≠
);

1214 
d©um
.
keys
 = 
	`xmÆloc
(d©um.
n
 *  *datum.keys);

1215 
d©um
.
vÆues
 = 
	`xmÆloc
(d©um.
n
 *  *datum.values);

1217 
i
 = 0;

1218 
	`SMAP_FOR_EACH
 (
node
, 
sm≠
) {

1219 
d©um
.
keys
[
i
].
°rög
 = 
	`x°rdup
(
node
->
key
);

1220 
d©um
.
vÆues
[
i
].
°rög
 = 
	`x°rdup
(
node
->
vÆue
);

1221 
i
++;

1223 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_STRING
, OVSDB_TYPE_STRING);

1225 
	`ovsdb_d©um_öô_em±y
(&
d©um
);

1227 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
,

1228 &
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_STATUS
],

1229 &
d©um
);

1230 
	}
}

1234 
	$ov§ec_bridge_£t_°p_íabÀ
(c⁄° 
ov§ec_bridge
 *
row
, 
boﬁ
 
°p_íabÀ
)

1236 
ovsdb_d©um
 
d©um
;

1238 
	`as£π
(
öôed
);

1239 
d©um
.
n
 = 1;

1240 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

1241 
d©um
.
keys
[0].
boﬁón
 = 
°p_íabÀ
;

1242 
d©um
.
vÆues
 = 
NULL
;

1243 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_STP_ENABLE
], &
d©um
);

1244 
	}
}

1246 
ovsdb_idl_cﬁumn
 
	gov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_N_COLUMNS
];

1249 
	$ov§ec_bridge_cﬁumns_öô
()

1251 
ovsdb_idl_cﬁumn
 *
c
;

1254 
c
 = &
ov§ec_bridge_cﬁ_c⁄åﬁÀr
;

1255 
c
->
«me
 = "controller";

1256 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_UUID
);

1257 
c
->
ty≥
.
key
.
u
.
uuid
.
ªfTabÀName
 = "Controller";

1258 
c
->
ty≥
.
key
.
u
.
uuid
.
ªfTy≥
 = 
OVSDB_REF_STRONG
;

1259 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

1260 
c
->
ty≥
.
n_mö
 = 0;

1261 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

1262 
c
->
muèbÀ
 = 
åue
;

1263 
c
->
∑r£
 = 
ov§ec_bridge_∑r£_c⁄åﬁÀr
;

1264 
c
->
u≈¨£
 = 
ov§ec_bridge_u≈¨£_c⁄åﬁÀr
;

1267 
c
 = &
ov§ec_bridge_cﬁ_d©≠©h_id
;

1268 
c
->
«me
 = "datapath_id";

1269 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

1270 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

1271 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

1272 
c
->
ty≥
.
n_mö
 = 0;

1273 
c
->
ty≥
.
n_max
 = 1;

1274 
c
->
muèbÀ
 = 
åue
;

1275 
c
->
∑r£
 = 
ov§ec_bridge_∑r£_d©≠©h_id
;

1276 
c
->
u≈¨£
 = 
ov§ec_bridge_u≈¨£_d©≠©h_id
;

1279 
c
 = &
ov§ec_bridge_cﬁ_d©≠©h_ty≥
;

1280 
c
->
«me
 = "datapath_type";

1281 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

1282 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

1283 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

1284 
c
->
ty≥
.
n_mö
 = 1;

1285 
c
->
ty≥
.
n_max
 = 1;

1286 
c
->
muèbÀ
 = 
åue
;

1287 
c
->
∑r£
 = 
ov§ec_bridge_∑r£_d©≠©h_ty≥
;

1288 
c
->
u≈¨£
 = 
ov§ec_bridge_u≈¨£_d©≠©h_ty≥
;

1291 
c
 = &
ov§ec_bridge_cﬁ_exã∫Æ_ids
;

1292 
c
->
«me
 = "external_ids";

1293 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

1294 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

1295 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_STRING
);

1296 
c
->
ty≥
.
vÆue
.
u
.
°rög
.
möLí
 = 0;

1297 
c
->
ty≥
.
n_mö
 = 0;

1298 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

1299 
c
->
muèbÀ
 = 
åue
;

1300 
c
->
∑r£
 = 
ov§ec_bridge_∑r£_exã∫Æ_ids
;

1301 
c
->
u≈¨£
 = 
ov§ec_bridge_u≈¨£_exã∫Æ_ids
;

1304 
c
 = &
ov§ec_bridge_cﬁ_Áû_mode
;

1305 
c
->
«me
 = "fail_mode";

1306 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

1307 
c
->
ty≥
.
key
.
íum_
 = 
	`xmÆloc
( *c->type.key.enum_);

1308 
c
->
ty≥
.
key
.
íum_
->
n
 = 2;

1309 
c
->
ty≥
.
key
.
íum_
->
keys
 = 
	`xmÆloc
(2 *  *c->type.key.enum_->keys);

1310 
c
->
ty≥
.
key
.
íum_
->
keys
[0].
°rög
 = 
	`x°rdup
("secure");

1311 
c
->
ty≥
.
key
.
íum_
->
keys
[1].
°rög
 = 
	`x°rdup
("standalone");

1312 
c
->
ty≥
.
key
.
íum_
->
vÆues
 = 
NULL
;

1313 
	`ovsdb_d©um_s‹t_as£π
(
c
->
ty≥
.
key
.
íum_
, 
OVSDB_TYPE_STRING
);

1314 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

1315 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

1316 
c
->
ty≥
.
n_mö
 = 0;

1317 
c
->
ty≥
.
n_max
 = 1;

1318 
c
->
muèbÀ
 = 
åue
;

1319 
c
->
∑r£
 = 
ov§ec_bridge_∑r£_Áû_mode
;

1320 
c
->
u≈¨£
 = 
ov§ec_bridge_u≈¨£_Áû_mode
;

1323 
c
 = &
ov§ec_bridge_cﬁ_Êood_vœns
;

1324 
c
->
«me
 = "flood_vlans";

1325 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_INTEGER
);

1326 
c
->
ty≥
.
key
.
u
.
öãgî
.
mö
 = 
	`INT64_C
(0);

1327 
c
->
ty≥
.
key
.
u
.
öãgî
.
max
 = 
	`INT64_C
(4095);

1328 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

1329 
c
->
ty≥
.
n_mö
 = 0;

1330 
c
->
ty≥
.
n_max
 = 4096;

1331 
c
->
muèbÀ
 = 
åue
;

1332 
c
->
∑r£
 = 
ov§ec_bridge_∑r£_Êood_vœns
;

1333 
c
->
u≈¨£
 = 
ov§ec_bridge_u≈¨£_Êood_vœns
;

1336 
c
 = &
ov§ec_bridge_cﬁ_Êow_èbÀs
;

1337 
c
->
«me
 = "flow_tables";

1338 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_INTEGER
);

1339 
c
->
ty≥
.
key
.
u
.
öãgî
.
mö
 = 
	`INT64_C
(0);

1340 
c
->
ty≥
.
key
.
u
.
öãgî
.
max
 = 
	`INT64_C
(254);

1341 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_UUID
);

1342 
c
->
ty≥
.
vÆue
.
u
.
uuid
.
ªfTabÀName
 = "Flow_Table";

1343 
c
->
ty≥
.
vÆue
.
u
.
uuid
.
ªfTy≥
 = 
OVSDB_REF_STRONG
;

1344 
c
->
ty≥
.
n_mö
 = 0;

1345 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

1346 
c
->
muèbÀ
 = 
åue
;

1347 
c
->
∑r£
 = 
ov§ec_bridge_∑r£_Êow_èbÀs
;

1348 
c
->
u≈¨£
 = 
ov§ec_bridge_u≈¨£_Êow_èbÀs
;

1351 
c
 = &
ov§ec_bridge_cﬁ_múr‹s
;

1352 
c
->
«me
 = "mirrors";

1353 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_UUID
);

1354 
c
->
ty≥
.
key
.
u
.
uuid
.
ªfTabÀName
 = "Mirror";

1355 
c
->
ty≥
.
key
.
u
.
uuid
.
ªfTy≥
 = 
OVSDB_REF_STRONG
;

1356 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

1357 
c
->
ty≥
.
n_mö
 = 0;

1358 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

1359 
c
->
muèbÀ
 = 
åue
;

1360 
c
->
∑r£
 = 
ov§ec_bridge_∑r£_múr‹s
;

1361 
c
->
u≈¨£
 = 
ov§ec_bridge_u≈¨£_múr‹s
;

1364 
c
 = &
ov§ec_bridge_cﬁ_«me
;

1365 
c
->
«me
 = "name";

1366 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

1367 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

1368 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

1369 
c
->
ty≥
.
n_mö
 = 1;

1370 
c
->
ty≥
.
n_max
 = 1;

1371 
c
->
muèbÀ
 = 
Ál£
;

1372 
c
->
∑r£
 = 
ov§ec_bridge_∑r£_«me
;

1373 
c
->
u≈¨£
 = 
ov§ec_bridge_u≈¨£_«me
;

1376 
c
 = &
ov§ec_bridge_cﬁ_√tÊow
;

1377 
c
->
«me
 = "netflow";

1378 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_UUID
);

1379 
c
->
ty≥
.
key
.
u
.
uuid
.
ªfTabÀName
 = "NetFlow";

1380 
c
->
ty≥
.
key
.
u
.
uuid
.
ªfTy≥
 = 
OVSDB_REF_STRONG
;

1381 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

1382 
c
->
ty≥
.
n_mö
 = 0;

1383 
c
->
ty≥
.
n_max
 = 1;

1384 
c
->
muèbÀ
 = 
åue
;

1385 
c
->
∑r£
 = 
ov§ec_bridge_∑r£_√tÊow
;

1386 
c
->
u≈¨£
 = 
ov§ec_bridge_u≈¨£_√tÊow
;

1389 
c
 = &
ov§ec_bridge_cﬁ_Ÿhî_c⁄fig
;

1390 
c
->
«me
 = "other_config";

1391 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

1392 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

1393 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_STRING
);

1394 
c
->
ty≥
.
vÆue
.
u
.
°rög
.
möLí
 = 0;

1395 
c
->
ty≥
.
n_mö
 = 0;

1396 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

1397 
c
->
muèbÀ
 = 
åue
;

1398 
c
->
∑r£
 = 
ov§ec_bridge_∑r£_Ÿhî_c⁄fig
;

1399 
c
->
u≈¨£
 = 
ov§ec_bridge_u≈¨£_Ÿhî_c⁄fig
;

1402 
c
 = &
ov§ec_bridge_cﬁ_p‹ts
;

1403 
c
->
«me
 = "ports";

1404 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_UUID
);

1405 
c
->
ty≥
.
key
.
u
.
uuid
.
ªfTabÀName
 = "Port";

1406 
c
->
ty≥
.
key
.
u
.
uuid
.
ªfTy≥
 = 
OVSDB_REF_STRONG
;

1407 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

1408 
c
->
ty≥
.
n_mö
 = 0;

1409 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

1410 
c
->
muèbÀ
 = 
åue
;

1411 
c
->
∑r£
 = 
ov§ec_bridge_∑r£_p‹ts
;

1412 
c
->
u≈¨£
 = 
ov§ec_bridge_u≈¨£_p‹ts
;

1415 
c
 = &
ov§ec_bridge_cﬁ_sÊow
;

1416 
c
->
«me
 = "sflow";

1417 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_UUID
);

1418 
c
->
ty≥
.
key
.
u
.
uuid
.
ªfTabÀName
 = "sFlow";

1419 
c
->
ty≥
.
key
.
u
.
uuid
.
ªfTy≥
 = 
OVSDB_REF_STRONG
;

1420 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

1421 
c
->
ty≥
.
n_mö
 = 0;

1422 
c
->
ty≥
.
n_max
 = 1;

1423 
c
->
muèbÀ
 = 
åue
;

1424 
c
->
∑r£
 = 
ov§ec_bridge_∑r£_sÊow
;

1425 
c
->
u≈¨£
 = 
ov§ec_bridge_u≈¨£_sÊow
;

1428 
c
 = &
ov§ec_bridge_cﬁ_°©us
;

1429 
c
->
«me
 = "status";

1430 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

1431 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

1432 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_STRING
);

1433 
c
->
ty≥
.
vÆue
.
u
.
°rög
.
möLí
 = 0;

1434 
c
->
ty≥
.
n_mö
 = 0;

1435 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

1436 
c
->
muèbÀ
 = 
åue
;

1437 
c
->
∑r£
 = 
ov§ec_bridge_∑r£_°©us
;

1438 
c
->
u≈¨£
 = 
ov§ec_bridge_u≈¨£_°©us
;

1441 
c
 = &
ov§ec_bridge_cﬁ_°p_íabÀ
;

1442 
c
->
«me
 = "stp_enable";

1443 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_BOOLEAN
);

1444 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

1445 
c
->
ty≥
.
n_mö
 = 1;

1446 
c
->
ty≥
.
n_max
 = 1;

1447 
c
->
muèbÀ
 = 
åue
;

1448 
c
->
∑r£
 = 
ov§ec_bridge_∑r£_°p_íabÀ
;

1449 
c
->
u≈¨£
 = 
ov§ec_bridge_u≈¨£_°p_íabÀ
;

1450 
	}
}

1455 
	$ov§ec_c⁄åﬁÀr_∑r£_c⁄√˘i⁄_mode
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

1457 
ov§ec_c⁄åﬁÀr
 *
row
 = 
	`ov§ec_c⁄åﬁÀr_ˇ°
(
row_
);

1459 
	`as£π
(
öôed
);

1460 i‡(
d©um
->
n
 >= 1) {

1461 
row
->
c⁄√˘i⁄_mode
 = 
d©um
->
keys
[0].
°rög
;

1463 
row
->
c⁄√˘i⁄_mode
 = 
NULL
;

1465 
	}
}

1468 
	$ov§ec_c⁄åﬁÀr_∑r£_c⁄åﬁÀr_bur°_limô
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

1470 
ov§ec_c⁄åﬁÀr
 *
row
 = 
	`ov§ec_c⁄åﬁÀr_ˇ°
(
row_
);

1471 
size_t
 
n
 = 
	`MIN
(1, 
d©um
->n);

1472 
size_t
 
i
;

1474 
	`as£π
(
öôed
);

1475 
row
->
c⁄åﬁÀr_bur°_limô
 = 
NULL
;

1476 
row
->
n_c⁄åﬁÀr_bur°_limô
 = 0;

1477 
i
 = 0; i < 
n
; i++) {

1478 i‡(!
row
->
n_c⁄åﬁÀr_bur°_limô
) {

1479 
row
->
c⁄åﬁÀr_bur°_limô
 = 
	`xmÆloc
(
n
 *  *row->controller_burst_limit);

1481 
row
->
c⁄åﬁÀr_bur°_limô
[row->
n_c⁄åﬁÀr_bur°_limô
] = 
d©um
->
keys
[
i
].
öãgî
;

1482 
row
->
n_c⁄åﬁÀr_bur°_limô
++;

1484 
	}
}

1487 
	$ov§ec_c⁄åﬁÀr_∑r£_c⁄åﬁÀr_øã_limô
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

1489 
ov§ec_c⁄åﬁÀr
 *
row
 = 
	`ov§ec_c⁄åﬁÀr_ˇ°
(
row_
);

1490 
size_t
 
n
 = 
	`MIN
(1, 
d©um
->n);

1491 
size_t
 
i
;

1493 
	`as£π
(
öôed
);

1494 
row
->
c⁄åﬁÀr_øã_limô
 = 
NULL
;

1495 
row
->
n_c⁄åﬁÀr_øã_limô
 = 0;

1496 
i
 = 0; i < 
n
; i++) {

1497 i‡(!
row
->
n_c⁄åﬁÀr_øã_limô
) {

1498 
row
->
c⁄åﬁÀr_øã_limô
 = 
	`xmÆloc
(
n
 *  *row->controller_rate_limit);

1500 
row
->
c⁄åﬁÀr_øã_limô
[row->
n_c⁄åﬁÀr_øã_limô
] = 
d©um
->
keys
[
i
].
öãgî
;

1501 
row
->
n_c⁄åﬁÀr_øã_limô
++;

1503 
	}
}

1506 
	$ov§ec_c⁄åﬁÀr_∑r£_íabÀ_async_mesßges
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

1508 
ov§ec_c⁄åﬁÀr
 *
row
 = 
	`ov§ec_c⁄åﬁÀr_ˇ°
(
row_
);

1509 
size_t
 
n
 = 
	`MIN
(1, 
d©um
->n);

1510 
size_t
 
i
;

1512 
	`as£π
(
öôed
);

1513 
row
->
íabÀ_async_mesßges
 = 
NULL
;

1514 
row
->
n_íabÀ_async_mesßges
 = 0;

1515 
i
 = 0; i < 
n
; i++) {

1516 i‡(!
row
->
n_íabÀ_async_mesßges
) {

1517 
row
->
íabÀ_async_mesßges
 = 
	`xmÆloc
(
n
 * 
sizeof_boﬁ
);

1519 
row
->
íabÀ_async_mesßges
[row->
n_íabÀ_async_mesßges
] = 
d©um
->
keys
[
i
].
boﬁón
;

1520 
row
->
n_íabÀ_async_mesßges
++;

1522 
	}
}

1525 
	$ov§ec_c⁄åﬁÀr_∑r£_exã∫Æ_ids
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

1527 
ov§ec_c⁄åﬁÀr
 *
row
 = 
	`ov§ec_c⁄åﬁÀr_ˇ°
(
row_
);

1528 
size_t
 
i
;

1530 
	`as£π
(
öôed
);

1531 
	`sm≠_öô
(&
row
->
exã∫Æ_ids
);

1532 
i
 = 0; i < 
d©um
->
n
; i++) {

1533 
	`sm≠_add
(&
row
->
exã∫Æ_ids
,

1534 
d©um
->
keys
[
i
].
°rög
,

1535 
d©um
->
vÆues
[
i
].
°rög
);

1537 
	}
}

1540 
	$ov§ec_c⁄åﬁÀr_∑r£_öa˘ivôy_¥obe
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

1542 
ov§ec_c⁄åﬁÀr
 *
row
 = 
	`ov§ec_c⁄åﬁÀr_ˇ°
(
row_
);

1543 
size_t
 
n
 = 
	`MIN
(1, 
d©um
->n);

1544 
size_t
 
i
;

1546 
	`as£π
(
öôed
);

1547 
row
->
öa˘ivôy_¥obe
 = 
NULL
;

1548 
row
->
n_öa˘ivôy_¥obe
 = 0;

1549 
i
 = 0; i < 
n
; i++) {

1550 i‡(!
row
->
n_öa˘ivôy_¥obe
) {

1551 
row
->
öa˘ivôy_¥obe
 = 
	`xmÆloc
(
n
 *  *row->inactivity_probe);

1553 
row
->
öa˘ivôy_¥obe
[row->
n_öa˘ivôy_¥obe
] = 
d©um
->
keys
[
i
].
öãgî
;

1554 
row
->
n_öa˘ivôy_¥obe
++;

1556 
	}
}

1559 
	$ov§ec_c⁄åﬁÀr_∑r£_is_c⁄√˘ed
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

1561 
ov§ec_c⁄åﬁÀr
 *
row
 = 
	`ov§ec_c⁄åﬁÀr_ˇ°
(
row_
);

1563 
	`as£π
(
öôed
);

1564 i‡(
d©um
->
n
 >= 1) {

1565 
row
->
is_c⁄√˘ed
 = 
d©um
->
keys
[0].
boﬁón
;

1567 
row
->
is_c⁄√˘ed
 = 
Ál£
;

1569 
	}
}

1572 
	$ov§ec_c⁄åﬁÀr_∑r£_loˇl_g©eway
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

1574 
ov§ec_c⁄åﬁÀr
 *
row
 = 
	`ov§ec_c⁄åﬁÀr_ˇ°
(
row_
);

1576 
	`as£π
(
öôed
);

1577 i‡(
d©um
->
n
 >= 1) {

1578 
row
->
loˇl_g©eway
 = 
d©um
->
keys
[0].
°rög
;

1580 
row
->
loˇl_g©eway
 = 
NULL
;

1582 
	}
}

1585 
	$ov§ec_c⁄åﬁÀr_∑r£_loˇl_ù
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

1587 
ov§ec_c⁄åﬁÀr
 *
row
 = 
	`ov§ec_c⁄åﬁÀr_ˇ°
(
row_
);

1589 
	`as£π
(
öôed
);

1590 i‡(
d©um
->
n
 >= 1) {

1591 
row
->
loˇl_ù
 = 
d©um
->
keys
[0].
°rög
;

1593 
row
->
loˇl_ù
 = 
NULL
;

1595 
	}
}

1598 
	$ov§ec_c⁄åﬁÀr_∑r£_loˇl_√tmask
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

1600 
ov§ec_c⁄åﬁÀr
 *
row
 = 
	`ov§ec_c⁄åﬁÀr_ˇ°
(
row_
);

1602 
	`as£π
(
öôed
);

1603 i‡(
d©um
->
n
 >= 1) {

1604 
row
->
loˇl_√tmask
 = 
d©um
->
keys
[0].
°rög
;

1606 
row
->
loˇl_√tmask
 = 
NULL
;

1608 
	}
}

1611 
	$ov§ec_c⁄åﬁÀr_∑r£_max_backoff
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

1613 
ov§ec_c⁄åﬁÀr
 *
row
 = 
	`ov§ec_c⁄åﬁÀr_ˇ°
(
row_
);

1614 
size_t
 
n
 = 
	`MIN
(1, 
d©um
->n);

1615 
size_t
 
i
;

1617 
	`as£π
(
öôed
);

1618 
row
->
max_backoff
 = 
NULL
;

1619 
row
->
n_max_backoff
 = 0;

1620 
i
 = 0; i < 
n
; i++) {

1621 i‡(!
row
->
n_max_backoff
) {

1622 
row
->
max_backoff
 = 
	`xmÆloc
(
n
 *  *row->max_backoff);

1624 
row
->
max_backoff
[row->
n_max_backoff
] = 
d©um
->
keys
[
i
].
öãgî
;

1625 
row
->
n_max_backoff
++;

1627 
	}
}

1630 
	$ov§ec_c⁄åﬁÀr_∑r£_Ÿhî_c⁄fig
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

1632 
ov§ec_c⁄åﬁÀr
 *
row
 = 
	`ov§ec_c⁄åﬁÀr_ˇ°
(
row_
);

1633 
size_t
 
i
;

1635 
	`as£π
(
öôed
);

1636 
	`sm≠_öô
(&
row
->
Ÿhî_c⁄fig
);

1637 
i
 = 0; i < 
d©um
->
n
; i++) {

1638 
	`sm≠_add
(&
row
->
Ÿhî_c⁄fig
,

1639 
d©um
->
keys
[
i
].
°rög
,

1640 
d©um
->
vÆues
[
i
].
°rög
);

1642 
	}
}

1645 
	$ov§ec_c⁄åﬁÀr_∑r£_rﬁe
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

1647 
ov§ec_c⁄åﬁÀr
 *
row
 = 
	`ov§ec_c⁄åﬁÀr_ˇ°
(
row_
);

1649 
	`as£π
(
öôed
);

1650 i‡(
d©um
->
n
 >= 1) {

1651 
row
->
rﬁe
 = 
d©um
->
keys
[0].
°rög
;

1653 
row
->
rﬁe
 = 
NULL
;

1655 
	}
}

1658 
	$ov§ec_c⁄åﬁÀr_∑r£_°©us
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

1660 
ov§ec_c⁄åﬁÀr
 *
row
 = 
	`ov§ec_c⁄åﬁÀr_ˇ°
(
row_
);

1661 
size_t
 
i
;

1663 
	`as£π
(
öôed
);

1664 
	`sm≠_öô
(&
row
->
°©us
);

1665 
i
 = 0; i < 
d©um
->
n
; i++) {

1666 
	`sm≠_add
(&
row
->
°©us
,

1667 
d©um
->
keys
[
i
].
°rög
,

1668 
d©um
->
vÆues
[
i
].
°rög
);

1670 
	}
}

1673 
	$ov§ec_c⁄åﬁÀr_∑r£_èrgë
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

1675 
ov§ec_c⁄åﬁÀr
 *
row
 = 
	`ov§ec_c⁄åﬁÀr_ˇ°
(
row_
);

1677 
	`as£π
(
öôed
);

1678 i‡(
d©um
->
n
 >= 1) {

1679 
row
->
èrgë
 = 
d©um
->
keys
[0].
°rög
;

1681 
row
->
èrgë
 = "";

1683 
	}
}

1686 
	$ov§ec_c⁄åﬁÀr_u≈¨£_c⁄√˘i⁄_mode
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

1689 
	}
}

1692 
	$ov§ec_c⁄åﬁÀr_u≈¨£_c⁄åﬁÀr_bur°_limô
(
ovsdb_idl_row
 *
row_
)

1694 
ov§ec_c⁄åﬁÀr
 *
row
 = 
	`ov§ec_c⁄åﬁÀr_ˇ°
(
row_
);

1696 
	`as£π
(
öôed
);

1697 
	`‰ì
(
row
->
c⁄åﬁÀr_bur°_limô
);

1698 
	}
}

1701 
	$ov§ec_c⁄åﬁÀr_u≈¨£_c⁄åﬁÀr_øã_limô
(
ovsdb_idl_row
 *
row_
)

1703 
ov§ec_c⁄åﬁÀr
 *
row
 = 
	`ov§ec_c⁄åﬁÀr_ˇ°
(
row_
);

1705 
	`as£π
(
öôed
);

1706 
	`‰ì
(
row
->
c⁄åﬁÀr_øã_limô
);

1707 
	}
}

1710 
	$ov§ec_c⁄åﬁÀr_u≈¨£_íabÀ_async_mesßges
(
ovsdb_idl_row
 *
row_
)

1712 
ov§ec_c⁄åﬁÀr
 *
row
 = 
	`ov§ec_c⁄åﬁÀr_ˇ°
(
row_
);

1714 
	`as£π
(
öôed
);

1715 
	`‰ì
(
row
->
íabÀ_async_mesßges
);

1716 
	}
}

1719 
	$ov§ec_c⁄åﬁÀr_u≈¨£_exã∫Æ_ids
(
ovsdb_idl_row
 *
row_
)

1721 
ov§ec_c⁄åﬁÀr
 *
row
 = 
	`ov§ec_c⁄åﬁÀr_ˇ°
(
row_
);

1723 
	`as£π
(
öôed
);

1724 
	`sm≠_de°roy
(&
row
->
exã∫Æ_ids
);

1725 
	}
}

1728 
	$ov§ec_c⁄åﬁÀr_u≈¨£_öa˘ivôy_¥obe
(
ovsdb_idl_row
 *
row_
)

1730 
ov§ec_c⁄åﬁÀr
 *
row
 = 
	`ov§ec_c⁄åﬁÀr_ˇ°
(
row_
);

1732 
	`as£π
(
öôed
);

1733 
	`‰ì
(
row
->
öa˘ivôy_¥obe
);

1734 
	}
}

1737 
	$ov§ec_c⁄åﬁÀr_u≈¨£_is_c⁄√˘ed
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

1740 
	}
}

1743 
	$ov§ec_c⁄åﬁÀr_u≈¨£_loˇl_g©eway
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

1746 
	}
}

1749 
	$ov§ec_c⁄åﬁÀr_u≈¨£_loˇl_ù
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

1752 
	}
}

1755 
	$ov§ec_c⁄åﬁÀr_u≈¨£_loˇl_√tmask
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

1758 
	}
}

1761 
	$ov§ec_c⁄åﬁÀr_u≈¨£_max_backoff
(
ovsdb_idl_row
 *
row_
)

1763 
ov§ec_c⁄åﬁÀr
 *
row
 = 
	`ov§ec_c⁄åﬁÀr_ˇ°
(
row_
);

1765 
	`as£π
(
öôed
);

1766 
	`‰ì
(
row
->
max_backoff
);

1767 
	}
}

1770 
	$ov§ec_c⁄åﬁÀr_u≈¨£_Ÿhî_c⁄fig
(
ovsdb_idl_row
 *
row_
)

1772 
ov§ec_c⁄åﬁÀr
 *
row
 = 
	`ov§ec_c⁄åﬁÀr_ˇ°
(
row_
);

1774 
	`as£π
(
öôed
);

1775 
	`sm≠_de°roy
(&
row
->
Ÿhî_c⁄fig
);

1776 
	}
}

1779 
	$ov§ec_c⁄åﬁÀr_u≈¨£_rﬁe
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

1782 
	}
}

1785 
	$ov§ec_c⁄åﬁÀr_u≈¨£_°©us
(
ovsdb_idl_row
 *
row_
)

1787 
ov§ec_c⁄åﬁÀr
 *
row
 = 
	`ov§ec_c⁄åﬁÀr_ˇ°
(
row_
);

1789 
	`as£π
(
öôed
);

1790 
	`sm≠_de°roy
(&
row
->
°©us
);

1791 
	}
}

1794 
	$ov§ec_c⁄åﬁÀr_u≈¨£_èrgë
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

1797 
	}
}

1800 
	$ov§ec_c⁄åﬁÀr_öô__
(
ovsdb_idl_row
 *
row
)

1802 
	`ov§ec_c⁄åﬁÀr_öô
(
	`ov§ec_c⁄åﬁÀr_ˇ°
(
row
));

1803 
	}
}

1806 
	$ov§ec_c⁄åﬁÀr_öô
(
ov§ec_c⁄åﬁÀr
 *
row
)

1808 
	`mem£t
(
row
, 0,  *row);

1809 
	`sm≠_öô
(&
row
->
exã∫Æ_ids
);

1810 
	`sm≠_öô
(&
row
->
Ÿhî_c⁄fig
);

1811 
	`sm≠_öô
(&
row
->
°©us
);

1812 
	}
}

1814 c⁄° 
ov§ec_c⁄åﬁÀr
 *

1815 
	$ov§ec_c⁄åﬁÀr_fú°
(c⁄° 
ovsdb_idl
 *
idl
)

1817  
	`ov§ec_c⁄åﬁÀr_ˇ°
(
	`ovsdb_idl_fú°_row
(
idl
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_CONTROLLER
]));

1818 
	}
}

1820 c⁄° 
ov§ec_c⁄åﬁÀr
 *

1821 
	$ov§ec_c⁄åﬁÀr_√xt
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
)

1823  
	`ov§ec_c⁄åﬁÀr_ˇ°
(
	`ovsdb_idl_√xt_row
(&
row
->
hódî_
));

1824 
	}
}

1827 
	$ov§ec_c⁄åﬁÀr_dñëe
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
)

1829 
	`ovsdb_idl_txn_dñëe
(&
row
->
hódî_
);

1830 
	}
}

1832 
ov§ec_c⁄åﬁÀr
 *

1833 
	$ov§ec_c⁄åﬁÀr_ö£π
(
ovsdb_idl_txn
 *
txn
)

1835  
	`ov§ec_c⁄åﬁÀr_ˇ°
(
	`ovsdb_idl_txn_ö£π
(
txn
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_CONTROLLER
], 
NULL
));

1836 
	}
}

1840 
	$ov§ec_c⁄åﬁÀr_vîify_c⁄√˘i⁄_mode
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
)

1842 
	`as£π
(
öôed
);

1843 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_CONNECTION_MODE
]);

1844 
	}
}

1847 
	$ov§ec_c⁄åﬁÀr_vîify_c⁄åﬁÀr_bur°_limô
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
)

1849 
	`as£π
(
öôed
);

1850 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_CONTROLLER_BURST_LIMIT
]);

1851 
	}
}

1854 
	$ov§ec_c⁄åﬁÀr_vîify_c⁄åﬁÀr_øã_limô
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
)

1856 
	`as£π
(
öôed
);

1857 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_CONTROLLER_RATE_LIMIT
]);

1858 
	}
}

1861 
	$ov§ec_c⁄åﬁÀr_vîify_íabÀ_async_mesßges
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
)

1863 
	`as£π
(
öôed
);

1864 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_ENABLE_ASYNC_MESSAGES
]);

1865 
	}
}

1868 
	$ov§ec_c⁄åﬁÀr_vîify_exã∫Æ_ids
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
)

1870 
	`as£π
(
öôed
);

1871 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_EXTERNAL_IDS
]);

1872 
	}
}

1875 
	$ov§ec_c⁄åﬁÀr_vîify_öa˘ivôy_¥obe
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
)

1877 
	`as£π
(
öôed
);

1878 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_INACTIVITY_PROBE
]);

1879 
	}
}

1882 
	$ov§ec_c⁄åﬁÀr_vîify_is_c⁄√˘ed
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
)

1884 
	`as£π
(
öôed
);

1885 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_IS_CONNECTED
]);

1886 
	}
}

1889 
	$ov§ec_c⁄åﬁÀr_vîify_loˇl_g©eway
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
)

1891 
	`as£π
(
öôed
);

1892 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_LOCAL_GATEWAY
]);

1893 
	}
}

1896 
	$ov§ec_c⁄åﬁÀr_vîify_loˇl_ù
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
)

1898 
	`as£π
(
öôed
);

1899 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_LOCAL_IP
]);

1900 
	}
}

1903 
	$ov§ec_c⁄åﬁÀr_vîify_loˇl_√tmask
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
)

1905 
	`as£π
(
öôed
);

1906 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_LOCAL_NETMASK
]);

1907 
	}
}

1910 
	$ov§ec_c⁄åﬁÀr_vîify_max_backoff
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
)

1912 
	`as£π
(
öôed
);

1913 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_MAX_BACKOFF
]);

1914 
	}
}

1917 
	$ov§ec_c⁄åﬁÀr_vîify_Ÿhî_c⁄fig
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
)

1919 
	`as£π
(
öôed
);

1920 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_OTHER_CONFIG
]);

1921 
	}
}

1924 
	$ov§ec_c⁄åﬁÀr_vîify_rﬁe
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
)

1926 
	`as£π
(
öôed
);

1927 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_ROLE
]);

1928 
	}
}

1931 
	$ov§ec_c⁄åﬁÀr_vîify_°©us
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
)

1933 
	`as£π
(
öôed
);

1934 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_STATUS
]);

1935 
	}
}

1938 
	$ov§ec_c⁄åﬁÀr_vîify_èrgë
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
)

1940 
	`as£π
(
öôed
);

1941 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_TARGET
]);

1942 
	}
}

1959 c⁄° 
ovsdb_d©um
 *

1960 
	$ov§ec_c⁄åﬁÀr_gë_c⁄√˘i⁄_mode
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
,

1961 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

1963 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

1964  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁ_c⁄√˘i⁄_mode
);

1965 
	}
}

1982 c⁄° 
ovsdb_d©um
 *

1983 
	$ov§ec_c⁄åﬁÀr_gë_c⁄åﬁÀr_bur°_limô
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
,

1984 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

1986 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_INTEGER
);

1987  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁ_c⁄åﬁÀr_bur°_limô
);

1988 
	}
}

2005 c⁄° 
ovsdb_d©um
 *

2006 
	$ov§ec_c⁄åﬁÀr_gë_c⁄åﬁÀr_øã_limô
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
,

2007 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

2009 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_INTEGER
);

2010  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁ_c⁄åﬁÀr_øã_limô
);

2011 
	}
}

2028 c⁄° 
ovsdb_d©um
 *

2029 
	$ov§ec_c⁄åﬁÀr_gë_íabÀ_async_mesßges
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
,

2030 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

2032 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_BOOLEAN
);

2033  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁ_íabÀ_async_mesßges
);

2034 
	}
}

2052 c⁄° 
ovsdb_d©um
 *

2053 
	$ov§ec_c⁄åﬁÀr_gë_exã∫Æ_ids
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
,

2054 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
,

2055 
ovsdb_©omic_ty≥
 
vÆue_ty≥
 
OVS_UNUSED
)

2057 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

2058 
	`as£π
(
vÆue_ty≥
 =
OVSDB_TYPE_STRING
);

2059  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁ_exã∫Æ_ids
);

2060 
	}
}

2077 c⁄° 
ovsdb_d©um
 *

2078 
	$ov§ec_c⁄åﬁÀr_gë_öa˘ivôy_¥obe
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
,

2079 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

2081 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_INTEGER
);

2082  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁ_öa˘ivôy_¥obe
);

2083 
	}
}

2100 c⁄° 
ovsdb_d©um
 *

2101 
	$ov§ec_c⁄åﬁÀr_gë_is_c⁄√˘ed
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
,

2102 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

2104 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_BOOLEAN
);

2105  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁ_is_c⁄√˘ed
);

2106 
	}
}

2123 c⁄° 
ovsdb_d©um
 *

2124 
	$ov§ec_c⁄åﬁÀr_gë_loˇl_g©eway
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
,

2125 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

2127 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

2128  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁ_loˇl_g©eway
);

2129 
	}
}

2146 c⁄° 
ovsdb_d©um
 *

2147 
	$ov§ec_c⁄åﬁÀr_gë_loˇl_ù
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
,

2148 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

2150 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

2151  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁ_loˇl_ù
);

2152 
	}
}

2169 c⁄° 
ovsdb_d©um
 *

2170 
	$ov§ec_c⁄åﬁÀr_gë_loˇl_√tmask
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
,

2171 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

2173 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

2174  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁ_loˇl_√tmask
);

2175 
	}
}

2192 c⁄° 
ovsdb_d©um
 *

2193 
	$ov§ec_c⁄åﬁÀr_gë_max_backoff
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
,

2194 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

2196 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_INTEGER
);

2197  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁ_max_backoff
);

2198 
	}
}

2216 c⁄° 
ovsdb_d©um
 *

2217 
	$ov§ec_c⁄åﬁÀr_gë_Ÿhî_c⁄fig
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
,

2218 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
,

2219 
ovsdb_©omic_ty≥
 
vÆue_ty≥
 
OVS_UNUSED
)

2221 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

2222 
	`as£π
(
vÆue_ty≥
 =
OVSDB_TYPE_STRING
);

2223  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁ_Ÿhî_c⁄fig
);

2224 
	}
}

2241 c⁄° 
ovsdb_d©um
 *

2242 
	$ov§ec_c⁄åﬁÀr_gë_rﬁe
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
,

2243 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

2245 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

2246  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁ_rﬁe
);

2247 
	}
}

2265 c⁄° 
ovsdb_d©um
 *

2266 
	$ov§ec_c⁄åﬁÀr_gë_°©us
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
,

2267 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
,

2268 
ovsdb_©omic_ty≥
 
vÆue_ty≥
 
OVS_UNUSED
)

2270 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

2271 
	`as£π
(
vÆue_ty≥
 =
OVSDB_TYPE_STRING
);

2272  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁ_°©us
);

2273 
	}
}

2290 c⁄° 
ovsdb_d©um
 *

2291 
	$ov§ec_c⁄åﬁÀr_gë_èrgë
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
,

2292 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

2294 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

2295  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁ_èrgë
);

2296 
	}
}

2299 
	$ov§ec_c⁄åﬁÀr_£t_c⁄√˘i⁄_mode
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
, c⁄° *
c⁄√˘i⁄_mode
)

2301 
ovsdb_d©um
 
d©um
;

2303 
	`as£π
(
öôed
);

2304 i‡(
c⁄√˘i⁄_mode
) {

2305 
d©um
.
n
 = 1;

2306 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

2307 
d©um
.
keys
[0].
°rög
 = 
	`x°rdup
(
c⁄√˘i⁄_mode
);

2309 
d©um
.
n
 = 0;

2310 
d©um
.
keys
 = 
NULL
;

2312 
d©um
.
vÆues
 = 
NULL
;

2313 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_CONNECTION_MODE
], &
d©um
);

2314 
	}
}

2317 
	$ov§ec_c⁄åﬁÀr_£t_c⁄åﬁÀr_bur°_limô
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
, c⁄° 
öt64_t
 *
c⁄åﬁÀr_bur°_limô
, 
size_t
 
n_c⁄åﬁÀr_bur°_limô
)

2319 
ovsdb_d©um
 
d©um
;

2320 
size_t
 
i
;

2322 
	`as£π
(
öôed
);

2323 
d©um
.
n
 = 
n_c⁄åﬁÀr_bur°_limô
;

2324 
d©um
.
keys
 = 
	`xmÆloc
(
n_c⁄åﬁÀr_bur°_limô
 *  *datum.keys);

2325 
d©um
.
vÆues
 = 
NULL
;

2326 
i
 = 0; i < 
n_c⁄åﬁÀr_bur°_limô
; i++) {

2327 
d©um
.
keys
[
i
].
öãgî
 = 
c⁄åﬁÀr_bur°_limô
[i];

2329 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_INTEGER
, 
OVSDB_TYPE_VOID
);

2330 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_CONTROLLER_BURST_LIMIT
], &
d©um
);

2331 
	}
}

2334 
	$ov§ec_c⁄åﬁÀr_£t_c⁄åﬁÀr_øã_limô
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
, c⁄° 
öt64_t
 *
c⁄åﬁÀr_øã_limô
, 
size_t
 
n_c⁄åﬁÀr_øã_limô
)

2336 
ovsdb_d©um
 
d©um
;

2337 
size_t
 
i
;

2339 
	`as£π
(
öôed
);

2340 
d©um
.
n
 = 
n_c⁄åﬁÀr_øã_limô
;

2341 
d©um
.
keys
 = 
	`xmÆloc
(
n_c⁄åﬁÀr_øã_limô
 *  *datum.keys);

2342 
d©um
.
vÆues
 = 
NULL
;

2343 
i
 = 0; i < 
n_c⁄åﬁÀr_øã_limô
; i++) {

2344 
d©um
.
keys
[
i
].
öãgî
 = 
c⁄åﬁÀr_øã_limô
[i];

2346 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_INTEGER
, 
OVSDB_TYPE_VOID
);

2347 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_CONTROLLER_RATE_LIMIT
], &
d©um
);

2348 
	}
}

2351 
	$ov§ec_c⁄åﬁÀr_£t_íabÀ_async_mesßges
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
, c⁄° 
boﬁ
 *
íabÀ_async_mesßges
, 
size_t
 
n_íabÀ_async_mesßges
)

2353 
ovsdb_d©um
 
d©um
;

2354 
size_t
 
i
;

2356 
	`as£π
(
öôed
);

2357 
d©um
.
n
 = 
n_íabÀ_async_mesßges
;

2358 
d©um
.
keys
 = 
	`xmÆloc
(
n_íabÀ_async_mesßges
 *  *datum.keys);

2359 
d©um
.
vÆues
 = 
NULL
;

2360 
i
 = 0; i < 
n_íabÀ_async_mesßges
; i++) {

2361 
d©um
.
keys
[
i
].
boﬁón
 = 
íabÀ_async_mesßges
[i];

2363 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_BOOLEAN
, 
OVSDB_TYPE_VOID
);

2364 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_ENABLE_ASYNC_MESSAGES
], &
d©um
);

2365 
	}
}

2368 
	$ov§ec_c⁄åﬁÀr_£t_exã∫Æ_ids
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
, c⁄° 
sm≠
 *smap)

2370 
ovsdb_d©um
 
d©um
;

2372 
	`as£π
(
öôed
);

2373 i‡(
sm≠
) {

2374 
sm≠_node
 *
node
;

2375 
size_t
 
i
;

2377 
d©um
.
n
 = 
	`sm≠_cou¡
(
sm≠
);

2378 
d©um
.
keys
 = 
	`xmÆloc
(d©um.
n
 *  *datum.keys);

2379 
d©um
.
vÆues
 = 
	`xmÆloc
(d©um.
n
 *  *datum.values);

2381 
i
 = 0;

2382 
	`SMAP_FOR_EACH
 (
node
, 
sm≠
) {

2383 
d©um
.
keys
[
i
].
°rög
 = 
	`x°rdup
(
node
->
key
);

2384 
d©um
.
vÆues
[
i
].
°rög
 = 
	`x°rdup
(
node
->
vÆue
);

2385 
i
++;

2387 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_STRING
, OVSDB_TYPE_STRING);

2389 
	`ovsdb_d©um_öô_em±y
(&
d©um
);

2391 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
,

2392 &
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_EXTERNAL_IDS
],

2393 &
d©um
);

2394 
	}
}

2398 
	$ov§ec_c⁄åﬁÀr_£t_öa˘ivôy_¥obe
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
, c⁄° 
öt64_t
 *
öa˘ivôy_¥obe
, 
size_t
 
n_öa˘ivôy_¥obe
)

2400 
ovsdb_d©um
 
d©um
;

2401 
size_t
 
i
;

2403 
	`as£π
(
öôed
);

2404 
d©um
.
n
 = 
n_öa˘ivôy_¥obe
;

2405 
d©um
.
keys
 = 
	`xmÆloc
(
n_öa˘ivôy_¥obe
 *  *datum.keys);

2406 
d©um
.
vÆues
 = 
NULL
;

2407 
i
 = 0; i < 
n_öa˘ivôy_¥obe
; i++) {

2408 
d©um
.
keys
[
i
].
öãgî
 = 
öa˘ivôy_¥obe
[i];

2410 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_INTEGER
, 
OVSDB_TYPE_VOID
);

2411 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_INACTIVITY_PROBE
], &
d©um
);

2412 
	}
}

2415 
	$ov§ec_c⁄åﬁÀr_£t_is_c⁄√˘ed
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
, 
boﬁ
 
is_c⁄√˘ed
)

2417 
ovsdb_d©um
 
d©um
;

2419 
	`as£π
(
öôed
);

2420 
d©um
.
n
 = 1;

2421 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

2422 
d©um
.
keys
[0].
boﬁón
 = 
is_c⁄√˘ed
;

2423 
d©um
.
vÆues
 = 
NULL
;

2424 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_IS_CONNECTED
], &
d©um
);

2425 
	}
}

2428 
	$ov§ec_c⁄åﬁÀr_£t_loˇl_g©eway
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
, c⁄° *
loˇl_g©eway
)

2430 
ovsdb_d©um
 
d©um
;

2432 
	`as£π
(
öôed
);

2433 i‡(
loˇl_g©eway
) {

2434 
d©um
.
n
 = 1;

2435 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

2436 
d©um
.
keys
[0].
°rög
 = 
	`x°rdup
(
loˇl_g©eway
);

2438 
d©um
.
n
 = 0;

2439 
d©um
.
keys
 = 
NULL
;

2441 
d©um
.
vÆues
 = 
NULL
;

2442 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_LOCAL_GATEWAY
], &
d©um
);

2443 
	}
}

2446 
	$ov§ec_c⁄åﬁÀr_£t_loˇl_ù
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
, c⁄° *
loˇl_ù
)

2448 
ovsdb_d©um
 
d©um
;

2450 
	`as£π
(
öôed
);

2451 i‡(
loˇl_ù
) {

2452 
d©um
.
n
 = 1;

2453 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

2454 
d©um
.
keys
[0].
°rög
 = 
	`x°rdup
(
loˇl_ù
);

2456 
d©um
.
n
 = 0;

2457 
d©um
.
keys
 = 
NULL
;

2459 
d©um
.
vÆues
 = 
NULL
;

2460 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_LOCAL_IP
], &
d©um
);

2461 
	}
}

2464 
	$ov§ec_c⁄åﬁÀr_£t_loˇl_√tmask
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
, c⁄° *
loˇl_√tmask
)

2466 
ovsdb_d©um
 
d©um
;

2468 
	`as£π
(
öôed
);

2469 i‡(
loˇl_√tmask
) {

2470 
d©um
.
n
 = 1;

2471 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

2472 
d©um
.
keys
[0].
°rög
 = 
	`x°rdup
(
loˇl_√tmask
);

2474 
d©um
.
n
 = 0;

2475 
d©um
.
keys
 = 
NULL
;

2477 
d©um
.
vÆues
 = 
NULL
;

2478 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_LOCAL_NETMASK
], &
d©um
);

2479 
	}
}

2482 
	$ov§ec_c⁄åﬁÀr_£t_max_backoff
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
, c⁄° 
öt64_t
 *
max_backoff
, 
size_t
 
n_max_backoff
)

2484 
ovsdb_d©um
 
d©um
;

2485 
size_t
 
i
;

2487 
	`as£π
(
öôed
);

2488 
d©um
.
n
 = 
n_max_backoff
;

2489 
d©um
.
keys
 = 
	`xmÆloc
(
n_max_backoff
 *  *datum.keys);

2490 
d©um
.
vÆues
 = 
NULL
;

2491 
i
 = 0; i < 
n_max_backoff
; i++) {

2492 
d©um
.
keys
[
i
].
öãgî
 = 
max_backoff
[i];

2494 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_INTEGER
, 
OVSDB_TYPE_VOID
);

2495 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_MAX_BACKOFF
], &
d©um
);

2496 
	}
}

2499 
	$ov§ec_c⁄åﬁÀr_£t_Ÿhî_c⁄fig
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
, c⁄° 
sm≠
 *smap)

2501 
ovsdb_d©um
 
d©um
;

2503 
	`as£π
(
öôed
);

2504 i‡(
sm≠
) {

2505 
sm≠_node
 *
node
;

2506 
size_t
 
i
;

2508 
d©um
.
n
 = 
	`sm≠_cou¡
(
sm≠
);

2509 
d©um
.
keys
 = 
	`xmÆloc
(d©um.
n
 *  *datum.keys);

2510 
d©um
.
vÆues
 = 
	`xmÆloc
(d©um.
n
 *  *datum.values);

2512 
i
 = 0;

2513 
	`SMAP_FOR_EACH
 (
node
, 
sm≠
) {

2514 
d©um
.
keys
[
i
].
°rög
 = 
	`x°rdup
(
node
->
key
);

2515 
d©um
.
vÆues
[
i
].
°rög
 = 
	`x°rdup
(
node
->
vÆue
);

2516 
i
++;

2518 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_STRING
, OVSDB_TYPE_STRING);

2520 
	`ovsdb_d©um_öô_em±y
(&
d©um
);

2522 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
,

2523 &
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_OTHER_CONFIG
],

2524 &
d©um
);

2525 
	}
}

2529 
	$ov§ec_c⁄åﬁÀr_£t_rﬁe
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
, c⁄° *
rﬁe
)

2531 
ovsdb_d©um
 
d©um
;

2533 
	`as£π
(
öôed
);

2534 i‡(
rﬁe
) {

2535 
d©um
.
n
 = 1;

2536 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

2537 
d©um
.
keys
[0].
°rög
 = 
	`x°rdup
(
rﬁe
);

2539 
d©um
.
n
 = 0;

2540 
d©um
.
keys
 = 
NULL
;

2542 
d©um
.
vÆues
 = 
NULL
;

2543 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_ROLE
], &
d©um
);

2544 
	}
}

2547 
	$ov§ec_c⁄åﬁÀr_£t_°©us
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
, c⁄° 
sm≠
 *smap)

2549 
ovsdb_d©um
 
d©um
;

2551 
	`as£π
(
öôed
);

2552 i‡(
sm≠
) {

2553 
sm≠_node
 *
node
;

2554 
size_t
 
i
;

2556 
d©um
.
n
 = 
	`sm≠_cou¡
(
sm≠
);

2557 
d©um
.
keys
 = 
	`xmÆloc
(d©um.
n
 *  *datum.keys);

2558 
d©um
.
vÆues
 = 
	`xmÆloc
(d©um.
n
 *  *datum.values);

2560 
i
 = 0;

2561 
	`SMAP_FOR_EACH
 (
node
, 
sm≠
) {

2562 
d©um
.
keys
[
i
].
°rög
 = 
	`x°rdup
(
node
->
key
);

2563 
d©um
.
vÆues
[
i
].
°rög
 = 
	`x°rdup
(
node
->
vÆue
);

2564 
i
++;

2566 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_STRING
, OVSDB_TYPE_STRING);

2568 
	`ovsdb_d©um_öô_em±y
(&
d©um
);

2570 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
,

2571 &
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_STATUS
],

2572 &
d©um
);

2573 
	}
}

2577 
	$ov§ec_c⁄åﬁÀr_£t_èrgë
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
row
, c⁄° *
èrgë
)

2579 
ovsdb_d©um
 
d©um
;

2581 
	`as£π
(
öôed
);

2582 
d©um
.
n
 = 1;

2583 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

2584 
d©um
.
keys
[0].
°rög
 = 
	`x°rdup
(
èrgë
);

2585 
d©um
.
vÆues
 = 
NULL
;

2586 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_TARGET
], &
d©um
);

2587 
	}
}

2589 
ovsdb_idl_cﬁumn
 
	gov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_N_COLUMNS
];

2592 
	$ov§ec_c⁄åﬁÀr_cﬁumns_öô
()

2594 
ovsdb_idl_cﬁumn
 *
c
;

2597 
c
 = &
ov§ec_c⁄åﬁÀr_cﬁ_c⁄√˘i⁄_mode
;

2598 
c
->
«me
 = "connection_mode";

2599 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

2600 
c
->
ty≥
.
key
.
íum_
 = 
	`xmÆloc
( *c->type.key.enum_);

2601 
c
->
ty≥
.
key
.
íum_
->
n
 = 2;

2602 
c
->
ty≥
.
key
.
íum_
->
keys
 = 
	`xmÆloc
(2 *  *c->type.key.enum_->keys);

2603 
c
->
ty≥
.
key
.
íum_
->
keys
[0].
°rög
 = 
	`x°rdup
("in-band");

2604 
c
->
ty≥
.
key
.
íum_
->
keys
[1].
°rög
 = 
	`x°rdup
("out-of-band");

2605 
c
->
ty≥
.
key
.
íum_
->
vÆues
 = 
NULL
;

2606 
	`ovsdb_d©um_s‹t_as£π
(
c
->
ty≥
.
key
.
íum_
, 
OVSDB_TYPE_STRING
);

2607 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

2608 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

2609 
c
->
ty≥
.
n_mö
 = 0;

2610 
c
->
ty≥
.
n_max
 = 1;

2611 
c
->
muèbÀ
 = 
åue
;

2612 
c
->
∑r£
 = 
ov§ec_c⁄åﬁÀr_∑r£_c⁄√˘i⁄_mode
;

2613 
c
->
u≈¨£
 = 
ov§ec_c⁄åﬁÀr_u≈¨£_c⁄√˘i⁄_mode
;

2616 
c
 = &
ov§ec_c⁄åﬁÀr_cﬁ_c⁄åﬁÀr_bur°_limô
;

2617 
c
->
«me
 = "controller_burst_limit";

2618 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_INTEGER
);

2619 
c
->
ty≥
.
key
.
u
.
öãgî
.
mö
 = 
	`INT64_C
(25);

2620 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

2621 
c
->
ty≥
.
n_mö
 = 0;

2622 
c
->
ty≥
.
n_max
 = 1;

2623 
c
->
muèbÀ
 = 
åue
;

2624 
c
->
∑r£
 = 
ov§ec_c⁄åﬁÀr_∑r£_c⁄åﬁÀr_bur°_limô
;

2625 
c
->
u≈¨£
 = 
ov§ec_c⁄åﬁÀr_u≈¨£_c⁄åﬁÀr_bur°_limô
;

2628 
c
 = &
ov§ec_c⁄åﬁÀr_cﬁ_c⁄åﬁÀr_øã_limô
;

2629 
c
->
«me
 = "controller_rate_limit";

2630 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_INTEGER
);

2631 
c
->
ty≥
.
key
.
u
.
öãgî
.
mö
 = 
	`INT64_C
(100);

2632 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

2633 
c
->
ty≥
.
n_mö
 = 0;

2634 
c
->
ty≥
.
n_max
 = 1;

2635 
c
->
muèbÀ
 = 
åue
;

2636 
c
->
∑r£
 = 
ov§ec_c⁄åﬁÀr_∑r£_c⁄åﬁÀr_øã_limô
;

2637 
c
->
u≈¨£
 = 
ov§ec_c⁄åﬁÀr_u≈¨£_c⁄åﬁÀr_øã_limô
;

2640 
c
 = &
ov§ec_c⁄åﬁÀr_cﬁ_íabÀ_async_mesßges
;

2641 
c
->
«me
 = "enable_async_messages";

2642 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_BOOLEAN
);

2643 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

2644 
c
->
ty≥
.
n_mö
 = 0;

2645 
c
->
ty≥
.
n_max
 = 1;

2646 
c
->
muèbÀ
 = 
åue
;

2647 
c
->
∑r£
 = 
ov§ec_c⁄åﬁÀr_∑r£_íabÀ_async_mesßges
;

2648 
c
->
u≈¨£
 = 
ov§ec_c⁄åﬁÀr_u≈¨£_íabÀ_async_mesßges
;

2651 
c
 = &
ov§ec_c⁄åﬁÀr_cﬁ_exã∫Æ_ids
;

2652 
c
->
«me
 = "external_ids";

2653 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

2654 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

2655 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_STRING
);

2656 
c
->
ty≥
.
vÆue
.
u
.
°rög
.
möLí
 = 0;

2657 
c
->
ty≥
.
n_mö
 = 0;

2658 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

2659 
c
->
muèbÀ
 = 
åue
;

2660 
c
->
∑r£
 = 
ov§ec_c⁄åﬁÀr_∑r£_exã∫Æ_ids
;

2661 
c
->
u≈¨£
 = 
ov§ec_c⁄åﬁÀr_u≈¨£_exã∫Æ_ids
;

2664 
c
 = &
ov§ec_c⁄åﬁÀr_cﬁ_öa˘ivôy_¥obe
;

2665 
c
->
«me
 = "inactivity_probe";

2666 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_INTEGER
);

2667 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

2668 
c
->
ty≥
.
n_mö
 = 0;

2669 
c
->
ty≥
.
n_max
 = 1;

2670 
c
->
muèbÀ
 = 
åue
;

2671 
c
->
∑r£
 = 
ov§ec_c⁄åﬁÀr_∑r£_öa˘ivôy_¥obe
;

2672 
c
->
u≈¨£
 = 
ov§ec_c⁄åﬁÀr_u≈¨£_öa˘ivôy_¥obe
;

2675 
c
 = &
ov§ec_c⁄åﬁÀr_cﬁ_is_c⁄√˘ed
;

2676 
c
->
«me
 = "is_connected";

2677 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_BOOLEAN
);

2678 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

2679 
c
->
ty≥
.
n_mö
 = 1;

2680 
c
->
ty≥
.
n_max
 = 1;

2681 
c
->
muèbÀ
 = 
åue
;

2682 
c
->
∑r£
 = 
ov§ec_c⁄åﬁÀr_∑r£_is_c⁄√˘ed
;

2683 
c
->
u≈¨£
 = 
ov§ec_c⁄åﬁÀr_u≈¨£_is_c⁄√˘ed
;

2686 
c
 = &
ov§ec_c⁄åﬁÀr_cﬁ_loˇl_g©eway
;

2687 
c
->
«me
 = "local_gateway";

2688 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

2689 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

2690 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

2691 
c
->
ty≥
.
n_mö
 = 0;

2692 
c
->
ty≥
.
n_max
 = 1;

2693 
c
->
muèbÀ
 = 
åue
;

2694 
c
->
∑r£
 = 
ov§ec_c⁄åﬁÀr_∑r£_loˇl_g©eway
;

2695 
c
->
u≈¨£
 = 
ov§ec_c⁄åﬁÀr_u≈¨£_loˇl_g©eway
;

2698 
c
 = &
ov§ec_c⁄åﬁÀr_cﬁ_loˇl_ù
;

2699 
c
->
«me
 = "local_ip";

2700 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

2701 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

2702 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

2703 
c
->
ty≥
.
n_mö
 = 0;

2704 
c
->
ty≥
.
n_max
 = 1;

2705 
c
->
muèbÀ
 = 
åue
;

2706 
c
->
∑r£
 = 
ov§ec_c⁄åﬁÀr_∑r£_loˇl_ù
;

2707 
c
->
u≈¨£
 = 
ov§ec_c⁄åﬁÀr_u≈¨£_loˇl_ù
;

2710 
c
 = &
ov§ec_c⁄åﬁÀr_cﬁ_loˇl_√tmask
;

2711 
c
->
«me
 = "local_netmask";

2712 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

2713 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

2714 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

2715 
c
->
ty≥
.
n_mö
 = 0;

2716 
c
->
ty≥
.
n_max
 = 1;

2717 
c
->
muèbÀ
 = 
åue
;

2718 
c
->
∑r£
 = 
ov§ec_c⁄åﬁÀr_∑r£_loˇl_√tmask
;

2719 
c
->
u≈¨£
 = 
ov§ec_c⁄åﬁÀr_u≈¨£_loˇl_√tmask
;

2722 
c
 = &
ov§ec_c⁄åﬁÀr_cﬁ_max_backoff
;

2723 
c
->
«me
 = "max_backoff";

2724 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_INTEGER
);

2725 
c
->
ty≥
.
key
.
u
.
öãgî
.
mö
 = 
	`INT64_C
(1000);

2726 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

2727 
c
->
ty≥
.
n_mö
 = 0;

2728 
c
->
ty≥
.
n_max
 = 1;

2729 
c
->
muèbÀ
 = 
åue
;

2730 
c
->
∑r£
 = 
ov§ec_c⁄åﬁÀr_∑r£_max_backoff
;

2731 
c
->
u≈¨£
 = 
ov§ec_c⁄åﬁÀr_u≈¨£_max_backoff
;

2734 
c
 = &
ov§ec_c⁄åﬁÀr_cﬁ_Ÿhî_c⁄fig
;

2735 
c
->
«me
 = "other_config";

2736 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

2737 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

2738 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_STRING
);

2739 
c
->
ty≥
.
vÆue
.
u
.
°rög
.
möLí
 = 0;

2740 
c
->
ty≥
.
n_mö
 = 0;

2741 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

2742 
c
->
muèbÀ
 = 
åue
;

2743 
c
->
∑r£
 = 
ov§ec_c⁄åﬁÀr_∑r£_Ÿhî_c⁄fig
;

2744 
c
->
u≈¨£
 = 
ov§ec_c⁄åﬁÀr_u≈¨£_Ÿhî_c⁄fig
;

2747 
c
 = &
ov§ec_c⁄åﬁÀr_cﬁ_rﬁe
;

2748 
c
->
«me
 = "role";

2749 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

2750 
c
->
ty≥
.
key
.
íum_
 = 
	`xmÆloc
( *c->type.key.enum_);

2751 
c
->
ty≥
.
key
.
íum_
->
n
 = 3;

2752 
c
->
ty≥
.
key
.
íum_
->
keys
 = 
	`xmÆloc
(3 *  *c->type.key.enum_->keys);

2753 
c
->
ty≥
.
key
.
íum_
->
keys
[0].
°rög
 = 
	`x°rdup
("master");

2754 
c
->
ty≥
.
key
.
íum_
->
keys
[1].
°rög
 = 
	`x°rdup
("other");

2755 
c
->
ty≥
.
key
.
íum_
->
keys
[2].
°rög
 = 
	`x°rdup
("slave");

2756 
c
->
ty≥
.
key
.
íum_
->
vÆues
 = 
NULL
;

2757 
	`ovsdb_d©um_s‹t_as£π
(
c
->
ty≥
.
key
.
íum_
, 
OVSDB_TYPE_STRING
);

2758 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

2759 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

2760 
c
->
ty≥
.
n_mö
 = 0;

2761 
c
->
ty≥
.
n_max
 = 1;

2762 
c
->
muèbÀ
 = 
åue
;

2763 
c
->
∑r£
 = 
ov§ec_c⁄åﬁÀr_∑r£_rﬁe
;

2764 
c
->
u≈¨£
 = 
ov§ec_c⁄åﬁÀr_u≈¨£_rﬁe
;

2767 
c
 = &
ov§ec_c⁄åﬁÀr_cﬁ_°©us
;

2768 
c
->
«me
 = "status";

2769 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

2770 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

2771 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_STRING
);

2772 
c
->
ty≥
.
vÆue
.
u
.
°rög
.
möLí
 = 0;

2773 
c
->
ty≥
.
n_mö
 = 0;

2774 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

2775 
c
->
muèbÀ
 = 
åue
;

2776 
c
->
∑r£
 = 
ov§ec_c⁄åﬁÀr_∑r£_°©us
;

2777 
c
->
u≈¨£
 = 
ov§ec_c⁄åﬁÀr_u≈¨£_°©us
;

2780 
c
 = &
ov§ec_c⁄åﬁÀr_cﬁ_èrgë
;

2781 
c
->
«me
 = "target";

2782 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

2783 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

2784 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

2785 
c
->
ty≥
.
n_mö
 = 1;

2786 
c
->
ty≥
.
n_max
 = 1;

2787 
c
->
muèbÀ
 = 
åue
;

2788 
c
->
∑r£
 = 
ov§ec_c⁄åﬁÀr_∑r£_èrgë
;

2789 
c
->
u≈¨£
 = 
ov§ec_c⁄åﬁÀr_u≈¨£_èrgë
;

2790 
	}
}

2795 
	$ov§ec_Êow_èbÀ_∑r£_Êow_limô
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

2797 
ov§ec_Êow_èbÀ
 *
row
 = 
	`ov§ec_Êow_èbÀ_ˇ°
(
row_
);

2798 
size_t
 
n
 = 
	`MIN
(1, 
d©um
->n);

2799 
size_t
 
i
;

2801 
	`as£π
(
öôed
);

2802 
row
->
Êow_limô
 = 
NULL
;

2803 
row
->
n_Êow_limô
 = 0;

2804 
i
 = 0; i < 
n
; i++) {

2805 i‡(!
row
->
n_Êow_limô
) {

2806 
row
->
Êow_limô
 = 
	`xmÆloc
(
n
 *  *row->flow_limit);

2808 
row
->
Êow_limô
[row->
n_Êow_limô
] = 
d©um
->
keys
[
i
].
öãgî
;

2809 
row
->
n_Êow_limô
++;

2811 
	}
}

2814 
	$ov§ec_Êow_èbÀ_∑r£_groups
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

2816 
ov§ec_Êow_èbÀ
 *
row
 = 
	`ov§ec_Êow_èbÀ_ˇ°
(
row_
);

2817 
size_t
 
i
;

2819 
	`as£π
(
öôed
);

2820 
row
->
groups
 = 
NULL
;

2821 
row
->
n_groups
 = 0;

2822 
i
 = 0; i < 
d©um
->
n
; i++) {

2823 i‡(!
row
->
n_groups
) {

2824 
row
->
groups
 = 
	`xmÆloc
(
d©um
->
n
 *  *row->groups);

2826 
row
->
groups
[row->
n_groups
] = 
d©um
->
keys
[
i
].
°rög
;

2827 
row
->
n_groups
++;

2829 
	}
}

2832 
	$ov§ec_Êow_èbÀ_∑r£_«me
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

2834 
ov§ec_Êow_èbÀ
 *
row
 = 
	`ov§ec_Êow_èbÀ_ˇ°
(
row_
);

2836 
	`as£π
(
öôed
);

2837 i‡(
d©um
->
n
 >= 1) {

2838 
row
->
«me
 = 
d©um
->
keys
[0].
°rög
;

2840 
row
->
«me
 = 
NULL
;

2842 
	}
}

2845 
	$ov§ec_Êow_èbÀ_∑r£_ovîÊow_pﬁicy
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

2847 
ov§ec_Êow_èbÀ
 *
row
 = 
	`ov§ec_Êow_èbÀ_ˇ°
(
row_
);

2849 
	`as£π
(
öôed
);

2850 i‡(
d©um
->
n
 >= 1) {

2851 
row
->
ovîÊow_pﬁicy
 = 
d©um
->
keys
[0].
°rög
;

2853 
row
->
ovîÊow_pﬁicy
 = 
NULL
;

2855 
	}
}

2858 
	$ov§ec_Êow_èbÀ_u≈¨£_Êow_limô
(
ovsdb_idl_row
 *
row_
)

2860 
ov§ec_Êow_èbÀ
 *
row
 = 
	`ov§ec_Êow_èbÀ_ˇ°
(
row_
);

2862 
	`as£π
(
öôed
);

2863 
	`‰ì
(
row
->
Êow_limô
);

2864 
	}
}

2867 
	$ov§ec_Êow_èbÀ_u≈¨£_groups
(
ovsdb_idl_row
 *
row_
)

2869 
ov§ec_Êow_èbÀ
 *
row
 = 
	`ov§ec_Êow_èbÀ_ˇ°
(
row_
);

2871 
	`as£π
(
öôed
);

2872 
	`‰ì
(
row
->
groups
);

2873 
	}
}

2876 
	$ov§ec_Êow_èbÀ_u≈¨£_«me
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

2879 
	}
}

2882 
	$ov§ec_Êow_èbÀ_u≈¨£_ovîÊow_pﬁicy
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

2885 
	}
}

2888 
	$ov§ec_Êow_èbÀ_öô__
(
ovsdb_idl_row
 *
row
)

2890 
	`ov§ec_Êow_èbÀ_öô
(
	`ov§ec_Êow_èbÀ_ˇ°
(
row
));

2891 
	}
}

2894 
	$ov§ec_Êow_èbÀ_öô
(
ov§ec_Êow_èbÀ
 *
row
)

2896 
	`mem£t
(
row
, 0,  *row);

2897 
	}
}

2899 c⁄° 
ov§ec_Êow_èbÀ
 *

2900 
	$ov§ec_Êow_èbÀ_fú°
(c⁄° 
ovsdb_idl
 *
idl
)

2902  
	`ov§ec_Êow_èbÀ_ˇ°
(
	`ovsdb_idl_fú°_row
(
idl
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_FLOW_TABLE
]));

2903 
	}
}

2905 c⁄° 
ov§ec_Êow_èbÀ
 *

2906 
	$ov§ec_Êow_èbÀ_√xt
(c⁄° 
ov§ec_Êow_èbÀ
 *
row
)

2908  
	`ov§ec_Êow_èbÀ_ˇ°
(
	`ovsdb_idl_√xt_row
(&
row
->
hódî_
));

2909 
	}
}

2912 
	$ov§ec_Êow_èbÀ_dñëe
(c⁄° 
ov§ec_Êow_èbÀ
 *
row
)

2914 
	`ovsdb_idl_txn_dñëe
(&
row
->
hódî_
);

2915 
	}
}

2917 
ov§ec_Êow_èbÀ
 *

2918 
	$ov§ec_Êow_èbÀ_ö£π
(
ovsdb_idl_txn
 *
txn
)

2920  
	`ov§ec_Êow_èbÀ_ˇ°
(
	`ovsdb_idl_txn_ö£π
(
txn
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_FLOW_TABLE
], 
NULL
));

2921 
	}
}

2925 
	$ov§ec_Êow_èbÀ_vîify_Êow_limô
(c⁄° 
ov§ec_Êow_èbÀ
 *
row
)

2927 
	`as£π
(
öôed
);

2928 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_Êow_èbÀ_cﬁumns
[
OVSREC_FLOW_TABLE_COL_FLOW_LIMIT
]);

2929 
	}
}

2932 
	$ov§ec_Êow_èbÀ_vîify_groups
(c⁄° 
ov§ec_Êow_èbÀ
 *
row
)

2934 
	`as£π
(
öôed
);

2935 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_Êow_èbÀ_cﬁumns
[
OVSREC_FLOW_TABLE_COL_GROUPS
]);

2936 
	}
}

2939 
	$ov§ec_Êow_èbÀ_vîify_«me
(c⁄° 
ov§ec_Êow_èbÀ
 *
row
)

2941 
	`as£π
(
öôed
);

2942 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_Êow_èbÀ_cﬁumns
[
OVSREC_FLOW_TABLE_COL_NAME
]);

2943 
	}
}

2946 
	$ov§ec_Êow_èbÀ_vîify_ovîÊow_pﬁicy
(c⁄° 
ov§ec_Êow_èbÀ
 *
row
)

2948 
	`as£π
(
öôed
);

2949 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_Êow_èbÀ_cﬁumns
[
OVSREC_FLOW_TABLE_COL_OVERFLOW_POLICY
]);

2950 
	}
}

2967 c⁄° 
ovsdb_d©um
 *

2968 
	$ov§ec_Êow_èbÀ_gë_Êow_limô
(c⁄° 
ov§ec_Êow_èbÀ
 *
row
,

2969 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

2971 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_INTEGER
);

2972  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_Êow_èbÀ_cﬁ_Êow_limô
);

2973 
	}
}

2990 c⁄° 
ovsdb_d©um
 *

2991 
	$ov§ec_Êow_èbÀ_gë_groups
(c⁄° 
ov§ec_Êow_èbÀ
 *
row
,

2992 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

2994 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

2995  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_Êow_èbÀ_cﬁ_groups
);

2996 
	}
}

3013 c⁄° 
ovsdb_d©um
 *

3014 
	$ov§ec_Êow_èbÀ_gë_«me
(c⁄° 
ov§ec_Êow_èbÀ
 *
row
,

3015 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

3017 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

3018  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_Êow_èbÀ_cﬁ_«me
);

3019 
	}
}

3036 c⁄° 
ovsdb_d©um
 *

3037 
	$ov§ec_Êow_èbÀ_gë_ovîÊow_pﬁicy
(c⁄° 
ov§ec_Êow_èbÀ
 *
row
,

3038 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

3040 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

3041  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_Êow_èbÀ_cﬁ_ovîÊow_pﬁicy
);

3042 
	}
}

3045 
	$ov§ec_Êow_èbÀ_£t_Êow_limô
(c⁄° 
ov§ec_Êow_èbÀ
 *
row
, c⁄° 
öt64_t
 *
Êow_limô
, 
size_t
 
n_Êow_limô
)

3047 
ovsdb_d©um
 
d©um
;

3048 
size_t
 
i
;

3050 
	`as£π
(
öôed
);

3051 
d©um
.
n
 = 
n_Êow_limô
;

3052 
d©um
.
keys
 = 
	`xmÆloc
(
n_Êow_limô
 *  *datum.keys);

3053 
d©um
.
vÆues
 = 
NULL
;

3054 
i
 = 0; i < 
n_Êow_limô
; i++) {

3055 
d©um
.
keys
[
i
].
öãgî
 = 
Êow_limô
[i];

3057 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_INTEGER
, 
OVSDB_TYPE_VOID
);

3058 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_Êow_èbÀ_cﬁumns
[
OVSREC_FLOW_TABLE_COL_FLOW_LIMIT
], &
d©um
);

3059 
	}
}

3062 
	$ov§ec_Êow_èbÀ_£t_groups
(c⁄° 
ov§ec_Êow_èbÀ
 *
row
, **
groups
, 
size_t
 
n_groups
)

3064 
ovsdb_d©um
 
d©um
;

3065 
size_t
 
i
;

3067 
	`as£π
(
öôed
);

3068 
d©um
.
n
 = 
n_groups
;

3069 
d©um
.
keys
 = 
	`xmÆloc
(
n_groups
 *  *datum.keys);

3070 
d©um
.
vÆues
 = 
NULL
;

3071 
i
 = 0; i < 
n_groups
; i++) {

3072 
d©um
.
keys
[
i
].
°rög
 = 
	`x°rdup
(
groups
[i]);

3074 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_STRING
, 
OVSDB_TYPE_VOID
);

3075 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_Êow_èbÀ_cﬁumns
[
OVSREC_FLOW_TABLE_COL_GROUPS
], &
d©um
);

3076 
	}
}

3079 
	$ov§ec_Êow_èbÀ_£t_«me
(c⁄° 
ov§ec_Êow_èbÀ
 *
row
, c⁄° *
«me
)

3081 
ovsdb_d©um
 
d©um
;

3083 
	`as£π
(
öôed
);

3084 i‡(
«me
) {

3085 
d©um
.
n
 = 1;

3086 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

3087 
d©um
.
keys
[0].
°rög
 = 
	`x°rdup
(
«me
);

3089 
d©um
.
n
 = 0;

3090 
d©um
.
keys
 = 
NULL
;

3092 
d©um
.
vÆues
 = 
NULL
;

3093 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_Êow_èbÀ_cﬁumns
[
OVSREC_FLOW_TABLE_COL_NAME
], &
d©um
);

3094 
	}
}

3097 
	$ov§ec_Êow_èbÀ_£t_ovîÊow_pﬁicy
(c⁄° 
ov§ec_Êow_èbÀ
 *
row
, c⁄° *
ovîÊow_pﬁicy
)

3099 
ovsdb_d©um
 
d©um
;

3101 
	`as£π
(
öôed
);

3102 i‡(
ovîÊow_pﬁicy
) {

3103 
d©um
.
n
 = 1;

3104 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

3105 
d©um
.
keys
[0].
°rög
 = 
	`x°rdup
(
ovîÊow_pﬁicy
);

3107 
d©um
.
n
 = 0;

3108 
d©um
.
keys
 = 
NULL
;

3110 
d©um
.
vÆues
 = 
NULL
;

3111 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_Êow_èbÀ_cﬁumns
[
OVSREC_FLOW_TABLE_COL_OVERFLOW_POLICY
], &
d©um
);

3112 
	}
}

3114 
ovsdb_idl_cﬁumn
 
	gov§ec_Êow_èbÀ_cﬁumns
[
OVSREC_FLOW_TABLE_N_COLUMNS
];

3117 
	$ov§ec_Êow_èbÀ_cﬁumns_öô
()

3119 
ovsdb_idl_cﬁumn
 *
c
;

3122 
c
 = &
ov§ec_Êow_èbÀ_cﬁ_Êow_limô
;

3123 
c
->
«me
 = "flow_limit";

3124 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_INTEGER
);

3125 
c
->
ty≥
.
key
.
u
.
öãgî
.
mö
 = 
	`INT64_C
(0);

3126 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

3127 
c
->
ty≥
.
n_mö
 = 0;

3128 
c
->
ty≥
.
n_max
 = 1;

3129 
c
->
muèbÀ
 = 
åue
;

3130 
c
->
∑r£
 = 
ov§ec_Êow_èbÀ_∑r£_Êow_limô
;

3131 
c
->
u≈¨£
 = 
ov§ec_Êow_èbÀ_u≈¨£_Êow_limô
;

3134 
c
 = &
ov§ec_Êow_èbÀ_cﬁ_groups
;

3135 
c
->
«me
 = "groups";

3136 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

3137 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

3138 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

3139 
c
->
ty≥
.
n_mö
 = 0;

3140 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

3141 
c
->
muèbÀ
 = 
åue
;

3142 
c
->
∑r£
 = 
ov§ec_Êow_èbÀ_∑r£_groups
;

3143 
c
->
u≈¨£
 = 
ov§ec_Êow_èbÀ_u≈¨£_groups
;

3146 
c
 = &
ov§ec_Êow_èbÀ_cﬁ_«me
;

3147 
c
->
«me
 = "name";

3148 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

3149 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

3150 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

3151 
c
->
ty≥
.
n_mö
 = 0;

3152 
c
->
ty≥
.
n_max
 = 1;

3153 
c
->
muèbÀ
 = 
åue
;

3154 
c
->
∑r£
 = 
ov§ec_Êow_èbÀ_∑r£_«me
;

3155 
c
->
u≈¨£
 = 
ov§ec_Êow_èbÀ_u≈¨£_«me
;

3158 
c
 = &
ov§ec_Êow_èbÀ_cﬁ_ovîÊow_pﬁicy
;

3159 
c
->
«me
 = "overflow_policy";

3160 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

3161 
c
->
ty≥
.
key
.
íum_
 = 
	`xmÆloc
( *c->type.key.enum_);

3162 
c
->
ty≥
.
key
.
íum_
->
n
 = 2;

3163 
c
->
ty≥
.
key
.
íum_
->
keys
 = 
	`xmÆloc
(2 *  *c->type.key.enum_->keys);

3164 
c
->
ty≥
.
key
.
íum_
->
keys
[0].
°rög
 = 
	`x°rdup
("evict");

3165 
c
->
ty≥
.
key
.
íum_
->
keys
[1].
°rög
 = 
	`x°rdup
("refuse");

3166 
c
->
ty≥
.
key
.
íum_
->
vÆues
 = 
NULL
;

3167 
	`ovsdb_d©um_s‹t_as£π
(
c
->
ty≥
.
key
.
íum_
, 
OVSDB_TYPE_STRING
);

3168 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

3169 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

3170 
c
->
ty≥
.
n_mö
 = 0;

3171 
c
->
ty≥
.
n_max
 = 1;

3172 
c
->
muèbÀ
 = 
åue
;

3173 
c
->
∑r£
 = 
ov§ec_Êow_èbÀ_∑r£_ovîÊow_pﬁicy
;

3174 
c
->
u≈¨£
 = 
ov§ec_Êow_èbÀ_u≈¨£_ovîÊow_pﬁicy
;

3175 
	}
}

3180 
	$ov§ec_öãrÁ˚_∑r£_admö_°©e
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

3182 
ov§ec_öãrÁ˚
 *
row
 = 
	`ov§ec_öãrÁ˚_ˇ°
(
row_
);

3184 
	`as£π
(
öôed
);

3185 i‡(
d©um
->
n
 >= 1) {

3186 
row
->
admö_°©e
 = 
d©um
->
keys
[0].
°rög
;

3188 
row
->
admö_°©e
 = 
NULL
;

3190 
	}
}

3193 
	$ov§ec_öãrÁ˚_∑r£_cfm_Áu…
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

3195 
ov§ec_öãrÁ˚
 *
row
 = 
	`ov§ec_öãrÁ˚_ˇ°
(
row_
);

3196 
size_t
 
n
 = 
	`MIN
(1, 
d©um
->n);

3197 
size_t
 
i
;

3199 
	`as£π
(
öôed
);

3200 
row
->
cfm_Áu…
 = 
NULL
;

3201 
row
->
n_cfm_Áu…
 = 0;

3202 
i
 = 0; i < 
n
; i++) {

3203 i‡(!
row
->
n_cfm_Áu…
) {

3204 
row
->
cfm_Áu…
 = 
	`xmÆloc
(
n
 * 
sizeof_boﬁ
);

3206 
row
->
cfm_Áu…
[row->
n_cfm_Áu…
] = 
d©um
->
keys
[
i
].
boﬁón
;

3207 
row
->
n_cfm_Áu…
++;

3209 
	}
}

3212 
	$ov§ec_öãrÁ˚_∑r£_cfm_Áu…_°©us
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

3214 
ov§ec_öãrÁ˚
 *
row
 = 
	`ov§ec_öãrÁ˚_ˇ°
(
row_
);

3215 
size_t
 
i
;

3217 
	`as£π
(
öôed
);

3218 
row
->
cfm_Áu…_°©us
 = 
NULL
;

3219 
row
->
n_cfm_Áu…_°©us
 = 0;

3220 
i
 = 0; i < 
d©um
->
n
; i++) {

3221 i‡(!
row
->
n_cfm_Áu…_°©us
) {

3222 
row
->
cfm_Áu…_°©us
 = 
	`xmÆloc
(
d©um
->
n
 *  *row->cfm_fault_status);

3224 
row
->
cfm_Áu…_°©us
[row->
n_cfm_Áu…_°©us
] = 
d©um
->
keys
[
i
].
°rög
;

3225 
row
->
n_cfm_Áu…_°©us
++;

3227 
	}
}

3230 
	$ov§ec_öãrÁ˚_∑r£_cfm_hó…h
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

3232 
ov§ec_öãrÁ˚
 *
row
 = 
	`ov§ec_öãrÁ˚_ˇ°
(
row_
);

3233 
size_t
 
n
 = 
	`MIN
(1, 
d©um
->n);

3234 
size_t
 
i
;

3236 
	`as£π
(
öôed
);

3237 
row
->
cfm_hó…h
 = 
NULL
;

3238 
row
->
n_cfm_hó…h
 = 0;

3239 
i
 = 0; i < 
n
; i++) {

3240 i‡(!
row
->
n_cfm_hó…h
) {

3241 
row
->
cfm_hó…h
 = 
	`xmÆloc
(
n
 *  *row->cfm_health);

3243 
row
->
cfm_hó…h
[row->
n_cfm_hó…h
] = 
d©um
->
keys
[
i
].
öãgî
;

3244 
row
->
n_cfm_hó…h
++;

3246 
	}
}

3249 
	$ov§ec_öãrÁ˚_∑r£_cfm_mpid
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

3251 
ov§ec_öãrÁ˚
 *
row
 = 
	`ov§ec_öãrÁ˚_ˇ°
(
row_
);

3252 
size_t
 
n
 = 
	`MIN
(1, 
d©um
->n);

3253 
size_t
 
i
;

3255 
	`as£π
(
öôed
);

3256 
row
->
cfm_mpid
 = 
NULL
;

3257 
row
->
n_cfm_mpid
 = 0;

3258 
i
 = 0; i < 
n
; i++) {

3259 i‡(!
row
->
n_cfm_mpid
) {

3260 
row
->
cfm_mpid
 = 
	`xmÆloc
(
n
 *  *row->cfm_mpid);

3262 
row
->
cfm_mpid
[row->
n_cfm_mpid
] = 
d©um
->
keys
[
i
].
öãgî
;

3263 
row
->
n_cfm_mpid
++;

3265 
	}
}

3268 
	$ov§ec_öãrÁ˚_∑r£_cfm_ªmŸe_mpids
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

3270 
ov§ec_öãrÁ˚
 *
row
 = 
	`ov§ec_öãrÁ˚_ˇ°
(
row_
);

3271 
size_t
 
i
;

3273 
	`as£π
(
öôed
);

3274 
row
->
cfm_ªmŸe_mpids
 = 
NULL
;

3275 
row
->
n_cfm_ªmŸe_mpids
 = 0;

3276 
i
 = 0; i < 
d©um
->
n
; i++) {

3277 i‡(!
row
->
n_cfm_ªmŸe_mpids
) {

3278 
row
->
cfm_ªmŸe_mpids
 = 
	`xmÆloc
(
d©um
->
n
 *  *row->cfm_remote_mpids);

3280 
row
->
cfm_ªmŸe_mpids
[row->
n_cfm_ªmŸe_mpids
] = 
d©um
->
keys
[
i
].
öãgî
;

3281 
row
->
n_cfm_ªmŸe_mpids
++;

3283 
	}
}

3286 
	$ov§ec_öãrÁ˚_∑r£_cfm_ªmŸe_›°©e
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

3288 
ov§ec_öãrÁ˚
 *
row
 = 
	`ov§ec_öãrÁ˚_ˇ°
(
row_
);

3290 
	`as£π
(
öôed
);

3291 i‡(
d©um
->
n
 >= 1) {

3292 
row
->
cfm_ªmŸe_›°©e
 = 
d©um
->
keys
[0].
°rög
;

3294 
row
->
cfm_ªmŸe_›°©e
 = 
NULL
;

3296 
	}
}

3299 
	$ov§ec_öãrÁ˚_∑r£_du∂ex
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

3301 
ov§ec_öãrÁ˚
 *
row
 = 
	`ov§ec_öãrÁ˚_ˇ°
(
row_
);

3303 
	`as£π
(
öôed
);

3304 i‡(
d©um
->
n
 >= 1) {

3305 
row
->
du∂ex
 = 
d©um
->
keys
[0].
°rög
;

3307 
row
->
du∂ex
 = 
NULL
;

3309 
	}
}

3312 
	$ov§ec_öãrÁ˚_∑r£_exã∫Æ_ids
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

3314 
ov§ec_öãrÁ˚
 *
row
 = 
	`ov§ec_öãrÁ˚_ˇ°
(
row_
);

3315 
size_t
 
i
;

3317 
	`as£π
(
öôed
);

3318 
	`sm≠_öô
(&
row
->
exã∫Æ_ids
);

3319 
i
 = 0; i < 
d©um
->
n
; i++) {

3320 
	`sm≠_add
(&
row
->
exã∫Æ_ids
,

3321 
d©um
->
keys
[
i
].
°rög
,

3322 
d©um
->
vÆues
[
i
].
°rög
);

3324 
	}
}

3327 
	$ov§ec_öãrÁ˚_∑r£_ögªss_pﬁicög_bur°
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

3329 
ov§ec_öãrÁ˚
 *
row
 = 
	`ov§ec_öãrÁ˚_ˇ°
(
row_
);

3331 
	`as£π
(
öôed
);

3332 i‡(
d©um
->
n
 >= 1) {

3333 
row
->
ögªss_pﬁicög_bur°
 = 
d©um
->
keys
[0].
öãgî
;

3335 
row
->
ögªss_pﬁicög_bur°
 = 0;

3337 
	}
}

3340 
	$ov§ec_öãrÁ˚_∑r£_ögªss_pﬁicög_øã
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

3342 
ov§ec_öãrÁ˚
 *
row
 = 
	`ov§ec_öãrÁ˚_ˇ°
(
row_
);

3344 
	`as£π
(
öôed
);

3345 i‡(
d©um
->
n
 >= 1) {

3346 
row
->
ögªss_pﬁicög_øã
 = 
d©um
->
keys
[0].
öãgî
;

3348 
row
->
ögªss_pﬁicög_øã
 = 0;

3350 
	}
}

3353 
	$ov§ec_öãrÁ˚_∑r£_œ˝_cuºít
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

3355 
ov§ec_öãrÁ˚
 *
row
 = 
	`ov§ec_öãrÁ˚_ˇ°
(
row_
);

3356 
size_t
 
n
 = 
	`MIN
(1, 
d©um
->n);

3357 
size_t
 
i
;

3359 
	`as£π
(
öôed
);

3360 
row
->
œ˝_cuºít
 = 
NULL
;

3361 
row
->
n_œ˝_cuºít
 = 0;

3362 
i
 = 0; i < 
n
; i++) {

3363 i‡(!
row
->
n_œ˝_cuºít
) {

3364 
row
->
œ˝_cuºít
 = 
	`xmÆloc
(
n
 * 
sizeof_boﬁ
);

3366 
row
->
œ˝_cuºít
[row->
n_œ˝_cuºít
] = 
d©um
->
keys
[
i
].
boﬁón
;

3367 
row
->
n_œ˝_cuºít
++;

3369 
	}
}

3372 
	$ov§ec_öãrÁ˚_∑r£_lök_ª£ts
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

3374 
ov§ec_öãrÁ˚
 *
row
 = 
	`ov§ec_öãrÁ˚_ˇ°
(
row_
);

3375 
size_t
 
n
 = 
	`MIN
(1, 
d©um
->n);

3376 
size_t
 
i
;

3378 
	`as£π
(
öôed
);

3379 
row
->
lök_ª£ts
 = 
NULL
;

3380 
row
->
n_lök_ª£ts
 = 0;

3381 
i
 = 0; i < 
n
; i++) {

3382 i‡(!
row
->
n_lök_ª£ts
) {

3383 
row
->
lök_ª£ts
 = 
	`xmÆloc
(
n
 *  *row->link_resets);

3385 
row
->
lök_ª£ts
[row->
n_lök_ª£ts
] = 
d©um
->
keys
[
i
].
öãgî
;

3386 
row
->
n_lök_ª£ts
++;

3388 
	}
}

3391 
	$ov§ec_öãrÁ˚_∑r£_lök_•ìd
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

3393 
ov§ec_öãrÁ˚
 *
row
 = 
	`ov§ec_öãrÁ˚_ˇ°
(
row_
);

3394 
size_t
 
n
 = 
	`MIN
(1, 
d©um
->n);

3395 
size_t
 
i
;

3397 
	`as£π
(
öôed
);

3398 
row
->
lök_•ìd
 = 
NULL
;

3399 
row
->
n_lök_•ìd
 = 0;

3400 
i
 = 0; i < 
n
; i++) {

3401 i‡(!
row
->
n_lök_•ìd
) {

3402 
row
->
lök_•ìd
 = 
	`xmÆloc
(
n
 *  *row->link_speed);

3404 
row
->
lök_•ìd
[row->
n_lök_•ìd
] = 
d©um
->
keys
[
i
].
öãgî
;

3405 
row
->
n_lök_•ìd
++;

3407 
	}
}

3410 
	$ov§ec_öãrÁ˚_∑r£_lök_°©e
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

3412 
ov§ec_öãrÁ˚
 *
row
 = 
	`ov§ec_öãrÁ˚_ˇ°
(
row_
);

3414 
	`as£π
(
öôed
);

3415 i‡(
d©um
->
n
 >= 1) {

3416 
row
->
lök_°©e
 = 
d©um
->
keys
[0].
°rög
;

3418 
row
->
lök_°©e
 = 
NULL
;

3420 
	}
}

3423 
	$ov§ec_öãrÁ˚_∑r£_mac
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

3425 
ov§ec_öãrÁ˚
 *
row
 = 
	`ov§ec_öãrÁ˚_ˇ°
(
row_
);

3427 
	`as£π
(
öôed
);

3428 i‡(
d©um
->
n
 >= 1) {

3429 
row
->
mac
 = 
d©um
->
keys
[0].
°rög
;

3431 
row
->
mac
 = 
NULL
;

3433 
	}
}

3436 
	$ov§ec_öãrÁ˚_∑r£_mtu
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

3438 
ov§ec_öãrÁ˚
 *
row
 = 
	`ov§ec_öãrÁ˚_ˇ°
(
row_
);

3439 
size_t
 
n
 = 
	`MIN
(1, 
d©um
->n);

3440 
size_t
 
i
;

3442 
	`as£π
(
öôed
);

3443 
row
->
mtu
 = 
NULL
;

3444 
row
->
n_mtu
 = 0;

3445 
i
 = 0; i < 
n
; i++) {

3446 i‡(!
row
->
n_mtu
) {

3447 
row
->
mtu
 = 
	`xmÆloc
(
n
 *  *row->mtu);

3449 
row
->
mtu
[row->
n_mtu
] = 
d©um
->
keys
[
i
].
öãgî
;

3450 
row
->
n_mtu
++;

3452 
	}
}

3455 
	$ov§ec_öãrÁ˚_∑r£_«me
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

3457 
ov§ec_öãrÁ˚
 *
row
 = 
	`ov§ec_öãrÁ˚_ˇ°
(
row_
);

3459 
	`as£π
(
öôed
);

3460 i‡(
d©um
->
n
 >= 1) {

3461 
row
->
«me
 = 
d©um
->
keys
[0].
°rög
;

3463 
row
->
«me
 = "";

3465 
	}
}

3468 
	$ov§ec_öãrÁ˚_∑r£_oÂ‹t
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

3470 
ov§ec_öãrÁ˚
 *
row
 = 
	`ov§ec_öãrÁ˚_ˇ°
(
row_
);

3471 
size_t
 
n
 = 
	`MIN
(1, 
d©um
->n);

3472 
size_t
 
i
;

3474 
	`as£π
(
öôed
);

3475 
row
->
oÂ‹t
 = 
NULL
;

3476 
row
->
n_oÂ‹t
 = 0;

3477 
i
 = 0; i < 
n
; i++) {

3478 i‡(!
row
->
n_oÂ‹t
) {

3479 
row
->
oÂ‹t
 = 
	`xmÆloc
(
n
 *  *row->ofport);

3481 
row
->
oÂ‹t
[row->
n_oÂ‹t
] = 
d©um
->
keys
[
i
].
öãgî
;

3482 
row
->
n_oÂ‹t
++;

3484 
	}
}

3487 
	$ov§ec_öãrÁ˚_∑r£_›ti⁄s
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

3489 
ov§ec_öãrÁ˚
 *
row
 = 
	`ov§ec_öãrÁ˚_ˇ°
(
row_
);

3490 
size_t
 
i
;

3492 
	`as£π
(
öôed
);

3493 
	`sm≠_öô
(&
row
->
›ti⁄s
);

3494 
i
 = 0; i < 
d©um
->
n
; i++) {

3495 
	`sm≠_add
(&
row
->
›ti⁄s
,

3496 
d©um
->
keys
[
i
].
°rög
,

3497 
d©um
->
vÆues
[
i
].
°rög
);

3499 
	}
}

3502 
	$ov§ec_öãrÁ˚_∑r£_Ÿhî_c⁄fig
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

3504 
ov§ec_öãrÁ˚
 *
row
 = 
	`ov§ec_öãrÁ˚_ˇ°
(
row_
);

3505 
size_t
 
i
;

3507 
	`as£π
(
öôed
);

3508 
	`sm≠_öô
(&
row
->
Ÿhî_c⁄fig
);

3509 
i
 = 0; i < 
d©um
->
n
; i++) {

3510 
	`sm≠_add
(&
row
->
Ÿhî_c⁄fig
,

3511 
d©um
->
keys
[
i
].
°rög
,

3512 
d©um
->
vÆues
[
i
].
°rög
);

3514 
	}
}

3517 
	$ov§ec_öãrÁ˚_∑r£_°©i°ics
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

3519 
ov§ec_öãrÁ˚
 *
row
 = 
	`ov§ec_öãrÁ˚_ˇ°
(
row_
);

3520 
size_t
 
i
;

3522 
	`as£π
(
öôed
);

3523 
row
->
key_°©i°ics
 = 
NULL
;

3524 
row
->
vÆue_°©i°ics
 = 
NULL
;

3525 
row
->
n_°©i°ics
 = 0;

3526 
i
 = 0; i < 
d©um
->
n
; i++) {

3527 i‡(!
row
->
n_°©i°ics
) {

3528 
row
->
key_°©i°ics
 = 
	`xmÆloc
(
d©um
->
n
 *  *row->key_statistics);

3529 
row
->
vÆue_°©i°ics
 = 
	`xmÆloc
(
d©um
->
n
 *  *row->value_statistics);

3531 
row
->
key_°©i°ics
[row->
n_°©i°ics
] = 
d©um
->
keys
[
i
].
°rög
;

3532 
row
->
vÆue_°©i°ics
[row->
n_°©i°ics
] = 
d©um
->
vÆues
[
i
].
öãgî
;

3533 
row
->
n_°©i°ics
++;

3535 
	}
}

3538 
	$ov§ec_öãrÁ˚_∑r£_°©us
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

3540 
ov§ec_öãrÁ˚
 *
row
 = 
	`ov§ec_öãrÁ˚_ˇ°
(
row_
);

3541 
size_t
 
i
;

3543 
	`as£π
(
öôed
);

3544 
	`sm≠_öô
(&
row
->
°©us
);

3545 
i
 = 0; i < 
d©um
->
n
; i++) {

3546 
	`sm≠_add
(&
row
->
°©us
,

3547 
d©um
->
keys
[
i
].
°rög
,

3548 
d©um
->
vÆues
[
i
].
°rög
);

3550 
	}
}

3553 
	$ov§ec_öãrÁ˚_∑r£_ty≥
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

3555 
ov§ec_öãrÁ˚
 *
row
 = 
	`ov§ec_öãrÁ˚_ˇ°
(
row_
);

3557 
	`as£π
(
öôed
);

3558 i‡(
d©um
->
n
 >= 1) {

3559 
row
->
ty≥
 = 
d©um
->
keys
[0].
°rög
;

3561 
row
->
ty≥
 = "";

3563 
	}
}

3566 
	$ov§ec_öãrÁ˚_u≈¨£_admö_°©e
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

3569 
	}
}

3572 
	$ov§ec_öãrÁ˚_u≈¨£_cfm_Áu…
(
ovsdb_idl_row
 *
row_
)

3574 
ov§ec_öãrÁ˚
 *
row
 = 
	`ov§ec_öãrÁ˚_ˇ°
(
row_
);

3576 
	`as£π
(
öôed
);

3577 
	`‰ì
(
row
->
cfm_Áu…
);

3578 
	}
}

3581 
	$ov§ec_öãrÁ˚_u≈¨£_cfm_Áu…_°©us
(
ovsdb_idl_row
 *
row_
)

3583 
ov§ec_öãrÁ˚
 *
row
 = 
	`ov§ec_öãrÁ˚_ˇ°
(
row_
);

3585 
	`as£π
(
öôed
);

3586 
	`‰ì
(
row
->
cfm_Áu…_°©us
);

3587 
	}
}

3590 
	$ov§ec_öãrÁ˚_u≈¨£_cfm_hó…h
(
ovsdb_idl_row
 *
row_
)

3592 
ov§ec_öãrÁ˚
 *
row
 = 
	`ov§ec_öãrÁ˚_ˇ°
(
row_
);

3594 
	`as£π
(
öôed
);

3595 
	`‰ì
(
row
->
cfm_hó…h
);

3596 
	}
}

3599 
	$ov§ec_öãrÁ˚_u≈¨£_cfm_mpid
(
ovsdb_idl_row
 *
row_
)

3601 
ov§ec_öãrÁ˚
 *
row
 = 
	`ov§ec_öãrÁ˚_ˇ°
(
row_
);

3603 
	`as£π
(
öôed
);

3604 
	`‰ì
(
row
->
cfm_mpid
);

3605 
	}
}

3608 
	$ov§ec_öãrÁ˚_u≈¨£_cfm_ªmŸe_mpids
(
ovsdb_idl_row
 *
row_
)

3610 
ov§ec_öãrÁ˚
 *
row
 = 
	`ov§ec_öãrÁ˚_ˇ°
(
row_
);

3612 
	`as£π
(
öôed
);

3613 
	`‰ì
(
row
->
cfm_ªmŸe_mpids
);

3614 
	}
}

3617 
	$ov§ec_öãrÁ˚_u≈¨£_cfm_ªmŸe_›°©e
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

3620 
	}
}

3623 
	$ov§ec_öãrÁ˚_u≈¨£_du∂ex
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

3626 
	}
}

3629 
	$ov§ec_öãrÁ˚_u≈¨£_exã∫Æ_ids
(
ovsdb_idl_row
 *
row_
)

3631 
ov§ec_öãrÁ˚
 *
row
 = 
	`ov§ec_öãrÁ˚_ˇ°
(
row_
);

3633 
	`as£π
(
öôed
);

3634 
	`sm≠_de°roy
(&
row
->
exã∫Æ_ids
);

3635 
	}
}

3638 
	$ov§ec_öãrÁ˚_u≈¨£_ögªss_pﬁicög_bur°
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

3641 
	}
}

3644 
	$ov§ec_öãrÁ˚_u≈¨£_ögªss_pﬁicög_øã
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

3647 
	}
}

3650 
	$ov§ec_öãrÁ˚_u≈¨£_œ˝_cuºít
(
ovsdb_idl_row
 *
row_
)

3652 
ov§ec_öãrÁ˚
 *
row
 = 
	`ov§ec_öãrÁ˚_ˇ°
(
row_
);

3654 
	`as£π
(
öôed
);

3655 
	`‰ì
(
row
->
œ˝_cuºít
);

3656 
	}
}

3659 
	$ov§ec_öãrÁ˚_u≈¨£_lök_ª£ts
(
ovsdb_idl_row
 *
row_
)

3661 
ov§ec_öãrÁ˚
 *
row
 = 
	`ov§ec_öãrÁ˚_ˇ°
(
row_
);

3663 
	`as£π
(
öôed
);

3664 
	`‰ì
(
row
->
lök_ª£ts
);

3665 
	}
}

3668 
	$ov§ec_öãrÁ˚_u≈¨£_lök_•ìd
(
ovsdb_idl_row
 *
row_
)

3670 
ov§ec_öãrÁ˚
 *
row
 = 
	`ov§ec_öãrÁ˚_ˇ°
(
row_
);

3672 
	`as£π
(
öôed
);

3673 
	`‰ì
(
row
->
lök_•ìd
);

3674 
	}
}

3677 
	$ov§ec_öãrÁ˚_u≈¨£_lök_°©e
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

3680 
	}
}

3683 
	$ov§ec_öãrÁ˚_u≈¨£_mac
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

3686 
	}
}

3689 
	$ov§ec_öãrÁ˚_u≈¨£_mtu
(
ovsdb_idl_row
 *
row_
)

3691 
ov§ec_öãrÁ˚
 *
row
 = 
	`ov§ec_öãrÁ˚_ˇ°
(
row_
);

3693 
	`as£π
(
öôed
);

3694 
	`‰ì
(
row
->
mtu
);

3695 
	}
}

3698 
	$ov§ec_öãrÁ˚_u≈¨£_«me
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

3701 
	}
}

3704 
	$ov§ec_öãrÁ˚_u≈¨£_oÂ‹t
(
ovsdb_idl_row
 *
row_
)

3706 
ov§ec_öãrÁ˚
 *
row
 = 
	`ov§ec_öãrÁ˚_ˇ°
(
row_
);

3708 
	`as£π
(
öôed
);

3709 
	`‰ì
(
row
->
oÂ‹t
);

3710 
	}
}

3713 
	$ov§ec_öãrÁ˚_u≈¨£_›ti⁄s
(
ovsdb_idl_row
 *
row_
)

3715 
ov§ec_öãrÁ˚
 *
row
 = 
	`ov§ec_öãrÁ˚_ˇ°
(
row_
);

3717 
	`as£π
(
öôed
);

3718 
	`sm≠_de°roy
(&
row
->
›ti⁄s
);

3719 
	}
}

3722 
	$ov§ec_öãrÁ˚_u≈¨£_Ÿhî_c⁄fig
(
ovsdb_idl_row
 *
row_
)

3724 
ov§ec_öãrÁ˚
 *
row
 = 
	`ov§ec_öãrÁ˚_ˇ°
(
row_
);

3726 
	`as£π
(
öôed
);

3727 
	`sm≠_de°roy
(&
row
->
Ÿhî_c⁄fig
);

3728 
	}
}

3731 
	$ov§ec_öãrÁ˚_u≈¨£_°©i°ics
(
ovsdb_idl_row
 *
row_
)

3733 
ov§ec_öãrÁ˚
 *
row
 = 
	`ov§ec_öãrÁ˚_ˇ°
(
row_
);

3735 
	`as£π
(
öôed
);

3736 
	`‰ì
(
row
->
key_°©i°ics
);

3737 
	`‰ì
(
row
->
vÆue_°©i°ics
);

3738 
	}
}

3741 
	$ov§ec_öãrÁ˚_u≈¨£_°©us
(
ovsdb_idl_row
 *
row_
)

3743 
ov§ec_öãrÁ˚
 *
row
 = 
	`ov§ec_öãrÁ˚_ˇ°
(
row_
);

3745 
	`as£π
(
öôed
);

3746 
	`sm≠_de°roy
(&
row
->
°©us
);

3747 
	}
}

3750 
	$ov§ec_öãrÁ˚_u≈¨£_ty≥
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

3753 
	}
}

3756 
	$ov§ec_öãrÁ˚_öô__
(
ovsdb_idl_row
 *
row
)

3758 
	`ov§ec_öãrÁ˚_öô
(
	`ov§ec_öãrÁ˚_ˇ°
(
row
));

3759 
	}
}

3762 
	$ov§ec_öãrÁ˚_öô
(
ov§ec_öãrÁ˚
 *
row
)

3764 
	`mem£t
(
row
, 0,  *row);

3765 
	`sm≠_öô
(&
row
->
exã∫Æ_ids
);

3766 
	`sm≠_öô
(&
row
->
›ti⁄s
);

3767 
	`sm≠_öô
(&
row
->
Ÿhî_c⁄fig
);

3768 
	`sm≠_öô
(&
row
->
°©us
);

3769 
	}
}

3771 c⁄° 
ov§ec_öãrÁ˚
 *

3772 
	$ov§ec_öãrÁ˚_fú°
(c⁄° 
ovsdb_idl
 *
idl
)

3774  
	`ov§ec_öãrÁ˚_ˇ°
(
	`ovsdb_idl_fú°_row
(
idl
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_INTERFACE
]));

3775 
	}
}

3777 c⁄° 
ov§ec_öãrÁ˚
 *

3778 
	$ov§ec_öãrÁ˚_√xt
(c⁄° 
ov§ec_öãrÁ˚
 *
row
)

3780  
	`ov§ec_öãrÁ˚_ˇ°
(
	`ovsdb_idl_√xt_row
(&
row
->
hódî_
));

3781 
	}
}

3784 
	$ov§ec_öãrÁ˚_dñëe
(c⁄° 
ov§ec_öãrÁ˚
 *
row
)

3786 
	`ovsdb_idl_txn_dñëe
(&
row
->
hódî_
);

3787 
	}
}

3789 
ov§ec_öãrÁ˚
 *

3790 
	$ov§ec_öãrÁ˚_ö£π
(
ovsdb_idl_txn
 *
txn
)

3792  
	`ov§ec_öãrÁ˚_ˇ°
(
	`ovsdb_idl_txn_ö£π
(
txn
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_INTERFACE
], 
NULL
));

3793 
	}
}

3797 
	$ov§ec_öãrÁ˚_vîify_admö_°©e
(c⁄° 
ov§ec_öãrÁ˚
 *
row
)

3799 
	`as£π
(
öôed
);

3800 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_ADMIN_STATE
]);

3801 
	}
}

3804 
	$ov§ec_öãrÁ˚_vîify_cfm_Áu…
(c⁄° 
ov§ec_öãrÁ˚
 *
row
)

3806 
	`as£π
(
öôed
);

3807 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_CFM_FAULT
]);

3808 
	}
}

3811 
	$ov§ec_öãrÁ˚_vîify_cfm_Áu…_°©us
(c⁄° 
ov§ec_öãrÁ˚
 *
row
)

3813 
	`as£π
(
öôed
);

3814 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_CFM_FAULT_STATUS
]);

3815 
	}
}

3818 
	$ov§ec_öãrÁ˚_vîify_cfm_hó…h
(c⁄° 
ov§ec_öãrÁ˚
 *
row
)

3820 
	`as£π
(
öôed
);

3821 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_CFM_HEALTH
]);

3822 
	}
}

3825 
	$ov§ec_öãrÁ˚_vîify_cfm_mpid
(c⁄° 
ov§ec_öãrÁ˚
 *
row
)

3827 
	`as£π
(
öôed
);

3828 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_CFM_MPID
]);

3829 
	}
}

3832 
	$ov§ec_öãrÁ˚_vîify_cfm_ªmŸe_mpids
(c⁄° 
ov§ec_öãrÁ˚
 *
row
)

3834 
	`as£π
(
öôed
);

3835 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_CFM_REMOTE_MPIDS
]);

3836 
	}
}

3839 
	$ov§ec_öãrÁ˚_vîify_cfm_ªmŸe_›°©e
(c⁄° 
ov§ec_öãrÁ˚
 *
row
)

3841 
	`as£π
(
öôed
);

3842 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_CFM_REMOTE_OPSTATE
]);

3843 
	}
}

3846 
	$ov§ec_öãrÁ˚_vîify_du∂ex
(c⁄° 
ov§ec_öãrÁ˚
 *
row
)

3848 
	`as£π
(
öôed
);

3849 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_DUPLEX
]);

3850 
	}
}

3853 
	$ov§ec_öãrÁ˚_vîify_exã∫Æ_ids
(c⁄° 
ov§ec_öãrÁ˚
 *
row
)

3855 
	`as£π
(
öôed
);

3856 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_EXTERNAL_IDS
]);

3857 
	}
}

3860 
	$ov§ec_öãrÁ˚_vîify_ögªss_pﬁicög_bur°
(c⁄° 
ov§ec_öãrÁ˚
 *
row
)

3862 
	`as£π
(
öôed
);

3863 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_INGRESS_POLICING_BURST
]);

3864 
	}
}

3867 
	$ov§ec_öãrÁ˚_vîify_ögªss_pﬁicög_øã
(c⁄° 
ov§ec_öãrÁ˚
 *
row
)

3869 
	`as£π
(
öôed
);

3870 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_INGRESS_POLICING_RATE
]);

3871 
	}
}

3874 
	$ov§ec_öãrÁ˚_vîify_œ˝_cuºít
(c⁄° 
ov§ec_öãrÁ˚
 *
row
)

3876 
	`as£π
(
öôed
);

3877 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_LACP_CURRENT
]);

3878 
	}
}

3881 
	$ov§ec_öãrÁ˚_vîify_lök_ª£ts
(c⁄° 
ov§ec_öãrÁ˚
 *
row
)

3883 
	`as£π
(
öôed
);

3884 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_LINK_RESETS
]);

3885 
	}
}

3888 
	$ov§ec_öãrÁ˚_vîify_lök_•ìd
(c⁄° 
ov§ec_öãrÁ˚
 *
row
)

3890 
	`as£π
(
öôed
);

3891 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_LINK_SPEED
]);

3892 
	}
}

3895 
	$ov§ec_öãrÁ˚_vîify_lök_°©e
(c⁄° 
ov§ec_öãrÁ˚
 *
row
)

3897 
	`as£π
(
öôed
);

3898 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_LINK_STATE
]);

3899 
	}
}

3902 
	$ov§ec_öãrÁ˚_vîify_mac
(c⁄° 
ov§ec_öãrÁ˚
 *
row
)

3904 
	`as£π
(
öôed
);

3905 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_MAC
]);

3906 
	}
}

3909 
	$ov§ec_öãrÁ˚_vîify_mtu
(c⁄° 
ov§ec_öãrÁ˚
 *
row
)

3911 
	`as£π
(
öôed
);

3912 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_MTU
]);

3913 
	}
}

3916 
	$ov§ec_öãrÁ˚_vîify_«me
(c⁄° 
ov§ec_öãrÁ˚
 *
row
)

3918 
	`as£π
(
öôed
);

3919 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_NAME
]);

3920 
	}
}

3923 
	$ov§ec_öãrÁ˚_vîify_oÂ‹t
(c⁄° 
ov§ec_öãrÁ˚
 *
row
)

3925 
	`as£π
(
öôed
);

3926 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_OFPORT
]);

3927 
	}
}

3930 
	$ov§ec_öãrÁ˚_vîify_›ti⁄s
(c⁄° 
ov§ec_öãrÁ˚
 *
row
)

3932 
	`as£π
(
öôed
);

3933 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_OPTIONS
]);

3934 
	}
}

3937 
	$ov§ec_öãrÁ˚_vîify_Ÿhî_c⁄fig
(c⁄° 
ov§ec_öãrÁ˚
 *
row
)

3939 
	`as£π
(
öôed
);

3940 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_OTHER_CONFIG
]);

3941 
	}
}

3944 
	$ov§ec_öãrÁ˚_vîify_°©i°ics
(c⁄° 
ov§ec_öãrÁ˚
 *
row
)

3946 
	`as£π
(
öôed
);

3947 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_STATISTICS
]);

3948 
	}
}

3951 
	$ov§ec_öãrÁ˚_vîify_°©us
(c⁄° 
ov§ec_öãrÁ˚
 *
row
)

3953 
	`as£π
(
öôed
);

3954 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_STATUS
]);

3955 
	}
}

3958 
	$ov§ec_öãrÁ˚_vîify_ty≥
(c⁄° 
ov§ec_öãrÁ˚
 *
row
)

3960 
	`as£π
(
öôed
);

3961 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_TYPE
]);

3962 
	}
}

3979 c⁄° 
ovsdb_d©um
 *

3980 
	$ov§ec_öãrÁ˚_gë_admö_°©e
(c⁄° 
ov§ec_öãrÁ˚
 *
row
,

3981 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

3983 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

3984  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁ_admö_°©e
);

3985 
	}
}

4002 c⁄° 
ovsdb_d©um
 *

4003 
	$ov§ec_öãrÁ˚_gë_cfm_Áu…
(c⁄° 
ov§ec_öãrÁ˚
 *
row
,

4004 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

4006 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_BOOLEAN
);

4007  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁ_cfm_Áu…
);

4008 
	}
}

4025 c⁄° 
ovsdb_d©um
 *

4026 
	$ov§ec_öãrÁ˚_gë_cfm_Áu…_°©us
(c⁄° 
ov§ec_öãrÁ˚
 *
row
,

4027 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

4029 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

4030  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁ_cfm_Áu…_°©us
);

4031 
	}
}

4048 c⁄° 
ovsdb_d©um
 *

4049 
	$ov§ec_öãrÁ˚_gë_cfm_hó…h
(c⁄° 
ov§ec_öãrÁ˚
 *
row
,

4050 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

4052 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_INTEGER
);

4053  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁ_cfm_hó…h
);

4054 
	}
}

4071 c⁄° 
ovsdb_d©um
 *

4072 
	$ov§ec_öãrÁ˚_gë_cfm_mpid
(c⁄° 
ov§ec_öãrÁ˚
 *
row
,

4073 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

4075 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_INTEGER
);

4076  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁ_cfm_mpid
);

4077 
	}
}

4094 c⁄° 
ovsdb_d©um
 *

4095 
	$ov§ec_öãrÁ˚_gë_cfm_ªmŸe_mpids
(c⁄° 
ov§ec_öãrÁ˚
 *
row
,

4096 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

4098 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_INTEGER
);

4099  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁ_cfm_ªmŸe_mpids
);

4100 
	}
}

4117 c⁄° 
ovsdb_d©um
 *

4118 
	$ov§ec_öãrÁ˚_gë_cfm_ªmŸe_›°©e
(c⁄° 
ov§ec_öãrÁ˚
 *
row
,

4119 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

4121 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

4122  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁ_cfm_ªmŸe_›°©e
);

4123 
	}
}

4140 c⁄° 
ovsdb_d©um
 *

4141 
	$ov§ec_öãrÁ˚_gë_du∂ex
(c⁄° 
ov§ec_öãrÁ˚
 *
row
,

4142 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

4144 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

4145  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁ_du∂ex
);

4146 
	}
}

4164 c⁄° 
ovsdb_d©um
 *

4165 
	$ov§ec_öãrÁ˚_gë_exã∫Æ_ids
(c⁄° 
ov§ec_öãrÁ˚
 *
row
,

4166 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
,

4167 
ovsdb_©omic_ty≥
 
vÆue_ty≥
 
OVS_UNUSED
)

4169 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

4170 
	`as£π
(
vÆue_ty≥
 =
OVSDB_TYPE_STRING
);

4171  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁ_exã∫Æ_ids
);

4172 
	}
}

4189 c⁄° 
ovsdb_d©um
 *

4190 
	$ov§ec_öãrÁ˚_gë_ögªss_pﬁicög_bur°
(c⁄° 
ov§ec_öãrÁ˚
 *
row
,

4191 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

4193 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_INTEGER
);

4194  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁ_ögªss_pﬁicög_bur°
);

4195 
	}
}

4212 c⁄° 
ovsdb_d©um
 *

4213 
	$ov§ec_öãrÁ˚_gë_ögªss_pﬁicög_øã
(c⁄° 
ov§ec_öãrÁ˚
 *
row
,

4214 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

4216 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_INTEGER
);

4217  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁ_ögªss_pﬁicög_øã
);

4218 
	}
}

4235 c⁄° 
ovsdb_d©um
 *

4236 
	$ov§ec_öãrÁ˚_gë_œ˝_cuºít
(c⁄° 
ov§ec_öãrÁ˚
 *
row
,

4237 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

4239 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_BOOLEAN
);

4240  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁ_œ˝_cuºít
);

4241 
	}
}

4258 c⁄° 
ovsdb_d©um
 *

4259 
	$ov§ec_öãrÁ˚_gë_lök_ª£ts
(c⁄° 
ov§ec_öãrÁ˚
 *
row
,

4260 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

4262 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_INTEGER
);

4263  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁ_lök_ª£ts
);

4264 
	}
}

4281 c⁄° 
ovsdb_d©um
 *

4282 
	$ov§ec_öãrÁ˚_gë_lök_•ìd
(c⁄° 
ov§ec_öãrÁ˚
 *
row
,

4283 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

4285 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_INTEGER
);

4286  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁ_lök_•ìd
);

4287 
	}
}

4304 c⁄° 
ovsdb_d©um
 *

4305 
	$ov§ec_öãrÁ˚_gë_lök_°©e
(c⁄° 
ov§ec_öãrÁ˚
 *
row
,

4306 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

4308 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

4309  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁ_lök_°©e
);

4310 
	}
}

4327 c⁄° 
ovsdb_d©um
 *

4328 
	$ov§ec_öãrÁ˚_gë_mac
(c⁄° 
ov§ec_öãrÁ˚
 *
row
,

4329 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

4331 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

4332  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁ_mac
);

4333 
	}
}

4350 c⁄° 
ovsdb_d©um
 *

4351 
	$ov§ec_öãrÁ˚_gë_mtu
(c⁄° 
ov§ec_öãrÁ˚
 *
row
,

4352 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

4354 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_INTEGER
);

4355  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁ_mtu
);

4356 
	}
}

4373 c⁄° 
ovsdb_d©um
 *

4374 
	$ov§ec_öãrÁ˚_gë_«me
(c⁄° 
ov§ec_öãrÁ˚
 *
row
,

4375 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

4377 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

4378  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁ_«me
);

4379 
	}
}

4396 c⁄° 
ovsdb_d©um
 *

4397 
	$ov§ec_öãrÁ˚_gë_oÂ‹t
(c⁄° 
ov§ec_öãrÁ˚
 *
row
,

4398 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

4400 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_INTEGER
);

4401  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁ_oÂ‹t
);

4402 
	}
}

4420 c⁄° 
ovsdb_d©um
 *

4421 
	$ov§ec_öãrÁ˚_gë_›ti⁄s
(c⁄° 
ov§ec_öãrÁ˚
 *
row
,

4422 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
,

4423 
ovsdb_©omic_ty≥
 
vÆue_ty≥
 
OVS_UNUSED
)

4425 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

4426 
	`as£π
(
vÆue_ty≥
 =
OVSDB_TYPE_STRING
);

4427  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁ_›ti⁄s
);

4428 
	}
}

4446 c⁄° 
ovsdb_d©um
 *

4447 
	$ov§ec_öãrÁ˚_gë_Ÿhî_c⁄fig
(c⁄° 
ov§ec_öãrÁ˚
 *
row
,

4448 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
,

4449 
ovsdb_©omic_ty≥
 
vÆue_ty≥
 
OVS_UNUSED
)

4451 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

4452 
	`as£π
(
vÆue_ty≥
 =
OVSDB_TYPE_STRING
);

4453  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁ_Ÿhî_c⁄fig
);

4454 
	}
}

4472 c⁄° 
ovsdb_d©um
 *

4473 
	$ov§ec_öãrÁ˚_gë_°©i°ics
(c⁄° 
ov§ec_öãrÁ˚
 *
row
,

4474 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
,

4475 
ovsdb_©omic_ty≥
 
vÆue_ty≥
 
OVS_UNUSED
)

4477 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

4478 
	`as£π
(
vÆue_ty≥
 =
OVSDB_TYPE_INTEGER
);

4479  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁ_°©i°ics
);

4480 
	}
}

4498 c⁄° 
ovsdb_d©um
 *

4499 
	$ov§ec_öãrÁ˚_gë_°©us
(c⁄° 
ov§ec_öãrÁ˚
 *
row
,

4500 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
,

4501 
ovsdb_©omic_ty≥
 
vÆue_ty≥
 
OVS_UNUSED
)

4503 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

4504 
	`as£π
(
vÆue_ty≥
 =
OVSDB_TYPE_STRING
);

4505  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁ_°©us
);

4506 
	}
}

4523 c⁄° 
ovsdb_d©um
 *

4524 
	$ov§ec_öãrÁ˚_gë_ty≥
(c⁄° 
ov§ec_öãrÁ˚
 *
row
,

4525 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

4527 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

4528  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁ_ty≥
);

4529 
	}
}

4532 
	$ov§ec_öãrÁ˚_£t_admö_°©e
(c⁄° 
ov§ec_öãrÁ˚
 *
row
, c⁄° *
admö_°©e
)

4534 
ovsdb_d©um
 
d©um
;

4536 
	`as£π
(
öôed
);

4537 i‡(
admö_°©e
) {

4538 
d©um
.
n
 = 1;

4539 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

4540 
d©um
.
keys
[0].
°rög
 = 
	`x°rdup
(
admö_°©e
);

4542 
d©um
.
n
 = 0;

4543 
d©um
.
keys
 = 
NULL
;

4545 
d©um
.
vÆues
 = 
NULL
;

4546 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_ADMIN_STATE
], &
d©um
);

4547 
	}
}

4550 
	$ov§ec_öãrÁ˚_£t_cfm_Áu…
(c⁄° 
ov§ec_öãrÁ˚
 *
row
, c⁄° 
boﬁ
 *
cfm_Áu…
, 
size_t
 
n_cfm_Áu…
)

4552 
ovsdb_d©um
 
d©um
;

4553 
size_t
 
i
;

4555 
	`as£π
(
öôed
);

4556 
d©um
.
n
 = 
n_cfm_Áu…
;

4557 
d©um
.
keys
 = 
	`xmÆloc
(
n_cfm_Áu…
 *  *datum.keys);

4558 
d©um
.
vÆues
 = 
NULL
;

4559 
i
 = 0; i < 
n_cfm_Áu…
; i++) {

4560 
d©um
.
keys
[
i
].
boﬁón
 = 
cfm_Áu…
[i];

4562 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_BOOLEAN
, 
OVSDB_TYPE_VOID
);

4563 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_CFM_FAULT
], &
d©um
);

4564 
	}
}

4567 
	$ov§ec_öãrÁ˚_£t_cfm_Áu…_°©us
(c⁄° 
ov§ec_öãrÁ˚
 *
row
, **
cfm_Áu…_°©us
, 
size_t
 
n_cfm_Áu…_°©us
)

4569 
ovsdb_d©um
 
d©um
;

4570 
size_t
 
i
;

4572 
	`as£π
(
öôed
);

4573 
d©um
.
n
 = 
n_cfm_Áu…_°©us
;

4574 
d©um
.
keys
 = 
	`xmÆloc
(
n_cfm_Áu…_°©us
 *  *datum.keys);

4575 
d©um
.
vÆues
 = 
NULL
;

4576 
i
 = 0; i < 
n_cfm_Áu…_°©us
; i++) {

4577 
d©um
.
keys
[
i
].
°rög
 = 
	`x°rdup
(
cfm_Áu…_°©us
[i]);

4579 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_STRING
, 
OVSDB_TYPE_VOID
);

4580 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_CFM_FAULT_STATUS
], &
d©um
);

4581 
	}
}

4584 
	$ov§ec_öãrÁ˚_£t_cfm_hó…h
(c⁄° 
ov§ec_öãrÁ˚
 *
row
, c⁄° 
öt64_t
 *
cfm_hó…h
, 
size_t
 
n_cfm_hó…h
)

4586 
ovsdb_d©um
 
d©um
;

4587 
size_t
 
i
;

4589 
	`as£π
(
öôed
);

4590 
d©um
.
n
 = 
n_cfm_hó…h
;

4591 
d©um
.
keys
 = 
	`xmÆloc
(
n_cfm_hó…h
 *  *datum.keys);

4592 
d©um
.
vÆues
 = 
NULL
;

4593 
i
 = 0; i < 
n_cfm_hó…h
; i++) {

4594 
d©um
.
keys
[
i
].
öãgî
 = 
cfm_hó…h
[i];

4596 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_INTEGER
, 
OVSDB_TYPE_VOID
);

4597 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_CFM_HEALTH
], &
d©um
);

4598 
	}
}

4601 
	$ov§ec_öãrÁ˚_£t_cfm_mpid
(c⁄° 
ov§ec_öãrÁ˚
 *
row
, c⁄° 
öt64_t
 *
cfm_mpid
, 
size_t
 
n_cfm_mpid
)

4603 
ovsdb_d©um
 
d©um
;

4604 
size_t
 
i
;

4606 
	`as£π
(
öôed
);

4607 
d©um
.
n
 = 
n_cfm_mpid
;

4608 
d©um
.
keys
 = 
	`xmÆloc
(
n_cfm_mpid
 *  *datum.keys);

4609 
d©um
.
vÆues
 = 
NULL
;

4610 
i
 = 0; i < 
n_cfm_mpid
; i++) {

4611 
d©um
.
keys
[
i
].
öãgî
 = 
cfm_mpid
[i];

4613 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_INTEGER
, 
OVSDB_TYPE_VOID
);

4614 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_CFM_MPID
], &
d©um
);

4615 
	}
}

4618 
	$ov§ec_öãrÁ˚_£t_cfm_ªmŸe_mpids
(c⁄° 
ov§ec_öãrÁ˚
 *
row
, c⁄° 
öt64_t
 *
cfm_ªmŸe_mpids
, 
size_t
 
n_cfm_ªmŸe_mpids
)

4620 
ovsdb_d©um
 
d©um
;

4621 
size_t
 
i
;

4623 
	`as£π
(
öôed
);

4624 
d©um
.
n
 = 
n_cfm_ªmŸe_mpids
;

4625 
d©um
.
keys
 = 
	`xmÆloc
(
n_cfm_ªmŸe_mpids
 *  *datum.keys);

4626 
d©um
.
vÆues
 = 
NULL
;

4627 
i
 = 0; i < 
n_cfm_ªmŸe_mpids
; i++) {

4628 
d©um
.
keys
[
i
].
öãgî
 = 
cfm_ªmŸe_mpids
[i];

4630 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_INTEGER
, 
OVSDB_TYPE_VOID
);

4631 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_CFM_REMOTE_MPIDS
], &
d©um
);

4632 
	}
}

4635 
	$ov§ec_öãrÁ˚_£t_cfm_ªmŸe_›°©e
(c⁄° 
ov§ec_öãrÁ˚
 *
row
, c⁄° *
cfm_ªmŸe_›°©e
)

4637 
ovsdb_d©um
 
d©um
;

4639 
	`as£π
(
öôed
);

4640 i‡(
cfm_ªmŸe_›°©e
) {

4641 
d©um
.
n
 = 1;

4642 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

4643 
d©um
.
keys
[0].
°rög
 = 
	`x°rdup
(
cfm_ªmŸe_›°©e
);

4645 
d©um
.
n
 = 0;

4646 
d©um
.
keys
 = 
NULL
;

4648 
d©um
.
vÆues
 = 
NULL
;

4649 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_CFM_REMOTE_OPSTATE
], &
d©um
);

4650 
	}
}

4653 
	$ov§ec_öãrÁ˚_£t_du∂ex
(c⁄° 
ov§ec_öãrÁ˚
 *
row
, c⁄° *
du∂ex
)

4655 
ovsdb_d©um
 
d©um
;

4657 
	`as£π
(
öôed
);

4658 i‡(
du∂ex
) {

4659 
d©um
.
n
 = 1;

4660 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

4661 
d©um
.
keys
[0].
°rög
 = 
	`x°rdup
(
du∂ex
);

4663 
d©um
.
n
 = 0;

4664 
d©um
.
keys
 = 
NULL
;

4666 
d©um
.
vÆues
 = 
NULL
;

4667 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_DUPLEX
], &
d©um
);

4668 
	}
}

4671 
	$ov§ec_öãrÁ˚_£t_exã∫Æ_ids
(c⁄° 
ov§ec_öãrÁ˚
 *
row
, c⁄° 
sm≠
 *smap)

4673 
ovsdb_d©um
 
d©um
;

4675 
	`as£π
(
öôed
);

4676 i‡(
sm≠
) {

4677 
sm≠_node
 *
node
;

4678 
size_t
 
i
;

4680 
d©um
.
n
 = 
	`sm≠_cou¡
(
sm≠
);

4681 
d©um
.
keys
 = 
	`xmÆloc
(d©um.
n
 *  *datum.keys);

4682 
d©um
.
vÆues
 = 
	`xmÆloc
(d©um.
n
 *  *datum.values);

4684 
i
 = 0;

4685 
	`SMAP_FOR_EACH
 (
node
, 
sm≠
) {

4686 
d©um
.
keys
[
i
].
°rög
 = 
	`x°rdup
(
node
->
key
);

4687 
d©um
.
vÆues
[
i
].
°rög
 = 
	`x°rdup
(
node
->
vÆue
);

4688 
i
++;

4690 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_STRING
, OVSDB_TYPE_STRING);

4692 
	`ovsdb_d©um_öô_em±y
(&
d©um
);

4694 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
,

4695 &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_EXTERNAL_IDS
],

4696 &
d©um
);

4697 
	}
}

4701 
	$ov§ec_öãrÁ˚_£t_ögªss_pﬁicög_bur°
(c⁄° 
ov§ec_öãrÁ˚
 *
row
, 
öt64_t
 
ögªss_pﬁicög_bur°
)

4703 
ovsdb_d©um
 
d©um
;

4705 
	`as£π
(
öôed
);

4706 
d©um
.
n
 = 1;

4707 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

4708 
d©um
.
keys
[0].
öãgî
 = 
ögªss_pﬁicög_bur°
;

4709 
d©um
.
vÆues
 = 
NULL
;

4710 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_INGRESS_POLICING_BURST
], &
d©um
);

4711 
	}
}

4714 
	$ov§ec_öãrÁ˚_£t_ögªss_pﬁicög_øã
(c⁄° 
ov§ec_öãrÁ˚
 *
row
, 
öt64_t
 
ögªss_pﬁicög_øã
)

4716 
ovsdb_d©um
 
d©um
;

4718 
	`as£π
(
öôed
);

4719 
d©um
.
n
 = 1;

4720 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

4721 
d©um
.
keys
[0].
öãgî
 = 
ögªss_pﬁicög_øã
;

4722 
d©um
.
vÆues
 = 
NULL
;

4723 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_INGRESS_POLICING_RATE
], &
d©um
);

4724 
	}
}

4727 
	$ov§ec_öãrÁ˚_£t_œ˝_cuºít
(c⁄° 
ov§ec_öãrÁ˚
 *
row
, c⁄° 
boﬁ
 *
œ˝_cuºít
, 
size_t
 
n_œ˝_cuºít
)

4729 
ovsdb_d©um
 
d©um
;

4730 
size_t
 
i
;

4732 
	`as£π
(
öôed
);

4733 
d©um
.
n
 = 
n_œ˝_cuºít
;

4734 
d©um
.
keys
 = 
	`xmÆloc
(
n_œ˝_cuºít
 *  *datum.keys);

4735 
d©um
.
vÆues
 = 
NULL
;

4736 
i
 = 0; i < 
n_œ˝_cuºít
; i++) {

4737 
d©um
.
keys
[
i
].
boﬁón
 = 
œ˝_cuºít
[i];

4739 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_BOOLEAN
, 
OVSDB_TYPE_VOID
);

4740 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_LACP_CURRENT
], &
d©um
);

4741 
	}
}

4744 
	$ov§ec_öãrÁ˚_£t_lök_ª£ts
(c⁄° 
ov§ec_öãrÁ˚
 *
row
, c⁄° 
öt64_t
 *
lök_ª£ts
, 
size_t
 
n_lök_ª£ts
)

4746 
ovsdb_d©um
 
d©um
;

4747 
size_t
 
i
;

4749 
	`as£π
(
öôed
);

4750 
d©um
.
n
 = 
n_lök_ª£ts
;

4751 
d©um
.
keys
 = 
	`xmÆloc
(
n_lök_ª£ts
 *  *datum.keys);

4752 
d©um
.
vÆues
 = 
NULL
;

4753 
i
 = 0; i < 
n_lök_ª£ts
; i++) {

4754 
d©um
.
keys
[
i
].
öãgî
 = 
lök_ª£ts
[i];

4756 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_INTEGER
, 
OVSDB_TYPE_VOID
);

4757 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_LINK_RESETS
], &
d©um
);

4758 
	}
}

4761 
	$ov§ec_öãrÁ˚_£t_lök_•ìd
(c⁄° 
ov§ec_öãrÁ˚
 *
row
, c⁄° 
öt64_t
 *
lök_•ìd
, 
size_t
 
n_lök_•ìd
)

4763 
ovsdb_d©um
 
d©um
;

4764 
size_t
 
i
;

4766 
	`as£π
(
öôed
);

4767 
d©um
.
n
 = 
n_lök_•ìd
;

4768 
d©um
.
keys
 = 
	`xmÆloc
(
n_lök_•ìd
 *  *datum.keys);

4769 
d©um
.
vÆues
 = 
NULL
;

4770 
i
 = 0; i < 
n_lök_•ìd
; i++) {

4771 
d©um
.
keys
[
i
].
öãgî
 = 
lök_•ìd
[i];

4773 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_INTEGER
, 
OVSDB_TYPE_VOID
);

4774 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_LINK_SPEED
], &
d©um
);

4775 
	}
}

4778 
	$ov§ec_öãrÁ˚_£t_lök_°©e
(c⁄° 
ov§ec_öãrÁ˚
 *
row
, c⁄° *
lök_°©e
)

4780 
ovsdb_d©um
 
d©um
;

4782 
	`as£π
(
öôed
);

4783 i‡(
lök_°©e
) {

4784 
d©um
.
n
 = 1;

4785 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

4786 
d©um
.
keys
[0].
°rög
 = 
	`x°rdup
(
lök_°©e
);

4788 
d©um
.
n
 = 0;

4789 
d©um
.
keys
 = 
NULL
;

4791 
d©um
.
vÆues
 = 
NULL
;

4792 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_LINK_STATE
], &
d©um
);

4793 
	}
}

4796 
	$ov§ec_öãrÁ˚_£t_mac
(c⁄° 
ov§ec_öãrÁ˚
 *
row
, c⁄° *
mac
)

4798 
ovsdb_d©um
 
d©um
;

4800 
	`as£π
(
öôed
);

4801 i‡(
mac
) {

4802 
d©um
.
n
 = 1;

4803 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

4804 
d©um
.
keys
[0].
°rög
 = 
	`x°rdup
(
mac
);

4806 
d©um
.
n
 = 0;

4807 
d©um
.
keys
 = 
NULL
;

4809 
d©um
.
vÆues
 = 
NULL
;

4810 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_MAC
], &
d©um
);

4811 
	}
}

4814 
	$ov§ec_öãrÁ˚_£t_mtu
(c⁄° 
ov§ec_öãrÁ˚
 *
row
, c⁄° 
öt64_t
 *
mtu
, 
size_t
 
n_mtu
)

4816 
ovsdb_d©um
 
d©um
;

4817 
size_t
 
i
;

4819 
	`as£π
(
öôed
);

4820 
d©um
.
n
 = 
n_mtu
;

4821 
d©um
.
keys
 = 
	`xmÆloc
(
n_mtu
 *  *datum.keys);

4822 
d©um
.
vÆues
 = 
NULL
;

4823 
i
 = 0; i < 
n_mtu
; i++) {

4824 
d©um
.
keys
[
i
].
öãgî
 = 
mtu
[i];

4826 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_INTEGER
, 
OVSDB_TYPE_VOID
);

4827 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_MTU
], &
d©um
);

4828 
	}
}

4831 
	$ov§ec_öãrÁ˚_£t_«me
(c⁄° 
ov§ec_öãrÁ˚
 *
row
, c⁄° *
«me
)

4833 
ovsdb_d©um
 
d©um
;

4835 
	`as£π
(
öôed
);

4836 
d©um
.
n
 = 1;

4837 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

4838 
d©um
.
keys
[0].
°rög
 = 
	`x°rdup
(
«me
);

4839 
d©um
.
vÆues
 = 
NULL
;

4840 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_NAME
], &
d©um
);

4841 
	}
}

4844 
	$ov§ec_öãrÁ˚_£t_oÂ‹t
(c⁄° 
ov§ec_öãrÁ˚
 *
row
, c⁄° 
öt64_t
 *
oÂ‹t
, 
size_t
 
n_oÂ‹t
)

4846 
ovsdb_d©um
 
d©um
;

4847 
size_t
 
i
;

4849 
	`as£π
(
öôed
);

4850 
d©um
.
n
 = 
n_oÂ‹t
;

4851 
d©um
.
keys
 = 
	`xmÆloc
(
n_oÂ‹t
 *  *datum.keys);

4852 
d©um
.
vÆues
 = 
NULL
;

4853 
i
 = 0; i < 
n_oÂ‹t
; i++) {

4854 
d©um
.
keys
[
i
].
öãgî
 = 
oÂ‹t
[i];

4856 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_INTEGER
, 
OVSDB_TYPE_VOID
);

4857 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_OFPORT
], &
d©um
);

4858 
	}
}

4861 
	$ov§ec_öãrÁ˚_£t_›ti⁄s
(c⁄° 
ov§ec_öãrÁ˚
 *
row
, c⁄° 
sm≠
 *smap)

4863 
ovsdb_d©um
 
d©um
;

4865 
	`as£π
(
öôed
);

4866 i‡(
sm≠
) {

4867 
sm≠_node
 *
node
;

4868 
size_t
 
i
;

4870 
d©um
.
n
 = 
	`sm≠_cou¡
(
sm≠
);

4871 
d©um
.
keys
 = 
	`xmÆloc
(d©um.
n
 *  *datum.keys);

4872 
d©um
.
vÆues
 = 
	`xmÆloc
(d©um.
n
 *  *datum.values);

4874 
i
 = 0;

4875 
	`SMAP_FOR_EACH
 (
node
, 
sm≠
) {

4876 
d©um
.
keys
[
i
].
°rög
 = 
	`x°rdup
(
node
->
key
);

4877 
d©um
.
vÆues
[
i
].
°rög
 = 
	`x°rdup
(
node
->
vÆue
);

4878 
i
++;

4880 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_STRING
, OVSDB_TYPE_STRING);

4882 
	`ovsdb_d©um_öô_em±y
(&
d©um
);

4884 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
,

4885 &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_OPTIONS
],

4886 &
d©um
);

4887 
	}
}

4891 
	$ov§ec_öãrÁ˚_£t_Ÿhî_c⁄fig
(c⁄° 
ov§ec_öãrÁ˚
 *
row
, c⁄° 
sm≠
 *smap)

4893 
ovsdb_d©um
 
d©um
;

4895 
	`as£π
(
öôed
);

4896 i‡(
sm≠
) {

4897 
sm≠_node
 *
node
;

4898 
size_t
 
i
;

4900 
d©um
.
n
 = 
	`sm≠_cou¡
(
sm≠
);

4901 
d©um
.
keys
 = 
	`xmÆloc
(d©um.
n
 *  *datum.keys);

4902 
d©um
.
vÆues
 = 
	`xmÆloc
(d©um.
n
 *  *datum.values);

4904 
i
 = 0;

4905 
	`SMAP_FOR_EACH
 (
node
, 
sm≠
) {

4906 
d©um
.
keys
[
i
].
°rög
 = 
	`x°rdup
(
node
->
key
);

4907 
d©um
.
vÆues
[
i
].
°rög
 = 
	`x°rdup
(
node
->
vÆue
);

4908 
i
++;

4910 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_STRING
, OVSDB_TYPE_STRING);

4912 
	`ovsdb_d©um_öô_em±y
(&
d©um
);

4914 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
,

4915 &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_OTHER_CONFIG
],

4916 &
d©um
);

4917 
	}
}

4921 
	$ov§ec_öãrÁ˚_£t_°©i°ics
(c⁄° 
ov§ec_öãrÁ˚
 *
row
, **
key_°©i°ics
, c⁄° 
öt64_t
 *
vÆue_°©i°ics
, 
size_t
 
n_°©i°ics
)

4923 
ovsdb_d©um
 
d©um
;

4924 
size_t
 
i
;

4926 
	`as£π
(
öôed
);

4927 
d©um
.
n
 = 
n_°©i°ics
;

4928 
d©um
.
keys
 = 
	`xmÆloc
(
n_°©i°ics
 *  *datum.keys);

4929 
d©um
.
vÆues
 = 
	`xmÆloc
(
n_°©i°ics
 *  *datum.values);

4930 
i
 = 0; i < 
n_°©i°ics
; i++) {

4931 
d©um
.
keys
[
i
].
°rög
 = 
	`x°rdup
(
key_°©i°ics
[i]);

4932 
d©um
.
vÆues
[
i
].
öãgî
 = 
vÆue_°©i°ics
[i];

4934 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_STRING
, 
OVSDB_TYPE_INTEGER
);

4935 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_STATISTICS
], &
d©um
);

4936 
	}
}

4939 
	$ov§ec_öãrÁ˚_£t_°©us
(c⁄° 
ov§ec_öãrÁ˚
 *
row
, c⁄° 
sm≠
 *smap)

4941 
ovsdb_d©um
 
d©um
;

4943 
	`as£π
(
öôed
);

4944 i‡(
sm≠
) {

4945 
sm≠_node
 *
node
;

4946 
size_t
 
i
;

4948 
d©um
.
n
 = 
	`sm≠_cou¡
(
sm≠
);

4949 
d©um
.
keys
 = 
	`xmÆloc
(d©um.
n
 *  *datum.keys);

4950 
d©um
.
vÆues
 = 
	`xmÆloc
(d©um.
n
 *  *datum.values);

4952 
i
 = 0;

4953 
	`SMAP_FOR_EACH
 (
node
, 
sm≠
) {

4954 
d©um
.
keys
[
i
].
°rög
 = 
	`x°rdup
(
node
->
key
);

4955 
d©um
.
vÆues
[
i
].
°rög
 = 
	`x°rdup
(
node
->
vÆue
);

4956 
i
++;

4958 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_STRING
, OVSDB_TYPE_STRING);

4960 
	`ovsdb_d©um_öô_em±y
(&
d©um
);

4962 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
,

4963 &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_STATUS
],

4964 &
d©um
);

4965 
	}
}

4969 
	$ov§ec_öãrÁ˚_£t_ty≥
(c⁄° 
ov§ec_öãrÁ˚
 *
row
, c⁄° *
ty≥
)

4971 
ovsdb_d©um
 
d©um
;

4973 
	`as£π
(
öôed
);

4974 
d©um
.
n
 = 1;

4975 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

4976 
d©um
.
keys
[0].
°rög
 = 
	`x°rdup
(
ty≥
);

4977 
d©um
.
vÆues
 = 
NULL
;

4978 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_TYPE
], &
d©um
);

4979 
	}
}

4981 
ovsdb_idl_cﬁumn
 
	gov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_N_COLUMNS
];

4984 
	$ov§ec_öãrÁ˚_cﬁumns_öô
()

4986 
ovsdb_idl_cﬁumn
 *
c
;

4989 
c
 = &
ov§ec_öãrÁ˚_cﬁ_admö_°©e
;

4990 
c
->
«me
 = "admin_state";

4991 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

4992 
c
->
ty≥
.
key
.
íum_
 = 
	`xmÆloc
( *c->type.key.enum_);

4993 
c
->
ty≥
.
key
.
íum_
->
n
 = 2;

4994 
c
->
ty≥
.
key
.
íum_
->
keys
 = 
	`xmÆloc
(2 *  *c->type.key.enum_->keys);

4995 
c
->
ty≥
.
key
.
íum_
->
keys
[0].
°rög
 = 
	`x°rdup
("down");

4996 
c
->
ty≥
.
key
.
íum_
->
keys
[1].
°rög
 = 
	`x°rdup
("up");

4997 
c
->
ty≥
.
key
.
íum_
->
vÆues
 = 
NULL
;

4998 
	`ovsdb_d©um_s‹t_as£π
(
c
->
ty≥
.
key
.
íum_
, 
OVSDB_TYPE_STRING
);

4999 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

5000 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

5001 
c
->
ty≥
.
n_mö
 = 0;

5002 
c
->
ty≥
.
n_max
 = 1;

5003 
c
->
muèbÀ
 = 
åue
;

5004 
c
->
∑r£
 = 
ov§ec_öãrÁ˚_∑r£_admö_°©e
;

5005 
c
->
u≈¨£
 = 
ov§ec_öãrÁ˚_u≈¨£_admö_°©e
;

5008 
c
 = &
ov§ec_öãrÁ˚_cﬁ_cfm_Áu…
;

5009 
c
->
«me
 = "cfm_fault";

5010 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_BOOLEAN
);

5011 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

5012 
c
->
ty≥
.
n_mö
 = 0;

5013 
c
->
ty≥
.
n_max
 = 1;

5014 
c
->
muèbÀ
 = 
åue
;

5015 
c
->
∑r£
 = 
ov§ec_öãrÁ˚_∑r£_cfm_Áu…
;

5016 
c
->
u≈¨£
 = 
ov§ec_öãrÁ˚_u≈¨£_cfm_Áu…
;

5019 
c
 = &
ov§ec_öãrÁ˚_cﬁ_cfm_Áu…_°©us
;

5020 
c
->
«me
 = "cfm_fault_status";

5021 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

5022 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

5023 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

5024 
c
->
ty≥
.
n_mö
 = 0;

5025 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

5026 
c
->
muèbÀ
 = 
åue
;

5027 
c
->
∑r£
 = 
ov§ec_öãrÁ˚_∑r£_cfm_Áu…_°©us
;

5028 
c
->
u≈¨£
 = 
ov§ec_öãrÁ˚_u≈¨£_cfm_Áu…_°©us
;

5031 
c
 = &
ov§ec_öãrÁ˚_cﬁ_cfm_hó…h
;

5032 
c
->
«me
 = "cfm_health";

5033 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_INTEGER
);

5034 
c
->
ty≥
.
key
.
u
.
öãgî
.
mö
 = 
	`INT64_C
(0);

5035 
c
->
ty≥
.
key
.
u
.
öãgî
.
max
 = 
	`INT64_C
(100);

5036 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

5037 
c
->
ty≥
.
n_mö
 = 0;

5038 
c
->
ty≥
.
n_max
 = 1;

5039 
c
->
muèbÀ
 = 
åue
;

5040 
c
->
∑r£
 = 
ov§ec_öãrÁ˚_∑r£_cfm_hó…h
;

5041 
c
->
u≈¨£
 = 
ov§ec_öãrÁ˚_u≈¨£_cfm_hó…h
;

5044 
c
 = &
ov§ec_öãrÁ˚_cﬁ_cfm_mpid
;

5045 
c
->
«me
 = "cfm_mpid";

5046 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_INTEGER
);

5047 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

5048 
c
->
ty≥
.
n_mö
 = 0;

5049 
c
->
ty≥
.
n_max
 = 1;

5050 
c
->
muèbÀ
 = 
åue
;

5051 
c
->
∑r£
 = 
ov§ec_öãrÁ˚_∑r£_cfm_mpid
;

5052 
c
->
u≈¨£
 = 
ov§ec_öãrÁ˚_u≈¨£_cfm_mpid
;

5055 
c
 = &
ov§ec_öãrÁ˚_cﬁ_cfm_ªmŸe_mpids
;

5056 
c
->
«me
 = "cfm_remote_mpids";

5057 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_INTEGER
);

5058 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

5059 
c
->
ty≥
.
n_mö
 = 0;

5060 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

5061 
c
->
muèbÀ
 = 
åue
;

5062 
c
->
∑r£
 = 
ov§ec_öãrÁ˚_∑r£_cfm_ªmŸe_mpids
;

5063 
c
->
u≈¨£
 = 
ov§ec_öãrÁ˚_u≈¨£_cfm_ªmŸe_mpids
;

5066 
c
 = &
ov§ec_öãrÁ˚_cﬁ_cfm_ªmŸe_›°©e
;

5067 
c
->
«me
 = "cfm_remote_opstate";

5068 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

5069 
c
->
ty≥
.
key
.
íum_
 = 
	`xmÆloc
( *c->type.key.enum_);

5070 
c
->
ty≥
.
key
.
íum_
->
n
 = 2;

5071 
c
->
ty≥
.
key
.
íum_
->
keys
 = 
	`xmÆloc
(2 *  *c->type.key.enum_->keys);

5072 
c
->
ty≥
.
key
.
íum_
->
keys
[0].
°rög
 = 
	`x°rdup
("down");

5073 
c
->
ty≥
.
key
.
íum_
->
keys
[1].
°rög
 = 
	`x°rdup
("up");

5074 
c
->
ty≥
.
key
.
íum_
->
vÆues
 = 
NULL
;

5075 
	`ovsdb_d©um_s‹t_as£π
(
c
->
ty≥
.
key
.
íum_
, 
OVSDB_TYPE_STRING
);

5076 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

5077 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

5078 
c
->
ty≥
.
n_mö
 = 0;

5079 
c
->
ty≥
.
n_max
 = 1;

5080 
c
->
muèbÀ
 = 
åue
;

5081 
c
->
∑r£
 = 
ov§ec_öãrÁ˚_∑r£_cfm_ªmŸe_›°©e
;

5082 
c
->
u≈¨£
 = 
ov§ec_öãrÁ˚_u≈¨£_cfm_ªmŸe_›°©e
;

5085 
c
 = &
ov§ec_öãrÁ˚_cﬁ_du∂ex
;

5086 
c
->
«me
 = "duplex";

5087 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

5088 
c
->
ty≥
.
key
.
íum_
 = 
	`xmÆloc
( *c->type.key.enum_);

5089 
c
->
ty≥
.
key
.
íum_
->
n
 = 2;

5090 
c
->
ty≥
.
key
.
íum_
->
keys
 = 
	`xmÆloc
(2 *  *c->type.key.enum_->keys);

5091 
c
->
ty≥
.
key
.
íum_
->
keys
[0].
°rög
 = 
	`x°rdup
("full");

5092 
c
->
ty≥
.
key
.
íum_
->
keys
[1].
°rög
 = 
	`x°rdup
("half");

5093 
c
->
ty≥
.
key
.
íum_
->
vÆues
 = 
NULL
;

5094 
	`ovsdb_d©um_s‹t_as£π
(
c
->
ty≥
.
key
.
íum_
, 
OVSDB_TYPE_STRING
);

5095 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

5096 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

5097 
c
->
ty≥
.
n_mö
 = 0;

5098 
c
->
ty≥
.
n_max
 = 1;

5099 
c
->
muèbÀ
 = 
åue
;

5100 
c
->
∑r£
 = 
ov§ec_öãrÁ˚_∑r£_du∂ex
;

5101 
c
->
u≈¨£
 = 
ov§ec_öãrÁ˚_u≈¨£_du∂ex
;

5104 
c
 = &
ov§ec_öãrÁ˚_cﬁ_exã∫Æ_ids
;

5105 
c
->
«me
 = "external_ids";

5106 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

5107 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

5108 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_STRING
);

5109 
c
->
ty≥
.
vÆue
.
u
.
°rög
.
möLí
 = 0;

5110 
c
->
ty≥
.
n_mö
 = 0;

5111 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

5112 
c
->
muèbÀ
 = 
åue
;

5113 
c
->
∑r£
 = 
ov§ec_öãrÁ˚_∑r£_exã∫Æ_ids
;

5114 
c
->
u≈¨£
 = 
ov§ec_öãrÁ˚_u≈¨£_exã∫Æ_ids
;

5117 
c
 = &
ov§ec_öãrÁ˚_cﬁ_ögªss_pﬁicög_bur°
;

5118 
c
->
«me
 = "ingress_policing_burst";

5119 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_INTEGER
);

5120 
c
->
ty≥
.
key
.
u
.
öãgî
.
mö
 = 
	`INT64_C
(0);

5121 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

5122 
c
->
ty≥
.
n_mö
 = 1;

5123 
c
->
ty≥
.
n_max
 = 1;

5124 
c
->
muèbÀ
 = 
åue
;

5125 
c
->
∑r£
 = 
ov§ec_öãrÁ˚_∑r£_ögªss_pﬁicög_bur°
;

5126 
c
->
u≈¨£
 = 
ov§ec_öãrÁ˚_u≈¨£_ögªss_pﬁicög_bur°
;

5129 
c
 = &
ov§ec_öãrÁ˚_cﬁ_ögªss_pﬁicög_øã
;

5130 
c
->
«me
 = "ingress_policing_rate";

5131 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_INTEGER
);

5132 
c
->
ty≥
.
key
.
u
.
öãgî
.
mö
 = 
	`INT64_C
(0);

5133 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

5134 
c
->
ty≥
.
n_mö
 = 1;

5135 
c
->
ty≥
.
n_max
 = 1;

5136 
c
->
muèbÀ
 = 
åue
;

5137 
c
->
∑r£
 = 
ov§ec_öãrÁ˚_∑r£_ögªss_pﬁicög_øã
;

5138 
c
->
u≈¨£
 = 
ov§ec_öãrÁ˚_u≈¨£_ögªss_pﬁicög_øã
;

5141 
c
 = &
ov§ec_öãrÁ˚_cﬁ_œ˝_cuºít
;

5142 
c
->
«me
 = "lacp_current";

5143 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_BOOLEAN
);

5144 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

5145 
c
->
ty≥
.
n_mö
 = 0;

5146 
c
->
ty≥
.
n_max
 = 1;

5147 
c
->
muèbÀ
 = 
åue
;

5148 
c
->
∑r£
 = 
ov§ec_öãrÁ˚_∑r£_œ˝_cuºít
;

5149 
c
->
u≈¨£
 = 
ov§ec_öãrÁ˚_u≈¨£_œ˝_cuºít
;

5152 
c
 = &
ov§ec_öãrÁ˚_cﬁ_lök_ª£ts
;

5153 
c
->
«me
 = "link_resets";

5154 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_INTEGER
);

5155 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

5156 
c
->
ty≥
.
n_mö
 = 0;

5157 
c
->
ty≥
.
n_max
 = 1;

5158 
c
->
muèbÀ
 = 
åue
;

5159 
c
->
∑r£
 = 
ov§ec_öãrÁ˚_∑r£_lök_ª£ts
;

5160 
c
->
u≈¨£
 = 
ov§ec_öãrÁ˚_u≈¨£_lök_ª£ts
;

5163 
c
 = &
ov§ec_öãrÁ˚_cﬁ_lök_•ìd
;

5164 
c
->
«me
 = "link_speed";

5165 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_INTEGER
);

5166 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

5167 
c
->
ty≥
.
n_mö
 = 0;

5168 
c
->
ty≥
.
n_max
 = 1;

5169 
c
->
muèbÀ
 = 
åue
;

5170 
c
->
∑r£
 = 
ov§ec_öãrÁ˚_∑r£_lök_•ìd
;

5171 
c
->
u≈¨£
 = 
ov§ec_öãrÁ˚_u≈¨£_lök_•ìd
;

5174 
c
 = &
ov§ec_öãrÁ˚_cﬁ_lök_°©e
;

5175 
c
->
«me
 = "link_state";

5176 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

5177 
c
->
ty≥
.
key
.
íum_
 = 
	`xmÆloc
( *c->type.key.enum_);

5178 
c
->
ty≥
.
key
.
íum_
->
n
 = 2;

5179 
c
->
ty≥
.
key
.
íum_
->
keys
 = 
	`xmÆloc
(2 *  *c->type.key.enum_->keys);

5180 
c
->
ty≥
.
key
.
íum_
->
keys
[0].
°rög
 = 
	`x°rdup
("down");

5181 
c
->
ty≥
.
key
.
íum_
->
keys
[1].
°rög
 = 
	`x°rdup
("up");

5182 
c
->
ty≥
.
key
.
íum_
->
vÆues
 = 
NULL
;

5183 
	`ovsdb_d©um_s‹t_as£π
(
c
->
ty≥
.
key
.
íum_
, 
OVSDB_TYPE_STRING
);

5184 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

5185 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

5186 
c
->
ty≥
.
n_mö
 = 0;

5187 
c
->
ty≥
.
n_max
 = 1;

5188 
c
->
muèbÀ
 = 
åue
;

5189 
c
->
∑r£
 = 
ov§ec_öãrÁ˚_∑r£_lök_°©e
;

5190 
c
->
u≈¨£
 = 
ov§ec_öãrÁ˚_u≈¨£_lök_°©e
;

5193 
c
 = &
ov§ec_öãrÁ˚_cﬁ_mac
;

5194 
c
->
«me
 = "mac";

5195 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

5196 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

5197 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

5198 
c
->
ty≥
.
n_mö
 = 0;

5199 
c
->
ty≥
.
n_max
 = 1;

5200 
c
->
muèbÀ
 = 
åue
;

5201 
c
->
∑r£
 = 
ov§ec_öãrÁ˚_∑r£_mac
;

5202 
c
->
u≈¨£
 = 
ov§ec_öãrÁ˚_u≈¨£_mac
;

5205 
c
 = &
ov§ec_öãrÁ˚_cﬁ_mtu
;

5206 
c
->
«me
 = "mtu";

5207 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_INTEGER
);

5208 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

5209 
c
->
ty≥
.
n_mö
 = 0;

5210 
c
->
ty≥
.
n_max
 = 1;

5211 
c
->
muèbÀ
 = 
åue
;

5212 
c
->
∑r£
 = 
ov§ec_öãrÁ˚_∑r£_mtu
;

5213 
c
->
u≈¨£
 = 
ov§ec_öãrÁ˚_u≈¨£_mtu
;

5216 
c
 = &
ov§ec_öãrÁ˚_cﬁ_«me
;

5217 
c
->
«me
 = "name";

5218 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

5219 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

5220 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

5221 
c
->
ty≥
.
n_mö
 = 1;

5222 
c
->
ty≥
.
n_max
 = 1;

5223 
c
->
muèbÀ
 = 
Ál£
;

5224 
c
->
∑r£
 = 
ov§ec_öãrÁ˚_∑r£_«me
;

5225 
c
->
u≈¨£
 = 
ov§ec_öãrÁ˚_u≈¨£_«me
;

5228 
c
 = &
ov§ec_öãrÁ˚_cﬁ_oÂ‹t
;

5229 
c
->
«me
 = "ofport";

5230 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_INTEGER
);

5231 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

5232 
c
->
ty≥
.
n_mö
 = 0;

5233 
c
->
ty≥
.
n_max
 = 1;

5234 
c
->
muèbÀ
 = 
åue
;

5235 
c
->
∑r£
 = 
ov§ec_öãrÁ˚_∑r£_oÂ‹t
;

5236 
c
->
u≈¨£
 = 
ov§ec_öãrÁ˚_u≈¨£_oÂ‹t
;

5239 
c
 = &
ov§ec_öãrÁ˚_cﬁ_›ti⁄s
;

5240 
c
->
«me
 = "options";

5241 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

5242 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

5243 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_STRING
);

5244 
c
->
ty≥
.
vÆue
.
u
.
°rög
.
möLí
 = 0;

5245 
c
->
ty≥
.
n_mö
 = 0;

5246 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

5247 
c
->
muèbÀ
 = 
åue
;

5248 
c
->
∑r£
 = 
ov§ec_öãrÁ˚_∑r£_›ti⁄s
;

5249 
c
->
u≈¨£
 = 
ov§ec_öãrÁ˚_u≈¨£_›ti⁄s
;

5252 
c
 = &
ov§ec_öãrÁ˚_cﬁ_Ÿhî_c⁄fig
;

5253 
c
->
«me
 = "other_config";

5254 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

5255 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

5256 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_STRING
);

5257 
c
->
ty≥
.
vÆue
.
u
.
°rög
.
möLí
 = 0;

5258 
c
->
ty≥
.
n_mö
 = 0;

5259 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

5260 
c
->
muèbÀ
 = 
åue
;

5261 
c
->
∑r£
 = 
ov§ec_öãrÁ˚_∑r£_Ÿhî_c⁄fig
;

5262 
c
->
u≈¨£
 = 
ov§ec_öãrÁ˚_u≈¨£_Ÿhî_c⁄fig
;

5265 
c
 = &
ov§ec_öãrÁ˚_cﬁ_°©i°ics
;

5266 
c
->
«me
 = "statistics";

5267 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

5268 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

5269 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_INTEGER
);

5270 
c
->
ty≥
.
n_mö
 = 0;

5271 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

5272 
c
->
muèbÀ
 = 
åue
;

5273 
c
->
∑r£
 = 
ov§ec_öãrÁ˚_∑r£_°©i°ics
;

5274 
c
->
u≈¨£
 = 
ov§ec_öãrÁ˚_u≈¨£_°©i°ics
;

5277 
c
 = &
ov§ec_öãrÁ˚_cﬁ_°©us
;

5278 
c
->
«me
 = "status";

5279 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

5280 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

5281 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_STRING
);

5282 
c
->
ty≥
.
vÆue
.
u
.
°rög
.
möLí
 = 0;

5283 
c
->
ty≥
.
n_mö
 = 0;

5284 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

5285 
c
->
muèbÀ
 = 
åue
;

5286 
c
->
∑r£
 = 
ov§ec_öãrÁ˚_∑r£_°©us
;

5287 
c
->
u≈¨£
 = 
ov§ec_öãrÁ˚_u≈¨£_°©us
;

5290 
c
 = &
ov§ec_öãrÁ˚_cﬁ_ty≥
;

5291 
c
->
«me
 = "type";

5292 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

5293 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

5294 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

5295 
c
->
ty≥
.
n_mö
 = 1;

5296 
c
->
ty≥
.
n_max
 = 1;

5297 
c
->
muèbÀ
 = 
åue
;

5298 
c
->
∑r£
 = 
ov§ec_öãrÁ˚_∑r£_ty≥
;

5299 
c
->
u≈¨£
 = 
ov§ec_öãrÁ˚_u≈¨£_ty≥
;

5300 
	}
}

5305 
	$ov§ec_m™agî_∑r£_c⁄√˘i⁄_mode
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

5307 
ov§ec_m™agî
 *
row
 = 
	`ov§ec_m™agî_ˇ°
(
row_
);

5309 
	`as£π
(
öôed
);

5310 i‡(
d©um
->
n
 >= 1) {

5311 
row
->
c⁄√˘i⁄_mode
 = 
d©um
->
keys
[0].
°rög
;

5313 
row
->
c⁄√˘i⁄_mode
 = 
NULL
;

5315 
	}
}

5318 
	$ov§ec_m™agî_∑r£_exã∫Æ_ids
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

5320 
ov§ec_m™agî
 *
row
 = 
	`ov§ec_m™agî_ˇ°
(
row_
);

5321 
size_t
 
i
;

5323 
	`as£π
(
öôed
);

5324 
	`sm≠_öô
(&
row
->
exã∫Æ_ids
);

5325 
i
 = 0; i < 
d©um
->
n
; i++) {

5326 
	`sm≠_add
(&
row
->
exã∫Æ_ids
,

5327 
d©um
->
keys
[
i
].
°rög
,

5328 
d©um
->
vÆues
[
i
].
°rög
);

5330 
	}
}

5333 
	$ov§ec_m™agî_∑r£_öa˘ivôy_¥obe
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

5335 
ov§ec_m™agî
 *
row
 = 
	`ov§ec_m™agî_ˇ°
(
row_
);

5336 
size_t
 
n
 = 
	`MIN
(1, 
d©um
->n);

5337 
size_t
 
i
;

5339 
	`as£π
(
öôed
);

5340 
row
->
öa˘ivôy_¥obe
 = 
NULL
;

5341 
row
->
n_öa˘ivôy_¥obe
 = 0;

5342 
i
 = 0; i < 
n
; i++) {

5343 i‡(!
row
->
n_öa˘ivôy_¥obe
) {

5344 
row
->
öa˘ivôy_¥obe
 = 
	`xmÆloc
(
n
 *  *row->inactivity_probe);

5346 
row
->
öa˘ivôy_¥obe
[row->
n_öa˘ivôy_¥obe
] = 
d©um
->
keys
[
i
].
öãgî
;

5347 
row
->
n_öa˘ivôy_¥obe
++;

5349 
	}
}

5352 
	$ov§ec_m™agî_∑r£_is_c⁄√˘ed
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

5354 
ov§ec_m™agî
 *
row
 = 
	`ov§ec_m™agî_ˇ°
(
row_
);

5356 
	`as£π
(
öôed
);

5357 i‡(
d©um
->
n
 >= 1) {

5358 
row
->
is_c⁄√˘ed
 = 
d©um
->
keys
[0].
boﬁón
;

5360 
row
->
is_c⁄√˘ed
 = 
Ál£
;

5362 
	}
}

5365 
	$ov§ec_m™agî_∑r£_max_backoff
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

5367 
ov§ec_m™agî
 *
row
 = 
	`ov§ec_m™agî_ˇ°
(
row_
);

5368 
size_t
 
n
 = 
	`MIN
(1, 
d©um
->n);

5369 
size_t
 
i
;

5371 
	`as£π
(
öôed
);

5372 
row
->
max_backoff
 = 
NULL
;

5373 
row
->
n_max_backoff
 = 0;

5374 
i
 = 0; i < 
n
; i++) {

5375 i‡(!
row
->
n_max_backoff
) {

5376 
row
->
max_backoff
 = 
	`xmÆloc
(
n
 *  *row->max_backoff);

5378 
row
->
max_backoff
[row->
n_max_backoff
] = 
d©um
->
keys
[
i
].
öãgî
;

5379 
row
->
n_max_backoff
++;

5381 
	}
}

5384 
	$ov§ec_m™agî_∑r£_Ÿhî_c⁄fig
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

5386 
ov§ec_m™agî
 *
row
 = 
	`ov§ec_m™agî_ˇ°
(
row_
);

5387 
size_t
 
i
;

5389 
	`as£π
(
öôed
);

5390 
	`sm≠_öô
(&
row
->
Ÿhî_c⁄fig
);

5391 
i
 = 0; i < 
d©um
->
n
; i++) {

5392 
	`sm≠_add
(&
row
->
Ÿhî_c⁄fig
,

5393 
d©um
->
keys
[
i
].
°rög
,

5394 
d©um
->
vÆues
[
i
].
°rög
);

5396 
	}
}

5399 
	$ov§ec_m™agî_∑r£_°©us
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

5401 
ov§ec_m™agî
 *
row
 = 
	`ov§ec_m™agî_ˇ°
(
row_
);

5402 
size_t
 
i
;

5404 
	`as£π
(
öôed
);

5405 
	`sm≠_öô
(&
row
->
°©us
);

5406 
i
 = 0; i < 
d©um
->
n
; i++) {

5407 
	`sm≠_add
(&
row
->
°©us
,

5408 
d©um
->
keys
[
i
].
°rög
,

5409 
d©um
->
vÆues
[
i
].
°rög
);

5411 
	}
}

5414 
	$ov§ec_m™agî_∑r£_èrgë
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

5416 
ov§ec_m™agî
 *
row
 = 
	`ov§ec_m™agî_ˇ°
(
row_
);

5418 
	`as£π
(
öôed
);

5419 i‡(
d©um
->
n
 >= 1) {

5420 
row
->
èrgë
 = 
d©um
->
keys
[0].
°rög
;

5422 
row
->
èrgë
 = "";

5424 
	}
}

5427 
	$ov§ec_m™agî_u≈¨£_c⁄√˘i⁄_mode
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

5430 
	}
}

5433 
	$ov§ec_m™agî_u≈¨£_exã∫Æ_ids
(
ovsdb_idl_row
 *
row_
)

5435 
ov§ec_m™agî
 *
row
 = 
	`ov§ec_m™agî_ˇ°
(
row_
);

5437 
	`as£π
(
öôed
);

5438 
	`sm≠_de°roy
(&
row
->
exã∫Æ_ids
);

5439 
	}
}

5442 
	$ov§ec_m™agî_u≈¨£_öa˘ivôy_¥obe
(
ovsdb_idl_row
 *
row_
)

5444 
ov§ec_m™agî
 *
row
 = 
	`ov§ec_m™agî_ˇ°
(
row_
);

5446 
	`as£π
(
öôed
);

5447 
	`‰ì
(
row
->
öa˘ivôy_¥obe
);

5448 
	}
}

5451 
	$ov§ec_m™agî_u≈¨£_is_c⁄√˘ed
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

5454 
	}
}

5457 
	$ov§ec_m™agî_u≈¨£_max_backoff
(
ovsdb_idl_row
 *
row_
)

5459 
ov§ec_m™agî
 *
row
 = 
	`ov§ec_m™agî_ˇ°
(
row_
);

5461 
	`as£π
(
öôed
);

5462 
	`‰ì
(
row
->
max_backoff
);

5463 
	}
}

5466 
	$ov§ec_m™agî_u≈¨£_Ÿhî_c⁄fig
(
ovsdb_idl_row
 *
row_
)

5468 
ov§ec_m™agî
 *
row
 = 
	`ov§ec_m™agî_ˇ°
(
row_
);

5470 
	`as£π
(
öôed
);

5471 
	`sm≠_de°roy
(&
row
->
Ÿhî_c⁄fig
);

5472 
	}
}

5475 
	$ov§ec_m™agî_u≈¨£_°©us
(
ovsdb_idl_row
 *
row_
)

5477 
ov§ec_m™agî
 *
row
 = 
	`ov§ec_m™agî_ˇ°
(
row_
);

5479 
	`as£π
(
öôed
);

5480 
	`sm≠_de°roy
(&
row
->
°©us
);

5481 
	}
}

5484 
	$ov§ec_m™agî_u≈¨£_èrgë
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

5487 
	}
}

5490 
	$ov§ec_m™agî_öô__
(
ovsdb_idl_row
 *
row
)

5492 
	`ov§ec_m™agî_öô
(
	`ov§ec_m™agî_ˇ°
(
row
));

5493 
	}
}

5496 
	$ov§ec_m™agî_öô
(
ov§ec_m™agî
 *
row
)

5498 
	`mem£t
(
row
, 0,  *row);

5499 
	`sm≠_öô
(&
row
->
exã∫Æ_ids
);

5500 
	`sm≠_öô
(&
row
->
Ÿhî_c⁄fig
);

5501 
	`sm≠_öô
(&
row
->
°©us
);

5502 
	}
}

5504 c⁄° 
ov§ec_m™agî
 *

5505 
	$ov§ec_m™agî_fú°
(c⁄° 
ovsdb_idl
 *
idl
)

5507  
	`ov§ec_m™agî_ˇ°
(
	`ovsdb_idl_fú°_row
(
idl
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_MANAGER
]));

5508 
	}
}

5510 c⁄° 
ov§ec_m™agî
 *

5511 
	$ov§ec_m™agî_√xt
(c⁄° 
ov§ec_m™agî
 *
row
)

5513  
	`ov§ec_m™agî_ˇ°
(
	`ovsdb_idl_√xt_row
(&
row
->
hódî_
));

5514 
	}
}

5517 
	$ov§ec_m™agî_dñëe
(c⁄° 
ov§ec_m™agî
 *
row
)

5519 
	`ovsdb_idl_txn_dñëe
(&
row
->
hódî_
);

5520 
	}
}

5522 
ov§ec_m™agî
 *

5523 
	$ov§ec_m™agî_ö£π
(
ovsdb_idl_txn
 *
txn
)

5525  
	`ov§ec_m™agî_ˇ°
(
	`ovsdb_idl_txn_ö£π
(
txn
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_MANAGER
], 
NULL
));

5526 
	}
}

5530 
	$ov§ec_m™agî_vîify_c⁄√˘i⁄_mode
(c⁄° 
ov§ec_m™agî
 *
row
)

5532 
	`as£π
(
öôed
);

5533 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_m™agî_cﬁumns
[
OVSREC_MANAGER_COL_CONNECTION_MODE
]);

5534 
	}
}

5537 
	$ov§ec_m™agî_vîify_exã∫Æ_ids
(c⁄° 
ov§ec_m™agî
 *
row
)

5539 
	`as£π
(
öôed
);

5540 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_m™agî_cﬁumns
[
OVSREC_MANAGER_COL_EXTERNAL_IDS
]);

5541 
	}
}

5544 
	$ov§ec_m™agî_vîify_öa˘ivôy_¥obe
(c⁄° 
ov§ec_m™agî
 *
row
)

5546 
	`as£π
(
öôed
);

5547 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_m™agî_cﬁumns
[
OVSREC_MANAGER_COL_INACTIVITY_PROBE
]);

5548 
	}
}

5551 
	$ov§ec_m™agî_vîify_is_c⁄√˘ed
(c⁄° 
ov§ec_m™agî
 *
row
)

5553 
	`as£π
(
öôed
);

5554 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_m™agî_cﬁumns
[
OVSREC_MANAGER_COL_IS_CONNECTED
]);

5555 
	}
}

5558 
	$ov§ec_m™agî_vîify_max_backoff
(c⁄° 
ov§ec_m™agî
 *
row
)

5560 
	`as£π
(
öôed
);

5561 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_m™agî_cﬁumns
[
OVSREC_MANAGER_COL_MAX_BACKOFF
]);

5562 
	}
}

5565 
	$ov§ec_m™agî_vîify_Ÿhî_c⁄fig
(c⁄° 
ov§ec_m™agî
 *
row
)

5567 
	`as£π
(
öôed
);

5568 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_m™agî_cﬁumns
[
OVSREC_MANAGER_COL_OTHER_CONFIG
]);

5569 
	}
}

5572 
	$ov§ec_m™agî_vîify_°©us
(c⁄° 
ov§ec_m™agî
 *
row
)

5574 
	`as£π
(
öôed
);

5575 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_m™agî_cﬁumns
[
OVSREC_MANAGER_COL_STATUS
]);

5576 
	}
}

5579 
	$ov§ec_m™agî_vîify_èrgë
(c⁄° 
ov§ec_m™agî
 *
row
)

5581 
	`as£π
(
öôed
);

5582 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_m™agî_cﬁumns
[
OVSREC_MANAGER_COL_TARGET
]);

5583 
	}
}

5600 c⁄° 
ovsdb_d©um
 *

5601 
	$ov§ec_m™agî_gë_c⁄√˘i⁄_mode
(c⁄° 
ov§ec_m™agî
 *
row
,

5602 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

5604 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

5605  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_m™agî_cﬁ_c⁄√˘i⁄_mode
);

5606 
	}
}

5624 c⁄° 
ovsdb_d©um
 *

5625 
	$ov§ec_m™agî_gë_exã∫Æ_ids
(c⁄° 
ov§ec_m™agî
 *
row
,

5626 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
,

5627 
ovsdb_©omic_ty≥
 
vÆue_ty≥
 
OVS_UNUSED
)

5629 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

5630 
	`as£π
(
vÆue_ty≥
 =
OVSDB_TYPE_STRING
);

5631  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_m™agî_cﬁ_exã∫Æ_ids
);

5632 
	}
}

5649 c⁄° 
ovsdb_d©um
 *

5650 
	$ov§ec_m™agî_gë_öa˘ivôy_¥obe
(c⁄° 
ov§ec_m™agî
 *
row
,

5651 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

5653 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_INTEGER
);

5654  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_m™agî_cﬁ_öa˘ivôy_¥obe
);

5655 
	}
}

5672 c⁄° 
ovsdb_d©um
 *

5673 
	$ov§ec_m™agî_gë_is_c⁄√˘ed
(c⁄° 
ov§ec_m™agî
 *
row
,

5674 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

5676 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_BOOLEAN
);

5677  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_m™agî_cﬁ_is_c⁄√˘ed
);

5678 
	}
}

5695 c⁄° 
ovsdb_d©um
 *

5696 
	$ov§ec_m™agî_gë_max_backoff
(c⁄° 
ov§ec_m™agî
 *
row
,

5697 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

5699 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_INTEGER
);

5700  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_m™agî_cﬁ_max_backoff
);

5701 
	}
}

5719 c⁄° 
ovsdb_d©um
 *

5720 
	$ov§ec_m™agî_gë_Ÿhî_c⁄fig
(c⁄° 
ov§ec_m™agî
 *
row
,

5721 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
,

5722 
ovsdb_©omic_ty≥
 
vÆue_ty≥
 
OVS_UNUSED
)

5724 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

5725 
	`as£π
(
vÆue_ty≥
 =
OVSDB_TYPE_STRING
);

5726  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_m™agî_cﬁ_Ÿhî_c⁄fig
);

5727 
	}
}

5745 c⁄° 
ovsdb_d©um
 *

5746 
	$ov§ec_m™agî_gë_°©us
(c⁄° 
ov§ec_m™agî
 *
row
,

5747 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
,

5748 
ovsdb_©omic_ty≥
 
vÆue_ty≥
 
OVS_UNUSED
)

5750 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

5751 
	`as£π
(
vÆue_ty≥
 =
OVSDB_TYPE_STRING
);

5752  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_m™agî_cﬁ_°©us
);

5753 
	}
}

5770 c⁄° 
ovsdb_d©um
 *

5771 
	$ov§ec_m™agî_gë_èrgë
(c⁄° 
ov§ec_m™agî
 *
row
,

5772 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

5774 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

5775  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_m™agî_cﬁ_èrgë
);

5776 
	}
}

5779 
	$ov§ec_m™agî_£t_c⁄√˘i⁄_mode
(c⁄° 
ov§ec_m™agî
 *
row
, c⁄° *
c⁄√˘i⁄_mode
)

5781 
ovsdb_d©um
 
d©um
;

5783 
	`as£π
(
öôed
);

5784 i‡(
c⁄√˘i⁄_mode
) {

5785 
d©um
.
n
 = 1;

5786 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

5787 
d©um
.
keys
[0].
°rög
 = 
	`x°rdup
(
c⁄√˘i⁄_mode
);

5789 
d©um
.
n
 = 0;

5790 
d©um
.
keys
 = 
NULL
;

5792 
d©um
.
vÆues
 = 
NULL
;

5793 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_m™agî_cﬁumns
[
OVSREC_MANAGER_COL_CONNECTION_MODE
], &
d©um
);

5794 
	}
}

5797 
	$ov§ec_m™agî_£t_exã∫Æ_ids
(c⁄° 
ov§ec_m™agî
 *
row
, c⁄° 
sm≠
 *smap)

5799 
ovsdb_d©um
 
d©um
;

5801 
	`as£π
(
öôed
);

5802 i‡(
sm≠
) {

5803 
sm≠_node
 *
node
;

5804 
size_t
 
i
;

5806 
d©um
.
n
 = 
	`sm≠_cou¡
(
sm≠
);

5807 
d©um
.
keys
 = 
	`xmÆloc
(d©um.
n
 *  *datum.keys);

5808 
d©um
.
vÆues
 = 
	`xmÆloc
(d©um.
n
 *  *datum.values);

5810 
i
 = 0;

5811 
	`SMAP_FOR_EACH
 (
node
, 
sm≠
) {

5812 
d©um
.
keys
[
i
].
°rög
 = 
	`x°rdup
(
node
->
key
);

5813 
d©um
.
vÆues
[
i
].
°rög
 = 
	`x°rdup
(
node
->
vÆue
);

5814 
i
++;

5816 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_STRING
, OVSDB_TYPE_STRING);

5818 
	`ovsdb_d©um_öô_em±y
(&
d©um
);

5820 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
,

5821 &
ov§ec_m™agî_cﬁumns
[
OVSREC_MANAGER_COL_EXTERNAL_IDS
],

5822 &
d©um
);

5823 
	}
}

5827 
	$ov§ec_m™agî_£t_öa˘ivôy_¥obe
(c⁄° 
ov§ec_m™agî
 *
row
, c⁄° 
öt64_t
 *
öa˘ivôy_¥obe
, 
size_t
 
n_öa˘ivôy_¥obe
)

5829 
ovsdb_d©um
 
d©um
;

5830 
size_t
 
i
;

5832 
	`as£π
(
öôed
);

5833 
d©um
.
n
 = 
n_öa˘ivôy_¥obe
;

5834 
d©um
.
keys
 = 
	`xmÆloc
(
n_öa˘ivôy_¥obe
 *  *datum.keys);

5835 
d©um
.
vÆues
 = 
NULL
;

5836 
i
 = 0; i < 
n_öa˘ivôy_¥obe
; i++) {

5837 
d©um
.
keys
[
i
].
öãgî
 = 
öa˘ivôy_¥obe
[i];

5839 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_INTEGER
, 
OVSDB_TYPE_VOID
);

5840 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_m™agî_cﬁumns
[
OVSREC_MANAGER_COL_INACTIVITY_PROBE
], &
d©um
);

5841 
	}
}

5844 
	$ov§ec_m™agî_£t_is_c⁄√˘ed
(c⁄° 
ov§ec_m™agî
 *
row
, 
boﬁ
 
is_c⁄√˘ed
)

5846 
ovsdb_d©um
 
d©um
;

5848 
	`as£π
(
öôed
);

5849 
d©um
.
n
 = 1;

5850 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

5851 
d©um
.
keys
[0].
boﬁón
 = 
is_c⁄√˘ed
;

5852 
d©um
.
vÆues
 = 
NULL
;

5853 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_m™agî_cﬁumns
[
OVSREC_MANAGER_COL_IS_CONNECTED
], &
d©um
);

5854 
	}
}

5857 
	$ov§ec_m™agî_£t_max_backoff
(c⁄° 
ov§ec_m™agî
 *
row
, c⁄° 
öt64_t
 *
max_backoff
, 
size_t
 
n_max_backoff
)

5859 
ovsdb_d©um
 
d©um
;

5860 
size_t
 
i
;

5862 
	`as£π
(
öôed
);

5863 
d©um
.
n
 = 
n_max_backoff
;

5864 
d©um
.
keys
 = 
	`xmÆloc
(
n_max_backoff
 *  *datum.keys);

5865 
d©um
.
vÆues
 = 
NULL
;

5866 
i
 = 0; i < 
n_max_backoff
; i++) {

5867 
d©um
.
keys
[
i
].
öãgî
 = 
max_backoff
[i];

5869 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_INTEGER
, 
OVSDB_TYPE_VOID
);

5870 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_m™agî_cﬁumns
[
OVSREC_MANAGER_COL_MAX_BACKOFF
], &
d©um
);

5871 
	}
}

5874 
	$ov§ec_m™agî_£t_Ÿhî_c⁄fig
(c⁄° 
ov§ec_m™agî
 *
row
, c⁄° 
sm≠
 *smap)

5876 
ovsdb_d©um
 
d©um
;

5878 
	`as£π
(
öôed
);

5879 i‡(
sm≠
) {

5880 
sm≠_node
 *
node
;

5881 
size_t
 
i
;

5883 
d©um
.
n
 = 
	`sm≠_cou¡
(
sm≠
);

5884 
d©um
.
keys
 = 
	`xmÆloc
(d©um.
n
 *  *datum.keys);

5885 
d©um
.
vÆues
 = 
	`xmÆloc
(d©um.
n
 *  *datum.values);

5887 
i
 = 0;

5888 
	`SMAP_FOR_EACH
 (
node
, 
sm≠
) {

5889 
d©um
.
keys
[
i
].
°rög
 = 
	`x°rdup
(
node
->
key
);

5890 
d©um
.
vÆues
[
i
].
°rög
 = 
	`x°rdup
(
node
->
vÆue
);

5891 
i
++;

5893 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_STRING
, OVSDB_TYPE_STRING);

5895 
	`ovsdb_d©um_öô_em±y
(&
d©um
);

5897 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
,

5898 &
ov§ec_m™agî_cﬁumns
[
OVSREC_MANAGER_COL_OTHER_CONFIG
],

5899 &
d©um
);

5900 
	}
}

5904 
	$ov§ec_m™agî_£t_°©us
(c⁄° 
ov§ec_m™agî
 *
row
, c⁄° 
sm≠
 *smap)

5906 
ovsdb_d©um
 
d©um
;

5908 
	`as£π
(
öôed
);

5909 i‡(
sm≠
) {

5910 
sm≠_node
 *
node
;

5911 
size_t
 
i
;

5913 
d©um
.
n
 = 
	`sm≠_cou¡
(
sm≠
);

5914 
d©um
.
keys
 = 
	`xmÆloc
(d©um.
n
 *  *datum.keys);

5915 
d©um
.
vÆues
 = 
	`xmÆloc
(d©um.
n
 *  *datum.values);

5917 
i
 = 0;

5918 
	`SMAP_FOR_EACH
 (
node
, 
sm≠
) {

5919 
d©um
.
keys
[
i
].
°rög
 = 
	`x°rdup
(
node
->
key
);

5920 
d©um
.
vÆues
[
i
].
°rög
 = 
	`x°rdup
(
node
->
vÆue
);

5921 
i
++;

5923 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_STRING
, OVSDB_TYPE_STRING);

5925 
	`ovsdb_d©um_öô_em±y
(&
d©um
);

5927 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
,

5928 &
ov§ec_m™agî_cﬁumns
[
OVSREC_MANAGER_COL_STATUS
],

5929 &
d©um
);

5930 
	}
}

5934 
	$ov§ec_m™agî_£t_èrgë
(c⁄° 
ov§ec_m™agî
 *
row
, c⁄° *
èrgë
)

5936 
ovsdb_d©um
 
d©um
;

5938 
	`as£π
(
öôed
);

5939 
d©um
.
n
 = 1;

5940 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

5941 
d©um
.
keys
[0].
°rög
 = 
	`x°rdup
(
èrgë
);

5942 
d©um
.
vÆues
 = 
NULL
;

5943 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_m™agî_cﬁumns
[
OVSREC_MANAGER_COL_TARGET
], &
d©um
);

5944 
	}
}

5946 
ovsdb_idl_cﬁumn
 
	gov§ec_m™agî_cﬁumns
[
OVSREC_MANAGER_N_COLUMNS
];

5949 
	$ov§ec_m™agî_cﬁumns_öô
()

5951 
ovsdb_idl_cﬁumn
 *
c
;

5954 
c
 = &
ov§ec_m™agî_cﬁ_c⁄√˘i⁄_mode
;

5955 
c
->
«me
 = "connection_mode";

5956 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

5957 
c
->
ty≥
.
key
.
íum_
 = 
	`xmÆloc
( *c->type.key.enum_);

5958 
c
->
ty≥
.
key
.
íum_
->
n
 = 2;

5959 
c
->
ty≥
.
key
.
íum_
->
keys
 = 
	`xmÆloc
(2 *  *c->type.key.enum_->keys);

5960 
c
->
ty≥
.
key
.
íum_
->
keys
[0].
°rög
 = 
	`x°rdup
("in-band");

5961 
c
->
ty≥
.
key
.
íum_
->
keys
[1].
°rög
 = 
	`x°rdup
("out-of-band");

5962 
c
->
ty≥
.
key
.
íum_
->
vÆues
 = 
NULL
;

5963 
	`ovsdb_d©um_s‹t_as£π
(
c
->
ty≥
.
key
.
íum_
, 
OVSDB_TYPE_STRING
);

5964 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

5965 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

5966 
c
->
ty≥
.
n_mö
 = 0;

5967 
c
->
ty≥
.
n_max
 = 1;

5968 
c
->
muèbÀ
 = 
åue
;

5969 
c
->
∑r£
 = 
ov§ec_m™agî_∑r£_c⁄√˘i⁄_mode
;

5970 
c
->
u≈¨£
 = 
ov§ec_m™agî_u≈¨£_c⁄√˘i⁄_mode
;

5973 
c
 = &
ov§ec_m™agî_cﬁ_exã∫Æ_ids
;

5974 
c
->
«me
 = "external_ids";

5975 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

5976 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

5977 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_STRING
);

5978 
c
->
ty≥
.
vÆue
.
u
.
°rög
.
möLí
 = 0;

5979 
c
->
ty≥
.
n_mö
 = 0;

5980 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

5981 
c
->
muèbÀ
 = 
åue
;

5982 
c
->
∑r£
 = 
ov§ec_m™agî_∑r£_exã∫Æ_ids
;

5983 
c
->
u≈¨£
 = 
ov§ec_m™agî_u≈¨£_exã∫Æ_ids
;

5986 
c
 = &
ov§ec_m™agî_cﬁ_öa˘ivôy_¥obe
;

5987 
c
->
«me
 = "inactivity_probe";

5988 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_INTEGER
);

5989 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

5990 
c
->
ty≥
.
n_mö
 = 0;

5991 
c
->
ty≥
.
n_max
 = 1;

5992 
c
->
muèbÀ
 = 
åue
;

5993 
c
->
∑r£
 = 
ov§ec_m™agî_∑r£_öa˘ivôy_¥obe
;

5994 
c
->
u≈¨£
 = 
ov§ec_m™agî_u≈¨£_öa˘ivôy_¥obe
;

5997 
c
 = &
ov§ec_m™agî_cﬁ_is_c⁄√˘ed
;

5998 
c
->
«me
 = "is_connected";

5999 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_BOOLEAN
);

6000 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

6001 
c
->
ty≥
.
n_mö
 = 1;

6002 
c
->
ty≥
.
n_max
 = 1;

6003 
c
->
muèbÀ
 = 
åue
;

6004 
c
->
∑r£
 = 
ov§ec_m™agî_∑r£_is_c⁄√˘ed
;

6005 
c
->
u≈¨£
 = 
ov§ec_m™agî_u≈¨£_is_c⁄√˘ed
;

6008 
c
 = &
ov§ec_m™agî_cﬁ_max_backoff
;

6009 
c
->
«me
 = "max_backoff";

6010 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_INTEGER
);

6011 
c
->
ty≥
.
key
.
u
.
öãgî
.
mö
 = 
	`INT64_C
(1000);

6012 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

6013 
c
->
ty≥
.
n_mö
 = 0;

6014 
c
->
ty≥
.
n_max
 = 1;

6015 
c
->
muèbÀ
 = 
åue
;

6016 
c
->
∑r£
 = 
ov§ec_m™agî_∑r£_max_backoff
;

6017 
c
->
u≈¨£
 = 
ov§ec_m™agî_u≈¨£_max_backoff
;

6020 
c
 = &
ov§ec_m™agî_cﬁ_Ÿhî_c⁄fig
;

6021 
c
->
«me
 = "other_config";

6022 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

6023 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

6024 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_STRING
);

6025 
c
->
ty≥
.
vÆue
.
u
.
°rög
.
möLí
 = 0;

6026 
c
->
ty≥
.
n_mö
 = 0;

6027 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

6028 
c
->
muèbÀ
 = 
åue
;

6029 
c
->
∑r£
 = 
ov§ec_m™agî_∑r£_Ÿhî_c⁄fig
;

6030 
c
->
u≈¨£
 = 
ov§ec_m™agî_u≈¨£_Ÿhî_c⁄fig
;

6033 
c
 = &
ov§ec_m™agî_cﬁ_°©us
;

6034 
c
->
«me
 = "status";

6035 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

6036 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

6037 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_STRING
);

6038 
c
->
ty≥
.
vÆue
.
u
.
°rög
.
möLí
 = 0;

6039 
c
->
ty≥
.
n_mö
 = 0;

6040 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

6041 
c
->
muèbÀ
 = 
åue
;

6042 
c
->
∑r£
 = 
ov§ec_m™agî_∑r£_°©us
;

6043 
c
->
u≈¨£
 = 
ov§ec_m™agî_u≈¨£_°©us
;

6046 
c
 = &
ov§ec_m™agî_cﬁ_èrgë
;

6047 
c
->
«me
 = "target";

6048 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

6049 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

6050 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

6051 
c
->
ty≥
.
n_mö
 = 1;

6052 
c
->
ty≥
.
n_max
 = 1;

6053 
c
->
muèbÀ
 = 
åue
;

6054 
c
->
∑r£
 = 
ov§ec_m™agî_∑r£_èrgë
;

6055 
c
->
u≈¨£
 = 
ov§ec_m™agî_u≈¨£_èrgë
;

6056 
	}
}

6061 
	$ov§ec_múr‹_∑r£_exã∫Æ_ids
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

6063 
ov§ec_múr‹
 *
row
 = 
	`ov§ec_múr‹_ˇ°
(
row_
);

6064 
size_t
 
i
;

6066 
	`as£π
(
öôed
);

6067 
	`sm≠_öô
(&
row
->
exã∫Æ_ids
);

6068 
i
 = 0; i < 
d©um
->
n
; i++) {

6069 
	`sm≠_add
(&
row
->
exã∫Æ_ids
,

6070 
d©um
->
keys
[
i
].
°rög
,

6071 
d©um
->
vÆues
[
i
].
°rög
);

6073 
	}
}

6076 
	$ov§ec_múr‹_∑r£_«me
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

6078 
ov§ec_múr‹
 *
row
 = 
	`ov§ec_múr‹_ˇ°
(
row_
);

6080 
	`as£π
(
öôed
);

6081 i‡(
d©um
->
n
 >= 1) {

6082 
row
->
«me
 = 
d©um
->
keys
[0].
°rög
;

6084 
row
->
«me
 = "";

6086 
	}
}

6089 
	$ov§ec_múr‹_∑r£_ouçut_p‹t
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

6091 
ov§ec_múr‹
 *
row
 = 
	`ov§ec_múr‹_ˇ°
(
row_
);

6093 
	`as£π
(
öôed
);

6094 i‡(
d©um
->
n
 >= 1) {

6095 
row
->
ouçut_p‹t
 = 
	`ov§ec_p‹t_ˇ°
(
	`ovsdb_idl_gë_row_¨c
(
row_
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_PORT
], &
d©um
->
keys
[0].
uuid
));

6097 
row
->
ouçut_p‹t
 = 
NULL
;

6099 
	}
}

6102 
	$ov§ec_múr‹_∑r£_ouçut_vœn
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

6104 
ov§ec_múr‹
 *
row
 = 
	`ov§ec_múr‹_ˇ°
(
row_
);

6105 
size_t
 
n
 = 
	`MIN
(1, 
d©um
->n);

6106 
size_t
 
i
;

6108 
	`as£π
(
öôed
);

6109 
row
->
ouçut_vœn
 = 
NULL
;

6110 
row
->
n_ouçut_vœn
 = 0;

6111 
i
 = 0; i < 
n
; i++) {

6112 i‡(!
row
->
n_ouçut_vœn
) {

6113 
row
->
ouçut_vœn
 = 
	`xmÆloc
(
n
 *  *row->output_vlan);

6115 
row
->
ouçut_vœn
[row->
n_ouçut_vœn
] = 
d©um
->
keys
[
i
].
öãgî
;

6116 
row
->
n_ouçut_vœn
++;

6118 
	}
}

6121 
	$ov§ec_múr‹_∑r£_£À˘_Æl
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

6123 
ov§ec_múr‹
 *
row
 = 
	`ov§ec_múr‹_ˇ°
(
row_
);

6125 
	`as£π
(
öôed
);

6126 i‡(
d©um
->
n
 >= 1) {

6127 
row
->
£À˘_Æl
 = 
d©um
->
keys
[0].
boﬁón
;

6129 
row
->
£À˘_Æl
 = 
Ál£
;

6131 
	}
}

6134 
	$ov§ec_múr‹_∑r£_£À˘_d°_p‹t
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

6136 
ov§ec_múr‹
 *
row
 = 
	`ov§ec_múr‹_ˇ°
(
row_
);

6137 
size_t
 
i
;

6139 
	`as£π
(
öôed
);

6140 
row
->
£À˘_d°_p‹t
 = 
NULL
;

6141 
row
->
n_£À˘_d°_p‹t
 = 0;

6142 
i
 = 0; i < 
d©um
->
n
; i++) {

6143 
ov§ec_p‹t
 *
keyRow
 = 
	`ov§ec_p‹t_ˇ°
(
	`ovsdb_idl_gë_row_¨c
(
row_
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_PORT
], &
d©um
->
keys
[
i
].
uuid
));

6144 i‡(
keyRow
) {

6145 i‡(!
row
->
n_£À˘_d°_p‹t
) {

6146 
row
->
£À˘_d°_p‹t
 = 
	`xmÆloc
(
d©um
->
n
 *  *row->select_dst_port);

6148 
row
->
£À˘_d°_p‹t
[row->
n_£À˘_d°_p‹t
] = 
keyRow
;

6149 
row
->
n_£À˘_d°_p‹t
++;

6152 
	}
}

6155 
	$ov§ec_múr‹_∑r£_£À˘_§c_p‹t
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

6157 
ov§ec_múr‹
 *
row
 = 
	`ov§ec_múr‹_ˇ°
(
row_
);

6158 
size_t
 
i
;

6160 
	`as£π
(
öôed
);

6161 
row
->
£À˘_§c_p‹t
 = 
NULL
;

6162 
row
->
n_£À˘_§c_p‹t
 = 0;

6163 
i
 = 0; i < 
d©um
->
n
; i++) {

6164 
ov§ec_p‹t
 *
keyRow
 = 
	`ov§ec_p‹t_ˇ°
(
	`ovsdb_idl_gë_row_¨c
(
row_
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_PORT
], &
d©um
->
keys
[
i
].
uuid
));

6165 i‡(
keyRow
) {

6166 i‡(!
row
->
n_£À˘_§c_p‹t
) {

6167 
row
->
£À˘_§c_p‹t
 = 
	`xmÆloc
(
d©um
->
n
 *  *row->select_src_port);

6169 
row
->
£À˘_§c_p‹t
[row->
n_£À˘_§c_p‹t
] = 
keyRow
;

6170 
row
->
n_£À˘_§c_p‹t
++;

6173 
	}
}

6176 
	$ov§ec_múr‹_∑r£_£À˘_vœn
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

6178 
ov§ec_múr‹
 *
row
 = 
	`ov§ec_múr‹_ˇ°
(
row_
);

6179 
size_t
 
n
 = 
	`MIN
(4096, 
d©um
->n);

6180 
size_t
 
i
;

6182 
	`as£π
(
öôed
);

6183 
row
->
£À˘_vœn
 = 
NULL
;

6184 
row
->
n_£À˘_vœn
 = 0;

6185 
i
 = 0; i < 
n
; i++) {

6186 i‡(!
row
->
n_£À˘_vœn
) {

6187 
row
->
£À˘_vœn
 = 
	`xmÆloc
(
n
 *  *row->select_vlan);

6189 
row
->
£À˘_vœn
[row->
n_£À˘_vœn
] = 
d©um
->
keys
[
i
].
öãgî
;

6190 
row
->
n_£À˘_vœn
++;

6192 
	}
}

6195 
	$ov§ec_múr‹_∑r£_°©i°ics
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

6197 
ov§ec_múr‹
 *
row
 = 
	`ov§ec_múr‹_ˇ°
(
row_
);

6198 
size_t
 
i
;

6200 
	`as£π
(
öôed
);

6201 
row
->
key_°©i°ics
 = 
NULL
;

6202 
row
->
vÆue_°©i°ics
 = 
NULL
;

6203 
row
->
n_°©i°ics
 = 0;

6204 
i
 = 0; i < 
d©um
->
n
; i++) {

6205 i‡(!
row
->
n_°©i°ics
) {

6206 
row
->
key_°©i°ics
 = 
	`xmÆloc
(
d©um
->
n
 *  *row->key_statistics);

6207 
row
->
vÆue_°©i°ics
 = 
	`xmÆloc
(
d©um
->
n
 *  *row->value_statistics);

6209 
row
->
key_°©i°ics
[row->
n_°©i°ics
] = 
d©um
->
keys
[
i
].
°rög
;

6210 
row
->
vÆue_°©i°ics
[row->
n_°©i°ics
] = 
d©um
->
vÆues
[
i
].
öãgî
;

6211 
row
->
n_°©i°ics
++;

6213 
	}
}

6216 
	$ov§ec_múr‹_u≈¨£_exã∫Æ_ids
(
ovsdb_idl_row
 *
row_
)

6218 
ov§ec_múr‹
 *
row
 = 
	`ov§ec_múr‹_ˇ°
(
row_
);

6220 
	`as£π
(
öôed
);

6221 
	`sm≠_de°roy
(&
row
->
exã∫Æ_ids
);

6222 
	}
}

6225 
	$ov§ec_múr‹_u≈¨£_«me
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

6228 
	}
}

6231 
	$ov§ec_múr‹_u≈¨£_ouçut_p‹t
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

6234 
	}
}

6237 
	$ov§ec_múr‹_u≈¨£_ouçut_vœn
(
ovsdb_idl_row
 *
row_
)

6239 
ov§ec_múr‹
 *
row
 = 
	`ov§ec_múr‹_ˇ°
(
row_
);

6241 
	`as£π
(
öôed
);

6242 
	`‰ì
(
row
->
ouçut_vœn
);

6243 
	}
}

6246 
	$ov§ec_múr‹_u≈¨£_£À˘_Æl
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

6249 
	}
}

6252 
	$ov§ec_múr‹_u≈¨£_£À˘_d°_p‹t
(
ovsdb_idl_row
 *
row_
)

6254 
ov§ec_múr‹
 *
row
 = 
	`ov§ec_múr‹_ˇ°
(
row_
);

6256 
	`as£π
(
öôed
);

6257 
	`‰ì
(
row
->
£À˘_d°_p‹t
);

6258 
	}
}

6261 
	$ov§ec_múr‹_u≈¨£_£À˘_§c_p‹t
(
ovsdb_idl_row
 *
row_
)

6263 
ov§ec_múr‹
 *
row
 = 
	`ov§ec_múr‹_ˇ°
(
row_
);

6265 
	`as£π
(
öôed
);

6266 
	`‰ì
(
row
->
£À˘_§c_p‹t
);

6267 
	}
}

6270 
	$ov§ec_múr‹_u≈¨£_£À˘_vœn
(
ovsdb_idl_row
 *
row_
)

6272 
ov§ec_múr‹
 *
row
 = 
	`ov§ec_múr‹_ˇ°
(
row_
);

6274 
	`as£π
(
öôed
);

6275 
	`‰ì
(
row
->
£À˘_vœn
);

6276 
	}
}

6279 
	$ov§ec_múr‹_u≈¨£_°©i°ics
(
ovsdb_idl_row
 *
row_
)

6281 
ov§ec_múr‹
 *
row
 = 
	`ov§ec_múr‹_ˇ°
(
row_
);

6283 
	`as£π
(
öôed
);

6284 
	`‰ì
(
row
->
key_°©i°ics
);

6285 
	`‰ì
(
row
->
vÆue_°©i°ics
);

6286 
	}
}

6289 
	$ov§ec_múr‹_öô__
(
ovsdb_idl_row
 *
row
)

6291 
	`ov§ec_múr‹_öô
(
	`ov§ec_múr‹_ˇ°
(
row
));

6292 
	}
}

6295 
	$ov§ec_múr‹_öô
(
ov§ec_múr‹
 *
row
)

6297 
	`mem£t
(
row
, 0,  *row);

6298 
	`sm≠_öô
(&
row
->
exã∫Æ_ids
);

6299 
	}
}

6301 c⁄° 
ov§ec_múr‹
 *

6302 
	$ov§ec_múr‹_fú°
(c⁄° 
ovsdb_idl
 *
idl
)

6304  
	`ov§ec_múr‹_ˇ°
(
	`ovsdb_idl_fú°_row
(
idl
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_MIRROR
]));

6305 
	}
}

6307 c⁄° 
ov§ec_múr‹
 *

6308 
	$ov§ec_múr‹_√xt
(c⁄° 
ov§ec_múr‹
 *
row
)

6310  
	`ov§ec_múr‹_ˇ°
(
	`ovsdb_idl_√xt_row
(&
row
->
hódî_
));

6311 
	}
}

6314 
	$ov§ec_múr‹_dñëe
(c⁄° 
ov§ec_múr‹
 *
row
)

6316 
	`ovsdb_idl_txn_dñëe
(&
row
->
hódî_
);

6317 
	}
}

6319 
ov§ec_múr‹
 *

6320 
	$ov§ec_múr‹_ö£π
(
ovsdb_idl_txn
 *
txn
)

6322  
	`ov§ec_múr‹_ˇ°
(
	`ovsdb_idl_txn_ö£π
(
txn
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_MIRROR
], 
NULL
));

6323 
	}
}

6327 
	$ov§ec_múr‹_vîify_exã∫Æ_ids
(c⁄° 
ov§ec_múr‹
 *
row
)

6329 
	`as£π
(
öôed
);

6330 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_múr‹_cﬁumns
[
OVSREC_MIRROR_COL_EXTERNAL_IDS
]);

6331 
	}
}

6334 
	$ov§ec_múr‹_vîify_«me
(c⁄° 
ov§ec_múr‹
 *
row
)

6336 
	`as£π
(
öôed
);

6337 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_múr‹_cﬁumns
[
OVSREC_MIRROR_COL_NAME
]);

6338 
	}
}

6341 
	$ov§ec_múr‹_vîify_ouçut_p‹t
(c⁄° 
ov§ec_múr‹
 *
row
)

6343 
	`as£π
(
öôed
);

6344 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_múr‹_cﬁumns
[
OVSREC_MIRROR_COL_OUTPUT_PORT
]);

6345 
	}
}

6348 
	$ov§ec_múr‹_vîify_ouçut_vœn
(c⁄° 
ov§ec_múr‹
 *
row
)

6350 
	`as£π
(
öôed
);

6351 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_múr‹_cﬁumns
[
OVSREC_MIRROR_COL_OUTPUT_VLAN
]);

6352 
	}
}

6355 
	$ov§ec_múr‹_vîify_£À˘_Æl
(c⁄° 
ov§ec_múr‹
 *
row
)

6357 
	`as£π
(
öôed
);

6358 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_múr‹_cﬁumns
[
OVSREC_MIRROR_COL_SELECT_ALL
]);

6359 
	}
}

6362 
	$ov§ec_múr‹_vîify_£À˘_d°_p‹t
(c⁄° 
ov§ec_múr‹
 *
row
)

6364 
	`as£π
(
öôed
);

6365 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_múr‹_cﬁumns
[
OVSREC_MIRROR_COL_SELECT_DST_PORT
]);

6366 
	}
}

6369 
	$ov§ec_múr‹_vîify_£À˘_§c_p‹t
(c⁄° 
ov§ec_múr‹
 *
row
)

6371 
	`as£π
(
öôed
);

6372 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_múr‹_cﬁumns
[
OVSREC_MIRROR_COL_SELECT_SRC_PORT
]);

6373 
	}
}

6376 
	$ov§ec_múr‹_vîify_£À˘_vœn
(c⁄° 
ov§ec_múr‹
 *
row
)

6378 
	`as£π
(
öôed
);

6379 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_múr‹_cﬁumns
[
OVSREC_MIRROR_COL_SELECT_VLAN
]);

6380 
	}
}

6383 
	$ov§ec_múr‹_vîify_°©i°ics
(c⁄° 
ov§ec_múr‹
 *
row
)

6385 
	`as£π
(
öôed
);

6386 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_múr‹_cﬁumns
[
OVSREC_MIRROR_COL_STATISTICS
]);

6387 
	}
}

6405 c⁄° 
ovsdb_d©um
 *

6406 
	$ov§ec_múr‹_gë_exã∫Æ_ids
(c⁄° 
ov§ec_múr‹
 *
row
,

6407 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
,

6408 
ovsdb_©omic_ty≥
 
vÆue_ty≥
 
OVS_UNUSED
)

6410 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

6411 
	`as£π
(
vÆue_ty≥
 =
OVSDB_TYPE_STRING
);

6412  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_múr‹_cﬁ_exã∫Æ_ids
);

6413 
	}
}

6430 c⁄° 
ovsdb_d©um
 *

6431 
	$ov§ec_múr‹_gë_«me
(c⁄° 
ov§ec_múr‹
 *
row
,

6432 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

6434 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

6435  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_múr‹_cﬁ_«me
);

6436 
	}
}

6453 c⁄° 
ovsdb_d©um
 *

6454 
	$ov§ec_múr‹_gë_ouçut_p‹t
(c⁄° 
ov§ec_múr‹
 *
row
,

6455 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

6457 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_UUID
);

6458  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_múr‹_cﬁ_ouçut_p‹t
);

6459 
	}
}

6476 c⁄° 
ovsdb_d©um
 *

6477 
	$ov§ec_múr‹_gë_ouçut_vœn
(c⁄° 
ov§ec_múr‹
 *
row
,

6478 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

6480 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_INTEGER
);

6481  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_múr‹_cﬁ_ouçut_vœn
);

6482 
	}
}

6499 c⁄° 
ovsdb_d©um
 *

6500 
	$ov§ec_múr‹_gë_£À˘_Æl
(c⁄° 
ov§ec_múr‹
 *
row
,

6501 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

6503 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_BOOLEAN
);

6504  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_múr‹_cﬁ_£À˘_Æl
);

6505 
	}
}

6522 c⁄° 
ovsdb_d©um
 *

6523 
	$ov§ec_múr‹_gë_£À˘_d°_p‹t
(c⁄° 
ov§ec_múr‹
 *
row
,

6524 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

6526 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_UUID
);

6527  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_múr‹_cﬁ_£À˘_d°_p‹t
);

6528 
	}
}

6545 c⁄° 
ovsdb_d©um
 *

6546 
	$ov§ec_múr‹_gë_£À˘_§c_p‹t
(c⁄° 
ov§ec_múr‹
 *
row
,

6547 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

6549 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_UUID
);

6550  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_múr‹_cﬁ_£À˘_§c_p‹t
);

6551 
	}
}

6568 c⁄° 
ovsdb_d©um
 *

6569 
	$ov§ec_múr‹_gë_£À˘_vœn
(c⁄° 
ov§ec_múr‹
 *
row
,

6570 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

6572 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_INTEGER
);

6573  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_múr‹_cﬁ_£À˘_vœn
);

6574 
	}
}

6592 c⁄° 
ovsdb_d©um
 *

6593 
	$ov§ec_múr‹_gë_°©i°ics
(c⁄° 
ov§ec_múr‹
 *
row
,

6594 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
,

6595 
ovsdb_©omic_ty≥
 
vÆue_ty≥
 
OVS_UNUSED
)

6597 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

6598 
	`as£π
(
vÆue_ty≥
 =
OVSDB_TYPE_INTEGER
);

6599  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_múr‹_cﬁ_°©i°ics
);

6600 
	}
}

6603 
	$ov§ec_múr‹_£t_exã∫Æ_ids
(c⁄° 
ov§ec_múr‹
 *
row
, c⁄° 
sm≠
 *smap)

6605 
ovsdb_d©um
 
d©um
;

6607 
	`as£π
(
öôed
);

6608 i‡(
sm≠
) {

6609 
sm≠_node
 *
node
;

6610 
size_t
 
i
;

6612 
d©um
.
n
 = 
	`sm≠_cou¡
(
sm≠
);

6613 
d©um
.
keys
 = 
	`xmÆloc
(d©um.
n
 *  *datum.keys);

6614 
d©um
.
vÆues
 = 
	`xmÆloc
(d©um.
n
 *  *datum.values);

6616 
i
 = 0;

6617 
	`SMAP_FOR_EACH
 (
node
, 
sm≠
) {

6618 
d©um
.
keys
[
i
].
°rög
 = 
	`x°rdup
(
node
->
key
);

6619 
d©um
.
vÆues
[
i
].
°rög
 = 
	`x°rdup
(
node
->
vÆue
);

6620 
i
++;

6622 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_STRING
, OVSDB_TYPE_STRING);

6624 
	`ovsdb_d©um_öô_em±y
(&
d©um
);

6626 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
,

6627 &
ov§ec_múr‹_cﬁumns
[
OVSREC_MIRROR_COL_EXTERNAL_IDS
],

6628 &
d©um
);

6629 
	}
}

6633 
	$ov§ec_múr‹_£t_«me
(c⁄° 
ov§ec_múr‹
 *
row
, c⁄° *
«me
)

6635 
ovsdb_d©um
 
d©um
;

6637 
	`as£π
(
öôed
);

6638 
d©um
.
n
 = 1;

6639 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

6640 
d©um
.
keys
[0].
°rög
 = 
	`x°rdup
(
«me
);

6641 
d©um
.
vÆues
 = 
NULL
;

6642 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_múr‹_cﬁumns
[
OVSREC_MIRROR_COL_NAME
], &
d©um
);

6643 
	}
}

6646 
	$ov§ec_múr‹_£t_ouçut_p‹t
(c⁄° 
ov§ec_múr‹
 *
row
, c⁄° 
ov§ec_p‹t
 *
ouçut_p‹t
)

6648 
ovsdb_d©um
 
d©um
;

6650 
	`as£π
(
öôed
);

6651 i‡(
ouçut_p‹t
) {

6652 
d©um
.
n
 = 1;

6653 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

6654 
d©um
.
keys
[0].
uuid
 = 
ouçut_p‹t
->
hódî_
.uuid;

6656 
d©um
.
n
 = 0;

6657 
d©um
.
keys
 = 
NULL
;

6659 
d©um
.
vÆues
 = 
NULL
;

6660 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_múr‹_cﬁumns
[
OVSREC_MIRROR_COL_OUTPUT_PORT
], &
d©um
);

6661 
	}
}

6664 
	$ov§ec_múr‹_£t_ouçut_vœn
(c⁄° 
ov§ec_múr‹
 *
row
, c⁄° 
öt64_t
 *
ouçut_vœn
, 
size_t
 
n_ouçut_vœn
)

6666 
ovsdb_d©um
 
d©um
;

6667 
size_t
 
i
;

6669 
	`as£π
(
öôed
);

6670 
d©um
.
n
 = 
n_ouçut_vœn
;

6671 
d©um
.
keys
 = 
	`xmÆloc
(
n_ouçut_vœn
 *  *datum.keys);

6672 
d©um
.
vÆues
 = 
NULL
;

6673 
i
 = 0; i < 
n_ouçut_vœn
; i++) {

6674 
d©um
.
keys
[
i
].
öãgî
 = 
ouçut_vœn
[i];

6676 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_INTEGER
, 
OVSDB_TYPE_VOID
);

6677 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_múr‹_cﬁumns
[
OVSREC_MIRROR_COL_OUTPUT_VLAN
], &
d©um
);

6678 
	}
}

6681 
	$ov§ec_múr‹_£t_£À˘_Æl
(c⁄° 
ov§ec_múr‹
 *
row
, 
boﬁ
 
£À˘_Æl
)

6683 
ovsdb_d©um
 
d©um
;

6685 
	`as£π
(
öôed
);

6686 
d©um
.
n
 = 1;

6687 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

6688 
d©um
.
keys
[0].
boﬁón
 = 
£À˘_Æl
;

6689 
d©um
.
vÆues
 = 
NULL
;

6690 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_múr‹_cﬁumns
[
OVSREC_MIRROR_COL_SELECT_ALL
], &
d©um
);

6691 
	}
}

6694 
	$ov§ec_múr‹_£t_£À˘_d°_p‹t
(c⁄° 
ov§ec_múr‹
 *
row
, 
ov§ec_p‹t
 **
£À˘_d°_p‹t
, 
size_t
 
n_£À˘_d°_p‹t
)

6696 
ovsdb_d©um
 
d©um
;

6697 
size_t
 
i
;

6699 
	`as£π
(
öôed
);

6700 
d©um
.
n
 = 
n_£À˘_d°_p‹t
;

6701 
d©um
.
keys
 = 
	`xmÆloc
(
n_£À˘_d°_p‹t
 *  *datum.keys);

6702 
d©um
.
vÆues
 = 
NULL
;

6703 
i
 = 0; i < 
n_£À˘_d°_p‹t
; i++) {

6704 
d©um
.
keys
[
i
].
uuid
 = 
£À˘_d°_p‹t
[i]->
hódî_
.uuid;

6706 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_UUID
, 
OVSDB_TYPE_VOID
);

6707 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_múr‹_cﬁumns
[
OVSREC_MIRROR_COL_SELECT_DST_PORT
], &
d©um
);

6708 
	}
}

6711 
	$ov§ec_múr‹_£t_£À˘_§c_p‹t
(c⁄° 
ov§ec_múr‹
 *
row
, 
ov§ec_p‹t
 **
£À˘_§c_p‹t
, 
size_t
 
n_£À˘_§c_p‹t
)

6713 
ovsdb_d©um
 
d©um
;

6714 
size_t
 
i
;

6716 
	`as£π
(
öôed
);

6717 
d©um
.
n
 = 
n_£À˘_§c_p‹t
;

6718 
d©um
.
keys
 = 
	`xmÆloc
(
n_£À˘_§c_p‹t
 *  *datum.keys);

6719 
d©um
.
vÆues
 = 
NULL
;

6720 
i
 = 0; i < 
n_£À˘_§c_p‹t
; i++) {

6721 
d©um
.
keys
[
i
].
uuid
 = 
£À˘_§c_p‹t
[i]->
hódî_
.uuid;

6723 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_UUID
, 
OVSDB_TYPE_VOID
);

6724 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_múr‹_cﬁumns
[
OVSREC_MIRROR_COL_SELECT_SRC_PORT
], &
d©um
);

6725 
	}
}

6728 
	$ov§ec_múr‹_£t_£À˘_vœn
(c⁄° 
ov§ec_múr‹
 *
row
, c⁄° 
öt64_t
 *
£À˘_vœn
, 
size_t
 
n_£À˘_vœn
)

6730 
ovsdb_d©um
 
d©um
;

6731 
size_t
 
i
;

6733 
	`as£π
(
öôed
);

6734 
d©um
.
n
 = 
n_£À˘_vœn
;

6735 
d©um
.
keys
 = 
	`xmÆloc
(
n_£À˘_vœn
 *  *datum.keys);

6736 
d©um
.
vÆues
 = 
NULL
;

6737 
i
 = 0; i < 
n_£À˘_vœn
; i++) {

6738 
d©um
.
keys
[
i
].
öãgî
 = 
£À˘_vœn
[i];

6740 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_INTEGER
, 
OVSDB_TYPE_VOID
);

6741 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_múr‹_cﬁumns
[
OVSREC_MIRROR_COL_SELECT_VLAN
], &
d©um
);

6742 
	}
}

6745 
	$ov§ec_múr‹_£t_°©i°ics
(c⁄° 
ov§ec_múr‹
 *
row
, **
key_°©i°ics
, c⁄° 
öt64_t
 *
vÆue_°©i°ics
, 
size_t
 
n_°©i°ics
)

6747 
ovsdb_d©um
 
d©um
;

6748 
size_t
 
i
;

6750 
	`as£π
(
öôed
);

6751 
d©um
.
n
 = 
n_°©i°ics
;

6752 
d©um
.
keys
 = 
	`xmÆloc
(
n_°©i°ics
 *  *datum.keys);

6753 
d©um
.
vÆues
 = 
	`xmÆloc
(
n_°©i°ics
 *  *datum.values);

6754 
i
 = 0; i < 
n_°©i°ics
; i++) {

6755 
d©um
.
keys
[
i
].
°rög
 = 
	`x°rdup
(
key_°©i°ics
[i]);

6756 
d©um
.
vÆues
[
i
].
öãgî
 = 
vÆue_°©i°ics
[i];

6758 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_STRING
, 
OVSDB_TYPE_INTEGER
);

6759 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_múr‹_cﬁumns
[
OVSREC_MIRROR_COL_STATISTICS
], &
d©um
);

6760 
	}
}

6762 
ovsdb_idl_cﬁumn
 
	gov§ec_múr‹_cﬁumns
[
OVSREC_MIRROR_N_COLUMNS
];

6765 
	$ov§ec_múr‹_cﬁumns_öô
()

6767 
ovsdb_idl_cﬁumn
 *
c
;

6770 
c
 = &
ov§ec_múr‹_cﬁ_exã∫Æ_ids
;

6771 
c
->
«me
 = "external_ids";

6772 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

6773 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

6774 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_STRING
);

6775 
c
->
ty≥
.
vÆue
.
u
.
°rög
.
möLí
 = 0;

6776 
c
->
ty≥
.
n_mö
 = 0;

6777 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

6778 
c
->
muèbÀ
 = 
åue
;

6779 
c
->
∑r£
 = 
ov§ec_múr‹_∑r£_exã∫Æ_ids
;

6780 
c
->
u≈¨£
 = 
ov§ec_múr‹_u≈¨£_exã∫Æ_ids
;

6783 
c
 = &
ov§ec_múr‹_cﬁ_«me
;

6784 
c
->
«me
 = "name";

6785 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

6786 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

6787 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

6788 
c
->
ty≥
.
n_mö
 = 1;

6789 
c
->
ty≥
.
n_max
 = 1;

6790 
c
->
muèbÀ
 = 
åue
;

6791 
c
->
∑r£
 = 
ov§ec_múr‹_∑r£_«me
;

6792 
c
->
u≈¨£
 = 
ov§ec_múr‹_u≈¨£_«me
;

6795 
c
 = &
ov§ec_múr‹_cﬁ_ouçut_p‹t
;

6796 
c
->
«me
 = "output_port";

6797 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_UUID
);

6798 
c
->
ty≥
.
key
.
u
.
uuid
.
ªfTabÀName
 = "Port";

6799 
c
->
ty≥
.
key
.
u
.
uuid
.
ªfTy≥
 = 
OVSDB_REF_WEAK
;

6800 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

6801 
c
->
ty≥
.
n_mö
 = 0;

6802 
c
->
ty≥
.
n_max
 = 1;

6803 
c
->
muèbÀ
 = 
åue
;

6804 
c
->
∑r£
 = 
ov§ec_múr‹_∑r£_ouçut_p‹t
;

6805 
c
->
u≈¨£
 = 
ov§ec_múr‹_u≈¨£_ouçut_p‹t
;

6808 
c
 = &
ov§ec_múr‹_cﬁ_ouçut_vœn
;

6809 
c
->
«me
 = "output_vlan";

6810 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_INTEGER
);

6811 
c
->
ty≥
.
key
.
u
.
öãgî
.
mö
 = 
	`INT64_C
(1);

6812 
c
->
ty≥
.
key
.
u
.
öãgî
.
max
 = 
	`INT64_C
(4095);

6813 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

6814 
c
->
ty≥
.
n_mö
 = 0;

6815 
c
->
ty≥
.
n_max
 = 1;

6816 
c
->
muèbÀ
 = 
åue
;

6817 
c
->
∑r£
 = 
ov§ec_múr‹_∑r£_ouçut_vœn
;

6818 
c
->
u≈¨£
 = 
ov§ec_múr‹_u≈¨£_ouçut_vœn
;

6821 
c
 = &
ov§ec_múr‹_cﬁ_£À˘_Æl
;

6822 
c
->
«me
 = "select_all";

6823 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_BOOLEAN
);

6824 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

6825 
c
->
ty≥
.
n_mö
 = 1;

6826 
c
->
ty≥
.
n_max
 = 1;

6827 
c
->
muèbÀ
 = 
åue
;

6828 
c
->
∑r£
 = 
ov§ec_múr‹_∑r£_£À˘_Æl
;

6829 
c
->
u≈¨£
 = 
ov§ec_múr‹_u≈¨£_£À˘_Æl
;

6832 
c
 = &
ov§ec_múr‹_cﬁ_£À˘_d°_p‹t
;

6833 
c
->
«me
 = "select_dst_port";

6834 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_UUID
);

6835 
c
->
ty≥
.
key
.
u
.
uuid
.
ªfTabÀName
 = "Port";

6836 
c
->
ty≥
.
key
.
u
.
uuid
.
ªfTy≥
 = 
OVSDB_REF_WEAK
;

6837 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

6838 
c
->
ty≥
.
n_mö
 = 0;

6839 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

6840 
c
->
muèbÀ
 = 
åue
;

6841 
c
->
∑r£
 = 
ov§ec_múr‹_∑r£_£À˘_d°_p‹t
;

6842 
c
->
u≈¨£
 = 
ov§ec_múr‹_u≈¨£_£À˘_d°_p‹t
;

6845 
c
 = &
ov§ec_múr‹_cﬁ_£À˘_§c_p‹t
;

6846 
c
->
«me
 = "select_src_port";

6847 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_UUID
);

6848 
c
->
ty≥
.
key
.
u
.
uuid
.
ªfTabÀName
 = "Port";

6849 
c
->
ty≥
.
key
.
u
.
uuid
.
ªfTy≥
 = 
OVSDB_REF_WEAK
;

6850 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

6851 
c
->
ty≥
.
n_mö
 = 0;

6852 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

6853 
c
->
muèbÀ
 = 
åue
;

6854 
c
->
∑r£
 = 
ov§ec_múr‹_∑r£_£À˘_§c_p‹t
;

6855 
c
->
u≈¨£
 = 
ov§ec_múr‹_u≈¨£_£À˘_§c_p‹t
;

6858 
c
 = &
ov§ec_múr‹_cﬁ_£À˘_vœn
;

6859 
c
->
«me
 = "select_vlan";

6860 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_INTEGER
);

6861 
c
->
ty≥
.
key
.
u
.
öãgî
.
mö
 = 
	`INT64_C
(0);

6862 
c
->
ty≥
.
key
.
u
.
öãgî
.
max
 = 
	`INT64_C
(4095);

6863 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

6864 
c
->
ty≥
.
n_mö
 = 0;

6865 
c
->
ty≥
.
n_max
 = 4096;

6866 
c
->
muèbÀ
 = 
åue
;

6867 
c
->
∑r£
 = 
ov§ec_múr‹_∑r£_£À˘_vœn
;

6868 
c
->
u≈¨£
 = 
ov§ec_múr‹_u≈¨£_£À˘_vœn
;

6871 
c
 = &
ov§ec_múr‹_cﬁ_°©i°ics
;

6872 
c
->
«me
 = "statistics";

6873 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

6874 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

6875 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_INTEGER
);

6876 
c
->
ty≥
.
n_mö
 = 0;

6877 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

6878 
c
->
muèbÀ
 = 
åue
;

6879 
c
->
∑r£
 = 
ov§ec_múr‹_∑r£_°©i°ics
;

6880 
c
->
u≈¨£
 = 
ov§ec_múr‹_u≈¨£_°©i°ics
;

6881 
	}
}

6886 
	$ov§ec_√tÊow_∑r£_a˘ive_timeout
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

6888 
ov§ec_√tÊow
 *
row
 = 
	`ov§ec_√tÊow_ˇ°
(
row_
);

6890 
	`as£π
(
öôed
);

6891 i‡(
d©um
->
n
 >= 1) {

6892 
row
->
a˘ive_timeout
 = 
d©um
->
keys
[0].
öãgî
;

6894 
row
->
a˘ive_timeout
 = 0;

6896 
	}
}

6899 
	$ov§ec_√tÊow_∑r£_add_id_to_öãrÁ˚
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

6901 
ov§ec_√tÊow
 *
row
 = 
	`ov§ec_√tÊow_ˇ°
(
row_
);

6903 
	`as£π
(
öôed
);

6904 i‡(
d©um
->
n
 >= 1) {

6905 
row
->
add_id_to_öãrÁ˚
 = 
d©um
->
keys
[0].
boﬁón
;

6907 
row
->
add_id_to_öãrÁ˚
 = 
Ál£
;

6909 
	}
}

6912 
	$ov§ec_√tÊow_∑r£_ígöe_id
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

6914 
ov§ec_√tÊow
 *
row
 = 
	`ov§ec_√tÊow_ˇ°
(
row_
);

6915 
size_t
 
n
 = 
	`MIN
(1, 
d©um
->n);

6916 
size_t
 
i
;

6918 
	`as£π
(
öôed
);

6919 
row
->
ígöe_id
 = 
NULL
;

6920 
row
->
n_ígöe_id
 = 0;

6921 
i
 = 0; i < 
n
; i++) {

6922 i‡(!
row
->
n_ígöe_id
) {

6923 
row
->
ígöe_id
 = 
	`xmÆloc
(
n
 *  *row->engine_id);

6925 
row
->
ígöe_id
[row->
n_ígöe_id
] = 
d©um
->
keys
[
i
].
öãgî
;

6926 
row
->
n_ígöe_id
++;

6928 
	}
}

6931 
	$ov§ec_√tÊow_∑r£_ígöe_ty≥
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

6933 
ov§ec_√tÊow
 *
row
 = 
	`ov§ec_√tÊow_ˇ°
(
row_
);

6934 
size_t
 
n
 = 
	`MIN
(1, 
d©um
->n);

6935 
size_t
 
i
;

6937 
	`as£π
(
öôed
);

6938 
row
->
ígöe_ty≥
 = 
NULL
;

6939 
row
->
n_ígöe_ty≥
 = 0;

6940 
i
 = 0; i < 
n
; i++) {

6941 i‡(!
row
->
n_ígöe_ty≥
) {

6942 
row
->
ígöe_ty≥
 = 
	`xmÆloc
(
n
 *  *row->engine_type);

6944 
row
->
ígöe_ty≥
[row->
n_ígöe_ty≥
] = 
d©um
->
keys
[
i
].
öãgî
;

6945 
row
->
n_ígöe_ty≥
++;

6947 
	}
}

6950 
	$ov§ec_√tÊow_∑r£_exã∫Æ_ids
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

6952 
ov§ec_√tÊow
 *
row
 = 
	`ov§ec_√tÊow_ˇ°
(
row_
);

6953 
size_t
 
i
;

6955 
	`as£π
(
öôed
);

6956 
	`sm≠_öô
(&
row
->
exã∫Æ_ids
);

6957 
i
 = 0; i < 
d©um
->
n
; i++) {

6958 
	`sm≠_add
(&
row
->
exã∫Æ_ids
,

6959 
d©um
->
keys
[
i
].
°rög
,

6960 
d©um
->
vÆues
[
i
].
°rög
);

6962 
	}
}

6965 
	$ov§ec_√tÊow_∑r£_èrgës
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

6967 
ov§ec_√tÊow
 *
row
 = 
	`ov§ec_√tÊow_ˇ°
(
row_
);

6968 
size_t
 
i
;

6970 
	`as£π
(
öôed
);

6971 
row
->
èrgës
 = 
NULL
;

6972 
row
->
n_èrgës
 = 0;

6973 
i
 = 0; i < 
d©um
->
n
; i++) {

6974 i‡(!
row
->
n_èrgës
) {

6975 
row
->
èrgës
 = 
	`xmÆloc
(
d©um
->
n
 *  *row->targets);

6977 
row
->
èrgës
[row->
n_èrgës
] = 
d©um
->
keys
[
i
].
°rög
;

6978 
row
->
n_èrgës
++;

6980 
	}
}

6983 
	$ov§ec_√tÊow_u≈¨£_a˘ive_timeout
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

6986 
	}
}

6989 
	$ov§ec_√tÊow_u≈¨£_add_id_to_öãrÁ˚
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

6992 
	}
}

6995 
	$ov§ec_√tÊow_u≈¨£_ígöe_id
(
ovsdb_idl_row
 *
row_
)

6997 
ov§ec_√tÊow
 *
row
 = 
	`ov§ec_√tÊow_ˇ°
(
row_
);

6999 
	`as£π
(
öôed
);

7000 
	`‰ì
(
row
->
ígöe_id
);

7001 
	}
}

7004 
	$ov§ec_√tÊow_u≈¨£_ígöe_ty≥
(
ovsdb_idl_row
 *
row_
)

7006 
ov§ec_√tÊow
 *
row
 = 
	`ov§ec_√tÊow_ˇ°
(
row_
);

7008 
	`as£π
(
öôed
);

7009 
	`‰ì
(
row
->
ígöe_ty≥
);

7010 
	}
}

7013 
	$ov§ec_√tÊow_u≈¨£_exã∫Æ_ids
(
ovsdb_idl_row
 *
row_
)

7015 
ov§ec_√tÊow
 *
row
 = 
	`ov§ec_√tÊow_ˇ°
(
row_
);

7017 
	`as£π
(
öôed
);

7018 
	`sm≠_de°roy
(&
row
->
exã∫Æ_ids
);

7019 
	}
}

7022 
	$ov§ec_√tÊow_u≈¨£_èrgës
(
ovsdb_idl_row
 *
row_
)

7024 
ov§ec_√tÊow
 *
row
 = 
	`ov§ec_√tÊow_ˇ°
(
row_
);

7026 
	`as£π
(
öôed
);

7027 
	`‰ì
(
row
->
èrgës
);

7028 
	}
}

7031 
	$ov§ec_√tÊow_öô__
(
ovsdb_idl_row
 *
row
)

7033 
	`ov§ec_√tÊow_öô
(
	`ov§ec_√tÊow_ˇ°
(
row
));

7034 
	}
}

7037 
	$ov§ec_√tÊow_öô
(
ov§ec_√tÊow
 *
row
)

7039 
	`mem£t
(
row
, 0,  *row);

7040 
	`sm≠_öô
(&
row
->
exã∫Æ_ids
);

7041 
	}
}

7043 c⁄° 
ov§ec_√tÊow
 *

7044 
	$ov§ec_√tÊow_fú°
(c⁄° 
ovsdb_idl
 *
idl
)

7046  
	`ov§ec_√tÊow_ˇ°
(
	`ovsdb_idl_fú°_row
(
idl
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_NETFLOW
]));

7047 
	}
}

7049 c⁄° 
ov§ec_√tÊow
 *

7050 
	$ov§ec_√tÊow_√xt
(c⁄° 
ov§ec_√tÊow
 *
row
)

7052  
	`ov§ec_√tÊow_ˇ°
(
	`ovsdb_idl_√xt_row
(&
row
->
hódî_
));

7053 
	}
}

7056 
	$ov§ec_√tÊow_dñëe
(c⁄° 
ov§ec_√tÊow
 *
row
)

7058 
	`ovsdb_idl_txn_dñëe
(&
row
->
hódî_
);

7059 
	}
}

7061 
ov§ec_√tÊow
 *

7062 
	$ov§ec_√tÊow_ö£π
(
ovsdb_idl_txn
 *
txn
)

7064  
	`ov§ec_√tÊow_ˇ°
(
	`ovsdb_idl_txn_ö£π
(
txn
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_NETFLOW
], 
NULL
));

7065 
	}
}

7069 
	$ov§ec_√tÊow_vîify_a˘ive_timeout
(c⁄° 
ov§ec_√tÊow
 *
row
)

7071 
	`as£π
(
öôed
);

7072 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_√tÊow_cﬁumns
[
OVSREC_NETFLOW_COL_ACTIVE_TIMEOUT
]);

7073 
	}
}

7076 
	$ov§ec_√tÊow_vîify_add_id_to_öãrÁ˚
(c⁄° 
ov§ec_√tÊow
 *
row
)

7078 
	`as£π
(
öôed
);

7079 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_√tÊow_cﬁumns
[
OVSREC_NETFLOW_COL_ADD_ID_TO_INTERFACE
]);

7080 
	}
}

7083 
	$ov§ec_√tÊow_vîify_ígöe_id
(c⁄° 
ov§ec_√tÊow
 *
row
)

7085 
	`as£π
(
öôed
);

7086 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_√tÊow_cﬁumns
[
OVSREC_NETFLOW_COL_ENGINE_ID
]);

7087 
	}
}

7090 
	$ov§ec_√tÊow_vîify_ígöe_ty≥
(c⁄° 
ov§ec_√tÊow
 *
row
)

7092 
	`as£π
(
öôed
);

7093 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_√tÊow_cﬁumns
[
OVSREC_NETFLOW_COL_ENGINE_TYPE
]);

7094 
	}
}

7097 
	$ov§ec_√tÊow_vîify_exã∫Æ_ids
(c⁄° 
ov§ec_√tÊow
 *
row
)

7099 
	`as£π
(
öôed
);

7100 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_√tÊow_cﬁumns
[
OVSREC_NETFLOW_COL_EXTERNAL_IDS
]);

7101 
	}
}

7104 
	$ov§ec_√tÊow_vîify_èrgës
(c⁄° 
ov§ec_√tÊow
 *
row
)

7106 
	`as£π
(
öôed
);

7107 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_√tÊow_cﬁumns
[
OVSREC_NETFLOW_COL_TARGETS
]);

7108 
	}
}

7125 c⁄° 
ovsdb_d©um
 *

7126 
	$ov§ec_√tÊow_gë_a˘ive_timeout
(c⁄° 
ov§ec_√tÊow
 *
row
,

7127 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

7129 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_INTEGER
);

7130  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_√tÊow_cﬁ_a˘ive_timeout
);

7131 
	}
}

7148 c⁄° 
ovsdb_d©um
 *

7149 
	$ov§ec_√tÊow_gë_add_id_to_öãrÁ˚
(c⁄° 
ov§ec_√tÊow
 *
row
,

7150 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

7152 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_BOOLEAN
);

7153  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_√tÊow_cﬁ_add_id_to_öãrÁ˚
);

7154 
	}
}

7171 c⁄° 
ovsdb_d©um
 *

7172 
	$ov§ec_√tÊow_gë_ígöe_id
(c⁄° 
ov§ec_√tÊow
 *
row
,

7173 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

7175 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_INTEGER
);

7176  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_√tÊow_cﬁ_ígöe_id
);

7177 
	}
}

7194 c⁄° 
ovsdb_d©um
 *

7195 
	$ov§ec_√tÊow_gë_ígöe_ty≥
(c⁄° 
ov§ec_√tÊow
 *
row
,

7196 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

7198 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_INTEGER
);

7199  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_√tÊow_cﬁ_ígöe_ty≥
);

7200 
	}
}

7218 c⁄° 
ovsdb_d©um
 *

7219 
	$ov§ec_√tÊow_gë_exã∫Æ_ids
(c⁄° 
ov§ec_√tÊow
 *
row
,

7220 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
,

7221 
ovsdb_©omic_ty≥
 
vÆue_ty≥
 
OVS_UNUSED
)

7223 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

7224 
	`as£π
(
vÆue_ty≥
 =
OVSDB_TYPE_STRING
);

7225  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_√tÊow_cﬁ_exã∫Æ_ids
);

7226 
	}
}

7243 c⁄° 
ovsdb_d©um
 *

7244 
	$ov§ec_√tÊow_gë_èrgës
(c⁄° 
ov§ec_√tÊow
 *
row
,

7245 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

7247 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

7248  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_√tÊow_cﬁ_èrgës
);

7249 
	}
}

7252 
	$ov§ec_√tÊow_£t_a˘ive_timeout
(c⁄° 
ov§ec_√tÊow
 *
row
, 
öt64_t
 
a˘ive_timeout
)

7254 
ovsdb_d©um
 
d©um
;

7256 
	`as£π
(
öôed
);

7257 
d©um
.
n
 = 1;

7258 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

7259 
d©um
.
keys
[0].
öãgî
 = 
a˘ive_timeout
;

7260 
d©um
.
vÆues
 = 
NULL
;

7261 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_√tÊow_cﬁumns
[
OVSREC_NETFLOW_COL_ACTIVE_TIMEOUT
], &
d©um
);

7262 
	}
}

7265 
	$ov§ec_√tÊow_£t_add_id_to_öãrÁ˚
(c⁄° 
ov§ec_√tÊow
 *
row
, 
boﬁ
 
add_id_to_öãrÁ˚
)

7267 
ovsdb_d©um
 
d©um
;

7269 
	`as£π
(
öôed
);

7270 
d©um
.
n
 = 1;

7271 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

7272 
d©um
.
keys
[0].
boﬁón
 = 
add_id_to_öãrÁ˚
;

7273 
d©um
.
vÆues
 = 
NULL
;

7274 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_√tÊow_cﬁumns
[
OVSREC_NETFLOW_COL_ADD_ID_TO_INTERFACE
], &
d©um
);

7275 
	}
}

7278 
	$ov§ec_√tÊow_£t_ígöe_id
(c⁄° 
ov§ec_√tÊow
 *
row
, c⁄° 
öt64_t
 *
ígöe_id
, 
size_t
 
n_ígöe_id
)

7280 
ovsdb_d©um
 
d©um
;

7281 
size_t
 
i
;

7283 
	`as£π
(
öôed
);

7284 
d©um
.
n
 = 
n_ígöe_id
;

7285 
d©um
.
keys
 = 
	`xmÆloc
(
n_ígöe_id
 *  *datum.keys);

7286 
d©um
.
vÆues
 = 
NULL
;

7287 
i
 = 0; i < 
n_ígöe_id
; i++) {

7288 
d©um
.
keys
[
i
].
öãgî
 = 
ígöe_id
[i];

7290 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_INTEGER
, 
OVSDB_TYPE_VOID
);

7291 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_√tÊow_cﬁumns
[
OVSREC_NETFLOW_COL_ENGINE_ID
], &
d©um
);

7292 
	}
}

7295 
	$ov§ec_√tÊow_£t_ígöe_ty≥
(c⁄° 
ov§ec_√tÊow
 *
row
, c⁄° 
öt64_t
 *
ígöe_ty≥
, 
size_t
 
n_ígöe_ty≥
)

7297 
ovsdb_d©um
 
d©um
;

7298 
size_t
 
i
;

7300 
	`as£π
(
öôed
);

7301 
d©um
.
n
 = 
n_ígöe_ty≥
;

7302 
d©um
.
keys
 = 
	`xmÆloc
(
n_ígöe_ty≥
 *  *datum.keys);

7303 
d©um
.
vÆues
 = 
NULL
;

7304 
i
 = 0; i < 
n_ígöe_ty≥
; i++) {

7305 
d©um
.
keys
[
i
].
öãgî
 = 
ígöe_ty≥
[i];

7307 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_INTEGER
, 
OVSDB_TYPE_VOID
);

7308 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_√tÊow_cﬁumns
[
OVSREC_NETFLOW_COL_ENGINE_TYPE
], &
d©um
);

7309 
	}
}

7312 
	$ov§ec_√tÊow_£t_exã∫Æ_ids
(c⁄° 
ov§ec_√tÊow
 *
row
, c⁄° 
sm≠
 *smap)

7314 
ovsdb_d©um
 
d©um
;

7316 
	`as£π
(
öôed
);

7317 i‡(
sm≠
) {

7318 
sm≠_node
 *
node
;

7319 
size_t
 
i
;

7321 
d©um
.
n
 = 
	`sm≠_cou¡
(
sm≠
);

7322 
d©um
.
keys
 = 
	`xmÆloc
(d©um.
n
 *  *datum.keys);

7323 
d©um
.
vÆues
 = 
	`xmÆloc
(d©um.
n
 *  *datum.values);

7325 
i
 = 0;

7326 
	`SMAP_FOR_EACH
 (
node
, 
sm≠
) {

7327 
d©um
.
keys
[
i
].
°rög
 = 
	`x°rdup
(
node
->
key
);

7328 
d©um
.
vÆues
[
i
].
°rög
 = 
	`x°rdup
(
node
->
vÆue
);

7329 
i
++;

7331 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_STRING
, OVSDB_TYPE_STRING);

7333 
	`ovsdb_d©um_öô_em±y
(&
d©um
);

7335 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
,

7336 &
ov§ec_√tÊow_cﬁumns
[
OVSREC_NETFLOW_COL_EXTERNAL_IDS
],

7337 &
d©um
);

7338 
	}
}

7342 
	$ov§ec_√tÊow_£t_èrgës
(c⁄° 
ov§ec_√tÊow
 *
row
, **
èrgës
, 
size_t
 
n_èrgës
)

7344 
ovsdb_d©um
 
d©um
;

7345 
size_t
 
i
;

7347 
	`as£π
(
öôed
);

7348 
d©um
.
n
 = 
n_èrgës
;

7349 
d©um
.
keys
 = 
	`xmÆloc
(
n_èrgës
 *  *datum.keys);

7350 
d©um
.
vÆues
 = 
NULL
;

7351 
i
 = 0; i < 
n_èrgës
; i++) {

7352 
d©um
.
keys
[
i
].
°rög
 = 
	`x°rdup
(
èrgës
[i]);

7354 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_STRING
, 
OVSDB_TYPE_VOID
);

7355 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_√tÊow_cﬁumns
[
OVSREC_NETFLOW_COL_TARGETS
], &
d©um
);

7356 
	}
}

7358 
ovsdb_idl_cﬁumn
 
	gov§ec_√tÊow_cﬁumns
[
OVSREC_NETFLOW_N_COLUMNS
];

7361 
	$ov§ec_√tÊow_cﬁumns_öô
()

7363 
ovsdb_idl_cﬁumn
 *
c
;

7366 
c
 = &
ov§ec_√tÊow_cﬁ_a˘ive_timeout
;

7367 
c
->
«me
 = "active_timeout";

7368 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_INTEGER
);

7369 
c
->
ty≥
.
key
.
u
.
öãgî
.
mö
 = 
	`INT64_C
(-1);

7370 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

7371 
c
->
ty≥
.
n_mö
 = 1;

7372 
c
->
ty≥
.
n_max
 = 1;

7373 
c
->
muèbÀ
 = 
åue
;

7374 
c
->
∑r£
 = 
ov§ec_√tÊow_∑r£_a˘ive_timeout
;

7375 
c
->
u≈¨£
 = 
ov§ec_√tÊow_u≈¨£_a˘ive_timeout
;

7378 
c
 = &
ov§ec_√tÊow_cﬁ_add_id_to_öãrÁ˚
;

7379 
c
->
«me
 = "add_id_to_interface";

7380 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_BOOLEAN
);

7381 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

7382 
c
->
ty≥
.
n_mö
 = 1;

7383 
c
->
ty≥
.
n_max
 = 1;

7384 
c
->
muèbÀ
 = 
åue
;

7385 
c
->
∑r£
 = 
ov§ec_√tÊow_∑r£_add_id_to_öãrÁ˚
;

7386 
c
->
u≈¨£
 = 
ov§ec_√tÊow_u≈¨£_add_id_to_öãrÁ˚
;

7389 
c
 = &
ov§ec_√tÊow_cﬁ_ígöe_id
;

7390 
c
->
«me
 = "engine_id";

7391 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_INTEGER
);

7392 
c
->
ty≥
.
key
.
u
.
öãgî
.
mö
 = 
	`INT64_C
(0);

7393 
c
->
ty≥
.
key
.
u
.
öãgî
.
max
 = 
	`INT64_C
(255);

7394 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

7395 
c
->
ty≥
.
n_mö
 = 0;

7396 
c
->
ty≥
.
n_max
 = 1;

7397 
c
->
muèbÀ
 = 
åue
;

7398 
c
->
∑r£
 = 
ov§ec_√tÊow_∑r£_ígöe_id
;

7399 
c
->
u≈¨£
 = 
ov§ec_√tÊow_u≈¨£_ígöe_id
;

7402 
c
 = &
ov§ec_√tÊow_cﬁ_ígöe_ty≥
;

7403 
c
->
«me
 = "engine_type";

7404 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_INTEGER
);

7405 
c
->
ty≥
.
key
.
u
.
öãgî
.
mö
 = 
	`INT64_C
(0);

7406 
c
->
ty≥
.
key
.
u
.
öãgî
.
max
 = 
	`INT64_C
(255);

7407 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

7408 
c
->
ty≥
.
n_mö
 = 0;

7409 
c
->
ty≥
.
n_max
 = 1;

7410 
c
->
muèbÀ
 = 
åue
;

7411 
c
->
∑r£
 = 
ov§ec_√tÊow_∑r£_ígöe_ty≥
;

7412 
c
->
u≈¨£
 = 
ov§ec_√tÊow_u≈¨£_ígöe_ty≥
;

7415 
c
 = &
ov§ec_√tÊow_cﬁ_exã∫Æ_ids
;

7416 
c
->
«me
 = "external_ids";

7417 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

7418 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

7419 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_STRING
);

7420 
c
->
ty≥
.
vÆue
.
u
.
°rög
.
möLí
 = 0;

7421 
c
->
ty≥
.
n_mö
 = 0;

7422 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

7423 
c
->
muèbÀ
 = 
åue
;

7424 
c
->
∑r£
 = 
ov§ec_√tÊow_∑r£_exã∫Æ_ids
;

7425 
c
->
u≈¨£
 = 
ov§ec_√tÊow_u≈¨£_exã∫Æ_ids
;

7428 
c
 = &
ov§ec_√tÊow_cﬁ_èrgës
;

7429 
c
->
«me
 = "targets";

7430 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

7431 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

7432 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

7433 
c
->
ty≥
.
n_mö
 = 1;

7434 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

7435 
c
->
muèbÀ
 = 
åue
;

7436 
c
->
∑r£
 = 
ov§ec_√tÊow_∑r£_èrgës
;

7437 
c
->
u≈¨£
 = 
ov§ec_√tÊow_u≈¨£_èrgës
;

7438 
	}
}

7443 
	$ov§ec_›í_vswôch_∑r£_bridges
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

7445 
ov§ec_›í_vswôch
 *
row
 = 
	`ov§ec_›í_vswôch_ˇ°
(
row_
);

7446 
size_t
 
i
;

7448 
	`as£π
(
öôed
);

7449 
row
->
bridges
 = 
NULL
;

7450 
row
->
n_bridges
 = 0;

7451 
i
 = 0; i < 
d©um
->
n
; i++) {

7452 
ov§ec_bridge
 *
keyRow
 = 
	`ov§ec_bridge_ˇ°
(
	`ovsdb_idl_gë_row_¨c
(
row_
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_BRIDGE
], &
d©um
->
keys
[
i
].
uuid
));

7453 i‡(
keyRow
) {

7454 i‡(!
row
->
n_bridges
) {

7455 
row
->
bridges
 = 
	`xmÆloc
(
d©um
->
n
 *  *row->bridges);

7457 
row
->
bridges
[row->
n_bridges
] = 
keyRow
;

7458 
row
->
n_bridges
++;

7461 
	}
}

7464 
	$ov§ec_›í_vswôch_∑r£_cur_cfg
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

7466 
ov§ec_›í_vswôch
 *
row
 = 
	`ov§ec_›í_vswôch_ˇ°
(
row_
);

7468 
	`as£π
(
öôed
);

7469 i‡(
d©um
->
n
 >= 1) {

7470 
row
->
cur_cfg
 = 
d©um
->
keys
[0].
öãgî
;

7472 
row
->
cur_cfg
 = 0;

7474 
	}
}

7477 
	$ov§ec_›í_vswôch_∑r£_db_vîsi⁄
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

7479 
ov§ec_›í_vswôch
 *
row
 = 
	`ov§ec_›í_vswôch_ˇ°
(
row_
);

7481 
	`as£π
(
öôed
);

7482 i‡(
d©um
->
n
 >= 1) {

7483 
row
->
db_vîsi⁄
 = 
d©um
->
keys
[0].
°rög
;

7485 
row
->
db_vîsi⁄
 = 
NULL
;

7487 
	}
}

7490 
	$ov§ec_›í_vswôch_∑r£_exã∫Æ_ids
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

7492 
ov§ec_›í_vswôch
 *
row
 = 
	`ov§ec_›í_vswôch_ˇ°
(
row_
);

7493 
size_t
 
i
;

7495 
	`as£π
(
öôed
);

7496 
	`sm≠_öô
(&
row
->
exã∫Æ_ids
);

7497 
i
 = 0; i < 
d©um
->
n
; i++) {

7498 
	`sm≠_add
(&
row
->
exã∫Æ_ids
,

7499 
d©um
->
keys
[
i
].
°rög
,

7500 
d©um
->
vÆues
[
i
].
°rög
);

7502 
	}
}

7505 
	$ov§ec_›í_vswôch_∑r£_m™agî_›ti⁄s
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

7507 
ov§ec_›í_vswôch
 *
row
 = 
	`ov§ec_›í_vswôch_ˇ°
(
row_
);

7508 
size_t
 
i
;

7510 
	`as£π
(
öôed
);

7511 
row
->
m™agî_›ti⁄s
 = 
NULL
;

7512 
row
->
n_m™agî_›ti⁄s
 = 0;

7513 
i
 = 0; i < 
d©um
->
n
; i++) {

7514 
ov§ec_m™agî
 *
keyRow
 = 
	`ov§ec_m™agî_ˇ°
(
	`ovsdb_idl_gë_row_¨c
(
row_
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_MANAGER
], &
d©um
->
keys
[
i
].
uuid
));

7515 i‡(
keyRow
) {

7516 i‡(!
row
->
n_m™agî_›ti⁄s
) {

7517 
row
->
m™agî_›ti⁄s
 = 
	`xmÆloc
(
d©um
->
n
 *  *row->manager_options);

7519 
row
->
m™agî_›ti⁄s
[row->
n_m™agî_›ti⁄s
] = 
keyRow
;

7520 
row
->
n_m™agî_›ti⁄s
++;

7523 
	}
}

7526 
	$ov§ec_›í_vswôch_∑r£_√xt_cfg
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

7528 
ov§ec_›í_vswôch
 *
row
 = 
	`ov§ec_›í_vswôch_ˇ°
(
row_
);

7530 
	`as£π
(
öôed
);

7531 i‡(
d©um
->
n
 >= 1) {

7532 
row
->
√xt_cfg
 = 
d©um
->
keys
[0].
öãgî
;

7534 
row
->
√xt_cfg
 = 0;

7536 
	}
}

7539 
	$ov§ec_›í_vswôch_∑r£_Ÿhî_c⁄fig
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

7541 
ov§ec_›í_vswôch
 *
row
 = 
	`ov§ec_›í_vswôch_ˇ°
(
row_
);

7542 
size_t
 
i
;

7544 
	`as£π
(
öôed
);

7545 
	`sm≠_öô
(&
row
->
Ÿhî_c⁄fig
);

7546 
i
 = 0; i < 
d©um
->
n
; i++) {

7547 
	`sm≠_add
(&
row
->
Ÿhî_c⁄fig
,

7548 
d©um
->
keys
[
i
].
°rög
,

7549 
d©um
->
vÆues
[
i
].
°rög
);

7551 
	}
}

7554 
	$ov§ec_›í_vswôch_∑r£_ovs_vîsi⁄
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

7556 
ov§ec_›í_vswôch
 *
row
 = 
	`ov§ec_›í_vswôch_ˇ°
(
row_
);

7558 
	`as£π
(
öôed
);

7559 i‡(
d©um
->
n
 >= 1) {

7560 
row
->
ovs_vîsi⁄
 = 
d©um
->
keys
[0].
°rög
;

7562 
row
->
ovs_vîsi⁄
 = 
NULL
;

7564 
	}
}

7567 
	$ov§ec_›í_vswôch_∑r£_s¶
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

7569 
ov§ec_›í_vswôch
 *
row
 = 
	`ov§ec_›í_vswôch_ˇ°
(
row_
);

7571 
	`as£π
(
öôed
);

7572 i‡(
d©um
->
n
 >= 1) {

7573 
row
->
s¶
 = 
	`ov§ec_s¶_ˇ°
(
	`ovsdb_idl_gë_row_¨c
(
row_
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_SSL
], &
d©um
->
keys
[0].
uuid
));

7575 
row
->
s¶
 = 
NULL
;

7577 
	}
}

7580 
	$ov§ec_›í_vswôch_∑r£_°©i°ics
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

7582 
ov§ec_›í_vswôch
 *
row
 = 
	`ov§ec_›í_vswôch_ˇ°
(
row_
);

7583 
size_t
 
i
;

7585 
	`as£π
(
öôed
);

7586 
	`sm≠_öô
(&
row
->
°©i°ics
);

7587 
i
 = 0; i < 
d©um
->
n
; i++) {

7588 
	`sm≠_add
(&
row
->
°©i°ics
,

7589 
d©um
->
keys
[
i
].
°rög
,

7590 
d©um
->
vÆues
[
i
].
°rög
);

7592 
	}
}

7595 
	$ov§ec_›í_vswôch_∑r£_sy°em_ty≥
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

7597 
ov§ec_›í_vswôch
 *
row
 = 
	`ov§ec_›í_vswôch_ˇ°
(
row_
);

7599 
	`as£π
(
öôed
);

7600 i‡(
d©um
->
n
 >= 1) {

7601 
row
->
sy°em_ty≥
 = 
d©um
->
keys
[0].
°rög
;

7603 
row
->
sy°em_ty≥
 = 
NULL
;

7605 
	}
}

7608 
	$ov§ec_›í_vswôch_∑r£_sy°em_vîsi⁄
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

7610 
ov§ec_›í_vswôch
 *
row
 = 
	`ov§ec_›í_vswôch_ˇ°
(
row_
);

7612 
	`as£π
(
öôed
);

7613 i‡(
d©um
->
n
 >= 1) {

7614 
row
->
sy°em_vîsi⁄
 = 
d©um
->
keys
[0].
°rög
;

7616 
row
->
sy°em_vîsi⁄
 = 
NULL
;

7618 
	}
}

7621 
	$ov§ec_›í_vswôch_u≈¨£_bridges
(
ovsdb_idl_row
 *
row_
)

7623 
ov§ec_›í_vswôch
 *
row
 = 
	`ov§ec_›í_vswôch_ˇ°
(
row_
);

7625 
	`as£π
(
öôed
);

7626 
	`‰ì
(
row
->
bridges
);

7627 
	}
}

7630 
	$ov§ec_›í_vswôch_u≈¨£_cur_cfg
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

7633 
	}
}

7636 
	$ov§ec_›í_vswôch_u≈¨£_db_vîsi⁄
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

7639 
	}
}

7642 
	$ov§ec_›í_vswôch_u≈¨£_exã∫Æ_ids
(
ovsdb_idl_row
 *
row_
)

7644 
ov§ec_›í_vswôch
 *
row
 = 
	`ov§ec_›í_vswôch_ˇ°
(
row_
);

7646 
	`as£π
(
öôed
);

7647 
	`sm≠_de°roy
(&
row
->
exã∫Æ_ids
);

7648 
	}
}

7651 
	$ov§ec_›í_vswôch_u≈¨£_m™agî_›ti⁄s
(
ovsdb_idl_row
 *
row_
)

7653 
ov§ec_›í_vswôch
 *
row
 = 
	`ov§ec_›í_vswôch_ˇ°
(
row_
);

7655 
	`as£π
(
öôed
);

7656 
	`‰ì
(
row
->
m™agî_›ti⁄s
);

7657 
	}
}

7660 
	$ov§ec_›í_vswôch_u≈¨£_√xt_cfg
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

7663 
	}
}

7666 
	$ov§ec_›í_vswôch_u≈¨£_Ÿhî_c⁄fig
(
ovsdb_idl_row
 *
row_
)

7668 
ov§ec_›í_vswôch
 *
row
 = 
	`ov§ec_›í_vswôch_ˇ°
(
row_
);

7670 
	`as£π
(
öôed
);

7671 
	`sm≠_de°roy
(&
row
->
Ÿhî_c⁄fig
);

7672 
	}
}

7675 
	$ov§ec_›í_vswôch_u≈¨£_ovs_vîsi⁄
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

7678 
	}
}

7681 
	$ov§ec_›í_vswôch_u≈¨£_s¶
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

7684 
	}
}

7687 
	$ov§ec_›í_vswôch_u≈¨£_°©i°ics
(
ovsdb_idl_row
 *
row_
)

7689 
ov§ec_›í_vswôch
 *
row
 = 
	`ov§ec_›í_vswôch_ˇ°
(
row_
);

7691 
	`as£π
(
öôed
);

7692 
	`sm≠_de°roy
(&
row
->
°©i°ics
);

7693 
	}
}

7696 
	$ov§ec_›í_vswôch_u≈¨£_sy°em_ty≥
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

7699 
	}
}

7702 
	$ov§ec_›í_vswôch_u≈¨£_sy°em_vîsi⁄
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

7705 
	}
}

7708 
	$ov§ec_›í_vswôch_öô__
(
ovsdb_idl_row
 *
row
)

7710 
	`ov§ec_›í_vswôch_öô
(
	`ov§ec_›í_vswôch_ˇ°
(
row
));

7711 
	}
}

7714 
	$ov§ec_›í_vswôch_öô
(
ov§ec_›í_vswôch
 *
row
)

7716 
	`mem£t
(
row
, 0,  *row);

7717 
	`sm≠_öô
(&
row
->
exã∫Æ_ids
);

7718 
	`sm≠_öô
(&
row
->
Ÿhî_c⁄fig
);

7719 
	`sm≠_öô
(&
row
->
°©i°ics
);

7720 
	}
}

7722 c⁄° 
ov§ec_›í_vswôch
 *

7723 
	$ov§ec_›í_vswôch_fú°
(c⁄° 
ovsdb_idl
 *
idl
)

7725  
	`ov§ec_›í_vswôch_ˇ°
(
	`ovsdb_idl_fú°_row
(
idl
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_OPEN_VSWITCH
]));

7726 
	}
}

7728 c⁄° 
ov§ec_›í_vswôch
 *

7729 
	$ov§ec_›í_vswôch_√xt
(c⁄° 
ov§ec_›í_vswôch
 *
row
)

7731  
	`ov§ec_›í_vswôch_ˇ°
(
	`ovsdb_idl_√xt_row
(&
row
->
hódî_
));

7732 
	}
}

7735 
	$ov§ec_›í_vswôch_dñëe
(c⁄° 
ov§ec_›í_vswôch
 *
row
)

7737 
	`ovsdb_idl_txn_dñëe
(&
row
->
hódî_
);

7738 
	}
}

7740 
ov§ec_›í_vswôch
 *

7741 
	$ov§ec_›í_vswôch_ö£π
(
ovsdb_idl_txn
 *
txn
)

7743  
	`ov§ec_›í_vswôch_ˇ°
(
	`ovsdb_idl_txn_ö£π
(
txn
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_OPEN_VSWITCH
], 
NULL
));

7744 
	}
}

7748 
	$ov§ec_›í_vswôch_vîify_bridges
(c⁄° 
ov§ec_›í_vswôch
 *
row
)

7750 
	`as£π
(
öôed
);

7751 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_BRIDGES
]);

7752 
	}
}

7755 
	$ov§ec_›í_vswôch_vîify_cur_cfg
(c⁄° 
ov§ec_›í_vswôch
 *
row
)

7757 
	`as£π
(
öôed
);

7758 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_CUR_CFG
]);

7759 
	}
}

7762 
	$ov§ec_›í_vswôch_vîify_db_vîsi⁄
(c⁄° 
ov§ec_›í_vswôch
 *
row
)

7764 
	`as£π
(
öôed
);

7765 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_DB_VERSION
]);

7766 
	}
}

7769 
	$ov§ec_›í_vswôch_vîify_exã∫Æ_ids
(c⁄° 
ov§ec_›í_vswôch
 *
row
)

7771 
	`as£π
(
öôed
);

7772 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_EXTERNAL_IDS
]);

7773 
	}
}

7776 
	$ov§ec_›í_vswôch_vîify_m™agî_›ti⁄s
(c⁄° 
ov§ec_›í_vswôch
 *
row
)

7778 
	`as£π
(
öôed
);

7779 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_MANAGER_OPTIONS
]);

7780 
	}
}

7783 
	$ov§ec_›í_vswôch_vîify_√xt_cfg
(c⁄° 
ov§ec_›í_vswôch
 *
row
)

7785 
	`as£π
(
öôed
);

7786 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_NEXT_CFG
]);

7787 
	}
}

7790 
	$ov§ec_›í_vswôch_vîify_Ÿhî_c⁄fig
(c⁄° 
ov§ec_›í_vswôch
 *
row
)

7792 
	`as£π
(
öôed
);

7793 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_OTHER_CONFIG
]);

7794 
	}
}

7797 
	$ov§ec_›í_vswôch_vîify_ovs_vîsi⁄
(c⁄° 
ov§ec_›í_vswôch
 *
row
)

7799 
	`as£π
(
öôed
);

7800 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_OVS_VERSION
]);

7801 
	}
}

7804 
	$ov§ec_›í_vswôch_vîify_s¶
(c⁄° 
ov§ec_›í_vswôch
 *
row
)

7806 
	`as£π
(
öôed
);

7807 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_SSL
]);

7808 
	}
}

7811 
	$ov§ec_›í_vswôch_vîify_°©i°ics
(c⁄° 
ov§ec_›í_vswôch
 *
row
)

7813 
	`as£π
(
öôed
);

7814 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_STATISTICS
]);

7815 
	}
}

7818 
	$ov§ec_›í_vswôch_vîify_sy°em_ty≥
(c⁄° 
ov§ec_›í_vswôch
 *
row
)

7820 
	`as£π
(
öôed
);

7821 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_SYSTEM_TYPE
]);

7822 
	}
}

7825 
	$ov§ec_›í_vswôch_vîify_sy°em_vîsi⁄
(c⁄° 
ov§ec_›í_vswôch
 *
row
)

7827 
	`as£π
(
öôed
);

7828 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_SYSTEM_VERSION
]);

7829 
	}
}

7846 c⁄° 
ovsdb_d©um
 *

7847 
	$ov§ec_›í_vswôch_gë_bridges
(c⁄° 
ov§ec_›í_vswôch
 *
row
,

7848 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

7850 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_UUID
);

7851  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_›í_vswôch_cﬁ_bridges
);

7852 
	}
}

7869 c⁄° 
ovsdb_d©um
 *

7870 
	$ov§ec_›í_vswôch_gë_cur_cfg
(c⁄° 
ov§ec_›í_vswôch
 *
row
,

7871 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

7873 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_INTEGER
);

7874  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_›í_vswôch_cﬁ_cur_cfg
);

7875 
	}
}

7892 c⁄° 
ovsdb_d©um
 *

7893 
	$ov§ec_›í_vswôch_gë_db_vîsi⁄
(c⁄° 
ov§ec_›í_vswôch
 *
row
,

7894 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

7896 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

7897  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_›í_vswôch_cﬁ_db_vîsi⁄
);

7898 
	}
}

7916 c⁄° 
ovsdb_d©um
 *

7917 
	$ov§ec_›í_vswôch_gë_exã∫Æ_ids
(c⁄° 
ov§ec_›í_vswôch
 *
row
,

7918 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
,

7919 
ovsdb_©omic_ty≥
 
vÆue_ty≥
 
OVS_UNUSED
)

7921 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

7922 
	`as£π
(
vÆue_ty≥
 =
OVSDB_TYPE_STRING
);

7923  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_›í_vswôch_cﬁ_exã∫Æ_ids
);

7924 
	}
}

7941 c⁄° 
ovsdb_d©um
 *

7942 
	$ov§ec_›í_vswôch_gë_m™agî_›ti⁄s
(c⁄° 
ov§ec_›í_vswôch
 *
row
,

7943 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

7945 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_UUID
);

7946  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_›í_vswôch_cﬁ_m™agî_›ti⁄s
);

7947 
	}
}

7964 c⁄° 
ovsdb_d©um
 *

7965 
	$ov§ec_›í_vswôch_gë_√xt_cfg
(c⁄° 
ov§ec_›í_vswôch
 *
row
,

7966 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

7968 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_INTEGER
);

7969  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_›í_vswôch_cﬁ_√xt_cfg
);

7970 
	}
}

7988 c⁄° 
ovsdb_d©um
 *

7989 
	$ov§ec_›í_vswôch_gë_Ÿhî_c⁄fig
(c⁄° 
ov§ec_›í_vswôch
 *
row
,

7990 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
,

7991 
ovsdb_©omic_ty≥
 
vÆue_ty≥
 
OVS_UNUSED
)

7993 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

7994 
	`as£π
(
vÆue_ty≥
 =
OVSDB_TYPE_STRING
);

7995  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_›í_vswôch_cﬁ_Ÿhî_c⁄fig
);

7996 
	}
}

8013 c⁄° 
ovsdb_d©um
 *

8014 
	$ov§ec_›í_vswôch_gë_ovs_vîsi⁄
(c⁄° 
ov§ec_›í_vswôch
 *
row
,

8015 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

8017 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

8018  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_›í_vswôch_cﬁ_ovs_vîsi⁄
);

8019 
	}
}

8036 c⁄° 
ovsdb_d©um
 *

8037 
	$ov§ec_›í_vswôch_gë_s¶
(c⁄° 
ov§ec_›í_vswôch
 *
row
,

8038 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

8040 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_UUID
);

8041  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_›í_vswôch_cﬁ_s¶
);

8042 
	}
}

8060 c⁄° 
ovsdb_d©um
 *

8061 
	$ov§ec_›í_vswôch_gë_°©i°ics
(c⁄° 
ov§ec_›í_vswôch
 *
row
,

8062 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
,

8063 
ovsdb_©omic_ty≥
 
vÆue_ty≥
 
OVS_UNUSED
)

8065 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

8066 
	`as£π
(
vÆue_ty≥
 =
OVSDB_TYPE_STRING
);

8067  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_›í_vswôch_cﬁ_°©i°ics
);

8068 
	}
}

8085 c⁄° 
ovsdb_d©um
 *

8086 
	$ov§ec_›í_vswôch_gë_sy°em_ty≥
(c⁄° 
ov§ec_›í_vswôch
 *
row
,

8087 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

8089 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

8090  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_›í_vswôch_cﬁ_sy°em_ty≥
);

8091 
	}
}

8108 c⁄° 
ovsdb_d©um
 *

8109 
	$ov§ec_›í_vswôch_gë_sy°em_vîsi⁄
(c⁄° 
ov§ec_›í_vswôch
 *
row
,

8110 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

8112 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

8113  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_›í_vswôch_cﬁ_sy°em_vîsi⁄
);

8114 
	}
}

8117 
	$ov§ec_›í_vswôch_£t_bridges
(c⁄° 
ov§ec_›í_vswôch
 *
row
, 
ov§ec_bridge
 **
bridges
, 
size_t
 
n_bridges
)

8119 
ovsdb_d©um
 
d©um
;

8120 
size_t
 
i
;

8122 
	`as£π
(
öôed
);

8123 
d©um
.
n
 = 
n_bridges
;

8124 
d©um
.
keys
 = 
	`xmÆloc
(
n_bridges
 *  *datum.keys);

8125 
d©um
.
vÆues
 = 
NULL
;

8126 
i
 = 0; i < 
n_bridges
; i++) {

8127 
d©um
.
keys
[
i
].
uuid
 = 
bridges
[i]->
hódî_
.uuid;

8129 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_UUID
, 
OVSDB_TYPE_VOID
);

8130 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_BRIDGES
], &
d©um
);

8131 
	}
}

8134 
	$ov§ec_›í_vswôch_£t_cur_cfg
(c⁄° 
ov§ec_›í_vswôch
 *
row
, 
öt64_t
 
cur_cfg
)

8136 
ovsdb_d©um
 
d©um
;

8138 
	`as£π
(
öôed
);

8139 
d©um
.
n
 = 1;

8140 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

8141 
d©um
.
keys
[0].
öãgî
 = 
cur_cfg
;

8142 
d©um
.
vÆues
 = 
NULL
;

8143 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_CUR_CFG
], &
d©um
);

8144 
	}
}

8147 
	$ov§ec_›í_vswôch_£t_db_vîsi⁄
(c⁄° 
ov§ec_›í_vswôch
 *
row
, c⁄° *
db_vîsi⁄
)

8149 
ovsdb_d©um
 
d©um
;

8151 
	`as£π
(
öôed
);

8152 i‡(
db_vîsi⁄
) {

8153 
d©um
.
n
 = 1;

8154 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

8155 
d©um
.
keys
[0].
°rög
 = 
	`x°rdup
(
db_vîsi⁄
);

8157 
d©um
.
n
 = 0;

8158 
d©um
.
keys
 = 
NULL
;

8160 
d©um
.
vÆues
 = 
NULL
;

8161 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_DB_VERSION
], &
d©um
);

8162 
	}
}

8165 
	$ov§ec_›í_vswôch_£t_exã∫Æ_ids
(c⁄° 
ov§ec_›í_vswôch
 *
row
, c⁄° 
sm≠
 *smap)

8167 
ovsdb_d©um
 
d©um
;

8169 
	`as£π
(
öôed
);

8170 i‡(
sm≠
) {

8171 
sm≠_node
 *
node
;

8172 
size_t
 
i
;

8174 
d©um
.
n
 = 
	`sm≠_cou¡
(
sm≠
);

8175 
d©um
.
keys
 = 
	`xmÆloc
(d©um.
n
 *  *datum.keys);

8176 
d©um
.
vÆues
 = 
	`xmÆloc
(d©um.
n
 *  *datum.values);

8178 
i
 = 0;

8179 
	`SMAP_FOR_EACH
 (
node
, 
sm≠
) {

8180 
d©um
.
keys
[
i
].
°rög
 = 
	`x°rdup
(
node
->
key
);

8181 
d©um
.
vÆues
[
i
].
°rög
 = 
	`x°rdup
(
node
->
vÆue
);

8182 
i
++;

8184 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_STRING
, OVSDB_TYPE_STRING);

8186 
	`ovsdb_d©um_öô_em±y
(&
d©um
);

8188 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
,

8189 &
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_EXTERNAL_IDS
],

8190 &
d©um
);

8191 
	}
}

8195 
	$ov§ec_›í_vswôch_£t_m™agî_›ti⁄s
(c⁄° 
ov§ec_›í_vswôch
 *
row
, 
ov§ec_m™agî
 **
m™agî_›ti⁄s
, 
size_t
 
n_m™agî_›ti⁄s
)

8197 
ovsdb_d©um
 
d©um
;

8198 
size_t
 
i
;

8200 
	`as£π
(
öôed
);

8201 
d©um
.
n
 = 
n_m™agî_›ti⁄s
;

8202 
d©um
.
keys
 = 
	`xmÆloc
(
n_m™agî_›ti⁄s
 *  *datum.keys);

8203 
d©um
.
vÆues
 = 
NULL
;

8204 
i
 = 0; i < 
n_m™agî_›ti⁄s
; i++) {

8205 
d©um
.
keys
[
i
].
uuid
 = 
m™agî_›ti⁄s
[i]->
hódî_
.uuid;

8207 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_UUID
, 
OVSDB_TYPE_VOID
);

8208 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_MANAGER_OPTIONS
], &
d©um
);

8209 
	}
}

8212 
	$ov§ec_›í_vswôch_£t_√xt_cfg
(c⁄° 
ov§ec_›í_vswôch
 *
row
, 
öt64_t
 
√xt_cfg
)

8214 
ovsdb_d©um
 
d©um
;

8216 
	`as£π
(
öôed
);

8217 
d©um
.
n
 = 1;

8218 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

8219 
d©um
.
keys
[0].
öãgî
 = 
√xt_cfg
;

8220 
d©um
.
vÆues
 = 
NULL
;

8221 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_NEXT_CFG
], &
d©um
);

8222 
	}
}

8225 
	$ov§ec_›í_vswôch_£t_Ÿhî_c⁄fig
(c⁄° 
ov§ec_›í_vswôch
 *
row
, c⁄° 
sm≠
 *smap)

8227 
ovsdb_d©um
 
d©um
;

8229 
	`as£π
(
öôed
);

8230 i‡(
sm≠
) {

8231 
sm≠_node
 *
node
;

8232 
size_t
 
i
;

8234 
d©um
.
n
 = 
	`sm≠_cou¡
(
sm≠
);

8235 
d©um
.
keys
 = 
	`xmÆloc
(d©um.
n
 *  *datum.keys);

8236 
d©um
.
vÆues
 = 
	`xmÆloc
(d©um.
n
 *  *datum.values);

8238 
i
 = 0;

8239 
	`SMAP_FOR_EACH
 (
node
, 
sm≠
) {

8240 
d©um
.
keys
[
i
].
°rög
 = 
	`x°rdup
(
node
->
key
);

8241 
d©um
.
vÆues
[
i
].
°rög
 = 
	`x°rdup
(
node
->
vÆue
);

8242 
i
++;

8244 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_STRING
, OVSDB_TYPE_STRING);

8246 
	`ovsdb_d©um_öô_em±y
(&
d©um
);

8248 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
,

8249 &
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_OTHER_CONFIG
],

8250 &
d©um
);

8251 
	}
}

8255 
	$ov§ec_›í_vswôch_£t_ovs_vîsi⁄
(c⁄° 
ov§ec_›í_vswôch
 *
row
, c⁄° *
ovs_vîsi⁄
)

8257 
ovsdb_d©um
 
d©um
;

8259 
	`as£π
(
öôed
);

8260 i‡(
ovs_vîsi⁄
) {

8261 
d©um
.
n
 = 1;

8262 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

8263 
d©um
.
keys
[0].
°rög
 = 
	`x°rdup
(
ovs_vîsi⁄
);

8265 
d©um
.
n
 = 0;

8266 
d©um
.
keys
 = 
NULL
;

8268 
d©um
.
vÆues
 = 
NULL
;

8269 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_OVS_VERSION
], &
d©um
);

8270 
	}
}

8273 
	$ov§ec_›í_vswôch_£t_s¶
(c⁄° 
ov§ec_›í_vswôch
 *
row
, c⁄° 
ov§ec_s¶
 *
s¶
)

8275 
ovsdb_d©um
 
d©um
;

8277 
	`as£π
(
öôed
);

8278 i‡(
s¶
) {

8279 
d©um
.
n
 = 1;

8280 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

8281 
d©um
.
keys
[0].
uuid
 = 
s¶
->
hódî_
.uuid;

8283 
d©um
.
n
 = 0;

8284 
d©um
.
keys
 = 
NULL
;

8286 
d©um
.
vÆues
 = 
NULL
;

8287 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_SSL
], &
d©um
);

8288 
	}
}

8291 
	$ov§ec_›í_vswôch_£t_°©i°ics
(c⁄° 
ov§ec_›í_vswôch
 *
row
, c⁄° 
sm≠
 *smap)

8293 
ovsdb_d©um
 
d©um
;

8295 
	`as£π
(
öôed
);

8296 i‡(
sm≠
) {

8297 
sm≠_node
 *
node
;

8298 
size_t
 
i
;

8300 
d©um
.
n
 = 
	`sm≠_cou¡
(
sm≠
);

8301 
d©um
.
keys
 = 
	`xmÆloc
(d©um.
n
 *  *datum.keys);

8302 
d©um
.
vÆues
 = 
	`xmÆloc
(d©um.
n
 *  *datum.values);

8304 
i
 = 0;

8305 
	`SMAP_FOR_EACH
 (
node
, 
sm≠
) {

8306 
d©um
.
keys
[
i
].
°rög
 = 
	`x°rdup
(
node
->
key
);

8307 
d©um
.
vÆues
[
i
].
°rög
 = 
	`x°rdup
(
node
->
vÆue
);

8308 
i
++;

8310 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_STRING
, OVSDB_TYPE_STRING);

8312 
	`ovsdb_d©um_öô_em±y
(&
d©um
);

8314 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
,

8315 &
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_STATISTICS
],

8316 &
d©um
);

8317 
	}
}

8321 
	$ov§ec_›í_vswôch_£t_sy°em_ty≥
(c⁄° 
ov§ec_›í_vswôch
 *
row
, c⁄° *
sy°em_ty≥
)

8323 
ovsdb_d©um
 
d©um
;

8325 
	`as£π
(
öôed
);

8326 i‡(
sy°em_ty≥
) {

8327 
d©um
.
n
 = 1;

8328 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

8329 
d©um
.
keys
[0].
°rög
 = 
	`x°rdup
(
sy°em_ty≥
);

8331 
d©um
.
n
 = 0;

8332 
d©um
.
keys
 = 
NULL
;

8334 
d©um
.
vÆues
 = 
NULL
;

8335 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_SYSTEM_TYPE
], &
d©um
);

8336 
	}
}

8339 
	$ov§ec_›í_vswôch_£t_sy°em_vîsi⁄
(c⁄° 
ov§ec_›í_vswôch
 *
row
, c⁄° *
sy°em_vîsi⁄
)

8341 
ovsdb_d©um
 
d©um
;

8343 
	`as£π
(
öôed
);

8344 i‡(
sy°em_vîsi⁄
) {

8345 
d©um
.
n
 = 1;

8346 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

8347 
d©um
.
keys
[0].
°rög
 = 
	`x°rdup
(
sy°em_vîsi⁄
);

8349 
d©um
.
n
 = 0;

8350 
d©um
.
keys
 = 
NULL
;

8352 
d©um
.
vÆues
 = 
NULL
;

8353 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_SYSTEM_VERSION
], &
d©um
);

8354 
	}
}

8356 
ovsdb_idl_cﬁumn
 
	gov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_N_COLUMNS
];

8359 
	$ov§ec_›í_vswôch_cﬁumns_öô
()

8361 
ovsdb_idl_cﬁumn
 *
c
;

8364 
c
 = &
ov§ec_›í_vswôch_cﬁ_bridges
;

8365 
c
->
«me
 = "bridges";

8366 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_UUID
);

8367 
c
->
ty≥
.
key
.
u
.
uuid
.
ªfTabÀName
 = "Bridge";

8368 
c
->
ty≥
.
key
.
u
.
uuid
.
ªfTy≥
 = 
OVSDB_REF_STRONG
;

8369 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

8370 
c
->
ty≥
.
n_mö
 = 0;

8371 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

8372 
c
->
muèbÀ
 = 
åue
;

8373 
c
->
∑r£
 = 
ov§ec_›í_vswôch_∑r£_bridges
;

8374 
c
->
u≈¨£
 = 
ov§ec_›í_vswôch_u≈¨£_bridges
;

8377 
c
 = &
ov§ec_›í_vswôch_cﬁ_cur_cfg
;

8378 
c
->
«me
 = "cur_cfg";

8379 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_INTEGER
);

8380 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

8381 
c
->
ty≥
.
n_mö
 = 1;

8382 
c
->
ty≥
.
n_max
 = 1;

8383 
c
->
muèbÀ
 = 
åue
;

8384 
c
->
∑r£
 = 
ov§ec_›í_vswôch_∑r£_cur_cfg
;

8385 
c
->
u≈¨£
 = 
ov§ec_›í_vswôch_u≈¨£_cur_cfg
;

8388 
c
 = &
ov§ec_›í_vswôch_cﬁ_db_vîsi⁄
;

8389 
c
->
«me
 = "db_version";

8390 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

8391 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

8392 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

8393 
c
->
ty≥
.
n_mö
 = 0;

8394 
c
->
ty≥
.
n_max
 = 1;

8395 
c
->
muèbÀ
 = 
åue
;

8396 
c
->
∑r£
 = 
ov§ec_›í_vswôch_∑r£_db_vîsi⁄
;

8397 
c
->
u≈¨£
 = 
ov§ec_›í_vswôch_u≈¨£_db_vîsi⁄
;

8400 
c
 = &
ov§ec_›í_vswôch_cﬁ_exã∫Æ_ids
;

8401 
c
->
«me
 = "external_ids";

8402 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

8403 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

8404 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_STRING
);

8405 
c
->
ty≥
.
vÆue
.
u
.
°rög
.
möLí
 = 0;

8406 
c
->
ty≥
.
n_mö
 = 0;

8407 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

8408 
c
->
muèbÀ
 = 
åue
;

8409 
c
->
∑r£
 = 
ov§ec_›í_vswôch_∑r£_exã∫Æ_ids
;

8410 
c
->
u≈¨£
 = 
ov§ec_›í_vswôch_u≈¨£_exã∫Æ_ids
;

8413 
c
 = &
ov§ec_›í_vswôch_cﬁ_m™agî_›ti⁄s
;

8414 
c
->
«me
 = "manager_options";

8415 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_UUID
);

8416 
c
->
ty≥
.
key
.
u
.
uuid
.
ªfTabÀName
 = "Manager";

8417 
c
->
ty≥
.
key
.
u
.
uuid
.
ªfTy≥
 = 
OVSDB_REF_STRONG
;

8418 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

8419 
c
->
ty≥
.
n_mö
 = 0;

8420 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

8421 
c
->
muèbÀ
 = 
åue
;

8422 
c
->
∑r£
 = 
ov§ec_›í_vswôch_∑r£_m™agî_›ti⁄s
;

8423 
c
->
u≈¨£
 = 
ov§ec_›í_vswôch_u≈¨£_m™agî_›ti⁄s
;

8426 
c
 = &
ov§ec_›í_vswôch_cﬁ_√xt_cfg
;

8427 
c
->
«me
 = "next_cfg";

8428 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_INTEGER
);

8429 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

8430 
c
->
ty≥
.
n_mö
 = 1;

8431 
c
->
ty≥
.
n_max
 = 1;

8432 
c
->
muèbÀ
 = 
åue
;

8433 
c
->
∑r£
 = 
ov§ec_›í_vswôch_∑r£_√xt_cfg
;

8434 
c
->
u≈¨£
 = 
ov§ec_›í_vswôch_u≈¨£_√xt_cfg
;

8437 
c
 = &
ov§ec_›í_vswôch_cﬁ_Ÿhî_c⁄fig
;

8438 
c
->
«me
 = "other_config";

8439 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

8440 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

8441 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_STRING
);

8442 
c
->
ty≥
.
vÆue
.
u
.
°rög
.
möLí
 = 0;

8443 
c
->
ty≥
.
n_mö
 = 0;

8444 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

8445 
c
->
muèbÀ
 = 
åue
;

8446 
c
->
∑r£
 = 
ov§ec_›í_vswôch_∑r£_Ÿhî_c⁄fig
;

8447 
c
->
u≈¨£
 = 
ov§ec_›í_vswôch_u≈¨£_Ÿhî_c⁄fig
;

8450 
c
 = &
ov§ec_›í_vswôch_cﬁ_ovs_vîsi⁄
;

8451 
c
->
«me
 = "ovs_version";

8452 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

8453 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

8454 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

8455 
c
->
ty≥
.
n_mö
 = 0;

8456 
c
->
ty≥
.
n_max
 = 1;

8457 
c
->
muèbÀ
 = 
åue
;

8458 
c
->
∑r£
 = 
ov§ec_›í_vswôch_∑r£_ovs_vîsi⁄
;

8459 
c
->
u≈¨£
 = 
ov§ec_›í_vswôch_u≈¨£_ovs_vîsi⁄
;

8462 
c
 = &
ov§ec_›í_vswôch_cﬁ_s¶
;

8463 
c
->
«me
 = "ssl";

8464 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_UUID
);

8465 
c
->
ty≥
.
key
.
u
.
uuid
.
ªfTabÀName
 = "SSL";

8466 
c
->
ty≥
.
key
.
u
.
uuid
.
ªfTy≥
 = 
OVSDB_REF_STRONG
;

8467 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

8468 
c
->
ty≥
.
n_mö
 = 0;

8469 
c
->
ty≥
.
n_max
 = 1;

8470 
c
->
muèbÀ
 = 
åue
;

8471 
c
->
∑r£
 = 
ov§ec_›í_vswôch_∑r£_s¶
;

8472 
c
->
u≈¨£
 = 
ov§ec_›í_vswôch_u≈¨£_s¶
;

8475 
c
 = &
ov§ec_›í_vswôch_cﬁ_°©i°ics
;

8476 
c
->
«me
 = "statistics";

8477 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

8478 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

8479 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_STRING
);

8480 
c
->
ty≥
.
vÆue
.
u
.
°rög
.
möLí
 = 0;

8481 
c
->
ty≥
.
n_mö
 = 0;

8482 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

8483 
c
->
muèbÀ
 = 
åue
;

8484 
c
->
∑r£
 = 
ov§ec_›í_vswôch_∑r£_°©i°ics
;

8485 
c
->
u≈¨£
 = 
ov§ec_›í_vswôch_u≈¨£_°©i°ics
;

8488 
c
 = &
ov§ec_›í_vswôch_cﬁ_sy°em_ty≥
;

8489 
c
->
«me
 = "system_type";

8490 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

8491 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

8492 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

8493 
c
->
ty≥
.
n_mö
 = 0;

8494 
c
->
ty≥
.
n_max
 = 1;

8495 
c
->
muèbÀ
 = 
åue
;

8496 
c
->
∑r£
 = 
ov§ec_›í_vswôch_∑r£_sy°em_ty≥
;

8497 
c
->
u≈¨£
 = 
ov§ec_›í_vswôch_u≈¨£_sy°em_ty≥
;

8500 
c
 = &
ov§ec_›í_vswôch_cﬁ_sy°em_vîsi⁄
;

8501 
c
->
«me
 = "system_version";

8502 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

8503 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

8504 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

8505 
c
->
ty≥
.
n_mö
 = 0;

8506 
c
->
ty≥
.
n_max
 = 1;

8507 
c
->
muèbÀ
 = 
åue
;

8508 
c
->
∑r£
 = 
ov§ec_›í_vswôch_∑r£_sy°em_vîsi⁄
;

8509 
c
->
u≈¨£
 = 
ov§ec_›í_vswôch_u≈¨£_sy°em_vîsi⁄
;

8510 
	}
}

8515 
	$ov§ec_p‹t_∑r£_b⁄d_downdñay
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

8517 
ov§ec_p‹t
 *
row
 = 
	`ov§ec_p‹t_ˇ°
(
row_
);

8519 
	`as£π
(
öôed
);

8520 i‡(
d©um
->
n
 >= 1) {

8521 
row
->
b⁄d_downdñay
 = 
d©um
->
keys
[0].
öãgî
;

8523 
row
->
b⁄d_downdñay
 = 0;

8525 
	}
}

8528 
	$ov§ec_p‹t_∑r£_b⁄d_Áke_iÁ˚
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

8530 
ov§ec_p‹t
 *
row
 = 
	`ov§ec_p‹t_ˇ°
(
row_
);

8532 
	`as£π
(
öôed
);

8533 i‡(
d©um
->
n
 >= 1) {

8534 
row
->
b⁄d_Áke_iÁ˚
 = 
d©um
->
keys
[0].
boﬁón
;

8536 
row
->
b⁄d_Áke_iÁ˚
 = 
Ál£
;

8538 
	}
}

8541 
	$ov§ec_p‹t_∑r£_b⁄d_mode
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

8543 
ov§ec_p‹t
 *
row
 = 
	`ov§ec_p‹t_ˇ°
(
row_
);

8545 
	`as£π
(
öôed
);

8546 i‡(
d©um
->
n
 >= 1) {

8547 
row
->
b⁄d_mode
 = 
d©um
->
keys
[0].
°rög
;

8549 
row
->
b⁄d_mode
 = 
NULL
;

8551 
	}
}

8554 
	$ov§ec_p‹t_∑r£_b⁄d_updñay
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

8556 
ov§ec_p‹t
 *
row
 = 
	`ov§ec_p‹t_ˇ°
(
row_
);

8558 
	`as£π
(
öôed
);

8559 i‡(
d©um
->
n
 >= 1) {

8560 
row
->
b⁄d_updñay
 = 
d©um
->
keys
[0].
öãgî
;

8562 
row
->
b⁄d_updñay
 = 0;

8564 
	}
}

8567 
	$ov§ec_p‹t_∑r£_exã∫Æ_ids
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

8569 
ov§ec_p‹t
 *
row
 = 
	`ov§ec_p‹t_ˇ°
(
row_
);

8570 
size_t
 
i
;

8572 
	`as£π
(
öôed
);

8573 
	`sm≠_öô
(&
row
->
exã∫Æ_ids
);

8574 
i
 = 0; i < 
d©um
->
n
; i++) {

8575 
	`sm≠_add
(&
row
->
exã∫Æ_ids
,

8576 
d©um
->
keys
[
i
].
°rög
,

8577 
d©um
->
vÆues
[
i
].
°rög
);

8579 
	}
}

8582 
	$ov§ec_p‹t_∑r£_Áke_bridge
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

8584 
ov§ec_p‹t
 *
row
 = 
	`ov§ec_p‹t_ˇ°
(
row_
);

8586 
	`as£π
(
öôed
);

8587 i‡(
d©um
->
n
 >= 1) {

8588 
row
->
Áke_bridge
 = 
d©um
->
keys
[0].
boﬁón
;

8590 
row
->
Áke_bridge
 = 
Ál£
;

8592 
	}
}

8595 
	$ov§ec_p‹t_∑r£_öãrÁ˚s
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

8597 
ov§ec_p‹t
 *
row
 = 
	`ov§ec_p‹t_ˇ°
(
row_
);

8598 
size_t
 
i
;

8600 
	`as£π
(
öôed
);

8601 
row
->
öãrÁ˚s
 = 
NULL
;

8602 
row
->
n_öãrÁ˚s
 = 0;

8603 
i
 = 0; i < 
d©um
->
n
; i++) {

8604 
ov§ec_öãrÁ˚
 *
keyRow
 = 
	`ov§ec_öãrÁ˚_ˇ°
(
	`ovsdb_idl_gë_row_¨c
(
row_
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_INTERFACE
], &
d©um
->
keys
[
i
].
uuid
));

8605 i‡(
keyRow
) {

8606 i‡(!
row
->
n_öãrÁ˚s
) {

8607 
row
->
öãrÁ˚s
 = 
	`xmÆloc
(
d©um
->
n
 *  *row->interfaces);

8609 
row
->
öãrÁ˚s
[row->
n_öãrÁ˚s
] = 
keyRow
;

8610 
row
->
n_öãrÁ˚s
++;

8613 
	}
}

8616 
	$ov§ec_p‹t_∑r£_œ˝
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

8618 
ov§ec_p‹t
 *
row
 = 
	`ov§ec_p‹t_ˇ°
(
row_
);

8620 
	`as£π
(
öôed
);

8621 i‡(
d©um
->
n
 >= 1) {

8622 
row
->
œ˝
 = 
d©um
->
keys
[0].
°rög
;

8624 
row
->
œ˝
 = 
NULL
;

8626 
	}
}

8629 
	$ov§ec_p‹t_∑r£_mac
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

8631 
ov§ec_p‹t
 *
row
 = 
	`ov§ec_p‹t_ˇ°
(
row_
);

8633 
	`as£π
(
öôed
);

8634 i‡(
d©um
->
n
 >= 1) {

8635 
row
->
mac
 = 
d©um
->
keys
[0].
°rög
;

8637 
row
->
mac
 = 
NULL
;

8639 
	}
}

8642 
	$ov§ec_p‹t_∑r£_«me
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

8644 
ov§ec_p‹t
 *
row
 = 
	`ov§ec_p‹t_ˇ°
(
row_
);

8646 
	`as£π
(
öôed
);

8647 i‡(
d©um
->
n
 >= 1) {

8648 
row
->
«me
 = 
d©um
->
keys
[0].
°rög
;

8650 
row
->
«me
 = "";

8652 
	}
}

8655 
	$ov§ec_p‹t_∑r£_Ÿhî_c⁄fig
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

8657 
ov§ec_p‹t
 *
row
 = 
	`ov§ec_p‹t_ˇ°
(
row_
);

8658 
size_t
 
i
;

8660 
	`as£π
(
öôed
);

8661 
	`sm≠_öô
(&
row
->
Ÿhî_c⁄fig
);

8662 
i
 = 0; i < 
d©um
->
n
; i++) {

8663 
	`sm≠_add
(&
row
->
Ÿhî_c⁄fig
,

8664 
d©um
->
keys
[
i
].
°rög
,

8665 
d©um
->
vÆues
[
i
].
°rög
);

8667 
	}
}

8670 
	$ov§ec_p‹t_∑r£_qos
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

8672 
ov§ec_p‹t
 *
row
 = 
	`ov§ec_p‹t_ˇ°
(
row_
);

8674 
	`as£π
(
öôed
);

8675 i‡(
d©um
->
n
 >= 1) {

8676 
row
->
qos
 = 
	`ov§ec_qos_ˇ°
(
	`ovsdb_idl_gë_row_¨c
(
row_
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_QOS
], &
d©um
->
keys
[0].
uuid
));

8678 
row
->
qos
 = 
NULL
;

8680 
	}
}

8683 
	$ov§ec_p‹t_∑r£_°©i°ics
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

8685 
ov§ec_p‹t
 *
row
 = 
	`ov§ec_p‹t_ˇ°
(
row_
);

8686 
size_t
 
i
;

8688 
	`as£π
(
öôed
);

8689 
row
->
key_°©i°ics
 = 
NULL
;

8690 
row
->
vÆue_°©i°ics
 = 
NULL
;

8691 
row
->
n_°©i°ics
 = 0;

8692 
i
 = 0; i < 
d©um
->
n
; i++) {

8693 i‡(!
row
->
n_°©i°ics
) {

8694 
row
->
key_°©i°ics
 = 
	`xmÆloc
(
d©um
->
n
 *  *row->key_statistics);

8695 
row
->
vÆue_°©i°ics
 = 
	`xmÆloc
(
d©um
->
n
 *  *row->value_statistics);

8697 
row
->
key_°©i°ics
[row->
n_°©i°ics
] = 
d©um
->
keys
[
i
].
°rög
;

8698 
row
->
vÆue_°©i°ics
[row->
n_°©i°ics
] = 
d©um
->
vÆues
[
i
].
öãgî
;

8699 
row
->
n_°©i°ics
++;

8701 
	}
}

8704 
	$ov§ec_p‹t_∑r£_°©us
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

8706 
ov§ec_p‹t
 *
row
 = 
	`ov§ec_p‹t_ˇ°
(
row_
);

8707 
size_t
 
i
;

8709 
	`as£π
(
öôed
);

8710 
	`sm≠_öô
(&
row
->
°©us
);

8711 
i
 = 0; i < 
d©um
->
n
; i++) {

8712 
	`sm≠_add
(&
row
->
°©us
,

8713 
d©um
->
keys
[
i
].
°rög
,

8714 
d©um
->
vÆues
[
i
].
°rög
);

8716 
	}
}

8719 
	$ov§ec_p‹t_∑r£_èg
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

8721 
ov§ec_p‹t
 *
row
 = 
	`ov§ec_p‹t_ˇ°
(
row_
);

8722 
size_t
 
n
 = 
	`MIN
(1, 
d©um
->n);

8723 
size_t
 
i
;

8725 
	`as£π
(
öôed
);

8726 
row
->
èg
 = 
NULL
;

8727 
row
->
n_èg
 = 0;

8728 
i
 = 0; i < 
n
; i++) {

8729 i‡(!
row
->
n_èg
) {

8730 
row
->
èg
 = 
	`xmÆloc
(
n
 *  *row->tag);

8732 
row
->
èg
[row->
n_èg
] = 
d©um
->
keys
[
i
].
öãgî
;

8733 
row
->
n_èg
++;

8735 
	}
}

8738 
	$ov§ec_p‹t_∑r£_åunks
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

8740 
ov§ec_p‹t
 *
row
 = 
	`ov§ec_p‹t_ˇ°
(
row_
);

8741 
size_t
 
n
 = 
	`MIN
(4096, 
d©um
->n);

8742 
size_t
 
i
;

8744 
	`as£π
(
öôed
);

8745 
row
->
åunks
 = 
NULL
;

8746 
row
->
n_åunks
 = 0;

8747 
i
 = 0; i < 
n
; i++) {

8748 i‡(!
row
->
n_åunks
) {

8749 
row
->
åunks
 = 
	`xmÆloc
(
n
 *  *row->trunks);

8751 
row
->
åunks
[row->
n_åunks
] = 
d©um
->
keys
[
i
].
öãgî
;

8752 
row
->
n_åunks
++;

8754 
	}
}

8757 
	$ov§ec_p‹t_∑r£_vœn_mode
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

8759 
ov§ec_p‹t
 *
row
 = 
	`ov§ec_p‹t_ˇ°
(
row_
);

8761 
	`as£π
(
öôed
);

8762 i‡(
d©um
->
n
 >= 1) {

8763 
row
->
vœn_mode
 = 
d©um
->
keys
[0].
°rög
;

8765 
row
->
vœn_mode
 = 
NULL
;

8767 
	}
}

8770 
	$ov§ec_p‹t_u≈¨£_b⁄d_downdñay
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

8773 
	}
}

8776 
	$ov§ec_p‹t_u≈¨£_b⁄d_Áke_iÁ˚
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

8779 
	}
}

8782 
	$ov§ec_p‹t_u≈¨£_b⁄d_mode
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

8785 
	}
}

8788 
	$ov§ec_p‹t_u≈¨£_b⁄d_updñay
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

8791 
	}
}

8794 
	$ov§ec_p‹t_u≈¨£_exã∫Æ_ids
(
ovsdb_idl_row
 *
row_
)

8796 
ov§ec_p‹t
 *
row
 = 
	`ov§ec_p‹t_ˇ°
(
row_
);

8798 
	`as£π
(
öôed
);

8799 
	`sm≠_de°roy
(&
row
->
exã∫Æ_ids
);

8800 
	}
}

8803 
	$ov§ec_p‹t_u≈¨£_Áke_bridge
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

8806 
	}
}

8809 
	$ov§ec_p‹t_u≈¨£_öãrÁ˚s
(
ovsdb_idl_row
 *
row_
)

8811 
ov§ec_p‹t
 *
row
 = 
	`ov§ec_p‹t_ˇ°
(
row_
);

8813 
	`as£π
(
öôed
);

8814 
	`‰ì
(
row
->
öãrÁ˚s
);

8815 
	}
}

8818 
	$ov§ec_p‹t_u≈¨£_œ˝
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

8821 
	}
}

8824 
	$ov§ec_p‹t_u≈¨£_mac
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

8827 
	}
}

8830 
	$ov§ec_p‹t_u≈¨£_«me
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

8833 
	}
}

8836 
	$ov§ec_p‹t_u≈¨£_Ÿhî_c⁄fig
(
ovsdb_idl_row
 *
row_
)

8838 
ov§ec_p‹t
 *
row
 = 
	`ov§ec_p‹t_ˇ°
(
row_
);

8840 
	`as£π
(
öôed
);

8841 
	`sm≠_de°roy
(&
row
->
Ÿhî_c⁄fig
);

8842 
	}
}

8845 
	$ov§ec_p‹t_u≈¨£_qos
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

8848 
	}
}

8851 
	$ov§ec_p‹t_u≈¨£_°©i°ics
(
ovsdb_idl_row
 *
row_
)

8853 
ov§ec_p‹t
 *
row
 = 
	`ov§ec_p‹t_ˇ°
(
row_
);

8855 
	`as£π
(
öôed
);

8856 
	`‰ì
(
row
->
key_°©i°ics
);

8857 
	`‰ì
(
row
->
vÆue_°©i°ics
);

8858 
	}
}

8861 
	$ov§ec_p‹t_u≈¨£_°©us
(
ovsdb_idl_row
 *
row_
)

8863 
ov§ec_p‹t
 *
row
 = 
	`ov§ec_p‹t_ˇ°
(
row_
);

8865 
	`as£π
(
öôed
);

8866 
	`sm≠_de°roy
(&
row
->
°©us
);

8867 
	}
}

8870 
	$ov§ec_p‹t_u≈¨£_èg
(
ovsdb_idl_row
 *
row_
)

8872 
ov§ec_p‹t
 *
row
 = 
	`ov§ec_p‹t_ˇ°
(
row_
);

8874 
	`as£π
(
öôed
);

8875 
	`‰ì
(
row
->
èg
);

8876 
	}
}

8879 
	$ov§ec_p‹t_u≈¨£_åunks
(
ovsdb_idl_row
 *
row_
)

8881 
ov§ec_p‹t
 *
row
 = 
	`ov§ec_p‹t_ˇ°
(
row_
);

8883 
	`as£π
(
öôed
);

8884 
	`‰ì
(
row
->
åunks
);

8885 
	}
}

8888 
	$ov§ec_p‹t_u≈¨£_vœn_mode
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

8891 
	}
}

8894 
	$ov§ec_p‹t_öô__
(
ovsdb_idl_row
 *
row
)

8896 
	`ov§ec_p‹t_öô
(
	`ov§ec_p‹t_ˇ°
(
row
));

8897 
	}
}

8900 
	$ov§ec_p‹t_öô
(
ov§ec_p‹t
 *
row
)

8902 
	`mem£t
(
row
, 0,  *row);

8903 
	`sm≠_öô
(&
row
->
exã∫Æ_ids
);

8904 
	`sm≠_öô
(&
row
->
Ÿhî_c⁄fig
);

8905 
	`sm≠_öô
(&
row
->
°©us
);

8906 
	}
}

8908 c⁄° 
ov§ec_p‹t
 *

8909 
	$ov§ec_p‹t_fú°
(c⁄° 
ovsdb_idl
 *
idl
)

8911  
	`ov§ec_p‹t_ˇ°
(
	`ovsdb_idl_fú°_row
(
idl
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_PORT
]));

8912 
	}
}

8914 c⁄° 
ov§ec_p‹t
 *

8915 
	$ov§ec_p‹t_√xt
(c⁄° 
ov§ec_p‹t
 *
row
)

8917  
	`ov§ec_p‹t_ˇ°
(
	`ovsdb_idl_√xt_row
(&
row
->
hódî_
));

8918 
	}
}

8921 
	$ov§ec_p‹t_dñëe
(c⁄° 
ov§ec_p‹t
 *
row
)

8923 
	`ovsdb_idl_txn_dñëe
(&
row
->
hódî_
);

8924 
	}
}

8926 
ov§ec_p‹t
 *

8927 
	$ov§ec_p‹t_ö£π
(
ovsdb_idl_txn
 *
txn
)

8929  
	`ov§ec_p‹t_ˇ°
(
	`ovsdb_idl_txn_ö£π
(
txn
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_PORT
], 
NULL
));

8930 
	}
}

8934 
	$ov§ec_p‹t_vîify_b⁄d_downdñay
(c⁄° 
ov§ec_p‹t
 *
row
)

8936 
	`as£π
(
öôed
);

8937 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_BOND_DOWNDELAY
]);

8938 
	}
}

8941 
	$ov§ec_p‹t_vîify_b⁄d_Áke_iÁ˚
(c⁄° 
ov§ec_p‹t
 *
row
)

8943 
	`as£π
(
öôed
);

8944 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_BOND_FAKE_IFACE
]);

8945 
	}
}

8948 
	$ov§ec_p‹t_vîify_b⁄d_mode
(c⁄° 
ov§ec_p‹t
 *
row
)

8950 
	`as£π
(
öôed
);

8951 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_BOND_MODE
]);

8952 
	}
}

8955 
	$ov§ec_p‹t_vîify_b⁄d_updñay
(c⁄° 
ov§ec_p‹t
 *
row
)

8957 
	`as£π
(
öôed
);

8958 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_BOND_UPDELAY
]);

8959 
	}
}

8962 
	$ov§ec_p‹t_vîify_exã∫Æ_ids
(c⁄° 
ov§ec_p‹t
 *
row
)

8964 
	`as£π
(
öôed
);

8965 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_EXTERNAL_IDS
]);

8966 
	}
}

8969 
	$ov§ec_p‹t_vîify_Áke_bridge
(c⁄° 
ov§ec_p‹t
 *
row
)

8971 
	`as£π
(
öôed
);

8972 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_FAKE_BRIDGE
]);

8973 
	}
}

8976 
	$ov§ec_p‹t_vîify_öãrÁ˚s
(c⁄° 
ov§ec_p‹t
 *
row
)

8978 
	`as£π
(
öôed
);

8979 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_INTERFACES
]);

8980 
	}
}

8983 
	$ov§ec_p‹t_vîify_œ˝
(c⁄° 
ov§ec_p‹t
 *
row
)

8985 
	`as£π
(
öôed
);

8986 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_LACP
]);

8987 
	}
}

8990 
	$ov§ec_p‹t_vîify_mac
(c⁄° 
ov§ec_p‹t
 *
row
)

8992 
	`as£π
(
öôed
);

8993 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_MAC
]);

8994 
	}
}

8997 
	$ov§ec_p‹t_vîify_«me
(c⁄° 
ov§ec_p‹t
 *
row
)

8999 
	`as£π
(
öôed
);

9000 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_NAME
]);

9001 
	}
}

9004 
	$ov§ec_p‹t_vîify_Ÿhî_c⁄fig
(c⁄° 
ov§ec_p‹t
 *
row
)

9006 
	`as£π
(
öôed
);

9007 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_OTHER_CONFIG
]);

9008 
	}
}

9011 
	$ov§ec_p‹t_vîify_qos
(c⁄° 
ov§ec_p‹t
 *
row
)

9013 
	`as£π
(
öôed
);

9014 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_QOS
]);

9015 
	}
}

9018 
	$ov§ec_p‹t_vîify_°©i°ics
(c⁄° 
ov§ec_p‹t
 *
row
)

9020 
	`as£π
(
öôed
);

9021 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_STATISTICS
]);

9022 
	}
}

9025 
	$ov§ec_p‹t_vîify_°©us
(c⁄° 
ov§ec_p‹t
 *
row
)

9027 
	`as£π
(
öôed
);

9028 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_STATUS
]);

9029 
	}
}

9032 
	$ov§ec_p‹t_vîify_èg
(c⁄° 
ov§ec_p‹t
 *
row
)

9034 
	`as£π
(
öôed
);

9035 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_TAG
]);

9036 
	}
}

9039 
	$ov§ec_p‹t_vîify_åunks
(c⁄° 
ov§ec_p‹t
 *
row
)

9041 
	`as£π
(
öôed
);

9042 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_TRUNKS
]);

9043 
	}
}

9046 
	$ov§ec_p‹t_vîify_vœn_mode
(c⁄° 
ov§ec_p‹t
 *
row
)

9048 
	`as£π
(
öôed
);

9049 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_VLAN_MODE
]);

9050 
	}
}

9067 c⁄° 
ovsdb_d©um
 *

9068 
	$ov§ec_p‹t_gë_b⁄d_downdñay
(c⁄° 
ov§ec_p‹t
 *
row
,

9069 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

9071 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_INTEGER
);

9072  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁ_b⁄d_downdñay
);

9073 
	}
}

9090 c⁄° 
ovsdb_d©um
 *

9091 
	$ov§ec_p‹t_gë_b⁄d_Áke_iÁ˚
(c⁄° 
ov§ec_p‹t
 *
row
,

9092 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

9094 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_BOOLEAN
);

9095  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁ_b⁄d_Áke_iÁ˚
);

9096 
	}
}

9113 c⁄° 
ovsdb_d©um
 *

9114 
	$ov§ec_p‹t_gë_b⁄d_mode
(c⁄° 
ov§ec_p‹t
 *
row
,

9115 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

9117 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

9118  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁ_b⁄d_mode
);

9119 
	}
}

9136 c⁄° 
ovsdb_d©um
 *

9137 
	$ov§ec_p‹t_gë_b⁄d_updñay
(c⁄° 
ov§ec_p‹t
 *
row
,

9138 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

9140 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_INTEGER
);

9141  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁ_b⁄d_updñay
);

9142 
	}
}

9160 c⁄° 
ovsdb_d©um
 *

9161 
	$ov§ec_p‹t_gë_exã∫Æ_ids
(c⁄° 
ov§ec_p‹t
 *
row
,

9162 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
,

9163 
ovsdb_©omic_ty≥
 
vÆue_ty≥
 
OVS_UNUSED
)

9165 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

9166 
	`as£π
(
vÆue_ty≥
 =
OVSDB_TYPE_STRING
);

9167  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁ_exã∫Æ_ids
);

9168 
	}
}

9185 c⁄° 
ovsdb_d©um
 *

9186 
	$ov§ec_p‹t_gë_Áke_bridge
(c⁄° 
ov§ec_p‹t
 *
row
,

9187 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

9189 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_BOOLEAN
);

9190  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁ_Áke_bridge
);

9191 
	}
}

9208 c⁄° 
ovsdb_d©um
 *

9209 
	$ov§ec_p‹t_gë_öãrÁ˚s
(c⁄° 
ov§ec_p‹t
 *
row
,

9210 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

9212 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_UUID
);

9213  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁ_öãrÁ˚s
);

9214 
	}
}

9231 c⁄° 
ovsdb_d©um
 *

9232 
	$ov§ec_p‹t_gë_œ˝
(c⁄° 
ov§ec_p‹t
 *
row
,

9233 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

9235 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

9236  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁ_œ˝
);

9237 
	}
}

9254 c⁄° 
ovsdb_d©um
 *

9255 
	$ov§ec_p‹t_gë_mac
(c⁄° 
ov§ec_p‹t
 *
row
,

9256 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

9258 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

9259  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁ_mac
);

9260 
	}
}

9277 c⁄° 
ovsdb_d©um
 *

9278 
	$ov§ec_p‹t_gë_«me
(c⁄° 
ov§ec_p‹t
 *
row
,

9279 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

9281 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

9282  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁ_«me
);

9283 
	}
}

9301 c⁄° 
ovsdb_d©um
 *

9302 
	$ov§ec_p‹t_gë_Ÿhî_c⁄fig
(c⁄° 
ov§ec_p‹t
 *
row
,

9303 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
,

9304 
ovsdb_©omic_ty≥
 
vÆue_ty≥
 
OVS_UNUSED
)

9306 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

9307 
	`as£π
(
vÆue_ty≥
 =
OVSDB_TYPE_STRING
);

9308  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁ_Ÿhî_c⁄fig
);

9309 
	}
}

9326 c⁄° 
ovsdb_d©um
 *

9327 
	$ov§ec_p‹t_gë_qos
(c⁄° 
ov§ec_p‹t
 *
row
,

9328 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

9330 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_UUID
);

9331  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁ_qos
);

9332 
	}
}

9350 c⁄° 
ovsdb_d©um
 *

9351 
	$ov§ec_p‹t_gë_°©i°ics
(c⁄° 
ov§ec_p‹t
 *
row
,

9352 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
,

9353 
ovsdb_©omic_ty≥
 
vÆue_ty≥
 
OVS_UNUSED
)

9355 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

9356 
	`as£π
(
vÆue_ty≥
 =
OVSDB_TYPE_INTEGER
);

9357  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁ_°©i°ics
);

9358 
	}
}

9376 c⁄° 
ovsdb_d©um
 *

9377 
	$ov§ec_p‹t_gë_°©us
(c⁄° 
ov§ec_p‹t
 *
row
,

9378 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
,

9379 
ovsdb_©omic_ty≥
 
vÆue_ty≥
 
OVS_UNUSED
)

9381 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

9382 
	`as£π
(
vÆue_ty≥
 =
OVSDB_TYPE_STRING
);

9383  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁ_°©us
);

9384 
	}
}

9401 c⁄° 
ovsdb_d©um
 *

9402 
	$ov§ec_p‹t_gë_èg
(c⁄° 
ov§ec_p‹t
 *
row
,

9403 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

9405 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_INTEGER
);

9406  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁ_èg
);

9407 
	}
}

9424 c⁄° 
ovsdb_d©um
 *

9425 
	$ov§ec_p‹t_gë_åunks
(c⁄° 
ov§ec_p‹t
 *
row
,

9426 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

9428 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_INTEGER
);

9429  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁ_åunks
);

9430 
	}
}

9447 c⁄° 
ovsdb_d©um
 *

9448 
	$ov§ec_p‹t_gë_vœn_mode
(c⁄° 
ov§ec_p‹t
 *
row
,

9449 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

9451 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

9452  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁ_vœn_mode
);

9453 
	}
}

9456 
	$ov§ec_p‹t_£t_b⁄d_downdñay
(c⁄° 
ov§ec_p‹t
 *
row
, 
öt64_t
 
b⁄d_downdñay
)

9458 
ovsdb_d©um
 
d©um
;

9460 
	`as£π
(
öôed
);

9461 
d©um
.
n
 = 1;

9462 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

9463 
d©um
.
keys
[0].
öãgî
 = 
b⁄d_downdñay
;

9464 
d©um
.
vÆues
 = 
NULL
;

9465 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_BOND_DOWNDELAY
], &
d©um
);

9466 
	}
}

9469 
	$ov§ec_p‹t_£t_b⁄d_Áke_iÁ˚
(c⁄° 
ov§ec_p‹t
 *
row
, 
boﬁ
 
b⁄d_Áke_iÁ˚
)

9471 
ovsdb_d©um
 
d©um
;

9473 
	`as£π
(
öôed
);

9474 
d©um
.
n
 = 1;

9475 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

9476 
d©um
.
keys
[0].
boﬁón
 = 
b⁄d_Áke_iÁ˚
;

9477 
d©um
.
vÆues
 = 
NULL
;

9478 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_BOND_FAKE_IFACE
], &
d©um
);

9479 
	}
}

9482 
	$ov§ec_p‹t_£t_b⁄d_mode
(c⁄° 
ov§ec_p‹t
 *
row
, c⁄° *
b⁄d_mode
)

9484 
ovsdb_d©um
 
d©um
;

9486 
	`as£π
(
öôed
);

9487 i‡(
b⁄d_mode
) {

9488 
d©um
.
n
 = 1;

9489 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

9490 
d©um
.
keys
[0].
°rög
 = 
	`x°rdup
(
b⁄d_mode
);

9492 
d©um
.
n
 = 0;

9493 
d©um
.
keys
 = 
NULL
;

9495 
d©um
.
vÆues
 = 
NULL
;

9496 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_BOND_MODE
], &
d©um
);

9497 
	}
}

9500 
	$ov§ec_p‹t_£t_b⁄d_updñay
(c⁄° 
ov§ec_p‹t
 *
row
, 
öt64_t
 
b⁄d_updñay
)

9502 
ovsdb_d©um
 
d©um
;

9504 
	`as£π
(
öôed
);

9505 
d©um
.
n
 = 1;

9506 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

9507 
d©um
.
keys
[0].
öãgî
 = 
b⁄d_updñay
;

9508 
d©um
.
vÆues
 = 
NULL
;

9509 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_BOND_UPDELAY
], &
d©um
);

9510 
	}
}

9513 
	$ov§ec_p‹t_£t_exã∫Æ_ids
(c⁄° 
ov§ec_p‹t
 *
row
, c⁄° 
sm≠
 *smap)

9515 
ovsdb_d©um
 
d©um
;

9517 
	`as£π
(
öôed
);

9518 i‡(
sm≠
) {

9519 
sm≠_node
 *
node
;

9520 
size_t
 
i
;

9522 
d©um
.
n
 = 
	`sm≠_cou¡
(
sm≠
);

9523 
d©um
.
keys
 = 
	`xmÆloc
(d©um.
n
 *  *datum.keys);

9524 
d©um
.
vÆues
 = 
	`xmÆloc
(d©um.
n
 *  *datum.values);

9526 
i
 = 0;

9527 
	`SMAP_FOR_EACH
 (
node
, 
sm≠
) {

9528 
d©um
.
keys
[
i
].
°rög
 = 
	`x°rdup
(
node
->
key
);

9529 
d©um
.
vÆues
[
i
].
°rög
 = 
	`x°rdup
(
node
->
vÆue
);

9530 
i
++;

9532 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_STRING
, OVSDB_TYPE_STRING);

9534 
	`ovsdb_d©um_öô_em±y
(&
d©um
);

9536 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
,

9537 &
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_EXTERNAL_IDS
],

9538 &
d©um
);

9539 
	}
}

9543 
	$ov§ec_p‹t_£t_Áke_bridge
(c⁄° 
ov§ec_p‹t
 *
row
, 
boﬁ
 
Áke_bridge
)

9545 
ovsdb_d©um
 
d©um
;

9547 
	`as£π
(
öôed
);

9548 
d©um
.
n
 = 1;

9549 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

9550 
d©um
.
keys
[0].
boﬁón
 = 
Áke_bridge
;

9551 
d©um
.
vÆues
 = 
NULL
;

9552 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_FAKE_BRIDGE
], &
d©um
);

9553 
	}
}

9556 
	$ov§ec_p‹t_£t_öãrÁ˚s
(c⁄° 
ov§ec_p‹t
 *
row
, 
ov§ec_öãrÁ˚
 **
öãrÁ˚s
, 
size_t
 
n_öãrÁ˚s
)

9558 
ovsdb_d©um
 
d©um
;

9559 
size_t
 
i
;

9561 
	`as£π
(
öôed
);

9562 
d©um
.
n
 = 
n_öãrÁ˚s
;

9563 
d©um
.
keys
 = 
	`xmÆloc
(
n_öãrÁ˚s
 *  *datum.keys);

9564 
d©um
.
vÆues
 = 
NULL
;

9565 
i
 = 0; i < 
n_öãrÁ˚s
; i++) {

9566 
d©um
.
keys
[
i
].
uuid
 = 
öãrÁ˚s
[i]->
hódî_
.uuid;

9568 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_UUID
, 
OVSDB_TYPE_VOID
);

9569 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_INTERFACES
], &
d©um
);

9570 
	}
}

9573 
	$ov§ec_p‹t_£t_œ˝
(c⁄° 
ov§ec_p‹t
 *
row
, c⁄° *
œ˝
)

9575 
ovsdb_d©um
 
d©um
;

9577 
	`as£π
(
öôed
);

9578 i‡(
œ˝
) {

9579 
d©um
.
n
 = 1;

9580 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

9581 
d©um
.
keys
[0].
°rög
 = 
	`x°rdup
(
œ˝
);

9583 
d©um
.
n
 = 0;

9584 
d©um
.
keys
 = 
NULL
;

9586 
d©um
.
vÆues
 = 
NULL
;

9587 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_LACP
], &
d©um
);

9588 
	}
}

9591 
	$ov§ec_p‹t_£t_mac
(c⁄° 
ov§ec_p‹t
 *
row
, c⁄° *
mac
)

9593 
ovsdb_d©um
 
d©um
;

9595 
	`as£π
(
öôed
);

9596 i‡(
mac
) {

9597 
d©um
.
n
 = 1;

9598 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

9599 
d©um
.
keys
[0].
°rög
 = 
	`x°rdup
(
mac
);

9601 
d©um
.
n
 = 0;

9602 
d©um
.
keys
 = 
NULL
;

9604 
d©um
.
vÆues
 = 
NULL
;

9605 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_MAC
], &
d©um
);

9606 
	}
}

9609 
	$ov§ec_p‹t_£t_«me
(c⁄° 
ov§ec_p‹t
 *
row
, c⁄° *
«me
)

9611 
ovsdb_d©um
 
d©um
;

9613 
	`as£π
(
öôed
);

9614 
d©um
.
n
 = 1;

9615 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

9616 
d©um
.
keys
[0].
°rög
 = 
	`x°rdup
(
«me
);

9617 
d©um
.
vÆues
 = 
NULL
;

9618 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_NAME
], &
d©um
);

9619 
	}
}

9622 
	$ov§ec_p‹t_£t_Ÿhî_c⁄fig
(c⁄° 
ov§ec_p‹t
 *
row
, c⁄° 
sm≠
 *smap)

9624 
ovsdb_d©um
 
d©um
;

9626 
	`as£π
(
öôed
);

9627 i‡(
sm≠
) {

9628 
sm≠_node
 *
node
;

9629 
size_t
 
i
;

9631 
d©um
.
n
 = 
	`sm≠_cou¡
(
sm≠
);

9632 
d©um
.
keys
 = 
	`xmÆloc
(d©um.
n
 *  *datum.keys);

9633 
d©um
.
vÆues
 = 
	`xmÆloc
(d©um.
n
 *  *datum.values);

9635 
i
 = 0;

9636 
	`SMAP_FOR_EACH
 (
node
, 
sm≠
) {

9637 
d©um
.
keys
[
i
].
°rög
 = 
	`x°rdup
(
node
->
key
);

9638 
d©um
.
vÆues
[
i
].
°rög
 = 
	`x°rdup
(
node
->
vÆue
);

9639 
i
++;

9641 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_STRING
, OVSDB_TYPE_STRING);

9643 
	`ovsdb_d©um_öô_em±y
(&
d©um
);

9645 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
,

9646 &
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_OTHER_CONFIG
],

9647 &
d©um
);

9648 
	}
}

9652 
	$ov§ec_p‹t_£t_qos
(c⁄° 
ov§ec_p‹t
 *
row
, c⁄° 
ov§ec_qos
 *
qos
)

9654 
ovsdb_d©um
 
d©um
;

9656 
	`as£π
(
öôed
);

9657 i‡(
qos
) {

9658 
d©um
.
n
 = 1;

9659 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

9660 
d©um
.
keys
[0].
uuid
 = 
qos
->
hódî_
.uuid;

9662 
d©um
.
n
 = 0;

9663 
d©um
.
keys
 = 
NULL
;

9665 
d©um
.
vÆues
 = 
NULL
;

9666 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_QOS
], &
d©um
);

9667 
	}
}

9670 
	$ov§ec_p‹t_£t_°©i°ics
(c⁄° 
ov§ec_p‹t
 *
row
, **
key_°©i°ics
, c⁄° 
öt64_t
 *
vÆue_°©i°ics
, 
size_t
 
n_°©i°ics
)

9672 
ovsdb_d©um
 
d©um
;

9673 
size_t
 
i
;

9675 
	`as£π
(
öôed
);

9676 
d©um
.
n
 = 
n_°©i°ics
;

9677 
d©um
.
keys
 = 
	`xmÆloc
(
n_°©i°ics
 *  *datum.keys);

9678 
d©um
.
vÆues
 = 
	`xmÆloc
(
n_°©i°ics
 *  *datum.values);

9679 
i
 = 0; i < 
n_°©i°ics
; i++) {

9680 
d©um
.
keys
[
i
].
°rög
 = 
	`x°rdup
(
key_°©i°ics
[i]);

9681 
d©um
.
vÆues
[
i
].
öãgî
 = 
vÆue_°©i°ics
[i];

9683 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_STRING
, 
OVSDB_TYPE_INTEGER
);

9684 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_STATISTICS
], &
d©um
);

9685 
	}
}

9688 
	$ov§ec_p‹t_£t_°©us
(c⁄° 
ov§ec_p‹t
 *
row
, c⁄° 
sm≠
 *smap)

9690 
ovsdb_d©um
 
d©um
;

9692 
	`as£π
(
öôed
);

9693 i‡(
sm≠
) {

9694 
sm≠_node
 *
node
;

9695 
size_t
 
i
;

9697 
d©um
.
n
 = 
	`sm≠_cou¡
(
sm≠
);

9698 
d©um
.
keys
 = 
	`xmÆloc
(d©um.
n
 *  *datum.keys);

9699 
d©um
.
vÆues
 = 
	`xmÆloc
(d©um.
n
 *  *datum.values);

9701 
i
 = 0;

9702 
	`SMAP_FOR_EACH
 (
node
, 
sm≠
) {

9703 
d©um
.
keys
[
i
].
°rög
 = 
	`x°rdup
(
node
->
key
);

9704 
d©um
.
vÆues
[
i
].
°rög
 = 
	`x°rdup
(
node
->
vÆue
);

9705 
i
++;

9707 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_STRING
, OVSDB_TYPE_STRING);

9709 
	`ovsdb_d©um_öô_em±y
(&
d©um
);

9711 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
,

9712 &
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_STATUS
],

9713 &
d©um
);

9714 
	}
}

9718 
	$ov§ec_p‹t_£t_èg
(c⁄° 
ov§ec_p‹t
 *
row
, c⁄° 
öt64_t
 *
èg
, 
size_t
 
n_èg
)

9720 
ovsdb_d©um
 
d©um
;

9721 
size_t
 
i
;

9723 
	`as£π
(
öôed
);

9724 
d©um
.
n
 = 
n_èg
;

9725 
d©um
.
keys
 = 
	`xmÆloc
(
n_èg
 *  *datum.keys);

9726 
d©um
.
vÆues
 = 
NULL
;

9727 
i
 = 0; i < 
n_èg
; i++) {

9728 
d©um
.
keys
[
i
].
öãgî
 = 
èg
[i];

9730 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_INTEGER
, 
OVSDB_TYPE_VOID
);

9731 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_TAG
], &
d©um
);

9732 
	}
}

9735 
	$ov§ec_p‹t_£t_åunks
(c⁄° 
ov§ec_p‹t
 *
row
, c⁄° 
öt64_t
 *
åunks
, 
size_t
 
n_åunks
)

9737 
ovsdb_d©um
 
d©um
;

9738 
size_t
 
i
;

9740 
	`as£π
(
öôed
);

9741 
d©um
.
n
 = 
n_åunks
;

9742 
d©um
.
keys
 = 
	`xmÆloc
(
n_åunks
 *  *datum.keys);

9743 
d©um
.
vÆues
 = 
NULL
;

9744 
i
 = 0; i < 
n_åunks
; i++) {

9745 
d©um
.
keys
[
i
].
öãgî
 = 
åunks
[i];

9747 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_INTEGER
, 
OVSDB_TYPE_VOID
);

9748 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_TRUNKS
], &
d©um
);

9749 
	}
}

9752 
	$ov§ec_p‹t_£t_vœn_mode
(c⁄° 
ov§ec_p‹t
 *
row
, c⁄° *
vœn_mode
)

9754 
ovsdb_d©um
 
d©um
;

9756 
	`as£π
(
öôed
);

9757 i‡(
vœn_mode
) {

9758 
d©um
.
n
 = 1;

9759 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

9760 
d©um
.
keys
[0].
°rög
 = 
	`x°rdup
(
vœn_mode
);

9762 
d©um
.
n
 = 0;

9763 
d©um
.
keys
 = 
NULL
;

9765 
d©um
.
vÆues
 = 
NULL
;

9766 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_VLAN_MODE
], &
d©um
);

9767 
	}
}

9769 
ovsdb_idl_cﬁumn
 
	gov§ec_p‹t_cﬁumns
[
OVSREC_PORT_N_COLUMNS
];

9772 
	$ov§ec_p‹t_cﬁumns_öô
()

9774 
ovsdb_idl_cﬁumn
 *
c
;

9777 
c
 = &
ov§ec_p‹t_cﬁ_b⁄d_downdñay
;

9778 
c
->
«me
 = "bond_downdelay";

9779 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_INTEGER
);

9780 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

9781 
c
->
ty≥
.
n_mö
 = 1;

9782 
c
->
ty≥
.
n_max
 = 1;

9783 
c
->
muèbÀ
 = 
åue
;

9784 
c
->
∑r£
 = 
ov§ec_p‹t_∑r£_b⁄d_downdñay
;

9785 
c
->
u≈¨£
 = 
ov§ec_p‹t_u≈¨£_b⁄d_downdñay
;

9788 
c
 = &
ov§ec_p‹t_cﬁ_b⁄d_Áke_iÁ˚
;

9789 
c
->
«me
 = "bond_fake_iface";

9790 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_BOOLEAN
);

9791 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

9792 
c
->
ty≥
.
n_mö
 = 1;

9793 
c
->
ty≥
.
n_max
 = 1;

9794 
c
->
muèbÀ
 = 
åue
;

9795 
c
->
∑r£
 = 
ov§ec_p‹t_∑r£_b⁄d_Áke_iÁ˚
;

9796 
c
->
u≈¨£
 = 
ov§ec_p‹t_u≈¨£_b⁄d_Áke_iÁ˚
;

9799 
c
 = &
ov§ec_p‹t_cﬁ_b⁄d_mode
;

9800 
c
->
«me
 = "bond_mode";

9801 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

9802 
c
->
ty≥
.
key
.
íum_
 = 
	`xmÆloc
( *c->type.key.enum_);

9803 
c
->
ty≥
.
key
.
íum_
->
n
 = 4;

9804 
c
->
ty≥
.
key
.
íum_
->
keys
 = 
	`xmÆloc
(4 *  *c->type.key.enum_->keys);

9805 
c
->
ty≥
.
key
.
íum_
->
keys
[0].
°rög
 = 
	`x°rdup
("active-backup");

9806 
c
->
ty≥
.
key
.
íum_
->
keys
[1].
°rög
 = 
	`x°rdup
("balance-slb");

9807 
c
->
ty≥
.
key
.
íum_
->
keys
[2].
°rög
 = 
	`x°rdup
("balance-tcp");

9808 
c
->
ty≥
.
key
.
íum_
->
keys
[3].
°rög
 = 
	`x°rdup
("stable");

9809 
c
->
ty≥
.
key
.
íum_
->
vÆues
 = 
NULL
;

9810 
	`ovsdb_d©um_s‹t_as£π
(
c
->
ty≥
.
key
.
íum_
, 
OVSDB_TYPE_STRING
);

9811 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

9812 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

9813 
c
->
ty≥
.
n_mö
 = 0;

9814 
c
->
ty≥
.
n_max
 = 1;

9815 
c
->
muèbÀ
 = 
åue
;

9816 
c
->
∑r£
 = 
ov§ec_p‹t_∑r£_b⁄d_mode
;

9817 
c
->
u≈¨£
 = 
ov§ec_p‹t_u≈¨£_b⁄d_mode
;

9820 
c
 = &
ov§ec_p‹t_cﬁ_b⁄d_updñay
;

9821 
c
->
«me
 = "bond_updelay";

9822 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_INTEGER
);

9823 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

9824 
c
->
ty≥
.
n_mö
 = 1;

9825 
c
->
ty≥
.
n_max
 = 1;

9826 
c
->
muèbÀ
 = 
åue
;

9827 
c
->
∑r£
 = 
ov§ec_p‹t_∑r£_b⁄d_updñay
;

9828 
c
->
u≈¨£
 = 
ov§ec_p‹t_u≈¨£_b⁄d_updñay
;

9831 
c
 = &
ov§ec_p‹t_cﬁ_exã∫Æ_ids
;

9832 
c
->
«me
 = "external_ids";

9833 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

9834 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

9835 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_STRING
);

9836 
c
->
ty≥
.
vÆue
.
u
.
°rög
.
möLí
 = 0;

9837 
c
->
ty≥
.
n_mö
 = 0;

9838 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

9839 
c
->
muèbÀ
 = 
åue
;

9840 
c
->
∑r£
 = 
ov§ec_p‹t_∑r£_exã∫Æ_ids
;

9841 
c
->
u≈¨£
 = 
ov§ec_p‹t_u≈¨£_exã∫Æ_ids
;

9844 
c
 = &
ov§ec_p‹t_cﬁ_Áke_bridge
;

9845 
c
->
«me
 = "fake_bridge";

9846 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_BOOLEAN
);

9847 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

9848 
c
->
ty≥
.
n_mö
 = 1;

9849 
c
->
ty≥
.
n_max
 = 1;

9850 
c
->
muèbÀ
 = 
åue
;

9851 
c
->
∑r£
 = 
ov§ec_p‹t_∑r£_Áke_bridge
;

9852 
c
->
u≈¨£
 = 
ov§ec_p‹t_u≈¨£_Áke_bridge
;

9855 
c
 = &
ov§ec_p‹t_cﬁ_öãrÁ˚s
;

9856 
c
->
«me
 = "interfaces";

9857 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_UUID
);

9858 
c
->
ty≥
.
key
.
u
.
uuid
.
ªfTabÀName
 = "Interface";

9859 
c
->
ty≥
.
key
.
u
.
uuid
.
ªfTy≥
 = 
OVSDB_REF_STRONG
;

9860 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

9861 
c
->
ty≥
.
n_mö
 = 1;

9862 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

9863 
c
->
muèbÀ
 = 
åue
;

9864 
c
->
∑r£
 = 
ov§ec_p‹t_∑r£_öãrÁ˚s
;

9865 
c
->
u≈¨£
 = 
ov§ec_p‹t_u≈¨£_öãrÁ˚s
;

9868 
c
 = &
ov§ec_p‹t_cﬁ_œ˝
;

9869 
c
->
«me
 = "lacp";

9870 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

9871 
c
->
ty≥
.
key
.
íum_
 = 
	`xmÆloc
( *c->type.key.enum_);

9872 
c
->
ty≥
.
key
.
íum_
->
n
 = 3;

9873 
c
->
ty≥
.
key
.
íum_
->
keys
 = 
	`xmÆloc
(3 *  *c->type.key.enum_->keys);

9874 
c
->
ty≥
.
key
.
íum_
->
keys
[0].
°rög
 = 
	`x°rdup
("active");

9875 
c
->
ty≥
.
key
.
íum_
->
keys
[1].
°rög
 = 
	`x°rdup
("off");

9876 
c
->
ty≥
.
key
.
íum_
->
keys
[2].
°rög
 = 
	`x°rdup
("passive");

9877 
c
->
ty≥
.
key
.
íum_
->
vÆues
 = 
NULL
;

9878 
	`ovsdb_d©um_s‹t_as£π
(
c
->
ty≥
.
key
.
íum_
, 
OVSDB_TYPE_STRING
);

9879 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

9880 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

9881 
c
->
ty≥
.
n_mö
 = 0;

9882 
c
->
ty≥
.
n_max
 = 1;

9883 
c
->
muèbÀ
 = 
åue
;

9884 
c
->
∑r£
 = 
ov§ec_p‹t_∑r£_œ˝
;

9885 
c
->
u≈¨£
 = 
ov§ec_p‹t_u≈¨£_œ˝
;

9888 
c
 = &
ov§ec_p‹t_cﬁ_mac
;

9889 
c
->
«me
 = "mac";

9890 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

9891 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

9892 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

9893 
c
->
ty≥
.
n_mö
 = 0;

9894 
c
->
ty≥
.
n_max
 = 1;

9895 
c
->
muèbÀ
 = 
åue
;

9896 
c
->
∑r£
 = 
ov§ec_p‹t_∑r£_mac
;

9897 
c
->
u≈¨£
 = 
ov§ec_p‹t_u≈¨£_mac
;

9900 
c
 = &
ov§ec_p‹t_cﬁ_«me
;

9901 
c
->
«me
 = "name";

9902 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

9903 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

9904 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

9905 
c
->
ty≥
.
n_mö
 = 1;

9906 
c
->
ty≥
.
n_max
 = 1;

9907 
c
->
muèbÀ
 = 
Ál£
;

9908 
c
->
∑r£
 = 
ov§ec_p‹t_∑r£_«me
;

9909 
c
->
u≈¨£
 = 
ov§ec_p‹t_u≈¨£_«me
;

9912 
c
 = &
ov§ec_p‹t_cﬁ_Ÿhî_c⁄fig
;

9913 
c
->
«me
 = "other_config";

9914 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

9915 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

9916 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_STRING
);

9917 
c
->
ty≥
.
vÆue
.
u
.
°rög
.
möLí
 = 0;

9918 
c
->
ty≥
.
n_mö
 = 0;

9919 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

9920 
c
->
muèbÀ
 = 
åue
;

9921 
c
->
∑r£
 = 
ov§ec_p‹t_∑r£_Ÿhî_c⁄fig
;

9922 
c
->
u≈¨£
 = 
ov§ec_p‹t_u≈¨£_Ÿhî_c⁄fig
;

9925 
c
 = &
ov§ec_p‹t_cﬁ_qos
;

9926 
c
->
«me
 = "qos";

9927 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_UUID
);

9928 
c
->
ty≥
.
key
.
u
.
uuid
.
ªfTabÀName
 = "QoS";

9929 
c
->
ty≥
.
key
.
u
.
uuid
.
ªfTy≥
 = 
OVSDB_REF_STRONG
;

9930 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

9931 
c
->
ty≥
.
n_mö
 = 0;

9932 
c
->
ty≥
.
n_max
 = 1;

9933 
c
->
muèbÀ
 = 
åue
;

9934 
c
->
∑r£
 = 
ov§ec_p‹t_∑r£_qos
;

9935 
c
->
u≈¨£
 = 
ov§ec_p‹t_u≈¨£_qos
;

9938 
c
 = &
ov§ec_p‹t_cﬁ_°©i°ics
;

9939 
c
->
«me
 = "statistics";

9940 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

9941 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

9942 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_INTEGER
);

9943 
c
->
ty≥
.
n_mö
 = 0;

9944 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

9945 
c
->
muèbÀ
 = 
åue
;

9946 
c
->
∑r£
 = 
ov§ec_p‹t_∑r£_°©i°ics
;

9947 
c
->
u≈¨£
 = 
ov§ec_p‹t_u≈¨£_°©i°ics
;

9950 
c
 = &
ov§ec_p‹t_cﬁ_°©us
;

9951 
c
->
«me
 = "status";

9952 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

9953 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

9954 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_STRING
);

9955 
c
->
ty≥
.
vÆue
.
u
.
°rög
.
möLí
 = 0;

9956 
c
->
ty≥
.
n_mö
 = 0;

9957 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

9958 
c
->
muèbÀ
 = 
åue
;

9959 
c
->
∑r£
 = 
ov§ec_p‹t_∑r£_°©us
;

9960 
c
->
u≈¨£
 = 
ov§ec_p‹t_u≈¨£_°©us
;

9963 
c
 = &
ov§ec_p‹t_cﬁ_èg
;

9964 
c
->
«me
 = "tag";

9965 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_INTEGER
);

9966 
c
->
ty≥
.
key
.
u
.
öãgî
.
mö
 = 
	`INT64_C
(0);

9967 
c
->
ty≥
.
key
.
u
.
öãgî
.
max
 = 
	`INT64_C
(4095);

9968 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

9969 
c
->
ty≥
.
n_mö
 = 0;

9970 
c
->
ty≥
.
n_max
 = 1;

9971 
c
->
muèbÀ
 = 
åue
;

9972 
c
->
∑r£
 = 
ov§ec_p‹t_∑r£_èg
;

9973 
c
->
u≈¨£
 = 
ov§ec_p‹t_u≈¨£_èg
;

9976 
c
 = &
ov§ec_p‹t_cﬁ_åunks
;

9977 
c
->
«me
 = "trunks";

9978 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_INTEGER
);

9979 
c
->
ty≥
.
key
.
u
.
öãgî
.
mö
 = 
	`INT64_C
(0);

9980 
c
->
ty≥
.
key
.
u
.
öãgî
.
max
 = 
	`INT64_C
(4095);

9981 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

9982 
c
->
ty≥
.
n_mö
 = 0;

9983 
c
->
ty≥
.
n_max
 = 4096;

9984 
c
->
muèbÀ
 = 
åue
;

9985 
c
->
∑r£
 = 
ov§ec_p‹t_∑r£_åunks
;

9986 
c
->
u≈¨£
 = 
ov§ec_p‹t_u≈¨£_åunks
;

9989 
c
 = &
ov§ec_p‹t_cﬁ_vœn_mode
;

9990 
c
->
«me
 = "vlan_mode";

9991 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

9992 
c
->
ty≥
.
key
.
íum_
 = 
	`xmÆloc
( *c->type.key.enum_);

9993 
c
->
ty≥
.
key
.
íum_
->
n
 = 4;

9994 
c
->
ty≥
.
key
.
íum_
->
keys
 = 
	`xmÆloc
(4 *  *c->type.key.enum_->keys);

9995 
c
->
ty≥
.
key
.
íum_
->
keys
[0].
°rög
 = 
	`x°rdup
("access");

9996 
c
->
ty≥
.
key
.
íum_
->
keys
[1].
°rög
 = 
	`x°rdup
("native-tagged");

9997 
c
->
ty≥
.
key
.
íum_
->
keys
[2].
°rög
 = 
	`x°rdup
("native-untagged");

9998 
c
->
ty≥
.
key
.
íum_
->
keys
[3].
°rög
 = 
	`x°rdup
("trunk");

9999 
c
->
ty≥
.
key
.
íum_
->
vÆues
 = 
NULL
;

10000 
	`ovsdb_d©um_s‹t_as£π
(
c
->
ty≥
.
key
.
íum_
, 
OVSDB_TYPE_STRING
);

10001 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

10002 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

10003 
c
->
ty≥
.
n_mö
 = 0;

10004 
c
->
ty≥
.
n_max
 = 1;

10005 
c
->
muèbÀ
 = 
åue
;

10006 
c
->
∑r£
 = 
ov§ec_p‹t_∑r£_vœn_mode
;

10007 
c
->
u≈¨£
 = 
ov§ec_p‹t_u≈¨£_vœn_mode
;

10008 
	}
}

10013 
	$ov§ec_qos_∑r£_exã∫Æ_ids
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

10015 
ov§ec_qos
 *
row
 = 
	`ov§ec_qos_ˇ°
(
row_
);

10016 
size_t
 
i
;

10018 
	`as£π
(
öôed
);

10019 
	`sm≠_öô
(&
row
->
exã∫Æ_ids
);

10020 
i
 = 0; i < 
d©um
->
n
; i++) {

10021 
	`sm≠_add
(&
row
->
exã∫Æ_ids
,

10022 
d©um
->
keys
[
i
].
°rög
,

10023 
d©um
->
vÆues
[
i
].
°rög
);

10025 
	}
}

10028 
	$ov§ec_qos_∑r£_Ÿhî_c⁄fig
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

10030 
ov§ec_qos
 *
row
 = 
	`ov§ec_qos_ˇ°
(
row_
);

10031 
size_t
 
i
;

10033 
	`as£π
(
öôed
);

10034 
	`sm≠_öô
(&
row
->
Ÿhî_c⁄fig
);

10035 
i
 = 0; i < 
d©um
->
n
; i++) {

10036 
	`sm≠_add
(&
row
->
Ÿhî_c⁄fig
,

10037 
d©um
->
keys
[
i
].
°rög
,

10038 
d©um
->
vÆues
[
i
].
°rög
);

10040 
	}
}

10043 
	$ov§ec_qos_∑r£_queues
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

10045 
ov§ec_qos
 *
row
 = 
	`ov§ec_qos_ˇ°
(
row_
);

10046 
size_t
 
i
;

10048 
	`as£π
(
öôed
);

10049 
row
->
key_queues
 = 
NULL
;

10050 
row
->
vÆue_queues
 = 
NULL
;

10051 
row
->
n_queues
 = 0;

10052 
i
 = 0; i < 
d©um
->
n
; i++) {

10053 
ov§ec_queue
 *
vÆueRow
 = 
	`ov§ec_queue_ˇ°
(
	`ovsdb_idl_gë_row_¨c
(
row_
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_QUEUE
], &
d©um
->
vÆues
[
i
].
uuid
));

10054 i‡(
vÆueRow
) {

10055 i‡(!
row
->
n_queues
) {

10056 
row
->
key_queues
 = 
	`xmÆloc
(
d©um
->
n
 *  *row->key_queues);

10057 
row
->
vÆue_queues
 = 
	`xmÆloc
(
d©um
->
n
 *  *row->value_queues);

10059 
row
->
key_queues
[row->
n_queues
] = 
d©um
->
keys
[
i
].
öãgî
;

10060 
row
->
vÆue_queues
[row->
n_queues
] = 
vÆueRow
;

10061 
row
->
n_queues
++;

10064 
	}
}

10067 
	$ov§ec_qos_∑r£_ty≥
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

10069 
ov§ec_qos
 *
row
 = 
	`ov§ec_qos_ˇ°
(
row_
);

10071 
	`as£π
(
öôed
);

10072 i‡(
d©um
->
n
 >= 1) {

10073 
row
->
ty≥
 = 
d©um
->
keys
[0].
°rög
;

10075 
row
->
ty≥
 = "";

10077 
	}
}

10080 
	$ov§ec_qos_u≈¨£_exã∫Æ_ids
(
ovsdb_idl_row
 *
row_
)

10082 
ov§ec_qos
 *
row
 = 
	`ov§ec_qos_ˇ°
(
row_
);

10084 
	`as£π
(
öôed
);

10085 
	`sm≠_de°roy
(&
row
->
exã∫Æ_ids
);

10086 
	}
}

10089 
	$ov§ec_qos_u≈¨£_Ÿhî_c⁄fig
(
ovsdb_idl_row
 *
row_
)

10091 
ov§ec_qos
 *
row
 = 
	`ov§ec_qos_ˇ°
(
row_
);

10093 
	`as£π
(
öôed
);

10094 
	`sm≠_de°roy
(&
row
->
Ÿhî_c⁄fig
);

10095 
	}
}

10098 
	$ov§ec_qos_u≈¨£_queues
(
ovsdb_idl_row
 *
row_
)

10100 
ov§ec_qos
 *
row
 = 
	`ov§ec_qos_ˇ°
(
row_
);

10102 
	`as£π
(
öôed
);

10103 
	`‰ì
(
row
->
key_queues
);

10104 
	`‰ì
(
row
->
vÆue_queues
);

10105 
	}
}

10108 
	$ov§ec_qos_u≈¨£_ty≥
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

10111 
	}
}

10114 
	$ov§ec_qos_öô__
(
ovsdb_idl_row
 *
row
)

10116 
	`ov§ec_qos_öô
(
	`ov§ec_qos_ˇ°
(
row
));

10117 
	}
}

10120 
	$ov§ec_qos_öô
(
ov§ec_qos
 *
row
)

10122 
	`mem£t
(
row
, 0,  *row);

10123 
	`sm≠_öô
(&
row
->
exã∫Æ_ids
);

10124 
	`sm≠_öô
(&
row
->
Ÿhî_c⁄fig
);

10125 
	}
}

10127 c⁄° 
ov§ec_qos
 *

10128 
	$ov§ec_qos_fú°
(c⁄° 
ovsdb_idl
 *
idl
)

10130  
	`ov§ec_qos_ˇ°
(
	`ovsdb_idl_fú°_row
(
idl
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_QOS
]));

10131 
	}
}

10133 c⁄° 
ov§ec_qos
 *

10134 
	$ov§ec_qos_√xt
(c⁄° 
ov§ec_qos
 *
row
)

10136  
	`ov§ec_qos_ˇ°
(
	`ovsdb_idl_√xt_row
(&
row
->
hódî_
));

10137 
	}
}

10140 
	$ov§ec_qos_dñëe
(c⁄° 
ov§ec_qos
 *
row
)

10142 
	`ovsdb_idl_txn_dñëe
(&
row
->
hódî_
);

10143 
	}
}

10145 
ov§ec_qos
 *

10146 
	$ov§ec_qos_ö£π
(
ovsdb_idl_txn
 *
txn
)

10148  
	`ov§ec_qos_ˇ°
(
	`ovsdb_idl_txn_ö£π
(
txn
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_QOS
], 
NULL
));

10149 
	}
}

10153 
	$ov§ec_qos_vîify_exã∫Æ_ids
(c⁄° 
ov§ec_qos
 *
row
)

10155 
	`as£π
(
öôed
);

10156 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_qos_cﬁumns
[
OVSREC_QOS_COL_EXTERNAL_IDS
]);

10157 
	}
}

10160 
	$ov§ec_qos_vîify_Ÿhî_c⁄fig
(c⁄° 
ov§ec_qos
 *
row
)

10162 
	`as£π
(
öôed
);

10163 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_qos_cﬁumns
[
OVSREC_QOS_COL_OTHER_CONFIG
]);

10164 
	}
}

10167 
	$ov§ec_qos_vîify_queues
(c⁄° 
ov§ec_qos
 *
row
)

10169 
	`as£π
(
öôed
);

10170 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_qos_cﬁumns
[
OVSREC_QOS_COL_QUEUES
]);

10171 
	}
}

10174 
	$ov§ec_qos_vîify_ty≥
(c⁄° 
ov§ec_qos
 *
row
)

10176 
	`as£π
(
öôed
);

10177 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_qos_cﬁumns
[
OVSREC_QOS_COL_TYPE
]);

10178 
	}
}

10196 c⁄° 
ovsdb_d©um
 *

10197 
	$ov§ec_qos_gë_exã∫Æ_ids
(c⁄° 
ov§ec_qos
 *
row
,

10198 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
,

10199 
ovsdb_©omic_ty≥
 
vÆue_ty≥
 
OVS_UNUSED
)

10201 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

10202 
	`as£π
(
vÆue_ty≥
 =
OVSDB_TYPE_STRING
);

10203  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_qos_cﬁ_exã∫Æ_ids
);

10204 
	}
}

10222 c⁄° 
ovsdb_d©um
 *

10223 
	$ov§ec_qos_gë_Ÿhî_c⁄fig
(c⁄° 
ov§ec_qos
 *
row
,

10224 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
,

10225 
ovsdb_©omic_ty≥
 
vÆue_ty≥
 
OVS_UNUSED
)

10227 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

10228 
	`as£π
(
vÆue_ty≥
 =
OVSDB_TYPE_STRING
);

10229  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_qos_cﬁ_Ÿhî_c⁄fig
);

10230 
	}
}

10248 c⁄° 
ovsdb_d©um
 *

10249 
	$ov§ec_qos_gë_queues
(c⁄° 
ov§ec_qos
 *
row
,

10250 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
,

10251 
ovsdb_©omic_ty≥
 
vÆue_ty≥
 
OVS_UNUSED
)

10253 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_INTEGER
);

10254 
	`as£π
(
vÆue_ty≥
 =
OVSDB_TYPE_UUID
);

10255  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_qos_cﬁ_queues
);

10256 
	}
}

10273 c⁄° 
ovsdb_d©um
 *

10274 
	$ov§ec_qos_gë_ty≥
(c⁄° 
ov§ec_qos
 *
row
,

10275 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

10277 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

10278  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_qos_cﬁ_ty≥
);

10279 
	}
}

10282 
	$ov§ec_qos_£t_exã∫Æ_ids
(c⁄° 
ov§ec_qos
 *
row
, c⁄° 
sm≠
 *smap)

10284 
ovsdb_d©um
 
d©um
;

10286 
	`as£π
(
öôed
);

10287 i‡(
sm≠
) {

10288 
sm≠_node
 *
node
;

10289 
size_t
 
i
;

10291 
d©um
.
n
 = 
	`sm≠_cou¡
(
sm≠
);

10292 
d©um
.
keys
 = 
	`xmÆloc
(d©um.
n
 *  *datum.keys);

10293 
d©um
.
vÆues
 = 
	`xmÆloc
(d©um.
n
 *  *datum.values);

10295 
i
 = 0;

10296 
	`SMAP_FOR_EACH
 (
node
, 
sm≠
) {

10297 
d©um
.
keys
[
i
].
°rög
 = 
	`x°rdup
(
node
->
key
);

10298 
d©um
.
vÆues
[
i
].
°rög
 = 
	`x°rdup
(
node
->
vÆue
);

10299 
i
++;

10301 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_STRING
, OVSDB_TYPE_STRING);

10303 
	`ovsdb_d©um_öô_em±y
(&
d©um
);

10305 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
,

10306 &
ov§ec_qos_cﬁumns
[
OVSREC_QOS_COL_EXTERNAL_IDS
],

10307 &
d©um
);

10308 
	}
}

10312 
	$ov§ec_qos_£t_Ÿhî_c⁄fig
(c⁄° 
ov§ec_qos
 *
row
, c⁄° 
sm≠
 *smap)

10314 
ovsdb_d©um
 
d©um
;

10316 
	`as£π
(
öôed
);

10317 i‡(
sm≠
) {

10318 
sm≠_node
 *
node
;

10319 
size_t
 
i
;

10321 
d©um
.
n
 = 
	`sm≠_cou¡
(
sm≠
);

10322 
d©um
.
keys
 = 
	`xmÆloc
(d©um.
n
 *  *datum.keys);

10323 
d©um
.
vÆues
 = 
	`xmÆloc
(d©um.
n
 *  *datum.values);

10325 
i
 = 0;

10326 
	`SMAP_FOR_EACH
 (
node
, 
sm≠
) {

10327 
d©um
.
keys
[
i
].
°rög
 = 
	`x°rdup
(
node
->
key
);

10328 
d©um
.
vÆues
[
i
].
°rög
 = 
	`x°rdup
(
node
->
vÆue
);

10329 
i
++;

10331 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_STRING
, OVSDB_TYPE_STRING);

10333 
	`ovsdb_d©um_öô_em±y
(&
d©um
);

10335 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
,

10336 &
ov§ec_qos_cﬁumns
[
OVSREC_QOS_COL_OTHER_CONFIG
],

10337 &
d©um
);

10338 
	}
}

10342 
	$ov§ec_qos_£t_queues
(c⁄° 
ov§ec_qos
 *
row
, c⁄° 
öt64_t
 *
key_queues
, 
ov§ec_queue
 **
vÆue_queues
, 
size_t
 
n_queues
)

10344 
ovsdb_d©um
 
d©um
;

10345 
size_t
 
i
;

10347 
	`as£π
(
öôed
);

10348 
d©um
.
n
 = 
n_queues
;

10349 
d©um
.
keys
 = 
	`xmÆloc
(
n_queues
 *  *datum.keys);

10350 
d©um
.
vÆues
 = 
	`xmÆloc
(
n_queues
 *  *datum.values);

10351 
i
 = 0; i < 
n_queues
; i++) {

10352 
d©um
.
keys
[
i
].
öãgî
 = 
key_queues
[i];

10353 
d©um
.
vÆues
[
i
].
uuid
 = 
vÆue_queues
[i]->
hódî_
.uuid;

10355 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_INTEGER
, 
OVSDB_TYPE_UUID
);

10356 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_qos_cﬁumns
[
OVSREC_QOS_COL_QUEUES
], &
d©um
);

10357 
	}
}

10360 
	$ov§ec_qos_£t_ty≥
(c⁄° 
ov§ec_qos
 *
row
, c⁄° *
ty≥
)

10362 
ovsdb_d©um
 
d©um
;

10364 
	`as£π
(
öôed
);

10365 
d©um
.
n
 = 1;

10366 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

10367 
d©um
.
keys
[0].
°rög
 = 
	`x°rdup
(
ty≥
);

10368 
d©um
.
vÆues
 = 
NULL
;

10369 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_qos_cﬁumns
[
OVSREC_QOS_COL_TYPE
], &
d©um
);

10370 
	}
}

10372 
ovsdb_idl_cﬁumn
 
	gov§ec_qos_cﬁumns
[
OVSREC_QOS_N_COLUMNS
];

10375 
	$ov§ec_qos_cﬁumns_öô
()

10377 
ovsdb_idl_cﬁumn
 *
c
;

10380 
c
 = &
ov§ec_qos_cﬁ_exã∫Æ_ids
;

10381 
c
->
«me
 = "external_ids";

10382 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

10383 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

10384 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_STRING
);

10385 
c
->
ty≥
.
vÆue
.
u
.
°rög
.
möLí
 = 0;

10386 
c
->
ty≥
.
n_mö
 = 0;

10387 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

10388 
c
->
muèbÀ
 = 
åue
;

10389 
c
->
∑r£
 = 
ov§ec_qos_∑r£_exã∫Æ_ids
;

10390 
c
->
u≈¨£
 = 
ov§ec_qos_u≈¨£_exã∫Æ_ids
;

10393 
c
 = &
ov§ec_qos_cﬁ_Ÿhî_c⁄fig
;

10394 
c
->
«me
 = "other_config";

10395 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

10396 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

10397 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_STRING
);

10398 
c
->
ty≥
.
vÆue
.
u
.
°rög
.
möLí
 = 0;

10399 
c
->
ty≥
.
n_mö
 = 0;

10400 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

10401 
c
->
muèbÀ
 = 
åue
;

10402 
c
->
∑r£
 = 
ov§ec_qos_∑r£_Ÿhî_c⁄fig
;

10403 
c
->
u≈¨£
 = 
ov§ec_qos_u≈¨£_Ÿhî_c⁄fig
;

10406 
c
 = &
ov§ec_qos_cﬁ_queues
;

10407 
c
->
«me
 = "queues";

10408 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_INTEGER
);

10409 
c
->
ty≥
.
key
.
u
.
öãgî
.
mö
 = 
	`INT64_C
(0);

10410 
c
->
ty≥
.
key
.
u
.
öãgî
.
max
 = 
	`INT64_C
(4294967295);

10411 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_UUID
);

10412 
c
->
ty≥
.
vÆue
.
u
.
uuid
.
ªfTabÀName
 = "Queue";

10413 
c
->
ty≥
.
vÆue
.
u
.
uuid
.
ªfTy≥
 = 
OVSDB_REF_STRONG
;

10414 
c
->
ty≥
.
n_mö
 = 0;

10415 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

10416 
c
->
muèbÀ
 = 
åue
;

10417 
c
->
∑r£
 = 
ov§ec_qos_∑r£_queues
;

10418 
c
->
u≈¨£
 = 
ov§ec_qos_u≈¨£_queues
;

10421 
c
 = &
ov§ec_qos_cﬁ_ty≥
;

10422 
c
->
«me
 = "type";

10423 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

10424 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

10425 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

10426 
c
->
ty≥
.
n_mö
 = 1;

10427 
c
->
ty≥
.
n_max
 = 1;

10428 
c
->
muèbÀ
 = 
åue
;

10429 
c
->
∑r£
 = 
ov§ec_qos_∑r£_ty≥
;

10430 
c
->
u≈¨£
 = 
ov§ec_qos_u≈¨£_ty≥
;

10431 
	}
}

10436 
	$ov§ec_queue_∑r£_ds˝
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

10438 
ov§ec_queue
 *
row
 = 
	`ov§ec_queue_ˇ°
(
row_
);

10439 
size_t
 
n
 = 
	`MIN
(1, 
d©um
->n);

10440 
size_t
 
i
;

10442 
	`as£π
(
öôed
);

10443 
row
->
ds˝
 = 
NULL
;

10444 
row
->
n_ds˝
 = 0;

10445 
i
 = 0; i < 
n
; i++) {

10446 i‡(!
row
->
n_ds˝
) {

10447 
row
->
ds˝
 = 
	`xmÆloc
(
n
 *  *row->dscp);

10449 
row
->
ds˝
[row->
n_ds˝
] = 
d©um
->
keys
[
i
].
öãgî
;

10450 
row
->
n_ds˝
++;

10452 
	}
}

10455 
	$ov§ec_queue_∑r£_exã∫Æ_ids
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

10457 
ov§ec_queue
 *
row
 = 
	`ov§ec_queue_ˇ°
(
row_
);

10458 
size_t
 
i
;

10460 
	`as£π
(
öôed
);

10461 
	`sm≠_öô
(&
row
->
exã∫Æ_ids
);

10462 
i
 = 0; i < 
d©um
->
n
; i++) {

10463 
	`sm≠_add
(&
row
->
exã∫Æ_ids
,

10464 
d©um
->
keys
[
i
].
°rög
,

10465 
d©um
->
vÆues
[
i
].
°rög
);

10467 
	}
}

10470 
	$ov§ec_queue_∑r£_Ÿhî_c⁄fig
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

10472 
ov§ec_queue
 *
row
 = 
	`ov§ec_queue_ˇ°
(
row_
);

10473 
size_t
 
i
;

10475 
	`as£π
(
öôed
);

10476 
	`sm≠_öô
(&
row
->
Ÿhî_c⁄fig
);

10477 
i
 = 0; i < 
d©um
->
n
; i++) {

10478 
	`sm≠_add
(&
row
->
Ÿhî_c⁄fig
,

10479 
d©um
->
keys
[
i
].
°rög
,

10480 
d©um
->
vÆues
[
i
].
°rög
);

10482 
	}
}

10485 
	$ov§ec_queue_u≈¨£_ds˝
(
ovsdb_idl_row
 *
row_
)

10487 
ov§ec_queue
 *
row
 = 
	`ov§ec_queue_ˇ°
(
row_
);

10489 
	`as£π
(
öôed
);

10490 
	`‰ì
(
row
->
ds˝
);

10491 
	}
}

10494 
	$ov§ec_queue_u≈¨£_exã∫Æ_ids
(
ovsdb_idl_row
 *
row_
)

10496 
ov§ec_queue
 *
row
 = 
	`ov§ec_queue_ˇ°
(
row_
);

10498 
	`as£π
(
öôed
);

10499 
	`sm≠_de°roy
(&
row
->
exã∫Æ_ids
);

10500 
	}
}

10503 
	$ov§ec_queue_u≈¨£_Ÿhî_c⁄fig
(
ovsdb_idl_row
 *
row_
)

10505 
ov§ec_queue
 *
row
 = 
	`ov§ec_queue_ˇ°
(
row_
);

10507 
	`as£π
(
öôed
);

10508 
	`sm≠_de°roy
(&
row
->
Ÿhî_c⁄fig
);

10509 
	}
}

10512 
	$ov§ec_queue_öô__
(
ovsdb_idl_row
 *
row
)

10514 
	`ov§ec_queue_öô
(
	`ov§ec_queue_ˇ°
(
row
));

10515 
	}
}

10518 
	$ov§ec_queue_öô
(
ov§ec_queue
 *
row
)

10520 
	`mem£t
(
row
, 0,  *row);

10521 
	`sm≠_öô
(&
row
->
exã∫Æ_ids
);

10522 
	`sm≠_öô
(&
row
->
Ÿhî_c⁄fig
);

10523 
	}
}

10525 c⁄° 
ov§ec_queue
 *

10526 
	$ov§ec_queue_fú°
(c⁄° 
ovsdb_idl
 *
idl
)

10528  
	`ov§ec_queue_ˇ°
(
	`ovsdb_idl_fú°_row
(
idl
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_QUEUE
]));

10529 
	}
}

10531 c⁄° 
ov§ec_queue
 *

10532 
	$ov§ec_queue_√xt
(c⁄° 
ov§ec_queue
 *
row
)

10534  
	`ov§ec_queue_ˇ°
(
	`ovsdb_idl_√xt_row
(&
row
->
hódî_
));

10535 
	}
}

10538 
	$ov§ec_queue_dñëe
(c⁄° 
ov§ec_queue
 *
row
)

10540 
	`ovsdb_idl_txn_dñëe
(&
row
->
hódî_
);

10541 
	}
}

10543 
ov§ec_queue
 *

10544 
	$ov§ec_queue_ö£π
(
ovsdb_idl_txn
 *
txn
)

10546  
	`ov§ec_queue_ˇ°
(
	`ovsdb_idl_txn_ö£π
(
txn
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_QUEUE
], 
NULL
));

10547 
	}
}

10551 
	$ov§ec_queue_vîify_ds˝
(c⁄° 
ov§ec_queue
 *
row
)

10553 
	`as£π
(
öôed
);

10554 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_queue_cﬁumns
[
OVSREC_QUEUE_COL_DSCP
]);

10555 
	}
}

10558 
	$ov§ec_queue_vîify_exã∫Æ_ids
(c⁄° 
ov§ec_queue
 *
row
)

10560 
	`as£π
(
öôed
);

10561 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_queue_cﬁumns
[
OVSREC_QUEUE_COL_EXTERNAL_IDS
]);

10562 
	}
}

10565 
	$ov§ec_queue_vîify_Ÿhî_c⁄fig
(c⁄° 
ov§ec_queue
 *
row
)

10567 
	`as£π
(
öôed
);

10568 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_queue_cﬁumns
[
OVSREC_QUEUE_COL_OTHER_CONFIG
]);

10569 
	}
}

10586 c⁄° 
ovsdb_d©um
 *

10587 
	$ov§ec_queue_gë_ds˝
(c⁄° 
ov§ec_queue
 *
row
,

10588 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

10590 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_INTEGER
);

10591  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_queue_cﬁ_ds˝
);

10592 
	}
}

10610 c⁄° 
ovsdb_d©um
 *

10611 
	$ov§ec_queue_gë_exã∫Æ_ids
(c⁄° 
ov§ec_queue
 *
row
,

10612 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
,

10613 
ovsdb_©omic_ty≥
 
vÆue_ty≥
 
OVS_UNUSED
)

10615 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

10616 
	`as£π
(
vÆue_ty≥
 =
OVSDB_TYPE_STRING
);

10617  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_queue_cﬁ_exã∫Æ_ids
);

10618 
	}
}

10636 c⁄° 
ovsdb_d©um
 *

10637 
	$ov§ec_queue_gë_Ÿhî_c⁄fig
(c⁄° 
ov§ec_queue
 *
row
,

10638 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
,

10639 
ovsdb_©omic_ty≥
 
vÆue_ty≥
 
OVS_UNUSED
)

10641 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

10642 
	`as£π
(
vÆue_ty≥
 =
OVSDB_TYPE_STRING
);

10643  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_queue_cﬁ_Ÿhî_c⁄fig
);

10644 
	}
}

10647 
	$ov§ec_queue_£t_ds˝
(c⁄° 
ov§ec_queue
 *
row
, c⁄° 
öt64_t
 *
ds˝
, 
size_t
 
n_ds˝
)

10649 
ovsdb_d©um
 
d©um
;

10650 
size_t
 
i
;

10652 
	`as£π
(
öôed
);

10653 
d©um
.
n
 = 
n_ds˝
;

10654 
d©um
.
keys
 = 
	`xmÆloc
(
n_ds˝
 *  *datum.keys);

10655 
d©um
.
vÆues
 = 
NULL
;

10656 
i
 = 0; i < 
n_ds˝
; i++) {

10657 
d©um
.
keys
[
i
].
öãgî
 = 
ds˝
[i];

10659 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_INTEGER
, 
OVSDB_TYPE_VOID
);

10660 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_queue_cﬁumns
[
OVSREC_QUEUE_COL_DSCP
], &
d©um
);

10661 
	}
}

10664 
	$ov§ec_queue_£t_exã∫Æ_ids
(c⁄° 
ov§ec_queue
 *
row
, c⁄° 
sm≠
 *smap)

10666 
ovsdb_d©um
 
d©um
;

10668 
	`as£π
(
öôed
);

10669 i‡(
sm≠
) {

10670 
sm≠_node
 *
node
;

10671 
size_t
 
i
;

10673 
d©um
.
n
 = 
	`sm≠_cou¡
(
sm≠
);

10674 
d©um
.
keys
 = 
	`xmÆloc
(d©um.
n
 *  *datum.keys);

10675 
d©um
.
vÆues
 = 
	`xmÆloc
(d©um.
n
 *  *datum.values);

10677 
i
 = 0;

10678 
	`SMAP_FOR_EACH
 (
node
, 
sm≠
) {

10679 
d©um
.
keys
[
i
].
°rög
 = 
	`x°rdup
(
node
->
key
);

10680 
d©um
.
vÆues
[
i
].
°rög
 = 
	`x°rdup
(
node
->
vÆue
);

10681 
i
++;

10683 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_STRING
, OVSDB_TYPE_STRING);

10685 
	`ovsdb_d©um_öô_em±y
(&
d©um
);

10687 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
,

10688 &
ov§ec_queue_cﬁumns
[
OVSREC_QUEUE_COL_EXTERNAL_IDS
],

10689 &
d©um
);

10690 
	}
}

10694 
	$ov§ec_queue_£t_Ÿhî_c⁄fig
(c⁄° 
ov§ec_queue
 *
row
, c⁄° 
sm≠
 *smap)

10696 
ovsdb_d©um
 
d©um
;

10698 
	`as£π
(
öôed
);

10699 i‡(
sm≠
) {

10700 
sm≠_node
 *
node
;

10701 
size_t
 
i
;

10703 
d©um
.
n
 = 
	`sm≠_cou¡
(
sm≠
);

10704 
d©um
.
keys
 = 
	`xmÆloc
(d©um.
n
 *  *datum.keys);

10705 
d©um
.
vÆues
 = 
	`xmÆloc
(d©um.
n
 *  *datum.values);

10707 
i
 = 0;

10708 
	`SMAP_FOR_EACH
 (
node
, 
sm≠
) {

10709 
d©um
.
keys
[
i
].
°rög
 = 
	`x°rdup
(
node
->
key
);

10710 
d©um
.
vÆues
[
i
].
°rög
 = 
	`x°rdup
(
node
->
vÆue
);

10711 
i
++;

10713 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_STRING
, OVSDB_TYPE_STRING);

10715 
	`ovsdb_d©um_öô_em±y
(&
d©um
);

10717 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
,

10718 &
ov§ec_queue_cﬁumns
[
OVSREC_QUEUE_COL_OTHER_CONFIG
],

10719 &
d©um
);

10720 
	}
}

10723 
ovsdb_idl_cﬁumn
 
	gov§ec_queue_cﬁumns
[
OVSREC_QUEUE_N_COLUMNS
];

10726 
	$ov§ec_queue_cﬁumns_öô
()

10728 
ovsdb_idl_cﬁumn
 *
c
;

10731 
c
 = &
ov§ec_queue_cﬁ_ds˝
;

10732 
c
->
«me
 = "dscp";

10733 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_INTEGER
);

10734 
c
->
ty≥
.
key
.
u
.
öãgî
.
mö
 = 
	`INT64_C
(0);

10735 
c
->
ty≥
.
key
.
u
.
öãgî
.
max
 = 
	`INT64_C
(63);

10736 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

10737 
c
->
ty≥
.
n_mö
 = 0;

10738 
c
->
ty≥
.
n_max
 = 1;

10739 
c
->
muèbÀ
 = 
åue
;

10740 
c
->
∑r£
 = 
ov§ec_queue_∑r£_ds˝
;

10741 
c
->
u≈¨£
 = 
ov§ec_queue_u≈¨£_ds˝
;

10744 
c
 = &
ov§ec_queue_cﬁ_exã∫Æ_ids
;

10745 
c
->
«me
 = "external_ids";

10746 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

10747 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

10748 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_STRING
);

10749 
c
->
ty≥
.
vÆue
.
u
.
°rög
.
möLí
 = 0;

10750 
c
->
ty≥
.
n_mö
 = 0;

10751 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

10752 
c
->
muèbÀ
 = 
åue
;

10753 
c
->
∑r£
 = 
ov§ec_queue_∑r£_exã∫Æ_ids
;

10754 
c
->
u≈¨£
 = 
ov§ec_queue_u≈¨£_exã∫Æ_ids
;

10757 
c
 = &
ov§ec_queue_cﬁ_Ÿhî_c⁄fig
;

10758 
c
->
«me
 = "other_config";

10759 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

10760 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

10761 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_STRING
);

10762 
c
->
ty≥
.
vÆue
.
u
.
°rög
.
möLí
 = 0;

10763 
c
->
ty≥
.
n_mö
 = 0;

10764 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

10765 
c
->
muèbÀ
 = 
åue
;

10766 
c
->
∑r£
 = 
ov§ec_queue_∑r£_Ÿhî_c⁄fig
;

10767 
c
->
u≈¨£
 = 
ov§ec_queue_u≈¨£_Ÿhî_c⁄fig
;

10768 
	}
}

10773 
	$ov§ec_s¶_∑r£_boŸ°øp_ˇ_˚π
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

10775 
ov§ec_s¶
 *
row
 = 
	`ov§ec_s¶_ˇ°
(
row_
);

10777 
	`as£π
(
öôed
);

10778 i‡(
d©um
->
n
 >= 1) {

10779 
row
->
boŸ°øp_ˇ_˚π
 = 
d©um
->
keys
[0].
boﬁón
;

10781 
row
->
boŸ°øp_ˇ_˚π
 = 
Ál£
;

10783 
	}
}

10786 
	$ov§ec_s¶_∑r£_ˇ_˚π
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

10788 
ov§ec_s¶
 *
row
 = 
	`ov§ec_s¶_ˇ°
(
row_
);

10790 
	`as£π
(
öôed
);

10791 i‡(
d©um
->
n
 >= 1) {

10792 
row
->
ˇ_˚π
 = 
d©um
->
keys
[0].
°rög
;

10794 
row
->
ˇ_˚π
 = "";

10796 
	}
}

10799 
	$ov§ec_s¶_∑r£_˚πifiˇã
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

10801 
ov§ec_s¶
 *
row
 = 
	`ov§ec_s¶_ˇ°
(
row_
);

10803 
	`as£π
(
öôed
);

10804 i‡(
d©um
->
n
 >= 1) {

10805 
row
->
˚πifiˇã
 = 
d©um
->
keys
[0].
°rög
;

10807 
row
->
˚πifiˇã
 = "";

10809 
	}
}

10812 
	$ov§ec_s¶_∑r£_exã∫Æ_ids
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

10814 
ov§ec_s¶
 *
row
 = 
	`ov§ec_s¶_ˇ°
(
row_
);

10815 
size_t
 
i
;

10817 
	`as£π
(
öôed
);

10818 
	`sm≠_öô
(&
row
->
exã∫Æ_ids
);

10819 
i
 = 0; i < 
d©um
->
n
; i++) {

10820 
	`sm≠_add
(&
row
->
exã∫Æ_ids
,

10821 
d©um
->
keys
[
i
].
°rög
,

10822 
d©um
->
vÆues
[
i
].
°rög
);

10824 
	}
}

10827 
	$ov§ec_s¶_∑r£_¥iv©e_key
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

10829 
ov§ec_s¶
 *
row
 = 
	`ov§ec_s¶_ˇ°
(
row_
);

10831 
	`as£π
(
öôed
);

10832 i‡(
d©um
->
n
 >= 1) {

10833 
row
->
¥iv©e_key
 = 
d©um
->
keys
[0].
°rög
;

10835 
row
->
¥iv©e_key
 = "";

10837 
	}
}

10840 
	$ov§ec_s¶_u≈¨£_boŸ°øp_ˇ_˚π
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

10843 
	}
}

10846 
	$ov§ec_s¶_u≈¨£_ˇ_˚π
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

10849 
	}
}

10852 
	$ov§ec_s¶_u≈¨£_˚πifiˇã
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

10855 
	}
}

10858 
	$ov§ec_s¶_u≈¨£_exã∫Æ_ids
(
ovsdb_idl_row
 *
row_
)

10860 
ov§ec_s¶
 *
row
 = 
	`ov§ec_s¶_ˇ°
(
row_
);

10862 
	`as£π
(
öôed
);

10863 
	`sm≠_de°roy
(&
row
->
exã∫Æ_ids
);

10864 
	}
}

10867 
	$ov§ec_s¶_u≈¨£_¥iv©e_key
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

10870 
	}
}

10873 
	$ov§ec_s¶_öô__
(
ovsdb_idl_row
 *
row
)

10875 
	`ov§ec_s¶_öô
(
	`ov§ec_s¶_ˇ°
(
row
));

10876 
	}
}

10879 
	$ov§ec_s¶_öô
(
ov§ec_s¶
 *
row
)

10881 
	`mem£t
(
row
, 0,  *row);

10882 
	`sm≠_öô
(&
row
->
exã∫Æ_ids
);

10883 
	}
}

10885 c⁄° 
ov§ec_s¶
 *

10886 
	$ov§ec_s¶_fú°
(c⁄° 
ovsdb_idl
 *
idl
)

10888  
	`ov§ec_s¶_ˇ°
(
	`ovsdb_idl_fú°_row
(
idl
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_SSL
]));

10889 
	}
}

10891 c⁄° 
ov§ec_s¶
 *

10892 
	$ov§ec_s¶_√xt
(c⁄° 
ov§ec_s¶
 *
row
)

10894  
	`ov§ec_s¶_ˇ°
(
	`ovsdb_idl_√xt_row
(&
row
->
hódî_
));

10895 
	}
}

10898 
	$ov§ec_s¶_dñëe
(c⁄° 
ov§ec_s¶
 *
row
)

10900 
	`ovsdb_idl_txn_dñëe
(&
row
->
hódî_
);

10901 
	}
}

10903 
ov§ec_s¶
 *

10904 
	$ov§ec_s¶_ö£π
(
ovsdb_idl_txn
 *
txn
)

10906  
	`ov§ec_s¶_ˇ°
(
	`ovsdb_idl_txn_ö£π
(
txn
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_SSL
], 
NULL
));

10907 
	}
}

10911 
	$ov§ec_s¶_vîify_boŸ°øp_ˇ_˚π
(c⁄° 
ov§ec_s¶
 *
row
)

10913 
	`as£π
(
öôed
);

10914 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_s¶_cﬁumns
[
OVSREC_SSL_COL_BOOTSTRAP_CA_CERT
]);

10915 
	}
}

10918 
	$ov§ec_s¶_vîify_ˇ_˚π
(c⁄° 
ov§ec_s¶
 *
row
)

10920 
	`as£π
(
öôed
);

10921 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_s¶_cﬁumns
[
OVSREC_SSL_COL_CA_CERT
]);

10922 
	}
}

10925 
	$ov§ec_s¶_vîify_˚πifiˇã
(c⁄° 
ov§ec_s¶
 *
row
)

10927 
	`as£π
(
öôed
);

10928 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_s¶_cﬁumns
[
OVSREC_SSL_COL_CERTIFICATE
]);

10929 
	}
}

10932 
	$ov§ec_s¶_vîify_exã∫Æ_ids
(c⁄° 
ov§ec_s¶
 *
row
)

10934 
	`as£π
(
öôed
);

10935 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_s¶_cﬁumns
[
OVSREC_SSL_COL_EXTERNAL_IDS
]);

10936 
	}
}

10939 
	$ov§ec_s¶_vîify_¥iv©e_key
(c⁄° 
ov§ec_s¶
 *
row
)

10941 
	`as£π
(
öôed
);

10942 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_s¶_cﬁumns
[
OVSREC_SSL_COL_PRIVATE_KEY
]);

10943 
	}
}

10960 c⁄° 
ovsdb_d©um
 *

10961 
	$ov§ec_s¶_gë_boŸ°øp_ˇ_˚π
(c⁄° 
ov§ec_s¶
 *
row
,

10962 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

10964 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_BOOLEAN
);

10965  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_s¶_cﬁ_boŸ°øp_ˇ_˚π
);

10966 
	}
}

10983 c⁄° 
ovsdb_d©um
 *

10984 
	$ov§ec_s¶_gë_ˇ_˚π
(c⁄° 
ov§ec_s¶
 *
row
,

10985 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

10987 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

10988  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_s¶_cﬁ_ˇ_˚π
);

10989 
	}
}

11006 c⁄° 
ovsdb_d©um
 *

11007 
	$ov§ec_s¶_gë_˚πifiˇã
(c⁄° 
ov§ec_s¶
 *
row
,

11008 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

11010 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

11011  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_s¶_cﬁ_˚πifiˇã
);

11012 
	}
}

11030 c⁄° 
ovsdb_d©um
 *

11031 
	$ov§ec_s¶_gë_exã∫Æ_ids
(c⁄° 
ov§ec_s¶
 *
row
,

11032 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
,

11033 
ovsdb_©omic_ty≥
 
vÆue_ty≥
 
OVS_UNUSED
)

11035 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

11036 
	`as£π
(
vÆue_ty≥
 =
OVSDB_TYPE_STRING
);

11037  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_s¶_cﬁ_exã∫Æ_ids
);

11038 
	}
}

11055 c⁄° 
ovsdb_d©um
 *

11056 
	$ov§ec_s¶_gë_¥iv©e_key
(c⁄° 
ov§ec_s¶
 *
row
,

11057 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

11059 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

11060  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_s¶_cﬁ_¥iv©e_key
);

11061 
	}
}

11064 
	$ov§ec_s¶_£t_boŸ°øp_ˇ_˚π
(c⁄° 
ov§ec_s¶
 *
row
, 
boﬁ
 
boŸ°øp_ˇ_˚π
)

11066 
ovsdb_d©um
 
d©um
;

11068 
	`as£π
(
öôed
);

11069 
d©um
.
n
 = 1;

11070 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

11071 
d©um
.
keys
[0].
boﬁón
 = 
boŸ°øp_ˇ_˚π
;

11072 
d©um
.
vÆues
 = 
NULL
;

11073 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_s¶_cﬁumns
[
OVSREC_SSL_COL_BOOTSTRAP_CA_CERT
], &
d©um
);

11074 
	}
}

11077 
	$ov§ec_s¶_£t_ˇ_˚π
(c⁄° 
ov§ec_s¶
 *
row
, c⁄° *
ˇ_˚π
)

11079 
ovsdb_d©um
 
d©um
;

11081 
	`as£π
(
öôed
);

11082 
d©um
.
n
 = 1;

11083 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

11084 
d©um
.
keys
[0].
°rög
 = 
	`x°rdup
(
ˇ_˚π
);

11085 
d©um
.
vÆues
 = 
NULL
;

11086 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_s¶_cﬁumns
[
OVSREC_SSL_COL_CA_CERT
], &
d©um
);

11087 
	}
}

11090 
	$ov§ec_s¶_£t_˚πifiˇã
(c⁄° 
ov§ec_s¶
 *
row
, c⁄° *
˚πifiˇã
)

11092 
ovsdb_d©um
 
d©um
;

11094 
	`as£π
(
öôed
);

11095 
d©um
.
n
 = 1;

11096 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

11097 
d©um
.
keys
[0].
°rög
 = 
	`x°rdup
(
˚πifiˇã
);

11098 
d©um
.
vÆues
 = 
NULL
;

11099 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_s¶_cﬁumns
[
OVSREC_SSL_COL_CERTIFICATE
], &
d©um
);

11100 
	}
}

11103 
	$ov§ec_s¶_£t_exã∫Æ_ids
(c⁄° 
ov§ec_s¶
 *
row
, c⁄° 
sm≠
 *smap)

11105 
ovsdb_d©um
 
d©um
;

11107 
	`as£π
(
öôed
);

11108 i‡(
sm≠
) {

11109 
sm≠_node
 *
node
;

11110 
size_t
 
i
;

11112 
d©um
.
n
 = 
	`sm≠_cou¡
(
sm≠
);

11113 
d©um
.
keys
 = 
	`xmÆloc
(d©um.
n
 *  *datum.keys);

11114 
d©um
.
vÆues
 = 
	`xmÆloc
(d©um.
n
 *  *datum.values);

11116 
i
 = 0;

11117 
	`SMAP_FOR_EACH
 (
node
, 
sm≠
) {

11118 
d©um
.
keys
[
i
].
°rög
 = 
	`x°rdup
(
node
->
key
);

11119 
d©um
.
vÆues
[
i
].
°rög
 = 
	`x°rdup
(
node
->
vÆue
);

11120 
i
++;

11122 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_STRING
, OVSDB_TYPE_STRING);

11124 
	`ovsdb_d©um_öô_em±y
(&
d©um
);

11126 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
,

11127 &
ov§ec_s¶_cﬁumns
[
OVSREC_SSL_COL_EXTERNAL_IDS
],

11128 &
d©um
);

11129 
	}
}

11133 
	$ov§ec_s¶_£t_¥iv©e_key
(c⁄° 
ov§ec_s¶
 *
row
, c⁄° *
¥iv©e_key
)

11135 
ovsdb_d©um
 
d©um
;

11137 
	`as£π
(
öôed
);

11138 
d©um
.
n
 = 1;

11139 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

11140 
d©um
.
keys
[0].
°rög
 = 
	`x°rdup
(
¥iv©e_key
);

11141 
d©um
.
vÆues
 = 
NULL
;

11142 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_s¶_cﬁumns
[
OVSREC_SSL_COL_PRIVATE_KEY
], &
d©um
);

11143 
	}
}

11145 
ovsdb_idl_cﬁumn
 
	gov§ec_s¶_cﬁumns
[
OVSREC_SSL_N_COLUMNS
];

11148 
	$ov§ec_s¶_cﬁumns_öô
()

11150 
ovsdb_idl_cﬁumn
 *
c
;

11153 
c
 = &
ov§ec_s¶_cﬁ_boŸ°øp_ˇ_˚π
;

11154 
c
->
«me
 = "bootstrap_ca_cert";

11155 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_BOOLEAN
);

11156 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

11157 
c
->
ty≥
.
n_mö
 = 1;

11158 
c
->
ty≥
.
n_max
 = 1;

11159 
c
->
muèbÀ
 = 
åue
;

11160 
c
->
∑r£
 = 
ov§ec_s¶_∑r£_boŸ°øp_ˇ_˚π
;

11161 
c
->
u≈¨£
 = 
ov§ec_s¶_u≈¨£_boŸ°øp_ˇ_˚π
;

11164 
c
 = &
ov§ec_s¶_cﬁ_ˇ_˚π
;

11165 
c
->
«me
 = "ca_cert";

11166 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

11167 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

11168 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

11169 
c
->
ty≥
.
n_mö
 = 1;

11170 
c
->
ty≥
.
n_max
 = 1;

11171 
c
->
muèbÀ
 = 
åue
;

11172 
c
->
∑r£
 = 
ov§ec_s¶_∑r£_ˇ_˚π
;

11173 
c
->
u≈¨£
 = 
ov§ec_s¶_u≈¨£_ˇ_˚π
;

11176 
c
 = &
ov§ec_s¶_cﬁ_˚πifiˇã
;

11177 
c
->
«me
 = "certificate";

11178 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

11179 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

11180 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

11181 
c
->
ty≥
.
n_mö
 = 1;

11182 
c
->
ty≥
.
n_max
 = 1;

11183 
c
->
muèbÀ
 = 
åue
;

11184 
c
->
∑r£
 = 
ov§ec_s¶_∑r£_˚πifiˇã
;

11185 
c
->
u≈¨£
 = 
ov§ec_s¶_u≈¨£_˚πifiˇã
;

11188 
c
 = &
ov§ec_s¶_cﬁ_exã∫Æ_ids
;

11189 
c
->
«me
 = "external_ids";

11190 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

11191 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

11192 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_STRING
);

11193 
c
->
ty≥
.
vÆue
.
u
.
°rög
.
möLí
 = 0;

11194 
c
->
ty≥
.
n_mö
 = 0;

11195 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

11196 
c
->
muèbÀ
 = 
åue
;

11197 
c
->
∑r£
 = 
ov§ec_s¶_∑r£_exã∫Æ_ids
;

11198 
c
->
u≈¨£
 = 
ov§ec_s¶_u≈¨£_exã∫Æ_ids
;

11201 
c
 = &
ov§ec_s¶_cﬁ_¥iv©e_key
;

11202 
c
->
«me
 = "private_key";

11203 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

11204 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

11205 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

11206 
c
->
ty≥
.
n_mö
 = 1;

11207 
c
->
ty≥
.
n_max
 = 1;

11208 
c
->
muèbÀ
 = 
åue
;

11209 
c
->
∑r£
 = 
ov§ec_s¶_∑r£_¥iv©e_key
;

11210 
c
->
u≈¨£
 = 
ov§ec_s¶_u≈¨£_¥iv©e_key
;

11211 
	}
}

11216 
	$ov§ec_sÊow_∑r£_agít
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

11218 
ov§ec_sÊow
 *
row
 = 
	`ov§ec_sÊow_ˇ°
(
row_
);

11220 
	`as£π
(
öôed
);

11221 i‡(
d©um
->
n
 >= 1) {

11222 
row
->
agít
 = 
d©um
->
keys
[0].
°rög
;

11224 
row
->
agít
 = 
NULL
;

11226 
	}
}

11229 
	$ov§ec_sÊow_∑r£_exã∫Æ_ids
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

11231 
ov§ec_sÊow
 *
row
 = 
	`ov§ec_sÊow_ˇ°
(
row_
);

11232 
size_t
 
i
;

11234 
	`as£π
(
öôed
);

11235 
	`sm≠_öô
(&
row
->
exã∫Æ_ids
);

11236 
i
 = 0; i < 
d©um
->
n
; i++) {

11237 
	`sm≠_add
(&
row
->
exã∫Æ_ids
,

11238 
d©um
->
keys
[
i
].
°rög
,

11239 
d©um
->
vÆues
[
i
].
°rög
);

11241 
	}
}

11244 
	$ov§ec_sÊow_∑r£_hódî
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

11246 
ov§ec_sÊow
 *
row
 = 
	`ov§ec_sÊow_ˇ°
(
row_
);

11247 
size_t
 
n
 = 
	`MIN
(1, 
d©um
->n);

11248 
size_t
 
i
;

11250 
	`as£π
(
öôed
);

11251 
row
->
hódî
 = 
NULL
;

11252 
row
->
n_hódî
 = 0;

11253 
i
 = 0; i < 
n
; i++) {

11254 i‡(!
row
->
n_hódî
) {

11255 
row
->
hódî
 = 
	`xmÆloc
(
n
 *  *row->header);

11257 
row
->
hódî
[row->
n_hódî
] = 
d©um
->
keys
[
i
].
öãgî
;

11258 
row
->
n_hódî
++;

11260 
	}
}

11263 
	$ov§ec_sÊow_∑r£_pﬁlög
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

11265 
ov§ec_sÊow
 *
row
 = 
	`ov§ec_sÊow_ˇ°
(
row_
);

11266 
size_t
 
n
 = 
	`MIN
(1, 
d©um
->n);

11267 
size_t
 
i
;

11269 
	`as£π
(
öôed
);

11270 
row
->
pﬁlög
 = 
NULL
;

11271 
row
->
n_pﬁlög
 = 0;

11272 
i
 = 0; i < 
n
; i++) {

11273 i‡(!
row
->
n_pﬁlög
) {

11274 
row
->
pﬁlög
 = 
	`xmÆloc
(
n
 *  *row->polling);

11276 
row
->
pﬁlög
[row->
n_pﬁlög
] = 
d©um
->
keys
[
i
].
öãgî
;

11277 
row
->
n_pﬁlög
++;

11279 
	}
}

11282 
	$ov§ec_sÊow_∑r£_ßm∂ög
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

11284 
ov§ec_sÊow
 *
row
 = 
	`ov§ec_sÊow_ˇ°
(
row_
);

11285 
size_t
 
n
 = 
	`MIN
(1, 
d©um
->n);

11286 
size_t
 
i
;

11288 
	`as£π
(
öôed
);

11289 
row
->
ßm∂ög
 = 
NULL
;

11290 
row
->
n_ßm∂ög
 = 0;

11291 
i
 = 0; i < 
n
; i++) {

11292 i‡(!
row
->
n_ßm∂ög
) {

11293 
row
->
ßm∂ög
 = 
	`xmÆloc
(
n
 *  *row->sampling);

11295 
row
->
ßm∂ög
[row->
n_ßm∂ög
] = 
d©um
->
keys
[
i
].
öãgî
;

11296 
row
->
n_ßm∂ög
++;

11298 
	}
}

11301 
	$ov§ec_sÊow_∑r£_èrgës
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

11303 
ov§ec_sÊow
 *
row
 = 
	`ov§ec_sÊow_ˇ°
(
row_
);

11304 
size_t
 
i
;

11306 
	`as£π
(
öôed
);

11307 
row
->
èrgës
 = 
NULL
;

11308 
row
->
n_èrgës
 = 0;

11309 
i
 = 0; i < 
d©um
->
n
; i++) {

11310 i‡(!
row
->
n_èrgës
) {

11311 
row
->
èrgës
 = 
	`xmÆloc
(
d©um
->
n
 *  *row->targets);

11313 
row
->
èrgës
[row->
n_èrgës
] = 
d©um
->
keys
[
i
].
°rög
;

11314 
row
->
n_èrgës
++;

11316 
	}
}

11319 
	$ov§ec_sÊow_u≈¨£_agít
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

11322 
	}
}

11325 
	$ov§ec_sÊow_u≈¨£_exã∫Æ_ids
(
ovsdb_idl_row
 *
row_
)

11327 
ov§ec_sÊow
 *
row
 = 
	`ov§ec_sÊow_ˇ°
(
row_
);

11329 
	`as£π
(
öôed
);

11330 
	`sm≠_de°roy
(&
row
->
exã∫Æ_ids
);

11331 
	}
}

11334 
	$ov§ec_sÊow_u≈¨£_hódî
(
ovsdb_idl_row
 *
row_
)

11336 
ov§ec_sÊow
 *
row
 = 
	`ov§ec_sÊow_ˇ°
(
row_
);

11338 
	`as£π
(
öôed
);

11339 
	`‰ì
(
row
->
hódî
);

11340 
	}
}

11343 
	$ov§ec_sÊow_u≈¨£_pﬁlög
(
ovsdb_idl_row
 *
row_
)

11345 
ov§ec_sÊow
 *
row
 = 
	`ov§ec_sÊow_ˇ°
(
row_
);

11347 
	`as£π
(
öôed
);

11348 
	`‰ì
(
row
->
pﬁlög
);

11349 
	}
}

11352 
	$ov§ec_sÊow_u≈¨£_ßm∂ög
(
ovsdb_idl_row
 *
row_
)

11354 
ov§ec_sÊow
 *
row
 = 
	`ov§ec_sÊow_ˇ°
(
row_
);

11356 
	`as£π
(
öôed
);

11357 
	`‰ì
(
row
->
ßm∂ög
);

11358 
	}
}

11361 
	$ov§ec_sÊow_u≈¨£_èrgës
(
ovsdb_idl_row
 *
row_
)

11363 
ov§ec_sÊow
 *
row
 = 
	`ov§ec_sÊow_ˇ°
(
row_
);

11365 
	`as£π
(
öôed
);

11366 
	`‰ì
(
row
->
èrgës
);

11367 
	}
}

11370 
	$ov§ec_sÊow_öô__
(
ovsdb_idl_row
 *
row
)

11372 
	`ov§ec_sÊow_öô
(
	`ov§ec_sÊow_ˇ°
(
row
));

11373 
	}
}

11376 
	$ov§ec_sÊow_öô
(
ov§ec_sÊow
 *
row
)

11378 
	`mem£t
(
row
, 0,  *row);

11379 
	`sm≠_öô
(&
row
->
exã∫Æ_ids
);

11380 
	}
}

11382 c⁄° 
ov§ec_sÊow
 *

11383 
	$ov§ec_sÊow_fú°
(c⁄° 
ovsdb_idl
 *
idl
)

11385  
	`ov§ec_sÊow_ˇ°
(
	`ovsdb_idl_fú°_row
(
idl
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_SFLOW
]));

11386 
	}
}

11388 c⁄° 
ov§ec_sÊow
 *

11389 
	$ov§ec_sÊow_√xt
(c⁄° 
ov§ec_sÊow
 *
row
)

11391  
	`ov§ec_sÊow_ˇ°
(
	`ovsdb_idl_√xt_row
(&
row
->
hódî_
));

11392 
	}
}

11395 
	$ov§ec_sÊow_dñëe
(c⁄° 
ov§ec_sÊow
 *
row
)

11397 
	`ovsdb_idl_txn_dñëe
(&
row
->
hódî_
);

11398 
	}
}

11400 
ov§ec_sÊow
 *

11401 
	$ov§ec_sÊow_ö£π
(
ovsdb_idl_txn
 *
txn
)

11403  
	`ov§ec_sÊow_ˇ°
(
	`ovsdb_idl_txn_ö£π
(
txn
, &
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_SFLOW
], 
NULL
));

11404 
	}
}

11408 
	$ov§ec_sÊow_vîify_agít
(c⁄° 
ov§ec_sÊow
 *
row
)

11410 
	`as£π
(
öôed
);

11411 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_sÊow_cﬁumns
[
OVSREC_SFLOW_COL_AGENT
]);

11412 
	}
}

11415 
	$ov§ec_sÊow_vîify_exã∫Æ_ids
(c⁄° 
ov§ec_sÊow
 *
row
)

11417 
	`as£π
(
öôed
);

11418 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_sÊow_cﬁumns
[
OVSREC_SFLOW_COL_EXTERNAL_IDS
]);

11419 
	}
}

11422 
	$ov§ec_sÊow_vîify_hódî
(c⁄° 
ov§ec_sÊow
 *
row
)

11424 
	`as£π
(
öôed
);

11425 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_sÊow_cﬁumns
[
OVSREC_SFLOW_COL_HEADER
]);

11426 
	}
}

11429 
	$ov§ec_sÊow_vîify_pﬁlög
(c⁄° 
ov§ec_sÊow
 *
row
)

11431 
	`as£π
(
öôed
);

11432 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_sÊow_cﬁumns
[
OVSREC_SFLOW_COL_POLLING
]);

11433 
	}
}

11436 
	$ov§ec_sÊow_vîify_ßm∂ög
(c⁄° 
ov§ec_sÊow
 *
row
)

11438 
	`as£π
(
öôed
);

11439 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_sÊow_cﬁumns
[
OVSREC_SFLOW_COL_SAMPLING
]);

11440 
	}
}

11443 
	$ov§ec_sÊow_vîify_èrgës
(c⁄° 
ov§ec_sÊow
 *
row
)

11445 
	`as£π
(
öôed
);

11446 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
ov§ec_sÊow_cﬁumns
[
OVSREC_SFLOW_COL_TARGETS
]);

11447 
	}
}

11464 c⁄° 
ovsdb_d©um
 *

11465 
	$ov§ec_sÊow_gë_agít
(c⁄° 
ov§ec_sÊow
 *
row
,

11466 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

11468 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

11469  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_sÊow_cﬁ_agít
);

11470 
	}
}

11488 c⁄° 
ovsdb_d©um
 *

11489 
	$ov§ec_sÊow_gë_exã∫Æ_ids
(c⁄° 
ov§ec_sÊow
 *
row
,

11490 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
,

11491 
ovsdb_©omic_ty≥
 
vÆue_ty≥
 
OVS_UNUSED
)

11493 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

11494 
	`as£π
(
vÆue_ty≥
 =
OVSDB_TYPE_STRING
);

11495  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_sÊow_cﬁ_exã∫Æ_ids
);

11496 
	}
}

11513 c⁄° 
ovsdb_d©um
 *

11514 
	$ov§ec_sÊow_gë_hódî
(c⁄° 
ov§ec_sÊow
 *
row
,

11515 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

11517 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_INTEGER
);

11518  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_sÊow_cﬁ_hódî
);

11519 
	}
}

11536 c⁄° 
ovsdb_d©um
 *

11537 
	$ov§ec_sÊow_gë_pﬁlög
(c⁄° 
ov§ec_sÊow
 *
row
,

11538 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

11540 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_INTEGER
);

11541  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_sÊow_cﬁ_pﬁlög
);

11542 
	}
}

11559 c⁄° 
ovsdb_d©um
 *

11560 
	$ov§ec_sÊow_gë_ßm∂ög
(c⁄° 
ov§ec_sÊow
 *
row
,

11561 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

11563 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_INTEGER
);

11564  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_sÊow_cﬁ_ßm∂ög
);

11565 
	}
}

11582 c⁄° 
ovsdb_d©um
 *

11583 
	$ov§ec_sÊow_gë_èrgës
(c⁄° 
ov§ec_sÊow
 *
row
,

11584 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

11586 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

11587  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
ov§ec_sÊow_cﬁ_èrgës
);

11588 
	}
}

11591 
	$ov§ec_sÊow_£t_agít
(c⁄° 
ov§ec_sÊow
 *
row
, c⁄° *
agít
)

11593 
ovsdb_d©um
 
d©um
;

11595 
	`as£π
(
öôed
);

11596 i‡(
agít
) {

11597 
d©um
.
n
 = 1;

11598 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

11599 
d©um
.
keys
[0].
°rög
 = 
	`x°rdup
(
agít
);

11601 
d©um
.
n
 = 0;

11602 
d©um
.
keys
 = 
NULL
;

11604 
d©um
.
vÆues
 = 
NULL
;

11605 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_sÊow_cﬁumns
[
OVSREC_SFLOW_COL_AGENT
], &
d©um
);

11606 
	}
}

11609 
	$ov§ec_sÊow_£t_exã∫Æ_ids
(c⁄° 
ov§ec_sÊow
 *
row
, c⁄° 
sm≠
 *smap)

11611 
ovsdb_d©um
 
d©um
;

11613 
	`as£π
(
öôed
);

11614 i‡(
sm≠
) {

11615 
sm≠_node
 *
node
;

11616 
size_t
 
i
;

11618 
d©um
.
n
 = 
	`sm≠_cou¡
(
sm≠
);

11619 
d©um
.
keys
 = 
	`xmÆloc
(d©um.
n
 *  *datum.keys);

11620 
d©um
.
vÆues
 = 
	`xmÆloc
(d©um.
n
 *  *datum.values);

11622 
i
 = 0;

11623 
	`SMAP_FOR_EACH
 (
node
, 
sm≠
) {

11624 
d©um
.
keys
[
i
].
°rög
 = 
	`x°rdup
(
node
->
key
);

11625 
d©um
.
vÆues
[
i
].
°rög
 = 
	`x°rdup
(
node
->
vÆue
);

11626 
i
++;

11628 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_STRING
, OVSDB_TYPE_STRING);

11630 
	`ovsdb_d©um_öô_em±y
(&
d©um
);

11632 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
,

11633 &
ov§ec_sÊow_cﬁumns
[
OVSREC_SFLOW_COL_EXTERNAL_IDS
],

11634 &
d©um
);

11635 
	}
}

11639 
	$ov§ec_sÊow_£t_hódî
(c⁄° 
ov§ec_sÊow
 *
row
, c⁄° 
öt64_t
 *
hódî
, 
size_t
 
n_hódî
)

11641 
ovsdb_d©um
 
d©um
;

11642 
size_t
 
i
;

11644 
	`as£π
(
öôed
);

11645 
d©um
.
n
 = 
n_hódî
;

11646 
d©um
.
keys
 = 
	`xmÆloc
(
n_hódî
 *  *datum.keys);

11647 
d©um
.
vÆues
 = 
NULL
;

11648 
i
 = 0; i < 
n_hódî
; i++) {

11649 
d©um
.
keys
[
i
].
öãgî
 = 
hódî
[i];

11651 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_INTEGER
, 
OVSDB_TYPE_VOID
);

11652 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_sÊow_cﬁumns
[
OVSREC_SFLOW_COL_HEADER
], &
d©um
);

11653 
	}
}

11656 
	$ov§ec_sÊow_£t_pﬁlög
(c⁄° 
ov§ec_sÊow
 *
row
, c⁄° 
öt64_t
 *
pﬁlög
, 
size_t
 
n_pﬁlög
)

11658 
ovsdb_d©um
 
d©um
;

11659 
size_t
 
i
;

11661 
	`as£π
(
öôed
);

11662 
d©um
.
n
 = 
n_pﬁlög
;

11663 
d©um
.
keys
 = 
	`xmÆloc
(
n_pﬁlög
 *  *datum.keys);

11664 
d©um
.
vÆues
 = 
NULL
;

11665 
i
 = 0; i < 
n_pﬁlög
; i++) {

11666 
d©um
.
keys
[
i
].
öãgî
 = 
pﬁlög
[i];

11668 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_INTEGER
, 
OVSDB_TYPE_VOID
);

11669 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_sÊow_cﬁumns
[
OVSREC_SFLOW_COL_POLLING
], &
d©um
);

11670 
	}
}

11673 
	$ov§ec_sÊow_£t_ßm∂ög
(c⁄° 
ov§ec_sÊow
 *
row
, c⁄° 
öt64_t
 *
ßm∂ög
, 
size_t
 
n_ßm∂ög
)

11675 
ovsdb_d©um
 
d©um
;

11676 
size_t
 
i
;

11678 
	`as£π
(
öôed
);

11679 
d©um
.
n
 = 
n_ßm∂ög
;

11680 
d©um
.
keys
 = 
	`xmÆloc
(
n_ßm∂ög
 *  *datum.keys);

11681 
d©um
.
vÆues
 = 
NULL
;

11682 
i
 = 0; i < 
n_ßm∂ög
; i++) {

11683 
d©um
.
keys
[
i
].
öãgî
 = 
ßm∂ög
[i];

11685 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_INTEGER
, 
OVSDB_TYPE_VOID
);

11686 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_sÊow_cﬁumns
[
OVSREC_SFLOW_COL_SAMPLING
], &
d©um
);

11687 
	}
}

11690 
	$ov§ec_sÊow_£t_èrgës
(c⁄° 
ov§ec_sÊow
 *
row
, **
èrgës
, 
size_t
 
n_èrgës
)

11692 
ovsdb_d©um
 
d©um
;

11693 
size_t
 
i
;

11695 
	`as£π
(
öôed
);

11696 
d©um
.
n
 = 
n_èrgës
;

11697 
d©um
.
keys
 = 
	`xmÆloc
(
n_èrgës
 *  *datum.keys);

11698 
d©um
.
vÆues
 = 
NULL
;

11699 
i
 = 0; i < 
n_èrgës
; i++) {

11700 
d©um
.
keys
[
i
].
°rög
 = 
	`x°rdup
(
èrgës
[i]);

11702 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_STRING
, 
OVSDB_TYPE_VOID
);

11703 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
ov§ec_sÊow_cﬁumns
[
OVSREC_SFLOW_COL_TARGETS
], &
d©um
);

11704 
	}
}

11706 
ovsdb_idl_cﬁumn
 
	gov§ec_sÊow_cﬁumns
[
OVSREC_SFLOW_N_COLUMNS
];

11709 
	$ov§ec_sÊow_cﬁumns_öô
()

11711 
ovsdb_idl_cﬁumn
 *
c
;

11714 
c
 = &
ov§ec_sÊow_cﬁ_agít
;

11715 
c
->
«me
 = "agent";

11716 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

11717 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

11718 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

11719 
c
->
ty≥
.
n_mö
 = 0;

11720 
c
->
ty≥
.
n_max
 = 1;

11721 
c
->
muèbÀ
 = 
åue
;

11722 
c
->
∑r£
 = 
ov§ec_sÊow_∑r£_agít
;

11723 
c
->
u≈¨£
 = 
ov§ec_sÊow_u≈¨£_agít
;

11726 
c
 = &
ov§ec_sÊow_cﬁ_exã∫Æ_ids
;

11727 
c
->
«me
 = "external_ids";

11728 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

11729 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

11730 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_STRING
);

11731 
c
->
ty≥
.
vÆue
.
u
.
°rög
.
möLí
 = 0;

11732 
c
->
ty≥
.
n_mö
 = 0;

11733 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

11734 
c
->
muèbÀ
 = 
åue
;

11735 
c
->
∑r£
 = 
ov§ec_sÊow_∑r£_exã∫Æ_ids
;

11736 
c
->
u≈¨£
 = 
ov§ec_sÊow_u≈¨£_exã∫Æ_ids
;

11739 
c
 = &
ov§ec_sÊow_cﬁ_hódî
;

11740 
c
->
«me
 = "header";

11741 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_INTEGER
);

11742 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

11743 
c
->
ty≥
.
n_mö
 = 0;

11744 
c
->
ty≥
.
n_max
 = 1;

11745 
c
->
muèbÀ
 = 
åue
;

11746 
c
->
∑r£
 = 
ov§ec_sÊow_∑r£_hódî
;

11747 
c
->
u≈¨£
 = 
ov§ec_sÊow_u≈¨£_hódî
;

11750 
c
 = &
ov§ec_sÊow_cﬁ_pﬁlög
;

11751 
c
->
«me
 = "polling";

11752 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_INTEGER
);

11753 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

11754 
c
->
ty≥
.
n_mö
 = 0;

11755 
c
->
ty≥
.
n_max
 = 1;

11756 
c
->
muèbÀ
 = 
åue
;

11757 
c
->
∑r£
 = 
ov§ec_sÊow_∑r£_pﬁlög
;

11758 
c
->
u≈¨£
 = 
ov§ec_sÊow_u≈¨£_pﬁlög
;

11761 
c
 = &
ov§ec_sÊow_cﬁ_ßm∂ög
;

11762 
c
->
«me
 = "sampling";

11763 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_INTEGER
);

11764 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

11765 
c
->
ty≥
.
n_mö
 = 0;

11766 
c
->
ty≥
.
n_max
 = 1;

11767 
c
->
muèbÀ
 = 
åue
;

11768 
c
->
∑r£
 = 
ov§ec_sÊow_∑r£_ßm∂ög
;

11769 
c
->
u≈¨£
 = 
ov§ec_sÊow_u≈¨£_ßm∂ög
;

11772 
c
 = &
ov§ec_sÊow_cﬁ_èrgës
;

11773 
c
->
«me
 = "targets";

11774 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

11775 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

11776 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

11777 
c
->
ty≥
.
n_mö
 = 1;

11778 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

11779 
c
->
muèbÀ
 = 
åue
;

11780 
c
->
∑r£
 = 
ov§ec_sÊow_∑r£_èrgës
;

11781 
c
->
u≈¨£
 = 
ov§ec_sÊow_u≈¨£_èrgës
;

11782 
	}
}

11784 
ovsdb_idl_èbÀ_˛ass
 
	gov§ec_èbÀ_˛as£s
[
OVSREC_N_TABLES
] = {

11785 {"Bridge", 
Ál£
,

11786 
ov§ec_bridge_cﬁumns
, 
ARRAY_SIZE
(ovsrec_bridge_columns),

11787 (
ov§ec_bridge
), 
ov§ec_bridge_öô__
},

11788 {"C⁄åﬁÀr", 
Ál£
,

11789 
ov§ec_c⁄åﬁÀr_cﬁumns
, 
ARRAY_SIZE
(ovsrec_controller_columns),

11790 (
ov§ec_c⁄åﬁÀr
), 
ov§ec_c⁄åﬁÀr_öô__
},

11791 {"Flow_TabÀ", 
Ál£
,

11792 
ov§ec_Êow_èbÀ_cﬁumns
, 
ARRAY_SIZE
(ovsrec_flow_table_columns),

11793 (
ov§ec_Êow_èbÀ
), 
ov§ec_Êow_èbÀ_öô__
},

11794 {"I¡îÁ˚", 
Ál£
,

11795 
ov§ec_öãrÁ˚_cﬁumns
, 
ARRAY_SIZE
(ovsrec_interface_columns),

11796 (
ov§ec_öãrÁ˚
), 
ov§ec_öãrÁ˚_öô__
},

11797 {"M™agî", 
Ál£
,

11798 
ov§ec_m™agî_cﬁumns
, 
ARRAY_SIZE
(ovsrec_manager_columns),

11799 (
ov§ec_m™agî
), 
ov§ec_m™agî_öô__
},

11800 {"Múr‹", 
Ál£
,

11801 
ov§ec_múr‹_cﬁumns
, 
ARRAY_SIZE
(ovsrec_mirror_columns),

11802 (
ov§ec_múr‹
), 
ov§ec_múr‹_öô__
},

11803 {"NëFlow", 
Ál£
,

11804 
ov§ec_√tÊow_cﬁumns
, 
ARRAY_SIZE
(ovsrec_netflow_columns),

11805 (
ov§ec_√tÊow
), 
ov§ec_√tÊow_öô__
},

11806 {"O≥n_vSwôch", 
åue
,

11807 
ov§ec_›í_vswôch_cﬁumns
, 
ARRAY_SIZE
(ovsrec_open_vswitch_columns),

11808 (
ov§ec_›í_vswôch
), 
ov§ec_›í_vswôch_öô__
},

11809 {"P‹t", 
Ál£
,

11810 
ov§ec_p‹t_cﬁumns
, 
ARRAY_SIZE
(ovsrec_port_columns),

11811 (
ov§ec_p‹t
), 
ov§ec_p‹t_öô__
},

11812 {"QoS", 
åue
,

11813 
ov§ec_qos_cﬁumns
, 
ARRAY_SIZE
(ovsrec_qos_columns),

11814 (
ov§ec_qos
), 
ov§ec_qos_öô__
},

11815 {"Queue", 
åue
,

11816 
ov§ec_queue_cﬁumns
, 
ARRAY_SIZE
(ovsrec_queue_columns),

11817 (
ov§ec_queue
), 
ov§ec_queue_öô__
},

11818 {"SSL", 
Ál£
,

11819 
ov§ec_s¶_cﬁumns
, 
ARRAY_SIZE
(ovsrec_ssl_columns),

11820 (
ov§ec_s¶
), 
ov§ec_s¶_öô__
},

11821 {"sFlow", 
Ál£
,

11822 
ov§ec_sÊow_cﬁumns
, 
ARRAY_SIZE
(ovsrec_sflow_columns),

11823 (
ov§ec_sÊow
), 
ov§ec_sÊow_öô__
},

11826 
ovsdb_idl_˛ass
 
	gov§ec_idl_˛ass
 = {

11827 "O≥n_vSwôch", 
ov§ec_èbÀ_˛as£s
, 
ARRAY_SIZE
(ovsrec_table_classes)

11831 
	$ov§ec_öô
()

11833 i‡(
öôed
) {

11836 
öôed
 = 
åue
;

11838 
	`ov§ec_bridge_cﬁumns_öô
();

11839 
	`ov§ec_c⁄åﬁÀr_cﬁumns_öô
();

11840 
	`ov§ec_Êow_èbÀ_cﬁumns_öô
();

11841 
	`ov§ec_öãrÁ˚_cﬁumns_öô
();

11842 
	`ov§ec_m™agî_cﬁumns_öô
();

11843 
	`ov§ec_múr‹_cﬁumns_öô
();

11844 
	`ov§ec_√tÊow_cﬁumns_öô
();

11845 
	`ov§ec_›í_vswôch_cﬁumns_öô
();

11846 
	`ov§ec_p‹t_cﬁumns_öô
();

11847 
	`ov§ec_qos_cﬁumns_öô
();

11848 
	`ov§ec_queue_cﬁumns_öô
();

11849 
	`ov§ec_s¶_cﬁumns_öô
();

11850 
	`ov§ec_sÊow_cﬁumns_öô
();

11851 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/vswitch-idl.h

3 #i‚de‡
OVSREC_IDL_HEADER


4 
	#OVSREC_IDL_HEADER
 1

	)

6 
	~<°dboﬁ.h
>

7 
	~<°ddef.h
>

8 
	~<°döt.h
>

9 
	~"ovsdb-d©a.h
"

10 
	~"ovsdb-idl-¥ovidî.h
"

11 
	~"sm≠.h
"

12 
	~"uuid.h
"

15 
	sov§ec_bridge
 {

16 
ovsdb_idl_row
 
	mhódî_
;

19 
ov§ec_c⁄åﬁÀr
 **
	mc⁄åﬁÀr
;

20 
size_t
 
	mn_c⁄åﬁÀr
;

23 *
	md©≠©h_id
;

26 *
	md©≠©h_ty≥
;

29 
sm≠
 
	mexã∫Æ_ids
;

32 *
	mÁû_mode
;

35 
öt64_t
 *
	mÊood_vœns
;

36 
size_t
 
	mn_Êood_vœns
;

39 
öt64_t
 *
	mkey_Êow_èbÀs
;

40 
ov§ec_Êow_èbÀ
 **
	mvÆue_Êow_èbÀs
;

41 
size_t
 
	mn_Êow_èbÀs
;

44 
ov§ec_múr‹
 **
	mmúr‹s
;

45 
size_t
 
	mn_múr‹s
;

48 *
	m«me
;

51 
ov§ec_√tÊow
 *
	m√tÊow
;

54 
sm≠
 
	mŸhî_c⁄fig
;

57 
ov§ec_p‹t
 **
	mp‹ts
;

58 
size_t
 
	mn_p‹ts
;

61 
ov§ec_sÊow
 *
	msÊow
;

64 
sm≠
 
	m°©us
;

67 
boﬁ
 
	m°p_íabÀ
;

71 
	mOVSREC_BRIDGE_COL_CONTROLLER
,

72 
	mOVSREC_BRIDGE_COL_DATAPATH_ID
,

73 
	mOVSREC_BRIDGE_COL_DATAPATH_TYPE
,

74 
	mOVSREC_BRIDGE_COL_EXTERNAL_IDS
,

75 
	mOVSREC_BRIDGE_COL_FAIL_MODE
,

76 
	mOVSREC_BRIDGE_COL_FLOOD_VLANS
,

77 
	mOVSREC_BRIDGE_COL_FLOW_TABLES
,

78 
	mOVSREC_BRIDGE_COL_MIRRORS
,

79 
	mOVSREC_BRIDGE_COL_NAME
,

80 
	mOVSREC_BRIDGE_COL_NETFLOW
,

81 
	mOVSREC_BRIDGE_COL_OTHER_CONFIG
,

82 
	mOVSREC_BRIDGE_COL_PORTS
,

83 
	mOVSREC_BRIDGE_COL_SFLOW
,

84 
	mOVSREC_BRIDGE_COL_STATUS
,

85 
	mOVSREC_BRIDGE_COL_STP_ENABLE
,

86 
	mOVSREC_BRIDGE_N_COLUMNS


89 
	#ov§ec_bridge_cﬁ_°©us
 (
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_STATUS
])

	)

90 
	#ov§ec_bridge_cﬁ_Áû_mode
 (
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_FAIL_MODE
])

	)

91 
	#ov§ec_bridge_cﬁ_d©≠©h_id
 (
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_DATAPATH_ID
])

	)

92 
	#ov§ec_bridge_cﬁ_d©≠©h_ty≥
 (
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_DATAPATH_TYPE
])

	)

93 
	#ov§ec_bridge_cﬁ_sÊow
 (
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_SFLOW
])

	)

94 
	#ov§ec_bridge_cﬁ_múr‹s
 (
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_MIRRORS
])

	)

95 
	#ov§ec_bridge_cﬁ_Ÿhî_c⁄fig
 (
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_OTHER_CONFIG
])

	)

96 
	#ov§ec_bridge_cﬁ_Êood_vœns
 (
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_FLOOD_VLANS
])

	)

97 
	#ov§ec_bridge_cﬁ_c⁄åﬁÀr
 (
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_CONTROLLER
])

	)

98 
	#ov§ec_bridge_cﬁ_√tÊow
 (
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_NETFLOW
])

	)

99 
	#ov§ec_bridge_cﬁ_°p_íabÀ
 (
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_STP_ENABLE
])

	)

100 
	#ov§ec_bridge_cﬁ_Êow_èbÀs
 (
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_FLOW_TABLES
])

	)

101 
	#ov§ec_bridge_cﬁ_exã∫Æ_ids
 (
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_EXTERNAL_IDS
])

	)

102 
	#ov§ec_bridge_cﬁ_p‹ts
 (
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_PORTS
])

	)

103 
	#ov§ec_bridge_cﬁ_«me
 (
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_NAME
])

	)

105 
ovsdb_idl_cﬁumn
 
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_N_COLUMNS
];

107 c⁄° 
ov§ec_bridge
 *
ov§ec_bridge_fú°
(c⁄° 
ovsdb_idl
 *);

108 c⁄° 
ov§ec_bridge
 *
ov§ec_bridge_√xt
(const ovsrec_bridge *);

109 
	#OVSREC_BRIDGE_FOR_EACH
(
ROW
, 
IDL
) \

110 (
ROW
Ë
	`ov§ec_bridge_fú°
(
IDL
); \

111 (
ROW
); \

112 (
ROW
Ë
	`ov§ec_bridge_√xt
(ROW))

	)

113 
	#OVSREC_BRIDGE_FOR_EACH_SAFE
(
ROW
, 
NEXT
, 
IDL
) \

114 (
ROW
Ë
	`ov§ec_bridge_fú°
(
IDL
); \

115 (
ROW
Ë? ((
NEXT
Ë
	`ov§ec_bridge_√xt
(ROW), 1) : 0; \

116 (
ROW
Ë(
NEXT
))

	)

118 
ov§ec_bridge_öô
(
ov§ec_bridge
 *);

119 
ov§ec_bridge_dñëe
(c⁄° 
ov§ec_bridge
 *);

120 
ov§ec_bridge
 *
ov§ec_bridge_ö£π
(
ovsdb_idl_txn
 *);

122 
ov§ec_bridge_vîify_c⁄åﬁÀr
(c⁄° 
ov§ec_bridge
 *);

123 
ov§ec_bridge_vîify_d©≠©h_id
(c⁄° 
ov§ec_bridge
 *);

124 
ov§ec_bridge_vîify_d©≠©h_ty≥
(c⁄° 
ov§ec_bridge
 *);

125 
ov§ec_bridge_vîify_exã∫Æ_ids
(c⁄° 
ov§ec_bridge
 *);

126 
ov§ec_bridge_vîify_Áû_mode
(c⁄° 
ov§ec_bridge
 *);

127 
ov§ec_bridge_vîify_Êood_vœns
(c⁄° 
ov§ec_bridge
 *);

128 
ov§ec_bridge_vîify_Êow_èbÀs
(c⁄° 
ov§ec_bridge
 *);

129 
ov§ec_bridge_vîify_múr‹s
(c⁄° 
ov§ec_bridge
 *);

130 
ov§ec_bridge_vîify_«me
(c⁄° 
ov§ec_bridge
 *);

131 
ov§ec_bridge_vîify_√tÊow
(c⁄° 
ov§ec_bridge
 *);

132 
ov§ec_bridge_vîify_Ÿhî_c⁄fig
(c⁄° 
ov§ec_bridge
 *);

133 
ov§ec_bridge_vîify_p‹ts
(c⁄° 
ov§ec_bridge
 *);

134 
ov§ec_bridge_vîify_sÊow
(c⁄° 
ov§ec_bridge
 *);

135 
ov§ec_bridge_vîify_°©us
(c⁄° 
ov§ec_bridge
 *);

136 
ov§ec_bridge_vîify_°p_íabÀ
(c⁄° 
ov§ec_bridge
 *);

141 c⁄° 
ovsdb_d©um
 *
ov§ec_bridge_gë_c⁄åﬁÀr
(c⁄° 
ov§ec_bridge
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

142 c⁄° 
ovsdb_d©um
 *
ov§ec_bridge_gë_d©≠©h_id
(c⁄° 
ov§ec_bridge
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

143 c⁄° 
ovsdb_d©um
 *
ov§ec_bridge_gë_d©≠©h_ty≥
(c⁄° 
ov§ec_bridge
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

144 c⁄° 
ovsdb_d©um
 *
ov§ec_bridge_gë_exã∫Æ_ids
(c⁄° 
ov§ec_bridge
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

145 c⁄° 
ovsdb_d©um
 *
ov§ec_bridge_gë_Áû_mode
(c⁄° 
ov§ec_bridge
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

146 c⁄° 
ovsdb_d©um
 *
ov§ec_bridge_gë_Êood_vœns
(c⁄° 
ov§ec_bridge
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

147 c⁄° 
ovsdb_d©um
 *
ov§ec_bridge_gë_Êow_èbÀs
(c⁄° 
ov§ec_bridge
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

148 c⁄° 
ovsdb_d©um
 *
ov§ec_bridge_gë_múr‹s
(c⁄° 
ov§ec_bridge
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

149 c⁄° 
ovsdb_d©um
 *
ov§ec_bridge_gë_«me
(c⁄° 
ov§ec_bridge
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

150 c⁄° 
ovsdb_d©um
 *
ov§ec_bridge_gë_√tÊow
(c⁄° 
ov§ec_bridge
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

151 c⁄° 
ovsdb_d©um
 *
ov§ec_bridge_gë_Ÿhî_c⁄fig
(c⁄° 
ov§ec_bridge
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

152 c⁄° 
ovsdb_d©um
 *
ov§ec_bridge_gë_p‹ts
(c⁄° 
ov§ec_bridge
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

153 c⁄° 
ovsdb_d©um
 *
ov§ec_bridge_gë_sÊow
(c⁄° 
ov§ec_bridge
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

154 c⁄° 
ovsdb_d©um
 *
ov§ec_bridge_gë_°©us
(c⁄° 
ov§ec_bridge
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

155 c⁄° 
ovsdb_d©um
 *
ov§ec_bridge_gë_°p_íabÀ
(c⁄° 
ov§ec_bridge
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

157 
ov§ec_bridge_£t_c⁄åﬁÀr
(c⁄° 
ov§ec_bridge
 *, 
ov§ec_c⁄åﬁÀr
 **
c⁄åﬁÀr
, 
size_t
 
n_c⁄åﬁÀr
);

158 
ov§ec_bridge_£t_d©≠©h_id
(c⁄° 
ov§ec_bridge
 *, c⁄° *
d©≠©h_id
);

159 
ov§ec_bridge_£t_d©≠©h_ty≥
(c⁄° 
ov§ec_bridge
 *, c⁄° *
d©≠©h_ty≥
);

160 
ov§ec_bridge_£t_exã∫Æ_ids
(c⁄° 
ov§ec_bridge
 *, c⁄° 
sm≠
 *);

161 
ov§ec_bridge_£t_Áû_mode
(c⁄° 
ov§ec_bridge
 *, c⁄° *
Áû_mode
);

162 
ov§ec_bridge_£t_Êood_vœns
(c⁄° 
ov§ec_bridge
 *, c⁄° 
öt64_t
 *
Êood_vœns
, 
size_t
 
n_Êood_vœns
);

163 
ov§ec_bridge_£t_Êow_èbÀs
(c⁄° 
ov§ec_bridge
 *, c⁄° 
öt64_t
 *
key_Êow_èbÀs
, 
ov§ec_Êow_èbÀ
 **
vÆue_Êow_èbÀs
, 
size_t
 
n_Êow_èbÀs
);

164 
ov§ec_bridge_£t_múr‹s
(c⁄° 
ov§ec_bridge
 *, 
ov§ec_múr‹
 **
múr‹s
, 
size_t
 
n_múr‹s
);

165 
ov§ec_bridge_£t_«me
(c⁄° 
ov§ec_bridge
 *, c⁄° *
«me
);

166 
ov§ec_bridge_£t_√tÊow
(c⁄° 
ov§ec_bridge
 *, c⁄° 
ov§ec_√tÊow
 *
√tÊow
);

167 
ov§ec_bridge_£t_Ÿhî_c⁄fig
(c⁄° 
ov§ec_bridge
 *, c⁄° 
sm≠
 *);

168 
ov§ec_bridge_£t_p‹ts
(c⁄° 
ov§ec_bridge
 *, 
ov§ec_p‹t
 **
p‹ts
, 
size_t
 
n_p‹ts
);

169 
ov§ec_bridge_£t_sÊow
(c⁄° 
ov§ec_bridge
 *, c⁄° 
ov§ec_sÊow
 *
sÊow
);

170 
ov§ec_bridge_£t_°©us
(c⁄° 
ov§ec_bridge
 *, c⁄° 
sm≠
 *);

171 
ov§ec_bridge_£t_°p_íabÀ
(c⁄° 
ov§ec_bridge
 *, 
boﬁ
 
°p_íabÀ
);

175 
	sov§ec_c⁄åﬁÀr
 {

176 
ovsdb_idl_row
 
	mhódî_
;

179 *
	mc⁄√˘i⁄_mode
;

182 
öt64_t
 *
	mc⁄åﬁÀr_bur°_limô
;

183 
size_t
 
	mn_c⁄åﬁÀr_bur°_limô
;

186 
öt64_t
 *
	mc⁄åﬁÀr_øã_limô
;

187 
size_t
 
	mn_c⁄åﬁÀr_øã_limô
;

190 
boﬁ
 *
	míabÀ_async_mesßges
;

191 
size_t
 
	mn_íabÀ_async_mesßges
;

194 
sm≠
 
	mexã∫Æ_ids
;

197 
öt64_t
 *
	möa˘ivôy_¥obe
;

198 
size_t
 
	mn_öa˘ivôy_¥obe
;

201 
boﬁ
 
	mis_c⁄√˘ed
;

204 *
	mloˇl_g©eway
;

207 *
	mloˇl_ù
;

210 *
	mloˇl_√tmask
;

213 
öt64_t
 *
	mmax_backoff
;

214 
size_t
 
	mn_max_backoff
;

217 
sm≠
 
	mŸhî_c⁄fig
;

220 *
	mrﬁe
;

223 
sm≠
 
	m°©us
;

226 *
	mèrgë
;

230 
	mOVSREC_CONTROLLER_COL_CONNECTION_MODE
,

231 
	mOVSREC_CONTROLLER_COL_CONTROLLER_BURST_LIMIT
,

232 
	mOVSREC_CONTROLLER_COL_CONTROLLER_RATE_LIMIT
,

233 
	mOVSREC_CONTROLLER_COL_ENABLE_ASYNC_MESSAGES
,

234 
	mOVSREC_CONTROLLER_COL_EXTERNAL_IDS
,

235 
	mOVSREC_CONTROLLER_COL_INACTIVITY_PROBE
,

236 
	mOVSREC_CONTROLLER_COL_IS_CONNECTED
,

237 
	mOVSREC_CONTROLLER_COL_LOCAL_GATEWAY
,

238 
	mOVSREC_CONTROLLER_COL_LOCAL_IP
,

239 
	mOVSREC_CONTROLLER_COL_LOCAL_NETMASK
,

240 
	mOVSREC_CONTROLLER_COL_MAX_BACKOFF
,

241 
	mOVSREC_CONTROLLER_COL_OTHER_CONFIG
,

242 
	mOVSREC_CONTROLLER_COL_ROLE
,

243 
	mOVSREC_CONTROLLER_COL_STATUS
,

244 
	mOVSREC_CONTROLLER_COL_TARGET
,

245 
	mOVSREC_CONTROLLER_N_COLUMNS


248 
	#ov§ec_c⁄åﬁÀr_cﬁ_max_backoff
 (
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_MAX_BACKOFF
])

	)

249 
	#ov§ec_c⁄åﬁÀr_cﬁ_°©us
 (
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_STATUS
])

	)

250 
	#ov§ec_c⁄åﬁÀr_cﬁ_èrgë
 (
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_TARGET
])

	)

251 
	#ov§ec_c⁄åﬁÀr_cﬁ_loˇl_ù
 (
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_LOCAL_IP
])

	)

252 
	#ov§ec_c⁄åﬁÀr_cﬁ_c⁄√˘i⁄_mode
 (
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_CONNECTION_MODE
])

	)

253 
	#ov§ec_c⁄åﬁÀr_cﬁ_Ÿhî_c⁄fig
 (
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_OTHER_CONFIG
])

	)

254 
	#ov§ec_c⁄åﬁÀr_cﬁ_c⁄åﬁÀr_øã_limô
 (
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_CONTROLLER_RATE_LIMIT
])

	)

255 
	#ov§ec_c⁄åﬁÀr_cﬁ_öa˘ivôy_¥obe
 (
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_INACTIVITY_PROBE
])

	)

256 
	#ov§ec_c⁄åﬁÀr_cﬁ_loˇl_√tmask
 (
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_LOCAL_NETMASK
])

	)

257 
	#ov§ec_c⁄åﬁÀr_cﬁ_rﬁe
 (
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_ROLE
])

	)

258 
	#ov§ec_c⁄åﬁÀr_cﬁ_c⁄åﬁÀr_bur°_limô
 (
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_CONTROLLER_BURST_LIMIT
])

	)

259 
	#ov§ec_c⁄åﬁÀr_cﬁ_exã∫Æ_ids
 (
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_EXTERNAL_IDS
])

	)

260 
	#ov§ec_c⁄åﬁÀr_cﬁ_loˇl_g©eway
 (
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_LOCAL_GATEWAY
])

	)

261 
	#ov§ec_c⁄åﬁÀr_cﬁ_is_c⁄√˘ed
 (
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_IS_CONNECTED
])

	)

262 
	#ov§ec_c⁄åﬁÀr_cﬁ_íabÀ_async_mesßges
 (
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_ENABLE_ASYNC_MESSAGES
])

	)

264 
ovsdb_idl_cﬁumn
 
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_N_COLUMNS
];

266 c⁄° 
ov§ec_c⁄åﬁÀr
 *
ov§ec_c⁄åﬁÀr_fú°
(c⁄° 
ovsdb_idl
 *);

267 c⁄° 
ov§ec_c⁄åﬁÀr
 *
ov§ec_c⁄åﬁÀr_√xt
(const ovsrec_controller *);

268 
	#OVSREC_CONTROLLER_FOR_EACH
(
ROW
, 
IDL
) \

269 (
ROW
Ë
	`ov§ec_c⁄åﬁÀr_fú°
(
IDL
); \

270 (
ROW
); \

271 (
ROW
Ë
	`ov§ec_c⁄åﬁÀr_√xt
(ROW))

	)

272 
	#OVSREC_CONTROLLER_FOR_EACH_SAFE
(
ROW
, 
NEXT
, 
IDL
) \

273 (
ROW
Ë
	`ov§ec_c⁄åﬁÀr_fú°
(
IDL
); \

274 (
ROW
Ë? ((
NEXT
Ë
	`ov§ec_c⁄åﬁÀr_√xt
(ROW), 1) : 0; \

275 (
ROW
Ë(
NEXT
))

	)

277 
ov§ec_c⁄åﬁÀr_öô
(
ov§ec_c⁄åﬁÀr
 *);

278 
ov§ec_c⁄åﬁÀr_dñëe
(c⁄° 
ov§ec_c⁄åﬁÀr
 *);

279 
ov§ec_c⁄åﬁÀr
 *
ov§ec_c⁄åﬁÀr_ö£π
(
ovsdb_idl_txn
 *);

281 
ov§ec_c⁄åﬁÀr_vîify_c⁄√˘i⁄_mode
(c⁄° 
ov§ec_c⁄åﬁÀr
 *);

282 
ov§ec_c⁄åﬁÀr_vîify_c⁄åﬁÀr_bur°_limô
(c⁄° 
ov§ec_c⁄åﬁÀr
 *);

283 
ov§ec_c⁄åﬁÀr_vîify_c⁄åﬁÀr_øã_limô
(c⁄° 
ov§ec_c⁄åﬁÀr
 *);

284 
ov§ec_c⁄åﬁÀr_vîify_íabÀ_async_mesßges
(c⁄° 
ov§ec_c⁄åﬁÀr
 *);

285 
ov§ec_c⁄åﬁÀr_vîify_exã∫Æ_ids
(c⁄° 
ov§ec_c⁄åﬁÀr
 *);

286 
ov§ec_c⁄åﬁÀr_vîify_öa˘ivôy_¥obe
(c⁄° 
ov§ec_c⁄åﬁÀr
 *);

287 
ov§ec_c⁄åﬁÀr_vîify_is_c⁄√˘ed
(c⁄° 
ov§ec_c⁄åﬁÀr
 *);

288 
ov§ec_c⁄åﬁÀr_vîify_loˇl_g©eway
(c⁄° 
ov§ec_c⁄åﬁÀr
 *);

289 
ov§ec_c⁄åﬁÀr_vîify_loˇl_ù
(c⁄° 
ov§ec_c⁄åﬁÀr
 *);

290 
ov§ec_c⁄åﬁÀr_vîify_loˇl_√tmask
(c⁄° 
ov§ec_c⁄åﬁÀr
 *);

291 
ov§ec_c⁄åﬁÀr_vîify_max_backoff
(c⁄° 
ov§ec_c⁄åﬁÀr
 *);

292 
ov§ec_c⁄åﬁÀr_vîify_Ÿhî_c⁄fig
(c⁄° 
ov§ec_c⁄åﬁÀr
 *);

293 
ov§ec_c⁄åﬁÀr_vîify_rﬁe
(c⁄° 
ov§ec_c⁄åﬁÀr
 *);

294 
ov§ec_c⁄åﬁÀr_vîify_°©us
(c⁄° 
ov§ec_c⁄åﬁÀr
 *);

295 
ov§ec_c⁄åﬁÀr_vîify_èrgë
(c⁄° 
ov§ec_c⁄åﬁÀr
 *);

300 c⁄° 
ovsdb_d©um
 *
ov§ec_c⁄åﬁÀr_gë_c⁄√˘i⁄_mode
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

301 c⁄° 
ovsdb_d©um
 *
ov§ec_c⁄åﬁÀr_gë_c⁄åﬁÀr_bur°_limô
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

302 c⁄° 
ovsdb_d©um
 *
ov§ec_c⁄åﬁÀr_gë_c⁄åﬁÀr_øã_limô
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

303 c⁄° 
ovsdb_d©um
 *
ov§ec_c⁄åﬁÀr_gë_íabÀ_async_mesßges
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

304 c⁄° 
ovsdb_d©um
 *
ov§ec_c⁄åﬁÀr_gë_exã∫Æ_ids
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

305 c⁄° 
ovsdb_d©um
 *
ov§ec_c⁄åﬁÀr_gë_öa˘ivôy_¥obe
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

306 c⁄° 
ovsdb_d©um
 *
ov§ec_c⁄åﬁÀr_gë_is_c⁄√˘ed
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

307 c⁄° 
ovsdb_d©um
 *
ov§ec_c⁄åﬁÀr_gë_loˇl_g©eway
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

308 c⁄° 
ovsdb_d©um
 *
ov§ec_c⁄åﬁÀr_gë_loˇl_ù
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

309 c⁄° 
ovsdb_d©um
 *
ov§ec_c⁄åﬁÀr_gë_loˇl_√tmask
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

310 c⁄° 
ovsdb_d©um
 *
ov§ec_c⁄åﬁÀr_gë_max_backoff
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

311 c⁄° 
ovsdb_d©um
 *
ov§ec_c⁄åﬁÀr_gë_Ÿhî_c⁄fig
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

312 c⁄° 
ovsdb_d©um
 *
ov§ec_c⁄åﬁÀr_gë_rﬁe
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

313 c⁄° 
ovsdb_d©um
 *
ov§ec_c⁄åﬁÀr_gë_°©us
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

314 c⁄° 
ovsdb_d©um
 *
ov§ec_c⁄åﬁÀr_gë_èrgë
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

316 
ov§ec_c⁄åﬁÀr_£t_c⁄√˘i⁄_mode
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, c⁄° *
c⁄√˘i⁄_mode
);

317 
ov§ec_c⁄åﬁÀr_£t_c⁄åﬁÀr_bur°_limô
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, c⁄° 
öt64_t
 *
c⁄åﬁÀr_bur°_limô
, 
size_t
 
n_c⁄åﬁÀr_bur°_limô
);

318 
ov§ec_c⁄åﬁÀr_£t_c⁄åﬁÀr_øã_limô
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, c⁄° 
öt64_t
 *
c⁄åﬁÀr_øã_limô
, 
size_t
 
n_c⁄åﬁÀr_øã_limô
);

319 
ov§ec_c⁄åﬁÀr_£t_íabÀ_async_mesßges
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, c⁄° 
boﬁ
 *
íabÀ_async_mesßges
, 
size_t
 
n_íabÀ_async_mesßges
);

320 
ov§ec_c⁄åﬁÀr_£t_exã∫Æ_ids
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, c⁄° 
sm≠
 *);

321 
ov§ec_c⁄åﬁÀr_£t_öa˘ivôy_¥obe
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, c⁄° 
öt64_t
 *
öa˘ivôy_¥obe
, 
size_t
 
n_öa˘ivôy_¥obe
);

322 
ov§ec_c⁄åﬁÀr_£t_is_c⁄√˘ed
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, 
boﬁ
 
is_c⁄√˘ed
);

323 
ov§ec_c⁄åﬁÀr_£t_loˇl_g©eway
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, c⁄° *
loˇl_g©eway
);

324 
ov§ec_c⁄åﬁÀr_£t_loˇl_ù
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, c⁄° *
loˇl_ù
);

325 
ov§ec_c⁄åﬁÀr_£t_loˇl_√tmask
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, c⁄° *
loˇl_√tmask
);

326 
ov§ec_c⁄åﬁÀr_£t_max_backoff
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, c⁄° 
öt64_t
 *
max_backoff
, 
size_t
 
n_max_backoff
);

327 
ov§ec_c⁄åﬁÀr_£t_Ÿhî_c⁄fig
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, c⁄° 
sm≠
 *);

328 
ov§ec_c⁄åﬁÀr_£t_rﬁe
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, c⁄° *
rﬁe
);

329 
ov§ec_c⁄åﬁÀr_£t_°©us
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, c⁄° 
sm≠
 *);

330 
ov§ec_c⁄åﬁÀr_£t_èrgë
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, c⁄° *
èrgë
);

334 
	sov§ec_Êow_èbÀ
 {

335 
ovsdb_idl_row
 
	mhódî_
;

338 
öt64_t
 *
	mÊow_limô
;

339 
size_t
 
	mn_Êow_limô
;

342 **
	mgroups
;

343 
size_t
 
	mn_groups
;

346 *
	m«me
;

349 *
	movîÊow_pﬁicy
;

353 
	mOVSREC_FLOW_TABLE_COL_FLOW_LIMIT
,

354 
	mOVSREC_FLOW_TABLE_COL_GROUPS
,

355 
	mOVSREC_FLOW_TABLE_COL_NAME
,

356 
	mOVSREC_FLOW_TABLE_COL_OVERFLOW_POLICY
,

357 
	mOVSREC_FLOW_TABLE_N_COLUMNS


360 
	#ov§ec_Êow_èbÀ_cﬁ_ovîÊow_pﬁicy
 (
ov§ec_Êow_èbÀ_cﬁumns
[
OVSREC_FLOW_TABLE_COL_OVERFLOW_POLICY
])

	)

361 
	#ov§ec_Êow_èbÀ_cﬁ_Êow_limô
 (
ov§ec_Êow_èbÀ_cﬁumns
[
OVSREC_FLOW_TABLE_COL_FLOW_LIMIT
])

	)

362 
	#ov§ec_Êow_èbÀ_cﬁ_groups
 (
ov§ec_Êow_èbÀ_cﬁumns
[
OVSREC_FLOW_TABLE_COL_GROUPS
])

	)

363 
	#ov§ec_Êow_èbÀ_cﬁ_«me
 (
ov§ec_Êow_èbÀ_cﬁumns
[
OVSREC_FLOW_TABLE_COL_NAME
])

	)

365 
ovsdb_idl_cﬁumn
 
ov§ec_Êow_èbÀ_cﬁumns
[
OVSREC_FLOW_TABLE_N_COLUMNS
];

367 c⁄° 
ov§ec_Êow_èbÀ
 *
ov§ec_Êow_èbÀ_fú°
(c⁄° 
ovsdb_idl
 *);

368 c⁄° 
ov§ec_Êow_èbÀ
 *
ov§ec_Êow_èbÀ_√xt
(const ovsrec_flow_table *);

369 
	#OVSREC_FLOW_TABLE_FOR_EACH
(
ROW
, 
IDL
) \

370 (
ROW
Ë
	`ov§ec_Êow_èbÀ_fú°
(
IDL
); \

371 (
ROW
); \

372 (
ROW
Ë
	`ov§ec_Êow_èbÀ_√xt
(ROW))

	)

373 
	#OVSREC_FLOW_TABLE_FOR_EACH_SAFE
(
ROW
, 
NEXT
, 
IDL
) \

374 (
ROW
Ë
	`ov§ec_Êow_èbÀ_fú°
(
IDL
); \

375 (
ROW
Ë? ((
NEXT
Ë
	`ov§ec_Êow_èbÀ_√xt
(ROW), 1) : 0; \

376 (
ROW
Ë(
NEXT
))

	)

378 
ov§ec_Êow_èbÀ_öô
(
ov§ec_Êow_èbÀ
 *);

379 
ov§ec_Êow_èbÀ_dñëe
(c⁄° 
ov§ec_Êow_èbÀ
 *);

380 
ov§ec_Êow_èbÀ
 *
ov§ec_Êow_èbÀ_ö£π
(
ovsdb_idl_txn
 *);

382 
ov§ec_Êow_èbÀ_vîify_Êow_limô
(c⁄° 
ov§ec_Êow_èbÀ
 *);

383 
ov§ec_Êow_èbÀ_vîify_groups
(c⁄° 
ov§ec_Êow_èbÀ
 *);

384 
ov§ec_Êow_èbÀ_vîify_«me
(c⁄° 
ov§ec_Êow_èbÀ
 *);

385 
ov§ec_Êow_èbÀ_vîify_ovîÊow_pﬁicy
(c⁄° 
ov§ec_Êow_èbÀ
 *);

390 c⁄° 
ovsdb_d©um
 *
ov§ec_Êow_èbÀ_gë_Êow_limô
(c⁄° 
ov§ec_Êow_èbÀ
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

391 c⁄° 
ovsdb_d©um
 *
ov§ec_Êow_èbÀ_gë_groups
(c⁄° 
ov§ec_Êow_èbÀ
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

392 c⁄° 
ovsdb_d©um
 *
ov§ec_Êow_èbÀ_gë_«me
(c⁄° 
ov§ec_Êow_èbÀ
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

393 c⁄° 
ovsdb_d©um
 *
ov§ec_Êow_èbÀ_gë_ovîÊow_pﬁicy
(c⁄° 
ov§ec_Êow_èbÀ
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

395 
ov§ec_Êow_èbÀ_£t_Êow_limô
(c⁄° 
ov§ec_Êow_èbÀ
 *, c⁄° 
öt64_t
 *
Êow_limô
, 
size_t
 
n_Êow_limô
);

396 
ov§ec_Êow_èbÀ_£t_groups
(c⁄° 
ov§ec_Êow_èbÀ
 *, **
groups
, 
size_t
 
n_groups
);

397 
ov§ec_Êow_èbÀ_£t_«me
(c⁄° 
ov§ec_Êow_èbÀ
 *, c⁄° *
«me
);

398 
ov§ec_Êow_èbÀ_£t_ovîÊow_pﬁicy
(c⁄° 
ov§ec_Êow_èbÀ
 *, c⁄° *
ovîÊow_pﬁicy
);

402 
	sov§ec_öãrÁ˚
 {

403 
ovsdb_idl_row
 
	mhódî_
;

406 *
	madmö_°©e
;

409 
boﬁ
 *
	mcfm_Áu…
;

410 
size_t
 
	mn_cfm_Áu…
;

413 **
	mcfm_Áu…_°©us
;

414 
size_t
 
	mn_cfm_Áu…_°©us
;

417 
öt64_t
 *
	mcfm_hó…h
;

418 
size_t
 
	mn_cfm_hó…h
;

421 
öt64_t
 *
	mcfm_mpid
;

422 
size_t
 
	mn_cfm_mpid
;

425 
öt64_t
 *
	mcfm_ªmŸe_mpids
;

426 
size_t
 
	mn_cfm_ªmŸe_mpids
;

429 *
	mcfm_ªmŸe_›°©e
;

432 *
	mdu∂ex
;

435 
sm≠
 
	mexã∫Æ_ids
;

438 
öt64_t
 
	mögªss_pﬁicög_bur°
;

441 
öt64_t
 
	mögªss_pﬁicög_øã
;

444 
boﬁ
 *
	mœ˝_cuºít
;

445 
size_t
 
	mn_œ˝_cuºít
;

448 
öt64_t
 *
	mlök_ª£ts
;

449 
size_t
 
	mn_lök_ª£ts
;

452 
öt64_t
 *
	mlök_•ìd
;

453 
size_t
 
	mn_lök_•ìd
;

456 *
	mlök_°©e
;

459 *
	mmac
;

462 
öt64_t
 *
	mmtu
;

463 
size_t
 
	mn_mtu
;

466 *
	m«me
;

469 
öt64_t
 *
	moÂ‹t
;

470 
size_t
 
	mn_oÂ‹t
;

473 
sm≠
 
	m›ti⁄s
;

476 
sm≠
 
	mŸhî_c⁄fig
;

479 **
	mkey_°©i°ics
;

480 
öt64_t
 *
	mvÆue_°©i°ics
;

481 
size_t
 
	mn_°©i°ics
;

484 
sm≠
 
	m°©us
;

487 *
	mty≥
;

491 
	mOVSREC_INTERFACE_COL_ADMIN_STATE
,

492 
	mOVSREC_INTERFACE_COL_CFM_FAULT
,

493 
	mOVSREC_INTERFACE_COL_CFM_FAULT_STATUS
,

494 
	mOVSREC_INTERFACE_COL_CFM_HEALTH
,

495 
	mOVSREC_INTERFACE_COL_CFM_MPID
,

496 
	mOVSREC_INTERFACE_COL_CFM_REMOTE_MPIDS
,

497 
	mOVSREC_INTERFACE_COL_CFM_REMOTE_OPSTATE
,

498 
	mOVSREC_INTERFACE_COL_DUPLEX
,

499 
	mOVSREC_INTERFACE_COL_EXTERNAL_IDS
,

500 
	mOVSREC_INTERFACE_COL_INGRESS_POLICING_BURST
,

501 
	mOVSREC_INTERFACE_COL_INGRESS_POLICING_RATE
,

502 
	mOVSREC_INTERFACE_COL_LACP_CURRENT
,

503 
	mOVSREC_INTERFACE_COL_LINK_RESETS
,

504 
	mOVSREC_INTERFACE_COL_LINK_SPEED
,

505 
	mOVSREC_INTERFACE_COL_LINK_STATE
,

506 
	mOVSREC_INTERFACE_COL_MAC
,

507 
	mOVSREC_INTERFACE_COL_MTU
,

508 
	mOVSREC_INTERFACE_COL_NAME
,

509 
	mOVSREC_INTERFACE_COL_OFPORT
,

510 
	mOVSREC_INTERFACE_COL_OPTIONS
,

511 
	mOVSREC_INTERFACE_COL_OTHER_CONFIG
,

512 
	mOVSREC_INTERFACE_COL_STATISTICS
,

513 
	mOVSREC_INTERFACE_COL_STATUS
,

514 
	mOVSREC_INTERFACE_COL_TYPE
,

515 
	mOVSREC_INTERFACE_N_COLUMNS


518 
	#ov§ec_öãrÁ˚_cﬁ_lök_°©e
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_LINK_STATE
])

	)

519 
	#ov§ec_öãrÁ˚_cﬁ_cfm_Áu…
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_CFM_FAULT
])

	)

520 
	#ov§ec_öãrÁ˚_cﬁ_cfm_ªmŸe_›°©e
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_CFM_REMOTE_OPSTATE
])

	)

521 
	#ov§ec_öãrÁ˚_cﬁ_ögªss_pﬁicög_øã
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_INGRESS_POLICING_RATE
])

	)

522 
	#ov§ec_öãrÁ˚_cﬁ_lök_ª£ts
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_LINK_RESETS
])

	)

523 
	#ov§ec_öãrÁ˚_cﬁ_°©i°ics
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_STATISTICS
])

	)

524 
	#ov§ec_öãrÁ˚_cﬁ_du∂ex
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_DUPLEX
])

	)

525 
	#ov§ec_öãrÁ˚_cﬁ_ty≥
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_TYPE
])

	)

526 
	#ov§ec_öãrÁ˚_cﬁ_œ˝_cuºít
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_LACP_CURRENT
])

	)

527 
	#ov§ec_öãrÁ˚_cﬁ_°©us
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_STATUS
])

	)

528 
	#ov§ec_öãrÁ˚_cﬁ_ögªss_pﬁicög_bur°
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_INGRESS_POLICING_BURST
])

	)

529 
	#ov§ec_öãrÁ˚_cﬁ_cfm_hó…h
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_CFM_HEALTH
])

	)

530 
	#ov§ec_öãrÁ˚_cﬁ_lök_•ìd
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_LINK_SPEED
])

	)

531 
	#ov§ec_öãrÁ˚_cﬁ_admö_°©e
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_ADMIN_STATE
])

	)

532 
	#ov§ec_öãrÁ˚_cﬁ_exã∫Æ_ids
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_EXTERNAL_IDS
])

	)

533 
	#ov§ec_öãrÁ˚_cﬁ_oÂ‹t
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_OFPORT
])

	)

534 
	#ov§ec_öãrÁ˚_cﬁ_«me
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_NAME
])

	)

535 
	#ov§ec_öãrÁ˚_cﬁ_Ÿhî_c⁄fig
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_OTHER_CONFIG
])

	)

536 
	#ov§ec_öãrÁ˚_cﬁ_mac
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_MAC
])

	)

537 
	#ov§ec_öãrÁ˚_cﬁ_mtu
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_MTU
])

	)

538 
	#ov§ec_öãrÁ˚_cﬁ_cfm_mpid
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_CFM_MPID
])

	)

539 
	#ov§ec_öãrÁ˚_cﬁ_›ti⁄s
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_OPTIONS
])

	)

540 
	#ov§ec_öãrÁ˚_cﬁ_cfm_Áu…_°©us
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_CFM_FAULT_STATUS
])

	)

541 
	#ov§ec_öãrÁ˚_cﬁ_cfm_ªmŸe_mpids
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_CFM_REMOTE_MPIDS
])

	)

543 
ovsdb_idl_cﬁumn
 
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_N_COLUMNS
];

545 c⁄° 
ov§ec_öãrÁ˚
 *
ov§ec_öãrÁ˚_fú°
(c⁄° 
ovsdb_idl
 *);

546 c⁄° 
ov§ec_öãrÁ˚
 *
ov§ec_öãrÁ˚_√xt
(const ovsrec_interface *);

547 
	#OVSREC_INTERFACE_FOR_EACH
(
ROW
, 
IDL
) \

548 (
ROW
Ë
	`ov§ec_öãrÁ˚_fú°
(
IDL
); \

549 (
ROW
); \

550 (
ROW
Ë
	`ov§ec_öãrÁ˚_√xt
(ROW))

	)

551 
	#OVSREC_INTERFACE_FOR_EACH_SAFE
(
ROW
, 
NEXT
, 
IDL
) \

552 (
ROW
Ë
	`ov§ec_öãrÁ˚_fú°
(
IDL
); \

553 (
ROW
Ë? ((
NEXT
Ë
	`ov§ec_öãrÁ˚_√xt
(ROW), 1) : 0; \

554 (
ROW
Ë(
NEXT
))

	)

556 
ov§ec_öãrÁ˚_öô
(
ov§ec_öãrÁ˚
 *);

557 
ov§ec_öãrÁ˚_dñëe
(c⁄° 
ov§ec_öãrÁ˚
 *);

558 
ov§ec_öãrÁ˚
 *
ov§ec_öãrÁ˚_ö£π
(
ovsdb_idl_txn
 *);

560 
ov§ec_öãrÁ˚_vîify_admö_°©e
(c⁄° 
ov§ec_öãrÁ˚
 *);

561 
ov§ec_öãrÁ˚_vîify_cfm_Áu…
(c⁄° 
ov§ec_öãrÁ˚
 *);

562 
ov§ec_öãrÁ˚_vîify_cfm_Áu…_°©us
(c⁄° 
ov§ec_öãrÁ˚
 *);

563 
ov§ec_öãrÁ˚_vîify_cfm_hó…h
(c⁄° 
ov§ec_öãrÁ˚
 *);

564 
ov§ec_öãrÁ˚_vîify_cfm_mpid
(c⁄° 
ov§ec_öãrÁ˚
 *);

565 
ov§ec_öãrÁ˚_vîify_cfm_ªmŸe_mpids
(c⁄° 
ov§ec_öãrÁ˚
 *);

566 
ov§ec_öãrÁ˚_vîify_cfm_ªmŸe_›°©e
(c⁄° 
ov§ec_öãrÁ˚
 *);

567 
ov§ec_öãrÁ˚_vîify_du∂ex
(c⁄° 
ov§ec_öãrÁ˚
 *);

568 
ov§ec_öãrÁ˚_vîify_exã∫Æ_ids
(c⁄° 
ov§ec_öãrÁ˚
 *);

569 
ov§ec_öãrÁ˚_vîify_ögªss_pﬁicög_bur°
(c⁄° 
ov§ec_öãrÁ˚
 *);

570 
ov§ec_öãrÁ˚_vîify_ögªss_pﬁicög_øã
(c⁄° 
ov§ec_öãrÁ˚
 *);

571 
ov§ec_öãrÁ˚_vîify_œ˝_cuºít
(c⁄° 
ov§ec_öãrÁ˚
 *);

572 
ov§ec_öãrÁ˚_vîify_lök_ª£ts
(c⁄° 
ov§ec_öãrÁ˚
 *);

573 
ov§ec_öãrÁ˚_vîify_lök_•ìd
(c⁄° 
ov§ec_öãrÁ˚
 *);

574 
ov§ec_öãrÁ˚_vîify_lök_°©e
(c⁄° 
ov§ec_öãrÁ˚
 *);

575 
ov§ec_öãrÁ˚_vîify_mac
(c⁄° 
ov§ec_öãrÁ˚
 *);

576 
ov§ec_öãrÁ˚_vîify_mtu
(c⁄° 
ov§ec_öãrÁ˚
 *);

577 
ov§ec_öãrÁ˚_vîify_«me
(c⁄° 
ov§ec_öãrÁ˚
 *);

578 
ov§ec_öãrÁ˚_vîify_oÂ‹t
(c⁄° 
ov§ec_öãrÁ˚
 *);

579 
ov§ec_öãrÁ˚_vîify_›ti⁄s
(c⁄° 
ov§ec_öãrÁ˚
 *);

580 
ov§ec_öãrÁ˚_vîify_Ÿhî_c⁄fig
(c⁄° 
ov§ec_öãrÁ˚
 *);

581 
ov§ec_öãrÁ˚_vîify_°©i°ics
(c⁄° 
ov§ec_öãrÁ˚
 *);

582 
ov§ec_öãrÁ˚_vîify_°©us
(c⁄° 
ov§ec_öãrÁ˚
 *);

583 
ov§ec_öãrÁ˚_vîify_ty≥
(c⁄° 
ov§ec_öãrÁ˚
 *);

588 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_admö_°©e
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

589 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_cfm_Áu…
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

590 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_cfm_Áu…_°©us
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

591 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_cfm_hó…h
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

592 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_cfm_mpid
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

593 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_cfm_ªmŸe_mpids
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

594 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_cfm_ªmŸe_›°©e
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

595 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_du∂ex
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

596 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_exã∫Æ_ids
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

597 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_ögªss_pﬁicög_bur°
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

598 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_ögªss_pﬁicög_øã
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

599 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_œ˝_cuºít
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

600 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_lök_ª£ts
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

601 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_lök_•ìd
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

602 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_lök_°©e
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

603 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_mac
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

604 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_mtu
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

605 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_«me
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

606 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_oÂ‹t
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

607 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_›ti⁄s
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

608 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_Ÿhî_c⁄fig
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

609 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_°©i°ics
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

610 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_°©us
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

611 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_ty≥
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

613 
ov§ec_öãrÁ˚_£t_admö_°©e
(c⁄° 
ov§ec_öãrÁ˚
 *, c⁄° *
admö_°©e
);

614 
ov§ec_öãrÁ˚_£t_cfm_Áu…
(c⁄° 
ov§ec_öãrÁ˚
 *, c⁄° 
boﬁ
 *
cfm_Áu…
, 
size_t
 
n_cfm_Áu…
);

615 
ov§ec_öãrÁ˚_£t_cfm_Áu…_°©us
(c⁄° 
ov§ec_öãrÁ˚
 *, **
cfm_Áu…_°©us
, 
size_t
 
n_cfm_Áu…_°©us
);

616 
ov§ec_öãrÁ˚_£t_cfm_hó…h
(c⁄° 
ov§ec_öãrÁ˚
 *, c⁄° 
öt64_t
 *
cfm_hó…h
, 
size_t
 
n_cfm_hó…h
);

617 
ov§ec_öãrÁ˚_£t_cfm_mpid
(c⁄° 
ov§ec_öãrÁ˚
 *, c⁄° 
öt64_t
 *
cfm_mpid
, 
size_t
 
n_cfm_mpid
);

618 
ov§ec_öãrÁ˚_£t_cfm_ªmŸe_mpids
(c⁄° 
ov§ec_öãrÁ˚
 *, c⁄° 
öt64_t
 *
cfm_ªmŸe_mpids
, 
size_t
 
n_cfm_ªmŸe_mpids
);

619 
ov§ec_öãrÁ˚_£t_cfm_ªmŸe_›°©e
(c⁄° 
ov§ec_öãrÁ˚
 *, c⁄° *
cfm_ªmŸe_›°©e
);

620 
ov§ec_öãrÁ˚_£t_du∂ex
(c⁄° 
ov§ec_öãrÁ˚
 *, c⁄° *
du∂ex
);

621 
ov§ec_öãrÁ˚_£t_exã∫Æ_ids
(c⁄° 
ov§ec_öãrÁ˚
 *, c⁄° 
sm≠
 *);

622 
ov§ec_öãrÁ˚_£t_ögªss_pﬁicög_bur°
(c⁄° 
ov§ec_öãrÁ˚
 *, 
öt64_t
 
ögªss_pﬁicög_bur°
);

623 
ov§ec_öãrÁ˚_£t_ögªss_pﬁicög_øã
(c⁄° 
ov§ec_öãrÁ˚
 *, 
öt64_t
 
ögªss_pﬁicög_øã
);

624 
ov§ec_öãrÁ˚_£t_œ˝_cuºít
(c⁄° 
ov§ec_öãrÁ˚
 *, c⁄° 
boﬁ
 *
œ˝_cuºít
, 
size_t
 
n_œ˝_cuºít
);

625 
ov§ec_öãrÁ˚_£t_lök_ª£ts
(c⁄° 
ov§ec_öãrÁ˚
 *, c⁄° 
öt64_t
 *
lök_ª£ts
, 
size_t
 
n_lök_ª£ts
);

626 
ov§ec_öãrÁ˚_£t_lök_•ìd
(c⁄° 
ov§ec_öãrÁ˚
 *, c⁄° 
öt64_t
 *
lök_•ìd
, 
size_t
 
n_lök_•ìd
);

627 
ov§ec_öãrÁ˚_£t_lök_°©e
(c⁄° 
ov§ec_öãrÁ˚
 *, c⁄° *
lök_°©e
);

628 
ov§ec_öãrÁ˚_£t_mac
(c⁄° 
ov§ec_öãrÁ˚
 *, c⁄° *
mac
);

629 
ov§ec_öãrÁ˚_£t_mtu
(c⁄° 
ov§ec_öãrÁ˚
 *, c⁄° 
öt64_t
 *
mtu
, 
size_t
 
n_mtu
);

630 
ov§ec_öãrÁ˚_£t_«me
(c⁄° 
ov§ec_öãrÁ˚
 *, c⁄° *
«me
);

631 
ov§ec_öãrÁ˚_£t_oÂ‹t
(c⁄° 
ov§ec_öãrÁ˚
 *, c⁄° 
öt64_t
 *
oÂ‹t
, 
size_t
 
n_oÂ‹t
);

632 
ov§ec_öãrÁ˚_£t_›ti⁄s
(c⁄° 
ov§ec_öãrÁ˚
 *, c⁄° 
sm≠
 *);

633 
ov§ec_öãrÁ˚_£t_Ÿhî_c⁄fig
(c⁄° 
ov§ec_öãrÁ˚
 *, c⁄° 
sm≠
 *);

634 
ov§ec_öãrÁ˚_£t_°©i°ics
(c⁄° 
ov§ec_öãrÁ˚
 *, **
key_°©i°ics
, c⁄° 
öt64_t
 *
vÆue_°©i°ics
, 
size_t
 
n_°©i°ics
);

635 
ov§ec_öãrÁ˚_£t_°©us
(c⁄° 
ov§ec_öãrÁ˚
 *, c⁄° 
sm≠
 *);

636 
ov§ec_öãrÁ˚_£t_ty≥
(c⁄° 
ov§ec_öãrÁ˚
 *, c⁄° *
ty≥
);

640 
	sov§ec_m™agî
 {

641 
ovsdb_idl_row
 
	mhódî_
;

644 *
	mc⁄√˘i⁄_mode
;

647 
sm≠
 
	mexã∫Æ_ids
;

650 
öt64_t
 *
	möa˘ivôy_¥obe
;

651 
size_t
 
	mn_öa˘ivôy_¥obe
;

654 
boﬁ
 
	mis_c⁄√˘ed
;

657 
öt64_t
 *
	mmax_backoff
;

658 
size_t
 
	mn_max_backoff
;

661 
sm≠
 
	mŸhî_c⁄fig
;

664 
sm≠
 
	m°©us
;

667 *
	mèrgë
;

671 
	mOVSREC_MANAGER_COL_CONNECTION_MODE
,

672 
	mOVSREC_MANAGER_COL_EXTERNAL_IDS
,

673 
	mOVSREC_MANAGER_COL_INACTIVITY_PROBE
,

674 
	mOVSREC_MANAGER_COL_IS_CONNECTED
,

675 
	mOVSREC_MANAGER_COL_MAX_BACKOFF
,

676 
	mOVSREC_MANAGER_COL_OTHER_CONFIG
,

677 
	mOVSREC_MANAGER_COL_STATUS
,

678 
	mOVSREC_MANAGER_COL_TARGET
,

679 
	mOVSREC_MANAGER_N_COLUMNS


682 
	#ov§ec_m™agî_cﬁ_max_backoff
 (
ov§ec_m™agî_cﬁumns
[
OVSREC_MANAGER_COL_MAX_BACKOFF
])

	)

683 
	#ov§ec_m™agî_cﬁ_°©us
 (
ov§ec_m™agî_cﬁumns
[
OVSREC_MANAGER_COL_STATUS
])

	)

684 
	#ov§ec_m™agî_cﬁ_èrgë
 (
ov§ec_m™agî_cﬁumns
[
OVSREC_MANAGER_COL_TARGET
])

	)

685 
	#ov§ec_m™agî_cﬁ_c⁄√˘i⁄_mode
 (
ov§ec_m™agî_cﬁumns
[
OVSREC_MANAGER_COL_CONNECTION_MODE
])

	)

686 
	#ov§ec_m™agî_cﬁ_Ÿhî_c⁄fig
 (
ov§ec_m™agî_cﬁumns
[
OVSREC_MANAGER_COL_OTHER_CONFIG
])

	)

687 
	#ov§ec_m™agî_cﬁ_öa˘ivôy_¥obe
 (
ov§ec_m™agî_cﬁumns
[
OVSREC_MANAGER_COL_INACTIVITY_PROBE
])

	)

688 
	#ov§ec_m™agî_cﬁ_exã∫Æ_ids
 (
ov§ec_m™agî_cﬁumns
[
OVSREC_MANAGER_COL_EXTERNAL_IDS
])

	)

689 
	#ov§ec_m™agî_cﬁ_is_c⁄√˘ed
 (
ov§ec_m™agî_cﬁumns
[
OVSREC_MANAGER_COL_IS_CONNECTED
])

	)

691 
ovsdb_idl_cﬁumn
 
ov§ec_m™agî_cﬁumns
[
OVSREC_MANAGER_N_COLUMNS
];

693 c⁄° 
ov§ec_m™agî
 *
ov§ec_m™agî_fú°
(c⁄° 
ovsdb_idl
 *);

694 c⁄° 
ov§ec_m™agî
 *
ov§ec_m™agî_√xt
(const ovsrec_manager *);

695 
	#OVSREC_MANAGER_FOR_EACH
(
ROW
, 
IDL
) \

696 (
ROW
Ë
	`ov§ec_m™agî_fú°
(
IDL
); \

697 (
ROW
); \

698 (
ROW
Ë
	`ov§ec_m™agî_√xt
(ROW))

	)

699 
	#OVSREC_MANAGER_FOR_EACH_SAFE
(
ROW
, 
NEXT
, 
IDL
) \

700 (
ROW
Ë
	`ov§ec_m™agî_fú°
(
IDL
); \

701 (
ROW
Ë? ((
NEXT
Ë
	`ov§ec_m™agî_√xt
(ROW), 1) : 0; \

702 (
ROW
Ë(
NEXT
))

	)

704 
ov§ec_m™agî_öô
(
ov§ec_m™agî
 *);

705 
ov§ec_m™agî_dñëe
(c⁄° 
ov§ec_m™agî
 *);

706 
ov§ec_m™agî
 *
ov§ec_m™agî_ö£π
(
ovsdb_idl_txn
 *);

708 
ov§ec_m™agî_vîify_c⁄√˘i⁄_mode
(c⁄° 
ov§ec_m™agî
 *);

709 
ov§ec_m™agî_vîify_exã∫Æ_ids
(c⁄° 
ov§ec_m™agî
 *);

710 
ov§ec_m™agî_vîify_öa˘ivôy_¥obe
(c⁄° 
ov§ec_m™agî
 *);

711 
ov§ec_m™agî_vîify_is_c⁄√˘ed
(c⁄° 
ov§ec_m™agî
 *);

712 
ov§ec_m™agî_vîify_max_backoff
(c⁄° 
ov§ec_m™agî
 *);

713 
ov§ec_m™agî_vîify_Ÿhî_c⁄fig
(c⁄° 
ov§ec_m™agî
 *);

714 
ov§ec_m™agî_vîify_°©us
(c⁄° 
ov§ec_m™agî
 *);

715 
ov§ec_m™agî_vîify_èrgë
(c⁄° 
ov§ec_m™agî
 *);

720 c⁄° 
ovsdb_d©um
 *
ov§ec_m™agî_gë_c⁄√˘i⁄_mode
(c⁄° 
ov§ec_m™agî
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

721 c⁄° 
ovsdb_d©um
 *
ov§ec_m™agî_gë_exã∫Æ_ids
(c⁄° 
ov§ec_m™agî
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

722 c⁄° 
ovsdb_d©um
 *
ov§ec_m™agî_gë_öa˘ivôy_¥obe
(c⁄° 
ov§ec_m™agî
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

723 c⁄° 
ovsdb_d©um
 *
ov§ec_m™agî_gë_is_c⁄√˘ed
(c⁄° 
ov§ec_m™agî
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

724 c⁄° 
ovsdb_d©um
 *
ov§ec_m™agî_gë_max_backoff
(c⁄° 
ov§ec_m™agî
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

725 c⁄° 
ovsdb_d©um
 *
ov§ec_m™agî_gë_Ÿhî_c⁄fig
(c⁄° 
ov§ec_m™agî
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

726 c⁄° 
ovsdb_d©um
 *
ov§ec_m™agî_gë_°©us
(c⁄° 
ov§ec_m™agî
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

727 c⁄° 
ovsdb_d©um
 *
ov§ec_m™agî_gë_èrgë
(c⁄° 
ov§ec_m™agî
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

729 
ov§ec_m™agî_£t_c⁄√˘i⁄_mode
(c⁄° 
ov§ec_m™agî
 *, c⁄° *
c⁄√˘i⁄_mode
);

730 
ov§ec_m™agî_£t_exã∫Æ_ids
(c⁄° 
ov§ec_m™agî
 *, c⁄° 
sm≠
 *);

731 
ov§ec_m™agî_£t_öa˘ivôy_¥obe
(c⁄° 
ov§ec_m™agî
 *, c⁄° 
öt64_t
 *
öa˘ivôy_¥obe
, 
size_t
 
n_öa˘ivôy_¥obe
);

732 
ov§ec_m™agî_£t_is_c⁄√˘ed
(c⁄° 
ov§ec_m™agî
 *, 
boﬁ
 
is_c⁄√˘ed
);

733 
ov§ec_m™agî_£t_max_backoff
(c⁄° 
ov§ec_m™agî
 *, c⁄° 
öt64_t
 *
max_backoff
, 
size_t
 
n_max_backoff
);

734 
ov§ec_m™agî_£t_Ÿhî_c⁄fig
(c⁄° 
ov§ec_m™agî
 *, c⁄° 
sm≠
 *);

735 
ov§ec_m™agî_£t_°©us
(c⁄° 
ov§ec_m™agî
 *, c⁄° 
sm≠
 *);

736 
ov§ec_m™agî_£t_èrgë
(c⁄° 
ov§ec_m™agî
 *, c⁄° *
èrgë
);

740 
	sov§ec_múr‹
 {

741 
ovsdb_idl_row
 
	mhódî_
;

744 
sm≠
 
	mexã∫Æ_ids
;

747 *
	m«me
;

750 
ov§ec_p‹t
 *
	mouçut_p‹t
;

753 
öt64_t
 *
	mouçut_vœn
;

754 
size_t
 
	mn_ouçut_vœn
;

757 
boﬁ
 
	m£À˘_Æl
;

760 
ov§ec_p‹t
 **
	m£À˘_d°_p‹t
;

761 
size_t
 
	mn_£À˘_d°_p‹t
;

764 
ov§ec_p‹t
 **
	m£À˘_§c_p‹t
;

765 
size_t
 
	mn_£À˘_§c_p‹t
;

768 
öt64_t
 *
	m£À˘_vœn
;

769 
size_t
 
	mn_£À˘_vœn
;

772 **
	mkey_°©i°ics
;

773 
öt64_t
 *
	mvÆue_°©i°ics
;

774 
size_t
 
	mn_°©i°ics
;

778 
	mOVSREC_MIRROR_COL_EXTERNAL_IDS
,

779 
	mOVSREC_MIRROR_COL_NAME
,

780 
	mOVSREC_MIRROR_COL_OUTPUT_PORT
,

781 
	mOVSREC_MIRROR_COL_OUTPUT_VLAN
,

782 
	mOVSREC_MIRROR_COL_SELECT_ALL
,

783 
	mOVSREC_MIRROR_COL_SELECT_DST_PORT
,

784 
	mOVSREC_MIRROR_COL_SELECT_SRC_PORT
,

785 
	mOVSREC_MIRROR_COL_SELECT_VLAN
,

786 
	mOVSREC_MIRROR_COL_STATISTICS
,

787 
	mOVSREC_MIRROR_N_COLUMNS


790 
	#ov§ec_múr‹_cﬁ_ouçut_p‹t
 (
ov§ec_múr‹_cﬁumns
[
OVSREC_MIRROR_COL_OUTPUT_PORT
])

	)

791 
	#ov§ec_múr‹_cﬁ_£À˘_§c_p‹t
 (
ov§ec_múr‹_cﬁumns
[
OVSREC_MIRROR_COL_SELECT_SRC_PORT
])

	)

792 
	#ov§ec_múr‹_cﬁ_°©i°ics
 (
ov§ec_múr‹_cﬁumns
[
OVSREC_MIRROR_COL_STATISTICS
])

	)

793 
	#ov§ec_múr‹_cﬁ_«me
 (
ov§ec_múr‹_cﬁumns
[
OVSREC_MIRROR_COL_NAME
])

	)

794 
	#ov§ec_múr‹_cﬁ_£À˘_Æl
 (
ov§ec_múr‹_cﬁumns
[
OVSREC_MIRROR_COL_SELECT_ALL
])

	)

795 
	#ov§ec_múr‹_cﬁ_£À˘_d°_p‹t
 (
ov§ec_múr‹_cﬁumns
[
OVSREC_MIRROR_COL_SELECT_DST_PORT
])

	)

796 
	#ov§ec_múr‹_cﬁ_exã∫Æ_ids
 (
ov§ec_múr‹_cﬁumns
[
OVSREC_MIRROR_COL_EXTERNAL_IDS
])

	)

797 
	#ov§ec_múr‹_cﬁ_ouçut_vœn
 (
ov§ec_múr‹_cﬁumns
[
OVSREC_MIRROR_COL_OUTPUT_VLAN
])

	)

798 
	#ov§ec_múr‹_cﬁ_£À˘_vœn
 (
ov§ec_múr‹_cﬁumns
[
OVSREC_MIRROR_COL_SELECT_VLAN
])

	)

800 
ovsdb_idl_cﬁumn
 
ov§ec_múr‹_cﬁumns
[
OVSREC_MIRROR_N_COLUMNS
];

802 c⁄° 
ov§ec_múr‹
 *
ov§ec_múr‹_fú°
(c⁄° 
ovsdb_idl
 *);

803 c⁄° 
ov§ec_múr‹
 *
ov§ec_múr‹_√xt
(const ovsrec_mirror *);

804 
	#OVSREC_MIRROR_FOR_EACH
(
ROW
, 
IDL
) \

805 (
ROW
Ë
	`ov§ec_múr‹_fú°
(
IDL
); \

806 (
ROW
); \

807 (
ROW
Ë
	`ov§ec_múr‹_√xt
(ROW))

	)

808 
	#OVSREC_MIRROR_FOR_EACH_SAFE
(
ROW
, 
NEXT
, 
IDL
) \

809 (
ROW
Ë
	`ov§ec_múr‹_fú°
(
IDL
); \

810 (
ROW
Ë? ((
NEXT
Ë
	`ov§ec_múr‹_√xt
(ROW), 1) : 0; \

811 (
ROW
Ë(
NEXT
))

	)

813 
ov§ec_múr‹_öô
(
ov§ec_múr‹
 *);

814 
ov§ec_múr‹_dñëe
(c⁄° 
ov§ec_múr‹
 *);

815 
ov§ec_múr‹
 *
ov§ec_múr‹_ö£π
(
ovsdb_idl_txn
 *);

817 
ov§ec_múr‹_vîify_exã∫Æ_ids
(c⁄° 
ov§ec_múr‹
 *);

818 
ov§ec_múr‹_vîify_«me
(c⁄° 
ov§ec_múr‹
 *);

819 
ov§ec_múr‹_vîify_ouçut_p‹t
(c⁄° 
ov§ec_múr‹
 *);

820 
ov§ec_múr‹_vîify_ouçut_vœn
(c⁄° 
ov§ec_múr‹
 *);

821 
ov§ec_múr‹_vîify_£À˘_Æl
(c⁄° 
ov§ec_múr‹
 *);

822 
ov§ec_múr‹_vîify_£À˘_d°_p‹t
(c⁄° 
ov§ec_múr‹
 *);

823 
ov§ec_múr‹_vîify_£À˘_§c_p‹t
(c⁄° 
ov§ec_múr‹
 *);

824 
ov§ec_múr‹_vîify_£À˘_vœn
(c⁄° 
ov§ec_múr‹
 *);

825 
ov§ec_múr‹_vîify_°©i°ics
(c⁄° 
ov§ec_múr‹
 *);

830 c⁄° 
ovsdb_d©um
 *
ov§ec_múr‹_gë_exã∫Æ_ids
(c⁄° 
ov§ec_múr‹
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

831 c⁄° 
ovsdb_d©um
 *
ov§ec_múr‹_gë_«me
(c⁄° 
ov§ec_múr‹
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

832 c⁄° 
ovsdb_d©um
 *
ov§ec_múr‹_gë_ouçut_p‹t
(c⁄° 
ov§ec_múr‹
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

833 c⁄° 
ovsdb_d©um
 *
ov§ec_múr‹_gë_ouçut_vœn
(c⁄° 
ov§ec_múr‹
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

834 c⁄° 
ovsdb_d©um
 *
ov§ec_múr‹_gë_£À˘_Æl
(c⁄° 
ov§ec_múr‹
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

835 c⁄° 
ovsdb_d©um
 *
ov§ec_múr‹_gë_£À˘_d°_p‹t
(c⁄° 
ov§ec_múr‹
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

836 c⁄° 
ovsdb_d©um
 *
ov§ec_múr‹_gë_£À˘_§c_p‹t
(c⁄° 
ov§ec_múr‹
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

837 c⁄° 
ovsdb_d©um
 *
ov§ec_múr‹_gë_£À˘_vœn
(c⁄° 
ov§ec_múr‹
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

838 c⁄° 
ovsdb_d©um
 *
ov§ec_múr‹_gë_°©i°ics
(c⁄° 
ov§ec_múr‹
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

840 
ov§ec_múr‹_£t_exã∫Æ_ids
(c⁄° 
ov§ec_múr‹
 *, c⁄° 
sm≠
 *);

841 
ov§ec_múr‹_£t_«me
(c⁄° 
ov§ec_múr‹
 *, c⁄° *
«me
);

842 
ov§ec_múr‹_£t_ouçut_p‹t
(c⁄° 
ov§ec_múr‹
 *, c⁄° 
ov§ec_p‹t
 *
ouçut_p‹t
);

843 
ov§ec_múr‹_£t_ouçut_vœn
(c⁄° 
ov§ec_múr‹
 *, c⁄° 
öt64_t
 *
ouçut_vœn
, 
size_t
 
n_ouçut_vœn
);

844 
ov§ec_múr‹_£t_£À˘_Æl
(c⁄° 
ov§ec_múr‹
 *, 
boﬁ
 
£À˘_Æl
);

845 
ov§ec_múr‹_£t_£À˘_d°_p‹t
(c⁄° 
ov§ec_múr‹
 *, 
ov§ec_p‹t
 **
£À˘_d°_p‹t
, 
size_t
 
n_£À˘_d°_p‹t
);

846 
ov§ec_múr‹_£t_£À˘_§c_p‹t
(c⁄° 
ov§ec_múr‹
 *, 
ov§ec_p‹t
 **
£À˘_§c_p‹t
, 
size_t
 
n_£À˘_§c_p‹t
);

847 
ov§ec_múr‹_£t_£À˘_vœn
(c⁄° 
ov§ec_múr‹
 *, c⁄° 
öt64_t
 *
£À˘_vœn
, 
size_t
 
n_£À˘_vœn
);

848 
ov§ec_múr‹_£t_°©i°ics
(c⁄° 
ov§ec_múr‹
 *, **
key_°©i°ics
, c⁄° 
öt64_t
 *
vÆue_°©i°ics
, 
size_t
 
n_°©i°ics
);

852 
	sov§ec_√tÊow
 {

853 
ovsdb_idl_row
 
	mhódî_
;

856 
öt64_t
 
	ma˘ive_timeout
;

859 
boﬁ
 
	madd_id_to_öãrÁ˚
;

862 
öt64_t
 *
	mígöe_id
;

863 
size_t
 
	mn_ígöe_id
;

866 
öt64_t
 *
	mígöe_ty≥
;

867 
size_t
 
	mn_ígöe_ty≥
;

870 
sm≠
 
	mexã∫Æ_ids
;

873 **
	mèrgës
;

874 
size_t
 
	mn_èrgës
;

878 
	mOVSREC_NETFLOW_COL_ACTIVE_TIMEOUT
,

879 
	mOVSREC_NETFLOW_COL_ADD_ID_TO_INTERFACE
,

880 
	mOVSREC_NETFLOW_COL_ENGINE_ID
,

881 
	mOVSREC_NETFLOW_COL_ENGINE_TYPE
,

882 
	mOVSREC_NETFLOW_COL_EXTERNAL_IDS
,

883 
	mOVSREC_NETFLOW_COL_TARGETS
,

884 
	mOVSREC_NETFLOW_N_COLUMNS


887 
	#ov§ec_√tÊow_cﬁ_ígöe_id
 (
ov§ec_√tÊow_cﬁumns
[
OVSREC_NETFLOW_COL_ENGINE_ID
])

	)

888 
	#ov§ec_√tÊow_cﬁ_a˘ive_timeout
 (
ov§ec_√tÊow_cﬁumns
[
OVSREC_NETFLOW_COL_ACTIVE_TIMEOUT
])

	)

889 
	#ov§ec_√tÊow_cﬁ_add_id_to_öãrÁ˚
 (
ov§ec_√tÊow_cﬁumns
[
OVSREC_NETFLOW_COL_ADD_ID_TO_INTERFACE
])

	)

890 
	#ov§ec_√tÊow_cﬁ_exã∫Æ_ids
 (
ov§ec_√tÊow_cﬁumns
[
OVSREC_NETFLOW_COL_EXTERNAL_IDS
])

	)

891 
	#ov§ec_√tÊow_cﬁ_èrgës
 (
ov§ec_√tÊow_cﬁumns
[
OVSREC_NETFLOW_COL_TARGETS
])

	)

892 
	#ov§ec_√tÊow_cﬁ_ígöe_ty≥
 (
ov§ec_√tÊow_cﬁumns
[
OVSREC_NETFLOW_COL_ENGINE_TYPE
])

	)

894 
ovsdb_idl_cﬁumn
 
ov§ec_√tÊow_cﬁumns
[
OVSREC_NETFLOW_N_COLUMNS
];

896 c⁄° 
ov§ec_√tÊow
 *
ov§ec_√tÊow_fú°
(c⁄° 
ovsdb_idl
 *);

897 c⁄° 
ov§ec_√tÊow
 *
ov§ec_√tÊow_√xt
(const ovsrec_netflow *);

898 
	#OVSREC_NETFLOW_FOR_EACH
(
ROW
, 
IDL
) \

899 (
ROW
Ë
	`ov§ec_√tÊow_fú°
(
IDL
); \

900 (
ROW
); \

901 (
ROW
Ë
	`ov§ec_√tÊow_√xt
(ROW))

	)

902 
	#OVSREC_NETFLOW_FOR_EACH_SAFE
(
ROW
, 
NEXT
, 
IDL
) \

903 (
ROW
Ë
	`ov§ec_√tÊow_fú°
(
IDL
); \

904 (
ROW
Ë? ((
NEXT
Ë
	`ov§ec_√tÊow_√xt
(ROW), 1) : 0; \

905 (
ROW
Ë(
NEXT
))

	)

907 
ov§ec_√tÊow_öô
(
ov§ec_√tÊow
 *);

908 
ov§ec_√tÊow_dñëe
(c⁄° 
ov§ec_√tÊow
 *);

909 
ov§ec_√tÊow
 *
ov§ec_√tÊow_ö£π
(
ovsdb_idl_txn
 *);

911 
ov§ec_√tÊow_vîify_a˘ive_timeout
(c⁄° 
ov§ec_√tÊow
 *);

912 
ov§ec_√tÊow_vîify_add_id_to_öãrÁ˚
(c⁄° 
ov§ec_√tÊow
 *);

913 
ov§ec_√tÊow_vîify_ígöe_id
(c⁄° 
ov§ec_√tÊow
 *);

914 
ov§ec_√tÊow_vîify_ígöe_ty≥
(c⁄° 
ov§ec_√tÊow
 *);

915 
ov§ec_√tÊow_vîify_exã∫Æ_ids
(c⁄° 
ov§ec_√tÊow
 *);

916 
ov§ec_√tÊow_vîify_èrgës
(c⁄° 
ov§ec_√tÊow
 *);

921 c⁄° 
ovsdb_d©um
 *
ov§ec_√tÊow_gë_a˘ive_timeout
(c⁄° 
ov§ec_√tÊow
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

922 c⁄° 
ovsdb_d©um
 *
ov§ec_√tÊow_gë_add_id_to_öãrÁ˚
(c⁄° 
ov§ec_√tÊow
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

923 c⁄° 
ovsdb_d©um
 *
ov§ec_√tÊow_gë_ígöe_id
(c⁄° 
ov§ec_√tÊow
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

924 c⁄° 
ovsdb_d©um
 *
ov§ec_√tÊow_gë_ígöe_ty≥
(c⁄° 
ov§ec_√tÊow
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

925 c⁄° 
ovsdb_d©um
 *
ov§ec_√tÊow_gë_exã∫Æ_ids
(c⁄° 
ov§ec_√tÊow
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

926 c⁄° 
ovsdb_d©um
 *
ov§ec_√tÊow_gë_èrgës
(c⁄° 
ov§ec_√tÊow
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

928 
ov§ec_√tÊow_£t_a˘ive_timeout
(c⁄° 
ov§ec_√tÊow
 *, 
öt64_t
 
a˘ive_timeout
);

929 
ov§ec_√tÊow_£t_add_id_to_öãrÁ˚
(c⁄° 
ov§ec_√tÊow
 *, 
boﬁ
 
add_id_to_öãrÁ˚
);

930 
ov§ec_√tÊow_£t_ígöe_id
(c⁄° 
ov§ec_√tÊow
 *, c⁄° 
öt64_t
 *
ígöe_id
, 
size_t
 
n_ígöe_id
);

931 
ov§ec_√tÊow_£t_ígöe_ty≥
(c⁄° 
ov§ec_√tÊow
 *, c⁄° 
öt64_t
 *
ígöe_ty≥
, 
size_t
 
n_ígöe_ty≥
);

932 
ov§ec_√tÊow_£t_exã∫Æ_ids
(c⁄° 
ov§ec_√tÊow
 *, c⁄° 
sm≠
 *);

933 
ov§ec_√tÊow_£t_èrgës
(c⁄° 
ov§ec_√tÊow
 *, **
èrgës
, 
size_t
 
n_èrgës
);

937 
	sov§ec_›í_vswôch
 {

938 
ovsdb_idl_row
 
	mhódî_
;

941 
ov§ec_bridge
 **
	mbridges
;

942 
size_t
 
	mn_bridges
;

945 
öt64_t
 
	mcur_cfg
;

948 *
	mdb_vîsi⁄
;

951 
sm≠
 
	mexã∫Æ_ids
;

954 
ov§ec_m™agî
 **
	mm™agî_›ti⁄s
;

955 
size_t
 
	mn_m™agî_›ti⁄s
;

958 
öt64_t
 
	m√xt_cfg
;

961 
sm≠
 
	mŸhî_c⁄fig
;

964 *
	movs_vîsi⁄
;

967 
ov§ec_s¶
 *
	ms¶
;

970 
sm≠
 
	m°©i°ics
;

973 *
	msy°em_ty≥
;

976 *
	msy°em_vîsi⁄
;

980 
	mOVSREC_OPEN_VSWITCH_COL_BRIDGES
,

981 
	mOVSREC_OPEN_VSWITCH_COL_CUR_CFG
,

982 
	mOVSREC_OPEN_VSWITCH_COL_DB_VERSION
,

983 
	mOVSREC_OPEN_VSWITCH_COL_EXTERNAL_IDS
,

984 
	mOVSREC_OPEN_VSWITCH_COL_MANAGER_OPTIONS
,

985 
	mOVSREC_OPEN_VSWITCH_COL_NEXT_CFG
,

986 
	mOVSREC_OPEN_VSWITCH_COL_OTHER_CONFIG
,

987 
	mOVSREC_OPEN_VSWITCH_COL_OVS_VERSION
,

988 
	mOVSREC_OPEN_VSWITCH_COL_SSL
,

989 
	mOVSREC_OPEN_VSWITCH_COL_STATISTICS
,

990 
	mOVSREC_OPEN_VSWITCH_COL_SYSTEM_TYPE
,

991 
	mOVSREC_OPEN_VSWITCH_COL_SYSTEM_VERSION
,

992 
	mOVSREC_OPEN_VSWITCH_N_COLUMNS


995 
	#ov§ec_›í_vswôch_cﬁ_bridges
 (
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_BRIDGES
])

	)

996 
	#ov§ec_›í_vswôch_cﬁ_°©i°ics
 (
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_STATISTICS
])

	)

997 
	#ov§ec_›í_vswôch_cﬁ_db_vîsi⁄
 (
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_DB_VERSION
])

	)

998 
	#ov§ec_›í_vswôch_cﬁ_√xt_cfg
 (
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_NEXT_CFG
])

	)

999 
	#ov§ec_›í_vswôch_cﬁ_ovs_vîsi⁄
 (
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_OVS_VERSION
])

	)

1000 
	#ov§ec_›í_vswôch_cﬁ_Ÿhî_c⁄fig
 (
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_OTHER_CONFIG
])

	)

1001 
	#ov§ec_›í_vswôch_cﬁ_s¶
 (
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_SSL
])

	)

1002 
	#ov§ec_›í_vswôch_cﬁ_m™agî_›ti⁄s
 (
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_MANAGER_OPTIONS
])

	)

1003 
	#ov§ec_›í_vswôch_cﬁ_exã∫Æ_ids
 (
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_EXTERNAL_IDS
])

	)

1004 
	#ov§ec_›í_vswôch_cﬁ_sy°em_vîsi⁄
 (
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_SYSTEM_VERSION
])

	)

1005 
	#ov§ec_›í_vswôch_cﬁ_cur_cfg
 (
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_CUR_CFG
])

	)

1006 
	#ov§ec_›í_vswôch_cﬁ_sy°em_ty≥
 (
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_SYSTEM_TYPE
])

	)

1008 
ovsdb_idl_cﬁumn
 
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_N_COLUMNS
];

1010 c⁄° 
ov§ec_›í_vswôch
 *
ov§ec_›í_vswôch_fú°
(c⁄° 
ovsdb_idl
 *);

1011 c⁄° 
ov§ec_›í_vswôch
 *
ov§ec_›í_vswôch_√xt
(const ovsrec_open_vswitch *);

1012 
	#OVSREC_OPEN_VSWITCH_FOR_EACH
(
ROW
, 
IDL
) \

1013 (
ROW
Ë
	`ov§ec_›í_vswôch_fú°
(
IDL
); \

1014 (
ROW
); \

1015 (
ROW
Ë
	`ov§ec_›í_vswôch_√xt
(ROW))

	)

1016 
	#OVSREC_OPEN_VSWITCH_FOR_EACH_SAFE
(
ROW
, 
NEXT
, 
IDL
) \

1017 (
ROW
Ë
	`ov§ec_›í_vswôch_fú°
(
IDL
); \

1018 (
ROW
Ë? ((
NEXT
Ë
	`ov§ec_›í_vswôch_√xt
(ROW), 1) : 0; \

1019 (
ROW
Ë(
NEXT
))

	)

1021 
ov§ec_›í_vswôch_öô
(
ov§ec_›í_vswôch
 *);

1022 
ov§ec_›í_vswôch_dñëe
(c⁄° 
ov§ec_›í_vswôch
 *);

1023 
ov§ec_›í_vswôch
 *
ov§ec_›í_vswôch_ö£π
(
ovsdb_idl_txn
 *);

1025 
ov§ec_›í_vswôch_vîify_bridges
(c⁄° 
ov§ec_›í_vswôch
 *);

1026 
ov§ec_›í_vswôch_vîify_cur_cfg
(c⁄° 
ov§ec_›í_vswôch
 *);

1027 
ov§ec_›í_vswôch_vîify_db_vîsi⁄
(c⁄° 
ov§ec_›í_vswôch
 *);

1028 
ov§ec_›í_vswôch_vîify_exã∫Æ_ids
(c⁄° 
ov§ec_›í_vswôch
 *);

1029 
ov§ec_›í_vswôch_vîify_m™agî_›ti⁄s
(c⁄° 
ov§ec_›í_vswôch
 *);

1030 
ov§ec_›í_vswôch_vîify_√xt_cfg
(c⁄° 
ov§ec_›í_vswôch
 *);

1031 
ov§ec_›í_vswôch_vîify_Ÿhî_c⁄fig
(c⁄° 
ov§ec_›í_vswôch
 *);

1032 
ov§ec_›í_vswôch_vîify_ovs_vîsi⁄
(c⁄° 
ov§ec_›í_vswôch
 *);

1033 
ov§ec_›í_vswôch_vîify_s¶
(c⁄° 
ov§ec_›í_vswôch
 *);

1034 
ov§ec_›í_vswôch_vîify_°©i°ics
(c⁄° 
ov§ec_›í_vswôch
 *);

1035 
ov§ec_›í_vswôch_vîify_sy°em_ty≥
(c⁄° 
ov§ec_›í_vswôch
 *);

1036 
ov§ec_›í_vswôch_vîify_sy°em_vîsi⁄
(c⁄° 
ov§ec_›í_vswôch
 *);

1041 c⁄° 
ovsdb_d©um
 *
ov§ec_›í_vswôch_gë_bridges
(c⁄° 
ov§ec_›í_vswôch
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1042 c⁄° 
ovsdb_d©um
 *
ov§ec_›í_vswôch_gë_cur_cfg
(c⁄° 
ov§ec_›í_vswôch
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1043 c⁄° 
ovsdb_d©um
 *
ov§ec_›í_vswôch_gë_db_vîsi⁄
(c⁄° 
ov§ec_›í_vswôch
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1044 c⁄° 
ovsdb_d©um
 *
ov§ec_›í_vswôch_gë_exã∫Æ_ids
(c⁄° 
ov§ec_›í_vswôch
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

1045 c⁄° 
ovsdb_d©um
 *
ov§ec_›í_vswôch_gë_m™agî_›ti⁄s
(c⁄° 
ov§ec_›í_vswôch
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1046 c⁄° 
ovsdb_d©um
 *
ov§ec_›í_vswôch_gë_√xt_cfg
(c⁄° 
ov§ec_›í_vswôch
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1047 c⁄° 
ovsdb_d©um
 *
ov§ec_›í_vswôch_gë_Ÿhî_c⁄fig
(c⁄° 
ov§ec_›í_vswôch
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

1048 c⁄° 
ovsdb_d©um
 *
ov§ec_›í_vswôch_gë_ovs_vîsi⁄
(c⁄° 
ov§ec_›í_vswôch
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1049 c⁄° 
ovsdb_d©um
 *
ov§ec_›í_vswôch_gë_s¶
(c⁄° 
ov§ec_›í_vswôch
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1050 c⁄° 
ovsdb_d©um
 *
ov§ec_›í_vswôch_gë_°©i°ics
(c⁄° 
ov§ec_›í_vswôch
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

1051 c⁄° 
ovsdb_d©um
 *
ov§ec_›í_vswôch_gë_sy°em_ty≥
(c⁄° 
ov§ec_›í_vswôch
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1052 c⁄° 
ovsdb_d©um
 *
ov§ec_›í_vswôch_gë_sy°em_vîsi⁄
(c⁄° 
ov§ec_›í_vswôch
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1054 
ov§ec_›í_vswôch_£t_bridges
(c⁄° 
ov§ec_›í_vswôch
 *, 
ov§ec_bridge
 **
bridges
, 
size_t
 
n_bridges
);

1055 
ov§ec_›í_vswôch_£t_cur_cfg
(c⁄° 
ov§ec_›í_vswôch
 *, 
öt64_t
 
cur_cfg
);

1056 
ov§ec_›í_vswôch_£t_db_vîsi⁄
(c⁄° 
ov§ec_›í_vswôch
 *, c⁄° *
db_vîsi⁄
);

1057 
ov§ec_›í_vswôch_£t_exã∫Æ_ids
(c⁄° 
ov§ec_›í_vswôch
 *, c⁄° 
sm≠
 *);

1058 
ov§ec_›í_vswôch_£t_m™agî_›ti⁄s
(c⁄° 
ov§ec_›í_vswôch
 *, 
ov§ec_m™agî
 **
m™agî_›ti⁄s
, 
size_t
 
n_m™agî_›ti⁄s
);

1059 
ov§ec_›í_vswôch_£t_√xt_cfg
(c⁄° 
ov§ec_›í_vswôch
 *, 
öt64_t
 
√xt_cfg
);

1060 
ov§ec_›í_vswôch_£t_Ÿhî_c⁄fig
(c⁄° 
ov§ec_›í_vswôch
 *, c⁄° 
sm≠
 *);

1061 
ov§ec_›í_vswôch_£t_ovs_vîsi⁄
(c⁄° 
ov§ec_›í_vswôch
 *, c⁄° *
ovs_vîsi⁄
);

1062 
ov§ec_›í_vswôch_£t_s¶
(c⁄° 
ov§ec_›í_vswôch
 *, c⁄° 
ov§ec_s¶
 *
s¶
);

1063 
ov§ec_›í_vswôch_£t_°©i°ics
(c⁄° 
ov§ec_›í_vswôch
 *, c⁄° 
sm≠
 *);

1064 
ov§ec_›í_vswôch_£t_sy°em_ty≥
(c⁄° 
ov§ec_›í_vswôch
 *, c⁄° *
sy°em_ty≥
);

1065 
ov§ec_›í_vswôch_£t_sy°em_vîsi⁄
(c⁄° 
ov§ec_›í_vswôch
 *, c⁄° *
sy°em_vîsi⁄
);

1069 
	sov§ec_p‹t
 {

1070 
ovsdb_idl_row
 
	mhódî_
;

1073 
öt64_t
 
	mb⁄d_downdñay
;

1076 
boﬁ
 
	mb⁄d_Áke_iÁ˚
;

1079 *
	mb⁄d_mode
;

1082 
öt64_t
 
	mb⁄d_updñay
;

1085 
sm≠
 
	mexã∫Æ_ids
;

1088 
boﬁ
 
	mÁke_bridge
;

1091 
ov§ec_öãrÁ˚
 **
	möãrÁ˚s
;

1092 
size_t
 
	mn_öãrÁ˚s
;

1095 *
	mœ˝
;

1098 *
	mmac
;

1101 *
	m«me
;

1104 
sm≠
 
	mŸhî_c⁄fig
;

1107 
ov§ec_qos
 *
	mqos
;

1110 **
	mkey_°©i°ics
;

1111 
öt64_t
 *
	mvÆue_°©i°ics
;

1112 
size_t
 
	mn_°©i°ics
;

1115 
sm≠
 
	m°©us
;

1118 
öt64_t
 *
	mèg
;

1119 
size_t
 
	mn_èg
;

1122 
öt64_t
 *
	måunks
;

1123 
size_t
 
	mn_åunks
;

1126 *
	mvœn_mode
;

1130 
	mOVSREC_PORT_COL_BOND_DOWNDELAY
,

1131 
	mOVSREC_PORT_COL_BOND_FAKE_IFACE
,

1132 
	mOVSREC_PORT_COL_BOND_MODE
,

1133 
	mOVSREC_PORT_COL_BOND_UPDELAY
,

1134 
	mOVSREC_PORT_COL_EXTERNAL_IDS
,

1135 
	mOVSREC_PORT_COL_FAKE_BRIDGE
,

1136 
	mOVSREC_PORT_COL_INTERFACES
,

1137 
	mOVSREC_PORT_COL_LACP
,

1138 
	mOVSREC_PORT_COL_MAC
,

1139 
	mOVSREC_PORT_COL_NAME
,

1140 
	mOVSREC_PORT_COL_OTHER_CONFIG
,

1141 
	mOVSREC_PORT_COL_QOS
,

1142 
	mOVSREC_PORT_COL_STATISTICS
,

1143 
	mOVSREC_PORT_COL_STATUS
,

1144 
	mOVSREC_PORT_COL_TAG
,

1145 
	mOVSREC_PORT_COL_TRUNKS
,

1146 
	mOVSREC_PORT_COL_VLAN_MODE
,

1147 
	mOVSREC_PORT_N_COLUMNS


1150 
	#ov§ec_p‹t_cﬁ_°©us
 (
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_STATUS
])

	)

1151 
	#ov§ec_p‹t_cﬁ_°©i°ics
 (
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_STATISTICS
])

	)

1152 
	#ov§ec_p‹t_cﬁ_qos
 (
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_QOS
])

	)

1153 
	#ov§ec_p‹t_cﬁ_«me
 (
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_NAME
])

	)

1154 
	#ov§ec_p‹t_cﬁ_b⁄d_downdñay
 (
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_BOND_DOWNDELAY
])

	)

1155 
	#ov§ec_p‹t_cﬁ_öãrÁ˚s
 (
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_INTERFACES
])

	)

1156 
	#ov§ec_p‹t_cﬁ_Ÿhî_c⁄fig
 (
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_OTHER_CONFIG
])

	)

1157 
	#ov§ec_p‹t_cﬁ_b⁄d_Áke_iÁ˚
 (
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_BOND_FAKE_IFACE
])

	)

1158 
	#ov§ec_p‹t_cﬁ_œ˝
 (
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_LACP
])

	)

1159 
	#ov§ec_p‹t_cﬁ_mac
 (
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_MAC
])

	)

1160 
	#ov§ec_p‹t_cﬁ_èg
 (
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_TAG
])

	)

1161 
	#ov§ec_p‹t_cﬁ_åunks
 (
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_TRUNKS
])

	)

1162 
	#ov§ec_p‹t_cﬁ_vœn_mode
 (
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_VLAN_MODE
])

	)

1163 
	#ov§ec_p‹t_cﬁ_exã∫Æ_ids
 (
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_EXTERNAL_IDS
])

	)

1164 
	#ov§ec_p‹t_cﬁ_Áke_bridge
 (
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_FAKE_BRIDGE
])

	)

1165 
	#ov§ec_p‹t_cﬁ_b⁄d_updñay
 (
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_BOND_UPDELAY
])

	)

1166 
	#ov§ec_p‹t_cﬁ_b⁄d_mode
 (
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_BOND_MODE
])

	)

1168 
ovsdb_idl_cﬁumn
 
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_N_COLUMNS
];

1170 c⁄° 
ov§ec_p‹t
 *
ov§ec_p‹t_fú°
(c⁄° 
ovsdb_idl
 *);

1171 c⁄° 
ov§ec_p‹t
 *
ov§ec_p‹t_√xt
(const ovsrec_port *);

1172 
	#OVSREC_PORT_FOR_EACH
(
ROW
, 
IDL
) \

1173 (
ROW
Ë
	`ov§ec_p‹t_fú°
(
IDL
); \

1174 (
ROW
); \

1175 (
ROW
Ë
	`ov§ec_p‹t_√xt
(ROW))

	)

1176 
	#OVSREC_PORT_FOR_EACH_SAFE
(
ROW
, 
NEXT
, 
IDL
) \

1177 (
ROW
Ë
	`ov§ec_p‹t_fú°
(
IDL
); \

1178 (
ROW
Ë? ((
NEXT
Ë
	`ov§ec_p‹t_√xt
(ROW), 1) : 0; \

1179 (
ROW
Ë(
NEXT
))

	)

1181 
ov§ec_p‹t_öô
(
ov§ec_p‹t
 *);

1182 
ov§ec_p‹t_dñëe
(c⁄° 
ov§ec_p‹t
 *);

1183 
ov§ec_p‹t
 *
ov§ec_p‹t_ö£π
(
ovsdb_idl_txn
 *);

1185 
ov§ec_p‹t_vîify_b⁄d_downdñay
(c⁄° 
ov§ec_p‹t
 *);

1186 
ov§ec_p‹t_vîify_b⁄d_Áke_iÁ˚
(c⁄° 
ov§ec_p‹t
 *);

1187 
ov§ec_p‹t_vîify_b⁄d_mode
(c⁄° 
ov§ec_p‹t
 *);

1188 
ov§ec_p‹t_vîify_b⁄d_updñay
(c⁄° 
ov§ec_p‹t
 *);

1189 
ov§ec_p‹t_vîify_exã∫Æ_ids
(c⁄° 
ov§ec_p‹t
 *);

1190 
ov§ec_p‹t_vîify_Áke_bridge
(c⁄° 
ov§ec_p‹t
 *);

1191 
ov§ec_p‹t_vîify_öãrÁ˚s
(c⁄° 
ov§ec_p‹t
 *);

1192 
ov§ec_p‹t_vîify_œ˝
(c⁄° 
ov§ec_p‹t
 *);

1193 
ov§ec_p‹t_vîify_mac
(c⁄° 
ov§ec_p‹t
 *);

1194 
ov§ec_p‹t_vîify_«me
(c⁄° 
ov§ec_p‹t
 *);

1195 
ov§ec_p‹t_vîify_Ÿhî_c⁄fig
(c⁄° 
ov§ec_p‹t
 *);

1196 
ov§ec_p‹t_vîify_qos
(c⁄° 
ov§ec_p‹t
 *);

1197 
ov§ec_p‹t_vîify_°©i°ics
(c⁄° 
ov§ec_p‹t
 *);

1198 
ov§ec_p‹t_vîify_°©us
(c⁄° 
ov§ec_p‹t
 *);

1199 
ov§ec_p‹t_vîify_èg
(c⁄° 
ov§ec_p‹t
 *);

1200 
ov§ec_p‹t_vîify_åunks
(c⁄° 
ov§ec_p‹t
 *);

1201 
ov§ec_p‹t_vîify_vœn_mode
(c⁄° 
ov§ec_p‹t
 *);

1206 c⁄° 
ovsdb_d©um
 *
ov§ec_p‹t_gë_b⁄d_downdñay
(c⁄° 
ov§ec_p‹t
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1207 c⁄° 
ovsdb_d©um
 *
ov§ec_p‹t_gë_b⁄d_Áke_iÁ˚
(c⁄° 
ov§ec_p‹t
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1208 c⁄° 
ovsdb_d©um
 *
ov§ec_p‹t_gë_b⁄d_mode
(c⁄° 
ov§ec_p‹t
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1209 c⁄° 
ovsdb_d©um
 *
ov§ec_p‹t_gë_b⁄d_updñay
(c⁄° 
ov§ec_p‹t
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1210 c⁄° 
ovsdb_d©um
 *
ov§ec_p‹t_gë_exã∫Æ_ids
(c⁄° 
ov§ec_p‹t
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

1211 c⁄° 
ovsdb_d©um
 *
ov§ec_p‹t_gë_Áke_bridge
(c⁄° 
ov§ec_p‹t
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1212 c⁄° 
ovsdb_d©um
 *
ov§ec_p‹t_gë_öãrÁ˚s
(c⁄° 
ov§ec_p‹t
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1213 c⁄° 
ovsdb_d©um
 *
ov§ec_p‹t_gë_œ˝
(c⁄° 
ov§ec_p‹t
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1214 c⁄° 
ovsdb_d©um
 *
ov§ec_p‹t_gë_mac
(c⁄° 
ov§ec_p‹t
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1215 c⁄° 
ovsdb_d©um
 *
ov§ec_p‹t_gë_«me
(c⁄° 
ov§ec_p‹t
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1216 c⁄° 
ovsdb_d©um
 *
ov§ec_p‹t_gë_Ÿhî_c⁄fig
(c⁄° 
ov§ec_p‹t
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

1217 c⁄° 
ovsdb_d©um
 *
ov§ec_p‹t_gë_qos
(c⁄° 
ov§ec_p‹t
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1218 c⁄° 
ovsdb_d©um
 *
ov§ec_p‹t_gë_°©i°ics
(c⁄° 
ov§ec_p‹t
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

1219 c⁄° 
ovsdb_d©um
 *
ov§ec_p‹t_gë_°©us
(c⁄° 
ov§ec_p‹t
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

1220 c⁄° 
ovsdb_d©um
 *
ov§ec_p‹t_gë_èg
(c⁄° 
ov§ec_p‹t
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1221 c⁄° 
ovsdb_d©um
 *
ov§ec_p‹t_gë_åunks
(c⁄° 
ov§ec_p‹t
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1222 c⁄° 
ovsdb_d©um
 *
ov§ec_p‹t_gë_vœn_mode
(c⁄° 
ov§ec_p‹t
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1224 
ov§ec_p‹t_£t_b⁄d_downdñay
(c⁄° 
ov§ec_p‹t
 *, 
öt64_t
 
b⁄d_downdñay
);

1225 
ov§ec_p‹t_£t_b⁄d_Áke_iÁ˚
(c⁄° 
ov§ec_p‹t
 *, 
boﬁ
 
b⁄d_Áke_iÁ˚
);

1226 
ov§ec_p‹t_£t_b⁄d_mode
(c⁄° 
ov§ec_p‹t
 *, c⁄° *
b⁄d_mode
);

1227 
ov§ec_p‹t_£t_b⁄d_updñay
(c⁄° 
ov§ec_p‹t
 *, 
öt64_t
 
b⁄d_updñay
);

1228 
ov§ec_p‹t_£t_exã∫Æ_ids
(c⁄° 
ov§ec_p‹t
 *, c⁄° 
sm≠
 *);

1229 
ov§ec_p‹t_£t_Áke_bridge
(c⁄° 
ov§ec_p‹t
 *, 
boﬁ
 
Áke_bridge
);

1230 
ov§ec_p‹t_£t_öãrÁ˚s
(c⁄° 
ov§ec_p‹t
 *, 
ov§ec_öãrÁ˚
 **
öãrÁ˚s
, 
size_t
 
n_öãrÁ˚s
);

1231 
ov§ec_p‹t_£t_œ˝
(c⁄° 
ov§ec_p‹t
 *, c⁄° *
œ˝
);

1232 
ov§ec_p‹t_£t_mac
(c⁄° 
ov§ec_p‹t
 *, c⁄° *
mac
);

1233 
ov§ec_p‹t_£t_«me
(c⁄° 
ov§ec_p‹t
 *, c⁄° *
«me
);

1234 
ov§ec_p‹t_£t_Ÿhî_c⁄fig
(c⁄° 
ov§ec_p‹t
 *, c⁄° 
sm≠
 *);

1235 
ov§ec_p‹t_£t_qos
(c⁄° 
ov§ec_p‹t
 *, c⁄° 
ov§ec_qos
 *
qos
);

1236 
ov§ec_p‹t_£t_°©i°ics
(c⁄° 
ov§ec_p‹t
 *, **
key_°©i°ics
, c⁄° 
öt64_t
 *
vÆue_°©i°ics
, 
size_t
 
n_°©i°ics
);

1237 
ov§ec_p‹t_£t_°©us
(c⁄° 
ov§ec_p‹t
 *, c⁄° 
sm≠
 *);

1238 
ov§ec_p‹t_£t_èg
(c⁄° 
ov§ec_p‹t
 *, c⁄° 
öt64_t
 *
èg
, 
size_t
 
n_èg
);

1239 
ov§ec_p‹t_£t_åunks
(c⁄° 
ov§ec_p‹t
 *, c⁄° 
öt64_t
 *
åunks
, 
size_t
 
n_åunks
);

1240 
ov§ec_p‹t_£t_vœn_mode
(c⁄° 
ov§ec_p‹t
 *, c⁄° *
vœn_mode
);

1244 
	sov§ec_qos
 {

1245 
ovsdb_idl_row
 
	mhódî_
;

1248 
sm≠
 
	mexã∫Æ_ids
;

1251 
sm≠
 
	mŸhî_c⁄fig
;

1254 
öt64_t
 *
	mkey_queues
;

1255 
ov§ec_queue
 **
	mvÆue_queues
;

1256 
size_t
 
	mn_queues
;

1259 *
	mty≥
;

1263 
	mOVSREC_QOS_COL_EXTERNAL_IDS
,

1264 
	mOVSREC_QOS_COL_OTHER_CONFIG
,

1265 
	mOVSREC_QOS_COL_QUEUES
,

1266 
	mOVSREC_QOS_COL_TYPE
,

1267 
	mOVSREC_QOS_N_COLUMNS


1270 
	#ov§ec_qos_cﬁ_exã∫Æ_ids
 (
ov§ec_qos_cﬁumns
[
OVSREC_QOS_COL_EXTERNAL_IDS
])

	)

1271 
	#ov§ec_qos_cﬁ_Ÿhî_c⁄fig
 (
ov§ec_qos_cﬁumns
[
OVSREC_QOS_COL_OTHER_CONFIG
])

	)

1272 
	#ov§ec_qos_cﬁ_ty≥
 (
ov§ec_qos_cﬁumns
[
OVSREC_QOS_COL_TYPE
])

	)

1273 
	#ov§ec_qos_cﬁ_queues
 (
ov§ec_qos_cﬁumns
[
OVSREC_QOS_COL_QUEUES
])

	)

1275 
ovsdb_idl_cﬁumn
 
ov§ec_qos_cﬁumns
[
OVSREC_QOS_N_COLUMNS
];

1277 c⁄° 
ov§ec_qos
 *
ov§ec_qos_fú°
(c⁄° 
ovsdb_idl
 *);

1278 c⁄° 
ov§ec_qos
 *
ov§ec_qos_√xt
(const ovsrec_qos *);

1279 
	#OVSREC_QOS_FOR_EACH
(
ROW
, 
IDL
) \

1280 (
ROW
Ë
	`ov§ec_qos_fú°
(
IDL
); \

1281 (
ROW
); \

1282 (
ROW
Ë
	`ov§ec_qos_√xt
(ROW))

	)

1283 
	#OVSREC_QOS_FOR_EACH_SAFE
(
ROW
, 
NEXT
, 
IDL
) \

1284 (
ROW
Ë
	`ov§ec_qos_fú°
(
IDL
); \

1285 (
ROW
Ë? ((
NEXT
Ë
	`ov§ec_qos_√xt
(ROW), 1) : 0; \

1286 (
ROW
Ë(
NEXT
))

	)

1288 
ov§ec_qos_öô
(
ov§ec_qos
 *);

1289 
ov§ec_qos_dñëe
(c⁄° 
ov§ec_qos
 *);

1290 
ov§ec_qos
 *
ov§ec_qos_ö£π
(
ovsdb_idl_txn
 *);

1292 
ov§ec_qos_vîify_exã∫Æ_ids
(c⁄° 
ov§ec_qos
 *);

1293 
ov§ec_qos_vîify_Ÿhî_c⁄fig
(c⁄° 
ov§ec_qos
 *);

1294 
ov§ec_qos_vîify_queues
(c⁄° 
ov§ec_qos
 *);

1295 
ov§ec_qos_vîify_ty≥
(c⁄° 
ov§ec_qos
 *);

1300 c⁄° 
ovsdb_d©um
 *
ov§ec_qos_gë_exã∫Æ_ids
(c⁄° 
ov§ec_qos
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

1301 c⁄° 
ovsdb_d©um
 *
ov§ec_qos_gë_Ÿhî_c⁄fig
(c⁄° 
ov§ec_qos
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

1302 c⁄° 
ovsdb_d©um
 *
ov§ec_qos_gë_queues
(c⁄° 
ov§ec_qos
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

1303 c⁄° 
ovsdb_d©um
 *
ov§ec_qos_gë_ty≥
(c⁄° 
ov§ec_qos
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1305 
ov§ec_qos_£t_exã∫Æ_ids
(c⁄° 
ov§ec_qos
 *, c⁄° 
sm≠
 *);

1306 
ov§ec_qos_£t_Ÿhî_c⁄fig
(c⁄° 
ov§ec_qos
 *, c⁄° 
sm≠
 *);

1307 
ov§ec_qos_£t_queues
(c⁄° 
ov§ec_qos
 *, c⁄° 
öt64_t
 *
key_queues
, 
ov§ec_queue
 **
vÆue_queues
, 
size_t
 
n_queues
);

1308 
ov§ec_qos_£t_ty≥
(c⁄° 
ov§ec_qos
 *, c⁄° *
ty≥
);

1312 
	sov§ec_queue
 {

1313 
ovsdb_idl_row
 
	mhódî_
;

1316 
öt64_t
 *
	mds˝
;

1317 
size_t
 
	mn_ds˝
;

1320 
sm≠
 
	mexã∫Æ_ids
;

1323 
sm≠
 
	mŸhî_c⁄fig
;

1327 
	mOVSREC_QUEUE_COL_DSCP
,

1328 
	mOVSREC_QUEUE_COL_EXTERNAL_IDS
,

1329 
	mOVSREC_QUEUE_COL_OTHER_CONFIG
,

1330 
	mOVSREC_QUEUE_N_COLUMNS


1333 
	#ov§ec_queue_cﬁ_exã∫Æ_ids
 (
ov§ec_queue_cﬁumns
[
OVSREC_QUEUE_COL_EXTERNAL_IDS
])

	)

1334 
	#ov§ec_queue_cﬁ_Ÿhî_c⁄fig
 (
ov§ec_queue_cﬁumns
[
OVSREC_QUEUE_COL_OTHER_CONFIG
])

	)

1335 
	#ov§ec_queue_cﬁ_ds˝
 (
ov§ec_queue_cﬁumns
[
OVSREC_QUEUE_COL_DSCP
])

	)

1337 
ovsdb_idl_cﬁumn
 
ov§ec_queue_cﬁumns
[
OVSREC_QUEUE_N_COLUMNS
];

1339 c⁄° 
ov§ec_queue
 *
ov§ec_queue_fú°
(c⁄° 
ovsdb_idl
 *);

1340 c⁄° 
ov§ec_queue
 *
ov§ec_queue_√xt
(const ovsrec_queue *);

1341 
	#OVSREC_QUEUE_FOR_EACH
(
ROW
, 
IDL
) \

1342 (
ROW
Ë
	`ov§ec_queue_fú°
(
IDL
); \

1343 (
ROW
); \

1344 (
ROW
Ë
	`ov§ec_queue_√xt
(ROW))

	)

1345 
	#OVSREC_QUEUE_FOR_EACH_SAFE
(
ROW
, 
NEXT
, 
IDL
) \

1346 (
ROW
Ë
	`ov§ec_queue_fú°
(
IDL
); \

1347 (
ROW
Ë? ((
NEXT
Ë
	`ov§ec_queue_√xt
(ROW), 1) : 0; \

1348 (
ROW
Ë(
NEXT
))

	)

1350 
ov§ec_queue_öô
(
ov§ec_queue
 *);

1351 
ov§ec_queue_dñëe
(c⁄° 
ov§ec_queue
 *);

1352 
ov§ec_queue
 *
ov§ec_queue_ö£π
(
ovsdb_idl_txn
 *);

1354 
ov§ec_queue_vîify_ds˝
(c⁄° 
ov§ec_queue
 *);

1355 
ov§ec_queue_vîify_exã∫Æ_ids
(c⁄° 
ov§ec_queue
 *);

1356 
ov§ec_queue_vîify_Ÿhî_c⁄fig
(c⁄° 
ov§ec_queue
 *);

1361 c⁄° 
ovsdb_d©um
 *
ov§ec_queue_gë_ds˝
(c⁄° 
ov§ec_queue
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1362 c⁄° 
ovsdb_d©um
 *
ov§ec_queue_gë_exã∫Æ_ids
(c⁄° 
ov§ec_queue
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

1363 c⁄° 
ovsdb_d©um
 *
ov§ec_queue_gë_Ÿhî_c⁄fig
(c⁄° 
ov§ec_queue
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

1365 
ov§ec_queue_£t_ds˝
(c⁄° 
ov§ec_queue
 *, c⁄° 
öt64_t
 *
ds˝
, 
size_t
 
n_ds˝
);

1366 
ov§ec_queue_£t_exã∫Æ_ids
(c⁄° 
ov§ec_queue
 *, c⁄° 
sm≠
 *);

1367 
ov§ec_queue_£t_Ÿhî_c⁄fig
(c⁄° 
ov§ec_queue
 *, c⁄° 
sm≠
 *);

1371 
	sov§ec_s¶
 {

1372 
ovsdb_idl_row
 
	mhódî_
;

1375 
boﬁ
 
	mboŸ°øp_ˇ_˚π
;

1378 *
	mˇ_˚π
;

1381 *
	m˚πifiˇã
;

1384 
sm≠
 
	mexã∫Æ_ids
;

1387 *
	m¥iv©e_key
;

1391 
	mOVSREC_SSL_COL_BOOTSTRAP_CA_CERT
,

1392 
	mOVSREC_SSL_COL_CA_CERT
,

1393 
	mOVSREC_SSL_COL_CERTIFICATE
,

1394 
	mOVSREC_SSL_COL_EXTERNAL_IDS
,

1395 
	mOVSREC_SSL_COL_PRIVATE_KEY
,

1396 
	mOVSREC_SSL_N_COLUMNS


1399 
	#ov§ec_s¶_cﬁ_ˇ_˚π
 (
ov§ec_s¶_cﬁumns
[
OVSREC_SSL_COL_CA_CERT
])

	)

1400 
	#ov§ec_s¶_cﬁ_¥iv©e_key
 (
ov§ec_s¶_cﬁumns
[
OVSREC_SSL_COL_PRIVATE_KEY
])

	)

1401 
	#ov§ec_s¶_cﬁ_boŸ°øp_ˇ_˚π
 (
ov§ec_s¶_cﬁumns
[
OVSREC_SSL_COL_BOOTSTRAP_CA_CERT
])

	)

1402 
	#ov§ec_s¶_cﬁ_exã∫Æ_ids
 (
ov§ec_s¶_cﬁumns
[
OVSREC_SSL_COL_EXTERNAL_IDS
])

	)

1403 
	#ov§ec_s¶_cﬁ_˚πifiˇã
 (
ov§ec_s¶_cﬁumns
[
OVSREC_SSL_COL_CERTIFICATE
])

	)

1405 
ovsdb_idl_cﬁumn
 
ov§ec_s¶_cﬁumns
[
OVSREC_SSL_N_COLUMNS
];

1407 c⁄° 
ov§ec_s¶
 *
ov§ec_s¶_fú°
(c⁄° 
ovsdb_idl
 *);

1408 c⁄° 
ov§ec_s¶
 *
ov§ec_s¶_√xt
(const ovsrec_ssl *);

1409 
	#OVSREC_SSL_FOR_EACH
(
ROW
, 
IDL
) \

1410 (
ROW
Ë
	`ov§ec_s¶_fú°
(
IDL
); \

1411 (
ROW
); \

1412 (
ROW
Ë
	`ov§ec_s¶_√xt
(ROW))

	)

1413 
	#OVSREC_SSL_FOR_EACH_SAFE
(
ROW
, 
NEXT
, 
IDL
) \

1414 (
ROW
Ë
	`ov§ec_s¶_fú°
(
IDL
); \

1415 (
ROW
Ë? ((
NEXT
Ë
	`ov§ec_s¶_√xt
(ROW), 1) : 0; \

1416 (
ROW
Ë(
NEXT
))

	)

1418 
ov§ec_s¶_öô
(
ov§ec_s¶
 *);

1419 
ov§ec_s¶_dñëe
(c⁄° 
ov§ec_s¶
 *);

1420 
ov§ec_s¶
 *
ov§ec_s¶_ö£π
(
ovsdb_idl_txn
 *);

1422 
ov§ec_s¶_vîify_boŸ°øp_ˇ_˚π
(c⁄° 
ov§ec_s¶
 *);

1423 
ov§ec_s¶_vîify_ˇ_˚π
(c⁄° 
ov§ec_s¶
 *);

1424 
ov§ec_s¶_vîify_˚πifiˇã
(c⁄° 
ov§ec_s¶
 *);

1425 
ov§ec_s¶_vîify_exã∫Æ_ids
(c⁄° 
ov§ec_s¶
 *);

1426 
ov§ec_s¶_vîify_¥iv©e_key
(c⁄° 
ov§ec_s¶
 *);

1431 c⁄° 
ovsdb_d©um
 *
ov§ec_s¶_gë_boŸ°øp_ˇ_˚π
(c⁄° 
ov§ec_s¶
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1432 c⁄° 
ovsdb_d©um
 *
ov§ec_s¶_gë_ˇ_˚π
(c⁄° 
ov§ec_s¶
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1433 c⁄° 
ovsdb_d©um
 *
ov§ec_s¶_gë_˚πifiˇã
(c⁄° 
ov§ec_s¶
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1434 c⁄° 
ovsdb_d©um
 *
ov§ec_s¶_gë_exã∫Æ_ids
(c⁄° 
ov§ec_s¶
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

1435 c⁄° 
ovsdb_d©um
 *
ov§ec_s¶_gë_¥iv©e_key
(c⁄° 
ov§ec_s¶
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1437 
ov§ec_s¶_£t_boŸ°øp_ˇ_˚π
(c⁄° 
ov§ec_s¶
 *, 
boﬁ
 
boŸ°øp_ˇ_˚π
);

1438 
ov§ec_s¶_£t_ˇ_˚π
(c⁄° 
ov§ec_s¶
 *, c⁄° *
ˇ_˚π
);

1439 
ov§ec_s¶_£t_˚πifiˇã
(c⁄° 
ov§ec_s¶
 *, c⁄° *
˚πifiˇã
);

1440 
ov§ec_s¶_£t_exã∫Æ_ids
(c⁄° 
ov§ec_s¶
 *, c⁄° 
sm≠
 *);

1441 
ov§ec_s¶_£t_¥iv©e_key
(c⁄° 
ov§ec_s¶
 *, c⁄° *
¥iv©e_key
);

1445 
	sov§ec_sÊow
 {

1446 
ovsdb_idl_row
 
	mhódî_
;

1449 *
	magít
;

1452 
sm≠
 
	mexã∫Æ_ids
;

1455 
öt64_t
 *
	mhódî
;

1456 
size_t
 
	mn_hódî
;

1459 
öt64_t
 *
	mpﬁlög
;

1460 
size_t
 
	mn_pﬁlög
;

1463 
öt64_t
 *
	mßm∂ög
;

1464 
size_t
 
	mn_ßm∂ög
;

1467 **
	mèrgës
;

1468 
size_t
 
	mn_èrgës
;

1472 
	mOVSREC_SFLOW_COL_AGENT
,

1473 
	mOVSREC_SFLOW_COL_EXTERNAL_IDS
,

1474 
	mOVSREC_SFLOW_COL_HEADER
,

1475 
	mOVSREC_SFLOW_COL_POLLING
,

1476 
	mOVSREC_SFLOW_COL_SAMPLING
,

1477 
	mOVSREC_SFLOW_COL_TARGETS
,

1478 
	mOVSREC_SFLOW_N_COLUMNS


1481 
	#ov§ec_sÊow_cﬁ_agít
 (
ov§ec_sÊow_cﬁumns
[
OVSREC_SFLOW_COL_AGENT
])

	)

1482 
	#ov§ec_sÊow_cﬁ_ßm∂ög
 (
ov§ec_sÊow_cﬁumns
[
OVSREC_SFLOW_COL_SAMPLING
])

	)

1483 
	#ov§ec_sÊow_cﬁ_hódî
 (
ov§ec_sÊow_cﬁumns
[
OVSREC_SFLOW_COL_HEADER
])

	)

1484 
	#ov§ec_sÊow_cﬁ_pﬁlög
 (
ov§ec_sÊow_cﬁumns
[
OVSREC_SFLOW_COL_POLLING
])

	)

1485 
	#ov§ec_sÊow_cﬁ_exã∫Æ_ids
 (
ov§ec_sÊow_cﬁumns
[
OVSREC_SFLOW_COL_EXTERNAL_IDS
])

	)

1486 
	#ov§ec_sÊow_cﬁ_èrgës
 (
ov§ec_sÊow_cﬁumns
[
OVSREC_SFLOW_COL_TARGETS
])

	)

1488 
ovsdb_idl_cﬁumn
 
ov§ec_sÊow_cﬁumns
[
OVSREC_SFLOW_N_COLUMNS
];

1490 c⁄° 
ov§ec_sÊow
 *
ov§ec_sÊow_fú°
(c⁄° 
ovsdb_idl
 *);

1491 c⁄° 
ov§ec_sÊow
 *
ov§ec_sÊow_√xt
(const ovsrec_sflow *);

1492 
	#OVSREC_SFLOW_FOR_EACH
(
ROW
, 
IDL
) \

1493 (
ROW
Ë
	`ov§ec_sÊow_fú°
(
IDL
); \

1494 (
ROW
); \

1495 (
ROW
Ë
	`ov§ec_sÊow_√xt
(ROW))

	)

1496 
	#OVSREC_SFLOW_FOR_EACH_SAFE
(
ROW
, 
NEXT
, 
IDL
) \

1497 (
ROW
Ë
	`ov§ec_sÊow_fú°
(
IDL
); \

1498 (
ROW
Ë? ((
NEXT
Ë
	`ov§ec_sÊow_√xt
(ROW), 1) : 0; \

1499 (
ROW
Ë(
NEXT
))

	)

1501 
ov§ec_sÊow_öô
(
ov§ec_sÊow
 *);

1502 
ov§ec_sÊow_dñëe
(c⁄° 
ov§ec_sÊow
 *);

1503 
ov§ec_sÊow
 *
ov§ec_sÊow_ö£π
(
ovsdb_idl_txn
 *);

1505 
ov§ec_sÊow_vîify_agít
(c⁄° 
ov§ec_sÊow
 *);

1506 
ov§ec_sÊow_vîify_exã∫Æ_ids
(c⁄° 
ov§ec_sÊow
 *);

1507 
ov§ec_sÊow_vîify_hódî
(c⁄° 
ov§ec_sÊow
 *);

1508 
ov§ec_sÊow_vîify_pﬁlög
(c⁄° 
ov§ec_sÊow
 *);

1509 
ov§ec_sÊow_vîify_ßm∂ög
(c⁄° 
ov§ec_sÊow
 *);

1510 
ov§ec_sÊow_vîify_èrgës
(c⁄° 
ov§ec_sÊow
 *);

1515 c⁄° 
ovsdb_d©um
 *
ov§ec_sÊow_gë_agít
(c⁄° 
ov§ec_sÊow
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1516 c⁄° 
ovsdb_d©um
 *
ov§ec_sÊow_gë_exã∫Æ_ids
(c⁄° 
ov§ec_sÊow
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

1517 c⁄° 
ovsdb_d©um
 *
ov§ec_sÊow_gë_hódî
(c⁄° 
ov§ec_sÊow
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1518 c⁄° 
ovsdb_d©um
 *
ov§ec_sÊow_gë_pﬁlög
(c⁄° 
ov§ec_sÊow
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1519 c⁄° 
ovsdb_d©um
 *
ov§ec_sÊow_gë_ßm∂ög
(c⁄° 
ov§ec_sÊow
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1520 c⁄° 
ovsdb_d©um
 *
ov§ec_sÊow_gë_èrgës
(c⁄° 
ov§ec_sÊow
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1522 
ov§ec_sÊow_£t_agít
(c⁄° 
ov§ec_sÊow
 *, c⁄° *
agít
);

1523 
ov§ec_sÊow_£t_exã∫Æ_ids
(c⁄° 
ov§ec_sÊow
 *, c⁄° 
sm≠
 *);

1524 
ov§ec_sÊow_£t_hódî
(c⁄° 
ov§ec_sÊow
 *, c⁄° 
öt64_t
 *
hódî
, 
size_t
 
n_hódî
);

1525 
ov§ec_sÊow_£t_pﬁlög
(c⁄° 
ov§ec_sÊow
 *, c⁄° 
öt64_t
 *
pﬁlög
, 
size_t
 
n_pﬁlög
);

1526 
ov§ec_sÊow_£t_ßm∂ög
(c⁄° 
ov§ec_sÊow
 *, c⁄° 
öt64_t
 *
ßm∂ög
, 
size_t
 
n_ßm∂ög
);

1527 
ov§ec_sÊow_£t_èrgës
(c⁄° 
ov§ec_sÊow
 *, **
èrgës
, 
size_t
 
n_èrgës
);

1531 
	mOVSREC_TABLE_BRIDGE
,

1532 
	mOVSREC_TABLE_CONTROLLER
,

1533 
	mOVSREC_TABLE_FLOW_TABLE
,

1534 
	mOVSREC_TABLE_INTERFACE
,

1535 
	mOVSREC_TABLE_MANAGER
,

1536 
	mOVSREC_TABLE_MIRROR
,

1537 
	mOVSREC_TABLE_NETFLOW
,

1538 
	mOVSREC_TABLE_OPEN_VSWITCH
,

1539 
	mOVSREC_TABLE_PORT
,

1540 
	mOVSREC_TABLE_QOS
,

1541 
	mOVSREC_TABLE_QUEUE
,

1542 
	mOVSREC_TABLE_SSL
,

1543 
	mOVSREC_TABLE_SFLOW
,

1544 
	mOVSREC_N_TABLES


1547 
	#ov§ec_èbÀ_bridge
 (
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_BRIDGE
])

	)

1548 
	#ov§ec_èbÀ_qos
 (
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_QOS
])

	)

1549 
	#ov§ec_èbÀ_sÊow
 (
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_SFLOW
])

	)

1550 
	#ov§ec_èbÀ_›í_vswôch
 (
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_OPEN_VSWITCH
])

	)

1551 
	#ov§ec_èbÀ_c⁄åﬁÀr
 (
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_CONTROLLER
])

	)

1552 
	#ov§ec_èbÀ_Êow_èbÀ
 (
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_FLOW_TABLE
])

	)

1553 
	#ov§ec_èbÀ_queue
 (
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_QUEUE
])

	)

1554 
	#ov§ec_èbÀ_s¶
 (
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_SSL
])

	)

1555 
	#ov§ec_èbÀ_m™agî
 (
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_MANAGER
])

	)

1556 
	#ov§ec_èbÀ_múr‹
 (
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_MIRROR
])

	)

1557 
	#ov§ec_èbÀ_öãrÁ˚
 (
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_INTERFACE
])

	)

1558 
	#ov§ec_èbÀ_√tÊow
 (
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_NETFLOW
])

	)

1559 
	#ov§ec_èbÀ_p‹t
 (
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_PORT
])

	)

1561 
ovsdb_idl_èbÀ_˛ass
 
ov§ec_èbÀ_˛as£s
[
OVSREC_N_TABLES
];

1563 
ovsdb_idl_˛ass
 
ov§ec_idl_˛ass
;

1565 
ov§ec_öô
();

	@/home/lsch/mytest/openvswitch-1.9.0/lib/worker.c

16 
	~<c⁄fig.h
>

18 
	~"w‹kî.h
"

20 
	~<as£π.h
>

21 
	~<î∫o.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

24 
	~<sys/sockë.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<sys/uio.h
>

27 
	~<sys/waô.h
>

28 
	~<uni°d.h
>

30 
	~"comm™d-löe.h
"

31 
	~"d´m⁄.h
"

32 
	~"oÂbuf.h
"

33 
	~"pﬁl-lo›.h
"

34 
	~"sockë-utû.h
"

35 
	~"utû.h
"

36 
	~"vlog.h
"

38 
VLOG_DEFINE_THIS_MODULE
(
w‹kî
);

41 
	sw‹kî_ªque°
 {

42 
size_t
 
	mªque°_Àn
;

43 
w‹kî_ªque°_func
 *
	mªque°_cb
;

44 
w‹kî_ª∂y_func
 *
	mª∂y_cb
;

45 *
	mª∂y_aux
;

49 
	sw‹kî_ª∂y
 {

50 
size_t
 
	mª∂y_Àn
;

51 
w‹kî_ª∂y_func
 *
	mª∂y_cb
;

52 *
	mª∂y_aux
;

56 
	srxbuf
 {

58 
oÂbuf
 
	mhódî
;

59 
	mfds
[
SOUTIL_MAX_FDS
];

60 
size_t
 
	mn_fds
;

63 
oÂbuf
 
	m∑ylﬂd
;

66 
	g˛õ¡_sock
 = -1;

67 
rxbuf
 
	g˛õ¡_rx
;

69 
rxbuf_öô
(
rxbuf
 *);

70 
rxbuf_˛ór
(
rxbuf
 *);

71 
rxbuf_run
(
rxbuf
 *, 
sock
, 
size_t
 
hódî_Àn
);

73 
iovec
 *
¥efix_iov
(*
d©a
, 
size_t
 
Àn
,

74 c⁄° 
iovec
 *
iovs
, 
size_t
 
n_iovs
);

76 
w‹kî_broke
();

78 
	$w‹kî_maö
(
fd
Ë
NO_RETURN
;

88 
	$w‹kî_°¨t
()

90 
w‹k_fds
[2];

92 
	`as£π
(
˛õ¡_sock
 < 0);

95 
	`xsockë∑ú
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
w‹k_fds
);

96 
	`x£t_n⁄blockög
(
w‹k_fds
[0]);

97 
	`x£t_n⁄blockög
(
w‹k_fds
[1]);

99 i‡(!
	`f‹k_™d_˛ón_up
()) {

101 
	`d´m⁄ize_po°_dëach
();

102 
	`˛o£
(
w‹k_fds
[0]);

103 
	`w‹kî_maö
(
w‹k_fds
[1]);

104 
	`NOT_REACHED
();

108 
	`˛o£
(
w‹k_fds
[1]);

109 
˛õ¡_sock
 = 
w‹k_fds
[0];

110 
	`rxbuf_öô
(&
˛õ¡_rx
);

111 
	}
}

115 
boﬁ


116 
	$w‹kî_is_ru¬ög
()

118  
˛õ¡_sock
 >= 0;

119 
	}
}

126 
	$w‹kî_run
()

128 i‡(
	`w‹kî_is_ru¬ög
()) {

129 
îr‹
;

131 
îr‹
 = 
	`rxbuf_run
(&
˛õ¡_rx
, 
˛õ¡_sock
,

132 (
w‹kî_ª∂y
));

133 i‡(!
îr‹
) {

134 
w‹kî_ª∂y
 *
ª∂y
 = 
˛õ¡_rx
.
hódî
.
d©a
;

135 
ª∂y
->
	`ª∂y_cb
(&
˛õ¡_rx
.
∑ylﬂd
, clõ¡_rx.
fds
,

136 
˛õ¡_rx
.
n_fds
, 
ª∂y
->
ª∂y_aux
);

137 
	`rxbuf_˛ór
(&
˛õ¡_rx
);

138 } i‡(
îr‹
 !
EAGAIN
) {

139 
	`w‹kî_broke
();

140 
	`VLOG_ABORT
("receive from worker failed (%s)",

141 
	`ovs_ªtvÆ_to_°rög
(
îr‹
));

144 
	}
}

148 
	$w‹kî_waô
()

150 i‡(
	`w‹kî_is_ru¬ög
()) {

151 
	`pﬁl_fd_waô
(
˛õ¡_sock
, 
POLLIN
);

153 
	}
}

178 
	$w‹kî_ªque°
(c⁄° *
d©a
, 
size_t
 
size
,

179 c⁄° 
fds
[], 
size_t
 
n_fds
,

180 
w‹kî_ªque°_func
 *
ªque°_cb
,

181 
w‹kî_ª∂y_func
 *
ª∂y_cb
, *
aux
)

183 i‡(
size
 > 0) {

184 
iovec
 
iov
;

186 
iov
.
iov_ba£
 = (*Ë
d©a
;

187 
iov
.
iov_Àn
 = 
size
;

188 
	`w‹kî_ªque°_iovec
(&
iov
, 1, 
fds
, 
n_fds
, 
ªque°_cb
, 
ª∂y_cb
, 
aux
);

190 
	`w‹kî_ªque°_iovec
(
NULL
, 0, 
fds
, 
n_fds
, 
ªque°_cb
, 
ª∂y_cb
, 
aux
);

192 
	}
}

195 
	$w‹kî_£nd_iovec
(c⁄° 
iovec
 
iovs
[], 
size_t
 
n_iovs
,

196 c⁄° 
fds
[], 
size_t
 
n_fds
)

198 
size_t
 
£¡
 = 0;

201 
pﬁlfd
 
pfd
;

202 
îr‹
;

205 
îr‹
 = 
	`£nd_iovec_™d_fds_fuŒy
(
˛õ¡_sock
, 
iovs
, 
n_iovs
,

206 
fds
, 
n_fds
, 
£¡
, &sent);

207 i‡(
îr‹
 !
EAGAIN
) {

208  
îr‹
;

212 
	`w‹kî_run
();

220 
pfd
.
fd
 = 
˛õ¡_sock
;

221 
pfd
.
evíts
 = 
POLLIN
 | 
POLLOUT
;

223 
îr‹
 = 
	`pﬁl
(&
pfd
, 1, -1Ë< 0 ? 
î∫o
 : 0;

224 } 
îr‹
 =
EINTR
);

225 i‡(
îr‹
) {

226 
	`w‹kî_broke
();

227 
	`VLOG_ABORT
("pﬁ»Áûed (%s)", 
	`°ªº‹
(
îr‹
));

230 
	}
}

235 
	$w‹kî_ªque°_iovec
(c⁄° 
iovec
 
iovs
[], 
size_t
 
n_iovs
,

236 c⁄° 
fds
[], 
size_t
 
n_fds
,

237 
w‹kî_ªque°_func
 *
ªque°_cb
,

238 
w‹kî_ª∂y_func
 *
ª∂y_cb
, *
aux
)

240 
w‹kî_ªque°
 
rq
;

241 
iovec
 *
Æl_iovs
;

242 
îr‹
;

244 
	`as£π
(
	`w‹kî_is_ru¬ög
());

246 
rq
.
ªque°_Àn
 = 
	`iovec_Àn
(
iovs
, 
n_iovs
);

247 
rq
.
ªque°_cb
 =Ñequest_cb;

248 
rq
.
ª∂y_cb
 =Ñeply_cb;

249 
rq
.
ª∂y_aux
 = 
aux
;

251 
Æl_iovs
 = 
	`¥efix_iov
(&
rq
, Ñq, 
iovs
, 
n_iovs
);

252 
îr‹
 = 
	`w‹kî_£nd_iovec
(
Æl_iovs
, 
n_iovs
 + 1, 
fds
, 
n_fds
);

253 i‡(
îr‹
) {

254 
	`w‹kî_broke
();

255 
	`VLOG_ABORT
("£nd faûed (%s)", 
	`°ªº‹
(
îr‹
));

257 
	`‰ì
(
Æl_iovs
);

258 
	}
}

267 
	$w‹kî_broke
()

269 i‡(
˛õ¡_sock
 >= 0) {

270 
	`˛o£
(
˛õ¡_sock
);

271 
˛õ¡_sock
 = -1;

273 
	}
}

277 
	g£rvî_sock
 = -1;

278 
boﬁ
 
	gex≥˘_ª∂y
;

279 
w‹kî_ªque°
 
	gªque°
;

299 
	$w‹kî_ª∂y
(c⁄° *
d©a
, 
size_t
 
size
, c⁄° 
fds
[], size_à
n_fds
)

301 i‡(
size
 > 0) {

302 
iovec
 
iov
;

304 
iov
.
iov_ba£
 = (*Ë
d©a
;

305 
iov
.
iov_Àn
 = 
size
;

306 
	`w‹kî_ª∂y_iovec
(&
iov
, 1, 
fds
, 
n_fds
);

308 
	`w‹kî_ª∂y_iovec
(
NULL
, 0, 
fds
, 
n_fds
);

310 
	}
}

315 
	$w‹kî_ª∂y_iovec
(c⁄° 
iovec
 *
iovs
, 
size_t
 
n_iovs
,

316 c⁄° 
fds
[], 
size_t
 
n_fds
)

318 
w‹kî_ª∂y
 
ª∂y
;

319 
iovec
 *
Æl_iovs
;

320 
îr‹
;

322 
	`as£π
(
ex≥˘_ª∂y
);

323 
ex≥˘_ª∂y
 = 
Ál£
;

325 
ª∂y
.
ª∂y_Àn
 = 
	`iovec_Àn
(
iovs
, 
n_iovs
);

326 
ª∂y
.
ª∂y_cb
 = 
ªque°
.reply_cb;

327 
ª∂y
.
ª∂y_aux
 = 
ªque°
.reply_aux;

329 
Æl_iovs
 = 
	`¥efix_iov
(&
ª∂y
, Ñïly, 
iovs
, 
n_iovs
);

331 
îr‹
 = 
	`£nd_iovec_™d_fds_fuŒy_block
(
£rvî_sock
, 
Æl_iovs
, 
n_iovs
 + 1,

332 
fds
, 
n_fds
);

333 i‡(
îr‹
 =
EPIPE
) {

336 
	`VLOG_INFO
("£nd faûed (%s)", 
	`°ªº‹
(
îr‹
));

337 } i‡(
îr‹
) {

338 
	`VLOG_FATAL
("£nd faûed (%s)", 
	`°ªº‹
(
îr‹
));

341 
	`‰ì
(
Æl_iovs
);

342 
	}
}

345 
	$w‹kî_maö
(
fd
)

347 
rxbuf
 
rx
;

349 
£rvî_sock
 = 
fd
;

351 
sub¥ogøm_«me
 = "worker";

352 
	`¥o˘ôÀ_£t
("w‹kîÖro˚s†f‹Öid %lu", (Ë
	`gëµid
());

353 
	`VLOG_INFO
("workerÖrocess started");

355 
	`rxbuf_öô
(&
rx
);

357 
îr‹
;

359 
îr‹
 = 
	`rxbuf_run
(&
rx
, 
£rvî_sock
, (
w‹kî_ªque°
));

360 i‡(!
îr‹
) {

361 
ªque°
 = *(
w‹kî_ªque°
 *Ë
rx
.
hódî
.
d©a
;

363 
ex≥˘_ª∂y
 = 
ªque°
.
ª∂y_cb
 !
NULL
;

364 
ªque°
.
	`ªque°_cb
(&
rx
.
∑ylﬂd
,Ñx.
fds
,Ñx.
n_fds
);

365 
	`as£π
(!
ex≥˘_ª∂y
);

367 
	`rxbuf_˛ór
(&
rx
);

368 } i‡(
îr‹
 =
EOF
 && !
rx
.
hódî
.
size
) {

371 } i‡(
îr‹
 !
EAGAIN
) {

372 
	`VLOG_FATAL
("RPCÑe˚ivêÁûed (%s)", 
	`°ªº‹
(
îr‹
));

375 
	`pﬁl_fd_waô
(
£rvî_sock
, 
POLLIN
);

376 
	`pﬁl_block
();

379 
	`VLOG_INFO
("workerÖrocessÉxiting");

380 
	`exô
(0);

381 
	}
}

384 
	$rxbuf_öô
(
rxbuf
 *
rx
)

386 
	`oÂbuf_öô
(&
rx
->
hódî
, 0);

387 
rx
->
n_fds
 = 0;

388 
	`oÂbuf_öô
(&
rx
->
∑ylﬂd
, 0);

389 
	}
}

392 
	$rxbuf_˛ór
(
rxbuf
 *
rx
)

394 
	`oÂbuf_˛ór
(&
rx
->
hódî
);

395 
rx
->
n_fds
 = 0;

396 
	`oÂbuf_˛ór
(&
rx
->
∑ylﬂd
);

397 
	}
}

400 
	$rxbuf_run
(
rxbuf
 *
rx
, 
sock
, 
size_t
 
hódî_Àn
)

403 i‡(!
rx
->
hódî
.
size
) {

404 
ªtvÆ
;

406 
	`oÂbuf_˛ór
(&
rx
->
hódî
);

407 
	`oÂbuf_¥óŒoc_èûroom
(&
rx
->
hódî
, 
hódî_Àn
);

409 
ªtvÆ
 = 
	`ªcv_d©a_™d_fds
(
sock
, 
rx
->
hódî
.
d©a
, 
hódî_Àn
,

410 
rx
->
fds
, &rx->
n_fds
);

411 i‡(
ªtvÆ
 <= 0) {

412  
ªtvÆ
 ? -ªtvÆ : 
EOF
;

414 
rx
->
hódî
.
size
 +
ªtvÆ
;

415 } i‡(
rx
->
hódî
.
size
 < 
hódî_Àn
) {

416 
size_t
 
byãs_ªad
;

417 
îr‹
;

419 
îr‹
 = 
	`ªad_fuŒy
(
sock
, 
	`oÂbuf_èû
(&
rx
->
hódî
),

420 
hódî_Àn
 - 
rx
->
hódî
.
size
, &
byãs_ªad
);

421 
rx
->
hódî
.
size
 +
byãs_ªad
;

422 i‡(
îr‹
) {

423  
îr‹
;

426 
size_t
 
∑ylﬂd_Àn
 = *(size_à*Ë
rx
->
hódî
.
d©a
;

428 i‡(
rx
->
∑ylﬂd
.
size
 < 
∑ylﬂd_Àn
) {

429 
size_t
 
À·
 = 
∑ylﬂd_Àn
 - 
rx
->
∑ylﬂd
.
size
;

430 
size_t
 
byãs_ªad
;

431 
îr‹
;

433 
	`oÂbuf_¥óŒoc_èûroom
(&
rx
->
∑ylﬂd
, 
À·
);

434 
îr‹
 = 
	`ªad_fuŒy
(
sock
, 
	`oÂbuf_èû
(&
rx
->
∑ylﬂd
), 
À·
,

435 &
byãs_ªad
);

436 
rx
->
∑ylﬂd
.
size
 +
byãs_ªad
;

437 i‡(
îr‹
) {

438  
îr‹
;

446  
EAGAIN
;

447 
	}
}

449 
iovec
 *

450 
	$¥efix_iov
(*
d©a
, 
size_t
 
Àn
, c⁄° 
iovec
 *
iovs
, size_à
n_iovs
)

452 
iovec
 *
d°
;

454 
d°
 = 
	`xmÆloc
((
n_iovs
 + 1) *  *dst);

455 
d°
[0].
iov_ba£
 = 
d©a
;

456 
d°
[0].
iov_Àn
 = 
Àn
;

457 
	`mem˝y
(
d°
 + 1, 
iovs
, 
n_iovs
 *  *iovs);

459  
d°
;

460 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/lib/worker.h

16 #i‚de‡
WORKER_H


17 
	#WORKER_H
 1

	)

33 
	~<°dboﬁ.h
>

34 
	~<°ddef.h
>

35 
	~"compûî.h
"

37 
	giovec
;

38 
	goÂbuf
;

41 
w‹kî_°¨t
();

44 
	tw‹kî_ªque°_func
(
	toÂbuf
 *
	tªque°
,

45 c⁄° 
	tfds
[], 
	tsize_t
 
	tn_fds
);

46 
	tw‹kî_ª∂y_func
(
	toÂbuf
 *
	tª∂y
,

47 c⁄° 
	tfds
[], 
	tsize_t
 
	tn_fds
, *
	taux
);

49 
boﬁ
 
w‹kî_is_ru¬ög
();

50 
w‹kî_run
();

51 
w‹kî_waô
();

53 
w‹kî_ªque°
(c⁄° *
d©a
, 
size_t
 
size
,

54 c⁄° 
fds
[], 
size_t
 
n_fds
,

55 
w‹kî_ªque°_func
 *
ªque°_cb
,

56 
w‹kî_ª∂y_func
 *
ª∂y_cb
, *
aux
);

57 
w‹kî_ªque°_iovec
(c⁄° 
iovec
 *
iovs
, 
size_t
 
n_iovs
,

58 c⁄° 
fds
[], 
size_t
 
n_fds
,

59 
w‹kî_ªque°_func
 *
ªque°_cb
,

60 
w‹kî_ª∂y_func
 *
ª∂y_cb
, *
aux
);

63 
w‹kî_ª∂y
(c⁄° *
d©a
, 
size_t
 
size
,

64 c⁄° 
fds
[], 
size_t
 
n_fds
);

65 
w‹kî_ª∂y_iovec
(c⁄° 
iovec
 *
iovs
, 
size_t
 
n_iovs
,

66 c⁄° 
fds
[], 
size_t
 
n_fds
);

	@/home/lsch/mytest/openvswitch-1.9.0/ofproto/collectors.c

17 
	~<c⁄fig.h
>

19 
	~"cﬁÀ˘‹s.h
"

21 
	~<î∫o.h
>

22 
	~<°dlib.h
>

23 
	~<sys/sockë.h
>

24 
	~<uni°d.h
>

26 
	~"sockë-utû.h
"

27 
	~"s£t.h
"

28 
	~"utû.h
"

29 
	~"vlog.h
"

31 
VLOG_DEFINE_THIS_MODULE
(
cﬁÀ˘‹s
);

33 
	scﬁÀ˘‹s
 {

34 *
	mfds
;

35 
size_t
 
	mn_fds
;

52 
	$cﬁÀ˘‹s_¸óã
(c⁄° 
s£t
 *
èrgës
, 
uöt16_t
 
deÁu…_p‹t
,

53 
cﬁÀ˘‹s
 **
cﬁÀ˘‹•
)

55 
cﬁÀ˘‹s
 *
c
;

56 c⁄° *
«me
;

57 
ªtvÆ
 = 0;

59 
c
 = 
	`xmÆloc
( *c);

60 
c
->
fds
 = 
	`xmÆloc
( *c->fd†* 
	`s£t_cou¡
(
èrgës
));

61 
c
->
n_fds
 = 0;

62 
	`SSET_FOR_EACH
 (
«me
, 
èrgës
) {

63 
îr‹
;

64 
fd
;

66 
îr‹
 = 
	`öë_›í_a˘ive
(
SOCK_DGRAM
, 
«me
, 
deÁu…_p‹t
, 
NULL
, &
fd
, 0);

67 i‡(
fd
 >= 0) {

68 
c
->
fds
[c->
n_fds
++] = 
fd
;

70 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 5);

72 
	`VLOG_WARN_RL
(&
æ
, "couldn't open connectionÅo collector %s (%s)",

73 
«me
, 
	`°ªº‹
(
îr‹
));

74 i‡(!
ªtvÆ
) {

75 
ªtvÆ
 = 
îr‹
;

80 i‡(
c
->
n_fds
) {

81 *
cﬁÀ˘‹•
 = 
c
;

83 
	`cﬁÀ˘‹s_de°roy
(
c
);

84 *
cﬁÀ˘‹•
 = 
NULL
;

87  
ªtvÆ
;

88 
	}
}

92 
	$cﬁÀ˘‹s_de°roy
(
cﬁÀ˘‹s
 *
c
)

94 i‡(
c
) {

95 
size_t
 
i
;

97 
i
 = 0; i < 
c
->
n_fds
; i++) {

98 
	`˛o£
(
c
->
fds
[
i
]);

100 
	`‰ì
(
c
->
fds
);

101 
	`‰ì
(
c
);

103 
	}
}

107 
	$cﬁÀ˘‹s_£nd
(c⁄° 
cﬁÀ˘‹s
 *
c
, c⁄° *
∑ylﬂd
, 
size_t
 
n
)

109 i‡(
c
) {

110 
size_t
 
i
;

112 
i
 = 0; i < 
c
->
n_fds
; i++) {

113 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 5);

114 i‡(
	`£nd
(
c
->
fds
[
i
], 
∑ylﬂd
, 
n
, 0) == -1) {

115 
	`VLOG_WARN_RL
(&
æ
, "sendingÅo collector failed: %s",

116 
	`°ªº‹
(
î∫o
));

120 
	}
}

123 
	$cﬁÀ˘‹s_cou¡
(c⁄° 
cﬁÀ˘‹s
 *
c
)

125  
c
 ? c->
n_fds
 : 0;

126 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/ofproto/collectors.h

17 #i‚de‡
COLLECTORS_H


18 
	#COLLECTORS_H
 1

	)

20 
	~<°ddef.h
>

21 
	~<°döt.h
>

23 
	gcﬁÀ˘‹s
;

24 
	gs£t
;

26 
cﬁÀ˘‹s_¸óã
(c⁄° 
s£t
 *
èrgës
, 
uöt16_t
 
deÁu…_p‹t
,

27 
cﬁÀ˘‹s
 **);

28 
cﬁÀ˘‹s_de°roy
(
cﬁÀ˘‹s
 *);

30 
cﬁÀ˘‹s_£nd
(c⁄° 
cﬁÀ˘‹s
 *, c⁄° *, 
size_t
);

32 
cﬁÀ˘‹s_cou¡
(c⁄° 
cﬁÀ˘‹s
 *);

	@/home/lsch/mytest/openvswitch-1.9.0/ofproto/connmgr.c

17 
	~<c⁄fig.h
>

19 
	~"c⁄nmgr.h
"

21 
	~<î∫o.h
>

22 
	~<°dlib.h
>

24 
	~"covîage.h
"

25 
	~"Áû-›í.h
"

26 
	~"ö-b™d.h
"

27 
	~"odp-utû.h
"

28 
	~"oÂ-a˘i⁄s.h
"

29 
	~"oÂ-msgs.h
"

30 
	~"oÂ-utû.h
"

31 
	~"oÂbuf.h
"

32 
	~"oÂrŸo-¥ovidî.h
"

33 
	~"pösched.h
"

34 
	~"pﬁl-lo›.h
"

35 
	~"pktbuf.h
"

36 
	~"rc⁄n.h
"

37 
	~"shash.h
"

38 
	~"sim≠.h
"

39 
	~"°ªam.h
"

40 
	~"timevÆ.h
"

41 
	~"vc⁄n.h
"

42 
	~"vlog.h
"

44 
VLOG_DEFINE_THIS_MODULE
(
c⁄nmgr
);

45 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(1, 5);

48 
	sofc⁄n
 {

51 
li°
 
	mnode
;

52 
hm≠_node
 
	mhm≠_node
;

54 
c⁄nmgr
 *
	mc⁄nmgr
;

55 
rc⁄n
 *
	mrc⁄n
;

56 
ofc⁄n_ty≥
 
	mty≥
;

57 
oÂrŸo_b™d
 
	mb™d
;

58 
boﬁ
 
	míabÀ_async_msgs
;

63 
nx_rﬁe
 
	mrﬁe
;

64 
oÂutû_¥Ÿocﬁ
 
	m¥Ÿocﬁ
;

65 
nx_∑ckë_ö_f‹m©
 
	m∑ckë_ö_f‹m©
;

68 
li°
 
	m›groups
;

69 
oÂbuf
 *
	mblocked
;

70 
boﬁ
 
	mªåy
;

73 
rc⁄n_∑ckë_cou¡î
 *
	m∑ckë_ö_cou¡î
;

74 
	#N_SCHEDULERS
 2

	)

75 
pösched
 *
	mscheduÀrs
[
N_SCHEDULERS
];

76 
pktbuf
 *
	mpktbuf
;

77 
	mmiss_£nd_Àn
;

78 
uöt16_t
 
	mc⁄åﬁÀr_id
;

83 
	#OFCONN_REPLY_MAX
 100

	)

84 
rc⁄n_∑ckë_cou¡î
 *
	mª∂y_cou¡î
;

90 
uöt32_t
 
	mma°î_async_c⁄fig
[
OAM_N_TYPES
];

91 
uöt32_t
 
	m¶ave_async_c⁄fig
[
OAM_N_TYPES
];

94 
hm≠
 
	mm⁄ô‹s
;

95 
li°
 
	mupd©es
;

96 
boﬁ
 
	m£¡_abbªv_upd©e
;

97 
rc⁄n_∑ckë_cou¡î
 *
	mm⁄ô‹_cou¡î
;

98 
uöt64_t
 
	mm⁄ô‹_∑u£d
;

101 
ofc⁄n
 *
ofc⁄n_¸óã
(
c⁄nmgr
 *, 
rc⁄n
 *,

102 
ofc⁄n_ty≥
, 
boﬁ
 
íabÀ_async_msgs
);

103 
ofc⁄n_de°roy
(
ofc⁄n
 *);

104 
ofc⁄n_Êush
(
ofc⁄n
 *);

106 
ofc⁄n_ªc⁄figuª
(
ofc⁄n
 *,

107 c⁄° 
oÂrŸo_c⁄åﬁÀr
 *);

109 
ofc⁄n_run
(
ofc⁄n
 *,

110 
	$boﬁ
 (*
h™dÀ_›íÊow
)(
ofc⁄n
 *,

111 
oÂbuf
 *
oÂ_msg
));

112 
	`ofc⁄n_waô
(
ofc⁄n
 *, 
boﬁ
 
h™dlög_›íÊow
);

114 c⁄° *
	`ofc⁄n_gë_èrgë
(c⁄° 
ofc⁄n
 *);

115 *
	`ofc⁄n_make_«me
(c⁄° 
c⁄nmgr
 *, c⁄° *
èrgë
);

117 
	`ofc⁄n_£t_øã_limô
(
ofc⁄n
 *, 
øã
, 
bur°
);

119 
	`ofc⁄n_£nd
(c⁄° 
ofc⁄n
 *, 
oÂbuf
 *,

120 
rc⁄n_∑ckë_cou¡î
 *);

122 
	`do_£nd_∑ckë_ö
(
oÂbuf
 *, *
ofc⁄n_
);

125 
	sof£rvi˚
 {

126 
hm≠_node
 
node
;

127 
pvc⁄n
 *pvconn;

131 
¥obe_öãrvÆ
;

132 
øã_limô
;

133 
bur°_limô
;

134 
boﬁ
 
íabÀ_async_msgs
;

135 
uöt8_t
 
ds˝
;

138 
	`of£rvi˚_ªc⁄figuª
(
of£rvi˚
 *,

139 c⁄° 
oÂrŸo_c⁄åﬁÀr
 *);

140 
	`of£rvi˚_¸óã
(
c⁄nmgr
 *, c⁄° *
èrgë
, 
uöt8_t
 
ds˝
);

141 
	`of£rvi˚_de°roy
(
c⁄nmgr
 *, 
of£rvi˚
 *);

142 
of£rvi˚
 *
	`of£rvi˚_lookup
(
c⁄nmgr
 *,

143 c⁄° *
èrgë
);

146 
	sc⁄nmgr
 {

147 
oÂrŸo
 *ofproto;

148 *
«me
;

149 *
loˇl_p‹t_«me
;

152 
hm≠
 
c⁄åﬁÀrs
;

153 
li°
 
Æl_c⁄ns
;

156 
hm≠
 
£rvi˚s
;

157 
pvc⁄n
 **
¢o›s
;

158 
size_t
 
n_¢o›s
;

161 
Áû_›í
 *fail_open;

162 
oÂrŸo_Áû_mode
 
Áû_mode
;

165 
ö_b™d
 *in_band;

166 
sockaddr_ö
 *
exåa_ö_b™d_ªmŸes
;

167 
size_t
 
n_exåa_ªmŸes
;

168 
ö_b™d_queue
;

171 
	`upd©e_ö_b™d_ªmŸes
(
c⁄nmgr
 *);

172 
	`add_¢o›î
(
c⁄nmgr
 *, 
vc⁄n
 *);

173 
	`ofm⁄ô‹_run
(
c⁄nmgr
 *);

174 
	`ofm⁄ô‹_waô
(
c⁄nmgr
 *);

180 
c⁄nmgr
 *

181 
	$c⁄nmgr_¸óã
(
oÂrŸo
 *ofproto,

182 c⁄° *
«me
, c⁄° *
loˇl_p‹t_«me
)

184 
c⁄nmgr
 *
mgr
;

186 
mgr
 = 
	`xmÆloc
( *mgr);

187 
mgr
->
oÂrŸo
 = ofproto;

188 
mgr
->
«me
 = 
	`x°rdup
(name);

189 
mgr
->
loˇl_p‹t_«me
 = 
	`x°rdup
(local_port_name);

191 
	`hm≠_öô
(&
mgr
->
c⁄åﬁÀrs
);

192 
	`li°_öô
(&
mgr
->
Æl_c⁄ns
);

194 
	`hm≠_öô
(&
mgr
->
£rvi˚s
);

195 
mgr
->
¢o›s
 = 
NULL
;

196 
mgr
->
n_¢o›s
 = 0;

198 
mgr
->
Áû_›í
 = 
NULL
;

199 
mgr
->
Áû_mode
 = 
OFPROTO_FAIL_SECURE
;

201 
mgr
->
ö_b™d
 = 
NULL
;

202 
mgr
->
exåa_ö_b™d_ªmŸes
 = 
NULL
;

203 
mgr
->
n_exåa_ªmŸes
 = 0;

204 
mgr
->
ö_b™d_queue
 = -1;

206  
mgr
;

207 
	}
}

211 
	$c⁄nmgr_de°roy
(
c⁄nmgr
 *
mgr
)

213 
of£rvi˚
 *of£rvi˚, *
√xt_of£rvi˚
;

214 
ofc⁄n
 *ofc⁄n, *
√xt_ofc⁄n
;

215 
size_t
 
i
;

217 i‡(!
mgr
) {

221 
	`LIST_FOR_EACH_SAFE
 (
ofc⁄n
, 
√xt_ofc⁄n
, 
node
, &
mgr
->
Æl_c⁄ns
) {

222 
	`ofc⁄n_de°roy
(
ofc⁄n
);

224 
	`hm≠_de°roy
(&
mgr
->
c⁄åﬁÀrs
);

226 
	`HMAP_FOR_EACH_SAFE
 (
of£rvi˚
, 
√xt_of£rvi˚
, 
node
, &
mgr
->
£rvi˚s
) {

227 
	`of£rvi˚_de°roy
(
mgr
, 
of£rvi˚
);

229 
	`hm≠_de°roy
(&
mgr
->
£rvi˚s
);

231 
i
 = 0; i < 
mgr
->
n_¢o›s
; i++) {

232 
	`pvc⁄n_˛o£
(
mgr
->
¢o›s
[
i
]);

234 
	`‰ì
(
mgr
->
¢o›s
);

236 
	`Áû_›í_de°roy
(
mgr
->
Áû_›í
);

237 
mgr
->
Áû_›í
 = 
NULL
;

239 
	`ö_b™d_de°roy
(
mgr
->
ö_b™d
);

240 
mgr
->
ö_b™d
 = 
NULL
;

241 
	`‰ì
(
mgr
->
exåa_ö_b™d_ªmŸes
);

242 
	`‰ì
(
mgr
->
«me
);

243 
	`‰ì
(
mgr
->
loˇl_p‹t_«me
);

245 
	`‰ì
(
mgr
);

246 
	}
}

263 
c⁄nmgr_run
(
c⁄nmgr
 *
mgr
,

264 
	$boﬁ
 (*
h™dÀ_›íÊow
)(
ofc⁄n
 *, 
oÂbuf
 *
oÂ_msg
))

266 
ofc⁄n
 *ofc⁄n, *
√xt_ofc⁄n
;

267 
of£rvi˚
 *ofservice;

268 
size_t
 
i
;

270 i‡(
h™dÀ_›íÊow
 && 
mgr
->
ö_b™d
) {

271 i‡(!
	`ö_b™d_run
(
mgr
->
ö_b™d
)) {

272 
	`ö_b™d_de°roy
(
mgr
->
ö_b™d
);

273 
mgr
->
ö_b™d
 = 
NULL
;

277 
	`LIST_FOR_EACH_SAFE
 (
ofc⁄n
, 
√xt_ofc⁄n
, 
node
, &
mgr
->
Æl_c⁄ns
) {

278 
	`ofc⁄n_run
(
ofc⁄n
, 
h™dÀ_›íÊow
);

280 
	`ofm⁄ô‹_run
(
mgr
);

284 i‡(
h™dÀ_›íÊow
 && 
mgr
->
Áû_›í
) {

285 
	`Áû_›í_run
(
mgr
->
Áû_›í
);

288 
	`HMAP_FOR_EACH
 (
of£rvi˚
, 
node
, &
mgr
->
£rvi˚s
) {

289 
vc⁄n
 *vconn;

290 
ªtvÆ
;

292 
ªtvÆ
 = 
	`pvc⁄n_ac˚±
(
of£rvi˚
->
pvc⁄n
, 
OFP10_VERSION
, &
vc⁄n
);

293 i‡(!
ªtvÆ
) {

294 
rc⁄n
 *rconn;

295 *
«me
;

298 
rc⁄n
 = 
	`rc⁄n_¸óã
(
of£rvi˚
->
¥obe_öãrvÆ
, 0, of£rvi˚->
ds˝
);

299 
«me
 = 
	`ofc⁄n_make_«me
(
mgr
, 
	`vc⁄n_gë_«me
(
vc⁄n
));

300 
	`rc⁄n_c⁄√˘_uƒñübly
(
rc⁄n
, 
vc⁄n
, 
«me
);

301 
	`‰ì
(
«me
);

303 
ofc⁄n
 = 
	`ofc⁄n_¸óã
(
mgr
, 
rc⁄n
, 
OFCONN_SERVICE
,

304 
of£rvi˚
->
íabÀ_async_msgs
);

305 
	`ofc⁄n_£t_øã_limô
(
ofc⁄n
, 
of£rvi˚
->
øã_limô
,

306 
of£rvi˚
->
bur°_limô
);

307 } i‡(
ªtvÆ
 !
EAGAIN
) {

308 
	`VLOG_WARN_RL
(&
æ
, "ac˚± faûed (%s)", 
	`°ªº‹
(
ªtvÆ
));

312 
i
 = 0; i < 
mgr
->
n_¢o›s
; i++) {

313 
vc⁄n
 *vconn;

314 
ªtvÆ
;

316 
ªtvÆ
 = 
	`pvc⁄n_ac˚±
(
mgr
->
¢o›s
[
i
], 
OFP10_VERSION
, &
vc⁄n
);

317 i‡(!
ªtvÆ
) {

318 
	`add_¢o›î
(
mgr
, 
vc⁄n
);

319 } i‡(
ªtvÆ
 !
EAGAIN
) {

320 
	`VLOG_WARN_RL
(&
æ
, "ac˚± faûed (%s)", 
	`°ªº‹
(
ªtvÆ
));

323 
	}
}

331 
	$c⁄nmgr_waô
(
c⁄nmgr
 *
mgr
, 
boﬁ
 
h™dlög_›íÊow
)

333 
of£rvi˚
 *ofservice;

334 
ofc⁄n
 *ofconn;

335 
size_t
 
i
;

337 
	`LIST_FOR_EACH
 (
ofc⁄n
, 
node
, &
mgr
->
Æl_c⁄ns
) {

338 
	`ofc⁄n_waô
(
ofc⁄n
, 
h™dlög_›íÊow
);

340 
	`ofm⁄ô‹_waô
(
mgr
);

341 i‡(
h™dlög_›íÊow
 && 
mgr
->
ö_b™d
) {

342 
	`ö_b™d_waô
(
mgr
->
ö_b™d
);

344 i‡(
h™dlög_›íÊow
 && 
mgr
->
Áû_›í
) {

345 
	`Áû_›í_waô
(
mgr
->
Áû_›í
);

347 
	`HMAP_FOR_EACH
 (
of£rvi˚
, 
node
, &
mgr
->
£rvi˚s
) {

348 
	`pvc⁄n_waô
(
of£rvi˚
->
pvc⁄n
);

350 
i
 = 0; i < 
mgr
->
n_¢o›s
; i++) {

351 
	`pvc⁄n_waô
(
mgr
->
¢o›s
[
i
]);

353 
	}
}

358 
	$c⁄nmgr_gë_mem‹y_ußge
(c⁄° 
c⁄nmgr
 *
mgr
, 
sim≠
 *
ußge
)

360 c⁄° 
ofc⁄n
 *ofconn;

361 
∑ckës
 = 0;

362 
ofc⁄ns
 = 0;

364 
	`LIST_FOR_EACH
 (
ofc⁄n
, 
node
, &
mgr
->
Æl_c⁄ns
) {

365 
i
;

367 
ofc⁄ns
++;

369 
∑ckës
 +
	`rc⁄n_cou¡_txqÀn
(
ofc⁄n
->
rc⁄n
);

370 
i
 = 0; i < 
N_SCHEDULERS
; i++) {

371 
∑ckës
 +
	`pösched_cou¡_txqÀn
(
ofc⁄n
->
scheduÀrs
[
i
]);

373 
∑ckës
 +
	`pktbuf_cou¡_∑ckës
(
ofc⁄n
->
pktbuf
);

375 
	`sim≠_ö¸ó£
(
ußge
, "ofc⁄ns", 
ofc⁄ns
);

376 
	`sim≠_ö¸ó£
(
ußge
, "∑ckës", 
∑ckës
);

377 
	}
}

380 
oÂrŸo
 *

381 
	$ofc⁄n_gë_oÂrŸo
(c⁄° 
ofc⁄n
 *ofconn)

383  
ofc⁄n
->
c⁄nmgr
->
oÂrŸo
;

384 
	}
}

390 
	$c⁄nmgr_ªåy
(
c⁄nmgr
 *
mgr
)

392 
ofc⁄n
 *ofconn;

394 
	`LIST_FOR_EACH
 (
ofc⁄n
, 
node
, &
mgr
->
Æl_c⁄ns
) {

395 
ofc⁄n
->
ªåy
 = 
åue
;

397 
	}
}

401 
add_c⁄åﬁÀr
(
c⁄nmgr
 *, c⁄° *
èrgë
, 
uöt8_t
 
ds˝
);

402 
ofc⁄n
 *
föd_c⁄åﬁÀr_by_èrgë
(
c⁄nmgr
 *,

403 c⁄° *
èrgë
);

404 
upd©e_Áû_›í
(
c⁄nmgr
 *);

405 
£t_pvc⁄ns
(
pvc⁄n
 ***
pvc⁄n•
, 
size_t
 *
n_pvc⁄n•
,

406 c⁄° 
s£t
 *);

412 
boﬁ


413 
	$c⁄nmgr_has_c⁄åﬁÀrs
(c⁄° 
c⁄nmgr
 *
mgr
)

415  !
	`hm≠_is_em±y
(&
mgr
->
c⁄åﬁÀrs
);

416 
	}
}

425 
	$c⁄nmgr_gë_c⁄åﬁÀr_öfo
(
c⁄nmgr
 *
mgr
, 
shash
 *
öfo
)

427 c⁄° 
ofc⁄n
 *ofconn;

429 
	`HMAP_FOR_EACH
 (
ofc⁄n
, 
hm≠_node
, &
mgr
->
c⁄åﬁÀrs
) {

430 c⁄° 
rc⁄n
 *rc⁄¿
ofc⁄n
->rconn;

431 c⁄° *
èrgë
 = 
	`rc⁄n_gë_èrgë
(
rc⁄n
);

433 i‡(!
	`shash_föd
(
öfo
, 
èrgë
)) {

434 
oÂrŸo_c⁄åﬁÀr_öfo
 *
cöfo
 = 
	`xmÆloc
( *cinfo);

435 
time_t
 
now
 = 
	`time_now
();

436 
time_t
 
œ°_c⁄√˘i⁄
 = 
	`rc⁄n_gë_œ°_c⁄√˘i⁄
(
rc⁄n
);

437 
time_t
 
œ°_disc⁄√˘
 = 
	`rc⁄n_gë_œ°_disc⁄√˘
(
rc⁄n
);

438 
œ°_îr‹
 = 
	`rc⁄n_gë_œ°_îr‹
(
rc⁄n
);

440 
	`shash_add
(
öfo
, 
èrgë
, 
cöfo
);

442 
cöfo
->
is_c⁄√˘ed
 = 
	`rc⁄n_is_c⁄√˘ed
(
rc⁄n
);

443 
cöfo
->
rﬁe
 = 
ofc⁄n
->role;

445 
cöfo
->
∑ús
.
n
 = 0;

447 i‡(
œ°_îr‹
) {

448 
cöfo
->
∑ús
.
keys
[cöfo->∑ús.
n
] = "last_error";

449 
cöfo
->
∑ús
.
vÆues
[cöfo->∑ús.
n
++]

450 
	`x°rdup
(
	`ovs_ªtvÆ_to_°rög
(
œ°_îr‹
));

453 
cöfo
->
∑ús
.
keys
[cöfo->∑ús.
n
] = "state";

454 
cöfo
->
∑ús
.
vÆues
[cöfo->∑ús.
n
++]

455 
	`x°rdup
(
	`rc⁄n_gë_°©e
(
rc⁄n
));

457 i‡(
œ°_c⁄√˘i⁄
 !
TIME_MIN
) {

458 
cöfo
->
∑ús
.
keys
[cöfo->∑ús.
n
] = "sec_since_connect";

459 
cöfo
->
∑ús
.
vÆues
[cöfo->∑ús.
n
++]

460 
	`xa•rötf
("%ld", (Ë(
now
 - 
œ°_c⁄√˘i⁄
));

463 i‡(
œ°_disc⁄√˘
 !
TIME_MIN
) {

464 
cöfo
->
∑ús
.
keys
[cöfo->∑ús.
n
] = "sec_since_disconnect";

465 
cöfo
->
∑ús
.
vÆues
[cöfo->∑ús.
n
++]

466 
	`xa•rötf
("%ld", (Ë(
now
 - 
œ°_disc⁄√˘
));

470 
	}
}

473 
	$c⁄nmgr_‰ì_c⁄åﬁÀr_öfo
(
shash
 *
öfo
)

475 
shash_node
 *
node
;

477 
	`SHASH_FOR_EACH
 (
node
, 
öfo
) {

478 
oÂrŸo_c⁄åﬁÀr_öfo
 *
cöfo
 = 
node
->
d©a
;

479 
cöfo
->
∑ús
.
n
) {

480 
	`‰ì
(
	`CONST_CAST
(*, 
cöfo
->
∑ús
.
vÆues
[--cöfo->∑ús.
n
]));

482 
	`‰ì
(
cöfo
);

484 
	`shash_de°roy
(
öfo
);

485 
	}
}

490 
	$c⁄nmgr_£t_c⁄åﬁÀrs
(
c⁄nmgr
 *
mgr
,

491 c⁄° 
oÂrŸo_c⁄åﬁÀr
 *
c⁄åﬁÀrs
,

492 
size_t
 
n_c⁄åﬁÀrs
)

494 
boﬁ
 
had_c⁄åﬁÀrs
 = 
	`c⁄nmgr_has_c⁄åﬁÀrs
(
mgr
);

495 
shash
 
√w_c⁄åﬁÀrs
;

496 
ofc⁄n
 *ofc⁄n, *
√xt_ofc⁄n
;

497 
of£rvi˚
 *of£rvi˚, *
√xt_of£rvi˚
;

498 
size_t
 
i
;

502 
	`shash_öô
(&
√w_c⁄åﬁÀrs
);

503 
i
 = 0; i < 
n_c⁄åﬁÀrs
; i++) {

504 c⁄° 
oÂrŸo_c⁄åﬁÀr
 *
c
 = &
c⁄åﬁÀrs
[
i
];

506 i‡(!
	`vc⁄n_vîify_«me
(
c
->
èrgë
)) {

507 i‡(!
	`föd_c⁄åﬁÀr_by_èrgë
(
mgr
, 
c
->
èrgë
)) {

508 
	`VLOG_INFO
("%s:áddedÖrimary controller \"%s\"",

509 
mgr
->
«me
, 
c
->
èrgë
);

510 
	`add_c⁄åﬁÀr
(
mgr
, 
c
->
èrgë
, c->
ds˝
);

512 } i‡(!
	`pvc⁄n_vîify_«me
(
c
->
èrgë
)) {

513 i‡(!
	`of£rvi˚_lookup
(
mgr
, 
c
->
èrgë
)) {

514 
	`VLOG_INFO
("%s:ádded service controller \"%s\"",

515 
mgr
->
«me
, 
c
->
èrgë
);

516 
	`of£rvi˚_¸óã
(
mgr
, 
c
->
èrgë
, c->
ds˝
);

519 
	`VLOG_WARN_RL
(&
æ
, "%s: unsupported controller \"%s\"",

520 
mgr
->
«me
, 
c
->
èrgë
);

524 
	`shash_add_⁄˚
(&
√w_c⁄åﬁÀrs
, 
c
->
èrgë
, &
c⁄åﬁÀrs
[
i
]);

529 
	`HMAP_FOR_EACH_SAFE
 (
ofc⁄n
, 
√xt_ofc⁄n
, 
hm≠_node
, &
mgr
->
c⁄åﬁÀrs
) {

530 c⁄° *
èrgë
 = 
	`ofc⁄n_gë_èrgë
(
ofc⁄n
);

531 
oÂrŸo_c⁄åﬁÀr
 *
c
;

533 
c
 = 
	`shash_föd_d©a
(&
√w_c⁄åﬁÀrs
, 
èrgë
);

534 i‡(!
c
) {

535 
	`VLOG_INFO
("%s:ÑemovedÖrimary controller \"%s\"",

536 
mgr
->
«me
, 
èrgë
);

537 
	`ofc⁄n_de°roy
(
ofc⁄n
);

539 
	`ofc⁄n_ªc⁄figuª
(
ofc⁄n
, 
c
);

545 
	`HMAP_FOR_EACH_SAFE
 (
of£rvi˚
, 
√xt_of£rvi˚
, 
node
, &
mgr
->
£rvi˚s
) {

546 c⁄° *
èrgë
 = 
	`pvc⁄n_gë_«me
(
of£rvi˚
->
pvc⁄n
);

547 
oÂrŸo_c⁄åﬁÀr
 *
c
;

549 
c
 = 
	`shash_föd_d©a
(&
√w_c⁄åﬁÀrs
, 
èrgë
);

550 i‡(!
c
) {

551 
	`VLOG_INFO
("%s:Ñemoved service controller \"%s\"",

552 
mgr
->
«me
, 
èrgë
);

553 
	`of£rvi˚_de°roy
(
mgr
, 
of£rvi˚
);

555 
	`of£rvi˚_ªc⁄figuª
(
of£rvi˚
, 
c
);

559 
	`shash_de°roy
(&
√w_c⁄åﬁÀrs
);

561 
	`upd©e_ö_b™d_ªmŸes
(
mgr
);

562 
	`upd©e_Áû_›í
(
mgr
);

563 i‡(
had_c⁄åﬁÀrs
 !
	`c⁄nmgr_has_c⁄åﬁÀrs
(
mgr
)) {

564 
	`oÂrŸo_Êush_Êows
(
mgr
->
oÂrŸo
);

566 
	}
}

571 
	$c⁄nmgr_ªc⁄√˘
(c⁄° 
c⁄nmgr
 *
mgr
)

573 
ofc⁄n
 *ofconn;

575 
	`LIST_FOR_EACH
 (
ofc⁄n
, 
node
, &
mgr
->
Æl_c⁄ns
) {

576 
	`rc⁄n_ªc⁄√˘
(
ofc⁄n
->
rc⁄n
);

578 
	}
}

585 
	$c⁄nmgr_£t_¢o›s
(
c⁄nmgr
 *
mgr
, c⁄° 
s£t
 *
¢o›s
)

587  
	`£t_pvc⁄ns
(&
mgr
->
¢o›s
, &mgr->
n_¢o›s
, snoops);

588 
	}
}

592 
	$c⁄nmgr_gë_¢o›s
(c⁄° 
c⁄nmgr
 *
mgr
, 
s£t
 *
¢o›s
)

594 
size_t
 
i
;

596 
i
 = 0; i < 
mgr
->
n_¢o›s
; i++) {

597 
	`s£t_add
(
¢o›s
, 
	`pvc⁄n_gë_«me
(
mgr
->¢o›s[
i
]));

599 
	}
}

602 
boﬁ


603 
	$c⁄nmgr_has_¢o›s
(c⁄° 
c⁄nmgr
 *
mgr
)

605  
mgr
->
n_¢o›s
 > 0;

606 
	}
}

611 
	$add_c⁄åﬁÀr
(
c⁄nmgr
 *
mgr
, c⁄° *
èrgë
, 
uöt8_t
 
ds˝
)

613 *
«me
 = 
	`ofc⁄n_make_«me
(
mgr
, 
èrgë
);

614 
ofc⁄n
 *ofconn;

616 
ofc⁄n
 = 
	`ofc⁄n_¸óã
(
mgr
, 
	`rc⁄n_¸óã
(5, 8, 
ds˝
), 
OFCONN_PRIMARY
, 
åue
);

617 
ofc⁄n
->
pktbuf
 = 
	`pktbuf_¸óã
();

618 
	`rc⁄n_c⁄√˘
(
ofc⁄n
->
rc⁄n
, 
èrgë
, 
«me
);

619 
	`hm≠_ö£π
(&
mgr
->
c⁄åﬁÀrs
, &
ofc⁄n
->
hm≠_node
, 
	`hash_°rög
(
èrgë
, 0));

621 
	`‰ì
(
«me
);

622 
	}
}

624 
ofc⁄n
 *

625 
	$föd_c⁄åﬁÀr_by_èrgë
(
c⁄nmgr
 *
mgr
, c⁄° *
èrgë
)

627 
ofc⁄n
 *ofconn;

629 
	`HMAP_FOR_EACH_WITH_HASH
 (
ofc⁄n
, 
hm≠_node
,

630 
	`hash_°rög
(
èrgë
, 0), &
mgr
->
c⁄åﬁÀrs
) {

631 i‡(!
	`°rcmp
(
	`ofc⁄n_gë_èrgë
(
ofc⁄n
), 
èrgë
)) {

632  
ofc⁄n
;

635  
NULL
;

636 
	}
}

639 
	$upd©e_ö_b™d_ªmŸes
(
c⁄nmgr
 *
mgr
)

641 
sockaddr_ö
 *
addrs
;

642 
size_t
 
max_addrs
, 
n_addrs
;

643 
ofc⁄n
 *ofconn;

644 
size_t
 
i
;

647 
max_addrs
 = 
mgr
->
n_exåa_ªmŸes
 + 
	`hm≠_cou¡
(&mgr->
c⁄åﬁÀrs
);

648 
addrs
 = 
	`xmÆloc
(
max_addrs
 *  *addrs);

649 
n_addrs
 = 0;

652 
	`HMAP_FOR_EACH
 (
ofc⁄n
, 
hm≠_node
, &
mgr
->
c⁄åﬁÀrs
) {

653 
sockaddr_ö
 *
sö
 = &
addrs
[
n_addrs
];

654 c⁄° *
èrgë
 = 
	`rc⁄n_gë_èrgë
(
ofc⁄n
->
rc⁄n
);

656 i‡(
ofc⁄n
->
b™d
 =
OFPROTO_OUT_OF_BAND
) {

660 i‡(
	`°ªam_∑r£_èrgë_wôh_deÁu…_p‹ts
(
èrgë
,

661 
OFP_TCP_PORT
,

662 
OFP_SSL_PORT
,

663 
sö
)) {

664 
n_addrs
++;

667 
i
 = 0; i < 
mgr
->
n_exåa_ªmŸes
; i++) {

668 
addrs
[
n_addrs
++] = 
mgr
->
exåa_ö_b™d_ªmŸes
[
i
];

672 i‡(
n_addrs
) {

673 i‡(!
mgr
->
ö_b™d
) {

674 
	`ö_b™d_¸óã
(
mgr
->
oÂrŸo
, mgr->
loˇl_p‹t_«me
, &mgr->
ö_b™d
);

676 
	`ö_b™d_£t_queue
(
mgr
->
ö_b™d
, mgr->
ö_b™d_queue
);

681 i‡(
mgr
->
ö_b™d
) {

682 
	`ö_b™d_£t_ªmŸes
(
mgr
->
ö_b™d
, 
addrs
, 
n_addrs
);

686 
	`‰ì
(
addrs
);

687 
	}
}

690 
	$upd©e_Áû_›í
(
c⁄nmgr
 *
mgr
)

692 i‡(
	`c⁄nmgr_has_c⁄åﬁÀrs
(
mgr
)

693 && 
mgr
->
Áû_mode
 =
OFPROTO_FAIL_STANDALONE
) {

694 i‡(!
mgr
->
Áû_›í
) {

695 
mgr
->
Áû_›í
 = 
	`Áû_›í_¸óã
(mgr->
oÂrŸo
, mgr);

698 
	`Áû_›í_de°roy
(
mgr
->
Áû_›í
);

699 
mgr
->
Áû_›í
 = 
NULL
;

701 
	}
}

704 
	$£t_pvc⁄ns
(
pvc⁄n
 ***
pvc⁄n•
, 
size_t
 *
n_pvc⁄n•
,

705 c⁄° 
s£t
 *sset)

707 
pvc⁄n
 **
pvc⁄ns
 = *
pvc⁄n•
;

708 
size_t
 
n_pvc⁄ns
 = *
n_pvc⁄n•
;

709 c⁄° *
«me
;

710 
ªtvÆ
 = 0;

711 
size_t
 
i
;

713 
i
 = 0; i < 
n_pvc⁄ns
; i++) {

714 
	`pvc⁄n_˛o£
(
pvc⁄ns
[
i
]);

716 
	`‰ì
(
pvc⁄ns
);

718 
pvc⁄ns
 = 
	`xmÆloc
(
	`s£t_cou¡
(
s£t
) *  *pvconns);

719 
n_pvc⁄ns
 = 0;

720 
	`SSET_FOR_EACH
 (
«me
, 
s£t
) {

721 
pvc⁄n
 *pvconn;

722 
îr‹
;

724 
îr‹
 = 
	`pvc⁄n_›í
(
«me
, &
pvc⁄n
, 0);

725 i‡(!
îr‹
) {

726 
pvc⁄ns
[
n_pvc⁄ns
++] = 
pvc⁄n
;

728 
	`VLOG_ERR
("ÁûedÅÿli°í o¿%s: %s", 
«me
, 
	`°ªº‹
(
îr‹
));

729 i‡(!
ªtvÆ
) {

730 
ªtvÆ
 = 
îr‹
;

735 *
pvc⁄n•
 = 
pvc⁄ns
;

736 *
n_pvc⁄n•
 = 
n_pvc⁄ns
;

738  
ªtvÆ
;

739 
	}
}

745 
	$¢o›_¥e„ªn˚
(c⁄° 
ofc⁄n
 *ofconn)

747 
ofc⁄n
->
rﬁe
) {

748 
NX_ROLE_MASTER
:

750 
NX_ROLE_OTHER
:

752 
NX_ROLE_SLAVE
:

758 
	}
}

763 
	$add_¢o›î
(
c⁄nmgr
 *
mgr
, 
vc⁄n
 *vconn)

765 
ofc⁄n
 *ofc⁄n, *
be°
;

768 
be°
 = 
NULL
;

769 
	`LIST_FOR_EACH
 (
ofc⁄n
, 
node
, &
mgr
->
Æl_c⁄ns
) {

770 i‡(
ofc⁄n
->
ty≥
 =
OFCONN_PRIMARY


771 && (!
be°
 || 
	`¢o›_¥e„ªn˚
(
ofc⁄n
) > snoop_preference(best))) {

772 
be°
 = 
ofc⁄n
;

776 i‡(
be°
) {

777 
	`rc⁄n_add_m⁄ô‹
(
be°
->
rc⁄n
, 
vc⁄n
);

779 
	`VLOG_INFO_RL
(&
æ
, "no controller connectionÅo snoop");

780 
	`vc⁄n_˛o£
(
vc⁄n
);

782 
	}
}

787 
ofc⁄n_ty≥


788 
	$ofc⁄n_gë_ty≥
(c⁄° 
ofc⁄n
 *ofconn)

790  
ofc⁄n
->
ty≥
;

791 
	}
}

796 
nx_rﬁe


797 
	$ofc⁄n_gë_rﬁe
(c⁄° 
ofc⁄n
 *ofconn)

799  
ofc⁄n
->
rﬁe
;

800 
	}
}

805 
	$ofc⁄n_£t_rﬁe
(
ofc⁄n
 *ofc⁄n, 
nx_rﬁe
 
rﬁe
)

807 i‡(
rﬁe
 =
NX_ROLE_MASTER
) {

808 
ofc⁄n
 *
Ÿhî
;

810 
	`HMAP_FOR_EACH
 (
Ÿhî
, 
hm≠_node
, &
ofc⁄n
->
c⁄nmgr
->
c⁄åﬁÀrs
) {

811 i‡(
Ÿhî
->
rﬁe
 =
NX_ROLE_MASTER
) {

812 
Ÿhî
->
rﬁe
 = 
NX_ROLE_SLAVE
;

816 
ofc⁄n
->
rﬁe
 =Ñole;

817 
	}
}

820 
	$ofc⁄n_£t_övÆid_âl_to_c⁄åﬁÀr
(
ofc⁄n
 *ofc⁄n, 
boﬁ
 
íabÀ
)

822 
uöt32_t
 
bô
 = 1u << 
OFPR_INVALID_TTL
;

823 i‡(
íabÀ
) {

824 
ofc⁄n
->
ma°î_async_c⁄fig
[
OAM_PACKET_IN
] |
bô
;

826 
ofc⁄n
->
ma°î_async_c⁄fig
[
OAM_PACKET_IN
] &~
bô
;

828 
	}
}

830 
boﬁ


831 
	$ofc⁄n_gë_övÆid_âl_to_c⁄åﬁÀr
(
ofc⁄n
 *ofconn)

833 
uöt32_t
 
bô
 = 1u << 
OFPR_INVALID_TTL
;

834  (
ofc⁄n
->
ma°î_async_c⁄fig
[
OAM_PACKET_IN
] & 
bô
) != 0;

835 
	}
}

840 
oÂutû_¥Ÿocﬁ


841 
	$ofc⁄n_gë_¥Ÿocﬁ
(
ofc⁄n
 *ofconn)

843  
ofc⁄n
->
¥Ÿocﬁ
;

844 
	}
}

851 
	$ofc⁄n_£t_¥Ÿocﬁ
(
ofc⁄n
 *ofc⁄n, 
oÂutû_¥Ÿocﬁ
 
¥Ÿocﬁ
)

853 
ofc⁄n
->
¥Ÿocﬁ
 =Örotocol;

854 
	}
}

860 
nx_∑ckë_ö_f‹m©


861 
	$ofc⁄n_gë_∑ckë_ö_f‹m©
(
ofc⁄n
 *ofconn)

863  
ofc⁄n
->
∑ckë_ö_f‹m©
;

864 
	}
}

869 
	$ofc⁄n_£t_∑ckë_ö_f‹m©
(
ofc⁄n
 *ofconn,

870 
nx_∑ckë_ö_f‹m©
 
∑ckë_ö_f‹m©
)

872 
ofc⁄n
->
∑ckë_ö_f‹m©
 =Öacket_in_format;

873 
	}
}

880 
	$ofc⁄n_£t_c⁄åﬁÀr_id
(
ofc⁄n
 *ofc⁄n, 
uöt16_t
 
c⁄åﬁÀr_id
)

882 
ofc⁄n
->
c⁄åﬁÀr_id
 = controller_id;

883 
	}
}

887 
	$ofc⁄n_gë_miss_£nd_Àn
(c⁄° 
ofc⁄n
 *ofconn)

889  
ofc⁄n
->
miss_£nd_Àn
;

890 
	}
}

894 
	$ofc⁄n_£t_miss_£nd_Àn
(
ofc⁄n
 *ofc⁄n, 
miss_£nd_Àn
)

896 
ofc⁄n
->
miss_£nd_Àn
 = miss_send_len;

897 
	}
}

900 
	$ofc⁄n_£t_async_c⁄fig
(
ofc⁄n
 *ofconn,

901 c⁄° 
uöt32_t
 
ma°î_masks
[
OAM_N_TYPES
],

902 c⁄° 
uöt32_t
 
¶ave_masks
[
OAM_N_TYPES
])

904 
size_t
 
size
 =  
ofc⁄n
->
ma°î_async_c⁄fig
;

905 
	`mem˝y
(
ofc⁄n
->
ma°î_async_c⁄fig
, 
ma°î_masks
, 
size
);

906 
	`mem˝y
(
ofc⁄n
->
¶ave_async_c⁄fig
, 
¶ave_masks
, 
size
);

907 
	}
}

914 
	$ofc⁄n_£nd_ª∂y
(c⁄° 
ofc⁄n
 *ofc⁄n, 
oÂbuf
 *
msg
)

916 
	`ofc⁄n_£nd
(
ofc⁄n
, 
msg
, ofc⁄n->
ª∂y_cou¡î
);

917 
	}
}

922 
	$ofc⁄n_£nd_ª∂õs
(c⁄° 
ofc⁄n
 *ofc⁄n, 
li°
 *
ª∂õs
)

924 
oÂbuf
 *
ª∂y
, *
√xt
;

926 
	`LIST_FOR_EACH_SAFE
 (
ª∂y
, 
√xt
, 
li°_node
, 
ª∂õs
) {

927 
	`li°_ªmove
(&
ª∂y
->
li°_node
);

928 
	`ofc⁄n_£nd_ª∂y
(
ofc⁄n
, 
ª∂y
);

930 
	}
}

935 
	$ofc⁄n_£nd_îr‹
(c⁄° 
ofc⁄n
 *ofconn,

936 c⁄° 
oÂ_hódî
 *
ªque°
, 
oÂîr
 
îr‹
)

938 
oÂbuf
 *
ª∂y
;

940 
ª∂y
 = 
	`oÂîr_ícode_ª∂y
(
îr‹
, 
ªque°
);

941 i‡(
ª∂y
) {

942 
vlog_øã_limô
 
îr_æ
 = 
	`VLOG_RATE_LIMIT_INIT
(10, 10);

944 i‡(!
	`VLOG_DROP_INFO
(&
îr_æ
)) {

945 c⁄° *
ty≥_«me
;

946 
size_t
 
ªque°_Àn
;

947 
oÂøw
 
øw
;

949 
ªque°_Àn
 = 
	`¡ohs
(
ªque°
->
Àngth
);

950 
ty≥_«me
 = (!
	`oÂøw_decode_∑πül
(&
øw
, 
ªque°
,

951 
	`MIN
(64, 
ªque°_Àn
))

952 ? 
	`oÂøw_gë_«me
(
øw
)

955 
	`VLOG_INFO
("%s: sending %sÉrrorÑeplyÅo %s message",

956 
	`rc⁄n_gë_«me
(
ofc⁄n
->
rc⁄n
), 
	`oÂîr_to_°rög
(
îr‹
),

957 
ty≥_«me
);

959 
	`ofc⁄n_£nd_ª∂y
(
ofc⁄n
, 
ª∂y
);

961 
	}
}

964 
oÂîr


965 
	$ofc⁄n_pktbuf_ªåõve
(
ofc⁄n
 *ofc⁄n, 
uöt32_t
 
id
,

966 
oÂbuf
 **
buf„Ω
, 
uöt16_t
 *
ö_p‹t
)

968  
	`pktbuf_ªåõve
(
ofc⁄n
->
pktbuf
, 
id
, 
buf„Ω
, 
ö_p‹t
);

969 
	}
}

972 
boﬁ


973 
	$ofc⁄n_has_≥ndög_›groups
(c⁄° 
ofc⁄n
 *ofconn)

975  !
	`li°_is_em±y
(&
ofc⁄n
->
›groups
);

976 
	}
}

988 
	$ofc⁄n_add_›group
(
ofc⁄n
 *ofc⁄n, 
li°
 *
ofc⁄n_node
)

990 
	`li°_push_back
(&
ofc⁄n
->
›groups
, 
ofc⁄n_node
);

991 
	}
}

996 
	$ofc⁄n_gë_èrgë
(c⁄° 
ofc⁄n
 *ofconn)

998  
	`rc⁄n_gë_èrgë
(
ofc⁄n
->
rc⁄n
);

999 
	}
}

1001 
ofc⁄n
 *

1002 
	$ofc⁄n_¸óã
(
c⁄nmgr
 *
mgr
, 
rc⁄n
 *rc⁄n, 
ofc⁄n_ty≥
 
ty≥
,

1003 
boﬁ
 
íabÀ_async_msgs
)

1005 
ofc⁄n
 *ofconn;

1007 
ofc⁄n
 = 
	`xzÆloc
( *ofconn);

1008 
ofc⁄n
->
c⁄nmgr
 = 
mgr
;

1009 
	`li°_push_back
(&
mgr
->
Æl_c⁄ns
, &
ofc⁄n
->
node
);

1010 
ofc⁄n
->
rc⁄n
 =Ñconn;

1011 
ofc⁄n
->
ty≥
 =Åype;

1012 
ofc⁄n
->
íabÀ_async_msgs
 =Énable_async_msgs;

1014 
	`li°_öô
(&
ofc⁄n
->
›groups
);

1016 
	`hm≠_öô
(&
ofc⁄n
->
m⁄ô‹s
);

1017 
	`li°_öô
(&
ofc⁄n
->
upd©es
);

1019 
	`ofc⁄n_Êush
(
ofc⁄n
);

1021  
ofc⁄n
;

1022 
	}
}

1027 
	$ofc⁄n_Êush
(
ofc⁄n
 *ofconn)

1029 
ofm⁄ô‹
 *
m⁄ô‹
, *
√xt_m⁄ô‹
;

1030 
i
;

1032 
ofc⁄n
->
rﬁe
 = 
NX_ROLE_OTHER
;

1033 
ofc⁄n
->
¥Ÿocﬁ
 = 
OFPUTIL_P_OF10
;

1034 
ofc⁄n
->
∑ckë_ö_f‹m©
 = 
NXPIF_OPENFLOW10
;

1042 !
	`li°_is_em±y
(&
ofc⁄n
->
›groups
)) {

1043 
	`li°_öô
(
	`li°_p›_‰⁄t
(&
ofc⁄n
->
›groups
));

1045 
	`oÂbuf_dñëe
(
ofc⁄n
->
blocked
);

1046 
ofc⁄n
->
blocked
 = 
NULL
;

1048 
	`rc⁄n_∑ckë_cou¡î_de°roy
(
ofc⁄n
->
∑ckë_ö_cou¡î
);

1049 
ofc⁄n
->
∑ckë_ö_cou¡î
 = 
	`rc⁄n_∑ckë_cou¡î_¸óã
();

1050 
i
 = 0; i < 
N_SCHEDULERS
; i++) {

1051 i‡(
ofc⁄n
->
scheduÀrs
[
i
]) {

1052 
øã
, 
bur°
;

1054 
	`pösched_gë_limôs
(
ofc⁄n
->
scheduÀrs
[
i
], &
øã
, &
bur°
);

1055 
	`pösched_de°roy
(
ofc⁄n
->
scheduÀrs
[
i
]);

1056 
ofc⁄n
->
scheduÀrs
[
i
] = 
	`pösched_¸óã
(
øã
, 
bur°
);

1059 i‡(
ofc⁄n
->
pktbuf
) {

1060 
	`pktbuf_de°roy
(
ofc⁄n
->
pktbuf
);

1061 
ofc⁄n
->
pktbuf
 = 
	`pktbuf_¸óã
();

1063 
ofc⁄n
->
miss_£nd_Àn
 = (ofc⁄n->
ty≥
 =
OFCONN_PRIMARY


1064 ? 
OFP_DEFAULT_MISS_SEND_LEN


1066 
ofc⁄n
->
c⁄åﬁÀr_id
 = 0;

1068 
	`rc⁄n_∑ckë_cou¡î_de°roy
(
ofc⁄n
->
ª∂y_cou¡î
);

1069 
ofc⁄n
->
ª∂y_cou¡î
 = 
	`rc⁄n_∑ckë_cou¡î_¸óã
();

1071 i‡(
ofc⁄n
->
íabÀ_async_msgs
) {

1072 
uöt32_t
 *
ma°î
 = 
ofc⁄n
->
ma°î_async_c⁄fig
;

1073 
uöt32_t
 *
¶ave
 = 
ofc⁄n
->
¶ave_async_c⁄fig
;

1078 
ma°î
[
OAM_PACKET_IN
] = (1u << 
OFPR_NO_MATCH
Ë| (1u << 
OFPR_ACTION
);

1079 
ma°î
[
OAM_PORT_STATUS
] = ((1u << 
OFPPR_ADD
)

1080 | (1u << 
OFPPR_DELETE
)

1081 | (1u << 
OFPPR_MODIFY
));

1082 
ma°î
[
OAM_FLOW_REMOVED
] = ((1u << 
OFPRR_IDLE_TIMEOUT
)

1083 | (1u << 
OFPRR_HARD_TIMEOUT
)

1084 | (1u << 
OFPRR_DELETE
));

1087 
¶ave
[
OAM_PACKET_IN
] = 0;

1088 
¶ave
[
OAM_PORT_STATUS
] = ((1u << 
OFPPR_ADD
)

1089 | (1u << 
OFPPR_DELETE
)

1090 | (1u << 
OFPPR_MODIFY
));

1091 
¶ave
[
OAM_FLOW_REMOVED
] = 0;

1093 
	`mem£t
(
ofc⁄n
->
ma°î_async_c⁄fig
, 0,

1094  
ofc⁄n
->
ma°î_async_c⁄fig
);

1095 
	`mem£t
(
ofc⁄n
->
¶ave_async_c⁄fig
, 0,

1096  
ofc⁄n
->
¶ave_async_c⁄fig
);

1099 
	`HMAP_FOR_EACH_SAFE
 (
m⁄ô‹
, 
√xt_m⁄ô‹
, 
ofc⁄n_node
,

1100 &
ofc⁄n
->
m⁄ô‹s
) {

1101 
	`ofm⁄ô‹_de°roy
(
m⁄ô‹
);

1103 
	`rc⁄n_∑ckë_cou¡î_de°roy
(
ofc⁄n
->
m⁄ô‹_cou¡î
);

1104 
ofc⁄n
->
m⁄ô‹_cou¡î
 = 
	`rc⁄n_∑ckë_cou¡î_¸óã
();

1105 
	`oÂbuf_li°_dñëe
(&
ofc⁄n
->
upd©es
);

1106 
	}
}

1109 
	$ofc⁄n_de°roy
(
ofc⁄n
 *ofconn)

1111 
	`ofc⁄n_Êush
(
ofc⁄n
);

1113 i‡(
ofc⁄n
->
ty≥
 =
OFCONN_PRIMARY
) {

1114 
	`hm≠_ªmove
(&
ofc⁄n
->
c⁄nmgr
->
c⁄åﬁÀrs
, &ofc⁄n->
hm≠_node
);

1117 
	`li°_ªmove
(&
ofc⁄n
->
node
);

1118 
	`rc⁄n_de°roy
(
ofc⁄n
->
rc⁄n
);

1119 
	`rc⁄n_∑ckë_cou¡î_de°roy
(
ofc⁄n
->
∑ckë_ö_cou¡î
);

1120 
	`rc⁄n_∑ckë_cou¡î_de°roy
(
ofc⁄n
->
ª∂y_cou¡î
);

1121 
	`pktbuf_de°roy
(
ofc⁄n
->
pktbuf
);

1122 
	`rc⁄n_∑ckë_cou¡î_de°roy
(
ofc⁄n
->
m⁄ô‹_cou¡î
);

1123 
	`‰ì
(
ofc⁄n
);

1124 
	}
}

1129 
	$ofc⁄n_ªc⁄figuª
(
ofc⁄n
 *ofc⁄n, c⁄° 
oÂrŸo_c⁄åﬁÀr
 *
c
)

1131 
¥obe_öãrvÆ
;

1133 
ofc⁄n
->
b™d
 = 
c
->band;

1134 
ofc⁄n
->
íabÀ_async_msgs
 = 
c
->enable_async_msgs;

1136 
	`rc⁄n_£t_max_backoff
(
ofc⁄n
->
rc⁄n
, 
c
->
max_backoff
);

1138 
¥obe_öãrvÆ
 = 
c
->¥obe_öãrvÆ ? 
	`MAX
(c->probe_interval, 5) : 0;

1139 
	`rc⁄n_£t_¥obe_öãrvÆ
(
ofc⁄n
->
rc⁄n
, 
¥obe_öãrvÆ
);

1141 
	`ofc⁄n_£t_øã_limô
(
ofc⁄n
, 
c
->
øã_limô
, c->
bur°_limô
);

1144 i‡(
c
->
ds˝
 !
	`rc⁄n_gë_ds˝
(
ofc⁄n
->
rc⁄n
)) {

1145 
	`rc⁄n_£t_ds˝
(
ofc⁄n
->
rc⁄n
, 
c
->
ds˝
);

1146 
	`rc⁄n_ªc⁄√˘
(
ofc⁄n
->
rc⁄n
);

1148 
	}
}

1152 
boﬁ


1153 
	$ofc⁄n_may_ªcv
(c⁄° 
ofc⁄n
 *ofconn)

1155 
cou¡
 = 
ofc⁄n
->
ª∂y_cou¡î
->
n_∑ckës
;

1156  (!
ofc⁄n
->
blocked
 || ofc⁄n->
ªåy
Ë&& 
cou¡
 < 
OFCONN_REPLY_MAX
;

1157 
	}
}

1160 
ofc⁄n_run
(
ofc⁄n
 *ofconn,

1161 
	$boﬁ
 (*
h™dÀ_›íÊow
)(
ofc⁄n
 *, 
oÂbuf
 *
oÂ_msg
))

1163 
c⁄nmgr
 *
mgr
 = 
ofc⁄n
->connmgr;

1164 
size_t
 
i
;

1166 
i
 = 0; i < 
N_SCHEDULERS
; i++) {

1167 
	`pösched_run
(
ofc⁄n
->
scheduÀrs
[
i
], 
do_£nd_∑ckë_ö
, ofconn);

1170 
	`rc⁄n_run
(
ofc⁄n
->
rc⁄n
);

1172 i‡(
h™dÀ_›íÊow
) {

1174 
i
 = 0; i < 50 && 
	`ofc⁄n_may_ªcv
(
ofc⁄n
); i++) {

1175 
oÂbuf
 *
of_msg
;

1177 
of_msg
 = (
ofc⁄n
->
blocked


1178 ? 
ofc⁄n
->
blocked


1179 : 
	`rc⁄n_ªcv
(
ofc⁄n
->
rc⁄n
));

1180 i‡(!
of_msg
) {

1183 i‡(
mgr
->
Áû_›í
) {

1184 
	`Áû_›í_maybe_ªcovî
(
mgr
->
Áû_›í
);

1187 i‡(
	`h™dÀ_›íÊow
(
ofc⁄n
, 
of_msg
)) {

1188 
	`oÂbuf_dñëe
(
of_msg
);

1189 
ofc⁄n
->
blocked
 = 
NULL
;

1191 
ofc⁄n
->
blocked
 = 
of_msg
;

1192 
ofc⁄n
->
ªåy
 = 
Ál£
;

1197 i‡(!
	`rc⁄n_is_Æive
(
ofc⁄n
->
rc⁄n
)) {

1198 
	`ofc⁄n_de°roy
(
ofc⁄n
);

1199 } i‡(!
	`rc⁄n_is_c⁄√˘ed
(
ofc⁄n
->
rc⁄n
)) {

1200 
	`ofc⁄n_Êush
(
ofc⁄n
);

1202 
	}
}

1205 
	$ofc⁄n_waô
(
ofc⁄n
 *ofc⁄n, 
boﬁ
 
h™dlög_›íÊow
)

1207 
i
;

1209 
i
 = 0; i < 
N_SCHEDULERS
; i++) {

1210 
	`pösched_waô
(
ofc⁄n
->
scheduÀrs
[
i
]);

1212 
	`rc⁄n_run_waô
(
ofc⁄n
->
rc⁄n
);

1213 i‡(
h™dlög_›íÊow
 && 
	`ofc⁄n_may_ªcv
(
ofc⁄n
)) {

1214 
	`rc⁄n_ªcv_waô
(
ofc⁄n
->
rc⁄n
);

1216 
	}
}

1223 
boﬁ


1224 
	$ofc⁄n_ª˚ives_async_msg
(c⁄° 
ofc⁄n
 *ofconn,

1225 
ofc⁄n_async_msg_ty≥
 
ty≥
,

1226 
ªas⁄
)

1228 c⁄° 
uöt32_t
 *
async_c⁄fig
;

1230 
	`as£π
(
ªas⁄
 < 32);

1231 
	`as£π
((Ë
ty≥
 < 
OAM_N_TYPES
);

1233 i‡(!
	`rc⁄n_is_c⁄√˘ed
(
ofc⁄n
->
rc⁄n
)) {

1234  
Ál£
;

1240 i‡(
ofc⁄n
->
ty≥
 =
OFCONN_SERVICE
 && !ofc⁄n->
miss_£nd_Àn
) {

1243  
Ál£
;

1246 
async_c⁄fig
 = (
ofc⁄n
->
rﬁe
 =
NX_ROLE_SLAVE


1247 ? 
ofc⁄n
->
¶ave_async_c⁄fig


1248 : 
ofc⁄n
->
ma°î_async_c⁄fig
);

1249 i‡(!(
async_c⁄fig
[
ty≥
] & (1u << 
ªas⁄
))) {

1250  
Ál£
;

1253  
åue
;

1254 
	}
}

1262 
	$ofc⁄n_make_«me
(c⁄° 
c⁄nmgr
 *
mgr
, c⁄° *
èrgë
)

1264  
	`xa•rötf
("%s<->%s", 
mgr
->
«me
, 
èrgë
);

1265 
	}
}

1268 
	$ofc⁄n_£t_øã_limô
(
ofc⁄n
 *ofc⁄n, 
øã
, 
bur°
)

1270 
i
;

1272 
i
 = 0; i < 
N_SCHEDULERS
; i++) {

1273 
pösched
 **
s
 = &
ofc⁄n
->
scheduÀrs
[
i
];

1275 i‡(
øã
 > 0) {

1276 i‡(!*
s
) {

1277 *
s
 = 
	`pösched_¸óã
(
øã
, 
bur°
);

1279 
	`pösched_£t_limôs
(*
s
, 
øã
, 
bur°
);

1282 
	`pösched_de°roy
(*
s
);

1283 *
s
 = 
NULL
;

1286 
	}
}

1289 
	$ofc⁄n_£nd
(c⁄° 
ofc⁄n
 *ofc⁄n, 
oÂbuf
 *
msg
,

1290 
rc⁄n_∑ckë_cou¡î
 *
cou¡î
)

1292 
	`oÂmsg_upd©e_Àngth
(
msg
);

1293 
	`rc⁄n_£nd
(
ofc⁄n
->
rc⁄n
, 
msg
, 
cou¡î
);

1294 
	}
}

1298 
scheduÀ_∑ckë_ö
(
ofc⁄n
 *, 
oÂutû_∑ckë_ö
);

1303 
	$c⁄nmgr_£nd_p‹t_°©us
(
c⁄nmgr
 *
mgr
,

1304 c⁄° 
oÂutû_phy_p‹t
 *
µ
, 
uöt8_t
 
ªas⁄
)

1307 
oÂutû_p‹t_°©us
 
ps
;

1308 
ofc⁄n
 *ofconn;

1310 
ps
.
ªas⁄
 =Ñeason;

1311 
ps
.
desc
 = *
µ
;

1312 
	`LIST_FOR_EACH
 (
ofc⁄n
, 
node
, &
mgr
->
Æl_c⁄ns
) {

1313 i‡(
	`ofc⁄n_ª˚ives_async_msg
(
ofc⁄n
, 
OAM_PORT_STATUS
, 
ªas⁄
)) {

1314 
oÂbuf
 *
msg
;

1316 
msg
 = 
	`oÂutû_ícode_p‹t_°©us
(&
ps
, 
ofc⁄n
->
¥Ÿocﬁ
);

1317 
	`ofc⁄n_£nd
(
ofc⁄n
, 
msg
, 
NULL
);

1320 
	}
}

1325 
	$c⁄nmgr_£nd_Êow_ªmoved
(
c⁄nmgr
 *
mgr
,

1326 c⁄° 
oÂutû_Êow_ªmoved
 *
‰
)

1328 
ofc⁄n
 *ofconn;

1330 
	`LIST_FOR_EACH
 (
ofc⁄n
, 
node
, &
mgr
->
Æl_c⁄ns
) {

1331 i‡(
	`ofc⁄n_ª˚ives_async_msg
(
ofc⁄n
, 
OAM_FLOW_REMOVED
, 
‰
->
ªas⁄
)) {

1332 
oÂbuf
 *
msg
;

1339 
msg
 = 
	`oÂutû_ícode_Êow_ªmoved
(
‰
, 
ofc⁄n
->
¥Ÿocﬁ
);

1340 
	`ofc⁄n_£nd_ª∂y
(
ofc⁄n
, 
msg
);

1343 
	}
}

1350 
	$c⁄nmgr_£nd_∑ckë_ö
(
c⁄nmgr
 *
mgr
,

1351 c⁄° 
oÂutû_∑ckë_ö
 *
pö
)

1353 
ofc⁄n
 *ofconn;

1355 
	`LIST_FOR_EACH
 (
ofc⁄n
, 
node
, &
mgr
->
Æl_c⁄ns
) {

1356 i‡(
	`ofc⁄n_ª˚ives_async_msg
(
ofc⁄n
, 
OAM_PACKET_IN
, 
pö
->
ªas⁄
)

1357 && 
ofc⁄n
->
c⁄åﬁÀr_id
 =
pö
->controller_id) {

1358 
	`scheduÀ_∑ckë_ö
(
ofc⁄n
, *
pö
);

1361 
	}
}

1365 
	$do_£nd_∑ckë_ö
(
oÂbuf
 *
oÂ_∑ckë_ö
, *
ofc⁄n_
)

1367 
ofc⁄n
 *ofc⁄¿
ofc⁄n_
;

1369 
	`rc⁄n_£nd_wôh_limô
(
ofc⁄n
->
rc⁄n
, 
oÂ_∑ckë_ö
,

1370 
ofc⁄n
->
∑ckë_ö_cou¡î
, 100);

1371 
	}
}

1376 
	$scheduÀ_∑ckë_ö
(
ofc⁄n
 *ofc⁄n, 
oÂutû_∑ckë_ö
 
pö
)

1378 
c⁄nmgr
 *
mgr
 = 
ofc⁄n
->connmgr;

1380 
pö
.
tŸÆ_Àn
 =Öö.
∑ckë_Àn
;

1383 i‡(
pö
.
ªas⁄
 =
OFPR_ACTION
) {

1384 
pö
.
buf„r_id
 = 
UINT32_MAX
;

1385 } i‡(
mgr
->
Áû_›í
 && 
	`Áû_›í_is_a˘ive
(mgr->fail_open)) {

1386 
pö
.
buf„r_id
 = 
	`pktbuf_gë_nuŒ
();

1387 } i‡(!
ofc⁄n
->
pktbuf
) {

1388 
pö
.
buf„r_id
 = 
UINT32_MAX
;

1390 
pö
.
buf„r_id
 = 
	`pktbuf_ßve
(
ofc⁄n
->
pktbuf
,Öö.
∑ckë
,Öö.
∑ckë_Àn
,

1391 
pö
.
fmd
.
ö_p‹t
);

1395 i‡(
pö
.
ªas⁄
 =
OFPR_NO_MATCH
) {

1396 
pö
.
£nd_Àn
 =Öö.
∑ckë_Àn
;

1401 i‡(
pö
.
buf„r_id
 !
UINT32_MAX
) {

1402 
pö
.
£nd_Àn
 = 
	`MIN
’ö.£nd_Àn, 
ofc⁄n
->
miss_£nd_Àn
);

1408 
	`pösched_£nd
(
ofc⁄n
->
scheduÀrs
[
pö
.
ªas⁄
 =
OFPR_NO_MATCH
 ? 0 : 1],

1409 
pö
.
fmd
.
ö_p‹t
,

1410 
	`oÂutû_ícode_∑ckë_ö
(&
pö
, 
ofc⁄n
->
¥Ÿocﬁ
,

1411 
ofc⁄n
->
∑ckë_ö_f‹m©
),

1412 
do_£nd_∑ckë_ö
, 
ofc⁄n
);

1413 
	}
}

1419 
oÂrŸo_Áû_mode


1420 
	$c⁄nmgr_gë_Áû_mode
(c⁄° 
c⁄nmgr
 *
mgr
)

1422  
mgr
->
Áû_mode
;

1423 
	}
}

1428 
	$c⁄nmgr_£t_Áû_mode
(
c⁄nmgr
 *
mgr
, 
oÂrŸo_Áû_mode
 
Áû_mode
)

1430 i‡(
mgr
->
Áû_mode
 != fail_mode) {

1431 
mgr
->
Áû_mode
 = fail_mode;

1432 
	`upd©e_Áû_›í
(
mgr
);

1433 i‡(!
	`c⁄nmgr_has_c⁄åﬁÀrs
(
mgr
)) {

1434 
	`oÂrŸo_Êush_Êows
(
mgr
->
oÂrŸo
);

1437 
	}
}

1444 
	$c⁄nmgr_gë_max_¥obe_öãrvÆ
(c⁄° 
c⁄nmgr
 *
mgr
)

1446 c⁄° 
ofc⁄n
 *ofconn;

1447 
max_¥obe_öãrvÆ
;

1449 
max_¥obe_öãrvÆ
 = 0;

1450 
	`HMAP_FOR_EACH
 (
ofc⁄n
, 
hm≠_node
, &
mgr
->
c⁄åﬁÀrs
) {

1451 
¥obe_öãrvÆ
 = 
	`rc⁄n_gë_¥obe_öãrvÆ
(
ofc⁄n
->
rc⁄n
);

1452 
max_¥obe_öãrvÆ
 = 
	`MAX
(max_¥obe_öãrvÆ, 
¥obe_öãrvÆ
);

1454  
max_¥obe_öãrvÆ
;

1455 
	}
}

1460 
	$c⁄nmgr_Áûuª_duøti⁄
(c⁄° 
c⁄nmgr
 *
mgr
)

1462 c⁄° 
ofc⁄n
 *ofconn;

1463 
mö_Áûuª_duøti⁄
;

1465 i‡(!
	`c⁄nmgr_has_c⁄åﬁÀrs
(
mgr
)) {

1469 
mö_Áûuª_duøti⁄
 = 
INT_MAX
;

1470 
	`HMAP_FOR_EACH
 (
ofc⁄n
, 
hm≠_node
, &
mgr
->
c⁄åﬁÀrs
) {

1471 
Áûuª_duøti⁄
 = 
	`rc⁄n_Áûuª_duøti⁄
(
ofc⁄n
->
rc⁄n
);

1472 
mö_Áûuª_duøti⁄
 = 
	`MIN
(mö_Áûuª_duøti⁄, 
Áûuª_duøti⁄
);

1474  
mö_Áûuª_duøti⁄
;

1475 
	}
}

1480 
boﬁ


1481 
	$c⁄nmgr_is_™y_c⁄åﬁÀr_c⁄√˘ed
(c⁄° 
c⁄nmgr
 *
mgr
)

1483 c⁄° 
ofc⁄n
 *ofconn;

1485 
	`HMAP_FOR_EACH
 (
ofc⁄n
, 
hm≠_node
, &
mgr
->
c⁄åﬁÀrs
) {

1486 i‡(
	`rc⁄n_is_c⁄√˘ed
(
ofc⁄n
->
rc⁄n
)) {

1487  
åue
;

1490  
Ál£
;

1491 
	}
}

1495 
boﬁ


1496 
	$c⁄nmgr_is_™y_c⁄åﬁÀr_admôãd
(c⁄° 
c⁄nmgr
 *
mgr
)

1498 c⁄° 
ofc⁄n
 *ofconn;

1500 
	`HMAP_FOR_EACH
 (
ofc⁄n
, 
hm≠_node
, &
mgr
->
c⁄åﬁÀrs
) {

1501 i‡(
	`rc⁄n_is_admôãd
(
ofc⁄n
->
rc⁄n
)) {

1502  
åue
;

1505  
Ál£
;

1506 
	}
}

1510 
boﬁ
 
™y_exåas_ch™ged
(c⁄° 
c⁄nmgr
 *,

1511 c⁄° 
sockaddr_ö
 *
exåas
, 
size_t
 
n
);

1517 
	$c⁄nmgr_£t_exåa_ö_b™d_ªmŸes
(
c⁄nmgr
 *
mgr
,

1518 c⁄° 
sockaddr_ö
 *
exåas
, 
size_t
 
n
)

1520 i‡(!
	`™y_exåas_ch™ged
(
mgr
, 
exåas
, 
n
)) {

1524 
	`‰ì
(
mgr
->
exåa_ö_b™d_ªmŸes
);

1525 
mgr
->
n_exåa_ªmŸes
 = 
n
;

1526 
mgr
->
exåa_ö_b™d_ªmŸes
 = 
	`xmemdup
(
exåas
, 
n
 *  *extras);

1528 
	`upd©e_ö_b™d_ªmŸes
(
mgr
);

1529 
	}
}

1535 
	$c⁄nmgr_£t_ö_b™d_queue
(
c⁄nmgr
 *
mgr
, 
queue_id
)

1537 i‡(
queue_id
 !
mgr
->
ö_b™d_queue
) {

1538 
mgr
->
ö_b™d_queue
 = 
queue_id
;

1539 
	`upd©e_ö_b™d_ªmŸes
(
mgr
);

1541 
	}
}

1543 
boﬁ


1544 
	$™y_exåas_ch™ged
(c⁄° 
c⁄nmgr
 *
mgr
,

1545 c⁄° 
sockaddr_ö
 *
exåas
, 
size_t
 
n
)

1547 
size_t
 
i
;

1549 i‡(
n
 !
mgr
->
n_exåa_ªmŸes
) {

1550  
åue
;

1553 
i
 = 0; i < 
n
; i++) {

1554 c⁄° 
sockaddr_ö
 *
ﬁd
 = &
mgr
->
exåa_ö_b™d_ªmŸes
[
i
];

1555 c⁄° 
sockaddr_ö
 *
√w
 = &
exåas
[
i
];

1557 i‡(
ﬁd
->
sö_addr
.
s_addr
 !
√w
->sin_addr.s_addr ||

1558 
ﬁd
->
sö_p‹t
 !
√w
->sin_port) {

1559  
åue
;

1563  
Ál£
;

1564 
	}
}

1568 
boﬁ


1569 
	$c⁄nmgr_msg_ö_hook
(
c⁄nmgr
 *
mgr
, c⁄° 
Êow
 *flow,

1570 c⁄° 
oÂbuf
 *
∑ckë
)

1572  
mgr
->
ö_b™d
 && 
	`ö_b™d_msg_ö_hook
(mgr->ö_b™d, 
Êow
, 
∑ckë
);

1573 
	}
}

1575 
boﬁ


1576 
	$c⁄nmgr_may_£t_up_Êow
(
c⁄nmgr
 *
mgr
, c⁄° 
Êow
 *flow,

1577 c⁄° 
∆©å
 *
odp_a˘i⁄s
,

1578 
size_t
 
a˘i⁄s_Àn
)

1580  !
mgr
->
ö_b™d
 || 
	`ö_b™d_ruÀ_check
(
Êow
, 
odp_a˘i⁄s
, 
a˘i⁄s_Àn
);

1581 
	}
}

1590 
	$c⁄nmgr_Êushed
(
c⁄nmgr
 *
mgr
)

1592 i‡(
mgr
->
Áû_›í
) {

1593 
	`Áû_›í_Êushed
(
mgr
->
Áû_›í
);

1600 i‡(!
	`c⁄nmgr_has_c⁄åﬁÀrs
(
mgr
)

1601 && 
mgr
->
Áû_mode
 =
OFPROTO_FAIL_STANDALONE
) {

1602 
oÂbuf
 
oÂa˘s
;

1603 
m©ch
 match;

1605 
	`oÂbuf_öô
(&
oÂa˘s
, 
OFPACT_OUTPUT_SIZE
);

1606 
	`oÂa˘_put_OUTPUT
(&
oÂa˘s
)->
p‹t
 = 
OFPP_NORMAL
;

1607 
	`oÂa˘_∑d
(&
oÂa˘s
);

1609 
	`m©ch_öô_ˇtchÆl
(&
m©ch
);

1610 
	`oÂrŸo_add_Êow
(
mgr
->
oÂrŸo
, &
m©ch
, 0, 
oÂa˘s
.
d©a
, oÂa˘s.
size
);

1612 
	`oÂbuf_unöô
(&
oÂa˘s
);

1614 
	}
}

1622 
	$of£rvi˚_¸óã
(
c⁄nmgr
 *
mgr
, c⁄° *
èrgë
, 
uöt8_t
 
ds˝
)

1624 
of£rvi˚
 *ofservice;

1625 
pvc⁄n
 *pvconn;

1626 
îr‹
;

1628 
îr‹
 = 
	`pvc⁄n_›í
(
èrgë
, &
pvc⁄n
, 
ds˝
);

1629 i‡(
îr‹
) {

1630  
îr‹
;

1633 
of£rvi˚
 = 
	`xzÆloc
( *ofservice);

1634 
	`hm≠_ö£π
(&
mgr
->
£rvi˚s
, &
of£rvi˚
->
node
, 
	`hash_°rög
(
èrgë
, 0));

1635 
of£rvi˚
->
pvc⁄n
 =Övconn;

1638 
	}
}

1641 
	$of£rvi˚_de°roy
(
c⁄nmgr
 *
mgr
, 
of£rvi˚
 *ofservice)

1643 
	`hm≠_ªmove
(&
mgr
->
£rvi˚s
, &
of£rvi˚
->
node
);

1644 
	`pvc⁄n_˛o£
(
of£rvi˚
->
pvc⁄n
);

1645 
	`‰ì
(
of£rvi˚
);

1646 
	}
}

1649 
	$of£rvi˚_ªc⁄figuª
(
of£rvi˚
 *ofservice,

1650 c⁄° 
oÂrŸo_c⁄åﬁÀr
 *
c
)

1652 
of£rvi˚
->
¥obe_öãrvÆ
 = 
c
->probe_interval;

1653 
of£rvi˚
->
øã_limô
 = 
c
->rate_limit;

1654 
of£rvi˚
->
bur°_limô
 = 
c
->burst_limit;

1655 
of£rvi˚
->
íabÀ_async_msgs
 = 
c
->enable_async_msgs;

1656 
of£rvi˚
->
ds˝
 = 
c
->dscp;

1657 
	}
}

1661 
of£rvi˚
 *

1662 
	$of£rvi˚_lookup
(
c⁄nmgr
 *
mgr
, c⁄° *
èrgë
)

1664 
of£rvi˚
 *ofservice;

1666 
	`HMAP_FOR_EACH_WITH_HASH
 (
of£rvi˚
, 
node
, 
	`hash_°rög
(
èrgë
, 0),

1667 &
mgr
->
£rvi˚s
) {

1668 i‡(!
	`°rcmp
(
	`pvc⁄n_gë_«me
(
of£rvi˚
->
pvc⁄n
), 
èrgë
)) {

1669  
of£rvi˚
;

1672  
NULL
;

1673 
	}
}

1695 
uöt64_t
 
	gm⁄ô‹_£qno
 = 1;

1697 
COVERAGE_DEFINE
(
ofm⁄ô‹_∑u£
);

1698 
COVERAGE_DEFINE
(
ofm⁄ô‹_ªsume
);

1700 
oÂîr


1701 
	$ofm⁄ô‹_¸óã
(c⁄° 
oÂutû_Êow_m⁄ô‹_ªque°
 *
ªque°
,

1702 
ofc⁄n
 *ofc⁄n, 
ofm⁄ô‹
 **
m⁄ô‹p
)

1704 
ofm⁄ô‹
 *
m
;

1706 *
m⁄ô‹p
 = 
NULL
;

1708 
m
 = 
	`ofm⁄ô‹_lookup
(
ofc⁄n
, 
ªque°
->
id
);

1709 i‡(
m
) {

1710  
OFPERR_NXBRC_FM_DUPLICATE_ID
;

1713 
m
 = 
	`xmÆloc
( *m);

1714 
m
->
ofc⁄n
 = ofconn;

1715 
	`hm≠_ö£π
(&
ofc⁄n
->
m⁄ô‹s
, &
m
->
ofc⁄n_node
, 
	`hash_öt
(
ªque°
->
id
, 0));

1716 
m
->
id
 = 
ªque°
->id;

1717 
m
->
Êags
 = 
ªque°
->flags;

1718 
m
->
out_p‹t
 = 
ªque°
->out_port;

1719 
m
->
èbÀ_id
 = 
ªque°
->table_id;

1720 
	`möim©ch_öô
(&
m
->
m©ch
, &
ªque°
->match);

1722 *
m⁄ô‹p
 = 
m
;

1724 
	}
}

1726 
ofm⁄ô‹
 *

1727 
	$ofm⁄ô‹_lookup
(
ofc⁄n
 *ofc⁄n, 
uöt32_t
 
id
)

1729 
ofm⁄ô‹
 *
m
;

1731 
	`HMAP_FOR_EACH_IN_BUCKET
 (
m
, 
ofc⁄n_node
, 
	`hash_öt
(
id
, 0),

1732 &
ofc⁄n
->
m⁄ô‹s
) {

1733 i‡(
m
->
id
 == id) {

1734  
m
;

1737  
NULL
;

1738 
	}
}

1741 
	$ofm⁄ô‹_de°roy
(
ofm⁄ô‹
 *
m
)

1743 i‡(
m
) {

1744 
	`hm≠_ªmove
(&
m
->
ofc⁄n
->
m⁄ô‹s
, &m->
ofc⁄n_node
);

1745 
	`‰ì
(
m
);

1747 
	}
}

1750 
	$ofm⁄ô‹_ªp‹t
(
c⁄nmgr
 *
mgr
, 
ruÀ
 *rule,

1751 
nx_Êow_upd©e_evít
 
evít
,

1752 
oÂ_Êow_ªmoved_ªas⁄
 
ªas⁄
,

1753 c⁄° 
ofc⁄n
 *
abbªv_ofc⁄n
, 
ovs_be32
 
abbªv_xid
)

1755 
nx_Êow_m⁄ô‹_Êags
 
upd©e
;

1756 
ofc⁄n
 *ofconn;

1758 
evít
) {

1759 
NXFME_ADDED
:

1760 
upd©e
 = 
NXFMF_ADD
;

1761 
ruÀ
->
add_£qno
 =ÑuÀ->
modify_£qno
 = 
m⁄ô‹_£qno
++;

1764 
NXFME_DELETED
:

1765 
upd©e
 = 
NXFMF_DELETE
;

1768 
NXFME_MODIFIED
:

1769 
upd©e
 = 
NXFMF_MODIFY
;

1770 
ruÀ
->
modify_£qno
 = 
m⁄ô‹_£qno
++;

1774 
NXFME_ABBREV
:

1775 
	`NOT_REACHED
();

1778 
	`LIST_FOR_EACH
 (
ofc⁄n
, 
node
, &
mgr
->
Æl_c⁄ns
) {

1779 
nx_Êow_m⁄ô‹_Êags
 
Êags
 = 0;

1780 
ofm⁄ô‹
 *
m
;

1782 i‡(
ofc⁄n
->
m⁄ô‹_∑u£d
) {

1785 i‡(
evít
 !
NXFME_DELETED


1786 || 
ruÀ
->
add_£qno
 > 
ofc⁄n
->
m⁄ô‹_∑u£d
) {

1791 
	`HMAP_FOR_EACH
 (
m
, 
ofc⁄n_node
, &
ofc⁄n
->
m⁄ô‹s
) {

1792 i‡(
m
->
Êags
 & 
upd©e


1793 && (
m
->
èbÀ_id
 =0xf‡|| m->èbÀ_id =
ruÀ
->table_id)

1794 && 
	`of›î©i⁄_has_out_p‹t
(
ruÀ
->
≥ndög
, 
m
->
out_p‹t
)

1795 && 
	`˛s_ruÀ_is_loo£_m©ch
(&
ruÀ
->
¸
, &
m
->
m©ch
)) {

1796 
Êags
 |
m
->flags;

1800 i‡(
Êags
) {

1801 i‡(
	`li°_is_em±y
(&
ofc⁄n
->
upd©es
)) {

1802 
	`oÂutû_°¨t_Êow_upd©e
(&
ofc⁄n
->
upd©es
);

1803 
ofc⁄n
->
£¡_abbªv_upd©e
 = 
Ál£
;

1806 i‡(
ofc⁄n
 !
abbªv_ofc⁄n
 || ofc⁄n->
m⁄ô‹_∑u£d
) {

1807 
oÂutû_Êow_upd©e
 
fu
;

1808 
m©ch
 match;

1810 
fu
.
evít
 =Évent;

1811 
fu
.
ªas⁄
 = 
evít
 =
NXFME_DELETED
 ?Ñeason : 0;

1812 
fu
.
idÀ_timeout
 = 
ruÀ
->idle_timeout;

1813 
fu
.
h¨d_timeout
 = 
ruÀ
->hard_timeout;

1814 
fu
.
èbÀ_id
 = 
ruÀ
->table_id;

1815 
fu
.
cookõ
 = 
ruÀ
->
Êow_cookõ
;

1816 
	`möim©ch_ex∑nd
(&
ruÀ
->
¸
.
m©ch
, &match);

1817 
fu
.
m©ch
 = &match;

1818 
fu
.
¥i‹ôy
 = 
ruÀ
->
¸
.priority;

1819 i‡(
Êags
 & 
NXFMF_ACTIONS
) {

1820 
fu
.
oÂa˘s
 = 
ruÀ
->ofpacts;

1821 
fu
.
oÂa˘s_Àn
 = 
ruÀ
->ofpacts_len;

1823 
fu
.
oÂa˘s
 = 
NULL
;

1824 
fu
.
oÂa˘s_Àn
 = 0;

1826 
	`oÂutû_≠≥nd_Êow_upd©e
(&
fu
, &
ofc⁄n
->
upd©es
);

1827 } i‡(!
ofc⁄n
->
£¡_abbªv_upd©e
) {

1828 
oÂutû_Êow_upd©e
 
fu
;

1830 
fu
.
evít
 = 
NXFME_ABBREV
;

1831 
fu
.
xid
 = 
abbªv_xid
;

1832 
	`oÂutû_≠≥nd_Êow_upd©e
(&
fu
, &
ofc⁄n
->
upd©es
);

1834 
ofc⁄n
->
£¡_abbªv_upd©e
 = 
åue
;

1838 
	}
}

1841 
	$ofm⁄ô‹_Êush
(
c⁄nmgr
 *
mgr
)

1843 
ofc⁄n
 *ofconn;

1845 
	`LIST_FOR_EACH
 (
ofc⁄n
, 
node
, &
mgr
->
Æl_c⁄ns
) {

1846 
oÂbuf
 *
msg
, *
√xt
;

1848 
	`LIST_FOR_EACH_SAFE
 (
msg
, 
√xt
, 
li°_node
, &
ofc⁄n
->
upd©es
) {

1849 
	`li°_ªmove
(&
msg
->
li°_node
);

1850 
	`ofc⁄n_£nd
(
ofc⁄n
, 
msg
, ofc⁄n->
m⁄ô‹_cou¡î
);

1851 i‡(!
ofc⁄n
->
m⁄ô‹_∑u£d


1852 && 
ofc⁄n
->
m⁄ô‹_cou¡î
->
n_byãs
 > 128 * 1024) {

1853 
oÂbuf
 *
∑u£
;

1855 
	`COVERAGE_INC
(
ofm⁄ô‹_∑u£
);

1856 
ofc⁄n
->
m⁄ô‹_∑u£d
 = 
m⁄ô‹_£qno
++;

1857 
∑u£
 = 
	`oÂøw_Æloc_xid
(
OFPRAW_NXT_FLOW_MONITOR_PAUSED
,

1858 
OFP10_VERSION
, 
	`ht⁄l
(0), 0);

1859 
	`ofc⁄n_£nd
(
ofc⁄n
, 
∑u£
, ofc⁄n->
m⁄ô‹_cou¡î
);

1863 
	}
}

1866 
	$ofm⁄ô‹_ªsume
(
ofc⁄n
 *ofconn)

1868 
oÂbuf
 *
ªsumed
;

1869 
ofm⁄ô‹
 *
m
;

1870 
li°
 
ruÀs
;

1871 
li°
 
msgs
;

1873 
	`li°_öô
(&
ruÀs
);

1874 
	`HMAP_FOR_EACH
 (
m
, 
ofc⁄n_node
, &
ofc⁄n
->
m⁄ô‹s
) {

1875 
	`ofm⁄ô‹_cﬁÀ˘_ªsume_ruÀs
(
m
, 
ofc⁄n
->
m⁄ô‹_∑u£d
, &
ruÀs
);

1878 
	`li°_öô
(&
msgs
);

1879 
	`ofm⁄ô‹_compo£_ª‰esh_upd©es
(&
ruÀs
, &
msgs
);

1881 
ªsumed
 = 
	`oÂøw_Æloc_xid
(
OFPRAW_NXT_FLOW_MONITOR_RESUMED
, 
OFP10_VERSION
,

1882 
	`ht⁄l
(0), 0);

1883 
	`li°_push_back
(&
msgs
, &
ªsumed
->
li°_node
);

1884 
	`ofc⁄n_£nd_ª∂õs
(
ofc⁄n
, &
msgs
);

1886 
ofc⁄n
->
m⁄ô‹_∑u£d
 = 0;

1887 
	}
}

1890 
	$ofm⁄ô‹_run
(
c⁄nmgr
 *
mgr
)

1892 
ofc⁄n
 *ofconn;

1894 
	`LIST_FOR_EACH
 (
ofc⁄n
, 
node
, &
mgr
->
Æl_c⁄ns
) {

1895 i‡(
ofc⁄n
->
m⁄ô‹_∑u£d
 && !ofc⁄n->
m⁄ô‹_cou¡î
->
n_∑ckës
) {

1896 
	`COVERAGE_INC
(
ofm⁄ô‹_ªsume
);

1897 
	`ofm⁄ô‹_ªsume
(
ofc⁄n
);

1900 
	}
}

1903 
	$ofm⁄ô‹_waô
(
c⁄nmgr
 *
mgr
)

1905 
ofc⁄n
 *ofconn;

1907 
	`LIST_FOR_EACH
 (
ofc⁄n
, 
node
, &
mgr
->
Æl_c⁄ns
) {

1908 i‡(
ofc⁄n
->
m⁄ô‹_∑u£d
 && !ofc⁄n->
m⁄ô‹_cou¡î
->
n_∑ckës
) {

1909 
	`pﬁl_immedüã_wake
();

1912 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/ofproto/connmgr.h

17 #i‚de‡
CONNMGR_H


18 
	#CONNMGR_H
 1

	)

20 
	~"˛assifõr.h
"

21 
	~"hm≠.h
"

22 
	~"li°.h
"

23 
	~"m©ch.h
"

24 
	~"oÂ-îr‹s.h
"

25 
	~"oÂrŸo.h
"

26 
	~"›íÊow/nicúa-ext.h
"

27 
	~"›ívswôch/ty≥s.h
"

29 
	g∆©å
;

30 
	gofc⁄n
;

31 
	gof›group
;

32 
	goÂutû_Êow_ªmoved
;

33 
	goÂutû_∑ckë_ö
;

34 
	goÂutû_phy_p‹t
;

35 
	gruÀ
;

36 
	gsim≠
;

37 
	gs£t
;

54 
	eofc⁄n_ty≥
 {

55 
	mOFCONN_PRIMARY
,

56 
	mOFCONN_SERVICE


60 
	eofc⁄n_async_msg_ty≥
 {

61 
	mOAM_PACKET_IN
,

62 
	mOAM_PORT_STATUS
,

63 
	mOAM_FLOW_REMOVED
,

64 
	mOAM_N_TYPES


68 
c⁄nmgr
 *
c⁄nmgr_¸óã
(
oÂrŸo
 *ofproto,

69 c⁄° *
dpif_«me
, c⁄° *
loˇl_«me
);

70 
c⁄nmgr_de°roy
(
c⁄nmgr
 *);

72 
c⁄nmgr_run
(
c⁄nmgr
 *,

73 
	$boﬁ
 (*
h™dÀ_›íÊow
)(
ofc⁄n
 *,

74 
oÂbuf
 *
oÂ_msg
));

75 
	`c⁄nmgr_waô
(
c⁄nmgr
 *, 
boﬁ
 
h™dlög_›íÊow
);

77 
	`c⁄nmgr_gë_mem‹y_ußge
(c⁄° 
c⁄nmgr
 *, 
sim≠
 *
ußge
);

79 
oÂrŸo
 *
	`ofc⁄n_gë_oÂrŸo
(c⁄° 
ofc⁄n
 *);

81 
	`c⁄nmgr_ªåy
(
c⁄nmgr
 *);

84 
boﬁ
 
	`c⁄nmgr_has_c⁄åﬁÀrs
(c⁄° 
c⁄nmgr
 *);

85 
	`c⁄nmgr_gë_c⁄åﬁÀr_öfo
(
c⁄nmgr
 *, 
shash
 *);

86 
	`c⁄nmgr_‰ì_c⁄åﬁÀr_öfo
(
shash
 *);

87 
	`c⁄nmgr_£t_c⁄åﬁÀrs
(
c⁄nmgr
 *,

88 c⁄° 
oÂrŸo_c⁄åﬁÀr
[], 
size_t
 
n
);

89 
	`c⁄nmgr_ªc⁄√˘
(c⁄° 
c⁄nmgr
 *);

91 
	`c⁄nmgr_£t_¢o›s
(
c⁄nmgr
 *, c⁄° 
s£t
 *
¢o›s
);

92 
boﬁ
 
	`c⁄nmgr_has_¢o›s
(c⁄° 
c⁄nmgr
 *);

93 
	`c⁄nmgr_gë_¢o›s
(c⁄° 
c⁄nmgr
 *, 
s£t
 *
¢o›s
);

96 
ofc⁄n_ty≥
 
	`ofc⁄n_gë_ty≥
(c⁄° 
ofc⁄n
 *);

98 
nx_rﬁe
 
	`ofc⁄n_gë_rﬁe
(c⁄° 
ofc⁄n
 *);

99 
	`ofc⁄n_£t_rﬁe
(
ofc⁄n
 *, 
nx_rﬁe
);

101 
oÂutû_¥Ÿocﬁ
 
	`ofc⁄n_gë_¥Ÿocﬁ
(
ofc⁄n
 *);

102 
	`ofc⁄n_£t_¥Ÿocﬁ
(
ofc⁄n
 *, 
oÂutû_¥Ÿocﬁ
);

104 
nx_∑ckë_ö_f‹m©
 
	`ofc⁄n_gë_∑ckë_ö_f‹m©
(
ofc⁄n
 *);

105 
	`ofc⁄n_£t_∑ckë_ö_f‹m©
(
ofc⁄n
 *, 
nx_∑ckë_ö_f‹m©
);

107 
	`ofc⁄n_£t_c⁄åﬁÀr_id
(
ofc⁄n
 *, 
uöt16_t
 
c⁄åﬁÀr_id
);

109 
	`ofc⁄n_£t_övÆid_âl_to_c⁄åﬁÀr
(
ofc⁄n
 *, 
boﬁ
);

110 
boﬁ
 
	`ofc⁄n_gë_övÆid_âl_to_c⁄åﬁÀr
(
ofc⁄n
 *);

112 
	`ofc⁄n_gë_miss_£nd_Àn
(c⁄° 
ofc⁄n
 *);

113 
	`ofc⁄n_£t_miss_£nd_Àn
(
ofc⁄n
 *, 
miss_£nd_Àn
);

115 
	`ofc⁄n_£t_async_c⁄fig
(
ofc⁄n
 *,

116 c⁄° 
uöt32_t
 
ma°î_masks
[
OAM_N_TYPES
],

117 c⁄° 
uöt32_t
 
¶ave_masks
[
OAM_N_TYPES
]);

119 
	`ofc⁄n_£nd_ª∂y
(c⁄° 
ofc⁄n
 *, 
oÂbuf
 *);

120 
	`ofc⁄n_£nd_ª∂õs
(c⁄° 
ofc⁄n
 *, 
li°
 *);

121 
	`ofc⁄n_£nd_îr‹
(c⁄° 
ofc⁄n
 *, c⁄° 
oÂ_hódî
 *
ªque°
,

122 
oÂîr
);

124 
oÂîr
 
	`ofc⁄n_pktbuf_ªåõve
(
ofc⁄n
 *, 
uöt32_t
 
id
,

125 
oÂbuf
 **
buf„Ω
, 
uöt16_t
 *
ö_p‹t
);

127 
boﬁ
 
	`ofc⁄n_has_≥ndög_›groups
(c⁄° 
ofc⁄n
 *);

128 
	`ofc⁄n_add_›group
(
ofc⁄n
 *, 
li°
 *);

129 
	`ofc⁄n_ªmove_›group
(
ofc⁄n
 *, 
li°
 *,

130 c⁄° 
oÂ_hódî
 *
ªque°
, 
îr‹
);

133 
	`c⁄nmgr_£nd_p‹t_°©us
(
c⁄nmgr
 *,

134 c⁄° 
oÂutû_phy_p‹t
 *, 
uöt8_t
 
ªas⁄
);

135 
	`c⁄nmgr_£nd_Êow_ªmoved
(
c⁄nmgr
 *,

136 c⁄° 
oÂutû_Êow_ªmoved
 *);

137 
	`c⁄nmgr_£nd_∑ckë_ö
(
c⁄nmgr
 *,

138 c⁄° 
oÂutû_∑ckë_ö
 *);

141 
oÂrŸo_Áû_mode
 
	`c⁄nmgr_gë_Áû_mode
(c⁄° 
c⁄nmgr
 *);

142 
	`c⁄nmgr_£t_Áû_mode
(
c⁄nmgr
 *, 
oÂrŸo_Áû_mode
);

145 
	`c⁄nmgr_gë_max_¥obe_öãrvÆ
(c⁄° 
c⁄nmgr
 *);

146 
boﬁ
 
	`c⁄nmgr_is_™y_c⁄åﬁÀr_c⁄√˘ed
(c⁄° 
c⁄nmgr
 *);

147 
boﬁ
 
	`c⁄nmgr_is_™y_c⁄åﬁÀr_admôãd
(c⁄° 
c⁄nmgr
 *);

148 
	`c⁄nmgr_Áûuª_duøti⁄
(c⁄° 
c⁄nmgr
 *);

151 
	`c⁄nmgr_£t_exåa_ö_b™d_ªmŸes
(
c⁄nmgr
 *,

152 c⁄° 
sockaddr_ö
 *, 
size_t
);

153 
	`c⁄nmgr_£t_ö_b™d_queue
(
c⁄nmgr
 *, 
queue_id
);

156 
boﬁ
 
	`c⁄nmgr_msg_ö_hook
(
c⁄nmgr
 *, c⁄° 
Êow
 *,

157 c⁄° 
oÂbuf
 *
∑ckë
);

158 
boﬁ
 
	`c⁄nmgr_may_£t_up_Êow
(
c⁄nmgr
 *, c⁄° 
Êow
 *,

159 c⁄° 
∆©å
 *
odp_a˘i⁄s
,

160 
size_t
 
a˘i⁄s_Àn
);

163 
	`c⁄nmgr_Êushed
(
c⁄nmgr
 *);

166 
	sofm⁄ô‹
 {

167 
ofc⁄n
 *ofconn;

168 
hm≠_node
 
ofc⁄n_node
;

169 
uöt32_t
 
id
;

171 
nx_Êow_m⁄ô‹_Êags
 
Êags
;

174 
uöt16_t
 
out_p‹t
;

175 
uöt8_t
 
èbÀ_id
;

176 
möim©ch
 
m©ch
;

179 
oÂutû_Êow_m⁄ô‹_ªque°
;

181 
oÂîr
 
	`ofm⁄ô‹_¸óã
(c⁄° 
oÂutû_Êow_m⁄ô‹_ªque°
 *,

182 
ofc⁄n
 *, 
ofm⁄ô‹
 **);

183 
ofm⁄ô‹
 *
	`ofm⁄ô‹_lookup
(
ofc⁄n
 *, 
uöt32_t
 
id
);

184 
	`ofm⁄ô‹_de°roy
(
ofm⁄ô‹
 *);

186 
	`ofm⁄ô‹_ªp‹t
(
c⁄nmgr
 *, 
ruÀ
 *,

187 
nx_Êow_upd©e_evít
, 
oÂ_Êow_ªmoved_ªas⁄
,

188 c⁄° 
ofc⁄n
 *
abbªv_ofc⁄n
, 
ovs_be32
 
abbªv_xid
);

189 
	`ofm⁄ô‹_Êush
(
c⁄nmgr
 *);

191 
	`ofm⁄ô‹_cﬁÀ˘_ªsume_ruÀs
(
ofm⁄ô‹
 *, 
uöt64_t
 
£qno
,

192 
li°
 *
ruÀs
);

193 
	`ofm⁄ô‹_compo£_ª‰esh_upd©es
(
li°
 *
ruÀs
, li° *
msgs
);

	@/home/lsch/mytest/openvswitch-1.9.0/ofproto/fail-open.c

17 
	~<c⁄fig.h
>

18 
	~"Áû-›í.h
"

19 
	~<öây≥s.h
>

20 
	~<°dlib.h
>

21 
	~"˛assifõr.h
"

22 
	~"c⁄nmgr.h
"

23 
	~"Êow.h
"

24 
	~"mac-À¨nög.h
"

25 
	~"odp-utû.h
"

26 
	~"oÂ-a˘i⁄s.h
"

27 
	~"oÂ-utû.h
"

28 
	~"oÂbuf.h
"

29 
	~"oÂrŸo.h
"

30 
	~"oÂrŸo-¥ovidî.h
"

31 
	~"pktbuf.h
"

32 
	~"pﬁl-lo›.h
"

33 
	~"rc⁄n.h
"

34 
	~"timevÆ.h
"

35 
	~"vc⁄n.h
"

36 
	~"vlog.h
"

38 
VLOG_DEFINE_THIS_MODULE
(
Áû_›í
);

73 
	sÁû_›í
 {

74 
oÂrŸo
 *
	moÂrŸo
;

75 
c⁄nmgr
 *
	mc⁄nmgr
;

76 
	mœ°_disc⁄n_£cs
;

77 
	m√xt_bogus_∑ckë_ö
;

78 
rc⁄n_∑ckë_cou¡î
 *
	mbogus_∑ckë_cou¡î
;

81 
Áû_›í_ªcovî
(
Áû_›í
 *);

86 
	$åiggî_duøti⁄
(c⁄° 
Áû_›í
 *
fo
)

88 i‡(!
	`c⁄nmgr_has_c⁄åﬁÀrs
(
fo
->
c⁄nmgr
)) {

90  
INT_MAX
;

105  
	`c⁄nmgr_gë_max_¥obe_öãrvÆ
(
fo
->
c⁄nmgr
) * 3;

107 
	}
}

110 
boﬁ


111 
	$Áû_›í_is_a˘ive
(c⁄° 
Áû_›í
 *
fo
)

113  
fo
->
œ°_disc⁄n_£cs
 != 0;

114 
	}
}

117 
	$£nd_bogus_∑ckë_ös
(
Áû_›í
 *
fo
)

119 
oÂutû_∑ckë_ö
 
pö
;

120 
uöt8_t
 
mac
[
ETH_ADDR_LEN
];

121 
oÂbuf
 
b
;

123 
	`oÂbuf_öô
(&
b
, 128);

124 
	`ëh_addr_nicúa_øndom
(
mac
);

125 
	`compo£_øΩ
(&
b
, 
mac
);

127 
	`mem£t
(&
pö
, 0, Öin);

128 
pö
.
∑ckë
 = 
b
.
d©a
;

129 
pö
.
∑ckë_Àn
 = 
b
.
size
;

130 
pö
.
ªas⁄
 = 
OFPR_NO_MATCH
;

131 
pö
.
£nd_Àn
 = 
b
.
size
;

132 
pö
.
fmd
.
ö_p‹t
 = 
OFPP_LOCAL
;

133 
	`c⁄nmgr_£nd_∑ckë_ö
(
fo
->
c⁄nmgr
, &
pö
);

135 
	`oÂbuf_unöô
(&
b
);

136 
	}
}

140 
	$Áû_›í_run
(
Áû_›í
 *
fo
)

142 
disc⁄n_£cs
 = 
	`c⁄nmgr_Áûuª_duøti⁄
(
fo
->
c⁄nmgr
);

145 i‡(
disc⁄n_£cs
 >
	`åiggî_duøti⁄
(
fo
)) {

146 i‡(!
	`Áû_›í_is_a˘ive
(
fo
)) {

147 
	`VLOG_WARN
("CouldÇot connectÅo controller (or switch failed "

149 "pﬁicyËf‹ %d sec⁄ds, faûög o≥n", 
disc⁄n_£cs
);

150 
fo
->
œ°_disc⁄n_£cs
 = 
disc⁄n_£cs
;

155 
	`oÂrŸo_Êush_Êows
(
fo
->
oÂrŸo
);

156 } i‡(
disc⁄n_£cs
 > 
fo
->
œ°_disc⁄n_£cs
 + 60) {

157 
	`VLOG_INFO
("Still in fail-open modeáfter %d seconds disconnected "

158 "‰om c⁄åﬁÀr", 
disc⁄n_£cs
);

159 
fo
->
œ°_disc⁄n_£cs
 = 
disc⁄n_£cs
;

164 i‡(
	`Áû_›í_is_a˘ive
(
fo
)) {

165 i‡(
	`c⁄nmgr_is_™y_c⁄åﬁÀr_c⁄√˘ed
(
fo
->
c⁄nmgr
)) {

166 
boﬁ
 
expúed
 = 
	`time_m£c
(Ë>
fo
->
√xt_bogus_∑ckë_ö
;

167 i‡(
expúed
) {

168 
	`£nd_bogus_∑ckë_ös
(
fo
);

170 i‡(
expúed
 || 
fo
->
√xt_bogus_∑ckë_ö
 =
LLONG_MAX
) {

171 
fo
->
√xt_bogus_∑ckë_ö
 = 
	`time_m£c
() + 2000;

174 
fo
->
√xt_bogus_∑ckë_ö
 = 
LLONG_MAX
;

178 
	}
}

183 
	$Áû_›í_maybe_ªcovî
(
Áû_›í
 *
fo
)

185 i‡(
	`Áû_›í_is_a˘ive
(
fo
)

186 && 
	`c⁄nmgr_is_™y_c⁄åﬁÀr_admôãd
(
fo
->
c⁄nmgr
)) {

187 
	`Áû_›í_ªcovî
(
fo
);

189 
	}
}

192 
	$Áû_›í_ªcovî
(
Áû_›í
 *
fo
)

194 
m©ch
 match;

196 
	`VLOG_WARN
("NoÜonger in fail-open mode");

197 
fo
->
œ°_disc⁄n_£cs
 = 0;

198 
fo
->
√xt_bogus_∑ckë_ö
 = 
LLONG_MAX
;

200 
	`m©ch_öô_ˇtchÆl
(&
m©ch
);

201 
	`oÂrŸo_dñëe_Êow
(
fo
->
oÂrŸo
, &
m©ch
, 
FAIL_OPEN_PRIORITY
);

202 
	}
}

205 
	$Áû_›í_waô
(
Áû_›í
 *
fo
)

207 i‡(
fo
->
√xt_bogus_∑ckë_ö
 !
LLONG_MAX
) {

208 
	`pﬁl_timî_waô_u¡û
(
fo
->
√xt_bogus_∑ckë_ö
);

210 
	}
}

213 
	$Áû_›í_Êushed
(
Áû_›í
 *
fo
)

215 
disc⁄n_£cs
 = 
	`c⁄nmgr_Áûuª_duøti⁄
(
fo
->
c⁄nmgr
);

216 
boﬁ
 
›í
 = 
disc⁄n_£cs
 >
	`åiggî_duøti⁄
(
fo
);

217 i‡(
›í
) {

218 
oÂbuf
 
oÂa˘s
;

219 
m©ch
 match;

223 
	`oÂbuf_öô
(&
oÂa˘s
, 
OFPACT_OUTPUT_SIZE
);

224 
	`oÂa˘_put_OUTPUT
(&
oÂa˘s
)->
p‹t
 = 
OFPP_NORMAL
;

225 
	`oÂa˘_∑d
(&
oÂa˘s
);

227 
	`m©ch_öô_ˇtchÆl
(&
m©ch
);

228 
	`oÂrŸo_add_Êow
(
fo
->
oÂrŸo
, &
m©ch
, 
FAIL_OPEN_PRIORITY
,

229 
oÂa˘s
.
d©a
, oÂa˘s.
size
);

231 
	`oÂbuf_unöô
(&
oÂa˘s
);

233 
	}
}

236 
Áû_›í
 *

237 
	$Áû_›í_¸óã
(
oÂrŸo
 *oÂrŸo, 
c⁄nmgr
 *
mgr
)

239 
Áû_›í
 *
fo
 = 
	`xmÆloc
( *fo);

240 
fo
->
oÂrŸo
 = ofproto;

241 
fo
->
c⁄nmgr
 = 
mgr
;

242 
fo
->
œ°_disc⁄n_£cs
 = 0;

243 
fo
->
√xt_bogus_∑ckë_ö
 = 
LLONG_MAX
;

244 
fo
->
bogus_∑ckë_cou¡î
 = 
	`rc⁄n_∑ckë_cou¡î_¸óã
();

245  
fo
;

246 
	}
}

250 
	$Áû_›í_de°roy
(
Áû_›í
 *
fo
)

252 i‡(
fo
) {

253 i‡(
	`Áû_›í_is_a˘ive
(
fo
)) {

254 
	`Áû_›í_ªcovî
(
fo
);

257 
	`rc⁄n_∑ckë_cou¡î_de°roy
(
fo
->
bogus_∑ckë_cou¡î
);

258 
	`‰ì
(
fo
);

260 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/ofproto/fail-open.h

17 #i‚de‡
FAIL_OPEN_H


18 
	#FAIL_OPEN_H
 1

	)

20 
	~<°dboﬁ.h
>

21 
	~<°döt.h
>

22 
	~"Êow.h
"

24 
	gc⁄nmgr
;

25 
	gÁû_›í
;

26 
	goÂrŸo
;

32 
	#FAIL_OPEN_PRIORITY
 0xf0f0f0

	)

34 
Áû_›í
 *
Áû_›í_¸óã
(
oÂrŸo
 *, 
c⁄nmgr
 *);

35 
Áû_›í_de°roy
(
Áû_›í
 *);

36 
Áû_›í_waô
(
Áû_›í
 *);

37 
boﬁ
 
Áû_›í_is_a˘ive
(c⁄° 
Áû_›í
 *);

38 
Áû_›í_run
(
Áû_›í
 *);

39 
Áû_›í_maybe_ªcovî
(
Áû_›í
 *);

40 
Áû_›í_Êushed
(
Áû_›í
 *);

	@/home/lsch/mytest/openvswitch-1.9.0/ofproto/in-band.c

17 
	~<c⁄fig.h
>

18 
	~"ö-b™d.h
"

19 
	~<¨∑/öë.h
>

20 
	~<î∫o.h
>

21 
	~<öây≥s.h
>

22 
	~<sys/sockë.h
>

23 
	~<√t/if.h
>

24 
	~<°rög.h
>

25 
	~<°dlib.h
>

26 
	~"˛assifõr.h
"

27 
	~"dh˝.h
"

28 
	~"Êow.h
"

29 
	~"√tdev.h
"

30 
	~"√éök.h
"

31 
	~"odp-utû.h
"

32 
	~"oÂ-a˘i⁄s.h
"

33 
	~"oÂrŸo.h
"

34 
	~"oÂbuf.h
"

35 
	~"oÂrŸo-¥ovidî.h
"

36 
	~"›íÊow/›íÊow.h
"

37 
	~"∑ckës.h
"

38 
	~"pﬁl-lo›.h
"

39 
	~"timevÆ.h
"

40 
	~"vlog.h
"

42 
VLOG_DEFINE_THIS_MODULE
(
ö_b™d
);

51 
	mIBR_FROM_LOCAL_DHCP
 = 180000,

52 
	mIBR_TO_LOCAL_ARP
,

53 
	mIBR_FROM_LOCAL_ARP
,

56 
	mIBR_TO_NEXT_HOP_ARP
,

57 
	mIBR_FROM_NEXT_HOP_ARP
,

60 
	mIBR_TO_REMOTE_ARP
,

61 
	mIBR_FROM_REMOTE_ARP
,

64 
	mIBR_TO_REMOTE_TCP
,

65 
	mIBR_FROM_REMOTE_TCP


69 
	sö_b™d_ªmŸe
 {

70 
sockaddr_ö
 
	mªmŸe_addr
;

71 
uöt8_t
 
	mªmŸe_mac
[
ETH_ADDR_LEN
];

72 
uöt8_t
 
	mœ°_ªmŸe_mac
[
ETH_ADDR_LEN
];

73 
√tdev
 *
	mªmŸe_√tdev
;

77 
	eö_b™d_›
 {

78 
	mADD
,

79 
	mDELETE


83 
	sö_b™d_ruÀ
 {

84 
hm≠_node
 
	mhm≠_node
;

85 
m©ch
 
	mm©ch
;

86 
	m¥i‹ôy
;

87 
ö_b™d_›
 
	m›
;

90 
	sö_b™d
 {

91 
oÂrŸo
 *
	moÂrŸo
;

92 
	mqueue_id
;

95 
time_t
 
	m√xt_ªmŸe_ª‰esh
;

96 
ö_b™d_ªmŸe
 *
	mªmŸes
;

97 
size_t
 
	mn_ªmŸes
;

100 
time_t
 
	m√xt_loˇl_ª‰esh
;

101 
uöt8_t
 
	mloˇl_mac
[
ETH_ADDR_LEN
];

102 
√tdev
 *
	mloˇl_√tdev
;

105 
hm≠
 
	mruÀs
;

108 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(60, 60);

111 
	$ª‰esh_ªmŸe
(
ö_b™d
 *
ib
, 
ö_b™d_ªmŸe
 *
r
)

113 
ö_addr
 
√xt_h›_öaddr
;

114 *
√xt_h›_dev
;

115 
ªtvÆ
;

118 
	`mem£t
(
r
->
ªmŸe_mac
, 0, Ñ->remote_mac);

119 
ªtvÆ
 = 
	`√tdev_gë_√xt_h›
(
ib
->
loˇl_√tdev
, &
r
->
ªmŸe_addr
.
sö_addr
,

120 &
√xt_h›_öaddr
, &
√xt_h›_dev
);

121 i‡(
ªtvÆ
) {

122 
	`VLOG_WARN
("ˇ¬Ÿ födÑouã f‹ c⁄åﬁÀ∏("
IP_FMT
"): %s",

123 
	`IP_ARGS
(&
r
->
ªmŸe_addr
.
sö_addr
), 
	`°ªº‹
(
ªtvÆ
));

126 i‡(!
√xt_h›_öaddr
.
s_addr
) {

127 
√xt_h›_öaddr
 = 
r
->
ªmŸe_addr
.
sö_addr
;

131 i‡(!
r
->
ªmŸe_√tdev


132 || 
	`°rcmp
(
	`√tdev_gë_«me
(
r
->
ªmŸe_√tdev
), 
√xt_h›_dev
))

134 
	`√tdev_˛o£
(
r
->
ªmŸe_√tdev
);

136 
ªtvÆ
 = 
	`√tdev_›í
(
√xt_h›_dev
, "sy°em", &
r
->
ªmŸe_√tdev
);

137 i‡(
ªtvÆ
) {

138 
	`VLOG_WARN_RL
(&
æ
, "cannot openÇetdev %s (next hop "

139 "tÿc⁄åﬁÀ∏"
IP_FMT
"): %s",

140 
√xt_h›_dev
, 
	`IP_ARGS
(&
r
->
ªmŸe_addr
.
sö_addr
),

141 
	`°ªº‹
(
ªtvÆ
));

142 
	`‰ì
(
√xt_h›_dev
);

146 
	`‰ì
(
√xt_h›_dev
);

149 
ªtvÆ
 = 
	`√tdev_¨p_lookup
(
r
->
ªmŸe_√tdev
, 
√xt_h›_öaddr
.
s_addr
,

150 
r
->
ªmŸe_mac
);

151 i‡(
ªtvÆ
) {

152 
	`VLOG_DBG_RL
(&
æ
, "ˇ¬ŸÜook u∞ªmŸêMACáddªs†("
IP_FMT
"): %s",

153 
	`IP_ARGS
(&
√xt_h›_öaddr
.
s_addr
), 
	`°ªº‹
(
ªtvÆ
));

159  
	`ëh_addr_is_zîo
(
r
->
ªmŸe_mac
) ? 1 : 10;

160 
	}
}

162 
boﬁ


163 
	$ª‰esh_ªmŸes
(
ö_b™d
 *
ib
)

165 
ö_b™d_ªmŸe
 *
r
;

166 
boﬁ
 
™y_ch™ges
;

168 i‡(
	`time_now
(Ë< 
ib
->
√xt_ªmŸe_ª‰esh
) {

169  
Ál£
;

172 
™y_ch™ges
 = 
Ál£
;

173 
ib
->
√xt_ªmŸe_ª‰esh
 = 
TIME_MAX
;

174 
r
 = 
ib
->
ªmŸes
;Ñ < &ib->ªmŸes[ib->
n_ªmŸes
];Ñ++) {

175 
uöt8_t
 
ﬁd_ªmŸe_mac
[
ETH_ADDR_LEN
];

176 
time_t
 
√xt_ª‰esh
;

179 
	`mem˝y
(
ﬁd_ªmŸe_mac
, 
r
->
ªmŸe_mac
, 
ETH_ADDR_LEN
);

182 
√xt_ª‰esh
 = 
	`ª‰esh_ªmŸe
(
ib
, 
r
Ë+ 
	`time_now
();

183 
ib
->
√xt_ªmŸe_ª‰esh
 = 
	`MIN
(ib->√xt_ªmŸe_ª‰esh, 
√xt_ª‰esh
);

186 i‡(!
	`ëh_addr_equÆs
(
r
->
ªmŸe_mac
, 
ﬁd_ªmŸe_mac
)) {

187 
™y_ch™ges
 = 
åue
;

188 i‡(!
	`ëh_addr_is_zîo
(
r
->
ªmŸe_mac
)

189 && !
	`ëh_addr_equÆs
(
r
->
œ°_ªmŸe_mac
,Ñ->
ªmŸe_mac
)) {

190 
	`VLOG_DBG
("ªmŸêMACáddªs†ch™ged from "
ETH_ADDR_FMT


191 "Åÿ"
ETH_ADDR_FMT
,

192 
	`ETH_ADDR_ARGS
(
r
->
œ°_ªmŸe_mac
),

193 
	`ETH_ADDR_ARGS
(
r
->
ªmŸe_mac
));

194 
	`mem˝y
(
r
->
œ°_ªmŸe_mac
,Ñ->
ªmŸe_mac
, 
ETH_ADDR_LEN
);

199  
™y_ch™ges
;

200 
	}
}

204 
boﬁ


205 
	$ª‰esh_loˇl
(
ö_b™d
 *
ib
)

207 
uöt8_t
 
ó
[
ETH_ADDR_LEN
];

208 
time_t
 
now
;

210 
now
 = 
	`time_now
();

211 i‡(
now
 < 
ib
->
√xt_loˇl_ª‰esh
) {

212  
Ál£
;

214 
ib
->
√xt_loˇl_ª‰esh
 = 
now
 + 1;

216 i‡(
	`√tdev_gë_ëhîaddr
(
ib
->
loˇl_√tdev
, 
ó
)

217 || 
	`ëh_addr_equÆs
(
ó
, 
ib
->
loˇl_mac
)) {

218  
Ál£
;

221 
	`mem˝y
(
ib
->
loˇl_mac
, 
ó
, 
ETH_ADDR_LEN
);

222  
åue
;

223 
	}
}

227 
boﬁ


228 
	$ö_b™d_msg_ö_hook
(
ö_b™d
 *ö_b™d, c⁄° 
Êow
 *flow,

229 c⁄° 
oÂbuf
 *
∑ckë
)

233 i‡(
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IP
)

234 && 
Êow
->
nw_¥Ÿo
 =
IPPROTO_UDP


235 && 
Êow
->
ç_§c
 =
	`ht⁄s
(
DHCP_SERVER_PORT
)

236 && 
Êow
->
ç_d°
 =
	`ht⁄s
(
DHCP_CLIENT_PORT
)

237 && 
∑ckë
->
l7
) {

238 
dh˝_hódî
 *
dh˝
;

240 
dh˝
 = 
	`oÂbuf_©
(
∑ckë
, (*Ìackë->
l7
 - (*Ìackë->
d©a
,

241  *
dh˝
);

242 i‡(!
dh˝
) {

243  
Ál£
;

246 
	`ª‰esh_loˇl
(
ö_b™d
);

247 i‡(!
	`ëh_addr_is_zîo
(
ö_b™d
->
loˇl_mac
)

248 && 
	`ëh_addr_equÆs
(
dh˝
->
chaddr
, 
ö_b™d
->
loˇl_mac
)) {

249  
åue
;

253  
Ál£
;

254 
	}
}

258 
boﬁ


259 
	$ö_b™d_ruÀ_check
(c⁄° 
Êow
 *flow,

260 c⁄° 
∆©å
 *
a˘i⁄s
, 
size_t
 
a˘i⁄s_Àn
)

264 i‡(
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IP
)

265 && 
Êow
->
nw_¥Ÿo
 =
IPPROTO_UDP


266 && 
Êow
->
ç_§c
 =
	`ht⁄s
(
DHCP_SERVER_PORT
)

267 && 
Êow
->
ç_d°
 =
	`ht⁄s
(
DHCP_CLIENT_PORT
)) {

268 c⁄° 
∆©å
 *
a
;

269 
À·
;

271 
	`NL_ATTR_FOR_EACH_UNSAFE
 (
a
, 
À·
, 
a˘i⁄s
, 
a˘i⁄s_Àn
) {

272 i‡(
	`∆_©å_ty≥
(
a
Ë=
OVS_ACTION_ATTR_OUTPUT


273 && 
	`∆_©å_gë_u32
(
a
Ë=
OVSP_LOCAL
) {

274  
åue
;

277  
Ál£
;

280  
åue
;

281 
	}
}

284 
	$add_ruÀ
(
ö_b™d
 *
ib
, c⁄° 
m©ch
 *m©ch, 
¥i‹ôy
)

286 
uöt32_t
 
hash
 = 
	`m©ch_hash
(
m©ch
, 0);

287 
ö_b™d_ruÀ
 *
ruÀ
;

289 
	`HMAP_FOR_EACH_WITH_HASH
 (
ruÀ
, 
hm≠_node
, 
hash
, &
ib
->
ruÀs
) {

290 i‡(
	`m©ch_equÆ
(&
ruÀ
->
m©ch
, match)) {

291 
ruÀ
->
›
 = 
ADD
;

296 
ruÀ
 = 
	`xmÆloc
( *rule);

297 
ruÀ
->
m©ch
 = *match;

298 
ruÀ
->
¥i‹ôy
 =Öriority;

299 
ruÀ
->
›
 = 
ADD
;

300 
	`hm≠_ö£π
(&
ib
->
ruÀs
, &
ruÀ
->
hm≠_node
, 
hash
);

301 
	}
}

304 
	$upd©e_ruÀs
(
ö_b™d
 *
ib
)

306 
ö_b™d_ruÀ
 *
ib_ruÀ
;

307 
ö_b™d_ªmŸe
 *
r
;

308 
m©ch
 match;

312 
	`HMAP_FOR_EACH
 (
ib_ruÀ
, 
hm≠_node
, &
ib
->
ruÀs
) {

313 
ib_ruÀ
->
›
 = 
DELETE
;

316 i‡(
ib
->
n_ªmŸes
 && !
	`ëh_addr_is_zîo
(ib->
loˇl_mac
)) {

318 
	`m©ch_öô_ˇtchÆl
(&
m©ch
);

319 
	`m©ch_£t_ö_p‹t
(&
m©ch
, 
OFPP_LOCAL
);

320 
	`m©ch_£t_dl_ty≥
(&
m©ch
, 
	`ht⁄s
(
ETH_TYPE_IP
));

321 
	`m©ch_£t_dl_§c
(&
m©ch
, 
ib
->
loˇl_mac
);

322 
	`m©ch_£t_nw_¥Ÿo
(&
m©ch
, 
IPPROTO_UDP
);

323 
	`m©ch_£t_ç_§c
(&
m©ch
, 
	`ht⁄s
(
DHCP_CLIENT_PORT
));

324 
	`m©ch_£t_ç_d°
(&
m©ch
, 
	`ht⁄s
(
DHCP_SERVER_PORT
));

325 
	`add_ruÀ
(
ib
, &
m©ch
, 
IBR_FROM_LOCAL_DHCP
);

328 
	`m©ch_öô_ˇtchÆl
(&
m©ch
);

329 
	`m©ch_£t_dl_ty≥
(&
m©ch
, 
	`ht⁄s
(
ETH_TYPE_ARP
));

330 
	`m©ch_£t_dl_d°
(&
m©ch
, 
ib
->
loˇl_mac
);

331 
	`m©ch_£t_nw_¥Ÿo
(&
m©ch
, 
ARP_OP_REPLY
);

332 
	`add_ruÀ
(
ib
, &
m©ch
, 
IBR_TO_LOCAL_ARP
);

335 
	`m©ch_öô_ˇtchÆl
(&
m©ch
);

336 
	`m©ch_£t_dl_ty≥
(&
m©ch
, 
	`ht⁄s
(
ETH_TYPE_ARP
));

337 
	`m©ch_£t_dl_§c
(&
m©ch
, 
ib
->
loˇl_mac
);

338 
	`m©ch_£t_nw_¥Ÿo
(&
m©ch
, 
ARP_OP_REQUEST
);

339 
	`add_ruÀ
(
ib
, &
m©ch
, 
IBR_FROM_LOCAL_ARP
);

342 
r
 = 
ib
->
ªmŸes
;Ñ < &ib->ªmŸes[ib->
n_ªmŸes
];Ñ++) {

343 c⁄° 
uöt8_t
 *
ªmŸe_mac
 = 
r
->remote_mac;

345 i‡(
	`ëh_addr_is_zîo
(
ªmŸe_mac
)) {

350 
	`m©ch_öô_ˇtchÆl
(&
m©ch
);

351 
	`m©ch_£t_dl_ty≥
(&
m©ch
, 
	`ht⁄s
(
ETH_TYPE_ARP
));

352 
	`m©ch_£t_dl_d°
(&
m©ch
, 
ªmŸe_mac
);

353 
	`m©ch_£t_nw_¥Ÿo
(&
m©ch
, 
ARP_OP_REPLY
);

354 
	`add_ruÀ
(
ib
, &
m©ch
, 
IBR_TO_NEXT_HOP_ARP
);

357 
	`m©ch_öô_ˇtchÆl
(&
m©ch
);

358 
	`m©ch_£t_dl_ty≥
(&
m©ch
, 
	`ht⁄s
(
ETH_TYPE_ARP
));

359 
	`m©ch_£t_dl_§c
(&
m©ch
, 
ªmŸe_mac
);

360 
	`m©ch_£t_nw_¥Ÿo
(&
m©ch
, 
ARP_OP_REQUEST
);

361 
	`add_ruÀ
(
ib
, &
m©ch
, 
IBR_FROM_NEXT_HOP_ARP
);

364 
r
 = 
ib
->
ªmŸes
;Ñ < &ib->ªmŸes[ib->
n_ªmŸes
];Ñ++) {

365 c⁄° 
sockaddr_ö
 *
a
 = &
r
->
ªmŸe_addr
;

369 
	`m©ch_öô_ˇtchÆl
(&
m©ch
);

370 
	`m©ch_£t_dl_ty≥
(&
m©ch
, 
	`ht⁄s
(
ETH_TYPE_ARP
));

371 
	`m©ch_£t_nw_¥Ÿo
(&
m©ch
, 
ARP_OP_REPLY
);

372 
	`m©ch_£t_nw_d°
(&
m©ch
, 
a
->
sö_addr
.
s_addr
);

373 
	`add_ruÀ
(
ib
, &
m©ch
, 
IBR_TO_REMOTE_ARP
);

377 
	`m©ch_öô_ˇtchÆl
(&
m©ch
);

378 
	`m©ch_£t_dl_ty≥
(&
m©ch
, 
	`ht⁄s
(
ETH_TYPE_ARP
));

379 
	`m©ch_£t_nw_¥Ÿo
(&
m©ch
, 
ARP_OP_REQUEST
);

380 
	`m©ch_£t_nw_§c
(&
m©ch
, 
a
->
sö_addr
.
s_addr
);

381 
	`add_ruÀ
(
ib
, &
m©ch
, 
IBR_FROM_REMOTE_ARP
);

384 
	`m©ch_öô_ˇtchÆl
(&
m©ch
);

385 
	`m©ch_£t_dl_ty≥
(&
m©ch
, 
	`ht⁄s
(
ETH_TYPE_IP
));

386 
	`m©ch_£t_nw_¥Ÿo
(&
m©ch
, 
IPPROTO_TCP
);

387 
	`m©ch_£t_nw_d°
(&
m©ch
, 
a
->
sö_addr
.
s_addr
);

388 
	`m©ch_£t_ç_d°
(&
m©ch
, 
a
->
sö_p‹t
);

389 
	`add_ruÀ
(
ib
, &
m©ch
, 
IBR_TO_REMOTE_TCP
);

392 
	`m©ch_öô_ˇtchÆl
(&
m©ch
);

393 
	`m©ch_£t_dl_ty≥
(&
m©ch
, 
	`ht⁄s
(
ETH_TYPE_IP
));

394 
	`m©ch_£t_nw_¥Ÿo
(&
m©ch
, 
IPPROTO_TCP
);

395 
	`m©ch_£t_nw_§c
(&
m©ch
, 
a
->
sö_addr
.
s_addr
);

396 
	`m©ch_£t_ç_§c
(&
m©ch
, 
a
->
sö_p‹t
);

397 
	`add_ruÀ
(
ib
, &
m©ch
, 
IBR_FROM_REMOTE_TCP
);

399 
	}
}

406 
boﬁ


407 
	$ö_b™d_run
(
ö_b™d
 *
ib
)

409 
uöt64_t
 
oÂa˘s_°ub
[128 / 8];

410 
oÂbuf
 
oÂa˘s
;

412 
ö_b™d_ruÀ
 *
ruÀ
, *
√xt
;

414 
	`oÂbuf_u£_°ub
(&
oÂa˘s
, 
oÂa˘s_°ub
,  ofpacts_stub);

416 i‡(
ib
->
queue_id
 >= 0) {

417 
	`oÂa˘_put_SET_QUEUE
(&
oÂa˘s
)->
queue_id
 = 
ib
->queue_id;

419 
	`oÂa˘_put_OUTPUT
(&
oÂa˘s
)->
p‹t
 = 
OFPP_NORMAL
;

421 
	`ª‰esh_loˇl
(
ib
);

422 
	`ª‰esh_ªmŸes
(
ib
);

424 
	`upd©e_ruÀs
(
ib
);

426 
	`HMAP_FOR_EACH_SAFE
 (
ruÀ
, 
√xt
, 
hm≠_node
, &
ib
->
ruÀs
) {

427 
ruÀ
->
›
) {

428 
ADD
:

429 
	`oÂrŸo_add_Êow
(
ib
->
oÂrŸo
, &
ruÀ
->
m©ch
,ÑuÀ->
¥i‹ôy
,

430 
oÂa˘s
.
d©a
, oÂa˘s.
size
);

433 
DELETE
:

434 i‡(
	`oÂrŸo_dñëe_Êow
(
ib
->
oÂrŸo
,

435 &
ruÀ
->
m©ch
,ÑuÀ->
¥i‹ôy
)) {

438 
	`hm≠_ªmove
(&
ib
->
ruÀs
, &
ruÀ
->
hm≠_node
);

439 
	`‰ì
(
ruÀ
);

445 
	`oÂbuf_unöô
(&
oÂa˘s
);

447  
ib
->
n_ªmŸes
 || !
	`hm≠_is_em±y
(&ib->
ruÀs
);

448 
	}
}

451 
	$ö_b™d_waô
(
ö_b™d
 *in_band)

453 
wakeup


454 
	`MIN
(
ö_b™d
->
√xt_ªmŸe_ª‰esh
, in_b™d->
√xt_loˇl_ª‰esh
);

455 
	`pﬁl_timî_waô_u¡û
(
wakeup
 * 1000);

456 
	}
}

459 
	$ö_b™d_¸óã
(
oÂrŸo
 *oÂrŸo, c⁄° *
loˇl_«me
,

460 
ö_b™d
 **
ö_b™dp
)

462 
ö_b™d
 *in_band;

463 
√tdev
 *
loˇl_√tdev
;

464 
îr‹
;

466 *
ö_b™dp
 = 
NULL
;

467 
îr‹
 = 
	`√tdev_›í
(
loˇl_«me
, "sy°em", &
loˇl_√tdev
);

468 i‡(
îr‹
) {

469 
	`VLOG_ERR
("failedÅo initialize in-band control: cannot open "

470 "d©≠©hÜoˇ»p‹à%†(%s)", 
loˇl_«me
, 
	`°ªº‹
(
îr‹
));

471  
îr‹
;

474 
ö_b™d
 = 
	`xzÆloc
( *in_band);

475 
ö_b™d
->
oÂrŸo
 = ofproto;

476 
ö_b™d
->
queue_id
 = -1;

477 
ö_b™d
->
√xt_ªmŸe_ª‰esh
 = 
TIME_MIN
;

478 
ö_b™d
->
√xt_loˇl_ª‰esh
 = 
TIME_MIN
;

479 
ö_b™d
->
loˇl_√tdev
 =Üocal_netdev;

480 
	`hm≠_öô
(&
ö_b™d
->
ruÀs
);

482 *
ö_b™dp
 = 
ö_b™d
;

485 
	}
}

488 
	$ö_b™d_de°roy
(
ö_b™d
 *
ib
)

490 i‡(
ib
) {

491 
ö_b™d_ruÀ
 *
ruÀ
, *
√xt
;

493 
	`HMAP_FOR_EACH_SAFE
 (
ruÀ
, 
√xt
, 
hm≠_node
, &
ib
->
ruÀs
) {

494 
	`hm≠_ªmove
(&
ib
->
ruÀs
, &
ruÀ
->
hm≠_node
);

495 
	`‰ì
(
ruÀ
);

497 
	`hm≠_de°roy
(&
ib
->
ruÀs
);

498 
	`ö_b™d_£t_ªmŸes
(
ib
, 
NULL
, 0);

499 
	`√tdev_˛o£
(
ib
->
loˇl_√tdev
);

500 
	`‰ì
(
ib
);

502 
	}
}

504 
boﬁ


505 
	$™y_addªs£s_ch™ged
(
ö_b™d
 *
ib
,

506 c⁄° 
sockaddr_ö
 *
addªs£s
, 
size_t
 
n
)

508 
size_t
 
i
;

510 i‡(
n
 !
ib
->
n_ªmŸes
) {

511  
åue
;

514 
i
 = 0; i < 
n
; i++) {

515 c⁄° 
sockaddr_ö
 *
ﬁd
 = &
ib
->
ªmŸes
[
i
].
ªmŸe_addr
;

516 c⁄° 
sockaddr_ö
 *
√w
 = &
addªs£s
[
i
];

518 i‡(
ﬁd
->
sö_addr
.
s_addr
 !
√w
->sin_addr.s_addr ||

519 
ﬁd
->
sö_p‹t
 !
√w
->sin_port) {

520  
åue
;

524  
Ál£
;

525 
	}
}

528 
	$ö_b™d_£t_ªmŸes
(
ö_b™d
 *
ib
,

529 c⁄° 
sockaddr_ö
 *
addªs£s
, 
size_t
 
n
)

531 
size_t
 
i
;

533 i‡(!
	`™y_addªs£s_ch™ged
(
ib
, 
addªs£s
, 
n
)) {

538 
i
 = 0; i < 
ib
->
n_ªmŸes
; i++) {

539 
	`√tdev_˛o£
(
ib
->
ªmŸes
[
i
].
ªmŸe_√tdev
);

541 
	`‰ì
(
ib
->
ªmŸes
);

544 
ib
->
ªmŸes
 = 
n
 ? 
	`xzÆloc
“ *  *ib->ªmŸesË: 
NULL
;

545 
ib
->
n_ªmŸes
 = 
n
;

546 
i
 = 0; i < 
n
; i++) {

547 
ib
->
ªmŸes
[
i
].
ªmŸe_addr
 = 
addªs£s
[i];

551 
ib
->
√xt_ªmŸe_ª‰esh
 = 
TIME_MIN
;

552 
	}
}

558 
	$ö_b™d_£t_queue
(
ö_b™d
 *
ib
, 
queue_id
)

560 
ib
->
queue_id
 = queue_id;

561 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/ofproto/in-band.h

17 #i‚de‡
IN_BAND_H


18 
	#IN_BAND_H
 1

	)

20 
	~<°dboﬁ.h
>

21 
	~<°ddef.h
>

22 
	~<sys/sockë.h
>

23 
	~<√töë/ö.h
>

25 
	gÊow
;

26 
	gö_b™d
;

27 
	g∆©å
;

28 
	goÂbuf
;

29 
	goÂrŸo
;

31 
ö_b™d_¸óã
(
oÂrŸo
 *, c⁄° *
loˇl_«me
,

32 
ö_b™d
 **);

33 
ö_b™d_de°roy
(
ö_b™d
 *);

35 
ö_b™d_£t_queue
(
ö_b™d
 *, 
queue_id
);

36 
ö_b™d_£t_ªmŸes
(
ö_b™d
 *,

37 c⁄° 
sockaddr_ö
 *, 
size_t
 
n
);

39 
boﬁ
 
ö_b™d_run
(
ö_b™d
 *);

40 
ö_b™d_waô
(
ö_b™d
 *);

42 
boﬁ
 
ö_b™d_msg_ö_hook
(
ö_b™d
 *, c⁄° 
Êow
 *,

43 c⁄° 
oÂbuf
 *
∑ckë
);

44 
boﬁ
 
ö_b™d_ruÀ_check
(c⁄° 
Êow
 *,

45 c⁄° 
∆©å
 *
odp_a˘i⁄s
, 
size_t
 
a˘i⁄s_Àn
);

	@/home/lsch/mytest/openvswitch-1.9.0/ofproto/names.c

17 
	~<c⁄fig.h
>

19 
	~"oÂrŸo/oÂrŸo.h
"

21 
	~"dpif.h
"

31 
	$oÂrŸo_∑r£_«me
(c⁄° *
oÂrŸo_«me
, **
«me
, **
ty≥
)

33 
	`dp_∑r£_«me
(
oÂrŸo_«me
, 
«me
, 
ty≥
);

34 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/ofproto/netflow.c

17 
	~<c⁄fig.h
>

18 
	~"√tÊow.h
"

19 
	~<¨∑/öë.h
>

20 
	~<î∫o.h
>

21 
	~<°dlib.h
>

22 
	~<uni°d.h
>

23 
	~"byã-‹dî.h
"

24 
	~"cﬁÀ˘‹s.h
"

25 
	~"Êow.h
"

26 
	~"lib/√tÊow.h
"

27 
	~"oÂbuf.h
"

28 
	~"oÂrŸo.h
"

29 
	~"oÂrŸo/√tÊow.h
"

30 
	~"∑ckës.h
"

31 
	~"pﬁl-lo›.h
"

32 
	~"sockë-utû.h
"

33 
	~"timevÆ.h
"

34 
	~"utû.h
"

35 
	~"vlog.h
"

37 
VLOG_DEFINE_THIS_MODULE
(
√tÊow
);

39 
	s√tÊow
 {

40 
uöt8_t
 
	mígöe_ty≥
;

41 
uöt8_t
 
	mígöe_id
;

42 
	mboŸ_time
;

43 
cﬁÀ˘‹s
 *
	mcﬁÀ˘‹s
;

44 
boﬁ
 
	madd_id_to_iÁ˚
;

47 
uöt32_t
 
	m√tÊow_˙t
;

48 
oÂbuf
 
	m∑ckë
;

49 
	ma˘ive_timeout
;

50 
	m√xt_timeout
;

51 
	mªc⁄fig_time
;

55 
	$gí_√tÊow_ªc
(
√tÊow
 *
nf
, 
√tÊow_Êow
 *
nf_Êow
,

56 
o„xpúed
 *
expúed
,

57 
uöt32_t
 
∑ckë_cou¡
, uöt32_à
byã_cou¡
)

59 
√tÊow_v5_hódî
 *
nf_hdr
;

60 
√tÊow_v5_ªc‹d
 *
nf_ªc
;

62 i‡(!
nf
->
∑ckë
.
size
) {

63 
time•ec
 
now
;

65 
	`time_wÆl_time•ec
(&
now
);

67 
nf_hdr
 = 
	`oÂbuf_put_zîos
(&
nf
->
∑ckë
,  *nf_hdr);

68 
nf_hdr
->
vîsi⁄
 = 
	`ht⁄s
(
NETFLOW_V5_VERSION
);

69 
nf_hdr
->
cou¡
 = 
	`ht⁄s
(0);

70 
nf_hdr
->
sysu±ime
 = 
	`ht⁄l
(
	`time_m£c
(Ë- 
nf
->
boŸ_time
);

71 
nf_hdr
->
unix_£cs
 = 
	`ht⁄l
(
now
.
tv_£c
);

72 
nf_hdr
->
unix_n£cs
 = 
	`ht⁄l
(
now
.
tv_n£c
);

73 
nf_hdr
->
Êow_£q
 = 
	`ht⁄l
(
nf
->
√tÊow_˙t
++);

74 
nf_hdr
->
ígöe_ty≥
 = 
nf
->engine_type;

75 
nf_hdr
->
ígöe_id
 = 
nf
->engine_id;

76 
nf_hdr
->
ßm∂ög_öãrvÆ
 = 
	`ht⁄s
(0);

79 
nf_hdr
 = 
nf
->
∑ckë
.
d©a
;

80 
nf_hdr
->
cou¡
 = 
	`ht⁄s
(
	`¡ohs
(nf_hdr->count) + 1);

82 
nf_ªc
 = 
	`oÂbuf_put_zîos
(&
nf
->
∑ckë
,  *nf_rec);

83 
nf_ªc
->
§c_addr
 = 
expúed
->
Êow
.
nw_§c
;

84 
nf_ªc
->
d°_addr
 = 
expúed
->
Êow
.
nw_d°
;

85 
nf_ªc
->
√xth›
 = 
	`ht⁄l
(0);

86 i‡(
nf
->
add_id_to_iÁ˚
) {

87 
uöt16_t
 
iÁ˚
 = (
nf
->
ígöe_id
 & 0x7f) << 9;

88 
nf_ªc
->
öput
 = 
	`ht⁄s
(
iÁ˚
 | (
expúed
->
Êow
.
ö_p‹t
 & 0x1ff));

89 
nf_ªc
->
ouçut
 = 
	`ht⁄s
(
iÁ˚
 | (
nf_Êow
->
ouçut_iÁ˚
 & 0x1ff));

91 
nf_ªc
->
öput
 = 
	`ht⁄s
(
expúed
->
Êow
.
ö_p‹t
);

92 
nf_ªc
->
ouçut
 = 
	`ht⁄s
(
nf_Êow
->
ouçut_iÁ˚
);

94 
nf_ªc
->
∑ckë_cou¡
 = 
	`ht⁄l
(packet_count);

95 
nf_ªc
->
byã_cou¡
 = 
	`ht⁄l
(byte_count);

96 
nf_ªc
->
öô_time
 = 
	`ht⁄l
(
nf_Êow
->
¸óãd
 - 
nf
->
boŸ_time
);

97 
nf_ªc
->
u£d_time
 = 
	`ht⁄l
(
	`MAX
(
nf_Êow
->
¸óãd
, 
expúed
->
u£d
)

98 - 
nf
->
boŸ_time
);

99 i‡(
expúed
->
Êow
.
nw_¥Ÿo
 =
IPPROTO_ICMP
) {

102 
uöt8_t
 
ty≥
 = 
	`¡ohs
(
expúed
->
Êow
.
ç_§c
);

103 
uöt8_t
 
code
 = 
	`¡ohs
(
expúed
->
Êow
.
ç_d°
);

104 
nf_ªc
->
§c_p‹t
 = 
	`ht⁄s
(0);

105 
nf_ªc
->
d°_p‹t
 = 
	`ht⁄s
((
ty≥
 << 8Ë| 
code
);

107 
nf_ªc
->
§c_p‹t
 = 
expúed
->
Êow
.
ç_§c
;

108 
nf_ªc
->
d°_p‹t
 = 
expúed
->
Êow
.
ç_d°
;

110 
nf_ªc
->
t˝_Êags
 = 
nf_Êow
->tcp_flags;

111 
nf_ªc
->
ù_¥Ÿo
 = 
expúed
->
Êow
.
nw_¥Ÿo
;

112 
nf_ªc
->
ù_tos
 = 
expúed
->
Êow
.
nw_tos
 & 
IP_DSCP_MASK
;

115 i‡(
	`¡ohs
(
nf_hdr
->
cou¡
) >= 30) {

116 
	`√tÊow_run
(
nf
);

118 
	}
}

121 
	$√tÊow_expúe
(
√tÊow
 *
nf
, 
√tÊow_Êow
 *
nf_Êow
,

122 
o„xpúed
 *
expúed
)

124 
uöt64_t
 
pkt_dñè
 = 
expúed
->
∑ckë_cou¡
 - 
nf_Êow
->
∑ckë_cou¡_off
;

125 
uöt64_t
 
byã_dñè
 = 
expúed
->
byã_cou¡
 - 
nf_Êow
->
byã_cou¡_off
;

127 
nf_Êow
->
œ°_expúed
 +
nf
->
a˘ive_timeout
;

131 i‡(
expúed
->
Êow
.
dl_ty≥
 !
	`ht⁄s
(
ETH_TYPE_IP
Ë|| 
pkt_dñè
 == 0) {

135 i‡((
byã_dñè
 >> 32) <= 175) {

141 
byã_dñè
) {

142 
n_ªcs
 = (
byã_dñè
 + 
UINT32_MAX
 - 1) / UINT32_MAX;

143 
uöt32_t
 
pkt_cou¡
 = 
pkt_dñè
 / 
n_ªcs
;

144 
uöt32_t
 
byã_cou¡
 = 
byã_dñè
 / 
n_ªcs
;

146 
	`gí_√tÊow_ªc
(
nf
, 
nf_Êow
, 
expúed
, 
pkt_cou¡
, 
byã_cou¡
);

148 
pkt_dñè
 -
pkt_cou¡
;

149 
byã_dñè
 -
byã_cou¡
;

161 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 1);

163 
	`VLOG_WARN_RL
(&
æ
, "impossibÀ byã cou¡î %"
PRIu64
, 
byã_dñè
);

167 
nf_Êow
->
¸óãd
 = 0;

168 
nf_Êow
->
∑ckë_cou¡_off
 = 
expúed
->
∑ckë_cou¡
;

169 
nf_Êow
->
byã_cou¡_off
 = 
expúed
->
byã_cou¡
;

170 
nf_Êow
->
t˝_Êags
 = 0;

171 
	}
}

175 
boﬁ


176 
	$√tÊow_run
(
√tÊow
 *
nf
)

178 i‡(
nf
->
∑ckë
.
size
) {

179 
	`cﬁÀ˘‹s_£nd
(
nf
->
cﬁÀ˘‹s
,Çf->
∑ckë
.
d©a
,Çf->∑ckë.
size
);

180 
nf
->
∑ckë
.
size
 = 0;

183 i‡(
nf
->
a˘ive_timeout
 && 
	`time_m£c
(Ë>nf->
√xt_timeout
) {

184 
nf
->
√xt_timeout
 = 
	`time_m£c
() + 1000;

185  
åue
;

187  
Ál£
;

189 
	}
}

192 
	$√tÊow_waô
(
√tÊow
 *
nf
)

194 i‡(
nf
->
a˘ive_timeout
) {

195 
	`pﬁl_timî_waô_u¡û
(
nf
->
√xt_timeout
);

197 i‡(
nf
->
∑ckë
.
size
) {

198 
	`pﬁl_immedüã_wake
();

200 
	}
}

203 
	$√tÊow_£t_›ti⁄s
(
√tÊow
 *
nf
,

204 c⁄° 
√tÊow_›ti⁄s
 *
nf_›ti⁄s
)

206 
îr‹
 = 0;

207 
ﬁd_timeout
;

209 
nf
->
ígöe_ty≥
 = 
nf_›ti⁄s
->engine_type;

210 
nf
->
ígöe_id
 = 
nf_›ti⁄s
->engine_id;

211 
nf
->
add_id_to_iÁ˚
 = 
nf_›ti⁄s
->add_id_to_iface;

213 
	`cﬁÀ˘‹s_de°roy
(
nf
->
cﬁÀ˘‹s
);

214 
	`cﬁÀ˘‹s_¸óã
(&
nf_›ti⁄s
->
cﬁÀ˘‹s
, 0, &
nf
->collectors);

216 
ﬁd_timeout
 = 
nf
->
a˘ive_timeout
;

217 i‡(
nf_›ti⁄s
->
a˘ive_timeout
 >= 0) {

218 
nf
->
a˘ive_timeout
 = 
nf_›ti⁄s
->active_timeout;

220 
nf
->
a˘ive_timeout
 = 
NF_ACTIVE_TIMEOUT_DEFAULT
;

222 
nf
->
a˘ive_timeout
 *= 1000;

223 i‡(
ﬁd_timeout
 !
nf
->
a˘ive_timeout
) {

224 
nf
->
ªc⁄fig_time
 = 
	`time_m£c
();

225 
nf
->
√xt_timeout
 = 
	`time_m£c
();

228  
îr‹
;

229 
	}
}

231 
√tÊow
 *

232 
	$√tÊow_¸óã
()

234 
√tÊow
 *
nf
 = 
	`xzÆloc
( *nf);

235 
nf
->
ígöe_ty≥
 = 0;

236 
nf
->
ígöe_id
 = 0;

237 
nf
->
boŸ_time
 = 
	`time_m£c
();

238 
nf
->
cﬁÀ˘‹s
 = 
NULL
;

239 
nf
->
add_id_to_iÁ˚
 = 
Ál£
;

240 
nf
->
√tÊow_˙t
 = 0;

241 
	`oÂbuf_öô
(&
nf
->
∑ckë
, 1500);

242  
nf
;

243 
	}
}

246 
	$√tÊow_de°roy
(
√tÊow
 *
nf
)

248 i‡(
nf
) {

249 
	`oÂbuf_unöô
(&
nf
->
∑ckë
);

250 
	`cﬁÀ˘‹s_de°roy
(
nf
->
cﬁÀ˘‹s
);

251 
	`‰ì
(
nf
);

253 
	}
}

258 
	$√tÊow_Êow_öô
(
√tÊow_Êow
 *
nf_Êow
 
OVS_UNUSED
)

261 
	}
}

264 
	$√tÊow_Êow_˛ór
(
√tÊow_Êow
 *
nf_Êow
)

266 
uöt16_t
 
ouçut_iÁ˚
 = 
nf_Êow
->output_iface;

268 
	`mem£t
(
nf_Êow
, 0,  *nf_flow);

269 
nf_Êow
->
ouçut_iÁ˚
 = output_iface;

270 
	}
}

273 
	$√tÊow_Êow_upd©e_time
(
√tÊow
 *
nf
, 
√tÊow_Êow
 *
nf_Êow
,

274 
u£d
)

276 i‡(!
nf_Êow
->
¸óãd
) {

277 
nf_Êow
->
¸óãd
 = 
u£d
;

280 i‡(!
nf
 || !nf->
a˘ive_timeout
 || !
nf_Êow
->
œ°_expúed
 ||

281 
nf
->
ªc⁄fig_time
 > 
nf_Êow
->
œ°_expúed
) {

284 
nf_Êow
->
œ°_expúed
 = 
	`time_m£c
();

286 
	}
}

289 
	$√tÊow_Êow_upd©e_Êags
(
√tÊow_Êow
 *
nf_Êow
, 
uöt8_t
 
t˝_Êags
)

291 
nf_Êow
->
t˝_Êags
 |=Åcp_flags;

292 
	}
}

294 
boﬁ


295 
	$√tÊow_a˘ive_timeout_expúed
(
√tÊow
 *
nf
, 
√tÊow_Êow
 *
nf_Êow
)

297 i‡(
nf
->
a˘ive_timeout
) {

298  
	`time_m£c
(Ë> 
nf_Êow
->
œ°_expúed
 + 
nf
->
a˘ive_timeout
;

301  
Ál£
;

302 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/ofproto/netflow.h

17 #i‚de‡
OFPROTO_NETFLOW_H


18 
	#OFPROTO_NETFLOW_H
 1

	)

20 
	~<°döt.h
>

21 
	~"Êow.h
"

22 
	~"s£t.h
"

29 
	#NF_ACTIVE_TIMEOUT_DEFAULT
 600

	)

31 
	go„xpúed
;

33 
	s√tÊow_›ti⁄s
 {

34 
s£t
 
	mcﬁÀ˘‹s
;

35 
uöt8_t
 
	mígöe_ty≥
;

36 
uöt8_t
 
	mígöe_id
;

37 
	ma˘ive_timeout
;

38 
boﬁ
 
	madd_id_to_iÁ˚
;

41 
	e√tÊow_ouçut_p‹ts
 {

42 
	mNF_OUT_FLOOD
 = 
UINT16_MAX
,

43 
	mNF_OUT_MULTI
 = 
UINT16_MAX
 - 1,

44 
	mNF_OUT_DROP
 = 
UINT16_MAX
 - 2

47 
	s√tÊow_Êow
 {

48 
	mœ°_expúed
;

49 
	m¸óãd
;

51 
uöt64_t
 
	m∑ckë_cou¡_off
;

52 
uöt64_t
 
	mbyã_cou¡_off
;

54 
uöt16_t
 
	mouçut_iÁ˚
;

55 
uöt8_t
 
	mt˝_Êags
;

58 
√tÊow
 *
√tÊow_¸óã
();

59 
√tÊow_de°roy
(
√tÊow
 *);

60 
√tÊow_£t_›ti⁄s
(
√tÊow
 *, c⁄° 
√tÊow_›ti⁄s
 *);

61 
√tÊow_expúe
(
√tÊow
 *, 
√tÊow_Êow
 *,

62 
o„xpúed
 *);

64 
boﬁ
 
√tÊow_run
(
√tÊow
 *);

65 
√tÊow_waô
(
√tÊow
 *);

67 
√tÊow_Êow_öô
(
√tÊow_Êow
 *);

68 
√tÊow_Êow_˛ór
(
√tÊow_Êow
 *);

69 
√tÊow_Êow_upd©e_time
(
√tÊow
 *, 
√tÊow_Êow
 *,

70 
u£d
);

71 
√tÊow_Êow_upd©e_Êags
(
√tÊow_Êow
 *, 
uöt8_t
 
t˝_Êags
);

72 
boﬁ
 
√tÊow_a˘ive_timeout_expúed
(
√tÊow
 *, 
√tÊow_Êow
 *);

	@/home/lsch/mytest/openvswitch-1.9.0/ofproto/ofproto-dpif-governor.c

17 
	~<c⁄fig.h
>

19 
	~"oÂrŸo-dpif-govîn‹.h
"

21 
	~<as£π.h
>

22 
	~<°dlib.h
>

24 
	~"covîage.h
"

25 
	~"pﬁl-lo›.h
"

26 
	~"øndom.h
"

27 
	~"timevÆ.h
"

28 
	~"utû.h
"

29 
	~"vÆgröd.h
"

30 
	~"vlog.h
"

32 
VLOG_DEFINE_THIS_MODULE
(
oÂrŸo_dpif_govîn‹
);

37 
	#FLOW_SETUP_THRESHOLD
 5

	)

38 
BUILD_ASSERT_DECL
(
FLOW_SETUP_THRESHOLD
 > 1);

39 
BUILD_ASSERT_DECL
(
FLOW_SETUP_THRESHOLD
 < 16);

42 íum { 
	mMIN_SIZE
 = 16 * 1024 };

43 íum { 
	mMAX_SIZE
 = 256 * 1024 };

44 
BUILD_ASSERT_DECL
(
IS_POW2
(
MIN_SIZE
));

45 
BUILD_ASSERT_DECL
(
IS_POW2
(
MAX_SIZE
));

52 íum { 
	mMIN_ELAPSED
 = 1000 };

53 íum { 
	mMAX_ELAPSED
 = 5000 };

55 
govîn‹_√w_gíî©i⁄
(
govîn‹
 *, 
size
);

59 
govîn‹
 *

60 
	$govîn‹_¸óã
(c⁄° *
«me
)

62 
govîn‹
 *
g
 = 
	`xzÆloc
( *g);

63 
g
->
«me
 = 
	`x°rdup
(name);

64 
	`govîn‹_√w_gíî©i⁄
(
g
, 
MIN_SIZE
);

65  
g
;

66 
	}
}

70 
	$govîn‹_de°roy
(
govîn‹
 *
g
)

72 i‡(
g
) {

73 
	`VLOG_INFO
("%s: di£ngagög", 
g
->
«me
);

74 
	`‰ì
(
g
->
«me
);

75 
	`‰ì
(
g
->
èbÀ
);

76 
	`‰ì
(
g
);

78 
	}
}

82 
	$govîn‹_run
(
govîn‹
 *
g
)

84 i‡(
	`time_m£c
(Ë- 
g
->
°¨t
 > 
MAX_ELAPSED
) {

85 i‡(
g
->
size
 > 
MIN_SIZE
) {

86 
	`govîn‹_√w_gíî©i⁄
(
g
, g->
size
 / 2);

91 
	}
}

95 
	$govîn‹_waô
(
govîn‹
 *
g
)

97 i‡(
g
->
size
 > 
MIN_SIZE
) {

98 
	`pﬁl_timî_waô_u¡û
(
g
->
°¨t
 + 
MAX_ELAPSED
);

100 
	}
}

104 
boﬁ


105 
	$govîn‹_is_idÀ
(
govîn‹
 *
g
)

107  
g
->
size
 =
MIN_SIZE
 && 
	`time_m£c
(Ë- g->
°¨t
 > 
MAX_ELAPSED
;

108 
	}
}

117 
boﬁ


118 
	$govîn‹_should_ö°Æl_Êow
(
govîn‹
 *
g
, 
uöt32_t
 
hash
, 
n
)

120 
ﬁd_cou¡
, 
√w_cou¡
;

121 
boﬁ
 
ö°Æl_Êow
;

122 
uöt8_t
 *
e
;

124 
	`as£π
(
n
 > 0);

127 
g
->
n_∑ckës
 +
n
;

128 i‡(
g
->
n_∑ckës
 >g->
size
 / 4) {

129 
√w_size
;

130 
ñ≠£d
;

132 
ñ≠£d
 = 
	`time_m£c
(Ë- 
g
->
°¨t
;

133 
√w_size
 = (
ñ≠£d
 < 
MIN_ELAPSED
 && 
g
->
size
 < 
MAX_SIZE
 ? g->size * 2

134 : 
ñ≠£d
 > 
MAX_ELAPSED
 && 
g
->
size
 > 
MIN_SIZE
 ? g->size / 2

135 : 
g
->
size
);

136 
	`govîn‹_√w_gíî©i⁄
(
g
, 
√w_size
);

146 i‡(
g
->
n_£tups
 >g->
n_Êows
 - g->n_flows / 16

147 && 
g
->
n_Êows
 >= 64

148 && 
hash
 & 0x3f) {

149 
g
->
n_sh‹tcuts
++;

150  
åue
;

157 
e
 = &
g
->
èbÀ
[(
hash
 >> 1Ë& (g->
size
 - 1)];

158 
ﬁd_cou¡
 = (
hash
 & 1 ? *
e
 >> 4 : *e & 0x0f);

159 i‡(!
ﬁd_cou¡
) {

160 
g
->
n_Êows
++;

162 
√w_cou¡
 = 
n
 + 
ﬁd_cou¡
;

163 i‡(
√w_cou¡
 >
FLOW_SETUP_THRESHOLD
) {

164 
g
->
n_£tups
++;

165 
ö°Æl_Êow
 = 
åue
;

166 
√w_cou¡
 = 0;

168 
ö°Æl_Êow
 = 
Ál£
;

170 *
e
 = 
hash
 & 1 ? (
√w_cou¡
 << 4) | (*e & 0x0f) : (*e & 0xf0) |Çew_count;

172  
ö°Æl_Êow
;

173 
	}
}

178 
	$govîn‹_√w_gíî©i⁄
(
govîn‹
 *
g
, 
size
)

180 
	`as£π
(
size
 >
MIN_SIZE
 && sizê<
MAX_SIZE
);

181 
	`as£π
(
	`is_pow2
(
size
));

184 i‡(
g
->
size
 != size) {

185 i‡(!
g
->
size
) {

186 
	`VLOG_INFO
("%s:Éngaging governor with %u kB hashÅable",

187 
g
->
«me
, 
size
 / 1024);

189 
	`VLOG_INFO
("%s:Örocessed %uÖackets in %.2f s, "

192 
g
->
«me
, g->
n_∑ckës
,

193 (
	`time_m£c
(Ë- 
g
->
°¨t
) / 1000.0,

194 
size
 > 
g
->size ? "enlarging" : "shrinking",

195 
size
 / 1024,

196 
g
->
n_Êows
, g->
n_£tups
, g->
n_sh‹tcuts
);

199 
	`‰ì
(
g
->
èbÀ
);

200 
g
->
èbÀ
 = 
	`xmÆloc
(
size
 *  *g->table);

201 
g
->
size
 = size;

203 
	`VLOG_DBG
("%s:Örocessed %uÖackets in %.2f s with %u kB hashÅable "

205 
g
->
«me
, g->
n_∑ckës
, (
	`time_m£c
(Ë- g->
°¨t
) / 1000.0,

206 
size
 / 1024, 
g
->
n_Êows
, g->
n_£tups
, g->
n_sh‹tcuts
);

210 
	`mem£t
(
g
->
èbÀ
, 0, 
size
 *  *g->table);

211 
g
->
°¨t
 = 
	`time_m£c
();

212 
g
->
n_∑ckës
 = 0;

213 
g
->
n_Êows
 /= 2;

214 
g
->
n_£tups
 /= 2;

215 
g
->
n_sh‹tcuts
 = 0;

216 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/ofproto/ofproto-dpif-governor.h

17 #i‚de‡
OFPROTO_DPIF_GOVERNOR_H


18 
	#OFPROTO_DPIF_GOVERNOR_H
 1

	)

32 
	~<°dboﬁ.h
>

33 
	~<°döt.h
>

35 
	sgovîn‹
 {

36 *
	m«me
;

37 
uöt8_t
 *
	mèbÀ
;

38 
	msize
;

39 
	m°¨t
;

40 
	mn_∑ckës
;

43 
	mn_Êows
;

44 
	mn_£tups
;

45 
	mn_sh‹tcuts
;

48 
govîn‹
 *
govîn‹_¸óã
(c⁄° *
«me
);

49 
govîn‹_de°roy
(
govîn‹
 *);

51 
govîn‹_run
(
govîn‹
 *);

52 
govîn‹_waô
(
govîn‹
 *);

54 
boﬁ
 
govîn‹_is_idÀ
(
govîn‹
 *);

56 
boﬁ
 
govîn‹_should_ö°Æl_Êow
(
govîn‹
 *, 
uöt32_t
 
hash
, 
n
);

	@/home/lsch/mytest/openvswitch-1.9.0/ofproto/ofproto-dpif-sflow.c

18 
	~<c⁄fig.h
>

19 
	~"oÂrŸo-dpif-sÊow.h
"

20 
	~<öây≥s.h
>

21 
	~<sys/sockë.h
>

22 
	~<√t/if.h
>

23 
	~<°dlib.h
>

24 
	~"cﬁÀ˘‹s.h
"

25 
	~"compûî.h
"

26 
	~"dpif.h
"

27 
	~"hash.h
"

28 
	~"hm≠.h
"

29 
	~"√tdev.h
"

30 
	~"√éök.h
"

31 
	~"oÂbuf.h
"

32 
	~"oÂrŸo.h
"

33 
	~"∑ckës.h
"

34 
	~"pﬁl-lo›.h
"

35 
	~"rouã-èbÀ.h
"

36 
	~"sÊow_≠i.h
"

37 
	~"sockë-utû.h
"

38 
	~"timevÆ.h
"

39 
	~"vlog.h
"

40 
	~"lib/odp-utû.h
"

41 
	~"oÂrŸo-¥ovidî.h
"

43 
VLOG_DEFINE_THIS_MODULE
(
sÊow
);

45 
	sdpif_sÊow_p‹t
 {

46 
hm≠_node
 
	mhm≠_node
;

47 
SFLD©aSour˚_ö°™˚
 
	mdsi
;

48 
oÂ‹t
 *
	moÂ‹t
;

51 
	sdpif_sÊow
 {

52 
cﬁÀ˘‹s
 *
	mcﬁÀ˘‹s
;

53 
SFLAgít
 *
	msÊow_agít
;

54 
oÂrŸo_sÊow_›ti⁄s
 *
	m›ti⁄s
;

55 
dpif
 *
	mdpif
;

56 
time_t
 
	m√xt_tick
;

57 
size_t
 
	mn_Êood
, 
	mn_Æl
;

58 
hm≠
 
	mp‹ts
;

59 
uöt32_t
 
	m¥obabûôy
;

62 
dpif_sÊow_dñ_p‹t__
(
dpif_sÊow
 *,

63 
dpif_sÊow_p‹t
 *);

65 
	#RECEIVER_INDEX
 1

	)

67 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(1, 5);

69 
boﬁ


70 
	$nuŒabÀ_°rög_is_equÆ
(c⁄° *
a
, c⁄° *
b
)

72  
a
 ? 
b
 && !
	`°rcmp
(a, b) : !b;

73 
	}
}

75 
boﬁ


76 
	$oÂrŸo_sÊow_›ti⁄s_equÆ
(c⁄° 
oÂrŸo_sÊow_›ti⁄s
 *
a
,

77 c⁄° 
oÂrŸo_sÊow_›ti⁄s
 *
b
)

79  (
	`s£t_equÆs
(&
a
->
èrgës
, &
b
->targets)

80 && 
a
->
ßm∂ög_øã
 =
b
->sampling_rate

81 && 
a
->
pﬁlög_öãrvÆ
 =
b
->polling_interval

82 && 
a
->
hódî_Àn
 =
b
->header_len

83 && 
a
->
sub_id
 =
b
->sub_id

84 && 
	`nuŒabÀ_°rög_is_equÆ
(
a
->
agít_devi˚
, 
b
->agent_device)

85 && 
	`nuŒabÀ_°rög_is_equÆ
(
a
->
c⁄åﬁ_ù
, 
b
->control_ip));

86 
	}
}

88 
oÂrŸo_sÊow_›ti⁄s
 *

89 
	$oÂrŸo_sÊow_›ti⁄s_˛⁄e
(c⁄° 
oÂrŸo_sÊow_›ti⁄s
 *
ﬁd
)

91 
oÂrŸo_sÊow_›ti⁄s
 *
√w
 = 
	`xmemdup
(
ﬁd
,  *old);

92 
	`s£t_˛⁄e
(&
√w
->
èrgës
, &
ﬁd
->targets);

93 
√w
->
agít_devi˚
 = 
ﬁd
->agít_devi˚ ? 
	`x°rdup
(ﬁd->agít_devi˚Ë: 
NULL
;

94 
√w
->
c⁄åﬁ_ù
 = 
ﬁd
->c⁄åﬁ_ù ? 
	`x°rdup
(ﬁd->c⁄åﬁ_ùË: 
NULL
;

95  
√w
;

96 
	}
}

99 
	$oÂrŸo_sÊow_›ti⁄s_de°roy
(
oÂrŸo_sÊow_›ti⁄s
 *
›ti⁄s
)

101 i‡(
›ti⁄s
) {

102 
	`s£t_de°roy
(&
›ti⁄s
->
èrgës
);

103 
	`‰ì
(
›ti⁄s
->
agít_devi˚
);

104 
	`‰ì
(
›ti⁄s
->
c⁄åﬁ_ù
);

105 
	`‰ì
(
›ti⁄s
);

107 
	}
}

111 
	$sÊow_agít_Æloc_cb
(*
magic
 
OVS_UNUSED
, 
SFLAgít
 *
agít
 OVS_UNUSED,

112 
size_t
 
byãs
)

114  
	`ˇŒoc
(1, 
byãs
);

115 
	}
}

119 
	$sÊow_agít_‰ì_cb
(*
magic
 
OVS_UNUSED
, 
SFLAgít
 *
agít
 OVS_UNUSED,

120 *
obj
)

122 
	`‰ì
(
obj
);

124 
	}
}

128 
	$sÊow_agít_îr‹_cb
(*
magic
 
OVS_UNUSED
, 
SFLAgít
 *
agít
 OVS_UNUSED,

129 *
msg
)

131 
	`VLOG_WARN
("sFlowágíàîr‹: %s", 
msg
);

132 
	}
}

136 
	$sÊow_agít_£nd_∑ckë_cb
(*
ds_
, 
SFLAgít
 *
agít
 
OVS_UNUSED
,

137 
SFLRe˚ivî
 *
ª˚ivî
 
OVS_UNUSED
, 
u_ch¨
 *
pkt
,

138 
uöt32_t
 
pktLí
)

140 
dpif_sÊow
 *
ds
 = 
ds_
;

141 
	`cﬁÀ˘‹s_£nd
(
ds
->
cﬁÀ˘‹s
, 
pkt
, 
pktLí
);

142 
	}
}

144 
dpif_sÊow_p‹t
 *

145 
	$dpif_sÊow_föd_p‹t
(c⁄° 
dpif_sÊow
 *
ds
, 
uöt16_t
 
odp_p‹t
)

147 
dpif_sÊow_p‹t
 *
d•
;

149 
	`HMAP_FOR_EACH_IN_BUCKET
 (
d•
, 
hm≠_node
,

150 
	`hash_öt
(
odp_p‹t
, 0), &
ds
->
p‹ts
) {

151 i‡(
	`oÂ_p‹t_to_odp_p‹t
(
d•
->
oÂ‹t
->
oÂ_p‹t
Ë=
odp_p‹t
) {

152  
d•
;

155  
NULL
;

156 
	}
}

159 
	$sÊow_agít_gë_cou¡îs
(*
ds_
, 
SFLPﬁÀr
 *
pﬁÀr
,

160 
SFL_COUNTERS_SAMPLE_TYPE
 *
cs
)

162 
dpif_sÊow
 *
ds
 = 
ds_
;

163 
SFLCou¡îs_ßm∂e_ñemít
 
ñem
;

164 
√tdev_„©uªs
 
cuºít
;

165 
dpif_sÊow_p‹t
 *
d•
;

166 
SFLIf_cou¡îs
 *
cou¡îs
;

167 
√tdev_°©s
 
°©s
;

168 
√tdev_Êags
 
Êags
;

170 
d•
 = 
	`dpif_sÊow_föd_p‹t
(
ds
, 
pﬁÀr
->
bridgeP‹t
);

171 i‡(!
d•
) {

175 
ñem
.
èg
 = 
SFLCOUNTERS_GENERIC
;

176 
cou¡îs
 = &
ñem
.
cou¡îBlock
.
gíîic
;

177 
cou¡îs
->
ifIndex
 = 
	`SFL_DS_INDEX
(
pﬁÀr
->
dsi
);

178 
cou¡îs
->
ifTy≥
 = 6;

179 i‡(!
	`√tdev_gë_„©uªs
(
d•
->
oÂ‹t
->
√tdev
, &
cuºít
, 
NULL
, NULL, NULL)) {

182 
cou¡îs
->
ifS≥ed
 = 
	`√tdev_„©uªs_to_bps
(
cuºít
);

183 
cou¡îs
->
ifDúe˘i⁄
 = (
	`√tdev_„©uªs_is_fuŒ_du∂ex
(
cuºít
)

186 
cou¡îs
->
ifS≥ed
 = 100000000;

187 
cou¡îs
->
ifDúe˘i⁄
 = 0;

189 i‡(!
	`√tdev_gë_Êags
(
d•
->
oÂ‹t
->
√tdev
, &
Êags
Ë&& fœg†& 
NETDEV_UP
) {

190 
cou¡îs
->
ifSètus
 = 1;

191 i‡(
	`√tdev_gë_ˇºõr
(
d•
->
oÂ‹t
->
√tdev
)) {

192 
cou¡îs
->
ifSètus
 |= 2;

195 
cou¡îs
->
ifSètus
 = 0;

203 
	`oÂrŸo_p‹t_gë_°©s
(
d•
->
oÂ‹t
, &
°©s
);

204 
cou¡îs
->
ifInO˘ës
 = 
°©s
.
rx_byãs
;

205 
cou¡îs
->
ifInUˇ°Pkts
 = 
°©s
.
rx_∑ckës
;

206 
cou¡îs
->
ifInMu…iˇ°Pkts
 = 
°©s
.
mu…iˇ°
;

207 
cou¡îs
->
ifInBrﬂdˇ°Pkts
 = -1;

208 
cou¡îs
->
ifInDisˇrds
 = 
°©s
.
rx_dr›≥d
;

209 
cou¡îs
->
ifInEº‹s
 = 
°©s
.
rx_îr‹s
;

210 
cou¡îs
->
ifInUnknownPrŸos
 = -1;

211 
cou¡îs
->
ifOutO˘ës
 = 
°©s
.
tx_byãs
;

212 
cou¡îs
->
ifOutUˇ°Pkts
 = 
°©s
.
tx_∑ckës
;

213 
cou¡îs
->
ifOutMu…iˇ°Pkts
 = -1;

214 
cou¡îs
->
ifOutBrﬂdˇ°Pkts
 = -1;

215 
cou¡îs
->
ifOutDisˇrds
 = 
°©s
.
tx_dr›≥d
;

216 
cou¡îs
->
ifOutEº‹s
 = 
°©s
.
tx_îr‹s
;

217 
cou¡îs
->
ifPromiscuousMode
 = 0;

219 
	`SFLADD_ELEMENT
(
cs
, &
ñem
);

220 
	`sÊ_pﬁÀr_wrôeCou¡îsSam∂e
(
pﬁÀr
, 
cs
);

221 
	}
}

232 
boﬁ


233 
	$sÊow_choo£_agít_addªss
(c⁄° *
agít_devi˚
,

234 c⁄° 
s£t
 *
èrgës
,

235 c⁄° *
c⁄åﬁ_ù
,

236 
SFLAddªss
 *
agít_addr
)

238 c⁄° *
èrgë
;

239 
ö_addr
 
ö4
;

241 
	`mem£t
(
agít_addr
, 0,  *agent_addr);

242 
agít_addr
->
ty≥
 = 
SFLADDRESSTYPE_IP_V4
;

244 i‡(
agít_devi˚
) {

245 i‡(!
	`√tdev_gë_ö4_by_«me
(
agít_devi˚
, &
ö4
)) {

246 
suc˚ss
;

250 
	`SSET_FOR_EACH
 (
èrgë
, 
èrgës
) {

251 
sockaddr_ö
 
sö
;

252 
«me
[
IFNAMSIZ
];

254 i‡(
	`öë_∑r£_a˘ive
(
èrgë
, 
SFL_DEFAULT_COLLECTOR_PORT
, &
sö
)

255 && 
	`rouã_èbÀ_gë_«me
(
sö
.
sö_addr
.
s_addr
, 
«me
)

256 && !
	`√tdev_gë_ö4_by_«me
(
«me
, &
ö4
)) {

257 
suc˚ss
;

261 i‡(
c⁄åﬁ_ù
 && !
	`lookup_ù
(c⁄åﬁ_ù, &
ö4
)) {

262 
suc˚ss
;

265 
	`VLOG_ERR
("couldÇot determine IPáddress for sFlowágent");

266  
Ál£
;

268 
suc˚ss
:

269 
agít_addr
->
addªss
.
ù_v4
.
addr
 = (
OVS_FORCE
 
uöt32_t
Ë
ö4
.
s_addr
;

270  
åue
;

271 
	}
}

274 
	$dpif_sÊow_˛ór
(
dpif_sÊow
 *
ds
)

276 i‡(
ds
->
sÊow_agít
) {

277 
	`sÊ_agít_ªÀa£
(
ds
->
sÊow_agít
);

278 
ds
->
sÊow_agít
 = 
NULL
;

280 
	`cﬁÀ˘‹s_de°roy
(
ds
->
cﬁÀ˘‹s
);

281 
ds
->
cﬁÀ˘‹s
 = 
NULL
;

282 
	`oÂrŸo_sÊow_›ti⁄s_de°roy
(
ds
->
›ti⁄s
);

283 
ds
->
›ti⁄s
 = 
NULL
;

286 
ds
->
¥obabûôy
 = 0;

287 
	}
}

289 
boﬁ


290 
	$dpif_sÊow_is_íabÀd
(c⁄° 
dpif_sÊow
 *
ds
)

292  
ds
->
cﬁÀ˘‹s
 !
NULL
;

293 
	}
}

295 
dpif_sÊow
 *

296 
	$dpif_sÊow_¸óã
(
dpif
 *dpif)

298 
dpif_sÊow
 *
ds
;

300 
ds
 = 
	`xˇŒoc
(1,  *ds);

301 
ds
->
dpif
 = dpif;

302 
ds
->
√xt_tick
 = 
	`time_now
() + 1;

303 
	`hm≠_öô
(&
ds
->
p‹ts
);

304 
ds
->
¥obabûôy
 = 0;

305 
	`rouã_èbÀ_ªgi°î
();

307  
ds
;

308 
	}
}

313 
uöt32_t


314 
	$dpif_sÊow_gë_¥obabûôy
(c⁄° 
dpif_sÊow
 *
ds
)

316  
ds
->
¥obabûôy
;

317 
	}
}

320 
	$dpif_sÊow_de°roy
(
dpif_sÊow
 *
ds
)

322 i‡(
ds
) {

323 
dpif_sÊow_p‹t
 *
d•
, *
√xt
;

325 
	`rouã_èbÀ_uƒegi°î
();

326 
	`dpif_sÊow_˛ór
(
ds
);

327 
	`HMAP_FOR_EACH_SAFE
 (
d•
, 
√xt
, 
hm≠_node
, &
ds
->
p‹ts
) {

328 
	`dpif_sÊow_dñ_p‹t__
(
ds
, 
d•
);

330 
	`hm≠_de°roy
(&
ds
->
p‹ts
);

331 
	`‰ì
(
ds
);

333 
	}
}

336 
	$dpif_sÊow_add_pﬁÀr
(
dpif_sÊow
 *
ds
, 
dpif_sÊow_p‹t
 *
d•
)

338 
SFLPﬁÀr
 *
pﬁÀr
 = 
	`sÊ_agít_addPﬁÀr
(
ds
->
sÊow_agít
, &
d•
->
dsi
, ds,

339 
sÊow_agít_gë_cou¡îs
);

340 
	`sÊ_pﬁÀr_£t_sFlowCpI¡îvÆ
(
pﬁÀr
, 
ds
->
›ti⁄s
->
pﬁlög_öãrvÆ
);

341 
	`sÊ_pﬁÀr_£t_sFlowCpRe˚ivî
(
pﬁÀr
, 
RECEIVER_INDEX
);

342 
	`sÊ_pﬁÀr_£t_bridgeP‹t
(
pﬁÀr
,

343 
	`oÂ_p‹t_to_odp_p‹t
(
d•
->
oÂ‹t
->
oÂ_p‹t
));

344 
	}
}

347 
	$dpif_sÊow_add_ßm∂î
(
dpif_sÊow
 *
ds
, 
dpif_sÊow_p‹t
 *
d•
)

349 
SFLSam∂î
 *
ßm∂î
 = 
	`sÊ_agít_addSam∂î
(
ds
->
sÊow_agít
, &
d•
->
dsi
);

350 
	`sÊ_ßm∂î_£t_sFlowFsPackëSam∂ögR©e
(
ßm∂î
, 
ds
->
›ti⁄s
->
ßm∂ög_øã
);

351 
	`sÊ_ßm∂î_£t_sFlowFsMaximumHódîSize
(
ßm∂î
, 
ds
->
›ti⁄s
->
hódî_Àn
);

352 
	`sÊ_ßm∂î_£t_sFlowFsRe˚ivî
(
ßm∂î
, 
RECEIVER_INDEX
);

353 
	}
}

356 
	$dpif_sÊow_add_p‹t
(
dpif_sÊow
 *
ds
, 
oÂ‹t
 *ofport)

358 
dpif_sÊow_p‹t
 *
d•
;

359 
uöt16_t
 
odp_p‹t
 = 
	`oÂ_p‹t_to_odp_p‹t
(
oÂ‹t
->
oÂ_p‹t
);

360 
uöt32_t
 
ifödex
;

362 
	`dpif_sÊow_dñ_p‹t
(
ds
, 
odp_p‹t
);

365 
d•
 = 
	`xmÆloc
( *dsp);

366 
ifödex
 = 
	`√tdev_gë_ifödex
(
oÂ‹t
->
√tdev
);

367 i‡(
ifödex
 <= 0) {

368 
ifödex
 = (
ds
->
sÊow_agít
->
subId
 << 16Ë+ 
odp_p‹t
;

370 
d•
->
oÂ‹t
 = ofport;

371 
	`SFL_DS_SET
(
d•
->
dsi
, 0, 
ifödex
, 0);

372 
	`hm≠_ö£π
(&
ds
->
p‹ts
, &
d•
->
hm≠_node
, 
	`hash_öt
(
odp_p‹t
, 0));

375 i‡(
ds
->
sÊow_agít
) {

376 
	`dpif_sÊow_add_pﬁÀr
(
ds
, 
d•
);

377 
	`dpif_sÊow_add_ßm∂î
(
ds
, 
d•
);

379 
	}
}

382 
	$dpif_sÊow_dñ_p‹t__
(
dpif_sÊow
 *
ds
, 
dpif_sÊow_p‹t
 *
d•
)

384 i‡(
ds
->
sÊow_agít
) {

385 
	`sÊ_agít_ªmovePﬁÀr
(
ds
->
sÊow_agít
, &
d•
->
dsi
);

386 
	`sÊ_agít_ªmoveSam∂î
(
ds
->
sÊow_agít
, &
d•
->
dsi
);

388 
	`hm≠_ªmove
(&
ds
->
p‹ts
, &
d•
->
hm≠_node
);

389 
	`‰ì
(
d•
);

390 
	}
}

393 
	$dpif_sÊow_dñ_p‹t
(
dpif_sÊow
 *
ds
, 
uöt16_t
 
odp_p‹t
)

395 
dpif_sÊow_p‹t
 *
d•
 = 
	`dpif_sÊow_föd_p‹t
(
ds
, 
odp_p‹t
);

396 i‡(
d•
) {

397 
	`dpif_sÊow_dñ_p‹t__
(
ds
, 
d•
);

399 
	}
}

402 
	$dpif_sÊow_£t_›ti⁄s
(
dpif_sÊow
 *
ds
,

403 c⁄° 
oÂrŸo_sÊow_›ti⁄s
 *
›ti⁄s
)

405 
dpif_sÊow_p‹t
 *
d•
;

406 
boﬁ
 
›ti⁄s_ch™ged
;

407 
SFLRe˚ivî
 *
ª˚ivî
;

408 
SFLAddªss
 
agítIP
;

409 
time_t
 
now
;

411 i‡(
	`s£t_is_em±y
(&
›ti⁄s
->
èrgës
Ë|| !›ti⁄s->
ßm∂ög_øã
) {

414 
	`dpif_sÊow_˛ór
(
ds
);

418 
›ti⁄s_ch™ged
 = (!
ds
->
›ti⁄s


419 || !
	`oÂrŸo_sÊow_›ti⁄s_equÆ
(
›ti⁄s
, 
ds
->options));

424 i‡(
›ti⁄s_ch™ged


425 || 
	`cﬁÀ˘‹s_cou¡
(
ds
->
cﬁÀ˘‹s
Ë< 
	`s£t_cou¡
(&
›ti⁄s
->
èrgës
)) {

426 
	`cﬁÀ˘‹s_de°roy
(
ds
->
cﬁÀ˘‹s
);

427 
	`cﬁÀ˘‹s_¸óã
(&
›ti⁄s
->
èrgës
, 
SFL_DEFAULT_COLLECTOR_PORT
,

428 &
ds
->
cﬁÀ˘‹s
);

429 i‡(
ds
->
cﬁÀ˘‹s
 =
NULL
) {

430 
	`VLOG_WARN_RL
(&
æ
, "no collectors could be initialized, "

432 
	`dpif_sÊow_˛ór
(
ds
);

438 i‡(!
	`sÊow_choo£_agít_addªss
(
›ti⁄s
->
agít_devi˚
,

439 &
›ti⁄s
->
èrgës
,

440 
›ti⁄s
->
c⁄åﬁ_ù
, &
agítIP
)) {

441 
	`dpif_sÊow_˛ór
(
ds
);

446 i‡(!
›ti⁄s_ch™ged
) {

449 
	`oÂrŸo_sÊow_›ti⁄s_de°roy
(
ds
->
›ti⁄s
);

450 
ds
->
›ti⁄s
 = 
	`oÂrŸo_sÊow_›ti⁄s_˛⁄e
(options);

453 
	`VLOG_INFO
("¸ótög sFlowágíà%d", 
›ti⁄s
->
sub_id
);

454 i‡(
ds
->
sÊow_agít
) {

455 
	`sÊ_agít_ªÀa£
(
ds
->
sÊow_agít
);

457 
ds
->
sÊow_agít
 = 
	`xˇŒoc
(1,  *ds->sflow_agent);

458 
now
 = 
	`time_wÆl
();

459 
	`sÊ_agít_öô
(
ds
->
sÊow_agít
,

460 &
agítIP
,

461 
›ti⁄s
->
sub_id
,

462 
now
,

463 
now
,

464 
ds
,

465 
sÊow_agít_Æloc_cb
,

466 
sÊow_agít_‰ì_cb
,

467 
sÊow_agít_îr‹_cb
,

468 
sÊow_agít_£nd_∑ckë_cb
);

470 
ª˚ivî
 = 
	`sÊ_agít_addRe˚ivî
(
ds
->
sÊow_agít
);

471 
	`sÊ_ª˚ivî_£t_sFlowRcvrOw√r
(
ª˚ivî
, "Open vSwitch sFlow");

472 
	`sÊ_ª˚ivî_£t_sFlowRcvrTimeout
(
ª˚ivî
, 0xffffffff);

475 
ds
->
¥obabûôy
 = 
	`MAX
(1, 
UINT32_MAX
 / ds->
›ti⁄s
->
ßm∂ög_øã
);

478 
	`HMAP_FOR_EACH
 (
d•
, 
hm≠_node
, &
ds
->
p‹ts
) {

479 
	`dpif_sÊow_add_pﬁÀr
(
ds
, 
d•
);

480 
	`dpif_sÊow_add_ßm∂î
(
ds
, 
d•
);

482 
	}
}

485 
	$dpif_sÊow_odp_p‹t_to_ifödex
(c⁄° 
dpif_sÊow
 *
ds
,

486 
uöt16_t
 
odp_p‹t
)

488 
dpif_sÊow_p‹t
 *
d•
 = 
	`dpif_sÊow_föd_p‹t
(
ds
, 
odp_p‹t
);

489  
d•
 ? 
	`SFL_DS_INDEX
(d•->
dsi
) : 0;

490 
	}
}

493 
	$dpif_sÊow_ª˚ived
(
dpif_sÊow
 *
ds
, 
oÂbuf
 *
∑ckë
,

494 c⁄° 
Êow
 *flow,

495 c⁄° 
u£r_a˘i⁄_cookõ
 *
cookõ
)

497 
SFL_FLOW_SAMPLE_TYPE
 
fs
;

498 
SFLFlow_ßm∂e_ñemít
 
hdrEÀm
;

499 
SFLSam∂ed_hódî
 *
hódî
;

500 
SFLFlow_ßm∂e_ñemít
 
swôchEÀm
;

501 
SFLSam∂î
 *
ßm∂î
;

502 
dpif_sÊow_p‹t
 *
ö_d•
;

503 
√tdev_°©s
 
°©s
;

504 
ovs_be16
 
vœn_tci
;

505 
îr‹
;

508 
	`mem£t
(&
fs
, 0,  fs);

510 
ö_d•
 = 
	`dpif_sÊow_föd_p‹t
(
ds
, 
	`oÂ_p‹t_to_odp_p‹t
(
Êow
->
ö_p‹t
));

511 i‡(!
ö_d•
) {

514 
fs
.
öput
 = 
	`SFL_DS_INDEX
(
ö_d•
->
dsi
);

516 
îr‹
 = 
	`oÂrŸo_p‹t_gë_°©s
(
ö_d•
->
oÂ‹t
, &
°©s
);

517 i‡(
îr‹
) {

518 
	`VLOG_WARN_RL
(&
æ
, "√tdev gë-°©†îr‹ %s", 
	`°ªº‹
(
îr‹
));

521 
fs
.
ßm∂e_poﬁ
 = 
°©s
.
rx_∑ckës
;

526 
ßm∂î
 = 
	`sÊ_agít_gëSam∂îByIfIndex
(
ds
->
sÊow_agít
, 
fs
.
öput
);

527 i‡(!
ßm∂î
) {

528 
	`VLOG_WARN_RL
(&
æ
, "nÿßm∂î f‹ i≈uàifIndex (%"
PRIu32
")",

529 
fs
.
öput
);

534 
	`mem£t
(&
hdrEÀm
, 0,  hdrElem);

535 
hdrEÀm
.
èg
 = 
SFLFLOW_HEADER
;

536 
hódî
 = &
hdrEÀm
.
ÊowTy≥
.header;

537 
hódî
->
hódî_¥Ÿocﬁ
 = 
SFLHEADER_ETHERNET_ISO8023
;

540 
hódî
->
‰ame_Àngth
 = 
∑ckë
->
size
 + 4;

542 
hódî
->
°rù≥d
 = 4;

543 
hódî
->
hódî_Àngth
 = 
	`MIN
(
∑ckë
->
size
,

544 
ßm∂î
->
sFlowFsMaximumHódîSize
);

545 
hódî
->
hódî_byãs
 = 
∑ckë
->
d©a
;

548 
	`mem£t
(&
swôchEÀm
, 0, (switchElem));

549 
swôchEÀm
.
èg
 = 
SFLFLOW_EX_SWITCH
;

550 
swôchEÀm
.
ÊowTy≥
.
sw
.
§c_vœn
 = 
	`vœn_tci_to_vid
(
Êow
->
vœn_tci
);

551 
swôchEÀm
.
ÊowTy≥
.
sw
.
§c_¥i‹ôy
 = 
	`vœn_tci_to_p˝
(
Êow
->
vœn_tci
);

554 
vœn_tci
 = 
cookõ
->
sÊow
.vlan_tci;

555 
swôchEÀm
.
ÊowTy≥
.
sw
.
d°_vœn
 = 
	`vœn_tci_to_vid
(
vœn_tci
);

556 
swôchEÀm
.
ÊowTy≥
.
sw
.
d°_¥i‹ôy
 = 
	`vœn_tci_to_p˝
(
vœn_tci
);

558 
fs
.
ouçut
 = 
cookõ
->
sÊow
.output;

561 
	`SFLADD_ELEMENT
(&
fs
, &
hdrEÀm
);

562 
	`SFLADD_ELEMENT
(&
fs
, &
swôchEÀm
);

563 
	`sÊ_ßm∂î_wrôeFlowSam∂e
(
ßm∂î
, &
fs
);

564 
	}
}

567 
	$dpif_sÊow_run
(
dpif_sÊow
 *
ds
)

569 i‡(
	`dpif_sÊow_is_íabÀd
(
ds
)) {

570 
time_t
 
now
 = 
	`time_now
();

571 
	`rouã_èbÀ_run
();

572 i‡(
now
 >
ds
->
√xt_tick
) {

573 
	`sÊ_agít_tick
(
ds
->
sÊow_agít
, 
	`time_wÆl
());

574 
ds
->
√xt_tick
 = 
now
 + 1;

577 
	}
}

580 
	$dpif_sÊow_waô
(
dpif_sÊow
 *
ds
)

582 i‡(
	`dpif_sÊow_is_íabÀd
(
ds
)) {

583 
	`pﬁl_timî_waô_u¡û
(
ds
->
√xt_tick
 * 1000LL);

585 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/ofproto/ofproto-dpif-sflow.h

18 #i‚de‡
OFPROTO_DPIF_SFLOW_H


19 
	#OFPROTO_DPIF_SFLOW_H
 1

	)

21 
	~<°döt.h
>

22 
	~"svec.h
"

23 
	~"lib/odp-utû.h
"

25 
	gdpif
;

26 
	gdpif_upˇŒ
;

27 
	gÊow
;

28 
	goÂrŸo_sÊow_›ti⁄s
;

29 
	goÂ‹t
;

31 
dpif_sÊow
 *
dpif_sÊow_¸óã
(
dpif
 *);

32 
uöt32_t
 
dpif_sÊow_gë_¥obabûôy
(c⁄° 
dpif_sÊow
 *);

34 
dpif_sÊow_de°roy
(
dpif_sÊow
 *);

35 
dpif_sÊow_£t_›ti⁄s
(
dpif_sÊow
 *,

36 c⁄° 
oÂrŸo_sÊow_›ti⁄s
 *);

37 
dpif_sÊow_˛ór
(
dpif_sÊow
 *);

38 
boﬁ
 
dpif_sÊow_is_íabÀd
(c⁄° 
dpif_sÊow
 *);

40 
dpif_sÊow_add_p‹t
(
dpif_sÊow
 *
ds
, 
oÂ‹t
 *ofport);

41 
dpif_sÊow_dñ_p‹t
(
dpif_sÊow
 *, 
uöt16_t
 
ovs_p‹t
);

43 
dpif_sÊow_run
(
dpif_sÊow
 *);

44 
dpif_sÊow_waô
(
dpif_sÊow
 *);

46 
dpif_sÊow_ª˚ived
(
dpif_sÊow
 *,

47 
oÂbuf
 *,

48 c⁄° 
Êow
 *,

49 c⁄° 
u£r_a˘i⁄_cookõ
 *);

51 
dpif_sÊow_odp_p‹t_to_ifödex
(c⁄° 
dpif_sÊow
 *, 
uöt16_t
);

	@/home/lsch/mytest/openvswitch-1.9.0/ofproto/ofproto-dpif.c

17 
	~<c⁄fig.h
>

19 
	~"oÂrŸo/oÂrŸo-¥ovidî.h
"

21 
	~<î∫o.h
>

23 
	~"aut›©h.h
"

24 
	~"b⁄d.h
"

25 
	~"bundÀ.h
"

26 
	~"byã-‹dî.h
"

27 
	~"c⁄nmgr.h
"

28 
	~"covîage.h
"

29 
	~"cfm.h
"

30 
	~"dpif.h
"

31 
	~"dy«mic-°rög.h
"

32 
	~"Áû-›í.h
"

33 
	~"hm≠x.h
"

34 
	~"œ˝.h
"

35 
	~"À¨n.h
"

36 
	~"mac-À¨nög.h
"

37 
	~"mëa-Êow.h
"

38 
	~"mu…ù©h.h
"

39 
	~"√tdev.h
"

40 
	~"√éök.h
"

41 
	~"nx-m©ch.h
"

42 
	~"odp-utû.h
"

43 
	~"oÂ-utû.h
"

44 
	~"oÂbuf.h
"

45 
	~"oÂ-a˘i⁄s.h
"

46 
	~"oÂ-∑r£.h
"

47 
	~"oÂ-¥öt.h
"

48 
	~"oÂrŸo-dpif-govîn‹.h
"

49 
	~"oÂrŸo-dpif-sÊow.h
"

50 
	~"pﬁl-lo›.h
"

51 
	~"sim≠.h
"

52 
	~"timî.h
"

53 
	~"u«lig√d.h
"

54 
	~"unix˘l.h
"

55 
	~"vœn-bôm≠.h
"

56 
	~"vlog.h
"

58 
VLOG_DEFINE_THIS_MODULE
(
oÂrŸo_dpif
);

60 
COVERAGE_DEFINE
(
oÂrŸo_dpif_expúed
);

61 
COVERAGE_DEFINE
(
oÂrŸo_dpif_xœã
);

62 
COVERAGE_DEFINE
(
Á˚t_ch™ged_ruÀ
);

63 
COVERAGE_DEFINE
(
Á˚t_ªvÆid©e
);

64 
COVERAGE_DEFINE
(
Á˚t_u√x≥˘ed
);

65 
COVERAGE_DEFINE
(
Á˚t_suµªss
);

69 
	#MAX_RESUBMIT_RECURSION
 64

	)

72 íum { 
	mN_TABLES
 = 255 };

73 íum { 
	mTBL_INTERNAL
 = 
N_TABLES
 - 1 };

74 
BUILD_ASSERT_DECL
(
N_TABLES
 >= 2 && N_TABLES <= 255);

76 
	goÂ‹t_dpif
;

77 
	goÂrŸo_dpif
;

79 
	sruÀ_dpif
 {

80 
ruÀ
 
	mup
;

95 
uöt64_t
 
	m∑ckë_cou¡
;

96 
uöt64_t
 
	mbyã_cou¡
;

98 
èg_ty≥
 
	mèg
;

100 
li°
 
	mÁ˚ts
;

103 
ruÀ_dpif
 *
	$ruÀ_dpif_ˇ°
(c⁄° 
ruÀ
 *rule)

105  
ruÀ
 ? 
	`CONTAINER_OF
‘uÀ, 
ruÀ_dpif
, 
up
Ë: 
NULL
;

106 
	}
}

108 
ruÀ_dpif
 *
ruÀ_dpif_lookup
(
oÂrŸo_dpif
 *,

109 c⁄° 
Êow
 *);

110 
ruÀ_dpif
 *
ruÀ_dpif_lookup__
(
oÂrŸo_dpif
 *,

111 c⁄° 
Êow
 *,

112 
uöt8_t
 
èbÀ
);

113 
ruÀ_dpif
 *
ruÀ_dpif_miss_ruÀ
(
oÂrŸo_dpif
 *
oÂrŸo
,

114 c⁄° 
Êow
 *flow);

116 
ruÀ_¸edô_°©s
(
ruÀ_dpif
 *,

117 c⁄° 
dpif_Êow_°©s
 *);

118 
Êow_push_°©s
(
ruÀ_dpif
 *, c⁄° 
Êow
 *,

119 c⁄° 
dpif_Êow_°©s
 *);

120 
èg_ty≥
 
ruÀ_ˇlcuœã_èg
(c⁄° 
Êow
 *,

121 c⁄° 
möimask
 *, 
uöt32_t
 
basis
);

122 
ruÀ_övÆid©e
(c⁄° 
ruÀ_dpif
 *);

124 
	#MAX_MIRRORS
 32

	)

125 
uöt32_t
 
	tmúr‹_mask_t
;

126 
	#MIRROR_MASK_C
(
X
Ë
	`UINT32_C
(X)

	)

127 
BUILD_ASSERT_DECL
((
múr‹_mask_t
Ë* 
CHAR_BIT
 >
MAX_MIRRORS
);

128 
	sofmúr‹
 {

129 
oÂrŸo_dpif
 *
	moÂrŸo
;

130 
size_t
 
	midx
;

131 *
	maux
;

132 *
	m«me
;

135 
hm≠x
 
	m§cs
;

136 
hm≠x
 
	md°s
;

137 *
	mvœns
;

140 
ofbundÀ
 *
	mout
;

141 
	mout_vœn
;

142 
múr‹_mask_t
 
	mdup_múr‹s
;

145 
öt64_t
 
	m∑ckë_cou¡
;

146 
öt64_t
 
	mbyã_cou¡
;

149 
múr‹_de°roy
(
ofmúr‹
 *);

150 
upd©e_múr‹_°©s
(
oÂrŸo_dpif
 *
oÂrŸo
,

151 
múr‹_mask_t
 
múr‹s
,

152 
uöt64_t
 
∑ckës
, uöt64_à
byãs
);

154 
	sofbundÀ
 {

155 
hm≠_node
 
	mhm≠_node
;

156 
oÂrŸo_dpif
 *
	moÂrŸo
;

157 *
	maux
;

158 *
	m«me
;

161 
li°
 
	mp‹ts
;

162 
p‹t_vœn_mode
 
	mvœn_mode
;

163 
	mvœn
;

164 *
	måunks
;

166 
œ˝
 *
	mœ˝
;

167 
b⁄d
 *
	mb⁄d
;

168 
boﬁ
 
	mu£_¥i‹ôy_ègs
;

171 
boﬁ
 
	mÊoodabÀ
;

174 
múr‹_mask_t
 
	m§c_múr‹s
;

175 
múr‹_mask_t
 
	md°_múr‹s
;

176 
múr‹_mask_t
 
	mmúr‹_out
;

179 
bundÀ_ªmove
(
oÂ‹t
 *);

180 
bundÀ_upd©e
(
ofbundÀ
 *);

181 
bundÀ_de°roy
(
ofbundÀ
 *);

182 
bundÀ_dñ_p‹t
(
oÂ‹t_dpif
 *);

183 
bundÀ_run
(
ofbundÀ
 *);

184 
bundÀ_waô
(
ofbundÀ
 *);

185 
ofbundÀ
 *
lookup_öput_bundÀ
(c⁄° 
oÂrŸo_dpif
 *,

186 
uöt16_t
 
ö_p‹t
, 
boﬁ
 
w¨n
,

187 
oÂ‹t_dpif
 **
ö_oÂ‹ç
);

194 
ofbundÀ
 
	goÂp_n⁄e_bundÀ
 = {

195 .
«me
 = "OFPP_NONE",

196 .
	gvœn_mode
 = 
PORT_VLAN_TRUNK


199 
°p_run
(
oÂrŸo_dpif
 *
oÂrŸo
);

200 
°p_waô
(
oÂrŸo_dpif
 *
oÂrŸo
);

201 
£t_°p_p‹t
(
oÂ‹t
 *,

202 c⁄° 
oÂrŸo_p‹t_°p_£âögs
 *);

204 
boﬁ
 
ofbundÀ_ö˛udes_vœn
(c⁄° 
ofbundÀ
 *, 
uöt16_t
 
vœn
);

206 
	sa˘i⁄_xœã_˘x
 {

210 
oÂrŸo_dpif
 *
	moÂrŸo
;

214 
Êow
 
	mÊow
;

218 c⁄° 
oÂbuf
 *
	m∑ckë
;

226 
boﬁ
 
	mmay_À¨n
;

229 
ruÀ_dpif
 *
	mruÀ
;

234 
uöt8_t
 
	mt˝_Êags
;

245 (*
	mªsubmô_hook
)(
	ma˘i⁄_xœã_˘x
 *, 
ruÀ_dpif
 *
	mruÀ
);

250 (*
	mªp‹t_hook
)(
	ma˘i⁄_xœã_˘x
 *, c⁄° *
	ms
);

257 c⁄° 
dpif_Êow_°©s
 *
	mªsubmô_°©s
;

262 
oÂbuf
 *
	modp_a˘i⁄s
;

263 
èg_ty≥
 
	mègs
;

264 
¶ow_∑th_ªas⁄
 
	m¶ow
;

265 
boﬁ
 
	mhas_À¨n
;

266 
boﬁ
 
	mhas_n‹mÆ
;

267 
boﬁ
 
	mhas_fö_timeout
;

268 
uöt16_t
 
	mnf_ouçut_iÁ˚
;

269 
múr‹_mask_t
 
	mmúr‹s
;

274 
	mªcur£
;

275 
boﬁ
 
	mmax_ªsubmô_åiggî
;

276 
Êow
 
	mba£_Êow
;

277 
uöt32_t
 
	m‹ig_skb_¥i‹ôy
;

278 
uöt8_t
 
	mèbÀ_id
;

279 
uöt32_t
 
	msÊow_n_ouçuts
;

280 
uöt16_t
 
	msÊow_odp_p‹t
;

281 
uöt16_t
 
	mu£r_cookõ_off£t
;

282 
boﬁ
 
	mexô
;

283 
Êow
 
	m‹ig_Êow
;

286 
a˘i⁄_xœã_˘x_öô
(
a˘i⁄_xœã_˘x
 *,

287 
oÂrŸo_dpif
 *, c⁄° 
Êow
 *,

288 
ovs_be16
 
öôül_tci
, 
ruÀ_dpif
 *,

289 
uöt8_t
 
t˝_Êags
, c⁄° 
oÂbuf
 *);

290 
xœã_a˘i⁄s
(
a˘i⁄_xœã_˘x
 *,

291 c⁄° 
oÂa˘
 *
oÂa˘s
, 
size_t
 
oÂa˘s_Àn
,

292 
oÂbuf
 *
odp_a˘i⁄s
);

293 
xœã_a˘i⁄s_f‹_side_ef„˘s
(
a˘i⁄_xœã_˘x
 *,

294 c⁄° 
oÂa˘
 *
oÂa˘s
,

295 
size_t
 
oÂa˘s_Àn
);

297 
size_t
 
put_u£r•a˚_a˘i⁄
(c⁄° 
oÂrŸo_dpif
 *,

298 
oÂbuf
 *
odp_a˘i⁄s
,

299 c⁄° 
Êow
 *,

300 c⁄° 
u£r_a˘i⁄_cookõ
 *);

302 
compo£_¶ow_∑th
(c⁄° 
oÂrŸo_dpif
 *, c⁄° 
Êow
 *,

303 
¶ow_∑th_ªas⁄
,

304 
uöt64_t
 *
°ub
, 
size_t
 
°ub_size
,

305 c⁄° 
∆©å
 **
a˘i⁄•
,

306 
size_t
 *
a˘i⁄s_À≈
);

308 
xœã_ªp‹t
(
a˘i⁄_xœã_˘x
 *
˘x
, c⁄° *
s
);

323 
	esubÁ˚t_∑th
 {

324 
	mSF_NOT_INSTALLED
,

325 
	mSF_FAST_PATH
,

326 
	mSF_SLOW_PATH
,

329 c⁄° *
subÁ˚t_∑th_to_°rög
(
subÁ˚t_∑th
);

334 
	ssubÁ˚t
 {

336 
hm≠_node
 
	mhm≠_node
;

337 
li°
 
	mli°_node
;

338 
Á˚t
 *
	mÁ˚t
;

345 
odp_key_fô√ss
 
	mkey_fô√ss
;

346 
∆©å
 *
	mkey
;

347 
	mkey_Àn
;

349 
	mu£d
;

351 
uöt64_t
 
	mdp_∑ckë_cou¡
;

352 
uöt64_t
 
	mdp_byã_cou¡
;

358 
size_t
 
	ma˘i⁄s_Àn
;

359 
∆©å
 *
	ma˘i⁄s
;

361 
¶ow_∑th_ªas⁄
 
	m¶ow
;

362 
subÁ˚t_∑th
 
	m∑th
;

367 
ovs_be16
 
	möôül_tci
;

370 
subÁ˚t
 *
subÁ˚t_¸óã
(
Á˚t
 *, 
odp_key_fô√ss
,

371 c⁄° 
∆©å
 *
key
,

372 
size_t
 
key_Àn
, 
ovs_be16
 
öôül_tci
,

373 
now
);

374 
subÁ˚t
 *
subÁ˚t_föd
(
oÂrŸo_dpif
 *,

375 c⁄° 
∆©å
 *
key
, 
size_t
 
key_Àn
);

376 
subÁ˚t_de°roy
(
subÁ˚t
 *);

377 
subÁ˚t_de°roy__
(
subÁ˚t
 *);

378 
subÁ˚t_gë_key
(
subÁ˚t
 *, 
odputû_keybuf
 *,

379 
oÂbuf
 *
key
);

380 
subÁ˚t_ª£t_dp_°©s
(
subÁ˚t
 *,

381 
dpif_Êow_°©s
 *);

382 
subÁ˚t_upd©e_time
(
subÁ˚t
 *, 
u£d
);

383 
subÁ˚t_upd©e_°©s
(
subÁ˚t
 *,

384 c⁄° 
dpif_Êow_°©s
 *);

385 
subÁ˚t_make_a˘i⁄s
(
subÁ˚t
 *,

386 c⁄° 
oÂbuf
 *
∑ckë
,

387 
oÂbuf
 *
odp_a˘i⁄s
);

388 
subÁ˚t_ö°Æl
(
subÁ˚t
 *,

389 c⁄° 
∆©å
 *
a˘i⁄s
, 
size_t
 
a˘i⁄s_Àn
,

390 
dpif_Êow_°©s
 *, 
¶ow_∑th_ªas⁄
);

391 
subÁ˚t_unö°Æl
(
subÁ˚t
 *);

393 
subÁ˚t_∑th
 
subÁ˚t_w™t_∑th
(
¶ow_∑th_ªas⁄
);

409 
	sÁ˚t
 {

411 
hm≠_node
 
	mhm≠_node
;

412 
li°
 
	mli°_node
;

413 
ruÀ_dpif
 *
	mruÀ
;

416 
li°
 
	msubÁ˚ts
;

417 
	mu£d
;

420 
Êow
 
	mÊow
;

434 
uöt64_t
 
	m∑ckë_cou¡
;

435 
uöt64_t
 
	mbyã_cou¡
;

438 
uöt64_t
 
	m¥ev_∑ckë_cou¡
;

439 
uöt64_t
 
	m¥ev_byã_cou¡
;

440 
	m¥ev_u£d
;

443 
uöt64_t
 
	maccou¡ed_byãs
;

444 
√tÊow_Êow
 
	mnf_Êow
;

445 
uöt8_t
 
	mt˝_Êags
;

453 
boﬁ
 
	mhas_À¨n
;

454 
boﬁ
 
	mhas_n‹mÆ
;

455 
boﬁ
 
	mhas_fö_timeout
;

456 
èg_ty≥
 
	mègs
;

457 
múr‹_mask_t
 
	mmúr‹s
;

462 
subÁ˚t
 
	m⁄e_subÁ˚t
;

465 
Á˚t
 *
Á˚t_¸óã
(
ruÀ_dpif
 *,

466 c⁄° 
Êow
 *, 
uöt32_t
 
hash
);

467 
Á˚t_ªmove
(
Á˚t
 *);

468 
Á˚t_‰ì
(
Á˚t
 *);

470 
Á˚t
 *
Á˚t_föd
(
oÂrŸo_dpif
 *,

471 c⁄° 
Êow
 *, 
uöt32_t
 
hash
);

472 
Á˚t
 *
Á˚t_lookup_vÆid
(
oÂrŸo_dpif
 *,

473 c⁄° 
Êow
 *, 
uöt32_t
 
hash
);

474 
Á˚t_ªvÆid©e
(
Á˚t
 *);

475 
boﬁ
 
Á˚t_check_c⁄si°ícy
(
Á˚t
 *);

477 
Á˚t_Êush_°©s
(
Á˚t
 *);

479 
Á˚t_upd©e_time
(
Á˚t
 *, 
u£d
);

480 
Á˚t_ª£t_cou¡îs
(
Á˚t
 *);

481 
Á˚t_push_°©s
(
Á˚t
 *);

482 
Á˚t_À¨n
(
Á˚t
 *);

483 
Á˚t_accou¡
(
Á˚t
 *);

485 
boﬁ
 
Á˚t_is_c⁄åﬁÀr_Êow
(
Á˚t
 *);

487 
	soÂ‹t_dpif
 {

488 
oÂ‹t
 
	mup
;

490 
uöt32_t
 
	modp_p‹t
;

491 
ofbundÀ
 *
	mbundÀ
;

492 
li°
 
	mbundÀ_node
;

493 
cfm
 *
	mcfm
;

494 
èg_ty≥
 
	mèg
;

495 
uöt32_t
 
	mb⁄d_°abÀ_id
;

496 
boﬁ
 
	mmay_íabÀ
;

497 
	mˇºõr_£q
;

500 
°p_p‹t
 *
	m°p_p‹t
;

501 
°p_°©e
 
	m°p_°©e
;

502 
	m°p_°©e_íãªd
;

504 
hm≠
 
	m¥i‹ôõs
;

512 
uöt16_t
 
	mªÆdev_oÂ_p‹t
;

513 
	mvœndev_vid
;

519 
	s¥i‹ôy_to_ds˝
 {

520 
hm≠_node
 
	mhm≠_node
;

521 
uöt32_t
 
	m¥i‹ôy
;

523 
uöt8_t
 
	mds˝
;

532 
	svœn_•löãr
 {

533 
hm≠_node
 
	mªÆdev_vid_node
;

534 
hm≠_node
 
	mvœndev_node
;

535 
uöt16_t
 
	mªÆdev_oÂ_p‹t
;

536 
uöt16_t
 
	mvœndev_oÂ_p‹t
;

537 
	mvid
;

540 
uöt32_t
 
v•_ªÆdev_to_vœndev
(c⁄° 
oÂrŸo_dpif
 *,

541 
uöt32_t
 
ªÆdev
, 
ovs_be16
 
vœn_tci
);

542 
boﬁ
 
v•_adju°_Êow
(c⁄° 
oÂrŸo_dpif
 *, 
Êow
 *);

543 
v•_ªmove
(
oÂ‹t_dpif
 *);

544 
v•_add
(
oÂ‹t_dpif
 *, 
uöt16_t
 
ªÆdev_oÂ_p‹t
, 
vid
);

546 
oÂ‹t_dpif
 *

547 
	$oÂ‹t_dpif_ˇ°
(c⁄° 
oÂ‹t
 *ofport)

549 
	`as£π
(
oÂ‹t
->
oÂrŸo
->
oÂrŸo_˛ass
 =&
oÂrŸo_dpif_˛ass
);

550  
oÂ‹t
 ? 
	`CONTAINER_OF
(oÂ‹t, 
oÂ‹t_dpif
, 
up
Ë: 
NULL
;

551 
	}
}

553 
p‹t_run
(
oÂ‹t_dpif
 *);

554 
p‹t_run_Á°
(
oÂ‹t_dpif
 *);

555 
p‹t_waô
(
oÂ‹t_dpif
 *);

556 
£t_cfm
(
oÂ‹t
 *, c⁄° 
cfm_£âögs
 *);

557 
oÂ‹t_˛ór_¥i‹ôõs
(
oÂ‹t_dpif
 *);

559 
	sdpif_com∂ëi⁄
 {

560 
li°
 
	mli°_node
;

561 
of›î©i⁄
 *
	m›
;

566 
	sèbÀ_dpif
 {

570 
˛s_èbÀ
 *
	mˇtchÆl_èbÀ
;

571 
˛s_èbÀ
 *
	mŸhî_èbÀ
;

572 
uöt32_t
 
	mbasis
;

583 
	eªvÆid©e_ªas⁄
 {

584 
	mREV_RECONFIGURE
 = 1,

585 
	mREV_STP
,

586 
	mREV_PORT_TOGGLED
,

587 
	mREV_FLOW_TABLE
,

588 
	mREV_INCONSISTENCY


590 
COVERAGE_DEFINE
(
ªv_ªc⁄figuª
);

591 
COVERAGE_DEFINE
(
ªv_°p
);

592 
COVERAGE_DEFINE
(
ªv_p‹t_toggÀd
);

593 
COVERAGE_DEFINE
(
ªv_Êow_èbÀ
);

594 
COVERAGE_DEFINE
(
ªv_öc⁄si°ícy
);

596 
	soÂrŸo_dpif
 {

597 
hm≠_node
 
	mÆl_oÂrŸo_dpifs_node
;

598 
oÂrŸo
 
	mup
;

599 
dpif
 *
	mdpif
;

602 
ruÀ_dpif
 *
	mmiss_ruÀ
;

603 
ruÀ_dpif
 *
	mno_∑ckë_ö_ruÀ
;

606 
uöt64_t
 
	mn_m©ches
;

609 
√tÊow
 *
	m√tÊow
;

610 
dpif_sÊow
 *
	msÊow
;

611 
hm≠
 
	mbundÀs
;

612 
mac_À¨nög
 *
	mml
;

613 
ofmúr‹
 *
	mmúr‹s
[
MAX_MIRRORS
];

614 
boﬁ
 
	mhas_múr‹s
;

615 
boﬁ
 
	mhas_b⁄ded_bundÀs
;

618 
timî
 
	m√xt_expú©i⁄
;

621 
hm≠
 
	mÁ˚ts
;

622 
hm≠
 
	msubÁ˚ts
;

623 
govîn‹
 *
	mgovîn‹
;

626 
èbÀ_dpif
 
	mèbÀs
[
N_TABLES
];

627 
ªvÆid©e_ªas⁄
 
	m√ed_ªvÆid©e
;

628 
èg_£t
 
	mªvÆid©e_£t
;

631 
li°
 
	mcom∂ëi⁄s
;

633 
boﬁ
 
	mhas_bundÀ_a˘i⁄
;

634 
√tdev_°©s
 
	m°©s
;

638 
°p
 *
	m°p
;

639 
	m°p_œ°_tick
;

642 
hm≠
 
	mªÆdev_vid_m≠
;

643 
hm≠
 
	mvœndev_m≠
;

648 
boﬁ
 
	g˛ogged
;

651 
hm≠
 
	gÆl_oÂrŸo_dpifs
 = 
HMAP_INITIALIZER
(&
Æl_oÂrŸo_dpifs
);

653 
oÂrŸo_dpif_unix˘l_öô
();

655 
oÂrŸo_dpif
 *

656 
	$oÂrŸo_dpif_ˇ°
(c⁄° 
oÂrŸo
 *ofproto)

658 
	`as£π
(
oÂrŸo
->
oÂrŸo_˛ass
 =&
oÂrŸo_dpif_˛ass
);

659  
	`CONTAINER_OF
(
oÂrŸo
, 
oÂrŸo_dpif
, 
up
);

660 
	}
}

662 
oÂ‹t_dpif
 *
gë_oÂ_p‹t
(c⁄° 
oÂrŸo_dpif
 *,

663 
uöt16_t
 
oÂ_p‹t
);

664 
oÂ‹t_dpif
 *
gë_odp_p‹t
(c⁄° 
oÂrŸo_dpif
 *,

665 
uöt32_t
 
odp_p‹t
);

666 
oÂrŸo_åa˚
(
oÂrŸo_dpif
 *, c⁄° 
Êow
 *,

667 c⁄° 
oÂbuf
 *, 
ovs_be16
 
öôül_tci
,

668 
ds
 *);

671 
upd©e_À¨nög_èbÀ
(
oÂrŸo_dpif
 *,

672 c⁄° 
Êow
 *, 
vœn
,

673 
ofbundÀ
 *);

675 
	#FLOW_MISS_MAX_BATCH
 50

	)

676 
h™dÀ_upˇŒs
(
oÂrŸo_dpif
 *, 
max_b©ch
);

679 
expúe
(
oÂrŸo_dpif
 *);

682 
£nd_√tÊow_a˘ive_timeouts
(
oÂrŸo_dpif
 *);

685 
£nd_∑ckë
(c⁄° 
oÂ‹t_dpif
 *, 
oÂbuf
 *
∑ckë
);

686 
size_t
 
compo£_sÊow_a˘i⁄
(c⁄° 
oÂrŸo_dpif
 *,

687 
oÂbuf
 *
odp_a˘i⁄s
,

688 c⁄° 
Êow
 *, 
uöt32_t
 
odp_p‹t
);

689 
add_múr‹_a˘i⁄s
(
a˘i⁄_xœã_˘x
 *
˘x
,

690 c⁄° 
Êow
 *flow);

692 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(1, 5);

697 
	$íumî©e_ty≥s
(
s£t
 *
ty≥s
)

699 
	`dp_íumî©e_ty≥s
(
ty≥s
);

700 
	}
}

703 
	$íumî©e_«mes
(c⁄° *
ty≥
, 
s£t
 *
«mes
)

705  
	`dp_íumî©e_«mes
(
ty≥
, 
«mes
);

706 
	}
}

709 
	$dñ
(c⁄° *
ty≥
, c⁄° *
«me
)

711 
dpif
 *dpif;

712 
îr‹
;

714 
îr‹
 = 
	`dpif_›í
(
«me
, 
ty≥
, &
dpif
);

715 i‡(!
îr‹
) {

716 
îr‹
 = 
	`dpif_dñëe
(
dpif
);

717 
	`dpif_˛o£
(
dpif
);

719  
îr‹
;

720 
	}
}

724 
add_öã∫Æ_Êows
(
oÂrŸo_dpif
 *);

726 
oÂrŸo
 *

727 
	$Æloc
()

729 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`xmÆloc
( *ofproto);

730  &
oÂrŸo
->
up
;

731 
	}
}

734 
	$dóŒoc
(
oÂrŸo
 *
oÂrŸo_
)

736 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
oÂrŸo_
);

737 
	`‰ì
(
oÂrŸo
);

738 
	}
}

741 
	$c⁄°ru˘
(
oÂrŸo
 *
oÂrŸo_
)

743 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
oÂrŸo_
);

744 c⁄° *
«me
 = 
oÂrŸo
->
up
.name;

745 
max_p‹ts
;

746 
îr‹
;

747 
i
;

749 
îr‹
 = 
	`dpif_¸óã_™d_›í
(
«me
, 
oÂrŸo
->
up
.
ty≥
, &oÂrŸo->
dpif
);

750 i‡(
îr‹
) {

751 
	`VLOG_ERR
("ÁûedÅÿ›í d©≠©h %s: %s", 
«me
, 
	`°ªº‹
(
îr‹
));

752  
îr‹
;

755 
max_p‹ts
 = 
	`dpif_gë_max_p‹ts
(
oÂrŸo
->
dpif
);

756 
	`oÂrŸo_öô_max_p‹ts
(
oÂrŸo_
, 
	`MIN
(
max_p‹ts
, 
OFPP_MAX
));

758 
oÂrŸo
->
n_m©ches
 = 0;

760 
	`dpif_Êow_Êush
(
oÂrŸo
->
dpif
);

761 
	`dpif_ªcv_purge
(
oÂrŸo
->
dpif
);

763 
îr‹
 = 
	`dpif_ªcv_£t
(
oÂrŸo
->
dpif
, 
åue
);

764 i‡(
îr‹
) {

765 
	`VLOG_ERR
("ÁûedÅÿli°í o¿d©≠©h %s: %s", 
«me
, 
	`°ªº‹
(
îr‹
));

766 
	`dpif_˛o£
(
oÂrŸo
->
dpif
);

767  
îr‹
;

770 
oÂrŸo
->
√tÊow
 = 
NULL
;

771 
oÂrŸo
->
sÊow
 = 
NULL
;

772 
oÂrŸo
->
°p
 = 
NULL
;

773 
	`hm≠_öô
(&
oÂrŸo
->
bundÀs
);

774 
oÂrŸo
->
ml
 = 
	`mac_À¨nög_¸óã
(
MAC_ENTRY_DEFAULT_IDLE_TIME
);

775 
i
 = 0; i < 
MAX_MIRRORS
; i++) {

776 
oÂrŸo
->
múr‹s
[
i
] = 
NULL
;

778 
oÂrŸo
->
has_b⁄ded_bundÀs
 = 
Ál£
;

780 
	`timî_£t_duøti⁄
(&
oÂrŸo
->
√xt_expú©i⁄
, 1000);

782 
	`hm≠_öô
(&
oÂrŸo
->
Á˚ts
);

783 
	`hm≠_öô
(&
oÂrŸo
->
subÁ˚ts
);

784 
oÂrŸo
->
govîn‹
 = 
NULL
;

786 
i
 = 0; i < 
N_TABLES
; i++) {

787 
èbÀ_dpif
 *
èbÀ
 = &
oÂrŸo
->
èbÀs
[
i
];

789 
èbÀ
->
ˇtchÆl_èbÀ
 = 
NULL
;

790 
èbÀ
->
Ÿhî_èbÀ
 = 
NULL
;

791 
èbÀ
->
basis
 = 
	`øndom_uöt32
();

793 
oÂrŸo
->
√ed_ªvÆid©e
 = 0;

794 
	`èg_£t_öô
(&
oÂrŸo
->
ªvÆid©e_£t
);

796 
	`li°_öô
(&
oÂrŸo
->
com∂ëi⁄s
);

798 
	`oÂrŸo_dpif_unix˘l_öô
();

800 
oÂrŸo
->
has_múr‹s
 = 
Ál£
;

801 
oÂrŸo
->
has_bundÀ_a˘i⁄
 = 
Ál£
;

803 
	`hm≠_öô
(&
oÂrŸo
->
vœndev_m≠
);

804 
	`hm≠_öô
(&
oÂrŸo
->
ªÆdev_vid_m≠
);

806 
	`hm≠_ö£π
(&
Æl_oÂrŸo_dpifs
, &
oÂrŸo
->
Æl_oÂrŸo_dpifs_node
,

807 
	`hash_°rög
(
oÂrŸo
->
up
.
«me
, 0));

808 
	`mem£t
(&
oÂrŸo
->
°©s
, 0,  ofproto->stats);

810 
	`oÂrŸo_öô_èbÀs
(
oÂrŸo_
, 
N_TABLES
);

811 
îr‹
 = 
	`add_öã∫Æ_Êows
(
oÂrŸo
);

812 
oÂrŸo
->
up
.
èbÀs
[
TBL_INTERNAL
].
Êags
 = 
OFTABLE_HIDDEN
 | 
OFTABLE_READONLY
;

814  
îr‹
;

815 
	}
}

818 
	$add_öã∫Æ_Êow
(
oÂrŸo_dpif
 *
oÂrŸo
, 
id
,

819 c⁄° 
oÂbuf
 *
oÂa˘s
, 
ruÀ_dpif
 **
ruÀp
)

821 
oÂutû_Êow_mod
 
fm
;

822 
îr‹
;

824 
	`m©ch_öô_ˇtchÆl
(&
fm
.
m©ch
);

825 
fm
.
¥i‹ôy
 = 0;

826 
	`m©ch_£t_ªg
(&
fm
.
m©ch
, 0, 
id
);

827 
fm
.
√w_cookõ
 = 
	`ht⁄Œ
(0);

828 
fm
.
cookõ
 = 
	`ht⁄Œ
(0);

829 
fm
.
cookõ_mask
 = 
	`ht⁄Œ
(0);

830 
fm
.
èbÀ_id
 = 
TBL_INTERNAL
;

831 
fm
.
comm™d
 = 
OFPFC_ADD
;

832 
fm
.
idÀ_timeout
 = 0;

833 
fm
.
h¨d_timeout
 = 0;

834 
fm
.
buf„r_id
 = 0;

835 
fm
.
out_p‹t
 = 0;

836 
fm
.
Êags
 = 0;

837 
fm
.
oÂa˘s
 = oÂa˘s->
d©a
;

838 
fm
.
oÂa˘s_Àn
 = 
oÂa˘s
->
size
;

840 
îr‹
 = 
	`oÂrŸo_Êow_mod
(&
oÂrŸo
->
up
, &
fm
);

841 i‡(
îr‹
) {

842 
	`VLOG_ERR_RL
(&
æ
, "failedÅoádd internal flow %d (%s)",

843 
id
, 
	`oÂîr_to_°rög
(
îr‹
));

844  
îr‹
;

847 *
ruÀp
 = 
	`ruÀ_dpif_lookup__
(
oÂrŸo
, &
fm
.
m©ch
.
Êow
, 
TBL_INTERNAL
);

848 
	`as£π
(*
ruÀp
 !
NULL
);

851 
	}
}

854 
	$add_öã∫Æ_Êows
(
oÂrŸo_dpif
 *
oÂrŸo
)

856 
oÂa˘_c⁄åﬁÀr
 *
c⁄åﬁÀr
;

857 
uöt64_t
 
oÂa˘s_°ub
[128 / 8];

858 
oÂbuf
 
oÂa˘s
;

859 
îr‹
;

860 
id
;

862 
	`oÂbuf_u£_°ack
(&
oÂa˘s
, 
oÂa˘s_°ub
,  ofpacts_stub);

863 
id
 = 1;

865 
c⁄åﬁÀr
 = 
	`oÂa˘_put_CONTROLLER
(&
oÂa˘s
);

866 
c⁄åﬁÀr
->
max_Àn
 = 
UINT16_MAX
;

867 
c⁄åﬁÀr
->
c⁄åﬁÀr_id
 = 0;

868 
c⁄åﬁÀr
->
ªas⁄
 = 
OFPR_NO_MATCH
;

869 
	`oÂa˘_∑d
(&
oÂa˘s
);

871 
îr‹
 = 
	`add_öã∫Æ_Êow
(
oÂrŸo
, 
id
++, &
oÂa˘s
, &oÂrŸo->
miss_ruÀ
);

872 i‡(
îr‹
) {

873  
îr‹
;

876 
	`oÂbuf_˛ór
(&
oÂa˘s
);

877 
îr‹
 = 
	`add_öã∫Æ_Êow
(
oÂrŸo
, 
id
++, &
oÂa˘s
,

878 &
oÂrŸo
->
no_∑ckë_ö_ruÀ
);

879  
îr‹
;

880 
	}
}

883 
	$com∂ëe_›î©i⁄s
(
oÂrŸo_dpif
 *
oÂrŸo
)

885 
dpif_com∂ëi⁄
 *
c
, *
√xt
;

887 
	`LIST_FOR_EACH_SAFE
 (
c
, 
√xt
, 
li°_node
, &
oÂrŸo
->
com∂ëi⁄s
) {

888 
	`of›î©i⁄_com∂ëe
(
c
->
›
, 0);

889 
	`li°_ªmove
(&
c
->
li°_node
);

890 
	`‰ì
(
c
);

892 
	}
}

895 
	$de°ru˘
(
oÂrŸo
 *
oÂrŸo_
)

897 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
oÂrŸo_
);

898 
ruÀ_dpif
 *
ruÀ
, *
√xt_ruÀ
;

899 
o·abÀ
 *
èbÀ
;

900 
i
;

902 
	`hm≠_ªmove
(&
Æl_oÂrŸo_dpifs
, &
oÂrŸo
->
Æl_oÂrŸo_dpifs_node
);

903 
	`com∂ëe_›î©i⁄s
(
oÂrŸo
);

905 
	`OFPROTO_FOR_EACH_TABLE
 (
èbÀ
, &
oÂrŸo
->
up
) {

906 
˛s_curs‹
 
curs‹
;

908 
	`˛s_curs‹_öô
(&
curs‹
, &
èbÀ
->
˛s
, 
NULL
);

909 
	`CLS_CURSOR_FOR_EACH_SAFE
 (
ruÀ
, 
√xt_ruÀ
, 
up
.
¸
, &
curs‹
) {

910 
	`oÂrŸo_ruÀ_de°roy
(&
ruÀ
->
up
);

914 
i
 = 0; i < 
MAX_MIRRORS
; i++) {

915 
	`múr‹_de°roy
(
oÂrŸo
->
múr‹s
[
i
]);

918 
	`√tÊow_de°roy
(
oÂrŸo
->
√tÊow
);

919 
	`dpif_sÊow_de°roy
(
oÂrŸo
->
sÊow
);

920 
	`hm≠_de°roy
(&
oÂrŸo
->
bundÀs
);

921 
	`mac_À¨nög_de°roy
(
oÂrŸo
->
ml
);

923 
	`hm≠_de°roy
(&
oÂrŸo
->
Á˚ts
);

924 
	`hm≠_de°roy
(&
oÂrŸo
->
subÁ˚ts
);

925 
	`govîn‹_de°roy
(
oÂrŸo
->
govîn‹
);

927 
	`hm≠_de°roy
(&
oÂrŸo
->
vœndev_m≠
);

928 
	`hm≠_de°roy
(&
oÂrŸo
->
ªÆdev_vid_m≠
);

930 
	`dpif_˛o£
(
oÂrŸo
->
dpif
);

931 
	}
}

934 
	$run_Á°
(
oÂrŸo
 *
oÂrŸo_
)

936 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
oÂrŸo_
);

937 
oÂ‹t_dpif
 *
oÂ‹t
;

938 
w‹k
;

940 
	`HMAP_FOR_EACH
 (
oÂ‹t
, 
up
.
hm≠_node
, &
oÂrŸo
->up.
p‹ts
) {

941 
	`p‹t_run_Á°
(
oÂ‹t
);

953 
w‹k
 = 0;

954 
w‹k
 < 
FLOW_MISS_MAX_BATCH
) {

955 
ªtvÆ
 = 
	`h™dÀ_upˇŒs
(
oÂrŸo
, 
FLOW_MISS_MAX_BATCH
 - 
w‹k
);

956 i‡(
ªtvÆ
 <= 0) {

957  -
ªtvÆ
;

959 
w‹k
 +
ªtvÆ
;

962 
	}
}

965 
	$run
(
oÂrŸo
 *
oÂrŸo_
)

967 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
oÂrŸo_
);

968 
oÂ‹t_dpif
 *
oÂ‹t
;

969 
ofbundÀ
 *
bundÀ
;

970 
îr‹
;

972 i‡(!
˛ogged
) {

973 
	`com∂ëe_›î©i⁄s
(
oÂrŸo
);

975 
	`dpif_run
(
oÂrŸo
->
dpif
);

977 
îr‹
 = 
	`run_Á°
(
oÂrŸo_
);

978 i‡(
îr‹
) {

979  
îr‹
;

982 i‡(
	`timî_expúed
(&
oÂrŸo
->
√xt_expú©i⁄
)) {

983 
dñay
 = 
	`expúe
(
oÂrŸo
);

984 
	`timî_£t_duøti⁄
(&
oÂrŸo
->
√xt_expú©i⁄
, 
dñay
);

987 i‡(
oÂrŸo
->
√tÊow
) {

988 i‡(
	`√tÊow_run
(
oÂrŸo
->
√tÊow
)) {

989 
	`£nd_√tÊow_a˘ive_timeouts
(
oÂrŸo
);

992 i‡(
oÂrŸo
->
sÊow
) {

993 
	`dpif_sÊow_run
(
oÂrŸo
->
sÊow
);

996 
	`HMAP_FOR_EACH
 (
oÂ‹t
, 
up
.
hm≠_node
, &
oÂrŸo
->up.
p‹ts
) {

997 
	`p‹t_run
(
oÂ‹t
);

999 
	`HMAP_FOR_EACH
 (
bundÀ
, 
hm≠_node
, &
oÂrŸo
->
bundÀs
) {

1000 
	`bundÀ_run
(
bundÀ
);

1003 
	`°p_run
(
oÂrŸo
);

1004 
	`mac_À¨nög_run
(
oÂrŸo
->
ml
, &oÂrŸo->
ªvÆid©e_£t
);

1007 i‡(
oÂrŸo
->
√ed_ªvÆid©e


1008 || !
	`èg_£t_is_em±y
(&
oÂrŸo
->
ªvÆid©e_£t
)) {

1009 
èg_£t
 
ªvÆid©e_£t
 = 
oÂrŸo
->revalidate_set;

1010 
boﬁ
 
ªvÆid©e_Æl
 = 
oÂrŸo
->
√ed_ªvÆid©e
;

1011 
Á˚t
 *facet;

1013 
oÂrŸo
->
√ed_ªvÆid©e
) {

1014 
REV_RECONFIGURE
: 
	`COVERAGE_INC
(
ªv_ªc⁄figuª
); ;

1015 
REV_STP
: 
	`COVERAGE_INC
(
ªv_°p
); ;

1016 
REV_PORT_TOGGLED
: 
	`COVERAGE_INC
(
ªv_p‹t_toggÀd
); ;

1017 
REV_FLOW_TABLE
: 
	`COVERAGE_INC
(
ªv_Êow_èbÀ
); ;

1018 
REV_INCONSISTENCY
: 
	`COVERAGE_INC
(
ªv_öc⁄si°ícy
); ;

1022 
	`èg_£t_öô
(&
oÂrŸo
->
ªvÆid©e_£t
);

1023 
oÂrŸo
->
√ed_ªvÆid©e
 = 0;

1025 
	`HMAP_FOR_EACH
 (
Á˚t
, 
hm≠_node
, &
oÂrŸo
->
Á˚ts
) {

1026 i‡(
ªvÆid©e_Æl


1027 || 
	`èg_£t_öãr£˘s
(&
ªvÆid©e_£t
, 
Á˚t
->
ègs
)) {

1028 
	`Á˚t_ªvÆid©e
(
Á˚t
);

1034 i‡(!
	`hm≠_is_em±y
(&
oÂrŸo
->
Á˚ts
Ë&& !oÂrŸo->
√ed_ªvÆid©e
) {

1035 
Á˚t
 *facet;

1037 
Á˚t
 = 
	`CONTAINER_OF
(
	`hm≠_øndom_node
(&
oÂrŸo
->
Á˚ts
),

1038 
Á˚t
, 
hm≠_node
);

1039 i‡(!
	`èg_£t_öãr£˘s
(&
oÂrŸo
->
ªvÆid©e_£t
, 
Á˚t
->
ègs
)) {

1040 i‡(!
	`Á˚t_check_c⁄si°ícy
(
Á˚t
)) {

1041 
oÂrŸo
->
√ed_ªvÆid©e
 = 
REV_INCONSISTENCY
;

1046 i‡(
oÂrŸo
->
govîn‹
) {

1047 
size_t
 
n_subÁ˚ts
;

1049 
	`govîn‹_run
(
oÂrŸo
->
govîn‹
);

1056 
n_subÁ˚ts
 = 
	`hm≠_cou¡
(&
oÂrŸo
->
subÁ˚ts
);

1057 i‡(
n_subÁ˚ts
 * 4 < 
oÂrŸo
->
up
.
Êow_evi˘i⁄_thªshﬁd


1058 && 
	`govîn‹_is_idÀ
(
oÂrŸo
->
govîn‹
)) {

1059 
	`govîn‹_de°roy
(
oÂrŸo
->
govîn‹
);

1060 
oÂrŸo
->
govîn‹
 = 
NULL
;

1065 
	}
}

1068 
	$waô
(
oÂrŸo
 *
oÂrŸo_
)

1070 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
oÂrŸo_
);

1071 
oÂ‹t_dpif
 *
oÂ‹t
;

1072 
ofbundÀ
 *
bundÀ
;

1074 i‡(!
˛ogged
 && !
	`li°_is_em±y
(&
oÂrŸo
->
com∂ëi⁄s
)) {

1075 
	`pﬁl_immedüã_wake
();

1078 
	`dpif_waô
(
oÂrŸo
->
dpif
);

1079 
	`dpif_ªcv_waô
(
oÂrŸo
->
dpif
);

1080 i‡(
oÂrŸo
->
sÊow
) {

1081 
	`dpif_sÊow_waô
(
oÂrŸo
->
sÊow
);

1083 i‡(!
	`èg_£t_is_em±y
(&
oÂrŸo
->
ªvÆid©e_£t
)) {

1084 
	`pﬁl_immedüã_wake
();

1086 
	`HMAP_FOR_EACH
 (
oÂ‹t
, 
up
.
hm≠_node
, &
oÂrŸo
->up.
p‹ts
) {

1087 
	`p‹t_waô
(
oÂ‹t
);

1089 
	`HMAP_FOR_EACH
 (
bundÀ
, 
hm≠_node
, &
oÂrŸo
->
bundÀs
) {

1090 
	`bundÀ_waô
(
bundÀ
);

1092 i‡(
oÂrŸo
->
√tÊow
) {

1093 
	`√tÊow_waô
(
oÂrŸo
->
√tÊow
);

1095 
	`mac_À¨nög_waô
(
oÂrŸo
->
ml
);

1096 
	`°p_waô
(
oÂrŸo
);

1097 i‡(
oÂrŸo
->
√ed_ªvÆid©e
) {

1099 
	`VLOG_DBG_RL
(&
æ
, "needÑevalidate in ofproto_wait_cb()");

1100 
	`pﬁl_immedüã_wake
();

1102 
	`timî_waô
(&
oÂrŸo
->
√xt_expú©i⁄
);

1104 i‡(
oÂrŸo
->
govîn‹
) {

1105 
	`govîn‹_waô
(
oÂrŸo
->
govîn‹
);

1107 
	}
}

1110 
	$gë_mem‹y_ußge
(c⁄° 
oÂrŸo
 *
oÂrŸo_
, 
sim≠
 *
ußge
)

1112 c⁄° 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
oÂrŸo_
);

1114 
	`sim≠_ö¸ó£
(
ußge
, "Á˚ts", 
	`hm≠_cou¡
(&
oÂrŸo
->
Á˚ts
));

1115 
	`sim≠_ö¸ó£
(
ußge
, "subÁ˚ts", 
	`hm≠_cou¡
(&
oÂrŸo
->
subÁ˚ts
));

1116 
	}
}

1119 
	$Êush
(
oÂrŸo
 *
oÂrŸo_
)

1121 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
oÂrŸo_
);

1122 
Á˚t
 *Á˚t, *
√xt_Á˚t
;

1124 
	`HMAP_FOR_EACH_SAFE
 (
Á˚t
, 
√xt_Á˚t
, 
hm≠_node
, &
oÂrŸo
->
Á˚ts
) {

1129 
subÁ˚t
 *subfacet;

1131 
	`LIST_FOR_EACH
 (
subÁ˚t
, 
li°_node
, &
Á˚t
->
subÁ˚ts
) {

1132 
subÁ˚t
->
∑th
 = 
SF_NOT_INSTALLED
;

1133 
subÁ˚t
->
dp_∑ckë_cou¡
 = 0;

1134 
subÁ˚t
->
dp_byã_cou¡
 = 0;

1136 
	`Á˚t_ªmove
(
Á˚t
);

1138 
	`dpif_Êow_Êush
(
oÂrŸo
->
dpif
);

1139 
	}
}

1142 
	$gë_„©uªs
(
oÂrŸo
 *
oÂrŸo_
 
OVS_UNUSED
,

1143 
boﬁ
 *
¨p_m©ch_ù
, 
oÂutû_a˘i⁄_bôm≠
 *
a˘i⁄s
)

1145 *
¨p_m©ch_ù
 = 
åue
;

1146 *
a˘i⁄s
 = (
OFPUTIL_A_OUTPUT
 |

1147 
OFPUTIL_A_SET_VLAN_VID
 |

1148 
OFPUTIL_A_SET_VLAN_PCP
 |

1149 
OFPUTIL_A_STRIP_VLAN
 |

1150 
OFPUTIL_A_SET_DL_SRC
 |

1151 
OFPUTIL_A_SET_DL_DST
 |

1152 
OFPUTIL_A_SET_NW_SRC
 |

1153 
OFPUTIL_A_SET_NW_DST
 |

1154 
OFPUTIL_A_SET_NW_TOS
 |

1155 
OFPUTIL_A_SET_TP_SRC
 |

1156 
OFPUTIL_A_SET_TP_DST
 |

1157 
OFPUTIL_A_ENQUEUE
);

1158 
	}
}

1161 
	$gë_èbÀs
(
oÂrŸo
 *
oÂrŸo_
, 
oÂ12_èbÀ_°©s
 *
Ÿs
)

1163 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
oÂrŸo_
);

1164 
dpif_dp_°©s
 
s
;

1166 
	`°r˝y
(
Ÿs
->
«me
, "classifier");

1168 
	`dpif_gë_dp_°©s
(
oÂrŸo
->
dpif
, &
s
);

1169 
Ÿs
->
lookup_cou¡
 = 
	`ht⁄Œ
(
s
.
n_hô
 + s.
n_mis£d
);

1170 
Ÿs
->
m©ched_cou¡
 = 
	`ht⁄Œ
(
s
.
n_hô
 + 
oÂrŸo
->
n_m©ches
);

1171 
	}
}

1173 
oÂ‹t
 *

1174 
	$p‹t_Æloc
()

1176 
oÂ‹t_dpif
 *
p‹t
 = 
	`xmÆloc
( *port);

1177  &
p‹t
->
up
;

1178 
	}
}

1181 
	$p‹t_dóŒoc
(
oÂ‹t
 *
p‹t_
)

1183 
oÂ‹t_dpif
 *
p‹t
 = 
	`oÂ‹t_dpif_ˇ°
(
p‹t_
);

1184 
	`‰ì
(
p‹t
);

1185 
	}
}

1188 
	$p‹t_c⁄°ru˘
(
oÂ‹t
 *
p‹t_
)

1190 
oÂ‹t_dpif
 *
p‹t
 = 
	`oÂ‹t_dpif_ˇ°
(
p‹t_
);

1191 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
p‹t
->
up
.ofproto);

1193 
oÂrŸo
->
√ed_ªvÆid©e
 = 
REV_RECONFIGURE
;

1194 
p‹t
->
odp_p‹t
 = 
	`oÂ_p‹t_to_odp_p‹t
’‹t->
up
.
oÂ_p‹t
);

1195 
p‹t
->
bundÀ
 = 
NULL
;

1196 
p‹t
->
cfm
 = 
NULL
;

1197 
p‹t
->
èg
 = 
	`èg_¸óã_øndom
();

1198 
p‹t
->
may_íabÀ
 = 
åue
;

1199 
p‹t
->
°p_p‹t
 = 
NULL
;

1200 
p‹t
->
°p_°©e
 = 
STP_DISABLED
;

1201 
	`hm≠_öô
(&
p‹t
->
¥i‹ôõs
);

1202 
p‹t
->
ªÆdev_oÂ_p‹t
 = 0;

1203 
p‹t
->
vœndev_vid
 = 0;

1204 
p‹t
->
ˇºõr_£q
 = 
	`√tdev_gë_ˇºõr_ª£ts
’‹t->
up
.
√tdev
);

1206 i‡(
oÂrŸo
->
sÊow
) {

1207 
	`dpif_sÊow_add_p‹t
(
oÂrŸo
->
sÊow
, 
p‹t_
);

1211 
	}
}

1214 
	$p‹t_de°ru˘
(
oÂ‹t
 *
p‹t_
)

1216 
oÂ‹t_dpif
 *
p‹t
 = 
	`oÂ‹t_dpif_ˇ°
(
p‹t_
);

1217 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
p‹t
->
up
.ofproto);

1219 
oÂrŸo
->
√ed_ªvÆid©e
 = 
REV_RECONFIGURE
;

1220 
	`bundÀ_ªmove
(
p‹t_
);

1221 
	`£t_cfm
(
p‹t_
, 
NULL
);

1222 i‡(
oÂrŸo
->
sÊow
) {

1223 
	`dpif_sÊow_dñ_p‹t
(
oÂrŸo
->
sÊow
, 
p‹t
->
odp_p‹t
);

1226 
	`oÂ‹t_˛ór_¥i‹ôõs
(
p‹t
);

1227 
	`hm≠_de°roy
(&
p‹t
->
¥i‹ôõs
);

1228 
	}
}

1231 
	$p‹t_modifõd
(
oÂ‹t
 *
p‹t_
)

1233 
oÂ‹t_dpif
 *
p‹t
 = 
	`oÂ‹t_dpif_ˇ°
(
p‹t_
);

1235 i‡(
p‹t
->
bundÀ
 &&Ö‹t->bundÀ->
b⁄d
) {

1236 
	`b⁄d_¶ave_£t_√tdev
(
p‹t
->
bundÀ
->
b⁄d
,Ö‹t,Ö‹t->
up
.
√tdev
);

1238 
	}
}

1241 
	$p‹t_ªc⁄figuªd
(
oÂ‹t
 *
p‹t_
, 
oÂutû_p‹t_c⁄fig
 
ﬁd_c⁄fig
)

1243 
oÂ‹t_dpif
 *
p‹t
 = 
	`oÂ‹t_dpif_ˇ°
(
p‹t_
);

1244 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
p‹t
->
up
.ofproto);

1245 
oÂutû_p‹t_c⁄fig
 
ch™ged
 = 
ﬁd_c⁄fig
 ^ 
p‹t
->
up
.
µ
.
c⁄fig
;

1247 i‡(
ch™ged
 & (
OFPUTIL_PC_NO_RECV
 | 
OFPUTIL_PC_NO_RECV_STP
 |

1248 
OFPUTIL_PC_NO_FWD
 | 
OFPUTIL_PC_NO_FLOOD
 |

1249 
OFPUTIL_PC_NO_PACKET_IN
)) {

1250 
oÂrŸo
->
√ed_ªvÆid©e
 = 
REV_RECONFIGURE
;

1252 i‡(
ch™ged
 & 
OFPUTIL_PC_NO_FLOOD
 && 
p‹t
->
bundÀ
) {

1253 
	`bundÀ_upd©e
(
p‹t
->
bundÀ
);

1256 
	}
}

1259 
	$£t_sÊow
(
oÂrŸo
 *
oÂrŸo_
,

1260 c⁄° 
oÂrŸo_sÊow_›ti⁄s
 *
sÊow_›ti⁄s
)

1262 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
oÂrŸo_
);

1263 
dpif_sÊow
 *
ds
 = 
oÂrŸo
->
sÊow
;

1265 i‡(
sÊow_›ti⁄s
) {

1266 i‡(!
ds
) {

1267 
oÂ‹t_dpif
 *
oÂ‹t
;

1269 
ds
 = 
oÂrŸo
->
sÊow
 = 
	`dpif_sÊow_¸óã
(oÂrŸo->
dpif
);

1270 
	`HMAP_FOR_EACH
 (
oÂ‹t
, 
up
.
hm≠_node
, &
oÂrŸo
->up.
p‹ts
) {

1271 
	`dpif_sÊow_add_p‹t
(
ds
, &
oÂ‹t
->
up
);

1273 
oÂrŸo
->
√ed_ªvÆid©e
 = 
REV_RECONFIGURE
;

1275 
	`dpif_sÊow_£t_›ti⁄s
(
ds
, 
sÊow_›ti⁄s
);

1277 i‡(
ds
) {

1278 
	`dpif_sÊow_de°roy
(
ds
);

1279 
oÂrŸo
->
√ed_ªvÆid©e
 = 
REV_RECONFIGURE
;

1280 
oÂrŸo
->
sÊow
 = 
NULL
;

1284 
	}
}

1287 
	$£t_cfm
(
oÂ‹t
 *
oÂ‹t_
, c⁄° 
cfm_£âögs
 *
s
)

1289 
oÂ‹t_dpif
 *
oÂ‹t
 = 
	`oÂ‹t_dpif_ˇ°
(
oÂ‹t_
);

1290 
îr‹
;

1292 i‡(!
s
) {

1293 
îr‹
 = 0;

1295 i‡(!
oÂ‹t
->
cfm
) {

1296 
oÂrŸo_dpif
 *
oÂrŸo
;

1298 
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
oÂ‹t
->
up
.ofproto);

1299 
oÂrŸo
->
√ed_ªvÆid©e
 = 
REV_RECONFIGURE
;

1300 
oÂ‹t
->
cfm
 = 
	`cfm_¸óã
(
	`√tdev_gë_«me
(oÂ‹t->
up
.
√tdev
));

1303 i‡(
	`cfm_c⁄figuª
(
oÂ‹t
->
cfm
, 
s
)) {

1307 
îr‹
 = 
EINVAL
;

1309 
	`cfm_de°roy
(
oÂ‹t
->
cfm
);

1310 
oÂ‹t
->
cfm
 = 
NULL
;

1311  
îr‹
;

1312 
	}
}

1315 
	$gë_cfm_Áu…
(c⁄° 
oÂ‹t
 *
oÂ‹t_
)

1317 
oÂ‹t_dpif
 *
oÂ‹t
 = 
	`oÂ‹t_dpif_ˇ°
(
oÂ‹t_
);

1319  
oÂ‹t
->
cfm
 ? 
	`cfm_gë_Áu…
(ofport->cfm) : -1;

1320 
	}
}

1323 
	$gë_cfm_›up
(c⁄° 
oÂ‹t
 *
oÂ‹t_
)

1325 
oÂ‹t_dpif
 *
oÂ‹t
 = 
	`oÂ‹t_dpif_ˇ°
(
oÂ‹t_
);

1327  
oÂ‹t
->
cfm
 ? 
	`cfm_gë_›up
(ofport->cfm) : -1;

1328 
	}
}

1331 
	$gë_cfm_ªmŸe_mpids
(c⁄° 
oÂ‹t
 *
oÂ‹t_
, c⁄° 
uöt64_t
 **
rmps
,

1332 
size_t
 *
n_rmps
)

1334 
oÂ‹t_dpif
 *
oÂ‹t
 = 
	`oÂ‹t_dpif_ˇ°
(
oÂ‹t_
);

1336 i‡(
oÂ‹t
->
cfm
) {

1337 
	`cfm_gë_ªmŸe_mpids
(
oÂ‹t
->
cfm
, 
rmps
, 
n_rmps
);

1342 
	}
}

1345 
	$gë_cfm_hó…h
(c⁄° 
oÂ‹t
 *
oÂ‹t_
)

1347 
oÂ‹t_dpif
 *
oÂ‹t
 = 
	`oÂ‹t_dpif_ˇ°
(
oÂ‹t_
);

1349  
oÂ‹t
->
cfm
 ? 
	`cfm_gë_hó…h
(ofport->cfm) : -1;

1350 
	}
}

1355 
	$£nd_bpdu_cb
(
oÂbuf
 *
pkt
, 
p‹t_num
, *
oÂrŸo_
)

1357 
oÂrŸo_dpif
 *
oÂrŸo
 = 
oÂrŸo_
;

1358 
°p_p‹t
 *
•
 = 
	`°p_gë_p‹t
(
oÂrŸo
->
°p
, 
p‹t_num
);

1359 
oÂ‹t_dpif
 *
oÂ‹t
;

1361 
oÂ‹t
 = 
	`°p_p‹t_gë_aux
(
•
);

1362 i‡(!
oÂ‹t
) {

1363 
	`VLOG_WARN_RL
(&
æ
, "%s: cannot send BPDU on unknownÖort %d",

1364 
oÂrŸo
->
up
.
«me
, 
p‹t_num
);

1366 
ëh_hódî
 *
ëh
 = 
pkt
->
l2
;

1368 
	`√tdev_gë_ëhîaddr
(
oÂ‹t
->
up
.
√tdev
, 
ëh
->
ëh_§c
);

1369 i‡(
	`ëh_addr_is_zîo
(
ëh
->
ëh_§c
)) {

1370 
	`VLOG_WARN_RL
(&
æ
, "%s: cannot send BPDU onÖort %d "

1371 "wôh unknow¿MAC", 
oÂrŸo
->
up
.
«me
, 
p‹t_num
);

1373 
	`£nd_∑ckë
(
oÂ‹t
, 
pkt
);

1376 
	`oÂbuf_dñëe
(
pkt
);

1377 
	}
}

1381 
	$£t_°p
(
oÂrŸo
 *
oÂrŸo_
, c⁄° 
oÂrŸo_°p_£âögs
 *
s
)

1383 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
oÂrŸo_
);

1386 i‡(!
s
 !!
oÂrŸo
->
°p
) {

1387 
oÂrŸo
->
√ed_ªvÆid©e
 = 
REV_RECONFIGURE
;

1390 i‡(
s
) {

1391 i‡(!
oÂrŸo
->
°p
) {

1392 
oÂrŸo
->
°p
 = 
	`°p_¸óã
(
oÂrŸo_
->
«me
, 
s
->
sy°em_id
,

1393 
£nd_bpdu_cb
, 
oÂrŸo
);

1394 
oÂrŸo
->
°p_œ°_tick
 = 
	`time_m£c
();

1397 
	`°p_£t_bridge_id
(
oÂrŸo
->
°p
, 
s
->
sy°em_id
);

1398 
	`°p_£t_bridge_¥i‹ôy
(
oÂrŸo
->
°p
, 
s
->
¥i‹ôy
);

1399 
	`°p_£t_hñlo_time
(
oÂrŸo
->
°p
, 
s
->
hñlo_time
);

1400 
	`°p_£t_max_age
(
oÂrŸo
->
°p
, 
s
->
max_age
);

1401 
	`°p_£t_f‹w¨d_dñay
(
oÂrŸo
->
°p
, 
s
->
fwd_dñay
);

1403 
oÂ‹t
 *ofport;

1405 
	`HMAP_FOR_EACH
 (
oÂ‹t
, 
hm≠_node
, &
oÂrŸo
->
up
.
p‹ts
) {

1406 
	`£t_°p_p‹t
(
oÂ‹t
, 
NULL
);

1409 
	`°p_de°roy
(
oÂrŸo
->
°p
);

1410 
oÂrŸo
->
°p
 = 
NULL
;

1414 
	}
}

1417 
	$gë_°p_°©us
(
oÂrŸo
 *
oÂrŸo_
, 
oÂrŸo_°p_°©us
 *
s
)

1419 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
oÂrŸo_
);

1421 i‡(
oÂrŸo
->
°p
) {

1422 
s
->
íabÀd
 = 
åue
;

1423 
s
->
bridge_id
 = 
	`°p_gë_bridge_id
(
oÂrŸo
->
°p
);

1424 
s
->
desig«ãd_roŸ
 = 
	`°p_gë_desig«ãd_roŸ
(
oÂrŸo
->
°p
);

1425 
s
->
roŸ_∑th_co°
 = 
	`°p_gë_roŸ_∑th_co°
(
oÂrŸo
->
°p
);

1427 
s
->
íabÀd
 = 
Ál£
;

1431 
	}
}

1434 
	$upd©e_°p_p‹t_°©e
(
oÂ‹t_dpif
 *
oÂ‹t
)

1436 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
oÂ‹t
->
up
.ofproto);

1437 
°p_°©e
 
°©e
;

1440 
°©e
 = 
oÂ‹t
->
°p_p‹t
 ? 
	`°p_p‹t_gë_°©e
(ofport->stp_port)

1441 : 
STP_DISABLED
;

1444 i‡(
oÂ‹t
->
°p_°©e
 !
°©e
) {

1445 
oÂutû_p‹t_°©e
 
of_°©e
;

1446 
boﬁ
 
fwd_ch™ge
;

1448 
	`VLOG_DBG_RL
(&
æ
, "port %s: STP state changed from %sÅo %s",

1449 
	`√tdev_gë_«me
(
oÂ‹t
->
up
.
√tdev
),

1450 
	`°p_°©e_«me
(
oÂ‹t
->
°p_°©e
),

1451 
	`°p_°©e_«me
(
°©e
));

1452 i‡(
	`°p_À¨n_ö_°©e
(
oÂ‹t
->
°p_°©e
)

1453 !
	`°p_À¨n_ö_°©e
(
°©e
)) {

1455 
	`mac_À¨nög_Êush
(
oÂrŸo
->
ml
, &oÂrŸo->
ªvÆid©e_£t
);

1457 
fwd_ch™ge
 = 
	`°p_f‹w¨d_ö_°©e
(
oÂ‹t
->
°p_°©e
)

1458 !
	`°p_f‹w¨d_ö_°©e
(
°©e
);

1460 
oÂrŸo
->
√ed_ªvÆid©e
 = 
REV_STP
;

1461 
oÂ‹t
->
°p_°©e
 = 
°©e
;

1462 
oÂ‹t
->
°p_°©e_íãªd
 = 
	`time_m£c
();

1464 i‡(
fwd_ch™ge
 && 
oÂ‹t
->
bundÀ
) {

1465 
	`bundÀ_upd©e
(
oÂ‹t
->
bundÀ
);

1469 
of_°©e
 = 
oÂ‹t
->
up
.
µ
.
°©e
 & ~
OFPUTIL_PS_STP_MASK
;

1470 
of_°©e
 |(
°©e
 =
STP_LISTENING
 ? 
OFPUTIL_PS_STP_LISTEN


1471 : 
°©e
 =
STP_LEARNING
 ? 
OFPUTIL_PS_STP_LEARN


1472 : 
°©e
 =
STP_FORWARDING
 ? 
OFPUTIL_PS_STP_FORWARD


1473 : 
°©e
 =
STP_BLOCKING
 ? 
OFPUTIL_PS_STP_BLOCK


1475 
	`oÂrŸo_p‹t_£t_°©e
(&
oÂ‹t
->
up
, 
of_°©e
);

1477 
	}
}

1483 
	$£t_°p_p‹t
(
oÂ‹t
 *
oÂ‹t_
,

1484 c⁄° 
oÂrŸo_p‹t_°p_£âögs
 *
s
)

1486 
oÂ‹t_dpif
 *
oÂ‹t
 = 
	`oÂ‹t_dpif_ˇ°
(
oÂ‹t_
);

1487 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
oÂ‹t
->
up
.ofproto);

1488 
°p_p‹t
 *
•
 = 
oÂ‹t
->stp_port;

1490 i‡(!
s
 || !s->
íabÀ
) {

1491 i‡(
•
) {

1492 
oÂ‹t
->
°p_p‹t
 = 
NULL
;

1493 
	`°p_p‹t_dißbÀ
(
•
);

1494 
	`upd©e_°p_p‹t_°©e
(
oÂ‹t
);

1497 } i‡(
•
 && 
	`°p_p‹t_no
(•Ë!
s
->
p‹t_num


1498 && 
oÂ‹t
 =
	`°p_p‹t_gë_aux
(
•
)) {

1501 
	`°p_p‹t_dißbÀ
(
•
);

1504 
•
 = 
oÂ‹t
->
°p_p‹t
 = 
	`°p_gë_p‹t
(
oÂrŸo
->
°p
, 
s
->
p‹t_num
);

1505 
	`°p_p‹t_íabÀ
(
•
);

1507 
	`°p_p‹t_£t_aux
(
•
, 
oÂ‹t
);

1508 
	`°p_p‹t_£t_¥i‹ôy
(
•
, 
s
->
¥i‹ôy
);

1509 
	`°p_p‹t_£t_∑th_co°
(
•
, 
s
->
∑th_co°
);

1511 
	`upd©e_°p_p‹t_°©e
(
oÂ‹t
);

1514 
	}
}

1517 
	$gë_°p_p‹t_°©us
(
oÂ‹t
 *
oÂ‹t_
,

1518 
oÂrŸo_p‹t_°p_°©us
 *
s
)

1520 
oÂ‹t_dpif
 *
oÂ‹t
 = 
	`oÂ‹t_dpif_ˇ°
(
oÂ‹t_
);

1521 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
oÂ‹t
->
up
.ofproto);

1522 
°p_p‹t
 *
•
 = 
oÂ‹t
->stp_port;

1524 i‡(!
oÂrŸo
->
°p
 || !
•
) {

1525 
s
->
íabÀd
 = 
Ál£
;

1529 
s
->
íabÀd
 = 
åue
;

1530 
s
->
p‹t_id
 = 
	`°p_p‹t_gë_id
(
•
);

1531 
s
->
°©e
 = 
	`°p_p‹t_gë_°©e
(
•
);

1532 
s
->
£c_ö_°©e
 = (
	`time_m£c
(Ë- 
oÂ‹t
->
°p_°©e_íãªd
) / 1000;

1533 
s
->
rﬁe
 = 
	`°p_p‹t_gë_rﬁe
(
•
);

1534 
	`°p_p‹t_gë_cou¡s
(
•
, &
s
->
tx_cou¡
, &s->
rx_cou¡
, &s->
îr‹_cou¡
);

1537 
	}
}

1540 
	$°p_run
(
oÂrŸo_dpif
 *
oÂrŸo
)

1542 i‡(
oÂrŸo
->
°p
) {

1543 
now
 = 
	`time_m£c
();

1544 
ñ≠£d
 = 
now
 - 
oÂrŸo
->
°p_œ°_tick
;

1545 
°p_p‹t
 *
•
;

1547 i‡(
ñ≠£d
 > 0) {

1548 
	`°p_tick
(
oÂrŸo
->
°p
, 
	`MIN
(
INT_MAX
, 
ñ≠£d
));

1549 
oÂrŸo
->
°p_œ°_tick
 = 
now
;

1551 
	`°p_gë_ch™ged_p‹t
(
oÂrŸo
->
°p
, &
•
)) {

1552 
oÂ‹t_dpif
 *
oÂ‹t
 = 
	`°p_p‹t_gë_aux
(
•
);

1554 i‡(
oÂ‹t
) {

1555 
	`upd©e_°p_p‹t_°©e
(
oÂ‹t
);

1559 i‡(
	`°p_check_™d_ª£t_fdb_Êush
(
oÂrŸo
->
°p
)) {

1560 
	`mac_À¨nög_Êush
(
oÂrŸo
->
ml
, &oÂrŸo->
ªvÆid©e_£t
);

1563 
	}
}

1566 
	$°p_waô
(
oÂrŸo_dpif
 *
oÂrŸo
)

1568 i‡(
oÂrŸo
->
°p
) {

1569 
	`pﬁl_timî_waô
(1000);

1571 
	}
}

1574 
boﬁ


1575 
	$°p_should_¥o˚ss_Êow
(c⁄° 
Êow
 *flow)

1577  
	`ëh_addr_equÆs
(
Êow
->
dl_d°
, 
ëh_addr_°p
);

1578 
	}
}

1581 
	$°p_¥o˚ss_∑ckë
(c⁄° 
oÂ‹t_dpif
 *
oÂ‹t
,

1582 c⁄° 
oÂbuf
 *
∑ckë
)

1584 
oÂbuf
 
∑ylﬂd
 = *
∑ckë
;

1585 
ëh_hódî
 *
ëh
 = 
∑ylﬂd
.
d©a
;

1586 
°p_p‹t
 *
•
 = 
oÂ‹t
->stp_port;

1590 i‡(!
•
 || 
	`°p_p‹t_gë_°©e
(•Ë=
STP_DISABLED
) {

1595 i‡(
∑ylﬂd
.
size
 > 
	`¡ohs
(
ëh
->
ëh_ty≥
Ë+ 
ETH_HEADER_LEN
) {

1596 
∑ylﬂd
.
size
 = 
	`¡ohs
(
ëh
->
ëh_ty≥
Ë+ 
ETH_HEADER_LEN
;

1599 i‡(
	`oÂbuf_åy_puŒ
(&
∑ylﬂd
, 
ETH_HEADER_LEN
 + 
LLC_HEADER_LEN
)) {

1600 
	`°p_ª˚ived_bpdu
(
•
, 
∑ylﬂd
.
d©a
,Öaylﬂd.
size
);

1602 
	}
}

1604 
¥i‹ôy_to_ds˝
 *

1605 
	$gë_¥i‹ôy
(c⁄° 
oÂ‹t_dpif
 *
oÂ‹t
, 
uöt32_t
 
¥i‹ôy
)

1607 
¥i‹ôy_to_ds˝
 *
pds˝
;

1608 
uöt32_t
 
hash
;

1610 
hash
 = 
	`hash_öt
(
¥i‹ôy
, 0);

1611 
	`HMAP_FOR_EACH_IN_BUCKET
 (
pds˝
, 
hm≠_node
, 
hash
, &
oÂ‹t
->
¥i‹ôõs
) {

1612 i‡(
pds˝
->
¥i‹ôy
 ==Öriority) {

1613  
pds˝
;

1616  
NULL
;

1617 
	}
}

1620 
	$oÂ‹t_˛ór_¥i‹ôõs
(
oÂ‹t_dpif
 *
oÂ‹t
)

1622 
¥i‹ôy_to_ds˝
 *
pds˝
, *
√xt
;

1624 
	`HMAP_FOR_EACH_SAFE
 (
pds˝
, 
√xt
, 
hm≠_node
, &
oÂ‹t
->
¥i‹ôõs
) {

1625 
	`hm≠_ªmove
(&
oÂ‹t
->
¥i‹ôõs
, &
pds˝
->
hm≠_node
);

1626 
	`‰ì
(
pds˝
);

1628 
	}
}

1631 
	$£t_queues
(
oÂ‹t
 *
oÂ‹t_
,

1632 c⁄° 
oÂrŸo_p‹t_queue
 *
qds˝_li°
,

1633 
size_t
 
n_qds˝
)

1635 
oÂ‹t_dpif
 *
oÂ‹t
 = 
	`oÂ‹t_dpif_ˇ°
(
oÂ‹t_
);

1636 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
oÂ‹t
->
up
.ofproto);

1637 
hm≠
 
√w
 = 
	`HMAP_INITIALIZER
(&new);

1638 
size_t
 
i
;

1640 
i
 = 0; i < 
n_qds˝
; i++) {

1641 
¥i‹ôy_to_ds˝
 *
pds˝
;

1642 
uöt32_t
 
¥i‹ôy
;

1643 
uöt8_t
 
ds˝
;

1645 
ds˝
 = (
qds˝_li°
[
i
].ds˝ << 2Ë& 
IP_DSCP_MASK
;

1646 i‡(
	`dpif_queue_to_¥i‹ôy
(
oÂrŸo
->
dpif
, 
qds˝_li°
[
i
].
queue
,

1647 &
¥i‹ôy
)) {

1651 
pds˝
 = 
	`gë_¥i‹ôy
(
oÂ‹t
, 
¥i‹ôy
);

1652 i‡(
pds˝
) {

1653 
	`hm≠_ªmove
(&
oÂ‹t
->
¥i‹ôõs
, &
pds˝
->
hm≠_node
);

1655 
pds˝
 = 
	`xmÆloc
( *pdscp);

1656 
pds˝
->
¥i‹ôy
 =Öriority;

1657 
pds˝
->
ds˝
 = dscp;

1658 
oÂrŸo
->
√ed_ªvÆid©e
 = 
REV_RECONFIGURE
;

1661 i‡(
pds˝
->
ds˝
 != dscp) {

1662 
pds˝
->
ds˝
 = dscp;

1663 
oÂrŸo
->
√ed_ªvÆid©e
 = 
REV_RECONFIGURE
;

1666 
	`hm≠_ö£π
(&
√w
, &
pds˝
->
hm≠_node
, 
	`hash_öt
’ds˝->
¥i‹ôy
, 0));

1669 i‡(!
	`hm≠_is_em±y
(&
oÂ‹t
->
¥i‹ôõs
)) {

1670 
	`oÂ‹t_˛ór_¥i‹ôõs
(
oÂ‹t
);

1671 
oÂrŸo
->
√ed_ªvÆid©e
 = 
REV_RECONFIGURE
;

1674 
	`hm≠_sw≠
(&
√w
, &
oÂ‹t
->
¥i‹ôõs
);

1675 
	`hm≠_de°roy
(&
√w
);

1678 
	}
}

1692 
	$bundÀ_Êush_macs
(
ofbundÀ
 *
bundÀ
, 
boﬁ
 
Æl_oÂrŸos
)

1694 
oÂrŸo_dpif
 *
oÂrŸo
 = 
bundÀ
->ofproto;

1695 
mac_À¨nög
 *
ml
 = 
oÂrŸo
->ml;

1696 
mac_íåy
 *
mac
, *
√xt_mac
;

1698 
oÂrŸo
->
√ed_ªvÆid©e
 = 
REV_RECONFIGURE
;

1699 
	`LIST_FOR_EACH_SAFE
 (
mac
, 
√xt_mac
, 
Ãu_node
, &
ml
->
Ãus
) {

1700 i‡(
mac
->
p‹t
.
p
 =
bundÀ
) {

1701 i‡(
Æl_oÂrŸos
) {

1702 
oÂrŸo_dpif
 *
o
;

1704 
	`HMAP_FOR_EACH
 (
o
, 
Æl_oÂrŸo_dpifs_node
, &
Æl_oÂrŸo_dpifs
) {

1705 i‡(
o
 !
oÂrŸo
) {

1706 
mac_íåy
 *
e
;

1708 
e
 = 
	`mac_À¨nög_lookup
(
o
->
ml
, 
mac
->mac, mac->
vœn
,

1709 
NULL
);

1710 i‡(
e
) {

1711 
	`èg_£t_add
(&
o
->
ªvÆid©e_£t
, 
e
->
èg
);

1712 
	`mac_À¨nög_expúe
(
o
->
ml
, 
e
);

1718 
	`mac_À¨nög_expúe
(
ml
, 
mac
);

1721 
	}
}

1723 
ofbundÀ
 *

1724 
	$bundÀ_lookup
(c⁄° 
oÂrŸo_dpif
 *
oÂrŸo
, *
aux
)

1726 
ofbundÀ
 *
bundÀ
;

1728 
	`HMAP_FOR_EACH_IN_BUCKET
 (
bundÀ
, 
hm≠_node
, 
	`hash_poöãr
(
aux
, 0),

1729 &
oÂrŸo
->
bundÀs
) {

1730 i‡(
bundÀ
->
aux
 ==áux) {

1731  
bundÀ
;

1734  
NULL
;

1735 
	}
}

1740 
	$bundÀ_lookup_mu…ùÀ
(
oÂrŸo_dpif
 *
oÂrŸo
,

1741 **
auxes
, 
size_t
 
n_auxes
,

1742 
hm≠x
 *
bundÀs
)

1744 
size_t
 
i
;

1746 
	`hm≠x_öô
(
bundÀs
);

1747 
i
 = 0; i < 
n_auxes
; i++) {

1748 
ofbundÀ
 *
bundÀ
 = 
	`bundÀ_lookup
(
oÂrŸo
, 
auxes
[
i
]);

1749 i‡(
bundÀ
) {

1750 
	`hm≠x_add
(
bundÀs
, 
bundÀ
);

1753 
	}
}

1756 
	$bundÀ_upd©e
(
ofbundÀ
 *
bundÀ
)

1758 
oÂ‹t_dpif
 *
p‹t
;

1760 
bundÀ
->
ÊoodabÀ
 = 
åue
;

1761 
	`LIST_FOR_EACH
 (
p‹t
, 
bundÀ_node
, &
bundÀ
->
p‹ts
) {

1762 i‡(
p‹t
->
up
.
µ
.
c⁄fig
 & 
OFPUTIL_PC_NO_FLOOD


1763 || !
	`°p_f‹w¨d_ö_°©e
(
p‹t
->
°p_°©e
)) {

1764 
bundÀ
->
ÊoodabÀ
 = 
Ál£
;

1768 
	}
}

1771 
	$bundÀ_dñ_p‹t
(
oÂ‹t_dpif
 *
p‹t
)

1773 
ofbundÀ
 *
bundÀ
 = 
p‹t
->bundle;

1775 
bundÀ
->
oÂrŸo
->
√ed_ªvÆid©e
 = 
REV_RECONFIGURE
;

1777 
	`li°_ªmove
(&
p‹t
->
bundÀ_node
);

1778 
p‹t
->
bundÀ
 = 
NULL
;

1780 i‡(
bundÀ
->
œ˝
) {

1781 
	`œ˝_¶ave_uƒegi°î
(
bundÀ
->
œ˝
, 
p‹t
);

1783 i‡(
bundÀ
->
b⁄d
) {

1784 
	`b⁄d_¶ave_uƒegi°î
(
bundÀ
->
b⁄d
, 
p‹t
);

1787 
	`bundÀ_upd©e
(
bundÀ
);

1788 
	}
}

1790 
boﬁ


1791 
	$bundÀ_add_p‹t
(
ofbundÀ
 *
bundÀ
, 
uöt32_t
 
oÂ_p‹t
,

1792 
œ˝_¶ave_£âögs
 *
œ˝
,

1793 
uöt32_t
 
b⁄d_°abÀ_id
)

1795 
oÂ‹t_dpif
 *
p‹t
;

1797 
p‹t
 = 
	`gë_oÂ_p‹t
(
bundÀ
->
oÂrŸo
, 
oÂ_p‹t
);

1798 i‡(!
p‹t
) {

1799  
Ál£
;

1802 i‡(
p‹t
->
bundÀ
 != bundle) {

1803 
bundÀ
->
oÂrŸo
->
√ed_ªvÆid©e
 = 
REV_RECONFIGURE
;

1804 i‡(
p‹t
->
bundÀ
) {

1805 
	`bundÀ_dñ_p‹t
(
p‹t
);

1808 
p‹t
->
bundÀ
 = bundle;

1809 
	`li°_push_back
(&
bundÀ
->
p‹ts
, &
p‹t
->
bundÀ_node
);

1810 i‡(
p‹t
->
up
.
µ
.
c⁄fig
 & 
OFPUTIL_PC_NO_FLOOD


1811 || !
	`°p_f‹w¨d_ö_°©e
(
p‹t
->
°p_°©e
)) {

1812 
bundÀ
->
ÊoodabÀ
 = 
Ál£
;

1815 i‡(
œ˝
) {

1816 
p‹t
->
bundÀ
->
oÂrŸo
->
√ed_ªvÆid©e
 = 
REV_RECONFIGURE
;

1817 
	`œ˝_¶ave_ªgi°î
(
bundÀ
->
œ˝
, 
p‹t
,Üacp);

1820 
p‹t
->
b⁄d_°abÀ_id
 = bond_stable_id;

1822  
åue
;

1823 
	}
}

1826 
	$bundÀ_de°roy
(
ofbundÀ
 *
bundÀ
)

1828 
oÂrŸo_dpif
 *
oÂrŸo
;

1829 
oÂ‹t_dpif
 *
p‹t
, *
√xt_p‹t
;

1830 
i
;

1832 i‡(!
bundÀ
) {

1836 
oÂrŸo
 = 
bundÀ
->ofproto;

1837 
i
 = 0; i < 
MAX_MIRRORS
; i++) {

1838 
ofmúr‹
 *
m
 = 
oÂrŸo
->
múr‹s
[
i
];

1839 i‡(
m
) {

1840 i‡(
m
->
out
 =
bundÀ
) {

1841 
	`múr‹_de°roy
(
m
);

1842 } i‡(
	`hm≠x_föd_™d_dñëe
(&
m
->
§cs
, 
bundÀ
)

1843 || 
	`hm≠x_föd_™d_dñëe
(&
m
->
d°s
, 
bundÀ
)) {

1844 
oÂrŸo
->
√ed_ªvÆid©e
 = 
REV_RECONFIGURE
;

1849 
	`LIST_FOR_EACH_SAFE
 (
p‹t
, 
√xt_p‹t
, 
bundÀ_node
, &
bundÀ
->
p‹ts
) {

1850 
	`bundÀ_dñ_p‹t
(
p‹t
);

1853 
	`bundÀ_Êush_macs
(
bundÀ
, 
åue
);

1854 
	`hm≠_ªmove
(&
oÂrŸo
->
bundÀs
, &
bundÀ
->
hm≠_node
);

1855 
	`‰ì
(
bundÀ
->
«me
);

1856 
	`‰ì
(
bundÀ
->
åunks
);

1857 
	`œ˝_de°roy
(
bundÀ
->
œ˝
);

1858 
	`b⁄d_de°roy
(
bundÀ
->
b⁄d
);

1859 
	`‰ì
(
bundÀ
);

1860 
	}
}

1863 
	$bundÀ_£t
(
oÂrŸo
 *
oÂrŸo_
, *
aux
,

1864 c⁄° 
oÂrŸo_bundÀ_£âögs
 *
s
)

1866 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
oÂrŸo_
);

1867 
boﬁ
 
√ed_Êush
 = 
Ál£
;

1868 
oÂ‹t_dpif
 *
p‹t
;

1869 
ofbundÀ
 *
bundÀ
;

1870 *
åunks
;

1871 
vœn
;

1872 
size_t
 
i
;

1873 
boﬁ
 
ok
;

1875 i‡(!
s
) {

1876 
	`bundÀ_de°roy
(
	`bundÀ_lookup
(
oÂrŸo
, 
aux
));

1880 
	`as£π
(
s
->
n_¶aves
 =1 || s->
b⁄d
 !
NULL
);

1881 
	`as£π
((
s
->
œ˝
 !
NULL
Ë=(s->
œ˝_¶aves
 != NULL));

1883 
bundÀ
 = 
	`bundÀ_lookup
(
oÂrŸo
, 
aux
);

1884 i‡(!
bundÀ
) {

1885 
bundÀ
 = 
	`xmÆloc
( *bundle);

1887 
bundÀ
->
oÂrŸo
 = ofproto;

1888 
	`hm≠_ö£π
(&
oÂrŸo
->
bundÀs
, &
bundÀ
->
hm≠_node
,

1889 
	`hash_poöãr
(
aux
, 0));

1890 
bundÀ
->
aux
 =áux;

1891 
bundÀ
->
«me
 = 
NULL
;

1893 
	`li°_öô
(&
bundÀ
->
p‹ts
);

1894 
bundÀ
->
vœn_mode
 = 
PORT_VLAN_TRUNK
;

1895 
bundÀ
->
vœn
 = -1;

1896 
bundÀ
->
åunks
 = 
NULL
;

1897 
bundÀ
->
u£_¥i‹ôy_ègs
 = 
s
->use_priority_tags;

1898 
bundÀ
->
œ˝
 = 
NULL
;

1899 
bundÀ
->
b⁄d
 = 
NULL
;

1901 
bundÀ
->
ÊoodabÀ
 = 
åue
;

1903 
bundÀ
->
§c_múr‹s
 = 0;

1904 
bundÀ
->
d°_múr‹s
 = 0;

1905 
bundÀ
->
múr‹_out
 = 0;

1908 i‡(!
bundÀ
->
«me
 || 
	`°rcmp
(
s
->name, bundle->name)) {

1909 
	`‰ì
(
bundÀ
->
«me
);

1910 
bundÀ
->
«me
 = 
	`x°rdup
(
s
->name);

1914 i‡(
s
->
œ˝
) {

1915 i‡(!
bundÀ
->
œ˝
) {

1916 
oÂrŸo
->
√ed_ªvÆid©e
 = 
REV_RECONFIGURE
;

1917 
bundÀ
->
œ˝
 = 
	`œ˝_¸óã
();

1919 
	`œ˝_c⁄figuª
(
bundÀ
->
œ˝
, 
s
->lacp);

1921 
	`œ˝_de°roy
(
bundÀ
->
œ˝
);

1922 
bundÀ
->
œ˝
 = 
NULL
;

1926 
ok
 = 
åue
;

1927 
i
 = 0; i < 
s
->
n_¶aves
; i++) {

1928 i‡(!
	`bundÀ_add_p‹t
(
bundÀ
, 
s
->
¶aves
[
i
],

1929 
s
->
œ˝
 ? &s->
œ˝_¶aves
[
i
] : 
NULL
,

1930 
s
->
b⁄d_°abÀ_ids
 ? s->b⁄d_°abÀ_ids[
i
] : 0)) {

1931 
ok
 = 
Ál£
;

1934 i‡(!
ok
 || 
	`li°_size
(&
bundÀ
->
p‹ts
Ë!
s
->
n_¶aves
) {

1935 
oÂ‹t_dpif
 *
√xt_p‹t
;

1937 
	`LIST_FOR_EACH_SAFE
 (
p‹t
, 
√xt_p‹t
, 
bundÀ_node
, &
bundÀ
->
p‹ts
) {

1938 
i
 = 0; i < 
s
->
n_¶aves
; i++) {

1939 i‡(
s
->
¶aves
[
i
] =
p‹t
->
up
.
oÂ_p‹t
) {

1940 
found
;

1944 
	`bundÀ_dñ_p‹t
(
p‹t
);

1945 
found
: ;

1948 
	`as£π
(
	`li°_size
(&
bundÀ
->
p‹ts
Ë<
s
->
n_¶aves
);

1950 i‡(
	`li°_is_em±y
(&
bundÀ
->
p‹ts
)) {

1951 
	`bundÀ_de°roy
(
bundÀ
);

1952  
EINVAL
;

1956 i‡(
s
->
vœn_mode
 !
bundÀ
->vlan_mode

1957 || 
s
->
u£_¥i‹ôy_ègs
 !
bundÀ
->use_priority_tags) {

1958 
bundÀ
->
vœn_mode
 = 
s
->vlan_mode;

1959 
bundÀ
->
u£_¥i‹ôy_ègs
 = 
s
->use_priority_tags;

1960 
√ed_Êush
 = 
åue
;

1964 
vœn
 = (
s
->
vœn_mode
 =
PORT_VLAN_TRUNK
 ? -1

1965 : 
s
->
vœn
 >= 0 && s->vlan <= 4095 ? s->vlan

1967 i‡(
vœn
 !
bundÀ
->vlan) {

1968 
bundÀ
->
vœn
 = vlan;

1969 
√ed_Êush
 = 
åue
;

1973 
s
->
vœn_mode
) {

1974 
PORT_VLAN_ACCESS
:

1975 
åunks
 = 
NULL
;

1978 
PORT_VLAN_TRUNK
:

1979 
åunks
 = 
	`CONST_CAST
(*, 
s
->trunks);

1982 
PORT_VLAN_NATIVE_UNTAGGED
:

1983 
PORT_VLAN_NATIVE_TAGGED
:

1984 i‡(
vœn
 !0 && (!
s
->
åunks


1985 || !
	`bôm≠_is_£t
(
s
->
åunks
, 
vœn
)

1986 || 
	`bôm≠_is_£t
(
s
->
åunks
, 0))) {

1988 i‡(
s
->
åunks
) {

1989 
åunks
 = 
	`bôm≠_˛⁄e
(
s
->trunks, 4096);

1991 
åunks
 = 
	`bôm≠_Æloˇã1
(4096);

1993 
	`bôm≠_£t1
(
åunks
, 
vœn
);

1994 
	`bôm≠_£t0
(
åunks
, 0);

1996 
åunks
 = 
	`CONST_CAST
(*, 
s
->trunks);

2001 
	`NOT_REACHED
();

2003 i‡(!
	`vœn_bôm≠_equÆ
(
åunks
, 
bundÀ
->trunks)) {

2004 
	`‰ì
(
bundÀ
->
åunks
);

2005 i‡(
åunks
 =
s
->trunks) {

2006 
bundÀ
->
åunks
 = 
	`vœn_bôm≠_˛⁄e
(trunks);

2008 
bundÀ
->
åunks
 =Årunks;

2009 
åunks
 = 
NULL
;

2011 
√ed_Êush
 = 
åue
;

2013 i‡(
åunks
 !
s
->trunks) {

2014 
	`‰ì
(
åunks
);

2018 i‡(!
	`li°_is_sh‹t
(&
bundÀ
->
p‹ts
)) {

2019 
bundÀ
->
oÂrŸo
->
has_b⁄ded_bundÀs
 = 
åue
;

2020 i‡(
bundÀ
->
b⁄d
) {

2021 i‡(
	`b⁄d_ªc⁄figuª
(
bundÀ
->
b⁄d
, 
s
->bond)) {

2022 
oÂrŸo
->
√ed_ªvÆid©e
 = 
REV_RECONFIGURE
;

2025 
bundÀ
->
b⁄d
 = 
	`b⁄d_¸óã
(
s
->bond);

2026 
oÂrŸo
->
√ed_ªvÆid©e
 = 
REV_RECONFIGURE
;

2029 
	`LIST_FOR_EACH
 (
p‹t
, 
bundÀ_node
, &
bundÀ
->
p‹ts
) {

2030 
	`b⁄d_¶ave_ªgi°î
(
bundÀ
->
b⁄d
, 
p‹t
,Ö‹t->
b⁄d_°abÀ_id
,

2031 
p‹t
->
up
.
√tdev
);

2034 
	`b⁄d_de°roy
(
bundÀ
->
b⁄d
);

2035 
bundÀ
->
b⁄d
 = 
NULL
;

2040 i‡(
√ed_Êush
) {

2041 
	`bundÀ_Êush_macs
(
bundÀ
, 
Ál£
);

2045 
	}
}

2048 
	$bundÀ_ªmove
(
oÂ‹t
 *
p‹t_
)

2050 
oÂ‹t_dpif
 *
p‹t
 = 
	`oÂ‹t_dpif_ˇ°
(
p‹t_
);

2051 
ofbundÀ
 *
bundÀ
 = 
p‹t
->bundle;

2053 i‡(
bundÀ
) {

2054 
	`bundÀ_dñ_p‹t
(
p‹t
);

2055 i‡(
	`li°_is_em±y
(&
bundÀ
->
p‹ts
)) {

2056 
	`bundÀ_de°roy
(
bundÀ
);

2057 } i‡(
	`li°_is_sh‹t
(&
bundÀ
->
p‹ts
)) {

2058 
	`b⁄d_de°roy
(
bundÀ
->
b⁄d
);

2059 
bundÀ
->
b⁄d
 = 
NULL
;

2062 
	}
}

2065 
	$£nd_pdu_cb
(*
p‹t_
, c⁄° *
pdu
, 
size_t
 
pdu_size
)

2067 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 10);

2068 
oÂ‹t_dpif
 *
p‹t
 = 
p‹t_
;

2069 
uöt8_t
 
ó
[
ETH_ADDR_LEN
];

2070 
îr‹
;

2072 
îr‹
 = 
	`√tdev_gë_ëhîaddr
(
p‹t
->
up
.
√tdev
, 
ó
);

2073 i‡(!
îr‹
) {

2074 
oÂbuf
 
∑ckë
;

2075 *
∑ckë_pdu
;

2077 
	`oÂbuf_öô
(&
∑ckë
, 0);

2078 
∑ckë_pdu
 = 
	`ëh_compo£
(&
∑ckë
, 
ëh_addr_œ˝
, 
ó
, 
ETH_TYPE_LACP
,

2079 
pdu_size
);

2080 
	`mem˝y
(
∑ckë_pdu
, 
pdu
, 
pdu_size
);

2082 
	`£nd_∑ckë
(
p‹t
, &
∑ckë
);

2083 
	`oÂbuf_unöô
(&
∑ckë
);

2085 
	`VLOG_ERR_RL
(&
æ
, "port %s: cannot obtain Ethernetáddress of iface "

2086 "%†(%s)", 
p‹t
->
bundÀ
->
«me
,

2087 
	`√tdev_gë_«me
(
p‹t
->
up
.
√tdev
), 
	`°ªº‹
(
îr‹
));

2089 
	}
}

2092 
	$bundÀ_£nd_À¨nög_∑ckës
(
ofbundÀ
 *
bundÀ
)

2094 
oÂrŸo_dpif
 *
oÂrŸo
 = 
bundÀ
->ofproto;

2095 
îr‹
, 
n_∑ckës
, 
n_îr‹s
;

2096 
mac_íåy
 *
e
;

2098 
îr‹
 = 
n_∑ckës
 = 
n_îr‹s
 = 0;

2099 
	`LIST_FOR_EACH
 (
e
, 
Ãu_node
, &
oÂrŸo
->
ml
->
Ãus
) {

2100 i‡(
e
->
p‹t
.
p
 !
bundÀ
) {

2101 
oÂbuf
 *
À¨nög_∑ckë
;

2102 
oÂ‹t_dpif
 *
p‹t
;

2103 *
p‹t_void
;

2104 
ªt
;

2108 
À¨nög_∑ckë
 = 
	`b⁄d_compo£_À¨nög_∑ckë
(
bundÀ
->
b⁄d
,

2109 
e
->
mac
,É->
vœn
,

2110 &
p‹t_void
);

2111 
p‹t
 = 
p‹t_void
;

2112 
ªt
 = 
	`£nd_∑ckë
(
p‹t
, 
À¨nög_∑ckë
);

2113 
	`oÂbuf_dñëe
(
À¨nög_∑ckë
);

2114 i‡(
ªt
) {

2115 
îr‹
 = 
ªt
;

2116 
n_îr‹s
++;

2118 
n_∑ckës
++;

2122 i‡(
n_îr‹s
) {

2123 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 5);

2124 
	`VLOG_WARN_RL
(&
æ
, "bond %s: %dÉrrors sending %d gratuitousÜearning "

2126 
bundÀ
->
«me
, 
n_îr‹s
, 
n_∑ckës
, 
	`°ªº‹
(
îr‹
));

2128 
	`VLOG_DBG
("bond %s: sent %d gratuitousÜearningÖackets",

2129 
bundÀ
->
«me
, 
n_∑ckës
);

2131 
	}
}

2134 
	$bundÀ_run
(
ofbundÀ
 *
bundÀ
)

2136 i‡(
bundÀ
->
œ˝
) {

2137 
	`œ˝_run
(
bundÀ
->
œ˝
, 
£nd_pdu_cb
);

2139 i‡(
bundÀ
->
b⁄d
) {

2140 
oÂ‹t_dpif
 *
p‹t
;

2142 
	`LIST_FOR_EACH
 (
p‹t
, 
bundÀ_node
, &
bundÀ
->
p‹ts
) {

2143 
	`b⁄d_¶ave_£t_may_íabÀ
(
bundÀ
->
b⁄d
, 
p‹t
,Ö‹t->
may_íabÀ
);

2146 
	`b⁄d_run
(
bundÀ
->
b⁄d
, &bundÀ->
oÂrŸo
->
ªvÆid©e_£t
,

2147 
	`œ˝_°©us
(
bundÀ
->
œ˝
));

2148 i‡(
	`b⁄d_should_£nd_À¨nög_∑ckës
(
bundÀ
->
b⁄d
)) {

2149 
	`bundÀ_£nd_À¨nög_∑ckës
(
bundÀ
);

2152 
	}
}

2155 
	$bundÀ_waô
(
ofbundÀ
 *
bundÀ
)

2157 i‡(
bundÀ
->
œ˝
) {

2158 
	`œ˝_waô
(
bundÀ
->
œ˝
);

2160 i‡(
bundÀ
->
b⁄d
) {

2161 
	`b⁄d_waô
(
bundÀ
->
b⁄d
);

2163 
	}
}

2168 
	$múr‹_sˇn
(
oÂrŸo_dpif
 *
oÂrŸo
)

2170 
idx
;

2172 
idx
 = 0; idx < 
MAX_MIRRORS
; idx++) {

2173 i‡(!
oÂrŸo
->
múr‹s
[
idx
]) {

2174  
idx
;

2178 
	}
}

2180 
ofmúr‹
 *

2181 
	$múr‹_lookup
(
oÂrŸo_dpif
 *
oÂrŸo
, *
aux
)

2183 
i
;

2185 
i
 = 0; i < 
MAX_MIRRORS
; i++) {

2186 
ofmúr‹
 *
múr‹
 = 
oÂrŸo
->
múr‹s
[
i
];

2187 i‡(
múr‹
 && múr‹->
aux
 ==áux) {

2188  
múr‹
;

2192  
NULL
;

2193 
	}
}

2197 
	$múr‹_upd©e_dups
(
oÂrŸo_dpif
 *
oÂrŸo
)

2199 
i
;

2201 
i
 = 0; i < 
MAX_MIRRORS
; i++) {

2202 
ofmúr‹
 *
m
 = 
oÂrŸo
->
múr‹s
[
i
];

2204 i‡(
m
) {

2205 
m
->
dup_múr‹s
 = 
	`MIRROR_MASK_C
(1Ë<< 
i
;

2209 
i
 = 0; i < 
MAX_MIRRORS
; i++) {

2210 
ofmúr‹
 *
m1
 = 
oÂrŸo
->
múr‹s
[
i
];

2211 
j
;

2213 i‡(!
m1
) {

2217 
j
 = 
i
 + 1; j < 
MAX_MIRRORS
; j++) {

2218 
ofmúr‹
 *
m2
 = 
oÂrŸo
->
múr‹s
[
j
];

2220 i‡(
m2
 && 
m1
->
out
 =m2->ouà&& m1->
out_vœn
 == m2->out_vlan) {

2221 
m1
->
dup_múr‹s
 |
	`MIRROR_MASK_C
(1Ë<< 
j
;

2222 
m2
->
dup_múr‹s
 |
m1
->dup_mirrors;

2226 
	}
}

2229 
	$múr‹_£t
(
oÂrŸo
 *
oÂrŸo_
, *
aux
,

2230 c⁄° 
oÂrŸo_múr‹_£âögs
 *
s
)

2232 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
oÂrŸo_
);

2233 
múr‹_mask_t
 
múr‹_bô
;

2234 
ofbundÀ
 *
bundÀ
;

2235 
ofmúr‹
 *
múr‹
;

2236 
ofbundÀ
 *
out
;

2237 
hm≠x
 
§cs
;

2238 
hm≠x
 
d°s
;

2239 
out_vœn
;

2241 
múr‹
 = 
	`múr‹_lookup
(
oÂrŸo
, 
aux
);

2242 i‡(!
s
) {

2243 
	`múr‹_de°roy
(
múr‹
);

2246 i‡(!
múr‹
) {

2247 
idx
;

2249 
idx
 = 
	`múr‹_sˇn
(
oÂrŸo
);

2250 i‡(
idx
 < 0) {

2251 
	`VLOG_WARN
("bridge %s: maximum of %dÖort mirrorsÑeached, "

2253 
oÂrŸo
->
up
.
«me
, 
MAX_MIRRORS
, 
s
->name);

2254  
EFBIG
;

2257 
múr‹
 = 
oÂrŸo
->
múr‹s
[
idx
] = 
	`xzÆloc
( *mirror);

2258 
múr‹
->
oÂrŸo
 = ofproto;

2259 
múr‹
->
idx
 = idx;

2260 
múr‹
->
aux
 =áux;

2261 
múr‹
->
out_vœn
 = -1;

2262 
múr‹
->
«me
 = 
NULL
;

2265 i‡(!
múr‹
->
«me
 || 
	`°rcmp
(
s
->name, mirror->name)) {

2266 
	`‰ì
(
múr‹
->
«me
);

2267 
múr‹
->
«me
 = 
	`x°rdup
(
s
->name);

2271 i‡(
s
->
out_bundÀ
) {

2272 
out
 = 
	`bundÀ_lookup
(
oÂrŸo
, 
s
->
out_bundÀ
);

2273 i‡(!
out
) {

2274 
	`múr‹_de°roy
(
múr‹
);

2275  
EINVAL
;

2277 
out_vœn
 = -1;

2279 
out
 = 
NULL
;

2280 
out_vœn
 = 
s
->out_vlan;

2282 
	`bundÀ_lookup_mu…ùÀ
(
oÂrŸo
, 
s
->
§cs
, s->
n_§cs
, &srcs);

2283 
	`bundÀ_lookup_mu…ùÀ
(
oÂrŸo
, 
s
->
d°s
, s->
n_d°s
, &dsts);

2286 i‡(
	`hm≠x_equÆs
(&
§cs
, &
múr‹
->srcs)

2287 && 
	`hm≠x_equÆs
(&
d°s
, &
múr‹
->dsts)

2288 && 
	`vœn_bôm≠_equÆ
(
múr‹
->
vœns
, 
s
->
§c_vœns
)

2289 && 
múr‹
->
out
 == out

2290 && 
múr‹
->
out_vœn
 == out_vlan)

2292 
	`hm≠x_de°roy
(&
§cs
);

2293 
	`hm≠x_de°roy
(&
d°s
);

2297 
	`hm≠x_sw≠
(&
§cs
, &
múr‹
->srcs);

2298 
	`hm≠x_de°roy
(&
§cs
);

2300 
	`hm≠x_sw≠
(&
d°s
, &
múr‹
->dsts);

2301 
	`hm≠x_de°roy
(&
d°s
);

2303 
	`‰ì
(
múr‹
->
vœns
);

2304 
múr‹
->
vœns
 = 
	`vœn_bôm≠_˛⁄e
(
s
->
§c_vœns
);

2306 
múr‹
->
out
 = out;

2307 
múr‹
->
out_vœn
 = out_vlan;

2310 
múr‹_bô
 = 
	`MIRROR_MASK_C
(1Ë<< 
múr‹
->
idx
;

2311 
	`HMAP_FOR_EACH
 (
bundÀ
, 
hm≠_node
, &
múr‹
->
oÂrŸo
->
bundÀs
) {

2312 i‡(
	`hm≠x_c⁄èös
(&
múr‹
->
§cs
, 
bundÀ
)) {

2313 
bundÀ
->
§c_múr‹s
 |
múr‹_bô
;

2315 
bundÀ
->
§c_múr‹s
 &~
múr‹_bô
;

2318 i‡(
	`hm≠x_c⁄èös
(&
múr‹
->
d°s
, 
bundÀ
)) {

2319 
bundÀ
->
d°_múr‹s
 |
múr‹_bô
;

2321 
bundÀ
->
d°_múr‹s
 &~
múr‹_bô
;

2324 i‡(
múr‹
->
out
 =
bundÀ
) {

2325 
bundÀ
->
múr‹_out
 |
múr‹_bô
;

2327 
bundÀ
->
múr‹_out
 &~
múr‹_bô
;

2331 
oÂrŸo
->
√ed_ªvÆid©e
 = 
REV_RECONFIGURE
;

2332 
oÂrŸo
->
has_múr‹s
 = 
åue
;

2333 
	`mac_À¨nög_Êush
(
oÂrŸo
->
ml
, &oÂrŸo->
ªvÆid©e_£t
);

2334 
	`múr‹_upd©e_dups
(
oÂrŸo
);

2337 
	}
}

2340 
	$múr‹_de°roy
(
ofmúr‹
 *
múr‹
)

2342 
oÂrŸo_dpif
 *
oÂrŸo
;

2343 
múr‹_mask_t
 
múr‹_bô
;

2344 
ofbundÀ
 *
bundÀ
;

2345 
i
;

2347 i‡(!
múr‹
) {

2351 
oÂrŸo
 = 
múr‹
->ofproto;

2352 
oÂrŸo
->
√ed_ªvÆid©e
 = 
REV_RECONFIGURE
;

2353 
	`mac_À¨nög_Êush
(
oÂrŸo
->
ml
, &oÂrŸo->
ªvÆid©e_£t
);

2355 
múr‹_bô
 = 
	`MIRROR_MASK_C
(1Ë<< 
múr‹
->
idx
;

2356 
	`HMAP_FOR_EACH
 (
bundÀ
, 
hm≠_node
, &
oÂrŸo
->
bundÀs
) {

2357 
bundÀ
->
§c_múr‹s
 &~
múr‹_bô
;

2358 
bundÀ
->
d°_múr‹s
 &~
múr‹_bô
;

2359 
bundÀ
->
múr‹_out
 &~
múr‹_bô
;

2362 
	`hm≠x_de°roy
(&
múr‹
->
§cs
);

2363 
	`hm≠x_de°roy
(&
múr‹
->
d°s
);

2364 
	`‰ì
(
múr‹
->
vœns
);

2366 
oÂrŸo
->
múr‹s
[
múr‹
->
idx
] = 
NULL
;

2367 
	`‰ì
(
múr‹
->
«me
);

2368 
	`‰ì
(
múr‹
);

2370 
	`múr‹_upd©e_dups
(
oÂrŸo
);

2372 
oÂrŸo
->
has_múr‹s
 = 
Ál£
;

2373 
i
 = 0; i < 
MAX_MIRRORS
; i++) {

2374 i‡(
oÂrŸo
->
múr‹s
[
i
]) {

2375 
oÂrŸo
->
has_múr‹s
 = 
åue
;

2379 
	}
}

2382 
	$múr‹_gë_°©s
(
oÂrŸo
 *
oÂrŸo_
, *
aux
,

2383 
uöt64_t
 *
∑ckës
, uöt64_à*
byãs
)

2385 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
oÂrŸo_
);

2386 
ofmúr‹
 *
múr‹
 = 
	`múr‹_lookup
(
oÂrŸo
, 
aux
);

2388 i‡(!
múr‹
) {

2389 *
∑ckës
 = *
byãs
 = 
UINT64_MAX
;

2393 *
∑ckës
 = 
múr‹
->
∑ckë_cou¡
;

2394 *
byãs
 = 
múr‹
->
byã_cou¡
;

2397 
	}
}

2400 
	$£t_Êood_vœns
(
oÂrŸo
 *
oÂrŸo_
, *
Êood_vœns
)

2402 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
oÂrŸo_
);

2403 i‡(
	`mac_À¨nög_£t_Êood_vœns
(
oÂrŸo
->
ml
, 
Êood_vœns
)) {

2404 
	`mac_À¨nög_Êush
(
oÂrŸo
->
ml
, &oÂrŸo->
ªvÆid©e_£t
);

2407 
	}
}

2409 
boﬁ


2410 
	$is_múr‹_ouçut_bundÀ
(c⁄° 
oÂrŸo
 *
oÂrŸo_
, *
aux
)

2412 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
oÂrŸo_
);

2413 
ofbundÀ
 *
bundÀ
 = 
	`bundÀ_lookup
(
oÂrŸo
, 
aux
);

2414  
bundÀ
 && bundÀ->
múr‹_out
 != 0;

2415 
	}
}

2418 
	$f‹w¨d_bpdu_ch™ged
(
oÂrŸo
 *
oÂrŸo_
)

2420 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
oÂrŸo_
);

2421 
oÂrŸo
->
√ed_ªvÆid©e
 = 
REV_RECONFIGURE
;

2422 
	}
}

2425 
	$£t_mac_idÀ_time
(
oÂrŸo
 *
oÂrŸo_
, 
idÀ_time
)

2427 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
oÂrŸo_
);

2428 
	`mac_À¨nög_£t_idÀ_time
(
oÂrŸo
->
ml
, 
idÀ_time
);

2429 
	}
}

2433 
oÂ‹t_dpif
 *

2434 
	$gë_oÂ_p‹t
(c⁄° 
oÂrŸo_dpif
 *
oÂrŸo
, 
uöt16_t
 
oÂ_p‹t
)

2436 
oÂ‹t
 *oÂ‹à
	`oÂrŸo_gë_p‹t
(&
oÂrŸo
->
up
, 
oÂ_p‹t
);

2437  
oÂ‹t
 ? 
	`oÂ‹t_dpif_ˇ°
(oÂ‹tË: 
NULL
;

2438 
	}
}

2440 
oÂ‹t_dpif
 *

2441 
	$gë_odp_p‹t
(c⁄° 
oÂrŸo_dpif
 *
oÂrŸo
, 
uöt32_t
 
odp_p‹t
)

2443  
	`gë_oÂ_p‹t
(
oÂrŸo
, 
	`odp_p‹t_to_oÂ_p‹t
(
odp_p‹t
));

2444 
	}
}

2447 
	$oÂrŸo_p‹t_‰om_dpif_p‹t
(
oÂrŸo_p‹t
 *ofproto_port,

2448 
dpif_p‹t
 *dpif_port)

2450 
oÂrŸo_p‹t
->
«me
 = 
dpif_p‹t
->name;

2451 
oÂrŸo_p‹t
->
ty≥
 = 
dpif_p‹t
->type;

2452 
oÂrŸo_p‹t
->
oÂ_p‹t
 = 
	`odp_p‹t_to_oÂ_p‹t
(
dpif_p‹t
->
p‹t_no
);

2453 
	}
}

2456 
	$p‹t_run_Á°
(
oÂ‹t_dpif
 *
oÂ‹t
)

2458 i‡(
oÂ‹t
->
cfm
 && 
	`cfm_should_£nd_ccm
(ofport->cfm)) {

2459 
oÂbuf
 
∑ckë
;

2461 
	`oÂbuf_öô
(&
∑ckë
, 0);

2462 
	`cfm_compo£_ccm
(
oÂ‹t
->
cfm
, &
∑ckë
, oÂ‹t->
up
.
µ
.
hw_addr
);

2463 
	`£nd_∑ckë
(
oÂ‹t
, &
∑ckë
);

2464 
	`oÂbuf_unöô
(&
∑ckë
);

2466 
	}
}

2469 
	$p‹t_run
(
oÂ‹t_dpif
 *
oÂ‹t
)

2471 
ˇºõr_£q
 = 
	`√tdev_gë_ˇºõr_ª£ts
(
oÂ‹t
->
up
.
√tdev
);

2472 
boﬁ
 
ˇºõr_ch™ged
 = 
ˇºõr_£q
 !
oÂ‹t
->carrier_seq;

2473 
boﬁ
 
íabÀ
 = 
	`√tdev_gë_ˇºõr
(
oÂ‹t
->
up
.
√tdev
);

2475 
oÂ‹t
->
ˇºõr_£q
 = carrier_seq;

2477 
	`p‹t_run_Á°
(
oÂ‹t
);

2478 i‡(
oÂ‹t
->
cfm
) {

2479 
cfm_›up
 = 
	`cfm_gë_›up
(
oÂ‹t
->
cfm
);

2481 
	`cfm_run
(
oÂ‹t
->
cfm
);

2482 
íabÀ
 =É«bÀ && !
	`cfm_gë_Áu…
(
oÂ‹t
->
cfm
);

2484 i‡(
cfm_›up
 >= 0) {

2485 
íabÀ
 =É«bÀ && 
cfm_›up
;

2489 i‡(
oÂ‹t
->
bundÀ
) {

2490 
íabÀ
 =É«bÀ && 
	`œ˝_¶ave_may_íabÀ
(
oÂ‹t
->
bundÀ
->
œ˝
, ofport);

2491 i‡(
ˇºõr_ch™ged
) {

2492 
	`œ˝_¶ave_ˇºõr_ch™ged
(
oÂ‹t
->
bundÀ
->
œ˝
, ofport);

2496 i‡(
oÂ‹t
->
may_íabÀ
 !
íabÀ
) {

2497 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
oÂ‹t
->
up
.ofproto);

2499 i‡(
oÂrŸo
->
has_bundÀ_a˘i⁄
) {

2500 
oÂrŸo
->
√ed_ªvÆid©e
 = 
REV_PORT_TOGGLED
;

2504 
oÂ‹t
->
may_íabÀ
 = 
íabÀ
;

2505 
	}
}

2508 
	$p‹t_waô
(
oÂ‹t_dpif
 *
oÂ‹t
)

2510 i‡(
oÂ‹t
->
cfm
) {

2511 
	`cfm_waô
(
oÂ‹t
->
cfm
);

2513 
	}
}

2516 
	$p‹t_quîy_by_«me
(c⁄° 
oÂrŸo
 *
oÂrŸo_
, c⁄° *
dev«me
,

2517 
oÂrŸo_p‹t
 *ofproto_port)

2519 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
oÂrŸo_
);

2520 
dpif_p‹t
 dpif_port;

2521 
îr‹
;

2523 
îr‹
 = 
	`dpif_p‹t_quîy_by_«me
(
oÂrŸo
->
dpif
, 
dev«me
, &
dpif_p‹t
);

2524 i‡(!
îr‹
) {

2525 
	`oÂrŸo_p‹t_‰om_dpif_p‹t
(
oÂrŸo_p‹t
, &
dpif_p‹t
);

2527  
îr‹
;

2528 
	}
}

2531 
	$p‹t_add
(
oÂrŸo
 *
oÂrŸo_
, 
√tdev
 *√tdev, 
uöt16_t
 *
oÂ_p‹ç
)

2533 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
oÂrŸo_
);

2534 
uöt16_t
 
odp_p‹t
 = 
UINT16_MAX
;

2535 
îr‹
;

2537 
îr‹
 = 
	`dpif_p‹t_add
(
oÂrŸo
->
dpif
, 
√tdev
, &
odp_p‹t
);

2538 i‡(!
îr‹
) {

2539 *
oÂ_p‹ç
 = 
	`odp_p‹t_to_oÂ_p‹t
(
odp_p‹t
);

2541  
îr‹
;

2542 
	}
}

2545 
	$p‹t_dñ
(
oÂrŸo
 *
oÂrŸo_
, 
uöt16_t
 
oÂ_p‹t
)

2547 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
oÂrŸo_
);

2548 
îr‹
;

2550 
îr‹
 = 
	`dpif_p‹t_dñ
(
oÂrŸo
->
dpif
, 
	`oÂ_p‹t_to_odp_p‹t
(
oÂ_p‹t
));

2551 i‡(!
îr‹
) {

2552 
oÂ‹t_dpif
 *
oÂ‹t
 = 
	`gë_oÂ_p‹t
(
oÂrŸo
, 
oÂ_p‹t
);

2553 i‡(
oÂ‹t
) {

2558 
	`bundÀ_ªmove
(&
oÂ‹t
->
up
);

2561  
îr‹
;

2562 
	}
}

2565 
	$p‹t_gë_°©s
(c⁄° 
oÂ‹t
 *
oÂ‹t_
, 
√tdev_°©s
 *
°©s
)

2567 
oÂ‹t_dpif
 *
oÂ‹t
 = 
	`oÂ‹t_dpif_ˇ°
(
oÂ‹t_
);

2568 
îr‹
;

2570 
îr‹
 = 
	`√tdev_gë_°©s
(
oÂ‹t
->
up
.
√tdev
, 
°©s
);

2572 i‡(!
îr‹
 && 
oÂ‹t
->
odp_p‹t
 =
OVSP_LOCAL
) {

2573 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
oÂ‹t
->
up
.ofproto);

2580 i‡(
°©s
->
rx_∑ckës
 !
UINT64_MAX
) {

2581 
°©s
->
rx_∑ckës
 +
oÂrŸo
->°©s.
tx_∑ckës
;

2584 i‡(
°©s
->
rx_byãs
 !
UINT64_MAX
) {

2585 
°©s
->
rx_byãs
 +
oÂrŸo
->°©s.
tx_byãs
;

2592 i‡(
°©s
->
tx_∑ckës
 !
UINT64_MAX
) {

2593 
°©s
->
tx_∑ckës
 +
oÂrŸo
->°©s.
rx_∑ckës
;

2596 i‡(
°©s
->
tx_byãs
 !
UINT64_MAX
) {

2597 
°©s
->
tx_byãs
 +
oÂrŸo
->°©s.
rx_byãs
;

2601  
îr‹
;

2602 
	}
}

2606 
	$oÂrŸo_upd©e_loˇl_p‹t_°©s
(c⁄° 
oÂrŸo
 *
oÂrŸo_
,

2607 
size_t
 
tx_size
, size_à
rx_size
)

2609 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
oÂrŸo_
);

2611 i‡(
rx_size
) {

2612 
oÂrŸo
->
°©s
.
rx_∑ckës
++;

2613 
oÂrŸo
->
°©s
.
rx_byãs
 +
rx_size
;

2615 i‡(
tx_size
) {

2616 
oÂrŸo
->
°©s
.
tx_∑ckës
++;

2617 
oÂrŸo
->
°©s
.
tx_byãs
 +
tx_size
;

2619 
	}
}

2621 
	sp‹t_dump_°©e
 {

2622 
dpif_p‹t_dump
 
	mdump
;

2623 
boﬁ
 
	md⁄e
;

2627 
	$p‹t_dump_°¨t
(c⁄° 
oÂrŸo
 *
oÂrŸo_
, **
°©ï
)

2629 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
oÂrŸo_
);

2630 
p‹t_dump_°©e
 *
°©e
;

2632 *
°©ï
 = 
°©e
 = 
	`xmÆloc
( *state);

2633 
	`dpif_p‹t_dump_°¨t
(&
°©e
->
dump
, 
oÂrŸo
->
dpif
);

2634 
°©e
->
d⁄e
 = 
Ál£
;

2636 
	}
}

2639 
	$p‹t_dump_√xt
(c⁄° 
oÂrŸo
 *
oÂrŸo_
 
OVS_UNUSED
, *
°©e_
,

2640 
oÂrŸo_p‹t
 *
p‹t
)

2642 
p‹t_dump_°©e
 *
°©e
 = 
°©e_
;

2643 
dpif_p‹t
 dpif_port;

2645 i‡(
	`dpif_p‹t_dump_√xt
(&
°©e
->
dump
, &
dpif_p‹t
)) {

2646 
	`oÂrŸo_p‹t_‰om_dpif_p‹t
(
p‹t
, &
dpif_p‹t
);

2649 
îr‹
 = 
	`dpif_p‹t_dump_d⁄e
(&
°©e
->
dump
);

2650 
°©e
->
d⁄e
 = 
åue
;

2651  
îr‹
 ?Éº‹ : 
EOF
;

2653 
	}
}

2656 
	$p‹t_dump_d⁄e
(c⁄° 
oÂrŸo
 *
oÂrŸo_
 
OVS_UNUSED
, *
°©e_
)

2658 
p‹t_dump_°©e
 *
°©e
 = 
°©e_
;

2660 i‡(!
°©e
->
d⁄e
) {

2661 
	`dpif_p‹t_dump_d⁄e
(&
°©e
->
dump
);

2663 
	`‰ì
(
°©e
);

2665 
	}
}

2668 
	$p‹t_pﬁl
(c⁄° 
oÂrŸo
 *
oÂrŸo_
, **
dev«mï
)

2670 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
oÂrŸo_
);

2671  
	`dpif_p‹t_pﬁl
(
oÂrŸo
->
dpif
, 
dev«mï
);

2672 
	}
}

2675 
	$p‹t_pﬁl_waô
(c⁄° 
oÂrŸo
 *
oÂrŸo_
)

2677 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
oÂrŸo_
);

2678 
	`dpif_p‹t_pﬁl_waô
(
oÂrŸo
->
dpif
);

2679 
	}
}

2682 
	$p‹t_is_œ˝_cuºít
(c⁄° 
oÂ‹t
 *
oÂ‹t_
)

2684 c⁄° 
oÂ‹t_dpif
 *
oÂ‹t
 = 
	`oÂ‹t_dpif_ˇ°
(
oÂ‹t_
);

2685  (
oÂ‹t
->
bundÀ
 && oÂ‹t->bundÀ->
œ˝


2686 ? 
	`œ˝_¶ave_is_cuºít
(
oÂ‹t
->
bundÀ
->
œ˝
, ofport)

2688 
	}
}

2701 
	sÊow_miss
 {

2702 
hm≠_node
 
	mhm≠_node
;

2703 
Êow
 
	mÊow
;

2704 
odp_key_fô√ss
 
	mkey_fô√ss
;

2705 c⁄° 
∆©å
 *
	mkey
;

2706 
size_t
 
	mkey_Àn
;

2707 
ovs_be16
 
	möôül_tci
;

2708 
li°
 
	m∑ckës
;

2709 
dpif_upˇŒ_ty≥
 
	mupˇŒ_ty≥
;

2712 
	sÊow_miss_›
 {

2713 
dpif_›
 
	mdpif_›
;

2714 
subÁ˚t
 *
	msubÁ˚t
;

2715 *
	mg¨bage
;

2716 
uöt64_t
 
	m°ub
[1024 / 8];

2723 
	$£nd_∑ckë_ö_miss
(
oÂrŸo_dpif
 *
oÂrŸo
, c⁄° 
oÂbuf
 *
∑ckë
,

2724 c⁄° 
Êow
 *flow)

2726 
oÂutû_∑ckë_ö
 
pö
;

2728 
pö
.
∑ckë
 =Öackë->
d©a
;

2729 
pö
.
∑ckë_Àn
 = 
∑ckë
->
size
;

2730 
pö
.
ªas⁄
 = 
OFPR_NO_MATCH
;

2731 
pö
.
c⁄åﬁÀr_id
 = 0;

2733 
pö
.
èbÀ_id
 = 0;

2734 
pö
.
cookõ
 = 0;

2736 
pö
.
£nd_Àn
 = 0;

2738 
	`Êow_gë_mëad©a
(
Êow
, &
pö
.
fmd
);

2740 
	`c⁄nmgr_£nd_∑ckë_ö
(
oÂrŸo
->
up
.
c⁄nmgr
, &
pö
);

2741 
	}
}

2743 
¶ow_∑th_ªas⁄


2744 
	$¥o˚ss_•ecül
(
oÂrŸo_dpif
 *
oÂrŸo
, c⁄° 
Êow
 *flow,

2745 c⁄° 
oÂbuf
 *
∑ckë
)

2747 
oÂ‹t_dpif
 *
oÂ‹t
 = 
	`gë_oÂ_p‹t
(
oÂrŸo
, 
Êow
->
ö_p‹t
);

2749 i‡(!
oÂ‹t
) {

2753 i‡(
oÂ‹t
->
cfm
 && 
	`cfm_should_¥o˚ss_Êow
(oÂ‹t->cfm, 
Êow
)) {

2754 i‡(
∑ckë
) {

2755 
	`cfm_¥o˚ss_hóπbót
(
oÂ‹t
->
cfm
, 
∑ckë
);

2757  
SLOW_CFM
;

2758 } i‡(
oÂ‹t
->
bundÀ
 && oÂ‹t->bundÀ->
œ˝


2759 && 
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_LACP
)) {

2760 i‡(
∑ckë
) {

2761 
	`œ˝_¥o˚ss_∑ckë
(
oÂ‹t
->
bundÀ
->
œ˝
, oÂ‹t, 
∑ckë
);

2763  
SLOW_LACP
;

2764 } i‡(
oÂrŸo
->
°p
 && 
	`°p_should_¥o˚ss_Êow
(
Êow
)) {

2765 i‡(
∑ckë
) {

2766 
	`°p_¥o˚ss_∑ckë
(
oÂ‹t
, 
∑ckë
);

2768  
SLOW_STP
;

2771 
	}
}

2773 
Êow_miss
 *

2774 
	$Êow_miss_föd
(
hm≠
 *
todo
, c⁄° 
Êow
 *Êow, 
uöt32_t
 
hash
)

2776 
Êow_miss
 *
miss
;

2778 
	`HMAP_FOR_EACH_WITH_HASH
 (
miss
, 
hm≠_node
, 
hash
, 
todo
) {

2779 i‡(
	`Êow_equÆ
(&
miss
->
Êow
, flow)) {

2780  
miss
;

2784  
NULL
;

2785 
	}
}

2793 
	$öô_Êow_miss_execuã_›
(
Êow_miss
 *
miss
, 
oÂbuf
 *
∑ckë
,

2794 
Êow_miss_›
 *
›
)

2796 i‡(
miss
->
Êow
.
vœn_tci
 !miss->
öôül_tci
) {

2803 
	`ëh_p›_vœn
(
∑ckë
);

2806 
›
->
subÁ˚t
 = 
NULL
;

2807 
›
->
g¨bage
 = 
NULL
;

2808 
›
->
dpif_›
.
ty≥
 = 
DPIF_OP_EXECUTE
;

2809 
›
->
dpif_›
.
u
.
execuã
.
key
 = 
miss
->key;

2810 
›
->
dpif_›
.
u
.
execuã
.
key_Àn
 = 
miss
->key_len;

2811 
›
->
dpif_›
.
u
.
execuã
.
∑ckë
 =Öacket;

2812 
	}
}

2817 
	$h™dÀ_Êow_miss_comm⁄
(
ruÀ_dpif
 *
ruÀ
,

2818 
oÂbuf
 *
∑ckë
, c⁄° 
Êow
 *flow)

2820 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
ruÀ
->
up
.ofproto);

2822 
oÂrŸo
->
n_m©ches
++;

2824 i‡(
ruÀ
->
up
.
¸
.
¥i‹ôy
 =
FAIL_OPEN_PRIORITY
) {

2835 
	`£nd_∑ckë_ö_miss
(
oÂrŸo
, 
∑ckë
, 
Êow
);

2837 
	}
}

2845 
boﬁ


2846 
	$Êow_miss_should_make_Á˚t
(
oÂrŸo_dpif
 *
oÂrŸo
,

2847 
Êow_miss
 *
miss
, 
uöt32_t
 
hash
)

2849 i‡(!
oÂrŸo
->
govîn‹
) {

2850 
size_t
 
n_subÁ˚ts
;

2852 
n_subÁ˚ts
 = 
	`hm≠_cou¡
(&
oÂrŸo
->
subÁ˚ts
);

2853 i‡(
n_subÁ˚ts
 * 2 <
oÂrŸo
->
up
.
Êow_evi˘i⁄_thªshﬁd
) {

2854  
åue
;

2857 
oÂrŸo
->
govîn‹
 = 
	`govîn‹_¸óã
(oÂrŸo->
up
.
«me
);

2860  
	`govîn‹_should_ö°Æl_Êow
(
oÂrŸo
->
govîn‹
, 
hash
,

2861 
	`li°_size
(&
miss
->
∑ckës
));

2862 
	}
}

2868 
	$h™dÀ_Êow_miss_wôhout_Á˚t
(
Êow_miss
 *
miss
,

2869 
ruÀ_dpif
 *
ruÀ
,

2870 
Êow_miss_›
 *
›s
, 
size_t
 *
n_›s
)

2872 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
ruÀ
->
up
.ofproto);

2873 
now
 = 
	`time_m£c
();

2874 
a˘i⁄_xœã_˘x
 
˘x
;

2875 
oÂbuf
 *
∑ckë
;

2877 
	`LIST_FOR_EACH
 (
∑ckë
, 
li°_node
, &
miss
->
∑ckës
) {

2878 
Êow_miss_›
 *
›
 = &
›s
[*
n_›s
];

2879 
dpif_Êow_°©s
 
°©s
;

2880 
oÂbuf
 
odp_a˘i⁄s
;

2882 
	`COVERAGE_INC
(
Á˚t_suµªss
);

2884 
	`oÂbuf_u£_°ub
(&
odp_a˘i⁄s
, 
›
->
°ub
,  op->stub);

2886 
	`dpif_Êow_°©s_exåa˘
(&
miss
->
Êow
, 
∑ckë
, 
now
, &
°©s
);

2887 
	`ruÀ_¸edô_°©s
(
ruÀ
, &
°©s
);

2889 
	`a˘i⁄_xœã_˘x_öô
(&
˘x
, 
oÂrŸo
, &
miss
->
Êow
, miss->
öôül_tci
,

2890 
ruÀ
, 0, 
∑ckë
);

2891 
˘x
.
ªsubmô_°©s
 = &
°©s
;

2892 
	`xœã_a˘i⁄s
(&
˘x
, 
ruÀ
->
up
.
oÂa˘s
,ÑuÀ->up.
oÂa˘s_Àn
,

2893 &
odp_a˘i⁄s
);

2895 i‡(
odp_a˘i⁄s
.
size
) {

2896 
dpif_execuã
 *
execuã
 = &
›
->
dpif_›
.
u
.execute;

2898 
	`öô_Êow_miss_execuã_›
(
miss
, 
∑ckë
, 
›
);

2899 
execuã
->
a˘i⁄s
 = 
odp_a˘i⁄s
.
d©a
;

2900 
execuã
->
a˘i⁄s_Àn
 = 
odp_a˘i⁄s
.
size
;

2901 
›
->
g¨bage
 = 
	`oÂbuf_gë_unöô_poöãr
(&
odp_a˘i⁄s
);

2903 (*
n_›s
)++;

2905 
	`oÂbuf_unöô
(&
odp_a˘i⁄s
);

2908 
	}
}

2920 
	$h™dÀ_Êow_miss_wôh_Á˚t
(
Êow_miss
 *
miss
, 
Á˚t
 *facet,

2921 
now
,

2922 
Êow_miss_›
 *
›s
, 
size_t
 *
n_›s
)

2924 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
Á˚t
->
ruÀ
->
up
.ofproto);

2925 
subÁ˚t_∑th
 
w™t_∑th
;

2926 
subÁ˚t
 *subfacet;

2927 
oÂbuf
 *
∑ckë
;

2929 
subÁ˚t
 = 
	`subÁ˚t_¸óã
(
Á˚t
,

2930 
miss
->
key_fô√ss
, miss->
key
, miss->
key_Àn
,

2931 
miss
->
öôül_tci
, 
now
);

2933 
	`LIST_FOR_EACH
 (
∑ckë
, 
li°_node
, &
miss
->
∑ckës
) {

2934 
Êow_miss_›
 *
›
 = &
›s
[*
n_›s
];

2935 
dpif_Êow_°©s
 
°©s
;

2936 
oÂbuf
 
odp_a˘i⁄s
;

2938 
	`h™dÀ_Êow_miss_comm⁄
(
Á˚t
->
ruÀ
, 
∑ckë
, &
miss
->
Êow
);

2940 
	`oÂbuf_u£_°ub
(&
odp_a˘i⁄s
, 
›
->
°ub
,  op->stub);

2941 i‡(!
subÁ˚t
->
a˘i⁄s
 || subÁ˚t->
¶ow
) {

2942 
	`subÁ˚t_make_a˘i⁄s
(
subÁ˚t
, 
∑ckë
, &
odp_a˘i⁄s
);

2945 
	`dpif_Êow_°©s_exåa˘
(&
Á˚t
->
Êow
, 
∑ckë
, 
now
, &
°©s
);

2946 
	`subÁ˚t_upd©e_°©s
(
subÁ˚t
, &
°©s
);

2948 i‡(
subÁ˚t
->
a˘i⁄s_Àn
) {

2949 
dpif_execuã
 *
execuã
 = &
›
->
dpif_›
.
u
.execute;

2951 
	`öô_Êow_miss_execuã_›
(
miss
, 
∑ckë
, 
›
);

2952 
›
->
subÁ˚t
 = subfacet;

2953 i‡(!
subÁ˚t
->
¶ow
) {

2954 
execuã
->
a˘i⁄s
 = 
subÁ˚t
->actions;

2955 
execuã
->
a˘i⁄s_Àn
 = 
subÁ˚t
->actions_len;

2956 
	`oÂbuf_unöô
(&
odp_a˘i⁄s
);

2958 
execuã
->
a˘i⁄s
 = 
odp_a˘i⁄s
.
d©a
;

2959 
execuã
->
a˘i⁄s_Àn
 = 
odp_a˘i⁄s
.
size
;

2960 
›
->
g¨bage
 = 
	`oÂbuf_gë_unöô_poöãr
(&
odp_a˘i⁄s
);

2963 (*
n_›s
)++;

2965 
	`oÂbuf_unöô
(&
odp_a˘i⁄s
);

2969 
w™t_∑th
 = 
	`subÁ˚t_w™t_∑th
(
subÁ˚t
->
¶ow
);

2970 i‡(
miss
->
upˇŒ_ty≥
 =
DPIF_UC_MISS
 || 
subÁ˚t
->
∑th
 !
w™t_∑th
) {

2971 
Êow_miss_›
 *
›
 = &
›s
[(*
n_›s
)++];

2972 
dpif_Êow_put
 *
put
 = &
›
->
dpif_›
.
u
.
Êow_put
;

2974 
›
->
subÁ˚t
 = subfacet;

2975 
›
->
g¨bage
 = 
NULL
;

2976 
›
->
dpif_›
.
ty≥
 = 
DPIF_OP_FLOW_PUT
;

2977 
put
->
Êags
 = 
DPIF_FP_CREATE
 | 
DPIF_FP_MODIFY
;

2978 
put
->
key
 = 
miss
->key;

2979 
put
->
key_Àn
 = 
miss
->key_len;

2980 i‡(
w™t_∑th
 =
SF_FAST_PATH
) {

2981 
put
->
a˘i⁄s
 = 
subÁ˚t
->actions;

2982 
put
->
a˘i⁄s_Àn
 = 
subÁ˚t
->actions_len;

2984 
	`compo£_¶ow_∑th
(
oÂrŸo
, &
Á˚t
->
Êow
, 
subÁ˚t
->
¶ow
,

2985 
›
->
°ub
,  op->stub,

2986 &
put
->
a˘i⁄s
, &put->
a˘i⁄s_Àn
);

2988 
put
->
°©s
 = 
NULL
;

2990 
	}
}

2995 
	$h™dÀ_Êow_miss
(
oÂrŸo_dpif
 *
oÂrŸo
, 
Êow_miss
 *
miss
,

2996 
Êow_miss_›
 *
›s
, 
size_t
 *
n_›s
)

2998 
Á˚t
 *facet;

2999 
now
;

3000 
uöt32_t
 
hash
;

3004 
hash
 = 
miss
->
hm≠_node
.hash;

3006 
Á˚t
 = 
	`Á˚t_lookup_vÆid
(
oÂrŸo
, &
miss
->
Êow
, 
hash
);

3007 i‡(!
Á˚t
) {

3008 
ruÀ_dpif
 *
ruÀ
 = 
	`ruÀ_dpif_lookup
(
oÂrŸo
, &
miss
->
Êow
);

3010 i‡(!
	`Êow_miss_should_make_Á˚t
(
oÂrŸo
, 
miss
, 
hash
)) {

3011 
	`h™dÀ_Êow_miss_wôhout_Á˚t
(
miss
, 
ruÀ
, 
›s
, 
n_›s
);

3015 
Á˚t
 = 
	`Á˚t_¸óã
(
ruÀ
, &
miss
->
Êow
, 
hash
);

3016 
now
 = 
Á˚t
->
u£d
;

3018 
now
 = 
	`time_m£c
();

3020 
	`h™dÀ_Êow_miss_wôh_Á˚t
(
miss
, 
Á˚t
, 
now
, 
›s
, 
n_›s
);

3021 
	}
}

3039 
odp_key_fô√ss


3040 
	$oÂrŸo_dpif_exåa˘_Êow_key
(c⁄° 
oÂrŸo_dpif
 *
oÂrŸo
,

3041 c⁄° 
∆©å
 *
key
, 
size_t
 
key_Àn
,

3042 
Êow
 *Êow, 
ovs_be16
 *
öôül_tci
,

3043 
oÂbuf
 *
∑ckë
)

3045 
odp_key_fô√ss
 
fô√ss
;

3047 
fô√ss
 = 
	`odp_Êow_key_to_Êow
(
key
, 
key_Àn
, 
Êow
);

3048 i‡(
fô√ss
 =
ODP_FIT_ERROR
) {

3049  
fô√ss
;

3051 *
öôül_tci
 = 
Êow
->
vœn_tci
;

3053 i‡(
	`v•_adju°_Êow
(
oÂrŸo
, 
Êow
)) {

3054 i‡(
∑ckë
) {

3069 
	`ëh_push_vœn
(
∑ckë
, 
Êow
->
vœn_tci
);

3073 i‡(
fô√ss
 =
ODP_FIT_PERFECT
) {

3074 
fô√ss
 = 
ODP_FIT_TOO_MUCH
;

3078  
fô√ss
;

3079 
	}
}

3082 
	$h™dÀ_miss_upˇŒs
(
oÂrŸo_dpif
 *
oÂrŸo
, 
dpif_upˇŒ
 *
upˇŒs
,

3083 
size_t
 
n_upˇŒs
)

3085 
dpif_upˇŒ
 *
upˇŒ
;

3086 
Êow_miss
 *
miss
;

3087 
Êow_miss
 
mis£s
[
FLOW_MISS_MAX_BATCH
];

3088 
Êow_miss_›
 
Êow_miss_›s
[
FLOW_MISS_MAX_BATCH
 * 2];

3089 
dpif_›
 *
dpif_›s
[
FLOW_MISS_MAX_BATCH
 * 2];

3090 
hm≠
 
todo
;

3091 
n_mis£s
;

3092 
size_t
 
n_›s
;

3093 
size_t
 
i
;

3095 i‡(!
n_upˇŒs
) {

3104 
	`hm≠_öô
(&
todo
);

3105 
n_mis£s
 = 0;

3106 
upˇŒ
 = 
upˇŒs
; upˇŒ < &upˇŒs[
n_upˇŒs
]; upcall++) {

3107 
Êow_miss
 *
miss
 = &
mis£s
[
n_mis£s
];

3108 
Êow_miss
 *
exi°ög_miss
;

3109 
Êow
 flow;

3110 
uöt32_t
 
hash
;

3114 
miss
->
key_fô√ss
 = 
	`oÂrŸo_dpif_exåa˘_Êow_key
(

3115 
oÂrŸo
, 
upˇŒ
->
key
, upˇŒ->
key_Àn
,

3116 &
Êow
, &
miss
->
öôül_tci
, 
upˇŒ
->
∑ckë
);

3117 i‡(
miss
->
key_fô√ss
 =
ODP_FIT_ERROR
) {

3120 
	`Êow_exåa˘
(
upˇŒ
->
∑ckë
, 
Êow
.
skb_¥i‹ôy
, flow.
skb_m¨k
,

3121 &
Êow
.
tu¬ñ
, flow.
ö_p‹t
, &
miss
->flow);

3124 
hash
 = 
	`Êow_hash
(&
miss
->
Êow
, 0);

3125 
exi°ög_miss
 = 
	`Êow_miss_föd
(&
todo
, &
miss
->
Êow
, 
hash
);

3126 i‡(!
exi°ög_miss
) {

3127 
	`hm≠_ö£π
(&
todo
, &
miss
->
hm≠_node
, 
hash
);

3128 
miss
->
key
 = 
upˇŒ
->key;

3129 
miss
->
key_Àn
 = 
upˇŒ
->key_len;

3130 
miss
->
upˇŒ_ty≥
 = 
upˇŒ
->
ty≥
;

3131 
	`li°_öô
(&
miss
->
∑ckës
);

3133 
n_mis£s
++;

3135 
miss
 = 
exi°ög_miss
;

3137 
	`li°_push_back
(&
miss
->
∑ckës
, &
upˇŒ
->
∑ckë
->
li°_node
);

3142 
n_›s
 = 0;

3143 
	`HMAP_FOR_EACH
 (
miss
, 
hm≠_node
, &
todo
) {

3144 
	`h™dÀ_Êow_miss
(
oÂrŸo
, 
miss
, 
Êow_miss_›s
, &
n_›s
);

3146 
	`as£π
(
n_›s
 <
	`ARRAY_SIZE
(
Êow_miss_›s
));

3149 
i
 = 0; i < 
n_›s
; i++) {

3150 
dpif_›s
[
i
] = &
Êow_miss_›s
[i].
dpif_›
;

3152 
	`dpif_›î©e
(
oÂrŸo
->
dpif
, 
dpif_›s
, 
n_›s
);

3155 
i
 = 0; i < 
n_›s
; i++) {

3156 
Êow_miss_›
 *
›
 = &
Êow_miss_›s
[
i
];

3158 
›
->
dpif_›
.
ty≥
) {

3159 
DPIF_OP_EXECUTE
:

3162 
DPIF_OP_FLOW_PUT
:

3163 i‡(!
›
->
dpif_›
.
îr‹
) {

3164 
›
->
subÁ˚t
->
∑th
 = 
	`subÁ˚t_w™t_∑th
(›->subÁ˚t->
¶ow
);

3168 
DPIF_OP_FLOW_DEL
:

3169 
	`NOT_REACHED
();

3172 
	`‰ì
(
›
->
g¨bage
);

3174 
	`hm≠_de°roy
(&
todo
);

3175 
	}
}

3177 íum { 
	mSFLOW_UPCALL
, 
	mMISS_UPCALL
, 
	mBAD_UPCALL
 }

3178 
	$˛assify_upˇŒ
(c⁄° 
dpif_upˇŒ
 *
upˇŒ
)

3180 
u£r_a˘i⁄_cookõ
 
cookõ
;

3183 
upˇŒ
->
ty≥
) {

3184 
DPIF_UC_ACTION
:

3187 
DPIF_UC_MISS
:

3188  
MISS_UPCALL
;

3190 
DPIF_N_UC_TYPES
:

3192 
	`VLOG_WARN_RL
(&
æ
, "upˇŒ ha†u√x≥˘edÅy≥ %"
PRIu32
, 
upˇŒ
->
ty≥
);

3193  
BAD_UPCALL
;

3197 
	`mem˝y
(&
cookõ
, &
upˇŒ
->
u£rd©a
, (cookie));

3198 
cookõ
.
ty≥
) {

3199 
USER_ACTION_COOKIE_SFLOW
:

3200  
SFLOW_UPCALL
;

3202 
USER_ACTION_COOKIE_SLOW_PATH
:

3203  
MISS_UPCALL
;

3205 
USER_ACTION_COOKIE_UNSPEC
:

3207 
	`VLOG_WARN_RL
(&
æ
, "övÆid u£∏cookõ : 0x%"
PRIx64
, 
upˇŒ
->
u£rd©a
);

3208  
BAD_UPCALL
;

3210 
	}
}

3213 
	$h™dÀ_sÊow_upˇŒ
(
oÂrŸo_dpif
 *
oÂrŸo
,

3214 c⁄° 
dpif_upˇŒ
 *
upˇŒ
)

3216 
u£r_a˘i⁄_cookõ
 
cookõ
;

3217 
odp_key_fô√ss
 
fô√ss
;

3218 
ovs_be16
 
öôül_tci
;

3219 
Êow
 flow;

3221 
fô√ss
 = 
	`oÂrŸo_dpif_exåa˘_Êow_key
(
oÂrŸo
, 
upˇŒ
->
key
,

3222 
upˇŒ
->
key_Àn
, &
Êow
,

3223 &
öôül_tci
, 
upˇŒ
->
∑ckë
);

3224 i‡(
fô√ss
 =
ODP_FIT_ERROR
) {

3228 
	`mem˝y
(&
cookõ
, &
upˇŒ
->
u£rd©a
, (cookie));

3229 
	`dpif_sÊow_ª˚ived
(
oÂrŸo
->
sÊow
, 
upˇŒ
->
∑ckë
, &
Êow
, &
cookõ
);

3230 
	}
}

3233 
	$h™dÀ_upˇŒs
(
oÂrŸo_dpif
 *
oÂrŸo
, 
max_b©ch
)

3235 
dpif_upˇŒ
 
mis£s
[
FLOW_MISS_MAX_BATCH
];

3236 
oÂbuf
 
miss_bufs
[
FLOW_MISS_MAX_BATCH
];

3237 
uöt64_t
 
miss_buf_°ubs
[
FLOW_MISS_MAX_BATCH
][4096 / 8];

3238 
n_¥o˚s£d
;

3239 
n_mis£s
;

3240 
i
;

3242 
	`as£π
(
max_b©ch
 <
FLOW_MISS_MAX_BATCH
);

3244 
n_mis£s
 = 0;

3245 
n_¥o˚s£d
 = 0;Ç_¥o˚s£d < 
max_b©ch
;Ç_processed++) {

3246 
dpif_upˇŒ
 *
upˇŒ
 = &
mis£s
[
n_mis£s
];

3247 
oÂbuf
 *
buf
 = &
miss_bufs
[
n_mis£s
];

3248 
îr‹
;

3250 
	`oÂbuf_u£_°ub
(
buf
, 
miss_buf_°ubs
[
n_mis£s
],

3251  
miss_buf_°ubs
[
n_mis£s
]);

3252 
îr‹
 = 
	`dpif_ªcv
(
oÂrŸo
->
dpif
, 
upˇŒ
, 
buf
);

3253 i‡(
îr‹
) {

3254 
	`oÂbuf_unöô
(
buf
);

3258 
	`˛assify_upˇŒ
(
upˇŒ
)) {

3259 
MISS_UPCALL
:

3261 
n_mis£s
++;

3264 
SFLOW_UPCALL
:

3265 i‡(
oÂrŸo
->
sÊow
) {

3266 
	`h™dÀ_sÊow_upˇŒ
(
oÂrŸo
, 
upˇŒ
);

3268 
	`oÂbuf_unöô
(
buf
);

3271 
BAD_UPCALL
:

3272 
	`oÂbuf_unöô
(
buf
);

3278 
	`h™dÀ_miss_upˇŒs
(
oÂrŸo
, 
mis£s
, 
n_mis£s
);

3279 
i
 = 0; i < 
n_mis£s
; i++) {

3280 
	`oÂbuf_unöô
(&
miss_bufs
[
i
]);

3283  
n_¥o˚s£d
;

3284 
	}
}

3288 
subÁ˚t_max_idÀ
(c⁄° 
oÂrŸo_dpif
 *);

3289 
upd©e_°©s
(
oÂrŸo_dpif
 *);

3290 
ruÀ_expúe
(
ruÀ_dpif
 *);

3291 
expúe_subÁ˚ts
(
oÂrŸo_dpif
 *, 
dp_max_idÀ
);

3300 
	$expúe
(
oÂrŸo_dpif
 *
oÂrŸo
)

3302 
ruÀ_dpif
 *
ruÀ
, *
√xt_ruÀ
;

3303 
o·abÀ
 *
èbÀ
;

3304 
dp_max_idÀ
;

3307 
	`upd©e_°©s
(
oÂrŸo
);

3310 
dp_max_idÀ
 = 
	`subÁ˚t_max_idÀ
(
oÂrŸo
);

3311 
	`expúe_subÁ˚ts
(
oÂrŸo
, 
dp_max_idÀ
);

3314 
	`OFPROTO_FOR_EACH_TABLE
 (
èbÀ
, &
oÂrŸo
->
up
) {

3315 
˛s_curs‹
 
curs‹
;

3317 
	`˛s_curs‹_öô
(&
curs‹
, &
èbÀ
->
˛s
, 
NULL
);

3318 
	`CLS_CURSOR_FOR_EACH_SAFE
 (
ruÀ
, 
√xt_ruÀ
, 
up
.
¸
, &
curs‹
) {

3319 
	`ruÀ_expúe
(
ruÀ
);

3325 i‡(
oÂrŸo
->
has_b⁄ded_bundÀs
) {

3326 
ofbundÀ
 *
bundÀ
;

3328 
	`HMAP_FOR_EACH
 (
bundÀ
, 
hm≠_node
, &
oÂrŸo
->
bundÀs
) {

3329 i‡(
bundÀ
->
b⁄d
) {

3330 
	`b⁄d_ªbÆ™˚
(
bundÀ
->
b⁄d
, &
oÂrŸo
->
ªvÆid©e_£t
);

3335  
	`MIN
(
dp_max_idÀ
, 1000);

3336 
	}
}

3341 
	$upd©e_subÁ˚t_°©s
(
subÁ˚t
 *subfacet,

3342 c⁄° 
dpif_Êow_°©s
 *
°©s
)

3344 
Á˚t
 *Á˚à
subÁ˚t
->facet;

3346 i‡(
°©s
->
n_∑ckës
 >
subÁ˚t
->
dp_∑ckë_cou¡
) {

3347 
uöt64_t
 
exåa
 = 
°©s
->
n_∑ckës
 - 
subÁ˚t
->
dp_∑ckë_cou¡
;

3348 
Á˚t
->
∑ckë_cou¡
 +
exåa
;

3350 
	`VLOG_WARN_RL
(&
æ
, "unexpectedÖacket count fromÅhe datapath");

3353 i‡(
°©s
->
n_byãs
 >
subÁ˚t
->
dp_byã_cou¡
) {

3354 
Á˚t
->
byã_cou¡
 +
°©s
->
n_byãs
 - 
subÁ˚t
->
dp_byã_cou¡
;

3356 
	`VLOG_WARN_RL
(&
æ
, "unexpected byte count from datapath");

3359 
subÁ˚t
->
dp_∑ckë_cou¡
 = 
°©s
->
n_∑ckës
;

3360 
subÁ˚t
->
dp_byã_cou¡
 = 
°©s
->
n_byãs
;

3362 
Á˚t
->
t˝_Êags
 |
°©s
->tcp_flags;

3364 
	`subÁ˚t_upd©e_time
(
subÁ˚t
, 
°©s
->
u£d
);

3365 i‡(
Á˚t
->
accou¡ed_byãs
 < fa˚t->
byã_cou¡
) {

3366 
	`Á˚t_À¨n
(
Á˚t
);

3367 
	`Á˚t_accou¡
(
Á˚t
);

3368 
Á˚t
->
accou¡ed_byãs
 = fa˚t->
byã_cou¡
;

3370 
	`Á˚t_push_°©s
(
Á˚t
);

3371 
	}
}

3376 
	$dñëe_u√x≥˘ed_Êow
(
dpif
 *dpif,

3377 c⁄° 
∆©å
 *
key
, 
size_t
 
key_Àn
)

3379 i‡(!
	`VLOG_DROP_WARN
(&
æ
)) {

3380 
ds
 
s
;

3382 
	`ds_öô
(&
s
);

3383 
	`odp_Êow_key_f‹m©
(
key
, 
key_Àn
, &
s
);

3384 
	`VLOG_WARN
("u√x≥˘ed flow from d©≠©h %s", 
	`ds_c°r
(&
s
));

3385 
	`ds_de°roy
(&
s
);

3388 
	`COVERAGE_INC
(
Á˚t_u√x≥˘ed
);

3389 
	`dpif_Êow_dñ
(
dpif
, 
key
, 
key_Àn
, 
NULL
);

3390 
	}
}

3404 
	$upd©e_°©s
(
oÂrŸo_dpif
 *
p
)

3406 c⁄° 
dpif_Êow_°©s
 *
°©s
;

3407 
dpif_Êow_dump
 
dump
;

3408 c⁄° 
∆©å
 *
key
;

3409 
size_t
 
key_Àn
;

3411 
	`dpif_Êow_dump_°¨t
(&
dump
, 
p
->
dpif
);

3412 
	`dpif_Êow_dump_√xt
(&
dump
, &
key
, &
key_Àn
, 
NULL
, NULL, &
°©s
)) {

3413 
subÁ˚t
 *subfacet;

3415 
subÁ˚t
 = 
	`subÁ˚t_föd
(
p
, 
key
, 
key_Àn
);

3416 
subÁ˚t
 ? subÁ˚t->
∑th
 : 
SF_NOT_INSTALLED
) {

3417 
SF_FAST_PATH
:

3418 
	`upd©e_subÁ˚t_°©s
(
subÁ˚t
, 
°©s
);

3421 
SF_SLOW_PATH
:

3425 
SF_NOT_INSTALLED
:

3427 
	`dñëe_u√x≥˘ed_Êow
(
p
->
dpif
, 
key
, 
key_Àn
);

3431 
	`dpif_Êow_dump_d⁄e
(&
dump
);

3432 
	}
}

3439 
	$subÁ˚t_max_idÀ
(c⁄° 
oÂrŸo_dpif
 *
oÂrŸo
)

3472 íum { 
BUCKET_WIDTH
 = 
	`ROUND_UP
(100, 
TIME_UPDATE_INTERVAL
) };

3473 íum { 
N_BUCKETS
 = 5000 / 
BUCKET_WIDTH
 };

3474 
buckës
[
N_BUCKETS
] = { 0 };

3475 
tŸÆ
, 
subtŸÆ
, 
buckë
;

3476 
subÁ˚t
 *subfacet;

3477 
now
;

3478 
i
;

3480 
tŸÆ
 = 
	`hm≠_cou¡
(&
oÂrŸo
->
subÁ˚ts
);

3481 i‡(
tŸÆ
 <
oÂrŸo
->
up
.
Êow_evi˘i⁄_thªshﬁd
) {

3482  
N_BUCKETS
 * 
BUCKET_WIDTH
;

3486 
now
 = 
	`time_m£c
();

3487 
	`HMAP_FOR_EACH
 (
subÁ˚t
, 
hm≠_node
, &
oÂrŸo
->
subÁ˚ts
) {

3488 
idÀ
 = 
now
 - 
subÁ˚t
->
u£d
;

3489 
buckë
 = (
idÀ
 <= 0 ? 0

3490 : 
idÀ
 >
BUCKET_WIDTH
 * 
N_BUCKETS
 ? N_BUCKETS - 1

3491 : (Ë
idÀ
 / 
BUCKET_WIDTH
);

3492 
buckës
[
buckë
]++;

3496 
subtŸÆ
 = 
buckë
 = 0;

3498 
subtŸÆ
 +
buckës
[
buckë
++];

3499 } 
buckë
 < 
N_BUCKETS
 &&

3500 
subtŸÆ
 < 
	`MAX
(
oÂrŸo
->
up
.
Êow_evi˘i⁄_thªshﬁd
, 
tŸÆ
 / 100));

3502 i‡(
	`VLOG_IS_DBG_ENABLED
()) {

3503 
ds
 
s
;

3505 
	`ds_öô
(&
s
);

3506 
	`ds_put_c°r
(&
s
, "keep");

3507 
i
 = 0; i < 
N_BUCKETS
; i++) {

3508 i‡(
i
 =
buckë
) {

3509 
	`ds_put_c°r
(&
s
, ", drop");

3511 i‡(
buckës
[
i
]) {

3512 
	`ds_put_f‹m©
(&
s
, " %d:%d", 
i
 * 
BUCKET_WIDTH
, 
buckës
[i]);

3515 
	`VLOG_INFO
("%s: %†(m£c:cou¡)", 
oÂrŸo
->
up
.
«me
, 
	`ds_c°r
(&
s
));

3516 
	`ds_de°roy
(&
s
);

3519  
buckë
 * 
BUCKET_WIDTH
;

3520 
	}
}

3522 íum { 
	mEXPIRE_MAX_BATCH
 = 50 };

3525 
	$expúe_b©ch
(
oÂrŸo_dpif
 *
oÂrŸo
, 
subÁ˚t
 **
subÁ˚ts
, 
n
)

3527 
odputû_keybuf
 
keybufs
[
EXPIRE_MAX_BATCH
];

3528 
dpif_›
 
›s
[
EXPIRE_MAX_BATCH
];

3529 
dpif_›
 *
›•
[
EXPIRE_MAX_BATCH
];

3530 
oÂbuf
 
keys
[
EXPIRE_MAX_BATCH
];

3531 
dpif_Êow_°©s
 
°©s
[
EXPIRE_MAX_BATCH
];

3532 
i
;

3534 
i
 = 0; i < 
n
; i++) {

3535 
›s
[
i
].
ty≥
 = 
DPIF_OP_FLOW_DEL
;

3536 
	`subÁ˚t_gë_key
(
subÁ˚ts
[
i
], &
keybufs
[i], &
keys
[i]);

3537 
›s
[
i
].
u
.
Êow_dñ
.
key
 = 
keys
[i].
d©a
;

3538 
›s
[
i
].
u
.
Êow_dñ
.
key_Àn
 = 
keys
[i].
size
;

3539 
›s
[
i
].
u
.
Êow_dñ
.
°©s
 = &stats[i];

3540 
›•
[
i
] = &
›s
[i];

3543 
	`dpif_›î©e
(
oÂrŸo
->
dpif
, 
›•
, 
n
);

3544 
i
 = 0; i < 
n
; i++) {

3545 
	`subÁ˚t_ª£t_dp_°©s
(
subÁ˚ts
[
i
], &
°©s
[i]);

3546 
subÁ˚ts
[
i
]->
∑th
 = 
SF_NOT_INSTALLED
;

3547 
	`subÁ˚t_de°roy
(
subÁ˚ts
[
i
]);

3549 
	}
}

3552 
	$expúe_subÁ˚ts
(
oÂrŸo_dpif
 *
oÂrŸo
, 
dp_max_idÀ
)

3555 
n‹mÆ_cutoff
 = 
	`time_m£c
(Ë- 
dp_max_idÀ
;

3559 
•ecül_cutoff
 = 
	`time_m£c
() - 10000;

3561 
subÁ˚t
 *subÁ˚t, *
√xt_subÁ˚t
;

3562 
subÁ˚t
 *
b©ch
[
EXPIRE_MAX_BATCH
];

3563 
n_b©ch
;

3565 
n_b©ch
 = 0;

3566 
	`HMAP_FOR_EACH_SAFE
 (
subÁ˚t
, 
√xt_subÁ˚t
, 
hm≠_node
,

3567 &
oÂrŸo
->
subÁ˚ts
) {

3568 
cutoff
;

3570 
cutoff
 = (
subÁ˚t
->
¶ow
 & (
SLOW_CFM
 | 
SLOW_LACP
 | 
SLOW_STP
)

3571 ? 
•ecül_cutoff


3572 : 
n‹mÆ_cutoff
);

3573 i‡(
subÁ˚t
->
u£d
 < 
cutoff
) {

3574 i‡(
subÁ˚t
->
∑th
 !
SF_NOT_INSTALLED
) {

3575 
b©ch
[
n_b©ch
++] = 
subÁ˚t
;

3576 i‡(
n_b©ch
 >
EXPIRE_MAX_BATCH
) {

3577 
	`expúe_b©ch
(
oÂrŸo
, 
b©ch
, 
n_b©ch
);

3578 
n_b©ch
 = 0;

3581 
	`subÁ˚t_de°roy
(
subÁ˚t
);

3586 i‡(
n_b©ch
 > 0) {

3587 
	`expúe_b©ch
(
oÂrŸo
, 
b©ch
, 
n_b©ch
);

3589 
	}
}

3594 
	$ruÀ_expúe
(
ruÀ_dpif
 *
ruÀ
)

3596 
Á˚t
 *Á˚t, *
√xt_Á˚t
;

3597 
now
;

3598 
uöt8_t
 
ªas⁄
;

3600 i‡(
ruÀ
->
up
.
≥ndög
) {

3606 
now
 = 
	`time_m£c
();

3607 i‡(
ruÀ
->
up
.
h¨d_timeout


3608 && 
now
 > 
ruÀ
->
up
.
modifõd
 +ÑuÀ->up.
h¨d_timeout
 * 1000) {

3609 
ªas⁄
 = 
OFPRR_HARD_TIMEOUT
;

3610 } i‡(
ruÀ
->
up
.
idÀ_timeout


3611 && 
now
 > 
ruÀ
->
up
.
u£d
 +ÑuÀ->up.
idÀ_timeout
 * 1000) {

3612 
ªas⁄
 = 
OFPRR_IDLE_TIMEOUT
;

3617 
	`COVERAGE_INC
(
oÂrŸo_dpif_expúed
);

3621 
	`LIST_FOR_EACH_SAFE
 (
Á˚t
, 
√xt_Á˚t
, 
li°_node
, &
ruÀ
->
Á˚ts
) {

3622 
	`Á˚t_ªmove
(
Á˚t
);

3626 
	`oÂrŸo_ruÀ_expúe
(&
ruÀ
->
up
, 
ªas⁄
);

3627 
	}
}

3641 
Á˚t
 *

3642 
	$Á˚t_¸óã
(
ruÀ_dpif
 *
ruÀ
, c⁄° 
Êow
 *Êow, 
uöt32_t
 
hash
)

3644 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
ruÀ
->
up
.ofproto);

3645 
Á˚t
 *facet;

3647 
Á˚t
 = 
	`xzÆloc
( *facet);

3648 
Á˚t
->
u£d
 = 
	`time_m£c
();

3649 
	`hm≠_ö£π
(&
oÂrŸo
->
Á˚ts
, &
Á˚t
->
hm≠_node
, 
hash
);

3650 
	`li°_push_back
(&
ruÀ
->
Á˚ts
, &
Á˚t
->
li°_node
);

3651 
Á˚t
->
ruÀ
 =Ñule;

3652 
Á˚t
->
Êow
 = *flow;

3653 
	`li°_öô
(&
Á˚t
->
subÁ˚ts
);

3654 
	`√tÊow_Êow_öô
(&
Á˚t
->
nf_Êow
);

3655 
	`√tÊow_Êow_upd©e_time
(
oÂrŸo
->
√tÊow
, &
Á˚t
->
nf_Êow
, fa˚t->
u£d
);

3657  
Á˚t
;

3658 
	}
}

3661 
	$Á˚t_‰ì
(
Á˚t
 *facet)

3663 
	`‰ì
(
Á˚t
);

3664 
	}
}

3670 
boﬁ


3671 
	$execuã_odp_a˘i⁄s
(
oÂrŸo_dpif
 *
oÂrŸo
, c⁄° 
Êow
 *flow,

3672 c⁄° 
∆©å
 *
odp_a˘i⁄s
, 
size_t
 
a˘i⁄s_Àn
,

3673 
oÂbuf
 *
∑ckë
)

3675 
odputû_keybuf
 
keybuf
;

3676 
oÂbuf
 
key
;

3677 
îr‹
;

3679 
	`oÂbuf_u£_°ack
(&
key
, &
keybuf
,  keybuf);

3680 
	`odp_Êow_key_‰om_Êow
(&
key
, 
Êow
);

3682 
îr‹
 = 
	`dpif_execuã
(
oÂrŸo
->
dpif
, 
key
.
d©a
, key.
size
,

3683 
odp_a˘i⁄s
, 
a˘i⁄s_Àn
, 
∑ckë
);

3685 
	`oÂbuf_dñëe
(
∑ckë
);

3686  !
îr‹
;

3687 
	}
}

3697 
	$Á˚t_ªmove
(
Á˚t
 *facet)

3699 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
Á˚t
->
ruÀ
->
up
.ofproto);

3700 
subÁ˚t
 *subÁ˚t, *
√xt_subÁ˚t
;

3702 
	`as£π
(!
	`li°_is_em±y
(&
Á˚t
->
subÁ˚ts
));

3705 
	`LIST_FOR_EACH
 (
subÁ˚t
, 
li°_node
, &
Á˚t
->
subÁ˚ts
) {

3706 
	`subÁ˚t_unö°Æl
(
subÁ˚t
);

3714 
	`Á˚t_Êush_°©s
(
Á˚t
);

3717 
	`LIST_FOR_EACH_SAFE
 (
subÁ˚t
, 
√xt_subÁ˚t
, 
li°_node
,

3718 &
Á˚t
->
subÁ˚ts
) {

3719 
	`subÁ˚t_de°roy__
(
subÁ˚t
);

3721 
	`hm≠_ªmove
(&
oÂrŸo
->
Á˚ts
, &
Á˚t
->
hm≠_node
);

3722 
	`li°_ªmove
(&
Á˚t
->
li°_node
);

3723 
	`Á˚t_‰ì
(
Á˚t
);

3724 
	}
}

3729 
	$Á˚t_À¨n
(
Á˚t
 *facet)

3731 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
Á˚t
->
ruÀ
->
up
.ofproto);

3732 
a˘i⁄_xœã_˘x
 
˘x
;

3734 i‡(!
Á˚t
->
has_À¨n


3735 && !
Á˚t
->
has_n‹mÆ


3736 && (!
Á˚t
->
has_fö_timeout


3737 || !(
Á˚t
->
t˝_Êags
 & (
TCP_FIN
 | 
TCP_RST
)))) {

3741 
	`a˘i⁄_xœã_˘x_öô
(&
˘x
, 
oÂrŸo
, &
Á˚t
->
Êow
,

3742 
Á˚t
->
Êow
.
vœn_tci
,

3743 
Á˚t
->
ruÀ
, fa˚t->
t˝_Êags
, 
NULL
);

3744 
˘x
.
may_À¨n
 = 
åue
;

3745 
	`xœã_a˘i⁄s_f‹_side_ef„˘s
(&
˘x
, 
Á˚t
->
ruÀ
->
up
.
oÂa˘s
,

3746 
Á˚t
->
ruÀ
->
up
.
oÂa˘s_Àn
);

3747 
	}
}

3750 
	$Á˚t_accou¡
(
Á˚t
 *facet)

3752 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
Á˚t
->
ruÀ
->
up
.ofproto);

3753 
subÁ˚t
 *subfacet;

3754 c⁄° 
∆©å
 *
a
;

3755 
À·
;

3756 
ovs_be16
 
vœn_tci
;

3757 
uöt64_t
 
n_byãs
;

3759 i‡(!
Á˚t
->
has_n‹mÆ
 || !
oÂrŸo
->
has_b⁄ded_bundÀs
) {

3762 
n_byãs
 = 
Á˚t
->
byã_cou¡
 - fa˚t->
accou¡ed_byãs
;

3772 
subÁ˚t
 = 
	`CONTAINER_OF
(
	`li°_‰⁄t
(&
Á˚t
->
subÁ˚ts
),

3773 
subÁ˚t
, 
li°_node
);

3774 
vœn_tci
 = 
Á˚t
->
Êow
.vlan_tci;

3775 
	`NL_ATTR_FOR_EACH_UNSAFE
 (
a
, 
À·
,

3776 
subÁ˚t
->
a˘i⁄s
, subÁ˚t->
a˘i⁄s_Àn
) {

3777 c⁄° 
ovs_a˘i⁄_push_vœn
 *
vœn
;

3778 
oÂ‹t_dpif
 *
p‹t
;

3780 
	`∆_©å_ty≥
(
a
)) {

3781 
OVS_ACTION_ATTR_OUTPUT
:

3782 
p‹t
 = 
	`gë_odp_p‹t
(
oÂrŸo
, 
	`∆_©å_gë_u32
(
a
));

3783 i‡(
p‹t
 &&Ö‹t->
bundÀ
 &&Ö‹t->bundÀ->
b⁄d
) {

3784 
	`b⁄d_accou¡
(
p‹t
->
bundÀ
->
b⁄d
, &
Á˚t
->
Êow
,

3785 
	`vœn_tci_to_vid
(
vœn_tci
), 
n_byãs
);

3789 
OVS_ACTION_ATTR_POP_VLAN
:

3790 
vœn_tci
 = 
	`ht⁄s
(0);

3793 
OVS_ACTION_ATTR_PUSH_VLAN
:

3794 
vœn
 = 
	`∆_©å_gë
(
a
);

3795 
vœn_tci
 = 
vœn
->vlan_tci;

3799 
	}
}

3804 
boﬁ


3805 
	$Á˚t_is_c⁄åﬁÀr_Êow
(
Á˚t
 *facet)

3807 i‡(
Á˚t
) {

3808 c⁄° 
ruÀ
 *ruÀ = &
Á˚t
->ruÀ->
up
;

3809 c⁄° 
oÂa˘
 *
oÂa˘s
 = 
ruÀ
->ofpacts;

3810 
size_t
 
oÂa˘s_Àn
 = 
ruÀ
->ofpacts_len;

3812 i‡(
oÂa˘s_Àn
 > 0 &&

3813 
oÂa˘s
->
ty≥
 =
OFPACT_CONTROLLER
 &&

3814 
	`oÂa˘_√xt
(
oÂa˘s
Ë>
	`oÂa˘_íd
(oÂa˘s, 
oÂa˘s_Àn
)) {

3815  
åue
;

3818  
Ál£
;

3819 
	}
}

3826 
	$Á˚t_Êush_°©s
(
Á˚t
 *facet)

3828 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
Á˚t
->
ruÀ
->
up
.ofproto);

3829 
subÁ˚t
 *subfacet;

3831 
	`LIST_FOR_EACH
 (
subÁ˚t
, 
li°_node
, &
Á˚t
->
subÁ˚ts
) {

3832 
	`as£π
(!
subÁ˚t
->
dp_byã_cou¡
);

3833 
	`as£π
(!
subÁ˚t
->
dp_∑ckë_cou¡
);

3836 
	`Á˚t_push_°©s
(
Á˚t
);

3837 i‡(
Á˚t
->
accou¡ed_byãs
 < fa˚t->
byã_cou¡
) {

3838 
	`Á˚t_accou¡
(
Á˚t
);

3839 
Á˚t
->
accou¡ed_byãs
 = fa˚t->
byã_cou¡
;

3842 i‡(
oÂrŸo
->
√tÊow
 && !
	`Á˚t_is_c⁄åﬁÀr_Êow
(
Á˚t
)) {

3843 
o„xpúed
 
expúed
;

3844 
expúed
.
Êow
 = 
Á˚t
->flow;

3845 
expúed
.
∑ckë_cou¡
 = 
Á˚t
->packet_count;

3846 
expúed
.
byã_cou¡
 = 
Á˚t
->byte_count;

3847 
expúed
.
u£d
 = 
Á˚t
->used;

3848 
	`√tÊow_expúe
(
oÂrŸo
->
√tÊow
, &
Á˚t
->
nf_Êow
, &
expúed
);

3851 
Á˚t
->
ruÀ
->
∑ckë_cou¡
 += facet->packet_count;

3852 
Á˚t
->
ruÀ
->
byã_cou¡
 += facet->byte_count;

3856 
	`Á˚t_ª£t_cou¡îs
(
Á˚t
);

3858 
	`√tÊow_Êow_˛ór
(&
Á˚t
->
nf_Êow
);

3859 
Á˚t
->
t˝_Êags
 = 0;

3860 
	}
}

3869 
Á˚t
 *

3870 
	$Á˚t_föd
(
oÂrŸo_dpif
 *
oÂrŸo
,

3871 c⁄° 
Êow
 *Êow, 
uöt32_t
 
hash
)

3873 
Á˚t
 *facet;

3875 
	`HMAP_FOR_EACH_WITH_HASH
 (
Á˚t
, 
hm≠_node
, 
hash
, &
oÂrŸo
->
Á˚ts
) {

3876 i‡(
	`Êow_equÆ
(
Êow
, &
Á˚t
->flow)) {

3877  
Á˚t
;

3881  
NULL
;

3882 
	}
}

3890 
Á˚t
 *

3891 
	$Á˚t_lookup_vÆid
(
oÂrŸo_dpif
 *
oÂrŸo
, c⁄° 
Êow
 *flow,

3892 
uöt32_t
 
hash
)

3894 
Á˚t
 *facet;

3896 
Á˚t
 = 
	`Á˚t_föd
(
oÂrŸo
, 
Êow
, 
hash
);

3897 i‡(
Á˚t


3898 && (
oÂrŸo
->
√ed_ªvÆid©e


3899 || 
	`èg_£t_öãr£˘s
(&
oÂrŸo
->
ªvÆid©e_£t
, 
Á˚t
->
ègs
))) {

3900 
	`Á˚t_ªvÆid©e
(
Á˚t
);

3903  
Á˚t
;

3904 
	}
}

3907 
	$subÁ˚t_∑th_to_°rög
(
subÁ˚t_∑th
 
∑th
)

3909 
∑th
) {

3910 
SF_NOT_INSTALLED
:

3912 
SF_FAST_PATH
:

3914 
SF_SLOW_PATH
:

3919 
	}
}

3923 
subÁ˚t_∑th


3924 
	$subÁ˚t_w™t_∑th
(
¶ow_∑th_ªas⁄
 
¶ow
)

3926  
¶ow
 ? 
SF_SLOW_PATH
 : 
SF_FAST_PATH
;

3927 
	}
}

3932 
boﬁ


3933 
	$subÁ˚t_should_ö°Æl
(
subÁ˚t
 *subÁ˚t, 
¶ow_∑th_ªas⁄
 
¶ow
,

3934 c⁄° 
oÂbuf
 *
w™t_a˘i⁄s
)

3936 
subÁ˚t_∑th
 
w™t_∑th
 = 
	`subÁ˚t_w™t_∑th
(
¶ow
);

3937  (
w™t_∑th
 !
subÁ˚t
->
∑th


3938 || (
w™t_∑th
 =
SF_FAST_PATH


3939 && (
subÁ˚t
->
a˘i⁄s_Àn
 !
w™t_a˘i⁄s
->
size


3940 || 
	`memcmp
(
subÁ˚t
->
a˘i⁄s
, 
w™t_a˘i⁄s
->
d©a
,

3941 
subÁ˚t
->
a˘i⁄s_Àn
))));

3942 
	}
}

3944 
boﬁ


3945 
	$Á˚t_check_c⁄si°ícy
(
Á˚t
 *facet)

3947 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 15);

3949 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
Á˚t
->
ruÀ
->
up
.ofproto);

3951 
uöt64_t
 
odp_a˘i⁄s_°ub
[1024 / 8];

3952 
oÂbuf
 
odp_a˘i⁄s
;

3954 
ruÀ_dpif
 *
ruÀ
;

3955 
subÁ˚t
 *subfacet;

3956 
boﬁ
 
may_log
 = 
Ál£
;

3957 
boﬁ
 
ok
;

3960 
ruÀ
 = 
	`ruÀ_dpif_lookup
(
oÂrŸo
, &
Á˚t
->
Êow
);

3961 
ok
 = 
ruÀ
 =
Á˚t
->rule;

3962 i‡(!
ok
) {

3963 
may_log
 = !
	`VLOG_DROP_WARN
(&
æ
);

3964 i‡(
may_log
) {

3965 
ds
 
s
;

3967 
	`ds_öô
(&
s
);

3968 
	`Êow_f‹m©
(&
s
, &
Á˚t
->
Êow
);

3969 
	`ds_put_f‹m©
(&
s
, ": facetássociated with wrongÑule (was "

3970 "èbÀ=%"
PRIu8
",", 
Á˚t
->
ruÀ
->
up
.
èbÀ_id
);

3971 
	`˛s_ruÀ_f‹m©
(&
Á˚t
->
ruÀ
->
up
.
¸
, &
s
);

3972 
	`ds_put_f‹m©
(&
s
, "Ë(should havêbì¿èbÀ=%"
PRIu8
",",

3973 
ruÀ
->
up
.
èbÀ_id
);

3974 
	`˛s_ruÀ_f‹m©
(&
ruÀ
->
up
.
¸
, &
s
);

3975 
	`ds_put_ch¨
(&
s
, ')');

3977 
	`VLOG_WARN
("%s", 
	`ds_c°r
(&
s
));

3978 
	`ds_de°roy
(&
s
);

3983 
	`oÂbuf_u£_°ub
(&
odp_a˘i⁄s
, 
odp_a˘i⁄s_°ub
,  odp_actions_stub);

3984 
	`LIST_FOR_EACH
 (
subÁ˚t
, 
li°_node
, &
Á˚t
->
subÁ˚ts
) {

3985 
subÁ˚t_∑th
 
w™t_∑th
;

3986 
odputû_keybuf
 
keybuf
;

3987 
a˘i⁄_xœã_˘x
 
˘x
;

3988 
oÂbuf
 
key
;

3989 
ds
 
s
;

3991 
	`a˘i⁄_xœã_˘x_öô
(&
˘x
, 
oÂrŸo
, &
Á˚t
->
Êow
,

3992 
subÁ˚t
->
öôül_tci
, 
ruÀ
, 0, 
NULL
);

3993 
	`xœã_a˘i⁄s
(&
˘x
, 
ruÀ
->
up
.
oÂa˘s
,ÑuÀ->up.
oÂa˘s_Àn
,

3994 &
odp_a˘i⁄s
);

3996 i‡(
subÁ˚t
->
∑th
 =
SF_NOT_INSTALLED
) {

4002 
w™t_∑th
 = 
	`subÁ˚t_w™t_∑th
(
subÁ˚t
->
¶ow
);

4003 i‡(
w™t_∑th
 =
SF_SLOW_PATH
 && 
subÁ˚t
->
∑th
 == SF_SLOW_PATH) {

4009 i‡(!
	`subÁ˚t_should_ö°Æl
(
subÁ˚t
, subÁ˚t->
¶ow
, &
odp_a˘i⁄s
)) {

4014 i‡(
ok
) {

4015 
may_log
 = !
	`VLOG_DROP_WARN
(&
æ
);

4016 
ok
 = 
Ál£
;

4018 i‡(!
may_log
) {

4023 
	`ds_öô
(&
s
);

4024 
	`subÁ˚t_gë_key
(
subÁ˚t
, &
keybuf
, &
key
);

4025 
	`odp_Êow_key_f‹m©
(
key
.
d©a
, key.
size
, &
s
);

4027 
	`ds_put_c°r
(&
s
, ": inconsistency in subfacet");

4028 i‡(
w™t_∑th
 !
subÁ˚t
->
∑th
) {

4029 
odp_key_fô√ss
 
fô√ss
 = 
subÁ˚t
->
key_fô√ss
;

4031 
	`ds_put_f‹m©
(&
s
, " (%s, fitness=%s)",

4032 
	`subÁ˚t_∑th_to_°rög
(
subÁ˚t
->
∑th
),

4033 
	`odp_key_fô√ss_to_°rög
(
fô√ss
));

4034 
	`ds_put_f‹m©
(&
s
, " (should have been %s)",

4035 
	`subÁ˚t_∑th_to_°rög
(
w™t_∑th
));

4036 } i‡(
w™t_∑th
 =
SF_FAST_PATH
) {

4037 
	`ds_put_c°r
(&
s
, " (actions were: ");

4038 
	`f‹m©_odp_a˘i⁄s
(&
s
, 
subÁ˚t
->
a˘i⁄s
,

4039 
subÁ˚t
->
a˘i⁄s_Àn
);

4040 
	`ds_put_c°r
(&
s
, ") (correctáctions: ");

4041 
	`f‹m©_odp_a˘i⁄s
(&
s
, 
odp_a˘i⁄s
.
d©a
, odp_a˘i⁄s.
size
);

4042 
	`ds_put_ch¨
(&
s
, ')');

4044 
	`ds_put_c°r
(&
s
, " (actions: ");

4045 
	`f‹m©_odp_a˘i⁄s
(&
s
, 
subÁ˚t
->
a˘i⁄s
,

4046 
subÁ˚t
->
a˘i⁄s_Àn
);

4047 
	`ds_put_ch¨
(&
s
, ')');

4049 
	`VLOG_WARN
("%s", 
	`ds_c°r
(&
s
));

4050 
	`ds_de°roy
(&
s
);

4052 
	`oÂbuf_unöô
(&
odp_a˘i⁄s
);

4054  
ok
;

4055 
	}
}

4065 
	$Á˚t_ªvÆid©e
(
Á˚t
 *facet)

4067 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
Á˚t
->
ruÀ
->
up
.ofproto);

4068 
	sa˘i⁄s
 {

4069 
∆©å
 *
odp_a˘i⁄s
;

4070 
size_t
 
a˘i⁄s_Àn
;

4072 
a˘i⁄s
 *
√w_a˘i⁄s
;

4074 
a˘i⁄_xœã_˘x
 
˘x
;

4075 
uöt64_t
 
odp_a˘i⁄s_°ub
[1024 / 8];

4076 
oÂbuf
 
odp_a˘i⁄s
;

4078 
ruÀ_dpif
 *
√w_ruÀ
;

4079 
subÁ˚t
 *subfacet;

4080 
i
;

4082 
	`COVERAGE_INC
(
Á˚t_ªvÆid©e
);

4084 
√w_ruÀ
 = 
	`ruÀ_dpif_lookup
(
oÂrŸo
, &
Á˚t
->
Êow
);

4094 
i
 = 0;

4095 
√w_a˘i⁄s
 = 
NULL
;

4096 
	`mem£t
(&
˘x
, 0,  ctx);

4097 
	`oÂbuf_u£_°ub
(&
odp_a˘i⁄s
, 
odp_a˘i⁄s_°ub
,  odp_actions_stub);

4098 
	`LIST_FOR_EACH
 (
subÁ˚t
, 
li°_node
, &
Á˚t
->
subÁ˚ts
) {

4099 
¶ow_∑th_ªas⁄
 
¶ow
;

4101 
	`a˘i⁄_xœã_˘x_öô
(&
˘x
, 
oÂrŸo
, &
Á˚t
->
Êow
,

4102 
subÁ˚t
->
öôül_tci
, 
√w_ruÀ
, 0, 
NULL
);

4103 
	`xœã_a˘i⁄s
(&
˘x
, 
√w_ruÀ
->
up
.
oÂa˘s
,Çew_ruÀ->up.
oÂa˘s_Àn
,

4104 &
odp_a˘i⁄s
);

4106 
¶ow
 = (
subÁ˚t
->¶ow & 
SLOW_MATCH
Ë| 
˘x
.slow;

4107 i‡(
	`subÁ˚t_should_ö°Æl
(
subÁ˚t
, 
¶ow
, &
odp_a˘i⁄s
)) {

4108 
dpif_Êow_°©s
 
°©s
;

4110 
	`subÁ˚t_ö°Æl
(
subÁ˚t
,

4111 
odp_a˘i⁄s
.
d©a
, odp_a˘i⁄s.
size
, &
°©s
, 
¶ow
);

4112 
	`subÁ˚t_upd©e_°©s
(
subÁ˚t
, &
°©s
);

4114 i‡(!
√w_a˘i⁄s
) {

4115 
√w_a˘i⁄s
 = 
	`xˇŒoc
(
	`li°_size
(&
Á˚t
->
subÁ˚ts
),

4116  *
√w_a˘i⁄s
);

4118 
√w_a˘i⁄s
[
i
].
odp_a˘i⁄s
 = 
	`xmemdup
(odp_a˘i⁄s.
d©a
,

4119 
odp_a˘i⁄s
.
size
);

4120 
√w_a˘i⁄s
[
i
].
a˘i⁄s_Àn
 = 
odp_a˘i⁄s
.
size
;

4123 
i
++;

4125 
	`oÂbuf_unöô
(&
odp_a˘i⁄s
);

4127 i‡(
√w_a˘i⁄s
) {

4128 
	`Á˚t_Êush_°©s
(
Á˚t
);

4132 
Á˚t
->
ègs
 = 
˘x
.tags;

4133 
Á˚t
->
nf_Êow
.
ouçut_iÁ˚
 = 
˘x
.
nf_ouçut_iÁ˚
;

4134 
Á˚t
->
has_À¨n
 = 
˘x
.has_learn;

4135 
Á˚t
->
has_n‹mÆ
 = 
˘x
.has_normal;

4136 
Á˚t
->
has_fö_timeout
 = 
˘x
.has_fin_timeout;

4137 
Á˚t
->
múr‹s
 = 
˘x
.mirrors;

4139 
i
 = 0;

4140 
	`LIST_FOR_EACH
 (
subÁ˚t
, 
li°_node
, &
Á˚t
->
subÁ˚ts
) {

4141 
subÁ˚t
->
¶ow
 = (subÁ˚t->¶ow & 
SLOW_MATCH
Ë| 
˘x
.slow;

4143 i‡(
√w_a˘i⁄s
 &&Çew_a˘i⁄s[
i
].
odp_a˘i⁄s
) {

4144 
	`‰ì
(
subÁ˚t
->
a˘i⁄s
);

4145 
subÁ˚t
->
a˘i⁄s
 = 
√w_a˘i⁄s
[
i
].
odp_a˘i⁄s
;

4146 
subÁ˚t
->
a˘i⁄s_Àn
 = 
√w_a˘i⁄s
[
i
].actions_len;

4148 
i
++;

4150 
	`‰ì
(
√w_a˘i⁄s
);

4152 i‡(
Á˚t
->
ruÀ
 !
√w_ruÀ
) {

4153 
	`COVERAGE_INC
(
Á˚t_ch™ged_ruÀ
);

4154 
	`li°_ªmove
(&
Á˚t
->
li°_node
);

4155 
	`li°_push_back
(&
√w_ruÀ
->
Á˚ts
, &
Á˚t
->
li°_node
);

4156 
Á˚t
->
ruÀ
 = 
√w_ruÀ
;

4157 
Á˚t
->
u£d
 = 
√w_ruÀ
->
up
.
¸óãd
;

4158 
Á˚t
->
¥ev_u£d
 = fa˚t->
u£d
;

4160 
	}
}

4165 
	$Á˚t_upd©e_time
(
Á˚t
 *Á˚t, 
u£d
)

4167 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
Á˚t
->
ruÀ
->
up
.ofproto);

4168 i‡(
u£d
 > 
Á˚t
->used) {

4169 
Á˚t
->
u£d
 = used;

4170 
	`oÂrŸo_ruÀ_upd©e_u£d
(&
Á˚t
->
ruÀ
->
up
, 
u£d
);

4171 
	`√tÊow_Êow_upd©e_time
(
oÂrŸo
->
√tÊow
, &
Á˚t
->
nf_Êow
, 
u£d
);

4173 
	}
}

4176 
	$Á˚t_ª£t_cou¡îs
(
Á˚t
 *facet)

4178 
Á˚t
->
∑ckë_cou¡
 = 0;

4179 
Á˚t
->
byã_cou¡
 = 0;

4180 
Á˚t
->
¥ev_∑ckë_cou¡
 = 0;

4181 
Á˚t
->
¥ev_byã_cou¡
 = 0;

4182 
Á˚t
->
accou¡ed_byãs
 = 0;

4183 
	}
}

4186 
	$Á˚t_push_°©s
(
Á˚t
 *facet)

4188 
dpif_Êow_°©s
 
°©s
;

4190 
	`as£π
(
Á˚t
->
∑ckë_cou¡
 >Á˚t->
¥ev_∑ckë_cou¡
);

4191 
	`as£π
(
Á˚t
->
byã_cou¡
 >Á˚t->
¥ev_byã_cou¡
);

4192 
	`as£π
(
Á˚t
->
u£d
 >Á˚t->
¥ev_u£d
);

4194 
°©s
.
n_∑ckës
 = 
Á˚t
->
∑ckë_cou¡
 - fa˚t->
¥ev_∑ckë_cou¡
;

4195 
°©s
.
n_byãs
 = 
Á˚t
->
byã_cou¡
 - fa˚t->
¥ev_byã_cou¡
;

4196 
°©s
.
u£d
 = 
Á˚t
->used;

4197 
°©s
.
t˝_Êags
 = 0;

4199 i‡(
°©s
.
n_∑ckës
 || sèts.
n_byãs
 || 
Á˚t
->
u£d
 > fa˚t->
¥ev_u£d
) {

4200 
Á˚t
->
¥ev_∑ckë_cou¡
 = fa˚t->
∑ckë_cou¡
;

4201 
Á˚t
->
¥ev_byã_cou¡
 = fa˚t->
byã_cou¡
;

4202 
Á˚t
->
¥ev_u£d
 = fa˚t->
u£d
;

4204 
	`Êow_push_°©s
(
Á˚t
->
ruÀ
, &Á˚t->
Êow
, &
°©s
);

4206 
	`upd©e_múr‹_°©s
(
	`oÂrŸo_dpif_ˇ°
(
Á˚t
->
ruÀ
->
up
.
oÂrŸo
),

4207 
Á˚t
->
múr‹s
, 
°©s
.
n_∑ckës
, sèts.
n_byãs
);

4209 
	}
}

4212 
	$ruÀ_¸edô_°©s
(
ruÀ_dpif
 *
ruÀ
, c⁄° 
dpif_Êow_°©s
 *
°©s
)

4214 
ruÀ
->
∑ckë_cou¡
 +
°©s
->
n_∑ckës
;

4215 
ruÀ
->
byã_cou¡
 +
°©s
->
n_byãs
;

4216 
	`oÂrŸo_ruÀ_upd©e_u£d
(&
ruÀ
->
up
, 
°©s
->
u£d
);

4217 
	}
}

4222 
	$Êow_push_°©s
(
ruÀ_dpif
 *
ruÀ
,

4223 c⁄° 
Êow
 *Êow, c⁄° 
dpif_Êow_°©s
 *
°©s
)

4225 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
ruÀ
->
up
.ofproto);

4226 
a˘i⁄_xœã_˘x
 
˘x
;

4228 
	`oÂrŸo_ruÀ_upd©e_u£d
(&
ruÀ
->
up
, 
°©s
->
u£d
);

4230 
	`a˘i⁄_xœã_˘x_öô
(&
˘x
, 
oÂrŸo
, 
Êow
, flow->
vœn_tci
, 
ruÀ
,

4231 0, 
NULL
);

4232 
˘x
.
ªsubmô_°©s
 = 
°©s
;

4233 
	`xœã_a˘i⁄s_f‹_side_ef„˘s
(&
˘x
, 
ruÀ
->
up
.
oÂa˘s
,

4234 
ruÀ
->
up
.
oÂa˘s_Àn
);

4235 
	}
}

4239 
subÁ˚t
 *

4240 
	$subÁ˚t_föd__
(
oÂrŸo_dpif
 *
oÂrŸo
,

4241 c⁄° 
∆©å
 *
key
, 
size_t
 
key_Àn
, 
uöt32_t
 
key_hash
,

4242 c⁄° 
Êow
 *flow)

4244 
subÁ˚t
 *subfacet;

4246 
	`HMAP_FOR_EACH_WITH_HASH
 (
subÁ˚t
, 
hm≠_node
, 
key_hash
,

4247 &
oÂrŸo
->
subÁ˚ts
) {

4248 i‡(
subÁ˚t
->
key


4249 ? (
subÁ˚t
->
key_Àn
 == key_len

4250 && !
	`memcmp
(
key
, 
subÁ˚t
->key, 
key_Àn
))

4251 : 
	`Êow_equÆ
(
Êow
, &
subÁ˚t
->
Á˚t
->flow)) {

4252  
subÁ˚t
;

4256  
NULL
;

4257 
	}
}

4266 
subÁ˚t
 *

4267 
	$subÁ˚t_¸óã
(
Á˚t
 *Á˚t, 
odp_key_fô√ss
 
key_fô√ss
,

4268 c⁄° 
∆©å
 *
key
, 
size_t
 
key_Àn
,

4269 
ovs_be16
 
öôül_tci
, 
now
)

4271 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
Á˚t
->
ruÀ
->
up
.ofproto);

4272 
uöt32_t
 
key_hash
 = 
	`odp_Êow_key_hash
(
key
, 
key_Àn
);

4273 
subÁ˚t
 *subfacet;

4275 i‡(
	`li°_is_em±y
(&
Á˚t
->
subÁ˚ts
)) {

4276 
subÁ˚t
 = &
Á˚t
->
⁄e_subÁ˚t
;

4278 
subÁ˚t
 = 
	`subÁ˚t_föd__
(
oÂrŸo
, 
key
, 
key_Àn
, 
key_hash
,

4279 &
Á˚t
->
Êow
);

4280 i‡(
subÁ˚t
) {

4281 i‡(
subÁ˚t
->
Á˚t
 == facet) {

4282  
subÁ˚t
;

4286 
	`VLOG_ERR_RL
(&
æ
, "subfacet with wrong facet");

4287 
	`subÁ˚t_de°roy
(
subÁ˚t
);

4290 
subÁ˚t
 = 
	`xmÆloc
( *subfacet);

4293 
	`hm≠_ö£π
(&
oÂrŸo
->
subÁ˚ts
, &
subÁ˚t
->
hm≠_node
, 
key_hash
);

4294 
	`li°_push_back
(&
Á˚t
->
subÁ˚ts
, &
subÁ˚t
->
li°_node
);

4295 
subÁ˚t
->
Á˚t
 = facet;

4296 
subÁ˚t
->
key_fô√ss
 = key_fitness;

4297 i‡(
key_fô√ss
 !
ODP_FIT_PERFECT
) {

4298 
subÁ˚t
->
key
 = 
	`xmemdup
(key, 
key_Àn
);

4299 
subÁ˚t
->
key_Àn
 = key_len;

4301 
subÁ˚t
->
key
 = 
NULL
;

4302 
subÁ˚t
->
key_Àn
 = 0;

4304 
subÁ˚t
->
u£d
 = 
now
;

4305 
subÁ˚t
->
dp_∑ckë_cou¡
 = 0;

4306 
subÁ˚t
->
dp_byã_cou¡
 = 0;

4307 
subÁ˚t
->
a˘i⁄s_Àn
 = 0;

4308 
subÁ˚t
->
a˘i⁄s
 = 
NULL
;

4309 
subÁ˚t
->
¶ow
 = (subÁ˚t->
key_fô√ss
 =
ODP_FIT_TOO_LITTLE


4310 ? 
SLOW_MATCH


4312 
subÁ˚t
->
∑th
 = 
SF_NOT_INSTALLED
;

4313 
subÁ˚t
->
öôül_tci
 = initial_tci;

4315  
subÁ˚t
;

4316 
	}
}

4320 
subÁ˚t
 *

4321 
	$subÁ˚t_föd
(
oÂrŸo_dpif
 *
oÂrŸo
,

4322 c⁄° 
∆©å
 *
key
, 
size_t
 
key_Àn
)

4324 
uöt32_t
 
key_hash
 = 
	`odp_Êow_key_hash
(
key
, 
key_Àn
);

4325 
odp_key_fô√ss
 
fô√ss
;

4326 
Êow
 flow;

4328 
fô√ss
 = 
	`odp_Êow_key_to_Êow
(
key
, 
key_Àn
, &
Êow
);

4329 i‡(
fô√ss
 =
ODP_FIT_ERROR
) {

4330  
NULL
;

4333  
	`subÁ˚t_föd__
(
oÂrŸo
, 
key
, 
key_Àn
, 
key_hash
, &
Êow
);

4334 
	}
}

4339 
	$subÁ˚t_de°roy__
(
subÁ˚t
 *subfacet)

4341 
Á˚t
 *Á˚à
subÁ˚t
->facet;

4342 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
Á˚t
->
ruÀ
->
up
.ofproto);

4344 
	`subÁ˚t_unö°Æl
(
subÁ˚t
);

4345 
	`hm≠_ªmove
(&
oÂrŸo
->
subÁ˚ts
, &
subÁ˚t
->
hm≠_node
);

4346 
	`li°_ªmove
(&
subÁ˚t
->
li°_node
);

4347 
	`‰ì
(
subÁ˚t
->
key
);

4348 
	`‰ì
(
subÁ˚t
->
a˘i⁄s
);

4349 i‡(
subÁ˚t
 !&
Á˚t
->
⁄e_subÁ˚t
) {

4350 
	`‰ì
(
subÁ˚t
);

4352 
	}
}

4357 
	$subÁ˚t_de°roy
(
subÁ˚t
 *subfacet)

4359 
Á˚t
 *Á˚à
subÁ˚t
->facet;

4361 i‡(
	`li°_is_sögÀt⁄
(&
Á˚t
->
subÁ˚ts
)) {

4363 
	`Á˚t_ªmove
(
Á˚t
);

4365 
	`subÁ˚t_de°roy__
(
subÁ˚t
);

4367 
	}
}

4373 
	$subÁ˚t_gë_key
(
subÁ˚t
 *subÁ˚t, 
odputû_keybuf
 *
keybuf
,

4374 
oÂbuf
 *
key
)

4376 i‡(!
subÁ˚t
->
key
) {

4377 
	`oÂbuf_u£_°ack
(
key
, 
keybuf
,  *keybuf);

4378 
	`odp_Êow_key_‰om_Êow
(
key
, &
subÁ˚t
->
Á˚t
->
Êow
);

4380 
	`oÂbuf_u£_c⁄°
(
key
, 
subÁ˚t
->key, subÁ˚t->
key_Àn
);

4382 
	}
}

4388 
	$subÁ˚t_make_a˘i⁄s
(
subÁ˚t
 *subÁ˚t, c⁄° 
oÂbuf
 *
∑ckë
,

4389 
oÂbuf
 *
odp_a˘i⁄s
)

4391 
Á˚t
 *Á˚à
subÁ˚t
->facet;

4392 
ruÀ_dpif
 *
ruÀ
 = 
Á˚t
->rule;

4393 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
ruÀ
->
up
.ofproto);

4395 
a˘i⁄_xœã_˘x
 
˘x
;

4397 
	`a˘i⁄_xœã_˘x_öô
(&
˘x
, 
oÂrŸo
, &
Á˚t
->
Êow
, 
subÁ˚t
->
öôül_tci
,

4398 
ruÀ
, 0, 
∑ckë
);

4399 
	`xœã_a˘i⁄s
(&
˘x
, 
ruÀ
->
up
.
oÂa˘s
,ÑuÀ->up.
oÂa˘s_Àn
, 
odp_a˘i⁄s
);

4400 
Á˚t
->
ègs
 = 
˘x
.tags;

4401 
Á˚t
->
has_À¨n
 = 
˘x
.has_learn;

4402 
Á˚t
->
has_n‹mÆ
 = 
˘x
.has_normal;

4403 
Á˚t
->
has_fö_timeout
 = 
˘x
.has_fin_timeout;

4404 
Á˚t
->
nf_Êow
.
ouçut_iÁ˚
 = 
˘x
.
nf_ouçut_iÁ˚
;

4405 
Á˚t
->
múr‹s
 = 
˘x
.mirrors;

4407 
subÁ˚t
->
¶ow
 = (subÁ˚t->¶ow & 
SLOW_MATCH
Ë| 
˘x
.slow;

4408 i‡(
subÁ˚t
->
a˘i⁄s_Àn
 !
odp_a˘i⁄s
->
size


4409 || 
	`memcmp
(
subÁ˚t
->
a˘i⁄s
, 
odp_a˘i⁄s
->
d©a
, odp_a˘i⁄s->
size
)) {

4410 
	`‰ì
(
subÁ˚t
->
a˘i⁄s
);

4411 
subÁ˚t
->
a˘i⁄s_Àn
 = 
odp_a˘i⁄s
->
size
;

4412 
subÁ˚t
->
a˘i⁄s
 = 
	`xmemdup
(
odp_a˘i⁄s
->
d©a
, odp_a˘i⁄s->
size
);

4414 
	}
}

4423 
	$subÁ˚t_ö°Æl
(
subÁ˚t
 *subfacet,

4424 c⁄° 
∆©å
 *
a˘i⁄s
, 
size_t
 
a˘i⁄s_Àn
,

4425 
dpif_Êow_°©s
 *
°©s
,

4426 
¶ow_∑th_ªas⁄
 
¶ow
)

4428 
Á˚t
 *Á˚à
subÁ˚t
->facet;

4429 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
Á˚t
->
ruÀ
->
up
.ofproto);

4430 
subÁ˚t_∑th
 
∑th
 = 
	`subÁ˚t_w™t_∑th
(
¶ow
);

4431 
uöt64_t
 
¶ow_∑th_°ub
[128 / 8];

4432 
odputû_keybuf
 
keybuf
;

4433 
dpif_Êow_put_Êags
 
Êags
;

4434 
oÂbuf
 
key
;

4435 
ªt
;

4437 
Êags
 = 
DPIF_FP_CREATE
 | 
DPIF_FP_MODIFY
;

4438 i‡(
°©s
) {

4439 
Êags
 |
DPIF_FP_ZERO_STATS
;

4442 i‡(
∑th
 =
SF_SLOW_PATH
) {

4443 
	`compo£_¶ow_∑th
(
oÂrŸo
, &
Á˚t
->
Êow
, 
¶ow
,

4444 
¶ow_∑th_°ub
,  slow_path_stub,

4445 &
a˘i⁄s
, &
a˘i⁄s_Àn
);

4448 
	`subÁ˚t_gë_key
(
subÁ˚t
, &
keybuf
, &
key
);

4449 
ªt
 = 
	`dpif_Êow_put
(
oÂrŸo
->
dpif
, 
Êags
, 
key
.
d©a
, key.
size
,

4450 
a˘i⁄s
, 
a˘i⁄s_Àn
, 
°©s
);

4452 i‡(
°©s
) {

4453 
	`subÁ˚t_ª£t_dp_°©s
(
subÁ˚t
, 
°©s
);

4456 i‡(!
ªt
) {

4457 
subÁ˚t
->
∑th
 =Öath;

4459  
ªt
;

4460 
	}
}

4463 
	$subÁ˚t_ªö°Æl
(
subÁ˚t
 *subÁ˚t, 
dpif_Êow_°©s
 *
°©s
)

4465  
	`subÁ˚t_ö°Æl
(
subÁ˚t
, subÁ˚t->
a˘i⁄s
, subÁ˚t->
a˘i⁄s_Àn
,

4466 
°©s
, 
subÁ˚t
->
¶ow
);

4467 
	}
}

4471 
	$subÁ˚t_unö°Æl
(
subÁ˚t
 *subfacet)

4473 i‡(
subÁ˚t
->
∑th
 !
SF_NOT_INSTALLED
) {

4474 
ruÀ_dpif
 *
ruÀ
 = 
subÁ˚t
->
Á˚t
->rule;

4475 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
ruÀ
->
up
.ofproto);

4476 
odputû_keybuf
 
keybuf
;

4477 
dpif_Êow_°©s
 
°©s
;

4478 
oÂbuf
 
key
;

4479 
îr‹
;

4481 
	`subÁ˚t_gë_key
(
subÁ˚t
, &
keybuf
, &
key
);

4482 
îr‹
 = 
	`dpif_Êow_dñ
(
oÂrŸo
->
dpif
, 
key
.
d©a
, key.
size
, &
°©s
);

4483 
	`subÁ˚t_ª£t_dp_°©s
(
subÁ˚t
, &
°©s
);

4484 i‡(!
îr‹
) {

4485 
	`subÁ˚t_upd©e_°©s
(
subÁ˚t
, &
°©s
);

4487 
subÁ˚t
->
∑th
 = 
SF_NOT_INSTALLED
;

4489 
	`as£π
(
subÁ˚t
->
dp_∑ckë_cou¡
 == 0);

4490 
	`as£π
(
subÁ˚t
->
dp_byã_cou¡
 == 0);

4492 
	}
}

4500 
	$subÁ˚t_ª£t_dp_°©s
(
subÁ˚t
 *subfacet,

4501 
dpif_Êow_°©s
 *
°©s
)

4503 i‡(
°©s


4504 && 
subÁ˚t
->
dp_∑ckë_cou¡
 <
°©s
->
n_∑ckës


4505 && 
subÁ˚t
->
dp_byã_cou¡
 <
°©s
->
n_byãs
) {

4506 
°©s
->
n_∑ckës
 -
subÁ˚t
->
dp_∑ckë_cou¡
;

4507 
°©s
->
n_byãs
 -
subÁ˚t
->
dp_byã_cou¡
;

4510 
subÁ˚t
->
dp_∑ckë_cou¡
 = 0;

4511 
subÁ˚t
->
dp_byã_cou¡
 = 0;

4512 
	}
}

4517 
	$subÁ˚t_upd©e_time
(
subÁ˚t
 *subÁ˚t, 
u£d
)

4519 i‡(
u£d
 > 
subÁ˚t
->used) {

4520 
subÁ˚t
->
u£d
 = used;

4521 
	`Á˚t_upd©e_time
(
subÁ˚t
->
Á˚t
, 
u£d
);

4523 
	}
}

4532 
	$subÁ˚t_upd©e_°©s
(
subÁ˚t
 *subfacet,

4533 c⁄° 
dpif_Êow_°©s
 *
°©s
)

4535 i‡(
°©s
->
n_∑ckës
 || sèts->
u£d
 > 
subÁ˚t
->used) {

4536 
Á˚t
 *Á˚à
subÁ˚t
->facet;

4538 
	`subÁ˚t_upd©e_time
(
subÁ˚t
, 
°©s
->
u£d
);

4539 
Á˚t
->
∑ckë_cou¡
 +
°©s
->
n_∑ckës
;

4540 
Á˚t
->
byã_cou¡
 +
°©s
->
n_byãs
;

4541 
Á˚t
->
t˝_Êags
 |
°©s
->tcp_flags;

4542 
	`Á˚t_push_°©s
(
Á˚t
);

4543 
	`√tÊow_Êow_upd©e_Êags
(&
Á˚t
->
nf_Êow
, 
°©s
->
t˝_Êags
);

4545 
	}
}

4549 
ruÀ_dpif
 *

4550 
	$ruÀ_dpif_lookup
(
oÂrŸo_dpif
 *
oÂrŸo
, c⁄° 
Êow
 *flow)

4552 
ruÀ_dpif
 *
ruÀ
;

4554 
ruÀ
 = 
	`ruÀ_dpif_lookup__
(
oÂrŸo
, 
Êow
, 0);

4555 i‡(
ruÀ
) {

4556  
ruÀ
;

4559  
	`ruÀ_dpif_miss_ruÀ
(
oÂrŸo
, 
Êow
);

4560 
	}
}

4562 
ruÀ_dpif
 *

4563 
	$ruÀ_dpif_lookup__
(
oÂrŸo_dpif
 *
oÂrŸo
, c⁄° 
Êow
 *flow,

4564 
uöt8_t
 
èbÀ_id
)

4566 
˛s_ruÀ
 *cls_rule;

4567 
˛assifõr
 *
˛s
;

4569 i‡(
èbÀ_id
 >
N_TABLES
) {

4570  
NULL
;

4573 
˛s
 = &
oÂrŸo
->
up
.
èbÀs
[
èbÀ_id
].cls;

4574 i‡(
Êow
->
nw_‰ag
 & 
FLOW_NW_FRAG_ANY


4575 && 
oÂrŸo
->
up
.
‰ag_h™dlög
 =
OFPC_FRAG_NORMAL
) {

4578 
Êow
 
oÂc_n‹mÆ_Êow
 = *flow;

4579 
oÂc_n‹mÆ_Êow
.
ç_§c
 = 
	`ht⁄s
(0);

4580 
oÂc_n‹mÆ_Êow
.
ç_d°
 = 
	`ht⁄s
(0);

4581 
˛s_ruÀ
 = 
	`˛assifõr_lookup
(
˛s
, &
oÂc_n‹mÆ_Êow
);

4583 
˛s_ruÀ
 = 
	`˛assifõr_lookup
(
˛s
, 
Êow
);

4585  
	`ruÀ_dpif_ˇ°
(
	`ruÀ_‰om_˛s_ruÀ
(
˛s_ruÀ
));

4586 
	}
}

4588 
ruÀ_dpif
 *

4589 
	$ruÀ_dpif_miss_ruÀ
(
oÂrŸo_dpif
 *
oÂrŸo
, c⁄° 
Êow
 *flow)

4591 
oÂ‹t_dpif
 *
p‹t
;

4593 
p‹t
 = 
	`gë_oÂ_p‹t
(
oÂrŸo
, 
Êow
->
ö_p‹t
);

4594 i‡(!
p‹t
) {

4595 
	`VLOG_WARN_RL
(&
æ
, "∑ckë-ö o¿unknow¿p‹à%"
PRIu16
, 
Êow
->
ö_p‹t
);

4596  
oÂrŸo
->
miss_ruÀ
;

4599 i‡(
p‹t
->
up
.
µ
.
c⁄fig
 & 
OFPUTIL_PC_NO_PACKET_IN
) {

4600  
oÂrŸo
->
no_∑ckë_ö_ruÀ
;

4602  
oÂrŸo
->
miss_ruÀ
;

4603 
	}
}

4606 
	$com∂ëe_›î©i⁄
(
ruÀ_dpif
 *
ruÀ
)

4608 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
ruÀ
->
up
.ofproto);

4610 
	`ruÀ_övÆid©e
(
ruÀ
);

4611 i‡(
˛ogged
) {

4612 
dpif_com∂ëi⁄
 *
c
 = 
	`xmÆloc
( *c);

4613 
c
->
›
 = 
ruÀ
->
up
.
≥ndög
;

4614 
	`li°_push_back
(&
oÂrŸo
->
com∂ëi⁄s
, &
c
->
li°_node
);

4616 
	`of›î©i⁄_com∂ëe
(
ruÀ
->
up
.
≥ndög
, 0);

4618 
	}
}

4620 
ruÀ
 *

4621 
	$ruÀ_Æloc
()

4623 
ruÀ_dpif
 *
ruÀ
 = 
	`xmÆloc
( *rule);

4624  &
ruÀ
->
up
;

4625 
	}
}

4628 
	$ruÀ_dóŒoc
(
ruÀ
 *
ruÀ_
)

4630 
ruÀ_dpif
 *
ruÀ
 = 
	`ruÀ_dpif_ˇ°
(
ruÀ_
);

4631 
	`‰ì
(
ruÀ
);

4632 
	}
}

4634 
oÂîr


4635 
	$ruÀ_c⁄°ru˘
(
ruÀ
 *
ruÀ_
)

4637 
ruÀ_dpif
 *
ruÀ
 = 
	`ruÀ_dpif_ˇ°
(
ruÀ_
);

4638 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
ruÀ
->
up
.ofproto);

4639 
ruÀ_dpif
 *
vi˘im
;

4640 
uöt8_t
 
èbÀ_id
;

4642 
ruÀ
->
∑ckë_cou¡
 = 0;

4643 
ruÀ
->
byã_cou¡
 = 0;

4645 
vi˘im
 = 
	`ruÀ_dpif_ˇ°
(
	`of›î©i⁄_gë_vi˘im
(
ruÀ
->
up
.
≥ndög
));

4646 i‡(
vi˘im
 && !
	`li°_is_em±y
(&vi˘im->
Á˚ts
)) {

4647 
Á˚t
 *facet;

4649 
ruÀ
->
Á˚ts
 = 
vi˘im
->facets;

4650 
	`li°_moved
(&
ruÀ
->
Á˚ts
);

4651 
	`LIST_FOR_EACH
 (
Á˚t
, 
li°_node
, &
ruÀ
->
Á˚ts
) {

4658 
	`Á˚t_ª£t_cou¡îs
(
Á˚t
);

4659 
Á˚t
->
ruÀ
 =Ñule;

4663 
	`li°_öô
(&
ruÀ
->
Á˚ts
);

4666 
èbÀ_id
 = 
ruÀ
->
up
.table_id;

4667 i‡(
vi˘im
) {

4668 
ruÀ
->
èg
 = 
vi˘im
->tag;

4669 } i‡(
èbÀ_id
 == 0) {

4670 
ruÀ
->
èg
 = 0;

4672 
Êow
 flow;

4674 
	`möiÊow_ex∑nd
(&
ruÀ
->
up
.
¸
.
m©ch
.
Êow
, &flow);

4675 
ruÀ
->
èg
 = 
	`ruÀ_ˇlcuœã_èg
(&
Êow
, &ruÀ->
up
.
¸
.
m©ch
.
mask
,

4676 
oÂrŸo
->
èbÀs
[
èbÀ_id
].
basis
);

4679 
	`com∂ëe_›î©i⁄
(
ruÀ
);

4681 
	}
}

4684 
	$ruÀ_de°ru˘
(
ruÀ
 *
ruÀ_
)

4686 
ruÀ_dpif
 *
ruÀ
 = 
	`ruÀ_dpif_ˇ°
(
ruÀ_
);

4687 
Á˚t
 *Á˚t, *
√xt_Á˚t
;

4689 
	`LIST_FOR_EACH_SAFE
 (
Á˚t
, 
√xt_Á˚t
, 
li°_node
, &
ruÀ
->
Á˚ts
) {

4690 
	`Á˚t_ªvÆid©e
(
Á˚t
);

4693 
	`com∂ëe_›î©i⁄
(
ruÀ
);

4694 
	}
}

4697 
	$ruÀ_gë_°©s
(
ruÀ
 *
ruÀ_
, 
uöt64_t
 *
∑ckës
, uöt64_à*
byãs
)

4699 
ruÀ_dpif
 *
ruÀ
 = 
	`ruÀ_dpif_ˇ°
(
ruÀ_
);

4700 
Á˚t
 *facet;

4704 *
∑ckës
 = 
ruÀ
->
∑ckë_cou¡
;

4705 *
byãs
 = 
ruÀ
->
byã_cou¡
;

4710 
	`LIST_FOR_EACH
 (
Á˚t
, 
li°_node
, &
ruÀ
->
Á˚ts
) {

4711 *
∑ckës
 +
Á˚t
->
∑ckë_cou¡
;

4712 *
byãs
 +
Á˚t
->
byã_cou¡
;

4714 
	}
}

4716 
oÂîr


4717 
	$ruÀ_execuã
(
ruÀ
 *
ruÀ_
, c⁄° 
Êow
 *flow,

4718 
oÂbuf
 *
∑ckë
)

4720 
ruÀ_dpif
 *
ruÀ
 = 
	`ruÀ_dpif_ˇ°
(
ruÀ_
);

4721 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
ruÀ
->
up
.ofproto);

4723 
dpif_Êow_°©s
 
°©s
;

4725 
a˘i⁄_xœã_˘x
 
˘x
;

4726 
uöt64_t
 
odp_a˘i⁄s_°ub
[1024 / 8];

4727 
oÂbuf
 
odp_a˘i⁄s
;

4729 
	`dpif_Êow_°©s_exåa˘
(
Êow
, 
∑ckë
, 
	`time_m£c
(), &
°©s
);

4730 
	`ruÀ_¸edô_°©s
(
ruÀ
, &
°©s
);

4732 
	`oÂbuf_u£_°ub
(&
odp_a˘i⁄s
, 
odp_a˘i⁄s_°ub
,  odp_actions_stub);

4733 
	`a˘i⁄_xœã_˘x_öô
(&
˘x
, 
oÂrŸo
, 
Êow
, flow->
vœn_tci
,

4734 
ruÀ
, 
°©s
.
t˝_Êags
, 
∑ckë
);

4735 
˘x
.
ªsubmô_°©s
 = &
°©s
;

4736 
	`xœã_a˘i⁄s
(&
˘x
, 
ruÀ
->
up
.
oÂa˘s
,ÑuÀ->up.
oÂa˘s_Àn
, &
odp_a˘i⁄s
);

4738 
	`execuã_odp_a˘i⁄s
(
oÂrŸo
, 
Êow
, 
odp_a˘i⁄s
.
d©a
,

4739 
odp_a˘i⁄s
.
size
, 
∑ckë
);

4741 
	`oÂbuf_unöô
(&
odp_a˘i⁄s
);

4744 
	}
}

4747 
	$ruÀ_modify_a˘i⁄s
(
ruÀ
 *
ruÀ_
)

4749 
ruÀ_dpif
 *
ruÀ
 = 
	`ruÀ_dpif_ˇ°
(
ruÀ_
);

4751 
	`com∂ëe_›î©i⁄
(
ruÀ
);

4752 
	}
}

4758 
	$£nd_∑ckë
(c⁄° 
oÂ‹t_dpif
 *
oÂ‹t
, 
oÂbuf
 *
∑ckë
)

4760 c⁄° 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
oÂ‹t
->
up
.ofproto);

4761 
oÂbuf
 
key
, 
odp_a˘i⁄s
;

4762 
odputû_keybuf
 
keybuf
;

4763 
uöt16_t
 
odp_p‹t
;

4764 
Êow
 flow;

4765 
îr‹
;

4767 
	`Êow_exåa˘
(
∑ckë
, 0, 0, 
NULL
, 0, &
Êow
);

4768 
odp_p‹t
 = 
	`v•_ªÆdev_to_vœndev
(
oÂrŸo
, 
oÂ‹t
->odp_port,

4769 
Êow
.
vœn_tci
);

4770 i‡(
odp_p‹t
 !
oÂ‹t
->odp_port) {

4771 
	`ëh_p›_vœn
(
∑ckë
);

4772 
Êow
.
vœn_tci
 = 
	`ht⁄s
(0);

4775 
	`oÂbuf_u£_°ack
(&
key
, &
keybuf
,  keybuf);

4776 
	`odp_Êow_key_‰om_Êow
(&
key
, &
Êow
);

4778 
	`oÂbuf_öô
(&
odp_a˘i⁄s
, 32);

4779 
	`compo£_sÊow_a˘i⁄
(
oÂrŸo
, &
odp_a˘i⁄s
, &
Êow
, 
odp_p‹t
);

4781 
	`∆_msg_put_u32
(&
odp_a˘i⁄s
, 
OVS_ACTION_ATTR_OUTPUT
, 
odp_p‹t
);

4782 
îr‹
 = 
	`dpif_execuã
(
oÂrŸo
->
dpif
,

4783 
key
.
d©a
, key.
size
,

4784 
odp_a˘i⁄s
.
d©a
, odp_a˘i⁄s.
size
,

4785 
∑ckë
);

4786 
	`oÂbuf_unöô
(&
odp_a˘i⁄s
);

4788 i‡(
îr‹
) {

4789 
	`VLOG_WARN_RL
(&
æ
, "%s: faûedÅÿ£ndÖackë o¿p‹à%"
PRIu32
" (%s)",

4790 
oÂrŸo
->
up
.
«me
, 
odp_p‹t
, 
	`°ªº‹
(
îr‹
));

4792 
	`oÂrŸo_upd©e_loˇl_p‹t_°©s
(
oÂ‹t
->
up
.
oÂrŸo
, 
∑ckë
->
size
, 0);

4793  
îr‹
;

4794 
	}
}

4798 
do_xœã_a˘i⁄s
(c⁄° 
oÂa˘
 *, 
size_t
 
oÂa˘s_Àn
,

4799 
a˘i⁄_xœã_˘x
 *);

4800 
xœã_n‹mÆ
(
a˘i⁄_xœã_˘x
 *);

4813 
	$compo£_¶ow_∑th
(c⁄° 
oÂrŸo_dpif
 *
oÂrŸo
, c⁄° 
Êow
 *flow,

4814 
¶ow_∑th_ªas⁄
 
¶ow
,

4815 
uöt64_t
 *
°ub
, 
size_t
 
°ub_size
,

4816 c⁄° 
∆©å
 **
a˘i⁄•
, 
size_t
 *
a˘i⁄s_À≈
)

4818 
u£r_a˘i⁄_cookõ
 
cookõ
;

4819 
oÂbuf
 
buf
;

4821 
cookõ
.
ty≥
 = 
USER_ACTION_COOKIE_SLOW_PATH
;

4822 
cookõ
.
¶ow_∑th
.
unu£d
 = 0;

4823 
cookõ
.
¶ow_∑th
.
ªas⁄
 = 
¶ow
;

4825 
	`oÂbuf_u£_°ack
(&
buf
, 
°ub
, 
°ub_size
);

4826 i‡(
¶ow
 & (
SLOW_CFM
 | 
SLOW_LACP
 | 
SLOW_STP
)) {

4827 
uöt32_t
 
pid
 = 
	`dpif_p‹t_gë_pid
(
oÂrŸo
->
dpif
, 
UINT16_MAX
);

4828 
	`odp_put_u£r•a˚_a˘i⁄
(
pid
, &
cookõ
, &
buf
);

4830 
	`put_u£r•a˚_a˘i⁄
(
oÂrŸo
, &
buf
, 
Êow
, &
cookõ
);

4832 *
a˘i⁄•
 = 
buf
.
d©a
;

4833 *
a˘i⁄s_À≈
 = 
buf
.
size
;

4834 
	}
}

4836 
size_t


4837 
	$put_u£r•a˚_a˘i⁄
(c⁄° 
oÂrŸo_dpif
 *
oÂrŸo
,

4838 
oÂbuf
 *
odp_a˘i⁄s
,

4839 c⁄° 
Êow
 *flow,

4840 c⁄° 
u£r_a˘i⁄_cookõ
 *
cookõ
)

4842 
uöt32_t
 
pid
;

4844 
pid
 = 
	`dpif_p‹t_gë_pid
(
oÂrŸo
->
dpif
,

4845 
	`oÂ_p‹t_to_odp_p‹t
(
Êow
->
ö_p‹t
));

4847  
	`odp_put_u£r•a˚_a˘i⁄
(
pid
, 
cookõ
, 
odp_a˘i⁄s
);

4848 
	}
}

4851 
	$compo£_sÊow_cookõ
(c⁄° 
oÂrŸo_dpif
 *
oÂrŸo
,

4852 
ovs_be16
 
vœn_tci
, 
uöt32_t
 
odp_p‹t
,

4853 
n_ouçuts
, 
u£r_a˘i⁄_cookõ
 *
cookõ
)

4855 
ifödex
;

4857 
cookõ
->
ty≥
 = 
USER_ACTION_COOKIE_SFLOW
;

4858 
cookõ
->
sÊow
.
vœn_tci
 = vlan_tci;

4862 
n_ouçuts
) {

4865 
cookõ
->
sÊow
.
ouçut
 = 0x40000000 | 256;

4869 
ifödex
 = 
	`dpif_sÊow_odp_p‹t_to_ifödex
(
oÂrŸo
->
sÊow
, 
odp_p‹t
);

4870 i‡(
ifödex
) {

4871 
cookõ
->
sÊow
.
ouçut
 = 
ifödex
;

4877 
cookõ
->
sÊow
.
ouçut
 = 0x80000000 | 
n_ouçuts
;

4880 
	}
}

4883 
size_t


4884 
	$compo£_sÊow_a˘i⁄
(c⁄° 
oÂrŸo_dpif
 *
oÂrŸo
,

4885 
oÂbuf
 *
odp_a˘i⁄s
,

4886 c⁄° 
Êow
 *flow,

4887 
uöt32_t
 
odp_p‹t
)

4889 
uöt32_t
 
¥obabûôy
;

4890 
u£r_a˘i⁄_cookõ
 
cookõ
;

4891 
size_t
 
ßm∂e_off£t
, 
a˘i⁄s_off£t
;

4892 
cookõ_off£t
;

4894 i‡(!
oÂrŸo
->
sÊow
 || 
Êow
->
ö_p‹t
 =
OFPP_NONE
) {

4898 
ßm∂e_off£t
 = 
	`∆_msg_°¨t_√°ed
(
odp_a˘i⁄s
, 
OVS_ACTION_ATTR_SAMPLE
);

4901 
¥obabûôy
 = 
	`dpif_sÊow_gë_¥obabûôy
(
oÂrŸo
->
sÊow
);

4902 
	`∆_msg_put_u32
(
odp_a˘i⁄s
, 
OVS_SAMPLE_ATTR_PROBABILITY
, 
¥obabûôy
);

4904 
a˘i⁄s_off£t
 = 
	`∆_msg_°¨t_√°ed
(
odp_a˘i⁄s
, 
OVS_SAMPLE_ATTR_ACTIONS
);

4905 
	`compo£_sÊow_cookõ
(
oÂrŸo
, 
	`ht⁄s
(0), 
odp_p‹t
,

4906 
odp_p‹t
 =
OVSP_NONE
 ? 0 : 1, &
cookõ
);

4907 
cookõ_off£t
 = 
	`put_u£r•a˚_a˘i⁄
(
oÂrŸo
, 
odp_a˘i⁄s
, 
Êow
, &
cookõ
);

4909 
	`∆_msg_íd_√°ed
(
odp_a˘i⁄s
, 
a˘i⁄s_off£t
);

4910 
	`∆_msg_íd_√°ed
(
odp_a˘i⁄s
, 
ßm∂e_off£t
);

4911  
cookõ_off£t
;

4912 
	}
}

4918 
	$add_sÊow_a˘i⁄
(
a˘i⁄_xœã_˘x
 *
˘x
)

4920 
˘x
->
u£r_cookõ_off£t
 = 
	`compo£_sÊow_a˘i⁄
(˘x->
oÂrŸo
,

4921 
˘x
->
odp_a˘i⁄s
,

4922 &
˘x
->
Êow
, 
OVSP_NONE
);

4923 
˘x
->
sÊow_odp_p‹t
 = 0;

4924 
˘x
->
sÊow_n_ouçuts
 = 0;

4925 
	}
}

4931 
	$fix_sÊow_a˘i⁄
(
a˘i⁄_xœã_˘x
 *
˘x
)

4933 c⁄° 
Êow
 *
ba£
 = &
˘x
->
ba£_Êow
;

4934 
u£r_a˘i⁄_cookõ
 *
cookõ
;

4936 i‡(!
˘x
->
u£r_cookõ_off£t
) {

4940 
cookõ
 = 
	`oÂbuf_©
(
˘x
->
odp_a˘i⁄s
, ctx->
u£r_cookõ_off£t
,

4941 (*
cookõ
));

4942 
	`as£π
(
cookõ
->
ty≥
 =
USER_ACTION_COOKIE_SFLOW
);

4944 
	`compo£_sÊow_cookõ
(
˘x
->
oÂrŸo
, 
ba£
->
vœn_tci
,

4945 
˘x
->
sÊow_odp_p‹t
, ctx->
sÊow_n_ouçuts
, 
cookõ
);

4946 
	}
}

4949 
	$compo£_ouçut_a˘i⁄__
(
a˘i⁄_xœã_˘x
 *
˘x
, 
uöt16_t
 
oÂ_p‹t
,

4950 
boﬁ
 
check_°p
)

4952 c⁄° 
oÂ‹t_dpif
 *
oÂ‹t
 = 
	`gë_oÂ_p‹t
(
˘x
->
oÂrŸo
, 
oÂ_p‹t
);

4953 
uöt16_t
 
odp_p‹t
 = 
	`oÂ_p‹t_to_odp_p‹t
(
oÂ_p‹t
);

4954 
ovs_be16
 
Êow_vœn_tci
 = 
˘x
->
Êow
.
vœn_tci
;

4955 
uöt8_t
 
Êow_nw_tos
 = 
˘x
->
Êow
.
nw_tos
;

4956 
uöt16_t
 
out_p‹t
;

4958 i‡(
oÂ‹t
) {

4959 
¥i‹ôy_to_ds˝
 *
pds˝
;

4961 i‡(
oÂ‹t
->
up
.
µ
.
c⁄fig
 & 
OFPUTIL_PC_NO_FWD
) {

4962 
	`xœã_ªp‹t
(
˘x
, "OFPPC_NO_FWD set, skipping output");

4964 } i‡(
check_°p
 && !
	`°p_f‹w¨d_ö_°©e
(
oÂ‹t
->
°p_°©e
)) {

4965 
	`xœã_ªp‹t
(
˘x
, "STPÇot in forwarding state, skipping output");

4969 
pds˝
 = 
	`gë_¥i‹ôy
(
oÂ‹t
, 
˘x
->
Êow
.
skb_¥i‹ôy
);

4970 i‡(
pds˝
) {

4971 
˘x
->
Êow
.
nw_tos
 &~
IP_DSCP_MASK
;

4972 
˘x
->
Êow
.
nw_tos
 |
pds˝
->
ds˝
;

4980 
out_p‹t
 = 
	`v•_ªÆdev_to_vœndev
(
˘x
->
oÂrŸo
, 
odp_p‹t
,

4981 
˘x
->
Êow
.
vœn_tci
);

4982 i‡(
out_p‹t
 !
odp_p‹t
) {

4983 
˘x
->
Êow
.
vœn_tci
 = 
	`ht⁄s
(0);

4985 
	`commô_odp_a˘i⁄s
(&
˘x
->
Êow
, &˘x->
ba£_Êow
, ctx->
odp_a˘i⁄s
);

4986 
	`∆_msg_put_u32
(
˘x
->
odp_a˘i⁄s
, 
OVS_ACTION_ATTR_OUTPUT
, 
out_p‹t
);

4988 
˘x
->
sÊow_odp_p‹t
 = 
odp_p‹t
;

4989 
˘x
->
sÊow_n_ouçuts
++;

4990 
˘x
->
nf_ouçut_iÁ˚
 = 
oÂ_p‹t
;

4991 
˘x
->
Êow
.
vœn_tci
 = 
Êow_vœn_tci
;

4992 
˘x
->
Êow
.
nw_tos
 = 
Êow_nw_tos
;

4993 
	}
}

4996 
	$compo£_ouçut_a˘i⁄
(
a˘i⁄_xœã_˘x
 *
˘x
, 
uöt16_t
 
oÂ_p‹t
)

4998 
	`compo£_ouçut_a˘i⁄__
(
˘x
, 
oÂ_p‹t
, 
åue
);

4999 
	}
}

5002 
	$xœã_èbÀ_a˘i⁄
(
a˘i⁄_xœã_˘x
 *
˘x
,

5003 
uöt16_t
 
ö_p‹t
, 
uöt8_t
 
èbÀ_id
, 
boﬁ
 
may_∑ckë_ö
)

5005 i‡(
˘x
->
ªcur£
 < 
MAX_RESUBMIT_RECURSION
) {

5006 
oÂrŸo_dpif
 *
oÂrŸo
 = 
˘x
->ofproto;

5007 
ruÀ_dpif
 *
ruÀ
;

5008 
uöt16_t
 
ﬁd_ö_p‹t
;

5009 
uöt8_t
 
ﬁd_èbÀ_id
;

5011 
ﬁd_èbÀ_id
 = 
˘x
->
èbÀ_id
;

5012 
˘x
->
èbÀ_id
 =Åable_id;

5015 
ﬁd_ö_p‹t
 = 
˘x
->
Êow
.
ö_p‹t
;

5016 
˘x
->
Êow
.
ö_p‹t
 = in_port;

5017 
ruÀ
 = 
	`ruÀ_dpif_lookup__
(
oÂrŸo
, &
˘x
->
Êow
, 
èbÀ_id
);

5020 i‡(
èbÀ_id
 > 0 &&ÅabÀ_id < 
N_TABLES
) {

5021 
èbÀ_dpif
 *
èbÀ
 = &
oÂrŸo
->
èbÀs
[
èbÀ_id
];

5022 i‡(
èbÀ
->
Ÿhî_èbÀ
) {

5023 
˘x
->
ègs
 |(
ruÀ
 &&ÑuÀ->
èg


5024 ? 
ruÀ
->
èg


5025 : 
	`ruÀ_ˇlcuœã_èg
(&
˘x
->
Êow
,

5026 &
èbÀ
->
Ÿhî_èbÀ
->
mask
,

5027 
èbÀ
->
basis
));

5033 
˘x
->
Êow
.
ö_p‹t
 = 
ﬁd_ö_p‹t
;

5035 i‡(
˘x
->
ªsubmô_hook
) {

5036 
˘x
->
	`ªsubmô_hook
(˘x, 
ruÀ
);

5039 i‡(
ruÀ
 =
NULL
 && 
may_∑ckë_ö
) {

5047 
ruÀ
 = 
	`ruÀ_dpif_miss_ruÀ
(
oÂrŸo
, &
˘x
->
Êow
);

5050 i‡(
ruÀ
) {

5051 
ruÀ_dpif
 *
ﬁd_ruÀ
 = 
˘x
->
ruÀ
;

5053 i‡(
˘x
->
ªsubmô_°©s
) {

5054 
	`ruÀ_¸edô_°©s
(
ruÀ
, 
˘x
->
ªsubmô_°©s
);

5057 
˘x
->
ªcur£
++;

5058 
˘x
->
ruÀ
 =Ñule;

5059 
	`do_xœã_a˘i⁄s
(
ruÀ
->
up
.
oÂa˘s
,ÑuÀ->up.
oÂa˘s_Àn
, 
˘x
);

5060 
˘x
->
ruÀ
 = 
ﬁd_ruÀ
;

5061 
˘x
->
ªcur£
--;

5064 
˘x
->
èbÀ_id
 = 
ﬁd_èbÀ_id
;

5066 
vlog_øã_limô
 
ªcur£_æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 1);

5068 
	`VLOG_ERR_RL
(&
ªcur£_æ
, "resubmitáctionsÑecursed over %dÅimes",

5069 
MAX_RESUBMIT_RECURSION
);

5070 
˘x
->
max_ªsubmô_åiggî
 = 
åue
;

5072 
	}
}

5075 
	$xœã_oÂa˘_ªsubmô
(
a˘i⁄_xœã_˘x
 *
˘x
,

5076 c⁄° 
oÂa˘_ªsubmô
 *
ªsubmô
)

5078 
uöt16_t
 
ö_p‹t
;

5079 
uöt8_t
 
èbÀ_id
;

5081 
ö_p‹t
 = 
ªsubmô
->in_port;

5082 i‡(
ö_p‹t
 =
OFPP_IN_PORT
) {

5083 
ö_p‹t
 = 
˘x
->
Êow
.in_port;

5086 
èbÀ_id
 = 
ªsubmô
->table_id;

5087 i‡(
èbÀ_id
 == 255) {

5088 
èbÀ_id
 = 
˘x
->table_id;

5091 
	`xœã_èbÀ_a˘i⁄
(
˘x
, 
ö_p‹t
, 
èbÀ_id
, 
Ál£
);

5092 
	}
}

5095 
	$Êood_∑ckës
(
a˘i⁄_xœã_˘x
 *
˘x
, 
boﬁ
 
Æl
)

5097 
oÂ‹t_dpif
 *
oÂ‹t
;

5099 
	`HMAP_FOR_EACH
 (
oÂ‹t
, 
up
.
hm≠_node
, &
˘x
->
oÂrŸo
->up.
p‹ts
) {

5100 
uöt16_t
 
oÂ_p‹t
 = 
oÂ‹t
->
up
.ofp_port;

5102 i‡(
oÂ_p‹t
 =
˘x
->
Êow
.
ö_p‹t
) {

5106 i‡(
Æl
) {

5107 
	`compo£_ouçut_a˘i⁄__
(
˘x
, 
oÂ_p‹t
, 
Ál£
);

5108 } i‡(!(
oÂ‹t
->
up
.
µ
.
c⁄fig
 & 
OFPUTIL_PC_NO_FLOOD
)) {

5109 
	`compo£_ouçut_a˘i⁄
(
˘x
, 
oÂ_p‹t
);

5113 
˘x
->
nf_ouçut_iÁ˚
 = 
NF_OUT_FLOOD
;

5114 
	}
}

5117 
	$execuã_c⁄åﬁÀr_a˘i⁄
(
a˘i⁄_xœã_˘x
 *
˘x
, 
Àn
,

5118 
oÂ_∑ckë_ö_ªas⁄
 
ªas⁄
,

5119 
uöt16_t
 
c⁄åﬁÀr_id
)

5121 
oÂutû_∑ckë_ö
 
pö
;

5122 
oÂbuf
 *
∑ckë
;

5124 
˘x
->
¶ow
 |
SLOW_CONTROLLER
;

5125 i‡(!
˘x
->
∑ckë
) {

5129 
∑ckë
 = 
	`oÂbuf_˛⁄e
(
˘x
->packet);

5131 i‡(
∑ckë
->
l2
 &&Öackë->
l3
) {

5132 
ëh_hódî
 *
eh
;

5134 
	`ëh_p›_vœn
(
∑ckë
);

5135 
eh
 = 
∑ckë
->
l2
;

5140 
	`as£π
(
	`¡ohs
(
eh
->
ëh_ty≥
Ë< 
ETH_TYPE_MIN


5141 || 
eh
->
ëh_ty≥
 =
˘x
->
Êow
.
dl_ty≥
);

5143 
	`mem˝y
(
eh
->
ëh_§c
, 
˘x
->
Êow
.
dl_§c
, Éh->eth_src);

5144 
	`mem˝y
(
eh
->
ëh_d°
, 
˘x
->
Êow
.
dl_d°
, Éh->eth_dst);

5146 i‡(
˘x
->
Êow
.
vœn_tci
 & 
	`ht⁄s
(
VLAN_CFI
)) {

5147 
	`ëh_push_vœn
(
∑ckë
, 
˘x
->
Êow
.
vœn_tci
);

5150 i‡(
∑ckë
->
l4
) {

5151 i‡(
˘x
->
Êow
.
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IP
)) {

5152 
	`∑ckë_£t_ùv4
(
∑ckë
, 
˘x
->
Êow
.
nw_§c
, ctx->Êow.
nw_d°
,

5153 
˘x
->
Êow
.
nw_tos
, ctx->Êow.
nw_âl
);

5156 i‡(
∑ckë
->
l7
) {

5157 i‡(
˘x
->
Êow
.
nw_¥Ÿo
 =
IPPROTO_TCP
) {

5158 
	`∑ckë_£t_t˝_p‹t
(
∑ckë
, 
˘x
->
Êow
.
ç_§c
,

5159 
˘x
->
Êow
.
ç_d°
);

5160 } i‡(
˘x
->
Êow
.
nw_¥Ÿo
 =
IPPROTO_UDP
) {

5161 
	`∑ckë_£t_udp_p‹t
(
∑ckë
, 
˘x
->
Êow
.
ç_§c
,

5162 
˘x
->
Êow
.
ç_d°
);

5168 
pö
.
∑ckë
 =Öackë->
d©a
;

5169 
pö
.
∑ckë_Àn
 = 
∑ckë
->
size
;

5170 
pö
.
ªas⁄
 =Ñeason;

5171 
pö
.
c⁄åﬁÀr_id
 = controller_id;

5172 
pö
.
èbÀ_id
 = 
˘x
->table_id;

5173 
pö
.
cookõ
 = 
˘x
->
ruÀ
 ? ctx->ruÀ->
up
.
Êow_cookõ
 : 0;

5175 
pö
.
£nd_Àn
 = 
Àn
;

5176 
	`Êow_gë_mëad©a
(&
˘x
->
Êow
, &
pö
.
fmd
);

5178 
	`c⁄nmgr_£nd_∑ckë_ö
(
˘x
->
oÂrŸo
->
up
.
c⁄nmgr
, &
pö
);

5179 
	`oÂbuf_dñëe
(
∑ckë
);

5180 
	}
}

5182 
boﬁ


5183 
	$compo£_dec_âl
(
a˘i⁄_xœã_˘x
 *
˘x
, 
oÂa˘_˙t_ids
 *
ids
)

5185 i‡(
˘x
->
Êow
.
dl_ty≥
 !
	`ht⁄s
(
ETH_TYPE_IP
) &&

5186 
˘x
->
Êow
.
dl_ty≥
 !
	`ht⁄s
(
ETH_TYPE_IPV6
)) {

5187  
Ál£
;

5190 i‡(
˘x
->
Êow
.
nw_âl
 > 1) {

5191 
˘x
->
Êow
.
nw_âl
--;

5192  
Ál£
;

5194 
size_t
 
i
;

5196 
i
 = 0; i < 
ids
->
n_c⁄åﬁÀrs
; i++) {

5197 
	`execuã_c⁄åﬁÀr_a˘i⁄
(
˘x
, 
UINT16_MAX
, 
OFPR_INVALID_TTL
,

5198 
ids
->
˙t_ids
[
i
]);

5202  
åue
;

5204 
	}
}

5207 
	$xœã_ouçut_a˘i⁄
(
a˘i⁄_xœã_˘x
 *
˘x
,

5208 
uöt16_t
 
p‹t
, uöt16_à
max_Àn
, 
boﬁ
 
may_∑ckë_ö
)

5210 
uöt16_t
 
¥ev_nf_ouçut_iÁ˚
 = 
˘x
->
nf_ouçut_iÁ˚
;

5212 
˘x
->
nf_ouçut_iÁ˚
 = 
NF_OUT_DROP
;

5214 
p‹t
) {

5215 
OFPP_IN_PORT
:

5216 
	`compo£_ouçut_a˘i⁄
(
˘x
, ctx->
Êow
.
ö_p‹t
);

5218 
OFPP_TABLE
:

5219 
	`xœã_èbÀ_a˘i⁄
(
˘x
, ctx->
Êow
.
ö_p‹t
, 0, 
may_∑ckë_ö
);

5221 
OFPP_NORMAL
:

5222 
	`xœã_n‹mÆ
(
˘x
);

5224 
OFPP_FLOOD
:

5225 
	`Êood_∑ckës
(
˘x
, 
Ál£
);

5227 
OFPP_ALL
:

5228 
	`Êood_∑ckës
(
˘x
, 
åue
);

5230 
OFPP_CONTROLLER
:

5231 
	`execuã_c⁄åﬁÀr_a˘i⁄
(
˘x
, 
max_Àn
, 
OFPR_ACTION
, 0);

5233 
OFPP_NONE
:

5235 
OFPP_LOCAL
:

5237 i‡(
p‹t
 !
˘x
->
Êow
.
ö_p‹t
) {

5238 
	`compo£_ouçut_a˘i⁄
(
˘x
, 
p‹t
);

5240 
	`xœã_ªp‹t
(
˘x
, "skipping outputÅo inputÖort");

5245 i‡(
¥ev_nf_ouçut_iÁ˚
 =
NF_OUT_FLOOD
) {

5246 
˘x
->
nf_ouçut_iÁ˚
 = 
NF_OUT_FLOOD
;

5247 } i‡(
˘x
->
nf_ouçut_iÁ˚
 =
NF_OUT_DROP
) {

5248 
˘x
->
nf_ouçut_iÁ˚
 = 
¥ev_nf_ouçut_iÁ˚
;

5249 } i‡(
¥ev_nf_ouçut_iÁ˚
 !
NF_OUT_DROP
 &&

5250 
˘x
->
nf_ouçut_iÁ˚
 !
NF_OUT_FLOOD
) {

5251 
˘x
->
nf_ouçut_iÁ˚
 = 
NF_OUT_MULTI
;

5253 
	}
}

5256 
	$xœã_ouçut_ªg_a˘i⁄
(
a˘i⁄_xœã_˘x
 *
˘x
,

5257 c⁄° 
oÂa˘_ouçut_ªg
 *
‹
)

5259 
uöt64_t
 
p‹t
 = 
	`mf_gë_subfõld
(&
‹
->
§c
, &
˘x
->
Êow
);

5260 i‡(
p‹t
 <
UINT16_MAX
) {

5261 
	`xœã_ouçut_a˘i⁄
(
˘x
, 
p‹t
, 
‹
->
max_Àn
, 
Ál£
);

5263 
	}
}

5266 
	$xœã_íqueue_a˘i⁄
(
a˘i⁄_xœã_˘x
 *
˘x
,

5267 c⁄° 
oÂa˘_íqueue
 *
íqueue
)

5269 
uöt16_t
 
oÂ_p‹t
 = 
íqueue
->
p‹t
;

5270 
uöt32_t
 
queue_id
 = 
íqueue
->
queue
;

5271 
uöt32_t
 
Êow_¥i‹ôy
, 
¥i‹ôy
;

5272 
îr‹
;

5275 
îr‹
 = 
	`dpif_queue_to_¥i‹ôy
(
˘x
->
oÂrŸo
->
dpif
, 
queue_id
, &
¥i‹ôy
);

5276 i‡(
îr‹
) {

5278 
	`xœã_ouçut_a˘i⁄
(
˘x
, 
íqueue
->
p‹t
, 0, 
Ál£
);

5283 i‡(
oÂ_p‹t
 =
OFPP_IN_PORT
) {

5284 
oÂ_p‹t
 = 
˘x
->
Êow
.
ö_p‹t
;

5285 } i‡(
oÂ_p‹t
 =
˘x
->
Êow
.
ö_p‹t
) {

5290 
Êow_¥i‹ôy
 = 
˘x
->
Êow
.
skb_¥i‹ôy
;

5291 
˘x
->
Êow
.
skb_¥i‹ôy
 = 
¥i‹ôy
;

5292 
	`compo£_ouçut_a˘i⁄
(
˘x
, 
oÂ_p‹t
);

5293 
˘x
->
Êow
.
skb_¥i‹ôy
 = 
Êow_¥i‹ôy
;

5296 i‡(
˘x
->
nf_ouçut_iÁ˚
 =
NF_OUT_DROP
) {

5297 
˘x
->
nf_ouçut_iÁ˚
 = 
oÂ_p‹t
;

5298 } i‡(
˘x
->
nf_ouçut_iÁ˚
 !
NF_OUT_FLOOD
) {

5299 
˘x
->
nf_ouçut_iÁ˚
 = 
NF_OUT_MULTI
;

5301 
	}
}

5304 
	$xœã_£t_queue_a˘i⁄
(
a˘i⁄_xœã_˘x
 *
˘x
, 
uöt32_t
 
queue_id
)

5306 
uöt32_t
 
skb_¥i‹ôy
;

5308 i‡(!
	`dpif_queue_to_¥i‹ôy
(
˘x
->
oÂrŸo
->
dpif
, 
queue_id
, &
skb_¥i‹ôy
)) {

5309 
˘x
->
Êow
.
skb_¥i‹ôy
 = skb_priority;

5314 
	}
}

5316 
	sxœã_ªg_°©e
 {

5317 
ovs_be16
 
	mvœn_tci
;

5318 
ovs_be64
 
	mtun_id
;

5322 
	$xœã_aut›©h
(
a˘i⁄_xœã_˘x
 *
˘x
,

5323 c⁄° 
oÂa˘_aut›©h
 *
≠
)

5325 
uöt16_t
 
oÂ_p‹t
 = 
≠
->
p‹t
;

5326 
oÂ‹t_dpif
 *
p‹t
 = 
	`gë_oÂ_p‹t
(
˘x
->
oÂrŸo
, 
oÂ_p‹t
);

5328 i‡(!
p‹t
 || !p‹t->
bundÀ
) {

5329 
oÂ_p‹t
 = 
OFPP_NONE
;

5330 } i‡(
p‹t
->
bundÀ
->
b⁄d
) {

5332 
oÂ‹t_dpif
 *
¶ave
 = 
	`b⁄d_choo£_ouçut_¶ave
(

5333 
p‹t
->
bundÀ
->
b⁄d
, &
˘x
->
Êow
, 0, &˘x->
ègs
);

5334 i‡(
¶ave
) {

5335 
oÂ_p‹t
 = 
¶ave
->
up
.ofp_port;

5338 
	`nxm_ªg_lﬂd
(&
≠
->
d°
, 
oÂ_p‹t
, &
˘x
->
Êow
);

5339 
	}
}

5341 
boﬁ


5342 
	$¶ave_íabÀd_cb
(
uöt16_t
 
oÂ_p‹t
, *
oÂrŸo_
)

5344 
oÂrŸo_dpif
 *
oÂrŸo
 = 
oÂrŸo_
;

5345 
oÂ‹t_dpif
 *
p‹t
;

5347 
oÂ_p‹t
) {

5348 
OFPP_IN_PORT
:

5349 
OFPP_TABLE
:

5350 
OFPP_NORMAL
:

5351 
OFPP_FLOOD
:

5352 
OFPP_ALL
:

5353 
OFPP_NONE
:

5354  
åue
;

5355 
OFPP_CONTROLLER
:

5356  
Ál£
;

5358 
p‹t
 = 
	`gë_oÂ_p‹t
(
oÂrŸo
, 
oÂ_p‹t
);

5359  
p‹t
 ?Ö‹t->
may_íabÀ
 : 
Ál£
;

5361 
	}
}

5364 
	$xœã_bundÀ_a˘i⁄
(
a˘i⁄_xœã_˘x
 *
˘x
,

5365 c⁄° 
oÂa˘_bundÀ
 *
bundÀ
)

5367 
uöt16_t
 
p‹t
;

5369 
p‹t
 = 
	`bundÀ_execuã
(
bundÀ
, &
˘x
->
Êow
, 
¶ave_íabÀd_cb
, ctx->
oÂrŸo
);

5370 i‡(
bundÀ
->
d°
.
fõld
) {

5371 
	`nxm_ªg_lﬂd
(&
bundÀ
->
d°
, 
p‹t
, &
˘x
->
Êow
);

5373 
	`xœã_ouçut_a˘i⁄
(
˘x
, 
p‹t
, 0, 
Ál£
);

5375 
	}
}

5378 
	$xœã_À¨n_a˘i⁄
(
a˘i⁄_xœã_˘x
 *
˘x
,

5379 c⁄° 
oÂa˘_À¨n
 *
À¨n
)

5381 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(5, 1);

5382 
oÂutû_Êow_mod
 
fm
;

5383 
uöt64_t
 
oÂa˘s_°ub
[1024 / 8];

5384 
oÂbuf
 
oÂa˘s
;

5385 
îr‹
;

5387 
	`oÂbuf_u£_°ack
(&
oÂa˘s
, 
oÂa˘s_°ub
,  ofpacts_stub);

5388 
	`À¨n_execuã
(
À¨n
, &
˘x
->
Êow
, &
fm
, &
oÂa˘s
);

5390 
îr‹
 = 
	`oÂrŸo_Êow_mod
(&
˘x
->
oÂrŸo
->
up
, &
fm
);

5391 i‡(
îr‹
 && !
	`VLOG_DROP_WARN
(&
æ
)) {

5392 
	`VLOG_WARN
("learningáction failedÅo modify flowÅable (%s)",

5393 
	`oÂîr_gë_«me
(
îr‹
));

5396 
	`oÂbuf_unöô
(&
oÂa˘s
);

5397 
	}
}

5402 
	$ªdu˚_timeout
(
uöt16_t
 
max
, uöt16_à*
timeout
)

5404 i‡(
max
 && (!*
timeout
 || *timeout > max)) {

5405 *
timeout
 = 
max
;

5407 
	}
}

5410 
	$xœã_fö_timeout
(
a˘i⁄_xœã_˘x
 *
˘x
,

5411 c⁄° 
oÂa˘_fö_timeout
 *
o·
)

5413 i‡(
˘x
->
t˝_Êags
 & (
TCP_FIN
 | 
TCP_RST
Ë&& ctx->
ruÀ
) {

5414 
ruÀ_dpif
 *
ruÀ
 = 
˘x
->rule;

5416 
	`ªdu˚_timeout
(
o·
->
fö_idÀ_timeout
, &
ruÀ
->
up
.
idÀ_timeout
);

5417 
	`ªdu˚_timeout
(
o·
->
fö_h¨d_timeout
, &
ruÀ
->
up
.
h¨d_timeout
);

5419 
	}
}

5421 
boﬁ


5422 
	$may_ª˚ive
(c⁄° 
oÂ‹t_dpif
 *
p‹t
, 
a˘i⁄_xœã_˘x
 *
˘x
)

5424 i‡(
p‹t
->
up
.
µ
.
c⁄fig
 & (
	`ëh_addr_equÆs
(
˘x
->
Êow
.
dl_d°
, 
ëh_addr_°p
)

5425 ? 
OFPUTIL_PC_NO_RECV_STP


5426 : 
OFPUTIL_PC_NO_RECV
)) {

5427  
Ál£
;

5434 i‡(!
	`°p_f‹w¨d_ö_°©e
(
p‹t
->
°p_°©e
)

5435 && !
	`°p_À¨n_ö_°©e
(
p‹t
->
°p_°©e
)) {

5436  
Ál£
;

5439  
åue
;

5440 
	}
}

5443 
	$xœã_nc_öô_codög_a˘i⁄
(
a˘i⁄_xœã_˘x
 *
˘x
,

5444 c⁄° 
oÂa˘
 *
a
)

5446 
	`∆_msg_put_un•ec
(
˘x
->
odp_a˘i⁄s
, 
OVS_ACTION_ATTR_INIT_CODING
,

5447 
a
+1,á->
Àn
 - (
oÂa˘
));

5448 
	}
}

5450 
	$xœã_nc_ícode_a˘i⁄
(
a˘i⁄_xœã_˘x
 *
˘x
,

5451 c⁄° 
oÂa˘
 *
a
)

5453 
	`∆_msg_put_un•ec
(
˘x
->
odp_a˘i⁄s
, 
OVS_ACTION_ATTR_ENCODE
,

5454 
a
+1,á->
Àn
 - (
oÂa˘
));

5455 
	}
}

5457 
	$xœã_nc_decode_a˘i⁄
(
a˘i⁄_xœã_˘x
 *
˘x
,

5458 c⁄° 
oÂa˘
 *
a
)

5460 
	`∆_msg_put_un•ec
(
˘x
->
odp_a˘i⁄s
, 
OVS_ACTION_ATTR_DECODE
,

5461 
a
+1,á->
Àn
 - (
oÂa˘
));

5462 
	}
}

5466 
	$do_xœã_a˘i⁄s
(c⁄° 
oÂa˘
 *
oÂa˘s
, 
size_t
 
oÂa˘s_Àn
,

5467 
a˘i⁄_xœã_˘x
 *
˘x
)

5469 c⁄° 
oÂ‹t_dpif
 *
p‹t
;

5470 
boﬁ
 
was_evi˘abÀ
 = 
åue
;

5471 c⁄° 
oÂa˘
 *
a
;

5473 
p‹t
 = 
	`gë_oÂ_p‹t
(
˘x
->
oÂrŸo
, ctx->
Êow
.
ö_p‹t
);

5474 i‡(
p‹t
 && !
	`may_ª˚ive
’‹t, 
˘x
)) {

5479 i‡(
˘x
->
ruÀ
) {

5481 
was_evi˘abÀ
 = 
˘x
->
ruÀ
->
up
.
evi˘abÀ
;

5482 
˘x
->
ruÀ
->
up
.
evi˘abÀ
 = 
Ál£
;

5484 
	`OFPACT_FOR_EACH
 (
a
, 
oÂa˘s
, 
oÂa˘s_Àn
) {

5485 
oÂa˘_c⁄åﬁÀr
 *
c⁄åﬁÀr
;

5486 c⁄° 
oÂa˘_mëad©a
 *
mëad©a
;

5488 i‡(
˘x
->
exô
) {

5492 
a
->
ty≥
) {

5493 
OFPACT_OUTPUT
:

5494 
	`xœã_ouçut_a˘i⁄
(
˘x
, 
	`oÂa˘_gë_OUTPUT
(
a
)->
p‹t
,

5495 
	`oÂa˘_gë_OUTPUT
(
a
)->
max_Àn
, 
åue
);

5498 
OFPACT_CONTROLLER
:

5499 
c⁄åﬁÀr
 = 
	`oÂa˘_gë_CONTROLLER
(
a
);

5500 
	`execuã_c⁄åﬁÀr_a˘i⁄
(
˘x
, 
c⁄åﬁÀr
->
max_Àn
,

5501 
c⁄åﬁÀr
->
ªas⁄
,

5502 
c⁄åﬁÀr
->
c⁄åﬁÀr_id
);

5505 
OFPACT_ENQUEUE
:

5506 
	`xœã_íqueue_a˘i⁄
(
˘x
, 
	`oÂa˘_gë_ENQUEUE
(
a
));

5509 
OFPACT_SET_VLAN_VID
:

5510 
˘x
->
Êow
.
vœn_tci
 &~
	`ht⁄s
(
VLAN_VID_MASK
);

5511 
˘x
->
Êow
.
vœn_tci
 |(
	`ht⁄s
(
	`oÂa˘_gë_SET_VLAN_VID
(
a
)->
vœn_vid
)

5512 | 
	`ht⁄s
(
VLAN_CFI
));

5515 
OFPACT_SET_VLAN_PCP
:

5516 
˘x
->
Êow
.
vœn_tci
 &~
	`ht⁄s
(
VLAN_PCP_MASK
);

5517 
˘x
->
Êow
.
vœn_tci
 |
	`ht⁄s
((
	`oÂa˘_gë_SET_VLAN_PCP
(
a
)->
vœn_p˝


5518 << 
VLAN_PCP_SHIFT
)

5519 | 
VLAN_CFI
);

5522 
OFPACT_STRIP_VLAN
:

5523 
˘x
->
Êow
.
vœn_tci
 = 
	`ht⁄s
(0);

5526 
OFPACT_SET_ETH_SRC
:

5527 
	`mem˝y
(
˘x
->
Êow
.
dl_§c
, 
	`oÂa˘_gë_SET_ETH_SRC
(
a
)->
mac
,

5528 
ETH_ADDR_LEN
);

5531 
OFPACT_SET_ETH_DST
:

5532 
	`mem˝y
(
˘x
->
Êow
.
dl_d°
, 
	`oÂa˘_gë_SET_ETH_DST
(
a
)->
mac
,

5533 
ETH_ADDR_LEN
);

5536 
OFPACT_SET_IPV4_SRC
:

5537 
˘x
->
Êow
.
nw_§c
 = 
	`oÂa˘_gë_SET_IPV4_SRC
(
a
)->
ùv4
;

5540 
OFPACT_SET_IPV4_DST
:

5541 
˘x
->
Êow
.
nw_d°
 = 
	`oÂa˘_gë_SET_IPV4_DST
(
a
)->
ùv4
;

5544 
OFPACT_SET_IPV4_DSCP
:

5546 i‡(
˘x
->
Êow
.
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IP
)) {

5547 
˘x
->
Êow
.
nw_tos
 &~
IP_DSCP_MASK
;

5548 
˘x
->
Êow
.
nw_tos
 |
	`oÂa˘_gë_SET_IPV4_DSCP
(
a
)->
ds˝
;

5552 
OFPACT_SET_L4_SRC_PORT
:

5553 
˘x
->
Êow
.
ç_§c
 = 
	`ht⁄s
(
	`oÂa˘_gë_SET_L4_SRC_PORT
(
a
)->
p‹t
);

5556 
OFPACT_SET_L4_DST_PORT
:

5557 
˘x
->
Êow
.
ç_d°
 = 
	`ht⁄s
(
	`oÂa˘_gë_SET_L4_DST_PORT
(
a
)->
p‹t
);

5560 
OFPACT_RESUBMIT
:

5561 
	`xœã_oÂa˘_ªsubmô
(
˘x
, 
	`oÂa˘_gë_RESUBMIT
(
a
));

5564 
OFPACT_SET_TUNNEL
:

5565 
˘x
->
Êow
.
tu¬ñ
.
tun_id
 = 
	`ht⁄Œ
(
	`oÂa˘_gë_SET_TUNNEL
(
a
)->tun_id);

5568 
OFPACT_SET_QUEUE
:

5569 
	`xœã_£t_queue_a˘i⁄
(
˘x
, 
	`oÂa˘_gë_SET_QUEUE
(
a
)->
queue_id
);

5572 
OFPACT_POP_QUEUE
:

5573 
˘x
->
Êow
.
skb_¥i‹ôy
 = ctx->
‹ig_skb_¥i‹ôy
;

5576 
OFPACT_REG_MOVE
:

5577 
	`nxm_execuã_ªg_move
(
	`oÂa˘_gë_REG_MOVE
(
a
), &
˘x
->
Êow
);

5580 
OFPACT_REG_LOAD
:

5581 
	`nxm_execuã_ªg_lﬂd
(
	`oÂa˘_gë_REG_LOAD
(
a
), &
˘x
->
Êow
);

5584 
OFPACT_DEC_TTL
:

5585 i‡(
	`compo£_dec_âl
(
˘x
, 
	`oÂa˘_gë_DEC_TTL
(
a
))) {

5586 
out
;

5590 
OFPACT_NOTE
:

5594 
OFPACT_MULTIPATH
:

5595 
	`mu…ù©h_execuã
(
	`oÂa˘_gë_MULTIPATH
(
a
), &
˘x
->
Êow
);

5598 
OFPACT_AUTOPATH
:

5599 
	`xœã_aut›©h
(
˘x
, 
	`oÂa˘_gë_AUTOPATH
(
a
));

5602 
OFPACT_BUNDLE
:

5603 
˘x
->
oÂrŸo
->
has_bundÀ_a˘i⁄
 = 
åue
;

5604 
	`xœã_bundÀ_a˘i⁄
(
˘x
, 
	`oÂa˘_gë_BUNDLE
(
a
));

5607 
OFPACT_OUTPUT_REG
:

5608 
	`xœã_ouçut_ªg_a˘i⁄
(
˘x
, 
	`oÂa˘_gë_OUTPUT_REG
(
a
));

5611 
OFPACT_LEARN
:

5612 
˘x
->
has_À¨n
 = 
åue
;

5613 i‡(
˘x
->
may_À¨n
) {

5614 
	`xœã_À¨n_a˘i⁄
(
˘x
, 
	`oÂa˘_gë_LEARN
(
a
));

5618 
OFPACT_EXIT
:

5619 
˘x
->
exô
 = 
åue
;

5622 
OFPACT_FIN_TIMEOUT
:

5623 
˘x
->
has_fö_timeout
 = 
åue
;

5624 
	`xœã_fö_timeout
(
˘x
, 
	`oÂa˘_gë_FIN_TIMEOUT
(
a
));

5627 
OFPACT_CLEAR_ACTIONS
:

5635 
OFPACT_WRITE_METADATA
:

5636 
mëad©a
 = 
	`oÂa˘_gë_WRITE_METADATA
(
a
);

5637 
˘x
->
Êow
.
mëad©a
 &~mëad©a->
mask
;

5638 
˘x
->
Êow
.
mëad©a
 |mëad©a->mëad©®& mëad©a->
mask
;

5641 
OFPACT_GOTO_TABLE
: {

5644 
oÂa˘_gŸo_èbÀ
 *
ogt
 = 
	`oÂa˘_gë_GOTO_TABLE
(
a
);

5645 
	`as£π
(
˘x
->
èbÀ_id
 < 
ogt
->table_id);

5646 
	`xœã_èbÀ_a˘i⁄
(
˘x
, ctx->
Êow
.
ö_p‹t
, 
ogt
->
èbÀ_id
, 
åue
);

5650 
OFPACT_INIT_CODING
:

5651 
	`xœã_nc_öô_codög_a˘i⁄
(
˘x
, 
a
);

5653 
OFPACT_ENCODE
:

5654 
	`xœã_nc_ícode_a˘i⁄
(
˘x
, 
a
);

5656 
OFPACT_DECODE
:

5657 
	`xœã_nc_decode_a˘i⁄
(
˘x
, 
a
);

5663 
out
:

5666 i‡(
p‹t
 && !
	`°p_f‹w¨d_ö_°©e
’‹t->
°p_°©e
)) {

5667 
	`oÂbuf_˛ór
(
˘x
->
odp_a˘i⁄s
);

5668 
	`add_sÊow_a˘i⁄
(
˘x
);

5670 i‡(
˘x
->
ruÀ
) {

5671 
˘x
->
ruÀ
->
up
.
evi˘abÀ
 = 
was_evi˘abÀ
;

5673 
	}
}

5676 
	$a˘i⁄_xœã_˘x_öô
(
a˘i⁄_xœã_˘x
 *
˘x
,

5677 
oÂrŸo_dpif
 *
oÂrŸo
, c⁄° 
Êow
 *flow,

5678 
ovs_be16
 
öôül_tci
, 
ruÀ_dpif
 *
ruÀ
,

5679 
uöt8_t
 
t˝_Êags
, c⁄° 
oÂbuf
 *
∑ckë
)

5681 
˘x
->
oÂrŸo
 = ofproto;

5682 
˘x
->
Êow
 = *flow;

5683 
˘x
->
ba£_Êow
 = ctx->
Êow
;

5684 
	`mem£t
(&
˘x
->
ba£_Êow
.
tu¬ñ
, 0,  ctx->base_flow.tunnel);

5685 
˘x
->
ba£_Êow
.
vœn_tci
 = 
öôül_tci
;

5686 
˘x
->
ruÀ
 =Ñule;

5687 
˘x
->
∑ckë
 =Öacket;

5688 
˘x
->
may_À¨n
 = 
∑ckë
 !
NULL
;

5689 
˘x
->
t˝_Êags
 =Åcp_flags;

5690 
˘x
->
ªsubmô_hook
 = 
NULL
;

5691 
˘x
->
ªp‹t_hook
 = 
NULL
;

5692 
˘x
->
ªsubmô_°©s
 = 
NULL
;

5693 
	}
}

5698 
	$xœã_a˘i⁄s
(
a˘i⁄_xœã_˘x
 *
˘x
,

5699 c⁄° 
oÂa˘
 *
oÂa˘s
, 
size_t
 
oÂa˘s_Àn
,

5700 
oÂbuf
 *
odp_a˘i⁄s
)

5705 
boﬁ
 
hô_ªsubmô_limô
;

5707 
¶ow_∑th_ªas⁄
 
•ecül
;

5709 
	`COVERAGE_INC
(
oÂrŸo_dpif_xœã
);

5711 
	`oÂbuf_˛ór
(
odp_a˘i⁄s
);

5712 
	`oÂbuf_ª£rve
(
odp_a˘i⁄s
, 
NL_A_U32_SIZE
);

5714 
˘x
->
odp_a˘i⁄s
 = odp_actions;

5715 
˘x
->
ègs
 = 0;

5716 
˘x
->
¶ow
 = 0;

5717 
˘x
->
has_À¨n
 = 
Ál£
;

5718 
˘x
->
has_n‹mÆ
 = 
Ál£
;

5719 
˘x
->
has_fö_timeout
 = 
Ál£
;

5720 
˘x
->
nf_ouçut_iÁ˚
 = 
NF_OUT_DROP
;

5721 
˘x
->
múr‹s
 = 0;

5722 
˘x
->
ªcur£
 = 0;

5723 
˘x
->
max_ªsubmô_åiggî
 = 
Ál£
;

5724 
˘x
->
‹ig_skb_¥i‹ôy
 = ctx->
Êow
.
skb_¥i‹ôy
;

5725 
˘x
->
èbÀ_id
 = 0;

5726 
˘x
->
exô
 = 
Ál£
;

5728 i‡(
˘x
->
oÂrŸo
->
has_múr‹s
 || 
hô_ªsubmô_limô
) {

5735 
˘x
->
‹ig_Êow
 = ctx->
Êow
;

5738 i‡(
˘x
->
Êow
.
nw_‰ag
 & 
FLOW_NW_FRAG_ANY
) {

5739 
˘x
->
oÂrŸo
->
up
.
‰ag_h™dlög
) {

5740 
OFPC_FRAG_NORMAL
:

5742 
˘x
->
Êow
.
ç_§c
 = ctx->
ba£_Êow
.ç_§¯
	`ht⁄s
(0);

5743 
˘x
->
Êow
.
ç_d°
 = ctx->
ba£_Êow
.ç_d° = 
	`ht⁄s
(0);

5746 
OFPC_FRAG_DROP
:

5749 
OFPC_FRAG_REASM
:

5750 
	`NOT_REACHED
();

5752 
OFPC_FRAG_NX_MATCH
:

5756 
OFPC_INVALID_TTL_TO_CONTROLLER
:

5757 
	`NOT_REACHED
();

5761 
•ecül
 = 
	`¥o˚ss_•ecül
(
˘x
->
oÂrŸo
, &˘x->
Êow
, ctx->
∑ckë
);

5762 i‡(
•ecül
) {

5763 
˘x
->
¶ow
 |
•ecül
;

5765 
vlog_øã_limô
 
åa˚_æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 1);

5766 
ovs_be16
 
öôül_tci
 = 
˘x
->
ba£_Êow
.
vœn_tci
;

5768 
	`add_sÊow_a˘i⁄
(
˘x
);

5769 
	`do_xœã_a˘i⁄s
(
oÂa˘s
, 
oÂa˘s_Àn
, 
˘x
);

5771 i‡(
˘x
->
max_ªsubmô_åiggî
 && !˘x->
ªsubmô_hook
) {

5772 i‡(!
hô_ªsubmô_limô
) {

5775 
hô_ªsubmô_limô
 = 
åue
;

5776 } i‡(!
	`VLOG_DROP_ERR
(&
åa˚_æ
)) {

5777 
ds
 d†
DS_EMPTY_INITIALIZER
;

5779 
	`oÂrŸo_åa˚
(
˘x
->
oÂrŸo
, &˘x->
‹ig_Êow
, ctx->
∑ckë
,

5780 
öôül_tci
, &
ds
);

5781 
	`VLOG_ERR
("TraceÅriggered byÉxcessiveÑesubmit "

5782 "ªcursi⁄:\n%s", 
	`ds_c°r
(&
ds
));

5783 
	`ds_de°roy
(&
ds
);

5787 i‡(!
	`c⁄nmgr_may_£t_up_Êow
(
˘x
->
oÂrŸo
->
up
.
c⁄nmgr
, &˘x->
Êow
,

5788 
˘x
->
odp_a˘i⁄s
->
d©a
,

5789 
˘x
->
odp_a˘i⁄s
->
size
)) {

5790 
˘x
->
¶ow
 |
SLOW_IN_BAND
;

5791 i‡(
˘x
->
∑ckë


5792 && 
	`c⁄nmgr_msg_ö_hook
(
˘x
->
oÂrŸo
->
up
.
c⁄nmgr
, &˘x->
Êow
,

5793 
˘x
->
∑ckë
)) {

5794 
	`compo£_ouçut_a˘i⁄
(
˘x
, 
OFPP_LOCAL
);

5797 i‡(
˘x
->
oÂrŸo
->
has_múr‹s
) {

5798 
	`add_múr‹_a˘i⁄s
(
˘x
, &˘x->
‹ig_Êow
);

5800 
	`fix_sÊow_a˘i⁄
(
˘x
);

5802 
	}
}

5807 
	$xœã_a˘i⁄s_f‹_side_ef„˘s
(
a˘i⁄_xœã_˘x
 *
˘x
,

5808 c⁄° 
oÂa˘
 *
oÂa˘s
,

5809 
size_t
 
oÂa˘s_Àn
)

5811 
uöt64_t
 
odp_a˘i⁄s_°ub
[1024 / 8];

5812 
oÂbuf
 
odp_a˘i⁄s
;

5814 
	`oÂbuf_u£_°ub
(&
odp_a˘i⁄s
, 
odp_a˘i⁄s_°ub
,  odp_actions_stub);

5815 
	`xœã_a˘i⁄s
(
˘x
, 
oÂa˘s
, 
oÂa˘s_Àn
, &
odp_a˘i⁄s
);

5816 
	`oÂbuf_unöô
(&
odp_a˘i⁄s
);

5817 
	}
}

5820 
	$xœã_ªp‹t
(
a˘i⁄_xœã_˘x
 *
˘x
, c⁄° *
s
)

5822 i‡(
˘x
->
ªp‹t_hook
) {

5823 
˘x
->
	`ªp‹t_hook
(˘x, 
s
);

5825 
	}
}

5829 
oÂ‹t_dpif
 *
ofbundÀ_gë_a_p‹t
(c⁄° 
ofbundÀ
 *);

5837 
uöt16_t


5838 
	$öput_vid_to_vœn
(c⁄° 
ofbundÀ
 *
ö_bundÀ
, 
uöt16_t
 
vid
)

5840 
ö_bundÀ
->
vœn_mode
) {

5841 
PORT_VLAN_ACCESS
:

5842  
ö_bundÀ
->
vœn
;

5845 
PORT_VLAN_TRUNK
:

5846  
vid
;

5848 
PORT_VLAN_NATIVE_UNTAGGED
:

5849 
PORT_VLAN_NATIVE_TAGGED
:

5850  
vid
 ? vid : 
ö_bundÀ
->
vœn
;

5853 
	`NOT_REACHED
();

5855 
	}
}

5864 
boﬁ


5865 
	$öput_vid_is_vÆid
(
uöt16_t
 
vid
, 
ofbundÀ
 *
ö_bundÀ
, 
boﬁ
 
w¨n
)

5868 i‡(
ö_bundÀ
 =&
oÂp_n⁄e_bundÀ
) {

5869  
åue
;

5872 
ö_bundÀ
->
vœn_mode
) {

5873 
PORT_VLAN_ACCESS
:

5874 i‡(
vid
) {

5875 i‡(
w¨n
) {

5876 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 5);

5877 
	`VLOG_WARN_RL
(&
æ
, "bridgê%s: dr›pög VLAN %"
PRIu16
"Åagged "

5879 "%"
PRIu16
"áccessÖort",

5880 
ö_bundÀ
->
oÂrŸo
->
up
.
«me
, 
vid
,

5881 
ö_bundÀ
->
«me
, in_bundÀ->
vœn
);

5883  
Ál£
;

5885  
åue
;

5887 
PORT_VLAN_NATIVE_UNTAGGED
:

5888 
PORT_VLAN_NATIVE_TAGGED
:

5889 i‡(!
vid
) {

5891  
åue
;

5894 
PORT_VLAN_TRUNK
:

5895 i‡(!
	`ofbundÀ_ö˛udes_vœn
(
ö_bundÀ
, 
vid
)) {

5896 i‡(
w¨n
) {

5897 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 5);

5898 
	`VLOG_WARN_RL
(&
æ
, "bridgê%s: dr›pög VLAN %"
PRIu16
"Öacket "

5900 "VLAN %"
PRIu16
,

5901 
ö_bundÀ
->
oÂrŸo
->
up
.
«me
, 
vid
,

5902 
ö_bundÀ
->
«me
, 
vid
);

5904  
Ál£
;

5906  
åue
;

5909 
	`NOT_REACHED
();

5912 
	}
}

5921 
uöt16_t


5922 
	$ouçut_vœn_to_vid
(c⁄° 
ofbundÀ
 *
out_bundÀ
, 
uöt16_t
 
vœn
)

5924 
out_bundÀ
->
vœn_mode
) {

5925 
PORT_VLAN_ACCESS
:

5928 
PORT_VLAN_TRUNK
:

5929 
PORT_VLAN_NATIVE_TAGGED
:

5930  
vœn
;

5932 
PORT_VLAN_NATIVE_UNTAGGED
:

5933  
vœn
 =
out_bundÀ
->vlan ? 0 : vlan;

5936 
	`NOT_REACHED
();

5938 
	}
}

5941 
	$ouçut_n‹mÆ
(
a˘i⁄_xœã_˘x
 *
˘x
, c⁄° 
ofbundÀ
 *
out_bundÀ
,

5942 
uöt16_t
 
vœn
)

5944 
oÂ‹t_dpif
 *
p‹t
;

5945 
uöt16_t
 
vid
;

5946 
ovs_be16
 
tci
, 
ﬁd_tci
;

5948 
vid
 = 
	`ouçut_vœn_to_vid
(
out_bundÀ
, 
vœn
);

5949 i‡(!
out_bundÀ
->
b⁄d
) {

5950 
p‹t
 = 
	`ofbundÀ_gë_a_p‹t
(
out_bundÀ
);

5952 
p‹t
 = 
	`b⁄d_choo£_ouçut_¶ave
(
out_bundÀ
->
b⁄d
, &
˘x
->
Êow
,

5953 
vid
, &
˘x
->
ègs
);

5954 i‡(!
p‹t
) {

5960 
ﬁd_tci
 = 
˘x
->
Êow
.
vœn_tci
;

5961 
tci
 = 
	`ht⁄s
(
vid
);

5962 i‡(
tci
 || 
out_bundÀ
->
u£_¥i‹ôy_ègs
) {

5963 
tci
 |
˘x
->
Êow
.
vœn_tci
 & 
	`ht⁄s
(
VLAN_PCP_MASK
);

5964 i‡(
tci
) {

5965 
tci
 |
	`ht⁄s
(
VLAN_CFI
);

5968 
˘x
->
Êow
.
vœn_tci
 = 
tci
;

5970 
	`compo£_ouçut_a˘i⁄
(
˘x
, 
p‹t
->
up
.
oÂ_p‹t
);

5971 
˘x
->
Êow
.
vœn_tci
 = 
ﬁd_tci
;

5972 
	}
}

5975 
	$múr‹_mask_ffs
(
múr‹_mask_t
 
mask
)

5977 
	`BUILD_ASSERT_DECL
((Ë>(
mask
));

5978  
	`ffs
(
mask
);

5979 
	}
}

5981 
boﬁ


5982 
	$ofbundÀ_åunks_vœn
(c⁄° 
ofbundÀ
 *
bundÀ
, 
uöt16_t
 
vœn
)

5984  (
bundÀ
->
vœn_mode
 !
PORT_VLAN_ACCESS


5985 && (!
bundÀ
->
åunks
 || 
	`bôm≠_is_£t
(bundÀ->åunks, 
vœn
)));

5986 
	}
}

5988 
boﬁ


5989 
	$ofbundÀ_ö˛udes_vœn
(c⁄° 
ofbundÀ
 *
bundÀ
, 
uöt16_t
 
vœn
)

5991  
vœn
 =
bundÀ
->vœ¿|| 
	`ofbundÀ_åunks_vœn
(bundle, vlan);

5992 
	}
}

5995 
oÂ‹t_dpif
 *

5996 
	$ofbundÀ_gë_a_p‹t
(c⁄° 
ofbundÀ
 *
bundÀ
)

5998  
	`CONTAINER_OF
(
	`li°_‰⁄t
(&
bundÀ
->
p‹ts
),

5999 
oÂ‹t_dpif
, 
bundÀ_node
);

6000 
	}
}

6002 
boﬁ


6003 
	$vœn_is_múr‹ed
(c⁄° 
ofmúr‹
 *
m
, 
vœn
)

6005  !
m
->
vœns
 || 
	`bôm≠_is_£t
(m->vœns, 
vœn
);

6006 
	}
}

6009 
	$add_múr‹_a˘i⁄s
(
a˘i⁄_xœã_˘x
 *
˘x
, c⁄° 
Êow
 *
‹ig_Êow
)

6011 
oÂrŸo_dpif
 *
oÂrŸo
 = 
˘x
->ofproto;

6012 
múr‹_mask_t
 
múr‹s
;

6013 
ofbundÀ
 *
ö_bundÀ
;

6014 
uöt16_t
 
vœn
;

6015 
uöt16_t
 
vid
;

6016 c⁄° 
∆©å
 *
a
;

6017 
size_t
 
À·
;

6019 
ö_bundÀ
 = 
	`lookup_öput_bundÀ
(
˘x
->
oÂrŸo
, 
‹ig_Êow
->
ö_p‹t
,

6020 
˘x
->
∑ckë
 !
NULL
, NULL);

6021 i‡(!
ö_bundÀ
) {

6024 
múr‹s
 = 
ö_bundÀ
->
§c_múr‹s
;

6027 i‡(
ö_bundÀ
->
múr‹_out
) {

6028 i‡(
˘x
->
∑ckë
 !
NULL
) {

6029 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 5);

6030 
	`VLOG_WARN_RL
(&
æ
, "bridge %s: droppingÖacketÑeceived onÖort "

6032 
˘x
->
oÂrŸo
->
up
.
«me
, 
ö_bundÀ
->name);

6038 
vid
 = 
	`vœn_tci_to_vid
(
‹ig_Êow
->
vœn_tci
);

6039 i‡(!
	`öput_vid_is_vÆid
(
vid
, 
ö_bundÀ
, 
˘x
->
∑ckë
 !
NULL
)) {

6042 
vœn
 = 
	`öput_vid_to_vœn
(
ö_bundÀ
, 
vid
);

6046 
	`NL_ATTR_FOR_EACH
 (
a
, 
À·
, 
˘x
->
odp_a˘i⁄s
->
d©a
,

6047 
˘x
->
odp_a˘i⁄s
->
size
) {

6048 
ovs_a˘i⁄_©å
 
ty≥
 = 
	`∆_©å_ty≥
(
a
);

6049 
oÂ‹t_dpif
 *
oÂ‹t
;

6051 i‡(
ty≥
 !
OVS_ACTION_ATTR_OUTPUT
) {

6055 
oÂ‹t
 = 
	`gë_odp_p‹t
(
oÂrŸo
, 
	`∆_©å_gë_u32
(
a
));

6056 i‡(
oÂ‹t
 && oÂ‹t->
bundÀ
) {

6057 
múr‹s
 |
oÂ‹t
->
bundÀ
->
d°_múr‹s
;

6061 i‡(!
múr‹s
) {

6066 
˘x
->
Êow
 = *
‹ig_Êow
;

6068 
múr‹s
) {

6069 
ofmúr‹
 *
m
;

6071 
m
 = 
oÂrŸo
->
múr‹s
[
	`múr‹_mask_ffs
(mirrors) - 1];

6073 i‡(!
	`vœn_is_múr‹ed
(
m
, 
vœn
)) {

6074 
múr‹s
 = 
	`zîo_rightmo°_1bô
(mirrors);

6078 
múr‹s
 &~
m
->
dup_múr‹s
;

6079 
˘x
->
múr‹s
 |
m
->
dup_múr‹s
;

6080 i‡(
m
->
out
) {

6081 
	`ouçut_n‹mÆ
(
˘x
, 
m
->
out
, 
vœn
);

6082 } i‡(
vœn
 !
m
->
out_vœn


6083 && !
	`ëh_addr_is_ª£rved
(
‹ig_Êow
->
dl_d°
)) {

6084 
ofbundÀ
 *
bundÀ
;

6086 
	`HMAP_FOR_EACH
 (
bundÀ
, 
hm≠_node
, &
oÂrŸo
->
bundÀs
) {

6087 i‡(
	`ofbundÀ_ö˛udes_vœn
(
bundÀ
, 
m
->
out_vœn
)

6088 && !
bundÀ
->
múr‹_out
) {

6089 
	`ouçut_n‹mÆ
(
˘x
, 
bundÀ
, 
m
->
out_vœn
);

6094 
	}
}

6097 
	$upd©e_múr‹_°©s
(
oÂrŸo_dpif
 *
oÂrŸo
, 
múr‹_mask_t
 
múr‹s
,

6098 
uöt64_t
 
∑ckës
, uöt64_à
byãs
)

6100 i‡(!
múr‹s
) {

6104 ; 
múr‹s
; múr‹†
	`zîo_rightmo°_1bô
(mirrors)) {

6105 
ofmúr‹
 *
m
;

6107 
m
 = 
oÂrŸo
->
múr‹s
[
	`múr‹_mask_ffs
(mirrors) - 1];

6109 i‡(!
m
) {

6119 
m
->
∑ckë_cou¡
 +
∑ckës
;

6120 
m
->
byã_cou¡
 +
byãs
;

6122 
	}
}

6127 
boﬁ


6128 
	$is_gøtuôous_¨p
(c⁄° 
Êow
 *flow)

6130  (
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_ARP
)

6131 && 
	`ëh_addr_is_brﬂdˇ°
(
Êow
->
dl_d°
)

6132 && (
Êow
->
nw_¥Ÿo
 =
ARP_OP_REPLY


6133 || (
Êow
->
nw_¥Ÿo
 =
ARP_OP_REQUEST


6134 && 
Êow
->
nw_§c
 =Êow->
nw_d°
)));

6135 
	}
}

6138 
	$upd©e_À¨nög_èbÀ
(
oÂrŸo_dpif
 *
oÂrŸo
,

6139 c⁄° 
Êow
 *Êow, 
vœn
,

6140 
ofbundÀ
 *
ö_bundÀ
)

6142 
mac_íåy
 *
mac
;

6145 i‡(
ö_bundÀ
 =&
oÂp_n⁄e_bundÀ
) {

6149 i‡(!
	`mac_À¨nög_may_À¨n
(
oÂrŸo
->
ml
, 
Êow
->
dl_§c
, 
vœn
)) {

6153 
mac
 = 
	`mac_À¨nög_ö£π
(
oÂrŸo
->
ml
, 
Êow
->
dl_§c
, 
vœn
);

6154 i‡(
	`is_gøtuôous_¨p
(
Êow
)) {

6157 i‡(!
ö_bundÀ
->
b⁄d
) {

6158 
	`mac_íåy_£t_gøt_¨p_lock
(
mac
);

6159 } i‡(
	`mac_íåy_is_gøt_¨p_locked
(
mac
)) {

6164 i‡(
	`mac_íåy_is_√w
(
mac
Ë|| mac->
p‹t
.
p
 !
ö_bundÀ
) {

6167 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(30, 300);

6168 
	`VLOG_DBG_RL
(&
æ
, "bridgê%s:Üó∫edÅh© "
ETH_ADDR_FMT
" is "

6170 
oÂrŸo
->
up
.
«me
, 
	`ETH_ADDR_ARGS
(
Êow
->
dl_§c
),

6171 
ö_bundÀ
->
«me
, 
vœn
);

6173 
mac
->
p‹t
.
p
 = 
ö_bundÀ
;

6174 
	`èg_£t_add
(&
oÂrŸo
->
ªvÆid©e_£t
,

6175 
	`mac_À¨nög_ch™ged
(
oÂrŸo
->
ml
, 
mac
));

6177 
	}
}

6179 
ofbundÀ
 *

6180 
	$lookup_öput_bundÀ
(c⁄° 
oÂrŸo_dpif
 *
oÂrŸo
, 
uöt16_t
 
ö_p‹t
,

6181 
boﬁ
 
w¨n
, 
oÂ‹t_dpif
 **
ö_oÂ‹ç
)

6183 
oÂ‹t_dpif
 *
oÂ‹t
;

6186 
oÂ‹t
 = 
	`gë_oÂ_p‹t
(
oÂrŸo
, 
ö_p‹t
);

6187 i‡(
ö_oÂ‹ç
) {

6188 *
ö_oÂ‹ç
 = 
oÂ‹t
;

6190 i‡(
oÂ‹t
 && oÂ‹t->
bundÀ
) {

6191  
oÂ‹t
->
bundÀ
;

6196 i‡(
ö_p‹t
 =
OFPP_NONE
) {

6197  &
oÂp_n⁄e_bundÀ
;

6213 i‡(
w¨n
) {

6214 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 5);

6216 
	`VLOG_WARN_RL
(&
æ
, "bridge %s:ÑeceivedÖacket on unknown "

6217 "p‹à%"
PRIu16
, 
oÂrŸo
->
up
.
«me
, 
ö_p‹t
);

6219  
NULL
;

6220 
	}
}

6236 
boﬁ


6237 
	$is_admissibÀ
(
a˘i⁄_xœã_˘x
 *
˘x
, 
oÂ‹t_dpif
 *
ö_p‹t
,

6238 
uöt16_t
 
vœn
)

6240 
oÂrŸo_dpif
 *
oÂrŸo
 = 
˘x
->ofproto;

6241 
Êow
 *Êow = &
˘x
->flow;

6242 
ofbundÀ
 *
ö_bundÀ
 = 
ö_p‹t
->
bundÀ
;

6246 i‡(!
oÂrŸo
->
up
.
f‹w¨d_bpdu
 && 
	`ëh_addr_is_ª£rved
(
Êow
->
dl_d°
)) {

6247 
	`xœã_ªp‹t
(
˘x
, "packet hasÑeserved destination MAC, dropping");

6248  
Ál£
;

6251 i‡(
ö_bundÀ
->
b⁄d
) {

6252 
mac_íåy
 *
mac
;

6254 
	`b⁄d_check_admissibûôy
(
ö_bundÀ
->
b⁄d
, 
ö_p‹t
,

6255 
Êow
->
dl_d°
, &
˘x
->
ègs
)) {

6256 
BV_ACCEPT
:

6259 
BV_DROP
:

6260 
	`xœã_ªp‹t
(
˘x
, "bondingÑefusedádmissibility, dropping");

6261  
Ál£
;

6263 
BV_DROP_IF_MOVED
:

6264 
mac
 = 
	`mac_À¨nög_lookup
(
oÂrŸo
->
ml
, 
Êow
->
dl_§c
, 
vœn
, 
NULL
);

6265 i‡(
mac
 && mac->
p‹t
.
p
 !
ö_bundÀ
 &&

6266 (!
	`is_gøtuôous_¨p
(
Êow
)

6267 || 
	`mac_íåy_is_gøt_¨p_locked
(
mac
))) {

6268 
	`xœã_ªp‹t
(
˘x
, "SLB bondÅhinksÅhisÖacketÜooped back, "

6270  
Ál£
;

6276  
åue
;

6277 
	}
}

6280 
	$xœã_n‹mÆ
(
a˘i⁄_xœã_˘x
 *
˘x
)

6282 
oÂ‹t_dpif
 *
ö_p‹t
;

6283 
ofbundÀ
 *
ö_bundÀ
;

6284 
mac_íåy
 *
mac
;

6285 
uöt16_t
 
vœn
;

6286 
uöt16_t
 
vid
;

6288 
˘x
->
has_n‹mÆ
 = 
åue
;

6290 
ö_bundÀ
 = 
	`lookup_öput_bundÀ
(
˘x
->
oÂrŸo
, ctx->
Êow
.
ö_p‹t
,

6291 
˘x
->
∑ckë
 !
NULL
, &
ö_p‹t
);

6292 i‡(!
ö_bundÀ
) {

6293 
	`xœã_ªp‹t
(
˘x
, "no input bundle, dropping");

6298 i‡(
˘x
->
Êow
.
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_VLAN
) &&

6299 !(
˘x
->
Êow
.
vœn_tci
 & 
	`ht⁄s
(
VLAN_CFI
))) {

6300 i‡(
˘x
->
∑ckë
 !
NULL
) {

6301 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 5);

6302 
	`VLOG_WARN_RL
(&
æ
, "bridge %s: droppingÖacket withÖartial "

6304 
˘x
->
oÂrŸo
->
up
.
«me
, 
ö_bundÀ
->name);

6306 
	`xœã_ªp‹t
(
˘x
, "partial VLANÅag, dropping");

6311 i‡(
ö_bundÀ
->
múr‹_out
) {

6312 i‡(
˘x
->
∑ckë
 !
NULL
) {

6313 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 5);

6314 
	`VLOG_WARN_RL
(&
æ
, "bridge %s: droppingÖacketÑeceived onÖort "

6316 
˘x
->
oÂrŸo
->
up
.
«me
, 
ö_bundÀ
->name);

6318 
	`xœã_ªp‹t
(
˘x
, "inputÖort is mirror outputÖort, dropping");

6323 
vid
 = 
	`vœn_tci_to_vid
(
˘x
->
Êow
.
vœn_tci
);

6324 i‡(!
	`öput_vid_is_vÆid
(
vid
, 
ö_bundÀ
, 
˘x
->
∑ckë
 !
NULL
)) {

6325 
	`xœã_ªp‹t
(
˘x
, "disallowed VLAN VID forÅhis inputÖort, dropping");

6328 
vœn
 = 
	`öput_vid_to_vœn
(
ö_bundÀ
, 
vid
);

6331 i‡(
ö_p‹t
 && !
	`is_admissibÀ
(
˘x
, in_p‹t, 
vœn
)) {

6336 i‡(
˘x
->
may_À¨n
) {

6337 
	`upd©e_À¨nög_èbÀ
(
˘x
->
oÂrŸo
, &˘x->
Êow
, 
vœn
, 
ö_bundÀ
);

6341 
mac
 = 
	`mac_À¨nög_lookup
(
˘x
->
oÂrŸo
->
ml
, ctx->
Êow
.
dl_d°
, 
vœn
,

6342 &
˘x
->
ègs
);

6343 i‡(
mac
) {

6344 i‡(
mac
->
p‹t
.
p
 !
ö_bundÀ
) {

6345 
	`xœã_ªp‹t
(
˘x
, "forwardingÅoÜearnedÖort");

6346 
	`ouçut_n‹mÆ
(
˘x
, 
mac
->
p‹t
.
p
, 
vœn
);

6348 
	`xœã_ªp‹t
(
˘x
, "learnedÖort is inputÖort, dropping");

6351 
ofbundÀ
 *
bundÀ
;

6353 
	`xœã_ªp‹t
(
˘x
, "noÜearned MAC for destination, flooding");

6354 
	`HMAP_FOR_EACH
 (
bundÀ
, 
hm≠_node
, &
˘x
->
oÂrŸo
->
bundÀs
) {

6355 i‡(
bundÀ
 !
ö_bundÀ


6356 && 
	`ofbundÀ_ö˛udes_vœn
(
bundÀ
, 
vœn
)

6357 && 
bundÀ
->
ÊoodabÀ


6358 && !
bundÀ
->
múr‹_out
) {

6359 
	`ouçut_n‹mÆ
(
˘x
, 
bundÀ
, 
vœn
);

6362 
˘x
->
nf_ouçut_iÁ˚
 = 
NF_OUT_FLOOD
;

6364 
	}
}

6389 
èg_ty≥


6390 
	$ruÀ_ˇlcuœã_èg
(c⁄° 
Êow
 *Êow, c⁄° 
möimask
 *
mask
,

6391 
uöt32_t
 
£¸ë
)

6393 i‡(
	`möimask_is_ˇtchÆl
(
mask
)) {

6396 
uöt32_t
 
hash
 = 
	`Êow_hash_ö_möimask
(
Êow
, 
mask
, 
£¸ë
);

6397  
	`èg_¸óã_dëîmöi°ic
(
hash
);

6399 
	}
}

6411 
	$èbÀ_upd©e_èggabÀ
(
oÂrŸo_dpif
 *
oÂrŸo
, 
uöt8_t
 
èbÀ_id
)

6413 
èbÀ_dpif
 *
èbÀ
 = &
oÂrŸo
->
èbÀs
[
èbÀ_id
];

6414 c⁄° 
o·abÀ
 *o·abÀ = &
oÂrŸo
->
up
.
èbÀs
[
èbÀ_id
];

6415 
˛s_èbÀ
 *
ˇtchÆl
, *
Ÿhî
;

6416 
˛s_èbÀ
 *
t
;

6418 
ˇtchÆl
 = 
Ÿhî
 = 
NULL
;

6420 
	`hm≠_cou¡
(&
o·abÀ
->
˛s
.
èbÀs
)) {

6429 
	`HMAP_FOR_EACH
 (
t
, 
hm≠_node
, &
o·abÀ
->
˛s
.
èbÀs
) {

6430 i‡(
	`˛s_èbÀ_is_ˇtchÆl
(
t
)) {

6431 
ˇtchÆl
 = 
t
;

6432 } i‡(!
Ÿhî
) {

6433 
Ÿhî
 = 
t
;

6437 
Ÿhî
 = 
NULL
;

6447 i‡(
èbÀ
->
ˇtchÆl_èbÀ
 !
ˇtchÆl
 ||ÅabÀ->
Ÿhî_èbÀ
 !
Ÿhî
) {

6448 
èbÀ
->
ˇtchÆl_èbÀ
 = 
ˇtchÆl
;

6449 
èbÀ
->
Ÿhî_èbÀ
 = 
Ÿhî
;

6450 
oÂrŸo
->
√ed_ªvÆid©e
 = 
REV_FLOW_TABLE
;

6452 
	}
}

6462 
	$ruÀ_övÆid©e
(c⁄° 
ruÀ_dpif
 *
ruÀ
)

6464 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
ruÀ
->
up
.ofproto);

6466 
	`èbÀ_upd©e_èggabÀ
(
oÂrŸo
, 
ruÀ
->
up
.
èbÀ_id
);

6468 i‡(!
oÂrŸo
->
√ed_ªvÆid©e
) {

6469 
èbÀ_dpif
 *
èbÀ
 = &
oÂrŸo
->
èbÀs
[
ruÀ
->
up
.
èbÀ_id
];

6471 i‡(
èbÀ
->
Ÿhî_èbÀ
 && 
ruÀ
->
èg
) {

6472 
	`èg_£t_add
(&
oÂrŸo
->
ªvÆid©e_£t
, 
ruÀ
->
èg
);

6474 
oÂrŸo
->
√ed_ªvÆid©e
 = 
REV_FLOW_TABLE
;

6477 
	}
}

6479 
boﬁ


6480 
	$£t_‰ag_h™dlög
(
oÂrŸo
 *
oÂrŸo_
,

6481 
oÂ_c⁄fig_Êags
 
‰ag_h™dlög
)

6483 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
oÂrŸo_
);

6485 i‡(
‰ag_h™dlög
 !
OFPC_FRAG_REASM
) {

6486 
oÂrŸo
->
√ed_ªvÆid©e
 = 
REV_RECONFIGURE
;

6487  
åue
;

6489  
Ál£
;

6491 
	}
}

6493 
oÂîr


6494 
	$∑ckë_out
(
oÂrŸo
 *
oÂrŸo_
, 
oÂbuf
 *
∑ckë
,

6495 c⁄° 
Êow
 *flow,

6496 c⁄° 
oÂa˘
 *
oÂa˘s
, 
size_t
 
oÂa˘s_Àn
)

6498 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
oÂrŸo_
);

6499 
odputû_keybuf
 
keybuf
;

6500 
dpif_Êow_°©s
 
°©s
;

6502 
oÂbuf
 
key
;

6504 
a˘i⁄_xœã_˘x
 
˘x
;

6505 
uöt64_t
 
odp_a˘i⁄s_°ub
[1024 / 8];

6506 
oÂbuf
 
odp_a˘i⁄s
;

6508 
	`oÂbuf_u£_°ack
(&
key
, &
keybuf
,  keybuf);

6509 
	`odp_Êow_key_‰om_Êow
(&
key
, 
Êow
);

6511 
	`dpif_Êow_°©s_exåa˘
(
Êow
, 
∑ckë
, 
	`time_m£c
(), &
°©s
);

6513 
	`a˘i⁄_xœã_˘x_öô
(&
˘x
, 
oÂrŸo
, 
Êow
, flow->
vœn_tci
, 
NULL
,

6514 
	`∑ckë_gë_t˝_Êags
(
∑ckë
, 
Êow
),Öacket);

6515 
˘x
.
ªsubmô_°©s
 = &
°©s
;

6517 
	`oÂbuf_u£_°ub
(&
odp_a˘i⁄s
,

6518 
odp_a˘i⁄s_°ub
,  odp_actions_stub);

6519 
	`xœã_a˘i⁄s
(&
˘x
, 
oÂa˘s
, 
oÂa˘s_Àn
, &
odp_a˘i⁄s
);

6520 
	`dpif_execuã
(
oÂrŸo
->
dpif
, 
key
.
d©a
, key.
size
,

6521 
odp_a˘i⁄s
.
d©a
, odp_a˘i⁄s.
size
, 
∑ckë
);

6522 
	`oÂbuf_unöô
(&
odp_a˘i⁄s
);

6525 
	}
}

6530 
	$£t_√tÊow
(
oÂrŸo
 *
oÂrŸo_
,

6531 c⁄° 
√tÊow_›ti⁄s
 *netflow_options)

6533 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
oÂrŸo_
);

6535 i‡(
√tÊow_›ti⁄s
) {

6536 i‡(!
oÂrŸo
->
√tÊow
) {

6537 
oÂrŸo
->
√tÊow
 = 
	`√tÊow_¸óã
();

6539  
	`√tÊow_£t_›ti⁄s
(
oÂrŸo
->
√tÊow
, 
√tÊow_›ti⁄s
);

6541 
	`√tÊow_de°roy
(
oÂrŸo
->
√tÊow
);

6542 
oÂrŸo
->
√tÊow
 = 
NULL
;

6545 
	}
}

6548 
	$gë_√tÊow_ids
(c⁄° 
oÂrŸo
 *
oÂrŸo_
,

6549 
uöt8_t
 *
ígöe_ty≥
, uöt8_à*
ígöe_id
)

6551 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
oÂrŸo_
);

6553 
	`dpif_gë_√tÊow_ids
(
oÂrŸo
->
dpif
, 
ígöe_ty≥
, 
ígöe_id
);

6554 
	}
}

6557 
	$£nd_a˘ive_timeout
(
oÂrŸo_dpif
 *
oÂrŸo
, 
Á˚t
 *facet)

6559 i‡(!
	`Á˚t_is_c⁄åﬁÀr_Êow
(
Á˚t
) &&

6560 
	`√tÊow_a˘ive_timeout_expúed
(
oÂrŸo
->
√tÊow
, &
Á˚t
->
nf_Êow
)) {

6561 
subÁ˚t
 *subfacet;

6562 
o„xpúed
 
expúed
;

6564 
	`LIST_FOR_EACH
 (
subÁ˚t
, 
li°_node
, &
Á˚t
->
subÁ˚ts
) {

6565 i‡(
subÁ˚t
->
∑th
 =
SF_FAST_PATH
) {

6566 
dpif_Êow_°©s
 
°©s
;

6568 
	`subÁ˚t_ªö°Æl
(
subÁ˚t
, &
°©s
);

6569 
	`subÁ˚t_upd©e_°©s
(
subÁ˚t
, &
°©s
);

6573 
expúed
.
Êow
 = 
Á˚t
->flow;

6574 
expúed
.
∑ckë_cou¡
 = 
Á˚t
->packet_count;

6575 
expúed
.
byã_cou¡
 = 
Á˚t
->byte_count;

6576 
expúed
.
u£d
 = 
Á˚t
->used;

6577 
	`√tÊow_expúe
(
oÂrŸo
->
√tÊow
, &
Á˚t
->
nf_Êow
, &
expúed
);

6579 
	}
}

6582 
	$£nd_√tÊow_a˘ive_timeouts
(
oÂrŸo_dpif
 *
oÂrŸo
)

6584 
Á˚t
 *facet;

6586 
	`HMAP_FOR_EACH
 (
Á˚t
, 
hm≠_node
, &
oÂrŸo
->
Á˚ts
) {

6587 
	`£nd_a˘ive_timeout
(
oÂrŸo
, 
Á˚t
);

6589 
	}
}

6591 
oÂrŸo_dpif
 *

6592 
	$oÂrŸo_dpif_lookup
(c⁄° *
«me
)

6594 
oÂrŸo_dpif
 *
oÂrŸo
;

6596 
	`HMAP_FOR_EACH_WITH_HASH
 (
oÂrŸo
, 
Æl_oÂrŸo_dpifs_node
,

6597 
	`hash_°rög
(
«me
, 0), &
Æl_oÂrŸo_dpifs
) {

6598 i‡(!
	`°rcmp
(
oÂrŸo
->
up
.
«me
,Çame)) {

6599  
oÂrŸo
;

6602  
NULL
;

6603 
	}
}

6606 
	$oÂrŸo_unix˘l_fdb_Êush
(
unix˘l_c⁄n
 *
c⁄n
, 
¨gc
,

6607 c⁄° *
¨gv
[], *
aux
 
OVS_UNUSED
)

6609 
oÂrŸo_dpif
 *
oÂrŸo
;

6611 i‡(
¨gc
 > 1) {

6612 
oÂrŸo
 = 
	`oÂrŸo_dpif_lookup
(
¨gv
[1]);

6613 i‡(!
oÂrŸo
) {

6614 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, "no such bridge");

6617 
	`mac_À¨nög_Êush
(
oÂrŸo
->
ml
, &oÂrŸo->
ªvÆid©e_£t
);

6619 
	`HMAP_FOR_EACH
 (
oÂrŸo
, 
Æl_oÂrŸo_dpifs_node
, &
Æl_oÂrŸo_dpifs
) {

6620 
	`mac_À¨nög_Êush
(
oÂrŸo
->
ml
, &oÂrŸo->
ªvÆid©e_£t
);

6624 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, "table successfully flushed");

6625 
	}
}

6628 
	$oÂrŸo_unix˘l_fdb_show
(
unix˘l_c⁄n
 *
c⁄n
, 
¨gc
 
OVS_UNUSED
,

6629 c⁄° *
¨gv
[], *
aux
 
OVS_UNUSED
)

6631 
ds
 d†
DS_EMPTY_INITIALIZER
;

6632 c⁄° 
oÂrŸo_dpif
 *
oÂrŸo
;

6633 c⁄° 
mac_íåy
 *
e
;

6635 
oÂrŸo
 = 
	`oÂrŸo_dpif_lookup
(
¨gv
[1]);

6636 i‡(!
oÂrŸo
) {

6637 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, "no such bridge");

6641 
	`ds_put_c°r
(&
ds
, "Öort VLAN MAC Age\n");

6642 
	`LIST_FOR_EACH
 (
e
, 
Ãu_node
, &
oÂrŸo
->
ml
->
Ãus
) {

6643 
ofbundÀ
 *
bundÀ
 = 
e
->
p‹t
.
p
;

6644 
	`ds_put_f‹m©
(&
ds
, "%5d %4d "
ETH_ADDR_FMT
" %3d\n",

6645 
	`ofbundÀ_gë_a_p‹t
(
bundÀ
)->
odp_p‹t
,

6646 
e
->
vœn
, 
	`ETH_ADDR_ARGS
”->
mac
),

6647 
	`mac_íåy_age
(
oÂrŸo
->
ml
, 
e
));

6649 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, 
	`ds_c°r
(&
ds
));

6650 
	`ds_de°roy
(&
ds
);

6651 
	}
}

6653 
	såa˚_˘x
 {

6654 
a˘i⁄_xœã_˘x
 
	m˘x
;

6655 
Êow
 
	mÊow
;

6656 
ds
 *
	mªsu…
;

6660 
	$åa˚_f‹m©_ruÀ
(
ds
 *
ªsu…
, 
uöt8_t
 
èbÀ_id
, 
Àvñ
,

6661 c⁄° 
ruÀ_dpif
 *
ruÀ
)

6663 
	`ds_put_ch¨_mu…ùÀ
(
ªsu…
, '\t', 
Àvñ
);

6664 i‡(!
ruÀ
) {

6665 
	`ds_put_c°r
(
ªsu…
, "No match\n");

6669 
	`ds_put_f‹m©
(
ªsu…
, "RuÀ:ÅabÀ=%"
PRIu8
" cookõ=%#"
PRIx64
" ",

6670 
èbÀ_id
, 
	`¡ohŒ
(
ruÀ
->
up
.
Êow_cookõ
));

6671 
	`˛s_ruÀ_f‹m©
(&
ruÀ
->
up
.
¸
, 
ªsu…
);

6672 
	`ds_put_ch¨
(
ªsu…
, '\n');

6674 
	`ds_put_ch¨_mu…ùÀ
(
ªsu…
, '\t', 
Àvñ
);

6675 
	`ds_put_c°r
(
ªsu…
, "OpenFlow ");

6676 
	`oÂa˘s_f‹m©
(
ruÀ
->
up
.
oÂa˘s
,ÑuÀ->up.
oÂa˘s_Àn
, 
ªsu…
);

6677 
	`ds_put_ch¨
(
ªsu…
, '\n');

6678 
	}
}

6681 
	$åa˚_f‹m©_Êow
(
ds
 *
ªsu…
, 
Àvñ
, c⁄° *
tôÀ
,

6682 
åa˚_˘x
 *
åa˚
)

6684 
	`ds_put_ch¨_mu…ùÀ
(
ªsu…
, '\t', 
Àvñ
);

6685 
	`ds_put_f‹m©
(
ªsu…
, "%s: ", 
tôÀ
);

6686 i‡(
	`Êow_equÆ
(&
åa˚
->
˘x
.
Êow
, &trace->flow)) {

6687 
	`ds_put_c°r
(
ªsu…
, "unchanged");

6689 
	`Êow_f‹m©
(
ªsu…
, &
åa˚
->
˘x
.
Êow
);

6690 
åa˚
->
Êow
 =Åø˚->
˘x
.flow;

6692 
	`ds_put_ch¨
(
ªsu…
, '\n');

6693 
	}
}

6696 
	$åa˚_f‹m©_ªgs
(
ds
 *
ªsu…
, 
Àvñ
, c⁄° *
tôÀ
,

6697 
åa˚_˘x
 *
åa˚
)

6699 
size_t
 
i
;

6701 
	`ds_put_ch¨_mu…ùÀ
(
ªsu…
, '\t', 
Àvñ
);

6702 
	`ds_put_f‹m©
(
ªsu…
, "%s:", 
tôÀ
);

6703 
i
 = 0; i < 
FLOW_N_REGS
; i++) {

6704 
	`ds_put_f‹m©
(
ªsu…
, "Ñeg%zu=0x%"
PRIx32
, 
i
, 
åa˚
->
Êow
.
ªgs
[i]);

6706 
	`ds_put_ch¨
(
ªsu…
, '\n');

6707 
	}
}

6710 
	$åa˚_f‹m©_odp
(
ds
 *
ªsu…
, 
Àvñ
, c⁄° *
tôÀ
,

6711 
åa˚_˘x
 *
åa˚
)

6713 
oÂbuf
 *
odp_a˘i⁄s
 = 
åa˚
->
˘x
.odp_actions;

6715 
	`ds_put_ch¨_mu…ùÀ
(
ªsu…
, '\t', 
Àvñ
);

6716 
	`ds_put_f‹m©
(
ªsu…
, "%s: ", 
tôÀ
);

6717 
	`f‹m©_odp_a˘i⁄s
(
ªsu…
, 
odp_a˘i⁄s
->
d©a
, odp_a˘i⁄s->
size
);

6718 
	`ds_put_ch¨
(
ªsu…
, '\n');

6719 
	}
}

6722 
	$åa˚_ªsubmô
(
a˘i⁄_xœã_˘x
 *
˘x
, 
ruÀ_dpif
 *
ruÀ
)

6724 
åa˚_˘x
 *
åa˚
 = 
	`CONTAINER_OF
(
˘x
, trace_ctx, ctx);

6725 
ds
 *
ªsu…
 = 
åa˚
->result;

6727 
	`ds_put_ch¨
(
ªsu…
, '\n');

6728 
	`åa˚_f‹m©_Êow
(
ªsu…
, 
˘x
->
ªcur£
 + 1, "Resubmôãd flow", 
åa˚
);

6729 
	`åa˚_f‹m©_ªgs
(
ªsu…
, 
˘x
->
ªcur£
 + 1, "ResubmôãdÑegs", 
åa˚
);

6730 
	`åa˚_f‹m©_odp
(
ªsu…
, 
˘x
->
ªcur£
 + 1, "Resubmôãd odp", 
åa˚
);

6731 
	`åa˚_f‹m©_ruÀ
(
ªsu…
, 
˘x
->
èbÀ_id
, ctx->
ªcur£
 + 1, 
ruÀ
);

6732 
	}
}

6735 
	$åa˚_ªp‹t
(
a˘i⁄_xœã_˘x
 *
˘x
, c⁄° *
s
)

6737 
åa˚_˘x
 *
åa˚
 = 
	`CONTAINER_OF
(
˘x
, trace_ctx, ctx);

6738 
ds
 *
ªsu…
 = 
åa˚
->result;

6740 
	`ds_put_ch¨_mu…ùÀ
(
ªsu…
, '\t', 
˘x
->
ªcur£
);

6741 
	`ds_put_c°r
(
ªsu…
, 
s
);

6742 
	`ds_put_ch¨
(
ªsu…
, '\n');

6743 
	}
}

6746 
	$oÂrŸo_unix˘l_åa˚
(
unix˘l_c⁄n
 *
c⁄n
, 
¨gc
, c⁄° *
¨gv
[],

6747 *
aux
 
OVS_UNUSED
)

6749 c⁄° *
d≤ame
 = 
¨gv
[1];

6750 
oÂrŸo_dpif
 *
oÂrŸo
;

6751 
oÂbuf
 
odp_key
;

6752 
oÂbuf
 *
∑ckë
;

6753 
ovs_be16
 
öôül_tci
;

6754 
ds
 
ªsu…
;

6755 
Êow
 flow;

6756 *
s
;

6758 
∑ckë
 = 
NULL
;

6759 
	`oÂbuf_öô
(&
odp_key
, 0);

6760 
	`ds_öô
(&
ªsu…
);

6762 
oÂrŸo
 = 
	`oÂrŸo_dpif_lookup
(
d≤ame
);

6763 i‡(!
oÂrŸo
) {

6764 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, "Unknown ofproto (use ofproto/list "

6766 
exô
;

6768 i‡(
¨gc
 =3 || (¨g¯=4 && !
	`°rcmp
(
¨gv
[3], "-generate"))) {

6770 c⁄° *
Êow_s
 = 
¨gv
[2];

6771 c⁄° *
gíî©e_s
 = 
¨gv
[3];

6783 i‡(
	`°rchr
(
Êow_s
, '(')) {

6784 
îr‹
;

6787 
	`oÂbuf_öô
(&
odp_key
, 0);

6788 
îr‹
 = 
	`odp_Êow_key_‰om_°rög
(
Êow_s
, 
NULL
, &
odp_key
);

6789 i‡(
îr‹
) {

6790 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, "Bad flow syntax");

6791 
exô
;

6795 
îr‹
 = 
	`oÂrŸo_dpif_exåa˘_Êow_key
(
oÂrŸo
, 
odp_key
.
d©a
,

6796 
odp_key
.
size
, &
Êow
,

6797 &
öôül_tci
, 
NULL
);

6798 i‡(
îr‹
 =
ODP_FIT_ERROR
) {

6799 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, "Invalid flow");

6800 
exô
;

6803 *
îr‹_s
;

6805 
îr‹_s
 = 
	`∑r£_oÂ_exa˘_Êow
(&
Êow
, 
¨gv
[2]);

6806 i‡(
îr‹_s
) {

6807 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, 
îr‹_s
);

6808 
	`‰ì
(
îr‹_s
);

6809 
exô
;

6812 
öôül_tci
 = 
Êow
.
vœn_tci
;

6813 
	`v•_adju°_Êow
(
oÂrŸo
, &
Êow
);

6817 i‡(
gíî©e_s
) {

6818 
∑ckë
 = 
	`oÂbuf_√w
(0);

6819 
	`Êow_compo£
(
∑ckë
, &
Êow
);

6821 } i‡(
¨gc
 == 7) {

6823 c⁄° *
¥i‹ôy_s
 = 
¨gv
[2];

6824 c⁄° *
tun_id_s
 = 
¨gv
[3];

6825 c⁄° *
ö_p‹t_s
 = 
¨gv
[4];

6826 c⁄° *
m¨k_s
 = 
¨gv
[5];

6827 c⁄° *
∑ckë_s
 = 
¨gv
[6];

6828 
uöt16_t
 
ö_p‹t
 = 
	`oÂ_p‹t_to_odp_p‹t
(
	`©oi
(
ö_p‹t_s
));

6829 
ovs_be64
 
tun_id
 = 
	`ht⁄Œ
(
	`°πouŒ
(
tun_id_s
, 
NULL
, 0));

6830 
uöt32_t
 
¥i‹ôy
 = 
	`©oi
(
¥i‹ôy_s
);

6831 
uöt32_t
 
m¨k
 = 
	`©oi
(
m¨k_s
);

6832 c⁄° *
msg
;

6834 
msg
 = 
	`ëh_‰om_hex
(
∑ckë_s
, &
∑ckë
);

6835 i‡(
msg
) {

6836 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, 
msg
);

6837 
exô
;

6840 
	`ds_put_c°r
(&
ªsu…
, "Packet: ");

6841 
s
 = 
	`oÂ_∑ckë_to_°rög
(
∑ckë
->
d©a
,Öackë->
size
);

6842 
	`ds_put_c°r
(&
ªsu…
, 
s
);

6843 
	`‰ì
(
s
);

6845 
	`Êow_exåa˘
(
∑ckë
, 
¥i‹ôy
, 
m¨k
, 
NULL
, 
ö_p‹t
, &
Êow
);

6846 
Êow
.
tu¬ñ
.
tun_id
 =Åun_id;

6847 
öôül_tci
 = 
Êow
.
vœn_tci
;

6849 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, "Bad command syntax");

6850 
exô
;

6853 
	`oÂrŸo_åa˚
(
oÂrŸo
, &
Êow
, 
∑ckë
, 
öôül_tci
, &
ªsu…
);

6854 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, 
	`ds_c°r
(&
ªsu…
));

6856 
exô
:

6857 
	`ds_de°roy
(&
ªsu…
);

6858 
	`oÂbuf_dñëe
(
∑ckë
);

6859 
	`oÂbuf_unöô
(&
odp_key
);

6860 
	}
}

6863 
	$oÂrŸo_åa˚
(
oÂrŸo_dpif
 *
oÂrŸo
, c⁄° 
Êow
 *flow,

6864 c⁄° 
oÂbuf
 *
∑ckë
, 
ovs_be16
 
öôül_tci
,

6865 
ds
 *ds)

6867 
ruÀ_dpif
 *
ruÀ
;

6869 
	`ds_put_c°r
(
ds
, "Flow: ");

6870 
	`Êow_f‹m©
(
ds
, 
Êow
);

6871 
	`ds_put_ch¨
(
ds
, '\n');

6873 
ruÀ
 = 
	`ruÀ_dpif_lookup
(
oÂrŸo
, 
Êow
);

6875 
	`åa˚_f‹m©_ruÀ
(
ds
, 0, 0, 
ruÀ
);

6876 i‡(
ruÀ
 =
oÂrŸo
->
miss_ruÀ
) {

6877 
	`ds_put_c°r
(
ds
, "\nNo match, flow generates \"packet in\"s.\n");

6878 } i‡(
ruÀ
 =
oÂrŸo
->
no_∑ckë_ö_ruÀ
) {

6879 
	`ds_put_c°r
(
ds
, "\nNo match,Öackets dropped because "

6883 i‡(
ruÀ
) {

6884 
uöt64_t
 
odp_a˘i⁄s_°ub
[1024 / 8];

6885 
oÂbuf
 
odp_a˘i⁄s
;

6887 
åa˚_˘x
 
åa˚
;

6888 
uöt8_t
 
t˝_Êags
;

6890 
t˝_Êags
 = 
∑ckë
 ? 
	`∑ckë_gë_t˝_Êags
’ackë, 
Êow
) : 0;

6891 
åa˚
.
ªsu…
 = 
ds
;

6892 
åa˚
.
Êow
 = *flow;

6893 
	`oÂbuf_u£_°ub
(&
odp_a˘i⁄s
,

6894 
odp_a˘i⁄s_°ub
,  odp_actions_stub);

6895 
	`a˘i⁄_xœã_˘x_öô
(&
åa˚
.
˘x
, 
oÂrŸo
, 
Êow
, 
öôül_tci
,

6896 
ruÀ
, 
t˝_Êags
, 
∑ckë
);

6897 
åa˚
.
˘x
.
ªsubmô_hook
 = 
åa˚_ªsubmô
;

6898 
åa˚
.
˘x
.
ªp‹t_hook
 = 
åa˚_ªp‹t
;

6899 
	`xœã_a˘i⁄s
(&
åa˚
.
˘x
, 
ruÀ
->
up
.
oÂa˘s
,ÑuÀ->up.
oÂa˘s_Àn
,

6900 &
odp_a˘i⁄s
);

6902 
	`ds_put_ch¨
(
ds
, '\n');

6903 
	`åa˚_f‹m©_Êow
(
ds
, 0, "FöÆ flow", &
åa˚
);

6904 
	`ds_put_c°r
(
ds
, "Datapatháctions: ");

6905 
	`f‹m©_odp_a˘i⁄s
(
ds
, 
odp_a˘i⁄s
.
d©a
, odp_a˘i⁄s.
size
);

6906 
	`oÂbuf_unöô
(&
odp_a˘i⁄s
);

6908 i‡(
åa˚
.
˘x
.
¶ow
) {

6909 
¶ow_∑th_ªas⁄
 
¶ow
;

6911 
	`ds_put_c°r
(
ds
, "\nThis flow is handled byÅhe userspace "

6913 
¶ow
 = 
åa˚
.
˘x
.slow; slow; ) {

6914 
¶ow_∑th_ªas⁄
 
bô
 = 
	`rightmo°_1bô
(
¶ow
);

6916 
bô
) {

6917 
SLOW_CFM
:

6918 
	`ds_put_c°r
(
ds
, "\n\t- Consists of CFMÖackets.");

6920 
SLOW_LACP
:

6921 
	`ds_put_c°r
(
ds
, "\n\t- Consists of LACPÖackets.");

6923 
SLOW_STP
:

6924 
	`ds_put_c°r
(
ds
, "\n\t- Consists of STPÖackets.");

6926 
SLOW_IN_BAND
:

6927 
	`ds_put_c°r
(
ds
, "\n\t- Needs in-band special case "

6929 i‡(!
∑ckë
) {

6930 
	`ds_put_c°r
(
ds
, "\n\t (The datapatháctionsáre "

6935 
SLOW_CONTROLLER
:

6936 
	`ds_put_c°r
(
ds
, "\n\t- Sends \"packet-in\" messages "

6939 
SLOW_MATCH
:

6940 
	`ds_put_c°r
(
ds
, "\n\t- Needs more specific matching "

6945 
¶ow
 &~
bô
;

6948 i‡(
¶ow
 & ~
SLOW_MATCH
) {

6949 
	`ds_put_c°r
(
ds
, "\nThe datapatháctionsábove doÇotÑeflect "

6954 
	}
}

6957 
	$oÂrŸo_dpif_˛og
(
unix˘l_c⁄n
 *
c⁄n
 
OVS_UNUSED
, 
¨gc
 OVS_UNUSED,

6958 c⁄° *
¨gv
[] 
OVS_UNUSED
, *
aux
 OVS_UNUSED)

6960 
˛ogged
 = 
åue
;

6961 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, 
NULL
);

6962 
	}
}

6965 
	$oÂrŸo_dpif_un˛og
(
unix˘l_c⁄n
 *
c⁄n
 
OVS_UNUSED
, 
¨gc
 OVS_UNUSED,

6966 c⁄° *
¨gv
[] 
OVS_UNUSED
, *
aux
 OVS_UNUSED)

6968 
˛ogged
 = 
Ál£
;

6969 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, 
NULL
);

6970 
	}
}

6975 
	$oÂrŸo_dpif_£lf_check__
(
oÂrŸo_dpif
 *
oÂrŸo
, 
ds
 *
ª∂y
)

6977 
Á˚t
 *facet;

6978 
îr‹s
;

6980 
îr‹s
 = 0;

6981 
	`HMAP_FOR_EACH
 (
Á˚t
, 
hm≠_node
, &
oÂrŸo
->
Á˚ts
) {

6982 i‡(!
	`Á˚t_check_c⁄si°ícy
(
Á˚t
)) {

6983 
îr‹s
++;

6986 i‡(
îr‹s
) {

6987 
oÂrŸo
->
√ed_ªvÆid©e
 = 
REV_INCONSISTENCY
;

6990 i‡(
îr‹s
) {

6991 
	`ds_put_f‹m©
(
ª∂y
, "%s: self-check failed (%dÉrrors)\n",

6992 
oÂrŸo
->
up
.
«me
, 
îr‹s
);

6994 
	`ds_put_f‹m©
(
ª∂y
, "%s: sñf-checkÖas£d\n", 
oÂrŸo
->
up
.
«me
);

6996 
	}
}

6999 
	$oÂrŸo_dpif_£lf_check
(
unix˘l_c⁄n
 *
c⁄n
,

7000 
¨gc
, c⁄° *
¨gv
[], *
aux
 
OVS_UNUSED
)

7002 
ds
 
ª∂y
 = 
DS_EMPTY_INITIALIZER
;

7003 
oÂrŸo_dpif
 *
oÂrŸo
;

7005 i‡(
¨gc
 > 1) {

7006 
oÂrŸo
 = 
	`oÂrŸo_dpif_lookup
(
¨gv
[1]);

7007 i‡(!
oÂrŸo
) {

7008 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, "Unknown ofproto (use "

7012 
	`oÂrŸo_dpif_£lf_check__
(
oÂrŸo
, &
ª∂y
);

7014 
	`HMAP_FOR_EACH
 (
oÂrŸo
, 
Æl_oÂrŸo_dpifs_node
, &
Æl_oÂrŸo_dpifs
) {

7015 
	`oÂrŸo_dpif_£lf_check__
(
oÂrŸo
, &
ª∂y
);

7019 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, 
	`ds_c°r
(&
ª∂y
));

7020 
	`ds_de°roy
(&
ª∂y
);

7021 
	}
}

7024 
	$oÂrŸo_dpif_unix˘l_öô
()

7026 
boﬁ
 
ªgi°îed
;

7027 i‡(
ªgi°îed
) {

7030 
ªgi°îed
 = 
åue
;

7032 
	`unix˘l_comm™d_ªgi°î
(

7035 2, 6, 
oÂrŸo_unix˘l_åa˚
, 
NULL
);

7036 
	`unix˘l_comm™d_ªgi°î
("fdb/flush", "[bridge]", 0, 1,

7037 
oÂrŸo_unix˘l_fdb_Êush
, 
NULL
);

7038 
	`unix˘l_comm™d_ªgi°î
("fdb/show", "bridge", 1, 1,

7039 
oÂrŸo_unix˘l_fdb_show
, 
NULL
);

7040 
	`unix˘l_comm™d_ªgi°î
("ofproto/clog", "", 0, 0,

7041 
oÂrŸo_dpif_˛og
, 
NULL
);

7042 
	`unix˘l_comm™d_ªgi°î
("ofproto/unclog", "", 0, 0,

7043 
oÂrŸo_dpif_un˛og
, 
NULL
);

7044 
	`unix˘l_comm™d_ªgi°î
("ofproto/self-check", "[bridge]", 0, 1,

7045 
oÂrŸo_dpif_£lf_check
, 
NULL
);

7046 
	}
}

7056 
	$£t_ªÆdev
(
oÂ‹t
 *
oÂ‹t_
, 
uöt16_t
 
ªÆdev_oÂ_p‹t
, 
vid
)

7058 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
oÂ‹t_
->ofproto);

7059 
oÂ‹t_dpif
 *
oÂ‹t
 = 
	`oÂ‹t_dpif_ˇ°
(
oÂ‹t_
);

7061 i‡(
ªÆdev_oÂ_p‹t
 =
oÂ‹t
->realdev_ofp_port

7062 && 
vid
 =
oÂ‹t
->
vœndev_vid
) {

7066 
oÂrŸo
->
√ed_ªvÆid©e
 = 
REV_RECONFIGURE
;

7068 i‡(
oÂ‹t
->
ªÆdev_oÂ_p‹t
) {

7069 
	`v•_ªmove
(
oÂ‹t
);

7071 i‡(
ªÆdev_oÂ_p‹t
 && 
oÂ‹t
->
bundÀ
) {

7074 
	`bundÀ_£t
(
oÂ‹t
->
up
.
oÂrŸo
, oÂ‹t->
bundÀ
, 
NULL
);

7077 
oÂ‹t
->
ªÆdev_oÂ_p‹t
 =Ñealdev_ofp_port;

7078 
oÂ‹t
->
vœndev_vid
 = 
vid
;

7080 i‡(
ªÆdev_oÂ_p‹t
) {

7081 
	`v•_add
(
oÂ‹t
, 
ªÆdev_oÂ_p‹t
, 
vid
);

7085 
	}
}

7087 
uöt32_t


7088 
	$hash_ªÆdev_vid
(
uöt16_t
 
ªÆdev_oÂ_p‹t
, 
vid
)

7090  
	`hash_2w‹ds
(
ªÆdev_oÂ_p‹t
, 
vid
);

7091 
	}
}

7100 
uöt32_t


7101 
	$v•_ªÆdev_to_vœndev
(c⁄° 
oÂrŸo_dpif
 *
oÂrŸo
,

7102 
uöt32_t
 
ªÆdev_odp_p‹t
, 
ovs_be16
 
vœn_tci
)

7104 i‡(!
	`hm≠_is_em±y
(&
oÂrŸo
->
ªÆdev_vid_m≠
)) {

7105 
uöt16_t
 
ªÆdev_oÂ_p‹t
 = 
	`odp_p‹t_to_oÂ_p‹t
(
ªÆdev_odp_p‹t
);

7106 
vid
 = 
	`vœn_tci_to_vid
(
vœn_tci
);

7107 c⁄° 
vœn_•löãr
 *
v•
;

7109 
	`HMAP_FOR_EACH_WITH_HASH
 (
v•
, 
ªÆdev_vid_node
,

7110 
	`hash_ªÆdev_vid
(
ªÆdev_oÂ_p‹t
, 
vid
),

7111 &
oÂrŸo
->
ªÆdev_vid_m≠
) {

7112 i‡(
v•
->
ªÆdev_oÂ_p‹t
 ==Ñealdev_ofp_port

7113 && 
v•
->
vid
 == vid) {

7114  
	`oÂ_p‹t_to_odp_p‹t
(
v•
->
vœndev_oÂ_p‹t
);

7118  
ªÆdev_odp_p‹t
;

7119 
	}
}

7121 
vœn_•löãr
 *

7122 
	$vœndev_föd
(c⁄° 
oÂrŸo_dpif
 *
oÂrŸo
, 
uöt16_t
 
vœndev_oÂ_p‹t
)

7124 
vœn_•löãr
 *
v•
;

7126 
	`HMAP_FOR_EACH_WITH_HASH
 (
v•
, 
vœndev_node
, 
	`hash_öt
(
vœndev_oÂ_p‹t
, 0),

7127 &
oÂrŸo
->
vœndev_m≠
) {

7128 i‡(
v•
->
vœndev_oÂ_p‹t
 == vlandev_ofp_port) {

7129  
v•
;

7133  
NULL
;

7134 
	}
}

7145 
uöt16_t


7146 
	$v•_vœndev_to_ªÆdev
(c⁄° 
oÂrŸo_dpif
 *
oÂrŸo
,

7147 
uöt16_t
 
vœndev_oÂ_p‹t
, *
vid
)

7149 i‡(!
	`hm≠_is_em±y
(&
oÂrŸo
->
vœndev_m≠
)) {

7150 c⁄° 
vœn_•löãr
 *
v•
;

7152 
v•
 = 
	`vœndev_föd
(
oÂrŸo
, 
vœndev_oÂ_p‹t
);

7153 i‡(
v•
) {

7154 i‡(
vid
) {

7155 *
vid
 = 
v•
->vid;

7157  
v•
->
ªÆdev_oÂ_p‹t
;

7161 
	}
}

7169 
boﬁ


7170 
	$v•_adju°_Êow
(c⁄° 
oÂrŸo_dpif
 *
oÂrŸo
, 
Êow
 *flow)

7172 
uöt16_t
 
ªÆdev
;

7173 
vid
;

7175 
ªÆdev
 = 
	`v•_vœndev_to_ªÆdev
(
oÂrŸo
, 
Êow
->
ö_p‹t
, &
vid
);

7176 i‡(!
ªÆdev
) {

7177  
Ál£
;

7182 
Êow
->
ö_p‹t
 = 
ªÆdev
;

7183 
Êow
->
vœn_tci
 = 
	`ht⁄s
((
vid
 & 
VLAN_VID_MASK
Ë| 
VLAN_CFI
);

7184  
åue
;

7185 
	}
}

7188 
	$v•_ªmove
(
oÂ‹t_dpif
 *
p‹t
)

7190 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
p‹t
->
up
.ofproto);

7191 
vœn_•löãr
 *
v•
;

7193 
v•
 = 
	`vœndev_föd
(
oÂrŸo
, 
p‹t
->
up
.
oÂ_p‹t
);

7194 i‡(
v•
) {

7195 
	`hm≠_ªmove
(&
oÂrŸo
->
vœndev_m≠
, &
v•
->
vœndev_node
);

7196 
	`hm≠_ªmove
(&
oÂrŸo
->
ªÆdev_vid_m≠
, &
v•
->
ªÆdev_vid_node
);

7197 
	`‰ì
(
v•
);

7199 
p‹t
->
ªÆdev_oÂ_p‹t
 = 0;

7201 
	`VLOG_ERR
("missing vlan deviceÑecord");

7203 
	}
}

7206 
	$v•_add
(
oÂ‹t_dpif
 *
p‹t
, 
uöt16_t
 
ªÆdev_oÂ_p‹t
, 
vid
)

7208 
oÂrŸo_dpif
 *
oÂrŸo
 = 
	`oÂrŸo_dpif_ˇ°
(
p‹t
->
up
.ofproto);

7210 i‡(!
	`v•_vœndev_to_ªÆdev
(
oÂrŸo
, 
p‹t
->
up
.
oÂ_p‹t
, 
NULL
)

7211 && (
	`v•_ªÆdev_to_vœndev
(
oÂrŸo
, 
ªÆdev_oÂ_p‹t
, 
	`ht⁄s
(
vid
))

7212 =
ªÆdev_oÂ_p‹t
)) {

7213 
vœn_•löãr
 *
v•
;

7215 
v•
 = 
	`xmÆloc
( *vsp);

7216 
	`hm≠_ö£π
(&
oÂrŸo
->
vœndev_m≠
, &
v•
->
vœndev_node
,

7217 
	`hash_öt
(
p‹t
->
up
.
oÂ_p‹t
, 0));

7218 
	`hm≠_ö£π
(&
oÂrŸo
->
ªÆdev_vid_m≠
, &
v•
->
ªÆdev_vid_node
,

7219 
	`hash_ªÆdev_vid
(
ªÆdev_oÂ_p‹t
, 
vid
));

7220 
v•
->
ªÆdev_oÂ_p‹t
 =Ñealdev_ofp_port;

7221 
v•
->
vœndev_oÂ_p‹t
 = 
p‹t
->
up
.
oÂ_p‹t
;

7222 
v•
->
vid
 = vid;

7224 
p‹t
->
ªÆdev_oÂ_p‹t
 =Ñealdev_ofp_port;

7226 
	`VLOG_ERR
("duplicate vlan deviceÑecord");

7228 
	}
}

7230 c⁄° 
oÂrŸo_˛ass
 
	goÂrŸo_dpif_˛ass
 = {

7231 
íumî©e_ty≥s
,

7232 
íumî©e_«mes
,

7233 
dñ
,

7234 
Æloc
,

7235 
c⁄°ru˘
,

7236 
de°ru˘
,

7237 
dóŒoc
,

7238 
run
,

7239 
run_Á°
,

7240 
waô
,

7241 
gë_mem‹y_ußge
,

7242 
Êush
,

7243 
gë_„©uªs
,

7244 
gë_èbÀs
,

7245 
p‹t_Æloc
,

7246 
p‹t_c⁄°ru˘
,

7247 
p‹t_de°ru˘
,

7248 
p‹t_dóŒoc
,

7249 
p‹t_modifõd
,

7250 
p‹t_ªc⁄figuªd
,

7251 
p‹t_quîy_by_«me
,

7252 
p‹t_add
,

7253 
p‹t_dñ
,

7254 
p‹t_gë_°©s
,

7255 
p‹t_dump_°¨t
,

7256 
p‹t_dump_√xt
,

7257 
p‹t_dump_d⁄e
,

7258 
p‹t_pﬁl
,

7259 
p‹t_pﬁl_waô
,

7260 
p‹t_is_œ˝_cuºít
,

7261 
NULL
,

7262 
ruÀ_Æloc
,

7263 
ruÀ_c⁄°ru˘
,

7264 
ruÀ_de°ru˘
,

7265 
ruÀ_dóŒoc
,

7266 
ruÀ_gë_°©s
,

7267 
ruÀ_execuã
,

7268 
ruÀ_modify_a˘i⁄s
,

7269 
£t_‰ag_h™dlög
,

7270 
∑ckë_out
,

7271 
£t_√tÊow
,

7272 
gë_√tÊow_ids
,

7273 
£t_sÊow
,

7274 
£t_cfm
,

7275 
gë_cfm_Áu…
,

7276 
gë_cfm_›up
,

7277 
gë_cfm_ªmŸe_mpids
,

7278 
gë_cfm_hó…h
,

7279 
£t_°p
,

7280 
gë_°p_°©us
,

7281 
£t_°p_p‹t
,

7282 
gë_°p_p‹t_°©us
,

7283 
£t_queues
,

7284 
bundÀ_£t
,

7285 
bundÀ_ªmove
,

7286 
múr‹_£t
,

7287 
múr‹_gë_°©s
,

7288 
£t_Êood_vœns
,

7289 
is_múr‹_ouçut_bundÀ
,

7290 
f‹w¨d_bpdu_ch™ged
,

7291 
£t_mac_idÀ_time
,

7292 
£t_ªÆdev
,

	@/home/lsch/mytest/openvswitch-1.9.0/ofproto/ofproto-provider.h

17 #i‚de‡
OFPROTO_OFPROTO_PROVIDER_H


18 
	#OFPROTO_OFPROTO_PROVIDER_H
 1

	)

22 
	~"oÂrŸo/oÂrŸo.h
"

23 
	~"cfm.h
"

24 
	~"˛assifõr.h
"

25 
	~"hóp.h
"

26 
	~"li°.h
"

27 
	~"oÂ-îr‹s.h
"

28 
	~"oÂ-utû.h
"

29 
	~"shash.h
"

30 
	~"timevÆ.h
"

32 
	gm©ch
;

33 
	goÂa˘
;

34 
	goÂutû_Êow_mod
;

35 
	gsim≠
;

41 
	soÂrŸo
 {

42 
hm≠_node
 
	mhm≠_node
;

43 c⁄° 
oÂrŸo_˛ass
 *
	moÂrŸo_˛ass
;

44 *
	mty≥
;

45 *
	m«me
;

48 
uöt64_t
 
	mÁŒback_dpid
;

49 
uöt64_t
 
	md©≠©h_id
;

50 
	mÊow_evi˘i⁄_thªshﬁd
;

53 
boﬁ
 
	mf‹w¨d_bpdu
;

55 *
	mm‰_desc
;

56 *
	mhw_desc
;

57 *
	msw_desc
;

58 *
	m£rül_desc
;

59 *
	mdp_desc
;

60 
oÂ_c⁄fig_Êags
 
	m‰ag_h™dlög
;

63 
hm≠
 
	mp‹ts
;

64 
shash
 
	mp‹t_by_«me
;

65 
uöt16_t
 
	mmax_p‹ts
;

68 
o·abÀ
 *
	mèbÀs
;

69 
	mn_èbÀs
;

72 
c⁄nmgr
 *
	mc⁄nmgr
;

75 
	m°©e
;

76 
li°
 
	m≥ndög
;

77 
	mn_≥ndög
;

78 
hm≠
 
	mdñëi⁄s
;

81 
	mn_add
, 
	mn_dñëe
, 
	mn_modify
;

82 
	mfú°_›
, 
	mœ°_›
;

83 
	m√xt_›_ªp‹t
;

84 
	m›_backoff
;

92 *
	mvœn_bôm≠
;

93 
boﬁ
 
	mvœns_ch™ged
;

94 
	mmö_mtu
;

97 
oÂrŸo_öô_èbÀs
(
oÂrŸo
 *, 
n_èbÀs
);

98 
oÂrŸo_öô_max_p‹ts
(
oÂrŸo
 *, 
uöt16_t
 
max_p‹ts
);

100 
oÂrŸo
 *
oÂrŸo_lookup
(c⁄° *
«me
);

101 
oÂ‹t
 *
oÂrŸo_gë_p‹t
(c⁄° 
oÂrŸo
 *, 
uöt16_t
 
oÂ_p‹t
);

107 
	soÂ‹t
 {

108 
hm≠_node
 
	mhm≠_node
;

109 
oÂrŸo
 *
	moÂrŸo
;

110 
√tdev
 *
	m√tdev
;

111 
oÂutû_phy_p‹t
 
	mµ
;

112 
uöt16_t
 
	moÂ_p‹t
;

113 
	mch™ge_£q
;

114 
	mmtu
;

117 
oÂrŸo_p‹t_£t_°©e
(
oÂ‹t
 *, 
oÂutû_p‹t_°©e
);

119 
	eo·abÀ_Êags
 {

120 
	mOFTABLE_HIDDEN
 = 1 << 0,

121 
	mOFTABLE_READONLY
 = 1 << 1

125 
	so·abÀ
 {

126 
o·abÀ_Êags
 
	mÊags
;

127 
˛assifõr
 
	m˛s
;

128 *
	m«me
;

132 
	mmax_Êows
;

143 
mf_subfõld
 *
	mevi˘i⁄_fõlds
;

144 
size_t
 
	mn_evi˘i⁄_fõlds
;

152 
uöt32_t
 
	mevi˘i⁄_group_id_basis
;

153 
hm≠
 
	mevi˘i⁄_groups_by_id
;

154 
hóp
 
	mevi˘i⁄_groups_by_size
;

160 
	#OFPROTO_FOR_EACH_TABLE
(
TABLE
, 
OFPROTO
) \

161 (
TABLE
Ë(
OFPROTO
)->
èbÀs
; \

162 (
TABLE
Ë< &(
OFPROTO
)->
èbÀs
[(OFPROTO)->
n_èbÀs
]; \

163 (
TABLE
)++)

	)

169 
	sruÀ
 {

170 
li°
 
	moÂrŸo_node
;

171 
oÂrŸo
 *
	moÂrŸo
;

172 
˛s_ruÀ
 
	m¸
;

174 
of›î©i⁄
 *
	m≥ndög
;

176 
ovs_be64
 
	mÊow_cookõ
;

178 
	m¸óãd
;

179 
	mmodifõd
;

180 
	mu£d
;

181 
uöt16_t
 
	mh¨d_timeout
;

182 
uöt16_t
 
	midÀ_timeout
;

183 
uöt8_t
 
	mèbÀ_id
;

184 
boﬁ
 
	m£nd_Êow_ªmoved
;

187 
boﬁ
 
	mevi˘abÀ
;

188 
hóp_node
 
	mevg_node
;

189 
evi˘i⁄_group
 *
	mevi˘i⁄_group
;

191 
oÂa˘
 *
	moÂa˘s
;

192 
	moÂa˘s_Àn
;

195 
nx_Êow_m⁄ô‹_Êags
 
	mm⁄ô‹_Êags
;

196 
uöt64_t
 
	madd_£qno
;

197 
uöt64_t
 
	mmodify_£qno
;

200 
ölöe
 
ruÀ
 *

201 
	$ruÀ_‰om_˛s_ruÀ
(c⁄° 
˛s_ruÀ
 *cls_rule)

203  
˛s_ruÀ
 ? 
	`CONTAINER_OF
(˛s_ruÀ, 
ruÀ
, 
¸
Ë: 
NULL
;

204 
	}
}

206 
oÂrŸo_ruÀ_upd©e_u£d
(
ruÀ
 *, 
u£d
);

207 
oÂrŸo_ruÀ_expúe
(
ruÀ
 *, 
uöt8_t
 
ªas⁄
);

208 
oÂrŸo_ruÀ_de°roy
(
ruÀ
 *);

210 
boﬁ
 
oÂrŸo_ruÀ_has_out_p‹t
(c⁄° 
ruÀ
 *, 
uöt16_t
 
out_p‹t
);

212 
of›î©i⁄_com∂ëe
(
of›î©i⁄
 *, 
oÂîr
);

213 
ruÀ
 *
of›î©i⁄_gë_vi˘im
(
of›î©i⁄
 *);

215 
boﬁ
 
of›î©i⁄_has_out_p‹t
(c⁄° 
of›î©i⁄
 *, 
uöt16_t
 
out_p‹t
);

217 
boﬁ
 
oÂrŸo_ruÀ_is_hiddí
(c⁄° 
ruÀ
 *);

318 
	soÂrŸo_˛ass
 {

326 (*
	míumî©e_ty≥s
)(
s£t
 *
	mty≥s
);

336 (*
	míumî©e_«mes
)(c⁄° *
	mty≥
, 
s£t
 *
	m«mes
);

347 (*
	mdñ
)(c⁄° *
	mty≥
, c⁄° *
	m«me
);

396 
	moÂrŸo
 *(*
	mÆloc
)();

397 (*
	mc⁄°ru˘
)(
oÂrŸo
 *
	moÂrŸo
);

398 (*
	mde°ru˘
)(
oÂrŸo
 *
	moÂrŸo
);

399 (*
	mdóŒoc
)(
oÂrŸo
 *
	moÂrŸo
);

414 (*
	mrun
)(
oÂrŸo
 *
	moÂrŸo
);

422 (*
	mrun_Á°
)(
oÂrŸo
 *
	moÂrŸo
);

427 (*
	mwaô
)(
oÂrŸo
 *
	moÂrŸo
);

433 (*
	mgë_mem‹y_ußge
)(c⁄° 
oÂrŸo
 *
	moÂrŸo
,

434 
sim≠
 *
	mußge
);

444 (*
	mÊush
)(
oÂrŸo
 *
	moÂrŸo
);

454 (*
	mgë_„©uªs
)(
oÂrŸo
 *
	moÂrŸo
,

455 
boﬁ
 *
	m¨p_m©ch_ù
,

456 
oÂutû_a˘i⁄_bôm≠
 *
	ma˘i⁄s
);

520 (*
	mgë_èbÀs
)(
oÂrŸo
 *
	moÂrŸo
, 
oÂ12_èbÀ_°©s
 *
	mŸs
);

554 
	moÂ‹t
 *(*
	mp‹t_Æloc
)();

555 (*
	mp‹t_c⁄°ru˘
)(
oÂ‹t
 *
	moÂ‹t
);

556 (*
	mp‹t_de°ru˘
)(
oÂ‹t
 *
	moÂ‹t
);

557 (*
	mp‹t_dóŒoc
)(
oÂ‹t
 *
	moÂ‹t
);

565 (*
	mp‹t_modifõd
)(
oÂ‹t
 *
	moÂ‹t
);

575 (*
	mp‹t_ªc⁄figuªd
)(
oÂ‹t
 *
	moÂ‹t
,

576 
oÂutû_p‹t_c⁄fig
 
	mﬁd_c⁄fig
);

583 (*
	mp‹t_quîy_by_«me
)(c⁄° 
oÂrŸo
 *
	moÂrŸo
,

584 c⁄° *
	mdev«me
, 
oÂrŸo_p‹t
 *
	mp‹t
);

593 (*
	mp‹t_add
)(
oÂrŸo
 *
	moÂrŸo
, 
√tdev
 *
	m√tdev
,

594 
uöt16_t
 *
	moÂ_p‹ç
);

602 (*
	mp‹t_dñ
)(
oÂrŸo
 *
	moÂrŸo
, 
uöt16_t
 
	moÂ_p‹t
);

605 (*
	mp‹t_gë_°©s
)(c⁄° 
oÂ‹t
 *
	mp‹t
,

606 
√tdev_°©s
 *
	m°©s
);

669 (*
	mp‹t_dump_°¨t
)(c⁄° 
oÂrŸo
 *
	moÂrŸo
, **
	m°©ï
);

670 (*
	mp‹t_dump_√xt
)(c⁄° 
oÂrŸo
 *
	moÂrŸo
, *
	m°©e
,

671 
oÂrŸo_p‹t
 *
	mp‹t
);

672 (*
	mp‹t_dump_d⁄e
)(c⁄° 
oÂrŸo
 *
	moÂrŸo
, *
	m°©e
);

704 (*
	mp‹t_pﬁl
)(c⁄° 
oÂrŸo
 *
	moÂrŸo
, **
	mdev«mï
);

715 (*
	mp‹t_pﬁl_waô
)(c⁄° 
oÂrŸo
 *
	moÂrŸo
);

724 (*
	mp‹t_is_œ˝_cuºít
)(c⁄° 
oÂ‹t
 *
	mp‹t
);

744 
oÂîr
 (*
ruÀ_choo£_èbÀ
)(c⁄° 
oÂrŸo
 *
	moÂrŸo
,

745 c⁄° 
m©ch
 *
	mm©ch
,

746 
uöt8_t
 *
	mèbÀ_idp
);

876 
	mruÀ
 *(*
	mruÀ_Æloc
)();

877 
oÂîr
 (*
ruÀ_c⁄°ru˘
)(
ruÀ
 *
	mruÀ
);

878 (*
	mruÀ_de°ru˘
)(
ruÀ
 *
	mruÀ
);

879 (*
	mruÀ_dóŒoc
)(
ruÀ
 *
	mruÀ
);

885 (*
	mruÀ_gë_°©s
)(
ruÀ
 *
	mruÀ
, 
uöt64_t
 *
	m∑ckë_cou¡
,

886 
uöt64_t
 *
	mbyã_cou¡
);

903 
oÂîr
 (*
ruÀ_execuã
)(
ruÀ
 *
	mruÀ
, c⁄° 
Êow
 *
	mÊow
,

904 
oÂbuf
 *
	m∑ckë
);

927 (*
	mruÀ_modify_a˘i⁄s
)(
ruÀ
 *
	mruÀ
);

957 
boﬁ
 (*
£t_‰ag_h™dlög
)(
oÂrŸo
 *
	moÂrŸo
,

958 
oÂ_c⁄fig_Êags
 
	m‰ag_h™dlög
);

998 
oÂîr
 (*
∑ckë_out
)(
oÂrŸo
 *
	moÂrŸo
, 
oÂbuf
 *
	m∑ckë
,

999 c⁄° 
Êow
 *
	mÊow
,

1000 c⁄° 
oÂa˘
 *
	moÂa˘s
,

1001 
size_t
 
	moÂa˘s_Àn
);

1012 (*
	m£t_√tÊow
)(
oÂrŸo
 *
	moÂrŸo
,

1013 c⁄° 
√tÊow_›ti⁄s
 *
	m√tÊow_›ti⁄s
);

1015 (*
	mgë_√tÊow_ids
)(c⁄° 
oÂrŸo
 *
	moÂrŸo
,

1016 
uöt8_t
 *
	mígöe_ty≥
, uöt8_à*
	mígöe_id
);

1023 (*
	m£t_sÊow
)(
oÂrŸo
 *
	moÂrŸo
,

1024 c⁄° 
oÂrŸo_sÊow_›ti⁄s
 *
	msÊow_›ti⁄s
);

1035 (*
	m£t_cfm
)(
oÂ‹t
 *
	moÂ‹t
, c⁄° 
cfm_£âögs
 *
	ms
);

1044 (*
	mgë_cfm_Áu…
)(c⁄° 
oÂ‹t
 *
	moÂ‹t
);

1053 (*
	mgë_cfm_›up
)(c⁄° 
oÂ‹t
 *
	moÂ‹t
);

1062 (*
	mgë_cfm_ªmŸe_mpids
)(c⁄° 
oÂ‹t
 *
	moÂ‹t
,

1063 c⁄° 
uöt64_t
 **
	mrmps
, 
size_t
 *
	mn_rmps
);

1074 (*
	mgë_cfm_hó…h
)(c⁄° 
oÂ‹t
 *
	moÂ‹t
);

1085 (*
	m£t_°p
)(
oÂrŸo
 *
	moÂrŸo
,

1086 c⁄° 
oÂrŸo_°p_£âögs
 *
	ms
);

1095 (*
	mgë_°p_°©us
)(
oÂrŸo
 *
	moÂrŸo
,

1096 
oÂrŸo_°p_°©us
 *
	ms
);

1110 (*
	m£t_°p_p‹t
)(
oÂ‹t
 *
	moÂ‹t
,

1111 c⁄° 
oÂrŸo_p‹t_°p_£âögs
 *
	ms
);

1120 (*
	mgë_°p_p‹t_°©us
)(
oÂ‹t
 *
	moÂ‹t
,

1121 
oÂrŸo_p‹t_°p_°©us
 *
	ms
);

1131 (*
	m£t_queues
)(
oÂ‹t
 *
	moÂ‹t
,

1132 c⁄° 
oÂrŸo_p‹t_queue
 *
	mqueues
, 
size_t
 
	mn_qds˝
);

1151 (*
	mbundÀ_£t
)(
oÂrŸo
 *
	moÂrŸo
, *
	maux
,

1152 c⁄° 
oÂrŸo_bundÀ_£âögs
 *
	ms
);

1157 (*
	mbundÀ_ªmove
)(
oÂ‹t
 *
	moÂ‹t
);

1173 (*
	mmúr‹_£t
)(
oÂrŸo
 *
	moÂrŸo
, *
	maux
,

1174 c⁄° 
oÂrŸo_múr‹_£âögs
 *
	ms
);

1183 (*
	mmúr‹_gë_°©s
)(
oÂrŸo
 *
	moÂrŸo
, *
	maux
,

1184 
uöt64_t
 *
	m∑ckës
, uöt64_à*
	mbyãs
);

1193 (*
	m£t_Êood_vœns
)(
oÂrŸo
 *
	moÂrŸo
,

1194 *
	mÊood_vœns
);

1198 
boﬁ
 (*
is_múr‹_ouçut_bundÀ
)(c⁄° 
oÂrŸo
 *
	moÂrŸo
, *
	maux
);

1202 (*
	mf‹w¨d_bpdu_ch™ged
)(
oÂrŸo
 *
	moÂrŸo
);

1206 (*
	m£t_mac_idÀ_time
)(
oÂrŸo
 *
	moÂrŸo
, 
	midÀ_time
);

1224 (*
	m£t_ªÆdev
)(
oÂ‹t
 *
	moÂ‹t
,

1225 
uöt16_t
 
	mªÆdev_oÂ_p‹t
, 
	mvid
);

1228 c⁄° 
oÂrŸo_˛ass
 
oÂrŸo_dpif_˛ass
;

1230 
oÂrŸo_˛ass_ªgi°î
(c⁄° 
oÂrŸo_˛ass
 *);

1231 
oÂrŸo_˛ass_uƒegi°î
(c⁄° 
oÂrŸo_˛ass
 *);

1242 íum { 
	mOFPROTO_POSTPONE
 = 1 << 16 };

1243 
BUILD_ASSERT_DECL
(
OFPROTO_POSTPONE
 < 
OFPERR_OFS
);

1245 
oÂrŸo_Êow_mod
(
oÂrŸo
 *, c⁄° 
oÂutû_Êow_mod
 *);

1246 
oÂrŸo_add_Êow
(
oÂrŸo
 *, c⁄° 
m©ch
 *,

1247 
¥i‹ôy
,

1248 c⁄° 
oÂa˘
 *
oÂa˘s
, 
size_t
 
oÂa˘s_Àn
);

1249 
boﬁ
 
oÂrŸo_dñëe_Êow
(
oÂrŸo
 *,

1250 c⁄° 
m©ch
 *, 
¥i‹ôy
);

1251 
oÂrŸo_Êush_Êows
(
oÂrŸo
 *);

	@/home/lsch/mytest/openvswitch-1.9.0/ofproto/ofproto.c

18 
	~<c⁄fig.h
>

19 
	~"oÂrŸo.h
"

20 
	~<î∫o.h
>

21 
	~<öây≥s.h
>

22 
	~<°dboﬁ.h
>

23 
	~<°dlib.h
>

24 
	~"bôm≠.h
"

25 
	~"byã-‹dî.h
"

26 
	~"˛assifõr.h
"

27 
	~"c⁄nmgr.h
"

28 
	~"covîage.h
"

29 
	~"dy«mic-°rög.h
"

30 
	~"hash.h
"

31 
	~"hm≠.h
"

32 
	~"mëa-Êow.h
"

33 
	~"√tdev.h
"

34 
	~"nx-m©ch.h
"

35 
	~"oÂ-a˘i⁄s.h
"

36 
	~"oÂ-îr‹s.h
"

37 
	~"oÂ-msgs.h
"

38 
	~"oÂ-¥öt.h
"

39 
	~"oÂ-utû.h
"

40 
	~"oÂbuf.h
"

41 
	~"oÂrŸo-¥ovidî.h
"

42 
	~"›íÊow/nicúa-ext.h
"

43 
	~"›íÊow/›íÊow.h
"

44 
	~"∑ckës.h
"

45 
	~"pösched.h
"

46 
	~"pktbuf.h
"

47 
	~"pﬁl-lo›.h
"

48 
	~"øndom.h
"

49 
	~"shash.h
"

50 
	~"sim≠.h
"

51 
	~"s£t.h
"

52 
	~"timevÆ.h
"

53 
	~"u«lig√d.h
"

54 
	~"unix˘l.h
"

55 
	~"vlog.h
"

57 
VLOG_DEFINE_THIS_MODULE
(
oÂrŸo
);

59 
COVERAGE_DEFINE
(
oÂrŸo_îr‹
);

60 
COVERAGE_DEFINE
(
oÂrŸo_Êush
);

61 
COVERAGE_DEFINE
(
oÂrŸo_no_∑ckë_ö
);

62 
COVERAGE_DEFINE
(
oÂrŸo_∑ckë_out
);

63 
COVERAGE_DEFINE
(
oÂrŸo_queue_ªq
);

64 
COVERAGE_DEFINE
(
oÂrŸo_ªcv_›íÊow
);

65 
COVERAGE_DEFINE
(
oÂrŸo_ªöô_p‹ts
);

66 
COVERAGE_DEFINE
(
oÂrŸo_unö°ÆœbÀ
);

67 
COVERAGE_DEFINE
(
oÂrŸo_upd©e_p‹t
);

69 
	eoÂrŸo_°©e
 {

70 
	mS_OPENFLOW
,

71 
	mS_EVICT
,

72 
	mS_FLUSH
,

75 
	eof›î©i⁄_ty≥
 {

76 
	mOFOPERATION_ADD
,

77 
	mOFOPERATION_DELETE
,

78 
	mOFOPERATION_MODIFY


87 
	sof›group
 {

88 
oÂrŸo
 *
	moÂrŸo
;

89 
li°
 
	moÂrŸo_node
;

90 
li°
 
	m›s
;

91 
	mn_ru¬ög
;

102 
li°
 
	mofc⁄n_node
;

103 
ofc⁄n
 *
	mofc⁄n
;

104 
oÂ_hódî
 *
	mªque°
;

105 
uöt32_t
 
	mbuf„r_id
;

108 
of›group
 *
of›group_¸óã_u«âached
(
oÂrŸo
 *);

109 
of›group
 *
of›group_¸óã
(
oÂrŸo
 *, 
ofc⁄n
 *,

110 c⁄° 
oÂ_hódî
 *,

111 
uöt32_t
 
buf„r_id
);

112 
of›group_submô
(
of›group
 *);

113 
of›group_com∂ëe
(
of›group
 *);

116 
	sof›î©i⁄
 {

117 
of›group
 *
	mgroup
;

118 
li°
 
	mgroup_node
;

119 
hm≠_node
 
	mhm≠_node
;

120 
ruÀ
 *
	mruÀ
;

121 
of›î©i⁄_ty≥
 
	mty≥
;

124 
ruÀ
 *
	mvi˘im
;

127 
oÂa˘
 *
	moÂa˘s
;

128 
size_t
 
	moÂa˘s_Àn
;

131 
oÂ_Êow_ªmoved_ªas⁄
 
	mªas⁄
;

133 
ovs_be64
 
	mÊow_cookõ
;

134 
oÂîr
 
	mîr‹
;

137 
of›î©i⁄
 *
of›î©i⁄_¸óã
(
of›group
 *,

138 
ruÀ
 *,

139 
of›î©i⁄_ty≥
,

140 
oÂ_Êow_ªmoved_ªas⁄
);

141 
of›î©i⁄_de°roy
(
of›î©i⁄
 *);

144 
o·abÀ_öô
(
o·abÀ
 *);

145 
o·abÀ_de°roy
(
o·abÀ
 *);

147 
o·abÀ_£t_«me
(
o·abÀ
 *, c⁄° *
«me
);

149 
o·abÀ_dißbÀ_evi˘i⁄
(
o·abÀ
 *);

150 
o·abÀ_íabÀ_evi˘i⁄
(
o·abÀ
 *,

151 c⁄° 
mf_subfõld
 *
fõlds
,

152 
size_t
 
n_fõlds
);

154 
o·abÀ_ªmove_ruÀ
(
ruÀ
 *);

155 
ruÀ
 *
o·abÀ_ª∂a˚_ruÀ
(rule *);

156 
o·abÀ_sub°ôuã_ruÀ
(
ruÀ
 *
ﬁd
, ruÀ *
√w
);

174 
	sevi˘i⁄_group
 {

175 
hm≠_node
 
	mid_node
;

176 
hóp_node
 
	msize_node
;

177 
hóp
 
	mruÀs
;

180 
ruÀ
 *
choo£_ruÀ_to_evi˘
(
o·abÀ
 *);

181 
oÂrŸo_evi˘
(
oÂrŸo
 *);

182 
uöt32_t
 
ruÀ_evi˘i⁄_¥i‹ôy
(
ruÀ
 *);

185 
oÂ‹t_de°roy__
(
oÂ‹t
 *);

186 
oÂ‹t_de°roy
(
oÂ‹t
 *);

188 
upd©e_p‹t
(
oÂrŸo
 *, c⁄° *
dev«me
);

189 
öô_p‹ts
(
oÂrŸo
 *);

190 
ªöô_p‹ts
(
oÂrŸo
 *);

193 
oÂrŸo_ruÀ_de°roy__
(
ruÀ
 *);

194 
oÂrŸo_ruÀ_£nd_ªmoved
(
ruÀ
 *, 
uöt8_t
 
ªas⁄
);

195 
boﬁ
 
ruÀ_is_modifübÀ
(c⁄° 
ruÀ
 *);

198 
oÂîr
 
add_Êow
(
oÂrŸo
 *, 
ofc⁄n
 *,

199 c⁄° 
oÂutû_Êow_mod
 *,

200 c⁄° 
oÂ_hódî
 *);

201 
dñëe_Êow__
(
ruÀ
 *, 
of›group
 *);

202 
boﬁ
 
h™dÀ_›íÊow
(
ofc⁄n
 *, 
oÂbuf
 *);

203 
oÂîr
 
h™dÀ_Êow_mod__
(
oÂrŸo
 *, 
ofc⁄n
 *,

204 c⁄° 
oÂutû_Êow_mod
 *,

205 c⁄° 
oÂ_hódî
 *);

208 
uöt64_t
 
pick_d©≠©h_id
(c⁄° 
oÂrŸo
 *);

209 
uöt64_t
 
pick_ÁŒback_dpid
();

210 
oÂrŸo_de°roy__
(
oÂrŸo
 *);

211 
upd©e_mtu
(
oÂrŸo
 *, 
oÂ‹t
 *);

214 
oÂrŸo_unix˘l_öô
();

217 c⁄° 
oÂrŸo_˛ass
 **
	goÂrŸo_˛as£s
;

218 
size_t
 
	gn_oÂrŸo_˛as£s
;

219 
size_t
 
	gÆloˇãd_oÂrŸo_˛as£s
;

222 
hm≠
 
	gÆl_oÂrŸos
 = 
HMAP_INITIALIZER
(&
Æl_oÂrŸos
);

224 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(1, 5);

227 
	$oÂrŸo_öôülize
()

229 
boﬁ
 
öôed
;

231 i‡(!
öôed
) {

232 
öôed
 = 
åue
;

233 
	`oÂrŸo_˛ass_ªgi°î
(&
oÂrŸo_dpif_˛ass
);

235 
	}
}

240 c⁄° 
oÂrŸo_˛ass
 *

241 
	$oÂrŸo_˛ass_föd__
(c⁄° *
ty≥
)

243 
size_t
 
i
;

245 
	`oÂrŸo_öôülize
();

246 
i
 = 0; i < 
n_oÂrŸo_˛as£s
; i++) {

247 c⁄° 
oÂrŸo_˛ass
 *
˛ass
 = 
oÂrŸo_˛as£s
[
i
];

248 
s£t
 
ty≥s
;

249 
boﬁ
 
found
;

251 
	`s£t_öô
(&
ty≥s
);

252 
˛ass
->
	`íumî©e_ty≥s
(&
ty≥s
);

253 
found
 = 
	`s£t_c⁄èös
(&
ty≥s
, 
ty≥
);

254 
	`s£t_de°roy
(&
ty≥s
);

256 i‡(
found
) {

257  
˛ass
;

260 
	`VLOG_WARN
("unknow¿d©≠©hÅy≥ %s", 
ty≥
);

261  
NULL
;

262 
	}
}

267 
	$oÂrŸo_˛ass_ªgi°î
(c⁄° 
oÂrŸo_˛ass
 *
√w_˛ass
)

269 
size_t
 
i
;

271 
i
 = 0; i < 
n_oÂrŸo_˛as£s
; i++) {

272 i‡(
oÂrŸo_˛as£s
[
i
] =
√w_˛ass
) {

273  
EEXIST
;

277 i‡(
n_oÂrŸo_˛as£s
 >
Æloˇãd_oÂrŸo_˛as£s
) {

278 
oÂrŸo_˛as£s
 = 
	`x2ƒóŒoc
(ofproto_classes,

279 &
Æloˇãd_oÂrŸo_˛as£s
,

280  *
oÂrŸo_˛as£s
);

282 
oÂrŸo_˛as£s
[
n_oÂrŸo_˛as£s
++] = 
√w_˛ass
;

284 
	}
}

291 
	$oÂrŸo_˛ass_uƒegi°î
(c⁄° 
oÂrŸo_˛ass
 *
˛ass
)

293 
size_t
 
i
;

295 
i
 = 0; i < 
n_oÂrŸo_˛as£s
; i++) {

296 i‡(
oÂrŸo_˛as£s
[
i
] =
˛ass
) {

297 
i
++; i < 
n_oÂrŸo_˛as£s
; i++) {

298 
oÂrŸo_˛as£s
[
i
 - 1] = ofproto_classes[i];

300 
n_oÂrŸo_˛as£s
--;

304 
	`VLOG_WARN
("attemptedÅo unregisterán ofproto classÅhat isÇot "

306  
EAFNOSUPPORT
;

307 
	}
}

312 
	$oÂrŸo_íumî©e_ty≥s
(
s£t
 *
ty≥s
)

314 
size_t
 
i
;

316 
	`oÂrŸo_öôülize
();

317 
i
 = 0; i < 
n_oÂrŸo_˛as£s
; i++) {

318 
oÂrŸo_˛as£s
[
i
]->
	`íumî©e_ty≥s
(
ty≥s
);

320 
	}
}

327 
	$oÂrŸo_n‹mÆize_ty≥
(c⁄° *
ty≥
)

329  
ty≥
 &&Åype[0] ?Åype : "system";

330 
	}
}

339 
	$oÂrŸo_íumî©e_«mes
(c⁄° *
ty≥
, 
s£t
 *
«mes
)

341 c⁄° 
oÂrŸo_˛ass
 *
˛ass
 = 
	`oÂrŸo_˛ass_föd__
(
ty≥
);

342  
˛ass
 ? cœss->
	`íumî©e_«mes
(
ty≥
, 
«mes
Ë: 
EAFNOSUPPORT
;

343 
	}
}

346 
	$oÂrŸo_¸óã
(c⁄° *
d©≠©h_«me
, c⁄° *
d©≠©h_ty≥
,

347 
oÂrŸo
 **
oÂrŸ›
)

349 c⁄° 
oÂrŸo_˛ass
 *
˛ass
;

350 
oÂrŸo
 *ofproto;

351 
îr‹
;

353 *
oÂrŸ›
 = 
NULL
;

355 
	`oÂrŸo_öôülize
();

356 
	`oÂrŸo_unix˘l_öô
();

358 
d©≠©h_ty≥
 = 
	`oÂrŸo_n‹mÆize_ty≥
(datapath_type);

359 
˛ass
 = 
	`oÂrŸo_˛ass_föd__
(
d©≠©h_ty≥
);

360 i‡(!
˛ass
) {

361 
	`VLOG_WARN
("couldÇot create datapath %s of unknownÅype %s",

362 
d©≠©h_«me
, 
d©≠©h_ty≥
);

363  
EAFNOSUPPORT
;

366 
oÂrŸo
 = 
˛ass
->
	`Æloc
();

367 i‡(!
oÂrŸo
) {

368 
	`VLOG_ERR
("failedÅoállocate datapath %s ofÅype %s",

369 
d©≠©h_«me
, 
d©≠©h_ty≥
);

370  
ENOMEM
;

374 
	`mem£t
(
oÂrŸo
, 0,  *ofproto);

375 
oÂrŸo
->
oÂrŸo_˛ass
 = 
˛ass
;

376 
oÂrŸo
->
«me
 = 
	`x°rdup
(
d©≠©h_«me
);

377 
oÂrŸo
->
ty≥
 = 
	`x°rdup
(
d©≠©h_ty≥
);

378 
	`hm≠_ö£π
(&
Æl_oÂrŸos
, &
oÂrŸo
->
hm≠_node
,

379 
	`hash_°rög
(
oÂrŸo
->
«me
, 0));

380 
oÂrŸo
->
d©≠©h_id
 = 0;

381 
	`oÂrŸo_£t_Êow_evi˘i⁄_thªshﬁd
(
oÂrŸo
,

382 
OFPROTO_FLOW_EVICTION_THRESHOLD_DEFAULT
);

383 
oÂrŸo
->
f‹w¨d_bpdu
 = 
Ál£
;

384 
oÂrŸo
->
ÁŒback_dpid
 = 
	`pick_ÁŒback_dpid
();

385 
oÂrŸo
->
m‰_desc
 = 
	`x°rdup
(
DEFAULT_MFR_DESC
);

386 
oÂrŸo
->
hw_desc
 = 
	`x°rdup
(
DEFAULT_HW_DESC
);

387 
oÂrŸo
->
sw_desc
 = 
	`x°rdup
(
DEFAULT_SW_DESC
);

388 
oÂrŸo
->
£rül_desc
 = 
	`x°rdup
(
DEFAULT_SERIAL_DESC
);

389 
oÂrŸo
->
dp_desc
 = 
	`x°rdup
(
DEFAULT_DP_DESC
);

390 
oÂrŸo
->
‰ag_h™dlög
 = 
OFPC_FRAG_NORMAL
;

391 
	`hm≠_öô
(&
oÂrŸo
->
p‹ts
);

392 
	`shash_öô
(&
oÂrŸo
->
p‹t_by_«me
);

393 
oÂrŸo
->
max_p‹ts
 = 
OFPP_MAX
;

394 
oÂrŸo
->
èbÀs
 = 
NULL
;

395 
oÂrŸo
->
n_èbÀs
 = 0;

396 
oÂrŸo
->
c⁄nmgr
 = 
	`c⁄nmgr_¸óã
(oÂrŸo, 
d©≠©h_«me
, datapath_name);

397 
oÂrŸo
->
°©e
 = 
S_OPENFLOW
;

398 
	`li°_öô
(&
oÂrŸo
->
≥ndög
);

399 
oÂrŸo
->
n_≥ndög
 = 0;

400 
	`hm≠_öô
(&
oÂrŸo
->
dñëi⁄s
);

401 
oÂrŸo
->
n_add
 = oÂrŸo->
n_dñëe
 = oÂrŸo->
n_modify
 = 0;

402 
oÂrŸo
->
fú°_›
 = oÂrŸo->
œ°_›
 = 
LLONG_MIN
;

403 
oÂrŸo
->
√xt_›_ªp‹t
 = 
LLONG_MAX
;

404 
oÂrŸo
->
›_backoff
 = 
LLONG_MIN
;

405 
oÂrŸo
->
vœn_bôm≠
 = 
NULL
;

406 
oÂrŸo
->
vœns_ch™ged
 = 
Ál£
;

407 
oÂrŸo
->
mö_mtu
 = 
INT_MAX
;

409 
îr‹
 = 
oÂrŸo
->
oÂrŸo_˛ass
->
	`c⁄°ru˘
(ofproto);

410 i‡(
îr‹
) {

411 
	`VLOG_ERR
("failedÅo open datapath %s: %s",

412 
d©≠©h_«me
, 
	`°ªº‹
(
îr‹
));

413 
	`oÂrŸo_de°roy__
(
oÂrŸo
);

414  
îr‹
;

417 
	`as£π
(
oÂrŸo
->
n_èbÀs
);

419 
oÂrŸo
->
d©≠©h_id
 = 
	`pick_d©≠©h_id
(ofproto);

420 
	`öô_p‹ts
(
oÂrŸo
);

422 *
oÂrŸ›
 = 
oÂrŸo
;

424 
	}
}

430 
	$oÂrŸo_öô_èbÀs
(
oÂrŸo
 *oÂrŸo, 
n_èbÀs
)

432 
o·abÀ
 *
èbÀ
;

434 
	`as£π
(!
oÂrŸo
->
n_èbÀs
);

435 
	`as£π
(
n_èbÀs
 >= 1 &&Ç_tables <= 255);

437 
oÂrŸo
->
n_èbÀs
 =Ç_tables;

438 
oÂrŸo
->
èbÀs
 = 
	`xmÆloc
(
n_èbÀs
 *  *ofproto->tables);

439 
	`OFPROTO_FOR_EACH_TABLE
 (
èbÀ
, 
oÂrŸo
) {

440 
	`o·abÀ_öô
(
èbÀ
);

442 
	}
}

456 
	$oÂrŸo_öô_max_p‹ts
(
oÂrŸo
 *oÂrŸo, 
uöt16_t
 
max_p‹ts
)

458 
	`as£π
(
max_p‹ts
 <
OFPP_MAX
);

459 
oÂrŸo
->
max_p‹ts
 = max_ports;

460 
	}
}

462 
uöt64_t


463 
	$oÂrŸo_gë_d©≠©h_id
(c⁄° 
oÂrŸo
 *ofproto)

465  
oÂrŸo
->
d©≠©h_id
;

466 
	}
}

469 
	$oÂrŸo_£t_d©≠©h_id
(
oÂrŸo
 *
p
, 
uöt64_t
 
d©≠©h_id
)

471 
uöt64_t
 
ﬁd_dpid
 = 
p
->
d©≠©h_id
;

472 
p
->
d©≠©h_id
 = d©≠©h_id ? d©≠©h_id : 
	`pick_d©≠©h_id
(p);

473 i‡(
p
->
d©≠©h_id
 !
ﬁd_dpid
) {

476 
	`oÂrŸo_ªc⁄√˘_c⁄åﬁÀrs
(
p
);

478 
	}
}

481 
	$oÂrŸo_£t_c⁄åﬁÀrs
(
oÂrŸo
 *
p
,

482 c⁄° 
oÂrŸo_c⁄åﬁÀr
 *
c⁄åﬁÀrs
,

483 
size_t
 
n_c⁄åﬁÀrs
)

485 
	`c⁄nmgr_£t_c⁄åﬁÀrs
(
p
->
c⁄nmgr
, 
c⁄åﬁÀrs
, 
n_c⁄åﬁÀrs
);

486 
	}
}

489 
	$oÂrŸo_£t_Áû_mode
(
oÂrŸo
 *
p
, 
oÂrŸo_Áû_mode
 
Áû_mode
)

491 
	`c⁄nmgr_£t_Áû_mode
(
p
->
c⁄nmgr
, 
Áû_mode
);

492 
	}
}

497 
	$oÂrŸo_ªc⁄√˘_c⁄åﬁÀrs
(
oÂrŸo
 *ofproto)

499 
	`c⁄nmgr_ªc⁄√˘
(
oÂrŸo
->
c⁄nmgr
);

500 
	}
}

506 
	$oÂrŸo_£t_exåa_ö_b™d_ªmŸes
(
oÂrŸo
 *ofproto,

507 c⁄° 
sockaddr_ö
 *
exåas
, 
size_t
 
n
)

509 
	`c⁄nmgr_£t_exåa_ö_b™d_ªmŸes
(
oÂrŸo
->
c⁄nmgr
, 
exåas
, 
n
);

510 
	}
}

516 
	$oÂrŸo_£t_ö_b™d_queue
(
oÂrŸo
 *oÂrŸo, 
queue_id
)

518 
	`c⁄nmgr_£t_ö_b™d_queue
(
oÂrŸo
->
c⁄nmgr
, 
queue_id
);

519 
	}
}

524 
	$oÂrŸo_£t_Êow_evi˘i⁄_thªshﬁd
(
oÂrŸo
 *oÂrŸo, 
thªshﬁd
)

526 i‡(
thªshﬁd
 < 
OFPROTO_FLOW_EVICTION_THRESHOLD_MIN
) {

527 
oÂrŸo
->
Êow_evi˘i⁄_thªshﬁd
 = 
OFPROTO_FLOW_EVICTION_THRESHOLD_MIN
;

529 
oÂrŸo
->
Êow_evi˘i⁄_thªshﬁd
 = 
thªshﬁd
;

531 
	}
}

537 
	$oÂrŸo_£t_f‹w¨d_bpdu
(
oÂrŸo
 *oÂrŸo, 
boﬁ
 
f‹w¨d_bpdu
)

539 
boﬁ
 
ﬁd_vÆ
 = 
oÂrŸo
->
f‹w¨d_bpdu
;

540 
oÂrŸo
->
f‹w¨d_bpdu
 = forward_bpdu;

541 i‡(
ﬁd_vÆ
 !
oÂrŸo
->
f‹w¨d_bpdu
) {

542 i‡(
oÂrŸo
->
oÂrŸo_˛ass
->
f‹w¨d_bpdu_ch™ged
) {

543 
oÂrŸo
->
oÂrŸo_˛ass
->
	`f‹w¨d_bpdu_ch™ged
(ofproto);

546 
	}
}

551 
	$oÂrŸo_£t_mac_idÀ_time
(
oÂrŸo
 *oÂrŸo, 
idÀ_time
)

553 i‡(
oÂrŸo
->
oÂrŸo_˛ass
->
£t_mac_idÀ_time
) {

554 
oÂrŸo
->
oÂrŸo_˛ass
->
	`£t_mac_idÀ_time
(oÂrŸo, 
idÀ_time
);

556 
	}
}

559 
	$oÂrŸo_£t_desc
(
oÂrŸo
 *
p
,

560 c⁄° *
m‰_desc
, c⁄° *
hw_desc
,

561 c⁄° *
sw_desc
, c⁄° *
£rül_desc
,

562 c⁄° *
dp_desc
)

564 
oÂ_desc_°©s
 *
ods
;

566 i‡(
m‰_desc
) {

567 i‡(
	`°æí
(
m‰_desc
Ë> 
ods
->mfr_desc) {

568 
	`VLOG_WARN
("%s:Åruncating mfr_desc, must beÜessÅhan %zu bytes",

569 
p
->
«me
,  
ods
->
m‰_desc
);

571 
	`‰ì
(
p
->
m‰_desc
);

572 
p
->
m‰_desc
 = 
	`x°rdup
(mfr_desc);

574 i‡(
hw_desc
) {

575 i‡(
	`°æí
(
hw_desc
Ë> 
ods
->hw_desc) {

576 
	`VLOG_WARN
("%s:Åruncating hw_desc, must beÜessÅhan %zu bytes",

577 
p
->
«me
,  
ods
->
hw_desc
);

579 
	`‰ì
(
p
->
hw_desc
);

580 
p
->
hw_desc
 = 
	`x°rdup
(hw_desc);

582 i‡(
sw_desc
) {

583 i‡(
	`°æí
(
sw_desc
Ë> 
ods
->sw_desc) {

584 
	`VLOG_WARN
("%s:Åruncating sw_desc, must beÜessÅhan %zu bytes",

585 
p
->
«me
,  
ods
->
sw_desc
);

587 
	`‰ì
(
p
->
sw_desc
);

588 
p
->
sw_desc
 = 
	`x°rdup
(sw_desc);

590 i‡(
£rül_desc
) {

591 i‡(
	`°æí
(
£rül_desc
Ë> 
ods
->
£rül_num
) {

592 
	`VLOG_WARN
("%s:Åruncating serial_desc, must beÜessÅhan %zu "

593 "byãs", 
p
->
«me
,  
ods
->
£rül_num
);

595 
	`‰ì
(
p
->
£rül_desc
);

596 
p
->
£rül_desc
 = 
	`x°rdup
(serial_desc);

598 i‡(
dp_desc
) {

599 i‡(
	`°æí
(
dp_desc
Ë> 
ods
->dp_desc) {

600 
	`VLOG_WARN
("%s:Åruncating dp_desc, must beÜessÅhan %zu bytes",

601 
p
->
«me
,  
ods
->
dp_desc
);

603 
	`‰ì
(
p
->
dp_desc
);

604 
p
->
dp_desc
 = 
	`x°rdup
(dp_desc);

606 
	}
}

609 
	$oÂrŸo_£t_¢o›s
(
oÂrŸo
 *oÂrŸo, c⁄° 
s£t
 *
¢o›s
)

611  
	`c⁄nmgr_£t_¢o›s
(
oÂrŸo
->
c⁄nmgr
, 
¢o›s
);

612 
	}
}

615 
	$oÂrŸo_£t_√tÊow
(
oÂrŸo
 *ofproto,

616 c⁄° 
√tÊow_›ti⁄s
 *
nf_›ti⁄s
)

618 i‡(
nf_›ti⁄s
 && 
	`s£t_is_em±y
(&nf_›ti⁄s->
cﬁÀ˘‹s
)) {

619 
nf_›ti⁄s
 = 
NULL
;

622 i‡(
oÂrŸo
->
oÂrŸo_˛ass
->
£t_√tÊow
) {

623  
oÂrŸo
->
oÂrŸo_˛ass
->
	`£t_√tÊow
(oÂrŸo, 
nf_›ti⁄s
);

625  
nf_›ti⁄s
 ? 
EOPNOTSUPP
 : 0;

627 
	}
}

630 
	$oÂrŸo_£t_sÊow
(
oÂrŸo
 *ofproto,

631 c⁄° 
oÂrŸo_sÊow_›ti⁄s
 *
oso
)

633 i‡(
oso
 && 
	`s£t_is_em±y
(&oso->
èrgës
)) {

634 
oso
 = 
NULL
;

637 i‡(
oÂrŸo
->
oÂrŸo_˛ass
->
£t_sÊow
) {

638  
oÂrŸo
->
oÂrŸo_˛ass
->
	`£t_sÊow
(oÂrŸo, 
oso
);

640  
oso
 ? 
EOPNOTSUPP
 : 0;

642 
	}
}

651 
	$oÂrŸo_£t_°p
(
oÂrŸo
 *ofproto,

652 c⁄° 
oÂrŸo_°p_£âögs
 *
s
)

654  (
oÂrŸo
->
oÂrŸo_˛ass
->
£t_°p


655 ? 
oÂrŸo
->
oÂrŸo_˛ass
->
	`£t_°p
(oÂrŸo, 
s
)

656 : 
EOPNOTSUPP
);

657 
	}
}

665 
	$oÂrŸo_gë_°p_°©us
(
oÂrŸo
 *ofproto,

666 
oÂrŸo_°p_°©us
 *
s
)

668  (
oÂrŸo
->
oÂrŸo_˛ass
->
gë_°p_°©us


669 ? 
oÂrŸo
->
oÂrŸo_˛ass
->
	`gë_°p_°©us
(oÂrŸo, 
s
)

670 : 
EOPNOTSUPP
);

671 
	}
}

681 
	$oÂrŸo_p‹t_£t_°p
(
oÂrŸo
 *oÂrŸo, 
uöt16_t
 
oÂ_p‹t
,

682 c⁄° 
oÂrŸo_p‹t_°p_£âögs
 *
s
)

684 
oÂ‹t
 *oÂ‹à
	`oÂrŸo_gë_p‹t
(
oÂrŸo
, 
oÂ_p‹t
);

685 i‡(!
oÂ‹t
) {

686 
	`VLOG_WARN
("%s: c™nŸ c⁄figuª STP o¿n⁄exi°íàp‹à%"
PRIu16
,

687 
oÂrŸo
->
«me
, 
oÂ_p‹t
);

688  
ENODEV
;

691  (
oÂrŸo
->
oÂrŸo_˛ass
->
£t_°p_p‹t


692 ? 
oÂrŸo
->
oÂrŸo_˛ass
->
	`£t_°p_p‹t
(
oÂ‹t
, 
s
)

693 : 
EOPNOTSUPP
);

694 
	}
}

702 
	$oÂrŸo_p‹t_gë_°p_°©us
(
oÂrŸo
 *oÂrŸo, 
uöt16_t
 
oÂ_p‹t
,

703 
oÂrŸo_p‹t_°p_°©us
 *
s
)

705 
oÂ‹t
 *oÂ‹à
	`oÂrŸo_gë_p‹t
(
oÂrŸo
, 
oÂ_p‹t
);

706 i‡(!
oÂ‹t
) {

707 
	`VLOG_WARN_RL
(&
æ
, "%s: cannot get STP status onÇonexistent "

708 "p‹à%"
PRIu16
, 
oÂrŸo
->
«me
, 
oÂ_p‹t
);

709  
ENODEV
;

712  (
oÂrŸo
->
oÂrŸo_˛ass
->
gë_°p_p‹t_°©us


713 ? 
oÂrŸo
->
oÂrŸo_˛ass
->
	`gë_°p_p‹t_°©us
(
oÂ‹t
, 
s
)

714 : 
EOPNOTSUPP
);

715 
	}
}

727 
	$oÂrŸo_p‹t_£t_queues
(
oÂrŸo
 *oÂrŸo, 
uöt16_t
 
oÂ_p‹t
,

728 c⁄° 
oÂrŸo_p‹t_queue
 *
queues
,

729 
size_t
 
n_queues
)

731 
oÂ‹t
 *oÂ‹à
	`oÂrŸo_gë_p‹t
(
oÂrŸo
, 
oÂ_p‹t
);

733 i‡(!
oÂ‹t
) {

734 
	`VLOG_WARN
("%s: c™nŸ së queue†⁄Ç⁄exi°íàp‹à%"
PRIu16
,

735 
oÂrŸo
->
«me
, 
oÂ_p‹t
);

736  
ENODEV
;

739  (
oÂrŸo
->
oÂrŸo_˛ass
->
£t_queues


740 ? 
oÂrŸo
->
oÂrŸo_˛ass
->
	`£t_queues
(
oÂ‹t
, 
queues
, 
n_queues
)

741 : 
EOPNOTSUPP
);

742 
	}
}

748 
	$oÂrŸo_p‹t_˛ór_cfm
(
oÂrŸo
 *oÂrŸo, 
uöt16_t
 
oÂ_p‹t
)

750 
oÂ‹t
 *oÂ‹à
	`oÂrŸo_gë_p‹t
(
oÂrŸo
, 
oÂ_p‹t
);

751 i‡(
oÂ‹t
 && 
oÂrŸo
->
oÂrŸo_˛ass
->
£t_cfm
) {

752 
oÂrŸo
->
oÂrŸo_˛ass
->
	`£t_cfm
(
oÂ‹t
, 
NULL
);

754 
	}
}

763 
	$oÂrŸo_p‹t_£t_cfm
(
oÂrŸo
 *oÂrŸo, 
uöt16_t
 
oÂ_p‹t
,

764 c⁄° 
cfm_£âögs
 *
s
)

766 
oÂ‹t
 *ofport;

767 
îr‹
;

769 
oÂ‹t
 = 
	`oÂrŸo_gë_p‹t
(
oÂrŸo
, 
oÂ_p‹t
);

770 i‡(!
oÂ‹t
) {

771 
	`VLOG_WARN
("%s: c™nŸ c⁄figuª CFM o¿n⁄exi°íàp‹à%"
PRIu16
,

772 
oÂrŸo
->
«me
, 
oÂ_p‹t
);

779 
îr‹
 = (
oÂrŸo
->
oÂrŸo_˛ass
->
£t_cfm


780 ? 
oÂrŸo
->
oÂrŸo_˛ass
->
	`£t_cfm
(
oÂ‹t
, 
s
)

781 : 
EOPNOTSUPP
);

782 i‡(
îr‹
) {

783 
	`VLOG_WARN
("%s: CFM c⁄figuøti⁄ o¿p‹à%"
PRIu16
" (%s) failed (%s)",

784 
oÂrŸo
->
«me
, 
oÂ_p‹t
, 
	`√tdev_gë_«me
(
oÂ‹t
->
√tdev
),

785 
	`°ªº‹
(
îr‹
));

787 
	}
}

794 
	$oÂrŸo_p‹t_is_œ˝_cuºít
(
oÂrŸo
 *oÂrŸo, 
uöt16_t
 
oÂ_p‹t
)

796 
oÂ‹t
 *oÂ‹à
	`oÂrŸo_gë_p‹t
(
oÂrŸo
, 
oÂ_p‹t
);

797  (
oÂ‹t
 && 
oÂrŸo
->
oÂrŸo_˛ass
->
p‹t_is_œ˝_cuºít


798 ? 
oÂrŸo
->
oÂrŸo_˛ass
->
	`p‹t_is_œ˝_cuºít
(
oÂ‹t
)

800 
	}
}

816 
	$oÂrŸo_bundÀ_ªgi°î
(
oÂrŸo
 *oÂrŸo, *
aux
,

817 c⁄° 
oÂrŸo_bundÀ_£âögs
 *
s
)

819  (
oÂrŸo
->
oÂrŸo_˛ass
->
bundÀ_£t


820 ? 
oÂrŸo
->
oÂrŸo_˛ass
->
	`bundÀ_£t
(oÂrŸo, 
aux
, 
s
)

821 : 
EOPNOTSUPP
);

822 
	}
}

827 
	$oÂrŸo_bundÀ_uƒegi°î
(
oÂrŸo
 *oÂrŸo, *
aux
)

829  
	`oÂrŸo_bundÀ_ªgi°î
(
oÂrŸo
, 
aux
, 
NULL
);

830 
	}
}

837 
	$oÂrŸo_múr‹_ªgi°î
(
oÂrŸo
 *oÂrŸo, *
aux
,

838 c⁄° 
oÂrŸo_múr‹_£âögs
 *
s
)

840  (
oÂrŸo
->
oÂrŸo_˛ass
->
múr‹_£t


841 ? 
oÂrŸo
->
oÂrŸo_˛ass
->
	`múr‹_£t
(oÂrŸo, 
aux
, 
s
)

842 : 
EOPNOTSUPP
);

843 
	}
}

848 
	$oÂrŸo_múr‹_uƒegi°î
(
oÂrŸo
 *oÂrŸo, *
aux
)

850  
	`oÂrŸo_múr‹_ªgi°î
(
oÂrŸo
, 
aux
, 
NULL
);

851 
	}
}

858 
	$oÂrŸo_múr‹_gë_°©s
(
oÂrŸo
 *oÂrŸo, *
aux
,

859 
uöt64_t
 *
∑ckës
, uöt64_à*
byãs
)

861 i‡(!
oÂrŸo
->
oÂrŸo_˛ass
->
múr‹_gë_°©s
) {

862 *
∑ckës
 = *
byãs
 = 
UINT64_MAX
;

863  
EOPNOTSUPP
;

866  
oÂrŸo
->
oÂrŸo_˛ass
->
	`múr‹_gë_°©s
(oÂrŸo, 
aux
,

867 
∑ckës
, 
byãs
);

868 
	}
}

877 
	$oÂrŸo_£t_Êood_vœns
(
oÂrŸo
 *oÂrŸo, *
Êood_vœns
)

879  (
oÂrŸo
->
oÂrŸo_˛ass
->
£t_Êood_vœns


880 ? 
oÂrŸo
->
oÂrŸo_˛ass
->
	`£t_Êood_vœns
(oÂrŸo, 
Êood_vœns
)

881 : 
EOPNOTSUPP
);

882 
	}
}

886 
boﬁ


887 
	$oÂrŸo_is_múr‹_ouçut_bundÀ
(c⁄° 
oÂrŸo
 *oÂrŸo, *
aux
)

889  (
oÂrŸo
->
oÂrŸo_˛ass
->
is_múr‹_ouçut_bundÀ


890 ? 
oÂrŸo
->
oÂrŸo_˛ass
->
	`is_múr‹_ouçut_bundÀ
(oÂrŸo, 
aux
)

891 : 
Ál£
);

892 
	}
}

898 
	$oÂrŸo_gë_n_èbÀs
(c⁄° 
oÂrŸo
 *ofproto)

900  
oÂrŸo
->
n_èbÀs
;

901 
	}
}

909 
	$oÂrŸo_c⁄figuª_èbÀ
(
oÂrŸo
 *oÂrŸo, 
èbÀ_id
,

910 c⁄° 
oÂrŸo_èbÀ_£âögs
 *
s
)

912 
o·abÀ
 *
èbÀ
;

914 
	`as£π
(
èbÀ_id
 >0 &&ÅabÀ_id < 
oÂrŸo
->
n_èbÀs
);

915 
èbÀ
 = &
oÂrŸo
->
èbÀs
[
èbÀ_id
];

917 
	`o·abÀ_£t_«me
(
èbÀ
, 
s
->
«me
);

919 i‡(
èbÀ
->
Êags
 & 
OFTABLE_READONLY
) {

923 i‡(
s
->
groups
) {

924 
	`o·abÀ_íabÀ_evi˘i⁄
(
èbÀ
, 
s
->
groups
, s->
n_groups
);

926 
	`o·abÀ_dißbÀ_evi˘i⁄
(
èbÀ
);

929 
èbÀ
->
max_Êows
 = 
s
->max_flows;

930 i‡(
	`˛assifõr_cou¡
(&
èbÀ
->
˛s
Ë>ÅabÀ->
max_Êows


931 && 
èbÀ
->
evi˘i⁄_fõlds
) {

935 
oÂrŸo
->
°©e
) {

936 
S_OPENFLOW
:

937 
oÂrŸo
->
°©e
 = 
S_EVICT
;

939 
S_EVICT
:

940 
S_FLUSH
:

945 
	}
}

947 
boﬁ


948 
	$oÂrŸo_has_¢o›s
(c⁄° 
oÂrŸo
 *ofproto)

950  
	`c⁄nmgr_has_¢o›s
(
oÂrŸo
->
c⁄nmgr
);

951 
	}
}

954 
	$oÂrŸo_gë_¢o›s
(c⁄° 
oÂrŸo
 *oÂrŸo, 
s£t
 *
¢o›s
)

956 
	`c⁄nmgr_gë_¢o›s
(
oÂrŸo
->
c⁄nmgr
, 
¢o›s
);

957 
	}
}

960 
	$oÂrŸo_Êush__
(
oÂrŸo
 *ofproto)

962 
of›group
 *
group
;

963 
o·abÀ
 *
èbÀ
;

965 i‡(
oÂrŸo
->
oÂrŸo_˛ass
->
Êush
) {

966 
oÂrŸo
->
oÂrŸo_˛ass
->
	`Êush
(ofproto);

969 
group
 = 
	`of›group_¸óã_u«âached
(
oÂrŸo
);

970 
	`OFPROTO_FOR_EACH_TABLE
 (
èbÀ
, 
oÂrŸo
) {

971 
ruÀ
 *ruÀ, *
√xt_ruÀ
;

972 
˛s_curs‹
 
curs‹
;

974 i‡(
èbÀ
->
Êags
 & 
OFTABLE_HIDDEN
) {

978 
	`˛s_curs‹_öô
(&
curs‹
, &
èbÀ
->
˛s
, 
NULL
);

979 
	`CLS_CURSOR_FOR_EACH_SAFE
 (
ruÀ
, 
√xt_ruÀ
, 
¸
, &
curs‹
) {

980 i‡(!
ruÀ
->
≥ndög
) {

981 
	`of›î©i⁄_¸óã
(
group
, 
ruÀ
, 
OFOPERATION_DELETE
,

982 
OFPRR_DELETE
);

983 
	`o·abÀ_ªmove_ruÀ
(
ruÀ
);

984 
oÂrŸo
->
oÂrŸo_˛ass
->
	`ruÀ_de°ru˘
(
ruÀ
);

988 
	`of›group_submô
(
group
);

989 
	}
}

992 
	$oÂrŸo_de°roy__
(
oÂrŸo
 *ofproto)

994 
o·abÀ
 *
èbÀ
;

996 
	`as£π
(
	`li°_is_em±y
(&
oÂrŸo
->
≥ndög
));

997 
	`as£π
(!
oÂrŸo
->
n_≥ndög
);

999 
	`c⁄nmgr_de°roy
(
oÂrŸo
->
c⁄nmgr
);

1001 
	`hm≠_ªmove
(&
Æl_oÂrŸos
, &
oÂrŸo
->
hm≠_node
);

1002 
	`‰ì
(
oÂrŸo
->
«me
);

1003 
	`‰ì
(
oÂrŸo
->
ty≥
);

1004 
	`‰ì
(
oÂrŸo
->
m‰_desc
);

1005 
	`‰ì
(
oÂrŸo
->
hw_desc
);

1006 
	`‰ì
(
oÂrŸo
->
sw_desc
);

1007 
	`‰ì
(
oÂrŸo
->
£rül_desc
);

1008 
	`‰ì
(
oÂrŸo
->
dp_desc
);

1009 
	`hm≠_de°roy
(&
oÂrŸo
->
p‹ts
);

1010 
	`shash_de°roy
(&
oÂrŸo
->
p‹t_by_«me
);

1012 
	`OFPROTO_FOR_EACH_TABLE
 (
èbÀ
, 
oÂrŸo
) {

1013 
	`o·abÀ_de°roy
(
èbÀ
);

1015 
	`‰ì
(
oÂrŸo
->
èbÀs
);

1017 
	`hm≠_de°roy
(&
oÂrŸo
->
dñëi⁄s
);

1019 
	`‰ì
(
oÂrŸo
->
vœn_bôm≠
);

1021 
oÂrŸo
->
oÂrŸo_˛ass
->
	`dóŒoc
(ofproto);

1022 
	}
}

1025 
	$oÂrŸo_de°roy
(
oÂrŸo
 *
p
)

1027 
oÂ‹t
 *oÂ‹t, *
√xt_oÂ‹t
;

1029 i‡(!
p
) {

1033 
	`oÂrŸo_Êush__
(
p
);

1034 
	`HMAP_FOR_EACH_SAFE
 (
oÂ‹t
, 
√xt_oÂ‹t
, 
hm≠_node
, &
p
->
p‹ts
) {

1035 
	`oÂ‹t_de°roy
(
oÂ‹t
);

1038 
p
->
oÂrŸo_˛ass
->
	`de°ru˘
(p);

1039 
	`oÂrŸo_de°roy__
(
p
);

1040 
	}
}

1049 
	$oÂrŸo_dñëe
(c⁄° *
«me
, c⁄° *
ty≥
)

1051 c⁄° 
oÂrŸo_˛ass
 *
˛ass
 = 
	`oÂrŸo_˛ass_föd__
(
ty≥
);

1052  (!
˛ass
 ? 
EAFNOSUPPORT


1053 : !
˛ass
->
dñ
 ? 
EACCES


1054 : 
˛ass
->
	`dñ
(
ty≥
, 
«me
));

1055 
	}
}

1058 
	$¥o˚ss_p‹t_ch™ge
(
oÂrŸo
 *oÂrŸo, 
îr‹
, *
dev«me
)

1060 i‡(
îr‹
 =
ENOBUFS
) {

1061 
	`ªöô_p‹ts
(
oÂrŸo
);

1062 } i‡(!
îr‹
) {

1063 
	`upd©e_p‹t
(
oÂrŸo
, 
dev«me
);

1064 
	`‰ì
(
dev«me
);

1066 
	}
}

1069 
	$oÂrŸo_run
(
oÂrŸo
 *
p
)

1071 
s£t
 
ch™ged_√tdevs
;

1072 c⁄° *
ch™ged_√tdev
;

1073 
oÂ‹t
 *ofport;

1074 
îr‹
;

1076 
îr‹
 = 
p
->
oÂrŸo_˛ass
->
	`run
(p);

1077 i‡(
îr‹
 &&Éº‹ !
EAGAIN
) {

1078 
	`VLOG_ERR_RL
(&
æ
, "%s:Ñu¿Áûed (%s)", 
p
->
«me
, 
	`°ªº‹
(
îr‹
));

1081 i‡(
p
->
oÂrŸo_˛ass
->
p‹t_pﬁl
) {

1082 *
dev«me
;

1084 (
îr‹
 = 
p
->
oÂrŸo_˛ass
->
	`p‹t_pﬁl
’, &
dev«me
)Ë!
EAGAIN
) {

1085 
	`¥o˚ss_p‹t_ch™ge
(
p
, 
îr‹
, 
dev«me
);

1095 
	`s£t_öô
(&
ch™ged_√tdevs
);

1096 
	`HMAP_FOR_EACH
 (
oÂ‹t
, 
hm≠_node
, &
p
->
p‹ts
) {

1097 
ch™ge_£q
 = 
	`√tdev_ch™ge_£q
(
oÂ‹t
->
√tdev
);

1098 i‡(
oÂ‹t
->
ch™ge_£q
 != change_seq) {

1099 
oÂ‹t
->
ch™ge_£q
 = change_seq;

1100 
	`s£t_add
(&
ch™ged_√tdevs
, 
	`√tdev_gë_«me
(
oÂ‹t
->
√tdev
));

1103 
	`SSET_FOR_EACH
 (
ch™ged_√tdev
, &
ch™ged_√tdevs
) {

1104 
	`upd©e_p‹t
(
p
, 
ch™ged_√tdev
);

1106 
	`s£t_de°roy
(&
ch™ged_√tdevs
);

1108 
p
->
°©e
) {

1109 
S_OPENFLOW
:

1110 
	`c⁄nmgr_run
(
p
->
c⁄nmgr
, 
h™dÀ_›íÊow
);

1113 
S_EVICT
:

1114 
	`c⁄nmgr_run
(
p
->
c⁄nmgr
, 
NULL
);

1115 
	`oÂrŸo_evi˘
(
p
);

1116 i‡(
	`li°_is_em±y
(&
p
->
≥ndög
Ë&& 
	`hm≠_is_em±y
(&p->
dñëi⁄s
)) {

1117 
p
->
°©e
 = 
S_OPENFLOW
;

1121 
S_FLUSH
:

1122 
	`c⁄nmgr_run
(
p
->
c⁄nmgr
, 
NULL
);

1123 
	`oÂrŸo_Êush__
(
p
);

1124 i‡(
	`li°_is_em±y
(&
p
->
≥ndög
Ë&& 
	`hm≠_is_em±y
(&p->
dñëi⁄s
)) {

1125 
	`c⁄nmgr_Êushed
(
p
->
c⁄nmgr
);

1126 
p
->
°©e
 = 
S_OPENFLOW
;

1131 
	`NOT_REACHED
();

1134 i‡(
	`time_m£c
(Ë>
p
->
√xt_›_ªp‹t
) {

1135 
ago
 = (
	`time_m£c
(Ë- 
p
->
fú°_›
) / 1000;

1136 
öãrvÆ
 = (
p
->
œ°_›
 -Ö->
fú°_›
) / 1000;

1137 
ds
 
s
;

1139 
	`ds_öô
(&
s
);

1140 
	`ds_put_f‹m©
(&
s
, "%d flow_mods ",

1141 
p
->
n_add
 +Ö->
n_dñëe
 +Ö->
n_modify
);

1142 i‡(
öãrvÆ
 =
ago
) {

1143 
	`ds_put_f‹m©
(&
s
, "öÅhêœ° %Œd s", 
ago
);

1144 } i‡(
öãrvÆ
) {

1145 
	`ds_put_f‹m©
(&
s
, "inÅhe %lld s starting %lld ságo",

1146 
öãrvÆ
, 
ago
);

1148 
	`ds_put_f‹m©
(&
s
, "%Œd ságo", 
ago
);

1151 
	`ds_put_c°r
(&
s
, " (");

1152 i‡(
p
->
n_add
) {

1153 
	`ds_put_f‹m©
(&
s
, "%dádds, ", 
p
->
n_add
);

1155 i‡(
p
->
n_dñëe
) {

1156 
	`ds_put_f‹m©
(&
s
, "%d dñëes, ", 
p
->
n_dñëe
);

1158 i‡(
p
->
n_modify
) {

1159 
	`ds_put_f‹m©
(&
s
, "%d modifiˇti⁄s, ", 
p
->
n_modify
);

1161 
s
.
Àngth
 -= 2;

1162 
	`ds_put_ch¨
(&
s
, ')');

1164 
	`VLOG_INFO
("%s: %s", 
p
->
«me
, 
	`ds_c°r
(&
s
));

1165 
	`ds_de°roy
(&
s
);

1167 
p
->
n_add
 =Ö->
n_dñëe
 =Ö->
n_modify
 = 0;

1168 
p
->
√xt_›_ªp‹t
 = 
LLONG_MAX
;

1171  
îr‹
;

1172 
	}
}

1181 
	$oÂrŸo_run_Á°
(
oÂrŸo
 *
p
)

1183 
îr‹
;

1185 
îr‹
 = 
p
->
oÂrŸo_˛ass
->
run_Á°
 ?Ö->oÂrŸo_˛ass->
	`run_Á°
(p) : 0;

1186 i‡(
îr‹
 &&Éº‹ !
EAGAIN
) {

1187 
	`VLOG_ERR_RL
(&
æ
, "%s: fastpathÑun failed (%s)",

1188 
p
->
«me
, 
	`°ªº‹
(
îr‹
));

1190  
îr‹
;

1191 
	}
}

1194 
	$oÂrŸo_waô
(
oÂrŸo
 *
p
)

1196 
oÂ‹t
 *ofport;

1198 
p
->
oÂrŸo_˛ass
->
	`waô
(p);

1199 i‡(
p
->
oÂrŸo_˛ass
->
p‹t_pﬁl_waô
) {

1200 
p
->
oÂrŸo_˛ass
->
	`p‹t_pﬁl_waô
(p);

1203 
	`HMAP_FOR_EACH
 (
oÂ‹t
, 
hm≠_node
, &
p
->
p‹ts
) {

1204 i‡(
oÂ‹t
->
ch™ge_£q
 !
	`√tdev_ch™ge_£q
(oÂ‹t->
√tdev
)) {

1205 
	`pﬁl_immedüã_wake
();

1209 
p
->
°©e
) {

1210 
S_OPENFLOW
:

1211 
	`c⁄nmgr_waô
(
p
->
c⁄nmgr
, 
åue
);

1214 
S_EVICT
:

1215 
S_FLUSH
:

1216 
	`c⁄nmgr_waô
(
p
->
c⁄nmgr
, 
Ál£
);

1217 i‡(
	`li°_is_em±y
(&
p
->
≥ndög
Ë&& 
	`hm≠_is_em±y
(&p->
dñëi⁄s
)) {

1218 
	`pﬁl_immedüã_wake
();

1222 
	}
}

1224 
boﬁ


1225 
	$oÂrŸo_is_Æive
(c⁄° 
oÂrŸo
 *
p
)

1227  
	`c⁄nmgr_has_c⁄åﬁÀrs
(
p
->
c⁄nmgr
);

1228 
	}
}

1233 
	$oÂrŸo_gë_mem‹y_ußge
(c⁄° 
oÂrŸo
 *oÂrŸo, 
sim≠
 *
ußge
)

1235 c⁄° 
o·abÀ
 *
èbÀ
;

1236 
n_ruÀs
;

1238 
	`sim≠_ö¸ó£
(
ußge
, "p‹ts", 
	`hm≠_cou¡
(&
oÂrŸo
->
p‹ts
));

1239 
	`sim≠_ö¸ó£
(
ußge
, "ops",

1240 
oÂrŸo
->
n_≥ndög
 + 
	`hm≠_cou¡
(&oÂrŸo->
dñëi⁄s
));

1242 
n_ruÀs
 = 0;

1243 
	`OFPROTO_FOR_EACH_TABLE
 (
èbÀ
, 
oÂrŸo
) {

1244 
n_ruÀs
 +
	`˛assifõr_cou¡
(&
èbÀ
->
˛s
);

1246 
	`sim≠_ö¸ó£
(
ußge
, "ruÀs", 
n_ruÀs
);

1248 i‡(
oÂrŸo
->
oÂrŸo_˛ass
->
gë_mem‹y_ußge
) {

1249 
oÂrŸo
->
oÂrŸo_˛ass
->
	`gë_mem‹y_ußge
(oÂrŸo, 
ußge
);

1252 
	`c⁄nmgr_gë_mem‹y_ußge
(
oÂrŸo
->
c⁄nmgr
, 
ußge
);

1253 
	}
}

1256 
	$oÂrŸo_gë_oÂrŸo_c⁄åﬁÀr_öfo
(c⁄° 
oÂrŸo
 *ofproto,

1257 
shash
 *
öfo
)

1259 
	`c⁄nmgr_gë_c⁄åﬁÀr_öfo
(
oÂrŸo
->
c⁄nmgr
, 
öfo
);

1260 
	}
}

1263 
	$oÂrŸo_‰ì_oÂrŸo_c⁄åﬁÀr_öfo
(
shash
 *
öfo
)

1265 
	`c⁄nmgr_‰ì_c⁄åﬁÀr_öfo
(
öfo
);

1266 
	}
}

1270 
	$oÂrŸo_p‹t_˛⁄e
(
oÂrŸo_p‹t
 *
p‹t
, c⁄° oÂrŸo_p‹à*
ﬁd
)

1272 
p‹t
->
«me
 = 
	`x°rdup
(
ﬁd
->name);

1273 
p‹t
->
ty≥
 = 
	`x°rdup
(
ﬁd
->type);

1274 
p‹t
->
oÂ_p‹t
 = 
ﬁd
->ofp_port;

1275 
	}
}

1283 
	$oÂrŸo_p‹t_de°roy
(
oÂrŸo_p‹t
 *ofproto_port)

1285 
	`‰ì
(
oÂrŸo_p‹t
->
«me
);

1286 
	`‰ì
(
oÂrŸo_p‹t
->
ty≥
);

1287 
	}
}

1296 
	$oÂrŸo_p‹t_dump_°¨t
(
oÂrŸo_p‹t_dump
 *
dump
,

1297 c⁄° 
oÂrŸo
 *ofproto)

1299 
dump
->
oÂrŸo
 = ofproto;

1300 
dump
->
îr‹
 = 
oÂrŸo
->
oÂrŸo_˛ass
->
	`p‹t_dump_°¨t
(ofproto,

1301 &
dump
->
°©e
);

1302 
	}
}

1315 
boﬁ


1316 
	$oÂrŸo_p‹t_dump_√xt
(
oÂrŸo_p‹t_dump
 *
dump
,

1317 
oÂrŸo_p‹t
 *
p‹t
)

1319 c⁄° 
oÂrŸo
 *oÂrŸÿ
dump
->ofproto;

1321 i‡(
dump
->
îr‹
) {

1322  
Ál£
;

1325 
dump
->
îr‹
 = 
oÂrŸo
->
oÂrŸo_˛ass
->
	`p‹t_dump_√xt
(oÂrŸo, dump->
°©e
,

1326 
p‹t
);

1327 i‡(
dump
->
îr‹
) {

1328 
oÂrŸo
->
oÂrŸo_˛ass
->
	`p‹t_dump_d⁄e
(oÂrŸo, 
dump
->
°©e
);

1329  
Ál£
;

1331  
åue
;

1332 
	}
}

1338 
	$oÂrŸo_p‹t_dump_d⁄e
(
oÂrŸo_p‹t_dump
 *
dump
)

1340 c⁄° 
oÂrŸo
 *oÂrŸÿ
dump
->ofproto;

1341 i‡(!
dump
->
îr‹
) {

1342 
dump
->
îr‹
 = 
oÂrŸo
->
oÂrŸo_˛ass
->
	`p‹t_dump_d⁄e
(ofproto,

1343 
dump
->
°©e
);

1345  
dump
->
îr‹
 =
EOF
 ? 0 : dump->error;

1346 
	}
}

1353 
	$oÂrŸo_p‹t_add
(
oÂrŸo
 *oÂrŸo, 
√tdev
 *netdev,

1354 
uöt16_t
 *
oÂ_p‹ç
)

1356 
uöt16_t
 
oÂ_p‹t
;

1357 
îr‹
;

1359 
îr‹
 = 
oÂrŸo
->
oÂrŸo_˛ass
->
	`p‹t_add
(oÂrŸo, 
√tdev
, &
oÂ_p‹t
);

1360 i‡(!
îr‹
) {

1361 
	`upd©e_p‹t
(
oÂrŸo
, 
	`√tdev_gë_«me
(
√tdev
));

1363 i‡(
oÂ_p‹ç
) {

1364 *
oÂ_p‹ç
 = 
îr‹
 ? 
OFPP_NONE
 : 
oÂ_p‹t
;

1366  
îr‹
;

1367 
	}
}

1376 
	$oÂrŸo_p‹t_quîy_by_«me
(c⁄° 
oÂrŸo
 *oÂrŸo, c⁄° *
dev«me
,

1377 
oÂrŸo_p‹t
 *
p‹t
)

1379 
îr‹
;

1381 
îr‹
 = 
oÂrŸo
->
oÂrŸo_˛ass
->
	`p‹t_quîy_by_«me
(oÂrŸo, 
dev«me
, 
p‹t
);

1382 i‡(
îr‹
) {

1383 
	`mem£t
(
p‹t
, 0,  *port);

1385  
îr‹
;

1386 
	}
}

1391 
	$oÂrŸo_p‹t_dñ
(
oÂrŸo
 *oÂrŸo, 
uöt16_t
 
oÂ_p‹t
)

1393 
oÂ‹t
 *oÂ‹à
	`oÂrŸo_gë_p‹t
(
oÂrŸo
, 
oÂ_p‹t
);

1394 c⁄° *
«me
 = 
oÂ‹t
 ? 
	`√tdev_gë_«me
(oÂ‹t->
√tdev
) : "<unknown>";

1395 
îr‹
;

1397 
îr‹
 = 
oÂrŸo
->
oÂrŸo_˛ass
->
	`p‹t_dñ
(oÂrŸo, 
oÂ_p‹t
);

1398 i‡(!
îr‹
 && 
oÂ‹t
) {

1403 *
dev«me
 = 
	`x°rdup
(
«me
);

1404 
	`upd©e_p‹t
(
oÂrŸo
, 
dev«me
);

1405 
	`‰ì
(
dev«me
);

1407  
îr‹
;

1408 
	}
}

1422 
	$oÂrŸo_add_Êow
(
oÂrŸo
 *oÂrŸo, c⁄° 
m©ch
 *match,

1423 
¥i‹ôy
,

1424 c⁄° 
oÂa˘
 *
oÂa˘s
, 
size_t
 
oÂa˘s_Àn
)

1426 c⁄° 
ruÀ
 *rule;

1428 
ruÀ
 = 
	`ruÀ_‰om_˛s_ruÀ
(
	`˛assifõr_föd_m©ch_exa˘ly
(

1429 &
oÂrŸo
->
èbÀs
[0].
˛s
, 
m©ch
, 
¥i‹ôy
));

1430 i‡(!
ruÀ
 || !
	`oÂa˘s_equÆ
‘uÀ->
oÂa˘s
,ÑuÀ->
oÂa˘s_Àn
,

1431 
oÂa˘s
, 
oÂa˘s_Àn
)) {

1432 
oÂutû_Êow_mod
 
fm
;

1434 
	`mem£t
(&
fm
, 0,  fm);

1435 
fm
.
m©ch
 = *match;

1436 
fm
.
¥i‹ôy
 =Öriority;

1437 
fm
.
buf„r_id
 = 
UINT32_MAX
;

1438 
fm
.
oÂa˘s
 = 
	`xmemdup
(oÂa˘s, 
oÂa˘s_Àn
);

1439 
fm
.
oÂa˘s_Àn
 = ofpacts_len;

1440 
	`add_Êow
(
oÂrŸo
, 
NULL
, &
fm
, NULL);

1441 
	`‰ì
(
fm
.
oÂa˘s
);

1443 
	}
}

1451 
	$oÂrŸo_Êow_mod
(
oÂrŸo
 *oÂrŸo, c⁄° 
oÂutû_Êow_mod
 *
fm
)

1453  
	`h™dÀ_Êow_mod__
(
oÂrŸo
, 
NULL
, 
fm
, NULL);

1454 
	}
}

1460 
boﬁ


1461 
	$oÂrŸo_dñëe_Êow
(
oÂrŸo
 *ofproto,

1462 c⁄° 
m©ch
 *
èrgë
, 
¥i‹ôy
)

1464 
ruÀ
 *rule;

1466 
ruÀ
 = 
	`ruÀ_‰om_˛s_ruÀ
(
	`˛assifõr_föd_m©ch_exa˘ly
(

1467 &
oÂrŸo
->
èbÀs
[0].
˛s
, 
èrgë
, 
¥i‹ôy
));

1468 i‡(!
ruÀ
) {

1470  
åue
;

1471 } i‡(
ruÀ
->
≥ndög
) {

1474  
Ál£
;

1477 
of›group
 *
group
 = 
	`of›group_¸óã_u«âached
(
oÂrŸo
);

1478 
	`of›î©i⁄_¸óã
(
group
, 
ruÀ
, 
OFOPERATION_DELETE
, 
OFPRR_DELETE
);

1479 
	`o·abÀ_ªmove_ruÀ
(
ruÀ
);

1480 
oÂrŸo
->
oÂrŸo_˛ass
->
	`ruÀ_de°ru˘
(
ruÀ
);

1481 
	`of›group_submô
(
group
);

1482  
åue
;

1485 
	}
}

1491 
	$oÂrŸo_Êush_Êows
(
oÂrŸo
 *ofproto)

1493 
	`COVERAGE_INC
(
oÂrŸo_Êush
);

1494 
oÂrŸo
->
°©e
 = 
S_FLUSH
;

1495 
	}
}

1498 
	$ªöô_p‹ts
(
oÂrŸo
 *
p
)

1500 
oÂrŸo_p‹t_dump
 
dump
;

1501 
s£t
 
dev«mes
;

1502 
oÂ‹t
 *ofport;

1503 
oÂrŸo_p‹t
 ofproto_port;

1504 c⁄° *
dev«me
;

1506 
	`COVERAGE_INC
(
oÂrŸo_ªöô_p‹ts
);

1508 
	`s£t_öô
(&
dev«mes
);

1509 
	`HMAP_FOR_EACH
 (
oÂ‹t
, 
hm≠_node
, &
p
->
p‹ts
) {

1510 
	`s£t_add
(&
dev«mes
, 
	`√tdev_gë_«me
(
oÂ‹t
->
√tdev
));

1512 
	`OFPROTO_PORT_FOR_EACH
 (&
oÂrŸo_p‹t
, &
dump
, 
p
) {

1513 
	`s£t_add
(&
dev«mes
, 
oÂrŸo_p‹t
.
«me
);

1516 
	`SSET_FOR_EACH
 (
dev«me
, &
dev«mes
) {

1517 
	`upd©e_p‹t
(
p
, 
dev«me
);

1519 
	`s£t_de°roy
(&
dev«mes
);

1520 
	}
}

1525 
√tdev
 *

1526 
	$oÂ‹t_›í
(c⁄° 
oÂrŸo
 *ofproto,

1527 c⁄° 
oÂrŸo_p‹t
 *ofproto_port,

1528 
oÂutû_phy_p‹t
 *
µ
)

1530 
√tdev_Êags
 
Êags
;

1531 
√tdev
 *netdev;

1532 
îr‹
;

1534 
îr‹
 = 
	`√tdev_›í
(
oÂrŸo_p‹t
->
«me
, oÂrŸo_p‹t->
ty≥
, &
√tdev
);

1535 i‡(
îr‹
) {

1536 
	`VLOG_WARN_RL
(&
æ
, "%s: ign‹ögÖ‹à%†(%"
PRIu16
") becauseÇetdev %s "

1538 
oÂrŸo
->
«me
,

1539 
oÂrŸo_p‹t
->
«me
, oÂrŸo_p‹t->
oÂ_p‹t
,

1540 
oÂrŸo_p‹t
->
«me
, 
	`°ªº‹
(
îr‹
));

1541  
NULL
;

1544 
µ
->
p‹t_no
 = 
oÂrŸo_p‹t
->
oÂ_p‹t
;

1545 
	`√tdev_gë_ëhîaddr
(
√tdev
, 
µ
->
hw_addr
);

1546 
	`ovs_°æ˝y
(
µ
->
«me
, 
oÂrŸo_p‹t
->name, Öp->name);

1547 
	`√tdev_gë_Êags
(
√tdev
, &
Êags
);

1548 
µ
->
c⁄fig
 = 
Êags
 & 
NETDEV_UP
 ? 0 : 
OFPUTIL_PC_PORT_DOWN
;

1549 
µ
->
°©e
 = 
	`√tdev_gë_ˇºõr
(
√tdev
Ë? 0 : 
OFPUTIL_PS_LINK_DOWN
;

1550 
	`√tdev_gë_„©uªs
(
√tdev
, &
µ
->
cuº
, &µ->
advîti£d
,

1551 &
µ
->
suµ‹ãd
, &µ->
≥î
);

1552 
µ
->
cuº_•ìd
 = 
	`√tdev_„©uªs_to_bps
’p->
cuº
);

1553 
µ
->
max_•ìd
 = 
	`√tdev_„©uªs_to_bps
’p->
suµ‹ãd
);

1555  
√tdev
;

1556 
	}
}

1561 
boﬁ


1562 
	$oÂ‹t_equÆ
(c⁄° 
oÂutû_phy_p‹t
 *
a
,

1563 c⁄° 
oÂutû_phy_p‹t
 *
b
)

1565  (
	`ëh_addr_equÆs
(
a
->
hw_addr
, 
b
->hw_addr)

1566 && 
a
->
°©e
 =
b
->state

1567 && !((
a
->
c⁄fig
 ^ 
b
->c⁄figË& 
OFPUTIL_PC_PORT_DOWN
)

1568 && 
a
->
cuº
 =
b
->curr

1569 && 
a
->
advîti£d
 =
b
->advertised

1570 && 
a
->
suµ‹ãd
 =
b
->supported

1571 && 
a
->
≥î
 =
b
->peer

1572 && 
a
->
cuº_•ìd
 =
b
->curr_speed

1573 && 
a
->
max_•ìd
 =
b
->max_speed);

1574 
	}
}

1580 
	$oÂ‹t_ö°Æl
(
oÂrŸo
 *
p
,

1581 
√tdev
 *√tdev, c⁄° 
oÂutû_phy_p‹t
 *
µ
)

1583 c⁄° *
√tdev_«me
 = 
	`√tdev_gë_«me
(
√tdev
);

1584 
oÂ‹t
 *ofport;

1585 
îr‹
;

1588 
oÂ‹t
 = 
p
->
oÂrŸo_˛ass
->
	`p‹t_Æloc
();

1589 i‡(!
oÂ‹t
) {

1590 
îr‹
 = 
ENOMEM
;

1591 
îr‹
;

1593 
oÂ‹t
->
oÂrŸo
 = 
p
;

1594 
oÂ‹t
->
√tdev
 =Çetdev;

1595 
oÂ‹t
->
ch™ge_£q
 = 
	`√tdev_ch™ge_£q
(
√tdev
);

1596 
oÂ‹t
->
µ
 = *pp;

1597 
oÂ‹t
->
oÂ_p‹t
 = 
µ
->
p‹t_no
;

1600 
	`hm≠_ö£π
(&
p
->
p‹ts
, &
oÂ‹t
->
hm≠_node
, 
	`hash_öt
(oÂ‹t->
oÂ_p‹t
, 0));

1601 
	`shash_add
(&
p
->
p‹t_by_«me
, 
√tdev_«me
, 
oÂ‹t
);

1603 
	`upd©e_mtu
(
p
, 
oÂ‹t
);

1606 
îr‹
 = 
p
->
oÂrŸo_˛ass
->
	`p‹t_c⁄°ru˘
(
oÂ‹t
);

1607 i‡(
îr‹
) {

1608 
îr‹
;

1610 
	`c⁄nmgr_£nd_p‹t_°©us
(
p
->
c⁄nmgr
, 
µ
, 
OFPPR_ADD
);

1613 
îr‹
:

1614 
	`VLOG_WARN_RL
(&
æ
, "%s: couldÇotáddÖort %s (%s)",

1615 
p
->
«me
, 
√tdev_«me
, 
	`°ªº‹
(
îr‹
));

1616 i‡(
oÂ‹t
) {

1617 
	`oÂ‹t_de°roy__
(
oÂ‹t
);

1619 
	`√tdev_˛o£
(
√tdev
);

1621 
	}
}

1625 
	$oÂ‹t_ªmove
(
oÂ‹t
 *ofport)

1627 
	`c⁄nmgr_£nd_p‹t_°©us
(
oÂ‹t
->
oÂrŸo
->
c⁄nmgr
, &oÂ‹t->
µ
,

1628 
OFPPR_DELETE
);

1629 
	`oÂ‹t_de°roy
(
oÂ‹t
);

1630 
	}
}

1635 
	$oÂ‹t_ªmove_wôh_«me
(
oÂrŸo
 *oÂrŸo, c⁄° *
«me
)

1637 
oÂ‹t
 *
p‹t
 = 
	`shash_föd_d©a
(&
oÂrŸo
->
p‹t_by_«me
, 
«me
);

1638 i‡(
p‹t
) {

1639 
	`oÂ‹t_ªmove
(
p‹t
);

1641 
	}
}

1648 
	$oÂ‹t_modifõd
(
oÂ‹t
 *
p‹t
, 
oÂutû_phy_p‹t
 *
µ
)

1650 
	`mem˝y
(
p‹t
->
µ
.
hw_addr
,Öp->hw_addr, 
ETH_ADDR_LEN
);

1651 
p‹t
->
µ
.
c⁄fig
 = (’‹t->µ.c⁄fig & ~
OFPUTIL_PC_PORT_DOWN
)

1652 | (
µ
->
c⁄fig
 & 
OFPUTIL_PC_PORT_DOWN
));

1653 
p‹t
->
µ
.
°©e
 =Öp->state;

1654 
p‹t
->
µ
.
cuº
 =Öp->curr;

1655 
p‹t
->
µ
.
advîti£d
 =Öp->advertised;

1656 
p‹t
->
µ
.
suµ‹ãd
 =Öp->supported;

1657 
p‹t
->
µ
.
≥î
 =Öp->peer;

1658 
p‹t
->
µ
.
cuº_•ìd
 =Öp->curr_speed;

1659 
p‹t
->
µ
.
max_•ìd
 =Öp->max_speed;

1661 
	`c⁄nmgr_£nd_p‹t_°©us
(
p‹t
->
oÂrŸo
->
c⁄nmgr
, &p‹t->
µ
, 
OFPPR_MODIFY
);

1662 
	}
}

1666 
	$oÂrŸo_p‹t_£t_°©e
(
oÂ‹t
 *
p‹t
, 
oÂutû_p‹t_°©e
 
°©e
)

1668 i‡(
p‹t
->
µ
.
°©e
 != state) {

1669 
p‹t
->
µ
.
°©e
 = state;

1670 
	`c⁄nmgr_£nd_p‹t_°©us
(
p‹t
->
oÂrŸo
->
c⁄nmgr
, &p‹t->
µ
,

1671 
OFPPR_MODIFY
);

1673 
	}
}

1676 
	$oÂrŸo_p‹t_uƒegi°î
(
oÂrŸo
 *oÂrŸo, 
uöt16_t
 
oÂ_p‹t
)

1678 
oÂ‹t
 *
p‹t
 = 
	`oÂrŸo_gë_p‹t
(
oÂrŸo
, 
oÂ_p‹t
);

1679 i‡(
p‹t
) {

1680 i‡(
p‹t
->
oÂrŸo
->
oÂrŸo_˛ass
->
£t_ªÆdev
) {

1681 
p‹t
->
oÂrŸo
->
oÂrŸo_˛ass
->
	`£t_ªÆdev
(port, 0, 0);

1683 i‡(
p‹t
->
oÂrŸo
->
oÂrŸo_˛ass
->
£t_°p_p‹t
) {

1684 
p‹t
->
oÂrŸo
->
oÂrŸo_˛ass
->
	`£t_°p_p‹t
’‹t, 
NULL
);

1686 i‡(
p‹t
->
oÂrŸo
->
oÂrŸo_˛ass
->
£t_cfm
) {

1687 
p‹t
->
oÂrŸo
->
oÂrŸo_˛ass
->
	`£t_cfm
’‹t, 
NULL
);

1689 i‡(
p‹t
->
oÂrŸo
->
oÂrŸo_˛ass
->
bundÀ_ªmove
) {

1690 
p‹t
->
oÂrŸo
->
oÂrŸo_˛ass
->
	`bundÀ_ªmove
(port);

1693 
	}
}

1696 
	$oÂ‹t_de°roy__
(
oÂ‹t
 *
p‹t
)

1698 
oÂrŸo
 *oÂrŸÿ
p‹t
->ofproto;

1699 c⁄° *
«me
 = 
	`√tdev_gë_«me
(
p‹t
->
√tdev
);

1701 
	`hm≠_ªmove
(&
oÂrŸo
->
p‹ts
, &
p‹t
->
hm≠_node
);

1702 
	`shash_dñëe
(&
oÂrŸo
->
p‹t_by_«me
,

1703 
	`shash_föd
(&
oÂrŸo
->
p‹t_by_«me
, 
«me
));

1705 
	`√tdev_˛o£
(
p‹t
->
√tdev
);

1706 
oÂrŸo
->
oÂrŸo_˛ass
->
	`p‹t_dóŒoc
(
p‹t
);

1707 
	}
}

1710 
	$oÂ‹t_de°roy
(
oÂ‹t
 *
p‹t
)

1712 i‡(
p‹t
) {

1713 
p‹t
->
oÂrŸo
->
oÂrŸo_˛ass
->
	`p‹t_de°ru˘
(port);

1714 
	`oÂ‹t_de°roy__
(
p‹t
);

1716 
	}
}

1718 
oÂ‹t
 *

1719 
	$oÂrŸo_gë_p‹t
(c⁄° 
oÂrŸo
 *oÂrŸo, 
uöt16_t
 
oÂ_p‹t
)

1721 
oÂ‹t
 *
p‹t
;

1723 
	`HMAP_FOR_EACH_IN_BUCKET
 (
p‹t
, 
hm≠_node
,

1724 
	`hash_öt
(
oÂ_p‹t
, 0), &
oÂrŸo
->
p‹ts
) {

1725 i‡(
p‹t
->
oÂ_p‹t
 == ofp_port) {

1726  
p‹t
;

1729  
NULL
;

1730 
	}
}

1733 
	$oÂrŸo_p‹t_gë_°©s
(c⁄° 
oÂ‹t
 *
p‹t
, 
√tdev_°©s
 *
°©s
)

1735 
oÂrŸo
 *oÂrŸÿ
p‹t
->ofproto;

1736 
îr‹
;

1738 i‡(
oÂrŸo
->
oÂrŸo_˛ass
->
p‹t_gë_°©s
) {

1739 
îr‹
 = 
oÂrŸo
->
oÂrŸo_˛ass
->
	`p‹t_gë_°©s
(
p‹t
, 
°©s
);

1741 
îr‹
 = 
EOPNOTSUPP
;

1744  
îr‹
;

1745 
	}
}

1748 
	$upd©e_p‹t
(
oÂrŸo
 *oÂrŸo, c⁄° *
«me
)

1750 
oÂrŸo_p‹t
 ofproto_port;

1751 
oÂutû_phy_p‹t
 
µ
;

1752 
√tdev
 *netdev;

1753 
oÂ‹t
 *
p‹t
;

1755 
	`COVERAGE_INC
(
oÂrŸo_upd©e_p‹t
);

1758 
√tdev
 = (!
	`oÂrŸo_p‹t_quîy_by_«me
(
oÂrŸo
, 
«me
, &
oÂrŸo_p‹t
)

1759 ? 
	`oÂ‹t_›í
(
oÂrŸo
, &
oÂrŸo_p‹t
, &
µ
)

1760 : 
NULL
);

1761 i‡(
√tdev
) {

1762 
p‹t
 = 
	`oÂrŸo_gë_p‹t
(
oÂrŸo
, 
oÂrŸo_p‹t
.
oÂ_p‹t
);

1763 i‡(
p‹t
 && !
	`°rcmp
(
	`√tdev_gë_«me
’‹t->
√tdev
), 
«me
)) {

1764 
√tdev
 *
ﬁd_√tdev
 = 
p‹t
->netdev;

1767 i‡(!
	`oÂ‹t_equÆ
(&
p‹t
->
µ
, &pp)) {

1768 
	`oÂ‹t_modifõd
(
p‹t
, &
µ
);

1771 
	`upd©e_mtu
(
oÂrŸo
, 
p‹t
);

1776 
p‹t
->
√tdev
 =Çetdev;

1777 
p‹t
->
ch™ge_£q
 = 
	`√tdev_ch™ge_£q
(
√tdev
);

1779 i‡(
p‹t
->
oÂrŸo
->
oÂrŸo_˛ass
->
p‹t_modifõd
) {

1780 
p‹t
->
oÂrŸo
->
oÂrŸo_˛ass
->
	`p‹t_modifõd
(port);

1783 
	`√tdev_˛o£
(
ﬁd_√tdev
);

1788 i‡(
p‹t
) {

1789 
	`oÂ‹t_ªmove
(
p‹t
);

1791 
	`oÂ‹t_ªmove_wôh_«me
(
oÂrŸo
, 
«me
);

1792 
	`oÂ‹t_ö°Æl
(
oÂrŸo
, 
√tdev
, &
µ
);

1796 
	`oÂ‹t_ªmove_wôh_«me
(
oÂrŸo
, 
«me
);

1798 
	`oÂrŸo_p‹t_de°roy
(&
oÂrŸo_p‹t
);

1799 
	}
}

1802 
	$öô_p‹ts
(
oÂrŸo
 *
p
)

1804 
oÂrŸo_p‹t_dump
 
dump
;

1805 
oÂrŸo_p‹t
 ofproto_port;

1807 
	`OFPROTO_PORT_FOR_EACH
 (&
oÂrŸo_p‹t
, &
dump
, 
p
) {

1808 
uöt16_t
 
oÂ_p‹t
 = 
oÂrŸo_p‹t
.ofp_port;

1809 i‡(
	`oÂrŸo_gë_p‹t
(
p
, 
oÂ_p‹t
)) {

1810 
	`VLOG_WARN_RL
(&
æ
, "%s: ign‹ög du∂iˇãÖ‹à%"
PRIu16
" "

1811 "ö d©≠©h", 
p
->
«me
, 
oÂ_p‹t
);

1812 } i‡(
	`shash_föd
(&
p
->
p‹t_by_«me
, 
oÂrŸo_p‹t
.
«me
)) {

1813 
	`VLOG_WARN_RL
(&
æ
, "%s: ignoring duplicate device %s in datapath",

1814 
p
->
«me
, 
oÂrŸo_p‹t
.name);

1816 
oÂutû_phy_p‹t
 
µ
;

1817 
√tdev
 *netdev;

1819 
√tdev
 = 
	`oÂ‹t_›í
(
p
, &
oÂrŸo_p‹t
, &
µ
);

1820 i‡(
√tdev
) {

1821 
	`oÂ‹t_ö°Æl
(
p
, 
√tdev
, &
µ
);

1827 
	}
}

1832 
	$föd_mö_mtu
(
oÂrŸo
 *
p
)

1834 
oÂ‹t
 *ofport;

1835 
mtu
 = 0;

1837 
	`HMAP_FOR_EACH
 (
oÂ‹t
, 
hm≠_node
, &
p
->
p‹ts
) {

1838 
√tdev
 *√tdev = 
oÂ‹t
->netdev;

1839 
dev_mtu
;

1843 i‡(!
	`°rcmp
(
	`√tdev_gë_ty≥
(
√tdev
), "internal")) {

1847 i‡(
	`√tdev_gë_mtu
(
√tdev
, &
dev_mtu
)) {

1850 i‡(!
mtu
 || 
dev_mtu
 < mtu) {

1851 
mtu
 = 
dev_mtu
;

1855  
mtu
 ? mtu: 
ETH_PAYLOAD_MAX
;

1856 
	}
}

1861 
	$upd©e_mtu
(
oÂrŸo
 *
p
, 
oÂ‹t
 *
p‹t
)

1863 
oÂ‹t
 *ofport;

1864 
√tdev
 *√tdev = 
p‹t
->netdev;

1865 
dev_mtu
, 
ﬁd_mö
;

1867 i‡(
	`√tdev_gë_mtu
(
√tdev
, &
dev_mtu
)) {

1868 
p‹t
->
mtu
 = 0;

1871 i‡(!
	`°rcmp
(
	`√tdev_gë_ty≥
(
p‹t
->
√tdev
), "internal")) {

1872 i‡(
dev_mtu
 > 
p
->
mö_mtu
) {

1873 i‡(!
	`√tdev_£t_mtu
(
p‹t
->
√tdev
, 
p
->
mö_mtu
)) {

1874 
dev_mtu
 = 
p
->
mö_mtu
;

1877 
p‹t
->
mtu
 = 
dev_mtu
;

1882 
ﬁd_mö
 = 
p
->
mö_mtu
;

1883 
p‹t
->
mtu
 = 
dev_mtu
;

1884 
p
->
mö_mtu
 = 
	`föd_mö_mtu
(p);

1885 i‡(
p
->
mö_mtu
 =
ﬁd_mö
) {

1889 
	`HMAP_FOR_EACH
 (
oÂ‹t
, 
hm≠_node
, &
p
->
p‹ts
) {

1890 
√tdev
 *√tdev = 
oÂ‹t
->netdev;

1892 i‡(!
	`°rcmp
(
	`√tdev_gë_ty≥
(
√tdev
), "internal")) {

1893 i‡(!
	`√tdev_£t_mtu
(
√tdev
, 
p
->
mö_mtu
)) {

1894 
oÂ‹t
->
mtu
 = 
p
->
mö_mtu
;

1898 
	}
}

1901 
	$oÂrŸo_ruÀ_de°roy__
(
ruÀ
 *rule)

1903 i‡(
ruÀ
) {

1904 
	`˛s_ruÀ_de°roy
(&
ruÀ
->
¸
);

1905 
	`‰ì
(
ruÀ
->
oÂa˘s
);

1906 
ruÀ
->
oÂrŸo
->
oÂrŸo_˛ass
->
	`ruÀ_dóŒoc
(rule);

1908 
	}
}

1919 
	$oÂrŸo_ruÀ_de°roy
(
ruÀ
 *rule)

1921 
	`as£π
(!
ruÀ
->
≥ndög
);

1922 
	`o·abÀ_ªmove_ruÀ
(
ruÀ
);

1923 
	`oÂrŸo_ruÀ_de°roy__
(
ruÀ
);

1924 
	}
}

1928 
boﬁ


1929 
	$oÂrŸo_ruÀ_has_out_p‹t
(c⁄° 
ruÀ
 *ruÀ, 
uöt16_t
 
p‹t
)

1931  (
p‹t
 =
OFPP_NONE


1932 || 
	`oÂa˘s_ouçut_to_p‹t
(
ruÀ
->
oÂa˘s
,ÑuÀ->
oÂa˘s_Àn
, 
p‹t
));

1933 
	}
}

1937 
boﬁ


1938 
	$of›î©i⁄_has_out_p‹t
(c⁄° 
of›î©i⁄
 *
›
, 
uöt16_t
 
out_p‹t
)

1940 i‡(
	`oÂrŸo_ruÀ_has_out_p‹t
(
›
->
ruÀ
, 
out_p‹t
)) {

1941  
åue
;

1944 
›
->
ty≥
) {

1945 
OFOPERATION_ADD
:

1946  
›
->
vi˘im
 && 
	`oÂrŸo_ruÀ_has_out_p‹t
(›->vi˘im, 
out_p‹t
);

1948 
OFOPERATION_DELETE
:

1949  
Ál£
;

1951 
OFOPERATION_MODIFY
:

1952  
	`oÂa˘s_ouçut_to_p‹t
(
›
->
oÂa˘s
, op->
oÂa˘s_Àn
, 
out_p‹t
);

1955 
	`NOT_REACHED
();

1956 
	}
}

1967 
	$ruÀ_execuã
(
ruÀ
 *ruÀ, 
uöt16_t
 
ö_p‹t
, 
oÂbuf
 *
∑ckë
)

1969 
Êow
 flow;

1971 
	`as£π
(
	`oÂbuf_hódroom
(
∑ckë
Ë>(
oÂ_∑ckë_ö
));

1973 
	`Êow_exåa˘
(
∑ckë
, 0, 0, 
NULL
, 
ö_p‹t
, &
Êow
);

1974  
ruÀ
->
oÂrŸo
->
oÂrŸo_˛ass
->
	`ruÀ_execuã
‘uÀ, &
Êow
, 
∑ckë
);

1975 
	}
}

1982 
boﬁ


1983 
	$oÂrŸo_ruÀ_is_hiddí
(c⁄° 
ruÀ
 *rule)

1985  
ruÀ
->
¸
.
¥i‹ôy
 > 
UINT16_MAX
;

1986 
	}
}

1988 
o·abÀ_Êags


1989 
	$ruÀ_gë_Êags
(c⁄° 
ruÀ
 *rule)

1991  
ruÀ
->
oÂrŸo
->
èbÀs
[ruÀ->
èbÀ_id
].
Êags
;

1992 
	}
}

1994 
boﬁ


1995 
	$ruÀ_is_modifübÀ
(c⁄° 
ruÀ
 *rule)

1997  !(
	`ruÀ_gë_Êags
(
ruÀ
Ë& 
OFTABLE_READONLY
);

1998 
	}
}

2000 
oÂîr


2001 
	$h™dÀ_echo_ªque°
(
ofc⁄n
 *ofc⁄n, c⁄° 
oÂ_hódî
 *
oh
)

2003 
	`ofc⁄n_£nd_ª∂y
(
ofc⁄n
, 
	`make_echo_ª∂y
(
oh
));

2005 
	}
}

2007 
oÂîr


2008 
	$h™dÀ_„©uªs_ªque°
(
ofc⁄n
 *ofc⁄n, c⁄° 
oÂ_hódî
 *
oh
)

2010 
oÂrŸo
 *oÂrŸÿ
	`ofc⁄n_gë_oÂrŸo
(
ofc⁄n
);

2011 
oÂutû_swôch_„©uªs
 
„©uªs
;

2012 
oÂ‹t
 *
p‹t
;

2013 
boﬁ
 
¨p_m©ch_ù
;

2014 
oÂbuf
 *
b
;

2016 
oÂrŸo
->
oÂrŸo_˛ass
->
	`gë_„©uªs
(oÂrŸo, &
¨p_m©ch_ù
,

2017 &
„©uªs
.
a˘i⁄s
);

2018 
	`as£π
(
„©uªs
.
a˘i⁄s
 & 
OFPUTIL_A_OUTPUT
);

2020 
„©uªs
.
d©≠©h_id
 = 
oÂrŸo
->datapath_id;

2021 
„©uªs
.
n_buf„rs
 = 
	`pktbuf_ˇ∑côy
();

2022 
„©uªs
.
n_èbÀs
 = 
oÂrŸo
->n_tables;

2023 
„©uªs
.
ˇ∑bûôõs
 = (
OFPUTIL_C_FLOW_STATS
 | 
OFPUTIL_C_TABLE_STATS
 |

2024 
OFPUTIL_C_PORT_STATS
 | 
OFPUTIL_C_QUEUE_STATS
);

2025 i‡(
¨p_m©ch_ù
) {

2026 
„©uªs
.
ˇ∑bûôõs
 |
OFPUTIL_C_ARP_MATCH_IP
;

2029 
b
 = 
	`oÂutû_ícode_swôch_„©uªs
(&
„©uªs
, 
	`ofc⁄n_gë_¥Ÿocﬁ
(
ofc⁄n
),

2030 
oh
->
xid
);

2031 
	`HMAP_FOR_EACH
 (
p‹t
, 
hm≠_node
, &
oÂrŸo
->
p‹ts
) {

2032 
	`oÂutû_put_swôch_„©uªs_p‹t
(&
p‹t
->
µ
, 
b
);

2035 
	`ofc⁄n_£nd_ª∂y
(
ofc⁄n
, 
b
);

2037 
	}
}

2039 
oÂîr


2040 
	$h™dÀ_gë_c⁄fig_ªque°
(
ofc⁄n
 *ofc⁄n, c⁄° 
oÂ_hódî
 *
oh
)

2042 
oÂrŸo
 *oÂrŸÿ
	`ofc⁄n_gë_oÂrŸo
(
ofc⁄n
);

2043 
oÂ_swôch_c⁄fig
 *
osc
;

2044 
oÂ_c⁄fig_Êags
 
Êags
;

2045 
oÂbuf
 *
buf
;

2048 
buf
 = 
	`oÂøw_Æloc_ª∂y
(
OFPRAW_OFPT_GET_CONFIG_REPLY
, 
oh
, 0);

2049 
osc
 = 
	`oÂbuf_put_unöô
(
buf
,  *osc);

2050 
Êags
 = 
oÂrŸo
->
‰ag_h™dlög
;

2051 i‡(
	`ofc⁄n_gë_övÆid_âl_to_c⁄åﬁÀr
(
ofc⁄n
)) {

2052 
Êags
 |
OFPC_INVALID_TTL_TO_CONTROLLER
;

2054 
osc
->
Êags
 = 
	`ht⁄s
(flags);

2055 
osc
->
miss_£nd_Àn
 = 
	`ht⁄s
(
	`ofc⁄n_gë_miss_£nd_Àn
(
ofc⁄n
));

2056 
	`ofc⁄n_£nd_ª∂y
(
ofc⁄n
, 
buf
);

2059 
	}
}

2061 
oÂîr


2062 
	$h™dÀ_£t_c⁄fig
(
ofc⁄n
 *ofc⁄n, c⁄° 
oÂ_hódî
 *
oh
)

2064 c⁄° 
oÂ_swôch_c⁄fig
 *
osc
 = 
	`oÂmsg_body
(
oh
);

2065 
oÂrŸo
 *oÂrŸÿ
	`ofc⁄n_gë_oÂrŸo
(
ofc⁄n
);

2066 
uöt16_t
 
Êags
 = 
	`¡ohs
(
osc
->flags);

2068 i‡(
	`ofc⁄n_gë_ty≥
(
ofc⁄n
Ë!
OFCONN_PRIMARY


2069 || 
	`ofc⁄n_gë_rﬁe
(
ofc⁄n
Ë!
NX_ROLE_SLAVE
) {

2070 
oÂ_c⁄fig_Êags
 
cur
 = 
oÂrŸo
->
‰ag_h™dlög
;

2071 
oÂ_c⁄fig_Êags
 
√xt
 = 
Êags
 & 
OFPC_FRAG_MASK
;

2073 
	`as£π
((
cur
 & 
OFPC_FRAG_MASK
) == cur);

2074 i‡(
cur
 !
√xt
) {

2075 i‡(
oÂrŸo
->
oÂrŸo_˛ass
->
	`£t_‰ag_h™dlög
(oÂrŸo, 
√xt
)) {

2076 
oÂrŸo
->
‰ag_h™dlög
 = 
√xt
;

2078 
	`VLOG_WARN_RL
(&
æ
, "%s: unsupported fragment handling mode %s",

2079 
oÂrŸo
->
«me
,

2080 
	`oÂutû_‰ag_h™dlög_to_°rög
(
√xt
));

2084 
	`ofc⁄n_£t_övÆid_âl_to_c⁄åﬁÀr
(
ofc⁄n
,

2085 (
Êags
 & 
OFPC_INVALID_TTL_TO_CONTROLLER
));

2087 
	`ofc⁄n_£t_miss_£nd_Àn
(
ofc⁄n
, 
	`¡ohs
(
osc
->
miss_£nd_Àn
));

2090 
	}
}

2097 
oÂîr


2098 
	$ªje˘_¶ave_c⁄åﬁÀr
(
ofc⁄n
 *ofconn)

2100 i‡(
	`ofc⁄n_gë_ty≥
(
ofc⁄n
Ë=
OFCONN_PRIMARY


2101 && 
	`ofc⁄n_gë_rﬁe
(
ofc⁄n
Ë=
NX_ROLE_SLAVE
) {

2102  
OFPERR_OFPBRC_EPERM
;

2106 
	}
}

2108 
oÂîr


2109 
	$h™dÀ_∑ckë_out
(
ofc⁄n
 *ofc⁄n, c⁄° 
oÂ_hódî
 *
oh
)

2111 
oÂrŸo
 *
p
 = 
	`ofc⁄n_gë_oÂrŸo
(
ofc⁄n
);

2112 
oÂutû_∑ckë_out
 
po
;

2113 
oÂbuf
 *
∑ylﬂd
;

2114 
uöt64_t
 
oÂa˘s_°ub
[1024 / 8];

2115 
oÂbuf
 
oÂa˘s
;

2116 
Êow
 flow;

2117 
oÂîr
 
îr‹
;

2119 
	`COVERAGE_INC
(
oÂrŸo_∑ckë_out
);

2121 
îr‹
 = 
	`ªje˘_¶ave_c⁄åﬁÀr
(
ofc⁄n
);

2122 i‡(
îr‹
) {

2123 
exô
;

2127 
	`oÂbuf_u£_°ub
(&
oÂa˘s
, 
oÂa˘s_°ub
,  ofpacts_stub);

2128 
îr‹
 = 
	`oÂutû_decode_∑ckë_out
(&
po
, 
oh
, &
oÂa˘s
);

2129 i‡(
îr‹
) {

2130 
exô_‰ì_oÂa˘s
;

2132 i‡(
po
.
ö_p‹t
 >
p
->
max_p‹ts
 &&Öo.ö_p‹à< 
OFPP_MAX
) {

2133 
îr‹
 = 
OFPERR_OFPBRC_BAD_PORT
;

2134 
exô_‰ì_oÂa˘s
;

2139 i‡(
po
.
buf„r_id
 !
UINT32_MAX
) {

2140 
îr‹
 = 
	`ofc⁄n_pktbuf_ªåõve
(
ofc⁄n
, 
po
.
buf„r_id
, &
∑ylﬂd
, 
NULL
);

2141 i‡(
îr‹
 || !
∑ylﬂd
) {

2142 
exô_‰ì_oÂa˘s
;

2145 
∑ylﬂd
 = 
	`xmÆloc
( *payload);

2146 
	`oÂbuf_u£_c⁄°
(
∑ylﬂd
, 
po
.
∑ckë
,Öo.
∑ckë_Àn
);

2150 
	`Êow_exåa˘
(
∑ylﬂd
, 0, 0, 
NULL
, 
po
.
ö_p‹t
, &
Êow
);

2151 
îr‹
 = 
	`oÂa˘s_check
(
po
.
oÂa˘s
,Öo.
oÂa˘s_Àn
, &
Êow
, 
p
->
max_p‹ts
);

2152 i‡(!
îr‹
) {

2153 
îr‹
 = 
p
->
oÂrŸo_˛ass
->
	`∑ckë_out
’, 
∑ylﬂd
, &
Êow
,

2154 
po
.
oÂa˘s
,Öo.
oÂa˘s_Àn
);

2156 
	`oÂbuf_dñëe
(
∑ylﬂd
);

2158 
exô_‰ì_oÂa˘s
:

2159 
	`oÂbuf_unöô
(&
oÂa˘s
);

2160 
exô
:

2161  
îr‹
;

2162 
	}
}

2165 
	$upd©e_p‹t_c⁄fig
(
oÂ‹t
 *
p‹t
,

2166 
oÂutû_p‹t_c⁄fig
 
c⁄fig
,

2167 
oÂutû_p‹t_c⁄fig
 
mask
)

2169 
oÂutû_p‹t_c⁄fig
 
ﬁd_c⁄fig
 = 
p‹t
->
µ
.
c⁄fig
;

2170 
oÂutû_p‹t_c⁄fig
 
toggÀ
;

2172 
toggÀ
 = (
c⁄fig
 ^ 
p‹t
->
µ
.c⁄figË& 
mask
;

2173 i‡(
toggÀ
 & 
OFPUTIL_PC_PORT_DOWN
) {

2174 i‡(
c⁄fig
 & 
OFPUTIL_PC_PORT_DOWN
) {

2175 
	`√tdev_tu∫_Êags_off
(
p‹t
->
√tdev
, 
NETDEV_UP
, 
åue
);

2177 
	`√tdev_tu∫_Êags_⁄
(
p‹t
->
√tdev
, 
NETDEV_UP
, 
åue
);

2179 
toggÀ
 &~
OFPUTIL_PC_PORT_DOWN
;

2182 
p‹t
->
µ
.
c⁄fig
 ^
toggÀ
;

2183 i‡(
p‹t
->
µ
.
c⁄fig
 !
ﬁd_c⁄fig
) {

2184 
p‹t
->
oÂrŸo
->
oÂrŸo_˛ass
->
	`p‹t_ªc⁄figuªd
’‹t, 
ﬁd_c⁄fig
);

2186 
	}
}

2188 
oÂîr


2189 
	$h™dÀ_p‹t_mod
(
ofc⁄n
 *ofc⁄n, c⁄° 
oÂ_hódî
 *
oh
)

2191 
oÂrŸo
 *
p
 = 
	`ofc⁄n_gë_oÂrŸo
(
ofc⁄n
);

2192 
oÂutû_p‹t_mod
 
pm
;

2193 
oÂ‹t
 *
p‹t
;

2194 
oÂîr
 
îr‹
;

2196 
îr‹
 = 
	`ªje˘_¶ave_c⁄åﬁÀr
(
ofc⁄n
);

2197 i‡(
îr‹
) {

2198  
îr‹
;

2201 
îr‹
 = 
	`oÂutû_decode_p‹t_mod
(
oh
, &
pm
);

2202 i‡(
îr‹
) {

2203  
îr‹
;

2206 
p‹t
 = 
	`oÂrŸo_gë_p‹t
(
p
, 
pm
.
p‹t_no
);

2207 i‡(!
p‹t
) {

2208  
OFPERR_OFPPMFC_BAD_PORT
;

2209 } i‡(!
	`ëh_addr_equÆs
(
p‹t
->
µ
.
hw_addr
, 
pm
.hw_addr)) {

2210  
OFPERR_OFPPMFC_BAD_HW_ADDR
;

2212 
	`upd©e_p‹t_c⁄fig
(
p‹t
, 
pm
.
c⁄fig
,Öm.
mask
);

2213 i‡(
pm
.
advîti£
) {

2214 
	`√tdev_£t_advîti£míts
(
p‹t
->
√tdev
, 
pm
.
advîti£
);

2218 
	}
}

2220 
oÂîr


2221 
	$h™dÀ_desc_°©s_ªque°
(
ofc⁄n
 *ofconn,

2222 c⁄° 
oÂ_hódî
 *
ªque°
)

2224 
oÂrŸo
 *
p
 = 
	`ofc⁄n_gë_oÂrŸo
(
ofc⁄n
);

2225 
oÂ_desc_°©s
 *
ods
;

2226 
oÂbuf
 *
msg
;

2228 
msg
 = 
	`oÂøw_Æloc_°©s_ª∂y
(
ªque°
, 0);

2229 
ods
 = 
	`oÂbuf_put_zîos
(
msg
,  *ods);

2230 
	`ovs_°æ˝y
(
ods
->
m‰_desc
, 
p
->mfr_desc,  ods->mfr_desc);

2231 
	`ovs_°æ˝y
(
ods
->
hw_desc
, 
p
->hw_desc,  ods->hw_desc);

2232 
	`ovs_°æ˝y
(
ods
->
sw_desc
, 
p
->sw_desc,  ods->sw_desc);

2233 
	`ovs_°æ˝y
(
ods
->
£rül_num
, 
p
->
£rül_desc
,  ods->serial_num);

2234 
	`ovs_°æ˝y
(
ods
->
dp_desc
, 
p
->dp_desc,  ods->dp_desc);

2235 
	`ofc⁄n_£nd_ª∂y
(
ofc⁄n
, 
msg
);

2238 
	}
}

2240 
oÂîr


2241 
	$h™dÀ_èbÀ_°©s_ªque°
(
ofc⁄n
 *ofconn,

2242 c⁄° 
oÂ_hódî
 *
ªque°
)

2244 
oÂrŸo
 *
p
 = 
	`ofc⁄n_gë_oÂrŸo
(
ofc⁄n
);

2245 
oÂ12_èbÀ_°©s
 *
Ÿs
;

2246 
oÂbuf
 *
msg
;

2247 
size_t
 
i
;

2255 
Ÿs
 = 
	`xˇŒoc
(
p
->
n_èbÀs
,  *ots);

2256 
i
 = 0; i < 
p
->
n_èbÀs
; i++) {

2257 
Ÿs
[
i
].
èbÀ_id
 = i;

2258 
	`•rötf
(
Ÿs
[
i
].
«me
, "table%zu", i);

2259 
Ÿs
[
i
].
m©ch
 = 
	`ht⁄Œ
(
OFPXMT12_MASK
);

2260 
Ÿs
[
i
].
wûdˇrds
 = 
	`ht⁄Œ
(
OFPXMT12_MASK
);

2261 
Ÿs
[
i
].
wrôe_a˘i⁄s
 = 
	`ht⁄l
(
OFPAT11_OUTPUT
);

2262 
Ÿs
[
i
].
≠∂y_a˘i⁄s
 = 
	`ht⁄l
(
OFPAT11_OUTPUT
);

2263 
Ÿs
[
i
].
wrôe_£tfõlds
 = 
	`ht⁄Œ
(
OFPXMT12_MASK
);

2264 
Ÿs
[
i
].
≠∂y_£tfõlds
 = 
	`ht⁄Œ
(
OFPXMT12_MASK
);

2265 
Ÿs
[
i
].
mëad©a_m©ch
 = 
	`ht⁄Œ
(
UINT64_MAX
);

2266 
Ÿs
[
i
].
mëad©a_wrôe
 = 
	`ht⁄Œ
(
UINT64_MAX
);

2267 
Ÿs
[
i
].
ö°ru˘i⁄s
 = 
	`ht⁄l
(
OFPIT11_ALL
);

2268 
Ÿs
[
i
].
c⁄fig
 = 
	`ht⁄l
(
OFPTC11_TABLE_MISS_MASK
);

2269 
Ÿs
[
i
].
max_íåõs
 = 
	`ht⁄l
(1000000);

2270 
Ÿs
[
i
].
a˘ive_cou¡
 = 
	`ht⁄l
(
	`˛assifõr_cou¡
(&
p
->
èbÀs
[i].
˛s
));

2273 
p
->
oÂrŸo_˛ass
->
	`gë_èbÀs
’, 
Ÿs
);

2275 
i
 = 0; i < 
p
->
n_èbÀs
; i++) {

2276 c⁄° 
o·abÀ
 *
èbÀ
 = &
p
->
èbÀs
[
i
];

2278 i‡(
èbÀ
->
«me
) {

2279 
	`ovs_°rz˝y
(
Ÿs
[
i
].
«me
, 
èbÀ
->name,  ots[i].name);

2282 i‡(
èbÀ
->
max_Êows
 < 
	`¡ohl
(
Ÿs
[
i
].
max_íåõs
)) {

2283 
Ÿs
[
i
].
max_íåõs
 = 
	`ht⁄l
(
èbÀ
->
max_Êows
);

2287 
msg
 = 
	`oÂutû_ícode_èbÀ_°©s_ª∂y
(
Ÿs
, 
p
->
n_èbÀs
, 
ªque°
);

2288 
	`ofc⁄n_£nd_ª∂y
(
ofc⁄n
, 
msg
);

2290 
	`‰ì
(
Ÿs
);

2293 
	}
}

2296 
	$≠≥nd_p‹t_°©
(
oÂ‹t
 *
p‹t
, 
li°
 *
ª∂õs
)

2298 
oÂutû_p‹t_°©s
 
›s
 = { .
p‹t_no
 = 
p‹t
->
µ
.port_no };

2303 
	`oÂrŸo_p‹t_gë_°©s
(
p‹t
, &
›s
.
°©s
);

2305 
	`oÂutû_≠≥nd_p‹t_°©
(
ª∂õs
, &
›s
);

2306 
	}
}

2308 
oÂîr


2309 
	$h™dÀ_p‹t_°©s_ªque°
(
ofc⁄n
 *ofconn,

2310 c⁄° 
oÂ_hódî
 *
ªque°
)

2312 
oÂrŸo
 *
p
 = 
	`ofc⁄n_gë_oÂrŸo
(
ofc⁄n
);

2313 
oÂ‹t
 *
p‹t
;

2314 
li°
 
ª∂õs
;

2315 
uöt16_t
 
p‹t_no
;

2316 
oÂîr
 
îr‹
;

2318 
îr‹
 = 
	`oÂutû_decode_p‹t_°©s_ªque°
(
ªque°
, &
p‹t_no
);

2319 i‡(
îr‹
) {

2320  
îr‹
;

2323 
	`oÂmp_öô
(&
ª∂õs
, 
ªque°
);

2324 i‡(
p‹t_no
 !
OFPP_NONE
) {

2325 
p‹t
 = 
	`oÂrŸo_gë_p‹t
(
p
, 
p‹t_no
);

2326 i‡(
p‹t
) {

2327 
	`≠≥nd_p‹t_°©
(
p‹t
, &
ª∂õs
);

2330 
	`HMAP_FOR_EACH
 (
p‹t
, 
hm≠_node
, &
p
->
p‹ts
) {

2331 
	`≠≥nd_p‹t_°©
(
p‹t
, &
ª∂õs
);

2335 
	`ofc⁄n_£nd_ª∂õs
(
ofc⁄n
, &
ª∂õs
);

2337 
	}
}

2339 
oÂîr


2340 
	$h™dÀ_p‹t_desc_°©s_ªque°
(
ofc⁄n
 *ofconn,

2341 c⁄° 
oÂ_hódî
 *
ªque°
)

2343 
oÂrŸo
 *
p
 = 
	`ofc⁄n_gë_oÂrŸo
(
ofc⁄n
);

2344 
oÂ_vîsi⁄
 
vîsi⁄
;

2345 
oÂ‹t
 *
p‹t
;

2346 
li°
 
ª∂õs
;

2348 
	`oÂmp_öô
(&
ª∂õs
, 
ªque°
);

2350 
vîsi⁄
 = 
	`oÂutû_¥Ÿocﬁ_to_oÂ_vîsi⁄
(
	`ofc⁄n_gë_¥Ÿocﬁ
(
ofc⁄n
));

2351 
	`HMAP_FOR_EACH
 (
p‹t
, 
hm≠_node
, &
p
->
p‹ts
) {

2352 
	`oÂutû_≠≥nd_p‹t_desc_°©s_ª∂y
(
vîsi⁄
, &
p‹t
->
µ
, &
ª∂õs
);

2355 
	`ofc⁄n_£nd_ª∂õs
(
ofc⁄n
, &
ª∂õs
);

2357 
	}
}

2360 
	$ˇlc_Êow_duøti⁄__
(
°¨t
, 
now
,

2361 
uöt32_t
 *
£c
, uöt32_à*
n£c
)

2363 
m£cs
 = 
now
 - 
°¨t
;

2364 *
£c
 = 
m£cs
 / 1000;

2365 *
n£c
 = (
m£cs
 % 1000) * (1000 * 1000);

2366 
	}
}

2370 
oÂîr


2371 
	$check_èbÀ_id
(c⁄° 
oÂrŸo
 *oÂrŸo, 
uöt8_t
 
èbÀ_id
)

2373  (
èbÀ_id
 =0xf‡||ÅabÀ_id < 
oÂrŸo
->
n_èbÀs


2375 : 
OFPERR_OFPBRC_BAD_TABLE_ID
);

2377 
	}
}

2379 
o·abÀ
 *

2380 
	$√xt_visibÀ_èbÀ
(c⁄° 
oÂrŸo
 *oÂrŸo, 
uöt8_t
 
èbÀ_id
)

2382 
o·abÀ
 *
èbÀ
;

2384 
èbÀ
 = &
oÂrŸo
->
èbÀs
[
èbÀ_id
];

2385 
èbÀ
 < &
oÂrŸo
->
èbÀs
[oÂrŸo->
n_èbÀs
];

2386 
èbÀ
++) {

2387 i‡(!(
èbÀ
->
Êags
 & 
OFTABLE_HIDDEN
)) {

2388  
èbÀ
;

2392  
NULL
;

2393 
	}
}

2395 
o·abÀ
 *

2396 
	$fú°_m©chög_èbÀ
(c⁄° 
oÂrŸo
 *oÂrŸo, 
uöt8_t
 
èbÀ_id
)

2398 i‡(
èbÀ_id
 == 0xff) {

2399  
	`√xt_visibÀ_èbÀ
(
oÂrŸo
, 0);

2400 } i‡(
èbÀ_id
 < 
oÂrŸo
->
n_èbÀs
) {

2401  &
oÂrŸo
->
èbÀs
[
èbÀ_id
];

2403  
NULL
;

2405 
	}
}

2407 
o·abÀ
 *

2408 
	$√xt_m©chög_èbÀ
(c⁄° 
oÂrŸo
 *ofproto,

2409 c⁄° 
o·abÀ
 *
èbÀ
, 
uöt8_t
 
èbÀ_id
)

2411  (
èbÀ_id
 == 0xff

2412 ? 
	`√xt_visibÀ_èbÀ
(
oÂrŸo
, (
èbÀ
 - oÂrŸo->
èbÀs
) + 1)

2413 : 
NULL
);

2414 
	}
}

2431 
	#FOR_EACH_MATCHING_TABLE
(
TABLE
, 
TABLE_ID
, 
OFPROTO
) \

2432 (
TABLE
Ë
	`fú°_m©chög_èbÀ
(
OFPROTO
, 
TABLE_ID
); \

2433 (
TABLE
Ë!
NULL
; \

2434 (
TABLE
Ë
	`√xt_m©chög_èbÀ
(
OFPROTO
, TABLE, 
TABLE_ID
))

	)

2447 
oÂîr


2448 
	$cﬁÀ˘_ruÀs_loo£
(
oÂrŸo
 *oÂrŸo, 
uöt8_t
 
èbÀ_id
,

2449 c⁄° 
m©ch
 *match,

2450 
ovs_be64
 
cookõ
, ovs_be64 
cookõ_mask
,

2451 
uöt16_t
 
out_p‹t
, 
li°
 *
ruÀs
)

2453 
o·abÀ
 *
èbÀ
;

2454 
˛s_ruÀ
 
¸
;

2455 
oÂîr
 
îr‹
;

2457 
îr‹
 = 
	`check_èbÀ_id
(
oÂrŸo
, 
èbÀ_id
);

2458 i‡(
îr‹
) {

2459  
îr‹
;

2462 
	`li°_öô
(
ruÀs
);

2463 
	`˛s_ruÀ_öô
(&
¸
, 
m©ch
, 0);

2464 
	`FOR_EACH_MATCHING_TABLE
 (
èbÀ
, 
èbÀ_id
, 
oÂrŸo
) {

2465 
˛s_curs‹
 
curs‹
;

2466 
ruÀ
 *rule;

2468 
	`˛s_curs‹_öô
(&
curs‹
, &
èbÀ
->
˛s
, &
¸
);

2469 
	`CLS_CURSOR_FOR_EACH
 (
ruÀ
, 
¸
, &
curs‹
) {

2470 i‡(
ruÀ
->
≥ndög
) {

2471 
îr‹
 = 
OFPROTO_POSTPONE
;

2472 
exô
;

2474 i‡(!
	`oÂrŸo_ruÀ_is_hiddí
(
ruÀ
)

2475 && 
	`oÂrŸo_ruÀ_has_out_p‹t
(
ruÀ
, 
out_p‹t
)

2476 && !((
ruÀ
->
Êow_cookõ
 ^ 
cookõ
Ë& 
cookõ_mask
)) {

2477 
	`li°_push_back
(
ruÀs
, &
ruÀ
->
oÂrŸo_node
);

2482 
exô
:

2483 
	`˛s_ruÀ_de°roy
(&
¸
);

2484  
îr‹
;

2485 
	}
}

2498 
oÂîr


2499 
	$cﬁÀ˘_ruÀs_°ri˘
(
oÂrŸo
 *oÂrŸo, 
uöt8_t
 
èbÀ_id
,

2500 c⁄° 
m©ch
 *m©ch, 
¥i‹ôy
,

2501 
ovs_be64
 
cookõ
, ovs_be64 
cookõ_mask
,

2502 
uöt16_t
 
out_p‹t
, 
li°
 *
ruÀs
)

2504 
o·abÀ
 *
èbÀ
;

2505 
˛s_ruÀ
 
¸
;

2506 
îr‹
;

2508 
îr‹
 = 
	`check_èbÀ_id
(
oÂrŸo
, 
èbÀ_id
);

2509 i‡(
îr‹
) {

2510  
îr‹
;

2513 
	`li°_öô
(
ruÀs
);

2514 
	`˛s_ruÀ_öô
(&
¸
, 
m©ch
, 
¥i‹ôy
);

2515 
	`FOR_EACH_MATCHING_TABLE
 (
èbÀ
, 
èbÀ_id
, 
oÂrŸo
) {

2516 
ruÀ
 *rule;

2518 
ruÀ
 = 
	`ruÀ_‰om_˛s_ruÀ
(
	`˛assifõr_föd_ruÀ_exa˘ly
(&
èbÀ
->
˛s
,

2519 &
¸
));

2520 i‡(
ruÀ
) {

2521 i‡(
ruÀ
->
≥ndög
) {

2522 
îr‹
 = 
OFPROTO_POSTPONE
;

2523 
exô
;

2525 i‡(!
	`oÂrŸo_ruÀ_is_hiddí
(
ruÀ
)

2526 && 
	`oÂrŸo_ruÀ_has_out_p‹t
(
ruÀ
, 
out_p‹t
)

2527 && !((
ruÀ
->
Êow_cookõ
 ^ 
cookõ
Ë& 
cookõ_mask
)) {

2528 
	`li°_push_back
(
ruÀs
, &
ruÀ
->
oÂrŸo_node
);

2533 
exô
:

2534 
	`˛s_ruÀ_de°roy
(&
¸
);

2536 
	}
}

2541 
	$age_£cs
(
age_ms
)

2543  (
age_ms
 < 0 ? 0

2544 : 
age_ms
 >
UINT16_MAX
 * 1000 ? UINT16_MAX

2545 : (Ë
age_ms
 / 1000);

2546 
	}
}

2548 
oÂîr


2549 
	$h™dÀ_Êow_°©s_ªque°
(
ofc⁄n
 *ofconn,

2550 c⁄° 
oÂ_hódî
 *
ªque°
)

2552 
oÂrŸo
 *oÂrŸÿ
	`ofc⁄n_gë_oÂrŸo
(
ofc⁄n
);

2553 
oÂutû_Êow_°©s_ªque°
 
f§
;

2554 
li°
 
ª∂õs
;

2555 
li°
 
ruÀs
;

2556 
ruÀ
 *rule;

2557 
oÂîr
 
îr‹
;

2559 
îr‹
 = 
	`oÂutû_decode_Êow_°©s_ªque°
(&
f§
, 
ªque°
);

2560 i‡(
îr‹
) {

2561  
îr‹
;

2564 
îr‹
 = 
	`cﬁÀ˘_ruÀs_loo£
(
oÂrŸo
, 
f§
.
èbÀ_id
, &f§.
m©ch
,

2565 
f§
.
cookõ
, f§.
cookõ_mask
,

2566 
f§
.
out_p‹t
, &
ruÀs
);

2567 i‡(
îr‹
) {

2568  
îr‹
;

2571 
	`oÂmp_öô
(&
ª∂õs
, 
ªque°
);

2572 
	`LIST_FOR_EACH
 (
ruÀ
, 
oÂrŸo_node
, &
ruÀs
) {

2573 
now
 = 
	`time_m£c
();

2574 
oÂutû_Êow_°©s
 
fs
;

2576 
	`möim©ch_ex∑nd
(&
ruÀ
->
¸
.
m©ch
, &
fs
.match);

2577 
fs
.
¥i‹ôy
 = 
ruÀ
->
¸
.priority;

2578 
fs
.
cookõ
 = 
ruÀ
->
Êow_cookõ
;

2579 
fs
.
èbÀ_id
 = 
ruÀ
->table_id;

2580 
	`ˇlc_Êow_duøti⁄__
(
ruÀ
->
¸óãd
, 
now
, &
fs
.
duøti⁄_£c
,

2581 &
fs
.
duøti⁄_n£c
);

2582 
fs
.
idÀ_timeout
 = 
ruÀ
->idle_timeout;

2583 
fs
.
h¨d_timeout
 = 
ruÀ
->hard_timeout;

2584 
fs
.
idÀ_age
 = 
	`age_£cs
(
now
 - 
ruÀ
->
u£d
);

2585 
fs
.
h¨d_age
 = 
	`age_£cs
(
now
 - 
ruÀ
->
modifõd
);

2586 
oÂrŸo
->
oÂrŸo_˛ass
->
	`ruÀ_gë_°©s
(
ruÀ
, &
fs
.
∑ckë_cou¡
,

2587 &
fs
.
byã_cou¡
);

2588 
fs
.
oÂa˘s
 = 
ruÀ
->ofpacts;

2589 
fs
.
oÂa˘s_Àn
 = 
ruÀ
->ofpacts_len;

2590 
	`oÂutû_≠≥nd_Êow_°©s_ª∂y
(&
fs
, &
ª∂õs
);

2592 
	`ofc⁄n_£nd_ª∂õs
(
ofc⁄n
, &
ª∂õs
);

2595 
	}
}

2598 
	$Êow_°©s_ds
(
ruÀ
 *ruÀ, 
ds
 *
ªsu…s
)

2600 
uöt64_t
 
∑ckë_cou¡
, 
byã_cou¡
;

2602 
ruÀ
->
oÂrŸo
->
oÂrŸo_˛ass
->
	`ruÀ_gë_°©s
(rule,

2603 &
∑ckë_cou¡
, &
byã_cou¡
);

2605 i‡(
ruÀ
->
èbÀ_id
 != 0) {

2606 
	`ds_put_f‹m©
(
ªsu…s
, "èbÀ_id=%"
PRIu8
", ", 
ruÀ
->
èbÀ_id
);

2608 
	`ds_put_f‹m©
(
ªsu…s
, "duration=%llds, ",

2609 (
	`time_m£c
(Ë- 
ruÀ
->
¸óãd
) / 1000);

2610 
	`ds_put_f‹m©
(
ªsu…s
, "¥i‹ôy=%u, ", 
ruÀ
->
¸
.
¥i‹ôy
);

2611 
	`ds_put_f‹m©
(
ªsu…s
, "n_∑ckës=%"
PRIu64
", ", 
∑ckë_cou¡
);

2612 
	`ds_put_f‹m©
(
ªsu…s
, "n_byãs=%"
PRIu64
", ", 
byã_cou¡
);

2613 
	`˛s_ruÀ_f‹m©
(&
ruÀ
->
¸
, 
ªsu…s
);

2614 
	`ds_put_ch¨
(
ªsu…s
, ',');

2615 i‡(
ruÀ
->
oÂa˘s_Àn
 > 0) {

2616 
	`oÂa˘s_f‹m©
(
ruÀ
->
oÂa˘s
,ÑuÀ->
oÂa˘s_Àn
, 
ªsu…s
);

2618 
	`ds_put_c°r
(
ªsu…s
, "drop");

2620 
	`ds_put_c°r
(
ªsu…s
, "\n");

2621 
	}
}

2626 
	$oÂrŸo_gë_Æl_Êows
(
oÂrŸo
 *
p
, 
ds
 *
ªsu…s
)

2628 
o·abÀ
 *
èbÀ
;

2630 
	`OFPROTO_FOR_EACH_TABLE
 (
èbÀ
, 
p
) {

2631 
˛s_curs‹
 
curs‹
;

2632 
ruÀ
 *rule;

2634 
	`˛s_curs‹_öô
(&
curs‹
, &
èbÀ
->
˛s
, 
NULL
);

2635 
	`CLS_CURSOR_FOR_EACH
 (
ruÀ
, 
¸
, &
curs‹
) {

2636 
	`Êow_°©s_ds
(
ruÀ
, 
ªsu…s
);

2639 
	}
}

2644 
	$oÂrŸo_gë_√tÊow_ids
(c⁄° 
oÂrŸo
 *ofproto,

2645 
uöt8_t
 *
ígöe_ty≥
, uöt8_à*
ígöe_id
)

2647 
oÂrŸo
->
oÂrŸo_˛ass
->
	`gë_√tÊow_ids
(oÂrŸo, 
ígöe_ty≥
, 
ígöe_id
);

2648 
	}
}

2655 
	$oÂrŸo_p‹t_gë_cfm_Áu…
(c⁄° 
oÂrŸo
 *oÂrŸo, 
uöt16_t
 
oÂ_p‹t
)

2657 
oÂ‹t
 *oÂ‹à
	`oÂrŸo_gë_p‹t
(
oÂrŸo
, 
oÂ_p‹t
);

2658  (
oÂ‹t
 && 
oÂrŸo
->
oÂrŸo_˛ass
->
gë_cfm_Áu…


2659 ? 
oÂrŸo
->
oÂrŸo_˛ass
->
	`gë_cfm_Áu…
(
oÂ‹t
)

2661 
	}
}

2668 
	$oÂrŸo_p‹t_gë_cfm_›up
(c⁄° 
oÂrŸo
 *oÂrŸo, 
uöt16_t
 
oÂ_p‹t
)

2670 
oÂ‹t
 *oÂ‹à
	`oÂrŸo_gë_p‹t
(
oÂrŸo
, 
oÂ_p‹t
);

2671  (
oÂ‹t
 && 
oÂrŸo
->
oÂrŸo_˛ass
->
gë_cfm_›up


2672 ? 
oÂrŸo
->
oÂrŸo_˛ass
->
	`gë_cfm_›up
(
oÂ‹t
)

2674 
	}
}

2681 
	$oÂrŸo_p‹t_gë_cfm_ªmŸe_mpids
(c⁄° 
oÂrŸo
 *ofproto,

2682 
uöt16_t
 
oÂ_p‹t
, c⁄° 
uöt64_t
 **
rmps
,

2683 
size_t
 *
n_rmps
)

2685 
oÂ‹t
 *oÂ‹à
	`oÂrŸo_gë_p‹t
(
oÂrŸo
, 
oÂ_p‹t
);

2687 *
rmps
 = 
NULL
;

2688 *
n_rmps
 = 0;

2689  (
oÂ‹t
 && 
oÂrŸo
->
oÂrŸo_˛ass
->
gë_cfm_ªmŸe_mpids


2690 ? 
oÂrŸo
->
oÂrŸo_˛ass
->
	`gë_cfm_ªmŸe_mpids
(
oÂ‹t
, 
rmps
,

2691 
n_rmps
)

2693 
	}
}

2700 
	$oÂrŸo_p‹t_gë_cfm_hó…h
(c⁄° 
oÂrŸo
 *oÂrŸo, 
uöt16_t
 
oÂ_p‹t
)

2702 
oÂ‹t
 *oÂ‹à
	`oÂrŸo_gë_p‹t
(
oÂrŸo
, 
oÂ_p‹t
);

2703  (
oÂ‹t
 && 
oÂrŸo
->
oÂrŸo_˛ass
->
gë_cfm_hó…h


2704 ? 
oÂrŸo
->
oÂrŸo_˛ass
->
	`gë_cfm_hó…h
(
oÂ‹t
)

2706 
	}
}

2708 
oÂîr


2709 
	$h™dÀ_aggªg©e_°©s_ªque°
(
ofc⁄n
 *ofconn,

2710 c⁄° 
oÂ_hódî
 *
oh
)

2712 
oÂrŸo
 *oÂrŸÿ
	`ofc⁄n_gë_oÂrŸo
(
ofc⁄n
);

2713 
oÂutû_Êow_°©s_ªque°
 
ªque°
;

2714 
oÂutû_aggªg©e_°©s
 
°©s
;

2715 
boﬁ
 
unknown_∑ckës
, 
unknown_byãs
;

2716 
oÂbuf
 *
ª∂y
;

2717 
li°
 
ruÀs
;

2718 
ruÀ
 *rule;

2719 
oÂîr
 
îr‹
;

2721 
îr‹
 = 
	`oÂutû_decode_Êow_°©s_ªque°
(&
ªque°
, 
oh
);

2722 i‡(
îr‹
) {

2723  
îr‹
;

2726 
îr‹
 = 
	`cﬁÀ˘_ruÀs_loo£
(
oÂrŸo
, 
ªque°
.
èbÀ_id
, &ªque°.
m©ch
,

2727 
ªque°
.
cookõ
,Ñeque°.
cookõ_mask
,

2728 
ªque°
.
out_p‹t
, &
ruÀs
);

2729 i‡(
îr‹
) {

2730  
îr‹
;

2733 
	`mem£t
(&
°©s
, 0,  stats);

2734 
unknown_∑ckës
 = 
unknown_byãs
 = 
Ál£
;

2735 
	`LIST_FOR_EACH
 (
ruÀ
, 
oÂrŸo_node
, &
ruÀs
) {

2736 
uöt64_t
 
∑ckë_cou¡
;

2737 
uöt64_t
 
byã_cou¡
;

2739 
oÂrŸo
->
oÂrŸo_˛ass
->
	`ruÀ_gë_°©s
(
ruÀ
, &
∑ckë_cou¡
,

2740 &
byã_cou¡
);

2742 i‡(
∑ckë_cou¡
 =
UINT64_MAX
) {

2743 
unknown_∑ckës
 = 
åue
;

2745 
°©s
.
∑ckë_cou¡
 +=Öacket_count;

2748 i‡(
byã_cou¡
 =
UINT64_MAX
) {

2749 
unknown_byãs
 = 
åue
;

2751 
°©s
.
byã_cou¡
 += byte_count;

2754 
°©s
.
Êow_cou¡
++;

2756 i‡(
unknown_∑ckës
) {

2757 
°©s
.
∑ckë_cou¡
 = 
UINT64_MAX
;

2759 i‡(
unknown_byãs
) {

2760 
°©s
.
byã_cou¡
 = 
UINT64_MAX
;

2763 
ª∂y
 = 
	`oÂutû_ícode_aggªg©e_°©s_ª∂y
(&
°©s
, 
oh
);

2764 
	`ofc⁄n_£nd_ª∂y
(
ofc⁄n
, 
ª∂y
);

2767 
	}
}

2769 
	squeue_°©s_cbd©a
 {

2770 
oÂ‹t
 *
	moÂ‹t
;

2771 
li°
 
	mª∂õs
;

2775 
	$put_queue_°©s
(
queue_°©s_cbd©a
 *
cbd©a
, 
uöt32_t
 
queue_id
,

2776 c⁄° 
√tdev_queue_°©s
 *
°©s
)

2779 
oÂutû_queue_°©s
 
oqs
 = {

2780 .
p‹t_no
 = 
cbd©a
->
oÂ‹t
->
µ
.port_no,

2781 .
queue_id
 = queue_id,

2782 .
°©s
 = *stats,

2784 
	`oÂutû_≠≥nd_queue_°©
(&
cbd©a
->
ª∂õs
, &
oqs
);

2785 
	}
}

2788 
	$h™dÀ_queue_°©s_dump_cb
(
uöt32_t
 
queue_id
,

2789 
√tdev_queue_°©s
 *
°©s
,

2790 *
cbd©a_
)

2792 
queue_°©s_cbd©a
 *
cbd©a
 = 
cbd©a_
;

2794 
	`put_queue_°©s
(
cbd©a
, 
queue_id
, 
°©s
);

2795 
	}
}

2797 
oÂîr


2798 
	$h™dÀ_queue_°©s_f‹_p‹t
(
oÂ‹t
 *
p‹t
, 
uöt32_t
 
queue_id
,

2799 
queue_°©s_cbd©a
 *
cbd©a
)

2801 
cbd©a
->
oÂ‹t
 = 
p‹t
;

2802 i‡(
queue_id
 =
OFPQ_ALL
) {

2803 
	`√tdev_dump_queue_°©s
(
p‹t
->
√tdev
,

2804 
h™dÀ_queue_°©s_dump_cb
, 
cbd©a
);

2806 
√tdev_queue_°©s
 
°©s
;

2808 i‡(!
	`√tdev_gë_queue_°©s
(
p‹t
->
√tdev
, 
queue_id
, &
°©s
)) {

2809 
	`put_queue_°©s
(
cbd©a
, 
queue_id
, &
°©s
);

2811  
OFPERR_OFPQOFC_BAD_QUEUE
;

2815 
	}
}

2817 
oÂîr


2818 
	$h™dÀ_queue_°©s_ªque°
(
ofc⁄n
 *ofconn,

2819 c⁄° 
oÂ_hódî
 *
rq
)

2821 
oÂrŸo
 *oÂrŸÿ
	`ofc⁄n_gë_oÂrŸo
(
ofc⁄n
);

2822 
queue_°©s_cbd©a
 
cbd©a
;

2823 
oÂ‹t
 *
p‹t
;

2824 
oÂîr
 
îr‹
;

2825 
oÂutû_queue_°©s_ªque°
 
oq§
;

2827 
	`COVERAGE_INC
(
oÂrŸo_queue_ªq
);

2829 
	`oÂmp_öô
(&
cbd©a
.
ª∂õs
, 
rq
);

2831 
îr‹
 = 
	`oÂutû_decode_queue_°©s_ªque°
(
rq
, &
oq§
);

2832 i‡(
îr‹
) {

2833  
îr‹
;

2836 i‡(
oq§
.
p‹t_no
 =
OFPP_ALL
) {

2837 
îr‹
 = 
OFPERR_OFPQOFC_BAD_QUEUE
;

2838 
	`HMAP_FOR_EACH
 (
p‹t
, 
hm≠_node
, &
oÂrŸo
->
p‹ts
) {

2839 i‡(!
	`h™dÀ_queue_°©s_f‹_p‹t
(
p‹t
, 
oq§
.
queue_id
, &
cbd©a
)) {

2840 
îr‹
 = 0;

2844 
p‹t
 = 
	`oÂrŸo_gë_p‹t
(
oÂrŸo
, 
oq§
.
p‹t_no
);

2845 
îr‹
 = (
p‹t


2846 ? 
	`h™dÀ_queue_°©s_f‹_p‹t
(
p‹t
, 
oq§
.
queue_id
, &
cbd©a
)

2847 : 
OFPERR_OFPQOFC_BAD_PORT
);

2849 i‡(!
îr‹
) {

2850 
	`ofc⁄n_£nd_ª∂õs
(
ofc⁄n
, &
cbd©a
.
ª∂õs
);

2852 
	`oÂbuf_li°_dñëe
(&
cbd©a
.
ª∂õs
);

2855  
îr‹
;

2856 
	}
}

2858 
boﬁ


2859 
	$is_Êow_dñëi⁄_≥ndög
(c⁄° 
oÂrŸo
 *ofproto,

2860 c⁄° 
˛s_ruÀ
 *cls_rule,

2861 
uöt8_t
 
èbÀ_id
)

2863 i‡(!
	`hm≠_is_em±y
(&
oÂrŸo
->
dñëi⁄s
)) {

2864 
of›î©i⁄
 *
›
;

2866 
	`HMAP_FOR_EACH_WITH_HASH
 (
›
, 
hm≠_node
,

2867 
	`˛s_ruÀ_hash
(
˛s_ruÀ
, 
èbÀ_id
),

2868 &
oÂrŸo
->
dñëi⁄s
) {

2869 i‡(
	`˛s_ruÀ_equÆ
(
˛s_ruÀ
, &
›
->
ruÀ
->
¸
)) {

2870  
åue
;

2875  
Ál£
;

2876 
	}
}

2891 
oÂîr


2892 
	$add_Êow
(
oÂrŸo
 *oÂrŸo, 
ofc⁄n
 *ofconn,

2893 c⁄° 
oÂutû_Êow_mod
 *
fm
, c⁄° 
oÂ_hódî
 *
ªque°
)

2895 
o·abÀ
 *
èbÀ
;

2896 
of›group
 *
group
;

2897 
ruÀ
 *
vi˘im
;

2898 
˛s_ruÀ
 
¸
;

2899 
ruÀ
 *rule;

2900 
îr‹
;

2902 
îr‹
 = 
	`check_èbÀ_id
(
oÂrŸo
, 
fm
->
èbÀ_id
);

2903 i‡(
îr‹
) {

2904  
îr‹
;

2908 i‡(
fm
->
èbÀ_id
 == 0xff) {

2909 
uöt8_t
 
èbÀ_id
;

2910 i‡(
oÂrŸo
->
oÂrŸo_˛ass
->
ruÀ_choo£_èbÀ
) {

2911 
îr‹
 = 
oÂrŸo
->
oÂrŸo_˛ass
->
	`ruÀ_choo£_èbÀ
(ofproto,

2912 &
fm
->
m©ch
,

2913 &
èbÀ_id
);

2914 i‡(
îr‹
) {

2915  
îr‹
;

2917 
	`as£π
(
èbÀ_id
 < 
oÂrŸo
->
n_èbÀs
);

2918 
èbÀ
 = &
oÂrŸo
->
èbÀs
[
èbÀ_id
];

2920 
èbÀ
 = &
oÂrŸo
->
èbÀs
[0];

2922 } i‡(
fm
->
èbÀ_id
 < 
oÂrŸo
->
n_èbÀs
) {

2923 
èbÀ
 = &
oÂrŸo
->
èbÀs
[
fm
->
èbÀ_id
];

2925  
OFPERR_OFPBRC_BAD_TABLE_ID
;

2928 i‡(
èbÀ
->
Êags
 & 
OFTABLE_READONLY
) {

2929  
OFPERR_OFPBRC_EPERM
;

2933 
ruÀ
 = 
oÂrŸo
->
oÂrŸo_˛ass
->
	`ruÀ_Æloc
();

2934 i‡(!
ruÀ
) {

2935 
	`VLOG_WARN_RL
(&
æ
, "%s: failedÅo createÑule (%s)",

2936 
oÂrŸo
->
«me
, 
	`°ªº‹
(
îr‹
));

2937  
ENOMEM
;

2939 
	`˛s_ruÀ_öô
(&
ruÀ
->
¸
, &
fm
->
m©ch
, fm->
¥i‹ôy
);

2942 i‡(
	`is_Êow_dñëi⁄_≥ndög
(
oÂrŸo
, &
¸
, 
èbÀ
 - oÂrŸo->
èbÀs
)) {

2943 
	`˛s_ruÀ_de°roy
(&
ruÀ
->
¸
);

2944 
oÂrŸo
->
oÂrŸo_˛ass
->
	`ruÀ_dóŒoc
(
ruÀ
);

2945  
OFPROTO_POSTPONE
;

2949 i‡(
fm
->
Êags
 & 
OFPFF_CHECK_OVERLAP


2950 && 
	`˛assifõr_ruÀ_ovîœps
(&
èbÀ
->
˛s
, &
ruÀ
->
¸
)) {

2951 
	`˛s_ruÀ_de°roy
(&
ruÀ
->
¸
);

2952 
oÂrŸo
->
oÂrŸo_˛ass
->
	`ruÀ_dóŒoc
(
ruÀ
);

2953  
OFPERR_OFPFMFC_OVERLAP
;

2956 
ruÀ
->
oÂrŸo
 = ofproto;

2957 
ruÀ
->
≥ndög
 = 
NULL
;

2958 
ruÀ
->
Êow_cookõ
 = 
fm
->
√w_cookõ
;

2959 
ruÀ
->
¸óãd
 =ÑuÀ->
modifõd
 =ÑuÀ->
u£d
 = 
	`time_m£c
();

2960 
ruÀ
->
idÀ_timeout
 = 
fm
->idle_timeout;

2961 
ruÀ
->
h¨d_timeout
 = 
fm
->hard_timeout;

2962 
ruÀ
->
èbÀ_id
 = 
èbÀ
 - 
oÂrŸo
->
èbÀs
;

2963 
ruÀ
->
£nd_Êow_ªmoved
 = (
fm
->
Êags
 & 
OFPFF_SEND_FLOW_REM
) != 0;

2964 
ruÀ
->
oÂa˘s
 = 
	`xmemdup
(
fm
->oÂa˘s, fm->
oÂa˘s_Àn
);

2965 
ruÀ
->
oÂa˘s_Àn
 = 
fm
->ofpacts_len;

2966 
ruÀ
->
evi˘abÀ
 = 
åue
;

2967 
ruÀ
->
evi˘i⁄_group
 = 
NULL
;

2968 
ruÀ
->
m⁄ô‹_Êags
 = 0;

2969 
ruÀ
->
add_£qno
 = 0;

2970 
ruÀ
->
modify_£qno
 = 0;

2973 
vi˘im
 = 
	`o·abÀ_ª∂a˚_ruÀ
(
ruÀ
);

2974 i‡(
vi˘im
 && !
	`ruÀ_is_modifübÀ
(victim)) {

2975 
îr‹
 = 
OFPERR_OFPBRC_EPERM
;

2976 } i‡(
vi˘im
 && vi˘im->
≥ndög
) {

2977 
îr‹
 = 
OFPROTO_POSTPONE
;

2979 
of›î©i⁄
 *
›
;

2980 
ruÀ
 *
evi˘
;

2982 i‡(
	`˛assifõr_cou¡
(&
èbÀ
->
˛s
Ë>ÅabÀ->
max_Êows
) {

2983 
boﬁ
 
was_evi˘abÀ
;

2985 
was_evi˘abÀ
 = 
ruÀ
->
evi˘abÀ
;

2986 
ruÀ
->
evi˘abÀ
 = 
Ál£
;

2987 
evi˘
 = 
	`choo£_ruÀ_to_evi˘
(
èbÀ
);

2988 
ruÀ
->
evi˘abÀ
 = 
was_evi˘abÀ
;

2990 i‡(!
evi˘
) {

2991 
îr‹
 = 
OFPERR_OFPFMFC_TABLE_FULL
;

2992 
exô
;

2993 } i‡(
evi˘
->
≥ndög
) {

2994 
îr‹
 = 
OFPROTO_POSTPONE
;

2995 
exô
;

2998 
evi˘
 = 
NULL
;

3001 
group
 = 
	`of›group_¸óã
(
oÂrŸo
, 
ofc⁄n
, 
ªque°
, 
fm
->
buf„r_id
);

3002 
›
 = 
	`of›î©i⁄_¸óã
(
group
, 
ruÀ
, 
OFOPERATION_ADD
, 0);

3003 
›
->
vi˘im
 = victim;

3005 
îr‹
 = 
oÂrŸo
->
oÂrŸo_˛ass
->
	`ruÀ_c⁄°ru˘
(
ruÀ
);

3006 i‡(
îr‹
) {

3007 
›
->
group
->
n_ru¬ög
--;

3008 
	`of›î©i⁄_de°roy
(
ruÀ
->
≥ndög
);

3009 } i‡(
evi˘
) {

3010 
	`dñëe_Êow__
(
evi˘
, 
group
);

3012 
	`of›group_submô
(
group
);

3015 
exô
:

3017 i‡(
îr‹
) {

3018 
	`o·abÀ_sub°ôuã_ruÀ
(
ruÀ
, 
vi˘im
);

3019 
	`oÂrŸo_ruÀ_de°roy__
(
ruÀ
);

3021  
îr‹
;

3022 
	}
}

3033 
oÂîr


3034 
	$modify_Êows__
(
oÂrŸo
 *oÂrŸo, 
ofc⁄n
 *ofconn,

3035 c⁄° 
oÂutû_Êow_mod
 *
fm
,

3036 c⁄° 
oÂ_hódî
 *
ªque°
, 
li°
 *
ruÀs
)

3038 
of›group
 *
group
;

3039 
ruÀ
 *rule;

3040 
oÂîr
 
îr‹
;

3042 
group
 = 
	`of›group_¸óã
(
oÂrŸo
, 
ofc⁄n
, 
ªque°
, 
fm
->
buf„r_id
);

3043 
îr‹
 = 
OFPERR_OFPBRC_EPERM
;

3044 
	`LIST_FOR_EACH
 (
ruÀ
, 
oÂrŸo_node
, 
ruÀs
) {

3045 
of›î©i⁄
 *
›
;

3046 
boﬁ
 
a˘i⁄s_ch™ged
;

3047 
ovs_be64
 
√w_cookõ
;

3049 i‡(
	`ruÀ_is_modifübÀ
(
ruÀ
)) {

3051 
îr‹
 = 0;

3056 
a˘i⁄s_ch™ged
 = !
	`oÂa˘s_equÆ
(
fm
->
oÂa˘s
, fm->
oÂa˘s_Àn
,

3057 
ruÀ
->
oÂa˘s
,ÑuÀ->
oÂa˘s_Àn
);

3058 
√w_cookõ
 = (
fm
->√w_cookõ !
	`ht⁄Œ
(
UINT64_MAX
)

3059 ? 
fm
->
√w_cookõ


3060 : 
ruÀ
->
Êow_cookõ
);

3062 
›
 = 
	`of›î©i⁄_¸óã
(
group
, 
ruÀ
, 
OFOPERATION_MODIFY
, 0);

3063 
ruÀ
->
Êow_cookõ
 = 
√w_cookõ
;

3064 i‡(
a˘i⁄s_ch™ged
) {

3065 
›
->
oÂa˘s
 = 
ruÀ
->ofpacts;

3066 
›
->
oÂa˘s_Àn
 = 
ruÀ
->ofpacts_len;

3067 
ruÀ
->
oÂa˘s
 = 
	`xmemdup
(
fm
->oÂa˘s, fm->
oÂa˘s_Àn
);

3068 
ruÀ
->
oÂa˘s_Àn
 = 
fm
->ofpacts_len;

3069 
ruÀ
->
oÂrŸo
->
oÂrŸo_˛ass
->
	`ruÀ_modify_a˘i⁄s
(rule);

3071 
	`of›î©i⁄_com∂ëe
(
›
, 0);

3074 
	`of›group_submô
(
group
);

3076  
îr‹
;

3077 
	}
}

3079 
oÂîr


3080 
	$modify_Êows_add
(
oÂrŸo
 *oÂrŸo, 
ofc⁄n
 *ofconn,

3081 c⁄° 
oÂutû_Êow_mod
 *
fm
,

3082 c⁄° 
oÂ_hódî
 *
ªque°
)

3084 i‡(
fm
->
cookõ_mask
 !
	`ht⁄Œ
(0Ë|| fm->
√w_cookõ
 =ht⁄Œ(
UINT64_MAX
)) {

3087  
	`add_Êow
(
oÂrŸo
, 
ofc⁄n
, 
fm
, 
ªque°
);

3088 
	}
}

3095 
oÂîr


3096 
	$modify_Êows_loo£
(
oÂrŸo
 *oÂrŸo, 
ofc⁄n
 *ofconn,

3097 c⁄° 
oÂutû_Êow_mod
 *
fm
,

3098 c⁄° 
oÂ_hódî
 *
ªque°
)

3100 
li°
 
ruÀs
;

3101 
îr‹
;

3103 
îr‹
 = 
	`cﬁÀ˘_ruÀs_loo£
(
oÂrŸo
, 
fm
->
èbÀ_id
, &fm->
m©ch
,

3104 
fm
->
cookõ
, fm->
cookõ_mask
,

3105 
OFPP_NONE
, &
ruÀs
);

3106 i‡(
îr‹
) {

3107  
îr‹
;

3108 } i‡(
	`li°_is_em±y
(&
ruÀs
)) {

3109  
	`modify_Êows_add
(
oÂrŸo
, 
ofc⁄n
, 
fm
, 
ªque°
);

3111  
	`modify_Êows__
(
oÂrŸo
, 
ofc⁄n
, 
fm
, 
ªque°
, &
ruÀs
);

3113 
	}
}

3120 
oÂîr


3121 
	$modify_Êow_°ri˘
(
oÂrŸo
 *oÂrŸo, 
ofc⁄n
 *ofconn,

3122 c⁄° 
oÂutû_Êow_mod
 *
fm
,

3123 c⁄° 
oÂ_hódî
 *
ªque°
)

3125 
li°
 
ruÀs
;

3126 
îr‹
;

3128 
îr‹
 = 
	`cﬁÀ˘_ruÀs_°ri˘
(
oÂrŸo
, 
fm
->
èbÀ_id
, &fm->
m©ch
,

3129 
fm
->
¥i‹ôy
, fm->
cookõ
, fm->
cookõ_mask
,

3130 
OFPP_NONE
, &
ruÀs
);

3132 i‡(
îr‹
) {

3133  
îr‹
;

3134 } i‡(
	`li°_is_em±y
(&
ruÀs
)) {

3135  
	`modify_Êows_add
(
oÂrŸo
, 
ofc⁄n
, 
fm
, 
ªque°
);

3137  
	`li°_is_sögÀt⁄
(&
ruÀs
Ë? 
	`modify_Êows__
(
oÂrŸo
, 
ofc⁄n
,

3138 
fm
, 
ªque°
, &
ruÀs
)

3141 
	}
}

3146 
	$dñëe_Êow__
(
ruÀ
 *ruÀ, 
of›group
 *
group
)

3148 
oÂrŸo
 *oÂrŸÿ
ruÀ
->ofproto;

3150 
	`oÂrŸo_ruÀ_£nd_ªmoved
(
ruÀ
, 
OFPRR_DELETE
);

3152 
	`of›î©i⁄_¸óã
(
group
, 
ruÀ
, 
OFOPERATION_DELETE
, 
OFPRR_DELETE
);

3153 
	`o·abÀ_ªmove_ruÀ
(
ruÀ
);

3154 
oÂrŸo
->
oÂrŸo_˛ass
->
	`ruÀ_de°ru˘
(
ruÀ
);

3155 
	}
}

3160 
oÂîr


3161 
	$dñëe_Êows__
(
oÂrŸo
 *oÂrŸo, 
ofc⁄n
 *ofconn,

3162 c⁄° 
oÂ_hódî
 *
ªque°
, 
li°
 *
ruÀs
)

3164 
ruÀ
 *ruÀ, *
√xt
;

3165 
of›group
 *
group
;

3167 
group
 = 
	`of›group_¸óã
(
oÂrŸo
, 
ofc⁄n
, 
ªque°
, 
UINT32_MAX
);

3168 
	`LIST_FOR_EACH_SAFE
 (
ruÀ
, 
√xt
, 
oÂrŸo_node
, 
ruÀs
) {

3169 
	`dñëe_Êow__
(
ruÀ
, 
group
);

3171 
	`of›group_submô
(
group
);

3174 
	}
}

3177 
oÂîr


3178 
	$dñëe_Êows_loo£
(
oÂrŸo
 *oÂrŸo, 
ofc⁄n
 *ofconn,

3179 c⁄° 
oÂutû_Êow_mod
 *
fm
,

3180 c⁄° 
oÂ_hódî
 *
ªque°
)

3182 
li°
 
ruÀs
;

3183 
oÂîr
 
îr‹
;

3185 
îr‹
 = 
	`cﬁÀ˘_ruÀs_loo£
(
oÂrŸo
, 
fm
->
èbÀ_id
, &fm->
m©ch
,

3186 
fm
->
cookõ
, fm->
cookõ_mask
,

3187 
fm
->
out_p‹t
, &
ruÀs
);

3188  (
îr‹
 ?Érror

3189 : !
	`li°_is_em±y
(&
ruÀs
Ë? 
	`dñëe_Êows__
(
oÂrŸo
, 
ofc⁄n
, 
ªque°
,

3190 &
ruÀs
)

3192 
	}
}

3195 
oÂîr


3196 
	$dñëe_Êow_°ri˘
(
oÂrŸo
 *oÂrŸo, 
ofc⁄n
 *ofconn,

3197 c⁄° 
oÂutû_Êow_mod
 *
fm
,

3198 c⁄° 
oÂ_hódî
 *
ªque°
)

3200 
li°
 
ruÀs
;

3201 
oÂîr
 
îr‹
;

3203 
îr‹
 = 
	`cﬁÀ˘_ruÀs_°ri˘
(
oÂrŸo
, 
fm
->
èbÀ_id
, &fm->
m©ch
,

3204 
fm
->
¥i‹ôy
, fm->
cookõ
, fm->
cookõ_mask
,

3205 
fm
->
out_p‹t
, &
ruÀs
);

3206  (
îr‹
 ?Érror

3207 : 
	`li°_is_sögÀt⁄
(&
ruÀs
Ë? 
	`dñëe_Êows__
(
oÂrŸo
, 
ofc⁄n
,

3208 
ªque°
, &
ruÀs
)

3210 
	}
}

3213 
	$oÂrŸo_ruÀ_£nd_ªmoved
(
ruÀ
 *ruÀ, 
uöt8_t
 
ªas⁄
)

3215 
oÂutû_Êow_ªmoved
 
‰
;

3217 i‡(
	`oÂrŸo_ruÀ_is_hiddí
(
ruÀ
Ë|| !ruÀ->
£nd_Êow_ªmoved
) {

3221 
	`möim©ch_ex∑nd
(&
ruÀ
->
¸
.
m©ch
, &
‰
.match);

3222 
‰
.
¥i‹ôy
 = 
ruÀ
->
¸
.priority;

3223 
‰
.
cookõ
 = 
ruÀ
->
Êow_cookõ
;

3224 
‰
.
ªas⁄
 =Ñeason;

3225 
‰
.
èbÀ_id
 = 
ruÀ
->table_id;

3226 
	`ˇlc_Êow_duøti⁄__
(
ruÀ
->
¸óãd
, 
	`time_m£c
(),

3227 &
‰
.
duøti⁄_£c
, &‰.
duøti⁄_n£c
);

3228 
‰
.
idÀ_timeout
 = 
ruÀ
->idle_timeout;

3229 
‰
.
h¨d_timeout
 = 
ruÀ
->hard_timeout;

3230 
ruÀ
->
oÂrŸo
->
oÂrŸo_˛ass
->
	`ruÀ_gë_°©s
‘uÀ, &
‰
.
∑ckë_cou¡
,

3231 &
‰
.
byã_cou¡
);

3233 
	`c⁄nmgr_£nd_Êow_ªmoved
(
ruÀ
->
oÂrŸo
->
c⁄nmgr
, &
‰
);

3234 
	}
}

3237 
	$oÂrŸo_ruÀ_upd©e_u£d
(
ruÀ
 *ruÀ, 
u£d
)

3239 i‡(
u£d
 > 
ruÀ
->used) {

3240 
evi˘i⁄_group
 *
evg
 = 
ruÀ
->eviction_group;

3242 
ruÀ
->
u£d
 = used;

3243 i‡(
evg
) {

3244 
	`hóp_ch™ge
(&
evg
->
ruÀs
, &
ruÀ
->
evg_node
,

3245 
	`ruÀ_evi˘i⁄_¥i‹ôy
(
ruÀ
));

3248 
	}
}

3260 
	$oÂrŸo_ruÀ_expúe
(
ruÀ
 *ruÀ, 
uöt8_t
 
ªas⁄
)

3262 
oÂrŸo
 *oÂrŸÿ
ruÀ
->ofproto;

3263 
of›group
 *
group
;

3265 
	`as£π
(
ªas⁄
 =
OFPRR_HARD_TIMEOUT
 ||Ñós⁄ =
OFPRR_IDLE_TIMEOUT
);

3267 
	`oÂrŸo_ruÀ_£nd_ªmoved
(
ruÀ
, 
ªas⁄
);

3269 
group
 = 
	`of›group_¸óã_u«âached
(
oÂrŸo
);

3270 
	`of›î©i⁄_¸óã
(
group
, 
ruÀ
, 
OFOPERATION_DELETE
, 
ªas⁄
);

3271 
	`o·abÀ_ªmove_ruÀ
(
ruÀ
);

3272 
oÂrŸo
->
oÂrŸo_˛ass
->
	`ruÀ_de°ru˘
(
ruÀ
);

3273 
	`of›group_submô
(
group
);

3274 
	}
}

3276 
oÂîr


3277 
	$h™dÀ_Êow_mod
(
ofc⁄n
 *ofc⁄n, c⁄° 
oÂ_hódî
 *
oh
)

3279 
oÂrŸo
 *oÂrŸÿ
	`ofc⁄n_gë_oÂrŸo
(
ofc⁄n
);

3280 
oÂutû_Êow_mod
 
fm
;

3281 
uöt64_t
 
oÂa˘s_°ub
[1024 / 8];

3282 
oÂbuf
 
oÂa˘s
;

3283 
oÂîr
 
îr‹
;

3284 
now
;

3286 
îr‹
 = 
	`ªje˘_¶ave_c⁄åﬁÀr
(
ofc⁄n
);

3287 i‡(
îr‹
) {

3288 
exô
;

3291 
	`oÂbuf_u£_°ub
(&
oÂa˘s
, 
oÂa˘s_°ub
,  ofpacts_stub);

3292 
îr‹
 = 
	`oÂutû_decode_Êow_mod
(&
fm
, 
oh
, 
	`ofc⁄n_gë_¥Ÿocﬁ
(
ofc⁄n
),

3293 &
oÂa˘s
);

3294 i‡(
îr‹
) {

3295 
exô_‰ì_oÂa˘s
;

3298 i‡(
fm
.
Êags
 & 
OFPFF10_EMERG
) {

3303 
îr‹
 = 
OFPERR_OFPFMFC_TABLE_FULL
;

3305 i‡(!
îr‹
) {

3306 
îr‹
 = 
	`oÂa˘s_check
(
fm
.
oÂa˘s
, fm.
oÂa˘s_Àn
,

3307 &
fm
.
m©ch
.
Êow
, 
oÂrŸo
->
max_p‹ts
);

3309 i‡(!
îr‹
) {

3310 
îr‹
 = 
	`h™dÀ_Êow_mod__
(
	`ofc⁄n_gë_oÂrŸo
(
ofc⁄n
), ofc⁄n, &
fm
, 
oh
);

3312 i‡(
îr‹
) {

3313 
exô_‰ì_oÂa˘s
;

3317 
fm
.
comm™d
) {

3318 
OFPFC_ADD
:

3319 
oÂrŸo
->
n_add
++;

3322 
OFPFC_MODIFY
:

3323 
OFPFC_MODIFY_STRICT
:

3324 
oÂrŸo
->
n_modify
++;

3327 
OFPFC_DELETE
:

3328 
OFPFC_DELETE_STRICT
:

3329 
oÂrŸo
->
n_dñëe
++;

3333 
now
 = 
	`time_m£c
();

3334 i‡(
oÂrŸo
->
√xt_›_ªp‹t
 =
LLONG_MAX
) {

3335 
oÂrŸo
->
fú°_›
 = 
now
;

3336 
oÂrŸo
->
√xt_›_ªp‹t
 = 
	`MAX
(
now
 + 10 * 1000,

3337 
oÂrŸo
->
›_backoff
);

3338 
oÂrŸo
->
›_backoff
 = oÂrŸo->
√xt_›_ªp‹t
 + 60 * 1000;

3340 
oÂrŸo
->
œ°_›
 = 
now
;

3342 
exô_‰ì_oÂa˘s
:

3343 
	`oÂbuf_unöô
(&
oÂa˘s
);

3344 
exô
:

3345  
îr‹
;

3346 
	}
}

3348 
oÂîr


3349 
	$h™dÀ_Êow_mod__
(
oÂrŸo
 *oÂrŸo, 
ofc⁄n
 *ofconn,

3350 c⁄° 
oÂutû_Êow_mod
 *
fm
,

3351 c⁄° 
oÂ_hódî
 *
oh
)

3353 i‡(
oÂrŸo
->
n_≥ndög
 >= 50) {

3354 
	`as£π
(!
	`li°_is_em±y
(&
oÂrŸo
->
≥ndög
));

3355  
OFPROTO_POSTPONE
;

3358 
fm
->
comm™d
) {

3359 
OFPFC_ADD
:

3360  
	`add_Êow
(
oÂrŸo
, 
ofc⁄n
, 
fm
, 
oh
);

3362 
OFPFC_MODIFY
:

3363  
	`modify_Êows_loo£
(
oÂrŸo
, 
ofc⁄n
, 
fm
, 
oh
);

3365 
OFPFC_MODIFY_STRICT
:

3366  
	`modify_Êow_°ri˘
(
oÂrŸo
, 
ofc⁄n
, 
fm
, 
oh
);

3368 
OFPFC_DELETE
:

3369  
	`dñëe_Êows_loo£
(
oÂrŸo
, 
ofc⁄n
, 
fm
, 
oh
);

3371 
OFPFC_DELETE_STRICT
:

3372  
	`dñëe_Êow_°ri˘
(
oÂrŸo
, 
ofc⁄n
, 
fm
, 
oh
);

3375 i‡(
fm
->
comm™d
 > 0xff) {

3376 
	`VLOG_WARN_RL
(&
æ
, "%s: flow_mod hasÉxplicitÅable_id but "

3378 
oÂrŸo
->
«me
);

3380  
OFPERR_OFPFMFC_BAD_COMMAND
;

3382 
	}
}

3384 
oÂîr


3385 
	$h™dÀ_rﬁe_ªque°
(
ofc⁄n
 *ofc⁄n, c⁄° 
oÂ_hódî
 *
oh
)

3387 c⁄° 
nx_rﬁe_ªque°
 *
ƒr
 = 
	`oÂmsg_body
(
oh
);

3388 
nx_rﬁe_ªque°
 *
ª∂y
;

3389 
oÂbuf
 *
buf
;

3390 
uöt32_t
 
rﬁe
;

3392 
rﬁe
 = 
	`¡ohl
(
ƒr
->role);

3393 i‡(
rﬁe
 !
NX_ROLE_OTHER
 &&Ñﬁê!
NX_ROLE_MASTER


3394 && 
rﬁe
 !
NX_ROLE_SLAVE
) {

3395  
OFPERR_OFPRRFC_BAD_ROLE
;

3398 i‡(
	`ofc⁄n_gë_rﬁe
(
ofc⁄n
Ë!
rﬁe


3399 && 
	`ofc⁄n_has_≥ndög_›groups
(
ofc⁄n
)) {

3400  
OFPROTO_POSTPONE
;

3403 
	`ofc⁄n_£t_rﬁe
(
ofc⁄n
, 
rﬁe
);

3405 
buf
 = 
	`oÂøw_Æloc_ª∂y
(
OFPRAW_NXT_ROLE_REPLY
, 
oh
, 0);

3406 
ª∂y
 = 
	`oÂbuf_put_zîos
(
buf
,  *reply);

3407 
ª∂y
->
rﬁe
 = 
	`ht⁄l
(role);

3408 
	`ofc⁄n_£nd_ª∂y
(
ofc⁄n
, 
buf
);

3411 
	}
}

3413 
oÂîr


3414 
	$h™dÀ_nxt_Êow_mod_èbÀ_id
(
ofc⁄n
 *ofconn,

3415 c⁄° 
oÂ_hódî
 *
oh
)

3417 c⁄° 
nx_Êow_mod_èbÀ_id
 *
msg
 = 
	`oÂmsg_body
(
oh
);

3418 
oÂutû_¥Ÿocﬁ
 
cur
, 
√xt
;

3420 
cur
 = 
	`ofc⁄n_gë_¥Ÿocﬁ
(
ofc⁄n
);

3421 
√xt
 = 
	`oÂutû_¥Ÿocﬁ_£t_tid
(
cur
, 
msg
->
£t
 != 0);

3422 
	`ofc⁄n_£t_¥Ÿocﬁ
(
ofc⁄n
, 
√xt
);

3425 
	}
}

3427 
oÂîr


3428 
	$h™dÀ_nxt_£t_Êow_f‹m©
(
ofc⁄n
 *ofc⁄n, c⁄° 
oÂ_hódî
 *
oh
)

3430 c⁄° 
nx_£t_Êow_f‹m©
 *
msg
 = 
	`oÂmsg_body
(
oh
);

3431 
oÂutû_¥Ÿocﬁ
 
cur
, 
√xt
;

3432 
oÂutû_¥Ÿocﬁ
 
√xt_ba£
;

3434 
√xt_ba£
 = 
	`oÂutû_nx_Êow_f‹m©_to_¥Ÿocﬁ
(
	`¡ohl
(
msg
->
f‹m©
));

3435 i‡(!
√xt_ba£
) {

3436  
OFPERR_OFPBRC_EPERM
;

3439 
cur
 = 
	`ofc⁄n_gë_¥Ÿocﬁ
(
ofc⁄n
);

3440 
√xt
 = 
	`oÂutû_¥Ÿocﬁ_£t_ba£
(
cur
, 
√xt_ba£
);

3441 i‡(
cur
 !
√xt
 && 
	`ofc⁄n_has_≥ndög_›groups
(
ofc⁄n
)) {

3443  
OFPROTO_POSTPONE
;

3446 
	`ofc⁄n_£t_¥Ÿocﬁ
(
ofc⁄n
, 
√xt
);

3448 
	}
}

3450 
oÂîr


3451 
	$h™dÀ_nxt_£t_∑ckë_ö_f‹m©
(
ofc⁄n
 *ofconn,

3452 c⁄° 
oÂ_hódî
 *
oh
)

3454 c⁄° 
nx_£t_∑ckë_ö_f‹m©
 *
msg
 = 
	`oÂmsg_body
(
oh
);

3455 
uöt32_t
 
f‹m©
;

3457 
f‹m©
 = 
	`¡ohl
(
msg
->format);

3458 i‡(
f‹m©
 !
NXPIF_OPENFLOW10
 && f‹m© !
NXPIF_NXM
) {

3459  
OFPERR_OFPBRC_EPERM
;

3462 i‡(
f‹m©
 !
	`ofc⁄n_gë_∑ckë_ö_f‹m©
(
ofc⁄n
)

3463 && 
	`ofc⁄n_has_≥ndög_›groups
(
ofc⁄n
)) {

3465  
OFPROTO_POSTPONE
;

3468 
	`ofc⁄n_£t_∑ckë_ö_f‹m©
(
ofc⁄n
, 
f‹m©
);

3470 
	}
}

3472 
oÂîr


3473 
	$h™dÀ_nxt_£t_async_c⁄fig
(
ofc⁄n
 *ofc⁄n, c⁄° 
oÂ_hódî
 *
oh
)

3475 c⁄° 
nx_async_c⁄fig
 *
msg
 = 
	`oÂmsg_body
(
oh
);

3476 
uöt32_t
 
ma°î
[
OAM_N_TYPES
];

3477 
uöt32_t
 
¶ave
[
OAM_N_TYPES
];

3479 
ma°î
[
OAM_PACKET_IN
] = 
	`¡ohl
(
msg
->
∑ckë_ö_mask
[0]);

3480 
ma°î
[
OAM_PORT_STATUS
] = 
	`¡ohl
(
msg
->
p‹t_°©us_mask
[0]);

3481 
ma°î
[
OAM_FLOW_REMOVED
] = 
	`¡ohl
(
msg
->
Êow_ªmoved_mask
[0]);

3483 
¶ave
[
OAM_PACKET_IN
] = 
	`¡ohl
(
msg
->
∑ckë_ö_mask
[1]);

3484 
¶ave
[
OAM_PORT_STATUS
] = 
	`¡ohl
(
msg
->
p‹t_°©us_mask
[1]);

3485 
¶ave
[
OAM_FLOW_REMOVED
] = 
	`¡ohl
(
msg
->
Êow_ªmoved_mask
[1]);

3487 
	`ofc⁄n_£t_async_c⁄fig
(
ofc⁄n
, 
ma°î
, 
¶ave
);

3488 i‡(
	`ofc⁄n_gë_ty≥
(
ofc⁄n
Ë=
OFCONN_SERVICE
 &&

3489 !
	`ofc⁄n_gë_miss_£nd_Àn
(
ofc⁄n
)) {

3490 
	`ofc⁄n_£t_miss_£nd_Àn
(
ofc⁄n
, 
OFP_DEFAULT_MISS_SEND_LEN
);

3494 
	}
}

3496 
oÂîr


3497 
	$h™dÀ_nxt_£t_c⁄åﬁÀr_id
(
ofc⁄n
 *ofconn,

3498 c⁄° 
oÂ_hódî
 *
oh
)

3500 c⁄° 
nx_c⁄åﬁÀr_id
 *
nci
 = 
	`oÂmsg_body
(
oh
);

3502 i‡(!
	`is_Æl_zîos
(
nci
->
zîo
, Çci->zero)) {

3503  
OFPERR_NXBRC_MUST_BE_ZERO
;

3506 
	`ofc⁄n_£t_c⁄åﬁÀr_id
(
ofc⁄n
, 
	`¡ohs
(
nci
->
c⁄åﬁÀr_id
));

3508 
	}
}

3510 
oÂîr


3511 
	$h™dÀ_b¨rõr_ªque°
(
ofc⁄n
 *ofc⁄n, c⁄° 
oÂ_hódî
 *
oh
)

3513 
oÂbuf
 *
buf
;

3515 i‡(
	`ofc⁄n_has_≥ndög_›groups
(
ofc⁄n
)) {

3516  
OFPROTO_POSTPONE
;

3519 
buf
 = 
	`oÂøw_Æloc_ª∂y
((
oh
->
vîsi⁄
 =
OFP10_VERSION


3520 ? 
OFPRAW_OFPT10_BARRIER_REPLY


3521 : 
OFPRAW_OFPT11_BARRIER_REPLY
), 
oh
, 0);

3522 
	`ofc⁄n_£nd_ª∂y
(
ofc⁄n
, 
buf
);

3524 
	}
}

3527 
	$oÂrŸo_compo£_Êow_ª‰esh_upd©e
(c⁄° 
ruÀ
 *rule,

3528 
nx_Êow_m⁄ô‹_Êags
 
Êags
,

3529 
li°
 *
msgs
)

3531 
of›î©i⁄
 *
›
 = 
ruÀ
->
≥ndög
;

3532 
oÂutû_Êow_upd©e
 
fu
;

3533 
m©ch
 match;

3535 i‡(
›
 && op->
ty≥
 =
OFOPERATION_ADD
 && !›->
vi˘im
) {

3541 
fu
.
evít
 = (
Êags
 & (
NXFMF_INITIAL
 | 
NXFMF_ADD
)

3542 ? 
NXFME_ADDED
 : 
NXFME_MODIFIED
);

3543 
fu
.
ªas⁄
 = 0;

3544 
fu
.
idÀ_timeout
 = 
ruÀ
->idle_timeout;

3545 
fu
.
h¨d_timeout
 = 
ruÀ
->hard_timeout;

3546 
fu
.
èbÀ_id
 = 
ruÀ
->table_id;

3547 
fu
.
cookõ
 = 
ruÀ
->
Êow_cookõ
;

3548 
	`möim©ch_ex∑nd
(&
ruÀ
->
¸
.
m©ch
, &match);

3549 
fu
.
m©ch
 = &match;

3550 
fu
.
¥i‹ôy
 = 
ruÀ
->
¸
.priority;

3551 i‡(!(
Êags
 & 
NXFMF_ACTIONS
)) {

3552 
fu
.
oÂa˘s
 = 
NULL
;

3553 
fu
.
oÂa˘s_Àn
 = 0;

3554 } i‡(!
›
) {

3555 
fu
.
oÂa˘s
 = 
ruÀ
->ofpacts;

3556 
fu
.
oÂa˘s_Àn
 = 
ruÀ
->ofpacts_len;

3560 
›
->
ty≥
) {

3561 
OFOPERATION_ADD
:

3563 
fu
.
oÂa˘s
 = 
›
->
vi˘im
->ofpacts;

3564 
fu
.
oÂa˘s_Àn
 = 
›
->
vi˘im
->ofpacts_len;

3567 
OFOPERATION_MODIFY
:

3568 i‡(
›
->
oÂa˘s
) {

3569 
fu
.
oÂa˘s
 = 
›
->ofpacts;

3570 
fu
.
oÂa˘s_Àn
 = 
›
->ofpacts_len;

3572 
fu
.
oÂa˘s
 = 
ruÀ
->ofpacts;

3573 
fu
.
oÂa˘s_Àn
 = 
ruÀ
->ofpacts_len;

3577 
OFOPERATION_DELETE
:

3578 
fu
.
oÂa˘s
 = 
ruÀ
->ofpacts;

3579 
fu
.
oÂa˘s_Àn
 = 
ruÀ
->ofpacts_len;

3583 
	`NOT_REACHED
();

3587 i‡(
	`li°_is_em±y
(
msgs
)) {

3588 
	`oÂutû_°¨t_Êow_upd©e
(
msgs
);

3590 
	`oÂutû_≠≥nd_Êow_upd©e
(&
fu
, 
msgs
);

3591 
	}
}

3594 
	$ofm⁄ô‹_compo£_ª‰esh_upd©es
(
li°
 *
ruÀs
, li° *
msgs
)

3596 
ruÀ
 *rule;

3598 
	`LIST_FOR_EACH
 (
ruÀ
, 
oÂrŸo_node
, 
ruÀs
) {

3599 
nx_Êow_m⁄ô‹_Êags
 
Êags
 = 
ruÀ
->
m⁄ô‹_Êags
;

3600 
ruÀ
->
m⁄ô‹_Êags
 = 0;

3602 
	`oÂrŸo_compo£_Êow_ª‰esh_upd©e
(
ruÀ
, 
Êags
, 
msgs
);

3604 
	}
}

3607 
	$oÂrŸo_cﬁÀ˘_ofm⁄ô‹_ª‰esh_ruÀ
(c⁄° 
ofm⁄ô‹
 *
m
,

3608 
ruÀ
 *ruÀ, 
uöt64_t
 
£qno
,

3609 
li°
 *
ruÀs
)

3611 
nx_Êow_m⁄ô‹_Êags
 
upd©e
;

3613 i‡(
	`oÂrŸo_ruÀ_is_hiddí
(
ruÀ
)) {

3617 i‡(!(
ruÀ
->
≥ndög


3618 ? 
	`of›î©i⁄_has_out_p‹t
(
ruÀ
->
≥ndög
, 
m
->
out_p‹t
)

3619 : 
	`oÂrŸo_ruÀ_has_out_p‹t
(
ruÀ
, 
m
->
out_p‹t
))) {

3623 i‡(
£qno
) {

3624 i‡(
ruÀ
->
add_£qno
 > 
£qno
) {

3625 
upd©e
 = 
NXFMF_ADD
 | 
NXFMF_MODIFY
;

3626 } i‡(
ruÀ
->
modify_£qno
 > 
£qno
) {

3627 
upd©e
 = 
NXFMF_MODIFY
;

3632 i‡(!(
m
->
Êags
 & 
upd©e
)) {

3636 
upd©e
 = 
NXFMF_INITIAL
;

3639 i‡(!
ruÀ
->
m⁄ô‹_Êags
) {

3640 
	`li°_push_back
(
ruÀs
, &
ruÀ
->
oÂrŸo_node
);

3642 
ruÀ
->
m⁄ô‹_Êags
 |
upd©e
 | (
m
->
Êags
 & 
NXFMF_ACTIONS
);

3643 
	}
}

3646 
	$oÂrŸo_cﬁÀ˘_ofm⁄ô‹_ª‰esh_ruÀs
(c⁄° 
ofm⁄ô‹
 *
m
,

3647 
uöt64_t
 
£qno
,

3648 
li°
 *
ruÀs
)

3650 c⁄° 
oÂrŸo
 *oÂrŸÿ
	`ofc⁄n_gë_oÂrŸo
(
m
->
ofc⁄n
);

3651 c⁄° 
of›î©i⁄
 *
›
;

3652 c⁄° 
o·abÀ
 *
èbÀ
;

3653 
˛s_ruÀ
 
èrgë
;

3655 
	`˛s_ruÀ_öô_‰om_möim©ch
(&
èrgë
, &
m
->
m©ch
, 0);

3656 
	`FOR_EACH_MATCHING_TABLE
 (
èbÀ
, 
m
->
èbÀ_id
, 
oÂrŸo
) {

3657 
˛s_curs‹
 
curs‹
;

3658 
ruÀ
 *rule;

3660 
	`˛s_curs‹_öô
(&
curs‹
, &
èbÀ
->
˛s
, &
èrgë
);

3661 
	`CLS_CURSOR_FOR_EACH
 (
ruÀ
, 
¸
, &
curs‹
) {

3662 
	`as£π
(!
ruÀ
->
≥ndög
);

3663 
	`oÂrŸo_cﬁÀ˘_ofm⁄ô‹_ª‰esh_ruÀ
(
m
, 
ruÀ
, 
£qno
, 
ruÀs
);

3667 
	`HMAP_FOR_EACH
 (
›
, 
hm≠_node
, &
oÂrŸo
->
dñëi⁄s
) {

3668 
ruÀ
 *ruÀ = 
›
->rule;

3670 i‡(((
m
->
èbÀ_id
 == 0xff

3671 ? !(
oÂrŸo
->
èbÀs
[
ruÀ
->
èbÀ_id
].
Êags
 & 
OFTABLE_HIDDEN
)

3672 : 
m
->
èbÀ_id
 =
ruÀ
->table_id))

3673 && 
	`˛s_ruÀ_is_loo£_m©ch
(&
ruÀ
->
¸
, &
èrgë
.
m©ch
)) {

3674 
	`oÂrŸo_cﬁÀ˘_ofm⁄ô‹_ª‰esh_ruÀ
(
m
, 
ruÀ
, 
£qno
, 
ruÀs
);

3677 
	`˛s_ruÀ_de°roy
(&
èrgë
);

3678 
	}
}

3681 
	$oÂrŸo_cﬁÀ˘_ofm⁄ô‹_öôül_ruÀs
(
ofm⁄ô‹
 *
m
,

3682 
li°
 *
ruÀs
)

3684 i‡(
m
->
Êags
 & 
NXFMF_INITIAL
) {

3685 
	`oÂrŸo_cﬁÀ˘_ofm⁄ô‹_ª‰esh_ruÀs
(
m
, 0, 
ruÀs
);

3687 
	}
}

3690 
	$ofm⁄ô‹_cﬁÀ˘_ªsume_ruÀs
(
ofm⁄ô‹
 *
m
,

3691 
uöt64_t
 
£qno
, 
li°
 *
ruÀs
)

3693 
	`oÂrŸo_cﬁÀ˘_ofm⁄ô‹_ª‰esh_ruÀs
(
m
, 
£qno
, 
ruÀs
);

3694 
	}
}

3696 
oÂîr


3697 
	$h™dÀ_Êow_m⁄ô‹_ªque°
(
ofc⁄n
 *ofc⁄n, c⁄° 
oÂ_hódî
 *
oh
)

3699 
oÂrŸo
 *oÂrŸÿ
	`ofc⁄n_gë_oÂrŸo
(
ofc⁄n
);

3700 
ofm⁄ô‹
 **
m⁄ô‹s
;

3701 
size_t
 
n_m⁄ô‹s
, 
Æloˇãd_m⁄ô‹s
;

3702 
li°
 
ª∂õs
;

3703 
oÂîr
 
îr‹
;

3704 
li°
 
ruÀs
;

3705 
oÂbuf
 
b
;

3706 
size_t
 
i
;

3708 
îr‹
 = 0;

3709 
	`oÂbuf_u£_c⁄°
(&
b
, 
oh
, 
	`¡ohs
(oh->
Àngth
));

3710 
m⁄ô‹s
 = 
NULL
;

3711 
n_m⁄ô‹s
 = 
Æloˇãd_m⁄ô‹s
 = 0;

3713 
oÂutû_Êow_m⁄ô‹_ªque°
 
ªque°
;

3714 
ofm⁄ô‹
 *
m
;

3715 
ªtvÆ
;

3717 
ªtvÆ
 = 
	`oÂutû_decode_Êow_m⁄ô‹_ªque°
(&
ªque°
, &
b
);

3718 i‡(
ªtvÆ
 =
EOF
) {

3720 } i‡(
ªtvÆ
) {

3721 
îr‹
 = 
ªtvÆ
;

3722 
îr‹
;

3725 i‡(
ªque°
.
èbÀ_id
 != 0xff

3726 && 
ªque°
.
èbÀ_id
 >
oÂrŸo
->
n_èbÀs
) {

3727 
îr‹
 = 
OFPERR_OFPBRC_BAD_TABLE_ID
;

3728 
îr‹
;

3731 
îr‹
 = 
	`ofm⁄ô‹_¸óã
(&
ªque°
, 
ofc⁄n
, &
m
);

3732 i‡(
îr‹
) {

3733 
îr‹
;

3736 i‡(
n_m⁄ô‹s
 >
Æloˇãd_m⁄ô‹s
) {

3737 
m⁄ô‹s
 = 
	`x2ƒóŒoc
(m⁄ô‹s, &
Æloˇãd_m⁄ô‹s
,

3738  *
m⁄ô‹s
);

3740 
m⁄ô‹s
[
n_m⁄ô‹s
++] = 
m
;

3743 
	`li°_öô
(&
ruÀs
);

3744 
i
 = 0; i < 
n_m⁄ô‹s
; i++) {

3745 
	`oÂrŸo_cﬁÀ˘_ofm⁄ô‹_öôül_ruÀs
(
m⁄ô‹s
[
i
], &
ruÀs
);

3748 
	`oÂmp_öô
(&
ª∂õs
, 
oh
);

3749 
	`ofm⁄ô‹_compo£_ª‰esh_upd©es
(&
ruÀs
, &
ª∂õs
);

3750 
	`ofc⁄n_£nd_ª∂õs
(
ofc⁄n
, &
ª∂õs
);

3752 
	`‰ì
(
m⁄ô‹s
);

3756 
îr‹
:

3757 
i
 = 0; i < 
n_m⁄ô‹s
; i++) {

3758 
	`ofm⁄ô‹_de°roy
(
m⁄ô‹s
[
i
]);

3760 
	`‰ì
(
m⁄ô‹s
);

3761  
îr‹
;

3762 
	}
}

3764 
oÂîr


3765 
	$h™dÀ_Êow_m⁄ô‹_ˇn˚l
(
ofc⁄n
 *ofc⁄n, c⁄° 
oÂ_hódî
 *
oh
)

3767 
ofm⁄ô‹
 *
m
;

3768 
uöt32_t
 
id
;

3770 
id
 = 
	`oÂutû_decode_Êow_m⁄ô‹_ˇn˚l
(
oh
);

3771 
m
 = 
	`ofm⁄ô‹_lookup
(
ofc⁄n
, 
id
);

3772 i‡(!
m
) {

3773  
OFPERR_NXBRC_FM_BAD_ID
;

3776 
	`ofm⁄ô‹_de°roy
(
m
);

3778 
	}
}

3780 
oÂîr


3781 
	$h™dÀ_›íÊow__
(
ofc⁄n
 *ofc⁄n, c⁄° 
oÂbuf
 *
msg
)

3783 c⁄° 
oÂ_hódî
 *
oh
 = 
msg
->
d©a
;

3784 
oÂty≥
 
ty≥
;

3785 
oÂîr
 
îr‹
;

3787 
îr‹
 = 
	`oÂty≥_decode
(&
ty≥
, 
oh
);

3788 i‡(
îr‹
) {

3789  
îr‹
;

3792 
ty≥
) {

3794 
OFPTYPE_ECHO_REQUEST
:

3795  
	`h™dÀ_echo_ªque°
(
ofc⁄n
, 
oh
);

3797 
OFPTYPE_FEATURES_REQUEST
:

3798  
	`h™dÀ_„©uªs_ªque°
(
ofc⁄n
, 
oh
);

3800 
OFPTYPE_GET_CONFIG_REQUEST
:

3801  
	`h™dÀ_gë_c⁄fig_ªque°
(
ofc⁄n
, 
oh
);

3803 
OFPTYPE_SET_CONFIG
:

3804  
	`h™dÀ_£t_c⁄fig
(
ofc⁄n
, 
oh
);

3806 
OFPTYPE_PACKET_OUT
:

3807  
	`h™dÀ_∑ckë_out
(
ofc⁄n
, 
oh
);

3809 
OFPTYPE_PORT_MOD
:

3810  
	`h™dÀ_p‹t_mod
(
ofc⁄n
, 
oh
);

3812 
OFPTYPE_FLOW_MOD
:

3813  
	`h™dÀ_Êow_mod
(
ofc⁄n
, 
oh
);

3815 
OFPTYPE_BARRIER_REQUEST
:

3816  
	`h™dÀ_b¨rõr_ªque°
(
ofc⁄n
, 
oh
);

3819 
OFPTYPE_ECHO_REPLY
:

3823 
OFPTYPE_ROLE_REQUEST
:

3824  
	`h™dÀ_rﬁe_ªque°
(
ofc⁄n
, 
oh
);

3826 
OFPTYPE_FLOW_MOD_TABLE_ID
:

3827  
	`h™dÀ_nxt_Êow_mod_èbÀ_id
(
ofc⁄n
, 
oh
);

3829 
OFPTYPE_SET_FLOW_FORMAT
:

3830  
	`h™dÀ_nxt_£t_Êow_f‹m©
(
ofc⁄n
, 
oh
);

3832 
OFPTYPE_SET_PACKET_IN_FORMAT
:

3833  
	`h™dÀ_nxt_£t_∑ckë_ö_f‹m©
(
ofc⁄n
, 
oh
);

3835 
OFPTYPE_SET_CONTROLLER_ID
:

3836  
	`h™dÀ_nxt_£t_c⁄åﬁÀr_id
(
ofc⁄n
, 
oh
);

3838 
OFPTYPE_FLOW_AGE
:

3842 
OFPTYPE_FLOW_MONITOR_CANCEL
:

3843  
	`h™dÀ_Êow_m⁄ô‹_ˇn˚l
(
ofc⁄n
, 
oh
);

3845 
OFPTYPE_SET_ASYNC_CONFIG
:

3846  
	`h™dÀ_nxt_£t_async_c⁄fig
(
ofc⁄n
, 
oh
);

3849 
OFPTYPE_DESC_STATS_REQUEST
:

3850  
	`h™dÀ_desc_°©s_ªque°
(
ofc⁄n
, 
oh
);

3852 
OFPTYPE_FLOW_STATS_REQUEST
:

3853  
	`h™dÀ_Êow_°©s_ªque°
(
ofc⁄n
, 
oh
);

3855 
OFPTYPE_AGGREGATE_STATS_REQUEST
:

3856  
	`h™dÀ_aggªg©e_°©s_ªque°
(
ofc⁄n
, 
oh
);

3858 
OFPTYPE_TABLE_STATS_REQUEST
:

3859  
	`h™dÀ_èbÀ_°©s_ªque°
(
ofc⁄n
, 
oh
);

3861 
OFPTYPE_PORT_STATS_REQUEST
:

3862  
	`h™dÀ_p‹t_°©s_ªque°
(
ofc⁄n
, 
oh
);

3864 
OFPTYPE_QUEUE_STATS_REQUEST
:

3865  
	`h™dÀ_queue_°©s_ªque°
(
ofc⁄n
, 
oh
);

3867 
OFPTYPE_PORT_DESC_STATS_REQUEST
:

3868  
	`h™dÀ_p‹t_desc_°©s_ªque°
(
ofc⁄n
, 
oh
);

3870 
OFPTYPE_FLOW_MONITOR_STATS_REQUEST
:

3871  
	`h™dÀ_Êow_m⁄ô‹_ªque°
(
ofc⁄n
, 
oh
);

3873 
OFPTYPE_HELLO
:

3874 
OFPTYPE_ERROR
:

3875 
OFPTYPE_FEATURES_REPLY
:

3876 
OFPTYPE_GET_CONFIG_REPLY
:

3877 
OFPTYPE_PACKET_IN
:

3878 
OFPTYPE_FLOW_REMOVED
:

3879 
OFPTYPE_PORT_STATUS
:

3880 
OFPTYPE_BARRIER_REPLY
:

3881 
OFPTYPE_DESC_STATS_REPLY
:

3882 
OFPTYPE_FLOW_STATS_REPLY
:

3883 
OFPTYPE_QUEUE_STATS_REPLY
:

3884 
OFPTYPE_PORT_STATS_REPLY
:

3885 
OFPTYPE_TABLE_STATS_REPLY
:

3886 
OFPTYPE_AGGREGATE_STATS_REPLY
:

3887 
OFPTYPE_PORT_DESC_STATS_REPLY
:

3888 
OFPTYPE_ROLE_REPLY
:

3889 
OFPTYPE_FLOW_MONITOR_PAUSED
:

3890 
OFPTYPE_FLOW_MONITOR_RESUMED
:

3891 
OFPTYPE_FLOW_MONITOR_STATS_REPLY
:

3893  
OFPERR_OFPBRC_BAD_TYPE
;

3895 
	}
}

3897 
boﬁ


3898 
	$h™dÀ_›íÊow
(
ofc⁄n
 *ofc⁄n, 
oÂbuf
 *
oÂ_msg
)

3900 
îr‹
 = 
	`h™dÀ_›íÊow__
(
ofc⁄n
, 
oÂ_msg
);

3901 i‡(
îr‹
 &&Éº‹ !
OFPROTO_POSTPONE
) {

3902 
	`ofc⁄n_£nd_îr‹
(
ofc⁄n
, 
oÂ_msg
->
d©a
, 
îr‹
);

3904 
	`COVERAGE_INC
(
oÂrŸo_ªcv_›íÊow
);

3905  
îr‹
 !
OFPROTO_POSTPONE
;

3906 
	}
}

3915 
of›group
 *

3916 
	$of›group_¸óã_u«âached
(
oÂrŸo
 *ofproto)

3918 
of›group
 *
group
 = 
	`xzÆloc
( *group);

3919 
group
->
oÂrŸo
 = ofproto;

3920 
	`li°_öô
(&
group
->
oÂrŸo_node
);

3921 
	`li°_öô
(&
group
->
›s
);

3922 
	`li°_öô
(&
group
->
ofc⁄n_node
);

3923  
group
;

3924 
	}
}

3938 
of›group
 *

3939 
	$of›group_¸óã
(
oÂrŸo
 *oÂrŸo, 
ofc⁄n
 *ofconn,

3940 c⁄° 
oÂ_hódî
 *
ªque°
, 
uöt32_t
 
buf„r_id
)

3942 
of›group
 *
group
 = 
	`of›group_¸óã_u«âached
(
oÂrŸo
);

3943 i‡(
ofc⁄n
) {

3944 
size_t
 
ªque°_Àn
 = 
	`¡ohs
(
ªque°
->
Àngth
);

3946 
	`as£π
(
	`ofc⁄n_gë_oÂrŸo
(
ofc⁄n
Ë=
oÂrŸo
);

3948 
	`ofc⁄n_add_›group
(
ofc⁄n
, &
group
->
ofc⁄n_node
);

3949 
group
->
ofc⁄n
 = ofconn;

3950 
group
->
ªque°
 = 
	`xmemdup
‘eque°, 
	`MIN
(
ªque°_Àn
, 64));

3951 
group
->
buf„r_id
 = buffer_id;

3953  
group
;

3954 
	}
}

3963 
	$of›group_submô
(
of›group
 *
group
)

3965 i‡(!
group
->
n_ru¬ög
) {

3966 
	`of›group_com∂ëe
(
group
);

3968 
	`li°_push_back
(&
group
->
oÂrŸo
->
≥ndög
, &group->
oÂrŸo_node
);

3969 
group
->
oÂrŸo
->
n_≥ndög
++;

3971 
	}
}

3974 
	$of›group_com∂ëe
(
of›group
 *
group
)

3976 
oÂrŸo
 *oÂrŸÿ
group
->ofproto;

3978 
ofc⁄n
 *
abbªv_ofc⁄n
;

3979 
ovs_be32
 
abbªv_xid
;

3981 
of›î©i⁄
 *
›
, *
√xt_›
;

3982 
îr‹
;

3984 
	`as£π
(!
group
->
n_ru¬ög
);

3986 
îr‹
 = 0;

3987 
	`LIST_FOR_EACH
 (
›
, 
group_node
, &
group
->
›s
) {

3988 i‡(
›
->
îr‹
) {

3989 
îr‹
 = 
›
->error;

3994 i‡(!
îr‹
 && 
group
->
ofc⁄n
 && group->
buf„r_id
 !
UINT32_MAX
) {

3995 
	`LIST_FOR_EACH
 (
›
, 
group_node
, &
group
->
›s
) {

3996 i‡(
›
->
ty≥
 !
OFOPERATION_DELETE
) {

3997 
oÂbuf
 *
∑ckë
;

3998 
uöt16_t
 
ö_p‹t
;

4000 
îr‹
 = 
	`ofc⁄n_pktbuf_ªåõve
(
group
->
ofc⁄n
, group->
buf„r_id
,

4001 &
∑ckë
, &
ö_p‹t
);

4002 i‡(
∑ckë
) {

4003 
	`as£π
(!
îr‹
);

4004 
îr‹
 = 
	`ruÀ_execuã
(
›
->
ruÀ
, 
ö_p‹t
, 
∑ckë
);

4011 i‡(!
îr‹
 && !
	`li°_is_em±y
(&
group
->
ofc⁄n_node
)) {

4012 
abbªv_ofc⁄n
 = 
group
->
ofc⁄n
;

4013 
abbªv_xid
 = 
group
->
ªque°
->
xid
;

4015 
abbªv_ofc⁄n
 = 
NULL
;

4016 
abbªv_xid
 = 
	`ht⁄l
(0);

4018 
	`LIST_FOR_EACH_SAFE
 (
›
, 
√xt_›
, 
group_node
, &
group
->
›s
) {

4019 
ruÀ
 *ruÀ = 
›
->rule;

4029 i‡(!(
›
->
îr‹


4030 || 
	`oÂrŸo_ruÀ_is_hiddí
(
ruÀ
)

4031 || (
›
->
ty≥
 =
OFOPERATION_MODIFY


4032 && 
›
->
oÂa˘s


4033 && 
ruÀ
->
Êow_cookõ
 =
›
->flow_cookie))) {

4036 
	`BUILD_ASSERT_DECL
((
nx_Êow_upd©e_evít
Ë
OFOPERATION_ADD


4037 =
NXFME_ADDED
);

4038 
	`BUILD_ASSERT_DECL
((
nx_Êow_upd©e_evít
Ë
OFOPERATION_DELETE


4039 =
NXFME_DELETED
);

4040 
	`BUILD_ASSERT_DECL
((
nx_Êow_upd©e_evít
Ë
OFOPERATION_MODIFY


4041 =
NXFME_MODIFIED
);

4043 
	`ofm⁄ô‹_ªp‹t
(
oÂrŸo
->
c⁄nmgr
, 
ruÀ
,

4044 (
nx_Êow_upd©e_evít
Ë
›
->
ty≥
,

4045 
›
->
ªas⁄
, 
abbªv_ofc⁄n
, 
abbªv_xid
);

4048 
ruÀ
->
≥ndög
 = 
NULL
;

4050 
›
->
ty≥
) {

4051 
OFOPERATION_ADD
:

4052 i‡(!
›
->
îr‹
) {

4053 
uöt16_t
 
vid_mask
;

4055 
	`oÂrŸo_ruÀ_de°roy__
(
›
->
vi˘im
);

4056 
vid_mask
 = 
	`möimask_gë_vid_mask
(&
ruÀ
->
¸
.
m©ch
.
mask
);

4057 i‡(
vid_mask
 =
VLAN_VID_MASK
) {

4058 i‡(
oÂrŸo
->
vœn_bôm≠
) {

4059 
uöt16_t
 
vid
 = 
	`möiÊow_gë_vid
(&
ruÀ
->
¸
.
m©ch
.
Êow
);

4060 i‡(!
	`bôm≠_is_£t
(
oÂrŸo
->
vœn_bôm≠
, 
vid
)) {

4061 
	`bôm≠_£t1
(
oÂrŸo
->
vœn_bôm≠
, 
vid
);

4062 
oÂrŸo
->
vœns_ch™ged
 = 
åue
;

4065 
oÂrŸo
->
vœns_ch™ged
 = 
åue
;

4069 
	`o·abÀ_sub°ôuã_ruÀ
(
ruÀ
, 
›
->
vi˘im
);

4070 
	`oÂrŸo_ruÀ_de°roy__
(
ruÀ
);

4074 
OFOPERATION_DELETE
:

4075 
	`as£π
(!
›
->
îr‹
);

4076 
	`oÂrŸo_ruÀ_de°roy__
(
ruÀ
);

4077 
›
->
ruÀ
 = 
NULL
;

4080 
OFOPERATION_MODIFY
:

4081 i‡(!
›
->
îr‹
) {

4082 
ruÀ
->
modifõd
 = 
	`time_m£c
();

4084 
ruÀ
->
Êow_cookõ
 = 
›
->flow_cookie;

4085 i‡(
›
->
oÂa˘s
) {

4086 
	`‰ì
(
ruÀ
->
oÂa˘s
);

4087 
ruÀ
->
oÂa˘s
 = 
›
->ofpacts;

4088 
ruÀ
->
oÂa˘s_Àn
 = 
›
->ofpacts_len;

4089 
›
->
oÂa˘s
 = 
NULL
;

4090 
›
->
oÂa˘s_Àn
 = 0;

4096 
	`NOT_REACHED
();

4099 
	`of›î©i⁄_de°roy
(
›
);

4102 
	`ofm⁄ô‹_Êush
(
oÂrŸo
->
c⁄nmgr
);

4104 i‡(!
	`li°_is_em±y
(&
group
->
oÂrŸo_node
)) {

4105 
	`as£π
(
oÂrŸo
->
n_≥ndög
 > 0);

4106 
oÂrŸo
->
n_≥ndög
--;

4107 
	`li°_ªmove
(&
group
->
oÂrŸo_node
);

4109 i‡(!
	`li°_is_em±y
(&
group
->
ofc⁄n_node
)) {

4110 
	`li°_ªmove
(&
group
->
ofc⁄n_node
);

4111 i‡(
îr‹
) {

4112 
	`ofc⁄n_£nd_îr‹
(
group
->
ofc⁄n
, group->
ªque°
, 
îr‹
);

4114 
	`c⁄nmgr_ªåy
(
oÂrŸo
->
c⁄nmgr
);

4116 
	`‰ì
(
group
->
ªque°
);

4117 
	`‰ì
(
group
);

4118 
	}
}

4128 
of›î©i⁄
 *

4129 
	$of›î©i⁄_¸óã
(
of›group
 *
group
, 
ruÀ
 *rule,

4130 
of›î©i⁄_ty≥
 
ty≥
,

4131 
oÂ_Êow_ªmoved_ªas⁄
 
ªas⁄
)

4133 
oÂrŸo
 *oÂrŸÿ
group
->ofproto;

4134 
of›î©i⁄
 *
›
;

4136 
	`as£π
(!
ruÀ
->
≥ndög
);

4138 
›
 = 
ruÀ
->
≥ndög
 = 
	`xzÆloc
( *op);

4139 
›
->
group
 = group;

4140 
	`li°_push_back
(&
group
->
›s
, &
›
->
group_node
);

4141 
›
->
ruÀ
 =Ñule;

4142 
›
->
ty≥
 =Åype;

4143 
›
->
ªas⁄
 =Ñeason;

4144 
›
->
Êow_cookõ
 = 
ruÀ
->flow_cookie;

4146 
group
->
n_ru¬ög
++;

4148 i‡(
ty≥
 =
OFOPERATION_DELETE
) {

4149 
	`hm≠_ö£π
(&
oÂrŸo
->
dñëi⁄s
, &
›
->
hm≠_node
,

4150 
	`˛s_ruÀ_hash
(&
ruÀ
->
¸
,ÑuÀ->
èbÀ_id
));

4153  
›
;

4154 
	}
}

4157 
	$of›î©i⁄_de°roy
(
of›î©i⁄
 *
›
)

4159 
of›group
 *
group
 = 
›
->group;

4161 i‡(
›
->
ruÀ
) {

4162 
›
->
ruÀ
->
≥ndög
 = 
NULL
;

4164 i‡(
›
->
ty≥
 =
OFOPERATION_DELETE
) {

4165 
	`hm≠_ªmove
(&
group
->
oÂrŸo
->
dñëi⁄s
, &
›
->
hm≠_node
);

4167 
	`li°_ªmove
(&
›
->
group_node
);

4168 
	`‰ì
(
›
->
oÂa˘s
);

4169 
	`‰ì
(
›
);

4170 
	}
}

4202 
	$of›î©i⁄_com∂ëe
(
of›î©i⁄
 *
›
, 
oÂîr
 
îr‹
)

4204 
of›group
 *
group
 = 
›
->group;

4206 
	`as£π
(
›
->
ruÀ
->
≥ndög
 == op);

4207 
	`as£π
(
group
->
n_ru¬ög
 > 0);

4208 
	`as£π
(!
îr‹
 || 
›
->
ty≥
 !
OFOPERATION_DELETE
);

4210 
›
->
îr‹
 =Érror;

4211 i‡(!--
group
->
n_ru¬ög
 && !
	`li°_is_em±y
(&group->
oÂrŸo_node
)) {

4212 
	`of›group_com∂ëe
(
group
);

4214 
	}
}

4216 
ruÀ
 *

4217 
	$of›î©i⁄_gë_vi˘im
(
of›î©i⁄
 *
›
)

4219 
	`as£π
(
›
->
ty≥
 =
OFOPERATION_ADD
);

4220  
›
->
vi˘im
;

4221 
	}
}

4223 
uöt64_t


4224 
	$pick_d©≠©h_id
(c⁄° 
oÂrŸo
 *ofproto)

4226 c⁄° 
oÂ‹t
 *
p‹t
;

4228 
p‹t
 = 
	`oÂrŸo_gë_p‹t
(
oÂrŸo
, 
OFPP_LOCAL
);

4229 i‡(
p‹t
) {

4230 
uöt8_t
 
ó
[
ETH_ADDR_LEN
];

4231 
îr‹
;

4233 
îr‹
 = 
	`√tdev_gë_ëhîaddr
(
p‹t
->
√tdev
, 
ó
);

4234 i‡(!
îr‹
) {

4235  
	`ëh_addr_to_uöt64
(
ó
);

4237 
	`VLOG_WARN
("%s: couldÇot get MACáddress for %s (%s)",

4238 
oÂrŸo
->
«me
, 
	`√tdev_gë_«me
(
p‹t
->
√tdev
),

4239 
	`°ªº‹
(
îr‹
));

4241  
oÂrŸo
->
ÁŒback_dpid
;

4242 
	}
}

4244 
uöt64_t


4245 
	$pick_ÁŒback_dpid
()

4247 
uöt8_t
 
ó
[
ETH_ADDR_LEN
];

4248 
	`ëh_addr_nicúa_øndom
(
ó
);

4249  
	`ëh_addr_to_uöt64
(
ó
);

4250 
	}
}

4258 
ruÀ
 *

4259 
	$choo£_ruÀ_to_evi˘
(
o·abÀ
 *
èbÀ
)

4261 
evi˘i⁄_group
 *
evg
;

4263 i‡(!
èbÀ
->
evi˘i⁄_fõlds
) {

4264  
NULL
;

4279 
	`HEAP_FOR_EACH
 (
evg
, 
size_node
, &
èbÀ
->
evi˘i⁄_groups_by_size
) {

4280 
ruÀ
 *rule;

4282 
	`HEAP_FOR_EACH
 (
ruÀ
, 
evg_node
, &
evg
->
ruÀs
) {

4283 i‡(
ruÀ
->
evi˘abÀ
) {

4284  
ruÀ
;

4289  
NULL
;

4290 
	}
}

4299 
	$oÂrŸo_evi˘
(
oÂrŸo
 *ofproto)

4301 
of›group
 *
group
;

4302 
o·abÀ
 *
èbÀ
;

4304 
group
 = 
	`of›group_¸óã_u«âached
(
oÂrŸo
);

4305 
	`OFPROTO_FOR_EACH_TABLE
 (
èbÀ
, 
oÂrŸo
) {

4306 
	`˛assifõr_cou¡
(&
èbÀ
->
˛s
Ë>ÅabÀ->
max_Êows


4307 && 
èbÀ
->
evi˘i⁄_fõlds
) {

4308 
ruÀ
 *rule;

4310 
ruÀ
 = 
	`choo£_ruÀ_to_evi˘
(
èbÀ
);

4311 i‡(!
ruÀ
 ||ÑuÀ->
≥ndög
) {

4315 
	`of›î©i⁄_¸óã
(
group
, 
ruÀ
,

4316 
OFOPERATION_DELETE
, 
OFPRR_EVICTION
);

4317 
	`o·abÀ_ªmove_ruÀ
(
ruÀ
);

4318 
oÂrŸo
->
oÂrŸo_˛ass
->
	`ruÀ_de°ru˘
(
ruÀ
);

4321 
	`of›group_submô
(
group
);

4322 
	}
}

4329 
uöt32_t


4330 
	$evi˘i⁄_group_¥i‹ôy
(
size_t
 
n_ruÀs
)

4332 
uöt16_t
 
size
 = 
	`MIN
(
UINT16_MAX
, 
n_ruÀs
);

4333  (
size
 << 16Ë| 
	`øndom_uöt16
();

4334 
	}
}

4339 
	$evi˘i⁄_group_ªsized
(
o·abÀ
 *
èbÀ
, 
evi˘i⁄_group
 *
evg
)

4341 
	`hóp_ch™ge
(&
èbÀ
->
evi˘i⁄_groups_by_size
, &
evg
->
size_node
,

4342 
	`evi˘i⁄_group_¥i‹ôy
(
	`hóp_cou¡
(&
evg
->
ruÀs
)));

4343 
	}
}

4354 
	$evi˘i⁄_group_de°roy
(
o·abÀ
 *
èbÀ
, 
evi˘i⁄_group
 *
evg
)

4356 !
	`hóp_is_em±y
(&
evg
->
ruÀs
)) {

4357 
ruÀ
 *rule;

4359 
ruÀ
 = 
	`CONTAINER_OF
(
	`hóp_p›
(&
evg
->
ruÀs
), ruÀ, 
evg_node
);

4360 
ruÀ
->
evi˘i⁄_group
 = 
NULL
;

4362 
	`hm≠_ªmove
(&
èbÀ
->
evi˘i⁄_groups_by_id
, &
evg
->
id_node
);

4363 
	`hóp_ªmove
(&
èbÀ
->
evi˘i⁄_groups_by_size
, &
evg
->
size_node
);

4364 
	`hóp_de°roy
(&
evg
->
ruÀs
);

4365 
	`‰ì
(
evg
);

4366 
	}
}

4370 
	$evi˘i⁄_group_ªmove_ruÀ
(
ruÀ
 *rule)

4372 i‡(
ruÀ
->
evi˘i⁄_group
) {

4373 
o·abÀ
 *
èbÀ
 = &
ruÀ
->
oÂrŸo
->
èbÀs
[ruÀ->
èbÀ_id
];

4374 
evi˘i⁄_group
 *
evg
 = 
ruÀ
->eviction_group;

4376 
ruÀ
->
evi˘i⁄_group
 = 
NULL
;

4377 
	`hóp_ªmove
(&
evg
->
ruÀs
, &
ruÀ
->
evg_node
);

4378 i‡(
	`hóp_is_em±y
(&
evg
->
ruÀs
)) {

4379 
	`evi˘i⁄_group_de°roy
(
èbÀ
, 
evg
);

4381 
	`evi˘i⁄_group_ªsized
(
èbÀ
, 
evg
);

4384 
	}
}

4388 
uöt32_t


4389 
	$evi˘i⁄_group_hash_ruÀ
(
ruÀ
 *rule)

4391 
o·abÀ
 *
èbÀ
 = &
ruÀ
->
oÂrŸo
->
èbÀs
[ruÀ->
èbÀ_id
];

4392 c⁄° 
mf_subfõld
 *
sf
;

4393 
Êow
 flow;

4394 
uöt32_t
 
hash
;

4396 
hash
 = 
èbÀ
->
evi˘i⁄_group_id_basis
;

4397 
	`möiÊow_ex∑nd
(&
ruÀ
->
¸
.
m©ch
.
Êow
, &flow);

4398 
sf
 = 
èbÀ
->
evi˘i⁄_fõlds
;

4399 
sf
 < &
èbÀ
->
evi˘i⁄_fõlds
[èbÀ->
n_evi˘i⁄_fõlds
];

4400 
sf
++)

4402 i‡(
	`mf_¨e_¥îeqs_ok
(
sf
->
fõld
, &
Êow
)) {

4403 
mf_vÆue
 
vÆue
;

4405 
	`mf_gë_vÆue
(
sf
->
fõld
, &
Êow
, &
vÆue
);

4406 i‡(
sf
->
ofs
) {

4407 
	`bôwi£_zîo
(&
vÆue
, 
sf
->
fõld
->
n_byãs
, 0, sf->
ofs
);

4409 i‡(
sf
->
ofs
 + sf->
n_bôs
 < sf->
fõld
->
n_byãs
 * 8) {

4410 
°¨t
 = 
sf
->
ofs
 + sf->
n_bôs
;

4411 
	`bôwi£_zîo
(&
vÆue
, 
sf
->
fõld
->
n_byãs
, 
°¨t
,

4412 
sf
->
fõld
->
n_byãs
 * 8 - 
°¨t
);

4414 
hash
 = 
	`hash_byãs
(&
vÆue
, 
sf
->
fõld
->
n_byãs
, hash);

4416 
hash
 = 
	`hash_öt
(hash, 0);

4420  
hash
;

4421 
	}
}

4425 
evi˘i⁄_group
 *

4426 
	$evi˘i⁄_group_föd
(
o·abÀ
 *
èbÀ
, 
uöt32_t
 
id
)

4428 
evi˘i⁄_group
 *
evg
;

4430 
	`HMAP_FOR_EACH_WITH_HASH
 (
evg
, 
id_node
, 
id
, &
èbÀ
->
evi˘i⁄_groups_by_id
) {

4431  
evg
;

4434 
evg
 = 
	`xmÆloc
( *evg);

4435 
	`hm≠_ö£π
(&
èbÀ
->
evi˘i⁄_groups_by_id
, &
evg
->
id_node
, 
id
);

4436 
	`hóp_ö£π
(&
èbÀ
->
evi˘i⁄_groups_by_size
, &
evg
->
size_node
,

4437 
	`evi˘i⁄_group_¥i‹ôy
(0));

4438 
	`hóp_öô
(&
evg
->
ruÀs
);

4440  
evg
;

4441 
	}
}

4446 
uöt32_t


4447 
	$ruÀ_evi˘i⁄_¥i‹ôy
(
ruÀ
 *rule)

4449 
h¨d_expú©i⁄
;

4450 
idÀ_expú©i⁄
;

4451 
expú©i⁄
;

4452 
uöt32_t
 
expú©i⁄_off£t
;

4455 
h¨d_expú©i⁄
 = (
ruÀ
->
h¨d_timeout


4456 ? 
ruÀ
->
modifõd
 +ÑuÀ->
h¨d_timeout
 * 1000

4457 : 
LLONG_MAX
);

4458 
idÀ_expú©i⁄
 = (
ruÀ
->
idÀ_timeout


4459 ? 
ruÀ
->
u£d
 +ÑuÀ->
idÀ_timeout
 * 1000

4460 : 
LLONG_MAX
);

4461 
expú©i⁄
 = 
	`MIN
(
h¨d_expú©i⁄
, 
idÀ_expú©i⁄
);

4462 i‡(
expú©i⁄
 =
LLONG_MAX
) {

4471 
expú©i⁄_off£t
 = (
expú©i⁄
 >> 10Ë- (
	`time_boŸ_m£c
() >> 10);

4474  
UINT32_MAX
 - 
expú©i⁄_off£t
;

4475 
	}
}

4484 
	$evi˘i⁄_group_add_ruÀ
(
ruÀ
 *rule)

4486 
oÂrŸo
 *oÂrŸÿ
ruÀ
->ofproto;

4487 
o·abÀ
 *
èbÀ
 = &
oÂrŸo
->
èbÀs
[
ruÀ
->
èbÀ_id
];

4489 i‡(
èbÀ
->
evi˘i⁄_fõlds


4490 && (
ruÀ
->
h¨d_timeout
 ||ÑuÀ->
idÀ_timeout
)) {

4491 
evi˘i⁄_group
 *
evg
;

4493 
evg
 = 
	`evi˘i⁄_group_föd
(
èbÀ
, 
	`evi˘i⁄_group_hash_ruÀ
(
ruÀ
));

4495 
ruÀ
->
evi˘i⁄_group
 = 
evg
;

4496 
	`hóp_ö£π
(&
evg
->
ruÀs
, &
ruÀ
->
evg_node
,

4497 
	`ruÀ_evi˘i⁄_¥i‹ôy
(
ruÀ
));

4498 
	`evi˘i⁄_group_ªsized
(
èbÀ
, 
evg
);

4500 
	}
}

4506 
	$o·abÀ_öô
(
o·abÀ
 *
èbÀ
)

4508 
	`mem£t
(
èbÀ
, 0,  *table);

4509 
	`˛assifõr_öô
(&
èbÀ
->
˛s
);

4510 
èbÀ
->
max_Êows
 = 
UINT_MAX
;

4511 
	}
}

4517 
	$o·abÀ_de°roy
(
o·abÀ
 *
èbÀ
)

4519 
	`as£π
(
	`˛assifõr_is_em±y
(&
èbÀ
->
˛s
));

4520 
	`o·abÀ_dißbÀ_evi˘i⁄
(
èbÀ
);

4521 
	`˛assifõr_de°roy
(&
èbÀ
->
˛s
);

4522 
	`‰ì
(
èbÀ
->
«me
);

4523 
	}
}

4531 
	$o·abÀ_£t_«me
(
o·abÀ
 *
èbÀ
, c⁄° *
«me
)

4533 i‡(
«me
 &&Çame[0]) {

4534 
Àn
 = 
	`°∫Àn
(
«me
, 
OFP_MAX_TABLE_NAME_LEN
);

4535 i‡(!
èbÀ
->
«me
 || 
	`°∫cmp
“ame,ÅabÀ->«me, 
Àn
)) {

4536 
	`‰ì
(
èbÀ
->
«me
);

4537 
èbÀ
->
«me
 = 
	`xmemdup0
“ame, 
Àn
);

4540 
	`‰ì
(
èbÀ
->
«me
);

4541 
èbÀ
->
«me
 = 
NULL
;

4543 
	}
}

4550 
	$o·abÀ_dißbÀ_evi˘i⁄
(
o·abÀ
 *
èbÀ
)

4552 i‡(
èbÀ
->
evi˘i⁄_fõlds
) {

4553 
evi˘i⁄_group
 *
evg
, *
√xt
;

4555 
	`HMAP_FOR_EACH_SAFE
 (
evg
, 
√xt
, 
id_node
,

4556 &
èbÀ
->
evi˘i⁄_groups_by_id
) {

4557 
	`evi˘i⁄_group_de°roy
(
èbÀ
, 
evg
);

4559 
	`hm≠_de°roy
(&
èbÀ
->
evi˘i⁄_groups_by_id
);

4560 
	`hóp_de°roy
(&
èbÀ
->
evi˘i⁄_groups_by_size
);

4562 
	`‰ì
(
èbÀ
->
evi˘i⁄_fõlds
);

4563 
èbÀ
->
evi˘i⁄_fõlds
 = 
NULL
;

4564 
èbÀ
->
n_evi˘i⁄_fõlds
 = 0;

4566 
	}
}

4575 
	$o·abÀ_íabÀ_evi˘i⁄
(
o·abÀ
 *
èbÀ
,

4576 c⁄° 
mf_subfõld
 *
fõlds
, 
size_t
 
n_fõlds
)

4578 
˛s_curs‹
 
curs‹
;

4579 
ruÀ
 *rule;

4581 i‡(
èbÀ
->
evi˘i⁄_fõlds


4582 && 
n_fõlds
 =
èbÀ
->
n_evi˘i⁄_fõlds


4583 && (!
n_fõlds


4584 || !
	`memcmp
(
fõlds
, 
èbÀ
->
evi˘i⁄_fõlds
,

4585 
n_fõlds
 *  *
fõlds
))) {

4590 
	`o·abÀ_dißbÀ_evi˘i⁄
(
èbÀ
);

4592 
èbÀ
->
n_evi˘i⁄_fõlds
 = 
n_fõlds
;

4593 
èbÀ
->
evi˘i⁄_fõlds
 = 
	`xmemdup
(
fõlds
, 
n_fõlds
 *  *fields);

4595 
èbÀ
->
evi˘i⁄_group_id_basis
 = 
	`øndom_uöt32
();

4596 
	`hm≠_öô
(&
èbÀ
->
evi˘i⁄_groups_by_id
);

4597 
	`hóp_öô
(&
èbÀ
->
evi˘i⁄_groups_by_size
);

4599 
	`˛s_curs‹_öô
(&
curs‹
, &
èbÀ
->
˛s
, 
NULL
);

4600 
	`CLS_CURSOR_FOR_EACH
 (
ruÀ
, 
¸
, &
curs‹
) {

4601 
	`evi˘i⁄_group_add_ruÀ
(
ruÀ
);

4603 
	}
}

4607 
	$o·abÀ_ªmove_ruÀ
(
ruÀ
 *rule)

4609 
oÂrŸo
 *oÂrŸÿ
ruÀ
->ofproto;

4610 
o·abÀ
 *
èbÀ
 = &
oÂrŸo
->
èbÀs
[
ruÀ
->
èbÀ_id
];

4612 
	`˛assifõr_ªmove
(&
èbÀ
->
˛s
, &
ruÀ
->
¸
);

4613 
	`evi˘i⁄_group_ªmove_ruÀ
(
ruÀ
);

4614 
	}
}

4619 
ruÀ
 *

4620 
	$o·abÀ_ª∂a˚_ruÀ
(
ruÀ
 *rule)

4622 
oÂrŸo
 *oÂrŸÿ
ruÀ
->ofproto;

4623 
o·abÀ
 *
èbÀ
 = &
oÂrŸo
->
èbÀs
[
ruÀ
->
èbÀ_id
];

4624 
ruÀ
 *
vi˘im
;

4626 
vi˘im
 = 
	`ruÀ_‰om_˛s_ruÀ
(
	`˛assifõr_ª∂a˚
(&
èbÀ
->
˛s
, &
ruÀ
->
¸
));

4627 i‡(
vi˘im
) {

4628 
	`evi˘i⁄_group_ªmove_ruÀ
(
vi˘im
);

4630 
	`evi˘i⁄_group_add_ruÀ
(
ruÀ
);

4631  
vi˘im
;

4632 
	}
}

4636 
	$o·abÀ_sub°ôuã_ruÀ
(
ruÀ
 *
ﬁd
, ruÀ *
√w
)

4638 i‡(
√w
) {

4639 
	`o·abÀ_ª∂a˚_ruÀ
(
√w
);

4641 
	`o·abÀ_ªmove_ruÀ
(
ﬁd
);

4643 
	}
}

4647 
oÂrŸo
 *

4648 
	$oÂrŸo_lookup
(c⁄° *
«me
)

4650 
oÂrŸo
 *ofproto;

4652 
	`HMAP_FOR_EACH_WITH_HASH
 (
oÂrŸo
, 
hm≠_node
, 
	`hash_°rög
(
«me
, 0),

4653 &
Æl_oÂrŸos
) {

4654 i‡(!
	`°rcmp
(
oÂrŸo
->
«me
,Çame)) {

4655  
oÂrŸo
;

4658  
NULL
;

4659 
	}
}

4662 
	$oÂrŸo_unix˘l_li°
(
unix˘l_c⁄n
 *
c⁄n
, 
¨gc
 
OVS_UNUSED
,

4663 c⁄° *
¨gv
[] 
OVS_UNUSED
, *
aux
 OVS_UNUSED)

4665 
oÂrŸo
 *ofproto;

4666 
ds
 
ªsu…s
;

4668 
	`ds_öô
(&
ªsu…s
);

4669 
	`HMAP_FOR_EACH
 (
oÂrŸo
, 
hm≠_node
, &
Æl_oÂrŸos
) {

4670 
	`ds_put_f‹m©
(&
ªsu…s
, "%s\n", 
oÂrŸo
->
«me
);

4672 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, 
	`ds_c°r
(&
ªsu…s
));

4673 
	`ds_de°roy
(&
ªsu…s
);

4674 
	}
}

4677 
	$oÂrŸo_unix˘l_öô
()

4679 
boﬁ
 
ªgi°îed
;

4680 i‡(
ªgi°îed
) {

4683 
ªgi°îed
 = 
åue
;

4685 
	`unix˘l_comm™d_ªgi°î
("ofproto/list", "", 0, 0,

4686 
oÂrŸo_unix˘l_li°
, 
NULL
);

4687 
	}
}

4699 
	$oÂrŸo_gë_vœn_ußge
(
oÂrŸo
 *oÂrŸo, *
vœn_bôm≠
)

4701 c⁄° 
o·abÀ
 *oftable;

4703 
	`‰ì
(
oÂrŸo
->
vœn_bôm≠
);

4704 
oÂrŸo
->
vœn_bôm≠
 = 
	`bôm≠_Æloˇã
(4096);

4705 
oÂrŸo
->
vœns_ch™ged
 = 
Ál£
;

4707 
	`OFPROTO_FOR_EACH_TABLE
 (
o·abÀ
, 
oÂrŸo
) {

4708 c⁄° 
˛s_èbÀ
 *
èbÀ
;

4710 
	`HMAP_FOR_EACH
 (
èbÀ
, 
hm≠_node
, &
o·abÀ
->
˛s
.
èbÀs
) {

4711 i‡(
	`möimask_gë_vid_mask
(&
èbÀ
->
mask
Ë=
VLAN_VID_MASK
) {

4712 c⁄° 
˛s_ruÀ
 *
ruÀ
;

4714 
	`HMAP_FOR_EACH
 (
ruÀ
, 
hm≠_node
, &
èbÀ
->
ruÀs
) {

4715 
uöt16_t
 
vid
 = 
	`möiÊow_gë_vid
(&
ruÀ
->
m©ch
.
Êow
);

4716 
	`bôm≠_£t1
(
vœn_bôm≠
, 
vid
);

4717 
	`bôm≠_£t1
(
oÂrŸo
->
vœn_bôm≠
, 
vid
);

4722 
	}
}

4728 
boﬁ


4729 
	$oÂrŸo_has_vœn_ußge_ch™ged
(c⁄° 
oÂrŸo
 *ofproto)

4731  
oÂrŸo
->
vœns_ch™ged
;

4732 
	}
}

4740 
	$oÂrŸo_p‹t_£t_ªÆdev
(
oÂrŸo
 *oÂrŸo, 
uöt16_t
 
vœndev_oÂ_p‹t
,

4741 
uöt16_t
 
ªÆdev_oÂ_p‹t
, 
vid
)

4743 
oÂ‹t
 *ofport;

4744 
îr‹
;

4746 
	`as£π
(
vœndev_oÂ_p‹t
 !
ªÆdev_oÂ_p‹t
);

4748 
oÂ‹t
 = 
	`oÂrŸo_gë_p‹t
(
oÂrŸo
, 
vœndev_oÂ_p‹t
);

4749 i‡(!
oÂ‹t
) {

4750 
	`VLOG_WARN
("%s: c™nŸ sëÑóldev o¿n⁄exi°íàp‹à%"
PRIu16
,

4751 
oÂrŸo
->
«me
, 
vœndev_oÂ_p‹t
);

4752  
EINVAL
;

4755 i‡(!
oÂrŸo
->
oÂrŸo_˛ass
->
£t_ªÆdev
) {

4756 i‡(!
vœndev_oÂ_p‹t
) {

4759 
	`VLOG_WARN
("%s: vœ¿•löãr†nŸ suµ‹ãd", 
oÂrŸo
->
«me
);

4760  
EOPNOTSUPP
;

4763 
îr‹
 = 
oÂrŸo
->
oÂrŸo_˛ass
->
	`£t_ªÆdev
(
oÂ‹t
, 
ªÆdev_oÂ_p‹t
, 
vid
);

4764 i‡(
îr‹
) {

4765 
	`VLOG_WARN
("%s: sëtögÑóldev o¿p‹à%"
PRIu16
" (%s) failed (%s)",

4766 
oÂrŸo
->
«me
, 
vœndev_oÂ_p‹t
,

4767 
	`√tdev_gë_«me
(
oÂ‹t
->
√tdev
), 
	`°ªº‹
(
îr‹
));

4769  
îr‹
;

4770 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/ofproto/ofproto.h

17 #i‚de‡
OFPROTO_H


18 
	#OFPROTO_H
 1

	)

20 
	~<sys/ty≥s.h
>

21 
	~<√töë/ö.h
>

22 
	~<°dboﬁ.h
>

23 
	~<°ddef.h
>

24 
	~<°döt.h
>

25 
	~"cfm.h
"

26 
	~"Êow.h
"

27 
	~"√tÊow.h
"

28 
	~"s£t.h
"

29 
	~"°p.h
"

30 
	~"èg.h
"

32 #ifde‡ 
__˝lu•lus


36 
cfm_£âögs
;

37 
˛s_ruÀ
;

38 
√tdev
;

39 
oÂrŸo
;

40 
oÂ‹t
;

41 
shash
;

42 
sim≠
;

43 
√tdev_°©s
;

45 
	soÂrŸo_c⁄åﬁÀr_öfo
 {

46 
boﬁ
 
is_c⁄√˘ed
;

47 
nx_rﬁe
 
rﬁe
;

49 c⁄° *
keys
[4];

50 c⁄° *
vÆues
[4];

51 
size_t
 
n
;

52 } 
∑ús
;

55 
	so„xpúed
 {

56 
Êow
 flow;

57 
uöt64_t
 
∑ckë_cou¡
;

58 
uöt64_t
 
byã_cou¡
;

59 
u£d
;

62 
	soÂrŸo_sÊow_›ti⁄s
 {

63 
s£t
 
èrgës
;

64 
uöt32_t
 
ßm∂ög_øã
;

65 
uöt32_t
 
pﬁlög_öãrvÆ
;

66 
uöt32_t
 
hódî_Àn
;

67 
uöt32_t
 
sub_id
;

68 *
agít_devi˚
;

69 *
c⁄åﬁ_ù
;

72 
	soÂrŸo_°p_£âögs
 {

73 
°p_idítifõr
 
sy°em_id
;

74 
uöt16_t
 
¥i‹ôy
;

75 
uöt16_t
 
hñlo_time
;

76 
uöt16_t
 
max_age
;

77 
uöt16_t
 
fwd_dñay
;

80 
	soÂrŸo_°p_°©us
 {

81 
boﬁ
 
íabÀd
;

82 
°p_idítifõr
 
bridge_id
;

83 
°p_idítifõr
 
desig«ãd_roŸ
;

84 
roŸ_∑th_co°
;

87 
	soÂrŸo_p‹t_°p_£âögs
 {

88 
boﬁ
 
íabÀ
;

89 
uöt8_t
 
p‹t_num
;

90 
uöt8_t
 
¥i‹ôy
;

91 
uöt16_t
 
∑th_co°
;

94 
	soÂrŸo_p‹t_°p_°©us
 {

95 
boﬁ
 
íabÀd
;

96 
p‹t_id
;

97 
°p_°©e
 
°©e
;

98 
£c_ö_°©e
;

99 
°p_rﬁe
 
rﬁe
;

100 
tx_cou¡
;

101 
rx_cou¡
;

102 
îr‹_cou¡
;

105 
	soÂrŸo_p‹t_queue
 {

106 
uöt32_t
 
queue
;

107 
uöt8_t
 
ds˝
;

111 
	eoÂrŸo_Áû_mode
 {

112 
OFPROTO_FAIL_SECURE
,

113 
OFPROTO_FAIL_STANDALONE


116 
	eoÂrŸo_b™d
 {

117 
OFPROTO_IN_BAND
,

118 
OFPROTO_OUT_OF_BAND


121 
	soÂrŸo_c⁄åﬁÀr
 {

122 *
èrgë
;

123 
max_backoff
;

124 
¥obe_öãrvÆ
;

125 
oÂrŸo_b™d
 
b™d
;

126 
boﬁ
 
íabÀ_async_msgs
;

129 
øã_limô
;

130 
bur°_limô
;

132 
uöt8_t
 
ds˝
;

135 
	#DEFAULT_MFR_DESC
 "Nicúa, Inc."

	)

136 
	#DEFAULT_HW_DESC
 "O≥¿vSwôch"

	)

137 
	#DEFAULT_SW_DESC
 
VERSION


	)

138 
	#DEFAULT_SERIAL_DESC
 "N⁄e"

	)

139 
	#DEFAULT_DP_DESC
 "N⁄e"

	)

141 
oÂrŸo_íumî©e_ty≥s
(
s£t
 *
ty≥s
);

142 c⁄° *
oÂrŸo_n‹mÆize_ty≥
(const *);

144 
oÂrŸo_íumî©e_«mes
(c⁄° *
ty≥
, 
s£t
 *
«mes
);

145 
oÂrŸo_∑r£_«me
(c⁄° *
«me
, **
dp_«me
, **
dp_ty≥
);

147 
oÂrŸo_¸óã
(c⁄° *
d©≠©h
, c⁄° *
d©≠©h_ty≥
,

148 
oÂrŸo
 **
oÂrŸ›
);

149 
oÂrŸo_de°roy
(
oÂrŸo
 *);

150 
oÂrŸo_dñëe
(c⁄° *
«me
, c⁄° *
ty≥
);

152 
oÂrŸo_run
(
oÂrŸo
 *);

153 
oÂrŸo_run_Á°
(
oÂrŸo
 *);

154 
oÂrŸo_waô
(
oÂrŸo
 *);

155 
boﬁ
 
oÂrŸo_is_Æive
(c⁄° 
oÂrŸo
 *);

157 
oÂrŸo_gë_mem‹y_ußge
(c⁄° 
oÂrŸo
 *, 
sim≠
 *);

162 
	soÂrŸo_p‹t
 {

163 *
«me
;

164 *
ty≥
;

165 
uöt16_t
 
oÂ_p‹t
;

167 
oÂrŸo_p‹t_˛⁄e
(
oÂrŸo_p‹t
 *, const ofproto_port *);

168 
oÂrŸo_p‹t_de°roy
(
oÂrŸo_p‹t
 *);

170 
	soÂrŸo_p‹t_dump
 {

171 c⁄° 
oÂrŸo
 *ofproto;

172 
îr‹
;

173 *
°©e
;

175 
oÂrŸo_p‹t_dump_°¨t
(
oÂrŸo_p‹t_dump
 *,

176 c⁄° 
oÂrŸo
 *);

177 
boﬁ
 
oÂrŸo_p‹t_dump_√xt
(
oÂrŸo_p‹t_dump
 *, 
oÂrŸo_p‹t
 *);

178 
oÂrŸo_p‹t_dump_d⁄e
(
oÂrŸo_p‹t_dump
 *);

186 
	#OFPROTO_PORT_FOR_EACH
(
OFPROTO_PORT
, 
DUMP
, 
OFPROTO
) \

187 
	`oÂrŸo_p‹t_dump_°¨t
(
DUMP
, 
OFPROTO
); \

188 (
	`oÂrŸo_p‹t_dump_√xt
(
DUMP
, 
OFPROTO_PORT
) \

189 ? 
åue
 \

190 : (
	`oÂrŸo_p‹t_dump_d⁄e
(
DUMP
), 
Ál£
)); \

191 )

	)

193 
	#OFPROTO_FLOW_EVICTION_THRESHOLD_DEFAULT
 1000

	)

194 
	#OFPROTO_FLOW_EVICTION_THRESHOLD_MIN
 100

	)

196 
oÂrŸo_p‹t_add
(
oÂrŸo
 *, 
√tdev
 *, 
uöt16_t
 *
oÂ_p‹ç
);

197 
oÂrŸo_p‹t_dñ
(
oÂrŸo
 *, 
uöt16_t
 
oÂ_p‹t
);

198 
oÂrŸo_p‹t_gë_°©s
(c⁄° 
oÂ‹t
 *, 
√tdev_°©s
 *
°©s
);

200 
oÂrŸo_p‹t_quîy_by_«me
(c⁄° 
oÂrŸo
 *, c⁄° *
dev«me
,

201 
oÂrŸo_p‹t
 *);

204 
uöt64_t
 
oÂrŸo_gë_d©≠©h_id
(c⁄° 
oÂrŸo
 *);

205 
oÂrŸo_£t_d©≠©h_id
(
oÂrŸo
 *, 
uöt64_t
 
d©≠©h_id
);

206 
oÂrŸo_£t_c⁄åﬁÀrs
(
oÂrŸo
 *,

207 c⁄° 
oÂrŸo_c⁄åﬁÀr
 *, 
size_t
 
n
);

208 
oÂrŸo_£t_Áû_mode
(
oÂrŸo
 *, 
oÂrŸo_Áû_mode
 
Áû_mode
);

209 
oÂrŸo_ªc⁄√˘_c⁄åﬁÀrs
(
oÂrŸo
 *);

210 
oÂrŸo_£t_exåa_ö_b™d_ªmŸes
(
oÂrŸo
 *,

211 c⁄° 
sockaddr_ö
 *, 
size_t
 
n
);

212 
oÂrŸo_£t_ö_b™d_queue
(
oÂrŸo
 *, 
queue_id
);

213 
oÂrŸo_£t_Êow_evi˘i⁄_thªshﬁd
(
oÂrŸo
 *, 
thªshﬁd
);

214 
oÂrŸo_£t_f‹w¨d_bpdu
(
oÂrŸo
 *, 
boﬁ
 
f‹w¨d_bpdu
);

215 
oÂrŸo_£t_mac_idÀ_time
(
oÂrŸo
 *, 
idÀ_time
);

216 
oÂrŸo_£t_desc
(
oÂrŸo
 *,

217 c⁄° *
m‰_desc
, c⁄° *
hw_desc
,

218 c⁄° *
sw_desc
, c⁄° *
£rül_desc
,

219 c⁄° *
dp_desc
);

220 
oÂrŸo_£t_¢o›s
(
oÂrŸo
 *, c⁄° 
s£t
 *
¢o›s
);

221 
oÂrŸo_£t_√tÊow
(
oÂrŸo
 *,

222 c⁄° 
√tÊow_›ti⁄s
 *
nf_›ti⁄s
);

223 
oÂrŸo_£t_sÊow
(
oÂrŸo
 *, c⁄° 
oÂrŸo_sÊow_›ti⁄s
 *);

224 
oÂrŸo_£t_°p
(
oÂrŸo
 *, c⁄° 
oÂrŸo_°p_£âögs
 *);

225 
oÂrŸo_gë_°p_°©us
(
oÂrŸo
 *, 
oÂrŸo_°p_°©us
 *);

228 
oÂrŸo_p‹t_uƒegi°î
(
oÂrŸo
 *, 
uöt16_t
 
oÂ_p‹t
);

230 
oÂrŸo_p‹t_˛ór_cfm
(
oÂrŸo
 *, 
uöt16_t
 
oÂ_p‹t
);

231 
oÂrŸo_p‹t_£t_cfm
(
oÂrŸo
 *, 
uöt16_t
 
oÂ_p‹t
,

232 c⁄° 
cfm_£âögs
 *);

233 
oÂrŸo_p‹t_is_œ˝_cuºít
(
oÂrŸo
 *, 
uöt16_t
 
oÂ_p‹t
);

234 
oÂrŸo_p‹t_£t_°p
(
oÂrŸo
 *, 
uöt16_t
 
oÂ_p‹t
,

235 c⁄° 
oÂrŸo_p‹t_°p_£âögs
 *);

236 
oÂrŸo_p‹t_gë_°p_°©us
(
oÂrŸo
 *, 
uöt16_t
 
oÂ_p‹t
,

237 
oÂrŸo_p‹t_°p_°©us
 *);

238 
oÂrŸo_p‹t_£t_queues
(
oÂrŸo
 *, 
uöt16_t
 
oÂ_p‹t
,

239 c⁄° 
oÂrŸo_p‹t_queue
 *,

240 
size_t
 
n_queues
);

243 
	ep‹t_vœn_mode
 {

246 
PORT_VLAN_ACCESS
,

250 
PORT_VLAN_TRUNK
,

255 
PORT_VLAN_NATIVE_TAGGED
,

260 
PORT_VLAN_NATIVE_UNTAGGED


264 
	soÂrŸo_bundÀ_£âögs
 {

265 *
«me
;

267 
uöt16_t
 *
¶aves
;

268 
size_t
 
n_¶aves
;

270 
p‹t_vœn_mode
 
vœn_mode
;

271 
vœn
;

272 *
åunks
;

273 
boﬁ
 
u£_¥i‹ôy_ègs
;

275 
b⁄d_£âögs
 *
b⁄d
;

276 
uöt32_t
 *
b⁄d_°abÀ_ids
;

278 
œ˝_£âögs
 *
œ˝
;

279 
œ˝_¶ave_£âögs
 *
œ˝_¶aves
;

287 
uöt16_t
 
ªÆdev_oÂ_p‹t
;

290 
oÂrŸo_bundÀ_ªgi°î
(
oÂrŸo
 *, *
aux
,

291 c⁄° 
oÂrŸo_bundÀ_£âögs
 *);

292 
oÂrŸo_bundÀ_uƒegi°î
(
oÂrŸo
 *, *
aux
);

295 
	soÂrŸo_múr‹_£âögs
 {

297 *
«me
;

300 **
§cs
;

301 
size_t
 
n_§cs
;

304 **
d°s
;

305 
size_t
 
n_d°s
;

308 *
§c_vœns
;

311 *
out_bundÀ
;

312 
uöt16_t
 
out_vœn
;

315 
oÂrŸo_múr‹_ªgi°î
(
oÂrŸo
 *, *
aux
,

316 c⁄° 
oÂrŸo_múr‹_£âögs
 *);

317 
oÂrŸo_múr‹_uƒegi°î
(
oÂrŸo
 *, *
aux
);

318 
oÂrŸo_múr‹_gë_°©s
(
oÂrŸo
 *, *
aux
,

319 
uöt64_t
 *
∑ckës
, uöt64_à*
byãs
);

321 
oÂrŸo_£t_Êood_vœns
(
oÂrŸo
 *, *
Êood_vœns
);

322 
boﬁ
 
oÂrŸo_is_múr‹_ouçut_bundÀ
(c⁄° 
oÂrŸo
 *, *
aux
);

325 
	soÂrŸo_èbÀ_£âögs
 {

326 *
«me
;

327 
max_Êows
;

337 
mf_subfõld
 *
groups
;

338 
size_t
 
n_groups
;

341 
oÂrŸo_gë_n_èbÀs
(c⁄° 
oÂrŸo
 *);

342 
oÂrŸo_c⁄figuª_èbÀ
(
oÂrŸo
 *, 
èbÀ_id
,

343 c⁄° 
oÂrŸo_èbÀ_£âögs
 *);

346 
boﬁ
 
oÂrŸo_has_¢o›s
(c⁄° 
oÂrŸo
 *);

347 
oÂrŸo_gë_¢o›s
(c⁄° 
oÂrŸo
 *, 
s£t
 *);

348 
oÂrŸo_gë_Æl_Êows
(
oÂrŸo
 *
p
, 
ds
 *);

349 
oÂrŸo_gë_√tÊow_ids
(c⁄° 
oÂrŸo
 *,

350 
uöt8_t
 *
ígöe_ty≥
, uöt8_à*
ígöe_id
);

351 
oÂrŸo_p‹t_gë_cfm_Áu…
(c⁄° 
oÂrŸo
 *, 
uöt16_t
 
oÂ_p‹t
);

352 
oÂrŸo_p‹t_gë_cfm_›up
(c⁄° 
oÂrŸo
 *, 
uöt16_t
 
oÂ_p‹t
);

353 
oÂrŸo_p‹t_gë_cfm_ªmŸe_mpids
(c⁄° 
oÂrŸo
 *,

354 
uöt16_t
 
oÂ_p‹t
, c⁄° 
uöt64_t
 **
rmps
,

355 
size_t
 *
n_rmps
);

356 
oÂrŸo_p‹t_gë_cfm_hó…h
(c⁄° 
oÂrŸo
 *ofproto,

357 
uöt16_t
 
oÂ_p‹t
);

358 
oÂrŸo_gë_oÂrŸo_c⁄åﬁÀr_öfo
(c⁄° 
oÂrŸo
 *, 
shash
 *);

359 
oÂrŸo_‰ì_oÂrŸo_c⁄åﬁÀr_öfo
(
shash
 *);

368 
oÂrŸo_gë_vœn_ußge
(
oÂrŸo
 *, *
vœn_bôm≠
);

369 
boﬁ
 
oÂrŸo_has_vœn_ußge_ch™ged
(c⁄° 
oÂrŸo
 *);

370 
oÂrŸo_p‹t_£t_ªÆdev
(
oÂrŸo
 *, 
uöt16_t
 
vœndev_oÂ_p‹t
,

371 
uöt16_t
 
ªÆdev_oÂ_p‹t
, 
vid
);

373 #ifde‡ 
__˝lu•lus


	@/home/lsch/mytest/openvswitch-1.9.0/ofproto/pinsched.c

17 
	~<c⁄fig.h
>

18 
	~"pösched.h
"

19 
	~<sys/ty≥s.h
>

20 
	~<√töë/ö.h
>

21 
	~<¨∑/öë.h
>

22 
	~<°döt.h
>

23 
	~<°dlib.h
>

24 
	~"hash.h
"

25 
	~"hm≠.h
"

26 
	~"oÂbuf.h
"

27 
	~"›íÊow/›íÊow.h
"

28 
	~"pﬁl-lo›.h
"

29 
	~"øndom.h
"

30 
	~"rc⁄n.h
"

31 
	~"ßt-m©h.h
"

32 
	~"timevÆ.h
"

33 
	~"tokí-buckë.h
"

34 
	~"vc⁄n.h
"

36 
	spöqueue
 {

37 
hm≠_node
 
	mnode
;

38 
uöt16_t
 
	mp‹t_no
;

39 
li°
 
	m∑ckës
;

40 
	mn
;

43 
	spösched
 {

44 
tokí_buckë
 
	mtokí_buckë
;

47 
hm≠
 
	mqueues
;

48 
	mn_queued
;

49 
pöqueue
 *
	m√xt_txq
;

52 
	mn_txq
;

55 
	mn_n‹mÆ
;

56 
	mn_limôed
;

57 
	mn_queue_dr›≥d
;

61 
	$adv™˚_txq
(
pösched
 *
ps
)

63 
hm≠_node
 *
√xt
;

65 
√xt
 = (
ps
->
√xt_txq


66 ? 
	`hm≠_√xt
(&
ps
->
queues
, &ps->
√xt_txq
->
node
)

67 : 
	`hm≠_fú°
(&
ps
->
queues
));

68 
ps
->
√xt_txq
 = 
√xt
 ? 
	`CONTAINER_OF
“ext, 
pöqueue
, 
node
Ë: 
NULL
;

69 
	}
}

71 
oÂbuf
 *

72 
	$dequeue_∑ckë
(
pösched
 *
ps
, 
pöqueue
 *
q
)

74 
oÂbuf
 *
∑ckë
 = 
	`oÂbuf_‰om_li°
(
	`li°_p›_‰⁄t
(&
q
->
∑ckës
));

75 
q
->
n
--;

76 
ps
->
n_queued
--;

77  
∑ckë
;

78 
	}
}

81 
	$adju°_limôs
(*
øã_limô
, *
bur°_limô
)

83 i‡(*
øã_limô
 <= 0) {

84 *
øã_limô
 = 1000;

86 i‡(*
bur°_limô
 <= 0) {

87 *
bur°_limô
 = *
øã_limô
 / 4;

89 i‡(*
bur°_limô
 < 1) {

90 *
bur°_limô
 = 1;

92 
	}
}

97 
	$pöqueue_de°roy
(
pösched
 *
ps
, 
pöqueue
 *
q
)

99 
	`hm≠_ªmove
(&
ps
->
queues
, &
q
->
node
);

100 
	`‰ì
(
q
);

101 
	}
}

103 
pöqueue
 *

104 
	$pöqueue_gë
(
pösched
 *
ps
, 
uöt16_t
 
p‹t_no
)

106 
uöt32_t
 
hash
 = 
	`hash_öt
(
p‹t_no
, 0);

107 
pöqueue
 *
q
;

109 
	`HMAP_FOR_EACH_IN_BUCKET
 (
q
, 
node
, 
hash
, &
ps
->
queues
) {

110 i‡(
p‹t_no
 =
q
->port_no) {

111  
q
;

115 
q
 = 
	`xmÆloc
( *q);

116 
	`hm≠_ö£π
(&
ps
->
queues
, &
q
->
node
, 
hash
);

117 
q
->
p‹t_no
 =Öort_no;

118 
	`li°_öô
(&
q
->
∑ckës
);

119 
q
->
n
 = 0;

120  
q
;

121 
	}
}

125 
	$dr›_∑ckë
(
pösched
 *
ps
)

127 
pöqueue
 *
l⁄ge°
;

128 
n_l⁄ge°
 = 0;

129 
pöqueue
 *
q
;

131 
ps
->
n_queue_dr›≥d
++;

133 
l⁄ge°
 = 
NULL
;

134 
	`HMAP_FOR_EACH
 (
q
, 
node
, &
ps
->
queues
) {

135 i‡(!
l⁄ge°
 ||Ü⁄ge°->
n
 < 
q
->n) {

136 
l⁄ge°
 = 
q
;

137 
n_l⁄ge°
 = 1;

138 } i‡(
l⁄ge°
->
n
 =
q
->n) {

139 
n_l⁄ge°
++;

143 i‡(!
	`øndom_ønge
(
n_l⁄ge°
)) {

144 
l⁄ge°
 = 
q
;

150 
	`oÂbuf_dñëe
(
	`dequeue_∑ckë
(
ps
, 
l⁄ge°
));

151 i‡(
l⁄ge°
->
n
 == 0) {

152 
	`pöqueue_de°roy
(
ps
, 
l⁄ge°
);

154 
	}
}

157 
oÂbuf
 *

158 
	$gë_tx_∑ckë
(
pösched
 *
ps
)

160 
oÂbuf
 *
∑ckë
;

161 
pöqueue
 *
q
;

163 i‡(!
ps
->
√xt_txq
) {

164 
	`adv™˚_txq
(
ps
);

167 
q
 = 
ps
->
√xt_txq
;

168 
∑ckë
 = 
	`dequeue_∑ckë
(
ps
, 
q
);

169 
	`adv™˚_txq
(
ps
);

170 i‡(
q
->
n
 == 0) {

171 
	`pöqueue_de°roy
(
ps
, 
q
);

174  
∑ckë
;

175 
	}
}

180 
boﬁ


181 
	$gë_tokí
(
pösched
 *
ps
)

183  
	`tokí_buckë_wôhdøw
(&
ps
->
tokí_buckë
, 1000);

184 
	}
}

187 
	$pösched_£nd
(
pösched
 *
ps
, 
uöt16_t
 
p‹t_no
,

188 
oÂbuf
 *
∑ckë
, 
pösched_tx_cb
 *
cb
, *
aux
)

190 i‡(!
ps
) {

191 
	`cb
(
∑ckë
, 
aux
);

192 } i‡(!
ps
->
n_queued
 && 
	`gë_tokí
(ps)) {

195 
ps
->
n_n‹mÆ
++;

196 
	`cb
(
∑ckë
, 
aux
);

199 
pöqueue
 *
q
;

205 
	`oÂbuf_åim
(
∑ckë
);

207 i‡(
ps
->
n_queued
 * 1000 >ps->
tokí_buckë
.
bur°
) {

208 
	`dr›_∑ckë
(
ps
);

210 
q
 = 
	`pöqueue_gë
(
ps
, 
p‹t_no
);

211 
	`li°_push_back
(&
q
->
∑ckës
, &
∑ckë
->
li°_node
);

212 
q
->
n
++;

213 
ps
->
n_queued
++;

214 
ps
->
n_limôed
++;

216 
	}
}

219 
	$pösched_run
(
pösched
 *
ps
, 
pösched_tx_cb
 *
cb
, *
aux
)

221 i‡(
ps
) {

222 
i
;

226 
i
 = 0; 
ps
->
n_queued
 && 
	`gë_tokí
(ps) && i < 50; i++) {

227 
	`cb
(
	`gë_tx_∑ckë
(
ps
), 
aux
);

230 
	}
}

233 
	$pösched_waô
(
pösched
 *
ps
)

235 i‡(
ps
 &&Ös->
n_queued
) {

236 
	`tokí_buckë_waô
(&
ps
->
tokí_buckë
, 1000);

238 
	}
}

241 
pösched
 *

242 
	$pösched_¸óã
(
øã_limô
, 
bur°_limô
)

244 
pösched
 *
ps
;

246 
ps
 = 
	`xzÆloc
( *ps);

248 
	`adju°_limôs
(&
øã_limô
, &
bur°_limô
);

249 
	`tokí_buckë_öô
(&
ps
->
tokí_buckë
,

250 
øã_limô
, 
	`ßt_mul
(
bur°_limô
, 1000));

252 
	`hm≠_öô
(&
ps
->
queues
);

253 
ps
->
n_queued
 = 0;

254 
ps
->
√xt_txq
 = 
NULL
;

255 
ps
->
n_txq
 = 0;

256 
ps
->
n_n‹mÆ
 = 0;

257 
ps
->
n_limôed
 = 0;

258 
ps
->
n_queue_dr›≥d
 = 0;

260  
ps
;

261 
	}
}

264 
	$pösched_de°roy
(
pösched
 *
ps
)

266 i‡(
ps
) {

267 
pöqueue
 *
q
, *
√xt
;

269 
	`HMAP_FOR_EACH_SAFE
 (
q
, 
√xt
, 
node
, &
ps
->
queues
) {

270 
	`hm≠_ªmove
(&
ps
->
queues
, &
q
->
node
);

271 
	`oÂbuf_li°_dñëe
(&
q
->
∑ckës
);

272 
	`‰ì
(
q
);

274 
	`hm≠_de°roy
(&
ps
->
queues
);

275 
	`‰ì
(
ps
);

277 
	}
}

280 
	$pösched_gë_limôs
(c⁄° 
pösched
 *
ps
,

281 *
øã_limô
, *
bur°_limô
)

283 *
øã_limô
 = 
ps
->
tokí_buckë
.
øã
;

284 *
bur°_limô
 = 
ps
->
tokí_buckë
.
bur°
 / 1000;

285 
	}
}

288 
	$pösched_£t_limôs
(
pösched
 *
ps
, 
øã_limô
, 
bur°_limô
)

290 
	`adju°_limôs
(&
øã_limô
, &
bur°_limô
);

291 
	`tokí_buckë_£t
(&
ps
->
tokí_buckë
,

292 
øã_limô
, 
	`ßt_mul
(
bur°_limô
, 1000));

293 
ps
->
n_queued
 > 
bur°_limô
) {

294 
	`dr›_∑ckë
(
ps
);

296 
	}
}

301 
	$pösched_cou¡_txqÀn
(c⁄° 
pösched
 *
ps
)

303  
ps
 ?Ös->
n_txq
 : 0;

304 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/ofproto/pinsched.h

17 #i‚de‡
PINSCHED_H


18 
	#PINSCHED_H_H
 1

	)

20 
	~<°döt.h
>

22 
	goÂbuf
;

24 
	tpösched_tx_cb
(
	toÂbuf
 *, *
	taux
);

25 
pösched
 *
pösched_¸óã
(
øã_limô
, 
bur°_limô
);

26 
pösched_gë_limôs
(c⁄° 
pösched
 *,

27 *
øã_limô
, *
bur°_limô
);

28 
pösched_£t_limôs
(
pösched
 *, 
øã_limô
, 
bur°_limô
);

29 
pösched_de°roy
(
pösched
 *);

30 
pösched_£nd
(
pösched
 *, 
uöt16_t
 
p‹t_no
, 
oÂbuf
 *,

31 
pösched_tx_cb
 *, *
aux
);

32 
pösched_run
(
pösched
 *, 
pösched_tx_cb
 *, *
aux
);

33 
pösched_waô
(
pösched
 *);

35 
pösched_cou¡_txqÀn
(c⁄° 
pösched
 *);

	@/home/lsch/mytest/openvswitch-1.9.0/ofproto/pktbuf.c

17 
	~<c⁄fig.h
>

18 
	~"pktbuf.h
"

19 
	~<öây≥s.h
>

20 
	~<°dlib.h
>

21 
	~"covîage.h
"

22 
	~"oÂ-utû.h
"

23 
	~"oÂbuf.h
"

24 
	~"timevÆ.h
"

25 
	~"utû.h
"

26 
	~"vc⁄n.h
"

27 
	~"vlog.h
"

29 
VLOG_DEFINE_THIS_MODULE
(
pktbuf
);

31 
COVERAGE_DEFINE
(
pktbuf_buf„r_unknown
);

32 
COVERAGE_DEFINE
(
pktbuf_nuŒ_cookõ
);

33 
COVERAGE_DEFINE
(
pktbuf_ªåõved
);

34 
COVERAGE_DEFINE
(
pktbuf_ªu£_îr‹
);

41 
	#PKTBUF_BITS
 8

	)

42 
	#PKTBUF_MASK
 (
PKTBUF_CNT
 - 1)

	)

43 
	#PKTBUF_CNT
 (1u << 
PKTBUF_BITS
)

	)

45 
	#COOKIE_BITS
 (32 - 
PKTBUF_BITS
)

	)

46 
	#COOKIE_MAX
 ((1u << 
COOKIE_BITS
Ë- 1)

	)

48 
	#OVERWRITE_MSECS
 5000

	)

50 
	s∑ckë
 {

51 
oÂbuf
 *
	mbuf„r
;

52 
uöt32_t
 
	mcookõ
;

53 
	mtimeout
;

54 
uöt16_t
 
	mö_p‹t
;

57 
	spktbuf
 {

58 
∑ckë
 
	m∑ckës
[
PKTBUF_CNT
];

59 
	mbuf„r_idx
;

60 
	mnuŒ_idx
;

64 
	$pktbuf_ˇ∑côy
()

66  
PKTBUF_CNT
;

67 
	}
}

69 
pktbuf
 *

70 
	$pktbuf_¸óã
()

72  
	`xzÆloc
( *
	`pktbuf_¸óã
());

73 
	}
}

76 
	$pktbuf_de°roy
(
pktbuf
 *
pb
)

78 i‡(
pb
) {

79 
size_t
 
i
;

81 
i
 = 0; i < 
PKTBUF_CNT
; i++) {

82 
	`oÂbuf_dñëe
(
pb
->
∑ckës
[
i
].
buf„r
);

84 
	`‰ì
(
pb
);

86 
	}
}

89 
	$make_id
(
buf„r_idx
, 
cookõ
)

91  
buf„r_idx
 | (
cookõ
 << 
PKTBUF_BITS
);

92 
	}
}

105 
uöt32_t


106 
	$pktbuf_ßve
(
pktbuf
 *
pb
, c⁄° *
buf„r
, 
size_t
 
buf„r_size
,

107 
uöt16_t
 
ö_p‹t
)

109 
∑ckë
 *
p
 = &
pb
->
∑ckës
[pb->
buf„r_idx
];

110 
pb
->
buf„r_idx
 = (pb->buf„r_idx + 1Ë& 
PKTBUF_MASK
;

111 i‡(
p
->
buf„r
) {

112 i‡(
	`time_m£c
(Ë< 
p
->
timeout
) {

113  
UINT32_MAX
;

115 
	`oÂbuf_dñëe
(
p
->
buf„r
);

119 i‡(++
p
->
cookõ
 >
COOKIE_MAX
) {

120 
p
->
cookõ
 = 0;

122 
p
->
buf„r
 = 
	`oÂbuf_˛⁄e_d©a_wôh_hódroom
(buf„r, 
buf„r_size
,

123 (
oÂ_∑ckë_ö
));

126 
p
->
timeout
 = 
	`time_m£c
(Ë+ 
OVERWRITE_MSECS
;

127 
p
->
ö_p‹t
 = in_port;

128  
	`make_id
(
p
 - 
pb
->
∑ckës
,Ö->
cookõ
);

129 
	}
}

151 
uöt32_t


152 
	$pktbuf_gë_nuŒ
()

154  
	`make_id
(0, 
COOKIE_MAX
);

155 
	}
}

172 
oÂîr


173 
	$pktbuf_ªåõve
(
pktbuf
 *
pb
, 
uöt32_t
 
id
, 
oÂbuf
 **
buf„Ω
,

174 
uöt16_t
 *
ö_p‹t
)

176 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 20);

177 
∑ckë
 *
p
;

178 
oÂîr
 
îr‹
;

180 i‡(
id
 =
UINT32_MAX
) {

181 
îr‹
 = 0;

182 
îr‹
;

185 i‡(!
pb
) {

186 
	`VLOG_WARN_RL
(&
æ
, "attemptÅo send bufferedÖacket via connection "

188  
OFPERR_OFPBRC_BUFFER_UNKNOWN
;

191 
p
 = &
pb
->
∑ckës
[
id
 & 
PKTBUF_MASK
];

192 i‡(
p
->
cookõ
 =
id
 >> 
PKTBUF_BITS
) {

193 
oÂbuf
 *
buf„r
 = 
p
->buffer;

194 i‡(
buf„r
) {

195 *
buf„Ω
 = 
buf„r
;

196 i‡(
ö_p‹t
) {

197 *
ö_p‹t
 = 
p
->in_port;

199 
p
->
buf„r
 = 
NULL
;

200 
	`COVERAGE_INC
(
pktbuf_ªåõved
);

203 
	`COVERAGE_INC
(
pktbuf_ªu£_îr‹
);

204 
	`VLOG_WARN_RL
(&
æ
, "©ãm±Åÿªu£ buf„∏%08"
PRIx32
, 
id
);

205 
îr‹
 = 
OFPERR_OFPBRC_BUFFER_EMPTY
;

207 } i‡(
id
 >> 
PKTBUF_BITS
 !
COOKIE_MAX
) {

208 
	`COVERAGE_INC
(
pktbuf_buf„r_unknown
);

209 
	`VLOG_WARN_RL
(&
æ
, "cookõ mism©ch: %08"
PRIx32
" != %08"PRIx32,

210 
id
, (id & 
PKTBUF_MASK
Ë| (
p
->
cookõ
 << 
PKTBUF_BITS
));

211 
îr‹
 = 
OFPERR_OFPBRC_BUFFER_UNKNOWN
;

213 
	`COVERAGE_INC
(
pktbuf_nuŒ_cookõ
);

214 
	`VLOG_INFO_RL
(&
æ
, "Re˚ivedÇuŒ cookõ %08"
PRIx32
" (this isÇormal "

215 "i‡thêswôch wa†ª˚¡ly i¿Áû-›í mode)", 
id
);

216 
îr‹
 = 0;

218 
îr‹
:

219 *
buf„Ω
 = 
NULL
;

220 i‡(
ö_p‹t
) {

221 *
ö_p‹t
 = 
UINT16_MAX
;

223  
îr‹
;

224 
	}
}

227 
	$pktbuf_disˇrd
(
pktbuf
 *
pb
, 
uöt32_t
 
id
)

229 
∑ckë
 *
p
 = &
pb
->
∑ckës
[
id
 & 
PKTBUF_MASK
];

230 i‡(
p
->
cookõ
 =
id
 >> 
PKTBUF_BITS
) {

231 
	`oÂbuf_dñëe
(
p
->
buf„r
);

232 
p
->
buf„r
 = 
NULL
;

234 
	}
}

239 
	$pktbuf_cou¡_∑ckës
(c⁄° 
pktbuf
 *
pb
)

241 
n
 = 0;

243 i‡(
pb
) {

244 
i
;

246 
i
 = 0; i < 
PKTBUF_CNT
; i++) {

247 i‡(
pb
->
∑ckës
[
i
].
buf„r
) {

248 
n
++;

253  
n
;

254 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/ofproto/pktbuf.h

17 #i‚de‡
PKTBUF_H


18 
	#PKTBUF_H
 1

	)

20 
	~<°ddef.h
>

21 
	~<°döt.h
>

23 
	~"oÂ-îr‹s.h
"

25 
	gpktbuf
;

26 
	goÂbuf
;

28 
pktbuf_ˇ∑côy
();

30 
pktbuf
 *
pktbuf_¸óã
();

31 
pktbuf_de°roy
(
pktbuf
 *);

32 
uöt32_t
 
pktbuf_ßve
(
pktbuf
 *, c⁄° *
buf„r
, 
size_t
 
buf„r_size
,

33 
uöt16_t
 
ö_p‹t
);

34 
uöt32_t
 
pktbuf_gë_nuŒ
();

35 
oÂîr
 
pktbuf_ªåõve
(
pktbuf
 *, 
uöt32_t
 
id
,

36 
oÂbuf
 **
buf„Ω
, 
uöt16_t
 *
ö_p‹t
);

37 
pktbuf_disˇrd
(
pktbuf
 *, 
uöt32_t
 
id
);

39 
pktbuf_cou¡_∑ckës
(c⁄° 
pktbuf
 *);

	@/home/lsch/mytest/openvswitch-1.9.0/ovsdb/column.c

16 
	~<c⁄fig.h
>

18 
	~"ovsdb/cﬁumn.h
"

20 
	~<°dlib.h
>

22 
	~"cﬁumn.h
"

23 
	~"dy«mic-°rög.h
"

24 
	~"js⁄.h
"

25 
	~"ovsdb-îr‹.h
"

26 
	~"ovsdb-∑r£r.h
"

27 
	~"èbÀ.h
"

28 
	~"utû.h
"

30 
ovsdb_cﬁumn
 *

31 
	$ovsdb_cﬁumn_¸óã
(c⁄° *
«me
,

32 
boﬁ
 
muèbÀ
, boﬁ 
≥rsi°ít
,

33 c⁄° 
ovsdb_ty≥
 *
ty≥
)

36 
ovsdb_cﬁumn
 *
cﬁumn
;

38 
cﬁumn
 = 
	`xzÆloc
( *column);

39 
cﬁumn
->
«me
 = 
	`x°rdup
(name);

40 
cﬁumn
->
muèbÀ
 = mutable;

41 
cﬁumn
->
≥rsi°ít
 =Öersistent;

42 
	`ovsdb_ty≥_˛⁄e
(&
cﬁumn
->
ty≥
,Åype);

44  
cﬁumn
;

45 
	}
}

47 
ovsdb_cﬁumn
 *

48 
	$ovsdb_cﬁumn_˛⁄e
(c⁄° 
ovsdb_cﬁumn
 *
ﬁd
)

51  
	`ovsdb_cﬁumn_¸óã
(
ﬁd
->
«me
,

52 
ﬁd
->
muèbÀ
, old->
≥rsi°ít
,

53 &
ﬁd
->
ty≥
);

54 
	}
}

57 
	$ovsdb_cﬁumn_de°roy
(
ovsdb_cﬁumn
 *
cﬁumn
)

59 
	`ovsdb_ty≥_de°roy
(&
cﬁumn
->
ty≥
);

60 
	`‰ì
(
cﬁumn
->
«me
);

61 
	`‰ì
(
cﬁumn
);

62 
	}
}

64 
ovsdb_îr‹
 *

65 
	$ovsdb_cﬁumn_‰om_js⁄
(c⁄° 
js⁄
 *js⁄, c⁄° *
«me
,

66 
ovsdb_cﬁumn
 **
cﬁum≈
)

68 c⁄° 
js⁄
 *
muèbÀ
, *
ïhemîÆ
, *
ty≥_js⁄
;

69 
ovsdb_îr‹
 *
îr‹
;

70 
ovsdb_ty≥
 
ty≥
;

71 
ovsdb_∑r£r
 
∑r£r
;

72 
boﬁ
 
≥rsi°ít
;

74 *
cﬁum≈
 = 
NULL
;

76 
	`ovsdb_∑r£r_öô
(&
∑r£r
, 
js⁄
, "schem®f‹ cﬁum¿%s", 
«me
);

77 
muèbÀ
 = 
	`ovsdb_∑r£r_membî
(&
∑r£r
, "mutable",

78 
OP_TRUE
 | 
OP_FALSE
 | 
OP_OPTIONAL
);

79 
ïhemîÆ
 = 
	`ovsdb_∑r£r_membî
(&
∑r£r
, "ephemeral",

80 
OP_TRUE
 | 
OP_FALSE
 | 
OP_OPTIONAL
);

81 
ty≥_js⁄
 = 
	`ovsdb_∑r£r_membî
(&
∑r£r
, "ty≥", 
OP_STRING
 | 
OP_OBJECT
);

82 
îr‹
 = 
	`ovsdb_∑r£r_föish
(&
∑r£r
);

83 i‡(
îr‹
) {

84  
îr‹
;

87 
îr‹
 = 
	`ovsdb_ty≥_‰om_js⁄
(&
ty≥
, 
ty≥_js⁄
);

88 i‡(
îr‹
) {

89  
îr‹
;

92 
≥rsi°ít
 = 
ïhemîÆ
 ? !
	`js⁄_boﬁón
”phemîÆË: 
åue
;

93 *
cﬁum≈
 = 
	`ovsdb_cﬁumn_¸óã
(
«me
,

94 
muèbÀ
 ? 
	`js⁄_boﬁón
(muèbÀË: 
åue
,

95 
≥rsi°ít
, &
ty≥
);

97 
	`ovsdb_ty≥_de°roy
(&
ty≥
);

99  
NULL
;

100 
	}
}

102 
js⁄
 *

103 
	$ovsdb_cﬁumn_to_js⁄
(c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
)

105 
js⁄
 *js⁄ = 
	`js⁄_obje˘_¸óã
();

106 i‡(!
cﬁumn
->
muèbÀ
) {

107 
	`js⁄_obje˘_put
(
js⁄
, "muèbÀ", 
	`js⁄_boﬁón_¸óã
(
Ál£
));

109 i‡(!
cﬁumn
->
≥rsi°ít
) {

110 
	`js⁄_obje˘_put
(
js⁄
, "ïhemîÆ", 
	`js⁄_boﬁón_¸óã
(
åue
));

112 
	`js⁄_obje˘_put
(
js⁄
, "ty≥", 
	`ovsdb_ty≥_to_js⁄
(&
cﬁumn
->
ty≥
));

113  
js⁄
;

114 
	}
}

117 
	$ovsdb_cﬁumn_£t_öô
(
ovsdb_cﬁumn_£t
 *
£t
)

119 
£t
->
cﬁumns
 = 
NULL
;

120 
£t
->
n_cﬁumns
 = së->
Æloˇãd_cﬁumns
 = 0;

121 
	}
}

124 
	$ovsdb_cﬁumn_£t_de°roy
(
ovsdb_cﬁumn_£t
 *
£t
)

126 
	`‰ì
(
£t
->
cﬁumns
);

127 
	}
}

130 
	$ovsdb_cﬁumn_£t_˛⁄e
(
ovsdb_cﬁumn_£t
 *
√w
,

131 c⁄° 
ovsdb_cﬁumn_£t
 *
ﬁd
)

133 
√w
->
cﬁumns
 = 
	`xmemdup
(
ﬁd
->columns,

134 
ﬁd
->
n_cﬁumns
 *  *ﬁd->
cﬁumns
);

135 
√w
->
n_cﬁumns
 =Çew->
Æloˇãd_cﬁumns
 = 
ﬁd
->n_columns;

136 
	}
}

138 
ovsdb_îr‹
 *

139 
	$ovsdb_cﬁumn_£t_‰om_js⁄
(c⁄° 
js⁄
 *json,

140 c⁄° 
ovsdb_èbÀ_schema
 *
schema
,

141 
ovsdb_cﬁumn_£t
 *
£t
)

143 
	`ovsdb_cﬁumn_£t_öô
(
£t
);

144 i‡(!
js⁄
) {

145 
shash_node
 *
node
;

147 
	`SHASH_FOR_EACH
 (
node
, &
schema
->
cﬁumns
) {

148 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
 = 
node
->
d©a
;

149 
	`ovsdb_cﬁumn_£t_add
(
£t
, 
cﬁumn
);

152  
NULL
;

154 
ovsdb_îr‹
 *
îr‹
 = 
NULL
;

155 
size_t
 
i
;

157 i‡(
js⁄
->
ty≥
 !
JSON_ARRAY
) {

158 
îr‹
;

162 
i
 = 0; i < 
js⁄
->
u
.
¨øy
.
n
; i++) {

163 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
;

164 c⁄° *
s
;

166 i‡(
js⁄
->
u
.
¨øy
.
ñems
[
i
]->
ty≥
 !
JSON_STRING
) {

167 
îr‹
;

170 
s
 = 
js⁄
->
u
.
¨øy
.
ñems
[
i
]->u.
°rög
;

171 
cﬁumn
 = 
	`shash_föd_d©a
(&
schema
->
cﬁumns
, 
s
);

172 i‡(!
cﬁumn
) {

173 
îr‹
 = 
	`ovsdb_sy¡ax_îr‹
(
js⁄
, 
NULL
, "%s isÇotá valid "

174 "cﬁum¿«me", 
s
);

175 
îr‹
;

176 } i‡(
	`ovsdb_cﬁumn_£t_c⁄èös
(
£t
, 
cﬁumn
->
ödex
)) {

177 
îr‹
;

179 
	`ovsdb_cﬁumn_£t_add
(
£t
, 
cﬁumn
);

181  
NULL
;

183 
îr‹
:

184 
	`ovsdb_cﬁumn_£t_de°roy
(
£t
);

185 
	`ovsdb_cﬁumn_£t_öô
(
£t
);

186 i‡(!
îr‹
) {

187 
îr‹
 = 
	`ovsdb_sy¡ax_îr‹
(
js⁄
, 
NULL
, "array of distinct column "

190  
îr‹
;

192 
	}
}

194 
js⁄
 *

195 
	$ovsdb_cﬁumn_£t_to_js⁄
(c⁄° 
ovsdb_cﬁumn_£t
 *
£t
)

197 
js⁄
 *json;

198 
size_t
 
i
;

200 
js⁄
 = 
	`js⁄_¨øy_¸óã_em±y
();

201 
i
 = 0; i < 
£t
->
n_cﬁumns
; i++) {

202 
	`js⁄_¨øy_add
(
js⁄
, 
	`js⁄_°rög_¸óã
(
£t
->
cﬁumns
[
i
]->
«me
));

204  
js⁄
;

205 
	}
}

210 
	$ovsdb_cﬁumn_£t_to_°rög
(c⁄° 
ovsdb_cﬁumn_£t
 *
£t
)

212 i‡(!
£t
->
n_cﬁumns
) {

213  
	`x°rdup
("no columns");

215 
ds
 
s
;

216 
size_t
 
i
;

218 
	`ds_öô
(&
s
);

219 
	`ds_put_f‹m©
(&
s
, "cﬁumn%†", 
£t
->
n_cﬁumns
 > 1 ? "s" : "");

220 
i
 = 0; i < 
£t
->
n_cﬁumns
; i++) {

221 c⁄° *
dñimôî
 = 
	`íglish_li°_dñimôî
(
i
, 
£t
->
n_cﬁumns
);

222 
	`ds_put_f‹m©
(&
s
, "%s\"%s\"", 
dñimôî
, 
£t
->
cﬁumns
[
i
]->
«me
);

224  
	`ds_°ól_c°r
(&
s
);

226 
	}
}

229 
	$ovsdb_cﬁumn_£t_add
(
ovsdb_cﬁumn_£t
 *
£t
,

230 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
)

232 i‡(
£t
->
n_cﬁumns
 >£t->
Æloˇãd_cﬁumns
) {

233 
£t
->
cﬁumns
 = 
	`x2ƒóŒoc
(£t->cﬁumns, &£t->
Æloˇãd_cﬁumns
,

234  *
£t
->
cﬁumns
);

236 
£t
->
cﬁumns
[£t->
n_cﬁumns
++] = 
cﬁumn
;

237 
	}
}

240 
	$ovsdb_cﬁumn_£t_add_Æl
(
ovsdb_cﬁumn_£t
 *
£t
,

241 c⁄° 
ovsdb_èbÀ
 *
èbÀ
)

243 
shash_node
 *
node
;

245 
	`SHASH_FOR_EACH
 (
node
, &
èbÀ
->
schema
->
cﬁumns
) {

246 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
 = 
node
->
d©a
;

247 
	`ovsdb_cﬁumn_£t_add
(
£t
, 
cﬁumn
);

249 
	}
}

251 
boﬁ


252 
	$ovsdb_cﬁumn_£t_c⁄èös
(c⁄° 
ovsdb_cﬁumn_£t
 *
£t
,

253 
cﬁumn_ödex
)

255 
size_t
 
i
;

257 
i
 = 0; i < 
£t
->
n_cﬁumns
; i++) {

258 i‡(
£t
->
cﬁumns
[
i
]->
ödex
 =
cﬁumn_ödex
) {

259  
åue
;

262  
Ál£
;

263 
	}
}

268 
boﬁ


269 
	$ovsdb_cﬁumn_£t_equÆs
(c⁄° 
ovsdb_cﬁumn_£t
 *
a
,

270 c⁄° 
ovsdb_cﬁumn_£t
 *
b
)

272 
size_t
 
i
;

274 i‡(
a
->
n_cﬁumns
 !
b
->n_columns) {

275  
Ál£
;

277 
i
 = 0; i < 
a
->
n_cﬁumns
; i++) {

278 i‡(
a
->
cﬁumns
[
i
] !
b
->columns[i]) {

279  
Ál£
;

282  
åue
;

283 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/ovsdb/column.h

16 #i‚de‡
OVSDB_COLUMN_H


17 
	#OVSDB_COLUMN_H
 1

	)

19 
	~<°dboﬁ.h
>

20 
	~"compûî.h
"

21 
	~"ovsdb-ty≥s.h
"

23 
	govsdb_èbÀ
;

24 
	govsdb_èbÀ_schema
;

27 
	sovsdb_cﬁumn
 {

28 
	mödex
;

29 *
	m«me
;

31 
boﬁ
 
	mmuèbÀ
;

32 
boﬁ
 
	m≥rsi°ít
;

33 
ovsdb_ty≥
 
	mty≥
;

42 
	mOVSDB_COL_UUID
 = 0,

43 
	mOVSDB_COL_VERSION
 = 1,

44 
	mOVSDB_N_STD_COLUMNS


47 
ovsdb_cﬁumn
 *
ovsdb_cﬁumn_¸óã
(

48 c⁄° *
«me
, 
boﬁ
 
muèbÀ
, boﬁ 
≥rsi°ít
,

49 c⁄° 
ovsdb_ty≥
 *);

50 
ovsdb_cﬁumn
 *
ovsdb_cﬁumn_˛⁄e
(const ovsdb_column *);

51 
ovsdb_cﬁumn_de°roy
(
ovsdb_cﬁumn
 *);

53 
ovsdb_îr‹
 *
	$ovsdb_cﬁumn_‰om_js⁄
(c⁄° 
js⁄
 *,

54 c⁄° *
«me
,

55 
ovsdb_cﬁumn
 **)

56 
WARN_UNUSED_RESULT
;

57 
js⁄
 *
	`ovsdb_cﬁumn_to_js⁄
(c⁄° 
ovsdb_cﬁumn
 *);

61 
	sovsdb_cﬁumn_£t
 {

62 c⁄° 
ovsdb_cﬁumn
 **
cﬁumns
;

63 
size_t
 
n_cﬁumns
, 
Æloˇãd_cﬁumns
;

66 
	#OVSDB_COLUMN_SET_INITIALIZER
 { 
NULL
, 0, 0 
	}

	)
}

68 
ovsdb_cﬁumn_£t_öô
(
ovsdb_cﬁumn_£t
 *);

69 
ovsdb_cﬁumn_£t_de°roy
(
ovsdb_cﬁumn_£t
 *);

70 
ovsdb_cﬁumn_£t_˛⁄e
(
ovsdb_cﬁumn_£t
 *,

71 c⁄° 
ovsdb_cﬁumn_£t
 *);

72 
ovsdb_îr‹
 *
ovsdb_cﬁumn_£t_‰om_js⁄
(

73 c⁄° 
js⁄
 *, c⁄° 
ovsdb_èbÀ_schema
 *,

74 
ovsdb_cﬁumn_£t
 *);

75 
js⁄
 *
ovsdb_cﬁumn_£t_to_js⁄
(c⁄° 
ovsdb_cﬁumn_£t
 *);

76 *
ovsdb_cﬁumn_£t_to_°rög
(c⁄° 
ovsdb_cﬁumn_£t
 *);

78 
ovsdb_cﬁumn_£t_add
(
ovsdb_cﬁumn_£t
 *,

79 c⁄° 
ovsdb_cﬁumn
 *);

80 
ovsdb_cﬁumn_£t_add_Æl
(
ovsdb_cﬁumn_£t
 *,

81 c⁄° 
ovsdb_èbÀ
 *);

82 
boﬁ
 
ovsdb_cﬁumn_£t_c⁄èös
(c⁄° 
ovsdb_cﬁumn_£t
 *,

83 
cﬁumn_ödex
);

84 
boﬁ
 
ovsdb_cﬁumn_£t_equÆs
(c⁄° 
ovsdb_cﬁumn_£t
 *,

85 c⁄° 
ovsdb_cﬁumn_£t
 *);

	@/home/lsch/mytest/openvswitch-1.9.0/ovsdb/condition.c

16 
	~<c⁄fig.h
>

18 
	~"c⁄dôi⁄.h
"

20 
	~<limôs.h
>

22 
	~"cﬁumn.h
"

23 
	~"js⁄.h
"

24 
	~"ovsdb-îr‹.h
"

25 
	~"row.h
"

26 
	~"èbÀ.h
"

28 
ovsdb_îr‹
 *

29 
	$ovsdb_fun˘i⁄_‰om_°rög
(c⁄° *
«me
, 
ovsdb_fun˘i⁄
 *
fun˘i⁄
)

31 
	#OVSDB_FUNCTION
(
ENUM
, 
NAME
) \

32 i‡(!
	`°rcmp
(
«me
, 
NAME
)) { \

33 *
fun˘i⁄
 = 
ENUM
; \

34  
NULL
; \

35 }

	)

36 
OVSDB_FUNCTIONS
;

37 #unde‡
OVSDB_FUNCTION


39  
	`ovsdb_sy¡ax_îr‹
(
NULL
, "unknown function",

40 "Nÿfun˘i⁄Çamed %s.", 
«me
);

41 
	}
}

44 
	$ovsdb_fun˘i⁄_to_°rög
(
ovsdb_fun˘i⁄
 
fun˘i⁄
)

46 
fun˘i⁄
) {

47 
	#OVSDB_FUNCTION
(
ENUM
, 
NAME
ËENUM:  NAME;

	)

48 
OVSDB_FUNCTIONS
;

49 #unde‡
OVSDB_FUNCTION


52  
NULL
;

53 
	}
}

55 
WARN_UNUSED_RESULT
 
ovsdb_îr‹
 *

56 
	$ovsdb_˛au£_‰om_js⁄
(c⁄° 
ovsdb_èbÀ_schema
 *
ts
,

57 c⁄° 
js⁄
 *json,

58 
ovsdb_symbﬁ_èbÀ
 *
symèb
,

59 
ovsdb_˛au£
 *
˛au£
)

61 c⁄° 
js⁄_¨øy
 *
¨øy
;

62 
ovsdb_îr‹
 *
îr‹
;

63 c⁄° *
fun˘i⁄_«me
;

64 c⁄° *
cﬁumn_«me
;

65 
ovsdb_ty≥
 
ty≥
;

67 i‡(
js⁄
->
ty≥
 !
JSON_ARRAY


68 || 
js⁄
->
u
.
¨øy
.
n
 != 3

69 || 
js⁄
->
u
.
¨øy
.
ñems
[0]->
ty≥
 !
JSON_STRING


70 || 
js⁄
->
u
.
¨øy
.
ñems
[1]->
ty≥
 !
JSON_STRING
) {

71  
	`ovsdb_sy¡ax_îr‹
(
js⁄
, 
NULL
, "ParseÉrror in condition.");

73 
¨øy
 = 
	`js⁄_¨øy
(
js⁄
);

75 
cﬁumn_«me
 = 
	`js⁄_°rög
(
¨øy
->
ñems
[0]);

76 
˛au£
->
cﬁumn
 = 
	`ovsdb_èbÀ_schema_gë_cﬁumn
(
ts
, 
cﬁumn_«me
);

77 i‡(!
˛au£
->
cﬁumn
) {

78  
	`ovsdb_sy¡ax_îr‹
(
js⁄
, "unknown column",

80 
cﬁumn_«me
, 
ts
->
«me
);

82 
ty≥
 = 
˛au£
->
cﬁumn
->type;

84 
fun˘i⁄_«me
 = 
	`js⁄_°rög
(
¨øy
->
ñems
[1]);

85 
îr‹
 = 
	`ovsdb_fun˘i⁄_‰om_°rög
(
fun˘i⁄_«me
, &
˛au£
->
fun˘i⁄
);

86 i‡(
îr‹
) {

87  
îr‹
;

91 
˛au£
->
fun˘i⁄
) {

92 
OVSDB_F_LT
:

93 
OVSDB_F_LE
:

94 
OVSDB_F_GT
:

95 
OVSDB_F_GE
:

99 i‡(!
	`ovsdb_ty≥_is_sˇœr
(&
ty≥
)

100 || (
ty≥
.
key
.ty≥ !
OVSDB_TYPE_INTEGER


101 && 
ty≥
.
key
.ty≥ !
OVSDB_TYPE_REAL
)) {

102 *
s
 = 
	`ovsdb_ty≥_to_íglish
(&
ty≥
);

103 
îr‹
 = 
	`ovsdb_sy¡ax_îr‹
(

104 
js⁄
, 
NULL
, "Type mismatch: \"%s\" operator mayÇot be "

106 
	`ovsdb_fun˘i⁄_to_°rög
(
˛au£
->
fun˘i⁄
),

107 
˛au£
->
cﬁumn
->
«me
, 
s
);

108 
	`‰ì
(
s
);

109  
îr‹
;

113 
OVSDB_F_EQ
:

114 
OVSDB_F_NE
:

117 
OVSDB_F_EXCLUDES
:

118 i‡(!
	`ovsdb_ty≥_is_sˇœr
(&
ty≥
)) {

119 
ty≥
.
n_mö
 = 0;

120 
ty≥
.
n_max
 = 
UINT_MAX
;

124 
OVSDB_F_INCLUDES
:

125 i‡(!
	`ovsdb_ty≥_is_sˇœr
(&
ty≥
)) {

126 
ty≥
.
n_mö
 = 0;

130  
	`ovsdb_d©um_‰om_js⁄
(&
˛au£
->
¨g
, &
ty≥
, 
¨øy
->
ñems
[2], 
symèb
);

131 
	}
}

134 
	$ovsdb_˛au£_‰ì
(
ovsdb_˛au£
 *
˛au£
)

136 
	`ovsdb_d©um_de°roy
(&
˛au£
->
¨g
, &˛au£->
cﬁumn
->
ty≥
);

137 
	}
}

140 
	$com∑ª_˛au£s_3way
(c⁄° *
a_
, c⁄° *
b_
)

142 c⁄° 
ovsdb_˛au£
 *
a
 = 
a_
;

143 c⁄° 
ovsdb_˛au£
 *
b
 = 
b_
;

145 i‡(
a
->
fun˘i⁄
 !
b
->function) {

150  
a
->
fun˘i⁄
 < 
b
->function ? -1 : 1;

151 } i‡(
a
->
cﬁumn
->
ödex
 !
b
->column->index) {

152 i‡(
a
->
cﬁumn
->
ödex
 < 
OVSDB_N_STD_COLUMNS


153 || 
b
->
cﬁumn
->
ödex
 < 
OVSDB_N_STD_COLUMNS
) {

157  
a
->
cﬁumn
->
ödex
 < 
b
->column->index ? -1 : 1;

160  
	`°rcmp
(
a
->
cﬁumn
->
«me
, 
b
->column->name);

165 
	}
}

167 
ovsdb_îr‹
 *

168 
	$ovsdb_c⁄dôi⁄_‰om_js⁄
(c⁄° 
ovsdb_èbÀ_schema
 *
ts
,

169 c⁄° 
js⁄
 *json,

170 
ovsdb_symbﬁ_èbÀ
 *
symèb
,

171 
ovsdb_c⁄dôi⁄
 *
˙d
)

173 c⁄° 
js⁄_¨øy
 *
¨øy
 = 
	`js⁄_¨øy
(
js⁄
);

174 
size_t
 
i
;

176 
˙d
->
˛au£s
 = 
	`xmÆloc
(
¨øy
->
n
 *  *cnd->clauses);

177 
˙d
->
n_˛au£s
 = 0;

178 
i
 = 0; i < 
¨øy
->
n
; i++) {

179 
ovsdb_îr‹
 *
îr‹
;

180 
îr‹
 = 
	`ovsdb_˛au£_‰om_js⁄
(
ts
, 
¨øy
->
ñems
[
i
], 
symèb
,

181 &
˙d
->
˛au£s
[
i
]);

182 i‡(
îr‹
) {

183 
	`ovsdb_c⁄dôi⁄_de°roy
(
˙d
);

184 
˙d
->
˛au£s
 = 
NULL
;

185 
˙d
->
n_˛au£s
 = 0;

186  
îr‹
;

188 
˙d
->
n_˛au£s
++;

192 
	`qs‹t
(
˙d
->
˛au£s
, cnd->
n_˛au£s
,  *cnd->clauses,

193 
com∑ª_˛au£s_3way
);

195  
NULL
;

196 
	}
}

198 
js⁄
 *

199 
	$ovsdb_˛au£_to_js⁄
(c⁄° 
ovsdb_˛au£
 *
˛au£
)

201  
	`js⁄_¨øy_¸óã_3
(

202 
	`js⁄_°rög_¸óã
(
˛au£
->
cﬁumn
->
«me
),

203 
	`js⁄_°rög_¸óã
(
	`ovsdb_fun˘i⁄_to_°rög
(
˛au£
->
fun˘i⁄
)),

204 
	`ovsdb_d©um_to_js⁄
(&
˛au£
->
¨g
, &˛au£->
cﬁumn
->
ty≥
));

205 
	}
}

207 
js⁄
 *

208 
	$ovsdb_c⁄dôi⁄_to_js⁄
(c⁄° 
ovsdb_c⁄dôi⁄
 *
˙d
)

210 
js⁄
 **
˛au£s
;

211 
size_t
 
i
;

213 
˛au£s
 = 
	`xmÆloc
(
˙d
->
n_˛au£s
 *  *clauses);

214 
i
 = 0; i < 
˙d
->
n_˛au£s
; i++) {

215 
˛au£s
[
i
] = 
	`ovsdb_˛au£_to_js⁄
(&
˙d
->clauses[i]);

217  
	`js⁄_¨øy_¸óã
(
˛au£s
, 
˙d
->
n_˛au£s
);

218 
	}
}

220 
boﬁ


221 
	$ovsdb_˛au£_evÆu©e
(c⁄° 
ovsdb_row
 *
row
,

222 c⁄° 
ovsdb_˛au£
 *
c
)

224 c⁄° 
ovsdb_d©um
 *
fõld
 = &
row
->
fõlds
[
c
->
cﬁumn
->
ödex
];

225 c⁄° 
ovsdb_d©um
 *
¨g
 = &
c
->arg;

226 c⁄° 
ovsdb_ty≥
 *
ty≥
 = &
c
->
cﬁumn
->type;

228 i‡(
	`ovsdb_ty≥_is_sˇœr
(
ty≥
)) {

229 
cmp
 = 
	`ovsdb_©om_com∑ª_3way
(&
fõld
->
keys
[0], &
¨g
->keys[0],

230 
ty≥
->
key
.type);

231 
c
->
fun˘i⁄
) {

232 
OVSDB_F_LT
:

233  
cmp
 < 0;

234 
OVSDB_F_LE
:

235  
cmp
 <= 0;

236 
OVSDB_F_EQ
:

237 
OVSDB_F_INCLUDES
:

238  
cmp
 == 0;

239 
OVSDB_F_NE
:

240 
OVSDB_F_EXCLUDES
:

241  
cmp
 != 0;

242 
OVSDB_F_GE
:

243  
cmp
 >= 0;

244 
OVSDB_F_GT
:

245  
cmp
 > 0;

248 
c
->
fun˘i⁄
) {

249 
OVSDB_F_EQ
:

250  
	`ovsdb_d©um_equÆs
(
fõld
, 
¨g
, 
ty≥
);

251 
OVSDB_F_NE
:

252  !
	`ovsdb_d©um_equÆs
(
fõld
, 
¨g
, 
ty≥
);

253 
OVSDB_F_INCLUDES
:

254  
	`ovsdb_d©um_ö˛udes_Æl
(
¨g
, 
fõld
, 
ty≥
);

255 
OVSDB_F_EXCLUDES
:

256  
	`ovsdb_d©um_ex˛udes_Æl
(
¨g
, 
fõld
, 
ty≥
);

257 
OVSDB_F_LT
:

258 
OVSDB_F_LE
:

259 
OVSDB_F_GE
:

260 
OVSDB_F_GT
:

261 
	`NOT_REACHED
();

265 
	`NOT_REACHED
();

266 
	}
}

268 
boﬁ


269 
	$ovsdb_c⁄dôi⁄_evÆu©e
(c⁄° 
ovsdb_row
 *
row
,

270 c⁄° 
ovsdb_c⁄dôi⁄
 *
˙d
)

272 
size_t
 
i
;

274 
i
 = 0; i < 
˙d
->
n_˛au£s
; i++) {

275 i‡(!
	`ovsdb_˛au£_evÆu©e
(
row
, &
˙d
->
˛au£s
[
i
])) {

276  
Ál£
;

280  
åue
;

281 
	}
}

284 
	$ovsdb_c⁄dôi⁄_de°roy
(
ovsdb_c⁄dôi⁄
 *
˙d
)

286 
size_t
 
i
;

288 
i
 = 0; i < 
˙d
->
n_˛au£s
; i++) {

289 
	`ovsdb_˛au£_‰ì
(&
˙d
->
˛au£s
[
i
]);

291 
	`‰ì
(
˙d
->
˛au£s
);

292 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/ovsdb/condition.h

16 #i‚de‡
OVSDB_CONDITION_H


17 
	#OVSDB_CONDITION_H
 1

	)

19 
	~<°ddef.h
>

20 
	~"compûî.h
"

21 
	~"ovsdb-d©a.h
"

23 
	gjs⁄
;

24 
	govsdb_èbÀ_schema
;

25 
	govsdb_row
;

29 
	#OVSDB_FUNCTIONS
 \

30 
	`OVSDB_FUNCTION
(
OVSDB_F_EQ
, "==") \

31 
	`OVSDB_FUNCTION
(
OVSDB_F_INCLUDES
, "includes") \

32 
	`OVSDB_FUNCTION
(
OVSDB_F_LE
, "<=") \

33 
	`OVSDB_FUNCTION
(
OVSDB_F_LT
, "<") \

34 
	`OVSDB_FUNCTION
(
OVSDB_F_GE
, ">=") \

35 
	`OVSDB_FUNCTION
(
OVSDB_F_GT
, ">") \

36 
	`OVSDB_FUNCTION
(
OVSDB_F_EXCLUDES
, "excludes") \

37 
	`OVSDB_FUNCTION
(
OVSDB_F_NE
, "!=")

	)

39 
	eovsdb_fun˘i⁄
 {

40 
	#OVSDB_FUNCTION
(
ENUM
, 
NAME
ËENUM,

	)

41 
	mOVSDB_FUNCTIONS


42 #unde‡
OVSDB_FUNCTION


45 
ovsdb_îr‹
 *
	$ovsdb_fun˘i⁄_‰om_°rög
(const *,

46 
ovsdb_fun˘i⁄
 *)

47 
WARN_UNUSED_RESULT
;

48 c⁄° *
	`ovsdb_fun˘i⁄_to_°rög
(
ovsdb_fun˘i⁄
);

50 
	sovsdb_˛au£
 {

51 
ovsdb_fun˘i⁄
 
fun˘i⁄
;

52 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
;

53 
ovsdb_d©um
 
¨g
;

56 
	sovsdb_c⁄dôi⁄
 {

57 
ovsdb_˛au£
 *
˛au£s
;

58 
size_t
 
n_˛au£s
;

61 
	#OVSDB_CONDITION_INITIALIZER
 { 
NULL
, 0 
	}

	)
}

63 
ovsdb_îr‹
 *
	$ovsdb_c⁄dôi⁄_‰om_js⁄
(

64 c⁄° 
ovsdb_èbÀ_schema
 *,

65 c⁄° 
js⁄
 *, 
ovsdb_symbﬁ_èbÀ
 *,

66 
ovsdb_c⁄dôi⁄
 *Ë
WARN_UNUSED_RESULT
;

67 
js⁄
 *
	`ovsdb_c⁄dôi⁄_to_js⁄
(c⁄° 
ovsdb_c⁄dôi⁄
 *);

68 
	`ovsdb_c⁄dôi⁄_de°roy
(
ovsdb_c⁄dôi⁄
 *);

69 
boﬁ
 
	`ovsdb_c⁄dôi⁄_evÆu©e
(c⁄° 
ovsdb_row
 *,

70 c⁄° 
ovsdb_c⁄dôi⁄
 *);

	@/home/lsch/mytest/openvswitch-1.9.0/ovsdb/execution.c

16 
	~<c⁄fig.h
>

18 
	~<as£π.h
>

19 
	~<limôs.h
>

21 
	~"cﬁumn.h
"

22 
	~"c⁄dôi⁄.h
"

23 
	~"fûe.h
"

24 
	~"js⁄.h
"

25 
	~"muèti⁄.h
"

26 
	~"ovsdb-d©a.h
"

27 
	~"ovsdb-îr‹.h
"

28 
	~"ovsdb-∑r£r.h
"

29 
	~"ovsdb.h
"

30 
	~"quîy.h
"

31 
	~"row.h
"

32 
	~"£rvî.h
"

33 
	~"èbÀ.h
"

34 
	~"timevÆ.h
"

35 
	~"å™ß˘i⁄.h
"

37 
	sovsdb_executi⁄
 {

38 
ovsdb
 *
	mdb
;

39 c⁄° 
ovsdb_£ssi⁄
 *
	m£ssi⁄
;

40 
ovsdb_txn
 *
	mtxn
;

41 
ovsdb_symbﬁ_èbÀ
 *
	msymèb
;

42 
boﬁ
 
	mduøbÀ
;

45 
	mñ≠£d_m£c
;

46 
	mtimeout_m£c
;

49 
ovsdb_îr‹
 *
	tovsdb_›î©i⁄_execut‹
(
	tovsdb_executi⁄
 *,

50 
	tovsdb_∑r£r
 *,

51 
	tjs⁄
 *
	tªsu…
);

53 
ovsdb_›î©i⁄_execut‹
 
	govsdb_execuã_ö£π
;

54 
ovsdb_›î©i⁄_execut‹
 
	govsdb_execuã_£À˘
;

55 
ovsdb_›î©i⁄_execut‹
 
	govsdb_execuã_upd©e
;

56 
ovsdb_›î©i⁄_execut‹
 
	govsdb_execuã_muèã
;

57 
ovsdb_›î©i⁄_execut‹
 
	govsdb_execuã_dñëe
;

58 
ovsdb_›î©i⁄_execut‹
 
	govsdb_execuã_waô
;

59 
ovsdb_›î©i⁄_execut‹
 
	govsdb_execuã_commô
;

60 
ovsdb_›î©i⁄_execut‹
 
	govsdb_execuã_ab‹t
;

61 
ovsdb_›î©i⁄_execut‹
 
	govsdb_execuã_commít
;

62 
ovsdb_›î©i⁄_execut‹
 
	govsdb_execuã_as£π
;

64 
ovsdb_›î©i⁄_execut‹
 *

65 
	$lookup_execut‹
(c⁄° *
«me
)

67 
	sovsdb_›î©i⁄
 {

68 c⁄° *
«me
;

69 
ovsdb_›î©i⁄_execut‹
 *
execut‹
;

72 c⁄° 
ovsdb_›î©i⁄
 
›î©i⁄s
[] = {

73 { "ö£π", 
ovsdb_execuã_ö£π
 },

74 { "£À˘", 
ovsdb_execuã_£À˘
 },

75 { "upd©e", 
ovsdb_execuã_upd©e
 },

76 { "muèã", 
ovsdb_execuã_muèã
 },

77 { "dñëe", 
ovsdb_execuã_dñëe
 },

78 { "waô", 
ovsdb_execuã_waô
 },

79 { "commô", 
ovsdb_execuã_commô
 },

80 { "ab‹t", 
ovsdb_execuã_ab‹t
 },

81 { "commít", 
ovsdb_execuã_commít
 },

82 { "as£π", 
ovsdb_execuã_as£π
 },

85 
size_t
 
i
;

87 
i
 = 0; i < 
	`ARRAY_SIZE
(
›î©i⁄s
); i++) {

88 c⁄° 
ovsdb_›î©i⁄
 *
c
 = &
›î©i⁄s
[
i
];

89 i‡(!
	`°rcmp
(
c
->
«me
,Çame)) {

90  
c
->
execut‹
;

93  
NULL
;

94 
	}
}

96 
js⁄
 *

97 
	$ovsdb_execuã
(
ovsdb
 *
db
, c⁄° 
ovsdb_£ssi⁄
 *
£ssi⁄
,

98 c⁄° 
js⁄
 *
∑øms
,

99 
ñ≠£d_m£c
, *
timeout_m£c
)

101 
ovsdb_executi⁄
 
x
;

102 
ovsdb_îr‹
 *
îr‹
;

103 
js⁄
 *
ªsu…s
;

104 
size_t
 
n_›î©i⁄s
;

105 
size_t
 
i
;

107 i‡(
∑øms
->
ty≥
 !
JSON_ARRAY


108 || !
∑øms
->
u
.
¨øy
.
n


109 || 
∑øms
->
u
.
¨øy
.
ñems
[0]->
ty≥
 !
JSON_STRING


110 || 
	`°rcmp
(
∑øms
->
u
.
¨øy
.
ñems
[0]->u.
°rög
, 
db
->
schema
->
«me
)) {

111 i‡(
∑øms
->
ty≥
 !
JSON_ARRAY
) {

112 
îr‹
 = 
	`ovsdb_sy¡ax_îr‹
(
∑øms
, 
NULL
, "arrayÉxpected");

114 
îr‹
 = 
	`ovsdb_sy¡ax_îr‹
(
∑øms
, 
NULL
, "databaseÇameÉxpected "

118 
ªsu…s
 = 
	`ovsdb_îr‹_to_js⁄
(
îr‹
);

119 
	`ovsdb_îr‹_de°roy
(
îr‹
);

120  
ªsu…s
;

123 
x
.
db
 = db;

124 
x
.
£ssi⁄
 = session;

125 
x
.
txn
 = 
	`ovsdb_txn_¸óã
(
db
);

126 
x
.
symèb
 = 
	`ovsdb_symbﬁ_èbÀ_¸óã
();

127 
x
.
duøbÀ
 = 
Ál£
;

128 
x
.
ñ≠£d_m£c
 =Élapsed_msec;

129 
x
.
timeout_m£c
 = 
LLONG_MAX
;

130 
ªsu…s
 = 
NULL
;

132 
ªsu…s
 = 
	`js⁄_¨øy_¸óã_em±y
();

133 
n_›î©i⁄s
 = 
∑øms
->
u
.
¨øy
.
n
 - 1;

134 
îr‹
 = 
NULL
;

135 
i
 = 1; i <
n_›î©i⁄s
; i++) {

136 
js⁄
 *
›î©i⁄
 = 
∑øms
->
u
.
¨øy
.
ñems
[
i
];

137 
ovsdb_îr‹
 *
∑r£_îr‹
;

138 
ovsdb_∑r£r
 
∑r£r
;

139 
js⁄
 *
ªsu…
;

140 c⁄° 
js⁄
 *
›
;

143 
	`ovsdb_∑r£r_öô
(&
∑r£r
, 
›î©i⁄
,

144 "ovsdb o≥øti⁄ %zu o‡%zu", 
i
, 
n_›î©i⁄s
);

145 
›
 = 
	`ovsdb_∑r£r_membî
(&
∑r£r
, "›", 
OP_ID
);

146 
ªsu…
 = 
	`js⁄_obje˘_¸óã
();

147 i‡(
›
) {

148 c⁄° *
›_«me
 = 
	`js⁄_°rög
(
›
);

149 
ovsdb_›î©i⁄_execut‹
 *
execut‹
 = 
	`lookup_execut‹
(
›_«me
);

150 i‡(
execut‹
) {

151 
îr‹
 = 
	`execut‹
(&
x
, &
∑r£r
, 
ªsu…
);

153 
	`ovsdb_∑r£r_øi£_îr‹
(&
∑r£r
, "No operation \"%s\"",

154 
›_«me
);

157 
	`as£π
(
	`ovsdb_∑r£r_has_îr‹
(&
∑r£r
));

162 
∑r£_îr‹
 = 
	`ovsdb_∑r£r_föish
(&
∑r£r
);

163 i‡(
∑r£_îr‹
) {

164 
	`ovsdb_îr‹_de°roy
(
îr‹
);

165 
îr‹
 = 
∑r£_îr‹
;

167 i‡(
îr‹
) {

168 
	`js⁄_de°roy
(
ªsu…
);

169 
ªsu…
 = 
	`ovsdb_îr‹_to_js⁄
(
îr‹
);

171 i‡(
îr‹
 && !
	`°rcmp
(
	`ovsdb_îr‹_gë_èg
(error), "not supported")

172 && 
timeout_m£c
) {

173 
	`ovsdb_txn_ab‹t
(
x
.
txn
);

174 *
timeout_m£c
 = 
x
.timeout_msec;

176 
	`js⁄_de°roy
(
ªsu…
);

177 
	`js⁄_de°roy
(
ªsu…s
);

178 
ªsu…s
 = 
NULL
;

179 
exô
;

183 
	`js⁄_¨øy_add
(
ªsu…s
, 
ªsu…
);

184 i‡(
îr‹
) {

189 i‡(!
îr‹
) {

190 
îr‹
 = 
	`ovsdb_txn_commô
(
x
.
txn
, x.
duøbÀ
);

191 i‡(
îr‹
) {

192 
	`js⁄_¨øy_add
(
ªsu…s
, 
	`ovsdb_îr‹_to_js⁄
(
îr‹
));

195 
	`ovsdb_txn_ab‹t
(
x
.
txn
);

198 
	`js⁄_¨øy
(
ªsu…s
)->
n
 < 
n_›î©i⁄s
) {

199 
	`js⁄_¨øy_add
(
ªsu…s
, 
	`js⁄_nuŒ_¸óã
());

202 
exô
:

203 
	`ovsdb_îr‹_de°roy
(
îr‹
);

204 
	`ovsdb_symbﬁ_èbÀ_de°roy
(
x
.
symèb
);

206  
ªsu…s
;

207 
	}
}

209 
ovsdb_îr‹
 *

210 
	$ovsdb_execuã_commô
(
ovsdb_executi⁄
 *
x
, 
ovsdb_∑r£r
 *
∑r£r
,

211 
js⁄
 *
ªsu…
 
OVS_UNUSED
)

213 c⁄° 
js⁄
 *
duøbÀ
;

215 
duøbÀ
 = 
	`ovsdb_∑r£r_membî
(
∑r£r
, "duøbÀ", 
OP_BOOLEAN
);

216 i‡(
duøbÀ
 && 
	`js⁄_boﬁón
(durable)) {

217 
x
->
duøbÀ
 = 
åue
;

219  
NULL
;

220 
	}
}

222 
ovsdb_îr‹
 *

223 
	$ovsdb_execuã_ab‹t
(
ovsdb_executi⁄
 *
x
 
OVS_UNUSED
,

224 
ovsdb_∑r£r
 *
∑r£r
 
OVS_UNUSED
,

225 
js⁄
 *
ªsu…
 
OVS_UNUSED
)

227  
	`ovsdb_îr‹
("aborted", "aborted byÑequest");

228 
	}
}

230 
ovsdb_èbÀ
 *

231 
	$∑r£_èbÀ
(
ovsdb_executi⁄
 *
x
,

232 
ovsdb_∑r£r
 *
∑r£r
, c⁄° *
membî
)

234 
ovsdb_èbÀ
 *
èbÀ
;

235 c⁄° *
èbÀ_«me
;

236 c⁄° 
js⁄
 *json;

238 
js⁄
 = 
	`ovsdb_∑r£r_membî
(
∑r£r
, 
membî
, 
OP_ID
);

239 i‡(!
js⁄
) {

240  
NULL
;

242 
èbÀ_«me
 = 
	`js⁄_°rög
(
js⁄
);

244 
èbÀ
 = 
	`shash_föd_d©a
(&
x
->
db
->
èbÀs
, 
èbÀ_«me
);

245 i‡(!
èbÀ
) {

246 
	`ovsdb_∑r£r_øi£_îr‹
(
∑r£r
, "NÿèbÀÇamed %s.", 
èbÀ_«me
);

248  
èbÀ
;

249 
	}
}

251 
WARN_UNUSED_RESULT
 
ovsdb_îr‹
 *

252 
	$∑r£_row
(c⁄° 
js⁄
 *js⁄, c⁄° 
ovsdb_èbÀ
 *
èbÀ
,

253 
ovsdb_symbﬁ_èbÀ
 *
symèb
,

254 
ovsdb_row
 **
rowp
, 
ovsdb_cﬁumn_£t
 *
cﬁumns
)

256 
ovsdb_îr‹
 *
îr‹
;

257 
ovsdb_row
 *
row
;

259 *
rowp
 = 
NULL
;

261 i‡(!
èbÀ
) {

262  
	`OVSDB_BUG
("nullÅable");

264 i‡(!
js⁄
) {

265  
	`OVSDB_BUG
("nullÑow");

268 
row
 = 
	`ovsdb_row_¸óã
(
èbÀ
);

269 
îr‹
 = 
	`ovsdb_row_‰om_js⁄
(
row
, 
js⁄
, 
symèb
, 
cﬁumns
);

270 i‡(
îr‹
) {

271 
	`ovsdb_row_de°roy
(
row
);

272  
îr‹
;

274 *
rowp
 = 
row
;

275  
NULL
;

277 
	}
}

279 
ovsdb_îr‹
 *

280 
	$ovsdb_execuã_ö£π
(
ovsdb_executi⁄
 *
x
, 
ovsdb_∑r£r
 *
∑r£r
,

281 
js⁄
 *
ªsu…
)

283 
ovsdb_èbÀ
 *
èbÀ
;

284 
ovsdb_row
 *
row
 = 
NULL
;

285 c⁄° 
js⁄
 *
uuid_«me
, *
row_js⁄
;

286 
ovsdb_îr‹
 *
îr‹
;

287 
uuid
 
row_uuid
;

289 
èbÀ
 = 
	`∑r£_èbÀ
(
x
, 
∑r£r
, "table");

290 
uuid_«me
 = 
	`ovsdb_∑r£r_membî
(
∑r£r
, "uuid-«me", 
OP_ID
 | 
OP_OPTIONAL
);

291 
row_js⁄
 = 
	`ovsdb_∑r£r_membî
(
∑r£r
, "row", 
OP_OBJECT
);

292 
îr‹
 = 
	`ovsdb_∑r£r_gë_îr‹
(
∑r£r
);

293 i‡(
îr‹
) {

294  
îr‹
;

297 i‡(
uuid_«me
) {

298 
ovsdb_symbﬁ
 *
symbﬁ
;

300 
symbﬁ
 = 
	`ovsdb_symbﬁ_èbÀ_ö£π
(
x
->
symèb
, 
	`js⁄_°rög
(
uuid_«me
));

301 i‡(
symbﬁ
->
¸óãd
) {

302  
	`ovsdb_sy¡ax_îr‹
(
uuid_«me
, "duplicate uuid-name",

306 
row_uuid
 = 
symbﬁ
->
uuid
;

307 
symbﬁ
->
¸óãd
 = 
åue
;

309 
	`uuid_gíî©e
(&
row_uuid
);

312 i‡(!
îr‹
) {

313 
îr‹
 = 
	`∑r£_row
(
row_js⁄
, 
èbÀ
, 
x
->
symèb
, &
row
, 
NULL
);

315 i‡(!
îr‹
) {

321 c⁄° 
shash_node
 *
node
;

323 
	`SHASH_FOR_EACH
 (
node
, &
èbÀ
->
schema
->
cﬁumns
) {

324 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
 = 
node
->
d©a
;

325 c⁄° 
ovsdb_d©um
 *
d©um
 = &
row
->
fõlds
[
cﬁumn
->
ödex
];

331 i‡(
d©um
->
n
 == 1) {

332 
îr‹
 = 
	`ovsdb_d©um_check_c⁄°øöts
(
d©um
, &
cﬁumn
->
ty≥
);

333 i‡(
îr‹
) {

334 
	`ovsdb_row_de°roy
(
row
);

340 i‡(!
îr‹
) {

341 *
	`ovsdb_row_gë_uuid_rw
(
row
Ë
row_uuid
;

342 
	`ovsdb_txn_row_ö£π
(
x
->
txn
, 
row
);

343 
	`js⁄_obje˘_put
(
ªsu…
, "uuid",

344 
	`ovsdb_d©um_to_js⁄
(&
row
->
fõlds
[
OVSDB_COL_UUID
],

345 &
ovsdb_ty≥_uuid
));

347  
îr‹
;

348 
	}
}

350 
ovsdb_îr‹
 *

351 
	$ovsdb_execuã_£À˘
(
ovsdb_executi⁄
 *
x
, 
ovsdb_∑r£r
 *
∑r£r
,

352 
js⁄
 *
ªsu…
)

354 
ovsdb_èbÀ
 *
èbÀ
;

355 c⁄° 
js⁄
 *
whîe
, *
cﬁumns_js⁄
, *
s‹t_js⁄
;

356 
ovsdb_c⁄dôi⁄
 
c⁄dôi⁄
 = 
OVSDB_CONDITION_INITIALIZER
;

357 
ovsdb_cﬁumn_£t
 
cﬁumns
 = 
OVSDB_COLUMN_SET_INITIALIZER
;

358 
ovsdb_cﬁumn_£t
 
s‹t
 = 
OVSDB_COLUMN_SET_INITIALIZER
;

359 
ovsdb_îr‹
 *
îr‹
;

361 
èbÀ
 = 
	`∑r£_èbÀ
(
x
, 
∑r£r
, "table");

362 
whîe
 = 
	`ovsdb_∑r£r_membî
(
∑r£r
, "whîe", 
OP_ARRAY
);

363 
cﬁumns_js⁄
 = 
	`ovsdb_∑r£r_membî
(
∑r£r
, "columns",

364 
OP_ARRAY
 | 
OP_OPTIONAL
);

365 
s‹t_js⁄
 = 
	`ovsdb_∑r£r_membî
(
∑r£r
, "s‹t", 
OP_ARRAY
 | 
OP_OPTIONAL
);

367 
îr‹
 = 
	`ovsdb_∑r£r_gë_îr‹
(
∑r£r
);

368 i‡(!
îr‹
) {

369 
îr‹
 = 
	`ovsdb_c⁄dôi⁄_‰om_js⁄
(
èbÀ
->
schema
, 
whîe
, 
x
->
symèb
,

370 &
c⁄dôi⁄
);

372 i‡(!
îr‹
) {

373 
îr‹
 = 
	`ovsdb_cﬁumn_£t_‰om_js⁄
(
cﬁumns_js⁄
, 
èbÀ
->
schema
,

374 &
cﬁumns
);

376 i‡(!
îr‹
) {

377 
îr‹
 = 
	`ovsdb_cﬁumn_£t_‰om_js⁄
(
s‹t_js⁄
, 
èbÀ
->
schema
, &
s‹t
);

379 i‡(!
îr‹
) {

380 
ovsdb_row_£t
 
rows
 = 
OVSDB_ROW_SET_INITIALIZER
;

382 
	`ovsdb_quîy_di°ö˘
(
èbÀ
, &
c⁄dôi⁄
, &
cﬁumns
, &
rows
);

383 
	`ovsdb_row_£t_s‹t
(&
rows
, &
s‹t
);

384 
	`js⁄_obje˘_put
(
ªsu…
, "rows",

385 
	`ovsdb_row_£t_to_js⁄
(&
rows
, &
cﬁumns
));

387 
	`ovsdb_row_£t_de°roy
(&
rows
);

390 
	`ovsdb_cﬁumn_£t_de°roy
(&
cﬁumns
);

391 
	`ovsdb_cﬁumn_£t_de°roy
(&
s‹t
);

392 
	`ovsdb_c⁄dôi⁄_de°roy
(&
c⁄dôi⁄
);

394  
îr‹
;

395 
	}
}

397 
	supd©e_row_cbd©a
 {

398 
size_t
 
	mn_m©ches
;

399 
ovsdb_txn
 *
	mtxn
;

400 c⁄° 
ovsdb_row
 *
	mrow
;

401 c⁄° 
ovsdb_cﬁumn_£t
 *
	mcﬁumns
;

404 
boﬁ


405 
	$upd©e_row_cb
(c⁄° 
ovsdb_row
 *
row
, *
ur_
)

407 
upd©e_row_cbd©a
 *
ur
 = 
ur_
;

409 
ur
->
n_m©ches
++;

410 i‡(!
	`ovsdb_row_equÆ_cﬁumns
(
row
, 
ur
->row, ur->
cﬁumns
)) {

411 
	`ovsdb_row_upd©e_cﬁumns
(
	`ovsdb_txn_row_modify
(
ur
->
txn
, 
row
),

412 
ur
->
row
, ur->
cﬁumns
);

415  
åue
;

416 
	}
}

418 
ovsdb_îr‹
 *

419 
	$ovsdb_execuã_upd©e
(
ovsdb_executi⁄
 *
x
, 
ovsdb_∑r£r
 *
∑r£r
,

420 
js⁄
 *
ªsu…
)

422 
ovsdb_èbÀ
 *
èbÀ
;

423 c⁄° 
js⁄
 *
whîe
, *
row_js⁄
;

424 
ovsdb_c⁄dôi⁄
 
c⁄dôi⁄
 = 
OVSDB_CONDITION_INITIALIZER
;

425 
ovsdb_cﬁumn_£t
 
cﬁumns
 = 
OVSDB_COLUMN_SET_INITIALIZER
;

426 
ovsdb_row
 *
row
 = 
NULL
;

427 
upd©e_row_cbd©a
 
ur
;

428 
ovsdb_îr‹
 *
îr‹
;

430 
èbÀ
 = 
	`∑r£_èbÀ
(
x
, 
∑r£r
, "table");

431 
whîe
 = 
	`ovsdb_∑r£r_membî
(
∑r£r
, "whîe", 
OP_ARRAY
);

432 
row_js⁄
 = 
	`ovsdb_∑r£r_membî
(
∑r£r
, "row", 
OP_OBJECT
);

433 
îr‹
 = 
	`ovsdb_∑r£r_gë_îr‹
(
∑r£r
);

434 i‡(!
îr‹
) {

435 
îr‹
 = 
	`∑r£_row
(
row_js⁄
, 
èbÀ
, 
x
->
symèb
, &
row
, &
cﬁumns
);

437 i‡(!
îr‹
) {

438 
size_t
 
i
;

440 
i
 = 0; i < 
cﬁumns
.
n_cﬁumns
; i++) {

441 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
 = 
cﬁumns
.cﬁumns[
i
];

443 i‡(!
cﬁumn
->
muèbÀ
) {

444 
îr‹
 = 
	`ovsdb_sy¡ax_îr‹
(
∑r£r
->
js⁄
,

448 
cﬁumn
->
«me
, 
èbÀ
->
schema
->name);

453 i‡(!
îr‹
) {

454 
îr‹
 = 
	`ovsdb_c⁄dôi⁄_‰om_js⁄
(
èbÀ
->
schema
, 
whîe
, 
x
->
symèb
,

455 &
c⁄dôi⁄
);

457 i‡(!
îr‹
) {

458 
ur
.
n_m©ches
 = 0;

459 
ur
.
txn
 = 
x
->txn;

460 
ur
.
row
 =Ñow;

461 
ur
.
cﬁumns
 = &columns;

462 
	`ovsdb_quîy
(
èbÀ
, &
c⁄dôi⁄
, 
upd©e_row_cb
, &
ur
);

463 
	`js⁄_obje˘_put
(
ªsu…
, "cou¡", 
	`js⁄_öãgî_¸óã
(
ur
.
n_m©ches
));

466 
	`ovsdb_row_de°roy
(
row
);

467 
	`ovsdb_cﬁumn_£t_de°roy
(&
cﬁumns
);

468 
	`ovsdb_c⁄dôi⁄_de°roy
(&
c⁄dôi⁄
);

470  
îr‹
;

471 
	}
}

473 
	smuèã_row_cbd©a
 {

474 
size_t
 
	mn_m©ches
;

475 
ovsdb_txn
 *
	mtxn
;

476 c⁄° 
ovsdb_muèti⁄_£t
 *
	mmuèti⁄s
;

477 
ovsdb_îr‹
 **
	mîr‹
;

480 
boﬁ


481 
	$muèã_row_cb
(c⁄° 
ovsdb_row
 *
row
, *
mr_
)

483 
muèã_row_cbd©a
 *
mr
 = 
mr_
;

485 
mr
->
n_m©ches
++;

486 *
mr
->
îr‹
 = 
	`ovsdb_muèti⁄_£t_execuã
(
	`ovsdb_txn_row_modify
(mr->
txn
, 
row
),

487 
mr
->
muèti⁄s
);

488  *
mr
->
îr‹
 =
NULL
;

489 
	}
}

491 
ovsdb_îr‹
 *

492 
	$ovsdb_execuã_muèã
(
ovsdb_executi⁄
 *
x
, 
ovsdb_∑r£r
 *
∑r£r
,

493 
js⁄
 *
ªsu…
)

495 
ovsdb_èbÀ
 *
èbÀ
;

496 c⁄° 
js⁄
 *
whîe
;

497 c⁄° 
js⁄
 *
muèti⁄s_js⁄
;

498 
ovsdb_c⁄dôi⁄
 
c⁄dôi⁄
 = 
OVSDB_CONDITION_INITIALIZER
;

499 
ovsdb_muèti⁄_£t
 
muèti⁄s
 = 
OVSDB_MUTATION_SET_INITIALIZER
;

500 
ovsdb_row
 *
row
 = 
NULL
;

501 
muèã_row_cbd©a
 
mr
;

502 
ovsdb_îr‹
 *
îr‹
;

504 
èbÀ
 = 
	`∑r£_èbÀ
(
x
, 
∑r£r
, "table");

505 
whîe
 = 
	`ovsdb_∑r£r_membî
(
∑r£r
, "whîe", 
OP_ARRAY
);

506 
muèti⁄s_js⁄
 = 
	`ovsdb_∑r£r_membî
(
∑r£r
, "muèti⁄s", 
OP_ARRAY
);

507 
îr‹
 = 
	`ovsdb_∑r£r_gë_îr‹
(
∑r£r
);

508 i‡(!
îr‹
) {

509 
îr‹
 = 
	`ovsdb_muèti⁄_£t_‰om_js⁄
(
èbÀ
->
schema
, 
muèti⁄s_js⁄
,

510 
x
->
symèb
, &
muèti⁄s
);

512 i‡(!
îr‹
) {

513 
îr‹
 = 
	`ovsdb_c⁄dôi⁄_‰om_js⁄
(
èbÀ
->
schema
, 
whîe
, 
x
->
symèb
,

514 &
c⁄dôi⁄
);

516 i‡(!
îr‹
) {

517 
mr
.
n_m©ches
 = 0;

518 
mr
.
txn
 = 
x
->txn;

519 
mr
.
muèti⁄s
 = &mutations;

520 
mr
.
îr‹
 = &error;

521 
	`ovsdb_quîy
(
èbÀ
, &
c⁄dôi⁄
, 
muèã_row_cb
, &
mr
);

522 
	`js⁄_obje˘_put
(
ªsu…
, "cou¡", 
	`js⁄_öãgî_¸óã
(
mr
.
n_m©ches
));

525 
	`ovsdb_row_de°roy
(
row
);

526 
	`ovsdb_muèti⁄_£t_de°roy
(&
muèti⁄s
);

527 
	`ovsdb_c⁄dôi⁄_de°roy
(&
c⁄dôi⁄
);

529  
îr‹
;

530 
	}
}

532 
	sdñëe_row_cbd©a
 {

533 
size_t
 
	mn_m©ches
;

534 c⁄° 
ovsdb_èbÀ
 *
	mèbÀ
;

535 
ovsdb_txn
 *
	mtxn
;

538 
boﬁ


539 
	$dñëe_row_cb
(c⁄° 
ovsdb_row
 *
row
, *
dr_
)

541 
dñëe_row_cbd©a
 *
dr
 = 
dr_
;

543 
dr
->
n_m©ches
++;

544 
	`ovsdb_txn_row_dñëe
(
dr
->
txn
, 
row
);

546  
åue
;

547 
	}
}

549 
ovsdb_îr‹
 *

550 
	$ovsdb_execuã_dñëe
(
ovsdb_executi⁄
 *
x
, 
ovsdb_∑r£r
 *
∑r£r
,

551 
js⁄
 *
ªsu…
)

553 
ovsdb_èbÀ
 *
èbÀ
;

554 c⁄° 
js⁄
 *
whîe
;

555 
ovsdb_c⁄dôi⁄
 
c⁄dôi⁄
 = 
OVSDB_CONDITION_INITIALIZER
;

556 
ovsdb_îr‹
 *
îr‹
;

558 
whîe
 = 
	`ovsdb_∑r£r_membî
(
∑r£r
, "whîe", 
OP_ARRAY
);

559 
èbÀ
 = 
	`∑r£_èbÀ
(
x
, 
∑r£r
, "table");

560 
îr‹
 = 
	`ovsdb_∑r£r_gë_îr‹
(
∑r£r
);

561 i‡(!
îr‹
) {

562 
îr‹
 = 
	`ovsdb_c⁄dôi⁄_‰om_js⁄
(
èbÀ
->
schema
, 
whîe
, 
x
->
symèb
,

563 &
c⁄dôi⁄
);

565 i‡(!
îr‹
) {

566 
dñëe_row_cbd©a
 
dr
;

568 
dr
.
n_m©ches
 = 0;

569 
dr
.
èbÀ
 =Åable;

570 
dr
.
txn
 = 
x
->txn;

571 
	`ovsdb_quîy
(
èbÀ
, &
c⁄dôi⁄
, 
dñëe_row_cb
, &
dr
);

573 
	`js⁄_obje˘_put
(
ªsu…
, "cou¡", 
	`js⁄_öãgî_¸óã
(
dr
.
n_m©ches
));

576 
	`ovsdb_c⁄dôi⁄_de°roy
(&
c⁄dôi⁄
);

578  
îr‹
;

579 
	}
}

581 
	swaô_auxd©a
 {

582 
ovsdb_row_hash
 *
	ma˘uÆ
;

583 
ovsdb_row_hash
 *
	mex≥˘ed
;

584 
boﬁ
 *
	mequÆ
;

587 
boﬁ


588 
	$ovsdb_execuã_waô_quîy_cb
(c⁄° 
ovsdb_row
 *
row
, *
aux_
)

590 
waô_auxd©a
 *
aux
 = 
aux_
;

592 i‡(
	`ovsdb_row_hash_c⁄èös
(
aux
->
ex≥˘ed
, 
row
)) {

593 
	`ovsdb_row_hash_ö£π
(
aux
->
a˘uÆ
, 
row
);

594  
åue
;

599 *
aux
->
equÆ
 = 
Ál£
;

600  
Ál£
;

602 
	}
}

604 
ovsdb_îr‹
 *

605 
	$ovsdb_execuã_waô
(
ovsdb_executi⁄
 *
x
, 
ovsdb_∑r£r
 *
∑r£r
,

606 
js⁄
 *
ªsu…
 
OVS_UNUSED
)

608 
ovsdb_èbÀ
 *
èbÀ
;

609 c⁄° 
js⁄
 *
timeout
, *
whîe
, *
cﬁumns_js⁄
, *
u¡û
, *
rows
;

610 
ovsdb_c⁄dôi⁄
 
c⁄dôi⁄
 = 
OVSDB_CONDITION_INITIALIZER
;

611 
ovsdb_cﬁumn_£t
 
cﬁumns
 = 
OVSDB_COLUMN_SET_INITIALIZER
;

612 
ovsdb_row_hash
 
ex≥˘ed
 = 
	`OVSDB_ROW_HASH_INITIALIZER
(expected);

613 
ovsdb_row_hash
 
a˘uÆ
 = 
	`OVSDB_ROW_HASH_INITIALIZER
(actual);

614 
ovsdb_îr‹
 *
îr‹
;

615 
waô_auxd©a
 
aux
;

616 
timeout_m£c
 = 0;

617 
size_t
 
i
;

619 
timeout
 = 
	`ovsdb_∑r£r_membî
(
∑r£r
, "timeout", 
OP_NUMBER
 | 
OP_OPTIONAL
);

620 
whîe
 = 
	`ovsdb_∑r£r_membî
(
∑r£r
, "whîe", 
OP_ARRAY
);

621 
cﬁumns_js⁄
 = 
	`ovsdb_∑r£r_membî
(
∑r£r
, "columns",

622 
OP_ARRAY
 | 
OP_OPTIONAL
);

623 
u¡û
 = 
	`ovsdb_∑r£r_membî
(
∑r£r
, "u¡û", 
OP_STRING
);

624 
rows
 = 
	`ovsdb_∑r£r_membî
(
∑r£r
, "rows", 
OP_ARRAY
);

625 
èbÀ
 = 
	`∑r£_èbÀ
(
x
, 
∑r£r
, "table");

626 
îr‹
 = 
	`ovsdb_∑r£r_gë_îr‹
(
∑r£r
);

627 i‡(!
îr‹
) {

628 
îr‹
 = 
	`ovsdb_c⁄dôi⁄_‰om_js⁄
(
èbÀ
->
schema
, 
whîe
, 
x
->
symèb
,

629 &
c⁄dôi⁄
);

631 i‡(!
îr‹
) {

632 
îr‹
 = 
	`ovsdb_cﬁumn_£t_‰om_js⁄
(
cﬁumns_js⁄
, 
èbÀ
->
schema
,

633 &
cﬁumns
);

635 i‡(!
îr‹
) {

636 i‡(
timeout
) {

637 
timeout_m£c
 = 
	`MIN
(
LLONG_MAX
, 
	`js⁄_ªÆ
(
timeout
));

638 i‡(
timeout_m£c
 < 0) {

639 
îr‹
 = 
	`ovsdb_sy¡ax_îr‹
(
timeout
, 
NULL
,

641 } i‡(
timeout_m£c
 < 
x
->timeout_msec) {

642 
x
->
timeout_m£c
 =Åimeout_msec;

645 
timeout_m£c
 = 
LLONG_MAX
;

647 i‡(
	`°rcmp
(
	`js⁄_°rög
(
u¡û
), "==")

648 && 
	`°rcmp
(
	`js⁄_°rög
(
u¡û
), "!=")) {

649 
îr‹
 = 
	`ovsdb_sy¡ax_îr‹
(
u¡û
, 
NULL
,

653 i‡(!
îr‹
) {

655 
	`ovsdb_row_hash_öô
(&
ex≥˘ed
, &
cﬁumns
);

656 
i
 = 0; i < 
rows
->
u
.
¨øy
.
n
; i++) {

657 
ovsdb_row
 *
row
;

659 
row
 = 
	`ovsdb_row_¸óã
(
èbÀ
);

660 
îr‹
 = 
	`ovsdb_row_‰om_js⁄
(
row
, 
rows
->
u
.
¨øy
.
ñems
[
i
], 
x
->
symèb
,

661 
NULL
);

662 i‡(
îr‹
) {

666 i‡(!
	`ovsdb_row_hash_ö£π
(&
ex≥˘ed
, 
row
)) {

669 
	`ovsdb_row_de°roy
(
row
);

673 i‡(!
îr‹
) {

675 
boﬁ
 
equÆ
 = 
åue
;

676 
	`ovsdb_row_hash_öô
(&
a˘uÆ
, &
cﬁumns
);

677 
aux
.
a˘uÆ
 = &actual;

678 
aux
.
ex≥˘ed
 = &expected;

679 
aux
.
equÆ
 = &equal;

680 
	`ovsdb_quîy
(
èbÀ
, &
c⁄dôi⁄
, 
ovsdb_execuã_waô_quîy_cb
, &
aux
);

681 i‡(
equÆ
) {

687 
size_t
 
n_a˘uÆ
 = 
	`ovsdb_row_hash_cou¡
(&
a˘uÆ
);

688 
size_t
 
n_ex≥˘ed
 = 
	`ovsdb_row_hash_cou¡
(&
ex≥˘ed
);

689 
equÆ
 = 
n_a˘uÆ
 =
n_ex≥˘ed
;

691 i‡(!
	`°rcmp
(
	`js⁄_°rög
(
u¡û
), "=="Ë!
equÆ
) {

692 i‡(
timeout
 && 
x
->
ñ≠£d_m£c
 >
timeout_m£c
) {

693 i‡(
x
->
ñ≠£d_m£c
) {

694 
îr‹
 = 
	`ovsdb_îr‹
("timed out",

696 
x
->
ñ≠£d_m£c
);

698 
îr‹
 = 
	`ovsdb_îr‹
("timed out", "\"wait\"Åimed out");

703 
îr‹
 = 
	`ovsdb_îr‹
("not supported", "triggersÇot supported");

709 
	`ovsdb_row_hash_de°roy
(&
ex≥˘ed
, 
åue
);

710 
	`ovsdb_row_hash_de°roy
(&
a˘uÆ
, 
Ál£
);

711 
	`ovsdb_cﬁumn_£t_de°roy
(&
cﬁumns
);

712 
	`ovsdb_c⁄dôi⁄_de°roy
(&
c⁄dôi⁄
);

714  
îr‹
;

715 
	}
}

717 
ovsdb_îr‹
 *

718 
	$ovsdb_execuã_commít
(
ovsdb_executi⁄
 *
x
, 
ovsdb_∑r£r
 *
∑r£r
,

719 
js⁄
 *
ªsu…
 
OVS_UNUSED
)

721 c⁄° 
js⁄
 *
commít
;

723 
commít
 = 
	`ovsdb_∑r£r_membî
(
∑r£r
, "commít", 
OP_STRING
);

724 i‡(!
commít
) {

725  
NULL
;

727 
	`ovsdb_txn_add_commít
(
x
->
txn
, 
	`js⁄_°rög
(
commít
));

729  
NULL
;

730 
	}
}

732 
ovsdb_îr‹
 *

733 
	$ovsdb_execuã_as£π
(
ovsdb_executi⁄
 *
x
, 
ovsdb_∑r£r
 *
∑r£r
,

734 
js⁄
 *
ªsu…
 
OVS_UNUSED
)

736 c⁄° 
js⁄
 *
lock_«me
;

738 
lock_«me
 = 
	`ovsdb_∑r£r_membî
(
∑r£r
, "lock", 
OP_ID
);

739 i‡(!
lock_«me
) {

740  
NULL
;

743 i‡(
x
->
£ssi⁄
) {

744 c⁄° 
ovsdb_lock_waôî
 *
waôî
;

746 
waôî
 = 
	`ovsdb_£ssi⁄_gë_lock_waôî
(
x
->
£ssi⁄
,

747 
	`js⁄_°rög
(
lock_«me
));

748 i‡(
waôî
 && 
	`ovsdb_lock_waôî_is_ow√r
(waiter)) {

749  
NULL
;

753  
	`ovsdb_îr‹
("not owner", "AssertedÜock %sÇot held.",

754 
	`js⁄_°rög
(
lock_«me
));

755 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/ovsdb/file.c

16 
	~<c⁄fig.h
>

18 
	~"fûe.h
"

20 
	~<as£π.h
>

21 
	~<î∫o.h
>

22 
	~<f˙é.h
>

23 
	~<uni°d.h
>

25 
	~"bôm≠.h
"

26 
	~"cﬁumn.h
"

27 
	~"log.h
"

28 
	~"js⁄.h
"

29 
	~"lockfûe.h
"

30 
	~"ovsdb.h
"

31 
	~"ovsdb-îr‹.h
"

32 
	~"row.h
"

33 
	~"sockë-utû.h
"

34 
	~"èbÀ.h
"

35 
	~"timevÆ.h
"

36 
	~"å™ß˘i⁄.h
"

37 
	~"uuid.h
"

38 
	~"utû.h
"

39 
	~"vlog.h
"

41 
VLOG_DEFINE_THIS_MODULE
(
ovsdb_fûe
);

44 
	#COMPACT_MIN_MSEC
 (10 * 60 * 1000Ë

	)

48 
	#COMPACT_RETRY_MSEC
 (60 * 1000Ë

	)

51 
	sovsdb_fûe_txn
 {

52 
js⁄
 *
	mjs⁄
;

53 
js⁄
 *
	mèbÀ_js⁄
;

54 
ovsdb_èbÀ
 *
	mèbÀ
;

57 
ovsdb_fûe_txn_öô
(
ovsdb_fûe_txn
 *);

58 
ovsdb_fûe_txn_add_row
(
ovsdb_fûe_txn
 *,

59 c⁄° 
ovsdb_row
 *
ﬁd
,

60 c⁄° 
ovsdb_row
 *
√w
,

61 c⁄° *
ch™ged
);

62 
ovsdb_îr‹
 *
ovsdb_fûe_txn_commô
(
js⁄
 *,

63 c⁄° *
commít
,

64 
boﬁ
 
duøbÀ
,

65 
ovsdb_log
 *);

67 
ovsdb_îr‹
 *
ovsdb_fûe_›í__
(c⁄° *
fûe_«me
,

68 c⁄° 
ovsdb_schema
 *,

69 
boﬁ
 
ªad_⁄ly
, 
ovsdb
 **,

70 
ovsdb_fûe
 **);

71 
ovsdb_îr‹
 *
ovsdb_fûe_txn_‰om_js⁄
(

72 
ovsdb
 *, c⁄° 
js⁄
 *, 
boﬁ
 
c⁄vîtög
,

73 *
d©e
, 
ovsdb_txn
 **);

74 
ovsdb_îr‹
 *
ovsdb_fûe_¸óã
(
ovsdb
 *,

75 
ovsdb_log
 *,

76 c⁄° *
fûe_«me
,

77 
ﬁde°_commô
,

78 
n_å™ß˘i⁄s
,

79 
ovsdb_fûe
 **
fûï
);

93 
ovsdb_îr‹
 *

94 
	$ovsdb_fûe_›í
(c⁄° *
fûe_«me
, 
boﬁ
 
ªad_⁄ly
,

95 
ovsdb
 **
dbp
, 
ovsdb_fûe
 **
fûï
)

97  
	`ovsdb_fûe_›í__
(
fûe_«me
, 
NULL
, 
ªad_⁄ly
, 
dbp
, 
fûï
);

98 
	}
}

115 
ovsdb_îr‹
 *

116 
	$ovsdb_fûe_›í_as_schema
(c⁄° *
fûe_«me
,

117 c⁄° 
ovsdb_schema
 *
schema
,

118 
ovsdb
 **
dbp
)

120  
	`ovsdb_fûe_›í__
(
fûe_«me
, 
schema
, 
åue
, 
dbp
, 
NULL
);

121 
	}
}

123 
ovsdb_îr‹
 *

124 
	$ovsdb_fûe_›í_log
(c⁄° *
fûe_«me
, 
ovsdb_log_›í_mode
 
›í_mode
,

125 
ovsdb_log
 **
logp
, 
ovsdb_schema
 **
schem≠
)

127 
ovsdb_schema
 *
schema
 = 
NULL
;

128 
ovsdb_log
 *
log
 = 
NULL
;

129 
ovsdb_îr‹
 *
îr‹
;

130 
js⁄
 *js⁄ = 
NULL
;

132 
	`as£π
(
logp
 || 
schem≠
);

134 
îr‹
 = 
	`ovsdb_log_›í
(
fûe_«me
, 
›í_mode
, -1, &
log
);

135 i‡(
îr‹
) {

136 
îr‹
;

139 
îr‹
 = 
	`ovsdb_log_ªad
(
log
, &
js⁄
);

140 i‡(
îr‹
) {

141 
îr‹
;

142 } i‡(!
js⁄
) {

143 
îr‹
 = 
	`ovsdb_io_îr‹
(
EOF
, "%s: database file containsÇo schema",

144 
fûe_«me
);

145 
îr‹
;

148 i‡(
schem≠
) {

149 
îr‹
 = 
	`ovsdb_schema_‰om_js⁄
(
js⁄
, &
schema
);

150 i‡(
îr‹
) {

151 
îr‹
 = 
	`ovsdb_wøp_îr‹
(error,

153 
fûe_«me
);

154 
îr‹
;

157 
	`js⁄_de°roy
(
js⁄
);

159 i‡(
logp
) {

160 *
logp
 = 
log
;

162 
	`ovsdb_log_˛o£
(
log
);

164 i‡(
schem≠
) {

165 *
schem≠
 = 
schema
;

167  
NULL
;

169 
îr‹
:

170 
	`ovsdb_log_˛o£
(
log
);

171 
	`js⁄_de°roy
(
js⁄
);

172 i‡(
logp
) {

173 *
logp
 = 
NULL
;

175 i‡(
schem≠
) {

176 *
schem≠
 = 
NULL
;

178  
îr‹
;

179 
	}
}

181 
ovsdb_îr‹
 *

182 
	$ovsdb_fûe_›í__
(c⁄° *
fûe_«me
,

183 c⁄° 
ovsdb_schema
 *
Æã∫©e_schema
,

184 
boﬁ
 
ªad_⁄ly
, 
ovsdb
 **
dbp
,

185 
ovsdb_fûe
 **
fûï
)

187 
ovsdb_log_›í_mode
 
›í_mode
;

188 
ﬁde°_commô
;

189 
n_å™ß˘i⁄s
;

190 
ovsdb_schema
 *
schema
 = 
NULL
;

191 
ovsdb_îr‹
 *
îr‹
;

192 
ovsdb_log
 *
log
;

193 
js⁄
 *json;

194 
ovsdb
 *
db
 = 
NULL
;

197 
	`as£π
(!(
ªad_⁄ly
 && 
fûï
));

199 
›í_mode
 = 
ªad_⁄ly
 ? 
OVSDB_LOG_READ_ONLY
 : 
OVSDB_LOG_READ_WRITE
;

200 
îr‹
 = 
	`ovsdb_fûe_›í_log
(
fûe_«me
, 
›í_mode
, &
log
,

201 
Æã∫©e_schema
 ? 
NULL
 : &
schema
);

202 i‡(
îr‹
) {

203 
îr‹
;

206 
db
 = 
	`ovsdb_¸óã
(
schema
 ? schem®: 
	`ovsdb_schema_˛⁄e
(
Æã∫©e_schema
));

208 
ﬁde°_commô
 = 
LLONG_MAX
;

209 
n_å™ß˘i⁄s
 = 0;

210 (
îr‹
 = 
	`ovsdb_log_ªad
(
log
, &
js⁄
)Ë=
NULL
 && json) {

211 
ovsdb_txn
 *
txn
;

212 
d©e
;

214 
îr‹
 = 
	`ovsdb_fûe_txn_‰om_js⁄
(
db
, 
js⁄
, 
Æã∫©e_schema
 !
NULL
,

215 &
d©e
, &
txn
);

216 
	`js⁄_de°roy
(
js⁄
);

217 i‡(
îr‹
) {

218 
	`ovsdb_log_uƒód
(
log
);

222 
n_å™ß˘i⁄s
++;

223 i‡(
d©e
 < 
ﬁde°_commô
) {

224 
ﬁde°_commô
 = 
d©e
;

227 
îr‹
 = 
	`ovsdb_txn_commô
(
txn
, 
Ál£
);

228 i‡(
îr‹
) {

229 
	`ovsdb_log_uƒód
(
log
);

233 i‡(
îr‹
) {

237 *
msg
 = 
	`ovsdb_îr‹_to_°rög
(
îr‹
);

238 
	`VLOG_ERR
("%s", 
msg
);

239 
	`‰ì
(
msg
);

241 
	`ovsdb_îr‹_de°roy
(
îr‹
);

244 i‡(!
ªad_⁄ly
) {

245 
ovsdb_fûe
 *
fûe
;

247 
îr‹
 = 
	`ovsdb_fûe_¸óã
(
db
, 
log
, 
fûe_«me
, 
ﬁde°_commô
,

248 
n_å™ß˘i⁄s
, &
fûe
);

249 i‡(
îr‹
) {

250 
îr‹
;

252 i‡(
fûï
) {

253 *
fûï
 = 
fûe
;

256 
	`ovsdb_log_˛o£
(
log
);

259 *
dbp
 = 
db
;

260  
NULL
;

262 
îr‹
:

263 *
dbp
 = 
NULL
;

264 i‡(
fûï
) {

265 *
fûï
 = 
NULL
;

267 
	`ovsdb_de°roy
(
db
);

268 
	`ovsdb_log_˛o£
(
log
);

269  
îr‹
;

270 
	}
}

272 
ovsdb_îr‹
 *

273 
	$ovsdb_fûe_upd©e_row_‰om_js⁄
(
ovsdb_row
 *
row
, 
boﬁ
 
c⁄vîtög
,

274 c⁄° 
js⁄
 *json)

276 
ovsdb_èbÀ_schema
 *
schema
 = 
row
->
èbÀ
->schema;

277 
ovsdb_îr‹
 *
îr‹
;

278 
shash_node
 *
node
;

280 i‡(
js⁄
->
ty≥
 !
JSON_OBJECT
) {

281  
	`ovsdb_sy¡ax_îr‹
(
js⁄
, 
NULL
, "row must be JSON object");

284 
	`SHASH_FOR_EACH
 (
node
, 
	`js⁄_obje˘
(
js⁄
)) {

285 c⁄° *
cﬁumn_«me
 = 
node
->
«me
;

286 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
;

287 
ovsdb_d©um
 
d©um
;

289 
cﬁumn
 = 
	`ovsdb_èbÀ_schema_gë_cﬁumn
(
schema
, 
cﬁumn_«me
);

290 i‡(!
cﬁumn
) {

291 i‡(
c⁄vîtög
) {

294  
	`ovsdb_sy¡ax_îr‹
(
js⁄
, "unknown column",

296 
cﬁumn_«me
, 
schema
->
«me
);

299 
îr‹
 = 
	`ovsdb_d©um_‰om_js⁄
(&
d©um
, &
cﬁumn
->
ty≥
, 
node
->
d©a
, 
NULL
);

300 i‡(
îr‹
) {

301  
îr‹
;

303 
	`ovsdb_d©um_sw≠
(&
row
->
fõlds
[
cﬁumn
->
ödex
], &
d©um
);

304 
	`ovsdb_d©um_de°roy
(&
d©um
, &
cﬁumn
->
ty≥
);

307  
NULL
;

308 
	}
}

310 
ovsdb_îr‹
 *

311 
	$ovsdb_fûe_txn_row_‰om_js⁄
(
ovsdb_txn
 *
txn
, 
ovsdb_èbÀ
 *
èbÀ
,

312 
boﬁ
 
c⁄vîtög
,

313 c⁄° 
uuid
 *
row_uuid
, 
js⁄
 *json)

315 c⁄° 
ovsdb_row
 *
row
 = 
	`ovsdb_èbÀ_gë_row
(
èbÀ
, 
row_uuid
);

316 i‡(
js⁄
->
ty≥
 =
JSON_NULL
) {

317 i‡(!
row
) {

318  
	`ovsdb_sy¡ax_îr‹
(
NULL
, NULL, "transaction deletes "

319 "row "
UUID_FMT
"Åhat doesÇotÉxist",

320 
	`UUID_ARGS
(
row_uuid
));

322 
	`ovsdb_txn_row_dñëe
(
txn
, 
row
);

323  
NULL
;

324 } i‡(
row
) {

325  
	`ovsdb_fûe_upd©e_row_‰om_js⁄
(
	`ovsdb_txn_row_modify
(
txn
, 
row
),

326 
c⁄vîtög
, 
js⁄
);

328 
ovsdb_îr‹
 *
îr‹
;

329 
ovsdb_row
 *
√w
;

331 
√w
 = 
	`ovsdb_row_¸óã
(
èbÀ
);

332 *
	`ovsdb_row_gë_uuid_rw
(
√w
Ë*
row_uuid
;

333 
îr‹
 = 
	`ovsdb_fûe_upd©e_row_‰om_js⁄
(
√w
, 
c⁄vîtög
, 
js⁄
);

334 i‡(
îr‹
) {

335 
	`ovsdb_row_de°roy
(
√w
);

337 
	`ovsdb_txn_row_ö£π
(
txn
, 
√w
);

339  
îr‹
;

341 
	}
}

343 
ovsdb_îr‹
 *

344 
	$ovsdb_fûe_txn_èbÀ_‰om_js⁄
(
ovsdb_txn
 *
txn
,

345 
ovsdb_èbÀ
 *
èbÀ
,

346 
boﬁ
 
c⁄vîtög
, 
js⁄
 *json)

348 
shash_node
 *
node
;

350 i‡(
js⁄
->
ty≥
 !
JSON_OBJECT
) {

351  
	`ovsdb_sy¡ax_îr‹
(
js⁄
, 
NULL
, "objectÉxpected");

354 
	`SHASH_FOR_EACH
 (
node
, 
js⁄
->
u
.
obje˘
) {

355 c⁄° *
uuid_°rög
 = 
node
->
«me
;

356 
js⁄
 *
txn_row_js⁄
 = 
node
->
d©a
;

357 
ovsdb_îr‹
 *
îr‹
;

358 
uuid
 
row_uuid
;

360 i‡(!
	`uuid_‰om_°rög
(&
row_uuid
, 
uuid_°rög
)) {

361  
	`ovsdb_sy¡ax_îr‹
(
js⁄
, 
NULL
, "\"%s\" isÇotá valid UUID",

362 
uuid_°rög
);

365 
îr‹
 = 
	`ovsdb_fûe_txn_row_‰om_js⁄
(
txn
, 
èbÀ
, 
c⁄vîtög
,

366 &
row_uuid
, 
txn_row_js⁄
);

367 i‡(
îr‹
) {

368  
îr‹
;

372  
NULL
;

373 
	}
}

385 
ovsdb_îr‹
 *

386 
	$ovsdb_fûe_txn_‰om_js⁄
(
ovsdb
 *
db
, c⁄° 
js⁄
 *json,

387 
boﬁ
 
c⁄vîtög
, *
d©e
,

388 
ovsdb_txn
 **
tx≈
)

390 
ovsdb_îr‹
 *
îr‹
;

391 
shash_node
 *
node
;

392 
ovsdb_txn
 *
txn
;

394 *
tx≈
 = 
NULL
;

395 *
d©e
 = 
LLONG_MAX
;

397 i‡(
js⁄
->
ty≥
 !
JSON_OBJECT
) {

398  
	`ovsdb_sy¡ax_îr‹
(
js⁄
, 
NULL
, "objectÉxpected");

401 
txn
 = 
	`ovsdb_txn_¸óã
(
db
);

402 
	`SHASH_FOR_EACH
 (
node
, 
js⁄
->
u
.
obje˘
) {

403 c⁄° *
èbÀ_«me
 = 
node
->
«me
;

404 
js⁄
 *
node_js⁄
 = 
node
->
d©a
;

405 
ovsdb_èbÀ
 *
èbÀ
;

407 
èbÀ
 = 
	`shash_föd_d©a
(&
db
->
èbÀs
, 
èbÀ_«me
);

408 i‡(!
èbÀ
) {

409 i‡(!
	`°rcmp
(
èbÀ_«me
, "_date")

410 && 
node_js⁄
->
ty≥
 =
JSON_INTEGER
) {

411 *
d©e
 = 
	`js⁄_öãgî
(
node_js⁄
);

413 } i‡(!
	`°rcmp
(
èbÀ_«me
, "_commít"Ë|| 
c⁄vîtög
) {

417 
îr‹
 = 
	`ovsdb_sy¡ax_îr‹
(
js⁄
, "unknownÅable",

418 "NÿèbÀÇamed %s.", 
èbÀ_«me
);

419 
îr‹
;

422 
îr‹
 = 
	`ovsdb_fûe_txn_èbÀ_‰om_js⁄
(
txn
, 
èbÀ
, 
c⁄vîtög
,

423 
node_js⁄
);

424 i‡(
îr‹
) {

425 
îr‹
;

428 *
tx≈
 = 
txn
;

429  
NULL
;

431 
îr‹
:

432 
	`ovsdb_txn_ab‹t
(
txn
);

433  
îr‹
;

434 
	}
}

436 
ovsdb_îr‹
 *

437 
	$ovsdb_fûe_ßve_c›y__
(c⁄° *
fûe_«me
, 
lockög
,

438 c⁄° *
commít
, c⁄° 
ovsdb
 *
db
,

439 
ovsdb_log
 **
logp
)

441 c⁄° 
shash_node
 *
node
;

442 
ovsdb_fûe_txn
 
·xn
;

443 
ovsdb_îr‹
 *
îr‹
;

444 
ovsdb_log
 *
log
;

445 
js⁄
 *json;

447 
îr‹
 = 
	`ovsdb_log_›í
(
fûe_«me
, 
OVSDB_LOG_CREATE
, 
lockög
, &
log
);

448 i‡(
îr‹
) {

449  
îr‹
;

453 
js⁄
 = 
	`ovsdb_schema_to_js⁄
(
db
->
schema
);

454 
îr‹
 = 
	`ovsdb_log_wrôe
(
log
, 
js⁄
);

455 
	`js⁄_de°roy
(
js⁄
);

456 i‡(
îr‹
) {

457 
exô
;

461 
	`ovsdb_fûe_txn_öô
(&
·xn
);

462 
	`SHASH_FOR_EACH
 (
node
, &
db
->
èbÀs
) {

463 c⁄° 
ovsdb_èbÀ
 *
èbÀ
 = 
node
->
d©a
;

464 c⁄° 
ovsdb_row
 *
row
;

466 
	`HMAP_FOR_EACH
 (
row
, 
hm≠_node
, &
èbÀ
->
rows
) {

467 
	`ovsdb_fûe_txn_add_row
(&
·xn
, 
NULL
, 
row
, NULL);

470 
îr‹
 = 
	`ovsdb_fûe_txn_commô
(
·xn
.
js⁄
, 
commít
, 
åue
, 
log
);

472 
exô
:

473 i‡(
logp
) {

474 i‡(!
îr‹
) {

475 *
logp
 = 
log
;

476 
log
 = 
NULL
;

478 *
logp
 = 
NULL
;

481 
	`ovsdb_log_˛o£
(
log
);

482 i‡(
îr‹
) {

483 
	`ªmove
(
fûe_«me
);

485  
îr‹
;

486 
	}
}

493 
ovsdb_îr‹
 *

494 
	$ovsdb_fûe_ßve_c›y
(c⁄° *
fûe_«me
, 
lockög
,

495 c⁄° *
commít
, c⁄° 
ovsdb
 *
db
)

497  
	`ovsdb_fûe_ßve_c›y__
(
fûe_«me
, 
lockög
, 
commít
, 
db
, 
NULL
);

498 
	}
}

504 
ovsdb_îr‹
 *

505 
	$ovsdb_fûe_ªad_schema
(c⁄° *
fûe_«me
, 
ovsdb_schema
 **
schem≠
)

507 
	`as£π
(
schem≠
 !
NULL
);

508  
	`ovsdb_fûe_›í_log
(
fûe_«me
, 
OVSDB_LOG_READ_ONLY
, 
NULL
, 
schem≠
);

509 
	}
}

513 
	sovsdb_fûe
 {

514 
ovsdb_ª∂iˇ
 
	mª∂iˇ
;

515 
ovsdb
 *
	mdb
;

516 
ovsdb_log
 *
	mlog
;

517 *
	mfûe_«me
;

518 
	mﬁde°_commô
;

519 
	m√xt_com∑˘
;

520 
	mn_å™ß˘i⁄s
;

523 c⁄° 
ovsdb_ª∂iˇ_˛ass
 
	govsdb_fûe_˛ass
;

525 
ovsdb_îr‹
 *

526 
	$ovsdb_fûe_¸óã
(
ovsdb
 *
db
, 
ovsdb_log
 *
log
,

527 c⁄° *
fûe_«me
,

528 
ﬁde°_commô
,

529 
n_å™ß˘i⁄s
,

530 
ovsdb_fûe
 **
fûï
)

532 
now
 = 
	`time_m£c
();

533 
ovsdb_fûe
 *
fûe
;

534 *
dîef_«me
;

535 *
abs_«me
;

539 
dîef_«me
 = 
	`fﬁlow_symlöks
(
fûe_«me
);

540 
abs_«me
 = 
	`abs_fûe_«me
(
NULL
, 
dîef_«me
);

541 
	`‰ì
(
dîef_«me
);

542 i‡(!
abs_«me
) {

543 *
fûï
 = 
NULL
;

544  
	`ovsdb_io_îr‹
(0, "couldÇot determine current "

548 
fûe
 = 
	`xmÆloc
( *file);

549 
	`ovsdb_ª∂iˇ_öô
(&
fûe
->
ª∂iˇ
, &
ovsdb_fûe_˛ass
);

550 
fûe
->
db
 = db;

551 
fûe
->
log
 =Üog;

552 
fûe
->
fûe_«me
 = 
abs_«me
;

553 
fûe
->
ﬁde°_commô
 = 
	`MIN
(ﬁde°_commô, 
now
);

554 
fûe
->
√xt_com∑˘
 = fûe->
ﬁde°_commô
 + 
COMPACT_MIN_MSEC
;

555 
fûe
->
n_å™ß˘i⁄s
 =Ç_transactions;

556 
	`ovsdb_add_ª∂iˇ
(
db
, &
fûe
->
ª∂iˇ
);

558 *
fûï
 = 
fûe
;

559  
NULL
;

560 
	}
}

562 
ovsdb_fûe
 *

563 
	$ovsdb_fûe_ˇ°
(
ovsdb_ª∂iˇ
 *
ª∂iˇ
)

565 
	`as£π
(
ª∂iˇ
->
˛ass
 =&
ovsdb_fûe_˛ass
);

566  
	`CONTAINER_OF
(
ª∂iˇ
, 
ovsdb_fûe
,Ñeplica);

567 
	}
}

569 
boﬁ


570 
	$ovsdb_fûe_ch™ge_cb
(c⁄° 
ovsdb_row
 *
ﬁd
,

571 c⁄° 
ovsdb_row
 *
√w
,

572 c⁄° *
ch™ged
,

573 *
·xn_
)

575 
ovsdb_fûe_txn
 *
·xn
 = 
·xn_
;

576 
	`ovsdb_fûe_txn_add_row
(
·xn
, 
ﬁd
, 
√w
, 
ch™ged
);

577  
åue
;

578 
	}
}

580 
ovsdb_îr‹
 *

581 
	$ovsdb_fûe_commô
(
ovsdb_ª∂iˇ
 *
ª∂iˇ
,

582 c⁄° 
ovsdb_txn
 *
txn
, 
boﬁ
 
duøbÀ
)

584 
ovsdb_fûe
 *
fûe
 = 
	`ovsdb_fûe_ˇ°
(
ª∂iˇ
);

585 
ovsdb_fûe_txn
 
·xn
;

586 
ovsdb_îr‹
 *
îr‹
;

588 
	`ovsdb_fûe_txn_öô
(&
·xn
);

589 
	`ovsdb_txn_f‹_óch_ch™ge
(
txn
, 
ovsdb_fûe_ch™ge_cb
, &
·xn
);

590 i‡(!
·xn
.
js⁄
) {

592  
NULL
;

595 
îr‹
 = 
	`ovsdb_fûe_txn_commô
(
·xn
.
js⁄
, 
	`ovsdb_txn_gë_commít
(
txn
),

596 
duøbÀ
, 
fûe
->
log
);

597 i‡(
îr‹
) {

598  
îr‹
;

600 
fûe
->
n_å™ß˘i⁄s
++;

606 i‡(
	`time_m£c
(Ë>
fûe
->
√xt_com∑˘


607 && 
fûe
->
n_å™ß˘i⁄s
 >= 100

608 && 
	`ovsdb_log_gë_off£t
(
fûe
->
log
) >= 10 * 1024 * 1024)

610 
îr‹
 = 
	`ovsdb_fûe_com∑˘
(
fûe
);

611 i‡(
îr‹
) {

612 *
s
 = 
	`ovsdb_îr‹_to_°rög
(
îr‹
);

613 
	`ovsdb_îr‹_de°roy
(
îr‹
);

614 
	`VLOG_WARN
("%s: compacting database failed (%s),Ñetrying in "

616 
fûe
->
fûe_«me
, 
s
, 
COMPACT_RETRY_MSEC
 / 1000);

617 
	`‰ì
(
s
);

619 
fûe
->
√xt_com∑˘
 = 
	`time_m£c
(Ë+ 
COMPACT_RETRY_MSEC
;

623  
NULL
;

624 
	}
}

626 
ovsdb_îr‹
 *

627 
	$ovsdb_fûe_com∑˘
(
ovsdb_fûe
 *
fûe
)

629 
ovsdb_log
 *
√w_log
 = 
NULL
;

630 
lockfûe
 *
tmp_lock
 = 
NULL
;

631 
ovsdb_îr‹
 *
îr‹
;

632 *
tmp_«me
 = 
NULL
;

633 *
commít
 = 
NULL
;

634 
ªtvÆ
;

636 
commít
 = 
	`xa•rötf
("compacting database online "

638 (
	`time_m£c
(Ë- 
fûe
->
ﬁde°_commô
) / 1000.0,

639 
fûe
->
n_å™ß˘i⁄s
,

640 (Ë
	`ovsdb_log_gë_off£t
(
fûe
->
log
));

641 
	`VLOG_INFO
("%s: %s", 
fûe
->
fûe_«me
, 
commít
);

645 
îr‹
 = 
	`ovsdb_log_commô
(
fûe
->
log
);

646 i‡(
îr‹
) {

647 
exô
;

651 
tmp_«me
 = 
	`xa•rötf
("%s.tmp", 
fûe
->
fûe_«me
);

652 
ªtvÆ
 = 
	`lockfûe_lock
(
tmp_«me
, &
tmp_lock
);

653 i‡(
ªtvÆ
) {

654 
îr‹
 = 
	`ovsdb_io_îr‹
(
ªtvÆ
, "couldÇŸ gëÜock o¿%s", 
tmp_«me
);

655 
exô
;

659 i‡(
	`u∆ök
(
tmp_«me
Ë< 0 && 
î∫o
 !
ENOENT
) {

660 
îr‹
 = 
	`ovsdb_io_îr‹
(
î∫o
, "ÁûedÅÿªmovê%s", 
tmp_«me
);

661 
exô
;

665 
îr‹
 = 
	`ovsdb_fûe_ßve_c›y__
(
tmp_«me
, 
Ál£
, 
commít
, 
fûe
->
db
,

666 &
√w_log
);

667 i‡(
îr‹
) {

668 
exô
;

672 i‡(
	`ª«me
(
tmp_«me
, 
fûe
->
fûe_«me
)) {

673 
îr‹
 = 
	`ovsdb_io_îr‹
(
î∫o
, "failedÅoÑename \"%s\"Åo \"%s\"",

674 
tmp_«me
, 
fûe
->
fûe_«me
);

675 
exô
;

677 
	`fsync_∑ª¡_dú
(
fûe
->
fûe_«me
);

679 
exô
:

680 i‡(!
îr‹
) {

681 
	`ovsdb_log_˛o£
(
fûe
->
log
);

682 
fûe
->
log
 = 
√w_log
;

683 
fûe
->
ﬁde°_commô
 = 
	`time_m£c
();

684 
fûe
->
√xt_com∑˘
 = fûe->
ﬁde°_commô
 + 
COMPACT_MIN_MSEC
;

685 
fûe
->
n_å™ß˘i⁄s
 = 1;

687 
	`ovsdb_log_˛o£
(
√w_log
);

688 i‡(
tmp_lock
) {

689 
	`u∆ök
(
tmp_«me
);

693 
	`lockfûe_u∆ock
(
tmp_lock
);

694 
	`‰ì
(
tmp_«me
);

695 
	`‰ì
(
commít
);

697  
îr‹
;

698 
	}
}

701 
	$ovsdb_fûe_de°roy
(
ovsdb_ª∂iˇ
 *
ª∂iˇ
)

703 
ovsdb_fûe
 *
fûe
 = 
	`ovsdb_fûe_ˇ°
(
ª∂iˇ
);

705 
	`ovsdb_log_˛o£
(
fûe
->
log
);

706 
	`‰ì
(
fûe
->
fûe_«me
);

707 
	`‰ì
(
fûe
);

708 
	}
}

710 c⁄° 
ovsdb_ª∂iˇ_˛ass
 
	govsdb_fûe_˛ass
 = {

711 
ovsdb_fûe_commô
,

712 
ovsdb_fûe_de°roy


716 
	$ovsdb_fûe_txn_öô
(
ovsdb_fûe_txn
 *
·xn
)

718 
·xn
->
js⁄
 = 
NULL
;

719 
·xn
->
èbÀ_js⁄
 = 
NULL
;

720 
·xn
->
èbÀ
 = 
NULL
;

721 
	}
}

724 
	$ovsdb_fûe_txn_add_row
(
ovsdb_fûe_txn
 *
·xn
,

725 c⁄° 
ovsdb_row
 *
ﬁd
,

726 c⁄° 
ovsdb_row
 *
√w
,

727 c⁄° *
ch™ged
)

729 
js⁄
 *
row
;

731 i‡(!
√w
) {

732 
row
 = 
	`js⁄_nuŒ_¸óã
();

734 
shash_node
 *
node
;

736 
row
 = 
ﬁd
 ? 
NULL
 : 
	`js⁄_obje˘_¸óã
();

737 
	`SHASH_FOR_EACH
 (
node
, &
√w
->
èbÀ
->
schema
->
cﬁumns
) {

738 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
 = 
node
->
d©a
;

739 c⁄° 
ovsdb_ty≥
 *
ty≥
 = &
cﬁumn
->type;

740 
idx
 = 
cﬁumn
->
ödex
;

742 i‡(
idx
 !
OVSDB_COL_UUID
 && 
cﬁumn
->
≥rsi°ít


743 && (
ﬁd


744 ? 
	`bôm≠_is_£t
(
ch™ged
, 
idx
)

745 : !
	`ovsdb_d©um_is_deÁu…
(&
√w
->
fõlds
[
idx
], 
ty≥
)))

747 i‡(!
row
) {

748 
row
 = 
	`js⁄_obje˘_¸óã
();

750 
	`js⁄_obje˘_put
(
row
, 
cﬁumn
->
«me
,

751 
	`ovsdb_d©um_to_js⁄
(&
√w
->
fõlds
[
idx
], 
ty≥
));

756 i‡(
row
) {

757 
ovsdb_èbÀ
 *
èbÀ
 = 
√w
 ?Çew->èbÀ : 
ﬁd
->table;

758 
uuid
[
UUID_LEN
 + 1];

760 i‡(
èbÀ
 !
·xn
->table) {

762 i‡(!
·xn
->
js⁄
) {

763 
·xn
->
js⁄
 = 
	`js⁄_obje˘_¸óã
();

767 
·xn
->
èbÀ_js⁄
 = 
	`js⁄_obje˘_¸óã
();

768 
·xn
->
èbÀ
 =Åable;

769 
	`js⁄_obje˘_put
(
·xn
->
js⁄
, 
èbÀ
->
schema
->
«me
, ftxn->
èbÀ_js⁄
);

773 
	`¢¥ötf
(
uuid
,  uuid,

774 
UUID_FMT
, 
	`UUID_ARGS
(
	`ovsdb_row_gë_uuid
(
√w
 ?Çew : 
ﬁd
)));

775 
	`js⁄_obje˘_put
(
·xn
->
èbÀ_js⁄
, 
uuid
, 
row
);

777 
	}
}

779 
ovsdb_îr‹
 *

780 
	$ovsdb_fûe_txn_commô
(
js⁄
 *js⁄, c⁄° *
commít
,

781 
boﬁ
 
duøbÀ
, 
ovsdb_log
 *
log
)

783 
ovsdb_îr‹
 *
îr‹
;

785 i‡(!
js⁄
) {

786 
js⁄
 = 
	`js⁄_obje˘_¸óã
();

788 i‡(
commít
) {

789 
	`js⁄_obje˘_put_°rög
(
js⁄
, "_commít", 
commít
);

791 
	`js⁄_obje˘_put
(
js⁄
, "_d©e", 
	`js⁄_öãgî_¸óã
(
	`time_wÆl
()));

793 
îr‹
 = 
	`ovsdb_log_wrôe
(
log
, 
js⁄
);

794 
	`js⁄_de°roy
(
js⁄
);

795 i‡(
îr‹
) {

796  
	`ovsdb_wøp_îr‹
(
îr‹
, "writingÅransaction failed");

799 i‡(
duøbÀ
) {

800 
îr‹
 = 
	`ovsdb_log_commô
(
log
);

801 i‡(
îr‹
) {

802  
	`ovsdb_wøp_îr‹
(
îr‹
, "committingÅransaction failed");

806  
NULL
;

807 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/ovsdb/file.h

16 #i‚de‡
OVSDB_FILE_H


17 
	#OVSDB_FILE_H
 1

	)

19 
	~<°dboﬁ.h
>

20 
	~"compûî.h
"

21 
	~"log.h
"

23 
	govsdb
;

24 
	govsdb_fûe
;

25 
	govsdb_schema
;

27 
ovsdb_îr‹
 *
	$ovsdb_fûe_›í
(c⁄° *
fûe_«me
, 
boﬁ
 
ªad_⁄ly
,

28 
ovsdb
 **, 
ovsdb_fûe
 **)

29 
WARN_UNUSED_RESULT
;

31 
ovsdb_îr‹
 *
	$ovsdb_fûe_›í_as_schema
(c⁄° *
fûe_«me
,

32 c⁄° 
ovsdb_schema
 *,

33 
ovsdb
 **)

34 
WARN_UNUSED_RESULT
;

36 
ovsdb_îr‹
 *
	$ovsdb_fûe_ßve_c›y
(c⁄° *
fûe_«me
, 
lockög
,

37 c⁄° *
commít
,

38 c⁄° 
ovsdb
 *)

39 
WARN_UNUSED_RESULT
;

41 
ovsdb_îr‹
 *
	`ovsdb_fûe_com∑˘
(
ovsdb_fûe
 *);

43 
ovsdb_îr‹
 *
	$ovsdb_fûe_ªad_schema
(c⁄° *
fûe_«me
,

44 
ovsdb_schema
 **)

45 
WARN_UNUSED_RESULT
;

	@/home/lsch/mytest/openvswitch-1.9.0/ovsdb/jsonrpc-server.c

16 
	~<c⁄fig.h
>

18 
	~"js⁄Ωc-£rvî.h
"

20 
	~<as£π.h
>

21 
	~<î∫o.h
>

23 
	~"bôm≠.h
"

24 
	~"cﬁumn.h
"

25 
	~"dy«mic-°rög.h
"

26 
	~"js⁄.h
"

27 
	~"js⁄Ωc.h
"

28 
	~"ovsdb-îr‹.h
"

29 
	~"ovsdb-∑r£r.h
"

30 
	~"ovsdb.h
"

31 
	~"ªc⁄√˘.h
"

32 
	~"row.h
"

33 
	~"£rvî.h
"

34 
	~"sim≠.h
"

35 
	~"°ªam.h
"

36 
	~"èbÀ.h
"

37 
	~"timevÆ.h
"

38 
	~"å™ß˘i⁄.h
"

39 
	~"åiggî.h
"

40 
	~"vlog.h
"

42 
VLOG_DEFINE_THIS_MODULE
(
ovsdb_js⁄Ωc_£rvî
);

44 
	govsdb_js⁄Ωc_ªmŸe
;

45 
	govsdb_js⁄Ωc_£ssi⁄
;

48 
vlog_øã_limô
 
	gæ
 = 
VLOG_RATE_LIMIT_INIT
(1, 5);

51 
ovsdb_js⁄Ωc_£ssi⁄
 *
ovsdb_js⁄Ωc_£ssi⁄_¸óã
(

52 
ovsdb_js⁄Ωc_ªmŸe
 *, 
js⁄Ωc_£ssi⁄
 *);

53 
ovsdb_js⁄Ωc_£ssi⁄_run_Æl
(
ovsdb_js⁄Ωc_ªmŸe
 *);

54 
ovsdb_js⁄Ωc_£ssi⁄_waô_Æl
(
ovsdb_js⁄Ωc_ªmŸe
 *);

55 
ovsdb_js⁄Ωc_£ssi⁄_gë_mem‹y_ußge_Æl
(

56 c⁄° 
ovsdb_js⁄Ωc_ªmŸe
 *, 
sim≠
 *
ußge
);

57 
ovsdb_js⁄Ωc_£ssi⁄_˛o£_Æl
(
ovsdb_js⁄Ωc_ªmŸe
 *);

58 
ovsdb_js⁄Ωc_£ssi⁄_ªc⁄√˘_Æl
(
ovsdb_js⁄Ωc_ªmŸe
 *);

59 
ovsdb_js⁄Ωc_£ssi⁄_£t_Æl_›ti⁄s
(

60 
ovsdb_js⁄Ωc_ªmŸe
 *, c⁄° 
ovsdb_js⁄Ωc_›ti⁄s
 *);

61 
boﬁ
 
ovsdb_js⁄Ωc_£ssi⁄_gë_°©us
(

62 c⁄° 
ovsdb_js⁄Ωc_ªmŸe
 *,

63 
ovsdb_js⁄Ωc_ªmŸe_°©us
 *);

64 
ovsdb_js⁄Ωc_£ssi⁄_u∆ock_Æl
(
ovsdb_js⁄Ωc_£ssi⁄
 *);

65 
ovsdb_js⁄Ωc_£ssi⁄_u∆ock__
(
ovsdb_lock_waôî
 *);

68 
ovsdb_js⁄Ωc_åiggî_¸óã
(
ovsdb_js⁄Ωc_£ssi⁄
 *,

69 
ovsdb
 *,

70 
js⁄
 *
id
, js⁄ *
∑øms
);

71 
ovsdb_js⁄Ωc_åiggî
 *
ovsdb_js⁄Ωc_åiggî_föd
(

72 
ovsdb_js⁄Ωc_£ssi⁄
 *, c⁄° 
js⁄
 *
id
, 
size_t
 
hash
);

73 
ovsdb_js⁄Ωc_åiggî_com∂ëe
(
ovsdb_js⁄Ωc_åiggî
 *);

74 
ovsdb_js⁄Ωc_åiggî_com∂ëe_Æl
(
ovsdb_js⁄Ωc_£ssi⁄
 *);

75 
ovsdb_js⁄Ωc_åiggî_com∂ëe_d⁄e
(

76 
ovsdb_js⁄Ωc_£ssi⁄
 *);

79 
js⁄
 *
ovsdb_js⁄Ωc_m⁄ô‹_¸óã
(

80 
ovsdb_js⁄Ωc_£ssi⁄
 *, 
ovsdb
 *, 
js⁄
 *
∑øms
);

81 
js⁄Ωc_msg
 *
ovsdb_js⁄Ωc_m⁄ô‹_ˇn˚l
(

82 
ovsdb_js⁄Ωc_£ssi⁄
 *,

83 
js⁄_¨øy
 *
∑øms
,

84 c⁄° 
js⁄
 *
ªque°_id
);

85 
ovsdb_js⁄Ωc_m⁄ô‹_ªmove_Æl
(
ovsdb_js⁄Ωc_£ssi⁄
 *);

89 
	sovsdb_js⁄Ωc_£rvî
 {

90 
ovsdb_£rvî
 
	mup
;

91 
	mn_£ssi⁄s
, 
	mmax_£ssi⁄s
;

92 
shash
 
	mªmŸes
;

98 
	sovsdb_js⁄Ωc_ªmŸe
 {

99 
ovsdb_js⁄Ωc_£rvî
 *
	m£rvî
;

100 
p°ªam
 *
	mli°íî
;

101 
li°
 
	m£ssi⁄s
;

102 
uöt8_t
 
	mds˝
;

105 
ovsdb_js⁄Ωc_ªmŸe
 *
ovsdb_js⁄Ωc_£rvî_add_ªmŸe
(

106 
ovsdb_js⁄Ωc_£rvî
 *, c⁄° *
«me
,

107 c⁄° 
ovsdb_js⁄Ωc_›ti⁄s
 *
›ti⁄s


109 
ovsdb_js⁄Ωc_£rvî_dñ_ªmŸe
(
shash_node
 *);

115 
ovsdb_js⁄Ωc_£rvî
 *

116 
	$ovsdb_js⁄Ωc_£rvî_¸óã
()

118 
ovsdb_js⁄Ωc_£rvî
 *
£rvî
 = 
	`xzÆloc
( *server);

119 
	`ovsdb_£rvî_öô
(&
£rvî
->
up
);

120 
£rvî
->
max_£ssi⁄s
 = 64;

121 
	`shash_öô
(&
£rvî
->
ªmŸes
);

122  
£rvî
;

123 
	}
}

128 
boﬁ


129 
	$ovsdb_js⁄Ωc_£rvî_add_db
(
ovsdb_js⁄Ωc_£rvî
 *
svr
, 
ovsdb
 *
db
)

131  
	`ovsdb_£rvî_add_db
(&
svr
->
up
, 
db
);

132 
	}
}

135 
	$ovsdb_js⁄Ωc_£rvî_de°roy
(
ovsdb_js⁄Ωc_£rvî
 *
svr
)

137 
shash_node
 *
node
, *
√xt
;

139 
	`SHASH_FOR_EACH_SAFE
 (
node
, 
√xt
, &
svr
->
ªmŸes
) {

140 
	`ovsdb_js⁄Ωc_£rvî_dñ_ªmŸe
(
node
);

142 
	`shash_de°roy
(&
svr
->
ªmŸes
);

143 
	`ovsdb_£rvî_de°roy
(&
svr
->
up
);

144 
	`‰ì
(
svr
);

145 
	}
}

147 
ovsdb_js⁄Ωc_›ti⁄s
 *

148 
	$ovsdb_js⁄Ωc_deÁu…_›ti⁄s
(c⁄° *
èrgë
)

150 
ovsdb_js⁄Ωc_›ti⁄s
 *
›ti⁄s
 = 
	`xzÆloc
( *options);

151 
›ti⁄s
->
max_backoff
 = 
RECONNECT_DEFAULT_MAX_BACKOFF
;

152 
›ti⁄s
->
¥obe_öãrvÆ
 = (
	`°ªam_‹_p°ªam_√eds_¥obes
(
èrgë
)

153 ? 
RECONNECT_DEFAULT_PROBE_INTERVAL


155  
›ti⁄s
;

156 
	}
}

164 
	$ovsdb_js⁄Ωc_£rvî_£t_ªmŸes
(
ovsdb_js⁄Ωc_£rvî
 *
svr
,

165 c⁄° 
shash
 *
√w_ªmŸes
)

167 
shash_node
 *
node
, *
√xt
;

169 
	`SHASH_FOR_EACH_SAFE
 (
node
, 
√xt
, &
svr
->
ªmŸes
) {

170 i‡(!
	`shash_föd
(
√w_ªmŸes
, 
node
->
«me
)) {

171 
	`VLOG_INFO
("%s:ÑemŸêdec⁄figuªd", 
node
->
«me
);

172 
	`ovsdb_js⁄Ωc_£rvî_dñ_ªmŸe
(
node
);

175 
	`SHASH_FOR_EACH
 (
node
, 
√w_ªmŸes
) {

176 c⁄° 
ovsdb_js⁄Ωc_›ti⁄s
 *
›ti⁄s
 = 
node
->
d©a
;

177 
ovsdb_js⁄Ωc_ªmŸe
 *
ªmŸe
;

179 
ªmŸe
 = 
	`shash_föd_d©a
(&
svr
->
ªmŸes
, 
node
->
«me
);

180 i‡(!
ªmŸe
) {

181 
ªmŸe
 = 
	`ovsdb_js⁄Ωc_£rvî_add_ªmŸe
(
svr
, 
node
->
«me
, 
›ti⁄s
);

182 i‡(!
ªmŸe
) {

187 
	`ovsdb_js⁄Ωc_£ssi⁄_£t_Æl_›ti⁄s
(
ªmŸe
, 
›ti⁄s
);

189 
	}
}

191 
ovsdb_js⁄Ωc_ªmŸe
 *

192 
	$ovsdb_js⁄Ωc_£rvî_add_ªmŸe
(
ovsdb_js⁄Ωc_£rvî
 *
svr
,

193 c⁄° *
«me
,

194 c⁄° 
ovsdb_js⁄Ωc_›ti⁄s
 *
›ti⁄s
)

196 
ovsdb_js⁄Ωc_ªmŸe
 *
ªmŸe
;

197 
p°ªam
 *
li°íî
;

198 
îr‹
;

200 
îr‹
 = 
	`js⁄Ωc_p°ªam_›í
(
«me
, &
li°íî
, 
›ti⁄s
->
ds˝
);

201 i‡(
îr‹
 &&Éº‹ !
EAFNOSUPPORT
) {

202 
	`VLOG_ERR_RL
(&
æ
, "%s:Üi°í faûed: %s", 
«me
, 
	`°ªº‹
(
îr‹
));

203  
NULL
;

206 
ªmŸe
 = 
	`xmÆloc
( *remote);

207 
ªmŸe
->
£rvî
 = 
svr
;

208 
ªmŸe
->
li°íî
 =Üistener;

209 
	`li°_öô
(&
ªmŸe
->
£ssi⁄s
);

210 
ªmŸe
->
ds˝
 = 
›ti⁄s
->dscp;

211 
	`shash_add
(&
svr
->
ªmŸes
, 
«me
, 
ªmŸe
);

213 i‡(!
li°íî
) {

214 
	`ovsdb_js⁄Ωc_£ssi⁄_¸óã
(
ªmŸe
, 
	`js⁄Ωc_£ssi⁄_›í
(
«me
));

216  
ªmŸe
;

217 
	}
}

220 
	$ovsdb_js⁄Ωc_£rvî_dñ_ªmŸe
(
shash_node
 *
node
)

222 
ovsdb_js⁄Ωc_ªmŸe
 *
ªmŸe
 = 
node
->
d©a
;

224 
	`ovsdb_js⁄Ωc_£ssi⁄_˛o£_Æl
(
ªmŸe
);

225 
	`p°ªam_˛o£
(
ªmŸe
->
li°íî
);

226 
	`shash_dñëe
(&
ªmŸe
->
£rvî
->
ªmŸes
, 
node
);

227 
	`‰ì
(
ªmŸe
);

228 
	}
}

236 
boﬁ


237 
	$ovsdb_js⁄Ωc_£rvî_gë_ªmŸe_°©us
(

238 c⁄° 
ovsdb_js⁄Ωc_£rvî
 *
svr
, c⁄° *
èrgë
,

239 
ovsdb_js⁄Ωc_ªmŸe_°©us
 *
°©us
)

241 c⁄° 
ovsdb_js⁄Ωc_ªmŸe
 *
ªmŸe
;

243 
	`mem£t
(
°©us
, 0,  *status);

245 
ªmŸe
 = 
	`shash_föd_d©a
(&
svr
->
ªmŸes
, 
èrgë
);

246  
ªmŸe
 && 
	`ovsdb_js⁄Ωc_£ssi⁄_gë_°©us
‘emŸe, 
°©us
);

247 
	}
}

250 
	$ovsdb_js⁄Ωc_£rvî_‰ì_ªmŸe_°©us
(

251 
ovsdb_js⁄Ωc_ªmŸe_°©us
 *
°©us
)

253 
	`‰ì
(
°©us
->
locks_hñd
);

254 
	`‰ì
(
°©us
->
locks_waôög
);

255 
	`‰ì
(
°©us
->
locks_lo°
);

256 
	}
}

261 
	$ovsdb_js⁄Ωc_£rvî_ªc⁄√˘
(
ovsdb_js⁄Ωc_£rvî
 *
svr
)

263 
shash_node
 *
node
;

265 
	`SHASH_FOR_EACH
 (
node
, &
svr
->
ªmŸes
) {

266 
ovsdb_js⁄Ωc_ªmŸe
 *
ªmŸe
 = 
node
->
d©a
;

268 
	`ovsdb_js⁄Ωc_£ssi⁄_ªc⁄√˘_Æl
(
ªmŸe
);

270 
	}
}

273 
	$ovsdb_js⁄Ωc_£rvî_run
(
ovsdb_js⁄Ωc_£rvî
 *
svr
)

275 
shash_node
 *
node
;

277 
	`SHASH_FOR_EACH
 (
node
, &
svr
->
ªmŸes
) {

278 
ovsdb_js⁄Ωc_ªmŸe
 *
ªmŸe
 = 
node
->
d©a
;

280 i‡(
ªmŸe
->
li°íî
 && 
svr
->
n_£ssi⁄s
 < svr->
max_£ssi⁄s
) {

281 
°ªam
 *stream;

282 
îr‹
;

284 
îr‹
 = 
	`p°ªam_ac˚±
(
ªmŸe
->
li°íî
, &
°ªam
);

285 i‡(!
îr‹
) {

286 
js⁄Ωc_£ssi⁄
 *
js
;

287 
js
 = 
	`js⁄Ωc_£ssi⁄_›í_uƒñübly
(
	`js⁄Ωc_›í
(
°ªam
),

288 
ªmŸe
->
ds˝
);

289 
	`ovsdb_js⁄Ωc_£ssi⁄_¸óã
(
ªmŸe
, 
js
);

290 } i‡(
îr‹
 !
EAGAIN
) {

291 
	`VLOG_WARN_RL
(&
æ
, "%s:áccept failed: %s",

292 
	`p°ªam_gë_«me
(
ªmŸe
->
li°íî
),

293 
	`°ªº‹
(
îr‹
));

297 
	`ovsdb_js⁄Ωc_£ssi⁄_run_Æl
(
ªmŸe
);

299 
	}
}

302 
	$ovsdb_js⁄Ωc_£rvî_waô
(
ovsdb_js⁄Ωc_£rvî
 *
svr
)

304 
shash_node
 *
node
;

306 
	`SHASH_FOR_EACH
 (
node
, &
svr
->
ªmŸes
) {

307 
ovsdb_js⁄Ωc_ªmŸe
 *
ªmŸe
 = 
node
->
d©a
;

309 i‡(
ªmŸe
->
li°íî
 && 
svr
->
n_£ssi⁄s
 < svr->
max_£ssi⁄s
) {

310 
	`p°ªam_waô
(
ªmŸe
->
li°íî
);

313 
	`ovsdb_js⁄Ωc_£ssi⁄_waô_Æl
(
ªmŸe
);

315 
	}
}

320 
	$ovsdb_js⁄Ωc_£rvî_gë_mem‹y_ußge
(c⁄° 
ovsdb_js⁄Ωc_£rvî
 *
svr
,

321 
sim≠
 *
ußge
)

323 
shash_node
 *
node
;

325 
	`sim≠_ö¸ó£
(
ußge
, "£ssi⁄s", 
svr
->
n_£ssi⁄s
);

326 
	`SHASH_FOR_EACH
 (
node
, &
svr
->
ªmŸes
) {

327 
ovsdb_js⁄Ωc_ªmŸe
 *
ªmŸe
 = 
node
->
d©a
;

329 
	`ovsdb_js⁄Ωc_£ssi⁄_gë_mem‹y_ußge_Æl
(
ªmŸe
, 
ußge
);

331 
	}
}

335 
	sovsdb_js⁄Ωc_£ssi⁄
 {

336 
li°
 
	mnode
;

337 
ovsdb_£ssi⁄
 
	mup
;

338 
ovsdb_js⁄Ωc_ªmŸe
 *
	mªmŸe
;

341 
hm≠
 
	måiggîs
;

344 
hm≠
 
	mm⁄ô‹s
;

347 
js⁄Ωc_£ssi⁄
 *
	mjs
;

348 
	mjs_£qno
;

351 
ovsdb_js⁄Ωc_£ssi⁄_˛o£
(
ovsdb_js⁄Ωc_£ssi⁄
 *);

352 
ovsdb_js⁄Ωc_£ssi⁄_run
(
ovsdb_js⁄Ωc_£ssi⁄
 *);

353 
ovsdb_js⁄Ωc_£ssi⁄_waô
(
ovsdb_js⁄Ωc_£ssi⁄
 *);

354 
ovsdb_js⁄Ωc_£ssi⁄_gë_mem‹y_ußge
(

355 c⁄° 
ovsdb_js⁄Ωc_£ssi⁄
 *, 
sim≠
 *
ußge
);

356 
ovsdb_js⁄Ωc_£ssi⁄_£t_›ti⁄s
(

357 
ovsdb_js⁄Ωc_£ssi⁄
 *, c⁄° 
ovsdb_js⁄Ωc_›ti⁄s
 *);

358 
ovsdb_js⁄Ωc_£ssi⁄_gŸ_ªque°
(
ovsdb_js⁄Ωc_£ssi⁄
 *,

359 
js⁄Ωc_msg
 *);

360 
ovsdb_js⁄Ωc_£ssi⁄_gŸ_nŸify
(
ovsdb_js⁄Ωc_£ssi⁄
 *,

361 
js⁄Ωc_msg
 *);

363 
ovsdb_js⁄Ωc_£ssi⁄
 *

364 
	$ovsdb_js⁄Ωc_£ssi⁄_¸óã
(
ovsdb_js⁄Ωc_ªmŸe
 *
ªmŸe
,

365 
js⁄Ωc_£ssi⁄
 *
js
)

367 
ovsdb_js⁄Ωc_£ssi⁄
 *
s
;

369 
s
 = 
	`xzÆloc
( *s);

370 
	`ovsdb_£ssi⁄_öô
(&
s
->
up
, &
ªmŸe
->
£rvî
->up);

371 
s
->
ªmŸe
 =Ñemote;

372 
	`li°_push_back
(&
ªmŸe
->
£ssi⁄s
, &
s
->
node
);

373 
	`hm≠_öô
(&
s
->
åiggîs
);

374 
	`hm≠_öô
(&
s
->
m⁄ô‹s
);

375 
s
->
js
 = js;

376 
s
->
js_£qno
 = 
	`js⁄Ωc_£ssi⁄_gë_£qno
(
js
);

378 
ªmŸe
->
£rvî
->
n_£ssi⁄s
++;

380  
s
;

381 
	}
}

384 
	$ovsdb_js⁄Ωc_£ssi⁄_˛o£
(
ovsdb_js⁄Ωc_£ssi⁄
 *
s
)

386 
	`ovsdb_js⁄Ωc_m⁄ô‹_ªmove_Æl
(
s
);

387 
	`ovsdb_js⁄Ωc_£ssi⁄_u∆ock_Æl
(
s
);

388 
	`js⁄Ωc_£ssi⁄_˛o£
(
s
->
js
);

389 
	`li°_ªmove
(&
s
->
node
);

390 
s
->
ªmŸe
->
£rvî
->
n_£ssi⁄s
--;

391 
	`ovsdb_£ssi⁄_de°roy
(&
s
->
up
);

392 
	`‰ì
(
s
);

393 
	}
}

396 
	$ovsdb_js⁄Ωc_£ssi⁄_run
(
ovsdb_js⁄Ωc_£ssi⁄
 *
s
)

398 
	`js⁄Ωc_£ssi⁄_run
(
s
->
js
);

399 i‡(
s
->
js_£qno
 !
	`js⁄Ωc_£ssi⁄_gë_£qno
(s->
js
)) {

400 
s
->
js_£qno
 = 
	`js⁄Ωc_£ssi⁄_gë_£qno
(s->
js
);

401 
	`ovsdb_js⁄Ωc_åiggî_com∂ëe_Æl
(
s
);

402 
	`ovsdb_js⁄Ωc_m⁄ô‹_ªmove_Æl
(
s
);

403 
	`ovsdb_js⁄Ωc_£ssi⁄_u∆ock_Æl
(
s
);

406 
	`ovsdb_js⁄Ωc_åiggî_com∂ëe_d⁄e
(
s
);

408 i‡(!
	`js⁄Ωc_£ssi⁄_gë_backlog
(
s
->
js
)) {

409 
js⁄Ωc_msg
 *
msg
 = 
	`js⁄Ωc_£ssi⁄_ªcv
(
s
->
js
);

410 i‡(
msg
) {

411 i‡(
msg
->
ty≥
 =
JSONRPC_REQUEST
) {

412 
	`ovsdb_js⁄Ωc_£ssi⁄_gŸ_ªque°
(
s
, 
msg
);

413 } i‡(
msg
->
ty≥
 =
JSONRPC_NOTIFY
) {

414 
	`ovsdb_js⁄Ωc_£ssi⁄_gŸ_nŸify
(
s
, 
msg
);

416 
	`VLOG_WARN
("%s:Ñeceived unexpected %s message",

417 
	`js⁄Ωc_£ssi⁄_gë_«me
(
s
->
js
),

418 
	`js⁄Ωc_msg_ty≥_to_°rög
(
msg
->
ty≥
));

419 
	`js⁄Ωc_£ssi⁄_f‹˚_ªc⁄√˘
(
s
->
js
);

420 
	`js⁄Ωc_msg_de°roy
(
msg
);

424  
	`js⁄Ωc_£ssi⁄_is_Æive
(
s
->
js
Ë? 0 : 
ETIMEDOUT
;

425 
	}
}

428 
	$ovsdb_js⁄Ωc_£ssi⁄_£t_›ti⁄s
(
ovsdb_js⁄Ωc_£ssi⁄
 *
£ssi⁄
,

429 c⁄° 
ovsdb_js⁄Ωc_›ti⁄s
 *
›ti⁄s
)

431 
	`js⁄Ωc_£ssi⁄_£t_max_backoff
(
£ssi⁄
->
js
, 
›ti⁄s
->
max_backoff
);

432 
	`js⁄Ωc_£ssi⁄_£t_¥obe_öãrvÆ
(
£ssi⁄
->
js
, 
›ti⁄s
->
¥obe_öãrvÆ
);

433 
	`js⁄Ωc_£ssi⁄_£t_ds˝
(
£ssi⁄
->
js
, 
›ti⁄s
->
ds˝
);

434 
	}
}

437 
	$ovsdb_js⁄Ωc_£ssi⁄_run_Æl
(
ovsdb_js⁄Ωc_ªmŸe
 *
ªmŸe
)

439 
ovsdb_js⁄Ωc_£ssi⁄
 *
s
, *
√xt
;

441 
	`LIST_FOR_EACH_SAFE
 (
s
, 
√xt
, 
node
, &
ªmŸe
->
£ssi⁄s
) {

442 
îr‹
 = 
	`ovsdb_js⁄Ωc_£ssi⁄_run
(
s
);

443 i‡(
îr‹
) {

444 
	`ovsdb_js⁄Ωc_£ssi⁄_˛o£
(
s
);

447 
	}
}

450 
	$ovsdb_js⁄Ωc_£ssi⁄_waô
(
ovsdb_js⁄Ωc_£ssi⁄
 *
s
)

452 
	`js⁄Ωc_£ssi⁄_waô
(
s
->
js
);

453 i‡(!
	`js⁄Ωc_£ssi⁄_gë_backlog
(
s
->
js
)) {

454 
	`js⁄Ωc_£ssi⁄_ªcv_waô
(
s
->
js
);

456 
	}
}

459 
	$ovsdb_js⁄Ωc_£ssi⁄_waô_Æl
(
ovsdb_js⁄Ωc_ªmŸe
 *
ªmŸe
)

461 
ovsdb_js⁄Ωc_£ssi⁄
 *
s
;

463 
	`LIST_FOR_EACH
 (
s
, 
node
, &
ªmŸe
->
£ssi⁄s
) {

464 
	`ovsdb_js⁄Ωc_£ssi⁄_waô
(
s
);

466 
	}
}

469 
	$ovsdb_js⁄Ωc_£ssi⁄_gë_mem‹y_ußge
(c⁄° 
ovsdb_js⁄Ωc_£ssi⁄
 *
s
,

470 
sim≠
 *
ußge
)

472 
	`sim≠_ö¸ó£
(
ußge
, "åiggîs", 
	`hm≠_cou¡
(&
s
->
åiggîs
));

473 
	`sim≠_ö¸ó£
(
ußge
, "m⁄ô‹s", 
	`hm≠_cou¡
(&
s
->
m⁄ô‹s
));

474 
	`sim≠_ö¸ó£
(
ußge
, "backlog", 
	`js⁄Ωc_£ssi⁄_gë_backlog
(
s
->
js
));

475 
	}
}

478 
	$ovsdb_js⁄Ωc_£ssi⁄_gë_mem‹y_ußge_Æl
(

479 c⁄° 
ovsdb_js⁄Ωc_ªmŸe
 *
ªmŸe
,

480 
sim≠
 *
ußge
)

482 
ovsdb_js⁄Ωc_£ssi⁄
 *
s
;

484 
	`LIST_FOR_EACH
 (
s
, 
node
, &
ªmŸe
->
£ssi⁄s
) {

485 
	`ovsdb_js⁄Ωc_£ssi⁄_gë_mem‹y_ußge
(
s
, 
ußge
);

487 
	}
}

490 
	$ovsdb_js⁄Ωc_£ssi⁄_˛o£_Æl
(
ovsdb_js⁄Ωc_ªmŸe
 *
ªmŸe
)

492 
ovsdb_js⁄Ωc_£ssi⁄
 *
s
, *
√xt
;

494 
	`LIST_FOR_EACH_SAFE
 (
s
, 
√xt
, 
node
, &
ªmŸe
->
£ssi⁄s
) {

495 
	`ovsdb_js⁄Ωc_£ssi⁄_˛o£
(
s
);

497 
	}
}

502 
	$ovsdb_js⁄Ωc_£ssi⁄_ªc⁄√˘_Æl
(
ovsdb_js⁄Ωc_ªmŸe
 *
ªmŸe
)

504 
ovsdb_js⁄Ωc_£ssi⁄
 *
s
, *
√xt
;

506 
	`LIST_FOR_EACH_SAFE
 (
s
, 
√xt
, 
node
, &
ªmŸe
->
£ssi⁄s
) {

507 
	`js⁄Ωc_£ssi⁄_f‹˚_ªc⁄√˘
(
s
->
js
);

508 i‡(!
	`js⁄Ωc_£ssi⁄_is_Æive
(
s
->
js
)) {

509 
	`ovsdb_js⁄Ωc_£ssi⁄_˛o£
(
s
);

512 
	}
}

517 
	$ovsdb_js⁄Ωc_£ssi⁄_£t_Æl_›ti⁄s
(

518 
ovsdb_js⁄Ωc_ªmŸe
 *
ªmŸe
,

519 c⁄° 
ovsdb_js⁄Ωc_›ti⁄s
 *
›ti⁄s
)

521 
ovsdb_js⁄Ωc_£ssi⁄
 *
s
;

523 i‡(
ªmŸe
->
li°íî
) {

524 
îr‹
;

526 
îr‹
 = 
	`p°ªam_£t_ds˝
(
ªmŸe
->
li°íî
, 
›ti⁄s
->
ds˝
);

527 i‡(
îr‹
) {

528 
	`VLOG_ERR
("%s: set_dscp failed %s",

529 
	`p°ªam_gë_«me
(
ªmŸe
->
li°íî
), 
	`°ªº‹
(
îr‹
));

531 
ªmŸe
->
ds˝
 = 
›ti⁄s
->dscp;

539 
	`LIST_FOR_EACH
 (
s
, 
node
, &
ªmŸe
->
£ssi⁄s
) {

540 
	`ovsdb_js⁄Ωc_£ssi⁄_£t_›ti⁄s
(
s
, 
›ti⁄s
);

542 
	}
}

544 
boﬁ


545 
	$ovsdb_js⁄Ωc_£ssi⁄_gë_°©us
(c⁄° 
ovsdb_js⁄Ωc_ªmŸe
 *
ªmŸe
,

546 
ovsdb_js⁄Ωc_ªmŸe_°©us
 *
°©us
)

548 c⁄° 
ovsdb_js⁄Ωc_£ssi⁄
 *
s
;

549 c⁄° 
js⁄Ωc_£ssi⁄
 *
js
;

550 
ovsdb_lock_waôî
 *
waôî
;

551 
ªc⁄√˘_°©s
 
r°©s
;

552 
ds
 
locks_hñd
, 
locks_waôög
, 
locks_lo°
;

554 i‡(
	`li°_is_em±y
(&
ªmŸe
->
£ssi⁄s
)) {

555  
Ál£
;

557 
s
 = 
	`CONTAINER_OF
(
ªmŸe
->
£ssi⁄s
.
√xt
, 
ovsdb_js⁄Ωc_£ssi⁄
, 
node
);

558 
js
 = 
s
->js;

560 
°©us
->
is_c⁄√˘ed
 = 
	`js⁄Ωc_£ssi⁄_is_c⁄√˘ed
(
js
);

561 
°©us
->
œ°_îr‹
 = 
	`js⁄Ωc_£ssi⁄_gë_°©us
(
js
);

563 
	`js⁄Ωc_£ssi⁄_gë_ªc⁄√˘_°©s
(
js
, &
r°©s
);

564 
°©us
->
°©e
 = 
r°©s
.state;

565 
°©us
->
£c_sö˚_c⁄√˘
 = 
r°©s
.
m£c_sö˚_c⁄√˘
 =
UINT_MAX


566 ? 
UINT_MAX
 : 
r°©s
.
m£c_sö˚_c⁄√˘
 / 1000;

567 
°©us
->
£c_sö˚_disc⁄√˘
 = 
r°©s
.
m£c_sö˚_disc⁄√˘
 =
UINT_MAX


568 ? 
UINT_MAX
 : 
r°©s
.
m£c_sö˚_disc⁄√˘
 / 1000;

570 
	`ds_öô
(&
locks_hñd
);

571 
	`ds_öô
(&
locks_waôög
);

572 
	`ds_öô
(&
locks_lo°
);

573 
	`HMAP_FOR_EACH
 (
waôî
, 
£ssi⁄_node
, &
s
->
up
.
waôîs
) {

574 
ds
 *
°rög
;

576 
°rög
 = (
	`ovsdb_lock_waôî_is_ow√r
(
waôî
Ë? &
locks_hñd


577 : 
waôî
->
mode
 =
OVSDB_LOCK_WAIT
 ? &
locks_waôög


578 : &
locks_lo°
);

579 i‡(
°rög
->
Àngth
) {

580 
	`ds_put_ch¨
(
°rög
, ' ');

582 
	`ds_put_c°r
(
°rög
, 
waôî
->
lock_«me
);

584 
°©us
->
locks_hñd
 = 
	`ds_°ól_c°r
(&locks_held);

585 
°©us
->
locks_waôög
 = 
	`ds_°ól_c°r
(&locks_waiting);

586 
°©us
->
locks_lo°
 = 
	`ds_°ól_c°r
(&locks_lost);

588 
°©us
->
n_c⁄√˘i⁄s
 = 
	`li°_size
(&
ªmŸe
->
£ssi⁄s
);

590  
åue
;

591 
	}
}

600 
ovsdb
 *

601 
	$ovsdb_js⁄Ωc_lookup_db
(c⁄° 
ovsdb_js⁄Ωc_£ssi⁄
 *
s
,

602 c⁄° 
js⁄Ωc_msg
 *
ªque°
,

603 
js⁄Ωc_msg
 **
ª∂yp
)

605 
js⁄_¨øy
 *
∑øms
;

606 
ovsdb_îr‹
 *
îr‹
;

607 c⁄° *
db_«me
;

608 
ovsdb
 *
db
;

610 
∑øms
 = 
	`js⁄_¨øy
(
ªque°
->params);

611 i‡(!
∑øms
->
n
 ||Ö¨ams->
ñems
[0]->
ty≥
 !
JSON_STRING
) {

612 
îr‹
 = 
	`ovsdb_sy¡ax_îr‹
(

613 
ªque°
->
∑øms
, 
NULL
,

614 "%†ªque°Ö¨am†mu° begö wôh <db-«me>", 
ªque°
->
mëhod
);

615 
îr‹
;

618 
db_«me
 = 
∑øms
->
ñems
[0]->
u
.
°rög
;

619 
db
 = 
	`shash_föd_d©a
(&
s
->
up
.
£rvî
->
dbs
, 
db_«me
);

620 i‡(!
db
) {

621 
îr‹
 = 
	`ovsdb_sy¡ax_îr‹
(

622 
ªque°
->
∑øms
, "unknown database",

624 
ªque°
->
mëhod
, 
db_«me
);

625 
îr‹
;

628 *
ª∂yp
 = 
NULL
;

629  
db
;

631 
îr‹
:

632 *
ª∂yp
 = 
	`js⁄Ωc_¸óã_ª∂y
(
	`ovsdb_îr‹_to_js⁄
(
îr‹
), 
ªque°
->
id
);

633 
	`ovsdb_îr‹_de°roy
(
îr‹
);

634  
NULL
;

635 
	}
}

637 
ovsdb_îr‹
 *

638 
	$ovsdb_js⁄Ωc_£ssi⁄_∑r£_lock_«me
(c⁄° 
js⁄Ωc_msg
 *
ªque°
,

639 c⁄° **
lock_«mï
)

641 c⁄° 
js⁄_¨øy
 *
∑øms
;

643 
∑øms
 = 
	`js⁄_¨øy
(
ªque°
->params);

644 i‡(
∑øms
->
n
 !1 ||Ö¨ams->
ñems
[0]->
ty≥
 !
JSON_STRING
 ||

645 !
	`ovsdb_∑r£r_is_id
(
	`js⁄_°rög
(
∑øms
->
ñems
[0]))) {

646 *
lock_«mï
 = 
NULL
;

647  
	`ovsdb_sy¡ax_îr‹
(
ªque°
->
∑øms
, 
NULL
,

649 
ªque°
->
mëhod
);

652 *
lock_«mï
 = 
	`js⁄_°rög
(
∑øms
->
ñems
[0]);

653  
NULL
;

654 
	}
}

657 
	$ovsdb_js⁄Ωc_£ssi⁄_nŸify
(
ovsdb_£ssi⁄
 *
£ssi⁄
,

658 c⁄° *
lock_«me
,

659 c⁄° *
mëhod
)

661 
ovsdb_js⁄Ωc_£ssi⁄
 *
s
;

662 
js⁄
 *
∑øms
;

664 
s
 = 
	`CONTAINER_OF
(
£ssi⁄
, 
ovsdb_js⁄Ωc_£ssi⁄
, 
up
);

665 
∑øms
 = 
	`js⁄_¨øy_¸óã_1
(
	`js⁄_°rög_¸óã
(
lock_«me
));

666 
	`js⁄Ωc_£ssi⁄_£nd
(
s
->
js
, 
	`js⁄Ωc_¸óã_nŸify
(
mëhod
, 
∑øms
));

667 
	}
}

669 
js⁄Ωc_msg
 *

670 
	$ovsdb_js⁄Ωc_£ssi⁄_lock
(
ovsdb_js⁄Ωc_£ssi⁄
 *
s
,

671 
js⁄Ωc_msg
 *
ªque°
,

672 
ovsdb_lock_mode
 
mode
)

674 
ovsdb_lock_waôî
 *
waôî
;

675 
js⁄Ωc_msg
 *
ª∂y
;

676 
ovsdb_îr‹
 *
îr‹
;

677 
ovsdb_£ssi⁄
 *
vi˘im
;

678 c⁄° *
lock_«me
;

679 
js⁄
 *
ªsu…
;

681 
îr‹
 = 
	`ovsdb_js⁄Ωc_£ssi⁄_∑r£_lock_«me
(
ªque°
, &
lock_«me
);

682 i‡(
îr‹
) {

683 
îr‹
;

688 
waôî
 = 
	`ovsdb_£ssi⁄_gë_lock_waôî
(&
s
->
up
, 
lock_«me
);

689 i‡(
waôî
) {

690 
îr‹
 = 
	`ovsdb_sy¡ax_îr‹
(

691 
ªque°
->
∑øms
, 
NULL
,

692 "mu° issuê\"u∆ock\" bef‹ê√w \"%s\"", 
ªque°
->
mëhod
);

693 
îr‹
;

697 
waôî
 = 
	`ovsdb_£rvî_lock
(&
s
->
ªmŸe
->
£rvî
->
up
, &s->up, 
lock_«me
, 
mode
,

698 &
vi˘im
);

699 i‡(
vi˘im
) {

700 
	`ovsdb_js⁄Ωc_£ssi⁄_nŸify
(
vi˘im
, 
lock_«me
, "stolen");

703 
ªsu…
 = 
	`js⁄_obje˘_¸óã
();

704 
	`js⁄_obje˘_put
(
ªsu…
, "locked",

705 
	`js⁄_boﬁón_¸óã
(
	`ovsdb_lock_waôî_is_ow√r
(
waôî
)));

707  
	`js⁄Ωc_¸óã_ª∂y
(
ªsu…
, 
ªque°
->
id
);

709 
îr‹
:

710 
ª∂y
 = 
	`js⁄Ωc_¸óã_ª∂y
(
	`ovsdb_îr‹_to_js⁄
(
îr‹
), 
ªque°
->
id
);

711 
	`ovsdb_îr‹_de°roy
(
îr‹
);

712  
ª∂y
;

713 
	}
}

716 
	$ovsdb_js⁄Ωc_£ssi⁄_u∆ock_Æl
(
ovsdb_js⁄Ωc_£ssi⁄
 *
s
)

718 
ovsdb_lock_waôî
 *
waôî
, *
√xt
;

720 
	`HMAP_FOR_EACH_SAFE
 (
waôî
, 
√xt
, 
£ssi⁄_node
, &
s
->
up
.
waôîs
) {

721 
	`ovsdb_js⁄Ωc_£ssi⁄_u∆ock__
(
waôî
);

723 
	}
}

726 
	$ovsdb_js⁄Ωc_£ssi⁄_u∆ock__
(
ovsdb_lock_waôî
 *
waôî
)

728 
ovsdb_lock
 *
lock
 = 
waôî
->lock;

730 i‡(
lock
) {

731 
ovsdb_£ssi⁄
 *
√w_ow√r
 = 
	`ovsdb_lock_waôî_ªmove
(
waôî
);

732 i‡(
√w_ow√r
) {

733 
	`ovsdb_js⁄Ωc_£ssi⁄_nŸify
(
√w_ow√r
, 
lock
->
«me
, "locked");

739 
	`ovsdb_lock_waôî_de°roy
(
waôî
);

740 
	}
}

742 
js⁄Ωc_msg
 *

743 
	$ovsdb_js⁄Ωc_£ssi⁄_u∆ock
(
ovsdb_js⁄Ωc_£ssi⁄
 *
s
,

744 
js⁄Ωc_msg
 *
ªque°
)

746 
ovsdb_lock_waôî
 *
waôî
;

747 
js⁄Ωc_msg
 *
ª∂y
;

748 
ovsdb_îr‹
 *
îr‹
;

749 c⁄° *
lock_«me
;

751 
îr‹
 = 
	`ovsdb_js⁄Ωc_£ssi⁄_∑r£_lock_«me
(
ªque°
, &
lock_«me
);

752 i‡(
îr‹
) {

753 
îr‹
;

758 
waôî
 = 
	`ovsdb_£ssi⁄_gë_lock_waôî
(&
s
->
up
, 
lock_«me
);

759 i‡(!
waôî
) {

760 
îr‹
 = 
	`ovsdb_sy¡ax_îr‹
(

761 
ªque°
->
∑øms
, 
NULL
, "\"unlock\" without \"lock\" or \"steal\"");

762 
îr‹
;

765 
	`ovsdb_js⁄Ωc_£ssi⁄_u∆ock__
(
waôî
);

767  
	`js⁄Ωc_¸óã_ª∂y
(
	`js⁄_obje˘_¸óã
(), 
ªque°
->
id
);

769 
îr‹
:

770 
ª∂y
 = 
	`js⁄Ωc_¸óã_ª∂y
(
	`ovsdb_îr‹_to_js⁄
(
îr‹
), 
ªque°
->
id
);

771 
	`ovsdb_îr‹_de°roy
(
îr‹
);

772  
ª∂y
;

773 
	}
}

775 
js⁄Ωc_msg
 *

776 
	$execuã_å™ß˘i⁄
(
ovsdb_js⁄Ωc_£ssi⁄
 *
s
, 
ovsdb
 *
db
,

777 
js⁄Ωc_msg
 *
ªque°
)

779 
	`ovsdb_js⁄Ωc_åiggî_¸óã
(
s
, 
db
, 
ªque°
->
id
,Ñeque°->
∑øms
);

780 
ªque°
->
id
 = 
NULL
;

781 
ªque°
->
∑øms
 = 
NULL
;

782 
	`js⁄Ωc_msg_de°roy
(
ªque°
);

783  
NULL
;

784 
	}
}

787 
	$ovsdb_js⁄Ωc_£ssi⁄_gŸ_ªque°
(
ovsdb_js⁄Ωc_£ssi⁄
 *
s
,

788 
js⁄Ωc_msg
 *
ªque°
)

790 
js⁄Ωc_msg
 *
ª∂y
;

792 i‡(!
	`°rcmp
(
ªque°
->
mëhod
, "transact")) {

793 
ovsdb
 *
db
 = 
	`ovsdb_js⁄Ωc_lookup_db
(
s
, 
ªque°
, &
ª∂y
);

794 i‡(!
ª∂y
) {

795 
ª∂y
 = 
	`execuã_å™ß˘i⁄
(
s
, 
db
, 
ªque°
);

797 } i‡(!
	`°rcmp
(
ªque°
->
mëhod
, "monitor")) {

798 
ovsdb
 *
db
 = 
	`ovsdb_js⁄Ωc_lookup_db
(
s
, 
ªque°
, &
ª∂y
);

799 i‡(!
ª∂y
) {

800 
ª∂y
 = 
	`js⁄Ωc_¸óã_ª∂y
(

801 
	`ovsdb_js⁄Ωc_m⁄ô‹_¸óã
(
s
, 
db
, 
ªque°
->
∑øms
),

802 
ªque°
->
id
);

804 } i‡(!
	`°rcmp
(
ªque°
->
mëhod
, "monitor_cancel")) {

805 
ª∂y
 = 
	`ovsdb_js⁄Ωc_m⁄ô‹_ˇn˚l
(
s
, 
	`js⁄_¨øy
(
ªque°
->
∑øms
),

806 
ªque°
->
id
);

807 } i‡(!
	`°rcmp
(
ªque°
->
mëhod
, "get_schema")) {

808 
ovsdb
 *
db
 = 
	`ovsdb_js⁄Ωc_lookup_db
(
s
, 
ªque°
, &
ª∂y
);

809 i‡(!
ª∂y
) {

810 
ª∂y
 = 
	`js⁄Ωc_¸óã_ª∂y
(
	`ovsdb_schema_to_js⁄
(
db
->
schema
),

811 
ªque°
->
id
);

813 } i‡(!
	`°rcmp
(
ªque°
->
mëhod
, "list_dbs")) {

814 
size_t
 
n_dbs
 = 
	`shash_cou¡
(&
s
->
up
.
£rvî
->
dbs
);

815 
shash_node
 *
node
;

816 
js⁄
 **
dbs
;

817 
size_t
 
i
;

819 
dbs
 = 
	`xmÆloc
(
n_dbs
 *  *dbs);

820 
i
 = 0;

821 
	`SHASH_FOR_EACH
 (
node
, &
s
->
up
.
£rvî
->
dbs
) {

822 
dbs
[
i
++] = 
	`js⁄_°rög_¸óã
(
node
->
«me
);

824 
ª∂y
 = 
	`js⁄Ωc_¸óã_ª∂y
(
	`js⁄_¨øy_¸óã
(
dbs
, 
n_dbs
),

825 
ªque°
->
id
);

826 } i‡(!
	`°rcmp
(
ªque°
->
mëhod
, "lock")) {

827 
ª∂y
 = 
	`ovsdb_js⁄Ωc_£ssi⁄_lock
(
s
, 
ªque°
, 
OVSDB_LOCK_WAIT
);

828 } i‡(!
	`°rcmp
(
ªque°
->
mëhod
, "steal")) {

829 
ª∂y
 = 
	`ovsdb_js⁄Ωc_£ssi⁄_lock
(
s
, 
ªque°
, 
OVSDB_LOCK_STEAL
);

830 } i‡(!
	`°rcmp
(
ªque°
->
mëhod
, "unlock")) {

831 
ª∂y
 = 
	`ovsdb_js⁄Ωc_£ssi⁄_u∆ock
(
s
, 
ªque°
);

832 } i‡(!
	`°rcmp
(
ªque°
->
mëhod
, "echo")) {

833 
ª∂y
 = 
	`js⁄Ωc_¸óã_ª∂y
(
	`js⁄_˛⁄e
(
ªque°
->
∑øms
),Ñeque°->
id
);

835 
ª∂y
 = 
	`js⁄Ωc_¸óã_îr‹
(
	`js⁄_°rög_¸óã
("unknown method"),

836 
ªque°
->
id
);

839 i‡(
ª∂y
) {

840 
	`js⁄Ωc_msg_de°roy
(
ªque°
);

841 
	`js⁄Ωc_£ssi⁄_£nd
(
s
->
js
, 
ª∂y
);

843 
	}
}

846 
	$execuã_ˇn˚l
(
ovsdb_js⁄Ωc_£ssi⁄
 *
s
, 
js⁄Ωc_msg
 *
ªque°
)

848 i‡(
	`js⁄_¨øy
(
ªque°
->
∑øms
)->
n
 == 1) {

849 
ovsdb_js⁄Ωc_åiggî
 *
t
;

850 
js⁄
 *
id
;

852 
id
 = 
ªque°
->
∑øms
->
u
.
¨øy
.
ñems
[0];

853 
t
 = 
	`ovsdb_js⁄Ωc_åiggî_föd
(
s
, 
id
, 
	`js⁄_hash
(id, 0));

854 i‡(
t
) {

855 
	`ovsdb_js⁄Ωc_åiggî_com∂ëe
(
t
);

858 
	}
}

861 
	$ovsdb_js⁄Ωc_£ssi⁄_gŸ_nŸify
(
ovsdb_js⁄Ωc_£ssi⁄
 *
s
,

862 
js⁄Ωc_msg
 *
ªque°
)

864 i‡(!
	`°rcmp
(
ªque°
->
mëhod
, "cancel")) {

865 
	`execuã_ˇn˚l
(
s
, 
ªque°
);

867 
	`js⁄Ωc_msg_de°roy
(
ªque°
);

868 
	}
}

875 
	sovsdb_js⁄Ωc_åiggî
 {

876 
ovsdb_åiggî
 
	måiggî
;

877 
hm≠_node
 
	mhm≠_node
;

878 
js⁄
 *
	mid
;

882 
	$ovsdb_js⁄Ωc_åiggî_¸óã
(
ovsdb_js⁄Ωc_£ssi⁄
 *
s
, 
ovsdb
 *
db
,

883 
js⁄
 *
id
, js⁄ *
∑øms
)

885 
ovsdb_js⁄Ωc_åiggî
 *
t
;

886 
size_t
 
hash
;

889 
hash
 = 
	`js⁄_hash
(
id
, 0);

890 
t
 = 
	`ovsdb_js⁄Ωc_åiggî_föd
(
s
, 
id
, 
hash
);

891 i‡(
t
) {

892 
js⁄Ωc_msg
 *
msg
;

894 
msg
 = 
	`js⁄Ωc_¸óã_îr‹
(
	`js⁄_°rög_¸óã
("duplicateÑequest ID"),

895 
id
);

896 
	`js⁄Ωc_£ssi⁄_£nd
(
s
->
js
, 
msg
);

897 
	`js⁄_de°roy
(
id
);

898 
	`js⁄_de°roy
(
∑øms
);

903 
t
 = 
	`xmÆloc
( *t);

904 
	`ovsdb_åiggî_öô
(&
s
->
up
, 
db
, &
t
->
åiggî
, 
∑øms
, 
	`time_m£c
());

905 
t
->
id
 = id;

906 
	`hm≠_ö£π
(&
s
->
åiggîs
, &
t
->
hm≠_node
, 
hash
);

909 i‡(
	`ovsdb_åiggî_is_com∂ëe
(&
t
->
åiggî
)) {

910 
	`ovsdb_js⁄Ωc_åiggî_com∂ëe
(
t
);

912 
	}
}

914 
ovsdb_js⁄Ωc_åiggî
 *

915 
	$ovsdb_js⁄Ωc_åiggî_föd
(
ovsdb_js⁄Ωc_£ssi⁄
 *
s
,

916 c⁄° 
js⁄
 *
id
, 
size_t
 
hash
)

918 
ovsdb_js⁄Ωc_åiggî
 *
t
;

920 
	`HMAP_FOR_EACH_WITH_HASH
 (
t
, 
hm≠_node
, 
hash
, &
s
->
åiggîs
) {

921 i‡(
	`js⁄_equÆ
(
t
->
id
, id)) {

922  
t
;

926  
NULL
;

927 
	}
}

930 
	$ovsdb_js⁄Ωc_åiggî_com∂ëe
(
ovsdb_js⁄Ωc_åiggî
 *
t
)

932 
ovsdb_js⁄Ωc_£ssi⁄
 *
s
;

934 
s
 = 
	`CONTAINER_OF
(
t
->
åiggî
.
£ssi⁄
, 
ovsdb_js⁄Ωc_£ssi⁄
, 
up
);

936 i‡(
	`js⁄Ωc_£ssi⁄_is_c⁄√˘ed
(
s
->
js
)) {

937 
js⁄Ωc_msg
 *
ª∂y
;

938 
js⁄
 *
ªsu…
;

940 
ªsu…
 = 
	`ovsdb_åiggî_°ól_ªsu…
(&
t
->
åiggî
);

941 i‡(
ªsu…
) {

942 
ª∂y
 = 
	`js⁄Ωc_¸óã_ª∂y
(
ªsu…
, 
t
->
id
);

944 
ª∂y
 = 
	`js⁄Ωc_¸óã_îr‹
(
	`js⁄_°rög_¸óã
("canceled"),

945 
t
->
id
);

947 
	`js⁄Ωc_£ssi⁄_£nd
(
s
->
js
, 
ª∂y
);

950 
	`js⁄_de°roy
(
t
->
id
);

951 
	`ovsdb_åiggî_de°roy
(&
t
->
åiggî
);

952 
	`hm≠_ªmove
(&
s
->
åiggîs
, &
t
->
hm≠_node
);

953 
	`‰ì
(
t
);

954 
	}
}

957 
	$ovsdb_js⁄Ωc_åiggî_com∂ëe_Æl
(
ovsdb_js⁄Ωc_£ssi⁄
 *
s
)

959 
ovsdb_js⁄Ωc_åiggî
 *
t
, *
√xt
;

960 
	`HMAP_FOR_EACH_SAFE
 (
t
, 
√xt
, 
hm≠_node
, &
s
->
åiggîs
) {

961 
	`ovsdb_js⁄Ωc_åiggî_com∂ëe
(
t
);

963 
	}
}

966 
	$ovsdb_js⁄Ωc_åiggî_com∂ëe_d⁄e
(
ovsdb_js⁄Ωc_£ssi⁄
 *
s
)

968 !
	`li°_is_em±y
(&
s
->
up
.
com∂ëi⁄s
)) {

969 
ovsdb_js⁄Ωc_åiggî
 *
t


970 
	`CONTAINER_OF
(
s
->
up
.
com∂ëi⁄s
.
√xt
,

971 
ovsdb_js⁄Ωc_åiggî
, 
åiggî
.
node
);

972 
	`ovsdb_js⁄Ωc_åiggî_com∂ëe
(
t
);

974 
	}
}

978 
	eovsdb_js⁄Ωc_m⁄ô‹_£À˘i⁄
 {

979 
	mOJMS_INITIAL
 = 1 << 0,

980 
	mOJMS_INSERT
 = 1 << 1,

981 
	mOJMS_DELETE
 = 1 << 2,

982 
	mOJMS_MODIFY
 = 1 << 3

986 
	sovsdb_js⁄Ωc_m⁄ô‹_cﬁumn
 {

987 c⁄° 
ovsdb_cﬁumn
 *
	mcﬁumn
;

988 
ovsdb_js⁄Ωc_m⁄ô‹_£À˘i⁄
 
	m£À˘
;

992 
	sovsdb_js⁄Ωc_m⁄ô‹_èbÀ
 {

993 c⁄° 
ovsdb_èbÀ
 *
	mèbÀ
;

997 
ovsdb_js⁄Ωc_m⁄ô‹_£À˘i⁄
 
	m£À˘
;

1000 
ovsdb_js⁄Ωc_m⁄ô‹_cﬁumn
 *
	mcﬁumns
;

1001 
size_t
 
	mn_cﬁumns
;

1005 
	sovsdb_js⁄Ωc_m⁄ô‹
 {

1006 
ovsdb_ª∂iˇ
 
	mª∂iˇ
;

1007 
ovsdb_js⁄Ωc_£ssi⁄
 *
	m£ssi⁄
;

1008 
ovsdb
 *
	mdb
;

1009 
hm≠_node
 
	mnode
;

1011 
js⁄
 *
	mm⁄ô‹_id
;

1012 
shash
 
	mèbÀs
;

1015 c⁄° 
ovsdb_ª∂iˇ_˛ass
 
	govsdb_js⁄Ωc_ª∂iˇ_˛ass
;

1017 
ovsdb_js⁄Ωc_m⁄ô‹
 *
ovsdb_js⁄Ωc_m⁄ô‹_föd
(

1018 
ovsdb_js⁄Ωc_£ssi⁄
 *, c⁄° 
js⁄
 *
m⁄ô‹_id
);

1019 
ovsdb_js⁄Ωc_m⁄ô‹_de°roy
(
ovsdb_ª∂iˇ
 *);

1020 
js⁄
 *
ovsdb_js⁄Ωc_m⁄ô‹_gë_öôül
(

1021 c⁄° 
ovsdb_js⁄Ωc_m⁄ô‹
 *);

1023 
boﬁ


1024 
	$∑r£_boﬁ
(
ovsdb_∑r£r
 *
∑r£r
, c⁄° *
«me
, 
boﬁ
 
deÁu…_vÆue
)

1026 c⁄° 
js⁄
 *json;

1028 
js⁄
 = 
	`ovsdb_∑r£r_membî
(
∑r£r
, 
«me
, 
OP_BOOLEAN
 | 
OP_OPTIONAL
);

1029  
js⁄
 ? 
	`js⁄_boﬁón
(js⁄Ë: 
deÁu…_vÆue
;

1030 
	}
}

1032 
ovsdb_js⁄Ωc_m⁄ô‹
 *

1033 
	$ovsdb_js⁄Ωc_m⁄ô‹_föd
(
ovsdb_js⁄Ωc_£ssi⁄
 *
s
,

1034 c⁄° 
js⁄
 *
m⁄ô‹_id
)

1036 
ovsdb_js⁄Ωc_m⁄ô‹
 *
m
;

1038 
	`HMAP_FOR_EACH_WITH_HASH
 (
m
, 
node
, 
	`js⁄_hash
(
m⁄ô‹_id
, 0), &
s
->
m⁄ô‹s
) {

1039 i‡(
	`js⁄_equÆ
(
m
->
m⁄ô‹_id
, monitor_id)) {

1040  
m
;

1044  
NULL
;

1045 
	}
}

1048 
	$ovsdb_js⁄Ωc_add_m⁄ô‹_cﬁumn
(
ovsdb_js⁄Ωc_m⁄ô‹_èbÀ
 *
mt
,

1049 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
,

1050 
ovsdb_js⁄Ωc_m⁄ô‹_£À˘i⁄
 
£À˘
,

1051 
size_t
 *
Æloˇãd_cﬁumns
)

1053 
ovsdb_js⁄Ωc_m⁄ô‹_cﬁumn
 *
c
;

1055 i‡(
mt
->
n_cﬁumns
 >*
Æloˇãd_cﬁumns
) {

1056 
mt
->
cﬁumns
 = 
	`x2ƒóŒoc
(mt->cﬁumns, 
Æloˇãd_cﬁumns
,

1057  *
mt
->
cﬁumns
);

1060 
c
 = &
mt
->
cﬁumns
[mt->
n_cﬁumns
++];

1061 
c
->
cﬁumn
 = column;

1062 
c
->
£À˘
 = select;

1063 
	}
}

1066 
	$com∑ª_ovsdb_js⁄Ωc_m⁄ô‹_cﬁumn
(c⁄° *
a_
, c⁄° *
b_
)

1068 c⁄° 
ovsdb_js⁄Ωc_m⁄ô‹_cﬁumn
 *
a
 = 
a_
;

1069 c⁄° 
ovsdb_js⁄Ωc_m⁄ô‹_cﬁumn
 *
b
 = 
b_
;

1071  
a
->
cﬁumn
 < 
b
->column ? -1 :á->column > b->column;

1072 
	}
}

1074 
ovsdb_îr‹
 * 
WARN_UNUSED_RESULT


1075 
	$ovsdb_js⁄Ωc_∑r£_m⁄ô‹_ªque°
(
ovsdb_js⁄Ωc_m⁄ô‹_èbÀ
 *
mt
,

1076 c⁄° 
js⁄
 *
m⁄ô‹_ªque°
,

1077 
size_t
 *
Æloˇãd_cﬁumns
)

1079 c⁄° 
ovsdb_èbÀ_schema
 *
ts
 = 
mt
->
èbÀ
->
schema
;

1080 
ovsdb_js⁄Ωc_m⁄ô‹_£À˘i⁄
 
£À˘
;

1081 c⁄° 
js⁄
 *
cﬁumns
, *
£À˘_js⁄
;

1082 
ovsdb_∑r£r
 
∑r£r
;

1083 
ovsdb_îr‹
 *
îr‹
;

1085 
	`ovsdb_∑r£r_öô
(&
∑r£r
, 
m⁄ô‹_ªque°
, "èbÀ %s", 
ts
->
«me
);

1086 
cﬁumns
 = 
	`ovsdb_∑r£r_membî
(&
∑r£r
, "cﬁumns", 
OP_ARRAY
 | 
OP_OPTIONAL
);

1087 
£À˘_js⁄
 = 
	`ovsdb_∑r£r_membî
(&
∑r£r
, "select",

1088 
OP_OBJECT
 | 
OP_OPTIONAL
);

1089 
îr‹
 = 
	`ovsdb_∑r£r_föish
(&
∑r£r
);

1090 i‡(
îr‹
) {

1091  
îr‹
;

1094 i‡(
£À˘_js⁄
) {

1095 
£À˘
 = 0;

1096 
	`ovsdb_∑r£r_öô
(&
∑r£r
, 
£À˘_js⁄
, "èbÀ %†£À˘", 
ts
->
«me
);

1097 i‡(
	`∑r£_boﬁ
(&
∑r£r
, "öôül", 
åue
)) {

1098 
£À˘
 |
OJMS_INITIAL
;

1100 i‡(
	`∑r£_boﬁ
(&
∑r£r
, "ö£π", 
åue
)) {

1101 
£À˘
 |
OJMS_INSERT
;

1103 i‡(
	`∑r£_boﬁ
(&
∑r£r
, "dñëe", 
åue
)) {

1104 
£À˘
 |
OJMS_DELETE
;

1106 i‡(
	`∑r£_boﬁ
(&
∑r£r
, "modify", 
åue
)) {

1107 
£À˘
 |
OJMS_MODIFY
;

1109 
îr‹
 = 
	`ovsdb_∑r£r_föish
(&
∑r£r
);

1110 i‡(
îr‹
) {

1111  
îr‹
;

1114 
£À˘
 = 
OJMS_INITIAL
 | 
OJMS_INSERT
 | 
OJMS_DELETE
 | 
OJMS_MODIFY
;

1116 
mt
->
£À˘
 |= select;

1118 i‡(
cﬁumns
) {

1119 
size_t
 
i
;

1121 i‡(
cﬁumns
->
ty≥
 !
JSON_ARRAY
) {

1122  
	`ovsdb_sy¡ax_îr‹
(
cﬁumns
, 
NULL
,

1126 
i
 = 0; i < 
cﬁumns
->
u
.
¨øy
.
n
; i++) {

1127 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
;

1128 c⁄° *
s
;

1130 i‡(
cﬁumns
->
u
.
¨øy
.
ñems
[
i
]->
ty≥
 !
JSON_STRING
) {

1131  
	`ovsdb_sy¡ax_îr‹
(
cﬁumns
, 
NULL
,

1135 
s
 = 
cﬁumns
->
u
.
¨øy
.
ñems
[
i
]->u.
°rög
;

1136 
cﬁumn
 = 
	`shash_föd_d©a
(&
mt
->
èbÀ
->
schema
->
cﬁumns
, 
s
);

1137 i‡(!
cﬁumn
) {

1138  
	`ovsdb_sy¡ax_îr‹
(
cﬁumns
, 
NULL
, "%s isÇotá valid "

1139 "cﬁum¿«me", 
s
);

1141 
	`ovsdb_js⁄Ωc_add_m⁄ô‹_cﬁumn
(
mt
, 
cﬁumn
, 
£À˘
,

1142 
Æloˇãd_cﬁumns
);

1145 
shash_node
 *
node
;

1147 
	`SHASH_FOR_EACH
 (
node
, &
ts
->
cﬁumns
) {

1148 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
 = 
node
->
d©a
;

1149 i‡(
cﬁumn
->
ödex
 !
OVSDB_COL_UUID
) {

1150 
	`ovsdb_js⁄Ωc_add_m⁄ô‹_cﬁumn
(
mt
, 
cﬁumn
, 
£À˘
,

1151 
Æloˇãd_cﬁumns
);

1156  
NULL
;

1157 
	}
}

1159 
js⁄
 *

1160 
	$ovsdb_js⁄Ωc_m⁄ô‹_¸óã
(
ovsdb_js⁄Ωc_£ssi⁄
 *
s
, 
ovsdb
 *
db
,

1161 
js⁄
 *
∑øms
)

1163 
ovsdb_js⁄Ωc_m⁄ô‹
 *
m
 = 
NULL
;

1164 
js⁄
 *
m⁄ô‹_id
, *
m⁄ô‹_ªque°s
;

1165 
ovsdb_îr‹
 *
îr‹
 = 
NULL
;

1166 
shash_node
 *
node
;

1167 
js⁄
 *json;

1169 i‡(
	`js⁄_¨øy
(
∑øms
)->
n
 != 3) {

1170 
îr‹
 = 
	`ovsdb_sy¡ax_îr‹
(
∑øms
, 
NULL
, "invalidÖarameters");

1171 
îr‹
;

1173 
m⁄ô‹_id
 = 
∑øms
->
u
.
¨øy
.
ñems
[1];

1174 
m⁄ô‹_ªque°s
 = 
∑øms
->
u
.
¨øy
.
ñems
[2];

1175 i‡(
m⁄ô‹_ªque°s
->
ty≥
 !
JSON_OBJECT
) {

1176 
îr‹
 = 
	`ovsdb_sy¡ax_îr‹
(
m⁄ô‹_ªque°s
, 
NULL
,

1178 
îr‹
;

1181 i‡(
	`ovsdb_js⁄Ωc_m⁄ô‹_föd
(
s
, 
m⁄ô‹_id
)) {

1182 
îr‹
 = 
	`ovsdb_sy¡ax_îr‹
(
m⁄ô‹_id
, 
NULL
, "duplicate monitor ID");

1183 
îr‹
;

1186 
m
 = 
	`xzÆloc
( *m);

1187 
	`ovsdb_ª∂iˇ_öô
(&
m
->
ª∂iˇ
, &
ovsdb_js⁄Ωc_ª∂iˇ_˛ass
);

1188 
	`ovsdb_add_ª∂iˇ
(
db
, &
m
->
ª∂iˇ
);

1189 
m
->
£ssi⁄
 = 
s
;

1190 
m
->
db
 = db;

1191 
	`hm≠_ö£π
(&
s
->
m⁄ô‹s
, &
m
->
node
, 
	`js⁄_hash
(
m⁄ô‹_id
, 0));

1192 
m
->
m⁄ô‹_id
 = 
	`js⁄_˛⁄e
(monitor_id);

1193 
	`shash_öô
(&
m
->
èbÀs
);

1195 
	`SHASH_FOR_EACH
 (
node
, 
	`js⁄_obje˘
(
m⁄ô‹_ªque°s
)) {

1196 c⁄° 
ovsdb_èbÀ
 *
èbÀ
;

1197 
ovsdb_js⁄Ωc_m⁄ô‹_èbÀ
 *
mt
;

1198 
size_t
 
Æloˇãd_cﬁumns
;

1199 c⁄° 
js⁄
 *
mr_vÆue
;

1200 
size_t
 
i
;

1202 
èbÀ
 = 
	`ovsdb_gë_èbÀ
(
m
->
db
, 
node
->
«me
);

1203 i‡(!
èbÀ
) {

1204 
îr‹
 = 
	`ovsdb_sy¡ax_îr‹
(
NULL
, NULL,

1205 "nÿèbÀÇamed %s", 
node
->
«me
);

1206 
îr‹
;

1209 
mt
 = 
	`xzÆloc
( *mt);

1210 
mt
->
èbÀ
 =Åable;

1211 
	`shash_add
(&
m
->
èbÀs
, 
èbÀ
->
schema
->
«me
, 
mt
);

1214 
mr_vÆue
 = 
node
->
d©a
;

1215 
Æloˇãd_cﬁumns
 = 0;

1216 i‡(
mr_vÆue
->
ty≥
 =
JSON_ARRAY
) {

1217 c⁄° 
js⁄_¨øy
 *
¨øy
 = &
mr_vÆue
->
u
.array;

1219 
i
 = 0; i < 
¨øy
->
n
; i++) {

1220 
îr‹
 = 
	`ovsdb_js⁄Ωc_∑r£_m⁄ô‹_ªque°
(

1221 
mt
, 
¨øy
->
ñems
[
i
], &
Æloˇãd_cﬁumns
);

1222 i‡(
îr‹
) {

1223 
îr‹
;

1227 
îr‹
 = 
	`ovsdb_js⁄Ωc_∑r£_m⁄ô‹_ªque°
(

1228 
mt
, 
mr_vÆue
, &
Æloˇãd_cﬁumns
);

1229 i‡(
îr‹
) {

1230 
îr‹
;

1235 
	`qs‹t
(
mt
->
cﬁumns
, mt->
n_cﬁumns
,  *mt->columns,

1236 
com∑ª_ovsdb_js⁄Ωc_m⁄ô‹_cﬁumn
);

1237 
i
 = 1; i < 
mt
->
n_cﬁumns
; i++) {

1238 i‡(
mt
->
cﬁumns
[
i
].
cﬁumn
 == mt->columns[i - 1].column) {

1239 
îr‹
 = 
	`ovsdb_sy¡ax_îr‹
(
mr_vÆue
, 
NULL
, "column %s "

1241 
mt
->
cﬁumns
[
i
].
cﬁumn
->
«me
);

1242 
îr‹
;

1247  
	`ovsdb_js⁄Ωc_m⁄ô‹_gë_öôül
(
m
);

1249 
îr‹
:

1250 i‡(
m
) {

1251 
	`ovsdb_ªmove_ª∂iˇ
(
m
->
db
, &m->
ª∂iˇ
);

1254 
js⁄
 = 
	`ovsdb_îr‹_to_js⁄
(
îr‹
);

1255 
	`ovsdb_îr‹_de°roy
(
îr‹
);

1256  
js⁄
;

1257 
	}
}

1259 
js⁄Ωc_msg
 *

1260 
	$ovsdb_js⁄Ωc_m⁄ô‹_ˇn˚l
(
ovsdb_js⁄Ωc_£ssi⁄
 *
s
,

1261 
js⁄_¨øy
 *
∑øms
,

1262 c⁄° 
js⁄
 *
ªque°_id
)

1264 i‡(
∑øms
->
n
 != 1) {

1265  
	`js⁄Ωc_¸óã_îr‹
(
	`js⁄_°rög_¸óã
("invalidÖarameters"),

1266 
ªque°_id
);

1268 
ovsdb_js⁄Ωc_m⁄ô‹
 *
m
;

1270 
m
 = 
	`ovsdb_js⁄Ωc_m⁄ô‹_föd
(
s
, 
∑øms
->
ñems
[0]);

1271 i‡(!
m
) {

1272  
	`js⁄Ωc_¸óã_îr‹
(
	`js⁄_°rög_¸óã
("unknown monitor"),

1273 
ªque°_id
);

1275 
	`ovsdb_ªmove_ª∂iˇ
(
m
->
db
, &m->
ª∂iˇ
);

1276  
	`js⁄Ωc_¸óã_ª∂y
(
	`js⁄_obje˘_¸óã
(), 
ªque°_id
);

1279 
	}
}

1282 
	$ovsdb_js⁄Ωc_m⁄ô‹_ªmove_Æl
(
ovsdb_js⁄Ωc_£ssi⁄
 *
s
)

1284 
ovsdb_js⁄Ωc_m⁄ô‹
 *
m
, *
√xt
;

1286 
	`HMAP_FOR_EACH_SAFE
 (
m
, 
√xt
, 
node
, &
s
->
m⁄ô‹s
) {

1287 
	`ovsdb_ªmove_ª∂iˇ
(
m
->
db
, &m->
ª∂iˇ
);

1289 
	}
}

1291 
ovsdb_js⁄Ωc_m⁄ô‹
 *

1292 
	$ovsdb_js⁄Ωc_m⁄ô‹_ˇ°
(
ovsdb_ª∂iˇ
 *
ª∂iˇ
)

1294 
	`as£π
(
ª∂iˇ
->
˛ass
 =&
ovsdb_js⁄Ωc_ª∂iˇ_˛ass
);

1295  
	`CONTAINER_OF
(
ª∂iˇ
, 
ovsdb_js⁄Ωc_m⁄ô‹
,Ñeplica);

1296 
	}
}

1298 
	sovsdb_js⁄Ωc_m⁄ô‹_aux
 {

1299 
boﬁ
 
	möôül
;

1300 c⁄° 
ovsdb_js⁄Ωc_m⁄ô‹
 *
	mm⁄ô‹
;

1301 
js⁄
 *
	mjs⁄
;

1304 
ovsdb_js⁄Ωc_m⁄ô‹_èbÀ
 *
	mmt
;

1305 
js⁄
 *
	mèbÀ_js⁄
;

1308 
boﬁ


1309 
	$™y_ªp‹èbÀ_ch™ge
(c⁄° 
ovsdb_js⁄Ωc_m⁄ô‹_èbÀ
 *
mt
,

1310 c⁄° *
ch™ged
)

1312 
size_t
 
i
;

1314 
i
 = 0; i < 
mt
->
n_cﬁumns
; i++) {

1315 c⁄° 
ovsdb_js⁄Ωc_m⁄ô‹_cﬁumn
 *
c
 = &
mt
->
cﬁumns
[
i
];

1316 
idx
 = 
c
->
cﬁumn
->
ödex
;

1318 i‡(
c
->
£À˘
 & 
OJMS_MODIFY
 && 
	`bôm≠_is_£t
(
ch™ged
, 
idx
)) {

1319  
åue
;

1323  
Ál£
;

1324 
	}
}

1326 
boﬁ


1327 
	$ovsdb_js⁄Ωc_m⁄ô‹_ch™ge_cb
(c⁄° 
ovsdb_row
 *
ﬁd
,

1328 c⁄° 
ovsdb_row
 *
√w
,

1329 c⁄° *
ch™ged
,

1330 *
aux_
)

1332 
ovsdb_js⁄Ωc_m⁄ô‹_aux
 *
aux
 = 
aux_
;

1333 c⁄° 
ovsdb_js⁄Ωc_m⁄ô‹
 *
m
 = 
aux
->
m⁄ô‹
;

1334 
ovsdb_èbÀ
 *
èbÀ
 = 
√w
 ?Çew->èbÀ : 
ﬁd
->table;

1335 
ovsdb_js⁄Ωc_m⁄ô‹_£À˘i⁄
 
ty≥
;

1336 
js⁄
 *
ﬁd_js⁄
, *
√w_js⁄
;

1337 
js⁄
 *
row_js⁄
;

1338 
uuid
[
UUID_LEN
 + 1];

1339 
size_t
 
i
;

1341 i‡(!
aux
->
mt
 || 
èbÀ
 !=áux->mt->table) {

1342 
aux
->
mt
 = 
	`shash_föd_d©a
(&
m
->
èbÀs
, 
èbÀ
->
schema
->
«me
);

1343 
aux
->
èbÀ_js⁄
 = 
NULL
;

1344 i‡(!
aux
->
mt
) {

1347  
Ál£
;

1351 
ty≥
 = (
aux
->
öôül
 ? 
OJMS_INITIAL


1352 : !
ﬁd
 ? 
OJMS_INSERT


1353 : !
√w
 ? 
OJMS_DELETE


1354 : 
OJMS_MODIFY
);

1355 i‡(!(
aux
->
mt
->
£À˘
 & 
ty≥
)) {

1358  
åue
;

1361 i‡(
ty≥
 =
OJMS_MODIFY
 && !
	`™y_ªp‹èbÀ_ch™ge
(
aux
->
mt
, 
ch™ged
)) {

1363  
åue
;

1366 
ﬁd_js⁄
 = 
√w_js⁄
 = 
NULL
;

1367 i‡(
ty≥
 & (
OJMS_DELETE
 | 
OJMS_MODIFY
)) {

1368 
ﬁd_js⁄
 = 
	`js⁄_obje˘_¸óã
();

1370 i‡(
ty≥
 & (
OJMS_INITIAL
 | 
OJMS_INSERT
 | 
OJMS_MODIFY
)) {

1371 
√w_js⁄
 = 
	`js⁄_obje˘_¸óã
();

1373 
i
 = 0; i < 
aux
->
mt
->
n_cﬁumns
; i++) {

1374 c⁄° 
ovsdb_js⁄Ωc_m⁄ô‹_cﬁumn
 *
c
 = &
aux
->
mt
->
cﬁumns
[
i
];

1375 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
 = 
c
->column;

1376 
idx
 = 
c
->
cﬁumn
->
ödex
;

1378 i‡(!(
ty≥
 & 
c
->
£À˘
)) {

1384 i‡((
ty≥
 =
OJMS_MODIFY
 && 
	`bôm≠_is_£t
(
ch™ged
, 
idx
))

1385 || 
ty≥
 =
OJMS_DELETE
) {

1386 
	`js⁄_obje˘_put
(
ﬁd_js⁄
, 
cﬁumn
->
«me
,

1387 
	`ovsdb_d©um_to_js⁄
(&
ﬁd
->
fõlds
[
idx
],

1388 &
cﬁumn
->
ty≥
));

1390 i‡(
ty≥
 & (
OJMS_INITIAL
 | 
OJMS_INSERT
 | 
OJMS_MODIFY
)) {

1391 
	`js⁄_obje˘_put
(
√w_js⁄
, 
cﬁumn
->
«me
,

1392 
	`ovsdb_d©um_to_js⁄
(&
√w
->
fõlds
[
idx
],

1393 &
cﬁumn
->
ty≥
));

1398 i‡(!
aux
->
js⁄
) {

1399 
aux
->
js⁄
 = 
	`js⁄_obje˘_¸óã
();

1403 i‡(!
aux
->
èbÀ_js⁄
) {

1404 
aux
->
èbÀ_js⁄
 = 
	`js⁄_obje˘_¸óã
();

1405 
	`js⁄_obje˘_put
(
aux
->
js⁄
,áux->
mt
->
èbÀ
->
schema
->
«me
,

1406 
aux
->
èbÀ_js⁄
);

1410 
row_js⁄
 = 
	`js⁄_obje˘_¸óã
();

1411 i‡(
ﬁd_js⁄
) {

1412 
	`js⁄_obje˘_put
(
row_js⁄
, "ﬁd", 
ﬁd_js⁄
);

1414 i‡(
√w_js⁄
) {

1415 
	`js⁄_obje˘_put
(
row_js⁄
, "√w", 
√w_js⁄
);

1419 
	`¢¥ötf
(
uuid
,  uuid,

1420 
UUID_FMT
, 
	`UUID_ARGS
(
	`ovsdb_row_gë_uuid
(
√w
 ?Çew : 
ﬁd
)));

1421 
	`js⁄_obje˘_put
(
aux
->
èbÀ_js⁄
, 
uuid
, 
row_js⁄
);

1423  
åue
;

1424 
	}
}

1427 
	$ovsdb_js⁄Ωc_m⁄ô‹_öô_aux
(
ovsdb_js⁄Ωc_m⁄ô‹_aux
 *
aux
,

1428 c⁄° 
ovsdb_js⁄Ωc_m⁄ô‹
 *
m
,

1429 
boﬁ
 
öôül
)

1431 
aux
->
öôül
 = initial;

1432 
aux
->
m⁄ô‹
 = 
m
;

1433 
aux
->
js⁄
 = 
NULL
;

1434 
aux
->
mt
 = 
NULL
;

1435 
aux
->
èbÀ_js⁄
 = 
NULL
;

1436 
	}
}

1438 
ovsdb_îr‹
 *

1439 
	$ovsdb_js⁄Ωc_m⁄ô‹_commô
(
ovsdb_ª∂iˇ
 *
ª∂iˇ
,

1440 c⁄° 
ovsdb_txn
 *
txn
,

1441 
boﬁ
 
duøbÀ
 
OVS_UNUSED
)

1443 
ovsdb_js⁄Ωc_m⁄ô‹
 *
m
 = 
	`ovsdb_js⁄Ωc_m⁄ô‹_ˇ°
(
ª∂iˇ
);

1444 
ovsdb_js⁄Ωc_m⁄ô‹_aux
 
aux
;

1446 
	`ovsdb_js⁄Ωc_m⁄ô‹_öô_aux
(&
aux
, 
m
, 
Ál£
);

1447 
	`ovsdb_txn_f‹_óch_ch™ge
(
txn
, 
ovsdb_js⁄Ωc_m⁄ô‹_ch™ge_cb
, &
aux
);

1448 i‡(
aux
.
js⁄
) {

1449 
js⁄Ωc_msg
 *
msg
;

1450 
js⁄
 *
∑øms
;

1452 
∑øms
 = 
	`js⁄_¨øy_¸óã_2
(
	`js⁄_˛⁄e
(
aux
.
m⁄ô‹
->
m⁄ô‹_id
),

1453 
aux
.
js⁄
);

1454 
msg
 = 
	`js⁄Ωc_¸óã_nŸify
("upd©e", 
∑øms
);

1455 
	`js⁄Ωc_£ssi⁄_£nd
(
aux
.
m⁄ô‹
->
£ssi⁄
->
js
, 
msg
);

1458  
NULL
;

1459 
	}
}

1461 
js⁄
 *

1462 
	$ovsdb_js⁄Ωc_m⁄ô‹_gë_öôül
(c⁄° 
ovsdb_js⁄Ωc_m⁄ô‹
 *
m
)

1464 
ovsdb_js⁄Ωc_m⁄ô‹_aux
 
aux
;

1465 
shash_node
 *
node
;

1467 
	`ovsdb_js⁄Ωc_m⁄ô‹_öô_aux
(&
aux
, 
m
, 
åue
);

1468 
	`SHASH_FOR_EACH
 (
node
, &
m
->
èbÀs
) {

1469 
ovsdb_js⁄Ωc_m⁄ô‹_èbÀ
 *
mt
 = 
node
->
d©a
;

1471 i‡(
mt
->
£À˘
 & 
OJMS_INITIAL
) {

1472 
ovsdb_row
 *
row
;

1474 
	`HMAP_FOR_EACH
 (
row
, 
hm≠_node
, &
mt
->
èbÀ
->
rows
) {

1475 
	`ovsdb_js⁄Ωc_m⁄ô‹_ch™ge_cb
(
NULL
, 
row
, NULL, &
aux
);

1479  
aux
.
js⁄
 ?áux.js⁄ : 
	`js⁄_obje˘_¸óã
();

1480 
	}
}

1483 
	$ovsdb_js⁄Ωc_m⁄ô‹_de°roy
(
ovsdb_ª∂iˇ
 *
ª∂iˇ
)

1485 
ovsdb_js⁄Ωc_m⁄ô‹
 *
m
 = 
	`ovsdb_js⁄Ωc_m⁄ô‹_ˇ°
(
ª∂iˇ
);

1486 
shash_node
 *
node
;

1488 
	`js⁄_de°roy
(
m
->
m⁄ô‹_id
);

1489 
	`SHASH_FOR_EACH
 (
node
, &
m
->
èbÀs
) {

1490 
ovsdb_js⁄Ωc_m⁄ô‹_èbÀ
 *
mt
 = 
node
->
d©a
;

1491 
	`‰ì
(
mt
->
cﬁumns
);

1492 
	`‰ì
(
mt
);

1494 
	`shash_de°roy
(&
m
->
èbÀs
);

1495 
	`hm≠_ªmove
(&
m
->
£ssi⁄
->
m⁄ô‹s
, &m->
node
);

1496 
	`‰ì
(
m
);

1497 
	}
}

1499 c⁄° 
ovsdb_ª∂iˇ_˛ass
 
	govsdb_js⁄Ωc_ª∂iˇ_˛ass
 = {

1500 
ovsdb_js⁄Ωc_m⁄ô‹_commô
,

1501 
ovsdb_js⁄Ωc_m⁄ô‹_de°roy


	@/home/lsch/mytest/openvswitch-1.9.0/ovsdb/jsonrpc-server.h

16 #i‚de‡
OVSDB_JSONRPC_SERVER_H


17 
	#OVSDB_JSONRPC_SERVER_H
 1

	)

19 
	~<°dboﬁ.h
>

21 
	govsdb
;

22 
	gshash
;

23 
	gsim≠
;

25 
ovsdb_js⁄Ωc_£rvî
 *
ovsdb_js⁄Ωc_£rvî_¸óã
();

26 
boﬁ
 
ovsdb_js⁄Ωc_£rvî_add_db
(
ovsdb_js⁄Ωc_£rvî
 *,

27 
ovsdb
 *);

28 
ovsdb_js⁄Ωc_£rvî_de°roy
(
ovsdb_js⁄Ωc_£rvî
 *);

31 
	sovsdb_js⁄Ωc_›ti⁄s
 {

32 
	mmax_backoff
;

33 
	m¥obe_öãrvÆ
;

34 
	mds˝
;

36 
ovsdb_js⁄Ωc_›ti⁄s
 *

37 
ovsdb_js⁄Ωc_deÁu…_›ti⁄s
(c⁄° *
èrgë
);

39 
ovsdb_js⁄Ωc_£rvî_£t_ªmŸes
(
ovsdb_js⁄Ωc_£rvî
 *,

40 c⁄° 
shash
 *);

43 
	sovsdb_js⁄Ωc_ªmŸe_°©us
 {

44 c⁄° *
	m°©e
;

45 
	mœ°_îr‹
;

46 
	m£c_sö˚_c⁄√˘
;

47 
	m£c_sö˚_disc⁄√˘
;

48 
boﬁ
 
	mis_c⁄√˘ed
;

49 *
	mlocks_hñd
;

50 *
	mlocks_waôög
;

51 *
	mlocks_lo°
;

52 
	mn_c⁄√˘i⁄s
;

54 
boﬁ
 
ovsdb_js⁄Ωc_£rvî_gë_ªmŸe_°©us
(

55 c⁄° 
ovsdb_js⁄Ωc_£rvî
 *, c⁄° *
èrgë
,

56 
ovsdb_js⁄Ωc_ªmŸe_°©us
 *);

57 
ovsdb_js⁄Ωc_£rvî_‰ì_ªmŸe_°©us
(

58 
ovsdb_js⁄Ωc_ªmŸe_°©us
 *);

60 
ovsdb_js⁄Ωc_£rvî_ªc⁄√˘
(
ovsdb_js⁄Ωc_£rvî
 *);

62 
ovsdb_js⁄Ωc_£rvî_run
(
ovsdb_js⁄Ωc_£rvî
 *);

63 
ovsdb_js⁄Ωc_£rvî_waô
(
ovsdb_js⁄Ωc_£rvî
 *);

65 
ovsdb_js⁄Ωc_£rvî_gë_mem‹y_ußge
(c⁄° 
ovsdb_js⁄Ωc_£rvî
 *,

66 
sim≠
 *
ußge
);

	@/home/lsch/mytest/openvswitch-1.9.0/ovsdb/log.c

16 
	~<c⁄fig.h
>

18 
	~"log.h
"

20 
	~<as£π.h
>

21 
	~<î∫o.h
>

22 
	~<f˙é.h
>

23 
	~<°dlib.h
>

24 
	~<°rög.h
>

25 
	~<sys/°©.h
>

26 
	~<uni°d.h
>

28 
	~"js⁄.h
"

29 
	~"lockfûe.h
"

30 
	~"ovsdb.h
"

31 
	~"ovsdb-îr‹.h
"

32 
	~"sha1.h
"

33 
	~"sockë-utû.h
"

34 
	~"å™ß˘i⁄.h
"

35 
	~"utû.h
"

36 
	~"vlog.h
"

38 
VLOG_DEFINE_THIS_MODULE
(
ovsdb_log
);

40 
	eovsdb_log_mode
 {

41 
	mOVSDB_LOG_READ
,

42 
	mOVSDB_LOG_WRITE


45 
	sovsdb_log
 {

46 
off_t
 
	m¥ev_off£t
;

47 
off_t
 
	moff£t
;

48 *
	m«me
;

49 
lockfûe
 *
	mlockfûe
;

50 
FILE
 *
	m°ªam
;

51 
ovsdb_îr‹
 *
	mªad_îr‹
;

52 
ovsdb_îr‹
 *
	mwrôe_îr‹
;

53 
ovsdb_log_mode
 
	mmode
;

64 
ovsdb_îr‹
 *

65 
	$ovsdb_log_›í
(c⁄° *
«me
, 
ovsdb_log_›í_mode
 
›í_mode
,

66 
lockög
, 
ovsdb_log
 **
fûï
)

68 
lockfûe
 *lockfile;

69 
ovsdb_îr‹
 *
îr‹
;

70 
ovsdb_log
 *
fûe
;

71 
°©
 
s
;

72 
FILE
 *
°ªam
;

73 
Êags
;

74 
fd
;

76 *
fûï
 = 
NULL
;

78 
	`as£π
(
lockög
 =-1 ||Üockög =
Ál£
 ||Üockög =
åue
);

79 i‡(
lockög
 < 0) {

80 
lockög
 = 
›í_mode
 !
OVSDB_LOG_READ_ONLY
;

82 i‡(
lockög
) {

83 
ªtvÆ
 = 
	`lockfûe_lock
(
«me
, &
lockfûe
);

84 i‡(
ªtvÆ
) {

85 
îr‹
 = 
	`ovsdb_io_îr‹
(
ªtvÆ
, "%s: failedÅoÜockÜockfile",

86 
«me
);

87 
îr‹
;

90 
lockfûe
 = 
NULL
;

93 i‡(
›í_mode
 =
OVSDB_LOG_READ_ONLY
) {

94 
Êags
 = 
O_RDONLY
;

95 } i‡(
›í_mode
 =
OVSDB_LOG_READ_WRITE
) {

96 
Êags
 = 
O_RDWR
;

97 } i‡(
›í_mode
 =
OVSDB_LOG_CREATE
) {

98 i‡(
	`°©
(
«me
, &
s
Ë=-1 && 
î∫o
 =
ENOENT


99 && 
	`l°©
(
«me
, &
s
Ë=0 && 
	`S_ISLNK
(s.
°_mode
)) {

104 
Êags
 = 
O_RDWR
 | 
O_CREAT
;

106 
Êags
 = 
O_RDWR
 | 
O_CREAT
 | 
O_EXCL
;

109 
	`NOT_REACHED
();

111 
fd
 = 
	`›í
(
«me
, 
Êags
, 0666);

112 i‡(
fd
 < 0) {

113 c⁄° *
›
 = 
›í_mode
 =
OVSDB_LOG_CREATE
 ? "create" : "open";

114 
îr‹
 = 
	`ovsdb_io_îr‹
(
î∫o
, "%s: %†Áûed", 
›
, 
«me
);

115 
îr‹_u∆ock
;

118 i‡(!
	`f°©
(
fd
, &
s
Ë&& s.
°_size
 == 0) {

121 
	`fsync_∑ª¡_dú
(
«me
);

124 
°ªam
 = 
	`fd›í
(
fd
, 
›í_mode
 =
OVSDB_LOG_READ_ONLY
 ? "rb" : "w+b");

125 i‡(!
°ªam
) {

126 
îr‹
 = 
	`ovsdb_io_îr‹
(
î∫o
, "%s: fd›í faûed", 
«me
);

127 
îr‹_˛o£
;

130 
fûe
 = 
	`xmÆloc
( *file);

131 
fûe
->
«me
 = 
	`x°rdup
(name);

132 
fûe
->
lockfûe
 =Üockfile;

133 
fûe
->
°ªam
 = stream;

134 
fûe
->
¥ev_off£t
 = 0;

135 
fûe
->
off£t
 = 0;

136 
fûe
->
ªad_îr‹
 = 
NULL
;

137 
fûe
->
wrôe_îr‹
 = 
NULL
;

138 
fûe
->
mode
 = 
OVSDB_LOG_READ
;

139 *
fûï
 = 
fûe
;

140  
NULL
;

142 
îr‹_˛o£
:

143 
	`˛o£
(
fd
);

144 
îr‹_u∆ock
:

145 
	`lockfûe_u∆ock
(
lockfûe
);

146 
îr‹
:

147  
îr‹
;

148 
	}
}

151 
	$ovsdb_log_˛o£
(
ovsdb_log
 *
fûe
)

153 i‡(
fûe
) {

154 
	`‰ì
(
fûe
->
«me
);

155 
	`f˛o£
(
fûe
->
°ªam
);

156 
	`lockfûe_u∆ock
(
fûe
->
lockfûe
);

157 
	`ovsdb_îr‹_de°roy
(
fûe
->
ªad_îr‹
);

158 
	`ovsdb_îr‹_de°roy
(
fûe
->
wrôe_îr‹
);

159 
	`‰ì
(
fûe
);

161 
	}
}

163 c⁄° 
	gmagic
[] = "OVSDB JSON ";

165 
boﬁ


166 
	$∑r£_hódî
(*
hódî
, *
Àngth
,

167 
uöt8_t
 
sha1
[
SHA1_DIGEST_SIZE
])

169 *
p
;

172 i‡(
	`°∫cmp
(
hódî
, 
magic
, 
	`°æí
(magic))) {

173  
Ál£
;

177 *
Àngth
 = 
	`°πoul
(
hódî
 + 
	`°æí
(
magic
), &
p
, 10);

178 i‡(!*
Àngth
 || *Àngth =
ULONG_MAX
 || *
p
 != ' ') {

179  
Ál£
;

181 
p
++;

184 i‡(!
	`sha1_‰om_hex
(
sha1
, 
p
)) {

185  
Ál£
;

187 
p
 +
SHA1_HEX_DIGEST_LEN
;

190 i‡(*
p
 != '\n') {

191  
Ál£
;

194  
åue
;

195 
	}
}

197 
	sovsdb_log_ªad_cbd©a
 {

198 
	möput
[4096];

199 
ovsdb_log
 *
	mfûe
;

200 
	mîr‹
;

201 
	mÀngth
;

204 
ovsdb_îr‹
 *

205 
	$∑r£_body
(
ovsdb_log
 *
fûe
, 
off_t
 
off£t
, 
Àngth
,

206 
uöt8_t
 
sha1
[
SHA1_DIGEST_SIZE
], 
js⁄
 **
js⁄p
)

208 
js⁄_∑r£r
 *
∑r£r
;

209 
sha1_˘x
 
˘x
;

211 
	`sha1_öô
(&
˘x
);

212 
∑r£r
 = 
	`js⁄_∑r£r_¸óã
(
JSPF_TRAILER
);

214 
Àngth
 > 0) {

215 
öput
[
BUFSIZ
];

216 
chunk
;

218 
chunk
 = 
	`MIN
(
Àngth
,  
öput
);

219 i‡(
	`‰ód
(
öput
, 1, 
chunk
, 
fûe
->
°ªam
) != chunk) {

220 
	`js⁄_∑r£r_ab‹t
(
∑r£r
);

221  
	`ovsdb_io_îr‹
(
	`„º‹
(
fûe
->
°ªam
Ë? 
î∫o
 : 
EOF
,

223 "°¨tögáàoff£à%Œd", 
fûe
->
«me
,

224 
Àngth
, (Ë
off£t
);

226 
	`sha1_upd©e
(&
˘x
, 
öput
, 
chunk
);

227 
	`js⁄_∑r£r_„ed
(
∑r£r
, 
öput
, 
chunk
);

228 
Àngth
 -
chunk
;

231 
	`sha1_föÆ
(&
˘x
, 
sha1
);

232 *
js⁄p
 = 
	`js⁄_∑r£r_föish
(
∑r£r
);

233  
NULL
;

234 
	}
}

236 
ovsdb_îr‹
 *

237 
	$ovsdb_log_ªad
(
ovsdb_log
 *
fûe
, 
js⁄
 **
js⁄p
)

239 
uöt8_t
 
ex≥˘ed_sha1
[
SHA1_DIGEST_SIZE
];

240 
uöt8_t
 
a˘uÆ_sha1
[
SHA1_DIGEST_SIZE
];

241 
ovsdb_îr‹
 *
îr‹
;

242 
off_t
 
d©a_off£t
;

243 
d©a_Àngth
;

244 
js⁄
 *json;

245 
hódî
[128];

247 *
js⁄p
 = 
js⁄
 = 
NULL
;

249 i‡(
fûe
->
ªad_îr‹
) {

250  
	`ovsdb_îr‹_˛⁄e
(
fûe
->
ªad_îr‹
);

251 } i‡(
fûe
->
mode
 =
OVSDB_LOG_WRITE
) {

252  
	`OVSDB_BUG
("reading file in write mode");

255 i‡(!
	`fgës
(
hódî
,  hódî, 
fûe
->
°ªam
)) {

256 i‡(
	`„of
(
fûe
->
°ªam
)) {

257 
îr‹
 = 
NULL
;

259 
îr‹
 = 
	`ovsdb_io_îr‹
(
î∫o
, "%s:Ñód faûed", 
fûe
->
«me
);

261 
îr‹
;

264 i‡(!
	`∑r£_hódî
(
hódî
, &
d©a_Àngth
, 
ex≥˘ed_sha1
)) {

265 
îr‹
 = 
	`ovsdb_sy¡ax_îr‹
(
NULL
, NULL, "%s:ÖarseÉrrorát offset "

267 
fûe
->
«me
, (Ëfûe->
off£t
,

268 (Ë
	`°rc•n
(
hódî
, "\n"), header);

269 
îr‹
;

272 
d©a_off£t
 = 
fûe
->
off£t
 + 
	`°æí
(
hódî
);

273 
îr‹
 = 
	`∑r£_body
(
fûe
, 
d©a_off£t
, 
d©a_Àngth
, 
a˘uÆ_sha1
, &
js⁄
);

274 i‡(
îr‹
) {

275 
îr‹
;

278 i‡(
	`memcmp
(
ex≥˘ed_sha1
, 
a˘uÆ_sha1
, 
SHA1_DIGEST_SIZE
)) {

279 
îr‹
 = 
	`ovsdb_sy¡ax_îr‹
(
NULL
, NULL, "%s: %lu bytes startingát "

280 "off£à%Œd havêSHA-1 hash "
SHA1_FMT
" "

281 "buàshould havêhash "
SHA1_FMT
,

282 
fûe
->
«me
, 
d©a_Àngth
,

283 (Ë
d©a_off£t
,

284 
	`SHA1_ARGS
(
a˘uÆ_sha1
),

285 
	`SHA1_ARGS
(
ex≥˘ed_sha1
));

286 
îr‹
;

289 i‡(
js⁄
->
ty≥
 =
JSON_STRING
) {

290 
îr‹
 = 
	`ovsdb_sy¡ax_îr‹
(
NULL
, NULL, "%s: %lu bytes startingát "

292 
fûe
->
«me
, 
d©a_Àngth
,

293 (Ë
d©a_off£t
,

294 
js⁄
->
u
.
°rög
);

295 
îr‹
;

298 
fûe
->
¥ev_off£t
 = fûe->
off£t
;

299 
fûe
->
off£t
 = 
d©a_off£t
 + 
d©a_Àngth
;

300 *
js⁄p
 = 
js⁄
;

301  
NULL
;

303 
îr‹
:

304 
fûe
->
ªad_îr‹
 = 
	`ovsdb_îr‹_˛⁄e
(
îr‹
);

305 
	`js⁄_de°roy
(
js⁄
);

306  
îr‹
;

307 
	}
}

319 
	$ovsdb_log_uƒód
(
ovsdb_log
 *
fûe
)

321 
	`as£π
(
fûe
->
mode
 =
OVSDB_LOG_READ
);

322 
fûe
->
off£t
 = fûe->
¥ev_off£t
;

323 
	}
}

325 
ovsdb_îr‹
 *

326 
	$ovsdb_log_wrôe
(
ovsdb_log
 *
fûe
, 
js⁄
 *json)

328 
uöt8_t
 
sha1
[
SHA1_DIGEST_SIZE
];

329 
ovsdb_îr‹
 *
îr‹
;

330 *
js⁄_°rög
;

331 
hódî
[128];

332 
size_t
 
Àngth
;

334 
js⁄_°rög
 = 
NULL
;

336 i‡(
fûe
->
wrôe_îr‹
) {

337  
	`ovsdb_îr‹_˛⁄e
(
fûe
->
wrôe_îr‹
);

338 } i‡(
fûe
->
mode
 =
OVSDB_LOG_READ
) {

339 
fûe
->
mode
 = 
OVSDB_LOG_WRITE
;

340 i‡(
	`f£eko
(
fûe
->
°ªam
, fûe->
off£t
, 
SEEK_SET
)) {

341 
îr‹
 = 
	`ovsdb_io_îr‹
(
î∫o
, "%s: cannot seekÅo offset %lld",

342 
fûe
->
«me
, (Ëfûe->
off£t
);

343 
îr‹
;

345 i‡(
	`·runˇã
(
	`fûío
(
fûe
->
°ªam
), fûe->
off£t
)) {

346 
îr‹
 = 
	`ovsdb_io_îr‹
(
î∫o
, "%s: cannotÅruncateÅoÜength %lld",

347 
fûe
->
«me
, (Ëfûe->
off£t
);

348 
îr‹
;

352 i‡(
js⁄
->
ty≥
 !
JSON_OBJECT
 && js⁄->ty≥ !
JSON_ARRAY
) {

353 
îr‹
 = 
	`OVSDB_BUG
("bad JSONÅype");

354 
îr‹
;

359 
js⁄_°rög
 = 
	`js⁄_to_°rög
(
js⁄
, 0);

360 
Àngth
 = 
	`°æí
(
js⁄_°rög
) + 1;

361 
js⁄_°rög
[
Àngth
 - 1] = '\n';

364 
	`sha1_byãs
(
js⁄_°rög
, 
Àngth
, 
sha1
);

365 
	`¢¥ötf
(
hódî
,  hódî, "%s%zu "
SHA1_FMT
"\n",

366 
magic
, 
Àngth
, 
	`SHA1_ARGS
(
sha1
));

369 i‡(
	`fwrôe
(
hódî
, 
	`°æí
(hódî), 1, 
fûe
->
°ªam
) != 1

370 || 
	`fwrôe
(
js⁄_°rög
, 
Àngth
, 1, 
fûe
->
°ªam
) != 1

371 || 
	`fÊush
(
fûe
->
°ªam
))

373 
îr‹
 = 
	`ovsdb_io_îr‹
(
î∫o
, "%s: wrôêÁûed", 
fûe
->
«me
);

377 
	`ign‹e
(
	`·runˇã
(
	`fûío
(
fûe
->
°ªam
), fûe->
off£t
));

379 
îr‹
;

382 
fûe
->
off£t
 +
	`°æí
(
hódî
Ë+ 
Àngth
;

383 
	`‰ì
(
js⁄_°rög
);

384  
NULL
;

386 
îr‹
:

387 
fûe
->
wrôe_îr‹
 = 
	`ovsdb_îr‹_˛⁄e
(
îr‹
);

388 
	`‰ì
(
js⁄_°rög
);

389  
îr‹
;

390 
	}
}

392 
ovsdb_îr‹
 *

393 
	$ovsdb_log_commô
(
ovsdb_log
 *
fûe
)

395 i‡(
	`fsync
(
	`fûío
(
fûe
->
°ªam
))) {

396  
	`ovsdb_io_îr‹
(
î∫o
, "%s: fsyn¯Áûed", 
fûe
->
«me
);

398  
NULL
;

399 
	}
}

404 
off_t


405 
	$ovsdb_log_gë_off£t
(c⁄° 
ovsdb_log
 *
log
)

407  
log
->
off£t
;

408 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/ovsdb/log.h

16 #i‚de‡
OVSDB_LOG_H


17 
	#OVSDB_LOG_H
 1

	)

19 
	~<sys/ty≥s.h
>

20 
	~"compûî.h
"

22 
	gjs⁄
;

23 
	govsdb_log
;

26 
	eovsdb_log_›í_mode
 {

27 
	mOVSDB_LOG_READ_ONLY
,

28 
	mOVSDB_LOG_READ_WRITE
,

29 
	mOVSDB_LOG_CREATE


32 
ovsdb_îr‹
 *
	$ovsdb_log_›í
(c⁄° *
«me
, 
ovsdb_log_›í_mode
,

33 
lockög
, 
ovsdb_log
 **)

34 
WARN_UNUSED_RESULT
;

35 
	`ovsdb_log_˛o£
(
ovsdb_log
 *);

37 
ovsdb_îr‹
 *
	$ovsdb_log_ªad
(
ovsdb_log
 *, 
js⁄
 **)

38 
WARN_UNUSED_RESULT
;

39 
	`ovsdb_log_uƒód
(
ovsdb_log
 *);

41 
ovsdb_îr‹
 *
	$ovsdb_log_wrôe
(
ovsdb_log
 *, 
js⁄
 *)

42 
WARN_UNUSED_RESULT
;

43 
ovsdb_îr‹
 *
	$ovsdb_log_commô
(
ovsdb_log
 *)

44 
WARN_UNUSED_RESULT
;

46 
off_t
 
	`ovsdb_log_gë_off£t
(c⁄° 
ovsdb_log
 *);

	@/home/lsch/mytest/openvswitch-1.9.0/ovsdb/mutation.c

16 
	~<c⁄fig.h
>

18 
	~"muèti⁄.h
"

20 
	~<Êﬂt.h
>

21 
	~<limôs.h
>

23 
	~"cﬁumn.h
"

24 
	~"ovsdb-îr‹.h
"

25 
	~"js⁄.h
"

26 
	~"row.h
"

27 
	~"èbÀ.h
"

29 
ovsdb_îr‹
 *

30 
	$ovsdb_muèt‹_‰om_°rög
(c⁄° *
«me
, 
ovsdb_muèt‹
 *
muèt‹
)

32 
	#OVSDB_MUTATOR
(
ENUM
, 
NAME
) \

33 i‡(!
	`°rcmp
(
«me
, 
NAME
)) { \

34 *
muèt‹
 = 
ENUM
; \

35  
NULL
; \

36 }

	)

37 
OVSDB_MUTATORS
;

38 #unde‡
OVSDB_MUTATOR


40  
	`ovsdb_sy¡ax_îr‹
(
NULL
, "unknown mutator",

41 "Nÿmuèt‹Çamed %s.", 
«me
);

42 
	}
}

45 
	$ovsdb_muèt‹_to_°rög
(
ovsdb_muèt‹
 
muèt‹
)

47 
muèt‹
) {

48 
	#OVSDB_MUTATOR
(
ENUM
, 
NAME
ËENUM:  NAME;

	)

49 
OVSDB_MUTATORS
;

50 #unde‡
OVSDB_MUTATOR


53  
NULL
;

54 
	}
}

56 
WARN_UNUSED_RESULT
 
ovsdb_îr‹
 *

57 
	$ty≥_mism©ch
(c⁄° 
ovsdb_muèti⁄
 *
m
, c⁄° 
js⁄
 *json)

59 
ovsdb_îr‹
 *
îr‹
;

60 *
s
;

62 
s
 = 
	`ovsdb_ty≥_to_íglish
(&
m
->
cﬁumn
->
ty≥
);

63 
îr‹
 = 
	`ovsdb_sy¡ax_îr‹
(

64 
js⁄
, 
NULL
, "Type mismatch: \"%s\" operator mayÇot be "

66 
	`ovsdb_muèt‹_to_°rög
(
m
->
muèt‹
), m->
cﬁumn
->
«me
, 
s
);

67 
	`‰ì
(
s
);

69  
îr‹
;

70 
	}
}

72 
WARN_UNUSED_RESULT
 
ovsdb_îr‹
 *

73 
	$ovsdb_muèti⁄_‰om_js⁄
(c⁄° 
ovsdb_èbÀ_schema
 *
ts
,

74 c⁄° 
js⁄
 *json,

75 
ovsdb_symbﬁ_èbÀ
 *
symèb
,

76 
ovsdb_muèti⁄
 *
m
)

78 c⁄° 
js⁄_¨øy
 *
¨øy
;

79 
ovsdb_îr‹
 *
îr‹
;

80 c⁄° *
muèt‹_«me
;

81 c⁄° *
cﬁumn_«me
;

83 i‡(
js⁄
->
ty≥
 !
JSON_ARRAY


84 || 
js⁄
->
u
.
¨øy
.
n
 != 3

85 || 
js⁄
->
u
.
¨øy
.
ñems
[0]->
ty≥
 !
JSON_STRING


86 || 
js⁄
->
u
.
¨øy
.
ñems
[1]->
ty≥
 !
JSON_STRING
) {

87  
	`ovsdb_sy¡ax_îr‹
(
js⁄
, 
NULL
, "ParseÉrror in mutation.");

89 
¨øy
 = 
	`js⁄_¨øy
(
js⁄
);

91 
cﬁumn_«me
 = 
	`js⁄_°rög
(
¨øy
->
ñems
[0]);

92 
m
->
cﬁumn
 = 
	`ovsdb_èbÀ_schema_gë_cﬁumn
(
ts
, 
cﬁumn_«me
);

93 i‡(!
m
->
cﬁumn
) {

94  
	`ovsdb_sy¡ax_îr‹
(
js⁄
, "unknown column",

96 
cﬁumn_«me
, 
ts
->
«me
);

98 i‡(!
m
->
cﬁumn
->
muèbÀ
) {

99  
	`ovsdb_sy¡ax_îr‹
(
js⁄
, "constraint violation",

101 "èbÀ %s.", 
cﬁumn_«me
, 
ts
->
«me
);

104 
	`ovsdb_ty≥_˛⁄e
(&
m
->
ty≥
, &m->
cﬁumn
->type);

106 
muèt‹_«me
 = 
	`js⁄_°rög
(
¨øy
->
ñems
[1]);

107 
îr‹
 = 
	`ovsdb_muèt‹_‰om_°rög
(
muèt‹_«me
, &
m
->
muèt‹
);

108 i‡(
îr‹
) {

109 
exô
;

113 
m
->
muèt‹
) {

114 
OVSDB_M_ADD
:

115 
OVSDB_M_SUB
:

116 
OVSDB_M_MUL
:

117 
OVSDB_M_DIV
:

118 
OVSDB_M_MOD
:

119 i‡((!
	`ovsdb_ty≥_is_sˇœr
(&
m
->
ty≥
Ë&& !
	`ovsdb_ty≥_is_£t
(&m->type))

120 || (
m
->
ty≥
.
key
.ty≥ !
OVSDB_TYPE_INTEGER


121 && 
m
->
ty≥
.
key
.ty≥ !
OVSDB_TYPE_REAL
)

122 || (
m
->
muèt‹
 =
OVSDB_M_MOD


123 && 
m
->
ty≥
.
key
.ty≥ =
OVSDB_TYPE_REAL
)) {

124  
	`ty≥_mism©ch
(
m
, 
js⁄
);

126 
	`ovsdb_ba£_ty≥_˛ór_c⁄°øöts
(&
m
->
ty≥
.
key
);

127 
m
->
ty≥
.
n_mö
 = m->ty≥.
n_max
 = 1;

128 
îr‹
 = 
	`ovsdb_d©um_‰om_js⁄
(&
m
->
¨g
, &m->
ty≥
, 
¨øy
->
ñems
[2],

129 
symèb
);

132 
OVSDB_M_INSERT
:

133 
OVSDB_M_DELETE
:

134 i‡(!
	`ovsdb_ty≥_is_£t
(&
m
->
ty≥
Ë&& !
	`ovsdb_ty≥_is_m≠
(&m->type)) {

135  
	`ty≥_mism©ch
(
m
, 
js⁄
);

137 
m
->
ty≥
.
n_mö
 = 0;

138 i‡(
m
->
muèt‹
 =
OVSDB_M_DELETE
) {

139 
m
->
ty≥
.
n_max
 = 
UINT_MAX
;

141 
îr‹
 = 
	`ovsdb_d©um_‰om_js⁄
(&
m
->
¨g
, &m->
ty≥
, 
¨øy
->
ñems
[2],

142 
symèb
);

143 i‡(
îr‹
 && 
	`ovsdb_ty≥_is_m≠
(&
m
->
ty≥
)

144 && 
m
->
muèt‹
 =
OVSDB_M_DELETE
) {

145 
	`ovsdb_îr‹_de°roy
(
îr‹
);

146 
m
->
ty≥
.
vÆue
.ty≥ = 
OVSDB_TYPE_VOID
;

147 
îr‹
 = 
	`ovsdb_d©um_‰om_js⁄
(&
m
->
¨g
, &m->
ty≥
, 
¨øy
->
ñems
[2],

148 
symèb
);

153 
	`NOT_REACHED
();

156 
exô
:

157 i‡(
îr‹
) {

158 
	`ovsdb_ty≥_de°roy
(&
m
->
ty≥
);

160  
îr‹
;

161 
	}
}

164 
	$ovsdb_muèti⁄_‰ì
(
ovsdb_muèti⁄
 *
m
)

166 
	`ovsdb_d©um_de°roy
(&
m
->
¨g
, &m->
ty≥
);

167 
	`ovsdb_ty≥_de°roy
(&
m
->
ty≥
);

168 
	}
}

170 
ovsdb_îr‹
 *

171 
	$ovsdb_muèti⁄_£t_‰om_js⁄
(c⁄° 
ovsdb_èbÀ_schema
 *
ts
,

172 c⁄° 
js⁄
 *json,

173 
ovsdb_symbﬁ_èbÀ
 *
symèb
,

174 
ovsdb_muèti⁄_£t
 *
£t
)

176 c⁄° 
js⁄_¨øy
 *
¨øy
 = 
	`js⁄_¨øy
(
js⁄
);

177 
size_t
 
i
;

179 
£t
->
muèti⁄s
 = 
	`xmÆloc
(
¨øy
->
n
 *  *set->mutations);

180 
£t
->
n_muèti⁄s
 = 0;

181 
i
 = 0; i < 
¨øy
->
n
; i++) {

182 
ovsdb_îr‹
 *
îr‹
;

183 
îr‹
 = 
	`ovsdb_muèti⁄_‰om_js⁄
(
ts
, 
¨øy
->
ñems
[
i
], 
symèb
,

184 &
£t
->
muèti⁄s
[
i
]);

185 i‡(
îr‹
) {

186 
	`ovsdb_muèti⁄_£t_de°roy
(
£t
);

187 
£t
->
muèti⁄s
 = 
NULL
;

188 
£t
->
n_muèti⁄s
 = 0;

189  
îr‹
;

191 
£t
->
n_muèti⁄s
++;

194  
NULL
;

195 
	}
}

197 
js⁄
 *

198 
	$ovsdb_muèti⁄_to_js⁄
(c⁄° 
ovsdb_muèti⁄
 *
m
)

200  
	`js⁄_¨øy_¸óã_3
(

201 
	`js⁄_°rög_¸óã
(
m
->
cﬁumn
->
«me
),

202 
	`js⁄_°rög_¸óã
(
	`ovsdb_muèt‹_to_°rög
(
m
->
muèt‹
)),

203 
	`ovsdb_d©um_to_js⁄
(&
m
->
¨g
, &m->
ty≥
));

204 
	}
}

206 
js⁄
 *

207 
	$ovsdb_muèti⁄_£t_to_js⁄
(c⁄° 
ovsdb_muèti⁄_£t
 *
£t
)

209 
js⁄
 **
muèti⁄s
;

210 
size_t
 
i
;

212 
muèti⁄s
 = 
	`xmÆloc
(
£t
->
n_muèti⁄s
 *  *mutations);

213 
i
 = 0; i < 
£t
->
n_muèti⁄s
; i++) {

214 
muèti⁄s
[
i
] = 
	`ovsdb_muèti⁄_to_js⁄
(&
£t
->mutations[i]);

216  
	`js⁄_¨øy_¸óã
(
muèti⁄s
, 
£t
->
n_muèti⁄s
);

217 
	}
}

220 
	$ovsdb_muèti⁄_£t_de°roy
(
ovsdb_muèti⁄_£t
 *
£t
)

222 
size_t
 
i
;

224 
i
 = 0; i < 
£t
->
n_muèti⁄s
; i++) {

225 
	`ovsdb_muèti⁄_‰ì
(&
£t
->
muèti⁄s
[
i
]);

227 
	`‰ì
(
£t
->
muèti⁄s
);

228 
	}
}

230 
	eovsdb_muèti⁄_sˇœr_îr‹
 {

231 
	mME_OK
,

232 
	mME_DOM
,

233 
	mME_RANGE


236 
	sovsdb_sˇœr_muèti⁄
 {

237 (*
	mmuèã_öãgî
)(
öt64_t
 *
	mx
, i¡64_à
	my
);

238 (*
	mmuèã_ªÆ
)(*
	mx
, 
	my
);

239 
ovsdb_muèt‹
 
	mmuèt‹
;

242 c⁄° 
ovsdb_sˇœr_muèti⁄
 
	gadd_muèti⁄
;

243 c⁄° 
ovsdb_sˇœr_muèti⁄
 
	gsub_muèti⁄
;

244 c⁄° 
ovsdb_sˇœr_muèti⁄
 
	gmul_muèti⁄
;

245 c⁄° 
ovsdb_sˇœr_muèti⁄
 
	gdiv_muèti⁄
;

246 c⁄° 
ovsdb_sˇœr_muèti⁄
 
	gmod_muèti⁄
;

248 
ovsdb_îr‹
 *

249 
	$ovsdb_muèti⁄_sˇœr_îr‹
(
ovsdb_muèti⁄_sˇœr_îr‹
 
îr‹
,

250 
ovsdb_muèt‹
 
muèt‹
)

252 
îr‹
) {

253 
ME_OK
:

254  
	`OVSDB_BUG
("unexpected success");

256 
ME_DOM
:

257  
	`ovsdb_îr‹
("domainÉrror", "Division by zero.");

259 
ME_RANGE
:

260  
	`ovsdb_îr‹
("rangeÉrror",

262 
	`ovsdb_muèt‹_to_°rög
(
muèt‹
));

265  
	`OVSDB_BUG
("unexpectedÉrror");

267 
	}
}

270 
	$check_ªÆ_ønge
(
x
)

272  
x
 >-
DBL_MAX
 && x <DBL_MAX ? 0 : 
ME_RANGE
;

273 
	}
}

275 
ovsdb_îr‹
 *

276 
	$muèã_sˇœr
(c⁄° 
ovsdb_ty≥
 *
d°_ty≥
, 
ovsdb_d©um
 *
d°
,

277 c⁄° 
ovsdb_©om
 *
¨g
,

278 c⁄° 
ovsdb_sˇœr_muèti⁄
 *
muèti⁄
)

280 c⁄° 
ovsdb_ba£_ty≥
 *
ba£
 = &
d°_ty≥
->
key
;

281 
ovsdb_îr‹
 *
îr‹
;

282 
i
;

284 i‡(
ba£
->
ty≥
 =
OVSDB_TYPE_INTEGER
) {

285 
öt64_t
 
y
 = 
¨g
->
öãgî
;

286 
i
 = 0; i < 
d°
->
n
; i++) {

287 
ovsdb_muèti⁄_sˇœr_îr‹
 
me
;

289 
me
 = (
muèti⁄
->
muèã_öãgî
)(&
d°
->
keys
[
i
].
öãgî
, 
y
);

290 i‡(
me
 !
ME_OK
) {

291  
	`ovsdb_muèti⁄_sˇœr_îr‹
(
me
, 
muèti⁄
->
muèt‹
);

294 } i‡(
ba£
->
ty≥
 =
OVSDB_TYPE_REAL
) {

295 
y
 = 
¨g
->
ªÆ
;

296 
i
 = 0; i < 
d°
->
n
; i++) {

297 *
x
 = &
d°
->
keys
[
i
].
ªÆ
;

298 
ovsdb_muèti⁄_sˇœr_îr‹
 
me
;

300 
me
 = (
muèti⁄
->
muèã_ªÆ
)(
x
, 
y
);

301 i‡(
me
 =
ME_OK
) {

302 
me
 = 
	`check_ªÆ_ønge
(*
x
);

304 i‡(
me
 !
ME_OK
) {

305  
	`ovsdb_muèti⁄_sˇœr_îr‹
(
me
, 
muèti⁄
->
muèt‹
);

309 
	`NOT_REACHED
();

312 
i
 = 0; i < 
d°
->
n
; i++) {

313 
îr‹
 = 
	`ovsdb_©om_check_c⁄°øöts
(&
d°
->
keys
[
i
], 
ba£
);

314 i‡(
îr‹
) {

315  
îr‹
;

319 
îr‹
 = 
	`ovsdb_d©um_s‹t
(
d°
, 
d°_ty≥
->
key
.
ty≥
);

320 i‡(
îr‹
) {

321 
	`ovsdb_îr‹_de°roy
(
îr‹
);

322  
	`ovsdb_îr‹
("constraint violation",

324 
	`ovsdb_muèt‹_to_°rög
(
muèti⁄
->
muèt‹
));

326  
NULL
;

327 
	}
}

329 
ovsdb_îr‹
 *

330 
	$ovsdb_muèti⁄_check_cou¡
(
ovsdb_d©um
 *
d°
,

331 c⁄° 
ovsdb_ty≥
 *
d°_ty≥
)

333 i‡(!
	`ovsdb_d©um_c⁄f‹ms_to_ty≥
(
d°
, 
d°_ty≥
)) {

334 *
s
 = 
	`ovsdb_ty≥_to_íglish
(
d°_ty≥
);

335 
ovsdb_îr‹
 *
e
 = 
	`ovsdb_îr‹
(

337 "Aâem±edÅÿ°‹ê%uÉÀmít†ö %s.", 
d°
->
n
, 
s
);

338 
	`‰ì
(
s
);

339  
e
;

341  
NULL
;

342 
	}
}

344 
ovsdb_îr‹
 *

345 
	$ovsdb_muèti⁄_£t_execuã
(
ovsdb_row
 *
row
,

346 c⁄° 
ovsdb_muèti⁄_£t
 *
£t
)

348 
size_t
 
i
;

350 
i
 = 0; i < 
£t
->
n_muèti⁄s
; i++) {

351 c⁄° 
ovsdb_muèti⁄
 *
m
 = &
£t
->
muèti⁄s
[
i
];

352 
ovsdb_d©um
 *
d°
 = &
row
->
fõlds
[
m
->
cﬁumn
->
ödex
];

353 c⁄° 
ovsdb_ty≥
 *
d°_ty≥
 = &
m
->
cﬁumn
->
ty≥
;

354 c⁄° 
ovsdb_d©um
 *
¨g
 = &
£t
->
muèti⁄s
[
i
].arg;

355 c⁄° 
ovsdb_ty≥
 *
¨g_ty≥
 = &
m
->
ty≥
;

356 
ovsdb_îr‹
 *
îr‹
;

358 
m
->
muèt‹
) {

359 
OVSDB_M_ADD
:

360 
îr‹
 = 
	`muèã_sˇœr
(
d°_ty≥
, 
d°
, &
¨g
->
keys
[0], &
add_muèti⁄
);

363 
OVSDB_M_SUB
:

364 
îr‹
 = 
	`muèã_sˇœr
(
d°_ty≥
, 
d°
, &
¨g
->
keys
[0], &
sub_muèti⁄
);

367 
OVSDB_M_MUL
:

368 
îr‹
 = 
	`muèã_sˇœr
(
d°_ty≥
, 
d°
, &
¨g
->
keys
[0], &
mul_muèti⁄
);

371 
OVSDB_M_DIV
:

372 
îr‹
 = 
	`muèã_sˇœr
(
d°_ty≥
, 
d°
, &
¨g
->
keys
[0], &
div_muèti⁄
);

375 
OVSDB_M_MOD
:

376 
îr‹
 = 
	`muèã_sˇœr
(
d°_ty≥
, 
d°
, &
¨g
->
keys
[0], &
mod_muèti⁄
);

379 
OVSDB_M_INSERT
:

380 
	`ovsdb_d©um_uni⁄
(
d°
, 
¨g
, 
d°_ty≥
, 
Ál£
);

381 
îr‹
 = 
	`ovsdb_muèti⁄_check_cou¡
(
d°
, 
d°_ty≥
);

384 
OVSDB_M_DELETE
:

385 
	`ovsdb_d©um_subåa˘
(
d°
, 
d°_ty≥
, 
¨g
, 
¨g_ty≥
);

386 
îr‹
 = 
	`ovsdb_muèti⁄_check_cou¡
(
d°
, 
d°_ty≥
);

390 
	`NOT_REACHED
();

392 i‡(
îr‹
) {

393  
îr‹
;

397  
NULL
;

398 
	}
}

401 
	$add_öt
(
öt64_t
 *
x
, i¡64_à
y
)

404 
öt64_t
 
z
 = ~(*
x
 ^ 
y
Ë& 
INT64_MIN
;

405 i‡((~(*
x
 ^ 
y
Ë& ~(((*x ^ 
z
) + y) ^ y)) >> 63) {

406  
ME_RANGE
;

408 *
x
 +
y
;

411 
	}
}

414 
	$sub_öt
(
öt64_t
 *
x
, i¡64_à
y
)

417 
öt64_t
 
z
 = (*
x
 ^ 
y
Ë& 
INT64_MIN
;

418 i‡(((*
x
 ^ 
y
Ë& (((*x ^ 
z
) - y) ^ y)) >> 63) {

419  
ME_RANGE
;

421 *
x
 -
y
;

424 
	}
}

427 
	$mul_öt
(
öt64_t
 *
x
, i¡64_à
y
)

430 i‡(*
x
 > 0

431 ? (
y
 > 0

432 ? *
x
 >
INT64_MAX
 / 
y


433 : 
y
 < 
INT64_MIN
 / *
x
)

434 : (
y
 > 0

435 ? *
x
 < 
INT64_MIN
 / 
y


436 : *
x
 !0 && 
y
 < 
INT64_MAX
 / y)) {

437  
ME_RANGE
;

439 *
x
 *
y
;

442 
	}
}

445 
	$check_öt_div
(
öt64_t
 
x
, i¡64_à
y
)

448 i‡(!
y
) {

449  
ME_DOM
;

450 } i‡(
x
 =
INT64_MIN
 && 
y
 == -1) {

451  
ME_RANGE
;

455 
	}
}

458 
	$div_öt
(
öt64_t
 *
x
, i¡64_à
y
)

460 
îr‹
 = 
	`check_öt_div
(*
x
, 
y
);

461 i‡(!
îr‹
) {

462 *
x
 /
y
;

464  
îr‹
;

465 
	}
}

468 
	$mod_öt
(
öt64_t
 *
x
, i¡64_à
y
)

470 
îr‹
 = 
	`check_öt_div
(*
x
, 
y
);

471 i‡(!
îr‹
) {

472 *
x
 %
y
;

474  
îr‹
;

475 
	}
}

478 
	$add_doubÀ
(*
x
, 
y
)

480 *
x
 +
y
;

482 
	}
}

485 
	$sub_doubÀ
(*
x
, 
y
)

487 *
x
 -
y
;

489 
	}
}

492 
	$mul_doubÀ
(*
x
, 
y
)

494 *
x
 *
y
;

496 
	}
}

499 
	$div_doubÀ
(*
x
, 
y
)

501 i‡(
y
 == 0) {

502  
ME_DOM
;

504 *
x
 /
y
;

507 
	}
}

509 c⁄° 
ovsdb_sˇœr_muèti⁄
 
	gadd_muèti⁄
 = {

510 
add_öt
, 
add_doubÀ
, 
OVSDB_M_ADD


513 c⁄° 
ovsdb_sˇœr_muèti⁄
 
	gsub_muèti⁄
 = {

514 
sub_öt
, 
sub_doubÀ
, 
OVSDB_M_SUB


517 c⁄° 
ovsdb_sˇœr_muèti⁄
 
	gmul_muèti⁄
 = {

518 
mul_öt
, 
mul_doubÀ
, 
OVSDB_M_MUL


521 c⁄° 
ovsdb_sˇœr_muèti⁄
 
	gdiv_muèti⁄
 = {

522 
div_öt
, 
div_doubÀ
, 
OVSDB_M_DIV


525 c⁄° 
ovsdb_sˇœr_muèti⁄
 
	gmod_muèti⁄
 = {

526 
mod_öt
, 
NULL
, 
OVSDB_M_MOD


	@/home/lsch/mytest/openvswitch-1.9.0/ovsdb/mutation.h

16 #i‚de‡
OVSDB_MUTATION_H


17 
	#OVSDB_MUTATION_H
 1

	)

19 
	~<°ddef.h
>

20 
	~"compûî.h
"

21 
	~"ovsdb-d©a.h
"

23 
	gjs⁄
;

24 
	govsdb_èbÀ_schema
;

25 
	govsdb_row
;

29 
	#OVSDB_MUTATORS
 \

30 
	`OVSDB_MUTATOR
(
OVSDB_M_ADD
, "+=") \

31 
	`OVSDB_MUTATOR
(
OVSDB_M_SUB
, "-=") \

32 
	`OVSDB_MUTATOR
(
OVSDB_M_MUL
, "*=") \

33 
	`OVSDB_MUTATOR
(
OVSDB_M_DIV
, "/=") \

34 
	`OVSDB_MUTATOR
(
OVSDB_M_MOD
, "%=") \

35 
	`OVSDB_MUTATOR
(
OVSDB_M_INSERT
, "insert") \

36 
	`OVSDB_MUTATOR
(
OVSDB_M_DELETE
, "dñëe")

	)

38 
	eovsdb_muèt‹
 {

39 
	#OVSDB_MUTATOR
(
ENUM
, 
NAME
ËENUM,

	)

40 
	mOVSDB_MUTATORS


41 #unde‡
OVSDB_MUTATOR


44 
ovsdb_îr‹
 *
	$ovsdb_muèt‹_‰om_°rög
(const *,

45 
ovsdb_muèt‹
 *)

46 
WARN_UNUSED_RESULT
;

47 c⁄° *
	`ovsdb_muèt‹_to_°rög
(
ovsdb_muèt‹
);

49 
	sovsdb_muèti⁄
 {

50 
ovsdb_muèt‹
 
muèt‹
;

51 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
;

52 
ovsdb_d©um
 
¨g
;

53 
ovsdb_ty≥
 
ty≥
;

56 
	sovsdb_muèti⁄_£t
 {

57 
ovsdb_muèti⁄
 *
muèti⁄s
;

58 
size_t
 
n_muèti⁄s
;

61 
	#OVSDB_MUTATION_SET_INITIALIZER
 { 
NULL
, 0 
	}

	)
}

63 
ovsdb_îr‹
 *
	$ovsdb_muèti⁄_£t_‰om_js⁄
(

64 c⁄° 
ovsdb_èbÀ_schema
 *,

65 c⁄° 
js⁄
 *, 
ovsdb_symbﬁ_èbÀ
 *,

66 
ovsdb_muèti⁄_£t
 *Ë
WARN_UNUSED_RESULT
;

67 
js⁄
 *
	`ovsdb_muèti⁄_£t_to_js⁄
(c⁄° 
ovsdb_muèti⁄_£t
 *);

68 
	`ovsdb_muèti⁄_£t_de°roy
(
ovsdb_muèti⁄_£t
 *);

69 
ovsdb_îr‹
 *
	$ovsdb_muèti⁄_£t_execuã
(

70 
ovsdb_row
 *, c⁄° 
ovsdb_muèti⁄_£t
 *Ë
WARN_UNUSED_RESULT
;

	@/home/lsch/mytest/openvswitch-1.9.0/ovsdb/ovsdb-client.c

17 
	~<c⁄fig.h
>

19 
	~<as£π.h
>

20 
	~<˘y≥.h
>

21 
	~<î∫o.h
>

22 
	~<gë›t.h
>

23 
	~<limôs.h
>

24 
	~<sig«l.h
>

25 
	~<°dlib.h
>

26 
	~<°rög.h
>

27 
	~<uni°d.h
>

29 
	~"comm™d-löe.h
"

30 
	~"cﬁumn.h
"

31 
	~"compûî.h
"

32 
	~"d´m⁄.h
"

33 
	~"dús.h
"

34 
	~"dy«mic-°rög.h
"

35 
	~"js⁄.h
"

36 
	~"js⁄Ωc.h
"

37 
	~"lib/èbÀ.h
"

38 
	~"ovsdb.h
"

39 
	~"ovsdb-d©a.h
"

40 
	~"ovsdb-îr‹.h
"

41 
	~"s‹t.h
"

42 
	~"svec.h
"

43 
	~"°ªam.h
"

44 
	~"°ªam-s¶.h
"

45 
	~"èbÀ.h
"

46 
	~"timevÆ.h
"

47 
	~"utû.h
"

48 
	~"vlog.h
"

50 
VLOG_DEFINE_THIS_MODULE
(
ovsdb_˛õ¡
);

52 
	e¨gs_√eded
 {

53 
	mNEED_NONE
,

54 
	mNEED_RPC
,

55 
	mNEED_DATABASE


58 
	sovsdb_˛õ¡_comm™d
 {

59 c⁄° *
	m«me
;

60 
¨gs_√eded
 
	m√ed
;

61 
	mmö_¨gs
;

62 
	mmax_¨gs
;

63 (*
	mh™dÀr
)(
js⁄Ωc
 *
	mΩc
, c⁄° *
	md©aba£
,

64 
	m¨gc
, *
	m¨gv
[]);

68 
boﬁ
 
	gtime°amp
;

71 
èbÀ_°yÀ
 
	gèbÀ_°yÀ
 = 
TABLE_STYLE_DEFAULT
;

73 c⁄° 
ovsdb_˛õ¡_comm™d
 
	gÆl_comm™ds
[];

75 
	$ußge
(Ë
NO_RETURN
;

76 
	`∑r£_›ti⁄s
(
¨gc
, *
¨gv
[]);

77 
js⁄Ωc
 *
	`›í_js⁄Ωc
(c⁄° *
£rvî
);

78 
	`„tch_dbs
(
js⁄Ωc
 *, 
svec
 *
dbs
);

81 
	$maö
(
¨gc
, *
¨gv
[])

83 c⁄° 
ovsdb_˛õ¡_comm™d
 *
comm™d
;

84 c⁄° *
d©aba£
;

85 
js⁄Ωc
 *
Ωc
;

87 
	`¥o˘ôÀ_öô
(
¨gc
, 
¨gv
);

88 
	`£t_¥ogøm_«me
(
¨gv
[0]);

89 
	`∑r£_›ti⁄s
(
¨gc
, 
¨gv
);

90 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

92 i‡(
›töd
 >
¨gc
) {

93 
	`ovs_Áèl
(0, "missing commandÇame; use --help for help");

96 
comm™d
 = 
Æl_comm™ds
; ; command++) {

97 i‡(!
comm™d
->
«me
) {

98 
	`VLOG_FATAL
("unknown command '%s'; use --help for help",

99 
¨gv
[
›töd
]);

100 } i‡(!
	`°rcmp
(
comm™d
->
«me
, 
¨gv
[
›töd
])) {

104 
›töd
++;

106 i‡(
comm™d
->
√ed
 !
NEED_NONE
) {

107 i‡(
¨gc
 - 
›töd
 > 
comm™d
->
mö_¨gs


108 && (
	`ißÕha
((Ë
¨gv
[
›töd
][0])

109 && 
	`°rchr
(
¨gv
[
›töd
], ':'))) {

110 
Ωc
 = 
	`›í_js⁄Ωc
(
¨gv
[
›töd
++]);

112 *
sock
 = 
	`xa•rötf
("unix:%s/db.sock", 
	`ovs_rundú
());

113 
Ωc
 = 
	`›í_js⁄Ωc
(
sock
);

114 
	`‰ì
(
sock
);

117 
Ωc
 = 
NULL
;

120 i‡(
comm™d
->
√ed
 =
NEED_DATABASE
) {

121 
svec
 
dbs
;

123 
	`svec_öô
(&
dbs
);

124 
	`„tch_dbs
(
Ωc
, &
dbs
);

125 i‡(
¨gc
 - 
›töd
 > 
comm™d
->
mö_¨gs


126 && 
	`svec_c⁄èös
(&
dbs
, 
¨gv
[
›töd
])) {

127 
d©aba£
 = 
¨gv
[
›töd
++];

128 } i‡(
dbs
.
n
 == 1) {

129 
d©aba£
 = 
	`x°rdup
(
dbs
.
«mes
[0]);

130 } i‡(
	`svec_c⁄èös
(&
dbs
, "Open_vSwitch")) {

131 
d©aba£
 = "Open_vSwitch";

133 
	`ovs_Áèl
(0, "no default database for `%s' command,Ölease "

134 "•ecifyá d©aba£Çame", 
comm™d
->
«me
);

136 
	`svec_de°roy
(&
dbs
);

138 
d©aba£
 = 
NULL
;

141 i‡(
¨gc
 - 
›töd
 < 
comm™d
->
mö_¨gs
 ||

142 
¨gc
 - 
›töd
 > 
comm™d
->
max_¨gs
) {

143 
	`VLOG_FATAL
("invalid syntax for '%s' (use --help for help)",

144 
comm™d
->
«me
);

147 
comm™d
->
	`h™dÀr
(
Ωc
, 
d©aba£
, 
¨gc
 - 
›töd
, 
¨gv
 + optind);

149 
	`js⁄Ωc_˛o£
(
Ωc
);

151 i‡(
	`„º‹
(
°dout
)) {

152 
	`VLOG_FATAL
("writeÅo stdout failed");

154 i‡(
	`„º‹
(
°dîr
)) {

155 
	`VLOG_FATAL
("writeÅo stderr failed");

159 
	}
}

162 
	$∑r£_›ti⁄s
(
¨gc
, *
¨gv
[])

165 
OPT_BOOTSTRAP_CA_CERT
 = 
UCHAR_MAX
 + 1,

166 
OPT_TIMESTAMP
,

167 
DAEMON_OPTION_ENUMS
,

168 
TABLE_OPTION_ENUMS


170 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

171 {"vîbo£", 
›ti⁄Æ_¨gumít
, 
NULL
, 'v'},

172 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

173 {"vîsi⁄", 
no_¨gumít
, 
NULL
, 'V'},

174 {"time°amp", 
no_¨gumít
, 
NULL
, 
OPT_TIMESTAMP
},

175 
DAEMON_LONG_OPTIONS
,

176 #ifde‡
HAVE_OPENSSL


177 {"boŸ°øp-ˇ-˚π", 
ªquúed_¨gumít
, 
NULL
, 
OPT_BOOTSTRAP_CA_CERT
},

178 
STREAM_SSL_LONG_OPTIONS
,

180 
TABLE_LONG_OPTIONS
,

181 {
NULL
, 0, NULL, 0},

183 *
sh‹t_›ti⁄s
 = 
	`l⁄g_›ti⁄s_to_sh‹t_›ti⁄s
(
l⁄g_›ti⁄s
);

186 
c
;

188 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
l⁄g_›ti⁄s
, 
NULL
);

189 i‡(
c
 == -1) {

193 
c
) {

195 
	`ußge
();

198 
	`ovs_¥öt_vîsi⁄
(0, 0);

199 
	`exô
(
EXIT_SUCCESS
);

202 
	`vlog_£t_vîbosôy
(
›èrg
);

205 
DAEMON_OPTION_HANDLERS


207 
	`TABLE_OPTION_HANDLERS
(&
èbÀ_°yÀ
)

209 
STREAM_SSL_OPTION_HANDLERS


211 
OPT_BOOTSTRAP_CA_CERT
:

212 
	`°ªam_s¶_£t_ˇ_˚π_fûe
(
›èrg
, 
åue
);

215 
OPT_TIMESTAMP
:

216 
time°amp
 = 
åue
;

220 
	`exô
(
EXIT_FAILURE
);

227 
	`ab‹t
();

230 
	`‰ì
(
sh‹t_›ti⁄s
);

231 
	}
}

234 
	$ußge
()

236 
	`¥ötf
("%s: Open vSwitch database JSON-RPC client\n"

261 
¥ogøm_«me
,Örogøm_«me, 
	`ovs_rundú
());

262 
	`°ªam_ußge
("SERVER", 
åue
,Årue,Årue);

263 
	`¥ötf
("\nOutput formatting options:\n"

270 
	`d´m⁄_ußge
();

271 
	`vlog_ußge
();

272 
	`¥ötf
("\nOther options:\n"

275 
	`exô
(
EXIT_SUCCESS
);

276 
	}
}

279 
	$check_txn
(
îr‹
, 
js⁄Ωc_msg
 **
ª∂y_
)

281 
js⁄Ωc_msg
 *
ª∂y
 = *
ª∂y_
;

283 i‡(
îr‹
) {

284 
	`ovs_Áèl
(
îr‹
, "transaction failed");

287 i‡(
ª∂y
->
îr‹
) {

288 
	`ovs_Áèl
(
îr‹
, "transactionÑeturnedÉrror: %s",

289 
	`js⁄_to_°rög
(
ª∂y
->
îr‹
, 
èbÀ_°yÀ
.
js⁄_Êags
));

291 
	}
}

293 
js⁄
 *

294 
	$∑r£_js⁄
(c⁄° *
s
)

296 
js⁄
 *js⁄ = 
	`js⁄_‰om_°rög
(
s
);

297 i‡(
js⁄
->
ty≥
 =
JSON_STRING
) {

298 
	`ovs_Áèl
(0, "\"%s\": %s", 
s
, 
js⁄
->
u
.
°rög
);

300  
js⁄
;

301 
	}
}

303 
js⁄Ωc
 *

304 
	$›í_js⁄Ωc
(c⁄° *
£rvî
)

306 
°ªam
 *stream;

307 
îr‹
;

309 
îr‹
 = 
	`°ªam_›í_block
(
	`js⁄Ωc_°ªam_›í
(
£rvî
, &
°ªam
,

310 
DSCP_DEFAULT
), &
°ªam
);

311 i‡(
îr‹
 =
EAFNOSUPPORT
) {

312 
p°ªam
 *pstream;

314 
îr‹
 = 
	`js⁄Ωc_p°ªam_›í
(
£rvî
, &
p°ªam
, 
DSCP_DEFAULT
);

315 i‡(
îr‹
) {

316 
	`ovs_Áèl
(
îr‹
, "ÁûedÅÿc⁄√˘ o∏li°íÅÿ\"%s\"", 
£rvî
);

319 
	`VLOG_INFO
("%s: waôög f‹ c⁄√˘i⁄...", 
£rvî
);

320 
îr‹
 = 
	`p°ªam_ac˚±_block
(
p°ªam
, &
°ªam
);

321 i‡(
îr‹
) {

322 
	`ovs_Áèl
(
îr‹
, "ÁûedÅÿac˚± c⁄√˘i⁄ o¿\"%s\"", 
£rvî
);

325 
	`p°ªam_˛o£
(
p°ªam
);

326 } i‡(
îr‹
) {

327 
	`ovs_Áèl
(
îr‹
, "ÁûedÅÿc⁄√˘Åÿ\"%s\"", 
£rvî
);

330  
	`js⁄Ωc_›í
(
°ªam
);

331 
	}
}

334 
	$¥öt_js⁄
(
js⁄
 *json)

336 *
°rög
 = 
	`js⁄_to_°rög
(
js⁄
, 
èbÀ_°yÀ
.
js⁄_Êags
);

337 
	`Âuts
(
°rög
, 
°dout
);

338 
	`‰ì
(
°rög
);

339 
	}
}

342 
	$¥öt_™d_‰ì_js⁄
(
js⁄
 *json)

344 
	`¥öt_js⁄
(
js⁄
);

345 
	`js⁄_de°roy
(
js⁄
);

346 
	}
}

349 
	$check_ovsdb_îr‹
(
ovsdb_îr‹
 *
îr‹
)

351 i‡(
îr‹
) {

352 
	`ovs_Áèl
(0, "%s", 
	`ovsdb_îr‹_to_°rög
(
îr‹
));

354 
	}
}

356 
ovsdb_schema
 *

357 
	$„tch_schema
(
js⁄Ωc
 *
Ωc
, c⁄° *
d©aba£
)

359 
js⁄Ωc_msg
 *
ªque°
, *
ª∂y
;

360 
ovsdb_schema
 *
schema
;

362 
ªque°
 = 
	`js⁄Ωc_¸óã_ªque°
("get_schema",

363 
	`js⁄_¨øy_¸óã_1
(

364 
	`js⁄_°rög_¸óã
(
d©aba£
)),

365 
NULL
);

366 
	`check_txn
(
	`js⁄Ωc_å™ß˘_block
(
Ωc
, 
ªque°
, &
ª∂y
), &reply);

367 
	`check_ovsdb_îr‹
(
	`ovsdb_schema_‰om_js⁄
(
ª∂y
->
ªsu…
, &
schema
));

368 
	`js⁄Ωc_msg_de°roy
(
ª∂y
);

370  
schema
;

371 
	}
}

374 
	$„tch_dbs
(
js⁄Ωc
 *
Ωc
, 
svec
 *
dbs
)

376 
js⁄Ωc_msg
 *
ªque°
, *
ª∂y
;

377 
size_t
 
i
;

379 
ªque°
 = 
	`js⁄Ωc_¸óã_ªque°
("li°_dbs", 
	`js⁄_¨øy_¸óã_em±y
(),

380 
NULL
);

382 
	`check_txn
(
	`js⁄Ωc_å™ß˘_block
(
Ωc
, 
ªque°
, &
ª∂y
), &reply);

383 i‡(
ª∂y
->
ªsu…
->
ty≥
 !
JSON_ARRAY
) {

384 
	`ovs_Áèl
(0, "list_dbsÑesponse isÇotárray");

387 
i
 = 0; i < 
ª∂y
->
ªsu…
->
u
.
¨øy
.
n
; i++) {

388 c⁄° 
js⁄
 *
«me
 = 
ª∂y
->
ªsu…
->
u
.
¨øy
.
ñems
[
i
];

390 i‡(
«me
->
ty≥
 !
JSON_STRING
) {

391 
	`ovs_Áèl
(0, "li°_db†ª•⁄£ %zu i†nŸ såög", 
i
);

393 
	`svec_add
(
dbs
, 
«me
->
u
.
°rög
);

395 
	`js⁄Ωc_msg_de°roy
(
ª∂y
);

396 
	}
}

399 
	$do_li°_dbs
(
js⁄Ωc
 *
Ωc
, c⁄° *
d©aba£
 
OVS_UNUSED
,

400 
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

402 c⁄° *
db_«me
;

403 
svec
 
dbs
;

404 
size_t
 
i
;

406 
	`svec_öô
(&
dbs
);

407 
	`„tch_dbs
(
Ωc
, &
dbs
);

408 
	`svec_s‹t
(&
dbs
);

409 
	`SVEC_FOR_EACH
 (
i
, 
db_«me
, &
dbs
) {

410 
	`puts
(
db_«me
);

412 
	`svec_de°roy
(&
dbs
);

413 
	}
}

416 
	$do_gë_schema
(
js⁄Ωc
 *
Ωc
, c⁄° *
d©aba£
,

417 
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

419 
ovsdb_schema
 *
schema
 = 
	`„tch_schema
(
Ωc
, 
d©aba£
);

420 
	`¥öt_™d_‰ì_js⁄
(
	`ovsdb_schema_to_js⁄
(
schema
));

421 
	`ovsdb_schema_de°roy
(
schema
);

422 
	}
}

425 
	$do_gë_schema_vîsi⁄
(
js⁄Ωc
 *
Ωc
, c⁄° *
d©aba£
,

426 
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

428 
ovsdb_schema
 *
schema
 = 
	`„tch_schema
(
Ωc
, 
d©aba£
);

429 
	`puts
(
schema
->
vîsi⁄
);

430 
	`ovsdb_schema_de°roy
(
schema
);

431 
	}
}

434 
	$do_li°_èbÀs
(
js⁄Ωc
 *
Ωc
, c⁄° *
d©aba£
,

435 
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

437 
ovsdb_schema
 *
schema
;

438 
shash_node
 *
node
;

439 
èbÀ
 
t
;

441 
schema
 = 
	`„tch_schema
(
Ωc
, 
d©aba£
);

442 
	`èbÀ_öô
(&
t
);

443 
	`èbÀ_add_cﬁumn
(&
t
, "Table");

444 
	`SHASH_FOR_EACH
 (
node
, &
schema
->
èbÀs
) {

445 
ovsdb_èbÀ_schema
 *
ts
 = 
node
->
d©a
;

447 
	`èbÀ_add_row
(&
t
);

448 
	`èbÀ_add_˚Œ
(&
t
)->
ãxt
 = 
	`x°rdup
(
ts
->
«me
);

450 
	`ovsdb_schema_de°roy
(
schema
);

451 
	`èbÀ_¥öt
(&
t
, &
èbÀ_°yÀ
);

452 
	}
}

455 
	$do_li°_cﬁumns
(
js⁄Ωc
 *
Ωc
, c⁄° *
d©aba£
,

456 
¨gc
 
OVS_UNUSED
, *
¨gv
[])

458 c⁄° *
èbÀ_«me
 = 
¨gv
[0];

459 
ovsdb_schema
 *
schema
;

460 
shash_node
 *
èbÀ_node
;

461 
èbÀ
 
t
;

463 
schema
 = 
	`„tch_schema
(
Ωc
, 
d©aba£
);

464 
	`èbÀ_öô
(&
t
);

465 i‡(!
èbÀ_«me
) {

466 
	`èbÀ_add_cﬁumn
(&
t
, "Table");

468 
	`èbÀ_add_cﬁumn
(&
t
, "Column");

469 
	`èbÀ_add_cﬁumn
(&
t
, "Type");

470 
	`SHASH_FOR_EACH
 (
èbÀ_node
, &
schema
->
èbÀs
) {

471 
ovsdb_èbÀ_schema
 *
ts
 = 
èbÀ_node
->
d©a
;

473 i‡(!
èbÀ_«me
 || !
	`°rcmp
—abÀ_«me, 
ts
->
«me
)) {

474 
shash_node
 *
cﬁumn_node
;

476 
	`SHASH_FOR_EACH
 (
cﬁumn_node
, &
ts
->
cﬁumns
) {

477 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
 = 
cﬁumn_node
->
d©a
;

479 
	`èbÀ_add_row
(&
t
);

480 i‡(!
èbÀ_«me
) {

481 
	`èbÀ_add_˚Œ
(&
t
)->
ãxt
 = 
	`x°rdup
(
ts
->
«me
);

483 
	`èbÀ_add_˚Œ
(&
t
)->
ãxt
 = 
	`x°rdup
(
cﬁumn
->
«me
);

484 
	`èbÀ_add_˚Œ
(&
t
)->
js⁄
 = 
	`ovsdb_ty≥_to_js⁄
(&
cﬁumn
->
ty≥
);

488 
	`ovsdb_schema_de°roy
(
schema
);

489 
	`èbÀ_¥öt
(&
t
, &
èbÀ_°yÀ
);

490 
	}
}

493 
	$do_å™ß˘
(
js⁄Ωc
 *
Ωc
, c⁄° *
d©aba£
 
OVS_UNUSED
,

494 
¨gc
 
OVS_UNUSED
, *
¨gv
[])

496 
js⁄Ωc_msg
 *
ªque°
, *
ª∂y
;

497 
js⁄
 *
å™ß˘i⁄
;

499 
å™ß˘i⁄
 = 
	`∑r£_js⁄
(
¨gv
[0]);

501 
ªque°
 = 
	`js⁄Ωc_¸óã_ªque°
("å™ß˘", 
å™ß˘i⁄
, 
NULL
);

502 
	`check_txn
(
	`js⁄Ωc_å™ß˘_block
(
Ωc
, 
ªque°
, &
ª∂y
), &reply);

503 
	`¥öt_js⁄
(
ª∂y
->
ªsu…
);

504 
	`putch¨
('\n');

505 
	`js⁄Ωc_msg_de°roy
(
ª∂y
);

506 
	}
}

509 
	$m⁄ô‹_¥öt_row
(
js⁄
 *
row
, c⁄° *
ty≥
, c⁄° *
uuid
,

510 c⁄° 
ovsdb_cﬁumn_£t
 *
cﬁumns
, 
èbÀ
 *
t
)

512 
size_t
 
i
;

514 i‡(!
row
) {

515 
	`ovs_îr‹
(0, "missög %†row", 
ty≥
);

517 } i‡(
row
->
ty≥
 !
JSON_OBJECT
) {

518 
	`ovs_îr‹
(0, "<row> isÇot object");

522 
	`èbÀ_add_row
(
t
);

523 
	`èbÀ_add_˚Œ
(
t
)->
ãxt
 = 
	`x°rdup
(
uuid
);

524 
	`èbÀ_add_˚Œ
(
t
)->
ãxt
 = 
	`x°rdup
(
ty≥
);

525 
i
 = 0; i < 
cﬁumns
->
n_cﬁumns
; i++) {

526 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
 = 
cﬁumns
->cﬁumns[
i
];

527 
js⁄
 *
vÆue
 = 
	`shash_föd_d©a
(
	`js⁄_obje˘
(
row
), 
cﬁumn
->
«me
);

528 
˚Œ
 *˚Œ = 
	`èbÀ_add_˚Œ
(
t
);

529 i‡(
vÆue
) {

530 
˚Œ
->
js⁄
 = 
	`js⁄_˛⁄e
(
vÆue
);

531 
˚Œ
->
ty≥
 = &
cﬁumn
->type;

534 
	}
}

537 
	$m⁄ô‹_¥öt
(
js⁄
 *
èbÀ_upd©es
,

538 c⁄° 
ovsdb_èbÀ_schema
 *
èbÀ
,

539 c⁄° 
ovsdb_cﬁumn_£t
 *
cﬁumns
, 
boﬁ
 
öôül
)

541 
js⁄
 *
èbÀ_upd©e
;

542 
shash_node
 *
node
;

543 
èbÀ
 
t
;

544 
size_t
 
i
;

546 
	`èbÀ_öô
(&
t
);

547 
	`èbÀ_£t_time°amp
(&
t
, 
time°amp
);

549 i‡(
èbÀ_upd©es
->
ty≥
 !
JSON_OBJECT
) {

550 
	`ovs_îr‹
(0, "<table-updates> isÇot object");

553 
èbÀ_upd©e
 = 
	`shash_föd_d©a
(
	`js⁄_obje˘
(
èbÀ_upd©es
), 
èbÀ
->
«me
);

554 i‡(!
èbÀ_upd©e
) {

557 i‡(
èbÀ_upd©e
->
ty≥
 !
JSON_OBJECT
) {

558 
	`ovs_îr‹
(0, "<table-update> isÇot object");

562 
	`èbÀ_add_cﬁumn
(&
t
, "row");

563 
	`èbÀ_add_cﬁumn
(&
t
, "action");

564 
i
 = 0; i < 
cﬁumns
->
n_cﬁumns
; i++) {

565 
	`èbÀ_add_cﬁumn
(&
t
, "%s", 
cﬁumns
->cﬁumns[
i
]->
«me
);

567 
	`SHASH_FOR_EACH
 (
node
, 
	`js⁄_obje˘
(
èbÀ_upd©e
)) {

568 
js⁄
 *
row_upd©e
 = 
node
->
d©a
;

569 
js⁄
 *
ﬁd
, *
√w
;

571 i‡(
row_upd©e
->
ty≥
 !
JSON_OBJECT
) {

572 
	`ovs_îr‹
(0, "<row-update> isÇot object");

575 
ﬁd
 = 
	`shash_föd_d©a
(
	`js⁄_obje˘
(
row_upd©e
), "old");

576 
√w
 = 
	`shash_föd_d©a
(
	`js⁄_obje˘
(
row_upd©e
), "new");

577 i‡(
öôül
) {

578 
	`m⁄ô‹_¥öt_row
(
√w
, "öôül", 
node
->
«me
, 
cﬁumns
, &
t
);

579 } i‡(!
ﬁd
) {

580 
	`m⁄ô‹_¥öt_row
(
√w
, "ö£π", 
node
->
«me
, 
cﬁumns
, &
t
);

581 } i‡(!
√w
) {

582 
	`m⁄ô‹_¥öt_row
(
ﬁd
, "dñëe", 
node
->
«me
, 
cﬁumns
, &
t
);

584 
	`m⁄ô‹_¥öt_row
(
ﬁd
, "ﬁd", 
node
->
«me
, 
cﬁumns
, &
t
);

585 
	`m⁄ô‹_¥öt_row
(
√w
, "√w", "", 
cﬁumns
, &
t
);

588 
	`èbÀ_¥öt
(&
t
, &
èbÀ_°yÀ
);

589 
	`èbÀ_de°roy
(&
t
);

590 
	}
}

593 
	$add_cﬁumn
(c⁄° *
£rvî
, c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
,

594 
ovsdb_cﬁumn_£t
 *
cﬁumns
, 
js⁄
 *
cﬁumns_js⁄
)

596 i‡(
	`ovsdb_cﬁumn_£t_c⁄èös
(
cﬁumns
, 
cﬁumn
->
ödex
)) {

597 
	`ovs_Áèl
(0, "%s: column \"%s\" mentioned multipleÅimes",

598 
£rvî
, 
cﬁumn
->
«me
);

600 
	`ovsdb_cﬁumn_£t_add
(
cﬁumns
, 
cﬁumn
);

601 
	`js⁄_¨øy_add
(
cﬁumns_js⁄
, 
	`js⁄_°rög_¸óã
(
cﬁumn
->
«me
));

602 
	}
}

604 
js⁄
 *

605 
	$∑r£_m⁄ô‹_cﬁumns
(*
¨g
, c⁄° *
£rvî
, c⁄° *
d©aba£
,

606 c⁄° 
ovsdb_èbÀ_schema
 *
èbÀ
,

607 
ovsdb_cﬁumn_£t
 *
cﬁumns
)

609 
boﬁ
 
öôül
, 
ö£π
, 
dñëe
, 
modify
;

610 
js⁄
 *
mr
, *
cﬁumns_js⁄
;

611 *
ßve_±r
 = 
NULL
;

612 *
tokí
;

614 
mr
 = 
	`js⁄_obje˘_¸óã
();

615 
cﬁumns_js⁄
 = 
	`js⁄_¨øy_¸óã_em±y
();

616 
	`js⁄_obje˘_put
(
mr
, "cﬁumns", 
cﬁumns_js⁄
);

618 
öôül
 = 
ö£π
 = 
dñëe
 = 
modify
 = 
åue
;

619 
tokí
 = 
	`°πok_r
(
¨g
, ",", &
ßve_±r
);Åokí !
NULL
;

620 
tokí
 = 
	`°πok_r
(
NULL
, ",", &
ßve_±r
)) {

621 i‡(!
	`°rcmp
(
tokí
, "!initial")) {

622 
öôül
 = 
Ál£
;

623 } i‡(!
	`°rcmp
(
tokí
, "!insert")) {

624 
ö£π
 = 
Ál£
;

625 } i‡(!
	`°rcmp
(
tokí
, "!delete")) {

626 
dñëe
 = 
Ál£
;

627 } i‡(!
	`°rcmp
(
tokí
, "!modify")) {

628 
modify
 = 
Ál£
;

630 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
;

632 
cﬁumn
 = 
	`ovsdb_èbÀ_schema_gë_cﬁumn
(
èbÀ
, 
tokí
);

633 i‡(!
cﬁumn
) {

634 
	`ovs_Áèl
(0, "%s:Åable \"%s\" in %s doesÇot haveá "

636 
£rvî
, 
èbÀ
->
«me
, 
d©aba£
, 
tokí
);

638 
	`add_cﬁumn
(
£rvî
, 
cﬁumn
, 
cﬁumns
, 
cﬁumns_js⁄
);

642 i‡(
cﬁumns_js⁄
->
u
.
¨øy
.
n
 == 0) {

643 c⁄° 
shash_node
 **
nodes
;

644 
size_t
 
i
, 
n
;

646 
n
 = 
	`shash_cou¡
(&
èbÀ
->
cﬁumns
);

647 
nodes
 = 
	`shash_s‹t
(&
èbÀ
->
cﬁumns
);

648 
i
 = 0; i < 
n
; i++) {

649 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
 = 
nodes
[
i
]->
d©a
;

650 i‡(
cﬁumn
->
ödex
 !
OVSDB_COL_UUID


651 && 
cﬁumn
->
ödex
 !
OVSDB_COL_VERSION
) {

652 
	`add_cﬁumn
(
£rvî
, 
cﬁumn
, 
cﬁumns
, 
cﬁumns_js⁄
);

655 
	`‰ì
(
nodes
);

657 
	`add_cﬁumn
(
£rvî
, 
	`ovsdb_èbÀ_schema_gë_cﬁumn
(
èbÀ
,"_version"),

658 
cﬁumns
, 
cﬁumns_js⁄
);

661 i‡(!
öôül
 || !
ö£π
 || !
dñëe
 || !
modify
) {

662 
js⁄
 *
£À˘
 = 
	`js⁄_obje˘_¸óã
();

663 
	`js⁄_obje˘_put
(
£À˘
, "öôül", 
	`js⁄_boﬁón_¸óã
(
öôül
));

664 
	`js⁄_obje˘_put
(
£À˘
, "ö£π", 
	`js⁄_boﬁón_¸óã
(
ö£π
));

665 
	`js⁄_obje˘_put
(
£À˘
, "dñëe", 
	`js⁄_boﬁón_¸óã
(
dñëe
));

666 
	`js⁄_obje˘_put
(
£À˘
, "modify", 
	`js⁄_boﬁón_¸óã
(
modify
));

667 
	`js⁄_obje˘_put
(
mr
, "£À˘", 
£À˘
);

670  
mr
;

671 
	}
}

674 
	$do_m⁄ô‹
(
js⁄Ωc
 *
Ωc
, c⁄° *
d©aba£
,

675 
¨gc
, *
¨gv
[])

677 c⁄° *
£rvî
 = 
	`js⁄Ωc_gë_«me
(
Ωc
);

678 c⁄° *
èbÀ_«me
 = 
¨gv
[0];

679 
ovsdb_cﬁumn_£t
 
cﬁumns
 = 
OVSDB_COLUMN_SET_INITIALIZER
;

680 
ovsdb_èbÀ_schema
 *
èbÀ
;

681 
ovsdb_schema
 *
schema
;

682 
js⁄Ωc_msg
 *
ªque°
;

683 
js⁄
 *
m⁄ô‹
, *
m⁄ô‹_ªque°_¨øy
,

684 *
m⁄ô‹_ªque°s
, *
ªque°_id
;

686 
schema
 = 
	`„tch_schema
(
Ωc
, 
d©aba£
);

687 
èbÀ
 = 
	`shash_föd_d©a
(&
schema
->
èbÀs
, 
èbÀ_«me
);

688 i‡(!
èbÀ
) {

689 
	`ovs_Áèl
(0, "%s: %s doesÇot haveáÅableÇamed \"%s\"",

690 
£rvî
, 
d©aba£
, 
èbÀ_«me
);

693 
m⁄ô‹_ªque°_¨øy
 = 
	`js⁄_¨øy_¸óã_em±y
();

694 i‡(
¨gc
 > 1) {

695 
i
;

697 
i
 = 1; i < 
¨gc
; i++) {

698 
	`js⁄_¨øy_add
(

699 
m⁄ô‹_ªque°_¨øy
,

700 
	`∑r£_m⁄ô‹_cﬁumns
(
¨gv
[
i
], 
£rvî
, 
d©aba£
, 
èbÀ
,

701 &
cﬁumns
));

706 
em±y
[] = "";

707 
	`js⁄_¨øy_add
(

708 
m⁄ô‹_ªque°_¨øy
,

709 
	`∑r£_m⁄ô‹_cﬁumns
(
em±y
, 
£rvî
, 
d©aba£
, 
èbÀ
, &
cﬁumns
));

712 
m⁄ô‹_ªque°s
 = 
	`js⁄_obje˘_¸óã
();

713 
	`js⁄_obje˘_put
(
m⁄ô‹_ªque°s
, 
èbÀ_«me
, 
m⁄ô‹_ªque°_¨øy
);

715 
m⁄ô‹
 = 
	`js⁄_¨øy_¸óã_3
(
	`js⁄_°rög_¸óã
(
d©aba£
),

716 
	`js⁄_nuŒ_¸óã
(), 
m⁄ô‹_ªque°s
);

717 
ªque°
 = 
	`js⁄Ωc_¸óã_ªque°
("m⁄ô‹", 
m⁄ô‹
, 
NULL
);

718 
ªque°_id
 = 
	`js⁄_˛⁄e
(
ªque°
->
id
);

719 
	`js⁄Ωc_£nd
(
Ωc
, 
ªque°
);

721 
js⁄Ωc_msg
 *
msg
;

722 
îr‹
;

724 
îr‹
 = 
	`js⁄Ωc_ªcv_block
(
Ωc
, &
msg
);

725 i‡(
îr‹
) {

726 
	`ovsdb_schema_de°roy
(
schema
);

727 
	`ovs_Áèl
(
îr‹
, "%s:Ñe˚ivêÁûed", 
£rvî
);

730 i‡(
msg
->
ty≥
 =
JSONRPC_REQUEST
 && !
	`°rcmp
(msg->
mëhod
, "echo")) {

731 
	`js⁄Ωc_£nd
(
Ωc
, 
	`js⁄Ωc_¸óã_ª∂y
(
	`js⁄_˛⁄e
(
msg
->
∑øms
),

732 
msg
->
id
));

733 } i‡(
msg
->
ty≥
 =
JSONRPC_REPLY


734 && 
	`js⁄_equÆ
(
msg
->
id
, 
ªque°_id
)) {

735 
	`m⁄ô‹_¥öt
(
msg
->
ªsu…
, 
èbÀ
, &
cﬁumns
, 
åue
);

736 
	`fÊush
(
°dout
);

737 i‡(
	`gë_dëach
()) {

738 
	`d´m⁄_ßve_fd
(
STDOUT_FILENO
);

739 
	`d´m⁄ize
();

741 } i‡(
msg
->
ty≥
 =
JSONRPC_NOTIFY


742 && !
	`°rcmp
(
msg
->
mëhod
, "update")) {

743 
js⁄
 *
∑øms
 = 
msg
->params;

744 i‡(
∑øms
->
ty≥
 =
JSON_ARRAY


745 && 
∑øms
->
u
.
¨øy
.
n
 == 2

746 && 
∑øms
->
u
.
¨øy
.
ñems
[0]->
ty≥
 =
JSON_NULL
) {

747 
	`m⁄ô‹_¥öt
(
∑øms
->
u
.
¨øy
.
ñems
[1],

748 
èbÀ
, &
cﬁumns
, 
Ál£
);

749 
	`fÊush
(
°dout
);

752 
	`js⁄Ωc_msg_de°roy
(
msg
);

754 
	}
}

756 
	sdump_èbÀ_aux
 {

757 
ovsdb_d©um
 **
	md©a
;

758 c⁄° 
ovsdb_cﬁumn
 **
	mcﬁumns
;

759 
size_t
 
	mn_cﬁumns
;

763 
	$com∑ª_d©a
(
size_t
 
a_y
, size_à
b_y
, size_à
x
,

764 c⁄° 
dump_èbÀ_aux
 *
aux
)

766  
	`ovsdb_d©um_com∑ª_3way
(&
aux
->
d©a
[
a_y
][
x
],

767 &
aux
->
d©a
[
b_y
][
x
],

768 &
aux
->
cﬁumns
[
x
]->
ty≥
);

769 
	}
}

772 
	$com∑ª_rows
(
size_t
 
a_y
, size_à
b_y
, *
aux_
)

774 
dump_èbÀ_aux
 *
aux
 = 
aux_
;

775 
size_t
 
x
;

779 
x
 = 0; x < 
aux
->
n_cﬁumns
; x++) {

780 i‡(
aux
->
cﬁumns
[
x
]->
ty≥
.
key
.ty≥ !
OVSDB_TYPE_UUID
) {

781 
cmp
 = 
	`com∑ª_d©a
(
a_y
, 
b_y
, 
x
, 
aux
);

782 i‡(
cmp
) {

783  
cmp
;

789 
x
 = 0; x < 
aux
->
n_cﬁumns
; x++) {

790 i‡(
aux
->
cﬁumns
[
x
]->
ty≥
.
key
.ty≥ =
OVSDB_TYPE_UUID
) {

791 
cmp
 = 
	`com∑ª_d©a
(
a_y
, 
b_y
, 
x
, 
aux
);

792 i‡(
cmp
) {

793  
cmp
;

799 
	}
}

802 
	$sw≠_rows
(
size_t
 
a_y
, size_à
b_y
, *
aux_
)

804 
dump_èbÀ_aux
 *
aux
 = 
aux_
;

805 
ovsdb_d©um
 *
tmp
 = 
aux
->
d©a
[
a_y
];

806 
aux
->
d©a
[
a_y
] =áux->d©a[
b_y
];

807 
aux
->
d©a
[
b_y
] = 
tmp
;

808 
	}
}

811 
	$com∑ª_cﬁumns
(c⁄° *
a_
, c⁄° *
b_
)

813 c⁄° 
ovsdb_cﬁumn
 *c⁄° *
≠
 = 
a_
;

814 c⁄° 
ovsdb_cﬁumn
 *c⁄° *
bp
 = 
b_
;

815 c⁄° 
ovsdb_cﬁumn
 *
a
 = *
≠
;

816 c⁄° 
ovsdb_cﬁumn
 *
b
 = *
bp
;

818  
	`°rcmp
(
a
->
«me
, 
b
->name);

819 
	}
}

822 
	$dump_èbÀ
(c⁄° 
ovsdb_èbÀ_schema
 *
ts
, 
js⁄_¨øy
 *
rows
)

824 c⁄° 
ovsdb_cﬁumn
 **
cﬁumns
;

825 
size_t
 
n_cﬁumns
;

827 
ovsdb_d©um
 **
d©a
;

829 
dump_èbÀ_aux
 
aux
;

830 
shash_node
 *
node
;

831 
èbÀ
 
t
;

832 
size_t
 
x
, 
y
;

835 
cﬁumns
 = 
	`xmÆloc
(
	`shash_cou¡
(&
ts
->columns) *  *columns);

836 
n_cﬁumns
 = 0;

837 
	`SHASH_FOR_EACH
 (
node
, &
ts
->
cﬁumns
) {

838 
ovsdb_cﬁumn
 *
cﬁumn
 = 
node
->
d©a
;

839 i‡(
	`°rcmp
(
cﬁumn
->
«me
, "_version")) {

840 
cﬁumns
[
n_cﬁumns
++] = 
cﬁumn
;

843 
	`qs‹t
(
cﬁumns
, 
n_cﬁumns
,  *cﬁumns, 
com∑ª_cﬁumns
);

846 
d©a
 = 
	`xmÆloc
(
rows
->
n
 *  *data);

847 
y
 = 0; y < 
rows
->
n
; y++) {

848 
shash
 *
row
;

850 i‡(
rows
->
ñems
[
y
]->
ty≥
 !
JSON_OBJECT
) {

851 
	`ovs_Áèl
(0, "row %zu inÅable %sÑesponse isÇotá JSON object: "

852 "%s", 
y
, 
ts
->
«me
, 
	`js⁄_to_°rög
(
rows
->
ñems
[y], 0));

854 
row
 = 
	`js⁄_obje˘
(
rows
->
ñems
[
y
]);

856 
d©a
[
y
] = 
	`xmÆloc
(
n_cﬁumns
 *  **data);

857 
x
 = 0; x < 
n_cﬁumns
; x++) {

858 c⁄° 
js⁄
 *js⁄ = 
	`shash_föd_d©a
(
row
, 
cﬁumns
[
x
]->
«me
);

859 i‡(!
js⁄
) {

860 
	`ovs_Áèl
(0, "row %zu inÅable %sÑesponseÜacks %s column",

861 
y
, 
ts
->
«me
, 
cﬁumns
[
x
]->name);

864 
	`check_ovsdb_îr‹
(
	`ovsdb_d©um_‰om_js⁄
(&
d©a
[
y
][
x
],

865 &
cﬁumns
[
x
]->
ty≥
,

866 
js⁄
, 
NULL
));

871 
aux
.
d©a
 = data;

872 
aux
.
cﬁumns
 = columns;

873 
aux
.
n_cﬁumns
 =Ç_columns;

874 
	`s‹t
(
rows
->
n
, 
com∑ª_rows
, 
sw≠_rows
, &
aux
);

877 
	`èbÀ_öô
(&
t
);

878 
	`èbÀ_£t_ˇ±i⁄
(&
t
, 
	`xa•rötf
("%†èbÀ", 
ts
->
«me
));

879 
x
 = 0; x < 
n_cﬁumns
; x++) {

880 
	`èbÀ_add_cﬁumn
(&
t
, "%s", 
cﬁumns
[
x
]->
«me
);

884 
y
 = 0; y < 
rows
->
n
; y++) {

885 
	`èbÀ_add_row
(&
t
);

886 
x
 = 0; x < 
n_cﬁumns
; x++) {

887 
˚Œ
 *˚Œ = 
	`èbÀ_add_˚Œ
(&
t
);

888 
˚Œ
->
js⁄
 = 
	`ovsdb_d©um_to_js⁄
(&
d©a
[
y
][
x
], &
cﬁumns
[x]->
ty≥
);

889 
˚Œ
->
ty≥
 = &
cﬁumns
[
x
]->type;

890 
	`ovsdb_d©um_de°roy
(&
d©a
[
y
][
x
], &
cﬁumns
[x]->
ty≥
);

892 
	`‰ì
(
d©a
[
y
]);

894 
	`èbÀ_¥öt
(&
t
, &
èbÀ_°yÀ
);

895 
	`èbÀ_de°roy
(&
t
);

897 
	`‰ì
(
d©a
);

898 
	`‰ì
(
cﬁumns
);

899 
	}
}

902 
	$do_dump
(
js⁄Ωc
 *
Ωc
, c⁄° *
d©aba£
,

903 
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

905 
js⁄Ωc_msg
 *
ªque°
, *
ª∂y
;

906 
ovsdb_schema
 *
schema
;

907 
js⁄
 *
å™ß˘i⁄
;

909 c⁄° 
shash_node
 **
èbÀs
;

910 
size_t
 
n_èbÀs
;

912 
size_t
 
i
;

914 
schema
 = 
	`„tch_schema
(
Ωc
, 
d©aba£
);

915 
èbÀs
 = 
	`shash_s‹t
(&
schema
->tables);

916 
n_èbÀs
 = 
	`shash_cou¡
(&
schema
->
èbÀs
);

919 
å™ß˘i⁄
 = 
	`js⁄_¨øy_¸óã_1
(
	`js⁄_°rög_¸óã
(
d©aba£
));

920 
i
 = 0; i < 
n_èbÀs
; i++) {

921 c⁄° 
ovsdb_èbÀ_schema
 *
ts
 = 
èbÀs
[
i
]->
d©a
;

922 
js⁄
 *
›
, *
cﬁumns
;

923 
shash_node
 *
node
;

925 
cﬁumns
 = 
	`js⁄_¨øy_¸óã_em±y
();

926 
	`SHASH_FOR_EACH
 (
node
, &
ts
->
cﬁumns
) {

927 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
 = 
node
->
d©a
;

929 i‡(
	`°rcmp
(
cﬁumn
->
«me
, "_version")) {

930 
	`js⁄_¨øy_add
(
cﬁumns
, 
	`js⁄_°rög_¸óã
(
cﬁumn
->
«me
));

934 
›
 = 
	`js⁄_obje˘_¸óã
();

935 
	`js⁄_obje˘_put_°rög
(
›
, "op", "select");

936 
	`js⁄_obje˘_put_°rög
(
›
, "èbÀ", 
èbÀs
[
i
]->
«me
);

937 
	`js⁄_obje˘_put
(
›
, "whîe", 
	`js⁄_¨øy_¸óã_em±y
());

938 
	`js⁄_obje˘_put
(
›
, "cﬁumns", 
cﬁumns
);

939 
	`js⁄_¨øy_add
(
å™ß˘i⁄
, 
›
);

943 
ªque°
 = 
	`js⁄Ωc_¸óã_ªque°
("å™ß˘", 
å™ß˘i⁄
, 
NULL
);

944 
	`check_txn
(
	`js⁄Ωc_å™ß˘_block
(
Ωc
, 
ªque°
, &
ª∂y
), &reply);

947 i‡(
ª∂y
->
ªsu…
->
ty≥
 !
JSON_ARRAY


948 || 
ª∂y
->
ªsu…
->
u
.
¨øy
.
n
 !
n_èbÀs
) {

949 
	`ovs_Áèl
(0, "reply isÇotárray of %zuÉlements: %s",

950 
n_èbÀs
, 
	`js⁄_to_°rög
(
ª∂y
->
ªsu…
, 0));

952 
i
 = 0; i < 
n_èbÀs
; i++) {

953 c⁄° 
ovsdb_èbÀ_schema
 *
ts
 = 
èbÀs
[
i
]->
d©a
;

954 c⁄° 
js⁄
 *
›_ªsu…
 = 
ª∂y
->
ªsu…
->
u
.
¨øy
.
ñems
[
i
];

955 
js⁄
 *
rows
;

957 i‡(
›_ªsu…
->
ty≥
 !
JSON_OBJECT


958 || !(
rows
 = 
	`shash_föd_d©a
(
	`js⁄_obje˘
(
›_ªsu…
), "rows"))

959 || 
rows
->
ty≥
 !
JSON_ARRAY
) {

960 
	`ovs_Áèl
(0, "%sÅableÑeply isÇotán object withá \"rows\" "

962 
ts
->
«me
, 
	`js⁄_to_°rög
(
›_ªsu…
, 0));

965 
	`dump_èbÀ
(
ts
, &
rows
->
u
.
¨øy
);

968 
	`js⁄Ωc_msg_de°roy
(
ª∂y
);

969 
	`‰ì
(
èbÀs
);

970 
	`ovsdb_schema_de°roy
(
schema
);

971 
	}
}

974 
	$do_hñp
(
js⁄Ωc
 *
Ωc
 
OVS_UNUSED
, c⁄° *
d©aba£
 OVS_UNUSED,

975 
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

977 
	`ußge
();

978 
	}
}

987 c⁄° 
ovsdb_˛õ¡_comm™d
 
	gÆl_comm™ds
[] = {

988 { "li°-dbs", 
NEED_RPC
, 0, 0, 
do_li°_dbs
 },

989 { "gë-schema", 
NEED_DATABASE
, 0, 0, 
do_gë_schema
 },

990 { "gë-schema-vîsi⁄", 
NEED_DATABASE
, 0, 0, 
do_gë_schema_vîsi⁄
 },

991 { "li°-èbÀs", 
NEED_DATABASE
, 0, 0, 
do_li°_èbÀs
 },

992 { "li°-cﬁumns", 
NEED_DATABASE
, 0, 1, 
do_li°_cﬁumns
 },

993 { "å™ß˘", 
NEED_RPC
, 1, 1, 
do_å™ß˘
 },

994 { "m⁄ô‹", 
NEED_DATABASE
, 1, 
INT_MAX
, 
do_m⁄ô‹
 },

995 { "dump", 
NEED_DATABASE
, 0, 0, 
do_dump
 },

997 { "hñp", 
NEED_NONE
, 0, 
INT_MAX
, 
do_hñp
 },

999 { 
NULL
, 0, 0, 0, NULL },

	@/home/lsch/mytest/openvswitch-1.9.0/ovsdb/ovsdb-server.c

16 
	~<c⁄fig.h
>

18 
	~<as£π.h
>

19 
	~<î∫o.h
>

20 
	~<gë›t.h
>

21 
	~<sig«l.h
>

22 
	~<uni°d.h
>

24 
	~"cﬁumn.h
"

25 
	~"comm™d-löe.h
"

26 
	~"d´m⁄.h
"

27 
	~"dús.h
"

28 
	~"dummy.h
"

29 
	~"dy«mic-°rög.h
"

30 
	~"fûe.h
"

31 
	~"hash.h
"

32 
	~"js⁄.h
"

33 
	~"js⁄Ωc.h
"

34 
	~"js⁄Ωc-£rvî.h
"

35 
	~"Àak-checkî.h
"

36 
	~"li°.h
"

37 
	~"mem‹y.h
"

38 
	~"ovsdb.h
"

39 
	~"ovsdb-d©a.h
"

40 
	~"ovsdb-ty≥s.h
"

41 
	~"ovsdb-îr‹.h
"

42 
	~"pﬁl-lo›.h
"

43 
	~"¥o˚ss.h
"

44 
	~"row.h
"

45 
	~"sim≠.h
"

46 
	~"°ªam-s¶.h
"

47 
	~"°ªam.h
"

48 
	~"°ªss.h
"

49 
	~"s£t.h
"

50 
	~"èbÀ.h
"

51 
	~"timevÆ.h
"

52 
	~"å™ß˘i⁄.h
"

53 
	~"åiggî.h
"

54 
	~"utû.h
"

55 
	~"unix˘l.h
"

56 
	~"vlog.h
"

58 
VLOG_DEFINE_THIS_MODULE
(
ovsdb_£rvî
);

60 
	sdb
 {

62 *
	mfûíame
;

63 
ovsdb_fûe
 *
	mfûe
;

64 
ovsdb
 *
	mdb
;

67 
ovsdb_txn
 *
	mtxn
;

71 *
	g¥iv©e_key_fûe
;

72 *
	g˚πifiˇã_fûe
;

73 *
	gˇ_˚π_fûe
;

74 
boﬁ
 
	gboŸ°øp_ˇ_˚π
;

76 
unix˘l_cb_func
 
	govsdb_£rvî_exô
;

77 
unix˘l_cb_func
 
	govsdb_£rvî_com∑˘
;

78 
unix˘l_cb_func
 
	govsdb_£rvî_ªc⁄√˘
;

80 
∑r£_›ti⁄s
(*
¨gc
, **
¨gvp
[],

81 
s£t
 *
ªmŸes
, **
unix˘l_∑thp
,

82 **
run_comm™d
);

83 
	$ußge
(Ë
NO_RETURN
;

85 
	`ªc⁄figuª_‰om_db
(
ovsdb_js⁄Ωc_£rvî
 *
js⁄Ωc
,

86 c⁄° 
db
 
dbs
[], 
size_t
 
n_dbs
,

87 
s£t
 *
ªmŸes
);

89 
	`upd©e_ªmŸe_°©us
(c⁄° 
ovsdb_js⁄Ωc_£rvî
 *
js⁄Ωc
,

90 c⁄° 
s£t
 *
ªmŸes
,

91 
db
 
dbs
[], 
size_t
 
n_dbs
);

94 
	$maö
(
¨gc
, *
¨gv
[])

96 *
unix˘l_∑th
 = 
NULL
;

97 *
run_comm™d
 = 
NULL
;

98 
unix˘l_£rvî
 *
unix˘l
;

99 
ovsdb_js⁄Ωc_£rvî
 *
js⁄Ωc
;

100 
s£t
 
ªmŸes
;

101 
¥o˚ss
 *
run_¥o˚ss
;

102 
boﬁ
 
exôög
;

103 
ªtvÆ
;

104 
°©us_timî
 = 
LLONG_MIN
;

106 
db
 *
dbs
;

107 
n_dbs
;

108 
i
;

110 
	`¥o˘ôÀ_öô
(
¨gc
, 
¨gv
);

111 
	`£t_¥ogøm_«me
(
¨gv
[0]);

112 
	`°ªss_öô_comm™d
();

113 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

114 
	`¥o˚ss_öô
();

116 
	`∑r£_›ti⁄s
(&
¨gc
, &
¨gv
, &
ªmŸes
, &
unix˘l_∑th
, &
run_comm™d
);

118 
	`d´m⁄ize_°¨t
();

120 
n_dbs
 = 
	`MAX
(1, 
¨gc
);

121 
dbs
 = 
	`xˇŒoc
(
n_dbs
 + 1,  *dbs);

122 i‡(
¨gc
 > 0) {

123 
i
 = 0; i < 
¨gc
; i++) {

124 
dbs
[
i
].
fûíame
 = 
¨gv
[i];

127 
dbs
[0].
fûíame
 = 
	`xa•rötf
("%s/c⁄f.db", 
	`ovs_dbdú
());

130 
i
 = 0; i < 
n_dbs
; i++) {

131 
ovsdb_îr‹
 *
îr‹
;

133 
îr‹
 = 
	`ovsdb_fûe_›í
(
dbs
[
i
].
fûíame
, 
Ál£
,

134 &
dbs
[
i
].
db
, &dbs[i].
fûe
);

135 i‡(
îr‹
) {

136 
	`ovs_Áèl
(0, "%s", 
	`ovsdb_îr‹_to_°rög
(
îr‹
));

140 
js⁄Ωc
 = 
	`ovsdb_js⁄Ωc_£rvî_¸óã
();

141 
i
 = 0; i < 
n_dbs
; i++) {

142 i‡(!
	`ovsdb_js⁄Ωc_£rvî_add_db
(
js⁄Ωc
, 
dbs
[
i
].
db
)) {

143 
	`ovs_Áèl
(0, "%s: duplicate databaseÇame",

144 
dbs
[
i
].
db
->
schema
->
«me
);

147 
	`ªc⁄figuª_‰om_db
(
js⁄Ωc
, 
dbs
, 
n_dbs
, &
ªmŸes
);

149 
ªtvÆ
 = 
	`unix˘l_£rvî_¸óã
(
unix˘l_∑th
, &
unix˘l
);

150 i‡(
ªtvÆ
) {

151 
	`exô
(
EXIT_FAILURE
);

154 i‡(
run_comm™d
) {

155 *
run_¨gv
[4];

157 
run_¨gv
[0] = "/bin/sh";

158 
run_¨gv
[1] = "-c";

159 
run_¨gv
[2] = 
run_comm™d
;

160 
run_¨gv
[3] = 
NULL
;

162 
ªtvÆ
 = 
	`¥o˚ss_°¨t
(
run_¨gv
, 
NULL
, 0, NULL, 0, &
run_¥o˚ss
);

163 i‡(
ªtvÆ
) {

164 
	`ovs_Áèl
(
ªtvÆ
, "%s:Öro˚s†ÁûedÅÿ°¨t", 
run_comm™d
);

167 
run_¥o˚ss
 = 
NULL
;

170 
	`d´m⁄ize_com∂ëe
();

172 i‡(!
run_comm™d
) {

176 
	`VLOG_INFO
("%†(O≥¿vSwôchË%s", 
¥ogøm_«me
, 
VERSION
);

179 
	`unix˘l_comm™d_ªgi°î
("exô", "", 0, 0, 
ovsdb_£rvî_exô
, &
exôög
);

180 
	`unix˘l_comm™d_ªgi°î
("ovsdb-server/compact", "", 0, 1,

181 
ovsdb_£rvî_com∑˘
, 
dbs
);

182 
	`unix˘l_comm™d_ªgi°î
("ovsdb-server/reconnect", "", 0, 0,

183 
ovsdb_£rvî_ªc⁄√˘
, 
js⁄Ωc
);

185 
exôög
 = 
Ál£
;

186 !
exôög
) {

187 
i
;

189 
	`mem‹y_run
();

190 i‡(
	`mem‹y_should_ªp‹t
()) {

191 
sim≠
 
ußge
;

193 
	`sim≠_öô
(&
ußge
);

194 
	`ovsdb_js⁄Ωc_£rvî_gë_mem‹y_ußge
(
js⁄Ωc
, &
ußge
);

195 
i
 = 0; i < 
n_dbs
; i++) {

196 
	`ovsdb_gë_mem‹y_ußge
(
dbs
[
i
].
db
, &
ußge
);

198 
	`mem‹y_ªp‹t
(&
ußge
);

199 
	`sim≠_de°roy
(&
ußge
);

202 
	`ªc⁄figuª_‰om_db
(
js⁄Ωc
, 
dbs
, 
n_dbs
, &
ªmŸes
);

203 
	`ovsdb_js⁄Ωc_£rvî_run
(
js⁄Ωc
);

204 
	`unix˘l_£rvî_run
(
unix˘l
);

206 
i
 = 0; i < 
n_dbs
; i++) {

207 
	`ovsdb_åiggî_run
(
dbs
[
i
].
db
, 
	`time_m£c
());

209 i‡(
run_¥o˚ss
 && 
	`¥o˚ss_exôed
(run_process)) {

210 
exôög
 = 
åue
;

214 i‡(
	`time_m£c
(Ë>
°©us_timî
) {

215 
°©us_timî
 = 
	`time_m£c
() + 5000;

216 
	`upd©e_ªmŸe_°©us
(
js⁄Ωc
, &
ªmŸes
, 
dbs
, 
n_dbs
);

219 
	`mem‹y_waô
();

220 
	`ovsdb_js⁄Ωc_£rvî_waô
(
js⁄Ωc
);

221 
	`unix˘l_£rvî_waô
(
unix˘l
);

222 
i
 = 0; i < 
n_dbs
; i++) {

223 
	`ovsdb_åiggî_waô
(
dbs
[
i
].
db
, 
	`time_m£c
());

225 i‡(
run_¥o˚ss
) {

226 
	`¥o˚ss_waô
(
run_¥o˚ss
);

228 i‡(
exôög
) {

229 
	`pﬁl_immedüã_wake
();

231 
	`pﬁl_timî_waô_u¡û
(
°©us_timî
);

232 
	`pﬁl_block
();

234 
	`ovsdb_js⁄Ωc_£rvî_de°roy
(
js⁄Ωc
);

235 
i
 = 0; i < 
n_dbs
; i++) {

236 
	`ovsdb_de°roy
(
dbs
[
i
].
db
);

238 
	`s£t_de°roy
(&
ªmŸes
);

239 
	`unix˘l_£rvî_de°roy
(
unix˘l
);

241 i‡(
run_¥o˚ss
 && 
	`¥o˚ss_exôed
(run_process)) {

242 
°©us
 = 
	`¥o˚ss_°©us
(
run_¥o˚ss
);

243 i‡(
°©us
) {

244 
	`ovs_Áèl
(0, "%s: childÉxited, %s",

245 
run_comm™d
, 
	`¥o˚ss_°©us_msg
(
°©us
));

250 
	}
}

252 c⁄° 
db
 *

253 
	$föd_db
(c⁄° 
db
 
dbs
[], 
size_t
 
n_dbs
, c⁄° *
db_«me
)

255 
size_t
 
i
;

257 
i
 = 0; i < 
n_dbs
; i++) {

258 i‡(!
	`°rcmp
(
dbs
[
i
].
db
->
schema
->
«me
, 
db_«me
)) {

259  &
dbs
[
i
];

263  
NULL
;

264 
	}
}

267 
	$∑r£_db_cﬁumn
(c⁄° 
db
 
dbs
[], 
size_t
 
n_dbs
,

268 c⁄° *
«me_
,

269 c⁄° 
db
 **
dbp
,

270 c⁄° 
ovsdb_èbÀ
 **
èbÀp
,

271 c⁄° 
ovsdb_cﬁumn
 **
cﬁum≈
)

273 c⁄° *
èbÀ_«me
, *
cﬁumn_«me
;

274 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
;

275 c⁄° 
ovsdb_èbÀ
 *
èbÀ
;

276 c⁄° *
tokís
[3];

277 *
ßve_±r
 = 
NULL
;

278 c⁄° 
db
 *db;

279 *
«me
;

281 
«me
 = 
	`x°rdup
(
«me_
);

282 
	`°πok_r
(
«me
, ":", &
ßve_±r
);

283 
tokís
[0] = 
	`°πok_r
(
NULL
, ",", &
ßve_±r
);

284 
tokís
[1] = 
	`°πok_r
(
NULL
, ",", &
ßve_±r
);

285 
tokís
[2] = 
	`°πok_r
(
NULL
, ",", &
ßve_±r
);

286 i‡(!
tokís
[0] || !tokens[1]) {

287 
	`ovs_Áèl
(0, "\"%s\": invÆid sy¡ax", 
«me_
);

289 i‡(
tokís
[2]) {

290 c⁄° *
db_«me
 = 
tokís
[0];

291 
èbÀ_«me
 = 
tokís
[1];

292 
cﬁumn_«me
 = 
tokís
[2];

294 
db
 = 
	`föd_db
(
dbs
, 
n_dbs
, 
tokís
[0]);

295 i‡(!
db
) {

296 
	`ovs_Áèl
(0, "\"%s\":Çÿd©aba£Çamed %s", 
«me_
, 
db_«me
);

299 i‡(
n_dbs
 > 1) {

300 
	`ovs_Áèl
(0, "\"%s\": databaseÇame must be specified (because "

301 "mu…ùÀ d©aba£†¨êc⁄figuªd)", 
«me_
);

304 
èbÀ_«me
 = 
tokís
[0];

305 
cﬁumn_«me
 = 
tokís
[1];

306 
db
 = &
dbs
[0];

309 
èbÀ
 = 
	`ovsdb_gë_èbÀ
(
db
->db, 
èbÀ_«me
);

310 i‡(!
èbÀ
) {

311 
	`ovs_Áèl
(0, "\"%s\":ÇÿèbÀÇamed %s", 
«me_
, 
èbÀ_«me
);

314 
cﬁumn
 = 
	`ovsdb_èbÀ_schema_gë_cﬁumn
(
èbÀ
->
schema
, 
cﬁumn_«me
);

315 i‡(!
cﬁumn
) {

316 
	`ovs_Áèl
(0, "\"%s\":Åable \"%s\" hasÇo column \"%s\"",

317 
«me_
, 
èbÀ_«me
, 
cﬁumn_«me
);

319 
	`‰ì
(
«me
);

321 *
dbp
 = 
db
;

322 *
cﬁum≈
 = 
cﬁumn
;

323 *
èbÀp
 = 
èbÀ
;

324 
	}
}

327 
	$∑r£_db_°rög_cﬁumn
(c⁄° 
db
 
dbs
[], 
size_t
 
n_dbs
,

328 c⁄° *
«me
,

329 c⁄° 
db
 **
dbp
,

330 c⁄° 
ovsdb_èbÀ
 **
èbÀp
,

331 c⁄° 
ovsdb_cﬁumn
 **
cﬁum≈
)

333 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
;

334 c⁄° 
ovsdb_èbÀ
 *
èbÀ
;

335 c⁄° 
db
 *db;

337 
	`∑r£_db_cﬁumn
(
dbs
, 
n_dbs
, 
«me
, &
db
, &
èbÀ
, &
cﬁumn
);

339 i‡(
cﬁumn
->
ty≥
.
key
.ty≥ !
OVSDB_TYPE_STRING


340 || 
cﬁumn
->
ty≥
.
vÆue
.ty≥ !
OVSDB_TYPE_VOID
) {

341 
	`ovs_Áèl
(0, "\"%s\":Åable \"%s\" column \"%s\" is "

343 
«me
, 
èbÀ
->
schema
->«me, 
cﬁumn
->name);

346 *
dbp
 = 
db
;

347 *
cﬁum≈
 = 
cﬁumn
;

348 *
èbÀp
 = 
èbÀ
;

349 
	}
}

351 
OVS_UNUSED
 const *

352 
	$quîy_db_°rög
(c⁄° 
db
 
dbs
[], 
size_t
 
n_dbs
, c⁄° *
«me
)

354 i‡(!
«me
 || 
	`°∫cmp
(name, "db:", 3)) {

355  
«me
;

357 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
;

358 c⁄° 
ovsdb_èbÀ
 *
èbÀ
;

359 c⁄° 
ovsdb_row
 *
row
;

360 c⁄° 
db
 *db;

362 
	`∑r£_db_°rög_cﬁumn
(
dbs
, 
n_dbs
, 
«me
, &
db
, &
èbÀ
, &
cﬁumn
);

364 
	`HMAP_FOR_EACH
 (
row
, 
hm≠_node
, &
èbÀ
->
rows
) {

365 c⁄° 
ovsdb_d©um
 *
d©um
;

366 
size_t
 
i
;

368 
d©um
 = &
row
->
fõlds
[
cﬁumn
->
ödex
];

369 
i
 = 0; i < 
d©um
->
n
; i++) {

370 i‡(
d©um
->
keys
[
i
].
°rög
[0]) {

371  
d©um
->
keys
[
i
].
°rög
;

375  
NULL
;

377 
	}
}

379 
ovsdb_js⁄Ωc_›ti⁄s
 *

380 
	$add_ªmŸe
(
shash
 *
ªmŸes
, c⁄° *
èrgë
)

382 
ovsdb_js⁄Ωc_›ti⁄s
 *
›ti⁄s
;

384 
›ti⁄s
 = 
	`shash_föd_d©a
(
ªmŸes
, 
èrgë
);

385 i‡(!
›ti⁄s
) {

386 
›ti⁄s
 = 
	`ovsdb_js⁄Ωc_deÁu…_›ti⁄s
(
èrgë
);

387 
	`shash_add
(
ªmŸes
, 
èrgë
, 
›ti⁄s
);

390  
›ti⁄s
;

391 
	}
}

393 
ovsdb_d©um
 *

394 
	$gë_d©um
(
ovsdb_row
 *
row
, c⁄° *
cﬁumn_«me
,

395 c⁄° 
ovsdb_©omic_ty≥
 
key_ty≥
,

396 c⁄° 
ovsdb_©omic_ty≥
 
vÆue_ty≥
,

397 c⁄° 
size_t
 
n_max
)

399 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 1);

400 c⁄° 
ovsdb_èbÀ_schema
 *
schema
 = 
row
->
èbÀ
->schema;

401 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
;

403 
cﬁumn
 = 
	`ovsdb_èbÀ_schema_gë_cﬁumn
(
schema
, 
cﬁumn_«me
);

404 i‡(!
cﬁumn
) {

405 
	`VLOG_DBG_RL
(&
æ
, "Table `%s' hasÇo `%s' column",

406 
schema
->
«me
, 
cﬁumn_«me
);

407  
NULL
;

410 i‡(
cﬁumn
->
ty≥
.
key
.ty≥ !
key_ty≥


411 || 
cﬁumn
->
ty≥
.
vÆue
.ty≥ !
vÆue_ty≥


412 || 
cﬁumn
->
ty≥
.
n_max
 !=Ç_max) {

413 i‡(!
	`VLOG_DROP_DBG
(&
æ
)) {

414 *
ty≥_«me
 = 
	`ovsdb_ty≥_to_íglish
(&
cﬁumn
->
ty≥
);

415 
	`VLOG_DBG
("Table `%s' column `%s' hasÅype %s,ÇotÉxpected "

417 
schema
->
«me
, 
cﬁumn_«me
, 
ty≥_«me
,

418 
	`ovsdb_©omic_ty≥_to_°rög
(
key_ty≥
),

419 
	`ovsdb_©omic_ty≥_to_°rög
(
vÆue_ty≥
),

420 
n_max
);

421 
	`‰ì
(
ty≥_«me
);

423  
NULL
;

426  &
row
->
fõlds
[
cﬁumn
->
ödex
];

427 
	}
}

432 
	$ªad_m≠_°rög_cﬁumn
(c⁄° 
ovsdb_row
 *
row
, c⁄° *
cﬁumn_«me
,

433 c⁄° *
key
)

435 c⁄° 
ovsdb_d©um
 *
d©um
;

436 
ovsdb_©om
 *
©om_key
 = 
NULL
, *
©om_vÆue
 = NULL;

437 
size_t
 
i
;

439 
d©um
 = 
	`gë_d©um
(
	`CONST_CAST
(
ovsdb_row
 *, 
row
), 
cﬁumn_«me
,

440 
OVSDB_TYPE_STRING
, OVSDB_TYPE_STRING, 
UINT_MAX
);

442 i‡(!
d©um
) {

443  
NULL
;

446 
i
 = 0; i < 
d©um
->
n
; i++) {

447 
©om_key
 = &
d©um
->
keys
[
i
];

448 i‡(!
	`°rcmp
(
©om_key
->
°rög
, 
key
)){

449 
©om_vÆue
 = &
d©um
->
vÆues
[
i
];

454  
©om_vÆue
 ?átom_vÆue->
°rög
 : 
NULL
;

455 
	}
}

457 c⁄° 
ovsdb_©om
 *

458 
	$ªad_cﬁumn
(c⁄° 
ovsdb_row
 *
row
, c⁄° *
cﬁumn_«me
,

459 
ovsdb_©omic_ty≥
 
ty≥
)

461 c⁄° 
ovsdb_d©um
 *
d©um
;

463 
d©um
 = 
	`gë_d©um
(
	`CONST_CAST
(
ovsdb_row
 *, 
row
), 
cﬁumn_«me
, 
ty≥
,

464 
OVSDB_TYPE_VOID
, 1);

465  
d©um
 && d©um->
n
 ? d©um->
keys
 : 
NULL
;

466 
	}
}

468 
boﬁ


469 
	$ªad_öãgî_cﬁumn
(c⁄° 
ovsdb_row
 *
row
, c⁄° *
cﬁumn_«me
,

470 *
öãgîp
)

472 c⁄° 
ovsdb_©om
 *
©om
;

474 
©om
 = 
	`ªad_cﬁumn
(
row
, 
cﬁumn_«me
, 
OVSDB_TYPE_INTEGER
);

475 *
öãgîp
 = 
©om
 ?átom->
öãgî
 : 0;

476  
©om
 !
NULL
;

477 
	}
}

479 
boﬁ


480 
	$ªad_°rög_cﬁumn
(c⁄° 
ovsdb_row
 *
row
, c⁄° *
cﬁumn_«me
,

481 c⁄° **
°rögp
)

483 c⁄° 
ovsdb_©om
 *
©om
;

485 
©om
 = 
	`ªad_cﬁumn
(
row
, 
cﬁumn_«me
, 
OVSDB_TYPE_STRING
);

486 *
°rögp
 = 
©om
 ?átom->
°rög
 : 
NULL
;

487  
©om
 !
NULL
;

488 
	}
}

491 
	$wrôe_boﬁ_cﬁumn
(
ovsdb_row
 *
row
, c⁄° *
cﬁumn_«me
, 
boﬁ
 
vÆue
)

493 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
;

494 
ovsdb_d©um
 *
d©um
;

496 
cﬁumn
 = 
	`ovsdb_èbÀ_schema_gë_cﬁumn
(
row
->
èbÀ
->
schema
, 
cﬁumn_«me
);

497 
d©um
 = 
	`gë_d©um
(
row
, 
cﬁumn_«me
, 
OVSDB_TYPE_BOOLEAN
,

498 
OVSDB_TYPE_VOID
, 1);

499 i‡(!
d©um
) {

503 i‡(
d©um
->
n
 != 1) {

504 
	`ovsdb_d©um_de°roy
(
d©um
, &
cﬁumn
->
ty≥
);

506 
d©um
->
n
 = 1;

507 
d©um
->
keys
 = 
	`xmÆloc
( *datum->keys);

508 
d©um
->
vÆues
 = 
NULL
;

511 
d©um
->
keys
[0].
boﬁón
 = 
vÆue
;

512 
	}
}

515 
	$wrôe_°rög_°rög_cﬁumn
(
ovsdb_row
 *
row
, c⁄° *
cﬁumn_«me
,

516 **
keys
, **
vÆues
, 
size_t
 
n
)

518 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
;

519 
ovsdb_d©um
 *
d©um
;

520 
size_t
 
i
;

522 
cﬁumn
 = 
	`ovsdb_èbÀ_schema_gë_cﬁumn
(
row
->
èbÀ
->
schema
, 
cﬁumn_«me
);

523 
d©um
 = 
	`gë_d©um
(
row
, 
cﬁumn_«me
, 
OVSDB_TYPE_STRING
, OVSDB_TYPE_STRING,

524 
UINT_MAX
);

525 i‡(!
d©um
) {

530 
	`ovsdb_d©um_de°roy
(
d©um
, &
cﬁumn
->
ty≥
);

533 
d©um
->
n
 =Ç;

534 
d©um
->
keys
 = 
	`xmÆloc
(
n
 *  *datum->keys);

535 
d©um
->
vÆues
 = 
	`xmÆloc
(
n
 *  *datum->values);

537 
i
 = 0; i < 
n
; ++i) {

538 
d©um
->
keys
[
i
].
°rög
 = keys[i];

539 
d©um
->
vÆues
[
i
].
°rög
 = values[i];

543 
	`ovsdb_d©um_s‹t_as£π
(
d©um
, 
cﬁumn
->
ty≥
.
key
.type);

544 
	}
}

549 
	$add_m™agî_›ti⁄s
(
shash
 *
ªmŸes
, c⁄° 
ovsdb_row
 *
row
)

551 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 1);

552 
ovsdb_js⁄Ωc_›ti⁄s
 *
›ti⁄s
;

553 
max_backoff
, 
¥obe_öãrvÆ
;

554 c⁄° *
èrgë
, *
ds˝_°rög
;

556 i‡(!
	`ªad_°rög_cﬁumn
(
row
, "èrgë", &
èrgë
) || !target) {

557 
	`VLOG_INFO_RL
(&
æ
, "Table `%s' has missing or invalid `target' column",

558 
row
->
èbÀ
->
schema
->
«me
);

562 
›ti⁄s
 = 
	`add_ªmŸe
(
ªmŸes
, 
èrgë
);

563 i‡(
	`ªad_öãgî_cﬁumn
(
row
, "max_backoff", &
max_backoff
)) {

564 
›ti⁄s
->
max_backoff
 = max_backoff;

566 i‡(
	`ªad_öãgî_cﬁumn
(
row
, "öa˘ivôy_¥obe", &
¥obe_öãrvÆ
)) {

567 
›ti⁄s
->
¥obe_öãrvÆ
 =Örobe_interval;

570 
›ti⁄s
->
ds˝
 = 
DSCP_DEFAULT
;

571 
ds˝_°rög
 = 
	`ªad_m≠_°rög_cﬁumn
(
row
, "other_config", "dscp");

572 i‡(
ds˝_°rög
) {

573 
ds˝
 = 
	`©oi
(
ds˝_°rög
);

574 i‡(
ds˝
 >= 0 && dscp <= 63) {

575 
›ti⁄s
->
ds˝
 = dscp;

578 
	}
}

581 
	$quîy_db_ªmŸes
(c⁄° *
«me
, c⁄° 
db
 
dbs
[], 
size_t
 
n_dbs
,

582 
shash
 *
ªmŸes
)

584 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
;

585 c⁄° 
ovsdb_èbÀ
 *
èbÀ
;

586 c⁄° 
ovsdb_row
 *
row
;

587 c⁄° 
db
 *db;

589 
	`∑r£_db_cﬁumn
(
dbs
, 
n_dbs
, 
«me
, &
db
, &
èbÀ
, &
cﬁumn
);

591 i‡(
cﬁumn
->
ty≥
.
key
.ty≥ =
OVSDB_TYPE_STRING


592 && 
cﬁumn
->
ty≥
.
vÆue
.ty≥ =
OVSDB_TYPE_VOID
) {

593 
	`HMAP_FOR_EACH
 (
row
, 
hm≠_node
, &
èbÀ
->
rows
) {

594 c⁄° 
ovsdb_d©um
 *
d©um
;

595 
size_t
 
i
;

597 
d©um
 = &
row
->
fõlds
[
cﬁumn
->
ödex
];

598 
i
 = 0; i < 
d©um
->
n
; i++) {

599 
	`add_ªmŸe
(
ªmŸes
, 
d©um
->
keys
[
i
].
°rög
);

602 } i‡(
cﬁumn
->
ty≥
.
key
.ty≥ =
OVSDB_TYPE_UUID


603 && 
cﬁumn
->
ty≥
.
key
.
u
.
uuid
.
ªfTabÀ


604 && 
cﬁumn
->
ty≥
.
vÆue
.ty≥ =
OVSDB_TYPE_VOID
) {

605 c⁄° 
ovsdb_èbÀ
 *
ªf_èbÀ
 = 
cﬁumn
->
ty≥
.
key
.
u
.
uuid
.
ªfTabÀ
;

606 
	`HMAP_FOR_EACH
 (
row
, 
hm≠_node
, &
èbÀ
->
rows
) {

607 c⁄° 
ovsdb_d©um
 *
d©um
;

608 
size_t
 
i
;

610 
d©um
 = &
row
->
fõlds
[
cﬁumn
->
ödex
];

611 
i
 = 0; i < 
d©um
->
n
; i++) {

612 c⁄° 
ovsdb_row
 *
ªf_row
;

614 
ªf_row
 = 
	`ovsdb_èbÀ_gë_row
(
ªf_èbÀ
, &
d©um
->
keys
[
i
].
uuid
);

615 i‡(
ªf_row
) {

616 
	`add_m™agî_›ti⁄s
(
ªmŸes
, 
ªf_row
);

621 
	}
}

624 
	$upd©e_ªmŸe_row
(c⁄° 
ovsdb_row
 *
row
, 
ovsdb_txn
 *
txn
,

625 c⁄° 
ovsdb_js⁄Ωc_£rvî
 *
js⁄Ωc
)

627 
ovsdb_js⁄Ωc_ªmŸe_°©us
 
°©us
;

628 
ovsdb_row
 *
rw_row
;

629 c⁄° *
èrgë
;

630 *
keys
[8], *
vÆues
[8];

631 
size_t
 
n
 = 0;

634 i‡(!
	`ªad_°rög_cﬁumn
(
row
, "èrgë", &
èrgë
)) {

638 
rw_row
 = 
	`ovsdb_txn_row_modify
(
txn
, 
row
);

639 
	`ovsdb_js⁄Ωc_£rvî_gë_ªmŸe_°©us
(
js⁄Ωc
, 
èrgë
, &
°©us
);

642 
	`wrôe_boﬁ_cﬁumn
(
rw_row
, "is_c⁄√˘ed", 
°©us
.
is_c⁄√˘ed
);

644 i‡(
°©us
.
°©e
) {

645 
keys
[
n
] = 
	`x°rdup
("state");

646 
vÆues
[
n
++] = 
	`x°rdup
(
°©us
.
°©e
);

648 i‡(
°©us
.
£c_sö˚_c⁄√˘
 !
UINT_MAX
) {

649 
keys
[
n
] = 
	`x°rdup
("sec_since_connect");

650 
vÆues
[
n
++] = 
	`xa•rötf
("%u", 
°©us
.
£c_sö˚_c⁄√˘
);

652 i‡(
°©us
.
£c_sö˚_disc⁄√˘
 !
UINT_MAX
) {

653 
keys
[
n
] = 
	`x°rdup
("sec_since_disconnect");

654 
vÆues
[
n
++] = 
	`xa•rötf
("%u", 
°©us
.
£c_sö˚_disc⁄√˘
);

656 i‡(
°©us
.
œ°_îr‹
) {

657 
keys
[
n
] = 
	`x°rdup
("last_error");

658 
vÆues
[
n
++] =

659 
	`x°rdup
(
	`ovs_ªtvÆ_to_°rög
(
°©us
.
œ°_îr‹
));

661 i‡(
°©us
.
locks_hñd
 && status.locks_held[0]) {

662 
keys
[
n
] = 
	`x°rdup
("locks_held");

663 
vÆues
[
n
++] = 
	`x°rdup
(
°©us
.
locks_hñd
);

665 i‡(
°©us
.
locks_waôög
 && status.locks_waiting[0]) {

666 
keys
[
n
] = 
	`x°rdup
("locks_waiting");

667 
vÆues
[
n
++] = 
	`x°rdup
(
°©us
.
locks_waôög
);

669 i‡(
°©us
.
locks_lo°
 && status.locks_lost[0]) {

670 
keys
[
n
] = 
	`x°rdup
("locks_lost");

671 
vÆues
[
n
++] = 
	`x°rdup
(
°©us
.
locks_lo°
);

673 i‡(
°©us
.
n_c⁄√˘i⁄s
 > 1) {

674 
keys
[
n
] = 
	`x°rdup
("n_connections");

675 
vÆues
[
n
++] = 
	`xa•rötf
("%d", 
°©us
.
n_c⁄√˘i⁄s
);

677 
	`wrôe_°rög_°rög_cﬁumn
(
rw_row
, "°©us", 
keys
, 
vÆues
, 
n
);

679 
	`ovsdb_js⁄Ωc_£rvî_‰ì_ªmŸe_°©us
(&
°©us
);

680 
	}
}

683 
	$upd©e_ªmŸe_rows
(c⁄° 
db
 
dbs
[], 
size_t
 
n_dbs
,

684 c⁄° *
ªmŸe_«me
,

685 c⁄° 
ovsdb_js⁄Ωc_£rvî
 *
js⁄Ωc
)

687 c⁄° 
ovsdb_èbÀ
 *
èbÀ
, *
ªf_èbÀ
;

688 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
;

689 c⁄° 
ovsdb_row
 *
row
;

690 c⁄° 
db
 *db;

692 i‡(
	`°∫cmp
("db:", 
ªmŸe_«me
, 3)) {

696 
	`∑r£_db_cﬁumn
(
dbs
, 
n_dbs
, 
ªmŸe_«me
, &
db
, &
èbÀ
, &
cﬁumn
);

698 i‡(
cﬁumn
->
ty≥
.
key
.ty≥ !
OVSDB_TYPE_UUID


699 || !
cﬁumn
->
ty≥
.
key
.
u
.
uuid
.
ªfTabÀ


700 || 
cﬁumn
->
ty≥
.
vÆue
.ty≥ !
OVSDB_TYPE_VOID
) {

704 
ªf_èbÀ
 = 
cﬁumn
->
ty≥
.
key
.
u
.
uuid
.
ªfTabÀ
;

706 
	`HMAP_FOR_EACH
 (
row
, 
hm≠_node
, &
èbÀ
->
rows
) {

707 c⁄° 
ovsdb_d©um
 *
d©um
;

708 
size_t
 
i
;

710 
d©um
 = &
row
->
fõlds
[
cﬁumn
->
ödex
];

711 
i
 = 0; i < 
d©um
->
n
; i++) {

712 c⁄° 
ovsdb_row
 *
ªf_row
;

714 
ªf_row
 = 
	`ovsdb_èbÀ_gë_row
(
ªf_èbÀ
, &
d©um
->
keys
[
i
].
uuid
);

715 i‡(
ªf_row
) {

716 
	`upd©e_ªmŸe_row
(
ªf_row
, 
db
->
txn
, 
js⁄Ωc
);

720 
	}
}

723 
	$upd©e_ªmŸe_°©us
(c⁄° 
ovsdb_js⁄Ωc_£rvî
 *
js⁄Ωc
,

724 c⁄° 
s£t
 *
ªmŸes
,

725 
db
 
dbs
[], 
size_t
 
n_dbs
)

727 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 1);

728 c⁄° *
ªmŸe
;

729 
size_t
 
i
;

731 
i
 = 0; i < 
n_dbs
; i++) {

732 
dbs
[
i
].
txn
 = 
	`ovsdb_txn_¸óã
(dbs[i].
db
);

736 
	`SSET_FOR_EACH
 (
ªmŸe
, 
ªmŸes
) {

737 
	`upd©e_ªmŸe_rows
(
dbs
, 
n_dbs
, 
ªmŸe
, 
js⁄Ωc
);

740 
i
 = 0; i < 
n_dbs
; i++) {

741 
ovsdb_îr‹
 *
îr‹
 = 
	`ovsdb_txn_commô
(
dbs
[
i
].
txn
, 
Ál£
);

742 i‡(
îr‹
) {

743 
	`VLOG_ERR_RL
(&
æ
, "FailedÅo updateÑemote status: %s",

744 
	`ovsdb_îr‹_to_°rög
(
îr‹
));

745 
	`ovsdb_îr‹_de°roy
(
îr‹
);

748 
	}
}

752 
	$ªc⁄figuª_‰om_db
(
ovsdb_js⁄Ωc_£rvî
 *
js⁄Ωc
,

753 c⁄° 
db
 
dbs
[], 
size_t
 
n_dbs
, 
s£t
 *
ªmŸes
)

755 
shash
 
ªsﬁved_ªmŸes
;

756 c⁄° *
«me
;

759 
	`shash_öô
(&
ªsﬁved_ªmŸes
);

760 
	`SSET_FOR_EACH
 (
«me
, 
ªmŸes
) {

761 i‡(!
	`°∫cmp
(
«me
, "db:", 3)) {

762 
	`quîy_db_ªmŸes
(
«me
, 
dbs
, 
n_dbs
, &
ªsﬁved_ªmŸes
);

764 
	`add_ªmŸe
(&
ªsﬁved_ªmŸes
, 
«me
);

767 
	`ovsdb_js⁄Ωc_£rvî_£t_ªmŸes
(
js⁄Ωc
, &
ªsﬁved_ªmŸes
);

768 
	`shash_de°roy_‰ì_d©a
(&
ªsﬁved_ªmŸes
);

771 
	`°ªam_s¶_£t_key_™d_˚π
(
	`quîy_db_°rög
(
dbs
, 
n_dbs
, 
¥iv©e_key_fûe
),

772 
	`quîy_db_°rög
(
dbs
, 
n_dbs
, 
˚πifiˇã_fûe
));

773 
	`°ªam_s¶_£t_ˇ_˚π_fûe
(
	`quîy_db_°rög
(
dbs
, 
n_dbs
, 
ˇ_˚π_fûe
),

774 
boŸ°øp_ˇ_˚π
);

775 
	}
}

778 
	$ovsdb_£rvî_exô
(
unix˘l_c⁄n
 *
c⁄n
, 
¨gc
 
OVS_UNUSED
,

779 c⁄° *
¨gv
[] 
OVS_UNUSED
,

780 *
exôög_
)

782 
boﬁ
 *
exôög
 = 
exôög_
;

783 *
exôög
 = 
åue
;

784 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, 
NULL
);

785 
	}
}

788 
	$ovsdb_£rvî_com∑˘
(
unix˘l_c⁄n
 *
c⁄n
, 
¨gc
,

789 c⁄° *
¨gv
[], *
dbs_
)

791 
db
 *
dbs
 = 
dbs_
;

792 
ds
 
ª∂y
;

793 
db
 *db;

794 
n
 = 0;

796 
	`ds_öô
(&
ª∂y
);

797 
db
 = 
dbs
; db->
fûíame
 !
NULL
; db++) {

798 c⁄° *
«me
 = 
db
->db->
schema
->name;

800 i‡(
¨gc
 < 2 || !
	`°rcmp
(
¨gv
[1], 
«me
)) {

801 
ovsdb_îr‹
 *
îr‹
;

803 
	`VLOG_INFO
("com∑˘ög %†d©aba£ by u£∏ªque°", 
«me
);

805 
îr‹
 = 
	`ovsdb_fûe_com∑˘
(
db
->
fûe
);

806 i‡(
îr‹
) {

807 *
s
 = 
	`ovsdb_îr‹_to_°rög
(
îr‹
);

808 
	`ds_put_f‹m©
(&
ª∂y
, "%s\n", 
s
);

809 
	`‰ì
(
s
);

812 
n
++;

816 i‡(!
n
) {

817 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, "no database byÅhatÇame");

818 } i‡(
ª∂y
.
Àngth
) {

819 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, 
	`ds_c°r
(&
ª∂y
));

821 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, 
NULL
);

823 
	`ds_de°roy
(&
ª∂y
);

824 
	}
}

829 
	$ovsdb_£rvî_ªc⁄√˘
(
unix˘l_c⁄n
 *
c⁄n
, 
¨gc
 
OVS_UNUSED
,

830 c⁄° *
¨gv
[] 
OVS_UNUSED
, *
js⁄Ωc_
)

832 
ovsdb_js⁄Ωc_£rvî
 *
js⁄Ωc
 = 
js⁄Ωc_
;

834 
	`ovsdb_js⁄Ωc_£rvî_ªc⁄√˘
(
js⁄Ωc
);

835 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, 
NULL
);

836 
	}
}

839 
	$∑r£_›ti⁄s
(*
¨g˝
, **
¨gvp
[],

840 
s£t
 *
ªmŸes
, **
unix˘l_∑thp
, **
run_comm™d
)

843 
OPT_REMOTE
 = 
UCHAR_MAX
 + 1,

844 
OPT_UNIXCTL
,

845 
OPT_RUN
,

846 
OPT_BOOTSTRAP_CA_CERT
,

847 
OPT_ENABLE_DUMMY
,

848 
VLOG_OPTION_ENUMS
,

849 
LEAK_CHECKER_OPTION_ENUMS
,

850 
DAEMON_OPTION_ENUMS


852 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

853 {"ªmŸe", 
ªquúed_¨gumít
, 
NULL
, 
OPT_REMOTE
},

854 {"unix˘l", 
ªquúed_¨gumít
, 
NULL
, 
OPT_UNIXCTL
},

855 {"run", 
ªquúed_¨gumít
, 
NULL
, 
OPT_RUN
},

856 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

857 {"vîsi⁄", 
no_¨gumít
, 
NULL
, 'V'},

858 
DAEMON_LONG_OPTIONS
,

859 
VLOG_LONG_OPTIONS
,

860 
LEAK_CHECKER_LONG_OPTIONS
,

861 {"boŸ°øp-ˇ-˚π", 
ªquúed_¨gumít
, 
NULL
, 
OPT_BOOTSTRAP_CA_CERT
},

862 {"¥iv©e-key", 
ªquúed_¨gumít
, 
NULL
, 'p'},

863 {"˚πifiˇã", 
ªquúed_¨gumít
, 
NULL
, 'c'},

864 {"ˇ-˚π", 
ªquúed_¨gumít
, 
NULL
, 'C'},

865 {"íabÀ-dummy", 
›ti⁄Æ_¨gumít
, 
NULL
, 
OPT_ENABLE_DUMMY
},

866 {
NULL
, 0, NULL, 0},

868 *
sh‹t_›ti⁄s
 = 
	`l⁄g_›ti⁄s_to_sh‹t_›ti⁄s
(
l⁄g_›ti⁄s
);

869 
¨gc
 = *
¨g˝
;

870 **
¨gv
 = *
¨gvp
;

872 
	`s£t_öô
(
ªmŸes
);

874 
c
;

876 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
l⁄g_›ti⁄s
, 
NULL
);

877 i‡(
c
 == -1) {

881 
c
) {

882 
OPT_REMOTE
:

883 
	`s£t_add
(
ªmŸes
, 
›èrg
);

886 
OPT_UNIXCTL
:

887 *
unix˘l_∑thp
 = 
›èrg
;

890 
OPT_RUN
:

891 *
run_comm™d
 = 
›èrg
;

895 
	`ußge
();

898 
	`ovs_¥öt_vîsi⁄
(0, 0);

899 
	`exô
(
EXIT_SUCCESS
);

901 
VLOG_OPTION_HANDLERS


902 
DAEMON_OPTION_HANDLERS


903 
LEAK_CHECKER_OPTION_HANDLERS


906 
¥iv©e_key_fûe
 = 
›èrg
;

910 
˚πifiˇã_fûe
 = 
›èrg
;

914 
ˇ_˚π_fûe
 = 
›èrg
;

915 
boŸ°øp_ˇ_˚π
 = 
Ál£
;

918 
OPT_BOOTSTRAP_CA_CERT
:

919 
ˇ_˚π_fûe
 = 
›èrg
;

920 
boŸ°øp_ˇ_˚π
 = 
åue
;

923 
OPT_ENABLE_DUMMY
:

924 
	`dummy_íabÀ
(
›èrg
 && !
	`°rcmp
(optarg, "override"));

928 
	`exô
(
EXIT_FAILURE
);

931 
	`ab‹t
();

934 
	`‰ì
(
sh‹t_›ti⁄s
);

936 *
¨g˝
 -
›töd
;

937 *
¨gvp
 +
›töd
;

938 
	}
}

941 
	$ußge
()

943 
	`¥ötf
("%s: Open vSwitch database server\n"

947 
¥ogøm_«me
,Örogøm_«me, 
	`ovs_dbdú
());

948 
	`¥ötf
("\nJSON-RPC options (may be specifiedányÇumber ofÅimes):\n"

950 
	`°ªam_ußge
("JSON-RPC", 
åue
,Årue,Årue);

951 
	`d´m⁄_ußge
();

952 
	`vlog_ußge
();

953 
	`¥ötf
("\nOther options:\n"

958 
	`Àak_checkî_ußge
();

959 
	`exô
(
EXIT_SUCCESS
);

960 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/ovsdb/ovsdb-tool.c

17 
	~<c⁄fig.h
>

18 
	~<î∫o.h
>

19 
	~<f˙é.h
>

20 
	~<gë›t.h
>

21 
	~<sig«l.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

25 
	~"cﬁumn.h
"

26 
	~"comm™d-löe.h
"

27 
	~"compûî.h
"

28 
	~"dús.h
"

29 
	~"dy«mic-°rög.h
"

30 
	~"fûe.h
"

31 
	~"lockfûe.h
"

32 
	~"log.h
"

33 
	~"js⁄.h
"

34 
	~"ovsdb.h
"

35 
	~"ovsdb-d©a.h
"

36 
	~"ovsdb-îr‹.h
"

37 
	~"sockë-utû.h
"

38 
	~"èbÀ.h
"

39 
	~"timevÆ.h
"

40 
	~"utû.h
"

41 
	~"vlog.h
"

43 
VLOG_DEFINE_THIS_MODULE
(
ovsdb_toﬁ
);

46 
	gshow_log_vîbosôy
;

48 c⁄° 
comm™d
 
	gÆl_comm™ds
[];

50 
	$ußge
(Ë
NO_RETURN
;

51 
	`∑r£_›ti⁄s
(
¨gc
, *
¨gv
[]);

53 c⁄° *
	`deÁu…_db
();

54 c⁄° *
	`deÁu…_schema
();

57 
	$maö
(
¨gc
, *
¨gv
[])

59 
	`£t_¥ogøm_«me
(
¨gv
[0]);

60 
	`∑r£_›ti⁄s
(
¨gc
, 
¨gv
);

61 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

62 
	`run_comm™d
(
¨gc
 - 
›töd
, 
¨gv
 + o±öd, 
Æl_comm™ds
);

64 
	}
}

67 
	$∑r£_›ti⁄s
(
¨gc
, *
¨gv
[])

69 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

70 {"m‹e", 
no_¨gumít
, 
NULL
, 'm'},

71 {"vîbo£", 
›ti⁄Æ_¨gumít
, 
NULL
, 'v'},

72 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

73 {"vîsi⁄", 
no_¨gumít
, 
NULL
, 'V'},

74 {
NULL
, 0, NULL, 0},

76 *
sh‹t_›ti⁄s
 = 
	`l⁄g_›ti⁄s_to_sh‹t_›ti⁄s
(
l⁄g_›ti⁄s
);

79 
c
;

81 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
l⁄g_›ti⁄s
, 
NULL
);

82 i‡(
c
 == -1) {

86 
c
) {

88 
show_log_vîbosôy
++;

92 
	`ußge
();

95 
	`ovs_¥öt_vîsi⁄
(0, 0);

96 
	`exô
(
EXIT_SUCCESS
);

99 
	`vlog_£t_vîbosôy
(
›èrg
);

103 
	`exô
(
EXIT_FAILURE
);

106 
	`ab‹t
();

109 
	`‰ì
(
sh‹t_›ti⁄s
);

110 
	}
}

113 
	$ußge
()

115 
	`¥ötf
("%s: Open vSwitch database management utility\n"

129 
¥ogøm_«me
,Örogøm_«me, 
	`deÁu…_db
(), 
	`deÁu…_schema
());

130 
	`vlog_ußge
();

131 
	`¥ötf
("\nOther options:\n"

135 
	`exô
(
EXIT_SUCCESS
);

136 
	}
}

139 
	$deÁu…_db
()

141 *
db
;

142 i‡(!
db
) {

143 
db
 = 
	`xa•rötf
("%s/c⁄f.db", 
	`ovs_dbdú
());

145  
db
;

146 
	}
}

149 
	$deÁu…_schema
()

151 *
schema
;

152 i‡(!
schema
) {

153 
schema
 = 
	`xa•rötf
("%s/vswôch.ovsschema", 
	`ovs_pkgd©adú
());

155  
schema
;

156 
	}
}

158 
js⁄
 *

159 
	$∑r£_js⁄
(c⁄° *
s
)

161 
js⁄
 *js⁄ = 
	`js⁄_‰om_°rög
(
s
);

162 i‡(
js⁄
->
ty≥
 =
JSON_STRING
) {

163 
	`ovs_Áèl
(0, "\"%s\": %s", 
s
, 
js⁄
->
u
.
°rög
);

165  
js⁄
;

166 
	}
}

169 
	$¥öt_™d_‰ì_js⁄
(
js⁄
 *json)

171 *
°rög
 = 
	`js⁄_to_°rög
(
js⁄
, 
JSSF_SORT
);

172 
	`js⁄_de°roy
(
js⁄
);

173 
	`puts
(
°rög
);

174 
	`‰ì
(
°rög
);

175 
	}
}

178 
	$check_ovsdb_îr‹
(
ovsdb_îr‹
 *
îr‹
)

180 i‡(
îr‹
) {

181 
	`ovs_Áèl
(0, "%s", 
	`ovsdb_îr‹_to_°rög
(
îr‹
));

183 
	}
}

186 
	$do_¸óã
(
¨gc
, *
¨gv
[])

188 c⁄° *
db_fûe_«me
 = 
¨gc
 >2 ? 
¨gv
[1] : 
	`deÁu…_db
();

189 c⁄° *
schema_fûe_«me
 = 
¨gc
 >3 ? 
¨gv
[2] : 
	`deÁu…_schema
();

190 
ovsdb_schema
 *
schema
;

191 
ovsdb_log
 *
log
;

192 
js⁄
 *json;

195 
	`check_ovsdb_îr‹
(
	`ovsdb_schema_‰om_fûe
(
schema_fûe_«me
, &
schema
));

196 
js⁄
 = 
	`ovsdb_schema_to_js⁄
(
schema
);

197 
	`ovsdb_schema_de°roy
(
schema
);

200 
	`check_ovsdb_îr‹
(
	`ovsdb_log_›í
(
db_fûe_«me
, 
OVSDB_LOG_CREATE
,

201 -1, &
log
));

202 
	`check_ovsdb_îr‹
(
	`ovsdb_log_wrôe
(
log
, 
js⁄
));

203 
	`check_ovsdb_îr‹
(
	`ovsdb_log_commô
(
log
));

204 
	`ovsdb_log_˛o£
(
log
);

206 
	`js⁄_de°roy
(
js⁄
);

207 
	}
}

210 
	$com∑˘_‹_c⁄vît
(c⁄° *
§c_«me_
, c⁄° *
d°_«me_
,

211 c⁄° 
ovsdb_schema
 *
√w_schema
,

212 c⁄° *
commít
)

214 *
§c_«me
, *
d°_«me
;

215 
lockfûe
 *
§c_lock
;

216 
lockfûe
 *
d°_lock
;

217 
boﬁ
 
ö_∂a˚
 = 
d°_«me_
 =
NULL
;

218 
ovsdb
 *
db
;

219 
ªtvÆ
;

225 
§c_«me
 = 
	`fﬁlow_symlöks
(
§c_«me_
);

226 
d°_«me
 = (
ö_∂a˚


227 ? 
	`xa•rötf
("%s.tmp", 
§c_«me
)

228 : 
	`fﬁlow_symlöks
(
d°_«me_
));

231 i‡(
ö_∂a˚
) {

232 
ªtvÆ
 = 
	`lockfûe_lock
(
§c_«me
, &
§c_lock
);

233 i‡(
ªtvÆ
) {

234 
	`ovs_Áèl
(
ªtvÆ
, "%s: faûedÅÿlockÜockfûe", 
§c_«me
);

239 
ªtvÆ
 = 
	`lockfûe_lock
(
d°_«me
, &
d°_lock
);

240 i‡(
ªtvÆ
) {

241 
	`ovs_Áèl
(
ªtvÆ
, "%s: faûedÅÿlockÜockfûe", 
d°_«me
);

245 
	`check_ovsdb_îr‹
(
√w_schema


246 ? 
	`ovsdb_fûe_›í_as_schema
(
§c_«me
, 
√w_schema
, &
db
)

247 : 
	`ovsdb_fûe_›í
(
§c_«me
, 
åue
, &
db
, 
NULL
));

248 
	`check_ovsdb_îr‹
(
	`ovsdb_fûe_ßve_c›y
(
d°_«me
, 
Ál£
, 
commít
, 
db
));

249 
	`ovsdb_de°roy
(
db
);

252 i‡(
ö_∂a˚
) {

253 i‡(
	`ª«me
(
d°_«me
, 
§c_«me
)) {

254 
	`ovs_Áèl
(
î∫o
, "failedÅoÑename \"%s\"Åo \"%s\"",

255 
d°_«me
, 
§c_«me
);

257 
	`fsync_∑ª¡_dú
(
d°_«me
);

258 
	`lockfûe_u∆ock
(
§c_lock
);

261 
	`lockfûe_u∆ock
(
d°_lock
);

263 
	`‰ì
(
§c_«me
);

264 
	`‰ì
(
d°_«me
);

265 
	}
}

268 
	$do_com∑˘
(
¨gc
, *
¨gv
[])

270 c⁄° *
db
 = 
¨gc
 >2 ? 
¨gv
[1] : 
	`deÁu…_db
();

271 c⁄° *
èrgë
 = 
¨gc
 >3 ? 
¨gv
[2] : 
NULL
;

273 
	`com∑˘_‹_c⁄vît
(
db
, 
èrgë
, 
NULL
, "com∑˘ed by ovsdb-toﬁ "
VERSION
);

274 
	}
}

277 
	$do_c⁄vît
(
¨gc
, *
¨gv
[])

279 c⁄° *
db
 = 
¨gc
 >2 ? 
¨gv
[1] : 
	`deÁu…_db
();

280 c⁄° *
schema
 = 
¨gc
 >3 ? 
¨gv
[2] : 
	`deÁu…_schema
();

281 c⁄° *
èrgë
 = 
¨gc
 >4 ? 
¨gv
[3] : 
NULL
;

282 
ovsdb_schema
 *
√w_schema
;

284 
	`check_ovsdb_îr‹
(
	`ovsdb_schema_‰om_fûe
(
schema
, &
√w_schema
));

285 
	`com∑˘_‹_c⁄vît
(
db
, 
èrgë
, 
√w_schema
,

286 "c⁄vîãd by ovsdb-toﬁ "
VERSION
);

287 
	`ovsdb_schema_de°roy
(
√w_schema
);

288 
	}
}

291 
	$do_√eds_c⁄vîsi⁄
(
¨gc
, *
¨gv
[])

293 c⁄° *
db_fûe_«me
 = 
¨gc
 >2 ? 
¨gv
[1] : 
	`deÁu…_db
();

294 c⁄° *
schema_fûe_«me
 = 
¨gc
 >3 ? 
¨gv
[2] : 
	`deÁu…_schema
();

295 
ovsdb_schema
 *
schema1
, *
schema2
;

297 
	`check_ovsdb_îr‹
(
	`ovsdb_fûe_ªad_schema
(
db_fûe_«me
, &
schema1
));

298 
	`check_ovsdb_îr‹
(
	`ovsdb_schema_‰om_fûe
(
schema_fûe_«me
, &
schema2
));

299 
	`puts
(
	`ovsdb_schema_equÆ
(
schema1
, 
schema2
) ? "no" : "yes");

300 
	`ovsdb_schema_de°roy
(
schema1
);

301 
	`ovsdb_schema_de°roy
(
schema2
);

302 
	}
}

305 
	$do_db_vîsi⁄
(
¨gc
, *
¨gv
[])

307 c⁄° *
db_fûe_«me
 = 
¨gc
 >2 ? 
¨gv
[1] : 
	`deÁu…_db
();

308 
ovsdb_schema
 *
schema
;

310 
	`check_ovsdb_îr‹
(
	`ovsdb_fûe_ªad_schema
(
db_fûe_«me
, &
schema
));

311 
	`puts
(
schema
->
vîsi⁄
);

312 
	`ovsdb_schema_de°roy
(
schema
);

313 
	}
}

316 
	$do_db_cksum
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

318 c⁄° *
db_fûe_«me
 = 
¨gc
 >2 ? 
¨gv
[1] : 
	`deÁu…_db
();

319 
ovsdb_schema
 *
schema
;

321 
	`check_ovsdb_îr‹
(
	`ovsdb_fûe_ªad_schema
(
db_fûe_«me
, &
schema
));

322 
	`puts
(
schema
->
cksum
);

323 
	`ovsdb_schema_de°roy
(
schema
);

324 
	}
}

327 
	$do_schema_vîsi⁄
(
¨gc
, *
¨gv
[])

329 c⁄° *
schema_fûe_«me
 = 
¨gc
 >2 ? 
¨gv
[1] : 
	`deÁu…_schema
();

330 
ovsdb_schema
 *
schema
;

332 
	`check_ovsdb_îr‹
(
	`ovsdb_schema_‰om_fûe
(
schema_fûe_«me
, &
schema
));

333 
	`puts
(
schema
->
vîsi⁄
);

334 
	`ovsdb_schema_de°roy
(
schema
);

335 
	}
}

338 
	$do_schema_cksum
(
¨gc
, *
¨gv
[])

340 c⁄° *
schema_fûe_«me
 = 
¨gc
 >2 ? 
¨gv
[1] : 
	`deÁu…_schema
();

341 
ovsdb_schema
 *
schema
;

343 
	`check_ovsdb_îr‹
(
	`ovsdb_schema_‰om_fûe
(
schema_fûe_«me
, &
schema
));

344 
	`puts
(
schema
->
cksum
);

345 
	`ovsdb_schema_de°roy
(
schema
);

346 
	}
}

349 
	$å™ß˘
(
boﬁ
 
ªad_⁄ly
, 
¨gc
, *
¨gv
[])

351 c⁄° *
db_fûe_«me
 = 
¨gc
 >3 ? 
¨gv
[1] : 
	`deÁu…_db
();

352 c⁄° *
å™ß˘i⁄
 = 
¨gv
[
¨gc
 - 1];

353 
js⁄
 *
ªque°
, *
ªsu…
;

354 
ovsdb
 *
db
;

356 
	`check_ovsdb_îr‹
(
	`ovsdb_fûe_›í
(
db_fûe_«me
, 
ªad_⁄ly
, &
db
, 
NULL
));

358 
ªque°
 = 
	`∑r£_js⁄
(
å™ß˘i⁄
);

359 
ªsu…
 = 
	`ovsdb_execuã
(
db
, 
NULL
, 
ªque°
, 0, NULL);

360 
	`js⁄_de°roy
(
ªque°
);

362 
	`¥öt_™d_‰ì_js⁄
(
ªsu…
);

363 
	`ovsdb_de°roy
(
db
);

364 
	}
}

367 
	$do_quîy
(
¨gc
, *
¨gv
[])

369 
	`å™ß˘
(
åue
, 
¨gc
, 
¨gv
);

370 
	}
}

373 
	$do_å™ß˘
(
¨gc
, *
¨gv
[])

375 
	`å™ß˘
(
Ál£
, 
¨gc
, 
¨gv
);

376 
	}
}

379 
	$¥öt_db_ch™ges
(
shash
 *
èbÀs
, shash *
«mes
,

380 c⁄° 
ovsdb_schema
 *
schema
)

382 
shash_node
 *
n1
;

384 
	`SHASH_FOR_EACH
 (
n1
, 
èbÀs
) {

385 c⁄° *
èbÀ
 = 
n1
->
«me
;

386 
ovsdb_èbÀ_schema
 *
èbÀ_schema
;

387 
js⁄
 *
rows
 = 
n1
->
d©a
;

388 
shash_node
 *
n2
;

390 i‡(
n1
->
«me
[0] ='_' || 
rows
->
ty≥
 !
JSON_OBJECT
) {

394 
èbÀ_schema
 = 
	`shash_föd_d©a
(&
schema
->
èbÀs
, 
èbÀ
);

395 
	`SHASH_FOR_EACH
 (
n2
, 
	`js⁄_obje˘
(
rows
)) {

396 c⁄° *
row_uuid
 = 
n2
->
«me
;

397 
js⁄
 *
cﬁumns
 = 
n2
->
d©a
;

398 
shash_node
 *
n3
;

399 *
ﬁd_«me
, *
√w_«me
;

400 
boﬁ
 
‰ì_√w_«me
 = 
Ál£
;

402 
ﬁd_«me
 = 
√w_«me
 = 
	`shash_föd_d©a
(
«mes
, 
row_uuid
);

403 i‡(
cﬁumns
->
ty≥
 =
JSON_OBJECT
) {

404 
js⁄
 *
√w_«me_js⁄
;

406 
√w_«me_js⁄
 = 
	`shash_föd_d©a
(
	`js⁄_obje˘
(
cﬁumns
), "name");

407 i‡(
√w_«me_js⁄
) {

408 
√w_«me
 = 
	`js⁄_to_°rög
(
√w_«me_js⁄
, 
JSSF_SORT
);

409 
‰ì_√w_«me
 = 
åue
;

413 
	`¥ötf
("\âabÀ %s", 
èbÀ
);

415 i‡(!
ﬁd_«me
) {

416 i‡(
√w_«me
) {

417 
	`¥ötf
(" in£πÑow %†(%.8s):\n", 
√w_«me
, 
row_uuid
);

419 
	`¥ötf
(" in£πÑow %.8s:\n", 
row_uuid
);

422 
	`¥ötf
("Ñow %†(%.8s):\n", 
ﬁd_«me
, 
row_uuid
);

425 i‡(
cﬁumns
->
ty≥
 =
JSON_OBJECT
) {

426 i‡(
show_log_vîbosôy
 > 1) {

427 
	`SHASH_FOR_EACH
 (
n3
, 
	`js⁄_obje˘
(
cﬁumns
)) {

428 c⁄° *
cﬁumn
 = 
n3
->
«me
;

429 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn_schema
;

430 
js⁄
 *
vÆue
 = 
n3
->
d©a
;

431 *
vÆue_°rög
 = 
NULL
;

433 
cﬁumn_schema
 =

434 (
èbÀ_schema


435 ? 
	`shash_föd_d©a
(&
èbÀ_schema
->
cﬁumns
, 
cﬁumn
)

436 : 
NULL
);

437 i‡(
cﬁumn_schema
) {

438 c⁄° 
ovsdb_ty≥
 *
ty≥
;

439 
ovsdb_îr‹
 *
îr‹
;

440 
ovsdb_d©um
 
d©um
;

442 
ty≥
 = &
cﬁumn_schema
->type;

443 
îr‹
 = 
	`ovsdb_d©um_‰om_js⁄
(&
d©um
, 
ty≥
,

444 
vÆue
, 
NULL
);

445 i‡(!
îr‹
) {

446 
ds
 
s
;

448 
	`ds_öô
(&
s
);

449 
	`ovsdb_d©um_to_°rög
(&
d©um
, 
ty≥
, &
s
);

450 
vÆue_°rög
 = 
	`ds_°ól_c°r
(&
s
);

452 
	`ovsdb_îr‹_de°roy
(
îr‹
);

455 i‡(!
vÆue_°rög
) {

456 
vÆue_°rög
 = 
	`js⁄_to_°rög
(
vÆue
, 
JSSF_SORT
);

458 
	`¥ötf
("\t\t%s=%s\n", 
cﬁumn
, 
vÆue_°rög
);

459 
	`‰ì
(
vÆue_°rög
);

462 i‡(!
ﬁd_«me


463 || (
√w_«me
 !
ﬁd_«me
 && 
	`°rcmp
(old_name,Çew_name))) {

464 i‡(
ﬁd_«me
) {

465 
	`shash_dñëe
(
«mes
, 
	`shash_föd
“ames, 
row_uuid
));

466 
	`‰ì
(
ﬁd_«me
);

468 
	`shash_add
(
«mes
, 
row_uuid
, (
√w_«me


469 ? 
	`x°rdup
(
√w_«me
)

470 : 
	`xmemdup0
(
row_uuid
, 8)));

472 } i‡(
cﬁumns
->
ty≥
 =
JSON_NULL
) {

473 
shash_node
 *
node
;

475 
	`¥ötf
("\t\tdeleteÑow\n");

476 
node
 = 
	`shash_föd
(
«mes
, 
row_uuid
);

477 i‡(
node
) {

478 
	`shash_dñëe
(
«mes
, 
node
);

480 
	`‰ì
(
ﬁd_«me
);

483 i‡(
‰ì_√w_«me
) {

484 
	`‰ì
(
√w_«me
);

488 
	}
}

491 
	$do_show_log
(
¨gc
, *
¨gv
[])

493 c⁄° *
db_fûe_«me
 = 
¨gc
 >2 ? 
¨gv
[1] : 
	`deÁu…_db
();

494 
shash
 
«mes
;

495 
ovsdb_log
 *
log
;

496 
ovsdb_schema
 *
schema
;

497 
i
;

499 
	`check_ovsdb_îr‹
(
	`ovsdb_log_›í
(
db_fûe_«me
, 
OVSDB_LOG_READ_ONLY
,

500 -1, &
log
));

501 
	`shash_öô
(&
«mes
);

502 
schema
 = 
NULL
;

503 
i
 = 0; ; i++) {

504 
js⁄
 *json;

506 
	`check_ovsdb_îr‹
(
	`ovsdb_log_ªad
(
log
, &
js⁄
));

507 i‡(!
js⁄
) {

511 
	`¥ötf
("ªc‹d %u:", 
i
);

512 i‡(
i
 == 0) {

513 
	`check_ovsdb_îr‹
(
	`ovsdb_schema_‰om_js⁄
(
js⁄
, &
schema
));

514 
	`¥ötf
(" \"%s\" schema, version=\"%s\", cksum=\"%s\"\n",

515 
schema
->
«me
, schema->
vîsi⁄
, schema->
cksum
);

516 } i‡(
js⁄
->
ty≥
 =
JSON_OBJECT
) {

517 
js⁄
 *
d©e
, *
commít
;

519 
d©e
 = 
	`shash_föd_d©a
(
	`js⁄_obje˘
(
js⁄
), "_date");

520 i‡(
d©e
 && d©e->
ty≥
 =
JSON_INTEGER
) {

521 
time_t
 
t
 = 
	`js⁄_öãgî
(
d©e
);

522 
s
[128];

524 
	`°r·ime
(
s
,  s, "%Y-%m-%d %H:%M:%S", 
	`gmtime
(&
t
));

525 
	`¥ötf
(" %s", 
s
);

528 
commít
 = 
	`shash_föd_d©a
(
	`js⁄_obje˘
(
js⁄
), "_comment");

529 i‡(
commít
 && commít->
ty≥
 =
JSON_STRING
) {

530 
	`¥ötf
(" \"%s\"", 
	`js⁄_°rög
(
commít
));

533 i‡(
i
 > 0 && 
show_log_vîbosôy
 > 0) {

534 
	`putch¨
('\n');

535 
	`¥öt_db_ch™ges
(
	`js⁄_obje˘
(
js⁄
), &
«mes
, 
schema
);

538 
	`js⁄_de°roy
(
js⁄
);

539 
	`putch¨
('\n');

542 
	`ovsdb_log_˛o£
(
log
);

543 
	`ovsdb_schema_de°roy
(
schema
);

545 
	}
}

548 
	$do_hñp
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

550 
	`ußge
();

551 
	}
}

553 c⁄° 
comm™d
 
	gÆl_comm™ds
[] = {

554 { "¸óã", 0, 2, 
do_¸óã
 },

555 { "com∑˘", 0, 2, 
do_com∑˘
 },

556 { "c⁄vît", 0, 3, 
do_c⁄vît
 },

557 { "√eds-c⁄vîsi⁄", 0, 2, 
do_√eds_c⁄vîsi⁄
 },

558 { "db-vîsi⁄", 0, 1, 
do_db_vîsi⁄
 },

559 { "db-cksum", 0, 1, 
do_db_cksum
 },

560 { "schema-vîsi⁄", 0, 1, 
do_schema_vîsi⁄
 },

561 { "schema-cksum", 0, 1, 
do_schema_cksum
 },

562 { "quîy", 1, 2, 
do_quîy
 },

563 { "å™ß˘", 1, 2, 
do_å™ß˘
 },

564 { "show-log", 0, 1, 
do_show_log
 },

565 { "hñp", 0, 
INT_MAX
, 
do_hñp
 },

566 { 
NULL
, 0, 0, NULL },

	@/home/lsch/mytest/openvswitch-1.9.0/ovsdb/ovsdb.c

16 
	~<c⁄fig.h
>

18 
	~"ovsdb.h
"

20 
	~"cﬁumn.h
"

21 
	~"js⁄.h
"

22 
	~"ovsdb-îr‹.h
"

23 
	~"ovsdb-∑r£r.h
"

24 
	~"ovsdb-ty≥s.h
"

25 
	~"sim≠.h
"

26 
	~"èbÀ.h
"

27 
	~"å™ß˘i⁄.h
"

29 
ovsdb_schema
 *

30 
	$ovsdb_schema_¸óã
(c⁄° *
«me
, c⁄° *
vîsi⁄
, c⁄° *
cksum
)

32 
ovsdb_schema
 *
schema
;

34 
schema
 = 
	`xzÆloc
( *schema);

35 
schema
->
«me
 = 
	`x°rdup
(name);

36 
schema
->
vîsi⁄
 = 
	`x°rdup
(version);

37 
schema
->
cksum
 = 
	`x°rdup
(cksum);

38 
	`shash_öô
(&
schema
->
èbÀs
);

40  
schema
;

41 
	}
}

43 
ovsdb_schema
 *

44 
	$ovsdb_schema_˛⁄e
(c⁄° 
ovsdb_schema
 *
ﬁd
)

46 
ovsdb_schema
 *
√w
;

47 
shash_node
 *
node
;

49 
√w
 = 
	`ovsdb_schema_¸óã
(
ﬁd
->
«me
, old->
vîsi⁄
, old->
cksum
);

50 
	`SHASH_FOR_EACH
 (
node
, &
ﬁd
->
èbÀs
) {

51 c⁄° 
ovsdb_èbÀ_schema
 *
ts
 = 
node
->
d©a
;

53 
	`shash_add
(&
√w
->
èbÀs
, 
node
->
«me
, 
	`ovsdb_èbÀ_schema_˛⁄e
(
ts
));

55  
√w
;

56 
	}
}

59 
	$ovsdb_schema_de°roy
(
ovsdb_schema
 *
schema
)

61 
shash_node
 *
node
;

63 i‡(!
schema
) {

67 
	`SHASH_FOR_EACH
 (
node
, &
schema
->
èbÀs
) {

68 
	`ovsdb_èbÀ_schema_de°roy
(
node
->
d©a
);

70 
	`shash_de°roy
(&
schema
->
èbÀs
);

71 
	`‰ì
(
schema
->
«me
);

72 
	`‰ì
(
schema
->
vîsi⁄
);

73 
	`‰ì
(
schema
->
cksum
);

74 
	`‰ì
(
schema
);

75 
	}
}

77 
ovsdb_îr‹
 *

78 
	$ovsdb_schema_‰om_fûe
(c⁄° *
fûe_«me
, 
ovsdb_schema
 **
schem≠
)

80 
ovsdb_schema
 *
schema
;

81 
ovsdb_îr‹
 *
îr‹
;

82 
js⁄
 *json;

84 *
schem≠
 = 
NULL
;

85 
js⁄
 = 
	`js⁄_‰om_fûe
(
fûe_«me
);

86 i‡(
js⁄
->
ty≥
 =
JSON_STRING
) {

87 
îr‹
 = 
	`ovsdb_îr‹
("failedÅoÑead schema",

89 
fûe_«me
, 
	`js⁄_°rög
(
js⁄
));

90 
	`js⁄_de°roy
(
js⁄
);

91  
îr‹
;

94 
îr‹
 = 
	`ovsdb_schema_‰om_js⁄
(
js⁄
, &
schema
);

95 
	`js⁄_de°roy
(
js⁄
);

96 i‡(
îr‹
) {

97  
	`ovsdb_wøp_îr‹
(
îr‹
,

99 
fûe_«me
);

102 *
schem≠
 = 
schema
;

103  
NULL
;

104 
	}
}

106 
ovsdb_îr‹
 * 
WARN_UNUSED_RESULT


107 
	$ovsdb_schema_check_ªf_èbÀ
(
ovsdb_cﬁumn
 *
cﬁumn
,

108 c⁄° 
shash
 *
èbÀs
,

109 c⁄° 
ovsdb_ba£_ty≥
 *
ba£
,

110 c⁄° *
ba£_«me
)

112 
ovsdb_èbÀ_schema
 *
ªfTabÀ
;

114 i‡(
ba£
->
ty≥
 !
OVSDB_TYPE_UUID
 || !ba£->
u
.
uuid
.
ªfTabÀName
) {

115  
NULL
;

118 
ªfTabÀ
 = 
	`shash_föd_d©a
(
èbÀs
, 
ba£
->
u
.
uuid
.
ªfTabÀName
);

119 i‡(!
ªfTabÀ
) {

120  
	`ovsdb_sy¡ax_îr‹
(
NULL
, NULL,

122 
cﬁumn
->
«me
, 
ba£_«me
,

123 
ba£
->
u
.
uuid
.
ªfTabÀName
);

126 i‡(
	`ovsdb_ba£_ty≥_is_°r⁄g_ªf
(
ba£
Ë&& !
ªfTabÀ
->
is_roŸ
) {

133 
cﬁumn
->
≥rsi°ít
 = 
åue
;

136  
NULL
;

137 
	}
}

139 
boﬁ


140 
	$is_vÆid_vîsi⁄
(c⁄° *
s
)

142 
n
 = -1;

143 
	`ign‹e
(
	`ssˇnf
(
s
, "%*[0-9].%*[0-9].%*[0-9]%n", &
n
));

144  
n
 !-1 && 
s
[n] == '\0';

145 
	}
}

148 
size_t


149 
	$roŸ_£t_size
(c⁄° 
ovsdb_schema
 *
schema
)

151 
shash_node
 *
node
;

152 
size_t
 
n_roŸ
 = 0;

154 
	`SHASH_FOR_EACH
 (
node
, &
schema
->
èbÀs
) {

155 
ovsdb_èbÀ_schema
 *
èbÀ
 = 
node
->
d©a
;

157 
n_roŸ
 +
èbÀ
->
is_roŸ
;

159  
n_roŸ
;

160 
	}
}

162 
ovsdb_îr‹
 *

163 
	$ovsdb_schema_‰om_js⁄
(
js⁄
 *js⁄, 
ovsdb_schema
 **
schem≠
)

165 
ovsdb_schema
 *
schema
;

166 c⁄° 
js⁄
 *
«me
, *
èbÀs
, *
vîsi⁄_js⁄
, *
cksum
;

167 
ovsdb_îr‹
 *
îr‹
;

168 
shash_node
 *
node
;

169 
ovsdb_∑r£r
 
∑r£r
;

170 c⁄° *
vîsi⁄
;

172 *
schem≠
 = 
NULL
;

174 
	`ovsdb_∑r£r_öô
(&
∑r£r
, 
js⁄
, "database schema");

175 
«me
 = 
	`ovsdb_∑r£r_membî
(&
∑r£r
, "«me", 
OP_ID
);

176 
vîsi⁄_js⁄
 = 
	`ovsdb_∑r£r_membî
(&
∑r£r
, "version",

177 
OP_STRING
 | 
OP_OPTIONAL
);

178 
cksum
 = 
	`ovsdb_∑r£r_membî
(&
∑r£r
, "cksum", 
OP_STRING
 | 
OP_OPTIONAL
);

179 
èbÀs
 = 
	`ovsdb_∑r£r_membî
(&
∑r£r
, "èbÀs", 
OP_OBJECT
);

180 
îr‹
 = 
	`ovsdb_∑r£r_föish
(&
∑r£r
);

181 i‡(
îr‹
) {

182  
îr‹
;

185 i‡(
vîsi⁄_js⁄
) {

186 
vîsi⁄
 = 
	`js⁄_°rög
(
vîsi⁄_js⁄
);

187 i‡(!
	`is_vÆid_vîsi⁄
(
vîsi⁄
)) {

188  
	`ovsdb_sy¡ax_îr‹
(
js⁄
, 
NULL
, "schema version \"%s\"Çot "

189 "ö f‹m© x.y.z", 
vîsi⁄
);

193 
vîsi⁄
 = "";

196 
schema
 = 
	`ovsdb_schema_¸óã
(
	`js⁄_°rög
(
«me
), 
vîsi⁄
,

197 
cksum
 ? 
	`js⁄_°rög
(cksum) : "");

198 
	`SHASH_FOR_EACH
 (
node
, 
	`js⁄_obje˘
(
èbÀs
)) {

199 
ovsdb_èbÀ_schema
 *
èbÀ
;

201 i‡(
node
->
«me
[0] == '_') {

202 
îr‹
 = 
	`ovsdb_sy¡ax_îr‹
(
js⁄
, 
NULL
, "names beginning with "

204 } i‡(!
	`ovsdb_∑r£r_is_id
(
node
->
«me
)) {

205 
îr‹
 = 
	`ovsdb_sy¡ax_îr‹
(
js⁄
, 
NULL
, "name must beá valid id");

207 
îr‹
 = 
	`ovsdb_èbÀ_schema_‰om_js⁄
(
node
->
d©a
,Çode->
«me
,

208 &
èbÀ
);

210 i‡(
îr‹
) {

211 
	`ovsdb_schema_de°roy
(
schema
);

212  
îr‹
;

215 
	`shash_add
(&
schema
->
èbÀs
, 
èbÀ
->
«me
,Åable);

222 i‡(
	`roŸ_£t_size
(
schema
) == 0) {

223 
	`SHASH_FOR_EACH
 (
node
, &
schema
->
èbÀs
) {

224 
ovsdb_èbÀ_schema
 *
èbÀ
 = 
node
->
d©a
;

226 
èbÀ
->
is_roŸ
 = 
åue
;

235 
	`SHASH_FOR_EACH
 (
node
, &
schema
->
èbÀs
) {

236 
ovsdb_èbÀ_schema
 *
èbÀ
 = 
node
->
d©a
;

237 
shash_node
 *
node2
;

239 
	`SHASH_FOR_EACH
 (
node2
, &
èbÀ
->
cﬁumns
) {

240 
ovsdb_cﬁumn
 *
cﬁumn
 = 
node2
->
d©a
;

242 
îr‹
 = 
	`ovsdb_schema_check_ªf_èbÀ
(
cﬁumn
, &
schema
->
èbÀs
,

243 &
cﬁumn
->
ty≥
.
key
, "key");

244 i‡(!
îr‹
) {

245 
îr‹
 = 
	`ovsdb_schema_check_ªf_èbÀ
(
cﬁumn
, &
schema
->
èbÀs
,

246 &
cﬁumn
->
ty≥
.
vÆue
,

249 i‡(
îr‹
) {

250 
	`ovsdb_schema_de°roy
(
schema
);

251  
îr‹
;

256 *
schem≠
 = 
schema
;

257  
NULL
;

258 
	}
}

260 
js⁄
 *

261 
	$ovsdb_schema_to_js⁄
(c⁄° 
ovsdb_schema
 *
schema
)

263 
js⁄
 *js⁄, *
èbÀs
;

264 
shash_node
 *
node
;

265 
boﬁ
 
deÁu…_is_roŸ
;

267 
js⁄
 = 
	`js⁄_obje˘_¸óã
();

268 
	`js⁄_obje˘_put_°rög
(
js⁄
, "«me", 
schema
->
«me
);

269 i‡(
schema
->
vîsi⁄
[0]) {

270 
	`js⁄_obje˘_put_°rög
(
js⁄
, "vîsi⁄", 
schema
->
vîsi⁄
);

272 i‡(
schema
->
cksum
[0]) {

273 
	`js⁄_obje˘_put_°rög
(
js⁄
, "cksum", 
schema
->
cksum
);

280 
deÁu…_is_roŸ
 = 
	`roŸ_£t_size
(
schema
Ë=
	`shash_cou¡
(&schema->
èbÀs
);

282 
èbÀs
 = 
	`js⁄_obje˘_¸óã
();

284 
	`SHASH_FOR_EACH
 (
node
, &
schema
->
èbÀs
) {

285 
ovsdb_èbÀ_schema
 *
èbÀ
 = 
node
->
d©a
;

286 
	`js⁄_obje˘_put
(
èbÀs
, 
èbÀ
->
«me
,

287 
	`ovsdb_èbÀ_schema_to_js⁄
(
èbÀ
, 
deÁu…_is_roŸ
));

289 
	`js⁄_obje˘_put
(
js⁄
, "èbÀs", 
èbÀs
);

291  
js⁄
;

292 
	}
}

296 
boﬁ


297 
	$ovsdb_schema_equÆ
(c⁄° 
ovsdb_schema
 *
a
,

298 c⁄° 
ovsdb_schema
 *
b
)

302 
js⁄
 *
ja
 = 
	`ovsdb_schema_to_js⁄
(
a
);

303 
js⁄
 *
jb
 = 
	`ovsdb_schema_to_js⁄
(
b
);

304 
boﬁ
 
equÆs
 = 
	`js⁄_equÆ
(
ja
, 
jb
);

305 
	`js⁄_de°roy
(
ja
);

306 
	`js⁄_de°roy
(
jb
);

308  
equÆs
;

309 
	}
}

312 
	$ovsdb_£t_ªf_èbÀ
(c⁄° 
shash
 *
èbÀs
,

313 
ovsdb_ba£_ty≥
 *
ba£
)

315 i‡(
ba£
->
ty≥
 =
OVSDB_TYPE_UUID
 && ba£->
u
.
uuid
.
ªfTabÀName
) {

316 
ovsdb_èbÀ
 *
èbÀ
;

318 
èbÀ
 = 
	`shash_föd_d©a
(
èbÀs
, 
ba£
->
u
.
uuid
.
ªfTabÀName
);

319 
ba£
->
u
.
uuid
.
ªfTabÀ
 = 
èbÀ
;

321 
	}
}

323 
ovsdb
 *

324 
	$ovsdb_¸óã
(
ovsdb_schema
 *
schema
)

326 
shash_node
 *
node
;

327 
ovsdb
 *
db
;

329 
db
 = 
	`xmÆloc
( *db);

330 
db
->
schema
 = schema;

331 
	`li°_öô
(&
db
->
ª∂iˇs
);

332 
	`li°_öô
(&
db
->
åiggîs
);

333 
db
->
run_åiggîs
 = 
Ál£
;

335 
	`shash_öô
(&
db
->
èbÀs
);

336 
	`SHASH_FOR_EACH
 (
node
, &
schema
->
èbÀs
) {

337 
ovsdb_èbÀ_schema
 *
ts
 = 
node
->
d©a
;

338 
	`shash_add
(&
db
->
èbÀs
, 
node
->
«me
, 
	`ovsdb_èbÀ_¸óã
(
ts
));

342 
	`SHASH_FOR_EACH
 (
node
, &
schema
->
èbÀs
) {

343 
ovsdb_èbÀ_schema
 *
èbÀ
 = 
node
->
d©a
;

344 
shash_node
 *
node2
;

346 
	`SHASH_FOR_EACH
 (
node2
, &
èbÀ
->
cﬁumns
) {

347 
ovsdb_cﬁumn
 *
cﬁumn
 = 
node2
->
d©a
;

349 
	`ovsdb_£t_ªf_èbÀ
(&
db
->
èbÀs
, &
cﬁumn
->
ty≥
.
key
);

350 
	`ovsdb_£t_ªf_èbÀ
(&
db
->
èbÀs
, &
cﬁumn
->
ty≥
.
vÆue
);

354  
db
;

355 
	}
}

358 
	$ovsdb_de°roy
(
ovsdb
 *
db
)

360 i‡(
db
) {

361 
shash_node
 *
node
;

364 !
	`li°_is_em±y
(&
db
->
ª∂iˇs
)) {

365 
ovsdb_ª∂iˇ
 *
r


366 
	`CONTAINER_OF
(
	`li°_p›_back
(&
db
->
ª∂iˇs
),

367 
ovsdb_ª∂iˇ
, 
node
);

368 
	`ovsdb_ªmove_ª∂iˇ
(
db
, 
r
);

372 
	`SHASH_FOR_EACH
 (
node
, &
db
->
èbÀs
) {

373 
ovsdb_èbÀ
 *
èbÀ
 = 
node
->
d©a
;

374 
	`ovsdb_èbÀ_de°roy
(
èbÀ
);

376 
	`shash_de°roy
(&
db
->
èbÀs
);

381 
	`shash_˛ór
(&
db
->
schema
->
èbÀs
);

383 
	`ovsdb_schema_de°roy
(
db
->
schema
);

384 
	`‰ì
(
db
);

386 
	}
}

391 
	$ovsdb_gë_mem‹y_ußge
(c⁄° 
ovsdb
 *
db
, 
sim≠
 *
ußge
)

393 c⁄° 
shash_node
 *
node
;

394 
˚Œs
 = 0;

396 
	`SHASH_FOR_EACH
 (
node
, &
db
->
èbÀs
) {

397 c⁄° 
ovsdb_èbÀ
 *
èbÀ
 = 
node
->
d©a
;

398 
n_cﬁumns
 = 
	`shash_cou¡
(&
èbÀ
->
schema
->
cﬁumns
);

399 
n_rows
 = 
	`hm≠_cou¡
(&
èbÀ
->
rows
);

401 
˚Œs
 +
n_rows
 * 
n_cﬁumns
;

404 
	`sim≠_ö¸ó£
(
ußge
, "˚Œs", 
˚Œs
);

405 
	}
}

407 
ovsdb_èbÀ
 *

408 
	$ovsdb_gë_èbÀ
(c⁄° 
ovsdb
 *
db
, c⁄° *
«me
)

410  
	`shash_föd_d©a
(&
db
->
èbÀs
, 
«me
);

411 
	}
}

414 
	$ovsdb_ª∂iˇ_öô
(
ovsdb_ª∂iˇ
 *
r
,

415 c⁄° 
ovsdb_ª∂iˇ_˛ass
 *
˛ass
)

417 
r
->
˛ass
 = class;

418 
	}
}

421 
	$ovsdb_add_ª∂iˇ
(
ovsdb
 *
db
, 
ovsdb_ª∂iˇ
 *
r
)

423 
	`li°_push_back
(&
db
->
ª∂iˇs
, &
r
->
node
);

424 
	}
}

427 
	$ovsdb_ªmove_ª∂iˇ
(
ovsdb
 *
db
 
OVS_UNUSED
, 
ovsdb_ª∂iˇ
 *
r
)

429 
	`li°_ªmove
(&
r
->
node
);

430 (
r
->
˛ass
->
de°roy
)(r);

431 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/ovsdb/ovsdb.h

16 #i‚de‡
OVSDB_OVSDB_H


17 
	#OVSDB_OVSDB_H
 1

	)

19 
	~"compûî.h
"

20 
	~"hm≠.h
"

21 
	~"li°.h
"

22 
	~"shash.h
"

24 
	gjs⁄
;

25 
	govsdb_log
;

26 
	govsdb_£ssi⁄
;

27 
	govsdb_txn
;

28 
	gsim≠
;

29 
	guuid
;

32 
	sovsdb_schema
 {

33 *
	m«me
;

34 *
	mvîsi⁄
;

35 *
	mcksum
;

36 
shash
 
	mèbÀs
;

39 
ovsdb_schema
 *
ovsdb_schema_¸óã
(c⁄° *
«me
,

40 c⁄° *
vîsi⁄
,

41 c⁄° *
cksum
);

42 
ovsdb_schema
 *
ovsdb_schema_˛⁄e
(const ovsdb_schema *);

43 
ovsdb_schema_de°roy
(
ovsdb_schema
 *);

45 
ovsdb_îr‹
 *
	$ovsdb_schema_‰om_fûe
(c⁄° *
fûe_«me
,

46 
ovsdb_schema
 **)

47 
WARN_UNUSED_RESULT
;

48 
ovsdb_îr‹
 *
	$ovsdb_schema_‰om_js⁄
(
js⁄
 *,

49 
ovsdb_schema
 **)

50 
WARN_UNUSED_RESULT
;

51 
js⁄
 *
	`ovsdb_schema_to_js⁄
(c⁄° 
ovsdb_schema
 *);

53 
boﬁ
 
	`ovsdb_schema_equÆ
(c⁄° 
ovsdb_schema
 *,

54 c⁄° 
ovsdb_schema
 *);

57 
	sovsdb
 {

58 
ovsdb_schema
 *
schema
;

59 
li°
 
ª∂iˇs
;

60 
shash
 
èbÀs
;

63 
li°
 
åiggîs
;

64 
boﬁ
 
run_åiggîs
;

67 
ovsdb
 *
	`ovsdb_¸óã
(
ovsdb_schema
 *);

68 
	`ovsdb_de°roy
(
ovsdb
 *);

70 
	`ovsdb_gë_mem‹y_ußge
(c⁄° 
ovsdb
 *, 
sim≠
 *
ußge
);

72 
ovsdb_îr‹
 *
	$ovsdb_‰om_js⁄
(c⁄° 
js⁄
 *, 
ovsdb
 **)

73 
WARN_UNUSED_RESULT
;

74 
js⁄
 *
	`ovsdb_to_js⁄
(c⁄° 
ovsdb
 *);

76 
ovsdb_èbÀ
 *
	`ovsdb_gë_èbÀ
(c⁄° 
ovsdb
 *, const *);

78 
js⁄
 *
	`ovsdb_execuã
(
ovsdb
 *, c⁄° 
ovsdb_£ssi⁄
 *,

79 c⁄° 
js⁄
 *
∑øms
,

80 
ñ≠£d_m£c
,

81 *
timeout_m£c
);

85 
	sovsdb_ª∂iˇ
 {

86 
li°
 
node
;

87 c⁄° 
ovsdb_ª∂iˇ_˛ass
 *
˛ass
;

90 
	sovsdb_ª∂iˇ_˛ass
 {

91 
ovsdb_îr‹
 *(*
commô
)(
ovsdb_ª∂iˇ
 *,

92 c⁄° 
ovsdb_txn
 *, 
boﬁ
 
duøbÀ
);

93 (*
de°roy
)(
ovsdb_ª∂iˇ
 *);

96 
	`ovsdb_ª∂iˇ_öô
(
ovsdb_ª∂iˇ
 *,

97 c⁄° 
ovsdb_ª∂iˇ_˛ass
 *);

99 
	`ovsdb_add_ª∂iˇ
(
ovsdb
 *, 
ovsdb_ª∂iˇ
 *);

100 
	`ovsdb_ªmove_ª∂iˇ
(
ovsdb
 *, 
ovsdb_ª∂iˇ
 *);

	@/home/lsch/mytest/openvswitch-1.9.0/ovsdb/query.c

16 
	~<c⁄fig.h
>

18 
	~"quîy.h
"

20 
	~"cﬁumn.h
"

21 
	~"c⁄dôi⁄.h
"

22 
	~"row.h
"

23 
	~"èbÀ.h
"

26 
ovsdb_quîy
(
ovsdb_èbÀ
 *
èbÀ
, c⁄° 
ovsdb_c⁄dôi⁄
 *
˙d
,

27 
	$boﬁ
 (*
ouçut_row
)(c⁄° 
ovsdb_row
 *, *
aux
), *aux)

29 i‡(
˙d
->
n_˛au£s
 > 0

30 && 
˙d
->
˛au£s
[0].
cﬁumn
->
ödex
 =
OVSDB_COL_UUID


31 && 
˙d
->
˛au£s
[0].
fun˘i⁄
 =
OVSDB_F_EQ
) {

34 c⁄° 
ovsdb_row
 *
row
;

36 
row
 = 
	`ovsdb_èbÀ_gë_row
(
èbÀ
, &
˙d
->
˛au£s
[0].
¨g
.
keys
[0].
uuid
);

37 i‡(
row
 &&Ñow->
èbÀ
 =èbÀ && 
	`ovsdb_c⁄dôi⁄_evÆu©e
‘ow, 
˙d
)) {

38 
	`ouçut_row
(
row
, 
aux
);

42 c⁄° 
ovsdb_row
 *
row
, *
√xt
;

44 
	`HMAP_FOR_EACH_SAFE
 (
row
, 
√xt
, 
hm≠_node
, &
èbÀ
->
rows
) {

45 i‡(
	`ovsdb_c⁄dôi⁄_evÆu©e
(
row
, 
˙d
Ë&& !
	`ouçut_row
‘ow, 
aux
)) {

50 
	}
}

52 
boﬁ


53 
	$quîy_row_£t_cb
(c⁄° 
ovsdb_row
 *
row
, *
ªsu…s_
)

55 
ovsdb_row_£t
 *
ªsu…s
 = 
ªsu…s_
;

56 
	`ovsdb_row_£t_add_row
(
ªsu…s
, 
row
);

57  
åue
;

58 
	}
}

61 
	$ovsdb_quîy_row_£t
(
ovsdb_èbÀ
 *
èbÀ
,

62 c⁄° 
ovsdb_c⁄dôi⁄
 *
c⁄dôi⁄
,

63 
ovsdb_row_£t
 *
ªsu…s
)

65 
	`ovsdb_quîy
(
èbÀ
, 
c⁄dôi⁄
, 
quîy_row_£t_cb
, 
ªsu…s
);

66 
	}
}

68 
boﬁ


69 
	$quîy_di°ö˘_cb
(c⁄° 
ovsdb_row
 *
row
, *
hash_
)

71 
ovsdb_row_hash
 *
hash
 = 
hash_
;

72 
	`ovsdb_row_hash_ö£π
(
hash
, 
row
);

73  
åue
;

74 
	}
}

77 
	$ovsdb_quîy_di°ö˘
(
ovsdb_èbÀ
 *
èbÀ
,

78 c⁄° 
ovsdb_c⁄dôi⁄
 *
c⁄dôi⁄
,

79 c⁄° 
ovsdb_cﬁumn_£t
 *
cﬁumns
,

80 
ovsdb_row_£t
 *
ªsu…s
)

82 i‡(!
cﬁumns
 || 
	`ovsdb_cﬁumn_£t_c⁄èös
(cﬁumns, 
OVSDB_COL_UUID
)) {

84  
	`ovsdb_quîy_row_£t
(
èbÀ
, 
c⁄dôi⁄
, 
ªsu…s
);

87 
ovsdb_row_hash_node
 *
node
;

88 
ovsdb_row_hash
 
hash
;

90 
	`ovsdb_row_hash_öô
(&
hash
, 
cﬁumns
);

91 
	`ovsdb_quîy
(
èbÀ
, 
c⁄dôi⁄
, 
quîy_di°ö˘_cb
, &
hash
);

92 
	`HMAP_FOR_EACH
 (
node
, 
hm≠_node
, &
hash
.
rows
) {

93 
	`ovsdb_row_£t_add_row
(
ªsu…s
, 
node
->
row
);

95 
	`ovsdb_row_hash_de°roy
(&
hash
, 
Ál£
);

97 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/ovsdb/query.h

16 #i‚de‡
OVSDB_QUERY_H


17 
	#OVSDB_QUERY_H
 1

	)

19 
	~<°dboﬁ.h
>

21 
	govsdb_cﬁumn_£t
;

22 
	govsdb_c⁄dôi⁄
;

23 
	govsdb_row
;

24 
	govsdb_row_£t
;

25 
	govsdb_èbÀ
;

26 
	govsdb_txn
;

28 
ovsdb_quîy
(
ovsdb_èbÀ
 *, c⁄° 
ovsdb_c⁄dôi⁄
 *,

29 
	$boﬁ
 (*
ouçut_row
)(c⁄° 
ovsdb_row
 *, *
aux
),

30 *
aux
);

31 
	`ovsdb_quîy_row_£t
(
ovsdb_èbÀ
 *, c⁄° 
ovsdb_c⁄dôi⁄
 *,

32 
ovsdb_row_£t
 *);

33 
	`ovsdb_quîy_di°ö˘
(
ovsdb_èbÀ
 *, c⁄° 
ovsdb_c⁄dôi⁄
 *,

34 c⁄° 
ovsdb_cﬁumn_£t
 *,

35 
ovsdb_row_£t
 *);

	@/home/lsch/mytest/openvswitch-1.9.0/ovsdb/row.c

16 
	~<c⁄fig.h
>

18 
	~"row.h
"

20 
	~<as£π.h
>

21 
	~<°ddef.h
>

23 
	~"dy«mic-°rög.h
"

24 
	~"js⁄.h
"

25 
	~"ovsdb-îr‹.h
"

26 
	~"shash.h
"

27 
	~"s‹t.h
"

28 
	~"èbÀ.h
"

30 
ovsdb_row
 *

31 
	$Æloˇã_row
(c⁄° 
ovsdb_èbÀ
 *
èbÀ
)

33 
size_t
 
n_fõlds
 = 
	`shash_cou¡
(&
èbÀ
->
schema
->
cﬁumns
);

34 
size_t
 
n_ödexes
 = 
èbÀ
->
schema
->n_indexes;

35 
size_t
 
row_size
 = (
	`off£tof
(
ovsdb_row
, 
fõlds
)

36 + (
ovsdb_d©um
Ë* 
n_fõlds


37 + (
hm≠_node
Ë* 
n_ödexes
);

38 
ovsdb_row
 *
row
 = 
	`xmÆloc
(
row_size
);

39 
row
->
èbÀ
 = 
	`CONST_CAST
(
ovsdb_èbÀ
 *,Åable);

40 
row
->
txn_row
 = 
NULL
;

41 
	`li°_öô
(&
row
->
§c_ªfs
);

42 
	`li°_öô
(&
row
->
d°_ªfs
);

43 
row
->
n_ªfs
 = 0;

44  
row
;

45 
	}
}

47 
ovsdb_row
 *

48 
	$ovsdb_row_¸óã
(c⁄° 
ovsdb_èbÀ
 *
èbÀ
)

50 
shash_node
 *
node
;

51 
ovsdb_row
 *
row
;

53 
row
 = 
	`Æloˇã_row
(
èbÀ
);

54 
	`SHASH_FOR_EACH
 (
node
, &
èbÀ
->
schema
->
cﬁumns
) {

55 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
 = 
node
->
d©a
;

56 
	`ovsdb_d©um_öô_deÁu…
(&
row
->
fõlds
[
cﬁumn
->
ödex
], &cﬁumn->
ty≥
);

58  
row
;

59 
	}
}

61 
ovsdb_row
 *

62 
	$ovsdb_row_˛⁄e
(c⁄° 
ovsdb_row
 *
ﬁd
)

64 c⁄° 
ovsdb_èbÀ
 *
èbÀ
 = 
ﬁd
->table;

65 c⁄° 
shash_node
 *
node
;

66 
ovsdb_row
 *
√w
;

68 
√w
 = 
	`Æloˇã_row
(
èbÀ
);

69 
	`SHASH_FOR_EACH
 (
node
, &
èbÀ
->
schema
->
cﬁumns
) {

70 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
 = 
node
->
d©a
;

71 
	`ovsdb_d©um_˛⁄e
(&
√w
->
fõlds
[
cﬁumn
->
ödex
],

72 &
ﬁd
->
fõlds
[
cﬁumn
->
ödex
],

73 &
cﬁumn
->
ty≥
);

75  
√w
;

76 
	}
}

81 
	$ovsdb_row_de°roy
(
ovsdb_row
 *
row
)

83 i‡(
row
) {

84 c⁄° 
ovsdb_èbÀ
 *
èbÀ
 = 
row
->table;

85 
ovsdb_wók_ªf
 *
wók
, *
√xt
;

86 c⁄° 
shash_node
 *
node
;

88 
	`LIST_FOR_EACH_SAFE
 (
wók
, 
√xt
, 
d°_node
, &
row
->
d°_ªfs
) {

89 
	`li°_ªmove
(&
wók
->
§c_node
);

90 
	`li°_ªmove
(&
wók
->
d°_node
);

91 
	`‰ì
(
wók
);

94 
	`LIST_FOR_EACH_SAFE
 (
wók
, 
√xt
, 
§c_node
, &
row
->
§c_ªfs
) {

95 
	`li°_ªmove
(&
wók
->
§c_node
);

96 
	`li°_ªmove
(&
wók
->
d°_node
);

97 
	`‰ì
(
wók
);

100 
	`SHASH_FOR_EACH
 (
node
, &
èbÀ
->
schema
->
cﬁumns
) {

101 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
 = 
node
->
d©a
;

102 
	`ovsdb_d©um_de°roy
(&
row
->
fõlds
[
cﬁumn
->
ödex
], &cﬁumn->
ty≥
);

104 
	`‰ì
(
row
);

106 
	}
}

108 
uöt32_t


109 
	$ovsdb_row_hash_cﬁumns
(c⁄° 
ovsdb_row
 *
row
,

110 c⁄° 
ovsdb_cﬁumn_£t
 *
cﬁumns
,

111 
uöt32_t
 
basis
)

113 
size_t
 
i
;

115 
i
 = 0; i < 
cﬁumns
->
n_cﬁumns
; i++) {

116 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
 = 
cﬁumns
->cﬁumns[
i
];

117 
basis
 = 
	`ovsdb_d©um_hash
(&
row
->
fõlds
[
cﬁumn
->
ödex
], &cﬁumn->
ty≥
,

118 
basis
);

121  
basis
;

122 
	}
}

125 
	$ovsdb_row_com∑ª_cﬁumns_3way
(c⁄° 
ovsdb_row
 *
a
,

126 c⁄° 
ovsdb_row
 *
b
,

127 c⁄° 
ovsdb_cﬁumn_£t
 *
cﬁumns
)

129 
size_t
 
i
;

131 
i
 = 0; i < 
cﬁumns
->
n_cﬁumns
; i++) {

132 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
 = 
cﬁumns
->cﬁumns[
i
];

133 
cmp
 = 
	`ovsdb_d©um_com∑ª_3way
(&
a
->
fõlds
[
cﬁumn
->
ödex
],

134 &
b
->
fõlds
[
cﬁumn
->
ödex
],

135 &
cﬁumn
->
ty≥
);

136 i‡(
cmp
) {

137  
cmp
;

142 
	}
}

144 
boﬁ


145 
	$ovsdb_row_equÆ_cﬁumns
(c⁄° 
ovsdb_row
 *
a
,

146 c⁄° 
ovsdb_row
 *
b
,

147 c⁄° 
ovsdb_cﬁumn_£t
 *
cﬁumns
)

149 
size_t
 
i
;

151 
i
 = 0; i < 
cﬁumns
->
n_cﬁumns
; i++) {

152 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
 = 
cﬁumns
->cﬁumns[
i
];

153 i‡(!
	`ovsdb_d©um_equÆs
(&
a
->
fõlds
[
cﬁumn
->
ödex
],

154 &
b
->
fõlds
[
cﬁumn
->
ödex
],

155 &
cﬁumn
->
ty≥
)) {

156  
Ál£
;

160  
åue
;

161 
	}
}

164 
	$ovsdb_row_upd©e_cﬁumns
(
ovsdb_row
 *
d°
,

165 c⁄° 
ovsdb_row
 *
§c
,

166 c⁄° 
ovsdb_cﬁumn_£t
 *
cﬁumns
)

168 
size_t
 
i
;

170 
i
 = 0; i < 
cﬁumns
->
n_cﬁumns
; i++) {

171 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
 = 
cﬁumns
->cﬁumns[
i
];

172 
	`ovsdb_d©um_de°roy
(&
d°
->
fõlds
[
cﬁumn
->
ödex
], &cﬁumn->
ty≥
);

173 
	`ovsdb_d©um_˛⁄e
(&
d°
->
fõlds
[
cﬁumn
->
ödex
],

174 &
§c
->
fõlds
[
cﬁumn
->
ödex
],

175 &
cﬁumn
->
ty≥
);

177 
	}
}

182 
	$ovsdb_row_cﬁumns_to_°rög
(c⁄° 
ovsdb_row
 *
row
,

183 c⁄° 
ovsdb_cﬁumn_£t
 *
cﬁumns
,

184 
ds
 *
out
)

186 
size_t
 
i
;

188 
i
 = 0; i < 
cﬁumns
->
n_cﬁumns
; i++) {

189 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
 = 
cﬁumns
->cﬁumns[
i
];

191 
	`ds_put_c°r
(
out
, 
	`íglish_li°_dñimôî
(
i
, 
cﬁumns
->
n_cﬁumns
));

192 
	`ovsdb_d©um_to_°rög
(&
row
->
fõlds
[
cﬁumn
->
ödex
], &cﬁumn->
ty≥
, 
out
);

194 
	}
}

196 
ovsdb_îr‹
 *

197 
	$ovsdb_row_‰om_js⁄
(
ovsdb_row
 *
row
, c⁄° 
js⁄
 *json,

198 
ovsdb_symbﬁ_èbÀ
 *
symèb
,

199 
ovsdb_cﬁumn_£t
 *
ö˛uded
)

201 
ovsdb_èbÀ_schema
 *
schema
 = 
row
->
èbÀ
->schema;

202 
ovsdb_îr‹
 *
îr‹
;

203 
shash_node
 *
node
;

205 i‡(
js⁄
->
ty≥
 !
JSON_OBJECT
) {

206  
	`ovsdb_sy¡ax_îr‹
(
js⁄
, 
NULL
, "row must be JSON object");

209 
	`SHASH_FOR_EACH
 (
node
, 
	`js⁄_obje˘
(
js⁄
)) {

210 c⁄° *
cﬁumn_«me
 = 
node
->
«me
;

211 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
;

212 
ovsdb_d©um
 
d©um
;

214 
cﬁumn
 = 
	`ovsdb_èbÀ_schema_gë_cﬁumn
(
schema
, 
cﬁumn_«me
);

215 i‡(!
cﬁumn
) {

216  
	`ovsdb_sy¡ax_îr‹
(
js⁄
, "unknown column",

218 
cﬁumn_«me
, 
schema
->
«me
);

221 
îr‹
 = 
	`ovsdb_d©um_‰om_js⁄
(&
d©um
, &
cﬁumn
->
ty≥
, 
node
->
d©a
,

222 
symèb
);

223 i‡(
îr‹
) {

224  
îr‹
;

226 
	`ovsdb_d©um_sw≠
(&
row
->
fõlds
[
cﬁumn
->
ödex
], &
d©um
);

227 
	`ovsdb_d©um_de°roy
(&
d©um
, &
cﬁumn
->
ty≥
);

228 i‡(
ö˛uded
) {

229 
	`ovsdb_cﬁumn_£t_add
(
ö˛uded
, 
cﬁumn
);

233  
NULL
;

234 
	}
}

237 
	$put_js⁄_cﬁumn
(
js⁄
 *
obje˘
, c⁄° 
ovsdb_row
 *
row
,

238 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
)

240 
	`js⁄_obje˘_put
(
obje˘
, 
cﬁumn
->
«me
,

241 
	`ovsdb_d©um_to_js⁄
(&
row
->
fõlds
[
cﬁumn
->
ödex
],

242 &
cﬁumn
->
ty≥
));

243 
	}
}

245 
js⁄
 *

246 
	$ovsdb_row_to_js⁄
(c⁄° 
ovsdb_row
 *
row
,

247 c⁄° 
ovsdb_cﬁumn_£t
 *
cﬁumns
)

249 
js⁄
 *json;

250 
size_t
 
i
;

252 
js⁄
 = 
	`js⁄_obje˘_¸óã
();

253 
i
 = 0; i < 
cﬁumns
->
n_cﬁumns
; i++) {

254 
	`put_js⁄_cﬁumn
(
js⁄
, 
row
, 
cﬁumns
->cﬁumns[
i
]);

256  
js⁄
;

257 
	}
}

260 
	$ovsdb_row_£t_öô
(
ovsdb_row_£t
 *
£t
)

262 
£t
->
rows
 = 
NULL
;

263 
£t
->
n_rows
 = së->
Æloˇãd_rows
 = 0;

264 
	}
}

267 
	$ovsdb_row_£t_de°roy
(
ovsdb_row_£t
 *
£t
)

269 
	`‰ì
(
£t
->
rows
);

270 
	}
}

273 
	$ovsdb_row_£t_add_row
(
ovsdb_row_£t
 *
£t
, c⁄° 
ovsdb_row
 *
row
)

275 i‡(
£t
->
n_rows
 >£t->
Æloˇãd_rows
) {

276 
£t
->
rows
 = 
	`x2ƒóŒoc
(£t->rows, &£t->
Æloˇãd_rows
,

277  *
£t
->
rows
);

279 
£t
->
rows
[£t->
n_rows
++] = 
row
;

280 
	}
}

282 
js⁄
 *

283 
	$ovsdb_row_£t_to_js⁄
(c⁄° 
ovsdb_row_£t
 *
rows
,

284 c⁄° 
ovsdb_cﬁumn_£t
 *
cﬁumns
)

286 
js⁄
 **
js⁄_rows
;

287 
size_t
 
i
;

289 
js⁄_rows
 = 
	`xmÆloc
(
rows
->
n_rows
 *  *json_rows);

290 
i
 = 0; i < 
rows
->
n_rows
; i++) {

291 
js⁄_rows
[
i
] = 
	`ovsdb_row_to_js⁄
(
rows
->rows[i], 
cﬁumns
);

293  
	`js⁄_¨øy_¸óã
(
js⁄_rows
, 
rows
->
n_rows
);

294 
	}
}

296 
	sovsdb_row_£t_s‹t_cbd©a
 {

297 
ovsdb_row_£t
 *
	m£t
;

298 c⁄° 
ovsdb_cﬁumn_£t
 *
	mcﬁumns
;

302 
	$ovsdb_row_£t_s‹t_com∑ª_cb
(
size_t
 
a
, size_à
b
, *
cbd©a_
)

304 
ovsdb_row_£t_s‹t_cbd©a
 *
cbd©a
 = 
cbd©a_
;

305  
	`ovsdb_row_com∑ª_cﬁumns_3way
(
cbd©a
->
£t
->
rows
[
a
],

306 
cbd©a
->
£t
->
rows
[
b
],

307 
cbd©a
->
cﬁumns
);

308 
	}
}

311 
	$ovsdb_row_£t_s‹t_sw≠_cb
(
size_t
 
a
, size_à
b
, *
cbd©a_
)

313 
ovsdb_row_£t_s‹t_cbd©a
 *
cbd©a
 = 
cbd©a_
;

314 c⁄° 
ovsdb_row
 *
tmp
 = 
cbd©a
->
£t
->
rows
[
a
];

315 
cbd©a
->
£t
->
rows
[
a
] = cbd©a->£t->rows[
b
];

316 
cbd©a
->
£t
->
rows
[
b
] = 
tmp
;

317 
	}
}

320 
	$ovsdb_row_£t_s‹t
(
ovsdb_row_£t
 *
£t
,

321 c⁄° 
ovsdb_cﬁumn_£t
 *
cﬁumns
)

323 i‡(
cﬁumns
 && cﬁumns->
n_cﬁumns
 && 
£t
->
n_rows
 > 1) {

324 
ovsdb_row_£t_s‹t_cbd©a
 
cbd©a
;

325 
cbd©a
.
£t
 = set;

326 
cbd©a
.
cﬁumns
 = columns;

327 
	`s‹t
(
£t
->
n_rows
,

328 
ovsdb_row_£t_s‹t_com∑ª_cb
,

329 
ovsdb_row_£t_s‹t_sw≠_cb
,

330 &
cbd©a
);

332 
	}
}

335 
	$ovsdb_row_hash_öô
(
ovsdb_row_hash
 *
rh
,

336 c⁄° 
ovsdb_cﬁumn_£t
 *
cﬁumns
)

338 
	`hm≠_öô
(&
rh
->
rows
);

339 
	`ovsdb_cﬁumn_£t_˛⁄e
(&
rh
->
cﬁumns
, columns);

340 
	}
}

343 
	$ovsdb_row_hash_de°roy
(
ovsdb_row_hash
 *
rh
, 
boﬁ
 
de°roy_rows
)

345 
ovsdb_row_hash_node
 *
node
, *
√xt
;

347 
	`HMAP_FOR_EACH_SAFE
 (
node
, 
√xt
, 
hm≠_node
, &
rh
->
rows
) {

348 
	`hm≠_ªmove
(&
rh
->
rows
, &
node
->
hm≠_node
);

349 i‡(
de°roy_rows
) {

350 
	`ovsdb_row_de°roy
(
	`CONST_CAST
(
ovsdb_row
 *, 
node
->
row
));

352 
	`‰ì
(
node
);

354 
	`hm≠_de°roy
(&
rh
->
rows
);

355 
	`ovsdb_cﬁumn_£t_de°roy
(&
rh
->
cﬁumns
);

356 
	}
}

358 
size_t


359 
	$ovsdb_row_hash_cou¡
(c⁄° 
ovsdb_row_hash
 *
rh
)

361  
	`hm≠_cou¡
(&
rh
->
rows
);

362 
	}
}

364 
boﬁ


365 
	$ovsdb_row_hash_c⁄èös
(c⁄° 
ovsdb_row_hash
 *
rh
,

366 c⁄° 
ovsdb_row
 *
row
)

368 
size_t
 
hash
 = 
	`ovsdb_row_hash_cﬁumns
(
row
, &
rh
->
cﬁumns
, 0);

369  
	`ovsdb_row_hash_c⁄èös__
(
rh
, 
row
, 
hash
);

370 
	}
}

373 
boﬁ


374 
	$ovsdb_row_hash_c⁄èös_Æl
(c⁄° 
ovsdb_row_hash
 *
a
,

375 c⁄° 
ovsdb_row_hash
 *
b
)

377 
ovsdb_row_hash_node
 *
node
;

379 
	`as£π
(
	`ovsdb_cﬁumn_£t_equÆs
(&
a
->
cﬁumns
, &
b
->columns));

380 
	`HMAP_FOR_EACH
 (
node
, 
hm≠_node
, &
b
->
rows
) {

381 i‡(!
	`ovsdb_row_hash_c⁄èös__
(
a
, 
node
->
row
,Çode->
hm≠_node
.
hash
)) {

382  
Ál£
;

385  
åue
;

386 
	}
}

388 
boﬁ


389 
	$ovsdb_row_hash_ö£π
(
ovsdb_row_hash
 *
rh
, c⁄° 
ovsdb_row
 *
row
)

391 
size_t
 
hash
 = 
	`ovsdb_row_hash_cﬁumns
(
row
, &
rh
->
cﬁumns
, 0);

392  
	`ovsdb_row_hash_ö£π__
(
rh
, 
row
, 
hash
);

393 
	}
}

395 
boﬁ


396 
	$ovsdb_row_hash_c⁄èös__
(c⁄° 
ovsdb_row_hash
 *
rh
,

397 c⁄° 
ovsdb_row
 *
row
, 
size_t
 
hash
)

399 
ovsdb_row_hash_node
 *
node
;

400 
	`HMAP_FOR_EACH_WITH_HASH
 (
node
, 
hm≠_node
, 
hash
, &
rh
->
rows
) {

401 i‡(
	`ovsdb_row_equÆ_cﬁumns
(
row
, 
node
->row, &
rh
->
cﬁumns
)) {

402  
åue
;

405  
Ál£
;

406 
	}
}

408 
boﬁ


409 
	$ovsdb_row_hash_ö£π__
(
ovsdb_row_hash
 *
rh
, c⁄° 
ovsdb_row
 *
row
,

410 
size_t
 
hash
)

412 i‡(!
	`ovsdb_row_hash_c⁄èös__
(
rh
, 
row
, 
hash
)) {

413 
ovsdb_row_hash_node
 *
node
 = 
	`xmÆloc
( *node);

414 
node
->
row
 =Ñow;

415 
	`hm≠_ö£π
(&
rh
->
rows
, &
node
->
hm≠_node
, 
hash
);

416  
åue
;

418  
Ál£
;

420 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/ovsdb/row.h

16 #i‚de‡
OVSDB_ROW_H


17 
	#OVSDB_ROW_H
 1

	)

19 
	~<°ddef.h
>

20 
	~<°döt.h
>

21 
	~"cﬁumn.h
"

22 
	~"hm≠.h
"

23 
	~"li°.h
"

24 
	~"ovsdb-d©a.h
"

26 
	govsdb_cﬁumn_£t
;

38 
	sovsdb_wók_ªf
 {

39 
li°
 
	m§c_node
;

40 
li°
 
	md°_node
;

41 
ovsdb_row
 *
	m§c
;

45 
	sovsdb_row
 {

46 
hm≠_node
 
	mhm≠_node
;

47 
ovsdb_èbÀ
 *
	mèbÀ
;

48 
ovsdb_txn_row
 *
	mtxn_row
;

51 
li°
 
	m§c_ªfs
;

52 
li°
 
	md°_ªfs
;

59 
size_t
 
	mn_ªfs
;

63 
ovsdb_d©um
 
	mfõlds
[];

70 
ovsdb_row
 *
ovsdb_row_¸óã
(c⁄° 
ovsdb_èbÀ
 *);

71 
ovsdb_row
 *
ovsdb_row_˛⁄e
(const ovsdb_row *);

72 
ovsdb_row_de°roy
(
ovsdb_row
 *);

74 
uöt32_t
 
ovsdb_row_hash_cﬁumns
(c⁄° 
ovsdb_row
 *,

75 c⁄° 
ovsdb_cﬁumn_£t
 *,

76 
uöt32_t
 
basis
);

77 
boﬁ
 
ovsdb_row_equÆ_cﬁumns
(c⁄° 
ovsdb_row
 *,

78 c⁄° 
ovsdb_row
 *,

79 c⁄° 
ovsdb_cﬁumn_£t
 *);

80 
ovsdb_row_com∑ª_cﬁumns_3way
(c⁄° 
ovsdb_row
 *,

81 c⁄° 
ovsdb_row
 *,

82 c⁄° 
ovsdb_cﬁumn_£t
 *);

83 
ovsdb_row_upd©e_cﬁumns
(
ovsdb_row
 *, const ovsdb_row *,

84 c⁄° 
ovsdb_cﬁumn_£t
 *);

85 
ovsdb_row_cﬁumns_to_°rög
(c⁄° 
ovsdb_row
 *,

86 c⁄° 
ovsdb_cﬁumn_£t
 *, 
ds
 *);

87 
ovsdb_îr‹
 *
	$ovsdb_row_‰om_js⁄
(
ovsdb_row
 *,

88 c⁄° 
js⁄
 *,

89 
ovsdb_symbﬁ_èbÀ
 *,

90 
ovsdb_cﬁumn_£t
 *
ö˛uded
)

91 
WARN_UNUSED_RESULT
;

92 
js⁄
 *
	`ovsdb_row_to_js⁄
(c⁄° 
ovsdb_row
 *,

93 c⁄° 
ovsdb_cﬁumn_£t
 *
ö˛ude
);

95 
ölöe
 c⁄° 
uuid
 *

96 
	$ovsdb_row_gë_uuid
(c⁄° 
ovsdb_row
 *
row
)

98  &
row
->
fõlds
[
OVSDB_COL_UUID
].
keys
[0].
uuid
;

99 
	}
}

101 
ölöe
 
uuid
 *

102 
	$ovsdb_row_gë_uuid_rw
(
ovsdb_row
 *
row
)

104  &
row
->
fõlds
[
OVSDB_COL_UUID
].
keys
[0].
uuid
;

105 
	}
}

107 
ölöe
 c⁄° 
uuid
 *

108 
	$ovsdb_row_gë_vîsi⁄
(c⁄° 
ovsdb_row
 *
row
)

110  &
row
->
fõlds
[
OVSDB_COL_VERSION
].
keys
[0].
uuid
;

111 
	}
}

113 
ölöe
 
uuid
 *

114 
	$ovsdb_row_gë_vîsi⁄_rw
(
ovsdb_row
 *
row
)

116  &
row
->
fõlds
[
OVSDB_COL_VERSION
].
keys
[0].
uuid
;

117 
	}
}

119 
ölöe
 
uöt32_t


120 
	$ovsdb_row_hash
(c⁄° 
ovsdb_row
 *
row
)

122  
	`uuid_hash
(
	`ovsdb_row_gë_uuid
(
row
));

123 
	}
}

126 
	sovsdb_row_£t
 {

127 c⁄° 
ovsdb_row
 **
	mrows
;

128 
size_t
 
	mn_rows
, 
	mÆloˇãd_rows
;

131 
	#OVSDB_ROW_SET_INITIALIZER
 { 
NULL
, 0, 0 }

	)

133 
ovsdb_row_£t_öô
(
ovsdb_row_£t
 *);

134 
ovsdb_row_£t_de°roy
(
ovsdb_row_£t
 *);

135 
ovsdb_row_£t_add_row
(
ovsdb_row_£t
 *, c⁄° 
ovsdb_row
 *);

137 
js⁄
 *
ovsdb_row_£t_to_js⁄
(c⁄° 
ovsdb_row_£t
 *,

138 c⁄° 
ovsdb_cﬁumn_£t
 *);

140 
ovsdb_row_£t_s‹t
(
ovsdb_row_£t
 *,

141 c⁄° 
ovsdb_cﬁumn_£t
 *);

148 
	sovsdb_row_hash
 {

149 
hm≠
 
	mrows
;

150 
ovsdb_cﬁumn_£t
 
	mcﬁumns
;

153 
	#OVSDB_ROW_HASH_INITIALIZER
(
RH
) \

154 { 
	`HMAP_INITIALIZER
(&(
RH
).
rows
), 
OVSDB_COLUMN_SET_INITIALIZER
 }

	)

156 
	sovsdb_row_hash_node
 {

157 
hm≠_node
 
	mhm≠_node
;

158 c⁄° 
ovsdb_row
 *
	mrow
;

161 
ovsdb_row_hash_öô
(
ovsdb_row_hash
 *,

162 c⁄° 
ovsdb_cﬁumn_£t
 *);

163 
ovsdb_row_hash_de°roy
(
ovsdb_row_hash
 *, 
boﬁ
 
de°roy_rows
);

164 
size_t
 
ovsdb_row_hash_cou¡
(c⁄° 
ovsdb_row_hash
 *);

165 
boﬁ
 
ovsdb_row_hash_c⁄èös
(c⁄° 
ovsdb_row_hash
 *,

166 c⁄° 
ovsdb_row
 *);

167 
boﬁ
 
ovsdb_row_hash_c⁄èös_Æl
(c⁄° 
ovsdb_row_hash
 *,

168 c⁄° 
ovsdb_row_hash
 *);

169 
boﬁ
 
ovsdb_row_hash_ö£π
(
ovsdb_row_hash
 *, c⁄° 
ovsdb_row
 *);

170 
boﬁ
 
ovsdb_row_hash_c⁄èös__
(c⁄° 
ovsdb_row_hash
 *,

171 c⁄° 
ovsdb_row
 *, 
size_t
 
hash
);

172 
boﬁ
 
ovsdb_row_hash_ö£π__
(
ovsdb_row_hash
 *,

173 c⁄° 
ovsdb_row
 *, 
size_t
 
hash
);

	@/home/lsch/mytest/openvswitch-1.9.0/ovsdb/server.c

16 
	~<c⁄fig.h
>

18 
	~"£rvî.h
"

20 
	~<as£π.h
>

22 
	~"hash.h
"

23 
	~"ovsdb.h
"

27 
	$ovsdb_£ssi⁄_öô
(
ovsdb_£ssi⁄
 *
£ssi⁄
, 
ovsdb_£rvî
 *
£rvî
)

29 
£ssi⁄
->
£rvî
 = server;

30 
	`li°_öô
(&
£ssi⁄
->
com∂ëi⁄s
);

31 
	`hm≠_öô
(&
£ssi⁄
->
waôîs
);

32 
	}
}

36 
	$ovsdb_£ssi⁄_de°roy
(
ovsdb_£ssi⁄
 *
£ssi⁄
)

38 
	`as£π
(
	`hm≠_is_em±y
(&
£ssi⁄
->
waôîs
));

39 
	`hm≠_de°roy
(&
£ssi⁄
->
waôîs
);

40 
	}
}

44 
ovsdb_lock_waôî
 *

45 
	$ovsdb_£ssi⁄_gë_lock_waôî
(c⁄° 
ovsdb_£ssi⁄
 *
£ssi⁄
,

46 c⁄° *
lock_«me
)

48 
ovsdb_lock_waôî
 *
waôî
;

50 
	`HMAP_FOR_EACH_WITH_HASH
 (
waôî
, 
£ssi⁄_node
, 
	`hash_°rög
(
lock_«me
, 0),

51 &
£ssi⁄
->
waôîs
) {

52 i‡(!
	`°rcmp
(
lock_«me
, 
waôî
->lock_name)) {

53  
waôî
;

56  
NULL
;

57 
	}
}

62 
ovsdb_lock_waôî
 *

63 
	$ovsdb_lock_gë_ow√r
(c⁄° 
ovsdb_lock
 *
lock
)

65  
	`CONTAINER_OF
(
	`li°_‰⁄t
(&
lock
->
waôîs
),

66 
ovsdb_lock_waôî
, 
lock_node
);

67 
	}
}

77 
ovsdb_£ssi⁄
 *

78 
	$ovsdb_lock_waôî_ªmove
(
ovsdb_lock_waôî
 *
waôî
)

80 
ovsdb_lock
 *
lock
 = 
waôî
->lock;

82 
	`li°_ªmove
(&
waôî
->
lock_node
);

83 
waôî
->
lock
 = 
NULL
;

85 i‡(
	`li°_is_em±y
(&
lock
->
waôîs
)) {

86 
	`hm≠_ªmove
(&
lock
->
£rvî
->
locks
, &lock->
hm≠_node
);

87 
	`‰ì
(
lock
->
«me
);

88 
	`‰ì
(
lock
);

89  
NULL
;

92  
	`ovsdb_lock_gë_ow√r
(
lock
)->
£ssi⁄
;

93 
	}
}

102 
	$ovsdb_lock_waôî_de°roy
(
ovsdb_lock_waôî
 *
waôî
)

104 
	`as£π
(!
waôî
->
lock
);

105 
	`hm≠_ªmove
(&
waôî
->
£ssi⁄
->
waôîs
, &waôî->
£ssi⁄_node
);

106 
	`‰ì
(
waôî
->
lock_«me
);

107 
	`‰ì
(
waôî
);

108 
	}
}

111 
boﬁ


112 
	$ovsdb_lock_waôî_is_ow√r
(c⁄° 
ovsdb_lock_waôî
 *
waôî
)

114  
waôî
->
lock
 && waôî =
	`ovsdb_lock_gë_ow√r
(waiter->lock);

115 
	}
}

122 
	$ovsdb_£rvî_öô
(
ovsdb_£rvî
 *
£rvî
)

124 
	`shash_öô
(&
£rvî
->
dbs
);

125 
	`hm≠_öô
(&
£rvî
->
locks
);

126 
	}
}

131 
boﬁ


132 
	$ovsdb_£rvî_add_db
(
ovsdb_£rvî
 *
£rvî
, 
ovsdb
 *
db
)

134  
	`shash_add_⁄˚
(&
£rvî
->
dbs
, 
db
->
schema
->
«me
, db);

135 
	}
}

139 
	$ovsdb_£rvî_de°roy
(
ovsdb_£rvî
 *
£rvî
)

141 
	`shash_de°roy
(&
£rvî
->
dbs
);

142 
	`hm≠_de°roy
(&
£rvî
->
locks
);

143 
	}
}

145 
ovsdb_lock
 *

146 
	$ovsdb_£rvî_¸óã_lock__
(
ovsdb_£rvî
 *
£rvî
, c⁄° *
lock_«me
,

147 
uöt32_t
 
hash
)

149 
ovsdb_lock
 *
lock
;

151 
	`HMAP_FOR_EACH_WITH_HASH
 (
lock
, 
hm≠_node
, 
hash
, &
£rvî
->
locks
) {

152 i‡(!
	`°rcmp
(
lock
->
«me
, 
lock_«me
)) {

153  
lock
;

157 
lock
 = 
	`xzÆloc
( *lock);

158 
lock
->
£rvî
 = server;

159 
lock
->
«me
 = 
	`x°rdup
(
lock_«me
);

160 
	`hm≠_ö£π
(&
£rvî
->
locks
, &
lock
->
hm≠_node
, 
hash
);

161 
	`li°_öô
(&
lock
->
waôîs
);

163  
lock
;

164 
	}
}

177 
ovsdb_lock_waôî
 *

178 
	$ovsdb_£rvî_lock
(
ovsdb_£rvî
 *
£rvî
,

179 
ovsdb_£ssi⁄
 *
£ssi⁄
,

180 c⁄° *
lock_«me
,

181 
ovsdb_lock_mode
 
mode
,

182 
ovsdb_£ssi⁄
 **
vi˘imp
)

184 
uöt32_t
 
hash
 = 
	`hash_°rög
(
lock_«me
, 0);

185 
ovsdb_lock_waôî
 *
waôî
, *
vi˘im
;

186 
ovsdb_lock
 *
lock
;

188 
lock
 = 
	`ovsdb_£rvî_¸óã_lock__
(
£rvî
, 
lock_«me
, 
hash
);

189 
vi˘im
 = (
mode
 =
OVSDB_LOCK_STEAL
 && !
	`li°_is_em±y
(&
lock
->
waôîs
)

190 ? 
	`ovsdb_lock_gë_ow√r
(
lock
)

191 : 
NULL
);

193 
waôî
 = 
	`xmÆloc
( *waiter);

194 
waôî
->
mode
 = mode;

195 
waôî
->
lock_«me
 = 
	`x°rdup
(lock_name);

196 
waôî
->
lock
 =Üock;

197 i‡(
mode
 =
OVSDB_LOCK_STEAL
) {

198 
	`li°_push_‰⁄t
(&
lock
->
waôîs
, &
waôî
->
lock_node
);

200 
	`li°_push_back
(&
lock
->
waôîs
, &
waôî
->
lock_node
);

202 
waôî
->
£ssi⁄
 = session;

203 
	`hm≠_ö£π
(&
waôî
->
£ssi⁄
->
waôîs
, &waôî->
£ssi⁄_node
, 
hash
);

205 i‡(
vi˘im
 && vi˘im->
mode
 =
OVSDB_LOCK_STEAL
) {

206 
	`ovsdb_lock_waôî_ªmove
(
vi˘im
);

208 *
vi˘imp
 = 
vi˘im
 ? vi˘im->
£ssi⁄
 : 
NULL
;

210  
waôî
;

211 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/ovsdb/server.h

16 #i‚de‡
SERVER_H


17 
	#SERVER_H
 1

	)

19 
	~"hm≠.h
"

20 
	~"li°.h
"

21 
	~"shash.h
"

23 
	govsdb
;

24 
	govsdb_£rvî
;

29 
	sovsdb_£ssi⁄
 {

30 
ovsdb_£rvî
 *
	m£rvî
;

31 
li°
 
	mcom∂ëi⁄s
;

32 
hm≠
 
	mwaôîs
;

35 
ovsdb_£ssi⁄_öô
(
ovsdb_£ssi⁄
 *, 
ovsdb_£rvî
 *);

36 
ovsdb_£ssi⁄_de°roy
(
ovsdb_£ssi⁄
 *);

38 
ovsdb_lock_waôî
 *
ovsdb_£ssi⁄_gë_lock_waôî
(

39 c⁄° 
ovsdb_£ssi⁄
 *, c⁄° *
lock_«me
);

45 
	sovsdb_lock
 {

46 
hm≠_node
 
	mhm≠_node
;

47 
ovsdb_£rvî
 *
	m£rvî
;

48 *
	m«me
;

49 
li°
 
	mwaôîs
;

52 
ovsdb_lock_waôî
 *
ovsdb_lock_gë_ow√r
(c⁄° 
ovsdb_lock
 *);

55 
	eovsdb_lock_mode
 {

56 
	mOVSDB_LOCK_WAIT
,

57 
	mOVSDB_LOCK_STEAL


61 
	sovsdb_lock_waôî
 {

62 
hm≠_node
 
	m£ssi⁄_node
;

63 
ovsdb_lock
 *
	mlock
;

65 
ovsdb_lock_mode
 
	mmode
;

66 *
	mlock_«me
;

68 
ovsdb_£ssi⁄
 *
	m£ssi⁄
;

69 
li°
 
	mlock_node
;

72 
ovsdb_£ssi⁄
 *
ovsdb_lock_waôî_ªmove
(
ovsdb_lock_waôî
 *);

73 
ovsdb_lock_waôî_de°roy
(
ovsdb_lock_waôî
 *);

74 
boﬁ
 
ovsdb_lock_waôî_is_ow√r
(c⁄° 
ovsdb_lock_waôî
 *);

79 
	sovsdb_£rvî
 {

80 
shash
 
	mdbs
;

81 
hm≠
 
	mlocks
;

84 
ovsdb_£rvî_öô
(
ovsdb_£rvî
 *);

85 
boﬁ
 
ovsdb_£rvî_add_db
(
ovsdb_£rvî
 *, 
ovsdb
 *);

86 
ovsdb_£rvî_de°roy
(
ovsdb_£rvî
 *);

88 
ovsdb_lock_waôî
 *
ovsdb_£rvî_lock
(
ovsdb_£rvî
 *,

89 
ovsdb_£ssi⁄
 *,

90 c⁄° *
lock_«me
,

91 
ovsdb_lock_mode
,

92 
ovsdb_£ssi⁄
 **
vi˘imp
);

	@/home/lsch/mytest/openvswitch-1.9.0/ovsdb/table.c

16 
	~<c⁄fig.h
>

18 
	~"èbÀ.h
"

20 
	~<as£π.h
>

21 
	~<limôs.h
>

23 
	~"js⁄.h
"

24 
	~"cﬁumn.h
"

25 
	~"ovsdb-îr‹.h
"

26 
	~"ovsdb-∑r£r.h
"

27 
	~"ovsdb-ty≥s.h
"

28 
	~"row.h
"

31 
	$add_cﬁumn
(
ovsdb_èbÀ_schema
 *
ts
, 
ovsdb_cﬁumn
 *
cﬁumn
)

33 
	`as£π
(!
	`shash_föd
(&
ts
->
cﬁumns
, 
cﬁumn
->
«me
));

34 
cﬁumn
->
ödex
 = 
	`shash_cou¡
(&
ts
->
cﬁumns
);

35 
	`shash_add
(&
ts
->
cﬁumns
, 
cﬁumn
->
«me
, column);

36 
	}
}

38 
ovsdb_èbÀ_schema
 *

39 
	$ovsdb_èbÀ_schema_¸óã
(c⁄° *
«me
, 
boﬁ
 
muèbÀ
,

40 
max_rows
, 
boﬁ
 
is_roŸ
)

42 
ovsdb_cﬁumn
 *
uuid
, *
vîsi⁄
;

43 
ovsdb_èbÀ_schema
 *
ts
;

45 
ts
 = 
	`xzÆloc
( *ts);

46 
ts
->
«me
 = 
	`x°rdup
(name);

47 
ts
->
muèbÀ
 = mutable;

48 
	`shash_öô
(&
ts
->
cﬁumns
);

49 
ts
->
max_rows
 = max_rows;

50 
ts
->
is_roŸ
 = is_root;

52 
uuid
 = 
	`ovsdb_cﬁumn_¸óã
("_uuid", 
Ál£
, 
åue
, &
ovsdb_ty≥_uuid
);

53 
	`add_cﬁumn
(
ts
, 
uuid
);

54 
	`as£π
(
uuid
->
ödex
 =
OVSDB_COL_UUID
);

56 
vîsi⁄
 = 
	`ovsdb_cﬁumn_¸óã
("_vîsi⁄", 
Ál£
, fÆ£, &
ovsdb_ty≥_uuid
);

57 
	`add_cﬁumn
(
ts
, 
vîsi⁄
);

58 
	`as£π
(
vîsi⁄
->
ödex
 =
OVSDB_COL_VERSION
);

60 
ts
->
n_ödexes
 = 0;

61 
ts
->
ödexes
 = 
NULL
;

63  
ts
;

64 
	}
}

66 
ovsdb_èbÀ_schema
 *

67 
	$ovsdb_èbÀ_schema_˛⁄e
(c⁄° 
ovsdb_èbÀ_schema
 *
ﬁd
)

69 
ovsdb_èbÀ_schema
 *
√w
;

70 
shash_node
 *
node
;

71 
size_t
 
i
;

73 
√w
 = 
	`ovsdb_èbÀ_schema_¸óã
(
ﬁd
->
«me
, old->
muèbÀ
,

74 
ﬁd
->
max_rows
, old->
is_roŸ
);

75 
	`SHASH_FOR_EACH
 (
node
, &
ﬁd
->
cﬁumns
) {

76 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
 = 
node
->
d©a
;

78 i‡(
cﬁumn
->
«me
[0] == '_') {

83 
	`add_cﬁumn
(
√w
, 
	`ovsdb_cﬁumn_˛⁄e
(
cﬁumn
));

86 
√w
->
n_ödexes
 = 
ﬁd
->n_indexes;

87 
√w
->
ödexes
 = 
	`xmÆloc
“ew->
n_ödexes
 *  *new->indexes);

88 
i
 = 0; i < 
√w
->
n_ödexes
; i++) {

89 c⁄° 
ovsdb_cﬁumn_£t
 *
ﬁd_ödex
 = &
ﬁd
->
ödexes
[
i
];

90 
ovsdb_cﬁumn_£t
 *
√w_ödex
 = &
√w
->
ödexes
[
i
];

91 
size_t
 
j
;

93 
	`ovsdb_cﬁumn_£t_öô
(
√w_ödex
);

94 
j
 = 0; j < 
ﬁd_ödex
->
n_cﬁumns
; j++) {

95 c⁄° 
ovsdb_cﬁumn
 *
ﬁd_cﬁumn
 = 
ﬁd_ödex
->
cﬁumns
[
j
];

96 c⁄° 
ovsdb_cﬁumn
 *
√w_cﬁumn
;

98 
√w_cﬁumn
 = 
	`ovsdb_èbÀ_schema_gë_cﬁumn
(
√w
, 
ﬁd_cﬁumn
->
«me
);

99 
	`ovsdb_cﬁumn_£t_add
(
√w_ödex
, 
√w_cﬁumn
);

103  
√w
;

104 
	}
}

107 
	$ovsdb_èbÀ_schema_de°roy
(
ovsdb_èbÀ_schema
 *
ts
)

109 
shash_node
 *
node
;

110 
size_t
 
i
;

112 
i
 = 0; i < 
ts
->
n_ödexes
; i++) {

113 
	`ovsdb_cﬁumn_£t_de°roy
(&
ts
->
ödexes
[
i
]);

115 
	`‰ì
(
ts
->
ödexes
);

117 
	`SHASH_FOR_EACH
 (
node
, &
ts
->
cﬁumns
) {

118 
	`ovsdb_cﬁumn_de°roy
(
node
->
d©a
);

120 
	`shash_de°roy
(&
ts
->
cﬁumns
);

121 
	`‰ì
(
ts
->
«me
);

122 
	`‰ì
(
ts
);

123 
	}
}

125 
ovsdb_îr‹
 *

126 
	$ovsdb_èbÀ_schema_‰om_js⁄
(c⁄° 
js⁄
 *js⁄, c⁄° *
«me
,

127 
ovsdb_èbÀ_schema
 **
t•
)

129 
ovsdb_èbÀ_schema
 *
ts
;

130 c⁄° 
js⁄
 *
cﬁumns
, *
muèbÀ
, *
max_rows
, *
is_roŸ
, *
ödexes
;

131 
shash_node
 *
node
;

132 
ovsdb_∑r£r
 
∑r£r
;

133 
ovsdb_îr‹
 *
îr‹
;

134 
n_max_rows
;

136 *
t•
 = 
NULL
;

138 
	`ovsdb_∑r£r_öô
(&
∑r£r
, 
js⁄
, "èbÀ schem®f‹ÅabÀ %s", 
«me
);

139 
cﬁumns
 = 
	`ovsdb_∑r£r_membî
(&
∑r£r
, "cﬁumns", 
OP_OBJECT
);

140 
muèbÀ
 = 
	`ovsdb_∑r£r_membî
(&
∑r£r
, "mutable",

141 
OP_TRUE
 | 
OP_FALSE
 | 
OP_OPTIONAL
);

142 
max_rows
 = 
	`ovsdb_∑r£r_membî
(&
∑r£r
, "maxRows",

143 
OP_INTEGER
 | 
OP_OPTIONAL
);

144 
is_roŸ
 = 
	`ovsdb_∑r£r_membî
(&
∑r£r
, "isRoŸ", 
OP_BOOLEAN
 | 
OP_OPTIONAL
);

145 
ödexes
 = 
	`ovsdb_∑r£r_membî
(&
∑r£r
, "ödexes", 
OP_ARRAY
 | 
OP_OPTIONAL
);

146 
îr‹
 = 
	`ovsdb_∑r£r_föish
(&
∑r£r
);

147 i‡(
îr‹
) {

148  
îr‹
;

151 i‡(
max_rows
) {

152 i‡(
	`js⁄_öãgî
(
max_rows
) <= 0) {

153  
	`ovsdb_sy¡ax_îr‹
(
js⁄
, 
NULL
,

156 
n_max_rows
 = 
max_rows
->
u
.
öãgî
;

158 
n_max_rows
 = 
UINT_MAX
;

161 i‡(
	`shash_is_em±y
(
	`js⁄_obje˘
(
cﬁumns
))) {

162  
	`ovsdb_sy¡ax_îr‹
(
js⁄
, 
NULL
,

166 
ts
 = 
	`ovsdb_èbÀ_schema_¸óã
(
«me
,

167 
muèbÀ
 ? 
	`js⁄_boﬁón
(muèbÀË: 
åue
,

168 
	`MIN
(
n_max_rows
, 
UINT_MAX
),

169 
is_roŸ
 ? 
	`js⁄_boﬁón
(is_roŸË: 
Ál£
);

170 
	`SHASH_FOR_EACH
 (
node
, 
	`js⁄_obje˘
(
cﬁumns
)) {

171 
ovsdb_cﬁumn
 *
cﬁumn
;

173 i‡(
node
->
«me
[0] == '_') {

174 
îr‹
 = 
	`ovsdb_sy¡ax_îr‹
(
js⁄
, 
NULL
, "names beginning with "

176 } i‡(!
	`ovsdb_∑r£r_is_id
(
node
->
«me
)) {

177 
îr‹
 = 
	`ovsdb_sy¡ax_îr‹
(
js⁄
, 
NULL
, "name must beá valid id");

179 
îr‹
 = 
	`ovsdb_cﬁumn_‰om_js⁄
(
node
->
d©a
,Çode->
«me
, &
cﬁumn
);

181 i‡(
îr‹
) {

182 
îr‹
;

185 
	`add_cﬁumn
(
ts
, 
cﬁumn
);

188 i‡(
ödexes
) {

189 
size_t
 
i
;

191 
ts
->
ödexes
 = 
	`xmÆloc
(ödexes->
u
.
¨øy
.
n
 *  *ts->indexes);

192 
i
 = 0; i < 
ödexes
->
u
.
¨øy
.
n
; i++) {

193 
ovsdb_cﬁumn_£t
 *
ödex
 = &
ts
->
ödexes
[
i
];

194 
size_t
 
j
;

196 
îr‹
 = 
	`ovsdb_cﬁumn_£t_‰om_js⁄
(
ödexes
->
u
.
¨øy
.
ñems
[
i
],

197 
ts
, 
ödex
);

198 i‡(
îr‹
) {

199 
îr‹
;

201 i‡(
ödex
->
n_cﬁumns
 == 0) {

202 
îr‹
 = 
	`ovsdb_sy¡ax_îr‹
(
js⁄
, 
NULL
, "index must have "

204 
îr‹
;

206 
ts
->
n_ödexes
++;

208 
j
 = 0; j < 
ödex
->
n_cﬁumns
; j++) {

209 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
 = 
ödex
->
cﬁumns
[
j
];

211 i‡(!
cﬁumn
->
≥rsi°ít
) {

212 
îr‹
 = 
	`ovsdb_sy¡ax_îr‹
(
js⁄
, 
NULL
, "ephemeral columns "

214 "ödexed", 
cﬁumn
->
«me
);

215 
îr‹
;

221 *
t•
 = 
ts
;

222  
NULL
;

224 
îr‹
:

225 
	`ovsdb_èbÀ_schema_de°roy
(
ts
);

226  
îr‹
;

227 
	}
}

239 
js⁄
 *

240 
	$ovsdb_èbÀ_schema_to_js⁄
(c⁄° 
ovsdb_èbÀ_schema
 *
ts
,

241 
boﬁ
 
deÁu…_is_roŸ
)

243 
js⁄
 *js⁄, *
cﬁumns
;

244 
shash_node
 *
node
;

246 
js⁄
 = 
	`js⁄_obje˘_¸óã
();

247 i‡(!
ts
->
muèbÀ
) {

248 
	`js⁄_obje˘_put
(
js⁄
, "muèbÀ", 
	`js⁄_boﬁón_¸óã
(
Ál£
));

250 i‡(
deÁu…_is_roŸ
 !
ts
->
is_roŸ
) {

251 
	`js⁄_obje˘_put
(
js⁄
, "isRoŸ", 
	`js⁄_boﬁón_¸óã
(
ts
->
is_roŸ
));

254 
cﬁumns
 = 
	`js⁄_obje˘_¸óã
();

256 
	`SHASH_FOR_EACH
 (
node
, &
ts
->
cﬁumns
) {

257 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
 = 
node
->
d©a
;

258 i‡(
node
->
«me
[0] != '_') {

259 
	`js⁄_obje˘_put
(
cﬁumns
, 
cﬁumn
->
«me
,

260 
	`ovsdb_cﬁumn_to_js⁄
(
cﬁumn
));

263 
	`js⁄_obje˘_put
(
js⁄
, "cﬁumns", 
cﬁumns
);

264 i‡(
ts
->
max_rows
 !
UINT_MAX
) {

265 
	`js⁄_obje˘_put
(
js⁄
, "maxRows", 
	`js⁄_öãgî_¸óã
(
ts
->
max_rows
));

268 i‡(
ts
->
n_ödexes
) {

269 
js⁄
 **
ödexes
;

270 
size_t
 
i
;

272 
ödexes
 = 
	`xmÆloc
(
ts
->
n_ödexes
 *  *indexes);

273 
i
 = 0; i < 
ts
->
n_ödexes
; i++) {

274 
ödexes
[
i
] = 
	`ovsdb_cﬁumn_£t_to_js⁄
(&
ts
->indexes[i]);

276 
	`js⁄_obje˘_put
(
js⁄
, "indexes",

277 
	`js⁄_¨øy_¸óã
(
ödexes
, 
ts
->
n_ödexes
));

280  
js⁄
;

281 
	}
}

283 c⁄° 
ovsdb_cﬁumn
 *

284 
	$ovsdb_èbÀ_schema_gë_cﬁumn
(c⁄° 
ovsdb_èbÀ_schema
 *
ts
,

285 c⁄° *
«me
)

287  
	`shash_föd_d©a
(&
ts
->
cﬁumns
, 
«me
);

288 
	}
}

290 
ovsdb_èbÀ
 *

291 
	$ovsdb_èbÀ_¸óã
(
ovsdb_èbÀ_schema
 *
ts
)

293 
ovsdb_èbÀ
 *
èbÀ
;

294 
size_t
 
i
;

296 
èbÀ
 = 
	`xmÆloc
( *table);

297 
èbÀ
->
schema
 = 
ts
;

298 
èbÀ
->
txn_èbÀ
 = 
NULL
;

299 
èbÀ
->
ödexes
 = 
	`xmÆloc
(
ts
->
n_ödexes
 *  *table->indexes);

300 
i
 = 0; i < 
ts
->
n_ödexes
; i++) {

301 
	`hm≠_öô
(&
èbÀ
->
ödexes
[
i
]);

303 
	`hm≠_öô
(&
èbÀ
->
rows
);

305  
èbÀ
;

306 
	}
}

309 
	$ovsdb_èbÀ_de°roy
(
ovsdb_èbÀ
 *
èbÀ
)

311 i‡(
èbÀ
) {

312 
ovsdb_row
 *
row
, *
√xt
;

313 
size_t
 
i
;

315 
	`HMAP_FOR_EACH_SAFE
 (
row
, 
√xt
, 
hm≠_node
, &
èbÀ
->
rows
) {

316 
	`ovsdb_row_de°roy
(
row
);

318 
	`hm≠_de°roy
(&
èbÀ
->
rows
);

320 
i
 = 0; i < 
èbÀ
->
schema
->
n_ödexes
; i++) {

321 
	`hm≠_de°roy
(&
èbÀ
->
ödexes
[
i
]);

323 
	`‰ì
(
èbÀ
->
ödexes
);

325 
	`ovsdb_èbÀ_schema_de°roy
(
èbÀ
->
schema
);

326 
	`‰ì
(
èbÀ
);

328 
	}
}

330 c⁄° 
ovsdb_row
 *

331 
	$ovsdb_èbÀ_gë_row
(c⁄° 
ovsdb_èbÀ
 *
èbÀ
, c⁄° 
uuid
 *uuid)

333 
ovsdb_row
 *
row
;

335 
	`HMAP_FOR_EACH_WITH_HASH
 (
row
, 
hm≠_node
, 
	`uuid_hash
(
uuid
), &
èbÀ
->
rows
) {

336 i‡(
	`uuid_equÆs
(
	`ovsdb_row_gë_uuid
(
row
), 
uuid
)) {

337  
row
;

341  
NULL
;

342 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/ovsdb/table.h

16 #i‚de‡
OVSDB_TABLE_H


17 
	#OVSDB_TABLE_H
 1

	)

19 
	~<°dboﬁ.h
>

20 
	~"compûî.h
"

21 
	~"hm≠.h
"

22 
	~"shash.h
"

24 
	gjs⁄
;

25 
	guuid
;

28 
	sovsdb_èbÀ_schema
 {

29 *
	m«me
;

30 
boﬁ
 
	mmuèbÀ
;

31 
shash
 
	mcﬁumns
;

32 
	mmax_rows
;

33 
boﬁ
 
	mis_roŸ
;

34 
ovsdb_cﬁumn_£t
 *
	mödexes
;

35 
size_t
 
	mn_ödexes
;

38 
ovsdb_èbÀ_schema
 *
ovsdb_èbÀ_schema_¸óã
(

39 c⁄° *
«me
, 
boﬁ
 
muèbÀ
, 
max_rows
, boﬁ 
is_roŸ
);

40 
ovsdb_èbÀ_schema
 *
ovsdb_èbÀ_schema_˛⁄e
(

41 c⁄° 
ovsdb_èbÀ_schema
 *);

42 
ovsdb_èbÀ_schema_de°roy
(
ovsdb_èbÀ_schema
 *);

44 
ovsdb_îr‹
 *
	$ovsdb_èbÀ_schema_‰om_js⁄
(c⁄° 
js⁄
 *,

45 c⁄° *
«me
,

46 
ovsdb_èbÀ_schema
 **)

47 
WARN_UNUSED_RESULT
;

48 
js⁄
 *
	`ovsdb_èbÀ_schema_to_js⁄
(c⁄° 
ovsdb_èbÀ_schema
 *,

49 
boﬁ
 
deÁu…_is_roŸ
);

51 c⁄° 
ovsdb_cﬁumn
 *
	`ovsdb_èbÀ_schema_gë_cﬁumn
(

52 c⁄° 
ovsdb_èbÀ_schema
 *, c⁄° *
«me
);

56 
	sovsdb_èbÀ
 {

57 
ovsdb_èbÀ_schema
 *
schema
;

58 
ovsdb_txn_èbÀ
 *
txn_èbÀ
;

59 
hm≠
 
rows
;

64 
hm≠
 *
ödexes
;

67 
ovsdb_èbÀ
 *
	`ovsdb_èbÀ_¸óã
(
ovsdb_èbÀ_schema
 *);

68 
	`ovsdb_èbÀ_de°roy
(
ovsdb_èbÀ
 *);

70 c⁄° 
ovsdb_row
 *
	`ovsdb_èbÀ_gë_row
(c⁄° 
ovsdb_èbÀ
 *,

71 c⁄° 
uuid
 *);

	@/home/lsch/mytest/openvswitch-1.9.0/ovsdb/transaction.c

16 
	~<c⁄fig.h
>

18 
	~"å™ß˘i⁄.h
"

20 
	~<as£π.h
>

22 
	~"bôm≠.h
"

23 
	~"dy«mic-°rög.h
"

24 
	~"hash.h
"

25 
	~"hm≠.h
"

26 
	~"js⁄.h
"

27 
	~"li°.h
"

28 
	~"ovsdb-îr‹.h
"

29 
	~"ovsdb.h
"

30 
	~"row.h
"

31 
	~"èbÀ.h
"

32 
	~"uuid.h
"

34 
	sovsdb_txn
 {

35 
ovsdb
 *
	mdb
;

36 
li°
 
	mtxn_èbÀs
;

37 
ds
 
	mcommít
;

41 
	sovsdb_txn_èbÀ
 {

42 
li°
 
	mnode
;

43 
ovsdb_èbÀ
 *
	mèbÀ
;

44 
hm≠
 
	mtxn_rows
;

49 
hm≠
 *
	mtxn_ödexes
;

52 
	m£rül
;

53 
	mn_¥o˚s£d
;

71 
	sovsdb_txn_row
 {

72 
hm≠_node
 
	mhm≠_node
;

73 
ovsdb_row
 *
	mﬁd
;

74 
ovsdb_row
 *
	m√w
;

75 
size_t
 
	mn_ªfs
;

80 
uuid
 
	muuid
;

81 
ovsdb_èbÀ
 *
	mèbÀ
;

84 
	m£rül
;

86 
	mch™ged
[];

89 
ovsdb_îr‹
 * 
WARN_UNUSED_RESULT


90 
dñëe_g¨bage_row
(
ovsdb_txn
 *
txn
, 
ovsdb_txn_row
 *
r
);

91 
ovsdb_txn_row_¥e‰ì
(
ovsdb_txn_row
 *);

92 
ovsdb_îr‹
 * 
WARN_UNUSED_RESULT


93 
f‹_óch_txn_row
(
ovsdb_txn
 *
txn
,

94 
ovsdb_îr‹
 *(*)(
ovsdb_txn
 *,

95 
ovsdb_txn_row
 *));

99 
	g£rül
;

101 
ovsdb_txn
 *

102 
	$ovsdb_txn_¸óã
(
ovsdb
 *
db
)

104 
ovsdb_txn
 *
txn
 = 
	`xmÆloc
( *txn);

105 
txn
->
db
 = db;

106 
	`li°_öô
(&
txn
->
txn_èbÀs
);

107 
	`ds_öô
(&
txn
->
commít
);

108  
txn
;

109 
	}
}

112 
	$ovsdb_txn_‰ì
(
ovsdb_txn
 *
txn
)

114 
	`as£π
(
	`li°_is_em±y
(&
txn
->
txn_èbÀs
));

115 
	`ds_de°roy
(&
txn
->
commít
);

116 
	`‰ì
(
txn
);

117 
	}
}

119 
ovsdb_îr‹
 *

120 
	$ovsdb_txn_row_ab‹t
(
ovsdb_txn
 *
txn
 
OVS_UNUSED
,

121 
ovsdb_txn_row
 *
txn_row
)

123 
ovsdb_row
 *
ﬁd
 = 
txn_row
->old;

124 
ovsdb_row
 *
√w
 = 
txn_row
->new;

126 
	`ovsdb_txn_row_¥e‰ì
(
txn_row
);

127 i‡(!
ﬁd
) {

128 i‡(
√w
) {

129 
	`hm≠_ªmove
(&
√w
->
èbÀ
->
rows
, &√w->
hm≠_node
);

131 } i‡(!
√w
) {

132 
	`hm≠_ö£π
(&
ﬁd
->
èbÀ
->
rows
, &ﬁd->
hm≠_node
, 
	`ovsdb_row_hash
(old));

134 
	`hm≠_ª∂a˚
(&
√w
->
èbÀ
->
rows
, &√w->
hm≠_node
, &
ﬁd
->hmap_node);

136 
	`ovsdb_row_de°roy
(
√w
);

137 
	`‰ì
(
txn_row
);

139  
NULL
;

140 
	}
}

144 
size_t


145 
	$ovsdb_row_ödex_off£t__
(c⁄° 
ovsdb_èbÀ
 *
èbÀ
, 
size_t
 
i
)

147 
size_t
 
n_fõlds
 = 
	`shash_cou¡
(&
èbÀ
->
schema
->
cﬁumns
);

148  (
	`off£tof
(
ovsdb_row
, 
fõlds
)

149 + 
n_fõlds
 * (
ovsdb_d©um
)

150 + 
i
 * (
hm≠_node
));

151 
	}
}

154 
hm≠_node
 *

155 
	$ovsdb_row_gë_ödex_node
(
ovsdb_row
 *
row
, 
size_t
 
i
)

157  (*Ë((*Ë
row
 + 
	`ovsdb_row_ödex_off£t__
‘ow->
èbÀ
, 
i
));

158 
	}
}

162 
ovsdb_row
 *

163 
	$ovsdb_row_‰om_ödex_node
(
hm≠_node
 *
ödex_node
,

164 c⁄° 
ovsdb_èbÀ
 *
èbÀ
, 
size_t
 
i
)

166  (*Ë((*Ë
ödex_node
 - 
	`ovsdb_row_ödex_off£t__
(
èbÀ
, 
i
));

167 
	}
}

170 
	$ovsdb_txn_ab‹t
(
ovsdb_txn
 *
txn
)

172 
	`ovsdb_îr‹_as£π
(
	`f‹_óch_txn_row
(
txn
, 
ovsdb_txn_row_ab‹t
));

173 
	`ovsdb_txn_‰ì
(
txn
);

174 
	}
}

176 
ovsdb_txn_row
 *

177 
	$föd_txn_row
(c⁄° 
ovsdb_èbÀ
 *
èbÀ
, c⁄° 
uuid
 *uuid)

179 
ovsdb_txn_row
 *
txn_row
;

181 i‡(!
èbÀ
->
txn_èbÀ
) {

182  
NULL
;

185 
	`HMAP_FOR_EACH_WITH_HASH
 (
txn_row
, 
hm≠_node
,

186 
	`uuid_hash
(
uuid
), &
èbÀ
->
txn_èbÀ
->
txn_rows
) {

187 i‡(
	`uuid_equÆs
(
uuid
, &
txn_row
->uuid)) {

188  
txn_row
;

192  
NULL
;

193 
	}
}

195 
ovsdb_txn_row
 *

196 
	$föd_‹_make_txn_row
(
ovsdb_txn
 *
txn
, c⁄° 
ovsdb_èbÀ
 *
èbÀ
,

197 c⁄° 
uuid
 *uuid)

199 
ovsdb_txn_row
 *
txn_row
 = 
	`föd_txn_row
(
èbÀ
, 
uuid
);

200 i‡(!
txn_row
) {

201 c⁄° 
ovsdb_row
 *
row
 = 
	`ovsdb_èbÀ_gë_row
(
èbÀ
, 
uuid
);

202 i‡(
row
) {

203 
txn_row
 = 
	`ovsdb_txn_row_modify
(
txn
, 
row
)->txn_row;

206  
txn_row
;

207 
	}
}

209 
ovsdb_îr‹
 * 
WARN_UNUSED_RESULT


210 
	$ovsdb_txn_adju°_©om_ªfs
(
ovsdb_txn
 *
txn
, c⁄° 
ovsdb_row
 *
r
,

211 c⁄° 
ovsdb_cﬁumn
 *
c
,

212 c⁄° 
ovsdb_ba£_ty≥
 *
ba£
,

213 c⁄° 
ovsdb_©om
 *
©oms
, 
n
,

214 
dñè
)

216 c⁄° 
ovsdb_èbÀ
 *
èbÀ
;

217 
i
;

219 i‡(!
	`ovsdb_ba£_ty≥_is_°r⁄g_ªf
(
ba£
)) {

220  
NULL
;

223 
èbÀ
 = 
ba£
->
u
.
uuid
.
ªfTabÀ
;

224 
i
 = 0; i < 
n
; i++) {

225 c⁄° 
uuid
 *uuid = &
©oms
[
i
].uuid;

226 
ovsdb_txn_row
 *
txn_row
;

228 i‡(
	`uuid_equÆs
(
uuid
, 
	`ovsdb_row_gë_uuid
(
r
))) {

233 
txn_row
 = 
	`föd_‹_make_txn_row
(
txn
, 
èbÀ
, 
uuid
);

234 i‡(!
txn_row
) {

235  
	`ovsdb_îr‹
("referential integrity violation",

236 "TabÀ %†cﬁum¿%†row "
UUID_FMT
" "

237 "ª„ªn˚†n⁄exi°íàrow "
UUID_FMT
" in "

239 
r
->
èbÀ
->
schema
->
«me
, 
c
->name,

240 
	`UUID_ARGS
(
	`ovsdb_row_gë_uuid
(
r
)),

241 
	`UUID_ARGS
(
uuid
), 
èbÀ
->
schema
->
«me
);

243 
txn_row
->
n_ªfs
 +
dñè
;

246  
NULL
;

247 
	}
}

249 
ovsdb_îr‹
 * 
WARN_UNUSED_RESULT


250 
	$ovsdb_txn_adju°_row_ªfs
(
ovsdb_txn
 *
txn
, c⁄° 
ovsdb_row
 *
r
,

251 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
, 
dñè
)

253 c⁄° 
ovsdb_d©um
 *
fõld
 = &
r
->
fõlds
[
cﬁumn
->
ödex
];

254 
ovsdb_îr‹
 *
îr‹
;

256 
îr‹
 = 
	`ovsdb_txn_adju°_©om_ªfs
(
txn
, 
r
, 
cﬁumn
, &cﬁumn->
ty≥
.
key
,

257 
fõld
->
keys
, fõld->
n
, 
dñè
);

258 i‡(!
îr‹
) {

259 
îr‹
 = 
	`ovsdb_txn_adju°_©om_ªfs
(
txn
, 
r
, 
cﬁumn
, &cﬁumn->
ty≥
.
vÆue
,

260 
fõld
->
vÆues
, fõld->
n
, 
dñè
);

262  
îr‹
;

263 
	}
}

265 
ovsdb_îr‹
 * 
WARN_UNUSED_RESULT


266 
	$upd©e_row_ªf_cou¡
(
ovsdb_txn
 *
txn
, 
ovsdb_txn_row
 *
r
)

268 
ovsdb_èbÀ
 *
èbÀ
 = 
r
->table;

269 
shash_node
 *
node
;

271 
	`SHASH_FOR_EACH
 (
node
, &
èbÀ
->
schema
->
cﬁumns
) {

272 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
 = 
node
->
d©a
;

273 
ovsdb_îr‹
 *
îr‹
;

275 i‡(
r
->
ﬁd
) {

276 
îr‹
 = 
	`ovsdb_txn_adju°_row_ªfs
(
txn
, 
r
->
ﬁd
, 
cﬁumn
, -1);

277 i‡(
îr‹
) {

278  
	`OVSDB_WRAP_BUG
("îr‹ de¸ósögÑefcou¡", 
îr‹
);

281 i‡(
r
->
√w
) {

282 
îr‹
 = 
	`ovsdb_txn_adju°_row_ªfs
(
txn
, 
r
->
√w
, 
cﬁumn
, 1);

283 i‡(
îr‹
) {

284  
îr‹
;

289  
NULL
;

290 
	}
}

292 
ovsdb_îr‹
 * 
WARN_UNUSED_RESULT


293 
	$check_ªf_cou¡
(
ovsdb_txn
 *
txn
 
OVS_UNUSED
, 
ovsdb_txn_row
 *
r
)

295 i‡(
r
->
√w
 || !r->
n_ªfs
) {

296  
NULL
;

298  
	`ovsdb_îr‹
("referential integrity violation",

299 "ˇ¬Ÿ dñëê%†row "
UUID_FMT
" because "

301 
r
->
èbÀ
->
schema
->
«me
, 
	`UUID_ARGS
(&r->
uuid
),

302 
r
->
n_ªfs
);

304 
	}
}

306 
ovsdb_îr‹
 * 
WARN_UNUSED_RESULT


307 
	$dñëe_row_ªfs
(
ovsdb_txn
 *
txn
, c⁄° 
ovsdb_row
 *
row
,

308 c⁄° 
ovsdb_ba£_ty≥
 *
ba£
,

309 c⁄° 
ovsdb_©om
 *
©oms
, 
n
)

311 c⁄° 
ovsdb_èbÀ
 *
èbÀ
;

312 
i
;

314 i‡(!
	`ovsdb_ba£_ty≥_is_°r⁄g_ªf
(
ba£
)) {

315  
NULL
;

318 
èbÀ
 = 
ba£
->
u
.
uuid
.
ªfTabÀ
;

319 
i
 = 0; i < 
n
; i++) {

320 c⁄° 
uuid
 *uuid = &
©oms
[
i
].uuid;

321 
ovsdb_txn_row
 *
txn_row
;

323 i‡(
	`uuid_equÆs
(
uuid
, 
	`ovsdb_row_gë_uuid
(
row
))) {

328 
txn_row
 = 
	`föd_‹_make_txn_row
(
txn
, 
èbÀ
, 
uuid
);

329 i‡(!
txn_row
) {

330  
	`OVSDB_BUG
("strongÑefÅarget missing");

331 } i‡(!
txn_row
->
n_ªfs
) {

332  
	`OVSDB_BUG
("strongÑefÅarget has zeroÇ_refs");

333 } i‡(!
txn_row
->
√w
) {

334  
	`OVSDB_BUG
("deleted strongÑefÅarget");

337 i‡(--
txn_row
->
n_ªfs
 == 0) {

338 
ovsdb_îr‹
 *
îr‹
 = 
	`dñëe_g¨bage_row
(
txn
, 
txn_row
);

339 i‡(
îr‹
) {

340  
îr‹
;

345  
NULL
;

346 
	}
}

348 
ovsdb_îr‹
 * 
WARN_UNUSED_RESULT


349 
	$dñëe_g¨bage_row
(
ovsdb_txn
 *
txn
, 
ovsdb_txn_row
 *
txn_row
)

351 
shash_node
 *
node
;

352 
ovsdb_row
 *
row
;

354 i‡(
txn_row
->
èbÀ
->
schema
->
is_roŸ
) {

355  
NULL
;

358 
row
 = 
txn_row
->
√w
;

359 
txn_row
->
√w
 = 
NULL
;

360 
	`hm≠_ªmove
(&
txn_row
->
èbÀ
->
rows
, &
row
->
hm≠_node
);

361 
	`SHASH_FOR_EACH
 (
node
, &
txn_row
->
èbÀ
->
schema
->
cﬁumns
) {

362 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
 = 
node
->
d©a
;

363 c⁄° 
ovsdb_d©um
 *
fõld
 = &
row
->
fõlds
[
cﬁumn
->
ödex
];

364 
ovsdb_îr‹
 *
îr‹
;

366 
îr‹
 = 
	`dñëe_row_ªfs
(
txn
, 
row
,

367 &
cﬁumn
->
ty≥
.
key
, 
fõld
->
keys
, fõld->
n
);

368 i‡(
îr‹
) {

369  
îr‹
;

372 
îr‹
 = 
	`dñëe_row_ªfs
(
txn
, 
row
,

373 &
cﬁumn
->
ty≥
.
vÆue
, 
fõld
->
vÆues
, fõld->
n
);

374 i‡(
îr‹
) {

375  
îr‹
;

378 
	`ovsdb_row_de°roy
(
row
);

380  
NULL
;

381 
	}
}

383 
ovsdb_îr‹
 * 
WARN_UNUSED_RESULT


384 
	$cﬁÀ˘_g¨bage
(
ovsdb_txn
 *
txn
, 
ovsdb_txn_row
 *
txn_row
)

386 i‡(
txn_row
->
√w
 && !txn_row->
n_ªfs
) {

387  
	`dñëe_g¨bage_row
(
txn
, 
txn_row
);

389  
NULL
;

390 
	}
}

392 
ovsdb_îr‹
 * 
WARN_UNUSED_RESULT


393 
	$upd©e_ªf_cou¡s
(
ovsdb_txn
 *
txn
)

395 
ovsdb_îr‹
 *
îr‹
;

397 
îr‹
 = 
	`f‹_óch_txn_row
(
txn
, 
upd©e_row_ªf_cou¡
);

398 i‡(
îr‹
) {

399  
îr‹
;

402  
	`f‹_óch_txn_row
(
txn
, 
check_ªf_cou¡
);

403 
	}
}

405 
ovsdb_îr‹
 *

406 
	$ovsdb_txn_row_commô
(
ovsdb_txn
 *
txn
 
OVS_UNUSED
,

407 
ovsdb_txn_row
 *
txn_row
)

409 
size_t
 
n_ödexes
 = 
txn_row
->
èbÀ
->
schema
->n_indexes;

411 i‡(
txn_row
->
ﬁd
) {

412 
size_t
 
i
;

414 
i
 = 0; i < 
n_ödexes
; i++) {

415 
hm≠_node
 *
node
 = 
	`ovsdb_row_gë_ödex_node
(
txn_row
->
ﬁd
, 
i
);

416 
	`hm≠_ªmove
(&
txn_row
->
èbÀ
->
ödexes
[
i
], 
node
);

419 i‡(
txn_row
->
√w
) {

420 
size_t
 
i
;

422 
i
 = 0; i < 
n_ödexes
; i++) {

423 
hm≠_node
 *
node
 = 
	`ovsdb_row_gë_ödex_node
(
txn_row
->
√w
, 
i
);

424 
	`hm≠_ö£π
(&
txn_row
->
èbÀ
->
ödexes
[
i
], 
node
,Çode->
hash
);

428 
	`ovsdb_txn_row_¥e‰ì
(
txn_row
);

429 i‡(
txn_row
->
√w
) {

430 
txn_row
->
√w
->
n_ªfs
 =Åxn_row->n_refs;

432 
	`ovsdb_row_de°roy
(
txn_row
->
ﬁd
);

433 
	`‰ì
(
txn_row
);

435  
NULL
;

436 
	}
}

439 
	$add_wók_ªf
(
ovsdb_txn
 *
txn
,

440 c⁄° 
ovsdb_row
 *
§c_
, c⁄° ovsdb_row *
d°_
)

442 
ovsdb_row
 *
§c
 = 
	`CONST_CAST
(ovsdb_row *, 
§c_
);

443 
ovsdb_row
 *
d°
 = 
	`CONST_CAST
(ovsdb_row *, 
d°_
);

444 
ovsdb_wók_ªf
 *
wók
;

446 i‡(
§c
 =
d°
) {

450 
d°
 = 
	`ovsdb_txn_row_modify
(
txn
, dst);

452 i‡(!
	`li°_is_em±y
(&
d°
->
d°_ªfs
)) {

454 
wók
 = 
	`CONTAINER_OF
(
	`li°_back
(&
d°
->
d°_ªfs
),

455 
ovsdb_wók_ªf
, 
d°_node
);

456 i‡(
wók
->
§c
 == src) {

461 
wók
 = 
	`xmÆloc
( *weak);

462 
wók
->
§c
 = src;

463 
	`li°_push_back
(&
d°
->
d°_ªfs
, &
wók
->
d°_node
);

464 
	`li°_push_back
(&
§c
->
§c_ªfs
, &
wók
->
§c_node
);

465 
	}
}

467 
ovsdb_îr‹
 * 
WARN_UNUSED_RESULT


468 
	$as£ss_wók_ªfs
(
ovsdb_txn
 *
txn
, 
ovsdb_txn_row
 *
txn_row
)

470 
ovsdb_èbÀ
 *
èbÀ
;

471 
shash_node
 *
node
;

473 i‡(
txn_row
->
ﬁd
) {

476 
ovsdb_wók_ªf
 *
wók
, *
√xt
;

478 
	`LIST_FOR_EACH_SAFE
 (
wók
, 
√xt
, 
d°_node
, &
txn_row
->
ﬁd
->
d°_ªfs
) {

479 i‡(!
wók
->
§c
->
txn_row
) {

480 
	`ovsdb_txn_row_modify
(
txn
, 
wók
->
§c
);

485 i‡(!
txn_row
->
√w
) {

489  
NULL
;

492 
èbÀ
 = 
txn_row
->table;

493 
	`SHASH_FOR_EACH
 (
node
, &
èbÀ
->
schema
->
cﬁumns
) {

494 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
 = 
node
->
d©a
;

495 
ovsdb_d©um
 *
d©um
 = &
txn_row
->
√w
->
fõlds
[
cﬁumn
->
ödex
];

496 
‹ig_n
, 
i
;

497 
boﬁ
 
zîo
 = 
Ál£
;

499 
‹ig_n
 = 
d©um
->
n
;

501 i‡(
	`ovsdb_ba£_ty≥_is_wók_ªf
(&
cﬁumn
->
ty≥
.
key
)) {

502 
i
 = 0; i < 
d©um
->
n
; ) {

503 c⁄° 
ovsdb_row
 *
row
;

505 
row
 = 
	`ovsdb_èbÀ_gë_row
(
cﬁumn
->
ty≥
.
key
.
u
.
uuid
.
ªfTabÀ
,

506 &
d©um
->
keys
[
i
].
uuid
);

507 i‡(
row
) {

508 
	`add_wók_ªf
(
txn
, 
txn_row
->
√w
, 
row
);

509 
i
++;

511 i‡(
	`uuid_is_zîo
(&
d©um
->
keys
[
i
].
uuid
)) {

512 
zîo
 = 
åue
;

514 
	`ovsdb_d©um_ªmove_unß„
(
d©um
, 
i
, &
cﬁumn
->
ty≥
);

519 i‡(
	`ovsdb_ba£_ty≥_is_wók_ªf
(&
cﬁumn
->
ty≥
.
vÆue
)) {

520 
i
 = 0; i < 
d©um
->
n
; ) {

521 c⁄° 
ovsdb_row
 *
row
;

523 
row
 = 
	`ovsdb_èbÀ_gë_row
(
cﬁumn
->
ty≥
.
vÆue
.
u
.
uuid
.
ªfTabÀ
,

524 &
d©um
->
vÆues
[
i
].
uuid
);

525 i‡(
row
) {

526 
	`add_wók_ªf
(
txn
, 
txn_row
->
√w
, 
row
);

527 
i
++;

529 i‡(
	`uuid_is_zîo
(&
d©um
->
vÆues
[
i
].
uuid
)) {

530 
zîo
 = 
åue
;

532 
	`ovsdb_d©um_ªmove_unß„
(
d©um
, 
i
, &
cﬁumn
->
ty≥
);

537 i‡(
d©um
->
n
 !
‹ig_n
) {

538 
	`bôm≠_£t1
(
txn_row
->
ch™ged
, 
cﬁumn
->
ödex
);

539 
	`ovsdb_d©um_s‹t_as£π
(
d©um
, 
cﬁumn
->
ty≥
.
key
.type);

540 i‡(
d©um
->
n
 < 
cﬁumn
->
ty≥
.
n_mö
) {

541 c⁄° 
uuid
 *
row_uuid
 = 
	`ovsdb_row_gë_uuid
(
txn_row
->
√w
);

542 i‡(
zîo
 && !
txn_row
->
ﬁd
) {

543  
	`ovsdb_îr‹
(

545 "WókÑe„ªn˚ cﬁum¿\"%s\" i¿\"%s\"Ñow "
UUID_FMT


550 "ÆlowedÅÿbêem±y.", 
cﬁumn
->
«me
,

551 
èbÀ
->
schema
->
«me
, 
	`UUID_ARGS
(
row_uuid
));

553  
	`ovsdb_îr‹
(

557 "row "
UUID_FMT
" %scausedÅhis columnÅo becomeÉmpty, "

560 
‹ig_n
 - 
d©um
->
n
, 
cﬁumn
->
«me
, 
èbÀ
->
schema
->name,

561 
	`UUID_ARGS
(
row_uuid
),

562 (
txn_row
->
ﬁd


570  
NULL
;

571 
	}
}

573 
ovsdb_îr‹
 * 
WARN_UNUSED_RESULT


574 
	$dëîmöe_ch™ges
(
ovsdb_txn
 *
txn
, 
ovsdb_txn_row
 *
txn_row
)

576 
ovsdb_èbÀ
 *
èbÀ
 = 
txn_row
->table;

578 i‡(
txn_row
->
ﬁd
 &&Åxn_row->
√w
) {

579 
shash_node
 *
node
;

580 
boﬁ
 
ch™ged
 = 
Ál£
;

582 
	`SHASH_FOR_EACH
 (
node
, &
èbÀ
->
schema
->
cﬁumns
) {

583 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
 = 
node
->
d©a
;

584 c⁄° 
ovsdb_ty≥
 *
ty≥
 = &
cﬁumn
->type;

585 
idx
 = 
cﬁumn
->
ödex
;

587 i‡(!
	`ovsdb_d©um_equÆs
(&
txn_row
->
ﬁd
->
fõlds
[
idx
],

588 &
txn_row
->
√w
->
fõlds
[
idx
],

589 
ty≥
)) {

590 
	`bôm≠_£t1
(
txn_row
->
ch™ged
, 
idx
);

591 
ch™ged
 = 
åue
;

595 i‡(!
ch™ged
) {

597 
	`ovsdb_txn_row_ab‹t
(
txn
, 
txn_row
);

600 
	`bôm≠_£t_mu…ùÀ
(
txn_row
->
ch™ged
, 0,

601 
	`shash_cou¡
(&
èbÀ
->
schema
->
cﬁumns
), 1);

604  
NULL
;

605 
	}
}

607 
ovsdb_îr‹
 * 
WARN_UNUSED_RESULT


608 
	$check_max_rows
(
ovsdb_txn
 *
txn
)

610 
ovsdb_txn_èbÀ
 *
t
;

612 
	`LIST_FOR_EACH
 (
t
, 
node
, &
txn
->
txn_èbÀs
) {

613 
size_t
 
n_rows
 = 
	`hm≠_cou¡
(&
t
->
èbÀ
->
rows
);

614 
max_rows
 = 
t
->
èbÀ
->
schema
->max_rows;

616 i‡(
n_rows
 > 
max_rows
) {

617  
	`ovsdb_îr‹
("constraint violation",

621 
t
->
èbÀ
->
schema
->
«me
, 
n_rows
, 
max_rows
);

625  
NULL
;

626 
	}
}

628 
ovsdb_row
 *

629 
	$ovsdb_ödex_£¨ch
(
hm≠
 *
ödex
, 
ovsdb_row
 *
row
, 
size_t
 
i
,

630 
uöt32_t
 
hash
)

632 c⁄° 
ovsdb_èbÀ
 *
èbÀ
 = 
row
->table;

633 c⁄° 
ovsdb_cﬁumn_£t
 *
cﬁumns
 = &
èbÀ
->
schema
->
ödexes
[
i
];

634 
hm≠_node
 *
node
;

636 
node
 = 
	`hm≠_fú°_wôh_hash
(
ödex
, 
hash
);Çode;

637 
node
 = 
	`hm≠_√xt_wôh_hash
(node)) {

638 
ovsdb_row
 *
úow
 = 
	`ovsdb_row_‰om_ödex_node
(
node
, 
èbÀ
, 
i
);

639 i‡(
	`ovsdb_row_equÆ_cﬁumns
(
row
, 
úow
, 
cﬁumns
)) {

640  
úow
;

644  
NULL
;

645 
	}
}

648 
	$du∂iˇã_ödex_row__
(c⁄° 
ovsdb_cﬁumn_£t
 *
ödex
,

649 c⁄° 
ovsdb_row
 *
row
,

650 c⁄° *
tôÀ
,

651 
ds
 *
out
)

653 
size_t
 
n_cﬁumns
 = 
	`shash_cou¡
(&
row
->
èbÀ
->
schema
->
cﬁumns
);

655 
	`ds_put_f‹m©
(
out
, "%†row, wôh UUID "
UUID_FMT
", ",

656 
tôÀ
, 
	`UUID_ARGS
(
	`ovsdb_row_gë_uuid
(
row
)));

657 i‡(!
row
->
txn_row


658 || 
	`bôm≠_sˇn
(
row
->
txn_row
->
ch™ged
, 0, 
n_cﬁumns
) ==Ç_columns) {

659 
	`ds_put_c°r
(
out
, "existed inÅhe database beforeÅhis "

661 } i‡(!
row
->
txn_row
->
ﬁd
) {

662 
	`ds_put_c°r
(
out
, "was inserted byÅhisÅransaction.");

663 } i‡(
	`ovsdb_row_equÆ_cﬁumns
(
row
->
txn_row
->
ﬁd
,

664 
row
->
txn_row
->
√w
, 
ödex
)) {

665 
	`ds_put_c°r
(
out
, "existed inÅhe database beforeÅhis "

669 
	`ds_put_c°r
(
out
, "hadÅhe following index values beforeÅhe "

671 
	`ovsdb_row_cﬁumns_to_°rög
(
row
->
txn_row
->
ﬁd
, 
ödex
, 
out
);

672 
	`ds_put_ch¨
(
out
, '.');

674 
	}
}

676 
ovsdb_îr‹
 * 
WARN_UNUSED_RESULT


677 
	$du∂iˇã_ödex_row
(c⁄° 
ovsdb_cﬁumn_£t
 *
ödex
,

678 c⁄° 
ovsdb_row
 *
a
,

679 c⁄° 
ovsdb_row
 *
b
)

681 
ovsdb_cﬁumn_£t
 
Æl_cﬁumns
;

682 
ovsdb_îr‹
 *
îr‹
;

683 *
ödex_s
;

684 
ds
 
s
;

688 
	`ovsdb_cﬁumn_£t_öô
(&
Æl_cﬁumns
);

689 
	`ovsdb_cﬁumn_£t_add_Æl
(&
Æl_cﬁumns
, 
a
->
èbÀ
);

690 i‡(
	`ovsdb_row_com∑ª_cﬁumns_3way
(
a
, 
b
, &
Æl_cﬁumns
) < 0) {

691 c⁄° 
ovsdb_row
 *
tmp
 = 
a
;

692 
a
 = 
b
;

693 
b
 = 
tmp
;

695 
	`ovsdb_cﬁumn_£t_de°roy
(&
Æl_cﬁumns
);

697 
ödex_s
 = 
	`ovsdb_cﬁumn_£t_to_°rög
(
ödex
);

699 
	`ds_öô
(&
s
);

700 
	`ds_put_f‹m©
(&
s
, "Transaction causes multipleÑows in \"%s\"ÅableÅo "

701 "havêidítiˇ»vÆue†(", 
a
->
èbÀ
->
schema
->
«me
);

702 
	`ovsdb_row_cﬁumns_to_°rög
(
a
, 
ödex
, &
s
);

703 
	`ds_put_f‹m©
(&
s
, "Ëf‹ index o¿%s. ", 
ödex_s
);

704 
	`du∂iˇã_ödex_row__
(
ödex
, 
a
, "Fú°", &
s
);

705 
	`ds_put_c°r
(&
s
, " ");

706 
	`du∂iˇã_ödex_row__
(
ödex
, 
b
, "Sec⁄d", &
s
);

708 
	`‰ì
(
ödex_s
);

710 
îr‹
 = 
	`ovsdb_îr‹
("c⁄°øöàviﬁ©i⁄", "%s", 
	`ds_c°r
(&
s
));

711 
	`ds_de°roy
(&
s
);

712  
îr‹
;

713 
	}
}

715 
ovsdb_îr‹
 * 
WARN_UNUSED_RESULT


716 
	$check_ödex_uniquíess
(
ovsdb_txn
 *
txn
 
OVS_UNUSED
,

717 
ovsdb_txn_row
 *
txn_row
)

719 
ovsdb_txn_èbÀ
 *
txn_èbÀ
 = 
txn_row
->
èbÀ
->txn_table;

720 
ovsdb_èbÀ
 *
èbÀ
 = 
txn_row
->table;

721 
ovsdb_row
 *
row
 = 
txn_row
->
√w
;

722 
size_t
 
i
;

724 i‡(!
row
) {

725  
NULL
;

728 
i
 = 0; i < 
èbÀ
->
schema
->
n_ödexes
; i++) {

729 c⁄° 
ovsdb_cﬁumn_£t
 *
ödex
 = &
èbÀ
->
schema
->
ödexes
[
i
];

730 
ovsdb_row
 *
úow
;

731 
uöt32_t
 
hash
;

733 
hash
 = 
	`ovsdb_row_hash_cﬁumns
(
row
, 
ödex
, 0);

734 
úow
 = 
	`ovsdb_ödex_£¨ch
(&
txn_èbÀ
->
txn_ödexes
[
i
], 
row
, i, 
hash
);

735 i‡(
úow
) {

736  
	`du∂iˇã_ödex_row
(
ödex
, 
úow
, 
row
);

739 
úow
 = 
	`ovsdb_ödex_£¨ch
(&
èbÀ
->
ödexes
[
i
], 
row
, i, 
hash
);

740 i‡(
úow
 && !úow->
txn_row
) {

741  
	`du∂iˇã_ödex_row
(
ödex
, 
úow
, 
row
);

744 
	`hm≠_ö£π
(&
txn_èbÀ
->
txn_ödexes
[
i
],

745 
	`ovsdb_row_gë_ödex_node
(
row
, 
i
), 
hash
);

748  
NULL
;

749 
	}
}

751 
ovsdb_îr‹
 *

752 
	$ovsdb_txn_commô
(
ovsdb_txn
 *
txn
, 
boﬁ
 
duøbÀ
)

754 
ovsdb_ª∂iˇ
 *
ª∂iˇ
;

755 
ovsdb_îr‹
 *
îr‹
;

759 
îr‹
 = 
	`f‹_óch_txn_row
(
txn
, 
dëîmöe_ch™ges
);

760 i‡(
îr‹
) {

761  
	`OVSDB_WRAP_BUG
("ˇn'àh≠≥n", 
îr‹
);

763 i‡(
	`li°_is_em±y
(&
txn
->
txn_èbÀs
)) {

764 
	`ovsdb_txn_ab‹t
(
txn
);

765  
NULL
;

769 
îr‹
 = 
	`upd©e_ªf_cou¡s
(
txn
);

770 i‡(
îr‹
) {

771 
	`ovsdb_txn_ab‹t
(
txn
);

772  
îr‹
;

776 
îr‹
 = 
	`f‹_óch_txn_row
(
txn
, 
cﬁÀ˘_g¨bage
);

777 i‡(
îr‹
) {

778 
	`ovsdb_txn_ab‹t
(
txn
);

779  
	`OVSDB_WRAP_BUG
("ˇn'àh≠≥n", 
îr‹
);

783 
îr‹
 = 
	`check_max_rows
(
txn
);

784 i‡(
îr‹
) {

785 
	`ovsdb_txn_ab‹t
(
txn
);

786  
îr‹
;

791 
îr‹
 = 
	`f‹_óch_txn_row
(
txn
, 
as£ss_wók_ªfs
);

792 i‡(
îr‹
) {

793 
	`ovsdb_txn_ab‹t
(
txn
);

794  
îr‹
;

798 
îr‹
 = 
	`f‹_óch_txn_row
(
txn
, 
check_ödex_uniquíess
);

799 i‡(
îr‹
) {

800 
	`ovsdb_txn_ab‹t
(
txn
);

801  
îr‹
;

805 
	`LIST_FOR_EACH
 (
ª∂iˇ
, 
node
, &
txn
->
db
->
ª∂iˇs
) {

806 
îr‹
 = (
ª∂iˇ
->
˛ass
->
commô
)‘ïliˇ, 
txn
, 
duøbÀ
);

807 i‡(
îr‹
) {

810 
	`as£π
(&
ª∂iˇ
->
node
 =
txn
->
db
->
ª∂iˇs
.
√xt
);

812 
	`ovsdb_txn_ab‹t
(
txn
);

813  
îr‹
;

818 
txn
->
db
->
run_åiggîs
 = 
åue
;

819 
	`ovsdb_îr‹_as£π
(
	`f‹_óch_txn_row
(
txn
, 
ovsdb_txn_row_commô
));

820 
	`ovsdb_txn_‰ì
(
txn
);

822  
NULL
;

823 
	}
}

826 
	$ovsdb_txn_f‹_óch_ch™ge
(c⁄° 
ovsdb_txn
 *
txn
,

827 
ovsdb_txn_row_cb_func
 *
cb
, *
aux
)

829 
ovsdb_txn_èbÀ
 *
t
;

830 
ovsdb_txn_row
 *
r
;

832 
	`LIST_FOR_EACH
 (
t
, 
node
, &
txn
->
txn_èbÀs
) {

833 
	`HMAP_FOR_EACH
 (
r
, 
hm≠_node
, &
t
->
txn_rows
) {

834 i‡((
r
->
ﬁd
 ||Ñ->
√w
Ë&& !
	`cb
‘->ﬁd,Ñ->√w,Ñ->
ch™ged
, 
aux
)) {

839 
	}
}

841 
ovsdb_txn_èbÀ
 *

842 
	$ovsdb_txn_¸óã_txn_èbÀ
(
ovsdb_txn
 *
txn
, 
ovsdb_èbÀ
 *
èbÀ
)

844 i‡(!
èbÀ
->
txn_èbÀ
) {

845 
ovsdb_txn_èbÀ
 *
txn_èbÀ
;

846 
size_t
 
i
;

848 
èbÀ
->
txn_èbÀ
 =Åxn_èbÀ = 
	`xmÆloc
( *table->txn_table);

849 
txn_èbÀ
->
èbÀ
 =Åable;

850 
	`hm≠_öô
(&
txn_èbÀ
->
txn_rows
);

851 
txn_èbÀ
->
£rül
 = serial - 1;

852 
txn_èbÀ
->
txn_ödexes
 = 
	`xmÆloc
(
èbÀ
->
schema
->
n_ödexes


853 *  *
txn_èbÀ
->
txn_ödexes
);

854 
i
 = 0; i < 
èbÀ
->
schema
->
n_ödexes
; i++) {

855 
	`hm≠_öô
(&
txn_èbÀ
->
txn_ödexes
[
i
]);

857 
	`li°_push_back
(&
txn
->
txn_èbÀs
, &
txn_èbÀ
->
node
);

859  
èbÀ
->
txn_èbÀ
;

860 
	}
}

862 
ovsdb_txn_row
 *

863 
	$ovsdb_txn_row_¸óã
(
ovsdb_txn
 *
txn
, 
ovsdb_èbÀ
 *
èbÀ
,

864 c⁄° 
ovsdb_row
 *
ﬁd_
, ovsdb_row *
√w
)

866 c⁄° 
ovsdb_row
 *
row
 = 
ﬁd_
 ? old_ : 
√w
;

867 
ovsdb_row
 *
ﬁd
 = 
	`CONST_CAST
(ovsdb_row *, 
ﬁd_
);

868 
size_t
 
n_cﬁumns
 = 
	`shash_cou¡
(&
èbÀ
->
schema
->
cﬁumns
);

869 
ovsdb_txn_èbÀ
 *
txn_èbÀ
;

870 
ovsdb_txn_row
 *
txn_row
;

872 
txn_row
 = 
	`xzÆloc
(
	`off£tof
(
ovsdb_txn_row
, 
ch™ged
)

873 + 
	`bôm≠_n_byãs
(
n_cﬁumns
));

874 
txn_row
->
uuid
 = *
	`ovsdb_row_gë_uuid
(
row
);

875 
txn_row
->
èbÀ
 = 
row
->table;

876 
txn_row
->
ﬁd
 = old;

877 
txn_row
->
√w
 =Çew;

878 
txn_row
->
n_ªfs
 = 
ﬁd
 ? old->n_refs : 0;

879 
txn_row
->
£rül
 = serial - 1;

881 i‡(
ﬁd
) {

882 
ﬁd
->
txn_row
 =Åxn_row;

884 i‡(
√w
) {

885 
√w
->
txn_row
 =Åxn_row;

888 
txn_èbÀ
 = 
	`ovsdb_txn_¸óã_txn_èbÀ
(
txn
, 
èbÀ
);

889 
	`hm≠_ö£π
(&
txn_èbÀ
->
txn_rows
, &
txn_row
->
hm≠_node
,

890 
	`ovsdb_row_hash
(
ﬁd
 ? old : 
√w
));

892  
txn_row
;

893 
	}
}

895 
ovsdb_row
 *

896 
	$ovsdb_txn_row_modify
(
ovsdb_txn
 *
txn
, c⁄° 
ovsdb_row
 *
ro_row_
)

898 
ovsdb_row
 *
ro_row
 = 
	`CONST_CAST
(ovsdb_row *, 
ro_row_
);

900 i‡(
ro_row
->
txn_row
) {

901 
	`as£π
(
ro_row
 =ro_row->
txn_row
->
√w
);

902  
ro_row
;

904 
ovsdb_èbÀ
 *
èbÀ
 = 
ro_row
->table;

905 
ovsdb_row
 *
rw_row
;

907 
rw_row
 = 
	`ovsdb_row_˛⁄e
(
ro_row
);

908 
rw_row
->
n_ªfs
 = 
ro_row
->n_refs;

909 
	`uuid_gíî©e
(
	`ovsdb_row_gë_vîsi⁄_rw
(
rw_row
));

910 
	`ovsdb_txn_row_¸óã
(
txn
, 
èbÀ
, 
ro_row
, 
rw_row
);

911 
	`hm≠_ª∂a˚
(&
èbÀ
->
rows
, &
ro_row
->
hm≠_node
, &
rw_row
->hmap_node);

913  
rw_row
;

915 
	}
}

918 
	$ovsdb_txn_row_ö£π
(
ovsdb_txn
 *
txn
, 
ovsdb_row
 *
row
)

920 
uöt32_t
 
hash
 = 
	`ovsdb_row_hash
(
row
);

921 
ovsdb_èbÀ
 *
èbÀ
 = 
row
->table;

923 
	`uuid_gíî©e
(
	`ovsdb_row_gë_vîsi⁄_rw
(
row
));

925 
	`ovsdb_txn_row_¸óã
(
txn
, 
èbÀ
, 
NULL
, 
row
);

926 
	`hm≠_ö£π
(&
èbÀ
->
rows
, &
row
->
hm≠_node
, 
hash
);

927 
	}
}

932 
	$ovsdb_txn_row_dñëe
(
ovsdb_txn
 *
txn
, c⁄° 
ovsdb_row
 *
row_
)

934 
ovsdb_row
 *
row
 = 
	`CONST_CAST
(ovsdb_row *, 
row_
);

935 
ovsdb_èbÀ
 *
èbÀ
 = 
row
->table;

936 
ovsdb_txn_row
 *
txn_row
 = 
row
->txn_row;

938 
	`hm≠_ªmove
(&
èbÀ
->
rows
, &
row
->
hm≠_node
);

940 i‡(!
txn_row
) {

941 
	`ovsdb_txn_row_¸óã
(
txn
, 
èbÀ
, 
row
, 
NULL
);

943 
	`as£π
(
txn_row
->
√w
 =
row
);

944 i‡(
txn_row
->
ﬁd
) {

945 
txn_row
->
√w
 = 
NULL
;

947 
	`hm≠_ªmove
(&
èbÀ
->
txn_èbÀ
->
txn_rows
, &
txn_row
->
hm≠_node
);

948 
	`‰ì
(
txn_row
);

950 
	`ovsdb_row_de°roy
(
row
);

952 
	}
}

955 
	$ovsdb_txn_add_commít
(
ovsdb_txn
 *
txn
, c⁄° *
s
)

957 i‡(
txn
->
commít
.
Àngth
) {

958 
	`ds_put_ch¨
(&
txn
->
commít
, '\n');

960 
	`ds_put_c°r
(&
txn
->
commít
, 
s
);

961 
	}
}

964 
	$ovsdb_txn_gë_commít
(c⁄° 
ovsdb_txn
 *
txn
)

966  
txn
->
commít
.
Àngth
 ? 
	`ds_c°r_ro
(&txn->commítË: 
NULL
;

967 
	}
}

970 
	$ovsdb_txn_row_¥e‰ì
(
ovsdb_txn_row
 *
txn_row
)

972 
ovsdb_txn_èbÀ
 *
txn_èbÀ
 = 
txn_row
->
èbÀ
->txn_table;

974 
txn_èbÀ
->
n_¥o˚s£d
--;

975 
	`hm≠_ªmove
(&
txn_èbÀ
->
txn_rows
, &
txn_row
->
hm≠_node
);

977 i‡(
txn_row
->
ﬁd
) {

978 
txn_row
->
ﬁd
->txn_row = 
NULL
;

980 i‡(
txn_row
->
√w
) {

981 
txn_row
->
√w
->txn_row = 
NULL
;

983 
	}
}

986 
	$ovsdb_txn_èbÀ_de°roy
(
ovsdb_txn_èbÀ
 *
txn_èbÀ
)

988 
size_t
 
i
;

990 
	`as£π
(
	`hm≠_is_em±y
(&
txn_èbÀ
->
txn_rows
));

992 
i
 = 0; i < 
txn_èbÀ
->
èbÀ
->
schema
->
n_ödexes
; i++) {

993 
	`hm≠_de°roy
(&
txn_èbÀ
->
txn_ödexes
[
i
]);

995 
	`‰ì
(
txn_èbÀ
->
txn_ödexes
);

997 
txn_èbÀ
->
èbÀ
->txn_èbÀ = 
NULL
;

998 
	`hm≠_de°roy
(&
txn_èbÀ
->
txn_rows
);

999 
	`li°_ªmove
(&
txn_èbÀ
->
node
);

1000 
	`‰ì
(
txn_èbÀ
);

1001 
	}
}

1017 
ovsdb_îr‹
 * 
WARN_UNUSED_RESULT


1018 
f‹_óch_txn_row
(
ovsdb_txn
 *
txn
,

1019 
ovsdb_îr‹
 *(*
cb
)(
ovsdb_txn
 *,

1020 
ovsdb_txn_row
 *))

1022 
boﬁ
 
	g™y_w‹k
;

1024 
	g£rül
++;

1027 
ovsdb_txn_èbÀ
 *
	gt
, *
	g√xt_txn_èbÀ
;

1029 
	g™y_w‹k
 = 
Ál£
;

1030 
LIST_FOR_EACH_SAFE
 (
t
, 
√xt_txn_èbÀ
, 
node
, &
txn
->
txn_èbÀs
) {

1031 i‡(
	gt
->
	g£rül
 !
£rül
) {

1032 
t
->
£rül
 = serial;

1033 
	gt
->
	gn_¥o˚s£d
 = 0;

1036 
	gt
->
	gn_¥o˚s£d
 < 
hm≠_cou¡
(&
t
->
txn_rows
)) {

1037 
ovsdb_txn_row
 *
	gr
, *
	g√xt_txn_row
;

1039 
HMAP_FOR_EACH_SAFE
 (
r
, 
√xt_txn_row
, 
hm≠_node
, &
t
->
txn_rows
) {

1040 i‡(
	gr
->
	g£rül
 !
£rül
) {

1041 
ovsdb_îr‹
 *
îr‹
;

1043 
	gr
->
	g£rül
 = 
£rül
;

1044 
	gt
->
	gn_¥o˚s£d
++;

1045 
	g™y_w‹k
 = 
åue
;

1047 
	gîr‹
 = 
cb
(
txn
, 
r
);

1048 i‡(
	gîr‹
) {

1049  
	gîr‹
;

1054 i‡(
hm≠_is_em±y
(&
t
->
txn_rows
)) {

1056 
ovsdb_txn_èbÀ_de°roy
(
t
);

1059 } 
	g™y_w‹k
);

1061  
	gNULL
;

	@/home/lsch/mytest/openvswitch-1.9.0/ovsdb/transaction.h

16 #i‚de‡
OVSDB_TRANSACTION_H


17 
	#OVSDB_TRANSACTION_H
 1

	)

19 
	~<°dboﬁ.h
>

20 
	~"compûî.h
"

22 
	gjs⁄
;

23 
	govsdb
;

24 
	govsdb_èbÀ
;

25 
	guuid
;

27 
ovsdb_txn
 *
ovsdb_txn_¸óã
(
ovsdb
 *);

28 
ovsdb_txn_ab‹t
(
ovsdb_txn
 *);

29 
ovsdb_îr‹
 *
	$ovsdb_txn_commô
(
ovsdb_txn
 *, 
boﬁ
 
duøbÀ
)

30 
WARN_UNUSED_RESULT
;

32 
ovsdb_row
 *
	`ovsdb_txn_row_modify
(
ovsdb_txn
 *,

33 c⁄° 
ovsdb_row
 *);

34 
	`ovsdb_txn_row_ö£π
(
ovsdb_txn
 *, 
ovsdb_row
 *);

35 
	`ovsdb_txn_row_dñëe
(
ovsdb_txn
 *, c⁄° 
ovsdb_row
 *);

37 
boﬁ
 
	tovsdb_txn_row_cb_func
(c⁄° 
	tovsdb_row
 *
	tﬁd
,

38 c⁄° 
	tovsdb_row
 *
	t√w
,

39 c⁄° *
	tch™ged
,

40 *
	taux
);

41 
	`ovsdb_txn_f‹_óch_ch™ge
(c⁄° 
ovsdb_txn
 *,

42 
ovsdb_txn_row_cb_func
 *, *
aux
);

44 
	`ovsdb_txn_add_commít
(
ovsdb_txn
 *, const *);

45 c⁄° *
	`ovsdb_txn_gë_commít
(c⁄° 
ovsdb_txn
 *);

	@/home/lsch/mytest/openvswitch-1.9.0/ovsdb/trigger.c

16 
	~<c⁄fig.h
>

18 
	~"åiggî.h
"

20 
	~<as£π.h
>

21 
	~<limôs.h
>

23 
	~"js⁄.h
"

24 
	~"js⁄Ωc.h
"

25 
	~"ovsdb.h
"

26 
	~"pﬁl-lo›.h
"

27 
	~"£rvî.h
"

29 
boﬁ
 
ovsdb_åiggî_åy
(
ovsdb_åiggî
 *, 
now
);

30 
ovsdb_åiggî_com∂ëe
(
ovsdb_åiggî
 *);

33 
	$ovsdb_åiggî_öô
(
ovsdb_£ssi⁄
 *
£ssi⁄
, 
ovsdb
 *
db
,

34 
ovsdb_åiggî
 *
åiggî
,

35 
js⁄
 *
ªque°
, 
now
)

37 
åiggî
->
£ssi⁄
 = session;

38 
åiggî
->
db
 = db;

39 
	`li°_push_back
(&
åiggî
->
db
->
åiggîs
, &åiggî->
node
);

40 
åiggî
->
ªque°
 =Ñequest;

41 
åiggî
->
ªsu…
 = 
NULL
;

42 
åiggî
->
¸óãd
 = 
now
;

43 
åiggî
->
timeout_m£c
 = 
LLONG_MAX
;

44 
	`ovsdb_åiggî_åy
(
åiggî
, 
now
);

45 
	}
}

48 
	$ovsdb_åiggî_de°roy
(
ovsdb_åiggî
 *
åiggî
)

50 
	`li°_ªmove
(&
åiggî
->
node
);

51 
	`js⁄_de°roy
(
åiggî
->
ªque°
);

52 
	`js⁄_de°roy
(
åiggî
->
ªsu…
);

53 
	}
}

55 
boﬁ


56 
	$ovsdb_åiggî_is_com∂ëe
(c⁄° 
ovsdb_åiggî
 *
åiggî
)

58  
åiggî
->
ªsu…
 !
NULL
;

59 
	}
}

61 
js⁄
 *

62 
	$ovsdb_åiggî_°ól_ªsu…
(
ovsdb_åiggî
 *
åiggî
)

64 
js⁄
 *
ªsu…
 = 
åiggî
->result;

65 
åiggî
->
ªsu…
 = 
NULL
;

66  
ªsu…
;

67 
	}
}

70 
	$ovsdb_åiggî_run
(
ovsdb
 *
db
, 
now
)

72 
ovsdb_åiggî
 *
t
, *
√xt
;

73 
boﬁ
 
run_åiggîs
;

75 
run_åiggîs
 = 
db
->run_triggers;

76 
db
->
run_åiggîs
 = 
Ál£
;

77 
	`LIST_FOR_EACH_SAFE
 (
t
, 
√xt
, 
node
, &
db
->
åiggîs
) {

78 i‡(
run_åiggîs
 || 
now
 - 
t
->
¸óãd
 >t->
timeout_m£c
) {

79 
	`ovsdb_åiggî_åy
(
t
, 
now
);

82 
	}
}

85 
	$ovsdb_åiggî_waô
(
ovsdb
 *
db
, 
now
)

87 i‡(
db
->
run_åiggîs
) {

88 
	`pﬁl_immedüã_wake
();

90 
dódlöe
 = 
LLONG_MAX
;

91 
ovsdb_åiggî
 *
t
;

93 
	`LIST_FOR_EACH
 (
t
, 
node
, &
db
->
åiggîs
) {

94 i‡(
t
->
¸óãd
 < 
LLONG_MAX
 -Å->
timeout_m£c
) {

95 
t_dódlöe
 = 
t
->
¸óãd
 +Å->
timeout_m£c
;

96 i‡(
dódlöe
 > 
t_dódlöe
) {

97 
dódlöe
 = 
t_dódlöe
;

98 i‡(
now
 >
dódlöe
) {

105 i‡(
dódlöe
 < 
LLONG_MAX
) {

106 
	`pﬁl_timî_waô_u¡û
(
dódlöe
);

109 
	}
}

111 
boﬁ


112 
	$ovsdb_åiggî_åy
(
ovsdb_åiggî
 *
t
, 
now
)

114 
t
->
ªsu…
 = 
	`ovsdb_execuã
—->
db
,Å->
£ssi⁄
,

115 
t
->
ªque°
, 
now
 -Å->
¸óãd
, &t->
timeout_m£c
);

116 i‡(
t
->
ªsu…
) {

117 
	`ovsdb_åiggî_com∂ëe
(
t
);

118  
åue
;

120  
Ál£
;

122 
	}
}

125 
	$ovsdb_åiggî_com∂ëe
(
ovsdb_åiggî
 *
t
)

127 
	`as£π
(
t
->
ªsu…
 !
NULL
);

128 
	`li°_ªmove
(&
t
->
node
);

129 
	`li°_push_back
(&
t
->
£ssi⁄
->
com∂ëi⁄s
, &t->
node
);

130 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/ovsdb/trigger.h

16 #i‚de‡
OVSDB_TRIGGER_H


17 
	#OVSDB_TRIGGER_H
 1

	)

19 
	~"li°.h
"

21 
	govsdb
;

23 
	sovsdb_åiggî
 {

24 
ovsdb_£ssi⁄
 *
	m£ssi⁄
;

25 
ovsdb
 *
	mdb
;

26 
li°
 
	mnode
;

28 
js⁄
 *
	mªque°
;

29 
js⁄
 *
	mªsu…
;

30 
	m¸óãd
;

31 
	mtimeout_m£c
;

34 
ovsdb_åiggî_öô
(
ovsdb_£ssi⁄
 *, 
ovsdb
 *,

35 
ovsdb_åiggî
 *,

36 
js⁄
 *
ªque°
, 
now
);

37 
ovsdb_åiggî_de°roy
(
ovsdb_åiggî
 *);

39 
boﬁ
 
ovsdb_åiggî_is_com∂ëe
(c⁄° 
ovsdb_åiggî
 *);

40 
js⁄
 *
ovsdb_åiggî_°ól_ªsu…
(
ovsdb_åiggî
 *);

42 
ovsdb_åiggî_run
(
ovsdb
 *, 
now
);

43 
ovsdb_åiggî_waô
(
ovsdb
 *, 
now
);

	@/home/lsch/mytest/openvswitch-1.9.0/tests/idltest.c

3 
	~<c⁄fig.h
>

4 
	~"ã°s/id…e°.h
"

5 
	~<as£π.h
>

6 
	~<limôs.h
>

7 
	~"ovsdb-d©a.h
"

8 
	~"ovsdb-îr‹.h
"

10 #ifde‡
__CHECKER__


12 íum { 
	msizeof_boﬁ
 = 1 };

14 íum { 
	msizeof_boﬁ
 = (
boﬁ
) };

17 
boﬁ
 
	göôed
;

20 
id…e°_lök1
 *

21 
	$id…e°_lök1_ˇ°
(c⁄° 
ovsdb_idl_row
 *
row
)

23  
row
 ? 
	`CONTAINER_OF
‘ow, 
id…e°_lök1
, 
hódî_
Ë: 
NULL
;

24 
	}
}

26 
id…e°_lök2
 *

27 
	$id…e°_lök2_ˇ°
(c⁄° 
ovsdb_idl_row
 *
row
)

29  
row
 ? 
	`CONTAINER_OF
‘ow, 
id…e°_lök2
, 
hódî_
Ë: 
NULL
;

30 
	}
}

32 
id…e°_sim∂e
 *

33 
	$id…e°_sim∂e_ˇ°
(c⁄° 
ovsdb_idl_row
 *
row
)

35  
row
 ? 
	`CONTAINER_OF
‘ow, 
id…e°_sim∂e
, 
hódî_
Ë: 
NULL
;

36 
	}
}

41 
	$id…e°_lök1_∑r£_i
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

43 
id…e°_lök1
 *
row
 = 
	`id…e°_lök1_ˇ°
(
row_
);

45 
	`as£π
(
öôed
);

46 i‡(
d©um
->
n
 >= 1) {

47 
row
->
i
 = 
d©um
->
keys
[0].
öãgî
;

49 
row
->
i
 = 0;

51 
	}
}

54 
	$id…e°_lök1_∑r£_k
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

56 
id…e°_lök1
 *
row
 = 
	`id…e°_lök1_ˇ°
(
row_
);

58 
	`as£π
(
öôed
);

59 i‡(
d©um
->
n
 >= 1) {

60 
row
->
k
 = 
	`id…e°_lök1_ˇ°
(
	`ovsdb_idl_gë_row_¨c
(
row_
, &
id…e°_èbÀ_˛as£s
[
IDLTEST_TABLE_LINK1
], &
d©um
->
keys
[0].
uuid
));

62 
row
->
k
 = 
NULL
;

64 
	}
}

67 
	$id…e°_lök1_∑r£_ka
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

69 
id…e°_lök1
 *
row
 = 
	`id…e°_lök1_ˇ°
(
row_
);

70 
size_t
 
i
;

72 
	`as£π
(
öôed
);

73 
row
->
ka
 = 
NULL
;

74 
row
->
n_ka
 = 0;

75 
i
 = 0; i < 
d©um
->
n
; i++) {

76 
id…e°_lök1
 *
keyRow
 = 
	`id…e°_lök1_ˇ°
(
	`ovsdb_idl_gë_row_¨c
(
row_
, &
id…e°_èbÀ_˛as£s
[
IDLTEST_TABLE_LINK1
], &
d©um
->
keys
[
i
].
uuid
));

77 i‡(
keyRow
) {

78 i‡(!
row
->
n_ka
) {

79 
row
->
ka
 = 
	`xmÆloc
(
d©um
->
n
 *  *row->ka);

81 
row
->
ka
[row->
n_ka
] = 
keyRow
;

82 
row
->
n_ka
++;

85 
	}
}

88 
	$id…e°_lök1_∑r£_l2
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

90 
id…e°_lök1
 *
row
 = 
	`id…e°_lök1_ˇ°
(
row_
);

92 
	`as£π
(
öôed
);

93 i‡(
d©um
->
n
 >= 1) {

94 
row
->
l2
 = 
	`id…e°_lök2_ˇ°
(
	`ovsdb_idl_gë_row_¨c
(
row_
, &
id…e°_èbÀ_˛as£s
[
IDLTEST_TABLE_LINK2
], &
d©um
->
keys
[0].
uuid
));

96 
row
->
l2
 = 
NULL
;

98 
	}
}

101 
	$id…e°_lök1_u≈¨£_i
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

104 
	}
}

107 
	$id…e°_lök1_u≈¨£_k
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

110 
	}
}

113 
	$id…e°_lök1_u≈¨£_ka
(
ovsdb_idl_row
 *
row_
)

115 
id…e°_lök1
 *
row
 = 
	`id…e°_lök1_ˇ°
(
row_
);

117 
	`as£π
(
öôed
);

118 
	`‰ì
(
row
->
ka
);

119 
	}
}

122 
	$id…e°_lök1_u≈¨£_l2
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

125 
	}
}

128 
	$id…e°_lök1_öô__
(
ovsdb_idl_row
 *
row
)

130 
	`id…e°_lök1_öô
(
	`id…e°_lök1_ˇ°
(
row
));

131 
	}
}

134 
	$id…e°_lök1_öô
(
id…e°_lök1
 *
row
)

136 
	`mem£t
(
row
, 0,  *row);

137 
	}
}

139 c⁄° 
id…e°_lök1
 *

140 
	$id…e°_lök1_fú°
(c⁄° 
ovsdb_idl
 *
idl
)

142  
	`id…e°_lök1_ˇ°
(
	`ovsdb_idl_fú°_row
(
idl
, &
id…e°_èbÀ_˛as£s
[
IDLTEST_TABLE_LINK1
]));

143 
	}
}

145 c⁄° 
id…e°_lök1
 *

146 
	$id…e°_lök1_√xt
(c⁄° 
id…e°_lök1
 *
row
)

148  
	`id…e°_lök1_ˇ°
(
	`ovsdb_idl_√xt_row
(&
row
->
hódî_
));

149 
	}
}

152 
	$id…e°_lök1_dñëe
(c⁄° 
id…e°_lök1
 *
row
)

154 
	`ovsdb_idl_txn_dñëe
(&
row
->
hódî_
);

155 
	}
}

157 
id…e°_lök1
 *

158 
	$id…e°_lök1_ö£π
(
ovsdb_idl_txn
 *
txn
)

160  
	`id…e°_lök1_ˇ°
(
	`ovsdb_idl_txn_ö£π
(
txn
, &
id…e°_èbÀ_˛as£s
[
IDLTEST_TABLE_LINK1
], 
NULL
));

161 
	}
}

165 
	$id…e°_lök1_vîify_i
(c⁄° 
id…e°_lök1
 *
row
)

167 
	`as£π
(
öôed
);

168 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
id…e°_lök1_cﬁumns
[
IDLTEST_LINK1_COL_I
]);

169 
	}
}

172 
	$id…e°_lök1_vîify_k
(c⁄° 
id…e°_lök1
 *
row
)

174 
	`as£π
(
öôed
);

175 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
id…e°_lök1_cﬁumns
[
IDLTEST_LINK1_COL_K
]);

176 
	}
}

179 
	$id…e°_lök1_vîify_ka
(c⁄° 
id…e°_lök1
 *
row
)

181 
	`as£π
(
öôed
);

182 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
id…e°_lök1_cﬁumns
[
IDLTEST_LINK1_COL_KA
]);

183 
	}
}

186 
	$id…e°_lök1_vîify_l2
(c⁄° 
id…e°_lök1
 *
row
)

188 
	`as£π
(
öôed
);

189 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
id…e°_lök1_cﬁumns
[
IDLTEST_LINK1_COL_L2
]);

190 
	}
}

207 c⁄° 
ovsdb_d©um
 *

208 
	$id…e°_lök1_gë_i
(c⁄° 
id…e°_lök1
 *
row
,

209 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

211 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_INTEGER
);

212  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
id…e°_lök1_cﬁ_i
);

213 
	}
}

230 c⁄° 
ovsdb_d©um
 *

231 
	$id…e°_lök1_gë_k
(c⁄° 
id…e°_lök1
 *
row
,

232 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

234 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_UUID
);

235  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
id…e°_lök1_cﬁ_k
);

236 
	}
}

253 c⁄° 
ovsdb_d©um
 *

254 
	$id…e°_lök1_gë_ka
(c⁄° 
id…e°_lök1
 *
row
,

255 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

257 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_UUID
);

258  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
id…e°_lök1_cﬁ_ka
);

259 
	}
}

276 c⁄° 
ovsdb_d©um
 *

277 
	$id…e°_lök1_gë_l2
(c⁄° 
id…e°_lök1
 *
row
,

278 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

280 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_UUID
);

281  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
id…e°_lök1_cﬁ_l2
);

282 
	}
}

285 
	$id…e°_lök1_£t_i
(c⁄° 
id…e°_lök1
 *
row
, 
öt64_t
 
i
)

287 
ovsdb_d©um
 
d©um
;

289 
	`as£π
(
öôed
);

290 
d©um
.
n
 = 1;

291 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

292 
d©um
.
keys
[0].
öãgî
 = 
i
;

293 
d©um
.
vÆues
 = 
NULL
;

294 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
id…e°_lök1_cﬁumns
[
IDLTEST_LINK1_COL_I
], &
d©um
);

295 
	}
}

298 
	$id…e°_lök1_£t_k
(c⁄° 
id…e°_lök1
 *
row
, c⁄° id…e°_lök1 *
k
)

300 
ovsdb_d©um
 
d©um
;

302 
	`as£π
(
öôed
);

303 
d©um
.
n
 = 1;

304 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

305 
d©um
.
keys
[0].
uuid
 = 
k
->
hódî_
.uuid;

306 
d©um
.
vÆues
 = 
NULL
;

307 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
id…e°_lök1_cﬁumns
[
IDLTEST_LINK1_COL_K
], &
d©um
);

308 
	}
}

311 
	$id…e°_lök1_£t_ka
(c⁄° 
id…e°_lök1
 *
row
, id…e°_lök1 **
ka
, 
size_t
 
n_ka
)

313 
ovsdb_d©um
 
d©um
;

314 
size_t
 
i
;

316 
	`as£π
(
öôed
);

317 
d©um
.
n
 = 
n_ka
;

318 
d©um
.
keys
 = 
	`xmÆloc
(
n_ka
 *  *datum.keys);

319 
d©um
.
vÆues
 = 
NULL
;

320 
i
 = 0; i < 
n_ka
; i++) {

321 
d©um
.
keys
[
i
].
uuid
 = 
ka
[i]->
hódî_
.uuid;

323 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_UUID
, 
OVSDB_TYPE_VOID
);

324 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
id…e°_lök1_cﬁumns
[
IDLTEST_LINK1_COL_KA
], &
d©um
);

325 
	}
}

328 
	$id…e°_lök1_£t_l2
(c⁄° 
id…e°_lök1
 *
row
, c⁄° 
id…e°_lök2
 *
l2
)

330 
ovsdb_d©um
 
d©um
;

332 
	`as£π
(
öôed
);

333 i‡(
l2
) {

334 
d©um
.
n
 = 1;

335 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

336 
d©um
.
keys
[0].
uuid
 = 
l2
->
hódî_
.uuid;

338 
d©um
.
n
 = 0;

339 
d©um
.
keys
 = 
NULL
;

341 
d©um
.
vÆues
 = 
NULL
;

342 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
id…e°_lök1_cﬁumns
[
IDLTEST_LINK1_COL_L2
], &
d©um
);

343 
	}
}

345 
ovsdb_idl_cﬁumn
 
	gid…e°_lök1_cﬁumns
[
IDLTEST_LINK1_N_COLUMNS
];

348 
	$id…e°_lök1_cﬁumns_öô
()

350 
ovsdb_idl_cﬁumn
 *
c
;

353 
c
 = &
id…e°_lök1_cﬁ_i
;

354 
c
->
«me
 = "i";

355 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_INTEGER
);

356 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

357 
c
->
ty≥
.
n_mö
 = 1;

358 
c
->
ty≥
.
n_max
 = 1;

359 
c
->
muèbÀ
 = 
åue
;

360 
c
->
∑r£
 = 
id…e°_lök1_∑r£_i
;

361 
c
->
u≈¨£
 = 
id…e°_lök1_u≈¨£_i
;

364 
c
 = &
id…e°_lök1_cﬁ_k
;

365 
c
->
«me
 = "k";

366 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_UUID
);

367 
c
->
ty≥
.
key
.
u
.
uuid
.
ªfTabÀName
 = "link1";

368 
c
->
ty≥
.
key
.
u
.
uuid
.
ªfTy≥
 = 
OVSDB_REF_STRONG
;

369 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

370 
c
->
ty≥
.
n_mö
 = 1;

371 
c
->
ty≥
.
n_max
 = 1;

372 
c
->
muèbÀ
 = 
åue
;

373 
c
->
∑r£
 = 
id…e°_lök1_∑r£_k
;

374 
c
->
u≈¨£
 = 
id…e°_lök1_u≈¨£_k
;

377 
c
 = &
id…e°_lök1_cﬁ_ka
;

378 
c
->
«me
 = "ka";

379 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_UUID
);

380 
c
->
ty≥
.
key
.
u
.
uuid
.
ªfTabÀName
 = "link1";

381 
c
->
ty≥
.
key
.
u
.
uuid
.
ªfTy≥
 = 
OVSDB_REF_STRONG
;

382 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

383 
c
->
ty≥
.
n_mö
 = 0;

384 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

385 
c
->
muèbÀ
 = 
åue
;

386 
c
->
∑r£
 = 
id…e°_lök1_∑r£_ka
;

387 
c
->
u≈¨£
 = 
id…e°_lök1_u≈¨£_ka
;

390 
c
 = &
id…e°_lök1_cﬁ_l2
;

391 
c
->
«me
 = "l2";

392 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_UUID
);

393 
c
->
ty≥
.
key
.
u
.
uuid
.
ªfTabÀName
 = "link2";

394 
c
->
ty≥
.
key
.
u
.
uuid
.
ªfTy≥
 = 
OVSDB_REF_STRONG
;

395 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

396 
c
->
ty≥
.
n_mö
 = 0;

397 
c
->
ty≥
.
n_max
 = 1;

398 
c
->
muèbÀ
 = 
åue
;

399 
c
->
∑r£
 = 
id…e°_lök1_∑r£_l2
;

400 
c
->
u≈¨£
 = 
id…e°_lök1_u≈¨£_l2
;

401 
	}
}

406 
	$id…e°_lök2_∑r£_i
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

408 
id…e°_lök2
 *
row
 = 
	`id…e°_lök2_ˇ°
(
row_
);

410 
	`as£π
(
öôed
);

411 i‡(
d©um
->
n
 >= 1) {

412 
row
->
i
 = 
d©um
->
keys
[0].
öãgî
;

414 
row
->
i
 = 0;

416 
	}
}

419 
	$id…e°_lök2_∑r£_l1
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

421 
id…e°_lök2
 *
row
 = 
	`id…e°_lök2_ˇ°
(
row_
);

423 
	`as£π
(
öôed
);

424 i‡(
d©um
->
n
 >= 1) {

425 
row
->
l1
 = 
	`id…e°_lök1_ˇ°
(
	`ovsdb_idl_gë_row_¨c
(
row_
, &
id…e°_èbÀ_˛as£s
[
IDLTEST_TABLE_LINK1
], &
d©um
->
keys
[0].
uuid
));

427 
row
->
l1
 = 
NULL
;

429 
	}
}

432 
	$id…e°_lök2_u≈¨£_i
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

435 
	}
}

438 
	$id…e°_lök2_u≈¨£_l1
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

441 
	}
}

444 
	$id…e°_lök2_öô__
(
ovsdb_idl_row
 *
row
)

446 
	`id…e°_lök2_öô
(
	`id…e°_lök2_ˇ°
(
row
));

447 
	}
}

450 
	$id…e°_lök2_öô
(
id…e°_lök2
 *
row
)

452 
	`mem£t
(
row
, 0,  *row);

453 
	}
}

455 c⁄° 
id…e°_lök2
 *

456 
	$id…e°_lök2_fú°
(c⁄° 
ovsdb_idl
 *
idl
)

458  
	`id…e°_lök2_ˇ°
(
	`ovsdb_idl_fú°_row
(
idl
, &
id…e°_èbÀ_˛as£s
[
IDLTEST_TABLE_LINK2
]));

459 
	}
}

461 c⁄° 
id…e°_lök2
 *

462 
	$id…e°_lök2_√xt
(c⁄° 
id…e°_lök2
 *
row
)

464  
	`id…e°_lök2_ˇ°
(
	`ovsdb_idl_√xt_row
(&
row
->
hódî_
));

465 
	}
}

468 
	$id…e°_lök2_dñëe
(c⁄° 
id…e°_lök2
 *
row
)

470 
	`ovsdb_idl_txn_dñëe
(&
row
->
hódî_
);

471 
	}
}

473 
id…e°_lök2
 *

474 
	$id…e°_lök2_ö£π
(
ovsdb_idl_txn
 *
txn
)

476  
	`id…e°_lök2_ˇ°
(
	`ovsdb_idl_txn_ö£π
(
txn
, &
id…e°_èbÀ_˛as£s
[
IDLTEST_TABLE_LINK2
], 
NULL
));

477 
	}
}

481 
	$id…e°_lök2_vîify_i
(c⁄° 
id…e°_lök2
 *
row
)

483 
	`as£π
(
öôed
);

484 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
id…e°_lök2_cﬁumns
[
IDLTEST_LINK2_COL_I
]);

485 
	}
}

488 
	$id…e°_lök2_vîify_l1
(c⁄° 
id…e°_lök2
 *
row
)

490 
	`as£π
(
öôed
);

491 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
id…e°_lök2_cﬁumns
[
IDLTEST_LINK2_COL_L1
]);

492 
	}
}

509 c⁄° 
ovsdb_d©um
 *

510 
	$id…e°_lök2_gë_i
(c⁄° 
id…e°_lök2
 *
row
,

511 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

513 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_INTEGER
);

514  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
id…e°_lök2_cﬁ_i
);

515 
	}
}

532 c⁄° 
ovsdb_d©um
 *

533 
	$id…e°_lök2_gë_l1
(c⁄° 
id…e°_lök2
 *
row
,

534 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

536 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_UUID
);

537  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
id…e°_lök2_cﬁ_l1
);

538 
	}
}

541 
	$id…e°_lök2_£t_i
(c⁄° 
id…e°_lök2
 *
row
, 
öt64_t
 
i
)

543 
ovsdb_d©um
 
d©um
;

545 
	`as£π
(
öôed
);

546 
d©um
.
n
 = 1;

547 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

548 
d©um
.
keys
[0].
öãgî
 = 
i
;

549 
d©um
.
vÆues
 = 
NULL
;

550 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
id…e°_lök2_cﬁumns
[
IDLTEST_LINK2_COL_I
], &
d©um
);

551 
	}
}

554 
	$id…e°_lök2_£t_l1
(c⁄° 
id…e°_lök2
 *
row
, c⁄° 
id…e°_lök1
 *
l1
)

556 
ovsdb_d©um
 
d©um
;

558 
	`as£π
(
öôed
);

559 i‡(
l1
) {

560 
d©um
.
n
 = 1;

561 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

562 
d©um
.
keys
[0].
uuid
 = 
l1
->
hódî_
.uuid;

564 
d©um
.
n
 = 0;

565 
d©um
.
keys
 = 
NULL
;

567 
d©um
.
vÆues
 = 
NULL
;

568 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
id…e°_lök2_cﬁumns
[
IDLTEST_LINK2_COL_L1
], &
d©um
);

569 
	}
}

571 
ovsdb_idl_cﬁumn
 
	gid…e°_lök2_cﬁumns
[
IDLTEST_LINK2_N_COLUMNS
];

574 
	$id…e°_lök2_cﬁumns_öô
()

576 
ovsdb_idl_cﬁumn
 *
c
;

579 
c
 = &
id…e°_lök2_cﬁ_i
;

580 
c
->
«me
 = "i";

581 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_INTEGER
);

582 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

583 
c
->
ty≥
.
n_mö
 = 1;

584 
c
->
ty≥
.
n_max
 = 1;

585 
c
->
muèbÀ
 = 
åue
;

586 
c
->
∑r£
 = 
id…e°_lök2_∑r£_i
;

587 
c
->
u≈¨£
 = 
id…e°_lök2_u≈¨£_i
;

590 
c
 = &
id…e°_lök2_cﬁ_l1
;

591 
c
->
«me
 = "l1";

592 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_UUID
);

593 
c
->
ty≥
.
key
.
u
.
uuid
.
ªfTabÀName
 = "link1";

594 
c
->
ty≥
.
key
.
u
.
uuid
.
ªfTy≥
 = 
OVSDB_REF_STRONG
;

595 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

596 
c
->
ty≥
.
n_mö
 = 0;

597 
c
->
ty≥
.
n_max
 = 1;

598 
c
->
muèbÀ
 = 
åue
;

599 
c
->
∑r£
 = 
id…e°_lök2_∑r£_l1
;

600 
c
->
u≈¨£
 = 
id…e°_lök2_u≈¨£_l1
;

601 
	}
}

606 
	$id…e°_sim∂e_∑r£_b
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

608 
id…e°_sim∂e
 *
row
 = 
	`id…e°_sim∂e_ˇ°
(
row_
);

610 
	`as£π
(
öôed
);

611 i‡(
d©um
->
n
 >= 1) {

612 
row
->
b
 = 
d©um
->
keys
[0].
boﬁón
;

614 
row
->
b
 = 
Ál£
;

616 
	}
}

619 
	$id…e°_sim∂e_∑r£_ba
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

621 
id…e°_sim∂e
 *
row
 = 
	`id…e°_sim∂e_ˇ°
(
row_
);

622 
size_t
 
n
 = 
	`MIN
(1, 
d©um
->n);

623 
size_t
 
i
;

625 
	`as£π
(
öôed
);

626 
row
->
ba
 = 
NULL
;

627 
row
->
n_ba
 = 0;

628 
i
 = 0; i < 
n
; i++) {

629 i‡(!
row
->
n_ba
) {

630 
row
->
ba
 = 
	`xmÆloc
(
n
 * 
sizeof_boﬁ
);

632 
row
->
ba
[row->
n_ba
] = 
d©um
->
keys
[
i
].
boﬁón
;

633 
row
->
n_ba
++;

635 
	}
}

638 
	$id…e°_sim∂e_∑r£_i
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

640 
id…e°_sim∂e
 *
row
 = 
	`id…e°_sim∂e_ˇ°
(
row_
);

642 
	`as£π
(
öôed
);

643 i‡(
d©um
->
n
 >= 1) {

644 
row
->
i
 = 
d©um
->
keys
[0].
öãgî
;

646 
row
->
i
 = 0;

648 
	}
}

651 
	$id…e°_sim∂e_∑r£_ü
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

653 
id…e°_sim∂e
 *
row
 = 
	`id…e°_sim∂e_ˇ°
(
row_
);

654 
size_t
 
i
;

656 
	`as£π
(
öôed
);

657 
row
->
ü
 = 
NULL
;

658 
row
->
n_ü
 = 0;

659 
i
 = 0; i < 
d©um
->
n
; i++) {

660 i‡(!
row
->
n_ü
) {

661 
row
->
ü
 = 
	`xmÆloc
(
d©um
->
n
 *  *row->ia);

663 
row
->
ü
[row->
n_ü
] = 
d©um
->
keys
[
i
].
öãgî
;

664 
row
->
n_ü
++;

666 
	}
}

669 
	$id…e°_sim∂e_∑r£_r
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

671 
id…e°_sim∂e
 *
row
 = 
	`id…e°_sim∂e_ˇ°
(
row_
);

673 
	`as£π
(
öôed
);

674 i‡(
d©um
->
n
 >= 1) {

675 
row
->
r
 = 
d©um
->
keys
[0].
ªÆ
;

677 
row
->
r
 = 0.0;

679 
	}
}

682 
	$id…e°_sim∂e_∑r£_ø
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

684 
id…e°_sim∂e
 *
row
 = 
	`id…e°_sim∂e_ˇ°
(
row_
);

685 
size_t
 
i
;

687 
	`as£π
(
öôed
);

688 
row
->
ø
 = 
NULL
;

689 
row
->
n_ø
 = 0;

690 
i
 = 0; i < 
d©um
->
n
; i++) {

691 i‡(!
row
->
n_ø
) {

692 
row
->
ø
 = 
	`xmÆloc
(
d©um
->
n
 *  *row->ra);

694 
row
->
ø
[row->
n_ø
] = 
d©um
->
keys
[
i
].
ªÆ
;

695 
row
->
n_ø
++;

697 
	}
}

700 
	$id…e°_sim∂e_∑r£_s
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

702 
id…e°_sim∂e
 *
row
 = 
	`id…e°_sim∂e_ˇ°
(
row_
);

704 
	`as£π
(
öôed
);

705 i‡(
d©um
->
n
 >= 1) {

706 
row
->
s
 = 
d©um
->
keys
[0].
°rög
;

708 
row
->
s
 = "";

710 
	}
}

713 
	$id…e°_sim∂e_∑r£_ß
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

715 
id…e°_sim∂e
 *
row
 = 
	`id…e°_sim∂e_ˇ°
(
row_
);

716 
size_t
 
i
;

718 
	`as£π
(
öôed
);

719 
row
->
ß
 = 
NULL
;

720 
row
->
n_ß
 = 0;

721 
i
 = 0; i < 
d©um
->
n
; i++) {

722 i‡(!
row
->
n_ß
) {

723 
row
->
ß
 = 
	`xmÆloc
(
d©um
->
n
 *  *row->sa);

725 
row
->
ß
[row->
n_ß
] = 
d©um
->
keys
[
i
].
°rög
;

726 
row
->
n_ß
++;

728 
	}
}

731 
	$id…e°_sim∂e_∑r£_u
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

733 
id…e°_sim∂e
 *
row
 = 
	`id…e°_sim∂e_ˇ°
(
row_
);

735 
	`as£π
(
öôed
);

736 i‡(
d©um
->
n
 >= 1) {

737 
row
->
u
 = 
d©um
->
keys
[0].
uuid
;

739 
	`uuid_zîo
(&
row
->
u
);

741 
	}
}

744 
	$id…e°_sim∂e_∑r£_ua
(
ovsdb_idl_row
 *
row_
, c⁄° 
ovsdb_d©um
 *
d©um
)

746 
id…e°_sim∂e
 *
row
 = 
	`id…e°_sim∂e_ˇ°
(
row_
);

747 
size_t
 
i
;

749 
	`as£π
(
öôed
);

750 
row
->
ua
 = 
NULL
;

751 
row
->
n_ua
 = 0;

752 
i
 = 0; i < 
d©um
->
n
; i++) {

753 i‡(!
row
->
n_ua
) {

754 
row
->
ua
 = 
	`xmÆloc
(
d©um
->
n
 *  *row->ua);

756 
row
->
ua
[row->
n_ua
] = 
d©um
->
keys
[
i
].
uuid
;

757 
row
->
n_ua
++;

759 
	}
}

762 
	$id…e°_sim∂e_u≈¨£_b
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

765 
	}
}

768 
	$id…e°_sim∂e_u≈¨£_ba
(
ovsdb_idl_row
 *
row_
)

770 
id…e°_sim∂e
 *
row
 = 
	`id…e°_sim∂e_ˇ°
(
row_
);

772 
	`as£π
(
öôed
);

773 
	`‰ì
(
row
->
ba
);

774 
	}
}

777 
	$id…e°_sim∂e_u≈¨£_i
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

780 
	}
}

783 
	$id…e°_sim∂e_u≈¨£_ü
(
ovsdb_idl_row
 *
row_
)

785 
id…e°_sim∂e
 *
row
 = 
	`id…e°_sim∂e_ˇ°
(
row_
);

787 
	`as£π
(
öôed
);

788 
	`‰ì
(
row
->
ü
);

789 
	}
}

792 
	$id…e°_sim∂e_u≈¨£_r
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

795 
	}
}

798 
	$id…e°_sim∂e_u≈¨£_ø
(
ovsdb_idl_row
 *
row_
)

800 
id…e°_sim∂e
 *
row
 = 
	`id…e°_sim∂e_ˇ°
(
row_
);

802 
	`as£π
(
öôed
);

803 
	`‰ì
(
row
->
ø
);

804 
	}
}

807 
	$id…e°_sim∂e_u≈¨£_s
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

810 
	}
}

813 
	$id…e°_sim∂e_u≈¨£_ß
(
ovsdb_idl_row
 *
row_
)

815 
id…e°_sim∂e
 *
row
 = 
	`id…e°_sim∂e_ˇ°
(
row_
);

817 
	`as£π
(
öôed
);

818 
	`‰ì
(
row
->
ß
);

819 
	}
}

822 
	$id…e°_sim∂e_u≈¨£_u
(
ovsdb_idl_row
 *
row
 
OVS_UNUSED
)

825 
	}
}

828 
	$id…e°_sim∂e_u≈¨£_ua
(
ovsdb_idl_row
 *
row_
)

830 
id…e°_sim∂e
 *
row
 = 
	`id…e°_sim∂e_ˇ°
(
row_
);

832 
	`as£π
(
öôed
);

833 
	`‰ì
(
row
->
ua
);

834 
	}
}

837 
	$id…e°_sim∂e_öô__
(
ovsdb_idl_row
 *
row
)

839 
	`id…e°_sim∂e_öô
(
	`id…e°_sim∂e_ˇ°
(
row
));

840 
	}
}

843 
	$id…e°_sim∂e_öô
(
id…e°_sim∂e
 *
row
)

845 
	`mem£t
(
row
, 0,  *row);

846 
	}
}

848 c⁄° 
id…e°_sim∂e
 *

849 
	$id…e°_sim∂e_fú°
(c⁄° 
ovsdb_idl
 *
idl
)

851  
	`id…e°_sim∂e_ˇ°
(
	`ovsdb_idl_fú°_row
(
idl
, &
id…e°_èbÀ_˛as£s
[
IDLTEST_TABLE_SIMPLE
]));

852 
	}
}

854 c⁄° 
id…e°_sim∂e
 *

855 
	$id…e°_sim∂e_√xt
(c⁄° 
id…e°_sim∂e
 *
row
)

857  
	`id…e°_sim∂e_ˇ°
(
	`ovsdb_idl_√xt_row
(&
row
->
hódî_
));

858 
	}
}

861 
	$id…e°_sim∂e_dñëe
(c⁄° 
id…e°_sim∂e
 *
row
)

863 
	`ovsdb_idl_txn_dñëe
(&
row
->
hódî_
);

864 
	}
}

866 
id…e°_sim∂e
 *

867 
	$id…e°_sim∂e_ö£π
(
ovsdb_idl_txn
 *
txn
)

869  
	`id…e°_sim∂e_ˇ°
(
	`ovsdb_idl_txn_ö£π
(
txn
, &
id…e°_èbÀ_˛as£s
[
IDLTEST_TABLE_SIMPLE
], 
NULL
));

870 
	}
}

874 
	$id…e°_sim∂e_vîify_b
(c⁄° 
id…e°_sim∂e
 *
row
)

876 
	`as£π
(
öôed
);

877 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_COL_B
]);

878 
	}
}

881 
	$id…e°_sim∂e_vîify_ba
(c⁄° 
id…e°_sim∂e
 *
row
)

883 
	`as£π
(
öôed
);

884 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_COL_BA
]);

885 
	}
}

888 
	$id…e°_sim∂e_vîify_i
(c⁄° 
id…e°_sim∂e
 *
row
)

890 
	`as£π
(
öôed
);

891 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_COL_I
]);

892 
	}
}

895 
	$id…e°_sim∂e_vîify_ü
(c⁄° 
id…e°_sim∂e
 *
row
)

897 
	`as£π
(
öôed
);

898 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_COL_IA
]);

899 
	}
}

902 
	$id…e°_sim∂e_vîify_r
(c⁄° 
id…e°_sim∂e
 *
row
)

904 
	`as£π
(
öôed
);

905 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_COL_R
]);

906 
	}
}

909 
	$id…e°_sim∂e_vîify_ø
(c⁄° 
id…e°_sim∂e
 *
row
)

911 
	`as£π
(
öôed
);

912 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_COL_RA
]);

913 
	}
}

916 
	$id…e°_sim∂e_vîify_s
(c⁄° 
id…e°_sim∂e
 *
row
)

918 
	`as£π
(
öôed
);

919 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_COL_S
]);

920 
	}
}

923 
	$id…e°_sim∂e_vîify_ß
(c⁄° 
id…e°_sim∂e
 *
row
)

925 
	`as£π
(
öôed
);

926 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_COL_SA
]);

927 
	}
}

930 
	$id…e°_sim∂e_vîify_u
(c⁄° 
id…e°_sim∂e
 *
row
)

932 
	`as£π
(
öôed
);

933 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_COL_U
]);

934 
	}
}

937 
	$id…e°_sim∂e_vîify_ua
(c⁄° 
id…e°_sim∂e
 *
row
)

939 
	`as£π
(
öôed
);

940 
	`ovsdb_idl_txn_vîify
(&
row
->
hódî_
, &
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_COL_UA
]);

941 
	}
}

958 c⁄° 
ovsdb_d©um
 *

959 
	$id…e°_sim∂e_gë_b
(c⁄° 
id…e°_sim∂e
 *
row
,

960 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

962 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_BOOLEAN
);

963  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
id…e°_sim∂e_cﬁ_b
);

964 
	}
}

981 c⁄° 
ovsdb_d©um
 *

982 
	$id…e°_sim∂e_gë_ba
(c⁄° 
id…e°_sim∂e
 *
row
,

983 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

985 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_BOOLEAN
);

986  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
id…e°_sim∂e_cﬁ_ba
);

987 
	}
}

1004 c⁄° 
ovsdb_d©um
 *

1005 
	$id…e°_sim∂e_gë_i
(c⁄° 
id…e°_sim∂e
 *
row
,

1006 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

1008 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_INTEGER
);

1009  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
id…e°_sim∂e_cﬁ_i
);

1010 
	}
}

1027 c⁄° 
ovsdb_d©um
 *

1028 
	$id…e°_sim∂e_gë_ü
(c⁄° 
id…e°_sim∂e
 *
row
,

1029 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

1031 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_INTEGER
);

1032  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
id…e°_sim∂e_cﬁ_ü
);

1033 
	}
}

1050 c⁄° 
ovsdb_d©um
 *

1051 
	$id…e°_sim∂e_gë_r
(c⁄° 
id…e°_sim∂e
 *
row
,

1052 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

1054 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_REAL
);

1055  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
id…e°_sim∂e_cﬁ_r
);

1056 
	}
}

1073 c⁄° 
ovsdb_d©um
 *

1074 
	$id…e°_sim∂e_gë_ø
(c⁄° 
id…e°_sim∂e
 *
row
,

1075 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

1077 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_REAL
);

1078  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
id…e°_sim∂e_cﬁ_ø
);

1079 
	}
}

1096 c⁄° 
ovsdb_d©um
 *

1097 
	$id…e°_sim∂e_gë_s
(c⁄° 
id…e°_sim∂e
 *
row
,

1098 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

1100 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

1101  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
id…e°_sim∂e_cﬁ_s
);

1102 
	}
}

1119 c⁄° 
ovsdb_d©um
 *

1120 
	$id…e°_sim∂e_gë_ß
(c⁄° 
id…e°_sim∂e
 *
row
,

1121 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

1123 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_STRING
);

1124  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
id…e°_sim∂e_cﬁ_ß
);

1125 
	}
}

1142 c⁄° 
ovsdb_d©um
 *

1143 
	$id…e°_sim∂e_gë_u
(c⁄° 
id…e°_sim∂e
 *
row
,

1144 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

1146 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_UUID
);

1147  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
id…e°_sim∂e_cﬁ_u
);

1148 
	}
}

1165 c⁄° 
ovsdb_d©um
 *

1166 
	$id…e°_sim∂e_gë_ua
(c⁄° 
id…e°_sim∂e
 *
row
,

1167 
ovsdb_©omic_ty≥
 
key_ty≥
 
OVS_UNUSED
)

1169 
	`as£π
(
key_ty≥
 =
OVSDB_TYPE_UUID
);

1170  
	`ovsdb_idl_ªad
(&
row
->
hódî_
, &
id…e°_sim∂e_cﬁ_ua
);

1171 
	}
}

1174 
	$id…e°_sim∂e_£t_b
(c⁄° 
id…e°_sim∂e
 *
row
, 
boﬁ
 
b
)

1176 
ovsdb_d©um
 
d©um
;

1178 
	`as£π
(
öôed
);

1179 
d©um
.
n
 = 1;

1180 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

1181 
d©um
.
keys
[0].
boﬁón
 = 
b
;

1182 
d©um
.
vÆues
 = 
NULL
;

1183 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_COL_B
], &
d©um
);

1184 
	}
}

1187 
	$id…e°_sim∂e_£t_ba
(c⁄° 
id…e°_sim∂e
 *
row
, c⁄° 
boﬁ
 *
ba
, 
size_t
 
n_ba
)

1189 
ovsdb_d©um
 
d©um
;

1190 
size_t
 
i
;

1192 
	`as£π
(
öôed
);

1193 
d©um
.
n
 = 
n_ba
;

1194 
d©um
.
keys
 = 
	`xmÆloc
(
n_ba
 *  *datum.keys);

1195 
d©um
.
vÆues
 = 
NULL
;

1196 
i
 = 0; i < 
n_ba
; i++) {

1197 
d©um
.
keys
[
i
].
boﬁón
 = 
ba
[i];

1199 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_BOOLEAN
, 
OVSDB_TYPE_VOID
);

1200 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_COL_BA
], &
d©um
);

1201 
	}
}

1204 
	$id…e°_sim∂e_£t_i
(c⁄° 
id…e°_sim∂e
 *
row
, 
öt64_t
 
i
)

1206 
ovsdb_d©um
 
d©um
;

1208 
	`as£π
(
öôed
);

1209 
d©um
.
n
 = 1;

1210 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

1211 
d©um
.
keys
[0].
öãgî
 = 
i
;

1212 
d©um
.
vÆues
 = 
NULL
;

1213 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_COL_I
], &
d©um
);

1214 
	}
}

1217 
	$id…e°_sim∂e_£t_ü
(c⁄° 
id…e°_sim∂e
 *
row
, c⁄° 
öt64_t
 *
ü
, 
size_t
 
n_ü
)

1219 
ovsdb_d©um
 
d©um
;

1220 
size_t
 
i
;

1222 
	`as£π
(
öôed
);

1223 
d©um
.
n
 = 
n_ü
;

1224 
d©um
.
keys
 = 
	`xmÆloc
(
n_ü
 *  *datum.keys);

1225 
d©um
.
vÆues
 = 
NULL
;

1226 
i
 = 0; i < 
n_ü
; i++) {

1227 
d©um
.
keys
[
i
].
öãgî
 = 
ü
[i];

1229 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_INTEGER
, 
OVSDB_TYPE_VOID
);

1230 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_COL_IA
], &
d©um
);

1231 
	}
}

1234 
	$id…e°_sim∂e_£t_r
(c⁄° 
id…e°_sim∂e
 *
row
, 
r
)

1236 
ovsdb_d©um
 
d©um
;

1238 
	`as£π
(
öôed
);

1239 
d©um
.
n
 = 1;

1240 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

1241 
d©um
.
keys
[0].
ªÆ
 = 
r
;

1242 
d©um
.
vÆues
 = 
NULL
;

1243 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_COL_R
], &
d©um
);

1244 
	}
}

1247 
	$id…e°_sim∂e_£t_ø
(c⁄° 
id…e°_sim∂e
 *
row
, c⁄° *
ø
, 
size_t
 
n_ø
)

1249 
ovsdb_d©um
 
d©um
;

1250 
size_t
 
i
;

1252 
	`as£π
(
öôed
);

1253 
d©um
.
n
 = 
n_ø
;

1254 
d©um
.
keys
 = 
	`xmÆloc
(
n_ø
 *  *datum.keys);

1255 
d©um
.
vÆues
 = 
NULL
;

1256 
i
 = 0; i < 
n_ø
; i++) {

1257 
d©um
.
keys
[
i
].
ªÆ
 = 
ø
[i];

1259 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_REAL
, 
OVSDB_TYPE_VOID
);

1260 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_COL_RA
], &
d©um
);

1261 
	}
}

1264 
	$id…e°_sim∂e_£t_s
(c⁄° 
id…e°_sim∂e
 *
row
, c⁄° *
s
)

1266 
ovsdb_d©um
 
d©um
;

1268 
	`as£π
(
öôed
);

1269 
d©um
.
n
 = 1;

1270 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

1271 
d©um
.
keys
[0].
°rög
 = 
	`x°rdup
(
s
);

1272 
d©um
.
vÆues
 = 
NULL
;

1273 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_COL_S
], &
d©um
);

1274 
	}
}

1277 
	$id…e°_sim∂e_£t_ß
(c⁄° 
id…e°_sim∂e
 *
row
, **
ß
, 
size_t
 
n_ß
)

1279 
ovsdb_d©um
 
d©um
;

1280 
size_t
 
i
;

1282 
	`as£π
(
öôed
);

1283 
d©um
.
n
 = 
n_ß
;

1284 
d©um
.
keys
 = 
	`xmÆloc
(
n_ß
 *  *datum.keys);

1285 
d©um
.
vÆues
 = 
NULL
;

1286 
i
 = 0; i < 
n_ß
; i++) {

1287 
d©um
.
keys
[
i
].
°rög
 = 
	`x°rdup
(
ß
[i]);

1289 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_STRING
, 
OVSDB_TYPE_VOID
);

1290 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_COL_SA
], &
d©um
);

1291 
	}
}

1294 
	$id…e°_sim∂e_£t_u
(c⁄° 
id…e°_sim∂e
 *
row
, 
uuid
 
u
)

1296 
ovsdb_d©um
 
d©um
;

1298 
	`as£π
(
öôed
);

1299 
d©um
.
n
 = 1;

1300 
d©um
.
keys
 = 
	`xmÆloc
( *datum.keys);

1301 
d©um
.
keys
[0].
uuid
 = 
u
;

1302 
d©um
.
vÆues
 = 
NULL
;

1303 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_COL_U
], &
d©um
);

1304 
	}
}

1307 
	$id…e°_sim∂e_£t_ua
(c⁄° 
id…e°_sim∂e
 *
row
, c⁄° 
uuid
 *
ua
, 
size_t
 
n_ua
)

1309 
ovsdb_d©um
 
d©um
;

1310 
size_t
 
i
;

1312 
	`as£π
(
öôed
);

1313 
d©um
.
n
 = 
n_ua
;

1314 
d©um
.
keys
 = 
	`xmÆloc
(
n_ua
 *  *datum.keys);

1315 
d©um
.
vÆues
 = 
NULL
;

1316 
i
 = 0; i < 
n_ua
; i++) {

1317 
d©um
.
keys
[
i
].
uuid
 = 
ua
[i];

1319 
	`ovsdb_d©um_s‹t_unique
(&
d©um
, 
OVSDB_TYPE_UUID
, 
OVSDB_TYPE_VOID
);

1320 
	`ovsdb_idl_txn_wrôe
(&
row
->
hódî_
, &
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_COL_UA
], &
d©um
);

1321 
	}
}

1323 
ovsdb_idl_cﬁumn
 
	gid…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_N_COLUMNS
];

1326 
	$id…e°_sim∂e_cﬁumns_öô
()

1328 
ovsdb_idl_cﬁumn
 *
c
;

1331 
c
 = &
id…e°_sim∂e_cﬁ_b
;

1332 
c
->
«me
 = "b";

1333 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_BOOLEAN
);

1334 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

1335 
c
->
ty≥
.
n_mö
 = 1;

1336 
c
->
ty≥
.
n_max
 = 1;

1337 
c
->
muèbÀ
 = 
åue
;

1338 
c
->
∑r£
 = 
id…e°_sim∂e_∑r£_b
;

1339 
c
->
u≈¨£
 = 
id…e°_sim∂e_u≈¨£_b
;

1342 
c
 = &
id…e°_sim∂e_cﬁ_ba
;

1343 
c
->
«me
 = "ba";

1344 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_BOOLEAN
);

1345 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

1346 
c
->
ty≥
.
n_mö
 = 0;

1347 
c
->
ty≥
.
n_max
 = 1;

1348 
c
->
muèbÀ
 = 
åue
;

1349 
c
->
∑r£
 = 
id…e°_sim∂e_∑r£_ba
;

1350 
c
->
u≈¨£
 = 
id…e°_sim∂e_u≈¨£_ba
;

1353 
c
 = &
id…e°_sim∂e_cﬁ_i
;

1354 
c
->
«me
 = "i";

1355 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_INTEGER
);

1356 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

1357 
c
->
ty≥
.
n_mö
 = 1;

1358 
c
->
ty≥
.
n_max
 = 1;

1359 
c
->
muèbÀ
 = 
åue
;

1360 
c
->
∑r£
 = 
id…e°_sim∂e_∑r£_i
;

1361 
c
->
u≈¨£
 = 
id…e°_sim∂e_u≈¨£_i
;

1364 
c
 = &
id…e°_sim∂e_cﬁ_ü
;

1365 
c
->
«me
 = "ia";

1366 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_INTEGER
);

1367 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

1368 
c
->
ty≥
.
n_mö
 = 0;

1369 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

1370 
c
->
muèbÀ
 = 
åue
;

1371 
c
->
∑r£
 = 
id…e°_sim∂e_∑r£_ü
;

1372 
c
->
u≈¨£
 = 
id…e°_sim∂e_u≈¨£_ü
;

1375 
c
 = &
id…e°_sim∂e_cﬁ_r
;

1376 
c
->
«me
 = "r";

1377 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_REAL
);

1378 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

1379 
c
->
ty≥
.
n_mö
 = 1;

1380 
c
->
ty≥
.
n_max
 = 1;

1381 
c
->
muèbÀ
 = 
åue
;

1382 
c
->
∑r£
 = 
id…e°_sim∂e_∑r£_r
;

1383 
c
->
u≈¨£
 = 
id…e°_sim∂e_u≈¨£_r
;

1386 
c
 = &
id…e°_sim∂e_cﬁ_ø
;

1387 
c
->
«me
 = "ra";

1388 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_REAL
);

1389 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

1390 
c
->
ty≥
.
n_mö
 = 0;

1391 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

1392 
c
->
muèbÀ
 = 
åue
;

1393 
c
->
∑r£
 = 
id…e°_sim∂e_∑r£_ø
;

1394 
c
->
u≈¨£
 = 
id…e°_sim∂e_u≈¨£_ø
;

1397 
c
 = &
id…e°_sim∂e_cﬁ_s
;

1398 
c
->
«me
 = "s";

1399 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

1400 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

1401 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

1402 
c
->
ty≥
.
n_mö
 = 1;

1403 
c
->
ty≥
.
n_max
 = 1;

1404 
c
->
muèbÀ
 = 
åue
;

1405 
c
->
∑r£
 = 
id…e°_sim∂e_∑r£_s
;

1406 
c
->
u≈¨£
 = 
id…e°_sim∂e_u≈¨£_s
;

1409 
c
 = &
id…e°_sim∂e_cﬁ_ß
;

1410 
c
->
«me
 = "sa";

1411 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_STRING
);

1412 
c
->
ty≥
.
key
.
u
.
°rög
.
möLí
 = 0;

1413 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

1414 
c
->
ty≥
.
n_mö
 = 0;

1415 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

1416 
c
->
muèbÀ
 = 
åue
;

1417 
c
->
∑r£
 = 
id…e°_sim∂e_∑r£_ß
;

1418 
c
->
u≈¨£
 = 
id…e°_sim∂e_u≈¨£_ß
;

1421 
c
 = &
id…e°_sim∂e_cﬁ_u
;

1422 
c
->
«me
 = "u";

1423 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_UUID
);

1424 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

1425 
c
->
ty≥
.
n_mö
 = 1;

1426 
c
->
ty≥
.
n_max
 = 1;

1427 
c
->
muèbÀ
 = 
åue
;

1428 
c
->
∑r£
 = 
id…e°_sim∂e_∑r£_u
;

1429 
c
->
u≈¨£
 = 
id…e°_sim∂e_u≈¨£_u
;

1432 
c
 = &
id…e°_sim∂e_cﬁ_ua
;

1433 
c
->
«me
 = "ua";

1434 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
key
, 
OVSDB_TYPE_UUID
);

1435 
	`ovsdb_ba£_ty≥_öô
(&
c
->
ty≥
.
vÆue
, 
OVSDB_TYPE_VOID
);

1436 
c
->
ty≥
.
n_mö
 = 0;

1437 
c
->
ty≥
.
n_max
 = 
UINT_MAX
;

1438 
c
->
muèbÀ
 = 
åue
;

1439 
c
->
∑r£
 = 
id…e°_sim∂e_∑r£_ua
;

1440 
c
->
u≈¨£
 = 
id…e°_sim∂e_u≈¨£_ua
;

1441 
	}
}

1443 
ovsdb_idl_èbÀ_˛ass
 
	gid…e°_èbÀ_˛as£s
[
IDLTEST_N_TABLES
] = {

1444 {"lök1", 
åue
,

1445 
id…e°_lök1_cﬁumns
, 
ARRAY_SIZE
(idltest_link1_columns),

1446 (
id…e°_lök1
), 
id…e°_lök1_öô__
},

1447 {"lök2", 
åue
,

1448 
id…e°_lök2_cﬁumns
, 
ARRAY_SIZE
(idltest_link2_columns),

1449 (
id…e°_lök2
), 
id…e°_lök2_öô__
},

1450 {"sim∂e", 
åue
,

1451 
id…e°_sim∂e_cﬁumns
, 
ARRAY_SIZE
(idltest_simple_columns),

1452 (
id…e°_sim∂e
), 
id…e°_sim∂e_öô__
},

1455 
ovsdb_idl_˛ass
 
	gid…e°_idl_˛ass
 = {

1456 "id…e°", 
id…e°_èbÀ_˛as£s
, 
ARRAY_SIZE
(idltest_table_classes)

1460 
	$id…e°_öô
()

1462 i‡(
öôed
) {

1465 
öôed
 = 
åue
;

1467 
	`id…e°_lök1_cﬁumns_öô
();

1468 
	`id…e°_lök2_cﬁumns_öô
();

1469 
	`id…e°_sim∂e_cﬁumns_öô
();

1470 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/tests/idltest.h

3 #i‚de‡
IDLTEST_IDL_HEADER


4 
	#IDLTEST_IDL_HEADER
 1

	)

6 
	~<°dboﬁ.h
>

7 
	~<°ddef.h
>

8 
	~<°döt.h
>

9 
	~"ovsdb-d©a.h
"

10 
	~"ovsdb-idl-¥ovidî.h
"

11 
	~"sm≠.h
"

12 
	~"uuid.h
"

15 
	sid…e°_lök1
 {

16 
ovsdb_idl_row
 
	mhódî_
;

19 
öt64_t
 
	mi
;

22 
id…e°_lök1
 *
	mk
;

25 
id…e°_lök1
 **
	mka
;

26 
size_t
 
	mn_ka
;

29 
id…e°_lök2
 *
	ml2
;

33 
	mIDLTEST_LINK1_COL_I
,

34 
	mIDLTEST_LINK1_COL_K
,

35 
	mIDLTEST_LINK1_COL_KA
,

36 
	mIDLTEST_LINK1_COL_L2
,

37 
	mIDLTEST_LINK1_N_COLUMNS


40 
	#id…e°_lök1_cﬁ_i
 (
id…e°_lök1_cﬁumns
[
IDLTEST_LINK1_COL_I
])

	)

41 
	#id…e°_lök1_cﬁ_k
 (
id…e°_lök1_cﬁumns
[
IDLTEST_LINK1_COL_K
])

	)

42 
	#id…e°_lök1_cﬁ_l2
 (
id…e°_lök1_cﬁumns
[
IDLTEST_LINK1_COL_L2
])

	)

43 
	#id…e°_lök1_cﬁ_ka
 (
id…e°_lök1_cﬁumns
[
IDLTEST_LINK1_COL_KA
])

	)

45 
ovsdb_idl_cﬁumn
 
id…e°_lök1_cﬁumns
[
IDLTEST_LINK1_N_COLUMNS
];

47 c⁄° 
id…e°_lök1
 *
id…e°_lök1_fú°
(c⁄° 
ovsdb_idl
 *);

48 c⁄° 
id…e°_lök1
 *
id…e°_lök1_√xt
(const idltest_link1 *);

49 
	#IDLTEST_LINK1_FOR_EACH
(
ROW
, 
IDL
) \

50 (
ROW
Ë
	`id…e°_lök1_fú°
(
IDL
); \

51 (
ROW
); \

52 (
ROW
Ë
	`id…e°_lök1_√xt
(ROW))

	)

53 
	#IDLTEST_LINK1_FOR_EACH_SAFE
(
ROW
, 
NEXT
, 
IDL
) \

54 (
ROW
Ë
	`id…e°_lök1_fú°
(
IDL
); \

55 (
ROW
Ë? ((
NEXT
Ë
	`id…e°_lök1_√xt
(ROW), 1) : 0; \

56 (
ROW
Ë(
NEXT
))

	)

58 
id…e°_lök1_öô
(
id…e°_lök1
 *);

59 
id…e°_lök1_dñëe
(c⁄° 
id…e°_lök1
 *);

60 
id…e°_lök1
 *
id…e°_lök1_ö£π
(
ovsdb_idl_txn
 *);

62 
id…e°_lök1_vîify_i
(c⁄° 
id…e°_lök1
 *);

63 
id…e°_lök1_vîify_k
(c⁄° 
id…e°_lök1
 *);

64 
id…e°_lök1_vîify_ka
(c⁄° 
id…e°_lök1
 *);

65 
id…e°_lök1_vîify_l2
(c⁄° 
id…e°_lök1
 *);

70 c⁄° 
ovsdb_d©um
 *
id…e°_lök1_gë_i
(c⁄° 
id…e°_lök1
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

71 c⁄° 
ovsdb_d©um
 *
id…e°_lök1_gë_k
(c⁄° 
id…e°_lök1
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

72 c⁄° 
ovsdb_d©um
 *
id…e°_lök1_gë_ka
(c⁄° 
id…e°_lök1
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

73 c⁄° 
ovsdb_d©um
 *
id…e°_lök1_gë_l2
(c⁄° 
id…e°_lök1
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

75 
id…e°_lök1_£t_i
(c⁄° 
id…e°_lök1
 *, 
öt64_t
 
i
);

76 
id…e°_lök1_£t_k
(c⁄° 
id…e°_lök1
 *, c⁄° id…e°_lök1 *
k
);

77 
id…e°_lök1_£t_ka
(c⁄° 
id…e°_lök1
 *, id…e°_lök1 **
ka
, 
size_t
 
n_ka
);

78 
id…e°_lök1_£t_l2
(c⁄° 
id…e°_lök1
 *, c⁄° 
id…e°_lök2
 *
l2
);

82 
	sid…e°_lök2
 {

83 
ovsdb_idl_row
 
	mhódî_
;

86 
öt64_t
 
	mi
;

89 
id…e°_lök1
 *
	ml1
;

93 
	mIDLTEST_LINK2_COL_I
,

94 
	mIDLTEST_LINK2_COL_L1
,

95 
	mIDLTEST_LINK2_N_COLUMNS


98 
	#id…e°_lök2_cﬁ_i
 (
id…e°_lök2_cﬁumns
[
IDLTEST_LINK2_COL_I
])

	)

99 
	#id…e°_lök2_cﬁ_l1
 (
id…e°_lök2_cﬁumns
[
IDLTEST_LINK2_COL_L1
])

	)

101 
ovsdb_idl_cﬁumn
 
id…e°_lök2_cﬁumns
[
IDLTEST_LINK2_N_COLUMNS
];

103 c⁄° 
id…e°_lök2
 *
id…e°_lök2_fú°
(c⁄° 
ovsdb_idl
 *);

104 c⁄° 
id…e°_lök2
 *
id…e°_lök2_√xt
(const idltest_link2 *);

105 
	#IDLTEST_LINK2_FOR_EACH
(
ROW
, 
IDL
) \

106 (
ROW
Ë
	`id…e°_lök2_fú°
(
IDL
); \

107 (
ROW
); \

108 (
ROW
Ë
	`id…e°_lök2_√xt
(ROW))

	)

109 
	#IDLTEST_LINK2_FOR_EACH_SAFE
(
ROW
, 
NEXT
, 
IDL
) \

110 (
ROW
Ë
	`id…e°_lök2_fú°
(
IDL
); \

111 (
ROW
Ë? ((
NEXT
Ë
	`id…e°_lök2_√xt
(ROW), 1) : 0; \

112 (
ROW
Ë(
NEXT
))

	)

114 
id…e°_lök2_öô
(
id…e°_lök2
 *);

115 
id…e°_lök2_dñëe
(c⁄° 
id…e°_lök2
 *);

116 
id…e°_lök2
 *
id…e°_lök2_ö£π
(
ovsdb_idl_txn
 *);

118 
id…e°_lök2_vîify_i
(c⁄° 
id…e°_lök2
 *);

119 
id…e°_lök2_vîify_l1
(c⁄° 
id…e°_lök2
 *);

124 c⁄° 
ovsdb_d©um
 *
id…e°_lök2_gë_i
(c⁄° 
id…e°_lök2
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

125 c⁄° 
ovsdb_d©um
 *
id…e°_lök2_gë_l1
(c⁄° 
id…e°_lök2
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

127 
id…e°_lök2_£t_i
(c⁄° 
id…e°_lök2
 *, 
öt64_t
 
i
);

128 
id…e°_lök2_£t_l1
(c⁄° 
id…e°_lök2
 *, c⁄° 
id…e°_lök1
 *
l1
);

132 
	sid…e°_sim∂e
 {

133 
ovsdb_idl_row
 
	mhódî_
;

136 
boﬁ
 
	mb
;

139 
boﬁ
 *
	mba
;

140 
size_t
 
	mn_ba
;

143 
öt64_t
 
	mi
;

146 
öt64_t
 *
	mü
;

147 
size_t
 
	mn_ü
;

150 
	mr
;

153 *
	mø
;

154 
size_t
 
	mn_ø
;

157 *
	ms
;

160 **
	mß
;

161 
size_t
 
	mn_ß
;

164 
uuid
 
	mu
;

167 
uuid
 *
	mua
;

168 
size_t
 
	mn_ua
;

172 
	mIDLTEST_SIMPLE_COL_B
,

173 
	mIDLTEST_SIMPLE_COL_BA
,

174 
	mIDLTEST_SIMPLE_COL_I
,

175 
	mIDLTEST_SIMPLE_COL_IA
,

176 
	mIDLTEST_SIMPLE_COL_R
,

177 
	mIDLTEST_SIMPLE_COL_RA
,

178 
	mIDLTEST_SIMPLE_COL_S
,

179 
	mIDLTEST_SIMPLE_COL_SA
,

180 
	mIDLTEST_SIMPLE_COL_U
,

181 
	mIDLTEST_SIMPLE_COL_UA
,

182 
	mIDLTEST_SIMPLE_N_COLUMNS


185 
	#id…e°_sim∂e_cﬁ_b
 (
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_COL_B
])

	)

186 
	#id…e°_sim∂e_cﬁ_ba
 (
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_COL_BA
])

	)

187 
	#id…e°_sim∂e_cﬁ_i
 (
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_COL_I
])

	)

188 
	#id…e°_sim∂e_cﬁ_s
 (
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_COL_S
])

	)

189 
	#id…e°_sim∂e_cﬁ_r
 (
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_COL_R
])

	)

190 
	#id…e°_sim∂e_cﬁ_u
 (
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_COL_U
])

	)

191 
	#id…e°_sim∂e_cﬁ_ø
 (
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_COL_RA
])

	)

192 
	#id…e°_sim∂e_cﬁ_ü
 (
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_COL_IA
])

	)

193 
	#id…e°_sim∂e_cﬁ_ß
 (
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_COL_SA
])

	)

194 
	#id…e°_sim∂e_cﬁ_ua
 (
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_COL_UA
])

	)

196 
ovsdb_idl_cﬁumn
 
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_N_COLUMNS
];

198 c⁄° 
id…e°_sim∂e
 *
id…e°_sim∂e_fú°
(c⁄° 
ovsdb_idl
 *);

199 c⁄° 
id…e°_sim∂e
 *
id…e°_sim∂e_√xt
(const idltest_simple *);

200 
	#IDLTEST_SIMPLE_FOR_EACH
(
ROW
, 
IDL
) \

201 (
ROW
Ë
	`id…e°_sim∂e_fú°
(
IDL
); \

202 (
ROW
); \

203 (
ROW
Ë
	`id…e°_sim∂e_√xt
(ROW))

	)

204 
	#IDLTEST_SIMPLE_FOR_EACH_SAFE
(
ROW
, 
NEXT
, 
IDL
) \

205 (
ROW
Ë
	`id…e°_sim∂e_fú°
(
IDL
); \

206 (
ROW
Ë? ((
NEXT
Ë
	`id…e°_sim∂e_√xt
(ROW), 1) : 0; \

207 (
ROW
Ë(
NEXT
))

	)

209 
id…e°_sim∂e_öô
(
id…e°_sim∂e
 *);

210 
id…e°_sim∂e_dñëe
(c⁄° 
id…e°_sim∂e
 *);

211 
id…e°_sim∂e
 *
id…e°_sim∂e_ö£π
(
ovsdb_idl_txn
 *);

213 
id…e°_sim∂e_vîify_b
(c⁄° 
id…e°_sim∂e
 *);

214 
id…e°_sim∂e_vîify_ba
(c⁄° 
id…e°_sim∂e
 *);

215 
id…e°_sim∂e_vîify_i
(c⁄° 
id…e°_sim∂e
 *);

216 
id…e°_sim∂e_vîify_ü
(c⁄° 
id…e°_sim∂e
 *);

217 
id…e°_sim∂e_vîify_r
(c⁄° 
id…e°_sim∂e
 *);

218 
id…e°_sim∂e_vîify_ø
(c⁄° 
id…e°_sim∂e
 *);

219 
id…e°_sim∂e_vîify_s
(c⁄° 
id…e°_sim∂e
 *);

220 
id…e°_sim∂e_vîify_ß
(c⁄° 
id…e°_sim∂e
 *);

221 
id…e°_sim∂e_vîify_u
(c⁄° 
id…e°_sim∂e
 *);

222 
id…e°_sim∂e_vîify_ua
(c⁄° 
id…e°_sim∂e
 *);

227 c⁄° 
ovsdb_d©um
 *
id…e°_sim∂e_gë_b
(c⁄° 
id…e°_sim∂e
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

228 c⁄° 
ovsdb_d©um
 *
id…e°_sim∂e_gë_ba
(c⁄° 
id…e°_sim∂e
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

229 c⁄° 
ovsdb_d©um
 *
id…e°_sim∂e_gë_i
(c⁄° 
id…e°_sim∂e
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

230 c⁄° 
ovsdb_d©um
 *
id…e°_sim∂e_gë_ü
(c⁄° 
id…e°_sim∂e
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

231 c⁄° 
ovsdb_d©um
 *
id…e°_sim∂e_gë_r
(c⁄° 
id…e°_sim∂e
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

232 c⁄° 
ovsdb_d©um
 *
id…e°_sim∂e_gë_ø
(c⁄° 
id…e°_sim∂e
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

233 c⁄° 
ovsdb_d©um
 *
id…e°_sim∂e_gë_s
(c⁄° 
id…e°_sim∂e
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

234 c⁄° 
ovsdb_d©um
 *
id…e°_sim∂e_gë_ß
(c⁄° 
id…e°_sim∂e
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

235 c⁄° 
ovsdb_d©um
 *
id…e°_sim∂e_gë_u
(c⁄° 
id…e°_sim∂e
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

236 c⁄° 
ovsdb_d©um
 *
id…e°_sim∂e_gë_ua
(c⁄° 
id…e°_sim∂e
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

238 
id…e°_sim∂e_£t_b
(c⁄° 
id…e°_sim∂e
 *, 
boﬁ
 
b
);

239 
id…e°_sim∂e_£t_ba
(c⁄° 
id…e°_sim∂e
 *, c⁄° 
boﬁ
 *
ba
, 
size_t
 
n_ba
);

240 
id…e°_sim∂e_£t_i
(c⁄° 
id…e°_sim∂e
 *, 
öt64_t
 
i
);

241 
id…e°_sim∂e_£t_ü
(c⁄° 
id…e°_sim∂e
 *, c⁄° 
öt64_t
 *
ü
, 
size_t
 
n_ü
);

242 
id…e°_sim∂e_£t_r
(c⁄° 
id…e°_sim∂e
 *, 
r
);

243 
id…e°_sim∂e_£t_ø
(c⁄° 
id…e°_sim∂e
 *, c⁄° *
ø
, 
size_t
 
n_ø
);

244 
id…e°_sim∂e_£t_s
(c⁄° 
id…e°_sim∂e
 *, c⁄° *
s
);

245 
id…e°_sim∂e_£t_ß
(c⁄° 
id…e°_sim∂e
 *, **
ß
, 
size_t
 
n_ß
);

246 
id…e°_sim∂e_£t_u
(c⁄° 
id…e°_sim∂e
 *, 
uuid
 
u
);

247 
id…e°_sim∂e_£t_ua
(c⁄° 
id…e°_sim∂e
 *, c⁄° 
uuid
 *
ua
, 
size_t
 
n_ua
);

251 
	mIDLTEST_TABLE_LINK1
,

252 
	mIDLTEST_TABLE_LINK2
,

253 
	mIDLTEST_TABLE_SIMPLE
,

254 
	mIDLTEST_N_TABLES


257 
	#id…e°_èbÀ_sim∂e
 (
id…e°_èbÀ_˛as£s
[
IDLTEST_TABLE_SIMPLE
])

	)

258 
	#id…e°_èbÀ_lök1
 (
id…e°_èbÀ_˛as£s
[
IDLTEST_TABLE_LINK1
])

	)

259 
	#id…e°_èbÀ_lök2
 (
id…e°_èbÀ_˛as£s
[
IDLTEST_TABLE_LINK2
])

	)

261 
ovsdb_idl_èbÀ_˛ass
 
id…e°_èbÀ_˛as£s
[
IDLTEST_N_TABLES
];

263 
ovsdb_idl_˛ass
 
id…e°_idl_˛ass
;

265 
id…e°_öô
();

	@/home/lsch/mytest/openvswitch-1.9.0/tests/test-aes128.c

17 
	~<c⁄fig.h
>

18 
	~<˘y≥.h
>

19 
	~"´s128.h
"

20 
	~"utû.h
"

23 
	$hex_to_uöt8
(c⁄° *
öput
, 
uöt8_t
 *
ouçut
, 
size_t
 
n
)

25 
size_t
 
i
;

27 i‡(
	`°æí
(
öput
Ë!
n
 * 2) {

28 
îr‹
;

30 
i
 = 0; i < 
n
; i++) {

31 
boﬁ
 
ok
;

33 
ouçut
[
i
] = 
	`hexôs_vÆue
(&
öput
[ò* 2], 2, &
ok
);

34 i‡(!
ok
) {

35 
îr‹
;

40 
îr‹
:

41 
	`ovs_Áèl
(0, "\"%s\" i†nŸÉxa˘ly %zu hex digôs", 
öput
, 
n
 * 2);

42 
	}
}

45 
	$maö
(
¨gc
, *
¨gv
[])

47 
´s128
 
´s
;

48 
uöt8_t
 
∂aöãxt
[16];

49 
uöt8_t
 
cùhîãxt
[16];

50 
uöt8_t
 
key
[16];

51 
size_t
 
i
;

53 i‡(
¨gc
 != 3) {

54 
	`ovs_Áèl
(0, "usage: %s KEY PLAINTEXT, where KEYánd PLAINTEXTÉach "

55 "c⁄si° o‡32 hex digôs", 
¨gv
[0]);

58 
	`hex_to_uöt8
(
¨gv
[1], 
key
, 16);

59 
	`hex_to_uöt8
(
¨gv
[2], 
∂aöãxt
, 16);

61 
	`´s128_scheduÀ
(&
´s
, 
key
);

62 
	`´s128_í¸y±
(&
´s
, 
∂aöãxt
, 
cùhîãxt
);

63 
i
 = 0; i < 16; i++) {

64 
	`¥ötf
("%02x", 
cùhîãxt
[
i
]);

66 
	`putch¨
('\n');

69 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/tests/test-bundle.c

16 
	~<c⁄fig.h
>

18 
	~"bundÀ.h
"

20 
	~<m©h.h
>

21 
	~<°dlib.h
>

23 
	~"Êow.h
"

24 
	~"oÂ-a˘i⁄s.h
"

25 
	~"oÂbuf.h
"

26 
	~"øndom.h
"

28 
	~"utû.h
"

30 
	#N_FLOWS
 50000

	)

31 
	#MAX_SLAVES
 8

	)

33 
	s¶ave
 {

34 
uöt16_t
 
	m¶ave_id
;

36 
boﬁ
 
	míabÀd
;

37 
size_t
 
	mÊow_cou¡
;

40 
	s¶ave_group
 {

41 
size_t
 
	mn_¶aves
;

42 
¶ave
 
	m¶aves
[
MAX_SLAVES
];

45 
¶ave
 *

46 
	$¶ave_lookup
(
¶ave_group
 *
sg
, 
uöt16_t
 
¶ave_id
)

48 
size_t
 
i
;

50 
i
 = 0; i < 
sg
->
n_¶aves
; i++) {

51 i‡(
sg
->
¶aves
[
i
].
¶ave_id
 == slave_id) {

52  &
sg
->
¶aves
[
i
];

56  
NULL
;

57 
	}
}

59 
boﬁ


60 
	$¶ave_íabÀd_cb
(
uöt16_t
 
¶ave_id
, *
aux
)

62 
¶ave
 *slave;

64 
¶ave
 = 
	`¶ave_lookup
(
aux
, 
¶ave_id
);

65  
¶ave
 ? sœve->
íabÀd
 : 
Ál£
;

66 
	}
}

68 
oÂa˘_bundÀ
 *

69 
	$∑r£_bundÀ_a˘i⁄s
(*
a˘i⁄s
)

71 
oÂa˘_bundÀ
 *
bundÀ
;

72 
oÂbuf
 
oÂa˘s
;

73 
oÂa˘
 *
a˘i⁄
;

75 
	`oÂbuf_öô
(&
oÂa˘s
, 0);

76 
	`bundÀ_∑r£_lﬂd
(
a˘i⁄s
, &
oÂa˘s
);

77 
a˘i⁄
 = 
oÂa˘s
.
d©a
;

78 
bundÀ
 = 
	`oÂa˘_gë_BUNDLE
(
	`xmemdup
(
a˘i⁄
,á˘i⁄->
Àn
));

79 
	`oÂbuf_unöô
(&
oÂa˘s
);

81 i‡(
bundÀ
->
n_¶aves
 > 
MAX_SLAVES
) {

82 
	`ovs_Áèl
(0, "Aàmo° %u sœve†¨êsuµ‹ãd", 
MAX_SLAVES
);

85  
bundÀ
;

86 
	}
}

89 
	$mask_°r
(
uöt8_t
 
mask
, 
size_t
 
n_bôs
)

91 
°r
[9];

92 
size_t
 
i
;

94 
n_bôs
 = 
	`MIN
(n_bits, 8);

95 
i
 = 0; i < 
n_bôs
; i++) {

96 
°r
[
i
] = (1 << iË& 
mask
 ? '1' : '0';

98 
°r
[
i
] = '\0';

100  
°r
;

101 
	}
}

104 
	$maö
(
¨gc
, *
¨gv
[])

106 
boﬁ
 
ok
 = 
åue
;

107 
oÂa˘_bundÀ
 *
bundÀ
;

108 
Êow
 *
Êows
;

109 
size_t
 
i
, 
n_≥rmuã
, 
ﬁd_n_íabÀd
;

110 
¶ave_group
 
sg
;

111 
ﬁd_a˘ive
;

113 
	`£t_¥ogøm_«me
(
¨gv
[0]);

114 
	`øndom_öô
();

116 i‡(
¨gc
 != 2) {

117 
	`ovs_Áèl
(0, "ußge: %†bundÀ_a˘i⁄", 
¥ogøm_«me
);

120 
bundÀ
 = 
	`∑r£_bundÀ_a˘i⁄s
(
¨gv
[1]);

123 
sg
.
n_¶aves
 = 0;

124 
i
 = 0; i < 
bundÀ
->
n_¶aves
; i++) {

125 
uöt16_t
 
¶ave_id
 = 
bundÀ
->
¶aves
[
i
];

127 i‡(
	`¶ave_lookup
(&
sg
, 
¶ave_id
)) {

128 
	`ovs_Áèl
(0, "Redundant slavesáreÇot supported. ");

131 
sg
.
¶aves
[sg.
n_¶aves
].
¶ave_id
 = slave_id;

132 
sg
.
n_¶aves
++;

136 
Êows
 = 
	`xmÆloc
(
N_FLOWS
 *  *flows);

137 
i
 = 0; i < 
N_FLOWS
; i++) {

138 
	`øndom_byãs
(&
Êows
[
i
],  flows[i]);

139 
	`mem£t
(
Êows
[
i
].
zîos
, 0,  flows[i].zeros);

140 
Êows
[
i
].
ªgs
[0] = 
OFPP_NONE
;

147 
ﬁd_n_íabÀd
 = 0;

148 
ﬁd_a˘ive
 = -1;

149 
n_≥rmuã
 = 1 << 
sg
.
n_¶aves
;

150 
i
 = 1; i <
n_≥rmuã
 + 1; i++) {

151 
¶ave
 *slave;

152 
size_t
 
j
, 
n_íabÀd
, 
ch™ged
;

153 
di§u±i⁄
, 
≥r„˘
;

154 
uöt8_t
 
mask
;

155 
a˘ive
;

157 
mask
 = 
i
 % 
n_≥rmuã
;

163 
mask
 = mask ^ (mask >> 1);

166 
n_íabÀd
 = 0;

167 
j
 = 0; j < 
sg
.
n_¶aves
; j++) {

168 
¶ave
 = &
sg
.
¶aves
[
j
];

169 
¶ave
->
Êow_cou¡
 = 0;

170 
¶ave
->
íabÀd
 = ((1 << 
j
Ë& 
mask
) != 0;

172 i‡(
¶ave
->
íabÀd
) {

173 
n_íabÀd
++;

177 
a˘ive
 = -1;

178 
j
 = 0; j < 
sg
.
n_¶aves
; j++) {

179 i‡(
sg
.
¶aves
[
j
].
íabÀd
) {

180 
a˘ive
 = 
j
;

185 
ch™ged
 = 0;

186 
j
 = 0; j < 
N_FLOWS
; j++) {

187 
Êow
 *Êow = &
Êows
[
j
];

188 
uöt16_t
 
ﬁd_¶ave_id
, 
oÂ_p‹t
;

190 
ﬁd_¶ave_id
 = 
Êow
->
ªgs
[0];

191 
oÂ_p‹t
 = 
	`bundÀ_execuã
(
bundÀ
, 
Êow
, 
¶ave_íabÀd_cb
, &
sg
);

192 
Êow
->
ªgs
[0] = 
oÂ_p‹t
;

194 i‡(
oÂ_p‹t
 !
OFPP_NONE
) {

195 
	`¶ave_lookup
(&
sg
, 
oÂ_p‹t
)->
Êow_cou¡
++;

198 i‡(
ﬁd_¶ave_id
 !
oÂ_p‹t
) {

199 
ch™ged
++;

203 i‡(
bundÀ
->
Æg‹ôhm
 =
NX_BD_ALG_ACTIVE_BACKUP
) {

204 
≥r„˘
 = 
a˘ive
 =
ﬁd_a˘ive
 ? 0.0 : 1.0;

206 i‡(
ﬁd_n_íabÀd
 || 
n_íabÀd
) {

207 
≥r„˘
 = 1.0 / 
	`MAX
(
ﬁd_n_íabÀd
, 
n_íabÀd
);

210 
≥r„˘
 = 0;

214 
di§u±i⁄
 = 
ch™ged
 / ()
N_FLOWS
;

215 
	`¥ötf
("%s: disruption=%.2f (perfect=%.2f)",

216 
	`mask_°r
(
mask
, 
sg
.
n_¶aves
), 
di§u±i⁄
, 
≥r„˘
);

218 
j
 = 0 ; j < 
sg
.
n_¶aves
; j++) {

219 
¶ave
 *¶avê&
sg
.
¶aves
[
j
];

220 
Êow_≥r˚¡
;

222 
Êow_≥r˚¡
 = 
¶ave
->
Êow_cou¡
 / ()
N_FLOWS
;

223 
	`¥ötf
–" %.2f", 
Êow_≥r˚¡
);

225 i‡(
¶ave
->
íabÀd
) {

226 
≥r„˘_Â
;

228 i‡(
bundÀ
->
Æg‹ôhm
 =
NX_BD_ALG_ACTIVE_BACKUP
) {

229 
≥r„˘_Â
 = 
j
 =
a˘ive
 ? 1.0 : 0.0;

231 
≥r„˘_Â
 = 1.0 / 
n_íabÀd
;

234 i‡(
	`Ábs
(
Êow_≥r˚¡
 - 
≥r„˘_Â
) >= .01) {

235 
	`Ârötf
(
°dîr
, "%s: slave %d: flow_percentage=%.5f for"

237 
	`mask_°r
(
mask
, 
sg
.
n_¶aves
), 
¶ave
->
¶ave_id
,

238 
Êow_≥r˚¡
, 
≥r„˘_Â
);

239 
ok
 = 
Ál£
;

241 } i‡(
¶ave
->
Êow_cou¡
) {

242 
	`Ârötf
(
°dîr
, "%s: slave %d: disabled slaveÑeceived"

243 " flows.\n", 
	`mask_°r
(
mask
, 
sg
.
n_¶aves
),

244 
¶ave
->
¶ave_id
);

245 
ok
 = 
Ál£
;

248 
	`¥ötf
("\n");

250 i‡(
	`Ábs
(
di§u±i⁄
 - 
≥r„˘
) >= .01) {

251 
	`Ârötf
(
°dîr
, "%s: disruption=%.5f differs fromÖerfect=%.5f by"

252 " m‹êth™ .01\n", 
	`mask_°r
(
mask
, 
sg
.
n_¶aves
),

253 
di§u±i⁄
, 
≥r„˘
);

254 
ok
 = 
Ál£
;

257 
ﬁd_a˘ive
 = 
a˘ive
;

258 
ﬁd_n_íabÀd
 = 
n_íabÀd
;

261 
	`‰ì
(
bundÀ
);

262 
	`‰ì
(
Êows
);

263  
ok
 ? 0 : 1;

264 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/tests/test-byte-order.c

17 
	~<c⁄fig.h
>

18 
	~"byã-‹dî.h
"

19 
	~<as£π.h
>

20 
	~<öây≥s.h
>

23 
	$maö
()

25 #i‚de‡
__CHECKER__


27 c⁄° 
uöt16_t
 
s
 = 0xc9bd;

28 c⁄° 
uöt32_t
 
l
 = 0xffe56ae8;

29 c⁄° 
uöt64_t
 
Œ
 = 
	`UINT64_C
(0xb6fe878a9117ecdb);

31 
	`as£π
(
	`ht⁄s
(
	`¡ohs
(
s
)) == s);

32 
	`as£π
(
	`¡ohs
(
	`ht⁄s
(
s
)) == s);

33 
	`as£π
(
	`CONSTANT_HTONS
(
	`¡ohs
(
s
)) == s);

34 
	`as£π
(
	`¡ohs
(
	`CONSTANT_HTONS
(
s
)) == s);

35 
	`as£π
(
	`¡ohs
(
	`CONSTANT_HTONS
(
l
)Ë=(
uöt16_t
)Ü);

36 
	`as£π
(
	`¡ohs
(
	`CONSTANT_HTONS
(
Œ
)Ë=(
uöt16_t
)Ül);

38 
	`as£π
(
	`ht⁄l
(
	`¡ohl
(
l
)) ==Ü);

39 
	`as£π
(
	`¡ohl
(
	`ht⁄l
(
l
)) ==Ü);

40 
	`as£π
(
	`CONSTANT_HTONL
(
	`¡ohl
(
l
)) ==Ü);

41 
	`as£π
(
	`¡ohl
(
	`CONSTANT_HTONL
(
l
)) ==Ü);

42 
	`as£π
(
	`¡ohl
(
	`CONSTANT_HTONL
(
Œ
)Ë=(
uöt32_t
)Ül);

44 
	`as£π
(
	`ht⁄Œ
(
	`¡ohŒ
(
Œ
)) ==Ül);

45 
	`as£π
(
	`¡ohŒ
(
	`ht⁄Œ
(
Œ
)) ==Ül);

46 
	`as£π
(
	`CONSTANT_HTONLL
(
	`¡ohŒ
(
Œ
)) ==Ül);

47 
	`as£π
(
	`¡ohŒ
(
	`CONSTANT_HTONLL
(
Œ
)));

53 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/tests/test-classifier.c

28 
	~<c⁄fig.h
>

29 
	~"˛assifõr.h
"

30 
	~<î∫o.h
>

31 
	~<limôs.h
>

32 
	~"byã-‹dî.h
"

33 
	~"comm™d-löe.h
"

34 
	~"Êow.h
"

35 
	~"oÂ-utû.h
"

36 
	~"∑ckës.h
"

37 
	~"u«lig√d.h
"

39 #unde‡
NDEBUG


40 
	~<as£π.h
>

43 
	#CLS_FIELDS
 \

47 
	`CLS_FIELD
(
tu¬ñ
.
tun_id
, 
TUN_ID
) \

48 
	`CLS_FIELD
(
mëad©a
, 
METADATA
) \

49 
	`CLS_FIELD
(
nw_§c
, 
NW_SRC
) \

50 
	`CLS_FIELD
(
nw_d°
, 
NW_DST
) \

51 
	`CLS_FIELD
(
ö_p‹t
, 
IN_PORT
) \

52 
	`CLS_FIELD
(
vœn_tci
, 
VLAN_TCI
) \

53 
	`CLS_FIELD
(
dl_ty≥
, 
DL_TYPE
) \

54 
	`CLS_FIELD
(
ç_§c
, 
TP_SRC
) \

55 
	`CLS_FIELD
(
ç_d°
, 
TP_DST
) \

56 
	`CLS_FIELD
(
dl_§c
, 
DL_SRC
) \

57 
	`CLS_FIELD
(
dl_d°
, 
DL_DST
) \

58 
	`CLS_FIELD
(
nw_¥Ÿo
, 
NW_PROTO
) \

59 
	`CLS_FIELD
(
nw_tos
, 
NW_DSCP
)

	)

65 
	#CLS_FIELD
(
MEMBER
, 
NAME
Ë
CLS_F_IDX_
##NAME,

	)

66 
	mCLS_FIELDS


67 #unde‡
CLS_FIELD


68 
	mCLS_N_FIELDS


72 
	s˛s_fõld
 {

73 
	mofs
;

74 
	mÀn
;

75 c⁄° *
	m«me
;

78 c⁄° 
˛s_fõld
 
	g˛s_fõlds
[
CLS_N_FIELDS
] = {

79 
	#CLS_FIELD
(
MEMBER
, 
NAME
) \

80 { 
	`off£tof
(
Êow
, 
MEMBER
), \

81  ((
Êow
 *)0)->
MEMBER
, \

82 #NAME },

	)

83 
CLS_FIELDS


84 #unde‡
CLS_FIELD


87 
	sã°_ruÀ
 {

88 
	maux
;

89 
˛s_ruÀ
 
	m˛s_ruÀ
;

92 
ã°_ruÀ
 *

93 
	$ã°_ruÀ_‰om_˛s_ruÀ
(c⁄° 
˛s_ruÀ
 *
ruÀ
)

95  
ruÀ
 ? 
	`CONTAINER_OF
‘uÀ, 
ã°_ruÀ
, 
˛s_ruÀ
Ë: 
NULL
;

96 
	}
}

98 
ã°_ruÀ
 *
make_ruÀ
(
wc_fõlds
, 
¥i‹ôy
,

99 
vÆue_∑t
);

100 
‰ì_ruÀ
(
ã°_ruÀ
 *);

101 
ã°_ruÀ
 *
˛⁄e_ruÀ
(const test_rule *);

104 
	st˛s
 {

105 
size_t
 
	mn_ruÀs
;

106 
size_t
 
	mÆloˇãd_ruÀs
;

107 
ã°_ruÀ
 **
	mruÀs
;

111 
	$t˛s_öô
(
t˛s
 *tcls)

113 
t˛s
->
n_ruÀs
 = 0;

114 
t˛s
->
Æloˇãd_ruÀs
 = 0;

115 
t˛s
->
ruÀs
 = 
NULL
;

116 
	}
}

119 
	$t˛s_de°roy
(
t˛s
 *tcls)

121 i‡(
t˛s
) {

122 
size_t
 
i
;

124 
i
 = 0; i < 
t˛s
->
n_ruÀs
; i++) {

125 
	`‰ì
(
t˛s
->
ruÀs
[
i
]);

127 
	`‰ì
(
t˛s
->
ruÀs
);

129 
	}
}

131 
boﬁ


132 
	$t˛s_is_em±y
(c⁄° 
t˛s
 *tcls)

134  
t˛s
->
n_ruÀs
 == 0;

135 
	}
}

137 
ã°_ruÀ
 *

138 
	$t˛s_ö£π
(
t˛s
 *t˛s, c⁄° 
ã°_ruÀ
 *
ruÀ
)

140 
size_t
 
i
;

142 
i
 = 0; i < 
t˛s
->
n_ruÀs
; i++) {

143 c⁄° 
˛s_ruÀ
 *
pos
 = &
t˛s
->
ruÀs
[
i
]->cls_rule;

144 i‡(
	`˛s_ruÀ_equÆ
(
pos
, &
ruÀ
->
˛s_ruÀ
)) {

146 
	`‰ì_ruÀ
(
t˛s
->
ruÀs
[
i
]);

147 
t˛s
->
ruÀs
[
i
] = 
	`˛⁄e_ruÀ
(
ruÀ
);

148  
t˛s
->
ruÀs
[
i
];

149 } i‡(
pos
->
¥i‹ôy
 < 
ruÀ
->
˛s_ruÀ
.priority) {

154 i‡(
t˛s
->
n_ruÀs
 >t˛s->
Æloˇãd_ruÀs
) {

155 
t˛s
->
ruÀs
 = 
	`x2ƒóŒoc
—˛s->ruÀs, &t˛s->
Æloˇãd_ruÀs
,

156  *
t˛s
->
ruÀs
);

158 i‡(
i
 !
t˛s
->
n_ruÀs
) {

159 
	`memmove
(&
t˛s
->
ruÀs
[
i
 + 1], &tcls->rules[i],

160  *
t˛s
->
ruÀs
 * (t˛s->
n_ruÀs
 - 
i
));

162 
t˛s
->
ruÀs
[
i
] = 
	`˛⁄e_ruÀ
(
ruÀ
);

163 
t˛s
->
n_ruÀs
++;

164  
t˛s
->
ruÀs
[
i
];

165 
	}
}

168 
	$t˛s_ªmove
(
t˛s
 *
˛s
, c⁄° 
ã°_ruÀ
 *
ruÀ
)

170 
size_t
 
i
;

172 
i
 = 0; i < 
˛s
->
n_ruÀs
; i++) {

173 
ã°_ruÀ
 *
pos
 = 
˛s
->
ruÀs
[
i
];

174 i‡(
pos
 =
ruÀ
) {

175 
	`‰ì
(
pos
);

176 
	`memmove
(&
˛s
->
ruÀs
[
i
], &cls->rules[i + 1],

177  *
˛s
->
ruÀs
 * (˛s->
n_ruÀs
 - 
i
 - 1));

178 
˛s
->
n_ruÀs
--;

182 
	`NOT_REACHED
();

183 
	}
}

185 
boﬁ


186 
	$m©ch
(c⁄° 
˛s_ruÀ
 *
wûd_
, c⁄° 
Êow
 *
fixed
)

188 
m©ch
 
wûd
;

189 
f_idx
;

191 
	`möim©ch_ex∑nd
(&
wûd_
->
m©ch
, &
wûd
);

192 
f_idx
 = 0; f_idx < 
CLS_N_FIELDS
; f_idx++) {

193 
boﬁ
 
eq
;

195 i‡(
f_idx
 =
CLS_F_IDX_NW_SRC
) {

196 
eq
 = !((
fixed
->
nw_§c
 ^ 
wûd
.
Êow
.nw_src)

197 & 
wûd
.
wc
.
masks
.
nw_§c
);

198 } i‡(
f_idx
 =
CLS_F_IDX_NW_DST
) {

199 
eq
 = !((
fixed
->
nw_d°
 ^ 
wûd
.
Êow
.nw_dst)

200 & 
wûd
.
wc
.
masks
.
nw_d°
);

201 } i‡(
f_idx
 =
CLS_F_IDX_TP_SRC
) {

202 
eq
 = !((
fixed
->
ç_§c
 ^ 
wûd
.
Êow
.tp_src)

203 & 
wûd
.
wc
.
masks
.
ç_§c
);

204 } i‡(
f_idx
 =
CLS_F_IDX_TP_DST
) {

205 
eq
 = !((
fixed
->
ç_d°
 ^ 
wûd
.
Êow
.tp_dst)

206 & 
wûd
.
wc
.
masks
.
ç_d°
);

207 } i‡(
f_idx
 =
CLS_F_IDX_DL_SRC
) {

208 
eq
 = 
	`ëh_addr_equÆ_ex˚±
(
fixed
->
dl_§c
, 
wûd
.
Êow
.dl_src,

209 
wûd
.
wc
.
masks
.
dl_§c
);

210 } i‡(
f_idx
 =
CLS_F_IDX_DL_DST
) {

211 
eq
 = 
	`ëh_addr_equÆ_ex˚±
(
fixed
->
dl_d°
, 
wûd
.
Êow
.dl_dst,

212 
wûd
.
wc
.
masks
.
dl_d°
);

213 } i‡(
f_idx
 =
CLS_F_IDX_VLAN_TCI
) {

214 
eq
 = !((
fixed
->
vœn_tci
 ^ 
wûd
.
Êow
.vlan_tci)

215 & 
wûd
.
wc
.
masks
.
vœn_tci
);

216 } i‡(
f_idx
 =
CLS_F_IDX_TUN_ID
) {

217 
eq
 = !((
fixed
->
tu¬ñ
.
tun_id
 ^ 
wûd
.
Êow
.tunnel.tun_id)

218 & 
wûd
.
wc
.
masks
.
tu¬ñ
.
tun_id
);

219 } i‡(
f_idx
 =
CLS_F_IDX_METADATA
) {

220 
eq
 = !((
fixed
->
mëad©a
 ^ 
wûd
.
Êow
.metadata)

221 & 
wûd
.
wc
.
masks
.
mëad©a
);

222 } i‡(
f_idx
 =
CLS_F_IDX_NW_DSCP
) {

223 
eq
 = !((
fixed
->
nw_tos
 ^ 
wûd
.
Êow
.nw_tos) &

224 (
wûd
.
wc
.
masks
.
nw_tos
 & 
IP_DSCP_MASK
));

225 } i‡(
f_idx
 =
CLS_F_IDX_NW_PROTO
) {

226 
eq
 = !((
fixed
->
nw_¥Ÿo
 ^ 
wûd
.
Êow
.nw_proto)

227 & 
wûd
.
wc
.
masks
.
nw_¥Ÿo
);

228 } i‡(
f_idx
 =
CLS_F_IDX_DL_TYPE
) {

229 
eq
 = !((
fixed
->
dl_ty≥
 ^ 
wûd
.
Êow
.dl_type)

230 & 
wûd
.
wc
.
masks
.
dl_ty≥
);

231 } i‡(
f_idx
 =
CLS_F_IDX_IN_PORT
) {

232 
eq
 = !((
fixed
->
ö_p‹t
 ^ 
wûd
.
Êow
.in_port)

233 & 
wûd
.
wc
.
masks
.
ö_p‹t
);

235 
	`NOT_REACHED
();

238 i‡(!
eq
) {

239  
Ál£
;

242  
åue
;

243 
	}
}

245 
˛s_ruÀ
 *

246 
	$t˛s_lookup
(c⁄° 
t˛s
 *
˛s
, c⁄° 
Êow
 *flow)

248 
size_t
 
i
;

250 
i
 = 0; i < 
˛s
->
n_ruÀs
; i++) {

251 
ã°_ruÀ
 *
pos
 = 
˛s
->
ruÀs
[
i
];

252 i‡(
	`m©ch
(&
pos
->
˛s_ruÀ
, 
Êow
)) {

253  &
pos
->
˛s_ruÀ
;

256  
NULL
;

257 
	}
}

260 
	$t˛s_dñëe_m©ches
(
t˛s
 *
˛s
, c⁄° 
˛s_ruÀ
 *
èrgë
)

262 
size_t
 
i
;

264 
i
 = 0; i < 
˛s
->
n_ruÀs
; ) {

265 
ã°_ruÀ
 *
pos
 = 
˛s
->
ruÀs
[
i
];

266 i‡(!
	`möimask_has_exåa
(&
pos
->
˛s_ruÀ
.
m©ch
.
mask
,

267 &
èrgë
->
m©ch
.
mask
)) {

268 
Êow
 flow;

270 
	`möiÊow_ex∑nd
(&
pos
->
˛s_ruÀ
.
m©ch
.
Êow
, &flow);

271 i‡(
	`m©ch
(
èrgë
, &
Êow
)) {

272 
	`t˛s_ªmove
(
˛s
, 
pos
);

276 
i
++;

278 
	}
}

280 
ovs_be32
 
	gnw_§c_vÆues
[] = { 
CONSTANT_HTONL
(0xc0a80001),

281 
CONSTANT_HTONL
(0xc0a04455) };

282 
ovs_be32
 
	gnw_d°_vÆues
[] = { 
CONSTANT_HTONL
(0xc0a80002),

283 
CONSTANT_HTONL
(0xc0a04455) };

284 
ovs_be64
 
	gtun_id_vÆues
[] = {

286 
CONSTANT_HTONLL
(
UINT64_C
(0xfedcba9876543210)) };

287 
ovs_be64
 
	gmëad©a_vÆues
[] = {

289 
CONSTANT_HTONLL
(
UINT64_C
(0xfedcba9876543210)) };

290 
uöt16_t
 
	gö_p‹t_vÆues
[] = { 1, 
OFPP_LOCAL
 };

291 
ovs_be16
 
	gvœn_tci_vÆues
[] = { 
CONSTANT_HTONS
(101), CONSTANT_HTONS(0) };

292 
ovs_be16
 
	gdl_ty≥_vÆues
[]

293 { 
CONSTANT_HTONS
(
ETH_TYPE_IP
), CONSTANT_HTONS(
ETH_TYPE_ARP
) };

294 
ovs_be16
 
	gç_§c_vÆues
[] = { 
CONSTANT_HTONS
(49362),

295 
CONSTANT_HTONS
(80) };

296 
ovs_be16
 
	gç_d°_vÆues
[] = { 
CONSTANT_HTONS
(6667), CONSTANT_HTONS(22) };

297 
uöt8_t
 
	gdl_§c_vÆues
[][6] = { { 0x00, 0x02, 0xe3, 0x0f, 0x80, 0xa4 },

299 
uöt8_t
 
	gdl_d°_vÆues
[][6] = { { 0x4a, 0x27, 0x71, 0xae, 0x64, 0xc1 },

301 
uöt8_t
 
	gnw_¥Ÿo_vÆues
[] = { 
IPPROTO_TCP
, 
IPPROTO_ICMP
 };

302 
uöt8_t
 
	gnw_ds˝_vÆues
[] = { 48, 0 };

304 *
	gvÆues
[
CLS_N_FIELDS
][2];

307 
	$öô_vÆues
()

309 
vÆues
[
CLS_F_IDX_TUN_ID
][0] = &
tun_id_vÆues
[0];

310 
vÆues
[
CLS_F_IDX_TUN_ID
][1] = &
tun_id_vÆues
[1];

312 
vÆues
[
CLS_F_IDX_METADATA
][0] = &
mëad©a_vÆues
[0];

313 
vÆues
[
CLS_F_IDX_METADATA
][1] = &
mëad©a_vÆues
[1];

315 
vÆues
[
CLS_F_IDX_IN_PORT
][0] = &
ö_p‹t_vÆues
[0];

316 
vÆues
[
CLS_F_IDX_IN_PORT
][1] = &
ö_p‹t_vÆues
[1];

318 
vÆues
[
CLS_F_IDX_VLAN_TCI
][0] = &
vœn_tci_vÆues
[0];

319 
vÆues
[
CLS_F_IDX_VLAN_TCI
][1] = &
vœn_tci_vÆues
[1];

321 
vÆues
[
CLS_F_IDX_DL_SRC
][0] = 
dl_§c_vÆues
[0];

322 
vÆues
[
CLS_F_IDX_DL_SRC
][1] = 
dl_§c_vÆues
[1];

324 
vÆues
[
CLS_F_IDX_DL_DST
][0] = 
dl_d°_vÆues
[0];

325 
vÆues
[
CLS_F_IDX_DL_DST
][1] = 
dl_d°_vÆues
[1];

327 
vÆues
[
CLS_F_IDX_DL_TYPE
][0] = &
dl_ty≥_vÆues
[0];

328 
vÆues
[
CLS_F_IDX_DL_TYPE
][1] = &
dl_ty≥_vÆues
[1];

330 
vÆues
[
CLS_F_IDX_NW_SRC
][0] = &
nw_§c_vÆues
[0];

331 
vÆues
[
CLS_F_IDX_NW_SRC
][1] = &
nw_§c_vÆues
[1];

333 
vÆues
[
CLS_F_IDX_NW_DST
][0] = &
nw_d°_vÆues
[0];

334 
vÆues
[
CLS_F_IDX_NW_DST
][1] = &
nw_d°_vÆues
[1];

336 
vÆues
[
CLS_F_IDX_NW_PROTO
][0] = &
nw_¥Ÿo_vÆues
[0];

337 
vÆues
[
CLS_F_IDX_NW_PROTO
][1] = &
nw_¥Ÿo_vÆues
[1];

339 
vÆues
[
CLS_F_IDX_NW_DSCP
][0] = &
nw_ds˝_vÆues
[0];

340 
vÆues
[
CLS_F_IDX_NW_DSCP
][1] = &
nw_ds˝_vÆues
[1];

342 
vÆues
[
CLS_F_IDX_TP_SRC
][0] = &
ç_§c_vÆues
[0];

343 
vÆues
[
CLS_F_IDX_TP_SRC
][1] = &
ç_§c_vÆues
[1];

345 
vÆues
[
CLS_F_IDX_TP_DST
][0] = &
ç_d°_vÆues
[0];

346 
vÆues
[
CLS_F_IDX_TP_DST
][1] = &
ç_d°_vÆues
[1];

347 
	}
}

349 
	#N_NW_SRC_VALUES
 
	`ARRAY_SIZE
(
nw_§c_vÆues
)

	)

350 
	#N_NW_DST_VALUES
 
	`ARRAY_SIZE
(
nw_d°_vÆues
)

	)

351 
	#N_TUN_ID_VALUES
 
	`ARRAY_SIZE
(
tun_id_vÆues
)

	)

352 
	#N_METADATA_VALUES
 
	`ARRAY_SIZE
(
mëad©a_vÆues
)

	)

353 
	#N_IN_PORT_VALUES
 
	`ARRAY_SIZE
(
ö_p‹t_vÆues
)

	)

354 
	#N_VLAN_TCI_VALUES
 
	`ARRAY_SIZE
(
vœn_tci_vÆues
)

	)

355 
	#N_DL_TYPE_VALUES
 
	`ARRAY_SIZE
(
dl_ty≥_vÆues
)

	)

356 
	#N_TP_SRC_VALUES
 
	`ARRAY_SIZE
(
ç_§c_vÆues
)

	)

357 
	#N_TP_DST_VALUES
 
	`ARRAY_SIZE
(
ç_d°_vÆues
)

	)

358 
	#N_DL_SRC_VALUES
 
	`ARRAY_SIZE
(
dl_§c_vÆues
)

	)

359 
	#N_DL_DST_VALUES
 
	`ARRAY_SIZE
(
dl_d°_vÆues
)

	)

360 
	#N_NW_PROTO_VALUES
 
	`ARRAY_SIZE
(
nw_¥Ÿo_vÆues
)

	)

361 
	#N_NW_DSCP_VALUES
 
	`ARRAY_SIZE
(
nw_ds˝_vÆues
)

	)

363 
	#N_FLOW_VALUES
 (
N_NW_SRC_VALUES
 * \

364 
N_NW_DST_VALUES
 * \

365 
N_TUN_ID_VALUES
 * \

366 
N_IN_PORT_VALUES
 * \

367 
N_VLAN_TCI_VALUES
 * \

368 
N_DL_TYPE_VALUES
 * \

369 
N_TP_SRC_VALUES
 * \

370 
N_TP_DST_VALUES
 * \

371 
N_DL_SRC_VALUES
 * \

372 
N_DL_DST_VALUES
 * \

373 
N_NW_PROTO_VALUES
 * \

374 
N_NW_DSCP_VALUES
)

	)

377 
	$gë_vÆue
(*
x
, 
n_vÆues
)

379 
ªm
 = *
x
 % 
n_vÆues
;

380 *
x
 /
n_vÆues
;

381  
ªm
;

382 
	}
}

385 
	$com∑ª_˛assifõrs
(
˛assifõr
 *
˛s
, 
t˛s
 *tcls)

387 c⁄° 
c⁄fidí˚
 = 500;

388 
i
;

390 
	`as£π
(
	`˛assifõr_cou¡
(
˛s
Ë=
t˛s
->
n_ruÀs
);

391 
i
 = 0; i < 
c⁄fidí˚
; i++) {

392 
˛s_ruÀ
 *
¸0
, *
¸1
;

393 
Êow
 flow;

394 
x
;

396 
x
 = 
	`ønd
 (Ë% 
N_FLOW_VALUES
;

397 
	`mem£t
(&
Êow
, 0,  flow);

398 
Êow
.
nw_§c
 = 
nw_§c_vÆues
[
	`gë_vÆue
(&
x
, 
N_NW_SRC_VALUES
)];

399 
Êow
.
nw_d°
 = 
nw_d°_vÆues
[
	`gë_vÆue
(&
x
, 
N_NW_DST_VALUES
)];

400 
Êow
.
tu¬ñ
.
tun_id
 = 
tun_id_vÆues
[
	`gë_vÆue
(&
x
, 
N_TUN_ID_VALUES
)];

401 
Êow
.
mëad©a
 = 
mëad©a_vÆues
[
	`gë_vÆue
(&
x
, 
N_METADATA_VALUES
)];

402 
Êow
.
ö_p‹t
 = 
ö_p‹t_vÆues
[
	`gë_vÆue
(&
x
, 
N_IN_PORT_VALUES
)];

403 
Êow
.
vœn_tci
 = 
vœn_tci_vÆues
[
	`gë_vÆue
(&
x
, 
N_VLAN_TCI_VALUES
)];

404 
Êow
.
dl_ty≥
 = 
dl_ty≥_vÆues
[
	`gë_vÆue
(&
x
, 
N_DL_TYPE_VALUES
)];

405 
Êow
.
ç_§c
 = 
ç_§c_vÆues
[
	`gë_vÆue
(&
x
, 
N_TP_SRC_VALUES
)];

406 
Êow
.
ç_d°
 = 
ç_d°_vÆues
[
	`gë_vÆue
(&
x
, 
N_TP_DST_VALUES
)];

407 
	`mem˝y
(
Êow
.
dl_§c
, 
dl_§c_vÆues
[
	`gë_vÆue
(&
x
, 
N_DL_SRC_VALUES
)],

408 
ETH_ADDR_LEN
);

409 
	`mem˝y
(
Êow
.
dl_d°
, 
dl_d°_vÆues
[
	`gë_vÆue
(&
x
, 
N_DL_DST_VALUES
)],

410 
ETH_ADDR_LEN
);

411 
Êow
.
nw_¥Ÿo
 = 
nw_¥Ÿo_vÆues
[
	`gë_vÆue
(&
x
, 
N_NW_PROTO_VALUES
)];

412 
Êow
.
nw_tos
 = 
nw_ds˝_vÆues
[
	`gë_vÆue
(&
x
, 
N_NW_DSCP_VALUES
)];

414 
¸0
 = 
	`˛assifõr_lookup
(
˛s
, &
Êow
);

415 
¸1
 = 
	`t˛s_lookup
(
t˛s
, &
Êow
);

416 
	`as£π
((
¸0
 =
NULL
Ë=(
¸1
 == NULL));

417 i‡(
¸0
 !
NULL
) {

418 c⁄° 
ã°_ruÀ
 *
å0
 = 
	`ã°_ruÀ_‰om_˛s_ruÀ
(
¸0
);

419 c⁄° 
ã°_ruÀ
 *
å1
 = 
	`ã°_ruÀ_‰om_˛s_ruÀ
(
¸1
);

421 
	`as£π
(
	`˛s_ruÀ_equÆ
(
¸0
, 
¸1
));

422 
	`as£π
(
å0
->
aux
 =
å1
->aux);

425 
	}
}

428 
	$de°roy_˛assifõr
(
˛assifõr
 *
˛s
)

430 
ã°_ruÀ
 *
ruÀ
, *
√xt_ruÀ
;

431 
˛s_curs‹
 
curs‹
;

433 
	`˛s_curs‹_öô
(&
curs‹
, 
˛s
, 
NULL
);

434 
	`CLS_CURSOR_FOR_EACH_SAFE
 (
ruÀ
, 
√xt_ruÀ
, 
˛s_ruÀ
, &
curs‹
) {

435 
	`˛assifõr_ªmove
(
˛s
, &
ruÀ
->
˛s_ruÀ
);

436 
	`‰ì_ruÀ
(
ruÀ
);

438 
	`˛assifõr_de°roy
(
˛s
);

439 
	}
}

442 
	$check_èbÀs
(c⁄° 
˛assifõr
 *
˛s
,

443 
n_èbÀs
, 
n_ruÀs
, 
n_dups
)

445 c⁄° 
˛s_èbÀ
 *
èbÀ
;

446 
ã°_ruÀ
 *test_rule;

447 
˛s_curs‹
 
curs‹
;

448 
found_èbÀs
 = 0;

449 
found_ruÀs
 = 0;

450 
found_dups
 = 0;

451 
found_ruÀs2
 = 0;

453 
	`HMAP_FOR_EACH
 (
èbÀ
, 
hm≠_node
, &
˛s
->
èbÀs
) {

454 c⁄° 
˛s_ruÀ
 *
hód
;

456 
	`as£π
(!
	`hm≠_is_em±y
(&
èbÀ
->
ruÀs
));

458 
found_èbÀs
++;

459 
	`HMAP_FOR_EACH
 (
hód
, 
hm≠_node
, &
èbÀ
->
ruÀs
) {

460 
¥ev_¥i‹ôy
 = 
UINT_MAX
;

461 c⁄° 
˛s_ruÀ
 *
ruÀ
;

463 
found_ruÀs
++;

464 
	`LIST_FOR_EACH
 (
ruÀ
, 
li°
, &
hód
->list) {

465 
	`as£π
(
ruÀ
->
¥i‹ôy
 < 
¥ev_¥i‹ôy
);

466 
¥ev_¥i‹ôy
 = 
ruÀ
->
¥i‹ôy
;

467 
found_ruÀs
++;

468 
found_dups
++;

469 
	`as£π
(
	`˛assifõr_föd_ruÀ_exa˘ly
(
˛s
, 
ruÀ
) ==Ñule);

474 
	`as£π
(
found_èbÀs
 =
	`hm≠_cou¡
(&
˛s
->
èbÀs
));

475 
	`as£π
(
n_èbÀs
 =-1 ||Ç_èbÀ†=
	`hm≠_cou¡
(&
˛s
->
èbÀs
));

476 
	`as£π
(
n_ruÀs
 =-1 || 
found_ruÀs
 ==Ç_rules);

477 
	`as£π
(
n_dups
 =-1 || 
found_dups
 ==Ç_dups);

479 
	`˛s_curs‹_öô
(&
curs‹
, 
˛s
, 
NULL
);

480 
	`CLS_CURSOR_FOR_EACH
 (
ã°_ruÀ
, 
˛s_ruÀ
, &
curs‹
) {

481 
found_ruÀs2
++;

483 
	`as£π
(
found_ruÀs
 =
found_ruÀs2
);

484 
	}
}

486 
ã°_ruÀ
 *

487 
	$make_ruÀ
(
wc_fõlds
, 
¥i‹ôy
, 
vÆue_∑t
)

489 c⁄° 
˛s_fõld
 *
f
;

490 
ã°_ruÀ
 *
ruÀ
;

491 
m©ch
 match;

493 
	`m©ch_öô_ˇtchÆl
(&
m©ch
);

494 
f
 = &
˛s_fõlds
[0]; f < &˛s_fõlds[
CLS_N_FIELDS
]; f++) {

495 
f_idx
 = 
f
 - 
˛s_fõlds
;

496 
vÆue_idx
 = (
vÆue_∑t
 & (1u << 
f_idx
)) != 0;

497 
	`mem˝y
((*Ë&
m©ch
.
Êow
 + 
f
->
ofs
,

498 
vÆues
[
f_idx
][
vÆue_idx
], 
f
->
Àn
);

500 i‡(
f_idx
 =
CLS_F_IDX_NW_SRC
) {

501 
m©ch
.
wc
.
masks
.
nw_§c
 = 
	`ht⁄l
(
UINT32_MAX
);

502 } i‡(
f_idx
 =
CLS_F_IDX_NW_DST
) {

503 
m©ch
.
wc
.
masks
.
nw_d°
 = 
	`ht⁄l
(
UINT32_MAX
);

504 } i‡(
f_idx
 =
CLS_F_IDX_TP_SRC
) {

505 
m©ch
.
wc
.
masks
.
ç_§c
 = 
	`ht⁄s
(
UINT16_MAX
);

506 } i‡(
f_idx
 =
CLS_F_IDX_TP_DST
) {

507 
m©ch
.
wc
.
masks
.
ç_d°
 = 
	`ht⁄s
(
UINT16_MAX
);

508 } i‡(
f_idx
 =
CLS_F_IDX_DL_SRC
) {

509 
	`mem£t
(
m©ch
.
wc
.
masks
.
dl_§c
, 0xff, 
ETH_ADDR_LEN
);

510 } i‡(
f_idx
 =
CLS_F_IDX_DL_DST
) {

511 
	`mem£t
(
m©ch
.
wc
.
masks
.
dl_d°
, 0xff, 
ETH_ADDR_LEN
);

512 } i‡(
f_idx
 =
CLS_F_IDX_VLAN_TCI
) {

513 
m©ch
.
wc
.
masks
.
vœn_tci
 = 
	`ht⁄s
(
UINT16_MAX
);

514 } i‡(
f_idx
 =
CLS_F_IDX_TUN_ID
) {

515 
m©ch
.
wc
.
masks
.
tu¬ñ
.
tun_id
 = 
	`ht⁄Œ
(
UINT64_MAX
);

516 } i‡(
f_idx
 =
CLS_F_IDX_METADATA
) {

517 
m©ch
.
wc
.
masks
.
mëad©a
 = 
	`ht⁄Œ
(
UINT64_MAX
);

518 } i‡(
f_idx
 =
CLS_F_IDX_NW_DSCP
) {

519 
m©ch
.
wc
.
masks
.
nw_tos
 |
IP_DSCP_MASK
;

520 } i‡(
f_idx
 =
CLS_F_IDX_NW_PROTO
) {

521 
m©ch
.
wc
.
masks
.
nw_¥Ÿo
 = 
UINT8_MAX
;

522 } i‡(
f_idx
 =
CLS_F_IDX_DL_TYPE
) {

523 
m©ch
.
wc
.
masks
.
dl_ty≥
 = 
	`ht⁄s
(
UINT16_MAX
);

524 } i‡(
f_idx
 =
CLS_F_IDX_IN_PORT
) {

525 
m©ch
.
wc
.
masks
.
ö_p‹t
 = 
UINT16_MAX
;

527 
	`NOT_REACHED
();

531 
ruÀ
 = 
	`xzÆloc
( *rule);

532 
	`˛s_ruÀ_öô
(&
ruÀ
->
˛s_ruÀ
, &
m©ch
, 
wc_fõlds
 ? 
¥i‹ôy
 : 
UINT_MAX
);

533  
ruÀ
;

534 
	}
}

536 
ã°_ruÀ
 *

537 
	$˛⁄e_ruÀ
(c⁄° 
ã°_ruÀ
 *
§c
)

539 
ã°_ruÀ
 *
d°
;

541 
d°
 = 
	`xmÆloc
( *dst);

542 
d°
->
aux
 = 
§c
->aux;

543 
	`˛s_ruÀ_˛⁄e
(&
d°
->
˛s_ruÀ
, &
§c
->cls_rule);

544  
d°
;

545 
	}
}

548 
	$‰ì_ruÀ
(
ã°_ruÀ
 *
ruÀ
)

550 
	`˛s_ruÀ_de°roy
(&
ruÀ
->
˛s_ruÀ
);

551 
	`‰ì
(
ruÀ
);

552 
	}
}

555 
	$shufÊe
(*
p
, 
size_t
 
n
)

557 ; 
n
 > 1;Ç--, 
p
++) {

558 *
q
 = &
p
[
	`ønd
(Ë% 
n
];

559 
tmp
 = *
p
;

560 *
p
 = *
q
;

561 *
q
 = 
tmp
;

563 
	}
}

566 
	$shufÊe_u32s
(
uöt32_t
 *
p
, 
size_t
 
n
)

568 ; 
n
 > 1;Ç--, 
p
++) {

569 
uöt32_t
 *
q
 = &
p
[
	`ønd
(Ë% 
n
];

570 
uöt32_t
 
tmp
 = *
p
;

571 *
p
 = *
q
;

572 *
q
 = 
tmp
;

574 
	}
}

580 
	$ã°_em±y
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

582 
˛assifõr
 
˛s
;

583 
t˛s
Åcls;

585 
	`˛assifõr_öô
(&
˛s
);

586 
	`t˛s_öô
(&
t˛s
);

587 
	`as£π
(
	`˛assifõr_is_em±y
(&
˛s
));

588 
	`as£π
(
	`t˛s_is_em±y
(&
t˛s
));

589 
	`com∑ª_˛assifõrs
(&
˛s
, &
t˛s
);

590 
	`˛assifõr_de°roy
(&
˛s
);

591 
	`t˛s_de°roy
(&
t˛s
);

592 
	}
}

596 
	$ã°_de°roy_nuŒ
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

598 
	`˛assifõr_de°roy
(
NULL
);

599 
	}
}

603 
	$ã°_sögÀ_ruÀ
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

605 
wc_fõlds
;

607 
wc_fõlds
 = 0; wc_fõld†< (1u << 
CLS_N_FIELDS
); wc_fields++) {

608 
˛assifõr
 
˛s
;

609 
ã°_ruÀ
 *
ruÀ
, *
t˛s_ruÀ
;

610 
t˛s
Åcls;

612 
ruÀ
 = 
	`make_ruÀ
(
wc_fõlds
,

613 
	`hash_byãs
(&
wc_fõlds
,  wc_fields, 0), 0);

615 
	`˛assifõr_öô
(&
˛s
);

616 
	`t˛s_öô
(&
t˛s
);

618 
t˛s_ruÀ
 = 
	`t˛s_ö£π
(&
t˛s
, 
ruÀ
);

619 
	`˛assifõr_ö£π
(&
˛s
, &
ruÀ
->
˛s_ruÀ
);

620 
	`check_èbÀs
(&
˛s
, 1, 1, 0);

621 
	`com∑ª_˛assifõrs
(&
˛s
, &
t˛s
);

623 
	`˛assifõr_ªmove
(&
˛s
, &
ruÀ
->
˛s_ruÀ
);

624 
	`t˛s_ªmove
(&
t˛s
, 
t˛s_ruÀ
);

625 
	`as£π
(
	`˛assifõr_is_em±y
(&
˛s
));

626 
	`as£π
(
	`t˛s_is_em±y
(&
t˛s
));

627 
	`com∑ª_˛assifõrs
(&
˛s
, &
t˛s
);

629 
	`‰ì_ruÀ
(
ruÀ
);

630 
	`˛assifõr_de°roy
(&
˛s
);

631 
	`t˛s_de°roy
(&
t˛s
);

633 
	}
}

637 
	$ã°_ruÀ_ª∂a˚mít
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

639 
wc_fõlds
;

641 
wc_fõlds
 = 0; wc_fõld†< (1u << 
CLS_N_FIELDS
); wc_fields++) {

642 
˛assifõr
 
˛s
;

643 
ã°_ruÀ
 *
ruÀ1
;

644 
ã°_ruÀ
 *
ruÀ2
;

645 
t˛s
Åcls;

647 
ruÀ1
 = 
	`make_ruÀ
(
wc_fõlds
, 
OFP_DEFAULT_PRIORITY
, 
UINT_MAX
);

648 
ruÀ2
 = 
	`make_ruÀ
(
wc_fõlds
, 
OFP_DEFAULT_PRIORITY
, 
UINT_MAX
);

649 
ruÀ2
->
aux
 += 5;

650 
ruÀ2
->
aux
 += 5;

652 
	`˛assifõr_öô
(&
˛s
);

653 
	`t˛s_öô
(&
t˛s
);

654 
	`t˛s_ö£π
(&
t˛s
, 
ruÀ1
);

655 
	`˛assifõr_ö£π
(&
˛s
, &
ruÀ1
->
˛s_ruÀ
);

656 
	`check_èbÀs
(&
˛s
, 1, 1, 0);

657 
	`com∑ª_˛assifõrs
(&
˛s
, &
t˛s
);

658 
	`t˛s_de°roy
(&
t˛s
);

660 
	`t˛s_öô
(&
t˛s
);

661 
	`t˛s_ö£π
(&
t˛s
, 
ruÀ2
);

662 
	`as£π
(
	`ã°_ruÀ_‰om_˛s_ruÀ
(

663 
	`˛assifõr_ª∂a˚
(&
˛s
, &
ruÀ2
->
˛s_ruÀ
)Ë=
ruÀ1
);

664 
	`‰ì_ruÀ
(
ruÀ1
);

665 
	`check_èbÀs
(&
˛s
, 1, 1, 0);

666 
	`com∑ª_˛assifõrs
(&
˛s
, &
t˛s
);

667 
	`t˛s_de°roy
(&
t˛s
);

668 
	`de°roy_˛assifõr
(&
˛s
);

670 
	}
}

673 
	$Á˘‹ül
(
n_ôems
)

675 
n
, 
i
;

677 
n
 = 1;

678 
i
 = 2; i <
n_ôems
; i++) {

679 
n
 *
i
;

681  
n
;

682 
	}
}

685 
	$sw≠
(*
a
, *
b
)

687 
tmp
 = *
a
;

688 *
a
 = *
b
;

689 *
b
 = 
tmp
;

690 
	}
}

693 
	$ªvî£
(*
a
, 
n
)

695 
i
;

697 
i
 = 0; i < 
n
 / 2; i++) {

698 
j
 = 
n
 - (
i
 + 1);

699 
	`sw≠
(&
a
[
i
], &a[
j
]);

701 
	}
}

703 
boﬁ


704 
	$√xt_≥rmuèti⁄
(*
a
, 
n
)

706 
k
;

708 
k
 = 
n
 - 2; k >= 0; k--) {

709 i‡(
a
[
k
] <á[k + 1]) {

710 
l
;

712 
l
 = 
n
 - 1; ;Ü--) {

713 i‡(
a
[
l
] >á[
k
]) {

714 
	`sw≠
(&
a
[
k
], &a[
l
]);

715 
	`ªvî£
(
a
 + (
k
 + 1), 
n
 - (k + 1));

716  
åue
;

721  
Ál£
;

722 
	}
}

726 
	$ã°_m™y_ruÀs_ö_⁄e_li°
 (
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

728 íum { 
N_RULES
 = 3 };

729 
n_¥is
;

731 
n_¥is
 = 
N_RULES
;Ç_pris >= 1;Ç_pris--) {

732 
›s
[
N_RULES
 * 2];

733 
¥is
[
N_RULES
];

734 
n_≥rmuèti⁄s
;

735 
i
;

737 
¥is
[0] = 0;

738 
i
 = 1; i < 
N_RULES
; i++) {

739 
¥is
[
i
] =Öris[ò- 1] + (
n_¥is
 > i);

742 
i
 = 0; i < 
N_RULES
 * 2; i++) {

743 
›s
[
i
] = i / 2;

746 
n_≥rmuèti⁄s
 = 0;

748 
ã°_ruÀ
 *
ruÀs
[
N_RULES
];

749 
ã°_ruÀ
 *
t˛s_ruÀs
[
N_RULES
];

750 
¥i_ruÀs
[
N_RULES
];

751 
˛assifõr
 
˛s
;

752 
t˛s
Åcls;

754 
n_≥rmuèti⁄s
++;

756 
i
 = 0; i < 
N_RULES
; i++) {

757 
ruÀs
[
i
] = 
	`make_ruÀ
(456, 
¥is
[i], 0);

758 
t˛s_ruÀs
[
i
] = 
NULL
;

759 
¥i_ruÀs
[
i
] = -1;

762 
	`˛assifõr_öô
(&
˛s
);

763 
	`t˛s_öô
(&
t˛s
);

765 
i
 = 0; i < 
	`ARRAY_SIZE
(
›s
); i++) {

766 
j
 = 
›s
[
i
];

767 
m
, 
n
;

769 i‡(!
t˛s_ruÀs
[
j
]) {

770 
ã°_ruÀ
 *
di•œ˚d_ruÀ
;

772 
t˛s_ruÀs
[
j
] = 
	`t˛s_ö£π
(&
t˛s
, 
ruÀs
[j]);

773 
di•œ˚d_ruÀ
 = 
	`ã°_ruÀ_‰om_˛s_ruÀ
(

774 
	`˛assifõr_ª∂a˚
(&
˛s
, &
ruÀs
[
j
]->
˛s_ruÀ
));

775 i‡(
¥i_ruÀs
[
¥is
[
j
]] >= 0) {

776 
k
 = 
¥i_ruÀs
[
¥is
[
j
]];

777 
	`as£π
(
di•œ˚d_ruÀ
 !
NULL
);

778 
	`as£π
(
di•œ˚d_ruÀ
 !
ruÀs
[
j
]);

779 
	`as£π
(
¥is
[
j
] =
di•œ˚d_ruÀ
->
˛s_ruÀ
.
¥i‹ôy
);

780 
t˛s_ruÀs
[
k
] = 
NULL
;

782 
	`as£π
(
di•œ˚d_ruÀ
 =
NULL
);

784 
¥i_ruÀs
[
¥is
[
j
]] = j;

786 
	`˛assifõr_ªmove
(&
˛s
, &
ruÀs
[
j
]->
˛s_ruÀ
);

787 
	`t˛s_ªmove
(&
t˛s
, 
t˛s_ruÀs
[
j
]);

788 
t˛s_ruÀs
[
j
] = 
NULL
;

789 
¥i_ruÀs
[
¥is
[
j
]] = -1;

792 
n
 = 0;

793 
m
 = 0; m < 
N_RULES
; m++) {

794 
n
 +
t˛s_ruÀs
[
m
] !
NULL
;

796 
	`check_èbÀs
(&
˛s
, 
n
 > 0,Ç,Ç - 1);

798 
	`com∑ª_˛assifõrs
(&
˛s
, &
t˛s
);

801 
	`˛assifõr_de°roy
(&
˛s
);

802 
	`t˛s_de°roy
(&
t˛s
);

804 
i
 = 0; i < 
N_RULES
; i++) {

805 
	`‰ì_ruÀ
(
ruÀs
[
i
]);

807 } 
	`√xt_≥rmuèti⁄
(
›s
, 
	`ARRAY_SIZE
(ops)));

808 
	`as£π
(
n_≥rmuèti⁄s
 =(
	`Á˘‹ül
(
N_RULES
 * 2) >> N_RULES));

810 
	}
}

813 
	$cou¡_⁄es
(
x
)

815 
n
 = 0;

817 
x
) {

818 
x
 = 
	`zîo_rightmo°_1bô
(x);

819 
n
++;

822  
n
;

823 
	}
}

825 
boﬁ


826 
	$¨øy_c⁄èös
(*
¨øy
, 
n
, 
vÆue
)

828 
i
;

830 
i
 = 0; i < 
n
; i++) {

831 i‡(
¨øy
[
i
] =
vÆue
) {

832  
åue
;

836  
Ál£
;

837 
	}
}

842 
	$ã°_m™y_ruÀs_ö_⁄e_èbÀ
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

844 
ôî©i⁄
;

846 
ôî©i⁄
 = 0; iteration < 50; iteration++) {

847 íum { 
N_RULES
 = 20 };

848 
ã°_ruÀ
 *
ruÀs
[
N_RULES
];

849 
ã°_ruÀ
 *
t˛s_ruÀs
[
N_RULES
];

850 
˛assifõr
 
˛s
;

851 
t˛s
Åcls;

852 
vÆue_∑ts
[
N_RULES
];

853 
vÆue_mask
;

854 
wcf
;

855 
i
;

858 
wcf
 = 
	`ønd
(Ë& ((1u << 
CLS_N_FIELDS
) - 1);

859 
vÆue_mask
 = ~
wcf
 & ((1u << 
CLS_N_FIELDS
) - 1);

860 } (1 << 
	`cou¡_⁄es
(
vÆue_mask
)Ë< 
N_RULES
);

862 
	`˛assifõr_öô
(&
˛s
);

863 
	`t˛s_öô
(&
t˛s
);

865 
i
 = 0; i < 
N_RULES
; i++) {

866 
¥i‹ôy
 = 
	`ønd
();

869 
vÆue_∑ts
[
i
] = 
	`ønd
(Ë& 
vÆue_mask
;

870 } 
	`¨øy_c⁄èös
(
vÆue_∑ts
, 
i
, value_pats[i]));

872 
ruÀs
[
i
] = 
	`make_ruÀ
(
wcf
, 
¥i‹ôy
, 
vÆue_∑ts
[i]);

873 
t˛s_ruÀs
[
i
] = 
	`t˛s_ö£π
(&
t˛s
, 
ruÀs
[i]);

874 
	`˛assifõr_ö£π
(&
˛s
, &
ruÀs
[
i
]->
˛s_ruÀ
);

876 
	`check_èbÀs
(&
˛s
, 1, 
i
 + 1, 0);

877 
	`com∑ª_˛assifõrs
(&
˛s
, &
t˛s
);

880 
i
 = 0; i < 
N_RULES
; i++) {

881 
	`t˛s_ªmove
(&
t˛s
, 
t˛s_ruÀs
[
i
]);

882 
	`˛assifõr_ªmove
(&
˛s
, &
ruÀs
[
i
]->
˛s_ruÀ
);

883 
	`‰ì_ruÀ
(
ruÀs
[
i
]);

885 
	`check_èbÀs
(&
˛s
, 
i
 < 
N_RULES
 - 1, N_RULES - (i + 1), 0);

886 
	`com∑ª_˛assifõrs
(&
˛s
, &
t˛s
);

889 
	`˛assifõr_de°roy
(&
˛s
);

890 
	`t˛s_de°roy
(&
t˛s
);

892 
	}
}

897 
	$ã°_m™y_ruÀs_ö_n_èbÀs
(
n_èbÀs
)

899 íum { 
MAX_RULES
 = 50 };

900 
wcfs
[10];

901 
ôî©i⁄
;

902 
i
;

904 
	`as£π
(
n_èbÀs
 < 10);

905 
i
 = 0; i < 
n_èbÀs
; i++) {

907 
wcfs
[
i
] = 
	`ønd
(Ë& ((1u << 
CLS_N_FIELDS
) - 1);

908 } 
	`¨øy_c⁄èös
(
wcfs
, 
i
, wcfs[i]));

911 
ôî©i⁄
 = 0; iteration < 30; iteration++) {

912 
¥i‹ôõs
[
MAX_RULES
];

913 
˛assifõr
 
˛s
;

914 
t˛s
Åcls;

916 
	`§™d
(
ôî©i⁄
);

917 
i
 = 0; i < 
MAX_RULES
; i++) {

918 
¥i‹ôõs
[
i
] = i * 129;

920 
	`shufÊe
(
¥i‹ôõs
, 
	`ARRAY_SIZE
(priorities));

922 
	`˛assifõr_öô
(&
˛s
);

923 
	`t˛s_öô
(&
t˛s
);

925 
i
 = 0; i < 
MAX_RULES
; i++) {

926 
ã°_ruÀ
 *
ruÀ
;

927 
¥i‹ôy
 = 
¥i‹ôõs
[
i
];

928 
wcf
 = 
wcfs
[
	`ønd
(Ë% 
n_èbÀs
];

929 
vÆue_∑t
 = 
	`ønd
(Ë& ((1u << 
CLS_N_FIELDS
) - 1);

930 
ruÀ
 = 
	`make_ruÀ
(
wcf
, 
¥i‹ôy
, 
vÆue_∑t
);

931 
	`t˛s_ö£π
(&
t˛s
, 
ruÀ
);

932 
	`˛assifõr_ö£π
(&
˛s
, &
ruÀ
->
˛s_ruÀ
);

933 
	`check_èbÀs
(&
˛s
, -1, 
i
 + 1, -1);

934 
	`com∑ª_˛assifõrs
(&
˛s
, &
t˛s
);

937 !
	`˛assifõr_is_em±y
(&
˛s
)) {

938 
ã°_ruÀ
 *
ruÀ
, *
√xt_ruÀ
;

939 
ã°_ruÀ
 *
èrgë
;

940 
˛s_curs‹
 
curs‹
;

942 
èrgë
 = 
	`˛⁄e_ruÀ
(
t˛s
.
ruÀs
[
	`ønd
(Ë%Å˛s.
n_ruÀs
]);

944 
	`˛s_curs‹_öô
(&
curs‹
, &
˛s
, &
èrgë
->
˛s_ruÀ
);

945 
	`CLS_CURSOR_FOR_EACH_SAFE
 (
ruÀ
, 
√xt_ruÀ
, 
˛s_ruÀ
, &
curs‹
) {

946 
	`˛assifõr_ªmove
(&
˛s
, &
ruÀ
->
˛s_ruÀ
);

947 
	`‰ì_ruÀ
(
ruÀ
);

949 
	`t˛s_dñëe_m©ches
(&
t˛s
, &
èrgë
->
˛s_ruÀ
);

950 
	`com∑ª_˛assifõrs
(&
˛s
, &
t˛s
);

951 
	`check_èbÀs
(&
˛s
, -1, -1, -1);

952 
	`‰ì_ruÀ
(
èrgë
);

955 
	`de°roy_˛assifõr
(&
˛s
);

956 
	`t˛s_de°roy
(&
t˛s
);

958 
	}
}

961 
	$ã°_m™y_ruÀs_ö_two_èbÀs
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

963 
	`ã°_m™y_ruÀs_ö_n_èbÀs
(2);

964 
	}
}

967 
	$ã°_m™y_ruÀs_ö_five_èbÀs
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

969 
	`ã°_m™y_ruÀs_ö_n_èbÀs
(5);

970 
	}
}

974 
uöt32_t


975 
	$øndom_vÆue
()

977 c⁄° 
uöt32_t
 
vÆues
[] =

981  
vÆues
[
	`øndom_uöt32
(Ë% 
	`ARRAY_SIZE
(values)];

982 
	}
}

984 
boﬁ


985 
	$choo£
(
n
, *
idxp
)

987 i‡(*
idxp
 < 
n
) {

988  
åue
;

990 *
idxp
 -
n
;

991  
Ál£
;

993 
	}
}

995 
boﬁ


996 
	$öô_c⁄£cutive_vÆues
(
n_c⁄£cutive
, 
Êow
 *flow,

997 *
idxp
)

999 
uöt32_t
 *
Êow_u32
 = (uöt32_à*Ë
Êow
;

1001 i‡(
	`choo£
(
FLOW_U32S
 - 
n_c⁄£cutive
 + 1, 
idxp
)) {

1002 
i
;

1004 
i
 = 0; i < 
n_c⁄£cutive
; i++) {

1005 
Êow_u32
[*
idxp
 + 
i
] = 
	`øndom_vÆue
();

1007  
åue
;

1009  
Ál£
;

1011 
	}
}

1013 
boﬁ


1014 
	$√xt_øndom_Êow
(
Êow
 *Êow, 
idx
)

1016 
uöt32_t
 *
Êow_u32
 = (uöt32_à*Ë
Êow
;

1017 
i
;

1019 
	`mem£t
(
Êow
, 0,  *flow);

1022 i‡(
	`choo£
(1, &
idx
)) {

1023  
åue
;

1027 
i
 = 1; i <= 4; i++) {

1028 i‡(
	`öô_c⁄£cutive_vÆues
(
i
, 
Êow
, &
idx
)) {

1029  
åue
;

1034 
i
 = 
FLOW_U32S
 - 4; i <= FLOW_U32S; i++) {

1035 i‡(
	`öô_c⁄£cutive_vÆues
(
i
, 
Êow
, &
idx
)) {

1036  
åue
;

1041 i‡(
	`choo£
((
FLOW_U32S
 - 1Ë* (FLOW_U32S - 2Ë/ 2, &
idx
)) {

1042 
ofs1
;

1044 
ofs1
 = 0; ofs1 < 
FLOW_U32S
 - 2; ofs1++) {

1045 
ofs2
;

1047 
ofs2
 = 
ofs1
 + 2; ofs2 < 
FLOW_U32S
; ofs2++) {

1048 i‡(
	`choo£
(1, &
idx
)) {

1049 
Êow_u32
[
ofs1
] = 
	`øndom_vÆue
();

1050 
Êow_u32
[
ofs2
] = 
	`øndom_vÆue
();

1051  
åue
;

1055 
	`NOT_REACHED
();

1059 i‡(
	`choo£
(16 * (
FLOW_U32S
 - 4), &
idx
)) {

1060 
n
 = 
idx
 / 16 + 3;

1061 
i
;

1063 
i
 = 0; i < 
n
; i++) {

1064 
Êow_u32
[
i
] = 
	`øndom_vÆue
();

1066 
	`shufÊe_u32s
(
Êow_u32
, 
FLOW_U32S
);

1068  
åue
;

1071  
Ál£
;

1072 
	}
}

1075 
	$™y_øndom_Êow
(
Êow
 *flow)

1077 
max
;

1078 i‡(!
max
) {

1079 
	`√xt_øndom_Êow
(
Êow
, 
max
)) {

1080 
max
++;

1084 
	`√xt_øndom_Êow
(
Êow
, 
	`øndom_ønge
(
max
));

1085 
	}
}

1088 
	$toggÀ_masked_Êow_bôs
(
Êow
 *Êow, c⁄° 
Êow_wûdˇrds
 *
mask
)

1090 c⁄° 
uöt32_t
 *
mask_u32
 = (c⁄° uöt32_à*Ë&
mask
->
masks
;

1091 
uöt32_t
 *
Êow_u32
 = (uöt32_à*Ë
Êow
;

1092 
i
;

1094 
i
 = 0; i < 
FLOW_U32S
; i++) {

1095 i‡(
mask_u32
[
i
] != 0) {

1096 
uöt32_t
 
bô
;

1099 
bô
 = 1u << 
	`øndom_ønge
(32);

1100 } !(
bô
 & 
mask_u32
[
i
]));

1101 
Êow_u32
[
i
] ^
bô
;

1104 
	}
}

1107 
	$wûdˇrd_exåa_bôs
(
Êow_wûdˇrds
 *
mask
)

1109 
uöt32_t
 *
mask_u32
 = (uöt32_à*Ë&
mask
->
masks
;

1110 
i
;

1112 
i
 = 0; i < 
FLOW_U32S
; i++) {

1113 i‡(
mask_u32
[
i
] != 0) {

1114 
uöt32_t
 
bô
;

1117 
bô
 = 1u << 
	`øndom_ønge
(32);

1118 } !(
bô
 & 
mask_u32
[
i
]));

1119 
mask_u32
[
i
] &~
bô
;

1122 
	}
}

1125 
	$ã°_möiÊow
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

1127 
Êow
 flow;

1128 
idx
;

1130 
	`øndom_£t_£ed
(0xb3faca38);

1131 
idx
 = 0; 
	`√xt_øndom_Êow
(&
Êow
, idx); idx++) {

1132 c⁄° 
uöt32_t
 *
Êow_u32
 = (c⁄° uöt32_à*Ë&
Êow
;

1133 
möiÊow
 möiÊow, 
möiÊow2
, 
möiÊow3
;

1134 
Êow
 
Êow2
, 
Êow3
;

1135 
Êow_wûdˇrds
 
mask
;

1136 
möimask
 minimask;

1137 
i
;

1140 
	`möiÊow_öô
(&
möiÊow
, &
Êow
);

1143 
	`as£π
(
	`möiÊow_gë_vid
(&
möiÊow
Ë=
	`vœn_tci_to_vid
(
Êow
.
vœn_tci
));

1144 
i
 = 0; i < 
FLOW_U32S
; i++) {

1145 
	`as£π
(
	`möiÊow_gë
(&
möiÊow
, 
i
Ë=
Êow_u32
[i]);

1149 
	`as£π
(
	`möiÊow_equÆ
(&
möiÊow
, &miniflow));

1152 
	`möiÊow_ex∑nd
(&
möiÊow
, &
Êow2
);

1153 
	`as£π
(
	`Êow_equÆ
(&
Êow
, &
Êow2
));

1156 
	`möiÊow_˛⁄e
(&
möiÊow2
, &
möiÊow
);

1157 
	`as£π
(
	`möiÊow_equÆ
(&
möiÊow
, &
möiÊow2
));

1158 
	`as£π
(
	`möiÊow_hash
(&
möiÊow
, 0Ë=möiÊow_hash(&
möiÊow2
, 0));

1159 
	`möiÊow_ex∑nd
(&
möiÊow2
, &
Êow3
);

1160 
	`as£π
(
	`Êow_equÆ
(&
Êow
, &
Êow3
));

1165 
	`√xt_øndom_Êow
(&
mask
.
masks
, 1);

1166 } 
	`Êow_wûdˇrds_is_ˇtchÆl
(&
mask
));

1167 
	`möimask_öô
(&
möimask
, &
mask
);

1168 
	`as£π
(
	`möimask_is_ˇtchÆl
(&
möimask
)

1169 =
	`Êow_wûdˇrds_is_ˇtchÆl
(&
mask
));

1170 
	`as£π
(
	`möiÊow_equÆ_ö_möimask
(&
möiÊow
, &
möiÊow2
, &
möimask
));

1171 
	`as£π
(
	`möiÊow_equÆ_Êow_ö_möimask
(&
möiÊow
, &
Êow2
, &
möimask
));

1172 
	`as£π
(
	`möiÊow_hash_ö_möimask
(&
möiÊow
, &
möimask
, 0x12345678) ==

1173 
	`Êow_hash_ö_möimask
(&
Êow
, &
möimask
, 0x12345678));

1177 
	`toggÀ_masked_Êow_bôs
(&
Êow2
, &
mask
);

1178 
	`as£π
(!
	`möiÊow_equÆ_Êow_ö_möimask
(&
möiÊow
, &
Êow2
, &
möimask
));

1179 
	`möiÊow_öô
(&
möiÊow3
, &
Êow2
);

1180 
	`as£π
(!
	`möiÊow_equÆ_ö_möimask
(&
möiÊow
, &
möiÊow3
, &
möimask
));

1183 
	`möiÊow_de°roy
(&
möiÊow
);

1184 
	`möiÊow_de°roy
(&
möiÊow2
);

1185 
	`möiÊow_de°roy
(&
möiÊow3
);

1186 
	`möimask_de°roy
(&
möimask
);

1188 
	}
}

1191 
	$ã°_möimask_has_exåa
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

1193 
Êow_wûdˇrds
 
ˇtchÆl
;

1194 
möimask
 
möiˇtchÆl
;

1195 
Êow
 flow;

1196 
idx
;

1198 
	`Êow_wûdˇrds_öô_ˇtchÆl
(&
ˇtchÆl
);

1199 
	`möimask_öô
(&
möiˇtchÆl
, &
ˇtchÆl
);

1200 
	`as£π
(
	`möimask_is_ˇtchÆl
(&
möiˇtchÆl
));

1202 
	`øndom_£t_£ed
(0x2ec7905b);

1203 
idx
 = 0; 
	`√xt_øndom_Êow
(&
Êow
, idx); idx++) {

1204 
Êow_wûdˇrds
 
mask
;

1205 
möimask
 minimask;

1207 
mask
.
masks
 = 
Êow
;

1208 
	`möimask_öô
(&
möimask
, &
mask
);

1209 
	`as£π
(!
	`möimask_has_exåa
(&
möimask
, &minimask));

1210 
	`as£π
(
	`möimask_has_exåa
(&
möiˇtchÆl
, &
möimask
)

1211 =!
	`möimask_is_ˇtchÆl
(&
möimask
));

1212 i‡(!
	`möimask_is_ˇtchÆl
(&
möimask
)) {

1213 
möimask
 
möimask2
;

1215 
	`wûdˇrd_exåa_bôs
(&
mask
);

1216 
	`möimask_öô
(&
möimask2
, &
mask
);

1217 
	`as£π
(
	`möimask_has_exåa
(&
möimask2
, &
möimask
));

1218 
	`as£π
(!
	`möimask_has_exåa
(&
möimask
, &
möimask2
));

1219 
	`möimask_de°roy
(&
möimask2
);

1222 
	`möimask_de°roy
(&
möimask
);

1224 
	}
}

1227 
	$ã°_möimask_comböe
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

1229 
Êow_wûdˇrds
 
ˇtchÆl
;

1230 
möimask
 
möiˇtchÆl
;

1231 
Êow
 flow;

1232 
idx
;

1234 
	`Êow_wûdˇrds_öô_ˇtchÆl
(&
ˇtchÆl
);

1235 
	`möimask_öô
(&
möiˇtchÆl
, &
ˇtchÆl
);

1236 
	`as£π
(
	`möimask_is_ˇtchÆl
(&
möiˇtchÆl
));

1238 
	`øndom_£t_£ed
(0x181bf0cd);

1239 
idx
 = 0; 
	`√xt_øndom_Êow
(&
Êow
, idx); idx++) {

1240 
möimask
 möimask, 
möimask2
, 
möicomböed
;

1241 
Êow_wûdˇrds
 
mask
, 
mask2
, 
comböed
, 
comböed2
;

1242 
uöt32_t
 
°‹age
[
FLOW_U32S
];

1243 
Êow
 
Êow2
;

1245 
mask
.
masks
 = 
Êow
;

1246 
	`möimask_öô
(&
möimask
, &
mask
);

1248 
	`möimask_comböe
(&
möicomböed
, &
möimask
, &
möiˇtchÆl
, 
°‹age
);

1249 
	`as£π
(
	`möimask_is_ˇtchÆl
(&
möicomböed
));

1251 
	`™y_øndom_Êow
(&
Êow2
);

1252 
mask2
.
masks
 = 
Êow2
;

1253 
	`möimask_öô
(&
möimask2
, &
mask2
);

1255 
	`möimask_comböe
(&
möicomböed
, &
möimask
, &
möimask2
, 
°‹age
);

1256 
	`Êow_wûdˇrds_comböe
(&
comböed
, &
mask
, &
mask2
);

1257 
	`möimask_ex∑nd
(&
möicomböed
, &
comböed2
);

1258 
	`as£π
(
	`Êow_wûdˇrds_equÆ
(&
comböed
, &
comböed2
));

1260 
	`möimask_de°roy
(&
möimask
);

1261 
	`möimask_de°roy
(&
möimask2
);

1263 
	}
}

1265 c⁄° 
comm™d
 
	gcomm™ds
[] = {

1267 {"em±y", 0, 0, 
ã°_em±y
},

1268 {"de°roy-nuŒ", 0, 0, 
ã°_de°roy_nuŒ
},

1269 {"sögÀ-ruÀ", 0, 0, 
ã°_sögÀ_ruÀ
},

1270 {"ruÀ-ª∂a˚mít", 0, 0, 
ã°_ruÀ_ª∂a˚mít
},

1271 {"m™y-ruÀs-ö-⁄e-li°", 0, 0, 
ã°_m™y_ruÀs_ö_⁄e_li°
},

1272 {"m™y-ruÀs-ö-⁄e-èbÀ", 0, 0, 
ã°_m™y_ruÀs_ö_⁄e_èbÀ
},

1273 {"m™y-ruÀs-ö-two-èbÀs", 0, 0, 
ã°_m™y_ruÀs_ö_two_èbÀs
},

1274 {"m™y-ruÀs-ö-five-èbÀs", 0, 0, 
ã°_m™y_ruÀs_ö_five_èbÀs
},

1277 {"möiÊow", 0, 0, 
ã°_möiÊow
},

1278 {"möimask_has_exåa", 0, 0, 
ã°_möimask_has_exåa
},

1279 {"möimask_comböe", 0, 0, 
ã°_möimask_comböe
},

1281 {
NULL
, 0, 0, NULL},

1285 
	$maö
(
¨gc
, *
¨gv
[])

1287 
	`£t_¥ogøm_«me
(
¨gv
[0]);

1288 
	`öô_vÆues
();

1289 
	`run_comm™d
(
¨gc
 - 1, 
¨gv
 + 1, 
comm™ds
);

1291 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/tests/test-csum.c

17 
	~<c⁄fig.h
>

18 
	~"csum.h
"

19 
	~<öây≥s.h
>

20 
	~<√töë/ö.h
>

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

24 
	~"øndom.h
"

25 
	~"u«lig√d.h
"

26 
	~"utû.h
"

28 #unde‡
NDEBUG


29 
	~<as£π.h
>

31 
	sã°_ˇ£
 {

32 *
	md©a
;

33 
size_t
 
	msize
;

34 
uöt16_t
 
	mcsum
;

37 
	#TEST_CASE
(
DATA
, 
CSUM
Ë{ DATA, ( DATAË- 1, CSUM }

	)

39 c⁄° 
ã°_ˇ£
 
	gã°_ˇ£s
[] = {

41 
TEST_CASE
("\x00\x01\xf2\x03"

46 
TEST_CASE
("\x45\x00\x00\x28"

54 
TEST_CASE
("\x86\x5e\xac\x60"

60 
	$m¨k
(
c
)

62 
	`putch¨
(
c
);

63 
	`fÊush
(
°dout
);

64 
	}
}

69 
	$gíî©e_rfc1624_ã°_ˇ£
()

71 
i
;

73 
i
 = 0; i < 10000000; i++) {

74 
uöt32_t
 
d©a
[8];

75 
j
;

77 
j
 = 0; j < 8; j++) {

78 
d©a
[
j
] = 
	`øndom_uöt32
();

80 
d©a
[7] &= 0x0000ffff;

81 
d©a
[7] |= 0x55550000;

82 i‡(
	`¡ohs
(~
	`csum
(
d©a
,  data - 2)) == 0xcd7a) {

83 
	`ovs_hex_dump
(
°dout
, 
d©a
,  d©a, 0, 
Ál£
);

84 
	`exô
(0);

87 
	}
}

94 
	$ã°_rfc1624
()

97 
uöt8_t
 
d©a
[32] =

102 
	`as£π
(
	`¡ohs
(
	`csum
(
d©a
,  data - 2)) == 0xffff - 0xcd7a);

110 
	`as£π
(
	`¡ohs
(
	`csum
(
d©a
,  data)) == 0xdd2f);

113 
d©a
[30] = 0x32;

114 
d©a
[31] = 0x85;

122 
	`as£π
(
	`¡ohs
(
	`csum
(
d©a
,  data)) == 0x0000);

130 
	`as£π
(
	`ªˇlc_csum16
(
	`ht⁄s
(0xdd2f), htons(0x5555), htons(0x3285))

131 =
	`ht⁄s
(0x0000));

133 
	`m¨k
('#');

134 
	}
}

137 
	$maö
()

139 c⁄° 
ã°_ˇ£
 *
tc
;

140 
i
;

142 
tc
 = 
ã°_ˇ£s
;Å¯< &ã°_ˇ£s[
	`ARRAY_SIZE
(test_cases)];Åc++) {

143 c⁄° *
d©a
 = 
tc
->data;

144 c⁄° 
ovs_be16
 *
d©a16
 = (
OVS_FORCE
 c⁄° ovs_be16 *Ë
d©a
;

145 c⁄° 
ovs_be32
 *
d©a32
 = (
OVS_FORCE
 c⁄° ovs_be32 *Ë
d©a
;

146 
uöt32_t
 
∑πül
;

149 
	`as£π
(
	`¡ohs
(
	`csum
(
tc
->
d©a
,Åc->
size
)Ë=tc->
csum
);

150 
	`m¨k
('.');

153 
∑πül
 = 0;

154 
i
 = 0; i < 
tc
->
size
 / 2; i++) {

155 
∑πül
 = 
	`csum_add16
’¨tül, 
	`gë_u«lig√d_be16
(&
d©a16
[
i
]));

157 
	`as£π
(
	`¡ohs
(
	`csum_föish
(
∑πül
)Ë=
tc
->
csum
);

158 
	`m¨k
('.');

161 
∑πül
 = 0;

162 
i
 = 0; i < 
tc
->
size
 / 4; i++) {

163 
∑πül
 = 
	`csum_add32
’¨tül, 
	`gë_u«lig√d_be32
(&
d©a32
[
i
]));

165 
	`as£π
(
	`¡ohs
(
	`csum_föish
(
∑πül
)Ë=
tc
->
csum
);

166 
	`m¨k
('.');

169 
∑πül
 = 0;

170 
i
 = 0; i < 
tc
->
size
 / 4; i++) {

171 i‡(
i
 % 2) {

172 
∑πül
 = 
	`csum_add32
’¨tül, 
	`gë_u«lig√d_be32
(&
d©a32
[
i
]));

174 
ovs_be16
 
u0
 = 
	`gë_u«lig√d_be16
(&
d©a16
[
i
 * 2]);

175 
ovs_be16
 
u1
 = 
	`gë_u«lig√d_be16
(&
d©a16
[
i
 * 2 + 1]);

176 
∑πül
 = 
	`csum_add16
’¨tül, 
u0
);

177 
∑πül
 = 
	`csum_add16
’¨tül, 
u1
);

180 
	`as£π
(
	`¡ohs
(
	`csum_föish
(
∑πül
)Ë=
tc
->
csum
);

181 
	`m¨k
('.');

184 
∑πül
 = 0;

185 
i
 = 0; i < 
tc
->
size
 / 4; i++) {

186 i‡(
i
) {

187 
∑πül
 = 
	`csum_c⁄töue
’¨tül, &
d©a32
[
i
], 4);

189 
∑πül
 = 
	`csum_c⁄töue
’¨tül, &
d©a16
[
i
 * 2], 2);

190 
∑πül
 = 
	`csum_c⁄töue
’¨tül, &
d©a16
[
i
 * 2 + 1], 2);

193 
	`as£π
(
	`¡ohs
(
	`csum_föish
(
∑πül
)Ë=
tc
->
csum
);

194 
	`m¨k
('#');

197 
	`ã°_rfc1624
();

200 
i
 = 0; i < 32; i++) {

201 
ovs_be16
 
ﬁd_u16
, 
√w_u16
;

202 
ovs_be16
 
ﬁd_csum
;

203 
ovs_be16
 
d©a
[16];

204 
j
, 
ödex
;

206 
j
 = 0; j < 
	`ARRAY_SIZE
(
d©a
); j++) {

207 
d©a
[
j
] = (
OVS_FORCE
 
ovs_be16
Ë
	`øndom_uöt32
();

209 
ﬁd_csum
 = 
	`csum
(
d©a
,  data);

210 
ödex
 = 
	`øndom_ønge
(
	`ARRAY_SIZE
(
d©a
));

211 
ﬁd_u16
 = 
d©a
[
ödex
];

212 
√w_u16
 = 
d©a
[
ödex
] = (
OVS_FORCE
 
ovs_be16
Ë
	`øndom_uöt32
();

213 
	`as£π
(
	`csum
(
d©a
,  data)

214 =
	`ªˇlc_csum16
(
ﬁd_csum
, 
ﬁd_u16
, 
√w_u16
));

215 
	`m¨k
('.');

217 
	`m¨k
('#');

220 
i
 = 0; i < 32; i++) {

221 
ovs_be32
 
ﬁd_u32
, 
√w_u32
;

222 
ovs_be16
 
ﬁd_csum
;

223 
ovs_be32
 
d©a
[16];

224 
j
, 
ödex
;

226 
j
 = 0; j < 
	`ARRAY_SIZE
(
d©a
); j++) {

227 
d©a
[
j
] = (
OVS_FORCE
 
ovs_be32
Ë
	`øndom_uöt32
();

229 
ﬁd_csum
 = 
	`csum
(
d©a
,  data);

230 
ödex
 = 
	`øndom_ønge
(
	`ARRAY_SIZE
(
d©a
));

231 
ﬁd_u32
 = 
d©a
[
ödex
];

232 
√w_u32
 = 
d©a
[
ödex
] = (
OVS_FORCE
 
ovs_be32
Ë
	`øndom_uöt32
();

233 
	`as£π
(
	`csum
(
d©a
,  data)

234 =
	`ªˇlc_csum32
(
ﬁd_csum
, 
ﬁd_u32
, 
√w_u32
));

235 
	`m¨k
('.');

237 
	`m¨k
('#');

239 
	`putch¨
('\n');

242 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/tests/test-file_name.c

17 
	~<c⁄fig.h
>

18 
	~"utû.h
"

19 
	~<°dlib.h
>

22 
	$maö
(
¨gc
, *
¨gv
[])

24 
i
;

26 
i
 = 1; i < 
¨gc
; i++) {

27 *
dú
, *
ba£
;

29 
dú
 = 
	`dú_«me
(
¨gv
[
i
]);

30 
	`puts
(
dú
);

31 
	`‰ì
(
dú
);

33 
ba£
 = 
	`ba£_«me
(
¨gv
[
i
]);

34 
	`puts
(
ba£
);

35 
	`‰ì
(
ba£
);

39 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/tests/test-flows.c

17 
	~<c⁄fig.h
>

18 
	~"Êow.h
"

19 
	~<î∫o.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~"˛assifõr.h
"

23 
	~"›íÊow/›íÊow.h
"

24 
	~"timevÆ.h
"

25 
	~"oÂbuf.h
"

26 
	~"oÂ-¥öt.h
"

27 
	~"oÂ-utû.h
"

28 
	~"pˇp.h
"

29 
	~"utû.h
"

30 
	~"vlog.h
"

32 #unde‡
NDEBUG


33 
	~<as£π.h
>

36 
	$maö
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

38 
oÂ10_m©ch
 
ex≥˘ed_m©ch
;

39 
FILE
 *
Êows
, *
pˇp
;

40 
ªtvÆ
;

41 
n
 = 0, 
îr‹s
 = 0;

43 
	`£t_¥ogøm_«me
(
¨gv
[0]);

45 
Êows
 = 
°dö
;

46 
pˇp
 = 
	`fd›í
(3, "rb");

47 i‡(!
pˇp
) {

48 
	`ovs_Áèl
(
î∫o
, "failedÅo open fd 3 forÑeading");

51 
ªtvÆ
 = 
	`pˇp_ªad_hódî
(
pˇp
);

52 i‡(
ªtvÆ
) {

53 
	`ovs_Áèl
(
ªtvÆ
 > 0 ?Ñetval : 0, "readingÖcap header failed");

56 
	`‰ód
(&
ex≥˘ed_m©ch
, Éx≥˘ed_m©ch, 1, 
Êows
)) {

57 
oÂbuf
 *
∑ckë
;

58 
oÂ10_m©ch
 
exåa˘ed_m©ch
;

59 
m©ch
 match;

60 
Êow
 flow;

62 
n
++;

64 
ªtvÆ
 = 
	`pˇp_ªad
(
pˇp
, &
∑ckë
);

65 i‡(
ªtvÆ
 =
EOF
) {

66 
	`ovs_Áèl
(0, "unexpectedÉnd of fileÑeadingÖcap file");

67 } i‡(
ªtvÆ
) {

68 
	`ovs_Áèl
(
ªtvÆ
, "errorÑeadingÖcap file");

71 
	`Êow_exåa˘
(
∑ckë
, 0, 0, 
NULL
, 1, &
Êow
);

72 
	`m©ch_öô_exa˘
(&
m©ch
, &
Êow
);

73 
	`oÂutû_m©ch_to_oÂ10_m©ch
(&
m©ch
, &
exåa˘ed_m©ch
);

75 i‡(
	`memcmp
(&
ex≥˘ed_m©ch
, &
exåa˘ed_m©ch
, Éxpected_match)) {

76 *
exp_s
 = 
	`oÂ10_m©ch_to_°rög
(&
ex≥˘ed_m©ch
, 2);

77 *
gŸ_s
 = 
	`oÂ10_m©ch_to_°rög
(&
exåa˘ed_m©ch
, 2);

78 
îr‹s
++;

79 
	`¥ötf
("mism©ch o¿∑ckë #%d (1-ba£d).\n", 
n
);

80 
	`¥ötf
("Packet:\n");

81 
	`oÂ_¥öt_∑ckë
(
°dout
, 
∑ckë
->
d©a
,Öackë->
size
);

82 
	`ovs_hex_dump
(
°dout
, 
∑ckë
->
d©a
,Öackë->
size
, 0, 
åue
);

83 
	`m©ch_¥öt
(&
m©ch
);

84 
	`¥ötf
("Ex≥˘ed flow:\n%s\n", 
exp_s
);

85 
	`¥ötf
("A˘uÆlyÉxåa˘ed flow:\n%s\n", 
gŸ_s
);

86 
	`ovs_hex_dump
(
°dout
, &
ex≥˘ed_m©ch
, Éx≥˘ed_m©ch, 0, 
Ál£
);

87 
	`ovs_hex_dump
(
°dout
, &
exåa˘ed_m©ch
, Éxåa˘ed_m©ch, 0, 
Ál£
);

88 
	`¥ötf
("\n");

89 
	`‰ì
(
exp_s
);

90 
	`‰ì
(
gŸ_s
);

93 
	`oÂbuf_dñëe
(
∑ckë
);

95 
	`¥ötf
("checked %dÖackës, %dÉº‹s\n", 
n
, 
îr‹s
);

96  
îr‹s
 != 0;

97 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/tests/test-hash.c

17 
	~<c⁄fig.h
>

18 
	~<öây≥s.h
>

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~"hash.h
"

24 #unde‡
NDEBUG


25 
	~<as£π.h
>

28 
	$£t_bô
(
uöt32_t
 
¨øy
[3], 
bô
)

30 
	`as£π
(
bô
 >= 0 && bit <= 96);

31 
	`mem£t
(
¨øy
, 0, (
uöt32_t
) * 3);

32 i‡(
bô
 < 96) {

33 
¨øy
[
bô
 / 32] = 
	`UINT32_C
(1) << (bit % 32);

35 
	}
}

37 
uöt32_t


38 
	$hash_w‹ds_cb
(
uöt32_t
 
öput
)

40  
	`hash_w‹ds
(&
öput
, 1, 0);

41 
	}
}

43 
uöt32_t


44 
	$mhash_w‹ds_cb
(
uöt32_t
 
öput
)

46  
	`mhash_w‹ds
(&
öput
, 1, 0);

47 
	}
}

49 
uöt32_t


50 
	$hash_öt_cb
(
uöt32_t
 
öput
)

52  
	`hash_öt
(
öput
, 0);

53 
	}
}

56 
check_w‹d_hash
(
	$uöt32_t
 (*
hash
)(
uöt32_t
), c⁄° *
«me
,

57 
mö_unique
)

59 
i
, 
j
;

61 
i
 = 0; i <= 32; i++) {

62 
uöt32_t
 
ö1
 = 
i
 < 32 ? 
	`UINT32_C
(1) << i : 0;

63 
j
 = 
i
 + 1; j <= 32; j++) {

64 
uöt32_t
 
ö2
 = 
j
 < 32 ? 
	`UINT32_C
(1) << j : 0;

65 
uöt32_t
 
out1
 = 
	`hash
(
ö1
);

66 
uöt32_t
 
out2
 = 
	`hash
(
ö2
);

67 c⁄° 
uöt32_t
 
unique_mask
 = (
	`UINT32_C
(1Ë<< 
mö_unique
) - 1;

68 
ofs
;

69 
ofs
 = 0; of†< 32 - 
mö_unique
; ofs++) {

70 
uöt32_t
 
bôs1
 = (
out1
 >> 
ofs
Ë& 
unique_mask
;

71 
uöt32_t
 
bôs2
 = (
out2
 >> 
ofs
Ë& 
unique_mask
;

72 i‡(
bôs1
 =
bôs2
) {

73 
	`¥ötf
("P¨tü»cﬁlisi⁄ f‹ '%s':\n", 
«me
);

74 
	`¥ötf
("%s(%08"
PRIx32
"Ë%08"PRIx32"\n", 
«me
, 
ö1
, 
out1
);

75 
	`¥ötf
("%s(%08"
PRIx32
"Ë%08"PRIx32"\n", 
«me
, 
ö2
, 
out2
);

76 
	`¥ötf
("%d bits of output startingát bit %d "

77 "¨êbŸh 0x%"
PRIx32
"\n", 
mö_unique
, 
ofs
, 
bôs1
);

78 
	`exô
(1);

83 
	}
}

86 
check_3w‹d_hash
(
	$uöt32_t
 (*
hash
)(c⁄° 
uöt32_t
[], 
size_t
, uint32_t),

87 c⁄° *
«me
)

89 
i
, 
j
;

91 
i
 = 0; i <= 96; i++) {

92 
j
 = 
i
 + 1; j <= 96; j++) {

93 
uöt32_t
 
ö1
[3], 
ö2
[3];

94 
uöt32_t
 
out1
, 
out2
;

95 c⁄° 
mö_unique
 = 12;

96 c⁄° 
uöt32_t
 
unique_mask
 = (
	`UINT32_C
(1Ë<< 
mö_unique
) - 1;

98 
	`£t_bô
(
ö1
, 
i
);

99 
	`£t_bô
(
ö2
, 
j
);

100 
out1
 = 
	`hash
(
ö1
, 3, 0);

101 
out2
 = 
	`hash
(
ö2
, 3, 0);

102 i‡((
out1
 & 
unique_mask
Ë=(
out2
 & unique_mask)) {

103 
	`¥ötf
("%†ha†®∑πü»cﬁlisi⁄:\n", 
«me
);

104 
	`¥ötf
("hash(1 << %dË=%08"
PRIx32
"\n", 
i
, 
out1
);

105 
	`¥ötf
("hash(1 << %dË=%08"
PRIx32
"\n", 
j
, 
out2
);

106 
	`¥ötf
("TheÜow-order %d bits of outputáre both "

107 "0x%"
PRIx32
"\n", 
mö_unique
, 
out1
 & 
unique_mask
);

111 
	}
}

114 
	$maö
()

132 
	`check_w‹d_hash
(
hash_w‹ds_cb
, "hash_words", 11);

133 
	`check_w‹d_hash
(
mhash_w‹ds_cb
, "mhash_words", 11);

148 
	`check_3w‹d_hash
(
hash_w‹ds
, "hash_words");

149 
	`check_3w‹d_hash
(
mhash_w‹ds
, "mhash_words");

166 
	`check_w‹d_hash
(
hash_öt_cb
, "hash_int", 14);

169 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/tests/test-heap.c

19 
	~<c⁄fig.h
>

20 
	~"hóp.h
"

21 
	~<öây≥s.h
>

22 
	~<limôs.h
>

23 
	~<°dlib.h
>

24 
	~"comm™d-löe.h
"

25 
	~"øndom.h
"

26 
	~"utû.h
"

28 #unde‡
NDEBUG


29 
	~<as£π.h
>

32 
	sñemít
 {

33 
uöt32_t
 
	mfuŒ_¥i
;

34 
hóp_node
 
	mhóp_node
;

37 
ñemít
 *

38 
	$ñemít_‰om_hóp_node
(c⁄° 
hóp_node
 *
node
)

40  
	`CONTAINER_OF
(
node
, 
ñemít
, 
hóp_node
);

41 
	}
}

44 
	$com∑ª_uöt32s
(c⁄° *
a_
, c⁄° *
b_
)

46 c⁄° 
uöt32_t
 *
a
 = 
a_
;

47 c⁄° 
uöt32_t
 *
b
 = 
b_
;

48  *
a
 < *
b
 ? -1 : *a > *b;

49 
	}
}

54 
	$check_hóp
(c⁄° 
hóp
 *hóp, c⁄° 
uöt32_t
 
¥i‹ôõs
[], 
size_t
 
n
)

56 
uöt32_t
 *
¥i‹ôõs_c›y
;

57 
uöt32_t
 *
ñemíts_c›y
;

58 
ñemít
 *element;

59 
size_t
 
i
;

61 
	`as£π
(
	`hóp_cou¡
(
hóp
Ë=
n
);

62 
	`as£π
(
	`hóp_is_em±y
(
hóp
Ë=!
n
);

63 i‡(
n
 > 0) {

64 
	`as£π
(
	`hóp_max
(
hóp
Ë=hóp->
¨øy
[1]);

68 
i
 = 1; i <
n
; i++) {

69 
	`as£π
(
hóp
->
¨øy
[
i
]->
idx
 == i);

73 
i
 = 1; i <
n
; i++) {

74 
ñemít
 = 
	`ñemít_‰om_hóp_node
(
hóp
->
¨øy
[
i
]);

75 
	`as£π
(
ñemít
->
hóp_node
.
¥i‹ôy
 =”Àmít->
fuŒ_¥i
 >> 16));

79 
i
 = 1; i <
n
; i++) {

80 
size_t
 
∑ª¡
 = 
	`hóp_∑ª¡__
(
i
);

81 
size_t
 
À·
 = 
	`hóp_À·__
(
i
);

82 
size_t
 
right
 = 
	`hóp_right__
(
i
);

84 i‡(
∑ª¡
 >= 1) {

85 
	`as£π
(
hóp
->
¨øy
[
∑ª¡
]->
¥i‹ôy
 >hóp->¨øy[
i
]->priority);

87 i‡(
À·
 <
n
) {

88 
	`as£π
(
hóp
->
¨øy
[
À·
]->
¥i‹ôy
 <hóp->¨øy[
i
]->priority);

90 i‡(
right
 <
n
) {

91 
	`as£π
(
hóp
->
¨øy
[
right
]->
¥i‹ôy
 <hóp->¨øy[
i
]->priority);

96 
i
 = 0;

97 
	`HEAP_FOR_EACH
 (
ñemít
, 
hóp_node
, 
hóp
) {

98 
	`as£π
(
i
 < 
n
);

99 
	`as£π
(&
ñemít
->
hóp_node
 =
hóp
->
¨øy
[
i
 + 1]);

100 
i
++;

102 
	`as£π
(
i
 =
n
);

104 
¥i‹ôõs_c›y
 = 
	`xmemdup
(
¥i‹ôõs
, 
n
 *  *priorities);

105 
ñemíts_c›y
 = 
	`xmÆloc
(
n
 *  *
¥i‹ôõs
);

106 
i
 = 0;

107 
	`HEAP_FOR_EACH
 (
ñemít
, 
hóp_node
, 
hóp
) {

108 
ñemíts_c›y
[
i
++] = 
ñemít
->
hóp_node
.
¥i‹ôy
;

111 
	`qs‹t
(
¥i‹ôõs_c›y
, 
n
,  *¥i‹ôõs_c›y, 
com∑ª_uöt32s
);

112 
	`qs‹t
(
ñemíts_c›y
, 
n
,  *ñemíts_c›y, 
com∑ª_uöt32s
);

113 
i
 = 0; i < 
n
; i++) {

114 
	`as£π
((
¥i‹ôõs_c›y
[
i
] >> 16Ë=
ñemíts_c›y
[i]);

117 
	`‰ì
(
¥i‹ôõs_c›y
);

118 
	`‰ì
(
ñemíts_c›y
);

119 
	}
}

122 
	$shufÊe
(
uöt32_t
 *
p
, 
size_t
 
n
)

124 ; 
n
 > 1;Ç--, 
p
++) {

125 
uöt32_t
 *
q
 = &
p
[
	`øndom_ønge
(
n
)];

126 
uöt32_t
 
tmp
 = *
p
;

127 *
p
 = *
q
;

128 *
q
 = 
tmp
;

130 
	}
}

133 
OVS_UNUSED


134 
	$¥öt_hóp
(c⁄° *
«me
, 
hóp
 *heap)

136 
ñemít
 *
e
;

138 
	`¥ötf
("%s:", 
«me
);

139 
	`HEAP_FOR_EACH
 (
e
, 
hóp_node
, 
hóp
) {

140 
	`¥ötf
(" %"
PRIu32
":%"PRIu32, 
e
->
fuŒ_¥i
 >> 16,É->full_pri & 0xffff);

142 
	`¥ötf
("\n");

143 
	}
}

146 
	$Á˘‹ül
(
n_ôems
)

148 
n
, 
i
;

150 
n
 = 1;

151 
i
 = 2; i <
n_ôems
; i++) {

152 
n
 *
i
;

154  
n
;

155 
	}
}

158 
	$sw≠
(
uöt32_t
 *
a
, uöt32_à*
b
)

160 
uöt32_t
 
tmp
 = *
a
;

161 *
a
 = *
b
;

162 *
b
 = 
tmp
;

163 
	}
}

166 
	$ªvî£
(
uöt32_t
 *
a
, 
n
)

168 
i
;

170 
i
 = 0; i < 
n
 / 2; i++) {

171 
j
 = 
n
 - (
i
 + 1);

172 
	`sw≠
(&
a
[
i
], &a[
j
]);

174 
	}
}

176 
boﬁ


177 
	$√xt_≥rmuèti⁄
(
uöt32_t
 *
a
, 
n
)

179 
k
;

181 
k
 = 
n
 - 2; k >= 0; k--) {

182 i‡((
a
[
k
] >> 16) < (a[k + 1] >> 16)) {

183 
l
;

185 
l
 = 
n
 - 1; ;Ü--) {

186 i‡((
a
[
l
] >> 16Ë> (a[
k
] >> 16)) {

187 
	`sw≠
(&
a
[
k
], &a[
l
]);

188 
	`ªvî£
(
a
 + (
k
 + 1), 
n
 - (k + 1));

189  
åue
;

194  
Ál£
;

195 
	}
}

198 
	$ã°_ö£π_dñëe__
(
ñemít
 *
ñemíts
,

199 c⁄° 
uöt32_t
 *
ö£π
,

200 c⁄° 
uöt32_t
 *
dñëe
,

201 
size_t
 
n
)

203 
hóp
 heap;

204 
size_t
 
i
;

206 
	`hóp_öô
(&
hóp
);

207 
	`check_hóp
(&
hóp
, 
NULL
, 0);

208 
i
 = 0; i < 
n
; i++) {

209 
uöt32_t
 
¥i‹ôy
 = 
ö£π
[
i
];

211 
ñemíts
[
i
].
fuŒ_¥i
 = 
¥i‹ôy
;

212 
	`hóp_ö£π
(&
hóp
, &
ñemíts
[
i
].
hóp_node
, 
¥i‹ôy
 >> 16);

213 
	`check_hóp
(&
hóp
, 
ö£π
, 
i
 + 1);

216 
i
 = 0; i < 
n
; i++) {

217 
ñemít
 *element;

219 
	`HEAP_FOR_EACH
 (
ñemít
, 
hóp_node
, &
hóp
) {

220 i‡(
ñemít
->
fuŒ_¥i
 =
dñëe
[
i
]) {

221 
found
;

224 
	`NOT_REACHED
();

226 
found
:

227 
	`hóp_ªmove
(&
hóp
, &
ñemít
->
hóp_node
);

228 
	`check_hóp
(&
hóp
, 
dñëe
 + 
i
 + 1, 
n
 - (i + 1));

230 
	`hóp_de°roy
(&
hóp
);

231 
	}
}

234 
	$ã°_ö£π_dñëe_øw__
(
ñemít
 *
ñemíts
,

235 c⁄° 
uöt32_t
 *
ö£π
, 
ö£π_∑âîn
,

236 c⁄° 
uöt32_t
 *
dñëe
, 
dñëe_∑âîn
,

237 
size_t
 
n
)

239 
hóp
 heap;

240 
size_t
 
i
;

242 
	`hóp_öô
(&
hóp
);

243 
	`check_hóp
(&
hóp
, 
NULL
, 0);

244 
i
 = 0; i < 
n
; i++) {

245 
uöt32_t
 
¥i‹ôy
 = 
ö£π
[
i
];

247 
ñemíts
[
i
].
fuŒ_¥i
 = 
¥i‹ôy
;

248 
	`hóp_øw_ö£π
(&
hóp
, &
ñemíts
[
i
].
hóp_node
, 
¥i‹ôy
 >> 16);

249 i‡(
ö£π_∑âîn
 & (1u << 
i
)) {

250 
	`hóp_ªbuûd
(&
hóp
);

251 
	`check_hóp
(&
hóp
, 
ö£π
, 
i
 + 1);

255 
i
 = 0; i < 
n
; i++) {

256 
ñemít
 *element;

258 
	`HEAP_FOR_EACH
 (
ñemít
, 
hóp_node
, &
hóp
) {

259 i‡(
ñemít
->
fuŒ_¥i
 =
dñëe
[
i
]) {

260 
found
;

263 
	`NOT_REACHED
();

265 
found
:

266 
	`hóp_øw_ªmove
(&
hóp
, &
ñemít
->
hóp_node
);

267 i‡(
dñëe_∑âîn
 & (1u << 
i
)) {

268 
	`hóp_ªbuûd
(&
hóp
);

269 
	`check_hóp
(&
hóp
, 
dñëe
 + 
i
 + 1, 
n
 - (i + 1));

272 
	`hóp_de°roy
(&
hóp
);

273 
	}
}

276 
	$ã°_hóp_ö£π_dñëe_ßme_‹dî
(
¨gc
 
OVS_UNUSED
,

277 *
¨gv
[] 
OVS_UNUSED
)

279 íum { 
N_ELEMS
 = 7 };

281 
uöt32_t
 
ö£π
[
N_ELEMS
];

282 
n_≥rmuèti⁄s
;

283 
size_t
 
i
;

285 
i
 = 0; i < 
N_ELEMS
; i++) {

286 
ö£π
[
i
] = i << 16;

289 
n_≥rmuèti⁄s
 = 0;

291 
ñemít
 
ñemíts
[
N_ELEMS
];

293 
n_≥rmuèti⁄s
++;

294 
	`ã°_ö£π_dñëe__
(
ñemíts
, 
ö£π
, in£π, 
N_ELEMS
);

295 } 
	`√xt_≥rmuèti⁄
(
ö£π
, 
N_ELEMS
));

296 
	`as£π
(
n_≥rmuèti⁄s
 =
	`Á˘‹ül
(
N_ELEMS
));

297 
	}
}

300 
	$ã°_hóp_ö£π_dñëe_ªvî£_‹dî
(
¨gc
 
OVS_UNUSED
,

301 *
¨gv
[] 
OVS_UNUSED
)

303 íum { 
N_ELEMS
 = 7 };

305 
uöt32_t
 
ö£π
[
N_ELEMS
];

306 
n_≥rmuèti⁄s
;

307 
size_t
 
i
;

309 
i
 = 0; i < 
N_ELEMS
; i++) {

310 
ö£π
[
i
] = i << 16;

313 
n_≥rmuèti⁄s
 = 0;

315 
ñemít
 
ñemíts
[
N_ELEMS
];

316 
uöt32_t
 
dñëe
[
N_ELEMS
];

318 
n_≥rmuèti⁄s
++;

320 
i
 = 0; i < 
N_ELEMS
; i++) {

321 
dñëe
[
N_ELEMS
 - 
i
 - 1] = 
ö£π
[i];

324 
	`ã°_ö£π_dñëe__
(
ñemíts
, 
ö£π
, 
dñëe
, 
N_ELEMS
);

325 } 
	`√xt_≥rmuèti⁄
(
ö£π
, 
N_ELEMS
));

326 
	`as£π
(
n_≥rmuèti⁄s
 =
	`Á˘‹ül
(
N_ELEMS
));

327 
	}
}

330 
	$ã°_hóp_ö£π_dñëe_evîy_‹dî
(
¨gc
 
OVS_UNUSED
,

331 *
¨gv
[] 
OVS_UNUSED
)

333 íum { 
N_ELEMS
 = 5 };

335 
uöt32_t
 
ö£π
[
N_ELEMS
];

336 
ouãr_≥rmuèti⁄s
;

337 
size_t
 
i
;

339 
i
 = 0; i < 
N_ELEMS
; i++) {

340 
ö£π
[
i
] = i << 16;

343 
ouãr_≥rmuèti⁄s
 = 0;

345 
ñemít
 
ñemíts
[
N_ELEMS
];

346 
uöt32_t
 
dñëe
[
N_ELEMS
];

347 
ö√r_≥rmuèti⁄s
;

349 
ouãr_≥rmuèti⁄s
++;

351 
i
 = 0; i < 
N_ELEMS
; i++) {

352 
dñëe
[
i
] = i << 16;

355 
ö√r_≥rmuèti⁄s
 = 0;

357 
ö√r_≥rmuèti⁄s
++;

358 
	`ã°_ö£π_dñëe__
(
ñemíts
, 
ö£π
, 
dñëe
, 
N_ELEMS
);

359 } 
	`√xt_≥rmuèti⁄
(
dñëe
, 
N_ELEMS
));

360 
	`as£π
(
ö√r_≥rmuèti⁄s
 =
	`Á˘‹ül
(
N_ELEMS
));

361 } 
	`√xt_≥rmuèti⁄
(
ö£π
, 
N_ELEMS
));

362 
	`as£π
(
ouãr_≥rmuèti⁄s
 =
	`Á˘‹ül
(
N_ELEMS
));

363 
	}
}

366 
	$ã°_hóp_ö£π_dñëe_ßme_‹dî_wôh_dups
(
¨gc
 
OVS_UNUSED
,

367 *
¨gv
[] 
OVS_UNUSED
)

369 íum { 
N_ELEMS
 = 7 };

371 
∑âîn
;

372 
size_t
 
i
;

374 
∑âîn
 = 0;Ö©ã∫ < (1u << 
N_ELEMS
);Öattern += 2) {

375 
n_≥rmuèti⁄s
, 
ex≥˘ed_≥rmuèti⁄s
;

376 
uöt32_t
 
ö£π
[
N_ELEMS
];

377 
j
;

379 
j
 = 0;

380 
i
 = 0; i < 
N_ELEMS
; i++) {

381 i‡(
i
 && !(
∑âîn
 & (1u << i))) {

382 
j
++;

384 
ö£π
[
i
] = (
j
 << 16) | i;

387 
ex≥˘ed_≥rmuèti⁄s
 = 
	`Á˘‹ül
(
N_ELEMS
);

388 
i
 = 0; i < 
N_ELEMS
; ) {

389 
j
 = 
i
 + 1;

390 i‡(
∑âîn
 & (1u << 
i
)) {

391 ; 
j
 < 
N_ELEMS
; j++) {

392 i‡(!(
∑âîn
 & (1u << 
j
))) {

396 
ex≥˘ed_≥rmuèti⁄s
 /
	`Á˘‹ül
(
j
 - 
i
 + 1);

398 
i
 = 
j
;

401 
n_≥rmuèti⁄s
 = 0;

403 
ñemít
 
ñemíts
[
N_ELEMS
];

405 
n_≥rmuèti⁄s
++;

406 
	`ã°_ö£π_dñëe__
(
ñemíts
, 
ö£π
, in£π, 
N_ELEMS
);

407 } 
	`√xt_≥rmuèti⁄
(
ö£π
, 
N_ELEMS
));

408 
	`as£π
(
n_≥rmuèti⁄s
 =
ex≥˘ed_≥rmuèti⁄s
);

410 
	}
}

413 
	$ã°_hóp_øw_ö£π
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

415 íum { 
N_ELEMS
 = 7 };

417 
uöt32_t
 
ö£π
[
N_ELEMS
];

418 
n_≥rmuèti⁄s
;

419 
size_t
 
i
;

421 
i
 = 0; i < 
N_ELEMS
; i++) {

422 
ö£π
[
i
] = i << 16;

425 
n_≥rmuèti⁄s
 = 0;

427 
ñemít
 
ñemíts
[
N_ELEMS
];

429 
n_≥rmuèti⁄s
++;

430 
	`ã°_ö£π_dñëe_øw__
(
ñemíts
,

431 
ö£π
, 1u << (
N_ELEMS
 - 1),

432 
ö£π
, 
UINT_MAX
,

433 
N_ELEMS
);

434 } 
	`√xt_≥rmuèti⁄
(
ö£π
, 
N_ELEMS
));

435 
	`as£π
(
n_≥rmuèti⁄s
 =
	`Á˘‹ül
(
N_ELEMS
));

436 
	}
}

439 
	$ã°_hóp_øw_dñëe
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

441 íum { 
N_ELEMS
 = 16 };

443 
uöt32_t
 
ö£π
[
N_ELEMS
];

444 
uöt32_t
 
dñëe
[
N_ELEMS
];

445 
size_t
 
i
;

447 
i
 = 0; i < 
N_ELEMS
; i++) {

448 
ö£π
[
i
] = i << 16;

449 
dñëe
[
i
] = i << 16;

452 
i
 = 0; i < 1000; i++) {

453 
ñemít
 
ñemíts
[
N_ELEMS
];

455 
	`shufÊe
(
ö£π
, 
N_ELEMS
);

456 
	`shufÊe
(
dñëe
, 
N_ELEMS
);

458 
	`ã°_ö£π_dñëe_øw__
(
ñemíts
,

459 
ö£π
, 0,

460 
dñëe
,

461 (1u << (
N_ELEMS
 - 1)) | (1u << (N_ELEMS / 2)),

462 
N_ELEMS
);

464 
	}
}

466 c⁄° 
comm™d
 
	gcomm™ds
[] = {

467 { "ö£π-dñëe-ßme-‹dî", 0, 0, 
ã°_hóp_ö£π_dñëe_ßme_‹dî
, },

469 
ã°_hóp_ö£π_dñëe_ªvî£_‹dî
, },

471 
ã°_hóp_ö£π_dñëe_evîy_‹dî
, },

473 
ã°_hóp_ö£π_dñëe_ßme_‹dî_wôh_dups
, },

474 { "øw-ö£π", 0, 0, 
ã°_hóp_øw_ö£π
, },

475 { "øw-dñëe", 0, 0, 
ã°_hóp_øw_dñëe
, },

479 
	$maö
(
¨gc
, *
¨gv
[])

481 
	`£t_¥ogøm_«me
(
¨gv
[0]);

483 
	`run_comm™d
(
¨gc
 - 1, 
¨gv
 + 1, 
comm™ds
);

486 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/tests/test-hmap.c

20 
	~<c⁄fig.h
>

21 
	~"hm≠.h
"

22 
	~<°rög.h
>

23 
	~"hash.h
"

24 
	~"utû.h
"

26 #unde‡
NDEBUG


27 
	~<as£π.h
>

30 
	sñemít
 {

31 
	mvÆue
;

32 
hm≠_node
 
	mnode
;

35 
size_t
 
	thash_func
(
	tvÆue
);

38 
	$com∑ª_öts
(c⁄° *
a_
, c⁄° *
b_
)

40 c⁄° *
a
 = 
a_
;

41 c⁄° *
b
 = 
b_
;

42  *
a
 < *
b
 ? -1 : *a > *b;

43 
	}
}

47 
	$check_hm≠
(
hm≠
 *hm≠, c⁄° 
vÆues
[], 
size_t
 
n
,

48 
hash_func
 *
hash
)

50 *
s‹t_vÆues
, *
hm≠_vÆues
;

51 
ñemít
 *
e
;

52 
size_t
 
i
;

55 
s‹t_vÆues
 = 
	`xmÆloc
( *s‹t_vÆue†* 
n
);

56 
hm≠_vÆues
 = 
	`xmÆloc
( *
s‹t_vÆues
 * 
n
);

58 
i
 = 0;

59 
	`HMAP_FOR_EACH
 (
e
, 
node
, 
hm≠
) {

60 
	`as£π
(
i
 < 
n
);

61 
hm≠_vÆues
[
i
++] = 
e
->
vÆue
;

63 
	`as£π
(
i
 =
n
);

65 
	`mem˝y
(
s‹t_vÆues
, 
vÆues
,  *s‹t_vÆue†* 
n
);

66 
	`qs‹t
(
s‹t_vÆues
, 
n
,  *s‹t_vÆues, 
com∑ª_öts
);

67 
	`qs‹t
(
hm≠_vÆues
, 
n
,  *hm≠_vÆues, 
com∑ª_öts
);

69 
i
 = 0; i < 
n
; i++) {

70 
	`as£π
(
s‹t_vÆues
[
i
] =
hm≠_vÆues
[i]);

73 
	`‰ì
(
hm≠_vÆues
);

74 
	`‰ì
(
s‹t_vÆues
);

77 
i
 = 0; i < 
n
; i++) {

78 
size_t
 
cou¡
 = 0;

80 
	`HMAP_FOR_EACH_WITH_HASH
 (
e
, 
node
, 
	`hash
(
vÆues
[
i
]), 
hm≠
) {

81 
cou¡
 +
e
->
vÆue
 =
vÆues
[
i
];

83 
	`as£π
(
cou¡
 == 1);

87 
	`as£π
(
	`hm≠_is_em±y
(
hm≠
Ë=!
n
);

88 
	`as£π
(
	`hm≠_cou¡
(
hm≠
Ë=
n
);

89 
	}
}

94 
	$make_hm≠
(
hm≠
 *hm≠, 
ñemít
 
ñemíts
[],

95 
vÆues
[], 
size_t
 
n
, 
hash_func
 *
hash
)

97 
size_t
 
i
;

99 
	`hm≠_öô
(
hm≠
);

100 
i
 = 0; i < 
n
; i++) {

101 
ñemíts
[
i
].
vÆue
 = i;

102 
	`hm≠_ö£π
(
hm≠
, &
ñemíts
[
i
].
node
, 
	`hash
”Àmíts[i].
vÆue
));

103 
vÆues
[
i
] = i;

105 
	}
}

108 
	$shufÊe
(*
p
, 
size_t
 
n
)

110 ; 
n
 > 1;Ç--, 
p
++) {

111 *
q
 = &
p
[
	`ønd
(Ë% 
n
];

112 
tmp
 = *
p
;

113 *
p
 = *
q
;

114 *
q
 = 
tmp
;

116 
	}
}

121 
	$¥öt_hm≠
(c⁄° *
«me
, 
hm≠
 *hmap)

123 
ñemít
 *
e
;

125 
	`¥ötf
("%s:", 
«me
);

126 
	`HMAP_FOR_EACH
 (
e
, 
node
, 
hm≠
) {

127 
	`¥ötf
(" %d(%zu)", 
e
->
vÆue
,É->
node
.
hash
 & 
hm≠
->
mask
);

129 
	`¥ötf
("\n");

130 
	}
}

134 
	$¥öt_öts
(c⁄° *
«me
, c⁄° *
vÆues
, 
size_t
 
n
)

136 
size_t
 
i
;

138 
	`¥ötf
("%s:", 
«me
);

139 
i
 = 0; i < 
n
; i++) {

140 
	`¥ötf
(" %d", 
vÆues
[
i
]);

142 
	`¥ötf
("\n");

143 
	}
}

146 
size_t


147 
	$idítôy_hash
(
vÆue
)

149  
vÆue
;

150 
	}
}

152 
size_t


153 
	$good_hash
(
vÆue
)

155  
	`hash_öt
(
vÆue
, 0x1234abcd);

156 
	}
}

158 
size_t


159 
	$c⁄°™t_hash
(
vÆue
 
OVS_UNUSED
)

162 
	}
}

166 
	$ã°_hm≠_ö£π_dñëe
(
hash_func
 *
hash
)

168 íum { 
N_ELEMS
 = 100 };

170 
ñemít
 
ñemíts
[
N_ELEMS
];

171 
vÆues
[
N_ELEMS
];

172 
hm≠
 hmap;

173 
size_t
 
i
;

175 
	`hm≠_öô
(&
hm≠
);

176 
i
 = 0; i < 
N_ELEMS
; i++) {

177 
ñemíts
[
i
].
vÆue
 = i;

178 
	`hm≠_ö£π
(&
hm≠
, &
ñemíts
[
i
].
node
, 
	`hash
(i));

179 
vÆues
[
i
] = i;

180 
	`check_hm≠
(&
hm≠
, 
vÆues
, 
i
 + 1, 
hash
);

182 
	`shufÊe
(
vÆues
, 
N_ELEMS
);

183 
i
 = 0; i < 
N_ELEMS
; i++) {

184 
	`hm≠_ªmove
(&
hm≠
, &
ñemíts
[
vÆues
[
i
]].
node
);

185 
	`check_hm≠
(&
hm≠
, 
vÆues
 + (
i
 + 1), 
N_ELEMS
 - (ò+ 1), 
hash
);

187 
	`hm≠_de°roy
(&
hm≠
);

188 
	}
}

192 
	$ã°_hm≠_ª£rve_shrök
(
hash_func
 *
hash
)

194 íum { 
N_ELEMS
 = 32 };

196 
size_t
 
i
;

198 
i
 = 0; i < 
N_ELEMS
; i++) {

199 
ñemít
 
ñemíts
[
N_ELEMS
];

200 
vÆues
[
N_ELEMS
];

201 
hm≠
 hmap;

202 
size_t
 
j
;

204 
	`hm≠_öô
(&
hm≠
);

205 
	`hm≠_ª£rve
(&
hm≠
, 
i
);

206 
j
 = 0; j < 
N_ELEMS
; j++) {

207 
ñemíts
[
j
].
vÆue
 = j;

208 
	`hm≠_ö£π
(&
hm≠
, &
ñemíts
[
j
].
node
, 
	`hash
(j));

209 
vÆues
[
j
] = j;

210 
	`check_hm≠
(&
hm≠
, 
vÆues
, 
j
 + 1, 
hash
);

212 
	`shufÊe
(
vÆues
, 
N_ELEMS
);

213 
j
 = 0; j < 
N_ELEMS
; j++) {

214 
	`hm≠_ªmove
(&
hm≠
, &
ñemíts
[
vÆues
[
j
]].
node
);

215 
	`hm≠_shrök
(&
hm≠
);

216 
	`check_hm≠
(&
hm≠
, 
vÆues
 + (
j
 + 1), 
N_ELEMS
 - (j + 1), 
hash
);

218 
	`hm≠_de°roy
(&
hm≠
);

220 
	}
}

225 
	$ã°_hm≠_f‹_óch_ß„
(
hash_func
 *
hash
)

227 íum { 
MAX_ELEMS
 = 10 };

228 
size_t
 
n
;

229 
∑âîn
;

231 
n
 = 0;Ç <
MAX_ELEMS
;Ç++) {

232 
∑âîn
 = 0;Ö©ã∫ < 1u»<< 
n
;Öattern++) {

233 
ñemít
 
ñemíts
[
MAX_ELEMS
];

234 
vÆues
[
MAX_ELEMS
];

235 
hm≠
 hmap;

236 
ñemít
 *
e
, *
√xt
;

237 
size_t
 
n_ªmaöög
;

238 
i
;

240 
	`make_hm≠
(&
hm≠
, 
ñemíts
, 
vÆues
, 
n
, 
hash
);

242 
i
 = 0;

243 
n_ªmaöög
 = 
n
;

244 
	`HMAP_FOR_EACH_SAFE
 (
e
, 
√xt
, 
node
, &
hm≠
) {

245 
	`as£π
(
i
 < 
n
);

246 i‡(
∑âîn
 & (1u»<< 
e
->
vÆue
)) {

247 
size_t
 
j
;

248 
	`hm≠_ªmove
(&
hm≠
, &
e
->
node
);

249 
j
 = 0; ; j++) {

250 
	`as£π
(
j
 < 
n_ªmaöög
);

251 i‡(
vÆues
[
j
] =
e
->
vÆue
) {

252 
vÆues
[
j
] = vÆues[--
n_ªmaöög
];

257 
	`check_hm≠
(&
hm≠
, 
vÆues
, 
n_ªmaöög
, 
hash
);

258 
i
++;

260 
	`as£π
(
i
 =
n
);

262 
i
 = 0; i < 
n
; i++) {

263 i‡(
∑âîn
 & (1u»<< 
i
)) {

264 
n_ªmaöög
++;

267 
	`as£π
(
n
 =
n_ªmaöög
);

269 
	`hm≠_de°roy
(&
hm≠
);

272 
	}
}

275 
run_ã°
((*
fun˘i⁄
)(
hash_func
 *))

277 
hash_func
 *
hash_funcs
[] = { 
idítôy_hash
, 
good_hash
, 
c⁄°™t_hash
 };

278 
size_t
 
i
;

280 
i
 = 0; i < 
	`ARRAY_SIZE
(
hash_funcs
); i++) {

281 
	`fun˘i⁄
(
hash_funcs
[
i
]);

282 
	`¥ötf
(".");

283 
	`fÊush
(
°dout
);

285 
	}
}

288 
	$maö
()

290 
	`run_ã°
(
ã°_hm≠_ö£π_dñëe
);

291 
	`run_ã°
(
ã°_hm≠_f‹_óch_ß„
);

292 
	`run_ã°
(
ã°_hm≠_ª£rve_shrök
);

293 
	`¥ötf
("\n");

295 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/tests/test-json.c

17 
	~<c⁄fig.h
>

19 
	~"js⁄.h
"

21 
	~<˘y≥.h
>

22 
	~<î∫o.h
>

23 
	~<gë›t.h
>

24 
	~<°dio.h
>

26 
	~"utû.h
"

30 
	g¥ëty
 = 0;

34 
	gmu…ùÀ
 = 0;

36 
boﬁ


37 
	$¥öt_™d_‰ì_js⁄
(
js⁄
 *json)

39 
boﬁ
 
ok
;

40 i‡(
js⁄
->
ty≥
 =
JSON_STRING
) {

41 
	`¥ötf
("îr‹: %s\n", 
js⁄
->
u
.
°rög
);

42 
ok
 = 
Ál£
;

44 *
s
 = 
	`js⁄_to_°rög
(
js⁄
, 
JSSF_SORT
 | (
¥ëty
 ? 
JSSF_PRETTY
 : 0));

45 
	`puts
(
s
);

46 
	`‰ì
(
s
);

47 
ok
 = 
åue
;

49 
	`js⁄_de°roy
(
js⁄
);

50  
ok
;

51 
	}
}

53 
boﬁ


54 
	$ªfûl
(
FILE
 *
fûe
, *
buf„r
, 
size_t
 
buf„r_size
, size_à*
n
, size_à*
u£d
)

56 *
u£d
 = 0;

57 i‡(
	`„of
(
fûe
)) {

58 *
n
 = 0;

59  
Ál£
;

61 *
n
 = 
	`‰ód
(
buf„r
, 1, 
buf„r_size
, 
fûe
);

62 i‡(
	`„º‹
(
fûe
)) {

63 
	`ovs_Áèl
(
î∫o
, "ErrorÑeading input file");

65  *
n
 > 0;

67 
	}
}

69 
boﬁ


70 
	$∑r£_mu…ùÀ
(
FILE
 *
°ªam
)

72 
js⁄_∑r£r
 *
∑r£r
;

73 
buf„r
[
BUFSIZ
];

74 
size_t
 
n
, 
u£d
;

75 
boﬁ
 
ok
;

77 
∑r£r
 = 
NULL
;

78 
n
 = 
u£d
 = 0;

79 
ok
 = 
åue
;

80 
u£d
 < 
n
 || 
	`ªfûl
(
°ªam
, 
buf„r
,  buffer, &n, &used)) {

81 i‡(!
∑r£r
 && 
	`is•a˚
((Ë
buf„r
[
u£d
])) {

83 
u£d
++;

85 i‡(!
∑r£r
) {

86 
∑r£r
 = 
	`js⁄_∑r£r_¸óã
(0);

89 
u£d
 +
	`js⁄_∑r£r_„ed
(
∑r£r
, &
buf„r
[u£d], 
n
 - used);

90 i‡(
u£d
 < 
n
) {

91 i‡(!
	`¥öt_™d_‰ì_js⁄
(
	`js⁄_∑r£r_föish
(
∑r£r
))) {

92 
ok
 = 
Ál£
;

94 
∑r£r
 = 
NULL
;

98 i‡(
∑r£r
) {

99 i‡(!
	`¥öt_™d_‰ì_js⁄
(
	`js⁄_∑r£r_föish
(
∑r£r
))) {

100 
ok
 = 
Ál£
;

103  
ok
;

104 
	}
}

107 
	$maö
(
¨gc
, *
¨gv
[])

109 c⁄° *
öput_fûe
;

110 
FILE
 *
°ªam
;

111 
boﬁ
 
ok
;

113 
	`£t_¥ogøm_«me
(
¨gv
[0]);

116 c⁄° 
›ti⁄
 
›ti⁄s
[] = {

117 {"¥ëty", 
no_¨gumít
, &
¥ëty
, 1},

118 {"mu…ùÀ", 
no_¨gumít
, &
mu…ùÀ
, 1},

120 
›ti⁄_ödex
 = 0;

121 
c
 = 
	`gë›t_l⁄g
 (
¨gc
, 
¨gv
, "", 
›ti⁄s
, &
›ti⁄_ödex
);

123 i‡(
c
 == -1) {

126 
c
) {

131 
	`exô
(1);

134 
	`ab‹t
();

138 i‡(
¨gc
 - 
›töd
 != 1) {

139 
	`ovs_Áèl
(0, "usage: %s [--pretty] [--multiple] INPUT.json",

140 
¥ogøm_«me
);

143 
öput_fûe
 = 
¨gv
[
›töd
];

144 
°ªam
 = !
	`°rcmp
(
öput_fûe
, "-"Ë? 
°dö
 : 
	`f›í
(input_file, "r");

145 i‡(!
°ªam
) {

146 
	`ovs_Áèl
(
î∫o
, "C™nŸ o≥¿\"%s\"", 
öput_fûe
);

149 i‡(
mu…ùÀ
) {

150 
ok
 = 
	`∑r£_mu…ùÀ
(
°ªam
);

152 
ok
 = 
	`¥öt_™d_‰ì_js⁄
(
	`js⁄_‰om_°ªam
(
°ªam
));

155 
	`f˛o£
(
°ªam
);

157  !
ok
;

158 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/tests/test-jsonrpc.c

17 
	~<c⁄fig.h
>

19 
	~"js⁄Ωc.h
"

21 
	~<î∫o.h
>

22 
	~<f˙é.h
>

23 
	~<gë›t.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

27 
	~"comm™d-löe.h
"

28 
	~"d´m⁄.h
"

29 
	~"js⁄.h
"

30 
	~"pﬁl-lo›.h
"

31 
	~"°ªam-s¶.h
"

32 
	~"°ªam.h
"

33 
	~"timevÆ.h
"

34 
	~"utû.h
"

35 
	~"vlog.h
"

37 
comm™d
 
	gÆl_comm™ds
[];

39 
	$ußge
(Ë
NO_RETURN
;

40 
	`∑r£_›ti⁄s
(
¨gc
, *
¨gv
[]);

43 
	$maö
(
¨gc
, *
¨gv
[])

45 
	`¥o˘ôÀ_öô
(
¨gc
, 
¨gv
);

46 
	`£t_¥ogøm_«me
(
¨gv
[0]);

47 
	`∑r£_›ti⁄s
(
¨gc
, 
¨gv
);

48 
	`run_comm™d
(
¨gc
 - 
›töd
, 
¨gv
 + o±öd, 
Æl_comm™ds
);

50 
	}
}

53 
	$∑r£_›ti⁄s
(
¨gc
, *
¨gv
[])

56 
OPT_BOOTSTRAP_CA_CERT
 = 
UCHAR_MAX
 + 1,

57 
DAEMON_OPTION_ENUMS


59 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

60 {"vîbo£", 
›ti⁄Æ_¨gumít
, 
NULL
, 'v'},

61 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

62 
DAEMON_LONG_OPTIONS
,

63 {"boŸ°øp-ˇ-˚π", 
ªquúed_¨gumít
, 
NULL
, 
OPT_BOOTSTRAP_CA_CERT
},

64 
STREAM_SSL_LONG_OPTIONS
,

65 {
NULL
, 0, NULL, 0},

67 *
sh‹t_›ti⁄s
 = 
	`l⁄g_›ti⁄s_to_sh‹t_›ti⁄s
(
l⁄g_›ti⁄s
);

70 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
l⁄g_›ti⁄s
, 
NULL
);

71 i‡(
c
 == -1) {

75 
c
) {

77 
	`ußge
();

80 
	`vlog_£t_vîbosôy
(
›èrg
);

83 
DAEMON_OPTION_HANDLERS


85 
STREAM_SSL_OPTION_HANDLERS


87 
OPT_BOOTSTRAP_CA_CERT
:

88 
	`°ªam_s¶_£t_ˇ_˚π_fûe
(
›èrg
, 
åue
);

92 
	`exô
(
EXIT_FAILURE
);

95 
	`ab‹t
();

98 
	`‰ì
(
sh‹t_›ti⁄s
);

99 
	}
}

102 
	$ußge
()

104 
	`¥ötf
("%s: JSON-RPCÅest utility\n"

109 
¥ogøm_«me
,Örogram_name);

110 
	`°ªam_ußge
("JSON-RPC", 
åue
,Årue,Årue);

111 
	`d´m⁄_ußge
();

112 
	`vlog_ußge
();

113 
	`¥ötf
("\nOther options:\n"

115 
	`exô
(
EXIT_SUCCESS
);

116 
	}
}

120 
js⁄
 *

121 
	$∑r£_js⁄
(c⁄° *
s
)

123 
js⁄
 *js⁄ = 
	`js⁄_‰om_°rög
(
s
);

124 i‡(
js⁄
->
ty≥
 =
JSON_STRING
) {

125 
	`ovs_Áèl
(0, "\"%s\": %s", 
s
, 
js⁄
->
u
.
°rög
);

127  
js⁄
;

128 
	}
}

131 
	$¥öt_™d_‰ì_js⁄
(
js⁄
 *json)

133 *
°rög
 = 
	`js⁄_to_°rög
(
js⁄
, 
JSSF_SORT
);

134 
	`js⁄_de°roy
(
js⁄
);

135 
	`puts
(
°rög
);

136 
	`‰ì
(
°rög
);

137 
	}
}

142 
	$h™dÀ_Ωc
(
js⁄Ωc
 *
Ωc
, 
js⁄Ωc_msg
 *
msg
, 
boﬁ
 *
d⁄e
)

144 i‡(
msg
->
ty≥
 =
JSONRPC_REQUEST
) {

145 
js⁄Ωc_msg
 *
ª∂y
 = 
NULL
;

146 i‡(!
	`°rcmp
(
msg
->
mëhod
, "echo")) {

147 
ª∂y
 = 
	`js⁄Ωc_¸óã_ª∂y
(
	`js⁄_˛⁄e
(
msg
->
∑øms
), msg->
id
);

149 
js⁄
 *
îr‹
 = 
	`js⁄_obje˘_¸óã
();

150 
	`js⁄_obje˘_put_°rög
(
îr‹
, "error", "unknown method");

151 
ª∂y
 = 
	`js⁄Ωc_¸óã_îr‹
(
îr‹
, 
msg
->
id
);

152 
	`ovs_îr‹
(0, "unknow¿ªque° %s", 
msg
->
mëhod
);

154 
	`js⁄Ωc_£nd
(
Ωc
, 
ª∂y
);

156 } i‡(
msg
->
ty≥
 =
JSONRPC_NOTIFY
) {

157 i‡(!
	`°rcmp
(
msg
->
mëhod
, "shutdown")) {

158 *
d⁄e
 = 
åue
;

161 
	`ovs_îr‹
(0, "unknow¿nŸifiˇti⁄ %s", 
msg
->
mëhod
);

162  
ENOTTY
;

165 
	`ovs_îr‹
(0, "unsolicited JSON-RPCÑeply orÉrror");

166  
EPROTO
;

168 
	}
}

171 
	$do_li°í
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

173 
p°ªam
 *pstream;

174 
js⁄Ωc
 **
Ωcs
;

175 
size_t
 
n_Ωcs
, 
Æloˇãd_Ωcs
;

176 
boﬁ
 
d⁄e
;

177 
îr‹
;

179 
îr‹
 = 
	`js⁄Ωc_p°ªam_›í
(
¨gv
[1], &
p°ªam
, 
DSCP_DEFAULT
);

180 i‡(
îr‹
) {

181 
	`ovs_Áèl
(
îr‹
, "couldÇŸÜi°í o¿\"%s\"", 
¨gv
[1]);

184 
	`d´m⁄ize
();

186 
Ωcs
 = 
NULL
;

187 
n_Ωcs
 = 
Æloˇãd_Ωcs
 = 0;

188 
d⁄e
 = 
Ál£
;

190 
°ªam
 *stream;

191 
size_t
 
i
;

194 
îr‹
 = 
	`p°ªam_ac˚±
(
p°ªam
, &
°ªam
);

195 i‡(!
îr‹
) {

196 i‡(
n_Ωcs
 >
Æloˇãd_Ωcs
) {

197 
Ωcs
 = 
	`x2ƒóŒoc
‘pcs, &
Æloˇãd_Ωcs
,  *rpcs);

199 
Ωcs
[
n_Ωcs
++] = 
	`js⁄Ωc_›í
(
°ªam
);

200 } i‡(
îr‹
 !
EAGAIN
) {

201 
	`ovs_Áèl
(
îr‹
, "pstream_accept failed");

205 
i
 = 0; i < 
n_Ωcs
; ) {

206 
js⁄Ωc
 *
Ωc
 = 
Ωcs
[
i
];

207 
js⁄Ωc_msg
 *
msg
;

209 
	`js⁄Ωc_run
(
Ωc
);

210 i‡(!
	`js⁄Ωc_gë_backlog
(
Ωc
)) {

211 
îr‹
 = 
	`js⁄Ωc_ªcv
(
Ωc
, &
msg
);

212 i‡(!
îr‹
) {

213 
îr‹
 = 
	`h™dÀ_Ωc
(
Ωc
, 
msg
, &
d⁄e
);

214 
	`js⁄Ωc_msg_de°roy
(
msg
);

215 } i‡(
îr‹
 =
EAGAIN
) {

216 
îr‹
 = 0;

220 i‡(!
îr‹
) {

221 
îr‹
 = 
	`js⁄Ωc_gë_°©us
(
Ωc
);

223 i‡(
îr‹
) {

224 
	`js⁄Ωc_˛o£
(
Ωc
);

225 
	`ovs_îr‹
(
îr‹
, "connection closed");

226 
	`memmove
(&
Ωcs
[
i
], &rpcs[i + 1],

227 (
n_Ωcs
 - 
i
 - 1Ë*  *
Ωcs
);

228 
n_Ωcs
--;

230 
i
++;

235 i‡(
d⁄e
 && !
n_Ωcs
) {

238 
	`p°ªam_waô
(
p°ªam
);

239 
i
 = 0; i < 
n_Ωcs
; i++) {

240 
js⁄Ωc
 *
Ωc
 = 
Ωcs
[
i
];

242 
	`js⁄Ωc_waô
(
Ωc
);

243 i‡(!
	`js⁄Ωc_gë_backlog
(
Ωc
)) {

244 
	`js⁄Ωc_ªcv_waô
(
Ωc
);

247 
	`pﬁl_block
();

249 
	`‰ì
(
Ωcs
);

250 
	`p°ªam_˛o£
(
p°ªam
);

251 
	}
}

254 
	$do_ªque°
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

256 
js⁄Ωc_msg
 *
msg
;

257 
js⁄Ωc
 *
Ωc
;

258 
js⁄
 *
∑øms
;

259 
°ªam
 *stream;

260 c⁄° *
mëhod
;

261 *
°rög
;

262 
îr‹
;

264 
mëhod
 = 
¨gv
[2];

265 
∑øms
 = 
	`∑r£_js⁄
(
¨gv
[3]);

266 
msg
 = 
	`js⁄Ωc_¸óã_ªque°
(
mëhod
, 
∑øms
, 
NULL
);

267 
°rög
 = 
	`js⁄Ωc_msg_is_vÆid
(
msg
);

268 i‡(
°rög
) {

269 
	`ovs_Áèl
(0, "nŸá vÆid JSON-RPCÑeque°: %s", 
°rög
);

272 
îr‹
 = 
	`°ªam_›í_block
(
	`js⁄Ωc_°ªam_›í
(
¨gv
[1], &
°ªam
,

273 
DSCP_DEFAULT
), &
°ªam
);

274 i‡(
îr‹
) {

275 
	`ovs_Áèl
(
îr‹
, "couldÇŸ o≥¿\"%s\"", 
¨gv
[1]);

277 
Ωc
 = 
	`js⁄Ωc_›í
(
°ªam
);

279 
îr‹
 = 
	`js⁄Ωc_£nd
(
Ωc
, 
msg
);

280 i‡(
îr‹
) {

281 
	`ovs_Áèl
(
îr‹
, "couldÇot sendÑequest");

284 
îr‹
 = 
	`js⁄Ωc_ªcv_block
(
Ωc
, &
msg
);

285 i‡(
îr‹
) {

286 
	`ovs_Áèl
(
îr‹
, "error waiting forÑeply");

288 
	`¥öt_™d_‰ì_js⁄
(
	`js⁄Ωc_msg_to_js⁄
(
msg
));

290 
	`js⁄Ωc_˛o£
(
Ωc
);

291 
	}
}

294 
	$do_nŸify
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

296 
js⁄Ωc_msg
 *
msg
;

297 
js⁄Ωc
 *
Ωc
;

298 
js⁄
 *
∑øms
;

299 
°ªam
 *stream;

300 c⁄° *
mëhod
;

301 *
°rög
;

302 
îr‹
;

304 
mëhod
 = 
¨gv
[2];

305 
∑øms
 = 
	`∑r£_js⁄
(
¨gv
[3]);

306 
msg
 = 
	`js⁄Ωc_¸óã_nŸify
(
mëhod
, 
∑øms
);

307 
°rög
 = 
	`js⁄Ωc_msg_is_vÆid
(
msg
);

308 i‡(
°rög
) {

309 
	`ovs_Áèl
(0, "nŸá JSON RPC-vÆidÇŸifiˇti⁄: %s", 
°rög
);

312 
îr‹
 = 
	`°ªam_›í_block
(
	`js⁄Ωc_°ªam_›í
(
¨gv
[1], &
°ªam
,

313 
DSCP_DEFAULT
), &
°ªam
);

314 i‡(
îr‹
) {

315 
	`ovs_Áèl
(
îr‹
, "couldÇŸ o≥¿\"%s\"", 
¨gv
[1]);

317 
Ωc
 = 
	`js⁄Ωc_›í
(
°ªam
);

319 
îr‹
 = 
	`js⁄Ωc_£nd_block
(
Ωc
, 
msg
);

320 i‡(
îr‹
) {

321 
	`ovs_Áèl
(
îr‹
, "couldÇot sendÇotification");

323 
	`js⁄Ωc_˛o£
(
Ωc
);

324 
	}
}

327 
	$do_hñp
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

329 
	`ußge
();

330 
	}
}

332 
comm™d
 
	gÆl_comm™ds
[] = {

333 { "li°í", 1, 1, 
do_li°í
 },

334 { "ªque°", 3, 3, 
do_ªque°
 },

335 { "nŸify", 3, 3, 
do_nŸify
 },

336 { "hñp", 0, 
INT_MAX
, 
do_hñp
 },

337 { 
NULL
, 0, 0, NULL },

	@/home/lsch/mytest/openvswitch-1.9.0/tests/test-list.c

20 
	~<c⁄fig.h
>

21 
	~"li°.h
"

22 
	~<°rög.h
>

24 #unde‡
NDEBUG


25 
	~<as£π.h
>

28 
	sñemít
 {

29 
	mvÆue
;

30 
li°
 
	mnode
;

36 
	$make_li°
(
li°
 *li°, 
ñemít
 
ñemíts
[],

37 
vÆues
[], 
size_t
 
n
)

39 
size_t
 
i
;

41 
	`li°_öô
(
li°
);

42 
i
 = 0; i < 
n
; i++) {

43 
ñemíts
[
i
].
vÆue
 = i;

44 
	`li°_push_back
(
li°
, &
ñemíts
[
i
].
node
);

45 
vÆues
[
i
] = i;

47 
	}
}

52 
	$check_li°
(
li°
 *li°, c⁄° 
vÆues
[], 
size_t
 
n
)

54 
ñemít
 *
e
;

55 
size_t
 
i
;

57 
i
 = 0;

58 
	`LIST_FOR_EACH
 (
e
, 
node
, 
li°
) {

59 
	`as£π
(
i
 < 
n
);

60 
	`as£π
(
e
->
vÆue
 =
vÆues
[
i
]);

61 
i
++;

63 
	`as£π
(&
e
->
node
 =
li°
);

64 
	`as£π
(
i
 =
n
);

66 
i
 = 0;

67 
	`LIST_FOR_EACH_REVERSE
 (
e
, 
node
, 
li°
) {

68 
	`as£π
(
i
 < 
n
);

69 
	`as£π
(
e
->
vÆue
 =
vÆues
[
n
 - 
i
 - 1]);

70 
i
++;

72 
	`as£π
(&
e
->
node
 =
li°
);

73 
	`as£π
(
i
 =
n
);

75 
	`as£π
(
	`li°_is_em±y
(
li°
Ë=!
n
);

76 
	`as£π
(
	`li°_is_sögÀt⁄
(
li°
Ë=(
n
 == 1));

77 
	`as£π
(
	`li°_is_sh‹t
(
li°
Ë=(
n
 < 2));

78 
	`as£π
(
	`li°_size
(
li°
Ë=
n
);

79 
	}
}

84 
	$¥öt_li°
(c⁄° *
«me
, 
li°
 *list)

86 
ñemít
 *
e
;

88 
	`¥ötf
("%s:", 
«me
);

89 
	`LIST_FOR_EACH
 (
e
, 
node
, 
li°
) {

90 
	`¥ötf
(" %d", 
e
->
vÆue
);

92 
	`¥ötf
("\n");

93 
	}
}

98 
	$ã°_li°_c⁄°ru˘i⁄
()

100 íum { 
MAX_ELEMS
 = 100 };

101 
size_t
 
n
;

103 
n
 = 0;Ç <
MAX_ELEMS
;Ç++) {

104 
ñemít
 
ñemíts
[
MAX_ELEMS
];

105 
vÆues
[
MAX_ELEMS
];

106 
li°
Üist;

108 
	`make_li°
(&
li°
, 
ñemíts
, 
vÆues
, 
n
);

109 
	`check_li°
(&
li°
, 
vÆues
, 
n
);

111 
	}
}

116 
	$ã°_li°_f‹_óch_ß„
()

118 íum { 
MAX_ELEMS
 = 10 };

119 
size_t
 
n
;

120 
∑âîn
;

122 
n
 = 0;Ç <
MAX_ELEMS
;Ç++) {

123 
∑âîn
 = 0;Ö©ã∫ < 1u»<< 
n
;Öattern++) {

124 
ñemít
 
ñemíts
[
MAX_ELEMS
];

125 
vÆues
[
MAX_ELEMS
];

126 
li°
Üist;

127 
ñemít
 *
e
, *
√xt
;

128 
size_t
 
vÆues_idx
, 
n_ªmaöög
;

129 
i
;

131 
	`make_li°
(&
li°
, 
ñemíts
, 
vÆues
, 
n
);

133 
i
 = 0;

134 
vÆues_idx
 = 0;

135 
n_ªmaöög
 = 
n
;

136 
	`LIST_FOR_EACH_SAFE
 (
e
, 
√xt
, 
node
, &
li°
) {

137 
	`as£π
(
i
 < 
n
);

138 i‡(
∑âîn
 & (1u»<< 
i
)) {

139 
	`li°_ªmove
(&
e
->
node
);

140 
n_ªmaöög
--;

141 
	`memmove
(&
vÆues
[
vÆues_idx
], &values[values_idx + 1],

142  *
vÆues
 * (
n_ªmaöög
 - 
vÆues_idx
));

144 
vÆues_idx
++;

146 
	`check_li°
(&
li°
, 
vÆues
, 
n_ªmaöög
);

147 
i
++;

149 
	`as£π
(
i
 =
n
);

150 
	`as£π
(&
e
->
node
 =&
li°
);

152 
i
 = 0; i < 
n
; i++) {

153 i‡(
∑âîn
 & (1u»<< 
i
)) {

154 
n_ªmaöög
++;

157 
	`as£π
(
n
 =
n_ªmaöög
);

160 
	}
}

163 
run_ã°
((*
fun˘i⁄
)())

165 
	`fun˘i⁄
();

166 
	`¥ötf
(".");

167 
	}
}

170 
	$maö
()

172 
	`run_ã°
(
ã°_li°_c⁄°ru˘i⁄
);

173 
	`run_ã°
(
ã°_li°_f‹_óch_ß„
);

174 
	`¥ötf
("\n");

176 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/tests/test-lockfile.c

17 
	~<c⁄fig.h
>

19 
	~"lockfûe.h
"

21 
	~<î∫o.h
>

22 
	~<°dlib.h
>

23 
	~<sys/°©.h
>

24 
	~<sys/waô.h
>

25 
	~<uni°d.h
>

27 
	~"¥o˚ss.h
"

28 
	~"timevÆ.h
"

29 
	~"utû.h
"

30 
	~"vlog.h
"

32 
	sã°
 {

33 c⁄° *
	m«me
;

34 (*
	mfun˘i⁄
)();

37 c⁄° 
ã°
 
	gã°s
[];

39 
	#CHECK
(
A
, 
B
Ë
	`check
(A, B, #A, #B, 
__FILE__
, 
__LINE__
)

	)

41 
	$check
(
a
, 
b
,

42 c⁄° *
a_°rög
, c⁄° *
b_°rög
, c⁄° *
fûe
, 
löe
)

44 i‡(
a
 !
b
) {

45 
	`Ârötf
(
°dîr
, "%s:%d:Éxpected %s == %s but %d != %d\n",

46 
fûe
, 
löe
, 
a_°rög
, 
b_°rög
, 
a
, 
b
);

47 
	`fÊush
(
°dîr
);

48 
	`ab‹t
();

50 
	}
}

53 
	$run_lock_™d_u∆ock
()

55 
lockfûe
 *lockfile;

57 
	`CHECK
(
	`lockfûe_lock
("fûe", &
lockfûe
), 0);

58 
	`lockfûe_u∆ock
(
lockfûe
);

59 
	}
}

62 
	$run_lock_™d_u∆ock_twi˚
()

64 
lockfûe
 *lockfile;

66 
	`CHECK
(
	`lockfûe_lock
("fûe", &
lockfûe
), 0);

67 
	`lockfûe_u∆ock
(
lockfûe
);

69 
	`CHECK
(
	`lockfûe_lock
("fûe", &
lockfûe
), 0);

70 
	`lockfûe_u∆ock
(
lockfûe
);

71 
	}
}

74 
	$run_lock_blocks_ßme_¥o˚ss
()

76 
lockfûe
 *lockfile;

78 
	`CHECK
(
	`lockfûe_lock
("fûe", &
lockfûe
), 0);

79 
	`CHECK
(
	`lockfûe_lock
("fûe", &
lockfûe
), 
EDEADLK
);

80 
	`lockfûe_u∆ock
(
lockfûe
);

81 
	}
}

84 
	$run_lock_blocks_ßme_¥o˚ss_twi˚
()

86 
lockfûe
 *lockfile;

88 
	`CHECK
(
	`lockfûe_lock
("fûe", &
lockfûe
), 0);

89 
	`CHECK
(
	`lockfûe_lock
("fûe", &
lockfûe
), 
EDEADLK
);

90 
	`CHECK
(
	`lockfûe_lock
("fûe", &
lockfûe
), 
EDEADLK
);

91 
	`lockfûe_u∆ock
(
lockfûe
);

92 
	}
}

94 íum { 
	mPARENT
, 
	mCHILD
 }

95 
	$do_f‹k
()

97 
	`f‹k
()) {

99 
	`time_po°f‹k
();

100 
	`lockfûe_po°f‹k
();

101  
CHILD
;

104  
PARENT
;

108 
	`ovs_Áèl
(
î∫o
, "fork failed");

110 
	}
}

113 
	$run_lock_blocks_Ÿhî_¥o˚ss
()

119 
lockfûe
 *lockfile;

121 
	`CHECK
(
	`lockfûe_lock
("fûe", &
lockfûe
), 0);

122 i‡(
	`do_f‹k
(Ë=
CHILD
) {

123 
	`lockfûe_u∆ock
(
lockfûe
);

124 
	`CHECK
(
	`lockfûe_lock
("fûe", &
lockfûe
), 
EAGAIN
);

125 
	`exô
(11);

127 
	}
}

130 
	$run_lock_twi˚_blocks_Ÿhî_¥o˚ss
()

132 
lockfûe
 *lockfûe, *
dummy
;

134 
	`CHECK
(
	`lockfûe_lock
("fûe", &
lockfûe
), 0);

135 
	`CHECK
(
	`lockfûe_lock
("fûe", &
dummy
), 
EDEADLK
);

136 i‡(
	`do_f‹k
(Ë=
CHILD
) {

137 
	`CHECK
(
	`lockfûe_lock
("fûe", &
dummy
), 
EAGAIN
);

138 
	`exô
(11);

140 
	}
}

143 
	$run_lock_™d_u∆ock_Ælows_Ÿhî_¥o˚ss
()

145 
lockfûe
 *lockfile;

147 
	`CHECK
(
	`lockfûe_lock
("fûe", &
lockfûe
), 0);

148 
	`lockfûe_u∆ock
(
lockfûe
);

150 i‡(
	`do_f‹k
(Ë=
CHILD
) {

151 
	`CHECK
(
	`lockfûe_lock
("fûe", &
lockfûe
), 0);

152 
	`exô
(11);

154 
	}
}

157 
	$run_lock_mu…ùÀ
()

159 
lockfûe
 *
a
, *
b
, *
c
, *
dummy
;

161 
	`CHECK
(
	`lockfûe_lock
("a", &
a
), 0);

162 
	`CHECK
(
	`lockfûe_lock
("b", &
b
), 0);

163 
	`CHECK
(
	`lockfûe_lock
("c", &
c
), 0);

165 
	`lockfûe_u∆ock
(
a
);

166 
	`CHECK
(
	`lockfûe_lock
("a", &
a
), 0);

167 
	`CHECK
(
	`lockfûe_lock
("a", &
dummy
), 
EDEADLK
);

168 
	`lockfûe_u∆ock
(
a
);

170 
	`lockfûe_u∆ock
(
b
);

171 
	`CHECK
(
	`lockfûe_lock
("a", &
a
), 0);

173 
	`lockfûe_u∆ock
(
c
);

174 
	`lockfûe_u∆ock
(
a
);

175 
	}
}

179 
	$run_lock_symlök
()

181 
lockfûe
 *
a
, *
b
, *
dummy
;

182 
°©
 
s
;

185 
	`CHECK
(
	`symlök
(".b.~lock~", ".a.~lock~"), 0);

186 
	`CHECK
(
	`l°©
(".a.~lock~", &
s
), 0);

187 
	`CHECK
(
	`S_ISLNK
(
s
.
°_mode
) != 0, 1);

188 
	`CHECK
(
	`°©
(".a.~lock~", &
s
), -1);

189 
	`CHECK
(
î∫o
, 
ENOENT
);

190 
	`CHECK
(
	`°©
(".b.~lock~", &
s
), -1);

191 
	`CHECK
(
î∫o
, 
ENOENT
);

193 
	`CHECK
(
	`lockfûe_lock
("a", &
a
), 0);

194 
	`CHECK
(
	`lockfûe_lock
("a", &
dummy
), 
EDEADLK
);

195 
	`CHECK
(
	`lockfûe_lock
("b", &
dummy
), 
EDEADLK
);

196 
	`lockfûe_u∆ock
(
a
);

198 
	`CHECK
(
	`lockfûe_lock
("b", &
b
), 0);

199 
	`CHECK
(
	`lockfûe_lock
("b", &
dummy
), 
EDEADLK
);

200 
	`CHECK
(
	`lockfûe_lock
("a", &
dummy
), 
EDEADLK
);

201 
	`lockfûe_u∆ock
(
b
);

203 
	`CHECK
(
	`l°©
(".a.~lock~", &
s
), 0);

204 
	`CHECK
(
	`S_ISLNK
(
s
.
°_mode
) != 0, 1);

205 
	`CHECK
(
	`°©
(".a.~lock~", &
s
), 0);

206 
	`CHECK
(
	`S_ISREG
(
s
.
°_mode
) != 0, 1);

207 
	`CHECK
(
	`°©
(".b.~lock~", &
s
), 0);

208 
	`CHECK
(
	`S_ISREG
(
s
.
°_mode
) != 0, 1);

209 
	}
}

218 
	$run_lock_symlök_to_dú
()

220 
lockfûe
 *
a
, *
dummy
;

221 
°©
 
s
;

224 
	`CHECK
(
	`mkdú
("dir", 0700), 0);

225 
	`CHECK
(
	`symlök
("dir/b", "a"), 0);

226 
	`CHECK
(
	`l°©
("a", &
s
), 0);

227 
	`CHECK
(
	`S_ISLNK
(
s
.
°_mode
) != 0, 1);

230 
	`CHECK
(
	`lockfûe_lock
("a", &
a
), 0);

231 
	`CHECK
(
	`l°©
("dú/.b.~lock~", &
s
), 0);

232 
	`CHECK
(
	`S_ISREG
(
s
.
°_mode
) != 0, 1);

233 
	`CHECK
(
	`l°©
(".a.~lock~", &
s
), -1);

234 
	`CHECK
(
î∫o
, 
ENOENT
);

235 
	`CHECK
(
	`lockfûe_lock
("dú/b", &
dummy
), 
EDEADLK
);

237 
	`lockfûe_u∆ock
(
a
);

238 
	}
}

241 
	$run_hñp
()

243 
size_t
 
i
;

245 
	`¥ötf
("usage: %s TESTNAME\n"

247 
¥ogøm_«me
);

248 
i
 = 0; 
ã°s
[i].
«me
; i++) {

249 
	`Ârötf
(
°dîr
, "\t%s\n", 
ã°s
[
i
].
«me
);

251 
	}
}

253 c⁄° 
ã°
 
	gã°s
[] = {

254 
	#TEST
(
NAME
Ë{ #NAME, 
run_
##NAME }

	)

255 
TEST
(
lock_™d_u∆ock
),

256 
TEST
(
lock_™d_u∆ock_twi˚
),

257 
TEST
(
lock_blocks_ßme_¥o˚ss
),

258 
TEST
(
lock_blocks_ßme_¥o˚ss_twi˚
),

259 
TEST
(
lock_blocks_Ÿhî_¥o˚ss
),

260 
TEST
(
lock_twi˚_blocks_Ÿhî_¥o˚ss
),

261 
TEST
(
lock_™d_u∆ock_Ælows_Ÿhî_¥o˚ss
),

262 
TEST
(
lock_mu…ùÀ
),

263 
TEST
(
lock_symlök
),

264 
TEST
(
lock_symlök_to_dú
),

265 
TEST
(
hñp
),

266 { 
NULL
, NULL }

267 #unde‡
TEST


271 
	$maö
(
¨gc
, *
¨gv
[])

273 
size_t
 
i
;

275 
	`£t_¥ogøm_«me
(
¨gv
[0]);

276 
	`vlog_£t_∑âîn
(
VLF_CONSOLE
, "%c|%p|%m");

277 
	`vlog_£t_Àvñs
(
NULL
, 
VLF_SYSLOG
, 
VLL_OFF
);

279 i‡(
¨gc
 != 2) {

280 
	`ovs_Áèl
(0, "exactly oneárgumentÑequired; use \"%s help\" for help",

281 
¥ogøm_«me
);

285 
i
 = 0; 
ã°s
[i].
«me
; i++) {

286 i‡(!
	`°rcmp
(
¨gv
[1], 
ã°s
[
i
].
«me
)) {

287 
n_chûdªn
;

288 
°©us
;

290 (
ã°s
[
i
].
fun˘i⁄
)();

292 
n_chûdªn
 = 0;

293 
	`waô
(&
°©us
) > 0) {

294 i‡(
	`WIFEXITED
(
°©us
Ë&& 
	`WEXITSTATUS
(status) == 11) {

295 
n_chûdªn
++;

297 
	`ovs_Áèl
(0, "childÉxited in unexpected way: %s",

298 
	`¥o˚ss_°©us_msg
(
°©us
));

301 i‡(
î∫o
 !
ECHILD
) {

302 
	`ovs_Áèl
(
î∫o
, "wait");

305 
	`¥ötf
("%s: success (%d child%s)\n",

306 
ã°s
[
i
].
«me
, 
n_chûdªn
,Ç_children != 1 ? "ren" : "");

307 
	`exô
(0);

310 
	`ovs_Áèl
(0, "unknownÅest \"%s\"; use \"%s help\" for help",

311 
¨gv
[1], 
¥ogøm_«me
);

312 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/tests/test-multipath.c

17 
	~<c⁄fig.h
>

19 
	~"mu…ù©h.h
"

21 
	~<as£π.h
>

22 
	~<gë›t.h
>

23 
	~<m©h.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

27 
	~"Êow.h
"

28 
	~"oÂ-a˘i⁄s.h
"

29 
	~"øndom.h
"

30 
	~"utû.h
"

33 
	$maö
(
¨gc
, *
¨gv
[])

35 íum { 
MP_MAX_LINKS
 = 63 };

36 
oÂa˘_mu…ù©h
 
mp
;

37 
boﬁ
 
ok
 = 
åue
;

38 
n
;

40 
	`£t_¥ogøm_«me
(
¨gv
[0]);

41 
	`øndom_öô
();

43 i‡(
¨gc
 != 2) {

44 
	`ovs_Áèl
(0, "ußge: %†mu…ù©h_a˘i⁄", 
¥ogøm_«me
);

47 
	`mu…ù©h_∑r£
(&
mp
, 
¨gv
[1]);

48 
n
 = 1;Ç <
MP_MAX_LINKS
;Ç++) {

49 íum { 
N_FLOWS
 = 65536 };

50 
di§u±i⁄
, 
≥r„˘
, 
di°ributi⁄
;

51 
hi°ogøm
[
MP_MAX_LINKS
];

52 
sum_dev2
, 
°ddev
;

53 
ch™ged
;

54 
i
;

56 
ch™ged
 = 0;

57 
	`mem£t
(
hi°ogøm
, 0,  histogram);

58 
i
 = 0; i < 
N_FLOWS
; i++) {

59 
ﬁd_lök
, 
√w_lök
;

60 
Êow
 flow;

62 
	`øndom_byãs
(&
Êow
,  flow);

63 
	`mem£t
(
Êow
.
zîos
, 0,  flow.zeros);

65 
mp
.
max_lök
 = 
n
 - 1;

66 
	`mu…ù©h_execuã
(&
mp
, &
Êow
);

67 
ﬁd_lök
 = 
Êow
.
ªgs
[0];

69 
mp
.
max_lök
 = 
n
;

70 
	`mu…ù©h_execuã
(&
mp
, &
Êow
);

71 
√w_lök
 = 
Êow
.
ªgs
[0];

73 
	`as£π
(
ﬁd_lök
 >0 && old_lök < 
n
);

74 
	`as£π
(
√w_lök
 >0 &&Çew_lök < 
n
 + 1);

76 
hi°ogøm
[
ﬁd_lök
]++;

77 
ch™ged
 +
ﬁd_lök
 !
√w_lök
;

80 
sum_dev2
 = 0.0;

81 
i
 = 0; i < 
n
; i++) {

82 
món
 = (Ë
N_FLOWS
 / 
n
;

83 
devüti⁄
 = 
hi°ogøm
[
i
] - 
món
;

85 
sum_dev2
 +
devüti⁄
 * deviation;

87 
°ddev
 = 
	`sqπ
(
sum_dev2
 / 
n
);

89 
di§u±i⁄
 = (Ë
ch™ged
 / 
N_FLOWS
;

90 
≥r„˘
 = 1.0 / (
n
 + 1);

91 
di°ributi⁄
 = 
°ddev
 / ((Ë
N_FLOWS
 / 
n
);

92 
	`¥ötf
("%2d -> %2d: disruption=%.2f (perfect=%.2f); "

94 
n
,Ç + 1, 
di§u±i⁄
, 
≥r„˘
, 
di°ributi⁄
);

96 
mp
.
Æg‹ôhm
) {

97 
NX_MP_ALG_MODULO_N
:

98 i‡(
di§u±i⁄
 < (
n
 < 2 ? .25 : .5)) {

99 
	`Ârötf
(
°dîr
, "%d -> %d: disruption=%.2f < .5\n",

100 
n
,Ç + 1, 
di§u±i⁄
);

101 
ok
 = 
Ál£
;

105 
NX_MP_ALG_HASH_THRESHOLD
:

106 i‡(
di§u±i⁄
 < .48 || disruption > .52) {

107 
	`Ârötf
(
°dîr
, "%d -> %d: disruption=%.2fÇotápproximately "

108 ".5\n", 
n
,Ç + 1, 
di§u±i⁄
);

109 
ok
 = 
Ál£
;

113 
NX_MP_ALG_ITER_HASH
:

114 i‡(!(
n
 & (n - 1))) {

118 
NX_MP_ALG_HRW
:

119 i‡(
	`Ábs
(
di§u±i⁄
 - 
≥r„˘
) >= .01) {

120 
	`Ârötf
(
°dîr
, "%d -> %d: disruption=%.5f differs from "

122 
n
,Ç + 1, 
di§u±i⁄
, 
≥r„˘
);

123 
ok
 = 
Ál£
;

128 
	`NOT_REACHED
();

132  
ok
 ? 0 : 1;

133 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/tests/test-netflow.c

17 
	~<c⁄fig.h
>

19 
	~<î∫o.h
>

20 
	~<gë›t.h
>

21 
	~<sig«l.h
>

22 
	~<°dlib.h
>

23 
	~<uni°d.h
>

25 
	~"comm™d-löe.h
"

26 
	~"d´m⁄.h
"

27 
	~"dy«mic-°rög.h
"

28 
	~"√tÊow.h
"

29 
	~"oÂbuf.h
"

30 
	~"∑ckës.h
"

31 
	~"pﬁl-lo›.h
"

32 
	~"sockë-utû.h
"

33 
	~"unix˘l.h
"

34 
	~"utû.h
"

35 
	~"vlog.h
"

37 
	$ußge
(Ë
NO_RETURN
;

38 
	`∑r£_›ti⁄s
(
¨gc
, *
¨gv
[]);

40 
unix˘l_cb_func
 
ã°_√tÊow_exô
;

43 
	$¥öt_√tÊow
(
oÂbuf
 *
buf
)

45 c⁄° 
√tÊow_v5_hódî
 *
hdr
;

46 
i
;

48 
hdr
 = 
	`oÂbuf_åy_puŒ
(
buf
,  *hdr);

49 i‡(!
hdr
) {

50 
	`¥ötf
("truncated NetFlowÖacket header\n");

53 
	`¥ötf
("hódî: v%"
PRIu16
", "

54 "u±imê%"
PRIu32
", "

55 "now %"
PRIu32
".%09"PRIu32", "

56 "£q %"
PRIu32
", "

57 "ígöê%"
PRIu8
",%"PRIu8,

58 
	`¡ohs
(
hdr
->
vîsi⁄
),

59 
	`¡ohl
(
hdr
->
sysu±ime
),

60 
	`¡ohl
(
hdr
->
unix_£cs
),Çtohl(hdr->
unix_n£cs
),

61 
	`¡ohl
(
hdr
->
Êow_£q
),

62 
hdr
->
ígöe_ty≥
, hdr->
ígöe_id
);

63 i‡(
hdr
->
ßm∂ög_öãrvÆ
 !
	`ht⁄s
(0)) {

64 
	`¥ötf
(", i¡îvÆ %"
PRIu16
, 
	`¡ohs
(
hdr
->
ßm∂ög_öãrvÆ
));

66 
	`putch¨
('\n');

68 
i
 = 0; i < 
	`¡ohs
(
hdr
->
cou¡
); i++) {

69 
√tÊow_v5_ªc‹d
 *
ªc
;

71 
ªc
 = 
	`oÂbuf_åy_puŒ
(
buf
,  *rec);

72 i‡(!
ªc
) {

73 
	`¥ötf
("truncated NetFlowÑecords\n");

77 
	`¥ötf
("£q %"
PRIu32
": "
IP_FMT
" > "IP_FMT, 
	`¡ohl
(
hdr
->
Êow_£q
),

78 
	`IP_ARGS
(&
ªc
->
§c_addr
), IP_ARGS(&ªc->
d°_addr
));

80 
	`¥ötf
(", i‡%"
PRIu16
" > %"PRIu16,

81 
	`¡ohs
(
ªc
->
öput
),Çtohs‘ec->
ouçut
));

83 
	`¥ötf
(", %"
PRIu32
"Ökts, %"PRIu32" bytes",

84 
	`¡ohl
(
ªc
->
∑ckë_cou¡
),Çtohl‘ec->
byã_cou¡
));

86 
ªc
->
ù_¥Ÿo
) {

87 
IPPROTO_TCP
:

88 
	`¥ötf
(", TCP %"
PRIu16
" > %"PRIu16,

89 
	`¡ohs
(
ªc
->
§c_p‹t
),Çtohs‘ec->
d°_p‹t
));

90 i‡(
ªc
->
t˝_Êags
) {

91 
ds
 
s
 = 
DS_EMPTY_INITIALIZER
;

92 
	`∑ckë_f‹m©_t˝_Êags
(&
s
, 
ªc
->
t˝_Êags
);

93 
	`¥ötf
(" %s", 
	`ds_c°r
(&
s
));

94 
	`ds_de°roy
(&
s
);

98 
IPPROTO_UDP
:

99 
	`¥ötf
(", UDP %"
PRIu16
" > %"PRIu16,

100 
	`¡ohs
(
ªc
->
§c_p‹t
),Çtohs‘ec->
d°_p‹t
));

103 
IPPROTO_ICMP
:

104 
	`¥ötf
(", ICMP %"
PRIu16
":%"PRIu16,

105 
	`¡ohs
(
ªc
->
d°_p‹t
) >> 8,

106 
	`¡ohs
(
ªc
->
d°_p‹t
) & 0xff);

107 i‡(
ªc
->
§c_p‹t
 !
	`ht⁄s
(0)) {

108 
	`¥ötf
(", src_p‹t=%"
PRIu16
, 
	`¡ohs
(
ªc
->
§c_p‹t
));

113 
	`¥ötf
(",ÖrŸÿ%"
PRIu8
, 
ªc
->
ù_¥Ÿo
);

117 i‡(
ªc
->
ù_¥Ÿo
 !
IPPROTO_TCP
 &&Ñec->
t˝_Êags
 != 0) {

118 
	`¥ötf
(", fœg†%"
PRIx8
, 
ªc
->
t˝_Êags
);

121 i‡(
ªc
->
ù_¥Ÿo
 !
IPPROTO_TCP
 &&

122 
ªc
->
ù_¥Ÿo
 !
IPPROTO_UDP
 &&

123 
ªc
->
ù_¥Ÿo
 !
IPPROTO_ICMP
) {

124 i‡(
ªc
->
§c_p‹t
 !
	`ht⁄s
(0)) {

125 
	`¥ötf
(", src_p‹à%"
PRIu16
, 
	`¡ohs
(
ªc
->
§c_p‹t
));

127 i‡(
ªc
->
d°_p‹t
 !
	`ht⁄s
(0)) {

128 
	`¥ötf
(", d°_p‹à%"
PRIu16
, 
	`¡ohs
(
ªc
->
d°_p‹t
));

132 i‡(
ªc
->
ù_tos
) {

133 
	`¥ötf
(", TOS %"
PRIx8
, 
ªc
->
ù_tos
);

136 
	`¥ötf
(",Åimê%"
PRIu32
"...%"PRIu32,

137 
	`¡ohl
(
ªc
->
öô_time
),Çtohl‘ec->
u£d_time
));

139 i‡(
ªc
->
√xth›
 !
	`ht⁄l
(0)) {

140 
	`¥ötf
(",Çexth› "
IP_FMT
, 
	`IP_ARGS
(&
ªc
->
√xth›
));

142 i‡(
ªc
->
§c_as
 !
	`ht⁄s
(0Ë||Ñec->
d°_as
 != htons(0)) {

143 
	`¥ötf
(", AS %"
PRIu16
" > %"PRIu16,

144 
	`¡ohs
(
ªc
->
§c_as
),Çtohs‘ec->
d°_as
));

146 i‡(
ªc
->
§c_mask
 !0 ||Ñec->
d°_mask
 != 0) {

147 
	`¥ötf
(", mask %"
PRIu8
" > %"PRIu8, 
ªc
->
§c_mask
,Ñec->
d°_mask
);

149 i‡(
ªc
->
∑d1
) {

150 
	`¥ötf
(",Öad1 %"
PRIu8
, 
ªc
->
∑d1
);

152 i‡(
ªc
->
∑d
[0] ||Ñec->pad[1]) {

153 
	`¥ötf
(",Öad %"
PRIu8
", %"PRIu8, 
ªc
->
∑d
[0],Ñec->pad[1]);

155 
	`putch¨
('\n');

158 i‡(
buf
->
size
) {

159 
	`¥ötf
("%zuÉxå®byã†a·îÜa°Ñec‹d\n", 
buf
->
size
);

161 
	}
}

164 
	$maö
(
¨gc
, *
¨gv
[])

166 
unix˘l_£rvî
 *
£rvî
;

167 íum { 
MAX_RECV
 = 1500 };

168 c⁄° *
èrgë
;

169 
oÂbuf
 
buf
;

170 
boﬁ
 
exôög
 = 
Ál£
;

171 
îr‹
;

172 
sock
;

173 
n
;

175 
	`¥o˘ôÀ_öô
(
¨gc
, 
¨gv
);

176 
	`£t_¥ogøm_«me
(
¨gv
[0]);

177 
	`∑r£_›ti⁄s
(
¨gc
, 
¨gv
);

179 i‡(
¨gc
 - 
›töd
 != 1) {

180 
	`ovs_Áèl
(0, "exactly oneÇon-optionárgumentÑequired "

183 
èrgë
 = 
¨gv
[
›töd
];

185 
sock
 = 
	`öë_›í_∑ssive
(
SOCK_DGRAM
, 
èrgë
, 0, 
NULL
, 0);

186 i‡(
sock
 < 0) {

187 
	`ovs_Áèl
(0, "%s: faûedÅÿ›í (%s)", 
¨gv
[1], 
	`°ªº‹
(-
sock
));

190 
	`d´m⁄_ßve_fd
(
STDOUT_FILENO
);

191 
	`d´m⁄ize_°¨t
();

193 
îr‹
 = 
	`unix˘l_£rvî_¸óã
(
NULL
, &
£rvî
);

194 i‡(
îr‹
) {

195 
	`ovs_Áèl
(
îr‹
, "failedÅo create unixctl server");

197 
	`unix˘l_comm™d_ªgi°î
("exô", "", 0, 0, 
ã°_√tÊow_exô
, &
exôög
);

199 
	`d´m⁄ize_com∂ëe
();

201 
	`oÂbuf_öô
(&
buf
, 
MAX_RECV
);

202 
n
 = 0;

204 
ªtvÆ
;

206 
	`unix˘l_£rvî_run
(
£rvî
);

208 
	`oÂbuf_˛ór
(&
buf
);

210 
ªtvÆ
 = 
	`ªad
(
sock
, 
buf
.
d©a
, buf.
Æloˇãd
);

211 } 
ªtvÆ
 < 0 && 
î∫o
 =
EINTR
);

212 i‡(
ªtvÆ
 > 0) {

213 
	`oÂbuf_put_unöô
(&
buf
, 
ªtvÆ
);

214 i‡(
n
++ > 0) {

215 
	`putch¨
('\n');

217 
	`¥öt_√tÊow
(&
buf
);

218 
	`fÊush
(
°dout
);

221 i‡(
exôög
) {

225 
	`pﬁl_fd_waô
(
sock
, 
POLLIN
);

226 
	`unix˘l_£rvî_waô
(
£rvî
);

227 
	`pﬁl_block
();

231 
	}
}

234 
	$∑r£_›ti⁄s
(
¨gc
, *
¨gv
[])

237 
DAEMON_OPTION_ENUMS


239 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

240 {"vîbo£", 
›ti⁄Æ_¨gumít
, 
NULL
, 'v'},

241 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

242 
DAEMON_LONG_OPTIONS
,

243 {
NULL
, 0, NULL, 0},

245 *
sh‹t_›ti⁄s
 = 
	`l⁄g_›ti⁄s_to_sh‹t_›ti⁄s
(
l⁄g_›ti⁄s
);

248 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
l⁄g_›ti⁄s
, 
NULL
);

249 i‡(
c
 == -1) {

253 
c
) {

255 
	`ußge
();

258 
	`vlog_£t_vîbosôy
(
›èrg
);

261 
DAEMON_OPTION_HANDLERS


264 
	`exô
(
EXIT_FAILURE
);

267 
	`ab‹t
();

270 
	`‰ì
(
sh‹t_›ti⁄s
);

271 
	}
}

274 
	$ußge
()

276 
	`¥ötf
("%s:Çetflow collectorÅest utility\n"

280 
¥ogøm_«me
,Örogram_name);

281 
	`d´m⁄_ußge
();

282 
	`vlog_ußge
();

283 
	`¥ötf
("\nOther options:\n"

285 
	`exô
(
EXIT_SUCCESS
);

286 
	}
}

289 
	$ã°_√tÊow_exô
(
unix˘l_c⁄n
 *
c⁄n
,

290 
¨gc
 
OVS_UNUSED
, c⁄° *
¨gv
[] OVS_UNUSED,

291 *
exôög_
)

293 
boﬁ
 *
exôög
 = 
exôög_
;

294 *
exôög
 = 
åue
;

295 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, 
NULL
);

296 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/tests/test-odp.c

17 
	~<c⁄fig.h
>

19 
	~<°dio.h
>

21 
	~"dy«mic-°rög.h
"

22 
	~"Êow.h
"

23 
	~"odp-utû.h
"

24 
	~"oÂbuf.h
"

25 
	~"utû.h
"

26 
	~"vlog.h
"

29 
	$∑r£_keys
()

31 
exô_code
 = 0;

32 
ds
 
ö
;

34 
	`ds_öô
(&
ö
);

35 
	`vlog_£t_Àvñs_‰om_°rög
("odp_util:console:dbg");

36 !
	`ds_gë_ã°_löe
(&
ö
, 
°dö
)) {

37 
odp_key_fô√ss
 
fô√ss
;

38 
oÂbuf
 
odp_key
;

39 
Êow
 flow;

40 
ds
 
out
;

41 
îr‹
;

44 
	`oÂbuf_öô
(&
odp_key
, 0);

45 
îr‹
 = 
	`odp_Êow_key_‰om_°rög
(
	`ds_c°r
(&
ö
), 
NULL
, &
odp_key
);

46 i‡(
îr‹
) {

47 
	`¥ötf
("odp_flow_key_from_string:Érror\n");

48 
√xt
;

52 
fô√ss
 = 
	`odp_Êow_key_to_Êow
(
odp_key
.
d©a
, odp_key.
size
, &
Êow
);

53 
fô√ss
) {

54 
ODP_FIT_PERFECT
:

57 
ODP_FIT_TOO_LITTLE
:

58 
	`¥ötf
("ODP_FIT_TOO_LITTLE: ");

61 
ODP_FIT_TOO_MUCH
:

62 
	`¥ötf
("ODP_FIT_TOO_MUCH: ");

65 
ODP_FIT_ERROR
:

66 
	`¥ötf
("odp_flow_key_to_flow:Érror\n");

67 
√xt
;

71 
	`oÂbuf_unöô
(&
odp_key
);

72 
	`oÂbuf_öô
(&
odp_key
, 0);

73 
	`odp_Êow_key_‰om_Êow
(&
odp_key
, &
Êow
);

75 i‡(
odp_key
.
size
 > 
ODPUTIL_FLOW_KEY_BYTES
) {

76 
	`¥ötf
 ("tooÜong: %zu > %d\n",

77 
odp_key
.
size
, 
ODPUTIL_FLOW_KEY_BYTES
);

78 
exô_code
 = 1;

82 
	`ds_öô
(&
out
);

83 
	`odp_Êow_key_f‹m©
(
odp_key
.
d©a
, odp_key.
size
, &
out
);

84 
	`puts
(
	`ds_c°r
(&
out
));

85 
	`ds_de°roy
(&
out
);

87 
√xt
:

88 
	`oÂbuf_unöô
(&
odp_key
);

90 
	`ds_de°roy
(&
ö
);

92  
exô_code
;

93 
	}
}

96 
	$∑r£_a˘i⁄s
()

98 
ds
 
ö
;

100 
	`ds_öô
(&
ö
);

101 
	`vlog_£t_Àvñs_‰om_°rög
("odp_util:console:dbg");

102 !
	`ds_gë_ã°_löe
(&
ö
, 
°dö
)) {

103 
oÂbuf
 
odp_a˘i⁄s
;

104 
ds
 
out
;

105 
îr‹
;

108 
	`oÂbuf_öô
(&
odp_a˘i⁄s
, 0);

109 
îr‹
 = 
	`odp_a˘i⁄s_‰om_°rög
(
	`ds_c°r
(&
ö
), 
NULL
, &
odp_a˘i⁄s
);

110 i‡(
îr‹
) {

111 
	`¥ötf
("odp_actions_from_string:Érror\n");

112 
√xt
;

116 
	`ds_öô
(&
out
);

117 
	`f‹m©_odp_a˘i⁄s
(&
out
, 
odp_a˘i⁄s
.
d©a
, odp_a˘i⁄s.
size
);

118 
	`puts
(
	`ds_c°r
(&
out
));

119 
	`ds_de°roy
(&
out
);

121 
√xt
:

122 
	`oÂbuf_unöô
(&
odp_a˘i⁄s
);

124 
	`ds_de°roy
(&
ö
);

127 
	}
}

130 
	$maö
(
¨gc
, *
¨gv
[])

132 i‡(
¨gc
 =2 &&!
	`°rcmp
(
¨gv
[1], "parse-keys")) {

133  
	`∑r£_keys
();

134 } i‡(
¨gc
 =2 && !
	`°rcmp
(
¨gv
[1], "parse-actions")) {

135  
	`∑r£_a˘i⁄s
();

137 
	`ovs_Áèl
(0, "ußge: %†∑r£-key†|Ö¨£-a˘i⁄s", 
¨gv
[0]);

139 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/tests/test-ovsdb.c

17 
	~<c⁄fig.h
>

19 
	~<as£π.h
>

20 
	~<f˙é.h
>

21 
	~<gë›t.h
>

22 
	~<öây≥s.h
>

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

26 
	~"comm™d-löe.h
"

27 
	~"dy«mic-°rög.h
"

28 
	~"js⁄.h
"

29 
	~"js⁄Ωc.h
"

30 
	~"ovsdb-d©a.h
"

31 
	~"ovsdb-îr‹.h
"

32 
	~"ovsdb-idl.h
"

33 
	~"ovsdb-ty≥s.h
"

34 
	~"ovsdb/cﬁumn.h
"

35 
	~"ovsdb/c⁄dôi⁄.h
"

36 
	~"ovsdb/fûe.h
"

37 
	~"ovsdb/log.h
"

38 
	~"ovsdb/muèti⁄.h
"

39 
	~"ovsdb/ovsdb.h
"

40 
	~"ovsdb/quîy.h
"

41 
	~"ovsdb/row.h
"

42 
	~"ovsdb/£rvî.h
"

43 
	~"ovsdb/èbÀ.h
"

44 
	~"ovsdb/å™ß˘i⁄.h
"

45 
	~"ovsdb/åiggî.h
"

46 
	~"pﬁl-lo›.h
"

47 
	~"°ªam.h
"

48 
	~"svec.h
"

49 
	~"ã°s/id…e°.h
"

50 
	~"timevÆ.h
"

51 
	~"utû.h
"

52 
	~"vlog.h
"

54 
comm™d
 
	gÆl_comm™ds
[];

56 
	$ußge
(Ë
NO_RETURN
;

57 
	`∑r£_›ti⁄s
(
¨gc
, *
¨gv
[]);

60 
	$maö
(
¨gc
, *
¨gv
[])

62 
	`£t_¥ogøm_«me
(
¨gv
[0]);

63 
	`∑r£_›ti⁄s
(
¨gc
, 
¨gv
);

64 
	`run_comm™d
(
¨gc
 - 
›töd
, 
¨gv
 + o±öd, 
Æl_comm™ds
);

66 
	}
}

69 
	$∑r£_›ti⁄s
(
¨gc
, *
¨gv
[])

71 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

72 {"timeout", 
ªquúed_¨gumít
, 
NULL
, 't'},

73 {"vîbo£", 
›ti⁄Æ_¨gumít
, 
NULL
, 'v'},

74 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

75 {
NULL
, 0, NULL, 0},

77 *
sh‹t_›ti⁄s
 = 
	`l⁄g_›ti⁄s_to_sh‹t_›ti⁄s
(
l⁄g_›ti⁄s
);

80 
timeout
;

81 
c
;

83 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
l⁄g_›ti⁄s
, 
NULL
);

84 i‡(
c
 == -1) {

88 
c
) {

90 
timeout
 = 
	`°πoul
(
›èrg
, 
NULL
, 10);

91 i‡(
timeout
 <= 0) {

92 
	`ovs_Áèl
(0, "value %s on -t or --timeout isÇotátÜeast 1",

93 
›èrg
);

95 
	`time_Æ¨m
(
timeout
);

100 
	`ußge
();

103 
	`vlog_£t_vîbosôy
(
›èrg
);

107 
	`exô
(
EXIT_FAILURE
);

110 
	`ab‹t
();

113 
	`‰ì
(
sh‹t_›ti⁄s
);

114 
	}
}

117 
	$ußge
()

119 
	`¥ötf
("%s: Open vSwitch databaseÅest utility\n"

188 
¥ogøm_«me
,Örogram_name);

189 
	`vlog_ußge
();

190 
	`¥ötf
("\nOther options:\n"

193 
	`exô
(
EXIT_SUCCESS
);

194 
	}
}

198 
js⁄
 *

199 
	$∑r£_js⁄
(c⁄° *
s
)

201 
js⁄
 *js⁄ = 
	`js⁄_‰om_°rög
(
s
);

202 i‡(
js⁄
->
ty≥
 =
JSON_STRING
) {

203 
	`ovs_Áèl
(0, "\"%s\": %s", 
s
, 
js⁄
->
u
.
°rög
);

205  
js⁄
;

206 
	}
}

208 
js⁄
 *

209 
	$unbox_js⁄
(
js⁄
 *json)

211 i‡(
js⁄
->
ty≥
 =
JSON_ARRAY
 && js⁄->
u
.
¨øy
.
n
 == 1) {

212 
js⁄
 *
ö√r
 = js⁄->
u
.
¨øy
.
ñems
[0];

213 
js⁄
->
u
.
¨øy
.
ñems
[0] = 
NULL
;

214 
	`js⁄_de°roy
(
js⁄
);

215  
ö√r
;

217  
js⁄
;

219 
	}
}

222 
	$¥öt_™d_‰ì_js⁄
(
js⁄
 *json)

224 *
°rög
 = 
	`js⁄_to_°rög
(
js⁄
, 
JSSF_SORT
);

225 
	`js⁄_de°roy
(
js⁄
);

226 
	`puts
(
°rög
);

227 
	`‰ì
(
°rög
);

228 
	}
}

231 
	$¥öt_™d_‰ì_ovsdb_îr‹
(
ovsdb_îr‹
 *
îr‹
)

233 *
°rög
 = 
	`ovsdb_îr‹_to_°rög
(
îr‹
);

234 
	`ovsdb_îr‹_de°roy
(
îr‹
);

235 
	`puts
(
°rög
);

236 
	`‰ì
(
°rög
);

237 
	}
}

240 
	$check_ovsdb_îr‹
(
ovsdb_îr‹
 *
îr‹
)

242 i‡(
îr‹
) {

243 *
s
 = 
	`ovsdb_îr‹_to_°rög
(
îr‹
);

244 
	`ovsdb_îr‹_de°roy
(
îr‹
);

245 
	`ovs_Áèl
(0, "%s", 
s
);

247 
	}
}

250 
	$dõ_if_îr‹
(*
îr‹
)

252 i‡(
îr‹
) {

253 
	`ovs_Áèl
(0, "%s", 
îr‹
);

255 
	}
}

260 
	$do_log_io
(
¨gc
, *
¨gv
[])

262 c⁄° *
«me
 = 
¨gv
[1];

263 *
mode_°rög
 = 
¨gv
[2];

265 
ovsdb_îr‹
 *
îr‹
;

266 
ovsdb_log_›í_mode
 
mode
;

267 
ovsdb_log
 *
log
;

268 
i
;

270 i‡(!
	`°rcmp
(
mode_°rög
, "read-only")) {

271 
mode
 = 
OVSDB_LOG_READ_ONLY
;

272 } i‡(!
	`°rcmp
(
mode_°rög
, "read/write")) {

273 
mode
 = 
OVSDB_LOG_READ_WRITE
;

274 } i‡(!
	`°rcmp
(
mode_°rög
, "create")) {

275 
mode
 = 
OVSDB_LOG_CREATE
;

277 
	`ovs_Áèl
(0, "unknow¿log-iÿ›í modê\"%s\"", 
mode_°rög
);

280 
	`check_ovsdb_îr‹
(
	`ovsdb_log_›í
(
«me
, 
mode
, -1, &
log
));

281 
	`¥ötf
("%s: o≥¿suc˚ssful\n", 
«me
);

283 
i
 = 3; i < 
¨gc
; i++) {

284 c⁄° *
comm™d
 = 
¨gv
[
i
];

285 i‡(!
	`°rcmp
(
comm™d
, "read")) {

286 
js⁄
 *json;

288 
îr‹
 = 
	`ovsdb_log_ªad
(
log
, &
js⁄
);

289 i‡(!
îr‹
) {

290 
	`¥ötf
("%s:Ñód: ", 
«me
);

291 i‡(
js⁄
) {

292 
	`¥öt_™d_‰ì_js⁄
(
js⁄
);

294 
	`¥ötf
("end ofÜog\n");

298 } i‡(!
	`°∫cmp
(
comm™d
, "write:", 6)) {

299 
js⁄
 *js⁄ = 
	`∑r£_js⁄
(
comm™d
 + 6);

300 
îr‹
 = 
	`ovsdb_log_wrôe
(
log
, 
js⁄
);

301 
	`js⁄_de°roy
(
js⁄
);

302 } i‡(!
	`°rcmp
(
comm™d
, "commit")) {

303 
îr‹
 = 
	`ovsdb_log_commô
(
log
);

305 
	`ovs_Áèl
(0, "unknow¿log-iÿcomm™d \"%s\"", 
comm™d
);

307 i‡(
îr‹
) {

308 *
s
 = 
	`ovsdb_îr‹_to_°rög
(
îr‹
);

309 
	`¥ötf
("%s: %†Áûed: %s\n", 
«me
, 
comm™d
, 
s
);

310 
	`‰ì
(
s
);

311 
	`ovsdb_îr‹_de°roy
(
îr‹
);

313 
	`¥ötf
("%s: %†suc˚ssful\n", 
«me
, 
comm™d
);

317 
	`ovsdb_log_˛o£
(
log
);

318 
	}
}

321 
	$do_deÁu…_©oms
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

323 
ty≥
;

325 
ty≥
 = 0;Åy≥ < 
OVSDB_N_TYPES
;Åype++) {

326 
ovsdb_©om
 
©om
;

328 i‡(
ty≥
 =
OVSDB_TYPE_VOID
) {

332 
	`¥ötf
("%s: ", 
	`ovsdb_©omic_ty≥_to_°rög
(
ty≥
));

334 
	`ovsdb_©om_öô_deÁu…
(&
©om
, 
ty≥
);

335 i‡(!
	`ovsdb_©om_equÆs
(&
©om
, 
	`ovsdb_©om_deÁu…
(
ty≥
),Åype)) {

336 
	`¥ötf
("wrong\n");

337 
	`exô
(1);

339 
	`ovsdb_©om_de°roy
(&
©om
, 
ty≥
);

341 
	`¥ötf
("OK\n");

343 
	}
}

346 
	$do_deÁu…_d©a
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

348 
n_mö
;

349 
key
, 
vÆue
;

351 
n_mö
 = 0;Ç_min <= 1;Ç_min++) {

352 
key
 = 0; key < 
OVSDB_N_TYPES
; key++) {

353 i‡(
key
 =
OVSDB_TYPE_VOID
) {

356 
vÆue
 = 0; vÆuê< 
OVSDB_N_TYPES
; value++) {

357 
ovsdb_d©um
 
d©um
;

358 
ovsdb_ty≥
 
ty≥
;

360 
	`ovsdb_ba£_ty≥_öô
(&
ty≥
.
key
, key);

361 
	`ovsdb_ba£_ty≥_öô
(&
ty≥
.
vÆue
, value);

362 
ty≥
.
n_mö
 =Ç_min;

363 
ty≥
.
n_max
 = 1;

364 
	`as£π
(
	`ovsdb_ty≥_is_vÆid
(&
ty≥
));

366 
	`¥ötf
("key %s, value %s,Ç_min %u: ",

367 
	`ovsdb_©omic_ty≥_to_°rög
(
key
),

368 
	`ovsdb_©omic_ty≥_to_°rög
(
vÆue
), 
n_mö
);

370 
	`ovsdb_d©um_öô_deÁu…
(&
d©um
, &
ty≥
);

371 i‡(!
	`ovsdb_d©um_equÆs
(&
d©um
, 
	`ovsdb_d©um_deÁu…
(&
ty≥
),

372 &
ty≥
)) {

373 
	`¥ötf
("wrong\n");

374 
	`exô
(1);

376 
	`ovsdb_d©um_de°roy
(&
d©um
, &
ty≥
);

377 
	`ovsdb_ty≥_de°roy
(&
ty≥
);

379 
	`¥ötf
("OK\n");

383 
	}
}

386 
	$do_∑r£_©omic_ty≥
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

388 
ovsdb_©omic_ty≥
 
ty≥
;

389 
js⁄
 *json;

391 
js⁄
 = 
	`unbox_js⁄
(
	`∑r£_js⁄
(
¨gv
[1]));

392 
	`check_ovsdb_îr‹
(
	`ovsdb_©omic_ty≥_‰om_js⁄
(&
ty≥
, 
js⁄
));

393 
	`js⁄_de°roy
(
js⁄
);

394 
	`¥öt_™d_‰ì_js⁄
(
	`ovsdb_©omic_ty≥_to_js⁄
(
ty≥
));

395 
	}
}

398 
	$do_∑r£_ba£_ty≥
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

400 
ovsdb_ba£_ty≥
 
ba£
;

401 
js⁄
 *json;

403 
js⁄
 = 
	`unbox_js⁄
(
	`∑r£_js⁄
(
¨gv
[1]));

404 
	`check_ovsdb_îr‹
(
	`ovsdb_ba£_ty≥_‰om_js⁄
(&
ba£
, 
js⁄
));

405 
	`js⁄_de°roy
(
js⁄
);

406 
	`¥öt_™d_‰ì_js⁄
(
	`ovsdb_ba£_ty≥_to_js⁄
(&
ba£
));

407 
	`ovsdb_ba£_ty≥_de°roy
(&
ba£
);

408 
	}
}

411 
	$do_∑r£_ty≥
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

413 
ovsdb_ty≥
 
ty≥
;

414 
js⁄
 *json;

416 
js⁄
 = 
	`unbox_js⁄
(
	`∑r£_js⁄
(
¨gv
[1]));

417 
	`check_ovsdb_îr‹
(
	`ovsdb_ty≥_‰om_js⁄
(&
ty≥
, 
js⁄
));

418 
	`js⁄_de°roy
(
js⁄
);

419 
	`¥öt_™d_‰ì_js⁄
(
	`ovsdb_ty≥_to_js⁄
(&
ty≥
));

420 
	`ovsdb_ty≥_de°roy
(&
ty≥
);

421 
	}
}

424 
	$do_∑r£_©oms
(
¨gc
, *
¨gv
[])

426 
ovsdb_ba£_ty≥
 
ba£
;

427 
js⁄
 *json;

428 
i
;

430 
js⁄
 = 
	`unbox_js⁄
(
	`∑r£_js⁄
(
¨gv
[1]));

431 
	`check_ovsdb_îr‹
(
	`ovsdb_ba£_ty≥_‰om_js⁄
(&
ba£
, 
js⁄
));

432 
	`js⁄_de°roy
(
js⁄
);

434 
i
 = 2; i < 
¨gc
; i++) {

435 
ovsdb_îr‹
 *
îr‹
;

436 
ovsdb_©om
 
©om
;

438 
js⁄
 = 
	`unbox_js⁄
(
	`∑r£_js⁄
(
¨gv
[
i
]));

439 
îr‹
 = 
	`ovsdb_©om_‰om_js⁄
(&
©om
, &
ba£
, 
js⁄
, 
NULL
);

440 
	`js⁄_de°roy
(
js⁄
);

442 i‡(
îr‹
) {

443 
	`¥öt_™d_‰ì_ovsdb_îr‹
(
îr‹
);

445 
	`¥öt_™d_‰ì_js⁄
(
	`ovsdb_©om_to_js⁄
(&
©om
, 
ba£
.
ty≥
));

446 
	`ovsdb_©om_de°roy
(&
©om
, 
ba£
.
ty≥
);

449 
	`ovsdb_ba£_ty≥_de°roy
(&
ba£
);

450 
	}
}

453 
	$do_∑r£_©om_°rögs
(
¨gc
, *
¨gv
[])

455 
ovsdb_ba£_ty≥
 
ba£
;

456 
js⁄
 *json;

457 
i
;

459 
js⁄
 = 
	`unbox_js⁄
(
	`∑r£_js⁄
(
¨gv
[1]));

460 
	`check_ovsdb_îr‹
(
	`ovsdb_ba£_ty≥_‰om_js⁄
(&
ba£
, 
js⁄
));

461 
	`js⁄_de°roy
(
js⁄
);

463 
i
 = 2; i < 
¨gc
; i++) {

464 
ovsdb_©om
 
©om
;

465 
ds
 
out
;

467 
	`dõ_if_îr‹
(
	`ovsdb_©om_‰om_°rög
(&
©om
, &
ba£
, 
¨gv
[
i
], 
NULL
));

469 
	`ds_öô
(&
out
);

470 
	`ovsdb_©om_to_°rög
(&
©om
, 
ba£
.
ty≥
, &
out
);

471 
	`puts
(
	`ds_c°r
(&
out
));

472 
	`ds_de°roy
(&
out
);

474 
	`ovsdb_©om_de°roy
(&
©om
, 
ba£
.
ty≥
);

476 
	`ovsdb_ba£_ty≥_de°roy
(&
ba£
);

477 
	}
}

480 
do_∑r£_d©a__
(
¨gc
, *
¨gv
[],

481 
ovsdb_îr‹
 *

482 (*
∑r£
)(
ovsdb_d©um
 *
d©um
,

483 c⁄° 
ovsdb_ty≥
 *
ty≥
,

484 c⁄° 
js⁄
 *json,

485 
ovsdb_symbﬁ_èbÀ
 *
symèb
))

487 
ovsdb_ty≥
 
	gty≥
;

488 
js⁄
 *
	gjs⁄
;

489 
	gi
;

491 
	gjs⁄
 = 
unbox_js⁄
(
∑r£_js⁄
(
¨gv
[1]));

492 
check_ovsdb_îr‹
(
ovsdb_ty≥_‰om_js⁄
(&
ty≥
, 
js⁄
));

493 
js⁄_de°roy
(
js⁄
);

495 
	gi
 = 2; i < 
	g¨gc
; i++) {

496 
ovsdb_d©um
 
	gd©um
;

498 
	gjs⁄
 = 
unbox_js⁄
(
∑r£_js⁄
(
¨gv
[
i
]));

499 
check_ovsdb_îr‹
(
∑r£
(&
d©um
, &
ty≥
, 
js⁄
, 
NULL
));

500 
js⁄_de°roy
(
js⁄
);

502 
¥öt_™d_‰ì_js⁄
(
ovsdb_d©um_to_js⁄
(&
d©um
, &
ty≥
));

504 
ovsdb_d©um_de°roy
(&
d©um
, &
ty≥
);

506 
ovsdb_ty≥_de°roy
(&
ty≥
);

510 
	$do_∑r£_d©a
(
¨gc
, *
¨gv
[])

512 
	`do_∑r£_d©a__
(
¨gc
, 
¨gv
, 
ovsdb_d©um_‰om_js⁄
);

513 
	}
}

516 
	$do_∑r£_d©a_°rögs
(
¨gc
, *
¨gv
[])

518 
ovsdb_ty≥
 
ty≥
;

519 
js⁄
 *json;

520 
i
;

522 
js⁄
 = 
	`unbox_js⁄
(
	`∑r£_js⁄
(
¨gv
[1]));

523 
	`check_ovsdb_îr‹
(
	`ovsdb_ty≥_‰om_js⁄
(&
ty≥
, 
js⁄
));

524 
	`js⁄_de°roy
(
js⁄
);

526 
i
 = 2; i < 
¨gc
; i++) {

527 
ovsdb_d©um
 
d©um
;

528 
ds
 
out
;

530 
	`dõ_if_îr‹
(
	`ovsdb_d©um_‰om_°rög
(&
d©um
, &
ty≥
, 
¨gv
[
i
], 
NULL
));

532 
	`ds_öô
(&
out
);

533 
	`ovsdb_d©um_to_°rög
(&
d©um
, &
ty≥
, &
out
);

534 
	`puts
(
	`ds_c°r
(&
out
));

535 
	`ds_de°roy
(&
out
);

537 
	`ovsdb_d©um_de°roy
(&
d©um
, &
ty≥
);

539 
	`ovsdb_ty≥_de°roy
(&
ty≥
);

540 
	}
}

542 
ovsdb_©omic_ty≥
 
	gcom∑ª_©oms_©omic_ty≥
;

545 
	$com∑ª_©oms
(c⁄° *
a_
, c⁄° *
b_
)

547 c⁄° 
ovsdb_©om
 *
a
 = 
a_
;

548 c⁄° 
ovsdb_©om
 *
b
 = 
b_
;

550  
	`ovsdb_©om_com∑ª_3way
(
a
, 
b
, 
com∑ª_©oms_©omic_ty≥
);

551 
	}
}

554 
	$do_s‹t_©oms
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

556 
ovsdb_ba£_ty≥
 
ba£
;

557 
ovsdb_©om
 *
©oms
;

558 
js⁄
 *js⁄, **
js⁄_©oms
;

559 
size_t
 
n_©oms
;

560 
i
;

562 
js⁄
 = 
	`unbox_js⁄
(
	`∑r£_js⁄
(
¨gv
[1]));

563 
	`check_ovsdb_îr‹
(
	`ovsdb_ba£_ty≥_‰om_js⁄
(&
ba£
, 
js⁄
));

564 
	`js⁄_de°roy
(
js⁄
);

566 
js⁄
 = 
	`unbox_js⁄
(
	`∑r£_js⁄
(
¨gv
[2]));

567 i‡(
js⁄
->
ty≥
 !
JSON_ARRAY
) {

568 
	`ovs_Áèl
(0, "secondárgument must beárray");

572 
n_©oms
 = 
js⁄
->
u
.
¨øy
.
n
;

573 
©oms
 = 
	`xmÆloc
(
n_©oms
 *  *atoms);

574 
i
 = 0; i < 
n_©oms
; i++) {

575 
	`check_ovsdb_îr‹
(
	`ovsdb_©om_‰om_js⁄
(&
©oms
[
i
], &
ba£
,

576 
js⁄
->
u
.
¨øy
.
ñems
[
i
], 
NULL
));

578 
	`js⁄_de°roy
(
js⁄
);

581 
com∑ª_©oms_©omic_ty≥
 = 
ba£
.
ty≥
;

582 
	`qs‹t
(
©oms
, 
n_©oms
,  *©oms, 
com∑ª_©oms
);

585 
js⁄_©oms
 = 
	`xmÆloc
(
n_©oms
 *  *json_atoms);

586 
i
 = 0; i < 
n_©oms
; i++) {

587 
js⁄_©oms
[
i
] = 
	`ovsdb_©om_to_js⁄
(&
©oms
[i], 
ba£
.
ty≥
);

588 
	`ovsdb_©om_de°roy
(&
©oms
[
i
], 
ba£
.
ty≥
);

590 
	`¥öt_™d_‰ì_js⁄
(
	`js⁄_¨øy_¸óã
(
js⁄_©oms
, 
n_©oms
));

591 
	`‰ì
(
©oms
);

592 
	`ovsdb_ba£_ty≥_de°roy
(&
ba£
);

593 
	}
}

596 
	$do_∑r£_cﬁumn
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

598 
ovsdb_cﬁumn
 *
cﬁumn
;

599 
js⁄
 *json;

601 
js⁄
 = 
	`∑r£_js⁄
(
¨gv
[2]);

602 
	`check_ovsdb_îr‹
(
	`ovsdb_cﬁumn_‰om_js⁄
(
js⁄
, 
¨gv
[1], &
cﬁumn
));

603 
	`js⁄_de°roy
(
js⁄
);

604 
	`¥öt_™d_‰ì_js⁄
(
	`ovsdb_cﬁumn_to_js⁄
(
cﬁumn
));

605 
	`ovsdb_cﬁumn_de°roy
(
cﬁumn
);

606 
	}
}

609 
	$do_∑r£_èbÀ
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

611 
ovsdb_èbÀ_schema
 *
ts
;

612 
boﬁ
 
deÁu…_is_roŸ
;

613 
js⁄
 *json;

615 
deÁu…_is_roŸ
 = 
¨gc
 > 3 && !
	`°rcmp
(
¨gv
[3], "true");

617 
js⁄
 = 
	`∑r£_js⁄
(
¨gv
[2]);

618 
	`check_ovsdb_îr‹
(
	`ovsdb_èbÀ_schema_‰om_js⁄
(
js⁄
, 
¨gv
[1], &
ts
));

619 
	`js⁄_de°roy
(
js⁄
);

620 
	`¥öt_™d_‰ì_js⁄
(
	`ovsdb_èbÀ_schema_to_js⁄
(
ts
, 
deÁu…_is_roŸ
));

621 
	`ovsdb_èbÀ_schema_de°roy
(
ts
);

622 
	}
}

625 
	$do_∑r£_rows
(
¨gc
, *
¨gv
[])

627 
ovsdb_cﬁumn_£t
 
Æl_cﬁumns
;

628 
ovsdb_èbÀ_schema
 *
ts
;

629 
ovsdb_èbÀ
 *
èbÀ
;

630 
js⁄
 *json;

631 
i
;

633 
js⁄
 = 
	`unbox_js⁄
(
	`∑r£_js⁄
(
¨gv
[1]));

634 
	`check_ovsdb_îr‹
(
	`ovsdb_èbÀ_schema_‰om_js⁄
(
js⁄
, "myèbÀ", &
ts
));

635 
	`js⁄_de°roy
(
js⁄
);

637 
èbÀ
 = 
	`ovsdb_èbÀ_¸óã
(
ts
);

638 
	`ovsdb_cﬁumn_£t_öô
(&
Æl_cﬁumns
);

639 
	`ovsdb_cﬁumn_£t_add_Æl
(&
Æl_cﬁumns
, 
èbÀ
);

641 
i
 = 2; i < 
¨gc
; i++) {

642 
ovsdb_cﬁumn_£t
 
cﬁumns
;

643 
ovsdb_row
 *
row
;

645 
	`ovsdb_cﬁumn_£t_öô
(&
cﬁumns
);

646 
row
 = 
	`ovsdb_row_¸óã
(
èbÀ
);

648 
js⁄
 = 
	`unbox_js⁄
(
	`∑r£_js⁄
(
¨gv
[
i
]));

649 
	`check_ovsdb_îr‹
(
	`ovsdb_row_‰om_js⁄
(
row
, 
js⁄
, 
NULL
, &
cﬁumns
));

650 
	`js⁄_de°roy
(
js⁄
);

652 
	`¥öt_™d_‰ì_js⁄
(
	`ovsdb_row_to_js⁄
(
row
, &
Æl_cﬁumns
));

654 i‡(
cﬁumns
.
n_cﬁumns
) {

655 
svec
 
«mes
;

656 
size_t
 
j
;

657 *
s
;

659 
	`svec_öô
(&
«mes
);

660 
j
 = 0; j < 
cﬁumns
.
n_cﬁumns
; j++) {

661 
	`svec_add
(&
«mes
, 
cﬁumns
.cﬁumns[
j
]->
«me
);

663 
	`svec_s‹t
(&
«mes
);

664 
s
 = 
	`svec_joö
(&
«mes
, ", ", "");

665 
	`puts
(
s
);

666 
	`‰ì
(
s
);

667 
	`svec_de°roy
(&
«mes
);

669 
	`¥ötf
("<none>\n");

672 
	`ovsdb_cﬁumn_£t_de°roy
(&
cﬁumns
);

673 
	`ovsdb_row_de°roy
(
row
);

676 
	`ovsdb_cﬁumn_£t_de°roy
(&
Æl_cﬁumns
);

677 
	`ovsdb_èbÀ_de°roy
(
èbÀ
);

678 
	}
}

681 
	$do_com∑ª_rows
(
¨gc
, *
¨gv
[])

683 
ovsdb_cﬁumn_£t
 
Æl_cﬁumns
;

684 
ovsdb_èbÀ_schema
 *
ts
;

685 
ovsdb_èbÀ
 *
èbÀ
;

686 
ovsdb_row
 **
rows
;

687 
js⁄
 *json;

688 **
«mes
;

689 
n_rows
;

690 
i
, 
j
;

692 
js⁄
 = 
	`unbox_js⁄
(
	`∑r£_js⁄
(
¨gv
[1]));

693 
	`check_ovsdb_îr‹
(
	`ovsdb_èbÀ_schema_‰om_js⁄
(
js⁄
, "myèbÀ", &
ts
));

694 
	`js⁄_de°roy
(
js⁄
);

696 
èbÀ
 = 
	`ovsdb_èbÀ_¸óã
(
ts
);

697 
	`ovsdb_cﬁumn_£t_öô
(&
Æl_cﬁumns
);

698 
	`ovsdb_cﬁumn_£t_add_Æl
(&
Æl_cﬁumns
, 
èbÀ
);

700 
n_rows
 = 
¨gc
 - 2;

701 
rows
 = 
	`xmÆloc
( *row†* 
n_rows
);

702 
«mes
 = 
	`xmÆloc
( *«me†* 
n_rows
);

703 
i
 = 0; i < 
n_rows
; i++) {

704 
rows
[
i
] = 
	`ovsdb_row_¸óã
(
èbÀ
);

706 
js⁄
 = 
	`∑r£_js⁄
(
¨gv
[
i
 + 2]);

707 i‡(
js⁄
->
ty≥
 !
JSON_ARRAY
 || js⁄->
u
.
¨øy
.
n
 != 2

708 || 
js⁄
->
u
.
¨øy
.
ñems
[0]->
ty≥
 !
JSON_STRING
) {

709 
	`ovs_Áèl
(0, "\"%s\" doesÇot haveÉxpected form "

710 "[\"«me\", {d©a}]", 
¨gv
[
i
]);

712 
«mes
[
i
] = 
	`x°rdup
(
js⁄
->
u
.
¨øy
.
ñems
[0]->u.
°rög
);

713 
	`check_ovsdb_îr‹
(
	`ovsdb_row_‰om_js⁄
(
rows
[
i
], 
js⁄
->
u
.
¨øy
.
ñems
[1],

714 
NULL
, NULL));

715 
	`js⁄_de°roy
(
js⁄
);

717 
i
 = 0; i < 
n_rows
; i++) {

718 
uöt32_t
 
i_hash
 = 
	`ovsdb_row_hash_cﬁumns
(
rows
[
i
], &
Æl_cﬁumns
, 0);

719 
j
 = 
i
 + 1; j < 
n_rows
; j++) {

720 
uöt32_t
 
j_hash
 = 
	`ovsdb_row_hash_cﬁumns
(
rows
[
j
], &
Æl_cﬁumns
, 0);

721 i‡(
	`ovsdb_row_equÆ_cﬁumns
(
rows
[
i
],Ñows[
j
], &
Æl_cﬁumns
)) {

722 
	`¥ötf
("%†=%s\n", 
«mes
[
i
],Çames[
j
]);

723 i‡(
i_hash
 !
j_hash
) {

724 
	`¥ötf
("buàhash(%sË!hash(%s)\n", 
«mes
[
i
],Çames[
j
]);

725 
	`ab‹t
();

727 } i‡(
i_hash
 =
j_hash
) {

728 
	`¥ötf
("hash(%sË=hash(%s)\n", 
«mes
[
i
],Çames[
j
]);

732 
i
 = 0; i < 
n_rows
; i++) {

733 
	`ovsdb_row_de°roy
(
rows
[
i
]);

734 
	`‰ì
(
«mes
[
i
]);

736 
	`‰ì
(
rows
);

737 
	`‰ì
(
«mes
);

739 
	`ovsdb_cﬁumn_£t_de°roy
(&
Æl_cﬁumns
);

740 
	`ovsdb_èbÀ_de°roy
(
èbÀ
);

741 
	}
}

744 
	$do_∑r£_c⁄dôi⁄s
(
¨gc
, *
¨gv
[])

746 
ovsdb_èbÀ_schema
 *
ts
;

747 
js⁄
 *json;

748 
exô_code
 = 0;

749 
i
;

751 
js⁄
 = 
	`unbox_js⁄
(
	`∑r£_js⁄
(
¨gv
[1]));

752 
	`check_ovsdb_îr‹
(
	`ovsdb_èbÀ_schema_‰om_js⁄
(
js⁄
, "myèbÀ", &
ts
));

753 
	`js⁄_de°roy
(
js⁄
);

755 
i
 = 2; i < 
¨gc
; i++) {

756 
ovsdb_c⁄dôi⁄
 
˙d
;

757 
ovsdb_îr‹
 *
îr‹
;

759 
js⁄
 = 
	`∑r£_js⁄
(
¨gv
[
i
]);

760 
îr‹
 = 
	`ovsdb_c⁄dôi⁄_‰om_js⁄
(
ts
, 
js⁄
, 
NULL
, &
˙d
);

761 i‡(!
îr‹
) {

762 
	`¥öt_™d_‰ì_js⁄
(
	`ovsdb_c⁄dôi⁄_to_js⁄
(&
˙d
));

764 *
s
 = 
	`ovsdb_îr‹_to_°rög
(
îr‹
);

765 
	`ovs_îr‹
(0, "%s", 
s
);

766 
	`‰ì
(
s
);

767 
	`ovsdb_îr‹_de°roy
(
îr‹
);

768 
exô_code
 = 1;

770 
	`js⁄_de°roy
(
js⁄
);

772 
	`ovsdb_c⁄dôi⁄_de°roy
(&
˙d
);

774 
	`ovsdb_èbÀ_schema_de°roy
(
ts
);

776 
	`exô
(
exô_code
);

777 
	}
}

780 
	$do_evÆu©e_c⁄dôi⁄s
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

782 
ovsdb_èbÀ_schema
 *
ts
;

783 
ovsdb_èbÀ
 *
èbÀ
;

784 
ovsdb_c⁄dôi⁄
 *
c⁄dôi⁄s
;

785 
size_t
 
n_c⁄dôi⁄s
;

786 
ovsdb_row
 **
rows
;

787 
size_t
 
n_rows
;

788 
js⁄
 *json;

789 
size_t
 
i
, 
j
;

792 
js⁄
 = 
	`unbox_js⁄
(
	`∑r£_js⁄
(
¨gv
[1]));

793 
	`check_ovsdb_îr‹
(
	`ovsdb_èbÀ_schema_‰om_js⁄
(
js⁄
, "myèbÀ", &
ts
));

794 
	`js⁄_de°roy
(
js⁄
);

796 
èbÀ
 = 
	`ovsdb_èbÀ_¸óã
(
ts
);

799 
js⁄
 = 
	`∑r£_js⁄
(
¨gv
[2]);

800 i‡(
js⁄
->
ty≥
 !
JSON_ARRAY
) {

801 
	`ovs_Áèl
(0, "CONDITIONárgument isÇot JSONárray");

803 
n_c⁄dôi⁄s
 = 
js⁄
->
u
.
¨øy
.
n
;

804 
c⁄dôi⁄s
 = 
	`xmÆloc
(
n_c⁄dôi⁄s
 *  *conditions);

805 
i
 = 0; i < 
n_c⁄dôi⁄s
; i++) {

806 
	`check_ovsdb_îr‹
(
	`ovsdb_c⁄dôi⁄_‰om_js⁄
(
ts
, 
js⁄
->
u
.
¨øy
.
ñems
[
i
],

807 
NULL
, &
c⁄dôi⁄s
[
i
]));

809 
	`js⁄_de°roy
(
js⁄
);

812 
js⁄
 = 
	`∑r£_js⁄
(
¨gv
[3]);

813 i‡(
js⁄
->
ty≥
 !
JSON_ARRAY
) {

814 
	`ovs_Áèl
(0, "ROWárgument isÇot JSONárray");

816 
n_rows
 = 
js⁄
->
u
.
¨øy
.
n
;

817 
rows
 = 
	`xmÆloc
(
n_rows
 *  *rows);

818 
i
 = 0; i < 
n_rows
; i++) {

819 
rows
[
i
] = 
	`ovsdb_row_¸óã
(
èbÀ
);

820 
	`check_ovsdb_îr‹
(
	`ovsdb_row_‰om_js⁄
(
rows
[
i
], 
js⁄
->
u
.
¨øy
.
ñems
[i],

821 
NULL
, NULL));

823 
	`js⁄_de°roy
(
js⁄
);

825 
i
 = 0; i < 
n_c⁄dôi⁄s
; i++) {

826 
	`¥ötf
("c⁄dôi⁄ %2zu:", 
i
);

827 
j
 = 0; j < 
n_rows
; j++) {

828 
boﬁ
 
ªsu…
 = 
	`ovsdb_c⁄dôi⁄_evÆu©e
(
rows
[
j
], &
c⁄dôi⁄s
[
i
]);

829 i‡(
j
 % 5 == 0) {

830 
	`putch¨
(' ');

832 
	`putch¨
(
ªsu…
 ? 'T' : '-');

834 
	`¥ötf
("\n");

837 
i
 = 0; i < 
n_c⁄dôi⁄s
; i++) {

838 
	`ovsdb_c⁄dôi⁄_de°roy
(&
c⁄dôi⁄s
[
i
]);

840 
	`‰ì
(
c⁄dôi⁄s
);

841 
i
 = 0; i < 
n_rows
; i++) {

842 
	`ovsdb_row_de°roy
(
rows
[
i
]);

844 
	`‰ì
(
rows
);

845 
	`ovsdb_èbÀ_de°roy
(
èbÀ
);

846 
	}
}

849 
	$do_∑r£_muèti⁄s
(
¨gc
, *
¨gv
[])

851 
ovsdb_èbÀ_schema
 *
ts
;

852 
js⁄
 *json;

853 
exô_code
 = 0;

854 
i
;

856 
js⁄
 = 
	`unbox_js⁄
(
	`∑r£_js⁄
(
¨gv
[1]));

857 
	`check_ovsdb_îr‹
(
	`ovsdb_èbÀ_schema_‰om_js⁄
(
js⁄
, "myèbÀ", &
ts
));

858 
	`js⁄_de°roy
(
js⁄
);

860 
i
 = 2; i < 
¨gc
; i++) {

861 
ovsdb_muèti⁄_£t
 
£t
;

862 
ovsdb_îr‹
 *
îr‹
;

864 
js⁄
 = 
	`∑r£_js⁄
(
¨gv
[
i
]);

865 
îr‹
 = 
	`ovsdb_muèti⁄_£t_‰om_js⁄
(
ts
, 
js⁄
, 
NULL
, &
£t
);

866 i‡(!
îr‹
) {

867 
	`¥öt_™d_‰ì_js⁄
(
	`ovsdb_muèti⁄_£t_to_js⁄
(&
£t
));

869 *
s
 = 
	`ovsdb_îr‹_to_°rög
(
îr‹
);

870 
	`ovs_îr‹
(0, "%s", 
s
);

871 
	`‰ì
(
s
);

872 
	`ovsdb_îr‹_de°roy
(
îr‹
);

873 
exô_code
 = 1;

875 
	`js⁄_de°roy
(
js⁄
);

877 
	`ovsdb_muèti⁄_£t_de°roy
(&
£t
);

879 
	`ovsdb_èbÀ_schema_de°roy
(
ts
);

881 
	`exô
(
exô_code
);

882 
	}
}

885 
	$do_execuã_muèti⁄s
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

887 
ovsdb_èbÀ_schema
 *
ts
;

888 
ovsdb_èbÀ
 *
èbÀ
;

889 
ovsdb_muèti⁄_£t
 *
£ts
;

890 
size_t
 
n_£ts
;

891 
ovsdb_row
 **
rows
;

892 
size_t
 
n_rows
;

893 
js⁄
 *json;

894 
size_t
 
i
, 
j
;

897 
js⁄
 = 
	`unbox_js⁄
(
	`∑r£_js⁄
(
¨gv
[1]));

898 
	`check_ovsdb_îr‹
(
	`ovsdb_èbÀ_schema_‰om_js⁄
(
js⁄
, "myèbÀ", &
ts
));

899 
	`js⁄_de°roy
(
js⁄
);

901 
èbÀ
 = 
	`ovsdb_èbÀ_¸óã
(
ts
);

904 
js⁄
 = 
	`∑r£_js⁄
(
¨gv
[2]);

905 i‡(
js⁄
->
ty≥
 !
JSON_ARRAY
) {

906 
	`ovs_Áèl
(0, "MUTATIONárgument isÇot JSONárray");

908 
n_£ts
 = 
js⁄
->
u
.
¨øy
.
n
;

909 
£ts
 = 
	`xmÆloc
(
n_£ts
 *  *sets);

910 
i
 = 0; i < 
n_£ts
; i++) {

911 
	`check_ovsdb_îr‹
(
	`ovsdb_muèti⁄_£t_‰om_js⁄
(
ts
,

912 
js⁄
->
u
.
¨øy
.
ñems
[
i
],

913 
NULL
, &
£ts
[
i
]));

915 
	`js⁄_de°roy
(
js⁄
);

918 
js⁄
 = 
	`∑r£_js⁄
(
¨gv
[3]);

919 i‡(
js⁄
->
ty≥
 !
JSON_ARRAY
) {

920 
	`ovs_Áèl
(0, "ROWárgument isÇot JSONárray");

922 
n_rows
 = 
js⁄
->
u
.
¨øy
.
n
;

923 
rows
 = 
	`xmÆloc
(
n_rows
 *  *rows);

924 
i
 = 0; i < 
n_rows
; i++) {

925 
rows
[
i
] = 
	`ovsdb_row_¸óã
(
èbÀ
);

926 
	`check_ovsdb_îr‹
(
	`ovsdb_row_‰om_js⁄
(
rows
[
i
], 
js⁄
->
u
.
¨øy
.
ñems
[i],

927 
NULL
, NULL));

929 
	`js⁄_de°roy
(
js⁄
);

931 
i
 = 0; i < 
n_£ts
; i++) {

932 
	`¥ötf
("muèti⁄ %2zu:\n", 
i
);

933 
j
 = 0; j < 
n_rows
; j++) {

934 
ovsdb_îr‹
 *
îr‹
;

935 
ovsdb_row
 *
row
;

937 
row
 = 
	`ovsdb_row_˛⁄e
(
rows
[
j
]);

938 
îr‹
 = 
	`ovsdb_muèti⁄_£t_execuã
(
row
, &
£ts
[
i
]);

940 
	`¥ötf
("row %zu: ", 
j
);

941 i‡(
îr‹
) {

942 
	`¥öt_™d_‰ì_ovsdb_îr‹
(
îr‹
);

944 
ovsdb_cﬁumn_£t
 
cﬁumns
;

945 
shash_node
 *
node
;

947 
	`ovsdb_cﬁumn_£t_öô
(&
cﬁumns
);

948 
	`SHASH_FOR_EACH
 (
node
, &
ts
->
cﬁumns
) {

949 
ovsdb_cﬁumn
 *
c
 = 
node
->
d©a
;

950 i‡(!
	`ovsdb_d©um_equÆs
(&
row
->
fõlds
[
c
->
ödex
],

951 &
rows
[
j
]->
fõlds
[
c
->
ödex
],

952 &
c
->
ty≥
)) {

953 
	`ovsdb_cﬁumn_£t_add
(&
cﬁumns
, 
c
);

956 i‡(
cﬁumns
.
n_cﬁumns
) {

957 
	`¥öt_™d_‰ì_js⁄
(
	`ovsdb_row_to_js⁄
(
row
, &
cﬁumns
));

959 
	`¥ötf
("no change\n");

961 
	`ovsdb_cﬁumn_£t_de°roy
(&
cﬁumns
);

963 
	`ovsdb_row_de°roy
(
row
);

965 
	`¥ötf
("\n");

968 
i
 = 0; i < 
n_£ts
; i++) {

969 
	`ovsdb_muèti⁄_£t_de°roy
(&
£ts
[
i
]);

971 
	`‰ì
(
£ts
);

972 
i
 = 0; i < 
n_rows
; i++) {

973 
	`ovsdb_row_de°roy
(
rows
[
i
]);

975 
	`‰ì
(
rows
);

976 
	`ovsdb_èbÀ_de°roy
(
èbÀ
);

977 
	}
}

981 
	$put_row
(
ovsdb_èbÀ
 *
èbÀ
, 
ovsdb_row
 *
row
)

983 c⁄° 
uuid
 *uuid = 
	`ovsdb_row_gë_uuid
(
row
);

984 i‡(!
	`ovsdb_èbÀ_gë_row
(
èbÀ
, 
uuid
)) {

985 
	`hm≠_ö£π
(&
èbÀ
->
rows
, &
row
->
hm≠_node
, 
	`uuid_hash
(
uuid
));

987 
	}
}

989 
	sdo_quîy_cbd©a
 {

990 
uuid
 *
	mrow_uuids
;

991 *
	mcou¡s
;

992 
size_t
 
	mn_rows
;

995 
boﬁ


996 
	$do_quîy_cb
(c⁄° 
ovsdb_row
 *
row
, *
cbd©a_
)

998 
do_quîy_cbd©a
 *
cbd©a
 = 
cbd©a_
;

999 
size_t
 
i
;

1001 
i
 = 0; i < 
cbd©a
->
n_rows
; i++) {

1002 i‡(
	`uuid_equÆs
(
	`ovsdb_row_gë_uuid
(
row
), &
cbd©a
->
row_uuids
[
i
])) {

1003 
cbd©a
->
cou¡s
[
i
]++;

1007  
åue
;

1008 
	}
}

1011 
	$do_quîy
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

1013 
do_quîy_cbd©a
 
cbd©a
;

1014 
ovsdb_èbÀ_schema
 *
ts
;

1015 
ovsdb_èbÀ
 *
èbÀ
;

1016 
js⁄
 *json;

1017 
exô_code
 = 0;

1018 
size_t
 
i
;

1021 
js⁄
 = 
	`unbox_js⁄
(
	`∑r£_js⁄
(
¨gv
[1]));

1022 
	`check_ovsdb_îr‹
(
	`ovsdb_èbÀ_schema_‰om_js⁄
(
js⁄
, "myèbÀ", &
ts
));

1023 
	`js⁄_de°roy
(
js⁄
);

1025 
èbÀ
 = 
	`ovsdb_èbÀ_¸óã
(
ts
);

1028 
js⁄
 = 
	`∑r£_js⁄
(
¨gv
[2]);

1029 i‡(
js⁄
->
ty≥
 !
JSON_ARRAY
) {

1030 
	`ovs_Áèl
(0, "ROWárgument isÇot JSONárray");

1032 
cbd©a
.
n_rows
 = 
js⁄
->
u
.
¨øy
.
n
;

1033 
cbd©a
.
row_uuids
 = 
	`xmÆloc
(cbd©a.
n_rows
 *  *cbdata.row_uuids);

1034 
cbd©a
.
cou¡s
 = 
	`xmÆloc
(cbd©a.
n_rows
 *  *cbdata.counts);

1035 
i
 = 0; i < 
cbd©a
.
n_rows
; i++) {

1036 
ovsdb_row
 *
row
 = 
	`ovsdb_row_¸óã
(
èbÀ
);

1037 
	`uuid_gíî©e
(
	`ovsdb_row_gë_uuid_rw
(
row
));

1038 
	`check_ovsdb_îr‹
(
	`ovsdb_row_‰om_js⁄
(
row
, 
js⁄
->
u
.
¨øy
.
ñems
[
i
],

1039 
NULL
, NULL));

1040 i‡(
	`ovsdb_èbÀ_gë_row
(
èbÀ
, 
	`ovsdb_row_gë_uuid
(
row
))) {

1041 
	`ovs_Áèl
(0, "du∂iˇã UUID "
UUID_FMT
" inÅable",

1042 
	`UUID_ARGS
(
	`ovsdb_row_gë_uuid
(
row
)));

1044 
cbd©a
.
row_uuids
[
i
] = *
	`ovsdb_row_gë_uuid
(
row
);

1045 
	`put_row
(
èbÀ
, 
row
);

1047 
	`js⁄_de°roy
(
js⁄
);

1050 
js⁄
 = 
	`∑r£_js⁄
(
¨gv
[3]);

1051 i‡(
js⁄
->
ty≥
 !
JSON_ARRAY
) {

1052 
	`ovs_Áèl
(0, "CONDITIONárgument isÇot JSONárray");

1054 
i
 = 0; i < 
js⁄
->
u
.
¨øy
.
n
; i++) {

1055 
ovsdb_c⁄dôi⁄
 
˙d
;

1056 
size_t
 
j
;

1058 
	`check_ovsdb_îr‹
(
	`ovsdb_c⁄dôi⁄_‰om_js⁄
(
ts
, 
js⁄
->
u
.
¨øy
.
ñems
[
i
],

1059 
NULL
, &
˙d
));

1061 
	`mem£t
(
cbd©a
.
cou¡s
, 0, cbd©a.
n_rows
 *  *cbdata.counts);

1062 
	`ovsdb_quîy
(
èbÀ
, &
˙d
, 
do_quîy_cb
, &
cbd©a
);

1064 
	`¥ötf
("quîy %2zu:", 
i
);

1065 
j
 = 0; j < 
cbd©a
.
n_rows
; j++) {

1066 i‡(
j
 % 5 == 0) {

1067 
	`putch¨
(' ');

1069 i‡(
cbd©a
.
cou¡s
[
j
]) {

1070 
	`¥ötf
("%d", 
cbd©a
.
cou¡s
[
j
]);

1071 i‡(
cbd©a
.
cou¡s
[
j
] > 1) {

1073 
exô_code
 = 1;

1076 
	`putch¨
('-');

1079 
	`putch¨
('\n');

1081 
	`ovsdb_c⁄dôi⁄_de°roy
(&
˙d
);

1083 
	`js⁄_de°roy
(
js⁄
);

1085 
	`ovsdb_èbÀ_de°roy
(
èbÀ
);

1087 
	`exô
(
exô_code
);

1088 
	}
}

1090 
	sdo_quîy_di°ö˘_˛ass
 {

1091 
ovsdb_row
 *
	mexam∂e
;

1092 
	mcou¡
;

1095 
	sdo_quîy_di°ö˘_row
 {

1096 
uuid
 
	muuid
;

1097 
do_quîy_di°ö˘_˛ass
 *
	m˛ass
;

1101 
	$do_quîy_di°ö˘
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

1103 
ovsdb_cﬁumn_£t
 
cﬁumns
;

1104 
ovsdb_èbÀ_schema
 *
ts
;

1105 
ovsdb_èbÀ
 *
èbÀ
;

1106 
do_quîy_di°ö˘_row
 *
rows
;

1107 
size_t
 
n_rows
;

1108 
do_quîy_di°ö˘_˛ass
 *
˛as£s
;

1109 
size_t
 
n_˛as£s
;

1110 
js⁄
 *json;

1111 
exô_code
 = 0;

1112 
size_t
 
i
;

1115 
js⁄
 = 
	`unbox_js⁄
(
	`∑r£_js⁄
(
¨gv
[1]));

1116 
	`check_ovsdb_îr‹
(
	`ovsdb_èbÀ_schema_‰om_js⁄
(
js⁄
, "myèbÀ", &
ts
));

1117 
	`js⁄_de°roy
(
js⁄
);

1119 
èbÀ
 = 
	`ovsdb_èbÀ_¸óã
(
ts
);

1122 
js⁄
 = 
	`∑r£_js⁄
(
¨gv
[4]);

1123 
	`check_ovsdb_îr‹
(
	`ovsdb_cﬁumn_£t_‰om_js⁄
(
js⁄
, 
èbÀ
->
schema
,

1124 &
cﬁumns
));

1125 
	`js⁄_de°roy
(
js⁄
);

1128 
js⁄
 = 
	`∑r£_js⁄
(
¨gv
[2]);

1129 i‡(
js⁄
->
ty≥
 !
JSON_ARRAY
) {

1130 
	`ovs_Áèl
(0, "ROWárgument isÇot JSONárray");

1132 
n_rows
 = 
js⁄
->
u
.
¨øy
.
n
;

1133 
rows
 = 
	`xmÆloc
(
n_rows
 *  *rows);

1134 
˛as£s
 = 
	`xmÆloc
(
n_rows
 *  *classes);

1135 
n_˛as£s
 = 0;

1136 
i
 = 0; i < 
n_rows
; i++) {

1137 
ovsdb_row
 *
row
;

1138 
size_t
 
j
;

1141 
row
 = 
	`ovsdb_row_¸óã
(
èbÀ
);

1142 
	`uuid_gíî©e
(
	`ovsdb_row_gë_uuid_rw
(
row
));

1143 
	`check_ovsdb_îr‹
(
	`ovsdb_row_‰om_js⁄
(
row
, 
js⁄
->
u
.
¨øy
.
ñems
[
i
],

1144 
NULL
, NULL));

1147 
rows
[
i
].
uuid
 = *
	`ovsdb_row_gë_uuid
(
row
);

1148 
rows
[
i
].
˛ass
 = 
NULL
;

1149 
j
 = 0; j < 
n_˛as£s
; j++) {

1150 i‡(
	`ovsdb_row_equÆ_cﬁumns
(
row
, 
˛as£s
[
j
].
exam∂e
, &
cﬁumns
)) {

1151 
rows
[
i
].
˛ass
 = &
˛as£s
[
j
];

1155 i‡(!
rows
[
i
].
˛ass
) {

1156 
rows
[
i
].
˛ass
 = &
˛as£s
[
n_˛as£s
];

1157 
˛as£s
[
n_˛as£s
].
exam∂e
 = 
	`ovsdb_row_˛⁄e
(
row
);

1158 
n_˛as£s
++;

1162 i‡(
	`ovsdb_èbÀ_gë_row
(
èbÀ
, 
	`ovsdb_row_gë_uuid
(
row
))) {

1163 
	`ovs_Áèl
(0, "du∂iˇã UUID "
UUID_FMT
" inÅable",

1164 
	`UUID_ARGS
(
	`ovsdb_row_gë_uuid
(
row
)));

1166 
	`put_row
(
èbÀ
, 
row
);

1169 
	`js⁄_de°roy
(
js⁄
);

1172 
js⁄
 = 
	`∑r£_js⁄
(
¨gv
[3]);

1173 i‡(
js⁄
->
ty≥
 !
JSON_ARRAY
) {

1174 
	`ovs_Áèl
(0, "CONDITIONárgument isÇot JSONárray");

1176 
i
 = 0; i < 
js⁄
->
u
.
¨øy
.
n
; i++) {

1177 
ovsdb_row_£t
 
ªsu…s
;

1178 
ovsdb_c⁄dôi⁄
 
˙d
;

1179 
size_t
 
j
;

1181 
	`check_ovsdb_îr‹
(
	`ovsdb_c⁄dôi⁄_‰om_js⁄
(
ts
, 
js⁄
->
u
.
¨øy
.
ñems
[
i
],

1182 
NULL
, &
˙d
));

1184 
j
 = 0; j < 
n_˛as£s
; j++) {

1185 
˛as£s
[
j
].
cou¡
 = 0;

1187 
	`ovsdb_row_£t_öô
(&
ªsu…s
);

1188 
	`ovsdb_quîy_di°ö˘
(
èbÀ
, &
˙d
, &
cﬁumns
, &
ªsu…s
);

1189 
j
 = 0; j < 
ªsu…s
.
n_rows
; j++) {

1190 
size_t
 
k
;

1192 
k
 = 0; k < 
n_rows
; k++) {

1193 i‡(
	`uuid_equÆs
(
	`ovsdb_row_gë_uuid
(
ªsu…s
.
rows
[
j
]),

1194 &
rows
[
k
].
uuid
)) {

1195 
rows
[
k
].
˛ass
->
cou¡
++;

1199 
	`ovsdb_row_£t_de°roy
(&
ªsu…s
);

1201 
	`¥ötf
("quîy %2zu:", 
i
);

1202 
j
 = 0; j < 
n_rows
; j++) {

1203 
cou¡
 = 
rows
[
j
].
˛ass
->count;

1205 i‡(
j
 % 5 == 0) {

1206 
	`putch¨
(' ');

1208 i‡(
cou¡
 > 1) {

1210 
	`¥ötf
("%d", 
cou¡
);

1211 
exô_code
 = 1;

1212 } i‡(
cou¡
 == 1) {

1213 
	`putch¨
("abcdefghijklmn›qr°uvwxyz"[
rows
[
j
].
˛ass
 - 
˛as£s
]);

1215 
	`putch¨
('-');

1218 
	`putch¨
('\n');

1220 
	`ovsdb_c⁄dôi⁄_de°roy
(&
˙d
);

1222 
	`js⁄_de°roy
(
js⁄
);

1224 
	`ovsdb_èbÀ_de°roy
(
èbÀ
);

1226 
	`exô
(
exô_code
);

1227 
	}
}

1230 
	$do_∑r£_schema
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

1232 
ovsdb_schema
 *
schema
;

1233 
js⁄
 *json;

1235 
js⁄
 = 
	`∑r£_js⁄
(
¨gv
[1]);

1236 
	`check_ovsdb_îr‹
(
	`ovsdb_schema_‰om_js⁄
(
js⁄
, &
schema
));

1237 
	`js⁄_de°roy
(
js⁄
);

1238 
	`¥öt_™d_‰ì_js⁄
(
	`ovsdb_schema_to_js⁄
(
schema
));

1239 
	`ovsdb_schema_de°roy
(
schema
);

1240 
	}
}

1243 
	$do_execuã
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

1245 
ovsdb_schema
 *
schema
;

1246 
js⁄
 *json;

1247 
ovsdb
 *
db
;

1248 
i
;

1251 
js⁄
 = 
	`∑r£_js⁄
(
¨gv
[1]);

1252 
	`check_ovsdb_îr‹
(
	`ovsdb_schema_‰om_js⁄
(
js⁄
, &
schema
));

1253 
	`js⁄_de°roy
(
js⁄
);

1254 
db
 = 
	`ovsdb_¸óã
(
schema
);

1256 
i
 = 2; i < 
¨gc
; i++) {

1257 
js⁄
 *
∑øms
, *
ªsu…
;

1258 *
s
;

1260 
∑øms
 = 
	`∑r£_js⁄
(
¨gv
[
i
]);

1261 
ªsu…
 = 
	`ovsdb_execuã
(
db
, 
NULL
, 
∑øms
, 0, NULL);

1262 
s
 = 
	`js⁄_to_°rög
(
ªsu…
, 
JSSF_SORT
);

1263 
	`¥ötf
("%s\n", 
s
);

1264 
	`‰ì
(
s
);

1265 
	`js⁄_de°roy
(
∑øms
);

1266 
	`js⁄_de°roy
(
ªsu…
);

1269 
	`ovsdb_de°roy
(
db
);

1270 
	}
}

1272 
	sã°_åiggî
 {

1273 
ovsdb_åiggî
 
	måiggî
;

1274 
	mnumbî
;

1278 
	$do_åiggî_dump
(
ã°_åiggî
 *
t
, 
now
, c⁄° *
tôÀ
)

1280 
js⁄
 *
ªsu…
;

1281 *
s
;

1283 
ªsu…
 = 
	`ovsdb_åiggî_°ól_ªsu…
(&
t
->
åiggî
);

1284 
s
 = 
	`js⁄_to_°rög
(
ªsu…
, 
JSSF_SORT
);

1285 
	`¥ötf
("t=%Œd:Åriggî %d (%s): %s\n", 
now
, 
t
->
numbî
, 
tôÀ
, 
s
);

1286 
	`‰ì
(
s
);

1287 
	`js⁄_de°roy
(
ªsu…
);

1288 
	`ovsdb_åiggî_de°roy
(&
t
->
åiggî
);

1289 
	`‰ì
(
t
);

1290 
	}
}

1293 
	$do_åiggî
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

1295 
ovsdb_schema
 *
schema
;

1296 
ovsdb_£ssi⁄
 
£ssi⁄
;

1297 
ovsdb_£rvî
 
£rvî
;

1298 
js⁄
 *json;

1299 
ovsdb
 *
db
;

1300 
now
;

1301 
numbî
;

1302 
i
;

1305 
js⁄
 = 
	`∑r£_js⁄
(
¨gv
[1]);

1306 
	`check_ovsdb_îr‹
(
	`ovsdb_schema_‰om_js⁄
(
js⁄
, &
schema
));

1307 
	`js⁄_de°roy
(
js⁄
);

1308 
db
 = 
	`ovsdb_¸óã
(
schema
);

1310 
	`ovsdb_£rvî_öô
(&
£rvî
);

1311 
	`ovsdb_£rvî_add_db
(&
£rvî
, 
db
);

1312 
	`ovsdb_£ssi⁄_öô
(&
£ssi⁄
, &
£rvî
);

1314 
now
 = 0;

1315 
numbî
 = 0;

1316 
i
 = 2; i < 
¨gc
; i++) {

1317 
js⁄
 *
∑øms
 = 
	`∑r£_js⁄
(
¨gv
[
i
]);

1318 i‡(
∑øms
->
ty≥
 =
JSON_ARRAY


1319 && 
	`js⁄_¨øy
(
∑øms
)->
n
 == 2

1320 && 
	`js⁄_¨øy
(
∑øms
)->
ñems
[0]->
ty≥
 =
JSON_STRING


1321 && !
	`°rcmp
(
	`js⁄_°rög
(
	`js⁄_¨øy
(
∑øms
)->
ñems
[0]), "advance")

1322 && 
	`js⁄_¨øy
(
∑øms
)->
ñems
[1]->
ty≥
 =
JSON_INTEGER
) {

1323 
now
 +
	`js⁄_öãgî
(
	`js⁄_¨øy
(
∑øms
)->
ñems
[1]);

1324 
	`js⁄_de°roy
(
∑øms
);

1326 
ã°_åiggî
 *
t
 = 
	`xmÆloc
( *t);

1327 
	`ovsdb_åiggî_öô
(&
£ssi⁄
, 
db
, &
t
->
åiggî
, 
∑øms
, 
now
);

1328 
t
->
numbî
 =Çumber++;

1329 i‡(
	`ovsdb_åiggî_is_com∂ëe
(&
t
->
åiggî
)) {

1330 
	`do_åiggî_dump
(
t
, 
now
, "immediate");

1332 
	`¥ötf
("t=%Œd:ÇewÅriggî %d\n", 
now
, 
t
->
numbî
);

1336 
	`ovsdb_åiggî_run
(
db
, 
now
);

1337 !
	`li°_is_em±y
(&
£ssi⁄
.
com∂ëi⁄s
)) {

1338 
	`do_åiggî_dump
(
	`CONTAINER_OF
(
	`li°_p›_‰⁄t
(&
£ssi⁄
.
com∂ëi⁄s
),

1339 
ã°_åiggî
, 
åiggî
.
node
),

1340 
now
, "delayed");

1343 
	`ovsdb_åiggî_waô
(
db
, 
now
);

1344 
	`pﬁl_immedüã_wake
();

1345 
	`pﬁl_block
();

1348 
	`ovsdb_£rvî_de°roy
(&
£rvî
);

1349 
	`ovsdb_de°roy
(
db
);

1350 
	}
}

1353 
	$do_hñp
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

1355 
	`ußge
();

1356 
	}
}

1360 
ovsdb
 *
	gdo_å™ß˘_db
;

1361 
ovsdb_txn
 *
	gdo_å™ß˘_txn
;

1362 
ovsdb_èbÀ
 *
	gdo_å™ß˘_èbÀ
;

1365 
	$do_å™ß˘_commô
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

1367 
	`ovsdb_îr‹_de°roy
(
	`ovsdb_txn_commô
(
do_å™ß˘_txn
, 
Ál£
));

1368 
do_å™ß˘_txn
 = 
NULL
;

1369 
	}
}

1372 
	$do_å™ß˘_ab‹t
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

1374 
	`ovsdb_txn_ab‹t
(
do_å™ß˘_txn
);

1375 
do_å™ß˘_txn
 = 
NULL
;

1376 
	}
}

1379 
	$uuid_‰om_öãgî
(
öãgî
, 
uuid
 *uuid)

1381 
	`uuid_zîo
(
uuid
);

1382 
uuid
->
∑πs
[3] = 
öãgî
;

1383 
	}
}

1385 c⁄° 
ovsdb_row
 *

1386 
	$do_å™ß˘_föd_row
(c⁄° *
uuid_°rög
)

1388 c⁄° 
ovsdb_row
 *
row
;

1389 
uuid
 uuid;

1391 
	`uuid_‰om_öãgî
(
	`©oi
(
uuid_°rög
), &
uuid
);

1392 
row
 = 
	`ovsdb_èbÀ_gë_row
(
do_å™ß˘_èbÀ
, &
uuid
);

1393 i‡(!
row
) {

1394 
	`ovs_Áèl
(0, "èbÀ d€†nŸ c⁄èöÑow wôh UUID "
UUID_FMT
,

1395 
	`UUID_ARGS
(&
uuid
));

1397  
row
;

1398 
	}
}

1401 
	$do_å™ß˘_£t_öãgî
(
ovsdb_row
 *
row
, c⁄° *
cﬁumn_«me
,

1402 
öãgî
)

1404 i‡(
öãgî
 != -1) {

1405 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
;

1407 
cﬁumn
 = 
	`ovsdb_èbÀ_schema_gë_cﬁumn
(
do_å™ß˘_èbÀ
->
schema
,

1408 
cﬁumn_«me
);

1409 
row
->
fõlds
[
cﬁumn
->
ödex
].
keys
[0].
öãgî
 = integer;

1411 
	}
}

1414 
	$do_å™ß˘_gë_öãgî
(c⁄° 
ovsdb_row
 *
row
, c⁄° *
cﬁumn_«me
)

1416 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
;

1418 
cﬁumn
 = 
	`ovsdb_èbÀ_schema_gë_cﬁumn
(
do_å™ß˘_èbÀ
->
schema
,

1419 
cﬁumn_«me
);

1420  
row
->
fõlds
[
cﬁumn
->
ödex
].
keys
[0].
öãgî
;

1421 
	}
}

1424 
	$do_å™ß˘_£t_i_j
(
ovsdb_row
 *
row
,

1425 c⁄° *
i_°rög
, c⁄° *
j_°rög
)

1427 
	`do_å™ß˘_£t_öãgî
(
row
, "i", 
	`©oi
(
i_°rög
));

1428 
	`do_å™ß˘_£t_öãgî
(
row
, "j", 
	`©oi
(
j_°rög
));

1429 
	}
}

1432 
	$do_å™ß˘_ö£π
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

1434 
ovsdb_row
 *
row
;

1435 
uuid
 *uuid;

1437 
row
 = 
	`ovsdb_row_¸óã
(
do_å™ß˘_èbÀ
);

1440 
uuid
 = 
	`ovsdb_row_gë_uuid_rw
(
row
);

1441 
	`uuid_‰om_öãgî
(
	`©oi
(
¨gv
[1]), 
uuid
);

1442 i‡(
	`ovsdb_èbÀ_gë_row
(
do_å™ß˘_èbÀ
, 
uuid
)) {

1443 
	`ovs_Áèl
(0, "èbÀáÃódy c⁄èö†row wôh UUID "
UUID_FMT
,

1444 
	`UUID_ARGS
(
uuid
));

1447 
	`do_å™ß˘_£t_i_j
(
row
, 
¨gv
[2],árgv[3]);

1450 
	`ovsdb_txn_row_ö£π
(
do_å™ß˘_txn
, 
row
);

1451 
	}
}

1454 
	$do_å™ß˘_dñëe
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

1456 c⁄° 
ovsdb_row
 *
row
 = 
	`do_å™ß˘_föd_row
(
¨gv
[1]);

1457 
	`ovsdb_txn_row_dñëe
(
do_å™ß˘_txn
, 
row
);

1458 
	}
}

1461 
	$do_å™ß˘_modify
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

1463 c⁄° 
ovsdb_row
 *
row_ro
;

1464 
ovsdb_row
 *
row_rw
;

1466 
row_ro
 = 
	`do_å™ß˘_föd_row
(
¨gv
[1]);

1467 
row_rw
 = 
	`ovsdb_txn_row_modify
(
do_å™ß˘_txn
, 
row_ro
);

1468 
	`do_å™ß˘_£t_i_j
(
row_rw
, 
¨gv
[2],árgv[3]);

1469 
	}
}

1472 
	$com∑ª_rows_by_uuid
(c⁄° *
a_
, c⁄° *
b_
)

1474 
ovsdb_row
 *c⁄° *
≠
 = 
a_
;

1475 
ovsdb_row
 *c⁄° *
bp
 = 
b_
;

1477  
	`uuid_com∑ª_3way
(
	`ovsdb_row_gë_uuid
(*
≠
), ovsdb_row_gë_uuid(*
bp
));

1478 
	}
}

1481 
	$do_å™ß˘_¥öt
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

1483 c⁄° 
ovsdb_row
 **
rows
;

1484 c⁄° 
ovsdb_row
 *
row
;

1485 
size_t
 
n_rows
;

1486 
size_t
 
i
;

1488 
n_rows
 = 
	`hm≠_cou¡
(&
do_å™ß˘_èbÀ
->
rows
);

1489 
rows
 = 
	`xmÆloc
(
n_rows
 *  *rows);

1490 
i
 = 0;

1491 
	`HMAP_FOR_EACH
 (
row
, 
hm≠_node
, &
do_å™ß˘_èbÀ
->
rows
) {

1492 
rows
[
i
++] = 
row
;

1494 
	`as£π
(
i
 =
n_rows
);

1496 
	`qs‹t
(
rows
, 
n_rows
,  *rows, 
com∑ª_rows_by_uuid
);

1498 
i
 = 0; i < 
n_rows
; i++) {

1499 
	`¥ötf
("\n%"
PRId32
": i=%d, j=%d",

1500 
	`ovsdb_row_gë_uuid
(
rows
[
i
])->
∑πs
[3],

1501 
	`do_å™ß˘_gë_öãgî
(
rows
[
i
], "i"),

1502 
	`do_å™ß˘_gë_öãgî
(
rows
[
i
], "j"));

1505 
	`‰ì
(
rows
);

1506 
	}
}

1509 
	$do_å™ß˘
(
¨gc
, *
¨gv
[])

1511 c⁄° 
comm™d
 
do_å™ß˘_comm™ds
[] = {

1512 { "commô", 0, 0, 
do_å™ß˘_commô
 },

1513 { "ab‹t", 0, 0, 
do_å™ß˘_ab‹t
 },

1514 { "ö£π", 2, 3, 
do_å™ß˘_ö£π
 },

1515 { "dñëe", 1, 1, 
do_å™ß˘_dñëe
 },

1516 { "modify", 2, 3, 
do_å™ß˘_modify
 },

1517 { "¥öt", 0, 0, 
do_å™ß˘_¥öt
 },

1518 { 
NULL
, 0, 0, NULL },

1521 
ovsdb_schema
 *
schema
;

1522 
js⁄
 *json;

1523 
i
;

1526 
js⁄
 = 
	`∑r£_js⁄
("{\"name\": \"testdb\", "

1532 
	`check_ovsdb_îr‹
(
	`ovsdb_schema_‰om_js⁄
(
js⁄
, &
schema
));

1533 
	`js⁄_de°roy
(
js⁄
);

1534 
do_å™ß˘_db
 = 
	`ovsdb_¸óã
(
schema
);

1535 
do_å™ß˘_èbÀ
 = 
	`ovsdb_gë_èbÀ
(
do_å™ß˘_db
, "mytable");

1536 
	`as£π
(
do_å™ß˘_èbÀ
 !
NULL
);

1538 
i
 = 1; i < 
¨gc
; i++) {

1539 
js⁄
 *
comm™d
;

1540 
size_t
 
n_¨gs
;

1541 **
¨gs
;

1542 
j
;

1544 
comm™d
 = 
	`∑r£_js⁄
(
¨gv
[
i
]);

1545 i‡(
comm™d
->
ty≥
 !
JSON_ARRAY
) {

1546 
	`ovs_Áèl
(0, "transaction %d must be JSONárray "

1547 "wôháàÀa° 1ÉÀmít", 
i
);

1550 
n_¨gs
 = 
comm™d
->
u
.
¨øy
.
n
;

1551 
¨gs
 = 
	`xmÆloc
((
n_¨gs
 + 1) *  *args);

1552 
j
 = 0; j < 
n_¨gs
; j++) {

1553 
js⁄
 *
s
 = 
comm™d
->
u
.
¨øy
.
ñems
[
j
];

1554 i‡(
s
->
ty≥
 !
JSON_STRING
) {

1555 
	`ovs_Áèl
(0, "transaction %dárgument %d must be JSON string",

1556 
i
, 
j
);

1558 
¨gs
[
j
] = 
	`x°rdup
(
	`js⁄_°rög
(
s
));

1560 
¨gs
[
n_¨gs
] = 
NULL
;

1562 i‡(!
do_å™ß˘_txn
) {

1563 
do_å™ß˘_txn
 = 
	`ovsdb_txn_¸óã
(
do_å™ß˘_db
);

1566 
j
 = 0; j < 
n_¨gs
; j++) {

1567 i‡(
j
) {

1568 
	`putch¨
(' ');

1570 
	`Âuts
(
¨gs
[
j
], 
°dout
);

1572 
	`Âuts
(":", 
°dout
);

1573 
	`run_comm™d
(
n_¨gs
, 
¨gs
, 
do_å™ß˘_comm™ds
);

1574 
	`putch¨
('\n');

1576 
j
 = 0; j < 
n_¨gs
; j++) {

1577 
	`‰ì
(
¨gs
[
j
]);

1579 
	`‰ì
(
¨gs
);

1580 
	`js⁄_de°roy
(
comm™d
);

1582 
	`ovsdb_txn_ab‹t
(
do_å™ß˘_txn
);

1583 
	`ovsdb_de°roy
(
do_å™ß˘_db
);

1584 
	}
}

1587 
	$com∑ª_lök1
(c⁄° *
a_
, c⁄° *
b_
)

1589 c⁄° 
id…e°_lök1
 *c⁄° *
≠
 = 
a_
;

1590 c⁄° 
id…e°_lök1
 *c⁄° *
bp
 = 
b_
;

1591 c⁄° 
id…e°_lök1
 *
a
 = *
≠
;

1592 c⁄° 
id…e°_lök1
 *
b
 = *
bp
;

1594  
a
->
i
 < 
b
->i ? -1 :á->i > b->i;

1595 
	}
}

1598 
	$¥öt_idl
(
ovsdb_idl
 *
idl
, 
°ï
)

1600 c⁄° 
id…e°_sim∂e
 *
s
;

1601 c⁄° 
id…e°_lök1
 *
l1
;

1602 c⁄° 
id…e°_lök2
 *
l2
;

1603 
n
 = 0;

1605 
	`IDLTEST_SIMPLE_FOR_EACH
 (
s
, 
idl
) {

1606 
size_t
 
i
;

1608 
	`¥ötf
("%03d: i=%"
PRId64
"Ñ=%g b=%†s=%†u="
UUID_FMT
" ia=[",

1609 
°ï
, 
s
->
i
, s->
r
, s->
b
 ? "true" : "false",

1610 
s
->s, 
	`UUID_ARGS
(&s->
u
));

1611 
i
 = 0; i < 
s
->
n_ü
; i++) {

1612 
	`¥ötf
("%s%"
PRId64
, 
i
 ? " " : "", 
s
->
ü
[i]);

1614 
	`¥ötf
("]Ña=[");

1615 
i
 = 0; i < 
s
->
n_ø
; i++) {

1616 
	`¥ötf
("%s%g", 
i
 ? " " : "", 
s
->
ø
[i]);

1618 
	`¥ötf
("] ba=[");

1619 
i
 = 0; i < 
s
->
n_ba
; i++) {

1620 
	`¥ötf
("%s%s", 
i
 ? " " : "", 
s
->
ba
[i] ? "true" : "false");

1622 
	`¥ötf
("] sa=[");

1623 
i
 = 0; i < 
s
->
n_ß
; i++) {

1624 
	`¥ötf
("%s%s", 
i
 ? " " : "", 
s
->
ß
[i]);

1626 
	`¥ötf
("] ua=[");

1627 
i
 = 0; i < 
s
->
n_ua
; i++) {

1628 
	`¥ötf
("%s"
UUID_FMT
, 
i
 ? " " : "", 
	`UUID_ARGS
(&
s
->
ua
[i]));

1630 
	`¥ötf
("] uuid="
UUID_FMT
"\n", 
	`UUID_ARGS
(&
s
->
hódî_
.
uuid
));

1631 
n
++;

1633 
	`IDLTEST_LINK1_FOR_EACH
 (
l1
, 
idl
) {

1634 
id…e°_lök1
 **
löks
;

1635 
size_t
 
i
;

1637 
	`¥ötf
("%03d: i=%"
PRId64
" k=", 
°ï
, 
l1
->
i
);

1638 i‡(
l1
->
k
) {

1639 
	`¥ötf
("%"
PRId64
, 
l1
->
k
->
i
);

1641 
	`¥ötf
(" ka=[");

1642 
löks
 = 
	`xmemdup
(
l1
->
ka
,Ü1->
n_ka
 *  *l1->ka);

1643 
	`qs‹t
(
löks
, 
l1
->
n_ka
,  *löks, 
com∑ª_lök1
);

1644 
i
 = 0; i < 
l1
->
n_ka
; i++) {

1645 
	`¥ötf
("%s%"
PRId64
, 
i
 ? " " : "", 
löks
[i]->i);

1647 
	`‰ì
(
löks
);

1648 
	`¥ötf
("]Ü2=");

1649 i‡(
l1
->
l2
) {

1650 
	`¥ötf
("%"
PRId64
, 
l1
->
l2
->
i
);

1652 
	`¥ötf
(" uuid="
UUID_FMT
"\n", 
	`UUID_ARGS
(&
l1
->
hódî_
.
uuid
));

1653 
n
++;

1655 
	`IDLTEST_LINK2_FOR_EACH
 (
l2
, 
idl
) {

1656 
	`¥ötf
("%03d: i=%"
PRId64
"Ü1=", 
°ï
, 
l2
->
i
);

1657 i‡(
l2
->
l1
) {

1658 
	`¥ötf
("%"
PRId64
, 
l2
->
l1
->
i
);

1660 
	`¥ötf
(" uuid="
UUID_FMT
"\n", 
	`UUID_ARGS
(&
l2
->
hódî_
.
uuid
));

1661 
n
++;

1663 i‡(!
n
) {

1664 
	`¥ötf
("%03d:Ém±y\n", 
°ï
);

1666 
	}
}

1669 
	$∑r£_uuids
(c⁄° 
js⁄
 *js⁄, 
ovsdb_symbﬁ_èbÀ
 *
symèb
,

1670 
size_t
 *
n
)

1672 
uuid
 uuid;

1674 i‡(
js⁄
->
ty≥
 =
JSON_STRING
 && 
	`uuid_‰om_°rög
(&
uuid
, js⁄->
u
.
°rög
)) {

1675 *
«me
 = 
	`xa•rötf
("#%zu#", *
n
);

1676 
	`Ârötf
(
°dîr
, "%†"
UUID_FMT
"\n", 
«me
, 
	`UUID_ARGS
(&
uuid
));

1677 
	`ovsdb_symbﬁ_èbÀ_put
(
symèb
, 
«me
, &
uuid
, 
Ál£
);

1678 
	`‰ì
(
«me
);

1679 *
n
 += 1;

1680 } i‡(
js⁄
->
ty≥
 =
JSON_ARRAY
) {

1681 
size_t
 
i
;

1683 
i
 = 0; i < 
js⁄
->
u
.
¨øy
.
n
; i++) {

1684 
	`∑r£_uuids
(
js⁄
->
u
.
¨øy
.
ñems
[
i
], 
symèb
, 
n
);

1686 } i‡(
js⁄
->
ty≥
 =
JSON_OBJECT
) {

1687 c⁄° 
shash_node
 *
node
;

1689 
	`SHASH_FOR_EACH
 (
node
, 
	`js⁄_obje˘
(
js⁄
)) {

1690 
	`∑r£_uuids
(
node
->
d©a
, 
symèb
, 
n
);

1693 
	}
}

1696 
	$sub°ôuã_uuids
(
js⁄
 *js⁄, c⁄° 
ovsdb_symbﬁ_èbÀ
 *
symèb
)

1698 i‡(
js⁄
->
ty≥
 =
JSON_STRING
) {

1699 c⁄° 
ovsdb_symbﬁ
 *
symbﬁ
;

1701 
symbﬁ
 = 
	`ovsdb_symbﬁ_èbÀ_gë
(
symèb
, 
js⁄
->
u
.
°rög
);

1702 i‡(
symbﬁ
) {

1703 
	`‰ì
(
js⁄
->
u
.
°rög
);

1704 
js⁄
->
u
.
°rög
 = 
	`xa•rötf
(
UUID_FMT
, 
	`UUID_ARGS
(&
symbﬁ
->
uuid
));

1706 } i‡(
js⁄
->
ty≥
 =
JSON_ARRAY
) {

1707 
size_t
 
i
;

1709 
i
 = 0; i < 
js⁄
->
u
.
¨øy
.
n
; i++) {

1710 
	`sub°ôuã_uuids
(
js⁄
->
u
.
¨øy
.
ñems
[
i
], 
symèb
);

1712 } i‡(
js⁄
->
ty≥
 =
JSON_OBJECT
) {

1713 c⁄° 
shash_node
 *
node
;

1715 
	`SHASH_FOR_EACH
 (
node
, 
	`js⁄_obje˘
(
js⁄
)) {

1716 
	`sub°ôuã_uuids
(
node
->
d©a
, 
symèb
);

1719 
	}
}

1721 c⁄° 
id…e°_sim∂e
 *

1722 
	$id…e°_föd_sim∂e
(
ovsdb_idl
 *
idl
, 
i
)

1724 c⁄° 
id…e°_sim∂e
 *
s
;

1726 
	`IDLTEST_SIMPLE_FOR_EACH
 (
s
, 
idl
) {

1727 i‡(
s
->
i
 == i) {

1728  
s
;

1731  
NULL
;

1732 
	}
}

1735 
	$idl_£t
(
ovsdb_idl
 *
idl
, *
comm™ds
, 
°ï
)

1737 *
cmd
, *
ßve_±r1
 = 
NULL
;

1738 
ovsdb_idl_txn
 *
txn
;

1739 
ovsdb_idl_txn_°©us
 
°©us
;

1740 
boﬁ
 
ö¸emít
 = 
Ál£
;

1742 
txn
 = 
	`ovsdb_idl_txn_¸óã
(
idl
);

1743 
cmd
 = 
	`°πok_r
(
comm™ds
, ",", &
ßve_±r1
); cmd;

1744 
cmd
 = 
	`°πok_r
(
NULL
, ",", &
ßve_±r1
)) {

1745 *
ßve_±r2
 = 
NULL
;

1746 *
«me
, *
¨g1
, *
¨g2
, *
¨g3
;

1748 
«me
 = 
	`°πok_r
(
cmd
, " ", &
ßve_±r2
);

1749 
¨g1
 = 
	`°πok_r
(
NULL
, " ", &
ßve_±r2
);

1750 
¨g2
 = 
	`°πok_r
(
NULL
, " ", &
ßve_±r2
);

1751 
¨g3
 = 
	`°πok_r
(
NULL
, " ", &
ßve_±r2
);

1753 i‡(!
	`°rcmp
(
«me
, "set")) {

1754 c⁄° 
id…e°_sim∂e
 *
s
;

1756 i‡(!
¨g3
) {

1757 
	`ovs_Áèl
(0, "\"set\" commandÑequires 3árguments");

1760 
s
 = 
	`id…e°_föd_sim∂e
(
idl
, 
	`©oi
(
¨g1
));

1761 i‡(!
s
) {

1762 
	`ovs_Áèl
(0, "\"set\" commandásks forÇonexistent "

1763 "i=%d", 
	`©oi
(
¨g1
));

1766 i‡(!
	`°rcmp
(
¨g2
, "b")) {

1767 
	`id…e°_sim∂e_£t_b
(
s
, 
	`©oi
(
¨g3
));

1768 } i‡(!
	`°rcmp
(
¨g2
, "s")) {

1769 
	`id…e°_sim∂e_£t_s
(
s
, 
¨g3
);

1770 } i‡(!
	`°rcmp
(
¨g2
, "u")) {

1771 
uuid
 uuid;

1772 i‡(!
	`uuid_‰om_°rög
(&
uuid
, 
¨g3
)) {

1773 
	`ovs_Áèl
(0, "\"%s\" i†nŸá vÆid UUID", 
¨g3
);

1775 
	`id…e°_sim∂e_£t_u
(
s
, 
uuid
);

1776 } i‡(!
	`°rcmp
(
¨g2
, "r")) {

1777 
	`id…e°_sim∂e_£t_r
(
s
, 
	`©of
(
¨g3
));

1779 
	`ovs_Áèl
(0, "\"set\" commandásks for unknown column %s",

1780 
¨g2
);

1782 } i‡(!
	`°rcmp
(
«me
, "insert")) {

1783 
id…e°_sim∂e
 *
s
;

1785 i‡(!
¨g1
 || 
¨g2
) {

1786 
	`ovs_Áèl
(0, "\"insert\" commandÑequires 1árgument");

1789 
s
 = 
	`id…e°_sim∂e_ö£π
(
txn
);

1790 
	`id…e°_sim∂e_£t_i
(
s
, 
	`©oi
(
¨g1
));

1791 } i‡(!
	`°rcmp
(
«me
, "delete")) {

1792 c⁄° 
id…e°_sim∂e
 *
s
;

1794 i‡(!
¨g1
 || 
¨g2
) {

1795 
	`ovs_Áèl
(0, "\"delete\" commandÑequires 1árgument");

1798 
s
 = 
	`id…e°_föd_sim∂e
(
idl
, 
	`©oi
(
¨g1
));

1799 i‡(!
s
) {

1800 
	`ovs_Áèl
(0, "\"delete\" commandásks forÇonexistent "

1801 "i=%d", 
	`©oi
(
¨g1
));

1803 
	`id…e°_sim∂e_dñëe
(
s
);

1804 } i‡(!
	`°rcmp
(
«me
, "verify")) {

1805 c⁄° 
id…e°_sim∂e
 *
s
;

1807 i‡(!
¨g2
 || 
¨g3
) {

1808 
	`ovs_Áèl
(0, "\"verify\" commandÑequires 2árguments");

1811 
s
 = 
	`id…e°_föd_sim∂e
(
idl
, 
	`©oi
(
¨g1
));

1812 i‡(!
s
) {

1813 
	`ovs_Áèl
(0, "\"verify\" commandásks forÇonexistent "

1814 "i=%d", 
	`©oi
(
¨g1
));

1817 i‡(!
	`°rcmp
(
¨g2
, "i")) {

1818 
	`id…e°_sim∂e_vîify_i
(
s
);

1819 } i‡(!
	`°rcmp
(
¨g2
, "b")) {

1820 
	`id…e°_sim∂e_vîify_b
(
s
);

1821 } i‡(!
	`°rcmp
(
¨g2
, "s")) {

1822 
	`id…e°_sim∂e_vîify_s
(
s
);

1823 } i‡(!
	`°rcmp
(
¨g2
, "u")) {

1824 
	`id…e°_sim∂e_vîify_s
(
s
);

1825 } i‡(!
	`°rcmp
(
¨g2
, "r")) {

1826 
	`id…e°_sim∂e_vîify_r
(
s
);

1828 
	`ovs_Áèl
(0, "\"verify\" commandásks for unknown column %s",

1829 
¨g2
);

1831 } i‡(!
	`°rcmp
(
«me
, "increment")) {

1832 c⁄° 
id…e°_sim∂e
 *
s
;

1834 i‡(!
¨g1
 || 
¨g2
) {

1835 
	`ovs_Áèl
(0, "\"increment\" commandÑequires 1árgument");

1838 
s
 = 
	`id…e°_föd_sim∂e
(
idl
, 
	`©oi
(
¨g1
));

1839 i‡(!
s
) {

1840 
	`ovs_Áèl
(0, "\"set\" commandásks forÇonexistent "

1841 "i=%d", 
	`©oi
(
¨g1
));

1844 
	`ovsdb_idl_txn_ö¸emít
(
txn
, &
s
->
hódî_
, &
id…e°_sim∂e_cﬁ_i
);

1845 
ö¸emít
 = 
åue
;

1846 } i‡(!
	`°rcmp
(
«me
, "abort")) {

1847 
	`ovsdb_idl_txn_ab‹t
(
txn
);

1849 } i‡(!
	`°rcmp
(
«me
, "destroy")) {

1850 
	`¥ötf
("%03d: de°roy\n", 
°ï
);

1851 
	`ovsdb_idl_txn_de°roy
(
txn
);

1854 
	`ovs_Áèl
(0, "unknow¿comm™d %s", 
«me
);

1858 
°©us
 = 
	`ovsdb_idl_txn_commô_block
(
txn
);

1859 
	`¥ötf
("%03d: commit, status=%s",

1860 
°ï
, 
	`ovsdb_idl_txn_°©us_to_°rög
(
°©us
));

1861 i‡(
ö¸emít
) {

1862 
	`¥ötf
(", in¸emít=%"
PRId64
,

1863 
	`ovsdb_idl_txn_gë_ö¸emít_√w_vÆue
(
txn
));

1865 
	`putch¨
('\n');

1866 
	`ovsdb_idl_txn_de°roy
(
txn
);

1867 
	}
}

1870 
	$do_idl
(
¨gc
, *
¨gv
[])

1872 
js⁄Ωc
 *
Ωc
;

1873 
ovsdb_idl
 *
idl
;

1874 
£qno
 = 0;

1875 
ovsdb_symbﬁ_èbÀ
 *
symèb
;

1876 
size_t
 
n_uuids
 = 0;

1877 
°ï
 = 0;

1878 
îr‹
;

1879 
i
;

1881 
	`id…e°_öô
();

1883 
idl
 = 
	`ovsdb_idl_¸óã
(
¨gv
[1], &
id…e°_idl_˛ass
, 
åue
);

1884 i‡(
¨gc
 > 2) {

1885 
°ªam
 *stream;

1887 
îr‹
 = 
	`°ªam_›í_block
(
	`js⁄Ωc_°ªam_›í
(
¨gv
[1], &
°ªam
,

1888 
DSCP_DEFAULT
), &
°ªam
);

1889 i‡(
îr‹
) {

1890 
	`ovs_Áèl
(
îr‹
, "ÁûedÅÿc⁄√˘Åÿ\"%s\"", 
¨gv
[1]);

1892 
Ωc
 = 
	`js⁄Ωc_›í
(
°ªam
);

1894 
Ωc
 = 
NULL
;

1897 
	`£tvbuf
(
°dout
, 
NULL
, 
_IOLBF
, 0);

1899 
symèb
 = 
	`ovsdb_symbﬁ_èbÀ_¸óã
();

1900 
i
 = 2; i < 
¨gc
; i++) {

1901 *
¨g
 = 
¨gv
[
i
];

1902 
js⁄Ωc_msg
 *
ªque°
, *
ª∂y
;

1904 i‡(*
¨g
 == '+') {

1906 
¨g
++;

1910 
	`ovsdb_idl_run
(
idl
);

1911 i‡(
	`ovsdb_idl_gë_£qno
(
idl
Ë!
£qno
) {

1914 
	`js⁄Ωc_run
(
Ωc
);

1916 
	`ovsdb_idl_waô
(
idl
);

1917 
	`js⁄Ωc_waô
(
Ωc
);

1918 
	`pﬁl_block
();

1922 
	`¥öt_idl
(
idl
, 
°ï
++);

1924 
£qno
 = 
	`ovsdb_idl_gë_£qno
(
idl
);

1926 i‡(!
	`°rcmp
(
¨g
, "reconnect")) {

1927 
	`¥ötf
("%03d:Ñec⁄√˘\n", 
°ï
++);

1928 
	`ovsdb_idl_f‹˚_ªc⁄√˘
(
idl
);

1929 } i‡(
¨g
[0] != '[') {

1930 
	`idl_£t
(
idl
, 
¨g
, 
°ï
++);

1932 
js⁄
 *js⁄ = 
	`∑r£_js⁄
(
¨g
);

1933 
	`sub°ôuã_uuids
(
js⁄
, 
symèb
);

1934 
ªque°
 = 
	`js⁄Ωc_¸óã_ªque°
("å™ß˘", 
js⁄
, 
NULL
);

1935 
îr‹
 = 
	`js⁄Ωc_å™ß˘_block
(
Ωc
, 
ªque°
, &
ª∂y
);

1936 i‡(
îr‹
 || 
ª∂y
->error) {

1937 
	`ovs_Áèl
(
îr‹
, "jsonrpcÅransaction failed");

1939 
	`¥ötf
("%03d: ", 
°ï
++);

1940 i‡(
ª∂y
->
ªsu…
) {

1941 
	`∑r£_uuids
(
ª∂y
->
ªsu…
, 
symèb
, &
n_uuids
);

1943 
	`js⁄_de°roy
(
ª∂y
->
id
);

1944 
ª∂y
->
id
 = 
NULL
;

1945 
	`¥öt_™d_‰ì_js⁄
(
	`js⁄Ωc_msg_to_js⁄
(
ª∂y
));

1948 
	`ovsdb_symbﬁ_èbÀ_de°roy
(
symèb
);

1950 i‡(
Ωc
) {

1951 
	`js⁄Ωc_˛o£
(
Ωc
);

1954 
	`ovsdb_idl_run
(
idl
);

1955 i‡(
	`ovsdb_idl_gë_£qno
(
idl
Ë!
£qno
) {

1958 
	`ovsdb_idl_waô
(
idl
);

1959 
	`pﬁl_block
();

1961 
	`¥öt_idl
(
idl
, 
°ï
++);

1962 
	`ovsdb_idl_de°roy
(
idl
);

1963 
	`¥ötf
("%03d: d⁄e\n", 
°ï
);

1964 
	}
}

1966 
comm™d
 
	gÆl_comm™ds
[] = {

1967 { "log-io", 2, 
INT_MAX
, 
do_log_io
 },

1968 { "deÁu…-©oms", 0, 0, 
do_deÁu…_©oms
 },

1969 { "deÁu…-d©a", 0, 0, 
do_deÁu…_d©a
 },

1970 { "∑r£-©omic-ty≥", 1, 1, 
do_∑r£_©omic_ty≥
 },

1971 { "∑r£-ba£-ty≥", 1, 1, 
do_∑r£_ba£_ty≥
 },

1972 { "∑r£-ty≥", 1, 1, 
do_∑r£_ty≥
 },

1973 { "∑r£-©oms", 2, 
INT_MAX
, 
do_∑r£_©oms
 },

1974 { "∑r£-©om-°rögs", 2, 
INT_MAX
, 
do_∑r£_©om_°rögs
 },

1975 { "∑r£-d©a", 2, 
INT_MAX
, 
do_∑r£_d©a
 },

1976 { "∑r£-d©a-°rögs", 2, 
INT_MAX
, 
do_∑r£_d©a_°rögs
 },

1977 { "s‹t-©oms", 2, 2, 
do_s‹t_©oms
 },

1978 { "∑r£-cﬁumn", 2, 2, 
do_∑r£_cﬁumn
 },

1979 { "∑r£-èbÀ", 2, 3, 
do_∑r£_èbÀ
 },

1980 { "∑r£-rows", 2, 
INT_MAX
, 
do_∑r£_rows
 },

1981 { "com∑ª-rows", 2, 
INT_MAX
, 
do_com∑ª_rows
 },

1982 { "∑r£-c⁄dôi⁄s", 2, 
INT_MAX
, 
do_∑r£_c⁄dôi⁄s
 },

1983 { "evÆu©e-c⁄dôi⁄s", 3, 3, 
do_evÆu©e_c⁄dôi⁄s
 },

1984 { "∑r£-muèti⁄s", 2, 
INT_MAX
, 
do_∑r£_muèti⁄s
 },

1985 { "execuã-muèti⁄s", 3, 3, 
do_execuã_muèti⁄s
 },

1986 { "quîy", 3, 3, 
do_quîy
 },

1987 { "quîy-di°ö˘", 4, 4, 
do_quîy_di°ö˘
 },

1988 { "å™ß˘", 1, 
INT_MAX
, 
do_å™ß˘
 },

1989 { "∑r£-schema", 1, 1, 
do_∑r£_schema
 },

1990 { "execuã", 2, 
INT_MAX
, 
do_execuã
 },

1991 { "åiggî", 2, 
INT_MAX
, 
do_åiggî
 },

1992 { "idl", 1, 
INT_MAX
, 
do_idl
 },

1993 { "hñp", 0, 
INT_MAX
, 
do_hñp
 },

1994 { 
NULL
, 0, 0, NULL },

	@/home/lsch/mytest/openvswitch-1.9.0/tests/test-packets.c

17 
	~<c⁄fig.h
>

18 
	~"∑ckës.h
"

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 #unde‡
NDEBUG


24 
	~<as£π.h
>

28 
	$ã°_ùv4_cidr
()

30 
	`as£π
(
	`ù_is_cidr
(
	`ht⁄l
(0x00000000)));

31 
	`as£π
(
	`ù_is_cidr
(
	`ht⁄l
(0x80000000)));

32 
	`as£π
(
	`ù_is_cidr
(
	`ht⁄l
(0xf0000000)));

33 
	`as£π
(
	`ù_is_cidr
(
	`ht⁄l
(0xffffffe0)));

34 
	`as£π
(
	`ù_is_cidr
(
	`ht⁄l
(0xffffffff)));

36 
	`as£π
(!
	`ù_is_cidr
(
	`ht⁄l
(0x00000001)));

37 
	`as£π
(!
	`ù_is_cidr
(
	`ht⁄l
(0x40000000)));

38 
	`as£π
(!
	`ù_is_cidr
(
	`ht⁄l
(0x0fffffff)));

39 
	`as£π
(!
	`ù_is_cidr
(
	`ht⁄l
(0xffffffd0)));

40 
	}
}

43 
	$ã°_ùv6_°©ic_masks
()

49 
ö6_addr
 
exa˘
 = {{{ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, \

52 
ö6_addr
 
™y
 = {{{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, \

55 
ö6_addr
 
√ôhî
 = {{{ 0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef, \

58 
	`as£π
(
	`ùv6_mask_is_exa˘
(&
exa˘
));

59 
	`as£π
(!
	`ùv6_mask_is_exa˘
(&
™y
));

60 
	`as£π
(!
	`ùv6_mask_is_exa˘
(&
√ôhî
));

62 
	`as£π
(!
	`ùv6_mask_is_™y
(&
exa˘
));

63 
	`as£π
(
	`ùv6_mask_is_™y
(&
™y
));

64 
	`as£π
(!
	`ùv6_mask_is_™y
(&
√ôhî
));

66 
	}
}

69 
	$ã°_ùv6_cidr
()

71 
ö6_addr
 
de°
;

73 
ö6_addr
 
§c
 = {{{ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, \

76 
de°
 = 
	`ùv6_¸óã_mask
(0);

77 
	`as£π
(
	`ùv6_mask_is_™y
(&
de°
));

78 
	`as£π
(
	`ùv6_cou¡_cidr_bôs
(&
de°
) == 0);

79 
	`as£π
(
	`ùv6_is_cidr
(&
de°
));

81 
de°
 = 
	`ùv6_¸óã_mask
(128);

82 
	`as£π
(
	`ùv6_mask_is_exa˘
(&
de°
));

83 
	`as£π
(
	`ùv6_cou¡_cidr_bôs
(&
de°
) == 128);

84 
	`as£π
(
	`ùv6_is_cidr
(&
de°
));

86 
de°
 = 
	`ùv6_¸óã_mask
(1);

87 
	`as£π
(
	`ùv6_cou¡_cidr_bôs
(&
de°
) == 1);

88 
	`as£π
(
	`ùv6_is_cidr
(&
de°
));

90 
de°
 = 
	`ùv6_¸óã_mask
(13);

91 
	`as£π
(
	`ùv6_cou¡_cidr_bôs
(&
de°
) == 13);

92 
	`as£π
(
	`ùv6_is_cidr
(&
de°
));

94 
de°
 = 
	`ùv6_¸óã_mask
(64);

95 
	`as£π
(
	`ùv6_cou¡_cidr_bôs
(&
de°
) == 64);

96 
	`as£π
(
	`ùv6_is_cidr
(&
de°
));

98 
de°
 = 
	`ùv6_¸óã_mask
(95);

99 
	`as£π
(
	`ùv6_cou¡_cidr_bôs
(&
de°
) == 95);

100 
	`as£π
(
	`ùv6_is_cidr
(&
de°
));

102 
de°
 = 
	`ùv6_¸óã_mask
(96);

103 
	`as£π
(
	`ùv6_cou¡_cidr_bôs
(&
de°
) == 96);

104 
	`as£π
(
	`ùv6_is_cidr
(&
de°
));

106 
de°
 = 
	`ùv6_¸óã_mask
(97);

107 
	`as£π
(
	`ùv6_cou¡_cidr_bôs
(&
de°
) == 97);

108 
	`as£π
(
	`ùv6_is_cidr
(&
de°
));

110 
de°
 = 
	`ùv6_¸óã_mask
(127);

111 
	`as£π
(
	`ùv6_cou¡_cidr_bôs
(&
de°
) == 127);

112 
	`as£π
(
	`ùv6_is_cidr
(&
de°
));

114 
§c
.
s6_addr
[8] = 0xf0;

115 
	`as£π
(
	`ùv6_is_cidr
(&
§c
));

116 
	`as£π
(
	`ùv6_cou¡_cidr_bôs
(&
§c
) == 68);

118 
§c
.
s6_addr
[15] = 0x01;

119 
	`as£π
(!
	`ùv6_is_cidr
(&
§c
));

120 
§c
.
s6_addr
[15] = 0x00;

121 
	`as£π
(
	`ùv6_is_cidr
(&
§c
));

123 
§c
.
s6_addr
[8] = 0x0f;

124 
	`as£π
(!
	`ùv6_is_cidr
(&
§c
));

125 
	}
}

129 
	$ã°_ùv6_maskög
()

131 
ö6_addr
 
de°
;

132 
ö6_addr
 
mask
;

134 
mask
 = 
	`ùv6_¸óã_mask
(0);

135 
de°
 = 
	`ùv6_addr_bô™d
(&
ö6addr_exa˘
, &
mask
);

136 
	`as£π
(
	`ùv6_cou¡_cidr_bôs
(&
de°
) == 0);

138 
mask
 = 
	`ùv6_¸óã_mask
(1);

139 
de°
 = 
	`ùv6_addr_bô™d
(&
ö6addr_exa˘
, &
mask
);

140 
	`as£π
(
	`ùv6_cou¡_cidr_bôs
(&
de°
) == 1);

142 
mask
 = 
	`ùv6_¸óã_mask
(13);

143 
de°
 = 
	`ùv6_addr_bô™d
(&
ö6addr_exa˘
, &
mask
);

144 
	`as£π
(
	`ùv6_cou¡_cidr_bôs
(&
de°
) == 13);

146 
mask
 = 
	`ùv6_¸óã_mask
(127);

147 
de°
 = 
	`ùv6_addr_bô™d
(&
ö6addr_exa˘
, &
mask
);

148 
	`as£π
(
	`ùv6_cou¡_cidr_bôs
(&
de°
) == 127);

150 
mask
 = 
	`ùv6_¸óã_mask
(128);

151 
de°
 = 
	`ùv6_addr_bô™d
(&
ö6addr_exa˘
, &
mask
);

152 
	`as£π
(
	`ùv6_cou¡_cidr_bôs
(&
de°
) == 128);

153 
	}
}

156 
	$maö
()

158 
	`ã°_ùv4_cidr
();

159 
	`ã°_ùv6_°©ic_masks
();

160 
	`ã°_ùv6_cidr
();

161 
	`ã°_ùv6_maskög
();

164 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/tests/test-random.c

17 
	~<c⁄fig.h
>

19 
	~"øndom.h
"

21 
	~<°dio.h
>

22 
	~<°rög.h
>

25 
	$maö
()

27 íum { 
N_ROUNDS
 = 10000 };

28 
tŸÆ
;

29 
hi°16
[8][16];

30 
hi°2
[32];

31 
i
;

33 
	`øndom_£t_£ed
(1);

35 
tŸÆ
 = 0;

36 
	`mem£t
(
hi°2
, 0,  hist2);

37 
	`mem£t
(
hi°16
, 0,  hist16);

38 
i
 = 0; i < 
N_ROUNDS
; i++) {

39 
uöt32_t
 
x
;

40 
j
;

42 
x
 = 
	`øndom_uöt32
();

44 
tŸÆ
 +
x
;

46 
j
 = 0; j < 32; j++) {

47 i‡(
x
 & (1u << 
j
)) {

48 
hi°2
[
j
]++;

52 
j
 = 0; j < 8; j++) {

53 
hi°16
[
j
][(
x
 >> (j * 4)) & 15]++;

57 
	`¥ötf
("avîage=%08Œx\n", 
tŸÆ
 / 
N_ROUNDS
);

59 
	`¥ötf
("\nbit 0 1\n");

60 
i
 = 0; i < 32; i++) {

61 
	`¥ötf
("%3d %5d %5d\n", 
i
, 
N_ROUNDS
 - 
hi°2
[i], hist2[i]);

63 
	`¥ötf
("”x≥˘ed vÆue†¨ê%d)\n", 
N_ROUNDS
 / 2);

65 
	`¥ötf
("\nnibble 0 1 2 3 4 5 6 7 8 9 10 11 12 "

67 
i
 = 0; i < 8; i++) {

68 
j
;

70 
	`¥ötf
("%6d", 
i
);

71 
j
 = 0; j < 16; j++) {

72 
	`¥ötf
(" %3d", 
hi°16
[
i
][
j
]);

74 
	`¥ötf
("\n");

76 
	`¥ötf
("”x≥˘ed vÆue†¨ê%d)\n", 
N_ROUNDS
 / 16);

79 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/tests/test-reconnect.c

17 
	~<c⁄fig.h
>

19 
	~"ªc⁄√˘.h
"

21 
	~<î∫o.h
>

22 
	~<°dio.h
>

23 
	~<°dlib.h
>

24 
	~<°rög.h
>

26 
	~"comm™d-löe.h
"

27 
	~"compûî.h
"

28 
	~"svec.h
"

29 
	~"utû.h
"

30 
	~"vlog.h
"

32 
ªc⁄√˘
 *
	gªc⁄√˘
;

33 
	gnow
;

35 c⁄° 
comm™d
 
	gcomm™ds
[];

37 
diff_°©s
(c⁄° 
ªc⁄√˘_°©s
 *
ﬁd
,

38 c⁄° 
ªc⁄√˘_°©s
 *
√w
,

39 
dñè
);

42 
	$maö
()

44 
vlog_moduÀ
 
VLM_ªc⁄√˘
;

45 
ªc⁄√˘_°©s
 
¥ev
;

46 
ﬁd_max_åõs
;

47 
ﬁd_time
;

48 
löe
[128];

50 
	`vlog_£t_Àvñs
(&
VLM_ªc⁄√˘
, 
VLF_ANY_FACILITY
, 
VLL_OFF
);

52 
now
 = 1000;

53 
ªc⁄√˘
 = 
	`ªc⁄√˘_¸óã
(
now
);

54 
	`ªc⁄√˘_£t_«me
(
ªc⁄√˘
, "remote");

55 
	`ªc⁄√˘_gë_°©s
(
ªc⁄√˘
, 
now
, &
¥ev
);

56 
	`¥ötf
("###Å=%d ###\n", 
now
);

57 
ﬁd_time
 = 
now
;

58 
ﬁd_max_åõs
 = 
	`ªc⁄√˘_gë_max_åõs
(
ªc⁄√˘
);

59 
	`fgës
(
löe
, Üöe, 
°dö
)) {

60 
ªc⁄√˘_°©s
 
cur
;

61 
svec
 
¨gs
;

63 
	`Âuts
(
löe
, 
°dout
);

64 i‡(
löe
[0] == '#') {

68 
	`svec_öô
(&
¨gs
);

69 
	`svec_∑r£_w‹ds
(&
¨gs
, 
löe
);

70 
	`svec_ãrmö©e
(&
¨gs
);

71 i‡(!
	`svec_is_em±y
(&
¨gs
)) {

72 
	`run_comm™d
(
¨gs
.
n
,árgs.
«mes
, 
comm™ds
);

74 
	`svec_de°roy
(&
¨gs
);

76 i‡(
ﬁd_time
 !
now
) {

77 
	`¥ötf
("\n###Å=%d ###\n", 
now
);

80 
	`ªc⁄√˘_gë_°©s
(
ªc⁄√˘
, 
now
, &
cur
);

81 
	`diff_°©s
(&
¥ev
, &
cur
, 
now
 - 
ﬁd_time
);

82 
¥ev
 = 
cur
;

83 i‡(
	`ªc⁄√˘_gë_max_åõs
(
ªc⁄√˘
Ë!
ﬁd_max_åõs
) {

84 
ﬁd_max_åõs
 = 
	`ªc⁄√˘_gë_max_åõs
(
ªc⁄√˘
);

85 
	`¥ötf
(" %uÅrõ†À·\n", 
ﬁd_max_åõs
);

88 
ﬁd_time
 = 
now
;

92 
	}
}

95 
	$do_íabÀ
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

97 
	`ªc⁄√˘_íabÀ
(
ªc⁄√˘
, 
now
);

98 
	}
}

101 
	$do_dißbÀ
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

103 
	`ªc⁄√˘_dißbÀ
(
ªc⁄√˘
, 
now
);

104 
	}
}

107 
	$do_f‹˚_ªc⁄√˘
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

109 
	`ªc⁄√˘_f‹˚_ªc⁄√˘
(
ªc⁄√˘
, 
now
);

110 
	}
}

113 
	$îr‹_‰om_°rög
(c⁄° *
s
)

115 i‡(!
s
) {

117 } i‡(!
	`°rcmp
(
s
, "ECONNREFUSED")) {

118  
ECONNREFUSED
;

119 } i‡(!
	`°rcmp
(
s
, "EOF")) {

120  
EOF
;

122 
	`ovs_Áèl
(0, "unknow¿îr‹ '%s'", 
s
);

124 
	}
}

127 
	$do_disc⁄√˘ed
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

129 
	`ªc⁄√˘_disc⁄√˘ed
(
ªc⁄√˘
, 
now
, 
	`îr‹_‰om_°rög
(
¨gv
[1]));

130 
	}
}

133 
	$do_c⁄√˘ög
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

135 
	`ªc⁄√˘_c⁄√˘ög
(
ªc⁄√˘
, 
now
);

136 
	}
}

139 
	$do_c⁄√˘_Áûed
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

141 
	`ªc⁄√˘_c⁄√˘_Áûed
(
ªc⁄√˘
, 
now
, 
	`îr‹_‰om_°rög
(
¨gv
[1]));

142 
	}
}

145 
	$do_c⁄√˘ed
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

147 
	`ªc⁄√˘_c⁄√˘ed
(
ªc⁄√˘
, 
now
);

148 
	}
}

151 
	$do_a˘ivôy
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

153 
	`ªc⁄√˘_a˘ivôy
(
ªc⁄√˘
, 
now
);

154 
	}
}

157 
	$do_run
(
¨gc
, *
¨gv
[])

159 
ªc⁄√˘_a˘i⁄
 
a˘i⁄
;

161 i‡(
¨gc
 > 1) {

162 
now
 +
	`©oi
(
¨gv
[1]);

165 
a˘i⁄
 = 
	`ªc⁄√˘_run
(
ªc⁄√˘
, 
now
);

166 
a˘i⁄
) {

168 i‡(
a˘i⁄
 != 0) {

169 
	`NOT_REACHED
();

173 
RECONNECT_CONNECT
:

174 
	`¥ötf
(" should connect\n");

177 
RECONNECT_DISCONNECT
:

178 
	`¥ötf
(" should disconnect\n");

181 
RECONNECT_PROBE
:

182 
	`¥ötf
(" should sendÖrobe\n");

185 
	}
}

188 
	$do_adv™˚
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

190 
now
 +
	`©oi
(
¨gv
[1]);

191 
	}
}

194 
	$do_timeout
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

196 
timeout
 = 
	`ªc⁄√˘_timeout
(
ªc⁄√˘
, 
now
);

197 i‡(
timeout
 >= 0) {

198 
	`¥ötf
("ádv™˚ %d ms\n", 
timeout
);

199 
now
 +
timeout
;

201 
	`¥ötf
("ÇoÅimeout\n");

203 
	}
}

206 
	$do_£t_max_åõs
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

208 
	`ªc⁄√˘_£t_max_åõs
(
ªc⁄√˘
, 
	`©oi
(
¨gv
[1]));

209 
	}
}

212 
	$diff_°©s
(c⁄° 
ªc⁄√˘_°©s
 *
ﬁd
,

213 c⁄° 
ªc⁄√˘_°©s
 *
√w
,

214 
dñè
)

216 i‡(
ﬁd
->
°©e
 !
√w
->state

217 || 
ﬁd
->
°©e_ñ≠£d
 !
√w
->state_elapsed

218 || 
ﬁd
->
backoff
 !
√w
->backoff) {

219 
	`¥ötf
(" in %s for %u ms (%d ms backoff)\n",

220 
√w
->
°©e
,Çew->
°©e_ñ≠£d
,Çew->
backoff
);

222 i‡(
ﬁd
->
¸óti⁄_time
 !
√w
->creation_time

223 || 
ﬁd
->
œ°_a˘ivôy
 !
√w
->last_activity

224 || 
ﬁd
->
œ°_c⁄√˘ed
 !
√w
->last_connected) {

225 
	`¥ötf
(" created %lld,Üastáctivity %lld,Üast connected %lld\n",

226 
√w
->
¸óti⁄_time
,Çew->
œ°_a˘ivôy
,Çew->
œ°_c⁄√˘ed
);

228 i‡(
ﬁd
->
n_suc˚ssful_c⁄√˘i⁄s
 !
√w
->n_successful_connections

229 || 
ﬁd
->
n_©ãm±ed_c⁄√˘i⁄s
 !
√w
->n_attempted_connections

230 || 
ﬁd
->
£qno
 !
√w
->seqno) {

231 
	`¥ötf
(" %u successful connections out of %uáttempts, seqno %u\n",

232 
√w
->
n_suc˚ssful_c⁄√˘i⁄s
,Çew->
n_©ãm±ed_c⁄√˘i⁄s
,

233 
√w
->
£qno
);

235 i‡(
ﬁd
->
is_c⁄√˘ed
 !
√w
->is_connected) {

236 
	`¥ötf
(" %sc⁄√˘ed\n", 
√w
->
is_c⁄√˘ed
 ? "" : "dis");

238 i‡(
ﬁd
->
œ°_c⁄√˘ed
 !
√w
->last_connected

239 || (
ﬁd
->
m£c_sö˚_c⁄√˘
 !
√w
->m£c_sö˚_c⁄√˘ - 
dñè


240 && !(
ﬁd
->
m£c_sö˚_c⁄√˘
 =
UINT_MAX


241 && 
√w
->
m£c_sö˚_c⁄√˘
 =
UINT_MAX
))

242 || (
ﬁd
->
tŸÆ_c⁄√˘ed_duøti⁄
 !
√w
->tŸÆ_c⁄√˘ed_duøti⁄ - 
dñè


243 && !(
ﬁd
->
tŸÆ_c⁄√˘ed_duøti⁄
 == 0

244 && 
√w
->
tŸÆ_c⁄√˘ed_duøti⁄
 == 0))) {

245 
	`¥ötf
("Üast connected %u mságo, connected %u msÅotal\n",

246 
√w
->
m£c_sö˚_c⁄√˘
,Çew->
tŸÆ_c⁄√˘ed_duøti⁄
);

248 i‡(
ﬁd
->
œ°_disc⁄√˘ed
 !
√w
->last_disconnected

249 || (
ﬁd
->
m£c_sö˚_disc⁄√˘
 !
√w
->m£c_sö˚_disc⁄√˘ - 
dñè


250 && !(
ﬁd
->
m£c_sö˚_disc⁄√˘
 =
UINT_MAX


251 && 
√w
->
m£c_sö˚_disc⁄√˘
 =
UINT_MAX
))) {

252 
	`¥ötf
(" disconnectedát %llu ms (%u mságo)\n",

253 
√w
->
œ°_disc⁄√˘ed
,Çew->
m£c_sö˚_disc⁄√˘
);

255 
	}
}

258 
	$do_£t_∑ssive
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

260 
	`ªc⁄√˘_£t_∑ssive
(
ªc⁄√˘
, 
åue
, 
now
);

261 
	}
}

264 
	$do_li°íög
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

266 
	`ªc⁄√˘_li°íög
(
ªc⁄√˘
, 
now
);

267 
	}
}

270 
	$do_li°í_îr‹
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

272 
	`ªc⁄√˘_li°í_îr‹
(
ªc⁄√˘
, 
now
, 
	`©oi
(
¨gv
[1]));

273 
	}
}

275 c⁄° 
comm™d
 
	gcomm™ds
[] = {

276 { "íabÀ", 0, 0, 
do_íabÀ
 },

277 { "dißbÀ", 0, 0, 
do_dißbÀ
 },

278 { "f‹˚-ªc⁄√˘", 0, 0, 
do_f‹˚_ªc⁄√˘
 },

279 { "disc⁄√˘ed", 0, 1, 
do_disc⁄√˘ed
 },

280 { "c⁄√˘ög", 0, 0, 
do_c⁄√˘ög
 },

281 { "c⁄√˘-Áûed", 0, 1, 
do_c⁄√˘_Áûed
 },

282 { "c⁄√˘ed", 0, 0, 
do_c⁄√˘ed
 },

283 { "a˘ivôy", 0, 0, 
do_a˘ivôy
 },

284 { "run", 0, 1, 
do_run
 },

285 { "adv™˚", 1, 1, 
do_adv™˚
 },

286 { "timeout", 0, 0, 
do_timeout
 },

287 { "£t-max-åõs", 1, 1, 
do_£t_max_åõs
 },

288 { "∑ssive", 0, 0, 
do_£t_∑ssive
 },

289 { "li°íög", 0, 0, 
do_li°íög
 },

290 { "li°í-îr‹", 1, 1, 
do_li°í_îr‹
 },

291 { 
NULL
, 0, 0, NULL },

	@/home/lsch/mytest/openvswitch-1.9.0/tests/test-sha1.c

17 
	~<c⁄fig.h
>

18 
	~"sha1.h
"

19 
	~<öây≥s.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~"øndom.h
"

24 
	~"utû.h
"

26 #unde‡
NDEBUG


27 
	~<as£π.h
>

29 
	sã°_ve˘‹
 {

30 *
	md©a
;

31 
size_t
 
	msize
;

32 c⁄° 
uöt8_t
 
	mouçut
[20];

35 c⁄° 
ã°_ve˘‹
 
	gve˘‹s
[] = {

95 
	$ã°_⁄e
(c⁄° 
ã°_ve˘‹
 *
vec
)

97 
uöt8_t
 
md
[
SHA1_DIGEST_SIZE
];

98 
i
;

101 
	`sha1_byãs
(
vec
->
d©a
, vec->
size
, 
md
);

102 
	`as£π
(!
	`memcmp
(
md
, 
vec
->
ouçut
, 
SHA1_DIGEST_SIZE
));

105 
i
 = 0; i < 20; i++) {

106 
n0
 = 
vec
->
size
 ? 
	`øndom_ønge
(vec->size) : 0;

107 
n1
 = 
vec
->
size
 - 
n0
;

108 
sha1_˘x
 
sha1
;

110 
	`sha1_öô
(&
sha1
);

111 
	`sha1_upd©e
(&
sha1
, 
vec
->
d©a
, 
n0
);

112 
	`sha1_upd©e
(&
sha1
, 
vec
->
d©a
 + 
n0
, 
n1
);

113 
	`sha1_föÆ
(&
sha1
, 
md
);

114 
	`as£π
(!
	`memcmp
(
md
, 
vec
->
ouçut
, 
SHA1_DIGEST_SIZE
));

117 
	`putch¨
('.');

118 
	`fÊush
(
°dout
);

119 
	}
}

122 
	$ã°_big_ve˘‹
()

124 íum { 
SIZE
 = 1000000 };

125 
ã°_ve˘‹
 
vec
 = {

126 
NULL
, 
SIZE
,

130 
size_t
 
i
;

132 
vec
.
d©a
 = 
	`xmÆloc
(
SIZE
);

133 
i
 = 0; i < 
SIZE
; i++) {

134 
vec
.
d©a
[
i
] = 'a';

136 
	`ã°_⁄e
(&
vec
);

137 
	`‰ì
(
vec
.
d©a
);

138 
	}
}

141 
	$maö
()

143 
i
;

145 
i
 = 0; i < 
	`ARRAY_SIZE
(
ve˘‹s
); i++) {

146 
	`ã°_⁄e
(&
ve˘‹s
[
i
]);

149 
	`ã°_big_ve˘‹
();

151 
	`putch¨
('\n');

154 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/tests/test-stp.c

17 
	~<c⁄fig.h
>

19 
	~"°p.h
"

20 
	~<as£π.h
>

21 
	~<˘y≥.h
>

22 
	~<î∫o.h
>

23 
	~<öây≥s.h
>

24 
	~<°d¨g.h
>

25 
	~<°dlib.h
>

26 
	~"oÂbuf.h
"

27 
	~"∑ckës.h
"

28 
	~"vlog.h
"

30 
	sbpdu
 {

31 
	mp‹t_no
;

32 *
	md©a
;

33 
size_t
 
	msize
;

36 
	sbridge
 {

37 
ã°_ˇ£
 *
	mtc
;

38 
	mid
;

39 
boﬁ
 
	mªached
;

41 
°p
 *
	m°p
;

43 
œn
 *
	mp‹ts
[
STP_MAX_PORTS
];

44 
	mn_p‹ts
;

46 
	#RXQ_SIZE
 16

	)

47 
bpdu
 
	mrxq
[
RXQ_SIZE
];

48 
	mrxq_hód
, 
	mrxq_èû
;

51 
	sœn_c⁄n
 {

52 
bridge
 *
	mbridge
;

53 
	mp‹t_no
;

56 
	sœn
 {

57 
ã°_ˇ£
 *
	mtc
;

58 c⁄° *
	m«me
;

59 
boﬁ
 
	mªached
;

60 
œn_c⁄n
 
	mc⁄ns
[16];

61 
	mn_c⁄ns
;

64 
	sã°_ˇ£
 {

65 
bridge
 *
	mbridges
[16];

66 
	mn_bridges
;

67 
œn
 *
	mœns
[26];

68 
	mn_œns
;

71 c⁄° *
	gfûe_«me
;

72 
	glöe_numbî
;

73 
	glöe
[128];

74 *
	gpos
, *
	gtokí
;

75 
	gn_w¨nögs
;

77 
ã°_ˇ£
 *

78 
	$√w_ã°_ˇ£
()

80 
ã°_ˇ£
 *
tc
 = 
	`xmÆloc
( *tc);

81 
tc
->
n_bridges
 = 0;

82 
tc
->
n_œns
 = 0;

83  
tc
;

84 
	}
}

87 
	$£nd_bpdu
(
oÂbuf
 *
pkt
, 
p‹t_no
, *
b_
)

89 
bridge
 *
b
 = 
b_
;

90 
œn
 *lan;

92 
	`as£π
(
p‹t_no
 < 
b
->
n_p‹ts
);

93 
œn
 = 
b
->
p‹ts
[
p‹t_no
];

94 i‡(
œn
) {

95 c⁄° *
d©a
 = 
pkt
->
l3
;

96 
size_t
 
size
 = (*Ë
	`oÂbuf_èû
(
pkt
Ë- (*Ë
d©a
;

97 
i
;

99 
i
 = 0; i < 
œn
->
n_c⁄ns
; i++) {

100 
œn_c⁄n
 *
c⁄n
 = &
œn
->
c⁄ns
[
i
];

101 i‡(
c⁄n
->
bridge
 !
b
 || c⁄n->
p‹t_no
 !=Öort_no) {

102 
bridge
 *
d°
 = 
c⁄n
->bridge;

103 
bpdu
 *bpdu = &
d°
->
rxq
[d°->
rxq_hód
++ % 
RXQ_SIZE
];

104 
	`as£π
(
d°
->
rxq_hód
 - d°->
rxq_èû
 <
RXQ_SIZE
);

105 
bpdu
->
d©a
 = 
	`xmemdup
(d©a, 
size
);

106 
bpdu
->
size
 = size;

107 
bpdu
->
p‹t_no
 = 
c⁄n
->port_no;

111 
	`oÂbuf_dñëe
(
pkt
);

112 
	}
}

114 
bridge
 *

115 
	$√w_bridge
(
ã°_ˇ£
 *
tc
, 
id
)

117 
bridge
 *
b
 = 
	`xmÆloc
( *b);

118 
«me
[16];

119 
b
->
tc
 =Åc;

120 
b
->
id
 = id;

121 
	`¢¥ötf
(
«me
, Çame, "°p%x", 
id
);

122 
b
->
°p
 = 
	`°p_¸óã
(
«me
, 
id
, 
£nd_bpdu
, b);

123 
	`as£π
(
tc
->
n_bridges
 < 
	`ARRAY_SIZE
—c->
bridges
));

124 
b
->
n_p‹ts
 = 0;

125 
b
->
rxq_hód
 = b->
rxq_èû
 = 0;

126 
tc
->
bridges
[tc->
n_bridges
++] = 
b
;

127  
b
;

128 
	}
}

130 
œn
 *

131 
	$√w_œn
(
ã°_ˇ£
 *
tc
, c⁄° *
«me
)

133 
œn
 *œ¿
	`xmÆloc
( *lan);

134 
œn
->
tc
 =Åc;

135 
œn
->
«me
 = 
	`x°rdup
(name);

136 
œn
->
n_c⁄ns
 = 0;

137 
	`as£π
(
tc
->
n_œns
 < 
	`ARRAY_SIZE
—c->
œns
));

138 
tc
->
œns
[tc->
n_œns
++] = 
œn
;

139  
œn
;

140 
	}
}

143 
	$ªc⁄√˘_p‹t
(
bridge
 *
b
, 
p‹t_no
, 
œn
 *
√w_œn
)

145 
œn
 *
ﬁd_œn
;

146 
j
;

148 
	`as£π
(
p‹t_no
 < 
b
->
n_p‹ts
);

149 
ﬁd_œn
 = 
b
->
p‹ts
[
p‹t_no
];

150 i‡(
ﬁd_œn
 =
√w_œn
) {

155 i‡(
ﬁd_œn
) {

156 
j
 = 0; j < 
ﬁd_œn
->
n_c⁄ns
; j++) {

157 
œn_c⁄n
 *
c
 = &
ﬁd_œn
->
c⁄ns
[
j
];

158 i‡(
c
->
bridge
 =
b
 && c->
p‹t_no
 ==Öort_no) {

159 
	`memmove
(
c
, c + 1,  *¯* (
ﬁd_œn
->
n_c⁄ns
 - 
j
 - 1));

160 
ﬁd_œn
->
n_c⁄ns
--;

167 
b
->
p‹ts
[
p‹t_no
] = 
√w_œn
;

168 i‡(
√w_œn
) {

169 
c⁄n_no
 = 
√w_œn
->
n_c⁄ns
++;

170 
	`as£π
(
c⁄n_no
 < 
	`ARRAY_SIZE
(
√w_œn
->
c⁄ns
));

171 
√w_œn
->
c⁄ns
[
c⁄n_no
].
bridge
 = 
b
;

172 
√w_œn
->
c⁄ns
[
c⁄n_no
].
p‹t_no
 =Öort_no;

174 
	}
}

177 
	$√w_p‹t
(
bridge
 *
b
, 
œn
 *œn, 
∑th_co°
)

179 
p‹t_no
 = 
b
->
n_p‹ts
++;

180 
°p_p‹t
 *
p
 = 
	`°p_gë_p‹t
(
b
->
°p
, 
p‹t_no
);

181 
	`as£π
(
p‹t_no
 < 
	`ARRAY_SIZE
(
b
->
p‹ts
));

182 
b
->
p‹ts
[
p‹t_no
] = 
NULL
;

183 
	`°p_p‹t_£t_∑th_co°
(
p
, 
∑th_co°
);

184 
	`°p_p‹t_íabÀ
(
p
);

185 
	`ªc⁄√˘_p‹t
(
b
, 
p‹t_no
, 
œn
);

186 
	}
}

189 
	$dump
(
ã°_ˇ£
 *
tc
)

191 
i
;

193 
i
 = 0; i < 
tc
->
n_bridges
; i++) {

194 
bridge
 *
b
 = 
tc
->
bridges
[
i
];

195 
°p
 *°∞
b
->stp;

196 
j
;

198 
	`¥ötf
("%s:", 
	`°p_gë_«me
(
°p
));

199 i‡(
	`°p_is_roŸ_bridge
(
°p
)) {

200 
	`¥ötf
("Ñoot");

202 
	`¥ötf
("\n");

203 
j
 = 0; j < 
b
->
n_p‹ts
; j++) {

204 
°p_p‹t
 *
p
 = 
	`°p_gë_p‹t
(
°p
, 
j
);

205 
°p_°©e
 
°©e
 = 
	`°p_p‹t_gë_°©e
(
p
);

207 
	`¥ötf
("\ç‹à%d", 
j
);

208 i‡(
b
->
p‹ts
[
j
]) {

209 
	`¥ötf
(" (œ¿%s)", 
b
->
p‹ts
[
j
]->
«me
);

211 
	`¥ötf
(" (disconnected)");

213 
	`¥ötf
(": %s", 
	`°p_°©e_«me
(
°©e
));

214 i‡(
p
 =
	`°p_gë_roŸ_p‹t
(
°p
)) {

215 
	`¥ötf
(" (roŸÖ‹t,ÑoŸ_∑th_co°=%u)", 
	`°p_gë_roŸ_∑th_co°
(
°p
));

217 
	`¥ötf
("\n");

220 
	}
}

222 
dump_œn_åì
(
ã°_ˇ£
 *, 
œn
 *, 
Àvñ
);

225 
	$dump_bridge_åì
(
ã°_ˇ£
 *
tc
, 
bridge
 *
b
, 
Àvñ
)

227 
i
;

229 i‡(
b
->
ªached
) {

232 
b
->
ªached
 = 
åue
;

233 
i
 = 0; i < 
Àvñ
; i++) {

234 
	`¥ötf
("\t");

236 
	`¥ötf
("%s\n", 
	`°p_gë_«me
(
b
->
°p
));

237 
i
 = 0; i < 
b
->
n_p‹ts
; i++) {

238 
œn
 *œ¿
b
->
p‹ts
[
i
];

239 
°p_p‹t
 *
p
 = 
	`°p_gë_p‹t
(
b
->
°p
, 
i
);

240 i‡(
	`°p_p‹t_gë_°©e
(
p
Ë=
STP_FORWARDING
 && 
œn
) {

241 
	`dump_œn_åì
(
tc
, 
œn
, 
Àvñ
 + 1);

244 
	}
}

247 
	$dump_œn_åì
(
ã°_ˇ£
 *
tc
, 
œn
 *œn, 
Àvñ
)

249 
i
;

251 i‡(
œn
->
ªached
) {

254 
œn
->
ªached
 = 
åue
;

255 
i
 = 0; i < 
Àvñ
; i++) {

256 
	`¥ötf
("\t");

258 
	`¥ötf
("%s\n", 
œn
->
«me
);

259 
i
 = 0; i < 
œn
->
n_c⁄ns
; i++) {

260 
bridge
 *
b
 = 
œn
->
c⁄ns
[
i
].bridge;

261 
	`dump_bridge_åì
(
tc
, 
b
, 
Àvñ
 + 1);

263 
	}
}

266 
	$åì
(
ã°_ˇ£
 *
tc
)

268 
i
;

270 
i
 = 0; i < 
tc
->
n_bridges
; i++) {

271 
bridge
 *
b
 = 
tc
->
bridges
[
i
];

272 
b
->
ªached
 = 
Ál£
;

274 
i
 = 0; i < 
tc
->
n_œns
; i++) {

275 
œn
 *œ¿
tc
->
œns
[
i
];

276 
œn
->
ªached
 = 
Ál£
;

278 
i
 = 0; i < 
tc
->
n_bridges
; i++) {

279 
bridge
 *
b
 = 
tc
->
bridges
[
i
];

280 
°p
 *°∞
b
->stp;

281 i‡(
	`°p_is_roŸ_bridge
(
°p
)) {

282 
	`dump_bridge_åì
(
tc
, 
b
, 0);

285 
	}
}

288 
	$simuœã
(
ã°_ˇ£
 *
tc
, 
gønuœrôy
)

290 
time
;

292 
time
 = 0;Åimê< 1000 * 180;Åimê+
gønuœrôy
) {

293 
round_åùs
;

294 
i
;

296 
i
 = 0; i < 
tc
->
n_bridges
; i++) {

297 
	`°p_tick
(
tc
->
bridges
[
i
]->
°p
, 
gønuœrôy
);

299 
round_åùs
 = 0;Ñound_åù†< 
gønuœrôy
;Ñound_trips++) {

300 
boﬁ
 
™y
 = 
Ál£
;

301 
i
 = 0; i < 
tc
->
n_bridges
; i++) {

302 
bridge
 *
b
 = 
tc
->
bridges
[
i
];

303 ; 
b
->
rxq_èû
 !b->
rxq_hód
; b->rxq_tail++) {

304 
bpdu
 *bpdu = &
b
->
rxq
[b->
rxq_èû
 % 
RXQ_SIZE
];

305 
	`°p_ª˚ived_bpdu
(
	`°p_gë_p‹t
(
b
->
°p
, 
bpdu
->
p‹t_no
),

306 
bpdu
->
d©a
, bpdu->
size
);

307 
	`‰ì
(
bpdu
->
d©a
);

308 
™y
 = 
åue
;

311 i‡(!
™y
) {

316 
	}
}

319 
	$îr
(c⁄° *
mesßge
, ...)

320 
	$PRINTF_FORMAT
(1, 2)

321 
NO_RETURN
;

324 
	$îr
(c⁄° *
mesßge
, ...)

326 
va_li°
 
¨gs
;

328 
	`Ârötf
(
°dîr
, "%s:%d:%td: ", 
fûe_«me
, 
löe_numbî
, 
pos
 - 
löe
);

329 
	`va_°¨t
(
¨gs
, 
mesßge
);

330 
	`vÂrötf
(
°dîr
, 
mesßge
, 
¨gs
);

331 
	`va_íd
(
¨gs
);

332 
	`putc
('\n', 
°dîr
);

334 
	`exô
(
EXIT_FAILURE
);

335 
	}
}

338 
	$w¨n
(c⁄° *
mesßge
, ...)

339 
	`PRINTF_FORMAT
(1, 2);

342 
	$w¨n
(c⁄° *
mesßge
, ...)

344 
va_li°
 
¨gs
;

346 
	`Ârötf
(
°dîr
, "%s:%d: ", 
fûe_«me
, 
löe_numbî
);

347 
	`va_°¨t
(
¨gs
, 
mesßge
);

348 
	`vÂrötf
(
°dîr
, 
mesßge
, 
¨gs
);

349 
	`va_íd
(
¨gs
);

350 
	`putc
('\n', 
°dîr
);

352 
n_w¨nögs
++;

353 
	}
}

355 
boﬁ


356 
	$gë_tokí
()

358 *
°¨t
;

360 
	`is•a˚
((Ë*
pos
)) {

361 
pos
++;

363 i‡(*
pos
 == '\0') {

364 
	`‰ì
(
tokí
);

365 
tokí
 = 
NULL
;

366  
Ál£
;

369 
°¨t
 = 
pos
;

370 i‡(
	`ißÕha
((Ë*
pos
)) {

371 
	`ißÕha
((Ë*++
pos
)) {

374 } i‡(
	`isdigô
((Ë*
pos
)) {

375 i‡(*
pos
 == '0' && (pos[1] == 'x' ||Öos[1] == 'X')) {

376 
pos
 += 2;

377 
	`isxdigô
((Ë*
pos
)) {

378 
pos
++;

381 
	`isdigô
((Ë*++
pos
)) {

386 
pos
++;

389 
	`‰ì
(
tokí
);

390 
tokí
 = 
	`xmemdup0
(
°¨t
, 
pos
 - start);

391  
åue
;

392 
	}
}

394 
boﬁ


395 
	$gë_öt
(*
öç
)

397 *
ßve_pos
 = 
pos
;

398 i‡(
tokí
 && 
	`isdigô
(() *token)) {

399 *
öç
 = 
	`°πﬁ
(
tokí
, 
NULL
, 0);

400 
	`gë_tokí
();

401  
åue
;

403 
pos
 = 
ßve_pos
;

404  
Ál£
;

406 
	}
}

408 
boﬁ


409 
	$m©ch
(c⁄° *
w™t
)

411 i‡(
tokí
 && !
	`°rcmp
(
w™t
,Åoken)) {

412 
	`gë_tokí
();

413  
åue
;

415  
Ál£
;

417 
	}
}

420 
	$mu°_gë_öt
()

422 
x
;

423 i‡(!
	`gë_öt
(&
x
)) {

424 
	`îr
("expected integer");

426  
x
;

427 
	}
}

430 
	$mu°_m©ch
(c⁄° *
w™t
)

432 i‡(!
	`m©ch
(
w™t
)) {

433 
	`îr
("ex≥˘ed \"%s\"", 
w™t
);

435 
	}
}

438 
	$maö
(
¨gc
, *
¨gv
[])

440 
ã°_ˇ£
 *
tc
;

441 
FILE
 *
öput_fûe
;

442 
i
;

444 
	`vlog_£t_∑âîn
(
VLF_CONSOLE
, "%c|%p|%m");

445 
	`vlog_£t_Àvñs
(
NULL
, 
VLF_SYSLOG
, 
VLL_OFF
);

447 i‡(
¨gc
 != 2) {

448 
	`ovs_Áèl
(0, "usage:Åest-stp INPUT.STP\n");

450 
fûe_«me
 = 
¨gv
[1];

452 
öput_fûe
 = 
	`f›í
(
fûe_«me
, "r");

453 i‡(!
öput_fûe
) {

454 
	`ovs_Áèl
(
î∫o
, "îr‹ o≥nög \"%s\"", 
fûe_«me
);

457 
tc
 = 
	`√w_ã°_ˇ£
();

458 
i
 = 0; i < 26; i++) {

459 
«me
[2];

460 
«me
[0] = 'a' + 
i
;

461 
«me
[1] = '\0';

462 
	`√w_œn
(
tc
, 
«me
);

465 
löe_numbî
 = 1; 
	`fgës
(
löe
, Üöe, 
öput_fûe
);

466 
löe_numbî
++)

468 *
√wlöe
, *
hash
;

470 
√wlöe
 = 
	`°rchr
(
löe
, '\n');

471 i‡(
√wlöe
) {

472 *
√wlöe
 = '\0';

474 
hash
 = 
	`°rchr
(
löe
, '#');

475 i‡(
hash
) {

476 *
hash
 = '\0';

479 
pos
 = 
löe
;

480 i‡(!
	`gë_tokí
()) {

483 i‡(
	`m©ch
("bridge")) {

484 
bridge
 *bridge;

485 
bridge_no
, 
p‹t_no
;

487 
bridge_no
 = 
	`mu°_gë_öt
();

488 i‡(
bridge_no
 < 
tc
->
n_bridges
) {

489 
bridge
 = 
tc
->
bridges
[
bridge_no
];

490 } i‡(
bridge_no
 =
tc
->
n_bridges
) {

491 
bridge
 = 
	`√w_bridge
(
tc
, 
	`mu°_gë_öt
());

493 
	`îr
("bridges must beÇumbered consecutively from 0");

495 i‡(
	`m©ch
("^")) {

496 
	`°p_£t_bridge_¥i‹ôy
(
bridge
->
°p
, 
	`mu°_gë_öt
());

499 i‡(
	`m©ch
("=")) {

500 
p‹t_no
 = 0;Ö‹t_nÿ< 
STP_MAX_PORTS
;Öort_no++) {

501 
°p_p‹t
 *
p
 = 
	`°p_gë_p‹t
(
bridge
->
°p
, 
p‹t_no
);

502 i‡(!
tokí
 || 
	`m©ch
("X")) {

503 
	`°p_p‹t_dißbÀ
(
p
);

504 } i‡(
	`m©ch
("_")) {

507 
œn
 *lan;

508 
∑th_co°
;

510 i‡(!
	`°rcmp
(
tokí
, "0")) {

511 
œn
 = 
NULL
;

512 } i‡(
	`°æí
(
tokí
) == 1

513 && 
	`i¶owî
(()*
tokí
)) {

514 
œn
 = 
tc
->
œns
[*
tokí
 - 'a'];

516 
	`îr
("%s isÇotá valid LANÇame "

517 "(0 o∏®lowîˇ£Üëãr)", 
tokí
);

519 
	`gë_tokí
();

521 
∑th_co°
 = 
	`m©ch
(":"Ë? 
	`mu°_gë_öt
() : 10;

522 i‡(
p‹t_no
 < 
bridge
->
n_p‹ts
) {

523 
	`°p_p‹t_£t_∑th_co°
(
p
, 
∑th_co°
);

524 
	`°p_p‹t_íabÀ
(
p
);

525 
	`ªc⁄√˘_p‹t
(
bridge
, 
p‹t_no
, 
œn
);

526 } i‡(
p‹t_no
 =
bridge
->
n_p‹ts
) {

527 
	`√w_p‹t
(
bridge
, 
œn
, 
∑th_co°
);

529 
	`îr
("ports must beÇumbered consecutively");

531 i‡(
	`m©ch
("^")) {

532 
	`°p_p‹t_£t_¥i‹ôy
(
p
, 
	`mu°_gë_öt
());

537 } i‡(
	`m©ch
("run")) {

538 
	`simuœã
(
tc
, 
	`mu°_gë_öt
());

539 } i‡(
	`m©ch
("dump")) {

540 
	`dump
(
tc
);

541 } i‡(
	`m©ch
("tree")) {

542 
	`åì
(
tc
);

543 } i‡(
	`m©ch
("check")) {

544 
bridge
 *
b
;

545 
°p
 *stp;

546 
bridge_no
, 
p‹t_no
;

548 
bridge_no
 = 
	`mu°_gë_öt
();

549 i‡(
bridge_no
 >
tc
->
n_bridges
) {

550 
	`îr
("nÿbridgênumbîed %d", 
bridge_no
);

552 
b
 = 
tc
->
bridges
[
bridge_no
];

553 
°p
 = 
b
->stp;

555 
	`mu°_m©ch
("=");

557 i‡(
	`m©ch
("rootid")) {

558 
uöt64_t
 
roŸid
;

559 
	`mu°_m©ch
(":");

560 
roŸid
 = 
	`mu°_gë_öt
();

561 i‡(
	`m©ch
("^")) {

562 
roŸid
 |(
uöt64_t
Ë
	`mu°_gë_öt
() << 48;

564 
roŸid
 |
	`UINT64_C
(0x8000) << 48;

566 i‡(
	`°p_gë_desig«ãd_roŸ
(
°p
Ë!
roŸid
) {

567 
	`w¨n
("%s:ÑoŸ %"
PRIx64
",Çot %"PRIx64,

568 
	`°p_gë_«me
(
°p
), 
	`°p_gë_desig«ãd_roŸ
(stp),

569 
roŸid
);

573 i‡(
	`m©ch
("root")) {

574 i‡(
	`°p_gë_roŸ_∑th_co°
(
°p
)) {

575 
	`w¨n
("%s:ÑootÖath cost ofÑoot is %u but should be 0",

576 
	`°p_gë_«me
(
°p
), 
	`°p_gë_roŸ_∑th_co°
(stp));

578 i‡(!
	`°p_is_roŸ_bridge
(
°p
)) {

579 
	`w¨n
("%s:ÑoŸ i†%"
PRIx64
",Çot %"PRIx64,

580 
	`°p_gë_«me
(
°p
),

581 
	`°p_gë_desig«ãd_roŸ
(
°p
), 
	`°p_gë_bridge_id
(stp));

583 
p‹t_no
 = 0;Ö‹t_nÿ< 
b
->
n_p‹ts
;Öort_no++) {

584 
°p_p‹t
 *
p
 = 
	`°p_gë_p‹t
(
°p
, 
p‹t_no
);

585 
°p_°©e
 
°©e
 = 
	`°p_p‹t_gë_°©e
(
p
);

586 i‡(!(
°©e
 & (
STP_DISABLED
 | 
STP_FORWARDING
))) {

587 
	`w¨n
("%s:ÑootÖort %d in state %s",

588 
	`°p_gë_«me
(
b
->
°p
), 
p‹t_no
,

589 
	`°p_°©e_«me
(
°©e
));

593 
p‹t_no
 = 0;Ö‹t_nÿ< 
STP_MAX_PORTS
;Öort_no++) {

594 
°p_p‹t
 *
p
 = 
	`°p_gë_p‹t
(
°p
, 
p‹t_no
);

595 
°p_°©e
 
°©e
;

596 i‡(
tokí
 =
NULL
 || 
	`m©ch
("D")) {

597 
°©e
 = 
STP_DISABLED
;

598 } i‡(
	`m©ch
("B")) {

599 
°©e
 = 
STP_BLOCKING
;

600 } i‡(
	`m©ch
("Li")) {

601 
°©e
 = 
STP_LISTENING
;

602 } i‡(
	`m©ch
("Le")) {

603 
°©e
 = 
STP_LEARNING
;

604 } i‡(
	`m©ch
("F")) {

605 
°©e
 = 
STP_FORWARDING
;

606 } i‡(
	`m©ch
("_")) {

609 
	`îr
("unknow¿p‹à°©ê%s", 
tokí
);

611 i‡(
	`°p_p‹t_gë_°©e
(
p
Ë!
°©e
) {

612 
	`w¨n
("%sÖort %d: state is %s but should be %s",

613 
	`°p_gë_«me
(
°p
), 
p‹t_no
,

614 
	`°p_°©e_«me
(
	`°p_p‹t_gë_°©e
(
p
)),

615 
	`°p_°©e_«me
(
°©e
));

617 i‡(
°©e
 =
STP_FORWARDING
) {

618 
°p_p‹t
 *
roŸ_p‹t
 = 
	`°p_gë_roŸ_p‹t
(
°p
);

619 i‡(
	`m©ch
(":")) {

620 
roŸ_∑th_co°
 = 
	`mu°_gë_öt
();

621 i‡(
p
 !
roŸ_p‹t
) {

622 
	`w¨n
("%s:Öort %d isÇotÅheÑootÖort",

623 
	`°p_gë_«me
(
°p
), 
p‹t_no
);

624 i‡(!
roŸ_p‹t
) {

625 
	`w¨n
("%s: (there isÇoÑootÖort)",

626 
	`°p_gë_«me
(
°p
));

628 
	`w¨n
("%s: (port %d isÅheÑootÖort)",

629 
	`°p_gë_«me
(
°p
),

630 
	`°p_p‹t_no
(
roŸ_p‹t
));

632 } i‡(
roŸ_∑th_co°


633 !
	`°p_gë_roŸ_∑th_co°
(
°p
)) {

634 
	`w¨n
("%s:ÑootÖath cost is %u, should be %d",

635 
	`°p_gë_«me
(
°p
),

636 
	`°p_gë_roŸ_∑th_co°
(
°p
),

637 
roŸ_∑th_co°
);

639 } i‡(
p
 =
roŸ_p‹t
) {

640 
	`w¨n
("%s:Öort %d isÅheÑootÖort but "

642 
	`°p_gë_«me
(
°p
), 
p‹t_no
);

647 i‡(
n_w¨nögs
) {

648 
	`exô
(
EXIT_FAILURE
);

651 i‡(
	`gë_tokí
()) {

652 
	`îr
("trailing garbage onÜine");

655 
	`‰ì
(
tokí
);

657 
i
 = 0; i < 
tc
->
n_œns
; i++) {

658 
œn
 *œ¿
tc
->
œns
[
i
];

659 
	`‰ì
(
	`CONST_CAST
(*, 
œn
->
«me
));

660 
	`‰ì
(
œn
);

662 
i
 = 0; i < 
tc
->
n_bridges
; i++) {

663 
bridge
 *bridgê
tc
->
bridges
[
i
];

664 
	`°p_de°roy
(
bridge
->
°p
);

665 
	`‰ì
(
bridge
);

667 
	`‰ì
(
tc
);

670 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/tests/test-strtok_r.c

17 
	~<c⁄fig.h
>

18 
	~<°dio.h
>

19 
	~<°rög.h
>

29 
	$maö
()

31 
°rög
[] = ":::";

32 *
ßve_±r
 = (*) 0xc0ffee;

33 *
tokí1
, *
tokí2
;

34 
tokí1
 = 
	`°πok_r
(
°rög
, ":", &
ßve_±r
);

35 
tokí2
 = 
	`°πok_r
(
NULL
, ":", &
ßve_±r
);

36 
	`¥ötf
 ("%†%s\n", 
tokí1
 ?Åokí1 : "NULL", 
tokí2
 ?Åoken2 : "NULL");

38 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/tests/test-timeval.c

17 
	~<c⁄fig.h
>

19 
	~"timevÆ.h
"

21 
	~<î∫o.h
>

22 
	~<°dio.h
>

23 
	~<°dlib.h
>

24 
	~<sys/time.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<uni°d.h
>

28 
	~"comm™d-löe.h
"

29 
	~"d´m⁄.h
"

30 
	~"utû.h
"

32 #unde‡
NDEBUG


33 
	~<as£π.h
>

36 
	$gëtimeofday_ö_m£c
()

38 
timevÆ
 
tv
;

40 
	`xgëtimeofday
(&
tv
);

41  
	`timevÆ_to_m£c
(&
tv
);

42 
	}
}

45 
	$do_ã°
()

51 
°¨t_time_m£c
, 
°¨t_time_wÆl
;

52 
°¨t_gtod
;

54 
°¨t_time_m£c
 = 
	`time_m£c
();

55 
°¨t_time_wÆl
 = 
	`time_wÆl_m£c
();

56 
°¨t_gtod
 = 
	`gëtimeofday_ö_m£c
();

60 
timevÆ
 
timeout
;

61 
ªtvÆ
;

63 
timeout
.
tv_£c
 = 1;

64 
timeout
.
tv_u£c
 = 0;

65 
ªtvÆ
 = 
	`£À˘
(0, 
NULL
, NULL, NULL, &
timeout
);

66 i‡(
ªtvÆ
 != -1) {

67 
	`ovs_Áèl
(0, "£À˘Ñëu∫ed %d", 
ªtvÆ
);

68 } i‡(
î∫o
 !
EINTR
) {

69 
	`ovs_Áèl
(
î∫o
, "selectÑeported unexpectedÉrror");

72 i‡(
	`gëtimeofday_ö_m£c
(Ë- 
°¨t_gtod
 >
TIME_UPDATE_INTERVAL
) {

76 
	`as£π
(
	`time_m£c
(Ë- 
°¨t_time_m£c
 >
TIME_UPDATE_INTERVAL
 - 1);

77 
	`as£π
(
	`time_wÆl_m£c
(Ë- 
°¨t_time_wÆl
 >=

78 
TIME_UPDATE_INTERVAL
 - 1);

82 
	}
}

85 
	$ußge
()

87 
	`ovs_Áèl
(0, "usage: %s TEST, where TEST is \"plain\" or \"daemon\"",

88 
¥ogøm_«me
);

89 
	}
}

92 
	$maö
(
¨gc
, *
¨gv
[])

94 
	`¥o˘ôÀ_öô
(
¨gc
, 
¨gv
);

95 
	`£t_¥ogøm_«me
(
¨gv
[0]);

97 i‡(
¨gc
 != 2) {

98 
	`ußge
();

99 } i‡(!
	`°rcmp
(
¨gv
[1], "plain")) {

102 i‡(!
CACHE_TIME
) {

103 
	`exô
 (77);

106 
	`do_ã°
();

107 } i‡(!
	`°rcmp
(
¨gv
[1], "daemon")) {

110 
cwd
[1024], *
pidfûe
;

111 
FILE
 *
suc˚ss
;

113 i‡(!
CACHE_TIME
) {

114 
	`exô
 (77);

117 
	`as£π
(
	`gëcwd
(
cwd
,  cwd) == cwd);

119 
	`u∆ök
("test-timeval.success");

122 
	`£t_dëach
();

123 
pidfûe
 = 
	`xa•rötf
("%s/ã°-timevÆ.pid", 
cwd
);

124 
	`£t_pidfûe
(
pidfûe
);

125 
	`‰ì
(
pidfûe
);

126 
	`£t_no_chdú
();

127 
	`d´m⁄ize
();

130 
	`do_ã°
();

134 
suc˚ss
 = 
	`f›í
("test-timeval.success", "w");

135 i‡(!
suc˚ss
) {

136 
	`ovs_Áèl
(
î∫o
, "test-timeval.success: create failed");

138 
	`Ârötf
(
suc˚ss
, "success\n");

139 
	`f˛o£
(
suc˚ss
);

141 
	`ußge
();

145 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/tests/test-type-props.c

17 
	~<c⁄fig.h
>

18 
	~"ty≥-¥›s.h
"

19 
	~<öây≥s.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

24 
	#MUST_SUCCEED
(
EXPRESSION
) \

25 i‡(!(
EXPRESSION
)) { \

26 
	`Ârötf
(
°dîr
, "%s:%d: %s failed\n", \

27 
__FILE__
, 
__LINE__
, #EXPRESSION); \

28 
	`exô
(
EXIT_FAILURE
); \

29 }

	)

31 
	#TEST_TYPE
(
ty≥
, 
möimum
, 
maximum
, 
is_sig√d
) \

32 
	`MUST_SUCCEED
(
	`TYPE_IS_INTEGER
(
ty≥
)); \

33 
	`MUST_SUCCEED
(
	`TYPE_IS_SIGNED
(
ty≥
Ë=
is_sig√d
); \

34 
	`MUST_SUCCEED
(
	`TYPE_MAXIMUM
(
ty≥
Ë=
maximum
); \

35 
	`MUST_SUCCEED
(
	`TYPE_MINIMUM
(
ty≥
Ë=
möimum
); \

36 
	`•rötf
(
max_s
, "%"
PRIuMAX
, (
uötmax_t
Ë(
maximum
)); \

37 
	`MUST_SUCCEED
(
	`°æí
(
max_s
Ë<
	`INT_STRLEN
(
ty≥
)); \

38 
	`•rötf
(
mö_s
, "%"
PRIdMAX
, (
ötmax_t
Ë(
möimum
)); \

39 
	`MUST_SUCCEED
(
	`°æí
(
mö_s
Ë<
	`INT_STRLEN
(
ty≥
));

	)

42 
	$maö
 ()

44 
max_s
[128];

45 
mö_s
[128];

47 
	`TEST_TYPE
(, 
CHAR_MIN
, 
CHAR_MAX
, (CHAR_MIN < 0));

49 
	`TEST_TYPE
(sig√d , 
SCHAR_MIN
, 
SCHAR_MAX
, 1);

50 
	`TEST_TYPE
(, 
SHRT_MIN
, 
SHRT_MAX
, 1);

51 
	`TEST_TYPE
(, 
INT_MIN
, 
INT_MAX
, 1);

52 
	`TEST_TYPE
(, 
LONG_MIN
, 
LONG_MAX
, 1);

53 
	`TEST_TYPE
(, 
LLONG_MIN
, 
LLONG_MAX
, 1);

55 
	`TEST_TYPE
(, 0, 
UCHAR_MAX
, 0);

56 
	`TEST_TYPE
(, 0, 
USHRT_MAX
, 0);

57 
	`TEST_TYPE
(, 0, 
UINT_MAX
, 0);

58 
	`TEST_TYPE
(, 0, 
ULONG_MAX
, 0);

59 
	`TEST_TYPE
(, 0, 
ULLONG_MAX
, 0);

61 
	`MUST_SUCCEED
(!(
	`TYPE_IS_INTEGER
()));

62 
	`MUST_SUCCEED
(!(
	`TYPE_IS_INTEGER
()));

63 
	`MUST_SUCCEED
(!(
	`TYPE_IS_INTEGER
()));

66 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/tests/test-unix-socket.c

17 
	~<c⁄fig.h
>

19 
	~<î∫o.h
>

20 
	~<sig«l.h
>

21 
	~<uni°d.h
>

23 
	~"utû.h
"

24 
	~"sockë-utû.h
"

27 
	$maö
(
¨gc
, *
¨gv
[])

29 c⁄° *
sock«me1
;

30 c⁄° *
sock«me2
;

31 
sock1
, 
sock2
;

33 
	`£t_¥ogøm_«me
(
¨gv
[0]);

35 i‡(
¨gc
 != 2 &&árgc != 3) {

36 
	`ovs_Áèl
(0, "ußge: %†SOCKETNAME1 [SOCKETNAME2]", 
¨gv
[0]);

38 
sock«me1
 = 
¨gv
[1];

39 
sock«me2
 = 
¨gc
 > 2 ? 
¨gv
[2] : 
sock«me1
;

41 
	`sig«l
(
SIGALRM
, 
SIG_DFL
);

42 
	`Æ¨m
(5);

45 
sock1
 = 
	`make_unix_sockë
(
SOCK_STREAM
, 
Ál£
, 
sock«me1
, 
NULL
);

46 i‡(
sock1
 < 0) {

47 
	`ovs_Áèl
(-
sock1
, "%s: böd faûed", 
sock«me1
);

49 i‡(
	`li°í
(
sock1
, 1)) {

50 
	`ovs_Áèl
(
î∫o
, "%s:Üi°í faûed", 
sock«me1
);

55 
sock2
 = 
	`make_unix_sockë
(
SOCK_STREAM
, 
Ál£
, 
NULL
, 
sock«me2
);

56 i‡(
sock2
 < 0) {

57 
	`ovs_Áèl
(-
sock2
, "%s: c⁄√˘ faûed", 
sock«me2
);

60 
	`˛o£
(
sock1
);

61 
	`˛o£
(
sock2
);

64 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/tests/test-util.c

17 
	~<c⁄fig.h
>

19 
	~<öây≥s.h
>

20 
	~<limôs.h
>

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

24 
	~"byã-‹dî.h
"

25 
	~"comm™d-löe.h
"

26 
	~"øndom.h
"

27 
	~"utû.h
"

29 #unde‡
NDEBUG


30 
	~<as£π.h
>

33 
	$check_log_2_Êo‹
(
uöt32_t
 
x
, 
n
)

35 i‡(
	`log_2_Êo‹
(
x
Ë!
n
) {

36 
	`Ârötf
(
°dîr
, "log_2_Êo‹(%"
PRIu32
") is %d but should be %d\n",

37 
x
, 
	`log_2_Êo‹
(x), 
n
);

38 
	`ab‹t
();

40 
	}
}

43 
	$ã°_log_2_Êo‹
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

45 
n
;

47 
n
 = 0;Ç < 32;Ç++) {

49 
	`check_log_2_Êo‹
(1 << 
n
,Ç);

52 
	`check_log_2_Êo‹
((1 << 
n
) | ((1 <<Ç) - 1),Ç);

55 
	`check_log_2_Êo‹
((
	`øndom_uöt32
(Ë& ((1 << 
n
) - 1)) | (1 <<Ç),Ç);

59 
	}
}

62 
	$check_˘z
(
uöt32_t
 
x
, 
n
)

64 i‡(
	`˘z
(
x
Ë!
n
) {

65 
	`Ârötf
(
°dîr
, "˘z(%"
PRIu32
") is %d but should be %d\n",

66 
x
, 
	`˘z
(x), 
n
);

67 
	`ab‹t
();

69 
	}
}

72 
	$ã°_˘z
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

74 
n
;

76 
n
 = 0;Ç < 32;Ç++) {

78 
	`check_˘z
(1 << 
n
,Ç);

81 
	`check_˘z
(
UINT32_MAX
 << 
n
,Ç);

84 
	`check_˘z
((
	`øndom_uöt32
(Ë| 1Ë<< 
n
,Ç);

88 
	`check_˘z
(0, 32);

89 
	}
}

92 
	$shufÊe
(*
p
, 
size_t
 
n
)

94 ; 
n
 > 1;Ç--, 
p
++) {

95 *
q
 = &
p
[
	`ønd
(Ë% 
n
];

96 
tmp
 = *
p
;

97 *
p
 = *
q
;

98 *
q
 = 
tmp
;

100 
	}
}

103 
	$check_p›cou¡
(
uöt32_t
 
x
, 
n
)

105 i‡(
	`p›cou¡
(
x
Ë!
n
) {

106 
	`Ârötf
(
°dîr
, "p›cou¡(%#"
PRIx32
") is %d but should be %d\n",

107 
x
, 
	`p›cou¡
(x), 
n
);

108 
	`ab‹t
();

110 
	}
}

113 
	$ã°_p›cou¡
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

115 
bôs
[32];

116 
i
;

118 
i
 = 0; i < 
	`ARRAY_SIZE
(
bôs
); i++) {

119 
bôs
[
i
] = 1u << i;

122 
	`check_p›cou¡
(0, 0);

124 
i
 = 0; i < 1000; i++) {

125 
uöt32_t
 
x
 = 0;

126 
j
;

128 
	`shufÊe
(
bôs
, 
	`ARRAY_SIZE
(bits));

129 
j
 = 0; j < 32; j++) {

130 
x
 |
bôs
[
j
];

131 
	`check_p›cou¡
(
x
, 
j
 + 1);

133 
	`as£π
(
x
 =
UINT32_MAX
);

135 
	`shufÊe
(
bôs
, 
	`ARRAY_SIZE
(bits));

136 
j
 = 31; j >= 0; j--) {

137 
x
 &~
bôs
[
j
];

138 
	`check_p›cou¡
(
x
, 
j
);

140 
	`as£π
(
x
 == 0);

142 
	}
}

146 
	$sum_of_squ¨es
(
n
)

148  
n
 * (n + 1) * (2 *Ç + 1) / 6;

149 
	}
}

152 
	$ã°_bôwi£_c›y
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

154 
n_lo›s
;

155 
§c_ofs
;

156 
d°_ofs
;

157 
n_bôs
;

159 
n_lo›s
 = 0;

160 
n_bôs
 = 0;Ç_bits <= 64;Ç_bits++) {

161 
§c_ofs
 = 0; src_of†< 64 - 
n_bôs
; src_ofs++) {

162 
d°_ofs
 = 0; d°_of†< 64 - 
n_bôs
; dst_ofs++) {

163 
ovs_be64
 
§c
 = 
	`ht⁄Œ
(
	`øndom_uöt64
());

164 
ovs_be64
 
d°
 = 
	`ht⁄Œ
(
	`øndom_uöt64
());

165 
ovs_be64
 
‹ig_d°
 = 
d°
;

166 
ovs_be64
 
ex≥˘
;

168 i‡(
n_bôs
 == 64) {

169 
ex≥˘
 = 
d°
;

171 
uöt64_t
 
mask
 = (
	`UINT64_C
(1Ë<< 
n_bôs
) - 1;

172 
ex≥˘
 = 
‹ig_d°
 & ~
	`ht⁄Œ
(
mask
 << 
d°_ofs
);

173 
ex≥˘
 |
	`ht⁄Œ
(((
	`¡ohŒ
(
§c
Ë>> 
§c_ofs
Ë& 
mask
)

174 << 
d°_ofs
);

177 
	`bôwi£_c›y
(&
§c
,  src, 
§c_ofs
,

178 &
d°
,  d°, 
d°_ofs
,

179 
n_bôs
);

180 i‡(
ex≥˘
 !
d°
) {

181 
	`Ârötf
(
°dîr
,"c›y_bôs(0x%016"
PRIx64
",8,%d, "

182 "0x%016"
PRIx64
",8,%d, %d) yielded 0x%016"PRIx64" "

183 "ö°ód o‡thêex≥˘ed 0x%016"
PRIx64
"\n",

184 
	`¡ohŒ
(
§c
), 
§c_ofs
,

185 
	`¡ohŒ
(
‹ig_d°
), 
d°_ofs
,

186 
n_bôs
,

187 
	`¡ohŒ
(
d°
),ÇtohŒ(
ex≥˘
));

188 
	`ab‹t
();

191 
n_lo›s
++;

196 i‡(
n_lo›s
 !
	`sum_of_squ¨es
(64)) {

197 
	`ab‹t
();

199 
	}
}

202 
	$ã°_bôwi£_zîo
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

204 
n_lo›s
;

205 
d°_ofs
;

206 
n_bôs
;

208 
n_lo›s
 = 0;

209 
n_bôs
 = 0;Ç_bits <= 64;Ç_bits++) {

210 
d°_ofs
 = 0; d°_of†< 64 - 
n_bôs
; dst_ofs++) {

211 
ovs_be64
 
d°
 = 
	`ht⁄Œ
(
	`øndom_uöt64
());

212 
ovs_be64
 
‹ig_d°
 = 
d°
;

213 
ovs_be64
 
ex≥˘
;

215 i‡(
n_bôs
 == 64) {

216 
ex≥˘
 = 
	`ht⁄Œ
(0);

218 
uöt64_t
 
mask
 = (
	`UINT64_C
(1Ë<< 
n_bôs
) - 1;

219 
ex≥˘
 = 
‹ig_d°
 & ~
	`ht⁄Œ
(
mask
 << 
d°_ofs
);

222 
	`bôwi£_zîo
(&
d°
,  d°, 
d°_ofs
, 
n_bôs
);

223 i‡(
ex≥˘
 !
d°
) {

224 
	`Ârötf
(
°dîr
,"bôwi£_zîo(0x%016"
PRIx64
",8,%d, %d) "

225 "yõlded 0x%016"
PRIx64
" "

226 "ö°ód o‡thêex≥˘ed 0x%016"
PRIx64
"\n",

227 
	`¡ohŒ
(
‹ig_d°
), 
d°_ofs
,

228 
n_bôs
,

229 
	`¡ohŒ
(
d°
),ÇtohŒ(
ex≥˘
));

230 
	`ab‹t
();

233 
n_lo›s
++;

237 i‡(
n_lo›s
 != 64 * (64 + 1) / 2) {

238 
	`ab‹t
();

240 
	}
}

243 
	$ã°_bôwi£_⁄e
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

245 
n_lo›s
;

246 
d°_ofs
;

247 
n_bôs
;

249 
n_lo›s
 = 0;

250 
n_bôs
 = 0;Ç_bits <= 64;Ç_bits++) {

251 
d°_ofs
 = 0; d°_of†< 64 - 
n_bôs
; dst_ofs++) {

252 
ovs_be64
 
d°
 = 
	`ht⁄Œ
(
	`øndom_uöt64
());

253 
ovs_be64
 
‹ig_d°
 = 
d°
;

254 
ovs_be64
 
ex≥˘
;

256 i‡(
n_bôs
 == 64) {

257 
ex≥˘
 = 
	`ht⁄Œ
(
UINT64_MAX
);

259 
uöt64_t
 
mask
 = (
	`UINT64_C
(1Ë<< 
n_bôs
) - 1;

260 
ex≥˘
 = 
‹ig_d°
 | 
	`ht⁄Œ
(
mask
 << 
d°_ofs
);

263 
	`bôwi£_⁄e
(&
d°
,  d°, 
d°_ofs
, 
n_bôs
);

264 i‡(
ex≥˘
 !
d°
) {

265 
	`Ârötf
(
°dîr
,"bôwi£_⁄e(0x%016"
PRIx64
",8,%d, %d) "

266 "yõlded 0x%016"
PRIx64
" "

267 "ö°ód o‡thêex≥˘ed 0x%016"
PRIx64
"\n",

268 
	`¡ohŒ
(
‹ig_d°
), 
d°_ofs
,

269 
n_bôs
,

270 
	`¡ohŒ
(
d°
),ÇtohŒ(
ex≥˘
));

271 
	`ab‹t
();

274 
n_lo›s
++;

278 i‡(
n_lo›s
 != 64 * (64 + 1) / 2) {

279 
	`ab‹t
();

281 
	}
}

284 
	$ã°_bôwi£_is_Æl_zîos
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

286 
n_lo›s
;

288 
n_lo›s
 = 0;Ç_loops < 100;Ç_loops++) {

289 
ovs_be64
 
x
 = 
	`ht⁄Œ
(0);

290 
i
;

292 
i
 = 0; i < 64; i++) {

293 
ovs_be64
 
bô
;

294 
ofs
, 
n
;

298 
bô
 = 
	`ht⁄Œ
(
	`UINT64_C
(1Ë<< (
	`øndom_uöt32
() % 64));

299 } 
x
 & 
bô
);

300 
x
 |
bô
;

302 
ofs
 = 0; ofs < 64; ofs++) {

303 
n
 = 0;Ç <64 - 
ofs
;Ç++) {

304 
boﬁ
 
ex≥˘
;

305 
boﬁ
 
™swî
;

307 
ex≥˘
 = (
n
 == 64

308 ? 
x
 == 0

309 : !(
x
 & 
	`ht⁄Œ
(((
	`UINT64_C
(1Ë<< 
n
) - 1)

310 << 
ofs
)));

311 
™swî
 = 
	`bôwi£_is_Æl_zîos
(&
x
,  x, 
ofs
, 
n
);

312 i‡(
ex≥˘
 !
™swî
) {

313 
	`Ârötf
(
°dîr
,

314 "bôwi£_is_Æl_zîos(0x%016"
PRIx64
",8,%d,%d "

316 
	`¡ohŒ
(
x
), 
ofs
, 
n
,

317 
™swî
 ? "true" : "false",

318 
ex≥˘
 ? "true" : "false");

319 
	`ab‹t
();

325 
	}
}

328 
	$ã°_fﬁlow_symlöks
(
¨gc
, *
¨gv
[])

330 
i
;

332 
i
 = 1; i < 
¨gc
; i++) {

333 *
èrgë
 = 
	`fﬁlow_symlöks
(
¨gv
[
i
]);

334 
	`puts
(
èrgë
);

335 
	`‰ì
(
èrgë
);

337 
	}
}

339 c⁄° 
comm™d
 
	gcomm™ds
[] = {

340 {"˘z", 0, 0, 
ã°_˘z
},

341 {"p›cou¡", 0, 0, 
ã°_p›cou¡
},

342 {"log_2_Êo‹", 0, 0, 
ã°_log_2_Êo‹
},

343 {"bôwi£_c›y", 0, 0, 
ã°_bôwi£_c›y
},

344 {"bôwi£_zîo", 0, 0, 
ã°_bôwi£_zîo
},

345 {"bôwi£_⁄e", 0, 0, 
ã°_bôwi£_⁄e
},

346 {"bôwi£_is_Æl_zîos", 0, 0, 
ã°_bôwi£_is_Æl_zîos
},

347 {"fﬁlow-symlöks", 1, 
INT_MAX
, 
ã°_fﬁlow_symlöks
},

348 {
NULL
, 0, 0, NULL},

352 
	$maö
(
¨gc
, *
¨gv
[])

354 
	`£t_¥ogøm_«me
(
¨gv
[0]);

355 
	`run_comm™d
(
¨gc
 - 1, 
¨gv
 + 1, 
comm™ds
);

357 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/tests/test-uuid.c

17 
	~<c⁄fig.h
>

18 
	~"uuid.h
"

19 
	~<°dio.h
>

22 
	$maö
(
¨gc
, *
¨gv
[])

24 
uuid
 uuid;

26 i‡(
¨gc
 == 1) {

27 
	`uuid_gíî©e
(&
uuid
);

28 } i‡(
¨gc
 == 2) {

29 i‡(!
	`uuid_‰om_°rög
(&
uuid
, 
¨gv
[1])) {

30 
	`ovs_Áèl
(0, "\"%s\" i†nŸá vÆid UUID", 
¨gv
[1]);

33 
	`ovs_Áèl
(0, "ußge: %†[UUID]", 
¨gv
[0]);

36 
	`¥ötf
(
UUID_FMT
"\n", 
	`UUID_ARGS
(&
uuid
));

39 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/tests/test-vconn.c

17 
	~<c⁄fig.h
>

18 
	~"vc⁄n.h
"

19 
	~<î∫o.h
>

20 
	~<öây≥s.h
>

21 
	~<sig«l.h
>

22 
	~<°dlib.h
>

23 
	~<uni°d.h
>

24 
	~"comm™d-löe.h
"

25 
	~"oÂ-msgs.h
"

26 
	~"oÂ-utû.h
"

27 
	~"oÂbuf.h
"

28 
	~"›íÊow/›íÊow.h
"

29 
	~"pﬁl-lo›.h
"

30 
	~"sockë-utû.h
"

31 
	~"°ªam.h
"

32 
	~"°ªam-s¶.h
"

33 
	~"timevÆ.h
"

34 
	~"utû.h
"

35 
	~"vlog.h
"

37 #unde‡
NDEBUG


38 
	~<as£π.h
>

40 
	sÁke_pvc⁄n
 {

41 c⁄° *
	mty≥
;

42 *
	mpvc⁄n_«me
;

43 *
	mvc⁄n_«me
;

44 
p°ªam
 *
	mp°ªam
;

48 
	$check
(
a
, 
b
, c⁄° *
as
, c⁄° *
fûe
, 
löe
)

50 i‡(
a
 !
b
) {

51 
	`ovs_Áèl
(0, "%s:%d: %†i†%d buàshould bê%d", 
fûe
, 
löe
, 
as
, 
a
, 
b
);

53 
	}
}

56 
	#CHECK
(
A
, 
B
Ë
	`check
(A, B, #A, 
__FILE__
, 
__LINE__
)

	)

59 
	$check_î∫o
(
a
, 
b
, c⁄° *
as
, c⁄° *
fûe
, 
löe
)

61 i‡(
a
 !
b
) {

62 *
°r_b
 = 
	`°rdup
(
	`°ªº‹
(
	`abs
(
b
)));

63 
	`ovs_Áèl
(0, "%s:%d: %s is %d (%s) but should be %d (%s)",

64 
fûe
, 
löe
, 
as
, 
a
, 
	`°ªº‹
(
	`abs
◊)), 
b
, 
°r_b
);

66 
	}
}

68 
	#CHECK_ERRNO
(
A
, 
B
Ë
	`check_î∫o
(A, B, #A, 
__FILE__
, 
__LINE__
)

	)

71 
	$Âv_¸óã
(c⁄° *
ty≥
, 
Áke_pvc⁄n
 *
Âv
)

73 #ifde‡
HAVE_OPENSSL


74 i‡(!
	`°rcmp
(
ty≥
, "ssl")) {

75 
	`°ªam_s¶_£t_¥iv©e_key_fûe
("testpki-privkey.pem");

76 
	`°ªam_s¶_£t_˚πifiˇã_fûe
("testpki-cert.pem");

77 
	`°ªam_s¶_£t_ˇ_˚π_fûe
("ã°pki-ˇ˚π.≥m", 
Ál£
);

81 
Âv
->
ty≥
 =Åype;

82 i‡(!
	`°rcmp
(
ty≥
, "unix")) {

83 
unix_cou¡
 = 0;

84 *
böd_∑th
;

86 
böd_∑th
 = 
	`xa•rötf
("Áke-pvc⁄n.%d", 
unix_cou¡
++);

87 
Âv
->
pvc⁄n_«me
 = 
	`xa•rötf
("punix:%s", 
böd_∑th
);

88 
Âv
->
vc⁄n_«me
 = 
	`xa•rötf
("unix:%s", 
böd_∑th
);

89 
	`CHECK_ERRNO
(
	`p°ªam_›í
(
Âv
->
pvc⁄n_«me
, &Âv->
p°ªam
,

90 
DSCP_DEFAULT
), 0);

91 
	`‰ì
(
böd_∑th
);

92 } i‡(!
	`°rcmp
(
ty≥
, "tcp") || !strcmp(type, "ssl")) {

93 *
s
, *
p‹t
, *
ßve_±r
 = 
NULL
;

94 *
›í_«me
;

96 
›í_«me
 = 
	`xa•rötf
("p%s:0:127.0.0.1", 
ty≥
);

97 
	`CHECK_ERRNO
(
	`p°ªam_›í
(
›í_«me
, &
Âv
->
p°ªam
, 
DSCP_DEFAULT
), 0);

100 
s
 = 
	`x°rdup
(
	`p°ªam_gë_«me
(
Âv
->
p°ªam
));

101 
	`°πok_r
(
s
, ":", &
ßve_±r
);

102 
p‹t
 = 
	`°πok_r
(
NULL
, ":", &
ßve_±r
);

105 
Âv
->
pvc⁄n_«me
 = 
	`x°rdup
(
	`p°ªam_gë_«me
(Âv->
p°ªam
));

106 
Âv
->
vc⁄n_«me
 = 
	`xa•rötf
("%s:127.0.0.1:%s", 
ty≥
, 
p‹t
);

108 
	`‰ì
(
›í_«me
);

109 
	`‰ì
(
s
);

111 
	`ab‹t
();

113 
	}
}

115 
°ªam
 *

116 
	$Âv_ac˚±
(
Áke_pvc⁄n
 *
Âv
)

118 
°ªam
 *stream;

120 
	`CHECK_ERRNO
(
	`p°ªam_ac˚±_block
(
Âv
->
p°ªam
, &
°ªam
), 0);

122  
°ªam
;

123 
	}
}

126 
	$Âv_˛o£
(
Áke_pvc⁄n
 *
Âv
)

128 
	`p°ªam_˛o£
(
Âv
->
p°ªam
);

129 
Âv
->
p°ªam
 = 
NULL
;

130 
	}
}

133 
	$Âv_de°roy
(
Áke_pvc⁄n
 *
Âv
)

135 
	`Âv_˛o£
(
Âv
);

136 
	`‰ì
(
Âv
->
pvc⁄n_«me
);

137 
	`‰ì
(
Âv
->
vc⁄n_«me
);

138 
	}
}

143 
	$ã°_ªfu£_c⁄√˘i⁄
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

145 c⁄° *
ty≥
 = 
¨gv
[1];

146 
Áke_pvc⁄n
 
Âv
;

147 
vc⁄n
 *vconn;

148 
îr‹
;

150 
	`Âv_¸óã
(
ty≥
, &
Âv
);

151 
	`CHECK_ERRNO
(
	`vc⁄n_›í
(
Âv
.
vc⁄n_«me
, 
OFP10_VERSION
, &
vc⁄n
,

152 
DSCP_DEFAULT
), 0);

153 
	`Âv_˛o£
(&
Âv
);

154 
	`vc⁄n_run
(
vc⁄n
);

156 
îr‹
 = 
	`vc⁄n_c⁄√˘_block
(
vc⁄n
);

157 i‡(!
	`°rcmp
(
ty≥
, "tcp")) {

158 i‡(
îr‹
 !
ECONNRESET
 &&Éº‹ !
EPIPE
) {

159 
	`ovs_Áèl
(0, "unexpected vconn_connect()Ñeturn value %d (%s)",

160 
îr‹
, 
	`°ªº‹
(error));

162 } i‡(!
	`°rcmp
(
ty≥
, "unix")) {

163 
	`CHECK_ERRNO
(
îr‹
, 
EPIPE
);

164 } i‡(!
	`°rcmp
(
ty≥
, "ssl")) {

165 i‡(
îr‹
 !
EPROTO
 &&Éº‹ !
ECONNRESET
) {

166 
	`ovs_Áèl
(0, "unexpected vconn_connect()Ñeturn value %d (%s)",

167 
îr‹
, 
	`°ªº‹
(error));

170 
	`ovs_Áèl
(0, "övÆid c⁄√˘i⁄Åy≥ %s", 
ty≥
);

173 
	`vc⁄n_˛o£
(
vc⁄n
);

174 
	`Âv_de°roy
(&
Âv
);

175 
	}
}

181 
	$ã°_ac˚±_thí_˛o£
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

183 c⁄° *
ty≥
 = 
¨gv
[1];

184 
Áke_pvc⁄n
 
Âv
;

185 
vc⁄n
 *vconn;

186 
îr‹
;

188 
	`Âv_¸óã
(
ty≥
, &
Âv
);

189 
	`CHECK_ERRNO
(
	`vc⁄n_›í
(
Âv
.
vc⁄n_«me
, 
OFP10_VERSION
, &
vc⁄n
,

190 
DSCP_DEFAULT
), 0);

191 
	`vc⁄n_run
(
vc⁄n
);

192 
	`°ªam_˛o£
(
	`Âv_ac˚±
(&
Âv
));

193 
	`Âv_˛o£
(&
Âv
);

195 
îr‹
 = 
	`vc⁄n_c⁄√˘_block
(
vc⁄n
);

196 i‡(!
	`°rcmp
(
ty≥
, "tcp") || !strcmp(type, "unix")) {

197 i‡(
îr‹
 !
ECONNRESET
 &&Éº‹ !
EPIPE
) {

198 
	`ovs_Áèl
(0, "unexpected vconn_connect()Ñeturn value %d (%s)",

199 
îr‹
, 
	`°ªº‹
(error));

202 
	`CHECK_ERRNO
(
îr‹
, 
EPROTO
);

205 
	`vc⁄n_˛o£
(
vc⁄n
);

206 
	`Âv_de°roy
(&
Âv
);

207 
	}
}

213 
	$ã°_ªad_hñlo
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

215 c⁄° *
ty≥
 = 
¨gv
[1];

216 
Áke_pvc⁄n
 
Âv
;

217 
vc⁄n
 *vconn;

218 
°ªam
 *stream;

219 
îr‹
;

221 
	`Âv_¸óã
(
ty≥
, &
Âv
);

222 
	`CHECK_ERRNO
(
	`vc⁄n_›í
(
Âv
.
vc⁄n_«me
, 
OFP10_VERSION
, &
vc⁄n
,

223 
DSCP_DEFAULT
), 0);

224 
	`vc⁄n_run
(
vc⁄n
);

225 
°ªam
 = 
	`Âv_ac˚±
(&
Âv
);

226 
	`Âv_de°roy
(&
Âv
);

228 
oÂ_hódî
 
hñlo
;

229 
ªtvÆ
;

231 
ªtvÆ
 = 
	`°ªam_ªcv
(
°ªam
, &
hñlo
,  hello);

232 i‡(
ªtvÆ
 = 
hñlo
) {

233 
oÂøw
 
øw
;

235 
	`CHECK
(
hñlo
.
vîsi⁄
, 
OFP10_VERSION
);

236 
	`CHECK
(
	`oÂøw_decode_∑πül
(&
øw
, &
hñlo
,  hello), 0);

237 
	`CHECK
(
øw
, 
OFPRAW_OFPT_HELLO
);

238 
	`CHECK
(
	`¡ohs
(
hñlo
.
Àngth
),  hello);

241 
	`CHECK_ERRNO
(
ªtvÆ
, -
EAGAIN
);

244 
	`vc⁄n_run
(
vc⁄n
);

245 
	`CHECK_ERRNO
(
	`vc⁄n_c⁄√˘
(
vc⁄n
), 
EAGAIN
);

246 
	`vc⁄n_run_waô
(
vc⁄n
);

247 
	`vc⁄n_c⁄√˘_waô
(
vc⁄n
);

248 
	`°ªam_ªcv_waô
(
°ªam
);

249 
	`pﬁl_block
();

251 
	`°ªam_˛o£
(
°ªam
);

252 
îr‹
 = 
	`vc⁄n_c⁄√˘_block
(
vc⁄n
);

253 i‡(
îr‹
 !
ECONNRESET
 &&Éº‹ !
EPIPE
) {

254 
	`ovs_Áèl
(0, "unexpected vconn_connect()Ñeturn value %d (%s)",

255 
îr‹
, 
	`°ªº‹
(error));

257 
	`vc⁄n_˛o£
(
vc⁄n
);

258 
	}
}

265 
	$ã°_£nd_hñlo
(c⁄° *
ty≥
, c⁄° *
out
, 
size_t
 
out_size
,

266 
ex≥˘_c⁄√˘_îr‹
)

268 
Áke_pvc⁄n
 
Âv
;

269 
vc⁄n
 *vconn;

270 
boﬁ
 
ªad_hñlo
, 
c⁄√˘ed
;

271 
oÂbuf
 *
msg
;

272 
°ªam
 *stream;

273 
size_t
 
n_£¡
;

275 
	`Âv_¸óã
(
ty≥
, &
Âv
);

276 
	`CHECK_ERRNO
(
	`vc⁄n_›í
(
Âv
.
vc⁄n_«me
, 
OFP10_VERSION
, &
vc⁄n
,

277 
DSCP_DEFAULT
), 0);

278 
	`vc⁄n_run
(
vc⁄n
);

279 
°ªam
 = 
	`Âv_ac˚±
(&
Âv
);

280 
	`Âv_de°roy
(&
Âv
);

282 
n_£¡
 = 0;

283 
n_£¡
 < 
out_size
) {

284 
ªtvÆ
;

286 
ªtvÆ
 = 
	`°ªam_£nd
(
°ªam
, (*Ë
out
 + 
n_£¡
, 
out_size
 -Ç_sent);

287 i‡(
ªtvÆ
 > 0) {

288 
n_£¡
 +
ªtvÆ
;

289 } i‡(
ªtvÆ
 =-
EAGAIN
) {

290 
	`°ªam_run
(
°ªam
);

291 
	`vc⁄n_run
(
vc⁄n
);

292 
	`°ªam_ªcv_waô
(
°ªam
);

293 
	`vc⁄n_c⁄√˘_waô
(
vc⁄n
);

294 
	`vc⁄n_run_waô
(
vc⁄n
);

295 
	`pﬁl_block
();

297 
	`ovs_Áèl
(0, "°ªam_£ndÑëu∫ed u√x≥˘ed vÆuê%d", 
ªtvÆ
);

301 
ªad_hñlo
 = 
c⁄√˘ed
 = 
Ál£
;

303 i‡(!
ªad_hñlo
) {

304 
oÂ_hódî
 
hñlo
;

305 
ªtvÆ
 = 
	`°ªam_ªcv
(
°ªam
, &
hñlo
,  hello);

306 i‡(
ªtvÆ
 = 
hñlo
) {

307 
oÂøw
 
øw
;

309 
	`CHECK
(
hñlo
.
vîsi⁄
, 
OFP10_VERSION
);

310 
	`CHECK
(
	`oÂøw_decode_∑πül
(&
øw
, &
hñlo
,  hello), 0);

311 
	`CHECK
(
øw
, 
OFPRAW_OFPT_HELLO
);

312 
	`CHECK
(
	`¡ohs
(
hñlo
.
Àngth
),  hello);

313 
ªad_hñlo
 = 
åue
;

315 
	`CHECK_ERRNO
(
ªtvÆ
, -
EAGAIN
);

319 
	`vc⁄n_run
(
vc⁄n
);

320 i‡(!
c⁄√˘ed
) {

321 
îr‹
 = 
	`vc⁄n_c⁄√˘
(
vc⁄n
);

322 i‡(
îr‹
 =
ex≥˘_c⁄√˘_îr‹
) {

323 i‡(!
îr‹
) {

324 
c⁄√˘ed
 = 
åue
;

326 
	`°ªam_˛o£
(
°ªam
);

327 
	`vc⁄n_˛o£
(
vc⁄n
);

331 
	`CHECK_ERRNO
(
îr‹
, 
EAGAIN
);

335 i‡(
ªad_hñlo
 && 
c⁄√˘ed
) {

339 
	`vc⁄n_run_waô
(
vc⁄n
);

340 i‡(!
c⁄√˘ed
) {

341 
	`vc⁄n_c⁄√˘_waô
(
vc⁄n
);

343 i‡(!
ªad_hñlo
) {

344 
	`°ªam_ªcv_waô
(
°ªam
);

346 
	`pﬁl_block
();

348 
	`°ªam_˛o£
(
°ªam
);

349 
	`CHECK_ERRNO
(
	`vc⁄n_ªcv_block
(
vc⁄n
, &
msg
), 
EOF
);

350 
	`vc⁄n_˛o£
(
vc⁄n
);

351 
	}
}

355 
	$ã°_£nd_∂aö_hñlo
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

357 c⁄° *
ty≥
 = 
¨gv
[1];

358 
oÂbuf
 *
hñlo
;

360 
hñlo
 = 
	`oÂøw_Æloc_xid
(
OFPRAW_OFPT_HELLO
, 
OFP10_VERSION
,

361 
	`ht⁄l
(0x12345678), 0);

362 
	`ã°_£nd_hñlo
(
ty≥
, 
hñlo
->
d©a
, hñlo->
size
, 0);

363 
	`oÂbuf_dñëe
(
hñlo
);

364 
	}
}

370 
	$ã°_£nd_l⁄g_hñlo
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

372 c⁄° *
ty≥
 = 
¨gv
[1];

373 
oÂbuf
 *
hñlo
;

374 íum { 
EXTRA_BYTES
 = 8 };

376 
hñlo
 = 
	`oÂøw_Æloc_xid
(
OFPRAW_OFPT_HELLO
, 
OFP10_VERSION
,

377 
	`ht⁄l
(0x12345678), 
EXTRA_BYTES
);

378 
	`oÂbuf_put_zîos
(
hñlo
, 
EXTRA_BYTES
);

379 
	`oÂmsg_upd©e_Àngth
(
hñlo
);

380 
	`ã°_£nd_hñlo
(
ty≥
, 
hñlo
->
d©a
, hñlo->
size
, 0);

381 
	`oÂbuf_dñëe
(
hñlo
);

382 
	}
}

387 
	$ã°_£nd_echo_hñlo
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

389 c⁄° *
ty≥
 = 
¨gv
[1];

390 
oÂbuf
 *
echo
;

392 
echo
 = 
	`oÂøw_Æloc_xid
(
OFPRAW_OFPT_ECHO_REQUEST
, 
OFP10_VERSION
,

393 
	`ht⁄l
(0x12345678), 0);

394 
	`ã°_£nd_hñlo
(
ty≥
, 
echo
->
d©a
,Écho->
size
, 
EPROTO
);

395 
	`oÂbuf_dñëe
(
echo
);

396 
	}
}

401 
	$ã°_£nd_sh‹t_hñlo
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

403 c⁄° *
ty≥
 = 
¨gv
[1];

404 
oÂ_hódî
 
hñlo
;

406 
	`mem£t
(&
hñlo
, 0,  hello);

407 
	`ã°_£nd_hñlo
(
ty≥
, &
hñlo
,  hñlo, 
EPROTO
);

408 
	}
}

413 
	$ã°_£nd_övÆid_vîsi⁄_hñlo
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

415 c⁄° *
ty≥
 = 
¨gv
[1];

416 
oÂbuf
 *
hñlo
;

418 
hñlo
 = 
	`oÂøw_Æloc_xid
(
OFPRAW_OFPT_HELLO
, 
OFP10_VERSION
,

419 
	`ht⁄l
(0x12345678), 0);

420 ((
oÂ_hódî
 *Ë
hñlo
->
d©a
)->
vîsi⁄
 = 0;

421 
	`ã°_£nd_hñlo
(
ty≥
, 
hñlo
->
d©a
, hñlo->
size
, 
EPROTO
);

422 
	`oÂbuf_dñëe
(
hñlo
);

423 
	}
}

425 c⁄° 
comm™d
 
	gcomm™ds
[] = {

426 {"ªfu£-c⁄√˘i⁄", 1, 1, 
ã°_ªfu£_c⁄√˘i⁄
},

427 {"ac˚±-thí-˛o£", 1, 1, 
ã°_ac˚±_thí_˛o£
},

428 {"ªad-hñlo", 1, 1, 
ã°_ªad_hñlo
},

429 {"£nd-∂aö-hñlo", 1, 1, 
ã°_£nd_∂aö_hñlo
},

430 {"£nd-l⁄g-hñlo", 1, 1, 
ã°_£nd_l⁄g_hñlo
},

431 {"£nd-echo-hñlo", 1, 1, 
ã°_£nd_echo_hñlo
},

432 {"£nd-sh‹t-hñlo", 1, 1, 
ã°_£nd_sh‹t_hñlo
},

433 {"£nd-övÆid-vîsi⁄-hñlo", 1, 1, 
ã°_£nd_övÆid_vîsi⁄_hñlo
},

434 {
NULL
, 0, 0, NULL},

438 
	$maö
(
¨gc
, *
¨gv
[])

440 
	`£t_¥ogøm_«me
(
¨gv
[0]);

441 
	`vlog_£t_Àvñs
(
NULL
, 
VLF_ANY_FACILITY
, 
VLL_EMER
);

442 
	`vlog_£t_Àvñs
(
NULL
, 
VLF_CONSOLE
, 
VLL_DBG
);

443 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

445 
	`time_Æ¨m
(10);

447 
	`run_comm™d
(
¨gc
 - 1, 
¨gv
 + 1, 
comm™ds
);

450 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/utilities/nlmon.c

17 
	~<c⁄fig.h
>

18 
	~<î∫o.h
>

19 
	~<öây≥s.h
>

20 
	~<√t/if.h
>

21 
	~<pﬁl.h
>

22 
	~<sys/sockë.h
>

23 
	~<sys/uio.h
>

24 
	~<°ddef.h
>

25 
	~<löux/π√éök.h
>

26 
	~"√éök.h
"

27 
	~"√éök-sockë.h
"

28 
	~"oÂbuf.h
"

29 
	~"pﬁl-lo›.h
"

30 
	~"timevÆ.h
"

31 
	~"utû.h
"

32 
	~"vlog.h
"

34 c⁄° 
∆_pﬁicy
 
	gπ∆gΩ_lök_pﬁicy
[] = {

35 [
IFLA_IFNAME
] = { .
ty≥
 = 
NL_A_STRING
, .
	g›ti⁄Æ
 = 
Ál£
 },

36 [
IFLA_MASTER
] = { .
ty≥
 = 
NL_A_U32
, .
	g›ti⁄Æ
 = 
åue
 },

40 
	$maö
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

42 
uöt64_t
 
buf_°ub
[4096 / 64];

43 
∆_sock
 *
sock
;

44 
oÂbuf
 
buf
;

45 
îr‹
;

47 
	`£t_¥ogøm_«me
(
¨gv
[0]);

48 
	`vlog_£t_Àvñs
(
NULL
, 
VLF_ANY_FACILITY
, 
VLL_DBG
);

50 
îr‹
 = 
	`∆_sock_¸óã
(
NETLINK_ROUTE
, &
sock
);

51 i‡(
îr‹
) {

52 
	`ovs_Áèl
(
îr‹
, "couldÇot createÑtnetlink socket");

55 
îr‹
 = 
	`∆_sock_joö_mcgroup
(
sock
, 
RTNLGRP_LINK
);

56 i‡(
îr‹
) {

57 
	`ovs_Áèl
(
îr‹
, "couldÇot join RTNLGRP_LINK multicast group");

60 
	`oÂbuf_u£_°ub
(&
buf
, 
buf_°ub
,  buf_stub);

62 
îr‹
 = 
	`∆_sock_ªcv
(
sock
, &
buf
, 
Ál£
);

63 i‡(
îr‹
 =
EAGAIN
) {

65 } i‡(
îr‹
 =
ENOBUFS
) {

66 
	`ovs_îr‹
(0, "network monitor socket overflowed");

67 } i‡(
îr‹
) {

68 
	`ovs_Áèl
(
îr‹
, "error onÇetwork monitor socket");

70 
	siff_Êag
 {

71 
Êag
;

72 c⁄° *
«me
;

75 c⁄° 
iff_Êag
 
Êags
[] = {

76 { 
IFF_UP
, "UP", },

77 { 
IFF_BROADCAST
, "BROADCAST", },

78 { 
IFF_DEBUG
, "DEBUG", },

79 { 
IFF_LOOPBACK
, "LOOPBACK", },

80 { 
IFF_POINTOPOINT
, "POINTOPOINT", },

81 { 
IFF_NOTRAILERS
, "NOTRAILERS", },

82 { 
IFF_RUNNING
, "RUNNING", },

83 { 
IFF_NOARP
, "NOARP", },

84 { 
IFF_PROMISC
, "PROMISC", },

85 { 
IFF_ALLMULTI
, "ALLMULTI", },

86 { 
IFF_MASTER
, "MASTER", },

87 { 
IFF_SLAVE
, "SLAVE", },

88 { 
IFF_MULTICAST
, "MULTICAST", },

89 { 
IFF_PORTSEL
, "PORTSEL", },

90 { 
IFF_AUTOMEDIA
, "AUTOMEDIA", },

91 { 
IFF_DYNAMIC
, "DYNAMIC", },

94 
∆©å
 *
©ås
[
	`ARRAY_SIZE
(
π∆gΩ_lök_pﬁicy
)];

95 
∆msghdr
 *
∆h
;

96 
iföfomsg
 *
iim
;

97 
i
;

99 
∆h
 = 
	`oÂbuf_©
(&
buf
, 0, 
NLMSG_HDRLEN
);

100 
iim
 = 
	`oÂbuf_©
(&
buf
, 
NLMSG_HDRLEN
,  *iim);

101 i‡(!
iim
) {

102 
	`ovs_îr‹
(0, "received badÑtnl message (no ifinfomsg)");

106 i‡(!
	`∆_pﬁicy_∑r£
(&
buf
, 
NLMSG_HDRLEN
 + (
iföfomsg
),

107 
π∆gΩ_lök_pﬁicy
,

108 
©ås
, 
	`ARRAY_SIZE
(
π∆gΩ_lök_pﬁicy
))) {

109 
	`ovs_îr‹
(0, "received badÑtnl message (policy)");

112 
	`¥ötf
("netdev %s changed (%s):\n",

113 
	`∆_©å_gë_°rög
(
©ås
[
IFLA_IFNAME
]),

114 (
∆h
->
∆msg_ty≥
 =
RTM_NEWLINK
 ? "RTM_NEWLINK"

115 : 
∆h
->
∆msg_ty≥
 =
RTM_DELLINK
 ? "RTM_DELLINK"

116 : 
∆h
->
∆msg_ty≥
 =
RTM_GETLINK
 ? "RTM_GETLINK"

117 : 
∆h
->
∆msg_ty≥
 =
RTM_SETLINK
 ? "RTM_SETLINK"

119 
	`¥ötf
("\tflags:");

120 
i
 = 0; i < 
	`ARRAY_SIZE
(
Êags
); i++) {

121 i‡(
iim
->
ifi_Êags
 & 
Êags
[
i
].
Êag
) {

122 
	`¥ötf
(" %s", 
Êags
[
i
].
«me
);

125 
	`¥ötf
("\n");

126 i‡(
©ås
[
IFLA_MASTER
]) {

127 
uöt32_t
 
idx
 = 
	`∆_©å_gë_u32
(
©ås
[
IFLA_MASTER
]);

128 
i‚ame
[
IFNAMSIZ
];

129 i‡(!
	`if_ödext⁄ame
(
idx
, 
i‚ame
)) {

130 
	`°r˝y
(
i‚ame
, "unknown");

132 
	`¥ötf
("\tma°î=%"
PRIu32
" (%s)\n", 
idx
, 
i‚ame
);

136 
	`∆_sock_waô
(
sock
, 
POLLIN
);

137 
	`pﬁl_block
();

139 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/utilities/ovs-appctl.c

17 
	~<c⁄fig.h
>

19 
	~<î∫o.h
>

20 
	~<gë›t.h
>

21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 
	~<°dlib.h
>

25 
	~"comm™d-löe.h
"

26 
	~"d´m⁄.h
"

27 
	~"dús.h
"

28 
	~"dy«mic-°rög.h
"

29 
	~"js⁄Ωc.h
"

30 
	~"¥o˚ss.h
"

31 
	~"timevÆ.h
"

32 
	~"unix˘l.h
"

33 
	~"utû.h
"

35 
ußge
();

36 c⁄° *
∑r£_comm™d_löe
(
¨gc
, *
¨gv
[]);

37 
js⁄Ωc
 *
c⁄√˘_to_èrgë
(c⁄° *
èrgë
);

40 
	$maö
(
¨gc
, *
¨gv
[])

42 *
cmd_ªsu…
, *
cmd_îr‹
;

43 
js⁄Ωc
 *
˛õ¡
;

44 *
cmd
, **
cmd_¨gv
;

45 c⁄° *
èrgë
;

46 
cmd_¨gc
;

47 
îr‹
;

49 
	`£t_¥ogøm_«me
(
¨gv
[0]);

52 
èrgë
 = 
	`∑r£_comm™d_löe
(
¨gc
, 
¨gv
);

53 
˛õ¡
 = 
	`c⁄√˘_to_èrgë
(
èrgë
);

56 
cmd
 = 
¨gv
[
›töd
++];

57 
cmd_¨gc
 = 
¨gc
 - 
›töd
;

58 
cmd_¨gv
 = 
cmd_¨gc
 ? 
¨gv
 + 
›töd
 : 
NULL
;

59 
îr‹
 = 
	`unix˘l_˛õ¡_å™ß˘
(
˛õ¡
, 
cmd
, 
cmd_¨gc
, 
cmd_¨gv
,

60 &
cmd_ªsu…
, &
cmd_îr‹
);

61 i‡(
îr‹
) {

62 
	`ovs_Áèl
(
îr‹
, "%s:Åønß˘i⁄Éº‹", 
èrgë
);

65 i‡(
cmd_îr‹
) {

66 
	`Âuts
(
cmd_îr‹
, 
°dîr
);

67 
	`ovs_îr‹
(0, "%s: sîvîÑëu∫edá¿îr‹", 
èrgë
);

68 
	`exô
(2);

69 } i‡(
cmd_ªsu…
) {

70 
	`Âuts
(
cmd_ªsu…
, 
°dout
);

72 
	`NOT_REACHED
();

75 
	`js⁄Ωc_˛o£
(
˛õ¡
);

76 
	`‰ì
(
cmd_ªsu…
);

77 
	`‰ì
(
cmd_îr‹
);

79 
	}
}

82 
	$ußge
()

84 
	`¥ötf
("\
%s, for queryingánd controlling Open vSwitch daemon\n\
: %s [TARGET] COMMAND [ARG...]\n\
:\n\
-t, --target=TARGETÖidfile or socketÅo contact\n\
 commands:\n\
 List commands supported byÅheÅarget\n\
 Print version ofÅheÅarget\n\
/list List currentÜoggingÜevels\n\
/set [SPEC]\n\
ÜogÜevelsás detailed in SPEC, which may include:\n\
 valid moduleÇame (all modules, by default)\n\
'syslog', 'console', 'file' (all facilities, by default))\n\
'off', 'emer', 'err', 'warn', 'info', or 'dbg' ('dbg', bydefault)\n\
/reopen MakeÅheÖrogramÑeopen itsÜog file\n\
 options:\n\
--timeout=SECS waitát most SECS seconds foráÑesponse\n\
-h, --help PrintÅhis helpful information\n\
-V, --version Display ovs-appctl version information\n",

103 
¥ogøm_«me
,Örogram_name);

104 
	`exô
(
EXIT_SUCCESS
);

105 
	}
}

108 
	$∑r£_comm™d_löe
(
¨gc
, *
¨gv
[])

110 c⁄° 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

111 {"èrgë", 
ªquúed_¨gumít
, 
NULL
, 't'},

112 {"execuã", 
no_¨gumít
, 
NULL
, 'e'},

113 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

114 {"vîsi⁄", 
no_¨gumít
, 
NULL
, 'V'},

115 {"timeout", 
ªquúed_¨gumít
, 
NULL
, 'T'},

116 {
NULL
, 0, NULL, 0},

118 c⁄° *
èrgë
;

119 
e_›ti⁄s
;

121 
èrgë
 = 
NULL
;

122 
e_›ti⁄s
 = 0;

124 
›ti⁄
;

126 
›ti⁄
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "+t:hVe", 
l⁄g_›ti⁄s
, 
NULL
);

127 i‡(
›ti⁄
 == -1) {

130 
›ti⁄
) {

132 i‡(
èrgë
) {

133 
	`ovs_Áèl
(0, "-t or --target may be specified only once");

135 
èrgë
 = 
›èrg
;

143 i‡(
e_›ti⁄s
++) {

144 
	`ovs_Áèl
(0, "-e or --execute may be speciifed only once");

149 
	`ußge
();

153 
	`time_Æ¨m
(
	`©oi
(
›èrg
));

157 
	`ovs_¥öt_vîsi⁄
(0, 0);

158 
	`exô
(
EXIT_SUCCESS
);

161 
	`exô
(
EXIT_FAILURE
);

164 
	`NOT_REACHED
();

168 i‡(
›töd
 >
¨gc
) {

169 
	`ovs_Áèl
(0, "atÜeast oneÇon-optionárgument isÑequired "

173  
èrgë
 ?Åarget : "ovs-vswitchd";

174 
	}
}

176 
js⁄Ωc
 *

177 
	$c⁄√˘_to_èrgë
(c⁄° *
èrgë
)

179 
js⁄Ωc
 *
˛õ¡
;

180 *
sockë_«me
;

181 
îr‹
;

183 i‡(
èrgë
[0] != '/') {

184 *
pidfûe_«me
;

185 
pid_t
 
pid
;

187 
pidfûe_«me
 = 
	`xa•rötf
("%s/%s.pid", 
	`ovs_rundú
(), 
èrgë
);

188 
pid
 = 
	`ªad_pidfûe
(
pidfûe_«me
);

189 i‡(
pid
 < 0) {

190 
	`ovs_Áèl
(-
pid
, "ˇ¬ŸÑódÖidfûê\"%s\"", 
pidfûe_«me
);

192 
	`‰ì
(
pidfûe_«me
);

193 
sockë_«me
 = 
	`xa•rötf
("%s/%s.%ld.ctl",

194 
	`ovs_rundú
(), 
èrgë
, (Ë
pid
);

196 
sockë_«me
 = 
	`x°rdup
(
èrgë
);

199 
îr‹
 = 
	`unix˘l_˛õ¡_¸óã
(
sockë_«me
, &
˛õ¡
);

200 i‡(
îr‹
) {

201 
	`ovs_Áèl
(
îr‹
, "ˇ¬Ÿ c⁄√˘Åÿ\"%s\"", 
sockë_«me
);

203 
	`‰ì
(
sockë_«me
);

205  
˛õ¡
;

206 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/utilities/ovs-benchmark.c

17 
	~<c⁄fig.h
>

19 
	~<î∫o.h
>

20 
	~<gë›t.h
>

21 
	~<limôs.h
>

22 
	~<pﬁl.h
>

23 
	~<°dlib.h
>

24 
	~<sys/sockë.h
>

25 
	~<sys/time.h
>

26 
	~<°ddef.h
>

27 
	~<uni°d.h
>

29 
	~"comm™d-löe.h
"

30 
	~"pﬁl-lo›.h
"

31 
	~"sockë-utû.h
"

32 
	~"timevÆ.h
"

33 
	~"utû.h
"

34 
	~"vlog.h
"

36 
	#DEFAULT_PORT
 6630

	)

38 
	#MAX_SOCKETS
 65535

	)

39 
	gn_b©ches
 = 1;

40 
	gn_sockës
 = 100;

42 
ö_addr
 
	gloˇl_addr
;

43 
	gloˇl_mö_p‹t
, 
	gloˇl_max_p‹t
;

45 
ö_addr
 
	gªmŸe_addr
;

46 
	gªmŸe_mö_p‹t
, 
	gªmŸe_max_p‹t
;

48 
	gmax_øã
;

50 
	gtimeout
;

52 c⁄° 
comm™d
 
	gÆl_comm™ds
[];

54 
∑r£_›ti⁄s
(
¨gc
, *
¨gv
[]);

55 
ußge
();

58 
	$time_ö_m£c
()

60 
timevÆ
 
tv
;

62 i‡(
	`gëtimeofday
(&
tv
, 
NULL
) < 0) {

63 
	`ovs_Áèl
(
î∫o
, "gettimeofday");

66  
tv
.
tv_£c
 * 1000LL +Åv.
tv_u£c
 / 1000;

67 
	}
}

70 
	$maö
(
¨gc
, *
¨gv
[])

72 
	`£t_¥ogøm_«me
(
¨gv
[0]);

73 
	`vlog_£t_Àvñs
(
NULL
, 
VLF_ANY_FACILITY
, 
VLL_EMER
);

74 
	`∑r£_›ti⁄s
(
¨gc
, 
¨gv
);

75 
	`run_comm™d
(
¨gc
 - 
›töd
, 
¨gv
 + o±öd, 
Æl_comm™ds
);

77 
	}
}

80 
	$∑r£_èrgë
(c⁄° *
s_
, 
ö_addr
 *
addr
,

81 *
mö
, *
max
)

83 *
s
 = 
	`x°rdup
(
s_
);

84 *
cﬁ⁄
;

85 
îr‹
;

87 
cﬁ⁄
 = 
	`°rchr
(
s
, ':');

88 i‡(
cﬁ⁄
) {

89 *
cﬁ⁄
 = '\0';

92 i‡(*
s
 != '\0') {

93 
îr‹
 = 
	`lookup_ho°«me
(
s
, 
addr
);

94 i‡(
îr‹
) {

95 
	`ovs_Áèl
(
îr‹
, "ÁûedÅÿlook u∞IPáddªs†f‹ \"%s\"", 
s_
);

98 
addr
->
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

101 *
mö
 = *
max
 = 0;

102 i‡(
cﬁ⁄
 && colon[1] != '\0') {

103 c⁄° *
p‹ts
 = 
cﬁ⁄
 + 1;

104 i‡(
	`ssˇnf
(
p‹ts
, "%hu-%hu", 
mö
, 
max
) == 2) {

105 i‡(*
mö
 > *
max
) {

106 
	`ovs_Áèl
(0, "%s: möimum i†gª©îÅh™ maximum", 
s_
);

108 } i‡(
	`ssˇnf
(
p‹ts
, "%hu", 
mö
) == 1) {

109 *
max
 = *
mö
;

111 
	`ovs_Áèl
(0, "%s:Çumbî o∏øngêex≥˘ed", 
s_
);

115 
	`‰ì
(
s
);

116 
	}
}

119 
	$∑r£_›ti⁄s
(
¨gc
, *
¨gv
[])

121 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

122 {"loˇl", 
ªquúed_¨gumít
, 
NULL
, 'l'},

123 {"ªmŸe", 
ªquúed_¨gumít
, 
NULL
, 'r'},

124 {"b©ches", 
ªquúed_¨gumít
, 
NULL
, 'b'},

125 {"sockës", 
ªquúed_¨gumít
, 
NULL
, 's'},

126 {"max-øã", 
ªquúed_¨gumít
, 
NULL
, 'c'},

127 {"timeout", 
ªquúed_¨gumít
, 
NULL
, 'T'},

128 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

129 {"vîsi⁄", 
no_¨gumít
, 
NULL
, 'V'},

130 {
NULL
, 0, NULL, 0},

132 *
sh‹t_›ti⁄s
 = 
	`l⁄g_›ti⁄s_to_sh‹t_›ti⁄s
(
l⁄g_›ti⁄s
);

134 
loˇl_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

135 
loˇl_mö_p‹t
 = 
loˇl_max_p‹t
 = 0;

137 
ªmŸe_addr
.
s_addr
 = 
	`ht⁄l
(0);

138 
ªmŸe_mö_p‹t
 = 
ªmŸe_max_p‹t
 = 0;

141 
c
;

143 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
l⁄g_›ti⁄s
, 
NULL
);

144 i‡(
c
 == -1) {

148 
c
) {

150 
	`∑r£_èrgë
(
›èrg
,

151 &
loˇl_addr
, &
loˇl_mö_p‹t
, &
loˇl_max_p‹t
);

155 
	`∑r£_èrgë
(
›èrg
,

156 &
ªmŸe_addr
, &
ªmŸe_mö_p‹t
, &
ªmŸe_max_p‹t
);

157 i‡(
ªmŸe_addr
.
s_addr
 =
	`ht⁄l
(
INADDR_ANY
)) {

158 
	`ovs_Áèl
(0, "remote IPáddress isÑequired");

163 
n_b©ches
 = 
	`©oi
(
›èrg
);

164 i‡(
n_b©ches
 < 0) {

165 
	`ovs_Áèl
(0, "--batches or -bárgument must beátÜeast 1");

170 
n_sockës
 = 
	`©oi
(
›èrg
);

171 i‡(
n_sockës
 < 1 ||Ç_sockë†> 
MAX_SOCKETS
) {

172 
	`ovs_Áèl
(0, "--sockets or -sárgument must be between 1 "

173 "™d %d (ö˛usive)", 
MAX_SOCKETS
);

178 
max_øã
 = 
	`©of
(
›èrg
);

179 i‡(
max_øã
 <= 0.0) {

180 
	`ovs_Áèl
(0, "--max-rate or -cárgument must beÖositive");

185 
timeout
 = 
	`©oi
(
›èrg
);

186 i‡(!
timeout
) {

187 
	`ovs_Áèl
(0, "-T or --timeoutárgument must beÖositive");

192 
	`ußge
();

195 
	`ovs_¥öt_vîsi⁄
(0, 0);

196 
	`exô
(
EXIT_SUCCESS
);

199 
	`exô
(
EXIT_FAILURE
);

202 
	`ab‹t
();

205 
	`‰ì
(
sh‹t_›ti⁄s
);

206 
	}
}

209 
	$ußge
()

211 
	`¥ötf
("\
%s: Open vSwitch flow setup benchmark utility\n\
: %s [OPTIONS] COMMAND [ARG...]\n\
 connect manyÅimesállát once\n\
 measure sustained flow setupÑate\n\
áccept TCP connections\n\
 displayÅhis help message\n\
\n\
 options:\n\
-l, --local [IP][:PORTS] useÜocal IPándÑange of PORTS\n\
-r, --remote IP[:PORTS] connectÅoÑemote IPánd PORTS\n\
-s, --sockets NÇumber of sockets for \"rate\" or \"latency\"\n\
-b, --batches NÇumber of connection batches for \"latency\"\n\
-c, --max-rate NPERSEC connectionÑateÜimit for \"rate\"\n\
-T, --timeout MAXSECS maxÇumber of secondsÅoÑun for \"rate\"\n\
\n\
 options:\n\
-h, --help displayÅhis help message\n\
-V, --version display version information\n",

230 
¥ogøm_«me
,Örogram_name);

231 
	`exô
(
EXIT_SUCCESS
);

232 
	}
}

235 
	$cmd_li°í
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

237 
pﬁlfd
 *
fds
;

238 
n_fds
;

239 
p‹t
;

240 
i
;

242 i‡(!
loˇl_mö_p‹t
 && !
loˇl_max_p‹t
) {

243 
loˇl_mö_p‹t
 = 
loˇl_max_p‹t
 = 
DEFAULT_PORT
;

245 
fds
 = 
	`xmÆloc
((1 + 
loˇl_max_p‹t
 - 
loˇl_mö_p‹t
) *  *fds);

246 
n_fds
 = 0;

247 
p‹t
 = 
loˇl_mö_p‹t
;Ö‹à<
loˇl_max_p‹t
;Öort++) {

248 
sockaddr_ö
 
sö
;

249 
yes
 = 1;

250 
îr‹
;

251 
fd
;

254 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

255 i‡(
fd
 < 0) {

256 
	`ovs_Áèl
(
î∫o
, "failedÅo create socket");

258 
îr‹
 = 
	`£t_n⁄blockög
(
fd
);

259 i‡(
îr‹
) {

260 
	`ovs_Áèl
(
îr‹
, "failedÅo setÇon-blocking mode");

262 i‡(
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
yes
,  yes) < 0) {

263 
	`ovs_Áèl
(
î∫o
, "setsockopt(SO_REUSEADDR) failed");

267 
sö
.
sö_Ámûy
 = 
AF_INET
;

268 
sö
.
sö_addr
 = 
ªmŸe_addr
;

269 
sö
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

270 i‡(
	`böd
(
fd
, (
sockaddr
 *Ë&
sö
,  sin) < 0) {

271 
	`ovs_Áèl
(
î∫o
, "bind failed");

275 i‡(
	`li°í
(
fd
, 10000) < 0) {

276 
	`ovs_Áèl
(
î∫o
, "listen failed");

279 
fds
[
n_fds
].
fd
 = fd;

280 
fds
[
n_fds
].
evíts
 = 
POLLIN
;

281 
n_fds
++;

285 
ªtvÆ
;

288 
ªtvÆ
 = 
	`pﬁl
(
fds
, 
n_fds
, -1);

289 } 
ªtvÆ
 < 0 && 
î∫o
 =
EINTR
);

290 i‡(
ªtvÆ
 < 0) {

291 
	`ovs_Áèl
(
î∫o
, "poll failed");

294 
i
 = 0; i < 
n_fds
; i++) {

295 i‡(
fds
[
i
].
ªvíts
 & 
POLLIN
) {

296 
√wfd
;

299 
√wfd
 = 
	`ac˚±
(
fds
[
i
].
fd
, 
NULL
, NULL);

300 } 
√wfd
 < 0 && 
î∫o
 =
EINTR
);

302 i‡(
√wfd
 >= 0) {

303 
	`˛o£
(
√wfd
);

304 } i‡(
î∫o
 !
EAGAIN
) {

305 
	`ovs_Áèl
(
î∫o
, "accept failed");

310 
	}
}

314 
boﬁ


315 
	$ö¸emít
(*
vÆue
,

316 
mö
, 
max
)

318 i‡(*
vÆue
 < 
max
) {

319 ++*
vÆue
;

320  
Ál£
;

322 *
vÆue
 = 
mö
;

323  
åue
;

325 
	}
}

328 
	$√xt_p‹ts
(*
loˇl_p‹t
, *
ªmŸe_p‹t
)

330 i‡(
	`ö¸emít
(
loˇl_p‹t
, 
loˇl_mö_p‹t
, 
loˇl_max_p‹t
)) {

331 
	`ö¸emít
(
ªmŸe_p‹t
, 
ªmŸe_mö_p‹t
, 
ªmŸe_max_p‹t
);

333 
	}
}

336 
	$böd_loˇl_p‹t
(
fd
, *
loˇl_p‹t
,

337 *
ªmŸe_p‹t
)

339 
îr‹
;

341 i‡(!
loˇl_mö_p‹t
 && !
loˇl_max_p‹t
) {

342 
	`√xt_p‹ts
(
loˇl_p‹t
, 
ªmŸe_p‹t
);

347 
sockaddr_ö
 
loˇl
;

349 
	`mem£t
(&
loˇl
, 0, Üocal);

350 
loˇl
.
sö_Ámûy
 = 
AF_INET
;

351 
loˇl
.
sö_addr
 = 
loˇl_addr
;

352 
loˇl
.
sö_p‹t
 = 
	`ht⁄s
(*
loˇl_p‹t
);

353 
îr‹
 = (
	`böd
(
fd
, (
sockaddr
 *Ë&
loˇl
, Üocal) < 0

354 ? 
î∫o
 : 0);

355 
	`√xt_p‹ts
(
loˇl_p‹t
, 
ªmŸe_p‹t
);

356 } 
îr‹
 =
EADDRINUSE
 ||Éº‹ =
EINTR
);

357 i‡(
îr‹
) {

358 
	`ovs_Áèl
(
îr‹
, "bind failed");

360 
	}
}

363 
	$cmd_øã
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

365 
loˇl_p‹t
;

366 
ªmŸe_p‹t
;

367 
com∂ëed
 = 0;

368 
Áûuªs
 = 0;

369 
°¨t
, 
¥ev
;

370 
pﬁlfd
 *
fds
;

371 
n_fds
;

373 i‡(!
ªmŸe_addr
.
s_addr
) {

374 
	`ovs_Áèl
(0, "remoteáddress must be specified with -r or --remote");

376 i‡(!
ªmŸe_mö_p‹t
 && !
ªmŸe_max_p‹t
) {

377 
ªmŸe_mö_p‹t
 = 
ªmŸe_max_p‹t
 = 
DEFAULT_PORT
;

380 
loˇl_p‹t
 = 
loˇl_mö_p‹t
;

381 
ªmŸe_p‹t
 = 
ªmŸe_mö_p‹t
;

382 
fds
 = 
	`xmÆloc
(
n_sockës
 *  *fds);

383 
n_fds
 = 0;

384 
°¨t
 = 
¥ev
 = 
	`time_ö_m£c
();

386 
now
;

387 
may_›í
;

388 
dñay
;

389 
îr‹
;

390 
j
;

392 i‡(
max_øã
 > 0) {

393 
cur_tŸÆ
 = 
com∂ëed
 + 
n_fds
;

394 
max_tŸÆ
 = (
	`time_ö_m£c
(Ë- 
°¨t
Ë* (
max_øã
 / 1000.0);

395 i‡(
max_tŸÆ
 > 
cur_tŸÆ
) {

396 
may_›í
 = 
	`MIN
(
n_sockës
, 
max_tŸÆ
 - 
cur_tŸÆ
);

398 
may_›í
 = 0;

400 
dñay
 = 1000.0 / 
max_øã
;

402 
may_›í
 = 
n_sockës
;

403 
dñay
 = 1000;

406 
may_›í
-- > 0 && 
n_fds
 < 
n_sockës
) {

407 
sockaddr_ö
 
ªmŸe
;

408 
îr‹
;

409 
fd
;

411 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

412 i‡(
fd
 < 0) {

413 
	`ovs_Áèl
(
î∫o
, "socket failed");

416 
îr‹
 = 
	`£t_n⁄blockög
(
fd
);

417 i‡(
îr‹
) {

418 
	`ovs_Áèl
(
îr‹
, "set_nonblocking failed");

421 
	`böd_loˇl_p‹t
(
fd
, &
loˇl_p‹t
, &
ªmŸe_p‹t
);

423 
	`mem£t
(&
ªmŸe
, 0, Ñemote);

424 
ªmŸe
.
sö_Ámûy
 = 
AF_INET
;

425 
ªmŸe
.
sö_addr
 = 
ªmŸe_addr
;

426 
ªmŸe
.
sö_p‹t
 = 
	`ht⁄s
(
ªmŸe_p‹t
);

427 i‡(
	`c⁄√˘
(
fd
, (
sockaddr
 *Ë&
ªmŸe
, Ñemote) < 0) {

428 i‡(
î∫o
 =
EINPROGRESS
) {

429 
fds
[
n_fds
].
fd
 = fd;

430 
fds
[
n_fds
].
evíts
 = 
POLLOUT
;

431 
fds
[
n_fds
].
ªvíts
 = 0;

432 
n_fds
++;

433 } i‡(
î∫o
 !
ECONNREFUSED
) {

434 
	`ovs_Áèl
(
î∫o
, "connect");

438 
	`shutdown
(
fd
, 2);

439 
	`˛o£
(
fd
);

440 
com∂ëed
++;

444 i‡(
n_fds
 =
n_sockës
) {

445 
dñay
 = 1000;

449 
îr‹
 = 
	`pﬁl
(
fds
, 
n_fds
, 
dñay
Ë< 0 ? 
î∫o
 : 0;

450 } 
îr‹
 =
EINTR
);

451 i‡(
îr‹
) {

452 
	`ovs_Áèl
(
î∫o
, "poll");

455 
j
 = 0; j < 
n_fds
; ) {

456 i‡(
fds
[
j
].
ªvíts
) {

457 i‡(
fds
[
j
].
ªvíts
 & 
POLLERR
) {

458 
Áûuªs
++;

460 
	`shutdown
(
fds
[
j
].
fd
, 2);

461 
	`˛o£
(
fds
[
j
].
fd
);

462 
fds
[
j
] = fds[--
n_fds
];

463 
com∂ëed
++;

465 
j
++;

469 
now
 = 
	`time_ö_m£c
();

470 i‡(
now
 >
¥ev
 + 1000) {

471 
ñ≠£d
 = 
now
 - 
°¨t
;

472 
	`¥ötf
("%.3f sÉlapsed, %u OK, %u failed,ávg %.1f/s\n",

473 
ñ≠£d
 / 1000.0, 
com∂ëed
 - 
Áûuªs
, failures,

474 
com∂ëed
 / (
ñ≠£d
 / 1000.0));

475 
¥ev
 = 
now
;

477 i‡(
timeout
 && 
ñ≠£d
 >Åimeout * 1000LL) {

482 
	}
}

485 
	$timî_íd
(
°¨t
, 
boﬁ
 
îr‹
,

486 *
mö
, *
max
, *
tŸÆ
)

488 
ñ≠£d
 = 
	`time_ö_m£c
(Ë- 
°¨t
;

489 
œ°_ñ≠£d
 = 
INT_MIN
;

490 
c
 = 
îr‹
 ? '!' : '.';

492 i‡(
œ°_ñ≠£d
 !
ñ≠£d
) {

493 i‡(
œ°_ñ≠£d
 !
INT_MIN
) {

494 
	`putch¨
('\n');

496 
	`¥ötf
("%5d %c", 
ñ≠£d
, 
c
);

497 
	`fÊush
(
°dout
);

498 
œ°_ñ≠£d
 = 
ñ≠£d
;

500 
	`putch¨
(
c
);

501 
	`fÊush
(
°dout
);

504 i‡(
ñ≠£d
 < *
mö
) {

505 *
mö
 = 
ñ≠£d
;

507 i‡(
ñ≠£d
 > *
max
) {

508 *
max
 = 
ñ≠£d
;

510 *
tŸÆ
 +
ñ≠£d
;

511 
	}
}

514 
	$cmd_œãncy
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

516 
loˇl_p‹t
;

517 
ªmŸe_p‹t
;

518 
mö
 = 
INT_MAX
;

519 
max
 = 0;

520 
tŸÆ
 = 0;

521 
i
;

523 i‡(!
ªmŸe_addr
.
s_addr
) {

524 
	`ovs_Áèl
(0, "remoteáddress must be specified with -r or --rate");

526 i‡(!
ªmŸe_mö_p‹t
 && !
ªmŸe_max_p‹t
) {

527 
ªmŸe_mö_p‹t
 = 
ªmŸe_max_p‹t
 = 
DEFAULT_PORT
;

530 
loˇl_p‹t
 = 
loˇl_mö_p‹t
;

531 
ªmŸe_p‹t
 = 
ªmŸe_mö_p‹t
;

532 
i
 = 0; i < 
n_b©ches
; i++) {

533 
pﬁlfd
 
fds
[
MAX_SOCKETS
];

534 
°¨t
;

535 
n_fds
;

536 
j
;

538 
°¨t
 = 
	`time_ö_m£c
();

539 
n_fds
 = 0;

540 
j
 = 0; j < 
n_sockës
; j++) {

541 
sockaddr_ö
 
ªmŸe
;

542 
îr‹
;

543 
fd
;

545 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

546 i‡(
fd
 < 0) {

547 
	`ovs_Áèl
(
î∫o
, "socket failed");

550 
îr‹
 = 
	`£t_n⁄blockög
(
fd
);

551 i‡(
îr‹
) {

552 
	`ovs_Áèl
(
îr‹
, "set_nonblocking failed");

555 
	`böd_loˇl_p‹t
(
fd
, &
loˇl_p‹t
, &
ªmŸe_p‹t
);

557 
	`mem£t
(&
ªmŸe
, 0, Ñemote);

558 
ªmŸe
.
sö_Ámûy
 = 
AF_INET
;

559 
ªmŸe
.
sö_addr
 = 
ªmŸe_addr
;

560 
ªmŸe
.
sö_p‹t
 = 
	`ht⁄s
(
ªmŸe_p‹t
);

561 i‡(
	`c⁄√˘
(
fd
, (
sockaddr
 *Ë&
ªmŸe
, Ñemote) < 0) {

562 i‡(
î∫o
 =
EINPROGRESS
) {

563 
fds
[
n_fds
].
fd
 = fd;

564 
fds
[
n_fds
].
evíts
 = 
POLLOUT
;

565 
fds
[
n_fds
].
ªvíts
 = 0;

566 
n_fds
++;

567 } i‡(
î∫o
 !
ECONNREFUSED
) {

568 
	`ovs_Áèl
(
î∫o
, "connect");

572 
	`˛o£
(
fd
);

573 
	`timî_íd
(
°¨t
, 0, &
mö
, &
max
, &
tŸÆ
);

577 
n_fds
 > 0) {

578 
îr‹
;

581 
îr‹
 = 
	`pﬁl
(
fds
, 
n_fds
, -1Ë< 0 ? 
î∫o
 : 0;

582 } 
îr‹
 =
EINTR
);

583 i‡(
îr‹
) {

584 
	`ovs_Áèl
(
î∫o
, "poll");

587 
j
 = 0; j < 
n_fds
; ) {

588 i‡(
fds
[
j
].
ªvíts
) {

589 
	`timî_íd
(
°¨t
,

590 
fds
[
j
].
ªvíts
 & (
POLLERR
|
POLLHUP
) ? 1 : 0,

591 &
mö
, &
max
, &
tŸÆ
);

592 
	`˛o£
(
fds
[
j
].
fd
);

593 
fds
[
j
] = fds[--
n_fds
];

595 
j
++;

599 
	`putch¨
('\n');

602 
	`¥ötf
("min %d ms, max %d ms,ávg %llu ms\n",

603 
mö
, 
max
, 
tŸÆ
 / (1ULL * 
n_sockës
 * 
n_b©ches
));

604 
	}
}

607 
	$cmd_hñp
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

609 
	`ußge
();

610 
	}
}

612 c⁄° 
comm™d
 
	gÆl_comm™ds
[] = {

613 { "li°í", 0, 0, 
cmd_li°í
 },

614 { "øã", 0, 0, 
cmd_øã
 },

615 { "œãncy", 0, 0, 
cmd_œãncy
 },

616 { "hñp", 0, 0, 
cmd_hñp
 },

617 { 
NULL
, 0, 0, NULL },

	@/home/lsch/mytest/openvswitch-1.9.0/utilities/ovs-controller.c

17 
	~<c⁄fig.h
>

19 
	~<î∫o.h
>

20 
	~<gë›t.h
>

21 
	~<limôs.h
>

22 
	~<sig«l.h
>

23 
	~<°dlib.h
>

24 
	~<°dio.h
>

25 
	~<°rög.h
>

27 
	~"comm™d-löe.h
"

28 
	~"compûî.h
"

29 
	~"d´m⁄.h
"

30 
	~"À¨nög-swôch.h
"

31 
	~"oÂ-∑r£.h
"

32 
	~"oÂbuf.h
"

33 
	~"›íÊow/›íÊow.h
"

34 
	~"pﬁl-lo›.h
"

35 
	~"rc⁄n.h
"

36 
	~"sim≠.h
"

37 
	~"°ªam-s¶.h
"

38 
	~"timevÆ.h
"

39 
	~"unix˘l.h
"

40 
	~"utû.h
"

41 
	~"vc⁄n.h
"

42 
	~"vlog.h
"

43 
	~"sockë-utû.h
"

45 
VLOG_DEFINE_THIS_MODULE
(
c⁄åﬁÀr
);

47 
	#MAX_SWITCHES
 16

	)

48 
	#MAX_LISTENERS
 16

	)

50 
	sswôch_
 {

51 
lswôch
 *
	mlswôch
;

55 
boﬁ
 
	gÀ¨n_macs
 = 
åue
;

59 
boﬁ
 
	g£t_up_Êows
 = 
åue
;

62 
boﬁ
 
	ga˘i⁄_n‹mÆ
 = 
Ál£
;

66 
uöt32_t
 
	gwûdˇrds
 = 0;

69 
	gmax_idÀ
 = 60;

73 
boﬁ
 
	gmuã
 = 
Ál£
;

76 
uöt32_t
 
	gdeÁu…_queue
 = 
UINT32_MAX
;

79 
sim≠
 
	gp‹t_queues
 = 
SIMAP_INITIALIZER
(&
p‹t_queues
);

82 
oÂutû_Êow_mod
 *
	gdeÁu…_Êows
;

83 
size_t
 
	gn_deÁu…_Êows
;

86 *
	gunix˘l_∑th
 = 
NULL
;

88 
√w_swôch
(
swôch_
 *, 
vc⁄n
 *);

89 
∑r£_›ti⁄s
(
¨gc
, *
¨gv
[]);

90 
	$ußge
(Ë
NO_RETURN
;

93 
	$maö
(
¨gc
, *
¨gv
[])

95 
unix˘l_£rvî
 *
unix˘l
;

96 
swôch_
 
swôches
[
MAX_SWITCHES
];

97 
pvc⁄n
 *
li°íîs
[
MAX_LISTENERS
];

98 
n_swôches
, 
n_li°íîs
;

99 
ªtvÆ
;

100 
i
;

102 
	`¥o˘ôÀ_öô
(
¨gc
, 
¨gv
);

103 
	`£t_¥ogøm_«me
(
¨gv
[0]);

104 
	`∑r£_›ti⁄s
(
¨gc
, 
¨gv
);

105 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

107 i‡(
¨gc
 - 
›töd
 < 1) {

108 
	`ovs_Áèl
(0, "atÜeast one vconnárgumentÑequired; "

112 
n_swôches
 = 
n_li°íîs
 = 0;

113 
i
 = 
›töd
; i < 
¨gc
; i++) {

114 c⁄° *
«me
 = 
¨gv
[
i
];

115 
vc⁄n
 *vconn;

117 
ªtvÆ
 = 
	`vc⁄n_›í
(
«me
, 
OFP10_VERSION
, &
vc⁄n
, 
DSCP_DEFAULT
);

118 i‡(!
ªtvÆ
) {

119 i‡(
n_swôches
 >
MAX_SWITCHES
) {

120 
	`ovs_Áèl
(0, "max %d swôch c⁄√˘i⁄s", 
n_swôches
);

122 
	`√w_swôch
(&
swôches
[
n_swôches
++], 
vc⁄n
);

124 } i‡(
ªtvÆ
 =
EAFNOSUPPORT
) {

125 
pvc⁄n
 *pvconn;

126 
ªtvÆ
 = 
	`pvc⁄n_›í
(
«me
, &
pvc⁄n
, 
DSCP_DEFAULT
);

127 i‡(!
ªtvÆ
) {

128 i‡(
n_li°íîs
 >
MAX_LISTENERS
) {

129 
	`ovs_Áèl
(0, "max %dÖassivêc⁄√˘i⁄s", 
n_li°íîs
);

131 
li°íîs
[
n_li°íîs
++] = 
pvc⁄n
;

134 i‡(
ªtvÆ
) {

135 
	`VLOG_ERR
("%s: c⁄√˘: %s", 
«me
, 
	`°ªº‹
(
ªtvÆ
));

138 i‡(
n_swôches
 =0 && 
n_li°íîs
 == 0) {

139 
	`ovs_Áèl
(0, "noáctive orÖassive switch connections");

142 
	`d´m⁄ize_°¨t
();

144 
ªtvÆ
 = 
	`unix˘l_£rvî_¸óã
(
unix˘l_∑th
, &
unix˘l
);

145 i‡(
ªtvÆ
) {

146 
	`exô
(
EXIT_FAILURE
);

149 
	`d´m⁄ize_com∂ëe
();

151 
n_swôches
 > 0 || 
n_li°íîs
 > 0) {

153 
i
 = 0; i < 
n_li°íîs
 && 
n_swôches
 < 
MAX_SWITCHES
; ) {

154 
vc⁄n
 *
√w_vc⁄n
;

156 
ªtvÆ
 = 
	`pvc⁄n_ac˚±
(
li°íîs
[
i
], 
OFP10_VERSION
, &
√w_vc⁄n
);

157 i‡(!
ªtvÆ
 ||ÑëvÆ =
EAGAIN
) {

158 i‡(!
ªtvÆ
) {

159 
	`√w_swôch
(&
swôches
[
n_swôches
++], 
√w_vc⁄n
);

161 
i
++;

163 
	`pvc⁄n_˛o£
(
li°íîs
[
i
]);

164 
li°íîs
[
i
] =Üi°íîs[--
n_li°íîs
];

169 
i
 = 0; i < 
n_swôches
; ) {

170 
swôch_
 *
this
 = &
swôches
[
i
];

171 
	`lswôch_run
(
this
->
lswôch
);

172 i‡(
	`lswôch_is_Æive
(
this
->
lswôch
)) {

173 
i
++;

175 
	`lswôch_de°roy
(
this
->
lswôch
);

176 
swôches
[
i
] = swôches[--
n_swôches
];

180 
	`unix˘l_£rvî_run
(
unix˘l
);

183 i‡(
n_swôches
 < 
MAX_SWITCHES
) {

184 
i
 = 0; i < 
n_li°íîs
; i++) {

185 
	`pvc⁄n_waô
(
li°íîs
[
i
]);

188 
i
 = 0; i < 
n_swôches
; i++) {

189 
swôch_
 *
sw
 = &
swôches
[
i
];

190 
	`lswôch_waô
(
sw
->
lswôch
);

192 
	`unix˘l_£rvî_waô
(
unix˘l
);

193 
	`pﬁl_block
();

197 
	}
}

200 
	$√w_swôch
(
swôch_
 *
sw
, 
vc⁄n
 *vconn)

202 
lswôch_c⁄fig
 
cfg
;

203 
rc⁄n
 *rconn;

205 
rc⁄n
 = 
	`rc⁄n_¸óã
(60, 0, 
DSCP_DEFAULT
);

206 
	`rc⁄n_c⁄√˘_uƒñübly
(
rc⁄n
, 
vc⁄n
, 
NULL
);

208 
cfg
.
mode
 = (
a˘i⁄_n‹mÆ
 ? 
LSW_NORMAL


209 : 
À¨n_macs
 ? 
LSW_LEARN


210 : 
LSW_FLOOD
);

211 
cfg
.
wûdˇrds
 = wildcards;

212 
cfg
.
max_idÀ
 = 
£t_up_Êows
 ? max_idle : -1;

213 
cfg
.
deÁu…_Êows
 = default_flows;

214 
cfg
.
n_deÁu…_Êows
 =Ç_default_flows;

215 
cfg
.
deÁu…_queue
 = default_queue;

216 
cfg
.
p‹t_queues
 = &port_queues;

217 
cfg
.
muã
 = mute;

218 
sw
->
lswôch
 = 
	`lswôch_¸óã
(
rc⁄n
, &
cfg
);

219 
	}
}

222 
	$add_p‹t_queue
(*
s
)

224 *
ßve_±r
 = 
NULL
;

225 *
p‹t_«me
;

226 *
queue_id
;

228 
p‹t_«me
 = 
	`°πok_r
(
s
, ":", &
ßve_±r
);

229 
queue_id
 = 
	`°πok_r
(
NULL
, "", &
ßve_±r
);

230 i‡(!
queue_id
) {

231 
	`ovs_Áèl
(0, "argumentÅo -Q or --port-queue shouldÅakeÅhe form "

235 i‡(!
	`sim≠_put
(&
p‹t_queues
, 
p‹t_«me
, 
	`©oi
(
queue_id
))) {

236 
	`ovs_Áèl
(0, "<port-name>árguments for -Q or --port-queue must "

239 
	}
}

242 
	$∑r£_›ti⁄s
(
¨gc
, *
¨gv
[])

245 
OPT_MAX_IDLE
 = 
UCHAR_MAX
 + 1,

246 
OPT_PEER_CA_CERT
,

247 
OPT_MUTE
,

248 
OPT_WITH_FLOWS
,

249 
OPT_UNIXCTL
,

250 
VLOG_OPTION_ENUMS
,

251 
DAEMON_OPTION_ENUMS


253 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

254 {"hub", 
no_¨gumít
, 
NULL
, 'H'},

255 {"noÊow", 
no_¨gumít
, 
NULL
, 'n'},

256 {"n‹mÆ", 
no_¨gumít
, 
NULL
, 'N'},

257 {"wûdˇrds", 
›ti⁄Æ_¨gumít
, 
NULL
, 'w'},

258 {"max-idÀ", 
ªquúed_¨gumít
, 
NULL
, 
OPT_MAX_IDLE
},

259 {"muã", 
no_¨gumít
, 
NULL
, 
OPT_MUTE
},

260 {"queue", 
ªquúed_¨gumít
, 
NULL
, 'q'},

261 {"p‹t-queue", 
ªquúed_¨gumít
, 
NULL
, 'Q'},

262 {"wôh-Êows", 
ªquúed_¨gumít
, 
NULL
, 
OPT_WITH_FLOWS
},

263 {"unix˘l", 
ªquúed_¨gumít
, 
NULL
, 
OPT_UNIXCTL
},

264 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

265 {"vîsi⁄", 
no_¨gumít
, 
NULL
, 'V'},

266 
DAEMON_LONG_OPTIONS
,

267 
VLOG_LONG_OPTIONS
,

268 
STREAM_SSL_LONG_OPTIONS
,

269 {"≥î-ˇ-˚π", 
ªquúed_¨gumít
, 
NULL
, 
OPT_PEER_CA_CERT
},

270 {
NULL
, 0, NULL, 0},

272 *
sh‹t_›ti⁄s
 = 
	`l⁄g_›ti⁄s_to_sh‹t_›ti⁄s
(
l⁄g_›ti⁄s
);

275 
ödex±r
;

276 
c
;

278 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
l⁄g_›ti⁄s
, &
ödex±r
);

279 i‡(
c
 == -1) {

283 
c
) {

285 
À¨n_macs
 = 
Ál£
;

289 
£t_up_Êows
 = 
Ál£
;

292 
OPT_MUTE
:

293 
muã
 = 
åue
;

297 
a˘i⁄_n‹mÆ
 = 
åue
;

301 
wûdˇrds
 = 
›èrg
 ? 
	`°πﬁ
(›èrg, 
NULL
, 16Ë: 
UINT32_MAX
;

304 
OPT_MAX_IDLE
:

305 i‡(!
	`°rcmp
(
›èrg
, "permanent")) {

306 
max_idÀ
 = 
OFP_FLOW_PERMANENT
;

308 
max_idÀ
 = 
	`©oi
(
›èrg
);

309 i‡(
max_idÀ
 < 1 || max_idle > 65535) {

310 
	`ovs_Áèl
(0, "--max-idleárgument must be between 1ánd "

317 
deÁu…_queue
 = 
	`©oi
(
›èrg
);

321 
	`add_p‹t_queue
(
›èrg
);

324 
OPT_WITH_FLOWS
:

325 
	`∑r£_oÂ_Êow_mod_fûe
(
›èrg
, 
OFPFC_ADD
, &
deÁu…_Êows
,

326 &
n_deÁu…_Êows
);

329 
OPT_UNIXCTL
:

330 
unix˘l_∑th
 = 
›èrg
;

334 
	`ußge
();

337 
	`ovs_¥öt_vîsi⁄
(
OFP10_VERSION
, OFP10_VERSION);

338 
	`exô
(
EXIT_SUCCESS
);

340 
VLOG_OPTION_HANDLERS


341 
DAEMON_OPTION_HANDLERS


343 
STREAM_SSL_OPTION_HANDLERS


345 
OPT_PEER_CA_CERT
:

346 
	`°ªam_s¶_£t_≥î_ˇ_˚π_fûe
(
›èrg
);

350 
	`exô
(
EXIT_FAILURE
);

353 
	`ab‹t
();

356 
	`‰ì
(
sh‹t_›ti⁄s
);

358 i‡(!
	`sim≠_is_em±y
(&
p‹t_queues
Ë|| 
deÁu…_queue
 !
UINT32_MAX
) {

359 i‡(
a˘i⁄_n‹mÆ
) {

360 
	`ovs_îr‹
(0, "queue IDsáre incompatible with -N or --normal; "

362 
a˘i⁄_n‹mÆ
 = 
Ál£
;

365 i‡(!
À¨n_macs
) {

366 
	`ovs_îr‹
(0, "queue IDsáre incompatible with -H or --hub; "

368 
À¨n_macs
 = 
åue
;

371 
	}
}

374 
	$ußge
()

376 
	`¥ötf
("%s: OpenFlow controller\n"

379 
¥ogøm_«me
,Örogram_name);

380 
	`vc⁄n_ußge
(
åue
,Årue, 
Ál£
);

381 
	`d´m⁄_ußge
();

382 
	`vlog_ußge
();

383 
	`¥ötf
("\nOther options:\n"

395 
	`exô
(
EXIT_SUCCESS
);

396 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/utilities/ovs-dpctl.c

17 
	~<c⁄fig.h
>

18 
	~<¨∑/öë.h
>

19 
	~<as£π.h
>

20 
	~<î∫o.h
>

21 
	~<gë›t.h
>

22 
	~<öây≥s.h
>

23 
	~<sys/sockë.h
>

24 
	~<√t/if.h
>

25 
	~<√töë/ö.h
>

26 
	~<sig«l.h
>

27 
	~<°d¨g.h
>

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

30 
	~<uni°d.h
>

31 
	~<sys/°©.h
>

32 
	~<sys/time.h
>

34 
	~"comm™d-löe.h
"

35 
	~"compûî.h
"

36 
	~"dús.h
"

37 
	~"dpif.h
"

38 
	~"dy«mic-°rög.h
"

39 
	~"Êow.h
"

40 
	~"√tdev.h
"

41 
	~"√éök.h
"

42 
	~"odp-utû.h
"

43 
	~"oÂbuf.h
"

44 
	~"∑ckës.h
"

45 
	~"shash.h
"

46 
	~"sim≠.h
"

47 
	~"sm≠.h
"

48 
	~"s£t.h
"

49 
	~"timevÆ.h
"

50 
	~"utû.h
"

51 
	~"vlog.h
"

53 
VLOG_DEFINE_THIS_MODULE
(
dp˘l
);

56 
boﬁ
 
	g¥öt_°©i°ics
;

62 
	gvîbosôy
;

64 c⁄° 
comm™d
 
	gÆl_comm™ds
[];

66 
	$ußge
(Ë
NO_RETURN
;

67 
	`∑r£_›ti⁄s
(
¨gc
, *
¨gv
[]);

70 
	$maö
(
¨gc
, *
¨gv
[])

72 
	`£t_¥ogøm_«me
(
¨gv
[0]);

73 
	`∑r£_›ti⁄s
(
¨gc
, 
¨gv
);

74 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

75 
	`run_comm™d
(
¨gc
 - 
›töd
, 
¨gv
 + o±öd, 
Æl_comm™ds
);

77 
	}
}

80 
	$∑r£_›ti⁄s
(
¨gc
, *
¨gv
[])

83 
OPT_DUMMY
 = 
UCHAR_MAX
 + 1,

84 
VLOG_OPTION_ENUMS


86 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

87 {"°©i°ics", 
no_¨gumít
, 
NULL
, 's'},

88 {"m‹e", 
no_¨gumít
, 
NULL
, 'm'},

89 {"timeout", 
ªquúed_¨gumít
, 
NULL
, 't'},

90 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

91 {"vîsi⁄", 
no_¨gumít
, 
NULL
, 'V'},

92 
VLOG_LONG_OPTIONS
,

93 {
NULL
, 0, NULL, 0},

95 *
sh‹t_›ti⁄s
 = 
	`l⁄g_›ti⁄s_to_sh‹t_›ti⁄s
(
l⁄g_›ti⁄s
);

98 
timeout
;

99 
c
;

101 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
l⁄g_›ti⁄s
, 
NULL
);

102 i‡(
c
 == -1) {

106 
c
) {

108 
¥öt_°©i°ics
 = 
åue
;

112 
vîbosôy
++;

116 
timeout
 = 
	`°πoul
(
›èrg
, 
NULL
, 10);

117 i‡(
timeout
 <= 0) {

118 
	`ovs_Áèl
(0, "value %s on -t or --timeout isÇotátÜeast 1",

119 
›èrg
);

121 
	`time_Æ¨m
(
timeout
);

126 
	`ußge
();

129 
	`ovs_¥öt_vîsi⁄
(0, 0);

130 
	`exô
(
EXIT_SUCCESS
);

132 
VLOG_OPTION_HANDLERS


135 
	`exô
(
EXIT_FAILURE
);

138 
	`ab‹t
();

141 
	`‰ì
(
sh‹t_›ti⁄s
);

142 
	}
}

145 
	$ußge
()

147 
	`¥ötf
("%s: Open vSwitch datapath management utility\n"

162 
¥ogøm_«me
,Örogram_name);

163 
	`vlog_ußge
();

164 
	`¥ötf
("\nOther options:\n"

168 
	`exô
(
EXIT_SUCCESS
);

169 
	}
}

171 
	$run
(
ªtvÆ
, c⁄° *
mesßge
, ...)

172 
	`PRINTF_FORMAT
(2, 3);

174 
	$run
(
ªtvÆ
, c⁄° *
mesßge
, ...)

176 i‡(
ªtvÆ
) {

177 
va_li°
 
¨gs
;

179 
	`va_°¨t
(
¨gs
, 
mesßge
);

180 
	`ovs_Áèl_vÆi°
(
ªtvÆ
, 
mesßge
, 
¨gs
);

182 
	}
}

184 
dp˘l_add_if
(
¨gc
, *
¨gv
[]);

186 
	$if_up
(c⁄° *
√tdev_«me
)

188 
√tdev
 *netdev;

189 
ªtvÆ
;

191 
ªtvÆ
 = 
	`√tdev_›í
(
√tdev_«me
, "sy°em", &
√tdev
);

192 i‡(!
ªtvÆ
) {

193 
ªtvÆ
 = 
	`√tdev_tu∫_Êags_⁄
(
√tdev
, 
NETDEV_UP
, 
åue
);

194 
	`√tdev_˛o£
(
√tdev
);

196  
ªtvÆ
;

197 
	}
}

200 
	$∑r£d_dpif_›í
(c⁄° *
¨g_
, 
boﬁ
 
¸óã
, 
dpif
 **
dpiÂ
)

202 
ªsu…
;

203 *
«me
, *
ty≥
;

205 
	`dp_∑r£_«me
(
¨g_
, &
«me
, &
ty≥
);

207 i‡(
¸óã
) {

208 
ªsu…
 = 
	`dpif_¸óã
(
«me
, 
ty≥
, 
dpiÂ
);

210 
ªsu…
 = 
	`dpif_›í
(
«me
, 
ty≥
, 
dpiÂ
);

213 
	`‰ì
(
«me
);

214 
	`‰ì
(
ty≥
);

215  
ªsu…
;

216 
	}
}

219 
	$dp˘l_add_dp
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

221 
dpif
 *dpif;

222 
	`run
(
	`∑r£d_dpif_›í
(
¨gv
[1], 
åue
, &
dpif
), "add_dp");

223 
	`dpif_˛o£
(
dpif
);

224 i‡(
¨gc
 > 2) {

225 
	`dp˘l_add_if
(
¨gc
, 
¨gv
);

227 
	}
}

230 
	$dp˘l_dñ_dp
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

232 
dpif
 *dpif;

233 
	`run
(
	`∑r£d_dpif_›í
(
¨gv
[1], 
Ál£
, &
dpif
), "opening datapath");

234 
	`run
(
	`dpif_dñëe
(
dpif
), "del_dp");

235 
	`dpif_˛o£
(
dpif
);

236 
	}
}

239 
	$dp˘l_add_if
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

241 
boﬁ
 
Áûuª
 = 
Ál£
;

242 
dpif
 *dpif;

243 
i
;

245 
	`run
(
	`∑r£d_dpif_›í
(
¨gv
[1], 
Ál£
, &
dpif
), "opening datapath");

246 
i
 = 2; i < 
¨gc
; i++) {

247 c⁄° *
«me
, *
ty≥
;

248 *
ßve_±r
 = 
NULL
;

249 
√tdev
 *√tdev = 
NULL
;

250 
sm≠
 
¨gs
;

251 
uöt16_t
 
p‹t_no
 = 
UINT16_MAX
;

252 *
›ti⁄
;

253 
îr‹
;

255 
«me
 = 
	`°πok_r
(
¨gv
[
i
], ",", &
ßve_±r
);

256 
ty≥
 = "system";

258 i‡(!
«me
) {

259 
	`ovs_îr‹
(0, "%†i†nŸá vÆidÇëw‹k devi˚Çame", 
¨gv
[
i
]);

260 
Áûuª
 = 
åue
;

264 
	`sm≠_öô
(&
¨gs
);

265 (
›ti⁄
 = 
	`°πok_r
(
NULL
, ",", &
ßve_±r
)) != NULL) {

266 *
ßve_±r_2
 = 
NULL
;

267 *
key
, *
vÆue
;

269 
key
 = 
	`°πok_r
(
›ti⁄
, "=", &
ßve_±r_2
);

270 
vÆue
 = 
	`°πok_r
(
NULL
, "", &
ßve_±r_2
);

271 i‡(!
vÆue
) {

272 
vÆue
 = "";

275 i‡(!
	`°rcmp
(
key
, "type")) {

276 
ty≥
 = 
vÆue
;

277 } i‡(!
	`°rcmp
(
key
, "port_no")) {

278 
p‹t_no
 = 
	`©oi
(
vÆue
);

279 } i‡(!
	`sm≠_add_⁄˚
(&
¨gs
, 
key
, 
vÆue
)) {

280 
	`ovs_îr‹
(0, "du∂iˇã \"%s\" o±i⁄", 
key
);

284 
îr‹
 = 
	`√tdev_›í
(
«me
, 
ty≥
, &
√tdev
);

285 i‡(
îr‹
) {

286 
	`ovs_îr‹
(
îr‹
, "%s: faûedÅÿ›íÇëw‹k devi˚", 
«me
);

287 
√xt
;

290 
îr‹
 = 
	`√tdev_£t_c⁄fig
(
√tdev
, &
¨gs
);

291 i‡(
îr‹
) {

292 
	`ovs_îr‹
(
îr‹
, "%s: faûedÅÿc⁄figuªÇëw‹k devi˚", 
«me
);

293 
√xt
;

296 
îr‹
 = 
	`dpif_p‹t_add
(
dpif
, 
√tdev
, &
p‹t_no
);

297 i‡(
îr‹
) {

298 
	`ovs_îr‹
(
îr‹
, "addög %†tÿ%†Áûed", 
«me
, 
¨gv
[1]);

299 
√xt
;

302 
îr‹
 = 
	`if_up
(
«me
);

304 
√xt
:

305 
	`√tdev_˛o£
(
√tdev
);

306 i‡(
îr‹
) {

307 
Áûuª
 = 
åue
;

310 
	`dpif_˛o£
(
dpif
);

311 i‡(
Áûuª
) {

312 
	`exô
(
EXIT_FAILURE
);

314 
	}
}

317 
	$dp˘l_£t_if
(
¨gc
, *
¨gv
[])

319 
boﬁ
 
Áûuª
 = 
Ál£
;

320 
dpif
 *dpif;

321 
i
;

323 
	`run
(
	`∑r£d_dpif_›í
(
¨gv
[1], 
Ál£
, &
dpif
), "opening datapath");

324 
i
 = 2; i < 
¨gc
; i++) {

325 
√tdev
 *√tdev = 
NULL
;

326 
dpif_p‹t
 dpif_port;

327 *
ßve_±r
 = 
NULL
;

328 *
ty≥
 = 
NULL
;

329 c⁄° *
«me
;

330 
sm≠
 
¨gs
;

331 
uöt32_t
 
p‹t_no
;

332 *
›ti⁄
;

333 
îr‹
;

335 
«me
 = 
	`°πok_r
(
¨gv
[
i
], ",", &
ßve_±r
);

336 i‡(!
«me
) {

337 
	`ovs_îr‹
(0, "%†i†nŸá vÆidÇëw‹k devi˚Çame", 
¨gv
[
i
]);

338 
Áûuª
 = 
åue
;

343 
îr‹
 = 
	`dpif_p‹t_quîy_by_«me
(
dpif
, 
«me
, &
dpif_p‹t
);

344 i‡(
îr‹
) {

345 
	`ovs_îr‹
(
îr‹
, "%s: faûedÅÿquîyÖ‹àö %s", 
«me
, 
¨gv
[1]);

346 
√xt
;

348 
ty≥
 = 
	`x°rdup
(
dpif_p‹t
.type);

349 
p‹t_no
 = 
dpif_p‹t
.port_no;

350 
	`dpif_p‹t_de°roy
(&
dpif_p‹t
);

353 
îr‹
 = 
	`√tdev_›í
(
«me
, 
ty≥
, &
√tdev
);

354 i‡(
îr‹
) {

355 
	`ovs_îr‹
(
îr‹
, "%s: faûedÅÿ›íÇëw‹k devi˚", 
«me
);

356 
√xt
;

359 
	`sm≠_öô
(&
¨gs
);

360 
îr‹
 = 
	`√tdev_gë_c⁄fig
(
√tdev
, &
¨gs
);

361 i‡(
îr‹
) {

362 
	`ovs_îr‹
(
îr‹
, "%s: faûedÅÿ„tch c⁄figuøti⁄", 
«me
);

363 
√xt
;

367 (
›ti⁄
 = 
	`°πok_r
(
NULL
, ",", &
ßve_±r
)) != NULL) {

368 *
ßve_±r_2
 = 
NULL
;

369 *
key
, *
vÆue
;

371 
key
 = 
	`°πok_r
(
›ti⁄
, "=", &
ßve_±r_2
);

372 
vÆue
 = 
	`°πok_r
(
NULL
, "", &
ßve_±r_2
);

373 i‡(!
vÆue
) {

374 
vÆue
 = "";

377 i‡(!
	`°rcmp
(
key
, "type")) {

378 i‡(
	`°rcmp
(
vÆue
, 
ty≥
)) {

379 
	`ovs_îr‹
(0, "%s: can't changeÅype from %sÅo %s",

380 
«me
, 
ty≥
, 
vÆue
);

381 
Áûuª
 = 
åue
;

383 } i‡(!
	`°rcmp
(
key
, "port_no")) {

384 i‡(
p‹t_no
 !
	`©oi
(
vÆue
)) {

385 
	`ovs_îr‹
(0, "%s: can't changeÖortÇumber from "

386 "%"
PRIu32
"Åo %d",

387 
«me
, 
p‹t_no
, 
	`©oi
(
vÆue
));

388 
Áûuª
 = 
åue
;

390 } i‡(
vÆue
[0] == '\0') {

391 
	`sm≠_ªmove
(&
¨gs
, 
key
);

393 
	`sm≠_ª∂a˚
(&
¨gs
, 
key
, 
vÆue
);

398 
îr‹
 = 
	`√tdev_£t_c⁄fig
(
√tdev
, &
¨gs
);

399 
	`sm≠_de°roy
(&
¨gs
);

400 i‡(
îr‹
) {

401 
	`ovs_îr‹
(
îr‹
, "%s: faûedÅÿc⁄figuªÇëw‹k devi˚", 
«me
);

402 
√xt
;

405 
√xt
:

406 
	`‰ì
(
ty≥
);

407 
	`√tdev_˛o£
(
√tdev
);

408 i‡(
îr‹
) {

409 
Áûuª
 = 
åue
;

412 
	`dpif_˛o£
(
dpif
);

413 i‡(
Áûuª
) {

414 
	`exô
(
EXIT_FAILURE
);

416 
	}
}

418 
boﬁ


419 
	$gë_p‹t_numbî
(
dpif
 *dpif, c⁄° *
«me
, 
uöt16_t
 *
p‹t
)

421 
dpif_p‹t
 dpif_port;

423 i‡(!
	`dpif_p‹t_quîy_by_«me
(
dpif
, 
«me
, &
dpif_p‹t
)) {

424 *
p‹t
 = 
dpif_p‹t
.
p‹t_no
;

425 
	`dpif_p‹t_de°roy
(&
dpif_p‹t
);

426  
åue
;

428 
	`ovs_îr‹
(0, "nÿp‹à«med %s", 
«me
);

429  
Ál£
;

431 
	}
}

434 
	$dp˘l_dñ_if
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

436 
boﬁ
 
Áûuª
 = 
Ál£
;

437 
dpif
 *dpif;

438 
i
;

440 
	`run
(
	`∑r£d_dpif_›í
(
¨gv
[1], 
Ál£
, &
dpif
), "opening datapath");

441 
i
 = 2; i < 
¨gc
; i++) {

442 c⁄° *
«me
 = 
¨gv
[
i
];

443 
uöt16_t
 
p‹t
;

444 
îr‹
;

446 i‡(!
«me
[
	`°r•n
(name, "0123456789")]) {

447 
p‹t
 = 
	`©oi
(
«me
);

448 } i‡(!
	`gë_p‹t_numbî
(
dpif
, 
«me
, &
p‹t
)) {

449 
Áûuª
 = 
åue
;

453 
îr‹
 = 
	`dpif_p‹t_dñ
(
dpif
, 
p‹t
);

454 i‡(
îr‹
) {

455 
	`ovs_îr‹
(
îr‹
, "dñëögÖ‹à%†‰om %†Áûed", 
«me
, 
¨gv
[1]);

456 
Áûuª
 = 
åue
;

459 
	`dpif_˛o£
(
dpif
);

460 i‡(
Áûuª
) {

461 
	`exô
(
EXIT_FAILURE
);

463 
	}
}

466 
	$¥öt_°©
(c⁄° *
Àadî
, 
uöt64_t
 
vÆue
)

468 
	`Âuts
(
Àadî
, 
°dout
);

469 i‡(
vÆue
 !
UINT64_MAX
) {

470 
	`¥ötf
("%"
PRIu64
, 
vÆue
);

472 
	`putch¨
('?');

474 
	}
}

477 
	$¥öt_hum™_size
(
uöt64_t
 
vÆue
)

479 i‡(
vÆue
 =
UINT64_MAX
) {

481 } i‡(
vÆue
 >= 1024ULL * 1024 * 1024 * 1024) {

482 
	`¥ötf
(" (%.1‡TiB)", 
vÆue
 / (1024.0 * 1024 * 1024 * 1024));

483 } i‡(
vÆue
 >= 1024ULL * 1024 * 1024) {

484 
	`¥ötf
(" (%.1‡GiB)", 
vÆue
 / (1024.0 * 1024 * 1024));

485 } i‡(
vÆue
 >= 1024ULL * 1024) {

486 
	`¥ötf
(" (%.1‡MiB)", 
vÆue
 / (1024.0 * 1024));

487 } i‡(
vÆue
 >= 1024) {

488 
	`¥ötf
(" (%.1‡KiB)", 
vÆue
 / 1024.0);

490 
	}
}

493 
	$show_dpif
(
dpif
 *dpif)

495 
dpif_p‹t_dump
 
dump
;

496 
dpif_p‹t
 dpif_port;

497 
dpif_dp_°©s
 
°©s
;

498 
√tdev
 *netdev;

500 
	`¥ötf
("%s:\n", 
	`dpif_«me
(
dpif
));

501 i‡(!
	`dpif_gë_dp_°©s
(
dpif
, &
°©s
)) {

502 
	`¥ötf
("\éookups: hô:%"
PRIu64
" missed:%"PRIu64"Üost:%"PRIu64"\n"

503 "\tÊows: %"
PRIu64
"\n",

504 
°©s
.
n_hô
, sèts.
n_mis£d
, sèts.
n_lo°
, sèts.
n_Êows
);

506 
	`DPIF_PORT_FOR_EACH
 (&
dpif_p‹t
, &
dump
, 
dpif
) {

507 
	`¥ötf
("\ç‹à%u: %s", 
dpif_p‹t
.
p‹t_no
, dpif_p‹t.
«me
);

509 i‡(
	`°rcmp
(
dpif_p‹t
.
ty≥
, "system")) {

510 
îr‹
;

512 
	`¥ötf
 (" (%s", 
dpif_p‹t
.
ty≥
);

514 
îr‹
 = 
	`√tdev_›í
(
dpif_p‹t
.
«me
, dpif_p‹t.
ty≥
, &
√tdev
);

515 i‡(!
îr‹
) {

516 
sm≠
 
c⁄fig
;

518 
	`sm≠_öô
(&
c⁄fig
);

519 
îr‹
 = 
	`√tdev_gë_c⁄fig
(
√tdev
, &
c⁄fig
);

520 i‡(!
îr‹
) {

521 c⁄° 
sm≠_node
 **
nodes
;

522 
size_t
 
i
;

524 
nodes
 = 
	`sm≠_s‹t
(&
c⁄fig
);

525 
i
 = 0; i < 
	`sm≠_cou¡
(&
c⁄fig
); i++) {

526 c⁄° 
sm≠_node
 *
node
 = 
nodes
[
i
];

527 
	`¥ötf
("%¯%s=%s", 
i
 ? ',' : ':', 
node
->
key
,

528 
node
->
vÆue
);

530 
	`‰ì
(
nodes
);

532 
	`¥ötf
(", couldÇotÑetrieve configuration (%s)",

533 
	`°ªº‹
(
îr‹
));

535 
	`sm≠_de°roy
(&
c⁄fig
);

537 
	`√tdev_˛o£
(
√tdev
);

539 
	`¥ötf
(": o≥¿Áûed (%s)", 
	`°ªº‹
(
îr‹
));

541 
	`putch¨
(')');

543 
	`putch¨
('\n');

545 i‡(
¥öt_°©i°ics
) {

546 
√tdev_°©s
 
s
;

547 
îr‹
;

549 
îr‹
 = 
	`√tdev_›í
(
dpif_p‹t
.
«me
, dpif_p‹t.
ty≥
, &
√tdev
);

550 i‡(
îr‹
) {

551 
	`¥ötf
(", o≥¿Áûed (%s)", 
	`°ªº‹
(
îr‹
));

554 
îr‹
 = 
	`√tdev_gë_°©s
(
√tdev
, &
s
);

555 i‡(
îr‹
) {

556 
	`¥ötf
(", couldÇŸÑërõvê°©†(%s)", 
	`°ªº‹
(
îr‹
));

560 
	`√tdev_˛o£
(
√tdev
);

561 
	`¥öt_°©
("\t\tRXÖackës:", 
s
.
rx_∑ckës
);

562 
	`¥öt_°©
("Éº‹s:", 
s
.
rx_îr‹s
);

563 
	`¥öt_°©
(" dr›≥d:", 
s
.
rx_dr›≥d
);

564 
	`¥öt_°©
(" ovîruns:", 
s
.
rx_ovî_îr‹s
);

565 
	`¥öt_°©
(" føme:", 
s
.
rx_‰ame_îr‹s
);

566 
	`¥ötf
("\n");

568 
	`¥öt_°©
("\t\tTXÖackës:", 
s
.
tx_∑ckës
);

569 
	`¥öt_°©
("Éº‹s:", 
s
.
tx_îr‹s
);

570 
	`¥öt_°©
(" dr›≥d:", 
s
.
tx_dr›≥d
);

571 
	`¥öt_°©
("áb‹ãd:", 
s
.
tx_ab‹ãd_îr‹s
);

572 
	`¥öt_°©
(" c¨rõr:", 
s
.
tx_ˇºõr_îr‹s
);

573 
	`¥ötf
("\n");

575 
	`¥öt_°©
("\t\tcﬁlisi⁄s:", 
s
.
cﬁlisi⁄s
);

576 
	`¥ötf
("\n");

578 
	`¥öt_°©
("\t\tRX byãs:", 
s
.
rx_byãs
);

579 
	`¥öt_hum™_size
(
s
.
rx_byãs
);

580 
	`¥öt_°©
(" TX byãs:", 
s
.
tx_byãs
);

581 
	`¥öt_hum™_size
(
s
.
tx_byãs
);

582 
	`¥ötf
("\n");

585 
	`dpif_˛o£
(
dpif
);

586 
	}
}

589 
	$dp˘l_show
(
¨gc
, *
¨gv
[])

591 
boﬁ
 
Áûuª
 = 
Ál£
;

592 i‡(
¨gc
 > 1) {

593 
i
;

594 
i
 = 1; i < 
¨gc
; i++) {

595 c⁄° *
«me
 = 
¨gv
[
i
];

596 
dpif
 *dpif;

597 
îr‹
;

599 
îr‹
 = 
	`∑r£d_dpif_›í
(
«me
, 
Ál£
, &
dpif
);

600 i‡(!
îr‹
) {

601 
	`show_dpif
(
dpif
);

603 
	`ovs_îr‹
(
îr‹
, "›íög d©≠©h %†Áûed", 
«me
);

604 
Áûuª
 = 
åue
;

608 
s£t
 
ty≥s
;

609 c⁄° *
ty≥
;

611 
	`s£t_öô
(&
ty≥s
);

612 
	`dp_íumî©e_ty≥s
(&
ty≥s
);

613 
	`SSET_FOR_EACH
 (
ty≥
, &
ty≥s
) {

614 
s£t
 
«mes
;

615 c⁄° *
«me
;

617 
	`s£t_öô
(&
«mes
);

618 i‡(
	`dp_íumî©e_«mes
(
ty≥
, &
«mes
)) {

619 
Áûuª
 = 
åue
;

622 
	`SSET_FOR_EACH
 (
«me
, &
«mes
) {

623 
dpif
 *dpif;

624 
îr‹
;

626 
îr‹
 = 
	`dpif_›í
(
«me
, 
ty≥
, &
dpif
);

627 i‡(!
îr‹
) {

628 
	`show_dpif
(
dpif
);

630 
	`ovs_îr‹
(
îr‹
, "›íög d©≠©h %†Áûed", 
«me
);

631 
Áûuª
 = 
åue
;

634 
	`s£t_de°roy
(&
«mes
);

636 
	`s£t_de°roy
(&
ty≥s
);

638 i‡(
Áûuª
) {

639 
	`exô
(
EXIT_FAILURE
);

641 
	}
}

644 
	$dp˘l_dump_dps
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

646 
s£t
 
dpif_«mes
, 
dpif_ty≥s
;

647 c⁄° *
ty≥
;

648 
îr‹
 = 0;

650 
	`s£t_öô
(&
dpif_«mes
);

651 
	`s£t_öô
(&
dpif_ty≥s
);

652 
	`dp_íumî©e_ty≥s
(&
dpif_ty≥s
);

654 
	`SSET_FOR_EACH
 (
ty≥
, &
dpif_ty≥s
) {

655 c⁄° *
«me
;

656 
ªtvÆ
;

658 
ªtvÆ
 = 
	`dp_íumî©e_«mes
(
ty≥
, &
dpif_«mes
);

659 i‡(
ªtvÆ
) {

660 
îr‹
 = 
ªtvÆ
;

663 
	`SSET_FOR_EACH
 (
«me
, &
dpif_«mes
) {

664 
dpif
 *dpif;

665 i‡(!
	`dpif_›í
(
«me
, 
ty≥
, &
dpif
)) {

666 
	`¥ötf
("%s\n", 
	`dpif_«me
(
dpif
));

667 
	`dpif_˛o£
(
dpif
);

672 
	`s£t_de°roy
(&
dpif_«mes
);

673 
	`s£t_de°roy
(&
dpif_ty≥s
);

674 i‡(
îr‹
) {

675 
	`exô
(
EXIT_FAILURE
);

677 
	}
}

680 
	$dp˘l_dump_Êows
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

682 c⁄° 
dpif_Êow_°©s
 *
°©s
;

683 c⁄° 
∆©å
 *
a˘i⁄s
;

684 
dpif_Êow_dump
 
dump
;

685 c⁄° 
∆©å
 *
key
;

686 
size_t
 
a˘i⁄s_Àn
;

687 
dpif
 *dpif;

688 
size_t
 
key_Àn
;

689 
ds
 ds;

691 
	`run
(
	`∑r£d_dpif_›í
(
¨gv
[1], 
Ál£
, &
dpif
), "opening datapath");

693 
	`ds_öô
(&
ds
);

694 
	`dpif_Êow_dump_°¨t
(&
dump
, 
dpif
);

695 
	`dpif_Êow_dump_√xt
(&
dump
, &
key
, &
key_Àn
,

696 &
a˘i⁄s
, &
a˘i⁄s_Àn
, &
°©s
)) {

697 
	`ds_˛ór
(&
ds
);

698 
	`odp_Êow_key_f‹m©
(
key
, 
key_Àn
, &
ds
);

699 
	`ds_put_c°r
(&
ds
, ", ");

700 
	`dpif_Êow_°©s_f‹m©
(
°©s
, &
ds
);

701 
	`ds_put_c°r
(&
ds
, ",áctions:");

702 
	`f‹m©_odp_a˘i⁄s
(&
ds
, 
a˘i⁄s
, 
a˘i⁄s_Àn
);

703 
	`¥ötf
("%s\n", 
	`ds_c°r
(&
ds
));

705 
	`dpif_Êow_dump_d⁄e
(&
dump
);

706 
	`ds_de°roy
(&
ds
);

707 
	`dpif_˛o£
(
dpif
);

708 
	}
}

711 
	$dp˘l_dñ_Êows
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

713 
dpif
 *dpif;

715 
	`run
(
	`∑r£d_dpif_›í
(
¨gv
[1], 
Ál£
, &
dpif
), "opening datapath");

716 
	`run
(
	`dpif_Êow_Êush
(
dpif
), "deletingáll flows");

717 
	`dpif_˛o£
(
dpif
);

718 
	}
}

721 
	$dp˘l_hñp
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

723 
	`ußge
();

724 
	}
}

729 
	$dp˘l_∑r£_a˘i⁄s
(
¨gc
, *
¨gv
[])

731 
i
;

733 
i
 = 1; i < 
¨gc
; i++) {

734 
oÂbuf
 
a˘i⁄s
;

735 
ds
 
s
;

737 
	`oÂbuf_öô
(&
a˘i⁄s
, 0);

738 
	`run
(
	`odp_a˘i⁄s_‰om_°rög
(
¨gv
[
i
], 
NULL
, &
a˘i⁄s
),

741 
	`ds_öô
(&
s
);

742 
	`f‹m©_odp_a˘i⁄s
(&
s
, 
a˘i⁄s
.
d©a
,á˘i⁄s.
size
);

743 
	`puts
(
	`ds_c°r
(&
s
));

744 
	`ds_de°roy
(&
s
);

746 
	`oÂbuf_unöô
(&
a˘i⁄s
);

748 
	}
}

750 
	sa˘i⁄s_f‹_Êow
 {

751 
hm≠_node
 
	mhm≠_node
;

752 
Êow
 
	mÊow
;

753 
oÂbuf
 
	ma˘i⁄s
;

756 
a˘i⁄s_f‹_Êow
 *

757 
	$gë_a˘i⁄s_f‹_Êow
(
hm≠
 *
a˘i⁄s_≥r_Êow
, c⁄° 
Êow
 *flow)

759 
uöt32_t
 
hash
 = 
	`Êow_hash
(
Êow
, 0);

760 
a˘i⁄s_f‹_Êow
 *
af
;

762 
	`HMAP_FOR_EACH_WITH_HASH
 (
af
, 
hm≠_node
, 
hash
, 
a˘i⁄s_≥r_Êow
) {

763 i‡(
	`Êow_equÆ
(&
af
->
Êow
, flow)) {

764  
af
;

768 
af
 = 
	`xmÆloc
( *af);

769 
af
->
Êow
 = *flow;

770 
	`oÂbuf_öô
(&
af
->
a˘i⁄s
, 0);

771 
	`hm≠_ö£π
(
a˘i⁄s_≥r_Êow
, &
af
->
hm≠_node
, 
hash
);

772  
af
;

773 
	}
}

776 
	$com∑ª_a˘i⁄s_f‹_Êow
(c⁄° *
a_
, c⁄° *
b_
)

778 
a˘i⁄s_f‹_Êow
 *c⁄° *
a
 = 
a_
;

779 
a˘i⁄s_f‹_Êow
 *c⁄° *
b
 = 
b_
;

781  
	`Êow_com∑ª_3way
(&(*
a
)->
Êow
, &(*
b
)->flow);

782 
	}
}

785 
	$com∑ª_ouçut_a˘i⁄s
(c⁄° *
a_
, c⁄° *
b_
)

787 c⁄° 
∆©å
 *
a
 = 
a_
;

788 c⁄° 
∆©å
 *
b
 = 
b_
;

789 
uöt32_t
 
a_p‹t
 = 
	`∆_©å_gë_u32
(
a
);

790 
uöt32_t
 
b_p‹t
 = 
	`∆_©å_gë_u32
(
b
);

792  
a_p‹t
 < 
b_p‹t
 ? -1 :á_port > b_port;

793 
	}
}

796 
	$s‹t_ouçut_a˘i⁄s__
(
∆©å
 *
fú°
, ∆©å *
íd
)

798 
size_t
 
byãs
 = (
uöt8_t
 *Ë
íd
 - (uöt8_à*Ë
fú°
;

799 
size_t
 
n
 = 
byãs
 / 
NL_A_U32_SIZE
;

801 
	`as£π
(
byãs
 % 
NL_A_U32_SIZE
 == 0);

802 
	`qs‹t
(
fú°
, 
n
, 
NL_A_U32_SIZE
, 
com∑ª_ouçut_a˘i⁄s
);

803 
	}
}

806 
	$s‹t_ouçut_a˘i⁄s
(
∆©å
 *
a˘i⁄s
, 
size_t
 
Àngth
)

808 
∆©å
 *
fú°_ouçut
 = 
NULL
;

809 
∆©å
 *
a
;

810 
À·
;

812 
	`NL_ATTR_FOR_EACH
 (
a
, 
À·
, 
a˘i⁄s
, 
Àngth
) {

813 i‡(
	`∆_©å_ty≥
(
a
Ë=
OVS_ACTION_ATTR_OUTPUT
) {

814 i‡(!
fú°_ouçut
) {

815 
fú°_ouçut
 = 
a
;

818 i‡(
fú°_ouçut
) {

819 
	`s‹t_ouçut_a˘i⁄s__
(
fú°_ouçut
, 
a
);

820 
fú°_ouçut
 = 
NULL
;

824 i‡(
fú°_ouçut
) {

825 
uöt8_t
 *
íd
 = (uöt8_à*Ë
a˘i⁄s
 + 
Àngth
;

826 
	`s‹t_ouçut_a˘i⁄s__
(
fú°_ouçut
, (
∆©å
 *Ë
íd
);

828 
	}
}

841 
	$dp˘l_n‹mÆize_a˘i⁄s
(
¨gc
, *
¨gv
[])

843 
sim≠
 
p‹t_«mes
;

844 
oÂbuf
 
keybuf
;

845 
Êow
 flow;

846 
oÂbuf
 
odp_a˘i⁄s
;

847 
hm≠
 
a˘i⁄s_≥r_Êow
;

848 
a˘i⁄s_f‹_Êow
 **
afs
;

849 
a˘i⁄s_f‹_Êow
 *
af
;

850 
∆©å
 *
a
;

851 
size_t
 
n_afs
;

852 
ds
 
s
;

853 
À·
;

854 
i
;

856 
	`ds_öô
(&
s
);

858 
	`sim≠_öô
(&
p‹t_«mes
);

859 
i
 = 3; i < 
¨gc
; i++) {

860 
«me
[16];

861 
numbî
;

862 
n
 = -1;

864 i‡(
	`ssˇnf
(
¨gv
[
i
], "%15[^=]=%d%n", 
«me
, &
numbî
, &
n
) > 0 &&Ç > 0) {

865 
uöçå_t
 
n
 = 
numbî
;

866 
	`sim≠_put
(&
p‹t_«mes
, 
«me
, 
n
);

868 
	`ovs_Áèl
(0, "%s:Éx≥˘ed NAME=NUMBER", 
¨gv
[
i
]);

873 
	`oÂbuf_öô
(&
keybuf
, 0);

874 
	`run
(
	`odp_Êow_key_‰om_°rög
(
¨gv
[1], &
p‹t_«mes
, &
keybuf
),

877 
	`ds_˛ór
(&
s
);

878 
	`odp_Êow_key_f‹m©
(
keybuf
.
d©a
, keybuf.
size
, &
s
);

879 
	`¥ötf
("öpuàÊow: %s\n", 
	`ds_c°r
(&
s
));

881 
	`run
(
	`odp_Êow_key_to_Êow
(
keybuf
.
d©a
, keybuf.
size
, &
Êow
),

883 
	`oÂbuf_unöô
(&
keybuf
);

886 
	`oÂbuf_öô
(&
odp_a˘i⁄s
, 0);

887 
	`run
(
	`odp_a˘i⁄s_‰om_°rög
(
¨gv
[2], &
p‹t_«mes
, &
odp_a˘i⁄s
),

890 i‡(
vîbosôy
) {

891 
	`ds_˛ór
(&
s
);

892 
	`f‹m©_odp_a˘i⁄s
(&
s
, 
odp_a˘i⁄s
.
d©a
, odp_a˘i⁄s.
size
);

893 
	`¥ötf
("öpuàa˘i⁄s: %s\n", 
	`ds_c°r
(&
s
));

896 
	`hm≠_öô
(&
a˘i⁄s_≥r_Êow
);

897 
	`NL_ATTR_FOR_EACH
 (
a
, 
À·
, 
odp_a˘i⁄s
.
d©a
, odp_a˘i⁄s.
size
) {

898 i‡(
	`∆_©å_ty≥
(
a
Ë=
OVS_ACTION_ATTR_POP_VLAN
) {

899 
Êow
.
vœn_tci
 = 
	`ht⁄s
(0);

903 i‡(
	`∆_©å_ty≥
(
a
Ë=
OVS_ACTION_ATTR_PUSH_VLAN
) {

904 c⁄° 
ovs_a˘i⁄_push_vœn
 *
push
;

906 
push
 = 
	`∆_©å_gë_un•ec
(
a
,  *push);

907 
Êow
.
vœn_tci
 = 
push
->vlan_tci;

911 
af
 = 
	`gë_a˘i⁄s_f‹_Êow
(&
a˘i⁄s_≥r_Êow
, &
Êow
);

912 
	`∆_msg_put_un•ec
(&
af
->
a˘i⁄s
, 
	`∆_©å_ty≥
(
a
),

913 
	`∆_©å_gë
(
a
), 
	`∆_©å_gë_size
(a));

916 
n_afs
 = 
	`hm≠_cou¡
(&
a˘i⁄s_≥r_Êow
);

917 
afs
 = 
	`xmÆloc
(
n_afs
 *  *afs);

918 
i
 = 0;

919 
	`HMAP_FOR_EACH
 (
af
, 
hm≠_node
, &
a˘i⁄s_≥r_Êow
) {

920 
afs
[
i
++] = 
af
;

922 
	`as£π
(
i
 =
n_afs
);

924 
	`qs‹t
(
afs
, 
n_afs
,  *afs, 
com∑ª_a˘i⁄s_f‹_Êow
);

926 
i
 = 0; i < 
n_afs
; i++) {

927 c⁄° 
a˘i⁄s_f‹_Êow
 *
af
 = 
afs
[
i
];

929 
	`s‹t_ouçut_a˘i⁄s
(
af
->
a˘i⁄s
.
d©a
,áf->a˘i⁄s.
size
);

931 i‡(
af
->
Êow
.
vœn_tci
 !
	`ht⁄s
(0)) {

932 
	`¥ötf
("vœn(vid=%"
PRIu16
",pcp=%d): ",

933 
	`vœn_tci_to_vid
(
af
->
Êow
.
vœn_tci
),

934 
	`vœn_tci_to_p˝
(
af
->
Êow
.
vœn_tci
));

936 
	`¥ötf
("no vlan: ");

939 
	`ds_˛ór
(&
s
);

940 
	`f‹m©_odp_a˘i⁄s
(&
s
, 
af
->
a˘i⁄s
.
d©a
,áf->a˘i⁄s.
size
);

941 
	`puts
(
	`ds_c°r
(&
s
));

943 
	`ds_de°roy
(&
s
);

944 
	}
}

946 c⁄° 
comm™d
 
	gÆl_comm™ds
[] = {

947 { "add-dp", 1, 
INT_MAX
, 
dp˘l_add_dp
 },

948 { "dñ-dp", 1, 1, 
dp˘l_dñ_dp
 },

949 { "add-if", 2, 
INT_MAX
, 
dp˘l_add_if
 },

950 { "dñ-if", 2, 
INT_MAX
, 
dp˘l_dñ_if
 },

951 { "£t-if", 2, 
INT_MAX
, 
dp˘l_£t_if
 },

952 { "dump-dps", 0, 0, 
dp˘l_dump_dps
 },

953 { "show", 0, 
INT_MAX
, 
dp˘l_show
 },

954 { "dump-Êows", 1, 1, 
dp˘l_dump_Êows
 },

955 { "dñ-Êows", 1, 1, 
dp˘l_dñ_Êows
 },

956 { "hñp", 0, 
INT_MAX
, 
dp˘l_hñp
 },

959 { "∑r£-a˘i⁄s", 1, 
INT_MAX
, 
dp˘l_∑r£_a˘i⁄s
 },

960 { "n‹mÆize-a˘i⁄s", 2, 
INT_MAX
, 
dp˘l_n‹mÆize_a˘i⁄s
 },

962 { 
NULL
, 0, 0, NULL },

	@/home/lsch/mytest/openvswitch-1.9.0/utilities/ovs-ofctl.c

17 
	~<c⁄fig.h
>

18 
	~<˘y≥.h
>

19 
	~<î∫o.h
>

20 
	~<gë›t.h
>

21 
	~<öây≥s.h
>

22 
	~<sys/sockë.h
>

23 
	~<√t/if.h
>

24 
	~<sig«l.h
>

25 
	~<°dlib.h
>

26 
	~<°rög.h
>

27 
	~<uni°d.h
>

28 
	~<sys/f˙é.h
>

29 
	~<sys/°©.h
>

30 
	~<sys/time.h
>

32 
	~"byã-‹dî.h
"

33 
	~"˛assifõr.h
"

34 
	~"comm™d-löe.h
"

35 
	~"d´m⁄.h
"

36 
	~"compûî.h
"

37 
	~"dús.h
"

38 
	~"dy«mic-°rög.h
"

39 
	~"nx-m©ch.h
"

40 
	~"odp-utû.h
"

41 
	~"oÂ-a˘i⁄s.h
"

42 
	~"oÂ-îr‹s.h
"

43 
	~"oÂ-msgs.h
"

44 
	~"oÂ-∑r£.h
"

45 
	~"oÂ-¥öt.h
"

46 
	~"oÂ-utû.h
"

47 
	~"oÂbuf.h
"

48 
	~"oÂrŸo/oÂrŸo.h
"

49 
	~"›íÊow/nicúa-ext.h
"

50 
	~"›íÊow/›íÊow.h
"

51 
	~"∑ckës.h
"

52 
	~"pﬁl-lo›.h
"

53 
	~"øndom.h
"

54 
	~"°ªam-s¶.h
"

55 
	~"timevÆ.h
"

56 
	~"unix˘l.h
"

57 
	~"utû.h
"

58 
	~"vc⁄n.h
"

59 
	~"vlog.h
"

60 
	~"mëa-Êow.h
"

61 
	~"s‹t.h
"

63 
VLOG_DEFINE_THIS_MODULE
(
of˘l
);

68 
boﬁ
 
	g°ri˘
;

72 
boﬁ
 
	gªadd
;

76 
oÂutû_¥Ÿocﬁ
 
	gÆlowed_¥Ÿocﬁs
 = 
OFPUTIL_P_ANY
;

81 
	g¥e„ºed_∑ckë_ö_f‹m©
 = -1;

84 
	gvîbosôy
;

88 
boﬁ
 
	gtime°amp
;

91 
	es‹t_‹dî
 { 
	mSORT_ASC
, 
	mSORT_DESC
 };

92 
	ss‹t_¸ôîi⁄
 {

93 c⁄° 
mf_fõld
 *
	mfõld
;

94 
s‹t_‹dî
 
	m‹dî
;

96 
s‹t_¸ôîi⁄
 *
	g¸ôîü
;

97 
size_t
 
	gn_¸ôîü
, 
	gÆloˇãd_¸ôîü
;

99 c⁄° 
comm™d
 
	gÆl_comm™ds
[];

101 
	$ußge
(Ë
NO_RETURN
;

102 
	`∑r£_›ti⁄s
(
¨gc
, *
¨gv
[]);

104 
boﬁ
 
	`ªcv_Êow_°©s_ª∂y
(
vc⁄n
 *, 
ovs_be32
 
£nd_xid
,

105 
oÂbuf
 **
ª∂yp
,

106 
oÂutû_Êow_°©s
 *,

107 
oÂbuf
 *
oÂa˘s
);

109 
	$maö
(
¨gc
, *
¨gv
[])

111 
	`£t_¥ogøm_«me
(
¨gv
[0]);

112 
	`∑r£_›ti⁄s
(
¨gc
, 
¨gv
);

113 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

114 
	`run_comm™d
(
¨gc
 - 
›töd
, 
¨gv
 + o±öd, 
Æl_comm™ds
);

116 
	}
}

119 
	$add_s‹t_¸ôîi⁄
(
s‹t_‹dî
 
‹dî
, c⁄° *
fõld
)

121 
s‹t_¸ôîi⁄
 *
sc
;

123 i‡(
n_¸ôîü
 >
Æloˇãd_¸ôîü
) {

124 
¸ôîü
 = 
	`x2ƒóŒoc
(¸ôîü, &
Æloˇãd_¸ôîü
,  *criteria);

127 
sc
 = &
¸ôîü
[
n_¸ôîü
++];

128 i‡(!
fõld
 || !
	`°rˇ£cmp
(field, "priority")) {

129 
sc
->
fõld
 = 
NULL
;

131 
sc
->
fõld
 = 
	`mf_‰om_«me
(field);

132 i‡(!
sc
->
fõld
) {

133 
	`ovs_Áèl
(0, "%s: unknow¿fõldÇame", 
fõld
);

136 
sc
->
‹dî
 = order;

137 
	}
}

140 
	$∑r£_›ti⁄s
(
¨gc
, *
¨gv
[])

143 
OPT_STRICT
 = 
UCHAR_MAX
 + 1,

144 
OPT_READD
,

145 
OPT_TIMESTAMP
,

146 
OPT_SORT
,

147 
OPT_RSORT
,

148 
DAEMON_OPTION_ENUMS
,

149 
VLOG_OPTION_ENUMS


151 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

152 {"timeout", 
ªquúed_¨gumít
, 
NULL
, 't'},

153 {"°ri˘", 
no_¨gumít
, 
NULL
, 
OPT_STRICT
},

154 {"ªadd", 
no_¨gumít
, 
NULL
, 
OPT_READD
},

155 {"Êow-f‹m©", 
ªquúed_¨gumít
, 
NULL
, 'F'},

156 {"∑ckë-ö-f‹m©", 
ªquúed_¨gumít
, 
NULL
, 'P'},

157 {"m‹e", 
no_¨gumít
, 
NULL
, 'm'},

158 {"time°amp", 
no_¨gumít
, 
NULL
, 
OPT_TIMESTAMP
},

159 {"s‹t", 
›ti⁄Æ_¨gumít
, 
NULL
, 
OPT_SORT
},

160 {"rs‹t", 
›ti⁄Æ_¨gumít
, 
NULL
, 
OPT_RSORT
},

161 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

162 {"vîsi⁄", 
no_¨gumít
, 
NULL
, 'V'},

163 
DAEMON_LONG_OPTIONS
,

164 
VLOG_LONG_OPTIONS
,

165 
STREAM_SSL_LONG_OPTIONS
,

166 {
NULL
, 0, NULL, 0},

168 *
sh‹t_›ti⁄s
 = 
	`l⁄g_›ti⁄s_to_sh‹t_›ti⁄s
(
l⁄g_›ti⁄s
);

171 
timeout
;

172 
c
;

174 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
l⁄g_›ti⁄s
, 
NULL
);

175 i‡(
c
 == -1) {

179 
c
) {

181 
timeout
 = 
	`°πoul
(
›èrg
, 
NULL
, 10);

182 i‡(
timeout
 <= 0) {

183 
	`ovs_Áèl
(0, "value %s on -t or --timeout isÇotátÜeast 1",

184 
›èrg
);

186 
	`time_Æ¨m
(
timeout
);

191 
Ælowed_¥Ÿocﬁs
 = 
	`oÂutû_¥Ÿocﬁs_‰om_°rög
(
›èrg
);

192 i‡(!
Ælowed_¥Ÿocﬁs
) {

193 
	`ovs_Áèl
(0, "%s: invÆid flow f‹m©(s)", 
›èrg
);

198 
¥e„ºed_∑ckë_ö_f‹m©
 =

199 
	`oÂutû_∑ckë_ö_f‹m©_‰om_°rög
(
›èrg
);

200 i‡(
¥e„ºed_∑ckë_ö_f‹m©
 < 0) {

201 
	`ovs_Áèl
(0, "unknow¿∑ckë-ö f‹m© `%s'", 
›èrg
);

206 
vîbosôy
++;

210 
	`ußge
();

213 
	`ovs_¥öt_vîsi⁄
(
OFP10_VERSION
, OFP10_VERSION);

214 
	`exô
(
EXIT_SUCCESS
);

216 
OPT_STRICT
:

217 
°ri˘
 = 
åue
;

220 
OPT_READD
:

221 
ªadd
 = 
åue
;

224 
OPT_TIMESTAMP
:

225 
time°amp
 = 
åue
;

228 
OPT_SORT
:

229 
	`add_s‹t_¸ôîi⁄
(
SORT_ASC
, 
›èrg
);

232 
OPT_RSORT
:

233 
	`add_s‹t_¸ôîi⁄
(
SORT_DESC
, 
›èrg
);

236 
DAEMON_OPTION_HANDLERS


237 
VLOG_OPTION_HANDLERS


238 
STREAM_SSL_OPTION_HANDLERS


241 
	`exô
(
EXIT_FAILURE
);

244 
	`ab‹t
();

248 i‡(
n_¸ôîü
) {

250 
	`add_s‹t_¸ôîi⁄
(
SORT_DESC
, "priority");

253 
	`‰ì
(
sh‹t_›ti⁄s
);

254 
	}
}

257 
	$ußge
()

259 
	`¥ötf
("%s: OpenFlow switch management utility\n"

291 
¥ogøm_«me
,Örogram_name);

292 
	`vc⁄n_ußge
(
åue
, 
Ál£
, false);

293 
	`d´m⁄_ußge
();

294 
	`vlog_ußge
();

295 
	`¥ötf
("\nOther options:\n"

307 
	`exô
(
EXIT_SUCCESS
);

308 
	}
}

311 
	$of˘l_exô
(
unix˘l_c⁄n
 *
c⁄n
, 
¨gc
 
OVS_UNUSED
,

312 c⁄° *
¨gv
[] 
OVS_UNUSED
, *
exôög_
)

314 
boﬁ
 *
exôög
 = 
exôög_
;

315 *
exôög
 = 
åue
;

316 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, 
NULL
);

317 
	}
}

319 
	$run
(
ªtvÆ
, c⁄° *
mesßge
, ...)

320 
	`PRINTF_FORMAT
(2, 3);

322 
	$run
(
ªtvÆ
, c⁄° *
mesßge
, ...)

324 i‡(
ªtvÆ
) {

325 
va_li°
 
¨gs
;

327 
	`va_°¨t
(
¨gs
, 
mesßge
);

328 
	`ovs_Áèl_vÆi°
(
ªtvÆ
, 
mesßge
, 
¨gs
);

330 
	}
}

335 
	$›í_vc⁄n_sockë
(c⁄° *
«me
, 
vc⁄n
 **
vc⁄≈
)

337 *
vc⁄n_«me
 = 
	`xa•rötf
("unix:%s", 
«me
);

338 
	`VLOG_DBG
("c⁄√˘ögÅÿ%s", 
vc⁄n_«me
);

339 
	`run
(
	`vc⁄n_›í_block
(
vc⁄n_«me
, 
OFP10_VERSION
, 
vc⁄≈
),

340 "c⁄√˘ögÅÿ%s", 
vc⁄n_«me
);

341 
	`‰ì
(
vc⁄n_«me
);

342 
	}
}

344 
oÂutû_¥Ÿocﬁ


345 
	$›í_vc⁄n__
(c⁄° *
«me
, c⁄° *
deÁu…_suffix
,

346 
vc⁄n
 **
vc⁄≈
)

348 *
d©≠©h_«me
, *
d©≠©h_ty≥
, *
sockë_«me
;

349 
oÂutû_¥Ÿocﬁ
 
¥Ÿocﬁ
;

350 *
bridge_∑th
;

351 
oÂ_vîsi⁄
;

352 
°©
 
s
;

354 
bridge_∑th
 = 
	`xa•rötf
("%s/%s.%s", 
	`ovs_rundú
(), 
«me
, 
deÁu…_suffix
);

356 
	`oÂrŸo_∑r£_«me
(
«me
, &
d©≠©h_«me
, &
d©≠©h_ty≥
);

357 
sockë_«me
 = 
	`xa•rötf
("%s/%s.%s",

358 
	`ovs_rundú
(), 
d©≠©h_«me
, 
deÁu…_suffix
);

359 
	`‰ì
(
d©≠©h_«me
);

360 
	`‰ì
(
d©≠©h_ty≥
);

362 i‡(
	`°rchr
(
«me
, ':')) {

363 
	`run
(
	`vc⁄n_›í_block
(
«me
, 
OFP10_VERSION
, 
vc⁄≈
),

364 "c⁄√˘ögÅÿ%s", 
«me
);

365 } i‡(!
	`°©
(
«me
, &
s
Ë&& 
	`S_ISSOCK
(s.
°_mode
)) {

366 
	`›í_vc⁄n_sockë
(
«me
, 
vc⁄≈
);

367 } i‡(!
	`°©
(
bridge_∑th
, &
s
Ë&& 
	`S_ISSOCK
(s.
°_mode
)) {

368 
	`›í_vc⁄n_sockë
(
bridge_∑th
, 
vc⁄≈
);

369 } i‡(!
	`°©
(
sockë_«me
, &
s
)) {

370 i‡(!
	`S_ISSOCK
(
s
.
°_mode
)) {

371 
	`ovs_Áèl
(0, "cannot connectÅo %s: %s isÇotá socket",

372 
«me
, 
sockë_«me
);

374 
	`›í_vc⁄n_sockë
(
sockë_«me
, 
vc⁄≈
);

376 
	`ovs_Áèl
(0, "%†i†nŸá bridgê‹á sockë", 
«me
);

379 
	`‰ì
(
bridge_∑th
);

380 
	`‰ì
(
sockë_«me
);

382 
oÂ_vîsi⁄
 = 
	`vc⁄n_gë_vîsi⁄
(*
vc⁄≈
);

383 
¥Ÿocﬁ
 = 
	`oÂutû_¥Ÿocﬁ_‰om_oÂ_vîsi⁄
(
oÂ_vîsi⁄
);

384 i‡(!
¥Ÿocﬁ
) {

385 
	`ovs_Áèl
(0, "%s: unsupported OpenFlow version 0x%02x",

386 
«me
, 
oÂ_vîsi⁄
);

388  
¥Ÿocﬁ
;

389 
	}
}

391 
oÂutû_¥Ÿocﬁ


392 
	$›í_vc⁄n
(c⁄° *
«me
, 
vc⁄n
 **
vc⁄≈
)

394  
	`›í_vc⁄n__
(
«me
, "mgmt", 
vc⁄≈
);

395 
	}
}

398 
	$£nd_›íÊow_buf„r
(
vc⁄n
 *vc⁄n, 
oÂbuf
 *
buf„r
)

400 
	`oÂmsg_upd©e_Àngth
(
buf„r
);

401 
	`run
(
	`vc⁄n_£nd_block
(
vc⁄n
, 
buf„r
), "failedÅo sendÖacketÅo switch");

402 
	}
}

405 
	$dump_å™ß˘i⁄
(c⁄° *
vc⁄n_«me
, 
oÂbuf
 *
ªque°
)

407 
vc⁄n
 *vconn;

408 
oÂbuf
 *
ª∂y
;

410 
	`oÂmsg_upd©e_Àngth
(
ªque°
);

411 
	`›í_vc⁄n
(
vc⁄n_«me
, &
vc⁄n
);

412 
	`run
(
	`vc⁄n_å™ß˘
(
vc⁄n
, 
ªque°
, &
ª∂y
), "èlkögÅÿ%s", 
vc⁄n_«me
);

413 
	`oÂ_¥öt
(
°dout
, 
ª∂y
->
d©a
,Ñïly->
size
, 
vîbosôy
 + 1);

414 
	`oÂbuf_dñëe
(
ª∂y
);

415 
	`vc⁄n_˛o£
(
vc⁄n
);

416 
	}
}

419 
	$dump_åivül_å™ß˘i⁄
(c⁄° *
vc⁄n_«me
, 
oÂøw
 
øw
)

421 
oÂbuf
 *
ªque°
;

422 
ªque°
 = 
	`oÂøw_Æloc
(
øw
, 
OFP10_VERSION
, 0);

423 
	`dump_å™ß˘i⁄
(
vc⁄n_«me
, 
ªque°
);

424 
	}
}

427 
	$dump_°©s_å™ß˘i⁄
(
vc⁄n
 *vc⁄n, 
oÂbuf
 *
ªque°
)

429 c⁄° 
oÂ_hódî
 *
ªque°_oh
 = 
ªque°
->
d©a
;

430 
ovs_be32
 
£nd_xid
 = 
ªque°_oh
->
xid
;

431 
oÂøw
 
ªque°_øw
;

432 
oÂøw
 
ª∂y_øw
;

433 
boﬁ
 
d⁄e
 = 
Ál£
;

435 
	`oÂøw_decode_∑πül
(&
ªque°_øw
, 
ªque°
->
d©a
,Ñeque°->
size
);

436 
ª∂y_øw
 = 
	`oÂøw_°©s_ªque°_to_ª∂y
(
ªque°_øw
,

437 
ªque°_oh
->
vîsi⁄
);

439 
	`£nd_›íÊow_buf„r
(
vc⁄n
, 
ªque°
);

440 !
d⁄e
) {

441 
ovs_be32
 
ªcv_xid
;

442 
oÂbuf
 *
ª∂y
;

444 
	`run
(
	`vc⁄n_ªcv_block
(
vc⁄n
, &
ª∂y
), "OpenFlowÖacketÑeceive failed");

445 
ªcv_xid
 = ((
oÂ_hódî
 *Ë
ª∂y
->
d©a
)->
xid
;

446 i‡(
£nd_xid
 =
ªcv_xid
) {

447 
oÂøw
 
øw
;

449 
	`oÂ_¥öt
(
°dout
, 
ª∂y
->
d©a
,Ñïly->
size
, 
vîbosôy
 + 1);

451 
	`oÂøw_decode
(&
øw
, 
ª∂y
->
d©a
);

452 i‡(
	`oÂty≥_‰om_oÂøw
(
øw
Ë=
OFPTYPE_ERROR
) {

453 
d⁄e
 = 
åue
;

454 } i‡(
øw
 =
ª∂y_øw
) {

455 
d⁄e
 = !
	`oÂmp_m‹e
(
ª∂y
->
d©a
);

457 
	`ovs_Áèl
(0, "received badÑeply: %s",

458 
	`oÂ_to_°rög
(
ª∂y
->
d©a
,Ñïly->
size
,

459 
vîbosôy
 + 1));

462 
	`VLOG_DBG
("ª˚ivedÑïly wôh xid %08"
PRIx32
" "

463 "!ex≥˘ed %08"
PRIx32
, 
ªcv_xid
, 
£nd_xid
);

465 
	`oÂbuf_dñëe
(
ª∂y
);

467 
	}
}

470 
	$dump_åivül_°©s_å™ß˘i⁄
(c⁄° *
vc⁄n_«me
, 
oÂøw
 
øw
)

472 
oÂbuf
 *
ªque°
;

473 
vc⁄n
 *vconn;

475 
	`›í_vc⁄n
(
vc⁄n_«me
, &
vc⁄n
);

476 
ªque°
 = 
	`oÂøw_Æloc
(
øw
, 
	`vc⁄n_gë_vîsi⁄
(
vc⁄n
), 0);

477 
	`dump_°©s_å™ß˘i⁄
(
vc⁄n
, 
ªque°
);

478 
	`vc⁄n_˛o£
(
vc⁄n
);

479 
	}
}

487 
	$å™ß˘_mu…ùÀ_n‹ïly
(
vc⁄n
 *vc⁄n, 
li°
 *
ªque°s
)

489 
oÂbuf
 *
ªque°
, *
ª∂y
;

491 
	`LIST_FOR_EACH
 (
ªque°
, 
li°_node
, 
ªque°s
) {

492 
	`oÂmsg_upd©e_Àngth
(
ªque°
);

495 
	`run
(
	`vc⁄n_å™ß˘_mu…ùÀ_n‹ïly
(
vc⁄n
, 
ªque°s
, &
ª∂y
),

496 "èlkögÅÿ%s", 
	`vc⁄n_gë_«me
(
vc⁄n
));

497 i‡(
ª∂y
) {

498 
	`oÂ_¥öt
(
°dîr
, 
ª∂y
->
d©a
,Ñïly->
size
, 
vîbosôy
 + 2);

499 
	`exô
(1);

501 
	`oÂbuf_dñëe
(
ª∂y
);

502 
	}
}

510 
	$å™ß˘_n‹ïly
(
vc⁄n
 *vc⁄n, 
oÂbuf
 *
ªque°
)

512 
li°
 
ªque°s
;

514 
	`li°_öô
(&
ªque°s
);

515 
	`li°_push_back
(&
ªque°s
, &
ªque°
->
li°_node
);

516 
	`å™ß˘_mu…ùÀ_n‹ïly
(
vc⁄n
, &
ªque°s
);

517 
	}
}

520 
	$„tch_swôch_c⁄fig
(
vc⁄n
 *vc⁄n, 
oÂ_swôch_c⁄fig
 *
c⁄fig_
)

522 
oÂ_swôch_c⁄fig
 *
c⁄fig
;

523 
oÂbuf
 *
ªque°
;

524 
oÂbuf
 *
ª∂y
;

525 
oÂty≥
 
ty≥
;

527 
ªque°
 = 
	`oÂøw_Æloc
(
OFPRAW_OFPT_GET_CONFIG_REQUEST
, 
OFP10_VERSION
, 0);

528 
	`run
(
	`vc⁄n_å™ß˘
(
vc⁄n
, 
ªque°
, &
ª∂y
),

529 "èlkögÅÿ%s", 
	`vc⁄n_gë_«me
(
vc⁄n
));

531 i‡(
	`oÂty≥_puŒ
(&
ty≥
, 
ª∂y
Ë||Åy≥ !
OFPTYPE_GET_CONFIG_REPLY
) {

532 
	`ovs_Áèl
(0, "%s: badÑïlyÅÿc⁄figÑeque°", 
	`vc⁄n_gë_«me
(
vc⁄n
));

535 
c⁄fig
 = 
	`oÂbuf_puŒ
(
ª∂y
,  *config);

536 *
c⁄fig_
 = *
c⁄fig
;

538 
	`oÂbuf_dñëe
(
ª∂y
);

539 
	}
}

542 
	$£t_swôch_c⁄fig
(
vc⁄n
 *vc⁄n, c⁄° 
oÂ_swôch_c⁄fig
 *
c⁄fig
)

544 
oÂbuf
 *
ªque°
;

546 
ªque°
 = 
	`oÂøw_Æloc
(
OFPRAW_OFPT_SET_CONFIG
, 
OFP10_VERSION
, 0);

547 
	`oÂbuf_put
(
ªque°
, 
c⁄fig
,  *config);

549 
	`å™ß˘_n‹ïly
(
vc⁄n
, 
ªque°
);

550 
	}
}

553 
	$of˘l_show
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

555 c⁄° *
vc⁄n_«me
 = 
¨gv
[1];

556 
vc⁄n
 *vconn;

557 
oÂbuf
 *
ªque°
;

558 
oÂbuf
 *
ª∂y
;

559 
boﬁ
 
åunc
;

561 
ªque°
 = 
	`oÂøw_Æloc
(
OFPRAW_OFPT_FEATURES_REQUEST
, 
OFP10_VERSION
, 0);

562 
	`›í_vc⁄n
(
vc⁄n_«me
, &
vc⁄n
);

563 
	`run
(
	`vc⁄n_å™ß˘
(
vc⁄n
, 
ªque°
, &
ª∂y
), "èlkögÅÿ%s", 
vc⁄n_«me
);

565 
åunc
 = 
	`oÂutû_swôch_„©uªs_p‹ts_åunc
(
ª∂y
);

566 
	`oÂ_¥öt
(
°dout
, 
ª∂y
->
d©a
,Ñïly->
size
, 
vîbosôy
 + 1);

568 
	`oÂbuf_dñëe
(
ª∂y
);

569 
	`vc⁄n_˛o£
(
vc⁄n
);

571 i‡(
åunc
) {

575 
	`dump_åivül_°©s_å™ß˘i⁄
(
vc⁄n_«me
,

576 
OFPRAW_OFPST_PORT_DESC_REQUEST
);

578 
	`dump_åivül_å™ß˘i⁄
(
vc⁄n_«me
, 
OFPRAW_OFPT_GET_CONFIG_REQUEST
);

579 
	}
}

582 
	$of˘l_dump_desc
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

584 
	`dump_åivül_°©s_å™ß˘i⁄
(
¨gv
[1], 
OFPRAW_OFPST_DESC_REQUEST
);

585 
	}
}

588 
	$of˘l_dump_èbÀs
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

590 
	`dump_åivül_°©s_å™ß˘i⁄
(
¨gv
[1], 
OFPRAW_OFPST_TABLE_REQUEST
);

591 
	}
}

593 
boﬁ


594 
	$„tch_p‹t_by_„©uªs
(c⁄° *
vc⁄n_«me
,

595 c⁄° *
p‹t_«me
, 
p‹t_no
,

596 
oÂutû_phy_p‹t
 *
µ
, 
boﬁ
 *
åunc
)

598 
oÂutû_swôch_„©uªs
 
„©uªs
;

599 c⁄° 
oÂ_hódî
 *
oh
;

600 
oÂbuf
 *
ªque°
, *
ª∂y
;

601 
vc⁄n
 *vconn;

602 
oÂîr
 
îr‹
;

603 
oÂty≥
 
ty≥
;

604 
oÂbuf
 
b
;

605 
boﬁ
 
found
 = 
Ál£
;

608 
ªque°
 = 
	`oÂøw_Æloc
(
OFPRAW_OFPT_FEATURES_REQUEST
, 
OFP10_VERSION
, 0);

609 
	`›í_vc⁄n
(
vc⁄n_«me
, &
vc⁄n
);

610 
	`run
(
	`vc⁄n_å™ß˘
(
vc⁄n
, 
ªque°
, &
ª∂y
), "èlkögÅÿ%s", 
vc⁄n_«me
);

611 
	`vc⁄n_˛o£
(
vc⁄n
);

613 
oh
 = 
ª∂y
->
d©a
;

614 i‡(
	`oÂty≥_decode
(&
ty≥
, 
ª∂y
->
d©a
)

615 || 
ty≥
 !
OFPTYPE_FEATURES_REPLY
) {

616 
	`ovs_Áèl
(0, "%s:Ñe˚ived bad fótuª†ª∂y", 
vc⁄n_«me
);

619 *
åunc
 = 
Ál£
;

620 i‡(
	`oÂutû_swôch_„©uªs_p‹ts_åunc
(
ª∂y
)) {

621 *
åunc
 = 
åue
;

622 
exô
;

625 
îr‹
 = 
	`oÂutû_decode_swôch_„©uªs
(
oh
, &
„©uªs
, &
b
);

626 i‡(
îr‹
) {

627 
	`ovs_Áèl
(0, "%s: failedÅo decode featuresÑeply (%s)",

628 
vc⁄n_«me
, 
	`oÂîr_to_°rög
(
îr‹
));

631 !
	`oÂutû_puŒ_phy_p‹t
(
oh
->
vîsi⁄
, &
b
, 
µ
)) {

632 i‡(
p‹t_no
 !
UINT_MAX


633 ? 
p‹t_no
 =
µ
->port_no

634 : !
	`°rcmp
(
µ
->
«me
, 
p‹t_«me
)) {

635 
found
 = 
åue
;

636 
exô
;

640 
exô
:

641 
	`oÂbuf_dñëe
(
ª∂y
);

642  
found
;

643 
	}
}

645 
boﬁ


646 
	$„tch_p‹t_by_°©s
(c⁄° *
vc⁄n_«me
,

647 c⁄° *
p‹t_«me
, 
p‹t_no
,

648 
oÂutû_phy_p‹t
 *
µ
)

650 
oÂbuf
 *
ªque°
;

651 
vc⁄n
 *vconn;

652 
ovs_be32
 
£nd_xid
;

653 
boﬁ
 
d⁄e
 = 
Ál£
;

654 
boﬁ
 
found
 = 
Ál£
;

656 
ªque°
 = 
	`oÂøw_Æloc
(
OFPRAW_OFPST_PORT_DESC_REQUEST
, 
OFP10_VERSION
, 0);

657 
£nd_xid
 = ((
oÂ_hódî
 *Ë
ªque°
->
d©a
)->
xid
;

659 
	`›í_vc⁄n
(
vc⁄n_«me
, &
vc⁄n
);

660 
	`£nd_›íÊow_buf„r
(
vc⁄n
, 
ªque°
);

661 !
d⁄e
) {

662 
ovs_be32
 
ªcv_xid
;

663 
oÂbuf
 *
ª∂y
;

665 
	`run
(
	`vc⁄n_ªcv_block
(
vc⁄n
, &
ª∂y
), "OpenFlowÖacketÑeceive failed");

666 
ªcv_xid
 = ((
oÂ_hódî
 *Ë
ª∂y
->
d©a
)->
xid
;

667 i‡(
£nd_xid
 =
ªcv_xid
) {

668 
oÂ_hódî
 *
oh
 = 
ª∂y
->
d©a
;

669 
oÂty≥
 
ty≥
;

670 
oÂbuf
 
b
;

671 
uöt16_t
 
Êags
;

673 
	`oÂbuf_u£_c⁄°
(&
b
, 
oh
, 
	`¡ohs
(oh->
Àngth
));

674 i‡(
	`oÂty≥_puŒ
(&
ty≥
, &
b
)

675 || 
ty≥
 !
OFPTYPE_PORT_DESC_STATS_REPLY
) {

676 
	`ovs_Áèl
(0, "received badÑeply: %s",

677 
	`oÂ_to_°rög
(
ª∂y
->
d©a
,Ñïly->
size
,

678 
vîbosôy
 + 1));

681 
Êags
 = 
	`oÂmp_Êags
(
oh
);

682 
d⁄e
 = !(
Êags
 & 
OFPSF_REPLY_MORE
);

684 i‡(
found
) {

690 !
	`oÂutû_puŒ_phy_p‹t
(
oh
->
vîsi⁄
, &
b
, 
µ
)) {

691 i‡(
p‹t_no
 !
UINT_MAX
 ?Ö‹t_nÿ=
µ
->port_no

692 : !
	`°rcmp
(
µ
->
«me
, 
p‹t_«me
)) {

693 
found
 = 
åue
;

698 
	`VLOG_DBG
("ª˚ivedÑïly wôh xid %08"
PRIx32
" "

699 "!ex≥˘ed %08"
PRIx32
, 
ªcv_xid
, 
£nd_xid
);

701 
	`oÂbuf_dñëe
(
ª∂y
);

703 
	`vc⁄n_˛o£
(
vc⁄n
);

705  
found
;

706 
	}
}

713 
	$„tch_oÂutû_phy_p‹t
(c⁄° *
vc⁄n_«me
, c⁄° *
p‹t_«me
,

714 
oÂutû_phy_p‹t
 *
µ
)

716 
p‹t_no
;

717 
boﬁ
 
found
;

718 
boﬁ
 
åunc
;

721 i‡(!
	`°r_to_uöt
(
p‹t_«me
, 10, &
p‹t_no
)) {

722 
p‹t_no
 = 
UINT_MAX
;

728 
found
 = 
	`„tch_p‹t_by_„©uªs
(
vc⁄n_«me
, 
p‹t_«me
, 
p‹t_no
, 
µ
,

729 &
åunc
);

730 i‡(
åunc
) {

731 
found
 = 
	`„tch_p‹t_by_°©s
(
vc⁄n_«me
, 
p‹t_«me
, 
p‹t_no
, 
µ
);

734 i‡(!
found
) {

735 
	`ovs_Áèl
(0, "%s: couldn'àfödÖ‹à`%s'", 
vc⁄n_«me
, 
p‹t_«me
);

737 
	}
}

741 
uöt16_t


742 
	$°r_to_p‹t_no
(c⁄° *
vc⁄n_«me
, c⁄° *
p‹t_«me
)

744 
uöt16_t
 
p‹t_no
;

746 i‡(
	`oÂutû_p‹t_‰om_°rög
(
p‹t_«me
, &
p‹t_no
)) {

747  
p‹t_no
;

749 
oÂutû_phy_p‹t
 
µ
;

751 
	`„tch_oÂutû_phy_p‹t
(
vc⁄n_«me
, 
p‹t_«me
, &
µ
);

752  
µ
.
p‹t_no
;

754 
	}
}

756 
boﬁ


757 
	$åy_£t_¥Ÿocﬁ
(
vc⁄n
 *vc⁄n, 
oÂutû_¥Ÿocﬁ
 
w™t
,

758 
oÂutû_¥Ÿocﬁ
 *
cur
)

761 
oÂbuf
 *
ªque°
, *
ª∂y
;

762 
oÂutû_¥Ÿocﬁ
 
√xt
;

764 
ªque°
 = 
	`oÂutû_ícode_£t_¥Ÿocﬁ
(*
cur
, 
w™t
, &
√xt
);

765 i‡(!
ªque°
) {

766  
åue
;

769 
	`run
(
	`vc⁄n_å™ß˘_n‹ïly
(
vc⁄n
, 
ªque°
, &
ª∂y
),

770 "èlkögÅÿ%s", 
	`vc⁄n_gë_«me
(
vc⁄n
));

771 i‡(
ª∂y
) {

772 *
s
 = 
	`oÂ_to_°rög
(
ª∂y
->
d©a
,Ñïly->
size
, 2);

773 
	`VLOG_DBG
("%s: failedÅo setÖrotocol, switchÑeplied: %s",

774 
	`vc⁄n_gë_«me
(
vc⁄n
), 
s
);

775 
	`‰ì
(
s
);

776 
	`oÂbuf_dñëe
(
ª∂y
);

777  
Ál£
;

780 *
cur
 = 
√xt
;

782 
	}
}

784 
oÂutû_¥Ÿocﬁ


785 
	$£t_¥Ÿocﬁ_f‹_Êow_dump
(
vc⁄n
 *vconn,

786 
oÂutû_¥Ÿocﬁ
 
cur_¥Ÿocﬁ
,

787 
oÂutû_¥Ÿocﬁ
 
ußbÀ_¥Ÿocﬁs
)

789 *
ußbÀ_s
;

790 
i
;

792 
i
 = 0; i < 
oÂutû_n_Êow_dump_¥Ÿocﬁs
; i++) {

793 
oÂutû_¥Ÿocﬁ
 
f
 = 
oÂutû_Êow_dump_¥Ÿocﬁs
[
i
];

794 i‡(
f
 & 
ußbÀ_¥Ÿocﬁs
 & 
Ælowed_¥Ÿocﬁs


795 && 
	`åy_£t_¥Ÿocﬁ
(
vc⁄n
, 
f
, &
cur_¥Ÿocﬁ
)) {

796  
f
;

800 
ußbÀ_s
 = 
	`oÂutû_¥Ÿocﬁs_to_°rög
(
ußbÀ_¥Ÿocﬁs
);

801 i‡(
ußbÀ_¥Ÿocﬁs
 & 
Ælowed_¥Ÿocﬁs
) {

802 
	`ovs_Áèl
(0, "switch doesÇot supportány ofÅhe usable flow "

803 "f‹m©†(%s)", 
ußbÀ_s
);

805 *
Ælowed_s
 = 
	`oÂutû_¥Ÿocﬁs_to_°rög
(
Ælowed_¥Ÿocﬁs
);

806 
	`ovs_Áèl
(0, "none ofÅhe usable flow formats (%s) isámongÅhe "

807 "Ælowed flow f‹m©†(%s)", 
ußbÀ_s
, 
Ælowed_s
);

809 
	}
}

811 
vc⁄n
 *

812 
	$¥ï¨e_dump_Êows
(
¨gc
, *
¨gv
[], 
boﬁ
 
aggªg©e
,

813 
oÂbuf
 **
ªque°p
)

815 
oÂutû_¥Ÿocﬁ
 
ußbÀ_¥Ÿocﬁs
, 
¥Ÿocﬁ
;

816 
oÂutû_Êow_°©s_ªque°
 
f§
;

817 
vc⁄n
 *vconn;

819 
	`∑r£_oÂ_Êow_°©s_ªque°_°r
(&
f§
, 
aggªg©e
, 
¨gc
 > 2 ? 
¨gv
[2] : "");

820 
ußbÀ_¥Ÿocﬁs
 = 
	`oÂutû_Êow_°©s_ªque°_ußbÀ_¥Ÿocﬁs
(&
f§
);

822 
¥Ÿocﬁ
 = 
	`›í_vc⁄n
(
¨gv
[1], &
vc⁄n
);

823 
¥Ÿocﬁ
 = 
	`£t_¥Ÿocﬁ_f‹_Êow_dump
(
vc⁄n
,ÖrŸocﬁ, 
ußbÀ_¥Ÿocﬁs
);

824 *
ªque°p
 = 
	`oÂutû_ícode_Êow_°©s_ªque°
(&
f§
, 
¥Ÿocﬁ
);

825  
vc⁄n
;

826 
	}
}

829 
	$of˘l_dump_Êows__
(
¨gc
, *
¨gv
[], 
boﬁ
 
aggªg©e
)

831 
oÂbuf
 *
ªque°
;

832 
vc⁄n
 *vconn;

834 
vc⁄n
 = 
	`¥ï¨e_dump_Êows
(
¨gc
, 
¨gv
, 
aggªg©e
, &
ªque°
);

835 
	`dump_°©s_å™ß˘i⁄
(
vc⁄n
, 
ªque°
);

836 
	`vc⁄n_˛o£
(
vc⁄n
);

837 
	}
}

840 
	$com∑ª_Êows
(c⁄° *
afs_
, c⁄° *
bfs_
)

842 c⁄° 
oÂutû_Êow_°©s
 *
afs
 = 
afs_
;

843 c⁄° 
oÂutû_Êow_°©s
 *
bfs
 = 
bfs_
;

844 c⁄° 
m©ch
 *
a
 = &
afs
->match;

845 c⁄° 
m©ch
 *
b
 = &
bfs
->match;

846 c⁄° 
s‹t_¸ôîi⁄
 *
sc
;

848 
sc
 = 
¸ôîü
; s¯< &¸ôîü[
n_¸ôîü
]; sc++) {

849 c⁄° 
mf_fõld
 *
f
 = 
sc
->
fõld
;

850 
ªt
;

852 i‡(!
f
) {

853 
a_¥i
 = 
afs
->
¥i‹ôy
;

854 
b_¥i
 = 
bfs
->
¥i‹ôy
;

855 
ªt
 = 
a_¥i
 < 
b_¥i
 ? -1 :á_pri > b_pri;

857 
boﬁ
 
öa
, 
öb
;

859 
öa
 = 
	`mf_¨e_¥îeqs_ok
(
f
, &
a
->
Êow
Ë&& !
	`mf_is_Æl_wûd
(f, &a->
wc
);

860 
öb
 = 
	`mf_¨e_¥îeqs_ok
(
f
, &
b
->
Êow
Ë&& !
	`mf_is_Æl_wûd
(f, &b->
wc
);

861 i‡(
öa
 !
öb
) {

865  
öa
 ? -1 : 1;

867 
mf_vÆue
 
avÆ
, 
bvÆ
;

869 
	`mf_gë_vÆue
(
f
, &
a
->
Êow
, &
avÆ
);

870 
	`mf_gë_vÆue
(
f
, &
b
->
Êow
, &
bvÆ
);

871 
ªt
 = 
	`memcmp
(&
avÆ
, &
bvÆ
, 
f
->
n_byãs
);

875 i‡(
ªt
) {

876  
sc
->
‹dî
 =
SORT_ASC
 ? 
ªt
 : -ret;

881 
	}
}

884 
	$of˘l_dump_Êows
(
¨gc
, *
¨gv
[])

886 i‡(!
n_¸ôîü
) {

887  
	`of˘l_dump_Êows__
(
¨gc
, 
¨gv
, 
Ál£
);

889 
oÂutû_Êow_°©s
 *
f£s
;

890 
size_t
 
n_f£s
, 
Æloˇãd_f£s
;

891 
oÂbuf
 *
ªque°
;

892 
oÂbuf
 
oÂa˘s
;

893 
oÂbuf
 *
ª∂y
;

894 
vc⁄n
 *vconn;

895 
ovs_be32
 
£nd_xid
;

896 
ds
 
s
;

897 
size_t
 
i
;

899 
vc⁄n
 = 
	`¥ï¨e_dump_Êows
(
¨gc
, 
¨gv
, 
Ál£
, &
ªque°
);

900 
£nd_xid
 = ((
oÂ_hódî
 *Ë
ªque°
->
d©a
)->
xid
;

901 
	`£nd_›íÊow_buf„r
(
vc⁄n
, 
ªque°
);

903 
f£s
 = 
NULL
;

904 
n_f£s
 = 
Æloˇãd_f£s
 = 0;

905 
ª∂y
 = 
NULL
;

906 
	`oÂbuf_öô
(&
oÂa˘s
, 0);

908 
oÂutû_Êow_°©s
 *
fs
;

910 i‡(
n_f£s
 >
Æloˇãd_f£s
) {

911 
f£s
 = 
	`x2ƒóŒoc
(f£s, &
Æloˇãd_f£s
,  *fses);

914 
fs
 = &
f£s
[
n_f£s
];

915 i‡(!
	`ªcv_Êow_°©s_ª∂y
(
vc⁄n
, 
£nd_xid
, &
ª∂y
, 
fs
,

916 &
oÂa˘s
)) {

919 
fs
->
oÂa˘s
 = 
	`xmemdup
(fs->oÂa˘s, fs->
oÂa˘s_Àn
);

920 
n_f£s
++;

922 
	`oÂbuf_unöô
(&
oÂa˘s
);

924 
	`qs‹t
(
f£s
, 
n_f£s
,  *f£s, 
com∑ª_Êows
);

926 
	`ds_öô
(&
s
);

927 
i
 = 0; i < 
n_f£s
; i++) {

928 
	`ds_˛ór
(&
s
);

929 
	`oÂ_¥öt_Êow_°©s
(&
s
, &
f£s
[
i
]);

930 
	`puts
(
	`ds_c°r
(&
s
));

932 
	`ds_de°roy
(&
s
);

934 
i
 = 0; i < 
n_f£s
; i++) {

935 
	`‰ì
(
f£s
[
i
].
oÂa˘s
);

937 
	`‰ì
(
f£s
);

939 
	`vc⁄n_˛o£
(
vc⁄n
);

941 
	}
}

944 
	$of˘l_dump_aggªg©e
(
¨gc
, *
¨gv
[])

946  
	`of˘l_dump_Êows__
(
¨gc
, 
¨gv
, 
åue
);

947 
	}
}

950 
	$of˘l_queue_°©s
(
¨gc
, *
¨gv
[])

952 
oÂbuf
 *
ªque°
;

953 
vc⁄n
 *vconn;

954 
oÂutû_queue_°©s_ªque°
 
oqs
;

956 
	`›í_vc⁄n
(
¨gv
[1], &
vc⁄n
);

958 i‡(
¨gc
 > 2 && 
¨gv
[2][0] && 
	`°rˇ£cmp
(argv[2], "all")) {

959 
oqs
.
p‹t_no
 = 
	`°r_to_p‹t_no
(
¨gv
[1],árgv[2]);

961 
oqs
.
p‹t_no
 = 
OFPP_ALL
;

963 i‡(
¨gc
 > 3 && 
¨gv
[3][0] && 
	`°rˇ£cmp
(argv[3], "all")) {

964 
oqs
.
queue_id
 = 
	`©oi
(
¨gv
[3]);

966 
oqs
.
queue_id
 = 
OFPQ_ALL
;

969 
ªque°
 = 
	`oÂutû_ícode_queue_°©s_ªque°
(
	`vc⁄n_gë_vîsi⁄
(
vc⁄n
), &
oqs
);

970 
	`dump_°©s_å™ß˘i⁄
(
vc⁄n
, 
ªque°
);

971 
	`vc⁄n_˛o£
(
vc⁄n
);

972 
	}
}

974 
oÂutû_¥Ÿocﬁ


975 
	$›í_vc⁄n_f‹_Êow_mod
(c⁄° *
ªmŸe
,

976 c⁄° 
oÂutû_Êow_mod
 *
fms
, 
size_t
 
n_fms
,

977 
vc⁄n
 **
vc⁄≈
)

979 
oÂutû_¥Ÿocﬁ
 
ußbÀ_¥Ÿocﬁs
;

980 
oÂutû_¥Ÿocﬁ
 
cur_¥Ÿocﬁ
;

981 *
ußbÀ_s
;

982 
i
;

985 
ußbÀ_¥Ÿocﬁs
 = 
	`oÂutû_Êow_mod_ußbÀ_¥Ÿocﬁs
(
fms
, 
n_fms
);

986 i‡(!(
ußbÀ_¥Ÿocﬁs
 & 
Ælowed_¥Ÿocﬁs
)) {

987 *
Ælowed_s
 = 
	`oÂutû_¥Ÿocﬁs_to_°rög
(
Ælowed_¥Ÿocﬁs
);

988 
ußbÀ_s
 = 
	`oÂutû_¥Ÿocﬁs_to_°rög
(
ußbÀ_¥Ÿocﬁs
);

989 
	`ovs_Áèl
(0, "none ofÅhe usable flow formats (%s) isámongÅhe "

990 "Ælowed flow f‹m©†(%s)", 
ußbÀ_s
, 
Ælowed_s
);

994 
cur_¥Ÿocﬁ
 = 
	`›í_vc⁄n
(
ªmŸe
, 
vc⁄≈
);

995 i‡(
ußbÀ_¥Ÿocﬁs
 & 
Ælowed_¥Ÿocﬁs
 & 
cur_¥Ÿocﬁ
) {

996  
cur_¥Ÿocﬁ
;

1000 
i
 = 0; i < (
oÂutû_¥Ÿocﬁ
Ë* 
CHAR_BIT
; i++) {

1001 
oÂutû_¥Ÿocﬁ
 
f
 = 1 << 
i
;

1003 i‡(
f
 !
cur_¥Ÿocﬁ


1004 && 
f
 & 
ußbÀ_¥Ÿocﬁs
 & 
Ælowed_¥Ÿocﬁs


1005 && 
	`åy_£t_¥Ÿocﬁ
(*
vc⁄≈
, 
f
, &
cur_¥Ÿocﬁ
)) {

1006  
f
;

1010 
ußbÀ_s
 = 
	`oÂutû_¥Ÿocﬁs_to_°rög
(
ußbÀ_¥Ÿocﬁs
);

1011 
	`ovs_Áèl
(0, "switch doesÇot supportány ofÅhe usable flow "

1012 "f‹m©†(%s)", 
ußbÀ_s
);

1013 
	}
}

1016 
	$of˘l_Êow_mod__
(c⁄° *
ªmŸe
, 
oÂutû_Êow_mod
 *
fms
,

1017 
size_t
 
n_fms
)

1019 
oÂutû_¥Ÿocﬁ
 
¥Ÿocﬁ
;

1020 
vc⁄n
 *vconn;

1021 
size_t
 
i
;

1023 
¥Ÿocﬁ
 = 
	`›í_vc⁄n_f‹_Êow_mod
(
ªmŸe
, 
fms
, 
n_fms
, &
vc⁄n
);

1025 
i
 = 0; i < 
n_fms
; i++) {

1026 
oÂutû_Êow_mod
 *
fm
 = &
fms
[
i
];

1028 
	`å™ß˘_n‹ïly
(
vc⁄n
, 
	`oÂutû_ícode_Êow_mod
(
fm
, 
¥Ÿocﬁ
));

1029 
	`‰ì
(
fm
->
oÂa˘s
);

1031 
	`vc⁄n_˛o£
(
vc⁄n
);

1032 
	}
}

1035 
	$of˘l_Êow_mod_fûe
(
¨gc
 
OVS_UNUSED
, *
¨gv
[], 
uöt16_t
 
comm™d
)

1037 
oÂutû_Êow_mod
 *
fms
 = 
NULL
;

1038 
size_t
 
n_fms
 = 0;

1040 
	`∑r£_oÂ_Êow_mod_fûe
(
¨gv
[2], 
comm™d
, &
fms
, &
n_fms
);

1041 
	`of˘l_Êow_mod__
(
¨gv
[1], 
fms
, 
n_fms
);

1042 
	`‰ì
(
fms
);

1043 
	}
}

1046 
	$of˘l_Êow_mod
(
¨gc
, *
¨gv
[], 
uöt16_t
 
comm™d
)

1048 i‡(
¨gc
 > 2 && !
	`°rcmp
(
¨gv
[2], "-")) {

1049 
	`of˘l_Êow_mod_fûe
(
¨gc
, 
¨gv
, 
comm™d
);

1051 
oÂutû_Êow_mod
 
fm
;

1052 
	`∑r£_oÂ_Êow_mod_°r
(&
fm
, 
¨gc
 > 2 ? 
¨gv
[2] : "", 
comm™d
, 
Ál£
);

1053 
	`of˘l_Êow_mod__
(
¨gv
[1], &
fm
, 1);

1055 
	}
}

1058 
	$of˘l_add_Êow
(
¨gc
, *
¨gv
[])

1060 
	`of˘l_Êow_mod
(
¨gc
, 
¨gv
, 
OFPFC_ADD
);

1061 
	}
}

1064 
	$of˘l_add_Êows
(
¨gc
, *
¨gv
[])

1066 
	`of˘l_Êow_mod_fûe
(
¨gc
, 
¨gv
, 
OFPFC_ADD
);

1067 
	}
}

1070 
	$of˘l_mod_Êows
(
¨gc
, *
¨gv
[])

1072 
	`of˘l_Êow_mod
(
¨gc
, 
¨gv
, 
°ri˘
 ? 
OFPFC_MODIFY_STRICT
 : 
OFPFC_MODIFY
);

1073 
	}
}

1076 
	$of˘l_dñ_Êows
(
¨gc
, *
¨gv
[])

1078 
	`of˘l_Êow_mod
(
¨gc
, 
¨gv
, 
°ri˘
 ? 
OFPFC_DELETE_STRICT
 : 
OFPFC_DELETE
);

1079 
	}
}

1082 
	$£t_∑ckë_ö_f‹m©
(
vc⁄n
 *vconn,

1083 
nx_∑ckë_ö_f‹m©
 
∑ckë_ö_f‹m©
)

1085 
oÂbuf
 *
•if
;

1087 
•if
 = 
	`oÂutû_make_£t_∑ckë_ö_f‹m©
(
	`vc⁄n_gë_vîsi⁄
(
vc⁄n
),

1088 
∑ckë_ö_f‹m©
);

1089 
	`å™ß˘_n‹ïly
(
vc⁄n
, 
•if
);

1090 
	`VLOG_DBG
("%s: using user-specifiedÖacket in format %s",

1091 
	`vc⁄n_gë_«me
(
vc⁄n
),

1092 
	`oÂutû_∑ckë_ö_f‹m©_to_°rög
(
∑ckë_ö_f‹m©
));

1093 
	}
}

1096 
	$m⁄ô‹_£t_övÆid_âl_to_c⁄åﬁÀr
(
vc⁄n
 *vconn)

1098 
oÂ_swôch_c⁄fig
 
c⁄fig
;

1099 
oÂ_c⁄fig_Êags
 
Êags
;

1101 
	`„tch_swôch_c⁄fig
(
vc⁄n
, &
c⁄fig
);

1102 
Êags
 = 
	`¡ohs
(
c⁄fig
.flags);

1103 i‡(!(
Êags
 & 
OFPC_INVALID_TTL_TO_CONTROLLER
)) {

1105 
Êags
 |
OFPC_INVALID_TTL_TO_CONTROLLER
;

1107 
c⁄fig
.
Êags
 = 
	`ht⁄s
(flags);

1108 
	`£t_swôch_c⁄fig
(
vc⁄n
, &
c⁄fig
);

1113 
	`„tch_swôch_c⁄fig
(
vc⁄n
, &
c⁄fig
);

1114 
Êags
 = 
	`¡ohs
(
c⁄fig
.flags);

1115 i‡(!(
Êags
 & 
OFPC_INVALID_TTL_TO_CONTROLLER
)) {

1116 
	`ovs_Áèl
(0, "setting invalid_ttl_to_controller failed (this "

1118  -
EOPNOTSUPP
;

1122 
	}
}

1128 
	$›íÊow_‰om_hex
(c⁄° *
hex
, 
oÂbuf
 **
msgp
)

1130 
oÂ_hódî
 *
oh
;

1131 
oÂbuf
 *
msg
;

1133 
msg
 = 
	`oÂbuf_√w
(
	`°æí
(
hex
) / 2);

1134 *
msgp
 = 
NULL
;

1136 i‡(
	`oÂbuf_put_hex
(
msg
, 
hex
, 
NULL
)[0] != '\0') {

1137 
	`oÂbuf_dñëe
(
msg
);

1141 i‡(
msg
->
size
 < (
oÂ_hódî
)) {

1142 
	`oÂbuf_dñëe
(
msg
);

1146 
oh
 = 
msg
->
d©a
;

1147 i‡(
msg
->
size
 !
	`¡ohs
(
oh
->
Àngth
)) {

1148 
	`oÂbuf_dñëe
(
msg
);

1152 *
msgp
 = 
msg
;

1153  
NULL
;

1154 
	}
}

1157 
	$of˘l_£nd
(
unix˘l_c⁄n
 *
c⁄n
, 
¨gc
,

1158 c⁄° *
¨gv
[], *
vc⁄n_
)

1160 
vc⁄n
 *vc⁄¿
vc⁄n_
;

1161 
ds
 
ª∂y
;

1162 
boﬁ
 
ok
;

1163 
i
;

1165 
ok
 = 
åue
;

1166 
	`ds_öô
(&
ª∂y
);

1167 
i
 = 1; i < 
¨gc
; i++) {

1168 c⁄° *
îr‹_msg
;

1169 
oÂbuf
 *
msg
;

1170 
îr‹
;

1172 
îr‹_msg
 = 
	`›íÊow_‰om_hex
(
¨gv
[
i
], &
msg
);

1173 i‡(
îr‹_msg
) {

1174 
	`ds_put_f‹m©
(&
ª∂y
, "%s\n", 
îr‹_msg
);

1175 
ok
 = 
Ál£
;

1179 
	`Ârötf
(
°dîr
, "send: ");

1180 
	`oÂ_¥öt
(
°dîr
, 
msg
->
d©a
, msg->
size
, 
vîbosôy
);

1182 
îr‹
 = 
	`vc⁄n_£nd_block
(
vc⁄n
, 
msg
);

1183 i‡(
îr‹
) {

1184 
	`oÂbuf_dñëe
(
msg
);

1185 
	`ds_put_f‹m©
(&
ª∂y
, "%s\n", 
	`°ªº‹
(
îr‹
));

1186 
ok
 = 
Ál£
;

1188 
	`ds_put_c°r
(&
ª∂y
, "sent\n");

1192 i‡(
ok
) {

1193 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, 
	`ds_c°r
(&
ª∂y
));

1195 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, 
	`ds_c°r
(&
ª∂y
));

1197 
	`ds_de°roy
(&
ª∂y
);

1198 
	}
}

1200 
	sb¨rõr_aux
 {

1201 
vc⁄n
 *
	mvc⁄n
;

1202 
unix˘l_c⁄n
 *
	mc⁄n
;

1206 
	$of˘l_b¨rõr
(
unix˘l_c⁄n
 *
c⁄n
, 
¨gc
 
OVS_UNUSED
,

1207 c⁄° *
¨gv
[] 
OVS_UNUSED
, *
aux_
)

1209 
b¨rõr_aux
 *
aux
 = 
aux_
;

1210 
oÂbuf
 *
msg
;

1211 
îr‹
;

1213 i‡(
aux
->
c⁄n
) {

1214 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, "already waiting for barrierÑeply");

1218 
msg
 = 
	`oÂutû_ícode_b¨rõr_ªque°
(
	`vc⁄n_gë_vîsi⁄
(
aux
->
vc⁄n
));

1219 
îr‹
 = 
	`vc⁄n_£nd_block
(
aux
->
vc⁄n
, 
msg
);

1220 i‡(
îr‹
) {

1221 
	`oÂbuf_dñëe
(
msg
);

1222 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, 
	`°ªº‹
(
îr‹
));

1224 
aux
->
c⁄n
 = conn;

1226 
	}
}

1229 
	$of˘l_£t_ouçut_fûe
(
unix˘l_c⁄n
 *
c⁄n
, 
¨gc
 
OVS_UNUSED
,

1230 c⁄° *
¨gv
[], *
aux
 
OVS_UNUSED
)

1232 
fd
;

1234 
fd
 = 
	`›í
(
¨gv
[1], 
O_CREAT
 | 
O_TRUNC
 | 
O_WRONLY
, 0666);

1235 i‡(
fd
 < 0) {

1236 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, 
	`°ªº‹
(
î∫o
));

1240 
	`fÊush
(
°dîr
);

1241 
	`dup2
(
fd
, 
STDERR_FILENO
);

1242 
	`˛o£
(
fd
);

1243 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, 
NULL
);

1244 
	}
}

1247 
	$of˘l_block
(
unix˘l_c⁄n
 *
c⁄n
, 
¨gc
 
OVS_UNUSED
,

1248 c⁄° *
¨gv
[] 
OVS_UNUSED
, *
blocked_
)

1250 
boﬁ
 *
blocked
 = 
blocked_
;

1252 i‡(!*
blocked
) {

1253 *
blocked
 = 
åue
;

1254 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, 
NULL
);

1256 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, "already blocking");

1258 
	}
}

1261 
	$of˘l_unblock
(
unix˘l_c⁄n
 *
c⁄n
, 
¨gc
 
OVS_UNUSED
,

1262 c⁄° *
¨gv
[] 
OVS_UNUSED
, *
blocked_
)

1264 
boﬁ
 *
blocked
 = 
blocked_
;

1266 i‡(*
blocked
) {

1267 *
blocked
 = 
Ál£
;

1268 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, 
NULL
);

1270 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, "already unblocked");

1272 
	}
}

1275 
	$m⁄ô‹_vc⁄n
(
vc⁄n
 *vconn)

1277 
b¨rõr_aux
 b¨rõr_aux = { 
vc⁄n
, 
NULL
 };

1278 
unix˘l_£rvî
 *
£rvî
;

1279 
boﬁ
 
exôög
 = 
Ál£
;

1280 
boﬁ
 
blocked
 = 
Ál£
;

1281 
îr‹
;

1283 
	`d´m⁄_ßve_fd
(
STDERR_FILENO
);

1284 
	`d´m⁄ize_°¨t
();

1285 
îr‹
 = 
	`unix˘l_£rvî_¸óã
(
NULL
, &
£rvî
);

1286 i‡(
îr‹
) {

1287 
	`ovs_Áèl
(
îr‹
, "failedÅo create unixctl server");

1289 
	`unix˘l_comm™d_ªgi°î
("exô", "", 0, 0, 
of˘l_exô
, &
exôög
);

1290 
	`unix˘l_comm™d_ªgi°î
("of˘l/£nd", "OFMSG...", 1, 
INT_MAX
,

1291 
of˘l_£nd
, 
vc⁄n
);

1292 
	`unix˘l_comm™d_ªgi°î
("ofctl/barrier", "", 0, 0,

1293 
of˘l_b¨rõr
, &
b¨rõr_aux
);

1294 
	`unix˘l_comm™d_ªgi°î
("ofctl/set-output-file", "FILE", 1, 1,

1295 
of˘l_£t_ouçut_fûe
, 
NULL
);

1297 
	`unix˘l_comm™d_ªgi°î
("of˘l/block", "", 0, 0, 
of˘l_block
, &
blocked
);

1298 
	`unix˘l_comm™d_ªgi°î
("of˘l/unblock", "", 0, 0, 
of˘l_unblock
,

1299 &
blocked
);

1301 
	`d´m⁄ize_com∂ëe
();

1304 
oÂbuf
 *
b
;

1305 
ªtvÆ
;

1307 
	`unix˘l_£rvî_run
(
£rvî
);

1309 !
blocked
) {

1310 
oÂty≥
 
ty≥
;

1312 
ªtvÆ
 = 
	`vc⁄n_ªcv
(
vc⁄n
, &
b
);

1313 i‡(
ªtvÆ
 =
EAGAIN
) {

1316 
	`run
(
ªtvÆ
, "vconn_recv");

1318 i‡(
time°amp
) {

1319 
time_t
 
now
 = 
	`time_wÆl
();

1320 
s
[32];

1322 
	`°r·ime
(
s
,  s, "%Y-%m-%d %H:%M:%S: ", 
	`gmtime
(&
now
));

1323 
	`Âuts
(
s
, 
°dîr
);

1326 
	`oÂty≥_decode
(&
ty≥
, 
b
->
d©a
);

1327 
	`oÂ_¥öt
(
°dîr
, 
b
->
d©a
, b->
size
, 
vîbosôy
 + 2);

1328 
	`oÂbuf_dñëe
(
b
);

1330 i‡(
b¨rõr_aux
.
c⁄n
 && 
ty≥
 =
OFPTYPE_BARRIER_REPLY
) {

1331 
	`unix˘l_comm™d_ª∂y
(
b¨rõr_aux
.
c⁄n
, 
NULL
);

1332 
b¨rõr_aux
.
c⁄n
 = 
NULL
;

1336 i‡(
exôög
) {

1340 
	`vc⁄n_run
(
vc⁄n
);

1341 
	`vc⁄n_run_waô
(
vc⁄n
);

1342 i‡(!
blocked
) {

1343 
	`vc⁄n_ªcv_waô
(
vc⁄n
);

1345 
	`unix˘l_£rvî_waô
(
£rvî
);

1346 
	`pﬁl_block
();

1348 
	`vc⁄n_˛o£
(
vc⁄n
);

1349 
	`unix˘l_£rvî_de°roy
(
£rvî
);

1350 
	}
}

1353 
	$of˘l_m⁄ô‹
(
¨gc
, *
¨gv
[])

1355 
vc⁄n
 *vconn;

1356 
i
;

1358 
	`›í_vc⁄n
(
¨gv
[1], &
vc⁄n
);

1359 
i
 = 2; i < 
¨gc
; i++) {

1360 c⁄° *
¨g
 = 
¨gv
[
i
];

1362 i‡(
	`isdigô
((Ë*
¨g
)) {

1363 
oÂ_swôch_c⁄fig
 
c⁄fig
;

1365 
	`„tch_swôch_c⁄fig
(
vc⁄n
, &
c⁄fig
);

1366 
c⁄fig
.
miss_£nd_Àn
 = 
	`ht⁄s
(
	`©oi
(
¨g
));

1367 
	`£t_swôch_c⁄fig
(
vc⁄n
, &
c⁄fig
);

1368 } i‡(!
	`°rcmp
(
¨g
, "invalid_ttl")) {

1369 
	`m⁄ô‹_£t_övÆid_âl_to_c⁄åﬁÀr
(
vc⁄n
);

1370 } i‡(!
	`°∫cmp
(
¨g
, "watch:", 6)) {

1371 
oÂutû_Êow_m⁄ô‹_ªque°
 
fmr
;

1372 
oÂbuf
 *
msg
;

1374 
	`∑r£_Êow_m⁄ô‹_ªque°
(&
fmr
, 
¨g
 + 6);

1376 
msg
 = 
	`oÂbuf_√w
(0);

1377 
	`oÂutû_≠≥nd_Êow_m⁄ô‹_ªque°
(&
fmr
, 
msg
);

1378 
	`dump_°©s_å™ß˘i⁄
(
vc⁄n
, 
msg
);

1380 
	`ovs_Áèl
(0, "%s: unsuµ‹ãd \"m⁄ô‹\"árgumít", 
¨g
);

1384 i‡(
¥e„ºed_∑ckë_ö_f‹m©
 >= 0) {

1385 
	`£t_∑ckë_ö_f‹m©
(
vc⁄n
, 
¥e„ºed_∑ckë_ö_f‹m©
);

1387 
oÂbuf
 *
•if
, *
ª∂y
;

1389 
•if
 = 
	`oÂutû_make_£t_∑ckë_ö_f‹m©
(
	`vc⁄n_gë_vîsi⁄
(
vc⁄n
),

1390 
NXPIF_NXM
);

1391 
	`run
(
	`vc⁄n_å™ß˘_n‹ïly
(
vc⁄n
, 
•if
, &
ª∂y
),

1392 "èlkögÅÿ%s", 
	`vc⁄n_gë_«me
(
vc⁄n
));

1393 i‡(
ª∂y
) {

1394 *
s
 = 
	`oÂ_to_°rög
(
ª∂y
->
d©a
,Ñïly->
size
, 2);

1395 
	`VLOG_DBG
("%s: failedÅo setÖacket in formatÅoÇxm, controller"

1397 
	`vc⁄n_gë_«me
(
vc⁄n
), 
s
);

1398 
	`‰ì
(
s
);

1399 
	`oÂbuf_dñëe
(
ª∂y
);

1403 
	`m⁄ô‹_vc⁄n
(
vc⁄n
);

1404 
	}
}

1407 
	$of˘l_¢o›
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

1409 
vc⁄n
 *vconn;

1411 
	`›í_vc⁄n__
(
¨gv
[1], "¢o›", &
vc⁄n
);

1412 
	`m⁄ô‹_vc⁄n
(
vc⁄n
);

1413 
	}
}

1416 
	$of˘l_dump_p‹ts
(
¨gc
, *
¨gv
[])

1418 
oÂbuf
 *
ªque°
;

1419 
vc⁄n
 *vconn;

1420 
uöt16_t
 
p‹t
;

1422 
	`›í_vc⁄n
(
¨gv
[1], &
vc⁄n
);

1423 
p‹t
 = 
¨gc
 > 2 ? 
	`°r_to_p‹t_no
(
¨gv
[1],árgv[2]Ë: 
OFPP_NONE
;

1424 
ªque°
 = 
	`oÂutû_ícode_dump_p‹ts_ªque°
(
	`vc⁄n_gë_vîsi⁄
(
vc⁄n
), 
p‹t
);

1425 
	`dump_°©s_å™ß˘i⁄
(
vc⁄n
, 
ªque°
);

1426 
	`vc⁄n_˛o£
(
vc⁄n
);

1427 
	}
}

1430 
	$of˘l_dump_p‹ts_desc
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

1432 
	`dump_åivül_°©s_å™ß˘i⁄
(
¨gv
[1], 
OFPRAW_OFPST_PORT_DESC_REQUEST
);

1433 
	}
}

1436 
	$of˘l_¥obe
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

1438 
oÂbuf
 *
ªque°
;

1439 
vc⁄n
 *vconn;

1440 
oÂbuf
 *
ª∂y
;

1442 
	`›í_vc⁄n
(
¨gv
[1], &
vc⁄n
);

1443 
ªque°
 = 
	`make_echo_ªque°
(
	`vc⁄n_gë_vîsi⁄
(
vc⁄n
));

1444 
	`run
(
	`vc⁄n_å™ß˘
(
vc⁄n
, 
ªque°
, &
ª∂y
), "èlkögÅÿ%s", 
¨gv
[1]);

1445 i‡(
ª∂y
->
size
 !(
oÂ_hódî
)) {

1446 
	`ovs_Áèl
(0, "reply doesÇot matchÑequest");

1448 
	`oÂbuf_dñëe
(
ª∂y
);

1449 
	`vc⁄n_˛o£
(
vc⁄n
);

1450 
	}
}

1453 
	$of˘l_∑ckë_out
(
¨gc
, *
¨gv
[])

1455 
oÂutû_¥Ÿocﬁ
 
¥Ÿocﬁ
;

1456 
oÂutû_∑ckë_out
 
po
;

1457 
oÂbuf
 
oÂa˘s
;

1458 
vc⁄n
 *vconn;

1459 
i
;

1461 
	`oÂbuf_öô
(&
oÂa˘s
, 64);

1462 
	`∑r£_oÂa˘s
(
¨gv
[3], &
oÂa˘s
);

1464 
po
.
buf„r_id
 = 
UINT32_MAX
;

1465 
po
.
ö_p‹t
 = 
	`°r_to_p‹t_no
(
¨gv
[1],árgv[2]);

1466 
po
.
oÂa˘s
 = oÂa˘s.
d©a
;

1467 
po
.
oÂa˘s_Àn
 = 
oÂa˘s
.
size
;

1469 
¥Ÿocﬁ
 = 
	`›í_vc⁄n
(
¨gv
[1], &
vc⁄n
);

1470 
i
 = 4; i < 
¨gc
; i++) {

1471 
oÂbuf
 *
∑ckë
, *
›o
;

1472 c⁄° *
îr‹_msg
;

1474 
îr‹_msg
 = 
	`ëh_‰om_hex
(
¨gv
[
i
], &
∑ckë
);

1475 i‡(
îr‹_msg
) {

1476 
	`ovs_Áèl
(0, "%s", 
îr‹_msg
);

1479 
po
.
∑ckë
 =Öackë->
d©a
;

1480 
po
.
∑ckë_Àn
 = 
∑ckë
->
size
;

1481 
›o
 = 
	`oÂutû_ícode_∑ckë_out
(&
po
, 
¥Ÿocﬁ
);

1482 
	`å™ß˘_n‹ïly
(
vc⁄n
, 
›o
);

1483 
	`oÂbuf_dñëe
(
∑ckë
);

1485 
	`vc⁄n_˛o£
(
vc⁄n
);

1486 
	`oÂbuf_unöô
(&
oÂa˘s
);

1487 
	}
}

1490 
	$of˘l_mod_p‹t
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

1492 
	soÂ_c⁄fig_Êag
 {

1493 c⁄° *
«me
;

1494 
oÂutû_p‹t_c⁄fig
 
bô
;

1495 
boﬁ
 
⁄
;

1497 c⁄° 
oÂ_c⁄fig_Êag
 
Êags
[] = {

1498 { "up", 
OFPUTIL_PC_PORT_DOWN
, 
Ál£
 },

1499 { "down", 
OFPUTIL_PC_PORT_DOWN
, 
åue
 },

1500 { "°p", 
OFPUTIL_PC_NO_STP
, 
Ál£
 },

1501 { "ª˚ive", 
OFPUTIL_PC_NO_RECV
, 
Ál£
 },

1502 { "ª˚ive-°p", 
OFPUTIL_PC_NO_RECV_STP
, 
Ál£
 },

1503 { "Êood", 
OFPUTIL_PC_NO_FLOOD
, 
Ál£
 },

1504 { "f‹w¨d", 
OFPUTIL_PC_NO_FWD
, 
Ál£
 },

1505 { "∑ckë-ö", 
OFPUTIL_PC_NO_PACKET_IN
, 
Ál£
 },

1508 c⁄° 
oÂ_c⁄fig_Êag
 *
Êag
;

1509 
oÂutû_¥Ÿocﬁ
 
¥Ÿocﬁ
;

1510 
oÂutû_p‹t_mod
 
pm
;

1511 
oÂutû_phy_p‹t
 
µ
;

1512 
vc⁄n
 *vconn;

1513 c⁄° *
comm™d
;

1514 
boﬁ
 
nŸ
;

1516 
	`„tch_oÂutû_phy_p‹t
(
¨gv
[1],árgv[2], &
µ
);

1518 
pm
.
p‹t_no
 = 
µ
.port_no;

1519 
	`mem˝y
(
pm
.
hw_addr
, 
µ
.hw_addr, 
ETH_ADDR_LEN
);

1520 
pm
.
c⁄fig
 = 0;

1521 
pm
.
mask
 = 0;

1522 
pm
.
advîti£
 = 0;

1524 i‡(!
	`°∫ˇ£cmp
(
¨gv
[3], "no-", 3)) {

1525 
comm™d
 = 
¨gv
[3] + 3;

1526 
nŸ
 = 
åue
;

1527 } i‡(!
	`°∫ˇ£cmp
(
¨gv
[3], "no", 2)) {

1528 
comm™d
 = 
¨gv
[3] + 2;

1529 
nŸ
 = 
åue
;

1531 
comm™d
 = 
¨gv
[3];

1532 
nŸ
 = 
Ál£
;

1534 
Êag
 = 
Êags
; fœg < &Êags[
	`ARRAY_SIZE
(flags)]; flag++) {

1535 i‡(!
	`°rˇ£cmp
(
comm™d
, 
Êag
->
«me
)) {

1536 
pm
.
mask
 = 
Êag
->
bô
;

1537 
pm
.
c⁄fig
 = 
Êag
->
⁄
 ^ 
nŸ
 ? fœg->
bô
 : 0;

1538 
found
;

1541 
	`ovs_Áèl
(0, "unknow¿mod-p‹àcomm™d '%s'", 
¨gv
[3]);

1543 
found
:

1544 
¥Ÿocﬁ
 = 
	`›í_vc⁄n
(
¨gv
[1], &
vc⁄n
);

1545 
	`å™ß˘_n‹ïly
(
vc⁄n
, 
	`oÂutû_ícode_p‹t_mod
(&
pm
, 
¥Ÿocﬁ
));

1546 
	`vc⁄n_˛o£
(
vc⁄n
);

1547 
	}
}

1550 
	$of˘l_gë_‰ags
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

1552 
oÂ_swôch_c⁄fig
 
c⁄fig
;

1553 
vc⁄n
 *vconn;

1555 
	`›í_vc⁄n
(
¨gv
[1], &
vc⁄n
);

1556 
	`„tch_swôch_c⁄fig
(
vc⁄n
, &
c⁄fig
);

1557 
	`puts
(
	`oÂutû_‰ag_h™dlög_to_°rög
(
	`¡ohs
(
c⁄fig
.
Êags
)));

1558 
	`vc⁄n_˛o£
(
vc⁄n
);

1559 
	}
}

1562 
	$of˘l_£t_‰ags
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

1564 
oÂ_swôch_c⁄fig
 
c⁄fig
;

1565 
oÂ_c⁄fig_Êags
 
mode
;

1566 
vc⁄n
 *vconn;

1567 
ovs_be16
 
Êags
;

1569 i‡(!
	`oÂutû_‰ag_h™dlög_‰om_°rög
(
¨gv
[2], &
mode
)) {

1570 
	`ovs_Áèl
(0, "%s: unknow¿‰agmíàh™dlög mode", 
¨gv
[2]);

1573 
	`›í_vc⁄n
(
¨gv
[1], &
vc⁄n
);

1574 
	`„tch_swôch_c⁄fig
(
vc⁄n
, &
c⁄fig
);

1575 
Êags
 = 
	`ht⁄s
(
mode
Ë| (
c⁄fig
.Êag†& ht⁄s(~
OFPC_FRAG_MASK
));

1576 i‡(
Êags
 !
c⁄fig
.flags) {

1578 
c⁄fig
.
Êags
 = flags;

1579 
	`£t_swôch_c⁄fig
(
vc⁄n
, &
c⁄fig
);

1584 
	`„tch_swôch_c⁄fig
(
vc⁄n
, &
c⁄fig
);

1585 i‡(
Êags
 !
c⁄fig
.flags) {

1586 
	`ovs_Áèl
(0, "%s: setting fragment handling mode failed (this "

1588 
¨gv
[1], 
	`oÂutû_‰ag_h™dlög_to_°rög
(
mode
));

1591 
	`vc⁄n_˛o£
(
vc⁄n
);

1592 
	}
}

1595 
	$of˘l_pög
(
¨gc
, *
¨gv
[])

1597 
size_t
 
max_∑ylﬂd
 = 65535 - (
oÂ_hódî
);

1598 
∑ylﬂd
;

1599 
vc⁄n
 *vconn;

1600 
i
;

1602 
∑ylﬂd
 = 
¨gc
 > 2 ? 
	`©oi
(
¨gv
[2]) : 64;

1603 i‡(
∑ylﬂd
 > 
max_∑ylﬂd
) {

1604 
	`ovs_Áèl
(0, "∑ylﬂd mu° bêbëwì¿0ánd %zu byãs", 
max_∑ylﬂd
);

1607 
	`›í_vc⁄n
(
¨gv
[1], &
vc⁄n
);

1608 
i
 = 0; i < 10; i++) {

1609 
timevÆ
 
°¨t
, 
íd
;

1610 
oÂbuf
 *
ªque°
, *
ª∂y
;

1611 c⁄° 
oÂ_hódî
 *
Ωy_hdr
;

1612 
oÂty≥
 
ty≥
;

1614 
ªque°
 = 
	`oÂøw_Æloc
(
OFPRAW_OFPT_ECHO_REQUEST
, 
OFP10_VERSION
,

1615 
∑ylﬂd
);

1616 
	`øndom_byãs
(
	`oÂbuf_put_unöô
(
ªque°
, 
∑ylﬂd
),Öayload);

1618 
	`xgëtimeofday
(&
°¨t
);

1619 
	`run
(
	`vc⁄n_å™ß˘
(
vc⁄n
, 
	`oÂbuf_˛⁄e
(
ªque°
), &
ª∂y
), "transact");

1620 
	`xgëtimeofday
(&
íd
);

1622 
Ωy_hdr
 = 
ª∂y
->
d©a
;

1623 i‡(
	`oÂty≥_puŒ
(&
ty≥
, 
ª∂y
)

1624 || 
ty≥
 !
OFPTYPE_ECHO_REPLY


1625 || 
ª∂y
->
size
 !
∑ylﬂd


1626 || 
	`memcmp
(
ªque°
->
l3
, 
ª∂y
->l3, 
∑ylﬂd
)) {

1627 
	`¥ötf
("Reply doesÇot matchÑequest. Request:\n");

1628 
	`oÂ_¥öt
(
°dout
, 
ªque°
,Ñeque°->
size
, 
vîbosôy
 + 2);

1629 
	`¥ötf
("Reply:\n");

1630 
	`oÂ_¥öt
(
°dout
, 
ª∂y
,Ñïly->
size
, 
vîbosôy
 + 2);

1632 
	`¥ötf
("%zu byã†‰om %s: xid=%08"
PRIx32
"Åime=%.1f ms\n",

1633 
ª∂y
->
size
, 
¨gv
[1], 
	`¡ohl
(
Ωy_hdr
->
xid
),

1634 (1000*()(
íd
.
tv_£c
 - 
°¨t
.tv_sec))

1635 + (.001*(
íd
.
tv_u£c
 - 
°¨t
.tv_usec)));

1636 
	`oÂbuf_dñëe
(
ªque°
);

1637 
	`oÂbuf_dñëe
(
ª∂y
);

1639 
	`vc⁄n_˛o£
(
vc⁄n
);

1640 
	}
}

1643 
	$of˘l_bíchm¨k
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

1645 
size_t
 
max_∑ylﬂd
 = 65535 - (
oÂ_hódî
);

1646 
timevÆ
 
°¨t
, 
íd
;

1647 
∑ylﬂd_size
, 
mesßge_size
;

1648 
vc⁄n
 *vconn;

1649 
duøti⁄
;

1650 
cou¡
;

1651 
i
;

1653 
∑ylﬂd_size
 = 
	`©oi
(
¨gv
[2]);

1654 i‡(
∑ylﬂd_size
 > 
max_∑ylﬂd
) {

1655 
	`ovs_Áèl
(0, "∑ylﬂd mu° bêbëwì¿0ánd %zu byãs", 
max_∑ylﬂd
);

1657 
mesßge_size
 = (
oÂ_hódî
Ë+ 
∑ylﬂd_size
;

1659 
cou¡
 = 
	`©oi
(
¨gv
[3]);

1661 
	`¥ötf
("Sending %dÖackets * %u bytes (with header) = %u bytesÅotal\n",

1662 
cou¡
, 
mesßge_size
, count * message_size);

1664 
	`›í_vc⁄n
(
¨gv
[1], &
vc⁄n
);

1665 
	`xgëtimeofday
(&
°¨t
);

1666 
i
 = 0; i < 
cou¡
; i++) {

1667 
oÂbuf
 *
ªque°
, *
ª∂y
;

1669 
ªque°
 = 
	`oÂøw_Æloc
(
OFPRAW_OFPT_ECHO_REQUEST
, 
OFP10_VERSION
,

1670 
∑ylﬂd_size
);

1671 
	`oÂbuf_put_zîos
(
ªque°
, 
∑ylﬂd_size
);

1672 
	`run
(
	`vc⁄n_å™ß˘
(
vc⁄n
, 
ªque°
, &
ª∂y
), "transact");

1673 
	`oÂbuf_dñëe
(
ª∂y
);

1675 
	`xgëtimeofday
(&
íd
);

1676 
	`vc⁄n_˛o£
(
vc⁄n
);

1678 
duøti⁄
 = ((1000*()(
íd
.
tv_£c
 - 
°¨t
.tv_sec))

1679 + (.001*(
íd
.
tv_u£c
 - 
°¨t
.tv_usec)));

1680 
	`¥ötf
("Finished in %.1f ms (%.0fÖackets/s) (%.0f bytes/s)\n",

1681 
duøti⁄
, 
cou¡
 / (duration / 1000.0),

1682 
cou¡
 * 
mesßge_size
 / (
duøti⁄
 / 1000.0));

1683 
	}
}

1686 
	$of˘l_hñp
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

1688 
	`ußge
();

1689 
	}
}

1694 
	s·e
 {

1695 
˛s_ruÀ
 
	mruÀ
;

1696 
·e_vîsi⁄
 *
	mvîsi⁄s
[2];

1700 
	s·e_vîsi⁄
 {

1701 
ovs_be64
 
	mcookõ
;

1702 
uöt16_t
 
	midÀ_timeout
;

1703 
uöt16_t
 
	mh¨d_timeout
;

1704 
uöt16_t
 
	mÊags
;

1705 
oÂa˘
 *
	moÂa˘s
;

1706 
size_t
 
	moÂa˘s_Àn
;

1711 
	$·e_vîsi⁄_‰ì
(
·e_vîsi⁄
 *
vîsi⁄
)

1713 i‡(
vîsi⁄
) {

1714 
	`‰ì
(
vîsi⁄
->
oÂa˘s
);

1715 
	`‰ì
(
vîsi⁄
);

1717 
	}
}

1723 
boﬁ


1724 
	$·e_vîsi⁄_equÆs
(c⁄° 
·e_vîsi⁄
 *
a
, c⁄° ·e_vîsi⁄ *
b
)

1726  (
a
->
cookõ
 =
b
->cookie

1727 && 
a
->
idÀ_timeout
 =
b
->idle_timeout

1728 && 
a
->
h¨d_timeout
 =
b
->hard_timeout

1729 && 
	`oÂa˘s_equÆ
(
a
->
oÂa˘s
,á->
oÂa˘s_Àn
,

1730 
b
->
oÂa˘s
, b->
oÂa˘s_Àn
));

1731 
	}
}

1736 
	$·e_vîsi⁄_f‹m©
(c⁄° 
·e
 *·e, 
ödex
, 
ds
 *
s
)

1738 c⁄° 
·e_vîsi⁄
 *
vîsi⁄
 = 
·e
->
vîsi⁄s
[
ödex
];

1740 
	`ds_˛ór
(
s
);

1741 i‡(!
vîsi⁄
) {

1745 
	`˛s_ruÀ_f‹m©
(&
·e
->
ruÀ
, 
s
);

1746 i‡(
vîsi⁄
->
cookõ
 !
	`ht⁄Œ
(0)) {

1747 
	`ds_put_f‹m©
(
s
, " cookõ=0x%"
PRIx64
, 
	`¡ohŒ
(
vîsi⁄
->
cookõ
));

1749 i‡(
vîsi⁄
->
idÀ_timeout
 !
OFP_FLOW_PERMANENT
) {

1750 
	`ds_put_f‹m©
(
s
, " idÀ_timeout=%"
PRIu16
, 
vîsi⁄
->
idÀ_timeout
);

1752 i‡(
vîsi⁄
->
h¨d_timeout
 !
OFP_FLOW_PERMANENT
) {

1753 
	`ds_put_f‹m©
(
s
, " h¨d_timeout=%"
PRIu16
, 
vîsi⁄
->
h¨d_timeout
);

1756 
	`ds_put_ch¨
(
s
, ' ');

1757 
	`oÂa˘s_f‹m©
(
vîsi⁄
->
oÂa˘s
, vîsi⁄->
oÂa˘s_Àn
, 
s
);

1759 
	`ds_put_ch¨
(
s
, '\n');

1760 
	}
}

1762 
·e
 *

1763 
	$·e_‰om_˛s_ruÀ
(c⁄° 
˛s_ruÀ
 *cls_rule)

1765  
˛s_ruÀ
 ? 
	`CONTAINER_OF
(˛s_ruÀ, 
·e
, 
ruÀ
Ë: 
NULL
;

1766 
	}
}

1770 
	$·e_‰ì
(
·e
 *fte)

1772 i‡(
·e
) {

1773 
	`·e_vîsi⁄_‰ì
(
·e
->
vîsi⁄s
[0]);

1774 
	`·e_vîsi⁄_‰ì
(
·e
->
vîsi⁄s
[1]);

1775 
	`˛s_ruÀ_de°roy
(&
·e
->
ruÀ
);

1776 
	`‰ì
(
·e
);

1778 
	}
}

1782 
	$·e_‰ì_Æl
(
˛assifõr
 *
˛s
)

1784 
˛s_curs‹
 
curs‹
;

1785 
·e
 *·e, *
√xt
;

1787 
	`˛s_curs‹_öô
(&
curs‹
, 
˛s
, 
NULL
);

1788 
	`CLS_CURSOR_FOR_EACH_SAFE
 (
·e
, 
√xt
, 
ruÀ
, &
curs‹
) {

1789 
	`˛assifõr_ªmove
(
˛s
, &
·e
->
ruÀ
);

1790 
	`·e_‰ì
(
·e
);

1792 
	`˛assifõr_de°roy
(
˛s
);

1793 
	}
}

1801 
	$·e_ö£π
(
˛assifõr
 *
˛s
, c⁄° 
m©ch
 *match,

1802 
¥i‹ôy
, 
·e_vîsi⁄
 *
vîsi⁄
, 
ödex
)

1804 
·e
 *
ﬁd
, *fte;

1806 
·e
 = 
	`xzÆloc
( *fte);

1807 
	`˛s_ruÀ_öô
(&
·e
->
ruÀ
, 
m©ch
, 
¥i‹ôy
);

1808 
·e
->
vîsi⁄s
[
ödex
] = 
vîsi⁄
;

1810 
ﬁd
 = 
	`·e_‰om_˛s_ruÀ
(
	`˛assifõr_ª∂a˚
(
˛s
, &
·e
->
ruÀ
));

1811 i‡(
ﬁd
) {

1812 
	`·e_vîsi⁄_‰ì
(
ﬁd
->
vîsi⁄s
[
ödex
]);

1813 
·e
->
vîsi⁄s
[!
ödex
] = 
ﬁd
->versions[!index];

1814 
	`˛s_ruÀ_de°roy
(&
ﬁd
->
ruÀ
);

1815 
	`‰ì
(
ﬁd
);

1817 
	}
}

1822 
oÂutû_¥Ÿocﬁ


1823 
	$ªad_Êows_‰om_fûe
(c⁄° *
fûíame
, 
˛assifõr
 *
˛s
, 
ödex
)

1825 
oÂutû_¥Ÿocﬁ
 
ußbÀ_¥Ÿocﬁs
;

1826 
ds
 
s
;

1827 
FILE
 *
fûe
;

1829 
fûe
 = !
	`°rcmp
(
fûíame
, "-"Ë? 
°dö
 : 
	`f›í
(filename, "r");

1830 i‡(
fûe
 =
NULL
) {

1831 
	`ovs_Áèl
(
î∫o
, "%s: o≥n", 
fûíame
);

1834 
	`ds_öô
(&
s
);

1835 
ußbÀ_¥Ÿocﬁs
 = 
OFPUTIL_P_ANY
;

1836 !
	`ds_gë_¥ïro˚s£d_löe
(&
s
, 
fûe
)) {

1837 
·e_vîsi⁄
 *
vîsi⁄
;

1838 
oÂutû_Êow_mod
 
fm
;

1840 
	`∑r£_oÂ_°r
(&
fm
, 
OFPFC_ADD
, 
	`ds_c°r
(&
s
), 
åue
);

1842 
vîsi⁄
 = 
	`xmÆloc
( *version);

1843 
vîsi⁄
->
cookõ
 = 
fm
.
√w_cookõ
;

1844 
vîsi⁄
->
idÀ_timeout
 = 
fm
.idle_timeout;

1845 
vîsi⁄
->
h¨d_timeout
 = 
fm
.hard_timeout;

1846 
vîsi⁄
->
Êags
 = 
fm
.Êag†& (
OFPFF_SEND_FLOW_REM
 | 
OFPFF10_EMERG
);

1847 
vîsi⁄
->
oÂa˘s
 = 
fm
.ofpacts;

1848 
vîsi⁄
->
oÂa˘s_Àn
 = 
fm
.ofpacts_len;

1850 
ußbÀ_¥Ÿocﬁs
 &
	`oÂutû_ußbÀ_¥Ÿocﬁs
(&
fm
.
m©ch
);

1852 
	`·e_ö£π
(
˛s
, &
fm
.
m©ch
, fm.
¥i‹ôy
, 
vîsi⁄
, 
ödex
);

1854 
	`ds_de°roy
(&
s
);

1856 i‡(
fûe
 !
°dö
) {

1857 
	`f˛o£
(
fûe
);

1860  
ußbÀ_¥Ÿocﬁs
;

1861 
	}
}

1863 
boﬁ


1864 
	$ªcv_Êow_°©s_ª∂y
(
vc⁄n
 *vc⁄n, 
ovs_be32
 
£nd_xid
,

1865 
oÂbuf
 **
ª∂yp
,

1866 
oÂutû_Êow_°©s
 *
fs
, 
oÂbuf
 *
oÂa˘s
)

1868 
oÂbuf
 *
ª∂y
 = *
ª∂yp
;

1871 
ªtvÆ
;

1872 
boﬁ
 
m‹e
;

1875 i‡(!
ª∂y
) {

1876 
oÂty≥
 
ty≥
;

1877 
oÂîr
 
îr‹
;

1880 
	`run
(
	`vc⁄n_ªcv_block
(
vc⁄n
, &
ª∂y
),

1882 } ((
oÂ_hódî
 *Ë
ª∂y
->
d©a
)->
xid
 !
£nd_xid
);

1884 
îr‹
 = 
	`oÂty≥_decode
(&
ty≥
, 
ª∂y
->
d©a
);

1885 i‡(
îr‹
 || 
ty≥
 !
OFPTYPE_FLOW_STATS_REPLY
) {

1886 
	`ovs_Áèl
(0, "received badÑeply: %s",

1887 
	`oÂ_to_°rög
(
ª∂y
->
d©a
,Ñïly->
size
,

1888 
vîbosôy
 + 1));

1893 
ªtvÆ
 = 
	`oÂutû_decode_Êow_°©s_ª∂y
(
fs
, 
ª∂y
, 
Ál£
, 
oÂa˘s
);

1894 
ªtvÆ
) {

1896 *
ª∂yp
 = 
ª∂y
;

1897  
åue
;

1899 
EOF
:

1900 
m‹e
 = 
	`oÂmp_m‹e
(
ª∂y
->
l2
);

1901 
	`oÂbuf_dñëe
(
ª∂y
);

1902 
ª∂y
 = 
NULL
;

1903 i‡(!
m‹e
) {

1904 *
ª∂yp
 = 
NULL
;

1905  
Ál£
;

1910 
	`ovs_Áèl
(0, "parseÉrror inÑeply (%s)",

1911 
	`oÂîr_to_°rög
(
ªtvÆ
));

1914 
	}
}

1920 
	$ªad_Êows_‰om_swôch
(
vc⁄n
 *vconn,

1921 
oÂutû_¥Ÿocﬁ
 
¥Ÿocﬁ
,

1922 
˛assifõr
 *
˛s
, 
ödex
)

1924 
oÂutû_Êow_°©s_ªque°
 
f§
;

1925 
oÂutû_Êow_°©s
 
fs
;

1926 
oÂbuf
 *
ªque°
;

1927 
oÂbuf
 
oÂa˘s
;

1928 
oÂbuf
 *
ª∂y
;

1929 
ovs_be32
 
£nd_xid
;

1931 
f§
.
aggªg©e
 = 
Ál£
;

1932 
	`m©ch_öô_ˇtchÆl
(&
f§
.
m©ch
);

1933 
f§
.
out_p‹t
 = 
OFPP_NONE
;

1934 
f§
.
èbÀ_id
 = 0xff;

1935 
f§
.
cookõ
 = f§.
cookõ_mask
 = 
	`ht⁄Œ
(0);

1936 
ªque°
 = 
	`oÂutû_ícode_Êow_°©s_ªque°
(&
f§
, 
¥Ÿocﬁ
);

1937 
£nd_xid
 = ((
oÂ_hódî
 *Ë
ªque°
->
d©a
)->
xid
;

1938 
	`£nd_›íÊow_buf„r
(
vc⁄n
, 
ªque°
);

1940 
ª∂y
 = 
NULL
;

1941 
	`oÂbuf_öô
(&
oÂa˘s
, 0);

1942 
	`ªcv_Êow_°©s_ª∂y
(
vc⁄n
, 
£nd_xid
, &
ª∂y
, &
fs
, &
oÂa˘s
)) {

1943 
·e_vîsi⁄
 *
vîsi⁄
;

1945 
vîsi⁄
 = 
	`xmÆloc
( *version);

1946 
vîsi⁄
->
cookõ
 = 
fs
.cookie;

1947 
vîsi⁄
->
idÀ_timeout
 = 
fs
.idle_timeout;

1948 
vîsi⁄
->
h¨d_timeout
 = 
fs
.hard_timeout;

1949 
vîsi⁄
->
Êags
 = 0;

1950 
vîsi⁄
->
oÂa˘s_Àn
 = 
fs
.ofpacts_len;

1951 
vîsi⁄
->
oÂa˘s
 = 
	`xmemdup
(
fs
.oÂa˘s, fs.
oÂa˘s_Àn
);

1953 
	`·e_ö£π
(
˛s
, &
fs
.
m©ch
, fs.
¥i‹ôy
, 
vîsi⁄
, 
ödex
);

1955 
	`oÂbuf_unöô
(&
oÂa˘s
);

1956 
	}
}

1959 
	$·e_make_Êow_mod
(c⁄° 
·e
 *·e, 
ödex
, 
uöt16_t
 
comm™d
,

1960 
oÂutû_¥Ÿocﬁ
 
¥Ÿocﬁ
, 
li°
 *
∑ckës
)

1962 c⁄° 
·e_vîsi⁄
 *
vîsi⁄
 = 
·e
->
vîsi⁄s
[
ödex
];

1963 
oÂutû_Êow_mod
 
fm
;

1964 
oÂbuf
 *
ofm
;

1966 
	`möim©ch_ex∑nd
(&
·e
->
ruÀ
.
m©ch
, &
fm
.match);

1967 
fm
.
¥i‹ôy
 = 
·e
->
ruÀ
.priority;

1968 
fm
.
cookõ
 = 
	`ht⁄Œ
(0);

1969 
fm
.
cookõ_mask
 = 
	`ht⁄Œ
(0);

1970 
fm
.
√w_cookõ
 = 
vîsi⁄
->
cookõ
;

1971 
fm
.
èbÀ_id
 = 0xff;

1972 
fm
.
comm™d
 = command;

1973 
fm
.
idÀ_timeout
 = 
vîsi⁄
->idle_timeout;

1974 
fm
.
h¨d_timeout
 = 
vîsi⁄
->hard_timeout;

1975 
fm
.
buf„r_id
 = 
UINT32_MAX
;

1976 
fm
.
out_p‹t
 = 
OFPP_NONE
;

1977 
fm
.
Êags
 = 
vîsi⁄
->flags;

1978 i‡(
comm™d
 =
OFPFC_ADD
 || comm™d =
OFPFC_MODIFY
 ||

1979 
comm™d
 =
OFPFC_MODIFY_STRICT
) {

1980 
fm
.
oÂa˘s
 = 
vîsi⁄
->ofpacts;

1981 
fm
.
oÂa˘s_Àn
 = 
vîsi⁄
->ofpacts_len;

1983 
fm
.
oÂa˘s
 = 
NULL
;

1984 
fm
.
oÂa˘s_Àn
 = 0;

1987 
ofm
 = 
	`oÂutû_ícode_Êow_mod
(&
fm
, 
¥Ÿocﬁ
);

1988 
	`li°_push_back
(
∑ckës
, &
ofm
->
li°_node
);

1989 
	}
}

1992 
	$of˘l_ª∂a˚_Êows
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

1994 íum { 
FILE_IDX
 = 0, 
SWITCH_IDX
 = 1 };

1995 
oÂutû_¥Ÿocﬁ
 
ußbÀ_¥Ÿocﬁs
, 
¥Ÿocﬁ
;

1996 
˛s_curs‹
 
curs‹
;

1997 
˛assifõr
 
˛s
;

1998 
li°
 
ªque°s
;

1999 
vc⁄n
 *vconn;

2000 
·e
 *fte;

2002 
	`˛assifõr_öô
(&
˛s
);

2003 
ußbÀ_¥Ÿocﬁs
 = 
	`ªad_Êows_‰om_fûe
(
¨gv
[2], &
˛s
, 
FILE_IDX
);

2005 
¥Ÿocﬁ
 = 
	`›í_vc⁄n
(
¨gv
[1], &
vc⁄n
);

2006 
¥Ÿocﬁ
 = 
	`£t_¥Ÿocﬁ_f‹_Êow_dump
(
vc⁄n
,ÖrŸocﬁ, 
ußbÀ_¥Ÿocﬁs
);

2008 
	`ªad_Êows_‰om_swôch
(
vc⁄n
, 
¥Ÿocﬁ
, &
˛s
, 
SWITCH_IDX
);

2010 
	`li°_öô
(&
ªque°s
);

2013 
	`˛s_curs‹_öô
(&
curs‹
, &
˛s
, 
NULL
);

2014 
	`CLS_CURSOR_FOR_EACH
 (
·e
, 
ruÀ
, &
curs‹
) {

2015 
·e_vîsi⁄
 *
fûe_vî
 = 
·e
->
vîsi⁄s
[
FILE_IDX
];

2016 
·e_vîsi⁄
 *
sw_vî
 = 
·e
->
vîsi⁄s
[
SWITCH_IDX
];

2018 i‡(
sw_vî
 && !
fûe_vî
) {

2019 
	`·e_make_Êow_mod
(
·e
, 
SWITCH_IDX
, 
OFPFC_DELETE_STRICT
,

2020 
¥Ÿocﬁ
, &
ªque°s
);

2026 
	`˛s_curs‹_öô
(&
curs‹
, &
˛s
, 
NULL
);

2027 
	`CLS_CURSOR_FOR_EACH
 (
·e
, 
ruÀ
, &
curs‹
) {

2028 
·e_vîsi⁄
 *
fûe_vî
 = 
·e
->
vîsi⁄s
[
FILE_IDX
];

2029 
·e_vîsi⁄
 *
sw_vî
 = 
·e
->
vîsi⁄s
[
SWITCH_IDX
];

2031 i‡(
fûe_vî


2032 && (
ªadd
 || !
sw_vî
 || !
	`·e_vîsi⁄_equÆs
(sw_vî, 
fûe_vî
))) {

2033 
	`·e_make_Êow_mod
(
·e
, 
FILE_IDX
, 
OFPFC_ADD
, 
¥Ÿocﬁ
, &
ªque°s
);

2036 
	`å™ß˘_mu…ùÀ_n‹ïly
(
vc⁄n
, &
ªque°s
);

2037 
	`vc⁄n_˛o£
(
vc⁄n
);

2039 
	`·e_‰ì_Æl
(&
˛s
);

2040 
	}
}

2043 
	$ªad_Êows_‰om_sour˚
(c⁄° *
sour˚
, 
˛assifõr
 *
˛s
, 
ödex
)

2045 
°©
 
s
;

2047 i‡(
sour˚
[0] == '/' || source[0] == '.'

2048 || (!
	`°rchr
(
sour˚
, ':'Ë&& !
	`°©
(sour˚, &
s
))) {

2049 
	`ªad_Êows_‰om_fûe
(
sour˚
, 
˛s
, 
ödex
);

2051 
oÂutû_¥Ÿocﬁ
 
¥Ÿocﬁ
;

2052 
vc⁄n
 *vconn;

2054 
¥Ÿocﬁ
 = 
	`›í_vc⁄n
(
sour˚
, &
vc⁄n
);

2055 
¥Ÿocﬁ
 = 
	`£t_¥Ÿocﬁ_f‹_Êow_dump
(
vc⁄n
,ÖrŸocﬁ, 
OFPUTIL_P_ANY
);

2056 
	`ªad_Êows_‰om_swôch
(
vc⁄n
, 
¥Ÿocﬁ
, 
˛s
, 
ödex
);

2057 
	`vc⁄n_˛o£
(
vc⁄n
);

2059 
	}
}

2062 
	$of˘l_diff_Êows
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

2064 
boﬁ
 
dif„ªn˚s
 = 
Ál£
;

2065 
˛s_curs‹
 
curs‹
;

2066 
˛assifõr
 
˛s
;

2067 
ds
 
a_s
, 
b_s
;

2068 
·e
 *fte;

2070 
	`˛assifõr_öô
(&
˛s
);

2071 
	`ªad_Êows_‰om_sour˚
(
¨gv
[1], &
˛s
, 0);

2072 
	`ªad_Êows_‰om_sour˚
(
¨gv
[2], &
˛s
, 1);

2074 
	`ds_öô
(&
a_s
);

2075 
	`ds_öô
(&
b_s
);

2077 
	`˛s_curs‹_öô
(&
curs‹
, &
˛s
, 
NULL
);

2078 
	`CLS_CURSOR_FOR_EACH
 (
·e
, 
ruÀ
, &
curs‹
) {

2079 
·e_vîsi⁄
 *
a
 = 
·e
->
vîsi⁄s
[0];

2080 
·e_vîsi⁄
 *
b
 = 
·e
->
vîsi⁄s
[1];

2082 i‡(!
a
 || !
b
 || !
	`·e_vîsi⁄_equÆs
(a, b)) {

2083 
	`·e_vîsi⁄_f‹m©
(
·e
, 0, &
a_s
);

2084 
	`·e_vîsi⁄_f‹m©
(
·e
, 1, &
b_s
);

2085 i‡(
	`°rcmp
(
	`ds_c°r
(&
a_s
), ds_c°r(&
b_s
))) {

2086 i‡(
a_s
.
Àngth
) {

2087 
	`¥ötf
("-%s", 
	`ds_c°r
(&
a_s
));

2089 i‡(
b_s
.
Àngth
) {

2090 
	`¥ötf
("+%s", 
	`ds_c°r
(&
b_s
));

2092 
dif„ªn˚s
 = 
åue
;

2097 
	`ds_de°roy
(&
a_s
);

2098 
	`ds_de°roy
(&
b_s
);

2100 
	`·e_‰ì_Æl
(&
˛s
);

2102 i‡(
dif„ªn˚s
) {

2103 
	`exô
(2);

2105 
	}
}

2110 
	$of˘l_∑r£_Êows__
(
oÂutû_Êow_mod
 *
fms
, 
size_t
 
n_fms
)

2112 
oÂutû_¥Ÿocﬁ
 
ußbÀ_¥Ÿocﬁs
;

2113 
oÂutû_¥Ÿocﬁ
 
¥Ÿocﬁ
 = 0;

2114 *
ußbÀ_s
;

2115 
size_t
 
i
;

2117 
ußbÀ_¥Ÿocﬁs
 = 
	`oÂutû_Êow_mod_ußbÀ_¥Ÿocﬁs
(
fms
, 
n_fms
);

2118 
ußbÀ_s
 = 
	`oÂutû_¥Ÿocﬁs_to_°rög
(
ußbÀ_¥Ÿocﬁs
);

2119 
	`¥ötf
("ußbÀÖrŸocﬁs: %s\n", 
ußbÀ_s
);

2120 
	`‰ì
(
ußbÀ_s
);

2122 i‡(!(
ußbÀ_¥Ÿocﬁs
 & 
Ælowed_¥Ÿocﬁs
)) {

2123 
	`ovs_Áèl
(0, "no usableÖrotocol");

2125 
i
 = 0; i < (
oÂutû_¥Ÿocﬁ
Ë* 
CHAR_BIT
; i++) {

2126 
¥Ÿocﬁ
 = 1 << 
i
;

2127 i‡(
¥Ÿocﬁ
 & 
ußbÀ_¥Ÿocﬁs
 & 
Ælowed_¥Ÿocﬁs
) {

2131 
	`as£π
(
	`IS_POW2
(
¥Ÿocﬁ
));

2133 
	`¥ötf
("cho£¿¥Ÿocﬁ: %s\n", 
	`oÂutû_¥Ÿocﬁ_to_°rög
(
¥Ÿocﬁ
));

2135 
i
 = 0; i < 
n_fms
; i++) {

2136 
oÂutû_Êow_mod
 *
fm
 = &
fms
[
i
];

2137 
oÂbuf
 *
msg
;

2139 
msg
 = 
	`oÂutû_ícode_Êow_mod
(
fm
, 
¥Ÿocﬁ
);

2140 
	`oÂ_¥öt
(
°dout
, 
msg
->
d©a
, msg->
size
, 
vîbosôy
);

2141 
	`oÂbuf_dñëe
(
msg
);

2143 
	`‰ì
(
fm
->
oÂa˘s
);

2145 
	}
}

2150 
	$of˘l_∑r£_Êow
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

2152 
oÂutû_Êow_mod
 
fm
;

2154 
	`∑r£_oÂ_Êow_mod_°r
(&
fm
, 
¨gv
[1], 
OFPFC_ADD
, 
Ál£
);

2155 
	`of˘l_∑r£_Êows__
(&
fm
, 1);

2156 
	}
}

2161 
	$of˘l_∑r£_Êows
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

2163 
oÂutû_Êow_mod
 *
fms
 = 
NULL
;

2164 
size_t
 
n_fms
 = 0;

2166 
	`∑r£_oÂ_Êow_mod_fûe
(
¨gv
[1], 
OFPFC_ADD
, &
fms
, &
n_fms
);

2167 
	`of˘l_∑r£_Êows__
(
fms
, 
n_fms
);

2168 
	`‰ì
(
fms
);

2169 
	}
}

2172 
	$of˘l_∑r£_nxm__
(
boﬁ
 
oxm
)

2174 
ds
 
ö
;

2176 
	`ds_öô
(&
ö
);

2177 !
	`ds_gë_ã°_löe
(&
ö
, 
°dö
)) {

2178 
oÂbuf
 
nx_m©ch
;

2179 
m©ch
 match;

2180 
ovs_be64
 
cookõ
, 
cookõ_mask
;

2181 
oÂîr
 
îr‹
;

2182 
m©ch_Àn
;

2185 
	`oÂbuf_öô
(&
nx_m©ch
, 0);

2186 i‡(
oxm
) {

2187 
m©ch_Àn
 = 
	`oxm_m©ch_‰om_°rög
(
	`ds_c°r
(&
ö
), &
nx_m©ch
);

2189 
m©ch_Àn
 = 
	`nx_m©ch_‰om_°rög
(
	`ds_c°r
(&
ö
), &
nx_m©ch
);

2193 i‡(
°ri˘
) {

2194 i‡(
oxm
) {

2195 
îr‹
 = 
	`oxm_puŒ_m©ch
(&
nx_m©ch
, &
m©ch
);

2197 
îr‹
 = 
	`nx_puŒ_m©ch
(&
nx_m©ch
, 
m©ch_Àn
, &
m©ch
,

2198 &
cookõ
, &
cookõ_mask
);

2201 i‡(
oxm
) {

2202 
îr‹
 = 
	`oxm_puŒ_m©ch_loo£
(&
nx_m©ch
, &
m©ch
);

2204 
îr‹
 = 
	`nx_puŒ_m©ch_loo£
(&
nx_m©ch
, 
m©ch_Àn
, &
m©ch
,

2205 &
cookõ
, &
cookõ_mask
);

2210 i‡(!
îr‹
) {

2211 *
out
;

2214 
	`oÂbuf_unöô
(&
nx_m©ch
);

2215 
	`oÂbuf_öô
(&
nx_m©ch
, 0);

2216 i‡(
oxm
) {

2217 
m©ch_Àn
 = 
	`oxm_put_m©ch
(&
nx_m©ch
, &
m©ch
);

2218 
out
 = 
	`oxm_m©ch_to_°rög
(
nx_m©ch
.
d©a
, 
m©ch_Àn
);

2220 
m©ch_Àn
 = 
	`nx_put_m©ch
(&
nx_m©ch
, &
m©ch
,

2221 
cookõ
, 
cookõ_mask
);

2222 
out
 = 
	`nx_m©ch_to_°rög
(
nx_m©ch
.
d©a
, 
m©ch_Àn
);

2225 
	`puts
(
out
);

2226 
	`‰ì
(
out
);

2228 
	`¥ötf
("nx_pull_match()ÑeturnedÉrror %s\n",

2229 
	`oÂîr_gë_«me
(
îr‹
));

2232 
	`oÂbuf_unöô
(&
nx_m©ch
);

2234 
	`ds_de°roy
(&
ö
);

2235 
	}
}

2241 
	$of˘l_∑r£_nxm
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

2243  
	`of˘l_∑r£_nxm__
(
Ál£
);

2244 
	}
}

2250 
	$of˘l_∑r£_oxm
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

2252  
	`of˘l_∑r£_nxm__
(
åue
);

2253 
	}
}

2256 
	$¥öt_dif„ªn˚s
(c⁄° *
¥efix
,

2257 c⁄° *
a_
, 
size_t
 
a_Àn
,

2258 c⁄° *
b_
, 
size_t
 
b_Àn
)

2260 c⁄° 
uöt8_t
 *
a
 = 
a_
;

2261 c⁄° 
uöt8_t
 *
b
 = 
b_
;

2262 
size_t
 
i
;

2264 
i
 = 0; i < 
	`MIN
(
a_Àn
, 
b_Àn
); i++) {

2265 i‡(
a
[
i
] !
b
[i]) {

2266 
	`¥ötf
("%s%2zu: %02"
PRIx8
" -> %02"PRIx8"\n",

2267 
¥efix
, 
i
, 
a
[i], 
b
[i]);

2270 
i
 = 
a_Àn
; i < 
b_Àn
; i++) {

2271 
	`¥ötf
("%s%2zu: (n⁄eË-> %02"
PRIx8
"\n", 
¥efix
, 
i
, 
b
[i]);

2273 
i
 = 
b_Àn
; i < 
a_Àn
; i++) {

2274 
	`¥ötf
("%s%2zu: %02"
PRIx8
" -> (n⁄e)\n", 
¥efix
, 
i
, 
a
[i]);

2276 
	}
}

2283 
	$of˘l_∑r£_oÂ10_a˘i⁄s
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

2285 
ds
 
ö
;

2287 
	`ds_öô
(&
ö
);

2288 !
	`ds_gë_¥ïro˚s£d_löe
(&
ö
, 
°dö
)) {

2289 
oÂbuf
 
of10_out
;

2290 
oÂbuf
 
of10_ö
;

2291 
oÂbuf
 
oÂa˘s
;

2292 
oÂîr
 
îr‹
;

2293 
size_t
 
size
;

2294 
ds
 
s
;

2297 
	`oÂbuf_öô
(&
of10_ö
, 0);

2298 i‡(
	`oÂbuf_put_hex
(&
of10_ö
, 
	`ds_c°r
(&
ö
), 
NULL
)[0] != '\0') {

2299 
	`ovs_Áèl
(0, "Trailing garbage in hex data");

2303 
	`oÂbuf_öô
(&
oÂa˘s
, 0);

2304 
size
 = 
of10_ö
.size;

2305 
îr‹
 = 
	`oÂa˘s_puŒ_›íÊow10
(&
of10_ö
, of10_ö.
size
, &
oÂa˘s
);

2306 i‡(
îr‹
) {

2307 
	`¥ötf
("bad OF1.1á˘i⁄s: %s\n\n", 
	`oÂîr_gë_«me
(
îr‹
));

2308 
	`oÂbuf_unöô
(&
oÂa˘s
);

2309 
	`oÂbuf_unöô
(&
of10_ö
);

2312 
	`oÂbuf_push_unöô
(&
of10_ö
, 
size
);

2315 
	`ds_öô
(&
s
);

2316 
	`oÂa˘s_f‹m©
(
oÂa˘s
.
d©a
, oÂa˘s.
size
, &
s
);

2317 
	`puts
(
	`ds_c°r
(&
s
));

2318 
	`ds_de°roy
(&
s
);

2321 
	`oÂbuf_öô
(&
of10_out
, 0);

2322 
	`oÂa˘s_put_›íÊow10
(
oÂa˘s
.
d©a
, oÂa˘s.
size
, &
of10_out
);

2324 
	`¥öt_dif„ªn˚s
("", 
of10_ö
.
d©a
, of10_ö.
size
,

2325 
of10_out
.
d©a
, of10_out.
size
);

2326 
	`putch¨
('\n');

2328 
	`oÂbuf_unöô
(&
oÂa˘s
);

2329 
	`oÂbuf_unöô
(&
of10_ö
);

2330 
	`oÂbuf_unöô
(&
of10_out
);

2332 
	`ds_de°roy
(&
ö
);

2333 
	}
}

2345 
	$of˘l_∑r£_oÂ10_m©ch
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

2347 
ds
 
expout
;

2348 
ds
 
ö
;

2350 
	`ds_öô
(&
ö
);

2351 
	`ds_öô
(&
expout
);

2352 !
	`ds_gë_¥ïro˚s£d_löe
(&
ö
, 
°dö
)) {

2353 
oÂbuf
 
m©ch_ö
, 
m©ch_expout
;

2354 
oÂ10_m©ch
 
m©ch_out
;

2355 
oÂ10_m©ch
 
m©ch_n‹mÆ
;

2356 
m©ch
 match;

2357 *
p
;

2360 
	`ds_˛ór
(&
expout
);

2361 
	`ds_put_c°r
(&
expout
, 
	`ds_c°r
(&
ö
));

2362 
p
 = 
	`ds_c°r
(&
expout
); *p;Ö++) {

2363 i‡(*
p
 == 'x') {

2364 *
p
 = '0';

2367 
	`oÂbuf_öô
(&
m©ch_expout
, 0);

2368 i‡(
	`oÂbuf_put_hex
(&
m©ch_expout
, 
	`ds_c°r
(&
expout
), 
NULL
)[0] != '\0') {

2369 
	`ovs_Áèl
(0, "Trailing garbage in hex data");

2371 i‡(
m©ch_expout
.
size
 !(
oÂ10_m©ch
)) {

2372 
	`ovs_Áèl
(0, "Input is %zu bytes,Éxpected %zu",

2373 
m©ch_expout
.
size
, (
oÂ10_m©ch
));

2377 
p
 = 
	`ds_c°r
(&
ö
); *p;Ö++) {

2378 i‡(*
p
 == 'x') {

2379 *
p
 = "0123456789abcdef"[
	`øndom_uöt32
() & 0xf];

2382 
	`oÂbuf_öô
(&
m©ch_ö
, 0);

2383 i‡(
	`oÂbuf_put_hex
(&
m©ch_ö
, 
	`ds_c°r
(&
ö
), 
NULL
)[0] != '\0') {

2384 
	`ovs_Áèl
(0, "Trailing garbage in hex data");

2386 i‡(
m©ch_ö
.
size
 !(
oÂ10_m©ch
)) {

2387 
	`ovs_Áèl
(0, "Input is %zu bytes,Éxpected %zu",

2388 
m©ch_ö
.
size
, (
oÂ10_m©ch
));

2392 
	`oÂutû_m©ch_‰om_oÂ10_m©ch
(
m©ch_ö
.
d©a
, &
m©ch
);

2393 
	`m©ch_¥öt
(&
m©ch
);

2396 
	`oÂutû_m©ch_to_oÂ10_m©ch
(&
m©ch
, &
m©ch_out
);

2397 
	`¥öt_dif„ªn˚s
("", 
m©ch_expout
.
d©a
, m©ch_expout.
size
,

2398 &
m©ch_out
,  match_out);

2401 
	`oÂutû_n‹mÆize_m©ch
(&
m©ch
);

2402 
	`oÂutû_m©ch_to_oÂ10_m©ch
(&
m©ch
, &
m©ch_n‹mÆ
);

2403 
	`¥öt_dif„ªn˚s
("n‹mÆ: ", &
m©ch_out
,  match_out,

2404 &
m©ch_n‹mÆ
,  match_normal);

2405 
	`putch¨
('\n');

2407 
	`oÂbuf_unöô
(&
m©ch_ö
);

2408 
	`oÂbuf_unöô
(&
m©ch_expout
);

2410 
	`ds_de°roy
(&
ö
);

2411 
	`ds_de°roy
(&
expout
);

2412 
	}
}

2419 
	$of˘l_∑r£_oÂ11_m©ch
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

2421 
ds
 
ö
;

2423 
	`ds_öô
(&
ö
);

2424 !
	`ds_gë_¥ïro˚s£d_löe
(&
ö
, 
°dö
)) {

2425 
oÂbuf
 
m©ch_ö
;

2426 
oÂ11_m©ch
 
m©ch_out
;

2427 
m©ch
 match;

2428 
oÂîr
 
îr‹
;

2431 
	`oÂbuf_öô
(&
m©ch_ö
, 0);

2432 i‡(
	`oÂbuf_put_hex
(&
m©ch_ö
, 
	`ds_c°r
(&
ö
), 
NULL
)[0] != '\0') {

2433 
	`ovs_Áèl
(0, "Trailing garbage in hex data");

2435 i‡(
m©ch_ö
.
size
 !(
oÂ11_m©ch
)) {

2436 
	`ovs_Áèl
(0, "Input is %zu bytes,Éxpected %zu",

2437 
m©ch_ö
.
size
, (
oÂ11_m©ch
));

2441 
îr‹
 = 
	`oÂutû_m©ch_‰om_oÂ11_m©ch
(
m©ch_ö
.
d©a
, &
m©ch
);

2442 i‡(
îr‹
) {

2443 
	`¥ötf
("bad oÂ11_m©ch: %s\n\n", 
	`oÂîr_gë_«me
(
îr‹
));

2444 
	`oÂbuf_unöô
(&
m©ch_ö
);

2449 
	`m©ch_¥öt
(&
m©ch
);

2452 
	`oÂutû_m©ch_to_oÂ11_m©ch
(&
m©ch
, &
m©ch_out
);

2454 
	`¥öt_dif„ªn˚s
("", 
m©ch_ö
.
d©a
, m©ch_ö.
size
,

2455 &
m©ch_out
,  match_out);

2456 
	`putch¨
('\n');

2458 
	`oÂbuf_unöô
(&
m©ch_ö
);

2460 
	`ds_de°roy
(&
ö
);

2461 
	}
}

2468 
	$of˘l_∑r£_oÂ11_a˘i⁄s
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

2470 
ds
 
ö
;

2472 
	`ds_öô
(&
ö
);

2473 !
	`ds_gë_¥ïro˚s£d_löe
(&
ö
, 
°dö
)) {

2474 
oÂbuf
 
of11_out
;

2475 
oÂbuf
 
of11_ö
;

2476 
oÂbuf
 
oÂa˘s
;

2477 
oÂîr
 
îr‹
;

2478 
size_t
 
size
;

2479 
ds
 
s
;

2482 
	`oÂbuf_öô
(&
of11_ö
, 0);

2483 i‡(
	`oÂbuf_put_hex
(&
of11_ö
, 
	`ds_c°r
(&
ö
), 
NULL
)[0] != '\0') {

2484 
	`ovs_Áèl
(0, "Trailing garbage in hex data");

2488 
	`oÂbuf_öô
(&
oÂa˘s
, 0);

2489 
size
 = 
of11_ö
.size;

2490 
îr‹
 = 
	`oÂa˘s_puŒ_›íÊow11_a˘i⁄s
(&
of11_ö
, of11_ö.
size
,

2491 &
oÂa˘s
);

2492 i‡(
îr‹
) {

2493 
	`¥ötf
("bad OF1.1á˘i⁄s: %s\n\n", 
	`oÂîr_gë_«me
(
îr‹
));

2494 
	`oÂbuf_unöô
(&
oÂa˘s
);

2495 
	`oÂbuf_unöô
(&
of11_ö
);

2498 
	`oÂbuf_push_unöô
(&
of11_ö
, 
size
);

2501 
	`ds_öô
(&
s
);

2502 
	`oÂa˘s_f‹m©
(
oÂa˘s
.
d©a
, oÂa˘s.
size
, &
s
);

2503 
	`puts
(
	`ds_c°r
(&
s
));

2504 
	`ds_de°roy
(&
s
);

2507 
	`oÂbuf_öô
(&
of11_out
, 0);

2508 
	`oÂa˘s_put_›íÊow11_a˘i⁄s
(
oÂa˘s
.
d©a
, oÂa˘s.
size
, &
of11_out
);

2510 
	`¥öt_dif„ªn˚s
("", 
of11_ö
.
d©a
, of11_ö.
size
,

2511 
of11_out
.
d©a
, of11_out.
size
);

2512 
	`putch¨
('\n');

2514 
	`oÂbuf_unöô
(&
oÂa˘s
);

2515 
	`oÂbuf_unöô
(&
of11_ö
);

2516 
	`oÂbuf_unöô
(&
of11_out
);

2518 
	`ds_de°roy
(&
ö
);

2519 
	}
}

2526 
	$of˘l_∑r£_oÂ11_ö°ru˘i⁄s
(
¨gc
 
OVS_UNUSED
, *
¨gv
[] OVS_UNUSED)

2528 
ds
 
ö
;

2530 
	`ds_öô
(&
ö
);

2531 !
	`ds_gë_¥ïro˚s£d_löe
(&
ö
, 
°dö
)) {

2532 
oÂbuf
 
of11_out
;

2533 
oÂbuf
 
of11_ö
;

2534 
oÂbuf
 
oÂa˘s
;

2535 
oÂîr
 
îr‹
;

2536 
size_t
 
size
;

2537 
ds
 
s
;

2540 
	`oÂbuf_öô
(&
of11_ö
, 0);

2541 i‡(
	`oÂbuf_put_hex
(&
of11_ö
, 
	`ds_c°r
(&
ö
), 
NULL
)[0] != '\0') {

2542 
	`ovs_Áèl
(0, "Trailing garbage in hex data");

2546 
	`oÂbuf_öô
(&
oÂa˘s
, 0);

2547 
size
 = 
of11_ö
.size;

2548 
îr‹
 = 
	`oÂa˘s_puŒ_›íÊow11_ö°ru˘i⁄s
(&
of11_ö
, of11_ö.
size
,

2549 &
oÂa˘s
);

2550 i‡(
îr‹
) {

2551 
	`¥ötf
("bad OF1.1 in°ru˘i⁄s: %s\n\n", 
	`oÂîr_gë_«me
(
îr‹
));

2552 
	`oÂbuf_unöô
(&
oÂa˘s
);

2553 
	`oÂbuf_unöô
(&
of11_ö
);

2556 
	`oÂbuf_push_unöô
(&
of11_ö
, 
size
);

2559 
	`ds_öô
(&
s
);

2560 
	`oÂa˘s_f‹m©
(
oÂa˘s
.
d©a
, oÂa˘s.
size
, &
s
);

2561 
	`puts
(
	`ds_c°r
(&
s
));

2562 
	`ds_de°roy
(&
s
);

2566 
	`oÂbuf_öô
(&
of11_out
, 0);

2567 
	`oÂa˘s_put_›íÊow11_ö°ru˘i⁄s
(
oÂa˘s
.
d©a
, oÂa˘s.
size
,

2568 &
of11_out
);

2570 
	`¥öt_dif„ªn˚s
("", 
of11_ö
.
d©a
, of11_ö.
size
,

2571 
of11_out
.
d©a
, of11_out.
size
);

2572 
	`putch¨
('\n');

2574 
	`oÂbuf_unöô
(&
oÂa˘s
);

2575 
	`oÂbuf_unöô
(&
of11_ö
);

2576 
	`oÂbuf_unöô
(&
of11_out
);

2578 
	`ds_de°roy
(&
ö
);

2579 
	}
}

2584 
	$of˘l_check_vœn
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

2586 
m©ch
 match;

2588 *
°rög_s
;

2589 
oÂutû_Êow_mod
 
fm
;

2591 
oÂbuf
 
nxm
;

2592 
m©ch
 
nxm_m©ch
;

2593 
nxm_m©ch_Àn
;

2594 *
nxm_s
;

2596 
oÂ10_m©ch
 
of10_øw
;

2597 
m©ch
 
of10_m©ch
;

2599 
oÂ11_m©ch
 
of11_øw
;

2600 
m©ch
 
of11_m©ch
;

2602 
oÂîr
 
îr‹
;

2604 
	`m©ch_öô_ˇtchÆl
(&
m©ch
);

2605 
m©ch
.
Êow
.
vœn_tci
 = 
	`ht⁄s
(
	`°πoul
(
¨gv
[1], 
NULL
, 16));

2606 
m©ch
.
wc
.
masks
.
vœn_tci
 = 
	`ht⁄s
(
	`°πoul
(
¨gv
[2], 
NULL
, 16));

2609 
°rög_s
 = 
	`m©ch_to_°rög
(&
m©ch
, 
OFP_DEFAULT_PRIORITY
);

2610 
	`¥ötf
("%†-> ", 
°rög_s
);

2611 
	`fÊush
(
°dout
);

2612 
	`∑r£_oÂ_°r
(&
fm
, -1, 
°rög_s
, 
Ál£
);

2613 
	`¥ötf
("%04"
PRIx16
"/%04"PRIx16"\n",

2614 
	`¡ohs
(
fm
.
m©ch
.
Êow
.
vœn_tci
),

2615 
	`¡ohs
(
fm
.
m©ch
.
wc
.
masks
.
vœn_tci
));

2616 
	`‰ì
(
°rög_s
);

2619 
	`oÂbuf_öô
(&
nxm
, 0);

2620 
nxm_m©ch_Àn
 = 
	`nx_put_m©ch
(&
nxm
, &
m©ch
, 
	`ht⁄Œ
(0), htonll(0));

2621 
nxm_s
 = 
	`nx_m©ch_to_°rög
(
nxm
.
d©a
, 
nxm_m©ch_Àn
);

2622 
îr‹
 = 
	`nx_puŒ_m©ch
(&
nxm
, 
nxm_m©ch_Àn
, &
nxm_m©ch
, 
NULL
, NULL);

2623 
	`¥ötf
("NXM: %†-> ", 
nxm_s
);

2624 i‡(
îr‹
) {

2625 
	`¥ötf
("%s\n", 
	`oÂîr_to_°rög
(
îr‹
));

2627 
	`¥ötf
("%04"
PRIx16
"/%04"PRIx16"\n",

2628 
	`¡ohs
(
nxm_m©ch
.
Êow
.
vœn_tci
),

2629 
	`¡ohs
(
nxm_m©ch
.
wc
.
masks
.
vœn_tci
));

2631 
	`‰ì
(
nxm_s
);

2632 
	`oÂbuf_unöô
(&
nxm
);

2635 
	`oÂbuf_öô
(&
nxm
, 0);

2636 
nxm_m©ch_Àn
 = 
	`oxm_put_m©ch
(&
nxm
, &
m©ch
);

2637 
nxm_s
 = 
	`oxm_m©ch_to_°rög
(
nxm
.
d©a
, 
nxm_m©ch_Àn
);

2638 
îr‹
 = 
	`oxm_puŒ_m©ch
(&
nxm
, &
nxm_m©ch
);

2639 
	`¥ötf
("OXM: %†-> ", 
nxm_s
);

2640 i‡(
îr‹
) {

2641 
	`¥ötf
("%s\n", 
	`oÂîr_to_°rög
(
îr‹
));

2643 
uöt16_t
 
vid
 = 
	`¡ohs
(
nxm_m©ch
.
Êow
.
vœn_tci
) &

2644 (
VLAN_VID_MASK
 | 
VLAN_CFI
);

2645 
uöt16_t
 
mask
 = 
	`¡ohs
(
nxm_m©ch
.
wc
.
masks
.
vœn_tci
) &

2646 (
VLAN_VID_MASK
 | 
VLAN_CFI
);

2648 
	`¥ötf
("%04"
PRIx16
"/%04"PRIx16",", 
vid
, 
mask
);

2649 i‡(
vid
 && 
	`vœn_tci_to_p˝
(
nxm_m©ch
.
wc
.
masks
.
vœn_tci
)) {

2650 
	`¥ötf
("%02"
PRIx8
"\n", 
	`vœn_tci_to_p˝
(
nxm_m©ch
.
Êow
.
vœn_tci
));

2652 
	`¥ötf
("--\n");

2655 
	`‰ì
(
nxm_s
);

2656 
	`oÂbuf_unöô
(&
nxm
);

2659 
	`oÂutû_m©ch_to_oÂ10_m©ch
(&
m©ch
, &
of10_øw
);

2660 
	`oÂutû_m©ch_‰om_oÂ10_m©ch
(&
of10_øw
, &
of10_m©ch
);

2661 
	`¥ötf
("OF1.0: %04"
PRIx16
"/%d,%02"
PRIx8
"/%d -> %04"PRIx16"/%04"PRIx16"\n",

2662 
	`¡ohs
(
of10_øw
.
dl_vœn
),

2663 (
of10_øw
.
wûdˇrds
 & 
	`ht⁄l
(
OFPFW10_DL_VLAN
)) != 0,

2664 
of10_øw
.
dl_vœn_p˝
,

2665 (
of10_øw
.
wûdˇrds
 & 
	`ht⁄l
(
OFPFW10_DL_VLAN_PCP
)) != 0,

2666 
	`¡ohs
(
of10_m©ch
.
Êow
.
vœn_tci
),

2667 
	`¡ohs
(
of10_m©ch
.
wc
.
masks
.
vœn_tci
));

2670 
	`oÂutû_m©ch_to_oÂ11_m©ch
(&
m©ch
, &
of11_øw
);

2671 
	`oÂutû_m©ch_‰om_oÂ11_m©ch
(&
of11_øw
, &
of11_m©ch
);

2672 
	`¥ötf
("OF1.1: %04"
PRIx16
"/%d,%02"
PRIx8
"/%d -> %04"PRIx16"/%04"PRIx16"\n",

2673 
	`¡ohs
(
of11_øw
.
dl_vœn
),

2674 (
of11_øw
.
wûdˇrds
 & 
	`ht⁄l
(
OFPFW11_DL_VLAN
)) != 0,

2675 
of11_øw
.
dl_vœn_p˝
,

2676 (
of11_øw
.
wûdˇrds
 & 
	`ht⁄l
(
OFPFW11_DL_VLAN_PCP
)) != 0,

2677 
	`¡ohs
(
of11_m©ch
.
Êow
.
vœn_tci
),

2678 
	`¡ohs
(
of11_m©ch
.
wc
.
masks
.
vœn_tci
));

2679 
	}
}

2684 
	$of˘l_¥öt_îr‹
(
¨gc
 
OVS_UNUSED
, *
¨gv
[])

2686 
oÂîr
 
îr‹
;

2687 
vîsi⁄
;

2689 
îr‹
 = 
	`oÂîr_‰om_«me
(
¨gv
[1]);

2690 i‡(!
îr‹
) {

2691 
	`ovs_Áèl
(0, "unknow¿îr‹ \"%s\"", 
¨gv
[1]);

2694 
vîsi⁄
 = 0; vîsi⁄ <
UINT8_MAX
; version++) {

2695 c⁄° *
«me
 = 
	`oÂîr_domaö_gë_«me
(
vîsi⁄
);

2696 i‡(!
«me
) {

2699 
	`¥ötf
("%s: %d,%d\n",

2700 
	`oÂîr_domaö_gë_«me
(
vîsi⁄
),

2701 
	`oÂîr_gë_ty≥
(
îr‹
, 
vîsi⁄
),

2702 
	`oÂîr_gë_code
(
îr‹
, 
vîsi⁄
));

2704 
	}
}

2710 
	$of˘l_oÂ_¥öt
(
¨gc
, *
¨gv
[])

2712 
oÂbuf
 
∑ckë
;

2714 
	`oÂbuf_öô
(&
∑ckë
, 
	`°æí
(
¨gv
[1]) / 2);

2715 i‡(
	`oÂbuf_put_hex
(&
∑ckë
, 
¨gv
[1], 
NULL
)[0] != '\0') {

2716 
	`ovs_Áèl
(0, "trailing garbage following hex bytes");

2718 
	`oÂ_¥öt
(
°dout
, 
∑ckë
.
d©a
,Öackë.
size
, 
¨gc
 > 2 ? 
	`©oi
(
¨gv
[2]) : 2);

2719 
	`oÂbuf_unöô
(&
∑ckë
);

2720 
	}
}

2722 c⁄° 
comm™d
 
	gÆl_comm™ds
[] = {

2723 { "show", 1, 1, 
of˘l_show
 },

2724 { "m⁄ô‹", 1, 3, 
of˘l_m⁄ô‹
 },

2725 { "¢o›", 1, 1, 
of˘l_¢o›
 },

2726 { "dump-desc", 1, 1, 
of˘l_dump_desc
 },

2727 { "dump-èbÀs", 1, 1, 
of˘l_dump_èbÀs
 },

2728 { "dump-Êows", 1, 2, 
of˘l_dump_Êows
 },

2729 { "dump-aggªg©e", 1, 2, 
of˘l_dump_aggªg©e
 },

2730 { "queue-°©s", 1, 3, 
of˘l_queue_°©s
 },

2731 { "add-Êow", 2, 2, 
of˘l_add_Êow
 },

2732 { "add-Êows", 2, 2, 
of˘l_add_Êows
 },

2733 { "mod-Êows", 2, 2, 
of˘l_mod_Êows
 },

2734 { "dñ-Êows", 1, 2, 
of˘l_dñ_Êows
 },

2735 { "ª∂a˚-Êows", 2, 2, 
of˘l_ª∂a˚_Êows
 },

2736 { "diff-Êows", 2, 2, 
of˘l_diff_Êows
 },

2737 { "∑ckë-out", 4, 
INT_MAX
, 
of˘l_∑ckë_out
 },

2738 { "dump-p‹ts", 1, 2, 
of˘l_dump_p‹ts
 },

2739 { "dump-p‹ts-desc", 1, 1, 
of˘l_dump_p‹ts_desc
 },

2740 { "mod-p‹t", 3, 3, 
of˘l_mod_p‹t
 },

2741 { "gë-‰ags", 1, 1, 
of˘l_gë_‰ags
 },

2742 { "£t-‰ags", 2, 2, 
of˘l_£t_‰ags
 },

2743 { "¥obe", 1, 1, 
of˘l_¥obe
 },

2744 { "pög", 1, 2, 
of˘l_pög
 },

2745 { "bíchm¨k", 3, 3, 
of˘l_bíchm¨k
 },

2746 { "hñp", 0, 
INT_MAX
, 
of˘l_hñp
 },

2749 { "∑r£-Êow", 1, 1, 
of˘l_∑r£_Êow
 },

2750 { "∑r£-Êows", 1, 1, 
of˘l_∑r£_Êows
 },

2751 { "∑r£-nx-m©ch", 0, 0, 
of˘l_∑r£_nxm
 },

2752 { "∑r£-nxm", 0, 0, 
of˘l_∑r£_nxm
 },

2753 { "∑r£-oxm", 0, 0, 
of˘l_∑r£_oxm
 },

2754 { "∑r£-oÂ10-a˘i⁄s", 0, 0, 
of˘l_∑r£_oÂ10_a˘i⁄s
 },

2755 { "∑r£-oÂ10-m©ch", 0, 0, 
of˘l_∑r£_oÂ10_m©ch
 },

2756 { "∑r£-oÂ11-m©ch", 0, 0, 
of˘l_∑r£_oÂ11_m©ch
 },

2757 { "∑r£-oÂ11-a˘i⁄s", 0, 0, 
of˘l_∑r£_oÂ11_a˘i⁄s
 },

2758 { "∑r£-oÂ11-ö°ru˘i⁄s", 0, 0, 
of˘l_∑r£_oÂ11_ö°ru˘i⁄s
 },

2759 { "check-vœn", 2, 2, 
of˘l_check_vœn
 },

2760 { "¥öt-îr‹", 1, 1, 
of˘l_¥öt_îr‹
 },

2761 { "oÂ-¥öt", 1, 2, 
of˘l_oÂ_¥öt
 },

2763 { 
NULL
, 0, 0, NULL },

	@/home/lsch/mytest/openvswitch-1.9.0/utilities/ovs-vlan-bug-workaround.c

17 
	~<c⁄fig.h
>

19 
	~<î∫o.h
>

20 
	~<gë›t.h
>

21 
	~<löux/if_vœn.h
>

22 
	~<löux/sockios.h
>

23 
	~<√t/if.h
>

24 
	~<°dlib.h
>

25 
	~<sys/io˘l.h
>

26 
	~<sys/sockë.h
>

27 
	~<°dio.h
>

28 
	~<°rög.h
>

29 
	~<uni°d.h
>

31 
	~"comm™d-löe.h
"

32 
	~"utû.h
"

34 
	#ADD_ALL_VLANS_CMD
 10

	)

35 
	#DEL_ALL_VLANS_CMD
 11

	)

37 
ußge
();

38 
∑r£_›ti⁄s
(
¨gc
, *
¨gv
[]);

41 
	$maö
(
¨gc
, *
¨gv
[])

43 
vœn_io˘l_¨gs
 
vœn_¨gs
;

44 c⁄° *
√tdev
, *
£âög
;

45 
fd
;

47 
	`£t_¥ogøm_«me
(
¨gv
[0]);

49 
	`∑r£_›ti⁄s
(
¨gc
, 
¨gv
);

50 i‡(
¨gc
 - 
›töd
 != 2) {

51 
	`ovs_Áèl
(0, "exactlyÅwoÇon-optionárgumentsáreÑequired "

55 
	`mem£t
(&
vœn_¨gs
, 0,  vlan_args);

58 
£âög
 = 
¨gv
[
›töd
 + 1];

59 i‡(!
	`°rcmp
(
£âög
, "on")) {

60 
vœn_¨gs
.
cmd
 = 
ADD_ALL_VLANS_CMD
;

61 } i‡(!
	`°rcmp
(
£âög
, "off")) {

62 
vœn_¨gs
.
cmd
 = 
DEL_ALL_VLANS_CMD
;

64 
	`ovs_Áèl
(0, "second commandÜineárgument must be \"on\" or \"off\" "

65 "“Ÿ \"%s\")", 
£âög
);

69 
√tdev
 = 
¨gv
[
›töd
];

70 i‡(
	`°æí
(
√tdev
Ë>
IFNAMSIZ
) {

71 
	`ovs_Áèl
(0, "%s:Çëw‹k devi˚Çamêtoÿl⁄g", 
√tdev
);

73 
	`°r˝y
(
vœn_¨gs
.
devi˚1
, 
√tdev
);

76 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

77 i‡(
fd
 < 0) {

78 
	`ovs_Áèl
(
î∫o
, "socket creation failed");

80 i‡(
	`io˘l
(
fd
, 
SIOCSIFVLAN
, &
vœn_¨gs
) < 0) {

81 i‡(
î∫o
 =
ENOPKG
) {

82 
	`ovs_Áèl
(0, "operation failed (8021q moduleÇotÜoaded)");

83 } i‡(
î∫o
 =
EOPNOTSUPP
) {

84 
	`ovs_Áèl
(0, "operation failed (kernel doesÇot supportÅhe "

87 
	`ovs_Áèl
(
î∫o
, "operation failed");

90 
	`˛o£
(
fd
);

93 
	}
}

96 
	$ußge
()

98 
	`¥ötf
("\
%s, forÉnabling or disablingÅhe kernel VLAN bug workaround\n\
: %s NETDEV SETTING\n\
 NETDEV isáÇetwork device (e.g. \"eth0\")\n\
 SETTING is \"on\"ÅoÉnableÅhe workaround or \"off\"Åo disable it.\n\
\n\
:\n\
-h, --help PrintÅhis helpful information\n\
-V, --version Display version information\n",

107 
¥ogøm_«me
,Örogram_name);

108 
	`exô
(
EXIT_SUCCESS
);

109 
	}
}

112 
	$∑r£_›ti⁄s
(
¨gc
, *
¨gv
[])

114 c⁄° 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

115 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

116 {"vîsi⁄", 
no_¨gumít
, 
NULL
, 'V'},

117 {
NULL
, 0, NULL, 0},

119 *
sh‹t_›ti⁄s
 = 
	`l⁄g_›ti⁄s_to_sh‹t_›ti⁄s
(
l⁄g_›ti⁄s
);

122 
›ti⁄
;

124 
›ti⁄
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "+t:hVe", 
l⁄g_›ti⁄s
, 
NULL
);

125 i‡(
›ti⁄
 == -1) {

128 
›ti⁄
) {

130 
	`ußge
();

134 
	`ovs_¥öt_vîsi⁄
(0, 0);

135 
	`exô
(
EXIT_SUCCESS
);

138 
	`exô
(
EXIT_FAILURE
);

141 
	`NOT_REACHED
();

144 
	`‰ì
(
sh‹t_›ti⁄s
);

145 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/utilities/ovs-vsctl.c

17 
	~<c⁄fig.h
>

19 
	~<as£π.h
>

20 
	~<˘y≥.h
>

21 
	~<î∫o.h
>

22 
	~<Êﬂt.h
>

23 
	~<gë›t.h
>

24 
	~<öây≥s.h
>

25 
	~<sig«l.h
>

26 
	~<°d¨g.h
>

27 
	~<°dlib.h
>

28 
	~<°rög.h
>

29 
	~<uni°d.h
>

31 
	~"comm™d-löe.h
"

32 
	~"compûî.h
"

33 
	~"dús.h
"

34 
	~"dy«mic-°rög.h
"

35 
	~"hash.h
"

36 
	~"js⁄.h
"

37 
	~"ovsdb-d©a.h
"

38 
	~"ovsdb-idl.h
"

39 
	~"pﬁl-lo›.h
"

40 
	~"¥o˚ss.h
"

41 
	~"°ªam.h
"

42 
	~"°ªam-s¶.h
"

43 
	~"sm≠.h
"

44 
	~"s£t.h
"

45 
	~"svec.h
"

46 
	~"lib/vswôch-idl.h
"

47 
	~"èbÀ.h
"

48 
	~"timevÆ.h
"

49 
	~"utû.h
"

50 
	~"vc⁄n.h
"

51 
	~"vlog.h
"

53 
VLOG_DEFINE_THIS_MODULE
(
vs˘l
);

56 
	#ovs_Áèl
 
∂ó£_u£_vs˘l_Áèl_ö°ód_of_ovs_Áèl


	)

58 
	gvs˘l_c⁄ãxt
;

61 
	svs˘l_comm™d_sy¡ax
 {

62 c⁄° *
	m«me
;

63 
	mmö_¨gs
;

64 
	mmax_¨gs
;

68 (*
	m¥îequisôes
)(
vs˘l_c⁄ãxt
 *
	m˘x
);

77 (*
	mrun
)(
vs˘l_c⁄ãxt
 *
	m˘x
);

83 (*
	mpo°¥o˚ss
)(
vs˘l_c⁄ãxt
 *
	m˘x
);

87 c⁄° *
	m›ti⁄s
;

88 íum { 
	mRO
, 
	mRW
 } 
	mmode
;

91 
	svs˘l_comm™d
 {

93 c⁄° 
vs˘l_comm™d_sy¡ax
 *
	msy¡ax
;

94 
	m¨gc
;

95 **
	m¨gv
;

96 
shash
 
	m›ti⁄s
;

99 
ds
 
	mouçut
;

100 
èbÀ
 *
	mèbÀ
;

104 c⁄° *
	gdb
;

107 
boﬁ
 
	g⁄ñöe
;

110 
boﬁ
 
	gdry_run
;

113 
boﬁ
 
	gwaô_f‹_ªlﬂd
 = 
åue
;

116 
	gtimeout
;

119 
èbÀ_°yÀ
 
	gèbÀ_°yÀ
 = 
TABLE_STYLE_DEFAULT
;

122 c⁄° 
vs˘l_comm™d_sy¡ax
 
	gÆl_comm™ds
[];

127 
ovsdb_idl
 *
	gthe_idl
;

128 
ovsdb_idl_txn
 *
	gthe_idl_txn
;

130 
	$vs˘l_exô
(
°©us
Ë
NO_RETURN
;

131 
	$vs˘l_Áèl
(c⁄° *, ...Ë
	$PRINTF_FORMAT
(1, 2Ë
NO_RETURN
;

132 *
	`deÁu…_db
();

133 
	$ußge
(Ë
NO_RETURN
;

134 
	`∑r£_›ti⁄s
(
¨gc
, *
¨gv
[]);

135 
boﬁ
 
	`might_wrôe_to_db
(**
¨gv
);

137 
vs˘l_comm™d
 *
	`∑r£_comm™ds
(
¨gc
, *
¨gv
[],

138 
size_t
 *
n_comm™d•
);

139 
	`∑r£_comm™d
(
¨gc
, *
¨gv
[], 
vs˘l_comm™d
 *);

140 c⁄° 
vs˘l_comm™d_sy¡ax
 *
	`föd_comm™d
(c⁄° *
«me
);

141 
	`run_¥îequisôes
(
vs˘l_comm™d
[], 
size_t
 
n_comm™ds
,

142 
ovsdb_idl
 *);

143 
	`do_vs˘l
(c⁄° *
¨gs
, 
vs˘l_comm™d
 *, 
size_t
 
n
,

144 
ovsdb_idl
 *);

146 c⁄° 
vs˘l_èbÀ_˛ass
 *
	`gë_èbÀ
(c⁄° *
èbÀ_«me
);

147 
	`£t_cﬁumn
(c⁄° 
vs˘l_èbÀ_˛ass
 *,

148 c⁄° 
ovsdb_idl_row
 *, c⁄° *
¨g
,

149 
ovsdb_symbﬁ_èbÀ
 *);

151 
boﬁ
 
	`is_c⁄dôi⁄_ßtisfõd
(c⁄° 
vs˘l_èbÀ_˛ass
 *,

152 c⁄° 
ovsdb_idl_row
 *,

153 c⁄° *
¨g
,

154 
ovsdb_symbﬁ_èbÀ
 *);

157 
	$maö
(
¨gc
, *
¨gv
[])

159 
vlog_moduÀ
 
VLM_ªc⁄√˘
;

160 
ovsdb_idl
 *
idl
;

161 
vs˘l_comm™d
 *
comm™ds
;

162 
£qno
;

163 
size_t
 
n_comm™ds
;

164 *
¨gs
;

166 
	`£t_¥ogøm_«me
(
¨gv
[0]);

167 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

168 
	`vlog_£t_Àvñs
(
NULL
, 
VLF_CONSOLE
, 
VLL_WARN
);

169 
	`vlog_£t_Àvñs
(&
VLM_ªc⁄√˘
, 
VLF_ANY_FACILITY
, 
VLL_WARN
);

170 
	`ov§ec_öô
();

173 
¨gs
 = 
	`¥o˚ss_esˇ≥_¨gs
(
¨gv
);

174 
	`VLOG
(
	`might_wrôe_to_db
(
¨gv
Ë? 
VLL_INFO
 : 
VLL_DBG
, "CÆÀdá†%s", 
¨gs
);

177 
	`∑r£_›ti⁄s
(
¨gc
, 
¨gv
);

178 
comm™ds
 = 
	`∑r£_comm™ds
(
¨gc
 - 
›töd
, 
¨gv
 + o±öd, &
n_comm™ds
);

180 i‡(
timeout
) {

181 
	`time_Æ¨m
(
timeout
);

185 
idl
 = 
the_idl
 = 
	`ovsdb_idl_¸óã
(
db
, &
ov§ec_idl_˛ass
, 
Ál£
);

186 
	`run_¥îequisôes
(
comm™ds
, 
n_comm™ds
, 
idl
);

195 
£qno
 = 
	`ovsdb_idl_gë_£qno
(
idl
);

197 
	`ovsdb_idl_run
(
idl
);

199 i‡(
£qno
 !
	`ovsdb_idl_gë_£qno
(
idl
)) {

200 
£qno
 = 
	`ovsdb_idl_gë_£qno
(
idl
);

201 
	`do_vs˘l
(
¨gs
, 
comm™ds
, 
n_comm™ds
, 
idl
);

204 i‡(
£qno
 =
	`ovsdb_idl_gë_£qno
(
idl
)) {

205 
	`ovsdb_idl_waô
(
idl
);

206 
	`pﬁl_block
();

209 
	}
}

212 
	$∑r£_›ti⁄s
(
¨gc
, *
¨gv
[])

215 
OPT_DB
 = 
UCHAR_MAX
 + 1,

216 
OPT_ONELINE
,

217 
OPT_NO_SYSLOG
,

218 
OPT_NO_WAIT
,

219 
OPT_DRY_RUN
,

220 
OPT_PEER_CA_CERT
,

221 
VLOG_OPTION_ENUMS
,

222 
TABLE_OPTION_ENUMS


224 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

225 {"db", 
ªquúed_¨gumít
, 
NULL
, 
OPT_DB
},

226 {"no-sy¶og", 
no_¨gumít
, 
NULL
, 
OPT_NO_SYSLOG
},

227 {"no-waô", 
no_¨gumít
, 
NULL
, 
OPT_NO_WAIT
},

228 {"dry-run", 
no_¨gumít
, 
NULL
, 
OPT_DRY_RUN
},

229 {"⁄ñöe", 
no_¨gumít
, 
NULL
, 
OPT_ONELINE
},

230 {"timeout", 
ªquúed_¨gumít
, 
NULL
, 't'},

231 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

232 {"vîsi⁄", 
no_¨gumít
, 
NULL
, 'V'},

233 
VLOG_LONG_OPTIONS
,

234 
TABLE_LONG_OPTIONS
,

235 
STREAM_SSL_LONG_OPTIONS
,

236 {"≥î-ˇ-˚π", 
ªquúed_¨gumít
, 
NULL
, 
OPT_PEER_CA_CERT
},

237 {
NULL
, 0, NULL, 0},

239 *
tmp
, *
sh‹t_›ti⁄s
;

241 
tmp
 = 
	`l⁄g_›ti⁄s_to_sh‹t_›ti⁄s
(
l⁄g_›ti⁄s
);

242 
sh‹t_›ti⁄s
 = 
	`xa•rötf
("+%s", 
tmp
);

243 
	`‰ì
(
tmp
);

245 
èbÀ_°yÀ
.
f‹m©
 = 
TF_LIST
;

248 
c
;

250 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
l⁄g_›ti⁄s
, 
NULL
);

251 i‡(
c
 == -1) {

255 
c
) {

256 
OPT_DB
:

257 
db
 = 
›èrg
;

260 
OPT_ONELINE
:

261 
⁄ñöe
 = 
åue
;

264 
OPT_NO_SYSLOG
:

265 
	`vlog_£t_Àvñs
(&
VLM_vs˘l
, 
VLF_SYSLOG
, 
VLL_WARN
);

268 
OPT_NO_WAIT
:

269 
waô_f‹_ªlﬂd
 = 
Ál£
;

272 
OPT_DRY_RUN
:

273 
dry_run
 = 
åue
;

277 
	`ußge
();

280 
	`ovs_¥öt_vîsi⁄
(0, 0);

281 
	`exô
(
EXIT_SUCCESS
);

284 
timeout
 = 
	`°πoul
(
›èrg
, 
NULL
, 10);

285 i‡(
timeout
 < 0) {

286 
	`vs˘l_Áèl
("value %s on -t or --timeout is invalid",

287 
›èrg
);

291 
VLOG_OPTION_HANDLERS


292 
	`TABLE_OPTION_HANDLERS
(&
èbÀ_°yÀ
)

294 
STREAM_SSL_OPTION_HANDLERS


296 
OPT_PEER_CA_CERT
:

297 
	`°ªam_s¶_£t_≥î_ˇ_˚π_fûe
(
›èrg
);

301 
	`exô
(
EXIT_FAILURE
);

304 
	`ab‹t
();

307 
	`‰ì
(
sh‹t_›ti⁄s
);

309 i‡(!
db
) {

310 
db
 = 
	`deÁu…_db
();

312 
	}
}

314 
vs˘l_comm™d
 *

315 
	$∑r£_comm™ds
(
¨gc
, *
¨gv
[], 
size_t
 *
n_comm™d•
)

317 
vs˘l_comm™d
 *
comm™ds
;

318 
size_t
 
n_comm™ds
, 
Æloˇãd_comm™ds
;

319 
i
, 
°¨t
;

321 
comm™ds
 = 
NULL
;

322 
n_comm™ds
 = 
Æloˇãd_comm™ds
 = 0;

324 
°¨t
 = 
i
 = 0; i <
¨gc
; i++) {

325 i‡(
i
 =
¨gc
 || !
	`°rcmp
(
¨gv
[i], "--")) {

326 i‡(
i
 > 
°¨t
) {

327 i‡(
n_comm™ds
 >
Æloˇãd_comm™ds
) {

328 
vs˘l_comm™d
 *
c
;

330 
comm™ds
 = 
	`x2ƒóŒoc
(comm™ds, &
Æloˇãd_comm™ds
,

331  *
comm™ds
);

332 
c
 = 
comm™ds
; c < &comm™ds[
n_comm™ds
]; c++) {

333 
	`shash_moved
(&
c
->
›ti⁄s
);

336 
	`∑r£_comm™d
(
i
 - 
°¨t
, &
¨gv
[start],

337 &
comm™ds
[
n_comm™ds
++]);

339 
°¨t
 = 
i
 + 1;

342 i‡(!
n_comm™ds
) {

343 
	`vs˘l_Áèl
("missing commandÇame (use --help for help)");

345 *
n_comm™d•
 = 
n_comm™ds
;

346  
comm™ds
;

347 
	}
}

350 
	$∑r£_comm™d
(
¨gc
, *
¨gv
[], 
vs˘l_comm™d
 *
comm™d
)

352 c⁄° 
vs˘l_comm™d_sy¡ax
 *
p
;

353 
shash_node
 *
node
;

354 
n_¨g
;

355 
i
;

357 
	`shash_öô
(&
comm™d
->
›ti⁄s
);

358 
i
 = 0; i < 
¨gc
; i++) {

359 c⁄° *
›ti⁄
 = 
¨gv
[
i
];

360 c⁄° *
equÆs
;

361 *
key
, *
vÆue
;

363 i‡(
›ti⁄
[0] != '-') {

367 
equÆs
 = 
	`°rchr
(
›ti⁄
, '=');

368 i‡(
equÆs
) {

369 
key
 = 
	`xmemdup0
(
›ti⁄
, 
equÆs
 - option);

370 
vÆue
 = 
	`x°rdup
(
equÆs
 + 1);

372 
key
 = 
	`x°rdup
(
›ti⁄
);

373 
vÆue
 = 
NULL
;

376 i‡(
	`shash_föd
(&
comm™d
->
›ti⁄s
, 
key
)) {

377 
	`vs˘l_Áèl
("'%s' o±i⁄ s≥cifõd mu…ùÀÅimes", 
¨gv
[
i
]);

379 
	`shash_add_noc›y
(&
comm™d
->
›ti⁄s
, 
key
, 
vÆue
);

381 i‡(
i
 =
¨gc
) {

382 
	`vs˘l_Áèl
("missing commandÇame");

385 
p
 = 
	`föd_comm™d
(
¨gv
[
i
]);

386 i‡(!
p
) {

387 
	`vs˘l_Áèl
("unknow¿comm™d '%s'; u£ --hñ∞f‹ hñp", 
¨gv
[
i
]);

390 
	`SHASH_FOR_EACH
 (
node
, &
comm™d
->
›ti⁄s
) {

391 c⁄° *
s
 = 
	`°r°r
(
p
->
›ti⁄s
, 
node
->
«me
);

392 
íd
 = 
s
 ? s[
	`°æí
(
node
->
«me
)] : 
EOF
;

394 i‡(
íd
 != '=' &&Énd != ',' &&Énd != ' ' &&Énd != '\0') {

395 
	`vs˘l_Áèl
("'%s' command hasÇo '%s' option",

396 
¨gv
[
i
], 
node
->
«me
);

398 i‡((
íd
 ='='Ë!(
node
->
d©a
 !
NULL
)) {

399 i‡(
íd
 == '=') {

400 
	`vs˘l_Áèl
("missingárgumentÅo '%s' option on '%s' "

401 "comm™d", 
node
->
«me
, 
¨gv
[
i
]);

403 
	`vs˘l_Áèl
("'%s' option on '%s' doesÇotácceptán "

404 "¨gumít", 
node
->
«me
, 
¨gv
[
i
]);

409 
n_¨g
 = 
¨gc
 - 
i
 - 1;

410 i‡(
n_¨g
 < 
p
->
mö_¨gs
) {

411 
	`vs˘l_Áèl
("'%s' commandÑequiresátÜeast %dárguments",

412 
p
->
«me
,Ö->
mö_¨gs
);

413 } i‡(
n_¨g
 > 
p
->
max_¨gs
) {

414 
j
;

416 
j
 = 
i
 + 1; j < 
¨gc
; j++) {

417 i‡(
¨gv
[
j
][0] == '-') {

418 
	`vs˘l_Áèl
("'%s' commandÅakesát most %dárguments "

421 
p
->
«me
,Ö->
max_¨gs
);

425 
	`vs˘l_Áèl
("'%s' commandÅakesát most %dárguments",

426 
p
->
«me
,Ö->
max_¨gs
);

429 
comm™d
->
sy¡ax
 = 
p
;

430 
comm™d
->
¨gc
 = 
n_¨g
 + 1;

431 
comm™d
->
¨gv
 = &¨gv[
i
];

432 
	}
}

436 c⁄° 
vs˘l_comm™d_sy¡ax
 *

437 
	$föd_comm™d
(c⁄° *
«me
)

439 
shash
 
comm™ds
 = 
	`SHASH_INITIALIZER
(&commands);

441 i‡(
	`shash_is_em±y
(&
comm™ds
)) {

442 c⁄° 
vs˘l_comm™d_sy¡ax
 *
p
;

444 
p
 = 
Æl_comm™ds
;Ö->
«me
;Ö++) {

445 
	`shash_add_as£π
(&
comm™ds
, 
p
->
«me
,Ö);

449  
	`shash_föd_d©a
(&
comm™ds
, 
«me
);

450 
	}
}

453 
	$vs˘l_Áèl
(c⁄° *
f‹m©
, ...)

455 *
mesßge
;

456 
va_li°
 
¨gs
;

458 
	`va_°¨t
(
¨gs
, 
f‹m©
);

459 
mesßge
 = 
	`xva•rötf
(
f‹m©
, 
¨gs
);

460 
	`va_íd
(
¨gs
);

462 
	`vlog_£t_Àvñs
(&
VLM_vs˘l
, 
VLF_CONSOLE
, 
VLL_OFF
);

463 
	`VLOG_ERR
("%s", 
mesßge
);

464 
	`ovs_îr‹
(0, "%s", 
mesßge
);

465 
	`vs˘l_exô
(
EXIT_FAILURE
);

466 
	}
}

475 
	$vs˘l_exô
(
°©us
)

477 i‡(
the_idl_txn
) {

478 
	`ovsdb_idl_txn_ab‹t
(
the_idl_txn
);

479 
	`ovsdb_idl_txn_de°roy
(
the_idl_txn
);

481 
	`ovsdb_idl_de°roy
(
the_idl
);

482 
	`exô
(
°©us
);

483 
	}
}

486 
	$ußge
()

488 
	`¥ötf
("\
%s: ovs-vswitchd management utility\n\
: %s [OPTIONS] COMMAND [ARG...]\n\
\n\
 vSwitch commands:\n\
 initialize database, ifÇot yet initialized\n\
Örint overview of database contents\n\
-resetÑeset configurationÅo clean state\n\
\n\
 commands:\n\
-br BRIDGE createáÇew bridgeÇamed BRIDGE\n\
-br BRIDGE PARENT VLAN createÇew fake BRIDGE in PARENT on VLAN\n\
-br BRIDGE delete BRIDGEándáll of itsÖorts\n\
-brÖrintÅheÇames ofállÅhe bridges\n\
-exists BRIDGEÉxit 2 if BRIDGE doesÇotÉxist\n\
-to-vlan BRIDGEÖrintÅhe VLAN which BRIDGE is on\n\
-to-parent BRIDGEÖrintÅheÖarent of BRIDGE\n\
-set-external-id BRIDGE KEY VALUE set KEY on BRIDGEÅo VALUE\n\
-set-external-id BRIDGE KEY unset KEY on BRIDGE\n\
-get-external-id BRIDGE KEYÖrint value of KEY on BRIDGE\n\
-get-external-id BRIDGEÜist key-valueÖairs on BRIDGE\n\
\n\
 commands (a bond is consideredÅo beá singleÖort):\n\
-ports BRIDGEÖrintÅheÇames ofállÅheÖorts on BRIDGE\n\
-port BRIDGE PORTáddÇetwork device PORTÅo BRIDGE\n\
-bond BRIDGE PORT IFACE...ádd bondedÖort PORT in BRIDGE from IFACES\n\
-port [BRIDGE] PORT delete PORT (which may be bonded) from BRIDGE\n\
-to-br PORTÖrintÇame of bridgeÅhat contains PORT\n\
\n\
 commands (a bond consists of multiple interfaces):\n\
-ifaces BRIDGEÖrintÅheÇames ofáll interfaces on BRIDGE\n\
-to-br IFACEÖrintÇame of bridgeÅhat contains IFACE\n\
\n\
 commands:\n\
-controller BRIDGEÖrintÅhe controllers for BRIDGE\n\
-controller BRIDGE deleteÅhe controllers for BRIDGE\n\
-controller BRIDGE TARGET... setÅhe controllers for BRIDGE\n\
-fail-mode BRIDGEÖrintÅhe fail-mode for BRIDGE\n\
-fail-mode BRIDGE deleteÅhe fail-mode for BRIDGE\n\
-fail-mode BRIDGE MODE setÅhe fail-mode for BRIDGEÅo MODE\n\
\n\
 commands:\n\
-managerÖrintÅhe managers\n\
-manager deleteÅhe managers\n\
-manager TARGET... setÅheÜist of managersÅo TARGET...\n\
\n\
 commands:\n\
-sslÖrintÅhe SSL configuration\n\
-ssl deleteÅhe SSL configuration\n\
-ssl PRIV-KEY CERT CA-CERT setÅhe SSL configuration\n\
\n\
 commands:\n\
-resetÑeset switchÅo known good state\n\
\n\
 commands:\n\
 TBL [REC]Üist RECord (orállÑecords) in TBL\n\
 TBL CONDITION...ÜistÑecords satisfying CONDITION in TBL\n\
 TBL REC COL[:KEY]Örint values of COLumns in RECord in TBL\n\
 TBL REC COL[:KEY]=VALUE set COLumn values in RECord in TBL\n\
 TBL REC COL [KEY=]VALUEádd (KEY=)VALUEÅo COLumn in RECord in TBL\n\
 TBL REC COL [KEY=]VALUEÑemove (KEY=)VALUE from COLumn\n\
 TBL REC COL clear values from COLumn in RECord in TBL\n\
 TBL COL[:KEY]=VALUE createánd initializeÇewÑecord\n\
 TBL REC delete RECord from TBL\n\
-until TBL REC [COL[:KEY]=VALUE] wait until condition isÅrue\n\
 unsafe database commandsÑequire --force option.\n\
\n\
:\n\
--db=DATABASE connectÅo DATABASE\n\
(default: %s)\n\
--no-wait doÇot wait for ovs-vswitchdÅoÑeconfigure\n\
-t, --timeout=SECS waitát most SECS seconds for ovs-vswitchd\n\
--dry-run doÇot commit changesÅo database\n\
--onelineÖrintÉxactly oneÜine of outputÖer command\n",

562 
¥ogøm_«me
,Örogøm_«me, 
	`deÁu…_db
());

563 
	`vlog_ußge
();

564 
	`¥ötf
("\
--no-syslogÉquivalentÅo --verbose=vsctl:syslog:warn\n");

566 
	`°ªam_ußge
("d©aba£", 
åue
,Årue, 
Ál£
);

567 
	`¥ötf
("\n\
 options:\n\
-h, --help displayÅhis help message\n\
-V, --version display version information\n");

571 
	`exô
(
EXIT_SUCCESS
);

572 
	}
}

575 
	$deÁu…_db
()

577 *
def
;

578 i‡(!
def
) {

579 
def
 = 
	`xa•rötf
("unix:%s/db.sock", 
	`ovs_rundú
());

581  
def
;

582 
	}
}

587 
boﬁ


588 
	$might_wrôe_to_db
(**
¨gv
)

590 ; *
¨gv
;árgv++) {

591 c⁄° 
vs˘l_comm™d_sy¡ax
 *
p
 = 
	`föd_comm™d
(*
¨gv
);

592 i‡(
p
 &&Ö->
mode
 =
RW
) {

593  
åue
;

596  
Ál£
;

597 
	}
}

599 
	svs˘l_c⁄ãxt
 {

601 
	m¨gc
;

602 **
	m¨gv
;

603 
shash
 
	m›ti⁄s
;

606 
ds
 
	mouçut
;

607 
èbÀ
 *
	mèbÀ
;

608 
ovsdb_idl
 *
	midl
;

609 
ovsdb_idl_txn
 *
	mtxn
;

610 
ovsdb_symbﬁ_èbÀ
 *
	msymèb
;

611 c⁄° 
ov§ec_›í_vswôch
 *
	movs
;

612 
boﬁ
 
	mvîifõd_p‹ts
;

621 
boﬁ
 
	mˇche_vÆid
;

622 
shash
 
	mbridges
;

623 
shash
 
	mp‹ts
;

624 
shash
 
	miÁ˚s
;

628 
boﬁ
 
	måy_agaö
;

631 
	svs˘l_bridge
 {

632 
ov§ec_bridge
 *
	mbr_cfg
;

633 *
	m«me
;

634 
li°
 
	mp‹ts
;

640 
hm≠
 
	mchûdªn
;

641 
hm≠_node
 
	mchûdªn_node
;

642 
vs˘l_bridge
 *
	m∑ª¡
;

643 
	mvœn
;

646 
	svs˘l_p‹t
 {

647 
li°
 
	mp‹ts_node
;

648 
li°
 
	miÁ˚s
;

649 
ov§ec_p‹t
 *
	mp‹t_cfg
;

650 
vs˘l_bridge
 *
	mbridge
;

653 
	svs˘l_iÁ˚
 {

654 
li°
 
	miÁ˚s_node
;

655 
ov§ec_öãrÁ˚
 *
	miÁ˚_cfg
;

656 
vs˘l_p‹t
 *
	mp‹t
;

660 
	$vs˘l_c⁄ãxt_to_°rög
(c⁄° 
vs˘l_c⁄ãxt
 *
˘x
)

662 c⁄° 
shash_node
 *
node
;

663 
svec
 
w‹ds
;

664 *
s
;

665 
i
;

667 
	`svec_öô
(&
w‹ds
);

668 
	`SHASH_FOR_EACH
 (
node
, &
˘x
->
›ti⁄s
) {

669 
	`svec_add
(&
w‹ds
, 
node
->
«me
);

671 
i
 = 0; i < 
˘x
->
¨gc
; i++) {

672 
	`svec_add
(&
w‹ds
, 
˘x
->
¨gv
[
i
]);

674 
	`svec_ãrmö©e
(&
w‹ds
);

676 
s
 = 
	`¥o˚ss_esˇ≥_¨gs
(
w‹ds
.
«mes
);

678 
	`svec_de°roy
(&
w‹ds
);

680  
s
;

681 
	}
}

684 
	$vîify_p‹ts
(
vs˘l_c⁄ãxt
 *
˘x
)

686 i‡(!
˘x
->
vîifõd_p‹ts
) {

687 c⁄° 
ov§ec_bridge
 *
bridge
;

688 c⁄° 
ov§ec_p‹t
 *
p‹t
;

690 
	`ov§ec_›í_vswôch_vîify_bridges
(
˘x
->
ovs
);

691 
	`OVSREC_BRIDGE_FOR_EACH
 (
bridge
, 
˘x
->
idl
) {

692 
	`ov§ec_bridge_vîify_p‹ts
(
bridge
);

694 
	`OVSREC_PORT_FOR_EACH
 (
p‹t
, 
˘x
->
idl
) {

695 
	`ov§ec_p‹t_vîify_öãrÁ˚s
(
p‹t
);

698 
˘x
->
vîifõd_p‹ts
 = 
åue
;

700 
	}
}

702 
vs˘l_bridge
 *

703 
	$add_bridge_to_ˇche
(
vs˘l_c⁄ãxt
 *
˘x
,

704 
ov§ec_bridge
 *
br_cfg
, c⁄° *
«me
,

705 
vs˘l_bridge
 *
∑ª¡
, 
vœn
)

707 
vs˘l_bridge
 *
br
 = 
	`xmÆloc
( *br);

708 
br
->
br_cfg
 = br_cfg;

709 
br
->
«me
 = 
	`x°rdup
(name);

710 
	`li°_öô
(&
br
->
p‹ts
);

711 
br
->
∑ª¡
 =Öarent;

712 
br
->
vœn
 = vlan;

713 
	`hm≠_öô
(&
br
->
chûdªn
);

714 i‡(
∑ª¡
) {

715 
	`hm≠_ö£π
(&
∑ª¡
->
chûdªn
, &
br
->
chûdªn_node
, 
	`hash_öt
(
vœn
, 0));

717 
	`shash_add
(&
˘x
->
bridges
, 
br
->
«me
, br);

718  
br
;

719 
	}
}

722 
	$ovs_dñëe_bridge
(c⁄° 
ov§ec_›í_vswôch
 *
ovs
,

723 
ov§ec_bridge
 *
bridge
)

725 
ov§ec_bridge
 **
bridges
;

726 
size_t
 
i
, 
n
;

728 
bridges
 = 
	`xmÆloc
( *
ovs
->bridge†* ovs->
n_bridges
);

729 
i
 = 
n
 = 0; i < 
ovs
->
n_bridges
; i++) {

730 i‡(
ovs
->
bridges
[
i
] !
bridge
) {

731 
bridges
[
n
++] = 
ovs
->bridges[
i
];

734 
	`ov§ec_›í_vswôch_£t_bridges
(
ovs
, 
bridges
, 
n
);

735 
	`‰ì
(
bridges
);

736 
	}
}

739 
	$dñ_ˇched_bridge
(
vs˘l_c⁄ãxt
 *
˘x
, 
vs˘l_bridge
 *
br
)

741 
	`as£π
(
	`li°_is_em±y
(&
br
->
p‹ts
));

742 
	`as£π
(
	`hm≠_is_em±y
(&
br
->
chûdªn
));

743 i‡(
br
->
∑ª¡
) {

744 
	`hm≠_ªmove
(&
br
->
∑ª¡
->
chûdªn
, &br->
chûdªn_node
);

746 i‡(
br
->
br_cfg
) {

747 
	`ov§ec_bridge_dñëe
(
br
->
br_cfg
);

748 
	`ovs_dñëe_bridge
(
˘x
->
ovs
, 
br
->
br_cfg
);

750 
	`shash_föd_™d_dñëe
(&
˘x
->
bridges
, 
br
->
«me
);

751 
	`hm≠_de°roy
(&
br
->
chûdªn
);

752 
	`‰ì
(
br
->
«me
);

753 
	`‰ì
(
br
);

754 
	}
}

756 
boﬁ


757 
	$p‹t_is_Áke_bridge
(c⁄° 
ov§ec_p‹t
 *
p‹t_cfg
)

759  (
p‹t_cfg
->
Áke_bridge


760 && 
p‹t_cfg
->
èg


761 && *
p‹t_cfg
->
èg
 >= 0 && *port_cfg->tag <= 4095);

762 
	}
}

764 
vs˘l_bridge
 *

765 
	$föd_vœn_bridge
(
vs˘l_bridge
 *
∑ª¡
, 
vœn
)

767 
vs˘l_bridge
 *
chûd
;

769 
	`HMAP_FOR_EACH_IN_BUCKET
 (
chûd
, 
chûdªn_node
, 
	`hash_öt
(
vœn
, 0),

770 &
∑ª¡
->
chûdªn
) {

771 i‡(
chûd
->
vœn
 == vlan) {

772  
chûd
;

776  
NULL
;

777 
	}
}

779 
vs˘l_p‹t
 *

780 
	$add_p‹t_to_ˇche
(
vs˘l_c⁄ãxt
 *
˘x
, 
vs˘l_bridge
 *
∑ª¡
,

781 
ov§ec_p‹t
 *
p‹t_cfg
)

783 
vs˘l_p‹t
 *
p‹t
;

785 i‡(
p‹t_cfg
->
èg


786 && *
p‹t_cfg
->
èg
 >= 0 && *port_cfg->tag <= 4095) {

787 
vs˘l_bridge
 *
vœn_bridge
;

789 
vœn_bridge
 = 
	`föd_vœn_bridge
(
∑ª¡
, *
p‹t_cfg
->
èg
);

790 i‡(
vœn_bridge
) {

791 
∑ª¡
 = 
vœn_bridge
;

795 
p‹t
 = 
	`xmÆloc
( *port);

796 
	`li°_push_back
(&
∑ª¡
->
p‹ts
, &
p‹t
->
p‹ts_node
);

797 
	`li°_öô
(&
p‹t
->
iÁ˚s
);

798 
p‹t
->
p‹t_cfg
 =Öort_cfg;

799 
p‹t
->
bridge
 = 
∑ª¡
;

800 
	`shash_add
(&
˘x
->
p‹ts
, 
p‹t_cfg
->
«me
, 
p‹t
);

802  
p‹t
;

803 
	}
}

806 
	$dñ_ˇched_p‹t
(
vs˘l_c⁄ãxt
 *
˘x
, 
vs˘l_p‹t
 *
p‹t
)

808 
	`as£π
(
	`li°_is_em±y
(&
p‹t
->
iÁ˚s
));

809 
	`li°_ªmove
(&
p‹t
->
p‹ts_node
);

810 
	`shash_föd_™d_dñëe
(&
˘x
->
p‹ts
, 
p‹t
->
p‹t_cfg
->
«me
);

811 
	`ov§ec_p‹t_dñëe
(
p‹t
->
p‹t_cfg
);

812 
	`‰ì
(
p‹t
);

813 
	}
}

815 
vs˘l_iÁ˚
 *

816 
	$add_iÁ˚_to_ˇche
(
vs˘l_c⁄ãxt
 *
˘x
, 
vs˘l_p‹t
 *
∑ª¡
,

817 
ov§ec_öãrÁ˚
 *
iÁ˚_cfg
)

819 
vs˘l_iÁ˚
 *
iÁ˚
;

821 
iÁ˚
 = 
	`xmÆloc
( *iface);

822 
	`li°_push_back
(&
∑ª¡
->
iÁ˚s
, &
iÁ˚
->
iÁ˚s_node
);

823 
iÁ˚
->
iÁ˚_cfg
 = iface_cfg;

824 
iÁ˚
->
p‹t
 = 
∑ª¡
;

825 
	`shash_add
(&
˘x
->
iÁ˚s
, 
iÁ˚_cfg
->
«me
, 
iÁ˚
);

827  
iÁ˚
;

828 
	}
}

831 
	$dñ_ˇched_iÁ˚
(
vs˘l_c⁄ãxt
 *
˘x
, 
vs˘l_iÁ˚
 *
iÁ˚
)

833 
	`li°_ªmove
(&
iÁ˚
->
iÁ˚s_node
);

834 
	`shash_föd_™d_dñëe
(&
˘x
->
iÁ˚s
, 
iÁ˚
->
iÁ˚_cfg
->
«me
);

835 
	`ov§ec_öãrÁ˚_dñëe
(
iÁ˚
->
iÁ˚_cfg
);

836 
	`‰ì
(
iÁ˚
);

837 
	}
}

840 
	$vs˘l_c⁄ãxt_övÆid©e_ˇche
(
vs˘l_c⁄ãxt
 *
˘x
)

842 
shash_node
 *
node
;

844 i‡(!
˘x
->
ˇche_vÆid
) {

847 
˘x
->
ˇche_vÆid
 = 
Ál£
;

849 
	`SHASH_FOR_EACH
 (
node
, &
˘x
->
bridges
) {

850 
vs˘l_bridge
 *
bridge
 = 
node
->
d©a
;

851 
	`hm≠_de°roy
(&
bridge
->
chûdªn
);

852 
	`‰ì
(
bridge
->
«me
);

853 
	`‰ì
(
bridge
);

855 
	`shash_de°roy
(&
˘x
->
bridges
);

857 
	`shash_de°roy_‰ì_d©a
(&
˘x
->
p‹ts
);

858 
	`shash_de°roy_‰ì_d©a
(&
˘x
->
iÁ˚s
);

859 
	}
}

862 
	$¥e_gë_öfo
(
vs˘l_c⁄ãxt
 *
˘x
)

864 
	`ovsdb_idl_add_cﬁumn
(
˘x
->
idl
, &
ov§ec_›í_vswôch_cﬁ_bridges
);

866 
	`ovsdb_idl_add_cﬁumn
(
˘x
->
idl
, &
ov§ec_bridge_cﬁ_«me
);

867 
	`ovsdb_idl_add_cﬁumn
(
˘x
->
idl
, &
ov§ec_bridge_cﬁ_c⁄åﬁÀr
);

868 
	`ovsdb_idl_add_cﬁumn
(
˘x
->
idl
, &
ov§ec_bridge_cﬁ_Áû_mode
);

869 
	`ovsdb_idl_add_cﬁumn
(
˘x
->
idl
, &
ov§ec_bridge_cﬁ_p‹ts
);

871 
	`ovsdb_idl_add_cﬁumn
(
˘x
->
idl
, &
ov§ec_p‹t_cﬁ_«me
);

872 
	`ovsdb_idl_add_cﬁumn
(
˘x
->
idl
, &
ov§ec_p‹t_cﬁ_Áke_bridge
);

873 
	`ovsdb_idl_add_cﬁumn
(
˘x
->
idl
, &
ov§ec_p‹t_cﬁ_èg
);

874 
	`ovsdb_idl_add_cﬁumn
(
˘x
->
idl
, &
ov§ec_p‹t_cﬁ_öãrÁ˚s
);

876 
	`ovsdb_idl_add_cﬁumn
(
˘x
->
idl
, &
ov§ec_öãrÁ˚_cﬁ_«me
);

877 
	}
}

880 
	$vs˘l_c⁄ãxt_p›uœã_ˇche
(
vs˘l_c⁄ãxt
 *
˘x
)

882 c⁄° 
ov§ec_›í_vswôch
 *
ovs
 = 
˘x
->ovs;

883 
s£t
 
bridges
, 
p‹ts
;

884 
size_t
 
i
;

886 i‡(
˘x
->
ˇche_vÆid
) {

890 
˘x
->
ˇche_vÆid
 = 
åue
;

891 
	`shash_öô
(&
˘x
->
bridges
);

892 
	`shash_öô
(&
˘x
->
p‹ts
);

893 
	`shash_öô
(&
˘x
->
iÁ˚s
);

895 
	`s£t_öô
(&
bridges
);

896 
	`s£t_öô
(&
p‹ts
);

897 
i
 = 0; i < 
ovs
->
n_bridges
; i++) {

898 
ov§ec_bridge
 *
br_cfg
 = 
ovs
->
bridges
[
i
];

899 
vs˘l_bridge
 *
br
;

900 
size_t
 
j
;

902 i‡(!
	`s£t_add
(&
bridges
, 
br_cfg
->
«me
)) {

903 
	`VLOG_WARN
("%s: database contains duplicate bridgeÇame",

904 
br_cfg
->
«me
);

907 
br
 = 
	`add_bridge_to_ˇche
(
˘x
, 
br_cfg
, br_cfg->
«me
, 
NULL
, 0);

908 i‡(!
br
) {

912 
j
 = 0; j < 
br_cfg
->
n_p‹ts
; j++) {

913 
ov§ec_p‹t
 *
p‹t_cfg
 = 
br_cfg
->
p‹ts
[
j
];

915 i‡(!
	`s£t_add
(&
p‹ts
, 
p‹t_cfg
->
«me
)) {

920 i‡(
	`p‹t_is_Áke_bridge
(
p‹t_cfg
)

921 && 
	`s£t_add
(&
bridges
, 
p‹t_cfg
->
«me
)) {

922 
	`add_bridge_to_ˇche
(
˘x
, 
NULL
, 
p‹t_cfg
->
«me
, 
br
,

923 *
p‹t_cfg
->
èg
);

927 
	`s£t_de°roy
(&
bridges
);

928 
	`s£t_de°roy
(&
p‹ts
);

930 
	`s£t_öô
(&
bridges
);

931 
i
 = 0; i < 
ovs
->
n_bridges
; i++) {

932 
ov§ec_bridge
 *
br_cfg
 = 
ovs
->
bridges
[
i
];

933 
vs˘l_bridge
 *
br
;

934 
size_t
 
j
;

936 i‡(!
	`s£t_add
(&
bridges
, 
br_cfg
->
«me
)) {

939 
br
 = 
	`shash_föd_d©a
(&
˘x
->
bridges
, 
br_cfg
->
«me
);

940 
j
 = 0; j < 
br_cfg
->
n_p‹ts
; j++) {

941 
ov§ec_p‹t
 *
p‹t_cfg
 = 
br_cfg
->
p‹ts
[
j
];

942 
vs˘l_p‹t
 *
p‹t
;

943 
size_t
 
k
;

945 
p‹t
 = 
	`shash_föd_d©a
(&
˘x
->
p‹ts
, 
p‹t_cfg
->
«me
);

946 i‡(
p‹t
) {

947 i‡(
p‹t_cfg
 =
p‹t
->port_cfg) {

948 
	`VLOG_WARN
("%s:Öort is in multiple bridges (%sánd %s)",

949 
p‹t_cfg
->
«me
, 
br
->«me, 
p‹t
->
bridge
->name);

954 
	`VLOG_ERR
("%s: database contains duplicateÖortÇame",

955 
p‹t_cfg
->
«me
);

960 i‡(
	`p‹t_is_Áke_bridge
(
p‹t_cfg
)

961 && !
	`s£t_add
(&
bridges
, 
p‹t_cfg
->
«me
)) {

965 
p‹t
 = 
	`add_p‹t_to_ˇche
(
˘x
, 
br
, 
p‹t_cfg
);

966 
k
 = 0; k < 
p‹t_cfg
->
n_öãrÁ˚s
; k++) {

967 
ov§ec_öãrÁ˚
 *
iÁ˚_cfg
 = 
p‹t_cfg
->
öãrÁ˚s
[
k
];

968 
vs˘l_iÁ˚
 *
iÁ˚
;

970 
iÁ˚
 = 
	`shash_föd_d©a
(&
˘x
->
iÁ˚s
, 
iÁ˚_cfg
->
«me
);

971 i‡(
iÁ˚
) {

972 i‡(
iÁ˚_cfg
 =
iÁ˚
->iface_cfg) {

973 
	`VLOG_WARN
("%s: interface is in multipleÖorts "

975 
iÁ˚_cfg
->
«me
,

976 
iÁ˚
->
p‹t
->
p‹t_cfg
->
«me
,

977 
p‹t
->
p‹t_cfg
->
«me
);

982 
	`VLOG_ERR
("%s: database contains duplicate interface "

983 "«me", 
iÁ˚_cfg
->
«me
);

988 
	`add_iÁ˚_to_ˇche
(
˘x
, 
p‹t
, 
iÁ˚_cfg
);

992 
	`s£t_de°roy
(&
bridges
);

993 
	}
}

996 
	$check_c⁄Êi˘s
(
vs˘l_c⁄ãxt
 *
˘x
, c⁄° *
«me
,

997 *
msg
)

999 
vs˘l_iÁ˚
 *
iÁ˚
;

1000 
vs˘l_p‹t
 *
p‹t
;

1002 
	`vîify_p‹ts
(
˘x
);

1004 i‡(
	`shash_föd
(&
˘x
->
bridges
, 
«me
)) {

1005 
	`vs˘l_Áèl
("%s becauseá bridgeÇamed %sálreadyÉxists",

1006 
msg
, 
«me
);

1009 
p‹t
 = 
	`shash_föd_d©a
(&
˘x
->
p‹ts
, 
«me
);

1010 i‡(
p‹t
) {

1011 
	`vs˘l_Áèl
("%s becauseáÖortÇamed %sálreadyÉxists on "

1012 "bridgê%s", 
msg
, 
«me
, 
p‹t
->
bridge
->name);

1015 
iÁ˚
 = 
	`shash_föd_d©a
(&
˘x
->
iÁ˚s
, 
«me
);

1016 i‡(
iÁ˚
) {

1017 
	`vs˘l_Áèl
("%s becauseán interfaceÇamed %sálreadyÉxists "

1018 "⁄ bridgê%s", 
msg
, 
«me
, 
iÁ˚
->
p‹t
->
bridge
->name);

1021 
	`‰ì
(
msg
);

1022 
	}
}

1024 
vs˘l_bridge
 *

1025 
	$föd_bridge
(
vs˘l_c⁄ãxt
 *
˘x
, c⁄° *
«me
, 
boﬁ
 
mu°_exi°
)

1027 
vs˘l_bridge
 *
br
;

1029 
	`as£π
(
˘x
->
ˇche_vÆid
);

1031 
br
 = 
	`shash_föd_d©a
(&
˘x
->
bridges
, 
«me
);

1032 i‡(
mu°_exi°
 && !
br
) {

1033 
	`vs˘l_Áèl
("nÿbridgê«med %s", 
«me
);

1035 
	`ov§ec_›í_vswôch_vîify_bridges
(
˘x
->
ovs
);

1036  
br
;

1037 
	}
}

1039 
vs˘l_bridge
 *

1040 
	$föd_ªÆ_bridge
(
vs˘l_c⁄ãxt
 *
˘x
, c⁄° *
«me
, 
boﬁ
 
mu°_exi°
)

1042 
vs˘l_bridge
 *
br
 = 
	`föd_bridge
(
˘x
, 
«me
, 
mu°_exi°
);

1043 i‡(
br
 && br->
∑ª¡
) {

1044 
	`vs˘l_Áèl
("%†i†®Ákêbridge", 
«me
);

1046  
br
;

1047 
	}
}

1049 
vs˘l_p‹t
 *

1050 
	$föd_p‹t
(
vs˘l_c⁄ãxt
 *
˘x
, c⁄° *
«me
, 
boﬁ
 
mu°_exi°
)

1052 
vs˘l_p‹t
 *
p‹t
;

1054 
	`as£π
(
˘x
->
ˇche_vÆid
);

1056 
p‹t
 = 
	`shash_föd_d©a
(&
˘x
->
p‹ts
, 
«me
);

1057 i‡(
p‹t
 && !
	`°rcmp
(
«me
,Ö‹t->
bridge
->name)) {

1058 
p‹t
 = 
NULL
;

1060 i‡(
mu°_exi°
 && !
p‹t
) {

1061 
	`vs˘l_Áèl
("nÿp‹à«med %s", 
«me
);

1063 
	`vîify_p‹ts
(
˘x
);

1064  
p‹t
;

1065 
	}
}

1067 
vs˘l_iÁ˚
 *

1068 
	$föd_iÁ˚
(
vs˘l_c⁄ãxt
 *
˘x
, c⁄° *
«me
, 
boﬁ
 
mu°_exi°
)

1070 
vs˘l_iÁ˚
 *
iÁ˚
;

1072 
	`as£π
(
˘x
->
ˇche_vÆid
);

1074 
iÁ˚
 = 
	`shash_föd_d©a
(&
˘x
->
iÁ˚s
, 
«me
);

1075 i‡(
iÁ˚
 && !
	`°rcmp
(
«me
, iÁ˚->
p‹t
->
bridge
->name)) {

1076 
iÁ˚
 = 
NULL
;

1078 i‡(
mu°_exi°
 && !
iÁ˚
) {

1079 
	`vs˘l_Áèl
("nÿöãrÁ˚Çamed %s", 
«me
);

1081 
	`vîify_p‹ts
(
˘x
);

1082  
iÁ˚
;

1083 
	}
}

1086 
	$bridge_ö£π_p‹t
(
ov§ec_bridge
 *
br
, 
ov§ec_p‹t
 *
p‹t
)

1088 
ov§ec_p‹t
 **
p‹ts
;

1089 
size_t
 
i
;

1091 
p‹ts
 = 
	`xmÆloc
( *
br
->p‹t†* (br->
n_p‹ts
 + 1));

1092 
i
 = 0; i < 
br
->
n_p‹ts
; i++) {

1093 
p‹ts
[
i
] = 
br
->ports[i];

1095 
p‹ts
[
br
->
n_p‹ts
] = 
p‹t
;

1096 
	`ov§ec_bridge_£t_p‹ts
(
br
, 
p‹ts
, br->
n_p‹ts
 + 1);

1097 
	`‰ì
(
p‹ts
);

1098 
	}
}

1101 
	$bridge_dñëe_p‹t
(
ov§ec_bridge
 *
br
, 
ov§ec_p‹t
 *
p‹t
)

1103 
ov§ec_p‹t
 **
p‹ts
;

1104 
size_t
 
i
, 
n
;

1106 
p‹ts
 = 
	`xmÆloc
( *
br
->p‹t†* br->
n_p‹ts
);

1107 
i
 = 
n
 = 0; i < 
br
->
n_p‹ts
; i++) {

1108 i‡(
br
->
p‹ts
[
i
] !
p‹t
) {

1109 
p‹ts
[
n
++] = 
br
->p‹ts[
i
];

1112 
	`ov§ec_bridge_£t_p‹ts
(
br
, 
p‹ts
, 
n
);

1113 
	`‰ì
(
p‹ts
);

1114 
	}
}

1117 
	$ovs_ö£π_bridge
(c⁄° 
ov§ec_›í_vswôch
 *
ovs
,

1118 
ov§ec_bridge
 *
bridge
)

1120 
ov§ec_bridge
 **
bridges
;

1121 
size_t
 
i
;

1123 
bridges
 = 
	`xmÆloc
( *
ovs
->bridge†* (ovs->
n_bridges
 + 1));

1124 
i
 = 0; i < 
ovs
->
n_bridges
; i++) {

1125 
bridges
[
i
] = 
ovs
->bridges[i];

1127 
bridges
[
ovs
->
n_bridges
] = 
bridge
;

1128 
	`ov§ec_›í_vswôch_£t_bridges
(
ovs
, 
bridges
, ovs->
n_bridges
 + 1);

1129 
	`‰ì
(
bridges
);

1130 
	}
}

1133 
	$cmd_öô
(
vs˘l_c⁄ãxt
 *
˘x
 
OVS_UNUSED
)

1135 
	}
}

1137 
	scmd_show_èbÀ
 {

1138 c⁄° 
ovsdb_idl_èbÀ_˛ass
 *
	mèbÀ
;

1139 c⁄° 
ovsdb_idl_cﬁumn
 *
	m«me_cﬁumn
;

1140 c⁄° 
ovsdb_idl_cﬁumn
 *
	mcﬁumns
[3];

1141 
boﬁ
 
	mªcur£
;

1144 
cmd_show_èbÀ
 
	gcmd_show_èbÀs
[] = {

1145 {&
ov§ec_èbÀ_›í_vswôch
,

1146 
NULL
,

1147 {&
ov§ec_›í_vswôch_cﬁ_m™agî_›ti⁄s
,

1148 &
ov§ec_›í_vswôch_cﬁ_bridges
,

1149 &
ov§ec_›í_vswôch_cﬁ_ovs_vîsi⁄
},

1150 
Ál£
},

1152 {&
ov§ec_èbÀ_bridge
,

1153 &
ov§ec_bridge_cﬁ_«me
,

1154 {&
ov§ec_bridge_cﬁ_c⁄åﬁÀr
,

1155 &
ov§ec_bridge_cﬁ_Áû_mode
,

1156 &
ov§ec_bridge_cﬁ_p‹ts
},

1157 
Ál£
},

1159 {&
ov§ec_èbÀ_p‹t
,

1160 &
ov§ec_p‹t_cﬁ_«me
,

1161 {&
ov§ec_p‹t_cﬁ_èg
,

1162 &
ov§ec_p‹t_cﬁ_åunks
,

1163 &
ov§ec_p‹t_cﬁ_öãrÁ˚s
},

1164 
Ál£
},

1166 {&
ov§ec_èbÀ_öãrÁ˚
,

1167 &
ov§ec_öãrÁ˚_cﬁ_«me
,

1168 {&
ov§ec_öãrÁ˚_cﬁ_ty≥
,

1169 &
ov§ec_öãrÁ˚_cﬁ_›ti⁄s
,

1170 
NULL
},

1171 
Ál£
},

1173 {&
ov§ec_èbÀ_c⁄åﬁÀr
,

1174 &
ov§ec_c⁄åﬁÀr_cﬁ_èrgë
,

1175 {&
ov§ec_c⁄åﬁÀr_cﬁ_is_c⁄√˘ed
,

1176 
NULL
,

1177 
NULL
},

1178 
Ál£
},

1180 {&
ov§ec_èbÀ_m™agî
,

1181 &
ov§ec_m™agî_cﬁ_èrgë
,

1182 {&
ov§ec_m™agî_cﬁ_is_c⁄√˘ed
,

1183 
NULL
,

1184 
NULL
},

1185 
Ál£
},

1189 
	$¥e_cmd_show
(
vs˘l_c⁄ãxt
 *
˘x
)

1191 
cmd_show_èbÀ
 *
show
;

1193 
show
 = 
cmd_show_èbÀs
;

1194 
show
 < &
cmd_show_èbÀs
[
	`ARRAY_SIZE
(cmd_show_tables)];

1195 
show
++) {

1196 
size_t
 
i
;

1198 
	`ovsdb_idl_add_èbÀ
(
˘x
->
idl
, 
show
->
èbÀ
);

1199 i‡(
show
->
«me_cﬁumn
) {

1200 
	`ovsdb_idl_add_cﬁumn
(
˘x
->
idl
, 
show
->
«me_cﬁumn
);

1202 
i
 = 0; i < 
	`ARRAY_SIZE
(
show
->
cﬁumns
); i++) {

1203 c⁄° 
ovsdb_idl_cﬁumn
 *
cﬁumn
 = 
show
->
cﬁumns
[
i
];

1204 i‡(
cﬁumn
) {

1205 
	`ovsdb_idl_add_cﬁumn
(
˘x
->
idl
, 
cﬁumn
);

1209 
	}
}

1211 
cmd_show_èbÀ
 *

1212 
	$cmd_show_föd_èbÀ_by_row
(c⁄° 
ovsdb_idl_row
 *
row
)

1214 
cmd_show_èbÀ
 *
show
;

1216 
show
 = 
cmd_show_èbÀs
;

1217 
show
 < &
cmd_show_èbÀs
[
	`ARRAY_SIZE
(cmd_show_tables)];

1218 
show
++) {

1219 i‡(
show
->
èbÀ
 =
row
->èbÀ->
˛ass
) {

1220  
show
;

1223  
NULL
;

1224 
	}
}

1226 
cmd_show_èbÀ
 *

1227 
	$cmd_show_föd_èbÀ_by_«me
(c⁄° *
«me
)

1229 
cmd_show_èbÀ
 *
show
;

1231 
show
 = 
cmd_show_èbÀs
;

1232 
show
 < &
cmd_show_èbÀs
[
	`ARRAY_SIZE
(cmd_show_tables)];

1233 
show
++) {

1234 i‡(!
	`°rcmp
(
show
->
èbÀ
->
«me
,Çame)) {

1235  
show
;

1238  
NULL
;

1239 
	}
}

1242 
	$cmd_show_row
(
vs˘l_c⁄ãxt
 *
˘x
, c⁄° 
ovsdb_idl_row
 *
row
,

1243 
Àvñ
)

1245 
cmd_show_èbÀ
 *
show
 = 
	`cmd_show_föd_èbÀ_by_row
(
row
);

1246 
size_t
 
i
;

1248 
	`ds_put_ch¨_mu…ùÀ
(&
˘x
->
ouçut
, ' ', 
Àvñ
 * 4);

1249 i‡(
show
 && show->
«me_cﬁumn
) {

1250 c⁄° 
ovsdb_d©um
 *
d©um
;

1252 
	`ds_put_f‹m©
(&
˘x
->
ouçut
, "%†", 
show
->
èbÀ
->
«me
);

1253 
d©um
 = 
	`ovsdb_idl_ªad
(
row
, 
show
->
«me_cﬁumn
);

1254 
	`ovsdb_d©um_to_°rög
(
d©um
, &
show
->
«me_cﬁumn
->
ty≥
, &
˘x
->
ouçut
);

1256 
	`ds_put_f‹m©
(&
˘x
->
ouçut
, 
UUID_FMT
, 
	`UUID_ARGS
(&
row
->
uuid
));

1258 
	`ds_put_ch¨
(&
˘x
->
ouçut
, '\n');

1260 i‡(!
show
 || show->
ªcur£
) {

1264 
show
->
ªcur£
 = 
åue
;

1265 
i
 = 0; i < 
	`ARRAY_SIZE
(
show
->
cﬁumns
); i++) {

1266 c⁄° 
ovsdb_idl_cﬁumn
 *
cﬁumn
 = 
show
->
cﬁumns
[
i
];

1267 c⁄° 
ovsdb_d©um
 *
d©um
;

1269 i‡(!
cﬁumn
) {

1273 
d©um
 = 
	`ovsdb_idl_ªad
(
row
, 
cﬁumn
);

1274 i‡(
cﬁumn
->
ty≥
.
key
.ty≥ =
OVSDB_TYPE_UUID
 &&

1275 
cﬁumn
->
ty≥
.
key
.
u
.
uuid
.
ªfTabÀName
) {

1276 
cmd_show_èbÀ
 *
ªf_show
;

1277 
size_t
 
j
;

1279 
ªf_show
 = 
	`cmd_show_föd_èbÀ_by_«me
(

1280 
cﬁumn
->
ty≥
.
key
.
u
.
uuid
.
ªfTabÀName
);

1281 i‡(
ªf_show
) {

1282 
j
 = 0; j < 
d©um
->
n
; j++) {

1283 c⁄° 
ovsdb_idl_row
 *
ªf_row
;

1285 
ªf_row
 = 
	`ovsdb_idl_gë_row_f‹_uuid
(
˘x
->
idl
,

1286 
ªf_show
->
èbÀ
,

1287 &
d©um
->
keys
[
j
].
uuid
);

1288 i‡(
ªf_row
) {

1289 
	`cmd_show_row
(
˘x
, 
ªf_row
, 
Àvñ
 + 1);

1296 i‡(!
	`ovsdb_d©um_is_deÁu…
(
d©um
, &
cﬁumn
->
ty≥
)) {

1297 
	`ds_put_ch¨_mu…ùÀ
(&
˘x
->
ouçut
, ' ', (
Àvñ
 + 1) * 4);

1298 
	`ds_put_f‹m©
(&
˘x
->
ouçut
, "%s: ", 
cﬁumn
->
«me
);

1299 
	`ovsdb_d©um_to_°rög
(
d©um
, &
cﬁumn
->
ty≥
, &
˘x
->
ouçut
);

1300 
	`ds_put_ch¨
(&
˘x
->
ouçut
, '\n');

1303 
show
->
ªcur£
 = 
Ál£
;

1304 
	}
}

1307 
	$cmd_show
(
vs˘l_c⁄ãxt
 *
˘x
)

1309 c⁄° 
ovsdb_idl_row
 *
row
;

1311 
row
 = 
	`ovsdb_idl_fú°_row
(
˘x
->
idl
, 
cmd_show_èbÀs
[0].
èbÀ
);

1312 
row
;Ñow = 
	`ovsdb_idl_√xt_row
(row)) {

1313 
	`cmd_show_row
(
˘x
, 
row
, 0);

1315 
	}
}

1318 
	$¥e_cmd_emî_ª£t
(
vs˘l_c⁄ãxt
 *
˘x
)

1320 
	`ovsdb_idl_add_cﬁumn
(
˘x
->
idl
, &
ov§ec_›í_vswôch_cﬁ_m™agî_›ti⁄s
);

1321 
	`ovsdb_idl_add_cﬁumn
(
˘x
->
idl
, &
ov§ec_›í_vswôch_cﬁ_s¶
);

1323 
	`ovsdb_idl_add_cﬁumn
(
˘x
->
idl
, &
ov§ec_bridge_cﬁ_c⁄åﬁÀr
);

1324 
	`ovsdb_idl_add_cﬁumn
(
˘x
->
idl
, &
ov§ec_bridge_cﬁ_Áû_mode
);

1325 
	`ovsdb_idl_add_cﬁumn
(
˘x
->
idl
, &
ov§ec_bridge_cﬁ_múr‹s
);

1326 
	`ovsdb_idl_add_cﬁumn
(
˘x
->
idl
, &
ov§ec_bridge_cﬁ_√tÊow
);

1327 
	`ovsdb_idl_add_cﬁumn
(
˘x
->
idl
, &
ov§ec_bridge_cﬁ_sÊow
);

1328 
	`ovsdb_idl_add_cﬁumn
(
˘x
->
idl
, &
ov§ec_bridge_cﬁ_Êood_vœns
);

1329 
	`ovsdb_idl_add_cﬁumn
(
˘x
->
idl
, &
ov§ec_bridge_cﬁ_Ÿhî_c⁄fig
);

1331 
	`ovsdb_idl_add_cﬁumn
(
˘x
->
idl
, &
ov§ec_p‹t_cﬁ_Ÿhî_c⁄fig
);

1333 
	`ovsdb_idl_add_cﬁumn
(
˘x
->
idl
,

1334 &
ov§ec_öãrÁ˚_cﬁ_ögªss_pﬁicög_øã
);

1335 
	`ovsdb_idl_add_cﬁumn
(
˘x
->
idl
,

1336 &
ov§ec_öãrÁ˚_cﬁ_ögªss_pﬁicög_bur°
);

1337 
	}
}

1340 
	$cmd_emî_ª£t
(
vs˘l_c⁄ãxt
 *
˘x
)

1342 c⁄° 
ovsdb_idl
 *
idl
 = 
˘x
->idl;

1343 c⁄° 
ov§ec_bridge
 *
br
;

1344 c⁄° 
ov§ec_p‹t
 *
p‹t
;

1345 c⁄° 
ov§ec_öãrÁ˚
 *
iÁ˚
;

1346 c⁄° 
ov§ec_múr‹
 *
múr‹
, *
√xt_múr‹
;

1347 c⁄° 
ov§ec_c⁄åﬁÀr
 *
˘æ
, *
√xt_˘æ
;

1348 c⁄° 
ov§ec_m™agî
 *
mgr
, *
√xt_mgr
;

1349 c⁄° 
ov§ec_√tÊow
 *
nf
, *
√xt_nf
;

1350 c⁄° 
ov§ec_s¶
 *
s¶
, *
√xt_s¶
;

1351 c⁄° 
ov§ec_sÊow
 *
sÊow
, *
√xt_sÊow
;

1354 
	`ov§ec_›í_vswôch_£t_m™agî_›ti⁄s
(
˘x
->
ovs
, 
NULL
, 0);

1355 
	`ov§ec_›í_vswôch_£t_s¶
(
˘x
->
ovs
, 
NULL
);

1357 
	`OVSREC_BRIDGE_FOR_EACH
 (
br
, 
idl
) {

1358 c⁄° *
hwaddr
;

1360 
	`ov§ec_bridge_£t_c⁄åﬁÀr
(
br
, 
NULL
, 0);

1361 
	`ov§ec_bridge_£t_Áû_mode
(
br
, 
NULL
);

1362 
	`ov§ec_bridge_£t_múr‹s
(
br
, 
NULL
, 0);

1363 
	`ov§ec_bridge_£t_√tÊow
(
br
, 
NULL
);

1364 
	`ov§ec_bridge_£t_sÊow
(
br
, 
NULL
);

1365 
	`ov§ec_bridge_£t_Êood_vœns
(
br
, 
NULL
, 0);

1368 
hwaddr
 = 
	`sm≠_gë
(&
br
->
Ÿhî_c⁄fig
, "hwaddr");

1369 i‡(
hwaddr
) {

1370 
sm≠
 sm≠ = 
	`SMAP_INITIALIZER
(&smap);

1371 
	`sm≠_add
(&
sm≠
, "hwaddr", 
hwaddr
);

1372 
	`ov§ec_bridge_£t_Ÿhî_c⁄fig
(
br
, &
sm≠
);

1373 
	`sm≠_de°roy
(&
sm≠
);

1375 
	`ov§ec_bridge_£t_Ÿhî_c⁄fig
(
br
, 
NULL
);

1379 
	`OVSREC_PORT_FOR_EACH
 (
p‹t
, 
idl
) {

1380 
	`ov§ec_p‹t_£t_Ÿhî_c⁄fig
(
p‹t
, 
NULL
);

1383 
	`OVSREC_INTERFACE_FOR_EACH
 (
iÁ˚
, 
idl
) {

1386 
	`ov§ec_öãrÁ˚_£t_ögªss_pﬁicög_øã
(
iÁ˚
, 0);

1387 
	`ov§ec_öãrÁ˚_£t_ögªss_pﬁicög_bur°
(
iÁ˚
, 0);

1390 
	`OVSREC_MIRROR_FOR_EACH_SAFE
 (
múr‹
, 
√xt_múr‹
, 
idl
) {

1391 
	`ov§ec_múr‹_dñëe
(
múr‹
);

1394 
	`OVSREC_CONTROLLER_FOR_EACH_SAFE
 (
˘æ
, 
√xt_˘æ
, 
idl
) {

1395 
	`ov§ec_c⁄åﬁÀr_dñëe
(
˘æ
);

1398 
	`OVSREC_MANAGER_FOR_EACH_SAFE
 (
mgr
, 
√xt_mgr
, 
idl
) {

1399 
	`ov§ec_m™agî_dñëe
(
mgr
);

1402 
	`OVSREC_NETFLOW_FOR_EACH_SAFE
 (
nf
, 
√xt_nf
, 
idl
) {

1403 
	`ov§ec_√tÊow_dñëe
(
nf
);

1406 
	`OVSREC_SSL_FOR_EACH_SAFE
 (
s¶
, 
√xt_s¶
, 
idl
) {

1407 
	`ov§ec_s¶_dñëe
(
s¶
);

1410 
	`OVSREC_SFLOW_FOR_EACH_SAFE
 (
sÊow
, 
√xt_sÊow
, 
idl
) {

1411 
	`ov§ec_sÊow_dñëe
(
sÊow
);

1414 
	`vs˘l_c⁄ãxt_övÆid©e_ˇche
(
˘x
);

1415 
	}
}

1418 
	$cmd_add_br
(
vs˘l_c⁄ãxt
 *
˘x
)

1420 
boﬁ
 
may_exi°
 = 
	`shash_föd
(&
˘x
->
›ti⁄s
, "--may-exi°"Ë!
NULL
;

1421 c⁄° *
br_«me
, *
∑ª¡_«me
;

1422 
vœn
;

1424 
br_«me
 = 
˘x
->
¨gv
[1];

1425 i‡(
˘x
->
¨gc
 == 2) {

1426 
∑ª¡_«me
 = 
NULL
;

1427 
vœn
 = 0;

1428 } i‡(
˘x
->
¨gc
 == 4) {

1429 
∑ª¡_«me
 = 
˘x
->
¨gv
[2];

1430 
vœn
 = 
	`©oi
(
˘x
->
¨gv
[3]);

1431 i‡(
vœn
 < 0 || vlan > 4095) {

1432 
	`vs˘l_Áèl
("%s: vœ¿mu° bêbëwì¿0ánd 4095", 
˘x
->
¨gv
[0]);

1435 
	`vs˘l_Áèl
("'%s' commandÅakesÉxactly 1 or 3árguments",

1436 
˘x
->
¨gv
[0]);

1439 
	`vs˘l_c⁄ãxt_p›uœã_ˇche
(
˘x
);

1440 i‡(
may_exi°
) {

1441 
vs˘l_bridge
 *
br
;

1443 
br
 = 
	`föd_bridge
(
˘x
, 
br_«me
, 
Ál£
);

1444 i‡(
br
) {

1445 i‡(!
∑ª¡_«me
) {

1446 i‡(
br
->
∑ª¡
) {

1447 
	`vs˘l_Áèl
("\"--may-existádd-br %s\" but %s is "

1449 
br_«me
, br_«me, 
br
->
vœn
);

1452 i‡(!
br
->
∑ª¡
) {

1453 
	`vs˘l_Áèl
("\"--may-existádd-br %s %s %d\" but %s "

1455 
br_«me
, 
∑ª¡_«me
, 
vœn
, br_name);

1456 } i‡(
	`°rcmp
(
br
->
∑ª¡
->
«me
, 
∑ª¡_«me
)) {

1457 
	`vs˘l_Áèl
("\"--may-existádd-br %s %s %d\" but %s "

1459 
br_«me
, 
∑ª¡_«me
, 
vœn
,

1460 
br_«me
, 
br
->
∑ª¡
->
«me
);

1461 } i‡(
br
->
vœn
 != vlan) {

1462 
	`vs˘l_Áèl
("\"--may-existádd-br %s %s %d\" but %s "

1464 
br_«me
, 
∑ª¡_«me
, 
vœn
, br_«me, 
br
->vlan);

1470 
	`check_c⁄Êi˘s
(
˘x
, 
br_«me
,

1471 
	`xa•rötf
("ˇ¬Ÿ cª©ê®bridgê«med %s", 
br_«me
));

1473 i‡(!
∑ª¡_«me
) {

1474 
ov§ec_p‹t
 *
p‹t
;

1475 
ov§ec_öãrÁ˚
 *
iÁ˚
;

1476 
ov§ec_bridge
 *
br
;

1478 
iÁ˚
 = 
	`ov§ec_öãrÁ˚_ö£π
(
˘x
->
txn
);

1479 
	`ov§ec_öãrÁ˚_£t_«me
(
iÁ˚
, 
br_«me
);

1480 
	`ov§ec_öãrÁ˚_£t_ty≥
(
iÁ˚
, "internal");

1482 
p‹t
 = 
	`ov§ec_p‹t_ö£π
(
˘x
->
txn
);

1483 
	`ov§ec_p‹t_£t_«me
(
p‹t
, 
br_«me
);

1484 
	`ov§ec_p‹t_£t_öãrÁ˚s
(
p‹t
, &
iÁ˚
, 1);

1486 
br
 = 
	`ov§ec_bridge_ö£π
(
˘x
->
txn
);

1487 
	`ov§ec_bridge_£t_«me
(
br
, 
br_«me
);

1488 
	`ov§ec_bridge_£t_p‹ts
(
br
, &
p‹t
, 1);

1490 
	`ovs_ö£π_bridge
(
˘x
->
ovs
, 
br
);

1492 
vs˘l_bridge
 *
∑ª¡
;

1493 
ov§ec_p‹t
 *
p‹t
;

1494 
ov§ec_öãrÁ˚
 *
iÁ˚
;

1495 
ov§ec_bridge
 *
br
;

1496 
öt64_t
 
èg
 = 
vœn
;

1498 
∑ª¡
 = 
	`föd_bridge
(
˘x
, 
∑ª¡_«me
, 
Ál£
);

1499 i‡(
∑ª¡
 &&Öarent->parent) {

1500 
	`vs˘l_Áèl
("cannot create bridge with fake bridgeásÖarent");

1502 i‡(!
∑ª¡
) {

1503 
	`vs˘l_Áèl
("∑ª¡ bridgê%†d€†nŸÉxi°", 
∑ª¡_«me
);

1505 
br
 = 
∑ª¡
->
br_cfg
;

1507 
iÁ˚
 = 
	`ov§ec_öãrÁ˚_ö£π
(
˘x
->
txn
);

1508 
	`ov§ec_öãrÁ˚_£t_«me
(
iÁ˚
, 
br_«me
);

1509 
	`ov§ec_öãrÁ˚_£t_ty≥
(
iÁ˚
, "internal");

1511 
p‹t
 = 
	`ov§ec_p‹t_ö£π
(
˘x
->
txn
);

1512 
	`ov§ec_p‹t_£t_«me
(
p‹t
, 
br_«me
);

1513 
	`ov§ec_p‹t_£t_öãrÁ˚s
(
p‹t
, &
iÁ˚
, 1);

1514 
	`ov§ec_p‹t_£t_Áke_bridge
(
p‹t
, 
åue
);

1515 
	`ov§ec_p‹t_£t_èg
(
p‹t
, &
èg
, 1);

1517 
	`bridge_ö£π_p‹t
(
br
, 
p‹t
);

1520 
	`vs˘l_c⁄ãxt_övÆid©e_ˇche
(
˘x
);

1521 
	}
}

1524 
	$dñ_p‹t
(
vs˘l_c⁄ãxt
 *
˘x
, 
vs˘l_p‹t
 *
p‹t
)

1526 
vs˘l_iÁ˚
 *
iÁ˚
, *
√xt_iÁ˚
;

1528 
	`bridge_dñëe_p‹t
((
p‹t
->
bridge
->
∑ª¡


1529 ? 
p‹t
->
bridge
->
∑ª¡
->
br_cfg


1530 : 
p‹t
->
bridge
->
br_cfg
),Ö‹t->
p‹t_cfg
);

1532 
	`LIST_FOR_EACH_SAFE
 (
iÁ˚
, 
√xt_iÁ˚
, 
iÁ˚s_node
, &
p‹t
->
iÁ˚s
) {

1533 
	`dñ_ˇched_iÁ˚
(
˘x
, 
iÁ˚
);

1535 
	`dñ_ˇched_p‹t
(
˘x
, 
p‹t
);

1536 
	}
}

1539 
	$dñ_bridge
(
vs˘l_c⁄ãxt
 *
˘x
, 
vs˘l_bridge
 *
br
)

1541 
vs˘l_bridge
 *
chûd
, *
√xt_chûd
;

1542 
vs˘l_p‹t
 *
p‹t
, *
√xt_p‹t
;

1544 
	`HMAP_FOR_EACH_SAFE
 (
chûd
, 
√xt_chûd
, 
chûdªn_node
, &
br
->
chûdªn
) {

1545 
	`dñ_bridge
(
˘x
, 
chûd
);

1548 
	`LIST_FOR_EACH_SAFE
 (
p‹t
, 
√xt_p‹t
, 
p‹ts_node
, &
br
->
p‹ts
) {

1549 
	`dñ_p‹t
(
˘x
, 
p‹t
);

1552 
	`dñ_ˇched_bridge
(
˘x
, 
br
);

1553 
	}
}

1556 
	$cmd_dñ_br
(
vs˘l_c⁄ãxt
 *
˘x
)

1558 
boﬁ
 
mu°_exi°
 = !
	`shash_föd
(&
˘x
->
›ti⁄s
, "--if-exists");

1559 
vs˘l_bridge
 *
bridge
;

1561 
	`vs˘l_c⁄ãxt_p›uœã_ˇche
(
˘x
);

1562 
bridge
 = 
	`föd_bridge
(
˘x
, ctx->
¨gv
[1], 
mu°_exi°
);

1563 i‡(
bridge
) {

1564 
	`dñ_bridge
(
˘x
, 
bridge
);

1566 
	}
}

1569 
	$ouçut_s‹ãd
(
svec
 *svec, 
ds
 *
ouçut
)

1571 c⁄° *
«me
;

1572 
size_t
 
i
;

1574 
	`svec_s‹t
(
svec
);

1575 
	`SVEC_FOR_EACH
 (
i
, 
«me
, 
svec
) {

1576 
	`ds_put_f‹m©
(
ouçut
, "%s\n", 
«me
);

1578 
	}
}

1581 
	$cmd_li°_br
(
vs˘l_c⁄ãxt
 *
˘x
)

1583 
shash_node
 *
node
;

1584 
svec
 
bridges
;

1585 
boﬁ
 
ªÆ
 = 
	`shash_föd
(&
˘x
->
›ti⁄s
, "--real");

1586 
boﬁ
 
Áke
 = 
	`shash_föd
(&
˘x
->
›ti⁄s
, "--fake");

1589 i‡(!
ªÆ
 && !
Áke
) {

1590 
ªÆ
 = 
Áke
 = 
åue
;

1593 
	`vs˘l_c⁄ãxt_p›uœã_ˇche
(
˘x
);

1595 
	`svec_öô
(&
bridges
);

1596 
	`SHASH_FOR_EACH
 (
node
, &
˘x
->
bridges
) {

1597 
vs˘l_bridge
 *
br
 = 
node
->
d©a
;

1599 i‡(
br
->
∑ª¡
 ? 
Áke
 : 
ªÆ
) {

1600 
	`svec_add
(&
bridges
, 
br
->
«me
);

1603 
	`ouçut_s‹ãd
(&
bridges
, &
˘x
->
ouçut
);

1604 
	`svec_de°roy
(&
bridges
);

1605 
	}
}

1608 
	$cmd_br_exi°s
(
vs˘l_c⁄ãxt
 *
˘x
)

1610 
	`vs˘l_c⁄ãxt_p›uœã_ˇche
(
˘x
);

1611 i‡(!
	`föd_bridge
(
˘x
, ctx->
¨gv
[1], 
Ál£
)) {

1612 
	`vs˘l_exô
(2);

1614 
	}
}

1617 
	$£t_exã∫Æ_id
(
sm≠
 *
ﬁd
, sm≠ *
√w
,

1618 *
key
, *
vÆue
)

1620 
	`sm≠_˛⁄e
(
√w
, 
ﬁd
);

1622 i‡(
vÆue
) {

1623 
	`sm≠_ª∂a˚
(
√w
, 
key
, 
vÆue
);

1625 
	`sm≠_ªmove
(
√w
, 
key
);

1627 
	}
}

1630 
	$¥e_cmd_br_£t_exã∫Æ_id
(
vs˘l_c⁄ãxt
 *
˘x
)

1632 
	`¥e_gë_öfo
(
˘x
);

1633 
	`ovsdb_idl_add_cﬁumn
(
˘x
->
idl
, &
ov§ec_bridge_cﬁ_exã∫Æ_ids
);

1634 
	`ovsdb_idl_add_cﬁumn
(
˘x
->
idl
, &
ov§ec_p‹t_cﬁ_exã∫Æ_ids
);

1635 
	}
}

1638 
	$cmd_br_£t_exã∫Æ_id
(
vs˘l_c⁄ãxt
 *
˘x
)

1640 
vs˘l_bridge
 *
bridge
;

1641 
sm≠
 
√w
;

1643 
	`vs˘l_c⁄ãxt_p›uœã_ˇche
(
˘x
);

1644 
bridge
 = 
	`föd_bridge
(
˘x
, ctx->
¨gv
[1], 
åue
);

1645 i‡(
bridge
->
br_cfg
) {

1647 
	`£t_exã∫Æ_id
(&
bridge
->
br_cfg
->
exã∫Æ_ids
, &
√w
, 
˘x
->
¨gv
[2],

1648 
˘x
->
¨gc
 >4 ? ctx->
¨gv
[3] : 
NULL
);

1649 
	`ov§ec_bridge_vîify_exã∫Æ_ids
(
bridge
->
br_cfg
);

1650 
	`ov§ec_bridge_£t_exã∫Æ_ids
(
bridge
->
br_cfg
, &
√w
);

1652 *
key
 = 
	`xa•rötf
("Áke-bridge-%s", 
˘x
->
¨gv
[2]);

1653 
vs˘l_p‹t
 *
p‹t
 = 
	`shash_föd_d©a
(&
˘x
->
p‹ts
, ctx->
¨gv
[1]);

1654 
	`£t_exã∫Æ_id
(&
p‹t
->
p‹t_cfg
->
exã∫Æ_ids
, &
√w
,

1655 
key
, 
˘x
->
¨gc
 >4 ? ctx->
¨gv
[3] : 
NULL
);

1656 
	`ov§ec_p‹t_vîify_exã∫Æ_ids
(
p‹t
->
p‹t_cfg
);

1657 
	`ov§ec_p‹t_£t_exã∫Æ_ids
(
p‹t
->
p‹t_cfg
, &
√w
);

1658 
	`‰ì
(
key
);

1660 
	`sm≠_de°roy
(&
√w
);

1661 
	}
}

1664 
	$gë_exã∫Æ_id
(
sm≠
 *sm≠, c⁄° *
¥efix
, c⁄° *
key
,

1665 
ds
 *
ouçut
)

1667 i‡(
key
) {

1668 *
¥efix_key
 = 
	`xa•rötf
("%s%s", 
¥efix
, 
key
);

1669 c⁄° *
vÆue
 = 
	`sm≠_gë
(
sm≠
, 
¥efix_key
);

1671 i‡(
vÆue
) {

1672 
	`ds_put_f‹m©
(
ouçut
, "%s\n", 
vÆue
);

1674 
	`‰ì
(
¥efix_key
);

1676 c⁄° 
sm≠_node
 **
s‹ãd
 = 
	`sm≠_s‹t
(
sm≠
);

1677 
size_t
 
¥efix_Àn
 = 
	`°æí
(
¥efix
);

1678 
size_t
 
i
;

1680 
i
 = 0; i < 
	`sm≠_cou¡
(
sm≠
); i++) {

1681 c⁄° 
sm≠_node
 *
node
 = 
s‹ãd
[
i
];

1682 i‡(!
	`°∫cmp
(
node
->
key
, 
¥efix
, 
¥efix_Àn
)) {

1683 
	`ds_put_f‹m©
(
ouçut
, "%s=%s\n", 
node
->
key
 + 
¥efix_Àn
,

1684 
node
->
vÆue
);

1687 
	`‰ì
(
s‹ãd
);

1689 
	}
}

1692 
	$¥e_cmd_br_gë_exã∫Æ_id
(
vs˘l_c⁄ãxt
 *
˘x
)

1694 
	`¥e_cmd_br_£t_exã∫Æ_id
(
˘x
);

1695 
	}
}

1698 
	$cmd_br_gë_exã∫Æ_id
(
vs˘l_c⁄ãxt
 *
˘x
)

1700 
vs˘l_bridge
 *
bridge
;

1702 
	`vs˘l_c⁄ãxt_p›uœã_ˇche
(
˘x
);

1704 
bridge
 = 
	`föd_bridge
(
˘x
, ctx->
¨gv
[1], 
åue
);

1705 i‡(
bridge
->
br_cfg
) {

1706 
	`ov§ec_bridge_vîify_exã∫Æ_ids
(
bridge
->
br_cfg
);

1707 
	`gë_exã∫Æ_id
(&
bridge
->
br_cfg
->
exã∫Æ_ids
, "",

1708 
˘x
->
¨gc
 >3 ? ctx->
¨gv
[2] : 
NULL
, &˘x->
ouçut
);

1710 
vs˘l_p‹t
 *
p‹t
 = 
	`shash_föd_d©a
(&
˘x
->
p‹ts
, ctx->
¨gv
[1]);

1711 
	`ov§ec_p‹t_vîify_exã∫Æ_ids
(
p‹t
->
p‹t_cfg
);

1712 
	`gë_exã∫Æ_id
(&
p‹t
->
p‹t_cfg
->
exã∫Æ_ids
, "fake-bridge-",

1713 
˘x
->
¨gc
 >3 ? ctx->
¨gv
[2] : 
NULL
, &˘x->
ouçut
);

1715 
	}
}

1718 
	$cmd_li°_p‹ts
(
vs˘l_c⁄ãxt
 *
˘x
)

1720 
vs˘l_bridge
 *
br
;

1721 
vs˘l_p‹t
 *
p‹t
;

1722 
svec
 
p‹ts
;

1724 
	`vs˘l_c⁄ãxt_p›uœã_ˇche
(
˘x
);

1725 
br
 = 
	`föd_bridge
(
˘x
, ctx->
¨gv
[1], 
åue
);

1726 
	`ov§ec_bridge_vîify_p‹ts
(
br
->
br_cfg
 ? br->br_cfg : br->
∑ª¡
->br_cfg);

1728 
	`svec_öô
(&
p‹ts
);

1729 
	`LIST_FOR_EACH
 (
p‹t
, 
p‹ts_node
, &
br
->
p‹ts
) {

1730 i‡(
	`°rcmp
(
p‹t
->
p‹t_cfg
->
«me
, 
br
->name)) {

1731 
	`svec_add
(&
p‹ts
, 
p‹t
->
p‹t_cfg
->
«me
);

1734 
	`ouçut_s‹ãd
(&
p‹ts
, &
˘x
->
ouçut
);

1735 
	`svec_de°roy
(&
p‹ts
);

1736 
	}
}

1739 
	$add_p‹t
(
vs˘l_c⁄ãxt
 *
˘x
,

1740 c⁄° *
br_«me
, c⁄° *
p‹t_«me
,

1741 
boﬁ
 
may_exi°
, boﬁ 
Áke_iÁ˚
,

1742 *
iÁ˚_«mes
[], 
n_iÁ˚s
,

1743 *
£âögs
[], 
n_£âögs
)

1745 
vs˘l_p‹t
 *vsctl_port;

1746 
vs˘l_bridge
 *
bridge
;

1747 
ov§ec_öãrÁ˚
 **
iÁ˚s
;

1748 
ov§ec_p‹t
 *
p‹t
;

1749 
size_t
 
i
;

1751 
	`vs˘l_c⁄ãxt_p›uœã_ˇche
(
˘x
);

1752 i‡(
may_exi°
) {

1753 
vs˘l_p‹t
 *vsctl_port;

1755 
vs˘l_p‹t
 = 
	`föd_p‹t
(
˘x
, 
p‹t_«me
, 
Ál£
);

1756 i‡(
vs˘l_p‹t
) {

1757 
svec
 
w™t_«mes
, 
have_«mes
;

1759 
	`svec_öô
(&
w™t_«mes
);

1760 
i
 = 0; i < 
n_iÁ˚s
; i++) {

1761 
	`svec_add
(&
w™t_«mes
, 
iÁ˚_«mes
[
i
]);

1763 
	`svec_s‹t
(&
w™t_«mes
);

1765 
	`svec_öô
(&
have_«mes
);

1766 
i
 = 0; i < 
vs˘l_p‹t
->
p‹t_cfg
->
n_öãrÁ˚s
; i++) {

1767 
	`svec_add
(&
have_«mes
,

1768 
vs˘l_p‹t
->
p‹t_cfg
->
öãrÁ˚s
[
i
]->
«me
);

1770 
	`svec_s‹t
(&
have_«mes
);

1772 i‡(
	`°rcmp
(
vs˘l_p‹t
->
bridge
->
«me
, 
br_«me
)) {

1773 *
comm™d
 = 
	`vs˘l_c⁄ãxt_to_°rög
(
˘x
);

1774 
	`vs˘l_Áèl
("\"%s\" but %s isáctuallyáttachedÅo bridge %s",

1775 
comm™d
, 
p‹t_«me
, 
vs˘l_p‹t
->
bridge
->
«me
);

1778 i‡(!
	`svec_equÆ
(&
w™t_«mes
, &
have_«mes
)) {

1779 *
have_«mes_°rög
 = 
	`svec_joö
(&
have_«mes
, ", ", "");

1780 *
comm™d
 = 
	`vs˘l_c⁄ãxt_to_°rög
(
˘x
);

1782 
	`vs˘l_Áèl
("\"%s\" but %sáctually has interface(s) %s",

1783 
comm™d
, 
p‹t_«me
, 
have_«mes_°rög
);

1786 
	`svec_de°roy
(&
w™t_«mes
);

1787 
	`svec_de°roy
(&
have_«mes
);

1792 
	`check_c⁄Êi˘s
(
˘x
, 
p‹t_«me
,

1793 
	`xa•rötf
("ˇ¬Ÿ cª©ê®p‹à«med %s", 
p‹t_«me
));

1794 
i
 = 0; i < 
n_iÁ˚s
; i++) {

1795 
	`check_c⁄Êi˘s
(
˘x
, 
iÁ˚_«mes
[
i
],

1796 
	`xa•rötf
("cannot createán interfaceÇamed %s",

1797 
iÁ˚_«mes
[
i
]));

1799 
bridge
 = 
	`föd_bridge
(
˘x
, 
br_«me
, 
åue
);

1801 
iÁ˚s
 = 
	`xmÆloc
(
n_iÁ˚s
 *  *ifaces);

1802 
i
 = 0; i < 
n_iÁ˚s
; i++) {

1803 
iÁ˚s
[
i
] = 
	`ov§ec_öãrÁ˚_ö£π
(
˘x
->
txn
);

1804 
	`ov§ec_öãrÁ˚_£t_«me
(
iÁ˚s
[
i
], 
iÁ˚_«mes
[i]);

1807 
p‹t
 = 
	`ov§ec_p‹t_ö£π
(
˘x
->
txn
);

1808 
	`ov§ec_p‹t_£t_«me
(
p‹t
, 
p‹t_«me
);

1809 
	`ov§ec_p‹t_£t_öãrÁ˚s
(
p‹t
, 
iÁ˚s
, 
n_iÁ˚s
);

1810 
	`ov§ec_p‹t_£t_b⁄d_Áke_iÁ˚
(
p‹t
, 
Áke_iÁ˚
);

1812 i‡(
bridge
->
∑ª¡
) {

1813 
öt64_t
 
èg
 = 
bridge
->
vœn
;

1814 
	`ov§ec_p‹t_£t_èg
(
p‹t
, &
èg
, 1);

1817 
i
 = 0; i < 
n_£âögs
; i++) {

1818 
	`£t_cﬁumn
(
	`gë_èbÀ
("P‹t"), &
p‹t
->
hódî_
, 
£âögs
[
i
],

1819 
˘x
->
symèb
);

1822 
	`bridge_ö£π_p‹t
((
bridge
->
∑ª¡
 ? bridge->∑ª¡->
br_cfg


1823 : 
bridge
->
br_cfg
), 
p‹t
);

1825 
vs˘l_p‹t
 = 
	`add_p‹t_to_ˇche
(
˘x
, 
bridge
, 
p‹t
);

1826 
i
 = 0; i < 
n_iÁ˚s
; i++) {

1827 
	`add_iÁ˚_to_ˇche
(
˘x
, 
vs˘l_p‹t
, 
iÁ˚s
[
i
]);

1829 
	`‰ì
(
iÁ˚s
);

1830 
	}
}

1833 
	$cmd_add_p‹t
(
vs˘l_c⁄ãxt
 *
˘x
)

1835 
boﬁ
 
may_exi°
 = 
	`shash_föd
(&
˘x
->
›ti⁄s
, "--may-exi°"Ë!
NULL
;

1837 
	`add_p‹t
(
˘x
, ctx->
¨gv
[1], ctx->¨gv[2], 
may_exi°
, 
Ál£
,

1838 &
˘x
->
¨gv
[2], 1, &˘x->¨gv[3], ctx->
¨gc
 - 3);

1839 
	}
}

1842 
	$cmd_add_b⁄d
(
vs˘l_c⁄ãxt
 *
˘x
)

1844 
boﬁ
 
may_exi°
 = 
	`shash_föd
(&
˘x
->
›ti⁄s
, "--may-exi°"Ë!
NULL
;

1845 
boﬁ
 
Áke_iÁ˚
 = 
	`shash_föd
(&
˘x
->
›ti⁄s
, "--fake-iface");

1846 
n_iÁ˚s
;

1847 
i
;

1849 
n_iÁ˚s
 = 
˘x
->
¨gc
 - 3;

1850 
i
 = 3; i < 
˘x
->
¨gc
; i++) {

1851 i‡(
	`°rchr
(
˘x
->
¨gv
[
i
], '=')) {

1852 
n_iÁ˚s
 = 
i
 - 3;

1856 i‡(
n_iÁ˚s
 < 2) {

1857 
	`vs˘l_Áèl
("add-bondÑequiresátÜeast 2 interfaces, but only "

1858 "%d wîê•ecifõd", 
n_iÁ˚s
);

1861 
	`add_p‹t
(
˘x
, ctx->
¨gv
[1], ctx->¨gv[2], 
may_exi°
, 
Áke_iÁ˚
,

1862 &
˘x
->
¨gv
[3], 
n_iÁ˚s
,

1863 &
˘x
->
¨gv
[
n_iÁ˚s
 + 3], ctx->
¨gc
 - 3 -Ç_ifaces);

1864 
	}
}

1867 
	$cmd_dñ_p‹t
(
vs˘l_c⁄ãxt
 *
˘x
)

1869 
boﬁ
 
mu°_exi°
 = !
	`shash_föd
(&
˘x
->
›ti⁄s
, "--if-exists");

1870 
boﬁ
 
wôh_iÁ˚
 = 
	`shash_föd
(&
˘x
->
›ti⁄s
, "--wôh-iÁ˚"Ë!
NULL
;

1871 
vs˘l_p‹t
 *
p‹t
;

1873 
	`vs˘l_c⁄ãxt_p›uœã_ˇche
(
˘x
);

1874 i‡(!
wôh_iÁ˚
) {

1875 
p‹t
 = 
	`föd_p‹t
(
˘x
, ctx->
¨gv
[˘x->
¨gc
 - 1], 
mu°_exi°
);

1877 c⁄° *
èrgë
 = 
˘x
->
¨gv
[˘x->
¨gc
 - 1];

1878 
vs˘l_iÁ˚
 *
iÁ˚
;

1880 
p‹t
 = 
	`föd_p‹t
(
˘x
, 
èrgë
, 
Ál£
);

1881 i‡(!
p‹t
) {

1882 
iÁ˚
 = 
	`föd_iÁ˚
(
˘x
, 
èrgë
, 
Ál£
);

1883 i‡(
iÁ˚
) {

1884 
p‹t
 = 
iÁ˚
->port;

1887 i‡(
mu°_exi°
 && !
p‹t
) {

1888 
	`vs˘l_Áèl
("nÿp‹à‹ i¡îÁ˚Çamed %s", 
èrgë
);

1892 i‡(
p‹t
) {

1893 i‡(
˘x
->
¨gc
 == 3) {

1894 
vs˘l_bridge
 *
bridge
;

1896 
bridge
 = 
	`föd_bridge
(
˘x
, ctx->
¨gv
[1], 
åue
);

1897 i‡(
p‹t
->
bridge
 != bridge) {

1898 i‡(
p‹t
->
bridge
->
∑ª¡
 == bridge) {

1899 
	`vs˘l_Áèl
("bridge %s doesÇot haveáÖort %s (although "

1901 
˘x
->
¨gv
[1], ctx->argv[2],

1902 
bridge
->
∑ª¡
->
«me
);

1904 
	`vs˘l_Áèl
("bridge %s doesÇot haveáÖort %s",

1905 
˘x
->
¨gv
[1], ctx->argv[2]);

1910 
	`dñ_p‹t
(
˘x
, 
p‹t
);

1912 
	}
}

1915 
	$cmd_p‹t_to_br
(
vs˘l_c⁄ãxt
 *
˘x
)

1917 
vs˘l_p‹t
 *
p‹t
;

1919 
	`vs˘l_c⁄ãxt_p›uœã_ˇche
(
˘x
);

1921 
p‹t
 = 
	`föd_p‹t
(
˘x
, ctx->
¨gv
[1], 
åue
);

1922 
	`ds_put_f‹m©
(&
˘x
->
ouçut
, "%s\n", 
p‹t
->
bridge
->
«me
);

1923 
	}
}

1926 
	$cmd_br_to_vœn
(
vs˘l_c⁄ãxt
 *
˘x
)

1928 
vs˘l_bridge
 *
bridge
;

1930 
	`vs˘l_c⁄ãxt_p›uœã_ˇche
(
˘x
);

1932 
bridge
 = 
	`föd_bridge
(
˘x
, ctx->
¨gv
[1], 
åue
);

1933 
	`ds_put_f‹m©
(&
˘x
->
ouçut
, "%d\n", 
bridge
->
vœn
);

1934 
	}
}

1937 
	$cmd_br_to_∑ª¡
(
vs˘l_c⁄ãxt
 *
˘x
)

1939 
vs˘l_bridge
 *
bridge
;

1941 
	`vs˘l_c⁄ãxt_p›uœã_ˇche
(
˘x
);

1943 
bridge
 = 
	`föd_bridge
(
˘x
, ctx->
¨gv
[1], 
åue
);

1944 i‡(
bridge
->
∑ª¡
) {

1945 
bridge
 = bridge->
∑ª¡
;

1947 
	`ds_put_f‹m©
(&
˘x
->
ouçut
, "%s\n", 
bridge
->
«me
);

1948 
	}
}

1951 
	$cmd_li°_iÁ˚s
(
vs˘l_c⁄ãxt
 *
˘x
)

1953 
vs˘l_bridge
 *
br
;

1954 
vs˘l_p‹t
 *
p‹t
;

1955 
svec
 
iÁ˚s
;

1957 
	`vs˘l_c⁄ãxt_p›uœã_ˇche
(
˘x
);

1959 
br
 = 
	`föd_bridge
(
˘x
, ctx->
¨gv
[1], 
åue
);

1960 
	`vîify_p‹ts
(
˘x
);

1962 
	`svec_öô
(&
iÁ˚s
);

1963 
	`LIST_FOR_EACH
 (
p‹t
, 
p‹ts_node
, &
br
->
p‹ts
) {

1964 
vs˘l_iÁ˚
 *
iÁ˚
;

1966 
	`LIST_FOR_EACH
 (
iÁ˚
, 
iÁ˚s_node
, &
p‹t
->
iÁ˚s
) {

1967 i‡(
	`°rcmp
(
iÁ˚
->
iÁ˚_cfg
->
«me
, 
br
->name)) {

1968 
	`svec_add
(&
iÁ˚s
, 
iÁ˚
->
iÁ˚_cfg
->
«me
);

1972 
	`ouçut_s‹ãd
(&
iÁ˚s
, &
˘x
->
ouçut
);

1973 
	`svec_de°roy
(&
iÁ˚s
);

1974 
	}
}

1977 
	$cmd_iÁ˚_to_br
(
vs˘l_c⁄ãxt
 *
˘x
)

1979 
vs˘l_iÁ˚
 *
iÁ˚
;

1981 
	`vs˘l_c⁄ãxt_p›uœã_ˇche
(
˘x
);

1983 
iÁ˚
 = 
	`föd_iÁ˚
(
˘x
, ctx->
¨gv
[1], 
åue
);

1984 
	`ds_put_f‹m©
(&
˘x
->
ouçut
, "%s\n", 
iÁ˚
->
p‹t
->
bridge
->
«me
);

1985 
	}
}

1988 
	$vîify_c⁄åﬁÀrs
(
ov§ec_bridge
 *
bridge
)

1990 
size_t
 
i
;

1992 
	`ov§ec_bridge_vîify_c⁄åﬁÀr
(
bridge
);

1993 
i
 = 0; i < 
bridge
->
n_c⁄åﬁÀr
; i++) {

1994 
	`ov§ec_c⁄åﬁÀr_vîify_èrgë
(
bridge
->
c⁄åﬁÀr
[
i
]);

1996 
	}
}

1999 
	$¥e_c⁄åﬁÀr
(
vs˘l_c⁄ãxt
 *
˘x
)

2001 
	`¥e_gë_öfo
(
˘x
);

2003 
	`ovsdb_idl_add_cﬁumn
(
˘x
->
idl
, &
ov§ec_c⁄åﬁÀr_cﬁ_èrgë
);

2004 
	}
}

2007 
	$cmd_gë_c⁄åﬁÀr
(
vs˘l_c⁄ãxt
 *
˘x
)

2009 
vs˘l_bridge
 *
br
;

2010 
svec
 
èrgës
;

2011 
size_t
 
i
;

2013 
	`vs˘l_c⁄ãxt_p›uœã_ˇche
(
˘x
);

2015 
br
 = 
	`föd_bridge
(
˘x
, ctx->
¨gv
[1], 
åue
);

2016 i‡(
br
->
∑ª¡
) {

2017 
br
 = br->
∑ª¡
;

2019 
	`vîify_c⁄åﬁÀrs
(
br
->
br_cfg
);

2022 
	`svec_öô
(&
èrgës
);

2023 
i
 = 0; i < 
br
->
br_cfg
->
n_c⁄åﬁÀr
; i++) {

2024 
	`svec_add
(&
èrgës
, 
br
->
br_cfg
->
c⁄åﬁÀr
[
i
]->
èrgë
);

2027 
	`svec_s‹t
(&
èrgës
);

2028 
i
 = 0; i < 
èrgës
.
n
; i++) {

2029 
	`ds_put_f‹m©
(&
˘x
->
ouçut
, "%s\n", 
èrgës
.
«mes
[
i
]);

2031 
	`svec_de°roy
(&
èrgës
);

2032 
	}
}

2035 
	$dñëe_c⁄åﬁÀrs
(
ov§ec_c⁄åﬁÀr
 **
c⁄åﬁÀrs
,

2036 
size_t
 
n_c⁄åﬁÀrs
)

2038 
size_t
 
i
;

2040 
i
 = 0; i < 
n_c⁄åﬁÀrs
; i++) {

2041 
	`ov§ec_c⁄åﬁÀr_dñëe
(
c⁄åﬁÀrs
[
i
]);

2043 
	}
}

2046 
	$cmd_dñ_c⁄åﬁÀr
(
vs˘l_c⁄ãxt
 *
˘x
)

2048 
ov§ec_bridge
 *
br
;

2050 
	`vs˘l_c⁄ãxt_p›uœã_ˇche
(
˘x
);

2052 
br
 = 
	`föd_ªÆ_bridge
(
˘x
, ctx->
¨gv
[1], 
åue
)->
br_cfg
;

2053 
	`vîify_c⁄åﬁÀrs
(
br
);

2055 i‡(
br
->
c⁄åﬁÀr
) {

2056 
	`dñëe_c⁄åﬁÀrs
(
br
->
c⁄åﬁÀr
, br->
n_c⁄åﬁÀr
);

2057 
	`ov§ec_bridge_£t_c⁄åﬁÀr
(
br
, 
NULL
, 0);

2059 
	}
}

2061 
ov§ec_c⁄åﬁÀr
 **

2062 
	$ö£π_c⁄åﬁÀrs
(
ovsdb_idl_txn
 *
txn
, *
èrgës
[], 
size_t
 
n
)

2064 
ov§ec_c⁄åﬁÀr
 **
c⁄åﬁÀrs
;

2065 
size_t
 
i
;

2067 
c⁄åﬁÀrs
 = 
	`xmÆloc
(
n
 *  *controllers);

2068 
i
 = 0; i < 
n
; i++) {

2069 i‡(
	`vc⁄n_vîify_«me
(
èrgës
[
i
]Ë&& 
	`pvc⁄n_vîify_«me
(targets[i])) {

2070 
	`VLOG_WARN
("èrgëÅy≥ \"%s\" i†possiblyÉº⁄eous", 
èrgës
[
i
]);

2072 
c⁄åﬁÀrs
[
i
] = 
	`ov§ec_c⁄åﬁÀr_ö£π
(
txn
);

2073 
	`ov§ec_c⁄åﬁÀr_£t_èrgë
(
c⁄åﬁÀrs
[
i
], 
èrgës
[i]);

2076  
c⁄åﬁÀrs
;

2077 
	}
}

2080 
	$cmd_£t_c⁄åﬁÀr
(
vs˘l_c⁄ãxt
 *
˘x
)

2082 
ov§ec_c⁄åﬁÀr
 **
c⁄åﬁÀrs
;

2083 
ov§ec_bridge
 *
br
;

2084 
size_t
 
n
;

2086 
	`vs˘l_c⁄ãxt_p›uœã_ˇche
(
˘x
);

2088 
br
 = 
	`föd_ªÆ_bridge
(
˘x
, ctx->
¨gv
[1], 
åue
)->
br_cfg
;

2089 
	`vîify_c⁄åﬁÀrs
(
br
);

2091 
	`dñëe_c⁄åﬁÀrs
(
br
->
c⁄åﬁÀr
, br->
n_c⁄åﬁÀr
);

2093 
n
 = 
˘x
->
¨gc
 - 2;

2094 
c⁄åﬁÀrs
 = 
	`ö£π_c⁄åﬁÀrs
(
˘x
->
txn
, &˘x->
¨gv
[2], 
n
);

2095 
	`ov§ec_bridge_£t_c⁄åﬁÀr
(
br
, 
c⁄åﬁÀrs
, 
n
);

2096 
	`‰ì
(
c⁄åﬁÀrs
);

2097 
	}
}

2100 
	$cmd_gë_Áû_mode
(
vs˘l_c⁄ãxt
 *
˘x
)

2102 
vs˘l_bridge
 *
br
;

2103 c⁄° *
Áû_mode
;

2105 
	`vs˘l_c⁄ãxt_p›uœã_ˇche
(
˘x
);

2106 
br
 = 
	`föd_bridge
(
˘x
, ctx->
¨gv
[1], 
åue
);

2108 i‡(
br
->
∑ª¡
) {

2109 
br
 = br->
∑ª¡
;

2111 
	`ov§ec_bridge_vîify_Áû_mode
(
br
->
br_cfg
);

2113 
Áû_mode
 = 
br
->
br_cfg
->fail_mode;

2114 i‡(
Áû_mode
 && 
	`°æí
(fail_mode)) {

2115 
	`ds_put_f‹m©
(&
˘x
->
ouçut
, "%s\n", 
Áû_mode
);

2117 
	}
}

2120 
	$cmd_dñ_Áû_mode
(
vs˘l_c⁄ãxt
 *
˘x
)

2122 
vs˘l_bridge
 *
br
;

2124 
	`vs˘l_c⁄ãxt_p›uœã_ˇche
(
˘x
);

2126 
br
 = 
	`föd_ªÆ_bridge
(
˘x
, ctx->
¨gv
[1], 
åue
);

2128 
	`ov§ec_bridge_£t_Áû_mode
(
br
->
br_cfg
, 
NULL
);

2129 
	}
}

2132 
	$cmd_£t_Áû_mode
(
vs˘l_c⁄ãxt
 *
˘x
)

2134 
vs˘l_bridge
 *
br
;

2135 c⁄° *
Áû_mode
 = 
˘x
->
¨gv
[2];

2137 
	`vs˘l_c⁄ãxt_p›uœã_ˇche
(
˘x
);

2139 
br
 = 
	`föd_ªÆ_bridge
(
˘x
, ctx->
¨gv
[1], 
åue
);

2141 i‡(
	`°rcmp
(
Áû_mode
, "standalone") && strcmp(fail_mode, "secure")) {

2142 
	`vs˘l_Áèl
("fail-mode must be \"standalone\" or \"secure\"");

2145 
	`ov§ec_bridge_£t_Áû_mode
(
br
->
br_cfg
, 
Áû_mode
);

2146 
	}
}

2149 
	$vîify_m™agîs
(c⁄° 
ov§ec_›í_vswôch
 *
ovs
)

2151 
size_t
 
i
;

2153 
	`ov§ec_›í_vswôch_vîify_m™agî_›ti⁄s
(
ovs
);

2155 
i
 = 0; i < 
ovs
->
n_m™agî_›ti⁄s
; ++i) {

2156 c⁄° 
ov§ec_m™agî
 *
mgr
 = 
ovs
->
m™agî_›ti⁄s
[
i
];

2158 
	`ov§ec_m™agî_vîify_èrgë
(
mgr
);

2160 
	}
}

2163 
	$¥e_m™agî
(
vs˘l_c⁄ãxt
 *
˘x
)

2165 
	`ovsdb_idl_add_cﬁumn
(
˘x
->
idl
, &
ov§ec_›í_vswôch_cﬁ_m™agî_›ti⁄s
);

2166 
	`ovsdb_idl_add_cﬁumn
(
˘x
->
idl
, &
ov§ec_m™agî_cﬁ_èrgë
);

2167 
	}
}

2170 
	$cmd_gë_m™agî
(
vs˘l_c⁄ãxt
 *
˘x
)

2172 c⁄° 
ov§ec_›í_vswôch
 *
ovs
 = 
˘x
->ovs;

2173 
svec
 
èrgës
;

2174 
size_t
 
i
;

2176 
	`vîify_m™agîs
(
ovs
);

2179 
	`svec_öô
(&
èrgës
);

2181 
i
 = 0; i < 
ovs
->
n_m™agî_›ti⁄s
; i++) {

2182 
	`svec_add
(&
èrgës
, 
ovs
->
m™agî_›ti⁄s
[
i
]->
èrgë
);

2185 
	`svec_s‹t_unique
(&
èrgës
);

2186 
i
 = 0; i < 
èrgës
.
n
; i++) {

2187 
	`ds_put_f‹m©
(&
˘x
->
ouçut
, "%s\n", 
èrgës
.
«mes
[
i
]);

2189 
	`svec_de°roy
(&
èrgës
);

2190 
	}
}

2193 
	$dñëe_m™agîs
(c⁄° 
vs˘l_c⁄ãxt
 *
˘x
)

2195 c⁄° 
ov§ec_›í_vswôch
 *
ovs
 = 
˘x
->ovs;

2196 
size_t
 
i
;

2199 
i
 = 0; i < 
ovs
->
n_m™agî_›ti⁄s
; i++) {

2200 
	`ov§ec_m™agî_dñëe
(
ovs
->
m™agî_›ti⁄s
[
i
]);

2204 
	`ov§ec_›í_vswôch_£t_m™agî_›ti⁄s
(
ovs
, 
NULL
, 0);

2205 
	}
}

2208 
	$cmd_dñ_m™agî
(
vs˘l_c⁄ãxt
 *
˘x
)

2210 c⁄° 
ov§ec_›í_vswôch
 *
ovs
 = 
˘x
->ovs;

2212 
	`vîify_m™agîs
(
ovs
);

2213 
	`dñëe_m™agîs
(
˘x
);

2214 
	}
}

2217 
	$ö£π_m™agîs
(
vs˘l_c⁄ãxt
 *
˘x
, *
èrgës
[], 
size_t
 
n
)

2219 
ov§ec_m™agî
 **
m™agîs
;

2220 
size_t
 
i
;

2223 
m™agîs
 = 
	`xmÆloc
(
n
 *  *managers);

2224 
i
 = 0; i < 
n
; i++) {

2225 i‡(
	`°ªam_vîify_«me
(
èrgës
[
i
]Ë&& 
	`p°ªam_vîify_«me
(targets[i])) {

2226 
	`VLOG_WARN
("èrgëÅy≥ \"%s\" i†possiblyÉº⁄eous", 
èrgës
[
i
]);

2228 
m™agîs
[
i
] = 
	`ov§ec_m™agî_ö£π
(
˘x
->
txn
);

2229 
	`ov§ec_m™agî_£t_èrgë
(
m™agîs
[
i
], 
èrgës
[i]);

2233 
	`ov§ec_›í_vswôch_£t_m™agî_›ti⁄s
(
˘x
->
ovs
, 
m™agîs
, 
n
);

2234 
	`‰ì
(
m™agîs
);

2235 
	}
}

2238 
	$cmd_£t_m™agî
(
vs˘l_c⁄ãxt
 *
˘x
)

2240 c⁄° 
size_t
 
n
 = 
˘x
->
¨gc
 - 1;

2242 
	`vîify_m™agîs
(
˘x
->
ovs
);

2243 
	`dñëe_m™agîs
(
˘x
);

2244 
	`ö£π_m™agîs
(
˘x
, &˘x->
¨gv
[1], 
n
);

2245 
	}
}

2248 
	$¥e_cmd_gë_s¶
(
vs˘l_c⁄ãxt
 *
˘x
)

2250 
	`ovsdb_idl_add_cﬁumn
(
˘x
->
idl
, &
ov§ec_›í_vswôch_cﬁ_s¶
);

2252 
	`ovsdb_idl_add_cﬁumn
(
˘x
->
idl
, &
ov§ec_s¶_cﬁ_¥iv©e_key
);

2253 
	`ovsdb_idl_add_cﬁumn
(
˘x
->
idl
, &
ov§ec_s¶_cﬁ_˚πifiˇã
);

2254 
	`ovsdb_idl_add_cﬁumn
(
˘x
->
idl
, &
ov§ec_s¶_cﬁ_ˇ_˚π
);

2255 
	`ovsdb_idl_add_cﬁumn
(
˘x
->
idl
, &
ov§ec_s¶_cﬁ_boŸ°øp_ˇ_˚π
);

2256 
	}
}

2259 
	$cmd_gë_s¶
(
vs˘l_c⁄ãxt
 *
˘x
)

2261 
ov§ec_s¶
 *
s¶
 = 
˘x
->
ovs
->ssl;

2263 
	`ov§ec_›í_vswôch_vîify_s¶
(
˘x
->
ovs
);

2264 i‡(
s¶
) {

2265 
	`ov§ec_s¶_vîify_¥iv©e_key
(
s¶
);

2266 
	`ov§ec_s¶_vîify_˚πifiˇã
(
s¶
);

2267 
	`ov§ec_s¶_vîify_ˇ_˚π
(
s¶
);

2268 
	`ov§ec_s¶_vîify_boŸ°øp_ˇ_˚π
(
s¶
);

2270 
	`ds_put_f‹m©
(&
˘x
->
ouçut
, "Priv©êkey: %s\n", 
s¶
->
¥iv©e_key
);

2271 
	`ds_put_f‹m©
(&
˘x
->
ouçut
, "Cîtifiˇã: %s\n", 
s¶
->
˚πifiˇã
);

2272 
	`ds_put_f‹m©
(&
˘x
->
ouçut
, "CA Cîtifiˇã: %s\n", 
s¶
->
ˇ_˚π
);

2273 
	`ds_put_f‹m©
(&
˘x
->
ouçut
, "Bootstrap: %s\n",

2274 
s¶
->
boŸ°øp_ˇ_˚π
 ? "true" : "false");

2276 
	}
}

2279 
	$¥e_cmd_dñ_s¶
(
vs˘l_c⁄ãxt
 *
˘x
)

2281 
	`ovsdb_idl_add_cﬁumn
(
˘x
->
idl
, &
ov§ec_›í_vswôch_cﬁ_s¶
);

2282 
	}
}

2285 
	$cmd_dñ_s¶
(
vs˘l_c⁄ãxt
 *
˘x
)

2287 
ov§ec_s¶
 *
s¶
 = 
˘x
->
ovs
->ssl;

2289 i‡(
s¶
) {

2290 
	`ov§ec_›í_vswôch_vîify_s¶
(
˘x
->
ovs
);

2291 
	`ov§ec_s¶_dñëe
(
s¶
);

2292 
	`ov§ec_›í_vswôch_£t_s¶
(
˘x
->
ovs
, 
NULL
);

2294 
	}
}

2297 
	$¥e_cmd_£t_s¶
(
vs˘l_c⁄ãxt
 *
˘x
)

2299 
	`ovsdb_idl_add_cﬁumn
(
˘x
->
idl
, &
ov§ec_›í_vswôch_cﬁ_s¶
);

2300 
	}
}

2303 
	$cmd_£t_s¶
(
vs˘l_c⁄ãxt
 *
˘x
)

2305 
boﬁ
 
boŸ°øp
 = 
	`shash_föd
(&
˘x
->
›ti⁄s
, "--bootstrap");

2306 
ov§ec_s¶
 *
s¶
 = 
˘x
->
ovs
->ssl;

2308 
	`ov§ec_›í_vswôch_vîify_s¶
(
˘x
->
ovs
);

2309 i‡(
s¶
) {

2310 
	`ov§ec_s¶_dñëe
(
s¶
);

2312 
s¶
 = 
	`ov§ec_s¶_ö£π
(
˘x
->
txn
);

2314 
	`ov§ec_s¶_£t_¥iv©e_key
(
s¶
, 
˘x
->
¨gv
[1]);

2315 
	`ov§ec_s¶_£t_˚πifiˇã
(
s¶
, 
˘x
->
¨gv
[2]);

2316 
	`ov§ec_s¶_£t_ˇ_˚π
(
s¶
, 
˘x
->
¨gv
[3]);

2318 
	`ov§ec_s¶_£t_boŸ°øp_ˇ_˚π
(
s¶
, 
boŸ°øp
);

2320 
	`ov§ec_›í_vswôch_£t_s¶
(
˘x
->
ovs
, 
s¶
);

2321 
	}
}

2325 
	svs˘l_row_id
 {

2326 c⁄° 
ovsdb_idl_èbÀ_˛ass
 *
	mèbÀ
;

2327 c⁄° 
ovsdb_idl_cﬁumn
 *
	m«me_cﬁumn
;

2328 c⁄° 
ovsdb_idl_cﬁumn
 *
	muuid_cﬁumn
;

2331 
	svs˘l_èbÀ_˛ass
 {

2332 
ovsdb_idl_èbÀ_˛ass
 *
	m˛ass
;

2333 
vs˘l_row_id
 
	mrow_ids
[2];

2336 c⁄° 
vs˘l_èbÀ_˛ass
 
	gèbÀs
[] = {

2337 {&
ov§ec_èbÀ_bridge
,

2338 {{&
ov§ec_èbÀ_bridge
, &
ov§ec_bridge_cﬁ_«me
, 
NULL
},

2339 {
NULL
, NULL, NULL}}},

2341 {&
ov§ec_èbÀ_c⁄åﬁÀr
,

2342 {{&
ov§ec_èbÀ_bridge
,

2343 &
ov§ec_bridge_cﬁ_«me
,

2344 &
ov§ec_bridge_cﬁ_c⁄åﬁÀr
}}},

2346 {&
ov§ec_èbÀ_öãrÁ˚
,

2347 {{&
ov§ec_èbÀ_öãrÁ˚
, &
ov§ec_öãrÁ˚_cﬁ_«me
, 
NULL
},

2348 {
NULL
, NULL, NULL}}},

2350 {&
ov§ec_èbÀ_múr‹
,

2351 {{&
ov§ec_èbÀ_múr‹
, &
ov§ec_múr‹_cﬁ_«me
, 
NULL
},

2352 {
NULL
, NULL, NULL}}},

2354 {&
ov§ec_èbÀ_m™agî
,

2355 {{&
ov§ec_èbÀ_m™agî
, &
ov§ec_m™agî_cﬁ_èrgë
, 
NULL
},

2356 {
NULL
, NULL, NULL}}},

2358 {&
ov§ec_èbÀ_√tÊow
,

2359 {{&
ov§ec_èbÀ_bridge
,

2360 &
ov§ec_bridge_cﬁ_«me
,

2361 &
ov§ec_bridge_cﬁ_√tÊow
},

2362 {
NULL
, NULL, NULL}}},

2364 {&
ov§ec_èbÀ_›í_vswôch
,

2365 {{&
ov§ec_èbÀ_›í_vswôch
, 
NULL
, NULL},

2366 {
NULL
, NULL, NULL}}},

2368 {&
ov§ec_èbÀ_p‹t
,

2369 {{&
ov§ec_èbÀ_p‹t
, &
ov§ec_p‹t_cﬁ_«me
, 
NULL
},

2370 {
NULL
, NULL, NULL}}},

2372 {&
ov§ec_èbÀ_qos
,

2373 {{&
ov§ec_èbÀ_p‹t
, &
ov§ec_p‹t_cﬁ_«me
, &
ov§ec_p‹t_cﬁ_qos
},

2374 {
NULL
, NULL, NULL}}},

2376 {&
ov§ec_èbÀ_queue
,

2377 {{
NULL
, NULL, NULL},

2378 {
NULL
, NULL, NULL}}},

2380 {&
ov§ec_èbÀ_s¶
,

2381 {{&
ov§ec_èbÀ_›í_vswôch
, 
NULL
, &
ov§ec_›í_vswôch_cﬁ_s¶
}}},

2383 {&
ov§ec_èbÀ_sÊow
,

2384 {{&
ov§ec_èbÀ_bridge
,

2385 &
ov§ec_bridge_cﬁ_«me
,

2386 &
ov§ec_bridge_cﬁ_sÊow
},

2387 {
NULL
, NULL, NULL}}},

2389 {&
ov§ec_èbÀ_Êow_èbÀ
,

2390 {{&
ov§ec_èbÀ_Êow_èbÀ
, &
ov§ec_Êow_èbÀ_cﬁ_«me
, 
NULL
},

2391 {
NULL
, NULL, NULL}}},

2393 {
NULL
, {{NULL, NULL, NULL}, {NULL, NULL, NULL}}}

2397 
	$dõ_if_îr‹
(*
îr‹
)

2399 i‡(
îr‹
) {

2400 
	`vs˘l_Áèl
("%s", 
îr‹
);

2402 
	}
}

2405 
	$to_lowî_™d_undîsc‹es
(
c
)

2407  
c
 ='-' ? '_' : 
	`tﬁowî
(c);

2408 
	}
}

2411 
	$sc‹e_∑πül_m©ch
(c⁄° *
«me
, c⁄° *
s
)

2413 
sc‹e
;

2415 i‡(!
	`°rcmp
(
«me
, 
s
)) {

2416  
UINT_MAX
;

2418 
sc‹e
 = 0; ; sc‹e++, 
«me
++, 
s
++) {

2419 i‡(
	`to_lowî_™d_undîsc‹es
(*
«me
Ë!to_lowî_™d_undîsc‹es(*
s
)) {

2421 } i‡(*
«me
 == '\0') {

2422  
UINT_MAX
 - 1;

2425  *
s
 ='\0' ? 
sc‹e
 : 0;

2426 
	}
}

2428 c⁄° 
vs˘l_èbÀ_˛ass
 *

2429 
	$gë_èbÀ
(c⁄° *
èbÀ_«me
)

2431 c⁄° 
vs˘l_èbÀ_˛ass
 *
èbÀ
;

2432 c⁄° 
vs˘l_èbÀ_˛ass
 *
be°_m©ch
 = 
NULL
;

2433 
be°_sc‹e
 = 0;

2435 
èbÀ
 = 
èbÀs
;ÅabÀ->
˛ass
;Åable++) {

2436 
sc‹e
 = 
	`sc‹e_∑πül_m©ch
(
èbÀ
->
˛ass
->
«me
,

2437 
èbÀ_«me
);

2438 i‡(
sc‹e
 > 
be°_sc‹e
) {

2439 
be°_m©ch
 = 
èbÀ
;

2440 
be°_sc‹e
 = 
sc‹e
;

2441 } i‡(
sc‹e
 =
be°_sc‹e
) {

2442 
be°_m©ch
 = 
NULL
;

2445 i‡(
be°_m©ch
) {

2446  
be°_m©ch
;

2447 } i‡(
be°_sc‹e
) {

2448 
	`vs˘l_Áèl
("mu…ùÀÅabÀÇame†m©ch \"%s\"", 
èbÀ_«me
);

2450 
	`vs˘l_Áèl
("unknow¿èbÀ \"%s\"", 
èbÀ_«me
);

2452 
	}
}

2454 c⁄° 
vs˘l_èbÀ_˛ass
 *

2455 
	$¥e_gë_èbÀ
(
vs˘l_c⁄ãxt
 *
˘x
, c⁄° *
èbÀ_«me
)

2457 c⁄° 
vs˘l_èbÀ_˛ass
 *
èbÀ_˛ass
;

2458 
i
;

2460 
èbÀ_˛ass
 = 
	`gë_èbÀ
(
èbÀ_«me
);

2461 
	`ovsdb_idl_add_èbÀ
(
˘x
->
idl
, 
èbÀ_˛ass
->
˛ass
);

2463 
i
 = 0; i < 
	`ARRAY_SIZE
(
èbÀ_˛ass
->
row_ids
); i++) {

2464 c⁄° 
vs˘l_row_id
 *
id
 = &
èbÀ_˛ass
->
row_ids
[
i
];

2465 i‡(
id
->
èbÀ
) {

2466 
	`ovsdb_idl_add_èbÀ
(
˘x
->
idl
, 
id
->
èbÀ
);

2468 i‡(
id
->
«me_cﬁumn
) {

2469 
	`ovsdb_idl_add_cﬁumn
(
˘x
->
idl
, 
id
->
«me_cﬁumn
);

2471 i‡(
id
->
uuid_cﬁumn
) {

2472 
	`ovsdb_idl_add_cﬁumn
(
˘x
->
idl
, 
id
->
uuid_cﬁumn
);

2476  
èbÀ_˛ass
;

2477 
	}
}

2479 c⁄° 
ovsdb_idl_row
 *

2480 
	$gë_row_by_id
(
vs˘l_c⁄ãxt
 *
˘x
, c⁄° 
vs˘l_èbÀ_˛ass
 *
èbÀ
,

2481 c⁄° 
vs˘l_row_id
 *
id
, c⁄° *
ªc‹d_id
)

2483 c⁄° 
ovsdb_idl_row
 *
ª„ºî
, *
föÆ
;

2485 i‡(!
id
->
èbÀ
) {

2486  
NULL
;

2489 i‡(!
id
->
«me_cﬁumn
) {

2490 i‡(
	`°rcmp
(
ªc‹d_id
, ".")) {

2491  
NULL
;

2493 
ª„ºî
 = 
	`ovsdb_idl_fú°_row
(
˘x
->
idl
, 
id
->
èbÀ
);

2494 i‡(!
ª„ºî
 || 
	`ovsdb_idl_√xt_row
(referrer)) {

2495  
NULL
;

2498 c⁄° 
ovsdb_idl_row
 *
row
;

2500 
ª„ºî
 = 
NULL
;

2501 
row
 = 
	`ovsdb_idl_fú°_row
(
˘x
->
idl
, 
id
->
èbÀ
);

2502 
row
 !
NULL
;

2503 
row
 = 
	`ovsdb_idl_√xt_row
(row))

2505 c⁄° 
ovsdb_d©um
 *
«me
;

2507 
«me
 = 
	`ovsdb_idl_gë
(
row
, 
id
->
«me_cﬁumn
,

2508 
OVSDB_TYPE_STRING
, 
OVSDB_TYPE_VOID
);

2509 i‡(
«me
->
n
 =1 && !
	`°rcmp
“ame->
keys
[0].
°rög
, 
ªc‹d_id
)) {

2510 i‡(
ª„ºî
) {

2511 
	`vs˘l_Áèl
("multipleÑows in %s match \"%s\"",

2512 
èbÀ
->
˛ass
->
«me
, 
ªc‹d_id
);

2514 
ª„ºî
 = 
row
;

2518 i‡(!
ª„ºî
) {

2519  
NULL
;

2522 
föÆ
 = 
NULL
;

2523 i‡(
id
->
uuid_cﬁumn
) {

2524 c⁄° 
ovsdb_d©um
 *
uuid
;

2526 
	`ovsdb_idl_txn_vîify
(
ª„ºî
, 
id
->
uuid_cﬁumn
);

2527 
uuid
 = 
	`ovsdb_idl_gë
(
ª„ºî
, 
id
->
uuid_cﬁumn
,

2528 
OVSDB_TYPE_UUID
, 
OVSDB_TYPE_VOID
);

2529 i‡(
uuid
->
n
 == 1) {

2530 
föÆ
 = 
	`ovsdb_idl_gë_row_f‹_uuid
(
˘x
->
idl
, 
èbÀ
->
˛ass
,

2531 &
uuid
->
keys
[0].uuid);

2534 
föÆ
 = 
ª„ºî
;

2537  
föÆ
;

2538 
	}
}

2540 c⁄° 
ovsdb_idl_row
 *

2541 
	$gë_row
 (
vs˘l_c⁄ãxt
 *
˘x
,

2542 c⁄° 
vs˘l_èbÀ_˛ass
 *
èbÀ
, c⁄° *
ªc‹d_id
)

2544 c⁄° 
ovsdb_idl_row
 *
row
;

2545 
uuid
 uuid;

2547 i‡(
	`uuid_‰om_°rög
(&
uuid
, 
ªc‹d_id
)) {

2548 
row
 = 
	`ovsdb_idl_gë_row_f‹_uuid
(
˘x
->
idl
, 
èbÀ
->
˛ass
, &
uuid
);

2550 
i
;

2552 
i
 = 0; i < 
	`ARRAY_SIZE
(
èbÀ
->
row_ids
); i++) {

2553 
row
 = 
	`gë_row_by_id
(
˘x
, 
èbÀ
, &èbÀ->
row_ids
[
i
], 
ªc‹d_id
);

2554 i‡(
row
) {

2559  
row
;

2560 
	}
}

2562 c⁄° 
ovsdb_idl_row
 *

2563 
	$mu°_gë_row
(
vs˘l_c⁄ãxt
 *
˘x
,

2564 c⁄° 
vs˘l_èbÀ_˛ass
 *
èbÀ
, c⁄° *
ªc‹d_id
)

2566 c⁄° 
ovsdb_idl_row
 *
row
 = 
	`gë_row
(
˘x
, 
èbÀ
, 
ªc‹d_id
);

2567 i‡(!
row
) {

2568 
	`vs˘l_Áèl
("noÑow \"%s\" inÅable %s",

2569 
ªc‹d_id
, 
èbÀ
->
˛ass
->
«me
);

2571  
row
;

2572 
	}
}

2575 
	$gë_cﬁumn
(c⁄° 
vs˘l_èbÀ_˛ass
 *
èbÀ
, c⁄° *
cﬁumn_«me
,

2576 c⁄° 
ovsdb_idl_cﬁumn
 **
cﬁum≈
)

2578 c⁄° 
ovsdb_idl_cﬁumn
 *
be°_m©ch
 = 
NULL
;

2579 
be°_sc‹e
 = 0;

2580 
size_t
 
i
;

2582 
i
 = 0; i < 
èbÀ
->
˛ass
->
n_cﬁumns
; i++) {

2583 c⁄° 
ovsdb_idl_cﬁumn
 *
cﬁumn
 = &
èbÀ
->
˛ass
->
cﬁumns
[
i
];

2584 
sc‹e
 = 
	`sc‹e_∑πül_m©ch
(
cﬁumn
->
«me
, 
cﬁumn_«me
);

2585 i‡(
sc‹e
 > 
be°_sc‹e
) {

2586 
be°_m©ch
 = 
cﬁumn
;

2587 
be°_sc‹e
 = 
sc‹e
;

2588 } i‡(
sc‹e
 =
be°_sc‹e
) {

2589 
be°_m©ch
 = 
NULL
;

2593 *
cﬁum≈
 = 
be°_m©ch
;

2594 i‡(
be°_m©ch
) {

2595  
NULL
;

2596 } i‡(
be°_sc‹e
) {

2597  
	`xa•rötf
("%s contains moreÅhan one column whoseÇame "

2598 "m©che†\"%s\"", 
èbÀ
->
˛ass
->
«me
, 
cﬁumn_«me
);

2600  
	`xa•rötf
("%s doesÇot containá column whoseÇame matches "

2601 "\"%s\"", 
èbÀ
->
˛ass
->
«me
, 
cﬁumn_«me
);

2603 
	}
}

2605 
ovsdb_symbﬁ
 *

2606 
	$¸óã_symbﬁ
(
ovsdb_symbﬁ_èbÀ
 *
symèb
, c⁄° *
id
, 
boﬁ
 *
√wp
)

2608 
ovsdb_symbﬁ
 *
symbﬁ
;

2610 i‡(
id
[0] != '@') {

2611 
	`vs˘l_Áèl
("row id \"%s\" d€†nŸ begö wôh \"@\"", 
id
);

2614 i‡(
√wp
) {

2615 *
√wp
 = 
	`ovsdb_symbﬁ_èbÀ_gë
(
symèb
, 
id
Ë=
NULL
;

2618 
symbﬁ
 = 
	`ovsdb_symbﬁ_èbÀ_ö£π
(
symèb
, 
id
);

2619 i‡(
symbﬁ
->
¸óãd
) {

2620 
	`vs˘l_Áèl
("row id \"%s\" may only be specified on one --id option",

2621 
id
);

2623 
symbﬁ
->
¸óãd
 = 
åue
;

2624  
symbﬁ
;

2625 
	}
}

2628 
	$¥e_gë_cﬁumn
(
vs˘l_c⁄ãxt
 *
˘x
,

2629 c⁄° 
vs˘l_èbÀ_˛ass
 *
èbÀ
, c⁄° *
cﬁumn_«me
,

2630 c⁄° 
ovsdb_idl_cﬁumn
 **
cﬁum≈
)

2632 
	`dõ_if_îr‹
(
	`gë_cﬁumn
(
èbÀ
, 
cﬁumn_«me
, 
cﬁum≈
));

2633 
	`ovsdb_idl_add_cﬁumn
(
˘x
->
idl
, *
cﬁum≈
);

2634 
	}
}

2637 
	$missög_›î©‹_îr‹
(c⁄° *
¨g
, c⁄° **
Ælowed_›î©‹s
,

2638 
size_t
 
n_Ælowed
)

2640 
ds
 
s
;

2642 
	`ds_öô
(&
s
);

2643 
	`ds_put_f‹m©
(&
s
, "%s:árgumíàd€†nŸÉnd i¿", 
¨g
);

2644 
	`ds_put_f‹m©
(&
s
, "\"%s\"", 
Ælowed_›î©‹s
[0]);

2645 i‡(
n_Ælowed
 == 2) {

2646 
	`ds_put_f‹m©
(&
s
, " o∏\"%s\"", 
Ælowed_›î©‹s
[1]);

2647 } i‡(
n_Ælowed
 > 2) {

2648 
size_t
 
i
;

2650 
i
 = 1; i < 
n_Ælowed
 - 1; i++) {

2651 
	`ds_put_f‹m©
(&
s
, ", \"%s\"", 
Ælowed_›î©‹s
[
i
]);

2653 
	`ds_put_f‹m©
(&
s
, ", o∏\"%s\"", 
Ælowed_›î©‹s
[
i
]);

2655 
	`ds_put_f‹m©
(&
s
, " followed byá value.");

2657  
	`ds_°ól_c°r
(&
s
);

2658 
	}
}

2678 * 
WARN_UNUSED_RESULT


2679 
	$∑r£_cﬁumn_key_vÆue
(c⁄° *
¨g
,

2680 c⁄° 
vs˘l_èbÀ_˛ass
 *
èbÀ
,

2681 c⁄° 
ovsdb_idl_cﬁumn
 **
cﬁum≈
, **
keyp
,

2682 *
›î©‹p
,

2683 c⁄° **
Ælowed_›î©‹s
, 
size_t
 
n_Ælowed
,

2684 **
vÆuï
)

2686 c⁄° *
p
 = 
¨g
;

2687 *
cﬁumn_«me
;

2688 *
îr‹
;

2690 
	`as£π
(!(
›î©‹p
 && !
vÆuï
));

2691 *
keyp
 = 
NULL
;

2692 i‡(
vÆuï
) {

2693 *
vÆuï
 = 
NULL
;

2697 
îr‹
 = 
	`ovsdb_tokí_∑r£
(&
p
, &
cﬁumn_«me
);

2698 i‡(
îr‹
) {

2699 
îr‹
;

2701 i‡(
cﬁumn_«me
[0] == '\0') {

2702 
	`‰ì
(
cﬁumn_«me
);

2703 
îr‹
 = 
	`xa•rötf
("%s: missög cﬁum¿«me", 
¨g
);

2704 
îr‹
;

2706 
îr‹
 = 
	`gë_cﬁumn
(
èbÀ
, 
cﬁumn_«me
, 
cﬁum≈
);

2707 
	`‰ì
(
cﬁumn_«me
);

2708 i‡(
îr‹
) {

2709 
îr‹
;

2713 i‡(*
p
 == ':') {

2714 
p
++;

2715 
îr‹
 = 
	`ovsdb_tokí_∑r£
(&
p
, 
keyp
);

2716 i‡(
îr‹
) {

2717 
îr‹
;

2722 i‡(
vÆuï
) {

2723 
size_t
 
be°_Àn
;

2724 
size_t
 
i
;

2725 
be°
;

2727 i‡(!
Ælowed_›î©‹s
) {

2728 c⁄° *
equÆs
 = "=";

2729 
Ælowed_›î©‹s
 = &
equÆs
;

2730 
n_Ælowed
 = 1;

2733 
be°
 = -1;

2734 
be°_Àn
 = 0;

2735 
i
 = 0; i < 
n_Ælowed
; i++) {

2736 c⁄° *
›
 = 
Ælowed_›î©‹s
[
i
];

2737 
size_t
 
›_Àn
 = 
	`°æí
(
›
);

2739 i‡(
›_Àn
 > 
be°_Àn
 && !
	`°∫cmp
(
›
, 
p
, op_len) &&Ö[op_len]) {

2740 
be°_Àn
 = 
›_Àn
;

2741 
be°
 = 
i
;

2744 i‡(
be°
 < 0) {

2745 
îr‹
 = 
	`missög_›î©‹_îr‹
(
¨g
, 
Ælowed_›î©‹s
, 
n_Ælowed
);

2746 
îr‹
;

2749 i‡(
›î©‹p
) {

2750 *
›î©‹p
 = 
be°
;

2752 *
vÆuï
 = 
	`x°rdup
(
p
 + 
be°_Àn
);

2754 i‡(*
p
 != '\0') {

2755 
îr‹
 = 
	`xa•rötf
("%s:Årailing garbage \"%s\" inárgument",

2756 
¨g
, 
p
);

2757 
îr‹
;

2760  
NULL
;

2762 
îr‹
:

2763 *
cﬁum≈
 = 
NULL
;

2764 
	`‰ì
(*
keyp
);

2765 *
keyp
 = 
NULL
;

2766 i‡(
vÆuï
) {

2767 
	`‰ì
(*
vÆuï
);

2768 *
vÆuï
 = 
NULL
;

2769 i‡(
›î©‹p
) {

2770 *
›î©‹p
 = -1;

2773  
îr‹
;

2774 
	}
}

2776 c⁄° 
ovsdb_idl_cﬁumn
 *

2777 
	$¥e_∑r£_cﬁumn_key_vÆue
(
vs˘l_c⁄ãxt
 *
˘x
,

2778 c⁄° *
¨g
,

2779 c⁄° 
vs˘l_èbÀ_˛ass
 *
èbÀ
)

2781 c⁄° 
ovsdb_idl_cﬁumn
 *
cﬁumn
;

2782 c⁄° *
p
;

2783 *
cﬁumn_«me
;

2785 
p
 = 
¨g
;

2786 
	`dõ_if_îr‹
(
	`ovsdb_tokí_∑r£
(&
p
, &
cﬁumn_«me
));

2787 i‡(
cﬁumn_«me
[0] == '\0') {

2788 
	`vs˘l_Áèl
("%s: missög cﬁum¿«me", 
¨g
);

2791 
	`¥e_gë_cﬁumn
(
˘x
, 
èbÀ
, 
cﬁumn_«me
, &
cﬁumn
);

2792 
	`‰ì
(
cﬁumn_«me
);

2794  
cﬁumn
;

2795 
	}
}

2798 
	$check_muèbÀ
(c⁄° 
vs˘l_èbÀ_˛ass
 *
èbÀ
,

2799 c⁄° 
ovsdb_idl_cﬁumn
 *
cﬁumn
)

2801 i‡(!
cﬁumn
->
muèbÀ
) {

2802 
	`vs˘l_Áèl
("cannot modifyÑead-only column %s inÅable %s",

2803 
cﬁumn
->
«me
, 
èbÀ
->
˛ass
->name);

2805 
	}
}

2808 
	$¥e_cmd_gë
(
vs˘l_c⁄ãxt
 *
˘x
)

2810 c⁄° *
id
 = 
	`shash_föd_d©a
(&
˘x
->
›ti⁄s
, "--id");

2811 c⁄° *
èbÀ_«me
 = 
˘x
->
¨gv
[1];

2812 c⁄° 
vs˘l_èbÀ_˛ass
 *
èbÀ
;

2813 
i
;

2819 i‡(!
id
 && 
˘x
->
¨gc
 <3 && 
	`ißây
(
STDOUT_FILENO
)) {

2820 
	`VLOG_WARN
("\"get\" command withoutÑowárguments or \"--id\" is "

2824 
èbÀ
 = 
	`¥e_gë_èbÀ
(
˘x
, 
èbÀ_«me
);

2825 
i
 = 3; i < 
˘x
->
¨gc
; i++) {

2826 i‡(!
	`°rˇ£cmp
(
˘x
->
¨gv
[
i
], "_uuid")

2827 || !
	`°rˇ£cmp
(
˘x
->
¨gv
[
i
], "-uuid")) {

2831 
	`¥e_∑r£_cﬁumn_key_vÆue
(
˘x
, ctx->
¨gv
[
i
], 
èbÀ
);

2833 
	}
}

2836 
	$cmd_gë
(
vs˘l_c⁄ãxt
 *
˘x
)

2838 c⁄° *
id
 = 
	`shash_föd_d©a
(&
˘x
->
›ti⁄s
, "--id");

2839 
boﬁ
 
if_exi°s
 = 
	`shash_föd
(&
˘x
->
›ti⁄s
, "--if-exists");

2840 c⁄° *
èbÀ_«me
 = 
˘x
->
¨gv
[1];

2841 c⁄° *
ªc‹d_id
 = 
˘x
->
¨gv
[2];

2842 c⁄° 
vs˘l_èbÀ_˛ass
 *
èbÀ
;

2843 c⁄° 
ovsdb_idl_row
 *
row
;

2844 
ds
 *
out
 = &
˘x
->
ouçut
;

2845 
i
;

2847 
èbÀ
 = 
	`gë_èbÀ
(
èbÀ_«me
);

2848 
row
 = 
	`mu°_gë_row
(
˘x
, 
èbÀ
, 
ªc‹d_id
);

2849 i‡(
id
) {

2850 
ovsdb_symbﬁ
 *
symbﬁ
;

2851 
boﬁ
 
√w
;

2853 
symbﬁ
 = 
	`¸óã_symbﬁ
(
˘x
->
symèb
, 
id
, &
√w
);

2854 i‡(!
√w
) {

2855 
	`vs˘l_Áèl
("row id \"%s\" specified on \"get\" command was used "

2856 "bef‹êô wa†deföed", 
id
);

2858 
symbﬁ
->
uuid
 = 
row
->uuid;

2862 
symbﬁ
->
°r⁄g_ªf
 = 
åue
;

2864 
i
 = 3; i < 
˘x
->
¨gc
; i++) {

2865 c⁄° 
ovsdb_idl_cﬁumn
 *
cﬁumn
;

2866 c⁄° 
ovsdb_d©um
 *
d©um
;

2867 *
key_°rög
;

2872 i‡(!
	`°rˇ£cmp
(
˘x
->
¨gv
[
i
], "_uuid")

2873 || !
	`°rˇ£cmp
(
˘x
->
¨gv
[
i
], "-uuid")) {

2874 
	`ds_put_f‹m©
(
out
, 
UUID_FMT
"\n", 
	`UUID_ARGS
(&
row
->
uuid
));

2878 
	`dõ_if_îr‹
(
	`∑r£_cﬁumn_key_vÆue
(
˘x
->
¨gv
[
i
], 
èbÀ
,

2879 &
cﬁumn
, &
key_°rög
,

2880 
NULL
, NULL, 0, NULL));

2882 
	`ovsdb_idl_txn_vîify
(
row
, 
cﬁumn
);

2883 
d©um
 = 
	`ovsdb_idl_ªad
(
row
, 
cﬁumn
);

2884 i‡(
key_°rög
) {

2885 
ovsdb_©om
 
key
;

2886 
idx
;

2888 i‡(
cﬁumn
->
ty≥
.
vÆue
.ty≥ =
OVSDB_TYPE_VOID
) {

2889 
	`vs˘l_Áèl
("cannot specify keyÅo get forÇon-map column %s",

2890 
cﬁumn
->
«me
);

2893 
	`dõ_if_îr‹
(
	`ovsdb_©om_‰om_°rög
(&
key
,

2894 &
cﬁumn
->
ty≥
.
key
,

2895 
key_°rög
, 
˘x
->
symèb
));

2897 
idx
 = 
	`ovsdb_d©um_föd_key
(
d©um
, &
key
,

2898 
cﬁumn
->
ty≥
.
key
.type);

2899 i‡(
idx
 =
UINT_MAX
) {

2900 i‡(!
if_exi°s
) {

2901 
	`vs˘l_Áèl
("no key \"%s\" in %sÑecord \"%s\" column %s",

2902 
key_°rög
, 
èbÀ
->
˛ass
->
«me
, 
ªc‹d_id
,

2903 
cﬁumn
->
«me
);

2906 
	`ovsdb_©om_to_°rög
(&
d©um
->
vÆues
[
idx
],

2907 
cﬁumn
->
ty≥
.
vÆue
.ty≥, 
out
);

2909 
	`ovsdb_©om_de°roy
(&
key
, 
cﬁumn
->
ty≥
.key.type);

2911 
	`ovsdb_d©um_to_°rög
(
d©um
, &
cﬁumn
->
ty≥
, 
out
);

2913 
	`ds_put_ch¨
(
out
, '\n');

2915 
	`‰ì
(
key_°rög
);

2917 
	}
}

2920 
	$∑r£_cﬁumn_«mes
(c⁄° *
cﬁumn_«mes
,

2921 c⁄° 
vs˘l_èbÀ_˛ass
 *
èbÀ
,

2922 c⁄° 
ovsdb_idl_cﬁumn
 ***
cﬁumn•
,

2923 
size_t
 *
n_cﬁumn•
)

2925 c⁄° 
ovsdb_idl_cﬁumn
 **
cﬁumns
;

2926 
size_t
 
n_cﬁumns
;

2928 i‡(!
cﬁumn_«mes
) {

2929 
size_t
 
i
;

2931 
n_cﬁumns
 = 
èbÀ
->
˛ass
->n_columns + 1;

2932 
cﬁumns
 = 
	`xmÆloc
(
n_cﬁumns
 *  *columns);

2933 
cﬁumns
[0] = 
NULL
;

2934 
i
 = 0; i < 
èbÀ
->
˛ass
->
n_cﬁumns
; i++) {

2935 
cﬁumns
[
i
 + 1] = &
èbÀ
->
˛ass
->columns[i];

2938 *
s
 = 
	`x°rdup
(
cﬁumn_«mes
);

2939 
size_t
 
Æloˇãd_cﬁumns
;

2940 *
ßve_±r
 = 
NULL
;

2941 *
cﬁumn_«me
;

2943 
cﬁumns
 = 
NULL
;

2944 
Æloˇãd_cﬁumns
 = 
n_cﬁumns
 = 0;

2945 
cﬁumn_«me
 = 
	`°πok_r
(
s
, ", ", &
ßve_±r
); column_name;

2946 
cﬁumn_«me
 = 
	`°πok_r
(
NULL
, ", ", &
ßve_±r
)) {

2947 c⁄° 
ovsdb_idl_cﬁumn
 *
cﬁumn
;

2949 i‡(!
	`°rˇ£cmp
(
cﬁumn_«me
, "_uuid")) {

2950 
cﬁumn
 = 
NULL
;

2952 
	`dõ_if_îr‹
(
	`gë_cﬁumn
(
èbÀ
, 
cﬁumn_«me
, &
cﬁumn
));

2954 i‡(
n_cﬁumns
 >
Æloˇãd_cﬁumns
) {

2955 
cﬁumns
 = 
	`x2ƒóŒoc
(cﬁumns, &
Æloˇãd_cﬁumns
,

2956  *
cﬁumns
);

2958 
cﬁumns
[
n_cﬁumns
++] = 
cﬁumn
;

2960 
	`‰ì
(
s
);

2962 i‡(!
n_cﬁumns
) {

2963 
	`vs˘l_Áèl
("must specifyátÜeast one columnÇame");

2966 *
cﬁumn•
 = 
cﬁumns
;

2967 *
n_cﬁumn•
 = 
n_cﬁumns
;

2968 
	}
}

2972 
	$¥e_li°_cﬁumns
(
vs˘l_c⁄ãxt
 *
˘x
,

2973 c⁄° 
vs˘l_èbÀ_˛ass
 *
èbÀ
,

2974 c⁄° *
cﬁumn_«mes
)

2976 c⁄° 
ovsdb_idl_cﬁumn
 **
cﬁumns
;

2977 
size_t
 
n_cﬁumns
;

2978 
size_t
 
i
;

2980 
	`∑r£_cﬁumn_«mes
(
cﬁumn_«mes
, 
èbÀ
, &
cﬁumns
, &
n_cﬁumns
);

2981 
i
 = 0; i < 
n_cﬁumns
; i++) {

2982 i‡(
cﬁumns
[
i
]) {

2983 
	`ovsdb_idl_add_cﬁumn
(
˘x
->
idl
, 
cﬁumns
[
i
]);

2986 
	`‰ì
(
cﬁumns
);

2987 
	}
}

2990 
	$¥e_cmd_li°
(
vs˘l_c⁄ãxt
 *
˘x
)

2992 c⁄° *
cﬁumn_«mes
 = 
	`shash_föd_d©a
(&
˘x
->
›ti⁄s
, "--columns");

2993 c⁄° *
èbÀ_«me
 = 
˘x
->
¨gv
[1];

2994 c⁄° 
vs˘l_èbÀ_˛ass
 *
èbÀ
;

2996 
èbÀ
 = 
	`¥e_gë_èbÀ
(
˘x
, 
èbÀ_«me
);

2997 
	`¥e_li°_cﬁumns
(
˘x
, 
èbÀ
, 
cﬁumn_«mes
);

2998 
	}
}

3000 
èbÀ
 *

3001 
	$li°_make_èbÀ
(c⁄° 
ovsdb_idl_cﬁumn
 **
cﬁumns
, 
size_t
 
n_cﬁumns
)

3003 
èbÀ
 *
out
;

3004 
size_t
 
i
;

3006 
out
 = 
	`xmÆloc
( *out);

3007 
	`èbÀ_öô
(
out
);

3009 
i
 = 0; i < 
n_cﬁumns
; i++) {

3010 c⁄° 
ovsdb_idl_cﬁumn
 *
cﬁumn
 = 
cﬁumns
[
i
];

3011 c⁄° *
cﬁumn_«me
 = 
cﬁumn
 ? cﬁumn->
«me
 : "_uuid";

3013 
	`èbÀ_add_cﬁumn
(
out
, "%s", 
cﬁumn_«me
);

3016  
out
;

3017 
	}
}

3020 
	$li°_ªc‹d
(c⁄° 
ovsdb_idl_row
 *
row
,

3021 c⁄° 
ovsdb_idl_cﬁumn
 **
cﬁumns
, 
size_t
 
n_cﬁumns
,

3022 
èbÀ
 *
out
)

3024 
size_t
 
i
;

3026 
	`èbÀ_add_row
(
out
);

3027 
i
 = 0; i < 
n_cﬁumns
; i++) {

3028 c⁄° 
ovsdb_idl_cﬁumn
 *
cﬁumn
 = 
cﬁumns
[
i
];

3029 
˚Œ
 *˚Œ = 
	`èbÀ_add_˚Œ
(
out
);

3031 i‡(!
cﬁumn
) {

3032 
ovsdb_d©um
 
d©um
;

3033 
ovsdb_©om
 
©om
;

3035 
©om
.
uuid
 = 
row
->uuid;

3037 
d©um
.
keys
 = &
©om
;

3038 
d©um
.
vÆues
 = 
NULL
;

3039 
d©um
.
n
 = 1;

3041 
˚Œ
->
js⁄
 = 
	`ovsdb_d©um_to_js⁄
(&
d©um
, &
ovsdb_ty≥_uuid
);

3042 
˚Œ
->
ty≥
 = &
ovsdb_ty≥_uuid
;

3044 c⁄° 
ovsdb_d©um
 *
d©um
 = 
	`ovsdb_idl_ªad
(
row
, 
cﬁumn
);

3046 
˚Œ
->
js⁄
 = 
	`ovsdb_d©um_to_js⁄
(
d©um
, &
cﬁumn
->
ty≥
);

3047 
˚Œ
->
ty≥
 = &
cﬁumn
->type;

3050 
	}
}

3053 
	$cmd_li°
(
vs˘l_c⁄ãxt
 *
˘x
)

3055 c⁄° *
cﬁumn_«mes
 = 
	`shash_föd_d©a
(&
˘x
->
›ti⁄s
, "--columns");

3056 c⁄° 
ovsdb_idl_cﬁumn
 **
cﬁumns
;

3057 c⁄° *
èbÀ_«me
 = 
˘x
->
¨gv
[1];

3058 c⁄° 
vs˘l_èbÀ_˛ass
 *
èbÀ
;

3059 
èbÀ
 *
out
;

3060 
size_t
 
n_cﬁumns
;

3061 
i
;

3063 
èbÀ
 = 
	`gë_èbÀ
(
èbÀ_«me
);

3064 
	`∑r£_cﬁumn_«mes
(
cﬁumn_«mes
, 
èbÀ
, &
cﬁumns
, &
n_cﬁumns
);

3065 
out
 = 
˘x
->
èbÀ
 = 
	`li°_make_èbÀ
(
cﬁumns
, 
n_cﬁumns
);

3066 i‡(
˘x
->
¨gc
 > 2) {

3067 
i
 = 2; i < 
˘x
->
¨gc
; i++) {

3068 
	`li°_ªc‹d
(
	`mu°_gë_row
(
˘x
, 
èbÀ
, ctx->
¨gv
[
i
]),

3069 
cﬁumns
, 
n_cﬁumns
, 
out
);

3072 c⁄° 
ovsdb_idl_row
 *
row
;

3074 
row
 = 
	`ovsdb_idl_fú°_row
(
˘x
->
idl
, 
èbÀ
->
˛ass
);Ñow !
NULL
;

3075 
row
 = 
	`ovsdb_idl_√xt_row
(row)) {

3076 
	`li°_ªc‹d
(
row
, 
cﬁumns
, 
n_cﬁumns
, 
out
);

3079 
	`‰ì
(
cﬁumns
);

3080 
	}
}

3083 
	$¥e_cmd_föd
(
vs˘l_c⁄ãxt
 *
˘x
)

3085 c⁄° *
cﬁumn_«mes
 = 
	`shash_föd_d©a
(&
˘x
->
›ti⁄s
, "--columns");

3086 c⁄° *
èbÀ_«me
 = 
˘x
->
¨gv
[1];

3087 c⁄° 
vs˘l_èbÀ_˛ass
 *
èbÀ
;

3088 
i
;

3090 
èbÀ
 = 
	`¥e_gë_èbÀ
(
˘x
, 
èbÀ_«me
);

3091 
	`¥e_li°_cﬁumns
(
˘x
, 
èbÀ
, 
cﬁumn_«mes
);

3092 
i
 = 2; i < 
˘x
->
¨gc
; i++) {

3093 
	`¥e_∑r£_cﬁumn_key_vÆue
(
˘x
, ctx->
¨gv
[
i
], 
èbÀ
);

3095 
	}
}

3098 
	$cmd_föd
(
vs˘l_c⁄ãxt
 *
˘x
)

3100 c⁄° *
cﬁumn_«mes
 = 
	`shash_föd_d©a
(&
˘x
->
›ti⁄s
, "--columns");

3101 c⁄° 
ovsdb_idl_cﬁumn
 **
cﬁumns
;

3102 c⁄° *
èbÀ_«me
 = 
˘x
->
¨gv
[1];

3103 c⁄° 
vs˘l_èbÀ_˛ass
 *
èbÀ
;

3104 c⁄° 
ovsdb_idl_row
 *
row
;

3105 
èbÀ
 *
out
;

3106 
size_t
 
n_cﬁumns
;

3108 
èbÀ
 = 
	`gë_èbÀ
(
èbÀ_«me
);

3109 
	`∑r£_cﬁumn_«mes
(
cﬁumn_«mes
, 
èbÀ
, &
cﬁumns
, &
n_cﬁumns
);

3110 
out
 = 
˘x
->
èbÀ
 = 
	`li°_make_èbÀ
(
cﬁumns
, 
n_cﬁumns
);

3111 
row
 = 
	`ovsdb_idl_fú°_row
(
˘x
->
idl
, 
èbÀ
->
˛ass
);Ñow;

3112 
row
 = 
	`ovsdb_idl_√xt_row
(row)) {

3113 
i
;

3115 
i
 = 2; i < 
˘x
->
¨gc
; i++) {

3116 i‡(!
	`is_c⁄dôi⁄_ßtisfõd
(
èbÀ
, 
row
, 
˘x
->
¨gv
[
i
],

3117 
˘x
->
symèb
)) {

3118 
√xt_row
;

3121 
	`li°_ªc‹d
(
row
, 
cﬁumns
, 
n_cﬁumns
, 
out
);

3123 
√xt_row
: ;

3125 
	`‰ì
(
cﬁumns
);

3126 
	}
}

3129 
	$¥e_cmd_£t
(
vs˘l_c⁄ãxt
 *
˘x
)

3131 c⁄° *
èbÀ_«me
 = 
˘x
->
¨gv
[1];

3132 c⁄° 
vs˘l_èbÀ_˛ass
 *
èbÀ
;

3133 
i
;

3135 
èbÀ
 = 
	`¥e_gë_èbÀ
(
˘x
, 
èbÀ_«me
);

3136 
i
 = 3; i < 
˘x
->
¨gc
; i++) {

3137 c⁄° 
ovsdb_idl_cﬁumn
 *
cﬁumn
;

3139 
cﬁumn
 = 
	`¥e_∑r£_cﬁumn_key_vÆue
(
˘x
, ctx->
¨gv
[
i
], 
èbÀ
);

3140 
	`check_muèbÀ
(
èbÀ
, 
cﬁumn
);

3142 
	}
}

3145 
	$£t_cﬁumn
(c⁄° 
vs˘l_èbÀ_˛ass
 *
èbÀ
,

3146 c⁄° 
ovsdb_idl_row
 *
row
, c⁄° *
¨g
,

3147 
ovsdb_symbﬁ_èbÀ
 *
symèb
)

3149 c⁄° 
ovsdb_idl_cﬁumn
 *
cﬁumn
;

3150 *
key_°rög
, *
vÆue_°rög
;

3151 *
îr‹
;

3153 
îr‹
 = 
	`∑r£_cﬁumn_key_vÆue
(
¨g
, 
èbÀ
, &
cﬁumn
, &
key_°rög
,

3154 
NULL
, NULL, 0, &
vÆue_°rög
);

3155 
	`dõ_if_îr‹
(
îr‹
);

3156 i‡(!
vÆue_°rög
) {

3157 
	`vs˘l_Áèl
("%s: missög vÆue", 
¨g
);

3160 i‡(
key_°rög
) {

3161 
ovsdb_©om
 
key
, 
vÆue
;

3162 
ovsdb_d©um
 
d©um
;

3164 i‡(
cﬁumn
->
ty≥
.
vÆue
.ty≥ =
OVSDB_TYPE_VOID
) {

3165 
	`vs˘l_Áèl
("cannot specify keyÅo set forÇon-map column %s",

3166 
cﬁumn
->
«me
);

3169 
	`dõ_if_îr‹
(
	`ovsdb_©om_‰om_°rög
(&
key
, &
cﬁumn
->
ty≥
.key,

3170 
key_°rög
, 
symèb
));

3171 
	`dõ_if_îr‹
(
	`ovsdb_©om_‰om_°rög
(&
vÆue
, &
cﬁumn
->
ty≥
.value,

3172 
vÆue_°rög
, 
symèb
));

3174 
	`ovsdb_d©um_öô_em±y
(&
d©um
);

3175 
	`ovsdb_d©um_add_unß„
(&
d©um
, &
key
, &
vÆue
, &
cﬁumn
->
ty≥
);

3177 
	`ovsdb_©om_de°roy
(&
key
, 
cﬁumn
->
ty≥
.key.type);

3178 
	`ovsdb_©om_de°roy
(&
vÆue
, 
cﬁumn
->
ty≥
.value.type);

3180 
	`ovsdb_d©um_uni⁄
(&
d©um
, 
	`ovsdb_idl_ªad
(
row
, 
cﬁumn
),

3181 &
cﬁumn
->
ty≥
, 
Ál£
);

3182 
	`ovsdb_idl_txn_wrôe
(
row
, 
cﬁumn
, &
d©um
);

3184 
ovsdb_d©um
 
d©um
;

3186 
	`dõ_if_îr‹
(
	`ovsdb_d©um_‰om_°rög
(&
d©um
, &
cﬁumn
->
ty≥
,

3187 
vÆue_°rög
, 
symèb
));

3188 
	`ovsdb_idl_txn_wrôe
(
row
, 
cﬁumn
, &
d©um
);

3191 
	`‰ì
(
key_°rög
);

3192 
	`‰ì
(
vÆue_°rög
);

3193 
	}
}

3196 
	$cmd_£t
(
vs˘l_c⁄ãxt
 *
˘x
)

3198 c⁄° *
èbÀ_«me
 = 
˘x
->
¨gv
[1];

3199 c⁄° *
ªc‹d_id
 = 
˘x
->
¨gv
[2];

3200 c⁄° 
vs˘l_èbÀ_˛ass
 *
èbÀ
;

3201 c⁄° 
ovsdb_idl_row
 *
row
;

3202 
i
;

3204 
èbÀ
 = 
	`gë_èbÀ
(
èbÀ_«me
);

3205 
row
 = 
	`mu°_gë_row
(
˘x
, 
èbÀ
, 
ªc‹d_id
);

3206 
i
 = 3; i < 
˘x
->
¨gc
; i++) {

3207 
	`£t_cﬁumn
(
èbÀ
, 
row
, 
˘x
->
¨gv
[
i
], ctx->
symèb
);

3210 
	`vs˘l_c⁄ãxt_övÆid©e_ˇche
(
˘x
);

3211 
	}
}

3214 
	$¥e_cmd_add
(
vs˘l_c⁄ãxt
 *
˘x
)

3216 c⁄° *
èbÀ_«me
 = 
˘x
->
¨gv
[1];

3217 c⁄° *
cﬁumn_«me
 = 
˘x
->
¨gv
[3];

3218 c⁄° 
vs˘l_èbÀ_˛ass
 *
èbÀ
;

3219 c⁄° 
ovsdb_idl_cﬁumn
 *
cﬁumn
;

3221 
èbÀ
 = 
	`¥e_gë_èbÀ
(
˘x
, 
èbÀ_«me
);

3222 
	`¥e_gë_cﬁumn
(
˘x
, 
èbÀ
, 
cﬁumn_«me
, &
cﬁumn
);

3223 
	`check_muèbÀ
(
èbÀ
, 
cﬁumn
);

3224 
	}
}

3227 
	$cmd_add
(
vs˘l_c⁄ãxt
 *
˘x
)

3229 c⁄° *
èbÀ_«me
 = 
˘x
->
¨gv
[1];

3230 c⁄° *
ªc‹d_id
 = 
˘x
->
¨gv
[2];

3231 c⁄° *
cﬁumn_«me
 = 
˘x
->
¨gv
[3];

3232 c⁄° 
vs˘l_èbÀ_˛ass
 *
èbÀ
;

3233 c⁄° 
ovsdb_idl_cﬁumn
 *
cﬁumn
;

3234 c⁄° 
ovsdb_idl_row
 *
row
;

3235 c⁄° 
ovsdb_ty≥
 *
ty≥
;

3236 
ovsdb_d©um
 
ﬁd
;

3237 
i
;

3239 
èbÀ
 = 
	`gë_èbÀ
(
èbÀ_«me
);

3240 
row
 = 
	`mu°_gë_row
(
˘x
, 
èbÀ
, 
ªc‹d_id
);

3241 
	`dõ_if_îr‹
(
	`gë_cﬁumn
(
èbÀ
, 
cﬁumn_«me
, &
cﬁumn
));

3243 
ty≥
 = &
cﬁumn
->type;

3244 
	`ovsdb_d©um_˛⁄e
(&
ﬁd
, 
	`ovsdb_idl_ªad
(
row
, 
cﬁumn
), &cﬁumn->
ty≥
);

3245 
i
 = 4; i < 
˘x
->
¨gc
; i++) {

3246 
ovsdb_ty≥
 
add_ty≥
;

3247 
ovsdb_d©um
 
add
;

3249 
add_ty≥
 = *
ty≥
;

3250 
add_ty≥
.
n_mö
 = 1;

3251 
add_ty≥
.
n_max
 = 
UINT_MAX
;

3252 
	`dõ_if_îr‹
(
	`ovsdb_d©um_‰om_°rög
(&
add
, &
add_ty≥
, 
˘x
->
¨gv
[
i
],

3253 
˘x
->
symèb
));

3254 
	`ovsdb_d©um_uni⁄
(&
ﬁd
, &
add
, 
ty≥
, 
Ál£
);

3255 
	`ovsdb_d©um_de°roy
(&
add
, 
ty≥
);

3257 i‡(
ﬁd
.
n
 > 
ty≥
->
n_max
) {

3258 
	`vs˘l_Áèl
("\"add\" operation wouldÖut %u %s in column %s of "

3260 
ﬁd
.
n
,

3261 
ty≥
->
vÆue
.ty≥ =
OVSDB_TYPE_VOID
 ? "values" : "pairs",

3262 
cﬁumn
->
«me
, 
èbÀ
->
˛ass
->«me, 
ty≥
->
n_max
);

3264 
	`ovsdb_idl_txn_vîify
(
row
, 
cﬁumn
);

3265 
	`ovsdb_idl_txn_wrôe
(
row
, 
cﬁumn
, &
ﬁd
);

3267 
	`vs˘l_c⁄ãxt_övÆid©e_ˇche
(
˘x
);

3268 
	}
}

3271 
	$¥e_cmd_ªmove
(
vs˘l_c⁄ãxt
 *
˘x
)

3273 c⁄° *
èbÀ_«me
 = 
˘x
->
¨gv
[1];

3274 c⁄° *
cﬁumn_«me
 = 
˘x
->
¨gv
[3];

3275 c⁄° 
vs˘l_èbÀ_˛ass
 *
èbÀ
;

3276 c⁄° 
ovsdb_idl_cﬁumn
 *
cﬁumn
;

3278 
èbÀ
 = 
	`¥e_gë_èbÀ
(
˘x
, 
èbÀ_«me
);

3279 
	`¥e_gë_cﬁumn
(
˘x
, 
èbÀ
, 
cﬁumn_«me
, &
cﬁumn
);

3280 
	`check_muèbÀ
(
èbÀ
, 
cﬁumn
);

3281 
	}
}

3284 
	$cmd_ªmove
(
vs˘l_c⁄ãxt
 *
˘x
)

3286 c⁄° *
èbÀ_«me
 = 
˘x
->
¨gv
[1];

3287 c⁄° *
ªc‹d_id
 = 
˘x
->
¨gv
[2];

3288 c⁄° *
cﬁumn_«me
 = 
˘x
->
¨gv
[3];

3289 c⁄° 
vs˘l_èbÀ_˛ass
 *
èbÀ
;

3290 c⁄° 
ovsdb_idl_cﬁumn
 *
cﬁumn
;

3291 c⁄° 
ovsdb_idl_row
 *
row
;

3292 c⁄° 
ovsdb_ty≥
 *
ty≥
;

3293 
ovsdb_d©um
 
ﬁd
;

3294 
i
;

3296 
èbÀ
 = 
	`gë_èbÀ
(
èbÀ_«me
);

3297 
row
 = 
	`mu°_gë_row
(
˘x
, 
èbÀ
, 
ªc‹d_id
);

3298 
	`dõ_if_îr‹
(
	`gë_cﬁumn
(
èbÀ
, 
cﬁumn_«me
, &
cﬁumn
));

3300 
ty≥
 = &
cﬁumn
->type;

3301 
	`ovsdb_d©um_˛⁄e
(&
ﬁd
, 
	`ovsdb_idl_ªad
(
row
, 
cﬁumn
), &cﬁumn->
ty≥
);

3302 
i
 = 4; i < 
˘x
->
¨gc
; i++) {

3303 
ovsdb_ty≥
 
rm_ty≥
;

3304 
ovsdb_d©um
 
rm
;

3305 *
îr‹
;

3307 
rm_ty≥
 = *
ty≥
;

3308 
rm_ty≥
.
n_mö
 = 1;

3309 
rm_ty≥
.
n_max
 = 
UINT_MAX
;

3310 
îr‹
 = 
	`ovsdb_d©um_‰om_°rög
(&
rm
, &
rm_ty≥
,

3311 
˘x
->
¨gv
[
i
], ctx->
symèb
);

3312 i‡(
îr‹
 && 
	`ovsdb_ty≥_is_m≠
(&
rm_ty≥
)) {

3313 
	`‰ì
(
îr‹
);

3314 
rm_ty≥
.
vÆue
.
ty≥
 = 
OVSDB_TYPE_VOID
;

3315 
	`dõ_if_îr‹
(
	`ovsdb_d©um_‰om_°rög
(&
rm
, &
rm_ty≥
,

3316 
˘x
->
¨gv
[
i
], ctx->
symèb
));

3318 
	`ovsdb_d©um_subåa˘
(&
ﬁd
, 
ty≥
, &
rm
, &
rm_ty≥
);

3319 
	`ovsdb_d©um_de°roy
(&
rm
, &
rm_ty≥
);

3321 i‡(
ﬁd
.
n
 < 
ty≥
->
n_mö
) {

3322 
	`vs˘l_Áèl
("\"remove\" operation wouldÖut %u %s in column %s of "

3324 
ﬁd
.
n
,

3325 
ty≥
->
vÆue
.ty≥ =
OVSDB_TYPE_VOID
 ? "values" : "pairs",

3326 
cﬁumn
->
«me
, 
èbÀ
->
˛ass
->«me, 
ty≥
->
n_mö
);

3328 
	`ovsdb_idl_txn_vîify
(
row
, 
cﬁumn
);

3329 
	`ovsdb_idl_txn_wrôe
(
row
, 
cﬁumn
, &
ﬁd
);

3331 
	`vs˘l_c⁄ãxt_övÆid©e_ˇche
(
˘x
);

3332 
	}
}

3335 
	$¥e_cmd_˛ór
(
vs˘l_c⁄ãxt
 *
˘x
)

3337 c⁄° *
èbÀ_«me
 = 
˘x
->
¨gv
[1];

3338 c⁄° 
vs˘l_èbÀ_˛ass
 *
èbÀ
;

3339 
i
;

3341 
èbÀ
 = 
	`¥e_gë_èbÀ
(
˘x
, 
èbÀ_«me
);

3342 
i
 = 3; i < 
˘x
->
¨gc
; i++) {

3343 c⁄° 
ovsdb_idl_cﬁumn
 *
cﬁumn
;

3345 
	`¥e_gë_cﬁumn
(
˘x
, 
èbÀ
, ctx->
¨gv
[
i
], &
cﬁumn
);

3346 
	`check_muèbÀ
(
èbÀ
, 
cﬁumn
);

3348 
	}
}

3351 
	$cmd_˛ór
(
vs˘l_c⁄ãxt
 *
˘x
)

3353 c⁄° *
èbÀ_«me
 = 
˘x
->
¨gv
[1];

3354 c⁄° *
ªc‹d_id
 = 
˘x
->
¨gv
[2];

3355 c⁄° 
vs˘l_èbÀ_˛ass
 *
èbÀ
;

3356 c⁄° 
ovsdb_idl_row
 *
row
;

3357 
i
;

3359 
èbÀ
 = 
	`gë_èbÀ
(
èbÀ_«me
);

3360 
row
 = 
	`mu°_gë_row
(
˘x
, 
èbÀ
, 
ªc‹d_id
);

3361 
i
 = 3; i < 
˘x
->
¨gc
; i++) {

3362 c⁄° 
ovsdb_idl_cﬁumn
 *
cﬁumn
;

3363 c⁄° 
ovsdb_ty≥
 *
ty≥
;

3364 
ovsdb_d©um
 
d©um
;

3366 
	`dõ_if_îr‹
(
	`gë_cﬁumn
(
èbÀ
, 
˘x
->
¨gv
[
i
], &
cﬁumn
));

3368 
ty≥
 = &
cﬁumn
->type;

3369 i‡(
ty≥
->
n_mö
 > 0) {

3370 
	`vs˘l_Áèl
("\"clear\" operation cannot beáppliedÅo column %s "

3372 
cﬁumn
->
«me
, 
èbÀ
->
˛ass
->name);

3375 
	`ovsdb_d©um_öô_em±y
(&
d©um
);

3376 
	`ovsdb_idl_txn_wrôe
(
row
, 
cﬁumn
, &
d©um
);

3379 
	`vs˘l_c⁄ãxt_övÆid©e_ˇche
(
˘x
);

3380 
	}
}

3383 
	$¥e_¸óã
(
vs˘l_c⁄ãxt
 *
˘x
)

3385 c⁄° *
id
 = 
	`shash_föd_d©a
(&
˘x
->
›ti⁄s
, "--id");

3386 c⁄° *
èbÀ_«me
 = 
˘x
->
¨gv
[1];

3387 c⁄° 
vs˘l_èbÀ_˛ass
 *
èbÀ
;

3389 
èbÀ
 = 
	`gë_èbÀ
(
èbÀ_«me
);

3390 i‡(!
id
 && !
èbÀ
->
˛ass
->
is_roŸ
) {

3391 
	`VLOG_WARN
("applying \"create\" commandÅoÅable %s without --id "

3392 "›ti⁄ wû»havênÿef„˘", 
èbÀ
->
˛ass
->
«me
);

3394 
	}
}

3397 
	$cmd_¸óã
(
vs˘l_c⁄ãxt
 *
˘x
)

3399 c⁄° *
id
 = 
	`shash_föd_d©a
(&
˘x
->
›ti⁄s
, "--id");

3400 c⁄° *
èbÀ_«me
 = 
˘x
->
¨gv
[1];

3401 c⁄° 
vs˘l_èbÀ_˛ass
 *
èbÀ
 = 
	`gë_èbÀ
(
èbÀ_«me
);

3402 c⁄° 
ovsdb_idl_row
 *
row
;

3403 c⁄° 
uuid
 *uuid;

3404 
i
;

3406 i‡(
id
) {

3407 
ovsdb_symbﬁ
 *
symbﬁ
 = 
	`¸óã_symbﬁ
(
˘x
->
symèb
, 
id
, 
NULL
);

3408 i‡(
èbÀ
->
˛ass
->
is_roŸ
) {

3412 
symbﬁ
->
°r⁄g_ªf
 = 
åue
;

3414 
uuid
 = &
symbﬁ
->uuid;

3416 
uuid
 = 
NULL
;

3419 
row
 = 
	`ovsdb_idl_txn_ö£π
(
˘x
->
txn
, 
èbÀ
->
˛ass
, 
uuid
);

3420 
i
 = 2; i < 
˘x
->
¨gc
; i++) {

3421 
	`£t_cﬁumn
(
èbÀ
, 
row
, 
˘x
->
¨gv
[
i
], ctx->
symèb
);

3423 
	`ds_put_f‹m©
(&
˘x
->
ouçut
, 
UUID_FMT
, 
	`UUID_ARGS
(&
row
->
uuid
));

3424 
	}
}

3436 
	$po°_¸óã
(
vs˘l_c⁄ãxt
 *
˘x
)

3438 c⁄° 
uuid
 *
ªÆ
;

3439 
uuid
 
dummy
;

3441 i‡(!
	`uuid_‰om_°rög
(&
dummy
, 
	`ds_c°r
(&
˘x
->
ouçut
))) {

3442 
	`NOT_REACHED
();

3444 
ªÆ
 = 
	`ovsdb_idl_txn_gë_ö£π_uuid
(
˘x
->
txn
, &
dummy
);

3445 i‡(
ªÆ
) {

3446 
	`ds_˛ór
(&
˘x
->
ouçut
);

3447 
	`ds_put_f‹m©
(&
˘x
->
ouçut
, 
UUID_FMT
, 
	`UUID_ARGS
(
ªÆ
));

3449 
	`ds_put_ch¨
(&
˘x
->
ouçut
, '\n');

3450 
	}
}

3453 
	$¥e_cmd_de°roy
(
vs˘l_c⁄ãxt
 *
˘x
)

3455 c⁄° *
èbÀ_«me
 = 
˘x
->
¨gv
[1];

3457 
	`¥e_gë_èbÀ
(
˘x
, 
èbÀ_«me
);

3458 
	}
}

3461 
	$cmd_de°roy
(
vs˘l_c⁄ãxt
 *
˘x
)

3463 
boﬁ
 
mu°_exi°
 = !
	`shash_föd
(&
˘x
->
›ti⁄s
, "--if-exists");

3464 
boﬁ
 
dñëe_Æl
 = 
	`shash_föd
(&
˘x
->
›ti⁄s
, "--all");

3465 c⁄° *
èbÀ_«me
 = 
˘x
->
¨gv
[1];

3466 c⁄° 
vs˘l_èbÀ_˛ass
 *
èbÀ
;

3467 
i
;

3469 
èbÀ
 = 
	`gë_èbÀ
(
èbÀ_«me
);

3471 i‡(
dñëe_Æl
 && 
˘x
->
¨gc
 > 2) {

3472 
	`vs˘l_Áèl
("--allándÑecordsárgument shouldÇot be specifiedÅogether");

3475 i‡(
dñëe_Æl
 && !
mu°_exi°
) {

3476 
	`vs˘l_Áèl
("--allánd --if-exists shouldÇot be specifiedÅogether");

3479 i‡(
dñëe_Æl
) {

3480 c⁄° 
ovsdb_idl_row
 *
row
;

3481 c⁄° 
ovsdb_idl_row
 *
√xt_row
;

3483 
row
 = 
	`ovsdb_idl_fú°_row
(
˘x
->
idl
, 
èbÀ
->
˛ass
);

3484 
row
;) {

3485 
√xt_row
 = 
	`ovsdb_idl_√xt_row
(
row
);

3486 
	`ovsdb_idl_txn_dñëe
(
row
);

3487 
row
 = 
√xt_row
;

3490 
i
 = 2; i < 
˘x
->
¨gc
; i++) {

3491 c⁄° 
ovsdb_idl_row
 *
row
;

3493 
row
 = (
mu°_exi°
 ? 
mu°_gë_row
 : 
gë_row
)(
˘x
, 
èbÀ
, ctx->
¨gv
[
i
]);

3494 i‡(
row
) {

3495 
	`ovsdb_idl_txn_dñëe
(
row
);

3499 
	`vs˘l_c⁄ãxt_övÆid©e_ˇche
(
˘x
);

3500 
	}
}

3502 
	#RELOPS
 \

3503 
	`RELOP
(
RELOP_EQ
, "=") \

3504 
	`RELOP
(
RELOP_NE
, "!=") \

3505 
	`RELOP
(
RELOP_LT
, "<") \

3506 
	`RELOP
(
RELOP_GT
, ">") \

3507 
	`RELOP
(
RELOP_LE
, "<=") \

3508 
	`RELOP
(
RELOP_GE
, ">=") \

3509 
	`RELOP
(
RELOP_SET_EQ
, "{=}") \

3510 
	`RELOP
(
RELOP_SET_NE
, "{!=}") \

3511 
	`RELOP
(
RELOP_SET_LT
, "{<}") \

3512 
	`RELOP
(
RELOP_SET_GT
, "{>}") \

3513 
	`RELOP
(
RELOP_SET_LE
, "{<=}") \

3514 
	`RELOP
(
RELOP_SET_GE
, "{>=}")

	)

3516 
	eªl›
 {

3517 
	#RELOP
(
ENUM
, 
STRING
ËENUM,

	)

3518 
	mRELOPS


3519 #unde‡
RELOP


3522 
boﬁ


3523 
	$is_£t_›î©‹
(
ªl›
 
›
)

3525  (
›
 =
RELOP_SET_EQ
 || o∞=
RELOP_SET_NE
 ||

3526 
›
 =
RELOP_SET_LT
 || o∞=
RELOP_SET_GT
 ||

3527 
›
 =
RELOP_SET_LE
 || o∞=
RELOP_SET_GE
);

3528 
	}
}

3530 
boﬁ


3531 
	$evÆu©e_ªl›
(c⁄° 
ovsdb_d©um
 *
a
, c⁄° ovsdb_d©um *
b
,

3532 c⁄° 
ovsdb_ty≥
 *
ty≥
, 
ªl›
 
›
)

3534 
›
) {

3535 
RELOP_EQ
:

3536 
RELOP_SET_EQ
:

3537  
	`ovsdb_d©um_com∑ª_3way
(
a
, 
b
, 
ty≥
) == 0;

3538 
RELOP_NE
:

3539 
RELOP_SET_NE
:

3540  
	`ovsdb_d©um_com∑ª_3way
(
a
, 
b
, 
ty≥
) != 0;

3541 
RELOP_LT
:

3542  
	`ovsdb_d©um_com∑ª_3way
(
a
, 
b
, 
ty≥
) < 0;

3543 
RELOP_GT
:

3544  
	`ovsdb_d©um_com∑ª_3way
(
a
, 
b
, 
ty≥
) > 0;

3545 
RELOP_LE
:

3546  
	`ovsdb_d©um_com∑ª_3way
(
a
, 
b
, 
ty≥
) <= 0;

3547 
RELOP_GE
:

3548  
	`ovsdb_d©um_com∑ª_3way
(
a
, 
b
, 
ty≥
) >= 0;

3550 
RELOP_SET_LT
:

3551  
b
->
n
 > 
a
->¿&& 
	`ovsdb_d©um_ö˛udes_Æl
◊, b, 
ty≥
);

3552 
RELOP_SET_GT
:

3553  
a
->
n
 > 
b
->¿&& 
	`ovsdb_d©um_ö˛udes_Æl
(b,á, 
ty≥
);

3554 
RELOP_SET_LE
:

3555  
	`ovsdb_d©um_ö˛udes_Æl
(
a
, 
b
, 
ty≥
);

3556 
RELOP_SET_GE
:

3557  
	`ovsdb_d©um_ö˛udes_Æl
(
b
, 
a
, 
ty≥
);

3560 
	`NOT_REACHED
();

3562 
	}
}

3564 
boﬁ


3565 
	$is_c⁄dôi⁄_ßtisfõd
(c⁄° 
vs˘l_èbÀ_˛ass
 *
èbÀ
,

3566 c⁄° 
ovsdb_idl_row
 *
row
, c⁄° *
¨g
,

3567 
ovsdb_symbﬁ_èbÀ
 *
symèb
)

3569 c⁄° *
›î©‹s
[] = {

3570 
	#RELOP
(
ENUM
, 
STRING
ËSTRING,

	)

3571 
RELOPS


3572 #unde‡
RELOP


3575 c⁄° 
ovsdb_idl_cﬁumn
 *
cﬁumn
;

3576 c⁄° 
ovsdb_d©um
 *
have_d©um
;

3577 *
key_°rög
, *
vÆue_°rög
;

3578 
ovsdb_ty≥
 
ty≥
;

3579 
›î©‹
;

3580 
boﬁ
 
ªtvÆ
;

3581 *
îr‹
;

3583 
îr‹
 = 
	`∑r£_cﬁumn_key_vÆue
(
¨g
, 
èbÀ
, &
cﬁumn
, &
key_°rög
,

3584 &
›î©‹
, 
›î©‹s
, 
	`ARRAY_SIZE
(operators),

3585 &
vÆue_°rög
);

3586 
	`dõ_if_îr‹
(
îr‹
);

3587 i‡(!
vÆue_°rög
) {

3588 
	`vs˘l_Áèl
("%s: missög vÆue", 
¨g
);

3591 
ty≥
 = 
cﬁumn
->type;

3592 
ty≥
.
n_max
 = 
UINT_MAX
;

3594 
have_d©um
 = 
	`ovsdb_idl_ªad
(
row
, 
cﬁumn
);

3595 i‡(
key_°rög
) {

3596 
ovsdb_©om
 
w™t_key
;

3597 
ovsdb_d©um
 
b
;

3598 
idx
;

3600 i‡(
cﬁumn
->
ty≥
.
vÆue
.ty≥ =
OVSDB_TYPE_VOID
) {

3601 
	`vs˘l_Áèl
("cannot specify keyÅo check forÇon-map column %s",

3602 
cﬁumn
->
«me
);

3605 
	`dõ_if_îr‹
(
	`ovsdb_©om_‰om_°rög
(&
w™t_key
, &
cﬁumn
->
ty≥
.
key
,

3606 
key_°rög
, 
symèb
));

3608 
ty≥
.
key
 =Åy≥.
vÆue
;

3609 
ty≥
.
vÆue
.ty≥ = 
OVSDB_TYPE_VOID
;

3610 
	`dõ_if_îr‹
(
	`ovsdb_d©um_‰om_°rög
(&
b
, &
ty≥
, 
vÆue_°rög
, 
symèb
));

3612 
idx
 = 
	`ovsdb_d©um_föd_key
(
have_d©um
,

3613 &
w™t_key
, 
cﬁumn
->
ty≥
.
key
.type);

3614 i‡(
idx
 =
UINT_MAX
 && !
	`is_£t_›î©‹
(
›î©‹
)) {

3615 
ªtvÆ
 = 
Ál£
;

3617 
ovsdb_d©um
 
a
;

3619 i‡(
idx
 !
UINT_MAX
) {

3620 
a
.
n
 = 1;

3621 
a
.
keys
 = &
have_d©um
->
vÆues
[
idx
];

3622 
a
.
vÆues
 = 
NULL
;

3624 
a
.
n
 = 0;

3625 
a
.
keys
 = 
NULL
;

3626 
a
.
vÆues
 = 
NULL
;

3629 
ªtvÆ
 = 
	`evÆu©e_ªl›
(&
a
, &
b
, &
ty≥
, 
›î©‹
);

3632 
	`ovsdb_©om_de°roy
(&
w™t_key
, 
cﬁumn
->
ty≥
.
key
.type);

3633 
	`ovsdb_d©um_de°roy
(&
b
, &
ty≥
);

3635 
ovsdb_d©um
 
w™t_d©um
;

3637 
	`dõ_if_îr‹
(
	`ovsdb_d©um_‰om_°rög
(&
w™t_d©um
, &
cﬁumn
->
ty≥
,

3638 
vÆue_°rög
, 
symèb
));

3639 
ªtvÆ
 = 
	`evÆu©e_ªl›
(
have_d©um
, &
w™t_d©um
, &
ty≥
, 
›î©‹
);

3640 
	`ovsdb_d©um_de°roy
(&
w™t_d©um
, &
cﬁumn
->
ty≥
);

3643 
	`‰ì
(
key_°rög
);

3644 
	`‰ì
(
vÆue_°rög
);

3646  
ªtvÆ
;

3647 
	}
}

3650 
	$¥e_cmd_waô_u¡û
(
vs˘l_c⁄ãxt
 *
˘x
)

3652 c⁄° *
èbÀ_«me
 = 
˘x
->
¨gv
[1];

3653 c⁄° 
vs˘l_èbÀ_˛ass
 *
èbÀ
;

3654 
i
;

3656 
èbÀ
 = 
	`¥e_gë_èbÀ
(
˘x
, 
èbÀ_«me
);

3658 
i
 = 3; i < 
˘x
->
¨gc
; i++) {

3659 
	`¥e_∑r£_cﬁumn_key_vÆue
(
˘x
, ctx->
¨gv
[
i
], 
èbÀ
);

3661 
	}
}

3664 
	$cmd_waô_u¡û
(
vs˘l_c⁄ãxt
 *
˘x
)

3666 c⁄° *
èbÀ_«me
 = 
˘x
->
¨gv
[1];

3667 c⁄° *
ªc‹d_id
 = 
˘x
->
¨gv
[2];

3668 c⁄° 
vs˘l_èbÀ_˛ass
 *
èbÀ
;

3669 c⁄° 
ovsdb_idl_row
 *
row
;

3670 
i
;

3672 
èbÀ
 = 
	`gë_èbÀ
(
èbÀ_«me
);

3674 
row
 = 
	`gë_row
(
˘x
, 
èbÀ
, 
ªc‹d_id
);

3675 i‡(!
row
) {

3676 
˘x
->
åy_agaö
 = 
åue
;

3680 
i
 = 3; i < 
˘x
->
¨gc
; i++) {

3681 i‡(!
	`is_c⁄dôi⁄_ßtisfõd
(
èbÀ
, 
row
, 
˘x
->
¨gv
[
i
], ctx->
symèb
)) {

3682 
˘x
->
åy_agaö
 = 
åue
;

3686 
	}
}

3691 
	$vs˘l_c⁄ãxt_öô_comm™d
(
vs˘l_c⁄ãxt
 *
˘x
,

3692 
vs˘l_comm™d
 *
comm™d
)

3694 
˘x
->
¨gc
 = 
comm™d
->argc;

3695 
˘x
->
¨gv
 = 
comm™d
->argv;

3696 
˘x
->
›ti⁄s
 = 
comm™d
->options;

3698 
	`ds_sw≠
(&
˘x
->
ouçut
, &
comm™d
->output);

3699 
˘x
->
èbÀ
 = 
comm™d
->table;

3701 
˘x
->
vîifõd_p‹ts
 = 
Ál£
;

3703 
˘x
->
åy_agaö
 = 
Ál£
;

3704 
	}
}

3712 
	$vs˘l_c⁄ãxt_öô
(
vs˘l_c⁄ãxt
 *
˘x
, 
vs˘l_comm™d
 *
comm™d
,

3713 
ovsdb_idl
 *
idl
, 
ovsdb_idl_txn
 *
txn
,

3714 c⁄° 
ov§ec_›í_vswôch
 *
ovs
,

3715 
ovsdb_symbﬁ_èbÀ
 *
symèb
)

3717 i‡(
comm™d
) {

3718 
	`vs˘l_c⁄ãxt_öô_comm™d
(
˘x
, 
comm™d
);

3720 
˘x
->
idl
 = idl;

3721 
˘x
->
txn
 =Åxn;

3722 
˘x
->
ovs
 = ovs;

3723 
˘x
->
symèb
 = symtab;

3724 
˘x
->
ˇche_vÆid
 = 
Ál£
;

3725 
	}
}

3729 
	$vs˘l_c⁄ãxt_d⁄e_comm™d
(
vs˘l_c⁄ãxt
 *
˘x
,

3730 
vs˘l_comm™d
 *
comm™d
)

3732 
	`ds_sw≠
(&
˘x
->
ouçut
, &
comm™d
->output);

3733 
comm™d
->
èbÀ
 = 
˘x
->table;

3734 
	}
}

3741 
	$vs˘l_c⁄ãxt_d⁄e
(
vs˘l_c⁄ãxt
 *
˘x
, 
vs˘l_comm™d
 *
comm™d
)

3743 i‡(
comm™d
) {

3744 
	`vs˘l_c⁄ãxt_d⁄e_comm™d
(
˘x
, 
comm™d
);

3746 
	`vs˘l_c⁄ãxt_övÆid©e_ˇche
(
˘x
);

3747 
	}
}

3750 
	$run_¥îequisôes
(
vs˘l_comm™d
 *
comm™ds
, 
size_t
 
n_comm™ds
,

3751 
ovsdb_idl
 *
idl
)

3753 
vs˘l_comm™d
 *
c
;

3755 
	`ovsdb_idl_add_èbÀ
(
idl
, &
ov§ec_èbÀ_›í_vswôch
);

3756 i‡(
waô_f‹_ªlﬂd
) {

3757 
	`ovsdb_idl_add_cﬁumn
(
idl
, &
ov§ec_›í_vswôch_cﬁ_cur_cfg
);

3759 
c
 = 
comm™ds
; c < &comm™ds[
n_comm™ds
]; c++) {

3760 i‡(
c
->
sy¡ax
->
¥îequisôes
) {

3761 
vs˘l_c⁄ãxt
 
˘x
;

3763 
	`ds_öô
(&
c
->
ouçut
);

3764 
c
->
èbÀ
 = 
NULL
;

3766 
	`vs˘l_c⁄ãxt_öô
(&
˘x
, 
c
, 
idl
, 
NULL
, NULL, NULL);

3767 (
c
->
sy¡ax
->
¥îequisôes
)(&
˘x
);

3768 
	`vs˘l_c⁄ãxt_d⁄e
(&
˘x
, 
c
);

3770 
	`as£π
(!
c
->
ouçut
.
°rög
);

3771 
	`as£π
(!
c
->
èbÀ
);

3774 
	}
}

3777 
	$do_vs˘l
(c⁄° *
¨gs
, 
vs˘l_comm™d
 *
comm™ds
, 
size_t
 
n_comm™ds
,

3778 
ovsdb_idl
 *
idl
)

3780 
ovsdb_idl_txn
 *
txn
;

3781 c⁄° 
ov§ec_›í_vswôch
 *
ovs
;

3782 
ovsdb_idl_txn_°©us
 
°©us
;

3783 
ovsdb_symbﬁ_èbÀ
 *
symèb
;

3784 
vs˘l_c⁄ãxt
 
˘x
;

3785 
vs˘l_comm™d
 *
c
;

3786 
shash_node
 *
node
;

3787 
öt64_t
 
√xt_cfg
 = 0;

3788 *
îr‹
 = 
NULL
;

3790 
txn
 = 
the_idl_txn
 = 
	`ovsdb_idl_txn_¸óã
(
idl
);

3791 i‡(
dry_run
) {

3792 
	`ovsdb_idl_txn_£t_dry_run
(
txn
);

3795 
	`ovsdb_idl_txn_add_commít
(
txn
, "ovs-vs˘l: %s", 
¨gs
);

3797 
ovs
 = 
	`ov§ec_›í_vswôch_fú°
(
idl
);

3798 i‡(!
ovs
) {

3800 
ovs
 = 
	`ov§ec_›í_vswôch_ö£π
(
txn
);

3803 i‡(
waô_f‹_ªlﬂd
) {

3804 
	`ovsdb_idl_txn_ö¸emít
(
txn
, &
ovs
->
hódî_
,

3805 &
ov§ec_›í_vswôch_cﬁ_√xt_cfg
);

3808 
symèb
 = 
	`ovsdb_symbﬁ_èbÀ_¸óã
();

3809 
c
 = 
comm™ds
; c < &comm™ds[
n_comm™ds
]; c++) {

3810 
	`ds_öô
(&
c
->
ouçut
);

3811 
c
->
èbÀ
 = 
NULL
;

3813 
	`vs˘l_c⁄ãxt_öô
(&
˘x
, 
NULL
, 
idl
, 
txn
, 
ovs
, 
symèb
);

3814 
c
 = 
comm™ds
; c < &comm™ds[
n_comm™ds
]; c++) {

3815 
	`vs˘l_c⁄ãxt_öô_comm™d
(&
˘x
, 
c
);

3816 i‡(
c
->
sy¡ax
->
run
) {

3817 (
c
->
sy¡ax
->
run
)(&
˘x
);

3819 
	`vs˘l_c⁄ãxt_d⁄e_comm™d
(&
˘x
, 
c
);

3821 i‡(
˘x
.
åy_agaö
) {

3822 
	`vs˘l_c⁄ãxt_d⁄e
(&
˘x
, 
NULL
);

3823 
åy_agaö
;

3826 
	`vs˘l_c⁄ãxt_d⁄e
(&
˘x
, 
NULL
);

3828 
	`SHASH_FOR_EACH
 (
node
, &
symèb
->
sh
) {

3829 
ovsdb_symbﬁ
 *
symbﬁ
 = 
node
->
d©a
;

3830 i‡(!
symbﬁ
->
¸óãd
) {

3831 
	`vs˘l_Áèl
("row id \"%s\" isÑeferenced butÇever created (e.g. "

3833 
node
->
«me
,Çode->name);

3835 i‡(!
symbﬁ
->
°r⁄g_ªf
) {

3836 i‡(!
symbﬁ
->
wók_ªf
) {

3837 
	`VLOG_WARN
("row id \"%s\" was created butÇoÑeferenceÅo it "

3839 "thêd©aba£", 
node
->
«me
);

3841 
	`VLOG_WARN
("row id \"%s\" was created but onlyá weak "

3843 "a˘uÆlyáµó∏öÅhêd©aba£", 
node
->
«me
);

3848 
°©us
 = 
	`ovsdb_idl_txn_commô_block
(
txn
);

3849 i‡(
waô_f‹_ªlﬂd
 && 
°©us
 =
TXN_SUCCESS
) {

3850 
√xt_cfg
 = 
	`ovsdb_idl_txn_gë_ö¸emít_√w_vÆue
(
txn
);

3852 i‡(
°©us
 =
TXN_UNCHANGED
 || sètu†=
TXN_SUCCESS
) {

3853 
c
 = 
comm™ds
; c < &comm™ds[
n_comm™ds
]; c++) {

3854 i‡(
c
->
sy¡ax
->
po°¥o˚ss
) {

3855 
vs˘l_c⁄ãxt
 
˘x
;

3857 
	`vs˘l_c⁄ãxt_öô
(&
˘x
, 
c
, 
idl
, 
txn
, 
ovs
, 
symèb
);

3858 (
c
->
sy¡ax
->
po°¥o˚ss
)(&
˘x
);

3859 
	`vs˘l_c⁄ãxt_d⁄e
(&
˘x
, 
c
);

3863 
îr‹
 = 
	`x°rdup
(
	`ovsdb_idl_txn_gë_îr‹
(
txn
));

3864 
	`ovsdb_idl_txn_de°roy
(
txn
);

3865 
txn
 = 
the_idl_txn
 = 
NULL
;

3867 
°©us
) {

3868 
TXN_UNCOMMITTED
:

3869 
TXN_INCOMPLETE
:

3870 
	`NOT_REACHED
();

3872 
TXN_ABORTED
:

3874 
	`vs˘l_Áèl
("transactionáborted");

3876 
TXN_UNCHANGED
:

3877 
TXN_SUCCESS
:

3880 
TXN_TRY_AGAIN
:

3881 
åy_agaö
;

3883 
TXN_ERROR
:

3884 
	`vs˘l_Áèl
("å™ß˘i⁄Éº‹: %s", 
îr‹
);

3886 
TXN_NOT_LOCKED
:

3888 
	`vs˘l_Áèl
("databaseÇotÜocked");

3891 
	`NOT_REACHED
();

3893 
	`‰ì
(
îr‹
);

3895 
	`ovsdb_symbﬁ_èbÀ_de°roy
(
symèb
);

3897 
c
 = 
comm™ds
; c < &comm™ds[
n_comm™ds
]; c++) {

3898 
ds
 *d†&
c
->
ouçut
;

3900 i‡(
c
->
èbÀ
) {

3901 
	`èbÀ_¥öt
(
c
->
èbÀ
, &
èbÀ_°yÀ
);

3902 } i‡(
⁄ñöe
) {

3903 
size_t
 
j
;

3905 
	`ds_chomp
(
ds
, '\n');

3906 
j
 = 0; j < 
ds
->
Àngth
; j++) {

3907 
ch
 = 
ds
->
°rög
[
j
];

3908 
ch
) {

3910 
	`Âuts
("\\n", 
°dout
);

3914 
	`Âuts
("\\\\", 
°dout
);

3918 
	`putch¨
(
ch
);

3921 
	`putch¨
('\n');

3923 
	`Âuts
(
	`ds_c°r
(
ds
), 
°dout
);

3925 
	`ds_de°roy
(&
c
->
ouçut
);

3926 
	`èbÀ_de°roy
(
c
->
èbÀ
);

3927 
	`‰ì
(
c
->
èbÀ
);

3929 
	`shash_de°roy_‰ì_d©a
(&
c
->
›ti⁄s
);

3931 
	`‰ì
(
comm™ds
);

3933 i‡(
waô_f‹_ªlﬂd
 && 
°©us
 !
TXN_UNCHANGED
) {

3935 
	`ovsdb_idl_run
(
idl
);

3936 
	`OVSREC_OPEN_VSWITCH_FOR_EACH
 (
ovs
, 
idl
) {

3937 i‡(
ovs
->
cur_cfg
 >
√xt_cfg
) {

3938 
d⁄e
;

3941 
	`ovsdb_idl_waô
(
idl
);

3942 
	`pﬁl_block
();

3944 
d⁄e
: ;

3946 
	`ovsdb_idl_de°roy
(
idl
);

3948 
	`exô
(
EXIT_SUCCESS
);

3950 
åy_agaö
:

3953 i‡(
txn
) {

3954 
	`ovsdb_idl_txn_ab‹t
(
txn
);

3955 
	`ovsdb_idl_txn_de°roy
(
txn
);

3957 
	`ovsdb_symbﬁ_èbÀ_de°roy
(
symèb
);

3958 
c
 = 
comm™ds
; c < &comm™ds[
n_comm™ds
]; c++) {

3959 
	`ds_de°roy
(&
c
->
ouçut
);

3960 
	`èbÀ_de°roy
(
c
->
èbÀ
);

3961 
	`‰ì
(
c
->
èbÀ
);

3963 
	`‰ì
(
îr‹
);

3964 
	}
}

3966 c⁄° 
vs˘l_comm™d_sy¡ax
 
	gÆl_comm™ds
[] = {

3968 {"öô", 0, 0, 
NULL
, 
cmd_öô
, NULL, "", 
RW
},

3969 {"show", 0, 0, 
¥e_cmd_show
, 
cmd_show
, 
NULL
, "", 
RO
},

3972 {"add-br", 1, 3, 
¥e_gë_öfo
, 
cmd_add_br
, 
NULL
, "--may-exi°", 
RW
},

3973 {"dñ-br", 1, 1, 
¥e_gë_öfo
, 
cmd_dñ_br
, 
NULL
, "--if-exi°s", 
RW
},

3974 {"li°-br", 0, 0, 
¥e_gë_öfo
, 
cmd_li°_br
, 
NULL
, "--ªÆ,--Áke", 
RO
},

3975 {"br-exi°s", 1, 1, 
¥e_gë_öfo
, 
cmd_br_exi°s
, 
NULL
, "", 
RO
},

3976 {"br-to-vœn", 1, 1, 
¥e_gë_öfo
, 
cmd_br_to_vœn
, 
NULL
, "", 
RO
},

3977 {"br-to-∑ª¡", 1, 1, 
¥e_gë_öfo
, 
cmd_br_to_∑ª¡
, 
NULL
, "", 
RO
},

3978 {"br-£t-exã∫Æ-id", 2, 3, 
¥e_cmd_br_£t_exã∫Æ_id
,

3979 
cmd_br_£t_exã∫Æ_id
, 
NULL
, "", 
RW
},

3980 {"br-gë-exã∫Æ-id", 1, 2, 
¥e_cmd_br_gë_exã∫Æ_id
,

3981 
cmd_br_gë_exã∫Æ_id
, 
NULL
, "", 
RO
},

3984 {"li°-p‹ts", 1, 1, 
¥e_gë_öfo
, 
cmd_li°_p‹ts
, 
NULL
, "", 
RO
},

3985 {"add-p‹t", 2, 
INT_MAX
, 
¥e_gë_öfo
, 
cmd_add_p‹t
, 
NULL
, "--may-exist",

3986 
RW
},

3987 {"add-b⁄d", 4, 
INT_MAX
, 
¥e_gë_öfo
, 
cmd_add_b⁄d
, 
NULL
,

3988 "--may-exi°,--Áke-iÁ˚", 
RW
},

3989 {"dñ-p‹t", 1, 2, 
¥e_gë_öfo
, 
cmd_dñ_p‹t
, 
NULL
,

3990 "--if-exi°s,--wôh-iÁ˚", 
RW
},

3991 {"p‹t-to-br", 1, 1, 
¥e_gë_öfo
, 
cmd_p‹t_to_br
, 
NULL
, "", 
RO
},

3994 {"li°-iÁ˚s", 1, 1, 
¥e_gë_öfo
, 
cmd_li°_iÁ˚s
, 
NULL
, "", 
RO
},

3995 {"iÁ˚-to-br", 1, 1, 
¥e_gë_öfo
, 
cmd_iÁ˚_to_br
, 
NULL
, "", 
RO
},

3998 {"gë-c⁄åﬁÀr", 1, 1, 
¥e_c⁄åﬁÀr
, 
cmd_gë_c⁄åﬁÀr
, 
NULL
, "", 
RO
},

3999 {"dñ-c⁄åﬁÀr", 1, 1, 
¥e_c⁄åﬁÀr
, 
cmd_dñ_c⁄åﬁÀr
, 
NULL
, "", 
RW
},

4000 {"£t-c⁄åﬁÀr", 1, 
INT_MAX
, 
¥e_c⁄åﬁÀr
, 
cmd_£t_c⁄åﬁÀr
, 
NULL
,

4001 "", 
RW
},

4002 {"gë-Áû-mode", 1, 1, 
¥e_gë_öfo
, 
cmd_gë_Áû_mode
, 
NULL
, "", 
RO
},

4003 {"dñ-Áû-mode", 1, 1, 
¥e_gë_öfo
, 
cmd_dñ_Áû_mode
, 
NULL
, "", 
RW
},

4004 {"£t-Áû-mode", 2, 2, 
¥e_gë_öfo
, 
cmd_£t_Áû_mode
, 
NULL
, "", 
RW
},

4007 {"gë-m™agî", 0, 0, 
¥e_m™agî
, 
cmd_gë_m™agî
, 
NULL
, "", 
RO
},

4008 {"dñ-m™agî", 0, 0, 
¥e_m™agî
, 
cmd_dñ_m™agî
, 
NULL
, "", 
RW
},

4009 {"£t-m™agî", 1, 
INT_MAX
, 
¥e_m™agî
, 
cmd_£t_m™agî
, 
NULL
, "", 
RW
},

4012 {"gë-s¶", 0, 0, 
¥e_cmd_gë_s¶
, 
cmd_gë_s¶
, 
NULL
, "", 
RO
},

4013 {"dñ-s¶", 0, 0, 
¥e_cmd_dñ_s¶
, 
cmd_dñ_s¶
, 
NULL
, "", 
RW
},

4014 {"£t-s¶", 3, 3, 
¥e_cmd_£t_s¶
, 
cmd_£t_s¶
, 
NULL
, "--boŸ°øp", 
RW
},

4017 {"emî-ª£t", 0, 0, 
¥e_cmd_emî_ª£t
, 
cmd_emî_ª£t
, 
NULL
, "", 
RW
},

4020 {"commít", 0, 
INT_MAX
, 
NULL
, NULL, NULL, "", 
RO
},

4021 {"gë", 2, 
INT_MAX
, 
¥e_cmd_gë
, 
cmd_gë
, 
NULL
, "--if-exi°s,--id=", 
RO
},

4022 {"li°", 1, 
INT_MAX
, 
¥e_cmd_li°
, 
cmd_li°
, 
NULL
, "--cﬁumns=", 
RO
},

4023 {"föd", 1, 
INT_MAX
, 
¥e_cmd_föd
, 
cmd_föd
, 
NULL
, "--cﬁumns=", 
RO
},

4024 {"£t", 3, 
INT_MAX
, 
¥e_cmd_£t
, 
cmd_£t
, 
NULL
, "", 
RW
},

4025 {"add", 4, 
INT_MAX
, 
¥e_cmd_add
, 
cmd_add
, 
NULL
, "", 
RW
},

4026 {"ªmove", 4, 
INT_MAX
, 
¥e_cmd_ªmove
, 
cmd_ªmove
, 
NULL
, "", 
RW
},

4027 {"˛ór", 3, 
INT_MAX
, 
¥e_cmd_˛ór
, 
cmd_˛ór
, 
NULL
, "", 
RW
},

4028 {"¸óã", 2, 
INT_MAX
, 
¥e_¸óã
, 
cmd_¸óã
, 
po°_¸óã
, "--id=", 
RW
},

4029 {"de°roy", 1, 
INT_MAX
, 
¥e_cmd_de°roy
, 
cmd_de°roy
, 
NULL
,

4030 "--if-exi°s,--Æl", 
RW
},

4031 {"waô-u¡û", 2, 
INT_MAX
, 
¥e_cmd_waô_u¡û
, 
cmd_waô_u¡û
, 
NULL
, "",

4032 
RO
},

4034 {
NULL
, 0, 0, NULL, NULL, NULL, NULL, 
RO
},

	@/home/lsch/mytest/openvswitch-1.9.0/vswitchd/bridge.c

16 
	~<c⁄fig.h
>

17 
	~"bridge.h
"

18 
	~<as£π.h
>

19 
	~<î∫o.h
>

20 
	~<öây≥s.h
>

21 
	~<°dlib.h
>

22 
	~"bôm≠.h
"

23 
	~"b⁄d.h
"

24 
	~"cfm.h
"

25 
	~"covîage.h
"

26 
	~"d´m⁄.h
"

27 
	~"dús.h
"

28 
	~"dy«mic-°rög.h
"

29 
	~"hash.h
"

30 
	~"hm≠.h
"

31 
	~"hm≠x.h
"

32 
	~"js⁄Ωc.h
"

33 
	~"œ˝.h
"

34 
	~"li°.h
"

35 
	~"mac-À¨nög.h
"

36 
	~"mëa-Êow.h
"

37 
	~"√tdev.h
"

38 
	~"oÂ-¥öt.h
"

39 
	~"oÂbuf.h
"

40 
	~"oÂrŸo/oÂrŸo.h
"

41 
	~"pﬁl-lo›.h
"

42 
	~"sha1.h
"

43 
	~"shash.h
"

44 
	~"sm≠.h
"

45 
	~"sockë-utû.h
"

46 
	~"°ªam.h
"

47 
	~"°ªam-s¶.h
"

48 
	~"s£t.h
"

49 
	~"sy°em-°©s.h
"

50 
	~"timevÆ.h
"

51 
	~"utû.h
"

52 
	~"unix˘l.h
"

53 
	~"vœndev.h
"

54 
	~"lib/vswôch-idl.h
"

55 
	~"xí£rvî.h
"

56 
	~"vlog.h
"

57 
	~"sÊow_≠i.h
"

58 
	~"vœn-bôm≠.h
"

60 
VLOG_DEFINE_THIS_MODULE
(
bridge
);

62 
COVERAGE_DEFINE
(
bridge_ªc⁄figuª
);

65 
	sif_cfg
 {

66 
hm≠_node
 
	mhm≠_node
;

67 c⁄° 
ov§ec_öãrÁ˚
 *
	mcfg
;

68 c⁄° 
ov§ec_p‹t
 *
	m∑ª¡
;

72 
	soÂp_g¨bage
 {

73 
li°
 
	mli°_node
;

74 
uöt16_t
 
	moÂ_p‹t
;

77 
	siÁ˚
 {

79 
li°
 
	mp‹t_ñem
;

80 
hm≠_node
 
	m«me_node
;

81 
p‹t
 *
	mp‹t
;

82 *
	m«me
;

86 
hm≠_node
 
	moÂ_p‹t_node
;

87 
	moÂ_p‹t
;

88 
√tdev
 *
	m√tdev
;

89 c⁄° *
	mty≥
;

90 c⁄° 
ov§ec_öãrÁ˚
 *
	mcfg
;

93 
	smúr‹
 {

94 
uuid
 
	muuid
;

95 
hm≠_node
 
	mhm≠_node
;

96 
bridge
 *
	mbridge
;

97 *
	m«me
;

98 c⁄° 
ov§ec_múr‹
 *
	mcfg
;

101 
	sp‹t
 {

102 
hm≠_node
 
	mhm≠_node
;

103 
bridge
 *
	mbridge
;

104 *
	m«me
;

106 c⁄° 
ov§ec_p‹t
 *
	mcfg
;

110 
li°
 
	miÁ˚s
;

113 
	sbridge
 {

114 
hm≠_node
 
	mnode
;

115 *
	m«me
;

116 *
	mty≥
;

117 
uöt8_t
 
	mó
[
ETH_ADDR_LEN
];

118 
uöt8_t
 
	mdeÁu…_ó
[
ETH_ADDR_LEN
];

119 c⁄° 
ov§ec_bridge
 *
	mcfg
;

122 
oÂrŸo
 *
	moÂrŸo
;

125 
hm≠
 
	mp‹ts
;

126 
hm≠
 
	miÁ˚s
;

127 
hm≠
 
	miÁ˚_by_«me
;

129 
li°
 
	moÂp_g¨bage
;

130 
hm≠
 
	mif_cfg_todo
;

134 
hm≠
 
	mmúr‹s
;

137 
ov§ec_p‹t
 
	msy¡h_loˇl_p‹t
;

138 
ov§ec_öãrÁ˚
 
	msy¡h_loˇl_iÁ˚
;

139 
ov§ec_öãrÁ˚
 *
	msy¡h_loˇl_iÁ˚p
;

143 
hm≠
 
	gÆl_bridges
 = 
HMAP_INITIALIZER
(&
Æl_bridges
);

146 
ovsdb_idl
 *
	gidl
;

149 
	gidl_£qno
;

153 
	#IFACE_STATS_INTERVAL
 (5 * 1000Ë

	)

154 
	giÁ˚_°©s_timî
 = 
LLONG_MIN
;

164 
	#OFP_PORT_ACTION_WINDOW
 10

	)

165 
boﬁ
 
	gªc⁄figurög
 = 
Ál£
;

167 
add_dñ_bridges
(c⁄° 
ov§ec_›í_vswôch
 *);

168 
bridge_upd©e_oÂrŸos
();

169 
bridge_¸óã
(c⁄° 
ov§ec_bridge
 *);

170 
bridge_de°roy
(
bridge
 *);

171 
bridge
 *
bridge_lookup
(c⁄° *
«me
);

172 
unix˘l_cb_func
 
	gbridge_unix˘l_dump_Êows
;

173 
unix˘l_cb_func
 
	gbridge_unix˘l_ªc⁄√˘
;

174 
size_t
 
bridge_gë_c⁄åﬁÀrs
(c⁄° 
bridge
 *
br
,

175 
ov§ec_c⁄åﬁÀr
 ***
c⁄åﬁÀr•
);

176 
bridge_add_dñ_p‹ts
(
bridge
 *,

177 c⁄° *
•löãr_vœns
);

178 
bridge_ª‰esh_oÂ_p‹t
(
bridge
 *);

179 
bridge_c⁄figuª_d©≠©h_id
(
bridge
 *);

180 
bridge_c⁄figuª_Êow_evi˘i⁄_thªshﬁd
(
bridge
 *);

181 
bridge_c⁄figuª_√tÊow
(
bridge
 *);

182 
bridge_c⁄figuª_f‹w¨d_bpdu
(
bridge
 *);

183 
bridge_c⁄figuª_mac_idÀ_time
(
bridge
 *);

184 
bridge_c⁄figuª_sÊow
(
bridge
 *, *
sÊow_bridge_numbî
);

185 
bridge_c⁄figuª_°p
(
bridge
 *);

186 
bridge_c⁄figuª_èbÀs
(
bridge
 *);

187 
bridge_c⁄figuª_ªmŸes
(
bridge
 *,

188 c⁄° 
sockaddr_ö
 *
m™agîs
,

189 
size_t
 
n_m™agîs
);

190 
bridge_pick_loˇl_hw_addr
(
bridge
 *,

191 
uöt8_t
 
ó
[
ETH_ADDR_LEN
],

192 
iÁ˚
 **
hw_addr_iÁ˚
);

193 
uöt64_t
 
bridge_pick_d©≠©h_id
(
bridge
 *,

194 c⁄° 
uöt8_t
 
bridge_ó
[
ETH_ADDR_LEN
],

195 
iÁ˚
 *
hw_addr_iÁ˚
);

196 
bridge_queue_if_cfg
(
bridge
 *,

197 c⁄° 
ov§ec_öãrÁ˚
 *,

198 c⁄° 
ov§ec_p‹t
 *);

199 
uöt64_t
 
dpid_‰om_hash
(c⁄° *, 
size_t
 
nbyãs
);

200 
boﬁ
 
bridge_has_b⁄d_Áke_iÁ˚
(c⁄° 
bridge
 *,

201 c⁄° *
«me
);

202 
boﬁ
 
p‹t_is_b⁄d_Áke_iÁ˚
(c⁄° 
p‹t
 *);

204 
unix˘l_cb_func
 
	gqos_unix˘l_show
;

206 
p‹t
 *
p‹t_¸óã
(
bridge
 *, c⁄° 
ov§ec_p‹t
 *);

207 
p‹t_dñ_iÁ˚s
(
p‹t
 *);

208 
p‹t_de°roy
(
p‹t
 *);

209 
p‹t
 *
p‹t_lookup
(c⁄° 
bridge
 *, c⁄° *
«me
);

210 
p‹t_c⁄figuª
(
p‹t
 *);

211 
œ˝_£âögs
 *
p‹t_c⁄figuª_œ˝
(
p‹t
 *,

212 
œ˝_£âögs
 *);

213 
p‹t_c⁄figuª_b⁄d
(
p‹t
 *, 
b⁄d_£âögs
 *,

214 
uöt32_t
 *
b⁄d_°abÀ_ids
);

215 
boﬁ
 
p‹t_is_sy¡hëic
(c⁄° 
p‹t
 *);

217 
ªc⁄figuª_sy°em_°©s
(c⁄° 
ov§ec_›í_vswôch
 *);

218 
run_sy°em_°©s
();

220 
bridge_c⁄figuª_múr‹s
(
bridge
 *);

221 
múr‹
 *
múr‹_¸óã
(
bridge
 *,

222 c⁄° 
ov§ec_múr‹
 *);

223 
múr‹_de°roy
(
múr‹
 *);

224 
boﬁ
 
múr‹_c⁄figuª
(
múr‹
 *);

225 
múr‹_ª‰esh_°©s
(
múr‹
 *);

227 
iÁ˚_c⁄figuª_œ˝
(
iÁ˚
 *, 
œ˝_¶ave_£âögs
 *);

228 
boﬁ
 
iÁ˚_¸óã
(
bridge
 *, 
if_cfg
 *, 
oÂ_p‹t
);

229 c⁄° *
iÁ˚_gë_ty≥
(c⁄° 
ov§ec_öãrÁ˚
 *,

230 c⁄° 
ov§ec_bridge
 *);

231 
iÁ˚_de°roy
(
iÁ˚
 *);

232 
iÁ˚
 *
iÁ˚_lookup
(c⁄° 
bridge
 *, c⁄° *
«me
);

233 
iÁ˚
 *
iÁ˚_föd
(c⁄° *
«me
);

234 
if_cfg
 *
if_cfg_lookup
(c⁄° 
bridge
 *, c⁄° *
«me
);

235 
iÁ˚
 *
iÁ˚_‰om_oÂ_p‹t
(c⁄° 
bridge
 *,

236 
uöt16_t
 
oÂ_p‹t
);

237 
iÁ˚_£t_mac
(
iÁ˚
 *);

238 
iÁ˚_£t_oÂ‹t
(c⁄° 
ov§ec_öãrÁ˚
 *, 
öt64_t
 
oÂ‹t
);

239 
iÁ˚_˛ór_db_ªc‹d
(c⁄° 
ov§ec_öãrÁ˚
 *
if_cfg
);

240 
iÁ˚_c⁄figuª_qos
(
iÁ˚
 *, c⁄° 
ov§ec_qos
 *);

241 
iÁ˚_c⁄figuª_cfm
(
iÁ˚
 *);

242 
iÁ˚_ª‰esh_cfm_°©s
(
iÁ˚
 *);

243 
iÁ˚_ª‰esh_°©s
(
iÁ˚
 *);

244 
iÁ˚_ª‰esh_°©us
(
iÁ˚
 *);

245 
boﬁ
 
iÁ˚_is_sy¡hëic
(c⁄° 
iÁ˚
 *);

255 
boﬁ
 
	gvœn_•löãrs_íabÀd_™ywhîe
;

257 
boﬁ
 
vœn_•löãrs_is_íabÀd
(c⁄° 
ov§ec_öãrÁ˚
 *);

258 *
cﬁÀ˘_•löãr_vœns
(

259 c⁄° 
ov§ec_›í_vswôch
 *);

260 
c⁄figuª_•löãr_p‹t
(
p‹t
 *);

261 
add_vœn_•löãr_p‹ts
(
bridge
 *,

262 c⁄° *
•löãr_vœns
,

263 
shash
 *
p‹ts
);

271 
	$bridge_öô
(c⁄° *
ªmŸe
)

274 
idl
 = 
	`ovsdb_idl_¸óã
(
ªmŸe
, &
ov§ec_idl_˛ass
, 
åue
);

275 
idl_£qno
 = 
	`ovsdb_idl_gë_£qno
(
idl
);

276 
	`ovsdb_idl_£t_lock
(
idl
, "ovs_vswitchd");

277 
	`ovsdb_idl_vîify_wrôe_⁄ly
(
idl
);

279 
	`ovsdb_idl_omô_Æît
(
idl
, &
ov§ec_›í_vswôch_cﬁ_cur_cfg
);

280 
	`ovsdb_idl_omô_Æît
(
idl
, &
ov§ec_›í_vswôch_cﬁ_°©i°ics
);

281 
	`ovsdb_idl_omô
(
idl
, &
ov§ec_›í_vswôch_cﬁ_exã∫Æ_ids
);

282 
	`ovsdb_idl_omô
(
idl
, &
ov§ec_›í_vswôch_cﬁ_ovs_vîsi⁄
);

283 
	`ovsdb_idl_omô
(
idl
, &
ov§ec_›í_vswôch_cﬁ_db_vîsi⁄
);

284 
	`ovsdb_idl_omô
(
idl
, &
ov§ec_›í_vswôch_cﬁ_sy°em_ty≥
);

285 
	`ovsdb_idl_omô
(
idl
, &
ov§ec_›í_vswôch_cﬁ_sy°em_vîsi⁄
);

287 
	`ovsdb_idl_omô_Æît
(
idl
, &
ov§ec_bridge_cﬁ_d©≠©h_id
);

288 
	`ovsdb_idl_omô_Æît
(
idl
, &
ov§ec_bridge_cﬁ_°©us
);

289 
	`ovsdb_idl_omô
(
idl
, &
ov§ec_bridge_cﬁ_exã∫Æ_ids
);

291 
	`ovsdb_idl_omô_Æît
(
idl
, &
ov§ec_p‹t_cﬁ_°©us
);

292 
	`ovsdb_idl_omô_Æît
(
idl
, &
ov§ec_p‹t_cﬁ_°©i°ics
);

293 
	`ovsdb_idl_omô
(
idl
, &
ov§ec_p‹t_cﬁ_exã∫Æ_ids
);

294 
	`ovsdb_idl_omô
(
idl
, &
ov§ec_p‹t_cﬁ_Áke_bridge
);

296 
	`ovsdb_idl_omô_Æît
(
idl
, &
ov§ec_öãrÁ˚_cﬁ_admö_°©e
);

297 
	`ovsdb_idl_omô_Æît
(
idl
, &
ov§ec_öãrÁ˚_cﬁ_du∂ex
);

298 
	`ovsdb_idl_omô_Æît
(
idl
, &
ov§ec_öãrÁ˚_cﬁ_lök_•ìd
);

299 
	`ovsdb_idl_omô_Æît
(
idl
, &
ov§ec_öãrÁ˚_cﬁ_lök_°©e
);

300 
	`ovsdb_idl_omô_Æît
(
idl
, &
ov§ec_öãrÁ˚_cﬁ_lök_ª£ts
);

301 
	`ovsdb_idl_omô_Æît
(
idl
, &
ov§ec_öãrÁ˚_cﬁ_mtu
);

302 
	`ovsdb_idl_omô_Æît
(
idl
, &
ov§ec_öãrÁ˚_cﬁ_oÂ‹t
);

303 
	`ovsdb_idl_omô_Æît
(
idl
, &
ov§ec_öãrÁ˚_cﬁ_°©i°ics
);

304 
	`ovsdb_idl_omô_Æît
(
idl
, &
ov§ec_öãrÁ˚_cﬁ_°©us
);

305 
	`ovsdb_idl_omô_Æît
(
idl
, &
ov§ec_öãrÁ˚_cﬁ_cfm_Áu…
);

306 
	`ovsdb_idl_omô_Æît
(
idl
, &
ov§ec_öãrÁ˚_cﬁ_cfm_Áu…_°©us
);

307 
	`ovsdb_idl_omô_Æît
(
idl
, &
ov§ec_öãrÁ˚_cﬁ_cfm_ªmŸe_mpids
);

308 
	`ovsdb_idl_omô_Æît
(
idl
, &
ov§ec_öãrÁ˚_cﬁ_cfm_hó…h
);

309 
	`ovsdb_idl_omô_Æît
(
idl
, &
ov§ec_öãrÁ˚_cﬁ_cfm_ªmŸe_›°©e
);

310 
	`ovsdb_idl_omô_Æît
(
idl
, &
ov§ec_öãrÁ˚_cﬁ_œ˝_cuºít
);

311 
	`ovsdb_idl_omô
(
idl
, &
ov§ec_öãrÁ˚_cﬁ_exã∫Æ_ids
);

313 
	`ovsdb_idl_omô_Æît
(
idl
, &
ov§ec_c⁄åﬁÀr_cﬁ_is_c⁄√˘ed
);

314 
	`ovsdb_idl_omô_Æît
(
idl
, &
ov§ec_c⁄åﬁÀr_cﬁ_rﬁe
);

315 
	`ovsdb_idl_omô_Æît
(
idl
, &
ov§ec_c⁄åﬁÀr_cﬁ_°©us
);

316 
	`ovsdb_idl_omô
(
idl
, &
ov§ec_c⁄åﬁÀr_cﬁ_exã∫Æ_ids
);

318 
	`ovsdb_idl_omô
(
idl
, &
ov§ec_qos_cﬁ_exã∫Æ_ids
);

320 
	`ovsdb_idl_omô
(
idl
, &
ov§ec_queue_cﬁ_exã∫Æ_ids
);

322 
	`ovsdb_idl_omô
(
idl
, &
ov§ec_múr‹_cﬁ_exã∫Æ_ids
);

323 
	`ovsdb_idl_omô_Æît
(
idl
, &
ov§ec_múr‹_cﬁ_°©i°ics
);

325 
	`ovsdb_idl_omô
(
idl
, &
ov§ec_√tÊow_cﬁ_exã∫Æ_ids
);

327 
	`ovsdb_idl_omô
(
idl
, &
ov§ec_sÊow_cﬁ_exã∫Æ_ids
);

329 
	`ovsdb_idl_omô
(
idl
, &
ov§ec_m™agî_cﬁ_exã∫Æ_ids
);

330 
	`ovsdb_idl_omô
(
idl
, &
ov§ec_m™agî_cﬁ_öa˘ivôy_¥obe
);

331 
	`ovsdb_idl_omô
(
idl
, &
ov§ec_m™agî_cﬁ_is_c⁄√˘ed
);

332 
	`ovsdb_idl_omô
(
idl
, &
ov§ec_m™agî_cﬁ_max_backoff
);

333 
	`ovsdb_idl_omô
(
idl
, &
ov§ec_m™agî_cﬁ_°©us
);

335 
	`ovsdb_idl_omô
(
idl
, &
ov§ec_s¶_cﬁ_exã∫Æ_ids
);

338 
	`unix˘l_comm™d_ªgi°î
("qos/show", "interface", 1, 1,

339 
qos_unix˘l_show
, 
NULL
);

340 
	`unix˘l_comm™d_ªgi°î
("bridge/dump-flows", "bridge", 1, 1,

341 
bridge_unix˘l_dump_Êows
, 
NULL
);

342 
	`unix˘l_comm™d_ªgi°î
("bridge/reconnect", "[bridge]", 0, 1,

343 
bridge_unix˘l_ªc⁄√˘
, 
NULL
);

344 
	`œ˝_öô
();

345 
	`b⁄d_öô
();

346 
	`cfm_öô
();

347 
	`°p_öô
();

348 
	}
}

351 
	$bridge_exô
()

353 
bridge
 *
br
, *
√xt_br
;

355 
	`HMAP_FOR_EACH_SAFE
 (
br
, 
√xt_br
, 
node
, &
Æl_bridges
) {

356 
	`bridge_de°roy
(
br
);

358 
	`ovsdb_idl_de°roy
(
idl
);

359 
	}
}

373 
	$cﬁÀ˘_ö_b™d_m™agîs
(c⁄° 
ov§ec_›í_vswôch
 *
ovs_cfg
,

374 
sockaddr_ö
 **
m™agî•
, 
size_t
 *
n_m™agî•
)

376 
sockaddr_ö
 *
m™agîs
 = 
NULL
;

377 
size_t
 
n_m™agîs
 = 0;

378 
s£t
 
èrgës
;

379 
size_t
 
i
;

384 
	`s£t_öô
(&
èrgës
);

385 
i
 = 0; i < 
ovs_cfg
->
n_m™agî_›ti⁄s
; i++) {

386 
ov§ec_m™agî
 *
m
 = 
ovs_cfg
->
m™agî_›ti⁄s
[
i
];

388 i‡(
m
->
c⁄√˘i⁄_mode
 && !
	`°rcmp
(m->connection_mode, "out-of-band")) {

389 
	`s£t_föd_™d_dñëe
(&
èrgës
, 
m
->
èrgë
);

391 
	`s£t_add
(&
èrgës
, 
m
->
èrgë
);

396 i‡(!
	`s£t_is_em±y
(&
èrgës
)) {

397 c⁄° *
èrgë
;

399 
m™agîs
 = 
	`xmÆloc
(
	`s£t_cou¡
(&
èrgës
) *  *managers);

400 
	`SSET_FOR_EACH
 (
èrgë
, &
èrgës
) {

401 
sockaddr_ö
 *
sö
 = &
m™agîs
[
n_m™agîs
];

403 i‡(
	`°ªam_∑r£_èrgë_wôh_deÁu…_p‹ts
(
èrgë
,

404 
JSONRPC_TCP_PORT
,

405 
JSONRPC_SSL_PORT
,

406 
sö
)) {

407 
n_m™agîs
++;

411 
	`s£t_de°roy
(&
èrgës
);

413 *
m™agî•
 = 
m™agîs
;

414 *
n_m™agî•
 = 
n_m™agîs
;

415 
	}
}

418 
	$bridge_ªc⁄figuª
(c⁄° 
ov§ec_›í_vswôch
 *
ovs_cfg
)

420 *
•löãr_vœns
;

421 
bridge
 *
br
;

423 
	`COVERAGE_INC
(
bridge_ªc⁄figuª
);

425 
	`as£π
(!
ªc⁄figurög
);

426 
ªc⁄figurög
 = 
åue
;

434 
	`add_dñ_bridges
(
ovs_cfg
);

435 
•löãr_vœns
 = 
	`cﬁÀ˘_•löãr_vœns
(
ovs_cfg
);

436 
	`HMAP_FOR_EACH
 (
br
, 
node
, &
Æl_bridges
) {

437 
	`bridge_add_dñ_p‹ts
(
br
, 
•löãr_vœns
);

439 
	`‰ì
(
•löãr_vœns
);

443 
	`bridge_upd©e_oÂrŸos
();

446 
	`HMAP_FOR_EACH
 (
br
, 
node
, &
Æl_bridges
) {

447 
	`bridge_ª‰esh_oÂ_p‹t
(
br
);

451 
	`HMAP_FOR_EACH
 (
br
, 
node
, &
Æl_bridges
) {

452 
if_cfg
 *if_cfg;

454 
	`HMAP_FOR_EACH
 (
if_cfg
, 
hm≠_node
, &
br
->
if_cfg_todo
) {

455 
	`iÁ˚_˛ór_db_ªc‹d
(
if_cfg
->
cfg
);

459 
	`ªc⁄figuª_sy°em_°©s
(
ovs_cfg
);

460 
	}
}

462 
boﬁ


463 
	$bridge_ªc⁄figuª_oÂ
()

465 
dódlöe
;

466 
bridge
 *
br
;

468 
	`time_ª‰esh
();

469 
dódlöe
 = 
	`time_m£c
(Ë+ 
OFP_PORT_ACTION_WINDOW
;

474 
	`HMAP_FOR_EACH
 (
br
, 
node
, &
Æl_bridges
) {

475 
oÂp_g¨bage
 *
g¨bage
, *
√xt
;

477 
	`LIST_FOR_EACH_SAFE
 (
g¨bage
, 
√xt
, 
li°_node
, &
br
->
oÂp_g¨bage
) {

482 
	`bridge_run_Á°
();

483 
	`oÂrŸo_p‹t_dñ
(
br
->
oÂrŸo
, 
g¨bage
->
oÂ_p‹t
);

484 
	`li°_ªmove
(&
g¨bage
->
li°_node
);

485 
	`‰ì
(
g¨bage
);

487 
	`time_ª‰esh
();

488 i‡(
	`time_m£c
(Ë>
dódlöe
) {

489  
Ál£
;

491 
	`bridge_run_Á°
();

495 
	`HMAP_FOR_EACH
 (
br
, 
node
, &
Æl_bridges
) {

496 
if_cfg
 *if_cfg, *
√xt
;

498 
	`HMAP_FOR_EACH_SAFE
 (
if_cfg
, 
√xt
, 
hm≠_node
, &
br
->
if_cfg_todo
) {

499 
	`iÁ˚_¸óã
(
br
, 
if_cfg
, -1);

500 
	`time_ª‰esh
();

501 i‡(
	`time_m£c
(Ë>
dódlöe
) {

502  
Ál£
;

507  
åue
;

508 
	}
}

510 
boﬁ


511 
	$bridge_ªc⁄figuª_c⁄töue
(c⁄° 
ov§ec_›í_vswôch
 *
ovs_cfg
)

513 
sockaddr_ö
 *
m™agîs
;

514 
sÊow_bridge_numbî
;

515 
size_t
 
n_m™agîs
;

516 
bridge
 *
br
;

517 
boﬁ
 
d⁄e
;

519 
	`as£π
(
ªc⁄figurög
);

520 
d⁄e
 = 
	`bridge_ªc⁄figuª_oÂ
();

523 
sÊow_bridge_numbî
 = 0;

524 
	`cﬁÀ˘_ö_b™d_m™agîs
(
ovs_cfg
, &
m™agîs
, &
n_m™agîs
);

525 
	`HMAP_FOR_EACH
 (
br
, 
node
, &
Æl_bridges
) {

526 
p‹t
 *port;

530 
	`bridge_c⁄figuª_d©≠©h_id
(
br
);

532 
	`HMAP_FOR_EACH
 (
p‹t
, 
hm≠_node
, &
br
->
p‹ts
) {

533 
iÁ˚
 *iface;

535 
	`p‹t_c⁄figuª
(
p‹t
);

537 
	`LIST_FOR_EACH
 (
iÁ˚
, 
p‹t_ñem
, &
p‹t
->
iÁ˚s
) {

538 
	`iÁ˚_c⁄figuª_cfm
(
iÁ˚
);

539 
	`iÁ˚_c⁄figuª_qos
(
iÁ˚
, 
p‹t
->
cfg
->
qos
);

540 
	`iÁ˚_£t_mac
(
iÁ˚
);

543 
	`bridge_c⁄figuª_múr‹s
(
br
);

544 
	`bridge_c⁄figuª_Êow_evi˘i⁄_thªshﬁd
(
br
);

545 
	`bridge_c⁄figuª_f‹w¨d_bpdu
(
br
);

546 
	`bridge_c⁄figuª_mac_idÀ_time
(
br
);

547 
	`bridge_c⁄figuª_ªmŸes
(
br
, 
m™agîs
, 
n_m™agîs
);

548 
	`bridge_c⁄figuª_√tÊow
(
br
);

549 
	`bridge_c⁄figuª_sÊow
(
br
, &
sÊow_bridge_numbî
);

550 
	`bridge_c⁄figuª_°p
(
br
);

551 
	`bridge_c⁄figuª_èbÀs
(
br
);

553 
	`‰ì
(
m™agîs
);

555 i‡(
d⁄e
) {

558 
	`d´m⁄ize_com∂ëe
();

559 
ªc⁄figurög
 = 
Ál£
;

561 
	`VLOG_INFO
("%†(O≥¿vSwôchË%s", 
¥ogøm_«me
, 
VERSION
);

564  
d⁄e
;

565 
	}
}

570 
	$bridge_upd©e_oÂrŸos
()

572 
bridge
 *
br
, *
√xt
;

573 
s£t
 
«mes
;

574 
s£t
 
ty≥s
;

575 c⁄° *
ty≥
;

578 
	`s£t_öô
(&
«mes
);

579 
	`s£t_öô
(&
ty≥s
);

580 
	`oÂrŸo_íumî©e_ty≥s
(&
ty≥s
);

581 
	`SSET_FOR_EACH
 (
ty≥
, &
ty≥s
) {

582 c⁄° *
«me
;

584 
	`oÂrŸo_íumî©e_«mes
(
ty≥
, &
«mes
);

585 
	`SSET_FOR_EACH
 (
«me
, &
«mes
) {

586 
br
 = 
	`bridge_lookup
(
«me
);

587 i‡(!
br
 || 
	`°rcmp
(
ty≥
, br->type)) {

588 
	`oÂrŸo_dñëe
(
«me
, 
ty≥
);

592 
	`s£t_de°roy
(&
«mes
);

593 
	`s£t_de°roy
(&
ty≥s
);

596 
	`HMAP_FOR_EACH_SAFE
 (
br
, 
√xt
, 
node
, &
Æl_bridges
) {

597 
bridge
 *
br2
;

598 
îr‹
;

600 i‡(
br
->
oÂrŸo
) {

607 
	`HMAP_FOR_EACH
 (
br2
, 
node
, &
Æl_bridges
) {

608 
oÂrŸo_p‹t
 ofproto_port;

610 i‡(!
br2
->
oÂrŸo
) {

614 i‡(!
	`oÂrŸo_p‹t_quîy_by_«me
(
br2
->
oÂrŸo
, 
br
->
«me
,

615 &
oÂrŸo_p‹t
)) {

616 
îr‹
 = 
	`oÂrŸo_p‹t_dñ
(
br2
->
oÂrŸo
, 
oÂrŸo_p‹t
.
oÂ_p‹t
);

617 i‡(
îr‹
) {

618 
	`VLOG_ERR
("ÁûedÅÿdñëêp‹à%s: %s", 
oÂrŸo_p‹t
.
«me
,

619 
	`°ªº‹
(
îr‹
));

621 
	`oÂrŸo_p‹t_de°roy
(&
oÂrŸo_p‹t
);

625 
îr‹
 = 
	`oÂrŸo_¸óã
(
br
->
«me
, br->
ty≥
, &br->
oÂrŸo
);

626 i‡(
îr‹
) {

627 
	`VLOG_ERR
("ÁûedÅÿ¸óã bridgê%s: %s", 
br
->
«me
,

628 
	`°ªº‹
(
îr‹
));

629 
	`bridge_de°roy
(
br
);

632 
	}
}

635 
	$p‹t_c⁄figuª
(
p‹t
 *port)

637 c⁄° 
ov§ec_p‹t
 *
cfg
 = 
p‹t
->cfg;

638 
b⁄d_£âögs
 bond_settings;

639 
œ˝_£âögs
Üacp_settings;

640 
oÂrŸo_bundÀ_£âögs
 
s
;

641 
iÁ˚
 *iface;

643 i‡(
cfg
->
vœn_mode
 && !
	`°rcmp
(cfg->vlan_mode, "splinter")) {

644 
	`c⁄figuª_•löãr_p‹t
(
p‹t
);

649 
s
.
«me
 = 
p‹t
->name;

652 
s
.
n_¶aves
 = 0;

653 
s
.
¶aves
 = 
	`xmÆloc
(
	`li°_size
(&
p‹t
->
iÁ˚s
) *  *s.slaves);

654 
	`LIST_FOR_EACH
 (
iÁ˚
, 
p‹t_ñem
, &
p‹t
->
iÁ˚s
) {

655 
s
.
¶aves
[s.
n_¶aves
++] = 
iÁ˚
->
oÂ_p‹t
;

659 
s
.
vœn
 = -1;

660 i‡(
cfg
->
èg
 && *cfg->tag >= 0 && *cfg->tag <= 4095) {

661 
s
.
vœn
 = *
cfg
->
èg
;

665 
s
.
åunks
 = 
NULL
;

666 i‡(
cfg
->
n_åunks
) {

667 
s
.
åunks
 = 
	`vœn_bôm≠_‰om_¨øy
(
cfg
->åunks, cfg->
n_åunks
);

671 i‡(
cfg
->
vœn_mode
) {

672 i‡(!
	`°rcmp
(
cfg
->
vœn_mode
, "access")) {

673 
s
.
vœn_mode
 = 
PORT_VLAN_ACCESS
;

674 } i‡(!
	`°rcmp
(
cfg
->
vœn_mode
, "trunk")) {

675 
s
.
vœn_mode
 = 
PORT_VLAN_TRUNK
;

676 } i‡(!
	`°rcmp
(
cfg
->
vœn_mode
, "native-tagged")) {

677 
s
.
vœn_mode
 = 
PORT_VLAN_NATIVE_TAGGED
;

678 } i‡(!
	`°rcmp
(
cfg
->
vœn_mode
, "native-untagged")) {

679 
s
.
vœn_mode
 = 
PORT_VLAN_NATIVE_UNTAGGED
;

682 
	`VLOG_ERR
("unknow¿VLAN modê%s", 
cfg
->
vœn_mode
);

683 
s
.
vœn_mode
 = 
PORT_VLAN_TRUNK
;

686 i‡(
s
.
vœn
 >= 0) {

687 
s
.
vœn_mode
 = 
PORT_VLAN_ACCESS
;

688 i‡(
cfg
->
n_åunks
) {

689 
	`VLOG_ERR
("port %s: ignoringÅrunks in favor of implicit vlan",

690 
p‹t
->
«me
);

693 
s
.
vœn_mode
 = 
PORT_VLAN_TRUNK
;

696 
s
.
u£_¥i‹ôy_ègs
 = 
	`sm≠_gë_boﬁ
(&
cfg
->
Ÿhî_c⁄fig
, "priority-tags",

697 
Ál£
);

700 
s
.
œ˝
 = 
	`p‹t_c⁄figuª_œ˝
(
p‹t
, &
œ˝_£âögs
);

701 i‡(
s
.
œ˝
) {

702 
size_t
 
i
 = 0;

704 
s
.
œ˝_¶aves
 = 
	`xmÆloc
(s.
n_¶aves
 *  *s.lacp_slaves);

705 
	`LIST_FOR_EACH
 (
iÁ˚
, 
p‹t_ñem
, &
p‹t
->
iÁ˚s
) {

706 
	`iÁ˚_c⁄figuª_œ˝
(
iÁ˚
, &
s
.
œ˝_¶aves
[
i
++]);

709 
s
.
œ˝_¶aves
 = 
NULL
;

713 i‡(
s
.
n_¶aves
 > 1) {

714 
s
.
b⁄d
 = &
b⁄d_£âögs
;

715 
s
.
b⁄d_°abÀ_ids
 = 
	`xmÆloc
(s.
n_¶aves
 *  *s.bond_stable_ids);

716 
	`p‹t_c⁄figuª_b⁄d
(
p‹t
, &
b⁄d_£âögs
, 
s
.
b⁄d_°abÀ_ids
);

718 
s
.
b⁄d
 = 
NULL
;

719 
s
.
b⁄d_°abÀ_ids
 = 
NULL
;

721 
	`LIST_FOR_EACH
 (
iÁ˚
, 
p‹t_ñem
, &
p‹t
->
iÁ˚s
) {

722 
	`√tdev_£t_miim⁄_öãrvÆ
(
iÁ˚
->
√tdev
, 0);

727 
	`oÂrŸo_bundÀ_ªgi°î
(
p‹t
->
bridge
->
oÂrŸo
,Ö‹t, &
s
);

730 
	`‰ì
(
s
.
¶aves
);

731 
	`‰ì
(
s
.
åunks
);

732 
	`‰ì
(
s
.
œ˝_¶aves
);

733 
	`‰ì
(
s
.
b⁄d_°abÀ_ids
);

734 
	}
}

738 
	$bridge_c⁄figuª_d©≠©h_id
(
bridge
 *
br
)

740 
uöt8_t
 
ó
[
ETH_ADDR_LEN
];

741 
uöt64_t
 
dpid
;

742 
iÁ˚
 *
loˇl_iÁ˚
;

743 
iÁ˚
 *
hw_addr_iÁ˚
;

744 *
dpid_°rög
;

746 
	`bridge_pick_loˇl_hw_addr
(
br
, 
ó
, &
hw_addr_iÁ˚
);

747 
loˇl_iÁ˚
 = 
	`iÁ˚_‰om_oÂ_p‹t
(
br
, 
OFPP_LOCAL
);

748 i‡(
loˇl_iÁ˚
) {

749 
îr‹
 = 
	`√tdev_£t_ëhîaddr
(
loˇl_iÁ˚
->
√tdev
, 
ó
);

750 i‡(
îr‹
) {

751 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 5);

752 
	`VLOG_ERR_RL
(&
æ
, "bridge %s: failedÅo set bridge "

754 
br
->
«me
, 
	`°ªº‹
(
îr‹
));

757 
	`mem˝y
(
br
->
ó
,Éa, 
ETH_ADDR_LEN
);

759 
dpid
 = 
	`bridge_pick_d©≠©h_id
(
br
, 
ó
, 
hw_addr_iÁ˚
);

760 i‡(
dpid
 !
	`oÂrŸo_gë_d©≠©h_id
(
br
->
oÂrŸo
)) {

761 
	`VLOG_INFO
("bridgê%s: usög d©≠©h ID %016"
PRIx64
, 
br
->
«me
, 
dpid
);

762 
	`oÂrŸo_£t_d©≠©h_id
(
br
->
oÂrŸo
, 
dpid
);

765 
dpid_°rög
 = 
	`xa•rötf
("%016"
PRIx64
, 
dpid
);

766 
	`ov§ec_bridge_£t_d©≠©h_id
(
br
->
cfg
, 
dpid_°rög
);

767 
	`‰ì
(
dpid_°rög
);

768 
	}
}

772 
	$bridge_c⁄figuª_√tÊow
(
bridge
 *
br
)

774 
ov§ec_√tÊow
 *
cfg
 = 
br
->cfg->
√tÊow
;

775 
√tÊow_›ti⁄s
 
›ts
;

777 i‡(!
cfg
) {

778 
	`oÂrŸo_£t_√tÊow
(
br
->
oÂrŸo
, 
NULL
);

782 
	`mem£t
(&
›ts
, 0,  opts);

786 
	`oÂrŸo_gë_√tÊow_ids
(
br
->
oÂrŸo
, &
›ts
.
ígöe_ty≥
, &›ts.
ígöe_id
);

787 i‡(
cfg
->
ígöe_ty≥
) {

788 
›ts
.
ígöe_ty≥
 = *
cfg
->engine_type;

790 i‡(
cfg
->
ígöe_id
) {

791 
›ts
.
ígöe_id
 = *
cfg
->engine_id;

795 
›ts
.
a˘ive_timeout
 = 
cfg
->active_timeout;

796 i‡(!
›ts
.
a˘ive_timeout
) {

797 
›ts
.
a˘ive_timeout
 = -1;

798 } i‡(
›ts
.
a˘ive_timeout
 < 0) {

799 
	`VLOG_WARN
("bridge %s:áctiveÅimeout interval setÅoÇegative "

800 "vÆue, usög deÁu… in°ód (%d sec⁄ds)", 
br
->
«me
,

801 
NF_ACTIVE_TIMEOUT_DEFAULT
);

802 
›ts
.
a˘ive_timeout
 = -1;

806 
›ts
.
add_id_to_iÁ˚
 = 
cfg
->
add_id_to_öãrÁ˚
;

807 i‡(
›ts
.
add_id_to_iÁ˚
) {

808 i‡(
›ts
.
ígöe_id
 > 0x7f) {

809 
	`VLOG_WARN
("bridge %s: NetFlowÖort mangling may conflict with "

811 
br
->
«me
);

813 i‡(
	`hm≠_cou¡
(&
br
->
p‹ts
) > 508) {

814 
	`VLOG_WARN
("bridge %s: NetFlowÖort mangling will conflict with "

816 
br
->
«me
);

821 
	`s£t_öô
(&
›ts
.
cﬁÀ˘‹s
);

822 
	`s£t_add_¨øy
(&
›ts
.
cﬁÀ˘‹s
, 
cfg
->
èrgës
, cfg->
n_èrgës
);

825 i‡(
	`oÂrŸo_£t_√tÊow
(
br
->
oÂrŸo
, &
›ts
)) {

826 
	`VLOG_ERR
("bridgê%s:ÖrobÀm sëtögÇëÊow cﬁÀ˘‹s", 
br
->
«me
);

828 
	`s£t_de°roy
(&
›ts
.
cﬁÀ˘‹s
);

829 
	}
}

833 
	$bridge_c⁄figuª_sÊow
(
bridge
 *
br
, *
sÊow_bridge_numbî
)

835 c⁄° 
ov§ec_sÊow
 *
cfg
 = 
br
->cfg->
sÊow
;

836 
ov§ec_c⁄åﬁÀr
 **
c⁄åﬁÀrs
;

837 
oÂrŸo_sÊow_›ti⁄s
 
oso
;

838 
size_t
 
n_c⁄åﬁÀrs
;

839 
size_t
 
i
;

841 i‡(!
cfg
) {

842 
	`oÂrŸo_£t_sÊow
(
br
->
oÂrŸo
, 
NULL
);

846 
	`mem£t
(&
oso
, 0,  oso);

848 
	`s£t_öô
(&
oso
.
èrgës
);

849 
	`s£t_add_¨øy
(&
oso
.
èrgës
, 
cfg
->èrgës, cfg->
n_èrgës
);

851 
oso
.
ßm∂ög_øã
 = 
SFL_DEFAULT_SAMPLING_RATE
;

852 i‡(
cfg
->
ßm∂ög
) {

853 
oso
.
ßm∂ög_øã
 = *
cfg
->
ßm∂ög
;

856 
oso
.
pﬁlög_öãrvÆ
 = 
SFL_DEFAULT_POLLING_INTERVAL
;

857 i‡(
cfg
->
pﬁlög
) {

858 
oso
.
pﬁlög_öãrvÆ
 = *
cfg
->
pﬁlög
;

861 
oso
.
hódî_Àn
 = 
SFL_DEFAULT_HEADER_SIZE
;

862 i‡(
cfg
->
hódî
) {

863 
oso
.
hódî_Àn
 = *
cfg
->
hódî
;

866 
oso
.
sub_id
 = (*
sÊow_bridge_numbî
)++;

867 
oso
.
agít_devi˚
 = 
cfg
->
agít
;

869 
oso
.
c⁄åﬁ_ù
 = 
NULL
;

870 
n_c⁄åﬁÀrs
 = 
	`bridge_gë_c⁄åﬁÀrs
(
br
, &
c⁄åﬁÀrs
);

871 
i
 = 0; i < 
n_c⁄åﬁÀrs
; i++) {

872 i‡(
c⁄åﬁÀrs
[
i
]->
loˇl_ù
) {

873 
oso
.
c⁄åﬁ_ù
 = 
c⁄åﬁÀrs
[
i
]->
loˇl_ù
;

877 
	`oÂrŸo_£t_sÊow
(
br
->
oÂrŸo
, &
oso
);

879 
	`s£t_de°roy
(&
oso
.
èrgës
);

880 
	}
}

883 
	$p‹t_c⁄figuª_°p
(c⁄° 
oÂrŸo
 *oÂrŸo, 
p‹t
 *port,

884 
oÂrŸo_p‹t_°p_£âögs
 *
p‹t_s
,

885 *
p‹t_num_cou¡î
, *
p‹t_num_bôm≠
)

887 c⁄° *
c⁄fig_°r
;

888 
iÁ˚
 *iface;

890 i‡(!
	`sm≠_gë_boﬁ
(&
p‹t
->
cfg
->
Ÿhî_c⁄fig
, "°p-íabÀ", 
åue
)) {

891 
p‹t_s
->
íabÀ
 = 
Ál£
;

894 
p‹t_s
->
íabÀ
 = 
åue
;

898 i‡(!
	`li°_is_sögÀt⁄
(&
p‹t
->
iÁ˚s
)) {

899 
	`VLOG_ERR
("port %s: cannotÉnable STP on bonds, disabling",

900 
p‹t
->
«me
);

901 
p‹t_s
->
íabÀ
 = 
Ál£
;

905 
iÁ˚
 = 
	`CONTAINER_OF
(
	`li°_‰⁄t
(&
p‹t
->
iÁ˚s
), iÁ˚, 
p‹t_ñem
);

909 i‡(!
	`°rcmp
(
iÁ˚
->
ty≥
, "internal")) {

910 
	`VLOG_DBG
("p‹à%s: dißbÀ STP o¿öã∫ÆÖ‹ts", 
p‹t
->
«me
);

911 
p‹t_s
->
íabÀ
 = 
Ál£
;

916 i‡(
	`oÂrŸo_is_múr‹_ouçut_bundÀ
(
oÂrŸo
, 
p‹t
)) {

917 
	`VLOG_DBG
("p‹à%s: dißbÀ STP o¿múr‹Ö‹ts", 
p‹t
->
«me
);

918 
p‹t_s
->
íabÀ
 = 
Ál£
;

922 
c⁄fig_°r
 = 
	`sm≠_gë
(&
p‹t
->
cfg
->
Ÿhî_c⁄fig
, "stp-port-num");

923 i‡(
c⁄fig_°r
) {

924 
p‹t_num
 = 
	`°πoul
(
c⁄fig_°r
, 
NULL
, 0);

925 
p‹t_idx
 = 
p‹t_num
 - 1;

927 i‡(
p‹t_num
 < 1 ||Ö‹t_num > 
STP_MAX_PORTS
) {

928 
	`VLOG_ERR
("p‹à%s: invÆid sç-p‹t-num", 
p‹t
->
«me
);

929 
p‹t_s
->
íabÀ
 = 
Ál£
;

933 i‡(
	`bôm≠_is_£t
(
p‹t_num_bôm≠
, 
p‹t_idx
)) {

934 
	`VLOG_ERR
("port %s: duplicate stp-port-num %lu, disabling",

935 
p‹t
->
«me
, 
p‹t_num
);

936 
p‹t_s
->
íabÀ
 = 
Ál£
;

939 
	`bôm≠_£t1
(
p‹t_num_bôm≠
, 
p‹t_idx
);

940 
p‹t_s
->
p‹t_num
 = 
p‹t_idx
;

942 i‡(*
p‹t_num_cou¡î
 >
STP_MAX_PORTS
) {

943 
	`VLOG_ERR
("p‹à%s:Åoÿm™y STPÖ‹ts, dißblög", 
p‹t
->
«me
);

944 
p‹t_s
->
íabÀ
 = 
Ál£
;

948 
p‹t_s
->
p‹t_num
 = (*
p‹t_num_cou¡î
)++;

951 
c⁄fig_°r
 = 
	`sm≠_gë
(&
p‹t
->
cfg
->
Ÿhî_c⁄fig
, "stp-path-cost");

952 i‡(
c⁄fig_°r
) {

953 
p‹t_s
->
∑th_co°
 = 
	`°πoul
(
c⁄fig_°r
, 
NULL
, 10);

955 
√tdev_„©uªs
 
cuºít
;

957 i‡(
	`√tdev_gë_„©uªs
(
iÁ˚
->
√tdev
, &
cuºít
, 
NULL
, NULL, NULL)) {

959 
p‹t_s
->
∑th_co°
 = 19;

961 
mbps
;

963 
mbps
 = 
	`√tdev_„©uªs_to_bps
(
cuºít
) / 1000000;

964 
p‹t_s
->
∑th_co°
 = 
	`°p_c⁄vît_•ìd_to_co°
(
mbps
);

968 
c⁄fig_°r
 = 
	`sm≠_gë
(&
p‹t
->
cfg
->
Ÿhî_c⁄fig
, "stp-port-priority");

969 i‡(
c⁄fig_°r
) {

970 
p‹t_s
->
¥i‹ôy
 = 
	`°πoul
(
c⁄fig_°r
, 
NULL
, 0);

972 
p‹t_s
->
¥i‹ôy
 = 
STP_DEFAULT_PORT_PRIORITY
;

974 
	}
}

978 
	$bridge_c⁄figuª_°p
(
bridge
 *
br
)

980 i‡(!
br
->
cfg
->
°p_íabÀ
) {

981 
	`oÂrŸo_£t_°p
(
br
->
oÂrŸo
, 
NULL
);

983 
oÂrŸo_°p_£âögs
 
br_s
;

984 c⁄° *
c⁄fig_°r
;

985 
p‹t
 *port;

986 
p‹t_num_cou¡î
;

987 *
p‹t_num_bôm≠
;

989 
c⁄fig_°r
 = 
	`sm≠_gë
(&
br
->
cfg
->
Ÿhî_c⁄fig
, "stp-system-id");

990 i‡(
c⁄fig_°r
) {

991 
uöt8_t
 
ó
[
ETH_ADDR_LEN
];

993 i‡(
	`ëh_addr_‰om_°rög
(
c⁄fig_°r
, 
ó
)) {

994 
br_s
.
sy°em_id
 = 
	`ëh_addr_to_uöt64
(
ó
);

996 
br_s
.
sy°em_id
 = 
	`ëh_addr_to_uöt64
(
br
->
ó
);

997 
	`VLOG_ERR
("bridge %s: invalid stp-system-id, defaulting "

998 "tÿ"
ETH_ADDR_FMT
, 
br
->
«me
, 
	`ETH_ADDR_ARGS
(br->
ó
));

1001 
br_s
.
sy°em_id
 = 
	`ëh_addr_to_uöt64
(
br
->
ó
);

1004 
c⁄fig_°r
 = 
	`sm≠_gë
(&
br
->
cfg
->
Ÿhî_c⁄fig
, "stp-priority");

1005 i‡(
c⁄fig_°r
) {

1006 
br_s
.
¥i‹ôy
 = 
	`°πoul
(
c⁄fig_°r
, 
NULL
, 0);

1008 
br_s
.
¥i‹ôy
 = 
STP_DEFAULT_BRIDGE_PRIORITY
;

1011 
c⁄fig_°r
 = 
	`sm≠_gë
(&
br
->
cfg
->
Ÿhî_c⁄fig
, "stp-hello-time");

1012 i‡(
c⁄fig_°r
) {

1013 
br_s
.
hñlo_time
 = 
	`°πoul
(
c⁄fig_°r
, 
NULL
, 10) * 1000;

1015 
br_s
.
hñlo_time
 = 
STP_DEFAULT_HELLO_TIME
;

1018 
c⁄fig_°r
 = 
	`sm≠_gë
(&
br
->
cfg
->
Ÿhî_c⁄fig
, "stp-max-age");

1019 i‡(
c⁄fig_°r
) {

1020 
br_s
.
max_age
 = 
	`°πoul
(
c⁄fig_°r
, 
NULL
, 10) * 1000;

1022 
br_s
.
max_age
 = 
STP_DEFAULT_MAX_AGE
;

1025 
c⁄fig_°r
 = 
	`sm≠_gë
(&
br
->
cfg
->
Ÿhî_c⁄fig
, "stp-forward-delay");

1026 i‡(
c⁄fig_°r
) {

1027 
br_s
.
fwd_dñay
 = 
	`°πoul
(
c⁄fig_°r
, 
NULL
, 10) * 1000;

1029 
br_s
.
fwd_dñay
 = 
STP_DEFAULT_FWD_DELAY
;

1033 i‡(
	`oÂrŸo_£t_°p
(
br
->
oÂrŸo
, &
br_s
)) {

1034 
	`VLOG_ERR
("bridgê%s: couldÇŸÉ«bÀ STP", 
br
->
«me
);

1041 
p‹t_num_cou¡î
 = 0;

1042 
p‹t_num_bôm≠
 = 
	`bôm≠_Æloˇã
(
STP_MAX_PORTS
);

1043 
	`HMAP_FOR_EACH
 (
p‹t
, 
hm≠_node
, &
br
->
p‹ts
) {

1044 
oÂrŸo_p‹t_°p_£âögs
 
p‹t_s
;

1045 
iÁ˚
 *iface;

1047 
	`p‹t_c⁄figuª_°p
(
br
->
oÂrŸo
, 
p‹t
, &
p‹t_s
,

1048 &
p‹t_num_cou¡î
, 
p‹t_num_bôm≠
);

1052 
	`LIST_FOR_EACH
 (
iÁ˚
, 
p‹t_ñem
, &
p‹t
->
iÁ˚s
) {

1053 i‡(
	`oÂrŸo_p‹t_£t_°p
(
br
->
oÂrŸo
, 
iÁ˚
->
oÂ_p‹t
,

1054 &
p‹t_s
)) {

1055 
	`VLOG_ERR
("p‹à%s: couldÇŸÉ«bÀ STP", 
p‹t
->
«me
);

1061 i‡(
	`bôm≠_sˇn
(
p‹t_num_bôm≠
, 0, 
STP_MAX_PORTS
) != STP_MAX_PORTS

1062 && 
p‹t_num_cou¡î
) {

1063 
	`VLOG_ERR
("bridge %s: must manually configureáll STPÖort "

1064 "ID†‹Ç⁄e, dißblög", 
br
->
«me
);

1065 
	`oÂrŸo_£t_°p
(
br
->
oÂrŸo
, 
NULL
);

1067 
	`bôm≠_‰ì
(
p‹t_num_bôm≠
);

1069 
	}
}

1071 
boﬁ


1072 
	$bridge_has_b⁄d_Áke_iÁ˚
(c⁄° 
bridge
 *
br
, c⁄° *
«me
)

1074 c⁄° 
p‹t
 *p‹à
	`p‹t_lookup
(
br
, 
«me
);

1075  
p‹t
 && 
	`p‹t_is_b⁄d_Áke_iÁ˚
(port);

1076 
	}
}

1078 
boﬁ


1079 
	$p‹t_is_b⁄d_Áke_iÁ˚
(c⁄° 
p‹t
 *port)

1081  
p‹t
->
cfg
->
b⁄d_Áke_iÁ˚
 && !
	`li°_is_sh‹t
(&p‹t->
iÁ˚s
);

1082 
	}
}

1085 
	$add_dñ_bridges
(c⁄° 
ov§ec_›í_vswôch
 *
cfg
)

1087 
bridge
 *
br
, *
√xt
;

1088 
shash
 
√w_br
;

1089 
size_t
 
i
;

1092 
	`shash_öô
(&
√w_br
);

1093 
i
 = 0; i < 
cfg
->
n_bridges
; i++) {

1094 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 5);

1095 c⁄° 
ov§ec_bridge
 *
br_cfg
 = 
cfg
->
bridges
[
i
];

1097 i‡(
	`°rchr
(
br_cfg
->
«me
, '/')) {

1100 
	`VLOG_WARN_RL
(&
æ
, "ignoring bridge with invalidÇame \"%s\"",

1101 
br_cfg
->
«me
);

1102 } i‡(!
	`shash_add_⁄˚
(&
√w_br
, 
br_cfg
->
«me
, br_cfg)) {

1103 
	`VLOG_WARN_RL
(&
æ
, "bridgê%†•ecifõdÅwi˚", 
br_cfg
->
«me
);

1109 
	`HMAP_FOR_EACH_SAFE
 (
br
, 
√xt
, 
node
, &
Æl_bridges
) {

1110 
br
->
cfg
 = 
	`shash_föd_d©a
(&
√w_br
, br->
«me
);

1111 i‡(!
br
->
cfg
 || 
	`°rcmp
(br->
ty≥
, 
	`oÂrŸo_n‹mÆize_ty≥
(

1112 
br
->
cfg
->
d©≠©h_ty≥
))) {

1113 
	`bridge_de°roy
(
br
);

1118 
i
 = 0; i < 
cfg
->
n_bridges
; i++) {

1119 c⁄° 
ov§ec_bridge
 *
br_cfg
 = 
cfg
->
bridges
[
i
];

1120 
bridge
 *
br
 = 
	`bridge_lookup
(
br_cfg
->
«me
);

1121 i‡(!
br
) {

1122 
	`bridge_¸óã
(
br_cfg
);

1126 
	`shash_de°roy
(&
√w_br
);

1127 
	}
}

1130 
	$iÁ˚_£t_oÂ_p‹t
(
iÁ˚
 *iÁ˚, 
oÂ_p‹t
)

1132 
bridge
 *
br
 = 
iÁ˚
->
p‹t
->bridge;

1134 
	`as£π
(
iÁ˚
->
oÂ_p‹t
 < 0 && ofp_port >= 0);

1135 
iÁ˚
->
oÂ_p‹t
 = ofp_port;

1136 
	`hm≠_ö£π
(&
br
->
iÁ˚s
, &
iÁ˚
->
oÂ_p‹t_node
, 
	`hash_öt
(
oÂ_p‹t
, 0));

1137 
	`iÁ˚_£t_oÂ‹t
(
iÁ˚
->
cfg
, 
oÂ_p‹t
);

1138 
	}
}

1143 
	$iÁ˚_£t_√tdev_c⁄fig
(c⁄° 
ov§ec_öãrÁ˚
 *
iÁ˚_cfg
,

1144 
√tdev
 *netdev)

1146 
îr‹
;

1148 
îr‹
 = 
	`√tdev_£t_c⁄fig
(
√tdev
, &
iÁ˚_cfg
->
›ti⁄s
);

1149 i‡(
îr‹
) {

1150 
	`VLOG_WARN
("couldÇot configureÇetwork device %s (%s)",

1151 
iÁ˚_cfg
->
«me
, 
	`°ªº‹
(
îr‹
));

1153  
îr‹
;

1154 
	}
}

1165 
boﬁ


1166 
	$bridge_ª‰esh_⁄e_oÂ_p‹t
(
bridge
 *
br
,

1167 c⁄° 
oÂrŸo_p‹t
 *ofproto_port)

1169 c⁄° *
«me
 = 
oÂrŸo_p‹t
->name;

1170 c⁄° *
ty≥
 = 
oÂrŸo_p‹t
->type;

1171 
uöt16_t
 
oÂ_p‹t
 = 
oÂrŸo_p‹t
->ofp_port;

1173 
iÁ˚
 *iÁ˚ = 
	`iÁ˚_lookup
(
br
, 
«me
);

1174 i‡(
iÁ˚
) {

1176 i‡(
iÁ˚
->
oÂ_p‹t
 >= 0) {

1177 
	`VLOG_WARN
("bridge %s: interface %sÑeportedÅwice",

1178 
br
->
«me
,Çame);

1179  
Ál£
;

1180 } i‡(
	`iÁ˚_‰om_oÂ_p‹t
(
br
, 
oÂ_p‹t
)) {

1181 
	`VLOG_WARN
("bridgê%s: i¡îÁ˚ %"
PRIu16
"ÑeportedÅwice",

1182 
br
->
«me
, 
oÂ_p‹t
);

1183  
Ál£
;

1187 i‡(
	`°rcmp
(
ty≥
, 
iÁ˚
->type)

1188 || 
	`iÁ˚_£t_√tdev_c⁄fig
(
iÁ˚
->
cfg
, iÁ˚->
√tdev
)) {

1191  
Ál£
;

1194 
	`iÁ˚_£t_oÂ_p‹t
(
iÁ˚
, 
oÂ_p‹t
);

1195  
åue
;

1197 } i‡(
	`bridge_has_b⁄d_Áke_iÁ˚
(
br
, 
«me
)

1198 && !
	`°rcmp
(
ty≥
, "internal")) {

1200  
åue
;

1208 
if_cfg
 *if_cfg = 
	`if_cfg_lookup
(
br
, 
«me
);

1209  (
if_cfg


1210 && !
	`°rcmp
(
ty≥
, 
	`iÁ˚_gë_ty≥
(
if_cfg
->
cfg
, 
br
->cfg))

1211 && 
	`iÁ˚_¸óã
(
br
, 
if_cfg
, 
oÂ_p‹t
));

1213 
	}
}

1218 
	$bridge_ª‰esh_oÂ_p‹t
(
bridge
 *
br
)

1220 
oÂrŸo_p‹t_dump
 
dump
;

1221 
oÂrŸo_p‹t
 ofproto_port;

1222 
p‹t
 *p‹t, *
p‹t_√xt
;

1225 
	`hm≠_˛ór
(&
br
->
iÁ˚s
);

1226 
	`HMAP_FOR_EACH
 (
p‹t
, 
hm≠_node
, &
br
->
p‹ts
) {

1227 
iÁ˚
 *iface;

1229 
	`LIST_FOR_EACH
 (
iÁ˚
, 
p‹t_ñem
, &
p‹t
->
iÁ˚s
) {

1230 
iÁ˚
->
oÂ_p‹t
 = -1;

1237 
	`OFPROTO_PORT_FOR_EACH
 (&
oÂrŸo_p‹t
, &
dump
, 
br
->
oÂrŸo
) {

1238 i‡(!
	`bridge_ª‰esh_⁄e_oÂ_p‹t
(
br
, &
oÂrŸo_p‹t
)) {

1239 
oÂp_g¨bage
 *
g¨bage
 = 
	`xmÆloc
( *garbage);

1240 
g¨bage
->
oÂ_p‹t
 = 
oÂrŸo_p‹t
.ofp_port;

1241 
	`li°_push_‰⁄t
(&
br
->
oÂp_g¨bage
, &
g¨bage
->
li°_node
);

1248 
	`HMAP_FOR_EACH_SAFE
 (
p‹t
, 
p‹t_√xt
, 
hm≠_node
, &
br
->
p‹ts
) {

1249 
iÁ˚
 *iÁ˚, *
iÁ˚_√xt
;

1251 
	`LIST_FOR_EACH_SAFE
 (
iÁ˚
, 
iÁ˚_√xt
, 
p‹t_ñem
, &
p‹t
->
iÁ˚s
) {

1252 i‡(
iÁ˚
->
oÂ_p‹t
 < 0) {

1253 
	`bridge_queue_if_cfg
(
br
, 
iÁ˚
->
cfg
, 
p‹t
->cfg);

1254 
	`iÁ˚_de°roy
(
iÁ˚
);

1258 i‡(
	`li°_is_em±y
(&
p‹t
->
iÁ˚s
)) {

1259 
	`p‹t_de°roy
(
p‹t
);

1262 
	}
}

1272 
	$iÁ˚_do_¸óã
(c⁄° 
bridge
 *
br
,

1273 c⁄° 
ov§ec_öãrÁ˚
 *
iÁ˚_cfg
,

1274 c⁄° 
ov§ec_p‹t
 *
p‹t_cfg
,

1275 *
oÂ_p‹ç
, 
√tdev
 **
√tdevp
)

1277 
√tdev
 *netdev;

1278 
îr‹
;

1280 
îr‹
 = 
	`√tdev_›í
(
iÁ˚_cfg
->
«me
,

1281 
	`iÁ˚_gë_ty≥
(
iÁ˚_cfg
, 
br
->
cfg
), &
√tdev
);

1282 i‡(
îr‹
) {

1283 
	`VLOG_WARN
("couldÇot openÇetwork device %s (%s)",

1284 
iÁ˚_cfg
->
«me
, 
	`°ªº‹
(
îr‹
));

1285 
îr‹
;

1288 
îr‹
 = 
	`iÁ˚_£t_√tdev_c⁄fig
(
iÁ˚_cfg
, 
√tdev
);

1289 i‡(
îr‹
) {

1290 
îr‹
;

1293 i‡(*
oÂ_p‹ç
 < 0) {

1294 
uöt16_t
 
oÂ_p‹t
;

1296 
îr‹
 = 
	`oÂrŸo_p‹t_add
(
br
->
oÂrŸo
, 
√tdev
, &
oÂ_p‹t
);

1297 i‡(
îr‹
) {

1298 
îr‹
;

1300 *
oÂ_p‹ç
 = 
oÂ_p‹t
;

1302 
	`VLOG_INFO
("bridge %s:ádded interface %s onÖort %d",

1303 
br
->
«me
, 
iÁ˚_cfg
->«me, *
oÂ_p‹ç
);

1305 
	`VLOG_DBG
("bridge %s: interface %s is onÖort %d",

1306 
br
->
«me
, 
iÁ˚_cfg
->«me, *
oÂ_p‹ç
);

1309 i‡(
p‹t_cfg
->
vœn_mode
 && !
	`°rcmp
(port_cfg->vlan_mode, "splinter")) {

1310 
	`√tdev_tu∫_Êags_⁄
(
√tdev
, 
NETDEV_UP
, 
åue
);

1313 *
√tdevp
 = 
√tdev
;

1316 
îr‹
:

1317 *
√tdevp
 = 
NULL
;

1318 
	`√tdev_˛o£
(
√tdev
);

1319  
îr‹
;

1320 
	}
}

1328 
boﬁ


1329 
	$iÁ˚_¸óã
(
bridge
 *
br
, 
if_cfg
 *if_cfg, 
oÂ_p‹t
)

1331 c⁄° 
ov§ec_öãrÁ˚
 *
iÁ˚_cfg
 = 
if_cfg
->
cfg
;

1332 c⁄° 
ov§ec_p‹t
 *
p‹t_cfg
 = 
if_cfg
->
∑ª¡
;

1334 
√tdev
 *netdev;

1335 
iÁ˚
 *iface;

1336 
p‹t
 *port;

1337 
îr‹
;

1341 
	`hm≠_ªmove
(&
br
->
if_cfg_todo
, &
if_cfg
->
hm≠_node
);

1342 
	`‰ì
(
if_cfg
);

1349 
	`bridge_run_Á°
();

1350 
	`as£π
(!
	`iÁ˚_lookup
(
br
, 
iÁ˚_cfg
->
«me
));

1351 
îr‹
 = 
	`iÁ˚_do_¸óã
(
br
, 
iÁ˚_cfg
, 
p‹t_cfg
, &
oÂ_p‹t
, &
√tdev
);

1352 
	`bridge_run_Á°
();

1353 i‡(
îr‹
) {

1354 
	`iÁ˚_˛ór_db_ªc‹d
(
iÁ˚_cfg
);

1355  
Ál£
;

1359 
p‹t
 = 
	`p‹t_lookup
(
br
, 
p‹t_cfg
->
«me
);

1360 i‡(!
p‹t
) {

1361 
p‹t
 = 
	`p‹t_¸óã
(
br
, 
p‹t_cfg
);

1365 
iÁ˚
 = 
	`xzÆloc
( *iface);

1366 
	`li°_push_back
(&
p‹t
->
iÁ˚s
, &
iÁ˚
->
p‹t_ñem
);

1367 
	`hm≠_ö£π
(&
br
->
iÁ˚_by_«me
, &
iÁ˚
->
«me_node
,

1368 
	`hash_°rög
(
iÁ˚_cfg
->
«me
, 0));

1369 
iÁ˚
->
p‹t
 =Öort;

1370 
iÁ˚
->
«me
 = 
	`x°rdup
(
iÁ˚_cfg
->name);

1371 
iÁ˚
->
oÂ_p‹t
 = -1;

1372 
iÁ˚
->
√tdev
 =Çetdev;

1373 
iÁ˚
->
ty≥
 = 
	`iÁ˚_gë_ty≥
(
iÁ˚_cfg
, 
br
->
cfg
);

1374 
iÁ˚
->
cfg
 = 
iÁ˚_cfg
;

1376 
	`iÁ˚_£t_oÂ_p‹t
(
iÁ˚
, 
oÂ_p‹t
);

1379 
	`iÁ˚_ª‰esh_°©s
(
iÁ˚
);

1380 
	`iÁ˚_ª‰esh_°©us
(
iÁ˚
);

1383 i‡(
	`p‹t_is_b⁄d_Áke_iÁ˚
(
p‹t
)) {

1384 
oÂrŸo_p‹t
 ofproto_port;

1386 i‡(
	`oÂrŸo_p‹t_quîy_by_«me
(
br
->
oÂrŸo
, 
p‹t
->
«me
,

1387 &
oÂrŸo_p‹t
)) {

1388 
√tdev
 *netdev;

1389 
îr‹
;

1391 
îr‹
 = 
	`√tdev_›í
(
p‹t
->
«me
, "öã∫Æ", &
√tdev
);

1392 i‡(!
îr‹
) {

1393 
	`oÂrŸo_p‹t_add
(
br
->
oÂrŸo
, 
√tdev
, 
NULL
);

1394 
	`√tdev_˛o£
(
√tdev
);

1396 
	`VLOG_WARN
("couldÇot openÇetwork device %s (%s)",

1397 
p‹t
->
«me
, 
	`°ªº‹
(
îr‹
));

1401 
	`oÂrŸo_p‹t_de°roy
(&
oÂrŸo_p‹t
);

1405  
åue
;

1406 
	}
}

1410 
	$bridge_c⁄figuª_Êow_evi˘i⁄_thªshﬁd
(
bridge
 *
br
)

1412 c⁄° *
thªshﬁd_°r
;

1413 
thªshﬁd
;

1415 
thªshﬁd_°r
 = 
	`sm≠_gë
(&
br
->
cfg
->
Ÿhî_c⁄fig
,

1417 i‡(
thªshﬁd_°r
) {

1418 
thªshﬁd
 = 
	`°πoul
(
thªshﬁd_°r
, 
NULL
, 10);

1420 
thªshﬁd
 = 
OFPROTO_FLOW_EVICTION_THRESHOLD_DEFAULT
;

1422 
	`oÂrŸo_£t_Êow_evi˘i⁄_thªshﬁd
(
br
->
oÂrŸo
, 
thªshﬁd
);

1423 
	}
}

1427 
	$bridge_c⁄figuª_f‹w¨d_bpdu
(
bridge
 *
br
)

1429 
	`oÂrŸo_£t_f‹w¨d_bpdu
(
br
->
oÂrŸo
,

1430 
	`sm≠_gë_boﬁ
(&
br
->
cfg
->
Ÿhî_c⁄fig
,

1432 
Ál£
));

1433 
	}
}

1437 
	$bridge_c⁄figuª_mac_idÀ_time
(
bridge
 *
br
)

1439 c⁄° *
idÀ_time_°r
;

1440 
idÀ_time
;

1442 
idÀ_time_°r
 = 
	`sm≠_gë
(&
br
->
cfg
->
Ÿhî_c⁄fig
, "mac-aging-time");

1443 
idÀ_time
 = (
idÀ_time_°r
 && 
	`©oi
(idle_time_str)

1444 ? 
	`©oi
(
idÀ_time_°r
)

1445 : 
MAC_ENTRY_DEFAULT_IDLE_TIME
);

1446 
	`oÂrŸo_£t_mac_idÀ_time
(
br
->
oÂrŸo
, 
idÀ_time
);

1447 
	}
}

1450 
	$bridge_pick_loˇl_hw_addr
(
bridge
 *
br
, 
uöt8_t
 
ó
[
ETH_ADDR_LEN
],

1451 
iÁ˚
 **
hw_addr_iÁ˚
)

1453 
hm≠x
 
múr‹_ouçut_p‹ts
;

1454 c⁄° *
hwaddr
;

1455 
p‹t
 *port;

1456 
boﬁ
 
found_addr
 = 
Ál£
;

1457 
îr‹
;

1458 
i
;

1460 *
hw_addr_iÁ˚
 = 
NULL
;

1463 
hwaddr
 = 
	`sm≠_gë
(&
br
->
cfg
->
Ÿhî_c⁄fig
, "hwaddr");

1464 i‡(
hwaddr
 && 
	`ëh_addr_‰om_°rög
(hwaddr, 
ó
)) {

1465 i‡(
	`ëh_addr_is_mu…iˇ°
(
ó
)) {

1466 
	`VLOG_ERR
("bridge %s: cannot set MACáddressÅo multicast "

1467 "addªs†"
ETH_ADDR_FMT
, 
br
->
«me
, 
	`ETH_ADDR_ARGS
(
ó
));

1468 } i‡(
	`ëh_addr_is_zîo
(
ó
)) {

1469 
	`VLOG_ERR
("bridgê%s: c™nŸ së MACáddªs†tÿzîo", 
br
->
«me
);

1479 
	`hm≠x_öô
(&
múr‹_ouçut_p‹ts
);

1480 
i
 = 0; i < 
br
->
cfg
->
n_múr‹s
; i++) {

1481 
ov§ec_múr‹
 *
m
 = 
br
->
cfg
->
múr‹s
[
i
];

1482 i‡(
m
->
ouçut_p‹t
) {

1483 
	`hm≠x_add
(&
múr‹_ouçut_p‹ts
, 
m
->
ouçut_p‹t
);

1489 
	`HMAP_FOR_EACH
 (
p‹t
, 
hm≠_node
, &
br
->
p‹ts
) {

1490 
uöt8_t
 
iÁ˚_ó
[
ETH_ADDR_LEN
];

1491 
iÁ˚
 *
ˇndid©e
;

1492 
iÁ˚
 *iface;

1495 i‡(
	`hm≠x_c⁄èös
(&
múr‹_ouçut_p‹ts
, 
p‹t
->
cfg
)) {

1500 
iÁ˚
 = 
NULL
;

1501 i‡(
p‹t
->
cfg
->
mac
 && 
	`ëh_addr_‰om_°rög
’‹t->cfg->mac, 
iÁ˚_ó
)) {

1504 
	`LIST_FOR_EACH
 (
ˇndid©e
, 
p‹t_ñem
, &
p‹t
->
iÁ˚s
) {

1505 
uöt8_t
 
ˇndid©e_ó
[
ETH_ADDR_LEN
];

1506 i‡(!
	`√tdev_gë_ëhîaddr
(
ˇndid©e
->
√tdev
, 
ˇndid©e_ó
)

1507 && 
	`ëh_addr_equÆs
(
iÁ˚_ó
, 
ˇndid©e_ó
)) {

1508 
iÁ˚
 = 
ˇndid©e
;

1518 
	`LIST_FOR_EACH
 (
ˇndid©e
, 
p‹t_ñem
, &
p‹t
->
iÁ˚s
) {

1519 i‡(!
iÁ˚
 || 
	`°rcmp
(
ˇndid©e
->
«me
, iface->name) < 0) {

1520 
iÁ˚
 = 
ˇndid©e
;

1526 i‡(
iÁ˚
->
oÂ_p‹t
 =
OFPP_LOCAL
) {

1531 
îr‹
 = 
	`√tdev_gë_ëhîaddr
(
iÁ˚
->
√tdev
, 
iÁ˚_ó
);

1532 i‡(
îr‹
) {

1538 i‡(!
	`ëh_addr_is_mu…iˇ°
(
iÁ˚_ó
) &&

1539 !
	`ëh_addr_is_loˇl
(
iÁ˚_ó
) &&

1540 !
	`ëh_addr_is_ª£rved
(
iÁ˚_ó
) &&

1541 !
	`ëh_addr_is_zîo
(
iÁ˚_ó
) &&

1542 (!
found_addr
 || 
	`ëh_addr_com∑ª_3way
(
iÁ˚_ó
, 
ó
) < 0))

1544 
	`mem˝y
(
ó
, 
iÁ˚_ó
, 
ETH_ADDR_LEN
);

1545 *
hw_addr_iÁ˚
 = 
iÁ˚
;

1546 
found_addr
 = 
åue
;

1549 i‡(
found_addr
) {

1550 
	`VLOG_DBG
("bridgê%s: usög bridgêEthî√àaddªs†"
ETH_ADDR_FMT
,

1551 
br
->
«me
, 
	`ETH_ADDR_ARGS
(
ó
));

1553 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 10);

1554 
	`mem˝y
(
ó
, 
br
->
deÁu…_ó
, 
ETH_ADDR_LEN
);

1555 *
hw_addr_iÁ˚
 = 
NULL
;

1556 
	`VLOG_WARN_RL
(&
æ
, "bridge %s: using default bridge Ethernet "

1557 "addªs†"
ETH_ADDR_FMT
, 
br
->
«me
, 
	`ETH_ADDR_ARGS
(
ó
));

1560 
	`hm≠x_de°roy
(&
múr‹_ouçut_p‹ts
);

1561 
	}
}

1568 
uöt64_t


1569 
	$bridge_pick_d©≠©h_id
(
bridge
 *
br
,

1570 c⁄° 
uöt8_t
 
bridge_ó
[
ETH_ADDR_LEN
],

1571 
iÁ˚
 *
hw_addr_iÁ˚
)

1585 c⁄° *
d©≠©h_id
;

1586 
uöt64_t
 
dpid
;

1588 
d©≠©h_id
 = 
	`sm≠_gë
(&
br
->
cfg
->
Ÿhî_c⁄fig
, "datapath-id");

1589 i‡(
d©≠©h_id
 && 
	`dpid_‰om_°rög
(d©≠©h_id, &
dpid
)) {

1590  
dpid
;

1593 i‡(!
hw_addr_iÁ˚
) {

1608 c⁄° *
ho°_uuid
 = 
	`xí£rvî_gë_ho°_uuid
();

1609 i‡(
ho°_uuid
) {

1610 *
comböed
 = 
	`xa•rötf
("%s,%s", 
ho°_uuid
, 
br
->
«me
);

1611 
dpid
 = 
	`dpid_‰om_hash
(
comböed
, 
	`°æí
(combined));

1612 
	`‰ì
(
comböed
);

1613  
dpid
;

1617  
	`ëh_addr_to_uöt64
(
bridge_ó
);

1618 
	}
}

1620 
uöt64_t


1621 
	$dpid_‰om_hash
(c⁄° *
d©a
, 
size_t
 
n
)

1623 
uöt8_t
 
hash
[
SHA1_DIGEST_SIZE
];

1625 
	`BUILD_ASSERT_DECL
( 
hash
 >
ETH_ADDR_LEN
);

1626 
	`sha1_byãs
(
d©a
, 
n
, 
hash
);

1627 
	`ëh_addr_m¨k_øndom
(
hash
);

1628  
	`ëh_addr_to_uöt64
(
hash
);

1629 
	}
}

1632 
	$iÁ˚_ª‰esh_°©us
(
iÁ˚
 *iface)

1634 
sm≠
 smap;

1636 
√tdev_„©uªs
 
cuºít
;

1637 
öt64_t
 
bps
;

1638 
mtu
;

1639 
öt64_t
 
mtu_64
;

1640 
îr‹
;

1642 i‡(
	`iÁ˚_is_sy¡hëic
(
iÁ˚
)) {

1646 
	`sm≠_öô
(&
sm≠
);

1648 i‡(!
	`√tdev_gë_drv_öfo
(
iÁ˚
->
√tdev
, &
sm≠
)) {

1649 
	`ov§ec_öãrÁ˚_£t_°©us
(
iÁ˚
->
cfg
, &
sm≠
);

1651 
	`ov§ec_öãrÁ˚_£t_°©us
(
iÁ˚
->
cfg
, 
NULL
);

1654 
	`sm≠_de°roy
(&
sm≠
);

1656 
îr‹
 = 
	`√tdev_gë_„©uªs
(
iÁ˚
->
√tdev
, &
cuºít
, 
NULL
, NULL, NULL);

1657 i‡(!
îr‹
) {

1658 
	`ov§ec_öãrÁ˚_£t_du∂ex
(
iÁ˚
->
cfg
,

1659 
	`√tdev_„©uªs_is_fuŒ_du∂ex
(
cuºít
)

1662 
bps
 = 
	`√tdev_„©uªs_to_bps
(
cuºít
);

1663 
	`ov§ec_öãrÁ˚_£t_lök_•ìd
(
iÁ˚
->
cfg
, &
bps
, 1);

1666 
	`ov§ec_öãrÁ˚_£t_du∂ex
(
iÁ˚
->
cfg
, 
NULL
);

1667 
	`ov§ec_öãrÁ˚_£t_lök_•ìd
(
iÁ˚
->
cfg
, 
NULL
, 0);

1670 
îr‹
 = 
	`√tdev_gë_mtu
(
iÁ˚
->
√tdev
, &
mtu
);

1671 i‡(!
îr‹
) {

1672 
mtu_64
 = 
mtu
;

1673 
	`ov§ec_öãrÁ˚_£t_mtu
(
iÁ˚
->
cfg
, &
mtu_64
, 1);

1676 
	`ov§ec_öãrÁ˚_£t_mtu
(
iÁ˚
->
cfg
, 
NULL
, 0);

1678 
	}
}

1683 
	$iÁ˚_ª‰esh_cfm_°©s
(
iÁ˚
 *iface)

1685 c⁄° 
ov§ec_öãrÁ˚
 *
cfg
 = 
iÁ˚
->cfg;

1686 
Áu…
, 
›up
, 
îr‹
;

1687 c⁄° 
uöt64_t
 *
rmps
;

1688 
size_t
 
n_rmps
;

1689 
hó…h
;

1691 
Áu…
 = 
	`oÂrŸo_p‹t_gë_cfm_Áu…
(
iÁ˚
->
p‹t
->
bridge
->
oÂrŸo
,

1692 
iÁ˚
->
oÂ_p‹t
);

1693 i‡(
Áu…
 >= 0) {

1694 c⁄° *
ªas⁄s
[
CFM_FAULT_N_REASONS
];

1695 
boﬁ
 
Áu…_boﬁ
 = 
Áu…
;

1696 
size_t
 
i
, 
j
;

1698 
j
 = 0;

1699 
i
 = 0; i < 
CFM_FAULT_N_REASONS
; i++) {

1700 
ªas⁄
 = 1 << 
i
;

1701 i‡(
Áu…
 & 
ªas⁄
) {

1702 
ªas⁄s
[
j
++] = 
	`cfm_Áu…_ªas⁄_to_°r
(
ªas⁄
);

1706 
	`ov§ec_öãrÁ˚_£t_cfm_Áu…
(
cfg
, &
Áu…_boﬁ
, 1);

1707 
	`ov§ec_öãrÁ˚_£t_cfm_Áu…_°©us
(
cfg
, (**Ë
ªas⁄s
, 
j
);

1709 
	`ov§ec_öãrÁ˚_£t_cfm_Áu…
(
cfg
, 
NULL
, 0);

1710 
	`ov§ec_öãrÁ˚_£t_cfm_Áu…_°©us
(
cfg
, 
NULL
, 0);

1713 
›up
 = 
	`oÂrŸo_p‹t_gë_cfm_›up
(
iÁ˚
->
p‹t
->
bridge
->
oÂrŸo
,

1714 
iÁ˚
->
oÂ_p‹t
);

1715 i‡(
›up
 >= 0) {

1716 
	`ov§ec_öãrÁ˚_£t_cfm_ªmŸe_›°©e
(
cfg
, 
›up
 ? "up" : "down");

1718 
	`ov§ec_öãrÁ˚_£t_cfm_ªmŸe_›°©e
(
cfg
, 
NULL
);

1721 
îr‹
 = 
	`oÂrŸo_p‹t_gë_cfm_ªmŸe_mpids
(
iÁ˚
->
p‹t
->
bridge
->
oÂrŸo
,

1722 
iÁ˚
->
oÂ_p‹t
, &
rmps
, &
n_rmps
);

1723 i‡(
îr‹
 >= 0) {

1724 
	`ov§ec_öãrÁ˚_£t_cfm_ªmŸe_mpids
(
cfg
, (c⁄° 
öt64_t
 *)
rmps
,

1725 
n_rmps
);

1727 
	`ov§ec_öãrÁ˚_£t_cfm_ªmŸe_mpids
(
cfg
, 
NULL
, 0);

1730 
hó…h
 = 
	`oÂrŸo_p‹t_gë_cfm_hó…h
(
iÁ˚
->
p‹t
->
bridge
->
oÂrŸo
,

1731 
iÁ˚
->
oÂ_p‹t
);

1732 i‡(
hó…h
 >= 0) {

1733 
öt64_t
 
cfm_hó…h
 = 
hó…h
;

1734 
	`ov§ec_öãrÁ˚_£t_cfm_hó…h
(
cfg
, &
cfm_hó…h
, 1);

1736 
	`ov§ec_öãrÁ˚_£t_cfm_hó…h
(
cfg
, 
NULL
, 0);

1738 
	}
}

1741 
	$iÁ˚_ª‰esh_°©s
(
iÁ˚
 *iface)

1743 
	#IFACE_STATS
 \

1744 
	`IFACE_STAT
(
rx_∑ckës
, "rx_packets") \

1745 
	`IFACE_STAT
(
tx_∑ckës
, "tx_packets") \

1746 
	`IFACE_STAT
(
rx_byãs
, "rx_bytes") \

1747 
	`IFACE_STAT
(
tx_byãs
, "tx_bytes") \

1748 
	`IFACE_STAT
(
rx_dr›≥d
, "rx_dropped") \

1749 
	`IFACE_STAT
(
tx_dr›≥d
, "tx_dropped") \

1750 
	`IFACE_STAT
(
rx_îr‹s
, "rx_errors") \

1751 
	`IFACE_STAT
(
tx_îr‹s
, "tx_errors") \

1752 
	`IFACE_STAT
(
rx_‰ame_îr‹s
, "rx_frame_err") \

1753 
	`IFACE_STAT
(
rx_ovî_îr‹s
, "rx_over_err") \

1754 
	`IFACE_STAT
(
rx_¸c_îr‹s
, "rx_crc_err") \

1755 
	`IFACE_STAT
(
cﬁlisi⁄s
, "cﬁlisi⁄s")

	)

1757 
	#IFACE_STAT
(
MEMBER
, 
NAME
ËNAME,

	)

1758 *
keys
[] = { 
IFACE_STATS
 };

1759 #unde‡
IFACE_STAT


1760 
öt64_t
 
vÆues
[
	`ARRAY_SIZE
(
keys
)];

1761 
i
;

1763 
√tdev_°©s
 
°©s
;

1765 i‡(
	`iÁ˚_is_sy¡hëic
(
iÁ˚
)) {

1771 
	`√tdev_gë_°©s
(
iÁ˚
->
√tdev
, &
°©s
);

1774 
i
 = 0;

1775 
	#IFACE_STAT
(
MEMBER
, 
NAME
Ë
vÆues
[
i
++] = 
°©s
.MEMBER;

	)

1776 
IFACE_STATS
;

1777 #unde‡
IFACE_STAT


1778 
	`as£π
(
i
 =
	`ARRAY_SIZE
(
keys
));

1780 
	`ov§ec_öãrÁ˚_£t_°©i°ics
(
iÁ˚
->
cfg
, 
keys
, 
vÆues
,

1781 
	`ARRAY_SIZE
(
keys
));

1782 #unde‡
IFACE_STATS


1783 
	}
}

1786 
	$br_ª‰esh_°p_°©us
(
bridge
 *
br
)

1788 
sm≠
 sm≠ = 
	`SMAP_INITIALIZER
(&smap);

1789 
oÂrŸo
 *oÂrŸÿ
br
->ofproto;

1790 
oÂrŸo_°p_°©us
 
°©us
;

1792 i‡(
	`oÂrŸo_gë_°p_°©us
(
oÂrŸo
, &
°©us
)) {

1796 i‡(!
°©us
.
íabÀd
) {

1797 
	`ov§ec_bridge_£t_°©us
(
br
->
cfg
, 
NULL
);

1801 
	`sm≠_add_f‹m©
(&
sm≠
, "°p_bridge_id", 
STP_ID_FMT
,

1802 
	`STP_ID_ARGS
(
°©us
.
bridge_id
));

1803 
	`sm≠_add_f‹m©
(&
sm≠
, "°p_desig«ãd_roŸ", 
STP_ID_FMT
,

1804 
	`STP_ID_ARGS
(
°©us
.
desig«ãd_roŸ
));

1805 
	`sm≠_add_f‹m©
(&
sm≠
, "°p_roŸ_∑th_co°", "%d", 
°©us
.
roŸ_∑th_co°
);

1807 
	`ov§ec_bridge_£t_°©us
(
br
->
cfg
, &
sm≠
);

1808 
	`sm≠_de°roy
(&
sm≠
);

1809 
	}
}

1812 
	$p‹t_ª‰esh_°p_°©us
(
p‹t
 *port)

1814 
oÂrŸo
 *oÂrŸÿ
p‹t
->
bridge
->ofproto;

1815 
iÁ˚
 *iface;

1816 
oÂrŸo_p‹t_°p_°©us
 
°©us
;

1817 *
keys
[3];

1818 
öt64_t
 
öt_vÆues
[3];

1819 
sm≠
 smap;

1821 i‡(
	`p‹t_is_sy¡hëic
(
p‹t
)) {

1826 i‡(!
	`li°_is_sögÀt⁄
(&
p‹t
->
iÁ˚s
)) {

1827 
	`ov§ec_p‹t_£t_°©us
(
p‹t
->
cfg
, 
NULL
);

1831 
iÁ˚
 = 
	`CONTAINER_OF
(
	`li°_‰⁄t
(&
p‹t
->
iÁ˚s
), iÁ˚, 
p‹t_ñem
);

1833 i‡(
	`oÂrŸo_p‹t_gë_°p_°©us
(
oÂrŸo
, 
iÁ˚
->
oÂ_p‹t
, &
°©us
)) {

1837 i‡(!
°©us
.
íabÀd
) {

1838 
	`ov§ec_p‹t_£t_°©us
(
p‹t
->
cfg
, 
NULL
);

1839 
	`ov§ec_p‹t_£t_°©i°ics
(
p‹t
->
cfg
, 
NULL
, NULL, 0);

1844 
	`sm≠_öô
(&
sm≠
);

1845 
	`sm≠_add_f‹m©
(&
sm≠
, "°p_p‹t_id", 
STP_PORT_ID_FMT
, 
°©us
.
p‹t_id
);

1846 
	`sm≠_add
(&
sm≠
, "°p_°©e", 
	`°p_°©e_«me
(
°©us
.
°©e
));

1847 
	`sm≠_add_f‹m©
(&
sm≠
, "°p_£c_ö_°©e", "%u", 
°©us
.
£c_ö_°©e
);

1848 
	`sm≠_add
(&
sm≠
, "°p_rﬁe", 
	`°p_rﬁe_«me
(
°©us
.
rﬁe
));

1849 
	`ov§ec_p‹t_£t_°©us
(
p‹t
->
cfg
, &
sm≠
);

1850 
	`sm≠_de°roy
(&
sm≠
);

1853 
keys
[0] = "stp_tx_count";

1854 
öt_vÆues
[0] = 
°©us
.
tx_cou¡
;

1855 
keys
[1] = "stp_rx_count";

1856 
öt_vÆues
[1] = 
°©us
.
rx_cou¡
;

1857 
keys
[2] = "stp_error_count";

1858 
öt_vÆues
[2] = 
°©us
.
îr‹_cou¡
;

1860 
	`ov§ec_p‹t_£t_°©i°ics
(
p‹t
->
cfg
, 
keys
, 
öt_vÆues
,

1861 
	`ARRAY_SIZE
(
öt_vÆues
));

1862 
	}
}

1864 
boﬁ


1865 
	$íabÀ_sy°em_°©s
(c⁄° 
ov§ec_›í_vswôch
 *
cfg
)

1867  
	`sm≠_gë_boﬁ
(&
cfg
->
Ÿhî_c⁄fig
, "íabÀ-°©i°ics", 
Ál£
);

1868 
	}
}

1871 
	$ªc⁄figuª_sy°em_°©s
(c⁄° 
ov§ec_›í_vswôch
 *
cfg
)

1873 
boﬁ
 
íabÀ
 = 
	`íabÀ_sy°em_°©s
(
cfg
);

1875 
	`sy°em_°©s_íabÀ
(
íabÀ
);

1876 i‡(!
íabÀ
) {

1877 
	`ov§ec_›í_vswôch_£t_°©i°ics
(
cfg
, 
NULL
);

1879 
	}
}

1882 
	$run_sy°em_°©s
()

1884 c⁄° 
ov§ec_›í_vswôch
 *
cfg
 = 
	`ov§ec_›í_vswôch_fú°
(
idl
);

1885 
sm≠
 *
°©s
;

1887 
°©s
 = 
	`sy°em_°©s_run
();

1888 i‡(
°©s
 && 
cfg
) {

1889 
ovsdb_idl_txn
 *
txn
;

1890 
ovsdb_d©um
 
d©um
;

1892 
txn
 = 
	`ovsdb_idl_txn_¸óã
(
idl
);

1893 
	`ovsdb_d©um_‰om_sm≠
(&
d©um
, 
°©s
);

1894 
	`ovsdb_idl_txn_wrôe
(&
cfg
->
hódî_
, &
ov§ec_›í_vswôch_cﬁ_°©i°ics
,

1895 &
d©um
);

1896 
	`ovsdb_idl_txn_commô
(
txn
);

1897 
	`ovsdb_idl_txn_de°roy
(
txn
);

1899 
	`‰ì
(
°©s
);

1901 
	}
}

1903 
ölöe
 const *

1904 
	$nx_rﬁe_to_°r
(
nx_rﬁe
 
rﬁe
)

1906 
rﬁe
) {

1907 
NX_ROLE_OTHER
:

1909 
NX_ROLE_MASTER
:

1911 
NX_ROLE_SLAVE
:

1916 
	}
}

1919 
	$ª‰esh_c⁄åﬁÀr_°©us
()

1921 
bridge
 *
br
;

1922 
shash
 
öfo
;

1923 c⁄° 
ov§ec_c⁄åﬁÀr
 *
cfg
;

1925 
	`shash_öô
(&
öfo
);

1928 
	`HMAP_FOR_EACH
 (
br
, 
node
, &
Æl_bridges
) {

1929 
	`oÂrŸo_gë_oÂrŸo_c⁄åﬁÀr_öfo
(
br
->
oÂrŸo
, &
öfo
);

1933 
	`OVSREC_CONTROLLER_FOR_EACH
(
cfg
, 
idl
) {

1934 
oÂrŸo_c⁄åﬁÀr_öfo
 *
cöfo
 =

1935 
	`shash_föd_d©a
(&
öfo
, 
cfg
->
èrgë
);

1937 i‡(
cöfo
) {

1938 
sm≠
 sm≠ = 
	`SMAP_INITIALIZER
(&smap);

1939 c⁄° **
vÆues
 = 
cöfo
->
∑ús
.values;

1940 c⁄° **
keys
 = 
cöfo
->
∑ús
.keys;

1941 
size_t
 
i
;

1943 
i
 = 0; i < 
cöfo
->
∑ús
.
n
; i++) {

1944 
	`sm≠_add
(&
sm≠
, 
keys
[
i
], 
vÆues
[i]);

1947 
	`ov§ec_c⁄åﬁÀr_£t_is_c⁄√˘ed
(
cfg
, 
cöfo
->
is_c⁄√˘ed
);

1948 
	`ov§ec_c⁄åﬁÀr_£t_rﬁe
(
cfg
, 
	`nx_rﬁe_to_°r
(
cöfo
->
rﬁe
));

1949 
	`ov§ec_c⁄åﬁÀr_£t_°©us
(
cfg
, &
sm≠
);

1950 
	`sm≠_de°roy
(&
sm≠
);

1952 
	`ov§ec_c⁄åﬁÀr_£t_is_c⁄√˘ed
(
cfg
, 
Ál£
);

1953 
	`ov§ec_c⁄åﬁÀr_£t_rﬁe
(
cfg
, 
NULL
);

1954 
	`ov§ec_c⁄åﬁÀr_£t_°©us
(
cfg
, 
NULL
);

1958 
	`oÂrŸo_‰ì_oÂrŸo_c⁄åﬁÀr_öfo
(&
öfo
);

1959 
	}
}

1962 
	$ª‰esh_ö°™t_°©s
()

1964 
ovsdb_idl_txn
 *
txn
 = 
NULL
;

1966 i‡(!
txn
) {

1967 
bridge
 *
br
;

1969 
txn
 = 
	`ovsdb_idl_txn_¸óã
(
idl
);

1971 
	`HMAP_FOR_EACH
 (
br
, 
node
, &
Æl_bridges
) {

1972 
iÁ˚
 *iface;

1973 
p‹t
 *port;

1975 
	`br_ª‰esh_°p_°©us
(
br
);

1977 
	`HMAP_FOR_EACH
 (
p‹t
, 
hm≠_node
, &
br
->
p‹ts
) {

1978 
	`p‹t_ª‰esh_°p_°©us
(
p‹t
);

1981 
	`HMAP_FOR_EACH
 (
iÁ˚
, 
«me_node
, &
br
->
iÁ˚_by_«me
) {

1982 
√tdev_Êags
 
Êags
;

1983 c⁄° *
lök_°©e
;

1984 
öt64_t
 
lök_ª£ts
;

1985 
cuºít
, 
îr‹
;

1987 i‡(
	`iÁ˚_is_sy¡hëic
(
iÁ˚
)) {

1991 
cuºít
 = 
	`oÂrŸo_p‹t_is_œ˝_cuºít
(
br
->
oÂrŸo
,

1992 
iÁ˚
->
oÂ_p‹t
);

1993 i‡(
cuºít
 >= 0) {

1994 
boﬁ
 
bl
 = 
cuºít
;

1995 
	`ov§ec_öãrÁ˚_£t_œ˝_cuºít
(
iÁ˚
->
cfg
, &
bl
, 1);

1997 
	`ov§ec_öãrÁ˚_£t_œ˝_cuºít
(
iÁ˚
->
cfg
, 
NULL
, 0);

2000 
îr‹
 = 
	`√tdev_gë_Êags
(
iÁ˚
->
√tdev
, &
Êags
);

2001 i‡(!
îr‹
) {

2002 c⁄° *
°©e
 = 
Êags
 & 
NETDEV_UP
 ? "up" : "down";

2003 
	`ov§ec_öãrÁ˚_£t_admö_°©e
(
iÁ˚
->
cfg
, 
°©e
);

2005 
	`ov§ec_öãrÁ˚_£t_admö_°©e
(
iÁ˚
->
cfg
, 
NULL
);

2008 
lök_°©e
 = 
	`√tdev_gë_ˇºõr
(
iÁ˚
->
√tdev
) ? "up" : "down";

2009 
	`ov§ec_öãrÁ˚_£t_lök_°©e
(
iÁ˚
->
cfg
, 
lök_°©e
);

2011 
lök_ª£ts
 = 
	`√tdev_gë_ˇºõr_ª£ts
(
iÁ˚
->
√tdev
);

2012 
	`ov§ec_öãrÁ˚_£t_lök_ª£ts
(
iÁ˚
->
cfg
, &
lök_ª£ts
, 1);

2014 
	`iÁ˚_ª‰esh_cfm_°©s
(
iÁ˚
);

2019 i‡(
	`ovsdb_idl_txn_commô
(
txn
Ë!
TXN_INCOMPLETE
) {

2020 
	`ovsdb_idl_txn_de°roy
(
txn
);

2021 
txn
 = 
NULL
;

2023 
	}
}

2032 
	$bridge_run_Á°
()

2034 
bridge
 *
br
;

2036 
	`HMAP_FOR_EACH
 (
br
, 
node
, &
Æl_bridges
) {

2037 
	`oÂrŸo_run_Á°
(
br
->
oÂrŸo
);

2039 
	}
}

2042 
	$bridge_run
()

2044 c⁄° 
ov§ec_›í_vswôch
 
nuŒ_cfg
;

2045 c⁄° 
ov§ec_›í_vswôch
 *
cfg
;

2046 
ovsdb_idl_txn
 *
ªc⁄f_txn
 = 
NULL
;

2048 
boﬁ
 
vœn_•löãrs_ch™ged
;

2049 
bridge
 *
br
;

2051 
	`ov§ec_›í_vswôch_öô
((
ov§ec_›í_vswôch
 *Ë&
nuŒ_cfg
);

2054 i‡(!
ªc⁄figurög
) {

2055 
	`ovsdb_idl_run
(
idl
);

2057 i‡(
	`ovsdb_idl_is_lock_c⁄ãnded
(
idl
)) {

2058 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 1);

2059 
bridge
 *
br
, *
√xt_br
;

2061 
	`VLOG_ERR_RL
(&
æ
, "another ovs-vswitchdÖrocess isÑunning, "

2064 
	`HMAP_FOR_EACH_SAFE
 (
br
, 
√xt_br
, 
node
, &
Æl_bridges
) {

2065 
	`bridge_de°roy
(
br
);

2068 } i‡(!
	`ovsdb_idl_has_lock
(
idl
)) {

2072 
cfg
 = 
	`ov§ec_›í_vswôch_fú°
(
idl
);

2075 
	`HMAP_FOR_EACH
 (
br
, 
node
, &
Æl_bridges
) {

2076 
	`oÂrŸo_run
(
br
->
oÂrŸo
);

2085 i‡(
cfg
 && cfg->
s¶
) {

2086 c⁄° 
ov§ec_s¶
 *
s¶
 = 
cfg
->ssl;

2088 
	`°ªam_s¶_£t_key_™d_˚π
(
s¶
->
¥iv©e_key
, s¶->
˚πifiˇã
);

2089 
	`°ªam_s¶_£t_ˇ_˚π_fûe
(
s¶
->
ˇ_˚π
, s¶->
boŸ°øp_ˇ_˚π
);

2092 i‡(!
ªc⁄figurög
) {

2095 
vœn_•löãrs_ch™ged
 = 
Ál£
;

2096 i‡(
vœn_•löãrs_íabÀd_™ywhîe
) {

2097 
	`HMAP_FOR_EACH
 (
br
, 
node
, &
Æl_bridges
) {

2098 i‡(
	`oÂrŸo_has_vœn_ußge_ch™ged
(
br
->
oÂrŸo
)) {

2099 
vœn_•löãrs_ch™ged
 = 
åue
;

2105 i‡(
	`ovsdb_idl_gë_£qno
(
idl
Ë!
idl_£qno
 || 
vœn_•löãrs_ch™ged
) {

2106 
idl_£qno
 = 
	`ovsdb_idl_gë_£qno
(
idl
);

2107 i‡(
cfg
) {

2108 
ªc⁄f_txn
 = 
	`ovsdb_idl_txn_¸óã
(
idl
);

2109 
	`bridge_ªc⁄figuª
(
cfg
);

2113 
	`bridge_ªc⁄figuª
(&
nuŒ_cfg
);

2118 i‡(
ªc⁄figurög
) {

2119 i‡(
cfg
) {

2120 i‡(!
ªc⁄f_txn
) {

2121 
ªc⁄f_txn
 = 
	`ovsdb_idl_txn_¸óã
(
idl
);

2123 i‡(
	`bridge_ªc⁄figuª_c⁄töue
(
cfg
)) {

2124 
	`ov§ec_›í_vswôch_£t_cur_cfg
(
cfg
, cfg->
√xt_cfg
);

2127 
	`bridge_ªc⁄figuª_c⁄töue
(&
nuŒ_cfg
);

2131 i‡(
ªc⁄f_txn
) {

2132 
	`ovsdb_idl_txn_commô
(
ªc⁄f_txn
);

2133 
	`ovsdb_idl_txn_de°roy
(
ªc⁄f_txn
);

2134 
ªc⁄f_txn
 = 
NULL
;

2138 i‡(
	`time_m£c
(Ë>
iÁ˚_°©s_timî
) {

2139 i‡(
cfg
) {

2140 
ovsdb_idl_txn
 *
txn
;

2142 
txn
 = 
	`ovsdb_idl_txn_¸óã
(
idl
);

2143 
	`HMAP_FOR_EACH
 (
br
, 
node
, &
Æl_bridges
) {

2144 
p‹t
 *port;

2145 
múr‹
 *
m
;

2147 
	`HMAP_FOR_EACH
 (
p‹t
, 
hm≠_node
, &
br
->
p‹ts
) {

2148 
iÁ˚
 *iface;

2150 
	`LIST_FOR_EACH
 (
iÁ˚
, 
p‹t_ñem
, &
p‹t
->
iÁ˚s
) {

2151 
	`iÁ˚_ª‰esh_°©s
(
iÁ˚
);

2152 
	`iÁ˚_ª‰esh_°©us
(
iÁ˚
);

2156 
	`HMAP_FOR_EACH
 (
m
, 
hm≠_node
, &
br
->
múr‹s
) {

2157 
	`múr‹_ª‰esh_°©s
(
m
);

2161 
	`ª‰esh_c⁄åﬁÀr_°©us
();

2162 
	`ovsdb_idl_txn_commô
(
txn
);

2163 
	`ovsdb_idl_txn_de°roy
(
txn
);

2166 
iÁ˚_°©s_timî
 = 
	`time_m£c
(Ë+ 
IFACE_STATS_INTERVAL
;

2169 
	`run_sy°em_°©s
();

2170 
	`ª‰esh_ö°™t_°©s
();

2171 
	}
}

2174 
	$bridge_waô
()

2176 
	`ovsdb_idl_waô
(
idl
);

2178 i‡(
ªc⁄figurög
) {

2179 
	`pﬁl_immedüã_wake
();

2182 i‡(!
	`hm≠_is_em±y
(&
Æl_bridges
)) {

2183 
bridge
 *
br
;

2185 
	`HMAP_FOR_EACH
 (
br
, 
node
, &
Æl_bridges
) {

2186 
	`oÂrŸo_waô
(
br
->
oÂrŸo
);

2188 
	`pﬁl_timî_waô_u¡û
(
iÁ˚_°©s_timî
);

2191 
	`sy°em_°©s_waô
();

2192 
	}
}

2197 
	$bridge_gë_mem‹y_ußge
(
sim≠
 *
ußge
)

2199 
bridge
 *
br
;

2201 
	`HMAP_FOR_EACH
 (
br
, 
node
, &
Æl_bridges
) {

2202 
	`oÂrŸo_gë_mem‹y_ußge
(
br
->
oÂrŸo
, 
ußge
);

2204 
	}
}

2208 
	sqos_unix˘l_show_cbd©a
 {

2209 
ds
 *
	mds
;

2210 
iÁ˚
 *
	miÁ˚
;

2214 
	$qos_unix˘l_show_cb
(
queue_id
,

2215 c⁄° 
sm≠
 *
dëaûs
,

2216 *
aux
)

2218 
qos_unix˘l_show_cbd©a
 *
d©a
 = 
aux
;

2219 
ds
 *d†
d©a
->ds;

2220 
iÁ˚
 *iÁ˚ = 
d©a
->iface;

2221 
√tdev_queue_°©s
 
°©s
;

2222 
sm≠_node
 *
node
;

2223 
îr‹
;

2225 
	`ds_put_c°r
(
ds
, "\n");

2226 i‡(
queue_id
) {

2227 
	`ds_put_f‹m©
(
ds
, "Queuê%u:\n", 
queue_id
);

2229 
	`ds_put_c°r
(
ds
, "Default:\n");

2232 
	`SMAP_FOR_EACH
 (
node
, 
dëaûs
) {

2233 
	`ds_put_f‹m©
(
ds
, "\t%s: %s\n", 
node
->
key
,Çode->
vÆue
);

2236 
îr‹
 = 
	`√tdev_gë_queue_°©s
(
iÁ˚
->
√tdev
, 
queue_id
, &
°©s
);

2237 i‡(!
îr‹
) {

2238 i‡(
°©s
.
tx_∑ckës
 !
UINT64_MAX
) {

2239 
	`ds_put_f‹m©
(
ds
, "\âx_∑ckës: %"
PRIu64
"\n", 
°©s
.
tx_∑ckës
);

2242 i‡(
°©s
.
tx_byãs
 !
UINT64_MAX
) {

2243 
	`ds_put_f‹m©
(
ds
, "\âx_byãs: %"
PRIu64
"\n", 
°©s
.
tx_byãs
);

2246 i‡(
°©s
.
tx_îr‹s
 !
UINT64_MAX
) {

2247 
	`ds_put_f‹m©
(
ds
, "\âx_îr‹s: %"
PRIu64
"\n", 
°©s
.
tx_îr‹s
);

2250 
	`ds_put_f‹m©
(
ds
, "\tFailedÅo get statistics for queue %u: %s",

2251 
queue_id
, 
	`°ªº‹
(
îr‹
));

2253 
	}
}

2256 
	$qos_unix˘l_show
(
unix˘l_c⁄n
 *
c⁄n
, 
¨gc
 
OVS_UNUSED
,

2257 c⁄° *
¨gv
[], *
aux
 
OVS_UNUSED
)

2259 
ds
 d†
DS_EMPTY_INITIALIZER
;

2260 
sm≠
 sm≠ = 
	`SMAP_INITIALIZER
(&smap);

2261 
iÁ˚
 *iface;

2262 c⁄° *
ty≥
;

2263 
sm≠_node
 *
node
;

2264 
qos_unix˘l_show_cbd©a
 
d©a
;

2265 
îr‹
;

2267 
iÁ˚
 = 
	`iÁ˚_föd
(
¨gv
[1]);

2268 i‡(!
iÁ˚
) {

2269 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, "no such interface");

2273 
	`√tdev_gë_qos
(
iÁ˚
->
√tdev
, &
ty≥
, &
sm≠
);

2275 i‡(*
ty≥
 != '\0') {

2276 
	`ds_put_f‹m©
(&
ds
, "QoS: %†%s\n", 
iÁ˚
->
«me
, 
ty≥
);

2278 
	`SMAP_FOR_EACH
 (
node
, &
sm≠
) {

2279 
	`ds_put_f‹m©
(&
ds
, "%s: %s\n", 
node
->
key
,Çode->
vÆue
);

2282 
d©a
.
ds
 = &ds;

2283 
d©a
.
iÁ˚
 = iface;

2284 
îr‹
 = 
	`√tdev_dump_queues
(
iÁ˚
->
√tdev
, 
qos_unix˘l_show_cb
, &
d©a
);

2286 i‡(
îr‹
) {

2287 
	`ds_put_f‹m©
(&
ds
, "ÁûedÅÿdum∞queues: %s", 
	`°ªº‹
(
îr‹
));

2289 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, 
	`ds_c°r
(&
ds
));

2291 
	`ds_put_f‹m©
(&
ds
, "QoSÇŸ c⁄figuªd o¿%s\n", 
iÁ˚
->
«me
);

2292 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, 
	`ds_c°r
(&
ds
));

2295 
	`sm≠_de°roy
(&
sm≠
);

2296 
	`ds_de°roy
(&
ds
);

2297 
	}
}

2301 
	$bridge_¸óã
(c⁄° 
ov§ec_bridge
 *
br_cfg
)

2303 
bridge
 *
br
;

2305 
	`as£π
(!
	`bridge_lookup
(
br_cfg
->
«me
));

2306 
br
 = 
	`xzÆloc
( *br);

2308 
br
->
«me
 = 
	`x°rdup
(
br_cfg
->name);

2309 
br
->
ty≥
 = 
	`x°rdup
(
	`oÂrŸo_n‹mÆize_ty≥
(
br_cfg
->
d©≠©h_ty≥
));

2310 
br
->
cfg
 = 
br_cfg
;

2314 
	`mem˝y
(
br
->
deÁu…_ó
, &
br_cfg
->
hódî_
.
uuid
, 
ETH_ADDR_LEN
);

2315 
	`ëh_addr_m¨k_øndom
(
br
->
deÁu…_ó
);

2317 
	`hm≠_öô
(&
br
->
p‹ts
);

2318 
	`hm≠_öô
(&
br
->
iÁ˚s
);

2319 
	`hm≠_öô
(&
br
->
iÁ˚_by_«me
);

2320 
	`hm≠_öô
(&
br
->
múr‹s
);

2322 
	`hm≠_öô
(&
br
->
if_cfg_todo
);

2323 
	`li°_öô
(&
br
->
oÂp_g¨bage
);

2325 
	`hm≠_ö£π
(&
Æl_bridges
, &
br
->
node
, 
	`hash_°rög
(br->
«me
, 0));

2326 
	}
}

2329 
	$bridge_de°roy
(
bridge
 *
br
)

2331 i‡(
br
) {

2332 
múr‹
 *múr‹, *
√xt_múr‹
;

2333 
p‹t
 *p‹t, *
√xt_p‹t
;

2334 
if_cfg
 *if_cfg, *
√xt_if_cfg
;

2335 
oÂp_g¨bage
 *
g¨bage
, *
√xt_g¨bage
;

2337 
	`HMAP_FOR_EACH_SAFE
 (
p‹t
, 
√xt_p‹t
, 
hm≠_node
, &
br
->
p‹ts
) {

2338 
	`p‹t_de°roy
(
p‹t
);

2340 
	`HMAP_FOR_EACH_SAFE
 (
múr‹
, 
√xt_múr‹
, 
hm≠_node
, &
br
->
múr‹s
) {

2341 
	`múr‹_de°roy
(
múr‹
);

2343 
	`HMAP_FOR_EACH_SAFE
 (
if_cfg
, 
√xt_if_cfg
, 
hm≠_node
, &
br
->
if_cfg_todo
) {

2344 
	`hm≠_ªmove
(&
br
->
if_cfg_todo
, &
if_cfg
->
hm≠_node
);

2345 
	`‰ì
(
if_cfg
);

2347 
	`LIST_FOR_EACH_SAFE
 (
g¨bage
, 
√xt_g¨bage
, 
li°_node
,

2348 &
br
->
oÂp_g¨bage
) {

2349 
	`li°_ªmove
(&
g¨bage
->
li°_node
);

2350 
	`‰ì
(
g¨bage
);

2353 
	`hm≠_ªmove
(&
Æl_bridges
, &
br
->
node
);

2354 
	`oÂrŸo_de°roy
(
br
->
oÂrŸo
);

2355 
	`hm≠_de°roy
(&
br
->
iÁ˚s
);

2356 
	`hm≠_de°roy
(&
br
->
p‹ts
);

2357 
	`hm≠_de°roy
(&
br
->
iÁ˚_by_«me
);

2358 
	`hm≠_de°roy
(&
br
->
múr‹s
);

2359 
	`hm≠_de°roy
(&
br
->
if_cfg_todo
);

2360 
	`‰ì
(
br
->
«me
);

2361 
	`‰ì
(
br
->
ty≥
);

2362 
	`‰ì
(
br
);

2364 
	}
}

2366 
bridge
 *

2367 
	$bridge_lookup
(c⁄° *
«me
)

2369 
bridge
 *
br
;

2371 
	`HMAP_FOR_EACH_WITH_HASH
 (
br
, 
node
, 
	`hash_°rög
(
«me
, 0), &
Æl_bridges
) {

2372 i‡(!
	`°rcmp
(
br
->
«me
,Çame)) {

2373  
br
;

2376  
NULL
;

2377 
	}
}

2382 
	$bridge_unix˘l_dump_Êows
(
unix˘l_c⁄n
 *
c⁄n
, 
¨gc
 
OVS_UNUSED
,

2383 c⁄° *
¨gv
[], *
aux
 
OVS_UNUSED
)

2385 
bridge
 *
br
;

2386 
ds
 
ªsu…s
;

2388 
br
 = 
	`bridge_lookup
(
¨gv
[1]);

2389 i‡(!
br
) {

2390 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, "Unknown bridge");

2394 
	`ds_öô
(&
ªsu…s
);

2395 
	`oÂrŸo_gë_Æl_Êows
(
br
->
oÂrŸo
, &
ªsu…s
);

2397 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, 
	`ds_c°r
(&
ªsu…s
));

2398 
	`ds_de°roy
(&
ªsu…s
);

2399 
	}
}

2405 
	$bridge_unix˘l_ªc⁄√˘
(
unix˘l_c⁄n
 *
c⁄n
, 
¨gc
,

2406 c⁄° *
¨gv
[], *
aux
 
OVS_UNUSED
)

2408 
bridge
 *
br
;

2409 i‡(
¨gc
 > 1) {

2410 
br
 = 
	`bridge_lookup
(
¨gv
[1]);

2411 i‡(!
br
) {

2412 
	`unix˘l_comm™d_ª∂y_îr‹
(
c⁄n
, "Unknown bridge");

2415 
	`oÂrŸo_ªc⁄√˘_c⁄åﬁÀrs
(
br
->
oÂrŸo
);

2417 
	`HMAP_FOR_EACH
 (
br
, 
node
, &
Æl_bridges
) {

2418 
	`oÂrŸo_ªc⁄√˘_c⁄åﬁÀrs
(
br
->
oÂrŸo
);

2421 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, 
NULL
);

2422 
	}
}

2424 
size_t


2425 
	$bridge_gë_c⁄åﬁÀrs
(c⁄° 
bridge
 *
br
,

2426 
ov§ec_c⁄åﬁÀr
 ***
c⁄åﬁÀr•
)

2428 
ov§ec_c⁄åﬁÀr
 **
c⁄åﬁÀrs
;

2429 
size_t
 
n_c⁄åﬁÀrs
;

2431 
c⁄åﬁÀrs
 = 
br
->
cfg
->
c⁄åﬁÀr
;

2432 
n_c⁄åﬁÀrs
 = 
br
->
cfg
->
n_c⁄åﬁÀr
;

2434 i‡(
n_c⁄åﬁÀrs
 =1 && !
	`°rcmp
(
c⁄åﬁÀrs
[0]->
èrgë
, "none")) {

2435 
c⁄åﬁÀrs
 = 
NULL
;

2436 
n_c⁄åﬁÀrs
 = 0;

2439 i‡(
c⁄åﬁÀr•
) {

2440 *
c⁄åﬁÀr•
 = 
c⁄åﬁÀrs
;

2442  
n_c⁄åﬁÀrs
;

2443 
	}
}

2446 
	$bridge_queue_if_cfg
(
bridge
 *
br
,

2447 c⁄° 
ov§ec_öãrÁ˚
 *
cfg
,

2448 c⁄° 
ov§ec_p‹t
 *
∑ª¡
)

2450 
if_cfg
 *if_cfg = 
	`xmÆloc
( *if_cfg);

2452 
if_cfg
->
cfg
 = cfg;

2453 
if_cfg
->
∑ª¡
 =Öarent;

2454 
	`hm≠_ö£π
(&
br
->
if_cfg_todo
, &
if_cfg
->
hm≠_node
,

2455 
	`hash_°rög
(
if_cfg
->
cfg
->
«me
, 0));

2456 
	}
}

2462 
	$bridge_add_dñ_p‹ts
(
bridge
 *
br
,

2463 c⁄° *
•löãr_vœns
)

2465 
shash_node
 *
p‹t_node
;

2466 
p‹t
 *p‹t, *
√xt
;

2467 
shash
 
√w_p‹ts
;

2468 
size_t
 
i
;

2470 
	`as£π
(
	`hm≠_is_em±y
(&
br
->
if_cfg_todo
));

2473 
	`shash_öô
(&
√w_p‹ts
);

2474 
i
 = 0; i < 
br
->
cfg
->
n_p‹ts
; i++) {

2475 c⁄° *
«me
 = 
br
->
cfg
->
p‹ts
[
i
]->name;

2476 i‡(!
	`shash_add_⁄˚
(&
√w_p‹ts
, 
«me
, 
br
->
cfg
->
p‹ts
[
i
])) {

2477 
	`VLOG_WARN
("bridge %s: %s specifiedÅwiceás bridgeÖort",

2478 
br
->
«me
,Çame);

2481 i‡(
	`bridge_gë_c⁄åﬁÀrs
(
br
, 
NULL
)

2482 && !
	`shash_föd
(&
√w_p‹ts
, 
br
->
«me
)) {

2483 
	`VLOG_WARN
("bridge %s:ÇoÖortÇamed %s, synthesizing one",

2484 
br
->
«me
, br->name);

2486 
	`ov§ec_öãrÁ˚_öô
(&
br
->
sy¡h_loˇl_iÁ˚
);

2487 
	`ov§ec_p‹t_öô
(&
br
->
sy¡h_loˇl_p‹t
);

2489 
br
->
sy¡h_loˇl_p‹t
.
öãrÁ˚s
 = &br->
sy¡h_loˇl_iÁ˚p
;

2490 
br
->
sy¡h_loˇl_p‹t
.
n_öãrÁ˚s
 = 1;

2491 
br
->
sy¡h_loˇl_p‹t
.
«me
 = br->name;

2493 
br
->
sy¡h_loˇl_iÁ˚
.
«me
 = br->name;

2494 
br
->
sy¡h_loˇl_iÁ˚
.
ty≥
 = "internal";

2496 
br
->
sy¡h_loˇl_iÁ˚p
 = &br->
sy¡h_loˇl_iÁ˚
;

2498 
	`shash_add
(&
√w_p‹ts
, 
br
->
«me
, &br->
sy¡h_loˇl_p‹t
);

2501 i‡(
•löãr_vœns
) {

2502 
	`add_vœn_•löãr_p‹ts
(
br
, 
•löãr_vœns
, &
√w_p‹ts
);

2507 
	`HMAP_FOR_EACH_SAFE
 (
p‹t
, 
√xt
, 
hm≠_node
, &
br
->
p‹ts
) {

2508 
p‹t
->
cfg
 = 
	`shash_föd_d©a
(&
√w_p‹ts
,Ö‹t->
«me
);

2509 i‡(!
p‹t
->
cfg
) {

2510 
	`p‹t_de°roy
(
p‹t
);

2512 
	`p‹t_dñ_iÁ˚s
(
p‹t
);

2518 
	`SHASH_FOR_EACH
 (
p‹t_node
, &
√w_p‹ts
) {

2519 c⁄° 
ov§ec_p‹t
 *
p‹t
 = 
p‹t_node
->
d©a
;

2520 
size_t
 
i
;

2522 
i
 = 0; i < 
p‹t
->
n_öãrÁ˚s
; i++) {

2523 c⁄° 
ov§ec_öãrÁ˚
 *
cfg
 = 
p‹t
->
öãrÁ˚s
[
i
];

2524 
iÁ˚
 *iÁ˚ = 
	`iÁ˚_lookup
(
br
, 
cfg
->
«me
);

2525 c⁄° *
ty≥
 = 
	`iÁ˚_gë_ty≥
(
cfg
, 
br
->cfg);

2527 i‡(
iÁ˚
) {

2528 
iÁ˚
->
cfg
 = cfg;

2529 
iÁ˚
->
ty≥
 =Åype;

2530 } i‡(!
	`°rcmp
(
ty≥
, "null")) {

2531 
	`VLOG_WARN_ONCE
("%s: TheÇull interfaceÅype is deprecatedánd"

2534 
cfg
->
«me
);

2536 
	`bridge_queue_if_cfg
(
br
, 
cfg
, 
p‹t
);

2541 
	`shash_de°roy
(&
√w_p‹ts
);

2542 
	}
}

2549 
	$bridge_oÂrŸo_c⁄åﬁÀr_f‹_mgmt
(c⁄° 
bridge
 *
br
,

2550 
oÂrŸo_c⁄åﬁÀr
 *
oc
)

2552 
oc
->
èrgë
 = 
	`xa•rötf
("punix:%s/%s.mgmt", 
	`ovs_rundú
(), 
br
->
«me
);

2553 
oc
->
max_backoff
 = 0;

2554 
oc
->
¥obe_öãrvÆ
 = 60;

2555 
oc
->
b™d
 = 
OFPROTO_OUT_OF_BAND
;

2556 
oc
->
øã_limô
 = 0;

2557 
oc
->
bur°_limô
 = 0;

2558 
oc
->
íabÀ_async_msgs
 = 
åue
;

2559 
	}
}

2563 
	$bridge_oÂrŸo_c⁄åﬁÀr_‰om_ov§ec
(c⁄° 
ov§ec_c⁄åﬁÀr
 *
c
,

2564 
oÂrŸo_c⁄åﬁÀr
 *
oc
)

2566 
ds˝
;

2568 
oc
->
èrgë
 = 
c
->target;

2569 
oc
->
max_backoff
 = 
c
->max_backoff ? *c->max_backoff / 1000 : 8;

2570 
oc
->
¥obe_öãrvÆ
 = 
c
->
öa˘ivôy_¥obe
 ? *c->inactivity_probe / 1000 : 5;

2571 
oc
->
b™d
 = (!
c
->
c⁄√˘i⁄_mode
 || !
	`°rcmp
(c->connection_mode, "in-band")

2572 ? 
OFPROTO_IN_BAND
 : 
OFPROTO_OUT_OF_BAND
);

2573 
oc
->
øã_limô
 = 
c
->
c⁄åﬁÀr_øã_limô
 ? *c->controller_rate_limit : 0;

2574 
oc
->
bur°_limô
 = (
c
->
c⁄åﬁÀr_bur°_limô


2575 ? *
c
->
c⁄åﬁÀr_bur°_limô
 : 0);

2576 
oc
->
íabÀ_async_msgs
 = (!
c
->
íabÀ_async_mesßges


2577 || *
c
->
íabÀ_async_mesßges
);

2578 
ds˝
 = 
	`sm≠_gë_öt
(&
c
->
Ÿhî_c⁄fig
, "ds˝", 
DSCP_DEFAULT
);

2579 i‡(
ds˝
 < 0 || dscp > 63) {

2580 
ds˝
 = 
DSCP_DEFAULT
;

2582 
oc
->
ds˝
 = dscp;

2583 
	}
}

2588 
	$bridge_c⁄figuª_loˇl_iÁ˚_√tdev
(
bridge
 *
br
,

2589 
ov§ec_c⁄åﬁÀr
 *
c
)

2591 
√tdev
 *netdev;

2592 
ö_addr
 
mask
, 
g©eway
;

2594 
iÁ˚
 *
loˇl_iÁ˚
;

2595 
ö_addr
 
ù
;

2598 
loˇl_iÁ˚
 = 
	`iÁ˚_‰om_oÂ_p‹t
(
br
, 
OFPP_LOCAL
);

2599 i‡(!
loˇl_iÁ˚
 || !
c
->
loˇl_ù
 || !
	`öë_©⁄
(c->loˇl_ù, &
ù
)) {

2604 
√tdev
 = 
loˇl_iÁ˚
->netdev;

2605 
	`√tdev_tu∫_Êags_⁄
(
√tdev
, 
NETDEV_UP
, 
åue
);

2608 i‡(!
c
->
loˇl_√tmask


2609 || !
	`öë_©⁄
(
c
->
loˇl_√tmask
, &
mask
)

2610 || !
mask
.
s_addr
) {

2611 
mask
.
s_addr
 = 
	`guess_√tmask
(
ù
.s_addr);

2613 i‡(!
	`√tdev_£t_ö4
(
√tdev
, 
ù
, 
mask
)) {

2614 
	`VLOG_INFO
("bridgê%s: c⁄figuªd IPáddªs†"
IP_FMT
",Çetmask "IP_FMT,

2615 
br
->
«me
, 
	`IP_ARGS
(&
ù
.
s_addr
), IP_ARGS(&
mask
.s_addr));

2619 i‡(
c
->
loˇl_g©eway


2620 && 
	`öë_©⁄
(
c
->
loˇl_g©eway
, &
g©eway
)

2621 && 
g©eway
.
s_addr
) {

2622 i‡(!
	`√tdev_add_rouãr
(
√tdev
, 
g©eway
)) {

2623 
	`VLOG_INFO
("bridgê%s: c⁄figuªd g©eway "
IP_FMT
,

2624 
br
->
«me
, 
	`IP_ARGS
(&
g©eway
.
s_addr
));

2627 
	}
}

2632 
boﬁ


2633 
	$equÆ_∑th«mes
(c⁄° *
a
, c⁄° *
b
)

2635 *
a
 =*
b
) {

2636 i‡(*
a
 == '/') {

2637 
a
 +
	`°r•n
(a, "/");

2638 
b
 +
	`°r•n
(b, "/");

2639 } i‡(*
a
 == '\0') {

2640  
åue
;

2642 
a
++;

2643 
b
++;

2646  
Ál£
;

2647 
	}
}

2650 
	$bridge_c⁄figuª_ªmŸes
(
bridge
 *
br
,

2651 c⁄° 
sockaddr_ö
 *
m™agîs
, 
size_t
 
n_m™agîs
)

2653 
boﬁ
 
dißbÀ_ö_b™d
;

2655 
ov§ec_c⁄åﬁÀr
 **
c⁄åﬁÀrs
;

2656 
size_t
 
n_c⁄åﬁÀrs
;

2658 
oÂrŸo_Áû_mode
 
Áû_mode
;

2660 
oÂrŸo_c⁄åﬁÀr
 *
ocs
;

2661 
size_t
 
n_ocs
;

2662 
size_t
 
i
;

2665 
dißbÀ_ö_b™d
 = 
	`sm≠_gë_boﬁ
(&
br
->
cfg
->
Ÿhî_c⁄fig
, "disable-in-band",

2666 
Ál£
);

2669 
	`oÂrŸo_£t_ö_b™d_queue
(
br
->
oÂrŸo
,

2670 
	`sm≠_gë_öt
(&
br
->
cfg
->
Ÿhî_c⁄fig
,

2673 i‡(
dißbÀ_ö_b™d
) {

2674 
	`oÂrŸo_£t_exåa_ö_b™d_ªmŸes
(
br
->
oÂrŸo
, 
NULL
, 0);

2676 
	`oÂrŸo_£t_exåa_ö_b™d_ªmŸes
(
br
->
oÂrŸo
, 
m™agîs
, 
n_m™agîs
);

2679 
n_c⁄åﬁÀrs
 = 
	`bridge_gë_c⁄åﬁÀrs
(
br
, &
c⁄åﬁÀrs
);

2681 
ocs
 = 
	`xmÆloc
((
n_c⁄åﬁÀrs
 + 1) *  *ocs);

2682 
n_ocs
 = 0;

2684 
	`bridge_oÂrŸo_c⁄åﬁÀr_f‹_mgmt
(
br
, &
ocs
[
n_ocs
++]);

2685 
i
 = 0; i < 
n_c⁄åﬁÀrs
; i++) {

2686 
ov§ec_c⁄åﬁÀr
 *
c
 = 
c⁄åﬁÀrs
[
i
];

2688 i‡(!
	`°∫cmp
(
c
->
èrgë
, "punix:", 6)

2689 || !
	`°∫cmp
(
c
->
èrgë
, "unix:", 5)) {

2690 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 5);

2691 *
whôñi°
;

2693 
whôñi°
 = 
	`xa•rötf
("unix:%s/%s.controller",

2694 
	`ovs_rundú
(), 
br
->
«me
);

2695 i‡(!
	`equÆ_∑th«mes
(
c
->
èrgë
, 
whôñi°
)) {

2699 
	`VLOG_ERR_RL
(&
æ
, "bridge %s: Notádding Unix domain socket "

2704 
br
->
«me
, 
c
->
èrgë
, 
whôñi°
,

2705 
	`ovs_rundú
(), 
br
->
«me
);

2706 
	`‰ì
(
whôñi°
);

2710 
	`‰ì
(
whôñi°
);

2713 
	`bridge_c⁄figuª_loˇl_iÁ˚_√tdev
(
br
, 
c
);

2714 
	`bridge_oÂrŸo_c⁄åﬁÀr_‰om_ov§ec
(
c
, &
ocs
[
n_ocs
]);

2715 i‡(
dißbÀ_ö_b™d
) {

2716 
ocs
[
n_ocs
].
b™d
 = 
OFPROTO_OUT_OF_BAND
;

2718 
n_ocs
++;

2721 
	`oÂrŸo_£t_c⁄åﬁÀrs
(
br
->
oÂrŸo
, 
ocs
, 
n_ocs
);

2722 
	`‰ì
(
ocs
[0].
èrgë
);

2723 
	`‰ì
(
ocs
);

2726 
Áû_mode
 = !
br
->
cfg
->fail_mode

2727 || !
	`°rcmp
(
br
->
cfg
->
Áû_mode
, "standalone")

2728 ? 
OFPROTO_FAIL_STANDALONE


2729 : 
OFPROTO_FAIL_SECURE
;

2730 
	`oÂrŸo_£t_Áû_mode
(
br
->
oÂrŸo
, 
Áû_mode
);

2733 i‡(!
	`oÂrŸo_has_¢o›s
(
br
->
oÂrŸo
)) {

2734 
s£t
 
¢o›s
;

2736 
	`s£t_öô
(&
¢o›s
);

2737 
	`s£t_add_™d_‰ì
(&
¢o›s
, 
	`xa•rötf
("punix:%s/%s.snoop",

2738 
	`ovs_rundú
(), 
br
->
«me
));

2739 
	`oÂrŸo_£t_¢o›s
(
br
->
oÂrŸo
, &
¢o›s
);

2740 
	`s£t_de°roy
(&
¢o›s
);

2742 
	}
}

2745 
	$bridge_c⁄figuª_èbÀs
(
bridge
 *
br
)

2747 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 5);

2748 
n_èbÀs
;

2749 
i
, 
j
;

2751 
n_èbÀs
 = 
	`oÂrŸo_gë_n_èbÀs
(
br
->
oÂrŸo
);

2752 
j
 = 0;

2753 
i
 = 0; i < 
n_èbÀs
; i++) {

2754 
oÂrŸo_èbÀ_£âögs
 
s
;

2756 
s
.
«me
 = 
NULL
;

2757 
s
.
max_Êows
 = 
UINT_MAX
;

2758 
s
.
groups
 = 
NULL
;

2759 
s
.
n_groups
 = 0;

2761 i‡(
j
 < 
br
->
cfg
->
n_Êow_èbÀs
 && 
i
 =br->cfg->
key_Êow_èbÀs
[j]) {

2762 
ov§ec_Êow_èbÀ
 *
cfg
 = 
br
->cfg->
vÆue_Êow_èbÀs
[
j
++];

2764 
s
.
«me
 = 
cfg
->name;

2765 i‡(
cfg
->
n_Êow_limô
 && *cfg->
Êow_limô
 < 
UINT_MAX
) {

2766 
s
.
max_Êows
 = *
cfg
->
Êow_limô
;

2768 i‡(
cfg
->
ovîÊow_pﬁicy


2769 && !
	`°rcmp
(
cfg
->
ovîÊow_pﬁicy
, "evict")) {

2770 
size_t
 
k
;

2772 
s
.
groups
 = 
	`xmÆloc
(
cfg
->
n_groups
 *  *s.groups);

2773 
k
 = 0; k < 
cfg
->
n_groups
; k++) {

2774 c⁄° *
°rög
 = 
cfg
->
groups
[
k
];

2775 *
msg
;

2777 
msg
 = 
	`mf_∑r£_subfõld__
(&
s
.
groups
[
k
], &
°rög
);

2778 i‡(
msg
) {

2779 
	`VLOG_WARN_RL
(&
æ
, "bridge %sÅable %d:ÉrrorÖarsing "

2780 "'groups' (%s)", 
br
->
«me
, 
i
, 
msg
);

2781 
	`‰ì
(
msg
);

2782 } i‡(*
°rög
) {

2783 
	`VLOG_WARN_RL
(&
æ
, "bridge %sÅable %d: 'groups' "

2785 
br
->
«me
, 
i
, 
cfg
->
groups
[
k
]);

2787 
s
.
n_groups
++;

2793 
	`oÂrŸo_c⁄figuª_èbÀ
(
br
->
oÂrŸo
, 
i
, &
s
);

2795 
	`‰ì
(
s
.
groups
);

2797 ; 
j
 < 
br
->
cfg
->
n_Êow_èbÀs
; j++) {

2798 
	`VLOG_WARN_RL
(&
æ
, "bridge %s: ignoring configuration for flowÅable "

2799 "%"
PRId64
"ÇŸ suµ‹ãd byÅhi†d©≠©h", 
br
->
«me
,

2800 
br
->
cfg
->
key_Êow_èbÀs
[
j
]);

2802 
	}
}

2806 
p‹t
 *

2807 
	$p‹t_¸óã
(
bridge
 *
br
, c⁄° 
ov§ec_p‹t
 *
cfg
)

2809 
p‹t
 *port;

2811 
p‹t
 = 
	`xzÆloc
( *port);

2812 
p‹t
->
bridge
 = 
br
;

2813 
p‹t
->
«me
 = 
	`x°rdup
(
cfg
->name);

2814 
p‹t
->
cfg
 = cfg;

2815 
	`li°_öô
(&
p‹t
->
iÁ˚s
);

2817 
	`hm≠_ö£π
(&
br
->
p‹ts
, &
p‹t
->
hm≠_node
, 
	`hash_°rög
’‹t->
«me
, 0));

2818  
p‹t
;

2819 
	}
}

2823 
	$p‹t_dñ_iÁ˚s
(
p‹t
 *port)

2825 
iÁ˚
 *iÁ˚, *
√xt
;

2826 
s£t
 
√w_iÁ˚s
;

2827 
size_t
 
i
;

2830 
	`s£t_öô
(&
√w_iÁ˚s
);

2831 
i
 = 0; i < 
p‹t
->
cfg
->
n_öãrÁ˚s
; i++) {

2832 c⁄° *
«me
 = 
p‹t
->
cfg
->
öãrÁ˚s
[
i
]->name;

2833 c⁄° *
ty≥
 = 
p‹t
->
cfg
->
öãrÁ˚s
[
i
]->type;

2834 i‡(
	`°rcmp
(
ty≥
, "null")) {

2835 
	`s£t_add
(&
√w_iÁ˚s
, 
«me
);

2840 
	`LIST_FOR_EACH_SAFE
 (
iÁ˚
, 
√xt
, 
p‹t_ñem
, &
p‹t
->
iÁ˚s
) {

2841 i‡(!
	`s£t_c⁄èös
(&
√w_iÁ˚s
, 
iÁ˚
->
«me
)) {

2842 
	`iÁ˚_de°roy
(
iÁ˚
);

2846 
	`s£t_de°roy
(&
√w_iÁ˚s
);

2847 
	}
}

2850 
	$p‹t_de°roy
(
p‹t
 *port)

2852 i‡(
p‹t
) {

2853 
bridge
 *
br
 = 
p‹t
->bridge;

2854 
iÁ˚
 *iÁ˚, *
√xt
;

2856 i‡(
br
->
oÂrŸo
) {

2857 
	`oÂrŸo_bundÀ_uƒegi°î
(
br
->
oÂrŸo
, 
p‹t
);

2860 
	`LIST_FOR_EACH_SAFE
 (
iÁ˚
, 
√xt
, 
p‹t_ñem
, &
p‹t
->
iÁ˚s
) {

2861 
	`iÁ˚_de°roy
(
iÁ˚
);

2864 
	`hm≠_ªmove
(&
br
->
p‹ts
, &
p‹t
->
hm≠_node
);

2865 
	`‰ì
(
p‹t
->
«me
);

2866 
	`‰ì
(
p‹t
);

2868 
	}
}

2870 
p‹t
 *

2871 
	$p‹t_lookup
(c⁄° 
bridge
 *
br
, c⁄° *
«me
)

2873 
p‹t
 *port;

2875 
	`HMAP_FOR_EACH_WITH_HASH
 (
p‹t
, 
hm≠_node
, 
	`hash_°rög
(
«me
, 0),

2876 &
br
->
p‹ts
) {

2877 i‡(!
	`°rcmp
(
p‹t
->
«me
,Çame)) {

2878  
p‹t
;

2881  
NULL
;

2882 
	}
}

2884 
boﬁ


2885 
	$íabÀ_œ˝
(
p‹t
 *p‹t, 
boﬁ
 *
a˘ivï
)

2887 i‡(!
p‹t
->
cfg
->
œ˝
) {

2890  
Ál£
;

2891 } i‡(!
	`°rcmp
(
p‹t
->
cfg
->
œ˝
, "off")) {

2892  
Ál£
;

2893 } i‡(!
	`°rcmp
(
p‹t
->
cfg
->
œ˝
, "active")) {

2894 *
a˘ivï
 = 
åue
;

2895  
åue
;

2896 } i‡(!
	`°rcmp
(
p‹t
->
cfg
->
œ˝
, "passive")) {

2897 *
a˘ivï
 = 
Ál£
;

2898  
åue
;

2900 
	`VLOG_WARN
("port %s: unknown LACP mode %s",

2901 
p‹t
->
«me
,Ö‹t->
cfg
->
œ˝
);

2902  
Ál£
;

2904 
	}
}

2906 
œ˝_£âögs
 *

2907 
	$p‹t_c⁄figuª_œ˝
(
p‹t
 *p‹t, 
œ˝_£âögs
 *
s
)

2909 c⁄° *
œ˝_time
, *
sy°em_id
;

2910 
¥i‹ôy
;

2912 i‡(!
	`íabÀ_œ˝
(
p‹t
, &
s
->
a˘ive
)) {

2913  
NULL
;

2916 
s
->
«me
 = 
p‹t
->name;

2918 
sy°em_id
 = 
	`sm≠_gë
(&
p‹t
->
cfg
->
Ÿhî_c⁄fig
, "lacp-system-id");

2919 i‡(
sy°em_id
) {

2920 i‡(
	`ssˇnf
(
sy°em_id
, 
ETH_ADDR_SCAN_FMT
,

2921 
	`ETH_ADDR_SCAN_ARGS
(
s
->
id
)Ë!
ETH_ADDR_SCAN_COUNT
) {

2922 
	`VLOG_WARN
("port %s: LACP system ID (%s) must beán Ethernet"

2923 "áddªss.", 
p‹t
->
«me
, 
sy°em_id
);

2924  
NULL
;

2927 
	`mem˝y
(
s
->
id
, 
p‹t
->
bridge
->
ó
, 
ETH_ADDR_LEN
);

2930 i‡(
	`ëh_addr_is_zîo
(
s
->
id
)) {

2931 
	`VLOG_WARN
("p‹à%s: InvÆid zîÿLACP sy°em ID.", 
p‹t
->
«me
);

2932  
NULL
;

2936 
¥i‹ôy
 = 
	`sm≠_gë_öt
(&
p‹t
->
cfg
->
Ÿhî_c⁄fig
, "lacp-system-priority",

2938 
s
->
¥i‹ôy
 = (¥i‹ôy > 0 &&Öri‹ôy <
UINT16_MAX


2939 ? 
¥i‹ôy


2940 : 
UINT16_MAX
 - !
	`li°_is_sh‹t
(&
p‹t
->
iÁ˚s
));

2942 
œ˝_time
 = 
	`sm≠_gë
(&
p‹t
->
cfg
->
Ÿhî_c⁄fig
, "lacp-time");

2943 
s
->
Á°
 = 
œ˝_time
 && !
	`°rˇ£cmp
(lacp_time, "fast");

2944  
s
;

2945 
	}
}

2948 
	$iÁ˚_c⁄figuª_œ˝
(
iÁ˚
 *iÁ˚, 
œ˝_¶ave_£âögs
 *
s
)

2950 
¥i‹ôy
, 
p‹tid
, 
key
;

2952 
p‹tid
 = 
	`sm≠_gë_öt
(&
iÁ˚
->
cfg
->
Ÿhî_c⁄fig
, "lacp-port-id", 0);

2953 
¥i‹ôy
 = 
	`sm≠_gë_öt
(&
iÁ˚
->
cfg
->
Ÿhî_c⁄fig
, "lacp-port-priority",

2955 
key
 = 
	`sm≠_gë_öt
(&
iÁ˚
->
cfg
->
Ÿhî_c⁄fig
, "lacp-aggregation-key", 0);

2957 i‡(
p‹tid
 <0 ||Ö‹tid > 
UINT16_MAX
) {

2958 
p‹tid
 = 
iÁ˚
->
oÂ_p‹t
;

2961 i‡(
¥i‹ôy
 <0 ||Öri‹ôy > 
UINT16_MAX
) {

2962 
¥i‹ôy
 = 
UINT16_MAX
;

2965 i‡(
key
 < 0 || key > 
UINT16_MAX
) {

2966 
key
 = 0;

2969 
s
->
«me
 = 
iÁ˚
->name;

2970 
s
->
id
 = 
p‹tid
;

2971 
s
->
¥i‹ôy
 =Öriority;

2972 
s
->
key
 = key;

2973 
	}
}

2976 
	$p‹t_c⁄figuª_b⁄d
(
p‹t
 *p‹t, 
b⁄d_£âögs
 *
s
,

2977 
uöt32_t
 *
b⁄d_°abÀ_ids
)

2979 c⁄° *
dëe˘_s
;

2980 
iÁ˚
 *iface;

2981 
miim⁄_öãrvÆ
;

2982 
size_t
 
i
;

2984 
s
->
«me
 = 
p‹t
->name;

2985 
s
->
bÆ™˚
 = 
BM_AB
;

2986 i‡(
p‹t
->
cfg
->
b⁄d_mode
) {

2987 i‡(!
	`b⁄d_mode_‰om_°rög
(&
s
->
bÆ™˚
, 
p‹t
->
cfg
->
b⁄d_mode
)) {

2988 
	`VLOG_WARN
("port %s: unknown bond_mode %s, defaultingÅo %s",

2989 
p‹t
->
«me
,Ö‹t->
cfg
->
b⁄d_mode
,

2990 
	`b⁄d_mode_to_°rög
(
s
->
bÆ™˚
));

2993 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 1);

2997 
	`VLOG_WARN_RL
(&
æ
, "port %s: UsingÅhe default bond_mode %s. NoteÅhat"

2999 " bÆ™˚-¶b", 
p‹t
->
«me
,

3000 
	`b⁄d_mode_to_°rög
(
s
->
bÆ™˚
));

3002 i‡(
s
->
bÆ™˚
 =
BM_SLB
 && 
p‹t
->
bridge
->
cfg
->
n_Êood_vœns
) {

3003 
	`VLOG_WARN
("port %s: SLB bondsáre incompatible with flood_vlans, "

3005 
p‹t
->
«me
);

3008 
miim⁄_öãrvÆ
 = 
	`sm≠_gë_öt
(&
p‹t
->
cfg
->
Ÿhî_c⁄fig
,

3010 i‡(
miim⁄_öãrvÆ
 <= 0) {

3011 
miim⁄_öãrvÆ
 = 200;

3014 
dëe˘_s
 = 
	`sm≠_gë
(&
p‹t
->
cfg
->
Ÿhî_c⁄fig
, "bond-detect-mode");

3015 i‡(!
dëe˘_s
 || !
	`°rcmp
(detect_s, "carrier")) {

3016 
miim⁄_öãrvÆ
 = 0;

3017 } i‡(
	`°rcmp
(
dëe˘_s
, "miimon")) {

3018 
	`VLOG_WARN
("port %s: unsupported bond-detect-mode %s, "

3019 "deÁu…ögÅÿˇºõr", 
p‹t
->
«me
, 
dëe˘_s
);

3020 
miim⁄_öãrvÆ
 = 0;

3023 
s
->
up_dñay
 = 
	`MAX
(0, 
p‹t
->
cfg
->
b⁄d_updñay
);

3024 
s
->
down_dñay
 = 
	`MAX
(0, 
p‹t
->
cfg
->
b⁄d_downdñay
);

3025 
s
->
basis
 = 
	`sm≠_gë_öt
(&
p‹t
->
cfg
->
Ÿhî_c⁄fig
, "bond-hash-basis", 0);

3026 
s
->
ªbÆ™˚_öãrvÆ
 = 
	`sm≠_gë_öt
(&
p‹t
->
cfg
->
Ÿhî_c⁄fig
,

3028 i‡(
s
->
ªbÆ™˚_öãrvÆ
 && s->rebalance_interval < 1000) {

3029 
s
->
ªbÆ™˚_öãrvÆ
 = 1000;

3032 
s
->
Áke_iÁ˚
 = 
p‹t
->
cfg
->
b⁄d_Áke_iÁ˚
;

3034 
i
 = 0;

3035 
	`LIST_FOR_EACH
 (
iÁ˚
, 
p‹t_ñem
, &
p‹t
->
iÁ˚s
) {

3036 
°abÀ_id
;

3038 
°abÀ_id
 = 
	`sm≠_gë_öt
(&
iÁ˚
->
cfg
->
Ÿhî_c⁄fig
, "bond-stable-id",

3040 i‡(
°abÀ_id
 <0 || sèbÀ_id >
UINT32_MAX
) {

3041 
°abÀ_id
 = 
iÁ˚
->
oÂ_p‹t
;

3043 
b⁄d_°abÀ_ids
[
i
++] = 
°abÀ_id
;

3045 
	`√tdev_£t_miim⁄_öãrvÆ
(
iÁ˚
->
√tdev
, 
miim⁄_öãrvÆ
);

3047 
	}
}

3051 
boﬁ


3052 
	$p‹t_is_sy¡hëic
(c⁄° 
p‹t
 *port)

3054  
	`ovsdb_idl_row_is_sy¡hëic
(&
p‹t
->
cfg
->
hódî_
);

3055 
	}
}

3062 
	$iÁ˚_gë_ty≥
(c⁄° 
ov§ec_öãrÁ˚
 *
iÁ˚
,

3063 c⁄° 
ov§ec_bridge
 *
br
)

3067  (!
	`°rcmp
(
iÁ˚
->
«me
, 
br
->name) ? "internal"

3068 : 
iÁ˚
->
ty≥
[0] ? iface->type

3070 
	}
}

3073 
	$iÁ˚_de°roy
(
iÁ˚
 *iface)

3075 i‡(
iÁ˚
) {

3076 
p‹t
 *p‹à
iÁ˚
->port;

3077 
bridge
 *
br
 = 
p‹t
->bridge;

3079 i‡(
br
->
oÂrŸo
 && 
iÁ˚
->
oÂ_p‹t
 >= 0) {

3080 
	`oÂrŸo_p‹t_uƒegi°î
(
br
->
oÂrŸo
, 
iÁ˚
->
oÂ_p‹t
);

3083 i‡(
iÁ˚
->
oÂ_p‹t
 >= 0) {

3084 
	`hm≠_ªmove
(&
br
->
iÁ˚s
, &
iÁ˚
->
oÂ_p‹t_node
);

3087 
	`li°_ªmove
(&
iÁ˚
->
p‹t_ñem
);

3088 
	`hm≠_ªmove
(&
br
->
iÁ˚_by_«me
, &
iÁ˚
->
«me_node
);

3090 
	`√tdev_˛o£
(
iÁ˚
->
√tdev
);

3092 
	`‰ì
(
iÁ˚
->
«me
);

3093 
	`‰ì
(
iÁ˚
);

3095 
	}
}

3097 
iÁ˚
 *

3098 
	$iÁ˚_lookup
(c⁄° 
bridge
 *
br
, c⁄° *
«me
)

3100 
iÁ˚
 *iface;

3102 
	`HMAP_FOR_EACH_WITH_HASH
 (
iÁ˚
, 
«me_node
, 
	`hash_°rög
(
«me
, 0),

3103 &
br
->
iÁ˚_by_«me
) {

3104 i‡(!
	`°rcmp
(
iÁ˚
->
«me
,Çame)) {

3105  
iÁ˚
;

3109  
NULL
;

3110 
	}
}

3112 
iÁ˚
 *

3113 
	$iÁ˚_föd
(c⁄° *
«me
)

3115 c⁄° 
bridge
 *
br
;

3117 
	`HMAP_FOR_EACH
 (
br
, 
node
, &
Æl_bridges
) {

3118 
iÁ˚
 *iÁ˚ = 
	`iÁ˚_lookup
(
br
, 
«me
);

3120 i‡(
iÁ˚
) {

3121  
iÁ˚
;

3124  
NULL
;

3125 
	}
}

3127 
if_cfg
 *

3128 
	$if_cfg_lookup
(c⁄° 
bridge
 *
br
, c⁄° *
«me
)

3130 
if_cfg
 *if_cfg;

3132 
	`HMAP_FOR_EACH_WITH_HASH
 (
if_cfg
, 
hm≠_node
, 
	`hash_°rög
(
«me
, 0),

3133 &
br
->
if_cfg_todo
) {

3134 i‡(!
	`°rcmp
(
if_cfg
->
cfg
->
«me
,Çame)) {

3135  
if_cfg
;

3139  
NULL
;

3140 
	}
}

3142 
iÁ˚
 *

3143 
	$iÁ˚_‰om_oÂ_p‹t
(c⁄° 
bridge
 *
br
, 
uöt16_t
 
oÂ_p‹t
)

3145 
iÁ˚
 *iface;

3147 
	`HMAP_FOR_EACH_IN_BUCKET
 (
iÁ˚
, 
oÂ_p‹t_node
,

3148 
	`hash_öt
(
oÂ_p‹t
, 0), &
br
->
iÁ˚s
) {

3149 i‡(
iÁ˚
->
oÂ_p‹t
 == ofp_port) {

3150  
iÁ˚
;

3153  
NULL
;

3154 
	}
}

3159 
	$iÁ˚_£t_mac
(
iÁ˚
 *iface)

3161 
uöt8_t
 
ó
[
ETH_ADDR_LEN
];

3163 i‡(!
	`°rcmp
(
iÁ˚
->
ty≥
, "internal")

3164 && 
iÁ˚
->
cfg
->
mac
 && 
	`ëh_addr_‰om_°rög
(iÁ˚->cfg->mac, 
ó
)) {

3165 i‡(
iÁ˚
->
oÂ_p‹t
 =
OFPP_LOCAL
) {

3166 
	`VLOG_ERR
("interface %s: ignoring mac in InterfaceÑecord "

3168 
iÁ˚
->
«me
);

3169 } i‡(
	`ëh_addr_is_mu…iˇ°
(
ó
)) {

3170 
	`VLOG_ERR
("interface %s: cannot set MACÅo multicastáddress",

3171 
iÁ˚
->
«me
);

3173 
îr‹
 = 
	`√tdev_£t_ëhîaddr
(
iÁ˚
->
√tdev
, 
ó
);

3174 i‡(
îr‹
) {

3175 
	`VLOG_ERR
("interface %s: setting MAC failed (%s)",

3176 
iÁ˚
->
«me
, 
	`°ªº‹
(
îr‹
));

3180 
	}
}

3184 
	$iÁ˚_£t_oÂ‹t
(c⁄° 
ov§ec_öãrÁ˚
 *
if_cfg
, 
öt64_t
 
oÂ‹t
)

3186 i‡(
if_cfg
 && !
	`ovsdb_idl_row_is_sy¡hëic
(&if_cfg->
hódî_
)) {

3187 
	`ov§ec_öãrÁ˚_£t_oÂ‹t
(
if_cfg
, &
oÂ‹t
, 1);

3189 
	}
}

3197 
	$iÁ˚_˛ór_db_ªc‹d
(c⁄° 
ov§ec_öãrÁ˚
 *
if_cfg
)

3199 i‡(!
	`ovsdb_idl_row_is_sy¡hëic
(&
if_cfg
->
hódî_
)) {

3200 
	`iÁ˚_£t_oÂ‹t
(
if_cfg
, -1);

3201 
	`ov§ec_öãrÁ˚_£t_°©us
(
if_cfg
, 
NULL
);

3202 
	`ov§ec_öãrÁ˚_£t_admö_°©e
(
if_cfg
, 
NULL
);

3203 
	`ov§ec_öãrÁ˚_£t_du∂ex
(
if_cfg
, 
NULL
);

3204 
	`ov§ec_öãrÁ˚_£t_lök_•ìd
(
if_cfg
, 
NULL
, 0);

3205 
	`ov§ec_öãrÁ˚_£t_lök_°©e
(
if_cfg
, 
NULL
);

3206 
	`ov§ec_öãrÁ˚_£t_mtu
(
if_cfg
, 
NULL
, 0);

3207 
	`ov§ec_öãrÁ˚_£t_cfm_Áu…
(
if_cfg
, 
NULL
, 0);

3208 
	`ov§ec_öãrÁ˚_£t_cfm_Áu…_°©us
(
if_cfg
, 
NULL
, 0);

3209 
	`ov§ec_öãrÁ˚_£t_cfm_ªmŸe_mpids
(
if_cfg
, 
NULL
, 0);

3210 
	`ov§ec_öãrÁ˚_£t_œ˝_cuºít
(
if_cfg
, 
NULL
, 0);

3211 
	`ov§ec_öãrÁ˚_£t_°©i°ics
(
if_cfg
, 
NULL
, NULL, 0);

3213 
	}
}

3215 
	siÁ˚_dñëe_queues_cbd©a
 {

3216 
√tdev
 *
	m√tdev
;

3217 c⁄° 
ovsdb_d©um
 *
	mqueues
;

3220 
boﬁ


3221 
	$queue_ids_ö˛ude
(c⁄° 
ovsdb_d©um
 *
queues
, 
öt64_t
 
èrgë
)

3223 
ovsdb_©om
 
©om
;

3225 
©om
.
öãgî
 = 
èrgë
;

3226  
	`ovsdb_d©um_föd_key
(
queues
, &
©om
, 
OVSDB_TYPE_INTEGER
Ë!
UINT_MAX
;

3227 
	}
}

3230 
	$iÁ˚_dñëe_queues
(
queue_id
,

3231 c⁄° 
sm≠
 *
dëaûs
 
OVS_UNUSED
, *
cbd©a_
)

3233 
iÁ˚_dñëe_queues_cbd©a
 *
cbd©a
 = 
cbd©a_
;

3235 i‡(!
	`queue_ids_ö˛ude
(
cbd©a
->
queues
, 
queue_id
)) {

3236 
	`√tdev_dñëe_queue
(
cbd©a
->
√tdev
, 
queue_id
);

3238 
	}
}

3241 
	$iÁ˚_c⁄figuª_qos
(
iÁ˚
 *iÁ˚, c⁄° 
ov§ec_qos
 *
qos
)

3243 
oÂbuf
 
queues_buf
;

3245 
	`oÂbuf_öô
(&
queues_buf
, 0);

3247 i‡(!
qos
 || qos->
ty≥
[0] ='\0' || qos->
n_queues
 < 1) {

3248 
	`√tdev_£t_qos
(
iÁ˚
->
√tdev
, 
NULL
, NULL);

3250 
iÁ˚_dñëe_queues_cbd©a
 
cbd©a
;

3251 
boﬁ
 
queue_zîo
;

3252 
size_t
 
i
;

3255 
	`√tdev_£t_qos
(
iÁ˚
->
√tdev
, 
qos
->
ty≥
, &qos->
Ÿhî_c⁄fig
);

3258 
cbd©a
.
√tdev
 = 
iÁ˚
->netdev;

3259 
cbd©a
.
queues
 = 
	`ov§ec_qos_gë_queues
(
qos
, 
OVSDB_TYPE_INTEGER
,

3260 
OVSDB_TYPE_UUID
);

3261 
	`√tdev_dump_queues
(
iÁ˚
->
√tdev
, 
iÁ˚_dñëe_queues
, &
cbd©a
);

3264 
queue_zîo
 = 
Ál£
;

3265 
i
 = 0; i < 
qos
->
n_queues
; i++) {

3266 c⁄° 
ov§ec_queue
 *
queue
 = 
qos
->
vÆue_queues
[
i
];

3267 
queue_id
 = 
qos
->
key_queues
[
i
];

3269 i‡(
queue_id
 == 0) {

3270 
queue_zîo
 = 
åue
;

3273 i‡(
queue
->
n_ds˝
 == 1) {

3274 
oÂrŸo_p‹t_queue
 *
p‹t_queue
;

3276 
p‹t_queue
 = 
	`oÂbuf_put_unöô
(&
queues_buf
,

3277  *
p‹t_queue
);

3278 
p‹t_queue
->
queue
 = 
queue_id
;

3279 
p‹t_queue
->
ds˝
 = 
queue
->dscp[0];

3282 
	`√tdev_£t_queue
(
iÁ˚
->
√tdev
, 
queue_id
, &
queue
->
Ÿhî_c⁄fig
);

3284 i‡(!
queue_zîo
) {

3285 
sm≠
 
dëaûs
;

3287 
	`sm≠_öô
(&
dëaûs
);

3288 
	`√tdev_£t_queue
(
iÁ˚
->
√tdev
, 0, &
dëaûs
);

3289 
	`sm≠_de°roy
(&
dëaûs
);

3293 i‡(
iÁ˚
->
oÂ_p‹t
 >= 0) {

3294 c⁄° 
oÂrŸo_p‹t_queue
 *
p‹t_queues
 = 
queues_buf
.
d©a
;

3295 
size_t
 
n_queues
 = 
queues_buf
.
size
 /  *
p‹t_queues
;

3297 
	`oÂrŸo_p‹t_£t_queues
(
iÁ˚
->
p‹t
->
bridge
->
oÂrŸo
, iÁ˚->
oÂ_p‹t
,

3298 
p‹t_queues
, 
n_queues
);

3301 
	`√tdev_£t_pﬁicög
(
iÁ˚
->
√tdev
,

3302 
iÁ˚
->
cfg
->
ögªss_pﬁicög_øã
,

3303 
iÁ˚
->
cfg
->
ögªss_pﬁicög_bur°
);

3305 
	`oÂbuf_unöô
(&
queues_buf
);

3306 
	}
}

3309 
	$iÁ˚_c⁄figuª_cfm
(
iÁ˚
 *iface)

3311 c⁄° 
ov§ec_öãrÁ˚
 *
cfg
 = 
iÁ˚
->cfg;

3312 c⁄° *
›°©e_°r
;

3313 c⁄° *
cfm_ccm_vœn
;

3314 
cfm_£âögs
 
s
;

3315 
sm≠
 
√tdev_¨gs
;

3317 i‡(!
cfg
->
n_cfm_mpid
) {

3318 
	`oÂrŸo_p‹t_˛ór_cfm
(
iÁ˚
->
p‹t
->
bridge
->
oÂrŸo
, iÁ˚->
oÂ_p‹t
);

3322 
s
.
check_äl_key
 = 
Ál£
;

3323 
	`sm≠_öô
(&
√tdev_¨gs
);

3324 i‡(!
	`√tdev_gë_c⁄fig
(
iÁ˚
->
√tdev
, &
√tdev_¨gs
)) {

3325 c⁄° *
key
 = 
	`sm≠_gë
(&
√tdev_¨gs
, "key");

3326 c⁄° *
ö_key
 = 
	`sm≠_gë
(&
√tdev_¨gs
, "in_key");

3328 
s
.
check_äl_key
 = (
key
 && !
	`°rcmp
(key, "flow"))

3329 || (
ö_key
 && !
	`°rcmp
(in_key, "flow"));

3331 
	`sm≠_de°roy
(&
√tdev_¨gs
);

3333 
s
.
mpid
 = *
cfg
->
cfm_mpid
;

3334 
s
.
öãrvÆ
 = 
	`sm≠_gë_öt
(&
iÁ˚
->
cfg
->
Ÿhî_c⁄fig
, "cfm_interval", 0);

3335 
cfm_ccm_vœn
 = 
	`sm≠_gë
(&
iÁ˚
->
cfg
->
Ÿhî_c⁄fig
, "cfm_ccm_vlan");

3336 
s
.
ccm_p˝
 = 
	`sm≠_gë_öt
(&
iÁ˚
->
cfg
->
Ÿhî_c⁄fig
, "cfm_ccm_pcp", 0);

3338 i‡(
s
.
öãrvÆ
 <= 0) {

3339 
s
.
öãrvÆ
 = 1000;

3342 i‡(!
cfm_ccm_vœn
) {

3343 
s
.
ccm_vœn
 = 0;

3344 } i‡(!
	`°rˇ£cmp
("øndom", 
cfm_ccm_vœn
)) {

3345 
s
.
ccm_vœn
 = 
CFM_RANDOM_VLAN
;

3347 
s
.
ccm_vœn
 = 
	`©oi
(
cfm_ccm_vœn
);

3348 i‡(
s
.
ccm_vœn
 =
CFM_RANDOM_VLAN
) {

3349 
s
.
ccm_vœn
 = 0;

3353 
s
.
exãnded
 = 
	`sm≠_gë_boﬁ
(&
iÁ˚
->
cfg
->
Ÿhî_c⁄fig
, "cfm_extended",

3354 
Ál£
);

3356 
›°©e_°r
 = 
	`sm≠_gë
(&
iÁ˚
->
cfg
->
Ÿhî_c⁄fig
, "cfm_opstate");

3357 
s
.
›up
 = !
›°©e_°r
 || !
	`°rˇ£cmp
("up", opstate_str);

3359 
	`oÂrŸo_p‹t_£t_cfm
(
iÁ˚
->
p‹t
->
bridge
->
oÂrŸo
, iÁ˚->
oÂ_p‹t
, &
s
);

3360 
	}
}

3364 
boﬁ


3365 
	$iÁ˚_is_sy¡hëic
(c⁄° 
iÁ˚
 *iface)

3367  
	`ovsdb_idl_row_is_sy¡hëic
(&
iÁ˚
->
cfg
->
hódî_
);

3368 
	}
}

3373 
múr‹
 *

3374 
	$múr‹_föd_by_uuid
(
bridge
 *
br
, c⁄° 
uuid
 *uuid)

3376 
múr‹
 *
m
;

3378 
	`HMAP_FOR_EACH_IN_BUCKET
 (
m
, 
hm≠_node
, 
	`uuid_hash
(
uuid
), &
br
->
múr‹s
) {

3379 i‡(
	`uuid_equÆs
(
uuid
, &
m
->uuid)) {

3380  
m
;

3383  
NULL
;

3384 
	}
}

3387 
	$bridge_c⁄figuª_múr‹s
(
bridge
 *
br
)

3389 c⁄° 
ovsdb_d©um
 *
mc
;

3390 *
Êood_vœns
;

3391 
múr‹
 *
m
, *
√xt
;

3392 
size_t
 
i
;

3395 
mc
 = 
	`ov§ec_bridge_gë_múr‹s
(
br
->
cfg
, 
OVSDB_TYPE_UUID
);

3396 
	`HMAP_FOR_EACH_SAFE
 (
m
, 
√xt
, 
hm≠_node
, &
br
->
múr‹s
) {

3397 
ovsdb_©om
 
©om
;

3399 
©om
.
uuid
 = 
m
->uuid;

3400 i‡(
	`ovsdb_d©um_föd_key
(
mc
, &
©om
, 
OVSDB_TYPE_UUID
Ë=
UINT_MAX
) {

3401 
	`múr‹_de°roy
(
m
);

3406 
i
 = 0; i < 
br
->
cfg
->
n_múr‹s
; i++) {

3407 c⁄° 
ov§ec_múr‹
 *
cfg
 = 
br
->cfg->
múr‹s
[
i
];

3408 
múr‹
 *
m
 = 
	`múr‹_föd_by_uuid
(
br
, &
cfg
->
hódî_
.
uuid
);

3409 i‡(!
m
) {

3410 
m
 = 
	`múr‹_¸óã
(
br
, 
cfg
);

3412 
m
->
cfg
 = cfg;

3413 i‡(!
	`múr‹_c⁄figuª
(
m
)) {

3414 
	`múr‹_de°roy
(
m
);

3419 
Êood_vœns
 = 
	`vœn_bôm≠_‰om_¨øy
(
br
->
cfg
->flood_vlans,

3420 
br
->
cfg
->
n_Êood_vœns
);

3421 
	`oÂrŸo_£t_Êood_vœns
(
br
->
oÂrŸo
, 
Êood_vœns
);

3422 
	`bôm≠_‰ì
(
Êood_vœns
);

3423 
	}
}

3425 
múr‹
 *

3426 
	$múr‹_¸óã
(
bridge
 *
br
, c⁄° 
ov§ec_múr‹
 *
cfg
)

3428 
múr‹
 *
m
;

3430 
m
 = 
	`xzÆloc
( *m);

3431 
m
->
uuid
 = 
cfg
->
hódî_
.uuid;

3432 
	`hm≠_ö£π
(&
br
->
múr‹s
, &
m
->
hm≠_node
, 
	`uuid_hash
(&m->
uuid
));

3433 
m
->
bridge
 = 
br
;

3434 
m
->
«me
 = 
	`x°rdup
(
cfg
->name);

3436  
m
;

3437 
	}
}

3440 
	$múr‹_de°roy
(
múr‹
 *
m
)

3442 i‡(
m
) {

3443 
bridge
 *
br
 = 
m
->bridge;

3445 i‡(
br
->
oÂrŸo
) {

3446 
	`oÂrŸo_múr‹_uƒegi°î
(
br
->
oÂrŸo
, 
m
);

3449 
	`hm≠_ªmove
(&
br
->
múr‹s
, &
m
->
hm≠_node
);

3450 
	`‰ì
(
m
->
«me
);

3451 
	`‰ì
(
m
);

3453 
	}
}

3456 
	$múr‹_cﬁÀ˘_p‹ts
(
múr‹
 *
m
,

3457 
ov§ec_p‹t
 **
ö_p‹ts
, 
n_ö_p‹ts
,

3458 ***
out_p‹t•
, 
size_t
 *
n_out_p‹t•
)

3460 **
out_p‹ts
 = 
	`xmÆloc
(
n_ö_p‹ts
 *  *out_ports);

3461 
size_t
 
n_out_p‹ts
 = 0;

3462 
size_t
 
i
;

3464 
i
 = 0; i < 
n_ö_p‹ts
; i++) {

3465 c⁄° *
«me
 = 
ö_p‹ts
[
i
]->name;

3466 
p‹t
 *p‹à
	`p‹t_lookup
(
m
->
bridge
, 
«me
);

3467 i‡(
p‹t
) {

3468 
out_p‹ts
[
n_out_p‹ts
++] = 
p‹t
;

3470 
	`VLOG_WARN
("bridge %s: mirror %s cannot match onÇonexistent "

3471 "p‹à%s", 
m
->
bridge
->
«me
, m->name,Çame);

3474 *
out_p‹t•
 = 
out_p‹ts
;

3475 *
n_out_p‹t•
 = 
n_out_p‹ts
;

3476 
	}
}

3478 
boﬁ


3479 
	$múr‹_c⁄figuª
(
múr‹
 *
m
)

3481 c⁄° 
ov§ec_múr‹
 *
cfg
 = 
m
->cfg;

3482 
oÂrŸo_múr‹_£âögs
 
s
;

3485 i‡(
	`°rcmp
(
cfg
->
«me
, 
m
->name)) {

3486 
	`‰ì
(
m
->
«me
);

3487 
m
->
«me
 = 
	`x°rdup
(
cfg
->name);

3489 
s
.
«me
 = 
m
->name;

3492 i‡(
cfg
->
ouçut_p‹t
) {

3493 
s
.
out_bundÀ
 = 
	`p‹t_lookup
(
m
->
bridge
, 
cfg
->
ouçut_p‹t
->
«me
);

3494 i‡(!
s
.
out_bundÀ
) {

3495 
	`VLOG_ERR
("bridge %s: mirror %s outputsÅoÖortÇot on bridge",

3496 
m
->
bridge
->
«me
, m->name);

3497  
Ál£
;

3499 
s
.
out_vœn
 = 
UINT16_MAX
;

3501 i‡(
cfg
->
ouçut_vœn
) {

3502 
	`VLOG_ERR
("bridge %s: mirror %s specifies both outputÖortánd "

3504 
m
->
bridge
->
«me
, m->name);

3506 } i‡(
cfg
->
ouçut_vœn
) {

3508 
s
.
out_bundÀ
 = 
NULL
;

3509 
s
.
out_vœn
 = *
cfg
->
ouçut_vœn
;

3511 
	`VLOG_ERR
("bridge %s: mirror %s doesÇot specify output; ignoring",

3512 
m
->
bridge
->
«me
, m->name);

3513  
Ál£
;

3517 i‡(
cfg
->
£À˘_Æl
) {

3518 
size_t
 
n_p‹ts
 = 
	`hm≠_cou¡
(&
m
->
bridge
->
p‹ts
);

3519 **
p‹ts
 = 
	`xmÆloc
(
n_p‹ts
 *  *ports);

3520 
p‹t
 *port;

3521 
size_t
 
i
;

3523 
i
 = 0;

3524 
	`HMAP_FOR_EACH
 (
p‹t
, 
hm≠_node
, &
m
->
bridge
->
p‹ts
) {

3525 
p‹ts
[
i
++] = 
p‹t
;

3528 
s
.
§cs
 = 
p‹ts
;

3529 
s
.
n_§cs
 = 
n_p‹ts
;

3531 
s
.
d°s
 = 
p‹ts
;

3532 
s
.
n_d°s
 = 
n_p‹ts
;

3536 
	`múr‹_cﬁÀ˘_p‹ts
(
m
, 
cfg
->
£À˘_§c_p‹t
, cfg->
n_£À˘_§c_p‹t
,

3537 &
s
.
§cs
, &s.
n_§cs
);

3538 
	`múr‹_cﬁÀ˘_p‹ts
(
m
, 
cfg
->
£À˘_d°_p‹t
, cfg->
n_£À˘_d°_p‹t
,

3539 &
s
.
d°s
, &s.
n_d°s
);

3543 
s
.
§c_vœns
 = 
	`vœn_bôm≠_‰om_¨øy
(
cfg
->
£À˘_vœn
, cfg->
n_£À˘_vœn
);

3546 
	`oÂrŸo_múr‹_ªgi°î
(
m
->
bridge
->
oÂrŸo
, m, &
s
);

3549 i‡(
s
.
§cs
 !s.
d°s
) {

3550 
	`‰ì
(
s
.
d°s
);

3552 
	`‰ì
(
s
.
§cs
);

3553 
	`‰ì
(
s
.
§c_vœns
);

3555  
åue
;

3556 
	}
}

3565 
ov§ec_p‹t
 **
	gªcs
;

3566 
size_t
 
	gn_ªcs
, 
	gÆloˇãd_ªcs
;

3571 
	$ªgi°î_ªc
(
ov§ec_p‹t
 *
ªc
)

3573 i‡(
n_ªcs
 >
Æloˇãd_ªcs
) {

3574 
ªcs
 = 
	`x2ƒóŒoc
‘ecs, &
Æloˇãd_ªcs
,  *recs);

3576 
ªcs
[
n_ªcs
++] = 
ªc
;

3577 
	}
}

3581 
	$‰ì_ªgi°îed_ªcs
()

3583 
size_t
 
i
;

3585 
i
 = 0; i < 
n_ªcs
; i++) {

3586 
ov§ec_p‹t
 *
p‹t
 = 
ªcs
[
i
];

3587 
size_t
 
j
;

3589 
j
 = 0; j < 
p‹t
->
n_öãrÁ˚s
; j++) {

3590 
ov§ec_öãrÁ˚
 *
iÁ˚
 = 
p‹t
->
öãrÁ˚s
[
j
];

3591 
	`‰ì
(
iÁ˚
->
«me
);

3592 
	`‰ì
(
iÁ˚
);

3595 
	`sm≠_de°roy
(&
p‹t
->
Ÿhî_c⁄fig
);

3596 
	`‰ì
(
p‹t
->
öãrÁ˚s
);

3597 
	`‰ì
(
p‹t
->
«me
);

3598 
	`‰ì
(
p‹t
->
èg
);

3599 
	`‰ì
(
p‹t
);

3601 
n_ªcs
 = 0;

3602 
	}
}

3606 
boﬁ


3607 
	$vœn_•löãrs_is_íabÀd
(c⁄° 
ov§ec_öãrÁ˚
 *
iÁ˚_cfg
)

3609  
	`sm≠_gë_boﬁ
(&
iÁ˚_cfg
->
Ÿhî_c⁄fig
, "enable-vlan-splinters",

3610 
Ál£
);

3611 
	}
}

3626 
	$cﬁÀ˘_•löãr_vœns
(c⁄° 
ov§ec_›í_vswôch
 *
ovs_cfg
)

3628 *
•löãr_vœns
;

3629 
s£t
 
•löãr_iÁ˚s
;

3630 c⁄° *
ªÆ_dev_«me
;

3631 
shash
 *
ªÆ_devs
;

3632 
shash_node
 *
node
;

3633 
bridge
 *
br
;

3634 
size_t
 
i
;

3638 
	`‰ì_ªgi°îed_ªcs
();

3640 
•löãr_vœns
 = 
	`bôm≠_Æloˇã
(4096);

3641 
	`s£t_öô
(&
•löãr_iÁ˚s
);

3642 
vœn_•löãrs_íabÀd_™ywhîe
 = 
Ál£
;

3643 
i
 = 0; i < 
ovs_cfg
->
n_bridges
; i++) {

3644 
ov§ec_bridge
 *
br_cfg
 = 
ovs_cfg
->
bridges
[
i
];

3645 
size_t
 
j
;

3647 
j
 = 0; j < 
br_cfg
->
n_p‹ts
; j++) {

3648 
ov§ec_p‹t
 *
p‹t_cfg
 = 
br_cfg
->
p‹ts
[
j
];

3649 
k
;

3651 
k
 = 0; k < 
p‹t_cfg
->
n_öãrÁ˚s
; k++) {

3652 
ov§ec_öãrÁ˚
 *
iÁ˚_cfg
 = 
p‹t_cfg
->
öãrÁ˚s
[
k
];

3654 i‡(
	`vœn_•löãrs_is_íabÀd
(
iÁ˚_cfg
)) {

3655 
vœn_•löãrs_íabÀd_™ywhîe
 = 
åue
;

3656 
	`s£t_add
(&
•löãr_iÁ˚s
, 
iÁ˚_cfg
->
«me
);

3657 
	`vœn_bôm≠_‰om_¨øy__
(
p‹t_cfg
->
åunks
,

3658 
p‹t_cfg
->
n_åunks
,

3659 
•löãr_vœns
);

3663 i‡(
p‹t_cfg
->
èg
 && *port_cfg->tag > 0 && *port_cfg->tag < 4095) {

3664 
	`bôm≠_£t1
(
•löãr_vœns
, *
p‹t_cfg
->
èg
);

3669 i‡(!
vœn_•löãrs_íabÀd_™ywhîe
) {

3670 
	`‰ì
(
•löãr_vœns
);

3671 
	`s£t_de°roy
(&
•löãr_iÁ˚s
);

3672  
NULL
;

3675 
	`HMAP_FOR_EACH
 (
br
, 
node
, &
Æl_bridges
) {

3676 i‡(
br
->
oÂrŸo
) {

3677 
	`oÂrŸo_gë_vœn_ußge
(
br
->
oÂrŸo
, 
•löãr_vœns
);

3684 
	`bôm≠_£t0
(
•löãr_vœns
, 0);

3685 
	`bôm≠_£t0
(
•löãr_vœns
, 4095);

3688 
	`vœndev_ª‰esh
();

3689 
ªÆ_devs
 = 
	`vœndev_gë_ªÆ_devs
();

3690 
	`SHASH_FOR_EACH
 (
node
, 
ªÆ_devs
) {

3691 c⁄° 
vœn_ªÆ_dev
 *
ªÆ_dev
 = 
node
->
d©a
;

3692 c⁄° 
vœn_dev
 *vlan_dev;

3693 
boﬁ
 
ªÆ_dev_has_•löãrs
;

3695 
ªÆ_dev_has_•löãrs
 = 
	`s£t_c⁄èös
(&
•löãr_iÁ˚s
,

3696 
ªÆ_dev
->
«me
);

3697 
	`HMAP_FOR_EACH
 (
vœn_dev
, 
hm≠_node
, &
ªÆ_dev
->
vœn_devs
) {

3698 i‡(!
ªÆ_dev_has_•löãrs


3699 || !
	`bôm≠_is_£t
(
•löãr_vœns
, 
vœn_dev
->
vid
)) {

3700 
√tdev
 *netdev;

3702 i‡(!
	`√tdev_›í
(
vœn_dev
->
«me
, "sy°em", &
√tdev
)) {

3703 i‡(!
	`√tdev_gë_ö4
(
√tdev
, 
NULL
, NULL) ||

3704 !
	`√tdev_gë_ö6
(
√tdev
, 
NULL
)) {

3705 
	`vœndev_dñ
(
vœn_dev
->
«me
);

3710 
	`√tdev_˛o£
(
√tdev
);

3718 
	`SSET_FOR_EACH
 (
ªÆ_dev_«me
, &
•löãr_iÁ˚s
) {

3719 
vid
;

3721 
	`BITMAP_FOR_EACH_1
 (
vid
, 4096, 
•löãr_vœns
) {

3722 i‡(!
	`vœndev_gë_«me
(
ªÆ_dev_«me
, 
vid
)) {

3723 
	`vœndev_add
(
ªÆ_dev_«me
, 
vid
);

3728 
	`vœndev_ª‰esh
();

3730 
	`s£t_de°roy
(&
•löãr_iÁ˚s
);

3732 i‡(
	`bôm≠_sˇn
(
•löãr_vœns
, 0, 4096) >= 4096) {

3733 
	`‰ì
(
•löãr_vœns
);

3734  
NULL
;

3736  
•löãr_vœns
;

3737 
	}
}

3742 
	$c⁄figuª_•löãr_p‹t
(
p‹t
 *port)

3744 
oÂrŸo
 *oÂrŸÿ
p‹t
->
bridge
->ofproto;

3745 
uöt16_t
 
ªÆdev_oÂ_p‹t
;

3746 c⁄° *
ªÆdev_«me
;

3747 
iÁ˚
 *
vœndev
, *
ªÆdev
;

3749 
	`oÂrŸo_bundÀ_uƒegi°î
(
p‹t
->
bridge
->
oÂrŸo
,Öort);

3751 
vœndev
 = 
	`CONTAINER_OF
(
	`li°_‰⁄t
(&
p‹t
->
iÁ˚s
), 
iÁ˚
,

3752 
p‹t_ñem
);

3754 
ªÆdev_«me
 = 
	`sm≠_gë
(&
p‹t
->
cfg
->
Ÿhî_c⁄fig
, "realdev");

3755 
ªÆdev
 = 
	`iÁ˚_lookup
(
p‹t
->
bridge
, 
ªÆdev_«me
);

3756 
ªÆdev_oÂ_p‹t
 = 
ªÆdev
 ?Ñóldev->
oÂ_p‹t
 : 0;

3758 
	`oÂrŸo_p‹t_£t_ªÆdev
(
oÂrŸo
, 
vœndev
->
oÂ_p‹t
, 
ªÆdev_oÂ_p‹t
,

3759 *
p‹t
->
cfg
->
èg
);

3760 
	}
}

3762 
ov§ec_p‹t
 *

3763 
	$sy¡hesize_•löãr_p‹t
(c⁄° *
ªÆ_dev_«me
,

3764 c⁄° *
vœn_dev_«me
, 
vid
)

3766 
ov§ec_öãrÁ˚
 *
iÁ˚
;

3767 
ov§ec_p‹t
 *
p‹t
;

3769 
iÁ˚
 = 
	`xmÆloc
( *iface);

3770 
	`ov§ec_öãrÁ˚_öô
(
iÁ˚
);

3771 
iÁ˚
->
«me
 = 
	`x°rdup
(
vœn_dev_«me
);

3772 
iÁ˚
->
ty≥
 = "system";

3774 
p‹t
 = 
	`xmÆloc
( *port);

3775 
	`ov§ec_p‹t_öô
(
p‹t
);

3776 
p‹t
->
öãrÁ˚s
 = 
	`xmemdup
(&
iÁ˚
,  iface);

3777 
p‹t
->
n_öãrÁ˚s
 = 1;

3778 
p‹t
->
«me
 = 
	`x°rdup
(
vœn_dev_«me
);

3779 
p‹t
->
vœn_mode
 = "splinter";

3780 
p‹t
->
èg
 = 
	`xmÆloc
( *port->tag);

3781 *
p‹t
->
èg
 = 
vid
;

3783 
	`sm≠_add
(&
p‹t
->
Ÿhî_c⁄fig
, "ªÆdev", 
ªÆ_dev_«me
);

3785 
	`ªgi°î_ªc
(
p‹t
);

3786  
p‹t
;

3787 
	}
}

3793 
	$add_vœn_•löãr_p‹ts
(
bridge
 *
br
,

3794 c⁄° *
•löãr_vœns
,

3795 
shash
 *
p‹ts
)

3797 
size_t
 
i
;

3801 
i
 = 0; i < 
br
->
cfg
->
n_p‹ts
; i++) {

3802 c⁄° *
«me
 = 
br
->
cfg
->
p‹ts
[
i
]->name;

3803 
ov§ec_p‹t
 *
p‹t_cfg
 = 
	`shash_föd_d©a
(
p‹ts
, 
«me
);

3804 
size_t
 
j
;

3806 
j
 = 0; j < 
p‹t_cfg
->
n_öãrÁ˚s
; j++) {

3807 
ov§ec_öãrÁ˚
 *
iÁ˚_cfg
 = 
p‹t_cfg
->
öãrÁ˚s
[
j
];

3809 i‡(
	`vœn_•löãrs_is_íabÀd
(
iÁ˚_cfg
)) {

3810 c⁄° *
ªÆ_dev_«me
;

3811 
uöt16_t
 
vid
;

3813 
ªÆ_dev_«me
 = 
iÁ˚_cfg
->
«me
;

3814 
	`BITMAP_FOR_EACH_1
 (
vid
, 4096, 
•löãr_vœns
) {

3815 c⁄° *
vœn_dev_«me
;

3817 
vœn_dev_«me
 = 
	`vœndev_gë_«me
(
ªÆ_dev_«me
, 
vid
);

3818 i‡(
vœn_dev_«me


3819 && !
	`shash_föd
(
p‹ts
, 
vœn_dev_«me
)) {

3820 
	`shash_add
(
p‹ts
, 
vœn_dev_«me
,

3821 
	`sy¡hesize_•löãr_p‹t
(

3822 
ªÆ_dev_«me
, 
vœn_dev_«me
, 
vid
));

3828 
	}
}

3831 
	$múr‹_ª‰esh_°©s
(
múr‹
 *
m
)

3833 
oÂrŸo
 *oÂrŸÿ
m
->
bridge
->ofproto;

3834 
uöt64_t
 
tx_∑ckës
, 
tx_byãs
;

3835 *
keys
[2];

3836 
öt64_t
 
vÆues
[2];

3837 
size_t
 
°©_˙t
 = 0;

3839 i‡(
	`oÂrŸo_múr‹_gë_°©s
(
oÂrŸo
, 
m
, &
tx_∑ckës
, &
tx_byãs
)) {

3840 
	`ov§ec_múr‹_£t_°©i°ics
(
m
->
cfg
, 
NULL
, NULL, 0);

3844 i‡(
tx_∑ckës
 !
UINT64_MAX
) {

3845 
keys
[
°©_˙t
] = "tx_packets";

3846 
vÆues
[
°©_˙t
] = 
tx_∑ckës
;

3847 
°©_˙t
++;

3849 i‡(
tx_byãs
 !
UINT64_MAX
) {

3850 
keys
[
°©_˙t
] = "tx_bytes";

3851 
vÆues
[
°©_˙t
] = 
tx_byãs
;

3852 
°©_˙t
++;

3855 
	`ov§ec_múr‹_£t_°©i°ics
(
m
->
cfg
, 
keys
, 
vÆues
, 
°©_˙t
);

3856 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/vswitchd/bridge.h

16 #i‚de‡
VSWITCHD_BRIDGE_H


17 
	#VSWITCHD_BRIDGE_H
 1

	)

19 
	gsim≠
;

21 
bridge_öô
(c⁄° *
ªmŸe
);

22 
bridge_exô
();

24 
bridge_run
();

25 
bridge_run_Á°
();

26 
bridge_waô
();

28 
bridge_gë_mem‹y_ußge
(
sim≠
 *
ußge
);

	@/home/lsch/mytest/openvswitch-1.9.0/vswitchd/ovs-brcompatd.c

16 
	~<c⁄fig.h
>

18 
	~<asm/∑øm.h
>

19 
	~<as£π.h
>

20 
	~<î∫o.h
>

21 
	~<gë›t.h
>

22 
	~<öây≥s.h
>

23 
	~<limôs.h
>

24 
	~<√t/if.h
>

25 
	~<löux/gíëlök.h
>

26 
	~<löux/π√éök.h
>

27 
	~<sig«l.h
>

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

30 
	~<sys/ty≥s.h
>

31 
	~<sys/waô.h
>

32 
	~<sys/°©.h
>

33 
	~<time.h
>

34 
	~<f˙é.h
>

35 
	~<uni°d.h
>

37 
	~"comm™d-löe.h
"

38 
	~"covîage.h
"

39 
	~"d´m⁄.h
"

40 
	~"dús.h
"

41 
	~"dy«mic-°rög.h
"

42 
	~"Áèl-sig«l.h
"

43 
	~"js⁄.h
"

44 
	~"Àak-checkî.h
"

45 
	~"√tdev.h
"

46 
	~"√éök.h
"

47 
	~"√éök-nŸifõr.h
"

48 
	~"√éök-sockë.h
"

49 
	~"oÂbuf.h
"

50 
	~"›ívswôch/brcom∑t-√éök.h
"

51 
	~"∑ckës.h
"

52 
	~"pﬁl-lo›.h
"

53 
	~"¥o˚ss.h
"

54 
	~"π√éök-lök.h
"

55 
	~"sig«ls.h
"

56 
	~"s£t.h
"

57 
	~"svec.h
"

58 
	~"timevÆ.h
"

59 
	~"unix˘l.h
"

60 
	~"utû.h
"

61 
	~"vlog.h
"

63 
VLOG_DEFINE_THIS_MODULE
(
brcom∑td
);

67 
∑r£_›ti⁄s
(
¨gc
, *
¨gv
[]);

68 
	$ußge
(Ë
NO_RETURN
;

70 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(5, 60);

73 *
≠p˘l_¥ogøm
;

76 *
vs˘l_¥ogøm
;

79 
	#VSCTL_OPTIONS
 "--timeout=5", "-vc⁄sﬁe:w¨n"

	)

82 
∆_sock
 *
brc_sock
;

85 
brc_Ámûy
;

87 c⁄° 
∆_pﬁicy
 
brc_mu…iˇ°_pﬁicy
[] = {

88 [
BRC_GENL_A_MC_GROUP
] = {.
ty≥
 = 
NL_A_U32
 }

89 
	}
};

92 
	$ˇ±uª_vs˘l_vÆi°
(c⁄° *
¨g0
, 
va_li°
 
¨gs
)

94 *
°dout_log
, *
°dîr_log
;

95 
vlog_Àvñ
 
log_Àvñ
;

96 
svec
 
¨gv
;

97 
°©us
;

98 *
msg
;

101 
	`svec_öô
(&
¨gv
);

102 
	`svec_add
(&
¨gv
, 
¨g0
);

104 c⁄° *
¨g
 = 
	`va_¨g
(
¨gs
, const *);

105 i‡(!
¨g
) {

108 
	`svec_add
(&
¨gv
, 
¨g
);

110 
	`svec_ãrmö©e
(&
¨gv
);

113 i‡(
	`¥o˚ss_run_ˇ±uª
(
¨gv
.
«mes
, &
°dout_log
, &
°dîr_log
, 
SIZE_MAX
,

114 &
°©us
)) {

115 
	`svec_de°roy
(&
¨gv
);

116  
NULL
;

120 i‡(
	`WIFEXITED
(
°©us
)) {

121 
code
 = 
	`WEXITSTATUS
(
°©us
);

122 
log_Àvñ
 = 
code
 =0 ? 
VLL_DBG
 : codê=1 ? 
VLL_WARN
 : 
VLL_ERR
;

124 
log_Àvñ
 = 
VLL_ERR
;

126 
msg
 = 
	`¥o˚ss_°©us_msg
(
°©us
);

127 
	`VLOG
(
log_Àvñ
, "ovs-vs˘»exôed (%s)", 
msg
);

128 i‡(
°dout_log
 && *stdout_log) {

129 
	`VLOG
(
log_Àvñ
, "ovs-vs˘»wrŸêtÿ°dout:\n%s\n", 
°dout_log
);

131 i‡(
°dîr_log
 && *stderr_log) {

132 
	`VLOG
(
log_Àvñ
, "ovs-vs˘»wrŸêtÿ°dîr:\n%s\n", 
°dîr_log
);

134 
	`‰ì
(
msg
);

136 
	`svec_de°roy
(&
¨gv
);

138 
	`‰ì
(
°dîr_log
);

139 i‡(
	`WIFEXITED
(
°©us
Ë&& !
	`WEXITSTATUS
(status)) {

140  
°dout_log
;

142 
	`‰ì
(
°dout_log
);

143  
NULL
;

145 
	}
}

147 * 
	$SENTINEL
(0)

148 
	$ˇ±uª_vs˘l
(c⁄° *
¨g0
, ...)

150 *
°dout_log
;

151 
va_li°
 
¨gs
;

153 
	`va_°¨t
(
¨gs
, 
¨g0
);

154 
°dout_log
 = 
	`ˇ±uª_vs˘l_vÆi°
(
¨g0
, 
¨gs
);

155 
	`va_íd
(
¨gs
);

157  
°dout_log
;

158 
	}
}

160 
boﬁ
 
	$SENTINEL
(0)

161 
	$run_vs˘l
(c⁄° *
¨g0
, ...)

163 *
°dout_log
;

164 
va_li°
 
¨gs
;

165 
boﬁ
 
ok
;

167 
	`va_°¨t
(
¨gs
, 
¨g0
);

168 
°dout_log
 = 
	`ˇ±uª_vs˘l_vÆi°
(
¨g0
, 
¨gs
);

169 
	`va_íd
(
¨gs
);

171 
ok
 = 
°dout_log
 !
NULL
;

172 
	`‰ì
(
°dout_log
);

173  
ok
;

174 
	}
}

177 
	$lookup_brc_mu…iˇ°_group
(*
mu…iˇ°_group
)

179 
∆_sock
 *
sock
;

180 
oÂbuf
 
ªque°
, *
ª∂y
;

181 
∆©å
 *
©ås
[
	`ARRAY_SIZE
(
brc_mu…iˇ°_pﬁicy
)];

182 
ªtvÆ
;

184 
ªtvÆ
 = 
	`∆_sock_¸óã
(
NETLINK_GENERIC
, &
sock
);

185 i‡(
ªtvÆ
) {

186  
ªtvÆ
;

188 
	`oÂbuf_öô
(&
ªque°
, 0);

189 
	`∆_msg_put_gílmsghdr
(&
ªque°
, 0, 
brc_Ámûy
,

190 
NLM_F_REQUEST
, 
BRC_GENL_C_QUERY_MC
, 1);

191 
ªtvÆ
 = 
	`∆_sock_å™ß˘
(
sock
, &
ªque°
, &
ª∂y
);

192 
	`oÂbuf_unöô
(&
ªque°
);

193 i‡(
ªtvÆ
) {

194 
	`∆_sock_de°roy
(
sock
);

195  
ªtvÆ
;

197 i‡(!
	`∆_pﬁicy_∑r£
(
ª∂y
, 
NLMSG_HDRLEN
 + 
GENL_HDRLEN
,

198 
brc_mu…iˇ°_pﬁicy
, 
©ås
,

199 
	`ARRAY_SIZE
(
brc_mu…iˇ°_pﬁicy
))) {

200 
	`∆_sock_de°roy
(
sock
);

201 
	`oÂbuf_dñëe
(
ª∂y
);

202  
EPROTO
;

204 *
mu…iˇ°_group
 = 
	`∆_©å_gë_u32
(
©ås
[
BRC_GENL_A_MC_GROUP
]);

205 
	`∆_sock_de°roy
(
sock
);

206 
	`oÂbuf_dñëe
(
ª∂y
);

209 
	}
}

214 
	$brc_›í
(
∆_sock
 **
sock
)

216 
mu…iˇ°_group
 = 0;

217 
ªtvÆ
;

219 
ªtvÆ
 = 
	`∆_lookup_gíl_Ámûy
(
BRC_GENL_FAMILY_NAME
, &
brc_Ámûy
);

220 i‡(
ªtvÆ
) {

221  
ªtvÆ
;

224 
ªtvÆ
 = 
	`lookup_brc_mu…iˇ°_group
(&
mu…iˇ°_group
);

225 i‡(
ªtvÆ
) {

226  
ªtvÆ
;

229 
ªtvÆ
 = 
	`∆_sock_¸óã
(
NETLINK_GENERIC
, 
sock
);

230 i‡(
ªtvÆ
) {

231  
ªtvÆ
;

234 
ªtvÆ
 = 
	`∆_sock_joö_mcgroup
(*
sock
, 
mu…iˇ°_group
);

235 i‡(
ªtvÆ
) {

236 
	`∆_sock_de°roy
(*
sock
);

237 *
sock
 = 
NULL
;

239  
ªtvÆ
;

240 
	}
}

242 c⁄° 
∆_pﬁicy
 
	gbrc_dp_pﬁicy
[] = {

243 [
BRC_GENL_A_DP_NAME
] = { .
ty≥
 = 
NL_A_STRING
 },

247 
	$∑r£_comm™d
(
oÂbuf
 *
buf„r
, 
uöt32_t
 *
£q
, c⁄° **
br_«me
,

248 c⁄° **
p‹t_«me
, 
uöt64_t
 *
cou¡
, uöt64_à*
skù
)

250 c⁄° 
∆_pﬁicy
 
pﬁicy
[] = {

251 [
BRC_GENL_A_DP_NAME
] = { .
ty≥
 = 
NL_A_STRING
, .
›ti⁄Æ
 = 
åue
 },

252 [
BRC_GENL_A_PORT_NAME
] = { .
ty≥
 = 
NL_A_STRING
, .
›ti⁄Æ
 = 
åue
 },

253 [
BRC_GENL_A_FDB_COUNT
] = { .
ty≥
 = 
NL_A_U64
, .
›ti⁄Æ
 = 
åue
 },

254 [
BRC_GENL_A_FDB_SKIP
] = { .
ty≥
 = 
NL_A_U64
, .
›ti⁄Æ
 = 
åue
 },

256 
∆©å
 *
©ås
[
	`ARRAY_SIZE
(
pﬁicy
)];

258 i‡(!
	`∆_pﬁicy_∑r£
(
buf„r
, 
NLMSG_HDRLEN
 + 
GENL_HDRLEN
, 
pﬁicy
,

259 
©ås
, 
	`ARRAY_SIZE
(
pﬁicy
))

260 || (
br_«me
 && !
©ås
[
BRC_GENL_A_DP_NAME
])

261 || (
p‹t_«me
 && !
©ås
[
BRC_GENL_A_PORT_NAME
])

262 || (
cou¡
 && !
©ås
[
BRC_GENL_A_FDB_COUNT
])

263 || (
skù
 && !
©ås
[
BRC_GENL_A_FDB_SKIP
])) {

264  
EINVAL
;

267 *
£q
 = ((
∆msghdr
 *Ë
buf„r
->
d©a
)->
∆msg_£q
;

268 i‡(
br_«me
) {

269 *
br_«me
 = 
	`∆_©å_gë_°rög
(
©ås
[
BRC_GENL_A_DP_NAME
]);

271 i‡(
p‹t_«me
) {

272 *
p‹t_«me
 = 
	`∆_©å_gë_°rög
(
©ås
[
BRC_GENL_A_PORT_NAME
]);

274 i‡(
cou¡
) {

275 *
cou¡
 = 
	`∆_©å_gë_u64
(
©ås
[
BRC_GENL_A_FDB_COUNT
]);

277 i‡(
skù
) {

278 *
skù
 = 
	`∆_©å_gë_u64
(
©ås
[
BRC_GENL_A_FDB_SKIP
]);

281 
	}
}

286 
oÂbuf
 *

287 
	$compo£_ª∂y
(
îr‹
)

289 
oÂbuf
 *
ª∂y
 = 
	`oÂbuf_√w
(4096);

290 
	`∆_msg_put_gílmsghdr
(
ª∂y
, 32, 
brc_Ámûy
, 
NLM_F_REQUEST
,

291 
BRC_GENL_C_DP_RESULT
, 1);

292 
	`∆_msg_put_u32
(
ª∂y
, 
BRC_GENL_A_ERR_CODE
, 
îr‹
);

293  
ª∂y
;

294 
	}
}

299 
	$£nd_ª∂y
(
oÂbuf
 *
ª∂y
, 
uöt32_t
 
∆msg_£q
)

301 
ªtvÆ
 = 
	`∆_sock_£nd_£q
(
brc_sock
, 
ª∂y
, 
∆msg_£q
, 
Ál£
);

302 i‡(
ªtvÆ
) {

303 
	`VLOG_WARN_RL
(&
æ
, "replyingÅo brcompatÑequest: %s",

304 
	`°ªº‹
(
ªtvÆ
));

306 
	`oÂbuf_dñëe
(
ª∂y
);

307 
	}
}

312 
	$£nd_sim∂e_ª∂y
(
uöt32_t
 
£q
, 
îr‹
)

314 
	`£nd_ª∂y
(
	`compo£_ª∂y
(
îr‹
), 
£q
);

315 
	}
}

318 
	$h™dÀ_bridge_cmd
(
oÂbuf
 *
buf„r
, 
boﬁ
 
add
)

320 c⁄° *
br_«me
;

321 
uöt32_t
 
£q
;

322 
îr‹
;

324 
îr‹
 = 
	`∑r£_comm™d
(
buf„r
, &
£q
, &
br_«me
, 
NULL
, NULL, NULL);

325 i‡(!
îr‹
) {

326 c⁄° *
vs˘l_cmd
 = 
add
 ? "add-br" : "del-br";

327 c⁄° *
br˘l_cmd
 = 
add
 ? "addbr" : "delbr";

328 i‡(!
	`run_vs˘l
(
vs˘l_¥ogøm
, 
VSCTL_OPTIONS
,

329 "--", 
vs˘l_cmd
, 
br_«me
,

330 "--", "commít", "ovs-brcom∑td:", 
br˘l_cmd
, 
br_«me
,

331 (*Ë
NULL
)) {

332 
îr‹
 = 
add
 ? 
EEXIST
 : 
ENXIO
;

334 
	`£nd_sim∂e_ª∂y
(
£q
, 
îr‹
);

336  
îr‹
;

337 
	}
}

339 c⁄° 
∆_pﬁicy
 
	gbrc_p‹t_pﬁicy
[] = {

340 [
BRC_GENL_A_DP_NAME
] = { .
ty≥
 = 
NL_A_STRING
 },

341 [
BRC_GENL_A_PORT_NAME
] = { .
ty≥
 = 
NL_A_STRING
 },

345 
	$h™dÀ_p‹t_cmd
(
oÂbuf
 *
buf„r
, 
boﬁ
 
add
)

347 c⁄° *
br_«me
, *
p‹t_«me
;

348 
uöt32_t
 
£q
;

349 
îr‹
;

351 
îr‹
 = 
	`∑r£_comm™d
(
buf„r
, &
£q
, &
br_«me
, &
p‹t_«me
, 
NULL
, NULL);

352 i‡(!
îr‹
) {

353 c⁄° *
vs˘l_cmd
 = 
add
 ? "add-port" : "del-port";

354 c⁄° *
br˘l_cmd
 = 
add
 ? "addif" : "delif";

355 i‡(!
	`run_vs˘l
(
vs˘l_¥ogøm
, 
VSCTL_OPTIONS
,

356 "--", 
vs˘l_cmd
, 
br_«me
, 
p‹t_«me
,

357 "--", "commít", "ovs-brcom∑td:", 
br˘l_cmd
,

358 
br_«me
, 
p‹t_«me
, (*Ë
NULL
)) {

359 
îr‹
 = 
EINVAL
;

361 
	`£nd_sim∂e_ª∂y
(
£q
, 
îr‹
);

363  
îr‹
;

364 
	}
}

367 
	$löux_bridge_to_ovs_bridge
(c⁄° *
löux_«me
, *
br_vœ≈
)

369 *
ßve_±r
 = 
NULL
;

370 c⁄° *
br_«me
, *
br_vœn
;

371 *
br_«me_c›y
;

372 *
ouçut
;

374 
ouçut
 = 
	`ˇ±uª_vs˘l
(
vs˘l_¥ogøm
, 
VSCTL_OPTIONS
,

375 "--", "br-to-∑ª¡", 
löux_«me
,

376 "--", "br-to-vœn", 
löux_«me
,

377 (*Ë
NULL
);

378 i‡(!
ouçut
) {

379  
NULL
;

382 
br_«me
 = 
	`°πok_r
(
ouçut
, " \t\r\n", &
ßve_±r
);

383 
br_vœn
 = 
	`°πok_r
(
NULL
, " \t\r\n", &
ßve_±r
);

384 i‡(!
br_«me
 || !
br_vœn
) {

385 
	`‰ì
(
ouçut
);

386  
NULL
;

388 
br_«me_c›y
 = 
	`x°rdup
(
br_«me
);

389 *
br_vœ≈
 = 
	`©oi
(
br_vœn
);

391 
	`‰ì
(
ouçut
);

393  
br_«me_c›y
;

394 
	}
}

397 
	$gë_bridge_iÁ˚s
(c⁄° *
br_«me
, 
s£t
 *
iÁ˚s
)

399 *
ßve_±r
 = 
NULL
;

400 *
ouçut
;

401 *
iÁ˚
;

403 
ouçut
 = 
	`ˇ±uª_vs˘l
(
vs˘l_¥ogøm
, 
VSCTL_OPTIONS
, "list-ifaces",

404 
br_«me
, (*Ë
NULL
);

405 i‡(!
ouçut
) {

409 
iÁ˚
 = 
	`°πok_r
(
ouçut
, " \t\r\n", &
ßve_±r
); iface;

410 
iÁ˚
 = 
	`°πok_r
(
NULL
, " \t\r\n", &
ßve_±r
)) {

411 
	`s£t_add
(
iÁ˚s
, 
iÁ˚
);

413 
	`‰ì
(
ouçut
);

414 
	}
}

417 
	$h™dÀ_fdb_quîy_cmd
(
oÂbuf
 *
buf„r
)

423 
	s__fdb_íåy
 {

424 
__u8
 
mac_addr
[6];

425 
__u8
 
p‹t_no
;

426 
__u8
 
is_loˇl
;

427 
__u32
 
ageög_timî_vÆue
;

428 
__u8
 
p‹t_hi
;

429 
__u8
 
∑d0
;

430 
__u16
 
unu£d
;

433 
	smac
 {

434 
uöt8_t
 
addr
[6];

436 
mac
 *
loˇl_macs
;

437 
n_loˇl_macs
;

438 
i
;

445 c⁄° *
löux_«me
;

446 
br_vœn
;

447 
s£t
 
iÁ˚s
;

449 
oÂbuf
 
quîy_d©a
;

450 c⁄° *
iÁ˚_«me
;

451 
oÂbuf
 *
ª∂y
;

452 
uöt64_t
 
cou¡
, 
skù
;

453 *
br_«me
;

454 *
ouçut
;

455 *
ßve_±r
;

456 
uöt32_t
 
£q
;

457 
îr‹
;

460 
îr‹
 = 
	`∑r£_comm™d
(
buf„r
, &
£q
, &
löux_«me
, 
NULL
, &
cou¡
, &
skù
);

461 i‡(
îr‹
) {

462  
îr‹
;

466 
br_«me
 = 
	`löux_bridge_to_ovs_bridge
(
löux_«me
, &
br_vœn
);

467 i‡(!
br_«me
) {

468 
îr‹
 = 
EINVAL
;

469 
	`£nd_sim∂e_ª∂y
(
£q
, 
îr‹
);

470  
îr‹
;

474 
ouçut
 = 
	`ˇ±uª_vs˘l
(
≠p˘l_¥ogøm
, "fdb/show", 
br_«me
,

475 (*Ë
NULL
);

476 i‡(!
ouçut
) {

477 
îr‹
 = 
ECHILD
;

478 
	`£nd_sim∂e_ª∂y
(
£q
, 
îr‹
);

479  
îr‹
;

484 
	`s£t_öô
(&
iÁ˚s
);

485 
	`gë_bridge_iÁ˚s
(
löux_«me
, &
iÁ˚s
);

486 
loˇl_macs
 = 
	`xmÆloc
(
	`s£t_cou¡
(&
iÁ˚s
) *  *local_macs);

487 
n_loˇl_macs
 = 0;

488 
	`SSET_FOR_EACH
 (
iÁ˚_«me
, &
iÁ˚s
) {

489 
mac
 *ma¯&
loˇl_macs
[
n_loˇl_macs
];

490 
√tdev
 *netdev;

492 
îr‹
 = 
	`√tdev_›í
(
iÁ˚_«me
, "sy°em", &
√tdev
);

493 i‡(!
îr‹
) {

494 i‡(!
	`√tdev_gë_ëhîaddr
(
√tdev
, 
mac
->
addr
)) {

495 
n_loˇl_macs
++;

497 
	`√tdev_˛o£
(
√tdev
);

500 
	`s£t_de°roy
(&
iÁ˚s
);

504 
	`oÂbuf_öô
(&
quîy_d©a
, (
__fdb_íåy
) * 8);

505 
ßve_±r
 = 
NULL
;

506 
	`°πok_r
(
ouçut
, "\n", &
ßve_±r
);

507 
cou¡
 > 0) {

508 
__fdb_íåy
 *
íåy
;

509 
p‹t
, 
vœn
, 
age
;

510 
uöt8_t
 
mac
[
ETH_ADDR_LEN
];

511 *
löe
;

512 
boﬁ
 
is_loˇl
;

514 
löe
 = 
	`°πok_r
(
NULL
, "\n", &
ßve_±r
);

515 i‡(!
löe
) {

519 i‡(
	`ssˇnf
(
löe
, "%d %d "
ETH_ADDR_SCAN_FMT
" %d",

520 &
p‹t
, &
vœn
, 
	`ETH_ADDR_SCAN_ARGS
(
mac
), &
age
)

521 !2 + 
ETH_ADDR_SCAN_COUNT
 + 1) {

522 
vlog_øã_limô
 
æ
 = 
	`VLOG_RATE_LIMIT_INIT
(1, 1);

523 
	`VLOG_INFO_RL
(&
æ
, "fdb/show ouçuàha†övÆid f‹m©: %s", 
löe
);

527 i‡(
vœn
 !
br_vœn
) {

531 i‡(
skù
 > 0) {

532 
skù
--;

537 
is_loˇl
 = 
Ál£
;

538 
i
 = 0; i < 
n_loˇl_macs
; i++) {

539 i‡(
	`ëh_addr_equÆs
(
loˇl_macs
[
i
].
addr
, 
mac
)) {

540 
is_loˇl
 = 
åue
;

545 
íåy
 = 
	`oÂbuf_put_unöô
(&
quîy_d©a
,  *entry);

546 
	`mem˝y
(
íåy
->
mac_addr
, 
mac
, 
ETH_ADDR_LEN
);

547 
íåy
->
p‹t_no
 = 
p‹t
 & 0xff;

548 
íåy
->
is_loˇl
 = is_local;

549 
íåy
->
ageög_timî_vÆue
 = 
age
 * 
HZ
;

550 
íåy
->
p‹t_hi
 = (
p‹t
 & 0xff00) >> 8;

551 
íåy
->
∑d0
 = 0;

552 
íåy
->
unu£d
 = 0;

553 
cou¡
--;

555 
	`‰ì
(
ouçut
);

558 
ª∂y
 = 
	`compo£_ª∂y
(0);

559 
	`∆_msg_put_un•ec
(
ª∂y
, 
BRC_GENL_A_FDB_DATA
,

560 
quîy_d©a
.
d©a
, quîy_d©a.
size
);

561 
	`£nd_ª∂y
(
ª∂y
, 
£q
);

564 
	`oÂbuf_unöô
(&
quîy_d©a
);

565 
	`‰ì
(
loˇl_macs
);

568 
	}
}

571 
	$£nd_ifödex_ª∂y
(
uöt32_t
 
£q
, *
ouçut
)

573 
size_t
 
Æloˇãd_ödi˚s
;

574 *
ßve_±r
 = 
NULL
;

575 
oÂbuf
 *
ª∂y
;

576 c⁄° *
iÁ˚
;

577 
size_t
 
n_ödi˚s
;

578 *
ödi˚s
;

580 
ödi˚s
 = 
NULL
;

581 
n_ödi˚s
 = 
Æloˇãd_ödi˚s
 = 0;

582 
iÁ˚
 = 
	`°πok_r
(
ouçut
, " \t\r\n", &
ßve_±r
); iface;

583 
iÁ˚
 = 
	`°πok_r
(
NULL
, " \t\r\n", &
ßve_±r
)) {

584 
ifödex
;

586 i‡(
n_ödi˚s
 >
Æloˇãd_ödi˚s
) {

587 
ödi˚s
 = 
	`x2ƒóŒoc
(ödi˚s, &
Æloˇãd_ödi˚s
,  *indices);

590 
ifödex
 = 
	`if_«mëoödex
(
iÁ˚
);

591 i‡(
ifödex
) {

592 
ödi˚s
[
n_ödi˚s
++] = 
ifödex
;

597 
ª∂y
 = 
	`compo£_ª∂y
(0);

598 
	`∆_msg_put_un•ec
(
ª∂y
, 
BRC_GENL_A_IFINDEXES
,

599 
ödi˚s
, 
n_ödi˚s
 *  *indices);

600 
	`£nd_ª∂y
(
ª∂y
, 
£q
);

603 
	`‰ì
(
ödi˚s
);

604 
	}
}

607 
	$h™dÀ_gë_bridges_cmd
(
oÂbuf
 *
buf„r
)

609 *
ouçut
;

610 
uöt32_t
 
£q
;

611 
îr‹
;

617 
îr‹
 = 
	`∑r£_comm™d
(
buf„r
, &
£q
, 
NULL
, NULL, NULL, NULL);

618 i‡(
îr‹
) {

619  
îr‹
;

622 
ouçut
 = 
	`ˇ±uª_vs˘l
(
vs˘l_¥ogøm
, 
VSCTL_OPTIONS
, "li°-br", (*Ë
NULL
);

623 i‡(!
ouçut
) {

624  
ENODEV
;

627 
	`£nd_ifödex_ª∂y
(
£q
, 
ouçut
);

628 
	`‰ì
(
ouçut
);

630 
	}
}

633 
	$h™dÀ_gë_p‹ts_cmd
(
oÂbuf
 *
buf„r
)

635 c⁄° *
löux_«me
;

636 
uöt32_t
 
£q
;

637 *
ouçut
;

638 
îr‹
;

641 
îr‹
 = 
	`∑r£_comm™d
(
buf„r
, &
£q
, &
löux_«me
, 
NULL
, NULL, NULL);

642 i‡(
îr‹
) {

643  
îr‹
;

646 
ouçut
 = 
	`ˇ±uª_vs˘l
(
vs˘l_¥ogøm
, 
VSCTL_OPTIONS
, "li°-p‹ts", 
löux_«me
,

647 (*Ë
NULL
);

648 i‡(!
ouçut
) {

649  
ENODEV
;

652 
	`£nd_ifödex_ª∂y
(
£q
, 
ouçut
);

653 
	`‰ì
(
ouçut
);

655 
	}
}

657 
boﬁ


658 
	$brc_ªcv_upd©e__
(
oÂbuf
 *
buf„r
)

661 
ªtvÆ
 = 
	`∆_sock_ªcv
(
brc_sock
, 
buf„r
, 
Ál£
);

662 
ªtvÆ
) {

664 i‡(
	`∆_msg_∆msgîr
(
buf„r
, 
NULL
)

665 || 
	`∆_msg_∆msghdr
(
buf„r
)->
∆msg_ty≥
 =
NLMSG_DONE
) {

668  
åue
;

670 
ENOBUFS
:

673 
EAGAIN
:

674  
Ál£
;

677 
	`VLOG_WARN_RL
(&
æ
, "brc_ªcv_upd©e: %s", 
	`°ªº‹
(
ªtvÆ
));

678  
Ál£
;

681 
	}
}

684 
	$brc_ªcv_upd©e
()

686 
gílmsghdr
 *genlmsghdr;

687 
uöt64_t
 
buf„r_°ub
[1024 / 8];

688 
oÂbuf
 
buf„r
;

690 
	`oÂbuf_u£_°ub
(&
buf„r
, 
buf„r_°ub
,  buffer_stub);

691 i‡(!
	`brc_ªcv_upd©e__
(&
buf„r
)) {

692 
îr‹
;

695 
gílmsghdr
 = 
	`∆_msg_gílmsghdr
(&
buf„r
);

696 i‡(!
gílmsghdr
) {

697 
	`VLOG_WARN_RL
(&
æ
, "receivedÖacketÅoo short for generic NetLink");

698 
îr‹
;

701 i‡(
	`∆_msg_∆msghdr
(&
buf„r
)->
∆msg_ty≥
 !
brc_Ámûy
) {

702 
	`VLOG_DBG_RL
(&
æ
, "ª˚ivedÅy≥ (%"
PRIu16
") != brcompat family (%d)",

703 
	`∆_msg_∆msghdr
(&
buf„r
)->
∆msg_ty≥
, 
brc_Ámûy
);

704 
îr‹
;

725 
	`π√éök_lök_run
();

727 
gílmsghdr
->
cmd
) {

728 
BRC_GENL_C_DP_ADD
:

729 
	`h™dÀ_bridge_cmd
(&
buf„r
, 
åue
);

732 
BRC_GENL_C_DP_DEL
:

733 
	`h™dÀ_bridge_cmd
(&
buf„r
, 
Ál£
);

736 
BRC_GENL_C_PORT_ADD
:

737 
	`h™dÀ_p‹t_cmd
(&
buf„r
, 
åue
);

740 
BRC_GENL_C_PORT_DEL
:

741 
	`h™dÀ_p‹t_cmd
(&
buf„r
, 
Ál£
);

744 
BRC_GENL_C_FDB_QUERY
:

745 
	`h™dÀ_fdb_quîy_cmd
(&
buf„r
);

748 
BRC_GENL_C_GET_BRIDGES
:

749 
	`h™dÀ_gë_bridges_cmd
(&
buf„r
);

752 
BRC_GENL_C_GET_PORTS
:

753 
	`h™dÀ_gë_p‹ts_cmd
(&
buf„r
);

757 
	`VLOG_WARN_RL
(&
æ
, "received unknown brcÇetlink command: %d\n",

758 
gílmsghdr
->
cmd
);

762 
îr‹
:

763 
	`oÂbuf_unöô
(&
buf„r
);

764 
	}
}

767 
	$√tdev_ch™ged_cb
(c⁄° 
π√éök_lök_ch™ge
 *
ch™ge
,

768 *
aux
 
OVS_UNUSED
)

770 
br_«me
[
IFNAMSIZ
];

771 c⁄° *
p‹t_«me
;

773 i‡(!
ch™ge
) {

774 
	`VLOG_WARN_RL
(&
æ
, "network monitor socket overflowed");

778 i‡(
ch™ge
->
∆msg_ty≥
 !
RTM_DELLINK
 || !ch™ge->
ma°î_ifödex
) {

782 
p‹t_«me
 = 
ch™ge
->
i‚ame
;

783 i‡(!
	`if_ödext⁄ame
(
ch™ge
->
ma°î_ifödex
, 
br_«me
)) {

787 
	`VLOG_INFO
("network device %s destroyed,Ñemoving from bridge %s",

788 
p‹t_«me
, 
br_«me
);

790 
	`run_vs˘l
(
vs˘l_¥ogøm
, 
VSCTL_OPTIONS
,

791 "--", "--if-exi°s", "dñ-p‹t", 
p‹t_«me
,

792 "--", "commít", "ovs-brcom∑td:", 
p‹t_«me
, "disappeared",

793 (*Ë
NULL
);

794 
	}
}

797 
	$maö
(
¨gc
, *
¨gv
[])

799 
vlog_moduÀ
 
VLM_ªc⁄√˘
;

800 
∆n_nŸifõr
 *
lök_nŸifõr
;

801 
unix˘l_£rvî
 *
unix˘l
;

802 
ªtvÆ
;

804 
	`¥o˘ôÀ_öô
(
¨gc
, 
¨gv
);

805 
	`£t_¥ogøm_«me
(
¨gv
[0]);

806 
	`vlog_£t_Àvñs
(&
VLM_ªc⁄√˘
, 
VLF_ANY_FACILITY
, 
VLL_WARN
);

808 
	`VLOG_WARN
("Bridge compatibility is deprecatedánd may beÑemoved "

810 
	`∑r£_›ti⁄s
(
¨gc
, 
¨gv
);

811 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

812 
	`¥o˚ss_öô
();

814 
	`d´m⁄ize_°¨t
();

816 
ªtvÆ
 = 
	`unix˘l_£rvî_¸óã
(
NULL
, &
unix˘l
);

817 i‡(
ªtvÆ
) {

818 
	`exô
(
EXIT_FAILURE
);

821 i‡(
	`brc_›í
(&
brc_sock
)) {

822 
	`VLOG_FATAL
("couldÇot open brcompat socket. Check "

826 
lök_nŸifõr
 = 
	`π√éök_lök_nŸifõr_¸óã
(
√tdev_ch™ged_cb
, 
NULL
);

828 
	`d´m⁄ize_com∂ëe
();

831 
	`unix˘l_£rvî_run
(
unix˘l
);

832 
	`π√éök_lök_run
();

833 
	`brc_ªcv_upd©e
();

835 
	`√tdev_run
();

837 
	`∆_sock_waô
(
brc_sock
, 
POLLIN
);

838 
	`unix˘l_£rvî_waô
(
unix˘l
);

839 
	`π√éök_lök_waô
();

840 
	`√tdev_waô
();

841 
	`pﬁl_block
();

844 
	`π√éök_lök_nŸifõr_de°roy
(
lök_nŸifõr
);

847 
	}
}

850 
	$∑r£_›ti⁄s
(
¨gc
, *
¨gv
[])

853 
OPT_APPCTL
,

854 
OPT_VSCTL
,

855 
VLOG_OPTION_ENUMS
,

856 
LEAK_CHECKER_OPTION_ENUMS
,

857 
DAEMON_OPTION_ENUMS


859 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

860 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

861 {"vîsi⁄", 
no_¨gumít
, 
NULL
, 'V'},

862 {"≠p˘l", 
ªquúed_¨gumít
, 
NULL
, 
OPT_APPCTL
},

863 {"vs˘l", 
ªquúed_¨gumít
, 
NULL
, 
OPT_VSCTL
},

864 
DAEMON_LONG_OPTIONS
,

865 
VLOG_LONG_OPTIONS
,

866 
LEAK_CHECKER_LONG_OPTIONS
,

867 {
NULL
, 0, NULL, 0},

869 *
sh‹t_›ti⁄s
 = 
	`l⁄g_›ti⁄s_to_sh‹t_›ti⁄s
(
l⁄g_›ti⁄s
);

870 c⁄° *
≠p˘l
 = "ovs-appctl";

871 c⁄° *
vs˘l
 = "ovs-vsctl";

874 
c
;

876 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
l⁄g_›ti⁄s
, 
NULL
);

877 i‡(
c
 == -1) {

881 
c
) {

883 
	`ußge
();

886 
	`ovs_¥öt_vîsi⁄
(0, 0);

887 
	`exô
(
EXIT_SUCCESS
);

889 
OPT_APPCTL
:

890 
≠p˘l
 = 
›èrg
;

893 
OPT_VSCTL
:

894 
vs˘l
 = 
›èrg
;

897 
VLOG_OPTION_HANDLERS


898 
DAEMON_OPTION_HANDLERS


899 
LEAK_CHECKER_OPTION_HANDLERS


902 
	`exô
(
EXIT_FAILURE
);

905 
	`ab‹t
();

908 
	`‰ì
(
sh‹t_›ti⁄s
);

910 
≠p˘l_¥ogøm
 = 
	`¥o˚ss_£¨ch_∑th
(
≠p˘l
);

911 i‡(!
≠p˘l_¥ogøm
) {

912 
	`VLOG_FATAL
("%s:Çot found in $PATH (use --appctlÅo specifyán "

913 "Æã∫©êloˇti⁄)", 
≠p˘l
);

916 
vs˘l_¥ogøm
 = 
	`¥o˚ss_£¨ch_∑th
(
vs˘l
);

917 i‡(!
vs˘l_¥ogøm
) {

918 
	`VLOG_FATAL
("%s:Çot found in $PATH (use --vsctlÅo specifyán "

919 "Æã∫©êloˇti⁄)", 
vs˘l
);

922 i‡(
¨gc
 !
›töd
) {

923 
	`VLOG_FATAL
("noÇon-optionárgumentsáre supported; "

926 
	}
}

929 
	$ußge
()

931 
	`¥ötf
("%s: bridge compatibility front-end for ovs-vswitchd\n"

933 
¥ogøm_«me
,Örogram_name);

934 
	`¥ötf
("\nConfiguration options:\n"

938 
	`d´m⁄_ußge
();

939 
	`vlog_ußge
();

940 
	`¥ötf
("\nOther options:\n"

943 
	`Àak_checkî_ußge
();

944 
	`exô
(
EXIT_SUCCESS
);

945 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/vswitchd/ovs-vswitchd.c

16 
	~<c⁄fig.h
>

18 
	~<as£π.h
>

19 
	~<î∫o.h
>

20 
	~<gë›t.h
>

21 
	~<limôs.h
>

22 
	~<sig«l.h
>

23 
	~<°dlib.h
>

24 
	~<°rög.h
>

25 #ifde‡
HAVE_MLOCKALL


26 
	~<sys/mm™.h
>

29 
	~"bridge.h
"

30 
	~"comm™d-löe.h
"

31 
	~"compûî.h
"

32 
	~"d´m⁄.h
"

33 
	~"dús.h
"

34 
	~"dpif.h
"

35 
	~"dummy.h
"

36 
	~"Àak-checkî.h
"

37 
	~"mem‹y.h
"

38 
	~"√tdev.h
"

39 
	~"›íÊow/›íÊow.h
"

40 
	~"ovsdb-idl.h
"

41 
	~"pﬁl-lo›.h
"

42 
	~"¥o˚ss.h
"

43 
	~"sig«ls.h
"

44 
	~"sim≠.h
"

45 
	~"°ªam-s¶.h
"

46 
	~"°ªam.h
"

47 
	~"°ªss.h
"

48 
	~"svec.h
"

49 
	~"timevÆ.h
"

50 
	~"unix˘l.h
"

51 
	~"utû.h
"

52 
	~"vc⁄n.h
"

53 
	~"vlog.h
"

54 
	~"lib/vswôch-idl.h
"

55 
	~"w‹kî.h
"

57 
VLOG_DEFINE_THIS_MODULE
(
vswôchd
);

61 
boﬁ
 
	gw™t_mlockÆl
;

63 
unix˘l_cb_func
 
	govs_vswôchd_exô
;

65 *
∑r£_›ti⁄s
(
¨gc
, *
¨gv
[], **
unix˘l_∑th
);

66 
	$ußge
(Ë
NO_RETURN
;

69 
	$maö
(
¨gc
, *
¨gv
[])

71 *
unix˘l_∑th
 = 
NULL
;

72 
unix˘l_£rvî
 *
unix˘l
;

73 
sig«l
 *
sighup
;

74 *
ªmŸe
;

75 
boﬁ
 
exôög
;

76 
ªtvÆ
;

78 
	`¥o˘ôÀ_öô
(
¨gc
, 
¨gv
);

79 
	`£t_¥ogøm_«me
(
¨gv
[0]);

80 
	`°ªss_öô_comm™d
();

81 
ªmŸe
 = 
	`∑r£_›ti⁄s
(
¨gc
, 
¨gv
, &
unix˘l_∑th
);

82 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

83 
sighup
 = 
	`sig«l_ªgi°î
(
SIGHUP
);

84 
	`¥o˚ss_öô
();

85 
	`ov§ec_öô
();

87 
	`d´m⁄ize_°¨t
();

89 i‡(
w™t_mlockÆl
) {

90 #ifde‡
HAVE_MLOCKALL


91 i‡(
	`mlockÆl
(
MCL_CURRENT
 | 
MCL_FUTURE
)) {

92 
	`VLOG_ERR
("mlockÆ»Áûed: %s", 
	`°ªº‹
(
î∫o
));

95 
	`VLOG_ERR
("mlockallÇot supported onÅhis system");

99 
	`w‹kî_°¨t
();

101 
ªtvÆ
 = 
	`unix˘l_£rvî_¸óã
(
unix˘l_∑th
, &
unix˘l
);

102 i‡(
ªtvÆ
) {

103 
	`exô
(
EXIT_FAILURE
);

105 
	`unix˘l_comm™d_ªgi°î
("exô", "", 0, 0, 
ovs_vswôchd_exô
, &
exôög
);

107 
	`bridge_öô
(
ªmŸe
);

108 
	`‰ì
(
ªmŸe
);

110 
exôög
 = 
Ál£
;

111 !
exôög
) {

112 
	`w‹kî_run
();

113 i‡(
	`sig«l_pﬁl
(
sighup
)) {

114 
	`vlog_ª›í_log_fûe
();

116 
	`mem‹y_run
();

117 i‡(
	`mem‹y_should_ªp‹t
()) {

118 
sim≠
 
ußge
;

120 
	`sim≠_öô
(&
ußge
);

121 
	`bridge_gë_mem‹y_ußge
(&
ußge
);

122 
	`mem‹y_ªp‹t
(&
ußge
);

123 
	`sim≠_de°roy
(&
ußge
);

125 
	`bridge_run_Á°
();

126 
	`bridge_run
();

127 
	`bridge_run_Á°
();

128 
	`unix˘l_£rvî_run
(
unix˘l
);

129 
	`√tdev_run
();

131 
	`w‹kî_waô
();

132 
	`sig«l_waô
(
sighup
);

133 
	`mem‹y_waô
();

134 
	`bridge_waô
();

135 
	`unix˘l_£rvî_waô
(
unix˘l
);

136 
	`√tdev_waô
();

137 i‡(
exôög
) {

138 
	`pﬁl_immedüã_wake
();

140 
	`pﬁl_block
();

142 
	`bridge_exô
();

143 
	`unix˘l_£rvî_de°roy
(
unix˘l
);

144 
	`sig«l_uƒegi°î
(
sighup
);

147 
	}
}

150 
	$∑r£_›ti⁄s
(
¨gc
, *
¨gv
[], **
unix˘l_∑thp
)

153 
OPT_PEER_CA_CERT
 = 
UCHAR_MAX
 + 1,

154 
OPT_MLOCKALL
,

155 
OPT_UNIXCTL
,

156 
VLOG_OPTION_ENUMS
,

157 
LEAK_CHECKER_OPTION_ENUMS
,

158 
OPT_BOOTSTRAP_CA_CERT
,

159 
OPT_ENABLE_DUMMY
,

160 
OPT_DISABLE_SYSTEM
,

161 
DAEMON_OPTION_ENUMS


163 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

164 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

165 {"vîsi⁄", 
no_¨gumít
, 
NULL
, 'V'},

166 {"mlockÆl", 
no_¨gumít
, 
NULL
, 
OPT_MLOCKALL
},

167 {"unix˘l", 
ªquúed_¨gumít
, 
NULL
, 
OPT_UNIXCTL
},

168 
DAEMON_LONG_OPTIONS
,

169 
VLOG_LONG_OPTIONS
,

170 
LEAK_CHECKER_LONG_OPTIONS
,

171 
STREAM_SSL_LONG_OPTIONS
,

172 {"≥î-ˇ-˚π", 
ªquúed_¨gumít
, 
NULL
, 
OPT_PEER_CA_CERT
},

173 {"boŸ°øp-ˇ-˚π", 
ªquúed_¨gumít
, 
NULL
, 
OPT_BOOTSTRAP_CA_CERT
},

174 {"íabÀ-dummy", 
›ti⁄Æ_¨gumít
, 
NULL
, 
OPT_ENABLE_DUMMY
},

175 {"dißbÀ-sy°em", 
no_¨gumít
, 
NULL
, 
OPT_DISABLE_SYSTEM
},

176 {
NULL
, 0, NULL, 0},

178 *
sh‹t_›ti⁄s
 = 
	`l⁄g_›ti⁄s_to_sh‹t_›ti⁄s
(
l⁄g_›ti⁄s
);

181 
c
;

183 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
l⁄g_›ti⁄s
, 
NULL
);

184 i‡(
c
 == -1) {

188 
c
) {

190 
	`ußge
();

193 
	`ovs_¥öt_vîsi⁄
(
OFP10_VERSION
, OFP10_VERSION);

194 
	`exô
(
EXIT_SUCCESS
);

196 
OPT_MLOCKALL
:

197 
w™t_mlockÆl
 = 
åue
;

200 
OPT_UNIXCTL
:

201 *
unix˘l_∑thp
 = 
›èrg
;

204 
VLOG_OPTION_HANDLERS


205 
DAEMON_OPTION_HANDLERS


206 
LEAK_CHECKER_OPTION_HANDLERS


207 
STREAM_SSL_OPTION_HANDLERS


209 
OPT_PEER_CA_CERT
:

210 
	`°ªam_s¶_£t_≥î_ˇ_˚π_fûe
(
›èrg
);

213 
OPT_BOOTSTRAP_CA_CERT
:

214 
	`°ªam_s¶_£t_ˇ_˚π_fûe
(
›èrg
, 
åue
);

217 
OPT_ENABLE_DUMMY
:

218 
	`dummy_íabÀ
(
›èrg
 && !
	`°rcmp
(optarg, "override"));

221 
OPT_DISABLE_SYSTEM
:

222 
	`dp_bœckli°_¥ovidî
("system");

226 
	`exô
(
EXIT_FAILURE
);

229 
	`ab‹t
();

232 
	`‰ì
(
sh‹t_›ti⁄s
);

234 
¨gc
 -
›töd
;

235 
¨gv
 +
›töd
;

237 
¨gc
) {

239  
	`xa•rötf
("unix:%s/db.sock", 
	`ovs_rundú
());

242  
	`x°rdup
(
¨gv
[0]);

245 
	`VLOG_FATAL
("at most oneÇon-optionárgumentáccepted; "

248 
	}
}

251 
	$ußge
()

253 
	`¥ötf
("%s: Open vSwitch daemon\n"

257 
¥ogøm_«me
,Örogøm_«me, 
	`ovs_rundú
());

258 
	`°ªam_ußge
("DATABASE", 
åue
, 
Ál£
,Årue);

259 
	`d´m⁄_ußge
();

260 
	`vlog_ußge
();

261 
	`¥ötf
("\nOther options:\n"

265 
	`Àak_checkî_ußge
();

266 
	`exô
(
EXIT_SUCCESS
);

267 
	}
}

270 
	$ovs_vswôchd_exô
(
unix˘l_c⁄n
 *
c⁄n
, 
¨gc
 
OVS_UNUSED
,

271 c⁄° *
¨gv
[] 
OVS_UNUSED
, *
exôög_
)

273 
boﬁ
 *
exôög
 = 
exôög_
;

274 *
exôög
 = 
åue
;

275 
	`unix˘l_comm™d_ª∂y
(
c⁄n
, 
NULL
);

276 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/vswitchd/system-stats.c

16 
	~<c⁄fig.h
>

18 
	~"sy°em-°©s.h
"

20 
	~<as£π.h
>

21 
	~<˘y≥.h
>

22 
	~<dúít.h
>

23 
	~<î∫o.h
>

24 #i‡
HAVE_MNTENT_H


25 
	~<m¡ít.h
>

27 
	~<°döt.h
>

28 
	~<°dio.h
>

29 
	~<°dlib.h
>

30 #i‡
HAVE_SYS_STATVFS_H


31 
	~<sys/°©vfs.h
>

33 
	~<uni°d.h
>

35 
	~"d´m⁄.h
"

36 
	~"dús.h
"

37 
	~"dy«mic-°rög.h
"

38 
	~"js⁄.h
"

39 
	~"oÂbuf.h
"

40 
	~"pﬁl-lo›.h
"

41 
	~"shash.h
"

42 
	~"sm≠.h
"

43 
	~"timevÆ.h
"

44 
	~"vlog.h
"

45 
	~"w‹kî.h
"

47 
VLOG_DEFINE_THIS_MODULE
(
sy°em_°©s
);

53 #ifde‡
LINUX_DATAPATH


54 
	~<asm/∑øm.h
>

56 
	#LINUX_DATAPATH
 0

	)

60 
	$gë_˝u_c‹es
(
sm≠
 *
°©s
)

62 
n_c‹es
 = 
	`sysc⁄f
(
_SC_NPROCESSORS_ONLN
);

63 i‡(
n_c‹es
 > 0) {

64 
	`sm≠_add_f‹m©
(
°©s
, "˝u", "%ld", 
n_c‹es
);

66 
	}
}

69 
	$gë_lﬂd_avîage
(
sm≠
 *
°©s
 
OVS_UNUSED
)

71 #i‡
HAVE_GETLOADAVG


72 
lﬂdavg
[3];

74 i‡(
	`gëlﬂdavg
(
lﬂdavg
, 3) == 3) {

75 
	`sm≠_add_f‹m©
(
°©s
, "load_average", "%.2f,%.2f,%.2f",

76 
lﬂdavg
[0],Üoadavg[1],Üoadavg[2]);

79 
	}
}

82 
	$gë_∑ge_size
()

84 
ˇched
;

86 i‡(!
ˇched
) {

87 
vÆue
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

88 i‡(
vÆue
 >= 0) {

89 
ˇched
 = 
vÆue
;

93  
ˇched
;

94 
	}
}

97 
	$gë_mem‹y_°©s
(
sm≠
 *
°©s
)

99 i‡(!
LINUX_DATAPATH
) {

100 
∑gesize
 = 
	`gë_∑ge_size
();

101 
phys_∑ges
 = 
	`sysc⁄f
(
_SC_PHYS_PAGES
);

102 #ifde‡
_SC_AVPHYS_PAGES


103 
avphys_∑ges
 = 
	`sysc⁄f
(
_SC_AVPHYS_PAGES
);

105 
avphys_∑ges
 = 0;

107 
mem_tŸÆ
, 
mem_u£d
;

109 i‡(
∑gesize
 <0 || 
phys_∑ges
 <0 || 
avphys_∑ges
 <= 0) {

113 
mem_tŸÆ
 = 
phys_∑ges
 * (
∑gesize
 / 1024);

114 
mem_u£d
 = (
phys_∑ges
 - 
avphys_∑ges
Ë* (
∑gesize
 / 1024);

115 
	`sm≠_add_f‹m©
(
°©s
, "mem‹y", "%d,%d", 
mem_tŸÆ
, 
mem_u£d
);

117 c⁄° 
fûe_«me
[] = "/proc/meminfo";

118 
mem_u£d
, 
mem_ˇche
, 
sw≠_u£d
;

119 
mem_‰ì
 = 0;

120 
buf„rs
 = 0;

121 
ˇched
 = 0;

122 
sw≠_‰ì
 = 0;

123 
mem_tŸÆ
 = 0;

124 
sw≠_tŸÆ
 = 0;

125 
shash
 
di˘
;

126 
löe
[128];

127 
FILE
 *
°ªam
;

129 
°ªam
 = 
	`f›í
(
fûe_«me
, "r");

130 i‡(!
°ªam
) {

131 
	`VLOG_WARN_ONCE
("%s: o≥¿Áûed (%s)", 
fûe_«me
, 
	`°ªº‹
(
î∫o
));

135 
	`shash_öô
(&
di˘
);

136 
	`shash_add
(&
di˘
, "MemTŸÆ", &
mem_tŸÆ
);

137 
	`shash_add
(&
di˘
, "MemFªe", &
mem_‰ì
);

138 
	`shash_add
(&
di˘
, "Buf„rs", &
buf„rs
);

139 
	`shash_add
(&
di˘
, "Cached", &
ˇched
);

140 
	`shash_add
(&
di˘
, "Sw≠TŸÆ", &
sw≠_tŸÆ
);

141 
	`shash_add
(&
di˘
, "Sw≠Fªe", &
sw≠_‰ì
);

142 
	`fgës
(
löe
, Üöe, 
°ªam
)) {

143 
key
[16];

144 
vÆue
;

146 i‡(
	`ssˇnf
(
löe
, "%15[^:]: %u", 
key
, &
vÆue
) == 2) {

147 *
vÆuï
 = 
	`shash_föd_d©a
(&
di˘
, 
key
);

148 i‡(
vÆuï
) {

149 *
vÆuï
 = 
vÆue
;

153 
	`f˛o£
(
°ªam
);

154 
	`shash_de°roy
(&
di˘
);

156 
mem_u£d
 = 
mem_tŸÆ
 - 
mem_‰ì
;

157 
mem_ˇche
 = 
buf„rs
 + 
ˇched
;

158 
sw≠_u£d
 = 
sw≠_tŸÆ
 - 
sw≠_‰ì
;

159 
	`sm≠_add_f‹m©
(
°©s
, "memory", "%d,%d,%d,%d,%d",

160 
mem_tŸÆ
, 
mem_u£d
, 
mem_ˇche
, 
sw≠_tŸÆ
, 
sw≠_u£d
);

162 
	}
}

167 
	$gë_boŸ_time
()

169 
ˇche_expú©i⁄
 = 
LLONG_MIN
;

170 
boŸ_time
;

172 
	`as£π
(
LINUX_DATAPATH
);

174 i‡(
	`time_m£c
(Ë>
ˇche_expú©i⁄
) {

175 c⁄° 
°©_fûe
[] = "/proc/stat";

176 
löe
[128];

177 
FILE
 *
°ªam
;

179 
ˇche_expú©i⁄
 = 
	`time_m£c
() + 5 * 1000;

181 
°ªam
 = 
	`f›í
(
°©_fûe
, "r");

182 i‡(!
°ªam
) {

183 
	`VLOG_ERR_ONCE
("%s: o≥¿Áûed (%s)", 
°©_fûe
, 
	`°ªº‹
(
î∫o
));

184  
boŸ_time
;

187 
	`fgës
(
löe
, Üöe, 
°ªam
)) {

188 
btime
;

189 i‡(
	`ssˇnf
(
löe
, "btimê%Œd", &
btime
) == 1) {

190 
boŸ_time
 = 
btime
 * 1000;

191 
d⁄e
;

194 
	`VLOG_ERR_ONCE
("%s: btimênŸ found", 
°©_fûe
);

195 
d⁄e
:

196 
	`f˛o£
(
°ªam
);

198  
boŸ_time
;

199 
	}
}

202 
	$ticks_to_ms
(
ticks
)

204 
	`as£π
(
LINUX_DATAPATH
);

206 #i‚de‡
USER_HZ


207 
	#USER_HZ
 100

	)

210 #i‡
USER_HZ
 == 100

211  
ticks
 * (1000 / 
USER_HZ
);

213 
Á˘‹
 = 1000.0 / 
USER_HZ
;

214  
ticks
 * 
Á˘‹
 + 0.5;

216 
	}
}

218 
	søw_¥o˚ss_öfo
 {

219 
	mvsz
;

220 
	mrss
;

221 
	mu±ime
;

222 
	m˝utime
;

223 
pid_t
 
	mµid
;

224 
	m«me
[18];

227 
boﬁ


228 
	$gë_øw_¥o˚ss_öfo
(
pid_t
 
pid
, 
øw_¥o˚ss_öfo
 *
øw
)

230 
vsize
, 
rss
, 
°¨t_time
, 
utime
, 
°ime
;

231 
°¨t_m£c
;

232 
µid
;

233 
fûe_«me
[128];

234 
FILE
 *
°ªam
;

235 
n
;

237 
	`as£π
(
LINUX_DATAPATH
);

239 
	`•rötf
(
fûe_«me
, "/¥oc/%lu/°©", (Ë
pid
);

240 
°ªam
 = 
	`f›í
(
fûe_«me
, "r");

241 i‡(!
°ªam
) {

242 
	`VLOG_ERR_ONCE
("%s: o≥¿Áûed (%s)", 
fûe_«me
, 
	`°ªº‹
(
î∫o
));

243  
Ál£
;

246 
n
 = 
	`fsˇnf
(
°ªam
,

295 , 
øw
->
«me
, &
µid
, &
utime
, &
°ime
, &
°¨t_time
, &
vsize
, &
rss
);

296 
	`f˛o£
(
°ªam
);

297 i‡(
n
 != 7) {

298 
	`VLOG_ERR_ONCE
("%s: fsˇn‡Áûed", 
fûe_«me
);

299  
Ál£
;

302 
°¨t_m£c
 = 
	`gë_boŸ_time
(Ë+ 
	`ticks_to_ms
(
°¨t_time
);

304 
øw
->
vsz
 = 
vsize
 / 1024;

305 
øw
->
rss
 =Ñs†* (
	`gë∑gesize
() / 1024);

306 
øw
->
u±ime
 = 
	`time_wÆl_m£c
(Ë- 
°¨t_m£c
;

307 
øw
->
˝utime
 = 
	`ticks_to_ms
(
utime
 + 
°ime
);

308 
øw
->
µid
 =Öpid;

310  
åue
;

311 
	}
}

314 
	$cou¡_¸ashes
(
pid_t
 
pid
)

316 
fûe_«me
[128];

317 c⁄° *
∑ªn
;

318 
löe
[128];

319 
¸ashes
 = 0;

320 
FILE
 *
°ªam
;

322 
	`as£π
(
LINUX_DATAPATH
);

324 
	`•rötf
(
fûe_«me
, "/¥oc/%lu/cmdlöe", (Ë
pid
);

325 
°ªam
 = 
	`f›í
(
fûe_«me
, "r");

326 i‡(!
°ªam
) {

327 
	`VLOG_WARN_ONCE
("%s: o≥¿Áûed (%s)", 
fûe_«me
, 
	`°ªº‹
(
î∫o
));

328 
exô
;

331 i‡(!
	`fgës
(
löe
, Üöe, 
°ªam
)) {

332 
	`VLOG_WARN_ONCE
("%s:Ñód faûed (%s)", 
fûe_«me
,

333 
	`„of
(
°ªam
Ë? "íd o‡fûe" : 
	`°ªº‹
(
î∫o
));

334 
exô_˛o£
;

337 
∑ªn
 = 
	`°rchr
(
löe
, '(');

338 i‡(
∑ªn
) {

339 
x
;

340 i‡(
	`ssˇnf
(
∑ªn
 + 1, "%d", &
x
) == 1) {

341 
¸ashes
 = 
x
;

345 
exô_˛o£
:

346 
	`f˛o£
(
°ªam
);

347 
exô
:

348  
¸ashes
;

349 
	}
}

351 
	s¥o˚ss_öfo
 {

352 
	mvsz
;

353 
	mrss
;

354 
	mboŸed
;

355 
	m¸ashes
;

356 
	mu±ime
;

357 
	m˝utime
;

360 
boﬁ


361 
	$gë_¥o˚ss_öfo
(
pid_t
 
pid
, 
¥o˚ss_öfo
 *
pöfo
)

363 
øw_¥o˚ss_öfo
 
chûd
;

365 
	`as£π
(
LINUX_DATAPATH
);

366 i‡(!
	`gë_øw_¥o˚ss_öfo
(
pid
, &
chûd
)) {

367  
Ál£
;

370 
pöfo
->
vsz
 = 
chûd
.vsz;

371 
pöfo
->
rss
 = 
chûd
.rss;

372 
pöfo
->
boŸed
 = 
chûd
.
u±ime
;

373 
pöfo
->
¸ashes
 = 0;

374 
pöfo
->
u±ime
 = 
chûd
.uptime;

375 
pöfo
->
˝utime
 = 
chûd
.cputime;

377 i‡(
chûd
.
µid
) {

378 
øw_¥o˚ss_öfo
 
∑ª¡
;

380 
	`gë_øw_¥o˚ss_öfo
(
chûd
.
µid
, &
∑ª¡
);

381 i‡(!
	`°rcmp
(
chûd
.
«me
, 
∑ª¡
.name)) {

382 
pöfo
->
boŸed
 = 
∑ª¡
.
u±ime
;

383 
pöfo
->
¸ashes
 = 
	`cou¡_¸ashes
(
chûd
.
µid
);

387  
åue
;

388 
	}
}

391 
	$gë_¥o˚ss_°©s
(
sm≠
 *
°©s
)

393 
dúít
 *
de
;

394 
DIR
 *
dú
;

396 
dú
 = 
	`›ídú
(
	`ovs_rundú
());

397 i‡(!
dú
) {

398 
	`VLOG_ERR_ONCE
("%s: o≥¿Áûed (%s)", 
	`ovs_rundú
(), 
	`°ªº‹
(
î∫o
));

402 (
de
 = 
	`ªaddú
(
dú
)Ë!
NULL
) {

403 
¥o˚ss_öfo
 
pöfo
;

404 *
fûe_«me
;

405 *
exãnsi⁄
;

406 *
key
;

407 
pid_t
 
pid
;

409 #ifde‡
_DIRENT_HAVE_D_TYPE


410 i‡(
de
->
d_ty≥
 !
DT_UNKNOWN
 && de->d_ty≥ !
DT_REG
) {

415 
exãnsi⁄
 = 
	`°ºchr
(
de
->
d_«me
, '.');

416 i‡(!
exãnsi⁄
 || 
	`°rcmp
(extension, ".pid")) {

420 
fûe_«me
 = 
	`xa•rötf
("%s/%s", 
	`ovs_rundú
(), 
de
->
d_«me
);

421 
pid
 = 
	`ªad_pidfûe
(
fûe_«me
);

422 
	`‰ì
(
fûe_«me
);

423 i‡(
pid
 < 0) {

427 
key
 = 
	`xa•rötf
("process_%.*s",

428 (Ë(
exãnsi⁄
 - 
de
->
d_«me
), de->d_name);

429 i‡(!
	`sm≠_gë
(
°©s
, 
key
)) {

430 i‡(
LINUX_DATAPATH
 && 
	`gë_¥o˚ss_öfo
(
pid
, &
pöfo
)) {

431 
	`sm≠_add_f‹m©
(
°©s
, 
key
, "%lu,%lu,%lld,%d,%lld,%lld",

432 
pöfo
.
vsz
,Ööfo.
rss
,Ööfo.
˝utime
,

433 
pöfo
.
¸ashes
,Ööfo.
boŸed
,Ööfo.
u±ime
);

435 
	`sm≠_add
(
°©s
, 
key
, "");

438 
	`‰ì
(
key
);

441 
	`˛o£dú
(
dú
);

442 
	}
}

445 
	$gë_fûesys_°©s
(
sm≠
 *
°©s
 
OVS_UNUSED
)

447 #i‡
HAVE_SETMNTENT
 && 
HAVE_STATVFS


448 c⁄° 
fûe_«me
[] = "/etc/mtab";

449 
m¡ít
 *
me
;

450 
FILE
 *
°ªam
;

451 
ds
 
s
;

453 
°ªam
 = 
	`£tm¡ít
(
fûe_«me
, "r");

454 i‡(!
°ªam
) {

455 
	`VLOG_ERR_ONCE
("%s: o≥¿Áûed (%s)", 
fûe_«me
, 
	`°ªº‹
(
î∫o
));

459 
	`ds_öô
(&
s
);

460 (
me
 = 
	`gëm¡ít
(
°ªam
)Ë!
NULL
) {

461 
tŸÆ
, 
‰ì
;

462 
°©vfs
 
vfs
;

463 *
p
;

466 i‡(
	`°∫cmp
(
me
->
m¡_f¢ame
, "/dev", 4)

467 || !
	`°r°r
(
me
->
m¡_›ts
, "rw")) {

472 i‡(
	`°©vfs
(
me
->
m¡_dú
, &
vfs
Ë&& vfs.
f_Êag
 & 
ST_RDONLY
) {

478 i‡(
s
.
Àngth
) {

479 
	`ds_put_ch¨
(&
s
, ' ');

481 
p
 = 
me
->
m¡_dú
; *p != '\0';Ö++) {

482 
	`ds_put_ch¨
(&
s
, *
p
 == ' ' || *p == ',' ? '_' : *p);

484 
tŸÆ
 = (Ë
vfs
.
f_‰size
 * vfs.
f_blocks
 / 1024;

485 
‰ì
 = (Ë
vfs
.
f_‰size
 * vfs.
f_b‰ì
 / 1024;

486 
	`ds_put_f‹m©
(&
s
, ",%Œu,%Œu", 
tŸÆ
,ÅŸÆ - 
‰ì
);

488 
	`ídm¡ít
(
°ªam
);

490 i‡(
s
.
Àngth
) {

491 
	`sm≠_add
(
°©s
, "fûe_sy°ems", 
	`ds_c°r
(&
s
));

493 
	`ds_de°roy
(&
s
);

495 
	}
}

497 
	#SYSTEM_STATS_INTERVAL
 (5 * 1000Ë

	)

500 
boﬁ
 
	gíabÀd
;

503 
	mS_DISABLED
,

504 
	mS_WAITING
,

505 
	mS_REQUEST_SENT
,

506 
	mS_REPLY_RECEIVED


507 } 
	g°©e
;

511 
	g√xt_ª‰esh
;

515 
sm≠
 *
	gª˚ived_°©s
;

517 
w‹kî_ªque°_func
 
	gsy°em_°©s_ªque°_cb
;

518 
w‹kî_ª∂y_func
 
	gsy°em_°©s_ª∂y_cb
;

525 
	$sy°em_°©s_íabÀ
(
boﬁ
 
√w_íabÀ
)

527 i‡(
√w_íabÀ
 !
íabÀd
) {

528 i‡(
√w_íabÀ
) {

529 i‡(
°©e
 =
S_DISABLED
) {

530 
°©e
 = 
S_WAITING
;

531 
√xt_ª‰esh
 = 
	`time_m£c
();

534 i‡(
°©e
 =
S_WAITING
) {

535 
°©e
 = 
S_DISABLED
;

538 
íabÀd
 = 
√w_íabÀ
;

540 
	}
}

550 
sm≠
 *

551 
	$sy°em_°©s_run
()

553 
°©e
) {

554 
S_DISABLED
:

557 
S_WAITING
:

558 i‡(
	`time_m£c
(Ë>
√xt_ª‰esh
) {

559 
	`w‹kî_ªque°
(
NULL
, 0, NULL, 0, 
sy°em_°©s_ªque°_cb
,

560 
sy°em_°©s_ª∂y_cb
, 
NULL
);

561 
°©e
 = 
S_REQUEST_SENT
;

565 
S_REQUEST_SENT
:

568 
S_REPLY_RECEIVED
:

569 i‡(
íabÀd
) {

570 
°©e
 = 
S_WAITING
;

571 
√xt_ª‰esh
 = 
	`time_m£c
(Ë+ 
SYSTEM_STATS_INTERVAL
;

572  
ª˚ived_°©s
;

574 
	`sm≠_de°roy
(
ª˚ived_°©s
);

575 
	`‰ì
(
ª˚ived_°©s
);

576 
°©e
 = 
S_DISABLED
;

581  
NULL
;

582 
	}
}

587 
	$sy°em_°©s_waô
()

589 
°©e
) {

590 
S_DISABLED
:

593 
S_WAITING
:

594 
	`pﬁl_timî_waô_u¡û
(
√xt_ª‰esh
);

597 
S_REQUEST_SENT
:

602 
S_REPLY_RECEIVED
:

603 
	`pﬁl_immedüã_wake
();

606 
	}
}

609 
	$sy°em_°©s_ªque°_cb
(
oÂbuf
 *
ªque°
 
OVS_UNUSED
,

610 c⁄° 
fds
[] 
OVS_UNUSED
, 
size_t
 
n_fds
 OVS_UNUSED)

612 
sm≠
 
°©s
;

613 
js⁄
 *json;

614 *
s
;

616 
	`sm≠_öô
(&
°©s
);

617 
	`gë_˝u_c‹es
(&
°©s
);

618 
	`gë_lﬂd_avîage
(&
°©s
);

619 
	`gë_mem‹y_°©s
(&
°©s
);

620 
	`gë_¥o˚ss_°©s
(&
°©s
);

621 
	`gë_fûesys_°©s
(&
°©s
);

623 
js⁄
 = 
	`sm≠_to_js⁄
(&
°©s
);

624 
s
 = 
	`js⁄_to_°rög
(
js⁄
, 0);

625 
	`w‹kî_ª∂y
(
s
, 
	`°æí
(sË+ 1, 
NULL
, 0);

627 
	`‰ì
(
s
);

628 
	`js⁄_de°roy
(
js⁄
);

629 
	`sm≠_de°roy
(&
°©s
);

630 
	}
}

633 
	$sy°em_°©s_ª∂y_cb
(
oÂbuf
 *
ª∂y
,

634 c⁄° 
fds
[] 
OVS_UNUSED
, 
size_t
 
n_fds
 OVS_UNUSED,

635 *
aux
 
OVS_UNUSED
)

637 
js⁄
 *js⁄ = 
	`js⁄_‰om_°rög
(
ª∂y
->
d©a
);

639 
ª˚ived_°©s
 = 
	`xmÆloc
( *received_stats);

640 
	`sm≠_öô
(
ª˚ived_°©s
);

641 
	`sm≠_‰om_js⁄
(
ª˚ived_°©s
, 
js⁄
);

643 
	`as£π
(
°©e
 =
S_REQUEST_SENT
);

644 
°©e
 = 
S_REPLY_RECEIVED
;

646 
	`js⁄_de°roy
(
js⁄
);

647 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/vswitchd/system-stats.h

16 #i‚de‡
VSWITCHD_SYSTEM_STATS


17 
	#VSWITCHD_SYSTEM_STATS
 1

	)

19 
	~<°dboﬁ.h
>

21 
sy°em_°©s_íabÀ
(
boﬁ
 
íabÀ
);

22 
sm≠
 *
sy°em_°©s_run
();

23 
sy°em_°©s_waô
();

	@/home/lsch/mytest/openvswitch-1.9.0/vswitchd/xenserver.c

16 
	~<c⁄fig.h
>

17 
	~"xí£rvî.h
"

18 
	~<˘y≥.h
>

19 
	~<î∫o.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<uni°d.h
>

23 
	~"dy«mic-°rög.h
"

24 
	~"¥o˚ss.h
"

25 
	~"vlog.h
"

27 
VLOG_DEFINE_THIS_MODULE
(
xí£rvî
);

30 
	$ªad_ho°_uuid
()

32 c⁄° 
fûíame
[] = "/etc/xensource-inventory";

33 
löe
[128];

34 
FILE
 *
fûe
;

36 
fûe
 = 
	`f›í
(
fûíame
, "r");

37 i‡(!
fûe
) {

38 i‡(
î∫o
 =
ENOENT
) {

39 
	`VLOG_INFO
("notÑunning oná XenServer");

41 
	`VLOG_INFO
("%s: o≥n: %s", 
fûíame
, 
	`°ªº‹
(
î∫o
));

43  
NULL
;

46 
	`fgës
(
löe
, Üöe, 
fûe
)) {

47 c⁄° 
Àadî
[] = "INSTALLATION_UUID='";

48 c⁄° 
Àadî_Àn
 = 
	`°æí
(
Àadî
);

49 c⁄° 
uuid_Àn
 = 36;

50 c⁄° 
åaûî
[] = "'\n";

51 c⁄° 
åaûî_Àn
 = 
	`°æí
(
åaûî
);

53 i‡(
	`°æí
(
löe
Ë=
Àadî_Àn
 + 
uuid_Àn
 + 
åaûî_Àn


54 && !
	`memcmp
(
löe
, 
Àadî
, 
Àadî_Àn
)

55 && !
	`memcmp
(
löe
 + 
Àadî_Àn
 + 
uuid_Àn
, 
åaûî
, 
åaûî_Àn
)) {

56 *
ho°_uuid
 = 
	`xmemdup0
(
löe
 + 
Àadî_Àn
, 
uuid_Àn
);

57 
	`VLOG_INFO
("ru¬ög o¿XíSîvî, ho°-uuid %s", 
ho°_uuid
);

58 
	`f˛o£
(
fûe
);

59  
ho°_uuid
;

62 
	`f˛o£
(
fûe
);

63 
	`VLOG_ERR
("%s: INSTALLATION_UUIDÇŸ found", 
fûíame
);

64  
NULL
;

65 
	}
}

68 
	$xí£rvî_gë_ho°_uuid
()

70 *
ho°_uuid
;

71 
boﬁ
 
öôed
;

73 i‡(!
öôed
) {

74 
ho°_uuid
 = 
	`ªad_ho°_uuid
();

75 
öôed
 = 
åue
;

77  
ho°_uuid
;

78 
	}
}

	@/home/lsch/mytest/openvswitch-1.9.0/vswitchd/xenserver.h

16 #i‚de‡
VSWITCHD_XENSERVER_H


17 
	#VSWITCHD_XENSERVER_H
 1

	)

19 c⁄° *
xí£rvî_gë_ho°_uuid
();

	@lib/dhparams.h

17 #i‚de‡
DHPARAMS_H


18 
	#DHPARAMS_H
 1

	)

20 
	~<›ís¶/dh.h
>

22 
DH
 *
gë_dh1024
();

23 
DH
 *
gë_dh2048
();

24 
DH
 *
gë_dh4096
();

	@lib/netflow.h

17 #i‚de‡
NETFLOW_H


18 
	#NETFLOW_H
 1

	)

22 
	~<°döt.h
>

23 
	~"›ívswôch/ty≥s.h
"

24 
	~"utû.h
"

26 
	#NETFLOW_V5_VERSION
 5

	)

32 
	s√tÊow_v5_hódî
 {

33 
ovs_be16
 
	mvîsi⁄
;

34 
ovs_be16
 
	mcou¡
;

35 
ovs_be32
 
	msysu±ime
;

36 
ovs_be32
 
	munix_£cs
;

37 
ovs_be32
 
	munix_n£cs
;

39 
ovs_be32
 
	mÊow_£q
;

41 
uöt8_t
 
	mígöe_ty≥
;

42 
uöt8_t
 
	mígöe_id
;

43 
ovs_be16
 
	mßm∂ög_öãrvÆ
;

45 
BUILD_ASSERT_DECL
((
√tÊow_v5_hódî
) == 24);

50 
	s√tÊow_v5_ªc‹d
 {

51 
ovs_be32
 
	m§c_addr
;

52 
ovs_be32
 
	md°_addr
;

53 
ovs_be32
 
	m√xth›
;

54 
ovs_be16
 
	möput
;

55 
ovs_be16
 
	mouçut
;

56 
ovs_be32
 
	m∑ckë_cou¡
;

57 
ovs_be32
 
	mbyã_cou¡
;

58 
ovs_be32
 
	möô_time
;

59 
ovs_be32
 
	mu£d_time
;

65 
ovs_be16
 
	m§c_p‹t
;

66 
ovs_be16
 
	md°_p‹t
;

68 
uöt8_t
 
	m∑d1
;

69 
uöt8_t
 
	mt˝_Êags
;

70 
uöt8_t
 
	mù_¥Ÿo
;

71 
uöt8_t
 
	mù_tos
;

72 
ovs_be16
 
	m§c_as
;

73 
ovs_be16
 
	md°_as
;

74 
uöt8_t
 
	m§c_mask
;

75 
uöt8_t
 
	md°_mask
;

76 
uöt8_t
 
	m∑d
[2];

78 
BUILD_ASSERT_DECL
((
√tÊow_v5_ªc‹d
) == 48);

	@lib/odp-util.h

17 #i‚de‡
ODP_UTIL_H


18 
	#ODP_UTIL_H
 1

	)

20 
	~<°dboﬁ.h
>

21 
	~<°ddef.h
>

22 
	~<°döt.h
>

23 
	~<°rög.h
>

24 
	~<löux/›ívswôch.h
>

25 
	~"hash.h
"

26 
	~"›íÊow/›íÊow.h
"

27 
	~"utû.h
"

29 
	gds
;

30 
	gÊow
;

31 
	g∆©å
;

32 
	goÂbuf
;

33 
	gsim≠
;

35 
	#OVSP_NONE
 
UINT16_MAX


	)

37 
ölöe
 
uöt16_t


38 
	$oÂ_p‹t_to_odp_p‹t
(
uöt16_t
 
oÂ_p‹t
)

40 
oÂ_p‹t
) {

41 
OFPP_LOCAL
:

42  
OVSP_LOCAL
;

43 
OFPP_NONE
:

44  
OVSP_NONE
;

46  
oÂ_p‹t
;

48 
	}
}

50 
ölöe
 
uöt16_t


51 
	$odp_p‹t_to_oÂ_p‹t
(
uöt16_t
 
odp_p‹t
)

53 
odp_p‹t
) {

54 
OVSP_LOCAL
:

55  
OFPP_LOCAL
;

56 
OVSP_NONE
:

57  
OFPP_NONE
;

59  
odp_p‹t
;

61 
	}
}

63 
f‹m©_odp_a˘i⁄s
(
ds
 *, c⁄° 
∆©å
 *
odp_a˘i⁄s
,

64 
size_t
 
a˘i⁄s_Àn
);

65 
odp_a˘i⁄s_‰om_°rög
(c⁄° *, c⁄° 
sim≠
 *
p‹t_«mes
,

66 
oÂbuf
 *
odp_a˘i⁄s
);

107 
	#ODPUTIL_FLOW_KEY_BYTES
 256

	)

112 
	sodputû_keybuf
 {

113 
uöt32_t
 
	mkeybuf
[
DIV_ROUND_UP
(
ODPUTIL_FLOW_KEY_BYTES
, 4)];

116 
odp_Êow_key_f‹m©
(c⁄° 
∆©å
 *, 
size_t
, 
ds
 *);

117 
odp_Êow_key_‰om_°rög
(c⁄° *
s
, c⁄° 
sim≠
 *
p‹t_«mes
,

118 
oÂbuf
 *);

120 
odp_Êow_key_‰om_Êow
(
oÂbuf
 *, c⁄° 
Êow
 *);

122 
uöt32_t
 
odp_Êow_key_hash
(c⁄° 
∆©å
 *, 
size_t
);

131 
	eodp_key_fô√ss
 {

132 
	mODP_FIT_PERFECT
,

133 
	mODP_FIT_TOO_MUCH
,

134 
	mODP_FIT_TOO_LITTLE
,

135 
	mODP_FIT_ERROR
,

137 
odp_key_fô√ss
 
odp_Êow_key_to_Êow
(c⁄° 
∆©å
 *, 
size_t
,

138 
Êow
 *);

139 c⁄° *
odp_key_fô√ss_to_°rög
(
odp_key_fô√ss
);

141 
commô_odp_a˘i⁄s
(c⁄° 
Êow
 *, Êow *
ba£
,

142 
oÂbuf
 *
odp_a˘i⁄s
);

151 
	eu£r_a˘i⁄_cookõ_ty≥
 {

152 
	mUSER_ACTION_COOKIE_UNSPEC
,

153 
	mUSER_ACTION_COOKIE_SFLOW
,

154 
	mUSER_ACTION_COOKIE_SLOW_PATH


159 
	uu£r_a˘i⁄_cookõ
 {

160 
uöt16_t
 
	mty≥
;

163 
uöt16_t
 
	mty≥
;

164 
ovs_be16
 
	mvœn_tci
;

165 
uöt32_t
 
	mouçut
;

166 } 
	msÊow
;

169 
uöt16_t
 
	mty≥
;

170 
uöt16_t
 
	munu£d
;

171 
uöt32_t
 
	mªas⁄
;

172 } 
	m¶ow_∑th
;

174 
BUILD_ASSERT_DECL
((
u£r_a˘i⁄_cookõ
) == 8);

176 
size_t
 
odp_put_u£r•a˚_a˘i⁄
(
uöt32_t
 
pid
,

177 c⁄° 
u£r_a˘i⁄_cookõ
 *,

178 
oÂbuf
 *
odp_a˘i⁄s
);

181 
	e¶ow_∑th_ªas⁄
 {

183 
	mSLOW_CFM
 = 1 << 0,

184 
	mSLOW_LACP
 = 1 << 1,

185 
	mSLOW_STP
 = 1 << 2,

186 
	mSLOW_IN_BAND
 = 1 << 3,

190 
	mSLOW_CONTROLLER
 = 1 << 4,

194 
	mSLOW_MATCH
 = 1 << 5,

	@lib/table.h

17 #i‚de‡
TABLE_H


18 
	#TABLE_H
 1

	)

20 
	~<°dboﬁ.h
>

21 
	~<°ddef.h
>

22 
	~"compûî.h
"

24 
	gèbÀ_°yÀ
;

28 
	sèbÀ
 {

29 
˚Œ
 *
	m˚Œs
;

30 
cﬁumn
 *
	mcﬁumns
;

31 
size_t
 
	mn_cﬁumns
, 
	mÆloˇãd_cﬁumns
;

32 
size_t
 
	mn_rows
, 
	mÆloˇãd_rows
;

33 
size_t
 
	mcuºít_cﬁumn
;

34 *
	mˇ±i⁄
;

35 
boﬁ
 
	mtime°amp
;

38 
èbÀ_öô
(
èbÀ
 *);

39 
èbÀ_de°roy
(
èbÀ
 *);

40 
èbÀ_£t_ˇ±i⁄
(
èbÀ
 *, *
ˇ±i⁄
);

41 
èbÀ_£t_time°amp
(
èbÀ
 *, 
boﬁ
 
time°amp
);

43 
	$èbÀ_add_cﬁumn
(
èbÀ
 *, c⁄° *
hódög
, ...)

44 
	`PRINTF_FORMAT
(2, 3);

45 
	`èbÀ_add_row
(
èbÀ
 *);

49 
	s˚Œ
 {

51 *
ãxt
;

54 
js⁄
 *json;

55 c⁄° 
ovsdb_ty≥
 *
ty≥
;

58 
˚Œ
 *
	`èbÀ_add_˚Œ
(
èbÀ
 *);

62 
	eèbÀ_f‹m©
 {

63 
TF_TABLE
,

64 
TF_LIST
,

65 
TF_HTML
,

66 
TF_CSV
,

67 
TF_JSON


70 
	e˚Œ_f‹m©
 {

71 
CF_STRING
,

72 
CF_BARE
,

73 
CF_JSON


76 
	sèbÀ_°yÀ
 {

77 
èbÀ_f‹m©
 
f‹m©
;

78 
˚Œ_f‹m©
 cell_format;

79 
boﬁ
 
hódögs
;

80 
js⁄_Êags
;

83 
	#TABLE_STYLE_DEFAULT
 { 
TF_TABLE
, 
CF_STRING
, 
åue
, 
JSSF_SORT
 
	}

	)
}

85 
	#TABLE_OPTION_ENUMS
 \

86 
OPT_NO_HEADINGS
, \

87 
OPT_PRETTY
, \

88 
OPT_BARE


	)

90 
	#TABLE_LONG_OPTIONS
 \

91 {"f‹m©", 
ªquúed_¨gumít
, 
NULL
, 'f'}, \

92 {"d©a", 
ªquúed_¨gumít
, 
NULL
, 'd'}, \

93 {"no-hódögs", 
no_¨gumít
, 
NULL
, 
OPT_NO_HEADINGS
}, \

94 {"¥ëty", 
no_¨gumít
, 
NULL
, 
OPT_PRETTY
}, \

95 {"b¨e", 
no_¨gumít
, 
NULL
, 
OPT_BARE
}

	)

97 
	#TABLE_OPTION_HANDLERS
(
STYLE
) \

99 
	`èbÀ_∑r£_f‹m©
(
STYLE
, 
›èrg
); \

103 
	`èbÀ_∑r£_˚Œ_f‹m©
(
STYLE
, 
›èrg
); \

106 
OPT_NO_HEADINGS
: \

107 (
STYLE
)->
hódögs
 = 
Ál£
; \

110 
OPT_PRETTY
: \

111 (
STYLE
)->
js⁄_Êags
 |
JSSF_PRETTY
; \

114 
OPT_BARE
: \

115 (
STYLE
)->
f‹m©
 = 
TF_LIST
; \

116 (
STYLE
)->
˚Œ_f‹m©
 = 
CF_BARE
; \

117 (
STYLE
)->
hódögs
 = 
Ál£
; \

118 ;

	)

120 
èbÀ_∑r£_f‹m©
(
èbÀ_°yÀ
 *, c⁄° *
f‹m©
);

121 
èbÀ_∑r£_˚Œ_f‹m©
(
èbÀ_°yÀ
 *, c⁄° *
f‹m©
);

123 
èbÀ_¥öt
(c⁄° 
èbÀ
 *, c⁄° 
èbÀ_°yÀ
 *);

	@lib/vswitch-idl.h

3 #i‚de‡
OVSREC_IDL_HEADER


4 
	#OVSREC_IDL_HEADER
 1

	)

6 
	~<°dboﬁ.h
>

7 
	~<°ddef.h
>

8 
	~<°döt.h
>

9 
	~"ovsdb-d©a.h
"

10 
	~"ovsdb-idl-¥ovidî.h
"

11 
	~"sm≠.h
"

12 
	~"uuid.h
"

15 
	sov§ec_bridge
 {

16 
ovsdb_idl_row
 
	mhódî_
;

19 
ov§ec_c⁄åﬁÀr
 **
	mc⁄åﬁÀr
;

20 
size_t
 
	mn_c⁄åﬁÀr
;

23 *
	md©≠©h_id
;

26 *
	md©≠©h_ty≥
;

29 
sm≠
 
	mexã∫Æ_ids
;

32 *
	mÁû_mode
;

35 
öt64_t
 *
	mÊood_vœns
;

36 
size_t
 
	mn_Êood_vœns
;

39 
öt64_t
 *
	mkey_Êow_èbÀs
;

40 
ov§ec_Êow_èbÀ
 **
	mvÆue_Êow_èbÀs
;

41 
size_t
 
	mn_Êow_èbÀs
;

44 
ov§ec_múr‹
 **
	mmúr‹s
;

45 
size_t
 
	mn_múr‹s
;

48 *
	m«me
;

51 
ov§ec_√tÊow
 *
	m√tÊow
;

54 
sm≠
 
	mŸhî_c⁄fig
;

57 
ov§ec_p‹t
 **
	mp‹ts
;

58 
size_t
 
	mn_p‹ts
;

61 
ov§ec_sÊow
 *
	msÊow
;

64 
sm≠
 
	m°©us
;

67 
boﬁ
 
	m°p_íabÀ
;

71 
	mOVSREC_BRIDGE_COL_CONTROLLER
,

72 
	mOVSREC_BRIDGE_COL_DATAPATH_ID
,

73 
	mOVSREC_BRIDGE_COL_DATAPATH_TYPE
,

74 
	mOVSREC_BRIDGE_COL_EXTERNAL_IDS
,

75 
	mOVSREC_BRIDGE_COL_FAIL_MODE
,

76 
	mOVSREC_BRIDGE_COL_FLOOD_VLANS
,

77 
	mOVSREC_BRIDGE_COL_FLOW_TABLES
,

78 
	mOVSREC_BRIDGE_COL_MIRRORS
,

79 
	mOVSREC_BRIDGE_COL_NAME
,

80 
	mOVSREC_BRIDGE_COL_NETFLOW
,

81 
	mOVSREC_BRIDGE_COL_OTHER_CONFIG
,

82 
	mOVSREC_BRIDGE_COL_PORTS
,

83 
	mOVSREC_BRIDGE_COL_SFLOW
,

84 
	mOVSREC_BRIDGE_COL_STATUS
,

85 
	mOVSREC_BRIDGE_COL_STP_ENABLE
,

86 
	mOVSREC_BRIDGE_N_COLUMNS


89 
	#ov§ec_bridge_cﬁ_°©us
 (
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_STATUS
])

	)

90 
	#ov§ec_bridge_cﬁ_Áû_mode
 (
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_FAIL_MODE
])

	)

91 
	#ov§ec_bridge_cﬁ_d©≠©h_id
 (
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_DATAPATH_ID
])

	)

92 
	#ov§ec_bridge_cﬁ_d©≠©h_ty≥
 (
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_DATAPATH_TYPE
])

	)

93 
	#ov§ec_bridge_cﬁ_sÊow
 (
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_SFLOW
])

	)

94 
	#ov§ec_bridge_cﬁ_múr‹s
 (
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_MIRRORS
])

	)

95 
	#ov§ec_bridge_cﬁ_Ÿhî_c⁄fig
 (
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_OTHER_CONFIG
])

	)

96 
	#ov§ec_bridge_cﬁ_Êood_vœns
 (
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_FLOOD_VLANS
])

	)

97 
	#ov§ec_bridge_cﬁ_c⁄åﬁÀr
 (
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_CONTROLLER
])

	)

98 
	#ov§ec_bridge_cﬁ_√tÊow
 (
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_NETFLOW
])

	)

99 
	#ov§ec_bridge_cﬁ_°p_íabÀ
 (
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_STP_ENABLE
])

	)

100 
	#ov§ec_bridge_cﬁ_Êow_èbÀs
 (
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_FLOW_TABLES
])

	)

101 
	#ov§ec_bridge_cﬁ_exã∫Æ_ids
 (
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_EXTERNAL_IDS
])

	)

102 
	#ov§ec_bridge_cﬁ_p‹ts
 (
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_PORTS
])

	)

103 
	#ov§ec_bridge_cﬁ_«me
 (
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_COL_NAME
])

	)

105 
ovsdb_idl_cﬁumn
 
ov§ec_bridge_cﬁumns
[
OVSREC_BRIDGE_N_COLUMNS
];

107 c⁄° 
ov§ec_bridge
 *
ov§ec_bridge_fú°
(c⁄° 
ovsdb_idl
 *);

108 c⁄° 
ov§ec_bridge
 *
ov§ec_bridge_√xt
(const ovsrec_bridge *);

109 
	#OVSREC_BRIDGE_FOR_EACH
(
ROW
, 
IDL
) \

110 (
ROW
Ë
	`ov§ec_bridge_fú°
(
IDL
); \

111 (
ROW
); \

112 (
ROW
Ë
	`ov§ec_bridge_√xt
(ROW))

	)

113 
	#OVSREC_BRIDGE_FOR_EACH_SAFE
(
ROW
, 
NEXT
, 
IDL
) \

114 (
ROW
Ë
	`ov§ec_bridge_fú°
(
IDL
); \

115 (
ROW
Ë? ((
NEXT
Ë
	`ov§ec_bridge_√xt
(ROW), 1) : 0; \

116 (
ROW
Ë(
NEXT
))

	)

118 
ov§ec_bridge_öô
(
ov§ec_bridge
 *);

119 
ov§ec_bridge_dñëe
(c⁄° 
ov§ec_bridge
 *);

120 
ov§ec_bridge
 *
ov§ec_bridge_ö£π
(
ovsdb_idl_txn
 *);

122 
ov§ec_bridge_vîify_c⁄åﬁÀr
(c⁄° 
ov§ec_bridge
 *);

123 
ov§ec_bridge_vîify_d©≠©h_id
(c⁄° 
ov§ec_bridge
 *);

124 
ov§ec_bridge_vîify_d©≠©h_ty≥
(c⁄° 
ov§ec_bridge
 *);

125 
ov§ec_bridge_vîify_exã∫Æ_ids
(c⁄° 
ov§ec_bridge
 *);

126 
ov§ec_bridge_vîify_Áû_mode
(c⁄° 
ov§ec_bridge
 *);

127 
ov§ec_bridge_vîify_Êood_vœns
(c⁄° 
ov§ec_bridge
 *);

128 
ov§ec_bridge_vîify_Êow_èbÀs
(c⁄° 
ov§ec_bridge
 *);

129 
ov§ec_bridge_vîify_múr‹s
(c⁄° 
ov§ec_bridge
 *);

130 
ov§ec_bridge_vîify_«me
(c⁄° 
ov§ec_bridge
 *);

131 
ov§ec_bridge_vîify_√tÊow
(c⁄° 
ov§ec_bridge
 *);

132 
ov§ec_bridge_vîify_Ÿhî_c⁄fig
(c⁄° 
ov§ec_bridge
 *);

133 
ov§ec_bridge_vîify_p‹ts
(c⁄° 
ov§ec_bridge
 *);

134 
ov§ec_bridge_vîify_sÊow
(c⁄° 
ov§ec_bridge
 *);

135 
ov§ec_bridge_vîify_°©us
(c⁄° 
ov§ec_bridge
 *);

136 
ov§ec_bridge_vîify_°p_íabÀ
(c⁄° 
ov§ec_bridge
 *);

141 c⁄° 
ovsdb_d©um
 *
ov§ec_bridge_gë_c⁄åﬁÀr
(c⁄° 
ov§ec_bridge
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

142 c⁄° 
ovsdb_d©um
 *
ov§ec_bridge_gë_d©≠©h_id
(c⁄° 
ov§ec_bridge
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

143 c⁄° 
ovsdb_d©um
 *
ov§ec_bridge_gë_d©≠©h_ty≥
(c⁄° 
ov§ec_bridge
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

144 c⁄° 
ovsdb_d©um
 *
ov§ec_bridge_gë_exã∫Æ_ids
(c⁄° 
ov§ec_bridge
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

145 c⁄° 
ovsdb_d©um
 *
ov§ec_bridge_gë_Áû_mode
(c⁄° 
ov§ec_bridge
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

146 c⁄° 
ovsdb_d©um
 *
ov§ec_bridge_gë_Êood_vœns
(c⁄° 
ov§ec_bridge
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

147 c⁄° 
ovsdb_d©um
 *
ov§ec_bridge_gë_Êow_èbÀs
(c⁄° 
ov§ec_bridge
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

148 c⁄° 
ovsdb_d©um
 *
ov§ec_bridge_gë_múr‹s
(c⁄° 
ov§ec_bridge
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

149 c⁄° 
ovsdb_d©um
 *
ov§ec_bridge_gë_«me
(c⁄° 
ov§ec_bridge
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

150 c⁄° 
ovsdb_d©um
 *
ov§ec_bridge_gë_√tÊow
(c⁄° 
ov§ec_bridge
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

151 c⁄° 
ovsdb_d©um
 *
ov§ec_bridge_gë_Ÿhî_c⁄fig
(c⁄° 
ov§ec_bridge
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

152 c⁄° 
ovsdb_d©um
 *
ov§ec_bridge_gë_p‹ts
(c⁄° 
ov§ec_bridge
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

153 c⁄° 
ovsdb_d©um
 *
ov§ec_bridge_gë_sÊow
(c⁄° 
ov§ec_bridge
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

154 c⁄° 
ovsdb_d©um
 *
ov§ec_bridge_gë_°©us
(c⁄° 
ov§ec_bridge
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

155 c⁄° 
ovsdb_d©um
 *
ov§ec_bridge_gë_°p_íabÀ
(c⁄° 
ov§ec_bridge
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

157 
ov§ec_bridge_£t_c⁄åﬁÀr
(c⁄° 
ov§ec_bridge
 *, 
ov§ec_c⁄åﬁÀr
 **
c⁄åﬁÀr
, 
size_t
 
n_c⁄åﬁÀr
);

158 
ov§ec_bridge_£t_d©≠©h_id
(c⁄° 
ov§ec_bridge
 *, c⁄° *
d©≠©h_id
);

159 
ov§ec_bridge_£t_d©≠©h_ty≥
(c⁄° 
ov§ec_bridge
 *, c⁄° *
d©≠©h_ty≥
);

160 
ov§ec_bridge_£t_exã∫Æ_ids
(c⁄° 
ov§ec_bridge
 *, c⁄° 
sm≠
 *);

161 
ov§ec_bridge_£t_Áû_mode
(c⁄° 
ov§ec_bridge
 *, c⁄° *
Áû_mode
);

162 
ov§ec_bridge_£t_Êood_vœns
(c⁄° 
ov§ec_bridge
 *, c⁄° 
öt64_t
 *
Êood_vœns
, 
size_t
 
n_Êood_vœns
);

163 
ov§ec_bridge_£t_Êow_èbÀs
(c⁄° 
ov§ec_bridge
 *, c⁄° 
öt64_t
 *
key_Êow_èbÀs
, 
ov§ec_Êow_èbÀ
 **
vÆue_Êow_èbÀs
, 
size_t
 
n_Êow_èbÀs
);

164 
ov§ec_bridge_£t_múr‹s
(c⁄° 
ov§ec_bridge
 *, 
ov§ec_múr‹
 **
múr‹s
, 
size_t
 
n_múr‹s
);

165 
ov§ec_bridge_£t_«me
(c⁄° 
ov§ec_bridge
 *, c⁄° *
«me
);

166 
ov§ec_bridge_£t_√tÊow
(c⁄° 
ov§ec_bridge
 *, c⁄° 
ov§ec_√tÊow
 *
√tÊow
);

167 
ov§ec_bridge_£t_Ÿhî_c⁄fig
(c⁄° 
ov§ec_bridge
 *, c⁄° 
sm≠
 *);

168 
ov§ec_bridge_£t_p‹ts
(c⁄° 
ov§ec_bridge
 *, 
ov§ec_p‹t
 **
p‹ts
, 
size_t
 
n_p‹ts
);

169 
ov§ec_bridge_£t_sÊow
(c⁄° 
ov§ec_bridge
 *, c⁄° 
ov§ec_sÊow
 *
sÊow
);

170 
ov§ec_bridge_£t_°©us
(c⁄° 
ov§ec_bridge
 *, c⁄° 
sm≠
 *);

171 
ov§ec_bridge_£t_°p_íabÀ
(c⁄° 
ov§ec_bridge
 *, 
boﬁ
 
°p_íabÀ
);

175 
	sov§ec_c⁄åﬁÀr
 {

176 
ovsdb_idl_row
 
	mhódî_
;

179 *
	mc⁄√˘i⁄_mode
;

182 
öt64_t
 *
	mc⁄åﬁÀr_bur°_limô
;

183 
size_t
 
	mn_c⁄åﬁÀr_bur°_limô
;

186 
öt64_t
 *
	mc⁄åﬁÀr_øã_limô
;

187 
size_t
 
	mn_c⁄åﬁÀr_øã_limô
;

190 
boﬁ
 *
	míabÀ_async_mesßges
;

191 
size_t
 
	mn_íabÀ_async_mesßges
;

194 
sm≠
 
	mexã∫Æ_ids
;

197 
öt64_t
 *
	möa˘ivôy_¥obe
;

198 
size_t
 
	mn_öa˘ivôy_¥obe
;

201 
boﬁ
 
	mis_c⁄√˘ed
;

204 *
	mloˇl_g©eway
;

207 *
	mloˇl_ù
;

210 *
	mloˇl_√tmask
;

213 
öt64_t
 *
	mmax_backoff
;

214 
size_t
 
	mn_max_backoff
;

217 
sm≠
 
	mŸhî_c⁄fig
;

220 *
	mrﬁe
;

223 
sm≠
 
	m°©us
;

226 *
	mèrgë
;

230 
	mOVSREC_CONTROLLER_COL_CONNECTION_MODE
,

231 
	mOVSREC_CONTROLLER_COL_CONTROLLER_BURST_LIMIT
,

232 
	mOVSREC_CONTROLLER_COL_CONTROLLER_RATE_LIMIT
,

233 
	mOVSREC_CONTROLLER_COL_ENABLE_ASYNC_MESSAGES
,

234 
	mOVSREC_CONTROLLER_COL_EXTERNAL_IDS
,

235 
	mOVSREC_CONTROLLER_COL_INACTIVITY_PROBE
,

236 
	mOVSREC_CONTROLLER_COL_IS_CONNECTED
,

237 
	mOVSREC_CONTROLLER_COL_LOCAL_GATEWAY
,

238 
	mOVSREC_CONTROLLER_COL_LOCAL_IP
,

239 
	mOVSREC_CONTROLLER_COL_LOCAL_NETMASK
,

240 
	mOVSREC_CONTROLLER_COL_MAX_BACKOFF
,

241 
	mOVSREC_CONTROLLER_COL_OTHER_CONFIG
,

242 
	mOVSREC_CONTROLLER_COL_ROLE
,

243 
	mOVSREC_CONTROLLER_COL_STATUS
,

244 
	mOVSREC_CONTROLLER_COL_TARGET
,

245 
	mOVSREC_CONTROLLER_N_COLUMNS


248 
	#ov§ec_c⁄åﬁÀr_cﬁ_max_backoff
 (
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_MAX_BACKOFF
])

	)

249 
	#ov§ec_c⁄åﬁÀr_cﬁ_°©us
 (
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_STATUS
])

	)

250 
	#ov§ec_c⁄åﬁÀr_cﬁ_èrgë
 (
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_TARGET
])

	)

251 
	#ov§ec_c⁄åﬁÀr_cﬁ_loˇl_ù
 (
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_LOCAL_IP
])

	)

252 
	#ov§ec_c⁄åﬁÀr_cﬁ_c⁄√˘i⁄_mode
 (
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_CONNECTION_MODE
])

	)

253 
	#ov§ec_c⁄åﬁÀr_cﬁ_Ÿhî_c⁄fig
 (
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_OTHER_CONFIG
])

	)

254 
	#ov§ec_c⁄åﬁÀr_cﬁ_c⁄åﬁÀr_øã_limô
 (
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_CONTROLLER_RATE_LIMIT
])

	)

255 
	#ov§ec_c⁄åﬁÀr_cﬁ_öa˘ivôy_¥obe
 (
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_INACTIVITY_PROBE
])

	)

256 
	#ov§ec_c⁄åﬁÀr_cﬁ_loˇl_√tmask
 (
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_LOCAL_NETMASK
])

	)

257 
	#ov§ec_c⁄åﬁÀr_cﬁ_rﬁe
 (
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_ROLE
])

	)

258 
	#ov§ec_c⁄åﬁÀr_cﬁ_c⁄åﬁÀr_bur°_limô
 (
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_CONTROLLER_BURST_LIMIT
])

	)

259 
	#ov§ec_c⁄åﬁÀr_cﬁ_exã∫Æ_ids
 (
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_EXTERNAL_IDS
])

	)

260 
	#ov§ec_c⁄åﬁÀr_cﬁ_loˇl_g©eway
 (
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_LOCAL_GATEWAY
])

	)

261 
	#ov§ec_c⁄åﬁÀr_cﬁ_is_c⁄√˘ed
 (
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_IS_CONNECTED
])

	)

262 
	#ov§ec_c⁄åﬁÀr_cﬁ_íabÀ_async_mesßges
 (
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_COL_ENABLE_ASYNC_MESSAGES
])

	)

264 
ovsdb_idl_cﬁumn
 
ov§ec_c⁄åﬁÀr_cﬁumns
[
OVSREC_CONTROLLER_N_COLUMNS
];

266 c⁄° 
ov§ec_c⁄åﬁÀr
 *
ov§ec_c⁄åﬁÀr_fú°
(c⁄° 
ovsdb_idl
 *);

267 c⁄° 
ov§ec_c⁄åﬁÀr
 *
ov§ec_c⁄åﬁÀr_√xt
(const ovsrec_controller *);

268 
	#OVSREC_CONTROLLER_FOR_EACH
(
ROW
, 
IDL
) \

269 (
ROW
Ë
	`ov§ec_c⁄åﬁÀr_fú°
(
IDL
); \

270 (
ROW
); \

271 (
ROW
Ë
	`ov§ec_c⁄åﬁÀr_√xt
(ROW))

	)

272 
	#OVSREC_CONTROLLER_FOR_EACH_SAFE
(
ROW
, 
NEXT
, 
IDL
) \

273 (
ROW
Ë
	`ov§ec_c⁄åﬁÀr_fú°
(
IDL
); \

274 (
ROW
Ë? ((
NEXT
Ë
	`ov§ec_c⁄åﬁÀr_√xt
(ROW), 1) : 0; \

275 (
ROW
Ë(
NEXT
))

	)

277 
ov§ec_c⁄åﬁÀr_öô
(
ov§ec_c⁄åﬁÀr
 *);

278 
ov§ec_c⁄åﬁÀr_dñëe
(c⁄° 
ov§ec_c⁄åﬁÀr
 *);

279 
ov§ec_c⁄åﬁÀr
 *
ov§ec_c⁄åﬁÀr_ö£π
(
ovsdb_idl_txn
 *);

281 
ov§ec_c⁄åﬁÀr_vîify_c⁄√˘i⁄_mode
(c⁄° 
ov§ec_c⁄åﬁÀr
 *);

282 
ov§ec_c⁄åﬁÀr_vîify_c⁄åﬁÀr_bur°_limô
(c⁄° 
ov§ec_c⁄åﬁÀr
 *);

283 
ov§ec_c⁄åﬁÀr_vîify_c⁄åﬁÀr_øã_limô
(c⁄° 
ov§ec_c⁄åﬁÀr
 *);

284 
ov§ec_c⁄åﬁÀr_vîify_íabÀ_async_mesßges
(c⁄° 
ov§ec_c⁄åﬁÀr
 *);

285 
ov§ec_c⁄åﬁÀr_vîify_exã∫Æ_ids
(c⁄° 
ov§ec_c⁄åﬁÀr
 *);

286 
ov§ec_c⁄åﬁÀr_vîify_öa˘ivôy_¥obe
(c⁄° 
ov§ec_c⁄åﬁÀr
 *);

287 
ov§ec_c⁄åﬁÀr_vîify_is_c⁄√˘ed
(c⁄° 
ov§ec_c⁄åﬁÀr
 *);

288 
ov§ec_c⁄åﬁÀr_vîify_loˇl_g©eway
(c⁄° 
ov§ec_c⁄åﬁÀr
 *);

289 
ov§ec_c⁄åﬁÀr_vîify_loˇl_ù
(c⁄° 
ov§ec_c⁄åﬁÀr
 *);

290 
ov§ec_c⁄åﬁÀr_vîify_loˇl_√tmask
(c⁄° 
ov§ec_c⁄åﬁÀr
 *);

291 
ov§ec_c⁄åﬁÀr_vîify_max_backoff
(c⁄° 
ov§ec_c⁄åﬁÀr
 *);

292 
ov§ec_c⁄åﬁÀr_vîify_Ÿhî_c⁄fig
(c⁄° 
ov§ec_c⁄åﬁÀr
 *);

293 
ov§ec_c⁄åﬁÀr_vîify_rﬁe
(c⁄° 
ov§ec_c⁄åﬁÀr
 *);

294 
ov§ec_c⁄åﬁÀr_vîify_°©us
(c⁄° 
ov§ec_c⁄åﬁÀr
 *);

295 
ov§ec_c⁄åﬁÀr_vîify_èrgë
(c⁄° 
ov§ec_c⁄åﬁÀr
 *);

300 c⁄° 
ovsdb_d©um
 *
ov§ec_c⁄åﬁÀr_gë_c⁄√˘i⁄_mode
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

301 c⁄° 
ovsdb_d©um
 *
ov§ec_c⁄åﬁÀr_gë_c⁄åﬁÀr_bur°_limô
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

302 c⁄° 
ovsdb_d©um
 *
ov§ec_c⁄åﬁÀr_gë_c⁄åﬁÀr_øã_limô
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

303 c⁄° 
ovsdb_d©um
 *
ov§ec_c⁄åﬁÀr_gë_íabÀ_async_mesßges
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

304 c⁄° 
ovsdb_d©um
 *
ov§ec_c⁄åﬁÀr_gë_exã∫Æ_ids
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

305 c⁄° 
ovsdb_d©um
 *
ov§ec_c⁄åﬁÀr_gë_öa˘ivôy_¥obe
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

306 c⁄° 
ovsdb_d©um
 *
ov§ec_c⁄åﬁÀr_gë_is_c⁄√˘ed
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

307 c⁄° 
ovsdb_d©um
 *
ov§ec_c⁄åﬁÀr_gë_loˇl_g©eway
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

308 c⁄° 
ovsdb_d©um
 *
ov§ec_c⁄åﬁÀr_gë_loˇl_ù
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

309 c⁄° 
ovsdb_d©um
 *
ov§ec_c⁄åﬁÀr_gë_loˇl_√tmask
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

310 c⁄° 
ovsdb_d©um
 *
ov§ec_c⁄åﬁÀr_gë_max_backoff
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

311 c⁄° 
ovsdb_d©um
 *
ov§ec_c⁄åﬁÀr_gë_Ÿhî_c⁄fig
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

312 c⁄° 
ovsdb_d©um
 *
ov§ec_c⁄åﬁÀr_gë_rﬁe
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

313 c⁄° 
ovsdb_d©um
 *
ov§ec_c⁄åﬁÀr_gë_°©us
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

314 c⁄° 
ovsdb_d©um
 *
ov§ec_c⁄åﬁÀr_gë_èrgë
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

316 
ov§ec_c⁄åﬁÀr_£t_c⁄√˘i⁄_mode
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, c⁄° *
c⁄√˘i⁄_mode
);

317 
ov§ec_c⁄åﬁÀr_£t_c⁄åﬁÀr_bur°_limô
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, c⁄° 
öt64_t
 *
c⁄åﬁÀr_bur°_limô
, 
size_t
 
n_c⁄åﬁÀr_bur°_limô
);

318 
ov§ec_c⁄åﬁÀr_£t_c⁄åﬁÀr_øã_limô
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, c⁄° 
öt64_t
 *
c⁄åﬁÀr_øã_limô
, 
size_t
 
n_c⁄åﬁÀr_øã_limô
);

319 
ov§ec_c⁄åﬁÀr_£t_íabÀ_async_mesßges
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, c⁄° 
boﬁ
 *
íabÀ_async_mesßges
, 
size_t
 
n_íabÀ_async_mesßges
);

320 
ov§ec_c⁄åﬁÀr_£t_exã∫Æ_ids
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, c⁄° 
sm≠
 *);

321 
ov§ec_c⁄åﬁÀr_£t_öa˘ivôy_¥obe
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, c⁄° 
öt64_t
 *
öa˘ivôy_¥obe
, 
size_t
 
n_öa˘ivôy_¥obe
);

322 
ov§ec_c⁄åﬁÀr_£t_is_c⁄√˘ed
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, 
boﬁ
 
is_c⁄√˘ed
);

323 
ov§ec_c⁄åﬁÀr_£t_loˇl_g©eway
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, c⁄° *
loˇl_g©eway
);

324 
ov§ec_c⁄åﬁÀr_£t_loˇl_ù
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, c⁄° *
loˇl_ù
);

325 
ov§ec_c⁄åﬁÀr_£t_loˇl_√tmask
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, c⁄° *
loˇl_√tmask
);

326 
ov§ec_c⁄åﬁÀr_£t_max_backoff
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, c⁄° 
öt64_t
 *
max_backoff
, 
size_t
 
n_max_backoff
);

327 
ov§ec_c⁄åﬁÀr_£t_Ÿhî_c⁄fig
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, c⁄° 
sm≠
 *);

328 
ov§ec_c⁄åﬁÀr_£t_rﬁe
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, c⁄° *
rﬁe
);

329 
ov§ec_c⁄åﬁÀr_£t_°©us
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, c⁄° 
sm≠
 *);

330 
ov§ec_c⁄åﬁÀr_£t_èrgë
(c⁄° 
ov§ec_c⁄åﬁÀr
 *, c⁄° *
èrgë
);

334 
	sov§ec_Êow_èbÀ
 {

335 
ovsdb_idl_row
 
	mhódî_
;

338 
öt64_t
 *
	mÊow_limô
;

339 
size_t
 
	mn_Êow_limô
;

342 **
	mgroups
;

343 
size_t
 
	mn_groups
;

346 *
	m«me
;

349 *
	movîÊow_pﬁicy
;

353 
	mOVSREC_FLOW_TABLE_COL_FLOW_LIMIT
,

354 
	mOVSREC_FLOW_TABLE_COL_GROUPS
,

355 
	mOVSREC_FLOW_TABLE_COL_NAME
,

356 
	mOVSREC_FLOW_TABLE_COL_OVERFLOW_POLICY
,

357 
	mOVSREC_FLOW_TABLE_N_COLUMNS


360 
	#ov§ec_Êow_èbÀ_cﬁ_ovîÊow_pﬁicy
 (
ov§ec_Êow_èbÀ_cﬁumns
[
OVSREC_FLOW_TABLE_COL_OVERFLOW_POLICY
])

	)

361 
	#ov§ec_Êow_èbÀ_cﬁ_Êow_limô
 (
ov§ec_Êow_èbÀ_cﬁumns
[
OVSREC_FLOW_TABLE_COL_FLOW_LIMIT
])

	)

362 
	#ov§ec_Êow_èbÀ_cﬁ_groups
 (
ov§ec_Êow_èbÀ_cﬁumns
[
OVSREC_FLOW_TABLE_COL_GROUPS
])

	)

363 
	#ov§ec_Êow_èbÀ_cﬁ_«me
 (
ov§ec_Êow_èbÀ_cﬁumns
[
OVSREC_FLOW_TABLE_COL_NAME
])

	)

365 
ovsdb_idl_cﬁumn
 
ov§ec_Êow_èbÀ_cﬁumns
[
OVSREC_FLOW_TABLE_N_COLUMNS
];

367 c⁄° 
ov§ec_Êow_èbÀ
 *
ov§ec_Êow_èbÀ_fú°
(c⁄° 
ovsdb_idl
 *);

368 c⁄° 
ov§ec_Êow_èbÀ
 *
ov§ec_Êow_èbÀ_√xt
(const ovsrec_flow_table *);

369 
	#OVSREC_FLOW_TABLE_FOR_EACH
(
ROW
, 
IDL
) \

370 (
ROW
Ë
	`ov§ec_Êow_èbÀ_fú°
(
IDL
); \

371 (
ROW
); \

372 (
ROW
Ë
	`ov§ec_Êow_èbÀ_√xt
(ROW))

	)

373 
	#OVSREC_FLOW_TABLE_FOR_EACH_SAFE
(
ROW
, 
NEXT
, 
IDL
) \

374 (
ROW
Ë
	`ov§ec_Êow_èbÀ_fú°
(
IDL
); \

375 (
ROW
Ë? ((
NEXT
Ë
	`ov§ec_Êow_èbÀ_√xt
(ROW), 1) : 0; \

376 (
ROW
Ë(
NEXT
))

	)

378 
ov§ec_Êow_èbÀ_öô
(
ov§ec_Êow_èbÀ
 *);

379 
ov§ec_Êow_èbÀ_dñëe
(c⁄° 
ov§ec_Êow_èbÀ
 *);

380 
ov§ec_Êow_èbÀ
 *
ov§ec_Êow_èbÀ_ö£π
(
ovsdb_idl_txn
 *);

382 
ov§ec_Êow_èbÀ_vîify_Êow_limô
(c⁄° 
ov§ec_Êow_èbÀ
 *);

383 
ov§ec_Êow_èbÀ_vîify_groups
(c⁄° 
ov§ec_Êow_èbÀ
 *);

384 
ov§ec_Êow_èbÀ_vîify_«me
(c⁄° 
ov§ec_Êow_èbÀ
 *);

385 
ov§ec_Êow_èbÀ_vîify_ovîÊow_pﬁicy
(c⁄° 
ov§ec_Êow_èbÀ
 *);

390 c⁄° 
ovsdb_d©um
 *
ov§ec_Êow_èbÀ_gë_Êow_limô
(c⁄° 
ov§ec_Êow_èbÀ
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

391 c⁄° 
ovsdb_d©um
 *
ov§ec_Êow_èbÀ_gë_groups
(c⁄° 
ov§ec_Êow_èbÀ
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

392 c⁄° 
ovsdb_d©um
 *
ov§ec_Êow_èbÀ_gë_«me
(c⁄° 
ov§ec_Êow_èbÀ
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

393 c⁄° 
ovsdb_d©um
 *
ov§ec_Êow_èbÀ_gë_ovîÊow_pﬁicy
(c⁄° 
ov§ec_Êow_èbÀ
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

395 
ov§ec_Êow_èbÀ_£t_Êow_limô
(c⁄° 
ov§ec_Êow_èbÀ
 *, c⁄° 
öt64_t
 *
Êow_limô
, 
size_t
 
n_Êow_limô
);

396 
ov§ec_Êow_èbÀ_£t_groups
(c⁄° 
ov§ec_Êow_èbÀ
 *, **
groups
, 
size_t
 
n_groups
);

397 
ov§ec_Êow_èbÀ_£t_«me
(c⁄° 
ov§ec_Êow_èbÀ
 *, c⁄° *
«me
);

398 
ov§ec_Êow_èbÀ_£t_ovîÊow_pﬁicy
(c⁄° 
ov§ec_Êow_èbÀ
 *, c⁄° *
ovîÊow_pﬁicy
);

402 
	sov§ec_öãrÁ˚
 {

403 
ovsdb_idl_row
 
	mhódî_
;

406 *
	madmö_°©e
;

409 
boﬁ
 *
	mcfm_Áu…
;

410 
size_t
 
	mn_cfm_Áu…
;

413 **
	mcfm_Áu…_°©us
;

414 
size_t
 
	mn_cfm_Áu…_°©us
;

417 
öt64_t
 *
	mcfm_hó…h
;

418 
size_t
 
	mn_cfm_hó…h
;

421 
öt64_t
 *
	mcfm_mpid
;

422 
size_t
 
	mn_cfm_mpid
;

425 
öt64_t
 *
	mcfm_ªmŸe_mpids
;

426 
size_t
 
	mn_cfm_ªmŸe_mpids
;

429 *
	mcfm_ªmŸe_›°©e
;

432 *
	mdu∂ex
;

435 
sm≠
 
	mexã∫Æ_ids
;

438 
öt64_t
 
	mögªss_pﬁicög_bur°
;

441 
öt64_t
 
	mögªss_pﬁicög_øã
;

444 
boﬁ
 *
	mœ˝_cuºít
;

445 
size_t
 
	mn_œ˝_cuºít
;

448 
öt64_t
 *
	mlök_ª£ts
;

449 
size_t
 
	mn_lök_ª£ts
;

452 
öt64_t
 *
	mlök_•ìd
;

453 
size_t
 
	mn_lök_•ìd
;

456 *
	mlök_°©e
;

459 *
	mmac
;

462 
öt64_t
 *
	mmtu
;

463 
size_t
 
	mn_mtu
;

466 *
	m«me
;

469 
öt64_t
 *
	moÂ‹t
;

470 
size_t
 
	mn_oÂ‹t
;

473 
sm≠
 
	m›ti⁄s
;

476 
sm≠
 
	mŸhî_c⁄fig
;

479 **
	mkey_°©i°ics
;

480 
öt64_t
 *
	mvÆue_°©i°ics
;

481 
size_t
 
	mn_°©i°ics
;

484 
sm≠
 
	m°©us
;

487 *
	mty≥
;

491 
	mOVSREC_INTERFACE_COL_ADMIN_STATE
,

492 
	mOVSREC_INTERFACE_COL_CFM_FAULT
,

493 
	mOVSREC_INTERFACE_COL_CFM_FAULT_STATUS
,

494 
	mOVSREC_INTERFACE_COL_CFM_HEALTH
,

495 
	mOVSREC_INTERFACE_COL_CFM_MPID
,

496 
	mOVSREC_INTERFACE_COL_CFM_REMOTE_MPIDS
,

497 
	mOVSREC_INTERFACE_COL_CFM_REMOTE_OPSTATE
,

498 
	mOVSREC_INTERFACE_COL_DUPLEX
,

499 
	mOVSREC_INTERFACE_COL_EXTERNAL_IDS
,

500 
	mOVSREC_INTERFACE_COL_INGRESS_POLICING_BURST
,

501 
	mOVSREC_INTERFACE_COL_INGRESS_POLICING_RATE
,

502 
	mOVSREC_INTERFACE_COL_LACP_CURRENT
,

503 
	mOVSREC_INTERFACE_COL_LINK_RESETS
,

504 
	mOVSREC_INTERFACE_COL_LINK_SPEED
,

505 
	mOVSREC_INTERFACE_COL_LINK_STATE
,

506 
	mOVSREC_INTERFACE_COL_MAC
,

507 
	mOVSREC_INTERFACE_COL_MTU
,

508 
	mOVSREC_INTERFACE_COL_NAME
,

509 
	mOVSREC_INTERFACE_COL_OFPORT
,

510 
	mOVSREC_INTERFACE_COL_OPTIONS
,

511 
	mOVSREC_INTERFACE_COL_OTHER_CONFIG
,

512 
	mOVSREC_INTERFACE_COL_STATISTICS
,

513 
	mOVSREC_INTERFACE_COL_STATUS
,

514 
	mOVSREC_INTERFACE_COL_TYPE
,

515 
	mOVSREC_INTERFACE_N_COLUMNS


518 
	#ov§ec_öãrÁ˚_cﬁ_lök_°©e
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_LINK_STATE
])

	)

519 
	#ov§ec_öãrÁ˚_cﬁ_cfm_Áu…
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_CFM_FAULT
])

	)

520 
	#ov§ec_öãrÁ˚_cﬁ_cfm_ªmŸe_›°©e
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_CFM_REMOTE_OPSTATE
])

	)

521 
	#ov§ec_öãrÁ˚_cﬁ_ögªss_pﬁicög_øã
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_INGRESS_POLICING_RATE
])

	)

522 
	#ov§ec_öãrÁ˚_cﬁ_lök_ª£ts
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_LINK_RESETS
])

	)

523 
	#ov§ec_öãrÁ˚_cﬁ_°©i°ics
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_STATISTICS
])

	)

524 
	#ov§ec_öãrÁ˚_cﬁ_du∂ex
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_DUPLEX
])

	)

525 
	#ov§ec_öãrÁ˚_cﬁ_ty≥
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_TYPE
])

	)

526 
	#ov§ec_öãrÁ˚_cﬁ_œ˝_cuºít
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_LACP_CURRENT
])

	)

527 
	#ov§ec_öãrÁ˚_cﬁ_°©us
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_STATUS
])

	)

528 
	#ov§ec_öãrÁ˚_cﬁ_ögªss_pﬁicög_bur°
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_INGRESS_POLICING_BURST
])

	)

529 
	#ov§ec_öãrÁ˚_cﬁ_cfm_hó…h
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_CFM_HEALTH
])

	)

530 
	#ov§ec_öãrÁ˚_cﬁ_lök_•ìd
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_LINK_SPEED
])

	)

531 
	#ov§ec_öãrÁ˚_cﬁ_admö_°©e
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_ADMIN_STATE
])

	)

532 
	#ov§ec_öãrÁ˚_cﬁ_exã∫Æ_ids
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_EXTERNAL_IDS
])

	)

533 
	#ov§ec_öãrÁ˚_cﬁ_oÂ‹t
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_OFPORT
])

	)

534 
	#ov§ec_öãrÁ˚_cﬁ_«me
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_NAME
])

	)

535 
	#ov§ec_öãrÁ˚_cﬁ_Ÿhî_c⁄fig
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_OTHER_CONFIG
])

	)

536 
	#ov§ec_öãrÁ˚_cﬁ_mac
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_MAC
])

	)

537 
	#ov§ec_öãrÁ˚_cﬁ_mtu
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_MTU
])

	)

538 
	#ov§ec_öãrÁ˚_cﬁ_cfm_mpid
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_CFM_MPID
])

	)

539 
	#ov§ec_öãrÁ˚_cﬁ_›ti⁄s
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_OPTIONS
])

	)

540 
	#ov§ec_öãrÁ˚_cﬁ_cfm_Áu…_°©us
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_CFM_FAULT_STATUS
])

	)

541 
	#ov§ec_öãrÁ˚_cﬁ_cfm_ªmŸe_mpids
 (
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_COL_CFM_REMOTE_MPIDS
])

	)

543 
ovsdb_idl_cﬁumn
 
ov§ec_öãrÁ˚_cﬁumns
[
OVSREC_INTERFACE_N_COLUMNS
];

545 c⁄° 
ov§ec_öãrÁ˚
 *
ov§ec_öãrÁ˚_fú°
(c⁄° 
ovsdb_idl
 *);

546 c⁄° 
ov§ec_öãrÁ˚
 *
ov§ec_öãrÁ˚_√xt
(const ovsrec_interface *);

547 
	#OVSREC_INTERFACE_FOR_EACH
(
ROW
, 
IDL
) \

548 (
ROW
Ë
	`ov§ec_öãrÁ˚_fú°
(
IDL
); \

549 (
ROW
); \

550 (
ROW
Ë
	`ov§ec_öãrÁ˚_√xt
(ROW))

	)

551 
	#OVSREC_INTERFACE_FOR_EACH_SAFE
(
ROW
, 
NEXT
, 
IDL
) \

552 (
ROW
Ë
	`ov§ec_öãrÁ˚_fú°
(
IDL
); \

553 (
ROW
Ë? ((
NEXT
Ë
	`ov§ec_öãrÁ˚_√xt
(ROW), 1) : 0; \

554 (
ROW
Ë(
NEXT
))

	)

556 
ov§ec_öãrÁ˚_öô
(
ov§ec_öãrÁ˚
 *);

557 
ov§ec_öãrÁ˚_dñëe
(c⁄° 
ov§ec_öãrÁ˚
 *);

558 
ov§ec_öãrÁ˚
 *
ov§ec_öãrÁ˚_ö£π
(
ovsdb_idl_txn
 *);

560 
ov§ec_öãrÁ˚_vîify_admö_°©e
(c⁄° 
ov§ec_öãrÁ˚
 *);

561 
ov§ec_öãrÁ˚_vîify_cfm_Áu…
(c⁄° 
ov§ec_öãrÁ˚
 *);

562 
ov§ec_öãrÁ˚_vîify_cfm_Áu…_°©us
(c⁄° 
ov§ec_öãrÁ˚
 *);

563 
ov§ec_öãrÁ˚_vîify_cfm_hó…h
(c⁄° 
ov§ec_öãrÁ˚
 *);

564 
ov§ec_öãrÁ˚_vîify_cfm_mpid
(c⁄° 
ov§ec_öãrÁ˚
 *);

565 
ov§ec_öãrÁ˚_vîify_cfm_ªmŸe_mpids
(c⁄° 
ov§ec_öãrÁ˚
 *);

566 
ov§ec_öãrÁ˚_vîify_cfm_ªmŸe_›°©e
(c⁄° 
ov§ec_öãrÁ˚
 *);

567 
ov§ec_öãrÁ˚_vîify_du∂ex
(c⁄° 
ov§ec_öãrÁ˚
 *);

568 
ov§ec_öãrÁ˚_vîify_exã∫Æ_ids
(c⁄° 
ov§ec_öãrÁ˚
 *);

569 
ov§ec_öãrÁ˚_vîify_ögªss_pﬁicög_bur°
(c⁄° 
ov§ec_öãrÁ˚
 *);

570 
ov§ec_öãrÁ˚_vîify_ögªss_pﬁicög_øã
(c⁄° 
ov§ec_öãrÁ˚
 *);

571 
ov§ec_öãrÁ˚_vîify_œ˝_cuºít
(c⁄° 
ov§ec_öãrÁ˚
 *);

572 
ov§ec_öãrÁ˚_vîify_lök_ª£ts
(c⁄° 
ov§ec_öãrÁ˚
 *);

573 
ov§ec_öãrÁ˚_vîify_lök_•ìd
(c⁄° 
ov§ec_öãrÁ˚
 *);

574 
ov§ec_öãrÁ˚_vîify_lök_°©e
(c⁄° 
ov§ec_öãrÁ˚
 *);

575 
ov§ec_öãrÁ˚_vîify_mac
(c⁄° 
ov§ec_öãrÁ˚
 *);

576 
ov§ec_öãrÁ˚_vîify_mtu
(c⁄° 
ov§ec_öãrÁ˚
 *);

577 
ov§ec_öãrÁ˚_vîify_«me
(c⁄° 
ov§ec_öãrÁ˚
 *);

578 
ov§ec_öãrÁ˚_vîify_oÂ‹t
(c⁄° 
ov§ec_öãrÁ˚
 *);

579 
ov§ec_öãrÁ˚_vîify_›ti⁄s
(c⁄° 
ov§ec_öãrÁ˚
 *);

580 
ov§ec_öãrÁ˚_vîify_Ÿhî_c⁄fig
(c⁄° 
ov§ec_öãrÁ˚
 *);

581 
ov§ec_öãrÁ˚_vîify_°©i°ics
(c⁄° 
ov§ec_öãrÁ˚
 *);

582 
ov§ec_öãrÁ˚_vîify_°©us
(c⁄° 
ov§ec_öãrÁ˚
 *);

583 
ov§ec_öãrÁ˚_vîify_ty≥
(c⁄° 
ov§ec_öãrÁ˚
 *);

588 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_admö_°©e
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

589 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_cfm_Áu…
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

590 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_cfm_Áu…_°©us
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

591 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_cfm_hó…h
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

592 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_cfm_mpid
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

593 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_cfm_ªmŸe_mpids
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

594 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_cfm_ªmŸe_›°©e
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

595 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_du∂ex
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

596 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_exã∫Æ_ids
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

597 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_ögªss_pﬁicög_bur°
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

598 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_ögªss_pﬁicög_øã
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

599 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_œ˝_cuºít
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

600 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_lök_ª£ts
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

601 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_lök_•ìd
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

602 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_lök_°©e
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

603 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_mac
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

604 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_mtu
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

605 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_«me
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

606 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_oÂ‹t
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

607 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_›ti⁄s
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

608 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_Ÿhî_c⁄fig
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

609 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_°©i°ics
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

610 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_°©us
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

611 c⁄° 
ovsdb_d©um
 *
ov§ec_öãrÁ˚_gë_ty≥
(c⁄° 
ov§ec_öãrÁ˚
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

613 
ov§ec_öãrÁ˚_£t_admö_°©e
(c⁄° 
ov§ec_öãrÁ˚
 *, c⁄° *
admö_°©e
);

614 
ov§ec_öãrÁ˚_£t_cfm_Áu…
(c⁄° 
ov§ec_öãrÁ˚
 *, c⁄° 
boﬁ
 *
cfm_Áu…
, 
size_t
 
n_cfm_Áu…
);

615 
ov§ec_öãrÁ˚_£t_cfm_Áu…_°©us
(c⁄° 
ov§ec_öãrÁ˚
 *, **
cfm_Áu…_°©us
, 
size_t
 
n_cfm_Áu…_°©us
);

616 
ov§ec_öãrÁ˚_£t_cfm_hó…h
(c⁄° 
ov§ec_öãrÁ˚
 *, c⁄° 
öt64_t
 *
cfm_hó…h
, 
size_t
 
n_cfm_hó…h
);

617 
ov§ec_öãrÁ˚_£t_cfm_mpid
(c⁄° 
ov§ec_öãrÁ˚
 *, c⁄° 
öt64_t
 *
cfm_mpid
, 
size_t
 
n_cfm_mpid
);

618 
ov§ec_öãrÁ˚_£t_cfm_ªmŸe_mpids
(c⁄° 
ov§ec_öãrÁ˚
 *, c⁄° 
öt64_t
 *
cfm_ªmŸe_mpids
, 
size_t
 
n_cfm_ªmŸe_mpids
);

619 
ov§ec_öãrÁ˚_£t_cfm_ªmŸe_›°©e
(c⁄° 
ov§ec_öãrÁ˚
 *, c⁄° *
cfm_ªmŸe_›°©e
);

620 
ov§ec_öãrÁ˚_£t_du∂ex
(c⁄° 
ov§ec_öãrÁ˚
 *, c⁄° *
du∂ex
);

621 
ov§ec_öãrÁ˚_£t_exã∫Æ_ids
(c⁄° 
ov§ec_öãrÁ˚
 *, c⁄° 
sm≠
 *);

622 
ov§ec_öãrÁ˚_£t_ögªss_pﬁicög_bur°
(c⁄° 
ov§ec_öãrÁ˚
 *, 
öt64_t
 
ögªss_pﬁicög_bur°
);

623 
ov§ec_öãrÁ˚_£t_ögªss_pﬁicög_øã
(c⁄° 
ov§ec_öãrÁ˚
 *, 
öt64_t
 
ögªss_pﬁicög_øã
);

624 
ov§ec_öãrÁ˚_£t_œ˝_cuºít
(c⁄° 
ov§ec_öãrÁ˚
 *, c⁄° 
boﬁ
 *
œ˝_cuºít
, 
size_t
 
n_œ˝_cuºít
);

625 
ov§ec_öãrÁ˚_£t_lök_ª£ts
(c⁄° 
ov§ec_öãrÁ˚
 *, c⁄° 
öt64_t
 *
lök_ª£ts
, 
size_t
 
n_lök_ª£ts
);

626 
ov§ec_öãrÁ˚_£t_lök_•ìd
(c⁄° 
ov§ec_öãrÁ˚
 *, c⁄° 
öt64_t
 *
lök_•ìd
, 
size_t
 
n_lök_•ìd
);

627 
ov§ec_öãrÁ˚_£t_lök_°©e
(c⁄° 
ov§ec_öãrÁ˚
 *, c⁄° *
lök_°©e
);

628 
ov§ec_öãrÁ˚_£t_mac
(c⁄° 
ov§ec_öãrÁ˚
 *, c⁄° *
mac
);

629 
ov§ec_öãrÁ˚_£t_mtu
(c⁄° 
ov§ec_öãrÁ˚
 *, c⁄° 
öt64_t
 *
mtu
, 
size_t
 
n_mtu
);

630 
ov§ec_öãrÁ˚_£t_«me
(c⁄° 
ov§ec_öãrÁ˚
 *, c⁄° *
«me
);

631 
ov§ec_öãrÁ˚_£t_oÂ‹t
(c⁄° 
ov§ec_öãrÁ˚
 *, c⁄° 
öt64_t
 *
oÂ‹t
, 
size_t
 
n_oÂ‹t
);

632 
ov§ec_öãrÁ˚_£t_›ti⁄s
(c⁄° 
ov§ec_öãrÁ˚
 *, c⁄° 
sm≠
 *);

633 
ov§ec_öãrÁ˚_£t_Ÿhî_c⁄fig
(c⁄° 
ov§ec_öãrÁ˚
 *, c⁄° 
sm≠
 *);

634 
ov§ec_öãrÁ˚_£t_°©i°ics
(c⁄° 
ov§ec_öãrÁ˚
 *, **
key_°©i°ics
, c⁄° 
öt64_t
 *
vÆue_°©i°ics
, 
size_t
 
n_°©i°ics
);

635 
ov§ec_öãrÁ˚_£t_°©us
(c⁄° 
ov§ec_öãrÁ˚
 *, c⁄° 
sm≠
 *);

636 
ov§ec_öãrÁ˚_£t_ty≥
(c⁄° 
ov§ec_öãrÁ˚
 *, c⁄° *
ty≥
);

640 
	sov§ec_m™agî
 {

641 
ovsdb_idl_row
 
	mhódî_
;

644 *
	mc⁄√˘i⁄_mode
;

647 
sm≠
 
	mexã∫Æ_ids
;

650 
öt64_t
 *
	möa˘ivôy_¥obe
;

651 
size_t
 
	mn_öa˘ivôy_¥obe
;

654 
boﬁ
 
	mis_c⁄√˘ed
;

657 
öt64_t
 *
	mmax_backoff
;

658 
size_t
 
	mn_max_backoff
;

661 
sm≠
 
	mŸhî_c⁄fig
;

664 
sm≠
 
	m°©us
;

667 *
	mèrgë
;

671 
	mOVSREC_MANAGER_COL_CONNECTION_MODE
,

672 
	mOVSREC_MANAGER_COL_EXTERNAL_IDS
,

673 
	mOVSREC_MANAGER_COL_INACTIVITY_PROBE
,

674 
	mOVSREC_MANAGER_COL_IS_CONNECTED
,

675 
	mOVSREC_MANAGER_COL_MAX_BACKOFF
,

676 
	mOVSREC_MANAGER_COL_OTHER_CONFIG
,

677 
	mOVSREC_MANAGER_COL_STATUS
,

678 
	mOVSREC_MANAGER_COL_TARGET
,

679 
	mOVSREC_MANAGER_N_COLUMNS


682 
	#ov§ec_m™agî_cﬁ_max_backoff
 (
ov§ec_m™agî_cﬁumns
[
OVSREC_MANAGER_COL_MAX_BACKOFF
])

	)

683 
	#ov§ec_m™agî_cﬁ_°©us
 (
ov§ec_m™agî_cﬁumns
[
OVSREC_MANAGER_COL_STATUS
])

	)

684 
	#ov§ec_m™agî_cﬁ_èrgë
 (
ov§ec_m™agî_cﬁumns
[
OVSREC_MANAGER_COL_TARGET
])

	)

685 
	#ov§ec_m™agî_cﬁ_c⁄√˘i⁄_mode
 (
ov§ec_m™agî_cﬁumns
[
OVSREC_MANAGER_COL_CONNECTION_MODE
])

	)

686 
	#ov§ec_m™agî_cﬁ_Ÿhî_c⁄fig
 (
ov§ec_m™agî_cﬁumns
[
OVSREC_MANAGER_COL_OTHER_CONFIG
])

	)

687 
	#ov§ec_m™agî_cﬁ_öa˘ivôy_¥obe
 (
ov§ec_m™agî_cﬁumns
[
OVSREC_MANAGER_COL_INACTIVITY_PROBE
])

	)

688 
	#ov§ec_m™agî_cﬁ_exã∫Æ_ids
 (
ov§ec_m™agî_cﬁumns
[
OVSREC_MANAGER_COL_EXTERNAL_IDS
])

	)

689 
	#ov§ec_m™agî_cﬁ_is_c⁄√˘ed
 (
ov§ec_m™agî_cﬁumns
[
OVSREC_MANAGER_COL_IS_CONNECTED
])

	)

691 
ovsdb_idl_cﬁumn
 
ov§ec_m™agî_cﬁumns
[
OVSREC_MANAGER_N_COLUMNS
];

693 c⁄° 
ov§ec_m™agî
 *
ov§ec_m™agî_fú°
(c⁄° 
ovsdb_idl
 *);

694 c⁄° 
ov§ec_m™agî
 *
ov§ec_m™agî_√xt
(const ovsrec_manager *);

695 
	#OVSREC_MANAGER_FOR_EACH
(
ROW
, 
IDL
) \

696 (
ROW
Ë
	`ov§ec_m™agî_fú°
(
IDL
); \

697 (
ROW
); \

698 (
ROW
Ë
	`ov§ec_m™agî_√xt
(ROW))

	)

699 
	#OVSREC_MANAGER_FOR_EACH_SAFE
(
ROW
, 
NEXT
, 
IDL
) \

700 (
ROW
Ë
	`ov§ec_m™agî_fú°
(
IDL
); \

701 (
ROW
Ë? ((
NEXT
Ë
	`ov§ec_m™agî_√xt
(ROW), 1) : 0; \

702 (
ROW
Ë(
NEXT
))

	)

704 
ov§ec_m™agî_öô
(
ov§ec_m™agî
 *);

705 
ov§ec_m™agî_dñëe
(c⁄° 
ov§ec_m™agî
 *);

706 
ov§ec_m™agî
 *
ov§ec_m™agî_ö£π
(
ovsdb_idl_txn
 *);

708 
ov§ec_m™agî_vîify_c⁄√˘i⁄_mode
(c⁄° 
ov§ec_m™agî
 *);

709 
ov§ec_m™agî_vîify_exã∫Æ_ids
(c⁄° 
ov§ec_m™agî
 *);

710 
ov§ec_m™agî_vîify_öa˘ivôy_¥obe
(c⁄° 
ov§ec_m™agî
 *);

711 
ov§ec_m™agî_vîify_is_c⁄√˘ed
(c⁄° 
ov§ec_m™agî
 *);

712 
ov§ec_m™agî_vîify_max_backoff
(c⁄° 
ov§ec_m™agî
 *);

713 
ov§ec_m™agî_vîify_Ÿhî_c⁄fig
(c⁄° 
ov§ec_m™agî
 *);

714 
ov§ec_m™agî_vîify_°©us
(c⁄° 
ov§ec_m™agî
 *);

715 
ov§ec_m™agî_vîify_èrgë
(c⁄° 
ov§ec_m™agî
 *);

720 c⁄° 
ovsdb_d©um
 *
ov§ec_m™agî_gë_c⁄√˘i⁄_mode
(c⁄° 
ov§ec_m™agî
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

721 c⁄° 
ovsdb_d©um
 *
ov§ec_m™agî_gë_exã∫Æ_ids
(c⁄° 
ov§ec_m™agî
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

722 c⁄° 
ovsdb_d©um
 *
ov§ec_m™agî_gë_öa˘ivôy_¥obe
(c⁄° 
ov§ec_m™agî
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

723 c⁄° 
ovsdb_d©um
 *
ov§ec_m™agî_gë_is_c⁄√˘ed
(c⁄° 
ov§ec_m™agî
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

724 c⁄° 
ovsdb_d©um
 *
ov§ec_m™agî_gë_max_backoff
(c⁄° 
ov§ec_m™agî
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

725 c⁄° 
ovsdb_d©um
 *
ov§ec_m™agî_gë_Ÿhî_c⁄fig
(c⁄° 
ov§ec_m™agî
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

726 c⁄° 
ovsdb_d©um
 *
ov§ec_m™agî_gë_°©us
(c⁄° 
ov§ec_m™agî
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

727 c⁄° 
ovsdb_d©um
 *
ov§ec_m™agî_gë_èrgë
(c⁄° 
ov§ec_m™agî
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

729 
ov§ec_m™agî_£t_c⁄√˘i⁄_mode
(c⁄° 
ov§ec_m™agî
 *, c⁄° *
c⁄√˘i⁄_mode
);

730 
ov§ec_m™agî_£t_exã∫Æ_ids
(c⁄° 
ov§ec_m™agî
 *, c⁄° 
sm≠
 *);

731 
ov§ec_m™agî_£t_öa˘ivôy_¥obe
(c⁄° 
ov§ec_m™agî
 *, c⁄° 
öt64_t
 *
öa˘ivôy_¥obe
, 
size_t
 
n_öa˘ivôy_¥obe
);

732 
ov§ec_m™agî_£t_is_c⁄√˘ed
(c⁄° 
ov§ec_m™agî
 *, 
boﬁ
 
is_c⁄√˘ed
);

733 
ov§ec_m™agî_£t_max_backoff
(c⁄° 
ov§ec_m™agî
 *, c⁄° 
öt64_t
 *
max_backoff
, 
size_t
 
n_max_backoff
);

734 
ov§ec_m™agî_£t_Ÿhî_c⁄fig
(c⁄° 
ov§ec_m™agî
 *, c⁄° 
sm≠
 *);

735 
ov§ec_m™agî_£t_°©us
(c⁄° 
ov§ec_m™agî
 *, c⁄° 
sm≠
 *);

736 
ov§ec_m™agî_£t_èrgë
(c⁄° 
ov§ec_m™agî
 *, c⁄° *
èrgë
);

740 
	sov§ec_múr‹
 {

741 
ovsdb_idl_row
 
	mhódî_
;

744 
sm≠
 
	mexã∫Æ_ids
;

747 *
	m«me
;

750 
ov§ec_p‹t
 *
	mouçut_p‹t
;

753 
öt64_t
 *
	mouçut_vœn
;

754 
size_t
 
	mn_ouçut_vœn
;

757 
boﬁ
 
	m£À˘_Æl
;

760 
ov§ec_p‹t
 **
	m£À˘_d°_p‹t
;

761 
size_t
 
	mn_£À˘_d°_p‹t
;

764 
ov§ec_p‹t
 **
	m£À˘_§c_p‹t
;

765 
size_t
 
	mn_£À˘_§c_p‹t
;

768 
öt64_t
 *
	m£À˘_vœn
;

769 
size_t
 
	mn_£À˘_vœn
;

772 **
	mkey_°©i°ics
;

773 
öt64_t
 *
	mvÆue_°©i°ics
;

774 
size_t
 
	mn_°©i°ics
;

778 
	mOVSREC_MIRROR_COL_EXTERNAL_IDS
,

779 
	mOVSREC_MIRROR_COL_NAME
,

780 
	mOVSREC_MIRROR_COL_OUTPUT_PORT
,

781 
	mOVSREC_MIRROR_COL_OUTPUT_VLAN
,

782 
	mOVSREC_MIRROR_COL_SELECT_ALL
,

783 
	mOVSREC_MIRROR_COL_SELECT_DST_PORT
,

784 
	mOVSREC_MIRROR_COL_SELECT_SRC_PORT
,

785 
	mOVSREC_MIRROR_COL_SELECT_VLAN
,

786 
	mOVSREC_MIRROR_COL_STATISTICS
,

787 
	mOVSREC_MIRROR_N_COLUMNS


790 
	#ov§ec_múr‹_cﬁ_ouçut_p‹t
 (
ov§ec_múr‹_cﬁumns
[
OVSREC_MIRROR_COL_OUTPUT_PORT
])

	)

791 
	#ov§ec_múr‹_cﬁ_£À˘_§c_p‹t
 (
ov§ec_múr‹_cﬁumns
[
OVSREC_MIRROR_COL_SELECT_SRC_PORT
])

	)

792 
	#ov§ec_múr‹_cﬁ_°©i°ics
 (
ov§ec_múr‹_cﬁumns
[
OVSREC_MIRROR_COL_STATISTICS
])

	)

793 
	#ov§ec_múr‹_cﬁ_«me
 (
ov§ec_múr‹_cﬁumns
[
OVSREC_MIRROR_COL_NAME
])

	)

794 
	#ov§ec_múr‹_cﬁ_£À˘_Æl
 (
ov§ec_múr‹_cﬁumns
[
OVSREC_MIRROR_COL_SELECT_ALL
])

	)

795 
	#ov§ec_múr‹_cﬁ_£À˘_d°_p‹t
 (
ov§ec_múr‹_cﬁumns
[
OVSREC_MIRROR_COL_SELECT_DST_PORT
])

	)

796 
	#ov§ec_múr‹_cﬁ_exã∫Æ_ids
 (
ov§ec_múr‹_cﬁumns
[
OVSREC_MIRROR_COL_EXTERNAL_IDS
])

	)

797 
	#ov§ec_múr‹_cﬁ_ouçut_vœn
 (
ov§ec_múr‹_cﬁumns
[
OVSREC_MIRROR_COL_OUTPUT_VLAN
])

	)

798 
	#ov§ec_múr‹_cﬁ_£À˘_vœn
 (
ov§ec_múr‹_cﬁumns
[
OVSREC_MIRROR_COL_SELECT_VLAN
])

	)

800 
ovsdb_idl_cﬁumn
 
ov§ec_múr‹_cﬁumns
[
OVSREC_MIRROR_N_COLUMNS
];

802 c⁄° 
ov§ec_múr‹
 *
ov§ec_múr‹_fú°
(c⁄° 
ovsdb_idl
 *);

803 c⁄° 
ov§ec_múr‹
 *
ov§ec_múr‹_√xt
(const ovsrec_mirror *);

804 
	#OVSREC_MIRROR_FOR_EACH
(
ROW
, 
IDL
) \

805 (
ROW
Ë
	`ov§ec_múr‹_fú°
(
IDL
); \

806 (
ROW
); \

807 (
ROW
Ë
	`ov§ec_múr‹_√xt
(ROW))

	)

808 
	#OVSREC_MIRROR_FOR_EACH_SAFE
(
ROW
, 
NEXT
, 
IDL
) \

809 (
ROW
Ë
	`ov§ec_múr‹_fú°
(
IDL
); \

810 (
ROW
Ë? ((
NEXT
Ë
	`ov§ec_múr‹_√xt
(ROW), 1) : 0; \

811 (
ROW
Ë(
NEXT
))

	)

813 
ov§ec_múr‹_öô
(
ov§ec_múr‹
 *);

814 
ov§ec_múr‹_dñëe
(c⁄° 
ov§ec_múr‹
 *);

815 
ov§ec_múr‹
 *
ov§ec_múr‹_ö£π
(
ovsdb_idl_txn
 *);

817 
ov§ec_múr‹_vîify_exã∫Æ_ids
(c⁄° 
ov§ec_múr‹
 *);

818 
ov§ec_múr‹_vîify_«me
(c⁄° 
ov§ec_múr‹
 *);

819 
ov§ec_múr‹_vîify_ouçut_p‹t
(c⁄° 
ov§ec_múr‹
 *);

820 
ov§ec_múr‹_vîify_ouçut_vœn
(c⁄° 
ov§ec_múr‹
 *);

821 
ov§ec_múr‹_vîify_£À˘_Æl
(c⁄° 
ov§ec_múr‹
 *);

822 
ov§ec_múr‹_vîify_£À˘_d°_p‹t
(c⁄° 
ov§ec_múr‹
 *);

823 
ov§ec_múr‹_vîify_£À˘_§c_p‹t
(c⁄° 
ov§ec_múr‹
 *);

824 
ov§ec_múr‹_vîify_£À˘_vœn
(c⁄° 
ov§ec_múr‹
 *);

825 
ov§ec_múr‹_vîify_°©i°ics
(c⁄° 
ov§ec_múr‹
 *);

830 c⁄° 
ovsdb_d©um
 *
ov§ec_múr‹_gë_exã∫Æ_ids
(c⁄° 
ov§ec_múr‹
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

831 c⁄° 
ovsdb_d©um
 *
ov§ec_múr‹_gë_«me
(c⁄° 
ov§ec_múr‹
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

832 c⁄° 
ovsdb_d©um
 *
ov§ec_múr‹_gë_ouçut_p‹t
(c⁄° 
ov§ec_múr‹
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

833 c⁄° 
ovsdb_d©um
 *
ov§ec_múr‹_gë_ouçut_vœn
(c⁄° 
ov§ec_múr‹
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

834 c⁄° 
ovsdb_d©um
 *
ov§ec_múr‹_gë_£À˘_Æl
(c⁄° 
ov§ec_múr‹
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

835 c⁄° 
ovsdb_d©um
 *
ov§ec_múr‹_gë_£À˘_d°_p‹t
(c⁄° 
ov§ec_múr‹
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

836 c⁄° 
ovsdb_d©um
 *
ov§ec_múr‹_gë_£À˘_§c_p‹t
(c⁄° 
ov§ec_múr‹
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

837 c⁄° 
ovsdb_d©um
 *
ov§ec_múr‹_gë_£À˘_vœn
(c⁄° 
ov§ec_múr‹
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

838 c⁄° 
ovsdb_d©um
 *
ov§ec_múr‹_gë_°©i°ics
(c⁄° 
ov§ec_múr‹
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

840 
ov§ec_múr‹_£t_exã∫Æ_ids
(c⁄° 
ov§ec_múr‹
 *, c⁄° 
sm≠
 *);

841 
ov§ec_múr‹_£t_«me
(c⁄° 
ov§ec_múr‹
 *, c⁄° *
«me
);

842 
ov§ec_múr‹_£t_ouçut_p‹t
(c⁄° 
ov§ec_múr‹
 *, c⁄° 
ov§ec_p‹t
 *
ouçut_p‹t
);

843 
ov§ec_múr‹_£t_ouçut_vœn
(c⁄° 
ov§ec_múr‹
 *, c⁄° 
öt64_t
 *
ouçut_vœn
, 
size_t
 
n_ouçut_vœn
);

844 
ov§ec_múr‹_£t_£À˘_Æl
(c⁄° 
ov§ec_múr‹
 *, 
boﬁ
 
£À˘_Æl
);

845 
ov§ec_múr‹_£t_£À˘_d°_p‹t
(c⁄° 
ov§ec_múr‹
 *, 
ov§ec_p‹t
 **
£À˘_d°_p‹t
, 
size_t
 
n_£À˘_d°_p‹t
);

846 
ov§ec_múr‹_£t_£À˘_§c_p‹t
(c⁄° 
ov§ec_múr‹
 *, 
ov§ec_p‹t
 **
£À˘_§c_p‹t
, 
size_t
 
n_£À˘_§c_p‹t
);

847 
ov§ec_múr‹_£t_£À˘_vœn
(c⁄° 
ov§ec_múr‹
 *, c⁄° 
öt64_t
 *
£À˘_vœn
, 
size_t
 
n_£À˘_vœn
);

848 
ov§ec_múr‹_£t_°©i°ics
(c⁄° 
ov§ec_múr‹
 *, **
key_°©i°ics
, c⁄° 
öt64_t
 *
vÆue_°©i°ics
, 
size_t
 
n_°©i°ics
);

852 
	sov§ec_√tÊow
 {

853 
ovsdb_idl_row
 
	mhódî_
;

856 
öt64_t
 
	ma˘ive_timeout
;

859 
boﬁ
 
	madd_id_to_öãrÁ˚
;

862 
öt64_t
 *
	mígöe_id
;

863 
size_t
 
	mn_ígöe_id
;

866 
öt64_t
 *
	mígöe_ty≥
;

867 
size_t
 
	mn_ígöe_ty≥
;

870 
sm≠
 
	mexã∫Æ_ids
;

873 **
	mèrgës
;

874 
size_t
 
	mn_èrgës
;

878 
	mOVSREC_NETFLOW_COL_ACTIVE_TIMEOUT
,

879 
	mOVSREC_NETFLOW_COL_ADD_ID_TO_INTERFACE
,

880 
	mOVSREC_NETFLOW_COL_ENGINE_ID
,

881 
	mOVSREC_NETFLOW_COL_ENGINE_TYPE
,

882 
	mOVSREC_NETFLOW_COL_EXTERNAL_IDS
,

883 
	mOVSREC_NETFLOW_COL_TARGETS
,

884 
	mOVSREC_NETFLOW_N_COLUMNS


887 
	#ov§ec_√tÊow_cﬁ_ígöe_id
 (
ov§ec_√tÊow_cﬁumns
[
OVSREC_NETFLOW_COL_ENGINE_ID
])

	)

888 
	#ov§ec_√tÊow_cﬁ_a˘ive_timeout
 (
ov§ec_√tÊow_cﬁumns
[
OVSREC_NETFLOW_COL_ACTIVE_TIMEOUT
])

	)

889 
	#ov§ec_√tÊow_cﬁ_add_id_to_öãrÁ˚
 (
ov§ec_√tÊow_cﬁumns
[
OVSREC_NETFLOW_COL_ADD_ID_TO_INTERFACE
])

	)

890 
	#ov§ec_√tÊow_cﬁ_exã∫Æ_ids
 (
ov§ec_√tÊow_cﬁumns
[
OVSREC_NETFLOW_COL_EXTERNAL_IDS
])

	)

891 
	#ov§ec_√tÊow_cﬁ_èrgës
 (
ov§ec_√tÊow_cﬁumns
[
OVSREC_NETFLOW_COL_TARGETS
])

	)

892 
	#ov§ec_√tÊow_cﬁ_ígöe_ty≥
 (
ov§ec_√tÊow_cﬁumns
[
OVSREC_NETFLOW_COL_ENGINE_TYPE
])

	)

894 
ovsdb_idl_cﬁumn
 
ov§ec_√tÊow_cﬁumns
[
OVSREC_NETFLOW_N_COLUMNS
];

896 c⁄° 
ov§ec_√tÊow
 *
ov§ec_√tÊow_fú°
(c⁄° 
ovsdb_idl
 *);

897 c⁄° 
ov§ec_√tÊow
 *
ov§ec_√tÊow_√xt
(const ovsrec_netflow *);

898 
	#OVSREC_NETFLOW_FOR_EACH
(
ROW
, 
IDL
) \

899 (
ROW
Ë
	`ov§ec_√tÊow_fú°
(
IDL
); \

900 (
ROW
); \

901 (
ROW
Ë
	`ov§ec_√tÊow_√xt
(ROW))

	)

902 
	#OVSREC_NETFLOW_FOR_EACH_SAFE
(
ROW
, 
NEXT
, 
IDL
) \

903 (
ROW
Ë
	`ov§ec_√tÊow_fú°
(
IDL
); \

904 (
ROW
Ë? ((
NEXT
Ë
	`ov§ec_√tÊow_√xt
(ROW), 1) : 0; \

905 (
ROW
Ë(
NEXT
))

	)

907 
ov§ec_√tÊow_öô
(
ov§ec_√tÊow
 *);

908 
ov§ec_√tÊow_dñëe
(c⁄° 
ov§ec_√tÊow
 *);

909 
ov§ec_√tÊow
 *
ov§ec_√tÊow_ö£π
(
ovsdb_idl_txn
 *);

911 
ov§ec_√tÊow_vîify_a˘ive_timeout
(c⁄° 
ov§ec_√tÊow
 *);

912 
ov§ec_√tÊow_vîify_add_id_to_öãrÁ˚
(c⁄° 
ov§ec_√tÊow
 *);

913 
ov§ec_√tÊow_vîify_ígöe_id
(c⁄° 
ov§ec_√tÊow
 *);

914 
ov§ec_√tÊow_vîify_ígöe_ty≥
(c⁄° 
ov§ec_√tÊow
 *);

915 
ov§ec_√tÊow_vîify_exã∫Æ_ids
(c⁄° 
ov§ec_√tÊow
 *);

916 
ov§ec_√tÊow_vîify_èrgës
(c⁄° 
ov§ec_√tÊow
 *);

921 c⁄° 
ovsdb_d©um
 *
ov§ec_√tÊow_gë_a˘ive_timeout
(c⁄° 
ov§ec_√tÊow
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

922 c⁄° 
ovsdb_d©um
 *
ov§ec_√tÊow_gë_add_id_to_öãrÁ˚
(c⁄° 
ov§ec_√tÊow
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

923 c⁄° 
ovsdb_d©um
 *
ov§ec_√tÊow_gë_ígöe_id
(c⁄° 
ov§ec_√tÊow
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

924 c⁄° 
ovsdb_d©um
 *
ov§ec_√tÊow_gë_ígöe_ty≥
(c⁄° 
ov§ec_√tÊow
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

925 c⁄° 
ovsdb_d©um
 *
ov§ec_√tÊow_gë_exã∫Æ_ids
(c⁄° 
ov§ec_√tÊow
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

926 c⁄° 
ovsdb_d©um
 *
ov§ec_√tÊow_gë_èrgës
(c⁄° 
ov§ec_√tÊow
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

928 
ov§ec_√tÊow_£t_a˘ive_timeout
(c⁄° 
ov§ec_√tÊow
 *, 
öt64_t
 
a˘ive_timeout
);

929 
ov§ec_√tÊow_£t_add_id_to_öãrÁ˚
(c⁄° 
ov§ec_√tÊow
 *, 
boﬁ
 
add_id_to_öãrÁ˚
);

930 
ov§ec_√tÊow_£t_ígöe_id
(c⁄° 
ov§ec_√tÊow
 *, c⁄° 
öt64_t
 *
ígöe_id
, 
size_t
 
n_ígöe_id
);

931 
ov§ec_√tÊow_£t_ígöe_ty≥
(c⁄° 
ov§ec_√tÊow
 *, c⁄° 
öt64_t
 *
ígöe_ty≥
, 
size_t
 
n_ígöe_ty≥
);

932 
ov§ec_√tÊow_£t_exã∫Æ_ids
(c⁄° 
ov§ec_√tÊow
 *, c⁄° 
sm≠
 *);

933 
ov§ec_√tÊow_£t_èrgës
(c⁄° 
ov§ec_√tÊow
 *, **
èrgës
, 
size_t
 
n_èrgës
);

937 
	sov§ec_›í_vswôch
 {

938 
ovsdb_idl_row
 
	mhódî_
;

941 
ov§ec_bridge
 **
	mbridges
;

942 
size_t
 
	mn_bridges
;

945 
öt64_t
 
	mcur_cfg
;

948 *
	mdb_vîsi⁄
;

951 
sm≠
 
	mexã∫Æ_ids
;

954 
ov§ec_m™agî
 **
	mm™agî_›ti⁄s
;

955 
size_t
 
	mn_m™agî_›ti⁄s
;

958 
öt64_t
 
	m√xt_cfg
;

961 
sm≠
 
	mŸhî_c⁄fig
;

964 *
	movs_vîsi⁄
;

967 
ov§ec_s¶
 *
	ms¶
;

970 
sm≠
 
	m°©i°ics
;

973 *
	msy°em_ty≥
;

976 *
	msy°em_vîsi⁄
;

980 
	mOVSREC_OPEN_VSWITCH_COL_BRIDGES
,

981 
	mOVSREC_OPEN_VSWITCH_COL_CUR_CFG
,

982 
	mOVSREC_OPEN_VSWITCH_COL_DB_VERSION
,

983 
	mOVSREC_OPEN_VSWITCH_COL_EXTERNAL_IDS
,

984 
	mOVSREC_OPEN_VSWITCH_COL_MANAGER_OPTIONS
,

985 
	mOVSREC_OPEN_VSWITCH_COL_NEXT_CFG
,

986 
	mOVSREC_OPEN_VSWITCH_COL_OTHER_CONFIG
,

987 
	mOVSREC_OPEN_VSWITCH_COL_OVS_VERSION
,

988 
	mOVSREC_OPEN_VSWITCH_COL_SSL
,

989 
	mOVSREC_OPEN_VSWITCH_COL_STATISTICS
,

990 
	mOVSREC_OPEN_VSWITCH_COL_SYSTEM_TYPE
,

991 
	mOVSREC_OPEN_VSWITCH_COL_SYSTEM_VERSION
,

992 
	mOVSREC_OPEN_VSWITCH_N_COLUMNS


995 
	#ov§ec_›í_vswôch_cﬁ_bridges
 (
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_BRIDGES
])

	)

996 
	#ov§ec_›í_vswôch_cﬁ_°©i°ics
 (
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_STATISTICS
])

	)

997 
	#ov§ec_›í_vswôch_cﬁ_db_vîsi⁄
 (
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_DB_VERSION
])

	)

998 
	#ov§ec_›í_vswôch_cﬁ_√xt_cfg
 (
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_NEXT_CFG
])

	)

999 
	#ov§ec_›í_vswôch_cﬁ_ovs_vîsi⁄
 (
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_OVS_VERSION
])

	)

1000 
	#ov§ec_›í_vswôch_cﬁ_Ÿhî_c⁄fig
 (
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_OTHER_CONFIG
])

	)

1001 
	#ov§ec_›í_vswôch_cﬁ_s¶
 (
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_SSL
])

	)

1002 
	#ov§ec_›í_vswôch_cﬁ_m™agî_›ti⁄s
 (
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_MANAGER_OPTIONS
])

	)

1003 
	#ov§ec_›í_vswôch_cﬁ_exã∫Æ_ids
 (
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_EXTERNAL_IDS
])

	)

1004 
	#ov§ec_›í_vswôch_cﬁ_sy°em_vîsi⁄
 (
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_SYSTEM_VERSION
])

	)

1005 
	#ov§ec_›í_vswôch_cﬁ_cur_cfg
 (
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_CUR_CFG
])

	)

1006 
	#ov§ec_›í_vswôch_cﬁ_sy°em_ty≥
 (
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_COL_SYSTEM_TYPE
])

	)

1008 
ovsdb_idl_cﬁumn
 
ov§ec_›í_vswôch_cﬁumns
[
OVSREC_OPEN_VSWITCH_N_COLUMNS
];

1010 c⁄° 
ov§ec_›í_vswôch
 *
ov§ec_›í_vswôch_fú°
(c⁄° 
ovsdb_idl
 *);

1011 c⁄° 
ov§ec_›í_vswôch
 *
ov§ec_›í_vswôch_√xt
(const ovsrec_open_vswitch *);

1012 
	#OVSREC_OPEN_VSWITCH_FOR_EACH
(
ROW
, 
IDL
) \

1013 (
ROW
Ë
	`ov§ec_›í_vswôch_fú°
(
IDL
); \

1014 (
ROW
); \

1015 (
ROW
Ë
	`ov§ec_›í_vswôch_√xt
(ROW))

	)

1016 
	#OVSREC_OPEN_VSWITCH_FOR_EACH_SAFE
(
ROW
, 
NEXT
, 
IDL
) \

1017 (
ROW
Ë
	`ov§ec_›í_vswôch_fú°
(
IDL
); \

1018 (
ROW
Ë? ((
NEXT
Ë
	`ov§ec_›í_vswôch_√xt
(ROW), 1) : 0; \

1019 (
ROW
Ë(
NEXT
))

	)

1021 
ov§ec_›í_vswôch_öô
(
ov§ec_›í_vswôch
 *);

1022 
ov§ec_›í_vswôch_dñëe
(c⁄° 
ov§ec_›í_vswôch
 *);

1023 
ov§ec_›í_vswôch
 *
ov§ec_›í_vswôch_ö£π
(
ovsdb_idl_txn
 *);

1025 
ov§ec_›í_vswôch_vîify_bridges
(c⁄° 
ov§ec_›í_vswôch
 *);

1026 
ov§ec_›í_vswôch_vîify_cur_cfg
(c⁄° 
ov§ec_›í_vswôch
 *);

1027 
ov§ec_›í_vswôch_vîify_db_vîsi⁄
(c⁄° 
ov§ec_›í_vswôch
 *);

1028 
ov§ec_›í_vswôch_vîify_exã∫Æ_ids
(c⁄° 
ov§ec_›í_vswôch
 *);

1029 
ov§ec_›í_vswôch_vîify_m™agî_›ti⁄s
(c⁄° 
ov§ec_›í_vswôch
 *);

1030 
ov§ec_›í_vswôch_vîify_√xt_cfg
(c⁄° 
ov§ec_›í_vswôch
 *);

1031 
ov§ec_›í_vswôch_vîify_Ÿhî_c⁄fig
(c⁄° 
ov§ec_›í_vswôch
 *);

1032 
ov§ec_›í_vswôch_vîify_ovs_vîsi⁄
(c⁄° 
ov§ec_›í_vswôch
 *);

1033 
ov§ec_›í_vswôch_vîify_s¶
(c⁄° 
ov§ec_›í_vswôch
 *);

1034 
ov§ec_›í_vswôch_vîify_°©i°ics
(c⁄° 
ov§ec_›í_vswôch
 *);

1035 
ov§ec_›í_vswôch_vîify_sy°em_ty≥
(c⁄° 
ov§ec_›í_vswôch
 *);

1036 
ov§ec_›í_vswôch_vîify_sy°em_vîsi⁄
(c⁄° 
ov§ec_›í_vswôch
 *);

1041 c⁄° 
ovsdb_d©um
 *
ov§ec_›í_vswôch_gë_bridges
(c⁄° 
ov§ec_›í_vswôch
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1042 c⁄° 
ovsdb_d©um
 *
ov§ec_›í_vswôch_gë_cur_cfg
(c⁄° 
ov§ec_›í_vswôch
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1043 c⁄° 
ovsdb_d©um
 *
ov§ec_›í_vswôch_gë_db_vîsi⁄
(c⁄° 
ov§ec_›í_vswôch
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1044 c⁄° 
ovsdb_d©um
 *
ov§ec_›í_vswôch_gë_exã∫Æ_ids
(c⁄° 
ov§ec_›í_vswôch
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

1045 c⁄° 
ovsdb_d©um
 *
ov§ec_›í_vswôch_gë_m™agî_›ti⁄s
(c⁄° 
ov§ec_›í_vswôch
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1046 c⁄° 
ovsdb_d©um
 *
ov§ec_›í_vswôch_gë_√xt_cfg
(c⁄° 
ov§ec_›í_vswôch
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1047 c⁄° 
ovsdb_d©um
 *
ov§ec_›í_vswôch_gë_Ÿhî_c⁄fig
(c⁄° 
ov§ec_›í_vswôch
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

1048 c⁄° 
ovsdb_d©um
 *
ov§ec_›í_vswôch_gë_ovs_vîsi⁄
(c⁄° 
ov§ec_›í_vswôch
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1049 c⁄° 
ovsdb_d©um
 *
ov§ec_›í_vswôch_gë_s¶
(c⁄° 
ov§ec_›í_vswôch
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1050 c⁄° 
ovsdb_d©um
 *
ov§ec_›í_vswôch_gë_°©i°ics
(c⁄° 
ov§ec_›í_vswôch
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

1051 c⁄° 
ovsdb_d©um
 *
ov§ec_›í_vswôch_gë_sy°em_ty≥
(c⁄° 
ov§ec_›í_vswôch
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1052 c⁄° 
ovsdb_d©um
 *
ov§ec_›í_vswôch_gë_sy°em_vîsi⁄
(c⁄° 
ov§ec_›í_vswôch
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1054 
ov§ec_›í_vswôch_£t_bridges
(c⁄° 
ov§ec_›í_vswôch
 *, 
ov§ec_bridge
 **
bridges
, 
size_t
 
n_bridges
);

1055 
ov§ec_›í_vswôch_£t_cur_cfg
(c⁄° 
ov§ec_›í_vswôch
 *, 
öt64_t
 
cur_cfg
);

1056 
ov§ec_›í_vswôch_£t_db_vîsi⁄
(c⁄° 
ov§ec_›í_vswôch
 *, c⁄° *
db_vîsi⁄
);

1057 
ov§ec_›í_vswôch_£t_exã∫Æ_ids
(c⁄° 
ov§ec_›í_vswôch
 *, c⁄° 
sm≠
 *);

1058 
ov§ec_›í_vswôch_£t_m™agî_›ti⁄s
(c⁄° 
ov§ec_›í_vswôch
 *, 
ov§ec_m™agî
 **
m™agî_›ti⁄s
, 
size_t
 
n_m™agî_›ti⁄s
);

1059 
ov§ec_›í_vswôch_£t_√xt_cfg
(c⁄° 
ov§ec_›í_vswôch
 *, 
öt64_t
 
√xt_cfg
);

1060 
ov§ec_›í_vswôch_£t_Ÿhî_c⁄fig
(c⁄° 
ov§ec_›í_vswôch
 *, c⁄° 
sm≠
 *);

1061 
ov§ec_›í_vswôch_£t_ovs_vîsi⁄
(c⁄° 
ov§ec_›í_vswôch
 *, c⁄° *
ovs_vîsi⁄
);

1062 
ov§ec_›í_vswôch_£t_s¶
(c⁄° 
ov§ec_›í_vswôch
 *, c⁄° 
ov§ec_s¶
 *
s¶
);

1063 
ov§ec_›í_vswôch_£t_°©i°ics
(c⁄° 
ov§ec_›í_vswôch
 *, c⁄° 
sm≠
 *);

1064 
ov§ec_›í_vswôch_£t_sy°em_ty≥
(c⁄° 
ov§ec_›í_vswôch
 *, c⁄° *
sy°em_ty≥
);

1065 
ov§ec_›í_vswôch_£t_sy°em_vîsi⁄
(c⁄° 
ov§ec_›í_vswôch
 *, c⁄° *
sy°em_vîsi⁄
);

1069 
	sov§ec_p‹t
 {

1070 
ovsdb_idl_row
 
	mhódî_
;

1073 
öt64_t
 
	mb⁄d_downdñay
;

1076 
boﬁ
 
	mb⁄d_Áke_iÁ˚
;

1079 *
	mb⁄d_mode
;

1082 
öt64_t
 
	mb⁄d_updñay
;

1085 
sm≠
 
	mexã∫Æ_ids
;

1088 
boﬁ
 
	mÁke_bridge
;

1091 
ov§ec_öãrÁ˚
 **
	möãrÁ˚s
;

1092 
size_t
 
	mn_öãrÁ˚s
;

1095 *
	mœ˝
;

1098 *
	mmac
;

1101 *
	m«me
;

1104 
sm≠
 
	mŸhî_c⁄fig
;

1107 
ov§ec_qos
 *
	mqos
;

1110 **
	mkey_°©i°ics
;

1111 
öt64_t
 *
	mvÆue_°©i°ics
;

1112 
size_t
 
	mn_°©i°ics
;

1115 
sm≠
 
	m°©us
;

1118 
öt64_t
 *
	mèg
;

1119 
size_t
 
	mn_èg
;

1122 
öt64_t
 *
	måunks
;

1123 
size_t
 
	mn_åunks
;

1126 *
	mvœn_mode
;

1130 
	mOVSREC_PORT_COL_BOND_DOWNDELAY
,

1131 
	mOVSREC_PORT_COL_BOND_FAKE_IFACE
,

1132 
	mOVSREC_PORT_COL_BOND_MODE
,

1133 
	mOVSREC_PORT_COL_BOND_UPDELAY
,

1134 
	mOVSREC_PORT_COL_EXTERNAL_IDS
,

1135 
	mOVSREC_PORT_COL_FAKE_BRIDGE
,

1136 
	mOVSREC_PORT_COL_INTERFACES
,

1137 
	mOVSREC_PORT_COL_LACP
,

1138 
	mOVSREC_PORT_COL_MAC
,

1139 
	mOVSREC_PORT_COL_NAME
,

1140 
	mOVSREC_PORT_COL_OTHER_CONFIG
,

1141 
	mOVSREC_PORT_COL_QOS
,

1142 
	mOVSREC_PORT_COL_STATISTICS
,

1143 
	mOVSREC_PORT_COL_STATUS
,

1144 
	mOVSREC_PORT_COL_TAG
,

1145 
	mOVSREC_PORT_COL_TRUNKS
,

1146 
	mOVSREC_PORT_COL_VLAN_MODE
,

1147 
	mOVSREC_PORT_N_COLUMNS


1150 
	#ov§ec_p‹t_cﬁ_°©us
 (
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_STATUS
])

	)

1151 
	#ov§ec_p‹t_cﬁ_°©i°ics
 (
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_STATISTICS
])

	)

1152 
	#ov§ec_p‹t_cﬁ_qos
 (
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_QOS
])

	)

1153 
	#ov§ec_p‹t_cﬁ_«me
 (
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_NAME
])

	)

1154 
	#ov§ec_p‹t_cﬁ_b⁄d_downdñay
 (
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_BOND_DOWNDELAY
])

	)

1155 
	#ov§ec_p‹t_cﬁ_öãrÁ˚s
 (
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_INTERFACES
])

	)

1156 
	#ov§ec_p‹t_cﬁ_Ÿhî_c⁄fig
 (
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_OTHER_CONFIG
])

	)

1157 
	#ov§ec_p‹t_cﬁ_b⁄d_Áke_iÁ˚
 (
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_BOND_FAKE_IFACE
])

	)

1158 
	#ov§ec_p‹t_cﬁ_œ˝
 (
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_LACP
])

	)

1159 
	#ov§ec_p‹t_cﬁ_mac
 (
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_MAC
])

	)

1160 
	#ov§ec_p‹t_cﬁ_èg
 (
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_TAG
])

	)

1161 
	#ov§ec_p‹t_cﬁ_åunks
 (
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_TRUNKS
])

	)

1162 
	#ov§ec_p‹t_cﬁ_vœn_mode
 (
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_VLAN_MODE
])

	)

1163 
	#ov§ec_p‹t_cﬁ_exã∫Æ_ids
 (
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_EXTERNAL_IDS
])

	)

1164 
	#ov§ec_p‹t_cﬁ_Áke_bridge
 (
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_FAKE_BRIDGE
])

	)

1165 
	#ov§ec_p‹t_cﬁ_b⁄d_updñay
 (
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_BOND_UPDELAY
])

	)

1166 
	#ov§ec_p‹t_cﬁ_b⁄d_mode
 (
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_COL_BOND_MODE
])

	)

1168 
ovsdb_idl_cﬁumn
 
ov§ec_p‹t_cﬁumns
[
OVSREC_PORT_N_COLUMNS
];

1170 c⁄° 
ov§ec_p‹t
 *
ov§ec_p‹t_fú°
(c⁄° 
ovsdb_idl
 *);

1171 c⁄° 
ov§ec_p‹t
 *
ov§ec_p‹t_√xt
(const ovsrec_port *);

1172 
	#OVSREC_PORT_FOR_EACH
(
ROW
, 
IDL
) \

1173 (
ROW
Ë
	`ov§ec_p‹t_fú°
(
IDL
); \

1174 (
ROW
); \

1175 (
ROW
Ë
	`ov§ec_p‹t_√xt
(ROW))

	)

1176 
	#OVSREC_PORT_FOR_EACH_SAFE
(
ROW
, 
NEXT
, 
IDL
) \

1177 (
ROW
Ë
	`ov§ec_p‹t_fú°
(
IDL
); \

1178 (
ROW
Ë? ((
NEXT
Ë
	`ov§ec_p‹t_√xt
(ROW), 1) : 0; \

1179 (
ROW
Ë(
NEXT
))

	)

1181 
ov§ec_p‹t_öô
(
ov§ec_p‹t
 *);

1182 
ov§ec_p‹t_dñëe
(c⁄° 
ov§ec_p‹t
 *);

1183 
ov§ec_p‹t
 *
ov§ec_p‹t_ö£π
(
ovsdb_idl_txn
 *);

1185 
ov§ec_p‹t_vîify_b⁄d_downdñay
(c⁄° 
ov§ec_p‹t
 *);

1186 
ov§ec_p‹t_vîify_b⁄d_Áke_iÁ˚
(c⁄° 
ov§ec_p‹t
 *);

1187 
ov§ec_p‹t_vîify_b⁄d_mode
(c⁄° 
ov§ec_p‹t
 *);

1188 
ov§ec_p‹t_vîify_b⁄d_updñay
(c⁄° 
ov§ec_p‹t
 *);

1189 
ov§ec_p‹t_vîify_exã∫Æ_ids
(c⁄° 
ov§ec_p‹t
 *);

1190 
ov§ec_p‹t_vîify_Áke_bridge
(c⁄° 
ov§ec_p‹t
 *);

1191 
ov§ec_p‹t_vîify_öãrÁ˚s
(c⁄° 
ov§ec_p‹t
 *);

1192 
ov§ec_p‹t_vîify_œ˝
(c⁄° 
ov§ec_p‹t
 *);

1193 
ov§ec_p‹t_vîify_mac
(c⁄° 
ov§ec_p‹t
 *);

1194 
ov§ec_p‹t_vîify_«me
(c⁄° 
ov§ec_p‹t
 *);

1195 
ov§ec_p‹t_vîify_Ÿhî_c⁄fig
(c⁄° 
ov§ec_p‹t
 *);

1196 
ov§ec_p‹t_vîify_qos
(c⁄° 
ov§ec_p‹t
 *);

1197 
ov§ec_p‹t_vîify_°©i°ics
(c⁄° 
ov§ec_p‹t
 *);

1198 
ov§ec_p‹t_vîify_°©us
(c⁄° 
ov§ec_p‹t
 *);

1199 
ov§ec_p‹t_vîify_èg
(c⁄° 
ov§ec_p‹t
 *);

1200 
ov§ec_p‹t_vîify_åunks
(c⁄° 
ov§ec_p‹t
 *);

1201 
ov§ec_p‹t_vîify_vœn_mode
(c⁄° 
ov§ec_p‹t
 *);

1206 c⁄° 
ovsdb_d©um
 *
ov§ec_p‹t_gë_b⁄d_downdñay
(c⁄° 
ov§ec_p‹t
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1207 c⁄° 
ovsdb_d©um
 *
ov§ec_p‹t_gë_b⁄d_Áke_iÁ˚
(c⁄° 
ov§ec_p‹t
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1208 c⁄° 
ovsdb_d©um
 *
ov§ec_p‹t_gë_b⁄d_mode
(c⁄° 
ov§ec_p‹t
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1209 c⁄° 
ovsdb_d©um
 *
ov§ec_p‹t_gë_b⁄d_updñay
(c⁄° 
ov§ec_p‹t
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1210 c⁄° 
ovsdb_d©um
 *
ov§ec_p‹t_gë_exã∫Æ_ids
(c⁄° 
ov§ec_p‹t
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

1211 c⁄° 
ovsdb_d©um
 *
ov§ec_p‹t_gë_Áke_bridge
(c⁄° 
ov§ec_p‹t
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1212 c⁄° 
ovsdb_d©um
 *
ov§ec_p‹t_gë_öãrÁ˚s
(c⁄° 
ov§ec_p‹t
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1213 c⁄° 
ovsdb_d©um
 *
ov§ec_p‹t_gë_œ˝
(c⁄° 
ov§ec_p‹t
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1214 c⁄° 
ovsdb_d©um
 *
ov§ec_p‹t_gë_mac
(c⁄° 
ov§ec_p‹t
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1215 c⁄° 
ovsdb_d©um
 *
ov§ec_p‹t_gë_«me
(c⁄° 
ov§ec_p‹t
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1216 c⁄° 
ovsdb_d©um
 *
ov§ec_p‹t_gë_Ÿhî_c⁄fig
(c⁄° 
ov§ec_p‹t
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

1217 c⁄° 
ovsdb_d©um
 *
ov§ec_p‹t_gë_qos
(c⁄° 
ov§ec_p‹t
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1218 c⁄° 
ovsdb_d©um
 *
ov§ec_p‹t_gë_°©i°ics
(c⁄° 
ov§ec_p‹t
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

1219 c⁄° 
ovsdb_d©um
 *
ov§ec_p‹t_gë_°©us
(c⁄° 
ov§ec_p‹t
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

1220 c⁄° 
ovsdb_d©um
 *
ov§ec_p‹t_gë_èg
(c⁄° 
ov§ec_p‹t
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1221 c⁄° 
ovsdb_d©um
 *
ov§ec_p‹t_gë_åunks
(c⁄° 
ov§ec_p‹t
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1222 c⁄° 
ovsdb_d©um
 *
ov§ec_p‹t_gë_vœn_mode
(c⁄° 
ov§ec_p‹t
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1224 
ov§ec_p‹t_£t_b⁄d_downdñay
(c⁄° 
ov§ec_p‹t
 *, 
öt64_t
 
b⁄d_downdñay
);

1225 
ov§ec_p‹t_£t_b⁄d_Áke_iÁ˚
(c⁄° 
ov§ec_p‹t
 *, 
boﬁ
 
b⁄d_Áke_iÁ˚
);

1226 
ov§ec_p‹t_£t_b⁄d_mode
(c⁄° 
ov§ec_p‹t
 *, c⁄° *
b⁄d_mode
);

1227 
ov§ec_p‹t_£t_b⁄d_updñay
(c⁄° 
ov§ec_p‹t
 *, 
öt64_t
 
b⁄d_updñay
);

1228 
ov§ec_p‹t_£t_exã∫Æ_ids
(c⁄° 
ov§ec_p‹t
 *, c⁄° 
sm≠
 *);

1229 
ov§ec_p‹t_£t_Áke_bridge
(c⁄° 
ov§ec_p‹t
 *, 
boﬁ
 
Áke_bridge
);

1230 
ov§ec_p‹t_£t_öãrÁ˚s
(c⁄° 
ov§ec_p‹t
 *, 
ov§ec_öãrÁ˚
 **
öãrÁ˚s
, 
size_t
 
n_öãrÁ˚s
);

1231 
ov§ec_p‹t_£t_œ˝
(c⁄° 
ov§ec_p‹t
 *, c⁄° *
œ˝
);

1232 
ov§ec_p‹t_£t_mac
(c⁄° 
ov§ec_p‹t
 *, c⁄° *
mac
);

1233 
ov§ec_p‹t_£t_«me
(c⁄° 
ov§ec_p‹t
 *, c⁄° *
«me
);

1234 
ov§ec_p‹t_£t_Ÿhî_c⁄fig
(c⁄° 
ov§ec_p‹t
 *, c⁄° 
sm≠
 *);

1235 
ov§ec_p‹t_£t_qos
(c⁄° 
ov§ec_p‹t
 *, c⁄° 
ov§ec_qos
 *
qos
);

1236 
ov§ec_p‹t_£t_°©i°ics
(c⁄° 
ov§ec_p‹t
 *, **
key_°©i°ics
, c⁄° 
öt64_t
 *
vÆue_°©i°ics
, 
size_t
 
n_°©i°ics
);

1237 
ov§ec_p‹t_£t_°©us
(c⁄° 
ov§ec_p‹t
 *, c⁄° 
sm≠
 *);

1238 
ov§ec_p‹t_£t_èg
(c⁄° 
ov§ec_p‹t
 *, c⁄° 
öt64_t
 *
èg
, 
size_t
 
n_èg
);

1239 
ov§ec_p‹t_£t_åunks
(c⁄° 
ov§ec_p‹t
 *, c⁄° 
öt64_t
 *
åunks
, 
size_t
 
n_åunks
);

1240 
ov§ec_p‹t_£t_vœn_mode
(c⁄° 
ov§ec_p‹t
 *, c⁄° *
vœn_mode
);

1244 
	sov§ec_qos
 {

1245 
ovsdb_idl_row
 
	mhódî_
;

1248 
sm≠
 
	mexã∫Æ_ids
;

1251 
sm≠
 
	mŸhî_c⁄fig
;

1254 
öt64_t
 *
	mkey_queues
;

1255 
ov§ec_queue
 **
	mvÆue_queues
;

1256 
size_t
 
	mn_queues
;

1259 *
	mty≥
;

1263 
	mOVSREC_QOS_COL_EXTERNAL_IDS
,

1264 
	mOVSREC_QOS_COL_OTHER_CONFIG
,

1265 
	mOVSREC_QOS_COL_QUEUES
,

1266 
	mOVSREC_QOS_COL_TYPE
,

1267 
	mOVSREC_QOS_N_COLUMNS


1270 
	#ov§ec_qos_cﬁ_exã∫Æ_ids
 (
ov§ec_qos_cﬁumns
[
OVSREC_QOS_COL_EXTERNAL_IDS
])

	)

1271 
	#ov§ec_qos_cﬁ_Ÿhî_c⁄fig
 (
ov§ec_qos_cﬁumns
[
OVSREC_QOS_COL_OTHER_CONFIG
])

	)

1272 
	#ov§ec_qos_cﬁ_ty≥
 (
ov§ec_qos_cﬁumns
[
OVSREC_QOS_COL_TYPE
])

	)

1273 
	#ov§ec_qos_cﬁ_queues
 (
ov§ec_qos_cﬁumns
[
OVSREC_QOS_COL_QUEUES
])

	)

1275 
ovsdb_idl_cﬁumn
 
ov§ec_qos_cﬁumns
[
OVSREC_QOS_N_COLUMNS
];

1277 c⁄° 
ov§ec_qos
 *
ov§ec_qos_fú°
(c⁄° 
ovsdb_idl
 *);

1278 c⁄° 
ov§ec_qos
 *
ov§ec_qos_√xt
(const ovsrec_qos *);

1279 
	#OVSREC_QOS_FOR_EACH
(
ROW
, 
IDL
) \

1280 (
ROW
Ë
	`ov§ec_qos_fú°
(
IDL
); \

1281 (
ROW
); \

1282 (
ROW
Ë
	`ov§ec_qos_√xt
(ROW))

	)

1283 
	#OVSREC_QOS_FOR_EACH_SAFE
(
ROW
, 
NEXT
, 
IDL
) \

1284 (
ROW
Ë
	`ov§ec_qos_fú°
(
IDL
); \

1285 (
ROW
Ë? ((
NEXT
Ë
	`ov§ec_qos_√xt
(ROW), 1) : 0; \

1286 (
ROW
Ë(
NEXT
))

	)

1288 
ov§ec_qos_öô
(
ov§ec_qos
 *);

1289 
ov§ec_qos_dñëe
(c⁄° 
ov§ec_qos
 *);

1290 
ov§ec_qos
 *
ov§ec_qos_ö£π
(
ovsdb_idl_txn
 *);

1292 
ov§ec_qos_vîify_exã∫Æ_ids
(c⁄° 
ov§ec_qos
 *);

1293 
ov§ec_qos_vîify_Ÿhî_c⁄fig
(c⁄° 
ov§ec_qos
 *);

1294 
ov§ec_qos_vîify_queues
(c⁄° 
ov§ec_qos
 *);

1295 
ov§ec_qos_vîify_ty≥
(c⁄° 
ov§ec_qos
 *);

1300 c⁄° 
ovsdb_d©um
 *
ov§ec_qos_gë_exã∫Æ_ids
(c⁄° 
ov§ec_qos
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

1301 c⁄° 
ovsdb_d©um
 *
ov§ec_qos_gë_Ÿhî_c⁄fig
(c⁄° 
ov§ec_qos
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

1302 c⁄° 
ovsdb_d©um
 *
ov§ec_qos_gë_queues
(c⁄° 
ov§ec_qos
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

1303 c⁄° 
ovsdb_d©um
 *
ov§ec_qos_gë_ty≥
(c⁄° 
ov§ec_qos
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1305 
ov§ec_qos_£t_exã∫Æ_ids
(c⁄° 
ov§ec_qos
 *, c⁄° 
sm≠
 *);

1306 
ov§ec_qos_£t_Ÿhî_c⁄fig
(c⁄° 
ov§ec_qos
 *, c⁄° 
sm≠
 *);

1307 
ov§ec_qos_£t_queues
(c⁄° 
ov§ec_qos
 *, c⁄° 
öt64_t
 *
key_queues
, 
ov§ec_queue
 **
vÆue_queues
, 
size_t
 
n_queues
);

1308 
ov§ec_qos_£t_ty≥
(c⁄° 
ov§ec_qos
 *, c⁄° *
ty≥
);

1312 
	sov§ec_queue
 {

1313 
ovsdb_idl_row
 
	mhódî_
;

1316 
öt64_t
 *
	mds˝
;

1317 
size_t
 
	mn_ds˝
;

1320 
sm≠
 
	mexã∫Æ_ids
;

1323 
sm≠
 
	mŸhî_c⁄fig
;

1327 
	mOVSREC_QUEUE_COL_DSCP
,

1328 
	mOVSREC_QUEUE_COL_EXTERNAL_IDS
,

1329 
	mOVSREC_QUEUE_COL_OTHER_CONFIG
,

1330 
	mOVSREC_QUEUE_N_COLUMNS


1333 
	#ov§ec_queue_cﬁ_exã∫Æ_ids
 (
ov§ec_queue_cﬁumns
[
OVSREC_QUEUE_COL_EXTERNAL_IDS
])

	)

1334 
	#ov§ec_queue_cﬁ_Ÿhî_c⁄fig
 (
ov§ec_queue_cﬁumns
[
OVSREC_QUEUE_COL_OTHER_CONFIG
])

	)

1335 
	#ov§ec_queue_cﬁ_ds˝
 (
ov§ec_queue_cﬁumns
[
OVSREC_QUEUE_COL_DSCP
])

	)

1337 
ovsdb_idl_cﬁumn
 
ov§ec_queue_cﬁumns
[
OVSREC_QUEUE_N_COLUMNS
];

1339 c⁄° 
ov§ec_queue
 *
ov§ec_queue_fú°
(c⁄° 
ovsdb_idl
 *);

1340 c⁄° 
ov§ec_queue
 *
ov§ec_queue_√xt
(const ovsrec_queue *);

1341 
	#OVSREC_QUEUE_FOR_EACH
(
ROW
, 
IDL
) \

1342 (
ROW
Ë
	`ov§ec_queue_fú°
(
IDL
); \

1343 (
ROW
); \

1344 (
ROW
Ë
	`ov§ec_queue_√xt
(ROW))

	)

1345 
	#OVSREC_QUEUE_FOR_EACH_SAFE
(
ROW
, 
NEXT
, 
IDL
) \

1346 (
ROW
Ë
	`ov§ec_queue_fú°
(
IDL
); \

1347 (
ROW
Ë? ((
NEXT
Ë
	`ov§ec_queue_√xt
(ROW), 1) : 0; \

1348 (
ROW
Ë(
NEXT
))

	)

1350 
ov§ec_queue_öô
(
ov§ec_queue
 *);

1351 
ov§ec_queue_dñëe
(c⁄° 
ov§ec_queue
 *);

1352 
ov§ec_queue
 *
ov§ec_queue_ö£π
(
ovsdb_idl_txn
 *);

1354 
ov§ec_queue_vîify_ds˝
(c⁄° 
ov§ec_queue
 *);

1355 
ov§ec_queue_vîify_exã∫Æ_ids
(c⁄° 
ov§ec_queue
 *);

1356 
ov§ec_queue_vîify_Ÿhî_c⁄fig
(c⁄° 
ov§ec_queue
 *);

1361 c⁄° 
ovsdb_d©um
 *
ov§ec_queue_gë_ds˝
(c⁄° 
ov§ec_queue
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1362 c⁄° 
ovsdb_d©um
 *
ov§ec_queue_gë_exã∫Æ_ids
(c⁄° 
ov§ec_queue
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

1363 c⁄° 
ovsdb_d©um
 *
ov§ec_queue_gë_Ÿhî_c⁄fig
(c⁄° 
ov§ec_queue
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

1365 
ov§ec_queue_£t_ds˝
(c⁄° 
ov§ec_queue
 *, c⁄° 
öt64_t
 *
ds˝
, 
size_t
 
n_ds˝
);

1366 
ov§ec_queue_£t_exã∫Æ_ids
(c⁄° 
ov§ec_queue
 *, c⁄° 
sm≠
 *);

1367 
ov§ec_queue_£t_Ÿhî_c⁄fig
(c⁄° 
ov§ec_queue
 *, c⁄° 
sm≠
 *);

1371 
	sov§ec_s¶
 {

1372 
ovsdb_idl_row
 
	mhódî_
;

1375 
boﬁ
 
	mboŸ°øp_ˇ_˚π
;

1378 *
	mˇ_˚π
;

1381 *
	m˚πifiˇã
;

1384 
sm≠
 
	mexã∫Æ_ids
;

1387 *
	m¥iv©e_key
;

1391 
	mOVSREC_SSL_COL_BOOTSTRAP_CA_CERT
,

1392 
	mOVSREC_SSL_COL_CA_CERT
,

1393 
	mOVSREC_SSL_COL_CERTIFICATE
,

1394 
	mOVSREC_SSL_COL_EXTERNAL_IDS
,

1395 
	mOVSREC_SSL_COL_PRIVATE_KEY
,

1396 
	mOVSREC_SSL_N_COLUMNS


1399 
	#ov§ec_s¶_cﬁ_ˇ_˚π
 (
ov§ec_s¶_cﬁumns
[
OVSREC_SSL_COL_CA_CERT
])

	)

1400 
	#ov§ec_s¶_cﬁ_¥iv©e_key
 (
ov§ec_s¶_cﬁumns
[
OVSREC_SSL_COL_PRIVATE_KEY
])

	)

1401 
	#ov§ec_s¶_cﬁ_boŸ°øp_ˇ_˚π
 (
ov§ec_s¶_cﬁumns
[
OVSREC_SSL_COL_BOOTSTRAP_CA_CERT
])

	)

1402 
	#ov§ec_s¶_cﬁ_exã∫Æ_ids
 (
ov§ec_s¶_cﬁumns
[
OVSREC_SSL_COL_EXTERNAL_IDS
])

	)

1403 
	#ov§ec_s¶_cﬁ_˚πifiˇã
 (
ov§ec_s¶_cﬁumns
[
OVSREC_SSL_COL_CERTIFICATE
])

	)

1405 
ovsdb_idl_cﬁumn
 
ov§ec_s¶_cﬁumns
[
OVSREC_SSL_N_COLUMNS
];

1407 c⁄° 
ov§ec_s¶
 *
ov§ec_s¶_fú°
(c⁄° 
ovsdb_idl
 *);

1408 c⁄° 
ov§ec_s¶
 *
ov§ec_s¶_√xt
(const ovsrec_ssl *);

1409 
	#OVSREC_SSL_FOR_EACH
(
ROW
, 
IDL
) \

1410 (
ROW
Ë
	`ov§ec_s¶_fú°
(
IDL
); \

1411 (
ROW
); \

1412 (
ROW
Ë
	`ov§ec_s¶_√xt
(ROW))

	)

1413 
	#OVSREC_SSL_FOR_EACH_SAFE
(
ROW
, 
NEXT
, 
IDL
) \

1414 (
ROW
Ë
	`ov§ec_s¶_fú°
(
IDL
); \

1415 (
ROW
Ë? ((
NEXT
Ë
	`ov§ec_s¶_√xt
(ROW), 1) : 0; \

1416 (
ROW
Ë(
NEXT
))

	)

1418 
ov§ec_s¶_öô
(
ov§ec_s¶
 *);

1419 
ov§ec_s¶_dñëe
(c⁄° 
ov§ec_s¶
 *);

1420 
ov§ec_s¶
 *
ov§ec_s¶_ö£π
(
ovsdb_idl_txn
 *);

1422 
ov§ec_s¶_vîify_boŸ°øp_ˇ_˚π
(c⁄° 
ov§ec_s¶
 *);

1423 
ov§ec_s¶_vîify_ˇ_˚π
(c⁄° 
ov§ec_s¶
 *);

1424 
ov§ec_s¶_vîify_˚πifiˇã
(c⁄° 
ov§ec_s¶
 *);

1425 
ov§ec_s¶_vîify_exã∫Æ_ids
(c⁄° 
ov§ec_s¶
 *);

1426 
ov§ec_s¶_vîify_¥iv©e_key
(c⁄° 
ov§ec_s¶
 *);

1431 c⁄° 
ovsdb_d©um
 *
ov§ec_s¶_gë_boŸ°øp_ˇ_˚π
(c⁄° 
ov§ec_s¶
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1432 c⁄° 
ovsdb_d©um
 *
ov§ec_s¶_gë_ˇ_˚π
(c⁄° 
ov§ec_s¶
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1433 c⁄° 
ovsdb_d©um
 *
ov§ec_s¶_gë_˚πifiˇã
(c⁄° 
ov§ec_s¶
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1434 c⁄° 
ovsdb_d©um
 *
ov§ec_s¶_gë_exã∫Æ_ids
(c⁄° 
ov§ec_s¶
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

1435 c⁄° 
ovsdb_d©um
 *
ov§ec_s¶_gë_¥iv©e_key
(c⁄° 
ov§ec_s¶
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1437 
ov§ec_s¶_£t_boŸ°øp_ˇ_˚π
(c⁄° 
ov§ec_s¶
 *, 
boﬁ
 
boŸ°øp_ˇ_˚π
);

1438 
ov§ec_s¶_£t_ˇ_˚π
(c⁄° 
ov§ec_s¶
 *, c⁄° *
ˇ_˚π
);

1439 
ov§ec_s¶_£t_˚πifiˇã
(c⁄° 
ov§ec_s¶
 *, c⁄° *
˚πifiˇã
);

1440 
ov§ec_s¶_£t_exã∫Æ_ids
(c⁄° 
ov§ec_s¶
 *, c⁄° 
sm≠
 *);

1441 
ov§ec_s¶_£t_¥iv©e_key
(c⁄° 
ov§ec_s¶
 *, c⁄° *
¥iv©e_key
);

1445 
	sov§ec_sÊow
 {

1446 
ovsdb_idl_row
 
	mhódî_
;

1449 *
	magít
;

1452 
sm≠
 
	mexã∫Æ_ids
;

1455 
öt64_t
 *
	mhódî
;

1456 
size_t
 
	mn_hódî
;

1459 
öt64_t
 *
	mpﬁlög
;

1460 
size_t
 
	mn_pﬁlög
;

1463 
öt64_t
 *
	mßm∂ög
;

1464 
size_t
 
	mn_ßm∂ög
;

1467 **
	mèrgës
;

1468 
size_t
 
	mn_èrgës
;

1472 
	mOVSREC_SFLOW_COL_AGENT
,

1473 
	mOVSREC_SFLOW_COL_EXTERNAL_IDS
,

1474 
	mOVSREC_SFLOW_COL_HEADER
,

1475 
	mOVSREC_SFLOW_COL_POLLING
,

1476 
	mOVSREC_SFLOW_COL_SAMPLING
,

1477 
	mOVSREC_SFLOW_COL_TARGETS
,

1478 
	mOVSREC_SFLOW_N_COLUMNS


1481 
	#ov§ec_sÊow_cﬁ_agít
 (
ov§ec_sÊow_cﬁumns
[
OVSREC_SFLOW_COL_AGENT
])

	)

1482 
	#ov§ec_sÊow_cﬁ_ßm∂ög
 (
ov§ec_sÊow_cﬁumns
[
OVSREC_SFLOW_COL_SAMPLING
])

	)

1483 
	#ov§ec_sÊow_cﬁ_hódî
 (
ov§ec_sÊow_cﬁumns
[
OVSREC_SFLOW_COL_HEADER
])

	)

1484 
	#ov§ec_sÊow_cﬁ_pﬁlög
 (
ov§ec_sÊow_cﬁumns
[
OVSREC_SFLOW_COL_POLLING
])

	)

1485 
	#ov§ec_sÊow_cﬁ_exã∫Æ_ids
 (
ov§ec_sÊow_cﬁumns
[
OVSREC_SFLOW_COL_EXTERNAL_IDS
])

	)

1486 
	#ov§ec_sÊow_cﬁ_èrgës
 (
ov§ec_sÊow_cﬁumns
[
OVSREC_SFLOW_COL_TARGETS
])

	)

1488 
ovsdb_idl_cﬁumn
 
ov§ec_sÊow_cﬁumns
[
OVSREC_SFLOW_N_COLUMNS
];

1490 c⁄° 
ov§ec_sÊow
 *
ov§ec_sÊow_fú°
(c⁄° 
ovsdb_idl
 *);

1491 c⁄° 
ov§ec_sÊow
 *
ov§ec_sÊow_√xt
(const ovsrec_sflow *);

1492 
	#OVSREC_SFLOW_FOR_EACH
(
ROW
, 
IDL
) \

1493 (
ROW
Ë
	`ov§ec_sÊow_fú°
(
IDL
); \

1494 (
ROW
); \

1495 (
ROW
Ë
	`ov§ec_sÊow_√xt
(ROW))

	)

1496 
	#OVSREC_SFLOW_FOR_EACH_SAFE
(
ROW
, 
NEXT
, 
IDL
) \

1497 (
ROW
Ë
	`ov§ec_sÊow_fú°
(
IDL
); \

1498 (
ROW
Ë? ((
NEXT
Ë
	`ov§ec_sÊow_√xt
(ROW), 1) : 0; \

1499 (
ROW
Ë(
NEXT
))

	)

1501 
ov§ec_sÊow_öô
(
ov§ec_sÊow
 *);

1502 
ov§ec_sÊow_dñëe
(c⁄° 
ov§ec_sÊow
 *);

1503 
ov§ec_sÊow
 *
ov§ec_sÊow_ö£π
(
ovsdb_idl_txn
 *);

1505 
ov§ec_sÊow_vîify_agít
(c⁄° 
ov§ec_sÊow
 *);

1506 
ov§ec_sÊow_vîify_exã∫Æ_ids
(c⁄° 
ov§ec_sÊow
 *);

1507 
ov§ec_sÊow_vîify_hódî
(c⁄° 
ov§ec_sÊow
 *);

1508 
ov§ec_sÊow_vîify_pﬁlög
(c⁄° 
ov§ec_sÊow
 *);

1509 
ov§ec_sÊow_vîify_ßm∂ög
(c⁄° 
ov§ec_sÊow
 *);

1510 
ov§ec_sÊow_vîify_èrgës
(c⁄° 
ov§ec_sÊow
 *);

1515 c⁄° 
ovsdb_d©um
 *
ov§ec_sÊow_gë_agít
(c⁄° 
ov§ec_sÊow
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1516 c⁄° 
ovsdb_d©um
 *
ov§ec_sÊow_gë_exã∫Æ_ids
(c⁄° 
ov§ec_sÊow
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
, ovsdb_©omic_ty≥ 
vÆue_ty≥
);

1517 c⁄° 
ovsdb_d©um
 *
ov§ec_sÊow_gë_hódî
(c⁄° 
ov§ec_sÊow
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1518 c⁄° 
ovsdb_d©um
 *
ov§ec_sÊow_gë_pﬁlög
(c⁄° 
ov§ec_sÊow
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1519 c⁄° 
ovsdb_d©um
 *
ov§ec_sÊow_gë_ßm∂ög
(c⁄° 
ov§ec_sÊow
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1520 c⁄° 
ovsdb_d©um
 *
ov§ec_sÊow_gë_èrgës
(c⁄° 
ov§ec_sÊow
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

1522 
ov§ec_sÊow_£t_agít
(c⁄° 
ov§ec_sÊow
 *, c⁄° *
agít
);

1523 
ov§ec_sÊow_£t_exã∫Æ_ids
(c⁄° 
ov§ec_sÊow
 *, c⁄° 
sm≠
 *);

1524 
ov§ec_sÊow_£t_hódî
(c⁄° 
ov§ec_sÊow
 *, c⁄° 
öt64_t
 *
hódî
, 
size_t
 
n_hódî
);

1525 
ov§ec_sÊow_£t_pﬁlög
(c⁄° 
ov§ec_sÊow
 *, c⁄° 
öt64_t
 *
pﬁlög
, 
size_t
 
n_pﬁlög
);

1526 
ov§ec_sÊow_£t_ßm∂ög
(c⁄° 
ov§ec_sÊow
 *, c⁄° 
öt64_t
 *
ßm∂ög
, 
size_t
 
n_ßm∂ög
);

1527 
ov§ec_sÊow_£t_èrgës
(c⁄° 
ov§ec_sÊow
 *, **
èrgës
, 
size_t
 
n_èrgës
);

1531 
	mOVSREC_TABLE_BRIDGE
,

1532 
	mOVSREC_TABLE_CONTROLLER
,

1533 
	mOVSREC_TABLE_FLOW_TABLE
,

1534 
	mOVSREC_TABLE_INTERFACE
,

1535 
	mOVSREC_TABLE_MANAGER
,

1536 
	mOVSREC_TABLE_MIRROR
,

1537 
	mOVSREC_TABLE_NETFLOW
,

1538 
	mOVSREC_TABLE_OPEN_VSWITCH
,

1539 
	mOVSREC_TABLE_PORT
,

1540 
	mOVSREC_TABLE_QOS
,

1541 
	mOVSREC_TABLE_QUEUE
,

1542 
	mOVSREC_TABLE_SSL
,

1543 
	mOVSREC_TABLE_SFLOW
,

1544 
	mOVSREC_N_TABLES


1547 
	#ov§ec_èbÀ_bridge
 (
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_BRIDGE
])

	)

1548 
	#ov§ec_èbÀ_qos
 (
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_QOS
])

	)

1549 
	#ov§ec_èbÀ_sÊow
 (
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_SFLOW
])

	)

1550 
	#ov§ec_èbÀ_›í_vswôch
 (
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_OPEN_VSWITCH
])

	)

1551 
	#ov§ec_èbÀ_c⁄åﬁÀr
 (
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_CONTROLLER
])

	)

1552 
	#ov§ec_èbÀ_Êow_èbÀ
 (
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_FLOW_TABLE
])

	)

1553 
	#ov§ec_èbÀ_queue
 (
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_QUEUE
])

	)

1554 
	#ov§ec_èbÀ_s¶
 (
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_SSL
])

	)

1555 
	#ov§ec_èbÀ_m™agî
 (
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_MANAGER
])

	)

1556 
	#ov§ec_èbÀ_múr‹
 (
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_MIRROR
])

	)

1557 
	#ov§ec_èbÀ_öãrÁ˚
 (
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_INTERFACE
])

	)

1558 
	#ov§ec_èbÀ_√tÊow
 (
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_NETFLOW
])

	)

1559 
	#ov§ec_èbÀ_p‹t
 (
ov§ec_èbÀ_˛as£s
[
OVSREC_TABLE_PORT
])

	)

1561 
ovsdb_idl_èbÀ_˛ass
 
ov§ec_èbÀ_˛as£s
[
OVSREC_N_TABLES
];

1563 
ovsdb_idl_˛ass
 
ov§ec_idl_˛ass
;

1565 
ov§ec_öô
();

	@ofproto/netflow.h

17 #i‚de‡
OFPROTO_NETFLOW_H


18 
	#OFPROTO_NETFLOW_H
 1

	)

20 
	~<°döt.h
>

21 
	~"Êow.h
"

22 
	~"s£t.h
"

29 
	#NF_ACTIVE_TIMEOUT_DEFAULT
 600

	)

31 
	go„xpúed
;

33 
	s√tÊow_›ti⁄s
 {

34 
s£t
 
	mcﬁÀ˘‹s
;

35 
uöt8_t
 
	mígöe_ty≥
;

36 
uöt8_t
 
	mígöe_id
;

37 
	ma˘ive_timeout
;

38 
boﬁ
 
	madd_id_to_iÁ˚
;

41 
	e√tÊow_ouçut_p‹ts
 {

42 
	mNF_OUT_FLOOD
 = 
UINT16_MAX
,

43 
	mNF_OUT_MULTI
 = 
UINT16_MAX
 - 1,

44 
	mNF_OUT_DROP
 = 
UINT16_MAX
 - 2

47 
	s√tÊow_Êow
 {

48 
	mœ°_expúed
;

49 
	m¸óãd
;

51 
uöt64_t
 
	m∑ckë_cou¡_off
;

52 
uöt64_t
 
	mbyã_cou¡_off
;

54 
uöt16_t
 
	mouçut_iÁ˚
;

55 
uöt8_t
 
	mt˝_Êags
;

58 
√tÊow
 *
√tÊow_¸óã
();

59 
√tÊow_de°roy
(
√tÊow
 *);

60 
√tÊow_£t_›ti⁄s
(
√tÊow
 *, c⁄° 
√tÊow_›ti⁄s
 *);

61 
√tÊow_expúe
(
√tÊow
 *, 
√tÊow_Êow
 *,

62 
o„xpúed
 *);

64 
boﬁ
 
√tÊow_run
(
√tÊow
 *);

65 
√tÊow_waô
(
√tÊow
 *);

67 
√tÊow_Êow_öô
(
√tÊow_Êow
 *);

68 
√tÊow_Êow_˛ór
(
√tÊow_Êow
 *);

69 
√tÊow_Êow_upd©e_time
(
√tÊow
 *, 
√tÊow_Êow
 *,

70 
u£d
);

71 
√tÊow_Êow_upd©e_Êags
(
√tÊow_Êow
 *, 
uöt8_t
 
t˝_Êags
);

72 
boﬁ
 
√tÊow_a˘ive_timeout_expúed
(
√tÊow
 *, 
√tÊow_Êow
 *);

	@ofproto/ofproto-provider.h

17 #i‚de‡
OFPROTO_OFPROTO_PROVIDER_H


18 
	#OFPROTO_OFPROTO_PROVIDER_H
 1

	)

22 
	~"oÂrŸo/oÂrŸo.h
"

23 
	~"cfm.h
"

24 
	~"˛assifõr.h
"

25 
	~"hóp.h
"

26 
	~"li°.h
"

27 
	~"oÂ-îr‹s.h
"

28 
	~"oÂ-utû.h
"

29 
	~"shash.h
"

30 
	~"timevÆ.h
"

32 
	gm©ch
;

33 
	goÂa˘
;

34 
	goÂutû_Êow_mod
;

35 
	gsim≠
;

41 
	soÂrŸo
 {

42 
hm≠_node
 
	mhm≠_node
;

43 c⁄° 
oÂrŸo_˛ass
 *
	moÂrŸo_˛ass
;

44 *
	mty≥
;

45 *
	m«me
;

48 
uöt64_t
 
	mÁŒback_dpid
;

49 
uöt64_t
 
	md©≠©h_id
;

50 
	mÊow_evi˘i⁄_thªshﬁd
;

53 
boﬁ
 
	mf‹w¨d_bpdu
;

55 *
	mm‰_desc
;

56 *
	mhw_desc
;

57 *
	msw_desc
;

58 *
	m£rül_desc
;

59 *
	mdp_desc
;

60 
oÂ_c⁄fig_Êags
 
	m‰ag_h™dlög
;

63 
hm≠
 
	mp‹ts
;

64 
shash
 
	mp‹t_by_«me
;

65 
uöt16_t
 
	mmax_p‹ts
;

68 
o·abÀ
 *
	mèbÀs
;

69 
	mn_èbÀs
;

72 
c⁄nmgr
 *
	mc⁄nmgr
;

75 
	m°©e
;

76 
li°
 
	m≥ndög
;

77 
	mn_≥ndög
;

78 
hm≠
 
	mdñëi⁄s
;

81 
	mn_add
, 
	mn_dñëe
, 
	mn_modify
;

82 
	mfú°_›
, 
	mœ°_›
;

83 
	m√xt_›_ªp‹t
;

84 
	m›_backoff
;

92 *
	mvœn_bôm≠
;

93 
boﬁ
 
	mvœns_ch™ged
;

94 
	mmö_mtu
;

97 
oÂrŸo_öô_èbÀs
(
oÂrŸo
 *, 
n_èbÀs
);

98 
oÂrŸo_öô_max_p‹ts
(
oÂrŸo
 *, 
uöt16_t
 
max_p‹ts
);

100 
oÂrŸo
 *
oÂrŸo_lookup
(c⁄° *
«me
);

101 
oÂ‹t
 *
oÂrŸo_gë_p‹t
(c⁄° 
oÂrŸo
 *, 
uöt16_t
 
oÂ_p‹t
);

107 
	soÂ‹t
 {

108 
hm≠_node
 
	mhm≠_node
;

109 
oÂrŸo
 *
	moÂrŸo
;

110 
√tdev
 *
	m√tdev
;

111 
oÂutû_phy_p‹t
 
	mµ
;

112 
uöt16_t
 
	moÂ_p‹t
;

113 
	mch™ge_£q
;

114 
	mmtu
;

117 
oÂrŸo_p‹t_£t_°©e
(
oÂ‹t
 *, 
oÂutû_p‹t_°©e
);

119 
	eo·abÀ_Êags
 {

120 
	mOFTABLE_HIDDEN
 = 1 << 0,

121 
	mOFTABLE_READONLY
 = 1 << 1

125 
	so·abÀ
 {

126 
o·abÀ_Êags
 
	mÊags
;

127 
˛assifõr
 
	m˛s
;

128 *
	m«me
;

132 
	mmax_Êows
;

143 
mf_subfõld
 *
	mevi˘i⁄_fõlds
;

144 
size_t
 
	mn_evi˘i⁄_fõlds
;

152 
uöt32_t
 
	mevi˘i⁄_group_id_basis
;

153 
hm≠
 
	mevi˘i⁄_groups_by_id
;

154 
hóp
 
	mevi˘i⁄_groups_by_size
;

160 
	#OFPROTO_FOR_EACH_TABLE
(
TABLE
, 
OFPROTO
) \

161 (
TABLE
Ë(
OFPROTO
)->
èbÀs
; \

162 (
TABLE
Ë< &(
OFPROTO
)->
èbÀs
[(OFPROTO)->
n_èbÀs
]; \

163 (
TABLE
)++)

	)

169 
	sruÀ
 {

170 
li°
 
	moÂrŸo_node
;

171 
oÂrŸo
 *
	moÂrŸo
;

172 
˛s_ruÀ
 
	m¸
;

174 
of›î©i⁄
 *
	m≥ndög
;

176 
ovs_be64
 
	mÊow_cookõ
;

178 
	m¸óãd
;

179 
	mmodifõd
;

180 
	mu£d
;

181 
uöt16_t
 
	mh¨d_timeout
;

182 
uöt16_t
 
	midÀ_timeout
;

183 
uöt8_t
 
	mèbÀ_id
;

184 
boﬁ
 
	m£nd_Êow_ªmoved
;

187 
boﬁ
 
	mevi˘abÀ
;

188 
hóp_node
 
	mevg_node
;

189 
evi˘i⁄_group
 *
	mevi˘i⁄_group
;

191 
oÂa˘
 *
	moÂa˘s
;

192 
	moÂa˘s_Àn
;

195 
nx_Êow_m⁄ô‹_Êags
 
	mm⁄ô‹_Êags
;

196 
uöt64_t
 
	madd_£qno
;

197 
uöt64_t
 
	mmodify_£qno
;

200 
ölöe
 
ruÀ
 *

201 
	$ruÀ_‰om_˛s_ruÀ
(c⁄° 
˛s_ruÀ
 *cls_rule)

203  
˛s_ruÀ
 ? 
	`CONTAINER_OF
(˛s_ruÀ, 
ruÀ
, 
¸
Ë: 
NULL
;

204 
	}
}

206 
oÂrŸo_ruÀ_upd©e_u£d
(
ruÀ
 *, 
u£d
);

207 
oÂrŸo_ruÀ_expúe
(
ruÀ
 *, 
uöt8_t
 
ªas⁄
);

208 
oÂrŸo_ruÀ_de°roy
(
ruÀ
 *);

210 
boﬁ
 
oÂrŸo_ruÀ_has_out_p‹t
(c⁄° 
ruÀ
 *, 
uöt16_t
 
out_p‹t
);

212 
of›î©i⁄_com∂ëe
(
of›î©i⁄
 *, 
oÂîr
);

213 
ruÀ
 *
of›î©i⁄_gë_vi˘im
(
of›î©i⁄
 *);

215 
boﬁ
 
of›î©i⁄_has_out_p‹t
(c⁄° 
of›î©i⁄
 *, 
uöt16_t
 
out_p‹t
);

217 
boﬁ
 
oÂrŸo_ruÀ_is_hiddí
(c⁄° 
ruÀ
 *);

318 
	soÂrŸo_˛ass
 {

326 (*
	míumî©e_ty≥s
)(
s£t
 *
	mty≥s
);

336 (*
	míumî©e_«mes
)(c⁄° *
	mty≥
, 
s£t
 *
	m«mes
);

347 (*
	mdñ
)(c⁄° *
	mty≥
, c⁄° *
	m«me
);

396 
	moÂrŸo
 *(*
	mÆloc
)();

397 (*
	mc⁄°ru˘
)(
oÂrŸo
 *
	moÂrŸo
);

398 (*
	mde°ru˘
)(
oÂrŸo
 *
	moÂrŸo
);

399 (*
	mdóŒoc
)(
oÂrŸo
 *
	moÂrŸo
);

414 (*
	mrun
)(
oÂrŸo
 *
	moÂrŸo
);

422 (*
	mrun_Á°
)(
oÂrŸo
 *
	moÂrŸo
);

427 (*
	mwaô
)(
oÂrŸo
 *
	moÂrŸo
);

433 (*
	mgë_mem‹y_ußge
)(c⁄° 
oÂrŸo
 *
	moÂrŸo
,

434 
sim≠
 *
	mußge
);

444 (*
	mÊush
)(
oÂrŸo
 *
	moÂrŸo
);

454 (*
	mgë_„©uªs
)(
oÂrŸo
 *
	moÂrŸo
,

455 
boﬁ
 *
	m¨p_m©ch_ù
,

456 
oÂutû_a˘i⁄_bôm≠
 *
	ma˘i⁄s
);

520 (*
	mgë_èbÀs
)(
oÂrŸo
 *
	moÂrŸo
, 
oÂ12_èbÀ_°©s
 *
	mŸs
);

554 
	moÂ‹t
 *(*
	mp‹t_Æloc
)();

555 (*
	mp‹t_c⁄°ru˘
)(
oÂ‹t
 *
	moÂ‹t
);

556 (*
	mp‹t_de°ru˘
)(
oÂ‹t
 *
	moÂ‹t
);

557 (*
	mp‹t_dóŒoc
)(
oÂ‹t
 *
	moÂ‹t
);

565 (*
	mp‹t_modifõd
)(
oÂ‹t
 *
	moÂ‹t
);

575 (*
	mp‹t_ªc⁄figuªd
)(
oÂ‹t
 *
	moÂ‹t
,

576 
oÂutû_p‹t_c⁄fig
 
	mﬁd_c⁄fig
);

583 (*
	mp‹t_quîy_by_«me
)(c⁄° 
oÂrŸo
 *
	moÂrŸo
,

584 c⁄° *
	mdev«me
, 
oÂrŸo_p‹t
 *
	mp‹t
);

593 (*
	mp‹t_add
)(
oÂrŸo
 *
	moÂrŸo
, 
√tdev
 *
	m√tdev
,

594 
uöt16_t
 *
	moÂ_p‹ç
);

602 (*
	mp‹t_dñ
)(
oÂrŸo
 *
	moÂrŸo
, 
uöt16_t
 
	moÂ_p‹t
);

605 (*
	mp‹t_gë_°©s
)(c⁄° 
oÂ‹t
 *
	mp‹t
,

606 
√tdev_°©s
 *
	m°©s
);

669 (*
	mp‹t_dump_°¨t
)(c⁄° 
oÂrŸo
 *
	moÂrŸo
, **
	m°©ï
);

670 (*
	mp‹t_dump_√xt
)(c⁄° 
oÂrŸo
 *
	moÂrŸo
, *
	m°©e
,

671 
oÂrŸo_p‹t
 *
	mp‹t
);

672 (*
	mp‹t_dump_d⁄e
)(c⁄° 
oÂrŸo
 *
	moÂrŸo
, *
	m°©e
);

704 (*
	mp‹t_pﬁl
)(c⁄° 
oÂrŸo
 *
	moÂrŸo
, **
	mdev«mï
);

715 (*
	mp‹t_pﬁl_waô
)(c⁄° 
oÂrŸo
 *
	moÂrŸo
);

724 (*
	mp‹t_is_œ˝_cuºít
)(c⁄° 
oÂ‹t
 *
	mp‹t
);

744 
oÂîr
 (*
ruÀ_choo£_èbÀ
)(c⁄° 
oÂrŸo
 *
	moÂrŸo
,

745 c⁄° 
m©ch
 *
	mm©ch
,

746 
uöt8_t
 *
	mèbÀ_idp
);

876 
	mruÀ
 *(*
	mruÀ_Æloc
)();

877 
oÂîr
 (*
ruÀ_c⁄°ru˘
)(
ruÀ
 *
	mruÀ
);

878 (*
	mruÀ_de°ru˘
)(
ruÀ
 *
	mruÀ
);

879 (*
	mruÀ_dóŒoc
)(
ruÀ
 *
	mruÀ
);

885 (*
	mruÀ_gë_°©s
)(
ruÀ
 *
	mruÀ
, 
uöt64_t
 *
	m∑ckë_cou¡
,

886 
uöt64_t
 *
	mbyã_cou¡
);

903 
oÂîr
 (*
ruÀ_execuã
)(
ruÀ
 *
	mruÀ
, c⁄° 
Êow
 *
	mÊow
,

904 
oÂbuf
 *
	m∑ckë
);

927 (*
	mruÀ_modify_a˘i⁄s
)(
ruÀ
 *
	mruÀ
);

957 
boﬁ
 (*
£t_‰ag_h™dlög
)(
oÂrŸo
 *
	moÂrŸo
,

958 
oÂ_c⁄fig_Êags
 
	m‰ag_h™dlög
);

998 
oÂîr
 (*
∑ckë_out
)(
oÂrŸo
 *
	moÂrŸo
, 
oÂbuf
 *
	m∑ckë
,

999 c⁄° 
Êow
 *
	mÊow
,

1000 c⁄° 
oÂa˘
 *
	moÂa˘s
,

1001 
size_t
 
	moÂa˘s_Àn
);

1012 (*
	m£t_√tÊow
)(
oÂrŸo
 *
	moÂrŸo
,

1013 c⁄° 
√tÊow_›ti⁄s
 *
	m√tÊow_›ti⁄s
);

1015 (*
	mgë_√tÊow_ids
)(c⁄° 
oÂrŸo
 *
	moÂrŸo
,

1016 
uöt8_t
 *
	mígöe_ty≥
, uöt8_à*
	mígöe_id
);

1023 (*
	m£t_sÊow
)(
oÂrŸo
 *
	moÂrŸo
,

1024 c⁄° 
oÂrŸo_sÊow_›ti⁄s
 *
	msÊow_›ti⁄s
);

1035 (*
	m£t_cfm
)(
oÂ‹t
 *
	moÂ‹t
, c⁄° 
cfm_£âögs
 *
	ms
);

1044 (*
	mgë_cfm_Áu…
)(c⁄° 
oÂ‹t
 *
	moÂ‹t
);

1053 (*
	mgë_cfm_›up
)(c⁄° 
oÂ‹t
 *
	moÂ‹t
);

1062 (*
	mgë_cfm_ªmŸe_mpids
)(c⁄° 
oÂ‹t
 *
	moÂ‹t
,

1063 c⁄° 
uöt64_t
 **
	mrmps
, 
size_t
 *
	mn_rmps
);

1074 (*
	mgë_cfm_hó…h
)(c⁄° 
oÂ‹t
 *
	moÂ‹t
);

1085 (*
	m£t_°p
)(
oÂrŸo
 *
	moÂrŸo
,

1086 c⁄° 
oÂrŸo_°p_£âögs
 *
	ms
);

1095 (*
	mgë_°p_°©us
)(
oÂrŸo
 *
	moÂrŸo
,

1096 
oÂrŸo_°p_°©us
 *
	ms
);

1110 (*
	m£t_°p_p‹t
)(
oÂ‹t
 *
	moÂ‹t
,

1111 c⁄° 
oÂrŸo_p‹t_°p_£âögs
 *
	ms
);

1120 (*
	mgë_°p_p‹t_°©us
)(
oÂ‹t
 *
	moÂ‹t
,

1121 
oÂrŸo_p‹t_°p_°©us
 *
	ms
);

1131 (*
	m£t_queues
)(
oÂ‹t
 *
	moÂ‹t
,

1132 c⁄° 
oÂrŸo_p‹t_queue
 *
	mqueues
, 
size_t
 
	mn_qds˝
);

1151 (*
	mbundÀ_£t
)(
oÂrŸo
 *
	moÂrŸo
, *
	maux
,

1152 c⁄° 
oÂrŸo_bundÀ_£âögs
 *
	ms
);

1157 (*
	mbundÀ_ªmove
)(
oÂ‹t
 *
	moÂ‹t
);

1173 (*
	mmúr‹_£t
)(
oÂrŸo
 *
	moÂrŸo
, *
	maux
,

1174 c⁄° 
oÂrŸo_múr‹_£âögs
 *
	ms
);

1183 (*
	mmúr‹_gë_°©s
)(
oÂrŸo
 *
	moÂrŸo
, *
	maux
,

1184 
uöt64_t
 *
	m∑ckës
, uöt64_à*
	mbyãs
);

1193 (*
	m£t_Êood_vœns
)(
oÂrŸo
 *
	moÂrŸo
,

1194 *
	mÊood_vœns
);

1198 
boﬁ
 (*
is_múr‹_ouçut_bundÀ
)(c⁄° 
oÂrŸo
 *
	moÂrŸo
, *
	maux
);

1202 (*
	mf‹w¨d_bpdu_ch™ged
)(
oÂrŸo
 *
	moÂrŸo
);

1206 (*
	m£t_mac_idÀ_time
)(
oÂrŸo
 *
	moÂrŸo
, 
	midÀ_time
);

1224 (*
	m£t_ªÆdev
)(
oÂ‹t
 *
	moÂ‹t
,

1225 
uöt16_t
 
	mªÆdev_oÂ_p‹t
, 
	mvid
);

1228 c⁄° 
oÂrŸo_˛ass
 
oÂrŸo_dpif_˛ass
;

1230 
oÂrŸo_˛ass_ªgi°î
(c⁄° 
oÂrŸo_˛ass
 *);

1231 
oÂrŸo_˛ass_uƒegi°î
(c⁄° 
oÂrŸo_˛ass
 *);

1242 íum { 
	mOFPROTO_POSTPONE
 = 1 << 16 };

1243 
BUILD_ASSERT_DECL
(
OFPROTO_POSTPONE
 < 
OFPERR_OFS
);

1245 
oÂrŸo_Êow_mod
(
oÂrŸo
 *, c⁄° 
oÂutû_Êow_mod
 *);

1246 
oÂrŸo_add_Êow
(
oÂrŸo
 *, c⁄° 
m©ch
 *,

1247 
¥i‹ôy
,

1248 c⁄° 
oÂa˘
 *
oÂa˘s
, 
size_t
 
oÂa˘s_Àn
);

1249 
boﬁ
 
oÂrŸo_dñëe_Êow
(
oÂrŸo
 *,

1250 c⁄° 
m©ch
 *, 
¥i‹ôy
);

1251 
oÂrŸo_Êush_Êows
(
oÂrŸo
 *);

	@ofproto/ofproto.h

17 #i‚de‡
OFPROTO_H


18 
	#OFPROTO_H
 1

	)

20 
	~<sys/ty≥s.h
>

21 
	~<√töë/ö.h
>

22 
	~<°dboﬁ.h
>

23 
	~<°ddef.h
>

24 
	~<°döt.h
>

25 
	~"cfm.h
"

26 
	~"Êow.h
"

27 
	~"√tÊow.h
"

28 
	~"s£t.h
"

29 
	~"°p.h
"

30 
	~"èg.h
"

32 #ifde‡ 
__˝lu•lus


36 
cfm_£âögs
;

37 
˛s_ruÀ
;

38 
√tdev
;

39 
oÂrŸo
;

40 
oÂ‹t
;

41 
shash
;

42 
sim≠
;

43 
√tdev_°©s
;

45 
	soÂrŸo_c⁄åﬁÀr_öfo
 {

46 
boﬁ
 
is_c⁄√˘ed
;

47 
nx_rﬁe
 
rﬁe
;

49 c⁄° *
keys
[4];

50 c⁄° *
vÆues
[4];

51 
size_t
 
n
;

52 } 
∑ús
;

55 
	so„xpúed
 {

56 
Êow
 flow;

57 
uöt64_t
 
∑ckë_cou¡
;

58 
uöt64_t
 
byã_cou¡
;

59 
u£d
;

62 
	soÂrŸo_sÊow_›ti⁄s
 {

63 
s£t
 
èrgës
;

64 
uöt32_t
 
ßm∂ög_øã
;

65 
uöt32_t
 
pﬁlög_öãrvÆ
;

66 
uöt32_t
 
hódî_Àn
;

67 
uöt32_t
 
sub_id
;

68 *
agít_devi˚
;

69 *
c⁄åﬁ_ù
;

72 
	soÂrŸo_°p_£âögs
 {

73 
°p_idítifõr
 
sy°em_id
;

74 
uöt16_t
 
¥i‹ôy
;

75 
uöt16_t
 
hñlo_time
;

76 
uöt16_t
 
max_age
;

77 
uöt16_t
 
fwd_dñay
;

80 
	soÂrŸo_°p_°©us
 {

81 
boﬁ
 
íabÀd
;

82 
°p_idítifõr
 
bridge_id
;

83 
°p_idítifõr
 
desig«ãd_roŸ
;

84 
roŸ_∑th_co°
;

87 
	soÂrŸo_p‹t_°p_£âögs
 {

88 
boﬁ
 
íabÀ
;

89 
uöt8_t
 
p‹t_num
;

90 
uöt8_t
 
¥i‹ôy
;

91 
uöt16_t
 
∑th_co°
;

94 
	soÂrŸo_p‹t_°p_°©us
 {

95 
boﬁ
 
íabÀd
;

96 
p‹t_id
;

97 
°p_°©e
 
°©e
;

98 
£c_ö_°©e
;

99 
°p_rﬁe
 
rﬁe
;

100 
tx_cou¡
;

101 
rx_cou¡
;

102 
îr‹_cou¡
;

105 
	soÂrŸo_p‹t_queue
 {

106 
uöt32_t
 
queue
;

107 
uöt8_t
 
ds˝
;

111 
	eoÂrŸo_Áû_mode
 {

112 
OFPROTO_FAIL_SECURE
,

113 
OFPROTO_FAIL_STANDALONE


116 
	eoÂrŸo_b™d
 {

117 
OFPROTO_IN_BAND
,

118 
OFPROTO_OUT_OF_BAND


121 
	soÂrŸo_c⁄åﬁÀr
 {

122 *
èrgë
;

123 
max_backoff
;

124 
¥obe_öãrvÆ
;

125 
oÂrŸo_b™d
 
b™d
;

126 
boﬁ
 
íabÀ_async_msgs
;

129 
øã_limô
;

130 
bur°_limô
;

132 
uöt8_t
 
ds˝
;

135 
	#DEFAULT_MFR_DESC
 "Nicúa, Inc."

	)

136 
	#DEFAULT_HW_DESC
 "O≥¿vSwôch"

	)

137 
	#DEFAULT_SW_DESC
 
VERSION


	)

138 
	#DEFAULT_SERIAL_DESC
 "N⁄e"

	)

139 
	#DEFAULT_DP_DESC
 "N⁄e"

	)

141 
oÂrŸo_íumî©e_ty≥s
(
s£t
 *
ty≥s
);

142 c⁄° *
oÂrŸo_n‹mÆize_ty≥
(const *);

144 
oÂrŸo_íumî©e_«mes
(c⁄° *
ty≥
, 
s£t
 *
«mes
);

145 
oÂrŸo_∑r£_«me
(c⁄° *
«me
, **
dp_«me
, **
dp_ty≥
);

147 
oÂrŸo_¸óã
(c⁄° *
d©≠©h
, c⁄° *
d©≠©h_ty≥
,

148 
oÂrŸo
 **
oÂrŸ›
);

149 
oÂrŸo_de°roy
(
oÂrŸo
 *);

150 
oÂrŸo_dñëe
(c⁄° *
«me
, c⁄° *
ty≥
);

152 
oÂrŸo_run
(
oÂrŸo
 *);

153 
oÂrŸo_run_Á°
(
oÂrŸo
 *);

154 
oÂrŸo_waô
(
oÂrŸo
 *);

155 
boﬁ
 
oÂrŸo_is_Æive
(c⁄° 
oÂrŸo
 *);

157 
oÂrŸo_gë_mem‹y_ußge
(c⁄° 
oÂrŸo
 *, 
sim≠
 *);

162 
	soÂrŸo_p‹t
 {

163 *
«me
;

164 *
ty≥
;

165 
uöt16_t
 
oÂ_p‹t
;

167 
oÂrŸo_p‹t_˛⁄e
(
oÂrŸo_p‹t
 *, const ofproto_port *);

168 
oÂrŸo_p‹t_de°roy
(
oÂrŸo_p‹t
 *);

170 
	soÂrŸo_p‹t_dump
 {

171 c⁄° 
oÂrŸo
 *ofproto;

172 
îr‹
;

173 *
°©e
;

175 
oÂrŸo_p‹t_dump_°¨t
(
oÂrŸo_p‹t_dump
 *,

176 c⁄° 
oÂrŸo
 *);

177 
boﬁ
 
oÂrŸo_p‹t_dump_√xt
(
oÂrŸo_p‹t_dump
 *, 
oÂrŸo_p‹t
 *);

178 
oÂrŸo_p‹t_dump_d⁄e
(
oÂrŸo_p‹t_dump
 *);

186 
	#OFPROTO_PORT_FOR_EACH
(
OFPROTO_PORT
, 
DUMP
, 
OFPROTO
) \

187 
	`oÂrŸo_p‹t_dump_°¨t
(
DUMP
, 
OFPROTO
); \

188 (
	`oÂrŸo_p‹t_dump_√xt
(
DUMP
, 
OFPROTO_PORT
) \

189 ? 
åue
 \

190 : (
	`oÂrŸo_p‹t_dump_d⁄e
(
DUMP
), 
Ál£
)); \

191 )

	)

193 
	#OFPROTO_FLOW_EVICTION_THRESHOLD_DEFAULT
 1000

	)

194 
	#OFPROTO_FLOW_EVICTION_THRESHOLD_MIN
 100

	)

196 
oÂrŸo_p‹t_add
(
oÂrŸo
 *, 
√tdev
 *, 
uöt16_t
 *
oÂ_p‹ç
);

197 
oÂrŸo_p‹t_dñ
(
oÂrŸo
 *, 
uöt16_t
 
oÂ_p‹t
);

198 
oÂrŸo_p‹t_gë_°©s
(c⁄° 
oÂ‹t
 *, 
√tdev_°©s
 *
°©s
);

200 
oÂrŸo_p‹t_quîy_by_«me
(c⁄° 
oÂrŸo
 *, c⁄° *
dev«me
,

201 
oÂrŸo_p‹t
 *);

204 
uöt64_t
 
oÂrŸo_gë_d©≠©h_id
(c⁄° 
oÂrŸo
 *);

205 
oÂrŸo_£t_d©≠©h_id
(
oÂrŸo
 *, 
uöt64_t
 
d©≠©h_id
);

206 
oÂrŸo_£t_c⁄åﬁÀrs
(
oÂrŸo
 *,

207 c⁄° 
oÂrŸo_c⁄åﬁÀr
 *, 
size_t
 
n
);

208 
oÂrŸo_£t_Áû_mode
(
oÂrŸo
 *, 
oÂrŸo_Áû_mode
 
Áû_mode
);

209 
oÂrŸo_ªc⁄√˘_c⁄åﬁÀrs
(
oÂrŸo
 *);

210 
oÂrŸo_£t_exåa_ö_b™d_ªmŸes
(
oÂrŸo
 *,

211 c⁄° 
sockaddr_ö
 *, 
size_t
 
n
);

212 
oÂrŸo_£t_ö_b™d_queue
(
oÂrŸo
 *, 
queue_id
);

213 
oÂrŸo_£t_Êow_evi˘i⁄_thªshﬁd
(
oÂrŸo
 *, 
thªshﬁd
);

214 
oÂrŸo_£t_f‹w¨d_bpdu
(
oÂrŸo
 *, 
boﬁ
 
f‹w¨d_bpdu
);

215 
oÂrŸo_£t_mac_idÀ_time
(
oÂrŸo
 *, 
idÀ_time
);

216 
oÂrŸo_£t_desc
(
oÂrŸo
 *,

217 c⁄° *
m‰_desc
, c⁄° *
hw_desc
,

218 c⁄° *
sw_desc
, c⁄° *
£rül_desc
,

219 c⁄° *
dp_desc
);

220 
oÂrŸo_£t_¢o›s
(
oÂrŸo
 *, c⁄° 
s£t
 *
¢o›s
);

221 
oÂrŸo_£t_√tÊow
(
oÂrŸo
 *,

222 c⁄° 
√tÊow_›ti⁄s
 *
nf_›ti⁄s
);

223 
oÂrŸo_£t_sÊow
(
oÂrŸo
 *, c⁄° 
oÂrŸo_sÊow_›ti⁄s
 *);

224 
oÂrŸo_£t_°p
(
oÂrŸo
 *, c⁄° 
oÂrŸo_°p_£âögs
 *);

225 
oÂrŸo_gë_°p_°©us
(
oÂrŸo
 *, 
oÂrŸo_°p_°©us
 *);

228 
oÂrŸo_p‹t_uƒegi°î
(
oÂrŸo
 *, 
uöt16_t
 
oÂ_p‹t
);

230 
oÂrŸo_p‹t_˛ór_cfm
(
oÂrŸo
 *, 
uöt16_t
 
oÂ_p‹t
);

231 
oÂrŸo_p‹t_£t_cfm
(
oÂrŸo
 *, 
uöt16_t
 
oÂ_p‹t
,

232 c⁄° 
cfm_£âögs
 *);

233 
oÂrŸo_p‹t_is_œ˝_cuºít
(
oÂrŸo
 *, 
uöt16_t
 
oÂ_p‹t
);

234 
oÂrŸo_p‹t_£t_°p
(
oÂrŸo
 *, 
uöt16_t
 
oÂ_p‹t
,

235 c⁄° 
oÂrŸo_p‹t_°p_£âögs
 *);

236 
oÂrŸo_p‹t_gë_°p_°©us
(
oÂrŸo
 *, 
uöt16_t
 
oÂ_p‹t
,

237 
oÂrŸo_p‹t_°p_°©us
 *);

238 
oÂrŸo_p‹t_£t_queues
(
oÂrŸo
 *, 
uöt16_t
 
oÂ_p‹t
,

239 c⁄° 
oÂrŸo_p‹t_queue
 *,

240 
size_t
 
n_queues
);

243 
	ep‹t_vœn_mode
 {

246 
PORT_VLAN_ACCESS
,

250 
PORT_VLAN_TRUNK
,

255 
PORT_VLAN_NATIVE_TAGGED
,

260 
PORT_VLAN_NATIVE_UNTAGGED


264 
	soÂrŸo_bundÀ_£âögs
 {

265 *
«me
;

267 
uöt16_t
 *
¶aves
;

268 
size_t
 
n_¶aves
;

270 
p‹t_vœn_mode
 
vœn_mode
;

271 
vœn
;

272 *
åunks
;

273 
boﬁ
 
u£_¥i‹ôy_ègs
;

275 
b⁄d_£âögs
 *
b⁄d
;

276 
uöt32_t
 *
b⁄d_°abÀ_ids
;

278 
œ˝_£âögs
 *
œ˝
;

279 
œ˝_¶ave_£âögs
 *
œ˝_¶aves
;

287 
uöt16_t
 
ªÆdev_oÂ_p‹t
;

290 
oÂrŸo_bundÀ_ªgi°î
(
oÂrŸo
 *, *
aux
,

291 c⁄° 
oÂrŸo_bundÀ_£âögs
 *);

292 
oÂrŸo_bundÀ_uƒegi°î
(
oÂrŸo
 *, *
aux
);

295 
	soÂrŸo_múr‹_£âögs
 {

297 *
«me
;

300 **
§cs
;

301 
size_t
 
n_§cs
;

304 **
d°s
;

305 
size_t
 
n_d°s
;

308 *
§c_vœns
;

311 *
out_bundÀ
;

312 
uöt16_t
 
out_vœn
;

315 
oÂrŸo_múr‹_ªgi°î
(
oÂrŸo
 *, *
aux
,

316 c⁄° 
oÂrŸo_múr‹_£âögs
 *);

317 
oÂrŸo_múr‹_uƒegi°î
(
oÂrŸo
 *, *
aux
);

318 
oÂrŸo_múr‹_gë_°©s
(
oÂrŸo
 *, *
aux
,

319 
uöt64_t
 *
∑ckës
, uöt64_à*
byãs
);

321 
oÂrŸo_£t_Êood_vœns
(
oÂrŸo
 *, *
Êood_vœns
);

322 
boﬁ
 
oÂrŸo_is_múr‹_ouçut_bundÀ
(c⁄° 
oÂrŸo
 *, *
aux
);

325 
	soÂrŸo_èbÀ_£âögs
 {

326 *
«me
;

327 
max_Êows
;

337 
mf_subfõld
 *
groups
;

338 
size_t
 
n_groups
;

341 
oÂrŸo_gë_n_èbÀs
(c⁄° 
oÂrŸo
 *);

342 
oÂrŸo_c⁄figuª_èbÀ
(
oÂrŸo
 *, 
èbÀ_id
,

343 c⁄° 
oÂrŸo_èbÀ_£âögs
 *);

346 
boﬁ
 
oÂrŸo_has_¢o›s
(c⁄° 
oÂrŸo
 *);

347 
oÂrŸo_gë_¢o›s
(c⁄° 
oÂrŸo
 *, 
s£t
 *);

348 
oÂrŸo_gë_Æl_Êows
(
oÂrŸo
 *
p
, 
ds
 *);

349 
oÂrŸo_gë_√tÊow_ids
(c⁄° 
oÂrŸo
 *,

350 
uöt8_t
 *
ígöe_ty≥
, uöt8_à*
ígöe_id
);

351 
oÂrŸo_p‹t_gë_cfm_Áu…
(c⁄° 
oÂrŸo
 *, 
uöt16_t
 
oÂ_p‹t
);

352 
oÂrŸo_p‹t_gë_cfm_›up
(c⁄° 
oÂrŸo
 *, 
uöt16_t
 
oÂ_p‹t
);

353 
oÂrŸo_p‹t_gë_cfm_ªmŸe_mpids
(c⁄° 
oÂrŸo
 *,

354 
uöt16_t
 
oÂ_p‹t
, c⁄° 
uöt64_t
 **
rmps
,

355 
size_t
 *
n_rmps
);

356 
oÂrŸo_p‹t_gë_cfm_hó…h
(c⁄° 
oÂrŸo
 *ofproto,

357 
uöt16_t
 
oÂ_p‹t
);

358 
oÂrŸo_gë_oÂrŸo_c⁄åﬁÀr_öfo
(c⁄° 
oÂrŸo
 *, 
shash
 *);

359 
oÂrŸo_‰ì_oÂrŸo_c⁄åﬁÀr_öfo
(
shash
 *);

368 
oÂrŸo_gë_vœn_ußge
(
oÂrŸo
 *, *
vœn_bôm≠
);

369 
boﬁ
 
oÂrŸo_has_vœn_ußge_ch™ged
(c⁄° 
oÂrŸo
 *);

370 
oÂrŸo_p‹t_£t_ªÆdev
(
oÂrŸo
 *, 
uöt16_t
 
vœndev_oÂ_p‹t
,

371 
uöt16_t
 
ªÆdev_oÂ_p‹t
, 
vid
);

373 #ifde‡ 
__˝lu•lus


	@ovsdb/column.h

16 #i‚de‡
OVSDB_COLUMN_H


17 
	#OVSDB_COLUMN_H
 1

	)

19 
	~<°dboﬁ.h
>

20 
	~"compûî.h
"

21 
	~"ovsdb-ty≥s.h
"

23 
	govsdb_èbÀ
;

24 
	govsdb_èbÀ_schema
;

27 
	sovsdb_cﬁumn
 {

28 
	mödex
;

29 *
	m«me
;

31 
boﬁ
 
	mmuèbÀ
;

32 
boﬁ
 
	m≥rsi°ít
;

33 
ovsdb_ty≥
 
	mty≥
;

42 
	mOVSDB_COL_UUID
 = 0,

43 
	mOVSDB_COL_VERSION
 = 1,

44 
	mOVSDB_N_STD_COLUMNS


47 
ovsdb_cﬁumn
 *
ovsdb_cﬁumn_¸óã
(

48 c⁄° *
«me
, 
boﬁ
 
muèbÀ
, boﬁ 
≥rsi°ít
,

49 c⁄° 
ovsdb_ty≥
 *);

50 
ovsdb_cﬁumn
 *
ovsdb_cﬁumn_˛⁄e
(const ovsdb_column *);

51 
ovsdb_cﬁumn_de°roy
(
ovsdb_cﬁumn
 *);

53 
ovsdb_îr‹
 *
	$ovsdb_cﬁumn_‰om_js⁄
(c⁄° 
js⁄
 *,

54 c⁄° *
«me
,

55 
ovsdb_cﬁumn
 **)

56 
WARN_UNUSED_RESULT
;

57 
js⁄
 *
	`ovsdb_cﬁumn_to_js⁄
(c⁄° 
ovsdb_cﬁumn
 *);

61 
	sovsdb_cﬁumn_£t
 {

62 c⁄° 
ovsdb_cﬁumn
 **
cﬁumns
;

63 
size_t
 
n_cﬁumns
, 
Æloˇãd_cﬁumns
;

66 
	#OVSDB_COLUMN_SET_INITIALIZER
 { 
NULL
, 0, 0 
	}

	)
}

68 
ovsdb_cﬁumn_£t_öô
(
ovsdb_cﬁumn_£t
 *);

69 
ovsdb_cﬁumn_£t_de°roy
(
ovsdb_cﬁumn_£t
 *);

70 
ovsdb_cﬁumn_£t_˛⁄e
(
ovsdb_cﬁumn_£t
 *,

71 c⁄° 
ovsdb_cﬁumn_£t
 *);

72 
ovsdb_îr‹
 *
ovsdb_cﬁumn_£t_‰om_js⁄
(

73 c⁄° 
js⁄
 *, c⁄° 
ovsdb_èbÀ_schema
 *,

74 
ovsdb_cﬁumn_£t
 *);

75 
js⁄
 *
ovsdb_cﬁumn_£t_to_js⁄
(c⁄° 
ovsdb_cﬁumn_£t
 *);

76 *
ovsdb_cﬁumn_£t_to_°rög
(c⁄° 
ovsdb_cﬁumn_£t
 *);

78 
ovsdb_cﬁumn_£t_add
(
ovsdb_cﬁumn_£t
 *,

79 c⁄° 
ovsdb_cﬁumn
 *);

80 
ovsdb_cﬁumn_£t_add_Æl
(
ovsdb_cﬁumn_£t
 *,

81 c⁄° 
ovsdb_èbÀ
 *);

82 
boﬁ
 
ovsdb_cﬁumn_£t_c⁄èös
(c⁄° 
ovsdb_cﬁumn_£t
 *,

83 
cﬁumn_ödex
);

84 
boﬁ
 
ovsdb_cﬁumn_£t_equÆs
(c⁄° 
ovsdb_cﬁumn_£t
 *,

85 c⁄° 
ovsdb_cﬁumn_£t
 *);

	@ovsdb/condition.h

16 #i‚de‡
OVSDB_CONDITION_H


17 
	#OVSDB_CONDITION_H
 1

	)

19 
	~<°ddef.h
>

20 
	~"compûî.h
"

21 
	~"ovsdb-d©a.h
"

23 
	gjs⁄
;

24 
	govsdb_èbÀ_schema
;

25 
	govsdb_row
;

29 
	#OVSDB_FUNCTIONS
 \

30 
	`OVSDB_FUNCTION
(
OVSDB_F_EQ
, "==") \

31 
	`OVSDB_FUNCTION
(
OVSDB_F_INCLUDES
, "includes") \

32 
	`OVSDB_FUNCTION
(
OVSDB_F_LE
, "<=") \

33 
	`OVSDB_FUNCTION
(
OVSDB_F_LT
, "<") \

34 
	`OVSDB_FUNCTION
(
OVSDB_F_GE
, ">=") \

35 
	`OVSDB_FUNCTION
(
OVSDB_F_GT
, ">") \

36 
	`OVSDB_FUNCTION
(
OVSDB_F_EXCLUDES
, "excludes") \

37 
	`OVSDB_FUNCTION
(
OVSDB_F_NE
, "!=")

	)

39 
	eovsdb_fun˘i⁄
 {

40 
	#OVSDB_FUNCTION
(
ENUM
, 
NAME
ËENUM,

	)

41 
	mOVSDB_FUNCTIONS


42 #unde‡
OVSDB_FUNCTION


45 
ovsdb_îr‹
 *
	$ovsdb_fun˘i⁄_‰om_°rög
(const *,

46 
ovsdb_fun˘i⁄
 *)

47 
WARN_UNUSED_RESULT
;

48 c⁄° *
	`ovsdb_fun˘i⁄_to_°rög
(
ovsdb_fun˘i⁄
);

50 
	sovsdb_˛au£
 {

51 
ovsdb_fun˘i⁄
 
fun˘i⁄
;

52 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
;

53 
ovsdb_d©um
 
¨g
;

56 
	sovsdb_c⁄dôi⁄
 {

57 
ovsdb_˛au£
 *
˛au£s
;

58 
size_t
 
n_˛au£s
;

61 
	#OVSDB_CONDITION_INITIALIZER
 { 
NULL
, 0 
	}

	)
}

63 
ovsdb_îr‹
 *
	$ovsdb_c⁄dôi⁄_‰om_js⁄
(

64 c⁄° 
ovsdb_èbÀ_schema
 *,

65 c⁄° 
js⁄
 *, 
ovsdb_symbﬁ_èbÀ
 *,

66 
ovsdb_c⁄dôi⁄
 *Ë
WARN_UNUSED_RESULT
;

67 
js⁄
 *
	`ovsdb_c⁄dôi⁄_to_js⁄
(c⁄° 
ovsdb_c⁄dôi⁄
 *);

68 
	`ovsdb_c⁄dôi⁄_de°roy
(
ovsdb_c⁄dôi⁄
 *);

69 
boﬁ
 
	`ovsdb_c⁄dôi⁄_evÆu©e
(c⁄° 
ovsdb_row
 *,

70 c⁄° 
ovsdb_c⁄dôi⁄
 *);

	@ovsdb/file.h

16 #i‚de‡
OVSDB_FILE_H


17 
	#OVSDB_FILE_H
 1

	)

19 
	~<°dboﬁ.h
>

20 
	~"compûî.h
"

21 
	~"log.h
"

23 
	govsdb
;

24 
	govsdb_fûe
;

25 
	govsdb_schema
;

27 
ovsdb_îr‹
 *
	$ovsdb_fûe_›í
(c⁄° *
fûe_«me
, 
boﬁ
 
ªad_⁄ly
,

28 
ovsdb
 **, 
ovsdb_fûe
 **)

29 
WARN_UNUSED_RESULT
;

31 
ovsdb_îr‹
 *
	$ovsdb_fûe_›í_as_schema
(c⁄° *
fûe_«me
,

32 c⁄° 
ovsdb_schema
 *,

33 
ovsdb
 **)

34 
WARN_UNUSED_RESULT
;

36 
ovsdb_îr‹
 *
	$ovsdb_fûe_ßve_c›y
(c⁄° *
fûe_«me
, 
lockög
,

37 c⁄° *
commít
,

38 c⁄° 
ovsdb
 *)

39 
WARN_UNUSED_RESULT
;

41 
ovsdb_îr‹
 *
	`ovsdb_fûe_com∑˘
(
ovsdb_fûe
 *);

43 
ovsdb_îr‹
 *
	$ovsdb_fûe_ªad_schema
(c⁄° *
fûe_«me
,

44 
ovsdb_schema
 **)

45 
WARN_UNUSED_RESULT
;

	@ovsdb/log.h

16 #i‚de‡
OVSDB_LOG_H


17 
	#OVSDB_LOG_H
 1

	)

19 
	~<sys/ty≥s.h
>

20 
	~"compûî.h
"

22 
	gjs⁄
;

23 
	govsdb_log
;

26 
	eovsdb_log_›í_mode
 {

27 
	mOVSDB_LOG_READ_ONLY
,

28 
	mOVSDB_LOG_READ_WRITE
,

29 
	mOVSDB_LOG_CREATE


32 
ovsdb_îr‹
 *
	$ovsdb_log_›í
(c⁄° *
«me
, 
ovsdb_log_›í_mode
,

33 
lockög
, 
ovsdb_log
 **)

34 
WARN_UNUSED_RESULT
;

35 
	`ovsdb_log_˛o£
(
ovsdb_log
 *);

37 
ovsdb_îr‹
 *
	$ovsdb_log_ªad
(
ovsdb_log
 *, 
js⁄
 **)

38 
WARN_UNUSED_RESULT
;

39 
	`ovsdb_log_uƒód
(
ovsdb_log
 *);

41 
ovsdb_îr‹
 *
	$ovsdb_log_wrôe
(
ovsdb_log
 *, 
js⁄
 *)

42 
WARN_UNUSED_RESULT
;

43 
ovsdb_îr‹
 *
	$ovsdb_log_commô
(
ovsdb_log
 *)

44 
WARN_UNUSED_RESULT
;

46 
off_t
 
	`ovsdb_log_gë_off£t
(c⁄° 
ovsdb_log
 *);

	@ovsdb/mutation.h

16 #i‚de‡
OVSDB_MUTATION_H


17 
	#OVSDB_MUTATION_H
 1

	)

19 
	~<°ddef.h
>

20 
	~"compûî.h
"

21 
	~"ovsdb-d©a.h
"

23 
	gjs⁄
;

24 
	govsdb_èbÀ_schema
;

25 
	govsdb_row
;

29 
	#OVSDB_MUTATORS
 \

30 
	`OVSDB_MUTATOR
(
OVSDB_M_ADD
, "+=") \

31 
	`OVSDB_MUTATOR
(
OVSDB_M_SUB
, "-=") \

32 
	`OVSDB_MUTATOR
(
OVSDB_M_MUL
, "*=") \

33 
	`OVSDB_MUTATOR
(
OVSDB_M_DIV
, "/=") \

34 
	`OVSDB_MUTATOR
(
OVSDB_M_MOD
, "%=") \

35 
	`OVSDB_MUTATOR
(
OVSDB_M_INSERT
, "insert") \

36 
	`OVSDB_MUTATOR
(
OVSDB_M_DELETE
, "dñëe")

	)

38 
	eovsdb_muèt‹
 {

39 
	#OVSDB_MUTATOR
(
ENUM
, 
NAME
ËENUM,

	)

40 
	mOVSDB_MUTATORS


41 #unde‡
OVSDB_MUTATOR


44 
ovsdb_îr‹
 *
	$ovsdb_muèt‹_‰om_°rög
(const *,

45 
ovsdb_muèt‹
 *)

46 
WARN_UNUSED_RESULT
;

47 c⁄° *
	`ovsdb_muèt‹_to_°rög
(
ovsdb_muèt‹
);

49 
	sovsdb_muèti⁄
 {

50 
ovsdb_muèt‹
 
muèt‹
;

51 c⁄° 
ovsdb_cﬁumn
 *
cﬁumn
;

52 
ovsdb_d©um
 
¨g
;

53 
ovsdb_ty≥
 
ty≥
;

56 
	sovsdb_muèti⁄_£t
 {

57 
ovsdb_muèti⁄
 *
muèti⁄s
;

58 
size_t
 
n_muèti⁄s
;

61 
	#OVSDB_MUTATION_SET_INITIALIZER
 { 
NULL
, 0 
	}

	)
}

63 
ovsdb_îr‹
 *
	$ovsdb_muèti⁄_£t_‰om_js⁄
(

64 c⁄° 
ovsdb_èbÀ_schema
 *,

65 c⁄° 
js⁄
 *, 
ovsdb_symbﬁ_èbÀ
 *,

66 
ovsdb_muèti⁄_£t
 *Ë
WARN_UNUSED_RESULT
;

67 
js⁄
 *
	`ovsdb_muèti⁄_£t_to_js⁄
(c⁄° 
ovsdb_muèti⁄_£t
 *);

68 
	`ovsdb_muèti⁄_£t_de°roy
(
ovsdb_muèti⁄_£t
 *);

69 
ovsdb_îr‹
 *
	$ovsdb_muèti⁄_£t_execuã
(

70 
ovsdb_row
 *, c⁄° 
ovsdb_muèti⁄_£t
 *Ë
WARN_UNUSED_RESULT
;

	@ovsdb/ovsdb.h

16 #i‚de‡
OVSDB_OVSDB_H


17 
	#OVSDB_OVSDB_H
 1

	)

19 
	~"compûî.h
"

20 
	~"hm≠.h
"

21 
	~"li°.h
"

22 
	~"shash.h
"

24 
	gjs⁄
;

25 
	govsdb_log
;

26 
	govsdb_£ssi⁄
;

27 
	govsdb_txn
;

28 
	gsim≠
;

29 
	guuid
;

32 
	sovsdb_schema
 {

33 *
	m«me
;

34 *
	mvîsi⁄
;

35 *
	mcksum
;

36 
shash
 
	mèbÀs
;

39 
ovsdb_schema
 *
ovsdb_schema_¸óã
(c⁄° *
«me
,

40 c⁄° *
vîsi⁄
,

41 c⁄° *
cksum
);

42 
ovsdb_schema
 *
ovsdb_schema_˛⁄e
(const ovsdb_schema *);

43 
ovsdb_schema_de°roy
(
ovsdb_schema
 *);

45 
ovsdb_îr‹
 *
	$ovsdb_schema_‰om_fûe
(c⁄° *
fûe_«me
,

46 
ovsdb_schema
 **)

47 
WARN_UNUSED_RESULT
;

48 
ovsdb_îr‹
 *
	$ovsdb_schema_‰om_js⁄
(
js⁄
 *,

49 
ovsdb_schema
 **)

50 
WARN_UNUSED_RESULT
;

51 
js⁄
 *
	`ovsdb_schema_to_js⁄
(c⁄° 
ovsdb_schema
 *);

53 
boﬁ
 
	`ovsdb_schema_equÆ
(c⁄° 
ovsdb_schema
 *,

54 c⁄° 
ovsdb_schema
 *);

57 
	sovsdb
 {

58 
ovsdb_schema
 *
schema
;

59 
li°
 
ª∂iˇs
;

60 
shash
 
èbÀs
;

63 
li°
 
åiggîs
;

64 
boﬁ
 
run_åiggîs
;

67 
ovsdb
 *
	`ovsdb_¸óã
(
ovsdb_schema
 *);

68 
	`ovsdb_de°roy
(
ovsdb
 *);

70 
	`ovsdb_gë_mem‹y_ußge
(c⁄° 
ovsdb
 *, 
sim≠
 *
ußge
);

72 
ovsdb_îr‹
 *
	$ovsdb_‰om_js⁄
(c⁄° 
js⁄
 *, 
ovsdb
 **)

73 
WARN_UNUSED_RESULT
;

74 
js⁄
 *
	`ovsdb_to_js⁄
(c⁄° 
ovsdb
 *);

76 
ovsdb_èbÀ
 *
	`ovsdb_gë_èbÀ
(c⁄° 
ovsdb
 *, const *);

78 
js⁄
 *
	`ovsdb_execuã
(
ovsdb
 *, c⁄° 
ovsdb_£ssi⁄
 *,

79 c⁄° 
js⁄
 *
∑øms
,

80 
ñ≠£d_m£c
,

81 *
timeout_m£c
);

85 
	sovsdb_ª∂iˇ
 {

86 
li°
 
node
;

87 c⁄° 
ovsdb_ª∂iˇ_˛ass
 *
˛ass
;

90 
	sovsdb_ª∂iˇ_˛ass
 {

91 
ovsdb_îr‹
 *(*
commô
)(
ovsdb_ª∂iˇ
 *,

92 c⁄° 
ovsdb_txn
 *, 
boﬁ
 
duøbÀ
);

93 (*
de°roy
)(
ovsdb_ª∂iˇ
 *);

96 
	`ovsdb_ª∂iˇ_öô
(
ovsdb_ª∂iˇ
 *,

97 c⁄° 
ovsdb_ª∂iˇ_˛ass
 *);

99 
	`ovsdb_add_ª∂iˇ
(
ovsdb
 *, 
ovsdb_ª∂iˇ
 *);

100 
	`ovsdb_ªmove_ª∂iˇ
(
ovsdb
 *, 
ovsdb_ª∂iˇ
 *);

	@ovsdb/query.h

16 #i‚de‡
OVSDB_QUERY_H


17 
	#OVSDB_QUERY_H
 1

	)

19 
	~<°dboﬁ.h
>

21 
	govsdb_cﬁumn_£t
;

22 
	govsdb_c⁄dôi⁄
;

23 
	govsdb_row
;

24 
	govsdb_row_£t
;

25 
	govsdb_èbÀ
;

26 
	govsdb_txn
;

28 
ovsdb_quîy
(
ovsdb_èbÀ
 *, c⁄° 
ovsdb_c⁄dôi⁄
 *,

29 
	$boﬁ
 (*
ouçut_row
)(c⁄° 
ovsdb_row
 *, *
aux
),

30 *
aux
);

31 
	`ovsdb_quîy_row_£t
(
ovsdb_èbÀ
 *, c⁄° 
ovsdb_c⁄dôi⁄
 *,

32 
ovsdb_row_£t
 *);

33 
	`ovsdb_quîy_di°ö˘
(
ovsdb_èbÀ
 *, c⁄° 
ovsdb_c⁄dôi⁄
 *,

34 c⁄° 
ovsdb_cﬁumn_£t
 *,

35 
ovsdb_row_£t
 *);

	@ovsdb/row.h

16 #i‚de‡
OVSDB_ROW_H


17 
	#OVSDB_ROW_H
 1

	)

19 
	~<°ddef.h
>

20 
	~<°döt.h
>

21 
	~"cﬁumn.h
"

22 
	~"hm≠.h
"

23 
	~"li°.h
"

24 
	~"ovsdb-d©a.h
"

26 
	govsdb_cﬁumn_£t
;

38 
	sovsdb_wók_ªf
 {

39 
li°
 
	m§c_node
;

40 
li°
 
	md°_node
;

41 
ovsdb_row
 *
	m§c
;

45 
	sovsdb_row
 {

46 
hm≠_node
 
	mhm≠_node
;

47 
ovsdb_èbÀ
 *
	mèbÀ
;

48 
ovsdb_txn_row
 *
	mtxn_row
;

51 
li°
 
	m§c_ªfs
;

52 
li°
 
	md°_ªfs
;

59 
size_t
 
	mn_ªfs
;

63 
ovsdb_d©um
 
	mfõlds
[];

70 
ovsdb_row
 *
ovsdb_row_¸óã
(c⁄° 
ovsdb_èbÀ
 *);

71 
ovsdb_row
 *
ovsdb_row_˛⁄e
(const ovsdb_row *);

72 
ovsdb_row_de°roy
(
ovsdb_row
 *);

74 
uöt32_t
 
ovsdb_row_hash_cﬁumns
(c⁄° 
ovsdb_row
 *,

75 c⁄° 
ovsdb_cﬁumn_£t
 *,

76 
uöt32_t
 
basis
);

77 
boﬁ
 
ovsdb_row_equÆ_cﬁumns
(c⁄° 
ovsdb_row
 *,

78 c⁄° 
ovsdb_row
 *,

79 c⁄° 
ovsdb_cﬁumn_£t
 *);

80 
ovsdb_row_com∑ª_cﬁumns_3way
(c⁄° 
ovsdb_row
 *,

81 c⁄° 
ovsdb_row
 *,

82 c⁄° 
ovsdb_cﬁumn_£t
 *);

83 
ovsdb_row_upd©e_cﬁumns
(
ovsdb_row
 *, const ovsdb_row *,

84 c⁄° 
ovsdb_cﬁumn_£t
 *);

85 
ovsdb_row_cﬁumns_to_°rög
(c⁄° 
ovsdb_row
 *,

86 c⁄° 
ovsdb_cﬁumn_£t
 *, 
ds
 *);

87 
ovsdb_îr‹
 *
	$ovsdb_row_‰om_js⁄
(
ovsdb_row
 *,

88 c⁄° 
js⁄
 *,

89 
ovsdb_symbﬁ_èbÀ
 *,

90 
ovsdb_cﬁumn_£t
 *
ö˛uded
)

91 
WARN_UNUSED_RESULT
;

92 
js⁄
 *
	`ovsdb_row_to_js⁄
(c⁄° 
ovsdb_row
 *,

93 c⁄° 
ovsdb_cﬁumn_£t
 *
ö˛ude
);

95 
ölöe
 c⁄° 
uuid
 *

96 
	$ovsdb_row_gë_uuid
(c⁄° 
ovsdb_row
 *
row
)

98  &
row
->
fõlds
[
OVSDB_COL_UUID
].
keys
[0].
uuid
;

99 
	}
}

101 
ölöe
 
uuid
 *

102 
	$ovsdb_row_gë_uuid_rw
(
ovsdb_row
 *
row
)

104  &
row
->
fõlds
[
OVSDB_COL_UUID
].
keys
[0].
uuid
;

105 
	}
}

107 
ölöe
 c⁄° 
uuid
 *

108 
	$ovsdb_row_gë_vîsi⁄
(c⁄° 
ovsdb_row
 *
row
)

110  &
row
->
fõlds
[
OVSDB_COL_VERSION
].
keys
[0].
uuid
;

111 
	}
}

113 
ölöe
 
uuid
 *

114 
	$ovsdb_row_gë_vîsi⁄_rw
(
ovsdb_row
 *
row
)

116  &
row
->
fõlds
[
OVSDB_COL_VERSION
].
keys
[0].
uuid
;

117 
	}
}

119 
ölöe
 
uöt32_t


120 
	$ovsdb_row_hash
(c⁄° 
ovsdb_row
 *
row
)

122  
	`uuid_hash
(
	`ovsdb_row_gë_uuid
(
row
));

123 
	}
}

126 
	sovsdb_row_£t
 {

127 c⁄° 
ovsdb_row
 **
	mrows
;

128 
size_t
 
	mn_rows
, 
	mÆloˇãd_rows
;

131 
	#OVSDB_ROW_SET_INITIALIZER
 { 
NULL
, 0, 0 }

	)

133 
ovsdb_row_£t_öô
(
ovsdb_row_£t
 *);

134 
ovsdb_row_£t_de°roy
(
ovsdb_row_£t
 *);

135 
ovsdb_row_£t_add_row
(
ovsdb_row_£t
 *, c⁄° 
ovsdb_row
 *);

137 
js⁄
 *
ovsdb_row_£t_to_js⁄
(c⁄° 
ovsdb_row_£t
 *,

138 c⁄° 
ovsdb_cﬁumn_£t
 *);

140 
ovsdb_row_£t_s‹t
(
ovsdb_row_£t
 *,

141 c⁄° 
ovsdb_cﬁumn_£t
 *);

148 
	sovsdb_row_hash
 {

149 
hm≠
 
	mrows
;

150 
ovsdb_cﬁumn_£t
 
	mcﬁumns
;

153 
	#OVSDB_ROW_HASH_INITIALIZER
(
RH
) \

154 { 
	`HMAP_INITIALIZER
(&(
RH
).
rows
), 
OVSDB_COLUMN_SET_INITIALIZER
 }

	)

156 
	sovsdb_row_hash_node
 {

157 
hm≠_node
 
	mhm≠_node
;

158 c⁄° 
ovsdb_row
 *
	mrow
;

161 
ovsdb_row_hash_öô
(
ovsdb_row_hash
 *,

162 c⁄° 
ovsdb_cﬁumn_£t
 *);

163 
ovsdb_row_hash_de°roy
(
ovsdb_row_hash
 *, 
boﬁ
 
de°roy_rows
);

164 
size_t
 
ovsdb_row_hash_cou¡
(c⁄° 
ovsdb_row_hash
 *);

165 
boﬁ
 
ovsdb_row_hash_c⁄èös
(c⁄° 
ovsdb_row_hash
 *,

166 c⁄° 
ovsdb_row
 *);

167 
boﬁ
 
ovsdb_row_hash_c⁄èös_Æl
(c⁄° 
ovsdb_row_hash
 *,

168 c⁄° 
ovsdb_row_hash
 *);

169 
boﬁ
 
ovsdb_row_hash_ö£π
(
ovsdb_row_hash
 *, c⁄° 
ovsdb_row
 *);

170 
boﬁ
 
ovsdb_row_hash_c⁄èös__
(c⁄° 
ovsdb_row_hash
 *,

171 c⁄° 
ovsdb_row
 *, 
size_t
 
hash
);

172 
boﬁ
 
ovsdb_row_hash_ö£π__
(
ovsdb_row_hash
 *,

173 c⁄° 
ovsdb_row
 *, 
size_t
 
hash
);

	@ovsdb/server.h

16 #i‚de‡
SERVER_H


17 
	#SERVER_H
 1

	)

19 
	~"hm≠.h
"

20 
	~"li°.h
"

21 
	~"shash.h
"

23 
	govsdb
;

24 
	govsdb_£rvî
;

29 
	sovsdb_£ssi⁄
 {

30 
ovsdb_£rvî
 *
	m£rvî
;

31 
li°
 
	mcom∂ëi⁄s
;

32 
hm≠
 
	mwaôîs
;

35 
ovsdb_£ssi⁄_öô
(
ovsdb_£ssi⁄
 *, 
ovsdb_£rvî
 *);

36 
ovsdb_£ssi⁄_de°roy
(
ovsdb_£ssi⁄
 *);

38 
ovsdb_lock_waôî
 *
ovsdb_£ssi⁄_gë_lock_waôî
(

39 c⁄° 
ovsdb_£ssi⁄
 *, c⁄° *
lock_«me
);

45 
	sovsdb_lock
 {

46 
hm≠_node
 
	mhm≠_node
;

47 
ovsdb_£rvî
 *
	m£rvî
;

48 *
	m«me
;

49 
li°
 
	mwaôîs
;

52 
ovsdb_lock_waôî
 *
ovsdb_lock_gë_ow√r
(c⁄° 
ovsdb_lock
 *);

55 
	eovsdb_lock_mode
 {

56 
	mOVSDB_LOCK_WAIT
,

57 
	mOVSDB_LOCK_STEAL


61 
	sovsdb_lock_waôî
 {

62 
hm≠_node
 
	m£ssi⁄_node
;

63 
ovsdb_lock
 *
	mlock
;

65 
ovsdb_lock_mode
 
	mmode
;

66 *
	mlock_«me
;

68 
ovsdb_£ssi⁄
 *
	m£ssi⁄
;

69 
li°
 
	mlock_node
;

72 
ovsdb_£ssi⁄
 *
ovsdb_lock_waôî_ªmove
(
ovsdb_lock_waôî
 *);

73 
ovsdb_lock_waôî_de°roy
(
ovsdb_lock_waôî
 *);

74 
boﬁ
 
ovsdb_lock_waôî_is_ow√r
(c⁄° 
ovsdb_lock_waôî
 *);

79 
	sovsdb_£rvî
 {

80 
shash
 
	mdbs
;

81 
hm≠
 
	mlocks
;

84 
ovsdb_£rvî_öô
(
ovsdb_£rvî
 *);

85 
boﬁ
 
ovsdb_£rvî_add_db
(
ovsdb_£rvî
 *, 
ovsdb
 *);

86 
ovsdb_£rvî_de°roy
(
ovsdb_£rvî
 *);

88 
ovsdb_lock_waôî
 *
ovsdb_£rvî_lock
(
ovsdb_£rvî
 *,

89 
ovsdb_£ssi⁄
 *,

90 c⁄° *
lock_«me
,

91 
ovsdb_lock_mode
,

92 
ovsdb_£ssi⁄
 **
vi˘imp
);

	@ovsdb/table.h

16 #i‚de‡
OVSDB_TABLE_H


17 
	#OVSDB_TABLE_H
 1

	)

19 
	~<°dboﬁ.h
>

20 
	~"compûî.h
"

21 
	~"hm≠.h
"

22 
	~"shash.h
"

24 
	gjs⁄
;

25 
	guuid
;

28 
	sovsdb_èbÀ_schema
 {

29 *
	m«me
;

30 
boﬁ
 
	mmuèbÀ
;

31 
shash
 
	mcﬁumns
;

32 
	mmax_rows
;

33 
boﬁ
 
	mis_roŸ
;

34 
ovsdb_cﬁumn_£t
 *
	mödexes
;

35 
size_t
 
	mn_ödexes
;

38 
ovsdb_èbÀ_schema
 *
ovsdb_èbÀ_schema_¸óã
(

39 c⁄° *
«me
, 
boﬁ
 
muèbÀ
, 
max_rows
, boﬁ 
is_roŸ
);

40 
ovsdb_èbÀ_schema
 *
ovsdb_èbÀ_schema_˛⁄e
(

41 c⁄° 
ovsdb_èbÀ_schema
 *);

42 
ovsdb_èbÀ_schema_de°roy
(
ovsdb_èbÀ_schema
 *);

44 
ovsdb_îr‹
 *
	$ovsdb_èbÀ_schema_‰om_js⁄
(c⁄° 
js⁄
 *,

45 c⁄° *
«me
,

46 
ovsdb_èbÀ_schema
 **)

47 
WARN_UNUSED_RESULT
;

48 
js⁄
 *
	`ovsdb_èbÀ_schema_to_js⁄
(c⁄° 
ovsdb_èbÀ_schema
 *,

49 
boﬁ
 
deÁu…_is_roŸ
);

51 c⁄° 
ovsdb_cﬁumn
 *
	`ovsdb_èbÀ_schema_gë_cﬁumn
(

52 c⁄° 
ovsdb_èbÀ_schema
 *, c⁄° *
«me
);

56 
	sovsdb_èbÀ
 {

57 
ovsdb_èbÀ_schema
 *
schema
;

58 
ovsdb_txn_èbÀ
 *
txn_èbÀ
;

59 
hm≠
 
rows
;

64 
hm≠
 *
ödexes
;

67 
ovsdb_èbÀ
 *
	`ovsdb_èbÀ_¸óã
(
ovsdb_èbÀ_schema
 *);

68 
	`ovsdb_èbÀ_de°roy
(
ovsdb_èbÀ
 *);

70 c⁄° 
ovsdb_row
 *
	`ovsdb_èbÀ_gë_row
(c⁄° 
ovsdb_èbÀ
 *,

71 c⁄° 
uuid
 *);

	@ovsdb/transaction.h

16 #i‚de‡
OVSDB_TRANSACTION_H


17 
	#OVSDB_TRANSACTION_H
 1

	)

19 
	~<°dboﬁ.h
>

20 
	~"compûî.h
"

22 
	gjs⁄
;

23 
	govsdb
;

24 
	govsdb_èbÀ
;

25 
	guuid
;

27 
ovsdb_txn
 *
ovsdb_txn_¸óã
(
ovsdb
 *);

28 
ovsdb_txn_ab‹t
(
ovsdb_txn
 *);

29 
ovsdb_îr‹
 *
	$ovsdb_txn_commô
(
ovsdb_txn
 *, 
boﬁ
 
duøbÀ
)

30 
WARN_UNUSED_RESULT
;

32 
ovsdb_row
 *
	`ovsdb_txn_row_modify
(
ovsdb_txn
 *,

33 c⁄° 
ovsdb_row
 *);

34 
	`ovsdb_txn_row_ö£π
(
ovsdb_txn
 *, 
ovsdb_row
 *);

35 
	`ovsdb_txn_row_dñëe
(
ovsdb_txn
 *, c⁄° 
ovsdb_row
 *);

37 
boﬁ
 
	tovsdb_txn_row_cb_func
(c⁄° 
	tovsdb_row
 *
	tﬁd
,

38 c⁄° 
	tovsdb_row
 *
	t√w
,

39 c⁄° *
	tch™ged
,

40 *
	taux
);

41 
	`ovsdb_txn_f‹_óch_ch™ge
(c⁄° 
ovsdb_txn
 *,

42 
ovsdb_txn_row_cb_func
 *, *
aux
);

44 
	`ovsdb_txn_add_commít
(
ovsdb_txn
 *, const *);

45 c⁄° *
	`ovsdb_txn_gë_commít
(c⁄° 
ovsdb_txn
 *);

	@ovsdb/trigger.h

16 #i‚de‡
OVSDB_TRIGGER_H


17 
	#OVSDB_TRIGGER_H
 1

	)

19 
	~"li°.h
"

21 
	govsdb
;

23 
	sovsdb_åiggî
 {

24 
ovsdb_£ssi⁄
 *
	m£ssi⁄
;

25 
ovsdb
 *
	mdb
;

26 
li°
 
	mnode
;

28 
js⁄
 *
	mªque°
;

29 
js⁄
 *
	mªsu…
;

30 
	m¸óãd
;

31 
	mtimeout_m£c
;

34 
ovsdb_åiggî_öô
(
ovsdb_£ssi⁄
 *, 
ovsdb
 *,

35 
ovsdb_åiggî
 *,

36 
js⁄
 *
ªque°
, 
now
);

37 
ovsdb_åiggî_de°roy
(
ovsdb_åiggî
 *);

39 
boﬁ
 
ovsdb_åiggî_is_com∂ëe
(c⁄° 
ovsdb_åiggî
 *);

40 
js⁄
 *
ovsdb_åiggî_°ól_ªsu…
(
ovsdb_åiggî
 *);

42 
ovsdb_åiggî_run
(
ovsdb
 *, 
now
);

43 
ovsdb_åiggî_waô
(
ovsdb
 *, 
now
);

	@tests/idltest.h

3 #i‚de‡
IDLTEST_IDL_HEADER


4 
	#IDLTEST_IDL_HEADER
 1

	)

6 
	~<°dboﬁ.h
>

7 
	~<°ddef.h
>

8 
	~<°döt.h
>

9 
	~"ovsdb-d©a.h
"

10 
	~"ovsdb-idl-¥ovidî.h
"

11 
	~"sm≠.h
"

12 
	~"uuid.h
"

15 
	sid…e°_lök1
 {

16 
ovsdb_idl_row
 
	mhódî_
;

19 
öt64_t
 
	mi
;

22 
id…e°_lök1
 *
	mk
;

25 
id…e°_lök1
 **
	mka
;

26 
size_t
 
	mn_ka
;

29 
id…e°_lök2
 *
	ml2
;

33 
	mIDLTEST_LINK1_COL_I
,

34 
	mIDLTEST_LINK1_COL_K
,

35 
	mIDLTEST_LINK1_COL_KA
,

36 
	mIDLTEST_LINK1_COL_L2
,

37 
	mIDLTEST_LINK1_N_COLUMNS


40 
	#id…e°_lök1_cﬁ_i
 (
id…e°_lök1_cﬁumns
[
IDLTEST_LINK1_COL_I
])

	)

41 
	#id…e°_lök1_cﬁ_k
 (
id…e°_lök1_cﬁumns
[
IDLTEST_LINK1_COL_K
])

	)

42 
	#id…e°_lök1_cﬁ_l2
 (
id…e°_lök1_cﬁumns
[
IDLTEST_LINK1_COL_L2
])

	)

43 
	#id…e°_lök1_cﬁ_ka
 (
id…e°_lök1_cﬁumns
[
IDLTEST_LINK1_COL_KA
])

	)

45 
ovsdb_idl_cﬁumn
 
id…e°_lök1_cﬁumns
[
IDLTEST_LINK1_N_COLUMNS
];

47 c⁄° 
id…e°_lök1
 *
id…e°_lök1_fú°
(c⁄° 
ovsdb_idl
 *);

48 c⁄° 
id…e°_lök1
 *
id…e°_lök1_√xt
(const idltest_link1 *);

49 
	#IDLTEST_LINK1_FOR_EACH
(
ROW
, 
IDL
) \

50 (
ROW
Ë
	`id…e°_lök1_fú°
(
IDL
); \

51 (
ROW
); \

52 (
ROW
Ë
	`id…e°_lök1_√xt
(ROW))

	)

53 
	#IDLTEST_LINK1_FOR_EACH_SAFE
(
ROW
, 
NEXT
, 
IDL
) \

54 (
ROW
Ë
	`id…e°_lök1_fú°
(
IDL
); \

55 (
ROW
Ë? ((
NEXT
Ë
	`id…e°_lök1_√xt
(ROW), 1) : 0; \

56 (
ROW
Ë(
NEXT
))

	)

58 
id…e°_lök1_öô
(
id…e°_lök1
 *);

59 
id…e°_lök1_dñëe
(c⁄° 
id…e°_lök1
 *);

60 
id…e°_lök1
 *
id…e°_lök1_ö£π
(
ovsdb_idl_txn
 *);

62 
id…e°_lök1_vîify_i
(c⁄° 
id…e°_lök1
 *);

63 
id…e°_lök1_vîify_k
(c⁄° 
id…e°_lök1
 *);

64 
id…e°_lök1_vîify_ka
(c⁄° 
id…e°_lök1
 *);

65 
id…e°_lök1_vîify_l2
(c⁄° 
id…e°_lök1
 *);

70 c⁄° 
ovsdb_d©um
 *
id…e°_lök1_gë_i
(c⁄° 
id…e°_lök1
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

71 c⁄° 
ovsdb_d©um
 *
id…e°_lök1_gë_k
(c⁄° 
id…e°_lök1
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

72 c⁄° 
ovsdb_d©um
 *
id…e°_lök1_gë_ka
(c⁄° 
id…e°_lök1
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

73 c⁄° 
ovsdb_d©um
 *
id…e°_lök1_gë_l2
(c⁄° 
id…e°_lök1
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

75 
id…e°_lök1_£t_i
(c⁄° 
id…e°_lök1
 *, 
öt64_t
 
i
);

76 
id…e°_lök1_£t_k
(c⁄° 
id…e°_lök1
 *, c⁄° id…e°_lök1 *
k
);

77 
id…e°_lök1_£t_ka
(c⁄° 
id…e°_lök1
 *, id…e°_lök1 **
ka
, 
size_t
 
n_ka
);

78 
id…e°_lök1_£t_l2
(c⁄° 
id…e°_lök1
 *, c⁄° 
id…e°_lök2
 *
l2
);

82 
	sid…e°_lök2
 {

83 
ovsdb_idl_row
 
	mhódî_
;

86 
öt64_t
 
	mi
;

89 
id…e°_lök1
 *
	ml1
;

93 
	mIDLTEST_LINK2_COL_I
,

94 
	mIDLTEST_LINK2_COL_L1
,

95 
	mIDLTEST_LINK2_N_COLUMNS


98 
	#id…e°_lök2_cﬁ_i
 (
id…e°_lök2_cﬁumns
[
IDLTEST_LINK2_COL_I
])

	)

99 
	#id…e°_lök2_cﬁ_l1
 (
id…e°_lök2_cﬁumns
[
IDLTEST_LINK2_COL_L1
])

	)

101 
ovsdb_idl_cﬁumn
 
id…e°_lök2_cﬁumns
[
IDLTEST_LINK2_N_COLUMNS
];

103 c⁄° 
id…e°_lök2
 *
id…e°_lök2_fú°
(c⁄° 
ovsdb_idl
 *);

104 c⁄° 
id…e°_lök2
 *
id…e°_lök2_√xt
(const idltest_link2 *);

105 
	#IDLTEST_LINK2_FOR_EACH
(
ROW
, 
IDL
) \

106 (
ROW
Ë
	`id…e°_lök2_fú°
(
IDL
); \

107 (
ROW
); \

108 (
ROW
Ë
	`id…e°_lök2_√xt
(ROW))

	)

109 
	#IDLTEST_LINK2_FOR_EACH_SAFE
(
ROW
, 
NEXT
, 
IDL
) \

110 (
ROW
Ë
	`id…e°_lök2_fú°
(
IDL
); \

111 (
ROW
Ë? ((
NEXT
Ë
	`id…e°_lök2_√xt
(ROW), 1) : 0; \

112 (
ROW
Ë(
NEXT
))

	)

114 
id…e°_lök2_öô
(
id…e°_lök2
 *);

115 
id…e°_lök2_dñëe
(c⁄° 
id…e°_lök2
 *);

116 
id…e°_lök2
 *
id…e°_lök2_ö£π
(
ovsdb_idl_txn
 *);

118 
id…e°_lök2_vîify_i
(c⁄° 
id…e°_lök2
 *);

119 
id…e°_lök2_vîify_l1
(c⁄° 
id…e°_lök2
 *);

124 c⁄° 
ovsdb_d©um
 *
id…e°_lök2_gë_i
(c⁄° 
id…e°_lök2
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

125 c⁄° 
ovsdb_d©um
 *
id…e°_lök2_gë_l1
(c⁄° 
id…e°_lök2
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

127 
id…e°_lök2_£t_i
(c⁄° 
id…e°_lök2
 *, 
öt64_t
 
i
);

128 
id…e°_lök2_£t_l1
(c⁄° 
id…e°_lök2
 *, c⁄° 
id…e°_lök1
 *
l1
);

132 
	sid…e°_sim∂e
 {

133 
ovsdb_idl_row
 
	mhódî_
;

136 
boﬁ
 
	mb
;

139 
boﬁ
 *
	mba
;

140 
size_t
 
	mn_ba
;

143 
öt64_t
 
	mi
;

146 
öt64_t
 *
	mü
;

147 
size_t
 
	mn_ü
;

150 
	mr
;

153 *
	mø
;

154 
size_t
 
	mn_ø
;

157 *
	ms
;

160 **
	mß
;

161 
size_t
 
	mn_ß
;

164 
uuid
 
	mu
;

167 
uuid
 *
	mua
;

168 
size_t
 
	mn_ua
;

172 
	mIDLTEST_SIMPLE_COL_B
,

173 
	mIDLTEST_SIMPLE_COL_BA
,

174 
	mIDLTEST_SIMPLE_COL_I
,

175 
	mIDLTEST_SIMPLE_COL_IA
,

176 
	mIDLTEST_SIMPLE_COL_R
,

177 
	mIDLTEST_SIMPLE_COL_RA
,

178 
	mIDLTEST_SIMPLE_COL_S
,

179 
	mIDLTEST_SIMPLE_COL_SA
,

180 
	mIDLTEST_SIMPLE_COL_U
,

181 
	mIDLTEST_SIMPLE_COL_UA
,

182 
	mIDLTEST_SIMPLE_N_COLUMNS


185 
	#id…e°_sim∂e_cﬁ_b
 (
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_COL_B
])

	)

186 
	#id…e°_sim∂e_cﬁ_ba
 (
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_COL_BA
])

	)

187 
	#id…e°_sim∂e_cﬁ_i
 (
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_COL_I
])

	)

188 
	#id…e°_sim∂e_cﬁ_s
 (
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_COL_S
])

	)

189 
	#id…e°_sim∂e_cﬁ_r
 (
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_COL_R
])

	)

190 
	#id…e°_sim∂e_cﬁ_u
 (
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_COL_U
])

	)

191 
	#id…e°_sim∂e_cﬁ_ø
 (
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_COL_RA
])

	)

192 
	#id…e°_sim∂e_cﬁ_ü
 (
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_COL_IA
])

	)

193 
	#id…e°_sim∂e_cﬁ_ß
 (
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_COL_SA
])

	)

194 
	#id…e°_sim∂e_cﬁ_ua
 (
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_COL_UA
])

	)

196 
ovsdb_idl_cﬁumn
 
id…e°_sim∂e_cﬁumns
[
IDLTEST_SIMPLE_N_COLUMNS
];

198 c⁄° 
id…e°_sim∂e
 *
id…e°_sim∂e_fú°
(c⁄° 
ovsdb_idl
 *);

199 c⁄° 
id…e°_sim∂e
 *
id…e°_sim∂e_√xt
(const idltest_simple *);

200 
	#IDLTEST_SIMPLE_FOR_EACH
(
ROW
, 
IDL
) \

201 (
ROW
Ë
	`id…e°_sim∂e_fú°
(
IDL
); \

202 (
ROW
); \

203 (
ROW
Ë
	`id…e°_sim∂e_√xt
(ROW))

	)

204 
	#IDLTEST_SIMPLE_FOR_EACH_SAFE
(
ROW
, 
NEXT
, 
IDL
) \

205 (
ROW
Ë
	`id…e°_sim∂e_fú°
(
IDL
); \

206 (
ROW
Ë? ((
NEXT
Ë
	`id…e°_sim∂e_√xt
(ROW), 1) : 0; \

207 (
ROW
Ë(
NEXT
))

	)

209 
id…e°_sim∂e_öô
(
id…e°_sim∂e
 *);

210 
id…e°_sim∂e_dñëe
(c⁄° 
id…e°_sim∂e
 *);

211 
id…e°_sim∂e
 *
id…e°_sim∂e_ö£π
(
ovsdb_idl_txn
 *);

213 
id…e°_sim∂e_vîify_b
(c⁄° 
id…e°_sim∂e
 *);

214 
id…e°_sim∂e_vîify_ba
(c⁄° 
id…e°_sim∂e
 *);

215 
id…e°_sim∂e_vîify_i
(c⁄° 
id…e°_sim∂e
 *);

216 
id…e°_sim∂e_vîify_ü
(c⁄° 
id…e°_sim∂e
 *);

217 
id…e°_sim∂e_vîify_r
(c⁄° 
id…e°_sim∂e
 *);

218 
id…e°_sim∂e_vîify_ø
(c⁄° 
id…e°_sim∂e
 *);

219 
id…e°_sim∂e_vîify_s
(c⁄° 
id…e°_sim∂e
 *);

220 
id…e°_sim∂e_vîify_ß
(c⁄° 
id…e°_sim∂e
 *);

221 
id…e°_sim∂e_vîify_u
(c⁄° 
id…e°_sim∂e
 *);

222 
id…e°_sim∂e_vîify_ua
(c⁄° 
id…e°_sim∂e
 *);

227 c⁄° 
ovsdb_d©um
 *
id…e°_sim∂e_gë_b
(c⁄° 
id…e°_sim∂e
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

228 c⁄° 
ovsdb_d©um
 *
id…e°_sim∂e_gë_ba
(c⁄° 
id…e°_sim∂e
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

229 c⁄° 
ovsdb_d©um
 *
id…e°_sim∂e_gë_i
(c⁄° 
id…e°_sim∂e
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

230 c⁄° 
ovsdb_d©um
 *
id…e°_sim∂e_gë_ü
(c⁄° 
id…e°_sim∂e
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

231 c⁄° 
ovsdb_d©um
 *
id…e°_sim∂e_gë_r
(c⁄° 
id…e°_sim∂e
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

232 c⁄° 
ovsdb_d©um
 *
id…e°_sim∂e_gë_ø
(c⁄° 
id…e°_sim∂e
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

233 c⁄° 
ovsdb_d©um
 *
id…e°_sim∂e_gë_s
(c⁄° 
id…e°_sim∂e
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

234 c⁄° 
ovsdb_d©um
 *
id…e°_sim∂e_gë_ß
(c⁄° 
id…e°_sim∂e
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

235 c⁄° 
ovsdb_d©um
 *
id…e°_sim∂e_gë_u
(c⁄° 
id…e°_sim∂e
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

236 c⁄° 
ovsdb_d©um
 *
id…e°_sim∂e_gë_ua
(c⁄° 
id…e°_sim∂e
 *, 
ovsdb_©omic_ty≥
 
key_ty≥
);

238 
id…e°_sim∂e_£t_b
(c⁄° 
id…e°_sim∂e
 *, 
boﬁ
 
b
);

239 
id…e°_sim∂e_£t_ba
(c⁄° 
id…e°_sim∂e
 *, c⁄° 
boﬁ
 *
ba
, 
size_t
 
n_ba
);

240 
id…e°_sim∂e_£t_i
(c⁄° 
id…e°_sim∂e
 *, 
öt64_t
 
i
);

241 
id…e°_sim∂e_£t_ü
(c⁄° 
id…e°_sim∂e
 *, c⁄° 
öt64_t
 *
ü
, 
size_t
 
n_ü
);

242 
id…e°_sim∂e_£t_r
(c⁄° 
id…e°_sim∂e
 *, 
r
);

243 
id…e°_sim∂e_£t_ø
(c⁄° 
id…e°_sim∂e
 *, c⁄° *
ø
, 
size_t
 
n_ø
);

244 
id…e°_sim∂e_£t_s
(c⁄° 
id…e°_sim∂e
 *, c⁄° *
s
);

245 
id…e°_sim∂e_£t_ß
(c⁄° 
id…e°_sim∂e
 *, **
ß
, 
size_t
 
n_ß
);

246 
id…e°_sim∂e_£t_u
(c⁄° 
id…e°_sim∂e
 *, 
uuid
 
u
);

247 
id…e°_sim∂e_£t_ua
(c⁄° 
id…e°_sim∂e
 *, c⁄° 
uuid
 *
ua
, 
size_t
 
n_ua
);

251 
	mIDLTEST_TABLE_LINK1
,

252 
	mIDLTEST_TABLE_LINK2
,

253 
	mIDLTEST_TABLE_SIMPLE
,

254 
	mIDLTEST_N_TABLES


257 
	#id…e°_èbÀ_sim∂e
 (
id…e°_èbÀ_˛as£s
[
IDLTEST_TABLE_SIMPLE
])

	)

258 
	#id…e°_èbÀ_lök1
 (
id…e°_èbÀ_˛as£s
[
IDLTEST_TABLE_LINK1
])

	)

259 
	#id…e°_èbÀ_lök2
 (
id…e°_èbÀ_˛as£s
[
IDLTEST_TABLE_LINK2
])

	)

261 
ovsdb_idl_èbÀ_˛ass
 
id…e°_èbÀ_˛as£s
[
IDLTEST_N_TABLES
];

263 
ovsdb_idl_˛ass
 
id…e°_idl_˛ass
;

265 
id…e°_öô
();

	@
1
.
0
480
26765
/home/lsch/mytest/openvswitch-1.9.0/config.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/actions.c
/home/lsch/mytest/openvswitch-1.9.0/datapath/brcompat_main.c
/home/lsch/mytest/openvswitch-1.9.0/datapath/checksum.c
/home/lsch/mytest/openvswitch-1.9.0/datapath/checksum.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/compat.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/datapath.c
/home/lsch/mytest/openvswitch-1.9.0/datapath/datapath.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/dp_notify.c
/home/lsch/mytest/openvswitch-1.9.0/datapath/dp_sysfs.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/dp_sysfs_dp.c
/home/lsch/mytest/openvswitch-1.9.0/datapath/dp_sysfs_if.c
/home/lsch/mytest/openvswitch-1.9.0/datapath/flow.c
/home/lsch/mytest/openvswitch-1.9.0/datapath/flow.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/genl_exec.c
/home/lsch/mytest/openvswitch-1.9.0/datapath/genl_exec.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/gf256.c
/home/lsch/mytest/openvswitch-1.9.0/datapath/gf256.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/brcompat.mod.c
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/addrconf_core-openvswitch.c
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/dev-openvswitch.c
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/exthdrs_core.c
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/flex_array.c
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/genetlink-brcompat.c
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/genetlink-openvswitch.c
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/bug.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/compiler-gcc.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/compiler.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/cpumask.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/dmi.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/err.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/etherdevice.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/flex_array.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/genetlink.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/icmp.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/icmpv6.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/if.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/if_arp.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/if_ether.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/if_vlan.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/in.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/inetdevice.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/ip.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/ipv6.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/jiffies.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/kernel.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/kobject.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/lockdep.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/log2.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/mutex.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/net.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/netdevice.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/netfilter_bridge.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/netfilter_ipv4.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/netlink.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/poison.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/rculist.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/rcupdate.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/reciprocal_div.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/rtnetlink.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/skbuff.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/slab.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/stddef.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/tcp.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/timer.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/types.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/u64_stats_sync.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/udp.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/linux/workqueue.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/net/checksum.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/net/dst.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/net/genetlink.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/net/inet_frag.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/net/ip.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/net/ipv6.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/net/net_namespace.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/net/netlink.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/net/netns/generic.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/net/protocol.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/net/route.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/include/net/sock.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/ip_output-openvswitch.c
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/kmemdup.c
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/net_namespace.c
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/netdevice.c
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/reciprocal_div.c
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/skbuff-openvswitch.c
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/time.c
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/compat/workqueue.c
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/kcompat.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/linux/openvswitch.mod.c
/home/lsch/mytest/openvswitch-1.9.0/datapath/liu_buffer.c
/home/lsch/mytest/openvswitch-1.9.0/datapath/liu_buffer.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/matrix.c
/home/lsch/mytest/openvswitch-1.9.0/datapath/matrix.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/tunnel.c
/home/lsch/mytest/openvswitch-1.9.0/datapath/tunnel.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/vlan.c
/home/lsch/mytest/openvswitch-1.9.0/datapath/vlan.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/vport-capwap.c
/home/lsch/mytest/openvswitch-1.9.0/datapath/vport-capwap.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/vport-generic.c
/home/lsch/mytest/openvswitch-1.9.0/datapath/vport-generic.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/vport-gre.c
/home/lsch/mytest/openvswitch-1.9.0/datapath/vport-internal_dev.c
/home/lsch/mytest/openvswitch-1.9.0/datapath/vport-internal_dev.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/vport-netdev.c
/home/lsch/mytest/openvswitch-1.9.0/datapath/vport-netdev.h
/home/lsch/mytest/openvswitch-1.9.0/datapath/vport-patch.c
/home/lsch/mytest/openvswitch-1.9.0/datapath/vport.c
/home/lsch/mytest/openvswitch-1.9.0/datapath/vport.h
/home/lsch/mytest/openvswitch-1.9.0/include/linux/openvswitch.h
/home/lsch/mytest/openvswitch-1.9.0/include/linux/types.h
/home/lsch/mytest/openvswitch-1.9.0/include/openflow/nicira-ext.h
/home/lsch/mytest/openvswitch-1.9.0/include/openflow/openflow-1.0.h
/home/lsch/mytest/openvswitch-1.9.0/include/openflow/openflow-1.1.h
/home/lsch/mytest/openvswitch-1.9.0/include/openflow/openflow-1.2.h
/home/lsch/mytest/openvswitch-1.9.0/include/openflow/openflow-common.h
/home/lsch/mytest/openvswitch-1.9.0/include/openflow/openflow-nc.h
/home/lsch/mytest/openvswitch-1.9.0/include/openflow/openflow.h
/home/lsch/mytest/openvswitch-1.9.0/include/openvswitch/brcompat-netlink.h
/home/lsch/mytest/openvswitch-1.9.0/include/openvswitch/datapath-compat.h
/home/lsch/mytest/openvswitch-1.9.0/include/openvswitch/tunnel.h
/home/lsch/mytest/openvswitch-1.9.0/include/openvswitch/types.h
/home/lsch/mytest/openvswitch-1.9.0/include/sparse/arpa/inet.h
/home/lsch/mytest/openvswitch-1.9.0/include/sparse/assert.h
/home/lsch/mytest/openvswitch-1.9.0/include/sparse/math.h
/home/lsch/mytest/openvswitch-1.9.0/include/sparse/netinet/in.h
/home/lsch/mytest/openvswitch-1.9.0/include/sparse/netinet/ip6.h
/home/lsch/mytest/openvswitch-1.9.0/include/sparse/sys/socket.h
/home/lsch/mytest/openvswitch-1.9.0/include/sparse/sys/wait.h
/home/lsch/mytest/openvswitch-1.9.0/lib/aes128.c
/home/lsch/mytest/openvswitch-1.9.0/lib/aes128.h
/home/lsch/mytest/openvswitch-1.9.0/lib/autopath.c
/home/lsch/mytest/openvswitch-1.9.0/lib/autopath.h
/home/lsch/mytest/openvswitch-1.9.0/lib/backtrace.c
/home/lsch/mytest/openvswitch-1.9.0/lib/backtrace.h
/home/lsch/mytest/openvswitch-1.9.0/lib/bitmap.c
/home/lsch/mytest/openvswitch-1.9.0/lib/bitmap.h
/home/lsch/mytest/openvswitch-1.9.0/lib/bond.c
/home/lsch/mytest/openvswitch-1.9.0/lib/bond.h
/home/lsch/mytest/openvswitch-1.9.0/lib/bundle.c
/home/lsch/mytest/openvswitch-1.9.0/lib/bundle.h
/home/lsch/mytest/openvswitch-1.9.0/lib/byte-order.h
/home/lsch/mytest/openvswitch-1.9.0/lib/byteq.c
/home/lsch/mytest/openvswitch-1.9.0/lib/byteq.h
/home/lsch/mytest/openvswitch-1.9.0/lib/cfm.c
/home/lsch/mytest/openvswitch-1.9.0/lib/cfm.h
/home/lsch/mytest/openvswitch-1.9.0/lib/classifier.c
/home/lsch/mytest/openvswitch-1.9.0/lib/classifier.h
/home/lsch/mytest/openvswitch-1.9.0/lib/command-line.c
/home/lsch/mytest/openvswitch-1.9.0/lib/command-line.h
/home/lsch/mytest/openvswitch-1.9.0/lib/compiler.h
/home/lsch/mytest/openvswitch-1.9.0/lib/coverage.c
/home/lsch/mytest/openvswitch-1.9.0/lib/coverage.h
/home/lsch/mytest/openvswitch-1.9.0/lib/csum.c
/home/lsch/mytest/openvswitch-1.9.0/lib/csum.h
/home/lsch/mytest/openvswitch-1.9.0/lib/daemon.c
/home/lsch/mytest/openvswitch-1.9.0/lib/daemon.h
/home/lsch/mytest/openvswitch-1.9.0/lib/dhcp.h
/home/lsch/mytest/openvswitch-1.9.0/lib/dhparams.c
/home/lsch/mytest/openvswitch-1.9.0/lib/dhparams.h
/home/lsch/mytest/openvswitch-1.9.0/lib/dirs.c
/home/lsch/mytest/openvswitch-1.9.0/lib/dirs.h
/home/lsch/mytest/openvswitch-1.9.0/lib/dpif-linux.c
/home/lsch/mytest/openvswitch-1.9.0/lib/dpif-linux.h
/home/lsch/mytest/openvswitch-1.9.0/lib/dpif-netdev.c
/home/lsch/mytest/openvswitch-1.9.0/lib/dpif-provider.h
/home/lsch/mytest/openvswitch-1.9.0/lib/dpif.c
/home/lsch/mytest/openvswitch-1.9.0/lib/dpif.h
/home/lsch/mytest/openvswitch-1.9.0/lib/dummy.c
/home/lsch/mytest/openvswitch-1.9.0/lib/dummy.h
/home/lsch/mytest/openvswitch-1.9.0/lib/dynamic-string.c
/home/lsch/mytest/openvswitch-1.9.0/lib/dynamic-string.h
/home/lsch/mytest/openvswitch-1.9.0/lib/entropy.c
/home/lsch/mytest/openvswitch-1.9.0/lib/entropy.h
/home/lsch/mytest/openvswitch-1.9.0/lib/fatal-signal.c
/home/lsch/mytest/openvswitch-1.9.0/lib/fatal-signal.h
/home/lsch/mytest/openvswitch-1.9.0/lib/flow.c
/home/lsch/mytest/openvswitch-1.9.0/lib/flow.h
/home/lsch/mytest/openvswitch-1.9.0/lib/hash.c
/home/lsch/mytest/openvswitch-1.9.0/lib/hash.h
/home/lsch/mytest/openvswitch-1.9.0/lib/heap.c
/home/lsch/mytest/openvswitch-1.9.0/lib/heap.h
/home/lsch/mytest/openvswitch-1.9.0/lib/hmap.c
/home/lsch/mytest/openvswitch-1.9.0/lib/hmap.h
/home/lsch/mytest/openvswitch-1.9.0/lib/hmapx.c
/home/lsch/mytest/openvswitch-1.9.0/lib/hmapx.h
/home/lsch/mytest/openvswitch-1.9.0/lib/json.c
/home/lsch/mytest/openvswitch-1.9.0/lib/json.h
/home/lsch/mytest/openvswitch-1.9.0/lib/jsonrpc.c
/home/lsch/mytest/openvswitch-1.9.0/lib/jsonrpc.h
/home/lsch/mytest/openvswitch-1.9.0/lib/lacp.c
/home/lsch/mytest/openvswitch-1.9.0/lib/lacp.h
/home/lsch/mytest/openvswitch-1.9.0/lib/leak-checker.c
/home/lsch/mytest/openvswitch-1.9.0/lib/leak-checker.h
/home/lsch/mytest/openvswitch-1.9.0/lib/learn.c
/home/lsch/mytest/openvswitch-1.9.0/lib/learn.h
/home/lsch/mytest/openvswitch-1.9.0/lib/learning-switch.c
/home/lsch/mytest/openvswitch-1.9.0/lib/learning-switch.h
/home/lsch/mytest/openvswitch-1.9.0/lib/list.c
/home/lsch/mytest/openvswitch-1.9.0/lib/list.h
/home/lsch/mytest/openvswitch-1.9.0/lib/lockfile.c
/home/lsch/mytest/openvswitch-1.9.0/lib/lockfile.h
/home/lsch/mytest/openvswitch-1.9.0/lib/mac-learning.c
/home/lsch/mytest/openvswitch-1.9.0/lib/mac-learning.h
/home/lsch/mytest/openvswitch-1.9.0/lib/match.c
/home/lsch/mytest/openvswitch-1.9.0/lib/match.h
/home/lsch/mytest/openvswitch-1.9.0/lib/memory.c
/home/lsch/mytest/openvswitch-1.9.0/lib/memory.h
/home/lsch/mytest/openvswitch-1.9.0/lib/meta-flow.c
/home/lsch/mytest/openvswitch-1.9.0/lib/meta-flow.h
/home/lsch/mytest/openvswitch-1.9.0/lib/multipath.c
/home/lsch/mytest/openvswitch-1.9.0/lib/multipath.h
/home/lsch/mytest/openvswitch-1.9.0/lib/netdev-bsd.c
/home/lsch/mytest/openvswitch-1.9.0/lib/netdev-dummy.c
/home/lsch/mytest/openvswitch-1.9.0/lib/netdev-linux.c
/home/lsch/mytest/openvswitch-1.9.0/lib/netdev-linux.h
/home/lsch/mytest/openvswitch-1.9.0/lib/netdev-provider.h
/home/lsch/mytest/openvswitch-1.9.0/lib/netdev-vport.c
/home/lsch/mytest/openvswitch-1.9.0/lib/netdev-vport.h
/home/lsch/mytest/openvswitch-1.9.0/lib/netdev.c
/home/lsch/mytest/openvswitch-1.9.0/lib/netdev.h
/home/lsch/mytest/openvswitch-1.9.0/lib/netflow.h
/home/lsch/mytest/openvswitch-1.9.0/lib/netlink-notifier.c
/home/lsch/mytest/openvswitch-1.9.0/lib/netlink-notifier.h
/home/lsch/mytest/openvswitch-1.9.0/lib/netlink-protocol.h
/home/lsch/mytest/openvswitch-1.9.0/lib/netlink-socket.c
/home/lsch/mytest/openvswitch-1.9.0/lib/netlink-socket.h
/home/lsch/mytest/openvswitch-1.9.0/lib/netlink.c
/home/lsch/mytest/openvswitch-1.9.0/lib/netlink.h
/home/lsch/mytest/openvswitch-1.9.0/lib/nx-match.c
/home/lsch/mytest/openvswitch-1.9.0/lib/nx-match.h
/home/lsch/mytest/openvswitch-1.9.0/lib/odp-util.c
/home/lsch/mytest/openvswitch-1.9.0/lib/odp-util.h
/home/lsch/mytest/openvswitch-1.9.0/lib/ofp-actions.c
/home/lsch/mytest/openvswitch-1.9.0/lib/ofp-actions.h
/home/lsch/mytest/openvswitch-1.9.0/lib/ofp-errors.c
/home/lsch/mytest/openvswitch-1.9.0/lib/ofp-errors.h
/home/lsch/mytest/openvswitch-1.9.0/lib/ofp-msgs.c
/home/lsch/mytest/openvswitch-1.9.0/lib/ofp-msgs.h
/home/lsch/mytest/openvswitch-1.9.0/lib/ofp-parse.c
/home/lsch/mytest/openvswitch-1.9.0/lib/ofp-parse.h
/home/lsch/mytest/openvswitch-1.9.0/lib/ofp-print.c
/home/lsch/mytest/openvswitch-1.9.0/lib/ofp-print.h
/home/lsch/mytest/openvswitch-1.9.0/lib/ofp-util.c
/home/lsch/mytest/openvswitch-1.9.0/lib/ofp-util.h
/home/lsch/mytest/openvswitch-1.9.0/lib/ofpbuf.c
/home/lsch/mytest/openvswitch-1.9.0/lib/ofpbuf.h
/home/lsch/mytest/openvswitch-1.9.0/lib/ovsdb-data.c
/home/lsch/mytest/openvswitch-1.9.0/lib/ovsdb-data.h
/home/lsch/mytest/openvswitch-1.9.0/lib/ovsdb-error.c
/home/lsch/mytest/openvswitch-1.9.0/lib/ovsdb-error.h
/home/lsch/mytest/openvswitch-1.9.0/lib/ovsdb-idl-provider.h
/home/lsch/mytest/openvswitch-1.9.0/lib/ovsdb-idl.c
/home/lsch/mytest/openvswitch-1.9.0/lib/ovsdb-idl.h
/home/lsch/mytest/openvswitch-1.9.0/lib/ovsdb-parser.c
/home/lsch/mytest/openvswitch-1.9.0/lib/ovsdb-parser.h
/home/lsch/mytest/openvswitch-1.9.0/lib/ovsdb-types.c
/home/lsch/mytest/openvswitch-1.9.0/lib/ovsdb-types.h
/home/lsch/mytest/openvswitch-1.9.0/lib/packets.c
/home/lsch/mytest/openvswitch-1.9.0/lib/packets.h
/home/lsch/mytest/openvswitch-1.9.0/lib/pcap.c
/home/lsch/mytest/openvswitch-1.9.0/lib/pcap.h
/home/lsch/mytest/openvswitch-1.9.0/lib/poll-loop.c
/home/lsch/mytest/openvswitch-1.9.0/lib/poll-loop.h
/home/lsch/mytest/openvswitch-1.9.0/lib/process.c
/home/lsch/mytest/openvswitch-1.9.0/lib/process.h
/home/lsch/mytest/openvswitch-1.9.0/lib/random.c
/home/lsch/mytest/openvswitch-1.9.0/lib/random.h
/home/lsch/mytest/openvswitch-1.9.0/lib/rconn.c
/home/lsch/mytest/openvswitch-1.9.0/lib/rconn.h
/home/lsch/mytest/openvswitch-1.9.0/lib/reconnect.c
/home/lsch/mytest/openvswitch-1.9.0/lib/reconnect.h
/home/lsch/mytest/openvswitch-1.9.0/lib/route-table-bsd.c
/home/lsch/mytest/openvswitch-1.9.0/lib/route-table-stub.c
/home/lsch/mytest/openvswitch-1.9.0/lib/route-table.c
/home/lsch/mytest/openvswitch-1.9.0/lib/route-table.h
/home/lsch/mytest/openvswitch-1.9.0/lib/rtbsd.c
/home/lsch/mytest/openvswitch-1.9.0/lib/rtbsd.h
/home/lsch/mytest/openvswitch-1.9.0/lib/rtnetlink-link.c
/home/lsch/mytest/openvswitch-1.9.0/lib/rtnetlink-link.h
/home/lsch/mytest/openvswitch-1.9.0/lib/sat-math.h
/home/lsch/mytest/openvswitch-1.9.0/lib/sflow.h
/home/lsch/mytest/openvswitch-1.9.0/lib/sflow_agent.c
/home/lsch/mytest/openvswitch-1.9.0/lib/sflow_api.h
/home/lsch/mytest/openvswitch-1.9.0/lib/sflow_poller.c
/home/lsch/mytest/openvswitch-1.9.0/lib/sflow_receiver.c
/home/lsch/mytest/openvswitch-1.9.0/lib/sflow_sampler.c
/home/lsch/mytest/openvswitch-1.9.0/lib/sha1.c
/home/lsch/mytest/openvswitch-1.9.0/lib/sha1.h
/home/lsch/mytest/openvswitch-1.9.0/lib/shash.c
/home/lsch/mytest/openvswitch-1.9.0/lib/shash.h
/home/lsch/mytest/openvswitch-1.9.0/lib/signals.c
/home/lsch/mytest/openvswitch-1.9.0/lib/signals.h
/home/lsch/mytest/openvswitch-1.9.0/lib/simap.c
/home/lsch/mytest/openvswitch-1.9.0/lib/simap.h
/home/lsch/mytest/openvswitch-1.9.0/lib/smap.c
/home/lsch/mytest/openvswitch-1.9.0/lib/smap.h
/home/lsch/mytest/openvswitch-1.9.0/lib/socket-util.c
/home/lsch/mytest/openvswitch-1.9.0/lib/socket-util.h
/home/lsch/mytest/openvswitch-1.9.0/lib/sort.c
/home/lsch/mytest/openvswitch-1.9.0/lib/sort.h
/home/lsch/mytest/openvswitch-1.9.0/lib/sset.c
/home/lsch/mytest/openvswitch-1.9.0/lib/sset.h
/home/lsch/mytest/openvswitch-1.9.0/lib/stp.c
/home/lsch/mytest/openvswitch-1.9.0/lib/stp.h
/home/lsch/mytest/openvswitch-1.9.0/lib/stream-fd.c
/home/lsch/mytest/openvswitch-1.9.0/lib/stream-fd.h
/home/lsch/mytest/openvswitch-1.9.0/lib/stream-nossl.c
/home/lsch/mytest/openvswitch-1.9.0/lib/stream-provider.h
/home/lsch/mytest/openvswitch-1.9.0/lib/stream-ssl.c
/home/lsch/mytest/openvswitch-1.9.0/lib/stream-ssl.h
/home/lsch/mytest/openvswitch-1.9.0/lib/stream-tcp.c
/home/lsch/mytest/openvswitch-1.9.0/lib/stream-unix.c
/home/lsch/mytest/openvswitch-1.9.0/lib/stream.c
/home/lsch/mytest/openvswitch-1.9.0/lib/stream.h
/home/lsch/mytest/openvswitch-1.9.0/lib/stress.c
/home/lsch/mytest/openvswitch-1.9.0/lib/stress.h
/home/lsch/mytest/openvswitch-1.9.0/lib/string.c
/home/lsch/mytest/openvswitch-1.9.0/lib/string.h
/home/lsch/mytest/openvswitch-1.9.0/lib/svec.c
/home/lsch/mytest/openvswitch-1.9.0/lib/svec.h
/home/lsch/mytest/openvswitch-1.9.0/lib/table.c
/home/lsch/mytest/openvswitch-1.9.0/lib/table.h
/home/lsch/mytest/openvswitch-1.9.0/lib/tag.c
/home/lsch/mytest/openvswitch-1.9.0/lib/tag.h
/home/lsch/mytest/openvswitch-1.9.0/lib/timer.c
/home/lsch/mytest/openvswitch-1.9.0/lib/timer.h
/home/lsch/mytest/openvswitch-1.9.0/lib/timeval.c
/home/lsch/mytest/openvswitch-1.9.0/lib/timeval.h
/home/lsch/mytest/openvswitch-1.9.0/lib/token-bucket.c
/home/lsch/mytest/openvswitch-1.9.0/lib/token-bucket.h
/home/lsch/mytest/openvswitch-1.9.0/lib/type-props.h
/home/lsch/mytest/openvswitch-1.9.0/lib/unaligned.h
/home/lsch/mytest/openvswitch-1.9.0/lib/unicode.c
/home/lsch/mytest/openvswitch-1.9.0/lib/unicode.h
/home/lsch/mytest/openvswitch-1.9.0/lib/unixctl.c
/home/lsch/mytest/openvswitch-1.9.0/lib/unixctl.h
/home/lsch/mytest/openvswitch-1.9.0/lib/util.c
/home/lsch/mytest/openvswitch-1.9.0/lib/util.h
/home/lsch/mytest/openvswitch-1.9.0/lib/uuid.c
/home/lsch/mytest/openvswitch-1.9.0/lib/uuid.h
/home/lsch/mytest/openvswitch-1.9.0/lib/valgrind.h
/home/lsch/mytest/openvswitch-1.9.0/lib/vconn-provider.h
/home/lsch/mytest/openvswitch-1.9.0/lib/vconn-stream.c
/home/lsch/mytest/openvswitch-1.9.0/lib/vconn.c
/home/lsch/mytest/openvswitch-1.9.0/lib/vconn.h
/home/lsch/mytest/openvswitch-1.9.0/lib/vlan-bitmap.c
/home/lsch/mytest/openvswitch-1.9.0/lib/vlan-bitmap.h
/home/lsch/mytest/openvswitch-1.9.0/lib/vlandev.c
/home/lsch/mytest/openvswitch-1.9.0/lib/vlandev.h
/home/lsch/mytest/openvswitch-1.9.0/lib/vlog.c
/home/lsch/mytest/openvswitch-1.9.0/lib/vlog.h
/home/lsch/mytest/openvswitch-1.9.0/lib/vswitch-idl.c
/home/lsch/mytest/openvswitch-1.9.0/lib/vswitch-idl.h
/home/lsch/mytest/openvswitch-1.9.0/lib/worker.c
/home/lsch/mytest/openvswitch-1.9.0/lib/worker.h
/home/lsch/mytest/openvswitch-1.9.0/ofproto/collectors.c
/home/lsch/mytest/openvswitch-1.9.0/ofproto/collectors.h
/home/lsch/mytest/openvswitch-1.9.0/ofproto/connmgr.c
/home/lsch/mytest/openvswitch-1.9.0/ofproto/connmgr.h
/home/lsch/mytest/openvswitch-1.9.0/ofproto/fail-open.c
/home/lsch/mytest/openvswitch-1.9.0/ofproto/fail-open.h
/home/lsch/mytest/openvswitch-1.9.0/ofproto/in-band.c
/home/lsch/mytest/openvswitch-1.9.0/ofproto/in-band.h
/home/lsch/mytest/openvswitch-1.9.0/ofproto/names.c
/home/lsch/mytest/openvswitch-1.9.0/ofproto/netflow.c
/home/lsch/mytest/openvswitch-1.9.0/ofproto/netflow.h
/home/lsch/mytest/openvswitch-1.9.0/ofproto/ofproto-dpif-governor.c
/home/lsch/mytest/openvswitch-1.9.0/ofproto/ofproto-dpif-governor.h
/home/lsch/mytest/openvswitch-1.9.0/ofproto/ofproto-dpif-sflow.c
/home/lsch/mytest/openvswitch-1.9.0/ofproto/ofproto-dpif-sflow.h
/home/lsch/mytest/openvswitch-1.9.0/ofproto/ofproto-dpif.c
/home/lsch/mytest/openvswitch-1.9.0/ofproto/ofproto-provider.h
/home/lsch/mytest/openvswitch-1.9.0/ofproto/ofproto.c
/home/lsch/mytest/openvswitch-1.9.0/ofproto/ofproto.h
/home/lsch/mytest/openvswitch-1.9.0/ofproto/pinsched.c
/home/lsch/mytest/openvswitch-1.9.0/ofproto/pinsched.h
/home/lsch/mytest/openvswitch-1.9.0/ofproto/pktbuf.c
/home/lsch/mytest/openvswitch-1.9.0/ofproto/pktbuf.h
/home/lsch/mytest/openvswitch-1.9.0/ovsdb/column.c
/home/lsch/mytest/openvswitch-1.9.0/ovsdb/column.h
/home/lsch/mytest/openvswitch-1.9.0/ovsdb/condition.c
/home/lsch/mytest/openvswitch-1.9.0/ovsdb/condition.h
/home/lsch/mytest/openvswitch-1.9.0/ovsdb/execution.c
/home/lsch/mytest/openvswitch-1.9.0/ovsdb/file.c
/home/lsch/mytest/openvswitch-1.9.0/ovsdb/file.h
/home/lsch/mytest/openvswitch-1.9.0/ovsdb/jsonrpc-server.c
/home/lsch/mytest/openvswitch-1.9.0/ovsdb/jsonrpc-server.h
/home/lsch/mytest/openvswitch-1.9.0/ovsdb/log.c
/home/lsch/mytest/openvswitch-1.9.0/ovsdb/log.h
/home/lsch/mytest/openvswitch-1.9.0/ovsdb/mutation.c
/home/lsch/mytest/openvswitch-1.9.0/ovsdb/mutation.h
/home/lsch/mytest/openvswitch-1.9.0/ovsdb/ovsdb-client.c
/home/lsch/mytest/openvswitch-1.9.0/ovsdb/ovsdb-server.c
/home/lsch/mytest/openvswitch-1.9.0/ovsdb/ovsdb-tool.c
/home/lsch/mytest/openvswitch-1.9.0/ovsdb/ovsdb.c
/home/lsch/mytest/openvswitch-1.9.0/ovsdb/ovsdb.h
/home/lsch/mytest/openvswitch-1.9.0/ovsdb/query.c
/home/lsch/mytest/openvswitch-1.9.0/ovsdb/query.h
/home/lsch/mytest/openvswitch-1.9.0/ovsdb/row.c
/home/lsch/mytest/openvswitch-1.9.0/ovsdb/row.h
/home/lsch/mytest/openvswitch-1.9.0/ovsdb/server.c
/home/lsch/mytest/openvswitch-1.9.0/ovsdb/server.h
/home/lsch/mytest/openvswitch-1.9.0/ovsdb/table.c
/home/lsch/mytest/openvswitch-1.9.0/ovsdb/table.h
/home/lsch/mytest/openvswitch-1.9.0/ovsdb/transaction.c
/home/lsch/mytest/openvswitch-1.9.0/ovsdb/transaction.h
/home/lsch/mytest/openvswitch-1.9.0/ovsdb/trigger.c
/home/lsch/mytest/openvswitch-1.9.0/ovsdb/trigger.h
/home/lsch/mytest/openvswitch-1.9.0/tests/idltest.c
/home/lsch/mytest/openvswitch-1.9.0/tests/idltest.h
/home/lsch/mytest/openvswitch-1.9.0/tests/test-aes128.c
/home/lsch/mytest/openvswitch-1.9.0/tests/test-bundle.c
/home/lsch/mytest/openvswitch-1.9.0/tests/test-byte-order.c
/home/lsch/mytest/openvswitch-1.9.0/tests/test-classifier.c
/home/lsch/mytest/openvswitch-1.9.0/tests/test-csum.c
/home/lsch/mytest/openvswitch-1.9.0/tests/test-file_name.c
/home/lsch/mytest/openvswitch-1.9.0/tests/test-flows.c
/home/lsch/mytest/openvswitch-1.9.0/tests/test-hash.c
/home/lsch/mytest/openvswitch-1.9.0/tests/test-heap.c
/home/lsch/mytest/openvswitch-1.9.0/tests/test-hmap.c
/home/lsch/mytest/openvswitch-1.9.0/tests/test-json.c
/home/lsch/mytest/openvswitch-1.9.0/tests/test-jsonrpc.c
/home/lsch/mytest/openvswitch-1.9.0/tests/test-list.c
/home/lsch/mytest/openvswitch-1.9.0/tests/test-lockfile.c
/home/lsch/mytest/openvswitch-1.9.0/tests/test-multipath.c
/home/lsch/mytest/openvswitch-1.9.0/tests/test-netflow.c
/home/lsch/mytest/openvswitch-1.9.0/tests/test-odp.c
/home/lsch/mytest/openvswitch-1.9.0/tests/test-ovsdb.c
/home/lsch/mytest/openvswitch-1.9.0/tests/test-packets.c
/home/lsch/mytest/openvswitch-1.9.0/tests/test-random.c
/home/lsch/mytest/openvswitch-1.9.0/tests/test-reconnect.c
/home/lsch/mytest/openvswitch-1.9.0/tests/test-sha1.c
/home/lsch/mytest/openvswitch-1.9.0/tests/test-stp.c
/home/lsch/mytest/openvswitch-1.9.0/tests/test-strtok_r.c
/home/lsch/mytest/openvswitch-1.9.0/tests/test-timeval.c
/home/lsch/mytest/openvswitch-1.9.0/tests/test-type-props.c
/home/lsch/mytest/openvswitch-1.9.0/tests/test-unix-socket.c
/home/lsch/mytest/openvswitch-1.9.0/tests/test-util.c
/home/lsch/mytest/openvswitch-1.9.0/tests/test-uuid.c
/home/lsch/mytest/openvswitch-1.9.0/tests/test-vconn.c
/home/lsch/mytest/openvswitch-1.9.0/utilities/nlmon.c
/home/lsch/mytest/openvswitch-1.9.0/utilities/ovs-appctl.c
/home/lsch/mytest/openvswitch-1.9.0/utilities/ovs-benchmark.c
/home/lsch/mytest/openvswitch-1.9.0/utilities/ovs-controller.c
/home/lsch/mytest/openvswitch-1.9.0/utilities/ovs-dpctl.c
/home/lsch/mytest/openvswitch-1.9.0/utilities/ovs-ofctl.c
/home/lsch/mytest/openvswitch-1.9.0/utilities/ovs-vlan-bug-workaround.c
/home/lsch/mytest/openvswitch-1.9.0/utilities/ovs-vsctl.c
/home/lsch/mytest/openvswitch-1.9.0/vswitchd/bridge.c
/home/lsch/mytest/openvswitch-1.9.0/vswitchd/bridge.h
/home/lsch/mytest/openvswitch-1.9.0/vswitchd/ovs-brcompatd.c
/home/lsch/mytest/openvswitch-1.9.0/vswitchd/ovs-vswitchd.c
/home/lsch/mytest/openvswitch-1.9.0/vswitchd/system-stats.c
/home/lsch/mytest/openvswitch-1.9.0/vswitchd/system-stats.h
/home/lsch/mytest/openvswitch-1.9.0/vswitchd/xenserver.c
/home/lsch/mytest/openvswitch-1.9.0/vswitchd/xenserver.h
lib/dhparams.h
lib/netflow.h
lib/odp-util.h
lib/table.h
lib/vswitch-idl.h
ofproto/netflow.h
ofproto/ofproto-provider.h
ofproto/ofproto.h
ovsdb/column.h
ovsdb/condition.h
ovsdb/file.h
ovsdb/log.h
ovsdb/mutation.h
ovsdb/ovsdb.h
ovsdb/query.h
ovsdb/row.h
ovsdb/server.h
ovsdb/table.h
ovsdb/transaction.h
ovsdb/trigger.h
tests/idltest.h
